{"file": "dataset/ori_500/3d_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfig = plt.figure(figsize=(7.0, 7.0))\nax = fig.add_subplot(111, projection='3d')\n\nx = np.arange(0, 10, 1)\ny = np.arange(0, 10, 1)\nx, y = np.meshgrid(x, y)\n\nz = np.sin(np.sqrt(x**2 + y**2))\n\nax.plot_surface(x, y, z, color='blue')\nax.scatter([5], [5], [0.8], color='orange')\nax.scatter([5], [5], [0.6], color='orange')\nax.scatter([5], [5], [0.4], color='orange')\nax.scatter([5], [5], [0.2], color='orange')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Define the data\nheights = [0.5, 1.0, 1.5, 2.0, 2.5, 3.0, 3.5]\ncounts = [4, 3, 2, 1, 0.5, 0.25, 0.1]\n\n# Plot the data\nax.bar(heights, counts, color='red')\n\n# Set the title and labels\nax.set_title('Height vs Count')\nax.set_xlabel('Height')\nax.set_ylabel('Count')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_11.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig = plt.figure(figsize=(8.0, 6.0))\nax = fig.add_subplot(111, projection='3d')\n\n# Define the data for the sphere\nu = np.linspace(0, 2 * np.pi, 100)\nv = np.linspace(0, np.pi, 100)\nx = 5 * np.outer(np.cos(u), np.sin(v))\ny = 5 * np.outer(np.sin(u), np.sin(v))\nz = 5 * np.outer(np.ones(np.size(u)), np.cos(v))\n\n# Plot the sphere\nax.plot_surface(x, y, z, color='magenta')\n\n# Set the limits for the axes\nax.set_xlim(-5, 5)\nax.set_ylim(-5, 5)\nax.set_zlim(-5, 5)\n\n# Set the labels for the axes\nax.set_xlabel('X')\nax.set_ylabel('Y')\nax.set_zlabel('Z')\n\n# Display the plot\nplt.show()"}
{"file": "dataset/ori_500/3d_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig = plt.figure(figsize=(8.0, 6.0))\nax = fig.add_subplot(111, projection='3d')\n\n# Define the data points\nx = [-4, -2, 0, 2, 4]\ny = [0, 0, 0, 0, 0]\nz = [0, 0, 0, 0, 0]\n\n# Plot the data points\nax.scatter(x, y, z, c='r', marker='o')\n\n# Define the line of best fit\nx_line = np.linspace(-4, 4, 100)\ny_line = np.linspace(0, 0, 100)\nz_line = np.linspace(0, 20, 100)\n\n# Plot the line of best fit\nax.plot(x_line, y_line, z_line, c='b', linestyle='-')\n\n# Set the labels\nax.set_xlabel('Temperature (\u00b0C)')\nax.set_ylabel('Pressure (kPa)')\nax.set_zlabel('Volume (L)')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nyears = [2010, 2012, 2014, 2016, 2018]\npublic_schools = [0.3, 0.5, 0.7, 0.9, 0.8]\nprivate_schools = [0.4, 0.6, 0.8, 0.9, 0.7]\n\n# Create a 3D plot\nfig = plt.figure(figsize=(8.0, 6.0))\nax = fig.add_subplot(111, projection='3d')\n\n# Plot bars for public schools\nx = years\ny = [0]*len(years)\nz = [0]*len(years)\ndx = [0.1]*len(years)\ndy = [0.1]*len(years)\ndz = public_schools\nax.bar3d(x, y, z, dx, dy, dz, color='blue')\n\n# Plot bars for private schools\nx = years\ny = [0]*len(years)\nz = [0]*len(years)\ndx = [0.1]*len(years)\ndy = [0.1]*len(years)\ndz = private_schools\nax.bar3d(x, y, z, dx, dy, dz, color='orange')\n\n# Set labels and title\nax.set_xlabel('Year')\nax.set_ylabel('Type')\nax.set_zlabel('Student to Teacher Ratio')\nax.set_title('Student to Teacher Ratio by School Type')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Define the data for the plot\nx = np.linspace(0, 10, 100)\ny = np.sin(x)\n\n# Plot the data\nax.plot(x, y, color='blue')\n\n# Set the title and labels\nax.set_title('Sine Wave')\nax.set_xlabel('Time (s)')\nax.set_ylabel('Amplitude')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the first graph\nyears = [2010, 2012, 2014, 2016, 2018]\nsectors = ['AI', 'Healthcare', 'Finance', 'Retail', 'Energy']\ninvestment = [3, 5, 7, 9, 11]\n\n# Data for the second graph\ntime_since_introduction = np.linspace(0, 10, 100)\nadoption_rate = np.sin(time_since_introduction)\n\n# Create a figure and a set of subplots\nfig, axs = plt.subplots(1, 2, figsize=(10, 8))\n\n# Plot the first graph\naxs[0].barh(sectors, investment, color='green')\naxs[0].set_xlabel('Investment (Billion USD)')\naxs[0].set_title('Investment by Sector')\n\n# Plot the second graph\naxs[1].plot(time_since_introduction, adoption_rate, color='blue')\naxs[1].set_xlabel('Time Since Introduction (Years)')\naxs[1].set_ylabel('Adoption Rate')\naxs[1].set_title('Adoption Rate Over Time')\n\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 7))\n\n# Define the function f(x)\ndef f(x):\n    return x**2 - 2*x + 1\n\n# Generate x values\nx = np.linspace(-1, 1, 100)\n\n# Calculate y values\ny = f(x)\n\n# Plot the function\nax.plot(x, y, 'r-')\n\n# Set the title\nax.set_title('f(x)')\n\n# Set the x and y limits\nax.set_xlim(-1, 1)\nax.set_ylim(0, 1)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig = plt.figure(figsize=(10.0, 6.0))\nax = fig.add_subplot(111, projection='3d')\n\n# Define the data for the plot\nx = np.linspace(1, 6, 10)\ny = np.linspace(1, 6, 10)\nx, y = np.meshgrid(x, y)\nz = np.sin(np.sqrt(x**2 + y**2))\n\n# Plot the data\nsurf = ax.plot_surface(x, y, z, cmap='viridis')\n\n# Set the title and labels\nax.set_title('CIFAR10 Spiking ResNet18 T=6')\nax.set_xlabel('tau')\nax.set_ylabel('t')\nax.set_zlabel('accuracy (%)')\n\n# Add a color bar which maps values to colors\nfig.colorbar(surf, shrink=0.5, aspect=5)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(15, 10))\n\n# Define the data for the plot\nx = np.linspace(-100, 100, 100)\ny = np.linspace(-100, 100, 100)\nX, Y = np.meshgrid(x, y)\nZ = np.sin(np.sqrt(X**2 + Y**2))\n\n# Plot the surface\nsurf = ax.plot_surface(X, Y, Z, cmap='viridis')\n\n# Set the labels\nax.set_xlabel('m')\nax.set_ylabel('n')\nax.set_zlabel('Freedom')\n\n# Add a color bar which maps values to colors\nfig.colorbar(surf, shrink=0.5, aspect=5)\n\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(7, 7))\n\n# Set the background color of the plot\nax.set_facecolor('lightgray')\n\n# Set the limits of the x and y axes\nax.set_xlim(0, 1)\nax.set_ylim(0, 1)\n\n# Draw a rectangle representing the cube\nrect = plt.Rectangle((0.2, 0.2), 0.6, 0.6, fill=False, edgecolor='black')\nax.add_patch(rect)\n\n# Draw a line graph representing the first line\nline1 = np.array([[0.3, 0.4], [0.5, 0.6]])\nax.plot(line1[:, 0], line1[:, 1], 'o-', color='orange')\n\n# Draw a line graph representing the second line\nline2 = np.array([[0.4, 0.5], [0.6, 0.7]])\nax.plot(line2[:, 0], line2[:, 1], 'o-', color='orange')\n\n# Draw a line graph representing the third line\nline3 = np.array([[0.5, 0.6], [0.7, 0.8]])\nax.plot(line3[:, 0], line3[:, 1], 'o-', color='orange')\n\n# Draw a line graph representing the fourth line\nline4 = np.array([[0.6, 0.7], [0.8, 0.9]])\nax.plot(line4[:, 0], line4[:, 1], 'o-', color='orange')\n\n# Draw a line graph representing the fifth line\nline5 = np.array([[0.7, 0.8], [0.9, 1.0]])\nax.plot(line5[:, 0], line5[:, 1], 'o-', color='orange')\n\n# Draw a line graph representing the sixth line\nline6 = np.array([[0.8, 0.9], [1.0, 1.1]])\nax.plot(line6[:, 0], line6[:, 1], 'o-', color='orange')\n\n# Draw a line graph representing the seventh line\nline7 = np.array([[0.9, 1.0], [1.1, 1.2]])\nax.plot(line7[:, 0], line7[:, 1], 'o-', color='orange')\n\n# Draw a line graph representing the eighth line\nline8 = np.array([[1.0, 1.1], [1.2, 1.3]])\nax.plot(line8[:, 0], line8[:, 1], 'o-', color='orange')\n\n# Draw a line graph representing the ninth line\nline9 = np.array([[1.1, 1.2], [1.3, 1.4]])\nax.plot(line9[:, 0], line9[:, 1], 'o-', color='orange')\n\n# Draw a line graph representing the tenth line\nline10 = np.array([[1.2, 1.3], [1.4, 1.5]])\nax.plot(line10[:, 0], line10[:, 1], 'o-', color='orange')\n\n# Draw a line graph representing the eleventh line\nline11 = np.array([[1.3, 1.4], [1.5, 1.6]])\nax.plot(line11[:, 0], line11[:, 1], 'o-', color='orange')\n\n# Draw a line graph representing the twelfth line\nline12 = np.array([[1.4, 1.5], [1.6, 1.7]])\nax.plot(line12[:, 0], line12[:, 1], 'o-', color='orange')\n\n# Draw a line graph representing the thirteenth line\nline13 = np.array([[1.5, 1.6], [1.7, 1.8]])\nax.plot(line13[:, 0], line13[:, 1], 'o-', color='orange')\n\n# Draw a line graph representing the fourteenth line\nline14 = np.array([[1.6, 1.7], [1.8, 1.9]])\nax.plot(line14[:, 0], line14[:, 1], 'o-', color='orange')\n\n# Draw a line graph representing the fifteenth line\nline15 = np.array([[1.7, 1.8], [1.9, 2.0]])\nax.plot(line15[:, 0], line15[:, 1], 'o-', color='orange')\n\n# Draw a line graph representing the sixteenth line\nline16 = np.array([[1.8, 1.9], [2.0, 2.1]])\nax.plot(line16[:, 0], line16[:, 1], 'o-', color='orange')\n\n# Draw a line graph representing the seventeenth line\nline17 = np.array([[1.9, 2.0], [2.1, 2.2]])\nax.plot(line17[:, 0], line17[:, 1], 'o-', color='orange')\n\n# Draw a line graph representing the eighteenth line\nline18 = np.array([[2.0, 2.1], [2.2, 2.3]])\nax.plot(line18[:, 0], line18[:, 1], 'o-', color='orange')\n\n# Draw a line graph representing the nineteenth line\nline19 = np.array([[2.1, 2.2], [2.3, 2.4]])\nax.plot(line19[:, 0], line19[:, 1], 'o-', color='orange')\n\n# Draw a line graph representing the twentieth line\nline20 = np.array([[2.2, 2.3], [2.4, 2.5]])\nax.plot(line20[:, 0], line20[:, 1], 'o-', color='orange')\n\n# Draw a line graph representing the twenty-first line\nline21 = np.array([[2.3, 2.4], [2.5, 2.6]])\nax.plot(line21[:, 0], line21[:, 1], 'o-', color='orange')\n\n# Draw a line graph representing the twenty-second line\nline22 = np.array([[2.4, 2.5], [2.6, 2.7]])\nax.plot(line22[:, 0], line22[:, 1], 'o-', color='orange')\n\n# Draw a line graph representing the twenty-third line\nline23 = np.array([[2.5, 2.6], [2.7, 2.8]])\nax.plot(line23[:, 0], line23[:, 1], 'o-', color='orange')\n\n# Draw a line graph representing the twenty-fourth line\nline24 = np.array([[2.6, 2.7], [2.8, 2.9]])\nax.plot(line24[:, 0], line24[:, 1], 'o-', color='orange')\n\n# Draw a line graph representing the twenty-fifth line\nline25 = np.array([[2.7, 2.8], [2.9, 3.0]])\nax.plot(line25[:, 0], line25[:, 1], 'o-', color='orange')\n\n# Draw a line graph representing the twenty-sixth line\nline26 = np.array([[2.8, 2.9], [3.0, 3.1]])\nax.plot(line26[:, 0], line26[:, 1], 'o-', color='orange')\n\n# Draw a line graph representing the twenty-seventh line\nline27 = np.array([[2.9, 3.0], [3.1, 3.2]])\nax.plot(line27[:, 0], line27[:, 1], 'o-', color='orange')\n\n# Draw a line graph representing the twenty-eighth line\nline28 = np.array([[3.0, 3.1], [3.2, 3.3]])\nax.plot(line28[:, 0], line28[:, 1], 'o-', color='orange')\n\n# Draw a line graph representing the twenty-ninth line\nline29 = np.array([[3.1, 3.2], [3.3, 3.4]])\nax.plot(line29[:, 0], line29[:, 1], 'o-', color='orange')\n\n# Draw a line graph representing the thirtieth line\nline30 = np.array([[3.2, 3.3], [3.4, 3.5]])\nax.plot(line30[:, 0], line30[:, 1], 'o-', color='orange')\n\n# Draw a line graph representing the thirty-first line\nline31 = np.array([[3.3, 3.4], [3.5, 3.6]])\nax.plot(line31[:, 0], line31[:, 1], 'o-', color='orange')\n\n# Draw a line graph representing the thirty-second line\nline32 = np.array([[3.4, 3.5], [3.6, 3.7]])\nax.plot(line32[:, 0], line32[:, 1], 'o-', color='orange')\n\n# Draw a line graph representing the thirty-third line\nline33 = np.array([[3.5, 3.6], [3.7, 3.8]])\nax.plot(line33[:, 0], line33[:, 1], 'o-', color='orange')\n\n# Draw a line graph representing the thirty-fourth line\nline34 = np.array([[3.6, 3.7], [3.8, 3.9]])\nax.plot(line34[:, 0], line34[:, 1], 'o-', color='orange')\n\n# Draw a line graph representing the thirty-fifth line\nline35 = np.array([[3.7, 3.8], [3.9, 4.0]])\nax.plot(line35[:, 0], line35[:, 1], 'o-', color='orange')\n\n# Draw a line graph representing the thirty-sixth line\nline36 = np.array([[3.8, 3.9], [4.0, 4.1]])\nax.plot(line36[:, 0], line36[:, 1], 'o-', color='orange')\n\n# Draw a line graph representing the thirty-seventh line\nline37 = np.array([[3.9, 4.0], [4.1, 4.2]])\nax.plot(line37[:, 0], line37[:, 1], 'o-', color='orange')\n\n# Draw a line graph representing the thirty-eighth line\nline38 = np.array([[4.0, 4.1], [4.2, 4.3]])\nax.plot(line38[:, 0], line38[:, 1], 'o-', color='orange')\n\n# Draw a line graph representing the thirty-ninth line\nline39 = np.array([[4.1, 4.2], [4.3, 4.4]])\nax.plot(line39[:, 0], line39[:, 1], 'o-', color='orange')\n\n# Draw a line graph representing the fortieth line\nline40 = np.array([[4.2, 4.3], [4.4, 4.5]])\nax.plot(line40[:, 0], line40[:, 1], 'o-', color='orange')\n\n# Draw a line graph representing the forty-first line\nline41 = np.array([[4.3, 4.4], [4.5, 4.6]])\nax.plot(line41[:, 0], line41[:, 1], 'o-', color='orange')\n\n# Draw a line graph representing the forty-second line\nline42 = np.array([[4.4, 4.5], [4.6, 4.7]])\nax.plot(line42[:, 0], line42[:, 1], 'o-', color='orange')\n\n# Draw a line graph representing the forty-third line\nline43 = np.array([[4.5, 4.6], [4.7, 4.8]])\nax.plot(line43[:, 0], line43[:, 1], 'o-', color='orange')\n\n# Draw a line graph representing the forty-fourth line\nline44 = np.array([[4.6, 4.7], [4.8, 4.9]])\nax.plot(line44[:, 0], line44[:, 1], 'o-', color='orange')\n\n# Draw a line graph representing the forty-fifth line\nline45 = np.array([[4.7, 4.8], [4.9, 5.0]])\nax.plot(line45[:, 0], line45[:, 1], 'o-', color='orange')\n\n# Draw a line graph representing the forty-sixth line\nline46 = np.array([[4.8, 4.9], [5.0, 5.1]])\nax.plot(line46[:, 0], line46[:, 1], 'o-', color='orange')\n\n# Draw a line graph representing the forty-seventh line\nline47 = np.array([[4.9, 5.0], [5.1, 5.2]])\nax.plot(line47[:, 0], line47[:, 1], 'o-', color='orange')\n\n# Draw a line graph representing the forty-eighth line\nline48 = np.array([[5.0, 5.1], [5.2, 5.3]])\nax.plot(line48[:, 0], line48[:, 1], 'o-', color='orange')\n\n# Draw a line graph representing the forty-ninth line\nline49 = np.array([[5.1, 5.2], [5.3, 5.4]])\nax.plot(line49[:, 0], line49[:, 1], 'o-', color='orange')\n\n# Draw a line graph representing the fiftieth line\nline50 = np.array([[5.2, 5.3], [5.4, 5.5]])\nax.plot(line50[:, 0], line50[:, 1], 'o-', color='orange')\n\n# Draw a line graph representing the fifty-first line\nline51 = np.array([[5.3, 5.4], [5.5, 5.6]])\nax.plot(line51[:, 0], line51[:, 1], 'o-', color='orange')\n\n# Draw a line graph representing the fifty-second line\nline52 = np.array([[5.4, 5.5], [5.6, 5.7]])\nax.plot(line52[:, 0], line52[:, 1], 'o-', color='orange')\n\n# Draw a line graph representing the fifty-third line\nline53 = np.array([[5.5, 5.6], [5.7, 5.8]])\nax.plot(line53[:, 0], line53[:, 1], 'o-', color='orange')\n\n# Draw a line graph representing the fifty-fourth line\nline54 = np.array([[5.6, 5.7], [5.8, 5.9]])\nax.plot(line54[:, 0], line54[:, 1], 'o-', color='orange')\n\n# Draw a line graph representing the fifty-fifth line\nline55 = np.array([[5.7, 5.8], [5.9, 6.0]])\nax.plot(line55[:, 0], line55[:, 1], 'o-', color='orange')\n\n# Draw a line graph representing the fifty-sixth line\nline56 = np.array([[5.8, 5.9], [6.0, 6.1]])\nax.plot(line56[:, 0], line56[:, 1], 'o-', color='orange')\n\n# Draw a line graph representing the fifty-seventh line\nline57 = np.array([[5.9, 6.0], [6.1, 6.2]])\nax.plot(line57[:, 0], line57[:, 1], 'o-', color='orange')\n\n# Draw a line graph representing the fifty-eighth line\nline58 = np.array([[6.0, 6.1], [6.2, 6.3]])\nax.plot(line58[:, 0], line58[:, 1], 'o-', color='orange')\n\n# Draw a line graph representing the fifty-ninth line\nline59 = np.array([[6.1, 6.2], [6.3, 6.4]])\nax.plot(line59[:, 0], line59[:, 1], 'o-', color='orange')\n\n# Draw a line graph representing the sixtieth line\nline60 = np.array([[6.2, 6.3], [6.4, 6.5]])\nax.plot(line60[:, 0], line60[:, 1], 'o-', color='orange')\n\n# Draw a line graph representing the sixty-first line\nline61 = np.array([[6.3, 6.4], [6.5, 6.6]])\nax.plot(line61[:, 0], line61[:, 1], 'o-', color='orange')\n\n# Draw a line graph representing the sixty-second line\nline62 = np.array([[6.4, 6.5], [6.6, 6.7]])\nax.plot(line62[:, 0], line62[:, 1], 'o-', color='orange')\n\n# Draw a line graph representing the sixty-third line\nline63 = np.array([[6.5, 6.6], [6.7, 6.8]])\nax.plot(line63[:, 0], line63[:, 1], 'o-', color='orange')\n\n# Draw a line graph representing the sixty-fourth line\nline64 = np.array([[6.6, 6.7], [6.8, 6.9]])\nax.plot(line64[:, 0], line64[:, 1], 'o-', color='orange')\n\n# Draw a line graph representing the sixty-fifth line\nline65 = np.array([[6.7, 6.8], [6.9, 7.0]])\nax.plot(line65[:, 0], line65[:, 1], 'o-', color='orange')\n\n# Draw a line graph representing the sixty-sixth line\nline66 = np.array([[6.8, 6.9], [7.0, 7.1]])\nax.plot(line66[:, 0], line66[:, 1], 'o-', color='orange')\n\n# Draw a line graph representing the sixty-seventh line\nline67 ="}
{"file": "dataset/ori_500/3d_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig = plt.figure(figsize=(8.0, 8.0))\nax = fig.add_subplot(111, projection='3d')\n\n# Define the grid\nx = np.linspace(-4, 4, 100)\ny = np.linspace(-2, 2, 100)\nx, y = np.meshgrid(x, y)\nz = np.sin(np.sqrt(x**2 + y**2))\n\n# Plot the surface\nsurf = ax.plot_surface(x, y, z, cmap='coolwarm', linewidth=0, antialiased=False)\n\n# Set the colorbar\ncbar = fig.colorbar(surf, shrink=0.5, aspect=5)\ncbar.set_label('Colorbar Label')\n\n# Set the labels\nax.set_xlabel('Bus')\nax.set_ylabel('Time')\nax.set_zlabel('Z Label')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Define the data for the bar chart\nx = np.arange(1, 5)\ny = [3, 4, 2, 1]\nwidth = 0.35\n\n# Create a bar chart\nrects = ax.bar(x, y, width, label='Scores')\n\n# Add some text for labels, title, and custom x-axis tick labels, etc.\nax.set_xlabel('Player')\nax.set_ylabel('Score')\nax.set_title('Player Scores')\nax.set_xticks(x)\nax.set_xticklabels(['Player 1', 'Player 2', 'Player 3', 'Player 4'])\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig = plt.figure(figsize=(8.0, 6.0))\nax = fig.add_subplot(111, projection='3d')\n\n# Define the data points\nx = [10, 20, 30, 40, 50]\ny = [10, 20, 30, 40, 50]\nz = [10, 20, 30, 40, 50]\n\n# Plot the data points\nax.scatter(x, y, z, c='r', marker='o')\n\n# Set the labels\nax.set_xlabel('Age')\nax.set_ylabel('Income')\nax.set_zlabel('Debt')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig = plt.figure(figsize=(8.0, 6.0))\nax = fig.add_subplot(111, projection='3d')\n\n# Define the data for the plot\nx = np.linspace(0, 50, 100)\ny = np.linspace(0, 50, 100)\nx, y = np.meshgrid(x, y)\nz = np.sin(np.sqrt(x**2 + y**2))\n\n# Plot the surface\nsurf = ax.plot_surface(x, y, z, cmap='viridis')\n\n# Set the labels\nax.set_xlabel('Time (s)')\nax.set_ylabel('Temperature (\u00b0C)')\nax.set_zlabel('Depth (m)')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 8))\n\n# Set the background color of the plot\nax.set_facecolor('white')\n\n# Set the x-axis limits\nax.set_xlim(-20, 20)\n\n# Set the y-axis limits\nax.set_ylim(0, 12)\n\n# Set the x-axis label\nax.set_xlabel('LR Test')\n\n# Set the y-axis label\nax.set_ylabel('Density')\n\n# Set the title of the plot\nax.set_title('Histograms of LR Test')\n\n# Create a rectangle for the vertical line\nrectangle = plt.Rectangle((-10, 0), 20, 12, fc='blue', ec='black')\nax.add_patch(rectangle)\n\n# Create a rectangle for the horizontal line\nrectangle = plt.Rectangle((0, 0), 20, 12, fc='red', ec='black')\nax.add_patch(rectangle)\n\n# Create a rectangle for the vertical line\nrectangle = plt.Rectangle((-5, 0), 10, 12, fc='green', ec='black')\nax.add_patch(rectangle)\n\n# Create a rectangle for the horizontal line\nrectangle = plt.Rectangle((0, 0), 20, 12, fc='yellow', ec='black')\nax.add_patch(rectangle)\n\n# Create a rectangle for the vertical line\nrectangle = plt.Rectangle((-3, 0), 6, 12, fc='orange', ec='black')\nax.add_patch(rectangle)\n\n# Create a rectangle for the horizontal line\nrectangle = plt.Rectangle((0, 0), 20, 12, fc='purple', ec='black')\nax.add_patch(rectangle)\n\n# Create a rectangle for the vertical line\nrectangle = plt.Rectangle((-1, 0), 2, 12, fc='brown', ec='black')\nax.add_patch(rectangle)\n\n# Create a rectangle for the horizontal line\nrectangle = plt.Rectangle((0, 0), 20, 12, fc='pink', ec='black')\nax.add_patch(rectangle)\n\n# Create a rectangle for the vertical line\nrectangle = plt.Rectangle((0, 0), 20, 12, fc='cyan', ec='black')\nax.add_patch(rectangle)\n\n# Create a rectangle for the horizontal line\nrectangle = plt.Rectangle((0, 0), 20, 12, fc='magenta', ec='black')\nax.add_patch(rectangle)\n\n# Create a rectangle for the vertical line\nrectangle = plt.Rectangle((0, 0), 20, 12, fc='lime', ec='black')\nax.add_patch(rectangle)\n\n# Create a rectangle for the horizontal line\nrectangle = plt.Rectangle((0, 0), 20, 12, fc='silver', ec='black')\nax.add_patch(rectangle)\n\n# Create a rectangle for the vertical line\nrectangle = plt.Rectangle((0, 0), 20, 12, fc='gold', ec='black')\nax.add_patch(rectangle)\n\n# Create a rectangle for the horizontal line\nrectangle = plt.Rectangle((0, 0), 20, 12, fc='navy', ec='black')\nax.add_patch(rectangle)\n\n# Create a rectangle for the vertical line\nrectangle = plt.Rectangle((0, 0), 20, 12, fc='olive', ec='black')\nax.add_patch(rectangle)\n\n# Create a rectangle for the horizontal line\nrectangle = plt.Rectangle((0, 0), 20, 12, fc='maroon', ec='black')\nax.add_patch(rectangle)\n\n# Create a rectangle for the vertical line\nrectangle = plt.Rectangle((0, 0), 20, 12, fc='aqua', ec='black')\nax.add_patch(rectangle)\n\n# Create a rectangle for the horizontal line\nrectangle = plt.Rectangle((0, 0), 20, 12, fc='fuchsia', ec='black')\nax.add_patch(rectangle)\n\n# Create a rectangle for the vertical line\nrectangle = plt.Rectangle((0, 0), 20, 12, fc='silver', ec='black')\nax.add_patch(rectangle)\n\n# Create a rectangle for the horizontal line\nrectangle = plt.Rectangle((0, 0), 20, 12, fc='gold', ec='black')\nax.add_patch(rectangle)\n\n# Create a rectangle for the vertical line\nrectangle = plt.Rectangle((0, 0), 20, 12, fc='navy', ec='black')\nax.add_patch(rectangle)\n\n# Create a rectangle for the horizontal line\nrectangle = plt.Rectangle((0, 0), 20, 12, fc='olive', ec='black')\nax.add_patch(rectangle)\n\n# Create a rectangle for the vertical line\nrectangle = plt.Rectangle((0, 0), 20, 12, fc='maroon', ec='black')\nax.add_patch(rectangle)\n\n# Create a rectangle for the horizontal line\nrectangle = plt.Rectangle((0, 0), 20, 12, fc='aqua', ec='black')\nax.add_patch(rectangle)\n\n# Create a rectangle for the vertical line\nrectangle = plt.Rectangle((0, 0), 20, 12, fc='fuchsia', ec='black')\nax.add_patch(rectangle)\n\n# Create a rectangle for the horizontal line\nrectangle = plt.Rectangle((0, 0), 20, 12, fc='silver', ec='black')\nax.add_patch(rectangle)\n\n# Create a rectangle for the vertical line\nrectangle = plt.Rectangle((0, 0), 20, 12, fc='gold', ec='black')\nax.add_patch(rectangle)\n\n# Create a rectangle for the horizontal line\nrectangle = plt.Rectangle((0, 0), 20, 12, fc='navy', ec='black')\nax.add_patch(rectangle)\n\n# Create a rectangle for the vertical line\nrectangle = plt.Rectangle((0, 0), 20, 12, fc='olive', ec='black')\nax.add_patch(rectangle)\n\n# Create a rectangle for the horizontal line\nrectangle = plt.Rectangle((0, 0), 20, 12, fc='maroon', ec='black')\nax.add_patch(rectangle)\n\n# Create a rectangle for the vertical line\nrectangle = plt.Rectangle((0, 0), 20, 12, fc='aqua', ec='black')\nax.add_patch(rectangle)\n\n# Create a rectangle for the horizontal line\nrectangle = plt.Rectangle((0, 0), 20, 12, fc='fuchsia', ec='black')\nax.add_patch(rectangle)\n\n# Create a rectangle for the vertical line\nrectangle = plt.Rectangle((0, 0), 20, 12, fc='silver', ec='black')\nax.add_patch(rectangle)\n\n# Create a rectangle for the horizontal line\nrectangle = plt.Rectangle((0, 0), 20, 12, fc='gold', ec='black')\nax.add_patch(rectangle)\n\n# Create a rectangle for the vertical line\nrectangle = plt.Rectangle((0, 0), 20, 12, fc='navy', ec='black')\nax.add_patch(rectangle)\n\n# Create a rectangle for the horizontal line\nrectangle = plt.Rectangle((0, 0), 20, 12, fc='olive', ec='black')\nax.add_patch(rectangle)\n\n# Create a rectangle for the vertical line\nrectangle = plt.Rectangle((0, 0), 20, 12, fc='maroon', ec='black')\nax.add_patch(rectangle)\n\n# Create a rectangle for the horizontal line\nrectangle = plt.Rectangle((0, 0), 20, 12, fc='aqua', ec='black')\nax.add_patch(rectangle)\n\n# Create a rectangle for the vertical line\nrectangle = plt.Rectangle((0, 0), 20, 12, fc='fuchsia', ec='black')\nax.add_patch(rectangle)\n\n# Create a rectangle for the horizontal line\nrectangle = plt.Rectangle((0, 0), 20, 12, fc='silver', ec='black')\nax.add_patch(rectangle)\n\n# Create a rectangle for the vertical line\nrectangle = plt.Rectangle((0, 0), 20, 12, fc='gold', ec='black')\nax.add_patch(rectangle)\n\n# Create a rectangle for the horizontal line\nrectangle = plt.Rectangle((0, 0), 20, 12, fc='navy', ec='black')\nax.add_patch(rectangle)\n\n# Create a rectangle for the vertical line\nrectangle = plt.Rectangle((0, 0), 20, 12, fc='olive', ec='black')\nax.add_patch(rectangle)\n\n# Create a rectangle for the horizontal line\nrectangle = plt.Rectangle((0, 0), 20, 12, fc='maroon', ec='black')\nax.add_patch(rectangle)\n\n# Create a rectangle for the vertical line\nrectangle = plt.Rectangle((0, 0), 20, 12, fc='aqua', ec='black')\nax.add_patch(rectangle)\n\n# Create a rectangle for the horizontal line\nrectangle = plt.Rectangle((0, 0), 20, 12, fc='fuchsia', ec='black')\nax.add_patch(rectangle)\n\n# Create a rectangle for the vertical line\nrectangle = plt.Rectangle((0, 0), 20, 12, fc='silver', ec='black')\nax.add_patch(rectangle)\n\n# Create a rectangle for the horizontal line\nrectangle = plt.Rectangle((0, 0), 20, 12, fc='gold', ec='black')\nax.add_patch(rectangle)\n\n# Create a rectangle for the vertical line\nrectangle = plt.Rectangle((0, 0), 20, 12, fc='navy', ec='black')\nax.add_patch(rectangle)\n\n# Create a rectangle for the horizontal line\nrectangle = plt.Rectangle((0, 0), 20, 12, fc='olive', ec='black')\nax.add_patch(rectangle)\n\n# Create a rectangle for the vertical line\nrectangle = plt.Rectangle((0, 0), 20, 12, fc='maroon', ec='black')\nax.add_patch(rectangle)\n\n# Create a rectangle for the horizontal line\nrectangle = plt.Rectangle((0, 0), 20, 12, fc='aqua', ec='black')\nax.add_patch(rectangle)\n\n# Create a rectangle for the vertical line\nrectangle = plt.Rectangle((0, 0), 20, 12, fc='fuchsia', ec='black')\nax.add_patch(rectangle)\n\n# Create a rectangle for the horizontal line\nrectangle = plt.Rectangle((0, 0), 20, 12, fc='silver', ec='black')\nax.add_patch(rectangle)\n\n# Create a rectangle for the vertical line\nrectangle = plt.Rectangle((0, 0), 20, 12, fc='gold', ec='black')\nax.add_patch(rectangle)\n\n# Create a rectangle for the horizontal line\nrectangle = plt.Rectangle((0, 0), 20, 12, fc='navy', ec='black')\nax.add_patch(rectangle)\n\n# Create a rectangle for the vertical line\nrectangle = plt.Rectangle((0, 0), 20, 12, fc='olive', ec='black')\nax.add_patch(rectangle)\n\n# Create a rectangle for the horizontal line\nrectangle = plt.Rectangle((0, 0), 20, 12, fc='maroon', ec='black')\nax.add_patch(rectangle)\n\n# Create a rectangle for the vertical line\nrectangle = plt.Rectangle((0, 0), 20, 12, fc='aqua', ec='black')\nax.add_patch(rectangle)\n\n# Create a rectangle for the horizontal line\nrectangle = plt.Rectangle((0, 0), 20, 12, fc='fuchsia', ec='black')\nax.add_patch(rectangle)\n\n# Create a rectangle for the vertical line\nrectangle = plt.Rectangle((0, 0), 20, 12, fc='silver', ec='black')\nax.add_patch(rectangle)\n\n# Create a rectangle for the horizontal line\nrectangle = plt.Rectangle((0, 0), 20, 12, fc='gold', ec='black')\nax.add_patch(rectangle)\n\n# Create a rectangle for the vertical line\nrectangle = plt.Rectangle((0, 0), 20, 12, fc='navy', ec='black')\nax.add_patch(rectangle)\n\n# Create a rectangle for the horizontal line\nrectangle = plt.Rectangle((0, 0), 20, 12, fc='olive', ec='black')\nax.add_patch(rectangle)\n\n# Create a rectangle for the vertical line\nrectangle = plt.Rectangle((0, 0), 20, 12, fc='maroon', ec='black')\nax.add_patch(rectangle)\n\n# Create a rectangle for the horizontal line\nrectangle = plt.Rectangle((0, 0), 20, 12, fc='aqua', ec='black')\nax.add_patch(rectangle)\n\n# Create a rectangle for the vertical line\nrectangle = plt.Rectangle((0, 0), 20, 12, fc='fuchsia', ec='black')\nax.add_patch(rectangle)\n\n# Create a rectangle for the horizontal line\nrectangle = plt.Rectangle((0, 0), 20, 12, fc='silver', ec='black')\nax.add_patch(rectangle)\n\n# Create a rectangle for the vertical line\nrectangle = plt.Rectangle((0, 0), 20, 12, fc='gold', ec='black')\nax.add_patch(rectangle)\n\n# Create a rectangle for the horizontal line\nrectangle = plt.Rectangle((0, 0), 20, 12, fc='navy', ec='black')\nax.add_patch(rectangle)\n\n# Create a rectangle for the vertical line\nrectangle = plt.Rectangle((0, 0), 20, 12, fc='olive', ec='black')\nax.add_patch(rectangle)\n\n# Create a rectangle for the horizontal line\nrectangle = plt.Rectangle((0, 0), 20, 12, fc='maroon', ec='black')\nax.add_patch(rectangle)\n\n# Create a rectangle for the vertical line\nrectangle = plt.Rectangle((0, 0), 20, 12, fc='aqua', ec='black')\nax.add_patch(rectangle)\n\n# Create a rectangle for the horizontal line\nrectangle = plt.Rectangle((0, 0), 20, 12, fc='fuchsia', ec='black')\nax.add_patch(rectangle)\n\n# Create a rectangle for the vertical line\nrectangle = plt.Rectangle((0, 0), 20, 12, fc='silver', ec='black')\nax.add_patch(rectangle)\n\n# Create a rectangle for the horizontal line\nrectangle = plt.Rectangle((0, 0), 20, 12, fc='gold', ec='black')\nax.add_patch(rectangle)\n\n# Create a rectangle for the vertical line\nrectangle = plt.Rectangle((0, 0), 20, 12, fc='navy', ec='black')\nax.add_patch(rectangle)\n\n# Create a rectangle for the horizontal line\nrectangle = plt.Rectangle((0, 0), 20, 12, fc='olive', ec='black')\nax.add_patch(rectangle)\n\n# Create a rectangle for the vertical line\nrectangle = plt.Rectangle((0, 0), 20, 12, fc='maroon', ec='black')\nax.add_patch(rectangle)\n\n# Create a rectangle for the horizontal line\nrectangle = plt.Rectangle((0, 0), 20, 12, fc='aqua', ec='black')\nax.add_patch(rectangle)\n\n# Create a rectangle for the vertical line\nrectangle = plt.Rectangle((0, 0), 20, 12, fc='fuchsia', ec='black')\nax.add_patch(rectangle)\n\n# Create a rectangle for the horizontal line\nrectangle = plt.Rectangle((0, 0), 20, 12, fc='silver', ec='black')\nax.add_patch(rectangle)\n\n# Create a rectangle for the vertical line\nrectangle = plt.Rectangle((0, 0), 20, 12, fc='gold', ec='black')\nax.add_patch(rectangle)\n\n# Create a rectangle for the horizontal line\nrectangle = plt.Rectangle((0, 0), 20, 12, fc='navy', ec='black')\nax.add_patch(rectangle)\n\n# Create a rectangle for the vertical line\nrectangle = plt.Rectangle((0, 0), 20, 12, fc='olive', ec='black')\nax.add_patch(rectangle)\n\n# Create a rectangle for the horizontal line\nrectangle = plt.Rectangle((0, 0), 20, 12, fc='maroon', ec='black')\nax.add_patch(rectangle)\n\n# Create a rectangle for the vertical line\nrectangle = plt.Rectangle((0, 0), 20, 12, fc='aqua', ec='black')\nax.add_patch(rectangle)\n\n# Create a rectangle for the horizontal line\nrectangle = plt.Rectangle((0, 0), 20, 12, fc='fuchsia', ec='black')\nax.add_patch(rectangle)\n\n# Create a rectangle for the vertical line\nrectangle = plt.Rectangle((0, 0), 20, 12, fc='silver', ec='black')\nax.add_patch(rectangle)\n\n# Create a rectangle for the horizontal line\nrectangle = plt.Rectangle((0, 0), 20, 12, fc='gold', ec='black')\nax.add_patch(rectangle)\n\n# Create a rectangle for the vertical line\nrectangle = plt.Rectangle((0, 0), 20, 12, fc='navy', ec='black')\nax.add_patch(rectangle)\n\n# Create a rectangle for the horizontal line\nrectangle = plt.Rectangle((0, 0), 20, 12, fc='olive', ec='black')\nax.add_patch(rectangle)\n\n# Create a rectangle for the vertical line\nrectangle = plt.Rectangle((0, 0), 20, 12, fc='maroon', ec='black')\nax.add_patch(rectangle)\n\n# Create a rectangle for the horizontal line\nrectangle = plt.Rectangle((0, 0), 20, 12, fc='aqua', ec='black')\nax.add_patch(rectangle)\n\n# Create a rectangle for the vertical line\nrectangle = plt.Rectangle((0, 0), 20, 12, fc='fuchsia', ec='black')\nax.add_patch(rectangle)\n\n# Create a rectangle for the horizontal line\nrectangle"}
{"file": "dataset/ori_500/CB_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(7, 5))\n\n# Define the data points\nx = np.linspace(150, 400, 10)\ny1 = np.linspace(-2, -6, 10)\ny2 = np.linspace(-2, -6, 10)\n\n# Plot the data points\nax.plot(x, y1, 'bo-')\nax.plot(x, y2, 'go-')\n\n# Set the labels\nax.set_xlabel('Average Tracked ORB Feature Number')\nax.set_ylabel('Log (ATE RMSE)')\n\n# Add a rectangle for the severity\nrect = plt.Rectangle((150, -2), 250, 4, color='gray', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle for the correlation\nrect = plt.Rectangle((350, -2), 50, 4, color='gray', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle for the severity\nrect = plt.Rectangle((150, -2), 250, 4, color='gray', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle for the correlation\nrect = plt.Rectangle((350, -2), 50, 4, color='gray', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle for the severity\nrect = plt.Rectangle((150, -2), 250, 4, color='gray', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle for the correlation\nrect = plt.Rectangle((350, -2), 50, 4, color='gray', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle for the severity\nrect = plt.Rectangle((150, -2), 250, 4, color='gray', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle for the correlation\nrect = plt.Rectangle((350, -2), 50, 4, color='gray', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle for the severity\nrect = plt.Rectangle((150, -2), 250, 4, color='gray', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle for the correlation\nrect = plt.Rectangle((350, -2), 50, 4, color='gray', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle for the severity\nrect = plt.Rectangle((150, -2), 250, 4, color='gray', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle for the correlation\nrect = plt.Rectangle((350, -2), 50, 4, color='gray', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle for the severity\nrect = plt.Rectangle((150, -2), 250, 4, color='gray', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle for the correlation\nrect = plt.Rectangle((350, -2), 50, 4, color='gray', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle for the severity\nrect = plt.Rectangle((150, -2), 250, 4, color='gray', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle for the correlation\nrect = plt.Rectangle((350, -2), 50, 4, color='gray', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle for the severity\nrect = plt.Rectangle((150, -2), 250, 4, color='gray', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle for the correlation\nrect = plt.Rectangle((350, -2), 50, 4, color='gray', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle for the severity\nrect = plt.Rectangle((150, -2), 250, 4, color='gray', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle for the correlation\nrect = plt.Rectangle((350, -2), 50, 4, color='gray', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle for the severity\nrect = plt.Rectangle((150, -2), 250, 4, color='gray', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle for the correlation\nrect = plt.Rectangle((350, -2), 50, 4, color='gray', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle for the severity\nrect = plt.Rectangle((150, -2), 250, 4, color='gray', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle for the correlation\nrect = plt.Rectangle((350, -2), 50, 4, color='gray', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle for the severity\nrect = plt.Rectangle((150, -2), 250, 4, color='gray', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle for the correlation\nrect = plt.Rectangle((350, -2), 50, 4, color='gray', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle for the severity\nrect = plt.Rectangle((150, -2), 250, 4, color='gray', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle for the correlation\nrect = plt.Rectangle((350, -2), 50, 4, color='gray', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle for the severity\nrect = plt.Rectangle((150, -2), 250, 4, color='gray', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle for the correlation\nrect = plt.Rectangle((350, -2), 50, 4, color='gray', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle for the severity\nrect = plt.Rectangle((150, -2), 250, 4, color='gray', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle for the correlation\nrect = plt.Rectangle((350, -2), 50, 4, color='gray', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle for the severity\nrect = plt.Rectangle((150, -2), 250, 4, color='gray', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle for the correlation\nrect = plt.Rectangle((350, -2), 50, 4, color='gray', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle for the severity\nrect = plt.Rectangle((150, -2), 250, 4, color='gray', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle for the correlation\nrect = plt.Rectangle((350, -2), 50, 4, color='gray', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle for the severity\nrect = plt.Rectangle((150, -2), 250, 4, color='gray', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle for the correlation\nrect = plt.Rectangle((350, -2), 50, 4, color='gray', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle for the severity\nrect = plt.Rectangle((150, -2), 250, 4, color='gray', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle for the correlation\nrect = plt.Rectangle((350, -2), 50, 4, color='gray', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle for the severity\nrect = plt.Rectangle((150, -2), 250, 4, color='gray', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle for the correlation\nrect = plt.Rectangle((350, -2), 50, 4, color='gray', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle for the severity\nrect = plt.Rectangle((150, -2), 250, 4, color='gray', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle for the correlation\nrect = plt.Rectangle((350, -2), 50, 4, color='gray', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle for the severity\nrect = plt.Rectangle((150, -2), 250, 4, color='gray', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle for the correlation\nrect = plt.Rectangle((350, -2), 50, 4, color='gray', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle for the severity\nrect = plt.Rectangle((150, -2), 250, 4, color='gray', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle for the correlation\nrect = plt.Rectangle((350, -2), 50, 4, color='gray', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle for the severity\nrect = plt.Rectangle((150, -2), 250, 4, color='gray', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle for the correlation\nrect = plt.Rectangle((350, -2), 50, 4, color='gray', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle for the severity\nrect = plt.Rectangle((150, -2), 250, 4, color='gray', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle for the correlation\nrect = plt.Rectangle((350, -2), 50, 4, color='gray', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle for the severity\nrect = plt.Rectangle((150, -2), 250, 4, color='gray', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle for the correlation\nrect = plt.Rectangle((350, -2), 50, 4, color='gray', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle for the severity\nrect = plt.Rectangle((150, -2), 250, 4, color='gray', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle for the correlation\nrect = plt.Rectangle((350, -2), 50, 4, color='gray', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle for the severity\nrect = plt.Rectangle((150, -2), 250, 4, color='gray', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle for the correlation\nrect = plt.Rectangle((350, -2), 50, 4, color='gray', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle for the severity\nrect = plt.Rectangle((150, -2), 250, 4, color='gray', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle for the correlation\nrect = plt.Rectangle((350, -2), 50, 4, color='gray', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle for the severity\nrect = plt.Rectangle((150, -2), 250, 4, color='gray', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle for the correlation\nrect = plt.Rectangle((350, -2), 50, 4, color='gray', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle for the severity\nrect = plt.Rectangle((150, -2), 250, 4, color='gray', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle for the correlation\nrect = plt.Rectangle((350, -2), 50, 4, color='gray', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle for the severity\nrect = plt.Rectangle((150, -2), 250, 4, color='gray', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle for the correlation\nrect = plt.Rectangle((350, -2), 50, 4, color='gray', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle for the severity\nrect = plt.Rectangle((150, -2), 250, 4, color='gray', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle for the correlation\nrect = plt.Rectangle((350, -2), 50, 4, color='gray', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle for the severity\nrect = plt.Rectangle((150, -2), 250, 4, color='gray', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle for the correlation\nrect = plt.Rectangle((350, -2), 50, 4, color='gray', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle for the severity\nrect = plt.Rectangle((150, -2), 250, 4, color='gray', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle for the correlation\nrect = plt.Rectangle((350, -2), 50, 4, color='gray', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle for the severity\nrect = plt.Rectangle((150, -2), 250, 4, color='gray', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle for the correlation\nrect = plt.Rectangle((350, -2), 50, 4, color='gray', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle for the severity\nrect = plt.Rectangle((150, -2), 250, 4, color='gray', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle for the correlation\nrect = plt.Rectangle((350, -2), 50, 4, color='gray', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle for the severity\nrect = plt.Rectangle((150, -2), 250, 4, color='gray', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle for the correlation\nrect = plt.Rectangle((350, -2), 50, 4, color='gray', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle for the severity\nrect = plt.Rectangle((150, -2), 250, 4, color='gray', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle for the correlation\nrect = plt.Rectangle((350, -2), 50, 4, color='gray', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle for the severity\nrect = plt.Rectangle((150, -2), 250, 4, color='gray', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle for the correlation\nrect = plt.Rectangle((350, -2), 50, 4, color='gray', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle for the severity\nrect = plt.Rectangle((150, -2), 250, 4, color='gray', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle for the correlation\nrect = plt.Rectangle((350, -2), 50, 4, color='gray', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle for the severity\nrect = plt.Rectangle((150, -2), 250, 4, color='gray', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle for the correlation\nrect = plt.Rectangle((350, -2), 50, 4, color='gray', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle for the severity\nrect = plt.Rectangle((150, -2), 250, 4, color='gray', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle for the correlation\nrect = plt.Rectangle((350, -2), 50, 4, color='gray', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle for the severity\nrect = plt.Rectangle((150, -2), 250, 4, color='gray', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle for the correlation\nrect = plt.Rectangle((350, -2), 50, 4, color='gray', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle for the severity\nrect = plt.Rectangle((150, -2), 250, 4, color='gray', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle for the correlation\nrect = plt.Rectangle((350, -2), 50, 4, color='gray', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle for the severity\nrect = plt.Rectangle((150, -2), 250, 4, color='gray', alpha=0.5)\nax.add_patch(rect"}
{"file": "dataset/ori_500/CB_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(7, 5))\n\n# Define the data\nx = np.linspace(-3, 0.5, 100)\ny = np.log(x + 4)\n\n# Plot the data\nax.plot(x, y, color='blue')\n\n# Add a rectangle for the background\nrect = plt.Rectangle((0, -2), 0.5, 4, facecolor='lightgray', alpha=0.5)\nax.add_patch(rect)\n\n# Add a line for the correlation\nline = plt.Line2D([0, 0.5], [-2, -2], color='black')\nax.add_line(line)\n\n# Set the labels\nax.set_xlabel('Log (Depth L1)')\nax.set_ylabel('Log (ATE RMSE)')\n\n# Set the title\nax.set_title('Correlation: -0.47')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the background color of the plot\nax.set_facecolor('lightblue')\n\n# Set the title of the plot\nax.set_title('T-test p-value = 0.0000', fontsize=14)\n\n# Set the x-axis label\nax.set_xlabel('Avg Top-5 Persistence of 1D')\n\n# Set the y-axis label\nax.set_ylabel('Density')\n\n# Set the x-axis limits\nax.set_xlim(0, 1)\n\n# Set the y-axis limits\nax.set_ylim(0, 5)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.2, 0.3), 0.4, 0.4, color='green')\nax.add_patch(rectangle)\n\n# Draw a circle\ncircle = plt.Circle((0.5, 0.5), 0.2, color='red')\nax.add_patch(circle)\n\n# Draw a polygon\npolygon = plt.Polygon([[0.1, 0.1], [0.3, 0.3], [0.5, 0.1]], color='blue')\nax.add_patch(polygon)\n\n# Draw a line\nline = plt.Line2D([0.1, 0.9], [0.1, 0.9], color='black')\nax.add_line(line)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nx = ['snacks', 'navigate', 'question_selection', 'object_counting']\ny = [7.5, 8.2, 7.8, 6.9]\ncolors = ['blue', 'green', 'red', 'purple']\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 4))\n\n# Plot the data\nfor i in range(len(x)):\n    ax.barh(i, y[i], color=colors[i])\n\n# Set the title and labels\nax.set_title('Comparison of APO & APO-APEs (GPT-3 5-Turbo)')\nax.set_xlabel('Scores')\nax.set_ylabel('Tasks')\n\n# Add the legend\nlegend_elements = [\n    plt.Line2D([0], [0], marker='o', color='w', label='APO-trend', markerfacecolor='gray', markersize=10),\n    plt.Line2D([0], [0], marker='o', color='w', label='APO-step1-APE', markerfacecolor='lightblue', markersize=10),\n    plt.Line2D([0], [0], marker='o', color='w', label='APO-step2-APE', markerfacecolor='lightblue', markersize=10),\n    plt.Line2D([0], [0], marker='o', color='w', label='APO-best', markerfacecolor='blue', markersize=10),\n    plt.Line2D([0], [0], marker='o', color='w', label='Iterative-APE-best', markerfacecolor='gray', markersize=10),\n    plt.Line2D([0], [0], marker='o', color='w', label='AOP-Sum-best', markerfacecolor='green', markersize=10)\n]\nax.legend(handles=legend_elements, loc='upper right')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Set the background color of the plot\nax.set_facecolor('lightpink')\n\n# Set the title of the plot\nax.set_title('summarization_xsum:temperature=0.3,device=cuda')\n\n# Set the x-axis label\nax.set_xlabel('norm size')\n\n# Set the y-axis label\nax.set_ylabel('count')\n\n# Set the x-axis limits\nax.set_xlim(0, 1.4)\n\n# Set the y-axis limits\nax.set_ylim(0, 120)\n\n# Set the x-axis ticks\nax.set_xticks([0, 0.2, 0.4, 0.6, 0.8, 1.0, 1.2, 1.4])\n\n# Set the y-axis ticks\nax.set_yticks([0, 20, 40, 60, 80, 100, 120])\n\n# Set the x-axis tick labels\nax.set_xticklabels(['0.0', '0.2', '0.4', '0.6', '0.8', '1.0', '1.2', '1.4'])\n\n# Set the y-axis tick labels\nax.set_yticklabels(['0', '20', '40', '60', '80', '100', '120'])\n\n# Set the x-axis grid lines\nax.grid(axis='x')\n\n# Set the y-axis grid lines\nax.grid(axis='y')\n\n# Set the x-axis line color\nax.spines['bottom'].set_color('blue')\n\n# Set the y-axis line color\nax.spines['left'].set_color('blue')\n\n# Set the x-axis line width\nax.spines['bottom'].set_linewidth(2)\n\n# Set the y-axis line width\nax.spines['left'].set_linewidth(2)\n\n# Set the x-axis line style\nax.spines['bottom'].set_linestyle('-')\n\n# Set the y-axis line style\nax.spines['left'].set_linestyle('-')\n\n# Set the x-axis line position\nax.spines['bottom'].set_position('zero')\n\n# Set the y-axis line position\nax.spines['left'].set_position('zero')\n\n# Set the x-axis line capstyle\nax.spines['bottom'].set_capstyle('round')\n\n# Set the y-axis line capstyle\nax.spines['left'].set_capstyle('round')\n\n# Set the x-axis line joinstyle\nax.spines['bottom'].set_joinstyle('round')\n\n# Set the y-axis line joinstyle\nax.spines['left'].set_joinstyle('round')\n\n# Set the x-axis line hatch\nax.spines['bottom'].set_hatch('/')\n\n# Set the y-axis line hatch\nax.spines['left'].set_hatch('/')\n\n# Set the x-axis line antialiased\nax.spines['bottom'].set_antialiased(True)\n\n# Set the y-axis line antialiased\nax.spines['left'].set_antialiased(True)\n\n# Set the x-axis line visible\nax.spines['bottom'].set_visible(True)\n\n# Set the y-axis line visible\nax.spines['left'].set_visible(True)\n\n# Set the x-axis line label\nax.spines['bottom'].set_label('X-axis Label')\n\n# Set the y-axis line label\nax.spines['left'].set_label('Y-axis Label')\n\n# Set the x-axis line label color\nax.spines['bottom'].set_labelcolor('red')\n\n# Set the y-axis line label color\nax.spines['left'].set_labelcolor('green')\n\n# Set the x-axis line label font size\nax.spines['bottom'].set_labelsize(12)\n\n# Set the y-axis line label font size\nax.spines['left'].set_labelsize(12)\n\n# Set the x-axis line label font weight\nax.spines['bottom'].set_labelweight('bold')\n\n# Set the y-axis line label font weight\nax.spines['left'].set_labelweight('bold')\n\n# Set the x-axis line label font style\nax.spines['bottom'].set_labelstyle('italic')\n\n# Set the y-axis line label font style\nax.spines['left'].set_labelstyle('italic')\n\n# Set the x-axis line label rotation\nax.spines['bottom'].set_labelrotation(45)\n\n# Set the y-axis line label rotation\nax.spines['left'].set_labelrotation(45)\n\n# Set the x-axis line label horizontal alignment\nax.spines['bottom'].set_labelha('center')\n\n# Set the y-axis line label horizontal alignment\nax.spines['left'].set_labelha('center')\n\n# Set the x-axis line label vertical alignment\nax.spines['bottom'].set_labelva('center')\n\n# Set the y-axis line label vertical alignment\nax.spines['left'].set_labelva('center')\n\n# Set the x-axis line label background color\nax.spines['bottom'].set_labelcolor('yellow')\n\n# Set the y-axis line label background color\nax.spines['left'].set_labelcolor('cyan')\n\n# Set the x-axis line label border color\nax.spines['bottom'].set_labelcolor('magenta')\n\n# Set the y-axis line label border color\nax.spines['left'].set_labelcolor('black')\n\n# Set the x-axis line label border width\nax.spines['bottom'].set_labelwidth(2)\n\n# Set the y-axis line label border width\nax.spines['left'].set_labelwidth(2)\n\n# Set the x-axis line label border style\nax.spines['bottom'].set_labelstyle('-')\n\n# Set the y-axis line label border style\nax.spines['left'].set_labelstyle('-')\n\n# Set the x-axis line label border position\nax.spines['bottom'].set_labelposition('zero')\n\n# Set the y-axis line label border position\nax.spines['left'].set_labelposition('zero')\n\n# Set the x-axis line label border capstyle\nax.spines['bottom'].set_labelcapstyle('round')\n\n# Set the y-axis line label border capstyle\nax.spines['left'].set_labelcapstyle('round')\n\n# Set the x-axis line label border joinstyle\nax.spines['bottom'].set_labeljoinstyle('round')\n\n# Set the y-axis line label border joinstyle\nax.spines['left'].set_labeljoinstyle('round')\n\n# Set the x-axis line label border hatch\nax.spines['bottom'].set_labelhatch('/')\n\n# Set the y-axis line label border hatch\nax.spines['left'].set_labelhatch('/')\n\n# Set the x-axis line label border antialiased\nax.spines['bottom'].set_labelantialiased(True)\n\n# Set the y-axis line label border antialiased\nax.spines['left'].set_labelantialiased(True)\n\n# Set the x-axis line label border visible\nax.spines['bottom'].set_labelvisible(True)\n\n# Set the y-axis line label border visible\nax.spines['left'].set_labelvisible(True)\n\n# Set the x-axis line label border label\nax.spines['bottom'].set_labellabel('X-axis Label')\n\n# Set the y-axis line label border label\nax.spines['left'].set_labellabel('Y-axis Label')\n\n# Set the x-axis line label border label color\nax.spines['bottom'].set_labellabelcolor('red')\n\n# Set the y-axis line label border label color\nax.spines['left'].set_labellabelcolor('green')\n\n# Set the x-axis line label border label font size\nax.spines['bottom'].set_labellabelsize(12)\n\n# Set the y-axis line label border label font size\nax.spines['left'].set_labellabelsize(12)\n\n# Set the x-axis line label border label font weight\nax.spines['bottom'].set_labellabelweight('bold')\n\n# Set the y-axis line label border label font weight\nax.spines['left'].set_labellabelweight('bold')\n\n# Set the x-axis line label border label font style\nax.spines['bottom'].set_labellabelstyle('italic')\n\n# Set the y-axis line label border label font style\nax.spines['left'].set_labellabelstyle('italic')\n\n# Set the x-axis line label border label rotation\nax.spines['bottom'].set_labellabelrotation(45)\n\n# Set the y-axis line label border label rotation\nax.spines['left'].set_labellabelrotation(45)\n\n# Set the x-axis line label border label horizontal alignment\nax.spines['bottom'].set_labellabelha('center')\n\n# Set the y-axis line label border label horizontal alignment\nax.spines['left'].set_labellabelha('center')\n\n# Set the x-axis line label border label vertical alignment\nax.spines['bottom'].set_labellabelva('center')\n\n# Set the y-axis line label border label vertical alignment\nax.spines['left'].set_labellabelva('center')\n\n# Set the x-axis line label border label background color\nax.spines['bottom'].set_labellabelcolor('yellow')\n\n# Set the y-axis line label border label background color\nax.spines['left'].set_labellabelcolor('cyan')\n\n# Set the x-axis line label border label border color\nax.spines['bottom'].set_labellabelcolor('magenta')\n\n# Set the y-axis line label border label border color\nax.spines['left'].set_labellabelcolor('black')\n\n# Set the x-axis line label border label border width\nax.spines['bottom'].set_labellabelwidth(2)\n\n# Set the y-axis line label border label border width\nax.spines['left'].set_labellabelwidth(2)\n\n# Set the x-axis line label border label border style\nax.spines['bottom'].set_labellabelstyle('-')\n\n# Set the y-axis line label border label border style\nax.spines['left'].set_labellabelstyle('-')\n\n# Set the x-axis line label border label border position\nax.spines['bottom'].set_labellabelposition('zero')\n\n# Set the y-axis line label border label border position\nax.spines['left'].set_labellabelposition('zero')\n\n# Set the x-axis line label border label border capstyle\nax.spines['bottom'].set_labellabelcapstyle('round')\n\n# Set the y-axis line label border label border capstyle\nax.spines['left'].set_labellabelcapstyle('round')\n\n# Set the x-axis line label border label border joinstyle\nax.spines['bottom'].set_labellabeljoinstyle('round')\n\n# Set the y-axis line label border label border joinstyle\nax.spines['left'].set_labellabeljoinstyle('round')\n\n# Set the x-axis line label border label border hatch\nax.spines['bottom'].set_labellabelhatch('/')\n\n# Set the y-axis line label border label border hatch\nax.spines['left'].set_labellabelhatch('/')\n\n# Set the x-axis line label border label border antialiased\nax.spines['bottom'].set_labellabelantialiased(True)\n\n# Set the y-axis line label border label border antialiased\nax.spines['left'].set_labellabelantialiased(True)\n\n# Set the x-axis line label border label border visible\nax.spines['bottom'].set_labellabelvisible(True)\n\n# Set the y-axis line label border label border visible\nax.spines['left'].set_labellabelvisible(True)\n\n# Set the x-axis line label border label border label\nax.spines['bottom'].set_labellabellabel('X-axis Label')\n\n# Set the y-axis line label border label border label\nax.spines['left'].set_labellabellabel('Y-axis Label')\n\n# Set the x-axis line label border label border label color\nax.spines['bottom'].set_labellabellabelcolor('red')\n\n# Set the y-axis line label border label border label color\nax.spines['left'].set_labellabellabelcolor('green')\n\n# Set the x-axis line label border label border label font size\nax.spines['bottom'].set_labellabellabelsize(12)\n\n# Set the y-axis line label border label border label font size\nax.spines['left'].set_labellabellabelsize(12)\n\n# Set the x-axis line label border label border label font weight\nax.spines['bottom'].set_labellabellabelweight('bold')\n\n# Set the y-axis line label border label border label font weight\nax.spines['left'].set_labellabellabelweight('bold')\n\n# Set the x-axis line label border label border label font style\nax.spines['bottom'].set_labellabellabelstyle('italic')\n\n# Set the y-axis line label border label border label font style\nax.spines['left'].set_labellabellabelstyle('italic')\n\n# Set the x-axis line label border label border label rotation\nax.spines['bottom'].set_labellabellabelrotation(45)\n\n# Set the y-axis line label border label border label rotation\nax.spines['left'].set_labellabellabelrotation(45)\n\n# Set the x-axis line label border label border label horizontal alignment\nax.spines['bottom'].set_labellabellabelha('center')\n\n# Set the y-axis line label border label border label horizontal alignment\nax.spines['left'].set_labellabellabelha('center')\n\n# Set the x-axis line label border label border label vertical alignment\nax.spines['bottom'].set_labellabellabelva('center')\n\n# Set the y-axis line label border label border label vertical alignment\nax.spines['left'].set_labellabellabelva('center')\n\n# Set the x-axis line label border label border label background color\nax.spines['bottom'].set_labellabellabelcolor('yellow')\n\n# Set the y-axis line label border label border label background color\nax.spines['left'].set_labellabellabelcolor('cyan')\n\n# Set the x-axis line label border label border label border color\nax.spines['bottom'].set_labellabellabelcolor('magenta')\n\n# Set the y-axis line label border label border label border color\nax.spines['left'].set_labellabellabelcolor('black')\n\n# Set the x-axis line label border label border label border width\nax.spines['bottom'].set_labellabellabelwidth(2)\n\n# Set the y-axis line label border label border label border width\nax.spines['left'].set_labellabellabelwidth(2)\n\n# Set the x-axis line label border label border label border style\nax.spines['bottom'].set_labellabellabelstyle('-')\n\n# Set the y-axis line label border label border label border style\nax.spines['left'].set_labellabellabelstyle('-')\n\n# Set the x-axis line label border label border label border position\nax.spines['bottom'].set_labellabellabelposition('zero')\n\n# Set the y-axis line label border label border label border position\nax.spines['left'].set_labellabellabelposition('zero')\n\n# Set the x-axis line label border label border label border capstyle\nax.spines['bottom'].set_labellabellabelcapstyle('round')\n\n# Set the y-axis line label border label border label border capstyle\nax.spines['left'].set_labellabellabelcapstyle('round')\n\n# Set the x-axis line label border label border label border joinstyle\nax.spines['bottom'].set_labellabellabeljoinstyle('round')\n\n# Set the y-axis line label border label border label border joinstyle\nax.spines['left'].set_labellabellabeljoinstyle('round')\n\n# Set the x-axis line label border label border label border hatch\nax.spines['bottom'].set_labellabellabelhatch('/')\n\n# Set the y-axis line label border label border label border hatch\nax.spines['left'].set_labellabellabelhatch('/')\n\n# Set the x-axis line label border label border label border antialiased\nax.spines['bottom'].set_labellabellabelantialiased(True)\n\n# Set the y-axis line label border label border label border antialiased\nax.spines['left'].set_labellabellabelantialiased(True)\n\n# Set the x-axis line label border label border label border visible\nax.spines['bottom'].set_labellabellabelvisible(True)\n\n# Set the y-axis line label border label border label border visible\nax.spines['left'].set_labellabellabelvisible(True)\n\n# Set the x-axis line label border label border label border label\nax.spines['bottom'].set_labellabellabellabel('X-axis Label')\n\n# Set the y-axis line label border label border label border label\nax.spines['left'].set_labellabellabellabel('Y-axis Label')\n\n# Set the x-axis line label border label border label border label color\nax.spines['bottom'].set_labellabellabellabelcolor('red')\n\n# Set the y-axis line label border label border label border label color\nax.spines['left'].set_labellabellabellabelcolor('green')\n\n# Set the x-axis line label border label border label border label font size\nax.spines['bottom'].set_labellabellabellabelsize(12)\n\n# Set the y-axis line label border label border label border label font size\nax.spines['left'].set_labellabellabellabelsize(12)\n\n# Set the x-axis line label border label border label border label font weight\nax.spines['bottom'].set_labellabellabellabelweight('bold')\n\n# Set the y-axis line label border label border label border label font weight\nax.spines['left'].set_labellabellabellabelweight('bold')\n\n# Set the x-axis line label border label border label border label font style\nax.spines['bottom'].set_labellabellabellabelstyle('italic')\n\n# Set the y-axis line label border label border label border label font style\nax.spines['left'].set_labellabellabellabelstyle('italic')\n\n# Set the x-axis line label border label border label border label rotation\nax.spines['bottom'].set_labellabellabellabelrotation(45)\n\n# Set the y-axis line label border label border label border label rotation\nax.spines['left'].set_labellabellabellabelrotation(45)\n\n# Set the x-axis line label border label border label border label horizontal alignment\nax.spines['bottom'].set_labellabellabellabelha('center')\n\n# Set the y-axis line label border label border label border label horizontal alignment\nax.spines['left'].set_labellabellabellabelha('center')\n\n# Set the x-axis line label border label border label border label vertical alignment\nax.spines['bottom'].set_labellabellabellabelva('center')\n\n# Set the y-axis line label border label border label border label vertical alignment\nax.spines['left'].set_labellabellabellabelva('center')\n\n# Set the x-axis line label border label border label border label background color\nax.spines['bottom'].set_labellabellabellabelcolor('yellow')\n\n# Set the y-axis line label border label border label border label background color\nax.spines['left'].set_labellabellabellabelcolor('cyan')\n\n# Set the x-axis line label border label border label border label border color\nax.spines['bottom'].set_labellabellabellabelcolor('magenta')\n\n# Set the y-axis line label border label border label border label border color\nax.spines['left'].set_labellabellabellabelcolor('black')\n\n# Set the x-axis line label border label border label border label border width\nax.spines['bottom'].set_labellabellabellabelwidth(2)\n\n# Set the y-axis line label border label border label border label"}
{"file": "dataset/ori_500/CB_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the pie chart\nlabels = ['Same', 'Different', 'Incomparable']\nsizes = [32, 4, 99]\ncolors = ['blue', 'orange', 'green']\n\n# Create a pie chart\nfig, ax = plt.subplots(figsize=(8.0, 4.0))\nax.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%', startangle=140)\nax.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\n\n# Add a title\nax.set_title('Pie Chart of Data')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_16.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(7, 5))\n\n# Set the title of the plot\nax.set_title('Time Cost (Seconds)')\n\n# Set the x-axis label\nax.set_xlabel('Algorithms')\n\n# Set the y-axis label\nax.set_ylabel('Time Cost (Seconds)')\n\n# Set the x-ticks\nax.set_xticks([1, 2])\n\n# Set the x-tick labels\nax.set_xticklabels(['SEAC', 'SAC(20Hz)'])\n\n# Set the y-ticks\nax.set_yticks([45, 46, 47, 48, 49, 50, 51, 52])\n\n# Set the y-tick labels\nax.set_yticklabels(['45', '46', '47', '48', '49', '50', '51', '52'])\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 46), 0.6, 1, color='green'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 47), 0.6, 1, color='green'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 48), 0.6, 1, color='green'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 49), 0.6, 1, color='green'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 50), 0.6, 1, color='green'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 51), 0.6, 1, color='green'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 52), 0.6, 1, color='green'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 45), 0.6, 1, color='green'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 46), 0.6, 1, color='green'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 47), 0.6, 1, color='green'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 48), 0.6, 1, color='green'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 49), 0.6, 1, color='green'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 50), 0.6, 1, color='green'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 51), 0.6, 1, color='green'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 52), 0.6, 1, color='green'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 45), 0.6, 1, color='green'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 46), 0.6, 1, color='green'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 47), 0.6, 1, color='green'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 48), 0.6, 1, color='green'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 49), 0.6, 1, color='green'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 50), 0.6, 1, color='green'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 51), 0.6, 1, color='green'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 52), 0.6, 1, color='green'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 45), 0.6, 1, color='green'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 46), 0.6, 1, color='green'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 47), 0.6, 1, color='green'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 48), 0.6, 1, color='green'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 49), 0.6, 1, color='green'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 50), 0.6, 1, color='green'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 51), 0.6, 1, color='green'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 52), 0.6, 1, color='green'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 45), 0.6, 1, color='green'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 46), 0.6, 1, color='green'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 47), 0.6, 1, color='green'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 48), 0.6, 1, color='green'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 49), 0.6, 1, color='green'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 50), 0.6, 1, color='green'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 51), 0.6, 1, color='green'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 52), 0.6, 1, color='green'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 45), 0.6, 1, color='green'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 46), 0.6, 1, color='green'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 47), 0.6, 1, color='green'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 48), 0.6, 1, color='green'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 49), 0.6, 1, color='green'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 50), 0.6, 1, color='green'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 51), 0.6, 1, color='green'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 52), 0.6, 1, color='green'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 45), 0.6, 1, color='green'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 46), 0.6, 1, color='green'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 47), 0.6, 1, color='green'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 48), 0.6, 1, color='green'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 49), 0.6, 1, color='green'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 50), 0.6, 1, color='green'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 51), 0.6, 1, color='green'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 52), 0.6, 1, color='green'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 45), 0.6, 1, color='green'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 46), 0.6, 1, color='green'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 47), 0.6, 1, color='green'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 48), 0.6, 1, color='green'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 49), 0.6, 1, color='green'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 50), 0.6, 1, color='green'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 51), 0.6, 1, color='green'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 52), 0.6, 1, color='green'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 45), 0.6, 1, color='green'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 46), 0.6, 1, color='green'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 47), 0.6, 1, color='green'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 48), 0.6, 1, color='green'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 49), 0.6, 1, color='green'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 50), 0.6, 1, color='green'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 51), 0.6, 1, color='green'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 52), 0.6, 1, color='green'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 45), 0.6, 1, color='green'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 46), 0.6, 1, color='green'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 47), 0.6, 1, color='green'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 48), 0.6, 1, color='green'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 49), 0.6, 1, color='green'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 50), 0.6, 1, color='green'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 51), 0.6, 1, color='green'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 52), 0.6, 1, color='green'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 45), 0.6, 1, color='green'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 46), 0.6, 1, color='green'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 47), 0.6, 1, color='green'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 48), 0.6, 1, color='green'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 49), 0.6, 1, color='green'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 50), 0.6, 1, color='green'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 51), 0.6, 1, color='green'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 52), 0.6, 1, color='green'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 45), 0.6, 1, color='green'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 46), 0.6, 1, color='green'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 47), 0.6, 1, color='green'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 48), 0.6, 1, color='green'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 49), 0.6, 1, color='green'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 50), 0.6, 1, color='green'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 51), 0.6, 1, color='green'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 52), 0.6, 1, color='green'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 45), 0.6, 1, color='green'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 46), 0.6, 1, color='green'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 47), 0.6, 1, color='green'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 48), 0.6, 1, color='green'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 49), 0.6, 1, color='green'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 50), 0.6, 1, color='green'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 51), 0.6, 1, color='green'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 52), 0.6, 1, color='green'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 45), 0.6, 1, color='green'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 46), 0.6, 1, color='green'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 47), 0.6, 1, color='green'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 48), 0.6, 1, color='green'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 49), 0.6, 1, color='green'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 50), 0.6, 1, color='green'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 51), 0.6, 1, color='green'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 52), 0.6, 1, color='green'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 45), 0.6, 1, color='green'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 46), 0.6, 1, color='green'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 47), 0.6, 1, color='green'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 48), 0.6, 1, color='green'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 49), 0.6, 1, color='green'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 50), 0.6, 1, color='green'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 51), 0.6, 1, color='green'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 52), 0.6, 1, color='green'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 45), 0.6, 1, color='green'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 46), 0.6, 1, color='green'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2"}
{"file": "dataset/ori_500/CB_17.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the first graph\nx = [2008, 2010, 2012, 2014]\ny = [63.64, 80.08, 84.27, 90.11]\n\n# Data for the second graph\nx1 = [2008, 2010, 2012, 2014]\ny1 = [75, 87.2, 88.5, 93.89]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 4))\n\n# Plot the first graph\nax.plot(x, y, 'b-')\nax.set_title('Average Recall Scores by Method')\nax.set_xlabel('Year')\nax.set_ylabel('Scores')\n\n# Plot the second graph\nax2 = ax.twinx()\nax2.plot(x1, y1, 'r-')\nax2.set_ylabel('Scores')\n\n# Add rectangles for the bars\nfor i in range(len(x)):\n    ax.add_patch(plt.Rectangle((x[i], 0), 2, 1, color='lightblue'))\n\n# Add rectangles for the bars\nfor i in range(len(x1)):\n    ax2.add_patch(plt.Rectangle((x1[i], 0), 2, 1, color='lightblue'))\n\n# Add text for the bars\nfor i in range(len(x)):\n    ax.text(x[i], 0.5, 'CodeBERT', ha='center', va='center')\n\n# Add text for the bars\nfor i in range(len(x1)):\n    ax2.text(x1[i], 0.5, 'CodeBERT', ha='center', va='center')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_18.pdf", "response": "import matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Set the x-axis limits\nax.set_xlim(4, 32)\n\n# Set the y-axis limits\nax.set_ylim(80, 96)\n\n# Set the x-axis label\nax.set_xlabel('Few-Shot K')\n\n# Set the y-axis label\nax.set_ylabel('Micro F1')\n\n# Plot the data\nax.plot([4, 8, 12, 16, 20, 24, 28, 32], [85, 87, 89, 91, 93, 95, 97, 99], color='blue')\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((4, 80), 32-4, 96-80, facecolor='lightblue', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((4, 80), 32-4, 96-80, facecolor='lightgrey', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((4, 80), 32-4, 96-80, facecolor='lightgreen', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((4, 80), 32-4, 96-80, facecolor='lightyellow', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((4, 80), 32-4, 96-80, facecolor='lightpink', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((4, 80), 32-4, 96-80, facecolor='lightsalmon', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((4, 80), 32-4, 96-80, facecolor='lightcoral', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((4, 80), 32-4, 96-80, facecolor='lightcyan', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((4, 80), 32-4, 96-80, facecolor='lightgreen', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((4, 80), 32-4, 96-80, facecolor='lightblue', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((4, 80), 32-4, 96-80, facecolor='lightgrey', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((4, 80), 32-4, 96-80, facecolor='lightgreen', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((4, 80), 32-4, 96-80, facecolor='lightyellow', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((4, 80), 32-4, 96-80, facecolor='lightpink', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((4, 80), 32-4, 96-80, facecolor='lightsalmon', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((4, 80), 32-4, 96-80, facecolor='lightcoral', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((4, 80), 32-4, 96-80, facecolor='lightcyan', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((4, 80), 32-4, 96-80, facecolor='lightgreen', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((4, 80), 32-4, 96-80, facecolor='lightblue', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((4, 80), 32-4, 96-80, facecolor='lightgrey', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((4, 80), 32-4, 96-80, facecolor='lightgreen', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((4, 80), 32-4, 96-80, facecolor='lightyellow', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((4, 80), 32-4, 96-80, facecolor='lightpink', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((4, 80), 32-4, 96-80, facecolor='lightsalmon', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((4, 80), 32-4, 96-80, facecolor='lightcoral', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((4, 80), 32-4, 96-80, facecolor='lightcyan', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((4, 80), 32-4, 96-80, facecolor='lightgreen', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((4, 80), 32-4, 96-80, facecolor='lightblue', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((4, 80), 32-4, 96-80, facecolor='lightgrey', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((4, 80), 32-4, 96-80, facecolor='lightgreen', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((4, 80), 32-4, 96-80, facecolor='lightyellow', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((4, 80), 32-4, 96-80, facecolor='lightpink', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((4, 80), 32-4, 96-80, facecolor='lightsalmon', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((4, 80), 32-4, 96-80, facecolor='lightcoral', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((4, 80), 32-4, 96-80, facecolor='lightcyan', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((4, 80), 32-4, 96-80, facecolor='lightgreen', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((4, 80), 32-4, 96-80, facecolor='lightblue', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((4, 80), 32-4, 96-80, facecolor='lightgrey', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((4, 80), 32-4, 96-80, facecolor='lightgreen', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((4, 80), 32-4, 96-80, facecolor='lightyellow', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((4, 80), 32-4, 96-80, facecolor='lightpink', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((4, 80), 32-4, 96-80, facecolor='lightsalmon', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((4, 80), 32-4, 96-80, facecolor='lightcoral', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((4, 80), 32-4, 96-80, facecolor='lightcyan', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((4, 80), 32-4, 96-80, facecolor='lightgreen', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((4, 80), 32-4, 96-80, facecolor='lightblue', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((4, 80), 32-4, 96-80, facecolor='lightgrey', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((4, 80), 32-4, 96-80, facecolor='lightgreen', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((4, 80), 32-4, 96-80, facecolor='lightyellow', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((4, 80), 32-4, 96-80, facecolor='lightpink', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((4, 80), 32-4, 96-80, facecolor='lightsalmon', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((4, 80), 32-4, 96-80, facecolor='lightcoral', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((4, 80), 32-4, 96-80, facecolor='lightcyan', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((4, 80), 32-4, 96-80, facecolor='lightgreen', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((4, 80), 32-4, 96-80, facecolor='lightblue', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((4, 80), 32-4, 96-80, facecolor='lightgrey', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((4, 80), 32-4, 96-80, facecolor='lightgreen', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((4, 80), 32-4, 96-80, facecolor='lightyellow', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((4, 80), 32-4, 96-80, facecolor='lightpink', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((4, 80), 32-4, 96-80, facecolor='lightsalmon', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((4, 80), 32-4, 96-80, facecolor='lightcoral', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((4, 80), 32-4, 96-80, facecolor='lightcyan', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((4, 80), 32-4, 96-80, facecolor='lightgreen', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((4, 80), 32-4, 96-80, facecolor='lightblue', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((4, 80), 32-4, 96-80, facecolor='lightgrey', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((4, 80), 32-4, 96-80, facecolor='lightgreen', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((4, 80), 32-4, 96-80, facecolor='lightyellow', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((4, 80), 32-4, 96-80, facecolor='lightpink', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((4, 80), 32-4, 96-80, facecolor='lightsalmon', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((4, 80), 32-4, 96-80, facecolor='lightcoral', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((4, 80), 32-4, 96-80, facecolor='lightcyan', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((4, 80), 32-4, 96-80, facecolor='lightgreen', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((4, 80), 32-4, 96-80, facecolor='lightblue', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((4, 80), 32-4, 96-80, facecolor='lightgrey', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((4, 80), 32-4, 96-80, facecolor='lightgreen', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((4, 80), 32-4, 96-80, facecolor='lightyellow', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((4, 80), 32-4, 96-80, facecolor='lightpink', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((4, 80), 32-4, 96-80, facecolor='lightsalmon', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((4, 80), 32-4, 96-80, facecolor='lightcoral', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((4, 80), 32-4, 96-80, facecolor='lightcyan',"}
{"file": "dataset/ori_500/CB_19.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data points\nx = [0, 10, 20, 30, 40, 50]\ny = [60, 62, 65, 70, 75, 80]\n\n# Plotting\nplt.plot(x, y, 'ro-')\nplt.xlabel('Vehicle Parameter Size (units)')\nplt.ylabel('Efficiency (%)')\nplt.title('Car Efficiency vs Vehicle Parameter Size')\n\n# Adding car names and their efficiency\ncar_names = ['Car A', 'Car B', 'Car C', 'Car D', 'Car E']\nfor i, name in enumerate(car_names):\n    plt.text(x[i], y[i], name)\n\n# Adding car icons\ncar_icons = ['red', 'blue']\nfor i, icon in enumerate(car_icons):\n    plt.scatter(0, 0, color=icon, label=f'Cars {i+1}')\n\n# Adding truck icon\nplt.scatter(0, 0, color='blue', marker='*', label='Trucks')\n\n# Display legend\nplt.legend()\n\n# Set figure size\nplt.figure(figsize=(7.0, 7.0))\n\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nmodels = ['GPT-2', 'Llama 2 7B', 'Llama 2 70B', 'Mixtral 8x7B', 'GPT-3.5', 'GPT-4']\nsuccess_rates = [16, 12, 12, 20, 26, 56]\ntrend = [0, 0, 0, 0, 0, 0]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Plot the success rates\nax.bar(models, success_rates, color='lightpink')\n\n# Add a trend line\nax.plot(models, trend, color='purple', linestyle='--')\n\n# Set the title and labels\nax.set_title('Encoding/Decoding Schelling Points by Model')\nax.set_xlabel('Model')\nax.set_ylabel('Success Rate (%)')\n\n# Rotate x-axis labels for better visibility\nplt.xticks(rotation=45)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_20.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Calibration Curve')\n\n# Set the x-axis label\nax.set_xlabel('Reduced Probability')\n\n# Set the y-axis label\nax.set_ylabel('Fraction of Positives')\n\n# Set the x-axis limits\nax.set_xlim(0, 1)\n\n# Set the y-axis limits\nax.set_ylim(0, 1)\n\n# Draw a line graph\nax.plot([0, 0.25, 0.5, 0.75, 1], [0.2, 0.4, 0.6, 0.8, 1], 'k-')\n\n# Draw a horizontal line\nax.axhline(y=0.5, color='r', linestyle='-')\n\n# Draw a vertical line\nax.axvline(x=0.5, color='b', linestyle='-')\n\n# Draw a scatter plot\nax.scatter([0.1, 0.3, 0.5, 0.7, 0.9], [0.1, 0.3, 0.5, 0.7, 0.9], color='orange')\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='pink'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='pink'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='pink'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='pink'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='pink'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='pink'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='pink'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='pink'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='pink'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='pink'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='pink'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='pink'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='pink'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='pink'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='pink'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='pink'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='pink'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='pink'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='pink'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='pink'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='pink'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='pink'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='pink'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='pink'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='pink'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='pink'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='pink'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='pink'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='pink'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='pink'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='pink'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='pink'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='pink'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='pink'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='pink'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='pink'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='pink'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='pink'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='pink'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='pink'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='pink'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='pink'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='pink'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='pink'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='pink'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='pink'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='pink'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='pink'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='pink'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='pink'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='pink'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='pink'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='pink'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='pink'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='pink'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='pink'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='pink'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='pink'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='pink'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='pink'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='pink'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='pink'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='pink'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='pink'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='pink'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='pink'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='pink'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='pink'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='pink'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='pink'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='pink'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='pink'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='pink'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='pink'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='pink'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='pink'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='pink'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='pink'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='pink'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='pink'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='pink'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='pink'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='pink'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='pink'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='pink'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='pink'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='pink'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='pink'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='pink'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='pink'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='pink'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='pink'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='pink'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='pink'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='pink'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='pink'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='pink'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='pink'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='pink'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='pink'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='pink'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='pink'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='pink'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='pink'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='pink'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='pink'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='pink'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='pink'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='pink'))\n\n# Draw a"}
{"file": "dataset/ori_500/CB_21.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8, 4))\n\n# Set the background color of the plot\nax.set_facecolor('lightblue')\n\n# Draw a rectangle for the model\nmodel_rect = plt.Rectangle((-5, -1), 10, 2, color='blue')\nax.add_patch(model_rect)\n\n# Draw a rectangle for the FOD-Net\nfodnet_rect = plt.Rectangle((-3, -1), 6, 2, color='orange')\nax.add_patch(fodnet_rect)\n\n# Draw a rectangle for the SS3T\nss3t_rect = plt.Rectangle((-1, -1), 4, 2, color='green')\nax.add_patch(ss3t_rect)\n\n# Draw a rectangle for the ACC\nacc_rect = plt.Rectangle((-3, -3), 6, 2, color='brown')\nax.add_patch(acc_rect)\n\n# Draw a rectangle for the model's performance\nmodel_performance_rect = plt.Rectangle((-4, -4), 8, 2, color='blue')\nax.add_patch(model_performance_rect)\n\n# Draw a rectangle for the FOD-Net's performance\nfodnet_performance_rect = plt.Rectangle((-2, -4), 4, 2, color='orange')\nax.add_patch(fodnet_performance_rect)\n\n# Draw a rectangle for the SS3T's performance\nss3t_performance_rect = plt.Rectangle((0, -4), 4, 2, color='green')\nax.add_patch(ss3t_performance_rect)\n\n# Draw a rectangle for the ACC's performance\nacc_performance_rect = plt.Rectangle((-2, -6), 4, 2, color='brown')\nax.add_patch(acc_performance_rect)\n\n# Draw a circle for the model's accuracy\ncircle = plt.Circle((0, -2), 0.5, color='black')\nax.add_artist(circle)\n\n# Draw a circle for the FOD-Net's accuracy\ncircle = plt.Circle((0, -4), 0.5, color='black')\nax.add_artist(circle)\n\n# Draw a circle for the SS3T's accuracy\ncircle = plt.Circle((0, -6), 0.5, color='black')\nax.add_artist(circle)\n\n# Draw a circle for the ACC's accuracy\ncircle = plt.Circle((0, -8), 0.5, color='black')\nax.add_artist(circle)\n\n# Set the limits of the x-axis\nax.set_xlim(-6, 6)\n\n# Set the limits of the y-axis\nax.set_ylim(-8, 2)\n\n# Set the labels of the x-axis\nax.set_xticks([-6, -4, -2, 0, 2, 4, 6])\nax.set_xticklabels(['-6', '-4', '-2', '0', '2', '4', '6'])\n\n# Set the labels of the y-axis\nax.set_yticks([-8, -6, -4, -2, 0, 2])\nax.set_yticklabels(['-8', '-6', '-4', '-2', '0', '2'])\n\n# Set the title of the plot\nax.set_title('Model Performance')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_22.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\nx = [1340, 1360, 1380, 1400, 1420, 1440, 1460]\ny = [0.005, 0.015, 0.025, 0.035, 0.045, 0.055, 0.065]\n\nfig, axs = plt.subplots(2, 2, figsize=(10, 8))\n\n# Plot 1: Total\naxs[0, 0].bar(x, y, color='blue')\naxs[0, 0].set_title('Total')\naxs[0, 0].set_xlabel('Daily reward (Ether)')\naxs[0, 0].set_ylabel('Probability')\n\n# Plot 2: Proposer\naxs[0, 1].barh([205, 210, 215, 220], [0.175, 0.150, 0.125, 0.100], color='red')\naxs[0, 1].set_title('Proposer')\naxs[0, 1].set_xlabel('Daily reward (Ether)')\naxs[0, 1].set_ylabel('Probability')\n\n# Plot 3: Attestor\naxs[1, 0].barh([205, 210, 215, 220], [0.175, 0.150, 0.125, 0.100], color='green')\naxs[1, 0].set_title('Attestor')\naxs[1, 0].set_xlabel('Daily reward (Ether)')\naxs[1, 0].set_ylabel('Probability')\n\n# Plot 4: Sync committee member\naxs[1, 1].barh([48, 49, 50, 51, 52], [0.6, 0.5, 0.4, 0.3, 0.2], color='yellow')\naxs[1, 1].set_title('Sync committee member')\naxs[1, 1].set_xlabel('Daily reward (Ether)')\naxs[1, 1].set_ylabel('Probability')\n\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_23.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ntrainable_sizes = [0, 50, 100, 150]\nrmse_values = [1.30, 1.27, 1.28, 1.29]\nlasmol_values = [1.30, 1.21, 1.28, 1.29]\n\n# Plotting\nfig, ax1 = plt.subplots(figsize=(6.0, 8.0))\n\ncolor = 'tab:red'\nax1.set_xlabel('Trainable Parameter Size (M)')\nax1.set_ylabel('RMSE', color=color)\nax1.plot(trainable_sizes, rmse_values, color=color)\nax1.tick_params(axis='y', labelcolor=color)\n\nax2 = ax1.twinx()  \ncolor = 'tab:blue'\nax2.set_ylabel('LlaSMol', color=color)  \nax2.plot(trainable_sizes, lasmol_values, color=color)\nax2.tick_params(axis='y', labelcolor=color)\n\nfig.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_24.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Race Car Performance')\n\n# Set the x-axis label\nax.set_xlabel('Execution Duration (clock)')\n\n# Set the y-axis label\nax.set_ylabel('Distribution')\n\n# Set the x-axis limits\nax.set_xlim(40, 160)\n\n# Set the y-axis limits\nax.set_ylim(0, 0.1)\n\n# Set the x-axis ticks\nax.set_xticks([40, 60, 80, 100, 120, 140, 160])\n\n# Set the y-axis ticks\nax.set_yticks([0, 0.05, 0.1])\n\n# Set the x-axis tick labels\nax.set_xticklabels(['40', '60', '80', '100', '120', '140', '160'])\n\n# Set the y-axis tick labels\nax.set_yticklabels(['0', '0.05', '0.1'])\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('blue')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='blue', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the title\nax.title.set_color('blue')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('blue')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('blue')\n\n# Set the color of the x-axis ticks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis ticks\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['40', '60', '80', '100', '120', '140', '160'], color='blue')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0', '0.05', '0.1'], color='blue')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('blue')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='blue', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the title\nax.title.set_color('blue')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('blue')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('blue')\n\n# Set the color of the x-axis ticks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis ticks\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['40', '60', '80', '100', '120', '140', '160'], color='blue')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0', '0.05', '0.1'], color='blue')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('blue')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='blue', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the title\nax.title.set_color('blue')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('blue')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('blue')\n\n# Set the color of the x-axis ticks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis ticks\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['40', '60', '80', '100', '120', '140', '160'], color='blue')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0', '0.05', '0.1'], color='blue')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('blue')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='blue', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the title\nax.title.set_color('blue')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('blue')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('blue')\n\n# Set the color of the x-axis ticks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis ticks\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['40', '60', '80', '100', '120', '140', '160'], color='blue')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0', '0.05', '0.1'], color='blue')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('blue')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='blue', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the title\nax.title.set_color('blue')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('blue')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('blue')\n\n# Set the color of the x-axis ticks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis ticks\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['40', '60', '80', '100', '120', '140', '160'], color='blue')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0', '0.05', '0.1'], color='blue')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('blue')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='blue', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the title\nax.title.set_color('blue')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('blue')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('blue')\n\n# Set the color of the x-axis ticks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis ticks\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['40', '60', '80', '100', '120', '140', '160'], color='blue')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0', '0.05', '0.1'], color='blue')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('blue')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='blue', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the title\nax.title.set_color('blue')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('blue')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('blue')\n\n# Set the color of the x-axis ticks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis ticks\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['40', '60', '80', '100', '120', '140', '160'], color='blue')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0', '0.05', '0.1'], color='blue')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('blue')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='blue', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the title\nax.title.set_color('blue')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('blue')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('blue')\n\n# Set the color of the x-axis ticks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis ticks\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['40', '60', '80', '100', '120', '140', '160'], color='blue')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0', '0.05', '0.1'], color='blue')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('blue')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='blue', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the title\nax.title.set_color('blue')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('blue')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('blue')\n\n# Set the color of the x-axis ticks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis ticks\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['40', '60', '80', '100', '120', '140', '160'], color='blue')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0', '0.05', '0.1'], color='blue')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('blue')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='blue', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the title\nax.title.set_color('blue')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('blue')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('blue')\n\n# Set the color of the x-axis ticks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis ticks\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['40', '60', '80', '100', '120', '140', '160'], color='blue')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0', '0.05', '0.1'], color='blue')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('blue')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='blue', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the title\nax.title.set_color('blue')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('blue')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('blue')\n\n# Set the color of the x-axis ticks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis ticks\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['40', '60', '80', '100', '120', '140', '160'], color='blue')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0', '0.05', '0.1'], color='blue')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('blue')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='blue', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the title\nax.title.set_color('blue')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('blue')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('blue')\n\n# Set the color of the x-axis ticks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis ticks\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['40', '60', '80', '100', '120', '140', '160'], color='blue')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0', '0.05', '0.1'], color='blue')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('blue')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='blue', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the title\nax.title.set_color('blue')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('blue')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('blue')\n\n# Set the color of the x-axis ticks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis ticks\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['40', '60', '80', '100', '120', '140', '160'], color='blue')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0', '0.05', '0.1'], color='blue')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis line\n"}
{"file": "dataset/ori_500/CB_25.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nx = ['15x15', '20x15', '20x20', '30x20', '40x20', '50x20', '60x20']\ny = [18, 14, 13, 12, 9, 12, 0]\ncolors = ['green', 'orange', 'blue', 'purple', 'pink']\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Plot the data\nax.plot(x, y, color='red')\n\n# Set the title and labels\nax.set_title('Car Sales Data')\nax.set_xlabel('Instance Size')\nax.set_ylabel('Makespan (step)')\n\n# Set the color bar\ncbar = fig.colorbar(ax.images[0])\ncbar.set_label('Improvement (%)')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_26.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(7, 5))\n\n# Set the title of the plot\nax.set_title('Time Cost (Seconds)')\n\n# Set the x-axis label\nax.set_xlabel('Algorithms')\n\n# Set the y-axis label\nax.set_ylabel('Time Cost (Seconds)')\n\n# Set the x-axis limits\nax.set_xlim(-1, 4)\n\n# Set the y-axis limits\nax.set_ylim(-1, 4)\n\n# Set the x-axis ticks\nax.set_xticks([0, 2])\n\n# Set the x-axis tick labels\nax.set_xticklabels(['SEAC', 'CTCO'])\n\n# Set the y-axis ticks\nax.set_yticks([0, 1, 2, 3, 4])\n\n# Set the y-axis tick labels\nax.set_yticklabels(['0', '1', '2', '3', '4'])\n\n# Draw a rectangle\nrect = plt.Rectangle((0, 0), 1, 1, color='green')\nax.add_patch(rect)\n\n# Draw a circle\ncircle = plt.Circle((0, 0), 0.5, color='red')\nax.add_patch(circle)\n\n# Draw a line\nline = plt.Line2D([0, 1], [0, 1], color='blue')\nax.add_line(line)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_27.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Set the title of the plot\nax.set_title('Time to Market (Days)')\n\n# Set the x-axis label\nax.set_xlabel('Brand')\n\n# Set the y-axis label\nax.set_ylabel('Time to Market (Days)')\n\n# Define the data\nbrands = ['Adidas', 'Nike', 'New Balance', 'Our Brand']\ntime_to_market = [95, 85, 75, 65]\n\n# Plot the data\nax.plot(brands, time_to_market, marker='o')\n\n# Add stars for each brand\nfor i, brand in enumerate(brands):\n    if brand == 'Adidas':\n        ax.text(i, time_to_market[i], '*', ha='center', va='bottom', color='red')\n    elif brand == 'Nike':\n        ax.text(i, time_to_market[i], '*', ha='center', va='bottom', color='red')\n    elif brand == 'New Balance':\n        ax.text(i, time_to_market[i], '*', ha='center', va='bottom', color='red')\n    elif brand == 'Our Brand':\n        ax.text(i, time_to_market[i], '*', ha='center', va='bottom', color='red')\n\n# Set the x-ticks\nax.set_xticks(range(len(brands)))\nax.set_xticklabels(brands)\n\n# Set the y-ticks\nax.set_yticks(range(40, 120, 10))\n\n# Set the grid\nax.grid(True)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_28.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Set the background color of the plot\nax.set_facecolor('lightblue')\n\n# Draw a rectangle for the map\nrectangle = plt.Rectangle((0, 0), 1, 1, fc='green')\nax.add_patch(rectangle)\n\n# Draw a rectangle for the timeline\ntimeline = plt.Rectangle((0, 0), 1, 1, fc='orange')\nax.add_patch(timeline)\n\n# Draw a rectangle for the graph\ngraph = plt.Rectangle((0, 0), 1, 1, fc='blue')\nax.add_patch(graph)\n\n# Draw a rectangle for the map\nmap_2 = plt.Rectangle((0, 0), 1, 1, fc='yellow')\nax.add_patch(map_2)\n\n# Draw a rectangle for the timeline\ntimeline_2 = plt.Rectangle((0, 0), 1, 1, fc='red')\nax.add_patch(timeline_2)\n\n# Draw a rectangle for the graph\ngraph_2 = plt.Rectangle((0, 0), 1, 1, fc='green')\nax.add_patch(graph_2)\n\n# Draw a rectangle for the map\nmap_3 = plt.Rectangle((0, 0), 1, 1, fc='blue')\nax.add_patch(map_3)\n\n# Draw a rectangle for the timeline\ntimeline_3 = plt.Rectangle((0, 0), 1, 1, fc='orange')\nax.add_patch(timeline_3)\n\n# Draw a rectangle for the graph\ngraph_3 = plt.Rectangle((0, 0), 1, 1, fc='red')\nax.add_patch(graph_3)\n\n# Draw a rectangle for the map\nmap_4 = plt.Rectangle((0, 0), 1, 1, fc='green')\nax.add_patch(map_4)\n\n# Draw a rectangle for the timeline\ntimeline_4 = plt.Rectangle((0, 0), 1, 1, fc='blue')\nax.add_patch(timeline_4)\n\n# Draw a rectangle for the graph\ngraph_4 = plt.Rectangle((0, 0), 1, 1, fc='orange')\nax.add_patch(graph_4)\n\n# Draw a rectangle for the map\nmap_5 = plt.Rectangle((0, 0), 1, 1, fc='red')\nax.add_patch(map_5)\n\n# Draw a rectangle for the timeline\ntimeline_5 = plt.Rectangle((0, 0), 1, 1, fc='green')\nax.add_patch(timeline_5)\n\n# Draw a rectangle for the graph\ngraph_5 = plt.Rectangle((0, 0), 1, 1, fc='blue')\nax.add_patch(graph_5)\n\n# Draw a rectangle for the map\nmap_6 = plt.Rectangle((0, 0), 1, 1, fc='orange')\nax.add_patch(map_6)\n\n# Draw a rectangle for the timeline\ntimeline_6 = plt.Rectangle((0, 0), 1, 1, fc='red')\nax.add_patch(timeline_6)\n\n# Draw a rectangle for the graph\ngraph_6 = plt.Rectangle((0, 0), 1, 1, fc='green')\nax.add_patch(graph_6)\n\n# Draw a rectangle for the map\nmap_7 = plt.Rectangle((0, 0), 1, 1, fc='blue')\nax.add_patch(map_7)\n\n# Draw a rectangle for the timeline\ntimeline_7 = plt.Rectangle((0, 0), 1, 1, fc='orange')\nax.add_patch(timeline_7)\n\n# Draw a rectangle for the graph\ngraph_7 = plt.Rectangle((0, 0), 1, 1, fc='red')\nax.add_patch(graph_7)\n\n# Draw a rectangle for the map\nmap_8 = plt.Rectangle((0, 0), 1, 1, fc='green')\nax.add_patch(map_8)\n\n# Draw a rectangle for the timeline\ntimeline_8 = plt.Rectangle((0, 0), 1, 1, fc='blue')\nax.add_patch(timeline_8)\n\n# Draw a rectangle for the graph\ngraph_8 = plt.Rectangle((0, 0), 1, 1, fc='orange')\nax.add_patch(graph_8)\n\n# Draw a rectangle for the map\nmap_9 = plt.Rectangle((0, 0), 1, 1, fc='red')\nax.add_patch(map_9)\n\n# Draw a rectangle for the timeline\ntimeline_9 = plt.Rectangle((0, 0), 1, 1, fc='green')\nax.add_patch(timeline_9)\n\n# Draw a rectangle for the graph\ngraph_9 = plt.Rectangle((0, 0), 1, 1, fc='blue')\nax.add_patch(graph_9)\n\n# Draw a rectangle for the map\nmap_10 = plt.Rectangle((0, 0), 1, 1, fc='orange')\nax.add_patch(map_10)\n\n# Draw a rectangle for the timeline\ntimeline_10 = plt.Rectangle((0, 0), 1, 1, fc='red')\nax.add_patch(timeline_10)\n\n# Draw a rectangle for the graph\ngraph_10 = plt.Rectangle((0, 0), 1, 1, fc='green')\nax.add_patch(graph_10)\n\n# Draw a rectangle for the map\nmap_11 = plt.Rectangle((0, 0), 1, 1, fc='blue')\nax.add_patch(map_11)\n\n# Draw a rectangle for the timeline\ntimeline_11 = plt.Rectangle((0, 0), 1, 1, fc='orange')\nax.add_patch(timeline_11)\n\n# Draw a rectangle for the graph\ngraph_11 = plt.Rectangle((0, 0), 1, 1, fc='red')\nax.add_patch(graph_11)\n\n# Draw a rectangle for the map\nmap_12 = plt.Rectangle((0, 0), 1, 1, fc='green')\nax.add_patch(map_12)\n\n# Draw a rectangle for the timeline\ntimeline_12 = plt.Rectangle((0, 0), 1, 1, fc='blue')\nax.add_patch(timeline_12)\n\n# Draw a rectangle for the graph\ngraph_12 = plt.Rectangle((0, 0), 1, 1, fc='orange')\nax.add_patch(graph_12)\n\n# Draw a rectangle for the map\nmap_13 = plt.Rectangle((0, 0), 1, 1, fc='red')\nax.add_patch(map_13)\n\n# Draw a rectangle for the timeline\ntimeline_13 = plt.Rectangle((0, 0), 1, 1, fc='green')\nax.add_patch(timeline_13)\n\n# Draw a rectangle for the graph\ngraph_13 = plt.Rectangle((0, 0), 1, 1, fc='blue')\nax.add_patch(graph_13)\n\n# Draw a rectangle for the map\nmap_14 = plt.Rectangle((0, 0), 1, 1, fc='orange')\nax.add_patch(map_14)\n\n# Draw a rectangle for the timeline\ntimeline_14 = plt.Rectangle((0, 0), 1, 1, fc='red')\nax.add_patch(timeline_14)\n\n# Draw a rectangle for the graph\ngraph_14 = plt.Rectangle((0, 0), 1, 1, fc='green')\nax.add_patch(graph_14)\n\n# Draw a rectangle for the map\nmap_15 = plt.Rectangle((0, 0), 1, 1, fc='blue')\nax.add_patch(map_15)\n\n# Draw a rectangle for the timeline\ntimeline_15 = plt.Rectangle((0, 0), 1, 1, fc='orange')\nax.add_patch(timeline_15)\n\n# Draw a rectangle for the graph\ngraph_15 = plt.Rectangle((0, 0), 1, 1, fc='red')\nax.add_patch(graph_15)\n\n# Draw a rectangle for the map\nmap_16 = plt.Rectangle((0, 0), 1, 1, fc='green')\nax.add_patch(map_16)\n\n# Draw a rectangle for the timeline\ntimeline_16 = plt.Rectangle((0, 0), 1, 1, fc='blue')\nax.add_patch(timeline_16)\n\n# Draw a rectangle for the graph\ngraph_16 = plt.Rectangle((0, 0), 1, 1, fc='orange')\nax.add_patch(graph_16)\n\n# Draw a rectangle for the map\nmap_17 = plt.Rectangle((0, 0), 1, 1, fc='red')\nax.add_patch(map_17)\n\n# Draw a rectangle for the timeline\ntimeline_17 = plt.Rectangle((0, 0), 1, 1, fc='green')\nax.add_patch(timeline_17)\n\n# Draw a rectangle for the graph\ngraph_17 = plt.Rectangle((0, 0), 1, 1, fc='blue')\nax.add_patch(graph_17)\n\n# Draw a rectangle for the map\nmap_18 = plt.Rectangle((0, 0), 1, 1, fc='orange')\nax.add_patch(map_18)\n\n# Draw a rectangle for the timeline\ntimeline_18 = plt.Rectangle((0, 0), 1, 1, fc='red')\nax.add_patch(timeline_18)\n\n# Draw a rectangle for the graph\ngraph_18 = plt.Rectangle((0, 0), 1, 1, fc='green')\nax.add_patch(graph_18)\n\n# Draw a rectangle for the map\nmap_19 = plt.Rectangle((0, 0), 1, 1, fc='blue')\nax.add_patch(map_19)\n\n# Draw a rectangle for the timeline\ntimeline_19 = plt.Rectangle((0, 0), 1, 1, fc='orange')\nax.add_patch(timeline_19)\n\n# Draw a rectangle for the graph\ngraph_19 = plt.Rectangle((0, 0), 1, 1, fc='red')\nax.add_patch(graph_19)\n\n# Draw a rectangle for the map\nmap_20 = plt.Rectangle((0, 0), 1, 1, fc='green')\nax.add_patch(map_20)\n\n# Draw a rectangle for the timeline\ntimeline_20 = plt.Rectangle((0, 0), 1, 1, fc='blue')\nax.add_patch(timeline_20)\n\n# Draw a rectangle for the graph\ngraph_20 = plt.Rectangle((0, 0), 1, 1, fc='orange')\nax.add_patch(graph_20)\n\n# Draw a rectangle for the map\nmap_21 = plt.Rectangle((0, 0), 1, 1, fc='red')\nax.add_patch(map_21)\n\n# Draw a rectangle for the timeline\ntimeline_21 = plt.Rectangle((0, 0), 1, 1, fc='green')\nax.add_patch(timeline_21)\n\n# Draw a rectangle for the graph\ngraph_21 = plt.Rectangle((0, 0), 1, 1, fc='blue')\nax.add_patch(graph_21)\n\n# Draw a rectangle for the map\nmap_22 = plt.Rectangle((0, 0), 1, 1, fc='orange')\nax.add_patch(map_22)\n\n# Draw a rectangle for the timeline\ntimeline_22 = plt.Rectangle((0, 0), 1, 1, fc='red')\nax.add_patch(timeline_22)\n\n# Draw a rectangle for the graph\ngraph_22 = plt.Rectangle((0, 0), 1, 1, fc='green')\nax.add_patch(graph_22)\n\n# Draw a rectangle for the map\nmap_23 = plt.Rectangle((0, 0), 1, 1, fc='blue')\nax.add_patch(map_23)\n\n# Draw a rectangle for the timeline\ntimeline_23 = plt.Rectangle((0, 0), 1, 1, fc='orange')\nax.add_patch(timeline_23)\n\n# Draw a rectangle for the graph\ngraph_23 = plt.Rectangle((0, 0), 1, 1, fc='red')\nax.add_patch(graph_23)\n\n# Draw a rectangle for the map\nmap_24 = plt.Rectangle((0, 0), 1, 1, fc='green')\nax.add_patch(map_24)\n\n# Draw a rectangle for the timeline\ntimeline_24 = plt.Rectangle((0, 0), 1, 1, fc='blue')\nax.add_patch(timeline_24)\n\n# Draw a rectangle for the graph\ngraph_24 = plt.Rectangle((0, 0), 1, 1, fc='orange')\nax.add_patch(graph_24)\n\n# Draw a rectangle for the map\nmap_25 = plt.Rectangle((0, 0), 1, 1, fc='red')\nax.add_patch(map_25)\n\n# Draw a rectangle for the timeline\ntimeline_25 = plt.Rectangle((0, 0), 1, 1, fc='green')\nax.add_patch(timeline_25)\n\n# Draw a rectangle for the graph\ngraph_25 = plt.Rectangle((0, 0), 1, 1, fc='blue')\nax.add_patch(graph_25)\n\n# Draw a rectangle for the map\nmap_26 = plt.Rectangle((0, 0), 1, 1, fc='orange')\nax.add_patch(map_26)\n\n# Draw a rectangle for the timeline\ntimeline_26 = plt.Rectangle((0, 0), 1, 1, fc='red')\nax.add_patch(timeline_26)\n\n# Draw a rectangle for the graph\ngraph_26 = plt.Rectangle((0, 0), 1, 1, fc='green')\nax.add_patch(graph_26)\n\n# Draw a rectangle for the map\nmap_27 = plt.Rectangle((0, 0), 1, 1, fc='blue')\nax.add_patch(map_27)\n\n# Draw a rectangle for the timeline\ntimeline_27 = plt.Rectangle((0, 0), 1, 1, fc='orange')\nax.add_patch(timeline_27)\n\n# Draw a rectangle for the graph\ngraph_27 = plt.Rectangle((0, 0), 1, 1, fc='red')\nax.add_patch(graph_27)\n\n# Draw a rectangle for the map\nmap_28 = plt.Rectangle((0, 0), 1, 1, fc='green')\nax.add_patch(map_28)\n\n# Draw a rectangle for the timeline\ntimeline_28 = plt.Rectangle((0, 0), 1, 1, fc='blue')\nax.add_patch(timeline_28)\n\n# Draw a rectangle for the graph\ngraph_28 = plt.Rectangle((0, 0), 1, 1, fc='orange')\nax.add_patch(graph_28)\n\n# Draw a rectangle for the map\nmap_29 = plt.Rectangle((0, 0), 1, 1, fc='red')\nax.add_patch(map_29)\n\n# Draw a rectangle for the timeline\ntimeline_29 = plt.Rectangle((0, 0), 1, 1, fc='green')\nax.add_patch(timeline_29)\n\n# Draw a rectangle for the graph\ngraph_29 = plt.Rectangle((0, 0), 1, 1, fc='blue')\nax.add_patch(graph_29)\n\n# Draw a rectangle for the map\nmap_30 = plt.Rectangle((0, 0), 1, 1, fc='orange')\nax.add_patch(map_30)\n\n# Draw a rectangle for the timeline\ntimeline_30 = plt.Rectangle((0, 0), 1, 1, fc='red')\nax.add_patch(timeline_30)\n\n# Draw a rectangle for the graph\ngraph_30 = plt.Rectangle((0, 0), 1, 1, fc='green')\nax.add_patch(graph_30)\n\n# Draw a rectangle for the map\nmap_31 = plt.Rectangle((0, 0), 1, 1, fc='blue')\nax.add_patch(map_31)\n\n# Draw a rectangle for the timeline\ntimeline_31 = plt.Rectangle((0, 0), 1, 1, fc='orange')\nax.add_patch(timeline_31)\n\n# Draw a rectangle for the graph\ngraph_31 = plt.Rectangle((0, 0), 1, 1, fc='red')\nax.add_patch(graph_31)\n\n# Draw a rectangle for the map\nmap_32 = plt.Rectangle((0, 0), 1, 1, fc='green')\nax.add_patch(map_32)\n\n# Draw a rectangle for the timeline\ntimeline_32 = plt.Rectangle((0, 0), 1, 1, fc='blue')\nax.add_patch(timeline_32)\n\n# Draw a rectangle for the graph\ngraph_32 = plt.Rectangle((0, 0), 1, 1, fc='orange')\nax.add_patch(graph_32)\n\n# Draw a rectangle for the map\nmap_33 = plt.Rectangle((0, 0), 1, 1, fc='red')\nax.add_patch(map_33)\n\n# Draw a rectangle for the timeline\ntimeline_33 = plt.Rectangle((0, 0), 1, 1, fc='green')\nax.add_patch(timeline_33)\n\n# Draw a rectangle for the graph\ngraph_33 = plt.Rectangle((0, 0), 1, 1, fc='blue')\nax.add_patch(graph_33)\n\n# Draw a rectangle for the map\nmap_34 = plt.Rectangle((0, 0), 1, 1, fc='orange')\nax.add_patch(map_34)\n\n# Draw a rectangle for the timeline\ntimeline_34 = plt.Rectangle((0, 0), 1, 1, fc='red')\nax.add_patch(timeline_34)\n\n# Draw a rectangle for the graph\ngraph_34 = plt.Rectangle((0, 0), 1, 1, fc='green')\nax.add_patch(graph_34)\n\n# Draw a rectangle for the map\nmap_35 = plt.Rectangle((0, 0), 1, 1, fc='blue')\nax.add_patch(map_35)\n\n# Draw a rectangle for the timeline\ntimeline_35 = plt.Rectangle((0, 0), 1, 1, fc='orange')\nax.add_patch(timeline_35)\n\n# Draw a rectangle for the graph\ngraph_35 = plt.Rectangle((0, 0), 1"}
{"file": "dataset/ori_500/CB_29.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the bar chart\ntech = ['Nano', 'Quantum', 'Cybersecurity', 'VR', 'Biotech', 'Robotics', 'IoT', 'Cloud Computing', 'Blockchain', 'AI']\npatents_2013 = [20, 10, 40, 30, 60, 90, 70, 80, 50, 120]\npatents_2022 = [90, 50, 100, 150, 180, 250, 300, 400, 500, 500]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Plot the bar chart\nax.bar(tech, patents_2013, color='skyblue')\nax.bar(tech, patents_2022, bottom=patents_2013, color='salmon')\n\n# Add labels and title\nax.set_xlabel('Technology')\nax.set_ylabel('Number of Patents')\nax.set_title('Patent Filings in 2013')\n\n# Rotate x-axis labels for better visibility\nplt.xticks(rotation=45)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Set the background color of the plot\nax.set_facecolor('lightpink')\n\n# Set the title of the plot\nax.set_title('Calibration Curve', fontsize=14)\n\n# Set the x-axis label\nax.set_xlabel('Predicted Probability', fontsize=12)\n\n# Set the y-axis label\nax.set_ylabel('Fraction of Positives', fontsize=12)\n\n# Set the x-axis limits\nax.set_xlim(0, 1)\n\n# Set the y-axis limits\nax.set_ylim(0, 1)\n\n# Set the x-axis ticks\nax.set_xticks([0, 0.25, 0.5, 0.75, 1])\n\n# Set the y-axis ticks\nax.set_yticks([0, 0.25, 0.5, 0.75, 1])\n\n# Set the x-axis tick labels\nax.set_xticklabels(['0.00', '0.25', '0.50', '0.75', '1.00'])\n\n# Set the y-axis tick labels\nax.set_yticklabels(['0.00', '0.25', '0.50', '0.75', '1.00'])\n\n# Set the x-axis grid lines\nax.xaxis.grid(True)\n\n# Set the y-axis grid lines\nax.yaxis.grid(True)\n\n# Set the x-axis grid line style\nax.xaxis.grid(True, linestyle='--')\n\n# Set the y-axis grid line style\nax.yaxis.grid(True, linestyle='--')\n\n# Set the x-axis grid line color\nax.xaxis.grid(True, color='gray')\n\n# Set the y-axis grid line color\nax.yaxis.grid(True, color='gray')\n\n# Set the x-axis grid line width\nax.xaxis.grid(True, linewidth=0.5)\n\n# Set the y-axis grid line width\nax.yaxis.grid(True, linewidth=0.5)\n\n# Set the x-axis grid line alpha\nax.xaxis.grid(True, alpha=0.5)\n\n# Set the y-axis grid line alpha\nax.yaxis.grid(True, alpha=0.5)\n\n# Set the x-axis grid line zorder\nax.xaxis.grid(True, zorder=0)\n\n# Set the y-axis grid line zorder\nax.yaxis.grid(True, zorder=0)\n\n# Set the x-axis grid line hatch\nax.xaxis.grid(True, hatch='///')\n\n# Set the y-axis grid line hatch\nax.yaxis.grid(True, hatch='///')\n\n# Set the x-axis grid line linestyle\nax.xaxis.grid(True, linestyle=':')\n\n# Set the y-axis grid line linestyle\nax.yaxis.grid(True, linestyle=':')\n\n# Set the x-axis grid line color\nax.xaxis.grid(True, color='blue')\n\n# Set the y-axis grid line color\nax.yaxis.grid(True, color='blue')\n\n# Set the x-axis grid line width\nax.xaxis.grid(True, linewidth=1)\n\n# Set the y-axis grid line width\nax.yaxis.grid(True, linewidth=1)\n\n# Set the x-axis grid line alpha\nax.xaxis.grid(True, alpha=0.8)\n\n# Set the y-axis grid line alpha\nax.yaxis.grid(True, alpha=0.8)\n\n# Set the x-axis grid line zorder\nax.xaxis.grid(True, zorder=1)\n\n# Set the y-axis grid line zorder\nax.yaxis.grid(True, zorder=1)\n\n# Set the x-axis grid line hatch\nax.xaxis.grid(True, hatch='\\\\\\\\\\\\')\n\n# Set the y-axis grid line hatch\nax.yaxis.grid(True, hatch='\\\\\\\\\\\\')\n\n# Set the x-axis grid line linestyle\nax.xaxis.grid(True, linestyle='-.')\n\n# Set the y-axis grid line linestyle\nax.yaxis.grid(True, linestyle='-.')\n\n# Set the x-axis grid line color\nax.xaxis.grid(True, color='green')\n\n# Set the y-axis grid line color\nax.yaxis.grid(True, color='green')\n\n# Set the x-axis grid line width\nax.xaxis.grid(True, linewidth=2)\n\n# Set the y-axis grid line width\nax.yaxis.grid(True, linewidth=2)\n\n# Set the x-axis grid line alpha\nax.xaxis.grid(True, alpha=0.9)\n\n# Set the y-axis grid line alpha\nax.yaxis.grid(True, alpha=0.9)\n\n# Set the x-axis grid line zorder\nax.xaxis.grid(True, zorder=2)\n\n# Set the y-axis grid line zorder\nax.yaxis.grid(True, zorder=2)\n\n# Set the x-axis grid line hatch\nax.xaxis.grid(True, hatch='|||||')\n\n# Set the y-axis grid line hatch\nax.yaxis.grid(True, hatch='|||||')\n\n# Set the x-axis grid line linestyle\nax.xaxis.grid(True, linestyle='--')\n\n# Set the y-axis grid line linestyle\nax.yaxis.grid(True, linestyle='--')\n\n# Set the x-axis grid line color\nax.xaxis.grid(True, color='red')\n\n# Set the y-axis grid line color\nax.yaxis.grid(True, color='red')\n\n# Set the x-axis grid line width\nax.xaxis.grid(True, linewidth=3)\n\n# Set the y-axis grid line width\nax.yaxis.grid(True, linewidth=3)\n\n# Set the x-axis grid line alpha\nax.xaxis.grid(True, alpha=1.0)\n\n# Set the y-axis grid line alpha\nax.yaxis.grid(True, alpha=1.0)\n\n# Set the x-axis grid line zorder\nax.xaxis.grid(True, zorder=3)\n\n# Set the y-axis grid line zorder\nax.yaxis.grid(True, zorder=3)\n\n# Set the x-axis grid line hatch\nax.xaxis.grid(True, hatch='////////')\n\n# Set the y-axis grid line hatch\nax.yaxis.grid(True, hatch='////////')\n\n# Set the x-axis grid line linestyle\nax.xaxis.grid(True, linestyle='-')\n\n# Set the y-axis grid line linestyle\nax.yaxis.grid(True, linestyle='-')\n\n# Set the x-axis grid line color\nax.xaxis.grid(True, color='purple')\n\n# Set the y-axis grid line color\nax.yaxis.grid(True, color='purple')\n\n# Set the x-axis grid line width\nax.xaxis.grid(True, linewidth=4)\n\n# Set the y-axis grid line width\nax.yaxis.grid(True, linewidth=4)\n\n# Set the x-axis grid line alpha\nax.xaxis.grid(True, alpha=1.0)\n\n# Set the y-axis grid line alpha\nax.yaxis.grid(True, alpha=1.0)\n\n# Set the x-axis grid line zorder\nax.xaxis.grid(True, zorder=4)\n\n# Set the y-axis grid line zorder\nax.yaxis.grid(True, zorder=4)\n\n# Set the x-axis grid line hatch\nax.xaxis.grid(True, hatch='////////////')\n\n# Set the y-axis grid line hatch\nax.yaxis.grid(True, hatch='////////////')\n\n# Set the x-axis grid line linestyle\nax.xaxis.grid(True, linestyle='--')\n\n# Set the y-axis grid line linestyle\nax.yaxis.grid(True, linestyle='--')\n\n# Set the x-axis grid line color\nax.xaxis.grid(True, color='orange')\n\n# Set the y-axis grid line color\nax.yaxis.grid(True, color='orange')\n\n# Set the x-axis grid line width\nax.xaxis.grid(True, linewidth=5)\n\n# Set the y-axis grid line width\nax.yaxis.grid(True, linewidth=5)\n\n# Set the x-axis grid line alpha\nax.xaxis.grid(True, alpha=1.0)\n\n# Set the y-axis grid line alpha\nax.yaxis.grid(True, alpha=1.0)\n\n# Set the x-axis grid line zorder\nax.xaxis.grid(True, zorder=5)\n\n# Set the y-axis grid line zorder\nax.yaxis.grid(True, zorder=5)\n\n# Set the x-axis grid line hatch\nax.xaxis.grid(True, hatch='//////////////')\n\n# Set the y-axis grid line hatch\nax.yaxis.grid(True, hatch='//////////////')\n\n# Set the x-axis grid line linestyle\nax.xaxis.grid(True, linestyle='-')\n\n# Set the y-axis grid line linestyle\nax.yaxis.grid(True, linestyle='-')\n\n# Set the x-axis grid line color\nax.xaxis.grid(True, color='cyan')\n\n# Set the y-axis grid line color\nax.yaxis.grid(True, color='cyan')\n\n# Set the x-axis grid line width\nax.xaxis.grid(True, linewidth=6)\n\n# Set the y-axis grid line width\nax.yaxis.grid(True, linewidth=6)\n\n# Set the x-axis grid line alpha\nax.xaxis.grid(True, alpha=1.0)\n\n# Set the y-axis grid line alpha\nax.yaxis.grid(True, alpha=1.0)\n\n# Set the x-axis grid line zorder\nax.xaxis.grid(True, zorder=6)\n\n# Set the y-axis grid line zorder\nax.yaxis.grid(True, zorder=6)\n\n# Set the x-axis grid line hatch\nax.xaxis.grid(True, hatch='////////////////')\n\n# Set the y-axis grid line hatch\nax.yaxis.grid(True, hatch='////////////////')\n\n# Set the x-axis grid line linestyle\nax.xaxis.grid(True, linestyle='--')\n\n# Set the y-axis grid line linestyle\nax.yaxis.grid(True, linestyle='--')\n\n# Set the x-axis grid line color\nax.xaxis.grid(True, color='magenta')\n\n# Set the y-axis grid line color\nax.yaxis.grid(True, color='magenta')\n\n# Set the x-axis grid line width\nax.xaxis.grid(True, linewidth=7)\n\n# Set the y-axis grid line width\nax.yaxis.grid(True, linewidth=7)\n\n# Set the x-axis grid line alpha\nax.xaxis.grid(True, alpha=1.0)\n\n# Set the y-axis grid line alpha\nax.yaxis.grid(True, alpha=1.0)\n\n# Set the x-axis grid line zorder\nax.xaxis.grid(True, zorder=7)\n\n# Set the y-axis grid line zorder\nax.yaxis.grid(True, zorder=7)\n\n# Set the x-axis grid line hatch\nax.xaxis.grid(True, hatch='//////////////////')\n\n# Set the y-axis grid line hatch\nax.yaxis.grid(True, hatch='//////////////////')\n\n# Set the x-axis grid line linestyle\nax.xaxis.grid(True, linestyle='-')\n\n# Set the y-axis grid line linestyle\nax.yaxis.grid(True, linestyle='-')\n\n# Set the x-axis grid line color\nax.xaxis.grid(True, color='yellow')\n\n# Set the y-axis grid line color\nax.yaxis.grid(True, color='yellow')\n\n# Set the x-axis grid line width\nax.xaxis.grid(True, linewidth=8)\n\n# Set the y-axis grid line width\nax.yaxis.grid(True, linewidth=8)\n\n# Set the x-axis grid line alpha\nax.xaxis.grid(True, alpha=1.0)\n\n# Set the y-axis grid line alpha\nax.yaxis.grid(True, alpha=1.0)\n\n# Set the x-axis grid line zorder\nax.xaxis.grid(True, zorder=8)\n\n# Set the y-axis grid line zorder\nax.yaxis.grid(True, zorder=8)\n\n# Set the x-axis grid line hatch\nax.xaxis.grid(True, hatch='///////////////////')\n\n# Set the y-axis grid line hatch\nax.yaxis.grid(True, hatch='///////////////////')\n\n# Set the x-axis grid line linestyle\nax.xaxis.grid(True, linestyle='--')\n\n# Set the y-axis grid line linestyle\nax.yaxis.grid(True, linestyle='--')\n\n# Set the x-axis grid line color\nax.xaxis.grid(True, color='black')\n\n# Set the y-axis grid line color\nax.yaxis.grid(True, color='black')\n\n# Set the x-axis grid line width\nax.xaxis.grid(True, linewidth=9)\n\n# Set the y-axis grid line width\nax.yaxis.grid(True, linewidth=9)\n\n# Set the x-axis grid line alpha\nax.xaxis.grid(True, alpha=1.0)\n\n# Set the y-axis grid line alpha\nax.yaxis.grid(True, alpha=1.0)\n\n# Set the x-axis grid line zorder\nax.xaxis.grid(True, zorder=9)\n\n# Set the y-axis grid line zorder\nax.yaxis.grid(True, zorder=9)\n\n# Set the x-axis grid line hatch\nax.xaxis.grid(True, hatch='////////////////////')\n\n# Set the y-axis grid line hatch\nax.yaxis.grid(True, hatch='////////////////////')\n\n# Set the x-axis grid line linestyle\nax.xaxis.grid(True, linestyle='-')\n\n# Set the y-axis grid line linestyle\nax.yaxis.grid(True, linestyle='-')\n\n# Set the x-axis grid line color\nax.xaxis.grid(True, color='white')\n\n# Set the y-axis grid line color\nax.yaxis.grid(True, color='white')\n\n# Set the x-axis grid line width\nax.xaxis.grid(True, linewidth=10)\n\n# Set the y-axis grid line width\nax.yaxis.grid(True, linewidth=10)\n\n# Set the x-axis grid line alpha\nax.xaxis.grid(True, alpha=1.0)\n\n# Set the y-axis grid line alpha\nax.yaxis.grid(True, alpha=1.0)\n\n# Set the x-axis grid line zorder\nax.xaxis.grid(True, zorder=10)\n\n# Set the y-axis grid line zorder\nax.yaxis.grid(True, zorder=10)\n\n# Set the x-axis grid line hatch\nax.xaxis.grid(True, hatch='//////////////////////')\n\n# Set the y-axis grid line hatch\nax.yaxis.grid(True, hatch='//////////////////////')\n\n# Set the x-axis grid line linestyle\nax.xaxis.grid(True, linestyle='--')\n\n# Set the y-axis grid line linestyle\nax.yaxis.grid(True, linestyle='--')\n\n# Set the x-axis grid line color\nax.xaxis.grid(True, color='grey')\n\n# Set the y-axis grid line color\nax.yaxis.grid(True, color='grey')\n\n# Set the x-axis grid line width\nax.xaxis.grid(True, linewidth=11)\n\n# Set the y-axis grid line width\nax.yaxis.grid(True, linewidth=11)\n\n# Set the x-axis grid line alpha\nax.xaxis.grid(True, alpha=1.0)\n\n# Set the y-axis grid line alpha\nax.yaxis.grid(True, alpha=1.0)\n\n# Set the x-axis grid line zorder\nax.xaxis.grid(True, zorder=11)\n\n# Set the y-axis grid line zorder\nax.yaxis.grid(True, zorder=11)\n\n# Set the x-axis grid line hatch\nax.xaxis.grid(True, hatch='///////////////////////')\n\n# Set the y-axis grid line hatch\nax.yaxis.grid(True, hatch='///////////////////////')\n\n# Set the x-axis grid line linestyle\nax.xaxis.grid(True, linestyle='-')\n\n# Set the y-axis grid line linestyle\nax.yaxis.grid(True, linestyle='-')\n\n# Set the x-axis grid line color\nax.xaxis.grid(True, color='silver')\n\n# Set the y-axis grid line color\nax.yaxis.grid(True, color='silver')\n\n# Set the x-axis grid line width\nax.xaxis.grid(True, linewidth=12)\n\n# Set the y-axis grid line width\nax.yaxis.grid(True, linewidth=12)\n\n# Set the x-axis grid line alpha\nax.xaxis.grid(True, alpha=1.0)\n\n# Set the y-axis grid line alpha\nax.yaxis.grid(True, alpha=1.0)\n\n# Set the x-axis grid line zorder\nax.xaxis.grid(True, zorder=12)\n\n# Set the y-axis grid line zorder\nax.yaxis.grid(True, zorder=12)\n\n# Set the x-axis grid line hatch\nax.xaxis.grid(True, hatch='////////////////////////')\n\n# Set the y-axis grid line hatch\nax.yaxis.grid(True, hatch='////////////////////////')\n\n# Set the x-axis grid line linestyle\nax.xaxis.grid(True, linestyle='--')\n\n# Set the y-axis grid line linestyle\nax.yaxis.grid(True, linestyle='--')\n\n# Set the x-axis grid line color\nax.xaxis.grid(True, color='gold')\n\n# Set the y-axis grid line color\nax.yaxis.grid(True, color='gold')\n\n# Set the x-axis grid line width\nax.xaxis.grid(True, linewidth=13)\n\n# Set the y-axis grid line width\nax.yaxis.grid(True, linewidth=13)\n\n# Set the x-axis grid line alpha\nax.xaxis.grid(True, alpha=1.0)\n\n# Set the y-axis grid line alpha\nax.yaxis.grid(True, alpha=1.0)\n\n# Set the x-axis grid line zorder\nax.xaxis.grid(True, zorder=13)\n\n# Set the y-axis grid line zorder\nax.yaxis.grid(True, zorder=13)\n\n# Set the x-axis grid line hatch\nax.xaxis.grid(True, hatch='/////////////////////////')\n\n# Set the y-axis grid line hatch\nax.yaxis.grid(True, hatch='/////////////////////////')\n\n# Set the x-axis grid line linestyle\nax.xaxis.grid(True, linestyle='-')\n\n# Set the y-axis grid line linestyle\nax.yaxis.grid(True, linestyle='-')\n\n# Set the x-axis grid line color\nax.xaxis.grid(True, color='brown')\n\n# Set the y-axis grid line color\nax.yaxis.grid(True, color='brown')\n\n# Set the x-axis grid line width\nax.xaxis.grid(True, linewidth=14)\n\n# Set the y-axis grid line width\nax.yaxis.grid(True, linewidth=14)\n\n# Set the x-axis grid line alpha\nax.xaxis.grid(True, alpha=1.0)\n\n# Set the y-axis grid line alpha\nax.yaxis.grid(True, alpha=1.0)\n\n# Set the x-axis grid line zorder\nax.xaxis.grid(True, zorder=14)\n\n# Set the y-axis grid line zorder\nax.yaxis.grid(True, zorder=14)\n\n# Set the x-axis grid line hatch\nax.xaxis.grid(True, hatch='//////////////////////////')\n\n# Set the y-axis grid line hatch\nax.yaxis.grid(True, hatch='//////////////////////////')\n\n# Set the x-axis grid line linestyle\nax.xaxis.grid(True, linestyle='--')\n\n# Set the y-axis grid line linestyle\nax.yaxis.grid(True, linestyle='--')\n\n# Set the x-axis grid line color\nax.xaxis.grid(True, color='maroon')\n\n# Set the y-axis grid line color\nax.yaxis.grid(True, color='maroon')\n\n# Set the x-axis grid line width\nax.xaxis.grid(True, linewidth=15)\n\n# Set the y-axis grid line width\nax.yaxis.grid(True, linewidth=15)\n\n# Set the x-axis grid line alpha\nax.xaxis.grid(True, alpha=1.0)\n\n# Set the y-axis grid line alpha\nax.yaxis.grid(True, alpha=1.0)\n\n# Set the x-axis grid line zorder\nax.xaxis.grid(True, zorder=15)\n\n# Set the y-axis grid line zorder\nax.yaxis.grid(True, zorder=15)\n\n# Set the x-axis grid line hatch\nax.xaxis.grid(True, hatch='///////////////////////////')\n\n# Set the y-axis grid line hatch\nax.yaxis.grid(True, hatch='///////////////////////////')\n\n# Set the x-axis grid line linestyle\nax.xaxis.grid(True, linestyle='-')\n\n# Set the y-axis grid line linestyle\nax.yaxis.grid(True, linestyle='-')\n\n# Set the x"}
{"file": "dataset/ori_500/CB_30.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nquarters = ['Q1', 'Q2', 'Q3', 'Q4']\nearnings = [350, 300, 250, 200]\ngrowth = [70, 60, 50, 40]\n\n# Create a figure and axis\nfig, ax1 = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the earnings data\ncolor = 'tab:blue'\nax1.set_xlabel('Quarter')\nax1.set_ylabel('Earnings ($1000s)', color=color)\nax1.plot(quarters, earnings, color=color)\nax1.tick_params(axis='y', labelcolor=color)\n\n# Create a second y-axis for growth\nax2 = ax1.twinx()  \ncolor = 'tab:red'\nax2.set_ylabel('Growth (%)', color=color)  \nax2.plot(quarters, growth, color=color)\nax2.tick_params(axis='y', labelcolor=color)\n\n# Add a logo\nlogo = plt.imread('logo.png')\nplt.figimage(logo, xo=10, yo=500, origin='lower')\n\n# Add a legend\nfig.legend(['Earnings', 'Growth'], loc='upper right')\n\n# Set the title\nfig.suptitle('Company Performance')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nx = ['Linear probing', 'BitFit', 'Prompt tuning', 'Full finetuning', 'LoRA', 'Ours (LoSA)']\ny = [72, 74, 76, 78, 80, 82]\ncolors = ['blue', 'orange', 'green', 'red', 'blue', 'orange']\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Plot the data\nax.plot(x, y, marker='o', color='black')\n\n# Set the title and labels\nax.set_title('Accuracy, iNaturalist 2021')\nax.set_xlabel('Methods')\nax.set_ylabel('Normalized Requirements (lower is better)')\n\n# Set the x-ticks\nax.set_xticks(range(len(x)))\nax.set_xticklabels(x)\n\n# Set the y-ticks\nax.set_yticks(range(0, 85, 5))\nax.set_yticklabels([f'{i}' for i in range(0, 85, 5)])\n\n# Set the background color of the plot\nax.set_facecolor('white')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the axes\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the title\nax.set_title('Accuracy, iNaturalist 2021', color='black')\n\n# Set the color of the labels\nax.set_xlabel('Methods', color='black')\nax.set_ylabel('Normalized Requirements (lower is better)', color='black')\n\n# Set the color of the x-tick labels\nax.set_xticklabels(x, color='black')\n\n# Set the color of the y-tick labels\nax.set_yticklabels([f'{i}' for i in range(0, 85, 5)], color='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the axes\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the title\nax.set_title('Accuracy, iNaturalist 2021', color='black')\n\n# Set the color of the labels\nax.set_xlabel('Methods', color='black')\nax.set_ylabel('Normalized Requirements (lower is better)', color='black')\n\n# Set the color of the x-tick labels\nax.set_xticklabels(x, color='black')\n\n# Set the color of the y-tick labels\nax.set_yticklabels([f'{i}' for i in range(0, 85, 5)], color='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the axes\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the title\nax.set_title('Accuracy, iNaturalist 2021', color='black')\n\n# Set the color of the labels\nax.set_xlabel('Methods', color='black')\nax.set_ylabel('Normalized Requirements (lower is better)', color='black')\n\n# Set the color of the x-tick labels\nax.set_xticklabels(x, color='black')\n\n# Set the color of the y-tick labels\nax.set_yticklabels([f'{i}' for i in range(0, 85, 5)], color='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the axes\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the title\nax.set_title('Accuracy, iNaturalist 2021', color='black')\n\n# Set the color of the labels\nax.set_xlabel('Methods', color='black')\nax.set_ylabel('Normalized Requirements (lower is better)', color='black')\n\n# Set the color of the x-tick labels\nax.set_xticklabels(x, color='black')\n\n# Set the color of the y-tick labels\nax.set_yticklabels([f'{i}' for i in range(0, 85, 5)], color='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the axes\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the title\nax.set_title('Accuracy, iNaturalist 2021', color='black')\n\n# Set the color of the labels\nax.set_xlabel('Methods', color='black')\nax.set_ylabel('Normalized Requirements (lower is better)', color='black')\n\n# Set the color of the x-tick labels\nax.set_xticklabels(x, color='black')\n\n# Set the color of the y-tick labels\nax.set_yticklabels([f'{i}' for i in range(0, 85, 5)], color='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the axes\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the title\nax.set_title('Accuracy, iNaturalist 2021', color='black')\n\n# Set the color of the labels\nax.set_xlabel('Methods', color='black')\nax.set_ylabel('Normalized Requirements (lower is better)', color='black')\n\n# Set the color of the x-tick labels\nax.set_xticklabels(x, color='black')\n\n# Set the color of the y-tick labels\nax.set_yticklabels([f'{i}' for i in range(0, 85, 5)], color='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the axes\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the title\nax.set_title('Accuracy, iNaturalist 2021', color='black')\n\n# Set the color of the labels\nax.set_xlabel('Methods', color='black')\nax.set_ylabel('Normalized Requirements (lower is better)', color='black')\n\n# Set the color of the x-tick labels\nax.set_xticklabels(x, color='black')\n\n# Set the color of the y-tick labels\nax.set_yticklabels([f'{i}' for i in range(0, 85, 5)], color='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the axes\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the title\nax.set_title('Accuracy, iNaturalist 2021', color='black')\n\n# Set the color of the labels\nax.set_xlabel('Methods', color='black')\nax.set_ylabel('Normalized Requirements (lower is better)', color='black')\n\n# Set the color of the x-tick labels\nax.set_xticklabels(x, color='black')\n\n# Set the color of the y-tick labels\nax.set_yticklabels([f'{i}' for i in range(0, 85, 5)], color='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the axes\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the title\nax.set_title('Accuracy, iNaturalist 2021', color='black')\n\n# Set the color of the labels\nax.set_xlabel('Methods', color='black')\nax.set_ylabel('Normalized Requirements (lower is better)', color='black')\n\n# Set the color of the x-tick labels\nax.set_xticklabels(x, color='black')\n\n# Set the color of the y-tick labels\nax.set_yticklabels([f'{i}' for i in range(0, 85, 5)], color='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the axes\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the title\nax.set_title('Accuracy, iNaturalist 2021', color='black')\n\n# Set the color of the labels\nax.set_xlabel('Methods', color='black')\nax.set_ylabel('Normalized Requirements (lower is better)', color='black')\n\n# Set the color of the x-tick labels\nax.set_xticklabels(x, color='black')\n\n# Set the color of the y-tick labels\nax.set_yticklabels([f'{i}' for i in range(0, 85, 5)], color='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the axes\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the title\nax.set_title('Accuracy, iNaturalist 2021', color='black')\n\n# Set the color of the labels\nax.set_xlabel('Methods', color='black')\nax.set_ylabel('Normalized Requirements (lower is better)', color='black')\n\n# Set the color of the x-tick labels\nax.set_xticklabels(x, color='black')\n\n# Set the color of the y-tick labels\nax.set_yticklabels([f'{i}' for i in range(0, 85, 5)], color='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the axes\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the title\nax.set_title('Accuracy, iNaturalist 2021', color='black')\n\n# Set the color of the labels\nax.set_xlabel('Methods', color='black')\nax.set_ylabel('Normalized Requirements (lower is better)', color='black')\n\n# Set the color of the x-tick labels\nax.set_xticklabels(x, color='black')\n\n# Set the color of the y-tick labels\nax.set_yticklabels([f'{i}' for i in range(0, 85, 5)], color='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the axes\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the title\nax.set_title('Accuracy, iNaturalist 2021', color='black')\n\n# Set the color of the labels\nax.set_xlabel('Methods', color='black')\nax.set_ylabel('Normalized Requirements (lower is better)', color='black')\n\n# Set the color of the x-tick labels\nax.set_xticklabels(x, color='black')\n\n# Set the color of the y-tick labels\nax.set_yticklabels([f'{i}' for i in range(0, 85, 5)], color='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the axes\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the title\nax.set_title('Accuracy, iNaturalist 2021', color='black')\n\n# Set the color of the labels\nax.set_xlabel('Methods', color='black')\nax.set_ylabel('Normalized Requirements (lower is better)', color='black')\n\n# Set the color of the x-tick labels\nax.set_xticklabels(x, color='black')\n\n# Set the color of the y-tick labels\nax.set_yticklabels([f'{i}' for i in range(0, 85, 5)], color='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the axes\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the title\nax.set_title('Accuracy, iNaturalist 2021', color='black')\n\n# Set the color of the labels\nax.set_xlabel('Methods', color='black')\nax.set_ylabel('Normalized Requirements (lower is better)', color='black')\n\n# Set the color of the x-tick labels\nax.set_xticklabels(x, color='black')\n\n# Set the color of the y-tick labels\nax.set_yticklabels([f'{i}' for i in range(0, 85, 5)], color='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the axes\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the title\nax.set_title('Accuracy, iNaturalist 2021', color='black')\n\n# Set the color of the labels\nax.set_xlabel('Methods', color='black')\nax.set_ylabel('Normalized Requirements (lower is better)', color='black')\n\n# Set the color of the x-tick labels\nax.set_xticklabels(x, color='black')\n\n# Set the color of the y-tick labels\nax.set_yticklabels([f'{i}' for i in range(0, 85, 5)], color='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the axes\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the title\nax.set_title('Accuracy, iNaturalist 2021', color='black')\n\n# Set the color of the labels\nax.set_xlabel('Methods', color='black')\nax.set_ylabel('Normalized Requirements (lower is better)', color='black')\n\n# Set the color of the x-tick labels\nax.set_xticklabels(x, color='black')\n\n# Set the color of the y-tick labels\nax.set_yticklabels([f'{i}' for i in range(0, 85, 5)], color='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the axes\nax.spines['"}
{"file": "dataset/ori_500/CB_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Set the title of the plot\nax.set_title('TM-score vs. Seq-ident')\n\n# Set the x-axis label\nax.set_xlabel('TM-score')\n\n# Set the y-axis label\nax.set_ylabel('Seq-ident')\n\n# Set the x-axis limits\nax.set_xlim(0, 1)\n\n# Set the y-axis limits\nax.set_ylim(0, 1)\n\n# Draw horizontal lines\nfor i in range(10):\n    ax.axhline(i * 0.1, color='blue', linestyle='--')\n\n# Draw vertical lines\nfor i in range(11):\n    ax.axvline(i * 0.1, color='blue', linestyle='--')\n\n# Draw scatter plots\nfor i in range(10):\n    ax.scatter([i * 0.1] * 10, [j * 0.1 for j in range(10)], color='blue')\n\n# Draw rectangles\nrectangles = [\n    (0.1, 0.9, 0.2, 0.1),\n    (0.3, 0.8, 0.2, 0.1),\n    (0.5, 0.7, 0.2, 0.1),\n    (0.7, 0.6, 0.2, 0.1),\n    (0.9, 0.5, 0.2, 0.1)\n]\nfor rect in rectangles:\n    ax.add_patch(plt.Rectangle(rect[:2], rect[2], rect[3], color='blue'))\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 8))\n\n# Set the background color of the plot\nax.set_facecolor('white')\n\n# Draw a rectangle for the top part\nax.add_patch(plt.Rectangle((0, 3), 1, 1, color='red'))\n\n# Draw a rectangle for the middle part\nax.add_patch(plt.Rectangle((0, 2), 1, 1, color='green'))\n\n# Draw a rectangle for the bottom part\nax.add_patch(plt.Rectangle((0, 1), 1, 1, color='blue'))\n\n# Draw a rectangle for the left part\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='yellow'))\n\n# Draw a rectangle for the right part\nax.add_patch(plt.Rectangle((1, 0), 1, 1, color='cyan'))\n\n# Draw a rectangle for the bottom-left part\nax.add_patch(plt.Rectangle((-1, 0), 1, 1, color='magenta'))\n\n# Draw a rectangle for the bottom-right part\nax.add_patch(plt.Rectangle((2, 0), 1, 1, color='orange'))\n\n# Draw a rectangle for the top-right part\nax.add_patch(plt.Rectangle((1, 3), 1, 1, color='purple'))\n\n# Draw a rectangle for the top-left part\nax.add_patch(plt.Rectangle((-1, 3), 1, 1, color='brown'))\n\n# Draw a rectangle for the center part\nax.add_patch(plt.Rectangle((0, 2), 1, 1, color='pink'))\n\n# Draw a rectangle for the bottom-middle part\nax.add_patch(plt.Rectangle((0, 1), 1, 1, color='grey'))\n\n# Draw a rectangle for the top-middle part\nax.add_patch(plt.Rectangle((0, 3), 1, 1, color='black'))\n\n# Draw a rectangle for the left-middle part\nax.add_patch(plt.Rectangle((-1, 2), 1, 1, color='silver'))\n\n# Draw a rectangle for the right-middle part\nax.add_patch(plt.Rectangle((1, 2), 1, 1, color='gold'))\n\n# Draw a rectangle for the bottom-left-middle part\nax.add_patch(plt.Rectangle((-1, 1), 1, 1, color='lime'))\n\n# Draw a rectangle for the bottom-right-middle part\nax.add_patch(plt.Rectangle((1, 1), 1, 1, color='navy'))\n\n# Draw a rectangle for the top-left-middle part\nax.add_patch(plt.Rectangle((-1, 3), 1, 1, color='olive'))\n\n# Draw a rectangle for the top-right-middle part\nax.add_patch(plt.Rectangle((1, 3), 1, 1, color='maroon'))\n\n# Draw a rectangle for the bottom-left-middle-middle part\nax.add_patch(plt.Rectangle((-1, 0.5), 1, 1, color='teal'))\n\n# Draw a rectangle for the bottom-right-middle-middle part\nax.add_patch(plt.Rectangle((1, 0.5), 1, 1, color='coral'))\n\n# Draw a rectangle for the top-left-middle-middle part\nax.add_patch(plt.Rectangle((-1, 3.5), 1, 1, color='indigo'))\n\n# Draw a rectangle for the top-right-middle-middle part\nax.add_patch(plt.Rectangle((1, 3.5), 1, 1, color='violet'))\n\n# Draw a rectangle for the bottom-left-middle-middle-middle part\nax.add_patch(plt.Rectangle((-1, 0.25), 1, 1, color='chartreuse'))\n\n# Draw a rectangle for the bottom-right-middle-middle-middle part\nax.add_patch(plt.Rectangle((1, 0.25), 1, 1, color='saddlebrown'))\n\n# Draw a rectangle for the top-left-middle-middle-middle part\nax.add_patch(plt.Rectangle((-1, 3.75), 1, 1, color='darkslategray'))\n\n# Draw a rectangle for the top-right-middle-middle-middle part\nax.add_patch(plt.Rectangle((1, 3.75), 1, 1, color='darkslateblue'))\n\n# Draw a rectangle for the bottom-left-middle-middle-middle-middle part\nax.add_patch(plt.Rectangle((-1, 0.125), 1, 1, color='darkseagreen'))\n\n# Draw a rectangle for the bottom-right-middle-middle-middle-middle part\nax.add_patch(plt.Rectangle((1, 0.125), 1, 1, color='darkslateblack'))\n\n# Draw a rectangle for the top-left-middle-middle-middle-middle part\nax.add_patch(plt.Rectangle((-1, 3.875), 1, 1, color='darkturquoise'))\n\n# Draw a rectangle for the top-right-middle-middle-middle-middle part\nax.add_patch(plt.Rectangle((1, 3.875), 1, 1, color='darkviolet'))\n\n# Draw a rectangle for the bottom-left-middle-middle-middle-middle-middle part\nax.add_patch(plt.Rectangle((-1, 0.0625), 1, 1, color='darkolivegreen'))\n\n# Draw a rectangle for the bottom-right-middle-middle-middle-middle-middle part\nax.add_patch(plt.Rectangle((1, 0.0625), 1, 1, color='darkorchid'))\n\n# Draw a rectangle for the top-left-middle-middle-middle-middle-middle part\nax.add_patch(plt.Rectangle((-1, 3.9375), 1, 1, color='darkkhaki'))\n\n# Draw a rectangle for the top-right-middle-middle-middle-middle-middle part\nax.add_patch(plt.Rectangle((1, 3.9375), 1, 1, color='darkgoldenrod'))\n\n# Draw a rectangle for the bottom-left-middle-middle-middle-middle-middle-middle part\nax.add_patch(plt.Rectangle((-1, 0.03125), 1, 1, color='darkcyan'))\n\n# Draw a rectangle for the bottom-right-middle-middle-middle-middle-middle-middle part\nax.add_patch(plt.Rectangle((1, 0.03125), 1, 1, color='darkmagenta'))\n\n# Draw a rectangle for the top-left-middle-middle-middle-middle-middle-middle part\nax.add_patch(plt.Rectangle((-1, 3.96875), 1, 1, color='darkred'))\n\n# Draw a rectangle for the top-right-middle-middle-middle-middle-middle-middle part\nax.add_patch(plt.Rectangle((1, 3.96875), 1, 1, color='darkblue'))\n\n# Draw a rectangle for the bottom-left-middle-middle-middle-middle-middle-middle-middle part\nax.add_patch(plt.Rectangle((-1, 0.015625), 1, 1, color='darkgreen'))\n\n# Draw a rectangle for the bottom-right-middle-middle-middle-middle-middle-middle-middle part\nax.add_patch(plt.Rectangle((1, 0.015625), 1, 1, color='darkgrey'))\n\n# Draw a rectangle for the top-left-middle-middle-middle-middle-middle-middle-middle part\nax.add_patch(plt.Rectangle((-1, 3.984375), 1, 1, color='darkorange'))\n\n# Draw a rectangle for the top-right-middle-middle-middle-middle-middle-middle-middle part\nax.add_patch(plt.Rectangle((1, 3.984375), 1, 1, color='darkpurple'))\n\n# Draw a rectangle for the bottom-left-middle-middle-middle-middle-middle-middle-middle-middle part\nax.add_patch(plt.Rectangle((-1, 0.0078125), 1, 1, color='darkslateblue'))\n\n# Draw a rectangle for the bottom-right-middle-middle-middle-middle-middle-middle-middle-middle part\nax.add_patch(plt.Rectangle((1, 0.0078125), 1, 1, color='darkslateblack'))\n\n# Draw a rectangle for the top-left-middle-middle-middle-middle-middle-middle-middle-middle part\nax.add_patch(plt.Rectangle((-1, 3.9921875), 1, 1, color='darkseagreen'))\n\n# Draw a rectangle for the top-right-middle-middle-middle-middle-middle-middle-middle-middle part\nax.add_patch(plt.Rectangle((1, 3.9921875), 1, 1, color='darkslateblack'))\n\n# Draw a rectangle for the bottom-left-middle-middle-middle-middle-middle-middle-middle-middle-middle part\nax.add_patch(plt.Rectangle((-1, 0.00390625), 1, 1, color='darkturquoise'))\n\n# Draw a rectangle for the bottom-right-middle-middle-middle-middle-middle-middle-middle-middle-middle part\nax.add_patch(plt.Rectangle((1, 0.00390625), 1, 1, color='darkviolet'))\n\n# Draw a rectangle for the top-left-middle-middle-middle-middle-middle-middle-middle-middle-middle part\nax.add_patch(plt.Rectangle((-1, 3.99609375), 1, 1, color='darkolivegreen'))\n\n# Draw a rectangle for the top-right-middle-middle-middle-middle-middle-middle-middle-middle-middle part\nax.add_patch(plt.Rectangle((1, 3.99609375), 1, 1, color='darkorchid'))\n\n# Draw a rectangle for the bottom-left-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle part\nax.add_patch(plt.Rectangle((-1, 0.001953125), 1, 1, color='darkkhaki'))\n\n# Draw a rectangle for the bottom-right-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle part\nax.add_patch(plt.Rectangle((1, 0.001953125), 1, 1, color='darkgoldenrod'))\n\n# Draw a rectangle for the top-left-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle part\nax.add_patch(plt.Rectangle((-1, 3.998046875), 1, 1, color='darkcyan'))\n\n# Draw a rectangle for the top-right-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle part\nax.add_patch(plt.Rectangle((1, 3.998046875), 1, 1, color='darkmagenta'))\n\n# Draw a rectangle for the bottom-left-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle part\nax.add_patch(plt.Rectangle((-1, 0.0009765625), 1, 1, color='darkred'))\n\n# Draw a rectangle for the bottom-right-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle part\nax.add_patch(plt.Rectangle((1, 0.0009765625), 1, 1, color='darkblue'))\n\n# Draw a rectangle for the top-left-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle part\nax.add_patch(plt.Rectangle((-1, 3.9990234375), 1, 1, color='darkgreen'))\n\n# Draw a rectangle for the top-right-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle part\nax.add_patch(plt.Rectangle((1, 3.9990234375), 1, 1, color='darkgrey'))\n\n# Draw a rectangle for the bottom-left-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle part\nax.add_patch(plt.Rectangle((-1, 0.00048828125), 1, 1, color='darkorange'))\n\n# Draw a rectangle for the bottom-right-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle part\nax.add_patch(plt.Rectangle((1, 0.00048828125), 1, 1, color='darkpurple'))\n\n# Draw a rectangle for the top-left-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle part\nax.add_patch(plt.Rectangle((-1, 3.99951171875), 1, 1, color='darkslateblue'))\n\n# Draw a rectangle for the top-right-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle part\nax.add_patch(plt.Rectangle((1, 3.99951171875), 1, 1, color='darkslateblack'))\n\n# Draw a rectangle for the bottom-left-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle part\nax.add_patch(plt.Rectangle((-1, 0.000244140625), 1, 1, color='darkseagreen'))\n\n# Draw a rectangle for the bottom-right-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle part\nax.add_patch(plt.Rectangle((1, 0.000244140625), 1, 1, color='darkslateblack'))\n\n# Draw a rectangle for the top-left-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle part\nax.add_patch(plt.Rectangle((-1, 3.999755859375), 1, 1, color='darkturquoise'))\n\n# Draw a rectangle for the top-right-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle part\nax.add_patch(plt.Rectangle((1, 3.999755859375), 1, 1, color='darkviolet'))\n\n# Draw a rectangle for the bottom-left-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle part\nax.add_patch(plt.Rectangle((-1, 0.0001220703125), 1, 1, color='darkolivegreen'))\n\n# Draw a rectangle for the bottom-right-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle part\nax.add_patch(plt.Rectangle((1, 0.0001220703125), 1, 1, color='darkorchid'))\n\n# Draw a rectangle for the top-left-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle part\nax.add_patch(plt.Rectangle((-1, 3.99987790625), 1, 1, color='darkkhaki'))\n\n# Draw a rectangle for the top-right-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle part\nax.add_patch(plt.Rectangle((1, 3.99987790625), 1, 1, color='darkgoldenrod'))\n\n# Draw a rectangle for the bottom-left-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle part\nax.add_patch(plt.Rectangle((-1, 0.00006103515625), 1, 1, color='darkcyan'))\n\n# Draw a rectangle for the bottom-right-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle part\nax.add_patch(plt.Rectangle((1, 0.00006103515625), 1, 1, color='darkmagenta'))\n\n# Draw a rectangle for the top-left-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle part\nax.add_patch(plt.Rectangle((-1, 3.9999389375), 1, 1, color='darkred'))\n\n# Draw a rectangle for the top-right-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle part\nax.add_patch(plt.Rectangle((1, 3.9999389375), 1, 1, color='darkblue'))\n\n# Draw a rectangle for the bottom-left-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle part\nax.add_patch(plt.Rectangle((-1, 0.000030517578125), 1, 1, color='darkgreen'))\n\n# Draw a rectangle for the bottom-right-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle part\nax.add_patch(plt.Rectangle((1, 0.000030517578125), 1, 1, color='darkgrey'))\n\n# Draw a rectangle for the top-left-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle part\nax.add_patch(plt.Rectangle((-1, 3.99996946875), 1, 1, color='darkorange'))\n\n# Draw a rectangle for the top-right-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle part\nax.add_patch(plt.Rectangle((1, 3.99996946875), 1, 1, color='darkpurple'))\n\n# Draw a rectangle for the bottom-left-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle part\nax.add_patch(plt.Rectangle((-1, 0.0000152587890625), 1, 1, color='darkslateblue'))\n\n# Draw a rectangle for the bottom-right-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle part\nax.add_patch(plt.Rectangle((1, 0.0000152587890625), 1, 1, color='darkslateblack'))\n\n# Draw a rectangle for the top-left-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle part\nax.add_patch(plt.Rectangle((-1, 3.999984734375), 1, 1, color='darkseagreen'))\n\n# Draw a rectangle for the top-right-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle part\nax.add_patch(plt.Rectangle((1, 3.999984734375), 1, 1, color='darkslateblack'))\n\n# Draw a rectangle for the bottom-left-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle part\nax.add_patch(plt.Rectangle((-1, 0.00000762939453125), 1, 1, color='darkturquoise'))\n\n# Draw a rectangle for the bottom-right-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle part\nax.add_patch(plt.Rectangle((1, 0.00000"}
{"file": "dataset/ori_500/CB_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data points\nx = [0, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 104, 112, 120, 128]\ny = [99.6, 99.9, 96.0, 99.9, 92.3, 90.9, 99.5, 92.5, 91.3, 90.9, 92.3, 93.3, 98.7, 99.9, 99.9, 99.9, 99.9]\n\n# Plotting\nplt.figure(figsize=(8.0, 6.0))\nplt.plot(x, y, 'b-')\nplt.scatter(x, y, color='blue')\n\n# Setting labels and title\nplt.xlabel('HC_first (after aging)')\nplt.ylabel('HC_first (before aging)')\nplt.title('HC_first over time')\n\n# Display plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Set the background color of the plot\nax.set_facecolor('white')\n\n# Set the title of the plot\nax.set_title('TMS Score vs Sequence ID')\n\n# Set the x-axis label\nax.set_xlabel('TMS Score')\n\n# Set the y-axis label\nax.set_ylabel('Sequence ID')\n\n# Set the x-axis limits\nax.set_xlim(0.1, 1.0)\n\n# Set the y-axis limits\nax.set_ylim(0.1, 0.6)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.2, 0.5), 0.3, 0.1, color='blue')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.4, 0.4), 0.3, 0.1, color='green')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.6, 0.3), 0.3, 0.1, color='red')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.8, 0.2), 0.3, 0.1, color='yellow')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.1, 0.1), 0.3, 0.1, color='purple')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.3, 0.5), 0.3, 0.1, color='orange')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.5, 0.4), 0.3, 0.1, color='pink')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.7, 0.3), 0.3, 0.1, color='brown')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.9, 0.2), 0.3, 0.1, color='cyan')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.1, 0.5), 0.3, 0.1, color='magenta')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.3, 0.4), 0.3, 0.1, color='lime')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.5, 0.3), 0.3, 0.1, color='silver')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.7, 0.2), 0.3, 0.1, color='gold')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.9, 0.1), 0.3, 0.1, color='navy')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.1, 0.5), 0.3, 0.1, color='teal')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.3, 0.4), 0.3, 0.1, color='olive')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.5, 0.3), 0.3, 0.1, color='coral')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.7, 0.2), 0.3, 0.1, color='indigo')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.9, 0.1), 0.3, 0.1, color='maroon')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.1, 0.5), 0.3, 0.1, color='aqua')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.3, 0.4), 0.3, 0.1, color='silver')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.5, 0.3), 0.3, 0.1, color='gold')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.7, 0.2), 0.3, 0.1, color='navy')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.9, 0.1), 0.3, 0.1, color='teal')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.1, 0.5), 0.3, 0.1, color='olive')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.3, 0.4), 0.3, 0.1, color='coral')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.5, 0.3), 0.3, 0.1, color='indigo')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.7, 0.2), 0.3, 0.1, color='maroon')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.9, 0.1), 0.3, 0.1, color='aqua')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.1, 0.5), 0.3, 0.1, color='silver')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.3, 0.4), 0.3, 0.1, color='gold')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.5, 0.3), 0.3, 0.1, color='navy')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.7, 0.2), 0.3, 0.1, color='teal')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.9, 0.1), 0.3, 0.1, color='olive')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.1, 0.5), 0.3, 0.1, color='coral')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.3, 0.4), 0.3, 0.1, color='indigo')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.5, 0.3), 0.3, 0.1, color='maroon')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.7, 0.2), 0.3, 0.1, color='aqua')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.9, 0.1), 0.3, 0.1, color='silver')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.1, 0.5), 0.3, 0.1, color='gold')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.3, 0.4), 0.3, 0.1, color='navy')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.5, 0.3), 0.3, 0.1, color='teal')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.7, 0.2), 0.3, 0.1, color='olive')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.9, 0.1), 0.3, 0.1, color='coral')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.1, 0.5), 0.3, 0.1, color='indigo')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.3, 0.4), 0.3, 0.1, color='maroon')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.5, 0.3), 0.3, 0.1, color='aqua')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.7, 0.2), 0.3, 0.1, color='silver')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.9, 0.1), 0.3, 0.1, color='gold')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.1, 0.5), 0.3, 0.1, color='navy')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.3, 0.4), 0.3, 0.1, color='teal')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.5, 0.3), 0.3, 0.1, color='olive')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.7, 0.2), 0.3, 0.1, color='coral')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.9, 0.1), 0.3, 0.1, color='indigo')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.1, 0.5), 0.3, 0.1, color='maroon')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.3, 0.4), 0.3, 0.1, color='aqua')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.5, 0.3), 0.3, 0.1, color='silver')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.7, 0.2), 0.3, 0.1, color='gold')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.9, 0.1), 0.3, 0.1, color='navy')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.1, 0.5), 0.3, 0.1, color='teal')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.3, 0.4), 0.3, 0.1, color='olive')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.5, 0.3), 0.3, 0.1, color='coral')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.7, 0.2), 0.3, 0.1, color='indigo')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.9, 0.1), 0.3, 0.1, color='maroon')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.1, 0.5), 0.3, 0.1, color='aqua')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.3, 0.4), 0.3, 0.1, color='silver')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.5, 0.3), 0.3, 0.1, color='gold')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.7, 0.2), 0.3, 0.1, color='navy')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.9, 0.1), 0.3, 0.1, color='teal')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.1, 0.5), 0.3, 0.1, color='olive')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.3, 0.4), 0.3, 0.1, color='coral')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.5, 0.3), 0.3, 0.1, color='indigo')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.7, 0.2), 0.3, 0.1, color='maroon')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.9, 0.1), 0.3, 0.1, color='aqua')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.1, 0.5), 0.3, 0.1, color='silver')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.3, 0.4), 0.3, 0.1, color='gold')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.5, 0.3), 0.3, 0.1, color='navy')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.7, 0.2), 0.3, 0.1, color='teal')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.9, 0.1), 0.3, 0.1, color='olive')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.1, 0.5), 0.3, 0.1, color='coral')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.3, 0.4), 0.3, 0.1, color='indigo')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.5, 0.3), 0.3, 0.1, color='maroon')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.7, 0.2), 0.3, 0.1, color='aqua')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.9, 0.1), 0.3, 0.1, color='silver')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.1, 0.5), 0.3, 0.1, color='gold')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.3, 0.4), 0.3, 0.1, color='navy')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.5, 0.3), 0.3, 0.1, color='teal')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.7, 0.2), 0.3, 0.1, color='olive')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.9, 0.1), 0.3, 0.1, color='coral')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.1, 0.5), 0.3, 0.1, color='indigo')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.3, 0.4), 0.3, 0.1, color='maroon')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.5, 0.3), 0.3, 0.1, color='aqua')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.7, 0.2), 0.3, 0.1, color='silver')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.9, 0.1), 0.3, 0.1, color='gold')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.1, 0.5), 0.3, 0.1, color='navy')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.3, 0.4), 0.3, 0.1, color='teal')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.5, 0.3), 0.3, 0.1, color='olive')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.7, 0.2), 0.3, 0.1, color='coral')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.9, 0.1), 0.3, 0.1, color='indigo')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.1, 0.5), 0.3, 0.1,"}
{"file": "dataset/ori_500/CB_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nyears = [4211, 2411, 2141, 1124]\nvalues = [0.9628, 0.9604, 0.9624, 0.9592]\ncolors = ['blue', 'green', 'blue', 'green']\nsum_value = 0.9641\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Plot the values\nfor i, value in enumerate(values):\n    ax.bar(years[i], value, color=colors[i])\n\n# Draw a line graph\nax.plot(years, values, 'r-')\n\n# Add a red dot at the end of the line graph\nax.plot(years[-1], values[-1], 'ro')\n\n# Add a rectangle with the sum value\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='red'))\n\n# Set the title and labels\nax.set_title('SRCC and PLCC values with their sum for different modes')\nax.set_xlabel('Modes')\nax.set_ylabel('Values')\n\n# Set the y-axis limits\nax.set_ylim(-1.96, -1.95)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 3.0))\n\n# Define the data for the plots\ndata = [\n    [176, 176, 176, 176, 176, 176, 176],\n    [0, 0, 0, 0, 0, 0, 0],\n    [176, 176, 176, 176, 176, 176, 176],\n    [0, 0, 0, 0, 0, 0, 0],\n    [176, 176, 176, 176, 176, 176, 176],\n    [0, 0, 0, 0, 0, 0, 0],\n    [176, 176, 176, 176, 176, 176, 176],\n    [0, 0, 0, 0, 0, 0, 0],\n    [176, 176, 176, 176, 176, 176, 176],\n    [0, 0, 0, 0, 0, 0, 0],\n    [176, 176, 176, 176, 176, 176, 176],\n    [0, 0, 0, 0, 0, 0, 0]\n]\n\n# Plot the data\nfor i in range(12):\n    ax.plot([i], [data[i]], 'o', color='orange')\n\n# Set the title and labels\nax.set_title('IIID-1 SDMT')\nax.set_xlabel('Client')\nax.set_ylabel('Value')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Set the title of the plot\nax.set_title('Compact Spiral with Elliptical Hollow Center')\n\n# Draw a circle\ncircle = plt.Circle((0, 0), 1, color='blue')\nax.add_artist(circle)\n\n# Draw a spiral\ntheta = np.linspace(0, 2*np.pi, 100)\nr = np.linspace(0, 5, 100)\nx = r * np.cos(theta)\ny = r * np.sin(theta)\nax.plot(x, y, 'b-')\n\n# Draw a rectangle\nrectangle = plt.Rectangle((-5, -5), 10, 10, color='blue', fill=False)\nax.add_artist(rectangle)\n\n# Set the limits of the plot\nax.set_xlim(-10, 10)\nax.set_ylim(-10, 10)\n\n# Set the ticks\nax.set_xticks(np.arange(-10, 11, 1))\nax.set_yticks(np.arange(-10, 11, 1))\n\n# Set the labels\nax.set_xlabel('X-axis')\nax.set_ylabel('Y-axis')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 7.0))\n\n# Set the title of the plot\nax.set_title('DAXPY memory bandwidth')\n\n# Set the x-axis label\nax.set_xlabel('Flops/byte')\n\n# Set the y-axis label\nax.set_ylabel('10^x')\n\n# Set the x-axis limits\nax.set_xlim(10**-1, 10**1)\n\n# Set the y-axis limits\nax.set_ylim(10**10, 10**12)\n\n# Set the x-axis ticks\nax.set_xticks([10**-1, 10**0, 10**1])\n\n# Set the y-axis ticks\nax.set_yticks([10**10, 10**11, 10**12])\n\n# Set the x-axis tick labels\nax.set_xticklabels(['10^-1', '10^0', '10^1'])\n\n# Set the y-axis tick labels\nax.set_yticklabels(['10^10', '10^11', '10^12'])\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the bottom and left axis lines\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='minor', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', length=5)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', direction='in')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', pad=5)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', rotation=0)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', length=5)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', direction='in')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', pad=5)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', rotation=0)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', length=5)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', direction='in')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', pad=5)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', rotation=0)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', length=5)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', direction='in')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', pad=5)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', rotation=0)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', length=5)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', direction='in')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', pad=5)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', rotation=0)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', length=5)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', direction='in')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', pad=5)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', rotation=0)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', length=5)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', direction='in')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', pad=5)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', rotation=0)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', length=5)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', direction='in')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', pad=5)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', rotation=0)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', length=5)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', direction='in')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', pad=5)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', rotation=0)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', length=5)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', direction='in')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', pad=5)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', rotation=0)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', length=5)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', direction='in')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', pad=5)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', rotation=0)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', length=5)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', direction='in')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', pad=5)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', rotation=0)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', length=5)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', direction='in')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', pad=5)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', rotation=0)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', length=5)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', direction='in')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', pad=5)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', rotation=0)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', length=5)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', direction='in')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', pad=5)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', rotation=0)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', length=5)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', direction='in')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', pad=5)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', rotation=0)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', length=5)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', direction='in')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', pad=5)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', rotation=0)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', length=5)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', direction='in')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', pad=5)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', rotation=0)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', length=5)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', direction='in')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', pad=5)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', rotation=0)\n\n# Set the color"}
{"file": "dataset/ori_500/HR_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the bar chart\nx = [0.45, 0.5, 0.55, 0.6, 0.65, 0.7, 0.75]\ny = [0.06, -0.06, -0.06, -0.02, -0.02, -0.01, 0]\n\n# Create a bar chart with the specified data\nplt.bar(x, y, color='blue')\n\n# Set the title of the chart\nplt.title('f(x) = 0.50')\n\n# Set the x-axis label\nplt.xlabel('x')\n\n# Set the y-axis label\nplt.ylabel('f(x)')\n\n# Set the figure size\nfig = plt.gcf()\nfig.set_size_inches(8.0, 6.0)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Define the colors for the rectangles\ncolors = ['pink', 'orange', 'lightgreen']\n\n# Draw the rectangles\nfor i, color in enumerate(colors):\n    ax.add_patch(plt.Rectangle((i*2, 0), 1, 1, color=color, edgecolor='black'))\n\n# Set the limits of the plot\nax.set_xlim(-1, 5)\nax.set_ylim(-1, 1)\n\n# Set the aspect ratio of the plot\nax.set_aspect('equal')\n\n# Set the title of the plot\nax.set_title('CigaR')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Qwen-VL-Max')\n\n# Create a color map for the rectangles\ncmap = plt.get_cmap('tab20')\n\n# Create a rectangle for each level\nfor i in range(1, 6):\n    # Create a rectangle with a random color from the colormap\n    rect = plt.Rectangle((i*0.1, 0), 0.1, 30, color=cmap(i))\n    ax.add_patch(rect)\n\n# Create a circle for the center of the plot\ncircle = plt.Circle((0.5, 0.5), 0.4, color='blue')\nax.add_artist(circle)\n\n# Set the limits of the x-axis\nax.set_xlim(0, 6)\n\n# Set the limits of the y-axis\nax.set_ylim(0, 30)\n\n# Set the labels of the x-axis\nax.set_xticks([1, 2, 3, 4, 5])\nax.set_xticklabels(['Level 1', 'Level 2', 'Level 3', 'Level 4', 'Level 5'])\n\n# Set the labels of the y-axis\nax.set_yticks([10, 20, 30])\nax.set_yticklabels(['GPT4V-CoT', 'Gemini Pro-Cot', 'InternLM-XComposer2-VL'])\n\n# Set the aspect ratio of the plot\nax.set_aspect('equal')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 4))\n\n# Define the data\nx = np.logspace(1, 2, 100)\ny1 = 10**np.linspace(-1, -3, 100)\ny2 = 10**np.linspace(-2, -4, 100)\n\n# Plot the data\nax.plot(x, y1, 'o-', color='purple')\nax.plot(x, y2, 'o-', color='pink')\n\n# Set the labels and title\nax.set_xlabel('Number of matvecs m')\nax.set_ylabel('Approximation error ||A - A\u0302||F')\nax.set_title('Approximation Error vs Number of Matvecs')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_16.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Set the aspect ratio of the plot to be equal\nax.set_aspect('equal')\n\n# Draw a circle with a radius of 1 centered at (0,0)\ncircle = plt.Circle((0,0), 1, color='black')\nax.add_artist(circle)\n\n# Define the colors for each sector\ncolors = ['lightgreen', 'lightblue', 'lightcoral', 'lightskyblue']\n\n# Define the labels for each sector\nlabels = ['Retrive.KV', 'En.Sum', 'Retrive.Number', 'En.QA', 'Retrive.PassKey']\n\n# Define the sizes of each sector\nsizes = [0.25, 0.25, 0.25, 0.25, 0]\n\n# Draw the pie chart\nwedges, texts, autotexts = ax.pie(sizes, colors=colors, labels=labels, autopct='%1.1f%%', startangle=90)\n\n# Set the title of the plot\nax.set_title('Pie Chart')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_17.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6, 5))\n\n# Define the data for the plot\nx = np.linspace(0, 100, 100)\ny1 = np.sin(x / 10)\ny2 = np.cos(x / 10)\ny3 = np.tan(x / 10)\ny4 = np.exp(-x / 100)\n\n# Plot the data with different colors\nax.plot(x, y1, color='green')\nax.plot(x, y2, color='orange')\nax.plot(x, y3, color='blue')\nax.plot(x, y4, color='red')\n\n# Set the limits of the x-axis\nax.set_xlim(0, 100)\n\n# Set the title and labels\nax.set_title('Stock Prices')\nax.set_xlabel('Time (days)')\nax.set_ylabel('Price ($)')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_18.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(7, 5))\n\n# Set the title of the plot\nax.set_title('Uncertainty in Thermal Conductivity Measurements')\n\n# Set the x-axis label\nax.set_xlabel('Sample Number')\n\n# Set the y-axis label\nax.set_ylabel('Thermal Conductivity (W/m.K)')\n\n# Define the data for the plot\nx = [0, 1, 2, 3, 4, 5, 6]\ny = [3.2, 3.4, 3.6, 3.8, 4.0, 4.2, 4.4]\n\n# Plot the data\nax.plot(x, y, 'bo-')\n\n# Set the limits of the x-axis\nax.set_xlim(0, 6)\n\n# Set the limits of the y-axis\nax.set_ylim(1.5, 4.5)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_19.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ngames = ['I', 'II', 'III', 'IV', 'V']\nscores = [28, 20, 10, 20, 28]\ncolors = ['green', 'green', 'green', 'green', 'green']\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(7, 5))\n\n# Plot the bars\nfor game, score, color in zip(games, scores, colors):\n    ax.bar(game, score, color=color)\n\n# Set the title and labels\nax.set_title('Scores by number of game and players')\nax.set_xlabel('Games')\nax.set_ylabel('Score')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_2.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Plot the first variable\nax.plot(np.linspace(-6, 6, 100), np.sin(np.linspace(-6, 6, 100)), color='red')\n\n# Plot the second variable\nax.plot(np.linspace(-6, 6, 100), np.cos(np.linspace(-6, 6, 100)), color='blue')\n\n# Plot the third variable\nax.plot(np.linspace(-6, 6, 100), np.tan(np.linspace(-6, 6, 100)), color='green')\n\n# Set the title and labels\nax.set_title('Variable 2')\nax.set_xlabel('Variable 1')\nax.set_ylabel('Time')\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/HR_20.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the bar chart\nlabels = ['Female Player', 'Male Player', 'LLM Player', 'Person Player']\nvalues = [5.7, 6.2, 7.0, 3.4]\ncolors = ['pink', 'skyblue', 'lightgreen', 'lightblue']\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Plot the bar chart\nax.bar(labels, values, color=colors)\n\n# Set the title and labels\nax.set_title('Average Amount Sent ($)')\nax.set_xlabel('Player Type')\nax.set_ylabel('Amount Sent ($)')\n\n# Add a horizontal line at y=7.5\nax.axhline(y=7.5, color='r', linestyle='-')\n\n# Add a horizontal line at y=7.0\nax.axhline(y=7.0, color='r', linestyle='-')\n\n# Add a horizontal line at y=6.5\nax.axhline(y=6.5, color='r', linestyle='-')\n\n# Add a horizontal line at y=6.0\nax.axhline(y=6.0, color='r', linestyle='-')\n\n# Add a horizontal line at y=5.5\nax.axhline(y=5.5, color='r', linestyle='-')\n\n# Add a horizontal line at y=5.0\nax.axhline(y=5.0, color='r', linestyle='-')\n\n# Add a horizontal line at y=4.5\nax.axhline(y=4.5, color='r', linestyle='-')\n\n# Add a horizontal line at y=4.0\nax.axhline(y=4.0, color='r', linestyle='-')\n\n# Add a horizontal line at y=3.5\nax.axhline(y=3.5, color='r', linestyle='-')\n\n# Add a horizontal line at y=3.0\nax.axhline(y=3.0, color='r', linestyle='-')\n\n# Add a horizontal line at y=2.5\nax.axhline(y=2.5, color='r', linestyle='-')\n\n# Add a horizontal line at y=2.0\nax.axhline(y=2.0, color='r', linestyle='-')\n\n# Add a horizontal line at y=1.5\nax.axhline(y=1.5, color='r', linestyle='-')\n\n# Add a horizontal line at y=1.0\nax.axhline(y=1.0, color='r', linestyle='-')\n\n# Add a horizontal line at y=0.5\nax.axhline(y=0.5, color='r', linestyle='-')\n\n# Add a horizontal line at y=0.0\nax.axhline(y=0.0, color='r', linestyle='-')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_21.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nx = [0, 25, 50, 75]\ny1 = [10, 30, 40, 60]\ny2 = [15, 35, 45, 65]\ny3 = [20, 40, 50, 70]\ny4 = [25, 45, 55, 75]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(7.0, 5.0))\n\n# Plot the data\nax.plot(x, y1, 'g-', label='Running')\nax.plot(x, y2, 'r-', label='Interrupted')\nax.plot(x, y3, 'y-', label='Rest')\nax.plot(x, y4, 'g-', label='Running2')\n\n# Add a title and labels\nax.set_title('Endurance Race Performance Analysis')\nax.set_xlabel('Seconds Since Start')\nax.set_ylabel('Performance')\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_22.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(7, 5))\n\n# Define the data for the plot\nx = np.linspace(-10, 10, 100)\ny = np.sin(x)\n\n# Plot the data\nax.plot(x, y, color='green')\n\n# Set the title of the plot\nax.set_title('Control Group')\n\n# Set the x-axis label\nax.set_xlabel('Number of Observations')\n\n# Set the y-axis label\nax.set_ylabel('Value Range')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_23.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nx = [-150, -120, -100, -75, -50, -35, -135, -100, -50, 0, 50, 75, 100, 125, 150]\ny = [350, 150, 100, 200, 75, 25, 50, 100, 50, 25, 0, 75, 100, 125, 150]\n\n# Plot\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\nax.plot(x, y, 'k-')\nax.set_xlim(-150, 150)\nax.set_ylim(700, 1300)\nax.set_xlabel('Time (s)')\nax.set_ylabel('Value ($)')\nax.grid(True)\n\n# Rectangles\nrectangles = [\n    plt.Rectangle((-150, 700), 100, 600, color='green'),\n    plt.Rectangle((-120, 700), 100, 400, color='red'),\n    plt.Rectangle((-100, 700), 100, 300, color='green'),\n    plt.Rectangle((-75, 700), 100, 200, color='red'),\n    plt.Rectangle((-50, 700), 100, 100, color='green'),\n    plt.Rectangle((-35, 700), 100, 50, color='red'),\n    plt.Rectangle((-135, 700), 100, 200, color='green'),\n    plt.Rectangle((-100, 700), 100, 100, color='red'),\n    plt.Rectangle((-50, 700), 100, 50, color='green'),\n    plt.Rectangle((0, 700), 100, 25, color='red'),\n    plt.Rectangle((50, 700), 100, 75, color='green'),\n    plt.Rectangle((75, 700), 100, 100, color='red'),\n    plt.Rectangle((100, 700), 100, 125, color='green'),\n    plt.Rectangle((125, 700), 100, 150, color='red')\n]\n\nfor rect in rectangles:\n    ax.add_patch(rect)\n\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_24.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Define the color map\ncmap = plt.get_cmap('coolwarm')\n\n# Create a circle\ncircle = plt.Circle((0.5, 0.5), 0.4, color='blue', fill=False)\n\n# Add the circle to the plot\nax.add_artist(circle)\n\n# Set the limits of the plot\nax.set_xlim(0, 1)\nax.set_ylim(0, 1)\n\n# Set the aspect ratio of the plot\nax.set_aspect('equal')\n\n# Set the title of the plot\nax.set_title('tripcolor of Delaunay triangulation, flat shading')\n\n# Set the color bar\nsm = plt.cm.ScalarMappable(cmap=cmap, norm=plt.Normalize(-1, 1))\nsm._A = []\ncbar = fig.colorbar(sm)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_25.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('NonUniformImage class')\n\n# Define the data for the heatmap\ndata = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n\n# Create a heatmap\nim = ax.imshow(data, cmap='hot', interpolation='nearest')\n\n# Add a colorbar to the plot\ncbar = fig.colorbar(im)\n\n# Set the x-axis and y-axis labels\nax.set_xticks(np.arange(len(data[0])))\nax.set_yticks(np.arange(len(data)))\nax.set_xticklabels(['-4', '-3', '-2', '-1', '0', '1', '2', '3', '4'])\nax.set_yticklabels(['-4', '-3', '-2', '-1', '0', '1', '2', '3', '4'])\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the first graph\nx1 = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\ny1 = [100, 200, 300, 400, 500, 600, 500, 400, 300, 200]\n\n# Data for the second graph\nx2 = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\ny2 = [150, 250, 350, 450, 550, 650, 550, 450, 350, 250]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 4))\n\n# Plot the data\nax.plot(x1, y1, 'ro-')\nax.plot(x2, y2, 'bo-')\n\n# Set the title and labels\nax.set_title('Flickr30k')\nax.set_xlabel('Number of bits')\nax.set_ylabel('Recall sum')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Denser Points with Perfectly Circular Error Ellipses')\n\n# Set the x-axis label\nax.set_xlabel('x(m)')\n\n# Set the y-axis label\nax.set_ylabel('y(m)')\n\n# Set the x-axis limits\nax.set_xlim(0, 25)\n\n# Set the y-axis limits\nax.set_ylim(0, 3)\n\n# Draw a red line\nax.plot([0, 25], [0, 25], 'r-')\n\n# Draw a blue circle\ncircle1 = plt.Circle((5, 1), 0.5, color='blue')\nax.add_artist(circle1)\n\n# Draw a blue circle\ncircle2 = plt.Circle((10, 1.5), 0.5, color='blue')\nax.add_artist(circle2)\n\n# Draw a blue circle\ncircle3 = plt.Circle((15, 2), 0.5, color='blue')\nax.add_artist(circle3)\n\n# Draw a blue circle\ncircle4 = plt.Circle((20, 2.5), 0.5, color='blue')\nax.add_artist(circle4)\n\n# Draw a blue circle\ncircle5 = plt.Circle((25, 3), 0.5, color='blue')\nax.add_artist(circle5)\n\n# Draw a red circle\ncircle6 = plt.Circle((5, 1), 0.5, color='red')\nax.add_artist(circle6)\n\n# Draw a red circle\ncircle7 = plt.Circle((10, 1.5), 0.5, color='red')\nax.add_artist(circle7)\n\n# Draw a red circle\ncircle8 = plt.Circle((15, 2), 0.5, color='red')\nax.add_artist(circle8)\n\n# Draw a red circle\ncircle9 = plt.Circle((20, 2.5), 0.5, color='red')\nax.add_artist(circle9)\n\n# Draw a red circle\ncircle10 = plt.Circle((25, 3), 0.5, color='red')\nax.add_artist(circle10)\n\n# Draw a red circle\ncircle11 = plt.Circle((5, 1), 0.5, color='red')\nax.add_artist(circle11)\n\n# Draw a red circle\ncircle12 = plt.Circle((10, 1.5), 0.5, color='red')\nax.add_artist(circle12)\n\n# Draw a red circle\ncircle13 = plt.Circle((15, 2), 0.5, color='red')\nax.add_artist(circle13)\n\n# Draw a red circle\ncircle14 = plt.Circle((20, 2.5), 0.5, color='red')\nax.add_artist(circle14)\n\n# Draw a red circle\ncircle15 = plt.Circle((25, 3), 0.5, color='red')\nax.add_artist(circle15)\n\n# Draw a red circle\ncircle16 = plt.Circle((5, 1), 0.5, color='red')\nax.add_artist(circle16)\n\n# Draw a red circle\ncircle17 = plt.Circle((10, 1.5), 0.5, color='red')\nax.add_artist(circle17)\n\n# Draw a red circle\ncircle18 = plt.Circle((15, 2), 0.5, color='red')\nax.add_artist(circle18)\n\n# Draw a red circle\ncircle19 = plt.Circle((20, 2.5), 0.5, color='red')\nax.add_artist(circle19)\n\n# Draw a red circle\ncircle20 = plt.Circle((25, 3), 0.5, color='red')\nax.add_artist(circle20)\n\n# Draw a red circle\ncircle21 = plt.Circle((5, 1), 0.5, color='red')\nax.add_artist(circle21)\n\n# Draw a red circle\ncircle22 = plt.Circle((10, 1.5), 0.5, color='red')\nax.add_artist(circle22)\n\n# Draw a red circle\ncircle23 = plt.Circle((15, 2), 0.5, color='red')\nax.add_artist(circle23)\n\n# Draw a red circle\ncircle24 = plt.Circle((20, 2.5), 0.5, color='red')\nax.add_artist(circle24)\n\n# Draw a red circle\ncircle25 = plt.Circle((25, 3), 0.5, color='red')\nax.add_artist(circle25)\n\n# Draw a red circle\ncircle26 = plt.Circle((5, 1), 0.5, color='red')\nax.add_artist(circle26)\n\n# Draw a red circle\ncircle27 = plt.Circle((10, 1.5), 0.5, color='red')\nax.add_artist(circle27)\n\n# Draw a red circle\ncircle28 = plt.Circle((15, 2), 0.5, color='red')\nax.add_artist(circle28)\n\n# Draw a red circle\ncircle29 = plt.Circle((20, 2.5), 0.5, color='red')\nax.add_artist(circle29)\n\n# Draw a red circle\ncircle30 = plt.Circle((25, 3), 0.5, color='red')\nax.add_artist(circle30)\n\n# Draw a red circle\ncircle31 = plt.Circle((5, 1), 0.5, color='red')\nax.add_artist(circle31)\n\n# Draw a red circle\ncircle32 = plt.Circle((10, 1.5), 0.5, color='red')\nax.add_artist(circle32)\n\n# Draw a red circle\ncircle33 = plt.Circle((15, 2), 0.5, color='red')\nax.add_artist(circle33)\n\n# Draw a red circle\ncircle34 = plt.Circle((20, 2.5), 0.5, color='red')\nax.add_artist(circle34)\n\n# Draw a red circle\ncircle35 = plt.Circle((25, 3), 0.5, color='red')\nax.add_artist(circle35)\n\n# Draw a red circle\ncircle36 = plt.Circle((5, 1), 0.5, color='red')\nax.add_artist(circle36)\n\n# Draw a red circle\ncircle37 = plt.Circle((10, 1.5), 0.5, color='red')\nax.add_artist(circle37)\n\n# Draw a red circle\ncircle38 = plt.Circle((15, 2), 0.5, color='red')\nax.add_artist(circle38)\n\n# Draw a red circle\ncircle39 = plt.Circle((20, 2.5), 0.5, color='red')\nax.add_artist(circle39)\n\n# Draw a red circle\ncircle40 = plt.Circle((25, 3), 0.5, color='red')\nax.add_artist(circle40)\n\n# Draw a red circle\ncircle41 = plt.Circle((5, 1), 0.5, color='red')\nax.add_artist(circle41)\n\n# Draw a red circle\ncircle42 = plt.Circle((10, 1.5), 0.5, color='red')\nax.add_artist(circle42)\n\n# Draw a red circle\ncircle43 = plt.Circle((15, 2), 0.5, color='red')\nax.add_artist(circle43)\n\n# Draw a red circle\ncircle44 = plt.Circle((20, 2.5), 0.5, color='red')\nax.add_artist(circle44)\n\n# Draw a red circle\ncircle45 = plt.Circle((25, 3), 0.5, color='red')\nax.add_artist(circle45)\n\n# Draw a red circle\ncircle46 = plt.Circle((5, 1), 0.5, color='red')\nax.add_artist(circle46)\n\n# Draw a red circle\ncircle47 = plt.Circle((10, 1.5), 0.5, color='red')\nax.add_artist(circle47)\n\n# Draw a red circle\ncircle48 = plt.Circle((15, 2), 0.5, color='red')\nax.add_artist(circle48)\n\n# Draw a red circle\ncircle49 = plt.Circle((20, 2.5), 0.5, color='red')\nax.add_artist(circle49)\n\n# Draw a red circle\ncircle50 = plt.Circle((25, 3), 0.5, color='red')\nax.add_artist(circle50)\n\n# Draw a red circle\ncircle51 = plt.Circle((5, 1), 0.5, color='red')\nax.add_artist(circle51)\n\n# Draw a red circle\ncircle52 = plt.Circle((10, 1.5), 0.5, color='red')\nax.add_artist(circle52)\n\n# Draw a red circle\ncircle53 = plt.Circle((15, 2), 0.5, color='red')\nax.add_artist(circle53)\n\n# Draw a red circle\ncircle54 = plt.Circle((20, 2.5), 0.5, color='red')\nax.add_artist(circle54)\n\n# Draw a red circle\ncircle55 = plt.Circle((25, 3), 0.5, color='red')\nax.add_artist(circle55)\n\n# Draw a red circle\ncircle56 = plt.Circle((5, 1), 0.5, color='red')\nax.add_artist(circle56)\n\n# Draw a red circle\ncircle57 = plt.Circle((10, 1.5), 0.5, color='red')\nax.add_artist(circle57)\n\n# Draw a red circle\ncircle58 = plt.Circle((15, 2), 0.5, color='red')\nax.add_artist(circle58)\n\n# Draw a red circle\ncircle59 = plt.Circle((20, 2.5), 0.5, color='red')\nax.add_artist(circle59)\n\n# Draw a red circle\ncircle60 = plt.Circle((25, 3), 0.5, color='red')\nax.add_artist(circle60)\n\n# Draw a red circle\ncircle61 = plt.Circle((5, 1), 0.5, color='red')\nax.add_artist(circle61)\n\n# Draw a red circle\ncircle62 = plt.Circle((10, 1.5), 0.5, color='red')\nax.add_artist(circle62)\n\n# Draw a red circle\ncircle63 = plt.Circle((15, 2), 0.5, color='red')\nax.add_artist(circle63)\n\n# Draw a red circle\ncircle64 = plt.Circle((20, 2.5), 0.5, color='red')\nax.add_artist(circle64)\n\n# Draw a red circle\ncircle65 = plt.Circle((25, 3), 0.5, color='red')\nax.add_artist(circle65)\n\n# Draw a red circle\ncircle66 = plt.Circle((5, 1), 0.5, color='red')\nax.add_artist(circle66)\n\n# Draw a red circle\ncircle67 = plt.Circle((10, 1.5), 0.5, color='red')\nax.add_artist(circle67)\n\n# Draw a red circle\ncircle68 = plt.Circle((15, 2), 0.5, color='red')\nax.add_artist(circle68)\n\n# Draw a red circle\ncircle69 = plt.Circle((20, 2.5), 0.5, color='red')\nax.add_artist(circle69)\n\n# Draw a red circle\ncircle70 = plt.Circle((25, 3), 0.5, color='red')\nax.add_artist(circle70)\n\n# Draw a red circle\ncircle71 = plt.Circle((5, 1), 0.5, color='red')\nax.add_artist(circle71)\n\n# Draw a red circle\ncircle72 = plt.Circle((10, 1.5), 0.5, color='red')\nax.add_artist(circle72)\n\n# Draw a red circle\ncircle73 = plt.Circle((15, 2), 0.5, color='red')\nax.add_artist(circle73)\n\n# Draw a red circle\ncircle74 = plt.Circle((20, 2.5), 0.5, color='red')\nax.add_artist(circle74)\n\n# Draw a red circle\ncircle75 = plt.Circle((25, 3), 0.5, color='red')\nax.add_artist(circle75)\n\n# Draw a red circle\ncircle76 = plt.Circle((5, 1), 0.5, color='red')\nax.add_artist(circle76)\n\n# Draw a red circle\ncircle77 = plt.Circle((10, 1.5), 0.5, color='red')\nax.add_artist(circle77)\n\n# Draw a red circle\ncircle78 = plt.Circle((15, 2), 0.5, color='red')\nax.add_artist(circle78)\n\n# Draw a red circle\ncircle79 = plt.Circle((20, 2.5), 0.5, color='red')\nax.add_artist(circle79)\n\n# Draw a red circle\ncircle80 = plt.Circle((25, 3), 0.5, color='red')\nax.add_artist(circle80)\n\n# Draw a red circle\ncircle81 = plt.Circle((5, 1), 0.5, color='red')\nax.add_artist(circle81)\n\n# Draw a red circle\ncircle82 = plt.Circle((10, 1.5), 0.5, color='red')\nax.add_artist(circle82)\n\n# Draw a red circle\ncircle83 = plt.Circle((15, 2), 0.5, color='red')\nax.add_artist(circle83)\n\n# Draw a red circle\ncircle84 = plt.Circle((20, 2.5), 0.5, color='red')\nax.add_artist(circle84)\n\n# Draw a red circle\ncircle85 = plt.Circle((25, 3), 0.5, color='red')\nax.add_artist(circle85)\n\n# Draw a red circle\ncircle86 = plt.Circle((5, 1), 0.5, color='red')\nax.add_artist(circle86)\n\n# Draw a red circle\ncircle87 = plt.Circle((10, 1.5), 0.5, color='red')\nax.add_artist(circle87)\n\n# Draw a red circle\ncircle88 = plt.Circle((15, 2), 0.5, color='red')\nax.add_artist(circle88)\n\n# Draw a red circle\ncircle89 = plt.Circle((20, 2.5), 0.5, color='red')\nax.add_artist(circle89)\n\n# Draw a red circle\ncircle90 = plt.Circle((25, 3), 0.5, color='red')\nax.add_artist(circle90)\n\n# Draw a red circle\ncircle91 = plt.Circle((5, 1), 0.5, color='red')\nax.add_artist(circle91)\n\n# Draw a red circle\ncircle92 = plt.Circle((10, 1.5), 0.5, color='red')\nax.add_artist(circle92)\n\n# Draw a red circle\ncircle93 = plt.Circle((15, 2), 0.5, color='red')\nax.add_artist(circle93)\n\n# Draw a red circle\ncircle94 = plt.Circle((20, 2.5), 0.5, color='red')\nax.add_artist(circle94)\n\n# Draw a red circle\ncircle95 = plt.Circle((25, 3), 0.5, color='red')\nax.add_artist(circle95)\n\n# Draw a red circle\ncircle96 = plt.Circle((5, 1), 0.5, color='red')\nax.add_artist(circle96)\n\n# Draw a red circle\ncircle97 = plt.Circle((10, 1.5), 0.5, color='red')\nax.add_artist(circle97)\n\n# Draw a red circle\ncircle98 = plt.Circle((15, 2), 0.5, color='red')\nax.add_artist(circle98)\n\n# Draw a red circle\ncircle99 = plt.Circle((20, 2.5), 0.5, color='red')\nax.add_artist(circle99)\n\n# Draw a red circle\ncircle100 = plt.Circle((25, 3), 0.5, color='red')\nax.add_artist(circle100)\n\n# Draw a red circle\ncircle101 = plt.Circle((5, 1), 0.5, color='red')\nax.add_artist(circle101)\n\n# Draw a red circle\ncircle102 = plt.Circle((10, 1.5), 0.5, color='red')\nax.add_artist(circle102)\n\n# Draw a red circle\ncircle103 = plt.Circle((15, 2), 0.5, color='red')\nax.add_artist(circle103)\n\n# Draw a red circle\ncircle104 = plt.Circle((20, 2.5), 0.5, color='red')\nax.add_artist(circle104)\n\n# Draw a red circle\ncircle105 = plt.Circle((25, 3), 0.5, color='red')\nax.add_artist(circle105)\n\n# Draw a red circle\ncircle106 = plt.Circle((5, 1), 0.5, color='red')\nax.add_artist(circle106)\n\n# Draw a red circle\ncircle107 = plt.Circle((10, 1.5), 0.5, color='red')\nax.add_artist(circle107)\n\n# Draw a red circle\ncircle108 = plt.Circle((15, 2), 0.5, color='red')\nax.add_artist(circle108)\n\n# Draw a red circle\ncircle109 = plt.Circle((20, 2.5), 0.5, color='red')\nax.add_artist(circle109)\n\n# Draw a red circle\ncircle110 = plt.Circle((25, 3), 0.5, color='red')\nax.add_artist(circle110)\n\n# Draw a red circle\ncircle111 = plt.Circle((5, 1), 0.5, color='red')\nax.add"}
{"file": "dataset/ori_500/HR_5.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Draw a circle with blue dots\ncircle = plt.Circle((0.5, 0.5), 0.4, color='blue', fill=False)\nax.add_artist(circle)\n\n# Draw a rectangle with blue dots\nrectangle = plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='blue', fill=False)\nax.add_artist(rectangle)\n\n# Draw a triangle with blue dots\ntriangle = plt.Polygon([[0.3, 0.7], [0.7, 0.7], [0.5, 0.3]], color='blue', fill=False)\nax.add_artist(triangle)\n\n# Set the aspect ratio to be equal so that the circle is not distorted\nax.set_aspect('equal')\n\n# Set the limits of the plot\nax.set_xlim(0, 1)\nax.set_ylim(0, 1)\n\n# Display the plot\nplt.show()"}
{"file": "dataset/ori_500/HR_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 7.0))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.1, 0.1), 0.2, 0.2, color='red'))\n\n# Set the color of the line\nax.plot([0.1, 0.3], [0.1, 0.3], 'g-')\n\n# Set the color of the grid\nax.grid(color='blue', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('yellow')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Hello World', fontsize=12, color='green')\n\n# Set the color of the title\nax.set_title('My Plot', color='purple')\n\n# Set the color of the x-axis label\nax.set_xlabel('X Axis Label', color='orange')\n\n# Set the color of the y-axis label\nax.set_ylabel('Y Axis Label', color='pink')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='brown')\n\n# Set the color of the legend\nax.legend(['Line 1'], loc='upper right', shadow=True, fancybox=True, facecolor='cyan')\n\n# Set the color of the annotation\nax.annotate('Annotation', xy=(0.2, 0.2), xytext=(0.4, 0.4),\n            arrowprops=dict(facecolor='black', shrink=0.05))\n\n# Set the color of the subplot\nax.set_facecolor('cyan')\n\n# Set the color of the colorbar\ncbar = fig.colorbar(ax.images[0])\ncbar.ax.set_facecolor('magenta')\n\n# Set the color of the colorbar label\ncbar.set_label('Colorbar Label', color='lime')\n\n# Set the color of the colorbar ticks\ncbar.ax.tick_params(colors='navy')\n\n# Set the color of the colorbar tick labels\ncbar.ax.set_yticklabels(['Label 1', 'Label 2'], color='olive')\n\n# Set the color of the colorbar tick labels\ncbar.ax.set_xticklabels(['Label 3', 'Label 4'], color='indigo')\n\n# Set the color of the colorbar tick labels\ncbar.ax.set_yticklabels(['Label 5', 'Label 6'], color='violet')\n\n# Set the color of the colorbar tick labels\ncbar.ax.set_xticklabels(['Label 7', 'Label 8'], color='silver')\n\n# Set the color of the colorbar tick labels\ncbar.ax.set_yticklabels(['Label 9', 'Label 10'], color='gold')\n\n# Set the color of the colorbar tick labels\ncbar.ax.set_xticklabels(['Label 11', 'Label 12'], color='chartreuse')\n\n# Set the color of the colorbar tick labels\ncbar.ax.set_yticklabels(['Label 13', 'Label 14'], color='aqua')\n\n# Set the color of the colorbar tick labels\ncbar.ax.set_xticklabels(['Label 15', 'Label 16'], color='fuchsia')\n\n# Set the color of the colorbar tick labels\ncbar.ax.set_yticklabels(['Label 17', 'Label 18'], color='limegreen')\n\n# Set the color of the colorbar tick labels\ncbar.ax.set_xticklabels(['Label 19', 'Label 20'], color='darkorange')\n\n# Set the color of the colorbar tick labels\ncbar.ax.set_yticklabels(['Label 21', 'Label 22'], color='darkviolet')\n\n# Set the color of the colorbar tick labels\ncbar.ax.set_xticklabels(['Label 23', 'Label 24'], color='darkturquoise')\n\n# Set the color of the colorbar tick labels\ncbar.ax.set_yticklabels(['Label 25', 'Label 26'], color='darkseagreen')\n\n# Set the color of the colorbar tick labels\ncbar.ax.set_xticklabels(['Label 27', 'Label 28'], color='darkslategray')\n\n# Set the color of the colorbar tick labels\ncbar.ax.set_yticklabels(['Label 29', 'Label 30'], color='darkslateblue')\n\n# Set the color of the colorbar tick labels\ncbar.ax.set_xticklabels(['Label 31', 'Label 32'], color='darkslategrey')\n\n# Set the color of the colorbar tick labels\ncbar.ax.set_yticklabels(['Label 33', 'Label 34'], color='darkslateblack')\n\n# Set the color of the colorbar tick labels\ncbar.ax.set_xticklabels(['Label 35', 'Label 36'], color='darkred')\n\n# Set the color of the colorbar tick labels\ncbar.ax.set_yticklabels(['Label 37', 'Label 38'], color='darkgreen')\n\n# Set the color of the colorbar tick labels\ncbar.ax.set_xticklabels(['Label 39', 'Label 40'], color='darkblue')\n\n# Set the color of the colorbar tick labels\ncbar.ax.set_yticklabels(['Label 41', 'Label 42'], color='darkcyan')\n\n# Set the color of the colorbar tick labels\ncbar.ax.set_xticklabels(['Label 43', 'Label 44'], color='darkmagenta')\n\n# Set the color of the colorbar tick labels\ncbar.ax.set_yticklabels(['Label 45', 'Label 46'], color='darkyellow')\n\n# Set the color of the colorbar tick labels\ncbar.ax.set_xticklabels(['Label 47', 'Label 48'], color='darkkhaki')\n\n# Set the color of the colorbar tick labels\ncbar.ax.set_yticklabels(['Label 49', 'Label 50'], color='darkgoldenrod')\n\n# Set the color of the colorbar tick labels\ncbar.ax.set_xticklabels(['Label 51', 'Label 52'], color='darkolivegreen')\n\n# Set the color of the colorbar tick labels\ncbar.ax.set_yticklabels(['Label 53', 'Label 54'], color='darkorchid')\n\n# Set the color of the colorbar tick labels\ncbar.ax.set_xticklabels(['Label 55', 'Label 56'], color='darkslateblue')\n\n# Set the color of the colorbar tick labels\ncbar.ax.set_yticklabels(['Label 57', 'Label 58'], color='darkslategray')\n\n# Set the color of the colorbar tick labels\ncbar.ax.set_xticklabels(['Label 59', 'Label 60'], color='darkslategrey')\n\n# Set the color of the colorbar tick labels\ncbar.ax.set_yticklabels(['Label 61', 'Label 62'], color='darkslateblack')\n\n# Set the color of the colorbar tick labels\ncbar.ax.set_xticklabels(['Label 63', 'Label 64'], color='darkred')\n\n# Set the color of the colorbar tick labels\ncbar.ax.set_yticklabels(['Label 65', 'Label 66'], color='darkgreen')\n\n# Set the color of the colorbar tick labels\ncbar.ax.set_xticklabels(['Label 67', 'Label 68'], color='darkblue')\n\n# Set the color of the colorbar tick labels\ncbar.ax.set_yticklabels(['Label 69', 'Label 70'], color='darkcyan')\n\n# Set the color of the colorbar tick labels\ncbar.ax.set_xticklabels(['Label 71', 'Label 72'], color='darkmagenta')\n\n# Set the color of the colorbar tick labels\ncbar.ax.set_yticklabels(['Label 73', 'Label 74'], color='darkyellow')\n\n# Set the color of the colorbar tick labels\ncbar.ax.set_xticklabels(['Label 75', 'Label 76'], color='darkkhaki')\n\n# Set the color of the colorbar tick labels\ncbar.ax.set_yticklabels(['Label 77', 'Label 78'], color='darkgoldenrod')\n\n# Set the color of the colorbar tick labels\ncbar.ax.set_xticklabels(['Label 79', 'Label 80'], color='darkolivegreen')\n\n# Set the color of the colorbar tick labels\ncbar.ax.set_yticklabels(['Label 81', 'Label 82'], color='darkorchid')\n\n# Set the color of the colorbar tick labels\ncbar.ax.set_xticklabels(['Label 83', 'Label 84'], color='darkslateblue')\n\n# Set the color of the colorbar tick labels\ncbar.ax.set_yticklabels(['Label 85', 'Label 86'], color='darkslategray')\n\n# Set the color of the colorbar tick labels\ncbar.ax.set_xticklabels(['Label 87', 'Label 88'], color='darkslategrey')\n\n# Set the color of the colorbar tick labels\ncbar.ax.set_yticklabels(['Label 89', 'Label 90'], color='darkslateblack')\n\n# Set the color of the colorbar tick labels\ncbar.ax.set_xticklabels(['Label 91', 'Label 92'], color='darkred')\n\n# Set the color of the colorbar tick labels\ncbar.ax.set_yticklabels(['Label 93', 'Label 94'], color='darkgreen')\n\n# Set the color of the colorbar tick labels\ncbar.ax.set_xticklabels(['Label 95', 'Label 96'], color='darkblue')\n\n# Set the color of the colorbar tick labels\ncbar.ax.set_yticklabels(['Label 97', 'Label 98'], color='darkcyan')\n\n# Set the color of the colorbar tick labels\ncbar.ax.set_xticklabels(['Label 99', 'Label 100'], color='darkmagenta')\n\n# Set the color of the colorbar tick labels\ncbar.ax.set_yticklabels(['Label 101', 'Label 102'], color='darkyellow')\n\n# Set the color of the colorbar tick labels\ncbar.ax.set_xticklabels(['Label 103', 'Label 104'], color='darkkhaki')\n\n# Set the color of the colorbar tick labels\ncbar.ax.set_yticklabels(['Label 105', 'Label 106'], color='darkgoldenrod')\n\n# Set the color of the colorbar tick labels\ncbar.ax.set_xticklabels(['Label 107', 'Label 108'], color='darkolivegreen')\n\n# Set the color of the colorbar tick labels\ncbar.ax.set_yticklabels(['Label 109', 'Label 110'], color='darkorchid')\n\n# Set the color of the colorbar tick labels\ncbar.ax.set_xticklabels(['Label 111', 'Label 112'], color='darkslateblue')\n\n# Set the color of the colorbar tick labels\ncbar.ax.set_yticklabels(['Label 113', 'Label 114'], color='darkslategray')\n\n# Set the color of the colorbar tick labels\ncbar.ax.set_xticklabels(['Label 115', 'Label 116'], color='darkslategrey')\n\n# Set the color of the colorbar tick labels\ncbar.ax.set_yticklabels(['Label 117', 'Label 118'], color='darkslateblack')\n\n# Set the color of the colorbar tick labels\ncbar.ax.set_xticklabels(['Label 119', 'Label 120'], color='darkred')\n\n# Set the color of the colorbar tick labels\ncbar.ax.set_yticklabels(['Label 121', 'Label 122'], color='darkgreen')\n\n# Set the color of the colorbar tick labels\ncbar.ax.set_xticklabels(['Label 123', 'Label 124'], color='darkblue')\n\n# Set the color of the colorbar tick labels\ncbar.ax.set_yticklabels(['Label 125', 'Label 126'], color='darkcyan')\n\n# Set the color of the colorbar tick labels\ncbar.ax.set_xticklabels(['Label 127', 'Label 128'], color='darkmagenta')\n\n# Set the color of the colorbar tick labels\ncbar.ax.set_yticklabels(['Label 129', 'Label 130'], color='darkyellow')\n\n# Set the color of the colorbar tick labels\ncbar.ax.set_xticklabels(['Label 131', 'Label 132'], color='darkkhaki')\n\n# Set the color of the colorbar tick labels\ncbar.ax.set_yticklabels(['Label 133', 'Label 134'], color='darkgoldenrod')\n\n# Set the color of the colorbar tick labels\ncbar.ax.set_xticklabels(['Label 135', 'Label 136'], color='darkolivegreen')\n\n# Set the color of the colorbar tick labels\ncbar.ax.set_yticklabels(['Label 137', 'Label 138'], color='darkorchid')\n\n# Set the color of the colorbar tick labels\ncbar.ax.set_xticklabels(['Label 139', 'Label 140'], color='darkslateblue')\n\n# Set the color of the colorbar tick labels\ncbar.ax.set_yticklabels(['Label 141', 'Label 142'], color='darkslategray')\n\n# Set the color of the colorbar tick labels\ncbar.ax.set_xticklabels(['Label 143', 'Label 144'], color='darkslategrey')\n\n# Set the color of the colorbar tick labels\ncbar.ax.set_yticklabels(['Label 145', 'Label 146'], color='darkslateblack')\n\n# Set the color of the colorbar tick labels\ncbar.ax.set_xticklabels(['Label 147', 'Label 148'], color='darkred')\n\n# Set the color of the colorbar tick labels\ncbar.ax.set_yticklabels(['Label 149', 'Label 150'], color='darkgreen')\n\n# Set the color of the colorbar tick labels\ncbar.ax.set_xticklabels(['Label 151', 'Label 152'], color='darkblue')\n\n# Set the color of the colorbar tick labels\ncbar.ax.set_yticklabels(['Label 153', 'Label 154'], color='darkcyan')\n\n# Set the color of the colorbar tick labels\ncbar.ax.set_xticklabels(['Label 155', 'Label 156'], color='darkmagenta')\n\n# Set the color of the colorbar tick labels\ncbar.ax.set_yticklabels(['Label 157', 'Label 158'], color='darkyellow')\n\n# Set the color of the colorbar tick labels\ncbar.ax.set_xticklabels(['Label 159', 'Label 160'], color='darkkhaki')\n\n# Set the color of the colorbar tick labels\ncbar.ax.set_yticklabels(['Label 161', 'Label 162'], color='darkgoldenrod')\n\n# Set the color of the colorbar tick labels\ncbar.ax.set_xticklabels(['Label 163', 'Label 164'], color='darkolivegreen')\n\n# Set the color of the colorbar tick labels\ncbar.ax.set_yticklabels(['Label 165', 'Label 166'], color='darkorchid')\n\n# Set the color of the colorbar tick labels\ncbar.ax.set_xticklabels(['Label 167', 'Label 168'], color='darkslateblue')\n\n# Set the color of the colorbar tick labels\ncbar.ax.set_yticklabels(['Label 169', 'Label 170'], color='darkslategray')\n\n# Set the color of the colorbar tick labels\ncbar.ax.set_xticklabels(['Label 171', 'Label 172'], color='darkslategrey')\n\n# Set the color of the colorbar tick labels\ncbar.ax.set_yticklabels(['Label 173', 'Label 174'], color='darkslateblack')\n\n# Set the color of the colorbar tick labels\ncbar.ax.set_xticklabels(['Label 175', 'Label 176'], color='darkred')\n\n# Set the color of the colorbar tick labels\ncbar.ax.set_yticklabels(['Label 177', 'Label 178'], color='darkgreen')\n\n# Set the color of the colorbar tick labels\ncbar.ax.set_xticklabels(['Label 179', 'Label 180'], color='darkblue')\n\n# Set the color of the colorbar tick labels\ncbar.ax.set_yticklabels(['Label 181', 'Label 182'], color='darkcyan')\n\n# Set the color of the colorbar tick labels\ncbar.ax.set_xticklabels(['Label 183', 'Label 184'], color='darkmagenta')\n\n# Set the color of the colorbar tick labels\ncbar.ax.set_yticklabels(['Label 185', 'Label 186'], color='darkyellow')\n\n# Set the color of the colorbar tick labels\ncbar.ax.set_xticklabels(['Label 187', 'Label 188'], color='darkkhaki')\n\n# Set the color of the colorbar tick labels\ncbar.ax.set_yticklabels(['Label 189', 'Label 190'], color='darkgoldenrod')\n\n# Set the color of the colorbar tick labels\ncbar.ax.set_xticklabels(['Label 191', 'Label 192'], color='darkolivegreen')\n\n# Set the color of the colorbar tick labels\ncbar.ax.set_yticklabels(['Label 193', 'Label 194'], color='darkorchid')\n\n# Set the color of the colorbar tick labels\ncbar.ax.set_xticklabels(['Label 195', 'Label 196'], color='darkslateblue')\n\n# Set the color of the colorbar tick labels\ncbar.ax.set_yticklabels(['Label 197', 'Label 198'], color='darkslategray')\n\n# Set the color of the colorbar tick labels\ncbar.ax.set_xticklabels(['Label "}
{"file": "dataset/ori_500/HR_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis for the first plot\nfig, ax = plt.subplots(figsize=(8.0, 4.0))\n\n# Define the data for the first plot\nx = np.linspace(0, 100, 100)\ny = np.sin(x / 20)\n\n# Plot the data\nax.plot(x, y, 'b-')\nax.plot(x, -y, 'g-')\n\n# Add labels and title\nax.set_xlabel('Users (U)')\nax.set_ylabel('Utility (f)')\nax.set_title('Utility distribution per topic')\n\n# Create a second subplot for the second plot\nax2 = fig.add_subplot(1, 2, 2)\n\n# Define the data for the second plot\nitems = ['L', 'CL', 'C', 'CR', 'R']\nusers = ['U1', 'U2', 'U3', 'U4', 'U5']\n\n# Create a grid of points for the second plot\ngrid_points = np.array([[i, j] for i in range(len(items)) for j in range(len(users))])\n\n# Plot the grid points\nfor point in grid_points:\n    ax2.scatter(point[0], point[1], color='red')\n\n# Add labels and title\nax2.set_xlabel('Items (M)')\nax2.set_ylabel('Users (U)')\nax2.set_title('User preference matrix (M)')\n\n# Display the plots\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 4))\n\n# Set the background color of the plot\nax.set_facecolor('lightblue')\n\n# Set the x-axis limits\nax.set_xlim(-2, 4)\n\n# Set the y-axis limits\nax.set_ylim(-2, 4)\n\n# Set the x-axis label\nax.set_xlabel('Reactive-2 payoff')\n\n# Set the y-axis label\nax.set_ylabel('Memory-2 payoff')\n\n# Create a rectangle for the first subplot\nrect1 = plt.Rectangle((0, 0), 1, 1, color='red')\nax.add_patch(rect1)\n\n# Create a rectangle for the second subplot\nrect2 = plt.Rectangle((0, 0), 1, 1, color='red')\nax.add_patch(rect2)\n\n# Create a rectangle for the third subplot\nrect3 = plt.Rectangle((0, 0), 1, 1, color='red')\nax.add_patch(rect3)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 4))\n\n# Define the data for the first subplot\nx1 = np.linspace(-10, 10, 100)\ny1 = np.sin(x1)\n\n# Define the data for the second subplot\nx2 = np.linspace(-10, 10, 100)\ny2 = np.cos(x2)\n\n# Define the data for the third subplot\nx3 = np.linspace(-10, 10, 100)\ny3 = np.tan(x3)\n\n# Plot the data\nax.plot(x1, y1, label='Model = Vicuna')\nax.plot(x2, y2, label='Model = Alpaca')\nax.plot(x3, y3, label='Model = Rule')\n\n# Add labels and title\nax.set_xlabel('Permeability Reduction')\nax.set_ylabel('Porosity')\nax.set_title('Porosity vs Permeability Reduction')\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/PIP_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Set the background color of the plot\nax.set_facecolor('pink')\n\n# Set the x-axis limits\nax.set_xlim(-40, 1)\n\n# Set the y-axis limits\nax.set_ylim(-5, 6)\n\n# Draw a rectangle for the left side\nrect = plt.Rectangle((-40, -5), 40, 10, color='lightblue')\nax.add_patch(rect)\n\n# Draw a rectangle for the right side\nrect = plt.Rectangle((0, -5), 40, 10, color='lightgreen')\nax.add_patch(rect)\n\n# Draw a rectangle for the bottom\nrect = plt.Rectangle((-40, -5), 80, 10, color='lightgrey')\nax.add_patch(rect)\n\n# Draw a rectangle for the top\nrect = plt.Rectangle((-40, 5), 80, 10, color='lightgrey')\nax.add_patch(rect)\n\n# Draw a line for the left side\nline = plt.Line2D([-40, -40], [-5, 5], color='black')\nax.add_line(line)\n\n# Draw a line for the right side\nline = plt.Line2D([0, 0], [-5, 5], color='black')\nax.add_line(line)\n\n# Draw a line for the bottom\nline = plt.Line2D([-40, 0], [-5, -5], color='black')\nax.add_line(line)\n\n# Draw a line for the top\nline = plt.Line2D([-40, 0], [5, 5], color='black')\nax.add_line(line)\n\n# Draw a rectangle for the middle\nrect = plt.Rectangle((-20, -5), 40, 10, color='lightgrey')\nax.add_patch(rect)\n\n# Draw a rectangle for the middle\nrect = plt.Rectangle((-20, -5), 40, 10, color='lightgrey')\nax.add_patch(rect)\n\n# Draw a rectangle for the middle\nrect = plt.Rectangle((-20, -5), 40, 10, color='lightgrey')\nax.add_patch(rect)\n\n# Draw a rectangle for the middle\nrect = plt.Rectangle((-20, -5), 40, 10, color='lightgrey')\nax.add_patch(rect)\n\n# Draw a rectangle for the middle\nrect = plt.Rectangle((-20, -5), 40, 10, color='lightgrey')\nax.add_patch(rect)\n\n# Draw a rectangle for the middle\nrect = plt.Rectangle((-20, -5), 40, 10, color='lightgrey')\nax.add_patch(rect)\n\n# Draw a rectangle for the middle\nrect = plt.Rectangle((-20, -5), 40, 10, color='lightgrey')\nax.add_patch(rect)\n\n# Draw a rectangle for the middle\nrect = plt.Rectangle((-20, -5), 40, 10, color='lightgrey')\nax.add_patch(rect)\n\n# Draw a rectangle for the middle\nrect = plt.Rectangle((-20, -5), 40, 10, color='lightgrey')\nax.add_patch(rect)\n\n# Draw a rectangle for the middle\nrect = plt.Rectangle((-20, -5), 40, 10, color='lightgrey')\nax.add_patch(rect)\n\n# Draw a rectangle for the middle\nrect = plt.Rectangle((-20, -5), 40, 10, color='lightgrey')\nax.add_patch(rect)\n\n# Draw a rectangle for the middle\nrect = plt.Rectangle((-20, -5), 40, 10, color='lightgrey')\nax.add_patch(rect)\n\n# Draw a rectangle for the middle\nrect = plt.Rectangle((-20, -5), 40, 10, color='lightgrey')\nax.add_patch(rect)\n\n# Draw a rectangle for the middle\nrect = plt.Rectangle((-20, -5), 40, 10, color='lightgrey')\nax.add_patch(rect)\n\n# Draw a rectangle for the middle\nrect = plt.Rectangle((-20, -5), 40, 10, color='lightgrey')\nax.add_patch(rect)\n\n# Draw a rectangle for the middle\nrect = plt.Rectangle((-20, -5), 40, 10, color='lightgrey')\nax.add_patch(rect)\n\n# Draw a rectangle for the middle\nrect = plt.Rectangle((-20, -5), 40, 10, color='lightgrey')\nax.add_patch(rect)\n\n# Draw a rectangle for the middle\nrect = plt.Rectangle((-20, -5), 40, 10, color='lightgrey')\nax.add_patch(rect)\n\n# Draw a rectangle for the middle\nrect = plt.Rectangle((-20, -5), 40, 10, color='lightgrey')\nax.add_patch(rect)\n\n# Draw a rectangle for the middle\nrect = plt.Rectangle((-20, -5), 40, 10, color='lightgrey')\nax.add_patch(rect)\n\n# Draw a rectangle for the middle\nrect = plt.Rectangle((-20, -5), 40, 10, color='lightgrey')\nax.add_patch(rect)\n\n# Draw a rectangle for the middle\nrect = plt.Rectangle((-20, -5), 40, 10, color='lightgrey')\nax.add_patch(rect)\n\n# Draw a rectangle for the middle\nrect = plt.Rectangle((-20, -5), 40, 10, color='lightgrey')\nax.add_patch(rect)\n\n# Draw a rectangle for the middle\nrect = plt.Rectangle((-20, -5), 40, 10, color='lightgrey')\nax.add_patch(rect)\n\n# Draw a rectangle for the middle\nrect = plt.Rectangle((-20, -5), 40, 10, color='lightgrey')\nax.add_patch(rect)\n\n# Draw a rectangle for the middle\nrect = plt.Rectangle((-20, -5), 40, 10, color='lightgrey')\nax.add_patch(rect)\n\n# Draw a rectangle for the middle\nrect = plt.Rectangle((-20, -5), 40, 10, color='lightgrey')\nax.add_patch(rect)\n\n# Draw a rectangle for the middle\nrect = plt.Rectangle((-20, -5), 40, 10, color='lightgrey')\nax.add_patch(rect)\n\n# Draw a rectangle for the middle\nrect = plt.Rectangle((-20, -5), 40, 10, color='lightgrey')\nax.add_patch(rect)\n\n# Draw a rectangle for the middle\nrect = plt.Rectangle((-20, -5), 40, 10, color='lightgrey')\nax.add_patch(rect)\n\n# Draw a rectangle for the middle\nrect = plt.Rectangle((-20, -5), 40, 10, color='lightgrey')\nax.add_patch(rect)\n\n# Draw a rectangle for the middle\nrect = plt.Rectangle((-20, -5), 40, 10, color='lightgrey')\nax.add_patch(rect)\n\n# Draw a rectangle for the middle\nrect = plt.Rectangle((-20, -5), 40, 10, color='lightgrey')\nax.add_patch(rect)\n\n# Draw a rectangle for the middle\nrect = plt.Rectangle((-20, -5), 40, 10, color='lightgrey')\nax.add_patch(rect)\n\n# Draw a rectangle for the middle\nrect = plt.Rectangle((-20, -5), 40, 10, color='lightgrey')\nax.add_patch(rect)\n\n# Draw a rectangle for the middle\nrect = plt.Rectangle((-20, -5), 40, 10, color='lightgrey')\nax.add_patch(rect)\n\n# Draw a rectangle for the middle\nrect = plt.Rectangle((-20, -5), 40, 10, color='lightgrey')\nax.add_patch(rect)\n\n# Draw a rectangle for the middle\nrect = plt.Rectangle((-20, -5), 40, 10, color='lightgrey')\nax.add_patch(rect)\n\n# Draw a rectangle for the middle\nrect = plt.Rectangle((-20, -5), 40, 10, color='lightgrey')\nax.add_patch(rect)\n\n# Draw a rectangle for the middle\nrect = plt.Rectangle((-20, -5), 40, 10, color='lightgrey')\nax.add_patch(rect)\n\n# Draw a rectangle for the middle\nrect = plt.Rectangle((-20, -5), 40, 10, color='lightgrey')\nax.add_patch(rect)\n\n# Draw a rectangle for the middle\nrect = plt.Rectangle((-20, -5), 40, 10, color='lightgrey')\nax.add_patch(rect)\n\n# Draw a rectangle for the middle\nrect = plt.Rectangle((-20, -5), 40, 10, color='lightgrey')\nax.add_patch(rect)\n\n# Draw a rectangle for the middle\nrect = plt.Rectangle((-20, -5), 40, 10, color='lightgrey')\nax.add_patch(rect)\n\n# Draw a rectangle for the middle\nrect = plt.Rectangle((-20, -5), 40, 10, color='lightgrey')\nax.add_patch(rect)\n\n# Draw a rectangle for the middle\nrect = plt.Rectangle((-20, -5), 40, 10, color='lightgrey')\nax.add_patch(rect)\n\n# Draw a rectangle for the middle\nrect = plt.Rectangle((-20, -5), 40, 10, color='lightgrey')\nax.add_patch(rect)\n\n# Draw a rectangle for the middle\nrect = plt.Rectangle((-20, -5), 40, 10, color='lightgrey')\nax.add_patch(rect)\n\n# Draw a rectangle for the middle\nrect = plt.Rectangle((-20, -5), 40, 10, color='lightgrey')\nax.add_patch(rect)\n\n# Draw a rectangle for the middle\nrect = plt.Rectangle((-20, -5), 40, 10, color='lightgrey')\nax.add_patch(rect)\n\n# Draw a rectangle for the middle\nrect = plt.Rectangle((-20, -5), 40, 10, color='lightgrey')\nax.add_patch(rect)\n\n# Draw a rectangle for the middle\nrect = plt.Rectangle((-20, -5), 40, 10, color='lightgrey')\nax.add_patch(rect)\n\n# Draw a rectangle for the middle\nrect = plt.Rectangle((-20, -5), 40, 10, color='lightgrey')\nax.add_patch(rect)\n\n# Draw a rectangle for the middle\nrect = plt.Rectangle((-20, -5), 40, 10, color='lightgrey')\nax.add_patch(rect)\n\n# Draw a rectangle for the middle\nrect = plt.Rectangle((-20, -5), 40, 10, color='lightgrey')\nax.add_patch(rect)\n\n# Draw a rectangle for the middle\nrect = plt.Rectangle((-20, -5), 40, 10, color='lightgrey')\nax.add_patch(rect)\n\n# Draw a rectangle for the middle\nrect = plt.Rectangle((-20, -5), 40, 10, color='lightgrey')\nax.add_patch(rect)\n\n# Draw a rectangle for the middle\nrect = plt.Rectangle((-20, -5), 40, 10, color='lightgrey')\nax.add_patch(rect)\n\n# Draw a rectangle for the middle\nrect = plt.Rectangle((-20, -5), 40, 10, color='lightgrey')\nax.add_patch(rect)\n\n# Draw a rectangle for the middle\nrect = plt.Rectangle((-20, -5), 40, 10, color='lightgrey')\nax.add_patch(rect)\n\n# Draw a rectangle for the middle\nrect = plt.Rectangle((-20, -5), 40, 10, color='lightgrey')\nax.add_patch(rect)\n\n# Draw a rectangle for the middle\nrect = plt.Rectangle((-20, -5), 40, 10, color='lightgrey')\nax.add_patch(rect)\n\n# Draw a rectangle for the middle\nrect = plt.Rectangle((-20, -5), 40, 10, color='lightgrey')\nax.add_patch(rect)\n\n# Draw a rectangle for the middle\nrect = plt.Rectangle((-20, -5), 40, 10, color='lightgrey')\nax.add_patch(rect)\n\n# Draw a rectangle for the middle\nrect = plt.Rectangle((-20, -5), 40, 10, color='lightgrey')\nax.add_patch(rect)\n\n# Draw a rectangle for the middle\nrect = plt.Rectangle((-20, -5), 40, 10, color='lightgrey')\nax.add_patch(rect)\n\n# Draw a rectangle for the middle\nrect = plt.Rectangle((-20, -5), 40, 10, color='lightgrey')\nax.add_patch(rect)\n\n# Draw a rectangle for the middle\nrect = plt.Rectangle((-20, -5), 40, 10, color='lightgrey')\nax.add_patch(rect)\n\n# Draw a rectangle for the middle\nrect = plt.Rectangle((-20, -5), 40, 10, color='lightgrey')\nax.add_patch(rect)\n\n# Draw a rectangle for the middle\nrect = plt.Rectangle((-20, -5), 40, 10, color='lightgrey')\nax.add_patch(rect)\n\n# Draw a rectangle for the middle\nrect = plt.Rectangle((-20, -5), 40, 10, color='lightgrey')\nax.add_patch(rect)\n\n# Draw a rectangle for the middle\nrect = plt.Rectangle((-20, -5), 40, 10, color='lightgrey')\nax.add_patch(rect)\n\n# Draw a rectangle for the middle\nrect = plt.Rectangle((-20, -5), 40, 10, color='lightgrey')\nax.add_patch(rect)\n\n# Draw a rectangle for the middle\nrect = plt.Rectangle((-20, -5), 40, 10, color='lightgrey')\nax.add_patch(rect)\n\n# Draw a rectangle for the middle\nrect = plt.Rectangle((-20, -5), 40, 10, color='lightgrey')\nax.add_patch(rect)\n\n# Draw a rectangle for the middle\nrect = plt.Rectangle((-20, -5), 40, 10, color='lightgrey')\nax.add_patch(rect)\n\n# Draw a rectangle for the middle\nrect = plt.Rectangle((-20, -5), 40, 10, color='lightgrey')\nax.add_patch(rect)\n\n# Draw a rectangle for the middle\nrect = plt.Rectangle((-20, -5), 40, 10, color='lightgrey')\nax.add_patch(rect)\n\n# Draw a rectangle for the middle\nrect = plt.Rectangle((-20, -5), 40, 10, color='lightgrey')\nax.add_patch(rect)\n\n# Draw a rectangle for the middle\nrect = plt.Rectangle((-20, -5), 40, 10, color='lightgrey')\nax.add_patch(rect)\n\n# Draw a rectangle for the middle\nrect = plt.Rectangle((-20, -5), 40, 10, color='lightgrey')\nax.add_patch(rect)\n\n# Draw a rectangle for the middle\nrect = plt.Rectangle((-20, -5), 40, 10, color='lightgrey')\nax.add_patch(rect)\n\n# Draw a rectangle for the middle\nrect = plt.Rectangle((-20, -5), 40, 10, color='lightgrey')\nax.add_patch(rect)\n\n# Draw a rectangle for the middle\nrect = plt.Rectangle((-20, -5), 40, 10, color='lightgrey')\nax.add_patch(rect)\n\n# Draw a rectangle for the middle\nrect = plt.Rectangle((-20, -5), 40, 10, color='lightgrey')\nax.add_patch(rect)\n\n# Draw a rectangle for the middle\nrect = plt.Rectangle((-20, -5), 40, 10, color='lightgrey')\nax.add_patch(rect)\n\n# Draw a rectangle for the middle\nrect = plt.Rectangle((-20, -5), 40, 10, color='lightgrey')\nax.add_patch(rect)\n\n# Draw a rectangle for the middle\nrect = plt.Rectangle((-20, -5), 40, 10, color='lightgrey')\nax.add_patch(rect)\n\n# Draw a rectangle for the middle\nrect = plt.Rectangle((-20, -5), 40, 10, color='lightgrey')\nax.add_patch(rect)\n\n# Draw a rectangle for the middle\nrect = plt.Rectangle((-20, -5), 40, 10, color='lightgrey')\nax.add_patch(rect)\n\n# Draw a rectangle for the middle\nrect = plt.Rectangle((-20, -5), 40, 10, color='lightgrey')\nax.add_patch(rect)\n\n# Draw a rectangle for the middle\nrect = plt.Rectangle((-20, -5), 40, 10, color='lightgrey')\nax.add_patch(rect)\n\n# Draw a rectangle for the middle\nrect = plt.Rectangle((-20, -5), 40, 10, color='lightgrey')\nax.add_patch(rect)\n\n# Draw a rectangle for the middle\nrect = plt.Rectangle((-20, -5), 40, 10, color='lightgrey')\nax.add_patch(rect)\n\n# Draw a rectangle for the middle\nrect = plt.Rectangle((-20, -5), 40, 10, color='lightgrey')\nax.add_patch(rect)\n\n# Draw a rectangle for the middle\nrect = plt.Rectangle((-20, -5), 40, 10, color='lightgrey')\nax.add_patch(rect)\n\n# Draw a rectangle for the middle\nrect = plt.Rectangle((-20, -5), 40, 10, color='lightgrey')\nax.add_patch(rect)\n\n# Draw a rectangle for the middle\nrect = plt.Rectangle((-20, -5), 40, 10, color='lightgrey')\nax.add_patch(rect)\n\n# Draw a rectangle for the middle\nrect = plt.Rectangle((-20, -5), 40, 10, color='lightgrey')\nax.add_patch(rect)\n\n# Draw a rectangle for the middle\nrect = plt.Rectangle((-20, -5), 40, 10, color='lightgrey')\nax.add_patch(rect)\n\n# Draw a rectangle for the middle\nrect = plt.Rectangle((-20, -5), 40"}
{"file": "dataset/ori_500/PIP_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Set the title of the graph\nax.set_title('Exponential Scale')\n\n# Set the x-axis label\nax.set_xlabel('Gradient Steps (x 62.5K)')\n\n# Set the y-axis label\nax.set_ylabel('Exponential Scale')\n\n# Create a rectangle for the legend\nlegend_rect = plt.Rectangle((0, 0), 1, 1, fc='green', ec='black')\nax.add_patch(legend_rect)\n\n# Create a line plot for Line 3\nline3 = np.linspace(1, 5, 100)\nax.plot(line3, 'g-')\n\n# Create a line plot for Line 4\nline4 = np.linspace(1, 7, 100)\nax.plot(line4, 'r-')\n\n# Create a shaded region for Line 3\nax.fill_between(np.linspace(0, 100, 100), 1, 5, where=(np.linspace(0, 100, 100) < 50), color='lightgreen')\n\n# Create a shaded region for Line 4\nax.fill_between(np.linspace(0, 100, 100), 1, 7, where=(np.linspace(0, 100, 100) > 50), color='lightcoral')\n\n# Create a scatter plot for Line 3\nax.scatter(np.linspace(0, 100, 100), np.linspace(1, 5, 100), c='green')\n\n# Create a scatter plot for Line 4\nax.scatter(np.linspace(0, 100, 100), np.linspace(1, 7, 100), c='red')\n\n# Set the limits of the x-axis\nax.set_xlim(0, 100)\n\n# Set the limits of the y-axis\nax.set_ylim(0, 7)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/PIP_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nx = [0.35, 0.4, 0.45, 0.5, 0.55, 0.6, 0.65, 0.7, 0.8, 0.9]\ny = [200, 150, 100, 50, 25, 10, 5, 2, 1, 0.5]\n\n# Plot\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\nax.plot(x, y, 'b-')\nax.set_xlabel('Maximum Predicted Probability')\nax.set_ylabel('Number of Examples')\nax.set_title('Training Progression')\nax.grid(True)\nplt.show()\n```"}
{"file": "dataset/ori_500/PIP_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Bias Score by Data Type and Model')\n\n# Set the x-axis label\nax.set_xlabel('Data Type')\n\n# Set the y-axis label\nax.set_ylabel('Bias Score')\n\n# Define the data points\nx = ['INT8', 'INT8', 'INT4', 'INT4']\ny = [9.2, 9.3, 9.1, 9.0]\ncolor = ['red', 'blue', 'green', 'yellow']\n\n# Plot the data points\nfor xi, yi, ci in zip(x, y, color):\n    ax.plot(xi, yi, 'o', color=ci)\n\n# Draw a rectangle\nrect = plt.Rectangle((0.5, 0.5), 0.2, 0.2, color='blue')\nax.add_patch(rect)\n\n# Draw a triangle\ntriangle = plt.Polygon([[0.5, 0.5], [0.7, 0.7], [0.7, 0.3]], color='red')\nax.add_patch(triangle)\n\n# Draw a circle\ncircle = plt.Circle((0.5, 0.5), 0.1, color='green')\nax.add_patch(circle)\n\n# Draw a star\nstar = plt.Polygon([[0.5, 0.5], [0.7, 0.7], [0.7, 0.3], [0.5, 0.5], [0.3, 0.3], [0.3, 0.7]], color='yellow')\nax.add_patch(star)\n\n# Draw a rectangle with text\ntext_rect = plt.Rectangle((0.5, 0.5), 0.2, 0.2, color='blue')\nax.add_patch(text_rect)\nax.text(0.5, 0.5, 'Qwen-7B-Chat', ha='center', va='center', color='white')\n\n# Draw a triangle with text\ntext_triangle = plt.Polygon([[0.5, 0.5], [0.7, 0.7], [0.7, 0.3]], color='red')\nax.add_patch(text_triangle)\nax.text(0.7, 0.5, 'Llama2-7B-Chat', ha='center', va='center', color='white')\n\n# Draw a circle with text\ntext_circle = plt.Circle((0.5, 0.5), 0.1, color='green')\nax.add_patch(text_circle)\nax.text(0.5, 0.5, 'MPT-7B-Chat', ha='center', va='center', color='white')\n\n# Draw a star with text\ntext_star = plt.Polygon([[0.5, 0.5], [0.7, 0.7], [0.7, 0.3], [0.5, 0.5], [0.3, 0.3], [0.3, 0.7]], color='yellow')\nax.add_patch(text_star)\nax.text(0.5, 0.5, 'CodeLlama-7B-Instruct', ha='center', va='center', color='white')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/PIP_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Set the background color of the plot\nax.set_facecolor('white')\n\n# Set the title of the plot\nax.set_title('Predicted Probability Distribution')\n\n# Set the x-axis label\nax.set_xlabel('Maximum Predicted Probability')\n\n# Set the y-axis label\nax.set_ylabel('Number of Examples')\n\n# Set the x-axis limits\nax.set_xlim(0, 0.6)\n\n# Set the y-axis limits\nax.set_ylim(0, 1500)\n\n# Draw a rectangle\nrect = plt.Rectangle((0.25, 0), 0.35, 1000, color='orange', alpha=0.5)\nax.add_patch(rect)\n\n# Draw a line\nline = plt.Line2D([0.25, 0.6], [0, 1000], color='black')\nax.add_line(line)\n\n# Draw a rectangle\nrect = plt.Rectangle((0.3, 0), 0.2, 800, color='blue', alpha=0.5)\nax.add_patch(rect)\n\n# Draw a line\nline = plt.Line2D([0.3, 0.6], [0, 800], color='black')\nax.add_line(line)\n\n# Draw a rectangle\nrect = plt.Rectangle((0.4, 0), 0.1, 600, color='orange', alpha=0.5)\nax.add_patch(rect)\n\n# Draw a line\nline = plt.Line2D([0.4, 0.6], [0, 600], color='black')\nax.add_line(line)\n\n# Draw a rectangle\nrect = plt.Rectangle((0.5, 0), 0.1, 400, color='blue', alpha=0.5)\nax.add_patch(rect)\n\n# Draw a line\nline = plt.Line2D([0.5, 0.6], [0, 400], color='black')\nax.add_line(line)\n\n# Draw a rectangle\nrect = plt.Rectangle((0.6, 0), 0.1, 200, color='orange', alpha=0.5)\nax.add_patch(rect)\n\n# Draw a line\nline = plt.Line2D([0.6, 0.6], [0, 200], color='black')\nax.add_line(line)\n\n# Draw a rectangle\nrect = plt.Rectangle((0.7, 0), 0.1, 100, color='blue', alpha=0.5)\nax.add_patch(rect)\n\n# Draw a line\nline = plt.Line2D([0.7, 0.6], [0, 100], color='black')\nax.add_line(line)\n\n# Draw a rectangle\nrect = plt.Rectangle((0.8, 0), 0.1, 50, color='orange', alpha=0.5)\nax.add_patch(rect)\n\n# Draw a line\nline = plt.Line2D([0.8, 0.6], [0, 50], color='black')\nax.add_line(line)\n\n# Draw a rectangle\nrect = plt.Rectangle((0.9, 0), 0.1, 25, color='blue', alpha=0.5)\nax.add_patch(rect)\n\n# Draw a line\nline = plt.Line2D([0.9, 0.6], [0, 25], color='black')\nax.add_line(line)\n\n# Draw a rectangle\nrect = plt.Rectangle((0.1, 0), 0.1, 1500, color='orange', alpha=0.5)\nax.add_patch(rect)\n\n# Draw a line\nline = plt.Line2D([0.1, 0.6], [0, 1500], color='black')\nax.add_line(line)\n\n# Draw a rectangle\nrect = plt.Rectangle((0.2, 0), 0.1, 1000, color='blue', alpha=0.5)\nax.add_patch(rect)\n\n# Draw a line\nline = plt.Line2D([0.2, 0.6], [0, 1000], color='black')\nax.add_line(line)\n\n# Draw a rectangle\nrect = plt.Rectangle((0.3, 0), 0.1, 500, color='orange', alpha=0.5)\nax.add_patch(rect)\n\n# Draw a line\nline = plt.Line2D([0.3, 0.6], [0, 500], color='black')\nax.add_line(line)\n\n# Draw a rectangle\nrect = plt.Rectangle((0.4, 0), 0.1, 250, color='blue', alpha=0.5)\nax.add_patch(rect)\n\n# Draw a line\nline = plt.Line2D([0.4, 0.6], [0, 250], color='black')\nax.add_line(line)\n\n# Draw a rectangle\nrect = plt.Rectangle((0.5, 0), 0.1, 125, color='orange', alpha=0.5)\nax.add_patch(rect)\n\n# Draw a line\nline = plt.Line2D([0.5, 0.6], [0, 125], color='black')\nax.add_line(line)\n\n# Draw a rectangle\nrect = plt.Rectangle((0.6, 0), 0.1, 62.5, color='blue', alpha=0.5)\nax.add_patch(rect)\n\n# Draw a line\nline = plt.Line2D([0.6, 0.6], [0, 62.5], color='black')\nax.add_line(line)\n\n# Draw a rectangle\nrect = plt.Rectangle((0.7, 0), 0.1, 31.25, color='orange', alpha=0.5)\nax.add_patch(rect)\n\n# Draw a line\nline = plt.Line2D([0.7, 0.6], [0, 31.25], color='black')\nax.add_line(line)\n\n# Draw a rectangle\nrect = plt.Rectangle((0.8, 0), 0.1, 15.625, color='blue', alpha=0.5)\nax.add_patch(rect)\n\n# Draw a line\nline = plt.Line2D([0.8, 0.6], [0, 15.625], color='black')\nax.add_line(line)\n\n# Draw a rectangle\nrect = plt.Rectangle((0.9, 0), 0.1, 7.8125, color='orange', alpha=0.5)\nax.add_patch(rect)\n\n# Draw a line\nline = plt.Line2D([0.9, 0.6], [0, 7.8125], color='black')\nax.add_line(line)\n\n# Draw a rectangle\nrect = plt.Rectangle((0.1, 0), 0.1, 1500, color='blue', alpha=0.5)\nax.add_patch(rect)\n\n# Draw a line\nline = plt.Line2D([0.1, 0.6], [0, 1500], color='black')\nax.add_line(line)\n\n# Draw a rectangle\nrect = plt.Rectangle((0.2, 0), 0.1, 1000, color='orange', alpha=0.5)\nax.add_patch(rect)\n\n# Draw a line\nline = plt.Line2D([0.2, 0.6], [0, 1000], color='black')\nax.add_line(line)\n\n# Draw a rectangle\nrect = plt.Rectangle((0.3, 0), 0.1, 500, color='blue', alpha=0.5)\nax.add_patch(rect)\n\n# Draw a line\nline = plt.Line2D([0.3, 0.6], [0, 500], color='black')\nax.add_line(line)\n\n# Draw a rectangle\nrect = plt.Rectangle((0.4, 0), 0.1, 250, color='orange', alpha=0.5)\nax.add_patch(rect)\n\n# Draw a line\nline = plt.Line2D([0.4, 0.6], [0, 250], color='black')\nax.add_line(line)\n\n# Draw a rectangle\nrect = plt.Rectangle((0.5, 0), 0.1, 125, color='blue', alpha=0.5)\nax.add_patch(rect)\n\n# Draw a line\nline = plt.Line2D([0.5, 0.6], [0, 125], color='black')\nax.add_line(line)\n\n# Draw a rectangle\nrect = plt.Rectangle((0.6, 0), 0.1, 62.5, color='orange', alpha=0.5)\nax.add_patch(rect)\n\n# Draw a line\nline = plt.Line2D([0.6, 0.6], [0, 62.5], color='black')\nax.add_line(line)\n\n# Draw a rectangle\nrect = plt.Rectangle((0.7, 0), 0.1, 31.25, color='blue', alpha=0.5)\nax.add_patch(rect)\n\n# Draw a line\nline = plt.Line2D([0.7, 0.6], [0, 31.25], color='black')\nax.add_line(line)\n\n# Draw a rectangle\nrect = plt.Rectangle((0.8, 0), 0.1, 15.625, color='orange', alpha=0.5)\nax.add_patch(rect)\n\n# Draw a line\nline = plt.Line2D([0.8, 0.6], [0, 15.625], color='black')\nax.add_line(line)\n\n# Draw a rectangle\nrect = plt.Rectangle((0.9, 0), 0.1, 7.8125, color='blue', alpha=0.5)\nax.add_patch(rect)\n\n# Draw a line\nline = plt.Line2D([0.9, 0.6], [0, 7.8125], color='black')\nax.add_line(line)\n\n# Draw a rectangle\nrect = plt.Rectangle((0.1, 0), 0.1, 1500, color='orange', alpha=0.5)\nax.add_patch(rect)\n\n# Draw a line\nline = plt.Line2D([0.1, 0.6], [0, 1500], color='black')\nax.add_line(line)\n\n# Draw a rectangle\nrect = plt.Rectangle((0.2, 0), 0.1, 1000, color='blue', alpha=0.5)\nax.add_patch(rect)\n\n# Draw a line\nline = plt.Line2D([0.2, 0.6], [0, 1000], color='black')\nax.add_line(line)\n\n# Draw a rectangle\nrect = plt.Rectangle((0.3, 0), 0.1, 500, color='orange', alpha=0.5)\nax.add_patch(rect)\n\n# Draw a line\nline = plt.Line2D([0.3, 0.6], [0, 500], color='black')\nax.add_line(line)\n\n# Draw a rectangle\nrect = plt.Rectangle((0.4, 0), 0.1, 250, color='blue', alpha=0.5)\nax.add_patch(rect)\n\n# Draw a line\nline = plt.Line2D([0.4, 0.6], [0, 250], color='black')\nax.add_line(line)\n\n# Draw a rectangle\nrect = plt.Rectangle((0.5, 0), 0.1, 125, color='orange', alpha=0.5)\nax.add_patch(rect)\n\n# Draw a line\nline = plt.Line2D([0.5, 0.6], [0, 125], color='black')\nax.add_line(line)\n\n# Draw a rectangle\nrect = plt.Rectangle((0.6, 0), 0.1, 62.5, color='blue', alpha=0.5)\nax.add_patch(rect)\n\n# Draw a line\nline = plt.Line2D([0.6, 0.6], [0, 62.5], color='black')\nax.add_line(line)\n\n# Draw a rectangle\nrect = plt.Rectangle((0.7, 0), 0.1, 31.25, color='orange', alpha=0.5)\nax.add_patch(rect)\n\n# Draw a line\nline = plt.Line2D([0.7, 0.6], [0, 31.25], color='black')\nax.add_line(line)\n\n# Draw a rectangle\nrect = plt.Rectangle((0.8, 0), 0.1, 15.625, color='blue', alpha=0.5)\nax.add_patch(rect)\n\n# Draw a line\nline = plt.Line2D([0.8, 0.6], [0, 15.625], color='black')\nax.add_line(line)\n\n# Draw a rectangle\nrect = plt.Rectangle((0.9, 0), 0.1, 7.8125, color='orange', alpha=0.5)\nax.add_patch(rect)\n\n# Draw a line\nline = plt.Line2D([0.9, 0.6], [0, 7.8125], color='black')\nax.add_line(line)\n\n# Draw a rectangle\nrect = plt.Rectangle((0.1, 0), 0.1, 1500, color='blue', alpha=0.5)\nax.add_patch(rect)\n\n# Draw a line\nline = plt.Line2D([0.1, 0.6], [0, 1500], color='black')\nax.add_line(line)\n\n# Draw a rectangle\nrect = plt.Rectangle((0.2, 0), 0.1, 1000, color='orange', alpha=0.5)\nax.add_patch(rect)\n\n# Draw a line\nline = plt.Line2D([0.2, 0.6], [0, 1000], color='black')\nax.add_line(line)\n\n# Draw a rectangle\nrect = plt.Rectangle((0.3, 0), 0.1, 500, color='blue', alpha=0.5)\nax.add_patch(rect)\n\n# Draw a line\nline = plt.Line2D([0.3, 0.6], [0, 500], color='black')\nax.add_line(line)\n\n# Draw a rectangle\nrect = plt.Rectangle((0.4, 0), 0.1, 250, color='orange', alpha=0.5)\nax.add_patch(rect)\n\n# Draw a line\nline = plt.Line2D([0.4, 0.6], [0, 250], color='black')\nax.add_line(line)\n\n# Draw a rectangle\nrect = plt.Rectangle((0.5, 0), 0.1, 125, color='blue', alpha=0.5)\nax.add_patch(rect)\n\n# Draw a line\nline = plt.Line2D([0.5, 0.6], [0, 125], color='black')\nax.add_line(line)\n\n# Draw a rectangle\nrect = plt.Rectangle((0.6, 0), 0.1, 62.5, color='orange', alpha=0.5)\nax.add_patch(rect)\n\n# Draw a line\nline = plt.Line2D([0.6, 0.6], [0, 62.5], color='black')\nax.add_line(line)\n\n# Draw a rectangle\nrect = plt.Rectangle((0.7, 0), 0.1, 31.25, color='blue', alpha=0.5)\nax.add_patch(rect)\n\n# Draw a line\nline = plt.Line2D([0.7, 0.6], [0, 31.25], color='black')\nax.add_line(line)\n\n# Draw a rectangle\nrect = plt.Rectangle((0.8, 0), 0.1, 15.625, color='orange', alpha=0.5)\nax.add_patch(rect)\n\n# Draw a line\nline = plt.Line2D([0.8, 0.6], [0, 15.625], color='black')\nax.add_line(line)\n\n# Draw a rectangle\nrect = plt.Rectangle((0.9, 0), 0.1, 7.8125, color='blue', alpha=0.5)\nax.add_patch(rect)\n\n# Draw a line\nline = plt.Line2D([0.9, 0.6], [0, 7.8125], color='black')\nax.add_line(line)\n\n# Draw a rectangle\nrect = plt.Rectangle((0.1, 0), 0.1, 1500, color='orange', alpha=0.5)\nax.add_patch(rect)\n\n# Draw a line\nline = plt.Line2D([0.1, 0.6], [0, 1500], color='black')\nax.add_line(line)\n\n# Draw a rectangle\nrect = plt.Rectangle((0.2, 0), 0.1, 1000, color='blue', alpha=0.5)\nax.add_patch(rect)\n\n# Draw a line\nline = plt.Line2D([0.2, 0.6], [0, 1000], color='black')\nax.add_line(line)\n\n# Draw a rectangle\nrect = plt.Rectangle((0.3, 0), 0.1, 500, color='orange', alpha=0.5)\nax.add_patch(rect)\n\n# Draw a line\nline = plt.Line2D([0.3, 0.6], [0, 500], color='black')\nax.add_line(line)\n\n# Draw a rectangle\nrect = plt.Rectangle((0.4, 0), 0.1, 250, color='blue', alpha=0.5)\nax.add_patch(rect)\n\n# Draw a line\nline = plt.Line2D([0.4, 0.6], [0, 250], color='black')\nax.add_line(line)\n\n# Draw a rectangle\nrect = plt.Rectangle((0.5, 0), 0.1, 125, color='orange', alpha"}
{"file": "dataset/ori_500/PIP_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Empirical Lipschitz Constant')\n\n# Set the x-axis label\nax.set_xlabel('Width of Layer')\n\n# Set the y-axis label\nax.set_ylabel('Empirical Lipschitz Constant')\n\n# Set the x-ticks\nax.set_xticks([2**6, 2**7, 2**8, 2**9, 2**10, 2**11])\n\n# Set the y-ticks\nax.set_yticks(range(0, 20, 5))\n\n# Draw horizontal lines\nfor i in range(2**6, 2**12, 2):\n    ax.axhline(y=i, color='black', linestyle='-')\n\n# Draw vertical lines\nfor i in range(2**6, 2**12, 2):\n    ax.axvline(x=i, color='black', linestyle='-')\n\n# Draw the first line\nax.plot([2**6, 2**7, 2**8, 2**9, 2**10, 2**11], [100000, 150000, 200000, 250000, 300000, 350000], 'g-')\n\n# Draw the second line\nax.plot([2**6, 2**7, 2**8, 2**9, 2**10, 2**11], [100000, 120000, 140000, 160000, 180000, 200000], 'b-')\n\n# Draw the third line\nax.plot([2**6, 2**7, 2**8, 2**9, 2**10, 2**11], [100000, 110000, 120000, 130000, 140000, 150000], 'r-')\n\n# Draw the fourth line\nax.plot([2**6, 2**7, 2**8, 2**9, 2**10, 2**11], [100000, 115000, 130000, 145000, 160000, 175000], 'c-')\n\n# Draw the fifth line\nax.plot([2**6, 2**7, 2**8, 2**9, 2**10, 2**11], [100000, 110000, 120000, 130000, 140000, 150000], 'm-')\n\n# Draw the sixth line\nax.plot([2**6, 2**7, 2**8, 2**9, 2**10, 2**11], [100000, 115000, 130000, 145000, 160000, 175000], 'y-')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/PIP_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plot\ntime_steps = [0, 2000, 4000, 6000, 8000, 10000]\nrewards = [35000, 55000, 57000, 69000, 71000, 70000]\n\n# Plotting the graph\nplt.figure(figsize=(8.0, 6.0))\nplt.plot(time_steps, rewards, 'b-')\nplt.xlabel('Time Steps')\nplt.ylabel('Discounted Cumulative Reward')\nplt.title('Discounted Cumulative Reward over Time')\nplt.grid(True)\nplt.show()\n```"}
{"file": "dataset/ori_500/PIP_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Plot the data\nax.plot([0, 25, 50, 75, 100, 125, 150, 175, 200], [0.55, 0.5, 0.45, 0.4, 0.35, 0.3, 0.25, 0.2, 0.15], color='blue', label='WI')\nax.plot([0, 25, 50, 75, 100, 125, 150, 175, 200], [0.55, 0.5, 0.45, 0.4, 0.35, 0.3, 0.25, 0.2, 0.15], color='orange', label='ISQ')\n\n# Set the title and labels\nax.set_title('Discounted Cumulative Reward')\nax.set_xlabel('Time Steps')\nax.set_ylabel('Discounted Cumulative Reward')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/PIP_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\nax.set_xlim(-4, 4)\nax.set_ylim(-4, 4)\n\n# Daytime Sunny\nax.plot([1, 2], [3, 4], 'o', color='orange')\nax.plot([2, 3], [4, 5], 'o', color='orange')\nax.plot([3, 4], [5, 6], 'o', color='orange')\n\n# Night Rainy\nax.plot([1, 2], [3, 4], 'o', color='blue')\nax.plot([2, 3], [4, 5], 'o', color='blue')\nax.plot([3, 4], [5, 6], 'o', color='blue')\n\n# PGST\nax.plot([1, 2], [3, 4], 'o', color='green')\nax.plot([2, 3], [4, 5], 'o', color='green')\nax.plot([3, 4], [5, 6], 'o', color='green')\n\n# Daytime Sunny\nax.plot([1, 2], [3, 4], 'o', color='orange')\nax.plot([2, 3], [4, 5], 'o', color='orange')\nax.plot([3, 4], [5, 6], 'o', color='orange')\n\n# Night Rainy\nax.plot([1, 2], [3, 4], 'o', color='blue')\nax.plot([2, 3], [4, 5], 'o', color='blue')\nax.plot([3, 4], [5, 6], 'o', color='blue')\n\n# PGST\nax.plot([1, 2], [3, 4], 'o', color='green')\nax.plot([2, 3], [4, 5], 'o', color='green')\nax.plot([3, 4], [5, 6], 'o', color='green')\n\n# Daytime Sunny\nax.plot([1, 2], [3, 4], 'o', color='orange')\nax.plot([2, 3], [4, 5], 'o', color='orange')\nax.plot([3, 4], [5, 6], 'o', color='orange')\n\n# Night Rainy\nax.plot([1, 2], [3, 4], 'o', color='blue')\nax.plot([2, 3], [4, 5], 'o', color='blue')\nax.plot([3, 4], [5, 6], 'o', color='blue')\n\n# PGST\nax.plot([1, 2], [3, 4], 'o', color='green')\nax.plot([2, 3], [4, 5], 'o', color='green')\nax.plot([3, 4], [5, 6], 'o', color='green')\n\n# Daytime Sunny\nax.plot([1, 2], [3, 4], 'o', color='orange')\nax.plot([2, 3], [4, 5], 'o', color='orange')\nax.plot([3, 4], [5, 6], 'o', color='orange')\n\n# Night Rainy\nax.plot([1, 2], [3, 4], 'o', color='blue')\nax.plot([2, 3], [4, 5], 'o', color='blue')\nax.plot([3, 4], [5, 6], 'o', color='blue')\n\n# PGST\nax.plot([1, 2], [3, 4], 'o', color='green')\nax.plot([2, 3], [4, 5], 'o', color='green')\nax.plot([3, 4], [5, 6], 'o', color='green')\n\n# Daytime Sunny\nax.plot([1, 2], [3, 4], 'o', color='orange')\nax.plot([2, 3], [4, 5], 'o', color='orange')\nax.plot([3, 4], [5, 6], 'o', color='orange')\n\n# Night Rainy\nax.plot([1, 2], [3, 4], 'o', color='blue')\nax.plot([2, 3], [4, 5], 'o', color='blue')\nax.plot([3, 4], [5, 6], 'o', color='blue')\n\n# PGST\nax.plot([1, 2], [3, 4], 'o', color='green')\nax.plot([2, 3], [4, 5], 'o', color='green')\nax.plot([3, 4], [5, 6], 'o', color='green')\n\n# Daytime Sunny\nax.plot([1, 2], [3, 4], 'o', color='orange')\nax.plot([2, 3], [4, 5], 'o', color='orange')\nax.plot([3, 4], [5, 6], 'o', color='orange')\n\n# Night Rainy\nax.plot([1, 2], [3, 4], 'o', color='blue')\nax.plot([2, 3], [4, 5], 'o', color='blue')\nax.plot([3, 4], [5, 6], 'o', color='blue')\n\n# PGST\nax.plot([1, 2], [3, 4], 'o', color='green')\nax.plot([2, 3], [4, 5], 'o', color='green')\nax.plot([3, 4], [5, 6], 'o', color='green')\n\n# Daytime Sunny\nax.plot([1, 2], [3, 4], 'o', color='orange')\nax.plot([2, 3], [4, 5], 'o', color='orange')\nax.plot([3, 4], [5, 6], 'o', color='orange')\n\n# Night Rainy\nax.plot([1, 2], [3, 4], 'o', color='blue')\nax.plot([2, 3], [4, 5], 'o', color='blue')\nax.plot([3, 4], [5, 6], 'o', color='blue')\n\n# PGST\nax.plot([1, 2], [3, 4], 'o', color='green')\nax.plot([2, 3], [4, 5], 'o', color='green')\nax.plot([3, 4], [5, 6], 'o', color='green')\n\n# Daytime Sunny\nax.plot([1, 2], [3, 4], 'o', color='orange')\nax.plot([2, 3], [4, 5], 'o', color='orange')\nax.plot([3, 4], [5, 6], 'o', color='orange')\n\n# Night Rainy\nax.plot([1, 2], [3, 4], 'o', color='blue')\nax.plot([2, 3], [4, 5], 'o', color='blue')\nax.plot([3, 4], [5, 6], 'o', color='blue')\n\n# PGST\nax.plot([1, 2], [3, 4], 'o', color='green')\nax.plot([2, 3], [4, 5], 'o', color='green')\nax.plot([3, 4], [5, 6], 'o', color='green')\n\n# Daytime Sunny\nax.plot([1, 2], [3, 4], 'o', color='orange')\nax.plot([2, 3], [4, 5], 'o', color='orange')\nax.plot([3, 4], [5, 6], 'o', color='orange')\n\n# Night Rainy\nax.plot([1, 2], [3, 4], 'o', color='blue')\nax.plot([2, 3], [4, 5], 'o', color='blue')\nax.plot([3, 4], [5, 6], 'o', color='blue')\n\n# PGST\nax.plot([1, 2], [3, 4], 'o', color='green')\nax.plot([2, 3], [4, 5], 'o', color='green')\nax.plot([3, 4], [5, 6], 'o', color='green')\n\n# Daytime Sunny\nax.plot([1, 2], [3, 4], 'o', color='orange')\nax.plot([2, 3], [4, 5], 'o', color='orange')\nax.plot([3, 4], [5, 6], 'o', color='orange')\n\n# Night Rainy\nax.plot([1, 2], [3, 4], 'o', color='blue')\nax.plot([2, 3], [4, 5], 'o', color='blue')\nax.plot([3, 4], [5, 6], 'o', color='blue')\n\n# PGST\nax.plot([1, 2], [3, 4], 'o', color='green')\nax.plot([2, 3], [4, 5], 'o', color='green')\nax.plot([3, 4], [5, 6], 'o', color='green')\n\n# Daytime Sunny\nax.plot([1, 2], [3, 4], 'o', color='orange')\nax.plot([2, 3], [4, 5], 'o', color='orange')\nax.plot([3, 4], [5, 6], 'o', color='orange')\n\n# Night Rainy\nax.plot([1, 2], [3, 4], 'o', color='blue')\nax.plot([2, 3], [4, 5], 'o', color='blue')\nax.plot([3, 4], [5, 6], 'o', color='blue')\n\n# PGST\nax.plot([1, 2], [3, 4], 'o', color='green')\nax.plot([2, 3], [4, 5], 'o', color='green')\nax.plot([3, 4], [5, 6], 'o', color='green')\n\n# Daytime Sunny\nax.plot([1, 2], [3, 4], 'o', color='orange')\nax.plot([2, 3], [4, 5], 'o', color='orange')\nax.plot([3, 4], [5, 6], 'o', color='orange')\n\n# Night Rainy\nax.plot([1, 2], [3, 4], 'o', color='blue')\nax.plot([2, 3], [4, 5], 'o', color='blue')\nax.plot([3, 4], [5, 6], 'o', color='blue')\n\n# PGST\nax.plot([1, 2], [3, 4], 'o', color='green')\nax.plot([2, 3], [4, 5], 'o', color='green')\nax.plot([3, 4], [5, 6], 'o', color='green')\n\n# Daytime Sunny\nax.plot([1, 2], [3, 4], 'o', color='orange')\nax.plot([2, 3], [4, 5], 'o', color='orange')\nax.plot([3, 4], [5, 6], 'o', color='orange')\n\n# Night Rainy\nax.plot([1, 2], [3, 4], 'o', color='blue')\nax.plot([2, 3], [4, 5], 'o', color='blue')\nax.plot([3, 4], [5, 6], 'o', color='blue')\n\n# PGST\nax.plot([1, 2], [3, 4], 'o', color='green')\nax.plot([2, 3], [4, 5], 'o', color='green')\nax.plot([3, 4], [5, 6], 'o', color='green')\n\n# Daytime Sunny\nax.plot([1, 2], [3, 4], 'o', color='orange')\nax.plot([2, 3], [4, 5], 'o', color='orange')\nax.plot([3, 4], [5, 6], 'o', color='orange')\n\n# Night Rainy\nax.plot([1, 2], [3, 4], 'o', color='blue')\nax.plot([2, 3], [4, 5], 'o', color='blue')\nax.plot([3, 4], [5, 6], 'o', color='blue')\n\n# PGST\nax.plot([1, 2], [3, 4], 'o', color='green')\nax.plot([2, 3], [4, 5], 'o', color='green')\nax.plot([3, 4], [5, 6], 'o', color='green')\n\n# Daytime Sunny\nax.plot([1, 2], [3, 4], 'o', color='orange')\nax.plot([2, 3], [4, 5], 'o', color='orange')\nax.plot([3, 4], [5, 6], 'o', color='orange')\n\n# Night Rainy\nax.plot([1, 2], [3, 4], 'o', color='blue')\nax.plot([2, 3], [4, 5], 'o', color='blue')\nax.plot([3, 4], [5, 6], 'o', color='blue')\n\n# PGST\nax.plot([1, 2], [3, 4], 'o', color='green')\nax.plot([2, 3], [4, 5], 'o', color='green')\nax.plot([3, 4], [5, 6], 'o', color='green')\n\n# Daytime Sunny\nax.plot([1, 2], [3, 4], 'o', color='orange')\nax.plot([2, 3], [4, 5], 'o', color='orange')\nax.plot([3, 4], [5, 6], 'o', color='orange')\n\n# Night Rainy\nax.plot([1, 2], [3, 4], 'o', color='blue')\nax.plot([2, 3], [4, 5], 'o', color='blue')\nax.plot([3, 4], [5, 6], 'o', color='blue')\n\n# PGST\nax.plot([1, 2], [3, 4], 'o', color='green')\nax.plot([2, 3], [4, 5], 'o', color='green')\nax.plot([3, 4], [5, 6], 'o', color='green')\n\n# Daytime Sunny\nax.plot([1, 2], [3, 4], 'o', color='orange')\nax.plot([2, 3], [4, 5], 'o', color='orange')\nax.plot([3, 4], [5, 6], 'o', color='orange')\n\n# Night Rainy\nax.plot([1, 2], [3, 4], 'o', color='blue')\nax.plot([2, 3], [4, 5], 'o', color='blue')\nax.plot([3, 4], [5, 6], 'o', color='blue')\n\n# PGST\nax.plot([1, 2], [3, 4], 'o', color='green')\nax.plot([2, 3], [4, 5], 'o', color='green')\nax.plot([3, 4], [5, 6], 'o', color='green')\n\n# Daytime Sunny\nax.plot([1, 2], [3, 4], 'o', color='orange')\nax.plot([2, 3], [4, 5], 'o', color='orange')\nax.plot([3, 4], [5, 6], 'o', color='orange')\n\n# Night Rainy\nax.plot([1, 2], [3, 4], 'o', color='blue')\nax.plot([2, 3], [4, 5], 'o', color='blue')\nax.plot([3, 4], [5, 6], 'o', color='blue')\n\n# PGST\nax.plot([1, 2], [3, 4], 'o', color='green')\nax.plot([2, 3], [4, 5], 'o', color='green')\nax.plot([3, 4], [5, 6], 'o', color='green')\n\n# Daytime Sunny\nax.plot([1, 2], [3, 4], 'o', color='orange')\nax.plot([2, 3], [4, 5], 'o', color='orange')\nax.plot([3, 4], [5, 6], 'o', color='orange')\n\n# Night Rainy\nax.plot([1, 2], [3, 4], 'o', color='blue')\nax.plot([2, 3], [4, 5], 'o', color='blue')\nax.plot([3, 4], [5, 6], 'o', color='blue')\n\n# PGST\nax.plot([1, 2], [3, 4], 'o', color='green')\nax.plot([2, 3], [4, 5], 'o', color='green')\nax.plot([3, 4], [5, 6], 'o', color='green')\n\n# Daytime Sunny\nax.plot([1, 2], [3, 4], 'o', color='orange')\nax.plot([2, 3], [4, 5], 'o', color='orange')\nax.plot([3, 4], [5, 6], 'o', color='orange')\n\n# Night Rainy\nax.plot([1, 2], [3, 4], 'o', color='blue')\nax.plot([2, 3], [4, 5], 'o', color='blue')\nax.plot([3, 4], [5, 6], 'o', color='blue')\n\n# PGST\nax.plot([1, 2], [3, 4], 'o', color='green')\nax.plot([2, 3], [4, 5], 'o', color='green')\nax.plot([3, 4], [5, 6"}
{"file": "dataset/ori_500/PIP_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Scatter plot for the first quadrant\nax.scatter([1, 2, 3], [4, 5, 6], color='red')\nax.scatter([7, 8, 9], [10, 11, 12], color='green')\n\n# Scatter plot for the second quadrant\nax.scatter([-1, -2, -3], [4, 5, 6], color='blue')\nax.scatter([-7, -8, -9], [10, 11, 12], color='purple')\n\n# Scatter plot for the third quadrant\nax.scatter([-1, -2, -3], [-4, -5, -6], color='orange')\nax.scatter([-7, -8, -9], [-10, -11, -12], color='yellow')\n\n# Scatter plot for the fourth quadrant\nax.scatter([1, 2, 3], [-4, -5, -6], color='cyan')\nax.scatter([7, 8, 9], [-10, -11, -12], color='magenta')\n\n# Draw a rectangle around the first quadrant\nrectangle = plt.Rectangle((1, 4), 2, 2, linewidth=1, edgecolor='r', facecolor='none')\nax.add_patch(rectangle)\n\n# Draw a rectangle around the second quadrant\nrectangle = plt.Rectangle((-3, 4), 2, 2, linewidth=1, edgecolor='b', facecolor='none')\nax.add_patch(rectangle)\n\n# Draw a rectangle around the third quadrant\nrectangle = plt.Rectangle((-3, -6), 2, 2, linewidth=1, edgecolor='y', facecolor='none')\nax.add_patch(rectangle)\n\n# Draw a rectangle around the fourth quadrant\nrectangle = plt.Rectangle((1, -6), 2, 2, linewidth=1, edgecolor='g', facecolor='none')\nax.add_patch(rectangle)\n\n# Draw a line pointing to the first quadrant\nline = plt.Line2D([0, 1], [0, 1], lw=2, color='k')\nax.add_line(line)\n\n# Set the limits of the axes\nax.set_xlim(-8, 8)\nax.set_ylim(-8, 8)\n\nplt.show()\n```"}
{"file": "dataset/ori_500/area_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(9.0, 8.0))\n\n# Set the background color of the plot\nax.set_facecolor('lightgrey')\n\n# Set the title of the plot\nax.set_title('Stock Market Analysis', fontsize=16)\n\n# Set the x-axis label\nax.set_xlabel('Time (in minutes)', fontsize=14)\n\n# Set the y-axis label\nax.set_ylabel('Price (in dollars)', fontsize=14)\n\n# Set the x-ticks\nax.set_xticks([10, 50, 100, 150, 200])\nax.set_xticklabels(['10K', '50K', '100K', '150K', '200K'])\n\n# Set the y-ticks\nax.set_yticks([0, 10, 20, 30, 40, 50])\nax.set_yticklabels(['0', '10', '20', '30', '40', '50'])\n\n# Set the grid\nax.grid(True)\n\n# Set the legend\nax.legend(['ActivityNet mIoU', 'Breakfast MoF', 'ActivityNet CIDER', 'QVHighlights mAP'], loc='upper left')\n\n# Set the colors\ncolors = ['pink', 'orange', 'cyan', 'grey']\n\n# Set the line styles\nlinestyles = ['-', '--', '-.', ':']\n\n# Set the markers\nmarkers = ['o', 's', '^', 'D']\n\n# Set the marker sizes\nmarkersizes = [10, 15, 20, 25]\n\n# Set the line widths\nlinewidths = [1, 2, 3, 4]\n\n# Set the line colors\nlinecolors = ['red', 'orange', 'cyan', 'grey']\n\n# Set the line styles\nlinestyles = ['-', '--', '-.', ':']\n\n# Set the line markers\nlinemarkers = ['o', 's', '^', 'D']\n\n# Set the line marker sizes\nlinemarkersizes = [10, 15, 20, 25]\n\n# Set the line marker edge colors\nlinemarkeredgecolors = ['black', 'black', 'black', 'black']\n\n# Set the line marker face colors\nlinemarkerfacecolors = ['white', 'white', 'white', 'white']\n\n# Set the line marker edge widths\nlinemarkeredgewidths = [1, 1, 1, 1]\n\n# Set the line marker face widths\nlinemarkerfacewidths = [1, 1, 1, 1]\n\n# Set the line marker hatch\nlinemarkerhatch = ['/', '\\\\', '|', '-']\n\n# Set the line marker fill style\nlinemarkerfillstyle = ['full', 'left', 'right', 'bottom']\n\n# Set the line marker antialiased\nlinemarkerantialiased = [True, True, True, True]\n\n# Set the line marker capstyle\nlinemarkercapstyle = ['butt', 'round', 'projecting']\n\n# Set the line marker joinstyle\nlinemarkerjoinstyle = ['miter', 'round', 'bevel']\n\n# Set the line marker solid capstyle\nlinemarkersolidcapstyle = ['butt', 'round', 'projecting']\n\n# Set the line marker solid joinstyle\nlinemarkersolidjoinstyle = ['miter', 'round', 'bevel']\n\n# Set the line marker dash capstyle\nlinemarkerdashcapstyle = ['butt', 'round', 'projecting']\n\n# Set the line marker dash joinstyle\nlinemarkerdashjoinstyle = ['miter', 'round', 'bevel']\n\n# Set the line marker dash pattern\nlinemarkerdashpattern = [[1, 2], [2, 3], [3, 4], [4, 5]]\n\n# Set the line marker dash capstyle\nlinemarkerdashcapstyle = ['butt', 'round', 'projecting']\n\n# Set the line marker dash joinstyle\nlinemarkerdashjoinstyle = ['miter', 'round', 'bevel']\n\n# Set the line marker dash pattern\nlinemarkerdashpattern = [[1, 2], [2, 3], [3, 4], [4, 5]]\n\n# Set the line marker dash capstyle\nlinemarkerdashcapstyle = ['butt', 'round', 'projecting']\n\n# Set the line marker dash joinstyle\nlinemarkerdashjoinstyle = ['miter', 'round', 'bevel']\n\n# Set the line marker dash pattern\nlinemarkerdashpattern = [[1, 2], [2, 3], [3, 4], [4, 5]]\n\n# Set the line marker dash capstyle\nlinemarkerdashcapstyle = ['butt', 'round', 'projecting']\n\n# Set the line marker dash joinstyle\nlinemarkerdashjoinstyle = ['miter', 'round', 'bevel']\n\n# Set the line marker dash pattern\nlinemarkerdashpattern = [[1, 2], [2, 3], [3, 4], [4, 5]]\n\n# Set the line marker dash capstyle\nlinemarkerdashcapstyle = ['butt', 'round', 'projecting']\n\n# Set the line marker dash joinstyle\nlinemarkerdashjoinstyle = ['miter', 'round', 'bevel']\n\n# Set the line marker dash pattern\nlinemarkerdashpattern = [[1, 2], [2, 3], [3, 4], [4, 5]]\n\n# Set the line marker dash capstyle\nlinemarkerdashcapstyle = ['butt', 'round', 'projecting']\n\n# Set the line marker dash joinstyle\nlinemarkerdashjoinstyle = ['miter', 'round', 'bevel']\n\n# Set the line marker dash pattern\nlinemarkerdashpattern = [[1, 2], [2, 3], [3, 4], [4, 5]]\n\n# Set the line marker dash capstyle\nlinemarkerdashcapstyle = ['butt', 'round', 'projecting']\n\n# Set the line marker dash joinstyle\nlinemarkerdashjoinstyle = ['miter', 'round', 'bevel']\n\n# Set the line marker dash pattern\nlinemarkerdashpattern = [[1, 2], [2, 3], [3, 4], [4, 5]]\n\n# Set the line marker dash capstyle\nlinemarkerdashcapstyle = ['butt', 'round', 'projecting']\n\n# Set the line marker dash joinstyle\nlinemarkerdashjoinstyle = ['miter', 'round', 'bevel']\n\n# Set the line marker dash pattern\nlinemarkerdashpattern = [[1, 2], [2, 3], [3, 4], [4, 5]]\n\n# Set the line marker dash capstyle\nlinemarkerdashcapstyle = ['butt', 'round', 'projecting']\n\n# Set the line marker dash joinstyle\nlinemarkerdashjoinstyle = ['miter', 'round', 'bevel']\n\n# Set the line marker dash pattern\nlinemarkerdashpattern = [[1, 2], [2, 3], [3, 4], [4, 5]]\n\n# Set the line marker dash capstyle\nlinemarkerdashcapstyle = ['butt', 'round', 'projecting']\n\n# Set the line marker dash joinstyle\nlinemarkerdashjoinstyle = ['miter', 'round', 'bevel']\n\n# Set the line marker dash pattern\nlinemarkerdashpattern = [[1, 2], [2, 3], [3, 4], [4, 5]]\n\n# Set the line marker dash capstyle\nlinemarkerdashcapstyle = ['butt', 'round', 'projecting']\n\n# Set the line marker dash joinstyle\nlinemarkerdashjoinstyle = ['miter', 'round', 'bevel']\n\n# Set the line marker dash pattern\nlinemarkerdashpattern = [[1, 2], [2, 3], [3, 4], [4, 5]]\n\n# Set the line marker dash capstyle\nlinemarkerdashcapstyle = ['butt', 'round', 'projecting']\n\n# Set the line marker dash joinstyle\nlinemarkerdashjoinstyle = ['miter', 'round', 'bevel']\n\n# Set the line marker dash pattern\nlinemarkerdashpattern = [[1, 2], [2, 3], [3, 4], [4, 5]]\n\n# Set the line marker dash capstyle\nlinemarkerdashcapstyle = ['butt', 'round', 'projecting']\n\n# Set the line marker dash joinstyle\nlinemarkerdashjoinstyle = ['miter', 'round', 'bevel']\n\n# Set the line marker dash pattern\nlinemarkerdashpattern = [[1, 2], [2, 3], [3, 4], [4, 5]]\n\n# Set the line marker dash capstyle\nlinemarkerdashcapstyle = ['butt', 'round', 'projecting']\n\n# Set the line marker dash joinstyle\nlinemarkerdashjoinstyle = ['miter', 'round', 'bevel']\n\n# Set the line marker dash pattern\nlinemarkerdashpattern = [[1, 2], [2, 3], [3, 4], [4, 5]]\n\n# Set the line marker dash capstyle\nlinemarkerdashcapstyle = ['butt', 'round', 'projecting']\n\n# Set the line marker dash joinstyle\nlinemarkerdashjoinstyle = ['miter', 'round', 'bevel']\n\n# Set the line marker dash pattern\nlinemarkerdashpattern = [[1, 2], [2, 3], [3, 4], [4, 5]]\n\n# Set the line marker dash capstyle\nlinemarkerdashcapstyle = ['butt', 'round', 'projecting']\n\n# Set the line marker dash joinstyle\nlinemarkerdashjoinstyle = ['miter', 'round', 'bevel']\n\n# Set the line marker dash pattern\nlinemarkerdashpattern = [[1, 2], [2, 3], [3, 4], [4, 5]]\n\n# Set the line marker dash capstyle\nlinemarkerdashcapstyle = ['butt', 'round', 'projecting']\n\n# Set the line marker dash joinstyle\nlinemarkerdashjoinstyle = ['miter', 'round', 'bevel']\n\n# Set the line marker dash pattern\nlinemarkerdashpattern = [[1, 2], [2, 3], [3, 4], [4, 5]]\n\n# Set the line marker dash capstyle\nlinemarkerdashcapstyle = ['butt', 'round', 'projecting']\n\n# Set the line marker dash joinstyle\nlinemarkerdashjoinstyle = ['miter', 'round', 'bevel']\n\n# Set the line marker dash pattern\nlinemarkerdashpattern = [[1, 2], [2, 3], [3, 4], [4, 5]]\n\n# Set the line marker dash capstyle\nlinemarkerdashcapstyle = ['butt', 'round', 'projecting']\n\n# Set the line marker dash joinstyle\nlinemarkerdashjoinstyle = ['miter', 'round', 'bevel']\n\n# Set the line marker dash pattern\nlinemarkerdashpattern = [[1, 2], [2, 3], [3, 4], [4, 5]]\n\n# Set the line marker dash capstyle\nlinemarkerdashcapstyle = ['butt', 'round', 'projecting']\n\n# Set the line marker dash joinstyle\nlinemarkerdashjoinstyle = ['miter', 'round', 'bevel']\n\n# Set the line marker dash pattern\nlinemarkerdashpattern = [[1, 2], [2, 3], [3, 4], [4, 5]]\n\n# Set the line marker dash capstyle\nlinemarkerdashcapstyle = ['butt', 'round', 'projecting']\n\n# Set the line marker dash joinstyle\nlinemarkerdashjoinstyle = ['miter', 'round', 'bevel']\n\n# Set the line marker dash pattern\nlinemarkerdashpattern = [[1, 2], [2, 3], [3, 4], [4, 5]]\n\n# Set the line marker dash capstyle\nlinemarkerdashcapstyle = ['butt', 'round', 'projecting']\n\n# Set the line marker dash joinstyle\nlinemarkerdashjoinstyle = ['miter', 'round', 'bevel']\n\n# Set the line marker dash pattern\nlinemarkerdashpattern = [[1, 2], [2, 3], [3, 4], [4, 5]]\n\n# Set the line marker dash capstyle\nlinemarkerdashcapstyle = ['butt', 'round', 'projecting']\n\n# Set the line marker dash joinstyle\nlinemarkerdashjoinstyle = ['miter', 'round', 'bevel']\n\n# Set the line marker dash pattern\nlinemarkerdashpattern = [[1, 2], [2, 3], [3, 4], [4, 5]]\n\n# Set the line marker dash capstyle\nlinemarkerdashcapstyle = ['butt', 'round', 'projecting']\n\n# Set the line marker dash joinstyle\nlinemarkerdashjoinstyle = ['miter', 'round', 'bevel']\n\n# Set the line marker dash pattern\nlinemarkerdashpattern = [[1, 2], [2, 3], [3, 4], [4, 5]]\n\n# Set the line marker dash capstyle\nlinemarkerdashcapstyle = ['butt', 'round', 'projecting']\n\n# Set the line marker dash joinstyle\nlinemarkerdashjoinstyle = ['miter', 'round', 'bevel']\n\n# Set the line marker dash pattern\nlinemarkerdashpattern = [[1, 2], [2, 3], [3, 4], [4, 5]]\n\n# Set the line marker dash capstyle\nlinemarkerdashcapstyle = ['butt', 'round', 'projecting']\n\n# Set the line marker dash joinstyle\nlinemarkerdashjoinstyle = ['miter', 'round', 'bevel']\n\n# Set the line marker dash pattern\nlinemarkerdashpattern = [[1, 2], [2, 3], [3, 4], [4, 5]]\n\n# Set the line marker dash capstyle\nlinemarkerdashcapstyle = ['butt', 'round', 'projecting']\n\n# Set the line marker dash joinstyle\nlinemarkerdashjoinstyle = ['miter', 'round', 'bevel']\n\n# Set the line marker dash pattern\nlinemarkerdashpattern = [[1, 2], [2, 3], [3, 4], [4, 5]]\n\n# Set the line marker dash capstyle\nlinemarkerdashcapstyle = ['butt', 'round', 'projecting']\n\n# Set the line marker dash joinstyle\nlinemarkerdashjoinstyle = ['miter', 'round', 'bevel']\n\n# Set the line marker dash pattern\nlinemarkerdashpattern = [[1, 2], [2, 3], [3, 4], [4, 5]]\n\n# Set the line marker dash capstyle\nlinemarkerdashcapstyle = ['butt', 'round', 'projecting']\n\n# Set the line marker dash joinstyle\nlinemarkerdashjoinstyle = ['miter', 'round', 'bevel']\n\n# Set the line marker dash pattern\nlinemarkerdashpattern = [[1, 2], [2, 3], [3, 4], [4, 5]]\n\n# Set the line marker dash capstyle\nlinemarkerdashcapstyle = ['butt', 'round', 'projecting']\n\n# Set the line marker dash joinstyle\nlinemarkerdashjoinstyle = ['miter', 'round', 'bevel']\n\n# Set the line marker dash pattern\nlinemarkerdashpattern = [[1, 2], [2, 3], [3, 4], [4, 5]]\n\n# Set the line marker dash capstyle\nlinemarkerdashcapstyle = ['butt', 'round', 'projecting']\n\n# Set the line marker dash joinstyle\nlinemarkerdashjoinstyle = ['miter', 'round', 'bevel']\n\n# Set the line marker dash pattern\nlinemarkerdashpattern = [[1, 2], [2, 3], [3, 4], [4, 5]]\n\n# Set the line marker dash capstyle\nlinemarkerdashcapstyle = ['butt', 'round', 'projecting']\n\n# Set the line marker dash joinstyle\nlinemarkerdashjoinstyle = ['miter', 'round', 'bevel']\n\n# Set the line marker dash pattern\nlinemarkerdashpattern = [[1, 2], [2, 3], [3, 4], [4, 5]]\n\n# Set the line marker dash capstyle\nlinemarkerdashcapstyle = ['butt', 'round', 'projecting']\n\n# Set the line marker dash joinstyle\nlinemarkerdashjoinstyle = ['miter', 'round', 'bevel']\n\n# Set the line marker dash pattern\nlinemarkerdashpattern = [[1, 2], [2, 3], [3, 4], [4, 5]]\n\n# Set the line marker dash capstyle\nlinemarkerdashcapstyle = ['butt', 'round', 'projecting']\n\n# Set the line marker dash joinstyle\nlinemarkerdashjoinstyle = ['miter', 'round', 'bevel']\n\n# Set the line marker dash pattern\nlinemarkerdashpattern = [[1, 2], [2, 3], [3, 4], [4, 5]]\n\n# Set the line marker dash capstyle\nlinemarkerdashcapstyle = ['butt', 'round', 'projecting']\n\n# Set the line marker dash joinstyle\nlinemarkerdashjoinstyle = ['miter', 'round', 'bevel']\n\n# Set the line marker dash pattern\nlinemarkerdashpattern = [[1, 2], [2, 3], [3, 4], [4, 5]]\n\n# Set the line marker dash capstyle\nlinemarkerdashcapstyle = ['butt', 'round', 'projecting']\n\n# Set the line marker dash joinstyle\nlinemarkerdashjoinstyle = ['miter', 'round', 'bevel']\n\n# Set the line marker dash pattern\nlinemarkerdashpattern = [[1, 2], [2, 3], [3, 4], [4, 5]]\n\n# Set the line marker dash capstyle\nlinemarkerdashcapstyle = ['butt', 'round', 'projecting']\n\n# Set the line marker dash joinstyle\nlinemarkerdashjoinstyle = ['miter', 'round', 'bevel']\n\n# Set the line marker dash pattern\n"}
{"file": "dataset/ori_500/area_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 10))\n\n# Set the background color of the plot\nax.set_facecolor('lightgrey')\n\n# Set the title of the plot\nax.set_title('Stock Prices')\n\n# Set the x-axis label\nax.set_xlabel('Time Step')\n\n# Set the y-axis label\nax.set_ylabel('Price')\n\n# Set the x-axis ticks\nax.set_xticks([0, 1, 2, 3])\n\n# Set the y-axis ticks\nax.set_yticks([0, 10, 20, 30, 40, 50])\n\n# Set the x-axis tick labels\nax.set_xticklabels(['0', '1', '2', '3'])\n\n# Set the y-axis tick labels\nax.set_yticklabels(['0.96', '0.98', '1.00', '1.02', '1.04', '1.06'])\n\n# Set the grid\nax.grid(True)\n\n# Set the legend\nax.legend(['GT', 'DRS', 'PR-based'], loc='upper left')\n\n# Set the colors\ncolors = ['green', 'blue', 'red']\n\n# Plot the data\nfor i, color in enumerate(colors):\n    ax.plot([0, 1, 2, 3], [0.96 + i*0.02, 0.98 + i*0.02, 1.00 + i*0.02, 1.02 + i*0.02], color=color)\n    ax.scatter([0, 1, 2, 3], [0.96 + i*0.02, 0.98 + i*0.02, 1.00 + i*0.02, 1.02 + i*0.02], color=color)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/area_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Dynamic Effect of Vocab on Zero Shot Accuracy')\n\n# Set the x-axis label\nax.set_xlabel('Deposition IO Norm')\n\n# Set the y-axis label\nax.set_ylabel('Accuracy')\n\n# Define the data for the plot\nx = [0, 20, 40, 60, 80]\ny = [0.53, 0.75, 0.65, 0.60, 0.55]\n\n# Plot the data\nax.plot(x, y, color='blue')\n\n# Set the color of the x-axis ticks\nax.tick_params(axis='x', colors='red')\n\n# Set the color of the y-axis ticks\nax.tick_params(axis='y', colors='green')\n\n# Set the color of the x-axis labels\nax.xaxis.label.set_color('purple')\n\n# Set the color of the y-axis labels\nax.yaxis.label.set_color('orange')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelcolor='brown')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='pink')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='black')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='grey')\n\n# Set the color of the x-axis spines\nax.spines['left'].set_color('cyan')\nax.spines['right'].set_color('magenta')\nax.spines['top'].set_color('yellow')\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis spines\nax.spines['left'].set_color('cyan')\nax.spines['right'].set_color('magenta')\nax.spines['top'].set_color('yellow')\nax.spines['bottom'].set_color('black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='cyan')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='magenta')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelcolor='yellow')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='black')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='cyan')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='magenta')\n\n# Set the color of the x-axis spines\nax.spines['left'].set_color('yellow')\nax.spines['right'].set_color('black')\nax.spines['top'].set_color('cyan')\nax.spines['bottom'].set_color('magenta')\n\n# Set the color of the y-axis spines\nax.spines['left'].set_color('yellow')\nax.spines['right'].set_color('black')\nax.spines['top'].set_color('cyan')\nax.spines['bottom'].set_color('magenta')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='yellow')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelcolor='cyan')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='magenta')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='yellow')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='black')\n\n# Set the color of the x-axis spines\nax.spines['left'].set_color('cyan')\nax.spines['right'].set_color('magenta')\nax.spines['top'].set_color('yellow')\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis spines\nax.spines['left'].set_color('cyan')\nax.spines['right'].set_color('magenta')\nax.spines['top'].set_color('yellow')\nax.spines['bottom'].set_color('black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='cyan')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='magenta')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelcolor='yellow')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='black')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='cyan')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='magenta')\n\n# Set the color of the x-axis spines\nax.spines['left'].set_color('yellow')\nax.spines['right'].set_color('black')\nax.spines['top'].set_color('cyan')\nax.spines['bottom'].set_color('magenta')\n\n# Set the color of the y-axis spines\nax.spines['left'].set_color('yellow')\nax.spines['right'].set_color('black')\nax.spines['top'].set_color('cyan')\nax.spines['bottom'].set_color('magenta')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='yellow')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelcolor='cyan')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='magenta')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='yellow')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='black')\n\n# Set the color of the x-axis spines\nax.spines['left'].set_color('cyan')\nax.spines['right'].set_color('magenta')\nax.spines['top'].set_color('yellow')\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis spines\nax.spines['left'].set_color('cyan')\nax.spines['right'].set_color('magenta')\nax.spines['top'].set_color('yellow')\nax.spines['bottom'].set_color('black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='cyan')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='magenta')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelcolor='yellow')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='black')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='cyan')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='magenta')\n\n# Set the color of the x-axis spines\nax.spines['left'].set_color('yellow')\nax.spines['right'].set_color('black')\nax.spines['top'].set_color('cyan')\nax.spines['bottom'].set_color('magenta')\n\n# Set the color of the y-axis spines\nax.spines['left'].set_color('yellow')\nax.spines['right'].set_color('black')\nax.spines['top'].set_color('cyan')\nax.spines['bottom'].set_color('magenta')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='yellow')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelcolor='cyan')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='magenta')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='yellow')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='black')\n\n# Set the color of the x-axis spines\nax.spines['left'].set_color('cyan')\nax.spines['right'].set_color('magenta')\nax.spines['top'].set_color('yellow')\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis spines\nax.spines['left'].set_color('cyan')\nax.spines['right'].set_color('magenta')\nax.spines['top'].set_color('yellow')\nax.spines['bottom'].set_color('black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='cyan')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='magenta')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelcolor='yellow')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='black')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='cyan')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='magenta')\n\n# Set the color of the x-axis spines\nax.spines['left'].set_color('yellow')\nax.spines['right'].set_color('black')\nax.spines['top'].set_color('cyan')\nax.spines['bottom'].set_color('magenta')\n\n# Set the color of the y-axis spines\nax.spines['left'].set_color('yellow')\nax.spines['right'].set_color('black')\nax.spines['top'].set_color('cyan')\nax.spines['bottom'].set_color('magenta')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='yellow')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelcolor='cyan')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='magenta')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='yellow')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='black')\n\n# Set the color of the x-axis spines\nax.spines['left'].set_color('cyan')\nax.spines['right'].set_color('magenta')\nax.spines['top'].set_color('yellow')\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis spines\nax.spines['left'].set_color('cyan')\nax.spines['right'].set_color('magenta')\nax.spines['top'].set_color('yellow')\nax.spines['bottom'].set_color('black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='cyan')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='magenta')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelcolor='yellow')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='black')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='cyan')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='magenta')\n\n# Set the color of the x-axis spines\nax.spines['left'].set_color('yellow')\nax.spines['right'].set_color('black')\nax.spines['top'].set_color('cyan')\nax.spines['bottom'].set_color('magenta')\n\n# Set the color of the y-axis spines\nax.spines['left'].set_color('yellow')\nax.spines['right'].set_color('black')\nax.spines['top'].set_color('cyan')\nax.spines['bottom'].set_color('magenta')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='yellow')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelcolor='cyan')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='magenta')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='yellow')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='black')\n\n# Set the color of the x-axis spines\nax.spines['left'].set_color('cyan')\nax.spines['right'].set_color('magenta')\nax.spines['top'].set_color('yellow')\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis spines\nax.spines['left'].set_color('cyan')\nax.spines['right'].set_color('magenta')\nax.spines['top'].set_color('yellow')\nax.spines['bottom'].set_color('black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='cyan')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='magenta')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelcolor='yellow')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='black')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='cyan')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='magenta')\n\n# Set the color of the x-axis spines\nax.spines['left'].set_color('yellow')\nax.spines['right'].set_color('black')\nax.spines['top'].set_color('cyan')\nax.spines['bottom'].set_color('magenta')\n\n# Set the color of the y-axis spines\nax.spines['left'].set_color('yellow')\nax.spines['right'].set_color('black')\nax.spines['top'].set_color('cyan')\nax.spines['bottom'].set_color('magenta')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='yellow')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelcolor='cyan')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='magenta')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='yellow')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='black')\n\n# Set the color of the x-axis spines\nax.spines['left'].set_color('cyan')\nax.spines['right'].set_color('magenta')\nax.spines['top'].set_color('yellow')\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis spines\nax.spines['left'].set_color('cyan')\nax.spines['right'].set_color('magenta')\nax.spines['top'].set_color('yellow')\nax.spines['bottom'].set_color('black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='cyan')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='magenta')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelcolor='yellow')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='black')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='cyan')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='magenta')\n\n# Set the color of the x-axis spines\nax.spines['left'].set_color('yellow')\nax.spines['right'].set_color('black')\nax.spines['top'].set_color('cyan')\nax.spines['bottom'].set_color('magenta')\n\n# Set the color of the y-axis spines\nax.spines['left'].set_color('yellow')\nax.spines['right'].set_color('black')\nax.spines['top'].set_color('cyan')\nax.spines['bottom'].set_color('magenta')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='yellow')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelcolor='cyan')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='magenta')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='yellow')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='black')\n\n# Set the color of the x-axis spines\nax.spines['left'].set_color('cyan')\nax.spines['right'].set_color('magenta')\nax.spines['top'].set_color('yellow')\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis spines\nax.spines['left'].set_color('cyan')\nax.spines['right'].set_color('magenta')\nax.spines['top'].set_color('yellow')\nax.spines['bottom'].set_color('black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='cyan')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='magenta')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelcolor='yellow')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='black')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='cyan')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='magenta')\n\n# Set the color of the x-axis spines\nax.spines['left'].set_color('yellow')\nax.spines['right'].set_color('black')\nax.spines['top'].set_color('cyan')\nax.spines['bottom'].set_color('magenta')\n\n# Set the color of the y-axis spines\nax.spines['left'].set_color('yellow')\nax.spines['right'].set"}
{"file": "dataset/ori_500/area_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nx = [0, 1, 2, 3, 4, 5, 6, 7, 8]\ny_content = [1, 2, 3, 4, 5, 6, 7, 8, 9]\ny_organization = [2, 3, 4, 5, 6, 7, 8, 9, 10]\ny_language = [3, 4, 5, 6, 7, 8, 9, 10, 11]\n\n# Plot\nfig, ax = plt.subplots(figsize=(8.0, 4.0))\nax.plot(x, y_content, color='blue', label='Content')\nax.plot(x, y_organization, color='orange', label='Organization')\nax.plot(x, y_language, color='green', label='Language')\n\n# Fill between\nax.fill_between(x, y_content, color='lightblue')\nax.fill_between(x, y_content, y_language, color='lightgreen')\nax.fill_between(x, y_content, y_organization, color='orange')\nax.fill_between(x, y_language, y_organization, color='lightgreen')\n\n# Set title and labels\nax.set_title('Cumulative Performance Gain by Augmentation Level')\nax.set_xlabel('n')\nax.set_ylabel('Performance Gain (%)')\n\n# Show legend\nax.legend()\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/area_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nyears = [1950, 1960, 1970, 1980, 1990, 2000, 2010]\nafrica = [100, 200, 300, 400, 500, 600, 700]\namericas = [150, 250, 350, 450, 550, 650, 750]\nasia = [200, 300, 400, 500, 600, 700, 800]\neurope = [250, 350, 450, 550, 650, 750, 850]\noceania = [300, 400, 500, 600, 700, 800, 900]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data\nax.plot(years, africa, label='Africa', color='lightgreen')\nax.plot(years, americas, label='Americas', color='yellow')\nax.plot(years, asia, label='Asia', color='red')\nax.plot(years, europe, label='Europe', color='orange')\nax.plot(years, oceania, label='Oceania', color='blue')\n\n# Set the title and labels\nax.set_title('World Population')\nax.set_xlabel('Year')\nax.set_ylabel('Number of people (millions)')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the plot\nx = [0, 20, 40]\ny = [0.1, 0.3, 0.5]\ncolors = ['blue', 'green', 'red']\nwidth = 10\n\n# Create a bar chart\nplt.bar(x, y, width, color=colors)\n\n# Set the title and labels\nplt.title('Scores')\nplt.xlabel('Time')\nplt.ylabel('Score')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\ncategories = ['Which', 'What', 'How', 'Will', 'Are', 'Is', 'Choose', 'Select', 'Identify', 'Fill']\naccuracies = [55, 45, 35, 25, 15, 50, 40, 30, 20, 10]\n\n# Create a bar chart\nplt.figure(figsize=(8.0, 6.0))\nplt.bar(categories, accuracies, color='skyblue')\n\n# Set the title and labels\nplt.title('Model Accuracy by Category')\nplt.xlabel('Category')\nplt.ylabel('Accuracy (%)')\n\n# Rotate the category labels for better visibility\nplt.xticks(rotation=45)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_100.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the bar charts\nregion1 = [70, 60, 80, 90, 75]\nregion2 = [85, 75, 95, 80, 70]\nregion3 = [90, 80, 70, 60, 50]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(15, 5))\n\n# Plot the bar charts\nax.bar(range(len(region1)), region1, color='green', label='Region 1')\nax.bar(range(len(region2)), region2, color='blue', label='Region 2')\nax.bar(range(len(region3)), region3, color='red', label='Region 3')\n\n# Set the title and labels\nax.set_title('Average Monthly Sales by Product Across Regions')\nax.set_xlabel('Product')\nax.set_ylabel('Sales')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nlengths = [0, 10, 20, 30, 40]\nspearmans = [0.5, 0.5, 0.5, 0.5, 0.5]\n\n# Create a bar chart\nplt.bar(lengths, spearmans, color='blue')\n\n# Set the title and labels\nplt.title('Spearman Correlation by Length')\nplt.xlabel('Length')\nplt.ylabel('Spearman')\n\n# Set the y-axis limits\nplt.ylim(-1, 1)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\nbeauty_data = [2.2, 11.2, 14.3, 19.9]\nmovie_lens_data = [3.0, 5.1, 4.1, 3.1, 2.9]\nyelp_data = [-0.7, -0.5, -0.5, -0.5, -0.5]\n\n# Create a figure and axis\nfig, axes = plt.subplots(1, 3, figsize=(10, 4))\n\n# Plot for Beauty\naxes[0].bar(range(len(beauty_data)), beauty_data, color='blue')\naxes[0].set_title('Beauty')\naxes[0].set_xlabel('Products')\naxes[0].set_ylabel('Percentage')\n\n# Plot for MovieLens-1M\naxes[1].bar(range(len(movie_lens_data)), movie_lens_data, color='red')\naxes[1].set_title('MovieLens-1M')\naxes[1].set_xlabel('Products')\naxes[1].set_ylabel('Percentage')\n\n# Plot for Yelp\naxes[2].bar(range(len(yelp_data)), yelp_data, color='green')\naxes[2].set_title('Yelp')\naxes[2].set_xlabel('Products')\naxes[2].set_ylabel('Percentage')\n\n# Adjust layout\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nmodels = ['Bactrian-X', 'Lima-X', 'Bactrian-X', 'Lima-X']\nimprovement = [3.5, 2.3, 1.5, 0.8]\ncolors = ['blue', 'orange', 'green', 'brown', 'yellow']\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Plot bars\nfor i, model in enumerate(models):\n    ax.bar(model, improvement[i], color=colors[i % len(colors)])\n\n# Set title and labels\nax.set_title('ENDEFRRITES sampled')\nax.set_xlabel('Model')\nax.set_ylabel('Improvement [%]')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\npheme = ['GCN', 'RvNN', 'Hyphen', 'GET', 'WSDMS', 'DELL']\nf1_scores = [0.82, 0.84, 0.83, 0.86, 0.85, 0.89]\nllm_mis = [0.78, 0.80, 0.79, 0.81, 0.82, 0.83]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(7, 5))\n\n# Plot the F1 scores\nax.barh(pheme, f1_scores, color='blue')\n\n# Add labels and title\nax.set_xlabel('F1-score')\nax.set_title('Pheme')\n\n# Draw horizontal lines\nfor i in range(len(pheme)):\n    ax.axhline(y=i, color='black', linestyle='-')\n\n# Repeat for LLM-mis\nax2 = ax.twiny()\nax2.barh(pheme, llm_mis, color='gray')\n\n# Add labels and title\nax2.set_xlabel('LLM-mis')\nax2.set_title('LLM-mis')\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the bars\nbars = [1, 2, 3, 4, 5, 6]\nscores = [45, 40, 35, 30, 25, 20]\nlabels = ['1', '2', '3', '4', '5', '6']\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Plot the bars\nax.bar(bars, scores, color='blue')\n\n# Set the title of the plot\nax.set_title('Human Labeling and Agreement Bias Checking')\n\n# Set the x-axis label\nax.set_xlabel('Human Annotator')\n\n# Set the y-axis label\nax.set_ylabel('Scores')\n\n# Set the x-tick labels\nax.set_xticks(bars)\nax.set_xticklabels(labels)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_16.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the first plot\nx1 = [0, 100, 200, 300, 400, 500, 600, 700, 800]\ny1 = [0, 0, 0, 0, 0, 0, 0, 0, 0]\ncolors1 = ['blue', 'cyan', 'yellow', 'red', 'pink', 'orange', 'green', 'purple', 'brown']\n\n# Data for the second plot\nx2 = [0, 100, 200, 300, 400, 500, 600, 700, 800]\ny2 = [0, 0, 0, 0, 0, 0, 0, 0, 0]\ncolors2 = ['blue', 'cyan', 'yellow', 'red', 'pink', 'orange', 'green', 'purple', 'brown']\n\n# Create the first plot\nfig, ax1 = plt.subplots(figsize=(8.0, 6.0))\nax1.plot(x1, y1, color='blue')\nax1.set_xlabel('Count')\nax1.set_ylabel('Role', color='blue')\nax1.tick_params(axis='y', labelcolor='blue')\n\n# Create the second plot\nax2 = ax1.twinx()\nax2.plot(x2, y2, color='cyan')\nax2.set_ylabel('Role', color='cyan')\nax2.tick_params(axis='y', labelcolor='cyan')\n\n# Display the plots\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_17.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ntasks = ['ARC', 'MMLU', 'TruthfulQa', 'Winograde', 'Average']\naccuracies = [53.0, 51.3, 56.4, 56.4, 53.1]\ncolors = ['skyblue', 'lightgreen', 'pink', 'salmon', 'pink']\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(10.0, 4.0))\nbars = ax.bar(tasks, accuracies, color=colors)\n\n# Add labels and title\nax.set_xlabel('Tasks')\nax.set_ylabel('Accuracy (%)')\nax.set_title('Task Accuracy')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_18.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Set the background color of the plot\nax.set_facecolor('lightblue')\n\n# Set the x-axis limits\nax.set_xlim(35, 75)\n\n# Set the y-axis limits\nax.set_ylim(40, 70)\n\n# Set the x-axis ticks\nax.set_xticks([40, 50, 60, 70])\n\n# Set the y-axis ticks\nax.set_yticks([45, 55, 65])\n\n# Set the x-axis label\nax.set_xlabel('Time (seconds)')\n\n# Set the y-axis label\nax.set_ylabel('Speed (mph)')\n\n# Set the title of the plot\nax.set_title('Car Performance')\n\n# Define the car models\ncar_models = ['GSM8K', 'MNLI', 'race@High']\n\n# Define the colors for each car model\ncolors = ['blue', 'cyan', 'darkblue']\n\n# Define the performance data for each car model\nperformance_data = [\n    [45, 50, 55, 60],\n    [50, 55, 60, 65],\n    [55, 60, 65, 70]\n]\n\n# Plot the performance data for each car model\nfor i, model in enumerate(car_models):\n    ax.plot(performance_data[i], color=colors[i], label=model)\n\n# Add a legend to the plot\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_19.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the bar chart\nlabels = ['DLMA-7B VS. LLAMA-7B', 'DLMA-7B VS. CD-7B', 'DLMA-7B VS. RLAIF-7B', 'DLMA-7B VS. RLCD-7B', 'DLMA-13B VS. LLAMA-13B', 'DLMA-13B VS. CD-13B', 'DLMA-13B VS. RLAIF-13B', 'DLMA-13B VS. RLCD-13B']\nvalues = [60.2, 60.2, 46.8, 34.7, 62.5, 62.5, 49.2, 30.9]\ncolors = ['green', 'blue', 'red', 'orange']\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Create a bar chart with the data\nbars = ax.bar(labels, values, color=colors)\n\n# Add labels and title\nax.set_xlabel('Match')\nax.set_ylabel('Win Percentage')\nax.set_title('DLMA VS. Baseline Methods On HHH (Evaluated by GPT4)')\n\n# Add value labels on top of the bars\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 1), ha='center', va='bottom')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plot\ntime = [0, 10, 20, 30, 40]\ngait = [0.5, 0.7, 0.8, 0.9, 0.95]\n\n# Create a bar chart\nplt.bar(time, gait, color='green')\n\n# Add labels and title\nplt.xlabel('Time (s)')\nplt.ylabel('Gait Distribution (%)')\nplt.title('Gait Distribution Over Time: Policy ORC=111')\n\n# Add colored rectangles for each gait type\nfor i in range(len(time)):\n    if i == 0:\n        plt.bar(time[i], gait[i], color='green', label='trot')\n    elif i == 1:\n        plt.bar(time[i], gait[i], color='red', label='pace')\n    elif i == 2:\n        plt.bar(time[i], gait[i], color='purple', label='bound')\n    elif i == 3:\n        plt.bar(time[i], gait[i], color='brown', label='pronk')\n    elif i == 4:\n        plt.bar(time[i], gait[i], color='gray', label='transition')\n\n# Show legend\nplt.legend()\n\n# Set figure size\nfig = plt.gcf()\nfig.set_size_inches(6.0, 3.0)\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_20.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nbrands = ['LIMA', 'Vicuna', 'Koala', 'Wizardlm', 'Self-Instruct']\nwins = [68, 82, 68, 72, 68]\ntie = [24, 15, 22, 19, 23]\nag_kl = [8, 3, 10, 9, 9]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Plot bars\nbars = ax.bar(brands, wins, color='blue')\n\n# Add labels and title\nax.set_xlabel('Brands')\nax.set_ylabel('Wins')\nax.set_title('Brand Performance')\n\n# Add text annotations\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 2), ha='center', va='bottom')\n\n# Add a legend\nax.legend(['AP-1kL wins', 'Tie', 'AG-1k wins'], loc='upper right')\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_21.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the first bar chart\nx = [60, 40, 20, 0]\ny = [14.8, 29.6, 29.6, 18.5, 8.4, 9.0]\ncolors = ['red', 'orange', 'gray', 'blue', 'blue', 'blue']\nlabels = ['Strong Disagree', 'Disagree', 'Neutral', 'Agree', 'Strong Agree']\n\n# Data for the second bar chart\nx2 = [60, 40, 20, 0]\ny2 = [19.0, 26.2, 35.7, 9.5, 9.5, 9.5]\ncolors2 = ['red', 'orange', 'gray', 'blue', 'blue', 'blue']\nlabels2 = ['Strong Disagree', 'Disagree', 'Neutral', 'Agree', 'Strong Agree']\n\n# Data for the third bar chart\nx3 = [60, 40, 20, 0]\ny3 = [9.5, 26.2, 38.1, 14.0, 14.0, 9.5]\ncolors3 = ['red', 'orange', 'gray', 'blue', 'blue', 'blue']\nlabels3 = ['Strong Disagree', 'Disagree', 'Neutral', 'Agree', 'Strong Agree']\n\n# Data for the fourth bar chart\nx4 = [60, 40, 20, 0]\ny4 = [11.9, 19.0, 33.3, 14.3, 21.4, 9.5]\ncolors4 = ['red', 'orange', 'gray', 'blue', 'blue', 'blue']\nlabels4 = ['Strong Disagree', 'Disagree', 'Neutral', 'Agree', 'Strong Agree']\n\n# Create a figure and a set of subplots\nfig, axs = plt.subplots(1, 2, figsize=(10.0, 6.0))\n\n# Plot the first bar chart\naxs[0].barh(x, y, color=colors)\naxs[0].set_title('Eye Movement')\naxs[0].set_xlabel('Percentage')\naxs[0].set_yticks(x)\naxs[0].set_yticklabels(labels)\n\n# Plot the second bar chart\naxs[1].barh(x2, y2, color=colors2)\naxs[1].set_title('Brainwave')\naxs[1].set_xlabel('Percentage')\naxs[1].set_yticks(x2)\naxs[1].set_yticklabels(labels2)\n\n# Plot the third bar chart\naxs[0].barh(x3, y3, color=colors3)\naxs[0].set_title('Reliability')\naxs[0].set_xlabel('Percentage')\naxs[0].set_yticks(x3)\naxs[0].set_yticklabels(labels3)\n\n# Plot the fourth bar chart\naxs[1].barh(x4, y4, color=colors4)\naxs[1].set_title('Privacy')\naxs[1].set_xlabel('Percentage')\naxs[1].set_yticks(x4)\naxs[1].set_yticklabels(labels4)\n\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_22.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\nx = [0.5, 0.6, 0.7, 0.8, 0.9, 0.95, 1.0, 1.05, 1.1, 1.15, 1.2, 1.25]\ny1 = [-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6]\ny2 = [-10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1]\ny3 = [-15, -14, -13, -12, -11, -10, -9, -8, -7, -6, -5, -4]\ny4 = [-20, -19, -18, -17, -16, -15, -14, -13, -12, -11, -10, -9]\ny5 = [-25, -24, -23, -22, -21, -20, -19, -18, -17, -16, -15, -14]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 10.0))\n\n# Plot the data\nax.plot(x, y1, color='blue')\nax.plot(x, y2, color='#B0C4DE')\nax.plot(x, y3, color='#B0C4DE')\nax.plot(x, y4, color='#B0C4DE')\nax.plot(x, y5, color='#B0C4DE')\n\n# Set the title and labels\nax.set_title('Rate of Gain Change (%)')\nax.set_xlabel('Brightness')\nax.set_ylabel('Rate of Gain Change (%)')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_23.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nbrands = ['GPT4', 'GPT-few-shot', 'GPT3.5', 'StarCoder', 'Code Llama', 'NCL']\nratings = [3.2, 2.8, 2.5, 2.7, 2.9, 2.1]\ncolors = ['blue', 'orange', 'red', 'pink', 'green', 'purple']\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(9, 5))\n\n# Plot bars\nfor i, brand in enumerate(brands):\n    ax.barh(brand, ratings[i], color=colors[i])\n\n# Set title and labels\nax.set_title('Ratings of Language Models on a Scale from 1-4')\nax.set_xlabel('Ratings')\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_24.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nmodels = ['Majority', 'Flan-T5', 'GPT-3.5', 'GPT-4', 'Wizard13b', 'Vicuna13b', 'Mistral17b']\naccuracies = [0.302, 0.601, 0.468, 0.653, 0.384, 0.379, 0.364]\n\n# Create a bar chart\nplt.figure(figsize=(8.0, 4.0))\nplt.bar(models, accuracies, color='green')\n\n# Set the title and labels\nplt.title('Model Accuracy')\nplt.xlabel('Models')\nplt.ylabel('Accuracy')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_25.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the plots\nproducts = ['Alpaca-52k+', 'Alpaca-1k+', 'Lima-1k+', 'Lima-1k*']\nsales = [78.8, 67.4, 44.2, 59.8]\nlosses = [11.7, 18.1, 33.9, 21.0]\nrevenue = [9.5, 14.5, 19.2, 19.2]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 4.0))\n\n# Plot the bars\nax.barh(products, sales, color='blue', label='Sales')\nax.barh(products, losses, left=sales, color='orange', label='Losses')\nax.barh(products, revenue, left=[s+l for s, l in zip(sales, losses)], color='lightblue', label='Revenue')\n\n# Set the title and labels\nax.set_title('GPT4-as-a-judge')\nax.set_xlabel('Values')\nax.set_ylabel('Products')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_26.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nemotions = ['Ang', 'Cntr', 'Dis', 'Fea', 'Joy', 'Ntr', 'Sad', 'Sur']\nvalues = [100, 200, 300, 400, 500, 600, 700, 800]\n\n# Create a bar chart\nplt.figure(figsize=(6, 4))\nplt.bar(emotions, values, color='red')\n\n# Set the title and labels\nplt.title('Emotion Values')\nplt.xlabel('Emotions')\nplt.ylabel('Values')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_27.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nmodels = ['GPT-4V', 'RoboCodeX']\nsuccess_rates = [0.8, 0.7]\noccupancy_errors = [0.2, 0.1]\ngrounding_errors = [0.1, 0.1]\ngripper_collision_errors = [0.1, 0.1]\ntrajectory_optimization_errors = [0.1, 0.1]\ngrasping_failed_errors = [0.1, 0.1]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 3.0))\n\n# Plot bars\nax.bar(models, success_rates, color='green', label='Success')\nax.bar(models, occupancy_errors, bottom=success_rates, color='orange', label='Occupancy Error')\nax.bar(models, grounding_errors, bottom=[i+j for i,j in zip(success_rates, occupancy_errors)], color='gray', label='Grounding Error')\nax.bar(models, gripper_collision_errors, bottom=[i+j+k for i,j,k in zip(success_rates, occupancy_errors, grounding_errors)], color='yellow', label='Gripper collision')\nax.bar(models, trajectory_optimization_errors, bottom=[i+j+k+l for i,j,k,l in zip(success_rates, occupancy_errors, grounding_errors, gripper_collision_errors)], color='blue', label='Trajectory optimization Error')\nax.bar(models, grasping_failed_errors, bottom=[i+j+k+l+m for i,j,k,l,m in zip(success_rates, occupancy_errors, grounding_errors, gripper_collision_errors, trajectory_optimization_errors)], color='purple', label='Grasping failed')\n\n# Set labels and title\nax.set_xlabel('Percentage of total trials')\nax.set_ylabel('Models')\nax.set_title('Model Performance Metrics')\nax.legend()\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_28.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 5.0))\n\n# Set the title of the plot\nax.set_title('Transmission Delay (ms)')\n\n# Set the x-axis label\nax.set_xlabel('Datasets')\n\n# Set the y-axis label\nax.set_ylabel('Transmission Delay (ms)')\n\n# Define the data for the bar chart\nx = ['VOC 2012', 'COCO 2017']\ny = [3.5, 2.5]\n\n# Create a bar chart with the data\nbars = ax.bar(x, y, color='blue')\n\n# Add labels to each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 1), ha='center', va='bottom')\n\n# Set the limits of the y-axis\nax.set_ylim(0, 4)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_29.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Set the title of the plot\nax.set_title('PDEs')\n\n# Set the x-axis labels\nax.set_xlabel('PDEs')\nax.set_xticks([0, 1, 2, 3, 4])\nax.set_xticklabels(['Wave', 'Diffusion', 'Heat', 'Poission', 'Burgers'])\n\n# Set the y-axis labels\nax.set_ylabel('log L2')\nax.set_yticks([1.0, 1.5, 2.0, 2.5, 3.0, 3.5, 4.0])\nax.set_yticklabels(['1e-1', '1e-2', '1e-3', '1e-4', '1e-5', '1e-6', '1e-7'])\n\n# Set the color bar\ncbar = fig.colorbar(ax.images[0], ax=ax)\ncbar.set_label('Color Bar')\n\n# Set the color map\ncmap = plt.cm.viridis\n\n# Set the data for the plot\ndata = [\n    [1.0, 1.5, 2.0, 2.5, 3.0],\n    [1.1, 1.6, 2.1, 2.6, 3.1],\n    [1.2, 1.7, 2.2, 2.7, 3.2],\n    [1.3, 1.8, 2.3, 2.8, 3.3],\n    [1.4, 1.9, 2.4, 2.9, 3.4]\n]\n\n# Plot the data\nim = ax.imshow(data, cmap=cmap)\n\n# Add a color bar to the plot\ncbar = fig.colorbar(im, ax=ax)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\nmodels = ['w/o DaQNR', 'w/o CPRN', 'w/o QCN', 'Full model']\nlive_values = [0.975, 0.975, 0.975, 0.975]\nciq_values = [0.975, 0.975, 0.975, 0.975]\ntid2013_values = [0.975, 0.975, 0.975, 0.975]\nlive_m_values = [0.975, 0.975, 0.975, 0.975]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 3))\n\n# Plot the data\nax.bar(models, live_values, color='blue')\nax.bar(models, ciq_values, bottom=live_values, color='orange')\nax.bar(models, tid2013_values, bottom=[x+y for x,y in zip(live_values, ciq_values)], color='tan')\nax.bar(models, live_m_values, bottom=[x+y+z for x,y,z in zip(live_values, ciq_values, tid2013_values)], color='green')\n\n# Set the title and labels\nax.set_title('Models')\nax.set_xlabel('Model')\nax.set_ylabel('Metric Values')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_30.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nproducts = ['Mixtral-8x7b-Instruct', 'GPT-3.5', 'GPT-4']\npass_rates = [6.11, 28.33, 31.11]\nzero_shot = [99.44, 85.0, 99.44]\none_shot = [60.56, 60.56, 60.56]\nds_agent = [42.78, 42.78, 42.78]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Plot bars for pass rates\nax.bar(products, pass_rates, color='purple')\n\n# Add labels and title\nax.set_xlabel('Products')\nax.set_ylabel('One Pass Rate (%)')\nax.set_title('One Pass Rate by Product')\n\n# Add legend\nlegend_labels = ['Zero-shot', 'One-shot', 'DS-Agent']\nlegend_handles = [plt.Rectangle((0,0),1,1, color=c) for c in ['red', 'blue', 'pink']]\nax.legend(legend_handles, legend_labels)\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_31.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ncategories = ['LMM-based vs. TPLM-based', 'LMM-based vs. Template', 'LMM-based vs. Markdown', 'TPLM-based vs. Template', 'TPLM-based vs. Markdown', 'Markdown vs. Template']\nwin_rates = [17.0, 20.0, 25.0, 30.5, 31.5, 19.5]\ntie_rates = [54.0, 67.5, 56.5, 57.5, 54.5, 61.0]\nloss_rates = [29.0, 12.5, 18.5, 12.0, 14.0, 19.5]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot bars for win rates\nax.bar(categories, win_rates, color='skyblue', label='Win')\n\n# Plot bars for tie rates\nax.bar(categories, tie_rates, bottom=win_rates, color='lightgreen', label='Tie')\n\n# Plot bars for loss rates\nax.bar(categories, loss_rates, bottom=[x + y for x, y in zip(win_rates, tie_rates)], color='salmon', label='Loss')\n\n# Set labels and title\nax.set_xlabel('Categories')\nax.set_ylabel('Percentage')\nax.set_title('Comparison of Win, Tie, and Loss Rates')\nax.legend()\n\n# Set x-axis limits\nax.set_xlim(0, len(categories))\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_32.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nspecies = ['Combat Spider', 'Milky Cow', 'Shear Sheep']\nprobabilities = [0.72, 0.74, 0.56]\n\n# Create bar chart\nfig, ax = plt.subplots(figsize=(6.0, 2.0))\nbars = ax.bar(species, probabilities, color='blue')\n\n# Add labels and title\nax.set_xlabel('Species')\nax.set_ylabel('Probability of Improvement')\nax.set_title('Probability of Improvement over VLM Image Encoder Baseline Returns')\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_33.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nsteps = [0, 1, 2, 3, 4]\navg_following_rate = [100.0, 60.0, 27.7, 100.0, 91.7]\nfollowing_error_rate = [10.0, 83.3, 48.1, 63.4, 60.8]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Plot bars for each step\nfor i in range(len(steps)):\n    ax.bar(steps[i], avg_following_rate[i], color='blue')\n    ax.bar(steps[i], following_error_rate[i], bottom=avg_following_rate[i], color='green')\n\n# Set labels and title\nax.set_xlabel('Steps')\nax.set_ylabel('Scores')\nax.set_title('Instruction Following Results In Different Steps (gpt-3.5-turbo)')\n\n# Set x-axis ticks\nax.set_xticks(steps)\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_34.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the bar chart\ncategories = ['coreutils', 'scp', 'tar', 'exim', 'menc.c', 'niginx', 'memc', 'bzip2', 'liba', 'gcc', 'gobmk', 'h264', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', 'libm', '"}
{"file": "dataset/ori_500/bar_35.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nbrands = ['Random', 'Llama2', 'Mistral']\nscores = [5.52, 5.53, 5.84]\nmt_bench_scores = [6.57, 6.75, 6.81]\n\n# Create a figure and axis\nfig, ax1 = plt.subplots(figsize=(8.0, 5.0))\n\n# Plot the scores\ncolor = 'tab:blue'\nax1.set_xlabel('Brands')\nax1.set_ylabel('Scores', color=color)\nax1.bar(brands, scores, color=color)\nax1.tick_params(axis='y', labelcolor=color)\n\n# Create a second y-axis for MT-Bench scores\nax2 = ax1.twinx()  \ncolor = 'tab:red'\nax2.set_ylabel('MT-Bench Score', color=color)  \nax2.bar(brands, mt_bench_scores, color=color, alpha=0.5)\nax2.tick_params(axis='y', labelcolor=color)\n\nfig.tight_layout()  \nplt.show()\n```"}
{"file": "dataset/ori_500/bar_36.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nx = [100, 1000]\ny = [49.98, 49.63]\ncolors = ['blue', 'blue']\nwidths = [50, 50]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.61, 5.23))\n\n# Plot the bars\nfor i in range(len(x)):\n    ax.barh(y[i], widths[i], left=x[i], color=colors[i])\n\n# Set the title and labels\nax.set_title('Random Sampling')\nax.set_xlabel('Number of Clusters')\nax.set_ylabel('MMSE')\n\n# Set the x-axis limits\nax.set_xlim(0, 1000)\n\n# Set the y-axis limits\nax.set_ylim(47, 53)\n\n# Set the grid\nax.grid(True)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_37.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nmovies = ['ResNet18', 'AlexNet', 'ResNet50']\nspeedups = [7.4, 6.1, 4.3]\nperturbations = [0, 50, 48, 75, 68, 87.5, 78]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(12, 4))\n\n# Plot bars for speedup\nax.bar(movies, speedups, color='skyblue')\n\n# Plot lines for perturbation\nfor i, p in enumerate(perturbations):\n    ax.plot([i, i], [0, p], color='gray', linestyle='--')\n\n# Set labels and title\nax.set_xlabel('Movies')\nax.set_ylabel('Speedup')\nax.set_title('Perturbation')\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_38.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the plot\nx = ['CL-7b', 'CL-13b', 'CL-34b', 'DS-6.7b', 'DS-33b', 'SC']\ny = [20, 40, 60, 80, 90, 100]\ncolors = ['green', 'blue', 'red', 'purple', 'orange', 'pink']\n\n# Create a bar chart\nplt.bar(x, y, color=colors)\n\n# Set the title and labels\nplt.title('LeetCode, DS-6.7b')\nplt.xlabel('Problems')\nplt.ylabel('Accuracies')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_39.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ndata = {\n    'Recost (1% wins)': [53, 80, 116, 99, 179],\n    'Tie': [6, 33, 49, 50, 23],\n    'Alpacas wins': [21, 67, 53, 103, 98]\n}\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Plot bars\nfor i, (label, values) in enumerate(data.items()):\n    ax.barh(range(len(values)), values, left=[sum(values[:j]) for j in range(len(values))], height=0.8, label=label)\n\n# Set labels and title\nax.set_xlabel('Wins')\nax.set_title('Winstreaks by Player')\nax.legend()\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nbrands = ['CometKiwi', 'LaBSE', 'IF', 'Max', 'Ppl', 'STARE', 'Wass Combo', 'ALTI+']\nsales = [35.15, 26.86, 26.08, 22.09, 20.67, 19.08, 17.06, 15.15]\naggregations = [42.5, 40.38, 36.63, 35.15, 33.9, 32.9, 31.9, 30.86]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Plot the bars\nbars = ax.bar(brands, sales, color='saddlebrown')\n\n# Add labels and title\nax.set_xlabel('Brands')\nax.set_ylabel('Sales')\nax.set_title('FPR@90TPR on Guerrieri et al. 2022')\n\n# Add a horizontal line at the median\nmedian = sum(sales) / len(sales)\nax.axhline(y=median, color='r', linestyle='-')\n\n# Add a vertical line at the median\nmedian = len(brands) // 2\nax.axvline(x=median, color='g', linestyle='-')\n\n# Add a rectangle around the median\nrect = plt.Rectangle((median - 0.5, 0), 1, max(sales), fill=False, edgecolor='blue', linewidth=2)\nax.add_patch(rect)\n\n# Add a rectangle around the median\nrect = plt.Rectangle((median - 0.5, 0), 1, max(aggregations), fill=False, edgecolor='green', linewidth=2)\nax.add_patch(rect)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_40.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ncategories = ['Literal', 'Assignment', 'Operator', 'Comment', 'Operation', 'Exception Handling', 'Method Call', 'External Variable/Method', 'Return', 'Variable', 'External Class', 'Argument', 'Conditional Block', 'Loop', 'Conditional Statement', 'Variable Declaration', 'Method Declaration', 'Parameter']\nvalues = [120, 90, 80, 70, 60, 50, 40, 30, 20, 10, 5, 3, 2, 1, 0.5, 0.3, 0.1]\n\n# Create a bar chart\nplt.figure(figsize=(10, 5))\nplt.bar(categories, values, color='skyblue')\nplt.xlabel('Semantic Category')\nplt.ylabel('Difference (%)')\nplt.title('Relative Difference in Machine vs. Human Focus on Semantic Categories')\nplt.xticks(rotation=90)\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_41.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\nx = [5, 10, 20]\ny1 = [66.3, 61.9, 53.8]\ny2 = [10.1, 13.6, 13.7]\ny3 = [49.3, 45.7, 41.6]\ny4 = [36.3, 31.5, 0]\ny5 = [48.0, 42.6, 36.5]\ny6 = [43.8, 40.2, 30.6]\ny7 = [22.3, 25.9, 22.5]\ny8 = [64.7, 56.8, 43.4]\ny9 = [49.5, 40.2, 36.8]\ny10 = [30.6, 22.3, 25.9]\ny11 = [43.4, 40.2, 30.6]\ny12 = [22.3, 25.9, 22.5]\ny13 = [64.7, 56.8, 43.4]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(14, 4))\n\n# Plot the data\nax.plot(x, y1, label='Truthful: Misleading = 2:0', color='blue')\nax.plot(x, y2, label='Truthful: Misleading = 2:1', color='red')\nax.plot(x, y3, label='Truthful: Misleading = 2:2', color='blue')\nax.plot(x, y4, label='Misleading: Misleading = 2:0', color='red')\nax.plot(x, y5, label='Misleading: Misleading = 2:1', color='blue')\nax.plot(x, y6, label='Misleading: Misleading = 2:2', color='red')\nax.plot(x, y7, label='Truthful: Misleading = 1:2', color='blue')\nax.plot(x, y8, label='Misleading: Misleading = 1:2', color='red')\nax.plot(x, y9, label='Truthful: Misleading = 0:2', color='blue')\nax.plot(x, y10, label='Misleading: Misleading = 0:2', color='red')\nax.plot(x, y11, label='Truthful: Misleading = 0:1', color='blue')\nax.plot(x, y12, label='Misleading: Misleading = 0:1', color='red')\nax.plot(x, y13, label='Truthful: Misleading = 0:0', color='blue')\n\n# Set the limits of the axes\nax.set_xlim(0, 25)\nax.set_ylim(-80, 80)\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_42.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the bar chart\nbrands = ['PROST', 'ARC-easy', 'COMVE', 'OpenBookQA', 'SCIQ', 'NumSense', 'CoQA', 'ComQA2.0', 'Comqrtz', 'CyC', 'Winogventi', 'Com2Sense', 'CODAH', 'WSC', 'ARC-challenge', 'SocialIQA', 'HellaSWAG-wikiHow', 'HellaSWAG-elem', 'Winogrande', 'PIQA', 'QuaRel', 'QuaCT', 'SC', 'alphaNLI', 'SWAG']\nda_acc_values = [3.4, 3.2, 3.1, 3.0, 2.9, 2.8, 2.7, 2.6, 2.5, 2.4, 2.3, 2.2, 2.1, 2.0, 1.9, 1.8, 1.7, 1.6, 1.5, 1.4, 1.3, 1.2, 1.1, 1.0]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Plot the bar chart\nax.bar(brands, da_acc_values, color='blue')\n\n# Set the title of the plot\nax.set_title('Model = Vicuna')\n\n# Set the x-axis label\nax.set_xlabel('Brand (with Acc - Out of Rules)')\n\n# Set the y-axis label\nax.set_ylabel('\u0394Acc (with Acc - Out of Rules)')\n\n# Set the color of the x-axis labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis labels\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(brands, rotation=90)\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(da_acc_values, color='blue')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='blue')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='blue')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(brands, rotation=90)\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(da_acc_values, color='blue')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='blue')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='blue')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(brands, rotation=90)\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(da_acc_values, color='blue')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='blue')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='blue')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(brands, rotation=90)\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(da_acc_values, color='blue')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='blue')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='blue')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(brands, rotation=90)\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(da_acc_values, color='blue')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='blue')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='blue')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(brands, rotation=90)\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(da_acc_values, color='blue')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='blue')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='blue')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(brands, rotation=90)\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(da_acc_values, color='blue')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='blue')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='blue')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(brands, rotation=90)\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(da_acc_values, color='blue')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='blue')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='blue')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(brands, rotation=90)\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(da_acc_values, color='blue')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='blue')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='blue')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(brands, rotation=90)\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(da_acc_values, color='blue')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='blue')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='blue')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(brands, rotation=90)\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(da_acc_values, color='blue')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='blue')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='blue')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(brands, rotation=90)\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(da_acc_values, color='blue')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='blue')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='blue')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(brands, rotation=90)\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(da_acc_values, color='blue')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='blue')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='blue')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(brands, rotation=90)\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(da_acc_values, color='blue')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='blue')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='blue')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(brands, rotation=90)\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(da_acc_values, color='blue')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='blue')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='blue')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(brands, rotation=90)\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(da_acc_values, color='blue')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='blue')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='blue')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(brands, rotation=90)\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(da_acc_values, color='blue')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='blue')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='blue')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(brands, rotation=90)\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(da_acc_values, color='blue')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='blue')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='blue')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(brands, rotation=90)\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(da_acc_values, color='blue')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='blue')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='blue')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(brands, rotation=90)\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(da_acc_values, color='blue')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='blue')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='blue')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(brands, rotation=90)\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(da_acc_values, color='blue')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='blue')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='blue')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(brands, rotation=90)\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(da_acc_values, color='blue')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='blue')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='blue')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(brands, rotation=90)\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(da_acc_values, color='blue')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='blue')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='blue')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(brands, rotation=90)\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(da_acc_values, color='blue')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='blue')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='blue')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(brands, rotation=90)\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(da_acc_values, color='blue')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='blue')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='blue')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(brands, rotation=90)\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(da_acc_values, color='blue')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='blue')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='blue')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(brands, rotation=90)\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(da_acc_values, color='blue')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='blue')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='blue')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(brands, rotation=90)\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(da_acc_values, color='blue')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='blue"}
{"file": "dataset/ori_500/bar_43.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\ndata = {\n    'MedMCQA': [48.1, 57.2, 59.3, 64.9, 72.3, 79.1, 54.3],\n    'MedQA (USMLE)': [56.0, 62.2, 64.4, 64.4, 67.6, 86.5, 90.2],\n    'PubMedQA': [74.4, 75.8, 76.8, 77.4, 79.0, 81.8, 82.0, 88.0, 90.2, 93.2, 95.2, 98.0, 77.7]\n}\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Plot the data\nfor i, (key, value) in enumerate(data.items()):\n    ax.barh(i, value, color='brown')\n\n# Set the labels and title\nax.set_yticks(range(len(data)))\nax.set_yticklabels(list(data.keys()))\nax.set_xlabel('Performance Score (%)')\nax.set_title('Performance Scores of Different Models')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_44.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ncategories = ['AFAN', 'AFBE', 'AFCE', 'AFEO', 'AFAF', 'AFPK', 'AFPO', 'AFPP', 'AFPR', 'AFSC', 'AFSL', 'AFSR', 'AFTH', 'AFVT', 'AFWS', 'DAH', 'IC', 'SS']\nvalues = [45, 42, 39, 36, 33, 30, 27, 24, 21, 18, 15, 12, 9, 6, 3, 0, 0, 0]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot bars\nbars = ax.bar(categories, values, color='blue')\n\n# Add value labels\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 1), ha='center', va='bottom')\n\n# Set title and labels\nax.set_title('Category Values')\nax.set_xlabel('Categories')\nax.set_ylabel('Values')\n\n# Rotate x-axis labels for better visibility\nplt.xticks(rotation=45)\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_45.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nx = [3, 5, 7, 9, 11]\ny = [2.5, 4.5, 6.5, 8.5, 10.5]\ncolors = ['pink', 'red', 'lightblue', 'skyblue', 'darkblue']\nlabels = ['LLAMA-Default', 'LLAMA-HAG', 'Vicuna-Default', 'Vicuna-HAG']\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 7.0))\n\n# Plot the data\nfor i in range(len(x)):\n    ax.plot([x[i], x[i]], [0, y[i]], color=colors[i], label=labels[i])\n\n# Set the limits of the axes\nax.set_xlim(2, 12)\nax.set_ylim(-4, 11)\n\n# Set the labels of the axes\nax.set_xlabel('Num of Constraint Words')\nax.set_ylabel('Score')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_46.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nbrands = ['Lavila', 'Video-LLaMA', 'BLIP1', 'BLIP2 Model', 'LLaVA', 'OSCaR', 'GPT4V']\nsales = [0.0, 0.71, 4.64, 4.64, 31.79, 73.93, 82.5]\n\n# Create a bar chart\nplt.figure(figsize=(10, 6))\nplt.bar(brands, sales, color='skyblue')\nplt.xlabel('Brands')\nplt.ylabel('Sales (%)')\nplt.title('Human Study')\nplt.xticks(rotation=45)\nplt.grid(axis='y')\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_47.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the first chart\nlabels = ['HH', 'Reddit', 'IMDB', 'AVG']\nvalues = [22, 25, 30, 26]\ncolors = ['red', 'orange', 'pink', 'brown']\n\n# Data for the second chart\nlabels2 = ['HH', 'Reddit', 'IMDB', 'AVG']\nvalues2 = [40, 30, 50, 40]\ncolors2 = ['red', 'orange', 'pink', 'brown']\n\n# Data for the third chart\nlabels3 = ['HH', 'Reddit', 'IMDB', 'AVG']\nvalues3 = [50, 55, 60, 50]\ncolors3 = ['red', 'orange', 'pink', 'brown']\n\n# Data for the fourth chart\nlabels4 = ['HH', 'Reddit', 'IMDB', 'AVG']\nvalues4 = [20, 42, 50, 40]\ncolors4 = ['red', 'orange', 'pink', 'brown']\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(13, 6))\n\n# Plot the first chart\nax.bar(labels, values, color=colors)\nax.set_title('COPR v.s. Golden (Human Eval)')\nax.set_xlabel('Model')\nax.set_ylabel('Score')\n\n# Plot the second chart\nax2 = fig.add_subplot(2, 2, 2)\nax2.bar(labels2, values2, color=colors2)\nax2.set_title('COPR v.s. Golden (GPT-4 Eval)')\nax2.set_xlabel('Model')\nax2.set_ylabel('Score')\n\n# Plot the third chart\nax3 = fig.add_subplot(2, 2, 3)\nax3.bar(labels3, values3, color=colors3)\nax3.set_title('COPR v.s. DPO-ER (Human Eval)')\nax3.set_xlabel('Model')\nax3.set_ylabel('Score')\n\n# Plot the fourth chart\nax4 = fig.add_subplot(2, 2, 4)\nax4.bar(labels4, values4, color=colors4)\nax4.set_title('COPR v.s. DPO-ER (GPT-4 Eval)')\nax4.set_xlabel('Model')\nax4.set_ylabel('Score')\n\n# Add a legend\nfig.legend(['Win', 'Tie', 'Loss'], loc='upper right')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_48.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\naccuracy_data = [0.32, 0.34, 0.36, 0.38, 0.40]\nunfairness_data = [0.12, 0.14, 0.16, 0.18, 0.20]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(5.0, 6.0))\n\n# Plot the data\nax.bar(range(len(accuracy_data)), accuracy_data, color='blue', label='Accuracy')\nax.bar(range(len(unfairness_data)), unfairness_data, color='red', label='Unfairness')\n\n# Set the title and labels\nax.set_title('Accuracy vs Unfairness')\nax.set_xlabel('Data Points')\nax.set_ylabel('Values')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_49.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nresolutions = [224, 128, 64, 32]\naccuracies = [29, 60, 29, 87]\ncolors = ['blue', 'orange', 'pink', 'cyan']\nbar_width = 0.5\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot bars\nfor i, resolution in enumerate(resolutions):\n    ax.bar(resolution, accuracies[i], width=bar_width, color=colors[i])\n\n# Set title and labels\nax.set_title('Top-1 Accuracy by Resolution and Method')\nax.set_xlabel('Resolutions')\nax.set_ylabel('Top-1 Acc (%)')\n\n# Add text annotations for each bar\nfor i, resolution in enumerate(resolutions):\n    ax.text(resolution, accuracies[i] + 1, str(accuracies[i]) + '%', ha='center', va='bottom')\n\n# Add a horizontal line at the top of the plot\nax.axhline(y=80, color='b', linestyle='-')\n\n# Add a vertical line at the bottom of the plot\nax.axvline(x=0, color='b', linestyle='-')\n\n# Add a red arrow pointing down\nax.annotate('', xy=(32, 87), xytext=(32, 180),\n            arrowprops=dict(facecolor='red', shrink=0.05))\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nlabels = ['Level 1', 'Level 2', 'Level 3', 'Level 4']\nvalues = [50.0, 50.0, 50.0, 50.0]\ncolors = ['yellow', 'blue', 'red', 'pink']\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(8.0, 3.0))\nbars = ax.bar(labels, values, color=colors)\n\n# Add labels and title\nax.set_xlabel('Levels')\nax.set_ylabel('# Avg Uploaded Samples')\nax.set_title('Uploads by Level')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_50.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plot\ncategories = ['\u03bb=0.06', '\u03bb=0.08', '\u03bb=0.10']\nrewards = [39.4, 35.18, 30]\nvalues = [22, 22, 22]\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(6.0, 5.0))\nbars = ax.bar(categories, rewards, color='blue')\n\n# Add value labels on top of the bars\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 2), ha='center', va='bottom')\n\n# Set the title and labels\nax.set_title('Rewards by Categories')\nax.set_xlabel('Categories')\nax.set_ylabel('Reward Values')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_51.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\ncategories = ['Cleaning / laundry', 'Crafting/knitting', 'Baker', 'Carpenter', 'Making Bricks', 'Gardening', 'Construction/renovation', 'Household management', 'Scooter mechanic', 'Farmer']\nvalues = [5375, 4190, 3543, 3216, 2915, 2548, 2343, 2158, 2060, 2008]\n\n# Create a bar chart\nplt.figure(figsize=(12, 8))\nplt.bar(categories, values, color='blue')\n\n# Set the title and labels\nplt.title('Number of Videos by Profession')\nplt.xlabel('Profession')\nplt.ylabel('Number of Videos')\n\n# Rotate x-axis labels for better visibility\nplt.xticks(rotation=45)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_52.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\ncategories = ['greeting', 'request', 'criticism', 'apology', 'persuasion', 'thanking', 'leave-taking']\nsynthetic_data = [8, 31, 24, 7, 10, 10, 10]\nhuman_authored_data = [16, 28, 11, 5, 15, 16, 9]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Plot the bars\nbars = ax.bar(categories, synthetic_data, color='blue')\n\n# Add labels and title\nax.set_xlabel('Categories')\nax.set_ylabel('Synthetic Data')\nax.set_title('Sentiment Analysis of Synthetic Data')\n\n# Add value labels on top of the bars\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 2), ha='center', va='bottom')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_53.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nwords = ['small', 'certain', 'little', 'fraction', 'limited', 'a', 'day', 'few', 'new', 'specific', 'substantial', 'tiny', 'very', 'slight', 'large', 'medium', 'tall', 'short', 'long', 'wide', 'narrow', 'high', 'low']\nprobabilities = [0.25, 0.23, 0.22, 0.21, 0.20, 0.19, 0.18, 0.17, 0.16, 0.15, 0.14, 0.13, 0.12, 0.11, 0.10, 0.09, 0.08, 0.07, 0.06, 0.05, 0.04]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Plot the bar chart\nax.bar(words, probabilities, color='lightblue')\n\n# Set the title and labels\nax.set_title('Context: The human body can tolerate only a')\nax.set_xlabel('Word')\nax.set_ylabel('Probability')\n\n# Rotate the x-axis labels for better visibility\nplt.xticks(rotation=45)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_54.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nmodels = ['Convertible', 'Coupe', 'Truck', 'SUV', 'Sedan']\nprobabilities = [0.75, 0.85, 0.90, 0.95, 0.80]\n\n# Create bar chart\nfig, ax = plt.subplots(figsize=(6.0, 2.0))\nbars = ax.bar(models, probabilities, color='blue')\n\n# Add labels and title\nax.set_xlabel('Probability of Improvement over VLM Image Encoder Baseline Returns')\nax.set_ylabel('Probability of Improvement')\nax.set_title('Probability of Improvement over VLM Image Encoder Baseline Returns')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_55.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nemotions = ['Disapproval', 'Joy', 'Relief', 'Gratitude', 'Annoyance', 'Nervousness', 'Pride', 'Sadness', 'Unbored', 'Amusement']\nfrequencies = [2.1, 3.0, 3.5, 3.5, 6.0, 6.0, 6.6, 6.7, 7.0, 7.6]\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\nbars = ax.bar(emotions, frequencies, color='pink')\n\n# Add labels and title\nax.set_xlabel('Emotion')\nax.set_ylabel('Frequency (%)')\nax.set_title('Emotion Frequency Distribution')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_56.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\nfig, ax = plt.subplots(figsize=(12.0, 8.0))\nax.set_title('Number of Videos by Profession')\nax.set_xlabel('Profession')\nax.set_ylabel('Number of Videos')\n\n# Define the data\nprofessions = ['Making Bricks', 'Carpenter', 'Baker', 'Crafting/Knitting', 'Cleaning/Laundry', 'Gardening']\nvideo_counts = [4000, 5000, 6000, 7000, 8000, 9000]\n\n# Create a bar chart\nax.bar(professions, video_counts, color='blue')\n\n# Set the x-axis limits\nax.set_xlim(-1, len(professions))\n\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_57.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Set the title of the graph\nax.set_title('Economic Indicators')\n\n# Set the x-axis label\nax.set_xlabel('Time')\n\n# Set the y-axis label\nax.set_ylabel('Value')\n\n# Set the x-axis limits\nax.set_xlim(0, 50)\n\n# Set the y-axis limits\nax.set_ylim(0, 50)\n\n# Set the x-axis ticks\nax.set_xticks([0, 10, 20, 30, 40, 50])\n\n# Set the y-axis ticks\nax.set_yticks([0, 10, 20, 30, 40, 50])\n\n# Set the x-axis tick labels\nax.set_xticklabels(['0', '10', '20', '30', '40', '50'])\n\n# Set the y-axis tick labels\nax.set_yticklabels(['0', '10', '20', '30', '40', '50'])\n\n# Set the background color of the graph\nax.set_facecolor('#f0f0f0')\n\n# Set the grid lines\nax.grid(True)\n\n# Set the color of the grid lines\nax.grid(color='#d3d3d3')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='#d3d3d3')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='#d3d3d3')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='#d3d3d3')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='#d3d3d3')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='#d3d3d3')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='#d3d3d3')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='#d3d3d3')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='#d3d3d3')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='#d3d3d3')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='#d3d3d3')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='#d3d3d3')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='#d3d3d3')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='#d3d3d3')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='#d3d3d3')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='#d3d3d3')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='#d3d3d3')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='#d3d3d3')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='#d3d3d3')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='#d3d3d3')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='#d3d3d3')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='#d3d3d3')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='#d3d3d3')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='#d3d3d3')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='#d3d3d3')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='#d3d3d3')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='#d3d3d3')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='#d3d3d3')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='#d3d3d3')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='#d3d3d3')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='#d3d3d3')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='#d3d3d3')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='#d3d3d3')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='#d3d3d3')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='#d3d3d3')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='#d3d3d3')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='#d3d3d3')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='#d3d3d3')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='#d3d3d3')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='#d3d3d3')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='#d3d3d3')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='#d3d3d3')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='#d3d3d3')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='#d3d3d3')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='#d3d3d3')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='#d3d3d3')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='#d3d3d3')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='#d3d3d3')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='#d3d3d3')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='#d3d3d3')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='#d3d3d3')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='#d3d3d3')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='#d3d3d3')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='#d3d3d3')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='#d3d3d3')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='#d3d3d3')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='#d3d3d3')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='#d3d3d3')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='#d3d3d3')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='#d3d3d3')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='#d3d3d3')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='#d3d3d3')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='#d3d3d3')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='#d3d3d3')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='#d3d3d3')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='#d3d3d3')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='#d3d3d3')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='#d3d3d3')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='#d3d3d3')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='#d3d3d3')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='#d3d3d3')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='#d3d3d3')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='#d3d3d3')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='#d3d3d3')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='#d3d3d3')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='#d3d3d3')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='#d3d3d3')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='#d3d3d3')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='#d3d3d3')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='#d3d3d3')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='#d3d3d3')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='#d3d3d3')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='#d3d3d3')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='#d3d3d3')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='#d3d3d3')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='#d3d3d3')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='#d3d3d3')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='#d3d3d3')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='#d3d3d3')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='#d3d3d3')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='#d3d3d3')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='#d3d3d3')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='#d3d3d3')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='#d3d3d3')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='#d3d3d3')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='#d3d3d3')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='#d3d3d3')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='#d3d3d3')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='#d3d3d3')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='#d3d3d3')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='#d3d3d3')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='#d3d3d3')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='#d3d3d3')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='#d3d3d3')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='#d3d3d3')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='#d3d3d3')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='#d3d3d3')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='#d3d3d3')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='#d3d3d3')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='#d3d3d3')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='#d3d3d3')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='#d3d3d3')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='#d3d3d3')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='#d3d3d3')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='#d3d3d3')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='#d3d3d3')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='#d3d3d3')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='#d3d3d3')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='#d3d3d3')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='#d3d3d3')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='#d3d3d3')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='#d3d3d3')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='#d3d3d3')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='#d3d3d3')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='#d3d3d3')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='#d3d3d3')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='#d3d3d3')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='#d3d3d3')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='#d3d3d3')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='#d3d3d3')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='#d3d3d3')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='#d3d3d3')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='#d3d3d3')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='#d3d3d3')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='#d3d3d3')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='#d3d3d3')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='#d3d3d3')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='#d3d3d3')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='#d3d3d3')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='#d3d3d3')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='#d3d3d3')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='#d3d3d3')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='#d3d3d3')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='#d3d3d3')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='#d3d3d3')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='#d3d3d3')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='#d3d3d3')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='#d3d3d3')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='#d3d3d3')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='#d3d3d3')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='#d3d3d3')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='#d3d3d3')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='#d3d3d3')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='#d3d3d3')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='#d3d3d3')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='#d3d3d3')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='#d3d3d3')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='#d3d3d3')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='#d3d3d3')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='#d3d3d3')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='#d3d3d3')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='#d3d3d3')\n\n# Set the color of the y-axis grid lines\nax"}
{"file": "dataset/ori_500/bar_58.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for each city\ncities = ['New York', 'Los Angeles', 'Chicago', 'Houston', 'Phoenix', 'Philadelphia']\npopulations = [84, 39, 27, 25, 19, 17]\ncolors = ['red', 'pink', 'orange', 'gray', 'lightblue', 'darkblue']\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(10, 6))\nbars = ax.bar(cities, populations, color=colors)\n\n# Add labels and title\nax.set_xlabel('Cities')\nax.set_ylabel('Population')\nax.set_title('City Populations')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_59.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ncategories = ['External Class', 'Argument', 'Loop', 'Conditional Statement', 'Variable Declaration', 'Method Declaration', 'Parameter']\npositive_differences = [80, 70, 60, 50, 40, 30, 20]\nnegative_differences = [10, 20, 30, 40, 50, 60, 70]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Plot the positive differences\nax.bar(categories, positive_differences, color='green')\n\n# Plot the negative differences\nax.bar(categories, negative_differences, bottom=positive_differences, color='red')\n\n# Set the title and labels\nax.set_title('Relative Difference in Machine vs. Human Focus on Semantic Categories')\nax.set_xlabel('Semantic Category')\nax.set_ylabel('Difference (%)')\n\n# Set the x-axis limits\nax.set_xlim(-80, 80)\n\n# Set the y-axis limits\nax.set_ylim(0, 80)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\nemotions = ['Disappointment', 'Embarrassment', 'Oblivious', 'Delight', 'Excitement', 'Disapproval', 'Joy', 'Relief', 'Gratitude', 'Annoyance', 'Nervousness', 'Pride', 'Sadness', 'Unboredom', 'Amusement']\nvalues = [7, 6, 5, 4, 3, 2, 1, 0.5, 0.3, 0.2, 0.1, 0.05, 0.03, 0.02, 0.01]\n\nplt.figure(figsize=(8.0, 8.0))\nplt.bar(emotions, values, color='skyblue')\nplt.xlabel('Emotion')\nplt.ylabel('Frequency (%)')\nplt.title('Emotion Frequency Distribution')\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_60.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ncompanies = ['FMLP-Rec', 'BERT4Rec', 'SASRec', 'Case', 'GRU4Rec']\nperformance = [-7, -8.5, -8.5, -15.9, -15.9]\nmarket_cap = [4.8, 4.8, 4.8, 19.7, 19.7]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 8))\n\n# Plot the performance data\nax.barh(companies, performance, color='red')\n\n# Add market cap values\nfor i, v in enumerate(performance):\n    ax.text(v + 0.2, i, str(v), color='black', va='center')\n\n# Set the title and labels\nax.set_title('Performance of Companies')\nax.set_xlabel('Performance (%)')\nax.set_ylabel('Companies')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_61.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for each section\npatents = [100, 200, 300, 400, 500]\nresearch = [150, 250, 350, 450, 550]\nusage = [200, 300, 400, 500, 600]\npenetration = [250, 350, 450, 550, 650]\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Set the title of the plot\nax.set_title('Tech Industry Metrics')\n\n# Set the x-axis label\nax.set_xlabel('Year')\n\n# Set the y-axis label\nax.set_ylabel('Metrics')\n\n# Plot the data\nax.plot(patents, label='Patents Filed')\nax.plot(research, label='Research Investment')\nax.plot(usage, label='Smartphone Usage')\nax.plot(penetration, label='Internet Penetration')\n\n# Add a legend to the plot\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_62.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\ncategories = ['greeting', 'request', 'criticism', 'apology', 'persuasion', 'thanking', 'leave-taking']\nsynthetic_data = [12, 35, 28, 15, 18, 14, 16]\nhuman_authored_data = [18, 32, 15, 8, 20, 22, 12]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Plot the bars\nbars = ax.bar(categories, synthetic_data, color='blue')\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 1), ha='center', va='bottom')\n\nbars = ax.bar(categories, human_authored_data, bottom=synthetic_data, color='orange')\nfor bar in bars:\n    yval = bar.get_height() + bar.get_x()\n    ax.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 1), ha='center', va='bottom')\n\n# Set the title and labels\nax.set_title('Sentiment Analysis of Synthetic vs Human-Authored Data')\nax.set_xlabel('Sentiment Categories')\nax.set_ylabel('Percentage')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_63.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the bar chart\ncategories = ['Attack on Titan', 'Game of Thrones', 'The Count of Monte Cristo', 'Demi-Gods and Semi-Devils', 'Notre-Dame de Paris']\nscores = [0.45, 0.55, 0.35, 0.65, 0.7]\n\n# Create a bar chart with the data\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\nax.bar(categories, scores, color='blue')\n\n# Set the title of the chart\nax.set_title('Scores by Category Over Time')\n\n# Set the x-axis label\nax.set_xlabel('Categories')\n\n# Set the y-axis label\nax.set_ylabel('Scores')\n\n# Set the x-axis tick labels\nax.set_xticklabels(categories, rotation=45)\n\n# Set the y-axis limits\nax.set_ylim(0, 0.7)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_64.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nregions = ['East', 'West', 'North', 'South']\nconcentrations = [54.46, 56.03, 65.49, 92.15]\nco2_emissions = [11.59, 25.36, 22.89, 32.84]\npm_emissions = [17.38, 17.38, 26.15, 32.19]\nso2_emissions = [39.63, 39.63, 37.12, 48.23]\nno2_emissions = [56.03, 56.03, 65.49, 92.15]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 7.0))\n\n# Plot the bars\nbars = ax.bar(regions, concentrations, color='skyblue')\n\n# Add labels and title\nax.set_xlabel('Regions')\nax.set_ylabel('Concentration (ppm)')\nax.set_title('Air Quality Metrics by Region')\n\n# Add text annotations for each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 2), ha='center', va='bottom')\n\n# Add a vertical line at the rightmost edge of the last bar\nax.axvline(x=bar.get_x() + bar.get_width(), color='black', linestyle='--')\n\n# Add a horizontal line at the top of the last bar\nax.axhline(y=yval, color='black', linestyle='--')\n\n# Add a rectangle at the bottom left corner\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='skyblue'))\n\n# Add a rectangle at the top right corner\nax.add_patch(plt.Rectangle((9, 92), 1, 1, color='skyblue'))\n\n# Add a rectangle at the bottom right corner\nax.add_patch(plt.Rectangle((9, 0), 1, 1, color='skyblue'))\n\n# Add a rectangle at the top left corner\nax.add_patch(plt.Rectangle((0, 92), 1, 1, color='skyblue'))\n\n# Add a rectangle at the center\nax.add_patch(plt.Rectangle((4.5, 46), 1, 1, color='skyblue'))\n\n# Add a rectangle at the bottom right corner\nax.add_patch(plt.Rectangle((9, 0), 1, 1, color='skyblue'))\n\n# Add a rectangle at the top right corner\nax.add_patch(plt.Rectangle((9, 92), 1, 1, color='skyblue'))\n\n# Add a rectangle at the bottom left corner\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='skyblue'))\n\n# Add a rectangle at the top left corner\nax.add_patch(plt.Rectangle((0, 92), 1, 1, color='skyblue'))\n\n# Add a rectangle at the center\nax.add_patch(plt.Rectangle((4.5, 46), 1, 1, color='skyblue'))\n\n# Add a rectangle at the bottom right corner\nax.add_patch(plt.Rectangle((9, 0), 1, 1, color='skyblue'))\n\n# Add a rectangle at the top right corner\nax.add_patch(plt.Rectangle((9, 92), 1, 1, color='skyblue'))\n\n# Add a rectangle at the bottom left corner\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='skyblue'))\n\n# Add a rectangle at the top left corner\nax.add_patch(plt.Rectangle((0, 92), 1, 1, color='skyblue'))\n\n# Add a rectangle at the center\nax.add_patch(plt.Rectangle((4.5, 46), 1, 1, color='skyblue'))\n\n# Add a rectangle at the bottom right corner\nax.add_patch(plt.Rectangle((9, 0), 1, 1, color='skyblue'))\n\n# Add a rectangle at the top right corner\nax.add_patch(plt.Rectangle((9, 92), 1, 1, color='skyblue'))\n\n# Add a rectangle at the bottom left corner\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='skyblue'))\n\n# Add a rectangle at the top left corner\nax.add_patch(plt.Rectangle((0, 92), 1, 1, color='skyblue'))\n\n# Add a rectangle at the center\nax.add_patch(plt.Rectangle((4.5, 46), 1, 1, color='skyblue'))\n\n# Add a rectangle at the bottom right corner\nax.add_patch(plt.Rectangle((9, 0), 1, 1, color='skyblue'))\n\n# Add a rectangle at the top right corner\nax.add_patch(plt.Rectangle((9, 92), 1, 1, color='skyblue'))\n\n# Add a rectangle at the bottom left corner\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='skyblue'))\n\n# Add a rectangle at the top left corner\nax.add_patch(plt.Rectangle((0, 92), 1, 1, color='skyblue'))\n\n# Add a rectangle at the center\nax.add_patch(plt.Rectangle((4.5, 46), 1, 1, color='skyblue'))\n\n# Add a rectangle at the bottom right corner\nax.add_patch(plt.Rectangle((9, 0), 1, 1, color='skyblue'))\n\n# Add a rectangle at the top right corner\nax.add_patch(plt.Rectangle((9, 92), 1, 1, color='skyblue'))\n\n# Add a rectangle at the bottom left corner\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='skyblue'))\n\n# Add a rectangle at the top left corner\nax.add_patch(plt.Rectangle((0, 92), 1, 1, color='skyblue'))\n\n# Add a rectangle at the center\nax.add_patch(plt.Rectangle((4.5, 46), 1, 1, color='skyblue'))\n\n# Add a rectangle at the bottom right corner\nax.add_patch(plt.Rectangle((9, 0), 1, 1, color='skyblue'))\n\n# Add a rectangle at the top right corner\nax.add_patch(plt.Rectangle((9, 92), 1, 1, color='skyblue'))\n\n# Add a rectangle at the bottom left corner\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='skyblue'))\n\n# Add a rectangle at the top left corner\nax.add_patch(plt.Rectangle((0, 92), 1, 1, color='skyblue'))\n\n# Add a rectangle at the center\nax.add_patch(plt.Rectangle((4.5, 46), 1, 1, color='skyblue'))\n\n# Add a rectangle at the bottom right corner\nax.add_patch(plt.Rectangle((9, 0), 1, 1, color='skyblue'))\n\n# Add a rectangle at the top right corner\nax.add_patch(plt.Rectangle((9, 92), 1, 1, color='skyblue'))\n\n# Add a rectangle at the bottom left corner\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='skyblue'))\n\n# Add a rectangle at the top left corner\nax.add_patch(plt.Rectangle((0, 92), 1, 1, color='skyblue'))\n\n# Add a rectangle at the center\nax.add_patch(plt.Rectangle((4.5, 46), 1, 1, color='skyblue'))\n\n# Add a rectangle at the bottom right corner\nax.add_patch(plt.Rectangle((9, 0), 1, 1, color='skyblue'))\n\n# Add a rectangle at the top right corner\nax.add_patch(plt.Rectangle((9, 92), 1, 1, color='skyblue'))\n\n# Add a rectangle at the bottom left corner\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='skyblue'))\n\n# Add a rectangle at the top left corner\nax.add_patch(plt.Rectangle((0, 92), 1, 1, color='skyblue'))\n\n# Add a rectangle at the center\nax.add_patch(plt.Rectangle((4.5, 46), 1, 1, color='skyblue'))\n\n# Add a rectangle at the bottom right corner\nax.add_patch(plt.Rectangle((9, 0), 1, 1, color='skyblue'))\n\n# Add a rectangle at the top right corner\nax.add_patch(plt.Rectangle((9, 92), 1, 1, color='skyblue'))\n\n# Add a rectangle at the bottom left corner\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='skyblue'))\n\n# Add a rectangle at the top left corner\nax.add_patch(plt.Rectangle((0, 92), 1, 1, color='skyblue'))\n\n# Add a rectangle at the center\nax.add_patch(plt.Rectangle((4.5, 46), 1, 1, color='skyblue'))\n\n# Add a rectangle at the bottom right corner\nax.add_patch(plt.Rectangle((9, 0), 1, 1, color='skyblue'))\n\n# Add a rectangle at the top right corner\nax.add_patch(plt.Rectangle((9, 92), 1, 1, color='skyblue'))\n\n# Add a rectangle at the bottom left corner\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='skyblue'))\n\n# Add a rectangle at the top left corner\nax.add_patch(plt.Rectangle((0, 92), 1, 1, color='skyblue'))\n\n# Add a rectangle at the center\nax.add_patch(plt.Rectangle((4.5, 46), 1, 1, color='skyblue'))\n\n# Add a rectangle at the bottom right corner\nax.add_patch(plt.Rectangle((9, 0), 1, 1, color='skyblue'))\n\n# Add a rectangle at the top right corner\nax.add_patch(plt.Rectangle((9, 92), 1, 1, color='skyblue'))\n\n# Add a rectangle at the bottom left corner\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='skyblue'))\n\n# Add a rectangle at the top left corner\nax.add_patch(plt.Rectangle((0, 92), 1, 1, color='skyblue'))\n\n# Add a rectangle at the center\nax.add_patch(plt.Rectangle((4.5, 46), 1, 1, color='skyblue'))\n\n# Add a rectangle at the bottom right corner\nax.add_patch(plt.Rectangle((9, 0), 1, 1, color='skyblue'))\n\n# Add a rectangle at the top right corner\nax.add_patch(plt.Rectangle((9, 92), 1, 1, color='skyblue'))\n\n# Add a rectangle at the bottom left corner\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='skyblue'))\n\n# Add a rectangle at the top left corner\nax.add_patch(plt.Rectangle((0, 92), 1, 1, color='skyblue'))\n\n# Add a rectangle at the center\nax.add_patch(plt.Rectangle((4.5, 46), 1, 1, color='skyblue'))\n\n# Add a rectangle at the bottom right corner\nax.add_patch(plt.Rectangle((9, 0), 1, 1, color='skyblue'))\n\n# Add a rectangle at the top right corner\nax.add_patch(plt.Rectangle((9, 92), 1, 1, color='skyblue'))\n\n# Add a rectangle at the bottom left corner\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='skyblue'))\n\n# Add a rectangle at the top left corner\nax.add_patch(plt.Rectangle((0, 92), 1, 1, color='skyblue'))\n\n# Add a rectangle at the center\nax.add_patch(plt.Rectangle((4.5, 46), 1, 1, color='skyblue'))\n\n# Add a rectangle at the bottom right corner\nax.add_patch(plt.Rectangle((9, 0), 1, 1, color='skyblue'))\n\n# Add a rectangle at the top right corner\nax.add_patch(plt.Rectangle((9, 92), 1, 1, color='skyblue'))\n\n# Add a rectangle at the bottom left corner\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='skyblue'))\n\n# Add a rectangle at the top left corner\nax.add_patch(plt.Rectangle((0, 92), 1, 1, color='skyblue'))\n\n# Add a rectangle at the center\nax.add_patch(plt.Rectangle((4.5, 46), 1, 1, color='skyblue'))\n\n# Add a rectangle at the bottom right corner\nax.add_patch(plt.Rectangle((9, 0), 1, 1, color='skyblue'))\n\n# Add a rectangle at the top right corner\nax.add_patch(plt.Rectangle((9, 92), 1, 1, color='skyblue'))\n\n# Add a rectangle at the bottom left corner\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='skyblue'))\n\n# Add a rectangle at the top left corner\nax.add_patch(plt.Rectangle((0, 92), 1, 1, color='skyblue'))\n\n# Add a rectangle at the center\nax.add_patch(plt.Rectangle((4.5, 46), 1, 1, color='skyblue'))\n\n# Add a rectangle at the bottom right corner\nax.add_patch(plt.Rectangle((9, 0), 1, 1, color='skyblue'))\n\n# Add a rectangle at the top right corner\nax.add_patch(plt.Rectangle((9, 92), 1, 1, color='skyblue'))\n\n# Add a rectangle at the bottom left corner\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='skyblue'))\n\n# Add a rectangle at the top left corner\nax.add_patch(plt.Rectangle((0, 92), 1, 1, color='skyblue'))\n\n# Add a rectangle at the center\nax.add_patch(plt.Rectangle((4.5, 46), 1, 1, color='skyblue'))\n\n# Add a rectangle at the bottom right corner\nax.add_patch(plt.Rectangle((9, 0), 1, 1, color='skyblue'))\n\n# Add a rectangle at the top right corner\nax.add_patch(plt.Rectangle((9, 92), 1, 1, color='skyblue'))\n\n# Add a rectangle at the bottom left corner\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='skyblue'))\n\n# Add a rectangle at the top left corner\nax.add_patch(plt.Rectangle((0, 92), 1, 1, color='skyblue'))\n\n# Add a rectangle at the center\nax.add_patch(plt.Rectangle((4.5, 46), 1, 1, color='skyblue'))\n\n# Add a rectangle at the bottom right corner\nax.add_patch(plt.Rectangle((9, 0), 1, 1, color='skyblue'))\n\n# Add a rectangle at the top right corner\nax.add_patch(plt.Rectangle((9, 92), 1, 1, color='skyblue'))\n\n# Add a rectangle at the bottom left corner\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='skyblue'))\n\n# Add a rectangle at the top left corner\nax.add_patch(plt.Rectangle((0, 92), 1, 1, color='skyblue'))\n\n# Add a rectangle at the center\nax.add_patch(plt.Rectangle((4.5, 46), 1, 1, color='skyblue'))\n\n# Add a rectangle at the bottom right corner\nax.add_patch(plt.Rectangle((9, 0), 1, 1, color='skyblue'))\n\n# Add a rectangle at the top right corner\nax.add_patch(plt.Rectangle((9, 92), 1, 1, color='skyblue'))\n\n# Add a rectangle at the bottom left corner\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='skyblue'))\n\n# Add a rectangle at the top left corner\nax.add_patch(plt.Rectangle((0, 92), 1, 1, color='skyblue'))\n\n# Add a rectangle at the center\nax.add_patch(plt.Rectangle((4.5, 46), 1, 1, color='skyblue'))\n\n# Add a rectangle at the bottom right corner\nax.add_patch(plt.Rectangle((9, 0), 1, 1, color='skyblue'))\n\n# Add a rectangle at the top right corner\nax.add_patch(plt.Rectangle((9, 92), 1, 1, color='skyblue'))\n\n# Add a rectangle at the bottom left corner\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='skyblue'))\n\n# Add a rectangle at the top left corner\nax.add_patch(plt.Rectangle((0, 92), 1, 1, color='skyblue'))\n\n# Add a rectangle at the center\nax.add_patch(plt.Rectangle((4.5, 46), 1, 1, color='skyblue'))\n\n# Add a rectangle at the bottom right corner\nax.add_patch(plt.Rectangle((9, 0), 1, 1, color='skyblue'))\n\n# Add a rectangle at the top right corner\nax.add_patch(plt.Rectangle((9, 92), 1, 1, color='skyblue'))\n\n# Add a rectangle at the bottom left corner\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='skyblue'))\n\n# Add a rectangle at the top left corner\nax.add_patch(plt.Rectangle((0, 92), 1, 1, color='skyblue'))\n\n# Add a rectangle at the center\nax.add_patch(plt.Rectangle((4.5, 46), 1, 1, color='skyblue'))\n\n# Add a rectangle at the bottom right corner\nax.add"}
{"file": "dataset/ori_500/bar_65.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nbrands = ['LLAMA-Default', 'LLAMA-HAG', 'Vicuna-Default', 'Vicuna-HAG']\nscores = [-2.2, -2.3, -3.3, -3.2]\nconstraint_words = [3, 5, 7, 10]\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\nbars = ax.bar(brands, scores, color='blue')\n\n# Add labels and title\nax.set_xlabel('Brands')\nax.set_ylabel('Scores by group and constraint word count')\nax.set_title('Scores by group and constraint word count')\n\n# Add constraint words as annotations\nfor i, v in enumerate(constraint_words):\n    ax.text(i, scores[i] + 0.1, str(v), ha='center', va='bottom')\n\n# Set the x-axis limits\nax.set_xlim(-0.5, len(brands) - 0.5)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_66.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ncountries = ['USA', 'China', 'Germany', 'Brazil']\ngdp_growth_rates = [-0.2, -0.4, -0.6, -0.8]\ncolors = ['red', 'green', 'blue', 'purple']\n\n# Create a bar chart\nplt.figure(figsize=(10, 6))\nbars = plt.bar(countries, gdp_growth_rates, color=colors)\n\n# Add text annotations to each bar\nfor bar in bars:\n    yval = bar.get_height()\n    plt.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 2), ha='center', va='bottom')\n\n# Set the title and labels\nplt.title('Negative GDP Growth Rates by Country and Year')\nplt.xlabel('Country')\nplt.ylabel('GDP Growth Rate (%)')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_67.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nmodels = ['GPT4V', 'OSCAR', 'LLaMA', 'BLIP2', 'BLIP1', 'Video-LLaMA', 'LaVIA']\nperformance = [82.5, 73.93, 31.79, 4.64, 4.64, 0.71, 0.0]\n\n# Create a bar chart\nplt.figure(figsize=(12, 8))\nplt.bar(models, performance, color='blue')\n\n# Set title and labels\nplt.title('Human Study')\nplt.xlabel('Model')\nplt.ylabel('Percentage (%)')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_68.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ncategories = ['Traffic Flow', 'Accident Rate', 'Public Transport Usage', 'Road Condition']\nvalues = [50, 20, 40, 80]\ncolors = ['blue', 'cyan', 'lightblue', 'darkblue']\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(10, 6))\nbars = ax.bar(categories, values, color=colors)\n\n# Add value labels\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 2), ha='center', va='bottom')\n\n# Set title and labels\nax.set_title('Stacked Bar Chart of Transportation Data')\nax.set_xlabel('Categories')\nax.set_ylabel('Values')\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_69.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 7))\n\n# Set the title of the chart\nax.set_title('Enhanced Stacked Bar Chart with Textures and Annotated Values')\n\n# Define the categories and their sales data\ncategories = ['Category A', 'Category B', 'Category C', 'Category D', 'Category E', 'Category F', 'Category G']\nsales_data = [80, 60, 40, 20, 0, 0, 0]\n\n# Define the colors for each category\ncolors = ['red', 'orange', 'pink', 'yellow', 'lightblue', 'orange', 'pink']\n\n# Create a bar chart with the sales data\nbars = ax.bar(categories, sales_data, color=colors)\n\n# Add annotations to each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 2), ha='center', va='bottom')\n\n# Set the x-axis label\nax.set_xlabel('Product Categories')\n\n# Set the y-axis label\nax.set_ylabel('Sales Units')\n\n# Set the y-axis limits\nax.set_ylim(0, 80)\n\n# Set the y-axis ticks\nax.set_yticks([0, 20, 40, 60, 80])\n\n# Set the y-axis tick labels\nax.set_yticklabels(['0', '20', '40', '60', '80'])\n\n# Set the x-axis ticks\nax.set_xticks(range(len(categories)))\n\n# Set the x-axis tick labels\nax.set_xticklabels(categories)\n\n# Set the x-axis tick rotation\nax.set_xticklabels(categories, rotation=45)\n\n# Set the x-axis tick label color\nax.set_xticklabels(categories, color='black')\n\n# Set the x-axis tick label font size\nax.set_xticklabels(categories, fontsize=12)\n\n# Set the x-axis tick label font weight\nax.set_xticklabels(categories, fontweight='bold')\n\n# Set the x-axis tick label font style\nax.set_xticklabels(categories, fontstyle='italic')\n\n# Set the x-axis tick label font family\nax.set_xticklabels(categories, fontfamily='serif')\n\n# Set the x-axis tick label font variant\nax.set_xticklabels(categories, fontvariant='small-caps')\n\n# Set the x-axis tick label font stretch\nax.set_xticklabels(categories, fontstretch='ultra-condensed')\n\n# Set the x-axis tick label font size\nax.set_xticklabels(categories, fontsize=12)\n\n# Set the x-axis tick label font weight\nax.set_xticklabels(categories, fontweight='bold')\n\n# Set the x-axis tick label font style\nax.set_xticklabels(categories, fontstyle='italic')\n\n# Set the x-axis tick label font family\nax.set_xticklabels(categories, fontfamily='serif')\n\n# Set the x-axis tick label font variant\nax.set_xticklabels(categories, fontvariant='small-caps')\n\n# Set the x-axis tick label font stretch\nax.set_xticklabels(categories, fontstretch='ultra-condensed')\n\n# Set the x-axis tick label font size\nax.set_xticklabels(categories, fontsize=12)\n\n# Set the x-axis tick label font weight\nax.set_xticklabels(categories, fontweight='bold')\n\n# Set the x-axis tick label font style\nax.set_xticklabels(categories, fontstyle='italic')\n\n# Set the x-axis tick label font family\nax.set_xticklabels(categories, fontfamily='serif')\n\n# Set the x-axis tick label font variant\nax.set_xticklabels(categories, fontvariant='small-caps')\n\n# Set the x-axis tick label font stretch\nax.set_xticklabels(categories, fontstretch='ultra-condensed')\n\n# Set the x-axis tick label font size\nax.set_xticklabels(categories, fontsize=12)\n\n# Set the x-axis tick label font weight\nax.set_xticklabels(categories, fontweight='bold')\n\n# Set the x-axis tick label font style\nax.set_xticklabels(categories, fontstyle='italic')\n\n# Set the x-axis tick label font family\nax.set_xticklabels(categories, fontfamily='serif')\n\n# Set the x-axis tick label font variant\nax.set_xticklabels(categories, fontvariant='small-caps')\n\n# Set the x-axis tick label font stretch\nax.set_xticklabels(categories, fontstretch='ultra-condensed')\n\n# Set the x-axis tick label font size\nax.set_xticklabels(categories, fontsize=12)\n\n# Set the x-axis tick label font weight\nax.set_xticklabels(categories, fontweight='bold')\n\n# Set the x-axis tick label font style\nax.set_xticklabels(categories, fontstyle='italic')\n\n# Set the x-axis tick label font family\nax.set_xticklabels(categories, fontfamily='serif')\n\n# Set the x-axis tick label font variant\nax.set_xticklabels(categories, fontvariant='small-caps')\n\n# Set the x-axis tick label font stretch\nax.set_xticklabels(categories, fontstretch='ultra-condensed')\n\n# Set the x-axis tick label font size\nax.set_xticklabels(categories, fontsize=12)\n\n# Set the x-axis tick label font weight\nax.set_xticklabels(categories, fontweight='bold')\n\n# Set the x-axis tick label font style\nax.set_xticklabels(categories, fontstyle='italic')\n\n# Set the x-axis tick label font family\nax.set_xticklabels(categories, fontfamily='serif')\n\n# Set the x-axis tick label font variant\nax.set_xticklabels(categories, fontvariant='small-caps')\n\n# Set the x-axis tick label font stretch\nax.set_xticklabels(categories, fontstretch='ultra-condensed')\n\n# Set the x-axis tick label font size\nax.set_xticklabels(categories, fontsize=12)\n\n# Set the x-axis tick label font weight\nax.set_xticklabels(categories, fontweight='bold')\n\n# Set the x-axis tick label font style\nax.set_xticklabels(categories, fontstyle='italic')\n\n# Set the x-axis tick label font family\nax.set_xticklabels(categories, fontfamily='serif')\n\n# Set the x-axis tick label font variant\nax.set_xticklabels(categories, fontvariant='small-caps')\n\n# Set the x-axis tick label font stretch\nax.set_xticklabels(categories, fontstretch='ultra-condensed')\n\n# Set the x-axis tick label font size\nax.set_xticklabels(categories, fontsize=12)\n\n# Set the x-axis tick label font weight\nax.set_xticklabels(categories, fontweight='bold')\n\n# Set the x-axis tick label font style\nax.set_xticklabels(categories, fontstyle='italic')\n\n# Set the x-axis tick label font family\nax.set_xticklabels(categories, fontfamily='serif')\n\n# Set the x-axis tick label font variant\nax.set_xticklabels(categories, fontvariant='small-caps')\n\n# Set the x-axis tick label font stretch\nax.set_xticklabels(categories, fontstretch='ultra-condensed')\n\n# Set the x-axis tick label font size\nax.set_xticklabels(categories, fontsize=12)\n\n# Set the x-axis tick label font weight\nax.set_xticklabels(categories, fontweight='bold')\n\n# Set the x-axis tick label font style\nax.set_xticklabels(categories, fontstyle='italic')\n\n# Set the x-axis tick label font family\nax.set_xticklabels(categories, fontfamily='serif')\n\n# Set the x-axis tick label font variant\nax.set_xticklabels(categories, fontvariant='small-caps')\n\n# Set the x-axis tick label font stretch\nax.set_xticklabels(categories, fontstretch='ultra-condensed')\n\n# Set the x-axis tick label font size\nax.set_xticklabels(categories, fontsize=12)\n\n# Set the x-axis tick label font weight\nax.set_xticklabels(categories, fontweight='bold')\n\n# Set the x-axis tick label font style\nax.set_xticklabels(categories, fontstyle='italic')\n\n# Set the x-axis tick label font family\nax.set_xticklabels(categories, fontfamily='serif')\n\n# Set the x-axis tick label font variant\nax.set_xticklabels(categories, fontvariant='small-caps')\n\n# Set the x-axis tick label font stretch\nax.set_xticklabels(categories, fontstretch='ultra-condensed')\n\n# Set the x-axis tick label font size\nax.set_xticklabels(categories, fontsize=12)\n\n# Set the x-axis tick label font weight\nax.set_xticklabels(categories, fontweight='bold')\n\n# Set the x-axis tick label font style\nax.set_xticklabels(categories, fontstyle='italic')\n\n# Set the x-axis tick label font family\nax.set_xticklabels(categories, fontfamily='serif')\n\n# Set the x-axis tick label font variant\nax.set_xticklabels(categories, fontvariant='small-caps')\n\n# Set the x-axis tick label font stretch\nax.set_xticklabels(categories, fontstretch='ultra-condensed')\n\n# Set the x-axis tick label font size\nax.set_xticklabels(categories, fontsize=12)\n\n# Set the x-axis tick label font weight\nax.set_xticklabels(categories, fontweight='bold')\n\n# Set the x-axis tick label font style\nax.set_xticklabels(categories, fontstyle='italic')\n\n# Set the x-axis tick label font family\nax.set_xticklabels(categories, fontfamily='serif')\n\n# Set the x-axis tick label font variant\nax.set_xticklabels(categories, fontvariant='small-caps')\n\n# Set the x-axis tick label font stretch\nax.set_xticklabels(categories, fontstretch='ultra-condensed')\n\n# Set the x-axis tick label font size\nax.set_xticklabels(categories, fontsize=12)\n\n# Set the x-axis tick label font weight\nax.set_xticklabels(categories, fontweight='bold')\n\n# Set the x-axis tick label font style\nax.set_xticklabels(categories, fontstyle='italic')\n\n# Set the x-axis tick label font family\nax.set_xticklabels(categories, fontfamily='serif')\n\n# Set the x-axis tick label font variant\nax.set_xticklabels(categories, fontvariant='small-caps')\n\n# Set the x-axis tick label font stretch\nax.set_xticklabels(categories, fontstretch='ultra-condensed')\n\n# Set the x-axis tick label font size\nax.set_xticklabels(categories, fontsize=12)\n\n# Set the x-axis tick label font weight\nax.set_xticklabels(categories, fontweight='bold')\n\n# Set the x-axis tick label font style\nax.set_xticklabels(categories, fontstyle='italic')\n\n# Set the x-axis tick label font family\nax.set_xticklabels(categories, fontfamily='serif')\n\n# Set the x-axis tick label font variant\nax.set_xticklabels(categories, fontvariant='small-caps')\n\n# Set the x-axis tick label font stretch\nax.set_xticklabels(categories, fontstretch='ultra-condensed')\n\n# Set the x-axis tick label font size\nax.set_xticklabels(categories, fontsize=12)\n\n# Set the x-axis tick label font weight\nax.set_xticklabels(categories, fontweight='bold')\n\n# Set the x-axis tick label font style\nax.set_xticklabels(categories, fontstyle='italic')\n\n# Set the x-axis tick label font family\nax.set_xticklabels(categories, fontfamily='serif')\n\n# Set the x-axis tick label font variant\nax.set_xticklabels(categories, fontvariant='small-caps')\n\n# Set the x-axis tick label font stretch\nax.set_xticklabels(categories, fontstretch='ultra-condensed')\n\n# Set the x-axis tick label font size\nax.set_xticklabels(categories, fontsize=12)\n\n# Set the x-axis tick label font weight\nax.set_xticklabels(categories, fontweight='bold')\n\n# Set the x-axis tick label font style\nax.set_xticklabels(categories, fontstyle='italic')\n\n# Set the x-axis tick label font family\nax.set_xticklabels(categories, fontfamily='serif')\n\n# Set the x-axis tick label font variant\nax.set_xticklabels(categories, fontvariant='small-caps')\n\n# Set the x-axis tick label font stretch\nax.set_xticklabels(categories, fontstretch='ultra-condensed')\n\n# Set the x-axis tick label font size\nax.set_xticklabels(categories, fontsize=12)\n\n# Set the x-axis tick label font weight\nax.set_xticklabels(categories, fontweight='bold')\n\n# Set the x-axis tick label font style\nax.set_xticklabels(categories, fontstyle='italic')\n\n# Set the x-axis tick label font family\nax.set_xticklabels(categories, fontfamily='serif')\n\n# Set the x-axis tick label font variant\nax.set_xticklabels(categories, fontvariant='small-caps')\n\n# Set the x-axis tick label font stretch\nax.set_xticklabels(categories, fontstretch='ultra-condensed')\n\n# Set the x-axis tick label font size\nax.set_xticklabels(categories, fontsize=12)\n\n# Set the x-axis tick label font weight\nax.set_xticklabels(categories, fontweight='bold')\n\n# Set the x-axis tick label font style\nax.set_xticklabels(categories, fontstyle='italic')\n\n# Set the x-axis tick label font family\nax.set_xticklabels(categories, fontfamily='serif')\n\n# Set the x-axis tick label font variant\nax.set_xticklabels(categories, fontvariant='small-caps')\n\n# Set the x-axis tick label font stretch\nax.set_xticklabels(categories, fontstretch='ultra-condensed')\n\n# Set the x-axis tick label font size\nax.set_xticklabels(categories, fontsize=12)\n\n# Set the x-axis tick label font weight\nax.set_xticklabels(categories, fontweight='bold')\n\n# Set the x-axis tick label font style\nax.set_xticklabels(categories, fontstyle='italic')\n\n# Set the x-axis tick label font family\nax.set_xticklabels(categories, fontfamily='serif')\n\n# Set the x-axis tick label font variant\nax.set_xticklabels(categories, fontvariant='small-caps')\n\n# Set the x-axis tick label font stretch\nax.set_xticklabels(categories, fontstretch='ultra-condensed')\n\n# Set the x-axis tick label font size\nax.set_xticklabels(categories, fontsize=12)\n\n# Set the x-axis tick label font weight\nax.set_xticklabels(categories, fontweight='bold')\n\n# Set the x-axis tick label font style\nax.set_xticklabels(categories, fontstyle='italic')\n\n# Set the x-axis tick label font family\nax.set_xticklabels(categories, fontfamily='serif')\n\n# Set the x-axis tick label font variant\nax.set_xticklabels(categories, fontvariant='small-caps')\n\n# Set the x-axis tick label font stretch\nax.set_xticklabels(categories, fontstretch='ultra-condensed')\n\n# Set the x-axis tick label font size\nax.set_xticklabels(categories, fontsize=12)\n\n# Set the x-axis tick label font weight\nax.set_xticklabels(categories, fontweight='bold')\n\n# Set the x-axis tick label font style\nax.set_xticklabels(categories, fontstyle='italic')\n\n# Set the x-axis tick label font family\nax.set_xticklabels(categories, fontfamily='serif')\n\n# Set the x-axis tick label font variant\nax.set_xticklabels(categories, fontvariant='small-caps')\n\n# Set the x-axis tick label font stretch\nax.set_xticklabels(categories, fontstretch='ultra-condensed')\n\n# Set the x-axis tick label font size\nax.set_xticklabels(categories, fontsize=12)\n\n# Set the x-axis tick label font weight\nax.set_xticklabels(categories, fontweight='bold')\n\n# Set the x-axis tick label font style\nax.set_xticklabels(categories, fontstyle='italic')\n\n# Set the x-axis tick label font family\nax.set_xticklabels(categories, fontfamily='serif')\n\n# Set the x-axis tick label font variant\nax.set_xticklabels(categories, fontvariant='small-caps')\n\n# Set the x-axis tick label font stretch\nax.set_xticklabels(categories, fontstretch='ultra-condensed')\n\n# Set the x-axis tick label font size\nax.set_xticklabels(categories, fontsize=12)\n\n# Set the x-axis tick label font weight\nax.set_xticklabels(categories, fontweight='bold')\n\n# Set the x-axis tick label font style\nax.set_xticklabels(categories, fontstyle='italic')\n\n# Set the x-axis tick label font family\nax.set_xticklabels(categories, fontfamily='serif')\n\n# Set the x-axis tick label font variant\nax.set_xticklabels(categories, fontvariant='small-caps')\n\n# Set the x-axis tick label font stretch\nax.set_xticklabels(categories, fontstretch='ultra-condensed')\n\n# Set the x-axis tick label font size\nax.set_xticklabels(categories, fontsize=12)\n\n# Set the x-axis tick label font weight\nax.set_xticklabels(categories, fontweight='bold')\n\n# Set the x-axis tick label font style\nax.set_xticklabels(categories, fontstyle='italic')\n\n# Set the x-axis tick label font family\nax.set_xticklabels(categories, fontfamily='serif')\n\n# Set the x-axis tick label font variant\nax.set_xticklabels(categories, fontvariant='small-caps')\n\n# Set the x-axis tick label font stretch\nax.set_xticklabels(categories, fontstretch='ultra-condensed')\n\n# Set the x-axis tick label font size\nax.set_xticklabels(categories, fontsize=12)\n\n# Set the x-axis tick label font weight\nax.set_xticklabels(categories, fontweight='bold')\n\n# Set the x-axis tick label font style\nax.set_xticklabels(categories, fontstyle='italic')\n\n# Set the x-axis tick label font family\nax.set_xticklabels(categories, fontfamily='serif')\n\n# Set the x-axis tick label font variant\nax.set_xticklabels(categories, fontvariant='small-caps')\n\n# Set the x-axis tick label font stretch\nax.set_xticklabels(categories, fontstretch='ultra-condensed')\n\n# Set the x-axis tick label font size\nax.set_xticklabels(categories, fontsize=12)\n\n# Set the x-axis tick label font weight\nax.set_xticklabels(categories, fontweight='bold')\n\n# Set the x-axis tick label font style\nax.set_xticklabels(categories, fontstyle='italic')\n\n# Set the x-axis tick label font family\nax.set_xticklabels(categories, fontfamily='serif')\n\n# Set the x-axis tick label font variant\nax.set_xticklabels(categories, fontvariant='small-caps')\n\n# Set the x-axis tick label font stretch\nax.set_xticklabels(categories, fontstretch='ultra-condensed')\n\n# Set the x-axis tick label font size\nax.set_xticklabels(categories, fontsize=12)\n\n# Set the x-axis tick label font weight\nax.set_xticklabels(categories, fontweight='bold')\n\n# Set the x-axis tick label font style\nax.set_xticklabels(categories, fontstyle='italic')\n\n# Set the x-axis tick label font family\nax.set_xticklabels(categories, fontfamily='serif')\n\n# Set the x-axis tick label font variant\nax.set"}
{"file": "dataset/ori_500/bar_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ncategories = ['SEQ', 'REPLAY', 'MTL']\naccuracies = [0.83, 0.6, 0.11]\nembeddings = [-9.44, -9.12, -3.67]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot bars for accuracies\nbars = ax.bar(categories, accuracies, color='lightblue')\n\n# Add labels and title\nax.set_xlabel('Categories')\nax.set_ylabel('Accuracy (%)')\nax.set_title('Feature Embedding Distance')\n\n# Add text annotations for embeddings\nfor bar, embedding in zip(bars, embeddings):\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.05, embedding, ha='center', va='bottom')\n\n# Set the x-axis limits\nax.set_xlim(-1, len(categories))\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_70.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plot\nscores = [10, 8, 12, 10, 6, 8, 12, 15, 10, 7, 10, 8, 12, 15, 10]\nlabels = ['Score 1', 'Score 2', 'Score 3', 'Score 4', 'Score 5', 'Score 1', 'Score 2', 'Score 3', 'Score 4', 'Score 5', 'Score 1', 'Score 2', 'Score 3', 'Score 4', 'Score 5']\ncolors = ['skyblue', 'lightgreen', 'lightseagreen', 'lightskyblue', 'lavender', 'skyblue', 'lightgreen', 'lightseagreen', 'lightskyblue', 'lavender', 'skyblue', 'lightgreen', 'lightseagreen', 'lightskyblue', 'lavender']\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Plot the data\nax.bar(labels, scores, color=colors)\n\n# Set the title and labels\nax.set_title('Human Labeling and Agreement Bias Checking')\nax.set_xlabel('Scores')\nax.set_ylabel('Human Annotator')\n\n# Add a horizontal line at y=30\nax.axhline(y=30, color='gray', linestyle='-')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_71.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 4.0))\n\n# Set the title of the plot\nax.set_title('Product Performance')\n\n# Set the x-axis label\nax.set_xlabel('Products')\n\n# Set the y-axis label\nax.set_ylabel('Performance (%)')\n\n# Set the x-ticks\nax.set_xticks([0, 1, 2, 3, 4, 5, 6])\nax.set_xticklabels(['coreutils', 'gzip', 'scp', 'libq', 'mcf', 'omnet.', 'perl'])\n\n# Set the y-ticks\nax.set_yticks([0, 20, 40, 60, 80, 100])\n\n# Set the grid\nax.grid(True)\n\n# Set the background color\nax.set_facecolor('#f0f0f0')\n\n# Set the border color\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the bar colors\nbar_colors = ['#008000', '#ffff00', '#0000ff', '#008000', '#0000ff', '#ffff00', '#008000']\n\n# Set the bar width\nbar_width = 0.5\n\n# Set the bar positions\nbar_positions = [0.25, 1.25, 2.25, 3.25, 4.25, 5.25, 6.25]\n\n# Set the bar heights\nbar_heights = [90, 70, 50, 30, 90, 70, 50]\n\n# Set the bar labels\nbar_labels = ['RegOpt', 'BIopt', 'LoopOpt', 'RegOpt', 'BIopt', 'LoopOpt', 'RegOpt']\n\n# Set the bar labels\nfor i, label in enumerate(bar_labels):\n    ax.text(bar_positions[i], bar_heights[i] + 1, label, ha='center', va='bottom')\n\n# Set the bar colors\nfor i, color in enumerate(bar_colors):\n    ax.bar(bar_positions[i], bar_heights[i], bar_width, color=color)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_72.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nbrands = ['Bactrian-X EN', 'Lima-X DE', 'Bactrian-X FR', 'Lima-X IT', 'Bactrian-X ES']\nperformance = [3.5, 2.3, 4.4, 1.3, 0.7]\ncolors = ['blue', 'red', 'orange', 'yellow', 'green']\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Plot bars\nfor i, brand in enumerate(brands):\n    ax.barh(brand, performance[i], color=colors[i])\n\n# Set title and labels\nax.set_title('Model Performance Improvement by Language')\nax.set_xlabel('Performance [%]')\nax.set_ylabel('Model with Language')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_73.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nfiscal_quarters = [1, 2, 3, 4, 5]\ndow_jones_index = [0.5, 1.5, 2.2, 3.9, -0.8]\nnasdaq_index = [0.6, 2.2, 1.0, 4.6, -1.2]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Plot the Dow Jones Index\nax.bar(fiscal_quarters, dow_jones_index, color='green', label='Dow Jones Index')\n\n# Plot the Nasdaq Index\nax.bar(fiscal_quarters, nasdaq_index, color='orange', label='Nasdaq Index')\n\n# Set the title and labels\nax.set_title('Index Change (%)')\nax.set_xlabel('Fiscal Quarter')\nax.set_ylabel('Index Change (%)')\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_74.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plot\nx = ['E16.6', 'L26.8', 'D19.7', 'L22.2']\ny = [39.4, 34.06, 30.84, 34.06]\ncolors = ['pink', 'lightblue', 'lightgreen', 'orange']\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Plot the data\nax.bar(x, y, color=colors)\n\n# Set the title and labels\nax.set_title('Rewards Values')\nax.set_xlabel('Series Labels')\nax.set_ylabel('Rewards')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_75.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\ntruthful_recall = [30.1, 34, 43.7]\nmisleading_recall = [46.3, 57.9, 53.8, 20, 19.4]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Plot the bars\nax.bar(range(len(truthful_recall)), truthful_recall, color='pink')\nax.bar(range(len(misleading_recall)), misleading_recall, color='black')\n\n# Set the title and labels\nax.set_title('Truthful:Misleading = 2:0')\nax.set_xlabel('Recall')\nax.set_ylabel('Percentage')\n\n# Set the x-ticks\nax.set_xticks(range(len(truthful_recall)))\nax.set_xticklabels(['Truthful Recall', 'Misleading Recall'])\n\n# Set the y-limits\nax.set_ylim(0, 60)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_76.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nsectors = ['Light Industry', 'Heavy Industry', 'Transportation', 'Residential']\nemissions_current = [250, 300, 400, 350]\nemissions_previous = [200, 250, 350, 300]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Set the background color of the plot\nax.set_facecolor('lightgrey')\n\n# Draw the bars for current emissions\nbars_current = ax.bar(sectors, emissions_current, color='skyblue', label='Current Year')\n\n# Draw the bars for previous emissions\nbars_previous = ax.bar(sectors, emissions_previous, color='orange', bottom=emissions_current, label='Previous Year')\n\n# Add labels and title\nax.set_xlabel('Industry Sectors')\nax.set_ylabel('Pollution Emissions (thousands of metric tons)')\nax.set_title('Environmental Impact by Sector')\nax.legend()\n\n# Add grid lines\nax.grid(axis='y', linestyle='--', alpha=0.7)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_77.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ncities = ['Beijing', 'Shanghai', 'Guangzhou', 'Shenzhen', 'Chengdu']\ntemperatures = [12, 14, 16, 18, 20]\n\n# Create a bar chart\nplt.figure(figsize=(8, 4))\nbars = plt.bar(cities, temperatures, color='skyblue')\n\n# Add labels and title\nplt.xlabel('Cities')\nplt.ylabel('Average Temperature (\u00b0C)')\nplt.title('Average City Temperatures')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_78.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nregions = ['Region 1', 'Region 2', 'Region 3', 'Region 4']\nemissions_2020 = [180, 160, 170, 190]\nemissions_2021 = [150, 140, 160, 170]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Plot the data\nax.bar(regions, emissions_2020, color='red')\nax.bar(regions, emissions_2021, color='blue')\n\n# Set the title and labels\nax.set_title('Annual Pollution Emission Reductions')\nax.set_xlabel('Regions')\nax.set_ylabel('Emissions')\n\n# Add a legend\nax.legend(['2020 Emissions', '2021 Emissions'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_79.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nquestions = ['Question 1', 'Question 2', 'Question 3 Responses', 'Question 4', 'Question 5']\nresponses = [26.0, 13.0, 10.0, 17.0, 15.0, 9.0, 11.0, 10.0, 12.0, 15.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10"}
{"file": "dataset/ori_500/bar_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nx = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ny = [0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1, 0.0]\n\n# Plot\nfig, ax = plt.subplots(figsize=(10, 6))\nax.plot(x, y, marker='o', linestyle='-', color='blue')\nax.set_xlabel('Top-10 super families in training dataset')\nax.set_ylabel('Accuracy')\nax.set_title('Model Accuracy over Top-10 Super Families')\n\n# Rectangle\nrect = plt.Rectangle((0, 0), 1, 1, color='red', fill=False)\nax.add_patch(rect)\n\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_80.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nx = [3, 5, 7, 9, 11]\ny = [1.2, 1.8, 1.5, 1.3, 1.4]\ncolors = ['cyan', 'orange', 'blue', 'orange', 'brown']\nstyles = ['-', '--', '-.', ':', '-']\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Plot the data\nfor i in range(len(x)):\n    ax.plot([x[i], x[i]], [0, y[i]], color=colors[i], linestyle=styles[i])\n\n# Set the title and labels\nax.set_title('Taboo')\nax.set_xlabel('Num of Constraint Words')\nax.set_ylabel('Score')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_81.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nbrands = ['LLaMA', 'Vicuna', 'Alpaca', 'WizardLM']\ntruth_recall = [46.3, 56.9, 53.8, 19.4]\nmisleading_recall = [30.1, 34, 40, 20]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 4.0))\n\n# Plot bars for truth recall\nax.bar(brands, truth_recall, color='blue')\n\n# Plot bars for misleading recall\nax.bar(brands, misleading_recall, bottom=truth_recall, color='pink')\n\n# Set title and labels\nax.set_title('Truthful:Misleading Recall = 2:0')\nax.set_xlabel('Brands')\nax.set_ylabel('Misleading Recall')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_82.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\nax.set_title('Probability of Improvement over VLM Image Encoder Baseline Returns')\nax.set_xlabel('Probability of Improvement')\nax.set_ylabel('Car Type')\n\ncar_types = ['Convertible', 'Coupe', 'Truck', 'SUV', 'Sedan', 'Convertible New', 'Coupe New', 'Truck New', 'SUV New', 'Sedan New']\nprobabilities = [25, 28, 22, 27, 29, 24, 23, 21, 20, 19]\n\nfor car_type, probability in zip(car_types, probabilities):\n    ax.bar(car_type, probability, color='blue')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_83.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the first bar chart\nemotions = ['Disapproval', 'Joy', 'Relief', 'Gratitude', 'Annoyance', 'Nervousness', 'Pride', 'Sadness', 'Unboredom', 'Amusement']\ndisapproval = [2.1, 3.0, 3.5, 3.5, 6.0, 6.0, 6.7, 7.0, 7.0, 7.6]\njoy = [3.0, 3.0, 3.5, 3.5, 6.0, 6.0, 6.7, 7.0, 7.0, 7.6]\nrelief = [3.5, 3.0, 3.5, 3.5, 6.0, 6.0, 6.7, 7.0, 7.0, 7.6]\ngratitude = [3.5, 3.0, 3.5, 3.5, 6.0, 6.0, 6.7, 7.0, 7.0, 7.6]\nannoyance = [6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.7, 7.0, 7.0, 7.6]\nnervousness = [6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.7, 7.0, 7.0, 7.6]\npride = [6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.7, 7.0, 7.0, 7.6]\nsadness = [6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.7, 7.0, 7.0, 7.6]\nunboredom = [6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.7, 7.0, 7.0, 7.6]\namusement = [6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.7, 7.0, 7.0, 7.6]\n\n# Data for the second bar chart\nfrequency_metric_2 = [7.1, 7.0, 6.5, 6.5, 5.5, 5.0, 5.0, 4.6, 4.0, 3.7, 3.0, 2.6]\n\n# Create the first bar chart\nfig, ax = plt.subplots(figsize=(10.0, 4.0))\nax.bar(emotions, disapproval, color='red')\nax.bar(emotions, joy, bottom=disapproval, color='orange')\nax.bar(emotions, relief, bottom=[x+y for x,y in zip(disapproval, joy)], color='pink')\nax.bar(emotions, gratitude, bottom=[x+y+z for x,y,z in zip(disapproval, joy, relief)], color='lightcoral')\nax.bar(emotions, annoyance, bottom=[x+y+z+t for x,y,z,t in zip(disapproval, joy, relief, gratitude)], color='salmon')\nax.bar(emotions, nervousness, bottom=[x+y+z+t+u for x,y,z,t,u in zip(disapproval, joy, relief, gratitude, annoyance)], color='lightsalmon')\nax.bar(emotions, pride, bottom=[x+y+z+t+u+v for x,y,z,t,u,v in zip(disapproval, joy, relief, gratitude, annoyance, nervousness)], color='mistyrose')\nax.bar(emotions, sadness, bottom=[x+y+z+t+u+v+w for x,y,z,t,u,v,w in zip(disapproval, joy, relief, gratitude, annoyance, nervousness, pride)], color='lavenderblush')\nax.bar(emotions, unboredom, bottom=[x+y+z+t+u+v+w+x for x,y,z,t,u,v,w,x in zip(disapproval, joy, relief, gratitude, annoyance, nervousness, pride, sadness)], color='thistle')\nax.bar(emotions, amusement, bottom=[x+y+z+t+u+v+w+x+y for x,y,z,t,u,v,w,x,y in zip(disapproval, joy, relief, gratitude, annoyance, nervousness, pride, sadness, unboredom)], color='plum')\n\n# Create the second bar chart\nax2 = ax.twinx()\nax2.bar(emotions, frequency_metric_2, color='skyblue')\n\n# Set the labels and title\nax.set_xlabel('Emotion')\nax.set_ylabel('Frequency Metric 1 (%)')\nax2.set_ylabel('Frequency Metric 2 (%)')\nax.set_title('Emotion Frequency Metrics')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_84.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the first graph\nx = [0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7]\ny = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Plot the data\nax.plot(x, y)\n\n# Set the title and labels\nax.set_title('Score at Time 0')\nax.set_xlabel('Time')\nax.set_ylabel('Score')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_85.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the bar chart\ncountries = ['Japan', 'Australia', 'Canada', 'Germany', 'Italy', 'France', 'UK', 'USA']\nconsumption = [1200, 1300, 1400, 1500, 1600, 1700, 1800, 1900]\nproduction = [1000, 1100, 1200, 1300, 1400, 1500, 1600, 1700]\nratio = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Plot the bar chart\nax.bar(countries, consumption, color='red')\nax.bar(countries, production, bottom=consumption, color='blue')\nax.bar(countries, ratio, bottom=[c+p for c,p in zip(consumption, production)], color='green')\n\n# Set the title and labels\nax.set_title('Energy Consumption and Production by Country')\nax.set_xlabel('Country')\nax.set_ylabel('Energy (TWh)')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_86.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the left column\nleft_data = {\n    'synthetic data': [10, 10, 7, 24, 31, 8],\n    'human-authored data': [9, 16, 5, 11, 28, 16]\n}\n\n# Data for the right column\nright_data = {\n    'synthetic data': [10, 10, 7, 24, 31, 8],\n    'human-authored data': [9, 16, 5, 11, 28, 16]\n}\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Plot the left column\nax.barh(list(left_data.keys()), list(left_data.values())[0], color='blue', label='synthetic data')\nax.barh(list(left_data.keys()), list(left_data.values())[1], color='green', label='human-authored data')\n\n# Plot the right column\nax.barh(list(right_data.keys()), list(right_data.values())[0], color='red', label='synthetic data')\nax.barh(list(right_data.keys()), list(right_data.values())[1], color='purple', label='human-authored data')\n\n# Set the title and labels\nax.set_title('Original vs New')\nax.set_xlabel('Percentage')\nax.set_ylabel('Data Type')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_87.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\nbeauty_data = [-5, -5, -5, -5, -5, -5, -5, -5, -5, -5]\nyelp_data = [-5, -5, -5, -5, -5, -5, -5, -5, -5, -5]\nmore_data = [-5, -5, -5, -5, -5, -5, -5, -5, -5, -5]\n\n# Create a figure and axis\nfig, axes = plt.subplots(2, 2, figsize=(10.0, 8.0))\n\n# Plot the first graph\naxes[0, 0].bar(beauty_data, [6, 8, 10, 10, 10, 10, 10, 10, 10, 10], color='blue')\naxes[0, 0].set_title('Beauty')\naxes[0, 0].set_xlabel('Percentage')\naxes[0, 0].set_ylabel('Stars')\n\n# Plot the second graph\naxes[0, 1].bar(yelp_data, [4.8, 4.8, 4.8, 4.8, 4.8, 4.8, 4.8, 4.8, 4.8, 4.8], color='red')\naxes[0, 1].set_title('Yelp')\naxes[0, 1].set_xlabel('Percentage')\naxes[0, 1].set_ylabel('Stars')\n\n# Plot the third graph\naxes[1, 0].bar(more_data, [3.1, 3.1, 3.1, 3.1, 3.1, 3.1, 3.1, 3.1, 3.1, 3.1], color='green')\naxes[1, 0].set_title('More')\naxes[1, 0].set_xlabel('Percentage')\naxes[1, 0].set_ylabel('Stars')\n\n# Plot the fourth graph\naxes[1, 1].bar(more_data, [5.1, 5.1, 5.1, 5.1, 5.1, 5.1, 5.1, 5.1, 5.1, 5.1], color='purple')\naxes[1, 1].set_title('MovieLens-1M')\naxes[1, 1].set_xlabel('Percentage')\naxes[1, 1].set_ylabel('Stars')\n\n# Adjust layout\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_88.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\ngroups = ['Vicuna-HAG', 'Vicuna-Default', 'LLAMA-HAG', 'LLAMA-Default']\nscores = [-3.2, -3.3, -3.2, -3.3]\nconstraint_words = ['3 Constraint Words', '5 Constraint Words', '7 Constraint Words', '10 Constraint Words']\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\nbars = ax.bar(groups, scores, color='blue')\n\n# Add constraint words as labels\nfor bar, word in zip(bars, constraint_words):\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval, word, ha='center', va='bottom')\n\n# Set the title and labels\nax.set_title('Scores by group and constraint word count')\nax.set_xlabel('Group')\nax.set_ylabel('Score')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_89.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Set the background color of the plot\nax.set_facecolor('white')\n\n# Set the title of the plot\nax.set_title('Model Performance Metrics', fontsize=20)\n\n# Set the x-axis label\nax.set_xlabel('Top-10 super families in training dataset', fontsize=14)\n\n# Set the y-axis label\nax.set_ylabel('Metrics', fontsize=14)\n\n# Set the x-ticks\nax.set_xticks([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\nax.set_xticklabels(['1', '2', '3', '4', '5', '6', '7', '8', '9', '10'])\n\n# Set the y-limits\nax.set_ylim(0, 100)\n\n# Set the y-ticks\nax.set_yticks([0, 20, 40, 60, 80, 100])\n\n# Set the y-tick labels\nax.set_yticklabels(['0', '20', '40', '60', '80', '100'])\n\n# Set the grid\nax.grid(True)\n\n# Set the rectangle\nrect = plt.Rectangle((0, 0), 1, 1, fc='red')\nax.add_patch(rect)\n\n# Set the bars\nbars = [plt.Rectangle((i, 0), 1, 50, fc='blue') for i in range(10)]\nfor bar in bars:\n    ax.add_patch(bar)\n\n# Set the bars\nbars = [plt.Rectangle((i, 0), 1, 70, fc='pink') for i in range(10)]\nfor bar in bars:\n    ax.add_patch(bar)\n\n# Set the bars\nbars = [plt.Rectangle((i, 0), 1, 90, fc='purple') for i in range(10)]\nfor bar in bars:\n    ax.add_patch(bar)\n\n# Set the bars\nbars = [plt.Rectangle((i, 0), 1, 100, fc='orange') for i in range(10)]\nfor bar in bars:\n    ax.add_patch(bar)\n\n# Set the bars\nbars = [plt.Rectangle((i, 0), 1, 100, fc='green') for i in range(10)]\nfor bar in bars:\n    ax.add_patch(bar)\n\n# Set the bars\nbars = [plt.Rectangle((i, 0), 1, 100, fc='brown') for i in range(10)]\nfor bar in bars:\n    ax.add_patch(bar)\n\n# Set the bars\nbars = [plt.Rectangle((i, 0), 1, 100, fc='cyan') for i in range(10)]\nfor bar in bars:\n    ax.add_patch(bar)\n\n# Set the bars\nbars = [plt.Rectangle((i, 0), 1, 100, fc='magenta') for i in range(10)]\nfor bar in bars:\n    ax.add_patch(bar)\n\n# Set the bars\nbars = [plt.Rectangle((i, 0), 1, 100, fc='yellow') for i in range(10)]\nfor bar in bars:\n    ax.add_patch(bar)\n\n# Set the bars\nbars = [plt.Rectangle((i, 0), 1, 100, fc='black') for i in range(10)]\nfor bar in bars:\n    ax.add_patch(bar)\n\n# Set the bars\nbars = [plt.Rectangle((i, 0), 1, 100, fc='white') for i in range(10)]\nfor bar in bars:\n    ax.add_patch(bar)\n\n# Set the bars\nbars = [plt.Rectangle((i, 0), 1, 100, fc='gray') for i in range(10)]\nfor bar in bars:\n    ax.add_patch(bar)\n\n# Set the bars\nbars = [plt.Rectangle((i, 0), 1, 100, fc='silver') for i in range(10)]\nfor bar in bars:\n    ax.add_patch(bar)\n\n# Set the bars\nbars = [plt.Rectangle((i, 0), 1, 100, fc='gold') for i in range(10)]\nfor bar in bars:\n    ax.add_patch(bar)\n\n# Set the bars\nbars = [plt.Rectangle((i, 0), 1, 100, fc='brown') for i in range(10)]\nfor bar in bars:\n    ax.add_patch(bar)\n\n# Set the bars\nbars = [plt.Rectangle((i, 0), 1, 100, fc='cyan') for i in range(10)]\nfor bar in bars:\n    ax.add_patch(bar)\n\n# Set the bars\nbars = [plt.Rectangle((i, 0), 1, 100, fc='magenta') for i in range(10)]\nfor bar in bars:\n    ax.add_patch(bar)\n\n# Set the bars\nbars = [plt.Rectangle((i, 0), 1, 100, fc='yellow') for i in range(10)]\nfor bar in bars:\n    ax.add_patch(bar)\n\n# Set the bars\nbars = [plt.Rectangle((i, 0), 1, 100, fc='black') for i in range(10)]\nfor bar in bars:\n    ax.add_patch(bar)\n\n# Set the bars\nbars = [plt.Rectangle((i, 0), 1, 100, fc='white') for i in range(10)]\nfor bar in bars:\n    ax.add_patch(bar)\n\n# Set the bars\nbars = [plt.Rectangle((i, 0), 1, 100, fc='gray') for i in range(10)]\nfor bar in bars:\n    ax.add_patch(bar)\n\n# Set the bars\nbars = [plt.Rectangle((i, 0), 1, 100, fc='silver') for i in range(10)]\nfor bar in bars:\n    ax.add_patch(bar)\n\n# Set the bars\nbars = [plt.Rectangle((i, 0), 1, 100, fc='gold') for i in range(10)]\nfor bar in bars:\n    ax.add_patch(bar)\n\n# Set the bars\nbars = [plt.Rectangle((i, 0), 1, 100, fc='brown') for i in range(10)]\nfor bar in bars:\n    ax.add_patch(bar)\n\n# Set the bars\nbars = [plt.Rectangle((i, 0), 1, 100, fc='cyan') for i in range(10)]\nfor bar in bars:\n    ax.add_patch(bar)\n\n# Set the bars\nbars = [plt.Rectangle((i, 0), 1, 100, fc='magenta') for i in range(10)]\nfor bar in bars:\n    ax.add_patch(bar)\n\n# Set the bars\nbars = [plt.Rectangle((i, 0), 1, 100, fc='yellow') for i in range(10)]\nfor bar in bars:\n    ax.add_patch(bar)\n\n# Set the bars\nbars = [plt.Rectangle((i, 0), 1, 100, fc='black') for i in range(10)]\nfor bar in bars:\n    ax.add_patch(bar)\n\n# Set the bars\nbars = [plt.Rectangle((i, 0), 1, 100, fc='white') for i in range(10)]\nfor bar in bars:\n    ax.add_patch(bar)\n\n# Set the bars\nbars = [plt.Rectangle((i, 0), 1, 100, fc='gray') for i in range(10)]\nfor bar in bars:\n    ax.add_patch(bar)\n\n# Set the bars\nbars = [plt.Rectangle((i, 0), 1, 100, fc='silver') for i in range(10)]\nfor bar in bars:\n    ax.add_patch(bar)\n\n# Set the bars\nbars = [plt.Rectangle((i, 0), 1, 100, fc='gold') for i in range(10)]\nfor bar in bars:\n    ax.add_patch(bar)\n\n# Set the bars\nbars = [plt.Rectangle((i, 0), 1, 100, fc='brown') for i in range(10)]\nfor bar in bars:\n    ax.add_patch(bar)\n\n# Set the bars\nbars = [plt.Rectangle((i, 0), 1, 100, fc='cyan') for i in range(10)]\nfor bar in bars:\n    ax.add_patch(bar)\n\n# Set the bars\nbars = [plt.Rectangle((i, 0), 1, 100, fc='magenta') for i in range(10)]\nfor bar in bars:\n    ax.add_patch(bar)\n\n# Set the bars\nbars = [plt.Rectangle((i, 0), 1, 100, fc='yellow') for i in range(10)]\nfor bar in bars:\n    ax.add_patch(bar)\n\n# Set the bars\nbars = [plt.Rectangle((i, 0), 1, 100, fc='black') for i in range(10)]\nfor bar in bars:\n    ax.add_patch(bar)\n\n# Set the bars\nbars = [plt.Rectangle((i, 0), 1, 100, fc='white') for i in range(10)]\nfor bar in bars:\n    ax.add_patch(bar)\n\n# Set the bars\nbars = [plt.Rectangle((i, 0), 1, 100, fc='gray') for i in range(10)]\nfor bar in bars:\n    ax.add_patch(bar)\n\n# Set the bars\nbars = [plt.Rectangle((i, 0), 1, 100, fc='silver') for i in range(10)]\nfor bar in bars:\n    ax.add_patch(bar)\n\n# Set the bars\nbars = [plt.Rectangle((i, 0), 1, 100, fc='gold') for i in range(10)]\nfor bar in bars:\n    ax.add_patch(bar)\n\n# Set the bars\nbars = [plt.Rectangle((i, 0), 1, 100, fc='brown') for i in range(10)]\nfor bar in bars:\n    ax.add_patch(bar)\n\n# Set the bars\nbars = [plt.Rectangle((i, 0), 1, 100, fc='cyan') for i in range(10)]\nfor bar in bars:\n    ax.add_patch(bar)\n\n# Set the bars\nbars = [plt.Rectangle((i, 0), 1, 100, fc='magenta') for i in range(10)]\nfor bar in bars:\n    ax.add_patch(bar)\n\n# Set the bars\nbars = [plt.Rectangle((i, 0), 1, 100, fc='yellow') for i in range(10)]\nfor bar in bars:\n    ax.add_patch(bar)\n\n# Set the bars\nbars = [plt.Rectangle((i, 0), 1, 100, fc='black') for i in range(10)]\nfor bar in bars:\n    ax.add_patch(bar)\n\n# Set the bars\nbars = [plt.Rectangle((i, 0), 1, 100, fc='white') for i in range(10)]\nfor bar in bars:\n    ax.add_patch(bar)\n\n# Set the bars\nbars = [plt.Rectangle((i, 0), 1, 100, fc='gray') for i in range(10)]\nfor bar in bars:\n    ax.add_patch(bar)\n\n# Set the bars\nbars = [plt.Rectangle((i, 0), 1, 100, fc='silver') for i in range(10)]\nfor bar in bars:\n    ax.add_patch(bar)\n\n# Set the bars\nbars = [plt.Rectangle((i, 0), 1, 100, fc='gold') for i in range(10)]\nfor bar in bars:\n    ax.add_patch(bar)\n\n# Set the bars\nbars = [plt.Rectangle((i, 0), 1, 100, fc='brown') for i in range(10)]\nfor bar in bars:\n    ax.add_patch(bar)\n\n# Set the bars\nbars = [plt.Rectangle((i, 0), 1, 100, fc='cyan') for i in range(10)]\nfor bar in bars:\n    ax.add_patch(bar)\n\n# Set the bars\nbars = [plt.Rectangle((i, 0), 1, 100, fc='magenta') for i in range(10)]\nfor bar in bars:\n    ax.add_patch(bar)\n\n# Set the bars\nbars = [plt.Rectangle((i, 0), 1, 100, fc='yellow') for i in range(10)]\nfor bar in bars:\n    ax.add_patch(bar)\n\n# Set the bars\nbars = [plt.Rectangle((i, 0), 1, 100, fc='black') for i in range(10)]\nfor bar in bars:\n    ax.add_patch(bar)\n\n# Set the bars\nbars = [plt.Rectangle((i, 0), 1, 100, fc='white') for i in range(10)]\nfor bar in bars:\n    ax.add_patch(bar)\n\n# Set the bars\nbars = [plt.Rectangle((i, 0), 1, 100, fc='gray') for i in range(10)]\nfor bar in bars:\n    ax.add_patch(bar)\n\n# Set the bars\nbars = [plt.Rectangle((i, 0), 1, 100, fc='silver') for i in range(10)]\nfor bar in bars:\n    ax.add_patch(bar)\n\n# Set the bars\nbars = [plt.Rectangle((i, 0), 1, 100, fc='gold') for i in range(10)]\nfor bar in bars:\n    ax.add_patch(bar)\n\n# Set the bars\nbars = [plt.Rectangle((i, 0), 1, 100, fc='brown') for i in range(10)]\nfor bar in bars:\n    ax.add_patch(bar)\n\n# Set the bars\nbars = [plt.Rectangle((i, 0), 1, 100, fc='cyan') for i in range(10)]\nfor bar in bars:\n    ax.add_patch(bar)\n\n# Set the bars\nbars = [plt.Rectangle((i, 0), 1, 100, fc='magenta') for i in range(10)]\nfor bar in bars:\n    ax.add_patch(bar)\n\n# Set the bars\nbars = [plt.Rectangle((i, 0), 1, 100, fc='yellow') for i in range(10)]\nfor bar in bars:\n    ax.add_patch(bar)\n\n# Set the bars\nbars = [plt.Rectangle((i, 0), 1, 100, fc='black') for i in range(10)]\nfor bar in bars:\n    ax.add_patch(bar)\n\n# Set the bars\nbars = [plt.Rectangle((i, 0), 1, 100, fc='white') for i in range(10)]\nfor bar in bars:\n    ax.add_patch(bar)\n\n# Set the bars\nbars = [plt.Rectangle((i, 0), 1, 100, fc='gray') for i in range(10)]\nfor bar in bars:\n    ax.add_patch(bar)\n\n# Set the bars\nbars = [plt.Rectangle((i, 0), 1, 100, fc='silver') for i in range(10)]\nfor bar in bars:\n    ax.add_patch(bar)\n\n# Set the bars\nbars = [plt.Rectangle((i, 0), 1, 100, fc='gold') for i in range(10)]\nfor bar in bars:\n    ax.add_patch(bar)\n\n# Set the bars\nbars = [plt.Rectangle((i, 0), 1, 100, fc='brown') for i in range(10)]\nfor bar in bars:\n    ax.add_patch(bar)\n\n# Set the bars\nbars = [plt.Rectangle((i, 0), 1, 100, fc='cyan') for i in range(10)]\nfor bar in bars:\n    ax.add_patch(bar)\n\n# Set the bars\nbars = [plt.Rectangle((i, 0), 1, 100, fc='magenta') for i in range(10)]\nfor bar in bars:\n    ax.add_patch(bar)\n\n# Set the bars\nbars = [plt.Rectangle((i, 0), 1, 100, fc='yellow') for i in range(10)]\nfor bar in bars:\n    ax.add_patch(bar)\n\n# Set the bars\nbars = [plt.Rectangle((i, 0), 1, 100, fc='black') for i in range(10)]\nfor bar in bars:\n    ax.add_patch(bar)\n\n# Set the bars\nbars = [plt.Rectangle((i, 0), 1, 100, fc='white') for i in range(10)]\nfor bar in bars:\n    ax.add_patch(bar)\n\n# Set the bars\nbars = [plt.Rectangle((i, 0), 1, 100, fc='gray') for i in range(10)]\nfor bar in bars:\n    ax.add_patch(bar)\n\n# Set the bars\nbars = [plt.Rectangle((i, 0), 1, 100, fc='silver') for i in range(10)]\nfor bar in bars:\n    ax.add_patch(bar)\n\n# Set the bars\nbars = [plt.Rectangle((i, 0), 1, 100, fc='gold') for i in range(10)]\nfor bar in bars:\n    ax.add_patch(bar)\n\n# Set the bars\nbars = [plt.Rectangle((i, 0), 1, 100, fc='brown') for i in range(10)]\nfor bar in bars:\n    ax.add_patch(bar)\n\n# Set the bars\nbars = [plt.Rectangle((i, 0), 1, 100, fc='cyan') for i in range(10)]\nfor bar in bars:\n    ax.add_patch(bar)\n\n# Set the bars\nbars = [plt.Rectangle((i, 0), 1, 100, fc='magenta') for i in range(10)]\nfor bar in bars:\n    ax.add_patch(bar)\n\n# Set the bars\nbars = [plt.Rectangle((i"}
{"file": "dataset/ori_500/bar_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(9.0, 6.0))\n\n# Set the title of the plot\nax.set_title('GENIA')\n\n# Set the x-axis label\nax.set_xlabel('Type')\n\n# Set the y-axis label\nax.set_ylabel('Error correction rate (%)')\n\n# Define the data for the plot\nx = ['Type', 'Span', 'T&S', 'Spurious', 'Total']\ny1 = [50, 40, 30, 20, 10]\ny2 = [70, 60, 50, 40, 30]\ny3 = [80, 70, 60, 50, 40]\n\n# Plot the data\nax.plot(x, y1, color='pink')\nax.plot(x, y2, color='orange')\nax.plot(x, y3, color='green')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_90.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nmodels = ['GPT4V', 'OSCAR', 'LLaMA', 'BLIP2', 'BLIP1', 'Video-LLaMA', 'Lavila']\nscores_a = [82.5, 73.93, 31.79, 4.64, 4.64, 0.71, 0.0]\nscores_b = [80, 60, 40, 20, 10, 5, 25]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(12, 8))\n\n# Plot the bars for scores A\nfor i, score in enumerate(scores_a):\n    ax.bar(models[i], score, color='red' if i == 0 else 'yellow' if i == 1 else 'green' if i == 2 else 'blue' if i == 3 else 'purple' if i == 4 else 'pink' if i == 5 else 'orange')\n\n# Plot the bars for scores B\nfor i, score in enumerate(scores_b):\n    ax.bar(models[i], score, bottom=scores_a[i], color='blue' if i == 0 else 'cyan' if i == 1 else 'green' if i == 2 else 'purple' if i == 3 else 'pink' if i == 4 else 'orange' if i == 5 else 'brown')\n\n# Set the title of the plot\nax.set_title('Human Study')\n\n# Set the x-axis label\nax.set_xlabel('Model')\n\n# Set the y-axis label\nax.set_ylabel('Score')\n\n# Set the y-axis limits\nax.set_ylim(0, 80)\n\n# Set the y-axis ticks\nax.set_yticks(range(0, 81, 10))\n\n# Set the y-axis grid\nax.yaxis.grid(True)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_91.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\npheme = ['GCN', 'RvNN', 'Hyphen', 'GET']\nf1_scores = [75, 80, 85, 90]\nparty_colors = ['blue', 'orange', 'red']\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Plot the bar chart\nax.barh(pheme, f1_scores, color=party_colors)\n\n# Set the title and labels\nax.set_title('Pheme vs F1 Score')\nax.set_xlabel('F1 Score')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_92.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\nax.set_title('Resonance Preference Plot for rich-context')\nax.set_xlabel('Count')\nax.set_ylabel('Role')\n\n# Data for plot 1\nx = [0, 100, 200, 300, 400, 500, 600, 700, 800]\ny1 = ['human', 'gpt4', 'gpt4-cot']\ny2 = ['human', 'gpt4', 'gpt4-cot']\ny3 = ['human', 'gpt4', 'gpt4-cot']\n\n# Plot 1\nax.barh(y1, x, color='blue')\nax.barh(y2, x, color='orange')\nax.barh(y3, x, color='purple')\n\n# Data for plot 2\nx = [0, 100, 200, 300, 400, 500, 600, 700, 800]\ny1 = ['human', 'gpt4', 'gpt4-cot']\ny2 = ['human', 'gpt4', 'gpt4-cot']\ny3 = ['human', 'gpt4', 'gpt4-cot']\n\n# Plot 2\nax.barh(y1, x, color='blue')\nax.barh(y2, x, color='orange')\nax.barh(y3, x, color='purple')\n\n# Data for plot 3\nx = [0, 100, 200, 300, 400, 500, 600, 700, 800]\ny1 = ['human', 'gpt4', 'gpt4-cot']\ny2 = ['human', 'gpt4', 'gpt4-cot']\ny3 = ['human', 'gpt4', 'gpt4-cot']\n\n# Plot 3\nax.barh(y1, x, color='green')\nax.barh(y2, x, color='pink')\nax.barh(y3, x, color='purple')\n\n# Legend\nlegend_elements = [plt.Line2D([0], [0], marker='o', color='w', label='O1', markerfacecolor='lightgreen', markersize=10),\n                    plt.Line2D([0], [0], marker='o', color='w', label='T1', markerfacecolor='pink', markersize=10),\n                    plt.Line2D([0], [0], marker='o', color='w', label='P1', markerfacecolor='yellow', markersize=10)]\nax.legend(handles=legend_elements, loc='upper right')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_93.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for Effort\neffort_data = [20.4, 29.6, 20.4, 20.4, 9.3]\neffort_labels = ['Very Low', 'Low', 'Neutral', 'High', 'Very High']\neffort_colors = ['red', 'orange', 'yellow', 'green', 'darkgreen']\n\n# Data for Brainwave\nbrainwave_data = [23.8, 14.3, 16.7, 0, 20.4, 38.1, 7.1]\nbrainwave_labels = ['Very Low', 'Low', 'Neutral', 'High', 'Very High']\nbrainwave_colors = ['red', 'orange', 'yellow', 'green', 'darkgreen']\n\nfig, axes = plt.subplots(1, 2, figsize=(6, 3))\n\n# Plot Effort\naxes[0].bar(effort_labels, effort_data, color=effort_colors)\naxes[0].set_title('Effort')\naxes[0].set_xlabel('Intensity')\naxes[0].set_ylabel('Percentage')\n\n# Plot Brainwave\naxes[1].bar(brainwave_labels, brainwave_data, color=brainwave_colors)\naxes[1].set_title('Brainwave')\naxes[1].set_xlabel('Frequency')\naxes[1].set_ylabel('Percentage')\n\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_94.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\nbrightness = [0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3, 1.4]\ngain_change = [-10, -20, -30, -40, -50, -60, -70, -80, -90, -100]\nscale = [0.75, 0.8, 0.85, 0.9, 0.95, 1.0, 1.05, 1.1, 1.15, 1.2]\nrotation_angle = [-150, -120, -90, -60, -30, 0, 30, 60, 90, 120]\n\n# Create a figure and a set of subplots\nfig, axs = plt.subplots(2, 2, figsize=(10, 6))\n\n# Plot 1: Brightness vs Gain Change\naxs[0, 0].plot(brightness, gain_change, 'r-')\naxs[0, 0].set_title('Brightness')\naxs[0, 0].set_xlabel('Brightness')\naxs[0, 0].set_ylabel('Rate of Gain Change[%]')\n\n# Plot 2: Scale vs Gain Change\naxs[0, 1].plot(scale, gain_change, 'b-')\naxs[0, 1].set_title('Scale')\naxs[0, 1].set_xlabel('Scale')\naxs[0, 1].set_ylabel('Rate of Gain Change[%]')\n\n# Plot 3: Rotation Angle vs Gain Change\naxs[1, 0].plot(rotation_angle, gain_change, 'r-')\naxs[1, 0].set_title('Rotation Angle')\naxs[1, 0].set_xlabel('Rotation Angle [\u00b0]')\naxs[1, 0].set_ylabel('Rate of Gain Change[%]')\n\n# Plot 4: Brightness vs Rate of Gain Change\naxs[1, 1].plot(brightness, gain_change, 'b-')\naxs[1, 1].set_title('Rate of Gain Change')\naxs[1, 1].set_xlabel('Brightness')\naxs[1, 1].set_ylabel('Rate of Gain Change[%]')\n\n# Display the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_95.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nbrands = ['Bactrian-X EN', 'Lima-X DE', 'Bactrian-X FR', 'Lima-X IT', 'Bactrian-X ES']\nperformance = [3.5, 2.3, 4.4, 1.3, -0.7]\nimprovement = [-1.0, 0.3, 3.4, -3.3, -2.7]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Plot the bars for performance\nax.bar(brands, performance, color='blue')\n\n# Plot the bars for improvement\nax.bar(brands, improvement, bottom=performance, color='green')\n\n# Set the title and labels\nax.set_title('Model Performance Improvement by Language')\nax.set_xlabel('Model with Language')\nax.set_ylabel('Performance [mW]')\n\n# Add a horizontal line at y=0\nax.axhline(y=0, color='black', linewidth=0.5)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_96.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the first graph\nx1 = ['Random', 'Ours', 'SOTA']\ny1 = [66.3, 61.9, 53.8]\ncolors1 = ['blue', 'red', 'pink']\n\n# Data for the second graph\nx2 = ['Random', 'Ours', 'SOTA']\ny2 = [49.3, 45.7, 41.6]\ncolors2 = ['blue', 'red', 'pink']\n\n# Data for the third graph\nx3 = ['Random', 'Ours', 'SOTA']\ny3 = [48.0, 42.6, 36.5]\ncolors3 = ['blue', 'red', 'pink']\n\n# Data for the fourth graph\nx4 = ['Random', 'Ours', 'SOTA']\ny4 = [43.8, 40.2, 36.5]\ncolors4 = ['blue', 'red', 'pink']\n\n# Create a figure and a set of subplots\nfig, axs = plt.subplots(2, 2, figsize=(8.0, 8.0))\n\n# Plot the first graph\naxs[0, 0].bar(x1, y1, color=colors1)\naxs[0, 0].set_title('Truthful: Misleading = 2:0')\naxs[0, 0].set_ylim(-80, 80)\n\n# Plot the second graph\naxs[0, 1].bar(x2, y2, color=colors2)\naxs[0, 1].set_title('Truthful: Misleading = 2:1')\naxs[0, 1].set_ylim(-80, 80)\n\n# Plot the third graph\naxs[1, 0].bar(x3, y3, color=colors3)\naxs[1, 0].set_title('Truthful: Misleading = 2:2')\naxs[1, 0].set_ylim(-80, 80)\n\n# Plot the fourth graph\naxs[1, 1].bar(x4, y4, color=colors4)\naxs[1, 1].set_title('Truthful: Misleading = 1:2')\naxs[1, 1].set_ylim(-80, 80)\n\n# Display the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_97.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Set the title of the plot\nax.set_title('Human Labeling and Agreement Bias Checking 1')\n\n# Create a bar chart with the data\nax.bar([1, 2, 3, 4, 5, 6], [55, 45, 35, 25, 15, 5], color='pink')\nax.bar([1, 2, 3, 4, 5, 6], [50, 40, 30, 20, 10, 0], color='lightblue')\nax.bar([1, 2, 3, 4, 5, 6], [52, 42, 32, 22, 12, 2], color='lightgreen')\nax.bar([1, 2, 3, 4, 5, 6], [54, 44, 34, 24, 14, 4], color='orange')\nax.bar([1, 2, 3, 4, 5, 6], [51, 41, 31, 21, 11, 1], color='purple')\n\n# Set the x-axis label\nax.set_xlabel('Human Annotator')\n\n# Set the y-axis label\nax.set_ylabel('Scores')\n\n# Set the y-axis limits\nax.set_ylim(0, 60)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_98.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nmodels = ['Model A', 'Model B', 'Model C', 'Model D', 'Model E', 'Model F', 'Model G', 'Model H', 'Model I']\nscores = [54.9, 71.5, 79.2, 60.3, 54.5, 56.8, 92.6, 89.2, 83.3]\ncolors = ['green', 'orange']\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Plot bars\nfor i, model in enumerate(models):\n    ax.bar(model, scores[i], color=colors[i % len(colors)])\n\n# Set title and labels\nax.set_title('Performance Comparison by Model')\nax.set_xlabel('Models')\nax.set_ylabel('Scores')\n\n# Add horizontal lines for each model\nfor model in models:\n    ax.axhline(y=scores[models.index(model)], color='black', linestyle='-')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_99.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the first graph\ncategories = ['Traffic Flow', 'Accident Rate', 'Public Transport Usage', 'Road Conditions', 'Public Satisfaction']\nvalues = [150.0, 180.0, 75.0, 90.0, 80.0]\n\n# Data for the second graph\ncategories2 = ['Traffic Flow', 'Accident Rate', 'Public Transport Usage', 'Road Conditions', 'Public Satisfaction']\nvalues2 = [2.5, 2.0, 1.5, 2.0, 1.5]\n\n# Data for the third graph\ncategories3 = ['Traffic Flow', 'Accident Rate', 'Public Transport Usage', 'Road Conditions', 'Public Satisfaction']\nvalues3 = [2.5, 2.0, 1.5, 2.0, 1.5]\n\n# Data for the fourth graph\ncategories4 = ['Traffic Flow', 'Accident Rate', 'Public Transport Usage', 'Road Conditions', 'Public Satisfaction']\nvalues4 = [2.5, 2.0, 1.5, 2.0, 1.5]\n\n# Create a figure and a set of subplots\nfig, axs = plt.subplots(2, 2, figsize=(10, 8))\n\n# Plot the first graph\naxs[0, 0].bar(categories, values, color='orange')\naxs[0, 0].set_title('Dataset 1')\n\n# Plot the second graph\naxs[0, 1].bar(categories2, values2, color='blue')\naxs[0, 1].set_title('Dataset 2')\n\n# Plot the third graph\naxs[1, 0].bar(categories3, values3, color='green')\naxs[1, 0].set_title('Dataset 3')\n\n# Plot the fourth graph\naxs[1, 1].bar(categories4, values4, color='yellow')\naxs[1, 1].set_title('Dataset 4')\n\n# Adjust layout\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 8))\n\n# Set the title of the plot\nax.set_title('Dominance')\n\n# Set the x-axis label\nax.set_xlabel('SAM Rating')\n\n# Set the y-axis label\nax.set_ylabel('Color')\n\n# Define the data for the bars\nbars = ['neutral', 'neutral', 'yellow high', 'yellow high', 'yellow low', 'yellow low', 'green high', 'green high', 'green low', 'green low', 'blue high', 'blue high', 'blue low', 'blue low', 'red high', 'red high', 'red low', 'red low', 'red high', 'red high']\nsam_ratings = [5, 7, 3, 5, 4, 6, 2, 4, 3, 5, 1, 3, 2, 4, 1, 3, 2, 4, 3, 5]\n\n# Create a bar chart with the data\nax.barh(bars, sam_ratings, color='gray')\n\n# Set the limits of the x-axis\nax.set_xlim(1, 9)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(9, 5))\n\n# Set the title of the plot\nax.set_title('Daily Activity Durations')\n\n# Create a rectangle for the first activity\nrect1 = plt.Rectangle((20, 20), 30, 10, color='blue', fill=False)\nax.add_patch(rect1)\n\n# Create a rectangle for the second activity\nrect2 = plt.Rectangle((20, 40), 30, 10, color='green', fill=False)\nax.add_patch(rect2)\n\n# Create a rectangle for the third activity\nrect3 = plt.Rectangle((20, 60), 30, 10, color='red', fill=False)\nax.add_patch(rect3)\n\n# Create a rectangle for the fourth activity\nrect4 = plt.Rectangle((20, 80), 30, 10, color='yellow', fill=False)\nax.add_patch(rect4)\n\n# Create a rectangle for the fifth activity\nrect5 = plt.Rectangle((20, 100), 30, 10, color='cyan', fill=False)\nax.add_patch(rect5)\n\n# Create a rectangle for the sixth activity\nrect6 = plt.Rectangle((20, 120), 30, 10, color='magenta', fill=False)\nax.add_patch(rect6)\n\n# Create a rectangle for the seventh activity\nrect7 = plt.Rectangle((20, 140), 30, 10, color='black', fill=False)\nax.add_patch(rect7)\n\n# Create a rectangle for the eighth activity\nrect8 = plt.Rectangle((20, 160), 30, 10, color='white', fill=False)\nax.add_patch(rect8)\n\n# Create a rectangle for the ninth activity\nrect9 = plt.Rectangle((20, 180), 30, 10, color='gray', fill=False)\nax.add_patch(rect9)\n\n# Create a rectangle for the tenth activity\nrect10 = plt.Rectangle((20, 200), 30, 10, color='brown', fill=False)\nax.add_patch(rect10)\n\n# Create a rectangle for the eleventh activity\nrect11 = plt.Rectangle((20, 220), 30, 10, color='pink', fill=False)\nax.add_patch(rect11)\n\n# Create a rectangle for the twelfth activity\nrect12 = plt.Rectangle((20, 240), 30, 10, color='orange', fill=False)\nax.add_patch(rect12)\n\n# Create a rectangle for the thirteenth activity\nrect13 = plt.Rectangle((20, 260), 30, 10, color='purple', fill=False)\nax.add_patch(rect13)\n\n# Create a rectangle for the fourteenth activity\nrect14 = plt.Rectangle((20, 280), 30, 10, color='silver', fill=False)\nax.add_patch(rect14)\n\n# Create a rectangle for the fifteenth activity\nrect15 = plt.Rectangle((20, 300), 30, 10, color='gold', fill=False)\nax.add_patch(rect15)\n\n# Create a rectangle for the sixteenth activity\nrect16 = plt.Rectangle((20, 320), 30, 10, color='lime', fill=False)\nax.add_patch(rect16)\n\n# Create a rectangle for the seventeenth activity\nrect17 = plt.Rectangle((20, 340), 30, 10, color='navy', fill=False)\nax.add_patch(rect17)\n\n# Create a rectangle for the eighteenth activity\nrect18 = plt.Rectangle((20, 360), 30, 10, color='maroon', fill=False)\nax.add_patch(rect18)\n\n# Create a rectangle for the nineteenth activity\nrect19 = plt.Rectangle((20, 380), 30, 10, color='olive', fill=False)\nax.add_patch(rect19)\n\n# Create a rectangle for the twentieth activity\nrect20 = plt.Rectangle((20, 400), 30, 10, color='teal', fill=False)\nax.add_patch(rect20)\n\n# Create a rectangle for the twenty-first activity\nrect21 = plt.Rectangle((20, 420), 30, 10, color='coral', fill=False)\nax.add_patch(rect21)\n\n# Create a rectangle for the twenty-second activity\nrect22 = plt.Rectangle((20, 440), 30, 10, color='indigo', fill=False)\nax.add_patch(rect22)\n\n# Create a rectangle for the twenty-third activity\nrect23 = plt.Rectangle((20, 460), 30, 10, color='violet', fill=False)\nax.add_patch(rect23)\n\n# Create a rectangle for the twenty-fourth activity\nrect24 = plt.Rectangle((20, 480), 30, 10, color='azure', fill=False)\nax.add_patch(rect24)\n\n# Create a rectangle for the twenty-fifth activity\nrect25 = plt.Rectangle((20, 500), 30, 10, color='fuchsia', fill=False)\nax.add_patch(rect25)\n\n# Create a rectangle for the twenty-sixth activity\nrect26 = plt.Rectangle((20, 520), 30, 10, color='chartreuse', fill=False)\nax.add_patch(rect26)\n\n# Create a rectangle for the twenty-seventh activity\nrect27 = plt.Rectangle((20, 540), 30, 10, color='saddlebrown', fill=False)\nax.add_patch(rect27)\n\n# Create a rectangle for the twenty-eighth activity\nrect28 = plt.Rectangle((20, 560), 30, 10, color='sienna', fill=False)\nax.add_patch(rect28)\n\n# Create a rectangle for the twenty-ninth activity\nrect29 = plt.Rectangle((20, 580), 30, 10, color='tan', fill=False)\nax.add_patch(rect29)\n\n# Create a rectangle for the thirtieth activity\nrect30 = plt.Rectangle((20, 600), 30, 10, color='wheat', fill=False)\nax.add_patch(rect30)\n\n# Create a rectangle for the thirty-first activity\nrect31 = plt.Rectangle((20, 620), 30, 10, color='beige', fill=False)\nax.add_patch(rect31)\n\n# Create a rectangle for the thirty-second activity\nrect32 = plt.Rectangle((20, 640), 30, 10, color='lavender', fill=False)\nax.add_patch(rect32)\n\n# Create a rectangle for the thirty-third activity\nrect33 = plt.Rectangle((20, 660), 30, 10, color='plum', fill=False)\nax.add_patch(rect33)\n\n# Create a rectangle for the thirty-fourth activity\nrect34 = plt.Rectangle((20, 680), 30, 10, color='salmon', fill=False)\nax.add_patch(rect34)\n\n# Create a rectangle for the thirty-fifth activity\nrect35 = plt.Rectangle((20, 700), 30, 10, color='orchid', fill=False)\nax.add_patch(rect35)\n\n# Create a rectangle for the thirty-sixth activity\nrect36 = plt.Rectangle((20, 720), 30, 10, color='crimson', fill=False)\nax.add_patch(rect36)\n\n# Create a rectangle for the thirty-seventh activity\nrect37 = plt.Rectangle((20, 740), 30, 10, color='darkblue', fill=False)\nax.add_patch(rect37)\n\n# Create a rectangle for the thirty-eighth activity\nrect38 = plt.Rectangle((20, 760), 30, 10, color='darkgreen', fill=False)\nax.add_patch(rect38)\n\n# Create a rectangle for the thirty-ninth activity\nrect39 = plt.Rectangle((20, 780), 30, 10, color='darkred', fill=False)\nax.add_patch(rect39)\n\n# Create a rectangle for the fortieth activity\nrect40 = plt.Rectangle((20, 800), 30, 10, color='darkyellow', fill=False)\nax.add_patch(rect40)\n\n# Create a rectangle for the forty-first activity\nrect41 = plt.Rectangle((20, 820), 30, 10, color='darkcyan', fill=False)\nax.add_patch(rect41)\n\n# Create a rectangle for the forty-second activity\nrect42 = plt.Rectangle((20, 840), 30, 10, color='darkmagenta', fill=False)\nax.add_patch(rect42)\n\n# Create a rectangle for the forty-third activity\nrect43 = plt.Rectangle((20, 860), 30, 10, color='darkblack', fill=False)\nax.add_patch(rect43)\n\n# Create a rectangle for the forty-fourth activity\nrect44 = plt.Rectangle((20, 880), 30, 10, color='darkwhite', fill=False)\nax.add_patch(rect44)\n\n# Create a rectangle for the forty-fifth activity\nrect45 = plt.Rectangle((20, 900), 30, 10, color='darkgray', fill=False)\nax.add_patch(rect45)\n\n# Create a rectangle for the forty-sixth activity\nrect46 = plt.Rectangle((20, 920), 30, 10, color='darkbrown', fill=False)\nax.add_patch(rect46)\n\n# Create a rectangle for the forty-seventh activity\nrect47 = plt.Rectangle((20, 940), 30, 10, color='darkpink', fill=False)\nax.add_patch(rect47)\n\n# Create a rectangle for the forty-eighth activity\nrect48 = plt.Rectangle((20, 960), 30, 10, color='darkorange', fill=False)\nax.add_patch(rect48)\n\n# Create a rectangle for the forty-ninth activity\nrect49 = plt.Rectangle((20, 980), 30, 10, color='darkpurple', fill=False)\nax.add_patch(rect49)\n\n# Create a rectangle for the fiftieth activity\nrect50 = plt.Rectangle((20, 1000), 30, 10, color='darksilver', fill=False)\nax.add_patch(rect50)\n\n# Create a rectangle for the fifty-first activity\nrect51 = plt.Rectangle((20, 1020), 30, 10, color='darkgold', fill=False)\nax.add_patch(rect51)\n\n# Create a rectangle for the fifty-second activity\nrect52 = plt.Rectangle((20, 1040), 30, 10, color='darklime', fill=False)\nax.add_patch(rect52)\n\n# Create a rectangle for the fifty-third activity\nrect53 = plt.Rectangle((20, 1060), 30, 10, color='darknavy', fill=False)\nax.add_patch(rect53)\n\n# Create a rectangle for the fifty-fourth activity\nrect54 = plt.Rectangle((20, 1080), 30, 10, color='darkmaroon', fill=False)\nax.add_patch(rect54)\n\n# Create a rectangle for the fifty-fifth activity\nrect55 = plt.Rectangle((20, 1100), 30, 10, color='darkolive', fill=False)\nax.add_patch(rect55)\n\n# Create a rectangle for the fifty-sixth activity\nrect56 = plt.Rectangle((20, 1120), 30, 10, color='darkteal', fill=False)\nax.add_patch(rect56)\n\n# Create a rectangle for the fifty-seventh activity\nrect57 = plt.Rectangle((20, 1140), 30, 10, color='darkcoral', fill=False)\nax.add_patch(rect57)\n\n# Create a rectangle for the fifty-eighth activity\nrect58 = plt.Rectangle((20, 1160), 30, 10, color='darkindigo', fill=False)\nax.add_patch(rect58)\n\n# Create a rectangle for the fifty-ninth activity\nrect59 = plt.Rectangle((20, 1180), 30, 10, color='darkviolet', fill=False)\nax.add_patch(rect59)\n\n# Create a rectangle for the sixtieth activity\nrect60 = plt.Rectangle((20, 1200), 30, 10, color='darkazure', fill=False)\nax.add_patch(rect60)\n\n# Create a rectangle for the sixty-first activity\nrect61 = plt.Rectangle((20, 1220), 30, 10, color='darkfuchsia', fill=False)\nax.add_patch(rect61)\n\n# Create a rectangle for the sixty-second activity\nrect62 = plt.Rectangle((20, 1240), 30, 10, color='darkchartreuse', fill=False)\nax.add_patch(rect62)\n\n# Create a rectangle for the sixty-third activity\nrect63 = plt.Rectangle((20, 1260), 30, 10, color='darksaddlebrown', fill=False)\nax.add_patch(rect63)\n\n# Create a rectangle for the sixty-fourth activity\nrect64 = plt.Rectangle((20, 1280), 30, 10, color='darksienna', fill=False)\nax.add_patch(rect64)\n\n# Create a rectangle for the sixty-fifth activity\nrect65 = plt.Rectangle((20, 1300), 30, 10, color='darktan', fill=False)\nax.add_patch(rect65)\n\n# Create a rectangle for the sixty-sixth activity\nrect66 = plt.Rectangle((20, 1320), 30, 10, color='darkwheat', fill=False)\nax.add_patch(rect66)\n\n# Create a rectangle for the sixty-seventh activity\nrect67 = plt.Rectangle((20, 1340), 30, 10, color='darkbeige', fill=False)\nax.add_patch(rect67)\n\n# Create a rectangle for the sixty-eighth activity\nrect68 = plt.Rectangle((20, 1360), 30, 10, color='darklavender', fill=False)\nax.add_patch(rect68)\n\n# Create a rectangle for the sixty-ninth activity\nrect69 = plt.Rectangle((20, 1380), 30, 10, color='darkplum', fill=False)\nax.add_patch(rect69)\n\n# Create a rectangle for the seventieth activity\nrect70 = plt.Rectangle((20, 1400), 30, 10, color='darksalmon', fill=False)\nax.add_patch(rect70)\n\n# Create a rectangle for the seventy-first activity\nrect71 = plt.Rectangle((20, 1420), 30, 10, color='darkorchid', fill=False)\nax.add_patch(rect71)\n\n# Create a rectangle for the seventy-second activity\nrect72 = plt.Rectangle((20, 1440), 30, 10, color='darkcrimson', fill=False)\nax.add_patch(rect72)\n\n# Create a rectangle for the seventy-third activity\nrect73 = plt.Rectangle((20, 1460), 30, 10, color='darkdarkblue', fill=False)\nax.add_patch(rect73)\n\n# Create a rectangle for the seventy-fourth activity\nrect74 = plt.Rectangle((20, 1480), 30, 10, color='darkdarkgreen', fill=False)\nax.add_patch(rect74)\n\n# Create a rectangle for the seventy-fifth activity\nrect75 = plt.Rectangle((20, 1500), 30, 10, color='darkdarkred', fill=False)\nax.add_patch(rect75)\n\n# Create a rectangle for the seventy-sixth activity\nrect76 = plt.Rectangle((20, 1520), 30, 10, color='darkdarkyellow', fill=False)\nax.add_patch(rect76)\n\n# Create a rectangle for the seventy-seventh activity\nrect77 = plt.Rectangle((20, 1540), 30, 10, color='darkdarkcyan', fill=False)\nax.add_patch(rect77)\n\n# Create a rectangle for the seventy-eighth activity\nrect78 = plt.Rectangle((20, 1560), 30, 10, color='darkdarkmagenta', fill=False)\nax.add_patch(rect78)\n\n# Create a rectangle for the seventy-ninth activity\nrect79 = plt.Rectangle((20, 1580), 30, 10, color='darkdarkblack', fill=False)\nax.add_patch(rect79)\n\n# Create a rectangle for the eightieth activity\nrect80 = plt.Rectangle((20, 1600), 30, 10, color='darkdarkwhite', fill=False)\nax.add_patch(rect80)\n\n# Create a rectangle for the eightieth-first activity\nrect81 = plt.Rectangle((20, 1620), 30, 10, color='darkdarkgray', fill=False)\nax.add_patch(rect81)\n\n# Create a rectangle for the eightieth-second activity\nrect82 = plt.Rectangle((20, 1640), 30, 10, color='darkdarkbrown', fill=False)\nax.add_patch(rect82)\n\n# Create a rectangle for the eightieth-third activity\nrect83 = plt.Rectangle((20, 1660), 30, 10, color='darkdarkpink', fill=False)\nax.add_patch(rect"}
{"file": "dataset/ori_500/box_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Set the title of the plot\nax.set_title('1.0 BLEU')\n\n# Set the x-axis label\nax.set_xlabel('Llama-70b (T2TT)')\n\n# Set the y-axis label\nax.set_ylabel('Llama-70b (S2TT)')\n\n# Draw a rectangle for the first bar\nax.bar([0], [22], color='blue', width=0.5)\n\n# Draw a rectangle for the second bar\nax.bar([1], [20], color='green', width=0.5)\n\n# Draw a rectangle for the third bar\nax.bar([2], [18], color='red', width=0.5)\n\n# Draw a rectangle for the fourth bar\nax.bar([3], [16], color='yellow', width=0.5)\n\n# Draw a rectangle for the fifth bar\nax.bar([4], [14], color='orange', width=0.5)\n\n# Draw a rectangle for the sixth bar\nax.bar([5], [12], color='purple', width=0.5)\n\n# Draw a rectangle for the seventh bar\nax.bar([6], [10], color='brown', width=0.5)\n\n# Draw a rectangle for the eighth bar\nax.bar([7], [8], color='pink', width=0.5)\n\n# Draw a rectangle for the ninth bar\nax.bar([8], [6], color='gray', width=0.5)\n\n# Draw a rectangle for the tenth bar\nax.bar([9], [4], color='cyan', width=0.5)\n\n# Draw a rectangle for the eleventh bar\nax.bar([10], [2], color='magenta', width=0.5)\n\n# Draw a rectangle for the twelfth bar\nax.bar([11], [0], color='lime', width=0.5)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Gamma Distribution')\n\n# Set the x-axis label\nax.set_xlabel('Gamma (\u03b3)')\n\n# Set the y-axis label\nax.set_ylabel('(\u03c4) \u0394AF')\n\n# Set the x-ticks\nax.set_xticks([0.05, 0.1, 0.25])\n\n# Set the x-tick labels\nax.set_xticklabels(['Gamma(\u03b3) = 0.05', 'Gamma(\u03b3) = 0.1', 'Gamma(\u03b3) = 0.25'])\n\n# Set the y-ticks\nax.set_yticks([30, 40, 50])\n\n# Set the y-tick labels\nax.set_yticklabels(['30', '40', '50'])\n\n# Draw a rectangle with a width of 100 and a height of 50\nrectangle = plt.Rectangle((0.05, 30), 100, 50, fill=False, edgecolor='black')\nax.add_patch(rectangle)\n\n# Draw a rectangle with a width of 100 and a height of 50\nrectangle = plt.Rectangle((0.1, 40), 100, 50, fill=False, edgecolor='black')\nax.add_patch(rectangle)\n\n# Draw a rectangle with a width of 100 and a height of 50\nrectangle = plt.Rectangle((0.25, 50), 100, 50, fill=False, edgecolor='black')\nax.add_patch(rectangle)\n\n# Draw a rectangle with a width of 100 and a height of 50\nrectangle = plt.Rectangle((0.05, 30), 100, 50, fill=False, edgecolor='orange')\nax.add_patch(rectangle)\n\n# Draw a rectangle with a width of 100 and a height of 50\nrectangle = plt.Rectangle((0.1, 40), 100, 50, fill=False, edgecolor='orange')\nax.add_patch(rectangle)\n\n# Draw a rectangle with a width of 100 and a height of 50\nrectangle = plt.Rectangle((0.25, 50), 100, 50, fill=False, edgecolor='orange')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/box_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 5.0))\n\n# Set the title of the plot\nax.set_title('Execution Accuracy')\n\n# Set the x-axis label\nax.set_xlabel('Algorithm')\n\n# Set the y-axis label\nax.set_ylabel('Accuracy')\n\n# Define the data for the bar chart\nalgorithms = ['SQL-Only', 'PoT', 'IC-LP', 'DAIL', 'IC-LP+PoT']\naccuracies = [875, 875, 850, 825, 850]\n\n# Create a bar chart\nbars = ax.bar(algorithms, accuracies, color='lightblue')\n\n# Add text annotations to each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 1), ha='center', va='bottom')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Define the data for the first subplot\ndata1 = [0.88, 0.87, 0.83]\nlabels1 = ['DENSE (ref)', 'Joint Multimodal Framework (ours)', 'Cine']\ncolors1 = ['blue', 'brown', 'green']\n\n# Create a bar chart for the first subplot\nax.bar(labels1, data1, color=colors1)\nax.set_title('Region Classification Accuracy')\n\n# Define the data for the second subplot\ndata2 = [9.33, 9.00, 6.91, 9.33, 9.00]\nlabels2 = ['DENSE (ref)', 'Joint Multimodal Framework (ours)', 'Cine']\ncolors2 = ['orange', 'green', 'blue']\n\n# Create a bar chart for the second subplot\nax2 = ax.twinx()\nax2.bar(labels2, data2, color=colors2)\nax2.set_title('Slice Mean Error (ms)')\n\n# Set the y-axis limits\nax.set_ylim(0.6, 1.0)\nax2.set_ylim(2.5, 22.5)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8, 5))\n\n# Set the title of the plot\nax.set_title('Z-Score')\n\n# Set the x-axis label\nax.set_xlabel('w/o att')\n\n# Set the y-axis label\nax.set_ylabel('Z-Score')\n\n# Draw a horizontal line at y=5\nax.axhline(y=5, color='r', linestyle='-')\n\n# Draw a horizontal line at y=10\nax.axhline(y=10, color='r', linestyle='-')\n\n# Draw a horizontal line at y=15\nax.axhline(y=15, color='r', linestyle='-')\n\n# Draw a horizontal line at y=20\nax.axhline(y=20, color='r', linestyle='-')\n\n# Draw a horizontal line at y=25\nax.axhline(y=25, color='r', linestyle='-')\n\n# Draw a horizontal line at y=30\nax.axhline(y=30, color='r', linestyle='-')\n\n# Draw a horizontal line at y=35\nax.axhline(y=35, color='r', linestyle='-')\n\n# Draw a horizontal line at y=40\nax.axhline(y=40, color='r', linestyle='-')\n\n# Draw a horizontal line at y=45\nax.axhline(y=45, color='r', linestyle='-')\n\n# Draw a horizontal line at y=50\nax.axhline(y=50, color='r', linestyle='-')\n\n# Draw a horizontal line at y=55\nax.axhline(y=55, color='r', linestyle='-')\n\n# Draw a horizontal line at y=60\nax.axhline(y=60, color='r', linestyle='-')\n\n# Draw a horizontal line at y=65\nax.axhline(y=65, color='r', linestyle='-')\n\n# Draw a horizontal line at y=70\nax.axhline(y=70, color='r', linestyle='-')\n\n# Draw a horizontal line at y=75\nax.axhline(y=75, color='r', linestyle='-')\n\n# Draw a horizontal line at y=80\nax.axhline(y=80, color='r', linestyle='-')\n\n# Draw a horizontal line at y=85\nax.axhline(y=85, color='r', linestyle='-')\n\n# Draw a horizontal line at y=90\nax.axhline(y=90, color='r', linestyle='-')\n\n# Draw a horizontal line at y=95\nax.axhline(y=95, color='r', linestyle='-')\n\n# Draw a horizontal line at y=100\nax.axhline(y=100, color='r', linestyle='-')\n\n# Draw a horizontal line at y=105\nax.axhline(y=105, color='r', linestyle='-')\n\n# Draw a horizontal line at y=110\nax.axhline(y=110, color='r', linestyle='-')\n\n# Draw a horizontal line at y=115\nax.axhline(y=115, color='r', linestyle='-')\n\n# Draw a horizontal line at y=120\nax.axhline(y=120, color='r', linestyle='-')\n\n# Draw a horizontal line at y=125\nax.axhline(y=125, color='r', linestyle='-')\n\n# Draw a horizontal line at y=130\nax.axhline(y=130, color='r', linestyle='-')\n\n# Draw a horizontal line at y=135\nax.axhline(y=135, color='r', linestyle='-')\n\n# Draw a horizontal line at y=140\nax.axhline(y=140, color='r', linestyle='-')\n\n# Draw a horizontal line at y=145\nax.axhline(y=145, color='r', linestyle='-')\n\n# Draw a horizontal line at y=150\nax.axhline(y=150, color='r', linestyle='-')\n\n# Draw a horizontal line at y=155\nax.axhline(y=155, color='r', linestyle='-')\n\n# Draw a horizontal line at y=160\nax.axhline(y=160, color='r', linestyle='-')\n\n# Draw a horizontal line at y=165\nax.axhline(y=165, color='r', linestyle='-')\n\n# Draw a horizontal line at y=170\nax.axhline(y=170, color='r', linestyle='-')\n\n# Draw a horizontal line at y=175\nax.axhline(y=175, color='r', linestyle='-')\n\n# Draw a horizontal line at y=180\nax.axhline(y=180, color='r', linestyle='-')\n\n# Draw a horizontal line at y=185\nax.axhline(y=185, color='r', linestyle='-')\n\n# Draw a horizontal line at y=190\nax.axhline(y=190, color='r', linestyle='-')\n\n# Draw a horizontal line at y=195\nax.axhline(y=195, color='r', linestyle='-')\n\n# Draw a horizontal line at y=200\nax.axhline(y=200, color='r', linestyle='-')\n\n# Draw a horizontal line at y=205\nax.axhline(y=205, color='r', linestyle='-')\n\n# Draw a horizontal line at y=210\nax.axhline(y=210, color='r', linestyle='-')\n\n# Draw a horizontal line at y=215\nax.axhline(y=215, color='r', linestyle='-')\n\n# Draw a horizontal line at y=220\nax.axhline(y=220, color='r', linestyle='-')\n\n# Draw a horizontal line at y=225\nax.axhline(y=225, color='r', linestyle='-')\n\n# Draw a horizontal line at y=230\nax.axhline(y=230, color='r', linestyle='-')\n\n# Draw a horizontal line at y=235\nax.axhline(y=235, color='r', linestyle='-')\n\n# Draw a horizontal line at y=240\nax.axhline(y=240, color='r', linestyle='-')\n\n# Draw a horizontal line at y=245\nax.axhline(y=245, color='r', linestyle='-')\n\n# Draw a horizontal line at y=250\nax.axhline(y=250, color='r', linestyle='-')\n\n# Draw a horizontal line at y=255\nax.axhline(y=255, color='r', linestyle='-')\n\n# Draw a horizontal line at y=260\nax.axhline(y=260, color='r', linestyle='-')\n\n# Draw a horizontal line at y=265\nax.axhline(y=265, color='r', linestyle='-')\n\n# Draw a horizontal line at y=270\nax.axhline(y=270, color='r', linestyle='-')\n\n# Draw a horizontal line at y=275\nax.axhline(y=275, color='r', linestyle='-')\n\n# Draw a horizontal line at y=280\nax.axhline(y=280, color='r', linestyle='-')\n\n# Draw a horizontal line at y=285\nax.axhline(y=285, color='r', linestyle='-')\n\n# Draw a horizontal line at y=290\nax.axhline(y=290, color='r', linestyle='-')\n\n# Draw a horizontal line at y=295\nax.axhline(y=295, color='r', linestyle='-')\n\n# Draw a horizontal line at y=300\nax.axhline(y=300, color='r', linestyle='-')\n\n# Draw a horizontal line at y=305\nax.axhline(y=305, color='r', linestyle='-')\n\n# Draw a horizontal line at y=310\nax.axhline(y=310, color='r', linestyle='-')\n\n# Draw a horizontal line at y=315\nax.axhline(y=315, color='r', linestyle='-')\n\n# Draw a horizontal line at y=320\nax.axhline(y=320, color='r', linestyle='-')\n\n# Draw a horizontal line at y=325\nax.axhline(y=325, color='r', linestyle='-')\n\n# Draw a horizontal line at y=330\nax.axhline(y=330, color='r', linestyle='-')\n\n# Draw a horizontal line at y=335\nax.axhline(y=335, color='r', linestyle='-')\n\n# Draw a horizontal line at y=340\nax.axhline(y=340, color='r', linestyle='-')\n\n# Draw a horizontal line at y=345\nax.axhline(y=345, color='r', linestyle='-')\n\n# Draw a horizontal line at y=350\nax.axhline(y=350, color='r', linestyle='-')\n\n# Draw a horizontal line at y=355\nax.axhline(y=355, color='r', linestyle='-')\n\n# Draw a horizontal line at y=360\nax.axhline(y=360, color='r', linestyle='-')\n\n# Draw a horizontal line at y=365\nax.axhline(y=365, color='r', linestyle='-')\n\n# Draw a horizontal line at y=370\nax.axhline(y=370, color='r', linestyle='-')\n\n# Draw a horizontal line at y=375\nax.axhline(y=375, color='r', linestyle='-')\n\n# Draw a horizontal line at y=380\nax.axhline(y=380, color='r', linestyle='-')\n\n# Draw a horizontal line at y=385\nax.axhline(y=385, color='r', linestyle='-')\n\n# Draw a horizontal line at y=390\nax.axhline(y=390, color='r', linestyle='-')\n\n# Draw a horizontal line at y=395\nax.axhline(y=395, color='r', linestyle='-')\n\n# Draw a horizontal line at y=400\nax.axhline(y=400, color='r', linestyle='-')\n\n# Draw a horizontal line at y=405\nax.axhline(y=405, color='r', linestyle='-')\n\n# Draw a horizontal line at y=410\nax.axhline(y=410, color='r', linestyle='-')\n\n# Draw a horizontal line at y=415\nax.axhline(y=415, color='r', linestyle='-')\n\n# Draw a horizontal line at y=420\nax.axhline(y=420, color='r', linestyle='-')\n\n# Draw a horizontal line at y=425\nax.axhline(y=425, color='r', linestyle='-')\n\n# Draw a horizontal line at y=430\nax.axhline(y=430, color='r', linestyle='-')\n\n# Draw a horizontal line at y=435\nax.axhline(y=435, color='r', linestyle='-')\n\n# Draw a horizontal line at y=440\nax.axhline(y=440, color='r', linestyle='-')\n\n# Draw a horizontal line at y=445\nax.axhline(y=445, color='r', linestyle='-')\n\n# Draw a horizontal line at y=450\nax.axhline(y=450, color='r', linestyle='-')\n\n# Draw a horizontal line at y=455\nax.axhline(y=455, color='r', linestyle='-')\n\n# Draw a horizontal line at y=460\nax.axhline(y=460, color='r', linestyle='-')\n\n# Draw a horizontal line at y=465\nax.axhline(y=465, color='r', linestyle='-')\n\n# Draw a horizontal line at y=470\nax.axhline(y=470, color='r', linestyle='-')\n\n# Draw a horizontal line at y=475\nax.axhline(y=475, color='r', linestyle='-')\n\n# Draw a horizontal line at y=480\nax.axhline(y=480, color='r', linestyle='-')\n\n# Draw a horizontal line at y=485\nax.axhline(y=485, color='r', linestyle='-')\n\n# Draw a horizontal line at y=490\nax.axhline(y=490, color='r', linestyle='-')\n\n# Draw a horizontal line at y=495\nax.axhline(y=495, color='r', linestyle='-')\n\n# Draw a horizontal line at y=500\nax.axhline(y=500, color='r', linestyle='-')\n\n# Draw a horizontal line at y=505\nax.axhline(y=505, color='r', linestyle='-')\n\n# Draw a horizontal line at y=510\nax.axhline(y=510, color='r', linestyle='-')\n\n# Draw a horizontal line at y=515\nax.axhline(y=515, color='r', linestyle='-')\n\n# Draw a horizontal line at y=520\nax.axhline(y=520, color='r', linestyle='-')\n\n# Draw a horizontal line at y=525\nax.axhline(y=525, color='r', linestyle='-')\n\n# Draw a horizontal line at y=530\nax.axhline(y=530, color='r', linestyle='-')\n\n# Draw a horizontal line at y=535\nax.axhline(y=535, color='r', linestyle='-')\n\n# Draw a horizontal line at y=540\nax.axhline(y=540, color='r', linestyle='-')\n\n# Draw a horizontal line at y=545\nax.axhline(y=545, color='r', linestyle='-')\n\n# Draw a horizontal line at y=550\nax.axhline(y=550, color='r', linestyle='-')\n\n# Draw a horizontal line at y=555\nax.axhline(y=555, color='r', linestyle='-')\n\n# Draw a horizontal line at y=560\nax.axhline(y=560, color='r', linestyle='-')\n\n# Draw a horizontal line at y=565\nax.axhline(y=565, color='r', linestyle='-')\n\n# Draw a horizontal line at y=570\nax.axhline(y=570, color='r', linestyle='-')\n\n# Draw a horizontal line at y=575\nax.axhline(y=575, color='r', linestyle='-')\n\n# Draw a horizontal line at y=580\nax.axhline(y=580, color='r', linestyle='-')\n\n# Draw a horizontal line at y=585\nax.axhline(y=585, color='r', linestyle='-')\n\n# Draw a horizontal line at y=590\nax.axhline(y=590, color='r', linestyle='-')\n\n# Draw a horizontal line at y=595\nax.axhline(y=595, color='r', linestyle='-')\n\n# Draw a horizontal line at y=600\nax.axhline(y=600, color='r', linestyle='-')\n\n# Draw a horizontal line at y=605\nax.axhline(y=605, color='r', linestyle='-')\n\n# Draw a horizontal line at y=610\nax.axhline(y=610, color='r', linestyle='-')\n\n# Draw a horizontal line at y=615\nax.axhline(y=615, color='r', linestyle='-')\n\n# Draw a horizontal line at y=620\nax.axhline(y=620, color='r', linestyle='-')\n\n# Draw a horizontal line at y=625\nax.axhline(y=625, color='r', linestyle='-')\n\n# Draw a horizontal line at y=630\nax.axhline(y=630, color='r', linestyle='-')\n\n# Draw a horizontal line at y=635\nax.axhline(y=635, color='r', linestyle='-')\n\n# Draw a horizontal line at y=640\nax.axhline(y=640, color='r', linestyle='-')\n\n# Draw a horizontal line at y=645\nax.axhline(y=645, color='r', linestyle='-')\n\n# Draw a horizontal line at y=650\nax.axhline(y=650, color='r', linestyle='-')\n\n# Draw a horizontal line at y=655\nax.axhline(y=655, color='r', linestyle='-')\n\n# Draw a horizontal line at y=660\nax.axhline(y=660, color='r', linestyle='-')\n\n# Draw a horizontal line at y=665\nax.axhline(y=665, color='r', linestyle='-')\n\n# Draw a horizontal line at y=670\nax.axhline(y=670, color='r', linestyle='-')\n\n# Draw a horizontal line at y=675\nax.axhline(y=675, color='r', linestyle='-')\n\n# Draw a horizontal line at y=680\nax.axhline(y=680, color='r', linestyle='-')\n\n# Draw a horizontal line at y=685\nax.axhline(y=685, color='r', linestyle='-')\n\n# Draw a horizontal line at y=690\nax.axhline(y=690, color='r', linestyle='-')\n\n# Draw a horizontal line at y=695\nax.axhline(y=695, color='r', linestyle='-')\n\n# Draw a horizontal line at y=700\nax.axhline(y=700, color='r', linestyle='-')\n\n#"}
{"file": "dataset/ori_500/box_16.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(5.0, 5.0))\n\n# Set the title of the plot\nax.set_title('Mean')\n\n# Define the data for the rectangles\ndata = [\n    [1.2, 1.3, 1.4, 1.5],\n    [2.2, 2.3, 2.4, 2.5],\n    [3.2, 3.3, 3.4, 3.5]\n]\n\n# Define the colors for the rectangles\ncolors = ['blue', 'green', 'orange', 'purple']\n\n# Draw the rectangles\nfor i in range(len(data)):\n    for j in range(len(data[i])):\n        ax.add_patch(plt.Rectangle((i, j), 1, 1, color=colors[j]))\n\n# Set the limits of the x-axis and y-axis\nax.set_xlim(-0.5, len(data))\nax.set_ylim(-0.5, len(data[0]))\n\n# Set the labels of the x-axis and y-axis\nax.set_xlabel('X')\nax.set_ylabel('Y')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_17.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8, 4))\n\n# Set the background color of the plot\nax.set_facecolor('white')\n\n# Set the title of the plot\nax.set_title('Run Performance')\n\n# Set the x-axis label\nax.set_xlabel('Run')\n\n# Set the y-axis label\nax.set_ylabel('Value')\n\n# Define the data for the bars\nbars = ['Run 1', 'Run 2', 'Run 3', 'Run 4', 'Run 5', 'Run 6', 'Run 7', 'Run 8', 'Run 9', 'Run 10']\nvalues = [50, 60, 70, 80, 90, 100, 90, 80, 70, 60]\n\n# Create the bar chart\nax.bar(bars, values, color='blue')\n\n# Add a red dot at the top of each bar\nfor i, v in enumerate(values):\n    ax.plot(i, v, 'ro')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_18.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Set the background color of the plot\nax.set_facecolor('#F0E68C')\n\n# Set the title of the plot\nax.set_title('Stock Market Analysis', fontsize=20)\n\n# Set the x-axis label\nax.set_xlabel('Time of Day (in hours)', fontsize=14)\n\n# Set the y-axis label\nax.set_ylabel('Stock Price', fontsize=14)\n\n# Set the x-axis limits\nax.set_xlim(0, 10)\n\n# Set the y-axis limits\nax.set_ylim(0, 10)\n\n# Set the x-axis ticks\nax.set_xticks(np.arange(0, 11, 1))\n\n# Set the y-axis ticks\nax.set_yticks(np.arange(0, 11, 1))\n\n# Set the x-axis tick labels\nax.set_xticklabels(['0.0', '0.2', '0.4', '0.6', '0.8', '1.0'])\n\n# Set the y-axis tick labels\nax.set_yticklabels(['0.0', '0.2', '0.4', '0.6', '0.8', '1.0'])\n\n# Set the x-axis grid lines\nax.grid(axis='x', linestyle='--', linewidth=0.5)\n\n# Set the y-axis grid lines\nax.grid(axis='y', linestyle='--', linewidth=0.5)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='major', labelsize=12)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='major', labelsize=12)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='minor', bottom=False)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='minor', left=False)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', length=5)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', length=5)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', width=1)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', width=1)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', direction='in')\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', direction='in')\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', pad=5)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', pad=5)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', rotation=0)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', rotation=0)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', labelrotation=0)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', labelrotation=0)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', labelcolor='black')\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', labelcolor='black')\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', labelleft=True)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', labelright=False)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', labeltop=False)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', labelbottom=True)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', labelsize=12)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', labelsize=12)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', length=5)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', length=5)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', width=1)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', width=1)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', direction='in')\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', direction='in')\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', pad=5)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', pad=5)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', rotation=0)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', rotation=0)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', labelrotation=0)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', labelrotation=0)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', labelcolor='black')\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', labelcolor='black')\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', labelleft=True)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', labelright=False)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', labeltop=False)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', labelbottom=True)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', labelsize=12)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', labelsize=12)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', length=5)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', length=5)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', width=1)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', width=1)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', direction='in')\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', direction='in')\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', pad=5)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', pad=5)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', rotation=0)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', rotation=0)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', labelrotation=0)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', labelrotation=0)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', labelcolor='black')\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', labelcolor='black')\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', labelleft=True)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', labelright=False)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', labeltop=False)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', labelbottom=True)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', labelsize=12)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', labelsize=12)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', length=5)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', length=5)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', width=1)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', width=1)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', direction='in')\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', direction='in')\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', pad=5)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', pad=5)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', rotation=0)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', rotation=0)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', labelrotation=0)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', labelrotation=0)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', labelcolor='black')\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', labelcolor='black')\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', labelleft=True)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', labelright=False)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', labeltop=False)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', labelbottom=True)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', labelsize=12)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', labelsize=12)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', length=5)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', length=5)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', width=1)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', width=1)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', direction='in')\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', direction='in')\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', pad=5)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', pad=5)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', rotation=0)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', rotation=0)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', labelrotation=0)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', labelrotation=0)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', labelcolor='black')\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', labelcolor='black')\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', labelleft=True)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', labelright=False)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', labeltop=False)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', labelbottom=True)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', labelsize=12)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', labelsize=12)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', length=5)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', length=5)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', width=1)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', width=1)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', direction='in')\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', direction='in')\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', pad=5)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', pad=5)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', rotation=0)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', rotation=0)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', labelrotation=0)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', labelrotation=0)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', labelcolor='black')\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', labelcolor='black')\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', labelleft=True)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', labelright=False)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', labeltop=False)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', labelbottom=True)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', labelsize=12)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', labelsize=12)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', length=5)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', length=5)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', width=1)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', width=1)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', direction='in')\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', direction='in')\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', pad=5)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', pad=5)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', rotation=0)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', rotation=0)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', labelrotation=0)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', labelrotation=0)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', labelcolor='black')\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', labelcolor='black')\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', labelleft=True)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', labelright=False)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', labeltop=False)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', labelbottom=True)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', labelsize=12)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', labelsize=12)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', length=5)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', length=5)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', width=1)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', width=1)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', direction='in')\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', direction='in')\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', pad=5)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', pad=5)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', rotation=0)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', rotation=0)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', labelrotation=0)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', labelrotation=0)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', labelcolor='black')\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', labelcolor='black')\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', labelleft=True)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', labelright=False)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', labeltop"}
{"file": "dataset/ori_500/box_19.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, axes = plt.subplots(2, 3, figsize=(10, 4))\n\n# Define the data for each subplot\ndata = [\n    [0.5, 0.6, 0.7, 0.8, 0.9],\n    [0.4, 0.5, 0.6, 0.7, 0.8],\n    [0.3, 0.4, 0.5, 0.6, 0.7],\n    [0.2, 0.3, 0.4, 0.5, 0.6],\n    [0.1, 0.2, 0.3, 0.4, 0.5]\n]\n\n# Plot the data\nfor i, ax in enumerate(axes.flat):\n    ax.plot(data[i], 'ro-')\n    ax.set_title('BERT Base' if i == 0 else 'MacBERT' if i == 1 else 'English HLM')\n    ax.set_xlabel('Time (s)')\n    ax.set_ylabel('\u03b4 (m/s)')\n    ax.grid(True)\n\n# Adjust layout\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/box_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8, 6))\n\n# Define the data for the rectangles\nrectangles = [\n    (1, 1, 2, 2),  # (x, y, width, height)\n    (3, 1, 2, 2),\n    (5, 1, 2, 2),\n    (1, 3, 2, 2),\n    (3, 3, 2, 2),\n    (5, 3, 2, 2)\n]\n\n# Draw the rectangles\nfor rect in rectangles:\n    ax.add_patch(plt.Rectangle((rect[0], rect[1]), rect[2], rect[3], color='blue'))\n\n# Set the limits of the plot\nax.set_xlim(0, 7)\nax.set_ylim(0, 4)\n\n# Set the title of the plot\nax.set_title('Ratings')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_20.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the plots\ngroups = ['target', 'control']\nreaction_times = [2.5, 1.5]\ncorrect_response_ratio = [0.9, 0.7]\ncorrect_word_reaction_time = [1.4, 1.2]\ndigit_span = [8, 6]\n\n# Create a figure and a set of subplots\nfig, axs = plt.subplots(1, 5, figsize=(10, 5))\n\n# Plot 1: Digit span\naxs[0].bar(groups, digit_span, color='blue')\naxs[0].set_title('Digit span')\n\n# Plot 2: Lexical decision\naxs[1].bar(groups, reaction_times, color='orange')\naxs[1].set_title('Lexical decision')\n\n# Plot 3: Lexical decision\naxs[2].bar(groups, correct_response_ratio, color='orange')\naxs[2].set_title('Lexical decision')\n\n# Plot 4: Correct word reaction time\naxs[3].bar(groups, correct_word_reaction_time, color='blue')\naxs[3].set_title('Correct word reaction time')\n\n# Plot 5: Reaction time\naxs[4].bar(groups, reaction_times, color='orange')\naxs[4].set_title('Reaction time')\n\n# Adjust layout\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/box_21.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(9, 5))\n\n# Set the title of the plot\nax.set_title('Methods')\n\n# Define the data for the rectangles\ndata = [\n    [10, 20, 30, 40, 50, 60, 70, 80],\n    [10, 20, 30, 40, 50, 60, 70, 80],\n    [10, 20, 30, 40, 50, 60, 70, 80]\n]\n\n# Create a bar chart\nax.bar(range(len(data[0])), data[0], color='brown')\nax.bar(range(len(data[1])), data[1], color='green')\nax.bar(range(len(data[2])), data[2], color='purple')\n\n# Set the x-axis labels\nax.set_xlabel('Prediction Accuracy v_{D_1}')\n\n# Set the y-axis labels\nax.set_ylabel('Methods')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_22.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 5.0))\n\n# Define the data\nx = [50, 100, 150, 200, 350]\ny = [0.04, 0.04, 0.02, 0.02, 0.06]\n\n# Plot the data\nax.plot(x, y, 'bo-')\n\n# Set the title and labels\nax.set_title('Fish Reward vs Search Depth')\nax.set_xlabel('Search depth')\nax.set_ylabel('Reward')\n\n# Set the limits of the axes\nax.set_xlim(0, 400)\nax.set_ylim(-0.06, 0.08)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_23.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(9, 5))\n\n# Set the title of the plot\nax.set_title('Daily Activity Durations')\n\n# Define the activities and their durations\nactivities = ['Music Playtime', 'Reading Duration', 'Exercise Duration', 'Gaming Duration']\ndurations = [65.1, 55.7, 50.3, 29.5]\n\n# Plot the bars\nbars = ax.bar(activities, durations, color='blue')\n\n# Add labels to the bars\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 1), ha='center', va='bottom')\n\n# Set the limits of the x-axis\nax.set_xlim(-0.5, len(activities)-0.5)\n\n# Set the limits of the y-axis\nax.set_ylim(0, 90)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_24.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Set the background color of the plot\nax.set_facecolor('white')\n\n# Set the title of the plot\nax.set_title('Mean Value', fontsize=16)\n\n# Set the x-axis label\nax.set_xlabel('Intervention', fontsize=14)\n\n# Set the y-axis label\nax.set_ylabel('Value', fontsize=14)\n\n# Set the x-ticks\nax.set_xticks([0, 1, 2, 3, 4, 5, 6])\nax.set_xticklabels(['No Intervention', 'Low Intensity', 'High Intensity', 'Recovery', 'Nutrition', 'Environment'])\n\n# Set the y-ticks\nax.set_yticks([1.0, 1.2, 1.4, 1.6, 1.8, 2.0, 2.2, 2.4, 2.6, 2.8, 3.0])\n\n# Set the grid lines\nax.grid(True)\n\n# Set the bar colors\nbar_colors = ['yellow', 'orange', 'red', 'blue', 'purple', 'green']\n\n# Set the bar width\nbar_width = 0.5\n\n# Set the bar positions\nbar_positions = [0.25, 1.25, 2.25, 3.25, 4.25, 5.25]\n\n# Set the bar heights\nbar_heights = [2.8, 2.6, 2.4, 2.2, 2.0, 1.8]\n\n# Set the bar labels\nbar_labels = ['Bar 1', 'Bar 2', 'Bar 3', 'Bar 4', 'Bar 5', 'Bar 6']\n\n# Set the bar edges\nbar_edges = ['black', 'black', 'black', 'black', 'black', 'black']\n\n# Set the bar edge widths\nbar_edge_widths = [1, 1, 1, 1, 1, 1]\n\n# Set the bar edge colors\nbar_edge_colors = ['black', 'black', 'black', 'black', 'black', 'black']\n\n# Set the bar edge styles\nbar_edge_styles = ['-', '-', '-', '-', '-', '-']\n\n# Set the bar edge join styles\nbar_edge_join_styles = ['miter', 'miter', 'miter', 'miter', 'miter', 'miter']\n\n# Set the bar edge cap styles\nbar_edge_cap_styles = ['butt', 'butt', 'butt', 'butt', 'butt', 'butt']\n\n# Set the bar edge miter limits\nbar_edge_miter_limits = [4, 4, 4, 4, 4, 4]\n\n# Set the bar edge dash patterns\nbar_edge_dash_patterns = [[], [], [], [], [], []]\n\n# Set the bar edge dash offsets\nbar_edge_dash_offsets = [0, 0, 0, 0, 0, 0]\n\n# Set the bar edge dash caps\nbar_edge_dash_caps = ['butt', 'butt', 'butt', 'butt', 'butt', 'butt']\n\n# Set the bar edge dash join styles\nbar_edge_dash_join_styles = ['miter', 'miter', 'miter', 'miter', 'miter', 'miter']\n\n# Set the bar edge dash cap styles\nbar_edge_dash_cap_styles = ['butt', 'butt', 'butt', 'butt', 'butt', 'butt']\n\n# Set the bar edge miter limits\nbar_edge_miter_limits = [4, 4, 4, 4, 4, 4]\n\n# Set the bar edge dash patterns\nbar_edge_dash_patterns = [[], [], [], [], [], []]\n\n# Set the bar edge dash offsets\nbar_edge_dash_offsets = [0, 0, 0, 0, 0, 0]\n\n# Set the bar edge dash caps\nbar_edge_dash_caps = ['butt', 'butt', 'butt', 'butt', 'butt', 'butt']\n\n# Set the bar edge dash join styles\nbar_edge_dash_join_styles = ['miter', 'miter', 'miter', 'miter', 'miter', 'miter']\n\n# Set the bar edge dash cap styles\nbar_edge_dash_cap_styles = ['butt', 'butt', 'butt', 'butt', 'butt', 'butt']\n\n# Set the bar edge miter limits\nbar_edge_miter_limits = [4, 4, 4, 4, 4, 4]\n\n# Set the bar edge dash patterns\nbar_edge_dash_patterns = [[], [], [], [], [], []]\n\n# Set the bar edge dash offsets\nbar_edge_dash_offsets = [0, 0, 0, 0, 0, 0]\n\n# Set the bar edge dash caps\nbar_edge_dash_caps = ['butt', 'butt', 'butt', 'butt', 'butt', 'butt']\n\n# Set the bar edge dash join styles\nbar_edge_dash_join_styles = ['miter', 'miter', 'miter', 'miter', 'miter', 'miter']\n\n# Set the bar edge dash cap styles\nbar_edge_dash_cap_styles = ['butt', 'butt', 'butt', 'butt', 'butt', 'butt']\n\n# Set the bar edge miter limits\nbar_edge_miter_limits = [4, 4, 4, 4, 4, 4]\n\n# Set the bar edge dash patterns\nbar_edge_dash_patterns = [[], [], [], [], [], []]\n\n# Set the bar edge dash offsets\nbar_edge_dash_offsets = [0, 0, 0, 0, 0, 0]\n\n# Set the bar edge dash caps\nbar_edge_dash_caps = ['butt', 'butt', 'butt', 'butt', 'butt', 'butt']\n\n# Set the bar edge dash join styles\nbar_edge_dash_join_styles = ['miter', 'miter', 'miter', 'miter', 'miter', 'miter']\n\n# Set the bar edge dash cap styles\nbar_edge_dash_cap_styles = ['butt', 'butt', 'butt', 'butt', 'butt', 'butt']\n\n# Set the bar edge miter limits\nbar_edge_miter_limits = [4, 4, 4, 4, 4, 4]\n\n# Set the bar edge dash patterns\nbar_edge_dash_patterns = [[], [], [], [], [], []]\n\n# Set the bar edge dash offsets\nbar_edge_dash_offsets = [0, 0, 0, 0, 0, 0]\n\n# Set the bar edge dash caps\nbar_edge_dash_caps = ['butt', 'butt', 'butt', 'butt', 'butt', 'butt']\n\n# Set the bar edge dash join styles\nbar_edge_dash_join_styles = ['miter', 'miter', 'miter', 'miter', 'miter', 'miter']\n\n# Set the bar edge dash cap styles\nbar_edge_dash_cap_styles = ['butt', 'butt', 'butt', 'butt', 'butt', 'butt']\n\n# Set the bar edge miter limits\nbar_edge_miter_limits = [4, 4, 4, 4, 4, 4]\n\n# Set the bar edge dash patterns\nbar_edge_dash_patterns = [[], [], [], [], [], []]\n\n# Set the bar edge dash offsets\nbar_edge_dash_offsets = [0, 0, 0, 0, 0, 0]\n\n# Set the bar edge dash caps\nbar_edge_dash_caps = ['butt', 'butt', 'butt', 'butt', 'butt', 'butt']\n\n# Set the bar edge dash join styles\nbar_edge_dash_join_styles = ['miter', 'miter', 'miter', 'miter', 'miter', 'miter']\n\n# Set the bar edge dash cap styles\nbar_edge_dash_cap_styles = ['butt', 'butt', 'butt', 'butt', 'butt', 'butt']\n\n# Set the bar edge miter limits\nbar_edge_miter_limits = [4, 4, 4, 4, 4, 4]\n\n# Set the bar edge dash patterns\nbar_edge_dash_patterns = [[], [], [], [], [], []]\n\n# Set the bar edge dash offsets\nbar_edge_dash_offsets = [0, 0, 0, 0, 0, 0]\n\n# Set the bar edge dash caps\nbar_edge_dash_caps = ['butt', 'butt', 'butt', 'butt', 'butt', 'butt']\n\n# Set the bar edge dash join styles\nbar_edge_dash_join_styles = ['miter', 'miter', 'miter', 'miter', 'miter', 'miter']\n\n# Set the bar edge dash cap styles\nbar_edge_dash_cap_styles = ['butt', 'butt', 'butt', 'butt', 'butt', 'butt']\n\n# Set the bar edge miter limits\nbar_edge_miter_limits = [4, 4, 4, 4, 4, 4]\n\n# Set the bar edge dash patterns\nbar_edge_dash_patterns = [[], [], [], [], [], []]\n\n# Set the bar edge dash offsets\nbar_edge_dash_offsets = [0, 0, 0, 0, 0, 0]\n\n# Set the bar edge dash caps\nbar_edge_dash_caps = ['butt', 'butt', 'butt', 'butt', 'butt', 'butt']\n\n# Set the bar edge dash join styles\nbar_edge_dash_join_styles = ['miter', 'miter', 'miter', 'miter', 'miter', 'miter']\n\n# Set the bar edge dash cap styles\nbar_edge_dash_cap_styles = ['butt', 'butt', 'butt', 'butt', 'butt', 'butt']\n\n# Set the bar edge miter limits\nbar_edge_miter_limits = [4, 4, 4, 4, 4, 4]\n\n# Set the bar edge dash patterns\nbar_edge_dash_patterns = [[], [], [], [], [], []]\n\n# Set the bar edge dash offsets\nbar_edge_dash_offsets = [0, 0, 0, 0, 0, 0]\n\n# Set the bar edge dash caps\nbar_edge_dash_caps = ['butt', 'butt', 'butt', 'butt', 'butt', 'butt']\n\n# Set the bar edge dash join styles\nbar_edge_dash_join_styles = ['miter', 'miter', 'miter', 'miter', 'miter', 'miter']\n\n# Set the bar edge dash cap styles\nbar_edge_dash_cap_styles = ['butt', 'butt', 'butt', 'butt', 'butt', 'butt']\n\n# Set the bar edge miter limits\nbar_edge_miter_limits = [4, 4, 4, 4, 4, 4]\n\n# Set the bar edge dash patterns\nbar_edge_dash_patterns = [[], [], [], [], [], []]\n\n# Set the bar edge dash offsets\nbar_edge_dash_offsets = [0, 0, 0, 0, 0, 0]\n\n# Set the bar edge dash caps\nbar_edge_dash_caps = ['butt', 'butt', 'butt', 'butt', 'butt', 'butt']\n\n# Set the bar edge dash join styles\nbar_edge_dash_join_styles = ['miter', 'miter', 'miter', 'miter', 'miter', 'miter']\n\n# Set the bar edge dash cap styles\nbar_edge_dash_cap_styles = ['butt', 'butt', 'butt', 'butt', 'butt', 'butt']\n\n# Set the bar edge miter limits\nbar_edge_miter_limits = [4, 4, 4, 4, 4, 4]\n\n# Set the bar edge dash patterns\nbar_edge_dash_patterns = [[], [], [], [], [], []]\n\n# Set the bar edge dash offsets\nbar_edge_dash_offsets = [0, 0, 0, 0, 0, 0]\n\n# Set the bar edge dash caps\nbar_edge_dash_caps = ['butt', 'butt', 'butt', 'butt', 'butt', 'butt']\n\n# Set the bar edge dash join styles\nbar_edge_dash_join_styles = ['miter', 'miter', 'miter', 'miter', 'miter', 'miter']\n\n# Set the bar edge dash cap styles\nbar_edge_dash_cap_styles = ['butt', 'butt', 'butt', 'butt', 'butt', 'butt']\n\n# Set the bar edge miter limits\nbar_edge_miter_limits = [4, 4, 4, 4, 4, 4]\n\n# Set the bar edge dash patterns\nbar_edge_dash_patterns = [[], [], [], [], [], []]\n\n# Set the bar edge dash offsets\nbar_edge_dash_offsets = [0, 0, 0, 0, 0, 0]\n\n# Set the bar edge dash caps\nbar_edge_dash_caps = ['butt', 'butt', 'butt', 'butt', 'butt', 'butt']\n\n# Set the bar edge dash join styles\nbar_edge_dash_join_styles = ['miter', 'miter', 'miter', 'miter', 'miter', 'miter']\n\n# Set the bar edge dash cap styles\nbar_edge_dash_cap_styles = ['butt', 'butt', 'butt', 'butt', 'butt', 'butt']\n\n# Set the bar edge miter limits\nbar_edge_miter_limits = [4, 4, 4, 4, 4, 4]\n\n# Set the bar edge dash patterns\nbar_edge_dash_patterns = [[], [], [], [], [], []]\n\n# Set the bar edge dash offsets\nbar_edge_dash_offsets = [0, 0, 0, 0, 0, 0]\n\n# Set the bar edge dash caps\nbar_edge_dash_caps = ['butt', 'butt', 'butt', 'butt', 'butt', 'butt']\n\n# Set the bar edge dash join styles\nbar_edge_dash_join_styles = ['miter', 'miter', 'miter', 'miter', 'miter', 'miter']\n\n# Set the bar edge dash cap styles\nbar_edge_dash_cap_styles = ['butt', 'butt', 'butt', 'butt', 'butt', 'butt']\n\n# Set the bar edge miter limits\nbar_edge_miter_limits = [4, 4, 4, 4, 4, 4]\n\n# Set the bar edge dash patterns\nbar_edge_dash_patterns = [[], [], [], [], [], []]\n\n# Set the bar edge dash offsets\nbar_edge_dash_offsets = [0, 0, 0, 0, 0, 0]\n\n# Set the bar edge dash caps\nbar_edge_dash_caps = ['butt', 'butt', 'butt', 'butt', 'butt', 'butt']\n\n# Set the bar edge dash join styles\nbar_edge_dash_join_styles = ['miter', 'miter', 'miter', 'miter', 'miter', 'miter']\n\n# Set the bar edge dash cap styles\nbar_edge_dash_cap_styles = ['butt', 'butt', 'butt', 'butt', 'butt', 'butt']\n\n# Set the bar edge miter limits\nbar_edge_miter_limits = [4, 4, 4, 4, 4, 4]\n\n# Set the bar edge dash patterns\nbar_edge_dash_patterns = [[], [], [], [], [], []]\n\n# Set the bar edge dash offsets\nbar_edge_dash_offsets = [0, 0, 0, 0, 0, 0]\n\n# Set the bar edge dash caps\nbar_edge_dash_caps = ['butt', 'butt', 'butt', 'butt', 'butt', 'butt']\n\n# Set the bar edge dash join styles\nbar_edge_dash_join_styles = ['miter', 'miter', 'miter', 'miter', 'miter', 'miter']\n\n# Set the bar edge dash cap styles\nbar_edge_dash_cap_styles = ['butt', 'butt', 'butt', 'butt', 'butt', 'butt']\n\n# Set the bar edge miter limits\nbar_edge_miter_limits = [4, 4, 4, 4, 4, 4]\n\n# Set the bar edge dash patterns\nbar_edge_dash_patterns = [[], [], [], [], [], []]\n\n# Set the bar edge dash offsets\nbar_edge_dash_offsets = [0, 0, 0, 0, 0, 0]\n\n# Set the bar edge dash caps\nbar_edge_dash_caps = ['butt', 'butt', 'butt', 'butt', 'butt', 'butt']\n\n# Set the bar edge dash join styles\nbar_edge_dash_join_styles = ['miter', 'miter', 'miter', 'miter', 'miter', 'miter']\n\n# Set the bar edge dash cap styles\nbar_edge_dash_cap_styles = ['butt', 'butt', 'butt', 'butt', 'butt', 'butt']\n\n# Set the bar edge miter limits\nbar_edge_miter_limits = [4, 4, 4, 4, 4, 4]\n\n# Set the bar edge dash patterns\nbar_edge_dash_patterns = [[], [], [], [], [], []]\n\n# Set the bar edge dash offsets\nbar_edge_dash_offsets = [0, 0, 0, 0, 0, 0]\n\n# Set the bar edge dash caps\nbar_edge_dash_caps = ['butt', 'butt', 'butt', 'butt', 'butt', 'butt']\n\n# Set the bar edge dash join styles\nbar_edge_dash_join_styles = ['miter', 'miter', 'miter', 'miter', 'miter', 'miter']\n\n# Set the bar edge dash cap styles\nbar_edge_dash_cap_styles = ['butt', 'butt', 'butt', 'butt', 'butt', 'butt']\n\n# Set the bar edge miter limits\nbar_edge_miter_limits = [4, 4, 4, 4, 4, 4]\n\n# Set the bar edge dash patterns\nbar_edge_dash_patterns = [[], [], [], [], [], []]\n\n# Set the bar edge dash offsets\nbar_edge_dash_offsets = [0, 0, 0, 0, 0, 0]\n\n# Set the bar edge dash caps\nbar_edge_dash_caps = ['butt', 'butt', 'butt', 'butt', 'butt', 'butt']\n\n# Set the bar edge dash join styles\nbar_edge_dash_join_styles = ['miter', 'miter', 'miter', 'miter', 'miter', 'miter']\n\n# Set the bar edge dash cap styles\nbar_edge_dash_cap_styles = ['butt', 'butt', 'butt', 'butt', 'butt', 'butt']\n\n# Set the bar edge miter limits\nbar_edge_miter_limits = [4, 4, 4, 4, 4, 4]\n\n# Set the bar edge dash patterns\nbar_edge_dash_patterns = [[], [], [], [], [], []]\n\n# Set the bar edge dash offsets\nbar_edge_dash_offsets = [0, 0, 0, 0, 0, 0]\n\n# Set the bar edge dash caps\nbar_edge_dash_caps = ['butt', 'butt', 'butt', 'butt', 'butt', 'butt']\n\n# Set the bar edge dash join styles\nbar_edge_dash_join_styles"}
{"file": "dataset/ori_500/box_25.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Set the background color of the plot\nax.set_facecolor('lightgrey')\n\n# Set the title of the plot\nax.set_title('Performance Metrics', fontsize=20)\n\n# Set the x-axis label\nax.set_xlabel('Thrust Angle [\u00b0]', fontsize=14)\n\n# Set the y-axis label\nax.set_ylabel('Angular Frequency [rad/s]', fontsize=14)\n\n# Set the x-axis limits\nax.set_xlim(-40, 40)\n\n# Set the y-axis limits\nax.set_ylim(0, 7.6)\n\n# Set the x-axis ticks\nax.set_xticks(range(-40, 50, 10))\n\n# Set the y-axis ticks\nax.set_yticks(range(0, 8, 1))\n\n# Set the x-axis tick labels\nax.set_xticklabels(['-40', '-30', '-20', '0', '20', '30', '40'])\n\n# Set the y-axis tick labels\nax.set_yticklabels(['0', '1.6', '3.6', '5.6', '7.6'])\n\n# Set the grid lines\nax.grid(True)\n\n# Set the color of the grid lines\nax.grid(color='black')\n\n# Set the color of the border lines\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the color of the title\nax.set_title('Performance Metrics', color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('Thrust Angle [\u00b0]', color='black')\n\n# Set the color of the y-axis label\nax.set_ylabel('Angular Frequency [rad/s]', color='black')\n\n# Set the color of the x-axis ticks\nax.set_xticklabels(['-40', '-30', '-20', '0', '20', '30', '40'], color='black')\n\n# Set the color of the y-axis ticks\nax.set_yticklabels(['0', '1.6', '3.6', '5.6', '7.6'], color='black')\n\n# Set the color of the grid lines\nax.grid(color='black')\n\n# Set the color of the border lines\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the color of the title\nax.set_title('Performance Metrics', color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('Thrust Angle [\u00b0]', color='black')\n\n# Set the color of the y-axis label\nax.set_ylabel('Angular Frequency [rad/s]', color='black')\n\n# Set the color of the x-axis ticks\nax.set_xticklabels(['-40', '-30', '-20', '0', '20', '30', '40'], color='black')\n\n# Set the color of the y-axis ticks\nax.set_yticklabels(['0', '1.6', '3.6', '5.6', '7.6'], color='black')\n\n# Set the color of the grid lines\nax.grid(color='black')\n\n# Set the color of the border lines\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the color of the title\nax.set_title('Performance Metrics', color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('Thrust Angle [\u00b0]', color='black')\n\n# Set the color of the y-axis label\nax.set_ylabel('Angular Frequency [rad/s]', color='black')\n\n# Set the color of the x-axis ticks\nax.set_xticklabels(['-40', '-30', '-20', '0', '20', '30', '40'], color='black')\n\n# Set the color of the y-axis ticks\nax.set_yticklabels(['0', '1.6', '3.6', '5.6', '7.6'], color='black')\n\n# Set the color of the grid lines\nax.grid(color='black')\n\n# Set the color of the border lines\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the color of the title\nax.set_title('Performance Metrics', color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('Thrust Angle [\u00b0]', color='black')\n\n# Set the color of the y-axis label\nax.set_ylabel('Angular Frequency [rad/s]', color='black')\n\n# Set the color of the x-axis ticks\nax.set_xticklabels(['-40', '-30', '-20', '0', '20', '30', '40'], color='black')\n\n# Set the color of the y-axis ticks\nax.set_yticklabels(['0', '1.6', '3.6', '5.6', '7.6'], color='black')\n\n# Set the color of the grid lines\nax.grid(color='black')\n\n# Set the color of the border lines\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the color of the title\nax.set_title('Performance Metrics', color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('Thrust Angle [\u00b0]', color='black')\n\n# Set the color of the y-axis label\nax.set_ylabel('Angular Frequency [rad/s]', color='black')\n\n# Set the color of the x-axis ticks\nax.set_xticklabels(['-40', '-30', '-20', '0', '20', '30', '40'], color='black')\n\n# Set the color of the y-axis ticks\nax.set_yticklabels(['0', '1.6', '3.6', '5.6', '7.6'], color='black')\n\n# Set the color of the grid lines\nax.grid(color='black')\n\n# Set the color of the border lines\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the color of the title\nax.set_title('Performance Metrics', color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('Thrust Angle [\u00b0]', color='black')\n\n# Set the color of the y-axis label\nax.set_ylabel('Angular Frequency [rad/s]', color='black')\n\n# Set the color of the x-axis ticks\nax.set_xticklabels(['-40', '-30', '-20', '0', '20', '30', '40'], color='black')\n\n# Set the color of the y-axis ticks\nax.set_yticklabels(['0', '1.6', '3.6', '5.6', '7.6'], color='black')\n\n# Set the color of the grid lines\nax.grid(color='black')\n\n# Set the color of the border lines\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the color of the title\nax.set_title('Performance Metrics', color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('Thrust Angle [\u00b0]', color='black')\n\n# Set the color of the y-axis label\nax.set_ylabel('Angular Frequency [rad/s]', color='black')\n\n# Set the color of the x-axis ticks\nax.set_xticklabels(['-40', '-30', '-20', '0', '20', '30', '40'], color='black')\n\n# Set the color of the y-axis ticks\nax.set_yticklabels(['0', '1.6', '3.6', '5.6', '7.6'], color='black')\n\n# Set the color of the grid lines\nax.grid(color='black')\n\n# Set the color of the border lines\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the color of the title\nax.set_title('Performance Metrics', color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('Thrust Angle [\u00b0]', color='black')\n\n# Set the color of the y-axis label\nax.set_ylabel('Angular Frequency [rad/s]', color='black')\n\n# Set the color of the x-axis ticks\nax.set_xticklabels(['-40', '-30', '-20', '0', '20', '30', '40'], color='black')\n\n# Set the color of the y-axis ticks\nax.set_yticklabels(['0', '1.6', '3.6', '5.6', '7.6'], color='black')\n\n# Set the color of the grid lines\nax.grid(color='black')\n\n# Set the color of the border lines\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the color of the title\nax.set_title('Performance Metrics', color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('Thrust Angle [\u00b0]', color='black')\n\n# Set the color of the y-axis label\nax.set_ylabel('Angular Frequency [rad/s]', color='black')\n\n# Set the color of the x-axis ticks\nax.set_xticklabels(['-40', '-30', '-20', '0', '20', '30', '40'], color='black')\n\n# Set the color of the y-axis ticks\nax.set_yticklabels(['0', '1.6', '3.6', '5.6', '7.6'], color='black')\n\n# Set the color of the grid lines\nax.grid(color='black')\n\n# Set the color of the border lines\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the color of the title\nax.set_title('Performance Metrics', color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('Thrust Angle [\u00b0]', color='black')\n\n# Set the color of the y-axis label\nax.set_ylabel('Angular Frequency [rad/s]', color='black')\n\n# Set the color of the x-axis ticks\nax.set_xticklabels(['-40', '-30', '-20', '0', '20', '30', '40'], color='black')\n\n# Set the color of the y-axis ticks\nax.set_yticklabels(['0', '1.6', '3.6', '5.6', '7.6'], color='black')\n\n# Set the color of the grid lines\nax.grid(color='black')\n\n# Set the color of the border lines\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the color of the title\nax.set_title('Performance Metrics', color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('Thrust Angle [\u00b0]', color='black')\n\n# Set the color of the y-axis label\nax.set_ylabel('Angular Frequency [rad/s]', color='black')\n\n# Set the color of the x-axis ticks\nax.set_xticklabels(['-40', '-30', '-20', '0', '20', '30', '40'], color='black')\n\n# Set the color of the y-axis ticks\nax.set_yticklabels(['0', '1.6', '3.6', '5.6', '7.6'], color='black')\n\n# Set the color of the grid lines\nax.grid(color='black')\n\n# Set the color of the border lines\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the color of the title\nax.set_title('Performance Metrics', color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('Thrust Angle [\u00b0]', color='black')\n\n# Set the color of the y-axis label\nax.set_ylabel('Angular Frequency [rad/s]', color='black')\n\n# Set the color of the x-axis ticks\nax.set_xticklabels(['-40', '-30', '-20', '0', '20', '30', '40'], color='black')\n\n# Set the color of the y-axis ticks\nax.set_yticklabels(['0', '1.6', '3.6', '5.6', '7.6'], color='black')\n\n# Set the color of the grid lines\nax.grid(color='black')\n\n# Set the color of the border lines\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the color of the title\nax.set_title('Performance Metrics', color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('Thrust Angle [\u00b0]', color='black')\n\n# Set the color of the y-axis label\nax.set_ylabel('Angular Frequency [rad/s]', color='black')\n\n# Set the color of the x-axis ticks\nax.set_xticklabels(['-40', '-30', '-20', '0', '20', '30', '40'], color='black')\n\n# Set the color of the y-axis ticks\nax.set_yticklabels(['0', '1.6', '3.6', '5.6', '7.6'], color='black')\n\n# Set the color of the grid lines\nax.grid(color='black')\n\n# Set the color of the border lines\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the color of the title\nax.set_title('Performance Metrics', color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('Thrust Angle [\u00b0]', color='black')\n\n# Set the color of the y-axis label\nax.set_ylabel('Angular Frequency [rad/s]', color='black')\n\n# Set the color of the x-axis ticks\nax.set_xticklabels(['-40', '-30', '-20', '0', '20', '30', '40'], color='black')\n\n# Set the color of the y-axis ticks\nax.set_yticklabels(['0', '1.6', '3.6', '5.6', '7.6'], color='black')\n\n# Set the color of the grid lines\nax.grid(color='black')\n\n# Set the color of the border lines\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the color of the title\nax.set_title('Performance Metrics', color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('Thrust Angle [\u00b0]', color='black')\n\n# Set the color of the y-axis label\nax.set_ylabel('Angular Frequency [rad/s]', color='black')\n\n# Set the color of the x-axis ticks\nax.set_xticklabels(['-40', '-30', '-20', '0', '20', '30', '40'], color='black')\n\n# Set the color of the y-axis ticks\nax.set_yticklabels(['0', '1.6', '3.6', '5.6', '7.6'], color='black')\n\n# Set the color of the grid lines\nax.grid(color='black')\n\n# Set the color of the border lines\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right']."}
{"file": "dataset/ori_500/box_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Performance Gap (%)')\n\n# Set the x-axis label\nax.set_xlabel('Teams')\n\n# Set the y-axis label\nax.set_ylabel('Performance Gap (%)')\n\n# Define the teams\nteams = ['ST_CVRP', 'ST_VRPTW', 'ST_All', 'Ours']\n\n# Define the performance gap values\nperformance_gap = [45, 55, 35, 25]\n\n# Define the colors for each team\ncolors = ['blue', 'purple', 'orange', 'red']\n\n# Plot the bars\nbars = ax.bar(teams, performance_gap, color=colors)\n\n# Add text annotations to the bars\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 1), ha='center', va='bottom')\n\n# Set the limits of the y-axis\nax.set_ylim(0, 70)\n\n# Set the limits of the x-axis\nax.set_xlim(-0.5, len(teams)-0.5)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_4.pdf", "response": "```python\n\"\"\"\n=====================================\nHuman Normalized Score vs. Mean (\u2191)\n=====================================\n\nThis example demonstrates a simple scatter plot with a colorbar.\n\"\"\"\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Fixing random state for reproducibility\nnp.random.seed(42)\n\nfig, ax = plt.subplots(figsize=(12, 3))\n\n# Create a scatter plot\nax.scatter(np.random.rand(50), np.random.rand(50), c=np.random.rand(50), s=100)\n\n# Add a colorbar\ncbar = fig.colorbar(ax.collections[0])\ncbar.set_label('Mean')\n\n# Set labels and title\nax.set_xlabel('Human Normalized Score')\nax.set_ylabel('Mean (\u2191)')\nax.set_title('Human Normalized Score vs. Mean (\u2191)')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/box_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Thrust Angle vs Angular Frequency')\n\n# Set the x-axis label\nax.set_xlabel('Angular Frequency [rad/s]')\n\n# Set the y-axis label\nax.set_ylabel('Thrust Angle [\u00b0]')\n\n# Set the x-axis limits\nax.set_xlim(2.0, 5.0)\n\n# Set the y-axis limits\nax.set_ylim(-60, 60)\n\n# Draw a rectangle around the plot\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\nax.spines['bottom'].set_visible(False)\nax.spines['left'].set_visible(False)\n\n# Add a horizontal line at y=0\nax.axhline(y=0, color='black', linewidth=1)\n\n# Add a vertical line at x=0\nax.axvline(x=0, color='black', linewidth=1)\n\n# Add a horizontal line at y=40\nax.axhline(y=40, color='black', linewidth=1)\n\n# Add a vertical line at x=3.5\nax.axvline(x=3.5, color='black', linewidth=1)\n\n# Add a horizontal line at y=20\nax.axhline(y=20, color='black', linewidth=1)\n\n# Add a vertical line at x=4.5\nax.axvline(x=4.5, color='black', linewidth=1)\n\n# Add a horizontal line at y=-20\nax.axhline(y=-20, color='black', linewidth=1)\n\n# Add a vertical line at x=5.0\nax.axvline(x=5.0, color='black', linewidth=1)\n\n# Add a horizontal line at y=-40\nax.axhline(y=-40, color='black', linewidth=1)\n\n# Add a vertical line at x=2.5\nax.axvline(x=2.5, color='black', linewidth=1)\n\n# Add a horizontal line at y=-60\nax.axhline(y=-60, color='black', linewidth=1)\n\n# Add a vertical line at x=3.0\nax.axvline(x=3.0, color='black', linewidth=1)\n\n# Add a horizontal line at y=60\nax.axhline(y=60, color='black', linewidth=1)\n\n# Add a vertical line at x=2.0\nax.axvline(x=2.0, color='black', linewidth=1)\n\n# Add a horizontal line at y=0\nax.axhline(y=0, color='black', linewidth=1)\n\n# Add a vertical line at x=0\nax.axvline(x=0, color='black', linewidth=1)\n\n# Add a horizontal line at y=40\nax.axhline(y=40, color='black', linewidth=1)\n\n# Add a vertical line at x=3.5\nax.axvline(x=3.5, color='black', linewidth=1)\n\n# Add a horizontal line at y=20\nax.axhline(y=20, color='black', linewidth=1)\n\n# Add a vertical line at x=4.5\nax.axvline(x=4.5, color='black', linewidth=1)\n\n# Add a horizontal line at y=-20\nax.axhline(y=-20, color='black', linewidth=1)\n\n# Add a vertical line at x=5.0\nax.axvline(x=5.0, color='black', linewidth=1)\n\n# Add a horizontal line at y=-40\nax.axhline(y=-40, color='black', linewidth=1)\n\n# Add a vertical line at x=2.5\nax.axvline(x=2.5, color='black', linewidth=1)\n\n# Add a horizontal line at y=-60\nax.axhline(y=-60, color='black', linewidth=1)\n\n# Add a vertical line at x=3.0\nax.axvline(x=3.0, color='black', linewidth=1)\n\n# Add a horizontal line at y=0\nax.axhline(y=0, color='black', linewidth=1)\n\n# Add a vertical line at x=0\nax.axvline(x=0, color='black', linewidth=1)\n\n# Add a horizontal line at y=40\nax.axhline(y=40, color='black', linewidth=1)\n\n# Add a vertical line at x=3.5\nax.axvline(x=3.5, color='black', linewidth=1)\n\n# Add a horizontal line at y=20\nax.axhline(y=20, color='black', linewidth=1)\n\n# Add a vertical line at x=4.5\nax.axvline(x=4.5, color='black', linewidth=1)\n\n# Add a horizontal line at y=-20\nax.axhline(y=-20, color='black', linewidth=1)\n\n# Add a vertical line at x=5.0\nax.axvline(x=5.0, color='black', linewidth=1)\n\n# Add a horizontal line at y=-40\nax.axhline(y=-40, color='black', linewidth=1)\n\n# Add a vertical line at x=2.5\nax.axvline(x=2.5, color='black', linewidth=1)\n\n# Add a horizontal line at y=-60\nax.axhline(y=-60, color='black', linewidth=1)\n\n# Add a vertical line at x=3.0\nax.axvline(x=3.0, color='black', linewidth=1)\n\n# Add a horizontal line at y=0\nax.axhline(y=0, color='black', linewidth=1)\n\n# Add a vertical line at x=0\nax.axvline(x=0, color='black', linewidth=1)\n\n# Add a horizontal line at y=40\nax.axhline(y=40, color='black', linewidth=1)\n\n# Add a vertical line at x=3.5\nax.axvline(x=3.5, color='black', linewidth=1)\n\n# Add a horizontal line at y=20\nax.axhline(y=20, color='black', linewidth=1)\n\n# Add a vertical line at x=4.5\nax.axvline(x=4.5, color='black', linewidth=1)\n\n# Add a horizontal line at y=-20\nax.axhline(y=-20, color='black', linewidth=1)\n\n# Add a vertical line at x=5.0\nax.axvline(x=5.0, color='black', linewidth=1)\n\n# Add a horizontal line at y=-40\nax.axhline(y=-40, color='black', linewidth=1)\n\n# Add a vertical line at x=2.5\nax.axvline(x=2.5, color='black', linewidth=1)\n\n# Add a horizontal line at y=-60\nax.axhline(y=-60, color='black', linewidth=1)\n\n# Add a vertical line at x=3.0\nax.axvline(x=3.0, color='black', linewidth=1)\n\n# Add a horizontal line at y=0\nax.axhline(y=0, color='black', linewidth=1)\n\n# Add a vertical line at x=0\nax.axvline(x=0, color='black', linewidth=1)\n\n# Add a horizontal line at y=40\nax.axhline(y=40, color='black', linewidth=1)\n\n# Add a vertical line at x=3.5\nax.axvline(x=3.5, color='black', linewidth=1)\n\n# Add a horizontal line at y=20\nax.axhline(y=20, color='black', linewidth=1)\n\n# Add a vertical line at x=4.5\nax.axvline(x=4.5, color='black', linewidth=1)\n\n# Add a horizontal line at y=-20\nax.axhline(y=-20, color='black', linewidth=1)\n\n# Add a vertical line at x=5.0\nax.axvline(x=5.0, color='black', linewidth=1)\n\n# Add a horizontal line at y=-40\nax.axhline(y=-40, color='black', linewidth=1)\n\n# Add a vertical line at x=2.5\nax.axvline(x=2.5, color='black', linewidth=1)\n\n# Add a horizontal line at y=-60\nax.axhline(y=-60, color='black', linewidth=1)\n\n# Add a vertical line at x=3.0\nax.axvline(x=3.0, color='black', linewidth=1)\n\n# Add a horizontal line at y=0\nax.axhline(y=0, color='black', linewidth=1)\n\n# Add a vertical line at x=0\nax.axvline(x=0, color='black', linewidth=1)\n\n# Add a horizontal line at y=40\nax.axhline(y=40, color='black', linewidth=1)\n\n# Add a vertical line at x=3.5\nax.axvline(x=3.5, color='black', linewidth=1)\n\n# Add a horizontal line at y=20\nax.axhline(y=20, color='black', linewidth=1)\n\n# Add a vertical line at x=4.5\nax.axvline(x=4.5, color='black', linewidth=1)\n\n# Add a horizontal line at y=-20\nax.axhline(y=-20, color='black', linewidth=1)\n\n# Add a vertical line at x=5.0\nax.axvline(x=5.0, color='black', linewidth=1)\n\n# Add a horizontal line at y=-40\nax.axhline(y=-40, color='black', linewidth=1)\n\n# Add a vertical line at x=2.5\nax.axvline(x=2.5, color='black', linewidth=1)\n\n# Add a horizontal line at y=-60\nax.axhline(y=-60, color='black', linewidth=1)\n\n# Add a vertical line at x=3.0\nax.axvline(x=3.0, color='black', linewidth=1)\n\n# Add a horizontal line at y=0\nax.axhline(y=0, color='black', linewidth=1)\n\n# Add a vertical line at x=0\nax.axvline(x=0, color='black', linewidth=1)\n\n# Add a horizontal line at y=40\nax.axhline(y=40, color='black', linewidth=1)\n\n# Add a vertical line at x=3.5\nax.axvline(x=3.5, color='black', linewidth=1)\n\n# Add a horizontal line at y=20\nax.axhline(y=20, color='black', linewidth=1)\n\n# Add a vertical line at x=4.5\nax.axvline(x=4.5, color='black', linewidth=1)\n\n# Add a horizontal line at y=-20\nax.axhline(y=-20, color='black', linewidth=1)\n\n# Add a vertical line at x=5.0\nax.axvline(x=5.0, color='black', linewidth=1)\n\n# Add a horizontal line at y=-40\nax.axhline(y=-40, color='black', linewidth=1)\n\n# Add a vertical line at x=2.5\nax.axvline(x=2.5, color='black', linewidth=1)\n\n# Add a horizontal line at y=-60\nax.axhline(y=-60, color='black', linewidth=1)\n\n# Add a vertical line at x=3.0\nax.axvline(x=3.0, color='black', linewidth=1)\n\n# Add a horizontal line at y=0\nax.axhline(y=0, color='black', linewidth=1)\n\n# Add a vertical line at x=0\nax.axvline(x=0, color='black', linewidth=1)\n\n# Add a horizontal line at y=40\nax.axhline(y=40, color='black', linewidth=1)\n\n# Add a vertical line at x=3.5\nax.axvline(x=3.5, color='black', linewidth=1)\n\n# Add a horizontal line at y=20\nax.axhline(y=20, color='black', linewidth=1)\n\n# Add a vertical line at x=4.5\nax.axvline(x=4.5, color='black', linewidth=1)\n\n# Add a horizontal line at y=-20\nax.axhline(y=-20, color='black', linewidth=1)\n\n# Add a vertical line at x=5.0\nax.axvline(x=5.0, color='black', linewidth=1)\n\n# Add a horizontal line at y=-40\nax.axhline(y=-40, color='black', linewidth=1)\n\n# Add a vertical line at x=2.5\nax.axvline(x=2.5, color='black', linewidth=1)\n\n# Add a horizontal line at y=-60\nax.axhline(y=-60, color='black', linewidth=1)\n\n# Add a vertical line at x=3.0\nax.axvline(x=3.0, color='black', linewidth=1)\n\n# Add a horizontal line at y=0\nax.axhline(y=0, color='black', linewidth=1)\n\n# Add a vertical line at x=0\nax.axvline(x=0, color='black', linewidth=1)\n\n# Add a horizontal line at y=40\nax.axhline(y=40, color='black', linewidth=1)\n\n# Add a vertical line at x=3.5\nax.axvline(x=3.5, color='black', linewidth=1)\n\n# Add a horizontal line at y=20\nax.axhline(y=20, color='black', linewidth=1)\n\n# Add a vertical line at x=4.5\nax.axvline(x=4.5, color='black', linewidth=1)\n\n# Add a horizontal line at y=-20\nax.axhline(y=-20, color='black', linewidth=1)\n\n# Add a vertical line at x=5.0\nax.axvline(x=5.0, color='black', linewidth=1)\n\n# Add a horizontal line at y=-40\nax.axhline(y=-40, color='black', linewidth=1)\n\n# Add a vertical line at x=2.5\nax.axvline(x=2.5, color='black', linewidth=1)\n\n# Add a horizontal line at y=-60\nax.axhline(y=-60, color='black', linewidth=1)\n\n# Add a vertical line at x=3.0\nax.axvline(x=3.0, color='black', linewidth=1)\n\n# Add a horizontal line at y=0\nax.axhline(y=0, color='black', linewidth=1)\n\n# Add a vertical line at x=0\nax.axvline(x=0, color='black', linewidth=1)\n\n# Add a horizontal line at y=40\nax.axhline(y=40, color='black', linewidth=1)\n\n# Add a vertical line at x=3.5\nax.axvline(x=3.5, color='black', linewidth=1)\n\n# Add a horizontal line at y=20\nax.axhline(y=20, color='black', linewidth=1)\n\n# Add a vertical line at x=4.5\nax.axvline(x=4.5, color='black', linewidth=1)\n\n# Add a horizontal line at y=-20\nax.axhline(y=-20, color='black', linewidth=1)\n\n# Add a vertical line at x=5.0\nax.axvline(x=5.0, color='black', linewidth=1)\n\n# Add a horizontal line at y=-40\nax.axhline(y=-40, color='black', linewidth=1)\n\n# Add a vertical line at x=2.5\nax.axvline(x=2.5, color='black', linewidth=1)\n\n# Add a horizontal line at y=-60\nax.axhline(y=-60, color='black', linewidth=1)\n\n# Add a vertical line at x=3.0\nax.axvline(x=3.0, color='black', linewidth=1)\n\n# Add a horizontal line at y=0\nax.axhline(y=0, color='black', linewidth=1)\n\n# Add a vertical line at x=0\nax.axvline(x=0, color='black', linewidth=1)\n\n# Add a horizontal line at y=40\nax.axhline(y=40, color='black', linewidth=1)\n\n# Add a vertical line at x=3.5\nax.axvline(x=3.5, color='black', linewidth=1)\n\n# Add a horizontal line at y=20\nax.axhline(y=20, color='black', linewidth=1)\n\n# Add a vertical line at x=4.5\nax.axvline(x=4.5, color='black', linewidth=1)\n\n# Add a horizontal line at y=-20\nax.axhline(y=-20, color='black', linewidth=1)\n\n# Add a vertical line at x=5.0\nax.axvline(x=5.0, color='black', linewidth=1)\n\n# Add a horizontal line at y=-40\nax.axhline(y=-40, color='black', linewidth=1)\n\n# Add a vertical line at x=2.5\nax.axvline(x=2.5, color='black', linewidth=1)\n\n# Add a horizontal line at y=-60\nax.axhline(y=-60, color='black', linewidth=1)\n\n# Add a vertical line at x=3.0\nax.axvline(x=3.0, color='black', linewidth=1)\n\n# Add a horizontal line at y=0\nax.axhline(y=0, color='black', linewidth=1)\n\n# Add a vertical line at x=0\nax.axvline(x=0, color='black', linewidth=1)\n\n# Add a horizontal line at y=40\nax.axhline(y=40, color='black', linewidth=1)\n\n# Add a vertical line at x=3.5\nax.axvline(x"}
{"file": "dataset/ori_500/box_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the background color of the plot\nax.set_facecolor('lightgray')\n\n# Set the x-axis limits\nax.set_xlim(-10, 10)\n\n# Set the y-axis limits\nax.set_ylim(0, 12)\n\n# Set the x-axis ticks\nax.set_xticks(np.arange(-10, 11, 2))\n\n# Set the y-axis ticks\nax.set_yticks(np.arange(0, 13, 2))\n\n# Set the x-axis label\nax.set_xlabel('CEE (dB)')\n\n# Set the y-axis label\nax.set_ylabel('SE (bps/Hz)')\n\n# Set the title of the plot\nax.set_title('Performance Metrics')\n\n# Create a rectangle for the \"Perfect\" bar\nrect1 = plt.Rectangle((0, 9), 2, 1, color='brown')\nax.add_patch(rect1)\n\n# Create a rectangle for the \"Good\" bar\nrect2 = plt.Rectangle((2, 7), 2, 2, color='green')\nax.add_patch(rect2)\n\n# Create a rectangle for the \"Poor\" bar\nrect3 = plt.Rectangle((4, 5), 2, 3, color='red')\nax.add_patch(rect3)\n\n# Create a rectangle for the \"Excellent\" bar\nrect4 = plt.Rectangle((6, 3), 2, 4, color='blue')\nax.add_patch(rect4)\n\n# Create a rectangle for the \"Very Good\" bar\nrect5 = plt.Rectangle((8, 1), 2, 5, color='purple')\nax.add_patch(rect5)\n\n# Create a rectangle for the \"Excellent\" bar\nrect6 = plt.Rectangle((10, 9), 2, 1, color='cyan')\nax.add_patch(rect6)\n\n# Create a rectangle for the \"Good\" bar\nrect7 = plt.Rectangle((12, 7), 2, 2, color='magenta')\nax.add_patch(rect7)\n\n# Create a rectangle for the \"Poor\" bar\nrect8 = plt.Rectangle((14, 5), 2, 3, color='yellow')\nax.add_patch(rect8)\n\n# Create a rectangle for the \"Excellent\" bar\nrect9 = plt.Rectangle((16, 3), 2, 4, color='orange')\nax.add_patch(rect9)\n\n# Create a rectangle for the \"Very Good\" bar\nrect10 = plt.Rectangle((18, 1), 2, 5, color='pink')\nax.add_patch(rect10)\n\n# Create a rectangle for the \"Excellent\" bar\nrect11 = plt.Rectangle((20, 9), 2, 1, color='lime')\nax.add_patch(rect11)\n\n# Create a rectangle for the \"Good\" bar\nrect12 = plt.Rectangle((22, 7), 2, 2, color='navy')\nax.add_patch(rect12)\n\n# Create a rectangle for the \"Poor\" bar\nrect13 = plt.Rectangle((24, 5), 2, 3, color='silver')\nax.add_patch(rect13)\n\n# Create a rectangle for the \"Excellent\" bar\nrect14 = plt.Rectangle((26, 3), 2, 4, color='gold')\nax.add_patch(rect14)\n\n# Create a rectangle for the \"Very Good\" bar\nrect15 = plt.Rectangle((28, 1), 2, 5, color='brown')\nax.add_patch(rect15)\n\n# Create a rectangle for the \"Excellent\" bar\nrect16 = plt.Rectangle((30, 9), 2, 1, color='green')\nax.add_patch(rect16)\n\n# Create a rectangle for the \"Good\" bar\nrect17 = plt.Rectangle((32, 7), 2, 2, color='blue')\nax.add_patch(rect17)\n\n# Create a rectangle for the \"Poor\" bar\nrect18 = plt.Rectangle((34, 5), 2, 3, color='red')\nax.add_patch(rect18)\n\n# Create a rectangle for the \"Excellent\" bar\nrect19 = plt.Rectangle((36, 3), 2, 4, color='purple')\nax.add_patch(rect19)\n\n# Create a rectangle for the \"Very Good\" bar\nrect20 = plt.Rectangle((38, 1), 2, 5, color='cyan')\nax.add_patch(rect20)\n\n# Create a rectangle for the \"Excellent\" bar\nrect21 = plt.Rectangle((40, 9), 2, 1, color='magenta')\nax.add_patch(rect21)\n\n# Create a rectangle for the \"Good\" bar\nrect22 = plt.Rectangle((42, 7), 2, 2, color='yellow')\nax.add_patch(rect22)\n\n# Create a rectangle for the \"Poor\" bar\nrect23 = plt.Rectangle((44, 5), 2, 3, color='orange')\nax.add_patch(rect23)\n\n# Create a rectangle for the \"Excellent\" bar\nrect24 = plt.Rectangle((46, 3), 2, 4, color='pink')\nax.add_patch(rect24)\n\n# Create a rectangle for the \"Very Good\" bar\nrect25 = plt.Rectangle((48, 1), 2, 5, color='lime')\nax.add_patch(rect25)\n\n# Create a rectangle for the \"Excellent\" bar\nrect26 = plt.Rectangle((50, 9), 2, 1, color='navy')\nax.add_patch(rect26)\n\n# Create a rectangle for the \"Good\" bar\nrect27 = plt.Rectangle((52, 7), 2, 2, color='silver')\nax.add_patch(rect27)\n\n# Create a rectangle for the \"Poor\" bar\nrect28 = plt.Rectangle((54, 5), 2, 3, color='gold')\nax.add_patch(rect28)\n\n# Create a rectangle for the \"Excellent\" bar\nrect29 = plt.Rectangle((56, 3), 2, 4, color='brown')\nax.add_patch(rect29)\n\n# Create a rectangle for the \"Very Good\" bar\nrect30 = plt.Rectangle((58, 1), 2, 5, color='green')\nax.add_patch(rect30)\n\n# Create a rectangle for the \"Excellent\" bar\nrect31 = plt.Rectangle((60, 9), 2, 1, color='blue')\nax.add_patch(rect31)\n\n# Create a rectangle for the \"Good\" bar\nrect32 = plt.Rectangle((62, 7), 2, 2, color='red')\nax.add_patch(rect32)\n\n# Create a rectangle for the \"Poor\" bar\nrect33 = plt.Rectangle((64, 5), 2, 3, color='purple')\nax.add_patch(rect33)\n\n# Create a rectangle for the \"Excellent\" bar\nrect34 = plt.Rectangle((66, 3), 2, 4, color='cyan')\nax.add_patch(rect34)\n\n# Create a rectangle for the \"Very Good\" bar\nrect35 = plt.Rectangle((68, 1), 2, 5, color='magenta')\nax.add_patch(rect35)\n\n# Create a rectangle for the \"Excellent\" bar\nrect36 = plt.Rectangle((70, 9), 2, 1, color='yellow')\nax.add_patch(rect36)\n\n# Create a rectangle for the \"Good\" bar\nrect37 = plt.Rectangle((72, 7), 2, 2, color='orange')\nax.add_patch(rect37)\n\n# Create a rectangle for the \"Poor\" bar\nrect38 = plt.Rectangle((74, 5), 2, 3, color='pink')\nax.add_patch(rect38)\n\n# Create a rectangle for the \"Excellent\" bar\nrect39 = plt.Rectangle((76, 3), 2, 4, color='lime')\nax.add_patch(rect39)\n\n# Create a rectangle for the \"Very Good\" bar\nrect40 = plt.Rectangle((78, 1), 2, 5, color='navy')\nax.add_patch(rect40)\n\n# Create a rectangle for the \"Excellent\" bar\nrect41 = plt.Rectangle((80, 9), 2, 1, color='silver')\nax.add_patch(rect41)\n\n# Create a rectangle for the \"Good\" bar\nrect42 = plt.Rectangle((82, 7), 2, 2, color='gold')\nax.add_patch(rect42)\n\n# Create a rectangle for the \"Poor\" bar\nrect43 = plt.Rectangle((84, 5), 2, 3, color='brown')\nax.add_patch(rect43)\n\n# Create a rectangle for the \"Excellent\" bar\nrect44 = plt.Rectangle((86, 3), 2, 4, color='green')\nax.add_patch(rect44)\n\n# Create a rectangle for the \"Very Good\" bar\nrect45 = plt.Rectangle((88, 1), 2, 5, color='blue')\nax.add_patch(rect45)\n\n# Create a rectangle for the \"Excellent\" bar\nrect46 = plt.Rectangle((90, 9), 2, 1, color='red')\nax.add_patch(rect46)\n\n# Create a rectangle for the \"Good\" bar\nrect47 = plt.Rectangle((92, 7), 2, 2, color='purple')\nax.add_patch(rect47)\n\n# Create a rectangle for the \"Poor\" bar\nrect48 = plt.Rectangle((94, 5), 2, 3, color='cyan')\nax.add_patch(rect48)\n\n# Create a rectangle for the \"Excellent\" bar\nrect49 = plt.Rectangle((96, 3), 2, 4, color='magenta')\nax.add_patch(rect49)\n\n# Create a rectangle for the \"Very Good\" bar\nrect50 = plt.Rectangle((98, 1), 2, 5, color='yellow')\nax.add_patch(rect50)\n\n# Create a rectangle for the \"Excellent\" bar\nrect51 = plt.Rectangle((100, 9), 2, 1, color='orange')\nax.add_patch(rect51)\n\n# Create a rectangle for the \"Good\" bar\nrect52 = plt.Rectangle((102, 7), 2, 2, color='pink')\nax.add_patch(rect52)\n\n# Create a rectangle for the \"Poor\" bar\nrect53 = plt.Rectangle((104, 5), 2, 3, color='lime')\nax.add_patch(rect53)\n\n# Create a rectangle for the \"Excellent\" bar\nrect54 = plt.Rectangle((106, 3), 2, 4, color='navy')\nax.add_patch(rect54)\n\n# Create a rectangle for the \"Very Good\" bar\nrect55 = plt.Rectangle((108, 1), 2, 5, color='silver')\nax.add_patch(rect55)\n\n# Create a rectangle for the \"Excellent\" bar\nrect56 = plt.Rectangle((110, 9), 2, 1, color='gold')\nax.add_patch(rect56)\n\n# Create a rectangle for the \"Good\" bar\nrect57 = plt.Rectangle((112, 7), 2, 2, color='brown')\nax.add_patch(rect57)\n\n# Create a rectangle for the \"Poor\" bar\nrect58 = plt.Rectangle((114, 5), 2, 3, color='green')\nax.add_patch(rect58)\n\n# Create a rectangle for the \"Excellent\" bar\nrect59 = plt.Rectangle((116, 3), 2, 4, color='blue')\nax.add_patch(rect59)\n\n# Create a rectangle for the \"Very Good\" bar\nrect60 = plt.Rectangle((118, 1), 2, 5, color='red')\nax.add_patch(rect60)\n\n# Create a rectangle for the \"Excellent\" bar\nrect61 = plt.Rectangle((120, 9), 2, 1, color='purple')\nax.add_patch(rect61)\n\n# Create a rectangle for the \"Good\" bar\nrect62 = plt.Rectangle((122, 7), 2, 2, color='cyan')\nax.add_patch(rect62)\n\n# Create a rectangle for the \"Poor\" bar\nrect63 = plt.Rectangle((124, 5), 2, 3, color='magenta')\nax.add_patch(rect63)\n\n# Create a rectangle for the \"Excellent\" bar\nrect64 = plt.Rectangle((126, 3), 2, 4, color='yellow')\nax.add_patch(rect64)\n\n# Create a rectangle for the \"Very Good\" bar\nrect65 = plt.Rectangle((128, 1), 2, 5, color='orange')\nax.add_patch(rect65)\n\n# Create a rectangle for the \"Excellent\" bar\nrect66 = plt.Rectangle((130, 9), 2, 1, color='pink')\nax.add_patch(rect66)\n\n# Create a rectangle for the \"Good\" bar\nrect67 = plt.Rectangle((132, 7), 2, 2, color='lime')\nax.add_patch(rect67)\n\n# Create a rectangle for the \"Poor\" bar\nrect68 = plt.Rectangle((134, 5), 2, 3, color='navy')\nax.add_patch(rect68)\n\n# Create a rectangle for the \"Excellent\" bar\nrect69 = plt.Rectangle((136, 3), 2, 4, color='silver')\nax.add_patch(rect69)\n\n# Create a rectangle for the \"Very Good\" bar\nrect70 = plt.Rectangle((138, 1), 2, 5, color='gold')\nax.add_patch(rect70)\n\n# Create a rectangle for the \"Excellent\" bar\nrect71 = plt.Rectangle((140, 9), 2, 1, color='brown')\nax.add_patch(rect71)\n\n# Create a rectangle for the \"Good\" bar\nrect72 = plt.Rectangle((142, 7), 2, 2, color='green')\nax.add_patch(rect72)\n\n# Create a rectangle for the \"Poor\" bar\nrect73 = plt.Rectangle((144, 5), 2, 3, color='blue')\nax.add_patch(rect73)\n\n# Create a rectangle for the \"Excellent\" bar\nrect74 = plt.Rectangle((146, 3), 2, 4, color='red')\nax.add_patch(rect74)\n\n# Create a rectangle for the \"Very Good\" bar\nrect75 = plt.Rectangle((148, 1), 2, 5, color='purple')\nax.add_patch(rect75)\n\n# Create a rectangle for the \"Excellent\" bar\nrect76 = plt.Rectangle((150, 9), 2, 1, color='cyan')\nax.add_patch(rect76)\n\n# Create a rectangle for the \"Good\" bar\nrect77 = plt.Rectangle((152, 7), 2, 2, color='magenta')\nax.add_patch(rect77)\n\n# Create a rectangle for the \"Poor\" bar\nrect78 = plt.Rectangle((154, 5), 2, 3, color='yellow')\nax.add_patch(rect78)\n\n# Create a rectangle for the \"Excellent\" bar\nrect79 = plt.Rectangle((156, 3), 2, 4, color='orange')\nax.add_patch(rect79)\n\n# Create a rectangle for the \"Very Good\" bar\nrect80 = plt.Rectangle((158, 1), 2, 5, color='pink')\nax.add_patch(rect80)\n\n# Create a rectangle for the \"Excellent\" bar\nrect81 = plt.Rectangle((160, 9), 2, 1, color='lime')\nax.add_patch(rect81)\n\n# Create a rectangle for the \"Good\" bar\nrect82 = plt.Rectangle((162, 7), 2, 2, color='navy')\nax.add_patch(rect82)\n\n# Create a rectangle for the \"Poor\" bar\nrect83 = plt.Rectangle((164, 5), 2, 3, color='silver')\nax.add_patch(rect83)\n\n# Create a rectangle for the \"Excellent\" bar\nrect84 = plt.Rectangle((166, 3), 2, 4, color='gold')\nax.add_patch(rect84)\n\n# Create a rectangle for the \"Very Good\" bar\nrect85 = plt.Rectangle((168, 1), 2, 5, color='brown')\nax.add_patch(rect85)\n\n# Create a rectangle for the \"Excellent\" bar\nrect86 = plt.Rectangle((170, 9), 2, 1, color='green')\nax.add_patch(rect86)\n\n# Create a rectangle for the \"Good\" bar\nrect87 = plt.Rectangle((172, 7), 2, 2, color='blue')\nax.add_patch(rect87)\n\n# Create a rectangle for the \"Poor\" bar\nrect88 = plt.Rectangle((174, 5), 2, 3, color='red')\nax.add_patch(rect88)\n\n# Create a rectangle for the \"Excellent\" bar\nrect89 = plt.Rectangle((176, 3), 2, 4, color='purple')\nax.add_patch(rect89)\n\n# Create a rectangle for the \"Very Good\" bar\nrect90 = plt.Rectangle((178, 1), 2, 5, color='cyan')\nax.add_patch(rect90)\n\n# Create a rectangle for the \"Excellent\" bar\nrect91 = plt.Rectangle((180, 9), 2, 1, color='magenta')\nax.add_patch(rect91)\n\n# Create a rectangle for the \"Good\" bar\nrect92 = plt.Rectangle((182, 7), 2, 2, color='yellow')\nax.add_patch(rect92)\n\n# Create a rectangle for the \"Poor\" bar\nrect93 = plt.Rectangle((184, 5), 2, 3, color='orange')\nax.add_patch(rect93)\n\n# Create a rectangle for the \"Excellent\" bar\nrect94 = plt.Rectangle((186, 3), 2, 4, color='pink')\nax.add_patch(rect94)\n\n# Create a rectangle"}
{"file": "dataset/ori_500/box_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(25, 8))\n\n# Set the title of the plot\nax.set_title('Linear travel times')\n\n# Create a bar chart\nbar_width = 0.35\nindex = np.arange(len(['D-avg', 'P-avg', 'R-avg']))\nbar1 = ax.bar(index, [10, 20, 30], bar_width, label='Linear')\nbar2 = ax.bar(index + bar_width, [40, 50, 60], bar_width, label='Exponential')\n\n# Add some text for labels, title, and custom x-axis tick labels, etc.\nax.set_xlabel('Travel Time')\nax.set_ylabel('Time (hours)')\nax.set_title('Linear travel times')\nax.set_xticks(index + bar_width / 2)\nax.set_xticklabels(['D-avg', 'P-avg', 'R-avg'])\nax.legend()\n\n# Create a scatter plot\nx = np.random.rand(10)\ny = np.random.rand(10)\ncolors = np.random.rand(10)\narea = np.pi * (15 * np.random.rand(10))**2  # 0 to 15 point radiuses\nax.scatter(x, y, s=area, c=colors, alpha=0.5)\n\n# Create a pie chart\nlabels = 'Frogs', 'Hogs', 'Dogs', 'Logs'\nsizes = [15, 30, 45, 10]\nexplode = (0.1, 0, 0, 0)  # explode 1st slice\nax.pie(sizes, explode=explode, labels=labels, autopct='%1.1f%%',\n        shadow=True, startangle=90)\nax.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\n\n# Create a histogram\nn, bins, patches = ax.hist([10, 20, 30, 40, 50, 60, 70, 80, 90, 100], bins=10, color='blue')\n\n# Create a line chart\nx = np.linspace(0, 10, 100)\ny = np.sin(x)\nax.plot(x, y, label='Sine Wave')\n\n# Create a box plot\ndata = [np.random.normal(0, std, 100) for std in range(1, 4)]\nax.boxplot(data)\n\n# Create a heatmap\ndata = np.random.rand(10, 10)\nim = ax.imshow(data, cmap='hot', interpolation='nearest')\n\n# Create a contour plot\nx = np.linspace(-10, 10, 100)\ny = np.linspace(-10, 10, 100)\nX, Y = np.meshgrid(x, y)\nZ = np.sin(np.sqrt(X**2 + Y**2))\nCS = ax.contour(X, Y, Z, 10, cmap='coolwarm')\n\n# Create a polar plot\ntheta = np.linspace(0, 2*np.pi, 100)\nr = np.linspace(0, 1, 100)\ntheta, r = np.meshgrid(theta, r)\nax.polar(theta, r)\n\n# Create a 3D plot\nfrom mpl_toolkits.mplot3d import Axes3D\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nx = np.linspace(-5, 5, 100)\ny = np.linspace(-5, 5, 100)\nx, y = np.meshgrid(x, y)\nz = np.sin(np.sqrt(x**2 + y**2))\nax.plot_surface(x, y, z, cmap='viridis')\n\n# Create a 3D scatter plot\nx = np.random.rand(100)\ny = np.random.rand(100)\nz = np.random.rand(100)\nax.scatter(x, y, z, c='r', marker='o')\n\n# Create a 3D bar chart\nx = np.arange(5)\ny = np.arange(5)\nx, y = np.meshgrid(x, y)\nz = np.random.rand(5, 5)\nax.bar3d(x.ravel(), y.ravel(), np.zeros(25), dx=1, dy=1, dz=z.ravel())\n\n# Create a 3D contour plot\nx = np.linspace(-5, 5, 100)\ny = np.linspace(-5, 5, 100)\nx, y = np.meshgrid(x, y)\nz = np.sin(np.sqrt(x**2 + y**2))\nax.contour3D(x, y, z, 50, cmap='binary')\n\n# Create a 3D wireframe plot\nx = np.linspace(-5, 5, 100)\ny = np.linspace(-5, 5, 100)\nx, y = np.meshgrid(x, y)\nz = np.sin(np.sqrt(x**2 + y**2))\nax.plot_wireframe(x, y, z)\n\n# Create a 3D quiver plot\nx = np.linspace(-5, 5, 10)\ny = np.linspace(-5, 5, 10)\nx, y = np.meshgrid(x, y)\nu = np.cos(np.sqrt(x**2 + y**2))\nv = np.sin(np.sqrt(x**2 + y**2))\nw = np.tan(np.sqrt(x**2 + y**2))\nax.quiver(x, y, u, v, w)\n\n# Create a 3D streamplot\nx = np.linspace(-5, 5, 100)\ny = np.linspace(-5, 5, 100)\nx, y = np.meshgrid(x, y)\nu = np.cos(np.sqrt(x**2 + y**2))\nv = np.sin(np.sqrt(x**2 + y**2))\nax.streamplot(x, y, u, v)\n\n# Create a 3D surface plot\nx = np.linspace(-5, 5, 100)\ny = np.linspace(-5, 5, 100)\nx, y = np.meshgrid(x, y)\nz = np.sin(np.sqrt(x**2 + y**2))\nax.plot_surface(x, y, z, cmap='viridis')\n\n# Create a 3D scatter plot with colorbar\nx = np.random.rand(100)\ny = np.random.rand(100)\nz = np.random.rand(100)\nc = np.random.rand(100)\nsc = ax.scatter(x, y, z, c=c, cmap='viridis')\nfig.colorbar(sc)\n\n# Create a 3D bar chart with colorbar\nx = np.arange(5)\ny = np.arange(5)\nx, y = np.meshgrid(x, y)\nz = np.random.rand(5, 5)\nc = np.random.rand(25)\nax.bar3d(x.ravel(), y.ravel(), np.zeros(25), dx=1, dy=1, dz=z.ravel(), color=c, cmap='viridis')\nfig.colorbar(ax.collections[0])\n\n# Create a 3D contour plot with colorbar\nx = np.linspace(-5, 5, 100)\ny = np.linspace(-5, 5, 100)\nx, y = np.meshgrid(x, y)\nz = np.sin(np.sqrt(x**2 + y**2))\ncs = ax.contour3D(x, y, z, 50, cmap='binary')\nfig.colorbar(cs)\n\n# Create a 3D wireframe plot with colorbar\nx = np.linspace(-5, 5, 100)\ny = np.linspace(-5, 5, 100)\nx, y = np.meshgrid(x, y)\nz = np.sin(np.sqrt(x**2 + y**2))\nax.plot_wireframe(x, y, z, color='r')\nfig.colorbar(ax.collections[0])\n\n# Create a 3D quiver plot with colorbar\nx = np.linspace(-5, 5, 10)\ny = np.linspace(-5, 5, 10)\nx, y = np.meshgrid(x, y)\nu = np.cos(np.sqrt(x**2 + y**2))\nv = np.sin(np.sqrt(x**2 + y**2))\nw = np.tan(np.sqrt(x**2 + y**2))\nax.quiver(x, y, u, v, w, color='b')\nfig.colorbar(ax.collections[0])\n\n# Create a 3D streamplot with colorbar\nx = np.linspace(-5, 5, 10)\ny = np.linspace(-5, 5, 10)\nx, y = np.meshgrid(x, y)\nu = np.cos(np.sqrt(x**2 + y**2))\nv = np.sin(np.sqrt(x**2 + y**2))\nax.streamplot(x, y, u, v, color='g')\nfig.colorbar(ax.collections[0])\n\n# Create a 3D surface plot with colorbar\nx = np.linspace(-5, 5, 100)\ny = np.linspace(-5, 5, 100)\nx, y = np.meshgrid(x, y)\nz = np.sin(np.sqrt(x**2 + y**2))\nax.plot_surface(x, y, z, cmap='viridis')\nfig.colorbar(ax.collections[0])\n\n# Create a 3D scatter plot with colorbar and size\nx = np.random.rand(100)\ny = np.random.rand(100)\nz = np.random.rand(100)\nc = np.random.rand(100)\ns = np.random.rand(100) * 100\nsc = ax.scatter(x, y, z, c=c, s=s, cmap='viridis')\nfig.colorbar(sc)\n\n# Create a 3D bar chart with colorbar and size\nx = np.arange(5)\ny = np.arange(5)\nx, y = np.meshgrid(x, y)\nz = np.random.rand(5, 5)\nc = np.random.rand(25)\ns = np.random.rand(25) * 100\nax.bar3d(x.ravel(), y.ravel(), np.zeros(25), dx=1, dy=1, dz=z.ravel(), color=c, cmap='viridis')\nfig.colorbar(ax.collections[0])\n\n# Create a 3D contour plot with colorbar and size\nx = np.linspace(-5, 5, 100)\ny = np.linspace(-5, 5, 100)\nx, y = np.meshgrid(x, y)\nz = np.sin(np.sqrt(x**2 + y**2))\ncs = ax.contour3D(x, y, z, 50, cmap='binary')\nfig.colorbar(cs)\n\n# Create a 3D wireframe plot with colorbar and size\nx = np.linspace(-5, 5, 100)\ny = np.linspace(-5, 5, 100)\nx, y = np.meshgrid(x, y)\nz = np.sin(np.sqrt(x**2 + y**2))\nax.plot_wireframe(x, y, z, color='r')\nfig.colorbar(ax.collections[0])\n\n# Create a 3D quiver plot with colorbar and size\nx = np.linspace(-5, 5, 10)\ny = np.linspace(-5, 5, 10)\nx, y = np.meshgrid(x, y)\nu = np.cos(np.sqrt(x**2 + y**2))\nv = np.sin(np.sqrt(x**2 + y**2))\nw = np.tan(np.sqrt(x**2 + y**2))\nax.quiver(x, y, u, v, w, color='b')\nfig.colorbar(ax.collections[0])\n\n# Create a 3D streamplot with colorbar and size\nx = np.linspace(-5, 5, 10)\ny = np.linspace(-5, 5, 10)\nx, y = np.meshgrid(x, y)\nu = np.cos(np.sqrt(x**2 + y**2))\nv = np.sin(np.sqrt(x**2 + y**2))\nax.streamplot(x, y, u, v, color='g')\nfig.colorbar(ax.collections[0])\n\n# Create a 3D surface plot with colorbar and size\nx = np.linspace(-5, 5, 100)\ny = np.linspace(-5, 5, 100)\nx, y = np.meshgrid(x, y)\nz = np.sin(np.sqrt(x**2 + y**2))\nax.plot_surface(x, y, z, cmap='viridis')\nfig.colorbar(ax.collections[0])\n\n# Create a 3D scatter plot with colorbar, size, and edgecolor\nx = np.random.rand(100)\ny = np.random.rand(100)\nz = np.random.rand(100)\nc = np.random.rand(100)\ns = np.random.rand(100) * 100\nec = np.random.rand(100)\nsc = ax.scatter(x, y, z, c=c, s=s, edgecolor=ec, cmap='viridis')\nfig.colorbar(sc)\n\n# Create a 3D bar chart with colorbar, size, and edgecolor\nx = np.arange(5)\ny = np.arange(5)\nx, y = np.meshgrid(x, y)\nz = np.random.rand(5, 5)\nc = np.random.rand(25)\ns = np.random.rand(25) * 100\nec = np.random.rand(25)\nax.bar3d(x.ravel(), y.ravel(), np.zeros(25), dx=1, dy=1, dz=z.ravel(), color=c, cmap='viridis', edgecolor=ec)\nfig.colorbar(ax.collections[0])\n\n# Create a 3D contour plot with colorbar, size, and edgecolor\nx = np.linspace(-5, 5, 100)\ny = np.linspace(-5, 5, 100)\nx, y = np.meshgrid(x, y)\nz = np.sin(np.sqrt(x**2 + y**2))\ncs = ax.contour3D(x, y, z, 50, cmap='binary')\nfig.colorbar(cs)\n\n# Create a 3D wireframe plot with colorbar, size, and edgecolor\nx = np.linspace(-5, 5, 100)\ny = np.linspace(-5, 5, 100)\nx, y = np.meshgrid(x, y)\nz = np.sin(np.sqrt(x**2 + y**2))\nax.plot_wireframe(x, y, z, color='r')\nfig.colorbar(ax.collections[0])\n\n# Create a 3D quiver plot with colorbar, size, and edgecolor\nx = np.linspace(-5, 5, 10)\ny = np.linspace(-5, 5, 10)\nx, y = np.meshgrid(x, y)\nu = np.cos(np.sqrt(x**2 + y**2))\nv = np.sin(np.sqrt(x**2 + y**2))\nw = np.tan(np.sqrt(x**2 + y**2))\nax.quiver(x, y, u, v, w, color='b')\nfig.colorbar(ax.collections[0])\n\n# Create a 3D streamplot with colorbar, size, and edgecolor\nx = np.linspace(-5, 5, 10)\ny = np.linspace(-5, 5, 10)\nx, y = np.meshgrid(x, y)\nu = np.cos(np.sqrt(x**2 + y**2))\nv = np.sin(np.sqrt(x**2 + y**2))\nax.streamplot(x, y, u, v, color='g')\nfig.colorbar(ax.collections[0])\n\n# Create a 3D surface plot with colorbar, size, and edgecolor\nx = np.linspace(-5, 5, 100)\ny = np.linspace(-5, 5, 100)\nx, y = np.meshgrid(x, y)\nz = np.sin(np.sqrt(x**2 + y**2))\nax.plot_surface(x, y, z, cmap='viridis')\nfig.colorbar(ax.collections[0])\n\n# Create a 3D scatter plot with colorbar, size, edgecolor, and linewidth\nx = np.random.rand(100)\ny = np.random.rand(100)\nz = np.random.rand(100)\nc = np.random.rand(100)\ns = np.random.rand(100) * 100\nec = np.random.rand(100)\nlw = np.random.rand(100) * 2\nsc = ax.scatter(x, y, z, c=c, s=s, edgecolor=ec, linewidth=lw, cmap='viridis')\nfig.colorbar(sc)\n\n# Create a 3D bar chart with colorbar, size, edgecolor, and linewidth\nx = np.arange(5)\ny = np.arange(5)\nx, y = np.meshgrid(x, y)\nz = np.random.rand(5, 5)\nc = np.random.rand(25)\ns = np.random.rand(25) * 100\nec = np.random.rand(25)\nlw = np.random.rand(25) * 2\nax.bar3d(x.ravel(), y.ravel(), np.zeros(25), dx=1, dy=1, dz=z.ravel(), color=c, cmap='viridis', edgecolor=ec, linewidth=lw)\nfig.colorbar(ax.collections[0])\n\n# Create a 3D contour plot with colorbar, size, edgecolor, and linewidth\nx = np.linspace(-5, 5, 100)\ny = np.linspace(-5, 5, 100)\nx, y = np.meshgrid(x, y)\nz = np.sin(np.sqrt(x**2 + y**2))\ncs = ax.contour3D(x, y, z, 50, cmap='binary')\nfig.colorbar(cs)\n\n# Create a 3D wireframe plot with colorbar, size, edgecolor, and linewidth\nx = np.linspace(-5, 5, 100)\ny = np.linspace(-5, 5, 100)\nx, y = np.meshgrid(x, y)\nz = np.sin(np.sqrt(x**2 + y**2))\nax.plot_wireframe(x, y, z, color='r')\nfig.colorbar(ax.collections[0])\n\n# Create a 3D quiver plot with colorbar, size, edgecolor, and linewidth\nx = np.linspace(-5, 5, 10)\ny = np.linspace(-5, 5, 10)\nx, y = np.meshgrid(x, y)\nu = np.cos(np.sqrt(x**2 +"}
{"file": "dataset/ori_500/box_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Set the title of the plot\nax.set_title('Modality Performance')\n\n# Set the x-axis label\nax.set_xlabel('Modality')\n\n# Set the y-axis label\nax.set_ylabel('AUC')\n\n# Define the modality names\nmodality_names = ['Only WSI Modality', 'Only CNV Modality', 'WSI+CNV Modality']\n\n# Define the AUC values for each modality\nauc_values = [0.92, 0.88, 0.95]\n\n# Define the colors for each modality\ncolors = ['skyblue', 'limegreen', 'pink']\n\n# Define the shapes for each modality\nshapes = ['^', 's', 'o']\n\n# Plot the data\nfor i, modality in enumerate(modality_names):\n    ax.bar(modality, auc_values[i], color=colors[i], edgecolor='black')\n    ax.text(i, auc_values[i] + 0.02, shapes[i], ha='center', va='bottom')\n\n# Set the limits of the y-axis\nax.set_ylim(0.7, 1.0)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Set the title of the plot\nax.set_title('0.25 HIAR')\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.1, 0.1), 0.8, 0.8, color='blue')\nax.add_patch(rectangle)\n\n# Draw a circle\ncircle = plt.Circle((0.5, 0.5), 0.1, color='red')\nax.add_artist(circle)\n\n# Draw a line\nline = plt.Line2D([0.1, 0.9], [0.1, 0.9], color='green')\nax.add_line(line)\n\n# Set the limits of the x and y axes\nax.set_xlim(0, 1)\nax.set_ylim(0, 1)\n\n# Set the labels for the x and y axes\nax.set_xlabel('PSNR (dB)')\nax.set_ylabel('SNR (dB)')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/contour_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Set the title of the plot\nax.set_title('T-SNE plot for the output variable Y3')\n\n# Define the colors for the plots\ncolors = ['blue', 'red']\n\n# Create a scatter plot with the specified colors\nscatter = ax.scatter([0, 1], [0, 0], c=colors)\n\n# Add a legend to the plot\nax.legend(*scatter.legend_elements(), title=\"Classes\")\n\n# Set the limits of the x-axis\nax.set_xlim(-80, 80)\n\n# Set the limits of the y-axis\nax.set_ylim(-80, 80)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/contour_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title(r'$\\lambda(x, z)$')\n\n# Define the color map\ncmap = plt.get_cmap('coolwarm')\n\n# Create a grid of points\nx = np.linspace(0, 1, 100)\ny = np.linspace(0, 1, 100)\nX, Y = np.meshgrid(x, y)\n\n# Calculate the values for the plot\nZ = np.sin(X * Y) + np.cos(X * Y)\n\n# Plot the values\nc = ax.contourf(X, Y, Z, cmap=cmap)\n\n# Add a color bar\nfig.colorbar(c)\n\n# Set the limits of the plot\nax.set_xlim(0, 1)\nax.set_ylim(0, 1)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/contour_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Set the background color of the plot area\nax.set_facecolor('lightgray')\n\n# Set the grid lines\nax.grid(True)\n\n# Set the x-axis and y-axis limits\nax.set_xlim(50, 160)\nax.set_ylim(50, 100)\n\n# Set the x-axis and y-axis labels\nax.set_xlabel('SBP (mmHg)')\nax.set_ylabel('DBP (mmHg)')\n\n# Set the title of the plot\nax.set_title('Blood Pressure Scatter Plot')\n\n# Define the colors for the scatter plot\ncolors = ['blue', 'red']\n\n# Define the sizes for the scatter plot\nsizes = [200, 300]\n\n# Define the labels for the scatter plot\nlabels = ['Female', 'Male']\n\n# Create the scatter plot\nscatter = ax.scatter([110, 120], [70, 80], c=colors, s=sizes, label=labels)\n\n# Add a legend to the plot\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/contour_4.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\nax.set_xlim(-10, 10)\nax.set_ylim(-10, 10)\n\n# Draw circles\ncircle1 = plt.Circle((0, 0), 10, color='cyan', fill=False)\ncircle2 = plt.Circle((0, 0), 8, color='blue', fill=False)\ncircle3 = plt.Circle((0, 0), 6, color='green', fill=False)\ncircle4 = plt.Circle((0, 0), 4, color='magenta', fill=False)\ncircle5 = plt.Circle((0, 0), 2, color='yellow', fill=False)\ncircle6 = plt.Circle((0, 0), 0, color='red', fill=False)\nax.add_artist(circle1)\nax.add_artist(circle2)\nax.add_artist(circle3)\nax.add_artist(circle4)\nax.add_artist(circle5)\nax.add_artist(circle6)\n\n# Draw lines\nline1 = plt.Line2D([0, 10], [0, 0], color='cyan')\nline2 = plt.Line2D([0, 8], [0, 0], color='blue')\nline3 = plt.Line2D([0, 6], [0, 0], color='green')\nline4 = plt.Line2D([0, 4], [0, 0], color='magenta')\nline5 = plt.Line2D([0, 2], [0, 0], color='yellow')\nline6 = plt.Line2D([0, 0], [0, 0], color='red')\nax.add_line(line1)\nax.add_line(line2)\nax.add_line(line3)\nax.add_line(line4)\nax.add_line(line5)\nax.add_line(line6)\n\n# Draw text\nax.text(0, 10, '10', ha='center', va='center', fontsize=12, color='cyan')\nax.text(0, 8, '8', ha='center', va='center', fontsize=12, color='blue')\nax.text(0, 6, '6', ha='center', va='center', fontsize=12, color='green')\nax.text(0, 4, '4', ha='center', va='center', fontsize=12, color='magenta')\nax.text(0, 2, '2', ha='center', va='center', fontsize=12, color='yellow')\nax.text(0, 0, '0', ha='center', va='center', fontsize=12, color='red')\n\nplt.show()"}
{"file": "dataset/ori_500/contour_5.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Define the colors for each ring\ncolors = ['red', 'orange', 'yellow', 'green', 'blue', 'indigo', 'violet']\n\n# Draw concentric circles with different radii\nfor i, color in enumerate(colors):\n    circle = plt.Circle((5, 5), 10 - i * 2, color=color)\n    ax.add_artist(circle)\n\n# Set the limits of the plot\nax.set_xlim(0, 10)\nax.set_ylim(0, 10)\n\n# Set the aspect ratio to be equal\nax.set_aspect('equal')\n\n# Remove the axes\nax.axis('off')\n\n# Display the plot\nplt.show()"}
{"file": "dataset/ori_500/density_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 3))\n\n# Define the data\nx = np.linspace(8, 15, 100)\ny = np.sin(x)\n\n# Plot the data\nax.plot(x, y, color='blue')\n\n# Set the title and labels\nax.set_title('Sine Wave')\nax.set_xlabel('Time')\nax.set_ylabel('Amplitude')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/density_2.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 4.0))\n\n# Define the data for the plot\nx = np.linspace(0, 10, 100)\ny = np.sin(x)\n\n# Plot the data\nax.plot(x, y, color='red')\n\n# Set the title and labels\nax.set_title('Sine Wave')\nax.set_xlabel('Time (s)')\nax.set_ylabel('Amplitude')\n\n# Display the plot\nplt.show()"}
{"file": "dataset/ori_500/density_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 4.0))\n\n# Define the data\nx = np.linspace(-1.0, 1.0, 100)\ny = np.sin(x * np.pi / 2)\n\n# Plot the data\nax.plot(x, y, color='blue')\n\n# Set the title\nax.set_title('KDE Plot of Spearman Coefficient Distribution')\n\n# Set the x-axis label\nax.set_xlabel('Spearman Coefficient')\n\n# Set the y-axis label\nax.set_ylabel('Density')\n\n# Set the y-axis limits\nax.set_ylim(0, 1)\n\n# Set the x-axis limits\nax.set_xlim(-1.0, 1.0)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/density_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(9.0, 6.0))\n\n# Set the background color of the plot\nax.set_facecolor('lightgrey')\n\n# Set the grid lines\nax.grid(True)\n\n# Set the x-axis limits\nax.set_xlim(7, 15)\n\n# Set the y-axis limits\nax.set_ylim(0, 0.7)\n\n# Set the x-axis ticks\nax.set_xticks(np.arange(7, 16, 1))\n\n# Set the y-axis ticks\nax.set_yticks(np.arange(0, 0.8, 0.1))\n\n# Set the x-axis labels\nax.set_xticklabels(['7', '8', '9', '10', '11', '12', '13', '14', '15'])\n\n# Set the y-axis labels\nax.set_yticklabels(['0.0', '0.1', '0.2', '0.3', '0.4', '0.5', '0.6', '0.7'])\n\n# Set the title\nax.set_title('Market Analysis')\n\n# Set the x-axis label\nax.set_xlabel('Price (p)')\n\n# Set the y-axis label\nax.set_ylabel('Shape Density')\n\n# Plot the data\nax.plot([7, 8, 9, 10, 11, 12, 13, 14, 15], [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.6, 0.5], color='blue')\nax.plot([7, 8, 9, 10, 11, 12, 13, 14, 15], [0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.6, 0.5, 0.4], color='red')\nax.plot([7, 8, 9, 10, 11, 12, 13, 14, 15], [0.3, 0.4, 0.5, 0.6, 0.7, 0.6, 0.5, 0.4, 0.3], color='green')\nax.plot([7, 8, 9, 10, 11, 12, 13, 14, 15], [0.4, 0.5, 0.6, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2], color='purple')\nax.plot([7, 8, 9, 10, 11, 12, 13, 14, 15], [0.5, 0.6, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1], color='orange')\nax.plot([7, 8, 9, 10, 11, 12, 13, 14, 15], [0.6, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1, 0.0], color='pink')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/density_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(9.0, 6.0))\n\n# Set the background color of the plot\nax.set_facecolor('lightgrey')\n\n# Set the grid lines\nax.grid(True)\n\n# Set the x-axis and y-axis limits\nax.set_xlim(0, 1)\nax.set_ylim(0, 14)\n\n# Set the x-axis and y-axis labels\nax.set_xlabel('Density')\nax.set_ylabel('Value')\n\n# Set the title of the plot\nax.set_title('Product Value Distribution')\n\n# Plot the data\nax.plot([0, 0.5], [12, 14], 'g-')  # Green line for Chanel\nax.plot([0.1, 0.3], [10, 12], 'b-')  # Blue line for Gucci\nax.plot([0.2, 0.4], [8, 10], 'r-')  # Red line for Louis Vuitton\nax.plot([0.3, 0.5], [6, 8], 'c-')  # Cyan line for Prada\nax.plot([0.4, 0.6], [4, 6], 'm-')  # Magenta line for Herm\u00e8s\nax.plot([0.5, 0.7], [2, 4], 'y-')  # Yellow line for Balenciaga\nax.plot([0.6, 0.8], [0, 2], 'k-')  # Black line for Dolce & Gabbana\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the bar chart\nbrands = ['Deep Ens.', 'Dropout', 'Laplace', 'SNGP', 'HET-XL', 'Baseline', 'Gap', 'Shallow Ens.', 'DUQ', 'Corr. Pred.']\nlog_probabilities = [-0.500, -0.394, -0.443, -0.531, -0.539, -0.541, -0.543, -0.552, -0.590, -0.819]\ndistributions = ['Distributional', 'Deterministic']\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Plot the bar chart\nax.bar(brands, log_probabilities, color='green')\n\n# Set the title and labels\nax.set_title('Log Probability of Brands')\nax.set_xlabel('Brands')\nax.set_ylabel('Log Probability')\n\n# Add a horizontal line at y=0\nax.axhline(y=0, color='black', linestyle='-')\n\n# Add a vertical line at x=0\nax.axvline(x=0, color='black', linestyle='-')\n\n# Add a legend\nax.legend(distributions)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Expert dimension')\n\n# Define the colors for the rectangles\ncolors = ['blue', 'green', 'pink']\n\n# Draw the rectangles\nfor i, color in enumerate(colors):\n    ax.add_patch(plt.Rectangle((i*2+1, 5), 2, 2, color=color))\n    ax.text(i*2+1.5, 5.5, str(i+1), ha='center', va='center')\n\n# Draw the vertical lines\nfor i in range(9):\n    ax.plot([i, i], [0, 7], 'b-')\n\n# Draw the horizontal line\nax.plot([0, 8], [6, 6], 'b-')\n\n# Set the limits of the axes\nax.set_xlim(0, 8)\nax.set_ylim(0, 7)\n\n# Set the labels of the axes\nax.set_xlabel('Number of experts')\nax.set_ylabel('IQM Human Normalized Score')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nhospitals = ['Hospital 1', 'Hospital 2', 'Hospital 3']\naccuracies = [0.748, 0.762, 0.709]\nbaseline_1 = [0.715, 0.762, 0.687]\nbaseline_2 = [0.759, 0.748, 0.713]\nfedmm = [0.78, 0.78, 0.713]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Plot bars for each hospital\nfor i, hospital in enumerate(hospitals):\n    ax.bar(hospital, accuracies[i], color='blue')\n    ax.bar(hospital, baseline_1[i], bottom=accuracies[i], color='cyan')\n    ax.bar(hospital, baseline_2[i], bottom=[accuracies[i] + baseline_1[i]] * 2, color='orange')\n    ax.bar(hospital, fedmm[i], bottom=[accuracies[i] + baseline_1[i] + baseline_2[i]] * 2, color='green')\n\n# Set labels and title\nax.set_xlabel('Hospitals')\nax.set_ylabel('Accuracy')\nax.set_title('Accuracy by hospital and method')\n\n# Add legend\nlegend_elements = [plt.Line2D([0], [0], marker='o', color='w', label='Baseline 1', markerfacecolor='blue', markersize=10),\n                   plt.Line2D([0], [0], marker='o', color='w', label='Baseline 2', markerfacecolor='orange', markersize=10),\n                   plt.Line2D([0], [0], marker='o', color='w', label='FedMM', markerfacecolor='green', markersize=10)]\nax.legend(handles=legend_elements)\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Set the background color of the plot\nax.set_facecolor('#F0F0F0')\n\n# Set the title of the plot\nax.set_title('GPT-4 Buyer (valuation 40)')\n\n# Set the x-axis limits\nax.set_xlim(-20, 20)\n\n# Set the y-axis limits\nax.set_ylim(-20, 20)\n\n# Set the x-axis ticks\nax.set_xticks([-20, -10, 0, 10, 20])\n\n# Set the y-axis ticks\nax.set_yticks([-20, -10, 0, 10, 20])\n\n# Set the x-axis labels\nax.set_xlabel('GPT-4 Buyer (valuation 40)')\n\n# Set the y-axis labels\nax.set_ylabel('GPT-4 Buyer (valuation 40)')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick lines\nax.tick"}
{"file": "dataset/ori_500/errorbar_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\ndata = {\n    \"[m]\": [0.96, 0.95, 0.94, 0.93],\n    \"[\u0394R]\": [0.86, 0.85, 0.84, 0.83],\n    \"[\u0394R -1]\": [0.78, 0.77, 0.76, 0.75],\n    \"[none]\": [0.70, 0.69, 0.68, 0.67]\n}\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Plot the data\nfor key, values in data.items():\n    ax.plot(values, label=key)\n\n# Set the title and labels\nax.set_title('DNN Performance')\nax.set_xlabel('Epochs')\nax.set_ylabel('Validation Accuracy')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\nx = [1, 2, 3, 4, 5, 6, 7]\ny1 = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7]\ny2 = [0.15, 0.15, 0.15, 0.15, 0.15, 0.15, 0.15]\ny3 = [0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2]\ny4 = [0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25]\ny5 = [0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3]\ny6 = [0.35, 0.35, 0.35, 0.35, 0.35, 0.35, 0.35]\ny7 = [0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4]\ny8 = [0.45, 0.45, 0.45, 0.45, 0.45, 0.45, 0.45]\ny9 = [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data\nax.plot(x, y1, color='blue')\nax.plot(x, y2, color='orange')\nax.plot(x, y3, color='green')\nax.plot(x, y4, color='red')\nax.plot(x, y5, color='purple')\nax.plot(x, y6, color='brown')\nax.plot(x, y7, color='pink')\nax.plot(x, y8, color='yellow')\nax.plot(x, y9, color='gray')\n\n# Set the limits of the axes\nax.set_xlim(0, 8)\nax.set_ylim(-0.1, 0.6)\n\n# Set the labels of the axes\nax.set_xlabel('Time (s)')\nax.set_ylabel('Posterior Accuracy')\n\n# Set the title of the plot\nax.set_title('Posterior Accuracy over Time')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\ndata = {\n    'Performance': [85, 82, 78, 75, 72],\n    'Aug': [90, 88, 86, 84, 82],\n    'T-Estimation': [88, 86, 84, 82, 80],\n    'Qualification': [85, 83, 81, 79, 77],\n    'Diff-Stitch': [82, 80, 78, 76, 74]\n}\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 3))\n\n# Plot the data\nfor i, (key, value) in enumerate(data.items()):\n    ax.barh(i, value, color='blue')\n\n# Set the title and labels\nax.set_title('Performance Metrics')\nax.set_xlabel('Performance')\nax.set_ylabel('Metrics')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_16.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\nax.set_title('FashionMNIST (NEURAL)')\nax.set_xlabel('Hyperparameters')\nax.set_ylabel('Metric')\n\n# Define the hyperparameters and their corresponding values\nhyperparameters = ['128/0.5/0.0001', '128/0.1/0.0001', '256/0.1/0.0001', '256/0.3/0.0001', '256/0.5/0.0001', '64/0.1/0.0001', '64/0.3/0.0001', '64/0.5/0.0001']\nvalues = [0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2]\n\n# Create a bar chart with the hyperparameters and their corresponding values\nbars = ax.bar(hyperparameters, values, color='blue')\n\n# Add a legend to the plot\nax.legend(['Value'])\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_17.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the first graph\ncountries = ['Japan', 'Brazil', 'India', 'Germany', 'United States']\nenrollment_rates = [25, 18, 14, 29, 35]\n\n# Data for the second graph\ntt_ratios = [25, 18, 14, 29, 35]\n\nfig, axes = plt.subplots(1, 2, figsize=(12, 6))\n\n# First graph\naxes[0].bar(countries, enrollment_rates, color='purple')\naxes[0].set_title('Higher Education Enrollment Rate')\naxes[0].set_xlabel('Countries')\naxes[0].set_ylabel('Enrollment Rate')\n\n# Second graph\naxes[1].bar(countries, tt_ratios, color='green')\naxes[1].set_title('Student-Teacher Ratio')\naxes[1].set_xlabel('Countries')\naxes[1].set_ylabel('Ratio')\n\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_18.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the first chart\nregions = ['Africa', 'South America', 'North America', 'Asia', 'Europe']\nemissions = [1200, 1800, 5000, 3200, 10400]\nland_area = [21, 34, 25, 28, 38]\n\n# Data for the second chart\nrenewable_energy = [18, 28, 25, 34, 38, 45]\ntotal_energy_consumption = [52, 52, 52, 52, 52, 52]\n\n# Create the first chart\nfig, ax1 = plt.subplots(figsize=(6, 9))\nax1.set_xlabel('Regions')\nax1.set_ylabel('Emissions (in millions of metric tons)', color='tab:blue')\nax1.bar(regions, emissions, color='tab:blue')\nax1.tick_params(axis='y', labelcolor='tab:blue')\n\nax2 = ax1.twinx()\nax2.set_ylabel('Land Area (in %)', color='tab:orange')\nax2.bar(regions, land_area, color='tab:orange')\nax2.tick_params(axis='y', labelcolor='tab:orange')\n\nfig.tight_layout()\nplt.show()\n\n# Create the second chart\nfig, ax1 = plt.subplots(figsize=(6, 9))\nax1.set_xlabel('Regions')\nax1.set_ylabel('Renewable Energy Usage (in %)', color='tab:blue')\nax1.bar(regions, renewable_energy, color='tab:blue')\nax1.tick_params(axis='y', labelcolor='tab:blue')\n\nax2 = ax1.twinx()\nax2.set_ylabel('Total Energy Consumption (in %)', color='tab:orange')\nax2.bar(regions, total_energy_consumption, color='tab:orange')\nax2.tick_params(axis='y', labelcolor='tab:orange')\n\nfig.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_19.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the first bar chart\nteams = ['Detroit', 'Philadelphia', 'Baltimore']\ncrime_rates = [75, 85, 65]\nhappiness_indices = [60, 70, 50]\nsocial_security_coverages = [90, 80, 70]\npolitical_participations = [85, 95, 75]\n\n# Data for the second bar chart\ncrime_rates_2 = [70, 80, 60]\nhappiness_indices_2 = [65, 75, 55]\nsocial_security_coverages_2 = [95, 85, 75]\npolitical_participations_2 = [80, 90, 70]\n\n# Data for the third bar chart\ncrime_rates_3 = [72, 82, 62]\nhappiness_indices_3 = [62, 72, 52]\nsocial_security_coverages_3 = [92, 82, 72]\npolitical_participations_3 = [82, 92, 72]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 9))\n\n# Plot the first bar chart\nax.bar(teams, crime_rates, color='purple', label='Crime Rate')\nax.bar(teams, happiness_indices, bottom=crime_rates, color='blue', label='Happiness Index')\nax.bar(teams, social_security_coverages, bottom=[x+y for x,y in zip(crime_rates, happiness_indices)], color='red', label='Social Security Coverage')\nax.bar(teams, political_participations, bottom=[x+y+z for x,y,z in zip(crime_rates, happiness_indices, social_security_coverages)], color='yellow', label='Political Participation')\n\n# Plot the second bar chart\nax.bar(teams, crime_rates_2, color='purple', label='Crime Rate')\nax.bar(teams, happiness_indices_2, bottom=crime_rates_2, color='blue', label='Happiness Index')\nax.bar(teams, social_security_coverages_2, bottom=[x+y for x,y in zip(crime_rates_2, happiness_indices_2)], color='red', label='Social Security Coverage')\nax.bar(teams, political_participations_2, bottom=[x+y+z for x,y,z in zip(crime_rates_2, happiness_indices_2, social_security_coverages_2)], color='yellow', label='Political Participation')\n\n# Plot the third bar chart\nax.bar(teams, crime_rates_3, color='purple', label='Crime Rate')\nax.bar(teams, happiness_indices_3, bottom=crime_rates_3, color='blue', label='Happiness Index')\nax.bar(teams, social_security_coverages_3, bottom=[x+y for x,y in zip(crime_rates_3, happiness_indices_3)], color='red', label='Social Security Coverage')\nax.bar(teams, political_participations_3, bottom=[x+y+z for x,y,z in zip(crime_rates_3, happiness_indices_3, social_security_coverages_3)], color='yellow', label='Political Participation')\n\n# Set the title and labels\nax.set_title('Bar Chart of Crime Rate, Happiness Index, Social Security Coverage, and Political Participation')\nax.set_xlabel('Teams')\nax.set_ylabel('Percentage')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Set the title of the plot\nax.set_title('Protocol')\n\n# Create a rectangle for the logo\nlogo = plt.Rectangle((0.05, 0.85), 0.1, 0.1, color='white', fill=False)\nax.add_patch(logo)\n\n# Add text to the logo\nax.text(0.075, 0.92, 'Expert', fontsize=12)\nax.text(0.075, 0.89, 'Blind', fontsize=12)\nax.text(0.075, 0.86, 'Consultancy', fontsize=12)\nax.text(0.075, 0.83, 'Debate', fontsize=12)\nax.text(0.075, 0.80, 'Interactive Consultancy', fontsize=12)\nax.text(0.075, 0.77, 'Interactive Debate', fontsize=12)\n\n# Create a rectangle for the graph\ngraph = plt.Rectangle((0.05, 0.05), 0.9, 0.7, color='white', fill=False)\nax.add_patch(graph)\n\n# Create a bar chart\nbar_width = 0.2\nindex = [0.2, 0.6, 1]\nbars = ax.bar(index, [80, 90, 100], bar_width, color='blue')\nfor bar in bars:\n    ax.text(bar.get_x() + bar.get_width()/2, bar.get_height(), str(int(bar.get_height())), ha='center', va='bottom')\n\n# Set the x-axis labels\nax.set_xticks([0.4, 0.8, 1.2])\nax.set_xticklabels(['GPT-3.5-Turbo', 'Claude 2.1', 'GPT-4-Turbo'])\n\n# Set the y-axis label\nax.set_ylabel('Judge Accuracy (%)')\n\n# Set the y-axis limits\nax.set_ylim(0, 100)\n\n# Set the x-axis limits\nax.set_xlim(0, 1.4)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_20.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the plots\ncities = ['New York', 'London', 'Beijing', 'Tokyo']\ntemperatures = [12, 14, 16, 18]\nrainfall = [1200, 1500, 1300, 1700]\nwind_speed = [5, 6, 4, 7]\naqi = [50, 60, 40, 70]\n\n# Create a figure and axis\nfig, axes = plt.subplots(3, 2, figsize=(10, 10))\n\n# Plot 1: Temperature\naxes[0, 0].bar(cities, temperatures, color='pink')\naxes[0, 0].set_title('Annual Average Temperature')\naxes[0, 0].set_ylabel('Temperature (\u00b0C)')\naxes[0, 0].set_xlabel('City')\n\n# Plot 2: Rainfall\naxes[0, 1].bar(cities, rainfall, color='lightgreen')\naxes[0, 1].set_title('Annual Rainfall')\naxes[0, 1].set_ylabel('Rainfall (mm)')\naxes[0, 1].set_xlabel('City')\n\n# Plot 3: Wind Speed\naxes[1, 0].bar(cities, wind_speed, color='lightblue')\naxes[1, 0].set_title('Wind Speed')\naxes[1, 0].set_ylabel('Speed (m/s)')\naxes[1, 0].set_xlabel('City')\n\n# Plot 4: AQI\naxes[1, 1].bar(cities, aqi, color='purple')\naxes[1, 1].set_title('Air Quality Index')\naxes[1, 1].set_ylabel('AQI')\naxes[1, 1].set_xlabel('City')\n\n# Adjust layout\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_21.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the bar charts\nenergy_consumption = [0, 0, 0, 0, 0]\nrenewable_energy_usage = [25, 20, 15, 10, 5]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Plot the bar chart\nax.bar(range(len(energy_consumption)), energy_consumption, color='blue')\nax.bar(range(len(renewable_energy_usage)), renewable_energy_usage, color='green')\n\n# Set the title and labels\nax.set_title('Total Energy Consumption by Country')\nax.set_xlabel('Country')\nax.set_ylabel('Energy Consumption (Petajoules)')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_22.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nmodels = ['Standard Model', 'Advanced Model', 'Optimal Model']\nefficiencies = [0.30, 0.20, 0.15]\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\nax.bar(models, efficiencies, color='blue')\n\n# Set the title and labels\nax.set_title('Energy Efficiency Ratings by Appliance Model')\nax.set_xlabel('Appliance Model')\nax.set_ylabel('Energy Efficiency Rating')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_23.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\nefficiency_scores = [85, 92, 78, 88, 95]\ncost_scores = [65, 75, 60, 70, 68]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Plot the efficiency scores\nax.bar(range(len(efficiency_scores)), efficiency_scores, color='blue', label='Efficiency Score')\n\n# Plot the cost scores\nax.bar(range(len(cost_scores)), cost_scores, color='green', label='Cost Score')\n\n# Set the title and labels\nax.set_title('Energy Assessment Entity')\nax.set_xlabel('Technologies')\nax.set_ylabel('Scores')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_24.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nregions = ['North America', 'Europe', 'Asia', 'South America', 'Africa', 'Australia', 'Central America', 'Middle East', 'Southeast Asia', 'Scandinavia']\nmetrics = [95, 85, 75, 65, 55, 45, 35, 25, 15, 5]\ngraduation = [110, 100, 90, 80, 70, 60, 50, 40, 30, 20]\nenrollment = [115, 105, 95, 85, 75, 65, 55, 45, 35, 25]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Plot the metrics\nax.bar(regions, metrics, color='lightgreen')\n\n# Add graduation and enrollment lines\nfor i, v in enumerate(graduation):\n    ax.text(i, v + 1, str(v), ha='center', va='bottom')\nfor i, v in enumerate(enrollment):\n    ax.text(i, v - 1, str(v), ha='center', va='top')\n\n# Set the title and labels\nax.set_title('Educational Metrics by Region')\nax.set_xlabel('Region')\nax.set_ylabel('Metrics (%)')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_25.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nbrands = ['iPhone 13', 'Samsung S21', 'Google Pixel 6', 'OnePlus 9']\nrecall_rates = [46.3, 34.1, 53.8, 19.4]\nmisleading_recall_rates = [30.1, 57.9, 43.7, 20.0]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Plot the bars\nax.bar(brands, recall_rates, color='blue')\nax.bar(brands, misleading_recall_rates, bottom=recall_rates, color='orange')\n\n# Set the title and labels\nax.set_title('Comparison of Recall Rates Across Products')\nax.set_xlabel('Brands')\nax.set_ylabel('Recall Rate (%)')\n\n# Add a legend\nax.legend(['Truthful Recall', 'Misleading Recall'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_26.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the bar chart\ncategories = ['Support', 'Delivery', 'Product Quality', 'Returns', 'Pricing', 'Website Usability', 'Checkout Process']\nvalues = [15, 18, 20, 12, 17, 10, 8]\ncolors = ['skyblue', 'lightgreen', 'lightskyblue', 'lavender', 'lightcoral', 'lightgrey', 'paleturquoise']\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\nbars = ax.bar(categories, values, color=colors)\n\n# Add text annotations to each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 1), ha='center', va='bottom')\n\n# Set the title and labels\nax.set_title('Customer Satisfaction Scores')\nax.set_xlabel('Complaint Rates')\nax.set_ylabel('Satisfaction Scores')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_27.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ncategories = ['Support', 'Delivery', 'Product Quality', 'Returns', 'Pricing', 'Website Usability', 'Checkout Process']\nagree_rates = [75, 82, 78, 78, 85, 88, 90]\ndisagree_rates = [15, 18, 20, 12, 17, 10, 8]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Plot bars for agree rates\nfor i, rate in enumerate(agree_rates):\n    ax.bar(categories[i], rate, color='orange', label='Agree' if i == 0 else None)\n\n# Plot bars for disagree rates\nfor i, rate in enumerate(disagree_rates):\n    ax.bar(categories[i], -rate, color='lightblue', label='Disagree' if i == 0 else None)\n\n# Set title and labels\nax.set_title('Customer Satisfaction')\nax.set_xlabel('Categories')\nax.set_ylabel('Percentage')\n\n# Add grid lines\nax.grid(True)\n\n# Show legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_28.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Set the background color of the plot\nax.set_facecolor('lightgrey')\n\n# Set the x-axis limits\nax.set_xlim(-0.15, 0.25)\n\n# Set the y-axis limits\nax.set_ylim(0, 0.25)\n\n# Set the x-axis ticks\nax.set_xticks([0, 0.05, 0.1, 0.15, 0.2])\n\n# Set the y-axis ticks\nax.set_yticks([0, 0.05, 0.1, 0.15, 0.2])\n\n# Set the x-axis labels\nax.set_xticklabels(['Watering Frequency', 'Planting Density', 'Plant Variety', 'CO2 Levels', 'Pesticides'])\n\n# Set the y-axis labels\nax.set_yticklabels(['Temperature', 'Fertilizer', 'Soil pH', 'Water Quality', 'Sunlight'])\n\n# Set the title of the plot\nax.set_title('Impact on Plant Growth (\u0394 to control)')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the border lines\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the border lines\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the border lines\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the border lines\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the border lines\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the border lines\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the border lines\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the border lines\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the border lines\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the border lines\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the border lines\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the border lines\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the border lines\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the border lines\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the border lines\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the border lines\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the border lines\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the border lines\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the border lines\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the border lines\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the border lines\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the border lines\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the border lines\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the border lines\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the border lines\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the border lines\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the border lines\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the border lines\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the border lines\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the border lines\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the border lines\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left']."}
{"file": "dataset/ori_500/errorbar_29.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the bar chart\ncities = ['New York', 'Los Angeles', 'Chicago']\ntraffic_volume = [250, 230, 220]\npublic_transit = [175, 160, 150]\naccident_rate = [150, 140, 130]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 4))\n\n# Plot the bars\nax.bar(cities, traffic_volume, color='green', label='Traffic Volume')\nax.bar(cities, public_transit, bottom=traffic_volume, color='blue', label='Public Transit')\nax.bar(cities, accident_rate, bottom=[x+y for x, y in zip(traffic_volume, public_transit)], color='red', label='Accident Rate')\n\n# Set the title and labels\nax.set_title('Traffic Metrics by City')\nax.set_xlabel('City')\nax.set_ylabel('Metric Values')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(10.0, 10.0))\n\n# Set the title of the plot\nax.set_title('FashionMNIST (NEURAL)')\n\n# Set the x-axis label\nax.set_xlabel('Metric')\n\n# Set the y-axis label\nax.set_ylabel('Hyperparameters')\n\n# Define the data for the plot\nx = [0.0, 0.2, 0.4, 0.6, 0.8, 1.0]\ny = [0.0, 0.2, 0.4, 0.6, 0.8, 1.0]\n\n# Plot the data\nax.plot(x, y)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_30.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Set the title of the plot\nax.set_title('Environmental Impact Scores Across Cities')\n\n# Set the x-axis label\nax.set_xlabel('City')\n\n# Set the y-axis label\nax.set_ylabel('Environmental Impact Score')\n\n# Define the data for the bars\ncities = ['City A', 'City B', 'City C', 'City D']\nair_quality_scores = [3.2, 4.1, 2.9, 3.7]\nwater_quality_scores = [2.5, 2.8, 2.2, 2.6]\n\n# Create the bar chart\nax.bar(cities, air_quality_scores, color='pink')\nax.bar(cities, water_quality_scores, bottom=air_quality_scores, color='lightgreen')\n\n# Add labels to the bars\nfor i, v in enumerate(air_quality_scores):\n    ax.text(i, v + 0.1, str(v), ha='center', va='bottom')\n\nfor i, v in enumerate(water_quality_scores):\n    ax.text(i, v + 0.1, str(v), ha='center', va='bottom')\n\n# Set the limits of the y-axis\nax.set_ylim(-3, 3)\n\n# Set the ticks on the y-axis\nax.set_yticks([-3, -2, -1, 0, 1, 2, 3])\n\n# Set the ticks on the x-axis\nax.set_xticks(range(len(cities)))\n\n# Set the labels on the x-axis\nax.set_xticklabels(cities)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\nroles = ['Wererewolf', 'Seer', 'Witch', 'Hunter', 'Villager']\ndurations = [84.97, 102.67, 78.22, 85.17, 80]\ntokens = [80, 780.67, 700, 612.99, 618.52]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 4))\n\n# Plot the durations\nfor i, duration in enumerate(durations):\n    ax.bar(roles[i], duration, color='lightgreen' if roles[i] != 'Wererewolf' else 'lightblue')\n\n# Plot the tokens\nfor i, token in enumerate(tokens):\n    ax.bar(roles[i], token, bottom=durations[i], color='lightblue' if roles[i] != 'Wererewolf' else 'lightgreen')\n\n# Set the title and labels\nax.set_title('a) Speak duration of roles')\nax.set_xlabel('Roles')\nax.set_ylabel('Duration (s)')\nax.set_ylim(0, 120)\n\n# Draw horizontal lines\nfor i in range(len(roles)):\n    ax.axhline(y=durations[i], color='black', linestyle='-')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nx = [5, 10, 20, 30, 40, 50]\ny = [63.77, 64.17, 64.31, 64.98, 65.82, 65.78]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 7))\n\n# Plot the data\nax.plot(x, y, marker='o')\n\n# Set the title and labels\nax.set_title('Size of Data for Training and Validation')\nax.set_xlabel('Percentage of Samples')\nax.set_ylabel('True+ Info (%)')\n\n# Set the grid\nax.grid(True)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the plot lines\nax.plot(x, y, color='blue')\n\n# Set the color of the markers\nax.plot(x, y, 'ro')\n\n# Set the color of the axes\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the tick colors\nax.tick_params(axis='both', colors='black')\n\n# Set the tick labels\nax.set_xticks(x)\nax.set_yticks(range(56, 67, 2))\n\n# Set the tick label rotation\nax.set_xticklabels(['5%', '10%', '20%', '30%', '40%', '50%'], rotation=45)\n\n# Set the tick label color\nax.tick_params(axis='x', colors='black')\n\n# Set the tick label font size\nax.tick_params(axis='y', labelsize=12)\n\n# Set the tick label font weight\nax.tick_params(axis='y', labelweight='bold')\n\n# Set the tick label font style\nax.tick_params(axis='y', labelstyle='italic')\n\n# Set the tick label font family\nax.tick_params(axis='y', labelfamily='serif')\n\n# Set the tick label font variant\nax.tick_params(axis='y', labelvariant='small-caps')\n\n# Set the tick label font stretch\nax.tick_params(axis='y', labelstretch='ultra-condensed')\n\n# Set the tick label font size\nax.tick_params(axis='y', labelsize=12)\n\n# Set the tick label font weight\nax.tick_params(axis='y', labelweight='bold')\n\n# Set the tick label font style\nax.tick_params(axis='y', labelstyle='italic')\n\n# Set the tick label font family\nax.tick_params(axis='y', labelfamily='serif')\n\n# Set the tick label font variant\nax.tick_params(axis='y', labelvariant='small-caps')\n\n# Set the tick label font stretch\nax.tick_params(axis='y', labelstretch='ultra-condensed')\n\n# Set the tick label font size\nax.tick_params(axis='y', labelsize=12)\n\n# Set the tick label font weight\nax.tick_params(axis='y', labelweight='bold')\n\n# Set the tick label font style\nax.tick_params(axis='y', labelstyle='italic')\n\n# Set the tick label font family\nax.tick_params(axis='y', labelfamily='serif')\n\n# Set the tick label font variant\nax.tick_params(axis='y', labelvariant='small-caps')\n\n# Set the tick label font stretch\nax.tick_params(axis='y', labelstretch='ultra-condensed')\n\n# Set the tick label font size\nax.tick_params(axis='y', labelsize=12)\n\n# Set the tick label font weight\nax.tick_params(axis='y', labelweight='bold')\n\n# Set the tick label font style\nax.tick_params(axis='y', labelstyle='italic')\n\n# Set the tick label font family\nax.tick_params(axis='y', labelfamily='serif')\n\n# Set the tick label font variant\nax.tick_params(axis='y', labelvariant='small-caps')\n\n# Set the tick label font stretch\nax.tick_params(axis='y', labelstretch='ultra-condensed')\n\n# Set the tick label font size\nax.tick_params(axis='y', labelsize=12)\n\n# Set the tick label font weight\nax.tick_params(axis='y', labelweight='bold')\n\n# Set the tick label font style\nax.tick_params(axis='y', labelstyle='italic')\n\n# Set the tick label font family\nax.tick_params(axis='y', labelfamily='serif')\n\n# Set the tick label font variant\nax.tick_params(axis='y', labelvariant='small-caps')\n\n# Set the tick label font stretch\nax.tick_params(axis='y', labelstretch='ultra-condensed')\n\n# Set the tick label font size\nax.tick_params(axis='y', labelsize=12)\n\n# Set the tick label font weight\nax.tick_params(axis='y', labelweight='bold')\n\n# Set the tick label font style\nax.tick_params(axis='y', labelstyle='italic')\n\n# Set the tick label font family\nax.tick_params(axis='y', labelfamily='serif')\n\n# Set the tick label font variant\nax.tick_params(axis='y', labelvariant='small-caps')\n\n# Set the tick label font stretch\nax.tick_params(axis='y', labelstretch='ultra-condensed')\n\n# Set the tick label font size\nax.tick_params(axis='y', labelsize=12)\n\n# Set the tick label font weight\nax.tick_params(axis='y', labelweight='bold')\n\n# Set the tick label font style\nax.tick_params(axis='y', labelstyle='italic')\n\n# Set the tick label font family\nax.tick_params(axis='y', labelfamily='serif')\n\n# Set the tick label font variant\nax.tick_params(axis='y', labelvariant='small-caps')\n\n# Set the tick label font stretch\nax.tick_params(axis='y', labelstretch='ultra-condensed')\n\n# Set the tick label font size\nax.tick_params(axis='y', labelsize=12)\n\n# Set the tick label font weight\nax.tick_params(axis='y', labelweight='bold')\n\n# Set the tick label font style\nax.tick_params(axis='y', labelstyle='italic')\n\n# Set the tick label font family\nax.tick_params(axis='y', labelfamily='serif')\n\n# Set the tick label font variant\nax.tick_params(axis='y', labelvariant='small-caps')\n\n# Set the tick label font stretch\nax.tick_params(axis='y', labelstretch='ultra-condensed')\n\n# Set the tick label font size\nax.tick_params(axis='y', labelsize=12)\n\n# Set the tick label font weight\nax.tick_params(axis='y', labelweight='bold')\n\n# Set the tick label font style\nax.tick_params(axis='y', labelstyle='italic')\n\n# Set the tick label font family\nax.tick_params(axis='y', labelfamily='serif')\n\n# Set the tick label font variant\nax.tick_params(axis='y', labelvariant='small-caps')\n\n# Set the tick label font stretch\nax.tick_params(axis='y', labelstretch='ultra-condensed')\n\n# Set the tick label font size\nax.tick_params(axis='y', labelsize=12)\n\n# Set the tick label font weight\nax.tick_params(axis='y', labelweight='bold')\n\n# Set the tick label font style\nax.tick_params(axis='y', labelstyle='italic')\n\n# Set the tick label font family\nax.tick_params(axis='y', labelfamily='serif')\n\n# Set the tick label font variant\nax.tick_params(axis='y', labelvariant='small-caps')\n\n# Set the tick label font stretch\nax.tick_params(axis='y', labelstretch='ultra-condensed')\n\n# Set the tick label font size\nax.tick_params(axis='y', labelsize=12)\n\n# Set the tick label font weight\nax.tick_params(axis='y', labelweight='bold')\n\n# Set the tick label font style\nax.tick_params(axis='y', labelstyle='italic')\n\n# Set the tick label font family\nax.tick_params(axis='y', labelfamily='serif')\n\n# Set the tick label font variant\nax.tick_params(axis='y', labelvariant='small-caps')\n\n# Set the tick label font stretch\nax.tick_params(axis='y', labelstretch='ultra-condensed')\n\n# Set the tick label font size\nax.tick_params(axis='y', labelsize=12)\n\n# Set the tick label font weight\nax.tick_params(axis='y', labelweight='bold')\n\n# Set the tick label font style\nax.tick_params(axis='y', labelstyle='italic')\n\n# Set the tick label font family\nax.tick_params(axis='y', labelfamily='serif')\n\n# Set the tick label font variant\nax.tick_params(axis='y', labelvariant='small-caps')\n\n# Set the tick label font stretch\nax.tick_params(axis='y', labelstretch='ultra-condensed')\n\n# Set the tick label font size\nax.tick_params(axis='y', labelsize=12)\n\n# Set the tick label font weight\nax.tick_params(axis='y', labelweight='bold')\n\n# Set the tick label font style\nax.tick_params(axis='y', labelstyle='italic')\n\n# Set the tick label font family\nax.tick_params(axis='y', labelfamily='serif')\n\n# Set the tick label font variant\nax.tick_params(axis='y', labelvariant='small-caps')\n\n# Set the tick label font stretch\nax.tick_params(axis='y', labelstretch='ultra-condensed')\n\n# Set the tick label font size\nax.tick_params(axis='y', labelsize=12)\n\n# Set the tick label font weight\nax.tick_params(axis='y', labelweight='bold')\n\n# Set the tick label font style\nax.tick_params(axis='y', labelstyle='italic')\n\n# Set the tick label font family\nax.tick_params(axis='y', labelfamily='serif')\n\n# Set the tick label font variant\nax.tick_params(axis='y', labelvariant='small-caps')\n\n# Set the tick label font stretch\nax.tick_params(axis='y', labelstretch='ultra-condensed')\n\n# Set the tick label font size\nax.tick_params(axis='y', labelsize=12)\n\n# Set the tick label font weight\nax.tick_params(axis='y', labelweight='bold')\n\n# Set the tick label font style\nax.tick_params(axis='y', labelstyle='italic')\n\n# Set the tick label font family\nax.tick_params(axis='y', labelfamily='serif')\n\n# Set the tick label font variant\nax.tick_params(axis='y', labelvariant='small-caps')\n\n# Set the tick label font stretch\nax.tick_params(axis='y', labelstretch='ultra-condensed')\n\n# Set the tick label font size\nax.tick_params(axis='y', labelsize=12)\n\n# Set the tick label font weight\nax.tick_params(axis='y', labelweight='bold')\n\n# Set the tick label font style\nax.tick_params(axis='y', labelstyle='italic')\n\n# Set the tick label font family\nax.tick_params(axis='y', labelfamily='serif')\n\n# Set the tick label font variant\nax.tick_params(axis='y', labelvariant='small-caps')\n\n# Set the tick label font stretch\nax.tick_params(axis='y', labelstretch='ultra-condensed')\n\n# Set the tick label font size\nax.tick_params(axis='y', labelsize=12)\n\n# Set the tick label font weight\nax.tick_params(axis='y', labelweight='bold')\n\n# Set the tick label font style\nax.tick_params(axis='y', labelstyle='italic')\n\n# Set the tick label font family\nax.tick_params(axis='y', labelfamily='serif')\n\n# Set the tick label font variant\nax.tick_params(axis='y', labelvariant='small-caps')\n\n# Set the tick label font stretch\nax.tick_params(axis='y', labelstretch='ultra-condensed')\n\n# Set the tick label font size\nax.tick_params(axis='y', labelsize=12)\n\n# Set the tick label font weight\nax.tick_params(axis='y', labelweight='bold')\n\n# Set the tick label font style\nax.tick_params(axis='y', labelstyle='italic')\n\n# Set the tick label font family\nax.tick_params(axis='y', labelfamily='serif')\n\n# Set the tick label font variant\nax.tick_params(axis='y', labelvariant='small-caps')\n\n# Set the tick label font stretch\nax.tick_params(axis='y', labelstretch='ultra-condensed')\n\n# Set the tick label font size\nax.tick_params(axis='y', labelsize=12)\n\n# Set the tick label font weight\nax.tick_params(axis='y', labelweight='bold')\n\n# Set the tick label font style\nax.tick_params(axis='y', labelstyle='italic')\n\n# Set the tick label font family\nax.tick_params(axis='y', labelfamily='serif')\n\n# Set the tick label font variant\nax.tick_params(axis='y', labelvariant='small-caps')\n\n# Set the tick label font stretch\nax.tick_params(axis='y', labelstretch='ultra-condensed')\n\n# Set the tick label font size\nax.tick_params(axis='y', labelsize=12)\n\n# Set the tick label font weight\nax.tick_params(axis='y', labelweight='bold')\n\n# Set the tick label font style\nax.tick_params(axis='y', labelstyle='italic')\n\n# Set the tick label font family\nax.tick_params(axis='y', labelfamily='serif')\n\n# Set the tick label font variant\nax.tick_params(axis='y', labelvariant='small-caps')\n\n# Set the tick label font stretch\nax.tick_params(axis='y', labelstretch='ultra-condensed')\n\n# Set the tick label font size\nax.tick_params(axis='y', labelsize=12)\n\n# Set the tick label font weight\nax.tick_params(axis='y', labelweight='bold')\n\n# Set the tick label font style\nax.tick_params(axis='y', labelstyle='italic')\n\n# Set the tick label font family\nax.tick_params(axis='y', labelfamily='serif')\n\n# Set the tick label font variant\nax.tick_params(axis='y', labelvariant='small-caps')\n\n# Set the tick label font stretch\nax.tick_params(axis='y', labelstretch='ultra-condensed')\n\n# Set the tick label font size\nax.tick_params(axis='y', labelsize=12)\n\n# Set the tick label font weight\nax.tick_params(axis='y', labelweight='bold')\n\n# Set the tick label font style\nax.tick_params(axis='y', labelstyle='italic')\n\n# Set the tick label font family\nax.tick_params(axis='y', labelfamily='serif')\n\n# Set the tick label font variant\nax.tick_params(axis='y', labelvariant='small-caps')\n\n# Set the tick label font stretch\nax.tick_params(axis='y', labelstretch='ultra-condensed')\n\n# Set the tick label font size\nax.tick_params(axis='y', labelsize=12)\n\n# Set the tick label font weight\nax.tick_params(axis='y', labelweight='bold')\n\n# Set the tick label font style\nax.tick_params(axis='y', labelstyle='italic')\n\n# Set the tick label font family\nax.tick_params(axis='y', labelfamily='serif')\n\n# Set the tick label font variant\nax.tick_params(axis='y', labelvariant='small-caps')\n\n# Set the tick label font stretch\nax.tick_params(axis='y', labelstretch='ultra-condensed')\n\n# Set the tick label font size\nax.tick_params(axis='y', labelsize=12)\n\n# Set the tick label font weight\nax.tick_params(axis='y', labelweight='bold')\n\n# Set the tick label font style\nax.tick_params(axis='y', labelstyle='italic')\n\n# Set the tick label font family\nax.tick_params(axis='y', labelfamily='serif')\n\n# Set the tick label font variant\nax.tick_params(axis='y', labelvariant='small-caps')\n\n# Set the tick label font stretch\nax.tick_params(axis='y', labelstretch='ultra-condensed')\n\n# Set the tick label font size\nax.tick_params(axis='y', labelsize=12)\n\n# Set the tick label font weight\nax.tick_params(axis='y', labelweight='bold')\n\n# Set the tick label font style\nax.tick_params(axis='y', labelstyle='italic')\n\n# Set the tick label font family\nax.tick_params(axis='y', labelfamily='serif')\n\n# Set the tick label font variant\nax.tick_params(axis='y', labelvariant='small-caps')\n\n# Set the tick label font stretch\nax.tick_params(axis='y', labelstretch='ultra-condensed')\n\n# Set the tick label font size\nax.tick_params(axis='y', labelsize=12)\n\n# Set the tick label font weight\nax.tick_params(axis='y', labelweight='bold')\n\n# Set the tick label font style\nax.tick_params(axis='y', labelstyle='italic')\n\n# Set the tick label font family\nax.tick_params(axis='y', labelfamily='serif')\n\n# Set the tick label font variant\nax.tick_params(axis='y', labelvariant='small-caps')\n\n# Set the tick label font stretch\nax.tick_params(axis='y', labelstretch='ultra-condensed')\n\n# Set the tick label font size\nax.tick_params(axis='y', labelsize=12)\n\n# Set the tick label font weight\nax.tick_params(axis='y', labelweight='bold')\n\n# Set the tick label font style\nax.tick_params(axis='y', labelstyle='italic')\n\n# Set the tick label font family\nax.tick_params(axis='y', labelfamily='serif')\n\n# Set the tick label font variant\nax.tick_params(axis='y', labelvariant='small-caps')\n\n# Set the tick label font stretch\nax.tick_params(axis='y', labelstretch='ultra-condensed')\n\n# Set the tick label font size\nax.tick_params(axis='y', labelsize=12)\n\n# Set the tick label font weight\nax.tick_params(axis='y', labelweight='bold')\n\n# Set the tick label font style\nax.tick_params(axis='y', labelstyle='italic')\n\n# Set the tick label font family\nax.tick_params(axis='y', labelfamily='serif')\n\n# Set the tick label font variant\nax.tick_params(axis='y', labelvariant='small-caps')\n\n# Set the tick label font stretch\nax.tick_params(axis='y', labelstretch='ultra-condensed')\n\n# Set the tick label font size\nax.tick_params(axis='y', labelsize=12)\n\n# Set the tick label font weight\nax.tick_params(axis='y', labelweight='bold')\n\n# Set the tick label font style\nax.tick_params(axis='y', labelstyle='italic')\n\n# Set the tick label font family\nax.tick_params(axis='y', labelfamily='serif')\n\n# Set the tick label font variant\nax.tick_params(axis='y', labelvariant='small-caps')\n\n# Set the tick label font stretch\nax.tick_params(axis='y', labelstretch='ultra-condensed')\n\n# Set the tick label font size\nax.tick_params(axis='y', labelsize=12)\n\n# Set the tick label font weight\nax.tick_params(axis='y"}
{"file": "dataset/ori_500/errorbar_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nx = ['all', 'arg-causal', 'test 0', 'test 1', 'test 2', 'test 3', 'test 4', 'test 5', 'test 6', 'constant']\ny = [834, 832, 830, 830, 830, 830, 830, 830, 830, 828]\ncolors = ['red', 'lightblue', 'lightgreen', 'lightgreen', 'lightgreen', 'lightgreen', 'lightgreen', 'lightgreen', 'lightgreen', 'grey']\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Plot the data\nax.bar(x, y, color=colors)\n\n# Set the title\nax.set_title('Out-of-domain accuracy')\n\n# Set the x-axis label\nax.set_xlabel('Test cases')\n\n# Set the y-axis label\nax.set_ylabel('Accuracy')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nmodels = ['Final Distribution with GPT-4-Turbo', 'Final Distribution with GPT-3.5-Turbo', '0.125 Parameter-Valued Distribution', 'Initial Distribution', 'Best-of-Three']\nvalues = [0.7, 0.8, 0.6, 0.5, 0.4]\ncolors = ['lightblue', 'lightblue', 'lightblue', 'lightblue', 'lightblue']\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(10, 6))\nbars = ax.bar(models, values, color=colors)\n\n# Add a vertical line at the end of each bar\nfor bar in bars:\n    ax.axvline(x=bar.get_x() + bar.get_width(), color='black')\n\n# Set the title and labels\nax.set_title('Mini Crosswords Performance')\nax.set_xlabel('Model')\nax.set_ylabel('Objective Value')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nbrands = ['BERT', 'RoBERTa', 'DistilBERT', 'XLNet', 'Electra', 'Albert', 'BART', 'DeBERTa', 'DeBERTaTa', 'Llama2']\naccuracies = [55, 60, 58, 62, 57, 59, 64, 56, 53, 51]\nlabels = ['Ground-truth labels', 'Weak labels']\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 3))\n\n# Plot bars\nfor i, brand in enumerate(brands):\n    ax.barh(brand, accuracies[i], color='red' if i % 2 == 0 else 'blue')\n\n# Set labels\nax.set_xlabel('Accuracy (%)')\nax.set_title('Model Accuracy Comparison')\n\n# Add labels\nfor i, brand in enumerate(brands):\n    ax.text(accuracies[i] + 1, brand, str(accuracies[i]) + '%', va='center')\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the chart\ncategories = ['Computational Social Science and Social Media', 'Phonology, Morphology and Word Segmentation', 'Information Retrieval and Text Mining', 'Machine Learning for NLP', 'Information Extraction', 'Discourse and Pragmatics', 'Syntax: Tagging, Chunking and Parsing']\nvalues = [1.5, 1.4, 1.3, 1.2, 1.1, 1.0, 0.9]\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\nbars = ax.bar(categories, values, color='lavender')\n\n# Add labels and title\nax.set_xlabel('Categories')\nax.set_ylabel('Values')\nax.set_title('Your Chart Title Here')\n\n# Add value labels on top of each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 2), ha='center', va='bottom')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/errorpoint_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ncategories = ['Kashmir', 'Religion', 'Crime and Justice', 'CAA', 'Pulwama-Balakot', 'Politics']\nshouting_fractions = [0.12, 0.14, 0.16, 0.18, 0.20, 0.22]\nmean_values = [0.13, 0.15, 0.17, 0.19, 0.21, 0.23]\n\n# Plotting\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\nax.plot(categories, shouting_fractions, marker='o', color='blue')\nax.plot(categories, mean_values, marker='o', color='blue')\n\n# Adding horizontal lines\nax.axhline(y=0.10, color='gray', linestyle='-')\nax.axhline(y=0.12, color='gray', linestyle='-')\nax.axhline(y=0.14, color='gray', linestyle='-')\nax.axhline(y=0.16, color='gray', linestyle='-')\nax.axhline(y=0.18, color='gray', linestyle='-')\nax.axhline(y=0.20, color='gray', linestyle='-')\nax.axhline(y=0.22, color='gray', linestyle='-')\n\n# Adding vertical lines\nax.axvline(x=0.5, color='gray', linestyle='-')\nax.axvline(x=1.5, color='gray', linestyle='-')\nax.axvline(x=2.5, color='gray', linestyle='-')\nax.axvline(x=3.5, color='gray', linestyle='-')\nax.axvline(x=4.5, color='gray', linestyle='-')\nax.axvline(x=5.5, color='gray', linestyle='-')\n\n# Adding text\nax.text(0.5, 0.11, 'Dataset mean', color='blue')\nax.text(1.5, 0.13, 'Mean', color='blue')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/errorpoint_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(6.0, 9.0))\n\n# Set the title of the plot\nax.set_title('Variable, Symmetric Error')\n\n# Set the x-axis label\nax.set_xlabel('X Axis Label')\n\n# Set the y-axis label\nax.set_ylabel('Y Axis Label')\n\n# Set the x-axis limits\nax.set_xlim(0, 25)\n\n# Set the y-axis limits\nax.set_ylim(10, 30)\n\n# Set the grid lines\nax.grid(True)\n\n# Set the tick marks\nax.set_xticks([0, 5, 10, 15, 20, 25])\nax.set_yticks([10, 15, 20, 25])\n\n# Set the tick labels\nax.set_xticklabels(['0', '5', '10', '15', '20', '25'])\nax.set_yticklabels(['10', '15', '20', '25'])\n\n# Set the color of the grid lines\nax.grid(color='blue')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', labelcolor='green')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('purple')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('orange')\n\n# Set the color of the title\nax.title.set_color('brown')\n\n# Set the color of the grid lines\nax.grid(color='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='pink')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', labelcolor='cyan')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('magenta')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('lime')\n\n# Set the color of the title\nax.title.set_color('silver')\n\n# Set the color of the grid lines\nax.grid(color='navy')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='olive')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', labelcolor='teal')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('coral')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('crimson')\n\n# Set the color of the title\nax.title.set_color('darkblue')\n\n# Set the color of the grid lines\nax.grid(color='darkgreen')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='darkgrey')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', labelcolor='darkkhaki')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('darkmagenta')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('darkolivegreen')\n\n# Set the color of the title\nax.title.set_color('darkorange')\n\n# Set the color of the grid lines\nax.grid(color='darkorchid')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='darkred')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', labelcolor='darksalmon')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('darkseagreen')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('darkslateblue')\n\n# Set the color of the title\nax.title.set_color('darkslategray')\n\n# Set the color of the grid lines\nax.grid(color='darkturquoise')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='darkviolet')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', labelcolor='deeppink')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('deepskyblue')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('dimgray')\n\n# Set the color of the title\nax.title.set_color('dimgrey')\n\n# Set the color of the grid lines\nax.grid(color='dodgerblue')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='firebrick')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', labelcolor='floralwhite')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('forestgreen')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('fuchsia')\n\n# Set the color of the title\nax.title.set_color('gainsboro')\n\n# Set the color of the grid lines\nax.grid(color='ghostwhite')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='gold')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', labelcolor='gray')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('green')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('greenyellow')\n\n# Set the color of the title\nax.title.set_color('grey')\n\n# Set the color of the grid lines\nax.grid(color='honeydew')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='hotpink')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', labelcolor='indianred')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('indigo')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('ivory')\n\n# Set the color of the title\nax.title.set_color('khaki')\n\n# Set the color of the grid lines\nax.grid(color='lavender')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='lavenderblush')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', labelcolor='lawngreen')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('lemonchiffon')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('lightblue')\n\n# Set the color of the title\nax.title.set_color('lightcoral')\n\n# Set the color of the grid lines\nax.grid(color='lightcyan')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='lightgoldenrodyellow')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', labelcolor='lightgray')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('lightgreen')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('lightgrey')\n\n# Set the color of the title\nax.title.set_color('lightpink')\n\n# Set the color of the grid lines\nax.grid(color='lightsalmon')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='lightseagreen')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', labelcolor='lightskyblue')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('lightslategray')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('lightsteelblue')\n\n# Set the color of the title\nax.title.set_color('lightyellow')\n\n# Set the color of the grid lines\nax.grid(color='lime')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='limegreen')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', labelcolor='linen')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('magenta')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('maroon')\n\n# Set the color of the title\nax.title.set_color('mediumaquamarine')\n\n# Set the color of the grid lines\nax.grid(color='mediumblue')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='mediumorchid')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', labelcolor='mediumpurple')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('mediumseagreen')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('mediumslateblue')\n\n# Set the color of the title\nax.title.set_color('mediumspringgreen')\n\n# Set the color of the grid lines\nax.grid(color='mediumturquoise')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='mediumvioletred')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', labelcolor='midnightblue')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('mintcream')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('mistyrose')\n\n# Set the color of the title\nax.title.set_color('moccasin')\n\n# Set the color of the grid lines\nax.grid(color='navajowhite')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='navy')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', labelcolor='oldlace')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('olive')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('olivedrab')\n\n# Set the color of the title\nax.title.set_color('orange')\n\n# Set the color of the grid lines\nax.grid(color='orangered')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='orchid')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', labelcolor='palegoldenrod')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('palegreen')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('paleturquoise')\n\n# Set the color of the title\nax.title.set_color('palevioletred')\n\n# Set the color of the grid lines\nax.grid(color='papayawhip')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='peachpuff')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', labelcolor='peru')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('pink')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('plum')\n\n# Set the color of the title\nax.title.set_color('powderblue')\n\n# Set the color of the grid lines\nax.grid(color='purple')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', labelcolor='rosybrown')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('royalblue')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('saddlebrown')\n\n# Set the color of the title\nax.title.set_color('salmon')\n\n# Set the color of the grid lines\nax.grid(color='sandybrown')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='seagreen')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', labelcolor='seashell')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('sienna')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('silver')\n\n# Set the color of the title\nax.title.set_color('skyblue')\n\n# Set the color of the grid lines\nax.grid(color='slateblue')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='slategray')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', labelcolor='snow')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('springgreen')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('steelblue')\n\n# Set the color of the title\nax.title.set_color('tan')\n\n# Set the color of the grid lines\nax.grid(color='thistle')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='tomato')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', labelcolor='turquoise')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('violet')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('wheat')\n\n# Set the color of the title\nax.title.set_color('white')\n\n# Set the color of the grid lines\nax.grid(color='whitesmoke')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='yellow')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', labelcolor='yellowgreen')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('yellow')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('yellowgreen')\n\n# Set the color of the title\nax.title.set_color('yellow')\n\n# Set the color of the grid lines\nax.grid(color='yellowgreen')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='yellow')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', labelcolor='yellowgreen')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('yellow')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('yellowgreen')\n\n# Set the color of the title\nax.title.set_color('yellow')\n\n# Set the color of the grid lines\nax.grid(color='yellowgreen')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='yellow')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', labelcolor='yellowgreen')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('yellow')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('yellowgreen')\n\n# Set the color of the title\nax.title.set_color('yellow')\n\n# Set the color of the grid lines\nax.grid(color='yellowgreen')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='yellow')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', labelcolor='yellowgreen')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('yellow')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('yellowgreen')\n\n# Set the color of the title\nax.title.set_color('yellow')\n\n# Set the color of the grid lines\nax.grid(color='yellowgreen')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='yellow')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', labelcolor='yellowgreen')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('yellow')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('yellowgreen')\n\n# Set the color of the title\nax.title.set_color('yellow')\n\n# Set the color of the grid lines\nax.grid(color='yellowgreen')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='yellow')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', labelcolor='yellowgreen')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('yellow')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('yellowgreen')\n\n# Set the color of the title\nax.title.set_color('yellow')\n\n# Set the color of the grid lines\nax.grid(color='yellowgreen')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='yellow')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', labelcolor='yellowgreen')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('yellow')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('yellowgreen')\n\n# Set the color of the title\nax.title.set_color('yellow')\n\n# Set the color of the grid lines\nax.grid(color='yellowgreen')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='yellow')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', labelcolor='yellowgreen')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('yellow')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('yellowgreen')\n\n# Set the color of the title\nax.title.set_color('yellow')\n\n# Set the color of the grid lines\nax.grid(color='yellowgreen')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='yellow')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', labelcolor='yellowgreen')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('yellow')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('yellowgreen')\n\n# Set the color of the title\nax.title.set_color('yellow')\n\n# Set the color of the grid lines\nax.grid(color='yellowgreen')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='yellow')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', labelcolor='yellowgreen')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('yellow')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('yellowgreen')\n\n# Set the color of the title\nax.title.set_color('yellow')\n\n# Set the color of the grid lines\nax.grid(color='yellowgreen')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='yellow')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', labelcolor='yellowgreen')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('yellow')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('yellowgreen')\n\n# Set the color of the title\nax.title.set_color('yellow')\n\n# Set the color of the grid lines\nax.grid(color='yellowgreen')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='yellow')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', labelcolor='yellowgreen')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('yellow"}
{"file": "dataset/ori_500/errorpoint_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Incivility (Fraction of Videos)')\n\n# Set the x-axis label\nax.set_xlabel('Incivility (Fraction of Videos)')\n\n# Set the y-axis label\nax.set_ylabel('Category')\n\n# Define the categories and their corresponding incivility values\ncategories = ['Politics', 'Religion', 'Kashmir', 'CAA', 'Pulwama-Balakot']\nincivility_values = [0.16, 0.18, 0.20, 0.22, 0.24]\n\n# Plot the data\nfor category, value in zip(categories, incivility_values):\n    ax.plot([value, value], [category, category], color='red')\n    ax.text(value, category, category, ha='right', va='center')\n\n# Set the x-axis limits\nax.set_xlim(0.15, 0.25)\n\n# Set the y-axis limits\nax.set_ylim(-1, len(categories))\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorpoint_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the plots\nx = [-19.6, -19.5, -19.4, -19.3]\ny1 = [-19.353 + 0.073, -19.257 + 0.028, -19.404 + 0.099, -19.314 + 0.104]\ny2 = [-19.404 + 0.099, -19.257 + 0.028, -19.314 + 0.104, -19.404 + 0.099]\ny3 = [-19.314 + 0.104, -19.257 + 0.028, -19.314 + 0.104, -19.404 + 0.099]\ny4 = [-19.404 + 0.099, -19.257 + 0.028, -19.314 + 0.104, -19.404 + 0.099]\ny5 = [-19.314 + 0.104, -19.257 + 0.028, -19.314 + 0.104, -19.404 + 0.099]\ny6 = [-19.404 + 0.099, -19.257 + 0.028, -19.314 + 0.104, -19.404 + 0.099]\ny7 = [-19.314 + 0.104, -19.257 + 0.028, -19.314 + 0.104, -19.404 + 0.099]\ny8 = [-19.404 + 0.099, -19.257 + 0.028, -19.314 + 0.104, -19.404 + 0.099]\ny9 = [-19.314 + 0.104, -19.257 + 0.028, -19.314 + 0.104, -19.404 + 0.099]\ny10 = [-19.404 + 0.099, -19.257 + 0.028, -19.314 + 0.104, -19.404 + 0.099]\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Plot the data\nax.plot(x, y1, label='This work*')\nax.plot(x, y2, label='Shah et al.')\nax.plot(x, y3, label='Shah et al.')\nax.plot(x, y4, label='Banerjee et al.')\nax.plot(x, y5, label='Favale et al.')\nax.plot(x, y6, label='Favale et al.')\nax.plot(x, y7, label='Gomez-Valent')\nax.plot(x, y8, label='Gomez-Valent')\nax.plot(x, y9, label='Benisty et al.')\nax.plot(x, y10, label='Benisty et al.')\n\n# Set the limits of the x-axis\nax.set_xlim(-19.6, -19.3)\n\n# Set the title and labels\nax.set_title('Magnetic Field vs. M_{B}')\nax.set_xlabel('M_{B}')\nax.set_ylabel('Magnetic Field')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorpoint_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Set the title of the plot\nax.set_title('Dataset unique shouter count mean')\n\n# Set the x-axis label\nax.set_xlabel('Number of speakers')\n\n# Set the y-axis label\nax.set_ylabel('Unique speaker count mean')\n\n# Draw a rectangle at the top of the plot\nax.add_patch(plt.Rectangle((0, 15), 10, 1, color='grey', alpha=0.3))\n\n# Draw a rectangle at the bottom of the plot\nax.add_patch(plt.Rectangle((0, 4), 10, 1, color='grey', alpha=0.3))\n\n# Draw a rectangle at the left side of the plot\nax.add_patch(plt.Rectangle((-1, 0), 1, 15, color='grey', alpha=0.3))\n\n# Draw a rectangle at the right side of the plot\nax.add_patch(plt.Rectangle((9, 0), 1, 15, color='grey', alpha=0.3))\n\n# Draw a rectangle at the center of the plot\nax.add_patch(plt.Rectangle((4, 7), 2, 2, color='grey', alpha=0.3))\n\n# Draw a rectangle at the center of the plot\nax.add_patch(plt.Rectangle((4, 11), 2, 2, color='grey', alpha=0.3))\n\n# Draw a rectangle at the center of the plot\nax.add_patch(plt.Rectangle((4, 15), 2, 2, color='grey', alpha=0.3))\n\n# Draw a rectangle at the center of the plot\nax.add_patch(plt.Rectangle((4, 19), 2, 2, color='grey', alpha=0.3))\n\n# Draw a rectangle at the center of the plot\nax.add_patch(plt.Rectangle((4, 23), 2, 2, color='grey', alpha=0.3))\n\n# Draw a rectangle at the center of the plot\nax.add_patch(plt.Rectangle((4, 27), 2, 2, color='grey', alpha=0.3))\n\n# Draw a rectangle at the center of the plot\nax.add_patch(plt.Rectangle((4, 31), 2, 2, color='grey', alpha=0.3))\n\n# Draw a rectangle at the center of the plot\nax.add_patch(plt.Rectangle((4, 35), 2, 2, color='grey', alpha=0.3))\n\n# Draw a rectangle at the center of the plot\nax.add_patch(plt.Rectangle((4, 39), 2, 2, color='grey', alpha=0.3))\n\n# Draw a rectangle at the center of the plot\nax.add_patch(plt.Rectangle((4, 43), 2, 2, color='grey', alpha=0.3))\n\n# Draw a rectangle at the center of the plot\nax.add_patch(plt.Rectangle((4, 47), 2, 2, color='grey', alpha=0.3))\n\n# Draw a rectangle at the center of the plot\nax.add_patch(plt.Rectangle((4, 51), 2, 2, color='grey', alpha=0.3))\n\n# Draw a rectangle at the center of the plot\nax.add_patch(plt.Rectangle((4, 55), 2, 2, color='grey', alpha=0.3))\n\n# Draw a rectangle at the center of the plot\nax.add_patch(plt.Rectangle((4, 59), 2, 2, color='grey', alpha=0.3))\n\n# Draw a rectangle at the center of the plot\nax.add_patch(plt.Rectangle((4, 63), 2, 2, color='grey', alpha=0.3))\n\n# Draw a rectangle at the center of the plot\nax.add_patch(plt.Rectangle((4, 67), 2, 2, color='grey', alpha=0.3))\n\n# Draw a rectangle at the center of the plot\nax.add_patch(plt.Rectangle((4, 71), 2, 2, color='grey', alpha=0.3))\n\n# Draw a rectangle at the center of the plot\nax.add_patch(plt.Rectangle((4, 75), 2, 2, color='grey', alpha=0.3))\n\n# Draw a rectangle at the center of the plot\nax.add_patch(plt.Rectangle((4, 79), 2, 2, color='grey', alpha=0.3))\n\n# Draw a rectangle at the center of the plot\nax.add_patch(plt.Rectangle((4, 83), 2, 2, color='grey', alpha=0.3))\n\n# Draw a rectangle at the center of the plot\nax.add_patch(plt.Rectangle((4, 87), 2, 2, color='grey', alpha=0.3))\n\n# Draw a rectangle at the center of the plot\nax.add_patch(plt.Rectangle((4, 91), 2, 2, color='grey', alpha=0.3))\n\n# Draw a rectangle at the center of the plot\nax.add_patch(plt.Rectangle((4, 95), 2, 2, color='grey', alpha=0.3))\n\n# Draw a rectangle at the center of the plot\nax.add_patch(plt.Rectangle((4, 99), 2, 2, color='grey', alpha=0.3))\n\n# Draw a rectangle at the center of the plot\nax.add_patch(plt.Rectangle((4, 103), 2, 2, color='grey', alpha=0.3))\n\n# Draw a rectangle at the center of the plot\nax.add_patch(plt.Rectangle((4, 107), 2, 2, color='grey', alpha=0.3))\n\n# Draw a rectangle at the center of the plot\nax.add_patch(plt.Rectangle((4, 111), 2, 2, color='grey', alpha=0.3))\n\n# Draw a rectangle at the center of the plot\nax.add_patch(plt.Rectangle((4, 115), 2, 2, color='grey', alpha=0.3))\n\n# Draw a rectangle at the center of the plot\nax.add_patch(plt.Rectangle((4, 119), 2, 2, color='grey', alpha=0.3))\n\n# Draw a rectangle at the center of the plot\nax.add_patch(plt.Rectangle((4, 123), 2, 2, color='grey', alpha=0.3))\n\n# Draw a rectangle at the center of the plot\nax.add_patch(plt.Rectangle((4, 127), 2, 2, color='grey', alpha=0.3))\n\n# Draw a rectangle at the center of the plot\nax.add_patch(plt.Rectangle((4, 131), 2, 2, color='grey', alpha=0.3))\n\n# Draw a rectangle at the center of the plot\nax.add_patch(plt.Rectangle((4, 135), 2, 2, color='grey', alpha=0.3))\n\n# Draw a rectangle at the center of the plot\nax.add_patch(plt.Rectangle((4, 139), 2, 2, color='grey', alpha=0.3))\n\n# Draw a rectangle at the center of the plot\nax.add_patch(plt.Rectangle((4, 143), 2, 2, color='grey', alpha=0.3))\n\n# Draw a rectangle at the center of the plot\nax.add_patch(plt.Rectangle((4, 147), 2, 2, color='grey', alpha=0.3))\n\n# Draw a rectangle at the center of the plot\nax.add_patch(plt.Rectangle((4, 151), 2, 2, color='grey', alpha=0.3))\n\n# Draw a rectangle at the center of the plot\nax.add_patch(plt.Rectangle((4, 155), 2, 2, color='grey', alpha=0.3))\n\n# Draw a rectangle at the center of the plot\nax.add_patch(plt.Rectangle((4, 159), 2, 2, color='grey', alpha=0.3))\n\n# Draw a rectangle at the center of the plot\nax.add_patch(plt.Rectangle((4, 163), 2, 2, color='grey', alpha=0.3))\n\n# Draw a rectangle at the center of the plot\nax.add_patch(plt.Rectangle((4, 167), 2, 2, color='grey', alpha=0.3))\n\n# Draw a rectangle at the center of the plot\nax.add_patch(plt.Rectangle((4, 171), 2, 2, color='grey', alpha=0.3))\n\n# Draw a rectangle at the center of the plot\nax.add_patch(plt.Rectangle((4, 175), 2, 2, color='grey', alpha=0.3))\n\n# Draw a rectangle at the center of the plot\nax.add_patch(plt.Rectangle((4, 179), 2, 2, color='grey', alpha=0.3))\n\n# Draw a rectangle at the center of the plot\nax.add_patch(plt.Rectangle((4, 183), 2, 2, color='grey', alpha=0.3))\n\n# Draw a rectangle at the center of the plot\nax.add_patch(plt.Rectangle((4, 187), 2, 2, color='grey', alpha=0.3))\n\n# Draw a rectangle at the center of the plot\nax.add_patch(plt.Rectangle((4, 191), 2, 2, color='grey', alpha=0.3))\n\n# Draw a rectangle at the center of the plot\nax.add_patch(plt.Rectangle((4, 195), 2, 2, color='grey', alpha=0.3))\n\n# Draw a rectangle at the center of the plot\nax.add_patch(plt.Rectangle((4, 199), 2, 2, color='grey', alpha=0.3))\n\n# Draw a rectangle at the center of the plot\nax.add_patch(plt.Rectangle((4, 203), 2, 2, color='grey', alpha=0.3))\n\n# Draw a rectangle at the center of the plot\nax.add_patch(plt.Rectangle((4, 207), 2, 2, color='grey', alpha=0.3))\n\n# Draw a rectangle at the center of the plot\nax.add_patch(plt.Rectangle((4, 211), 2, 2, color='grey', alpha=0.3))\n\n# Draw a rectangle at the center of the plot\nax.add_patch(plt.Rectangle((4, 215), 2, 2, color='grey', alpha=0.3))\n\n# Draw a rectangle at the center of the plot\nax.add_patch(plt.Rectangle((4, 219), 2, 2, color='grey', alpha=0.3))\n\n# Draw a rectangle at the center of the plot\nax.add_patch(plt.Rectangle((4, 223), 2, 2, color='grey', alpha=0.3))\n\n# Draw a rectangle at the center of the plot\nax.add_patch(plt.Rectangle((4, 227), 2, 2, color='grey', alpha=0.3))\n\n# Draw a rectangle at the center of the plot\nax.add_patch(plt.Rectangle((4, 231), 2, 2, color='grey', alpha=0.3))\n\n# Draw a rectangle at the center of the plot\nax.add_patch(plt.Rectangle((4, 235), 2, 2, color='grey', alpha=0.3))\n\n# Draw a rectangle at the center of the plot\nax.add_patch(plt.Rectangle((4, 239), 2, 2, color='grey', alpha=0.3))\n\n# Draw a rectangle at the center of the plot\nax.add_patch(plt.Rectangle((4, 243), 2, 2, color='grey', alpha=0.3))\n\n# Draw a rectangle at the center of the plot\nax.add_patch(plt.Rectangle((4, 247), 2, 2, color='grey', alpha=0.3))\n\n# Draw a rectangle at the center of the plot\nax.add_patch(plt.Rectangle((4, 251), 2, 2, color='grey', alpha=0.3))\n\n# Draw a rectangle at the center of the plot\nax.add_patch(plt.Rectangle((4, 255), 2, 2, color='grey', alpha=0.3))\n\n# Draw a rectangle at the center of the plot\nax.add_patch(plt.Rectangle((4, 259), 2, 2, color='grey', alpha=0.3))\n\n# Draw a rectangle at the center of the plot\nax.add_patch(plt.Rectangle((4, 263), 2, 2, color='grey', alpha=0.3))\n\n# Draw a rectangle at the center of the plot\nax.add_patch(plt.Rectangle((4, 267), 2, 2, color='grey', alpha=0.3))\n\n# Draw a rectangle at the center of the plot\nax.add_patch(plt.Rectangle((4, 271), 2, 2, color='grey', alpha=0.3))\n\n# Draw a rectangle at the center of the plot\nax.add_patch(plt.Rectangle((4, 275), 2, 2, color='grey', alpha=0.3))\n\n# Draw a rectangle at the center of the plot\nax.add_patch(plt.Rectangle((4, 279), 2, 2, color='grey', alpha=0.3))\n\n# Draw a rectangle at the center of the plot\nax.add_patch(plt.Rectangle((4, 283), 2, 2, color='grey', alpha=0.3))\n\n# Draw a rectangle at the center of the plot\nax.add_patch(plt.Rectangle((4, 287), 2, 2, color='grey', alpha=0.3))\n\n# Draw a rectangle at the center of the plot\nax.add_patch(plt.Rectangle((4, 291), 2, 2, color='grey', alpha=0.3))\n\n# Draw a rectangle at the center of the plot\nax.add_patch(plt.Rectangle((4, 295), 2, 2, color='grey', alpha=0.3))\n\n# Draw a rectangle at the center of the plot\nax.add_patch(plt.Rectangle((4, 299), 2, 2, color='grey', alpha=0.3))\n\n# Draw a rectangle at the center of the plot\nax.add_patch(plt.Rectangle((4, 303), 2, 2, color='grey', alpha=0.3))\n\n# Draw a rectangle at the center of the plot\nax.add_patch(plt.Rectangle((4, 307), 2, 2, color='grey', alpha=0.3))\n\n# Draw a rectangle at the center of the plot\nax.add_patch(plt.Rectangle((4, 311), 2, 2, color='grey', alpha=0.3))\n\n# Draw a rectangle at the center of the plot\nax.add_patch(plt.Rectangle((4, 315), 2, 2, color='grey', alpha=0.3))\n\n# Draw a rectangle at the center of the plot\nax.add_patch(plt.Rectangle((4, 319), 2, 2, color='grey', alpha=0.3))\n\n# Draw a rectangle at the center of the plot\nax.add_patch(plt.Rectangle((4, 323), 2, 2, color='grey', alpha=0.3))\n\n# Draw a rectangle at the center of the plot\nax.add_patch(plt.Rectangle((4, 327), 2, 2, color='grey', alpha=0.3))\n\n# Draw a rectangle at the center of the plot\nax.add_patch(plt.Rectangle((4, 331), 2, 2, color='grey', alpha=0.3))\n\n# Draw a rectangle at the center of the plot\nax.add_patch(plt.Rectangle((4, 335), 2, 2, color='grey', alpha=0.3))\n\n# Draw a rectangle at the center of the plot\nax.add_patch(plt.Rectangle((4, 339), 2, 2, color='grey', alpha=0.3))\n\n# Draw a rectangle at the center of the plot\nax.add_patch(plt.Rectangle((4, 343), 2, 2, color='grey', alpha=0.3))\n\n# Draw a rectangle at the center of the plot\nax.add_patch(plt.Rectangle((4, 347), 2, 2, color='grey', alpha=0.3))\n\n# Draw a rectangle at the center of the plot\nax.add_patch(plt.Rectangle((4, 351), 2, 2, color='grey', alpha=0.3))\n\n# Draw a rectangle at the center of the plot\nax.add_patch(plt.Rectangle((4, 355), 2, 2, color='grey', alpha=0.3))\n\n# Draw a rectangle at the center of the plot\nax.add_patch(plt.Rectangle((4, 359), 2, 2, color='grey', alpha=0.3))\n\n# Draw a rectangle at the center of the plot\nax.add_patch(plt.Rectangle((4, 363), 2, 2, color='grey', alpha=0.3))\n\n# Draw a rectangle at the center of the plot\nax.add_patch(plt.Rectangle((4, 367), 2, 2, color='grey', alpha=0.3))\n\n# Draw a rectangle at the center of the plot\nax.add_patch(plt.Rectangle((4, 371), 2, 2, color='grey', alpha=0.3))\n\n# Draw a rectangle at the center of the plot\nax.add_patch(plt.Rectangle((4, 375), 2, 2, color='grey', alpha=0.3))\n\n# Draw a rectangle at the center of the plot\nax.add_patch(plt.Rectangle((4, 379), 2, 2, color='grey', alpha=0.3))\n\n# Draw a rectangle at the center of the plot\nax.add_patch(plt.Rectangle((4, 383"}
{"file": "dataset/ori_500/errorpoint_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Female Face Presence (Fraction of videos)')\n\n# Set the x-axis label\nax.set_xlabel('Country')\n\n# Set the y-axis label\nax.set_ylabel('Fraction of videos')\n\n# Set the x-ticks\nax.set_xticks([0, 1, 2, 3, 4])\nax.set_xticklabels(['KASHMIR', 'COVID/LOCKDOWN', 'SPORTS', 'CHINA', 'PULWAMA-BALAKOT'])\n\n# Set the y-limits\nax.set_ylim(0.05, 0.25)\n\n# Draw a horizontal line at the mean value\nax.axhline(y=0.15, color='blue', linestyle='--')\n\n# Draw a horizontal line at the median value\nax.axhline(y=0.20, color='red', linestyle='--')\n\n# Draw a horizontal line at the dataset mean value\nax.axhline(y=0.25, color='grey', linestyle='-')\n\n# Draw a vertical line at the mean value\nax.axvline(x=2, color='blue', linestyle='--')\n\n# Draw a vertical line at the median value\nax.axvline(x=3, color='red', linestyle='--')\n\n# Draw a vertical line at the dataset mean value\nax.axvline(x=4, color='grey', linestyle='-')\n\n# Draw a rectangle with a blue border\nax.add_patch(plt.Rectangle((0.95, 0.25), 0.05, 0.05, fill=False, edgecolor='blue'))\n\n# Draw a rectangle with a red border\nax.add_patch(plt.Rectangle((1.95, 0.20), 0.05, 0.05, fill=False, edgecolor='red'))\n\n# Draw a rectangle with a grey border\nax.add_patch(plt.Rectangle((2.95, 0.15), 0.05, 0.05, fill=False, edgecolor='grey'))\n\n# Draw a rectangle with a blue border\nax.add_patch(plt.Rectangle((3.95, 0.10), 0.05, 0.05, fill=False, edgecolor='blue'))\n\n# Draw a rectangle with a red border\nax.add_patch(plt.Rectangle((4.95, 0.05), 0.05, 0.05, fill=False, edgecolor='red'))\n\n# Draw a rectangle with a grey border\nax.add_patch(plt.Rectangle((5.95, 0.00), 0.05, 0.05, fill=False, edgecolor='grey'))\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorpoint_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(9.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Errorbar upper and lower limits')\n\n# Define the x-axis values\nx = [1, 2, 3, 4, 5]\n\n# Define the y-axis values\ny = [1.5, 2.5, 3.5, 4.5, 5.5]\n\n# Define the error values\nyerr = [0.5, 0.5, 0.5, 0.5, 0.5]\n\n# Plot the data with error bars\nax.errorbar(x, y, yerr=yerr, fmt='o', ecolor='r', capsize=5)\n\n# Set the x-axis limits\nax.set_xlim(0, 6)\n\n# Set the y-axis limits\nax.set_ylim(0, 6)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorpoint_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 4))\n\n# Set the title of the plot\nax.set_title('variable, symmetric error')\n\n# Create a scatter plot\nax.scatter([0, 0.5, 1, 2, 3], [1, 2, 3, 4, 5], color='purple')\n\n# Set the x-axis label\nax.set_xlabel('x')\n\n# Set the y-axis label\nax.set_ylabel('y')\n\n# Create a second subplot\nax2 = fig.add_subplot(122)\n\n# Set the title of the second plot\nax2.set_title('variable, symmetric error')\n\n# Create a line plot\nax2.plot([0, 0.5, 1, 2, 3], [1, 2, 3, 4, 5], color='green')\n\n# Set the x-axis label\nax2.set_xlabel('x')\n\n# Set the y-axis label\nax2.set_ylabel('y')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorpoint_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 7))\n\n# Set the title of the plot\nax.set_title('variable, asymmetric error')\n\n# Set the x-axis label\nax.set_xlabel('x')\n\n# Set the y-axis label\nax.set_ylabel('y')\n\n# Set the x-axis limits\nax.set_xlim(0, 10)\n\n# Set the y-axis limits\nax.set_ylim(15, 35)\n\n# Set the x-axis ticks\nax.set_xticks([0, 2, 4, 6, 8, 10])\n\n# Set the y-axis ticks\nax.set_yticks([15, 20, 25, 30, 35])\n\n# Draw a horizontal line at y=25\nax.axhline(y=25, color='yellow', linestyle='-')\n\n# Draw a rectangle with a green border\nrectangle = plt.Rectangle((0, 0), 10, 35, linewidth=1, edgecolor='green', facecolor='none')\nax.add_patch(rectangle)\n\n# Draw a rectangle with a red border\nrectangle = plt.Rectangle((0, 0), 10, 35, linewidth=1, edgecolor='red', facecolor='none')\nax.add_patch(rectangle)\n\n# Draw a rectangle with a blue border\nrectangle = plt.Rectangle((0, 0), 10, 35, linewidth=1, edgecolor='blue', facecolor='none')\nax.add_patch(rectangle)\n\n# Draw a rectangle with a yellow border\nrectangle = plt.Rectangle((0, 0), 10, 35, linewidth=1, edgecolor='yellow', facecolor='none')\nax.add_patch(rectangle)\n\n# Draw a rectangle with a purple border\nrectangle = plt.Rectangle((0, 0), 10, 35, linewidth=1, edgecolor='purple', facecolor='none')\nax.add_patch(rectangle)\n\n# Draw a rectangle with a brown border\nrectangle = plt.Rectangle((0, 0), 10, 35, linewidth=1, edgecolor='brown', facecolor='none')\nax.add_patch(rectangle)\n\n# Draw a rectangle with a pink border\nrectangle = plt.Rectangle((0, 0), 10, 35, linewidth=1, edgecolor='pink', facecolor='none')\nax.add_patch(rectangle)\n\n# Draw a rectangle with a gray border\nrectangle = plt.Rectangle((0, 0), 10, 35, linewidth=1, edgecolor='gray', facecolor='none')\nax.add_patch(rectangle)\n\n# Draw a rectangle with a silver border\nrectangle = plt.Rectangle((0, 0), 10, 35, linewidth=1, edgecolor='silver', facecolor='none')\nax.add_patch(rectangle)\n\n# Draw a rectangle with a gold border\nrectangle = plt.Rectangle((0, 0), 10, 35, linewidth=1, edgecolor='gold', facecolor='none')\nax.add_patch(rectangle)\n\n# Draw a rectangle with a olive border\nrectangle = plt.Rectangle((0, 0), 10, 35, linewidth=1, edgecolor='olive', facecolor='none')\nax.add_patch(rectangle)\n\n# Draw a rectangle with a navy border\nrectangle = plt.Rectangle((0, 0), 10, 35, linewidth=1, edgecolor='navy', facecolor='none')\nax.add_patch(rectangle)\n\n# Draw a rectangle with a maroon border\nrectangle = plt.Rectangle((0, 0), 10, 35, linewidth=1, edgecolor='maroon', facecolor='none')\nax.add_patch(rectangle)\n\n# Draw a rectangle with a teal border\nrectangle = plt.Rectangle((0, 0), 10, 35, linewidth=1, edgecolor='teal', facecolor='none')\nax.add_patch(rectangle)\n\n# Draw a rectangle with a lime border\nrectangle = plt.Rectangle((0, 0), 10, 35, linewidth=1, edgecolor='lime', facecolor='none')\nax.add_patch(rectangle)\n\n# Draw a rectangle with a coral border\nrectangle = plt.Rectangle((0, 0), 10, 35, linewidth=1, edgecolor='coral', facecolor='none')\nax.add_patch(rectangle)\n\n# Draw a rectangle with a chartreuse border\nrectangle = plt.Rectangle((0, 0), 10, 35, linewidth=1, edgecolor='chartreuse', facecolor='none')\nax.add_patch(rectangle)\n\n# Draw a rectangle with a aqua border\nrectangle = plt.Rectangle((0, 0), 10, 35, linewidth=1, edgecolor='aqua', facecolor='none')\nax.add_patch(rectangle)\n\n# Draw a rectangle with a fuchsia border\nrectangle = plt.Rectangle((0, 0), 10, 35, linewidth=1, edgecolor='fuchsia', facecolor='none')\nax.add_patch(rectangle)\n\n# Draw a rectangle with a silver border\nrectangle = plt.Rectangle((0, 0), 10, 35, linewidth=1, edgecolor='silver', facecolor='none')\nax.add_patch(rectangle)\n\n# Draw a rectangle with a gold border\nrectangle = plt.Rectangle((0, 0), 10, 35, linewidth=1, edgecolor='gold', facecolor='none')\nax.add_patch(rectangle)\n\n# Draw a rectangle with a olive border\nrectangle = plt.Rectangle((0, 0), 10, 35, linewidth=1, edgecolor='olive', facecolor='none')\nax.add_patch(rectangle)\n\n# Draw a rectangle with a navy border\nrectangle = plt.Rectangle((0, 0), 10, 35, linewidth=1, edgecolor='navy', facecolor='none')\nax.add_patch(rectangle)\n\n# Draw a rectangle with a maroon border\nrectangle = plt.Rectangle((0, 0), 10, 35, linewidth=1, edgecolor='maroon', facecolor='none')\nax.add_patch(rectangle)\n\n# Draw a rectangle with a teal border\nrectangle = plt.Rectangle((0, 0), 10, 35, linewidth=1, edgecolor='teal', facecolor='none')\nax.add_patch(rectangle)\n\n# Draw a rectangle with a lime border\nrectangle = plt.Rectangle((0, 0), 10, 35, linewidth=1, edgecolor='lime', facecolor='none')\nax.add_patch(rectangle)\n\n# Draw a rectangle with a coral border\nrectangle = plt.Rectangle((0, 0), 10, 35, linewidth=1, edgecolor='coral', facecolor='none')\nax.add_patch(rectangle)\n\n# Draw a rectangle with a chartreuse border\nrectangle = plt.Rectangle((0, 0), 10, 35, linewidth=1, edgecolor='chartreuse', facecolor='none')\nax.add_patch(rectangle)\n\n# Draw a rectangle with a aqua border\nrectangle = plt.Rectangle((0, 0), 10, 35, linewidth=1, edgecolor='aqua', facecolor='none')\nax.add_patch(rectangle)\n\n# Draw a rectangle with a fuchsia border\nrectangle = plt.Rectangle((0, 0), 10, 35, linewidth=1, edgecolor='fuchsia', facecolor='none')\nax.add_patch(rectangle)\n\n# Draw a rectangle with a silver border\nrectangle = plt.Rectangle((0, 0), 10, 35, linewidth=1, edgecolor='silver', facecolor='none')\nax.add_patch(rectangle)\n\n# Draw a rectangle with a gold border\nrectangle = plt.Rectangle((0, 0), 10, 35, linewidth=1, edgecolor='gold', facecolor='none')\nax.add_patch(rectangle)\n\n# Draw a rectangle with a olive border\nrectangle = plt.Rectangle((0, 0), 10, 35, linewidth=1, edgecolor='olive', facecolor='none')\nax.add_patch(rectangle)\n\n# Draw a rectangle with a navy border\nrectangle = plt.Rectangle((0, 0), 10, 35, linewidth=1, edgecolor='navy', facecolor='none')\nax.add_patch(rectangle)\n\n# Draw a rectangle with a maroon border\nrectangle = plt.Rectangle((0, 0), 10, 35, linewidth=1, edgecolor='maroon', facecolor='none')\nax.add_patch(rectangle)\n\n# Draw a rectangle with a teal border\nrectangle = plt.Rectangle((0, 0), 10, 35, linewidth=1, edgecolor='teal', facecolor='none')\nax.add_patch(rectangle)\n\n# Draw a rectangle with a lime border\nrectangle = plt.Rectangle((0, 0), 10, 35, linewidth=1, edgecolor='lime', facecolor='none')\nax.add_patch(rectangle)\n\n# Draw a rectangle with a coral border\nrectangle = plt.Rectangle((0, 0), 10, 35, linewidth=1, edgecolor='coral', facecolor='none')\nax.add_patch(rectangle)\n\n# Draw a rectangle with a chartreuse border\nrectangle = plt.Rectangle((0, 0), 10, 35, linewidth=1, edgecolor='chartreuse', facecolor='none')\nax.add_patch(rectangle)\n\n# Draw a rectangle with a aqua border\nrectangle = plt.Rectangle((0, 0), 10, 35, linewidth=1, edgecolor='aqua', facecolor='none')\nax.add_patch(rectangle)\n\n# Draw a rectangle with a fuchsia border\nrectangle = plt.Rectangle((0, 0), 10, 35, linewidth=1, edgecolor='fuchsia', facecolor='none')\nax.add_patch(rectangle)\n\n# Draw a rectangle with a silver border\nrectangle = plt.Rectangle((0, 0), 10, 35, linewidth=1, edgecolor='silver', facecolor='none')\nax.add_patch(rectangle)\n\n# Draw a rectangle with a gold border\nrectangle = plt.Rectangle((0, 0), 10, 35, linewidth=1, edgecolor='gold', facecolor='none')\nax.add_patch(rectangle)\n\n# Draw a rectangle with a olive border\nrectangle = plt.Rectangle((0, 0), 10, 35, linewidth=1, edgecolor='olive', facecolor='none')\nax.add_patch(rectangle)\n\n# Draw a rectangle with a navy border\nrectangle = plt.Rectangle((0, 0), 10, 35, linewidth=1, edgecolor='navy', facecolor='none')\nax.add_patch(rectangle)\n\n# Draw a rectangle with a maroon border\nrectangle = plt.Rectangle((0, 0), 10, 35, linewidth=1, edgecolor='maroon', facecolor='none')\nax.add_patch(rectangle)\n\n# Draw a rectangle with a teal border\nrectangle = plt.Rectangle((0, 0), 10, 35, linewidth=1, edgecolor='teal', facecolor='none')\nax.add_patch(rectangle)\n\n# Draw a rectangle with a lime border\nrectangle = plt.Rectangle((0, 0), 10, 35, linewidth=1, edgecolor='lime', facecolor='none')\nax.add_patch(rectangle)\n\n# Draw a rectangle with a coral border\nrectangle = plt.Rectangle((0, 0), 10, 35, linewidth=1, edgecolor='coral', facecolor='none')\nax.add_patch(rectangle)\n\n# Draw a rectangle with a chartreuse border\nrectangle = plt.Rectangle((0, 0), 10, 35, linewidth=1, edgecolor='chartreuse', facecolor='none')\nax.add_patch(rectangle)\n\n# Draw a rectangle with a aqua border\nrectangle = plt.Rectangle((0, 0), 10, 35, linewidth=1, edgecolor='aqua', facecolor='none')\nax.add_patch(rectangle)\n\n# Draw a rectangle with a fuchsia border\nrectangle = plt.Rectangle((0, 0), 10, 35, linewidth=1, edgecolor='fuchsia', facecolor='none')\nax.add_patch(rectangle)\n\n# Draw a rectangle with a silver border\nrectangle = plt.Rectangle((0, 0), 10, 35, linewidth=1, edgecolor='silver', facecolor='none')\nax.add_patch(rectangle)\n\n# Draw a rectangle with a gold border\nrectangle = plt.Rectangle((0, 0), 10, 35, linewidth=1, edgecolor='gold', facecolor='none')\nax.add_patch(rectangle)\n\n# Draw a rectangle with a olive border\nrectangle = plt.Rectangle((0, 0), 10, 35, linewidth=1, edgecolor='olive', facecolor='none')\nax.add_patch(rectangle)\n\n# Draw a rectangle with a navy border\nrectangle = plt.Rectangle((0, 0), 10, 35, linewidth=1, edgecolor='navy', facecolor='none')\nax.add_patch(rectangle)\n\n# Draw a rectangle with a maroon border\nrectangle = plt.Rectangle((0, 0), 10, 35, linewidth=1, edgecolor='maroon', facecolor='none')\nax.add_patch(rectangle)\n\n# Draw a rectangle with a teal border\nrectangle = plt.Rectangle((0, 0), 10, 35, linewidth=1, edgecolor='teal', facecolor='none')\nax.add_patch(rectangle)\n\n# Draw a rectangle with a lime border\nrectangle = plt.Rectangle((0, 0), 10, 35, linewidth=1, edgecolor='lime', facecolor='none')\nax.add_patch(rectangle)\n\n# Draw a rectangle with a coral border\nrectangle = plt.Rectangle((0, 0), 10, 35, linewidth=1, edgecolor='coral', facecolor='none')\nax.add_patch(rectangle)\n\n# Draw a rectangle with a chartreuse border\nrectangle = plt.Rectangle((0, 0), 10, 35, linewidth=1, edgecolor='chartreuse', facecolor='none')\nax.add_patch(rectangle)\n\n# Draw a rectangle with a aqua border\nrectangle = plt.Rectangle((0, 0), 10, 35, linewidth=1, edgecolor='aqua', facecolor='none')\nax.add_patch(rectangle)\n\n# Draw a rectangle with a fuchsia border\nrectangle = plt.Rectangle((0, 0), 10, 35, linewidth=1, edgecolor='fuchsia', facecolor='none')\nax.add_patch(rectangle)\n\n# Draw a rectangle with a silver border\nrectangle = plt.Rectangle((0, 0), 10, 35, linewidth=1, edgecolor='silver', facecolor='none')\nax.add_patch(rectangle)\n\n# Draw a rectangle with a gold border\nrectangle = plt.Rectangle((0, 0), 10, 35, linewidth=1, edgecolor='gold', facecolor='none')\nax.add_patch(rectangle)\n\n# Draw a rectangle with a olive border\nrectangle = plt.Rectangle((0, 0), 10, 35, linewidth=1, edgecolor='olive', facecolor='none')\nax.add_patch(rectangle)\n\n# Draw a rectangle with a navy border\nrectangle = plt.Rectangle((0, 0), 10, 35, linewidth=1, edgecolor='navy', facecolor='none')\nax.add_patch(rectangle)\n\n# Draw a rectangle with a maroon border\nrectangle = plt.Rectangle((0, 0), 10, 35, linewidth=1, edgecolor='maroon', facecolor='none')\nax.add_patch(rectangle)\n\n# Draw a rectangle with a teal border\nrectangle = plt.Rectangle((0, 0), 10, 35, linewidth=1, edgecolor='teal', facecolor='none')\nax.add_patch(rectangle)\n\n# Draw a rectangle with a lime border\nrectangle = plt.Rectangle((0, 0), 10, 35, linewidth=1, edgecolor='lime', facecolor='none')\nax.add_patch(rectangle)\n\n# Draw a rectangle with a coral border\nrectangle = plt.Rectangle((0, 0), 10, 35, linewidth=1, edgecolor='coral', facecolor='none')\nax.add_patch(rectangle)\n\n# Draw a rectangle with a chartreuse border\nrectangle = plt.Rectangle((0, 0), 10, 35, linewidth=1, edgecolor='chartreuse', facecolor='none')\nax.add_patch(rectangle)\n\n# Draw a rectangle with a aqua border\nrectangle = plt.Rectangle((0, 0), 10, 35, linewidth=1, edgecolor='aqua', facecolor='none')\nax.add_patch(rectangle)\n\n# Draw a rectangle with a fuchsia border\nrectangle = plt.Rectangle((0, 0), 10, 35, linewidth=1, edgecolor='fuchsia', facecolor='none')\nax.add_patch(rectangle)\n\n# Draw a rectangle with a silver border\nrectangle = plt.Rectangle((0, 0), 10, 35, linewidth=1, edgecolor='silver', facecolor='none')\nax.add_patch(rectangle)\n\n# Draw a rectangle with a gold border\nrectangle = plt.Rectangle((0, 0), 10, 35, linewidth=1, edgecolor='gold', facecolor='none')\nax.add_patch(rectangle)\n\n# Draw a rectangle with a olive border\nrectangle = plt.Rectangle((0, 0), 10, 35, linewidth=1, edgecolor='olive', facecolor='none')\nax.add_patch(rectangle)\n\n# Draw a rectangle with a navy border\nrectangle = plt.Rectangle((0, 0), 10, 35, linewidth=1, edgecolor='navy', facecolor='none')\nax.add_patch(rectangle)\n\n# Draw a rectangle with a maroon border\nrectangle = plt.Rectangle((0, 0), 10, 35, linewidth=1, edgecolor='maroon', facecolor='none')\nax.add_patch(rectangle)\n\n# Draw a rectangle with a teal border\nrectangle = plt.Rectangle((0, 0), 10, 35, linewidth=1, edgecolor='teal', facecolor='none')\nax.add_patch(rectangle)\n\n# Draw a rectangle with a lime border\nrectangle = plt.Rectangle((0, 0), 10, 35, linewidth=1, edgecolor='lime', facecolor='none')\nax.add_patch(rectangle)\n\n# Draw a rectangle with a coral border\nrectangle = plt.Rectangle((0,"}
{"file": "dataset/ori_500/errorpoint_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 7))\n\n# Set the title of the plot\nax.set_title('variable, asymmetric error')\n\n# Define the x-axis values\nx_values = [0, 5, 10, 15, 20]\n\n# Define the y-axis values\ny_values = [-2.1, -2.6, -2.9, -1.2, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -"}
{"file": "dataset/ori_500/graph_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Define the coordinates of the vertices of the hexagon\nvertices = np.array([[0, 0], [1, 0], [1.5, 1], [0.5, 1.5], [-0.5, 1.5], [-1, 1], [-1, 0]])\n\n# Plot the hexagon\nax.plot(vertices[:, 0], vertices[:, 1], 'k-')\n\n# Define the coordinates of the circles\ncircles = np.array([[0.5, 0.5], [1.5, 0.5], [1.5, 1.5], [0.5, 1.5], [-0.5, 1.5], [-1.5, 0.5], [-1.5, -0.5], [-0.5, -0.5], [0.5, -0.5], [1.5, -0.5]])\n\n# Plot the circles\nfor circle in circles:\n    ax.add_artist(plt.Circle(circle, 0.2, color='blue'))\n\n# Set the aspect ratio to be equal so that the circle is not distorted\nax.set_aspect('equal')\n\n# Set the limits of the plot\nax.set_xlim(-2, 2)\nax.set_ylim(-2, 2)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/graph_2.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Define the coordinates of the points\nx = np.linspace(-1, 1, 10)\ny = np.linspace(-1, 1, 10)\n\n# Plot the points\nax.plot(x, y, 'o', color='pink')\n\n# Draw lines between points\nfor i in range(len(x)):\n    for j in range(i+1, len(y)):\n        ax.plot([x[i], x[j]], [y[i], y[j]], color='gray')\n\n# Set the aspect ratio to be equal\nax.set_aspect('equal')\n\n# Set the limits of the plot\nax.set_xlim(-1.5, 1.5)\nax.set_ylim(-1.5, 1.5)\n\n# Remove the axes\nax.axis('off')\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/graph_3.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Define the data for the circle\ntheta = np.linspace(0, 2*np.pi, 12)\nr = np.arange(12)\nx = r * np.cos(theta)\ny = r * np.sin(theta)\n\n# Plot the circle\nax.plot(x, y, 'k-')\n\n# Add circles at each point\nfor i in range(12):\n    circle = plt.Circle((x[i], y[i]), 0.5, color='yellow')\n    ax.add_artist(circle)\n    ax.text(x[i], y[i], str(i), ha='center', va='center')\n\n# Set the aspect ratio to be equal so that the circle is not distorted\nax.set_aspect('equal')\n\n# Remove the axes\nax.axis('off')\n\nplt.show()"}
{"file": "dataset/ori_500/graph_4.pdf", "response": "```\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Define the coordinates for the vertices of the rectangle\nx = [0, 4, 4, 0, 0]\ny = [0, 0, 2, 2, 0]\n\n# Plot the rectangle\nax.plot(x, y, 'k-')\n\n# Define the coordinates for the circle\ncircle_x = [2]\ncircle_y = [1]\n\n# Plot the circle\nax.plot(circle_x, circle_y, 'bo', markersize=10)\n\n# Set the limits of the plot\nax.set_xlim(-1, 5)\nax.set_ylim(-1, 3)\n\n# Set the aspect ratio of the plot\nax.set_aspect('equal')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/graph_5.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\nax.plot([0, 1], [0, 1], 'k-')\nax.plot([0, 1], [1, 0], 'k-')\nax.plot([0, 1], [0, 0], 'k-')\nax.plot([1, 1], [0, 1], 'k-')\nax.plot([1, 1], [1, 0], 'k-')\nax.plot([0, 0], [0, 1], 'k-')\nax.plot([0, 0], [1, 0], 'k-')\nax.plot([0, 1], [0, 0], 'k-')\nax.plot([0, 1], [1, 1], 'k-')\nax.plot([1, 0], [0, 1], 'k-')\nax.plot([1, 0], [1, 0], 'k-')\nax.plot([0, 1], [0, 1], 'k-')\nax.plot([0, 1], [1, 0], 'k-')\nax.plot([0, 0], [0, 1], 'k-')\nax.plot([0, 0], [1, 0], 'k-')\nax.plot([0, 1], [0, 0], 'k-')\nax.plot([0, 1], [1, 1], 'k-')\nax.plot([1, 0], [0, 1], 'k-')\nax.plot([1, 0], [1, 0], 'k-')\nax.plot([0, 1], [0, 1], 'k-')\nax.plot([0, 1], [1, 0], 'k-')\nax.plot([0, 0], [0, 1], 'k-')\nax.plot([0, 0], [1, 0], 'k-')\nax.plot([0, 1], [0, 0], 'k-')\nax.plot([0, 1], [1, 1], 'k-')\nax.plot([1, 0], [0, 1], 'k-')\nax.plot([1, 0], [1, 0], 'k-')\nax.plot([0, 1], [0, 1], 'k-')\nax.plot([0, 1], [1, 0], 'k-')\nax.plot([0, 0], [0, 1], 'k-')\nax.plot([0, 0], [1, 0], 'k-')\nax.plot([0, 1], [0, 0], 'k-')\nax.plot([0, 1], [1, 1], 'k-')\nax.plot([1, 0], [0, 1], 'k-')\nax.plot([1, 0], [1, 0], 'k-')\nax.plot([0, 1], [0, 1], 'k-')\nax.plot([0, 1], [1, 0], 'k-')\nax.plot([0, 0], [0, 1], 'k-')\nax.plot([0, 0], [1, 0], 'k-')\nax.plot([0, 1], [0, 0], 'k-')\nax.plot([0, 1], [1, 1], 'k-')\nax.plot([1, 0], [0, 1], 'k-')\nax.plot([1, 0], [1, 0], 'k-')\nax.plot([0, 1], [0, 1], 'k-')\nax.plot([0, 1], [1, 0], 'k-')\nax.plot([0, 0], [0, 1], 'k-')\nax.plot([0, 0], [1, 0], 'k-')\nax.plot([0, 1], [0, 0], 'k-')\nax.plot([0, 1], [1, 1], 'k-')\nax.plot([1, 0], [0, 1], 'k-')\nax.plot([1, 0], [1, 0], 'k-')\nax.plot([0, 1], [0, 1], 'k-')\nax.plot([0, 1], [1, 0], 'k-')\nax.plot([0, 0], [0, 1], 'k-')\nax.plot([0, 0], [1, 0], 'k-')\nax.plot([0, 1], [0, 0], 'k-')\nax.plot([0, 1], [1, 1], 'k-')\nax.plot([1, 0], [0, 1], 'k-')\nax.plot([1, 0], [1, 0], 'k-')\nax.plot([0, 1], [0, 1], 'k-')\nax.plot([0, 1], [1, 0], 'k-')\nax.plot([0, 0], [0, 1], 'k-')\nax.plot([0, 0], [1, 0], 'k-')\nax.plot([0, 1], [0, 0], 'k-')\nax.plot([0, 1], [1, 1], 'k-')\nax.plot([1, 0], [0, 1], 'k-')\nax.plot([1, 0], [1, 0], 'k-')\nax.plot([0, 1], [0, 1], 'k-')\nax.plot([0, 1], [1, 0], 'k-')\nax.plot([0, 0], [0, 1], 'k-')\nax.plot([0, 0], [1, 0], 'k-')\nax.plot([0, 1], [0, 0], 'k-')\nax.plot([0, 1], [1, 1], 'k-')\nax.plot([1, 0], [0, 1], 'k-')\nax.plot([1, 0], [1, 0], 'k-')\nax.plot([0, 1], [0, 1], 'k-')\nax.plot([0, 1], [1, 0], 'k-')\nax.plot([0, 0], [0, 1], 'k-')\nax.plot([0, 0], [1, 0], 'k-')\nax.plot([0, 1], [0, 0], 'k-')\nax.plot([0, 1], [1, 1], 'k-')\nax.plot([1, 0], [0, 1], 'k-')\nax.plot([1, 0], [1, 0], 'k-')\nax.plot([0, 1], [0, 1], 'k-')\nax.plot([0, 1], [1, 0], 'k-')\nax.plot([0, 0], [0, 1], 'k-')\nax.plot([0, 0], [1, 0], 'k-')\nax.plot([0, 1], [0, 0], 'k-')\nax.plot([0, 1], [1, 1], 'k-')\nax.plot([1, 0], [0, 1], 'k-')\nax.plot([1, 0], [1, 0], 'k-')\nax.plot([0, 1], [0, 1], 'k-')\nax.plot([0, 1], [1, 0], 'k-')\nax.plot([0, 0], [0, 1], 'k-')\nax.plot([0, 0], [1, 0], 'k-')\nax.plot([0, 1], [0, 0], 'k-')\nax.plot([0, 1], [1, 1], 'k-')\nax.plot([1, 0], [0, 1], 'k-')\nax.plot([1, 0], [1, 0], 'k-')\nax.plot([0, 1], [0, 1], 'k-')\nax.plot([0, 1], [1, 0], 'k-')\nax.plot([0, 0], [0, 1], 'k-')\nax.plot([0, 0], [1, 0], 'k-')\nax.plot([0, 1], [0, 0], 'k-')\nax.plot([0, 1], [1, 1], 'k-')\nax.plot([1, 0], [0, 1], 'k-')\nax.plot([1, 0], [1, 0], 'k-')\nax.plot([0, 1], [0, 1], 'k-')\nax.plot([0, 1], [1, 0], 'k-')\nax.plot([0, 0], [0, 1], 'k-')\nax.plot([0, 0], [1, 0], 'k-')\nax.plot([0, 1], [0, 0], 'k-')\nax.plot([0, 1], [1, 1], 'k-')\nax.plot([1, 0], [0, 1], 'k-')\nax.plot([1, 0], [1, 0], 'k-')\nax.plot([0, 1], [0, 1], 'k-')\nax.plot([0, 1], [1, 0], 'k-')\nax.plot([0, 0], [0, 1], 'k-')\nax.plot([0, 0], [1, 0], 'k-')\nax.plot([0, 1], [0, 0], 'k-')\nax.plot([0, 1], [1, 1], 'k-')\nax.plot([1, 0], [0, 1], 'k-')\nax.plot([1, 0], [1, 0], 'k-')\nax.plot([0, 1], [0, 1], 'k-')\nax.plot([0, 1], [1, 0], 'k-')\nax.plot([0, 0], [0, 1], 'k-')\nax.plot([0, 0], [1, 0], 'k-')\nax.plot([0, 1], [0, 0], 'k-')\nax.plot([0, 1], [1, 1], 'k-')\nax.plot([1, 0], [0, 1], 'k-')\nax.plot([1, 0], [1, 0], 'k-')\nax.plot([0, 1], [0, 1], 'k-')\nax.plot([0, 1], [1, 0], 'k-')\nax.plot([0, 0], [0, 1], 'k-')\nax.plot([0, 0], [1, 0], 'k-')\nax.plot([0, 1], [0, 0], 'k-')\nax.plot([0, 1], [1, 1], 'k-')\nax.plot([1, 0], [0, 1], 'k-')\nax.plot([1, 0], [1, 0], 'k-')\nax.plot([0, 1], [0, 1], 'k-')\nax.plot([0, 1], [1, 0], 'k-')\nax.plot([0, 0], [0, 1], 'k-')\nax.plot([0, 0], [1, 0], 'k-')\nax.plot([0, 1], [0, 0], 'k-')\nax.plot([0, 1], [1, 1], 'k-')\nax.plot([1, 0], [0, 1], 'k-')\nax.plot([1, 0], [1, 0], 'k-')\nax.plot([0, 1], [0, 1], 'k-')\nax.plot([0, 1], [1, 0], 'k-')\nax.plot([0, 0], [0, 1], 'k-')\nax.plot([0, 0], [1, 0], 'k-')\nax.plot([0, 1], [0, 0], 'k-')\nax.plot([0, 1], [1, 1], 'k-')\nax.plot([1, 0], [0, 1], 'k-')\nax.plot([1, 0], [1, 0], 'k-')\nax.plot([0, 1], [0, 1], 'k-')\nax.plot([0, 1], [1, 0], 'k-')\nax.plot([0, 0], [0, 1], 'k-')\nax.plot([0, 0], [1, 0], 'k-')\nax.plot([0, 1], [0, 0], 'k-')\nax.plot([0, 1], [1, 1], 'k-')\nax.plot([1, 0], [0, 1], 'k-')\nax.plot([1, 0], [1, 0], 'k-')\nax.plot([0, 1], [0, 1], 'k-')\nax.plot([0, 1], [1, 0], 'k-')\nax.plot([0, 0], [0, 1], 'k-')\nax.plot([0, 0], [1, 0], 'k-')\nax.plot([0, 1], [0, 0], 'k-')\nax.plot([0, 1], [1, 1], 'k-')\nax.plot([1, 0], [0, 1], 'k-')\nax.plot([1, 0], [1, 0], 'k-')\nax.plot([0, 1], [0, 1], 'k-')\nax.plot([0, 1], [1, 0], 'k-')\nax.plot([0, 0], [0, 1], 'k-')\nax.plot([0, 0], [1, 0], 'k-')\nax.plot([0, 1], [0, 0], 'k-')\nax.plot([0, 1], [1, 1], 'k-')\nax.plot([1, 0], [0, 1], 'k-')\nax.plot([1, 0], [1, 0], 'k-')\nax.plot([0, 1], [0, 1], 'k-')\nax.plot([0, 1], [1, 0], 'k-')\nax.plot([0, 0], [0, 1], 'k-')\nax.plot([0, 0], [1, 0], 'k-')\nax.plot([0, 1], [0, 0], 'k-')\nax.plot([0, 1], [1, 1], 'k-')\nax.plot([1, 0], [0, 1], 'k-')\nax.plot([1, 0], [1, 0], 'k-')\nax.plot([0, 1], [0, 1], 'k-')\nax.plot([0, 1], [1, 0], 'k-')\nax.plot([0, 0], [0, 1], 'k-')\nax.plot([0, 0], [1, 0], 'k-')\nax.plot([0, 1], [0, 0], 'k-')\nax.plot([0, 1], [1, 1], 'k-')\nax.plot([1, 0], [0, 1], 'k-')\nax.plot([1, 0], [1, 0], 'k-')\nax.plot([0, 1], [0, 1], 'k-')\nax.plot([0, 1], [1, 0], 'k-')\nax.plot([0, 0], [0, 1], 'k-')\nax.plot([0, 0], [1, 0], 'k-')\nax.plot([0, 1], [0, 0], 'k-')\nax.plot([0, 1], [1, 1], 'k-')\nax.plot([1, 0], [0, 1], 'k-')\nax.plot([1, 0], [1, 0], 'k-')\nax.plot([0, 1], [0, 1], 'k-')\nax.plot([0, 1], [1, 0], 'k-')\nax.plot([0, 0], [0, 1], 'k-')\nax.plot([0, 0], [1, 0], 'k-')\nax.plot([0, 1], [0, 0], 'k-')\nax.plot([0, 1], [1, 1], 'k-')\nax.plot([1, 0], [0, 1], 'k-')\nax.plot([1, 0], [1, 0], 'k-')\nax.plot([0, 1], [0, 1], 'k-')\nax.plot([0, 1], [1, 0], 'k-')\nax.plot([0, 0], [0, 1], 'k-')\nax.plot([0, 0], [1, 0], 'k-')\nax.plot([0, 1], [0, 0], 'k-')\nax.plot([0, 1], [1, 1], 'k-')\nax.plot([1, 0], [0, 1], 'k-')\nax.plot([1, 0], [1, 0], 'k-')\nax.plot([0, 1], [0, 1], 'k-')\nax.plot([0, 1], [1, 0], 'k-')\nax.plot([0, 0], [0, 1], 'k-')\nax.plot([0, 0], [1, 0], 'k-')\nax.plot([0, 1], [0, 0], 'k-')\nax.plot([0, 1], [1, 1], 'k-')\nax.plot([1, 0], [0, 1], 'k-"}
{"file": "dataset/ori_500/heatmap_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Set the title of the plot\nax.set_title('CoreNLP')\n\n# Create a rectangle for the first column\nrect1 = plt.Rectangle((0.1, 0.7), 0.2, 0.3, color='lightblue')\nax.add_patch(rect1)\n\n# Create a rectangle for the second column\nrect2 = plt.Rectangle((0.4, 0.7), 0.2, 0.3, color='orange')\nax.add_patch(rect2)\n\n# Create a rectangle for the third column\nrect3 = plt.Rectangle((0.7, 0.7), 0.2, 0.3, color='pink')\nax.add_patch(rect3)\n\n# Create a rectangle for the fourth column\nrect4 = plt.Rectangle((0.1, 0.4), 0.2, 0.3, color='lightgreen')\nax.add_patch(rect4)\n\n# Create a rectangle for the fifth column\nrect5 = plt.Rectangle((0.4, 0.4), 0.2, 0.3, color='lightcoral')\nax.add_patch(rect5)\n\n# Create a rectangle for the sixth column\nrect6 = plt.Rectangle((0.7, 0.4), 0.2, 0.3, color='lightsalmon')\nax.add_patch(rect6)\n\n# Create a rectangle for the seventh column\nrect7 = plt.Rectangle((0.1, 0.1), 0.2, 0.3, color='lightyellow')\nax.add_patch(rect7)\n\n# Create a rectangle for the eighth column\nrect8 = plt.Rectangle((0.4, 0.1), 0.2, 0.3, color='lightgrey')\nax.add_patch(rect8)\n\n# Create a rectangle for the ninth column\nrect9 = plt.Rectangle((0.7, 0.1), 0.2, 0.3, color='lightpink')\nax.add_patch(rect9)\n\n# Set the x-axis limits\nax.set_xlim(0, 1)\n\n# Set the y-axis limits\nax.set_ylim(0, 1)\n\n# Set the x-axis ticks\nax.set_xticks([])\n\n# Set the y-axis ticks\nax.set_yticks([])\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 8))\n\n# Define the data for the pie chart\ndata = [50.8, 28.1, 2.6, 0.5, 4.1, 8.1, 9.2, 10.5, 14.5, 12.3, 0.9, 6.2, 7.8, 15.5, 17.3, 13.9, 16.3, 11.2, 14.3, 10.9, 15.7, 28.6, 13.4, 12.0, 0.6, 7.0, 10.9, 14.3, 13.4, 16.3]\n\n# Create a color map\ncmap = plt.get_cmap('coolwarm')\n\n# Create a color bar\nsm = plt.cm.ScalarMappable(cmap=cmap, norm=plt.Normalize(vmin=0, vmax=100))\nsm._A = []\ncbar = fig.colorbar(sm)\n\n# Draw the pie chart\nax.pie(data, colors=cmap(np.linspace(0, 1, len(data))))\n\n# Set the title of the pie chart\nax.set_title('Pie Chart')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Players')\n\n# Set the x-axis label\nax.set_xlabel('Players')\n\n# Set the y-axis label\nax.set_ylabel('Player Rating')\n\n# Set the color map for the bars\ncmap = plt.cm.get_cmap('coolwarm')\n\n# Set the data for the bars\nbars = ['D. Fox', 'T. Haliburton', 'M. Harkless', 'H. Barnes', 'C. Metu']\nratings = [0.2, 0.4, 0.6, 0.8, 1.0]\n\n# Create the bar chart\nfor i, bar in enumerate(bars):\n    ax.bar(bar, ratings[i], color=cmap(ratings[i]))\n\n# Set the color bar\nsm = plt.cm.ScalarMappable(cmap=cmap, norm=plt.Normalize(vmin=min(ratings), vmax=max(ratings)))\nsm._A = []\ncbar = fig.colorbar(sm)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6, 5))\n\n# Set the background color of the plot\nax.set_facecolor('white')\n\n# Set the title of the plot\nax.set_title('Live vs Predicted Category Similarity', fontsize=14)\n\n# Set the x-axis label\nax.set_xlabel('Predicted Category', fontsize=12)\n\n# Set the y-axis label\nax.set_ylabel('Live Category', fontsize=12)\n\n# Set the x-axis limits\nax.set_xlim(0, 50)\n\n# Set the y-axis limits\nax.set_ylim(0, 50)\n\n# Set the x-axis ticks\nax.set_xticks(np.arange(0, 51, 10))\n\n# Set the y-axis ticks\nax.set_yticks(np.arange(0, 51, 10))\n\n# Set the x-axis tick labels\nax.set_xticklabels(['0', '10', '20', '30', '40', '50'])\n\n# Set the y-axis tick labels\nax.set_yticklabels(['0', '10', '20', '30', '40', '50'])\n\n# Set the x-axis grid lines\nax.grid(axis='x', linestyle='--', linewidth=0.5)\n\n# Set the y-axis grid lines\nax.grid(axis='y', linestyle='--', linewidth=0.5)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', labelsize=10)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', labelsize=10)\n\n# Set the x-axis label parameters\nax.xaxis.label.set_color('black')\n\n# Set the y-axis label parameters\nax.yaxis.label.set_color('black')\n\n# Set the x-axis title parameters\nax.title.set_color('black')\n\n# Set the y-axis title parameters\nax.title.set_color('black')\n\n# Set the x-axis grid line parameters\nax.xaxis.grid(True, color='gray', linestyle='--', linewidth=0.5)\n\n# Set the y-axis grid line parameters\nax.yaxis.grid(True, color='gray', linestyle='--', linewidth=0.5)\n\n# Set the x-axis tick label parameters\nax.set_xticklabels(['0', '10', '20', '30', '40', '50'], color='black')\n\n# Set the y-axis tick label parameters\nax.set_yticklabels(['0', '10', '20', '30', '40', '50'], color='black')\n\n# Set the x-axis title parameters\nax.set_title('Live vs Predicted Category Similarity', color='black')\n\n# Set the y-axis title parameters\nax.set_title('Live vs Predicted Category Similarity', color='black')\n\n# Set the x-axis grid line parameters\nax.xaxis.grid(True, color='gray', linestyle='--', linewidth=0.5)\n\n# Set the y-axis grid line parameters\nax.yaxis.grid(True, color='gray', linestyle='--', linewidth=0.5)\n\n# Set the x-axis tick label parameters\nax.set_xticklabels(['0', '10', '20', '30', '40', '50'], color='black')\n\n# Set the y-axis tick label parameters\nax.set_yticklabels(['0', '10', '20', '30', '40', '50'], color='black')\n\n# Set the x-axis title parameters\nax.set_title('Live vs Predicted Category Similarity', color='black')\n\n# Set the y-axis title parameters\nax.set_title('Live vs Predicted Category Similarity', color='black')\n\n# Set the x-axis grid line parameters\nax.xaxis.grid(True, color='gray', linestyle='--', linewidth=0.5)\n\n# Set the y-axis grid line parameters\nax.yaxis.grid(True, color='gray', linestyle='--', linewidth=0.5)\n\n# Set the x-axis tick label parameters\nax.set_xticklabels(['0', '10', '20', '30', '40', '50'], color='black')\n\n# Set the y-axis tick label parameters\nax.set_yticklabels(['0', '10', '20', '30', '40', '50'], color='black')\n\n# Set the x-axis title parameters\nax.set_title('Live vs Predicted Category Similarity', color='black')\n\n# Set the y-axis title parameters\nax.set_title('Live vs Predicted Category Similarity', color='black')\n\n# Set the x-axis grid line parameters\nax.xaxis.grid(True, color='gray', linestyle='--', linewidth=0.5)\n\n# Set the y-axis grid line parameters\nax.yaxis.grid(True, color='gray', linestyle='--', linewidth=0.5)\n\n# Set the x-axis tick label parameters\nax.set_xticklabels(['0', '10', '20', '30', '40', '50'], color='black')\n\n# Set the y-axis tick label parameters\nax.set_yticklabels(['0', '10', '20', '30', '40', '50'], color='black')\n\n# Set the x-axis title parameters\nax.set_title('Live vs Predicted Category Similarity', color='black')\n\n# Set the y-axis title parameters\nax.set_title('Live vs Predicted Category Similarity', color='black')\n\n# Set the x-axis grid line parameters\nax.xaxis.grid(True, color='gray', linestyle='--', linewidth=0.5)\n\n# Set the y-axis grid line parameters\nax.yaxis.grid(True, color='gray', linestyle='--', linewidth=0.5)\n\n# Set the x-axis tick label parameters\nax.set_xticklabels(['0', '10', '20', '30', '40', '50'], color='black')\n\n# Set the y-axis tick label parameters\nax.set_yticklabels(['0', '10', '20', '30', '40', '50'], color='black')\n\n# Set the x-axis title parameters\nax.set_title('Live vs Predicted Category Similarity', color='black')\n\n# Set the y-axis title parameters\nax.set_title('Live vs Predicted Category Similarity', color='black')\n\n# Set the x-axis grid line parameters\nax.xaxis.grid(True, color='gray', linestyle='--', linewidth=0.5)\n\n# Set the y-axis grid line parameters\nax.yaxis.grid(True, color='gray', linestyle='--', linewidth=0.5)\n\n# Set the x-axis tick label parameters\nax.set_xticklabels(['0', '10', '20', '30', '40', '50'], color='black')\n\n# Set the y-axis tick label parameters\nax.set_yticklabels(['0', '10', '20', '30', '40', '50'], color='black')\n\n# Set the x-axis title parameters\nax.set_title('Live vs Predicted Category Similarity', color='black')\n\n# Set the y-axis title parameters\nax.set_title('Live vs Predicted Category Similarity', color='black')\n\n# Set the x-axis grid line parameters\nax.xaxis.grid(True, color='gray', linestyle='--', linewidth=0.5)\n\n# Set the y-axis grid line parameters\nax.yaxis.grid(True, color='gray', linestyle='--', linewidth=0.5)\n\n# Set the x-axis tick label parameters\nax.set_xticklabels(['0', '10', '20', '30', '40', '50'], color='black')\n\n# Set the y-axis tick label parameters\nax.set_yticklabels(['0', '10', '20', '30', '40', '50'], color='black')\n\n# Set the x-axis title parameters\nax.set_title('Live vs Predicted Category Similarity', color='black')\n\n# Set the y-axis title parameters\nax.set_title('Live vs Predicted Category Similarity', color='black')\n\n# Set the x-axis grid line parameters\nax.xaxis.grid(True, color='gray', linestyle='--', linewidth=0.5)\n\n# Set the y-axis grid line parameters\nax.yaxis.grid(True, color='gray', linestyle='--', linewidth=0.5)\n\n# Set the x-axis tick label parameters\nax.set_xticklabels(['0', '10', '20', '30', '40', '50'], color='black')\n\n# Set the y-axis tick label parameters\nax.set_yticklabels(['0', '10', '20', '30', '40', '50'], color='black')\n\n# Set the x-axis title parameters\nax.set_title('Live vs Predicted Category Similarity', color='black')\n\n# Set the y-axis title parameters\nax.set_title('Live vs Predicted Category Similarity', color='black')\n\n# Set the x-axis grid line parameters\nax.xaxis.grid(True, color='gray', linestyle='--', linewidth=0.5)\n\n# Set the y-axis grid line parameters\nax.yaxis.grid(True, color='gray', linestyle='--', linewidth=0.5)\n\n# Set the x-axis tick label parameters\nax.set_xticklabels(['0', '10', '20', '30', '40', '50'], color='black')\n\n# Set the y-axis tick label parameters\nax.set_yticklabels(['0', '10', '20', '30', '40', '50'], color='black')\n\n# Set the x-axis title parameters\nax.set_title('Live vs Predicted Category Similarity', color='black')\n\n# Set the y-axis title parameters\nax.set_title('Live vs Predicted Category Similarity', color='black')\n\n# Set the x-axis grid line parameters\nax.xaxis.grid(True, color='gray', linestyle='--', linewidth=0.5)\n\n# Set the y-axis grid line parameters\nax.yaxis.grid(True, color='gray', linestyle='--', linewidth=0.5)\n\n# Set the x-axis tick label parameters\nax.set_xticklabels(['0', '10', '20', '30', '40', '50'], color='black')\n\n# Set the y-axis tick label parameters\nax.set_yticklabels(['0', '10', '20', '30', '40', '50'], color='black')\n\n# Set the x-axis title parameters\nax.set_title('Live vs Predicted Category Similarity', color='black')\n\n# Set the y-axis title parameters\nax.set_title('Live vs Predicted Category Similarity', color='black')\n\n# Set the x-axis grid line parameters\nax.xaxis.grid(True, color='gray', linestyle='--', linewidth=0.5)\n\n# Set the y-axis grid line parameters\nax.yaxis.grid(True, color='gray', linestyle='--', linewidth=0.5)\n\n# Set the x-axis tick label parameters\nax.set_xticklabels(['0', '10', '20', '30', '40', '50'], color='black')\n\n# Set the y-axis tick label parameters\nax.set_yticklabels(['0', '10', '20', '30', '40', '50'], color='black')\n\n# Set the x-axis title parameters\nax.set_title('Live vs Predicted Category Similarity', color='black')\n\n# Set the y-axis title parameters\nax.set_title('Live vs Predicted Category Similarity', color='black')\n\n# Set the x-axis grid line parameters\nax.xaxis.grid(True, color='gray', linestyle='--', linewidth=0.5)\n\n# Set the y-axis grid line parameters\nax.yaxis.grid(True, color='gray', linestyle='--', linewidth=0.5)\n\n# Set the x-axis tick label parameters\nax.set_xticklabels(['0', '10', '20', '30', '40', '50'], color='black')\n\n# Set the y-axis tick label parameters\nax.set_yticklabels(['0', '10', '20', '30', '40', '50'], color='black')\n\n# Set the x-axis title parameters\nax.set_title('Live vs Predicted Category Similarity', color='black')\n\n# Set the y-axis title parameters\nax.set_title('Live vs Predicted Category Similarity', color='black')\n\n# Set the x-axis grid line parameters\nax.xaxis.grid(True, color='gray', linestyle='--', linewidth=0.5)\n\n# Set the y-axis grid line parameters\nax.yaxis.grid(True, color='gray', linestyle='--', linewidth=0.5)\n\n# Set the x-axis tick label parameters\nax.set_xticklabels(['0', '10', '20', '30', '40', '50'], color='black')\n\n# Set the y-axis tick label parameters\nax.set_yticklabels(['0', '10', '20', '30', '40', '50'], color='black')\n\n# Set the x-axis title parameters\nax.set_title('Live vs Predicted Category Similarity', color='black')\n\n# Set the y-axis title parameters\nax.set_title('Live vs Predicted Category Similarity', color='black')\n\n# Set the x-axis grid line parameters\nax.xaxis.grid(True, color='gray', linestyle='--', linewidth=0.5)\n\n# Set the y-axis grid line parameters\nax.yaxis.grid(True, color='gray', linestyle='--', linewidth=0.5)\n\n# Set the x-axis tick label parameters\nax.set_xticklabels(['0', '10', '20', '30', '40', '50'], color='black')\n\n# Set the y-axis tick label parameters\nax.set_yticklabels(['0', '10', '20', '30', '40', '50'], color='black')\n\n# Set the x-axis title parameters\nax.set_title('Live vs Predicted Category Similarity', color='black')\n\n# Set the y-axis title parameters\nax.set_title('Live vs Predicted Category Similarity', color='black')\n\n# Set the x-axis grid line parameters\nax.xaxis.grid(True, color='gray', linestyle='--', linewidth=0.5)\n\n# Set the y-axis grid line parameters\nax.yaxis.grid(True, color='gray', linestyle='--', linewidth=0.5)\n\n# Set the x-axis tick label parameters\nax.set_xticklabels(['0', '10', '20', '30', '40', '50'], color='black')\n\n# Set the y-axis tick label parameters\nax.set_yticklabels(['0', '10', '20', '30', '40', '50'], color='black')\n\n# Set the x-axis title parameters\nax.set_title('Live vs Predicted Category Similarity', color='black')\n\n# Set the y-axis title parameters\nax.set_title('Live vs Predicted Category Similarity', color='black')\n\n# Set the x-axis grid line parameters\nax.xaxis.grid(True, color='gray', linestyle='--', linewidth=0.5)\n\n# Set the y-axis grid line parameters\nax.yaxis.grid(True, color='gray', linestyle='--', linewidth=0.5)\n\n# Set the x-axis tick label parameters\nax.set_xticklabels(['0', '10', '20', '30', '40', '50'], color='black')\n\n# Set the y-axis tick label parameters\nax.set_yticklabels(['0', '10', '20', '30', '40', '50'], color='black')\n\n# Set the x-axis title parameters\nax.set_title('Live vs Predicted Category Similarity', color='black')\n\n# Set the y-axis title parameters\nax.set_title('Live vs Predicted Category Similarity', color='black')\n\n# Set the x-axis grid line parameters\nax.xaxis.grid(True, color='gray', linestyle='--', linewidth=0.5)\n\n# Set the y-axis grid line parameters\nax.yaxis.grid(True, color='gray', linestyle='--', linewidth=0.5)\n\n# Set the x-axis tick label parameters\nax.set_xticklabels(['0', '10', '20', '30', '40', '50'], color='black')\n\n# Set the y-axis tick label parameters\nax.set_yticklabels(['0', '10', '20', '30', '40', '50'], color='black')\n\n# Set the x-axis title parameters\nax.set_title('Live vs Predicted Category Similarity', color='black')\n\n# Set the y-axis title parameters\nax.set_title('Live vs Predicted Category Similarity', color='black')\n\n# Set the x-axis grid line parameters\nax.xaxis.grid(True, color='gray', linestyle='--', linewidth=0.5)\n\n# Set the y-axis grid line parameters\nax.yaxis.grid(True, color='gray', linestyle='--', linewidth=0.5)\n\n# Set the x-axis tick label parameters\nax.set_xticklabels(['0', '10', '20', '30', '40', '50'], color='black')\n\n# Set the y-axis tick label parameters\nax.set_yticklabels(['0', '10', '20', '30', '40', '50'], color='black')\n\n# Set the x-axis title parameters\nax.set_title('Live vs Predicted Category Similarity', color='black')\n\n# Set the y-axis title parameters\nax.set_title('Live vs Predicted Category Similarity', color='black')\n\n# Set the x-axis grid line parameters\nax.xaxis.grid(True, color='gray', linestyle='--', linewidth=0.5)\n\n# Set the y-axis grid line parameters\nax.yaxis.grid(True, color='gray', linestyle='--', linewidth=0.5)\n\n# Set the x-axis tick label parameters\nax.set_xticklabels(['0', '10', '20', '30', '40', '50'], color='black')\n\n# Set the y-axis tick label parameters\nax.set_yticklabels(['0', '10', '20', '30', '40', '50'], color='black')\n\n# Set the x-axis title parameters\nax.set_title('Live vs Predicted Category Similarity', color='black')\n\n# Set the y-axis title parameters\nax.set_title('Live vs Predicted Category Similarity', color='black')\n\n# Set the x-axis grid line parameters\nax.xaxis.grid(True, color='gray', linestyle='--', linewidth=0.5)\n\n# Set the y-axis grid line parameters\nax.yaxis.grid(True, color='gray', linestyle='--', linewidth=0.5)\n\n# Set the x-axis tick label parameters\nax.set_xticklabels(['0', '10', '20', '30', '40', '50'], color='black')\n\n# Set the y-axis tick label parameters\nax.set_yticklabels(['0', '10', '20"}
{"file": "dataset/ori_500/heatmap_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Set the title of the plot\nax.set_title('LOMLOP')\n\n# Create a rectangle for the main rectangle\nmain_rect = plt.Rectangle((0.1, 0.1), 0.8, 0.8, color='gray')\nax.add_patch(main_rect)\n\n# Create a rectangle for the left column\nleft_col = plt.Rectangle((0.1, 0.25), 0.2, 0.5, color='green')\nax.add_patch(left_col)\n\n# Create a rectangle for the right column\nright_col = plt.Rectangle((0.35, 0.25), 0.3, 0.5, color='brown')\nax.add_patch(right_col)\n\n# Create a rectangle for the top row\ntop_row = plt.Rectangle((0.45, 0.7), 0.15, 0.1, color='red')\nax.add_patch(top_row)\n\n# Create a rectangle for the bottom row\nbottom_row = plt.Rectangle((0.45, 0.4), 0.15, 0.1, color='orange')\nax.add_patch(bottom_row)\n\n# Create a rectangle for the middle row\nmiddle_row = plt.Rectangle((0.45, 0.5), 0.15, 0.1, color='yellow')\nax.add_patch(middle_row)\n\n# Set the limits of the plot\nax.set_xlim(0, 1)\nax.set_ylim(0, 1)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 10.0))\n\n# Set the background color of the plot\nax.set_facecolor('lightblue')\n\n# Set the title of the plot\nax.set_title('Sector Performance', fontsize=20)\n\n# Set the x-axis label\nax.set_xlabel('Sectors', fontsize=15)\n\n# Set the y-axis label\nax.set_ylabel('Performance', fontsize=15)\n\n# Set the x-axis tick labels\nx_labels = ['LLVA', 'BakLiva', 'GeminiProVision', 'GPT4V', 'CODI']\nax.set_xticks(np.arange(len(x_labels)))\nax.set_xticklabels(x_labels, rotation=45, ha='right')\n\n# Set the y-axis limits\nax.set_ylim(-1, 1)\n\n# Set the y-axis ticks\ny_ticks = [-1, -0.75, -0.5, -0.25, 0, 0.25, 0.5, 0.75, 1]\nax.set_yticks(y_ticks)\n\n# Set the y-axis tick labels\ny_tick_labels = ['LLVA', 'BakLiva', 'GeminiProVision', 'GPT4V', 'CODI']\nax.set_yticklabels(y_tick_labels)\n\n# Set the color of the y-axis tick labels\nax.yaxis.label.set_color('red')\n\n# Set the color of the x-axis tick labels\nax.xaxis.label.set_color('blue')\n\n# Set the color of the y-axis tick labels\nax.yaxis.label.set_color('green')\n\n# Set the color of the x-axis tick labels\nax.xaxis.label.set_color('purple')\n\n# Set the color of the y-axis tick labels\nax.yaxis.label.set_color('orange')\n\n# Set the color of the x-axis tick labels\nax.xaxis.label.set_color('pink')\n\n# Set the color of the y-axis tick labels\nax.yaxis.label.set_color('brown')\n\n# Set the color of the x-axis tick labels\nax.xaxis.label.set_color('cyan')\n\n# Set the color of the y-axis tick labels\nax.yaxis.label.set_color('magenta')\n\n# Set the color of the x-axis tick labels\nax.xaxis.label.set_color('yellow')\n\n# Set the color of the y-axis tick labels\nax.yaxis.label.set_color('black')\n\n# Set the color of the x-axis tick labels\nax.xaxis.label.set_color('white')\n\n# Set the color of the y-axis tick labels\nax.yaxis.label.set_color('gray')\n\n# Set the color of the x-axis tick labels\nax.xaxis.label.set_color('silver')\n\n# Set the color of the y-axis tick labels\nax.yaxis.label.set_color('gold')\n\n# Set the color of the x-axis tick labels\nax.xaxis.label.set_color('brown')\n\n# Set the color of the y-axis tick labels\nax.yaxis.label.set_color('tan')\n\n# Set the color of the x-axis tick labels\nax.xaxis.label.set_color('navy')\n\n# Set the color of the y-axis tick labels\nax.yaxis.label.set_color('olive')\n\n# Set the color of the x-axis tick labels\nax.xaxis.label.set_color('lime')\n\n# Set the color of the y-axis tick labels\nax.yaxis.label.set_color('maroon')\n\n# Set the color of the x-axis tick labels\nax.xaxis.label.set_color('aqua')\n\n# Set the color of the y-axis tick labels\nax.yaxis.label.set_color('fuchsia')\n\n# Set the color of the x-axis tick labels\nax.xaxis.label.set_color('silver')\n\n# Set the color of the y-axis tick labels\nax.yaxis.label.set_color('gold')\n\n# Set the color of the x-axis tick labels\nax.xaxis.label.set_color('brown')\n\n# Set the color of the y-axis tick labels\nax.yaxis.label.set_color('tan')\n\n# Set the color of the x-axis tick labels\nax.xaxis.label.set_color('navy')\n\n# Set the color of the y-axis tick labels\nax.yaxis.label.set_color('olive')\n\n# Set the color of the x-axis tick labels\nax.xaxis.label.set_color('lime')\n\n# Set the color of the y-axis tick labels\nax.yaxis.label.set_color('maroon')\n\n# Set the color of the x-axis tick labels\nax.xaxis.label.set_color('aqua')\n\n# Set the color of the y-axis tick labels\nax.yaxis.label.set_color('fuchsia')\n\n# Set the color of the x-axis tick labels\nax.xaxis.label.set_color('silver')\n\n# Set the color of the y-axis tick labels\nax.yaxis.label.set_color('gold')\n\n# Set the color of the x-axis tick labels\nax.xaxis.label.set_color('brown')\n\n# Set the color of the y-axis tick labels\nax.yaxis.label.set_color('tan')\n\n# Set the color of the x-axis tick labels\nax.xaxis.label.set_color('navy')\n\n# Set the color of the y-axis tick labels\nax.yaxis.label.set_color('olive')\n\n# Set the color of the x-axis tick labels\nax.xaxis.label.set_color('lime')\n\n# Set the color of the y-axis tick labels\nax.yaxis.label.set_color('maroon')\n\n# Set the color of the x-axis tick labels\nax.xaxis.label.set_color('aqua')\n\n# Set the color of the y-axis tick labels\nax.yaxis.label.set_color('fuchsia')\n\n# Set the color of the x-axis tick labels\nax.xaxis.label.set_color('silver')\n\n# Set the color of the y-axis tick labels\nax.yaxis.label.set_color('gold')\n\n# Set the color of the x-axis tick labels\nax.xaxis.label.set_color('brown')\n\n# Set the color of the y-axis tick labels\nax.yaxis.label.set_color('tan')\n\n# Set the color of the x-axis tick labels\nax.xaxis.label.set_color('navy')\n\n# Set the color of the y-axis tick labels\nax.yaxis.label.set_color('olive')\n\n# Set the color of the x-axis tick labels\nax.xaxis.label.set_color('lime')\n\n# Set the color of the y-axis tick labels\nax.yaxis.label.set_color('maroon')\n\n# Set the color of the x-axis tick labels\nax.xaxis.label.set_color('aqua')\n\n# Set the color of the y-axis tick labels\nax.yaxis.label.set_color('fuchsia')\n\n# Set the color of the x-axis tick labels\nax.xaxis.label.set_color('silver')\n\n# Set the color of the y-axis tick labels\nax.yaxis.label.set_color('gold')\n\n# Set the color of the x-axis tick labels\nax.xaxis.label.set_color('brown')\n\n# Set the color of the y-axis tick labels\nax.yaxis.label.set_color('tan')\n\n# Set the color of the x-axis tick labels\nax.xaxis.label.set_color('navy')\n\n# Set the color of the y-axis tick labels\nax.yaxis.label.set_color('olive')\n\n# Set the color of the x-axis tick labels\nax.xaxis.label.set_color('lime')\n\n# Set the color of the y-axis tick labels\nax.yaxis.label.set_color('maroon')\n\n# Set the color of the x-axis tick labels\nax.xaxis.label.set_color('aqua')\n\n# Set the color of the y-axis tick labels\nax.yaxis.label.set_color('fuchsia')\n\n# Set the color of the x-axis tick labels\nax.xaxis.label.set_color('silver')\n\n# Set the color of the y-axis tick labels\nax.yaxis.label.set_color('gold')\n\n# Set the color of the x-axis tick labels\nax.xaxis.label.set_color('brown')\n\n# Set the color of the y-axis tick labels\nax.yaxis.label.set_color('tan')\n\n# Set the color of the x-axis tick labels\nax.xaxis.label.set_color('navy')\n\n# Set the color of the y-axis tick labels\nax.yaxis.label.set_color('olive')\n\n# Set the color of the x-axis tick labels\nax.xaxis.label.set_color('lime')\n\n# Set the color of the y-axis tick labels\nax.yaxis.label.set_color('maroon')\n\n# Set the color of the x-axis tick labels\nax.xaxis.label.set_color('aqua')\n\n# Set the color of the y-axis tick labels\nax.yaxis.label.set_color('fuchsia')\n\n# Set the color of the x-axis tick labels\nax.xaxis.label.set_color('silver')\n\n# Set the color of the y-axis tick labels\nax.yaxis.label.set_color('gold')\n\n# Set the color of the x-axis tick labels\nax.xaxis.label.set_color('brown')\n\n# Set the color of the y-axis tick labels\nax.yaxis.label.set_color('tan')\n\n# Set the color of the x-axis tick labels\nax.xaxis.label.set_color('navy')\n\n# Set the color of the y-axis tick labels\nax.yaxis.label.set_color('olive')\n\n# Set the color of the x-axis tick labels\nax.xaxis.label.set_color('lime')\n\n# Set the color of the y-axis tick labels\nax.yaxis.label.set_color('maroon')\n\n# Set the color of the x-axis tick labels\nax.xaxis.label.set_color('aqua')\n\n# Set the color of the y-axis tick labels\nax.yaxis.label.set_color('fuchsia')\n\n# Set the color of the x-axis tick labels\nax.xaxis.label.set_color('silver')\n\n# Set the color of the y-axis tick labels\nax.yaxis.label.set_color('gold')\n\n# Set the color of the x-axis tick labels\nax.xaxis.label.set_color('brown')\n\n# Set the color of the y-axis tick labels\nax.yaxis.label.set_color('tan')\n\n# Set the color of the x-axis tick labels\nax.xaxis.label.set_color('navy')\n\n# Set the color of the y-axis tick labels\nax.yaxis.label.set_color('olive')\n\n# Set the color of the x-axis tick labels\nax.xaxis.label.set_color('lime')\n\n# Set the color of the y-axis tick labels\nax.yaxis.label.set_color('maroon')\n\n# Set the color of the x-axis tick labels\nax.xaxis.label.set_color('aqua')\n\n# Set the color of the y-axis tick labels\nax.yaxis.label.set_color('fuchsia')\n\n# Set the color of the x-axis tick labels\nax.xaxis.label.set_color('silver')\n\n# Set the color of the y-axis tick labels\nax.yaxis.label.set_color('gold')\n\n# Set the color of the x-axis tick labels\nax.xaxis.label.set_color('brown')\n\n# Set the color of the y-axis tick labels\nax.yaxis.label.set_color('tan')\n\n# Set the color of the x-axis tick labels\nax.xaxis.label.set_color('navy')\n\n# Set the color of the y-axis tick labels\nax.yaxis.label.set_color('olive')\n\n# Set the color of the x-axis tick labels\nax.xaxis.label.set_color('lime')\n\n# Set the color of the y-axis tick labels\nax.yaxis.label.set_color('maroon')\n\n# Set the color of the x-axis tick labels\nax.xaxis.label.set_color('aqua')\n\n# Set the color of the y-axis tick labels\nax.yaxis.label.set_color('fuchsia')\n\n# Set the color of the x-axis tick labels\nax.xaxis.label.set_color('silver')\n\n# Set the color of the y-axis tick labels\nax.yaxis.label.set_color('gold')\n\n# Set the color of the x-axis tick labels\nax.xaxis.label.set_color('brown')\n\n# Set the color of the y-axis tick labels\nax.yaxis.label.set_color('tan')\n\n# Set the color of the x-axis tick labels\nax.xaxis.label.set_color('navy')\n\n# Set the color of the y-axis tick labels\nax.yaxis.label.set_color('olive')\n\n# Set the color of the x-axis tick labels\nax.xaxis.label.set_color('lime')\n\n# Set the color of the y-axis tick labels\nax.yaxis.label.set_color('maroon')\n\n# Set the color of the x-axis tick labels\nax.xaxis.label.set_color('aqua')\n\n# Set the color of the y-axis tick labels\nax.yaxis.label.set_color('fuchsia')\n\n# Set the color of the x-axis tick labels\nax.xaxis.label.set_color('silver')\n\n# Set the color of the y-axis tick labels\nax.yaxis.label.set_color('gold')\n\n# Set the color of the x-axis tick labels\nax.xaxis.label.set_color('brown')\n\n# Set the color of the y-axis tick labels\nax.yaxis.label.set_color('tan')\n\n# Set the color of the x-axis tick labels\nax.xaxis.label.set_color('navy')\n\n# Set the color of the y-axis tick labels\nax.yaxis.label.set_color('olive')\n\n# Set the color of the x-axis tick labels\nax.xaxis.label.set_color('lime')\n\n# Set the color of the y-axis tick labels\nax.yaxis.label.set_color('maroon')\n\n# Set the color of the x-axis tick labels\nax.xaxis.label.set_color('aqua')\n\n# Set the color of the y-axis tick labels\nax.yaxis.label.set_color('fuchsia')\n\n# Set the color of the x-axis tick labels\nax.xaxis.label.set_color('silver')\n\n# Set the color of the y-axis tick labels\nax.yaxis.label.set_color('gold')\n\n# Set the color of the x-axis tick labels\nax.xaxis.label.set_color('brown')\n\n# Set the color of the y-axis tick labels\nax.yaxis.label.set_color('tan')\n\n# Set the color of the x-axis tick labels\nax.xaxis.label.set_color('navy')\n\n# Set the color of the y-axis tick labels\nax.yaxis.label.set_color('olive')\n\n# Set the color of the x-axis tick labels\nax.xaxis.label.set_color('lime')\n\n# Set the color of the y-axis tick labels\nax.yaxis.label.set_color('maroon')\n\n# Set the color of the x-axis tick labels\nax.xaxis.label.set_color('aqua')\n\n# Set the color of the y-axis tick labels\nax.yaxis.label.set_color('fuchsia')\n\n# Set the color of the x-axis tick labels\nax.xaxis.label.set_color('silver')\n\n# Set the color of the y-axis tick labels\nax.yaxis.label.set_color('gold')\n\n# Set the color of the x-axis tick labels\nax.xaxis.label.set_color('brown')\n\n# Set the color of the y-axis tick labels\nax.yaxis.label.set_color('tan')\n\n# Set the color of the x-axis tick labels\nax.xaxis.label.set_color('navy')\n\n# Set the color of the y-axis tick labels\nax.yaxis.label.set_color('olive')\n\n# Set the color of the x-axis tick labels\nax.xaxis.label.set_color('lime')\n\n# Set the color of the y-axis tick labels\nax.yaxis.label.set_color('maroon')\n\n# Set the color of the x-axis tick labels\nax.xaxis.label.set_color('aqua')\n\n# Set the color of the y-axis tick labels\nax.yaxis.label.set_color('fuchsia')\n\n# Set the color of the x-axis tick labels\nax.xaxis.label.set_color('silver')\n\n# Set the color of the y-axis tick labels\nax.yaxis.label.set_color('gold')\n\n# Set the color of the x-axis tick labels\nax.xaxis.label.set_color('brown')\n\n# Set the color of the y-axis tick labels\nax.yaxis.label.set_color('tan')\n\n# Set the color of the x-axis tick labels\nax.xaxis.label.set_color('navy')\n\n# Set the color of the y-axis tick labels\nax.yaxis.label.set_color('olive')\n\n# Set the color of the x-axis tick labels\nax.xaxis.label.set_color('lime')\n\n# Set the color of the y-axis tick labels\nax.yaxis.label.set_color('maroon')\n\n# Set the color of the x-axis tick labels\nax.xaxis.label.set_color('aqua')\n\n# Set the color of the y-axis tick labels\nax.yaxis.label.set_color('fuchsia')\n\n# Set the color of the x-axis tick labels\nax.xaxis.label.set_color('silver')\n\n# Set the color of the y-axis tick labels\nax.yaxis.label.set_color('gold')\n\n# Set the color of the x-axis tick labels\nax.xaxis.label.set_color('brown')\n\n# Set the color of the y-axis tick labels\nax.yaxis.label.set_color('tan')\n\n# Set the color of the x-axis tick labels\nax.xaxis.label.set_color('navy')\n\n# Set the color of the y-axis tick labels\nax.yaxis.label.set_color('olive')\n\n# Set the color of the x-axis tick labels\nax.xaxis.label.set_color('lime')\n\n# Set the color of the y-axis tick labels\nax.yaxis.label.set_color('maroon')\n\n# Set the color of the x-axis tick labels\nax.xaxis.label.set_color('aqua')\n\n# Set the color of the y-axis tick labels\nax.yaxis.label.set_color('fuchsia')\n\n# Set the color of the x-axis tick labels\nax.xaxis.label.set_color('silver')\n\n# Set the color of the y-axis tick labels\nax.yaxis.label.set_color('gold')\n\n# Set the color of the x-axis tick labels\nax.xaxis.label.set_color('brown')\n\n# Set the color of the y-axis tick labels\nax.yaxis.label.set_color('tan')\n\n# Set the color of the x-axis tick labels\nax.xaxis.label.set_color('navy')\n\n# Set the color of the y-axis tick labels\nax.yaxis.label.set_color('olive')\n\n# Set the color of the x-axis tick labels\nax.xaxis.label.set_color('lime')\n\n# Set the color of the y-axis tick labels\nax.yaxis.label.set_color('maroon')\n\n# Set the color of the x-axis tick labels\nax.xaxis.label.set_color('aqua')\n\n# Set the color of the y-axis tick labels\nax.yaxis.label.set_color('fuchsia')\n\n# Set the color of the x-axis tick labels\nax.xaxis.label.set_color('silver')\n\n# Set the color of the y-axis tick labels\nax.yaxis.label.set_color('gold')\n\n# Set the color of the x-axis tick labels\nax.xaxis.label.set_color('brown')\n\n# Set the color of the y-axis tick labels\nax.yaxis.label.set_color('tan')\n\n# Set the color of the x-axis tick labels\nax.xaxis.label.set_color('navy')\n\n# Set the color of the y-axis tick labels\nax.yaxis.label.set_color('olive')\n\n# Set the color of the x-axis tick labels\nax.xaxis.label.set_color('lime')\n\n# Set the color of the y-axis tick labels\nax.yaxis.label.set_color('maroon')\n\n# Set the color of the x-axis tick labels\nax.xaxis.label.set_color('aqua')\n\n# Set the color of the y-axis tick labels\nax.yaxis.label.set_color('fuchsia')\n\n# Set the color of the x-axis tick labels\nax.xaxis.label.set_color('silver')\n\n# Set the color of the y-axis tick labels\nax.yaxis.label.set_color('gold')\n\n# Set the color of the x-axis tick labels\nax.xaxis.label.set_color('brown')\n\n# Set the color of the y-axis tick labels\nax.yaxis.label.set_color('tan')\n\n# Set the color of the x-axis tick labels\nax.xaxis.label.set_color('navy')\n\n# Set the color of the y-axis tick labels\nax.yaxis.label.set_color('olive')\n\n# Set the color of the x-axis tick labels\nax.xaxis.label.set_color('lime')\n\n# Set the"}
{"file": "dataset/ori_500/heatmap_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 8.0))\n\n# Set the background color of the plot\nax.set_facecolor('purple')\n\n# Set the title of the plot\nax.set_title('Perplexity vs. Temperature', color='white')\n\n# Set the x-axis label\nax.set_xlabel('Temperature', color='white')\n\n# Set the y-axis label\nax.set_ylabel('Perplexity', color='white')\n\n# Set the tick labels for the x-axis\nax.set_xticks([1, 3, 5, 7, 9, 11])\nax.set_xticklabels(['1', '3', '5', '7', '9', '11'], color='white')\n\n# Set the tick labels for the y-axis\nax.set_yticks([1, 3, 5, 7, 9, 11])\nax.set_yticklabels(['1', '3', '5', '7', '9', '11'], color='white')\n\n# Set the limits for the x-axis\nax.set_xlim(0, 12)\n\n# Set the limits for the y-axis\nax.set_ylim(0, 12)\n\n# Set the grid lines\nax.grid(True, color='white')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the spines\nax.spines['top'].set_color('white')\nax.spines['right'].set_color('white')\nax.spines['bottom'].set_color('white')\nax.spines['left'].set_color('white')\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0, 0), 1, 1, color='black')\nax.add_patch(rect)\n\n# Add a text box to the plot\ntext_box = ax.text(0.5, 0.5, 'mbert\u2192sat Perplexity=7.59', ha='center', va='center', color='white', fontsize=12)\ntext_box.set_bbox(dict(facecolor='none', edgecolor='white'))\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_16.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the heatmap\ndata = [\n    [659, 777, 247, 153, 953],\n    [807, 187, 643, 373, 819],\n    [109, 172, 759, 665, 327],\n    [459, 274, 797, 660, 405],\n    [784, 637, 523, 435, 856],\n    [935, 945, 739, 688, 498],\n    [729, 651, 850, 717, 665],\n    [863, 700, 644, 650, 760],\n    [292, 949, 365, 473, 711]\n]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(4.0, 8.0))\n\n# Create a heatmap\ncax = ax.matshow(data, cmap='YlOrRd')\n\n# Set the tick labels\nax.set_xticks(range(len(data[0])))\nax.set_yticks(range(len(data)))\nax.set_xticklabels(['Product A Q1', 'Product A Q2', 'Product A Q3', 'Product B Q1', 'Product B Q2', 'Product B Q3'])\nax.set_yticklabels(['1', '2', '3', '4', '5', '6', '7', '8', '9'])\n\n# Add colorbar\nfig.colorbar(cax)\n\n# Set title\nax.set_title('Sales Performance Heatmap')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_17.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 3))\n\n# Set the background color of the plot\nax.set_facecolor('white')\n\n# Create a color bar\ncbar = fig.colorbar(plt.cm.ScalarMappable(cmap='coolwarm'), ax=ax, orientation='vertical')\ncbar.set_label('Values')\n\n# Set the title of the plot\nax.set_title('Colorful Rectangles')\n\n# Set the x-axis label\nax.set_xlabel('Time')\n\n# Set the y-axis label\nax.set_ylabel('Context')\n\n# Set the x-axis ticks\nax.set_xticks([0, 5, 10, 15, 20, 25, 30])\n\n# Set the x-axis tick labels\nax.set_xticklabels(['0', '5', '10', '15', '20', '25', '30'])\n\n# Set the y-axis ticks\nax.set_yticks([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\n\n# Set the y-axis tick labels\nax.set_yticklabels(['context', 'option', 'cot', 'last'])\n\n# Draw rectangles\nfor i in range(10):\n    for j in range(10):\n        ax.add_patch(plt.Rectangle((i * 5, j), 5, 1, color=plt.cm.coolwarm(i / 10)))\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_18.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfig, ax = plt.subplots(figsize=(7.0, 6.0))\n\n# Define the data for the plots\ndata1 = [0.55, 0.72, 0.60, 0.54]\ndata2 = [0.42, 0.65, 0.44, 0.89]\ndata3 = [0.96, 0.38, 0.79, 0.53]\ndata4 = [0.57, 0.93, 0.07, 0.09]\ndata5 = [0.46, 0.57, 0.22, 0.62]\ndata6 = [0.61, 0.62, 0.70, 0.06]\ndata7 = [0.36, 0.44, 0.70, 0.06]\ndata8 = [0.67, 0.67, 0.21, 0.13]\ndata9 = [0.46, 0.57, 0.22, 0.62]\ndata10 = [0.61, 0.62, 0.70, 0.06]\ndata11 = [0.36, 0.44, 0.70, 0.06]\ndata12 = [0.67, 0.67, 0.21, 0.13]\n\n# Create the plots\nax.plot(data1, color='brown')\nax.plot(data2, color='orange')\nax.plot(data3, color='brown')\nax.plot(data4, color='orange')\nax.plot(data5, color='brown')\nax.plot(data6, color='orange')\nax.plot(data7, color='brown')\nax.plot(data8, color='orange')\nax.plot(data9, color='brown')\nax.plot(data10, color='orange')\nax.plot(data11, color='brown')\nax.plot(data12, color='orange')\n\n# Set the title and labels\nax.set_title('Weather')\nax.set_xlabel('Time')\nax.set_ylabel('Temperature')\n\n# Set the x-axis limits\nax.set_xlim(96, 720)\n\n# Set the y-axis limits\nax.set_ylim(0, 1)\n\n# Set the y-axis ticks\nax.set_yticks([0.05, 0.1, 0.15, 0.2, 0.25, 0.3, 0.35, 0.4, 0.45, 0.5, 0.55, 0.6, 0.65, 0.7, 0.75, 0.8, 0.85, 0.9, 0.95])\n\n# Set the y-axis tick labels\nax.set_yticklabels(['0.05', '0.1', '0.15', '0.2', '0.25', '0.3', '0.35', '0.4', '0.45', '0.5', '0.55', '0.6', '0.65', '0.7', '0.75', '0.8', '0.85', '0.9', '0.95'])\n\n# Set the x-axis ticks\nax.set_xticks([96, 192, 288, 384, 480, 576, 672, 768])\n\n# Set the x-axis tick labels\nax.set_xticklabels(['96', '192', '288', '384', '480', '576', '672', '768'])\n\n# Set the y-axis grid\nax.grid(axis='y')\n\n# Set the x-axis grid\nax.grid(axis='x')\n\n# Set the y-axis label rotation\nax.yaxis.set_label_position(\"right\")\nax.yaxis.tick_right()\n\n# Set the y-axis label color\nax.yaxis.label.set_color('orange')\n\n# Set the y-axis label font size\nax.yaxis.label.set_fontsize(12)\n\n# Set the y-axis label font weight\nax.yaxis.label.set_fontweight('bold')\n\n# Set the y-axis label font style\nax.yaxis.label.set_fontstyle('italic')\n\n# Set the y-axis label font family\nax.yaxis.label.set_fontfamily('serif')\n\n# Set the y-axis label font variant\nax.yaxis.label.set_fontvariant('small-caps')\n\n# Set the y-axis label font stretch\nax.yaxis.label.set_fontstretch('ultra-condensed')\n\n# Set the y-axis label font size\nax.yaxis.label.set_fontsize(12)\n\n# Set the y-axis label font weight\nax.yaxis.label.set_fontweight('bold')\n\n# Set the y-axis label font style\nax.yaxis.label.set_fontstyle('italic')\n\n# Set the y-axis label font family\nax.yaxis.label.set_fontfamily('serif')\n\n# Set the y-axis label font variant\nax.yaxis.label.set_fontvariant('small-caps')\n\n# Set the y-axis label font stretch\nax.yaxis.label.set_fontstretch('ultra-condensed')\n\n# Set the y-axis label font size\nax.yaxis.label.set_fontsize(12)\n\n# Set the y-axis label font weight\nax.yaxis.label.set_fontweight('bold')\n\n# Set the y-axis label font style\nax.yaxis.label.set_fontstyle('italic')\n\n# Set the y-axis label font family\nax.yaxis.label.set_fontfamily('serif')\n\n# Set the y-axis label font variant\nax.yaxis.label.set_fontvariant('small-caps')\n\n# Set the y-axis label font stretch\nax.yaxis.label.set_fontstretch('ultra-condensed')\n\n# Set the y-axis label font size\nax.yaxis.label.set_fontsize(12)\n\n# Set the y-axis label font weight\nax.yaxis.label.set_fontweight('bold')\n\n# Set the y-axis label font style\nax.yaxis.label.set_fontstyle('italic')\n\n# Set the y-axis label font family\nax.yaxis.label.set_fontfamily('serif')\n\n# Set the y-axis label font variant\nax.yaxis.label.set_fontvariant('small-caps')\n\n# Set the y-axis label font stretch\nax.yaxis.label.set_fontstretch('ultra-condensed')\n\n# Set the y-axis label font size\nax.yaxis.label.set_fontsize(12)\n\n# Set the y-axis label font weight\nax.yaxis.label.set_fontweight('bold')\n\n# Set the y-axis label font style\nax.yaxis.label.set_fontstyle('italic')\n\n# Set the y-axis label font family\nax.yaxis.label.set_fontfamily('serif')\n\n# Set the y-axis label font variant\nax.yaxis.label.set_fontvariant('small-caps')\n\n# Set the y-axis label font stretch\nax.yaxis.label.set_fontstretch('ultra-condensed')\n\n# Set the y-axis label font size\nax.yaxis.label.set_fontsize(12)\n\n# Set the y-axis label font weight\nax.yaxis.label.set_fontweight('bold')\n\n# Set the y-axis label font style\nax.yaxis.label.set_fontstyle('italic')\n\n# Set the y-axis label font family\nax.yaxis.label.set_fontfamily('serif')\n\n# Set the y-axis label font variant\nax.yaxis.label.set_fontvariant('small-caps')\n\n# Set the y-axis label font stretch\nax.yaxis.label.set_fontstretch('ultra-condensed')\n\n# Set the y-axis label font size\nax.yaxis.label.set_fontsize(12)\n\n# Set the y-axis label font weight\nax.yaxis.label.set_fontweight('bold')\n\n# Set the y-axis label font style\nax.yaxis.label.set_fontstyle('italic')\n\n# Set the y-axis label font family\nax.yaxis.label.set_fontfamily('serif')\n\n# Set the y-axis label font variant\nax.yaxis.label.set_fontvariant('small-caps')\n\n# Set the y-axis label font stretch\nax.yaxis.label.set_fontstretch('ultra-condensed')\n\n# Set the y-axis label font size\nax.yaxis.label.set_fontsize(12)\n\n# Set the y-axis label font weight\nax.yaxis.label.set_fontweight('bold')\n\n# Set the y-axis label font style\nax.yaxis.label.set_fontstyle('italic')\n\n# Set the y-axis label font family\nax.yaxis.label.set_fontfamily('serif')\n\n# Set the y-axis label font variant\nax.yaxis.label.set_fontvariant('small-caps')\n\n# Set the y-axis label font stretch\nax.yaxis.label.set_fontstretch('ultra-condensed')\n\n# Set the y-axis label font size\nax.yaxis.label.set_fontsize(12)\n\n# Set the y-axis label font weight\nax.yaxis.label.set_fontweight('bold')\n\n# Set the y-axis label font style\nax.yaxis.label.set_fontstyle('italic')\n\n# Set the y-axis label font family\nax.yaxis.label.set_fontfamily('serif')\n\n# Set the y-axis label font variant\nax.yaxis.label.set_fontvariant('small-caps')\n\n# Set the y-axis label font stretch\nax.yaxis.label.set_fontstretch('ultra-condensed')\n\n# Set the y-axis label font size\nax.yaxis.label.set_fontsize(12)\n\n# Set the y-axis label font weight\nax.yaxis.label.set_fontweight('bold')\n\n# Set the y-axis label font style\nax.yaxis.label.set_fontstyle('italic')\n\n# Set the y-axis label font family\nax.yaxis.label.set_fontfamily('serif')\n\n# Set the y-axis label font variant\nax.yaxis.label.set_fontvariant('small-caps')\n\n# Set the y-axis label font stretch\nax.yaxis.label.set_fontstretch('ultra-condensed')\n\n# Set the y-axis label font size\nax.yaxis.label.set_fontsize(12)\n\n# Set the y-axis label font weight\nax.yaxis.label.set_fontweight('bold')\n\n# Set the y-axis label font style\nax.yaxis.label.set_fontstyle('italic')\n\n# Set the y-axis label font family\nax.yaxis.label.set_fontfamily('serif')\n\n# Set the y-axis label font variant\nax.yaxis.label.set_fontvariant('small-caps')\n\n# Set the y-axis label font stretch\nax.yaxis.label.set_fontstretch('ultra-condensed')\n\n# Set the y-axis label font size\nax.yaxis.label.set_fontsize(12)\n\n# Set the y-axis label font weight\nax.yaxis.label.set_fontweight('bold')\n\n# Set the y-axis label font style\nax.yaxis.label.set_fontstyle('italic')\n\n# Set the y-axis label font family\nax.yaxis.label.set_fontfamily('serif')\n\n# Set the y-axis label font variant\nax.yaxis.label.set_fontvariant('small-caps')\n\n# Set the y-axis label font stretch\nax.yaxis.label.set_fontstretch('ultra-condensed')\n\n# Set the y-axis label font size\nax.yaxis.label.set_fontsize(12)\n\n# Set the y-axis label font weight\nax.yaxis.label.set_fontweight('bold')\n\n# Set the y-axis label font style\nax.yaxis.label.set_fontstyle('italic')\n\n# Set the y-axis label font family\nax.yaxis.label.set_fontfamily('serif')\n\n# Set the y-axis label font variant\nax.yaxis.label.set_fontvariant('small-caps')\n\n# Set the y-axis label font stretch\nax.yaxis.label.set_fontstretch('ultra-condensed')\n\n# Set the y-axis label font size\nax.yaxis.label.set_fontsize(12)\n\n# Set the y-axis label font weight\nax.yaxis.label.set_fontweight('bold')\n\n# Set the y-axis label font style\nax.yaxis.label.set_fontstyle('italic')\n\n# Set the y-axis label font family\nax.yaxis.label.set_fontfamily('serif')\n\n# Set the y-axis label font variant\nax.yaxis.label.set_fontvariant('small-caps')\n\n# Set the y-axis label font stretch\nax.yaxis.label.set_fontstretch('ultra-condensed')\n\n# Set the y-axis label font size\nax.yaxis.label.set_fontsize(12)\n\n# Set the y-axis label font weight\nax.yaxis.label.set_fontweight('bold')\n\n# Set the y-axis label font style\nax.yaxis.label.set_fontstyle('italic')\n\n# Set the y-axis label font family\nax.yaxis.label.set_fontfamily('serif')\n\n# Set the y-axis label font variant\nax.yaxis.label.set_fontvariant('small-caps')\n\n# Set the y-axis label font stretch\nax.yaxis.label.set_fontstretch('ultra-condensed')\n\n# Set the y-axis label font size\nax.yaxis.label.set_fontsize(12)\n\n# Set the y-axis label font weight\nax.yaxis.label.set_fontweight('bold')\n\n# Set the y-axis label font style\nax.yaxis.label.set_fontstyle('italic')\n\n# Set the y-axis label font family\nax.yaxis.label.set_fontfamily('serif')\n\n# Set the y-axis label font variant\nax.yaxis.label.set_fontvariant('small-caps')\n\n# Set the y-axis label font stretch\nax.yaxis.label.set_fontstretch('ultra-condensed')\n\n# Set the y-axis label font size\nax.yaxis.label.set_fontsize(12)\n\n# Set the y-axis label font weight\nax.yaxis.label.set_fontweight('bold')\n\n# Set the y-axis label font style\nax.yaxis.label.set_fontstyle('italic')\n\n# Set the y-axis label font family\nax.yaxis.label.set_fontfamily('serif')\n\n# Set the y-axis label font variant\nax.yaxis.label.set_fontvariant('small-caps')\n\n# Set the y-axis label font stretch\nax.yaxis.label.set_fontstretch('ultra-condensed')\n\n# Set the y-axis label font size\nax.yaxis.label.set_fontsize(12)\n\n# Set the y-axis label font weight\nax.yaxis.label.set_fontweight('bold')\n\n# Set the y-axis label font style\nax.yaxis.label.set_fontstyle('italic')\n\n# Set the y-axis label font family\nax.yaxis.label.set_fontfamily('serif')\n\n# Set the y-axis label font variant\nax.yaxis.label.set_fontvariant('small-caps')\n\n# Set the y-axis label font stretch\nax.yaxis.label.set_fontstretch('ultra-condensed')\n\n# Set the y-axis label font size\nax.yaxis.label.set_fontsize(12)\n\n# Set the y-axis label font weight\nax.yaxis.label.set_fontweight('bold')\n\n# Set the y-axis label font style\nax.yaxis.label.set_fontstyle('italic')\n\n# Set the y-axis label font family\nax.yaxis.label.set_fontfamily('serif')\n\n# Set the y-axis label font variant\nax.yaxis.label.set_fontvariant('small-caps')\n\n# Set the y-axis label font stretch\nax.yaxis.label.set_fontstretch('ultra-condensed')\n\n# Set the y-axis label font size\nax.yaxis.label.set_fontsize(12)\n\n# Set the y-axis label font weight\nax.yaxis.label.set_fontweight('bold')\n\n# Set the y-axis label font style\nax.yaxis.label.set_fontstyle('italic')\n\n# Set the y-axis label font family\nax.yaxis.label.set_fontfamily('serif')\n\n# Set the y-axis label font variant\nax.yaxis.label.set_fontvariant('small-caps')\n\n# Set the y-axis label font stretch\nax.yaxis.label.set_fontstretch('ultra-condensed')\n\n# Set the y-axis label font size\nax.yaxis.label.set_fontsize(12)\n\n# Set the y-axis label font weight\nax.yaxis.label.set_fontweight('bold')\n\n# Set the y-axis label font style\nax.yaxis.label.set_fontstyle('italic')\n\n# Set the y-axis label font family\nax.yaxis.label.set_fontfamily('serif')\n\n# Set the y-axis label font variant\nax.yaxis.label.set_fontvariant('small-caps')\n\n# Set the y-axis label font stretch\nax.yaxis.label.set_fontstretch('ultra-condensed')\n\n# Set the y-axis label font size\nax.yaxis.label.set_fontsize(12)\n\n# Set the y-axis label font weight\nax.yaxis.label.set_fontweight('bold')\n\n# Set the y-axis label font style\nax.yaxis.label.set_fontstyle('italic')\n\n# Set the y-axis label font family\nax.yaxis.label.set_fontfamily('serif')\n\n# Set the y-axis label font variant\nax.yaxis.label.set_fontvariant('small-caps')\n\n# Set the y-axis label font stretch\nax.yaxis.label.set_fontstretch('ultra-condensed')\n\n# Set the y-axis label font size\nax.yaxis.label.set_fontsize(12)\n\n# Set the y-axis label font weight\nax.yaxis.label.set_fontweight('bold')\n\n# Set the y-axis label font style\nax.yaxis.label.set_fontstyle('italic')\n\n# Set the y-axis label font family\nax.yaxis.label.set_fontfamily('serif')\n\n# Set the y-axis label font variant\nax.yaxis.label.set_fontvariant('small-caps')\n\n# Set the y-axis label font stretch\nax.yaxis.label.set_fontstretch('ultra-condensed')\n\n# Set the y-axis label font size\nax.yaxis.label.set_fontsize(12)\n\n# Set the y-axis label font weight\nax.yaxis.label.set_fontweight('bold')\n\n# Set the y-axis label font style\nax.yaxis.label.set_fontstyle('italic')\n\n# Set the y-axis label font family\nax.yaxis.label.set_fontfamily('serif')\n\n# Set the y-axis label font variant\nax.yaxis.label.set_fontvariant('small-caps')\n\n# Set the y-axis label font stretch\nax.yaxis.label.set_fontstretch('ultra-condensed')\n\n# Set the y-axis label font size\nax.yaxis.label.set_fontsize(12)\n\n# Set the y-axis label font weight\nax.yaxis.label.set_fontweight('bold')\n\n# Set the y-axis label font style\nax.yaxis.label.set_fontstyle('italic')\n\n# Set the y-axis label font family\nax.yaxis.label.set_fontfamily('serif')\n\n# Set the y-axis label font variant\nax.yaxis.label.set_fontvariant('small-caps')\n\n# Set the y-axis label font stretch\nax.yaxis.label.set_fontstretch('ultra-condensed')\n\n# Set the y-axis label font size\nax.yaxis.label.set_fontsize(12)\n\n# Set the y-axis label font weight\nax.yaxis.label.set_fontweight('bold')\n\n# Set the y-axis label font style\nax.yaxis.label.set_fontstyle('italic')\n\n# Set the y-axis label font family\nax.yaxis.label.set_fontfamily('serif')\n\n# Set the y-axis label font variant\nax.yaxis.label.set_fontvariant('small-caps')\n\n# Set the y-axis label font stretch\nax.yaxis.label.set_fontstretch('ultra-condensed')\n\n# Set the y-axis label"}
{"file": "dataset/ori_500/heatmap_19.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(20, 8))\n\n# Set the title of the plot\nax.set_title('a) Role voting in the Werewolf game')\n\n# Create a color map\ncmap = plt.get_cmap('Blues')\n\n# Create a grid of rectangles\nfor i in range(10):\n    for j in range(10):\n        ax.add_patch(plt.Rectangle((i*0.5, j*0.5), 0.5, 0.5, color=cmap(np.random.rand())))\n\n# Set the x and y limits\nax.set_xlim(0, 5)\nax.set_ylim(0, 5)\n\n# Set the x and y ticks\nax.set_xticks(np.arange(0, 6, 0.5))\nax.set_yticks(np.arange(0, 6, 0.5))\n\n# Set the x and y labels\nax.set_xlabel('X-axis')\nax.set_ylabel('Y-axis')\n\n# Set the x and y tick labels\nax.set_xticklabels(['Wererewolf', 'Seer', 'Witch', 'Hunter', 'Abstain'])\nax.set_yticklabels(['Villager', 'Hunter', 'Witch', 'Seer', 'Abstain'])\n\n# Set the color bar\nsm = plt.cm.ScalarMappable(cmap=cmap)\nsm.set_array([])\ncbar = fig.colorbar(sm, ax=ax)\ncbar.set_label('Percentage')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(9.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Question Type: All three types of questions')\n\n# Set the x-axis label\nax.set_xlabel('Response Action Category')\n\n# Set the y-axis label\nax.set_ylabel('Score')\n\n# Define the data for the plot\ncategories = ['Qwen', 'ChatGLM3', 'Baichuan2', 'LLaMA-2', 'Xverse']\nscores = [169, 115, 219, 67, 177]\nresponses = [\n    [547, 662, 271, 145],\n    [439, 753, 239, 1355],\n    [585, 557, 259, 1269],\n    [941, 708, 432, 732],\n    [554, 661, 235, 1246]\n]\n\n# Plot the data\nfor i, category in enumerate(categories):\n    ax.bar(category, scores[i], color='blue')\n    for j, response in enumerate(responses[i]):\n        ax.bar(category, response, bottom=scores[i], color=plt.cm.RdYlGn(j/len(responses[i])))\n\n# Set the y-axis limits\nax.set_ylim(0, 1200)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_20.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\ncategories = ['angry', 'sad', 'disgust', 'contempt', 'fear', 'neutral', 'surprise', 'happy']\nvalues = [0.10, 0.00, 0.30, 0.00, 0.00, 0.50, 0.00, 0.10]\nadjusted_values = [0.12, 0.00, 0.44, 0.00, 0.00, 0.44, 0.00, 0.00]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 8))\n\n# Plot the bars\nbars = ax.bar(categories, values, color='blue')\n\n# Add labels and title\nax.set_xlabel('Emotion')\nax.set_ylabel('Value')\nax.set_title('Original')\n\n# Add value labels\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 2), ha='center', va='bottom')\n\n# Repeat for adjusted values\nax2 = ax.twiny()\nbars2 = ax2.bar(categories, adjusted_values, color='blue', alpha=0.5)\nfor bar in bars2:\n    yval = bar.get_height()\n    ax2.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 2), ha='center', va='bottom')\n\n# Set the second x-axis label\nax2.set_xlabel('Emotion (adjusted)')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_21.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 8))\n\n# Define the data\nvoters = ['Villager', 'Hunter', 'Witch', 'Seer', 'Wererwolf']\npercentages = [15.7, 28.1, 26, 50.8, 12.3]\ncolors = ['blue', 'cyan', 'magenta', 'yellow', 'black']\n\n# Plot the data\nfor i, (voter, percentage, color) in enumerate(zip(voters, percentages, colors)):\n    ax.add_artist(plt.Circle((i*2+1, 1), 0.4, color=color))\n    ax.text(i*2+1, 1.1, f'{voter}\\n{percentage}%', ha='center')\n\n# Set the limits and labels\nax.set_xlim(-1, len(voters)*2)\nax.set_ylim(0, 2)\nax.set_yticks([])\nax.set_xticks([])\n\n# Add a color bar\nsm = plt.cm.ScalarMappable(cmap='Blues', norm=plt.Normalize(vmin=0, vmax=100))\nsm._A = []\ncbar = fig.colorbar(sm, ax=ax, orientation='vertical')\ncbar.set_label('Percentage')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_22.pdf", "response": "```python\n\"\"\"\n=====================================\nLlama vs GPT: A Comparative Analysis\n=====================================\n\nThis example demonstrates how to create a side-by-side comparison of two models,\nLlama and GPT, using matplotlib. The comparison includes a bar chart for each model's\nperformance metrics and a table for their respective IDs.\n\n\"\"\"\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for Llama\nllama_ids = [\"#17\", \"#24\", \"#23\"]\nllama_performance = [17, 24, 23]\n\n# Data for GPT\ngpt_ids = [\"#5\", \"#17\", \"#1\"]\ngpt_performance = [5, 17, 1]\n\n# Create a figure with two subplots side by side\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(6.0, 3.0))\n\n# Plot Llama performance\nax1.bar(llama_ids, llama_performance, color='orange')\nax1.set_title('Llama Performance')\nax1.set_xlabel('ID')\nax1.set_ylabel('Performance')\n\n# Plot GPT performance\nax2.bar(gpt_ids, gpt_performance, color='blue')\nax2.set_title('GPT Performance')\nax2.set_xlabel('ID')\nax2.set_ylabel('Performance')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_23.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Set the background color of the plot\nax.set_facecolor('white')\n\n# Create a grid of subplots\ngs = fig.add_gridspec(2, 4)\n\n# Create a subplot for the first row\nax1 = fig.add_subplot(gs[0, :])\nax1.set_title('First Row')\nax1.set_facecolor('lightgray')\n\n# Create a subplot for the second row\nax2 = fig.add_subplot(gs[1, :])\nax2.set_title('Second Row')\nax2.set_facecolor('lightgray')\n\n# Add rectangles to the subplots\nfor i in range(4):\n    ax1.add_patch(plt.Rectangle((i*0.25, 0), 0.25, 1, facecolor='gray', edgecolor='black'))\n    ax2.add_patch(plt.Rectangle((i*0.25, 0), 0.25, 1, facecolor='gray', edgecolor='black'))\n\n# Set the x-axis limits\nax1.set_xlim(0, 1)\nax2.set_xlim(0, 1)\n\n# Set the y-axis limits\nax1.set_ylim(0, 1)\nax2.set_ylim(0, 1)\n\n# Set the x-axis ticks\nax1.set_xticks([0.125, 0.375, 0.625, 0.875])\nax2.set_xticks([0.125, 0.375, 0.625, 0.875])\n\n# Set the x-axis tick labels\nax1.set_xticklabels(['0.10', '0.08', '0.30', '0.60'])\nax2.set_xticklabels(['0.12', '0.22', '0.30', '0.44'])\n\n# Set the y-axis ticks\nax1.set_yticks([])\nax2.set_yticks([])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_24.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Set the background color of the plot\nax.set_facecolor('#F5F5DC')\n\n# Set the title of the plot\nax.set_title('Harvest [t/year]', fontsize=16)\n\n# Set the x-axis label\nax.set_xlabel('Time [years]', fontsize=14)\n\n# Set the y-axis label\nax.set_ylabel('Harvest [t/year]', fontsize=14)\n\n# Set the x-axis limits\nax.set_xlim(0, 10)\n\n# Set the y-axis limits\nax.set_ylim(0, 6)\n\n# Set the x-axis ticks\nax.set_xticks(np.arange(0, 11, 1))\n\n# Set the y-axis ticks\nax.set_yticks(np.arange(0, 7, 1))\n\n# Set the x-axis tick labels\nax.set_xticklabels(['2010', '2011', '2012', '2013', '2014', '2015', '2016', '2017', '2018', '2019', '2020'])\n\n# Set the y-axis tick labels\nax.set_yticklabels(['0', '1', '2', '3', '4', '5', '6'])\n\n# Set the x-axis grid lines\nax.grid(axis='x', linestyle='--', linewidth=0.5)\n\n# Set the y-axis grid lines\nax.grid(axis='y', linestyle='--', linewidth=0.5)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', labelsize=12)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', labelsize=12)\n\n# Set the x-axis label parameters\nax.xaxis.label.set_color('#000000')\n\n# Set the y-axis label parameters\nax.yaxis.label.set_color('#000000')\n\n# Set the x-axis tick label parameters\nax.tick_params(axis='x', colors='#000000')\n\n# Set the y-axis tick label parameters\nax.tick_params(axis='y', colors='#000000')\n\n# Set the x-axis grid line parameters\nax.grid(axis='x', color='#000000', linestyle='--', linewidth=0.5)\n\n# Set the y-axis grid line parameters\nax.grid(axis='y', color='#000000', linestyle='--', linewidth=0.5)\n\n# Set the x-axis tick label rotation\nax.tick_params(axis='x', rotation=45)\n\n# Set the y-axis tick label rotation\nax.tick_params(axis='y', rotation=0)\n\n# Set the x-axis tick label color\nax.tick_params(axis='x', colors='#000000')\n\n# Set the y-axis tick label color\nax.tick_params(axis='y', colors='#000000')\n\n# Set the x-axis grid line color\nax.grid(axis='x', color='#000000', linestyle='--', linewidth=0.5)\n\n# Set the y-axis grid line color\nax.grid(axis='y', color='#000000', linestyle='--', linewidth=0.5)\n\n# Set the x-axis tick label font size\nax.tick_params(axis='x', labelsize=12)\n\n# Set the y-axis tick label font size\nax.tick_params(axis='y', labelsize=12)\n\n# Set the x-axis label font size\nax.xaxis.label.set_size(14)\n\n# Set the y-axis label font size\nax.yaxis.label.set_size(14)\n\n# Set the x-axis grid line width\nax.grid(axis='x', linewidth=0.5)\n\n# Set the y-axis grid line width\nax.grid(axis='y', linewidth=0.5)\n\n# Set the x-axis grid line style\nax.grid(axis='x', linestyle='--')\n\n# Set the y-axis grid line style\nax.grid(axis='y', linestyle='--')\n\n# Set the x-axis tick label color\nax.tick_params(axis='x', colors='#000000')\n\n# Set the y-axis tick label color\nax.tick_params(axis='y', colors='#000000')\n\n# Set the x-axis grid line color\nax.grid(axis='x', color='#000000', linestyle='--', linewidth=0.5)\n\n# Set the y-axis grid line color\nax.grid(axis='y', color='#000000', linestyle='--', linewidth=0.5)\n\n# Set the x-axis tick label rotation\nax.tick_params(axis='x', rotation=45)\n\n# Set the y-axis tick label rotation\nax.tick_params(axis='y', rotation=0)\n\n# Set the x-axis tick label color\nax.tick_params(axis='x', colors='#000000')\n\n# Set the y-axis tick label color\nax.tick_params(axis='y', colors='#000000')\n\n# Set the x-axis grid line color\nax.grid(axis='x', color='#000000', linestyle='--', linewidth=0.5)\n\n# Set the y-axis grid line color\nax.grid(axis='y', color='#000000', linestyle='--', linewidth=0.5)\n\n# Set the x-axis tick label font size\nax.tick_params(axis='x', labelsize=12)\n\n# Set the y-axis tick label font size\nax.tick_params(axis='y', labelsize=12)\n\n# Set the x-axis label font size\nax.xaxis.label.set_size(14)\n\n# Set the y-axis label font size\nax.yaxis.label.set_size(14)\n\n# Set the x-axis grid line width\nax.grid(axis='x', linewidth=0.5)\n\n# Set the y-axis grid line width\nax.grid(axis='y', linewidth=0.5)\n\n# Set the x-axis grid line style\nax.grid(axis='x', linestyle='--')\n\n# Set the y-axis grid line style\nax.grid(axis='y', linestyle='--')\n\n# Set the x-axis tick label color\nax.tick_params(axis='x', colors='#000000')\n\n# Set the y-axis tick label color\nax.tick_params(axis='y', colors='#000000')\n\n# Set the x-axis grid line color\nax.grid(axis='x', color='#000000', linestyle='--', linewidth=0.5)\n\n# Set the y-axis grid line color\nax.grid(axis='y', color='#000000', linestyle='--', linewidth=0.5)\n\n# Set the x-axis tick label rotation\nax.tick_params(axis='x', rotation=45)\n\n# Set the y-axis tick label rotation\nax.tick_params(axis='y', rotation=0)\n\n# Set the x-axis tick label color\nax.tick_params(axis='x', colors='#000000')\n\n# Set the y-axis tick label color\nax.tick_params(axis='y', colors='#000000')\n\n# Set the x-axis grid line color\nax.grid(axis='x', color='#000000', linestyle='--', linewidth=0.5)\n\n# Set the y-axis grid line color\nax.grid(axis='y', color='#000000', linestyle='--', linewidth=0.5)\n\n# Set the x-axis tick label font size\nax.tick_params(axis='x', labelsize=12)\n\n# Set the y-axis tick label font size\nax.tick_params(axis='y', labelsize=12)\n\n# Set the x-axis label font size\nax.xaxis.label.set_size(14)\n\n# Set the y-axis label font size\nax.yaxis.label.set_size(14)\n\n# Set the x-axis grid line width\nax.grid(axis='x', linewidth=0.5)\n\n# Set the y-axis grid line width\nax.grid(axis='y', linewidth=0.5)\n\n# Set the x-axis grid line style\nax.grid(axis='x', linestyle='--')\n\n# Set the y-axis grid line style\nax.grid(axis='y', linestyle='--')\n\n# Set the x-axis tick label color\nax.tick_params(axis='x', colors='#000000')\n\n# Set the y-axis tick label color\nax.tick_params(axis='y', colors='#000000')\n\n# Set the x-axis grid line color\nax.grid(axis='x', color='#000000', linestyle='--', linewidth=0.5)\n\n# Set the y-axis grid line color\nax.grid(axis='y', color='#000000', linestyle='--', linewidth=0.5)\n\n# Set the x-axis tick label rotation\nax.tick_params(axis='x', rotation=45)\n\n# Set the y-axis tick label rotation\nax.tick_params(axis='y', rotation=0)\n\n# Set the x-axis tick label color\nax.tick_params(axis='x', colors='#000000')\n\n# Set the y-axis tick label color\nax.tick_params(axis='y', colors='#000000')\n\n# Set the x-axis grid line color\nax.grid(axis='x', color='#000000', linestyle='--', linewidth=0.5)\n\n# Set the y-axis grid line color\nax.grid(axis='y', color='#000000', linestyle='--', linewidth=0.5)\n\n# Set the x-axis tick label font size\nax.tick_params(axis='x', labelsize=12)\n\n# Set the y-axis tick label font size\nax.tick_params(axis='y', labelsize=12)\n\n# Set the x-axis label font size\nax.xaxis.label.set_size(14)\n\n# Set the y-axis label font size\nax.yaxis.label.set_size(14)\n\n# Set the x-axis grid line width\nax.grid(axis='x', linewidth=0.5)\n\n# Set the y-axis grid line width\nax.grid(axis='y', linewidth=0.5)\n\n# Set the x-axis grid line style\nax.grid(axis='x', linestyle='--')\n\n# Set the y-axis grid line style\nax.grid(axis='y', linestyle='--')\n\n# Set the x-axis tick label color\nax.tick_params(axis='x', colors='#000000')\n\n# Set the y-axis tick label color\nax.tick_params(axis='y', colors='#000000')\n\n# Set the x-axis grid line color\nax.grid(axis='x', color='#000000', linestyle='--', linewidth=0.5)\n\n# Set the y-axis grid line color\nax.grid(axis='y', color='#000000', linestyle='--', linewidth=0.5)\n\n# Set the x-axis tick label rotation\nax.tick_params(axis='x', rotation=45)\n\n# Set the y-axis tick label rotation\nax.tick_params(axis='y', rotation=0)\n\n# Set the x-axis tick label color\nax.tick_params(axis='x', colors='#000000')\n\n# Set the y-axis tick label color\nax.tick_params(axis='y', colors='#000000')\n\n# Set the x-axis grid line color\nax.grid(axis='x', color='#000000', linestyle='--', linewidth=0.5)\n\n# Set the y-axis grid line color\nax.grid(axis='y', color='#000000', linestyle='--', linewidth=0.5)\n\n# Set the x-axis tick label font size\nax.tick_params(axis='x', labelsize=12)\n\n# Set the y-axis tick label font size\nax.tick_params(axis='y', labelsize=12)\n\n# Set the x-axis label font size\nax.xaxis.label.set_size(14)\n\n# Set the y-axis label font size\nax.yaxis.label.set_size(14)\n\n# Set the x-axis grid line width\nax.grid(axis='x', linewidth=0.5)\n\n# Set the y-axis grid line width\nax.grid(axis='y', linewidth=0.5)\n\n# Set the x-axis grid line style\nax.grid(axis='x', linestyle='--')\n\n# Set the y-axis grid line style\nax.grid(axis='y', linestyle='--')\n\n# Set the x-axis tick label color\nax.tick_params(axis='x', colors='#000000')\n\n# Set the y-axis tick label color\nax.tick_params(axis='y', colors='#000000')\n\n# Set the x-axis grid line color\nax.grid(axis='x', color='#000000', linestyle='--', linewidth=0.5)\n\n# Set the y-axis grid line color\nax.grid(axis='y', color='#000000', linestyle='--', linewidth=0.5)\n\n# Set the x-axis tick label rotation\nax.tick_params(axis='x', rotation=45)\n\n# Set the y-axis tick label rotation\nax.tick_params(axis='y', rotation=0)\n\n# Set the x-axis tick label color\nax.tick_params(axis='x', colors='#000000')\n\n# Set the y-axis tick label color\nax.tick_params(axis='y', colors='#000000')\n\n# Set the x-axis grid line color\nax.grid(axis='x', color='#000000', linestyle='--', linewidth=0.5)\n\n# Set the y-axis grid line color\nax.grid(axis='y', color='#000000', linestyle='--', linewidth=0.5)\n\n# Set the x-axis tick label font size\nax.tick_params(axis='x', labelsize=12)\n\n# Set the y-axis tick label font size\nax.tick_params(axis='y', labelsize=12)\n\n# Set the x-axis label font size\nax.xaxis.label.set_size(14)\n\n# Set the y-axis label font size\nax.yaxis.label.set_size(14)\n\n# Set the x-axis grid line width\nax.grid(axis='x', linewidth=0.5)\n\n# Set the y-axis grid line width\nax.grid(axis='y', linewidth=0.5)\n\n# Set the x-axis grid line style\nax.grid(axis='x', linestyle='--')\n\n# Set the y-axis grid line style\nax.grid(axis='y', linestyle='--')\n\n# Set the x-axis tick label color\nax.tick_params(axis='x', colors='#000000')\n\n# Set the y-axis tick label color\nax.tick_params(axis='y', colors='#000000')\n\n# Set the x-axis grid line color\nax.grid(axis='x', color='#000000', linestyle='--', linewidth=0.5)\n\n# Set the y-axis grid line color\nax.grid(axis='y', color='#000000', linestyle='--', linewidth=0.5)\n\n# Set the x-axis tick label rotation\nax.tick_params(axis='x', rotation=45)\n\n# Set the y-axis tick label rotation\nax.tick_params(axis='y', rotation=0)\n\n# Set the x-axis tick label color\nax.tick_params(axis='x', colors='#000000')\n\n# Set the y-axis tick label color\nax.tick_params(axis='y', colors='#000000')\n\n# Set the x-axis grid line color\nax.grid(axis='x', color='#000000', linestyle='--', linewidth=0.5)\n\n# Set the y-axis grid line color\nax.grid(axis='y', color='#000000', linestyle='--', linewidth=0.5)\n\n# Set the x-axis tick label font size\nax.tick_params(axis='x', labelsize=12)\n\n# Set the y-axis tick label font size\nax.tick_params(axis='y', labelsize=12)\n\n# Set the x-axis label font size\nax.xaxis.label.set_size(14)\n\n# Set the y-axis label font size\nax.yaxis.label.set_size(14)\n\n# Set the x-axis grid line width\nax.grid(axis='x', linewidth=0.5)\n\n# Set the y-axis grid line width\nax.grid(axis='y', linewidth=0.5)\n\n# Set the x-axis grid line style\nax.grid(axis='x', linestyle='--')\n\n# Set the y-axis grid line style\nax.grid(axis='y', linestyle='--')\n\n# Set the x-axis tick label color\nax.tick_params(axis='x', colors='#000000')\n\n# Set the y-axis tick label color\nax.tick_params(axis='y', colors='#000000')\n\n# Set the x-axis grid line color\nax.grid(axis='x', color='#000000', linestyle='--', linewidth=0.5)\n\n# Set the y-axis grid line color\nax.grid(axis='y', color='#000000', linestyle='--', linewidth=0.5)\n\n# Set the x-axis tick label rotation\nax.tick_params(axis='x', rotation=45)\n\n# Set the y-axis tick label rotation\nax.tick_params(axis='y', rotation=0)\n\n# Set the x-axis tick label color\nax.tick_params(axis='x', colors='#000000')\n\n# Set the y-axis tick label color\nax.tick_params(axis='y', colors='#000000')\n\n# Set the x-axis grid line color\nax.grid(axis='x', color='#000000', linestyle='--', linewidth=0.5)\n\n# Set the y-axis grid line color\nax.grid(axis='y', color='#000000', linestyle='--', linewidth=0.5)\n\n# Set the x-axis tick label font size\nax.tick_params(axis='x', labelsize=12)\n\n# Set the y-axis tick label font size\nax.tick_params(axis='y', labelsize=12)\n\n# Set the x-axis label font size\nax.xaxis.label.set_size(14)\n\n# Set the y-axis label font size\nax.yaxis.label.set_size(14)\n\n# Set the x-axis grid line width\nax.grid(axis='x', linewidth=0.5)\n\n# Set the y-axis grid line width\nax.grid(axis='y', linewidth=0.5)\n\n# Set the x-axis grid line style\nax.grid(axis='x', linestyle='--')\n\n# Set the y-axis grid line style\nax.grid(axis='y', linestyle='--')\n\n# Set the x-axis tick label color\nax.tick_params(axis='x', colors='#000000')\n\n# Set the y-axis tick label color\nax.tick_params(axis='y', colors='#000000')\n\n# Set the x-axis grid line color\nax.grid(axis='x', color='#000000', linestyle='--', linewidth=0.5)\n\n# Set the y-axis grid line color\nax.grid(axis='y', color='#000000', linestyle='--', linewidth=0.5)\n\n# Set the x-axis tick label rotation\nax.tick"}
{"file": "dataset/ori_500/heatmap_25.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the background color of the plot\nax.set_facecolor('lightblue')\n\n# Set the title of the plot\nax.set_title('Crops and Their Characteristics')\n\n# Set the x-axis label\nax.set_xlabel('Crops')\n\n# Set the y-axis label\nax.set_ylabel('Characteristics')\n\n# Define the crops and their characteristics\ncrops = ['cucumber', 'tomato', 'lettuce', 'asparagus', 'potato', 'barley']\nharvest = [0.8, 2.4, 1.1, 0.6, 0.7, 0.1]\nquality_rating = [4.0, 3.9, 3.8, 3.7, 3.6, 3.5]\nweekly_sales = [60, 50, 40, 30, 20, 10]\n\n# Create a bar chart for harvest\nax.bar(crops, harvest, color='orange', label='Harvest')\n\n# Create a bar chart for quality rating\nax.bar(crops, quality_rating, color='green', label='Quality Rating')\n\n# Create a bar chart for weekly sales\nax.bar(crops, weekly_sales, color='purple', label='Weekly Sales')\n\n# Add a legend to the plot\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_26.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(9.0, 6.0))\n\n# Define the colors for the rectangles\ncolors = ['green', 'blue', 'yellow', 'purple']\n\n# Create a grid of subplots\nfor i in range(12):\n    # Create a subplot\n    ax = fig.add_subplot(4, 3, i+1)\n    \n    # Create a rectangle with a random color\n    rect = plt.Rectangle((0, 0), 1, 1, color=np.random.choice(colors))\n    ax.add_patch(rect)\n    \n    # Set the title of the subplot\n    ax.set_title(f\"Rectangle {i+1}\")\n    \n    # Remove the axes\n    ax.axis('off')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_27.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6, 4))\n\n# Set the title of the plot\nax.set_title('default: no edges')\n\n# Create a rectangle for the first row\nrect1 = plt.Rectangle((0, 0), 10, 1, color='pink')\nax.add_patch(rect1)\n\n# Create a rectangle for the second row\nrect2 = plt.Rectangle((0, 1), 10, 1, color='orange')\nax.add_patch(rect2)\n\n# Create a rectangle for the third row\nrect3 = plt.Rectangle((0, 2), 10, 1, color='purple')\nax.add_patch(rect3)\n\n# Create a rectangle for the fourth row\nrect4 = plt.Rectangle((0, 3), 10, 1, color='blue')\nax.add_patch(rect4)\n\n# Create a rectangle for the fifth row\nrect5 = plt.Rectangle((0, 4), 10, 1, color='yellow')\nax.add_patch(rect5)\n\n# Create a rectangle for the sixth row\nrect6 = plt.Rectangle((0, 5), 10, 1, color='green')\nax.add_patch(rect6)\n\n# Create a rectangle for the seventh row\nrect7 = plt.Rectangle((0, 6), 10, 1, color='red')\nax.add_patch(rect7)\n\n# Create a rectangle for the eighth row\nrect8 = plt.Rectangle((0, 7), 10, 1, color='brown')\nax.add_patch(rect8)\n\n# Create a rectangle for the ninth row\nrect9 = plt.Rectangle((0, 8), 10, 1, color='cyan')\nax.add_patch(rect9)\n\n# Create a rectangle for the tenth row\nrect10 = plt.Rectangle((0, 9), 10, 1, color='magenta')\nax.add_patch(rect10)\n\n# Set the x-axis limits\nax.set_xlim(0, 10)\n\n# Set the y-axis limits\nax.set_ylim(0, 10)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_28.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Create a grid of rectangles\nrects = []\nfor i in range(10):\n    for j in range(10):\n        rect = plt.Rectangle((i, j), 1, 1, color='lightblue')\n        rects.append(rect)\nax.add_collection(plt.collections.PatchCollection(rects))\n\n# Set the limits of the plot\nax.set_xlim(-1, 10)\nax.set_ylim(-1, 10)\n\n# Set the labels\nax.set_xlabel('Vendor')\nax.set_ylabel('Product')\n\n# Set the title\nax.set_title('Sales of vendors (in tons/year)')\n\n# Set the x-ticks and y-ticks\nax.set_xticks(range(10))\nax.set_yticks(range(10))\n\n# Set the x-tick labels and y-tick labels\nax.set_xticklabels(['Vendor A', 'Vendor B', 'Vendor C', 'Vendor D', 'Vendor E', 'Vendor F', 'Vendor G', 'Vendor H', 'Vendor I', 'Vendor J'])\nax.set_yticklabels(['apples', 'bananas', 'cherries', 'dates', 'elderberries', 'figs', 'grapes'])\n\n# Set the facecolor of the rectangles\nfor i, rect in enumerate(rects):\n    if i % 2 == 0:\n        rect.set_facecolor('orange')\n    else:\n        rect.set_facecolor('pink')\n\n# Set the edgecolor of the rectangles\nfor i, rect in enumerate(rects):\n    if i % 2 == 0:\n        rect.set_edgecolor('red')\n    else:\n        rect.set_edgecolor('black')\n\n# Set the linewidth of the rectangles\nfor i, rect in enumerate(rects):\n    if i % 2 == 0:\n        rect.set_linewidth(2)\n    else:\n        rect.set_linewidth(1)\n\n# Set the alpha of the rectangles\nfor i, rect in enumerate(rects):\n    if i % 2 == 0:\n        rect.set_alpha(0.5)\n    else:\n        rect.set_alpha(0.7)\n\n# Set the hatch of the rectangles\nfor i, rect in enumerate(rects):\n    if i % 2 == 0:\n        rect.set_hatch('/')\n    else:\n        rect.set_hatch('x')\n\n# Set the label of the rectangles\nfor i, rect in enumerate(rects):\n    if i % 2 == 0:\n        rect.set_label('Vendor A')\n    else:\n        rect.set_label('Vendor B')\n\n# Set the legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_29.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(5.0, 4.0))\n\n# Set the title of the plot\nax.set_title('Degree of acceptance of a product')\n\n# Create a bar chart\nbars = ax.bar(['High', 'Medium', 'Low'], [42, 38, 55], color='blue')\n\n# Add labels to the bars\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 2), ha='center', va='bottom')\n\n# Set the x-axis label\nax.set_xlabel('Degree of acceptance')\n\n# Set the y-axis label\nax.set_ylabel('Product')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the background color of the plot\nax.set_facecolor('lightblue')\n\n# Create a colorbar with a gradient\ncmap = plt.get_cmap('Blues')\nnorm = plt.Normalize(vmin=0.1, vmax=0.9)\nsm = plt.cm.ScalarMappable(cmap=cmap, norm=norm)\nsm.set_array([])\ncbar = fig.colorbar(sm, ax=ax, orientation='vertical', fraction=0.046, pad=0.04)\n\n# Set the title of the colorbar\ncbar.set_label('Bottlebeck Distance')\n\n# Set the title of the plot\nax.set_title('Wasserstein Distance')\n\n# Set the x-axis label\nax.set_xlabel('Bottlebeck Distance')\n\n# Set the y-axis label\nax.set_ylabel('Wasserstein Distance')\n\n# Set the tick labels for the x-axis\nax.set_xticks([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9])\nax.set_xticklabels(['0.1', '0.2', '0.3', '0.4', '0.5', '0.6', '0.7', '0.8', '0.9'])\n\n# Set the tick labels for the y-axis\nax.set_yticks([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9])\nax.set_yticklabels(['0.1', '0.2', '0.3', '0.4', '0.5', '0.6', '0.7', '0.8', '0.9'])\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_30.pdf", "response": "import matplotlib.pyplot as plt\n\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('ROC\\'s AUC')\n\n# Set the x-axis label\nax.set_xlabel('Timeshift')\n\n# Set the y-axis label\nax.set_ylabel('AUC')\n\n# Create a grid of rectangles\nfor i in range(1, 9):\n    for j in range(1, 9):\n        ax.add_patch(plt.Rectangle((i-1, j-1), 1, 1, color='lightblue'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((3, 3), 2, 2, color='red'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((5, 5), 2, 2, color='blue'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((7, 7), 2, 2, color='green'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((9, 9), 2, 2, color='yellow'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((11, 11), 2, 2, color='orange'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((13, 13), 2, 2, color='purple'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((15, 15), 2, 2, color='pink'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((17, 17), 2, 2, color='brown'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((19, 19), 2, 2, color='grey'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((21, 21), 2, 2, color='black'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((23, 23), 2, 2, color='white'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((25, 25), 2, 2, color='cyan'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((27, 27), 2, 2, color='magenta'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((29, 29), 2, 2, color='lime'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((31, 31), 2, 2, color='silver'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((33, 33), 2, 2, color='gold'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((35, 35), 2, 2, color='navy'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((37, 37), 2, 2, color='maroon'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((39, 39), 2, 2, color='olive'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((41, 41), 2, 2, color='teal'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((43, 43), 2, 2, color='indigo'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((45, 45), 2, 2, color='violet'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((47, 47), 2, 2, color='coral'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((49, 49), 2, 2, color='plum'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((51, 51), 2, 2, color='azure'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((53, 53), 2, 2, color='chartreuse'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((55, 55), 2, 2, color='lavender'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((57, 57), 2, 2, color='salmon'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((59, 59), 2, 2, color='tan'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((61, 61), 2, 2, color='wheat'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((63, 63), 2, 2, color='beige'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((65, 65), 2, 2, color='khaki'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((67, 67), 2, 2, color='ivory'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((69, 69), 2, 2, color='honeydew'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((71, 71), 2, 2, color='mintcream'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((73, 73), 2, 2, color='azure'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((75, 75), 2, 2, color='aliceblue'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((77, 77), 2, 2, color='lavenderblush'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((79, 79), 2, 2, color='papayawhip'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((81, 81), 2, 2, color='blanchedalmond'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((83, 83), 2, 2, color='bisque'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((85, 85), 2, 2, color='cornsilk'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((87, 87), 2, 2, color='lemonchiffon'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((89, 89), 2, 2, color='lightgoldenrodyellow'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((91, 91), 2, 2, color='lightyellow'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((93, 93), 2, 2, color='lightcoral'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((95, 95), 2, 2, color='lightsalmon'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((97, 97), 2, 2, color='lightpink'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((99, 99), 2, 2, color='lavender'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((101, 101), 2, 2, color='thistle'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((103, 103), 2, 2, color='plum'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((105, 105), 2, 2, color='violet'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((107, 107), 2, 2, color='orchid'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((109, 109), 2, 2, color='fuchsia'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((111, 111), 2, 2, color='magenta'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((113, 113), 2, 2, color='deeppink'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((115, 115), 2, 2, color='hotpink'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((117, 117), 2, 2, color='pink'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((119, 119), 2, 2, color='lightpink'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((121, 121), 2, 2, color='lavender'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((123, 123), 2, 2, color='thistle'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((125, 125), 2, 2, color='plum'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((127, 127), 2, 2, color='violet'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((129, 129), 2, 2, color='orchid'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((131, 131), 2, 2, color='fuchsia'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((133, 133), 2, 2, color='magenta'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((135, 135), 2, 2, color='deeppink'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((137, 137), 2, 2, color='hotpink'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((139, 139), 2, 2, color='pink'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((141, 141), 2, 2, color='lightpink'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((143, 143), 2, 2, color='lavender'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((145, 145), 2, 2, color='thistle'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((147, 147), 2, 2, color='plum'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((149, 149), 2, 2, color='violet'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((151, 151), 2, 2, color='orchid'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((153, 153), 2, 2, color='fuchsia'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((155, 155), 2, 2, color='magenta'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((157, 157), 2, 2, color='deeppink'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((159, 159), 2, 2, color='hotpink'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((161, 161), 2, 2, color='pink'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((163, 163), 2, 2, color='lightpink'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((165, 165), 2, 2, color='lavender'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((167, 167), 2, 2, color='thistle'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((169, 169), 2, 2, color='plum'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((171, 171), 2, 2, color='violet'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((173, 173), 2, 2, color='orchid'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((175, 175), 2, 2, color='fuchsia'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((177, 177), 2, 2, color='magenta'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((179, 179), 2, 2, color='deeppink'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((181, 181), 2, 2, color='hotpink'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((183, 183), 2, 2, color='pink'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((185, 185), 2, 2, color='lightpink'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((187, 187), 2, 2, color='lavender'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((189, 189), 2, 2, color='thistle'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((191, 191), 2, 2, color='plum'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((193, 193), 2, 2, color='violet'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((195, 195), 2, 2, color='orchid'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((197, 197), 2, 2, color='fuchsia'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((199, 199), 2, 2, color='magenta'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((201, 201), 2, 2, color='deeppink'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((203, 203), 2, 2, color='hotpink'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((205, 205), 2, 2, color='pink'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((207, 207), 2, 2, color='lightpink'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((209, 209), 2, 2, color='lavender'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((211, 211), 2, 2, color='thistle'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((213, 213), 2, 2, color='plum'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((215, 215), 2, 2, color='violet'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((217, 217), 2, 2, color='orchid'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((219, 219), 2, 2, color='fuchsia'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((221, 221), 2, 2, color='magenta'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((223, 223), 2, 2, color='deeppink'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((225, 225), 2, 2, color='hotpink'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((227, 227), 2, 2, color='pink'))\n\n# Add a rectangle with a specific color\n"}
{"file": "dataset/ori_500/heatmap_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 3.0))\n\n# Set the title of the plot\nax.set_title('C Subject')\n\n# Create a bar chart with the data\nax.bar(range(1, 29), [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2.0, 2.1, 2.2, 2.3, 2.4, 2.5, 2.6, 2.7, 2.8], color='green')\n\n# Set the x-axis label\nax.set_xlabel('Count')\n\n# Set the y-axis label\nax.set_ylabel('Value')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(12, 6))\n\n# Set the background color of the plot\nax.set_facecolor('purple')\n\n# Set the title of the plot\nax.set_title('Live Cricket Scores', color='white')\n\n# Set the x-axis label\nax.set_xlabel('Match Number', color='white')\n\n# Set the y-axis label\nax.set_ylabel('Score', color='white')\n\n# Set the tick labels for the x-axis\nax.set_xticks([0, 1, 2, 3])\nax.set_xticklabels(['0', '1', '2', '3'], color='white')\n\n# Set the tick labels for the y-axis\nax.set_yticks([0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200, 210, 220, 230, 240, 250, 260, 270, 280, 290, 300, 310, 320, 330, 340, 350, 360, 370, 380, 390, 400, 410, 420, 430, 440, 450, 460, 470, 480, 490, 500])\n\n# Set the color of the grid lines\nax.grid(color='white')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('white')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('white')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the bottom and left axis lines\nax.spines['bottom'].set_color('white')\nax.spines['left'].set_color('white')\n\n# Set the color of the grid lines\nax.grid(color='white')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('white')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('white')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the bottom and left axis lines\nax.spines['bottom'].set_color('white')\nax.spines['left'].set_color('white')\n\n# Set the color of the grid lines\nax.grid(color='white')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('white')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('white')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the bottom and left axis lines\nax.spines['bottom'].set_color('white')\nax.spines['left'].set_color('white')\n\n# Set the color of the grid lines\nax.grid(color='white')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('white')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('white')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the bottom and left axis lines\nax.spines['bottom'].set_color('white')\nax.spines['left'].set_color('white')\n\n# Set the color of the grid lines\nax.grid(color='white')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('white')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('white')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the bottom and left axis lines\nax.spines['bottom'].set_color('white')\nax.spines['left'].set_color('white')\n\n# Set the color of the grid lines\nax.grid(color='white')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('white')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('white')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the bottom and left axis lines\nax.spines['bottom'].set_color('white')\nax.spines['left'].set_color('white')\n\n# Set the color of the grid lines\nax.grid(color='white')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('white')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('white')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the bottom and left axis lines\nax.spines['bottom'].set_color('white')\nax.spines['left'].set_color('white')\n\n# Set the color of the grid lines\nax.grid(color='white')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('white')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('white')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the bottom and left axis lines\nax.spines['bottom'].set_color('white')\nax.spines['left'].set_color('white')\n\n# Set the color of the grid lines\nax.grid(color='white')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('white')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('white')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the bottom and left axis lines\nax.spines['bottom'].set_color('white')\nax.spines['left'].set_color('white')\n\n# Set the color of the grid lines\nax.grid(color='white')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('white')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('white')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the bottom and left axis lines\nax.spines['bottom'].set_color('white')\nax.spines['left'].set_color('white')\n\n# Set the color of the grid lines\nax.grid(color='white')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('white')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('white')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the bottom and left axis lines\nax.spines['bottom'].set_color('white')\nax.spines['left'].set_color('white')\n\n# Set the color of the grid lines\nax.grid(color='white')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('white')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('white')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the bottom and left axis lines\nax.spines['bottom'].set_color('white')\nax.spines['left'].set_color('white')\n\n# Set the color of the grid lines\nax.grid(color='white')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('white')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('white')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the bottom and left axis lines\nax.spines['bottom'].set_color('white')\nax.spines['left'].set_color('white')\n\n# Set the color of the grid lines\nax.grid(color='white')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('white')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('white')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the bottom and left axis lines\nax.spines['bottom'].set_color('white')\nax.spines['left'].set_color('white')\n\n# Set the color of the grid lines\nax.grid(color='white')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('white')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('white')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the bottom and left axis lines\nax.spines['bottom'].set_color('white')\nax.spines['left'].set_color('white')\n\n# Set the color of the grid lines\nax.grid(color='white')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('white')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('white')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the bottom and left axis lines\nax.spines['bottom'].set_color('white')\nax.spines['left'].set_color('white')\n\n# Set the color of the grid lines\nax.grid(color='white')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('white')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('white')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the bottom and left axis lines\nax.spines['bottom'].set_color('white')\nax.spines['left'].set_color('white')\n\n# Set the color of the grid lines\nax.grid(color='white')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('white')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('white')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the bottom and left axis lines\nax.spines['bottom'].set_color('white')\nax.spines['left'].set_color('white')\n\n# Set the color of the grid lines\nax.grid(color='white')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('white')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('white')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the bottom and left axis lines\nax.spines['bottom'].set_color('white')\nax.spines['left'].set_color('white')\n\n# Set the color of the grid lines\nax.grid(color='white')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('white')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('white')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the bottom and left axis lines\nax.spines['bottom'].set_color('white')\nax.spines['left'].set_color('white')\n\n# Set the color of the grid lines\nax.grid(color='white')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('white')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('white')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the bottom and left axis lines\nax.spines['bottom'].set_color('white')\nax.spines['left'].set_color('white')\n\n# Set the color of the grid lines\nax.grid(color='white')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('white')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('white')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the bottom and left axis lines\nax.spines['bottom'].set_color('white')\nax.spines['left'].set_color('white')\n\n# Set the color of the grid lines\nax.grid(color='white')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('white')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('white')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the bottom and left axis lines\nax.spines['bottom'].set_color('white')\nax.spines['left'].set_color('white')\n\n# Set the color of the grid lines\nax.grid(color='white')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('white')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('white')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the bottom and left axis lines\nax.spines['bottom'].set_color('white')\nax.spines['left'].set_color('white')\n\n# Set the color of the grid lines\nax.grid(color='white')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('white')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('white')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the bottom and left axis lines\nax.spines['bottom'].set_color('white')\nax.spines['left'].set_color('white')\n\n# Set the color of the grid lines\nax.grid(color='white')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('white')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('white')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n#"}
{"file": "dataset/ori_500/heatmap_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the bar chart\nx = ['Kokkos', 'Raja', 'OMP', 'OACC', 'SYCL', 'Native Port']\ny = [482, 120, 843, 1170, 925, 911]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Plot the bar chart\nax.bar(x, y, color='pink')\n\n# Set the title of the chart\nax.set_title('BabelStream triad Average Memory Bandwidth (GB/s)')\n\n# Set the x-axis label\nax.set_xlabel('Programming Model')\n\n# Set the y-axis label\nax.set_ylabel('Memory Bandwidth (GB/s)')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\nfig.patch.set_facecolor('#f2f2f2')\nax.set_facecolor('#e6e6e6')\n\n# Set the title of the plot\nax.set_title('Correlation Coefficients', fontsize=14, fontweight='bold')\n\n# Create a color map for the heatmap\ncmap = plt.get_cmap('OrRd')\n\n# Create a heatmap with the correlation coefficients\nheatmap = ax.imshow([[0.95, 0.93, 0.92, 0.90, 0.88, 0.86, 0.85, 0.84, 0.83, 0.82, 0.81, 0.80],\n                     [0.95, 0.93, 0.92, 0.90, 0.88, 0.86, 0.85, 0.84, 0.83, 0.82, 0.81, 0.80],\n                     [0.95, 0.93, 0.92, 0.90, 0.88, 0.86, 0.85, 0.84, 0.83, 0.82, 0.81, 0.80],\n                     [0.95, 0.93, 0.92, 0.90, 0.88, 0.86, 0.85, 0.84, 0.83, 0.82, 0.81, 0.80],\n                     [0.95, 0.93, 0.92, 0.90, 0.88, 0.86, 0.85, 0.84, 0.83, 0.82, 0.81, 0.80],\n                     [0.95, 0.93, 0.92, 0.90, 0.88, 0.86, 0.85, 0.84, 0.83, 0.82, 0.81, 0.80],\n                     [0.95, 0.93, 0.92, 0.90, 0.88, 0.86, 0.85, 0.84, 0.83, 0.82, 0.81, 0.80],\n                     [0.95, 0.93, 0.92, 0.90, 0.88, 0.86, 0.85, 0.84, 0.83, 0.82, 0.81, 0.80],\n                     [0.95, 0.93, 0.92, 0.90, 0.88, 0.86, 0.85, 0.84, 0.83, 0.82, 0.81, 0.80],\n                     [0.95, 0.93, 0.92, 0.90, 0.88, 0.86, 0.85, 0.84, 0.83, 0.82, 0.81, 0.80],\n                     [0.95, 0.93, 0.92, 0.90, 0.88, 0.86, 0.85, 0.84, 0.83, 0.82, 0.81, 0.80]], cmap=cmap)\n\n# Add a color bar to the plot\ncbar = fig.colorbar(heatmap)\ncbar.ax.set_ylabel('Correlation Coefficient', rotation=-90, va=\"bottom\")\n\n# Set the labels for the x-axis and y-axis\nax.set_xticks(range(len(['en', 'fr', 'es', 'pt', 'bn', 'nr', 'hi', 'ar', 'zh'])))\nax.set_yticks(range(len(['en', 'fr', 'es', 'pt', 'bn', 'nr', 'hi', 'ar', 'zh'])))\nax.set_xticklabels(['en', 'fr', 'es', 'pt', 'bn', 'nr', 'hi', 'ar', 'zh'])\nax.set_yticklabels(['en', 'fr', 'es', 'pt', 'bn', 'nr', 'hi', 'ar', 'zh'])\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the bar chart\ncategories = ['LexRank', 'ROUGE', 'BERTScore', 'SimCSE', 'PMI', 'GPT-3.5', 'CrossAttN', 'PPL']\nvalues = [0.19, 0.19, 0.62, 0.53, 0.50, 0.39, 0.20, 0.06]\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\nax.bar(categories, values, color='skyblue')\n\n# Set the title and labels\nax.set_title('Bar Chart of Values')\nax.set_xlabel('Categories')\nax.set_ylabel('Values')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\nfig, ax = plt.subplots(figsize=(5.0, 6.0))\n\n# Create a grid of rectangles\nfor i in range(15):\n    for j in range(15):\n        if (i + j) % 2 == 0:\n            color = 'blue'\n        else:\n            color = 'purple'\n        ax.add_patch(plt.Rectangle((i, j), 1, 1, color=color))\n\n# Set the limits of the plot\nax.set_xlim(0, 15)\nax.set_ylim(0, 15)\n\n# Set the labels of the axes\nax.set_xlabel('Layers')\nax.set_ylabel('Endo')\n\n# Set the title of the plot\nax.set_title('pythia-1b')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 7.0))\n\n# Set the x-axis limits\nax.set_xlim(0, 1)\n\n# Set the y-axis limits\nax.set_ylim(0, 100)\n\n# Set the x-axis ticks\nax.set_xticks([0, 0.2, 0.4, 0.6, 0.8, 1])\n\n# Set the y-axis ticks\nax.set_yticks([0, 20, 40, 60, 80, 100])\n\n# Set the x-axis labels\nax.set_xticklabels(['0.0', '0.2', '0.4', '0.6', '0.8', '1.0'])\n\n# Set the y-axis labels\nax.set_yticklabels(['0', '20', '40', '60', '80', '100'])\n\n# Set the title of the plot\nax.set_title('Test Winning Distance')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the"}
{"file": "dataset/ori_500/hist_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 3))\n\n# Define the data\ncosine_similarity = np.linspace(-0.2, 0.8, 100)\ninter_class = np.random.normal(0.5, 0.1, 100)\nintra_class = np.random.normal(0.3, 0.1, 100)\n\n# Plot the histogram\nax.hist([inter_class, intra_class], bins=20, color=['blue', 'green'], alpha=0.7, label=['Inter Class', 'Intra Class'])\n\n# Set the title and labels\nax.set_title('Cosine Similarity Distribution')\nax.set_xlabel('Cosine Similarity')\nax.set_ylabel('Frequency')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Set the title of the plot\nax.set_title('Baseline')\n\n# Create a bar chart with the data\nax.bar([0.5, 1.0, 1.5, 2.0, 2.5], [0.6, 0.7, 0.8, 0.9, 1.0], color='blue')\nax.bar([0.5, 1.0, 1.5, 2.0, 2.5], [0.4, 0.5, 0.6, 0.7, 0.8], color='orange')\n\n# Set the x-axis label\nax.set_xlabel('Euclidean Distance')\n\n# Set the y-axis label\nax.set_ylabel('Density')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(7.0, 8.0))\n\n# Set the title of the plot\nax.set_title('MATHWELL')\n\n# Create a histogram\nax.hist(np.random.normal(5, 1, 1000), bins=20, color='blue')\n\n# Set the x-axis label\nax.set_xlabel('FKGL')\n\n# Set the y-axis label\nax.set_ylabel('Density')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plot\nx = [0.02, 0.04, 0.06, 0.08]\ny = [1000, 1000, 1000, 1000]\nbar_width = 0.35\nopacity = 0.8\nindex = range(len(x))\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(5.0, 5.0))\n\n# Plot the bars\nbars = ax.bar(index, y, bar_width, alpha=opacity, color='orange')\n\n# Add labels and title\nax.set_xlabel('Animal Weight (Tons)')\nax.set_ylabel('Frequency')\nax.set_title('Desert Animals in the Wild')\nax.set_xticks(index)\nax.set_xticklabels(x)\n\n# Add legend\nax.legend((bars[0], bars[1]), ('Camels', 'Kangaroos'))\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Set the title of the plot\nax.set_title('Comparison of Uniform and Normal Distributions')\n\n# Set the x-axis label\nax.set_xlabel('Frequency')\n\n# Set the y-axis label\nax.set_ylabel('Value')\n\n# Define the data for the plot\nx = [0, 2, 4, 6, 8]\ny = [10, 30, 50, 70, 90]\n\n# Plot the data\nax.plot(x, y, 'bo-')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Histogram of Wind Speed Measurements')\n\n# Set the x-axis label\nax.set_xlabel('Wind Speed (km/h)')\n\n# Set the y-axis label\nax.set_ylabel('Number of Measurements')\n\n# Set the x-axis limits\nax.set_xlim(-2, 6)\n\n# Set the y-axis limits\nax.set_ylim(0, 1200)\n\n# Set the grid\nax.grid(True)\n\n# Set the color of the grid lines\nax.grid(color='blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the"}
{"file": "dataset/ori_500/hist_16.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nx = [0.0, 0.5, 1.0, 1.5, 2.0, 2.5, 3.0]\ny = [100, 90, 80, 70, 60, 50, 40]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(5.0, 4.0))\n\n# Plot the data\nax.plot(x, y, color='blue')\n\n# Set the title and labels\nax.set_title('Baking Accuracy Analysis')\nax.set_xlabel('Distance to Threshold')\nax.set_ylabel('Frequency')\n\n# Set the x-axis limits\nax.set_xlim(0, 3)\n\n# Set the y-axis limits\nax.set_ylim(0, 150)\n\n# Set the grid\nax.grid(True)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_17.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(16.0, 7.0))\n\n# Set the x-axis limits\nax.set_xlim(0, 1)\n\n# Set the y-axis limits\nax.set_ylim(0, 140)\n\n# Set the x-axis ticks\nax.set_xticks([0, 0.2, 0.4, 0.6, 0.8, 1])\n\n# Set the y-axis ticks\nax.set_yticks(range(0, 150, 20))\n\n# Set the x-axis labels\nax.set_xticklabels(['0.0', '0.2', '0.4', '0.6', '0.8', '1.0'])\n\n# Set the y-axis labels\nax.set_yticklabels(range(0, 150, 20))\n\n# Set the title of the plot\nax.set_title('Test Winning Distance')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('red')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='green')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', width=2)\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('purple')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('orange')\n\n# Set the color of the title\nax.title.set_color('brown')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['0.0', '0.2', '0.4', '0.6', '0.8', '1.0'], color='cyan')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(range(0, 150, 20), color='magenta')\n\n# Set the color of the x-axis tick lines\nax.tick_params(axis='x', colors='yellow')\n\n# Set the color of the y-axis tick lines\nax.tick_params(axis='y', colors='pink')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('cyan')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('magenta')\n\n# Set the color of the title\nax.title.set_color('brown')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['0.0', '0.2', '0.4', '0.6', '0.8', '1.0'], color='cyan')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(range(0, 150, 20), color='magenta')\n\n# Set the color of the x-axis tick lines\nax.tick_params(axis='x', colors='yellow')\n\n# Set the color of the y-axis tick lines\nax.tick_params(axis='y', colors='pink')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('cyan')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('magenta')\n\n# Set the color of the title\nax.title.set_color('brown')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['0.0', '0.2', '0.4', '0.6', '0.8', '1.0'], color='cyan')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(range(0, 150, 20), color='magenta')\n\n# Set the color of the x-axis tick lines\nax.tick_params(axis='x', colors='yellow')\n\n# Set the color of the y-axis tick lines\nax.tick_params(axis='y', colors='pink')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('cyan')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('magenta')\n\n# Set the color of the title\nax.title.set_color('brown')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['0.0', '0.2', '0.4', '0.6', '0.8', '1.0'], color='cyan')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(range(0, 150, 20), color='magenta')\n\n# Set the color of the x-axis tick lines\nax.tick_params(axis='x', colors='yellow')\n\n# Set the color of the y-axis tick lines\nax.tick_params(axis='y', colors='pink')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('cyan')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('magenta')\n\n# Set the color of the title\nax.title.set_color('brown')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['0.0', '0.2', '0.4', '0.6', '0.8', '1.0'], color='cyan')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(range(0, 150, 20), color='magenta')\n\n# Set the color of the x-axis tick lines\nax.tick_params(axis='x', colors='yellow')\n\n# Set the color of the y-axis tick lines\nax.tick_params(axis='y', colors='pink')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('cyan')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('magenta')\n\n# Set the color of the title\nax.title.set_color('brown')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['0.0', '0.2', '0.4', '0.6', '0.8', '1.0'], color='cyan')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(range(0, 150, 20), color='magenta')\n\n# Set the color of the x-axis tick lines\nax.tick_params(axis='x', colors='yellow')\n\n# Set the color of the y-axis tick lines\nax.tick_params(axis='y', colors='pink')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('cyan')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('magenta')\n\n# Set the color of the title\nax.title.set_color('brown')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['0.0', '0.2', '0.4', '0.6', '0.8', '1.0'], color='cyan')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(range(0, 150, 20), color='magenta')\n\n# Set the color of the x-axis tick lines\nax.tick_params(axis='x', colors='yellow')\n\n# Set the color of the y-axis tick lines\nax.tick_params(axis='y', colors='pink')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('cyan')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('magenta')\n\n# Set the color of the title\nax.title.set_color('brown')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['0.0', '0.2', '0.4', '0.6', '0.8', '1.0'], color='cyan')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(range(0, 150, 20), color='magenta')\n\n# Set the color of the x-axis tick lines\nax.tick_params(axis='x', colors='yellow')\n\n# Set the color of the y-axis tick lines\nax.tick_params(axis='y', colors='pink')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('cyan')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('magenta')\n\n# Set the color of the title\nax.title.set_color('brown')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['0.0', '0.2', '0.4', '0.6', '0.8', '1.0'], color='cyan')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(range(0, 150, 20), color='magenta')\n\n# Set the color of the x-axis tick lines\nax.tick_params(axis='x', colors='yellow')\n\n# Set the color of the y-axis tick lines\nax.tick_params(axis='y', colors='pink')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('cyan')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('magenta')\n\n# Set the color of the title\nax.title.set_color('brown')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['0.0', '0.2', '0.4', '0.6', '0.8', '1.0'], color='cyan')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(range(0, 150, 20), color='magenta')\n\n# Set the color of the x-axis tick lines\nax.tick_params(axis='x', colors='yellow')\n\n# Set the color of the y-axis tick lines\nax.tick_params(axis='y', colors='pink')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('cyan')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('magenta')\n\n# Set the color of the title\nax.title.set_color('brown')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['0.0', '0.2', '0.4', '0.6', '0.8', '1.0'], color='cyan')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(range(0, 150, 20), color='magenta')\n\n# Set the color of the x-axis tick lines\nax.tick_params(axis='x', colors='yellow')\n\n# Set the color of the y-axis tick lines\nax.tick_params(axis='y', colors='pink')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('cyan')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('magenta')\n\n# Set the color of the title\nax.title.set_color('brown')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['0.0', '0.2', '0.4', '0.6', '0.8', '1.0'], color='cyan')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(range(0, 150, 20), color='magenta')\n\n# Set the color of the x-axis tick lines\nax.tick_params(axis='x', colors='yellow')\n\n# Set the color of the y-axis tick lines\nax.tick_params(axis='y', colors='pink')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('cyan')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('magenta')\n\n# Set the color of the title\nax.title.set_color('brown')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['0.0', '0.2', '0.4', '0.6', '0.8', '1.0'], color='cyan')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(range(0, 150, 20), color='magenta')\n\n# Set the color of the x-axis tick lines\nax.tick_params(axis='x', colors='yellow')\n\n# Set the color of the y-axis tick lines\nax.tick_params(axis='y', colors='pink')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('cyan')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('magenta')\n\n# Set the color of the title\nax.title.set_color('brown')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['0.0', '0.2', '0.4', '0.6', '0.8', '1.0'], color='cyan')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(range(0, 150, 20), color='magenta')\n\n# Set the color of the x-axis tick lines\nax.tick_params(axis='x', colors='yellow')\n\n# Set the color of the y-axis tick lines\nax.tick_params(axis='y', colors='pink')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('cyan')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('magenta')\n\n# Set the color of the title\nax.title.set_color('brown')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['0.0', '0.2', '0.4', '0.6', '0.8', '1.0'], color='cyan')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(range(0, 150, 20), color='magenta')\n\n# Set the color of the x-axis tick lines\nax.tick_params(axis='x', colors='yellow')\n\n# Set the color of the y-axis tick lines\nax.tick_params(axis='y', colors='pink')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('cyan')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('magenta')\n\n# Set the color of the title\nax.title.set_color('brown')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['0.0', '0.2', '0.4', '0.6', '0.8', '1.0'], color='cyan')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(range(0, 150, 20), color='magenta')\n\n# Set the color of the x-axis tick lines\nax.tick_params(axis='x', colors='yellow')\n\n# Set the color of the y-axis tick lines\nax.tick_params(axis='y', colors='pink')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('cyan')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('magenta')\n\n# Set the color of the title\nax.title.set_color('brown')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['0.0', '0.2', '0.4', '0.6', '0.8', '1.0'], color='cyan')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(range(0, 150, 20), color='magenta')\n\n# Set the color of the x-axis tick lines\nax.tick_params(axis='x', colors='yellow')\n\n# Set the color of the y-axis tick lines\nax.tick_params(axis='y', colors='pink')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('cyan')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('magenta')\n\n# Set the color of the title\nax.title.set_color('brown')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['0.0', '0.2', '0.4', '0.6', '0.8', '1.0'], color='cyan')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(range(0, 150, 20), color='magenta')\n\n# Set the color of the x-axis tick lines\nax.tick_params(axis='x', colors='yellow')\n\n# Set the color of the y-axis tick lines\nax.tick_params(axis='y', colors='pink')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('cyan')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('magenta')\n\n# Set the color of the title\nax.title.set_color('brown')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['0.0', '0.2', '0.4', '0.6', '0.8', '1.0'], color='cyan')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(range(0, 150, 20), color='magenta')\n\n# Set the color of the x-axis tick lines\nax.tick_params(axis='x', colors='yellow')\n\n# Set the color of the y-axis tick lines\nax.tick_params(axis='y', colors='pink')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('cyan')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('magenta')\n\n# Set the color of the title\nax.title.set_color('brown')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['0.0', '0.2', '0.4', '0.6', '0.8', '1.0'], color='cyan')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(range(0, 150, 20), color='magenta')\n\n# Set the color of the x-axis tick lines\nax.tick_params(axis='x', colors='yellow')\n\n# Set the color of the y-axis tick lines\nax.tick_params(axis='y', colors='pink')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('cyan')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('magenta')\n\n# Set the color of the title\nax.title.set_color('brown')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['0.0', '0.2', '0.4', '0.6', '0.8', '1.0'], color='cyan')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(range(0, 15"}
{"file": "dataset/ori_500/hist_18.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(12.0, 8.0))\n\n# Set the x-axis limits\nax.set_xlim(0, 300)\n\n# Set the y-axis limits\nax.set_ylim(0, 25)\n\n# Set the x-axis ticks\nax.set_xticks([0, 50, 100, 150, 200, 250, 300])\n\n# Set the y-axis ticks\nax.set_yticks([0, 5, 10, 15, 20, 25])\n\n# Set the x-axis label\nax.set_xlabel('Number of Nominations')\n\n# Set the y-axis label\nax.set_ylabel('Grammy Year')\n\n# Set the title\nax.set_title('Histogram of Grammy Nominations Across Expanded Categories 2019-2023')\n\n# Define the categories\ncategories = ['Record of the Year', 'Album of the Year', 'Song of the Year', 'Best New Artist', 'Best Pop Solo Performance']\n\n# Define the colors for each category\ncolors = ['pink', 'orange', 'gold', 'pink', 'yellow']\n\n# Define the number of nominations for each category\nnominations = [10, 15, 20, 25, 30]\n\n# Define the years for each category\nyears = [2019, 2020, 2021, 2022, 2023]\n\n# Plot the histogram\nfor i in range(len(categories)):\n    ax.barh(years[i], nominations[i], color=colors[i], label=categories[i])\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_19.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 7))\n\n# Set the title of the plot\nax.set_title('MNIST - Defect Detection')\n\n# Define the data for the histogram\ndata = [np.random.normal(0, std, 1000) for std in range(1, 4)]\n\n# Plot the histograms\nfor d in data:\n    ax.hist(d, bins=30, alpha=0.5)\n\n# Set the x-axis label\nax.set_xlabel('Defect Size')\n\n# Set the y-axis label\nax.set_ylabel('Frequency')\n\n# Set the color bar\ncbar = fig.colorbar(ax.images[0])\ncbar.set_label('Defect Type')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nx = [0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0]\ny1 = [20, 30, 40, 50, 60, 70, 80]\ny2 = [10, 20, 30, 40, 50, 60, 70]\ny3 = [15, 25, 35, 45, 55, 65, 75]\ny4 = [12, 22, 32, 42, 52, 62, 72]\ny5 = [18, 28, 38, 48, 58, 68, 78]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(9.0, 6.0))\n\n# Plot the data\nax.plot(x, y1, label='SAM-dependent methyltransferase')\nax.plot(x, y2, label='Thioredoxin-like')\nax.plot(x, y3, label='Tetratricopeptide-like helical domain')\nax.plot(x, y4, label='CheY-like')\n\n# Set the title and labels\nax.set_title('Gene Expression Over Time')\nax.set_xlabel('Time (minutes)')\nax.set_ylabel('Gene Expression (TM-score)')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_20.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 8))\n\n# Set the title of the plot\nax.set_title('a')\n\n# Create a bar chart with random data\nax.bar(range(1, 6), [0.5, 0.7, 0.9, 1.1, 1.3], color='blue')\nax.bar(range(1, 6), [0.4, 0.6, 0.8, 1.0, 1.2], color='orange')\n\n# Set the x-axis label\nax.set_xlabel('Sweetness')\n\n# Set the y-axis label\nax.set_ylabel('Density')\n\n# Create a second subplot\nfig, ax = plt.subplots(figsize=(10, 8))\n\n# Set the title of the plot\nax.set_title('b')\n\n# Create a bar chart with random data\nax.bar(range(1, 6), [0.5, 0.7, 0.9, 1.1, 1.3], color='blue')\nax.bar(range(1, 6), [0.4, 0.6, 0.8, 1.0, 1.2], color='orange')\n\n# Set the x-axis label\nax.set_xlabel('Sweetness')\n\n# Set the y-axis label\nax.set_ylabel('Density')\n\n# Create a third subplot\nfig, ax = plt.subplots(figsize=(10, 8))\n\n# Set the title of the plot\nax.set_title('c')\n\n# Create a bar chart with random data\nax.bar(range(1, 6), [0.5, 0.7, 0.9, 1.1, 1.3], color='blue')\nax.bar(range(1, 6), [0.4, 0.6, 0.8, 1.0, 1.2], color='orange')\n\n# Set the x-axis label\nax.set_xlabel('Sweetness')\n\n# Set the y-axis label\nax.set_ylabel('Density')\n\n# Create a fourth subplot\nfig, ax = plt.subplots(figsize=(10, 8))\n\n# Set the title of the plot\nax.set_title('d')\n\n# Create a bar chart with random data\nax.bar(range(1, 6), [0.5, 0.7, 0.9, 1.1, 1.3], color='blue')\nax.bar(range(1, 6), [0.4, 0.6, 0.8, 1.0, 1.2], color='orange')\n\n# Set the x-axis label\nax.set_xlabel('Sweetness')\n\n# Set the y-axis label\nax.set_ylabel('Density')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the bar chart\nx = [0.00, 0.05, 0.10, 0.15]\ny = [1000, 100, 10, 1]\n\n# Create a bar chart\nplt.bar(x, y, color='brown')\n\n# Add labels and title\nplt.xlabel('Concept Weight')\nplt.ylabel('Count')\nplt.title('CIFAR100 \\'Desert\\' Concept')\n\n# Add a legend\nplt.legend(['Class', 'Camel', 'Kangaroo'], loc='upper right')\n\n# Set the x-axis limits\nplt.xlim(0, 0.2)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_4.pdf", "response": "import matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(5.0, 3.0))\n\n# Set the title of the plot\nax.set_title('Histogram of Distance vs. Center')\n\n# Set the x-axis label\nax.set_xlabel('Distance Difference (Random vs. Center)')\n\n# Set the y-axis label\nax.set_ylabel('Number of Examples')\n\n# Create a histogram with 10 bins\nax.hist([20, 40, 60, 80, 100], bins=10, color='orange', alpha=0.7)\n\n# Set the x-axis limits\nax.set_xlim(-5, 10)\n\n# Set the y-axis limits\nax.set_ylim(0, 100)\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/hist_5.pdf", "response": "import matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(4.0, 3.0))\n\n# Set the title of the plot\nax.set_title('Number of Clusters')\n\n# Set the x-axis label\nax.set_xlabel('Number of Repetition')\n\n# Set the y-axis label\nax.set_ylabel('Number of Clusters')\n\n# Create a bar chart with the data\nax.bar([0, 2.5, 5, 7.5, 10], [1200, 1100, 900, 600, 300], color='orange')\n\n# Set the x-axis limits\nax.set_xlim(0, 12.5)\n\n# Set the y-axis limits\nax.set_ylim(0, 1500)\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/hist_6.pdf", "response": "import matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(5.0, 3.0))\n\n# Define the data\nx = [0, 1, 2, 3, 4]\ny_correct = [400, 300, 200, 100, 0]\ny_misclassified = [350, 250, 150, 50, 0]\n\n# Plot the data\nax.plot(x, y_correct, color='blue', label='Correctly classified')\nax.plot(x, y_misclassified, color='orange', label='Misclassified')\n\n# Set the title and labels\nax.set_title('Classification Accuracy Over Time')\nax.set_xlabel('Distance to threshold')\nax.set_ylabel('Accuracy')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/hist_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Set the title of the plot\nax.set_title('Cascade')\n\n# Set the x-axis label\nax.set_xlabel('Confidence in bin')\n\n# Set the y-axis label\nax.set_ylabel('Accuracy in bin')\n\n# Set the x-ticks\nax.set_xticks([0.0, 0.2, 0.4, 0.6, 0.8, 1.0])\n\n# Set the y-ticks\nax.set_yticks([0.0, 0.2, 0.4, 0.6, 0.8, 1.0])\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.3, 0.7), 0.4, 0.3, color='saddlebrown'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.5, 0.5), 0.4, 0.3, color='saddlebrown'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.7, 0.3), 0.4, 0.3, color='saddlebrown'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.9, 0.1), 0.4, 0.3, color='saddlebrown'))\n\n# Draw a line\nax.plot([0.3, 0.9], [0.7, 0.1], 'k-')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 5.0))\n\n# Set the title of the plot\nax.set_title('Number of Queries Overlap')\n\n# Set the x-axis label\nax.set_xlabel('% images overlap')\n\n# Set the y-axis label\nax.set_ylabel('Number of queries')\n\n# Set the x-axis limits\nax.set_xlim(0, 1)\n\n# Set the y-axis limits\nax.set_ylim(0, 6000)\n\n# Set the x-axis ticks\nax.set_xticks([0, 0.2, 0.4, 0.6, 0.8, 1])\n\n# Set the y-axis ticks\nax.set_yticks([0, 1000, 2000, 3000, 4000, 5000, 6000])\n\n# Set the x-axis tick labels\nax.set_xticklabels(['0', '0.2', '0.4', '0.6', '0.8', '1'])\n\n# Set the y-axis tick labels\nax.set_yticklabels(['0', '1000', '2000', '3000', '4000', '5000', '6000'])\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('blue')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('lightblue')\n\n# Set the color of the text\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the title\nax.title.set_color('blue')\n\n# Set the color of the labels\nax.xaxis.label.set_color('blue')\nax.yaxis.label.set_color('blue')\n\n# Set the color of the ticks\nax.tick_params(axis='x', colors='blue')\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('lightblue')\n\n# Set the color of the text\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the title\nax.title.set_color('blue')\n\n# Set the color of the labels\nax.xaxis.label.set_color('blue')\nax.yaxis.label.set_color('blue')\n\n# Set the color of the ticks\nax.tick_params(axis='x', colors='blue')\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('lightblue')\n\n# Set the color of the text\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the title\nax.title.set_color('blue')\n\n# Set the color of the labels\nax.xaxis.label.set_color('blue')\nax.yaxis.label.set_color('blue')\n\n# Set the color of the ticks\nax.tick_params(axis='x', colors='blue')\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('lightblue')\n\n# Set the color of the text\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the title\nax.title.set_color('blue')\n\n# Set the color of the labels\nax.xaxis.label.set_color('blue')\nax.yaxis.label.set_color('blue')\n\n# Set the color of the ticks\nax.tick_params(axis='x', colors='blue')\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('lightblue')\n\n# Set the color of the text\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the title\nax.title.set_color('blue')\n\n# Set the color of the labels\nax.xaxis.label.set_color('blue')\nax.yaxis.label.set_color('blue')\n\n# Set the color of the ticks\nax.tick_params(axis='x', colors='blue')\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('lightblue')\n\n# Set the color of the text\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the title\nax.title.set_color('blue')\n\n# Set the color of the labels\nax.xaxis.label.set_color('blue')\nax.yaxis.label.set_color('blue')\n\n# Set the color of the ticks\nax.tick_params(axis='x', colors='blue')\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('lightblue')\n\n# Set the color of the text\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the title\nax.title.set_color('blue')\n\n# Set the color of the labels\nax.xaxis.label.set_color('blue')\nax.yaxis.label.set_color('blue')\n\n# Set the color of the ticks\nax.tick_params(axis='x', colors='blue')\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('lightblue')\n\n# Set the color of the text\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the title\nax.title.set_color('blue')\n\n# Set the color of the labels\nax.xaxis.label.set_color('blue')\nax.yaxis.label.set_color('blue')\n\n# Set the color of the ticks\nax.tick_params(axis='x', colors='blue')\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('lightblue')\n\n# Set the color of the text\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the title\nax.title.set_color('blue')\n\n# Set the color of the labels\nax.xaxis.label.set_color('blue')\nax.yaxis.label.set_color('blue')\n\n# Set the color of the ticks\nax.tick_params(axis='x', colors='blue')\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('lightblue')\n\n# Set the color of the text\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the title\nax.title.set_color('blue')\n\n# Set the color of the labels\nax.xaxis.label.set_color('blue')\nax.yaxis.label.set_color('blue')\n\n# Set the color of the ticks\nax.tick_params(axis='x', colors='blue')\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('lightblue')\n\n# Set the color of the text\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the title\nax.title.set_color('blue')\n\n# Set the color of the labels\nax.xaxis.label.set_color('blue')\nax.yaxis.label.set_color('blue')\n\n# Set the color of the ticks\nax.tick_params(axis='x', colors='blue')\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('lightblue')\n\n# Set the color of the text\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the title\nax.title.set_color('blue')\n\n# Set the color of the labels\nax.xaxis.label.set_color('blue')\nax.yaxis.label.set_color('blue')\n\n# Set the color of the ticks\nax.tick_params(axis='x', colors='blue')\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('lightblue')\n\n# Set the color of the text\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the title\nax.title.set_color('blue')\n\n# Set the color of the labels\nax.xaxis.label.set_color('blue')\nax.yaxis.label.set_color('blue')\n\n# Set the color of the ticks\nax.tick_params(axis='x', colors='blue')\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('lightblue')\n\n# Set the color of the text\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the title\nax.title.set_color('blue')\n\n# Set the color of the labels\nax.xaxis.label.set_color('blue')\nax.yaxis.label.set_color('blue')\n\n# Set the color of the ticks\nax.tick_params(axis='x', colors='blue')\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('lightblue')\n\n# Set the color of the text\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the title\nax.title.set_color('blue')\n\n# Set the color of the labels\nax.xaxis.label.set_color('blue')\nax.yaxis.label.set_color('blue')\n\n# Set the color of the ticks\nax.tick_params(axis='x', colors='blue')\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('lightblue')\n\n# Set the color of the text\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the title\nax.title.set_color('blue')\n\n# Set the color of the labels\nax.xaxis.label.set_color('blue')\nax.yaxis.label.set_color('blue')\n\n# Set the color of the ticks\nax.tick_params(axis='x', colors='blue')\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('lightblue')\n\n# Set the color of the text\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the title\nax.title.set_color('blue')\n\n# Set the color of the labels\nax.xaxis.label.set_color('blue')\nax.yaxis.label.set_color('blue')\n\n# Set the color of the ticks\nax.tick_params(axis='x', colors='blue')\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('lightblue')\n\n# Set the color of the text\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the title\nax.title.set_color('blue')\n\n# Set the color of the labels\nax.xaxis.label.set_color('blue')\nax.yaxis.label.set_color('blue')\n\n# Set the color of the ticks\nax.tick_params(axis='x', colors='blue')\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('lightblue')\n\n# Set the color of the text\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the title\nax.title.set_color('blue')\n\n# Set the color of the labels\nax.xaxis.label.set_color('blue')\nax.yaxis.label.set_color('blue')\n\n# Set the color of the ticks\nax.tick_params(axis='x', colors='blue')\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('lightblue')\n\n# Set the color of the text\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the title\nax.title.set_color('blue')\n\n# Set the color of the labels\nax.xaxis.label.set_color('blue')\nax.yaxis.label.set_color('blue')\n\n# Set the color of the ticks\nax.tick_params(axis='x', colors='blue')\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('lightblue')\n\n# Set the color of the text\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the title\nax.title.set_color('blue')\n\n# Set the color of the labels\nax.xaxis.label.set_color('blue')\nax.yaxis.label.set_color('blue')\n\n# Set the color of the ticks\nax.tick_params(axis='x', colors='blue')\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('lightblue')\n\n# Set the color of the text\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the title\nax.title.set_color('blue')\n\n# Set the color of the labels\nax.xaxis.label.set_color('blue')\nax.yaxis.label.set_color('blue')\n\n# Set the color of the ticks\nax.tick_params(axis='x', colors='blue')\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('lightblue')\n\n# Set the color of the text\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the title\nax.title.set_color('blue')\n\n# Set the color of the labels\nax.xaxis.label.set_color('blue')\nax.yaxis.label.set_color('blue')\n\n# Set the color of the ticks\nax.tick_params(axis='x', colors='blue')\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('lightblue')\n\n# Set the color of the text\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the title\nax.title.set_color('blue')\n\n# Set the color of the labels\nax.xaxis.label.set_color('blue')\nax.yaxis.label.set_color('blue')\n\n# Set the color of the ticks\nax.tick_params(axis='x', colors='blue')\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('lightblue')\n\n# Set the color of the text\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the title\nax.title.set_color('blue')\n\n# Set the color of the labels\nax.xaxis.label.set_color('blue')\nax.yaxis.label.set_color('blue')\n\n# Set the color of the ticks\nax.tick_params(axis='x', colors='blue')\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('lightblue')\n\n# Set the color of the text\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the title\nax.title.set_color('blue')\n\n# Set the color of the labels\nax.xaxis.label.set_color('blue')\nax.yaxis.label.set_color('blue')\n\n# Set the color of the ticks\nax.tick_params(axis='x', colors='blue')\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('lightblue')\n\n# Set the color of the text\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the title\nax.title.set_color('blue')\n\n# Set the color of the labels\nax.xaxis.label.set_color('blue')\nax.yaxis.label.set_color('blue')\n\n# Set the color of the ticks\nax.tick_params(axis='x', colors='blue')\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('lightblue')\n\n# Set the color of the text\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the title\nax.title.set_color('blue')\n\n# Set the color of the labels\nax.xaxis.label.set_color('blue')\nax.yaxis.label.set_color('blue')\n\n# Set the color of the ticks\nax.tick_params(axis='x', colors='blue')\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('lightblue')\n\n# Set the color of the text\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the title\nax.title.set_color('blue')\n\n# Set the color of the labels\nax.xaxis.label.set_color('"}
{"file": "dataset/ori_500/hist_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 7))\n\n# Set the title of the plot\nax.set_title('MNIST')\n\n# Create a histogram with 50 bins\nax.hist(np.random.randn(1000), bins=50)\n\n# Set the x-axis limits\nax.set_xlim([0, 0.25])\n\n# Set the y-axis limits\nax.set_ylim([0, 500])\n\n# Create a second subplot\nax2 = fig.add_subplot(212)\n\n# Set the title of the second plot\nax2.set_title('FashionMNIST')\n\n# Create a histogram with 50 bins\nax2.hist(np.random.randn(1000), bins=50)\n\n# Set the x-axis limits\nax2.set_xlim([0, 0.25])\n\n# Set the y-axis limits\nax2.set_ylim([0, 500])\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nx = [5, 10, 15, 20]\ny1 = [90, 80, 70, 60]\ny2 = [80, 70, 60, 50]\ny3 = [70, 60, 50, 40]\ny4 = [60, 50, 40, 30]\ny5 = [50, 40, 30, 20]\n\n# Plot\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\nax.plot(x, y1, 'r-', label='DEEPJSCC w/o ofdm')\nax.plot(x, y2, 'g-', label='DEEPJSCC w/ ofdm')\nax.plot(x, y3, 'b-', label='JPEG+LDPC')\nax.plot(x, y4, 'y-', label='OURS')\nax.plot(x, y5, 'm-', label='DEEPJSCC w/ ofdm')\n\n# Markers\nax.plot(5, 90, 'gx')\nax.plot(10, 80, 'rx')\nax.plot(15, 70, 'bx')\nax.plot(20, 60, 'mx')\n\n# Legend\nax.legend()\n\n# Labels\nax.set_xlabel('SNR')\nax.set_ylabel('Classification Accuracy (%)')\n\n# Title\nax.set_title('Performance Comparison')\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the graph\nax.set_title('Performance Gain (%)')\n\n# Set the x-axis label\nax.set_xlabel('n')\n\n# Set the y-axis label\nax.set_ylabel('Performance Gain (%)')\n\n# Set the grid\nax.grid(True)\n\n# Set the x-ticks\nax.set_xticks([0, 1, 2, 3, 4, 5, 6, 7, 8])\n\n# Set the y-ticks\nax.set_yticks([0, 1, 2, 3, 4, 5, 6])\n\n# Plot the data\nax.plot([0, 1, 2, 3, 4, 5, 6, 7, 8], [0, 1, 2, 3, 4, 5, 6, 7, 8], 'b-')\nax.plot([0, 1, 2, 3, 4, 5, 6, 7, 8], [0, 1, 2, 3, 4, 5, 6, 7, 8], 'r-')\nax.plot([0, 1, 2, 3, 4, 5, 6, 7, 8], [0, 1, 2, 3, 4, 5, 6, 7, 8], 'g-')\nax.plot([0, 1, 2, 3, 4, 5, 6, 7, 8], [0, 1, 2, 3, 4, 5, 6, 7, 8], 'y-')\nax.plot([0, 1, 2, 3, 4, 5, 6, 7, 8], [0, 1, 2, 3, 4, 5, 6, 7, 8], 'c-')\nax.plot([0, 1, 2, 3, 4, 5, 6, 7, 8], [0, 1, 2, 3, 4, 5, 6, 7, 8], 'm-')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Effect of Vocab on Zero Shot Accuracy')\n\n# Set the x-axis label\nax.set_xlabel('Deposition IO Norm')\n\n# Set the y-axis label\nax.set_ylabel('Accuracy')\n\n# Set the x-axis limits\nax.set_xlim(0, 80)\n\n# Set the y-axis limits\nax.set_ylim(0.55, 0.75)\n\n# Set the x-axis ticks\nax.set_xticks([0, 20, 40, 60, 80])\n\n# Set the y-axis ticks\nax.set_yticks([0.55, 0.60, 0.65, 0.70, 0.75])\n\n# Draw a horizontal line at the top of the plot\nax.axhline(y=0.75, color='black', linestyle='-')\n\n# Draw a horizontal line at the bottom of the plot\nax.axhline(y=0.55, color='black', linestyle='-')\n\n# Draw a vertical line at the left of the plot\nax.axvline(x=0, color='black', linestyle='-')\n\n# Draw a vertical line at the right of the plot\nax.axvline(x=80, color='black', linestyle='-')\n\n# Draw a rectangle with a black border\nax.add_patch(plt.Rectangle((0, 0), 80, 0.75, fill=False, edgecolor='black'))\n\n# Add a colored rectangle for each word\nax.add_patch(plt.Rectangle((0, 0.75), 10, 0.1, fill=True, color='red'))\nax.add_patch(plt.Rectangle((10, 0.75), 10, 0.1, fill=True, color='green'))\nax.add_patch(plt.Rectangle((20, 0.75), 10, 0.1, fill=True, color='blue'))\nax.add_patch(plt.Rectangle((30, 0.75), 10, 0.1, fill=True, color='orange'))\nax.add_patch(plt.Rectangle((40, 0.75), 10, 0.1, fill=True, color='yellow'))\n\n# Add a colored rectangle for CLIP\nax.add_patch(plt.Rectangle((50, 0.75), 30, 0.1, fill=True, color='black'))\n\n# Add a colored rectangle for CLIP\nax.add_patch(plt.Rectangle((50, 0.65), 30, 0.1, fill=True, color='black'))\n\n# Add a colored rectangle for CLIP\nax.add_patch(plt.Rectangle((50, 0.55), 30, 0.1, fill=True, color='black'))\n\n# Add a colored rectangle for CLIP\nax.add_patch(plt.Rectangle((50, 0.45), 30, 0.1, fill=True, color='black'))\n\n# Add a colored rectangle for CLIP\nax.add_patch(plt.Rectangle((50, 0.35), 30, 0.1, fill=True, color='black'))\n\n# Add a colored rectangle for CLIP\nax.add_patch(plt.Rectangle((50, 0.25), 30, 0.1, fill=True, color='black'))\n\n# Add a colored rectangle for CLIP\nax.add_patch(plt.Rectangle((50, 0.15), 30, 0.1, fill=True, color='black'))\n\n# Add a colored rectangle for CLIP\nax.add_patch(plt.Rectangle((50, 0.05), 30, 0.1, fill=True, color='black'))\n\n# Add a colored rectangle for CLIP\nax.add_patch(plt.Rectangle((50, -0.05), 30, 0.1, fill=True, color='black'))\n\n# Add a colored rectangle for CLIP\nax.add_patch(plt.Rectangle((50, -0.15), 30, 0.1, fill=True, color='black'))\n\n# Add a colored rectangle for CLIP\nax.add_patch(plt.Rectangle((50, -0.25), 30, 0.1, fill=True, color='black'))\n\n# Add a colored rectangle for CLIP\nax.add_patch(plt.Rectangle((50, -0.35), 30, 0.1, fill=True, color='black'))\n\n# Add a colored rectangle for CLIP\nax.add_patch(plt.Rectangle((50, -0.45), 30, 0.1, fill=True, color='black'))\n\n# Add a colored rectangle for CLIP\nax.add_patch(plt.Rectangle((50, -0.55), 30, 0.1, fill=True, color='black'))\n\n# Add a colored rectangle for CLIP\nax.add_patch(plt.Rectangle((50, -0.65), 30, 0.1, fill=True, color='black'))\n\n# Add a colored rectangle for CLIP\nax.add_patch(plt.Rectangle((50, -0.75), 30, 0.1, fill=True, color='black'))\n\n# Add a colored rectangle for CLIP\nax.add_patch(plt.Rectangle((50, -0.85), 30, 0.1, fill=True, color='black'))\n\n# Add a colored rectangle for CLIP\nax.add_patch(plt.Rectangle((50, -0.95), 30, 0.1, fill=True, color='black'))\n\n# Add a colored rectangle for CLIP\nax.add_patch(plt.Rectangle((50, -1.05), 30, 0.1, fill=True, color='black'))\n\n# Add a colored rectangle for CLIP\nax.add_patch(plt.Rectangle((50, -1.15), 30, 0.1, fill=True, color='black'))\n\n# Add a colored rectangle for CLIP\nax.add_patch(plt.Rectangle((50, -1.25), 30, 0.1, fill=True, color='black'))\n\n# Add a colored rectangle for CLIP\nax.add_patch(plt.Rectangle((50, -1.35), 30, 0.1, fill=True, color='black'))\n\n# Add a colored rectangle for CLIP\nax.add_patch(plt.Rectangle((50, -1.45), 30, 0.1, fill=True, color='black'))\n\n# Add a colored rectangle for CLIP\nax.add_patch(plt.Rectangle((50, -1.55), 30, 0.1, fill=True, color='black'))\n\n# Add a colored rectangle for CLIP\nax.add_patch(plt.Rectangle((50, -1.65), 30, 0.1, fill=True, color='black'))\n\n# Add a colored rectangle for CLIP\nax.add_patch(plt.Rectangle((50, -1.75), 30, 0.1, fill=True, color='black'))\n\n# Add a colored rectangle for CLIP\nax.add_patch(plt.Rectangle((50, -1.85), 30, 0.1, fill=True, color='black'))\n\n# Add a colored rectangle for CLIP\nax.add_patch(plt.Rectangle((50, -1.95), 30, 0.1, fill=True, color='black'))\n\n# Add a colored rectangle for CLIP\nax.add_patch(plt.Rectangle((50, -2.05), 30, 0.1, fill=True, color='black'))\n\n# Add a colored rectangle for CLIP\nax.add_patch(plt.Rectangle((50, -2.15), 30, 0.1, fill=True, color='black'))\n\n# Add a colored rectangle for CLIP\nax.add_patch(plt.Rectangle((50, -2.25), 30, 0.1, fill=True, color='black'))\n\n# Add a colored rectangle for CLIP\nax.add_patch(plt.Rectangle((50, -2.35), 30, 0.1, fill=True, color='black'))\n\n# Add a colored rectangle for CLIP\nax.add_patch(plt.Rectangle((50, -2.45), 30, 0.1, fill=True, color='black'))\n\n# Add a colored rectangle for CLIP\nax.add_patch(plt.Rectangle((50, -2.55), 30, 0.1, fill=True, color='black'))\n\n# Add a colored rectangle for CLIP\nax.add_patch(plt.Rectangle((50, -2.65), 30, 0.1, fill=True, color='black'))\n\n# Add a colored rectangle for CLIP\nax.add_patch(plt.Rectangle((50, -2.75), 30, 0.1, fill=True, color='black'))\n\n# Add a colored rectangle for CLIP\nax.add_patch(plt.Rectangle((50, -2.85), 30, 0.1, fill=True, color='black'))\n\n# Add a colored rectangle for CLIP\nax.add_patch(plt.Rectangle((50, -2.95), 30, 0.1, fill=True, color='black'))\n\n# Add a colored rectangle for CLIP\nax.add_patch(plt.Rectangle((50, -3.05), 30, 0.1, fill=True, color='black'))\n\n# Add a colored rectangle for CLIP\nax.add_patch(plt.Rectangle((50, -3.15), 30, 0.1, fill=True, color='black'))\n\n# Add a colored rectangle for CLIP\nax.add_patch(plt.Rectangle((50, -3.25), 30, 0.1, fill=True, color='black'))\n\n# Add a colored rectangle for CLIP\nax.add_patch(plt.Rectangle((50, -3.35), 30, 0.1, fill=True, color='black'))\n\n# Add a colored rectangle for CLIP\nax.add_patch(plt.Rectangle((50, -3.45), 30, 0.1, fill=True, color='black'))\n\n# Add a colored rectangle for CLIP\nax.add_patch(plt.Rectangle((50, -3.55), 30, 0.1, fill=True, color='black'))\n\n# Add a colored rectangle for CLIP\nax.add_patch(plt.Rectangle((50, -3.65), 30, 0.1, fill=True, color='black'))\n\n# Add a colored rectangle for CLIP\nax.add_patch(plt.Rectangle((50, -3.75), 30, 0.1, fill=True, color='black'))\n\n# Add a colored rectangle for CLIP\nax.add_patch(plt.Rectangle((50, -3.85), 30, 0.1, fill=True, color='black'))\n\n# Add a colored rectangle for CLIP\nax.add_patch(plt.Rectangle((50, -3.95), 30, 0.1, fill=True, color='black'))\n\n# Add a colored rectangle for CLIP\nax.add_patch(plt.Rectangle((50, -4.05), 30, 0.1, fill=True, color='black'))\n\n# Add a colored rectangle for CLIP\nax.add_patch(plt.Rectangle((50, -4.15), 30, 0.1, fill=True, color='black'))\n\n# Add a colored rectangle for CLIP\nax.add_patch(plt.Rectangle((50, -4.25), 30, 0.1, fill=True, color='black'))\n\n# Add a colored rectangle for CLIP\nax.add_patch(plt.Rectangle((50, -4.35), 30, 0.1, fill=True, color='black'))\n\n# Add a colored rectangle for CLIP\nax.add_patch(plt.Rectangle((50, -4.45), 30, 0.1, fill=True, color='black'))\n\n# Add a colored rectangle for CLIP\nax.add_patch(plt.Rectangle((50, -4.55), 30, 0.1, fill=True, color='black'))\n\n# Add a colored rectangle for CLIP\nax.add_patch(plt.Rectangle((50, -4.65), 30, 0.1, fill=True, color='black'))\n\n# Add a colored rectangle for CLIP\nax.add_patch(plt.Rectangle((50, -4.75), 30, 0.1, fill=True, color='black'))\n\n# Add a colored rectangle for CLIP\nax.add_patch(plt.Rectangle((50, -4.85), 30, 0.1, fill=True, color='black'))\n\n# Add a colored rectangle for CLIP\nax.add_patch(plt.Rectangle((50, -4.95), 30, 0.1, fill=True, color='black'))\n\n# Add a colored rectangle for CLIP\nax.add_patch(plt.Rectangle((50, -5.05), 30, 0.1, fill=True, color='black'))\n\n# Add a colored rectangle for CLIP\nax.add_patch(plt.Rectangle((50, -5.15), 30, 0.1, fill=True, color='black'))\n\n# Add a colored rectangle for CLIP\nax.add_patch(plt.Rectangle((50, -5.25), 30, 0.1, fill=True, color='black'))\n\n# Add a colored rectangle for CLIP\nax.add_patch(plt.Rectangle((50, -5.35), 30, 0.1, fill=True, color='black'))\n\n# Add a colored rectangle for CLIP\nax.add_patch(plt.Rectangle((50, -5.45), 30, 0.1, fill=True, color='black'))\n\n# Add a colored rectangle for CLIP\nax.add_patch(plt.Rectangle((50, -5.55), 30, 0.1, fill=True, color='black'))\n\n# Add a colored rectangle for CLIP\nax.add_patch(plt.Rectangle((50, -5.65), 30, 0.1, fill=True, color='black'))\n\n# Add a colored rectangle for CLIP\nax.add_patch(plt.Rectangle((50, -5.75), 30, 0.1, fill=True, color='black'))\n\n# Add a colored rectangle for CLIP\nax.add_patch(plt.Rectangle((50, -5.85), 30, 0.1, fill=True, color='black'))\n\n# Add a colored rectangle for CLIP\nax.add_patch(plt.Rectangle((50, -5.95), 30, 0.1, fill=True, color='black'))\n\n# Add a colored rectangle for CLIP\nax.add_patch(plt.Rectangle((50, -6.05), 30, 0.1, fill=True, color='black'))\n\n# Add a colored rectangle for CLIP\nax.add_patch(plt.Rectangle((50, -6.15), 30, 0.1, fill=True, color='black'))\n\n# Add a colored rectangle for CLIP\nax.add_patch(plt.Rectangle((50, -6.25), 30, 0.1, fill=True, color='black'))\n\n# Add a colored rectangle for CLIP\nax.add_patch(plt.Rectangle((50, -6.35), 30, 0.1, fill=True, color='black'))\n\n# Add a colored rectangle for CLIP\nax.add_patch(plt.Rectangle((50, -6.45), 30, 0.1, fill=True, color='black'))\n\n# Add a colored rectangle for CLIP\nax.add_patch(plt.Rectangle((50, -6.55), 30, 0.1, fill=True, color='black'))\n\n# Add a colored rectangle for CLIP\nax.add_patch(plt.Rectangle((50, -6.65), 30, 0.1, fill=True, color='black'))\n\n# Add a colored rectangle for CLIP\nax.add_patch(plt.Rectangle((50, -6.75), 30, 0.1, fill=True, color='black'))\n\n# Add a colored rectangle for CLIP\nax.add_patch(plt.Rectangle((50, -6.85), 30, 0.1, fill=True, color='black'))\n\n# Add a colored rectangle for CLIP\nax.add_patch(plt.Rectangle((50, -6.95), 30, 0.1, fill=True, color='black'))\n\n# Add a colored rectangle for CLIP\nax.add_patch(plt.Rectangle((50, -7.05), 30, 0.1, fill=True, color='black'))\n\n# Add a colored rectangle for CLIP\nax.add_patch(plt.Rectangle((50, -7.15), 30, 0.1, fill=True, color='black'))\n\n# Add a colored rectangle for CLIP\nax.add_patch(plt.Rectangle((50, -7.25), 30, 0.1, fill=True, color='black'))\n\n# Add a colored rectangle for CLIP\nax.add_patch(plt.Rectangle((50, -7.35), 30, 0.1, fill=True, color='black'))\n\n# Add a colored rectangle for CLIP\nax.add_patch(plt.Rectangle((50, -7.45), 30, 0.1, fill=True, color='black'))\n\n# Add a colored rectangle for CLIP\nax.add_patch(plt.Rectangle((50, -7.55), 30, 0.1, fill=True, color='black'))\n\n# Add a colored rectangle for CLIP\nax.add_patch(plt.Rectangle((50, -7.65), 30, 0.1, fill=True, color='black'))\n\n# Add a colored rectangle for CLIP\nax.add_patch(plt.Rectangle((50, -7.75), 30, 0.1, fill=True, color='black'))\n\n# Add a colored rectangle for CLIP\nax.add_patch(plt.Rectangle((50, -7.85), 30, 0.1, fill=True, color='black'))\n\n# Add a colored rectangle for CLIP\nax.add_patch(plt"}
{"file": "dataset/ori_500/line_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Sample data\nx = [0.25, 0.5, 0.75, 1.0]\ny1 = [0.03, 0.04, 0.05, 0.06]\ny2 = [0.07, 0.08, 0.09, 0.1]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data\nax.plot(x, y1, 'r-', label='Sample Ratio')\nax.plot(x, y2, 'b-', label='Std of ACC')\n\n# Add markers at specific points\nax.plot(0.25, 0.03, 'r^', markersize=10)\nax.plot(0.5, 0.04, 'r^', markersize=10)\nax.plot(0.75, 0.05, 'r^', markersize=10)\nax.plot(1.0, 0.06, 'r^', markersize=10)\n\n# Set the title and labels\nax.set_title('Sample Ratio vs Std of ACC')\nax.set_xlabel('Sample Ratio')\nax.set_ylabel('Std of ACC')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 10.0))\n\n# Set the title of the plot\nax.set_title('Training Metrics')\n\n# Set the x-axis label\nax.set_xlabel('Training iterations')\n\n# Set the y-axis label\nax.set_ylabel('Metrics')\n\n# Plot the data\nax.plot([0, 25, 50, 75, 100, 125, 150, 175, 200], [0.5, 0.4, 0.3, 0.2, 0.1, 0.2, 0.3, 0.4, 0.5], color='blue', label='base')\nax.plot([0, 25, 50, 75, 100, 125, 150, 175, 200], [0.5, 0.4, 0.3, 0.2, 0.1, 0.2, 0.3, 0.4, 0.5], color='orange', label='ours')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Set the background color of the plot\nax.set_facecolor('#F5EFE7')\n\n# Set the title of the plot\nax.set_title('Real-time Stock Price', fontsize=14)\n\n# Set the x-axis label\nax.set_xlabel('Week', fontsize=12)\n\n# Set the y-axis label\nax.set_ylabel('Normalized Value', fontsize=12)\n\n# Set the x-ticks\nax.set_xticks([1, 4, 7, 10, 13, 16, 19, 22, 25, 28])\n\n# Set the y-ticks\nax.set_yticks([0, 0.25, 0.5, 0.75, 1])\n\n# Set the grid\nax.grid(True)\n\n# Plot the data\nax.plot([1, 4, 7, 10, 13, 16, 19, 22, 25, 28], [0.1, 0.3, 0.5, 0.7, 0.9, 0.7, 0.5, 0.3, 0.1, 0.05], 'b-')\nax.plot([1, 4, 7, 10, 13, 16, 19, 22, 25, 28], [0.1, 0.3, 0.5, 0.7, 0.9, 0.7, 0.5, 0.3, 0.1, 0.05], 'r-')\nax.plot([1, 4, 7, 10, 13, 16, 19, 22, 25, 28], [0.1, 0.3, 0.5, 0.7, 0.9, 0.7, 0.5, 0.3, 0.1, 0.05], 'g-')\n\n# Add text annotations\nax.text(1, 0.1, 'Auto-profiled', color='red', fontsize=10)\nax.text(4, 0.3, 'Manually-analyzed', color='blue', fontsize=10)\nax.text(7, 0.5, 'Realize the trend', color='red', fontsize=10)\nax.text(10, 0.7, 'Release new product', color='blue', fontsize=10)\nax.text(13, 0.9, 'Market analysis', color='green', fontsize=10)\nax.text(16, 0.7, 'Competitor analysis', color='red', fontsize=10)\nax.text(19, 0.5, 'Customer feedback', color='blue', fontsize=10)\nax.text(22, 0.3, 'Supply chain', color='green', fontsize=10)\nax.text(25, 0.1, 'Marketing', color='red', fontsize=10)\nax.text(28, 0.05, 'Sales', color='blue', fontsize=10)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Sample data\nx = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\ny1 = [95, 90, 85, 80, 75, 70, 65, 60, 55, 50, 45, 40, 35, 30, 25, 20, 15, 10, 5, 0]\ny2 = [85, 80, 75, 70, 65, 60, 55, 50, 45, 40, 35, 30, 25, 20, 15, 10, 5, 0, 5, 10]\ny3 = [75, 70, 65, 60, 55, 50, 45, 40, 35, 30, 25, 20, 15, 10, 5, 0, 5, 10, 15, 20]\ny4 = [65, 60, 55, 50, 45, 40, 35, 30, 25, 20, 15, 10, 5, 0, 5, 10, 15, 20, 25, 30]\ny5 = [55, 50, 45, 40, 35, 30, 25, 20, 15, 10, 5, 0, 5, 10, 15, 20, 25, 30, 35, 40]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data\nax.plot(x, y1, label='BaCE', color='blue')\nax.plot(x, y2, label='LWF', color='#FF6347')\nax.plot(x, y3, label='EWC', color='#C71585')\nax.plot(x, y4, label='SEQ', color='#FF69B4')\n\n# Set the title and labels\nax.set_title('Average Accuracy of Models')\nax.set_xlabel('Task')\nax.set_ylabel('Accuracy (%)')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_16.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nx = [0.0, 0.2, 0.4, 0.6, 0.8, 1.0]\ny1 = [0.99, 0.98, 0.97, 0.96, 0.95, 0.94]\ny2 = [0.96, 0.95, 0.94, 0.93, 0.92, 0.91]\ny3 = [0.93, 0.92, 0.91, 0.90, 0.89, 0.88]\n\n# Plotting\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\nax.plot(x, y1, 'b-', label='Oesense')\nax.plot(x, y2, 'r-', label='KWS')\nax.plot(x, y3, 'g-', label='ECG5000')\n\n# Markers\nax.plot(0.0, 0.99, 'bo')\nax.plot(0.2, 0.98, 'ro')\nax.plot(0.4, 0.97, 'go')\nax.plot(0.6, 0.96, 'bo')\nax.plot(0.8, 0.95, 'ro')\nax.plot(1.0, 0.94, 'go')\n\n# Legend\nax.legend()\n\n# Labels\nax.set_xlabel('Uncertainty threshold')\nax.set_ylabel('Accuracy')\n\n# Title\nax.set_title('Model Performance')\n\n# Grid\nax.grid(True)\n\nplt.show()\n```"}
{"file": "dataset/ori_500/line_17.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Set the title of the plot\nax.set_title('Log KL Divergence')\n\n# Set the x-axis label\nax.set_xlabel('Number of Parameters')\n\n# Set the y-axis label\nax.set_ylabel('Log KL Divergence')\n\n# Define the data points\nx = [0, 20, 40, 60, 80, 100, 120]\ny = [10**-5, 10**-3, 10**-2, 10**-2, 10**-3, 10**-3, 10**-4]\n\n# Plot the data points\nax.plot(x, y, 'bo-')\n\n# Set the limits of the x-axis\nax.set_xlim(0, 120)\n\n# Set the limits of the y-axis\nax.set_ylim(10**-5, 10**-4)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_18.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(9, 4))\n\n# Set the title of the graph\nax.set_title('GPT-4 Evaluation')\n\n# Set the x-axis label\nax.set_xlabel('Iterations')\n\n# Set the y-axis label\nax.set_ylabel('Attack Success Rate')\n\n# Create a rectangle for the background\nrect = plt.Rectangle((0, 0), 1, 1, fc='blue', alpha=0.5)\nax.add_patch(rect)\n\n# Create a line plot\nax.plot([0, 1000, 2000], [0.5, 0.8, 0.6], 'b-', lw=2)\n\n# Create a scatter plot\nax.scatter([0, 1000, 2000], [0.5, 0.8, 0.6], c='r', s=50)\n\n# Create a second subplot\nax2 = fig.add_subplot(122)\n\n# Set the title of the graph\nax2.set_title('Llama Guard Evaluation')\n\n# Set the x-axis label\nax2.set_xlabel('Iterations')\n\n# Set the y-axis label\nax2.set_ylabel('Attack Success Rate')\n\n# Create a rectangle for the background\nrect = plt.Rectangle((0, 0), 1, 1, fc='pink', alpha=0.5)\nax2.add_patch(rect)\n\n# Create a line plot\nax2.plot([0, 1000, 2000], [0.7, 0.9, 0.6], 'r-', lw=2)\n\n# Create a scatter plot\nax2.scatter([0, 1000, 2000], [0.7, 0.9, 0.6], c='b', s=50)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_19.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(5.0, 4.0))\n\n# Set the title of the plot\nax.set_title('Test Accuracy vs Fraction of Training Data')\n\n# Set the x-axis label\nax.set_xlabel('Fraction of training data (log scale)')\n\n# Set the y-axis label\nax.set_ylabel('Test accuracy (%)')\n\n# Define the data points for each model\nfull_data = [0.9, 0.8, 0.7, 0.6, 0.5]\nspt_data = [0.8, 0.7, 0.6, 0.5, 0.4]\nvpt_data = [0.7, 0.6, 0.5, 0.4, 0.3]\n\n# Plot the data points for each model\nax.plot(full_data, 'g-', label='Full')\nax.plot(spt_data, 'r-', label='SPT')\nax.plot(vpt_data, 'b-', label='VPT')\n\n# Add markers at each data point\nax.plot(full_data, 'go')\nax.plot(spt_data, 'ro')\nax.plot(vpt_data, 'bo')\n\n# Add a legend to the plot\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_2.pdf", "response": "import matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(4.0, 3.0))\n\n# Define the data\nx = [0, 50, 100, 150, 200]\ny1 = [1.5, 1.8, 1.2, 1.7, 1.9]\ny2 = [1.2, 1.6, 1.4, 1.3, 1.5]\ny3 = [1.8, 1.9, 1.7, 1.6, 1.5]\ny4 = [1.1, 1.3, 1.2, 1.4, 1.3]\n\n# Plot the data\nax.plot(x, y1, color='blue', label='Gradient 1')\nax.plot(x, y2, color='green', label='Gradient 2')\nax.plot(x, y3, color='orange', label='Gradient 3')\nax.plot(x, y4, color='red', label='Gradient 4')\n\n# Add a legend\nax.legend()\n\n# Set the title and labels\nax.set_title('Gradient Data')\nax.set_xlabel('Gradient Steps (x 62.5K)')\nax.set_ylabel('Gradient Value')\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/line_20.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(16.0, 8.0))\n\n# Set the title of the plot\nax.set_title('MOLHIV')\n\n# Set the x-axis label\nax.set_xlabel('Ratio r')\n\n# Set the y-axis label\nax.set_ylabel('Performance')\n\n# Set the x-axis limits\nax.set_xlim(0.2, 1.0)\n\n# Set the y-axis limits\nax.set_ylim(0.74, 0.88)\n\n# Draw horizontal lines\nfor i in range(3):\n    ax.axhline(y=0.74 + i * 0.02, color='gray', linestyle='-')\n\n# Draw vertical lines\nfor i in range(5):\n    ax.axvline(x=0.2 + i * 0.2, color='gray', linestyle='-')\n\n# Draw rectangles\nrects = [\n    [0.2, 0.78, 0.4, 0.02],\n    [0.4, 0.76, 0.2, 0.02],\n    [0.6, 0.74, 0.2, 0.02],\n    [0.8, 0.72, 0.2, 0.02]\n]\n\nfor rect in rects:\n    ax.add_patch(plt.Rectangle((rect[0], rect[1]), rect[2], rect[3], color='purple'))\n\n# Draw circles\ncircles = [\n    [0.2, 0.78],\n    [0.4, 0.76],\n    [0.6, 0.74],\n    [0.8, 0.72]\n]\n\nfor circle in circles:\n    ax.add_patch(plt.Circle((circle[0], circle[1]), 0.02, color='orange'))\n\n# Draw lines\nlines = [\n    [0.2, 0.78, 0.8, 0.78],\n    [0.4, 0.76, 0.6, 0.76],\n    [0.6, 0.74, 0.4, 0.74],\n    [0.8, 0.72, 0.2, 0.72]\n]\n\nfor line in lines:\n    ax.plot([line[0], line[2]], [line[1], line[3]], color='blue')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_21.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nx = [120, 90, 60, 30, 1]\ny1 = [85, 87, 88, 89, 90]\ny2 = [80, 82, 83, 84, 85]\n\n# Plot\nfig, ax = plt.subplots(figsize=(9.0, 6.0))\nax.plot(x, y1, 'b-', label='Ours')\nax.plot(x, y2, 'g-', label='ACR')\n\n# Markers\nfor xi, yi in zip(x, y1):\n    ax.plot(xi, yi, 'bo', markersize=10)\nfor xi, yi in zip(x, y2):\n    ax.plot(xi, yi, 'go', markersize=10)\n\n# Labels and Title\nax.set_xlabel('Imbalance Ratio of Unlabeled Data (%)')\nax.set_ylabel('Top-1 Acc (%)')\nax.set_title('Top-1 Accuracy vs Imbalance Ratio')\nax.legend()\n\n# Display\nplt.show()\n```"}
{"file": "dataset/ori_500/line_22.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nx = [40, 50, 60, 70, 80, 90, 100]\ny = [2.91, 3.11, 3.32, 3.53, 3.63, 3.74, 3.94]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(5.0, 4.0))\n\n# Plot the data\nax.plot(x, y, 'b-')\n\n# Set the title and labels\nax.set_title('Perplexity vs Ratio of 4-bit Utilization')\nax.set_xlabel('Ratio of 4-bit Utilization (%)')\nax.set_ylabel('Perplexity (PPL)')\n\n# Add a rectangle with a colored border\nrect = plt.Rectangle((0, 0), 1, 1, fc='w', ec='k', lw=2)\nax.add_patch(rect)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_23.pdf", "response": "import matplotlib.pyplot as plt\n\n# Data points\nx = [2**1, 2**2, 2**3, 2**4, 2**5, 2**6, 2**7]\ny = [82.98, 89.53, 90.47, 92.47, 93.7, 96.75, 98.5]\n\n# Plotting\nplt.figure(figsize=(5.0, 2.0))\nplt.plot(x, y, marker='o', linestyle='-', color='blue')\nplt.xlabel('Number of Training Objects')\nplt.ylabel('Coverage Ratio (%)')\nplt.title('Coverage Ratio vs Number of Training Objects')\nplt.grid(True)\nplt.show()"}
{"file": "dataset/ori_500/line_24.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6, 4))\n\n# Set the background color of the plot\nax.set_facecolor('lightblue')\n\n# Create a rectangle for the left side\nrect_left = plt.Rectangle((0, 0), 1, 750, facecolor='lightblue', alpha=0.5)\nax.add_patch(rect_left)\n\n# Create a rectangle for the right side\nrect_right = plt.Rectangle((8, 0), 1, 750, facecolor='lightblue', alpha=0.5)\nax.add_patch(rect_right)\n\n# Create a rectangle for the bottom\nrect_bottom = plt.Rectangle((0, 0), 9, 1, facecolor='lightblue', alpha=0.5)\nax.add_patch(rect_bottom)\n\n# Create a rectangle for the top\nrect_top = plt.Rectangle((0, 750), 9, 1, facecolor='lightblue', alpha=0.5)\nax.add_patch(rect_top)\n\n# Create a rectangle for the middle\nrect_middle = plt.Rectangle((2, 375), 5, 100, facecolor='lightblue', alpha=0.5)\nax.add_patch(rect_middle)\n\n# Create a rectangle for the bottom-left corner\nrect_bl_corner = plt.Rectangle((0, 0), 1, 1, facecolor='lightblue', alpha=0.5)\nax.add_patch(rect_bl_corner)\n\n# Create a rectangle for the bottom-right corner\nrect_br_corner = plt.Rectangle((8, 0), 1, 1, facecolor='lightblue', alpha=0.5)\nax.add_patch(rect_br_corner)\n\n# Create a rectangle for the top-left corner\nrect_tl_corner = plt.Rectangle((0, 750), 1, 1, facecolor='lightblue', alpha=0.5)\nax.add_patch(rect_tl_corner)\n\n# Create a rectangle for the top-right corner\nrect_tr_corner = plt.Rectangle((8, 750), 1, 1, facecolor='lightblue', alpha=0.5)\nax.add_patch(rect_tr_corner)\n\n# Create a rectangle for the bottom-left corner\nrect_bl_corner = plt.Rectangle((0, 0), 1, 1, facecolor='lightblue', alpha=0.5)\nax.add_patch(rect_bl_corner)\n\n# Create a rectangle for the bottom-right corner\nrect_br_corner = plt.Rectangle((8, 0), 1, 1, facecolor='lightblue', alpha=0.5)\nax.add_patch(rect_br_corner)\n\n# Create a rectangle for the top-left corner\nrect_tl_corner = plt.Rectangle((0, 750), 1, 1, facecolor='lightblue', alpha=0.5)\nax.add_patch(rect_tl_corner)\n\n# Create a rectangle for the top-right corner\nrect_tr_corner = plt.Rectangle((8, 750), 1, 1, facecolor='lightblue', alpha=0.5)\nax.add_patch(rect_tr_corner)\n\n# Create a rectangle for the bottom-left corner\nrect_bl_corner = plt.Rectangle((0, 0), 1, 1, facecolor='lightblue', alpha=0.5)\nax.add_patch(rect_bl_corner)\n\n# Create a rectangle for the bottom-right corner\nrect_br_corner = plt.Rectangle((8, 0), 1, 1, facecolor='lightblue', alpha=0.5)\nax.add_patch(rect_br_corner)\n\n# Create a rectangle for the top-left corner\nrect_tl_corner = plt.Rectangle((0, 750), 1, 1, facecolor='lightblue', alpha=0.5)\nax.add_patch(rect_tl_corner)\n\n# Create a rectangle for the top-right corner\nrect_tr_corner = plt.Rectangle((8, 750), 1, 1, facecolor='lightblue', alpha=0.5)\nax.add_patch(rect_tr_corner)\n\n# Create a rectangle for the bottom-left corner\nrect_bl_corner = plt.Rectangle((0, 0), 1, 1, facecolor='lightblue', alpha=0.5)\nax.add_patch(rect_bl_corner)\n\n# Create a rectangle for the bottom-right corner\nrect_br_corner = plt.Rectangle((8, 0), 1, 1, facecolor='lightblue', alpha=0.5)\nax.add_patch(rect_br_corner)\n\n# Create a rectangle for the top-left corner\nrect_tl_corner = plt.Rectangle((0, 750), 1, 1, facecolor='lightblue', alpha=0.5)\nax.add_patch(rect_tl_corner)\n\n# Create a rectangle for the top-right corner\nrect_tr_corner = plt.Rectangle((8, 750), 1, 1, facecolor='lightblue', alpha=0.5)\nax.add_patch(rect_tr_corner)\n\n# Create a rectangle for the bottom-left corner\nrect_bl_corner = plt.Rectangle((0, 0), 1, 1, facecolor='lightblue', alpha=0.5)\nax.add_patch(rect_bl_corner)\n\n# Create a rectangle for the bottom-right corner\nrect_br_corner = plt.Rectangle((8, 0), 1, 1, facecolor='lightblue', alpha=0.5)\nax.add_patch(rect_br_corner)\n\n# Create a rectangle for the top-left corner\nrect_tl_corner = plt.Rectangle((0, 750), 1, 1, facecolor='lightblue', alpha=0.5)\nax.add_patch(rect_tl_corner)\n\n# Create a rectangle for the top-right corner\nrect_tr_corner = plt.Rectangle((8, 750), 1, 1, facecolor='lightblue', alpha=0.5)\nax.add_patch(rect_tr_corner)\n\n# Create a rectangle for the bottom-left corner\nrect_bl_corner = plt.Rectangle((0, 0), 1, 1, facecolor='lightblue', alpha=0.5)\nax.add_patch(rect_bl_corner)\n\n# Create a rectangle for the bottom-right corner\nrect_br_corner = plt.Rectangle((8, 0), 1, 1, facecolor='lightblue', alpha=0.5)\nax.add_patch(rect_br_corner)\n\n# Create a rectangle for the top-left corner\nrect_tl_corner = plt.Rectangle((0, 750), 1, 1, facecolor='lightblue', alpha=0.5)\nax.add_patch(rect_tl_corner)\n\n# Create a rectangle for the top-right corner\nrect_tr_corner = plt.Rectangle((8, 750), 1, 1, facecolor='lightblue', alpha=0.5)\nax.add_patch(rect_tr_corner)\n\n# Create a rectangle for the bottom-left corner\nrect_bl_corner = plt.Rectangle((0, 0), 1, 1, facecolor='lightblue', alpha=0.5)\nax.add_patch(rect_bl_corner)\n\n# Create a rectangle for the bottom-right corner\nrect_br_corner = plt.Rectangle((8, 0), 1, 1, facecolor='lightblue', alpha=0.5)\nax.add_patch(rect_br_corner)\n\n# Create a rectangle for the top-left corner\nrect_tl_corner = plt.Rectangle((0, 750), 1, 1, facecolor='lightblue', alpha=0.5)\nax.add_patch(rect_tl_corner)\n\n# Create a rectangle for the top-right corner\nrect_tr_corner = plt.Rectangle((8, 750), 1, 1, facecolor='lightblue', alpha=0.5)\nax.add_patch(rect_tr_corner)\n\n# Create a rectangle for the bottom-left corner\nrect_bl_corner = plt.Rectangle((0, 0), 1, 1, facecolor='lightblue', alpha=0.5)\nax.add_patch(rect_bl_corner)\n\n# Create a rectangle for the bottom-right corner\nrect_br_corner = plt.Rectangle((8, 0), 1, 1, facecolor='lightblue', alpha=0.5)\nax.add_patch(rect_br_corner)\n\n# Create a rectangle for the top-left corner\nrect_tl_corner = plt.Rectangle((0, 750), 1, 1, facecolor='lightblue', alpha=0.5)\nax.add_patch(rect_tl_corner)\n\n# Create a rectangle for the top-right corner\nrect_tr_corner = plt.Rectangle((8, 750), 1, 1, facecolor='lightblue', alpha=0.5)\nax.add_patch(rect_tr_corner)\n\n# Create a rectangle for the bottom-left corner\nrect_bl_corner = plt.Rectangle((0, 0), 1, 1, facecolor='lightblue', alpha=0.5)\nax.add_patch(rect_bl_corner)\n\n# Create a rectangle for the bottom-right corner\nrect_br_corner = plt.Rectangle((8, 0), 1, 1, facecolor='lightblue', alpha=0.5)\nax.add_patch(rect_br_corner)\n\n# Create a rectangle for the top-left corner\nrect_tl_corner = plt.Rectangle((0, 750), 1, 1, facecolor='lightblue', alpha=0.5)\nax.add_patch(rect_tl_corner)\n\n# Create a rectangle for the top-right corner\nrect_tr_corner = plt.Rectangle((8, 750), 1, 1, facecolor='lightblue', alpha=0.5)\nax.add_patch(rect_tr_corner)\n\n# Create a rectangle for the bottom-left corner\nrect_bl_corner = plt.Rectangle((0, 0), 1, 1, facecolor='lightblue', alpha=0.5)\nax.add_patch(rect_bl_corner)\n\n# Create a rectangle for the bottom-right corner\nrect_br_corner = plt.Rectangle((8, 0), 1, 1, facecolor='lightblue', alpha=0.5)\nax.add_patch(rect_br_corner)\n\n# Create a rectangle for the top-left corner\nrect_tl_corner = plt.Rectangle((0, 750), 1, 1, facecolor='lightblue', alpha=0.5)\nax.add_patch(rect_tl_corner)\n\n# Create a rectangle for the top-right corner\nrect_tr_corner = plt.Rectangle((8, 750), 1, 1, facecolor='lightblue', alpha=0.5)\nax.add_patch(rect_tr_corner)\n\n# Create a rectangle for the bottom-left corner\nrect_bl_corner = plt.Rectangle((0, 0), 1, 1, facecolor='lightblue', alpha=0.5)\nax.add_patch(rect_bl_corner)\n\n# Create a rectangle for the bottom-right corner\nrect_br_corner = plt.Rectangle((8, 0), 1, 1, facecolor='lightblue', alpha=0.5)\nax.add_patch(rect_br_corner)\n\n# Create a rectangle for the top-left corner\nrect_tl_corner = plt.Rectangle((0, 750), 1, 1, facecolor='lightblue', alpha=0.5)\nax.add_patch(rect_tl_corner)\n\n# Create a rectangle for the top-right corner\nrect_tr_corner = plt.Rectangle((8, 750), 1, 1, facecolor='lightblue', alpha=0.5)\nax.add_patch(rect_tr_corner)\n\n# Create a rectangle for the bottom-left corner\nrect_bl_corner = plt.Rectangle((0, 0), 1, 1, facecolor='lightblue', alpha=0.5)\nax.add_patch(rect_bl_corner)\n\n# Create a rectangle for the bottom-right corner\nrect_br_corner = plt.Rectangle((8, 0), 1, 1, facecolor='lightblue', alpha=0.5)\nax.add_patch(rect_br_corner)\n\n# Create a rectangle for the top-left corner\nrect_tl_corner = plt.Rectangle((0, 750), 1, 1, facecolor='lightblue', alpha=0.5)\nax.add_patch(rect_tl_corner)\n\n# Create a rectangle for the top-right corner\nrect_tr_corner = plt.Rectangle((8, 750), 1, 1, facecolor='lightblue', alpha=0.5)\nax.add_patch(rect_tr_corner)\n\n# Create a rectangle for the bottom-left corner\nrect_bl_corner = plt.Rectangle((0, 0), 1, 1, facecolor='lightblue', alpha=0.5)\nax.add_patch(rect_bl_corner)\n\n# Create a rectangle for the bottom-right corner\nrect_br_corner = plt.Rectangle((8, 0), 1, 1, facecolor='lightblue', alpha=0.5)\nax.add_patch(rect_br_corner)\n\n# Create a rectangle for the top-left corner\nrect_tl_corner = plt.Rectangle((0, 750), 1, 1, facecolor='lightblue', alpha=0.5)\nax.add_patch(rect_tl_corner)\n\n# Create a rectangle for the top-right corner\nrect_tr_corner = plt.Rectangle((8, 750), 1, 1, facecolor='lightblue', alpha=0.5)\nax.add_patch(rect_tr_corner)\n\n# Create a rectangle for the bottom-left corner\nrect_bl_corner = plt.Rectangle((0, 0), 1, 1, facecolor='lightblue', alpha=0.5)\nax.add_patch(rect_bl_corner)\n\n# Create a rectangle for the bottom-right corner\nrect_br_corner = plt.Rectangle((8, 0), 1, 1, facecolor='lightblue', alpha=0.5)\nax.add_patch(rect_br_corner)\n\n# Create a rectangle for the top-left corner\nrect_tl_corner = plt.Rectangle((0, 750), 1, 1, facecolor='lightblue', alpha=0.5)\nax.add_patch(rect_tl_corner)\n\n# Create a rectangle for the top-right corner\nrect_tr_corner = plt.Rectangle((8, 750), 1, 1, facecolor='lightblue', alpha=0.5)\nax.add_patch(rect_tr_corner)\n\n# Create a rectangle for the bottom-left corner\nrect_bl_corner = plt.Rectangle((0, 0), 1, 1, facecolor='lightblue', alpha=0.5)\nax.add_patch(rect_bl_corner)\n\n# Create a rectangle for the bottom-right corner\nrect_br_corner = plt.Rectangle((8, 0), 1, 1, facecolor='lightblue', alpha=0.5)\nax.add_patch(rect_br_corner)\n\n# Create a rectangle for the top-left corner\nrect_tl_corner = plt.Rectangle((0, 750), 1, 1, facecolor='lightblue', alpha=0.5)\nax.add_patch(rect_tl_corner)\n\n# Create a rectangle for the top-right corner\nrect_tr_corner = plt.Rectangle((8, 750), 1, 1, facecolor='lightblue', alpha=0.5)\nax.add_patch(rect_tr_corner)\n\n# Create a rectangle for the bottom-left corner\nrect_bl_corner = plt.Rectangle((0, 0), 1, 1, facecolor='lightblue', alpha=0.5)\nax.add_patch(rect_bl_corner)\n\n# Create a rectangle for the bottom-right corner\nrect_br_corner = plt.Rectangle((8, 0), 1, 1, facecolor='lightblue', alpha=0.5)\nax.add_patch(rect_br_corner)\n\n# Create a rectangle for the top-left corner\nrect_tl_corner = plt.Rectangle((0, 750), 1, 1, facecolor='lightblue', alpha=0.5)\nax.add_patch(rect_tl_corner)\n\n# Create a rectangle for the top-right corner\nrect_tr_corner = plt.Rectangle((8, 750), 1, 1, facecolor='lightblue', alpha=0.5)\nax.add_patch(rect_tr_corner)\n\n# Create a rectangle for the bottom-left corner\nrect_bl_corner = plt.Rectangle((0, 0), 1, 1, facecolor='lightblue', alpha=0.5)\nax.add_patch(rect_bl_corner)\n\n# Create a rectangle for the bottom-right corner\nrect_br_corner = plt.Rectangle((8, 0), 1, 1, facecolor='lightblue', alpha=0.5)\nax.add_patch(rect_br_corner)\n\n# Create a rectangle for the top-left corner\nrect_tl_corner = plt.Rectangle((0, 750), 1, 1, facecolor='lightblue', alpha=0.5)\nax.add_patch(rect_tl_corner)\n\n# Create a rectangle for the top-right corner\nrect_tr_corner = plt.Rectangle((8, 750), 1, 1, facecolor='lightblue', alpha=0.5)\nax.add_patch(rect_tr_corner)\n\n# Create a rectangle for the bottom-left corner\nrect_bl_corner = plt.Rectangle((0, 0), 1, 1, facecolor='lightblue', alpha=0.5)\nax.add_patch(rect_bl_corner)\n\n# Create a rectangle for the bottom-right corner\nrect_br_corner = plt.Rectangle((8, 0), 1, 1, facecolor='lightblue', alpha=0.5)\nax.add_patch(rect_br_corner)\n\n# Create a rectangle for the top-left corner\nrect_tl_corner = plt.Rectangle((0, 750), 1, 1, facecolor='lightblue', alpha=0.5)\nax.add_patch(rect_tl_corner)\n\n# Create a rectangle for the top-right corner\nrect_tr_corner = plt.Rectangle((8, 750), 1, 1, facecolor='lightblue', alpha=0.5)\nax.add_patch(rect_tr_corner)\n\n# Create a rectangle for the bottom-left corner\nrect_bl_corner = plt.Rectangle((0, 0), 1, 1, facecolor='lightblue', alpha=0.5)\nax.add_patch(rect_bl_corner)\n\n# Create a rectangle for the bottom-right corner\nrect_br_corner = plt.Rectangle((8, 0), 1, 1, facecolor='lightblue', alpha=0.5)\nax.add_patch(rect_br_corner)\n\n# Create a rectangle for the top-left corner\nrect_tl_corner = plt.Rectangle((0, 750), 1, 1, facecolor='lightblue', alpha=0.5)\nax.add_patch(rect_tl_corner)\n\n# Create a rectangle for the top-right corner\nrect_tr_corner = plt.Rectangle((8, 750), 1, 1, facecolor='lightblue', alpha=0.5)\nax.add_patch(rect_tr_corner)\n\n# Create a rectangle for the bottom-left corner\nrect_bl_corner = plt.Rectangle((0, 0), 1, 1, facecolor='lightblue', alpha=0.5)\nax.add_patch(rect_bl_corner)\n\n# Create a rectangle for the bottom-right corner\nrect_br_corner = plt.Rectangle((8, 0), 1, 1, facecolor='lightblue', alpha=0.5)\nax.add_patch(rect_br_corner)\n\n# Create a rectangle for the top-left corner\nrect_tl_corner = plt.Rectangle((0, 750), 1, 1, facecolor='lightblue', alpha=0.5)\nax.add_patch(rect_tl_corner)\n\n# Create a rectangle for the top-right corner\nrect_tr_corner = plt.Rectangle((8, 750), 1, 1, facecolor"}
{"file": "dataset/ori_500/line_25.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the x-axis limits\nax.set_xlim(1, 8)\n\n# Set the y-axis limits\nax.set_ylim(2.5, 7.5)\n\n# Set the x-axis ticks\nax.set_xticks([1, 2, 3, 4, 5, 6, 7, 8])\n\n# Set the y-axis ticks\nax.set_yticks([2.5, 3.5, 4.5, 5.5, 6.5, 7.5])\n\n# Set the x-axis label\nax.set_xlabel('Number of experts')\n\n# Set the y-axis label\nax.set_ylabel('DoN')\n\n# Set the title\nax.set_title('IQM Human Normalized Score')\n\n# Plot the data\nax.plot([1, 2, 3, 4, 5, 6, 7, 8], [2.5, 2.7, 2.9, 3.1, 3.3, 3.5, 3.7, 3.9], 'o-', color='pink')\nax.plot([1, 2, 3, 4, 5, 6, 7, 8], [2.5, 2.7, 2.9, 3.1, 3.3, 3.5, 3.7, 3.9], 'o-', color='green')\nax.plot([1, 2, 3, 4, 5, 6, 7, 8], [2.5, 2.7, 2.9, 3.1, 3.3, 3.5, 3.7, 3.9], 'o-', color='blue')\n\n# Add a legend\nax.legend(['Baseline', 'SoftMoE', 'Top1-MoE'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_26.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Test set TPR | FPR = 10^-4')\n\n# Set the x-axis label\nax.set_xlabel('Vocabulary size')\n\n# Set the y-axis label\nax.set_ylabel('TPR')\n\n# Define the data points\nx = [256, 512, 1024, 2048, 8192, 16384]\ny = [0.2, 0.4, 0.6, 0.8, 0.9, 0.95]\n\n# Plot the data points\nax.plot(x, y, 'b-')\n\n# Add markers at the data points\nfor xi, yi in zip(x, y):\n    ax.plot(xi, yi, 'bo')\n\n# Set the x-axis limits\nax.set_xlim(256, 16384)\n\n# Set the y-axis limits\nax.set_ylim(0.2, 1.0)\n\n# Set the x-axis ticks\nax.set_xticks([256, 512, 1024, 2048, 8192, 16384])\n\n# Set the y-axis ticks\nax.set_yticks([0.2, 0.4, 0.6, 0.8, 0.9, 0.95])\n\n# Set the legend\nax.legend(['BPE', 'Wordpunct', 'Whitespaces'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_27.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for CNN\nx_cnn = [1, 12, 18, 30]\ny_cnn = [26.0, 34.4, 30.2, 55.0]\n\n# Data for CIF\nx_cif = [1, 12, 18, 30]\ny_cif = [24.7, 36.8, 28.6, 35.0]\n\n# Data for STAR\nx_star = [1, 12, 18, 30]\ny_star = [17.9, 22.6, 19.8, 36.8]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Plot the data\nax.plot(x_cnn, y_cnn, label='CNN', color='pink')\nax.plot(x_cif, y_cif, label='CIF', color='purple')\nax.plot(x_star, y_star, label='STAR', color='black')\n\n# Set the title and labels\nax.set_title('Word Error Rate vs Compression Rate')\nax.set_xlabel('Compression Rate (%)')\nax.set_ylabel('Word Error Rate (%)')\n\n# Add grid lines\nax.grid(True)\n\n# Add legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_28.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nx = [25, 50, 75, 100, 125, 150, 175, 200]\ny1 = [90, 92, 93, 95, 94, 93, 92, 91]\ny2 = [85, 87, 88, 90, 89, 88, 87, 86]\ny3 = [80, 82, 83, 85, 84, 83, 82, 81]\n\n# Plotting\nfig, ax = plt.subplots(figsize=(6, 4))\nax.plot(x, y1, 'r-', label='PILOTE')\nax.plot(x, y2, 'b-', label='Re-trained model')\nax.plot(x, y3, 'g-', label='Pre-trained model accuracy')\n\n# Markers\nax.plot(25, 90, 'ro')\nax.plot(50, 92, 'ro')\nax.plot(75, 93, 'ro')\nax.plot(100, 95, 'ro')\nax.plot(125, 94, 'ro')\nax.plot(150, 93, 'ro')\nax.plot(175, 92, 'ro')\nax.plot(200, 91, 'ro')\n\nax.plot(25, 85, 'bo')\nax.plot(50, 87, 'bo')\nax.plot(75, 88, 'bo')\nax.plot(100, 90, 'bo')\nax.plot(125, 89, 'bo')\nax.plot(150, 88, 'bo')\nax.plot(175, 87, 'bo')\nax.plot(200, 86, 'bo')\n\nax.plot(25, 80, 'go')\nax.plot(50, 82, 'go')\nax.plot(75, 83, 'go')\nax.plot(100, 85, 'go')\nax.plot(125, 84, 'go')\nax.plot(150, 83, 'go')\nax.plot(175, 82, 'go')\nax.plot(200, 81, 'go')\n\n# Legend\nax.legend()\n\n# Labels\nax.set_xlabel('Number of exemplars in class \\'Run\\'')\nax.set_ylabel('Avg. accuracy of five rounds')\n\n# Title\nax.set_title('Model accuracy over time')\n\n# Grid\nax.grid(True)\n\n# Save figure\nplt.savefig('model_accuracy.png', dpi=300)\nplt.show()\n```"}
{"file": "dataset/ori_500/line_29.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(4.0, 3.0))\n\n# Plot the data\nax.plot([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], [0.1, 0.12, 0.14, 0.16, 0.18, 0.2, 0.22, 0.24, 0.26, 0.28, 0.3, 0.32, 0.34, 0.36, 0.38, 0.4, 0.42, 0.44, 0.46, 0.48, 0.5], color='blue')\nax.plot([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], [0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25], color='blue')\n\n# Set the title and labels\nax.set_title('Average Fidelity Over Steps')\nax.set_xlabel('# of Steps')\nax.set_ylabel('Average Fidelity')\n\n# Add a legend\nax.legend(['xLLM', 'Single-Pass LLM'])\n\n# Add a horizontal line at y=0.1\nax.axhline(y=0.1, color='red', linestyle='-')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nteams = ['All', 'MLP', 'GCN', 'NCN', 'NEC', 'SEAL', 'Node2Vec']\nhits = [75, 70, 65, 60, 55, 50, 45]\ngoals = [80, 75, 70, 65, 60, 55, 50]\n\n# Plot\nfig, ax = plt.subplots(figsize=(10, 5))\nax.plot(teams, hits, label='Hits')\nax.plot(teams, goals, label='Goals')\n\n# Annotations\nfor i, team in enumerate(teams):\n    ax.annotate(team, (i, hits[i]), textcoords=\"offset points\", xytext=(0,10), ha='center')\n\n# Legend\nax.legend()\n\n# Title and labels\nax.set_title('Team Performance')\nax.set_xlabel('Teams')\nax.set_ylabel('Scores')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/line_30.pdf", "response": "import matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Set the title of the plot\nax.set_title('Android')\n\n# Define the x-axis values\nx = [2, 4, 6, 8, 10, 12]\n\n# Define the y-axis values for the first line\ny1 = [0.055, 0.055, 0.055, 0.055, 0.055, 0.055]\n\n# Define the y-axis values for the second line\ny2 = [0.045, 0.045, 0.045, 0.045, 0.045, 0.045]\n\n# Plot the lines\nax.plot(x, y1, 'bo-', label='outside-code-diff')\nax.plot(x, y2, 'ro-', label='inside-code-diff')\n\n# Add a legend\nax.legend()\n\n# Set the x-axis label\nax.set_xlabel('Layer')\n\n# Set the y-axis label\nax.set_ylabel('Value')\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/line_31.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Sample data\nx = [6, 7, 8, 9]\ny1 = [0.5, 0.7, 0.8, 0.9]\ny2 = [0.4, 0.6, 0.7, 0.8]\ny3 = [0.3, 0.5, 0.6, 0.7]\ny4 = [0.2, 0.4, 0.5, 0.6]\ny5 = [0.1, 0.3, 0.4, 0.5]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data\nax.plot(x, y1, 'b-', label='Direct (100 samples)')\nax.plot(x, y2, 'g-', label='RFFT (100 samples)')\nax.plot(x, y3, 'y-', label='Scratchpad (100 samples)')\nax.plot(x, y4, 'r-', label='Scratchpad (5000 samples)')\nax.plot(x, y5, 'm-', label='Scratchpad (5000 samples)')\n\n# Set the limits of the x-axis\nax.set_xlim(5, 10)\n\n# Set the limits of the y-axis\nax.set_ylim(0, 1)\n\n# Set the title of the plot\nax.set_title('Digit Recognition Accuracy')\n\n# Set the labels for the x-axis and y-axis\nax.set_xlabel('Digit Length')\nax.set_ylabel('Accuracy')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_32.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('CIFAR100 States Zero Shot Accuracy')\n\n# Set the x-axis label\nax.set_xlabel('Decomposition IO Norm')\n\n# Set the y-axis label\nax.set_ylabel('Accuracy')\n\n# Set the x-axis limits\nax.set_xlim(0, 80)\n\n# Set the y-axis limits\nax.set_ylim(200, 375)\n\n# Draw horizontal lines\nax.axhline(y=375, color='black', linestyle='-')\nax.axhline(y=350, color='black', linestyle='-')\nax.axhline(y=325, color='black', linestyle='-')\nax.axhline(y=300, color='black', linestyle='-')\nax.axhline(y=275, color='black', linestyle='-')\nax.axhline(y=250, color='black', linestyle='-')\nax.axhline(y=225, color='black', linestyle='-')\n\n# Draw vertical lines\nax.axvline(x=0, color='black', linestyle='-')\nax.axvline(x=20, color='black', linestyle='-')\nax.axvline(x=40, color='black', linestyle='-')\nax.axvline(x=60, color='black', linestyle='-')\nax.axvline(x=80, color='black', linestyle='-')\n\n# Plot the data\nax.plot([0, 20, 40, 60, 80], [225, 275, 325, 350, 375], 'o-', color='orange')\n\n# Add a rectangle for the legend\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='orange', label='iaion'))\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='black', label='CLIP'))\n\n# Show the legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_33.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nx = [20, 40, 60, 80, 100]\ny1 = [0.55, 0.65, 0.7, 0.75, 0.75]\ny2 = [0.5, 0.6, 0.65, 0.7, 0.75]\ny3 = [0.45, 0.55, 0.6, 0.65, 0.7]\ny4 = [0.4, 0.5, 0.55, 0.6, 0.65]\ny5 = [0.35, 0.45, 0.5, 0.55, 0.6]\ny6 = [0.3, 0.4, 0.45, 0.5, 0.55]\n\n# Plotting\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\nax.plot(x, y1, 'r-', label='CNN')\nax.plot(x, y2, 'r--', label='CNN+HMM')\nax.plot(x, y3, 'b-', label='RF')\nax.plot(x, y4, 'b--', label='RF+HMM')\nax.plot(x, y5, 'g-', label='CNN')\nax.plot(x, y6, 'g--', label='CNN+HMM')\n\n# Markers\nax.plot(20, 0.55, 'ro')\nax.plot(40, 0.65, 'ro')\nax.plot(60, 0.7, 'ro')\nax.plot(80, 0.75, 'ro')\nax.plot(100, 0.75, 'ro')\n\nax.plot(20, 0.5, 'bo')\nax.plot(40, 0.6, 'bo')\nax.plot(60, 0.65, 'bo')\nax.plot(80, 0.7, 'bo')\nax.plot(100, 0.75, 'bo')\n\nax.plot(20, 0.45, 'go')\nax.plot(40, 0.55, 'go')\nax.plot(60, 0.6, 'go')\nax.plot(80, 0.65, 'go')\nax.plot(100, 0.7, 'go')\n\nax.plot(20, 0.4, 'co')\nax.plot(40, 0.5, 'co')\nax.plot(60, 0.55, 'co')\nax.plot(80, 0.6, 'co')\nax.plot(100, 0.65, 'co')\n\nax.plot(20, 0.35, 'mo')\nax.plot(40, 0.45, 'mo')\nax.plot(60, 0.5, 'mo')\nax.plot(80, 0.55, 'mo')\nax.plot(100, 0.6, 'mo')\n\nax.plot(20, 0.3, 'yo')\nax.plot(40, 0.4, 'yo')\nax.plot(60, 0.45, 'yo')\nax.plot(80, 0.5, 'yo')\nax.plot(100, 0.55, 'yo')\n\n# Legend\nax.legend()\n\n# Labels\nax.set_xlabel('No. of Users in Development Set')\nax.set_ylabel('F1')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/line_34.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nx = [2, 3, 4, 5, 6, 7, 8]\ny1 = [27.44, 24.75, 23.38, 22.77, 22.32, 21.47, 21.51]\ny2 = [6.74, 4.54, 3.96, 3.71, 3.49, 3.34, 3.14]\n\n# Plot\nfig, ax1 = plt.subplots(figsize=(8.0, 7.0))\n\ncolor = 'tab:blue'\nax1.set_xlabel('Number of microphones')\nax1.set_ylabel('WER (%)', color=color)\nax1.plot(x, y1, color=color)\nax1.tick_params(axis='y', labelcolor=color)\n\nax2 = ax1.twinx()  # instantiate a second axes that shares the same x-axis\n\ncolor = 'tab:orange'\nax2.set_ylabel('AMI WER (%)', color=color)  # we already handled the x-label with ax1\nax2.plot(x, y2, color=color)\nax2.tick_params(axis='y', labelcolor=color)\n\nfig.tight_layout()  # otherwise the right y-label is slightly clipped\nplt.show()\n```"}
{"file": "dataset/ori_500/line_35.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the plot\nx = [10**-7, 10**-6, 10**-5, 10**-4]\ny = [1, 2, 3, 4]\nerror = [0.1, 0.2, 0.3, 0.4]\n\n# Create the plot\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\nax.plot(x, y, 'bo-', label='empirical relat. (B2=8.0)')\nax.errorbar(x, y, yerr=error, fmt='o', ecolor='r', capsize=5)\nax.set_xlabel('Quantization error')\nax.set_ylabel('Search window size ratio')\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_36.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(15, 5))\n\n# Define the data\nx = np.linspace(0.1, 1.0, 100)\ny1 = np.sin(x)\ny2 = np.cos(x)\n\n# Plot the data\nax.plot(x, y1, color='blue')\nax.plot(x, y2, color='orange')\n\n# Set the title and labels\nax.set_title('SPMotif-0.5')\nax.set_xlabel('Ratio r')\nax.set_ylabel('Performance')\n\n# Add rectangles for the shaded areas\nax.add_patch(plt.Rectangle((0.1, 0.7), 0.4, 0.3, color='lightblue', alpha=0.5))\nax.add_patch(plt.Rectangle((0.6, 0.7), 0.4, 0.3, color='lightgreen', alpha=0.5))\n\n# Add markers for the points\nax.plot(0.1, 0.8, 'ro')\nax.plot(0.2, 0.7, 'ro')\nax.plot(0.3, 0.6, 'ro')\nax.plot(0.4, 0.5, 'ro')\nax.plot(0.5, 0.4, 'ro')\nax.plot(0.6, 0.3, 'ro')\nax.plot(0.7, 0.2, 'ro')\nax.plot(0.8, 0.1, 'ro')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_37.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6, 5))\n\n# Set the background color of the plot\nax.set_facecolor('lightblue')\n\n# Set the title of the plot\nax.set_title('Accuracy')\n\n# Set the x-axis label\nax.set_xlabel('Ensemble Size')\n\n# Set the y-axis label\nax.set_ylabel('Accuracy')\n\n# Set the x-axis limits\nax.set_xlim(6, 30)\n\n# Set the y-axis limits\nax.set_ylim(74.5, 78)\n\n# Draw a rectangle for the first bar\nax.add_patch(plt.Rectangle((6, 74.5), 12, 3.5, color='skyblue'))\n\n# Draw a rectangle for the second bar\nax.add_patch(plt.Rectangle((18, 74.5), 12, 3.5, color='skyblue'))\n\n# Draw a rectangle for the third bar\nax.add_patch(plt.Rectangle((30, 74.5), 12, 3.5, color='skyblue'))\n\n# Draw a line for the first line\nax.plot([6, 18], [74.5, 74.5], 'b-')\n\n# Draw a line for the second line\nax.plot([18, 30], [74.5, 74.5], 'b-')\n\n# Draw a line for the third line\nax.plot([30, 30], [74.5, 77.5], 'b-')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_38.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nepochs = [3, 5, 10, 30]\ngpt_neo = [0.8, 0.7, 0.6, 0.5]\ngpt_5 = [0.7, 0.6, 0.5, 0.4]\ngpt_10 = [0.6, 0.5, 0.4, 0.3]\ngpt_30 = [0.5, 0.4, 0.3, 0.2]\n\n# Plotting\nfig, ax = plt.subplots(figsize=(6.0, 3.0))\nax.plot(epochs, gpt_neo, 'r-', label='GPT-Neo')\nax.plot(epochs, gpt_5, 'y-', label='5')\nax.plot(epochs, gpt_10, 'b-', label='10')\nax.plot(epochs, gpt_30, 'g-', label='30')\n\n# Adding rectangles for each model\nrectangles = [\n    plt.Rectangle((0, 0), 1, 1, color='red', label='GPT-Neo'),\n    plt.Rectangle((0, 0), 1, 1, color='yellow', label='5'),\n    plt.Rectangle((0, 0), 1, 1, color='blue', label='10'),\n    plt.Rectangle((0, 0), 1, 1, color='green', label='30')\n]\nfor rect in rectangles:\n    ax.add_patch(rect)\n\n# Adding text labels\nax.text(0.5, 0.9, 'GPT-Neo', ha='center', va='center', color='white')\nax.text(1.5, 0.9, '5', ha='center', va='center', color='white')\nax.text(2.5, 0.9, '10', ha='center', va='center', color='white')\nax.text(3.5, 0.9, '30', ha='center', va='center', color='white')\n\n# Setting limits and labels\nax.set_xlim(0, 4)\nax.set_ylim(0, 1)\nax.set_xlabel('# Epochs')\nax.set_ylabel('MA')\n\n# Adding legend\nax.legend()\n\nplt.show()\n```"}
{"file": "dataset/ori_500/line_39.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nx = [96, 192, 336, 512, 720]\ny1 = [0.12, 0.14, 0.16, 0.18, 0.20]\ny2 = [0.10, 0.12, 0.14, 0.16, 0.18]\ny3 = [0.08, 0.10, 0.12, 0.14, 0.16]\ny4 = [0.06, 0.08, 0.10, 0.12, 0.14]\ny5 = [0.04, 0.06, 0.08, 0.10, 0.12]\ny6 = [0.02, 0.04, 0.06, 0.08, 0.10]\n\n# Plot\nfig, ax = plt.subplots(figsize=(15, 4))\nax.plot(x, y1, 'r-', label='Traffic')\nax.plot(x, y2, 'o-', label='ETMm2')\nax.plot(x, y3, 'g-', label='ETTh2')\nax.plot(x, y4, 'b-', label='ECL')\nax.plot(x, y5, 'm-', label='MSE')\nax.plot(x, y6, 'c-', label='MSF')\n\n# Legend\nax.legend()\n\n# Labels\nax.set_xlabel('pred_length')\nax.set_ylabel('Value')\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for Serial\nserial_x = [224, 128, 64, 32]\nserial_y = [70, 65, 60, 55]\n\n# Data for Parallel\nparallel_x = [224, 128, 64, 32]\nparallel_y = [80, 75, 70, 65]\n\nfig, ax = plt.subplots(1, 2, figsize=(9, 4))\n\n# Plot for Serial\nax[0].plot(serial_x, serial_y, 'o-', color='orange')\nax[0].set_title('Serial (n=8, m=1)')\nax[0].set_xlabel('Time')\nax[0].set_ylabel('Top-1 Acc.')\nax[0].grid(True)\n\n# Plot for Parallel\nax[1].plot(parallel_x, parallel_y, 'o-', color='blue')\nax[1].set_title('Parallel (n=2, m=4)')\nax[1].set_xlabel('Time')\nax[1].set_ylabel('Top-1 Acc.')\nax[1].grid(True)\n\n# Adding rectangles for images\nfor i, x in enumerate(serial_x):\n    ax[0].add_patch(plt.Rectangle((x, 0), 1, 1, color='orange', alpha=0.5))\n    ax[0].text(x, 0, f'ImageNet-{i+1}k', ha='center', va='bottom')\n\nfor i, x in enumerate(parallel_x):\n    ax[1].add_patch(plt.Rectangle((x, 0), 1, 1, color='blue', alpha=0.5))\n    ax[1].text(x, 0, f'ImageNet-{i+1}k', ha='center', va='bottom')\n\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_40.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the background color of the plot\nax.set_facecolor('#f0f0f0')\n\n# Set the title of the plot\nax.set_title('Classification Accuracy Over Time', fontsize=14)\n\n# Set the x-axis label\nax.set_xlabel('SNR', fontsize=12)\n\n# Set the y-axis label\nax.set_ylabel('Classification Accuracy (%)', fontsize=12)\n\n# Set the x-axis limits\nax.set_xlim(5, 25)\n\n# Set the y-axis limits\nax.set_ylim(0, 100)\n\n# Set the x-axis ticks\nax.set_xticks([5, 7.5, 10, 12.5, 15, 17.5, 20, 22.5, 25])\n\n# Set the y-axis ticks\nax.set_yticks([0, 20, 40, 60, 80, 100])\n\n# Set the grid lines\nax.grid(True)\n\n# Set the color of the grid lines\nax.grid(color='#d3d3d3')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='#d3d3d3')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='minor', labelsize=8)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='minor', colors='#d3d3d3')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelcolor='#d3d3d3')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='#d3d3d3')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelcolor='#d3d3d3')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='#d3d3d3')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelcolor='#d3d3d3')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='#d3d3d3')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelcolor='#d3d3d3')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='#d3d3d3')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelcolor='#d3d3d3')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='#d3d3d3')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelcolor='#d3d3d3')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='#d3d3d3')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelcolor='#d3d3d3')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='#d3d3d3')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelcolor='#d3d3d3')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='#d3d3d3')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelcolor='#d3d3d3')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='#d3d3d3')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelcolor='#d3d3d3')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='#d3d3d3')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelcolor='#d3d3d3')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='#d3d3d3')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelcolor='#d3d3d3')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='#d3d3d3')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelcolor='#d3d3d3')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='#d3d3d3')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelcolor='#d3d3d3')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='#d3d3d3')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelcolor='#d3d3d3')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='#d3d3d3')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelcolor='#d3d3d3')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='#d3d3d3')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelcolor='#d3d3d3')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='#d3d3d3')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelcolor='#d3d3d3')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='#d3d3d3')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelcolor='#d3d3d3')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='#d3d3d3')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelcolor='#d3d3d3')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='#d3d3d3')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelcolor='#d3d3d3')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='#d3d3d3')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelcolor='#d3d3d3')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='#d3d3d3')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelcolor='#d3d3d3')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='#d3d3d3')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelcolor='#d3d3d3')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='#d3d3d3')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelcolor='#d3d3d3')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='#d3d3d3')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelcolor='#d3d3d3')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='#d3d3d3')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelcolor='#d3d3d3')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='#d3d3d3')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelcolor='#d3d3d3')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='#d3d3d3')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelcolor='#d3d3d3')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='#d3d3d3')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelcolor='#d3d3d3')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='#d3d3d3')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelcolor='#d3d3d3')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='#d3d3d3')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelcolor='#d3d3d3')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='#d3d3d3')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelcolor='#d3d3d3')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='#d3d3d3')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelcolor='#d3d3d3')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='#d3d3d3')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelcolor='#d3d3d3')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='#d3d3d3')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelcolor='#d3d3d3')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='#d3d3d3')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelcolor='#d3d3d3')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='#d3d3d3')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelcolor='#d3d3d3')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='#d3d3d3')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelcolor='#d3d3d3')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='#d3d3d3')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelcolor='#d3d3d3')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='#d3d3d3')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelcolor='#d3d3d3')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='#d3d3d3')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelcolor='#d3d3d3')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='#d3d3d3')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelcolor='#d3d3d3')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='#d3d3d3')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelcolor='#d3d3d3')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='#d3d3d3')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelcolor='#d3d3d3')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='#d3d3d3')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelcolor='#d3d3d3')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='#d3d3d3')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelcolor='#d3d3d3')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='#d3d3d3')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelcolor='#d3d3d3')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='#d3d3d3')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelcolor='#d3d3d3')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='#d3d3d3')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelcolor='#d3d3d3')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='#d3d3d3')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelcolor='#d3d3d3')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='#d3d3d3')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelcolor='#d3d3d3')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='#d3d3d3')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelcolor='#d3d3d3')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='#d3d3d3')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelcolor='#d3d3d3')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='#d3d3d3')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelcolor='#d3d3d3')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='#d3d3d3')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelcolor='#d3d3d3')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='#d3d3d3')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelcolor='#d3d3d3')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='#d3d3d3')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelcolor='#d3d3d3')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='#d3d3d3')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelcolor='#d3d3d3')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='#d3d3d3')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelcolor='#d3d3d3')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='#d3d3d3')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelcolor='#d3d3d3')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='#d3d3d3')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelcolor='#d3d3d3')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='#d3d3d3')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelcolor='#d3d3d3')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='#d3d3d3')\n\n# Set"}
{"file": "dataset/ori_500/line_41.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(6.0, 8.0))\n\n# Set the title of the plot\nax.set_title('Performance Metrics')\n\n# Set the x-axis label\nax.set_xlabel('Gradient Steps (x 62.5K)')\n\n# Set the y-axis label\nax.set_ylabel('Performance Value')\n\n# Set the x-ticks\nax.set_xticks([0, 25, 50, 75, 100, 125, 150, 175, 200])\n\n# Set the y-ticks\nax.set_yticks([0, 1, 2, 3, 4, 5, 6, 7])\n\n# Plot the first line graph\nax.plot([0, 25, 50, 75, 100, 125, 150, 175, 200], [1, 1, 1, 1, 1, 1, 1, 1, 1], color='purple', label='Line 1 (Sinusoidal)')\n\n# Plot the second line graph\nax.plot([0, 25, 50, 75, 100, 125, 150, 175, 200], [2, 2, 2, 2, 2, 2, 2, 2, 2], color='blue', label='Line 2 (Quadratic)')\n\n# Plot the third line graph\nax.plot([0, 25, 50, 75, 100, 125, 150, 175, 200], [3, 3, 3, 3, 3, 3, 3, 3, 3], color='green', label='Line 3 (Random Noise)')\n\n# Plot the fourth line graph\nax.plot([0, 25, 50, 75, 100, 125, 150, 175, 200], [4, 4, 4, 4, 4, 4, 4, 4, 4], color='red', label='Line 4 (Exponential Focus)')\n\n# Show the legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_42.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for Line 1\nx1 = [0, 50, 100, 150, 200]\ny1 = [0.1, 0.8, 1.2, 1.5, 1.3]\n\n# Data for Line 2\nx2 = [0, 50, 100, 150, 200]\ny2 = [0.1, 0.8, 1.2, 1.5, 1.3]\n\n# Data for Line 3\nx3 = [0, 50, 100, 150, 200]\ny3 = [0.1, 0.8, 1.2, 1.5, 1.3]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Plot the lines\nax.plot(x1, y1, 'o-', label='Line 1', color='orange')\nax.plot(x2, y2, 's-', label='Line 2', color='blue')\nax.plot(x3, y3, '^-', label='Line 3', color='green')\n\n# Set the title and labels\nax.set_title('Trend of Polynomials')\nax.set_xlabel('Gradient Steps (x 62.5K)')\nax.set_ylabel('Polynomial Value')\n\n# Add legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_43.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(12, 5))\n\n# Set the title of the plot\nax.set_title('ogbl-collab Results')\n\n# Define the x-axis labels\nx_labels = ['All', 'MLP', 'GCN', 'NCN', 'Node2Vec']\n\n# Define the y-axis values for each label\ny_values = [75, 70, 65, 60, 55]\n\n# Plot the data\nfor i in range(len(x_labels)):\n    ax.plot([i, i], [y_values[i], y_values[i]], color='blue')\n    ax.text(i, y_values[i], x_labels[i], ha='center', va='bottom')\n\n# Set the y-axis limits\nax.set_ylim(50, 80)\n\n# Set the y-axis ticks\nax.set_yticks(range(50, 90, 10))\n\n# Set the y-axis labels\nax.set_yticklabels(['50', '60', '70', '80'])\n\n# Set the x-axis limits\nax.set_xlim(-1, len(x_labels))\n\n# Set the x-axis ticks\nax.set_xticks(range(len(x_labels)))\n\n# Set the x-axis labels\nax.set_xticklabels(['ogbl-collab 2022', 'ogbl-collab 2023'])\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_44.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Set the grid\nax.grid(True)\n\n# Set the x-axis limits\nax.set_xlim(10, 60)\n\n# Set the y-axis limits\nax.set_ylim(10**-12, 10**-4)\n\n# Set the x-axis ticks\nax.set_xticks([10, 20, 30, 40, 50, 60])\n\n# Set the y-axis ticks\nax.set_yticks([10**-12, 10**-10, 10**-8, 10**-6, 10**-4, 10**-2])\n\n# Set the x-axis label\nax.set_xlabel('N')\n\n# Set the y-axis label\nax.set_ylabel('Precision')\n\n# Set the title\nax.set_title('Precision vs N')\n\n# Plot the lines\nax.plot([10, 20, 30, 40, 50, 60], [10**-10, 10**-10, 10**-10, 10**-10, 10**-10, 10**-10], 'b-')\nax.plot([10, 20, 30, 40, 50, 60], [10**-10, 10**-10, 10**-10, 10**-10, 10**-10, 10**-10], 'g-')\nax.plot([10, 20, 30, 40, 50, 60], [10**-10, 10**-10, 10**-10, 10**-10, 10**-10, 10**-10], 'r-')\nax.plot([10, 20, 30, 40, 50, 60], [10**-10, 10**-10, 10**-10, 10**-10, 10**-10, 10**-10], 'm-')\n\n# Add markers\nax.plot(10, 10**-10, 'ro')\nax.plot(20, 10**-10, 'go')\nax.plot(30, 10**-10, 'bo')\nax.plot(40, 10**-10, 'mo')\nax.plot(50, 10**-10, 'co')\nax.plot(60, 10**-10, 'yo')\n\n# Add legends\nax.legend(['Standard', 'Constrained', 'Experimental', 'Hypothetical'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_45.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(12, 8))\n\n# Set the title of the graph\nax.set_title('Graph Variation 1')\n\n# Set the x-axis label\nax.set_xlabel('N')\n\n# Set the y-axis label\nax.set_ylabel('Peak Performance')\n\n# Set the x-axis limits\nax.set_xlim(1, 6)\n\n# Set the y-axis limits\nax.set_ylim(10**-4, 10**10)\n\n# Set the x-axis ticks\nax.set_xticks([1, 2, 3, 4, 5, 6])\n\n# Set the y-axis ticks\nax.set_yticks([10**-4, 10**-2, 10**0, 10**2, 10**4, 10**6, 10**8, 10**10])\n\n# Set the x-axis tick labels\nax.set_xticklabels(['10^0', '10^1', '10^2', '10^3', '10^4', '10^5'])\n\n# Set the y-axis tick labels\nax.set_yticklabels(['10^-4', '10^-2', '10^0', '10^2', '10^4', '10^6', '10^8', '10^10'])\n\n# Plot the data\nax.plot([1, 2, 3, 4, 5, 6], [10**-2, 10**-2, 10**-2, 10**-2, 10**-2, 10**-2], color='blue')\nax.plot([1, 2, 3, 4, 5, 6], [10**-1, 10**-1, 10**-1, 10**-1, 10**-1, 10**-1], color='orange')\nax.plot([1, 2, 3, 4, 5, 6], [10**0, 10**0, 10**0, 10**0, 10**0, 10**0], color='green')\nax.plot([1, 2, 3, 4, 5, 6], [10**1, 10**1, 10**1, 10**1, 10**1, 10**1], color='purple')\nax.plot([1, 2, 3, 4, 5, 6], [10**2, 10**2, 10**2, 10**2, 10**2, 10**2], color='red')\n\n# Add a legend\nax.legend(['Standard', 'Constrained', 'Innovative', 'Experimental'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_46.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfig, ax = plt.subplots(figsize=(6.0, 10.0))\nax.plot([0, 5, 10, 15, 20, 25], [1.0, 1.0, 0.5, 0.5, 1.0, 1.0], color='blue')\nax.set_title('Daytime Activity Monitoring')\nax.set_xlabel('Time (Hours)')\nax.set_ylabel('Activity Level')\n\nfig, ax = plt.subplots(figsize=(6.0, 10.0))\nax.plot([0, 5, 10, 15, 20, 25], [1.0, 1.0, 0.5, 0.5, 1.0, 1.0], color='red')\nax.set_title('Nighttime Activity Monitoring')\nax.set_xlabel('Time (Hours)')\nax.set_ylabel('Activity Level')\nplt.show()\n```"}
{"file": "dataset/ori_500/line_47.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Define the time range\ntime = np.arange(0, 13)\n\n# Define the performance index values\nperformance_index = [0.5, 0.7, 0.8, 0.9, 1.0, 0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2]\n\n# Plot the performance index\nax.plot(time, performance_index, color='blue')\n\n# Set the title of the plot\nax.set_title('Comparative Performance Analysis Over Time')\n\n# Set the x-axis label\nax.set_xlabel('Time (Months)')\n\n# Set the y-axis label\nax.set_ylabel('Performance Index')\n\n# Set the x-axis limits\nax.set_xlim(0, 12)\n\n# Set the y-axis limits\nax.set_ylim(0, 1)\n\n# Set the grid\nax.grid(True)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_48.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nx = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\ny1 = [1000, 1100, 1200, 1300, 1400, 1500, 1600, 1700, 1800, 1900, 2000, 2100]\ny2 = [100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200, 210]\n\n# Plot\nfig, ax1 = plt.subplots(figsize=(10.0, 6.0))\n\ncolor = 'tab:blue'\nax1.set_xlabel('Month')\nax1.set_ylabel('Sales', color=color)\nax1.plot(x, y1, color=color)\nax1.tick_params(axis='y', labelcolor=color)\n\nax2 = ax1.twinx()  \ncolor = 'tab:red'\nax2.set_ylabel('Temperature (\u00b0C)', color=color)  \nax2.plot(x, y2, color=color)\nax2.tick_params(axis='y', labelcolor=color)\n\nfig.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_49.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(6.0, 9.0))\n\n# Set the title of the plot\nax.set_title('Exponential Growth Over Time')\n\n# Set the x-axis label\nax.set_xlabel('Time')\n\n# Set the y-axis label\nax.set_ylabel('Value')\n\n# Set the x-axis limits\nax.set_xlim(0, 10)\n\n# Set the y-axis limits\nax.set_ylim(-2, 13)\n\n# Draw a rectangle with a green border\nax.add_patch(plt.Rectangle((0, 0), 10, 13, edgecolor='green', facecolor='none'))\n\n# Draw a line graph with red color\nax.plot([0, 2, 4, 6, 8, 10], [1.3, 1.1, 1.0, 0.8, 0.7, 0.6], 'r-')\n\n# Draw a rectangle with a blue border\nax.add_patch(plt.Rectangle((0, 0), 10, 13, edgecolor='blue', facecolor='none'))\n\n# Draw a line graph with red color\nax.plot([0, 2, 4, 6, 8, 10], [1.3, 1.1, 1.0, 0.8, 0.7, 0.6], 'r-')\n\n# Draw a rectangle with a red border\nax.add_patch(plt.Rectangle((0, 0), 10, 13, edgecolor='red', facecolor='none'))\n\n# Draw a line graph with red color\nax.plot([0, 2, 4, 6, 8, 10], [1.3, 1.1, 1.0, 0.8, 0.7, 0.6], 'r-')\n\n# Draw a rectangle with a blue border\nax.add_patch(plt.Rectangle((0, 0), 10, 13, edgecolor='blue', facecolor='none'))\n\n# Draw a line graph with red color\nax.plot([0, 2, 4, 6, 8, 10], [1.3, 1.1, 1.0, 0.8, 0.7, 0.6], 'r-')\n\n# Draw a rectangle with a red border\nax.add_patch(plt.Rectangle((0, 0), 10, 13, edgecolor='red', facecolor='none'))\n\n# Draw a line graph with red color\nax.plot([0, 2, 4, 6, 8, 10], [1.3, 1.1, 1.0, 0.8, 0.7, 0.6], 'r-')\n\n# Draw a rectangle with a blue border\nax.add_patch(plt.Rectangle((0, 0), 10, 13, edgecolor='blue', facecolor='none'))\n\n# Draw a line graph with red color\nax.plot([0, 2, 4, 6, 8, 10], [1.3, 1.1, 1.0, 0.8, 0.7, 0.6], 'r-')\n\n# Draw a rectangle with a red border\nax.add_patch(plt.Rectangle((0, 0), 10, 13, edgecolor='red', facecolor='none'))\n\n# Draw a line graph with red color\nax.plot([0, 2, 4, 6, 8, 10], [1.3, 1.1, 1.0, 0.8, 0.7, 0.6], 'r-')\n\n# Draw a rectangle with a blue border\nax.add_patch(plt.Rectangle((0, 0), 10, 13, edgecolor='blue', facecolor='none'))\n\n# Draw a line graph with red color\nax.plot([0, 2, 4, 6, 8, 10], [1.3, 1.1, 1.0, 0.8, 0.7, 0.6], 'r-')\n\n# Draw a rectangle with a red border\nax.add_patch(plt.Rectangle((0, 0), 10, 13, edgecolor='red', facecolor='none'))\n\n# Draw a line graph with red color\nax.plot([0, 2, 4, 6, 8, 10], [1.3, 1.1, 1.0, 0.8, 0.7, 0.6], 'r-')\n\n# Draw a rectangle with a blue border\nax.add_patch(plt.Rectangle((0, 0), 10, 13, edgecolor='blue', facecolor='none'))\n\n# Draw a line graph with red color\nax.plot([0, 2, 4, 6, 8, 10], [1.3, 1.1, 1.0, 0.8, 0.7, 0.6], 'r-')\n\n# Draw a rectangle with a red border\nax.add_patch(plt.Rectangle((0, 0), 10, 13, edgecolor='red', facecolor='none'))\n\n# Draw a line graph with red color\nax.plot([0, 2, 4, 6, 8, 10], [1.3, 1.1, 1.0, 0.8, 0.7, 0.6], 'r-')\n\n# Draw a rectangle with a blue border\nax.add_patch(plt.Rectangle((0, 0), 10, 13, edgecolor='blue', facecolor='none'))\n\n# Draw a line graph with red color\nax.plot([0, 2, 4, 6, 8, 10], [1.3, 1.1, 1.0, 0.8, 0.7, 0.6], 'r-')\n\n# Draw a rectangle with a red border\nax.add_patch(plt.Rectangle((0, 0), 10, 13, edgecolor='red', facecolor='none'))\n\n# Draw a line graph with red color\nax.plot([0, 2, 4, 6, 8, 10], [1.3, 1.1, 1.0, 0.8, 0.7, 0.6], 'r-')\n\n# Draw a rectangle with a blue border\nax.add_patch(plt.Rectangle((0, 0), 10, 13, edgecolor='blue', facecolor='none'))\n\n# Draw a line graph with red color\nax.plot([0, 2, 4, 6, 8, 10], [1.3, 1.1, 1.0, 0.8, 0.7, 0.6], 'r-')\n\n# Draw a rectangle with a red border\nax.add_patch(plt.Rectangle((0, 0), 10, 13, edgecolor='red', facecolor='none'))\n\n# Draw a line graph with red color\nax.plot([0, 2, 4, 6, 8, 10], [1.3, 1.1, 1.0, 0.8, 0.7, 0.6], 'r-')\n\n# Draw a rectangle with a blue border\nax.add_patch(plt.Rectangle((0, 0), 10, 13, edgecolor='blue', facecolor='none'))\n\n# Draw a line graph with red color\nax.plot([0, 2, 4, 6, 8, 10], [1.3, 1.1, 1.0, 0.8, 0.7, 0.6], 'r-')\n\n# Draw a rectangle with a red border\nax.add_patch(plt.Rectangle((0, 0), 10, 13, edgecolor='red', facecolor='none'))\n\n# Draw a line graph with red color\nax.plot([0, 2, 4, 6, 8, 10], [1.3, 1.1, 1.0, 0.8, 0.7, 0.6], 'r-')\n\n# Draw a rectangle with a blue border\nax.add_patch(plt.Rectangle((0, 0), 10, 13, edgecolor='blue', facecolor='none'))\n\n# Draw a line graph with red color\nax.plot([0, 2, 4, 6, 8, 10], [1.3, 1.1, 1.0, 0.8, 0.7, 0.6], 'r-')\n\n# Draw a rectangle with a red border\nax.add_patch(plt.Rectangle((0, 0), 10, 13, edgecolor='red', facecolor='none'))\n\n# Draw a line graph with red color\nax.plot([0, 2, 4, 6, 8, 10], [1.3, 1.1, 1.0, 0.8, 0.7, 0.6], 'r-')\n\n# Draw a rectangle with a blue border\nax.add_patch(plt.Rectangle((0, 0), 10, 13, edgecolor='blue', facecolor='none'))\n\n# Draw a line graph with red color\nax.plot([0, 2, 4, 6, 8, 10], [1.3, 1.1, 1.0, 0.8, 0.7, 0.6], 'r-')\n\n# Draw a rectangle with a red border\nax.add_patch(plt.Rectangle((0, 0), 10, 13, edgecolor='red', facecolor='none'))\n\n# Draw a line graph with red color\nax.plot([0, 2, 4, 6, 8, 10], [1.3, 1.1, 1.0, 0.8, 0.7, 0.6], 'r-')\n\n# Draw a rectangle with a blue border\nax.add_patch(plt.Rectangle((0, 0), 10, 13, edgecolor='blue', facecolor='none'))\n\n# Draw a line graph with red color\nax.plot([0, 2, 4, 6, 8, 10], [1.3, 1.1, 1.0, 0.8, 0.7, 0.6], 'r-')\n\n# Draw a rectangle with a red border\nax.add_patch(plt.Rectangle((0, 0), 10, 13, edgecolor='red', facecolor='none'))\n\n# Draw a line graph with red color\nax.plot([0, 2, 4, 6, 8, 10], [1.3, 1.1, 1.0, 0.8, 0.7, 0.6], 'r-')\n\n# Draw a rectangle with a blue border\nax.add_patch(plt.Rectangle((0, 0), 10, 13, edgecolor='blue', facecolor='none'))\n\n# Draw a line graph with red color\nax.plot([0, 2, 4, 6, 8, 10], [1.3, 1.1, 1.0, 0.8, 0.7, 0.6], 'r-')\n\n# Draw a rectangle with a red border\nax.add_patch(plt.Rectangle((0, 0), 10, 13, edgecolor='red', facecolor='none'))\n\n# Draw a line graph with red color\nax.plot([0, 2, 4, 6, 8, 10], [1.3, 1.1, 1.0, 0.8, 0.7, 0.6], 'r-')\n\n# Draw a rectangle with a blue border\nax.add_patch(plt.Rectangle((0, 0), 10, 13, edgecolor='blue', facecolor='none'))\n\n# Draw a line graph with red color\nax.plot([0, 2, 4, 6, 8, 10], [1.3, 1.1, 1.0, 0.8, 0.7, 0.6], 'r-')\n\n# Draw a rectangle with a red border\nax.add_patch(plt.Rectangle((0, 0), 10, 13, edgecolor='red', facecolor='none'))\n\n# Draw a line graph with red color\nax.plot([0, 2, 4, 6, 8, 10], [1.3, 1.1, 1.0, 0.8, 0.7, 0.6], 'r-')\n\n# Draw a rectangle with a blue border\nax.add_patch(plt.Rectangle((0, 0), 10, 13, edgecolor='blue', facecolor='none'))\n\n# Draw a line graph with red color\nax.plot([0, 2, 4, 6, 8, 10], [1.3, 1.1, 1.0, 0.8, 0.7, 0.6], 'r-')\n\n# Draw a rectangle with a red border\nax.add_patch(plt.Rectangle((0, 0), 10, 13, edgecolor='red', facecolor='none'))\n\n# Draw a line graph with red color\nax.plot([0, 2, 4, 6, 8, 10], [1.3, 1.1, 1.0, 0.8, 0.7, 0.6], 'r-')\n\n# Draw a rectangle with a blue border\nax.add_patch(plt.Rectangle((0, 0), 10, 13, edgecolor='blue', facecolor='none'))\n\n# Draw a line graph with red color\nax.plot([0, 2, 4, 6, 8, 10], [1.3, 1.1, 1.0, 0.8, 0.7, 0.6], 'r-')\n\n# Draw a rectangle with a red border\nax.add_patch(plt.Rectangle((0, 0), 10, 13, edgecolor='red', facecolor='none'))\n\n# Draw a line graph with red color\nax.plot([0, 2, 4, 6, 8, 10], [1.3, 1.1, 1.0, 0.8, 0.7, 0.6], 'r-')\n\n# Draw a rectangle with a blue border\nax.add_patch(plt.Rectangle((0, 0), 10, 13, edgecolor='blue', facecolor='none'))\n\n# Draw a line graph with red color\nax.plot([0, 2, 4, 6, 8, 10], [1.3, 1.1, 1.0, 0.8, 0.7, 0.6], 'r-')\n\n# Draw a rectangle with a red border\nax.add_patch(plt.Rectangle((0, 0), 10, 13, edgecolor='red', facecolor='none'))\n\n# Draw a line graph with red color\nax.plot([0, 2, 4, 6, 8, 10], [1.3, 1.1, 1.0, 0.8, 0.7, 0.6], 'r-')\n\n# Draw a rectangle with a blue border\nax.add_patch(plt.Rectangle((0, 0), 10, 13, edgecolor='blue', facecolor='none'))\n\n# Draw a line graph with red color\nax.plot([0, 2, 4, 6, 8, 10], [1.3, 1.1, 1.0, 0.8, 0.7, 0.6], 'r-')\n\n# Draw a rectangle with a red border\nax.add_patch(plt.Rectangle((0, 0), 10, 13, edgecolor='red', facecolor='none'))\n\n# Draw a line graph with red color\nax.plot([0, 2, 4, 6, 8, 10], [1.3, 1.1, 1.0, 0.8, 0.7, 0.6], 'r-')\n\n# Draw a rectangle with a blue border\nax.add_patch(plt.Rectangle((0, 0), 10, 13, edgecolor='blue', facecolor='none'))\n\n# Draw a line graph with red color\nax.plot([0, 2, 4, 6, 8, 10], [1.3, 1.1, 1.0, 0.8, 0.7, 0.6], 'r-')\n\n# Draw a rectangle with a red border\nax.add_patch(plt.Rectangle((0, 0), 10, 13, edgecolor='red', facecolor='none'))\n\n# Draw a line graph with red color\nax.plot([0, 2, 4, 6, 8, 10], [1.3, 1.1, 1.0, 0.8, 0.7, 0.6], 'r-')\n\n# Draw a rectangle with a blue border\nax.add_patch(plt.Rectangle((0, 0), 10, 13, edgecolor='blue', facecolor='none'))\n\n# Draw a line graph with red color\nax.plot([0, 2, 4, 6, 8, 10], [1.3, 1.1, 1.0, 0.8, 0.7, 0.6], 'r-')\n\n# Draw a rectangle with a red border\nax.add_patch(plt.Rectangle((0, 0), 10, 13, edgecolor='red', facecolor='none'))\n\n# Draw a line graph with red color\nax.plot([0, 2, 4, 6, 8, 10], ["}
{"file": "dataset/ori_500/line_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nx = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ny1 = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0]\ny2 = [0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1]\ny3 = [0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2]\ny4 = [0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3]\ny5 = [0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3, 1.4]\ny6 = [0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3, 1.4, 1.5]\n\n# Create the plot\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\nax.plot(x, y1, 'b-', label='5-shot direct')\nax.plot(x, y2, 'or-', label='5-shot scratchpad')\nax.plot(x, y3, 'g-', label='5-shot rule-following')\nax.plot(x, y4, 'b-', label='5-shot direct')\nax.plot(x, y5, 'or-', label='5-shot scratchpad')\nax.plot(x, y6, 'g-', label='5-shot rule-following')\n\n# Set the labels and title\nax.set_xlabel('Digit Length')\nax.set_ylabel('Accuracy')\nax.set_title('Shot Accuracy by Digit Length')\n\n# Show the legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_50.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(5.0, 10.0))\n\n# Set the title of the plot\nax.set_title('Smoothed Representation')\n\n# Set the x-axis label\nax.set_xlabel('Time')\n\n# Set the y-axis label\nax.set_ylabel('Value')\n\n# Plot the data\nax.plot([2, 4, 6, 8, 10, 12, 14, 16, 18], [0.3, 0.2, 0.1, 0.2, 0.3, 0.2, 0.1, 0.2, 0.3], 'p-', color='purple', label='Smoothed Data')\nax.plot([2, 4, 6, 8, 10, 12, 14, 16, 18], [0.3, 0.2, 0.1, 0.2, 0.3, 0.2, 0.1, 0.2, 0.3], 'p-', color='purple')\n\n# Set the limits of the x-axis\nax.set_xlim(0, 20)\n\n# Set the limits of the y-axis\nax.set_ylim(-1, 1)\n\n# Add a legend to the plot\nax.legend()\n\n# Create a second subplot\nax2 = fig.add_subplot(212)\n\n# Set the title of the second subplot\nax2.set_title('First Difference of Data')\n\n# Set the x-axis label\nax2.set_xlabel('Time')\n\n# Set the y-axis label\nax2.set_ylabel('Value')\n\n# Plot the data\nax2.plot([2, 4, 6, 8, 10, 12, 14, 16, 18], [100, 90, 80, 70, 60, 50, 40, 30, 20], 'x-', color='orange', label='Difference Data')\nax2.plot([2, 4, 6, 8, 10, 12, 14, 16, 18], [100, 90, 80, 70, 60, 50, 40, 30, 20], 'x-', color='orange')\n\n# Set the limits of the x-axis\nax2.set_xlim(0, 20)\n\n# Set the limits of the y-axis\nax2.set_ylim(-1, 100)\n\n# Add a legend to the second subplot\nax2.legend()\n\n# Create a third subplot\nax3 = fig.add_subplot(213)\n\n# Set the title of the third subplot\nax3.set_title('Cumulative Sum Over Time')\n\n# Set the x-axis label\nax3.set_xlabel('Time')\n\n# Set the y-axis label\nax3.set_ylabel('Value')\n\n# Plot the data\nax3.plot([2, 4, 6, 8, 10, 12, 14, 16, 18], [25, 20, 15, 10, 5, 0, 5, 10, 15], 'o-', color='green', label='Cumulative Sum')\nax3.plot([2, 4, 6, 8, 10, 12, 14, 16, 18], [25, 20, 15, 10, 5, 0, 5, 10, 15], 'o-', color='green')\n\n# Set the limits of the x-axis\nax3.set_xlim(0, 20)\n\n# Set the limits of the y-axis\nax3.set_ylim(-1, 25)\n\n# Add a legend to the third subplot\nax3.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_51.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfig, axes = plt.subplots(4, 1, figsize=(6.0, 12.0))\n\n# Sin Wave\nx = np.linspace(0, 10, 100)\ny_sin = np.sin(x)\naxes[0].plot(x, y_sin, 'm-')\naxes[0].set_title('Sin Wave')\n\n# Cos Wave\ny_cos = np.cos(x)\naxes[1].plot(x, y_cos, 'g-')\naxes[1].set_title('Cos Wave')\n\n# Exp Decay\ny_exp = np.exp(-x)\naxes[2].plot(x, y_exp, 'b-')\naxes[2].set_title('Exp Decay')\n\n# Log Growth\ny_log = np.log(x + 1)\naxes[3].plot(x, y_log, 'r-')\naxes[3].set_title('Log Growth')\n\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_52.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(9, 6))\n\n# Plot the first graph\nax.plot([0.1, 0.2, 0.3, 0.4], [82, 85, 87, 89], 'r-', label='Positive bound')\nax.plot([0.1, 0.2, 0.3, 0.4], [79, 77, 75, 73], 'b-', label='Negative bound')\nax.set_title('a')\nax.legend()\n\n# Plot the second graph\nax.plot([0.1, 0.2, 0.3, 0.4], [82, 85, 87, 89], 'r-', label='Positive bound')\nax.plot([0.1, 0.2, 0.3, 0.4], [79, 77, 75, 73], 'b-', label='Negative bound')\nax.set_title('b')\nax.legend()\n\n# Plot the third graph\nax.plot([0.1, 0.2, 0.3, 0.4], [82, 85, 87, 89], 'r-', label='Positive bound')\nax.plot([0.1, 0.2, 0.3, 0.4], [79, 77, 75, 73], 'b-', label='Negative bound')\nax.set_title('c')\nax.legend()\n\n# Plot the fourth graph\nax.plot([0.1, 0.2, 0.3, 0.4], [82, 85, 87, 89], 'r-', label='Positive bound')\nax.plot([0.1, 0.2, 0.3, 0.4], [79, 77, 75, 73], 'b-', label='Negative bound')\nax.set_title('d')\nax.legend()\n\nplt.show()\n```"}
{"file": "dataset/ori_500/line_53.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\nx = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9]\ny1 = [82, 81, 80, 79, 78, 77, 76, 75, 74]\ny2 = [85, 84, 83, 82, 81, 80, 79, 78, 77]\ny3 = [80, 79, 78, 77, 76, 75, 74, 73, 72]\ny4 = [82, 81, 80, 79, 78, 77, 76, 75, 74]\ny5 = [85, 84, 83, 82, 81, 80, 79, 78, 77]\ny6 = [80, 79, 78, 77, 76, 75, 74, 73, 72]\n\n# Create a figure and a set of subplots\nfig, axs = plt.subplots(3, 2, figsize=(12, 8))\n\n# Plot the first subplot\naxs[0, 0].plot(x, y1, 'r-')\naxs[0, 0].set_title('Positive Bound')\naxs[0, 0].set_xlabel('Time')\naxs[0, 0].set_ylabel('Value')\n\n# Plot the second subplot\naxs[0, 1].plot(x, y2, 'g-')\naxs[0, 1].set_title('Negative Bound')\naxs[0, 1].set_xlabel('Time')\naxs[0, 1].set_ylabel('Value')\n\n# Plot the third subplot\naxs[1, 0].plot(x, y3, 'b-')\naxs[1, 0].set_title('Contrastive Loss Weight')\naxs[1, 0].set_xlabel('Time')\naxs[1, 0].set_ylabel('Value')\n\n# Plot the fourth subplot\naxs[1, 1].plot(x, y4, 'm-')\naxs[1, 1].set_title('Fuzzy Coefficient')\naxs[1, 1].set_xlabel('Time')\naxs[1, 1].set_ylabel('Value')\n\n# Plot the fifth subplot\naxs[2, 0].plot(x, y5, 'c-')\naxs[2, 0].set_title('Additional Metric 1')\naxs[2, 0].set_xlabel('Time')\naxs[2, 0].set_ylabel('Value')\n\n# Plot the sixth subplot\naxs[2, 1].plot(x, y6, 'y-')\naxs[2, 1].set_title('Additional Metric 2')\naxs[2, 1].set_xlabel('Time')\naxs[2, 1].set_ylabel('Value')\n\n# Adjust layout\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_54.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, axes = plt.subplots(1, 3, figsize=(12, 4))\n\n# Define the data for each subplot\ndata = [\n    (['Passive', 'Rail', 'Replay', 'Sportive'], [1.2, 1.1, 1.0, 0.9], [0.8, 0.7, 0.6, 0.5]),\n    (['Passive', 'Rail', 'Replay', 'Sportive'], [1.3, 1.2, 1.1, 1.0], [0.9, 0.8, 0.7, 0.6]),\n    (['Passive', 'Rail', 'Replay', 'Sportive'], [1.4, 1.3, 1.2, 1.1], [1.0, 0.9, 0.8, 0.7])\n]\n\n# Plot the data\nfor ax, (styles, relax, stress) in zip(axes, data):\n    ax.plot(relax, stress, 'ro-')\n    ax.set_xlabel('Relaxation Level')\n    ax.set_ylabel('Stress Level')\n    ax.set_title('Driving Style')\n    for i, style in enumerate(styles):\n        ax.text(relax[i], stress[i], style, ha='center', va='bottom')\n\n# Add a legend\nlegend_elements = [plt.Line2D([0], [0], marker='o', color='w', label='Passive', markerfacecolor='b', markersize=10),\n                  plt.Line2D([0], [0], marker='o', color='w', label='Rail', markerfacecolor='r', markersize=10),\n                  plt.Line2D([0], [0], marker='o', color='w', label='Replay', markerfacecolor='g', markersize=10),\n                  plt.Line2D([0], [0], marker='o', color='w', label='Sportive', markerfacecolor='y', markersize=10)]\naxes[0].legend(handles=legend_elements)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_55.pdf", "response": "import matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8, 3))\n\n# Set the title of the plot\nax.set_title('Dynamic Performance Gain Across Different n_aug Levels')\n\n# Set the x-axis label\nax.set_xlabel('n_aug')\n\n# Set the y-axis label\nax.set_ylabel('Performance Gain (%)')\n\n# Define the data for the plot\nx = [0, 0.125, 0.25, 0.5, 1, 2, 4, 8]\ny1 = [7, 7, 6, 6, 5, 5, 4, 4]\ny2 = [8, 7, 6, 5, 4, 3, 2, 1]\ny3 = [7, 6, 5, 4, 3, 2, 1, 0]\n\n# Plot the data\nax.plot(x, y1, 'b-', label='Content')\nax.plot(x, y2, 'r-', label='Organization')\nax.plot(x, y3, 'g-', label='Language')\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()"}
{"file": "dataset/ori_500/line_56.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\ndecomp_norms = [0, 20, 40, 60, 80]\naccuracies = [0.65, 0.70, 0.75, 0.80, 0.85]\ncoco_10k = [0.60, 0.65, 0.70, 0.75, 0.80]\nlaion_10k = [0.60, 0.65, 0.70, 0.75, 0.80]\ncoco_5k = [0.60, 0.65, 0.70, 0.75, 0.80]\nlaion_5k = [0.60, 0.65, 0.70, 0.75, 0.80]\n\n# Create a figure and a set of subplots\nfig, axs = plt.subplots(1, 3, figsize=(9.0, 3.0))\n\n# Plot 1: COCO 10K\naxs[0].plot(decomp_norms, accuracies, 'r-')\naxs[0].set_title('COCO 10K')\naxs[0].set_xlabel('Decomposition IO Norm')\naxs[0].set_ylabel('Accuracy')\naxs[0].text(0, 0.60, 'COCO (10k)', color='red')\n\n# Plot 2: LAION 10K\naxs[1].plot(decomp_norms, accuracies, 'b-')\naxs[1].set_title('LAION 10K')\naxs[1].set_xlabel('Decomposition IO Norm')\naxs[1].set_ylabel('Accuracy')\naxs[1].text(0, 0.60, 'LAION (10k)', color='blue')\n\n# Plot 3: COCO & LAION 5K\naxs[2].plot(decomp_norms, accuracies, 'g-')\naxs[2].set_title('COCO & LAION 5K')\naxs[2].set_xlabel('Decomposition IO Norm')\naxs[2].set_ylabel('Accuracy')\naxs[2].text(0, 0.60, 'COCO (5k)', color='green')\naxs[2].text(0, 0.55, 'LAION (5k)', color='orange')\n\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_57.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis for the first subplot\nfig, ax = plt.subplots(figsize=(12, 9))\nax.plot([0.025, 0.05, 0.075, 0.1, 0.125, 0.15, 0.175, 0.2], [0.18, 0.16, 0.14, 0.12, 0.1, 0.08, 0.06, 0.04], 'b-')\nax.plot([0.025, 0.05, 0.075, 0.1, 0.125, 0.15, 0.175, 0.2], [0.18, 0.16, 0.14, 0.12, 0.1, 0.08, 0.06, 0.04], 'ro')\nax.set_xlabel('Parameter Rate')\nax.set_ylabel('Error Rate vs Learning Rate')\nax.set_title('Error Rate vs Learning Rate')\nax.grid(True)\n\n# Create a figure and axis for the second subplot\nfig, ax = plt.subplots(figsize=(12, 9))\nax.plot([0.025, 0.05, 0.075, 0.1, 0.125, 0.15, 0.175, 0.2], [0.18, 0.16, 0.14, 0.12, 0.1, 0.08, 0.06, 0.04], 'r-')\nax.plot([0.025, 0.05, 0.075, 0.1, 0.125, 0.15, 0.175, 0.2], [0.18, 0.16, 0.14, 0.12, 0.1, 0.08, 0.06, 0.04], 'go')\nax.set_xlabel('Parameter Rate')\nax.set_ylabel('Accuracy vs Dropout')\nax.set_title('Accuracy vs Dropout')\nax.grid(True)\n\n# Create a figure and axis for the third subplot\nfig, ax = plt.subplots(figsize=(12, 9))\nax.plot([0.025, 0.05, 0.075, 0.1, 0.125, 0.15, 0.175, 0.2], [0.18, 0.16, 0.14, 0.12, 0.1, 0.08, 0.06, 0.04], 'g-')\nax.plot([0.025, 0.05, 0.075, 0.1, 0.125, 0.15, 0.175, 0.2], [0.18, 0.16, 0.14, 0.12, 0.1, 0.08, 0.06, 0.04], 'bo')\nax.set_xlabel('Parameter Rate')\nax.set_ylabel('Error Rate vs Learning Rate')\nax.set_title('Error Rate vs Learning Rate')\nax.grid(True)\n\n# Create a figure and axis for the fourth subplot\nfig, ax = plt.subplots(figsize=(12, 9))\nax.plot([0.025, 0.05, 0.075, 0.1, 0.125, 0.15, 0.175, 0.2], [0.18, 0.16, 0.14, 0.12, 0.1, 0.08, 0.06, 0.04], 'b-')\nax.plot([0.025, 0.05, 0.075, 0.1, 0.125, 0.15, 0.175, 0.2], [0.18, 0.16, 0.14, 0.12, 0.1, 0.08, 0.06, 0.04], 'ro')\nax.set_xlabel('Parameter Rate')\nax.set_ylabel('Accuracy vs Dropout')\nax.set_title('Accuracy vs Dropout')\nax.grid(True)\n\n# Create a figure and axis for the fifth subplot\nfig, ax = plt.subplots(figsize=(12, 9))\nax.plot([0.025, 0.05, 0.075, 0.1, 0.125, 0.15, 0.175, 0.2], [0.18, 0.16, 0.14, 0.12, 0.1, 0.08, 0.06, 0.04], 'r-')\nax.plot([0.025, 0.05, 0.075, 0.1, 0.125, 0.15, 0.175, 0.2], [0.18, 0.16, 0.14, 0.12, 0.1, 0.08, 0.06, 0.04], 'go')\nax.set_xlabel('Parameter Rate')\nax.set_ylabel('Error Rate vs Learning Rate')\nax.set_title('Error Rate vs Learning Rate')\nax.grid(True)\n\n# Create a figure and axis for the sixth subplot\nfig, ax = plt.subplots(figsize=(12, 9))\nax.plot([0.025, 0.05, 0.075, 0.1, 0.125, 0.15, 0.175, 0.2], [0.18, 0.16, 0.14, 0.12, 0.1, 0.08, 0.06, 0.04], 'g-')\nax.plot([0.025, 0.05, 0.075, 0.1, 0.125, 0.15, 0.175, 0.2], [0.18, 0.16, 0.14, 0.12, 0.1, 0.08, 0.06, 0.04], 'bo')\nax.set_xlabel('Parameter Rate')\nax.set_ylabel('Accuracy vs Dropout')\nax.set_title('Accuracy vs Dropout')\nax.grid(True)\nplt.show()\n```"}
{"file": "dataset/ori_500/line_58.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 4))\n\n# Plot the first graph\nax.plot([0, 25, 50, 100, 150, 200], [0.6, 0.5, 0.4, 0.3, 0.2, 0.1], 'b-')\nax.plot([0, 25, 50, 100, 150, 200], [0.7, 0.6, 0.5, 0.4, 0.3, 0.2], 'r-')\n\n# Add labels and title\nax.set_xlabel('Training Iterations')\nax.set_ylabel('Metric Value')\nax.set_title('Metric 1')\n\n# Add legend\nlegend_labels = ['Base Model', 'Our Model']\nfor i, label in enumerate(legend_labels):\n    ax.text(0, 0.9 - i * 0.1, label, color='blue' if i == 0 else 'orange')\n\n# Create a second subplot\nax2 = fig.add_subplot(122)\n\n# Plot the second graph\nax2.plot([0, 25, 50, 100, 150, 200], [0.6, 0.5, 0.4, 0.3, 0.2, 0.1], 'b-')\nax2.plot([0, 25, 50, 100, 150, 200], [0.7, 0.6, 0.5, 0.4, 0.3, 0.2], 'r-')\n\n# Add labels and title\nax2.set_xlabel('Training Iterations')\nax2.set_ylabel('Metric Value')\nax2.set_title('Metric 2')\n\n# Add legend\nlegend_labels = ['Base Model', 'Our Model']\nfor i, label in enumerate(legend_labels):\n    ax2.text(0, 0.9 - i * 0.1, label, color='blue' if i == 0 else 'orange')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_59.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(5, 3))\n\n# Set the title of the plot\nax.set_title('Accuracy')\n\n# Define the x-axis values\nx = [0, 25, 50, 75, 100, 125, 150, 175, 200]\n\n# Define the y-axis values for the first line\ny1 = [0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1, 0.0]\n\n# Define the y-axis values for the second line\ny2 = [0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1, 0.0, 0.0]\n\n# Plot the lines\nax.plot(x, y1, label='Base Model', color='cyan')\nax.plot(x, y2, label='Our Model', color='cyan')\n\n# Add a legend\nax.legend()\n\n# Set the x-axis label\nax.set_xlabel('Training Iterations')\n\n# Set the y-axis label\nax.set_ylabel('Metric Value')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(9, 6))\n\n# Set the x-axis limits\nax.set_xlim(10**1, 10**7)\n\n# Set the y-axis limits\nax.set_ylim(10**-10, 10**-3)\n\n# Set the x-axis ticks\nax.set_xticks([10**1, 2*10**1, 3*10**1, 4*10**1, 5*10**1, 6*10**1])\n\n# Set the y-axis ticks\nax.set_yticks([10**-10, 10**-8, 10**-6, 10**-4, 10**-2, 10**0])\n\n# Set the x-axis tick labels\nax.set_xticklabels(['10^1', '2*10^1', '3*10^1', '4*10^1', '5*10^1', '6*10^1'])\n\n# Set the y-axis tick labels\nax.set_yticklabels(['10^-10', '10^-8', '10^-6', '10^-4', '10^-2', '10^0'])\n\n# Set the title of the plot\nax.set_title('Plot Title')\n\n# Set the x-axis label\nax.set_xlabel('N')\n\n# Set the y-axis label\nax.set_ylabel('Y')\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((10**1, 10**-10), 10**1, 10**-10, color='blue')\nax.add_patch(rect)\n\n# Add a line to the plot\nline = plt.Line2D([10**1, 10**2], [10**-10, 10**-10], color='red')\nax.add_line(line)\n\n# Add a circle to the plot\ncircle = plt.Circle((10**1, 10**-10), 10**-10, color='green')\nax.add_artist(circle)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_60.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Performance and Efficiency Over Weeks')\n\n# Set the x-axis label\nax.set_xlabel('Weeks')\n\n# Set the y-axis label\nax.set_ylabel('Efficiency')\n\n# Set the x-axis limits\nax.set_xlim(0, 25)\n\n# Set the y-axis limits\nax.set_ylim(-1.5, 1.5)\n\n# Set the x-axis ticks\nax.set_xticks([0, 5, 10, 15, 20, 25])\n\n# Set the y-axis ticks\nax.set_yticks([-1.5, -1.0, -0.5, 0.0, 0.5, 1.0, 1.5])\n\n# Draw a rectangle for the Performance graph\nax.add_patch(plt.Rectangle((0, 0), 5, 1, color='blue'))\n\n# Draw a rectangle for the Efficiency graph\nax.add_patch(plt.Rectangle((5, 0), 10, 1, color='red'))\n\n# Draw a rectangle for the Efficiency graph\nax.add_patch(plt.Rectangle((15, 0), 10, 1, color='red'))\n\n# Draw a rectangle for the Efficiency graph\nax.add_patch(plt.Rectangle((20, 0), 5, 1, color='blue'))\n\n# Draw a rectangle for the Efficiency graph\nax.add_patch(plt.Rectangle((25, 0), 0, 1, color='red'))\n\n# Draw a rectangle for the Efficiency graph\nax.add_patch(plt.Rectangle((0, 0), 5, 1, color='blue'))\n\n# Draw a rectangle for the Efficiency graph\nax.add_patch(plt.Rectangle((5, 0), 10, 1, color='red'))\n\n# Draw a rectangle for the Efficiency graph\nax.add_patch(plt.Rectangle((15, 0), 10, 1, color='red'))\n\n# Draw a rectangle for the Efficiency graph\nax.add_patch(plt.Rectangle((20, 0), 5, 1, color='blue'))\n\n# Draw a rectangle for the Efficiency graph\nax.add_patch(plt.Rectangle((25, 0), 0, 1, color='red'))\n\n# Draw a rectangle for the Efficiency graph\nax.add_patch(plt.Rectangle((0, 0), 5, 1, color='blue'))\n\n# Draw a rectangle for the Efficiency graph\nax.add_patch(plt.Rectangle((5, 0), 10, 1, color='red'))\n\n# Draw a rectangle for the Efficiency graph\nax.add_patch(plt.Rectangle((15, 0), 10, 1, color='red'))\n\n# Draw a rectangle for the Efficiency graph\nax.add_patch(plt.Rectangle((20, 0), 5, 1, color='blue'))\n\n# Draw a rectangle for the Efficiency graph\nax.add_patch(plt.Rectangle((25, 0), 0, 1, color='red'))\n\n# Draw a rectangle for the Efficiency graph\nax.add_patch(plt.Rectangle((0, 0), 5, 1, color='blue'))\n\n# Draw a rectangle for the Efficiency graph\nax.add_patch(plt.Rectangle((5, 0), 10, 1, color='red'))\n\n# Draw a rectangle for the Efficiency graph\nax.add_patch(plt.Rectangle((15, 0), 10, 1, color='red'))\n\n# Draw a rectangle for the Efficiency graph\nax.add_patch(plt.Rectangle((20, 0), 5, 1, color='blue'))\n\n# Draw a rectangle for the Efficiency graph\nax.add_patch(plt.Rectangle((25, 0), 0, 1, color='red'))\n\n# Draw a rectangle for the Efficiency graph\nax.add_patch(plt.Rectangle((0, 0), 5, 1, color='blue'))\n\n# Draw a rectangle for the Efficiency graph\nax.add_patch(plt.Rectangle((5, 0), 10, 1, color='red'))\n\n# Draw a rectangle for the Efficiency graph\nax.add_patch(plt.Rectangle((15, 0), 10, 1, color='red'))\n\n# Draw a rectangle for the Efficiency graph\nax.add_patch(plt.Rectangle((20, 0), 5, 1, color='blue'))\n\n# Draw a rectangle for the Efficiency graph\nax.add_patch(plt.Rectangle((25, 0), 0, 1, color='red'))\n\n# Draw a rectangle for the Efficiency graph\nax.add_patch(plt.Rectangle((0, 0), 5, 1, color='blue'))\n\n# Draw a rectangle for the Efficiency graph\nax.add_patch(plt.Rectangle((5, 0), 10, 1, color='red'))\n\n# Draw a rectangle for the Efficiency graph\nax.add_patch(plt.Rectangle((15, 0), 10, 1, color='red'))\n\n# Draw a rectangle for the Efficiency graph\nax.add_patch(plt.Rectangle((20, 0), 5, 1, color='blue'))\n\n# Draw a rectangle for the Efficiency graph\nax.add_patch(plt.Rectangle((25, 0), 0, 1, color='red'))\n\n# Draw a rectangle for the Efficiency graph\nax.add_patch(plt.Rectangle((0, 0), 5, 1, color='blue'))\n\n# Draw a rectangle for the Efficiency graph\nax.add_patch(plt.Rectangle((5, 0), 10, 1, color='red'))\n\n# Draw a rectangle for the Efficiency graph\nax.add_patch(plt.Rectangle((15, 0), 10, 1, color='red'))\n\n# Draw a rectangle for the Efficiency graph\nax.add_patch(plt.Rectangle((20, 0), 5, 1, color='blue'))\n\n# Draw a rectangle for the Efficiency graph\nax.add_patch(plt.Rectangle((25, 0), 0, 1, color='red'))\n\n# Draw a rectangle for the Efficiency graph\nax.add_patch(plt.Rectangle((0, 0), 5, 1, color='blue'))\n\n# Draw a rectangle for the Efficiency graph\nax.add_patch(plt.Rectangle((5, 0), 10, 1, color='red'))\n\n# Draw a rectangle for the Efficiency graph\nax.add_patch(plt.Rectangle((15, 0), 10, 1, color='red'))\n\n# Draw a rectangle for the Efficiency graph\nax.add_patch(plt.Rectangle((20, 0), 5, 1, color='blue'))\n\n# Draw a rectangle for the Efficiency graph\nax.add_patch(plt.Rectangle((25, 0), 0, 1, color='red'))\n\n# Draw a rectangle for the Efficiency graph\nax.add_patch(plt.Rectangle((0, 0), 5, 1, color='blue'))\n\n# Draw a rectangle for the Efficiency graph\nax.add_patch(plt.Rectangle((5, 0), 10, 1, color='red'))\n\n# Draw a rectangle for the Efficiency graph\nax.add_patch(plt.Rectangle((15, 0), 10, 1, color='red'))\n\n# Draw a rectangle for the Efficiency graph\nax.add_patch(plt.Rectangle((20, 0), 5, 1, color='blue'))\n\n# Draw a rectangle for the Efficiency graph\nax.add_patch(plt.Rectangle((25, 0), 0, 1, color='red'))\n\n# Draw a rectangle for the Efficiency graph\nax.add_patch(plt.Rectangle((0, 0), 5, 1, color='blue'))\n\n# Draw a rectangle for the Efficiency graph\nax.add_patch(plt.Rectangle((5, 0), 10, 1, color='red'))\n\n# Draw a rectangle for the Efficiency graph\nax.add_patch(plt.Rectangle((15, 0), 10, 1, color='red'))\n\n# Draw a rectangle for the Efficiency graph\nax.add_patch(plt.Rectangle((20, 0), 5, 1, color='blue'))\n\n# Draw a rectangle for the Efficiency graph\nax.add_patch(plt.Rectangle((25, 0), 0, 1, color='red'))\n\n# Draw a rectangle for the Efficiency graph\nax.add_patch(plt.Rectangle((0, 0), 5, 1, color='blue'))\n\n# Draw a rectangle for the Efficiency graph\nax.add_patch(plt.Rectangle((5, 0), 10, 1, color='red'))\n\n# Draw a rectangle for the Efficiency graph\nax.add_patch(plt.Rectangle((15, 0), 10, 1, color='red'))\n\n# Draw a rectangle for the Efficiency graph\nax.add_patch(plt.Rectangle((20, 0), 5, 1, color='blue'))\n\n# Draw a rectangle for the Efficiency graph\nax.add_patch(plt.Rectangle((25, 0), 0, 1, color='red'))\n\n# Draw a rectangle for the Efficiency graph\nax.add_patch(plt.Rectangle((0, 0), 5, 1, color='blue'))\n\n# Draw a rectangle for the Efficiency graph\nax.add_patch(plt.Rectangle((5, 0), 10, 1, color='red'))\n\n# Draw a rectangle for the Efficiency graph\nax.add_patch(plt.Rectangle((15, 0), 10, 1, color='red'))\n\n# Draw a rectangle for the Efficiency graph\nax.add_patch(plt.Rectangle((20, 0), 5, 1, color='blue'))\n\n# Draw a rectangle for the Efficiency graph\nax.add_patch(plt.Rectangle((25, 0), 0, 1, color='red'))\n\n# Draw a rectangle for the Efficiency graph\nax.add_patch(plt.Rectangle((0, 0), 5, 1, color='blue'))\n\n# Draw a rectangle for the Efficiency graph\nax.add_patch(plt.Rectangle((5, 0), 10, 1, color='red'))\n\n# Draw a rectangle for the Efficiency graph\nax.add_patch(plt.Rectangle((15, 0), 10, 1, color='red'))\n\n# Draw a rectangle for the Efficiency graph\nax.add_patch(plt.Rectangle((20, 0), 5, 1, color='blue'))\n\n# Draw a rectangle for the Efficiency graph\nax.add_patch(plt.Rectangle((25, 0), 0, 1, color='red'))\n\n# Draw a rectangle for the Efficiency graph\nax.add_patch(plt.Rectangle((0, 0), 5, 1, color='blue'))\n\n# Draw a rectangle for the Efficiency graph\nax.add_patch(plt.Rectangle((5, 0), 10, 1, color='red'))\n\n# Draw a rectangle for the Efficiency graph\nax.add_patch(plt.Rectangle((15, 0), 10, 1, color='red'))\n\n# Draw a rectangle for the Efficiency graph\nax.add_patch(plt.Rectangle((20, 0), 5, 1, color='blue'))\n\n# Draw a rectangle for the Efficiency graph\nax.add_patch(plt.Rectangle((25, 0), 0, 1, color='red'))\n\n# Draw a rectangle for the Efficiency graph\nax.add_patch(plt.Rectangle((0, 0), 5, 1, color='blue'))\n\n# Draw a rectangle for the Efficiency graph\nax.add_patch(plt.Rectangle((5, 0), 10, 1, color='red'))\n\n# Draw a rectangle for the Efficiency graph\nax.add_patch(plt.Rectangle((15, 0), 10, 1, color='red'))\n\n# Draw a rectangle for the Efficiency graph\nax.add_patch(plt.Rectangle((20, 0), 5, 1, color='blue'))\n\n# Draw a rectangle for the Efficiency graph\nax.add_patch(plt.Rectangle((25, 0), 0, 1, color='red'))\n\n# Draw a rectangle for the Efficiency graph\nax.add_patch(plt.Rectangle((0, 0), 5, 1, color='blue'))\n\n# Draw a rectangle for the Efficiency graph\nax.add_patch(plt.Rectangle((5, 0), 10, 1, color='red'))\n\n# Draw a rectangle for the Efficiency graph\nax.add_patch(plt.Rectangle((15, 0), 10, 1, color='red'))\n\n# Draw a rectangle for the Efficiency graph\nax.add_patch(plt.Rectangle((20, 0), 5, 1, color='blue'))\n\n# Draw a rectangle for the Efficiency graph\nax.add_patch(plt.Rectangle((25, 0), 0, 1, color='red'))\n\n# Draw a rectangle for the Efficiency graph\nax.add_patch(plt.Rectangle((0, 0), 5, 1, color='blue'))\n\n# Draw a rectangle for the Efficiency graph\nax.add_patch(plt.Rectangle((5, 0), 10, 1, color='red'))\n\n# Draw a rectangle for the Efficiency graph\nax.add_patch(plt.Rectangle((15, 0), 10, 1, color='red'))\n\n# Draw a rectangle for the Efficiency graph\nax.add_patch(plt.Rectangle((20, 0), 5, 1, color='blue'))\n\n# Draw a rectangle for the Efficiency graph\nax.add_patch(plt.Rectangle((25, 0), 0, 1, color='red'))\n\n# Draw a rectangle for the Efficiency graph\nax.add_patch(plt.Rectangle((0, 0), 5, 1, color='blue'))\n\n# Draw a rectangle for the Efficiency graph\nax.add_patch(plt.Rectangle((5, 0), 10, 1, color='red'))\n\n# Draw a rectangle for the Efficiency graph\nax.add_patch(plt.Rectangle((15, 0), 10, 1, color='red'))\n\n# Draw a rectangle for the Efficiency graph\nax.add_patch(plt.Rectangle((20, 0), 5, 1, color='blue'))\n\n# Draw a rectangle for the Efficiency graph\nax.add_patch(plt.Rectangle((25, 0), 0, 1, color='red'))\n\n# Draw a rectangle for the Efficiency graph\nax.add_patch(plt.Rectangle((0, 0), 5, 1, color='blue'))\n\n# Draw a rectangle for the Efficiency graph\nax.add_patch(plt.Rectangle((5, 0), 10, 1, color='red'))\n\n# Draw a rectangle for the Efficiency graph\nax.add_patch(plt.Rectangle((15, 0), 10, 1, color='red'))\n\n# Draw a rectangle for the Efficiency graph\nax.add_patch(plt.Rectangle((20, 0), 5, 1, color='blue'))\n\n# Draw a rectangle for the Efficiency graph\nax.add_patch(plt.Rectangle((25, 0), 0, 1, color='red'))\n\n# Draw a rectangle for the Efficiency graph\nax.add_patch(plt.Rectangle((0, 0), 5, 1, color='blue'))\n\n# Draw a rectangle for the Efficiency graph\nax.add_patch(plt.Rectangle((5, 0), 10, 1, color='red'))\n\n# Draw a rectangle for the Efficiency graph\nax.add_patch(plt.Rectangle((15, 0), 10, 1, color='red'))\n\n# Draw a rectangle for the Efficiency graph\nax.add_patch(plt.Rectangle((20, 0), 5, 1, color='blue'))\n\n# Draw a rectangle for the Efficiency graph\nax.add_patch(plt.Rectangle((25, 0), 0, 1, color='red'))\n\n# Draw a rectangle for the Efficiency graph\nax.add_patch(plt.Rectangle((0, 0), 5, 1, color='blue'))\n\n# Draw a rectangle for the Efficiency graph\nax.add_patch(plt.Rectangle((5, 0), 10, 1, color='red'))\n\n# Draw a rectangle for the Efficiency graph\nax.add_patch(plt.Rectangle((15, 0), 10, 1, color='red'))\n\n# Draw a rectangle for the Efficiency graph\nax.add_patch(plt.Rectangle((20, 0), 5, 1, color='blue'))\n\n# Draw a rectangle for the Efficiency graph\nax.add_patch(plt.Rectangle((25, 0), 0, 1, color='red'))\n\n# Draw a rectangle for the Efficiency graph\nax.add_patch(plt.Rectangle((0, 0), 5, 1, color='blue'))\n\n# Draw a rectangle for the Efficiency graph\nax.add_patch(plt.Rectangle((5, 0), 10, 1, color='red'))\n\n# Draw a rectangle for the Efficiency graph\nax.add_patch(plt.Rectangle((15, 0), 10, 1, color='red'))\n\n# Draw a rectangle for the Efficiency graph\nax.add_patch(plt.Rectangle((20, 0), 5, 1, color='blue'))\n\n# Draw a rectangle for the Efficiency graph\nax.add_patch(plt.Rectangle((25, 0), 0, 1, color='red'))\n\n# Draw a rectangle for the Efficiency graph\nax.add_patch(plt.Rectangle((0, 0), 5, 1, color='blue'))\n\n# Draw a rectangle for the Efficiency graph\nax.add_patch(plt.Rectangle((5, 0), 10, 1, color='red'))\n\n# Draw a rectangle for the Efficiency graph\nax.add_patch(plt.Rectangle((15, 0), 10, 1, color='red'))\n\n# Draw a rectangle for the Efficiency graph\nax.add_patch(plt.Rectangle((20, 0), 5, 1, color='blue'))\n\n# Draw a rectangle for the Efficiency graph\nax.add_patch(plt.Rectangle((25, 0), 0, 1, color='red'))\n\n# Draw a rectangle for the Efficiency graph\nax.add_patch(plt.Rectangle((0, 0), 5, 1, color='blue'))\n\n# Draw a rectangle for the Efficiency graph\nax.add_patch(plt.Rectangle((5, 0), 10, 1, color='red'))\n\n# Draw a rectangle for the Efficiency graph\nax.add_patch(plt.Rectangle((15, 0), 10, 1, color='red'))\n\n# Draw a rectangle for the Efficiency graph\nax.add_patch(plt.Rectangle((20, 0), 5, 1, color='blue'))\n\n# Draw a rectangle for the Efficiency graph\nax.add_patch(plt.Rectangle((25, 0), 0, 1, color='red'))\n\n# Draw a rectangle for the Efficiency graph\nax.add_patch(plt.Rectangle((0, 0), 5, 1, color='blue'))\n\n# Draw a rectangle for the Efficiency graph\nax.add_patch(plt.Rectangle((5, 0), 10, 1, color='"}
{"file": "dataset/ori_500/line_61.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Set the title of the plot\nax.set_title('Performance and Efficiency Analysis')\n\n# Set the x-axis label\nax.set_xlabel('Weeks')\n\n# Set the y-axis label\nax.set_ylabel('Values')\n\n# Define the data for the plots\nx = [0, 5, 10, 15, 20, 25]\ny1 = [0.3, 0.8, 0.7, 0.9, 0.5, 0.2]\ny2 = [0.4, 0.9, 0.8, 0.6, 0.3, 0.1]\ny3 = [0.5, 1.0, 0.9, 0.7, 0.4, 0.2]\ny4 = [0.6, 1.1, 1.0, 0.8, 0.5, 0.3]\n\n# Plot the data\nax.plot(x, y1, 'b-', label='Performance')\nax.plot(x, y2, 'r-', label='Efficiency')\nax.plot(x, y3, 'b--', label='Performance')\nax.plot(x, y4, 'r--', label='Efficiency')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_62.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Detailed Performance and Efficiency Analysis Over Weeks')\n\n# Set the x-axis label\nax.set_xlabel('Weeks')\n\n# Set the y-axis label\nax.set_ylabel('Efficiency')\n\n# Set the x-axis limits\nax.set_xlim(0, 30)\n\n# Set the y-axis limits\nax.set_ylim(0, 12)\n\n# Set the x-axis ticks\nax.set_xticks([0, 5, 10, 15, 20, 25, 30])\n\n# Set the y-axis ticks\nax.set_yticks([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n\n# Set the background color of the plot\nax.set_facecolor('#e0f3db')\n\n# Set the grid lines\nax.grid(True)\n\n# Set the performance data\nperformance_data = [0.2, 0.4, 0.6, 0.8, 1.0, 1.2, 1.4, 1.6, 1.8, 2.0, 2.2, 2.4, 2.6, 2.8, 3.0, 3.2, 3.4, 3.6, 3.8, 4.0, 4.2, 4.4, 4.6, 4.8, 5.0, 5.2, 5.4, 5.6, 5.8, 6.0, 6.2]\n\n# Set the efficiency data\nefficiency_data = [0.2, 0.4, 0.6, 0.8, 1.0, 1.2, 1.4, 1.6, 1.8, 2.0, 2.2, 2.4, 2.6, 2.8, 3.0, 3.2, 3.4, 3.6, 3.8, 4.0, 4.2, 4.4, 4.6, 4.8, 5.0, 5.2, 5.4, 5.6, 5.8, 6.0, 6.2]\n\n# Plot the performance data\nax.plot(performance_data, 'b-')\n\n# Plot the efficiency data\nax.plot(efficiency_data, 'r-')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_63.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(12.0, 8.0))\n\n# Set the background color of the plot\nax.set_facecolor('beige')\n\n# Set the title of the plot\nax.set_title('Dynamic Data Presentation Across Weeks')\n\n# Set the x-axis label\nax.set_xlabel('Weeks')\n\n# Set the y-axis label\nax.set_ylabel('Normalized Value')\n\n# Define the data for each series\nx = [0, 5, 10, 15, 20, 25]\ny1 = [0.5, 0.7, 0.9, 0.6, 0.3, 0.1]\ny2 = [0.4, 0.6, 0.8, 0.5, 0.2, 0.0]\ny3 = [0.3, 0.5, 0.7, 0.4, 0.1, 0.0]\n\n# Plot the data with different colors and line styles\nax.plot(x, y1, 'b--', label='Data Series 1')\nax.plot(x, y2, 'g--', label='Data Series 2 with Gradient')\nax.plot(x, y3, 'm--', label='Data Series 3')\n\n# Add a legend to the plot\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_64.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nx = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ny1 = [90, 85, 80, 75, 70, 65, 60, 55, 50, 45]\ny2 = [85, 80, 75, 70, 65, 60, 55, 50, 45, 40]\ny3 = [80, 75, 70, 65, 60, 55, 50, 45, 40, 35]\ny4 = [75, 70, 65, 60, 55, 50, 45, 40, 35, 30]\ny5 = [70, 65, 60, 55, 50, 45, 40, 35, 30, 25]\ny6 = [65, 60, 55, 50, 45, 40, 35, 30, 25, 20]\n\n# Plotting\nfig, ax = plt.subplots(figsize=(12, 6))\nax.plot(x, y1, 'b-', label='BaCE')\nax.plot(x, y2, 'c-', label='LWF')\nax.plot(x, y3, 'g-', label='EWC')\nax.plot(x, y4, 'm-', label='SEQ')\n\n# Markers\nax.plot(1, 90, 's', color='blue')\nax.plot(2, 85, 's', color='cyan')\nax.plot(3, 80, 's', color='blue')\nax.plot(4, 75, 's', color='cyan')\nax.plot(5, 70, 's', color='blue')\nax.plot(6, 65, 's', color='cyan')\nax.plot(7, 60, 's', color='blue')\nax.plot(8, 55, 's', color='cyan')\nax.plot(9, 50, 's', color='blue')\nax.plot(10, 45, 's', color='cyan')\n\nax.plot(1, 85, '^', color='cyan')\nax.plot(2, 80, '^', color='blue')\nax.plot(3, 75, '^', color='cyan')\nax.plot(4, 70, '^', color='blue')\nax.plot(5, 65, '^', color='cyan')\nax.plot(6, 60, '^', color='blue')\nax.plot(7, 55, '^', color='cyan')\nax.plot(8, 50, '^', color='blue')\nax.plot(9, 45, '^', color='cyan')\nax.plot(10, 40, '^', color='blue')\n\nax.plot(1, 80, 'o', color='blue')\nax.plot(2, 75, 'o', color='cyan')\nax.plot(3, 70, 'o', color='blue')\nax.plot(4, 65, 'o', color='cyan')\nax.plot(5, 60, 'o', color='blue')\nax.plot(6, 55, 'o', color='cyan')\nax.plot(7, 50, 'o', color='blue')\nax.plot(8, 45, 'o', color='cyan')\nax.plot(9, 40, 'o', color='blue')\nax.plot(10, 35, 'o', color='cyan')\n\nax.plot(1, 75, 'd', color='cyan')\nax.plot(2, 70, 'd', color='blue')\nax.plot(3, 65, 'd', color='cyan')\nax.plot(4, 60, 'd', color='blue')\nax.plot(5, 55, 'd', color='cyan')\nax.plot(6, 50, 'd', color='blue')\nax.plot(7, 45, 'd', color='cyan')\nax.plot(8, 40, 'd', color='blue')\nax.plot(9, 35, 'd', color='cyan')\nax.plot(10, 30, 'd', color='blue')\n\nax.plot(1, 70, '<', color='blue')\nax.plot(2, 65, '<', color='cyan')\nax.plot(3, 60, '<', color='blue')\nax.plot(4, 55, '<', color='cyan')\nax.plot(5, 50, '<', color='blue')\nax.plot(6, 45, '<', color='cyan')\nax.plot(7, 40, '<', color='blue')\nax.plot(8, 35, '<', color='cyan')\nax.plot(9, 30, '<', color='blue')\nax.plot(10, 25, '<', color='cyan')\n\nax.plot(1, 65, '>', color='cyan')\nax.plot(2, 60, '>', color='blue')\nax.plot(3, 55, '>', color='cyan')\nax.plot(4, 50, '>', color='blue')\nax.plot(5, 45, '>', color='cyan')\nax.plot(6, 40, '>', color='blue')\nax.plot(7, 35, '>', color='cyan')\nax.plot(8, 30, '>', color='blue')\nax.plot(9, 25, '>', color='cyan')\nax.plot(10, 20, '>', color='blue')\n\nax.set_xlabel('Task')\nax.set_ylabel('Average Accuracy (%)')\nax.set_title('Average Accuracy of Different Models Over Time')\nax.legend()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_65.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\nx = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ny1 = [85, 80, 75, 70, 65, 60, 55, 50, 45, 40]\ny2 = [90, 85, 80, 75, 70, 65, 60, 55, 50, 45]\ny3 = [88, 83, 78, 73, 68, 63, 58, 53, 48, 43]\ny4 = [92, 87, 82, 77, 72, 67, 62, 57, 52, 47]\n\n# Create a figure and a set of subplots\nfig, axs = plt.subplots(1, 2, figsize=(8.0, 3.0))\n\n# Plot the first subplot\naxs[0].plot(x, y1, label='BaCE')\naxs[0].plot(x, y2, label='EWC')\naxs[0].set_title('Performance Comparison: BaCE vs EWC')\naxs[0].set_xlabel('Task')\naxs[0].set_ylabel('Performance (%)')\naxs[0].legend()\naxs[0].grid(True)\n\n# Plot the second subplot\naxs[1].plot(x, y3, label='LWF', color='red')\naxs[1].plot(x, y4, label='SEQ', color='pink')\naxs[1].set_title('Performance Comparison: LWF vs SEQ')\naxs[1].set_xlabel('Task')\naxs[1].set_ylabel('Performance (%)')\naxs[1].legend()\naxs[1].grid(True)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_66.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(9.0, 7.0))\n\n# Set the title of the plot\nax.set_title('model1 Performance')\n\n# Set the x-axis label\nax.set_xlabel('Iterations')\n\n# Set the y-axis label\nax.set_ylabel('Success Rate')\n\n# Create a rectangle patch for the shaded area\nrect = plt.Rectangle((0, 0), 100, 100, color='blue', alpha=0.5)\nax.add_patch(rect)\n\n# Create a line plot with blue color\nax.plot([0, 250, 500, 1000, 1500, 2000], [0.2, 0.4, 0.6, 0.8, 1.0, 1.2], 'b-')\n\n# Create a scatter plot with red color\nax.scatter([0, 250, 500, 1000, 1500, 2000], [0.2, 0.4, 0.6, 0.8, 1.0, 1.2], color='red')\n\n# Create a rectangle patch for the shaded area\nrect = plt.Rectangle((0, 0), 100, 100, color='pink', alpha=0.5)\nax.add_patch(rect)\n\n# Create a line plot with pink color\nax.plot([0, 250, 500, 1000, 1500, 2000], [0.2, 0.4, 0.6, 0.8, 1.0, 1.2], 'p-')\n\n# Create a scatter plot with blue color\nax.scatter([0, 250, 500, 1000, 1500, 2000], [0.2, 0.4, 0.6, 0.8, 1.0, 1.2], color='blue')\n\n# Create a rectangle patch for the shaded area\nrect = plt.Rectangle((0, 0), 100, 100, color='lightblue', alpha=0.5)\nax.add_patch(rect)\n\n# Create a line plot with light blue color\nax.plot([0, 250, 500, 1000, 1500, 2000], [0.2, 0.4, 0.6, 0.8, 1.0, 1.2], 'lb-')\n\n# Create a scatter plot with pink color\nax.scatter([0, 250, 500, 1000, 1500, 2000], [0.2, 0.4, 0.6, 0.8, 1.0, 1.2], color='pink')\n\n# Create a rectangle patch for the shaded area\nrect = plt.Rectangle((0, 0), 100, 100, color='lightpink', alpha=0.5)\nax.add_patch(rect)\n\n# Create a line plot with light pink color\nax.plot([0, 250, 500, 1000, 1500, 2000], [0.2, 0.4, 0.6, 0.8, 1.0, 1.2], 'lp-')\n\n# Create a scatter plot with blue color\nax.scatter([0, 250, 500, 1000, 1500, 2000], [0.2, 0.4, 0.6, 0.8, 1.0, 1.2], color='blue')\n\n# Create a rectangle patch for the shaded area\nrect = plt.Rectangle((0, 0), 100, 100, color='lightgreen', alpha=0.5)\nax.add_patch(rect)\n\n# Create a line plot with light green color\nax.plot([0, 250, 500, 1000, 1500, 2000], [0.2, 0.4, 0.6, 0.8, 1.0, 1.2], 'lg-')\n\n# Create a scatter plot with pink color\nax.scatter([0, 250, 500, 1000, 1500, 2000], [0.2, 0.4, 0.6, 0.8, 1.0, 1.2], color='pink')\n\n# Create a rectangle patch for the shaded area\nrect = plt.Rectangle((0, 0), 100, 100, color='lightcoral', alpha=0.5)\nax.add_patch(rect)\n\n# Create a line plot with light coral color\nax.plot([0, 250, 500, 1000, 1500, 2000], [0.2, 0.4, 0.6, 0.8, 1.0, 1.2], 'lc-')\n\n# Create a scatter plot with blue color\nax.scatter([0, 250, 500, 1000, 1500, 2000], [0.2, 0.4, 0.6, 0.8, 1.0, 1.2], color='blue')\n\n# Create a rectangle patch for the shaded area\nrect = plt.Rectangle((0, 0), 100, 100, color='lightskyblue', alpha=0.5)\nax.add_patch(rect)\n\n# Create a line plot with light sky blue color\nax.plot([0, 250, 500, 1000, 1500, 2000], [0.2, 0.4, 0.6, 0.8, 1.0, 1.2], 'ls-')\n\n# Create a scatter plot with pink color\nax.scatter([0, 250, 500, 1000, 1500, 2000], [0.2, 0.4, 0.6, 0.8, 1.0, 1.2], color='pink')\n\n# Create a rectangle patch for the shaded area\nrect = plt.Rectangle((0, 0), 100, 100, color='lavender', alpha=0.5)\nax.add_patch(rect)\n\n# Create a line plot with lavender color\nax.plot([0, 250, 500, 1000, 1500, 2000], [0.2, 0.4, 0.6, 0.8, 1.0, 1.2], 'lv-')\n\n# Create a scatter plot with blue color\nax.scatter([0, 250, 500, 1000, 1500, 2000], [0.2, 0.4, 0.6, 0.8, 1.0, 1.2], color='blue')\n\n# Create a rectangle patch for the shaded area\nrect = plt.Rectangle((0, 0), 100, 100, color='lavenderblush', alpha=0.5)\nax.add_patch(rect)\n\n# Create a line plot with lavender blush color\nax.plot([0, 250, 500, 1000, 1500, 2000], [0.2, 0.4, 0.6, 0.8, 1.0, 1.2], 'lb-')\n\n# Create a scatter plot with pink color\nax.scatter([0, 250, 500, 1000, 1500, 2000], [0.2, 0.4, 0.6, 0.8, 1.0, 1.2], color='pink')\n\n# Create a rectangle patch for the shaded area\nrect = plt.Rectangle((0, 0), 100, 100, color='mistyrose', alpha=0.5)\nax.add_patch(rect)\n\n# Create a line plot with misty rose color\nax.plot([0, 250, 500, 1000, 1500, 2000], [0.2, 0.4, 0.6, 0.8, 1.0, 1.2], 'mr-')\n\n# Create a scatter plot with blue color\nax.scatter([0, 250, 500, 1000, 1500, 2000], [0.2, 0.4, 0.6, 0.8, 1.0, 1.2], color='blue')\n\n# Create a rectangle patch for the shaded area\nrect = plt.Rectangle((0, 0), 100, 100, color='navajowhite', alpha=0.5)\nax.add_patch(rect)\n\n# Create a line plot with navajo white color\nax.plot([0, 250, 500, 1000, 1500, 2000], [0.2, 0.4, 0.6, 0.8, 1.0, 1.2], 'nw-')\n\n# Create a scatter plot with pink color\nax.scatter([0, 250, 500, 1000, 1500, 2000], [0.2, 0.4, 0.6, 0.8, 1.0, 1.2], color='pink')\n\n# Create a rectangle patch for the shaded area\nrect = plt.Rectangle((0, 0), 100, 100, color='oldlace', alpha=0.5)\nax.add_patch(rect)\n\n# Create a line plot with old lace color\nax.plot([0, 250, 500, 1000, 1500, 2000], [0.2, 0.4, 0.6, 0.8, 1.0, 1.2], 'ol-')\n\n# Create a scatter plot with blue color\nax.scatter([0, 250, 500, 1000, 1500, 2000], [0.2, 0.4, 0.6, 0.8, 1.0, 1.2], color='blue')\n\n# Create a rectangle patch for the shaded area\nrect = plt.Rectangle((0, 0), 100, 100, color='papayawhip', alpha=0.5)\nax.add_patch(rect)\n\n# Create a line plot with papaya whip color\nax.plot([0, 250, 500, 1000, 1500, 2000], [0.2, 0.4, 0.6, 0.8, 1.0, 1.2], 'pw-')\n\n# Create a scatter plot with pink color\nax.scatter([0, 250, 500, 1000, 1500, 2000], [0.2, 0.4, 0.6, 0.8, 1.0, 1.2], color='pink')\n\n# Create a rectangle patch for the shaded area\nrect = plt.Rectangle((0, 0), 100, 100, color='peachpuff', alpha=0.5)\nax.add_patch(rect)\n\n# Create a line plot with peach puff color\nax.plot([0, 250, 500, 1000, 1500, 2000], [0.2, 0.4, 0.6, 0.8, 1.0, 1.2], 'pp-')\n\n# Create a scatter plot with blue color\nax.scatter([0, 250, 500, 1000, 1500, 2000], [0.2, 0.4, 0.6, 0.8, 1.0, 1.2], color='blue')\n\n# Create a rectangle patch for the shaded area\nrect = plt.Rectangle((0, 0), 100, 100, color='pink', alpha=0.5)\nax.add_patch(rect)\n\n# Create a line plot with pink color\nax.plot([0, 250, 500, 1000, 1500, 2000], [0.2, 0.4, 0.6, 0.8, 1.0, 1.2], 'p-')\n\n# Create a scatter plot with blue color\nax.scatter([0, 250, 500, 1000, 1500, 2000], [0.2, 0.4, 0.6, 0.8, 1.0, 1.2], color='blue')\n\n# Create a rectangle patch for the shaded area\nrect = plt.Rectangle((0, 0), 100, 100, color='plum', alpha=0.5)\nax.add_patch(rect)\n\n# Create a line plot with plum color\nax.plot([0, 250, 500, 1000, 1500, 2000], [0.2, 0.4, 0.6, 0.8, 1.0, 1.2], 'pl-')\n\n# Create a scatter plot with pink color\nax.scatter([0, 250, 500, 1000, 1500, 2000], [0.2, 0.4, 0.6, 0.8, 1.0, 1.2], color='pink')\n\n# Create a rectangle patch for the shaded area\nrect = plt.Rectangle((0, 0), 100, 100, color='powderblue', alpha=0.5)\nax.add_patch(rect)\n\n# Create a line plot with powder blue color\nax.plot([0, 250, 500, 1000, 1500, 2000], [0.2, 0.4, 0.6, 0.8, 1.0, 1.2], 'pb-')\n\n# Create a scatter plot with blue color\nax.scatter([0, 250, 500, 1000, 1500, 2000], [0.2, 0.4, 0.6, 0.8, 1.0, 1.2], color='blue')\n\n# Create a rectangle patch for the shaded area\nrect = plt.Rectangle((0, 0), 100, 100, color='rosybrown', alpha=0.5)\nax.add_patch(rect)\n\n# Create a line plot with rosy brown color\nax.plot([0, 250, 500, 1000, 1500, 2000], [0.2, 0.4, 0.6, 0.8, 1.0, 1.2], 'rb-')\n\n# Create a scatter plot with pink color\nax.scatter([0, 250, 500, 1000, 1500, 2000], [0.2, 0.4, 0.6, 0.8, 1.0, 1.2], color='pink')\n\n# Create a rectangle patch for the shaded area\nrect = plt.Rectangle((0, 0), 100, 100, color='sandybrown', alpha=0.5)\nax.add_patch(rect)\n\n# Create a line plot with sandy brown color\nax.plot([0, 250, 500, 1000, 1500, 2000], [0.2, 0.4, 0.6, 0.8, 1.0, 1.2], 'sb-')\n\n# Create a scatter plot with blue color\nax.scatter([0, 250, 500, 1000, 1500, 2000], [0.2, 0.4, 0.6, 0.8, 1.0, 1.2], color='blue')\n\n# Create a rectangle patch for the shaded area\nrect = plt.Rectangle((0, 0), 100, 100, color='seashell', alpha=0.5)\nax.add_patch(rect)\n\n# Create a line plot with seashell color\nax.plot([0, 250, 500, 1000, 1500, 2000], [0.2, 0.4, 0.6, 0.8, 1.0, 1.2], 'ss-')\n\n# Create a scatter plot with pink color\nax.scatter([0, 250, 500, 1000, 1500, 2000], [0.2, 0.4, 0.6, 0.8, 1.0, 1.2], color='pink')\n\n# Create a rectangle patch for the shaded area\nrect = plt.Rectangle((0, 0), 100"}
{"file": "dataset/ori_500/line_67.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nx = [2, 3, 4, 5, 6, 7, 8]\ny1 = [2, 3, 4, 5, 6, 7, 8]\ny2 = [2, 3, 4, 5, 6, 7, 8]\ny3 = [2, 3, 4, 5, 6, 7, 8]\n\n# Plot\nfig, ax = plt.subplots(figsize=(6.0, 5.0))\nax.plot(x, y1, 'b-')\nax.plot(x, y2, 'r-')\nax.plot(x, y3, 'g-')\n\n# Markers\nmarkers = ['^', 'v', '<', '>', 's', 'p', '*']\nfor i, marker in enumerate(markers):\n    ax.plot(x[i], y1[i], marker=marker, color='blue')\n    ax.plot(x[i], y2[i], marker=marker, color='orange')\n    ax.plot(x[i], y3[i], marker=marker, color='green')\n\n# Labels and Title\nax.set_xlabel('Number of microphones')\nax.set_ylabel('WER (%)')\nax.set_title('WER vs Number of Microphones')\n\n# Grid\nax.grid(True)\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_68.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 7.0))\n\n# Set the title and labels\nax.set_title('Trend Analysis')\nax.set_xlabel('Number of microphones')\nax.set_ylabel('WER (%)')\n\n# Plot the data\nax.plot([2, 3, 4, 5, 6, 7, 8], [2, 3, 4, 5, 6, 7, 8], 'b-', label='IHM Trend')\nax.plot([2, 3, 4, 5, 6, 7, 8], [2, 3, 4, 5, 6, 7, 8], 'm-', label='SDM Trend')\n\n# Add markers for each point\nfor i, txt in enumerate(['LibriCSS (test)', 'AMI (dev)']):\n    ax.annotate(txt, (2, 2), textcoords=\"offset points\", xytext=(0,10), ha='center')\n\n# Set the y-axis limits\nax.set_ylim(2, 9)\n\n# Set the x-axis limits\nax.set_xlim(2, 8)\n\n# Show legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_69.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nx = [2, 3, 4, 5, 6, 7, 8]\ny = [0.2, 0.9, 0.8, 0.7, 0.6, 0.5, 0.4]\n\n# Plot\nfig, ax = plt.subplots(figsize=(8, 5))\nax.plot(x, y, 'b-')\nax.set_xlabel('Number of Microphones')\nax.set_ylabel('WER (%)')\n\n# Highlight 1\nax.annotate('Highlight 1', (2, 0.2), color='orange')\nax.plot(2, 0.2, 'o', color='orange')\n\n# Highlight 2\nax.annotate('Highlight 2', (3, 0.9), color='orange')\nax.plot(3, 0.9, 'o', color='orange')\n\n# Highlight 3\nax.annotate('Highlight 3', (4, 0.8), color='orange')\nax.plot(4, 0.8, 'o', color='orange')\n\n# Highlight 4\nax.annotate('Highlight 4', (5, 0.7), color='orange')\nax.plot(5, 0.7, 'o', color='orange')\n\n# Highlight 5\nax.annotate('Highlight 5', (6, 0.6), color='orange')\nax.plot(6, 0.6, 'o', color='orange')\n\n# Highlight 6\nax.annotate('Highlight 6', (7, 0.5), color='orange')\nax.plot(7, 0.5, 'o', color='orange')\n\n# Highlight 7\nax.annotate('Highlight 7', (8, 0.4), color='orange')\nax.plot(8, 0.4, 'o', color='orange')\n\n# Threshold\nax.axhline(y=0.7, color='r', linestyle='-')\n\n# Legend\nlegend_elements = [\n    plt.Line2D([0], [0], marker='o', color='w', label='LibriCSS WER', markerfacecolor='orange', markersize=10),\n    plt.Line2D([0], [0], marker='o', color='w', label='AMI WER', markerfacecolor='blue', markersize=10),\n    plt.Line2D([0], [0], marker='o', color='w', label='Threshold', markerfacecolor='red', markersize=10)\n]\nax.legend(handles=legend_elements)\n\nplt.show()\n```"}
{"file": "dataset/ori_500/line_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, axes = plt.subplots(1, 4, figsize=(12, 4))\n\n# Define the data for each subplot\ndata = [\n    (np.linspace(0.7, 0.9, 100), np.linspace(80, 90, 100)),\n    (np.linspace(0.1, 0.4, 100), np.linspace(75, 85, 100)),\n    (np.linspace(0.0, 1.0, 100), np.linspace(70, 80, 100)),\n    (np.linspace(0.0, 1.0, 100), np.linspace(70, 80, 100))\n]\n\n# Plot the data\nfor ax, (x, y) in zip(axes, data):\n    ax.plot(x, y, 'b-')\n    ax.fill_between(x, y, color='lightblue', alpha=0.5)\n    ax.set_title('Contrastive loss weight.')\n    ax.set_xlabel('Epoch')\n    ax.set_ylabel('Loss')\n\n# Set the title of the first subplot\naxes[0].set_title('Positive bound.')\n\n# Set the title of the second subplot\naxes[1].set_title('Negative bound.')\n\n# Set the title of the third subplot\naxes[2].set_title('Fuzzy coefficient.')\n\n# Set the title of the fourth subplot\naxes[3].set_title('Fuzzy coefficient.')\n\n# Display the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_70.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(12, 5))\n\n# Plot the first graph\nax.plot([2, 3, 4, 5, 6, 7, 8], [0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3], 'g-')\nax.set_title('Highlight 3')\nax.set_xlabel('Number of Microphones')\nax.set_ylabel('WER (%)')\n\n# Plot the second graph\nax.plot([2, 3, 4, 5, 6, 7, 8], [0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3], 'g-')\nax.set_title('Highlight 3')\nax.set_xlabel('Number of Microphones')\nax.set_ylabel('WER (%)')\n\n# Add a rectangle for the legend\nrect = plt.Rectangle((0.05, 0.9), 0.1, 0.1, color='yellow', label='LibriCSS WER')\nax.add_patch(rect)\n\n# Add a rectangle for the legend\nrect = plt.Rectangle((0.05, 0.8), 0.1, 0.1, color='red', label='Threshold')\nax.add_patch(rect)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_71.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(6.0, 12.0))\n\n# Set the title of the plot\nax.set_title('SPMotif-0.5')\n\n# Create a rectangle for the first subplot\nrect1 = plt.Rectangle((0.1, 0.1), 0.8, 0.8, color='lightblue')\nax.add_patch(rect1)\n\n# Create a rectangle for the second subplot\nrect2 = plt.Rectangle((0.1, 0.3), 0.8, 0.4, color='lightgreen')\nax.add_patch(rect2)\n\n# Create a rectangle for the third subplot\nrect3 = plt.Rectangle((0.1, 0.7), 0.8, 0.2, color='lightgray')\nax.add_patch(rect3)\n\n# Create a rectangle for the fourth subplot\nrect4 = plt.Rectangle((0.1, 0.9), 0.8, 0.1, color='lightcyan')\nax.add_patch(rect4)\n\n# Create a rectangle for the fifth subplot\nrect5 = plt.Rectangle((0.1, 0.1), 0.8, 0.8, color='lightblue')\nax.add_patch(rect5)\n\n# Create a rectangle for the sixth subplot\nrect6 = plt.Rectangle((0.1, 0.3), 0.8, 0.4, color='lightgreen')\nax.add_patch(rect6)\n\n# Create a rectangle for the seventh subplot\nrect7 = plt.Rectangle((0.1, 0.7), 0.8, 0.2, color='lightgray')\nax.add_patch(rect7)\n\n# Create a rectangle for the eighth subplot\nrect8 = plt.Rectangle((0.1, 0.9), 0.8, 0.1, color='lightcyan')\nax.add_patch(rect8)\n\n# Create a rectangle for the ninth subplot\nrect9 = plt.Rectangle((0.1, 0.1), 0.8, 0.8, color='lightblue')\nax.add_patch(rect9)\n\n# Create a rectangle for the tenth subplot\nrect10 = plt.Rectangle((0.1, 0.3), 0.8, 0.4, color='lightgreen')\nax.add_patch(rect10)\n\n# Create a rectangle for the eleventh subplot\nrect11 = plt.Rectangle((0.1, 0.7), 0.8, 0.2, color='lightgray')\nax.add_patch(rect11)\n\n# Create a rectangle for the twelfth subplot\nrect12 = plt.Rectangle((0.1, 0.9), 0.8, 0.1, color='lightcyan')\nax.add_patch(rect12)\n\n# Create a rectangle for the thirteenth subplot\nrect13 = plt.Rectangle((0.1, 0.1), 0.8, 0.8, color='lightblue')\nax.add_patch(rect13)\n\n# Create a rectangle for the fourteenth subplot\nrect14 = plt.Rectangle((0.1, 0.3), 0.8, 0.4, color='lightgreen')\nax.add_patch(rect14)\n\n# Create a rectangle for the fifteenth subplot\nrect15 = plt.Rectangle((0.1, 0.7), 0.8, 0.2, color='lightgray')\nax.add_patch(rect15)\n\n# Create a rectangle for the sixteenth subplot\nrect16 = plt.Rectangle((0.1, 0.9), 0.8, 0.1, color='lightcyan')\nax.add_patch(rect16)\n\n# Create a rectangle for the seventeenth subplot\nrect17 = plt.Rectangle((0.1, 0.1), 0.8, 0.8, color='lightblue')\nax.add_patch(rect17)\n\n# Create a rectangle for the eighteenth subplot\nrect18 = plt.Rectangle((0.1, 0.3), 0.8, 0.4, color='lightgreen')\nax.add_patch(rect18)\n\n# Create a rectangle for the nineteenth subplot\nrect19 = plt.Rectangle((0.1, 0.7), 0.8, 0.2, color='lightgray')\nax.add_patch(rect19)\n\n# Create a rectangle for the twentieth subplot\nrect20 = plt.Rectangle((0.1, 0.9), 0.8, 0.1, color='lightcyan')\nax.add_patch(rect20)\n\n# Create a rectangle for the twenty-first subplot\nrect21 = plt.Rectangle((0.1, 0.1), 0.8, 0.8, color='lightblue')\nax.add_patch(rect21)\n\n# Create a rectangle for the twenty-second subplot\nrect22 = plt.Rectangle((0.1, 0.3), 0.8, 0.4, color='lightgreen')\nax.add_patch(rect22)\n\n# Create a rectangle for the twenty-third subplot\nrect23 = plt.Rectangle((0.1, 0.7), 0.8, 0.2, color='lightgray')\nax.add_patch(rect23)\n\n# Create a rectangle for the twenty-fourth subplot\nrect24 = plt.Rectangle((0.1, 0.9), 0.8, 0.1, color='lightcyan')\nax.add_patch(rect24)\n\n# Create a rectangle for the twenty-fifth subplot\nrect25 = plt.Rectangle((0.1, 0.1), 0.8, 0.8, color='lightblue')\nax.add_patch(rect25)\n\n# Create a rectangle for the twenty-sixth subplot\nrect26 = plt.Rectangle((0.1, 0.3), 0.8, 0.4, color='lightgreen')\nax.add_patch(rect26)\n\n# Create a rectangle for the twenty-seventh subplot\nrect27 = plt.Rectangle((0.1, 0.7), 0.8, 0.2, color='lightgray')\nax.add_patch(rect27)\n\n# Create a rectangle for the twenty-eighth subplot\nrect28 = plt.Rectangle((0.1, 0.9), 0.8, 0.1, color='lightcyan')\nax.add_patch(rect28)\n\n# Create a rectangle for the twenty-ninth subplot\nrect29 = plt.Rectangle((0.1, 0.1), 0.8, 0.8, color='lightblue')\nax.add_patch(rect29)\n\n# Create a rectangle for the thirtieth subplot\nrect30 = plt.Rectangle((0.1, 0.3), 0.8, 0.4, color='lightgreen')\nax.add_patch(rect30)\n\n# Create a rectangle for the thirtieth-first subplot\nrect31 = plt.Rectangle((0.1, 0.7), 0.8, 0.2, color='lightgray')\nax.add_patch(rect31)\n\n# Create a rectangle for the thirtieth-second subplot\nrect32 = plt.Rectangle((0.1, 0.9), 0.8, 0.1, color='lightcyan')\nax.add_patch(rect32)\n\n# Create a rectangle for the thirtieth-third subplot\nrect33 = plt.Rectangle((0.1, 0.1), 0.8, 0.8, color='lightblue')\nax.add_patch(rect33)\n\n# Create a rectangle for the thirtieth-fourth subplot\nrect34 = plt.Rectangle((0.1, 0.3), 0.8, 0.4, color='lightgreen')\nax.add_patch(rect34)\n\n# Create a rectangle for the thirtieth-fifth subplot\nrect35 = plt.Rectangle((0.1, 0.7), 0.8, 0.2, color='lightgray')\nax.add_patch(rect35)\n\n# Create a rectangle for the thirtieth-sixth subplot\nrect36 = plt.Rectangle((0.1, 0.9), 0.8, 0.1, color='lightcyan')\nax.add_patch(rect36)\n\n# Create a rectangle for the thirtieth-seventh subplot\nrect37 = plt.Rectangle((0.1, 0.1), 0.8, 0.8, color='lightblue')\nax.add_patch(rect37)\n\n# Create a rectangle for the thirtieth-eighth subplot\nrect38 = plt.Rectangle((0.1, 0.3), 0.8, 0.4, color='lightgreen')\nax.add_patch(rect38)\n\n# Create a rectangle for the thirtieth-ninth subplot\nrect39 = plt.Rectangle((0.1, 0.7), 0.8, 0.2, color='lightgray')\nax.add_patch(rect39)\n\n# Create a rectangle for the thirtieth-tenth subplot\nrect40 = plt.Rectangle((0.1, 0.9), 0.8, 0.1, color='lightcyan')\nax.add_patch(rect40)\n\n# Create a rectangle for the thirtieth-eleventh subplot\nrect41 = plt.Rectangle((0.1, 0.1), 0.8, 0.8, color='lightblue')\nax.add_patch(rect41)\n\n# Create a rectangle for the thirtieth-twelfth subplot\nrect42 = plt.Rectangle((0.1, 0.3), 0.8, 0.4, color='lightgreen')\nax.add_patch(rect42)\n\n# Create a rectangle for the thirtieth-thirteenth subplot\nrect43 = plt.Rectangle((0.1, 0.7), 0.8, 0.2, color='lightgray')\nax.add_patch(rect43)\n\n# Create a rectangle for the thirtieth-fourteenth subplot\nrect44 = plt.Rectangle((0.1, 0.9), 0.8, 0.1, color='lightcyan')\nax.add_patch(rect44)\n\n# Create a rectangle for the thirtieth-fifteenth subplot\nrect45 = plt.Rectangle((0.1, 0.1), 0.8, 0.8, color='lightblue')\nax.add_patch(rect45)\n\n# Create a rectangle for the thirtieth-sixteenth subplot\nrect46 = plt.Rectangle((0.1, 0.3), 0.8, 0.4, color='lightgreen')\nax.add_patch(rect46)\n\n# Create a rectangle for the thirtieth-seventeenth subplot\nrect47 = plt.Rectangle((0.1, 0.7), 0.8, 0.2, color='lightgray')\nax.add_patch(rect47)\n\n# Create a rectangle for the thirtieth-eighteenth subplot\nrect48 = plt.Rectangle((0.1, 0.9), 0.8, 0.1, color='lightcyan')\nax.add_patch(rect48)\n\n# Create a rectangle for the thirtieth-nineteenth subplot\nrect49 = plt.Rectangle((0.1, 0.1), 0.8, 0.8, color='lightblue')\nax.add_patch(rect49)\n\n# Create a rectangle for the thirtieth-twentieth subplot\nrect50 = plt.Rectangle((0.1, 0.3), 0.8, 0.4, color='lightgreen')\nax.add_patch(rect50)\n\n# Create a rectangle for the thirtieth-twenty-first subplot\nrect51 = plt.Rectangle((0.1, 0.7), 0.8, 0.2, color='lightgray')\nax.add_patch(rect51)\n\n# Create a rectangle for the thirtieth-twenty-second subplot\nrect52 = plt.Rectangle((0.1, 0.9), 0.8, 0.1, color='lightcyan')\nax.add_patch(rect52)\n\n# Create a rectangle for the thirtieth-twenty-third subplot\nrect53 = plt.Rectangle((0.1, 0.1), 0.8, 0.8, color='lightblue')\nax.add_patch(rect53)\n\n# Create a rectangle for the thirtieth-twenty-fourth subplot\nrect54 = plt.Rectangle((0.1, 0.3), 0.8, 0.4, color='lightgreen')\nax.add_patch(rect54)\n\n# Create a rectangle for the thirtieth-twenty-fifth subplot\nrect55 = plt.Rectangle((0.1, 0.7), 0.8, 0.2, color='lightgray')\nax.add_patch(rect55)\n\n# Create a rectangle for the thirtieth-twenty-sixth subplot\nrect56 = plt.Rectangle((0.1, 0.9), 0.8, 0.1, color='lightcyan')\nax.add_patch(rect56)\n\n# Create a rectangle for the thirtieth-twenty-seventh subplot\nrect57 = plt.Rectangle((0.1, 0.1), 0.8, 0.8, color='lightblue')\nax.add_patch(rect57)\n\n# Create a rectangle for the thirtieth-twenty-eighth subplot\nrect58 = plt.Rectangle((0.1, 0.3), 0.8, 0.4, color='lightgreen')\nax.add_patch(rect58)\n\n# Create a rectangle for the thirtieth-twenty-ninth subplot\nrect59 = plt.Rectangle((0.1, 0.7), 0.8, 0.2, color='lightgray')\nax.add_patch(rect59)\n\n# Create a rectangle for the thirtieth-thirtieth subplot\nrect60 = plt.Rectangle((0.1, 0.9), 0.8, 0.1, color='lightcyan')\nax.add_patch(rect60)\n\n# Create a rectangle for the thirtieth-thirtieth-first subplot\nrect61 = plt.Rectangle((0.1, 0.1), 0.8, 0.8, color='lightblue')\nax.add_patch(rect61)\n\n# Create a rectangle for the thirtieth-thirtieth-second subplot\nrect62 = plt.Rectangle((0.1, 0.3), 0.8, 0.4, color='lightgreen')\nax.add_patch(rect62)\n\n# Create a rectangle for the thirtieth-thirtieth-third subplot\nrect63 = plt.Rectangle((0.1, 0.7), 0.8, 0.2, color='lightgray')\nax.add_patch(rect63)\n\n# Create a rectangle for the thirtieth-thirtieth-fourth subplot\nrect64 = plt.Rectangle((0.1, 0.9), 0.8, 0.1, color='lightcyan')\nax.add_patch(rect64)\n\n# Create a rectangle for the thirtieth-thirtieth-fifth subplot\nrect65 = plt.Rectangle((0.1, 0.1), 0.8, 0.8, color='lightblue')\nax.add_patch(rect65)\n\n# Create a rectangle for the thirtieth-thirtieth-sixth subplot\nrect66 = plt.Rectangle((0.1, 0.3), 0.8, 0.4, color='lightgreen')\nax.add_patch(rect66)\n\n# Create a rectangle for the thirtieth-thirtieth-seventh subplot\nrect67 = plt.Rectangle((0.1, 0.7), 0.8, 0.2, color='lightgray')\nax.add_patch(rect67)\n\n# Create a rectangle for the thirtieth-thirtieth-eighth subplot\nrect68 = plt.Rectangle((0.1, 0.9), 0.8, 0.1, color='lightcyan')\nax.add_patch(rect68)\n\n# Create a rectangle for the thirtieth-thirtieth-nineteenth subplot\nrect69 = plt.Rectangle((0.1, 0.1), 0.8, 0.8, color='lightblue')\nax.add_patch(rect69)\n\n# Create a rectangle for the thirtieth-thirtieth-twentieth subplot\nrect70 = plt.Rectangle((0.1, 0.3), 0.8, 0.4, color='lightgreen')\nax.add_patch(rect70)\n\n# Create a rectangle for the thirtieth-thirtieth-twenty-first subplot\nrect71 = plt.Rectangle((0.1, 0.7), 0.8, 0.2, color='lightgray')\nax.add_patch(rect71)\n\n# Create a rectangle for the thirtieth-thirtieth-twenty-second subplot\nrect72 = plt.Rectangle((0.1, 0.9), 0.8, 0.1, color='lightcyan')\nax.add_patch(rect72)\n\n# Create a rectangle for the thirtieth-thirtieth-twenty-third subplot\nrect73 = plt.Rectangle((0.1, 0.1), 0.8, 0.8, color='lightblue')\nax.add_patch(rect73)\n\n# Create a rectangle for the thirtieth-thirtieth-twenty-fourth subplot\nrect74 = plt.Rectangle((0.1, 0.3), 0.8, 0.4, color='lightgreen')\nax.add_patch(rect74)\n\n# Create a rectangle for the thirtieth-thirtieth-twenty-fifth subplot\nrect75 = plt.Rectangle((0.1, 0.7), 0.8, 0.2, color='lightgray')\nax.add_patch(rect75)\n\n# Create a rectangle for the thirtieth-thirtieth-twenty-sixth subplot\nrect76 = plt.Rectangle((0.1, 0.9), 0.8, 0.1, color='lightcyan')\nax.add_patch(rect76)\n\n# Create a rectangle for the thirtieth-thirtieth-twenty-seventh subplot\nrect77 = plt.Rectangle((0.1, 0.1), 0.8, 0.8, color='lightblue')\nax.add_patch(rect77)\n\n# Create a rectangle for the thirtieth-thirtieth-twenty-eighth subplot\nrect78 = plt.Rectangle((0.1, 0.3), 0.8, 0.4, color='lightgreen')\nax.add_patch(rect78)\n\n# Create a rectangle for the thirtieth-thirtieth-twenty-ninth subplot\nrect7"}
{"file": "dataset/ori_500/line_72.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Set the background color of the plot\nax.set_facecolor('lightgreen')\n\n# Set the grid lines\nax.grid(True)\n\n# Set the x-axis and y-axis limits\nax.set_xlim(0.1, 1.0)\nax.set_ylim(-80, 20)\n\n# Set the x-axis and y-axis labels\nax.set_xlabel('Ratio r')\nax.set_ylabel('Performance')\n\n# Set the title of the plot\nax.set_title('Dynamic Performance Trends')\n\n# Define the data points\nx = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0]\ny = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n\n# Plot the data points\nax.plot(x, y, 'o-')\n\n# Set the color of the plot\nax.set_facecolor('lightgreen')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the x-axis and y-axis ticks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the x-axis and y-axis labels\nax.xaxis.label.set_color('black')\nax.yaxis.label.set_color('black')\n\n# Set the color of the x-axis and y-axis title\nax.title.set_color('black')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set_title('Dynamic Performance Trends')\n\n# Set the color of the plot title\nax.set"}
{"file": "dataset/ori_500/line_73.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Modern Linear Performance Evaluation')\n\n# Set the x-axis label\nax.set_xlabel('Ratio r')\n\n# Set the y-axis label\nax.set_ylabel('Performance')\n\n# Set the x-axis limits\nax.set_xlim(0.1, 1.0)\n\n# Set the y-axis limits\nax.set_ylim(0.1, 1.5)\n\n# Set the grid lines\nax.grid(True)\n\n# Define the data points\nx = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0]\ny1 = [0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9]\ny2 = [0.8, 0.8, 0.8, 0.8, 0.8, 0.8, 0.8, 0.8, 0.8, 0.8]\ny3 = [0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7]\ny4 = [0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6]\ny5 = [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5]\ny6 = [0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4]\ny7 = [0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3]\ny8 = [0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2]\ny9 = [0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1]\n\n# Plot the data points\nax.plot(x, y1, 'bo-')\nax.plot(x, y2, 'go-')\nax.plot(x, y3, 'ro-')\nax.plot(x, y4, 'co-')\nax.plot(x, y5, 'mo-')\nax.plot(x, y6, 'yo-')\nax.plot(x, y7, 'ko-')\nax.plot(x, y8, 'bo-')\nax.plot(x, y9, 'go-')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_74.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Dynamic Model Performance')\n\n# Set the x-axis label\nax.set_xlabel('Ratio r')\n\n# Set the y-axis label\nax.set_ylabel('Performance')\n\n# Define the data points\nx = [0.0, 0.2, 0.4, 0.6, 0.8, 1.0]\ny1 = [0.5, 0.7, 0.9, 0.8, 0.6, 0.4]\ny2 = [0.3, 0.5, 0.7, 0.6, 0.4, 0.2]\n\n# Plot the data points\nax.plot(x, y1, 'bo-')\nax.plot(x, y2, 'ro-')\n\n# Add a legend\nax.legend(['PN', 'GI'])\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_75.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Set the title of the plot\nax.set_title('Comparison of Model Accuracies')\n\n# Set the x-axis label\nax.set_xlabel('Ensemble Size')\n\n# Set the y-axis label\nax.set_ylabel('Model Accuracy')\n\n# Set the grid\nax.grid(True)\n\n# Define the data\nx = [5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]\ny1 = [80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 99, 99, 99]\ny2 = [75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 98]\n\n# Plot the data\nax.plot(x, y1, color='blue', label='Model 1 Mean Accuracy')\nax.plot(x, y2, color='red', label='Model 2 Mean Accuracy')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_76.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 12.0))\n\n# Set the title of the plot\nax.set_title('Performance of Model X')\n\n# Set the x-axis label\nax.set_xlabel('Iteration')\n\n# Set the y-axis label\nax.set_ylabel('Score')\n\n# Set the x-axis ticks\nax.set_xticks([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\n\n# Set the y-axis ticks\nax.set_yticks(range(70, 96, 5))\n\n# Plot the data\nax.plot([0, 1, 2, 3, 4, 5, 6, 7, 8, 9], [90, 92, 93, 94, 95, 94, 93, 92, 91, 90], 'ro-', label='Config A - Model X')\nax.plot([0, 1, 2, 3, 4, 5, 6, 7, 8, 9], [85, 87, 88, 89, 90, 89, 88, 87, 86, 85], 'go-', label='Config B - Model X')\nax.plot([0, 1, 2, 3, 4, 5, 6, 7, 8, 9], [80, 82, 83, 84, 85, 84, 83, 82, 81, 80], 'bo-', label='Config C - Model X')\n\n# Add legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_77.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 12.0))\n\n# Set the title of the plot\nax.set_title('Performance of Llama')\n\n# Set the x-axis label\nax.set_xlabel('Iteration')\n\n# Set the y-axis label\nax.set_ylabel('Score')\n\n# Set the x-ticks\nax.set_xticks([2, 4, 6, 8, 10])\n\n# Set the y-ticks\nax.set_yticks(range(70, 90, 5))\n\n# Plot the data\nax.plot([2, 4, 6, 8, 10], [80, 82, 84, 86, 88], 'r-')\nax.plot([2, 4, 6, 8, 10], [75, 77, 79, 81, 83], 'g-')\nax.plot([2, 4, 6, 8, 10], [70, 72, 74, 76, 78], 'b-')\n\n# Add a legend\nax.legend(['Config A - Llama', 'Config B - Llama', 'Config C - Llama'])\n\n# Add a rectangle for the legend\nrect = plt.Rectangle((0, 0), 1, 1, fc='pink')\nax.add_patch(rect)\n\n# Add a rectangle for the legend\nrect = plt.Rectangle((0, 0), 1, 1, fc='green')\nax.add_patch(rect)\n\n# Add a rectangle for the legend\nrect = plt.Rectangle((0, 0), 1, 1, fc='blue')\nax.add_patch(rect)\n\n# Add a rectangle for the legend\nrect = plt.Rectangle((0, 0), 1, 1, fc='red')\nax.add_patch(rect)\n\n# Add a rectangle for the legend\nrect = plt.Rectangle((0, 0), 1, 1, fc='yellow')\nax.add_patch(rect)\n\n# Add a rectangle for the legend\nrect = plt.Rectangle((0, 0), 1, 1, fc='cyan')\nax.add_patch(rect)\n\n# Add a rectangle for the legend\nrect = plt.Rectangle((0, 0), 1, 1, fc='magenta')\nax.add_patch(rect)\n\n# Add a rectangle for the legend\nrect = plt.Rectangle((0, 0), 1, 1, fc='black')\nax.add_patch(rect)\n\n# Add a rectangle for the legend\nrect = plt.Rectangle((0, 0), 1, 1, fc='white')\nax.add_patch(rect)\n\n# Add a rectangle for the legend\nrect = plt.Rectangle((0, 0), 1, 1, fc='gray')\nax.add_patch(rect)\n\n# Add a rectangle for the legend\nrect = plt.Rectangle((0, 0), 1, 1, fc='brown')\nax.add_patch(rect)\n\n# Add a rectangle for the legend\nrect = plt.Rectangle((0, 0), 1, 1, fc='orange')\nax.add_patch(rect)\n\n# Add a rectangle for the legend\nrect = plt.Rectangle((0, 0), 1, 1, fc='purple')\nax.add_patch(rect)\n\n# Add a rectangle for the legend\nrect = plt.Rectangle((0, 0), 1, 1, fc='pink')\nax.add_patch(rect)\n\n# Add a rectangle for the legend\nrect = plt.Rectangle((0, 0), 1, 1, fc='green')\nax.add_patch(rect)\n\n# Add a rectangle for the legend\nrect = plt.Rectangle((0, 0), 1, 1, fc='blue')\nax.add_patch(rect)\n\n# Add a rectangle for the legend\nrect = plt.Rectangle((0, 0), 1, 1, fc='red')\nax.add_patch(rect)\n\n# Add a rectangle for the legend\nrect = plt.Rectangle((0, 0), 1, 1, fc='yellow')\nax.add_patch(rect)\n\n# Add a rectangle for the legend\nrect = plt.Rectangle((0, 0), 1, 1, fc='cyan')\nax.add_patch(rect)\n\n# Add a rectangle for the legend\nrect = plt.Rectangle((0, 0), 1, 1, fc='magenta')\nax.add_patch(rect)\n\n# Add a rectangle for the legend\nrect = plt.Rectangle((0, 0), 1, 1, fc='black')\nax.add_patch(rect)\n\n# Add a rectangle for the legend\nrect = plt.Rectangle((0, 0), 1, 1, fc='white')\nax.add_patch(rect)\n\n# Add a rectangle for the legend\nrect = plt.Rectangle((0, 0), 1, 1, fc='gray')\nax.add_patch(rect)\n\n# Add a rectangle for the legend\nrect = plt.Rectangle((0, 0), 1, 1, fc='brown')\nax.add_patch(rect)\n\n# Add a rectangle for the legend\nrect = plt.Rectangle((0, 0), 1, 1, fc='orange')\nax.add_patch(rect)\n\n# Add a rectangle for the legend\nrect = plt.Rectangle((0, 0), 1, 1, fc='purple')\nax.add_patch(rect)\n\n# Add a rectangle for the legend\nrect = plt.Rectangle((0, 0), 1, 1, fc='pink')\nax.add_patch(rect)\n\n# Add a rectangle for the legend\nrect = plt.Rectangle((0, 0), 1, 1, fc='green')\nax.add_patch(rect)\n\n# Add a rectangle for the legend\nrect = plt.Rectangle((0, 0), 1, 1, fc='blue')\nax.add_patch(rect)\n\n# Add a rectangle for the legend\nrect = plt.Rectangle((0, 0), 1, 1, fc='red')\nax.add_patch(rect)\n\n# Add a rectangle for the legend\nrect = plt.Rectangle((0, 0), 1, 1, fc='yellow')\nax.add_patch(rect)\n\n# Add a rectangle for the legend\nrect = plt.Rectangle((0, 0), 1, 1, fc='cyan')\nax.add_patch(rect)\n\n# Add a rectangle for the legend\nrect = plt.Rectangle((0, 0), 1, 1, fc='magenta')\nax.add_patch(rect)\n\n# Add a rectangle for the legend\nrect = plt.Rectangle((0, 0), 1, 1, fc='black')\nax.add_patch(rect)\n\n# Add a rectangle for the legend\nrect = plt.Rectangle((0, 0), 1, 1, fc='white')\nax.add_patch(rect)\n\n# Add a rectangle for the legend\nrect = plt.Rectangle((0, 0), 1, 1, fc='gray')\nax.add_patch(rect)\n\n# Add a rectangle for the legend\nrect = plt.Rectangle((0, 0), 1, 1, fc='brown')\nax.add_patch(rect)\n\n# Add a rectangle for the legend\nrect = plt.Rectangle((0, 0), 1, 1, fc='orange')\nax.add_patch(rect)\n\n# Add a rectangle for the legend\nrect = plt.Rectangle((0, 0), 1, 1, fc='purple')\nax.add_patch(rect)\n\n# Add a rectangle for the legend\nrect = plt.Rectangle((0, 0), 1, 1, fc='pink')\nax.add_patch(rect)\n\n# Add a rectangle for the legend\nrect = plt.Rectangle((0, 0), 1, 1, fc='green')\nax.add_patch(rect)\n\n# Add a rectangle for the legend\nrect = plt.Rectangle((0, 0), 1, 1, fc='blue')\nax.add_patch(rect)\n\n# Add a rectangle for the legend\nrect = plt.Rectangle((0, 0), 1, 1, fc='red')\nax.add_patch(rect)\n\n# Add a rectangle for the legend\nrect = plt.Rectangle((0, 0), 1, 1, fc='yellow')\nax.add_patch(rect)\n\n# Add a rectangle for the legend\nrect = plt.Rectangle((0, 0), 1, 1, fc='cyan')\nax.add_patch(rect)\n\n# Add a rectangle for the legend\nrect = plt.Rectangle((0, 0), 1, 1, fc='magenta')\nax.add_patch(rect)\n\n# Add a rectangle for the legend\nrect = plt.Rectangle((0, 0), 1, 1, fc='black')\nax.add_patch(rect)\n\n# Add a rectangle for the legend\nrect = plt.Rectangle((0, 0), 1, 1, fc='white')\nax.add_patch(rect)\n\n# Add a rectangle for the legend\nrect = plt.Rectangle((0, 0), 1, 1, fc='gray')\nax.add_patch(rect)\n\n# Add a rectangle for the legend\nrect = plt.Rectangle((0, 0), 1, 1, fc='brown')\nax.add_patch(rect)\n\n# Add a rectangle for the legend\nrect = plt.Rectangle((0, 0), 1, 1, fc='orange')\nax.add_patch(rect)\n\n# Add a rectangle for the legend\nrect = plt.Rectangle((0, 0), 1, 1, fc='purple')\nax.add_patch(rect)\n\n# Add a rectangle for the legend\nrect = plt.Rectangle((0, 0), 1, 1, fc='pink')\nax.add_patch(rect)\n\n# Add a rectangle for the legend\nrect = plt.Rectangle((0, 0), 1, 1, fc='green')\nax.add_patch(rect)\n\n# Add a rectangle for the legend\nrect = plt.Rectangle((0, 0), 1, 1, fc='blue')\nax.add_patch(rect)\n\n# Add a rectangle for the legend\nrect = plt.Rectangle((0, 0), 1, 1, fc='red')\nax.add_patch(rect)\n\n# Add a rectangle for the legend\nrect = plt.Rectangle((0, 0), 1, 1, fc='yellow')\nax.add_patch(rect)\n\n# Add a rectangle for the legend\nrect = plt.Rectangle((0, 0), 1, 1, fc='cyan')\nax.add_patch(rect)\n\n# Add a rectangle for the legend\nrect = plt.Rectangle((0, 0), 1, 1, fc='magenta')\nax.add_patch(rect)\n\n# Add a rectangle for the legend\nrect = plt.Rectangle((0, 0), 1, 1, fc='black')\nax.add_patch(rect)\n\n# Add a rectangle for the legend\nrect = plt.Rectangle((0, 0), 1, 1, fc='white')\nax.add_patch(rect)\n\n# Add a rectangle for the legend\nrect = plt.Rectangle((0, 0), 1, 1, fc='gray')\nax.add_patch(rect)\n\n# Add a rectangle for the legend\nrect = plt.Rectangle((0, 0), 1, 1, fc='brown')\nax.add_patch(rect)\n\n# Add a rectangle for the legend\nrect = plt.Rectangle((0, 0), 1, 1, fc='orange')\nax.add_patch(rect)\n\n# Add a rectangle for the legend\nrect = plt.Rectangle((0, 0), 1, 1, fc='purple')\nax.add_patch(rect)\n\n# Add a rectangle for the legend\nrect = plt.Rectangle((0, 0), 1, 1, fc='pink')\nax.add_patch(rect)\n\n# Add a rectangle for the legend\nrect = plt.Rectangle((0, 0), 1, 1, fc='green')\nax.add_patch(rect)\n\n# Add a rectangle for the legend\nrect = plt.Rectangle((0, 0), 1, 1, fc='blue')\nax.add_patch(rect)\n\n# Add a rectangle for the legend\nrect = plt.Rectangle((0, 0), 1, 1, fc='red')\nax.add_patch(rect)\n\n# Add a rectangle for the legend\nrect = plt.Rectangle((0, 0), 1, 1, fc='yellow')\nax.add_patch(rect)\n\n# Add a rectangle for the legend\nrect = plt.Rectangle((0, 0), 1, 1, fc='cyan')\nax.add_patch(rect)\n\n# Add a rectangle for the legend\nrect = plt.Rectangle((0, 0), 1, 1, fc='magenta')\nax.add_patch(rect)\n\n# Add a rectangle for the legend\nrect = plt.Rectangle((0, 0), 1, 1, fc='black')\nax.add_patch(rect)\n\n# Add a rectangle for the legend\nrect = plt.Rectangle((0, 0), 1, 1, fc='white')\nax.add_patch(rect)\n\n# Add a rectangle for the legend\nrect = plt.Rectangle((0, 0), 1, 1, fc='gray')\nax.add_patch(rect)\n\n# Add a rectangle for the legend\nrect = plt.Rectangle((0, 0), 1, 1, fc='brown')\nax.add_patch(rect)\n\n# Add a rectangle for the legend\nrect = plt.Rectangle((0, 0), 1, 1, fc='orange')\nax.add_patch(rect)\n\n# Add a rectangle for the legend\nrect = plt.Rectangle((0, 0), 1, 1, fc='purple')\nax.add_patch(rect)\n\n# Add a rectangle for the legend\nrect = plt.Rectangle((0, 0), 1, 1, fc='pink')\nax.add_patch(rect)\n\n# Add a rectangle for the legend\nrect = plt.Rectangle((0, 0), 1, 1, fc='green')\nax.add_patch(rect)\n\n# Add a rectangle for the legend\nrect = plt.Rectangle((0, 0), 1, 1, fc='blue')\nax.add_patch(rect)\n\n# Add a rectangle for the legend\nrect = plt.Rectangle((0, 0), 1, 1, fc='red')\nax.add_patch(rect)\n\n# Add a rectangle for the legend\nrect = plt.Rectangle((0, 0), 1, 1, fc='yellow')\nax.add_patch(rect)\n\n# Add a rectangle for the legend\nrect = plt.Rectangle((0, 0), 1, 1, fc='cyan')\nax.add_patch(rect)\n\n# Add a rectangle for the legend\nrect = plt.Rectangle((0, 0), 1, 1, fc='magenta')\nax.add_patch(rect)\n\n# Add a rectangle for the legend\nrect = plt.Rectangle((0, 0), 1, 1, fc='black')\nax.add_patch(rect)\n\n# Add a rectangle for the legend\nrect = plt.Rectangle((0, 0), 1, 1, fc='white')\nax.add_patch(rect)\n\n# Add a rectangle for the legend\nrect = plt.Rectangle((0, 0), 1, 1, fc='gray')\nax.add_patch(rect)\n\n# Add a rectangle for the legend\nrect = plt.Rectangle((0, 0), 1, 1, fc='brown')\nax.add_patch(rect)\n\n# Add a rectangle for the legend\nrect = plt.Rectangle((0, 0), 1, 1, fc='orange')\nax.add_patch(rect)\n\n# Add a rectangle for the legend\nrect = plt.Rectangle((0, 0), 1, 1, fc='purple')\nax.add_patch(rect)\n\n# Add a rectangle for the legend\nrect = plt.Rectangle((0, 0), 1, 1, fc='pink')\nax.add_patch(rect)\n\n# Add a rectangle for the legend\nrect = plt.Rectangle((0, 0), 1, 1, fc='green')\nax.add_patch(rect)\n\n# Add a rectangle for the legend\nrect = plt.Rectangle((0, 0), 1, 1, fc='blue')\nax.add_patch(rect)\n\n# Add a rectangle for the legend\nrect = plt.Rectangle((0, 0), 1, 1, fc='red')\nax.add_patch(rect)\n\n# Add a rectangle for the legend\nrect = plt.Rectangle((0, 0), 1, 1, fc='yellow')\nax.add_patch(rect)\n\n# Add a rectangle for the legend\nrect = plt.Rectangle((0, 0), 1, 1, fc='cyan')\nax.add_patch(rect)\n\n# Add a rectangle for the legend\nrect = plt.Rectangle((0, 0), 1, 1, fc='magenta')\nax.add_patch(rect)\n\n# Add a rectangle for the legend\nrect = plt.Rectangle((0, 0), 1, 1, fc='black')\nax.add_patch(rect)\n\n# Add a rectangle for the legend\nrect = plt.Rectangle((0, 0), 1, 1, fc='white')\nax.add_patch(rect)\n\n# Add a rectangle for the legend\nrect = plt.Rectangle((0, 0), 1, 1, fc='gray')\nax.add_patch(rect)\n\n# Add a rectangle for the legend\nrect = plt.Rectangle((0, 0), 1, 1, fc='brown')\nax.add_patch(rect)\n\n# Add a rectangle for the legend\nrect = plt.Rectangle((0, 0), 1, 1, fc='orange')\nax.add_patch(rect)\n\n# Add a rectangle for the legend\nrect = plt.Rectangle((0, 0), 1, 1, fc='purple')\nax.add_patch(rect)\n\n# Add a rectangle for the legend\nrect = plt.Rectangle((0, 0), 1, 1, fc='pink')\nax.add_patch(rect)\n\n# Add a rectangle for the legend\nrect = plt.Rectangle((0, 0), 1, 1, fc='green')\nax.add_patch(rect)\n\n# Add a rectangle for the legend\nrect = plt.Rectangle((0, 0), 1, 1, fc='blue')\nax.add_patch(rect)\n\n# Add a rectangle for the legend\nrect = plt.Rectangle((0, 0), 1, 1, fc='red')\nax.add_patch(rect)\n\n# Add a rectangle for the legend\nrect = plt.Rectangle((0, 0), 1, 1, fc='yellow')\nax.add_patch(rect)\n\n# Add a rectangle for the legend\nrect = plt.Rectangle((0, 0), 1, 1, fc='cyan')\nax.add_patch(rect)\n\n# Add a rectangle for the legend\nrect = plt.Rectangle((0, 0), 1, 1, fc='magenta')\nax.add_patch(rect)\n\n# Add a rectangle for the legend\nrect = plt.Rectangle((0, 0), 1, 1, fc='black')\nax.add_patch(rect)\n\n# Add a rectangle for the legend\nrect = plt.Rectangle((0, 0), 1, 1, fc='white')\nax.add_patch(rect)\n\n# Add a rectangle for the legend\nrect = plt.Rectangle((0, 0), 1, 1, fc='gray')\nax.add_patch(rect)\n\n# Add a rectangle for the legend\nrect = plt.Rectangle((0, 0), 1, 1, fc='brown')\nax.add_patch(rect)\n\n# Add a rectangle for"}
{"file": "dataset/ori_500/line_78.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(10.0, 10.0))\n\n# Set the background color of the plot\nax.set_facecolor('#f0f0f0')\n\n# Set the title of the plot\nax.set_title('Sales Growth Over Time')\n\n# Set the x-axis label\nax.set_xlabel('Quarter')\n\n# Set the y-axis label\nax.set_ylabel('Sales Growth')\n\n# Define the data for each brand\nbrands = ['Brand A', 'Brand B', 'Brand C', 'Brand D', 'Brand E', 'Brand F']\nsales_growth = [\n    [1.2, 1.5, 1.8, 2.0, 2.2],\n    [1.4, 1.6, 1.8, 2.0, 2.2],\n    [1.3, 1.5, 1.7, 1.9, 2.1],\n    [1.5, 1.7, 1.9, 2.1, 2.3],\n    [1.4, 1.6, 1.8, 2.0, 2.2],\n    [1.6, 1.8, 2.0, 2.2, 2.4]\n]\n\n# Plot the sales growth for each brand\nfor i, brand in enumerate(brands):\n    ax.plot(sales_growth[i], label=brand)\n\n# Add a legend to the plot\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_79.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(18, 4))\n\n# Set the background color of the plot\nax.set_facecolor('lightgrey')\n\n# Set the grid lines\nax.grid(True)\n\n# Set the x-axis limits\nax.set_xlim(100, 700)\n\n# Set the y-axis limits\nax.set_ylim(0, 20)\n\n# Set the x-axis ticks\nax.set_xticks([100, 300, 500, 700])\n\n# Set the y-axis ticks\nax.set_yticks(np.arange(0, 21, 2))\n\n# Set the title of the plot\nax.set_title('Traffic Performance')\n\n# Set the x-axis label\nax.set_xlabel('Time (s)')\n\n# Set the y-axis label\nax.set_ylabel('Metric Value')\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((100, 0), 600, 20, facecolor='blue', edgecolor='black')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((300, 0), 400, 20, facecolor='orange', edgecolor='black')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((500, 0), 200, 20, facecolor='blue', edgecolor='black')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((700, 0), 0, 20, facecolor='blue', edgecolor='black')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((100, 0), 600, 20, facecolor='orange', edgecolor='black')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((300, 0), 400, 20, facecolor='blue', edgecolor='black')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((500, 0), 200, 20, facecolor='orange', edgecolor='black')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((700, 0), 0, 20, facecolor='blue', edgecolor='black')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((100, 0), 600, 20, facecolor='orange', edgecolor='black')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((300, 0), 400, 20, facecolor='blue', edgecolor='black')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((500, 0), 200, 20, facecolor='orange', edgecolor='black')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((700, 0), 0, 20, facecolor='blue', edgecolor='black')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((100, 0), 600, 20, facecolor='orange', edgecolor='black')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((300, 0), 400, 20, facecolor='blue', edgecolor='black')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((500, 0), 200, 20, facecolor='orange', edgecolor='black')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((700, 0), 0, 20, facecolor='blue', edgecolor='black')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((100, 0), 600, 20, facecolor='orange', edgecolor='black')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((300, 0), 400, 20, facecolor='blue', edgecolor='black')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((500, 0), 200, 20, facecolor='orange', edgecolor='black')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((700, 0), 0, 20, facecolor='blue', edgecolor='black')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((100, 0), 600, 20, facecolor='orange', edgecolor='black')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((300, 0), 400, 20, facecolor='blue', edgecolor='black')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((500, 0), 200, 20, facecolor='orange', edgecolor='black')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((700, 0), 0, 20, facecolor='blue', edgecolor='black')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((100, 0), 600, 20, facecolor='orange', edgecolor='black')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((300, 0), 400, 20, facecolor='blue', edgecolor='black')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((500, 0), 200, 20, facecolor='orange', edgecolor='black')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((700, 0), 0, 20, facecolor='blue', edgecolor='black')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((100, 0), 600, 20, facecolor='orange', edgecolor='black')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((300, 0), 400, 20, facecolor='blue', edgecolor='black')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((500, 0), 200, 20, facecolor='orange', edgecolor='black')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((700, 0), 0, 20, facecolor='blue', edgecolor='black')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((100, 0), 600, 20, facecolor='orange', edgecolor='black')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((300, 0), 400, 20, facecolor='blue', edgecolor='black')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((500, 0), 200, 20, facecolor='orange', edgecolor='black')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((700, 0), 0, 20, facecolor='blue', edgecolor='black')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((100, 0), 600, 20, facecolor='orange', edgecolor='black')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((300, 0), 400, 20, facecolor='blue', edgecolor='black')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((500, 0), 200, 20, facecolor='orange', edgecolor='black')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((700, 0), 0, 20, facecolor='blue', edgecolor='black')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((100, 0), 600, 20, facecolor='orange', edgecolor='black')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((300, 0), 400, 20, facecolor='blue', edgecolor='black')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((500, 0), 200, 20, facecolor='orange', edgecolor='black')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((700, 0), 0, 20, facecolor='blue', edgecolor='black')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((100, 0), 600, 20, facecolor='orange', edgecolor='black')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((300, 0), 400, 20, facecolor='blue', edgecolor='black')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((500, 0), 200, 20, facecolor='orange', edgecolor='black')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((700, 0), 0, 20, facecolor='blue', edgecolor='black')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((100, 0), 600, 20, facecolor='orange', edgecolor='black')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((300, 0), 400, 20, facecolor='blue', edgecolor='black')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((500, 0), 200, 20, facecolor='orange', edgecolor='black')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((700, 0), 0, 20, facecolor='blue', edgecolor='black')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((100, 0), 600, 20, facecolor='orange', edgecolor='black')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((300, 0), 400, 20, facecolor='blue', edgecolor='black')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((500, 0), 200, 20, facecolor='orange', edgecolor='black')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((700, 0), 0, 20, facecolor='blue', edgecolor='black')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((100, 0), 600, 20, facecolor='orange', edgecolor='black')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((300, 0), 400, 20, facecolor='blue', edgecolor='black')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((500, 0), 200, 20, facecolor='orange', edgecolor='black')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((700, 0), 0, 20, facecolor='blue', edgecolor='black')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((100, 0), 600, 20, facecolor='orange', edgecolor='black')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((300, 0), 400, 20, facecolor='blue', edgecolor='black')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((500, 0), 200, 20, facecolor='orange', edgecolor='black')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((700, 0), 0, 20, facecolor='blue', edgecolor='black')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((100, 0), 600, 20, facecolor='orange', edgecolor='black')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((300, 0), 400, 20, facecolor='blue', edgecolor='black')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((500, 0), 200, 20, facecolor='orange', edgecolor='black')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((700, 0), 0, 20, facecolor='blue', edgecolor='black')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((100, 0), 600, 20, facecolor='orange', edgecolor='black')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((300, 0), 400, 20, facecolor='blue', edgecolor='black')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((500, 0), 200, 20, facecolor='orange', edgecolor='black')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((700, 0), 0, 20, facecolor='blue', edgecolor='black')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((100, 0), 600, 20, facecolor='orange', edgecolor='black')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((300, 0), 400, 20, facecolor='blue', edgecolor='black')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((500, 0), 200, 20, facecolor='orange', edgecolor='black')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((700, 0), 0, 20, facecolor='blue', edgecolor='black')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((100, 0), 600, 20, facecolor='orange', edgecolor='black')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((300, 0), 400, 20, facecolor='blue', edgecolor='black')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((500, 0), 200, 20, facecolor='orange', edgecolor='black')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((700, 0), 0, 20, facecolor='blue', edgecolor='black')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((100, 0), 600, 20, facecolor='orange', edgecolor='black')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((300, 0), 400, 20, facecolor='blue', edgecolor='black')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((500, 0), 200, 20, facecolor='orange', edgecolor='black')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((700, 0), 0, 20, facecolor='blue', edgecolor='black')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((100, 0), 600, 20, facecolor='orange', edgecolor='black')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((300, 0), 400, 20, facecolor='blue', edgecolor='black')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((500, 0), 200, 20, facecolor='orange', edgecolor='black')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((700, 0), 0, 20, facecolor='blue', edgecolor='black')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((100, 0), 600, 20, facecolor='orange', edgecolor='black')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((300, 0), 400, "}
{"file": "dataset/ori_500/line_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nx = ['Passive', 'Rail', 'Replay', 'Sportive']\ny1 = [14, 12, 10, 8]\ny2 = [12, 10, 8, 6]\n\n# Plot\nfig, ax = plt.subplots(figsize=(6, 6))\nax.plot(x, y1, color='red')\nax.plot(x, y2, color='blue')\n\n# Markers\nfor i, txt in enumerate(x):\n    ax.annotate(txt, (x[i], y1[i]), textcoords=\"offset points\", xytext=(0,10), ha='center')\n\n# Labels\nax.set_xlabel('Driving Style')\nax.set_ylabel('Relaxation Level')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/line_80.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\nx = ['Phase 1', 'Phase 2', 'Phase 3', 'Phase 4', 'Phase 5']\ny1 = [20, 25, 30, 35, 40]\ny2 = [40, 45, 50, 55, 60]\ny3 = [60, 65, 70, 75, 80]\ny4 = [80, 85, 90, 95, 100]\ny5 = [100, 105, 110, 115, 120]\n\n# Create a figure and a set of subplots\nfig, axs = plt.subplots(3, 2, figsize=(9.0, 6.0))\n\n# Plot the data\naxs[0, 0].plot(x, y1, color='purple')\naxs[0, 0].set_title('Category A Growth')\naxs[0, 0].set_xlabel('Growth Phase')\naxs[0, 0].set_ylabel('Cumulative Value')\n\naxs[0, 1].plot(x, y2, color='orange')\naxs[0, 1].set_title('Category B Growth')\naxs[0, 1].set_xlabel('Growth Phase')\naxs[0, 1].set_ylabel('Cumulative Value')\n\naxs[1, 0].plot(x, y3, color='blue')\naxs[1, 0].set_title('Category C Growth')\naxs[1, 0].set_xlabel('Growth Phase')\naxs[1, 0].set_ylabel('Cumulative Value')\n\naxs[1, 1].plot(x, y4, color='green')\naxs[1, 1].set_title('Category D Growth')\naxs[1, 1].set_xlabel('Growth Phase')\naxs[1, 1].set_ylabel('Cumulative Value')\n\naxs[2, 0].plot(x, y5, color='red')\naxs[2, 0].set_title('Category E Growth')\naxs[2, 0].set_xlabel('Growth Phase')\naxs[2, 0].set_ylabel('Cumulative Value')\n\naxs[2, 1].plot(x, y5, color='yellow')\naxs[2, 1].set_title('Category F Growth')\naxs[2, 1].set_xlabel('Growth Phase')\naxs[2, 1].set_ylabel('Cumulative Value')\n\n# Adjust layout\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(9.0, 6.0))\n\n# Set the x-axis limits\nax.set_xlim(4, 30)\n\n# Set the y-axis limits\nax.set_ylim(10, 15)\n\n# Draw horizontal grid lines\nax.yaxis.grid(True)\n\n# Draw vertical grid lines\nax.xaxis.grid(True)\n\n# Plot the first line graph\nax.plot([4, 6, 8, 10], [10, 12, 14, 16], 'b-')\n\n# Plot the second line graph\nax.plot([4, 6, 8, 10], [10, 12, 14, 16], 'r-')\n\n# Add a rectangle with a label\nax.text(15, 14, \"Standard\", color='blue', fontsize=12)\nax.text(15, 13, \"Constrained\", color='orange', fontsize=12)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the pie chart\nregions = ['North', 'East', 'South', 'West']\nrates = [35, 25, 20, 15]\n\n# Create a figure and axis for the pie chart\nfig, ax = plt.subplots(figsize=(8, 8))\n\n# Plot the pie chart\nax.pie(rates, labels=regions, autopct='%1.1f%%', startangle=90)\n\n# Set the title of the pie chart\nax.set_title('Literacy Rate by Region')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 2.0))\n\n# Set the background color of the plot\nax.set_facecolor('lightgrey')\n\n# Set the title of the plot\nax.set_title('Beauty Attributes', fontsize=14)\n\n# Set the x-axis label\nax.set_xlabel('Sensitive attribute', fontsize=12)\n\n# Set the y-axis label\nax.set_ylabel('Attractive attribute', fontsize=12)\n\n# Set the x-axis limits\nax.set_xlim(-1.5, 1.5)\n\n# Set the y-axis limits\nax.set_ylim(0, 1)\n\n# Set the x-axis ticks\nax.set_xticks([-1, -0.5, 0, 0.5, 1])\n\n# Set the y-axis ticks\nax.set_yticks([0, 0.25, 0.5, 0.75, 1])\n\n# Set the x-axis tick labels\nax.set_xticklabels(['-1.0', '-0.5', '0.0', '0.5', '1.0'])\n\n# Set the y-axis tick labels\nax.set_yticklabels(['0.0', '0.25', '0.5', '0.75', '1.0'])\n\n# Draw a horizontal line at y=0.5\nax.axhline(y=0.5, color='r', linestyle='-')\n\n# Draw a vertical line at x=0.5\nax.axvline(x=0.5, color='b', linestyle='-')\n\n# Draw a rectangle with a width of 1 and a height of 0.5\nrect = plt.Rectangle((0.25, 0.25), 0.5, 0.5, color='g')\nax.add_patch(rect)\n\n# Draw a rectangle with a width of 0.5 and a height of 0.5\nrect = plt.Rectangle((0.75, 0.25), 0.5, 0.5, color='y')\nax.add_patch(rect)\n\n# Draw a rectangle with a width of 0.5 and a height of 0.5\nrect = plt.Rectangle((0.25, 0.75), 0.5, 0.5, color='c')\nax.add_patch(rect)\n\n# Draw a rectangle with a width of 0.5 and a height of 0.5\nrect = plt.Rectangle((0.75, 0.75), 0.5, 0.5, color='m')\nax.add_patch(rect)\n\n# Draw a rectangle with a width of 0.5 and a height of 0.5\nrect = plt.Rectangle((0.25, 0.25), 0.5, 0.5, color='k')\nax.add_patch(rect)\n\n# Draw a rectangle with a width of 0.5 and a height of 0.5\nrect = plt.Rectangle((0.75, 0.25), 0.5, 0.5, color='w')\nax.add_patch(rect)\n\n# Draw a rectangle with a width of 0.5 and a height of 0.5\nrect = plt.Rectangle((0.25, 0.75), 0.5, 0.5, color='b')\nax.add_patch(rect)\n\n# Draw a rectangle with a width of 0.5 and a height of 0.5\nrect = plt.Rectangle((0.75, 0.75), 0.5, 0.5, color='r')\nax.add_patch(rect)\n\n# Draw a rectangle with a width of 0.5 and a height of 0.5\nrect = plt.Rectangle((0.25, 0.25), 0.5, 0.5, color='g')\nax.add_patch(rect)\n\n# Draw a rectangle with a width of 0.5 and a height of 0.5\nrect = plt.Rectangle((0.75, 0.25), 0.5, 0.5, color='y')\nax.add_patch(rect)\n\n# Draw a rectangle with a width of 0.5 and a height of 0.5\nrect = plt.Rectangle((0.25, 0.75), 0.5, 0.5, color='c')\nax.add_patch(rect)\n\n# Draw a rectangle with a width of 0.5 and a height of 0.5\nrect = plt.Rectangle((0.75, 0.75), 0.5, 0.5, color='m')\nax.add_patch(rect)\n\n# Draw a rectangle with a width of 0.5 and a height of 0.5\nrect = plt.Rectangle((0.25, 0.25), 0.5, 0.5, color='k')\nax.add_patch(rect)\n\n# Draw a rectangle with a width of 0.5 and a height of 0.5\nrect = plt.Rectangle((0.75, 0.25), 0.5, 0.5, color='w')\nax.add_patch(rect)\n\n# Draw a rectangle with a width of 0.5 and a height of 0.5\nrect = plt.Rectangle((0.25, 0.75), 0.5, 0.5, color='b')\nax.add_patch(rect)\n\n# Draw a rectangle with a width of 0.5 and a height of 0.5\nrect = plt.Rectangle((0.75, 0.75), 0.5, 0.5, color='r')\nax.add_patch(rect)\n\n# Draw a rectangle with a width of 0.5 and a height of 0.5\nrect = plt.Rectangle((0.25, 0.25), 0.5, 0.5, color='g')\nax.add_patch(rect)\n\n# Draw a rectangle with a width of 0.5 and a height of 0.5\nrect = plt.Rectangle((0.75, 0.25), 0.5, 0.5, color='y')\nax.add_patch(rect)\n\n# Draw a rectangle with a width of 0.5 and a height of 0.5\nrect = plt.Rectangle((0.25, 0.75), 0.5, 0.5, color='c')\nax.add_patch(rect)\n\n# Draw a rectangle with a width of 0.5 and a height of 0.5\nrect = plt.Rectangle((0.75, 0.75), 0.5, 0.5, color='m')\nax.add_patch(rect)\n\n# Draw a rectangle with a width of 0.5 and a height of 0.5\nrect = plt.Rectangle((0.25, 0.25), 0.5, 0.5, color='k')\nax.add_patch(rect)\n\n# Draw a rectangle with a width of 0.5 and a height of 0.5\nrect = plt.Rectangle((0.75, 0.25), 0.5, 0.5, color='w')\nax.add_patch(rect)\n\n# Draw a rectangle with a width of 0.5 and a height of 0.5\nrect = plt.Rectangle((0.25, 0.75), 0.5, 0.5, color='b')\nax.add_patch(rect)\n\n# Draw a rectangle with a width of 0.5 and a height of 0.5\nrect = plt.Rectangle((0.75, 0.75), 0.5, 0.5, color='r')\nax.add_patch(rect)\n\n# Draw a rectangle with a width of 0.5 and a height of 0.5\nrect = plt.Rectangle((0.25, 0.25), 0.5, 0.5, color='g')\nax.add_patch(rect)\n\n# Draw a rectangle with a width of 0.5 and a height of 0.5\nrect = plt.Rectangle((0.75, 0.25), 0.5, 0.5, color='y')\nax.add_patch(rect)\n\n# Draw a rectangle with a width of 0.5 and a height of 0.5\nrect = plt.Rectangle((0.25, 0.75), 0.5, 0.5, color='c')\nax.add_patch(rect)\n\n# Draw a rectangle with a width of 0.5 and a height of 0.5\nrect = plt.Rectangle((0.75, 0.75), 0.5, 0.5, color='m')\nax.add_patch(rect)\n\n# Draw a rectangle with a width of 0.5 and a height of 0.5\nrect = plt.Rectangle((0.25, 0.25), 0.5, 0.5, color='k')\nax.add_patch(rect)\n\n# Draw a rectangle with a width of 0.5 and a height of 0.5\nrect = plt.Rectangle((0.75, 0.25), 0.5, 0.5, color='w')\nax.add_patch(rect)\n\n# Draw a rectangle with a width of 0.5 and a height of 0.5\nrect = plt.Rectangle((0.25, 0.75), 0.5, 0.5, color='b')\nax.add_patch(rect)\n\n# Draw a rectangle with a width of 0.5 and a height of 0.5\nrect = plt.Rectangle((0.75, 0.75), 0.5, 0.5, color='r')\nax.add_patch(rect)\n\n# Draw a rectangle with a width of 0.5 and a height of 0.5\nrect = plt.Rectangle((0.25, 0.25), 0.5, 0.5, color='g')\nax.add_patch(rect)\n\n# Draw a rectangle with a width of 0.5 and a height of 0.5\nrect = plt.Rectangle((0.75, 0.25), 0.5, 0.5, color='y')\nax.add_patch(rect)\n\n# Draw a rectangle with a width of 0.5 and a height of 0.5\nrect = plt.Rectangle((0.25, 0.75), 0.5, 0.5, color='c')\nax.add_patch(rect)\n\n# Draw a rectangle with a width of 0.5 and a height of 0.5\nrect = plt.Rectangle((0.75, 0.75), 0.5, 0.5, color='m')\nax.add_patch(rect)\n\n# Draw a rectangle with a width of 0.5 and a height of 0.5\nrect = plt.Rectangle((0.25, 0.25), 0.5, 0.5, color='k')\nax.add_patch(rect)\n\n# Draw a rectangle with a width of 0.5 and a height of 0.5\nrect = plt.Rectangle((0.75, 0.25), 0.5, 0.5, color='w')\nax.add_patch(rect)\n\n# Draw a rectangle with a width of 0.5 and a height of 0.5\nrect = plt.Rectangle((0.25, 0.75), 0.5, 0.5, color='b')\nax.add_patch(rect)\n\n# Draw a rectangle with a width of 0.5 and a height of 0.5\nrect = plt.Rectangle((0.75, 0.75), 0.5, 0.5, color='r')\nax.add_patch(rect)\n\n# Draw a rectangle with a width of 0.5 and a height of 0.5\nrect = plt.Rectangle((0.25, 0.25), 0.5, 0.5, color='g')\nax.add_patch(rect)\n\n# Draw a rectangle with a width of 0.5 and a height of 0.5\nrect = plt.Rectangle((0.75, 0.25), 0.5, 0.5, color='y')\nax.add_patch(rect)\n\n# Draw a rectangle with a width of 0.5 and a height of 0.5\nrect = plt.Rectangle((0.25, 0.75), 0.5, 0.5, color='c')\nax.add_patch(rect)\n\n# Draw a rectangle with a width of 0.5 and a height of 0.5\nrect = plt.Rectangle((0.75, 0.75), 0.5, 0.5, color='m')\nax.add_patch(rect)\n\n# Draw a rectangle with a width of 0.5 and a height of 0.5\nrect = plt.Rectangle((0.25, 0.25), 0.5, 0.5, color='k')\nax.add_patch(rect)\n\n# Draw a rectangle with a width of 0.5 and a height of 0.5\nrect = plt.Rectangle((0.75, 0.25), 0.5, 0.5, color='w')\nax.add_patch(rect)\n\n# Draw a rectangle with a width of 0.5 and a height of 0.5\nrect = plt.Rectangle((0.25, 0.75), 0.5, 0.5, color='b')\nax.add_patch(rect)\n\n# Draw a rectangle with a width of 0.5 and a height of 0.5\nrect = plt.Rectangle((0.75, 0.75), 0.5, 0.5, color='r')\nax.add_patch(rect)\n\n# Draw a rectangle with a width of 0.5 and a height of 0.5\nrect = plt.Rectangle((0.25, 0.25), 0.5, 0.5, color='g')\nax.add_patch(rect)\n\n# Draw a rectangle with a width of 0.5 and a height of 0.5\nrect = plt.Rectangle((0.75, 0.25), 0.5, 0.5, color='y')\nax.add_patch(rect)\n\n# Draw a rectangle with a width of 0.5 and a height of 0.5\nrect = plt.Rectangle((0.25, 0.75), 0.5, 0.5, color='c')\nax.add_patch(rect)\n\n# Draw a rectangle with a width of 0.5 and a height of 0.5\nrect = plt.Rectangle((0.75, 0.75), 0.5, 0.5, color='m')\nax.add_patch(rect)\n\n# Draw a rectangle with a width of 0.5 and a height of 0.5\nrect = plt.Rectangle((0.25, 0.25), 0.5, 0.5, color='k')\nax.add_patch(rect)\n\n# Draw a rectangle with a width of 0.5 and a height of 0.5\nrect = plt.Rectangle((0.75, 0.25), 0.5, 0.5, color='w')\nax.add_patch(rect)\n\n# Draw a rectangle with a width of 0.5 and a height of 0.5\nrect = plt.Rectangle((0.25, 0.75), 0.5, 0.5, color='b')\nax.add_patch(rect)\n\n# Draw a rectangle with a width of 0.5 and a height of 0.5\nrect = plt.Rectangle((0.75, 0.75), 0.5, 0.5, color='r')\nax.add_patch(rect)\n\n# Draw a rectangle with a width of 0.5 and a height of 0.5\nrect = plt.Rectangle((0.25, 0.25), 0.5, 0.5, color='g')\nax.add_patch(rect)\n\n# Draw a rectangle with a width of 0.5 and a height of 0.5\nrect = plt.Rectangle((0.75, 0.25), 0.5, 0.5, color='y')\nax.add_patch(rect)\n\n# Draw a rectangle with a width of 0.5 and a height of 0.5\nrect = plt.Rectangle((0.25, 0.75), 0.5, 0.5, color='c')\nax.add_patch(rect)\n\n# Draw a rectangle with a width of 0.5 and a height of 0.5\nrect = plt.Rectangle((0.75, 0.75), 0.5, 0.5, color='m')\nax.add_patch(rect)\n\n# Draw a rectangle with a width of 0.5 and a height of 0.5\nrect = plt.Rectangle((0.25, 0.25), 0.5, 0.5, color='k')\nax.add_patch(rect)\n\n# Draw a rectangle with a width of 0.5 and a height of 0.5\nrect = plt.Rectangle((0.75, 0.25), 0.5, 0.5, color='w')\nax.add_patch(rect)\n\n# Draw a rectangle with a width of 0.5 and a height of 0.5\nrect = plt.Rectangle((0.25, 0.75), 0.5, 0.5, color='b')\nax.add_patch(rect)\n\n# Draw a rectangle with a width of 0.5 and a height of 0.5\nrect = plt.Rectangle((0.75, 0.75), 0.5, 0.5, color='r')\nax.add_patch(rect)\n\n# Draw a rectangle with a width of 0.5 and a height of 0.5\nrect = plt.Rectangle((0.25, 0.25), 0.5, 0.5, color='g')\nax.add_patch(rect)\n\n# Draw a rectangle with a width of 0.5 and a height of 0.5\nrect = plt.Rectangle((0.75, 0.25), 0.5, 0.5, color='y')\nax.add_patch(rect)\n\n# Draw a rectangle with a width of 0.5 and a height of 0.5\nrect = plt.Rectangle((0.25, 0.75), 0.5, 0.5, color='c')\n"}
{"file": "dataset/ori_500/multidiff_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the left column\nleft_column_data = {\n    'Engstrom (M1)': 44.15,\n    'Zhang (M2)': 44.05,\n    'Rice (M3)': 41.55,\n    'Rade (M4)': 40.90,\n    'Hendryks (M5)': 40.65,\n    'Addep. (M6)': 39.45,\n    'Carmon (M7)': 36.70\n}\n\n# Data for the right column\nright_column_data = {\n    'Engstrom (M1)': [0.00, 6.20, 4.90, 4.25, 3.65, 3.25],\n    'Zhang (M2)': [0.00, 6.20, 4.90, 4.25, 3.65, 3.25],\n    'Rice (M3)': [0.00, 5.15, 2.80, 5.25, 3.65, 2.85],\n    'Rade (M4)': [0.00, 6.25, 0.00, 5.35, 3.85, 2.85],\n    'Hendryks (M5)': [0.00, 7.25, 0.00, 5.75, 3.85, 2.85],\n    'Addep. (M6)': [0.00, 8.75, 0.00, 6.45, 4.85, 3.85],\n    'Carmon (M7)': [0.00, 9.90, 0.00, 6.85, 4.95, 3.85]\n}\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot the left column data\nax.barh(list(left_column_data.keys()), list(left_column_data.values()), color='green')\n\n# Set the title of the left column\nax.set_title('Robust Error (%)')\n\n# Set the x-axis label\nax.set_xlabel('Error (%)')\n\n# Set the y-axis label\nax.set_ylabel('Models')\n\n# Set the y-axis limits\nax.set_ylim(-1, len(left_column_data))\n\n# Set the y-axis ticks\nax.set_yticks(range(len(left_column_data)))\n\n# Set the y-axis tick labels\nax.set_yticklabels(list(left_column_data.keys()))\n\n# Set the x-axis limits\nax.set_xlim(0, 50)\n\n# Set the x-axis ticks\nax.set_xticks([0, 10, 20, 30, 40, 50])\n\n# Set the x-axis tick labels\nax.set_xticklabels(['0', '10', '20', '30', '40', '50'])\n\n# Create a second subplot\nax2 = ax.twinx()\n\n# Plot the right column data\nfor i, (key, value) in enumerate(right_column_data.items()):\n    ax2.barh(i, value[0], height=0.5, color='blue')\n    ax2.barh(i, value[1], height=0.5, left=value[0], color='green')\n    ax2.barh(i, value[2], height=0.5, left=value[0] + value[1], color='red')\n    ax2.barh(i, value[3], height=0.5, left=value[0] + value[1] + value[2], color='yellow')\n    ax2.barh(i, value[4], height=0.5, left=value[0] + value[1] + value[2] + value[3], color='cyan')\n    ax2.barh(i, value[5], height=0.5, left=value[0] + value[1] + value[2] + value[3] + value[4], color='magenta')\n\n# Set the title of the right column\nax2.set_title('RNFs (%)')\n\n# Set the y-axis label\nax2.set_ylabel('Models')\n\n# Set the y-axis limits\nax2.set_ylim(-1, len(right_column_data))\n\n# Set the y-axis ticks\nax2.set_yticks(range(len(right_column_data)))\n\n# Set the y-axis tick labels\nax2.set_yticklabels(list(right_column_data.keys()))\n\n# Set the x-axis limits\nax2.set_xlim(0, 10)\n\n# Set the x-axis ticks\nax2.set_xticks([0, 2, 4, 6, 8, 10])\n\n# Set the x-axis tick labels\nax2.set_xticklabels(['0', '2', '4', '6', '8', '10'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\ndata = {\n    'VGG16': [0.551, 0.538, 0.744, 0.762],\n    'Resnet101': [0.394, 0.477, 0.762, 0.744, 0.662, 0.625, 0.562, 0.500]\n}\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 4))\n\n# Plot the data\nax.plot(data['VGG16'], label='VGG16 Cartesian', color='red')\nax.plot(data['Resnet101'], label='Resnet101 Cartesian', color='blue')\n\n# Set the title and labels\nax.set_title('C Rotation Invariance')\nax.set_xlabel('Rotation angle (\u00b0)')\nax.set_ylabel('C')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Set the background color of the plot\nax.set_facecolor('lightblue')\n\n# Set the title of the plot\nax.set_title('Beauty Products')\n\n# Set the x-axis label\nax.set_xlabel('Sensitivity Attribute')\n\n# Set the y-axis label\nax.set_ylabel('Price ($,Z)')\n\n# Set the x-axis limits\nax.set_xlim(-0.5, 4.5)\n\n# Set the y-axis limits\nax.set_ylim(0, 1.5)\n\n# Create a bar chart with the given data\nax.bar(['PaleSkin', 'OvalFace', 'Smiling', 'Attractive', 'Male', 'BigLips', 'PointyNose', 'White', 'BigNose', 'NoBeard', 'HeavyMakeup'], [0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2], color='skyblue')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(5.0, 6.0))\n\n# Set the title of the plot\nax.set_title('a')\n\n# Create a rectangle for the background\nrect = plt.Rectangle((0, 0), 1, 1, fc='lightgrey', alpha=0.5)\nax.add_patch(rect)\n\n# Create a line graph\nx = np.linspace(0, 50, 100)\ny = -8 + 2 * np.sin(x / 10)\nax.plot(x, y, 'k-')\n\n# Add markers at specific points\nmarkers = [0, 10, 20, 30, 40, 50]\nfor m in markers:\n    ax.plot(m, -8 + 2 * np.sin(m / 10), 'ko')\n\n# Set the x-axis label\nax.set_xlabel('GPT2Tokenizer rank')\n\n# Set the y-axis label\nax.set_ylabel('Loss')\n\n# Create a second subplot\nax2 = fig.add_subplot(122)\n\n# Set the title of the second subplot\nax2.set_title('b')\n\n# Create a scatter plot\nx = np.array([0, 10, 20, 30, 40])\ny = np.array([8, 6, 4, 2, 0])\nax2.scatter(x, y, color='blue')\n\n# Add rectangles to the scatter plot\nrectangles = [plt.Rectangle((0, 0), 1, 1, fc='gray'), plt.Rectangle((0, 0), 1, 1, fc='gray'), \n             plt.Rectangle((0, 0), 1, 1, fc='gray'), plt.Rectangle((0, 0), 1, 1, fc='gray'), \n             plt.Rectangle((0, 0), 1, 1, fc='gray')]\nfor r in rectangles:\n    ax2.add_patch(r)\n\n# Set the x-axis label\nax2.set_xlabel('# of documents')\n\n# Set the y-axis label\nax2.set_ylabel('Loss')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the bar chart\ncategories = ['Sentiment', 'Toxicity', 'News']\nvalues = [0.35, 0.25, 0.25]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 4))\n\n# Plot the bar chart\nbars = ax.bar(categories, values, color='blue')\n\n# Add labels and title\nax.set_xlabel('Categories')\nax.set_ylabel('Correlation')\nax.set_title('Sentiment Analysis of Categories')\n\n# Set the y-axis limits\nax.set_ylim(0, 0.4)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_16.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the first graph\nx = [201355, 201908, 202670, 203540]\ny = [45, 55, 50, 40]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6, 6))\n\n# Plot the data\nax.plot(x, y, 'ro-')\n\n# Set the title and labels\nax.set_title('Olympic Medal Performance')\nax.set_xlabel('Year')\nax.set_ylabel('Number of Medals')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_17.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 4))\n\n# Draw a rectangle for the study level\nax.add_patch(plt.Rectangle((0, 0), 5, 80, color='blue'))\n\n# Draw a rectangle for the knowledge increase\nax.add_patch(plt.Rectangle((0, 20), 5, 60, color='orange'))\n\n# Draw a rectangle for the cumulative knowledge\nax.add_patch(plt.Rectangle((0, 40), 5, 40, color='cyan'))\n\n# Set the limits of the plot\nax.set_xlim(0, 5)\nax.set_ylim(0, 80)\n\n# Set the labels\nax.set_xlabel('Study Level')\nax.set_ylabel('Cumulative Knowledge (%)')\n\n# Draw a line for the knowledge increase\nax.plot([0, 5], [20, 80], color='yellow')\n\n# Draw a line for the cumulative knowledge\nax.plot([0, 5], [40, 80], color='yellow')\n\n# Draw a line for the knowledge increase\nax.plot([0, 5], [60, 80], color='yellow')\n\n# Draw a line for the cumulative knowledge\nax.plot([0, 5], [80, 80], color='yellow')\n\n# Draw a line for the knowledge increase\nax.plot([0, 5], [80, 80], color='yellow')\n\n# Draw a line for the cumulative knowledge\nax.plot([0, 5], [80, 80], color='yellow')\n\n# Draw a line for the knowledge increase\nax.plot([0, 5], [80, 80], color='yellow')\n\n# Draw a line for the cumulative knowledge\nax.plot([0, 5], [80, 80], color='yellow')\n\n# Draw a line for the knowledge increase\nax.plot([0, 5], [80, 80], color='yellow')\n\n# Draw a line for the cumulative knowledge\nax.plot([0, 5], [80, 80], color='yellow')\n\n# Draw a line for the knowledge increase\nax.plot([0, 5], [80, 80], color='yellow')\n\n# Draw a line for the cumulative knowledge\nax.plot([0, 5], [80, 80], color='yellow')\n\n# Draw a line for the knowledge increase\nax.plot([0, 5], [80, 80], color='yellow')\n\n# Draw a line for the cumulative knowledge\nax.plot([0, 5], [80, 80], color='yellow')\n\n# Draw a line for the knowledge increase\nax.plot([0, 5], [80, 80], color='yellow')\n\n# Draw a line for the cumulative knowledge\nax.plot([0, 5], [80, 80], color='yellow')\n\n# Draw a line for the knowledge increase\nax.plot([0, 5], [80, 80], color='yellow')\n\n# Draw a line for the cumulative knowledge\nax.plot([0, 5], [80, 80], color='yellow')\n\n# Draw a line for the knowledge increase\nax.plot([0, 5], [80, 80], color='yellow')\n\n# Draw a line for the cumulative knowledge\nax.plot([0, 5], [80, 80], color='yellow')\n\n# Draw a line for the knowledge increase\nax.plot([0, 5], [80, 80], color='yellow')\n\n# Draw a line for the cumulative knowledge\nax.plot([0, 5], [80, 80], color='yellow')\n\n# Draw a line for the knowledge increase\nax.plot([0, 5], [80, 80], color='yellow')\n\n# Draw a line for the cumulative knowledge\nax.plot([0, 5], [80, 80], color='yellow')\n\n# Draw a line for the knowledge increase\nax.plot([0, 5], [80, 80], color='yellow')\n\n# Draw a line for the cumulative knowledge\nax.plot([0, 5], [80, 80], color='yellow')\n\n# Draw a line for the knowledge increase\nax.plot([0, 5], [80, 80], color='yellow')\n\n# Draw a line for the cumulative knowledge\nax.plot([0, 5], [80, 80], color='yellow')\n\n# Draw a line for the knowledge increase\nax.plot([0, 5], [80, 80], color='yellow')\n\n# Draw a line for the cumulative knowledge\nax.plot([0, 5], [80, 80], color='yellow')\n\n# Draw a line for the knowledge increase\nax.plot([0, 5], [80, 80], color='yellow')\n\n# Draw a line for the cumulative knowledge\nax.plot([0, 5], [80, 80], color='yellow')\n\n# Draw a line for the knowledge increase\nax.plot([0, 5], [80, 80], color='yellow')\n\n# Draw a line for the cumulative knowledge\nax.plot([0, 5], [80, 80], color='yellow')\n\n# Draw a line for the knowledge increase\nax.plot([0, 5], [80, 80], color='yellow')\n\n# Draw a line for the cumulative knowledge\nax.plot([0, 5], [80, 80], color='yellow')\n\n# Draw a line for the knowledge increase\nax.plot([0, 5], [80, 80], color='yellow')\n\n# Draw a line for the cumulative knowledge\nax.plot([0, 5], [80, 80], color='yellow')\n\n# Draw a line for the knowledge increase\nax.plot([0, 5], [80, 80], color='yellow')\n\n# Draw a line for the cumulative knowledge\nax.plot([0, 5], [80, 80], color='yellow')\n\n# Draw a line for the knowledge increase\nax.plot([0, 5], [80, 80], color='yellow')\n\n# Draw a line for the cumulative knowledge\nax.plot([0, 5], [80, 80], color='yellow')\n\n# Draw a line for the knowledge increase\nax.plot([0, 5], [80, 80], color='yellow')\n\n# Draw a line for the cumulative knowledge\nax.plot([0, 5], [80, 80], color='yellow')\n\n# Draw a line for the knowledge increase\nax.plot([0, 5], [80, 80], color='yellow')\n\n# Draw a line for the cumulative knowledge\nax.plot([0, 5], [80, 80], color='yellow')\n\n# Draw a line for the knowledge increase\nax.plot([0, 5], [80, 80], color='yellow')\n\n# Draw a line for the cumulative knowledge\nax.plot([0, 5], [80, 80], color='yellow')\n\n# Draw a line for the knowledge increase\nax.plot([0, 5], [80, 80], color='yellow')\n\n# Draw a line for the cumulative knowledge\nax.plot([0, 5], [80, 80], color='yellow')\n\n# Draw a line for the knowledge increase\nax.plot([0, 5], [80, 80], color='yellow')\n\n# Draw a line for the cumulative knowledge\nax.plot([0, 5], [80, 80], color='yellow')\n\n# Draw a line for the knowledge increase\nax.plot([0, 5], [80, 80], color='yellow')\n\n# Draw a line for the cumulative knowledge\nax.plot([0, 5], [80, 80], color='yellow')\n\n# Draw a line for the knowledge increase\nax.plot([0, 5], [80, 80], color='yellow')\n\n# Draw a line for the cumulative knowledge\nax.plot([0, 5], [80, 80], color='yellow')\n\n# Draw a line for the knowledge increase\nax.plot([0, 5], [80, 80], color='yellow')\n\n# Draw a line for the cumulative knowledge\nax.plot([0, 5], [80, 80], color='yellow')\n\n# Draw a line for the knowledge increase\nax.plot([0, 5], [80, 80], color='yellow')\n\n# Draw a line for the cumulative knowledge\nax.plot([0, 5], [80, 80], color='yellow')\n\n# Draw a line for the knowledge increase\nax.plot([0, 5], [80, 80], color='yellow')\n\n# Draw a line for the cumulative knowledge\nax.plot([0, 5], [80, 80], color='yellow')\n\n# Draw a line for the knowledge increase\nax.plot([0, 5], [80, 80], color='yellow')\n\n# Draw a line for the cumulative knowledge\nax.plot([0, 5], [80, 80], color='yellow')\n\n# Draw a line for the knowledge increase\nax.plot([0, 5], [80, 80], color='yellow')\n\n# Draw a line for the cumulative knowledge\nax.plot([0, 5], [80, 80], color='yellow')\n\n# Draw a line for the knowledge increase\nax.plot([0, 5], [80, 80], color='yellow')\n\n# Draw a line for the cumulative knowledge\nax.plot([0, 5], [80, 80], color='yellow')\n\n# Draw a line for the knowledge increase\nax.plot([0, 5], [80, 80], color='yellow')\n\n# Draw a line for the cumulative knowledge\nax.plot([0, 5], [80, 80], color='yellow')\n\n# Draw a line for the knowledge increase\nax.plot([0, 5], [80, 80], color='yellow')\n\n# Draw a line for the cumulative knowledge\nax.plot([0, 5], [80, 80], color='yellow')\n\n# Draw a line for the knowledge increase\nax.plot([0, 5], [80, 80], color='yellow')\n\n# Draw a line for the cumulative knowledge\nax.plot([0, 5], [80, 80], color='yellow')\n\n# Draw a line for the knowledge increase\nax.plot([0, 5], [80, 80], color='yellow')\n\n# Draw a line for the cumulative knowledge\nax.plot([0, 5], [80, 80], color='yellow')\n\n# Draw a line for the knowledge increase\nax.plot([0, 5], [80, 80], color='yellow')\n\n# Draw a line for the cumulative knowledge\nax.plot([0, 5], [80, 80], color='yellow')\n\n# Draw a line for the knowledge increase\nax.plot([0, 5], [80, 80], color='yellow')\n\n# Draw a line for the cumulative knowledge\nax.plot([0, 5], [80, 80], color='yellow')\n\n# Draw a line for the knowledge increase\nax.plot([0, 5], [80, 80], color='yellow')\n\n# Draw a line for the cumulative knowledge\nax.plot([0, 5], [80, 80], color='yellow')\n\n# Draw a line for the knowledge increase\nax.plot([0, 5], [80, 80], color='yellow')\n\n# Draw a line for the cumulative knowledge\nax.plot([0, 5], [80, 80], color='yellow')\n\n# Draw a line for the knowledge increase\nax.plot([0, 5], [80, 80], color='yellow')\n\n# Draw a line for the cumulative knowledge\nax.plot([0, 5], [80, 80], color='yellow')\n\n# Draw a line for the knowledge increase\nax.plot([0, 5], [80, 80], color='yellow')\n\n# Draw a line for the cumulative knowledge\nax.plot([0, 5], [80, 80], color='yellow')\n\n# Draw a line for the knowledge increase\nax.plot([0, 5], [80, 80], color='yellow')\n\n# Draw a line for the cumulative knowledge\nax.plot([0, 5], [80, 80], color='yellow')\n\n# Draw a line for the knowledge increase\nax.plot([0, 5], [80, 80], color='yellow')\n\n# Draw a line for the cumulative knowledge\nax.plot([0, 5], [80, 80], color='yellow')\n\n# Draw a line for the knowledge increase\nax.plot([0, 5], [80, 80], color='yellow')\n\n# Draw a line for the cumulative knowledge\nax.plot([0, 5], [80, 80], color='yellow')\n\n# Draw a line for the knowledge increase\nax.plot([0, 5], [80, 80], color='yellow')\n\n# Draw a line for the cumulative knowledge\nax.plot([0, 5], [80, 80], color='yellow')\n\n# Draw a line for the knowledge increase\nax.plot([0, 5], [80, 80], color='yellow')\n\n# Draw a line for the cumulative knowledge\nax.plot([0, 5], [80, 80], color='yellow')\n\n# Draw a line for the knowledge increase\nax.plot([0, 5], [80, 80], color='yellow')\n\n# Draw a line for the cumulative knowledge\nax.plot([0, 5], [80, 80], color='yellow')\n\n# Draw a line for the knowledge increase\nax.plot([0, 5], [80, 80], color='yellow')\n\n# Draw a line for the cumulative knowledge\nax.plot([0, 5], [80, 80], color='yellow')\n\n# Draw a line for the knowledge increase\nax.plot([0, 5], [80, 80], color='yellow')\n\n# Draw a line for the cumulative knowledge\nax.plot([0, 5], [80, 80], color='yellow')\n\n# Draw a line for the knowledge increase\nax.plot([0, 5], [80, 80], color='yellow')\n\n# Draw a line for the cumulative knowledge\nax.plot([0, 5], [80, 80], color='yellow')\n\n# Draw a line for the knowledge increase\nax.plot([0, 5], [80, 80], color='yellow')\n\n# Draw a line for the cumulative knowledge\nax.plot([0, 5], [80, 80], color='yellow')\n\n# Draw a line for the knowledge increase\nax.plot([0, 5], [80, 80], color='yellow')\n\n# Draw a line for the cumulative knowledge\nax.plot([0, 5], [80, 80], color='yellow')\n\n# Draw a line for the knowledge increase\nax.plot([0, 5], [80, 80], color='yellow')\n\n# Draw a line for the cumulative knowledge\nax.plot([0, 5], [80, 80], color='yellow')\n\n# Draw a line for the knowledge increase\nax.plot([0, 5], [80, 80], color='yellow')\n\n# Draw a line for the cumulative knowledge\nax.plot([0, 5], [80, 80], color='yellow')\n\n# Draw a line for the knowledge increase\nax.plot([0, 5], [80, 80], color='yellow')\n\n# Draw a line for the cumulative knowledge\nax.plot([0, 5], [80, 80], color='yellow')\n\n# Draw a line for the knowledge increase\nax.plot([0, 5], [80, 80], color='yellow')\n\n# Draw a line for the cumulative knowledge\nax.plot([0, 5], [80, 80], color='yellow')\n\n# Draw a line for the knowledge increase\nax.plot([0, 5], [80, 80], color='yellow')\n\n# Draw a line for the cumulative knowledge\nax.plot([0, 5], [80, 80], color='yellow')\n\n# Draw a line for the knowledge increase\nax.plot([0, 5], [80, 80], color='yellow')\n\n# Draw a line for the cumulative knowledge\nax.plot([0, 5], [80, 80], color='yellow')\n\n# Draw a line for the knowledge increase\nax.plot([0, 5], [80, 80], color='yellow')\n\n# Draw a line for the cumulative knowledge\nax.plot([0, 5], [80, 80], color='yellow')\n\n# Draw a line for the knowledge increase\nax.plot([0, 5], [80, 80], color='yellow')\n\n# Draw a line for the cumulative knowledge\nax.plot([0, 5], [80, 80], color='yellow')\n\n# Draw a line for the knowledge increase\nax.plot([0, 5], [80, 80], color='yellow')\n\n# Draw a line for the cumulative knowledge\nax.plot([0, 5], [80, 80], color='yellow')\n\n# Draw a line for the knowledge increase\nax.plot([0, 5], [80, 80], color='yellow')\n\n# Draw a line for the cumulative knowledge\nax.plot([0, 5], [80, 80], color='yellow')\n\n# Draw a line for the knowledge increase\nax.plot([0, 5], [80, 80], color='yellow')\n\n# Draw a line for the cumulative knowledge\nax.plot([0, 5], [80, 80], color='yellow')\n\n# Draw a line for the knowledge increase\nax.plot([0, 5], [80, 80], color='yellow')\n\n# Draw a line for the cumulative knowledge\nax.plot([0, 5], [80, 80], color='yellow')\n\n# Draw a line for the knowledge increase\nax.plot([0, 5], [80, 80], color='yellow')\n\n# Draw a line for"}
{"file": "dataset/ori_500/multidiff_18.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nyears = [2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022]\nhardware = [30, 40, 50, 60, 70, 80, 90, 100]\nsoftware = [40, 50, 60, 70, 80, 90, 100, 110]\nai = [50, 60, 70, 80, 90, 100, 110, 120]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 10.0))\n\n# Plot the data\nax.plot(years, hardware, label='Hardware', color='blue')\nax.plot(years, software, label='Software', color='orange')\nax.plot(years, ai, label='AI', color='green')\n\n# Set the title and labels\nax.set_title('Technological Advancements')\nax.set_xlabel('Year')\nax.set_ylabel('Progress (%)')\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_19.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the first graph\ncountries = ['USA', 'UK', 'Germany', 'France', 'Italy', 'Spain']\ncrime_rates = [3.2, 2.8, 2.5, 2.7, 2.9, 2.6]\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(8.0, 10.0))\nbars = ax.bar(countries, crime_rates, color='orange')\nax.set_title('Average Legal Crime Rates by Country')\nax.set_xlabel('Country')\nax.set_ylabel('Crime Rate per 100,000 Inhabitants')\n\n# Add vertical lines for each country\nfor bar in bars:\n    ax.add_patch(plt.Rectangle((bar.get_x() - 0.45, bar.get_height()), bar.get_width(), 0.005, color='black'))\n\n# Data for the second graph\ncrimes = ['Theft', 'Assault', 'Fraud', 'Drug Trafficking', 'Vandalism']\ncrime_rates_2 = [120, 130, 110, 140, 100]\n\n# Create a line chart\nfig, ax = plt.subplots(figsize=(8.0, 10.0))\nax.plot(crimes, crime_rates_2, marker='o', linestyle='-', color='blue')\nax.set_title('Average Legal Crime Rates by Country')\nax.set_xlabel('Crime')\nax.set_ylabel('Crime Rate per 100,000 Inhabitants')\n\n# Add horizontal lines for each crime\nfor i, rate in enumerate(crime_rates_2):\n    ax.add_patch(plt.Rectangle((i-0.45, rate), 0.9, 0.005, color='black'))\n\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis for the bar chart\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Define the data for the bar chart\ncategories = ['Public School', 'Private School']\nvalues = [80, 60]\n\n# Create a bar chart with the data\nax.bar(categories, values, color='blue')\n\n# Set the title of the chart\nax.set_title('Student Performance in Schools')\n\n# Set the x-axis label\nax.set_xlabel('School Type')\n\n# Set the y-axis label\nax.set_ylabel('Score')\n\n# Display the plot\nplt.show()\n\n# Create a figure and axis for the pie chart\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Define the data for the pie chart\nlabels = ['Books', 'Staff', 'Extracurricular', 'Facilities', 'Technology']\nsizes = [20, 10, 15, 10, 30]\ncolors = ['blue', 'gray', 'orange', 'green', 'red']\n\n# Create a pie chart with the data\nax.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%', startangle=90)\n\n# Set the title of the chart\nax.set_title('Resource Allocation in Schools')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_20.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Set the title of the plot\nax.set_title('Average Annual Temperature')\n\n# Create a rectangle for Region 1\nrect1 = plt.Rectangle((10, 10), 20, 10, color='skyblue')\nax.add_patch(rect1)\n\n# Create a rectangle for Region 2\nrect2 = plt.Rectangle((30, 10), 20, 10, color='lightblue')\nax.add_patch(rect2)\n\n# Create a rectangle for Region 3\nrect3 = plt.Rectangle((50, 10), 20, 10, color='lightgreen')\nax.add_patch(rect3)\n\n# Create a rectangle for Region 4\nrect4 = plt.Rectangle((70, 10), 20, 10, color='salmon')\nax.add_patch(rect4)\n\n# Create a rectangle for Region 5\nrect5 = plt.Rectangle((90, 10), 20, 10, color='lightgrey')\nax.add_patch(rect5)\n\n# Create a rectangle for Region 6\nrect6 = plt.Rectangle((110, 10), 20, 10, color='lightcoral')\nax.add_patch(rect6)\n\n# Create a rectangle for Region 7\nrect7 = plt.Rectangle((130, 10), 20, 10, color='lightyellow')\nax.add_patch(rect7)\n\n# Create a rectangle for Region 8\nrect8 = plt.Rectangle((150, 10), 20, 10, color='lightpink')\nax.add_patch(rect8)\n\n# Create a rectangle for Region 9\nrect9 = plt.Rectangle((170, 10), 20, 10, color='lightbrown')\nax.add_patch(rect9)\n\n# Create a rectangle for Region 10\nrect10 = plt.Rectangle((190, 10), 20, 10, color='lightcyan')\nax.add_patch(rect10)\n\n# Create a rectangle for Region 11\nrect11 = plt.Rectangle((210, 10), 20, 10, color='lightmagenta')\nax.add_patch(rect11)\n\n# Create a rectangle for Region 12\nrect12 = plt.Rectangle((230, 10), 20, 10, color='lightorange')\nax.add_patch(rect12)\n\n# Create a rectangle for Region 13\nrect13 = plt.Rectangle((250, 10), 20, 10, color='lightpurple')\nax.add_patch(rect13)\n\n# Create a rectangle for Region 14\nrect14 = plt.Rectangle((270, 10), 20, 10, color='lightred')\nax.add_patch(rect14)\n\n# Create a rectangle for Region 15\nrect15 = plt.Rectangle((290, 10), 20, 10, color='lightblue')\nax.add_patch(rect15)\n\n# Create a rectangle for Region 16\nrect16 = plt.Rectangle((310, 10), 20, 10, color='lightgreen')\nax.add_patch(rect16)\n\n# Create a rectangle for Region 17\nrect17 = plt.Rectangle((330, 10), 20, 10, color='lightsalmon')\nax.add_patch(rect17)\n\n# Create a rectangle for Region 18\nrect18 = plt.Rectangle((350, 10), 20, 10, color='lightgrey')\nax.add_patch(rect18)\n\n# Create a rectangle for Region 19\nrect19 = plt.Rectangle((370, 10), 20, 10, color='lightcoral')\nax.add_patch(rect19)\n\n# Create a rectangle for Region 20\nrect20 = plt.Rectangle((390, 10), 20, 10, color='lightyellow')\nax.add_patch(rect20)\n\n# Create a rectangle for Region 21\nrect21 = plt.Rectangle((410, 10), 20, 10, color='lightpink')\nax.add_patch(rect21)\n\n# Create a rectangle for Region 22\nrect22 = plt.Rectangle((430, 10), 20, 10, color='lightbrown')\nax.add_patch(rect22)\n\n# Create a rectangle for Region 23\nrect23 = plt.Rectangle((450, 10), 20, 10, color='lightcyan')\nax.add_patch(rect23)\n\n# Create a rectangle for Region 24\nrect24 = plt.Rectangle((470, 10), 20, 10, color='lightmagenta')\nax.add_patch(rect24)\n\n# Create a rectangle for Region 25\nrect25 = plt.Rectangle((490, 10), 20, 10, color='lightorange')\nax.add_patch(rect25)\n\n# Create a rectangle for Region 26\nrect26 = plt.Rectangle((510, 10), 20, 10, color='lightpurple')\nax.add_patch(rect26)\n\n# Create a rectangle for Region 27\nrect27 = plt.Rectangle((530, 10), 20, 10, color='lightred')\nax.add_patch(rect27)\n\n# Create a rectangle for Region 28\nrect28 = plt.Rectangle((550, 10), 20, 10, color='lightblue')\nax.add_patch(rect28)\n\n# Create a rectangle for Region 29\nrect29 = plt.Rectangle((570, 10), 20, 10, color='lightgreen')\nax.add_patch(rect29)\n\n# Create a rectangle for Region 30\nrect30 = plt.Rectangle((590, 10), 20, 10, color='lightsalmon')\nax.add_patch(rect30)\n\n# Create a rectangle for Region 31\nrect31 = plt.Rectangle((610, 10), 20, 10, color='lightgrey')\nax.add_patch(rect31)\n\n# Create a rectangle for Region 32\nrect32 = plt.Rectangle((630, 10), 20, 10, color='lightcoral')\nax.add_patch(rect32)\n\n# Create a rectangle for Region 33\nrect33 = plt.Rectangle((650, 10), 20, 10, color='lightyellow')\nax.add_patch(rect33)\n\n# Create a rectangle for Region 34\nrect34 = plt.Rectangle((670, 10), 20, 10, color='lightpink')\nax.add_patch(rect34)\n\n# Create a rectangle for Region 35\nrect35 = plt.Rectangle((690, 10), 20, 10, color='lightbrown')\nax.add_patch(rect35)\n\n# Create a rectangle for Region 36\nrect36 = plt.Rectangle((710, 10), 20, 10, color='lightcyan')\nax.add_patch(rect36)\n\n# Create a rectangle for Region 37\nrect37 = plt.Rectangle((730, 10), 20, 10, color='lightmagenta')\nax.add_patch(rect37)\n\n# Create a rectangle for Region 38\nrect38 = plt.Rectangle((750, 10), 20, 10, color='lightorange')\nax.add_patch(rect38)\n\n# Create a rectangle for Region 39\nrect39 = plt.Rectangle((770, 10), 20, 10, color='lightpurple')\nax.add_patch(rect39)\n\n# Create a rectangle for Region 40\nrect40 = plt.Rectangle((790, 10), 20, 10, color='lightred')\nax.add_patch(rect40)\n\n# Create a rectangle for Region 41\nrect41 = plt.Rectangle((810, 10), 20, 10, color='lightblue')\nax.add_patch(rect41)\n\n# Create a rectangle for Region 42\nrect42 = plt.Rectangle((830, 10), 20, 10, color='lightgreen')\nax.add_patch(rect42)\n\n# Create a rectangle for Region 43\nrect43 = plt.Rectangle((850, 10), 20, 10, color='lightsalmon')\nax.add_patch(rect43)\n\n# Create a rectangle for Region 44\nrect44 = plt.Rectangle((870, 10), 20, 10, color='lightgrey')\nax.add_patch(rect44)\n\n# Create a rectangle for Region 45\nrect45 = plt.Rectangle((890, 10), 20, 10, color='lightcoral')\nax.add_patch(rect45)\n\n# Create a rectangle for Region 46\nrect46 = plt.Rectangle((910, 10), 20, 10, color='lightyellow')\nax.add_patch(rect46)\n\n# Create a rectangle for Region 47\nrect47 = plt.Rectangle((930, 10), 20, 10, color='lightpink')\nax.add_patch(rect47)\n\n# Create a rectangle for Region 48\nrect48 = plt.Rectangle((950, 10), 20, 10, color='lightbrown')\nax.add_patch(rect48)\n\n# Create a rectangle for Region 49\nrect49 = plt.Rectangle((970, 10), 20, 10, color='lightcyan')\nax.add_patch(rect49)\n\n# Create a rectangle for Region 50\nrect50 = plt.Rectangle((990, 10), 20, 10, color='lightmagenta')\nax.add_patch(rect50)\n\n# Create a rectangle for Region 51\nrect51 = plt.Rectangle((1010, 10), 20, 10, color='lightorange')\nax.add_patch(rect51)\n\n# Create a rectangle for Region 52\nrect52 = plt.Rectangle((1030, 10), 20, 10, color='lightpurple')\nax.add_patch(rect52)\n\n# Create a rectangle for Region 53\nrect53 = plt.Rectangle((1050, 10), 20, 10, color='lightred')\nax.add_patch(rect53)\n\n# Create a rectangle for Region 54\nrect54 = plt.Rectangle((1070, 10), 20, 10, color='lightblue')\nax.add_patch(rect54)\n\n# Create a rectangle for Region 55\nrect55 = plt.Rectangle((1090, 10), 20, 10, color='lightgreen')\nax.add_patch(rect55)\n\n# Create a rectangle for Region 56\nrect56 = plt.Rectangle((1110, 10), 20, 10, color='lightsalmon')\nax.add_patch(rect56)\n\n# Create a rectangle for Region 57\nrect57 = plt.Rectangle((1130, 10), 20, 10, color='lightgrey')\nax.add_patch(rect57)\n\n# Create a rectangle for Region 58\nrect58 = plt.Rectangle((1150, 10), 20, 10, color='lightcoral')\nax.add_patch(rect58)\n\n# Create a rectangle for Region 59\nrect59 = plt.Rectangle((1170, 10), 20, 10, color='lightyellow')\nax.add_patch(rect59)\n\n# Create a rectangle for Region 60\nrect60 = plt.Rectangle((1190, 10), 20, 10, color='lightpink')\nax.add_patch(rect60)\n\n# Create a rectangle for Region 61\nrect61 = plt.Rectangle((1210, 10), 20, 10, color='lightbrown')\nax.add_patch(rect61)\n\n# Create a rectangle for Region 62\nrect62 = plt.Rectangle((1230, 10), 20, 10, color='lightcyan')\nax.add_patch(rect62)\n\n# Create a rectangle for Region 63\nrect63 = plt.Rectangle((1250, 10), 20, 10, color='lightmagenta')\nax.add_patch(rect63)\n\n# Create a rectangle for Region 64\nrect64 = plt.Rectangle((1270, 10), 20, 10, color='lightorange')\nax.add_patch(rect64)\n\n# Create a rectangle for Region 65\nrect65 = plt.Rectangle((1290, 10), 20, 10, color='lightpurple')\nax.add_patch(rect65)\n\n# Create a rectangle for Region 66\nrect66 = plt.Rectangle((1310, 10), 20, 10, color='lightred')\nax.add_patch(rect66)\n\n# Create a rectangle for Region 67\nrect67 = plt.Rectangle((1330, 10), 20, 10, color='lightblue')\nax.add_patch(rect67)\n\n# Create a rectangle for Region 68\nrect68 = plt.Rectangle((1350, 10), 20, 10, color='lightgreen')\nax.add_patch(rect68)\n\n# Create a rectangle for Region 69\nrect69 = plt.Rectangle((1370, 10), 20, 10, color='lightsalmon')\nax.add_patch(rect69)\n\n# Create a rectangle for Region 70\nrect70 = plt.Rectangle((1390, 10), 20, 10, color='lightgrey')\nax.add_patch(rect70)\n\n# Create a rectangle for Region 71\nrect71 = plt.Rectangle((1410, 10), 20, 10, color='lightcoral')\nax.add_patch(rect71)\n\n# Create a rectangle for Region 72\nrect72 = plt.Rectangle((1430, 10), 20, 10, color='lightyellow')\nax.add_patch(rect72)\n\n# Create a rectangle for Region 73\nrect73 = plt.Rectangle((1450, 10), 20, 10, color='lightpink')\nax.add_patch(rect73)\n\n# Create a rectangle for Region 74\nrect74 = plt.Rectangle((1470, 10), 20, 10, color='lightbrown')\nax.add_patch(rect74)\n\n# Create a rectangle for Region 75\nrect75 = plt.Rectangle((1490, 10), 20, 10, color='lightcyan')\nax.add_patch(rect75)\n\n# Create a rectangle for Region 76\nrect76 = plt.Rectangle((1510, 10), 20, 10, color='lightmagenta')\nax.add_patch(rect76)\n\n# Create a rectangle for Region 77\nrect77 = plt.Rectangle((1530, 10), 20, 10, color='lightorange')\nax.add_patch(rect77)\n\n# Create a rectangle for Region 78\nrect78 = plt.Rectangle((1550, 10), 20, 10, color='lightpurple')\nax.add_patch(rect78)\n\n# Create a rectangle for Region 79\nrect79 = plt.Rectangle((1570, 10), 20, 10, color='lightred')\nax.add_patch(rect79)\n\n# Create a rectangle for Region 80\nrect80 = plt.Rectangle((1590, 10), 20, 10, color='lightblue')\nax.add_patch(rect80)\n\n# Create a rectangle for Region 81\nrect81 = plt.Rectangle((1610, 10), 20, 10, color='lightgreen')\nax.add_patch(rect81)\n\n# Create a rectangle for Region 82\nrect82 = plt.Rectangle((1630, 10), 20, 10, color='lightsalmon')\nax.add_patch(rect82)\n\n# Create a rectangle for Region 83\nrect83 = plt.Rectangle((1650, 10), 20, 10, color='lightgrey')\nax.add_patch(rect83)\n\n# Create a rectangle for Region 84\nrect84 = plt.Rectangle((1670, 10), 20, 10, color='lightcoral')\nax.add_patch(rect84)\n\n# Create a rectangle for Region 85\nrect85 = plt.Rectangle((1690, 10), 20, 10, color='lightyellow')\nax.add_patch(rect85)\n\n# Create a rectangle for Region 86\nrect86 = plt.Rectangle((1710, 10), 20, 10, color='lightpink')\nax.add_patch(rect86)\n\n# Create a rectangle for Region 87\nrect87 = plt.Rectangle((1730, 10), 20, 10, color='lightbrown')\nax.add_patch(rect87)\n\n# Create a rectangle for Region 88\nrect88 = plt.Rectangle((1750, 10), 20, 10, color='lightcyan')\nax.add_patch(rect88)\n\n# Create a rectangle for Region 89\nrect89 = plt.Rectangle((1770, 10), 20, 10, color='lightmagenta')\nax.add_patch(rect89)\n\n# Create a rectangle for Region 90\nrect90"}
{"file": "dataset/ori_500/multidiff_21.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the graph\nyears = ['2019', '2020', '2021', '2022']\ninvestment_growth = [300, 250, 200, 150]\nproduct_types = ['Savings', 'CDs', 'Stocks', 'Bonds', 'ETFs', 'Mutual Funds']\nnumber_of_accounts = [250, 175, 150, 125, 100, 75]\nloan_amount_distribution = [40000, 20000, 10000, 30000, 40000]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Plot the investment growth over time\nax.plot(years, investment_growth, marker='o', color='blue')\nax.set_xlabel('Year')\nax.set_ylabel('Total Investment (%)')\nax.set_title('Investment Growth Over Time')\n\n# Create a bar chart for the number of accounts\nax2 = ax.twinx()\nbars = ax2.bar(product_types, number_of_accounts, color='skyblue')\nax2.set_ylabel('Number of Accounts')\n\n# Add labels to the bars\nfor bar in bars:\n    yval = bar.get_height()\n    ax2.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 2), ha='center', va='bottom')\n\n# Create a bar chart for the loan amount distribution\nax3 = ax.twinx()\nbars = ax3.barh(loan_amount_distribution, product_types, color='orange')\nax3.set_xlabel('Loan Amount ($)')\nax3.set_title('Loan Amount Distribution by Region')\n\n# Add labels to the bars\nfor bar in bars:\n    xval = bar.get_width()\n    ax3.text(xval, bar.get_y() + bar.get_height()/2, round(xval, 2), ha='left', va='center')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_22.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 10))\n\n# Set the title of the plot\nax.set_title('AI Task Success Rates')\n\n# Create a bar chart for each task\nax.bar(['Image Recog.', 'Speech Recog.', 'Language Proc.', 'Game AI'], [85, 75, 90, 80], color='skyblue')\nax.bar(['Image Recog.', 'Speech Recog.', 'Language Proc.', 'Game AI'], [80, 65, 85, 75], color='lightblue')\n\n# Set the y-axis label\nax.set_ylabel('Success Rate (%)')\n\n# Set the x-axis label\nax.set_xlabel('AI Task')\n\n# Set the y-axis limits\nax.set_ylim(0, 100)\n\n# Set the x-axis limits\nax.set_xlim(-1, 4)\n\n# Set the x-axis ticks\nax.set_xticks([0, 1, 2, 3])\n\n# Set the x-axis tick labels\nax.set_xticklabels(['Image Recog.', 'Speech Recog.', 'Language Proc.', 'Game AI'])\n\n# Set the y-axis ticks\nax.set_yticks([0, 20, 40, 60, 80, 100])\n\n# Set the y-axis tick labels\nax.set_yticklabels(['0', '20', '40', '60', '80', '100'])\n\n# Set the grid\nax.grid(True)\n\n# Save the figure\nplt.savefig('ai_task_success_rates.png')\n```"}
{"file": "dataset/ori_500/multidiff_23.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis for the first subplot\nfig, ax = plt.subplots(figsize=(10, 10))\n\n# Set the title of the first subplot\nax.set_title('Traffic Volume by Time of Day')\n\n# Create a bar chart with the data\nax.bar([100, 200, 300, 400, 500], [100, 150, 120, 180, 160], color='orange')\nax.bar([100, 200, 300, 400, 500], [120, 170, 140, 200, 180], color='green')\n\n# Set the x-axis label\nax.set_xlabel('Number of Vehicles')\n\n# Set the y-axis label\nax.set_ylabel('Frequency')\n\n# Create a second subplot\nfig, ax = plt.subplots(figsize=(10, 10))\n\n# Set the title of the second subplot\nax.set_title('Speed Distribution by Location')\n\n# Create a bar chart with the data\nax.bar(['Urban', 'Highway'], [80, 120], color='lightblue')\nax.bar(['Urban', 'Highway'], [100, 140], color='skyblue')\n\n# Set the x-axis label\nax.set_xlabel('Location')\n\n# Set the y-axis label\nax.set_ylabel('Speed (km/h)')\n\n# Create a third subplot\nfig, ax = plt.subplots(figsize=(10, 10))\n\n# Set the title of the third subplot\nax.set_title('Elevation Changes Along a Route')\n\n# Create a line chart with the data\nax.plot([0, 200, 400, 600, 800, 1000], [0, 100, 200, 300, 400, 500], color='purple')\nax.plot([0, 200, 400, 600, 800, 1000], [0, 150, 250, 350, 450, 550], color='lightblue')\n\n# Set the x-axis label\nax.set_xlabel('Distance (km)')\n\n# Set the y-axis label\nax.set_ylabel('Elevation (m)')\n```"}
{"file": "dataset/ori_500/multidiff_24.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data for the pie chart\narts = ['Literature', 'Performing Arts', 'Visual Arts', 'Dance']\nvalues = [10, 30, 25, 15]\ncolors = ['#FF9999','#66b3ff','#99ff99','#ffcc99']\n\n# Create a figure and axis for the pie chart\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Plot the pie chart\nwedges, texts, autotexts = ax.pie(values, labels=arts, colors=colors, autopct='%1.1f%%', startangle=90)\n\n# Set the title of the pie chart\nax.set_title('Distribution of Arts Education Programs')\n\n# Create a second subplot for the radar chart\nax2 = fig.add_subplot(122, polar=True)\nax2.set_theta_zero_location(\"N\")\nax2.set_theta_direction(-1)\n\n# Define the data for the radar chart\ncategories = ['Expression', 'Creativity', 'Collaboration', 'Dedication', 'Technique']\nN = len(categories)\nvalues = [0.4, 0.2, 0.6, 0.8, 0.2]\nvalues += values[:1]  # repeat the first value to close the circle\n\nangles = np.linspace(0, 2 * np.pi, N, endpoint=False).tolist()\nangles += angles[:1]  # repeat the first value to close the circle\n\n# Plot the radar chart\nax2.plot(angles, values, linewidth=1, linestyle='solid')\nax2.fill(angles, values, 'b', alpha=0.1)\n\n# Set the title of the radar chart\nax2.set_title('Student Performance in Arts Education')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_25.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Set the background color of the plot\nax.set_facecolor('lightblue')\n\n# Create a bar chart\nbar_width = 0.2\nindex = np.arange(5)\nsales_probabilities = [0.0, 0.1, 0.2, 0.3, 0.4, 0.5]\nsales = [25000, 20000, 15000, 10000, 5000, 0]\n\n# Plot the bars\nbars = ax.bar(index, sales, bar_width, label='Sales')\n\n# Add labels and title\nax.set_xlabel('Sale Probability')\nax.set_ylabel('Number of Sales')\nax.set_title('Sales by Probability')\nax.set_xticks(index + bar_width / 2)\nax.set_xticklabels(sales_probabilities)\nax.legend()\n\n# Create a colored rectangle\nrect = plt.Rectangle((0.5, 0.5), 0.2, 0.2, color='green', alpha=0.5)\nax.add_patch(rect)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Set the background color of the plot\nax.set_facecolor('lightblue')\n\n# Draw a rectangle for the histogram\nax.add_patch(plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='green'))\n\n# Draw a rectangle for the pie chart\nax.add_patch(plt.Rectangle((0.2, 0.7), 0.6, 0.2, color='red'))\n\n# Draw a rectangle for the scatter plot\nax.add_patch(plt.Rectangle((0.8, 0.2), 0.2, 0.6, color='yellow'))\n\n# Draw a rectangle for the line plot\nax.add_patch(plt.Rectangle((0.8, 0.8), 0.2, 0.2, color='blue'))\n\n# Add text annotations\nax.text(0.1, 0.9, 'Histogram of Stock Returns', fontsize=14, fontweight='bold')\nax.text(0.1, 0.8, 'Gains', color='green')\nax.text(0.1, 0.7, 'Losses', color='red')\nax.text(0.9, 0.9, 'Investment Clusters', fontsize=14, fontweight='bold')\nax.text(0.9, 0.8, 'Tech Stocks', color='yellow')\nax.text(0.9, 0.7, 'Energy Stocks', color='blue')\n\n# Set the x-axis and y-axis limits\nax.set_xlim(-0.6, 1.6)\nax.set_ylim(-0.1, 1.1)\n\n# Set the x-axis and y-axis labels\nax.set_xlabel('Returns')\nax.set_ylabel('Frequency')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis for the first plot\nfig, ax = plt.subplots(figsize=(8, 6))\nax.plot([0, 1, 2, 3, 4], [10, 8, 6, 4, 2], 'bo-')\nax.set_xlabel('Relative Year')\nax.set_ylabel('Energy Consumption (GWh)')\nax.set_title('Energy Consumption Over Time')\n\n# Create a figure and axis for the second plot\nfig, ax = plt.subplots(figsize=(8, 6), subplot_kw={'projection': '3d'})\nx = np.linspace(-4, 4, 100)\ny = np.linspace(-4, 4, 100)\nx, y = np.meshgrid(x, y)\nz = np.sin(np.sqrt(x**2 + y**2))\nax.plot_surface(x, y, z, cmap='Blues')\nax.set_xlabel('Relative Year')\nax.set_ylabel('Relative Month')\nax.set_zlabel('Renewable Energy Ratio (%)')\nax.set_title('Renewable Energy Ratio Over Time')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis for the pie chart\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Define the data for the pie chart\nlabels = ['Ancient Scripts', 'Modern Records', 'Medieval Texts', 'Renaissance Literature']\nsizes = [35, 15, 20, 30]\ncolors = ['#ff9999','#66b3ff','#99ff99','#ffcc99']\n\n# Create a pie chart\nwedges, texts, autotexts = ax.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%', startangle=90)\n\n# Set the title of the pie chart\nax.set_title('Historical Document Types in Library')\n\n# Create a scatter plot\nfig, ax = plt.subplots(figsize=(10, 5))\nx = np.array([1400, 1600, 1800, 2000])\ny = np.array([350, 300, 250, 200])\ncolors = ['purple', 'purple', 'purple', 'purple']\nax.scatter(x, y, color=colors)\nax.set_xlabel('Year')\nax.set_ylabel('Number of Documents')\nax.set_title('Document Count Over Historical Periods')\nax.grid(True)\n\n# Display the plots\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the scatter plot\nx = [2000, 2000, 2000, 2000, 2000]\ny = [9.25, 9.0, 8.75, 8.5, 8.25]\n\n# Data for the bar chart\nbrands = ['Gucci', 'Prada', 'Louis Vuitton', 'Chanel', 'Dior']\npopularity = [9.25, 8.75, 8.5, 8.25, 8.0]\nsatisfaction = [10, 9, 8, 7, 6]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Scatter plot\nax.scatter(x, y, color='blue')\nax.set_xlabel('Average Price ($)')\nax.set_ylabel('Popularity Index')\n\n# Bar chart\nax.bar(brands, popularity, color='blue')\nax.set_title('Luxury Brand Popularity vs Price')\n\n# Second subplot\nax2 = fig.add_subplot(1, 2, 2)\nax2.bar(brands, satisfaction, color='blue')\nax2.set_title('Customer Satisfaction Distribution Across Brands')\nax2.set_xlabel('Brands')\nax2.set_ylabel('Satisfaction')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\nfig, ax = plt.subplots(2, 3, figsize=(10.0, 7.0))\n\n# Accuracy\nax[0, 0].barh(['Zhang2020', 'Addelpalli2021', 'Rice2020', 'Rade2021', 'Engstrom2019', 'Hendrycks2019'], [75.32, 77.11, 77.03, 76.86, 75.34, 74.52], color='green')\nax[0, 0].set_title('Accuracy (%)')\nax[0, 0].set_xlim([0, 100])\n\n# Robustness\nax[0, 1].barh(['Zhang2020', 'Addelpalli2021', 'Rice2020', 'Rade2021', 'Engstrom2019', 'Hendrycks2019'], [60.5, 59.1, 58.35, 59.1, 60.35, 55.5], color='red')\nax[0, 1].set_title('Robustness (%)')\nax[0, 1].set_xlim([0, 100])\n\n# Accuracy Diff\nax[0, 2].barh(['Zhang2020', 'Addelpalli2021', 'Rice2020', 'Rade2021', 'Engstrom2019', 'Hendrycks2019'], [-0.02, -0.08, -0.17, -0.25, -0.23, -0.02], color='blue')\nax[0, 2].set_title('Accuracy Diff. (%)')\nax[0, 2].set_xlim([-1, 0])\n\n# NFR\nax[1, 0].barh(['Zhang2020', 'Addelpalli2021', 'Rice2020', 'Rade2021', 'Engstrom2019', 'Hendrycks2019'], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0], color='pink')\nax[1, 0].set_title('NFR (%)')\nax[1, 0].set_xlim([0, 1])\n\n# Robust NFR\nax[1, 1].barh(['Zhang2020', 'Addelpalli2021', 'Rice2020', 'Rade2021', 'Engstrom2019', 'Hendrycks2019'], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0], color='purple')\nax[1, 1].set_title('Robust NFR (%)')\nax[1, 1].set_xlim([0, 1])\n\n# Accuracy Diff\nax[1, 2].barh(['Zhang2020', 'Addelpalli2021', 'Rice2020', 'Rade2021', 'Engstrom2019', 'Hendrycks2019'], [-0.02, -0.08, -0.17, -0.25, -0.23, -0.02], color='orange')\nax[1, 2].set_title('Robust Accuracy Diff. (%)')\nax[1, 2].set_xlim([-1, 0])\n\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nbrands = ['Full Context', 'Partial Context', 'No Context', 'HCube', 'Sobol', 'Random']\nvariances = [0.6, 0.5, 0.4, 0.3, 0.2, 0.1]\nregrets = [0.8, 0.7, 0.6, 0.5, 0.4, 0.3]\n\n# Create a figure and axis\nfig, ax1 = plt.subplots(figsize=(7.0, 9.0))\n\n# Plot variance data\ncolor = 'tab:blue'\nax1.set_xlabel('Trials')\nax1.set_ylabel('Generalized Variance', color=color)\nax1.plot(variances, color=color)\nax1.tick_params(axis='y', labelcolor=color)\n\n# Create a second y-axis for regret data\nax2 = ax1.twinx()  \ncolor = 'tab:red'\nax2.set_ylabel('Average Regret', color=color)  \nax2.plot(regrets, color=color)\nax2.tick_params(axis='y', labelcolor=color)\n\n# Set the title of the plot\nfig.tight_layout()\nplt.title('Generalized Variance vs Average Regret')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 4))\n\n# Set the title of the plot\nax.set_title('Debaters')\n\n# Create a bar chart\nbar_width = 0.35\nindex = np.arange(len(['GPT-3.5-Turbo', 'Claude 1.3', 'Claude 2.1', 'GPT-4-Turbo']))\nbar1 = ax.bar(index, [100, 150, 200, 250], bar_width, label='GPT-3.5-Turbo')\nbar2 = ax.bar(index + bar_width, [120, 170, 220, 270], bar_width, label='Claude 1.3')\nbar3 = ax.bar(index + 2 * bar_width, [140, 190, 240, 290], bar_width, label='Claude 2.1')\nbar4 = ax.bar(index + 3 * bar_width, [160, 210, 260, 310], bar_width, label='GPT-4-Turbo')\n\n# Add some text for labels, title, and custom x-axis tick labels, etc.\nax.set_xlabel('Debater')\nax.set_ylabel('Rating')\nax.set_xticks(index + bar_width)\nax.set_xticklabels(['GPT-3.5-Turbo', 'Claude 1.3', 'Claude 2.1', 'GPT-4-Turbo'])\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the pie chart\nsizes = [4.6, 10.6, 11.3, 13.2, 29.8]\nlabels = ['Gray', 'Purple', 'Yellow', 'Light Blue', 'Cyan']\ncolors = ['#808080', '#800080', '#FFFF00', '#ADD8E6', '#00FFFF']\n\n# Create a pie chart\nfig, ax = plt.subplots(figsize=(5.0, 5.0))\nwedges, texts, autotexts = ax.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%', startangle=140)\n\n# Set the aspect ratio of the plot to be equal so that pie is drawn as a circle.\nax.axis('equal')  \n\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Draw a circle\ncircle = plt.Circle((0.5, 0.5), 0.4, color='blue')\nax.add_artist(circle)\n\n# Draw rectangles\nrect1 = plt.Rectangle((0.2, 0.2), 0.1, 0.1, color='orange')\nrect2 = plt.Rectangle((0.3, 0.2), 0.1, 0.1, color='green')\nrect3 = plt.Rectangle((0.4, 0.2), 0.1, 0.1, color='red')\nrect4 = plt.Rectangle((0.5, 0.2), 0.1, 0.1, color='purple')\nrect5 = plt.Rectangle((0.6, 0.2), 0.1, 0.1, color='pink')\n\n# Add rectangles to the plot\nax.add_patch(rect1)\nax.add_patch(rect2)\nax.add_patch(rect3)\nax.add_patch(rect4)\nax.add_patch(rect5)\n\n# Set the title of the plot\nax.set_title('Matplotlib bakery: A donut')\n\n# Set the x and y limits\nax.set_xlim(0, 1)\nax.set_ylim(0, 1)\n\n# Remove the axes\nax.axis('off')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the pie chart\nlabels = ['Transport', 'Utilities', 'Food', 'Others', 'Entertainment']\nsizes = [37.5, 16.7, 29.2, 10.0, 10.0]\ncolors = ['#007FFF', '#00BFFF', '#FFD700', '#FFA500', '#FF4500']\nexplode = (0.1, 0, 0, 0, 0)  # explode 1st slice\n\n# Create a pie chart\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\nwedges, texts, autotexts = ax.pie(sizes, explode=explode, labels=labels, colors=colors,\n                                 autopct='%1.1f%%', startangle=140)\n\n# Add a title\nax.set_title('Expenses - Company vs. Project')\n\n# Equal aspect ratio ensures that pie is drawn as a circle.\nax.axis('equal')  \n\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for LoRA\nlora_data = [31.4, 15.7, 19.9, 33.0]\nlora_labels = ['Unused', 'Model', 'Optimizer', 'Gradient']\nlora_colors = ['orange', 'blue', 'green', 'yellow']\n\n# Data for QLoRA\nqlora_data = [54.8, 10.5, 6.3, 28.4]\nqlora_labels = ['Unused', 'Optimizer', 'Model', 'Gradient']\nqlora_colors = ['orange', 'blue', 'red', 'green']\n\nfig, axs = plt.subplots(1, 2, figsize=(10, 4))\n\n# Plotting LoRA\naxs[0].pie(lora_data, labels=lora_labels, colors=lora_colors, autopct='%1.1f%%', startangle=90)\naxs[0].set_title('LoRA')\n\n# Plotting QLoRA\naxs[1].pie(qlora_data, labels=qlora_labels, colors=qlora_colors, autopct='%1.1f%%', startangle=90)\naxs[1].set_title('QLoRA')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the first chart\ndata1 = [25.1, 26.4]\ncolors1 = ['yellow', 'green']\nlabels1 = ['Model', 'Optimizer']\n\n# Define the data for the second chart\ndata2 = [46.2, 4.6, 5.3, 23.9]\ncolors2 = ['yellow', 'orange', 'gray', 'green']\nlabels2 = ['Model', 'Gradient+Activations+Other', 'Optimizer', 'Unused']\n\n# Create the first chart\nfig, ax1 = plt.subplots(figsize=(5.0, 8.0))\nax1.pie(data1, colors=colors1, labels=labels1, startangle=90)\nax1.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\n\n# Create the second chart\nfig, ax2 = plt.subplots(figsize=(5.0, 8.0))\nax2.pie(data2, colors=colors2, labels=labels2, startangle=90)\nax2.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\n\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the pie chart\nlabels = ['Fruits', 'Proteins', 'Grains', 'Vegetables']\nsizes = [25, 35, 10, 20]\ncolors = ['#FF9999','#66b3ff','#99ff99','#ffcc99']\nexplode = (0.1, 0, 0, 0)  # explode 1st slice\n\n# Plot\nplt.figure(figsize=(6.0, 6.0))\nplt.pie(sizes, explode=explode, labels=labels, colors=colors,\nautopct='%1.1f%%', shadow=True, startangle=140)\n\nplt.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\n\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nlabels = ['Education', 'Entertainment', 'Technology']\nsizes = [18.8, 21.4, 37.5]\ncolors = ['skyblue', 'lightgreen', 'yellowgreen']\nexplode = (0.1, 0, 0)  # explode 1st slice\n\n# Create a pie chart\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\nax.pie(sizes, explode=explode, labels=labels, colors=colors,\nautopct='%1.1f%%', shadow=True, startangle=140)\n\n# Equal aspect ratio ensures that pie is drawn as a circle.\nax.axis('equal')  \n\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the pie chart\nsizes = [20, 10, 30, 40]\nlabels = ['Dogs', 'Logs', 'Frogs', 'Hogs']\ncolors = ['#FF6384', '#4682B4', '#90EE90', '#ADD8E6']\n\n# Create a pie chart\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\nwedges, texts, autotexts = ax.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%', startangle=90)\n\n# Set the title of the pie chart\nax.set_title('Pie Chart')\n\n# Display the pie chart\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nlabels = ['David', 'John', 'Marry', 'Peter']\nsizes = [40, 29, 11, 20]\ncolors = ['blue', 'orange', 'green', 'red']\n\n# Create a pie chart\nfig, ax = plt.subplots(figsize=(5.0, 5.0))\nwedges, texts, autotexts = ax.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%', startangle=140)\n\n# Set the aspect ratio of the pie chart to be equal so that pie is drawn as a circle.\nax.axis('equal')  \n\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the pie chart\nlabels = ['France', 'Germany', 'Italy']\nsizes = [18, 12, 28]\ncolors = ['orange', 'blue', 'red']\n\n# Create a pie chart\nfig, ax = plt.subplots(figsize=(5.0, 5.0))\nax.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%', startangle=90)\n\n# Set the title of the chart\nax.set_title('Countries in Europe')\n\n# Display the chart\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the pie chart\nsizes = [26.2, 13.3, 14.3, 21.4, 19.0]\ncolors = ['red', 'pink', 'orange', 'brown', 'yellow']\nlabels = ['Slice 1', 'Slice 2', 'Slice 3', 'Slice 4', 'Slice 5']\n\n# Create a pie chart\nfig, ax = plt.subplots(figsize=(5.0, 5.0))\nax.pie(sizes, colors=colors, labels=labels, autopct='%1.1f%%', startangle=140)\n\n# Set the title of the pie chart\nax.set_title('Slice of a pie chart')\n\n# Display the pie chart\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the pie chart\nlabels = ['Psychological', 'Others', 'Market', 'Satisfactory', 'Social']\nsizes = [12.4, 35.4, 17.2, 24.7, 10.3]\ncolors = ['blue', 'green', 'lightblue', 'orange', 'pink']\n\n# Create a pie chart\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\nax.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%', startangle=90)\n\n# Set the title of the pie chart\nax.set_title('Pie Chart')\n\n# Display the pie chart\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nlabels = ['Youtube', 'Facebook', 'Instagram', 'Twitter', 'LinkedIn']\nsizes = [25, 10, 10, 10, 35]\ncolors = ['lightblue', 'skyblue', 'lightskyblue', 'darkblue', 'navy']\n\n# Create a pie chart\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\nwedges, texts, autotexts = ax.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%', startangle=90)\n\n# Set the title\nax.set_title('Social Media Usage')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the pie chart\nlabels = ['COLING', 'EACL', 'NAACL', 'EMNLP']\nsizes = [25.4, 7.4, 20.3, 12.2]\ncolors = ['#87CEEB', '#FFD700', '#90EE90', '#800080']\n\n# Create a pie chart\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\nax.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%', startangle=140)\nax.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\n\n# Add a title\nax.set_title('NLP Conference Influence')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for each energy source\nenergy_sources = ['Coal', 'Hydro', 'Wind', 'Solar']\nconsumption_percentages = [25.0, 15.0, 12.5, 20.0]\ncolors = ['red', 'blue', 'green', 'yellow']\n\n# Create a pie chart for energy consumption\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\nax.pie(consumption_percentages, labels=energy_sources, colors=colors, autopct='%1.1f%%', startangle=90)\nax.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/quiver_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 4))\n\n# Set the title of the plot\nax.set_title('Language Sentiment Analysis')\n\n# Set the x-axis label\nax.set_xlabel('Sentiment Score')\n\n# Set the y-axis label\nax.set_ylabel('Languages')\n\n# Define the languages and their corresponding sentiment scores\nlanguages = ['English', 'French', 'German']\nsentiment_scores = [-4.00, -3.22, -2.44]\n\n# Plot the sentiment scores for each language\nfor i, score in enumerate(sentiment_scores):\n    ax.plot([score, score], [i, i+1], color='red')\n    ax.text(score, i+0.5, str(score), ha='right', va='center')\n\n# Add a legend to the plot\nax.legend(['Out-group bias (Collectivism)', 'In-group bias (Individualism)'])\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/quiver_2.pdf", "response": "import matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(5.0, 4.0))\n\n# Set the title of the plot\nax.set_title('Language Sentiment Analysis')\n\n# Set the x-axis label\nax.set_xlabel('Sentiment Score')\n\n# Set the y-axis label\nax.set_ylabel('Languages')\n\n# Set the x-axis limits\nax.set_xlim(0, 10)\n\n# Set the y-axis limits\nax.set_ylim(0, 10)\n\n# Set the x-axis ticks\nax.set_xticks([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n\n# Set the y-axis ticks\nax.set_yticks([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n\n# Set the x-axis tick labels\nax.set_xticklabels(['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10'])\n\n# Set the y-axis tick labels\nax.set_yticklabels(['English', 'French', 'German'])\n\n# Set the x-axis grid lines\nax.grid(axis='x')\n\n# Set the y-axis grid lines\nax.grid(axis='y')\n\n# Set the x-axis grid line color\nax.grid(axis='x', color='gray')\n\n# Set the y-axis grid line color\nax.grid(axis='y', color='gray')\n\n# Set the x-axis grid line style\nax.grid(axis='x', linestyle='--')\n\n# Set the y-axis grid line style\nax.grid(axis='y', linestyle='--')\n\n# Set the x-axis grid line width\nax.grid(axis='x', linewidth=0.5)\n\n# Set the y-axis grid line width\nax.grid(axis='y', linewidth=0.5)\n\n# Set the x-axis grid line alpha\nax.grid(axis='x', alpha=0.5)\n\n# Set the y-axis grid line alpha\nax.grid(axis='y', alpha=0.5)\n\n# Set the x-axis grid line zorder\nax.grid(axis='x', zorder=1)\n\n# Set the y-axis grid line zorder\nax.grid(axis='y', zorder=1)\n\n# Set the x-axis grid line visible\nax.grid(axis='x', visible=True)\n\n# Set the y-axis grid line visible\nax.grid(axis='y', visible=True)\n\n# Set the x-axis grid line which\nax.grid(axis='x', which='major')\n\n# Set the y-axis grid line which\nax.grid(axis='y', which='major')\n\n# Set the x-axis grid line axis\nax.grid(axis='x', axis='both')\n\n# Set the y-axis grid line axis\nax.grid(axis='y', axis='both')\n\n# Set the x-axis grid line interval\nax.grid(axis='x', interval=1)\n\n# Set the y-axis grid line interval\nax.grid(axis='y', interval=1)\n\n# Set the x-axis grid line color\nax.grid(axis='x', color='gray')\n\n# Set the y-axis grid line color\nax.grid(axis='y', color='gray')\n\n# Set the x-axis grid line linestyle\nax.grid(axis='x', linestyle='--')\n\n# Set the y-axis grid line linestyle\nax.grid(axis='y', linestyle='--')\n\n# Set the x-axis grid line linewidth\nax.grid(axis='x', linewidth=0.5)\n\n# Set the y-axis grid line linewidth\nax.grid(axis='y', linewidth=0.5)\n\n# Set the x-axis grid line alpha\nax.grid(axis='x', alpha=0.5)\n\n# Set the y-axis grid line alpha\nax.grid(axis='y', alpha=0.5)\n\n# Set the x-axis grid line zorder\nax.grid(axis='x', zorder=1)\n\n# Set the y-axis grid line zorder\nax.grid(axis='y', zorder=1)\n\n# Set the x-axis grid line visible\nax.grid(axis='x', visible=True)\n\n# Set the y-axis grid line visible\nax.grid(axis='y', visible=True)\n\n# Set the x-axis grid line which\nax.grid(axis='x', which='major')\n\n# Set the y-axis grid line which\nax.grid(axis='y', which='major')\n\n# Set the x-axis grid line axis\nax.grid(axis='x', axis='both')\n\n# Set the y-axis grid line axis\nax.grid(axis='y', axis='both')\n\n# Set the x-axis grid line interval\nax.grid(axis='x', interval=1)\n\n# Set the y-axis grid line interval\nax.grid(axis='y', interval=1)\n\n# Set the x-axis grid line color\nax.grid(axis='x', color='gray')\n\n# Set the y-axis grid line color\nax.grid(axis='y', color='gray')\n\n# Set the x-axis grid line linestyle\nax.grid(axis='x', linestyle='--')\n\n# Set the y-axis grid line linestyle\nax.grid(axis='y', linestyle='--')\n\n# Set the x-axis grid line linewidth\nax.grid(axis='x', linewidth=0.5)\n\n# Set the y-axis grid line linewidth\nax.grid(axis='y', linewidth=0.5)\n\n# Set the x-axis grid line alpha\nax.grid(axis='x', alpha=0.5)\n\n# Set the y-axis grid line alpha\nax.grid(axis='y', alpha=0.5)\n\n# Set the x-axis grid line zorder\nax.grid(axis='x', zorder=1)\n\n# Set the y-axis grid line zorder\nax.grid(axis='y', zorder=1)\n\n# Set the x-axis grid line visible\nax.grid(axis='x', visible=True)\n\n# Set the y-axis grid line visible\nax.grid(axis='y', visible=True)\n\n# Set the x-axis grid line which\nax.grid(axis='x', which='major')\n\n# Set the y-axis grid line which\nax.grid(axis='y', which='major')\n\n# Set the x-axis grid line axis\nax.grid(axis='x', axis='both')\n\n# Set the y-axis grid line axis\nax.grid(axis='y', axis='both')\n\n# Set the x-axis grid line interval\nax.grid(axis='x', interval=1)\n\n# Set the y-axis grid line interval\nax.grid(axis='y', interval=1)\n\n# Set the x-axis grid line color\nax.grid(axis='x', color='gray')\n\n# Set the y-axis grid line color\nax.grid(axis='y', color='gray')\n\n# Set the x-axis grid line linestyle\nax.grid(axis='x', linestyle='--')\n\n# Set the y-axis grid line linestyle\nax.grid(axis='y', linestyle='--')\n\n# Set the x-axis grid line linewidth\nax.grid(axis='x', linewidth=0.5)\n\n# Set the y-axis grid line linewidth\nax.grid(axis='y', linewidth=0.5)\n\n# Set the x-axis grid line alpha\nax.grid(axis='x', alpha=0.5)\n\n# Set the y-axis grid line alpha\nax.grid(axis='y', alpha=0.5)\n\n# Set the x-axis grid line zorder\nax.grid(axis='x', zorder=1)\n\n# Set the y-axis grid line zorder\nax.grid(axis='y', zorder=1)\n\n# Set the x-axis grid line visible\nax.grid(axis='x', visible=True)\n\n# Set the y-axis grid line visible\nax.grid(axis='y', visible=True)\n\n# Set the x-axis grid line which\nax.grid(axis='x', which='major')\n\n# Set the y-axis grid line which\nax.grid(axis='y', which='major')\n\n# Set the x-axis grid line axis\nax.grid(axis='x', axis='both')\n\n# Set the y-axis grid line axis\nax.grid(axis='y', axis='both')\n\n# Set the x-axis grid line interval\nax.grid(axis='x', interval=1)\n\n# Set the y-axis grid line interval\nax.grid(axis='y', interval=1)\n\n# Set the x-axis grid line color\nax.grid(axis='x', color='gray')\n\n# Set the y-axis grid line color\nax.grid(axis='y', color='gray')\n\n# Set the x-axis grid line linestyle\nax.grid(axis='x', linestyle='--')\n\n# Set the y-axis grid line linestyle\nax.grid(axis='y', linestyle='--')\n\n# Set the x-axis grid line linewidth\nax.grid(axis='x', linewidth=0.5)\n\n# Set the y-axis grid line linewidth\nax.grid(axis='y', linewidth=0.5)\n\n# Set the x-axis grid line alpha\nax.grid(axis='x', alpha=0.5)\n\n# Set the y-axis grid line alpha\nax.grid(axis='y', alpha=0.5)\n\n# Set the x-axis grid line zorder\nax.grid(axis='x', zorder=1)\n\n# Set the y-axis grid line zorder\nax.grid(axis='y', zorder=1)\n\n# Set the x-axis grid line visible\nax.grid(axis='x', visible=True)\n\n# Set the y-axis grid line visible\nax.grid(axis='y', visible=True)\n\n# Set the x-axis grid line which\nax.grid(axis='x', which='major')\n\n# Set the y-axis grid line which\nax.grid(axis='y', which='major')\n\n# Set the x-axis grid line axis\nax.grid(axis='x', axis='both')\n\n# Set the y-axis grid line axis\nax.grid(axis='y', axis='both')\n\n# Set the x-axis grid line interval\nax.grid(axis='x', interval=1)\n\n# Set the y-axis grid line interval\nax.grid(axis='y', interval=1)\n\n# Set the x-axis grid line color\nax.grid(axis='x', color='gray')\n\n# Set the y-axis grid line color\nax.grid(axis='y', color='gray')\n\n# Set the x-axis grid line linestyle\nax.grid(axis='x', linestyle='--')\n\n# Set the y-axis grid line linestyle\nax.grid(axis='y', linestyle='--')\n\n# Set the x-axis grid line linewidth\nax.grid(axis='x', linewidth=0.5)\n\n# Set the y-axis grid line linewidth\nax.grid(axis='y', linewidth=0.5)\n\n# Set the x-axis grid line alpha\nax.grid(axis='x', alpha=0.5)\n\n# Set the y-axis grid line alpha\nax.grid(axis='y', alpha=0.5)\n\n# Set the x-axis grid line zorder\nax.grid(axis='x', zorder=1)\n\n# Set the y-axis grid line zorder\nax.grid(axis='y', zorder=1)\n\n# Set the x-axis grid line visible\nax.grid(axis='x', visible=True)\n\n# Set the y-axis grid line visible\nax.grid(axis='y', visible=True)\n\n# Set the x-axis grid line which\nax.grid(axis='x', which='major')\n\n# Set the y-axis grid line which\nax.grid(axis='y', which='major')\n\n# Set the x-axis grid line axis\nax.grid(axis='x', axis='both')\n\n# Set the y-axis grid line axis\nax.grid(axis='y', axis='both')\n\n# Set the x-axis grid line interval\nax.grid(axis='x', interval=1)\n\n# Set the y-axis grid line interval\nax.grid(axis='y', interval=1)\n\n# Set the x-axis grid line color\nax.grid(axis='x', color='gray')\n\n# Set the y-axis grid line color\nax.grid(axis='y', color='gray')\n\n# Set the x-axis grid line linestyle\nax.grid(axis='x', linestyle='--')\n\n# Set the y-axis grid line linestyle\nax.grid(axis='y', linestyle='--')\n\n# Set the x-axis grid line linewidth\nax.grid(axis='x', linewidth=0.5)\n\n# Set the y-axis grid line linewidth\nax.grid(axis='y', linewidth=0.5)\n\n# Set the x-axis grid line alpha\nax.grid(axis='x', alpha=0.5)\n\n# Set the y-axis grid line alpha\nax.grid(axis='y', alpha=0.5)\n\n# Set the x-axis grid line zorder\nax.grid(axis='x', zorder=1)\n\n# Set the y-axis grid line zorder\nax.grid(axis='y', zorder=1)\n\n# Set the x-axis grid line visible\nax.grid(axis='x', visible=True)\n\n# Set the y-axis grid line visible\nax.grid(axis='y', visible=True)\n\n# Set the x-axis grid line which\nax.grid(axis='x', which='major')\n\n# Set the y-axis grid line which\nax.grid(axis='y', which='major')\n\n# Set the x-axis grid line axis\nax.grid(axis='x', axis='both')\n\n# Set the y-axis grid line axis\nax.grid(axis='y', axis='both')\n\n# Set the x-axis grid line interval\nax.grid(axis='x', interval=1)\n\n# Set the y-axis grid line interval\nax.grid(axis='y', interval=1)\n\n# Set the x-axis grid line color\nax.grid(axis='x', color='gray')\n\n# Set the y-axis grid line color\nax.grid(axis='y', color='gray')\n\n# Set the x-axis grid line linestyle\nax.grid(axis='x', linestyle='--')\n\n# Set the y-axis grid line linestyle\nax.grid(axis='y', linestyle='--')\n\n# Set the x-axis grid line linewidth\nax.grid(axis='x', linewidth=0.5)\n\n# Set the y-axis grid line linewidth\nax.grid(axis='y', linewidth=0.5)\n\n# Set the x-axis grid line alpha\nax.grid(axis='x', alpha=0.5)\n\n# Set the y-axis grid line alpha\nax.grid(axis='y', alpha=0.5)\n\n# Set the x-axis grid line zorder\nax.grid(axis='x', zorder=1)\n\n# Set the y-axis grid line zorder\nax.grid(axis='y', zorder=1)\n\n# Set the x-axis grid line visible\nax.grid(axis='x', visible=True)\n\n# Set the y-axis grid line visible\nax.grid(axis='y', visible=True)\n\n# Set the x-axis grid line which\nax.grid(axis='x', which='major')\n\n# Set the y-axis grid line which\nax.grid(axis='y', which='major')\n\n# Set the x-axis grid line axis\nax.grid(axis='x', axis='both')\n\n# Set the y-axis grid line axis\nax.grid(axis='y', axis='both')\n\n# Set the x-axis grid line interval\nax.grid(axis='x', interval=1)\n\n# Set the y-axis grid line interval\nax.grid(axis='y', interval=1)\n\n# Set the x-axis grid line color\nax.grid(axis='x', color='gray')\n\n# Set the y-axis grid line color\nax.grid(axis='y', color='gray')\n\n# Set the x-axis grid line linestyle\nax.grid(axis='x', linestyle='--')\n\n# Set the y-axis grid line linestyle\nax.grid(axis='y', linestyle='--')\n\n# Set the x-axis grid line linewidth\nax.grid(axis='x', linewidth=0.5)\n\n# Set the y-axis grid line linewidth\nax.grid(axis='y', linewidth=0.5)\n\n# Set the x-axis grid line alpha\nax.grid(axis='x', alpha=0.5)\n\n# Set the y-axis grid line alpha\nax.grid(axis='y', alpha=0.5)\n\n# Set the x-axis grid line zorder\nax.grid(axis='x', zorder=1)\n\n# Set the y-axis grid line zorder\nax.grid(axis='y', zorder=1)\n\n# Set the x-axis grid line visible\nax.grid(axis='x', visible=True)\n\n# Set the y-axis grid line visible\nax.grid(axis='y', visible=True)\n\n# Set the x-axis grid line which\nax.grid(axis='x', which='major')\n\n# Set the y-axis grid line which\nax.grid(axis='y', which='major')\n\n# Set the x-axis grid line axis\nax.grid(axis='x', axis='both')\n\n# Set the y-axis grid line axis\nax.grid(axis='y', axis='both')\n\n# Set the x-axis grid line interval\nax.grid(axis='x', interval=1)\n\n# Set the y-axis grid line interval\nax.grid(axis='y', interval=1)\n\n# Set the x-axis grid line color\nax.grid(axis='x', color='gray')\n\n# Set the y-axis grid line color\nax.grid(axis='y', color='gray')\n\n# Set the x-axis grid line linestyle\nax.grid(axis='x', linestyle='--')\n\n# Set the y-axis grid line linestyle\nax.grid(axis='y', linestyle='--')\n\n# Set the x-axis grid line linewidth\nax.grid(axis='x', linewidth=0.5)\n\n# Set the y-axis grid line linewidth\nax.grid(axis='y', linewidth=0.5)\n\n# Set the x-axis grid line alpha\nax.grid(axis='x', alpha=0.5)\n\n# Set the y-axis grid line alpha\nax.grid(axis='y', alpha=0.5)\n\n# Set the x-axis grid line zorder\nax.grid(axis='x', zorder=1)\n\n# Set the y-axis grid line zorder\nax.grid(axis='y', zorder=1)\n\n# Set the x-axis grid line visible\nax.grid(axis='x', visible=True)\n\n# Set the y-axis grid line visible\nax.grid(axis='y', visible=True)\n\n# Set the x-axis grid line which\nax.grid(axis='x', which='major')\n\n# Set the y-axis grid line which\nax.grid(axis='y', which='major')\n\n# Set the x-axis grid line axis\nax.grid(axis='x', axis='both')\n\n# Set the y-axis grid line axis\nax.grid(axis='y', axis='both')\n\n# Set the x-axis grid line interval\nax.grid(axis='x', interval=1)\n\n# Set the y-axis grid line interval\nax.grid(axis='y', interval=1)\n\n# Set the x-axis grid line color\nax.grid(axis='x', color='gray')\n\n# Set the y-axis grid line color\nax.grid(axis='y', color='gray')\n\n# Set the x-axis grid line linestyle\nax.grid(axis='x', linestyle='--')\n\n# Set the y-axis grid line linestyle\nax.grid(axis='y', linestyle='--')\n\n# Set the x-axis grid line linewidth\nax.grid(axis='x', linewidth=0.5)\n\n# Set the y-axis grid line linewidth\nax.grid(axis='y', linewidth=0.5)\n\n# Set the x-axis grid line alpha\nax.grid(axis='x', alpha=0.5)\n\n# Set the y-axis grid line alpha\nax.grid(axis='y', alpha=0.5)\n\n# Set the x-axis grid line zorder\nax.grid(axis='x', zorder=1)\n\n# Set the y-axis grid line zorder\nax.grid(axis='y', zorder=1)\n\n# Set the x-axis grid line visible\nax.grid(axis='x', visible=True)\n\n# Set the y-axis grid line visible\nax.grid(axis='y', visible=True)\n\n# Set the x-axis grid line which\nax.grid(axis='x', which='major')\n\n# Set the y-axis grid line which\nax.grid(axis='y', which='major')\n\n# Set the x"}
{"file": "dataset/ori_500/quiver_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the background color of the plot\nax.set_facecolor('lightblue')\n\n# Draw arrows\nfor i in range(10):\n    ax.arrow(i/2, i/2, 0.1, 0.1, head_width=0.05, head_length=0.05, fc='r', ec='r')\n\n# Draw lines\nx = np.linspace(0, 1, 100)\ny1 = np.sin(x)\ny2 = np.cos(x)\ny3 = np.tan(x)\nax.plot(x, y1, 'b-')\nax.plot(x, y2, 'g-')\nax.plot(x, y3, 'r-')\n\n# Set the title and labels\nax.set_title('Sample Plot')\nax.set_xlabel('X1')\nax.set_ylabel('X2')\n\n# Set the limits of the axes\nax.set_xlim(0, 1)\nax.set_ylim(0, 1)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/quiver_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(5.0, 4.0))\n\n# Set the title of the plot\nax.set_title('Vector Field: -F + \u03c1\u2207FF (Small \u03c1)')\n\n# Generate a grid of points\nx = np.linspace(-1, 1, 100)\ny = np.linspace(-1, 1, 100)\nX, Y = np.meshgrid(x, y)\n\n# Define the vector field\nU = -np.sin(np.pi * X) * np.cos(np.pi * Y)\nV = np.cos(np.pi * X) * np.sin(np.pi * Y)\n\n# Plot the vector field\nQ = ax.quiver(X, Y, U, V, color='b')\n\n# Set the limits of the plot\nax.set_xlim(-1, 1)\nax.set_ylim(-1, 1)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/quiver_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(6.0, 5.0))\n\n# Set the title of the plot\nax.set_title('Magnetic Field $\\mathbf{B}$ in Tesla units')\n\n# Set the x-axis label\nax.set_xlabel('x')\n\n# Set the y-axis label\nax.set_ylabel('y')\n\n# Generate a grid of points\nx = np.linspace(-2, 2, 100)\ny = np.linspace(-2, 2, 100)\nX, Y = np.meshgrid(x, y)\n\n# Calculate the magnetic field values\nB = np.sin(X) + np.cos(Y)\n\n# Plot the magnetic field values as a contour plot\ncontour = ax.contourf(X, Y, B, cmap='viridis')\n\n# Add a colorbar to the plot\ncbar = fig.colorbar(contour)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 7.0))\n\n# Set the background color of the plot\nax.set_facecolor('black')\n\n# Set the title of the plot\nax.set_title('GQA', color='white')\n\n# Set the labels for the x-axis and y-axis\nax.set_xlabel('TextVQA', color='red')\nax.set_ylabel('SQA-I', color='blue')\n\n# Set the tick labels for the x-axis and y-axis\nax.set_xticks([0, 1, 2, 3, 4])\nax.set_yticks([0, 1, 2, 3, 4])\n\n# Set the tick labels for the x-axis and y-axis\nax.set_xticklabels(['VQAav2', 'MME', 'MM', 'Llava-W', 'POPE'], color='white')\nax.set_yticklabels(['VQAav2', 'MME', 'MM', 'Llava-W', 'POPE'], color='white')\n\n# Set the grid lines\nax.grid(True, which='both', linestyle='-', linewidth=0.5)\n\n# Set the aspect ratio of the plot\nax.set_aspect('equal')\n\n# Set the limits of the plot\nax.set_xlim(-1, 6)\nax.set_ylim(-1, 6)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the x-axis and y-axis\nax.spines['left'].set_color('white')\nax.spines['right'].set_color('white')\nax.spines['top'].set_color('white')\nax.spines['bottom'].set_color('white')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'TextVQA', color='red', fontsize=12, ha='center', va='center')\nax.text(0.5, 0.5, 'SQA-I', color='blue', fontsize=12, ha='center', va='center')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(5.0, 5.0))\n\n# Set the title of the plot\nax.set_title('XNLI (speed-up ratio: 4)')\n\n# Define the colors for the sectors\ncolors = ['pink', 'green', 'blue', 'red']\n\n# Define the labels for the sectors\nlabels = ['fr', 'es', 'en', 'el', 'de', 'bg', 'sw', 'ar', 'zh', 'vi', 'ur', 'th', 'ru', 'tr']\n\n# Define the radii for the sectors\nradii = [20, 40, 60, 80]\n\n# Draw the sectors\nfor i, label in enumerate(labels):\n    ax.add_artist(plt.Circle((0, 0), radii[i % len(radii)], color=colors[i % len(colors)], label=label))\n\n# Draw the grid lines\nax.grid(True)\n\n# Set the aspect ratio to be equal so that the circle is not distorted\nax.set_aspect('equal')\n\n# Show the legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(4.0, 4.0))\n\n# Draw a circle\ncircle = plt.Circle((0.5, 0.5), 0.4, color='lightgrey')\nax.add_artist(circle)\n\n# Draw a hexagon\nhexagon = plt.Polygon([[0.3, 0.2], [0.4, 0.1], [0.6, 0.1], [0.7, 0.2], [0.7, 0.4], [0.6, 0.5], [0.4, 0.5], [0.3, 0.4]], color='lightgreen')\nax.add_patch(hexagon)\n\n# Draw a rectangle\nrectangle = plt.Rectangle([0.2, 0.3], 0.2, 0.2, color='lightblue')\nax.add_patch(rectangle)\n\n# Draw a triangle\ntriangle = plt.Polygon([[0.5, 0.8], [0.4, 0.9], [0.6, 0.9]], color='lightyellow')\nax.add_patch(triangle)\n\n# Draw a line\nline = plt.Line2D([0.2, 0.8], [0.2, 0.8], color='black')\nax.add_line(line)\n\n# Set the limits of the plot\nax.set_xlim(0, 1)\nax.set_ylim(0, 1)\n\n# Set the aspect ratio of the plot\nax.set_aspect('equal')\n\n# Set the title of the plot\nax.set_title('Reflection')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Define the data for the plot\ndata = [0.496, 0.37, 0.284, 0.24, 0.24, 0.22, 0.29, 0.36, 0.48, 0.5]\n\n# Create a circle patch\ncircle = plt.Circle((0.5, 0.5), 0.4, color='gray')\nax.add_artist(circle)\n\n# Create a rectangle patch\nrectangle = plt.Rectangle((0.1, 0.1), 0.8, 0.8, color='blue')\nax.add_artist(rectangle)\n\n# Create a triangle patch\ntriangle = plt.Polygon([[0.1, 0.1], [0.5, 0.9], [0.9, 0.1]], color='green')\nax.add_artist(triangle)\n\n# Create a star patch\nstar = plt.Polygon([[0.1, 0.1], [0.5, 0.9], [0.9, 0.1], [0.5, 0.3], [0.3, 0.9]], color='red')\nax.add_artist(star)\n\n# Set the limits of the plot\nax.set_xlim(0, 1)\nax.set_ylim(0, 1)\n\n# Set the aspect ratio of the plot\nax.set_aspect('equal')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Set the title of the plot\nax.set_title('My Plot')\n\n# Define the data for the plot\nx = np.linspace(0, 10, 100)\ny = np.sin(x)\n\n# Plot the data\nax.plot(x, y, 'b-')\n\n# Set the x-axis label\nax.set_xlabel('X Axis Label')\n\n# Set the y-axis label\nax.set_ylabel('Y Axis Label')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Roleplay')\n\n# Define the colors for the sectors\ncolors = ['blue', 'orange', 'green', 'red']\n\n# Define the labels for the sectors\nlabels = ['Reasoning', 'Writing', 'Math', 'Coding', 'Extraction', 'Humanities', 'STEM']\n\n# Define the radii for the sectors\nradii = [1, 2, 3, 4, 5, 6, 7]\n\n# Draw the sectors\nfor i in range(len(labels)):\n    ax.add_patch(plt.Circle((0, 0), radii[i], color=colors[i % len(colors)], alpha=0.5))\n    ax.text(0, -radii[i] * 0.8, labels[i], ha='center', va='center')\n\n# Draw the center circle\nax.add_patch(plt.Circle((0, 0), 0.5, color='black'))\n\n# Draw the lines connecting the sectors\nfor i in range(len(labels)):\n    ax.plot([0, 0], [0, -radii[i]], color='black')\n\n# Draw the text in the center\nax.text(0, 0, 'GPT-J-6B\\nTinyLLaMA-1.1B\\nOpenLLaMA-3B\\nOpenMoE-8B/32E', ha='center', va='center')\n\n# Set the aspect ratio to be equal\nax.set_aspect('equal')\n\n# Remove the axis\nax.axis('off')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Set the title of the plot\nax.set_title('MUJI vs Nestle in Food Safety')\n\n# Draw a circle around the plot\ncircle = plt.Circle((0.5, 0.5), 0.4, color='black')\nax.add_artist(circle)\n\n# Draw a rectangle in the center of the plot\nrectangle = plt.Rectangle((0.3, 0.3), 0.4, 0.4, color='orange')\nax.add_artist(rectangle)\n\n# Draw a circle in the center of the rectangle\ncircle2 = plt.Circle((0.4, 0.4), 0.1, color='red')\nax.add_artist(circle2)\n\n# Draw a rectangle in the center of the circle\nrectangle2 = plt.Rectangle((0.45, 0.45), 0.1, 0.1, color='green')\nax.add_artist(rectangle2)\n\n# Draw a circle in the center of the rectangle\ncircle3 = plt.Circle((0.4, 0.4), 0.1, color='red')\nax.add_artist(circle3)\n\n# Draw a rectangle in the center of the circle\nrectangle3 = plt.Rectangle((0.45, 0.45), 0.1, 0.1, color='green')\nax.add_artist(rectangle3)\n\n# Draw a circle in the center of the rectangle\ncircle4 = plt.Circle((0.4, 0.4), 0.1, color='red')\nax.add_artist(circle4)\n\n# Draw a rectangle in the center of the circle\nrectangle4 = plt.Rectangle((0.45, 0.45), 0.1, 0.1, color='green')\nax.add_artist(rectangle4)\n\n# Draw a circle in the center of the rectangle\ncircle5 = plt.Circle((0.4, 0.4), 0.1, color='red')\nax.add_artist(circle5)\n\n# Draw a rectangle in the center of the circle\nrectangle5 = plt.Rectangle((0.45, 0.45), 0.1, 0.1, color='green')\nax.add_artist(rectangle5)\n\n# Draw a circle in the center of the rectangle\ncircle6 = plt.Circle((0.4, 0.4), 0.1, color='red')\nax.add_artist(circle6)\n\n# Draw a rectangle in the center of the circle\nrectangle6 = plt.Rectangle((0.45, 0.45), 0.1, 0.1, color='green')\nax.add_artist(rectangle6)\n\n# Draw a circle in the center of the rectangle\ncircle7 = plt.Circle((0.4, 0.4), 0.1, color='red')\nax.add_artist(circle7)\n\n# Draw a rectangle in the center of the circle\nrectangle7 = plt.Rectangle((0.45, 0.45), 0.1, 0.1, color='green')\nax.add_artist(rectangle7)\n\n# Draw a circle in the center of the rectangle\ncircle8 = plt.Circle((0.4, 0.4), 0.1, color='red')\nax.add_artist(circle8)\n\n# Draw a rectangle in the center of the circle\nrectangle8 = plt.Rectangle((0.45, 0.45), 0.1, 0.1, color='green')\nax.add_artist(rectangle8)\n\n# Draw a circle in the center of the rectangle\ncircle9 = plt.Circle((0.4, 0.4), 0.1, color='red')\nax.add_artist(circle9)\n\n# Draw a rectangle in the center of the circle\nrectangle9 = plt.Rectangle((0.45, 0.45), 0.1, 0.1, color='green')\nax.add_artist(rectangle9)\n\n# Draw a circle in the center of the rectangle\ncircle10 = plt.Circle((0.4, 0.4), 0.1, color='red')\nax.add_artist(circle10)\n\n# Draw a rectangle in the center of the circle\nrectangle10 = plt.Rectangle((0.45, 0.45), 0.1, 0.1, color='green')\nax.add_artist(rectangle10)\n\n# Draw a circle in the center of the rectangle\ncircle11 = plt.Circle((0.4, 0.4), 0.1, color='red')\nax.add_artist(circle11)\n\n# Draw a rectangle in the center of the circle\nrectangle11 = plt.Rectangle((0.45, 0.45), 0.1, 0.1, color='green')\nax.add_artist(rectangle11)\n\n# Draw a circle in the center of the rectangle\ncircle12 = plt.Circle((0.4, 0.4), 0.1, color='red')\nax.add_artist(circle12)\n\n# Draw a rectangle in the center of the circle\nrectangle12 = plt.Rectangle((0.45, 0.45), 0.1, 0.1, color='green')\nax.add_artist(rectangle12)\n\n# Draw a circle in the center of the rectangle\ncircle13 = plt.Circle((0.4, 0.4), 0.1, color='red')\nax.add_artist(circle13)\n\n# Draw a rectangle in the center of the circle\nrectangle13 = plt.Rectangle((0.45, 0.45), 0.1, 0.1, color='green')\nax.add_artist(rectangle13)\n\n# Draw a circle in the center of the rectangle\ncircle14 = plt.Circle((0.4, 0.4), 0.1, color='red')\nax.add_artist(circle14)\n\n# Draw a rectangle in the center of the circle\nrectangle14 = plt.Rectangle((0.45, 0.45), 0.1, 0.1, color='green')\nax.add_artist(rectangle14)\n\n# Draw a circle in the center of the rectangle\ncircle15 = plt.Circle((0.4, 0.4), 0.1, color='red')\nax.add_artist(circle15)\n\n# Draw a rectangle in the center of the circle\nrectangle15 = plt.Rectangle((0.45, 0.45), 0.1, 0.1, color='green')\nax.add_artist(rectangle15)\n\n# Draw a circle in the center of the rectangle\ncircle16 = plt.Circle((0.4, 0.4), 0.1, color='red')\nax.add_artist(circle16)\n\n# Draw a rectangle in the center of the circle\nrectangle16 = plt.Rectangle((0.45, 0.45), 0.1, 0.1, color='green')\nax.add_artist(rectangle16)\n\n# Draw a circle in the center of the rectangle\ncircle17 = plt.Circle((0.4, 0.4), 0.1, color='red')\nax.add_artist(circle17)\n\n# Draw a rectangle in the center of the circle\nrectangle17 = plt.Rectangle((0.45, 0.45), 0.1, 0.1, color='green')\nax.add_artist(rectangle17)\n\n# Draw a circle in the center of the rectangle\ncircle18 = plt.Circle((0.4, 0.4), 0.1, color='red')\nax.add_artist(circle18)\n\n# Draw a rectangle in the center of the circle\nrectangle18 = plt.Rectangle((0.45, 0.45), 0.1, 0.1, color='green')\nax.add_artist(rectangle18)\n\n# Draw a circle in the center of the rectangle\ncircle19 = plt.Circle((0.4, 0.4), 0.1, color='red')\nax.add_artist(circle19)\n\n# Draw a rectangle in the center of the circle\nrectangle19 = plt.Rectangle((0.45, 0.45), 0.1, 0.1, color='green')\nax.add_artist(rectangle19)\n\n# Draw a circle in the center of the rectangle\ncircle20 = plt.Circle((0.4, 0.4), 0.1, color='red')\nax.add_artist(circle20)\n\n# Draw a rectangle in the center of the circle\nrectangle20 = plt.Rectangle((0.45, 0.45), 0.1, 0.1, color='green')\nax.add_artist(rectangle20)\n\n# Draw a circle in the center of the rectangle\ncircle21 = plt.Circle((0.4, 0.4), 0.1, color='red')\nax.add_artist(circle21)\n\n# Draw a rectangle in the center of the circle\nrectangle21 = plt.Rectangle((0.45, 0.45), 0.1, 0.1, color='green')\nax.add_artist(rectangle21)\n\n# Draw a circle in the center of the rectangle\ncircle22 = plt.Circle((0.4, 0.4), 0.1, color='red')\nax.add_artist(circle22)\n\n# Draw a rectangle in the center of the circle\nrectangle22 = plt.Rectangle((0.45, 0.45), 0.1, 0.1, color='green')\nax.add_artist(rectangle22)\n\n# Draw a circle in the center of the rectangle\ncircle23 = plt.Circle((0.4, 0.4), 0.1, color='red')\nax.add_artist(circle23)\n\n# Draw a rectangle in the center of the circle\nrectangle23 = plt.Rectangle((0.45, 0.45), 0.1, 0.1, color='green')\nax.add_artist(rectangle23)\n\n# Draw a circle in the center of the rectangle\ncircle24 = plt.Circle((0.4, 0.4), 0.1, color='red')\nax.add_artist(circle24)\n\n# Draw a rectangle in the center of the circle\nrectangle24 = plt.Rectangle((0.45, 0.45), 0.1, 0.1, color='green')\nax.add_artist(rectangle24)\n\n# Draw a circle in the center of the rectangle\ncircle25 = plt.Circle((0.4, 0.4), 0.1, color='red')\nax.add_artist(circle25)\n\n# Draw a rectangle in the center of the circle\nrectangle25 = plt.Rectangle((0.45, 0.45), 0.1, 0.1, color='green')\nax.add_artist(rectangle25)\n\n# Draw a circle in the center of the rectangle\ncircle26 = plt.Circle((0.4, 0.4), 0.1, color='red')\nax.add_artist(circle26)\n\n# Draw a rectangle in the center of the circle\nrectangle26 = plt.Rectangle((0.45, 0.45), 0.1, 0.1, color='green')\nax.add_artist(rectangle26)\n\n# Draw a circle in the center of the rectangle\ncircle27 = plt.Circle((0.4, 0.4), 0.1, color='red')\nax.add_artist(circle27)\n\n# Draw a rectangle in the center of the circle\nrectangle27 = plt.Rectangle((0.45, 0.45), 0.1, 0.1, color='green')\nax.add_artist(rectangle27)\n\n# Draw a circle in the center of the rectangle\ncircle28 = plt.Circle((0.4, 0.4), 0.1, color='red')\nax.add_artist(circle28)\n\n# Draw a rectangle in the center of the circle\nrectangle28 = plt.Rectangle((0.45, 0.45), 0.1, 0.1, color='green')\nax.add_artist(rectangle28)\n\n# Draw a circle in the center of the rectangle\ncircle29 = plt.Circle((0.4, 0.4), 0.1, color='red')\nax.add_artist(circle29)\n\n# Draw a rectangle in the center of the circle\nrectangle29 = plt.Rectangle((0.45, 0.45), 0.1, 0.1, color='green')\nax.add_artist(rectangle29)\n\n# Draw a circle in the center of the rectangle\ncircle30 = plt.Circle((0.4, 0.4), 0.1, color='red')\nax.add_artist(circle30)\n\n# Draw a rectangle in the center of the circle\nrectangle30 = plt.Rectangle((0.45, 0.45), 0.1, 0.1, color='green')\nax.add_artist(rectangle30)\n\n# Draw a circle in the center of the rectangle\ncircle31 = plt.Circle((0.4, 0.4), 0.1, color='red')\nax.add_artist(circle31)\n\n# Draw a rectangle in the center of the circle\nrectangle31 = plt.Rectangle((0.45, 0.45), 0.1, 0.1, color='green')\nax.add_artist(rectangle31)\n\n# Draw a circle in the center of the rectangle\ncircle32 = plt.Circle((0.4, 0.4), 0.1, color='red')\nax.add_artist(circle32)\n\n# Draw a rectangle in the center of the circle\nrectangle32 = plt.Rectangle((0.45, 0.45), 0.1, 0.1, color='green')\nax.add_artist(rectangle32)\n\n# Draw a circle in the center of the rectangle\ncircle33 = plt.Circle((0.4, 0.4), 0.1, color='red')\nax.add_artist(circle33)\n\n# Draw a rectangle in the center of the circle\nrectangle33 = plt.Rectangle((0.45, 0.45), 0.1, 0.1, color='green')\nax.add_artist(rectangle33)\n\n# Draw a circle in the center of the rectangle\ncircle34 = plt.Circle((0.4, 0.4), 0.1, color='red')\nax.add_artist(circle34)\n\n# Draw a rectangle in the center of the circle\nrectangle34 = plt.Rectangle((0.45, 0.45), 0.1, 0.1, color='green')\nax.add_artist(rectangle34)\n\n# Draw a circle in the center of the rectangle\ncircle35 = plt.Circle((0.4, 0.4), 0.1, color='red')\nax.add_artist(circle35)\n\n# Draw a rectangle in the center of the circle\nrectangle35 = plt.Rectangle((0.45, 0.45), 0.1, 0.1, color='green')\nax.add_artist(rectangle35)\n\n# Draw a circle in the center of the rectangle\ncircle36 = plt.Circle((0.4, 0.4), 0.1, color='red')\nax.add_artist(circle36)\n\n# Draw a rectangle in the center of the circle\nrectangle36 = plt.Rectangle((0.45, 0.45), 0.1, 0.1, color='green')\nax.add_artist(rectangle36)\n\n# Draw a circle in the center of the rectangle\ncircle37 = plt.Circle((0.4, 0.4), 0.1, color='red')\nax.add_artist(circle37)\n\n# Draw a rectangle in the center of the circle\nrectangle37 = plt.Rectangle((0.45, 0.45), 0.1, 0.1, color='green')\nax.add_artist(rectangle37)\n\n# Draw a circle in the center of the rectangle\ncircle38 = plt.Circle((0.4, 0.4), 0.1, color='red')\nax.add_artist(circle38)\n\n# Draw a rectangle in the center of the circle\nrectangle38 = plt.Rectangle((0.45, 0.45), 0.1, 0.1, color='green')\nax.add_artist(rectangle38)\n\n# Draw a circle in the center of the rectangle\ncircle39 = plt.Circle((0.4, 0.4), 0.1, color='red')\nax.add_artist(circle39)\n\n# Draw a rectangle in the center of the circle\nrectangle39 = plt.Rectangle((0.45, 0.45), 0.1, 0.1, color='green')\nax.add_artist(rectangle39)\n\n# Draw a circle in the center of the rectangle\ncircle40 = plt.Circle((0.4, 0.4), 0.1, color='red')\nax.add_artist(circle40)\n\n# Draw a rectangle in the center of the circle\nrectangle40 = plt.Rectangle((0.45, 0.45), 0.1, 0.1, color='green')\nax.add_artist(rectangle40)\n\n# Draw a circle in the center of the rectangle\ncircle41 = plt.Circle((0.4, 0.4), 0.1, color='red')\nax.add_artist(circle41)\n\n# Draw a rectangle in the center of the circle\nrectangle41 = plt.Rectangle((0.45, 0.45), 0.1, 0.1, color='green')\nax.add_artist(rectangle41)\n\n# Draw a circle in the center of the rectangle\ncircle42 = plt.Circle((0.4, 0.4), 0.1, color='red')\nax.add_artist(circle42)\n\n# Draw a rectangle in the center of the circle\nrectangle42 = plt.Rectangle((0.45, 0.45), 0.1, 0.1, color='green')\nax.add_artist(rectangle42)\n\n# Draw a circle in the center of the rectangle\ncircle43 = plt.Circle((0.4, 0.4), 0.1, color='red')\nax.add_artist(circle43)\n\n# Draw a rectangle in the center of the circle\nrectangle43 = plt.Rectangle((0.45, 0.45), 0.1, 0.1, color='green')\nax.add_artist(rectangle43)\n\n# Draw a circle in the center of the rectangle\ncircle44 = plt.Circle((0.4, 0.4), 0.1, color='red')\nax.add_artist(circle"}
{"file": "dataset/ori_500/radar_16.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 7.0))\n\n# Set the background color of the plot\nax.set_facecolor('black')\n\n# Set the title of the plot\nax.set_title('Global Sales', color='white')\n\n# Set the x-axis label\nax.set_xlabel('Sales', color='white')\n\n# Set the y-axis label\nax.set_ylabel('Countries', color='white')\n\n# Set the tick labels\nax.set_xticks([20, 40, 60, 80])\nax.set_yticks([1, 2, 3, 4, 5])\n\n# Set the tick label colors\nax.tick_params(axis='x', colors='white')\nax.tick_params(axis='y', colors='white')\n\n# Set the grid lines\nax.grid(True, color='gray')\n\n# Set the rectangle patch\nrectangle = plt.Rectangle((0, 0), 100, 100, color='blue')\nax.add_patch(rectangle)\n\n# Set the circle patch\ncircle = plt.Circle((50, 50), 50, color='green')\nax.add_patch(circle)\n\n# Set the text\nax.text(50, 50, 'USA', ha='center', va='center', color='white')\n\n# Set the text\nax.text(50, 50, 'China', ha='center', va='center', color='white')\n\n# Set the text\nax.text(50, 50, 'India', ha='center', va='center', color='white')\n\n# Set the text\nax.text(50, 50, 'Brazil', ha='center', va='center', color='white')\n\n# Set the text\nax.text(50, 50, 'Europe', ha='center', va='center', color='white')\n\n# Set the text\nax.text(50, 50, 'Apple', ha='center', va='center', color='orange')\n\n# Set the text\nax.text(50, 50, 'Samsung', ha='center', va='center', color='blue')\n\n# Set the text\nax.text(50, 50, 'Huawei', ha='center', va='center', color='green')\n\n# Set the text\nax.text(50, 50, '78.7', ha='center', va='center', color='orange')\n\n# Set the text\nax.text(50, 50, '66.1', ha='center', va='center', color='orange')\n\n# Set the text\nax.text(50, 50, '59.7', ha='center', va='center', color='orange')\n\n# Set the text\nax.text(50, 50, '71.9', ha='center', va='center', color='orange')\n\n# Set the text\nax.text(50, 50, '78.0', ha='center', va='center', color='orange')\n\n# Set the text\nax.text(50, 50, '85.0', ha='center', va='center', color='orange')\n\n# Set the text\nax.text(50, 50, '86.4', ha='center', va='center', color='orange')\n\n# Set the text\nax.text(50, 50, '80.9', ha='center', va='center', color='orange')\n\n# Set the text\nax.text(50, 50, '76.1', ha='center', va='center', color='orange')\n\n# Set the text\nax.text(50, 50, '66.4', ha='center', va='center', color='orange')\n\n# Set the text\nax.text(50, 50, '50.8', ha='center', va='center', color='orange')\n\n# Set the text\nax.text(50, 50, '56.5', ha='center', va='center', color='orange')\n\n# Set the text\nax.text(50, 50, '60.0', ha='center', va='center', color='orange')\n\n# Set the text\nax.text(50, 50, '76.1', ha='center', va='center', color='orange')\n\n# Set the text\nax.text(50, 50, '86.4', ha='center', va='center', color='orange')\n\n# Set the text\nax.text(50, 50, '80.9', ha='center', va='center', color='orange')\n\n# Set the text\nax.text(50, 50, '76.1', ha='center', va='center', color='orange')\n\n# Set the text\nax.text(50, 50, '86.4', ha='center', va='center', color='orange')\n\n# Set the text\nax.text(50, 50, '80.9', ha='center', va='center', color='orange')\n\n# Set the text\nax.text(50, 50, '76.1', ha='center', va='center', color='orange')\n\n# Set the text\nax.text(50, 50, '86.4', ha='center', va='center', color='orange')\n\n# Set the text\nax.text(50, 50, '80.9', ha='center', va='center', color='orange')\n\n# Set the text\nax.text(50, 50, '76.1', ha='center', va='center', color='orange')\n\n# Set the text\nax.text(50, 50, '86.4', ha='center', va='center', color='orange')\n\n# Set the text\nax.text(50, 50, '80.9', ha='center', va='center', color='orange')\n\n# Set the text\nax.text(50, 50, '76.1', ha='center', va='center', color='orange')\n\n# Set the text\nax.text(50, 50, '86.4', ha='center', va='center', color='orange')\n\n# Set the text\nax.text(50, 50, '80.9', ha='center', va='center', color='orange')\n\n# Set the text\nax.text(50, 50, '76.1', ha='center', va='center', color='orange')\n\n# Set the text\nax.text(50, 50, '86.4', ha='center', va='center', color='orange')\n\n# Set the text\nax.text(50, 50, '80.9', ha='center', va='center', color='orange')\n\n# Set the text\nax.text(50, 50, '76.1', ha='center', va='center', color='orange')\n\n# Set the text\nax.text(50, 50, '86.4', ha='center', va='center', color='orange')\n\n# Set the text\nax.text(50, 50, '80.9', ha='center', va='center', color='orange')\n\n# Set the text\nax.text(50, 50, '76.1', ha='center', va='center', color='orange')\n\n# Set the text\nax.text(50, 50, '86.4', ha='center', va='center', color='orange')\n\n# Set the text\nax.text(50, 50, '80.9', ha='center', va='center', color='orange')\n\n# Set the text\nax.text(50, 50, '76.1', ha='center', va='center', color='orange')\n\n# Set the text\nax.text(50, 50, '86.4', ha='center', va='center', color='orange')\n\n# Set the text\nax.text(50, 50, '80.9', ha='center', va='center', color='orange')\n\n# Set the text\nax.text(50, 50, '76.1', ha='center', va='center', color='orange')\n\n# Set the text\nax.text(50, 50, '86.4', ha='center', va='center', color='orange')\n\n# Set the text\nax.text(50, 50, '80.9', ha='center', va='center', color='orange')\n\n# Set the text\nax.text(50, 50, '76.1', ha='center', va='center', color='orange')\n\n# Set the text\nax.text(50, 50, '86.4', ha='center', va='center', color='orange')\n\n# Set the text\nax.text(50, 50, '80.9', ha='center', va='center', color='orange')\n\n# Set the text\nax.text(50, 50, '76.1', ha='center', va='center', color='orange')\n\n# Set the text\nax.text(50, 50, '86.4', ha='center', va='center', color='orange')\n\n# Set the text\nax.text(50, 50, '80.9', ha='center', va='center', color='orange')\n\n# Set the text\nax.text(50, 50, '76.1', ha='center', va='center', color='orange')\n\n# Set the text\nax.text(50, 50, '86.4', ha='center', va='center', color='orange')\n\n# Set the text\nax.text(50, 50, '80.9', ha='center', va='center', color='orange')\n\n# Set the text\nax.text(50, 50, '76.1', ha='center', va='center', color='orange')\n\n# Set the text\nax.text(50, 50, '86.4', ha='center', va='center', color='orange')\n\n# Set the text\nax.text(50, 50, '80.9', ha='center', va='center', color='orange')\n\n# Set the text\nax.text(50, 50, '76.1', ha='center', va='center', color='orange')\n\n# Set the text\nax.text(50, 50, '86.4', ha='center', va='center', color='orange')\n\n# Set the text\nax.text(50, 50, '80.9', ha='center', va='center', color='orange')\n\n# Set the text\nax.text(50, 50, '76.1', ha='center', va='center', color='orange')\n\n# Set the text\nax.text(50, 50, '86.4', ha='center', va='center', color='orange')\n\n# Set the text\nax.text(50, 50, '80.9', ha='center', va='center', color='orange')\n\n# Set the text\nax.text(50, 50, '76.1', ha='center', va='center', color='orange')\n\n# Set the text\nax.text(50, 50, '86.4', ha='center', va='center', color='orange')\n\n# Set the text\nax.text(50, 50, '80.9', ha='center', va='center', color='orange')\n\n# Set the text\nax.text(50, 50, '76.1', ha='center', va='center', color='orange')\n\n# Set the text\nax.text(50, 50, '86.4', ha='center', va='center', color='orange')\n\n# Set the text\nax.text(50, 50, '80.9', ha='center', va='center', color='orange')\n\n# Set the text\nax.text(50, 50, '76.1', ha='center', va='center', color='orange')\n\n# Set the text\nax.text(50, 50, '86.4', ha='center', va='center', color='orange')\n\n# Set the text\nax.text(50, 50, '80.9', ha='center', va='center', color='orange')\n\n# Set the text\nax.text(50, 50, '76.1', ha='center', va='center', color='orange')\n\n# Set the text\nax.text(50, 50, '86.4', ha='center', va='center', color='orange')\n\n# Set the text\nax.text(50, 50, '80.9', ha='center', va='center', color='orange')\n\n# Set the text\nax.text(50, 50, '76.1', ha='center', va='center', color='orange')\n\n# Set the text\nax.text(50, 50, '86.4', ha='center', va='center', color='orange')\n\n# Set the text\nax.text(50, 50, '80.9', ha='center', va='center', color='orange')\n\n# Set the text\nax.text(50, 50, '76.1', ha='center', va='center', color='orange')\n\n# Set the text\nax.text(50, 50, '86.4', ha='center', va='center', color='orange')\n\n# Set the text\nax.text(50, 50, '80.9', ha='center', va='center', color='orange')\n\n# Set the text\nax.text(50, 50, '76.1', ha='center', va='center', color='orange')\n\n# Set the text\nax.text(50, 50, '86.4', ha='center', va='center', color='orange')\n\n# Set the text\nax.text(50, 50, '80.9', ha='center', va='center', color='orange')\n\n# Set the text\nax.text(50, 50, '76.1', ha='center', va='center', color='orange')\n\n# Set the text\nax.text(50, 50, '86.4', ha='center', va='center', color='orange')\n\n# Set the text\nax.text(50, 50, '80.9', ha='center', va='center', color='orange')\n\n# Set the text\nax.text(50, 50, '76.1', ha='center', va='center', color='orange')\n\n# Set the text\nax.text(50, 50, '86.4', ha='center', va='center', color='orange')\n\n# Set the text\nax.text(50, 50, '80.9', ha='center', va='center', color='orange')\n\n# Set the text\nax.text(50, 50, '76.1', ha='center', va='center', color='orange')\n\n# Set the text\nax.text(50, 50, '86.4', ha='center', va='center', color='orange')\n\n# Set the text\nax.text(50, 50, '80.9', ha='center', va='center', color='orange')\n\n# Set the text\nax.text(50, 50, '76.1', ha='center', va='center', color='orange')\n\n# Set the text\nax.text(50, 50, '86.4', ha='center', va='center', color='orange')\n\n# Set the text\nax.text(50, 50, '80.9', ha='center', va='center', color='orange')\n\n# Set the text\nax.text(50, 50, '76.1', ha='center', va='center', color='orange')\n\n# Set the text\nax.text(50, 50, '86.4', ha='center', va='center', color='orange')\n\n# Set the text\nax.text(50, 50, '80.9', ha='center', va='center', color='orange')\n\n# Set the text\nax.text(50, 50, '76.1', ha='center', va='center', color='orange')\n\n# Set the text\nax.text(50, 50, '86.4', ha='center', va='center', color='orange')\n\n# Set the text\nax.text(50, 50, '80.9', ha='center', va='center', color='orange')\n\n# Set the text\nax.text(50, 50, '76.1', ha='center', va='center', color='orange')\n\n# Set the text\nax.text(50, 50, '86.4', ha='center', va='center', color='orange')\n\n# Set the text\nax.text(50, 50, '80.9', ha='center', va='center', color='orange')\n\n# Set the text\nax.text(50, 50, '76.1', ha='center', va='center', color='orange')\n\n# Set the text\nax.text(50, 50, '86.4', ha='center', va='center', color='orange')\n\n# Set the text\nax.text(50, 50, '80.9', ha='center', va='center', color='orange')\n\n# Set the text\nax.text(50, 50, '76.1', ha='center', va='center', color='orange')\n\n# Set the text\nax.text(50, 50, '86.4', ha='center', va='center', color='orange')\n\n# Set the text\nax.text(50, 50, '80.9', ha='center', va='center',"}
{"file": "dataset/ori_500/radar_17.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 8))\n\n# Define the data for the radar chart\ncategories = ['Extrusion', 'Injection', 'Blow Molding', 'Compression']\nvalues = [1, 2, 3, 4, 5]\nN = len(categories)\nangles = np.linspace(0, 2 * np.pi, N, endpoint=False).tolist()\nangles += angles[:1]  # To close the loop\n\n# Plot the radar chart\nax.plot(angles, values + values[:1], 'o-', linewidth=2)\nax.fill(angles, values + values[:1], alpha=0.25)\n\n# Set the category labels\nax.set_xticks(angles[:-1])\nax.set_xticklabels(categories)\n\n# Set the title\nax.set_title('Radar Chart')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_18.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\nax.set_facecolor('black')\nfig.suptitle('Amusement Park Comparison: Disney vs Universal Studios', color='white')\n\n# Create a circle for the center of the radar chart\ncircle = plt.Circle((0.5, 0.5), 0.4, color='grey')\nax.add_artist(circle)\n\n# Create a rectangle for the outer ring of the radar chart\nrectangle = plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='orange')\nax.add_artist(rectangle)\n\n# Create a polygon for the inner ring of the radar chart\npolygon = plt.Polygon([[0.3, 0.3], [0.7, 0.3], [0.5, 0.7]], color='purple')\nax.add_artist(polygon)\n\n# Add text annotations for the values\nax.text(0.3, 0.3, '0.2', color='white')\nax.text(0.7, 0.3, '0.4', color='white')\nax.text(0.5, 0.7, '0.6', color='white')\n\n# Set the limits of the axes\nax.set_xlim(0, 1)\nax.set_ylim(0, 1)\n\n# Set the aspect ratio of the axes\nax.set_aspect('equal')\n\n# Set the labels for the axes\nax.set_xlabel('Disney')\nax.set_ylabel('Universal Studios')\n\n# Set the title of the plot\nax.set_title('Radar Chart')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_19.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Creativity')\n\n# Define the colors for the rectangles\ncolors = ['yellow', 'lightgrey', 'darkgrey', 'green']\n\n# Draw the rectangles\nfor i, color in enumerate(colors):\n    ax.add_patch(plt.Rectangle((i*2, 0), 1, 1, color=color))\n\n# Draw the circle\ncircle = plt.Circle((3, 3), 1, color='blue')\nax.add_artist(circle)\n\n# Draw the lines\nfor i in range(5):\n    ax.plot([i*2, i*2], [0, 1], color='black')\n\n# Set the limits of the plot\nax.set_xlim(-1, 10)\nax.set_ylim(-1, 2)\n\n# Set the aspect ratio of the plot\nax.set_aspect('equal')\n\n# Remove the axes\nax.axis('off')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 7.0))\n\n# Set the title of the plot\nax.set_title('POPE')\n\n# Define the colors for the rectangles\ncolors = ['red', 'blue', 'green']\n\n# Draw the rectangles\nfor i in range(3):\n    ax.add_patch(plt.Rectangle((i*20, i*20), 100, 100, color=colors[i]))\n\n# Draw the circle\ncircle = plt.Circle((40, 40), 50, color='gray')\nax.add_artist(circle)\n\n# Draw the text\nax.text(40, 40, 'TextVQA', ha='center', va='center', fontsize=12)\n\n# Draw the line\nline = plt.Line2D([0, 80], [0, 80], color='black')\nax.add_line(line)\n\n# Set the limits of the plot\nax.set_xlim(-10, 100)\nax.set_ylim(-10, 100)\n\n# Set the aspect ratio of the plot\nax.set_aspect('equal')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_20.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(18, 6))\n\n# Define the data for the radar chart\ncategories = ['Versatility', 'Longevity']\nvalues = [5, 7]\nN = len(categories)\nangles = np.linspace(0, 2 * np.pi, N, endpoint=False).tolist()\nangles += angles[:1]  # To close the loop\nvalues += values[:1]\n\n# Plot the radar chart\nax.plot(angles, values, linewidth=1, linestyle='solid')\nax.fill(angles, values, 'b', alpha=0.1)\n\n# Set the title of the chart\nax.set_title('Creativity')\n\n# Set the labels of the chart\nax.set_xticks(angles[:-1])\nax.set_xticklabels(categories)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Set the background color of the plot\nax.set_facecolor('lightgray')\n\n# Draw a circle with a radius of 100\ncircle = plt.Circle((0.5, 0.5), 0.4, color='lightblue')\nax.add_artist(circle)\n\n# Draw a rectangle with a width of 200 and a height of 100\nrectangle = plt.Rectangle((0.3, 0.3), 0.4, 0.2, color='lightgreen')\nax.add_artist(rectangle)\n\n# Draw a polygon with 6 sides\npolygon = plt.Polygon([[0.2, 0.2], [0.3, 0.3], [0.4, 0.2], [0.3, 0.1], [0.2, 0.2]], color='red')\nax.add_artist(polygon)\n\n# Draw a star with 5 points\nstar = plt.Polygon([[0.4, 0.4], [0.5, 0.5], [0.6, 0.4], [0.5, 0.3], [0.4, 0.4]], color='orange')\nax.add_artist(star)\n\n# Draw a circle with a radius of 50\ncircle = plt.Circle((0.5, 0.5), 0.2, color='pink')\nax.add_artist(circle)\n\n# Draw a rectangle with a width of 100 and a height of 50\nrectangle = plt.Rectangle((0.4, 0.4), 0.2, 0.1, color='yellow')\nax.add_artist(rectangle)\n\n# Draw a polygon with 8 sides\npolygon = plt.Polygon([[0.5, 0.5], [0.6, 0.6], [0.7, 0.5], [0.6, 0.4], [0.5, 0.5]], color='purple')\nax.add_artist(polygon)\n\n# Draw a star with 7 points\nstar = plt.Polygon([[0.6, 0.6], [0.7, 0.7], [0.8, 0.6], [0.7, 0.5], [0.6, 0.6]], color='brown')\nax.add_artist(star)\n\n# Draw a circle with a radius of 25\ncircle = plt.Circle((0.5, 0.5), 0.1, color='cyan')\nax.add_artist(circle)\n\n# Draw a rectangle with a width of 50 and a height of 25\nrectangle = plt.Rectangle((0.5, 0.5), 0.1, 0.05, color='magenta')\nax.add_artist(rectangle)\n\n# Draw a polygon with 10 sides\npolygon = plt.Polygon([[0.5, 0.5], [0.6, 0.6], [0.7, 0.5], [0.6, 0.4], [0.5, 0.5]], color='lime')\nax.add_artist(polygon)\n\n# Draw a star with 9 points\nstar = plt.Polygon([[0.6, 0.6], [0.7, 0.7], [0.8, 0.6], [0.7, 0.5], [0.6, 0.6]], color='silver')\nax.add_artist(star)\n\n# Draw a circle with a radius of 12.5\ncircle = plt.Circle((0.5, 0.5), 0.05, color='gold')\nax.add_artist(circle)\n\n# Draw a rectangle with a width of 25 and a height of 12.5\nrectangle = plt.Rectangle((0.5, 0.5), 0.05, 0.025, color='navy')\nax.add_artist(rectangle)\n\n# Draw a polygon with 12 sides\npolygon = plt.Polygon([[0.5, 0.5], [0.6, 0.6], [0.7, 0.5], [0.6, 0.4], [0.5, 0.5]], color='olive')\nax.add_artist(polygon)\n\n# Draw a star with 11 points\nstar = plt.Polygon([[0.6, 0.6], [0.7, 0.7], [0.8, 0.6], [0.7, 0.5], [0.6, 0.6]], color='indigo')\nax.add_artist(star)\n\n# Draw a circle with a radius of 6.25\ncircle = plt.Circle((0.5, 0.5), 0.025, color='white')\nax.add_artist(circle)\n\n# Draw a rectangle with a width of 12.5 and a height of 6.25\nrectangle = plt.Rectangle((0.5, 0.5), 0.025, 0.0125, color='black')\nax.add_artist(rectangle)\n\n# Draw a polygon with 15 sides\npolygon = plt.Polygon([[0.5, 0.5], [0.6, 0.6], [0.7, 0.5], [0.6, 0.4], [0.5, 0.5]], color='fuchsia')\nax.add_artist(polygon)\n\n# Draw a star with 13 points\nstar = plt.Polygon([[0.6, 0.6], [0.7, 0.7], [0.8, 0.6], [0.7, 0.5], [0.6, 0.6]], color='aqua')\nax.add_artist(star)\n\n# Draw a circle with a radius of 3.125\ncircle = plt.Circle((0.5, 0.5), 0.0125, color='silver')\nax.add_artist(circle)\n\n# Draw a rectangle with a width of 25 and a height of 12.5\nrectangle = plt.Rectangle((0.5, 0.5), 0.0125, 0.00625, color='navy')\nax.add_artist(rectangle)\n\n# Draw a polygon with 18 sides\npolygon = plt.Polygon([[0.5, 0.5], [0.6, 0.6], [0.7, 0.5], [0.6, 0.4], [0.5, 0.5]], color='olive')\nax.add_artist(polygon)\n\n# Draw a star with 17 points\nstar = plt.Polygon([[0.6, 0.6], [0.7, 0.7], [0.8, 0.6], [0.7, 0.5], [0.6, 0.6]], color='indigo')\nax.add_artist(star)\n\n# Draw a circle with a radius of 1.5625\ncircle = plt.Circle((0.5, 0.5), 0.00625, color='white')\nax.add_artist(circle)\n\n# Draw a rectangle with a width of 25 and a height of 12.5\nrectangle = plt.Rectangle((0.5, 0.5), 0.00625, 0.003125, color='black')\nax.add_artist(rectangle)\n\n# Draw a polygon with 21 sides\npolygon = plt.Polygon([[0.5, 0.5], [0.6, 0.6], [0.7, 0.5], [0.6, 0.4], [0.5, 0.5]], color='fuchsia')\nax.add_artist(polygon)\n\n# Draw a star with 19 points\nstar = plt.Polygon([[0.6, 0.6], [0.7, 0.7], [0.8, 0.6], [0.7, 0.5], [0.6, 0.6]], color='aqua')\nax.add_artist(star)\n\n# Draw a circle with a radius of 0.78125\ncircle = plt.Circle((0.5, 0.5), 0.003125, color='silver')\nax.add_artist(circle)\n\n# Draw a rectangle with a width of 25 and a height of 12.5\nrectangle = plt.Rectangle((0.5, 0.5), 0.003125, 0.0015625, color='navy')\nax.add_artist(rectangle)\n\n# Draw a polygon with 24 sides\npolygon = plt.Polygon([[0.5, 0.5], [0.6, 0.6], [0.7, 0.5], [0.6, 0.4], [0.5, 0.5]], color='olive')\nax.add_artist(polygon)\n\n# Draw a star with 23 points\nstar = plt.Polygon([[0.6, 0.6], [0.7, 0.7], [0.8, 0.6], [0.7, 0.5], [0.6, 0.6]], color='indigo')\nax.add_artist(star)\n\n# Draw a circle with a radius of 0.390625\ncircle = plt.Circle((0.5, 0.5), 0.0015625, color='white')\nax.add_artist(circle)\n\n# Draw a rectangle with a width of 25 and a height of 12.5\nrectangle = plt.Rectangle((0.5, 0.5), 0.0015625, 0.00078125, color='black')\nax.add_artist(rectangle)\n\n# Draw a polygon with 27 sides\npolygon = plt.Polygon([[0.5, 0.5], [0.6, 0.6], [0.7, 0.5], [0.6, 0.4], [0.5, 0.5]], color='fuchsia')\nax.add_artist(polygon)\n\n# Draw a star with 25 points\nstar = plt.Polygon([[0.6, 0.6], [0.7, 0.7], [0.8, 0.6], [0.7, 0.5], [0.6, 0.6]], color='aqua')\nax.add_artist(star)\n\n# Draw a circle with a radius of 0.1953125\ncircle = plt.Circle((0.5, 0.5), 0.00078125, color='silver')\nax.add_artist(circle)\n\n# Draw a rectangle with a width of 25 and a height of 12.5\nrectangle = plt.Rectangle((0.5, 0.5), 0.00078125, 0.000390625, color='navy')\nax.add_artist(rectangle)\n\n# Draw a polygon with 30 sides\npolygon = plt.Polygon([[0.5, 0.5], [0.6, 0.6], [0.7, 0.5], [0.6, 0.4], [0.5, 0.5]], color='olive')\nax.add_artist(polygon)\n\n# Draw a star with 29 points\nstar = plt.Polygon([[0.6, 0.6], [0.7, 0.7], [0.8, 0.6], [0.7, 0.5], [0.6, 0.6]], color='indigo')\nax.add_artist(star)\n\n# Draw a circle with a radius of 0.09765625\ncircle = plt.Circle((0.5, 0.5), 0.000390625, color='white')\nax.add_artist(circle)\n\n# Draw a rectangle with a width of 25 and a height of 12.5\nrectangle = plt.Rectangle((0.5, 0.5), 0.000390625, 0.0001953125, color='black')\nax.add_artist(rectangle)\n\n# Draw a polygon with 33 sides\npolygon = plt.Polygon([[0.5, 0.5], [0.6, 0.6], [0.7, 0.5], [0.6, 0.4], [0.5, 0.5]], color='fuchsia')\nax.add_artist(polygon)\n\n# Draw a star with 31 points\nstar = plt.Polygon([[0.6, 0.6], [0.7, 0.7], [0.8, 0.6], [0.7, 0.5], [0.6, 0.6]], color='aqua')\nax.add_artist(star)\n\n# Draw a circle with a radius of 0.048828125\ncircle = plt.Circle((0.5, 0.5), 0.0001953125, color='silver')\nax.add_artist(circle)\n\n# Draw a rectangle with a width of 25 and a height of 12.5\nrectangle = plt.Rectangle((0.5, 0.5), 0.0001953125, 0.00009765625, color='navy')\nax.add_artist(rectangle)\n\n# Draw a polygon with 36 sides\npolygon = plt.Polygon([[0.5, 0.5], [0.6, 0.6], [0.7, 0.5], [0.6, 0.4], [0.5, 0.5]], color='olive')\nax.add_artist(polygon)\n\n# Draw a star with 35 points\nstar = plt.Polygon([[0.6, 0.6], [0.7, 0.7], [0.8, 0.6], [0.7, 0.5], [0.6, 0.6]], color='indigo')\nax.add_artist(star)\n\n# Draw a circle with a radius of 0.0244140625\ncircle = plt.Circle((0.5, 0.5), 0.00009765625, color='white')\nax.add_artist(circle)\n\n# Draw a rectangle with a width of 25 and a height of 12.5\nrectangle = plt.Rectangle((0.5, 0.5), 0.00009765625, 0.000048828125, color='black')\nax.add_artist(rectangle)\n\n# Draw a polygon with 39 sides\npolygon = plt.Polygon([[0.5, 0.5], [0.6, 0.6], [0.7, 0.5], [0.6, 0.4], [0.5, 0.5]], color='fuchsia')\nax.add_artist(polygon)\n\n# Draw a star with 37 points\nstar = plt.Polygon([[0.6, 0.6], [0.7, 0.7], [0.8, 0.6], [0.7, 0.5], [0.6, 0.6]], color='aqua')\nax.add_artist(star)\n\n# Draw a circle with a radius of 0.01220703125\ncircle = plt.Circle((0.5, 0.5), 0.000048828125, color='silver')\nax.add_artist(circle)\n\n# Draw a rectangle with a width of 25 and a height of 12.5\nrectangle = plt.Rectangle((0.5, 0.5), 0.000048828125, 0.0000244140625, color='navy')\nax.add_artist(rectangle)\n\n# Draw a polygon with 42 sides\npolygon = plt.Polygon([[0.5, 0.5], [0.6, 0.6], [0.7, 0.5], [0.6, 0.4], [0.5, 0.5]], color='olive')\nax.add_artist(polygon)\n\n# Draw a star with 41 points\nstar = plt.Polygon([[0.6, 0.6], [0.7, 0.7], [0.8, 0.6], [0.7, 0.5], [0.6, 0.6]], color='indigo')\nax.add_artist(star)\n\n# Draw a circle with a radius of 0.006103515625\ncircle = plt.Circle((0.5, 0.5), 0.0000244140625, color='white')\nax.add_artist(circle)\n\n# Draw a rectangle with a width of 25 and a height of 12.5\nrectangle = plt.Rectangle((0.5, 0.5), 0.0000244140625, 0.00001220703125, color='black')\nax.add_artist(rectangle)\n\n# Draw a polygon with 45 sides\npolygon = plt.Polygon([[0.5, 0.5], [0.6, 0.6], [0.7, 0.5], [0.6, 0.4], [0.5, 0.5]], color='fuchsia')\nax.add_artist(polygon)\n\n# Draw a star with 43 points\nstar = plt.Polygon([[0.6, 0.6], [0.7, 0.7], [0.8, 0.6], [0.7, 0.5], [0.6, 0.6]], color='aqua')\nax.add_artist(star)\n\n# Draw a circle with a radius of 0.0"}
{"file": "dataset/ori_500/radar_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, axes = plt.subplots(1, 3, figsize=(10, 6))\n\n# Define the data for each subplot\ndata = [\n    (np.array([1, 2, 3, 4, 5]), np.array([1, 2, 3, 4, 5])),\n    (np.array([1, 2, 3, 4, 5]), np.array([1, 2, 3, 4, 5])),\n    (np.array([1, 2, 3, 4, 5]), np.array([1, 2, 3, 4, 5]))\n]\n\n# Plot the data\nfor ax, (x, y) in zip(axes, data):\n    ax.plot(x, y)\n    ax.set_title('Fidelity(D-test)')\n    ax.set_xlabel('MLA')\n    ax.set_ylabel('Query Error')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Set the title of the plot\nax.set_title('Heterocycle formation')\n\n# Draw a circle\ncircle = plt.Circle((0.5, 0.5), 0.4, color='black')\nax.add_artist(circle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='blue')\nax.add_artist(rectangle)\n\n# Draw a polygon\npolygon = plt.Polygon([[0.1, 0.1], [0.3, 0.9], [0.9, 0.7], [0.7, 0.3]], color='orange')\nax.add_artist(polygon)\n\n# Draw a line\nline = plt.Line2D([0.1, 0.9], [0.1, 0.9], color='green')\nax.add_artist(line)\n\n# Draw a scatter plot\nscatter = plt.scatter([0.1, 0.3, 0.5, 0.7, 0.9], [0.1, 0.3, 0.5, 0.7, 0.9], color='red')\nax.add_artist(scatter)\n\n# Draw a bar chart\nbar = plt.bar(['A', 'B', 'C'], [10, 20, 30], color='purple')\nax.add_artist(bar)\n\n# Draw a pie chart\npie = plt.pie([10, 20, 30], colors=['cyan', 'magenta', 'yellow'])\nax.add_artist(pie[0])\n\n# Draw a histogram\nhist = plt.hist([1, 2, 2, 3, 3, 3, 4, 4, 4, 4], bins=5, color='brown')\nax.add_artist(hist[0])\n\n# Draw a heatmap\nheatmap = plt.imshow(np.random.rand(10, 10), cmap='hot', interpolation='nearest')\nax.add_artist(heatmap)\n\n# Draw a contour plot\ncontour = plt.contour(np.random.rand(10, 10), levels=5, colors='black')\nax.add_artist(contour)\n\n# Draw a streamplot\nstream = plt.streamplot(np.random.rand(10, 10), np.random.rand(10, 10), color='black')\nax.add_artist(stream.lines)\n\n# Draw a quiver plot\nquiver = plt.quiver(np.random.rand(10, 10), np.random.rand(10, 10), color='black')\nax.add_artist(quiver)\n\n# Draw a polar plot\npolar = plt.polar(np.linspace(0, 2*np.pi, 100), np.random.rand(100), color='black')\nax.add_artist(polar[0])\n\n# Draw a 3D plot\nfrom mpl_toolkits.mplot3d import Axes3D\nax3d = fig.add_subplot(111, projection='3d')\nax3d.plot_surface(np.random.rand(10, 10), np.random.rand(10, 10), np.random.rand(10, 10), color='black')\n\n# Set the limits of the plot\nax.set_xlim(0, 1)\nax.set_ylim(0, 1)\nax.set_zlim(0, 1)\n\n# Set the labels of the plot\nax.set_xlabel('X Label')\nax.set_ylabel('Y Label')\nax.set_zlabel('Z Label')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Draw a circle\ncircle = plt.Circle((0.5, 0.5), 0.4, color='lightgrey')\nax.add_artist(circle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='green', alpha=0.5)\nax.add_artist(rectangle)\n\n# Draw a star\nstar = plt.Polygon([[0.5, 0.1], [0.4, 0.3], [0.6, 0.3], [0.5, 0.5], [0.4, 0.7], [0.6, 0.7]], color='red')\nax.add_artist(star)\n\n# Draw a line\nline = plt.Line2D([0.2, 0.8], [0.2, 0.8], color='blue')\nax.add_artist(line)\n\n# Set the limits of the plot\nax.set_xlim(0, 1)\nax.set_ylim(0, 1)\n\n# Set the aspect ratio of the plot\nax.set_aspect('equal')\n\n# Set the title of the plot\nax.set_title('Model A')\n\n# Set the labels of the plot\nax.set_xlabel('Predicted Score')\nax.set_ylabel('Helpful Score')\n\n# Set the legend of the plot\nax.legend(['Result Score', 'Rating Score'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Set the title of the plot\nax.set_title('3D-bar')\n\n# Draw a circle with a radius of 1 centered at (0,0)\ncircle = plt.Circle((0,0), 1, color='black', fill=False)\nax.add_artist(circle)\n\n# Draw a rectangle with a width of 2 and height of 1 centered at (0,0)\nrectangle = plt.Rectangle((-1,-0.5), 2, 1, color='red')\nax.add_artist(rectangle)\n\n# Draw a polygon with vertices at (0,0), (1,1), (-1,1)\npolygon = plt.Polygon([(0,0), (1,1), (-1,1)], color='blue')\nax.add_artist(polygon)\n\n# Draw a line from (0,0) to (1,1)\nline = plt.Line2D([0,1], [0,1], color='green')\nax.add_artist(line)\n\n# Draw a scatter plot with points at (0,0), (1,1), (-1,1)\nscatter = plt.scatter([0,1,-1], [0,1,1], color='yellow')\nax.add_artist(scatter)\n\n# Draw a pie chart with slices at (0,0), (1,1), (-1,1)\npie = plt.pie([1,1,1], colors=['red', 'blue', 'green'], startangle=90)\nax.add_artist(pie[0])\n\n# Draw a heatmap with values at (0,0), (1,1), (-1,1)\nheatmap = plt.imshow([[1,1,1],[1,1,1],[1,1,1]], cmap='hot', interpolation='nearest')\nax.add_artist(heatmap)\n\n# Draw a radar chart with values at (0,0), (1,1), (-1,1)\nradar = plt.polar([0,1,2*np.pi], [1,1,1], color='blue')\nax.add_artist(radar[0])\n\n# Draw a bubble chart with values at (0,0), (1,1), (-1,1)\nbubble = plt.scatter([0,1,-1], [0,1,1], s=[100,200,300], c='orange')\nax.add_artist(bubble)\n\n# Draw a histogram with values at (0,0), (1,1), (-1,1)\nhistogram = plt.hist([0,1,-1], bins=3, color='red')\nax.add_artist(histogram[0])\n\n# Draw a boxplot with values at (0,0), (1,1), (-1,1)\nboxplot = plt.boxplot([0,1,-1], vert=False, patch_artist=True, boxprops=dict(facecolor='blue'))\nax.add_artist(boxplot['boxes'][0])\n\n# Draw a treemap with values at (0,0), (1,1), (-1,1)\ntreemap = plt.treemap([0,1,-1], path=['/home/user'], color='red')\nax.add_artist(treemap)\n\n# Draw a rose diagram with values at (0,0), (1,1), (-1,1)\nrose = plt.polar([0,1,2*np.pi], [1,1,1], color='blue')\nax.add_artist(rose[0])\n\n# Draw a sunburst chart with values at (0,0), (1,1), (-1,1)\nsunburst = plt.sunburst([0,1,-1], labels=['A','B','C'], color='red')\nax.add_artist(sunburst)\n\n# Draw a chord diagram with values at (0,0), (1,1), (-1,1)\nchord = plt.chord([0,1,-1], labels=['A','B','C'], color='red')\nax.add_artist(chord)\n\n# Draw a Sankey diagram with values at (0,0), (1,1), (-1,1)\nsankey = plt.sankey([0,1,-1], labels=['A','B','C'], color='red')\nax.add_artist(sankey)\n\n# Draw a scatter plot with values at (0,0), (1,1), (-1,1)\nscatter = plt.scatter([0,1,-1], [0,1,1], color='red')\nax.add_artist(scatter)\n\n# Draw a scatter plot with values at (0,0), (1,1), (-1,1)\nscatter = plt.scatter([0,1,-1], [0,1,1], color='red')\nax.add_artist(scatter)\n\n# Draw a scatter plot with values at (0,0), (1,1), (-1,1)\nscatter = plt.scatter([0,1,-1], [0,1,1], color='red')\nax.add_artist(scatter)\n\n# Draw a scatter plot with values at (0,0), (1,1), (-1,1)\nscatter = plt.scatter([0,1,-1], [0,1,1], color='red')\nax.add_artist(scatter)\n\n# Draw a scatter plot with values at (0,0), (1,1), (-1,1)\nscatter = plt.scatter([0,1,-1], [0,1,1], color='red')\nax.add_artist(scatter)\n\n# Draw a scatter plot with values at (0,0), (1,1), (-1,1)\nscatter = plt.scatter([0,1,-1], [0,1,1], color='red')\nax.add_artist(scatter)\n\n# Draw a scatter plot with values at (0,0), (1,1), (-1,1)\nscatter = plt.scatter([0,1,-1], [0,1,1], color='red')\nax.add_artist(scatter)\n\n# Draw a scatter plot with values at (0,0), (1,1), (-1,1)\nscatter = plt.scatter([0,1,-1], [0,1,1], color='red')\nax.add_artist(scatter)\n\n# Draw a scatter plot with values at (0,0), (1,1), (-1,1)\nscatter = plt.scatter([0,1,-1], [0,1,1], color='red')\nax.add_artist(scatter)\n\n# Draw a scatter plot with values at (0,0), (1,1), (-1,1)\nscatter = plt.scatter([0,1,-1], [0,1,1], color='red')\nax.add_artist(scatter)\n\n# Draw a scatter plot with values at (0,0), (1,1), (-1,1)\nscatter = plt.scatter([0,1,-1], [0,1,1], color='red')\nax.add_artist(scatter)\n\n# Draw a scatter plot with values at (0,0), (1,1), (-1,1)\nscatter = plt.scatter([0,1,-1], [0,1,1], color='red')\nax.add_artist(scatter)\n\n# Draw a scatter plot with values at (0,0), (1,1), (-1,1)\nscatter = plt.scatter([0,1,-1], [0,1,1], color='red')\nax.add_artist(scatter)\n\n# Draw a scatter plot with values at (0,0), (1,1), (-1,1)\nscatter = plt.scatter([0,1,-1], [0,1,1], color='red')\nax.add_artist(scatter)\n\n# Draw a scatter plot with values at (0,0), (1,1), (-1,1)\nscatter = plt.scatter([0,1,-1], [0,1,1], color='red')\nax.add_artist(scatter)\n\n# Draw a scatter plot with values at (0,0), (1,1), (-1,1)\nscatter = plt.scatter([0,1,-1], [0,1,1], color='red')\nax.add_artist(scatter)\n\n# Draw a scatter plot with values at (0,0), (1,1), (-1,1)\nscatter = plt.scatter([0,1,-1], [0,1,1], color='red')\nax.add_artist(scatter)\n\n# Draw a scatter plot with values at (0,0), (1,1), (-1,1)\nscatter = plt.scatter([0,1,-1], [0,1,1], color='red')\nax.add_artist(scatter)\n\n# Draw a scatter plot with values at (0,0), (1,1), (-1,1)\nscatter = plt.scatter([0,1,-1], [0,1,1], color='red')\nax.add_artist(scatter)\n\n# Draw a scatter plot with values at (0,0), (1,1), (-1,1)\nscatter = plt.scatter([0,1,-1], [0,1,1], color='red')\nax.add_artist(scatter)\n\n# Draw a scatter plot with values at (0,0), (1,1), (-1,1)\nscatter = plt.scatter([0,1,-1], [0,1,1], color='red')\nax.add_artist(scatter)\n\n# Draw a scatter plot with values at (0,0), (1,1), (-1,1)\nscatter = plt.scatter([0,1,-1], [0,1,1], color='red')\nax.add_artist(scatter)\n\n# Draw a scatter plot with values at (0,0), (1,1), (-1,1)\nscatter = plt.scatter([0,1,-1], [0,1,1], color='red')\nax.add_artist(scatter)\n\n# Draw a scatter plot with values at (0,0), (1,1), (-1,1)\nscatter = plt.scatter([0,1,-1], [0,1,1], color='red')\nax.add_artist(scatter)\n\n# Draw a scatter plot with values at (0,0), (1,1), (-1,1)\nscatter = plt.scatter([0,1,-1], [0,1,1], color='red')\nax.add_artist(scatter)\n\n# Draw a scatter plot with values at (0,0), (1,1), (-1,1)\nscatter = plt.scatter([0,1,-1], [0,1,1], color='red')\nax.add_artist(scatter)\n\n# Draw a scatter plot with values at (0,0), (1,1), (-1,1)\nscatter = plt.scatter([0,1,-1], [0,1,1], color='red')\nax.add_artist(scatter)\n\n# Draw a scatter plot with values at (0,0), (1,1), (-1,1)\nscatter = plt.scatter([0,1,-1], [0,1,1], color='red')\nax.add_artist(scatter)\n\n# Draw a scatter plot with values at (0,0), (1,1), (-1,1)\nscatter = plt.scatter([0,1,-1], [0,1,1], color='red')\nax.add_artist(scatter)\n\n# Draw a scatter plot with values at (0,0), (1,1), (-1,1)\nscatter = plt.scatter([0,1,-1], [0,1,1], color='red')\nax.add_artist(scatter)\n\n# Draw a scatter plot with values at (0,0), (1,1), (-1,1)\nscatter = plt.scatter([0,1,-1], [0,1,1], color='red')\nax.add_artist(scatter)\n\n# Draw a scatter plot with values at (0,0), (1,1), (-1,1)\nscatter = plt.scatter([0,1,-1], [0,1,1], color='red')\nax.add_artist(scatter)\n\n# Draw a scatter plot with values at (0,0), (1,1), (-1,1)\nscatter = plt.scatter([0,1,-1], [0,1,1], color='red')\nax.add_artist(scatter)\n\n# Draw a scatter plot with values at (0,0), (1,1), (-1,1)\nscatter = plt.scatter([0,1,-1], [0,1,1], color='red')\nax.add_artist(scatter)\n\n# Draw a scatter plot with values at (0,0), (1,1), (-1,1)\nscatter = plt.scatter([0,1,-1], [0,1,1], color='red')\nax.add_artist(scatter)\n\n# Draw a scatter plot with values at (0,0), (1,1), (-1,1)\nscatter = plt.scatter([0,1,-1], [0,1,1], color='red')\nax.add_artist(scatter)\n\n# Draw a scatter plot with values at (0,0), (1,1), (-1,1)\nscatter = plt.scatter([0,1,-1], [0,1,1], color='red')\nax.add_artist(scatter)\n\n# Draw a scatter plot with values at (0,0), (1,1), (-1,1)\nscatter = plt.scatter([0,1,-1], [0,1,1], color='red')\nax.add_artist(scatter)\n\n# Draw a scatter plot with values at (0,0), (1,1), (-1,1)\nscatter = plt.scatter([0,1,-1], [0,1,1], color='red')\nax.add_artist(scatter)\n\n# Draw a scatter plot with values at (0,0), (1,1), (-1,1)\nscatter = plt.scatter([0,1,-1], [0,1,1], color='red')\nax.add_artist(scatter)\n\n# Draw a scatter plot with values at (0,0), (1,1), (-1,1)\nscatter = plt.scatter([0,1,-1], [0,1,1], color='red')\nax.add_artist(scatter)\n\n# Draw a scatter plot with values at (0,0), (1,1), (-1,1)\nscatter = plt.scatter([0,1,-1], [0,1,1], color='red')\nax.add_artist(scatter)\n\n# Draw a scatter plot with values at (0,0), (1,1), (-1,1)\nscatter = plt.scatter([0,1,-1], [0,1,1], color='red')\nax.add_artist(scatter)\n\n# Draw a scatter plot with values at (0,0), (1,1), (-1,1)\nscatter = plt.scatter([0,1,-1], [0,1,1], color='red')\nax.add_artist(scatter)\n\n# Draw a scatter plot with values at (0,0), (1,1), (-1,1)\nscatter = plt.scatter([0,1,-1], [0,1,1], color='red')\nax.add_artist(scatter)\n\n# Draw a scatter plot with values at (0,0), (1,1), (-1,1)\nscatter = plt.scatter([0,1,-1], [0,1,1], color='red')\nax.add_artist(scatter)\n\n# Draw a scatter plot with values at (0,0), (1,1), (-1,1)\nscatter = plt.scatter([0,1,-1], [0,1,1], color='red')\nax.add_artist(scatter)\n\n# Draw a scatter plot with values at (0,0), (1,1), (-1,1)\nscatter = plt.scatter([0,1,-1], [0,1,1], color='red')\nax.add_artist(scatter)\n\n# Draw a scatter plot with values at (0,0), (1,1), (-1,1)\nscatter = plt.scatter([0,1,-1], [0,1,1], color='red')\nax.add_artist(scatter)\n\n# Draw a scatter plot with values at (0,0), (1,1), (-1,1)\nscatter = plt.scatter([0,1,-1], [0,1,1], color='red')\nax.add_artist(scatter)\n\n# Draw a scatter plot with values at (0,0), (1,1), (-1,1)\nscatter = plt.scatter([0,1,-1], [0,1,1], color='red')\nax.add_artist(scatter)\n\n# Draw a scatter plot with values at (0,0), (1,1), (-1,1)\nscatter = plt.scatter([0,1,-1], [0,1,1], color='red')\nax.add_artist(scatter)\n\n# Draw a scatter plot with values at (0,0), (1,1), (-1,1)\nscatter = plt.scatter([0,1,-1], [0,1,1], color='red')\nax.add_artist(scatter)\n\n# Draw a scatter plot with values at (0,0), (1,1), (-1,1)\nscatter = plt.scatter([0,1,-1], [0,1,1], color='red')\nax.add_artist(scatter)\n\n# Draw a scatter plot with values at (0,0), (1,1), (-1,1)\nscatter = plt.scatter([0,1,-1], [0,1,1], color='red')\nax.add_artist(scatter)\n\n# Draw a scatter plot with values at (0,0), (1,1), (-1,1)\nscatter = plt.scatter([0,1,-1], [0,1,1], color='red')\nax.add_artist(scatter)\n\n# Draw a scatter plot with values at (0,0), (1,1), (-1,1)\nscatter = plt.scatter([0,1,-1], [0,1,1], color='red')\nax.add_artist(scatter)\n\n# Draw a scatter plot with values at (0,0), (1,1), (-1,1)\nscatter = plt.scatter([0,1,-1], [0,1,1], color='red')\nax.add_artist(scatter)\n\n# Draw a scatter plot with values at (0,0), (1,1), (-1,1)\nscatter = plt.scatter([0,1,-1], [0,1,1], color='red')\nax.add_artist(scatter)\n\n# Draw a scatter plot with values at (0,0), (1,1), (-1,1)\nscatter = plt.scatter([0,1,-1], [0,1,1], color='red')\nax.add_artist(scatter)\n\n# Draw a scatter plot with values at (0,0), (1,1), (-1,1)\nscatter = plt.scatter([0,1,-1], [0,1,1], color='red')\nax.add_artist(scatter)\n\n# Draw a scatter plot with values at (0,0), (1,1), (-1,1)\nscatter = plt.scatter([0,1,-1], [0,1,1], color='red')\nax.add_artist(scatter)\n\n# Draw a scatter plot with values at (0,0), (1,1),"}
{"file": "dataset/ori_500/radar_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(5, 5))\n\n# Set the title of the plot\nax.set_title('Imputation')\n\n# Draw a circle\ncircle = plt.Circle((0.5, 0.5), 0.4, color='black', fill=False)\nax.add_artist(circle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='blue', fill=False)\nax.add_artist(rectangle)\n\n# Draw a triangle\ntriangle = plt.Polygon([[0.3, 0.7], [0.7, 0.7], [0.5, 0.3]], color='red', fill=False)\nax.add_artist(triangle)\n\n# Draw a pentagon\npentagon = plt.Polygon([[0.1, 0.9], [0.3, 0.8], [0.4, 0.6], [0.2, 0.4], [0.1, 0.5]], color='green', fill=False)\nax.add_artist(pentagon)\n\n# Draw a hexagon\nhexagon = plt.Polygon([[0.6, 0.9], [0.8, 0.8], [0.9, 0.6], [0.8, 0.4], [0.6, 0.4], [0.5, 0.6]], color='yellow', fill=False)\nax.add_artist(hexagon)\n\n# Draw a star\nstar = plt.Polygon([[0.5, 0.1], [0.4, 0.3], [0.6, 0.3], [0.5, 0.5], [0.3, 0.3], [0.5, 0.7], [0.7, 0.3]], color='purple', fill=False)\nax.add_artist(star)\n\n# Draw a spiral\ntheta = np.linspace(0, 2*np.pi, 100)\nr = theta**0.5\nax.plot(theta, r, color='orange')\n\n# Set the aspect ratio to be equal\nax.set_aspect('equal')\n\n# Remove the axes\nax.axis('off')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 7.0))\n\n# Set the background color of the plot\nax.set_facecolor('white')\n\n# Draw a circle around the plot\ncircle = plt.Circle((0.5, 0.5), 0.4, color='black', fill=False)\nax.add_artist(circle)\n\n# Define the data for the plot\ndata = [72.9, 66.3, 67.2, 42.9, 65.0, 49.3, 55.6, 43.1, 55.6, 49.5, 62.8, 43.1]\n\n# Plot the data\nax.plot(data, 'ro-')\n\n# Set the title of the plot\nax.set_title('My Plot')\n\n# Set the x-axis and y-axis labels\nax.set_xlabel('X-axis')\nax.set_ylabel('Y-axis')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(12, 4))\n\n# Set the title of the plot\nax.set_title('Model-Basedness')\n\n# Set the x-axis label\nax.set_xlabel('Value')\n\n# Set the y-axis label\nax.set_ylabel('Model')\n\n# Create a scatter plot\nax.scatter([0, 1], [0, 1], color='blue')\n\n# Create a rectangle patch\nrect = plt.Rectangle((0, 0), 1, 1, linewidth=1, edgecolor='r', facecolor='none')\nax.add_patch(rect)\n\n# Create a line plot\nax.plot([0, 1], [0, 1], color='orange')\n\n# Create a bar chart\nax.bar([0, 1], [0, 1], color='green')\n\n# Create a histogram\nax.hist([0, 1], bins=10, color='purple')\n\n# Create a pie chart\nax.pie([0.5, 0.5], colors=['red', 'blue'])\n\n# Create a stem plot\nax.stem([0, 1], [0, 1], use_line_collection=True)\n\n# Create a step plot\nax.step([0, 1], [0, 1], where='post')\n\n# Create a violin plot\nax.violinplot([0, 1])\n\n# Create a box plot\nax.boxplot([0, 1])\n\n# Create a heatmap\nax.imshow([[0, 1], [1, 0]], cmap='hot', interpolation='nearest')\n\n# Create a contour plot\nax.contour([[0, 1], [1, 0]])\n\n# Create a contourf plot\nax.contourf([[0, 1], [1, 0]])\n\n# Create a quiver plot\nax.quiver([0, 1], [0, 1], [0, 1], [0, 1])\n\n# Create a streamplot\nax.streamplot([0, 1], [0, 1], [0, 1], [0, 1])\n\n# Create a polar plot\nax.polar()\n\n# Create a smith plot\nax.smith()\n\n# Create a ternary plot\nax.ternary()\n\n# Create a hexbin plot\nax.hexbin([0, 1], [0, 1])\n\n# Create a trisurf plot\nax.trisurf([0, 1], [0, 1], [0, 1])\n\n# Create a tricontour plot\nax.tricontour([0, 1], [0, 1], [0, 1])\n\n# Create a tricontourf plot\nax.tricontourf([0, 1], [0, 1], [0, 1])\n\n# Create a trisurf plot\nax.trisurf([0, 1], [0, 1], [0, 1])\n\n# Create a tricontour plot\nax.tricontour([0, 1], [0, 1], [0, 1])\n\n# Create a tricontourf plot\nax.tricontourf([0, 1], [0, 1], [0, 1])\n\n# Create a trisurf plot\nax.trisurf([0, 1], [0, 1], [0, 1])\n\n# Create a tricontour plot\nax.tricontour([0, 1], [0, 1], [0, 1])\n\n# Create a tricontourf plot\nax.tricontourf([0, 1], [0, 1], [0, 1])\n\n# Create a trisurf plot\nax.trisurf([0, 1], [0, 1], [0, 1])\n\n# Create a tricontour plot\nax.tricontour([0, 1], [0, 1], [0, 1])\n\n# Create a tricontourf plot\nax.tricontourf([0, 1], [0, 1], [0, 1])\n\n# Create a trisurf plot\nax.trisurf([0, 1], [0, 1], [0, 1])\n\n# Create a tricontour plot\nax.tricontour([0, 1], [0, 1], [0, 1])\n\n# Create a tricontourf plot\nax.tricontourf([0, 1], [0, 1], [0, 1])\n\n# Create a trisurf plot\nax.trisurf([0, 1], [0, 1], [0, 1])\n\n# Create a tricontour plot\nax.tricontour([0, 1], [0, 1], [0, 1])\n\n# Create a tricontourf plot\nax.tricontourf([0, 1], [0, 1], [0, 1])\n\n# Create a trisurf plot\nax.trisurf([0, 1], [0, 1], [0, 1])\n\n# Create a tricontour plot\nax.tricontour([0, 1], [0, 1], [0, 1])\n\n# Create a tricontourf plot\nax.tricontourf([0, 1], [0, 1], [0, 1])\n\n# Create a trisurf plot\nax.trisurf([0, 1], [0, 1], [0, 1])\n\n# Create a tricontour plot\nax.tricontour([0, 1], [0, 1], [0, 1])\n\n# Create a tricontourf plot\nax.tricontourf([0, 1], [0, 1], [0, 1])\n\n# Create a trisurf plot\nax.trisurf([0, 1], [0, 1], [0, 1])\n\n# Create a tricontour plot\nax.tricontour([0, 1], [0, 1], [0, 1])\n\n# Create a tricontourf plot\nax.tricontourf([0, 1], [0, 1], [0, 1])\n\n# Create a trisurf plot\nax.trisurf([0, 1], [0, 1], [0, 1])\n\n# Create a tricontour plot\nax.tricontour([0, 1], [0, 1], [0, 1])\n\n# Create a tricontourf plot\nax.tricontourf([0, 1], [0, 1], [0, 1])\n\n# Create a trisurf plot\nax.trisurf([0, 1], [0, 1], [0, 1])\n\n# Create a tricontour plot\nax.tricontour([0, 1], [0, 1], [0, 1])\n\n# Create a tricontourf plot\nax.tricontourf([0, 1], [0, 1], [0, 1])\n\n# Create a trisurf plot\nax.trisurf([0, 1], [0, 1], [0, 1])\n\n# Create a tricontour plot\nax.tricontour([0, 1], [0, 1], [0, 1])\n\n# Create a tricontourf plot\nax.tricontourf([0, 1], [0, 1], [0, 1])\n\n# Create a trisurf plot\nax.trisurf([0, 1], [0, 1], [0, 1])\n\n# Create a tricontour plot\nax.tricontour([0, 1], [0, 1], [0, 1])\n\n# Create a tricontourf plot\nax.tricontourf([0, 1], [0, 1], [0, 1])\n\n# Create a trisurf plot\nax.trisurf([0, 1], [0, 1], [0, 1])\n\n# Create a tricontour plot\nax.tricontour([0, 1], [0, 1], [0, 1])\n\n# Create a tricontourf plot\nax.tricontourf([0, 1], [0, 1], [0, 1])\n\n# Create a trisurf plot\nax.trisurf([0, 1], [0, 1], [0, 1])\n\n# Create a tricontour plot\nax.tricontour([0, 1], [0, 1], [0, 1])\n\n# Create a tricontourf plot\nax.tricontourf([0, 1], [0, 1], [0, 1])\n\n# Create a trisurf plot\nax.trisurf([0, 1], [0, 1], [0, 1])\n\n# Create a tricontour plot\nax.tricontour([0, 1], [0, 1], [0, 1])\n\n# Create a tricontourf plot\nax.tricontourf([0, 1], [0, 1], [0, 1])\n\n# Create a trisurf plot\nax.trisurf([0, 1], [0, 1], [0, 1])\n\n# Create a tricontour plot\nax.tricontour([0, 1], [0, 1], [0, 1])\n\n# Create a tricontourf plot\nax.tricontourf([0, 1], [0, 1], [0, 1])\n\n# Create a trisurf plot\nax.trisurf([0, 1], [0, 1], [0, 1])\n\n# Create a tricontour plot\nax.tricontour([0, 1], [0, 1], [0, 1])\n\n# Create a tricontourf plot\nax.tricontourf([0, 1], [0, 1], [0, 1])\n\n# Create a trisurf plot\nax.trisurf([0, 1], [0, 1], [0, 1])\n\n# Create a tricontour plot\nax.tricontour([0, 1], [0, 1], [0, 1])\n\n# Create a tricontourf plot\nax.tricontourf([0, 1], [0, 1], [0, 1])\n\n# Create a trisurf plot\nax.trisurf([0, 1], [0, 1], [0, 1])\n\n# Create a tricontour plot\nax.tricontour([0, 1], [0, 1], [0, 1])\n\n# Create a tricontourf plot\nax.tricontourf([0, 1], [0, 1], [0, 1])\n\n# Create a trisurf plot\nax.trisurf([0, 1], [0, 1], [0, 1])\n\n# Create a tricontour plot\nax.tricontour([0, 1], [0, 1], [0, 1])\n\n# Create a tricontourf plot\nax.tricontourf([0, 1], [0, 1], [0, 1])\n\n# Create a trisurf plot\nax.trisurf([0, 1], [0, 1], [0, 1])\n\n# Create a tricontour plot\nax.tricontour([0, 1], [0, 1], [0, 1])\n\n# Create a tricontourf plot\nax.tricontourf([0, 1], [0, 1], [0, 1])\n\n# Create a trisurf plot\nax.trisurf([0, 1], [0, 1], [0, 1])\n\n# Create a tricontour plot\nax.tricontour([0, 1], [0, 1], [0, 1])\n\n# Create a tricontourf plot\nax.tricontourf([0, 1], [0, 1], [0, 1])\n\n# Create a trisurf plot\nax.trisurf([0, 1], [0, 1], [0, 1])\n\n# Create a tricontour plot\nax.tricontour([0, 1], [0, 1], [0, 1])\n\n# Create a tricontourf plot\nax.tricontourf([0, 1], [0, 1], [0, 1])\n\n# Create a trisurf plot\nax.trisurf([0, 1], [0, 1], [0, 1])\n\n# Create a tricontour plot\nax.tricontour([0, 1], [0, 1], [0, 1])\n\n# Create a tricontourf plot\nax.tricontourf([0, 1], [0, 1], [0, 1])\n\n# Create a trisurf plot\nax.trisurf([0, 1], [0, 1], [0, 1])\n\n# Create a tricontour plot\nax.tricontour([0, 1], [0, 1], [0, 1])\n\n# Create a tricontourf plot\nax.tricontourf([0, 1], [0, 1], [0, 1])\n\n# Create a trisurf plot\nax.trisurf([0, 1], [0, 1], [0, 1])\n\n# Create a tricontour plot\nax.tricontour([0, 1], [0, 1], [0, 1])\n\n# Create a tricontourf plot\nax.tricontourf([0, 1], [0, 1], [0, 1])\n\n# Create a trisurf plot\nax.trisurf([0, 1], [0, 1], [0, 1])\n\n# Create a tricontour plot\nax.tricontour([0, 1], [0, 1], [0, 1])\n\n# Create a tricontourf plot\nax.tricontourf([0, 1], [0, 1], [0, 1])\n\n# Create a trisurf plot\nax.trisurf([0, 1], [0, 1], [0, 1])\n\n# Create a tricontour plot\nax.tricontour([0, 1], [0, 1], [0, 1])\n\n# Create a tricontourf plot\nax.tricontourf([0, 1], [0, 1], [0, 1])\n\n# Create a trisurf plot\nax.trisurf([0, 1], [0, 1], [0, 1])\n\n# Create a tricontour plot\nax.tricontour([0, 1], [0, 1], [0, 1])\n\n# Create a tricontourf plot\nax.tricontourf([0, 1], [0, 1], [0, 1])\n\n# Create a trisurf plot\nax.trisurf([0, 1], [0, 1], [0, 1])\n\n# Create a tricontour plot\nax.tricontour([0, 1], [0, 1], [0, 1])\n\n# Create a tricontourf plot\nax.tricontourf([0, 1], [0, 1], [0, 1])\n\n# Create a trisurf plot\nax.trisurf([0, 1], [0, 1], [0, 1])\n\n# Create a tricontour plot\nax.tricontour([0, 1], [0, 1], [0, 1])\n\n# Create a tricontourf plot\nax.tricontourf([0, 1], [0, 1], [0, 1])\n\n# Create a trisurf plot\nax.trisurf([0, 1], [0, 1], [0, 1])\n\n# Create a tricontour plot\nax.tricontour([0, 1], [0, 1], [0, 1])\n\n# Create a tricontourf plot\nax.tricontourf([0, 1], [0, 1], [0, 1])\n\n# Create a trisurf plot\nax.trisurf([0, 1], [0, 1], [0, 1])\n\n# Create a tricontour plot\nax.tricontour([0, 1], [0, 1], [0, 1])\n\n# Create a tricontourf plot\nax.tricontourf([0, 1], [0, 1], [0, 1])\n\n# Create a trisurf plot\nax.trisurf([0, 1], [0, 1], [0, 1])\n\n# Create a tricontour plot\nax.tricontour([0, 1], [0, 1], [0, 1])\n\n# Create a tricontourf plot\nax.tricontourf([0, 1], [0, 1], [0, 1])\n\n# Create a trisurf plot\nax.trisurf([0, 1], [0, 1], [0, 1])\n\n# Create a tricontour plot\nax.tricontour([0, 1], [0, 1], [0, 1])\n\n# Create a tricontourf plot\nax.tricontourf([0, 1], [0, 1], [0, 1])\n\n# Create a trisurf plot\nax.trisurf([0, 1], [0, 1], [0, 1])\n\n# Create a tricontour plot\nax.tricontour([0, 1], [0, 1], [0, 1])\n\n# Create a tricontourf plot\nax.tricontourf([0, 1], [0, 1], [0, 1])\n\n# Create a trisurf plot\nax.trisurf([0, 1], [0, 1], [0, 1])\n\n# Create a tricontour plot\nax.tricontour([0, 1], [0, 1], [0, 1])\n\n# Create a tricontourf plot\nax.tricontourf([0, 1], [0, 1], [0, 1])\n\n# Create a trisurf plot\nax.trisurf([0, 1], [0, 1], [0, 1])\n\n# Create a tricontour plot\nax.tricontour([0, 1], [0, 1], [0, 1])\n\n# Create a tricontourf plot\nax.tricontourf([0, 1], [0, 1], [0, 1])\n\n# Create"}
{"file": "dataset/ori_500/scatter_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Set the title of the plot\nax.set_title('ImageNet-1K Linear Probing')\n\n# Set the x-axis label\nax.set_xlabel('Pre-training GPU Hours')\n\n# Set the y-axis label\nax.set_ylabel('Accuracy [%]')\n\n# Set the x-axis limits\nax.set_xlim(0, 4000)\n\n# Set the y-axis limits\nax.set_ylim(75, 90)\n\n# Set the x-axis ticks\nax.set_xticks([0, 1000, 2000, 3000, 4000])\n\n# Set the y-axis ticks\nax.set_yticks([75, 77, 79, 81, 83, 85, 87, 89])\n\n# Draw a line graph\nax.plot([0, 1000, 2000, 3000, 4000], [85, 83, 81, 79, 77], color='green', linestyle='-', linewidth=2)\n\n# Draw a scatter plot\nax.scatter([0, 1000, 2000, 3000, 4000], [85, 83, 81, 79, 77], color='black', s=100)\n\n# Draw a circle\ncircle = plt.Circle((2000, 81), 100, color='red', fill=False)\nax.add_artist(circle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((1000, 79), 1000, 2, color='blue', fill=False)\nax.add_artist(rectangle)\n\n# Draw a triangle\ntriangle = plt.Polygon([[0, 85], [500, 85], [250, 75]], color='orange', fill=False)\nax.add_artist(triangle)\n\n# Draw a star\nstar = plt.Polygon([[0, 85], [200, 85], [100, 75], [0, 80], [100, 80]], color='purple', fill=False)\nax.add_artist(star)\n\n# Draw a diamond\ndiamond = plt.Polygon([[0, 85], [200, 85], [100, 75], [0, 80], [100, 80]], color='pink', fill=False)\nax.add_artist(diamond)\n\n# Draw a heart\nheart = plt.Polygon([[0, 85], [200, 85], [100, 75], [0, 80], [100, 80]], color='brown', fill=False)\nax.add_artist(heart)\n\n# Draw a square\nsquare = plt.Rectangle((0, 85), 100, 100, color='cyan', fill=False)\nax.add_artist(square)\n\n# Draw a pentagon\npentagon = plt.Polygon([[0, 85], [200, 85], [100, 75], [0, 80], [100, 80]], color='magenta', fill=False)\nax.add_artist(pentagon)\n\n# Draw a hexagon\nhexagon = plt.Polygon([[0, 85], [200, 85], [100, 75], [0, 80], [100, 80]], color='yellow', fill=False)\nax.add_artist(hexagon)\n\n# Draw a heptagon\nheptagon = plt.Polygon([[0, 85], [200, 85], [100, 75], [0, 80], [100, 80]], color='grey', fill=False)\nax.add_artist(heptagon)\n\n# Draw an octagon\noctagon = plt.Polygon([[0, 85], [200, 85], [100, 75], [0, 80], [100, 80]], color='white', fill=False)\nax.add_artist(octagon)\n\n# Draw a nonagon\nnonagon = plt.Polygon([[0, 85], [200, 85], [100, 75], [0, 80], [100, 80]], color='black', fill=False)\nax.add_artist(nonagon)\n\n# Draw a decagon\ndecagon = plt.Polygon([[0, 85], [200, 85], [100, 75], [0, 80], [100, 80]], color='red', fill=False)\nax.add_artist(decagon)\n\n# Draw a dodecagon\ndodecagon = plt.Polygon([[0, 85], [200, 85], [100, 75], [0, 80], [100, 80]], color='green', fill=False)\nax.add_artist(dodecagon)\n\n# Draw a trapezoid\ntrapezoid = plt.Polygon([[0, 85], [200, 85], [100, 75], [0, 80], [100, 80]], color='blue', fill=False)\nax.add_artist(trapezoid)\n\n# Draw a parallelogram\nparallelogram = plt.Polygon([[0, 85], [200, 85], [100, 75], [0, 80], [100, 80]], color='orange', fill=False)\nax.add_artist(parallelogram)\n\n# Draw a rhombus\nrhombus = plt.Polygon([[0, 85], [200, 85], [100, 75], [0, 80], [100, 80]], color='purple', fill=False)\nax.add_artist(rhombus)\n\n# Draw a kite\nkite = plt.Polygon([[0, 85], [200, 85], [100, 75], [0, 80], [100, 80]], color='pink', fill=False)\nax.add_artist(kite)\n\n# Draw a ellipse\nellipse = plt.Ellipse((2000, 81), 100, 50, color='brown', fill=False)\nax.add_artist(ellipse)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((1000, 79), 1000, 2, color='cyan', fill=False)\nax.add_artist(rectangle)\n\n# Draw a triangle\ntriangle = plt.Polygon([[0, 85], [500, 85], [250, 75]], color='magenta', fill=False)\nax.add_artist(triangle)\n\n# Draw a star\nstar = plt.Polygon([[0, 85], [200, 85], [100, 75], [0, 80], [100, 80]], color='yellow', fill=False)\nax.add_artist(star)\n\n# Draw a diamond\ndiamond = plt.Polygon([[0, 85], [200, 85], [100, 75], [0, 80], [100, 80]], color='grey', fill=False)\nax.add_artist(diamond)\n\n# Draw a heart\nheart = plt.Polygon([[0, 85], [200, 85], [100, 75], [0, 80], [100, 80]], color='white', fill=False)\nax.add_artist(heart)\n\n# Draw a square\nsquare = plt.Rectangle((0, 85), 100, 100, color='black', fill=False)\nax.add_artist(square)\n\n# Draw a pentagon\npentagon = plt.Polygon([[0, 85], [200, 85], [100, 75], [0, 80], [100, 80]], color='red', fill=False)\nax.add_artist(pentagon)\n\n# Draw a hexagon\nhexagon = plt.Polygon([[0, 85], [200, 85], [100, 75], [0, 80], [100, 80]], color='green', fill=False)\nax.add_artist(hexagon)\n\n# Draw a heptagon\nheptagon = plt.Polygon([[0, 85], [200, 85], [100, 75], [0, 80], [100, 80]], color='blue', fill=False)\nax.add_artist(heptagon)\n\n# Draw an octagon\noctagon = plt.Polygon([[0, 85], [200, 85], [100, 75], [0, 80], [100, 80]], color='orange', fill=False)\nax.add_artist(octagon)\n\n# Draw a nonagon\nnonagon = plt.Polygon([[0, 85], [200, 85], [100, 75], [0, 80], [100, 80]], color='purple', fill=False)\nax.add_artist(nonagon)\n\n# Draw a decagon\ndecagon = plt.Polygon([[0, 85], [200, 85], [100, 75], [0, 80], [100, 80]], color='pink', fill=False)\nax.add_artist(decagon)\n\n# Draw a dodecagon\ndodecagon = plt.Polygon([[0, 85], [200, 85], [100, 75], [0, 80], [100, 80]], color='brown', fill=False)\nax.add_artist(dodecagon)\n\n# Draw a trapezoid\ntrapezoid = plt.Polygon([[0, 85], [200, 85], [100, 75], [0, 80], [100, 80]], color='cyan', fill=False)\nax.add_artist(trapezoid)\n\n# Draw a parallelogram\nparallelogram = plt.Polygon([[0, 85], [200, 85], [100, 75], [0, 80], [100, 80]], color='magenta', fill=False)\nax.add_artist(parallelogram)\n\n# Draw a rhombus\nrhombus = plt.Polygon([[0, 85], [200, 85], [100, 75], [0, 80], [100, 80]], color='yellow', fill=False)\nax.add_artist(rhombus)\n\n# Draw a kite\nkite = plt.Polygon([[0, 85], [200, 85], [100, 75], [0, 80], [100, 80]], color='grey', fill=False)\nax.add_artist(kite)\n\n# Draw a ellipse\nellipse = plt.Ellipse((2000, 81), 100, 50, color='white', fill=False)\nax.add_artist(ellipse)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((1000, 79), 1000, 2, color='black', fill=False)\nax.add_artist(rectangle)\n\n# Draw a triangle\ntriangle = plt.Polygon([[0, 85], [500, 85], [250, 75]], color='red', fill=False)\nax.add_artist(triangle)\n\n# Draw a star\nstar = plt.Polygon([[0, 85], [200, 85], [100, 75], [0, 80], [100, 80]], color='green', fill=False)\nax.add_artist(star)\n\n# Draw a diamond\ndiamond = plt.Polygon([[0, 85], [200, 85], [100, 75], [0, 80], [100, 80]], color='blue', fill=False)\nax.add_artist(diamond)\n\n# Draw a heart\nheart = plt.Polygon([[0, 85], [200, 85], [100, 75], [0, 80], [100, 80]], color='orange', fill=False)\nax.add_artist(heart)\n\n# Draw a square\nsquare = plt.Rectangle((0, 85), 100, 100, color='purple', fill=False)\nax.add_artist(square)\n\n# Draw a pentagon\npentagon = plt.Polygon([[0, 85], [200, 85], [100, 75], [0, 80], [100, 80]], color='pink', fill=False)\nax.add_artist(pentagon)\n\n# Draw a hexagon\nhexagon = plt.Polygon([[0, 85], [200, 85], [100, 75], [0, 80], [100, 80]], color='brown', fill=False)\nax.add_artist(hexagon)\n\n# Draw a heptagon\nheptagon = plt.Polygon([[0, 85], [200, 85], [100, 75], [0, 80], [100, 80]], color='cyan', fill=False)\nax.add_artist(heptagon)\n\n# Draw an octagon\noctagon = plt.Polygon([[0, 85], [200, 85], [100, 75], [0, 80], [100, 80]], color='magenta', fill=False)\nax.add_artist(octagon)\n\n# Draw a nonagon\nnonagon = plt.Polygon([[0, 85], [200, 85], [100, 75], [0, 80], [100, 80]], color='yellow', fill=False)\nax.add_artist(nonagon)\n\n# Draw a decagon\ndecagon = plt.Polygon([[0, 85], [200, 85], [100, 75], [0, 80], [100, 80]], color='grey', fill=False)\nax.add_artist(decagon)\n\n# Draw a dodecagon\ndodecagon = plt.Polygon([[0, 85], [200, 85], [100, 75], [0, 80], [100, 80]], color='white', fill=False)\nax.add_artist(dodecagon)\n\n# Draw a trapezoid\ntrapezoid = plt.Polygon([[0, 85], [200, 85], [100, 75], [0, 80], [100, 80]], color='black', fill=False)\nax.add_artist(trapezoid)\n\n# Draw a parallelogram\nparallelogram = plt.Polygon([[0, 85], [200, 85], [100, 75], [0, 80], [100, 80]], color='red', fill=False)\nax.add_artist(parallelogram)\n\n# Draw a rhombus\nrhombus = plt.Polygon([[0, 85], [200, 85], [100, 75], [0, 80], [100, 80]], color='green', fill=False)\nax.add_artist(rhombus)\n\n# Draw a kite\nkite = plt.Polygon([[0, 85], [200, 85], [100, 75], [0, 80], [100, 80]], color='blue', fill=False)\nax.add_artist(kite)\n\n# Draw a ellipse\nellipse = plt.Ellipse((2000, 81), 100, 50, color='orange', fill=False)\nax.add_artist(ellipse)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((1000, 79), 1000, 2, color='purple', fill=False)\nax.add_artist(rectangle)\n\n# Draw a triangle\ntriangle = plt.Polygon([[0, 85], [500, 85], [250, 75]], color='pink', fill=False)\nax.add_artist(triangle)\n\n# Draw a star\nstar = plt.Polygon([[0, 85], [200, 85], [100, 75], [0, 80], [100, 80]], color='brown', fill=False)\nax.add_artist(star)\n\n# Draw a diamond\ndiamond = plt.Polygon([[0, 85], [200, 85], [100, 75], [0, 80], [100, 80]], color='cyan', fill=False)\nax.add_artist(diamond)\n\n# Draw a heart\nheart = plt.Polygon([[0, 85], [200, 85], [100, 75], [0, 80], [100, 80]], color='magenta', fill=False)\nax.add_artist(heart)\n\n# Draw a square\nsquare = plt.Rectangle((0, 85), 100, 100, color='yellow', fill=False)\nax.add_artist(square)\n\n# Draw a pentagon\npentagon = plt.Polygon([[0, 85], [200, 85], [100, 75], [0, 80], [100, 80]], color='grey', fill=False)\nax.add_artist"}
{"file": "dataset/ori_500/scatter_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the background color of the plot\nax.set_facecolor('lightgray')\n\n# Set the tick labels for the x-axis\nax.set_xticks([10, 20, 30, 40, 50, 60])\nax.set_xticklabels(['10', '20', '30', '40', '50', '60'])\n\n# Set the tick labels for the y-axis\nax.set_yticks([0.55, 0.60, 0.65, 0.70, 0.75, 0.80, 0.85, 0.90])\nax.set_yticklabels(['0.55', '0.60', '0.65', '0.70', '0.75', '0.80', '0.85', '0.90'])\n\n# Set the title of the plot\nax.set_title('Bubble Size: Number of Anomalies Detected')\n\n# Set the label for the x-axis\nax.set_xlabel('Infernece Time (seconds)')\n\n# Set the label for the y-axis\nax.set_ylabel('Average Score')\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0, 0), 1, 1, fc='purple')\nax.add_patch(rect)\n\n# Add a circle to the plot\ncircle = plt.Circle((0, 0), 0.1, fc='blue')\nax.add_patch(circle)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0, 0), 1, 1, fc='green')\nax.add_patch(rect)\n\n# Add a circle to the plot\ncircle = plt.Circle((0, 0), 0.1, fc='yellow')\nax.add_patch(circle)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0, 0), 1, 1, fc='orange')\nax.add_patch(rect)\n\n# Add a circle to the plot\ncircle = plt.Circle((0, 0), 0.1, fc='red')\nax.add_patch(circle)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0, 0), 1, 1, fc='pink')\nax.add_patch(rect)\n\n# Add a circle to the plot\ncircle = plt.Circle((0, 0), 0.1, fc='brown')\nax.add_patch(circle)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0, 0), 1, 1, fc='cyan')\nax.add_patch(rect)\n\n# Add a circle to the plot\ncircle = plt.Circle((0, 0), 0.1, fc='magenta')\nax.add_patch(circle)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0, 0), 1, 1, fc='lime')\nax.add_patch(rect)\n\n# Add a circle to the plot\ncircle = plt.Circle((0, 0), 0.1, fc='silver')\nax.add_patch(circle)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0, 0), 1, 1, fc='gold')\nax.add_patch(rect)\n\n# Add a circle to the plot\ncircle = plt.Circle((0, 0), 0.1, fc='navy')\nax.add_patch(circle)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0, 0), 1, 1, fc='olive')\nax.add_patch(rect)\n\n# Add a circle to the plot\ncircle = plt.Circle((0, 0), 0.1, fc='teal')\nax.add_patch(circle)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0, 0), 1, 1, fc='coral')\nax.add_patch(rect)\n\n# Add a circle to the plot\ncircle = plt.Circle((0, 0), 0.1, fc='maroon')\nax.add_patch(circle)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0, 0), 1, 1, fc='aqua')\nax.add_patch(rect)\n\n# Add a circle to the plot\ncircle = plt.Circle((0, 0), 0.1, fc='fuchsia')\nax.add_patch(circle)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0, 0), 1, 1, fc='silver')\nax.add_patch(rect)\n\n# Add a circle to the plot\ncircle = plt.Circle((0, 0), 0.1, fc='gold')\nax.add_patch(circle)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0, 0), 1, 1, fc='navy')\nax.add_patch(rect)\n\n# Add a circle to the plot\ncircle = plt.Circle((0, 0), 0.1, fc='olive')\nax.add_patch(circle)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0, 0), 1, 1, fc='teal')\nax.add_patch(rect)\n\n# Add a circle to the plot\ncircle = plt.Circle((0, 0), 0.1, fc='coral')\nax.add_patch(circle)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0, 0), 1, 1, fc='maroon')\nax.add_patch(rect)\n\n# Add a circle to the plot\ncircle = plt.Circle((0, 0), 0.1, fc='aqua')\nax.add_patch(circle)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0, 0), 1, 1, fc='fuchsia')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0, 0), 1, 1, fc='silver')\nax.add_patch(rect)\n\n# Add a circle to the plot\ncircle = plt.Circle((0, 0), 0.1, fc='gold')\nax.add_patch(circle)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0, 0), 1, 1, fc='navy')\nax.add_patch(rect)\n\n# Add a circle to the plot\ncircle = plt.Circle((0, 0), 0.1, fc='olive')\nax.add_patch(circle)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0, 0), 1, 1, fc='teal')\nax.add_patch(rect)\n\n# Add a circle to the plot\ncircle = plt.Circle((0, 0), 0.1, fc='coral')\nax.add_patch(circle)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0, 0), 1, 1, fc='maroon')\nax.add_patch(rect)\n\n# Add a circle to the plot\ncircle = plt.Circle((0, 0), 0.1, fc='aqua')\nax.add_patch(circle)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0, 0), 1, 1, fc='fuchsia')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0, 0), 1, 1, fc='silver')\nax.add_patch(rect)\n\n# Add a circle to the plot\ncircle = plt.Circle((0, 0), 0.1, fc='gold')\nax.add_patch(circle)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0, 0), 1, 1, fc='navy')\nax.add_patch(rect)\n\n# Add a circle to the plot\ncircle = plt.Circle((0, 0), 0.1, fc='olive')\nax.add_patch(circle)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0, 0), 1, 1, fc='teal')\nax.add_patch(rect)\n\n# Add a circle to the plot\ncircle = plt.Circle((0, 0), 0.1, fc='coral')\nax.add_patch(circle)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0, 0), 1, 1, fc='maroon')\nax.add_patch(rect)\n\n# Add a circle to the plot\ncircle = plt.Circle((0, 0), 0.1, fc='aqua')\nax.add_patch(circle)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0, 0), 1, 1, fc='fuchsia')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0, 0), 1, 1, fc='silver')\nax.add_patch(rect)\n\n# Add a circle to the plot\ncircle = plt.Circle((0, 0), 0.1, fc='gold')\nax.add_patch(circle)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0, 0), 1, 1, fc='navy')\nax.add_patch(rect)\n\n# Add a circle to the plot\ncircle = plt.Circle((0, 0), 0.1, fc='olive')\nax.add_patch(circle)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0, 0), 1, 1, fc='teal')\nax.add_patch(rect)\n\n# Add a circle to the plot\ncircle = plt.Circle((0, 0), 0.1, fc='coral')\nax.add_patch(circle)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0, 0), 1, 1, fc='maroon')\nax.add_patch(rect)\n\n# Add a circle to the plot\ncircle = plt.Circle((0, 0), 0.1, fc='aqua')\nax.add_patch(circle)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0, 0), 1, 1, fc='fuchsia')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0, 0), 1, 1, fc='silver')\nax.add_patch(rect)\n\n# Add a circle to the plot\ncircle = plt.Circle((0, 0), 0.1, fc='gold')\nax.add_patch(circle)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0, 0), 1, 1, fc='navy')\nax.add_patch(rect)\n\n# Add a circle to the plot\ncircle = plt.Circle((0, 0), 0.1, fc='olive')\nax.add_patch(circle)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0, 0), 1, 1, fc='teal')\nax.add_patch(rect)\n\n# Add a circle to the plot\ncircle = plt.Circle((0, 0), 0.1, fc='coral')\nax.add_patch(circle)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0, 0), 1, 1, fc='maroon')\nax.add_patch(rect)\n\n# Add a circle to the plot\ncircle = plt.Circle((0, 0), 0.1, fc='aqua')\nax.add_patch(circle)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0, 0), 1, 1, fc='fuchsia')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0, 0), 1, 1, fc='silver')\nax.add_patch(rect)\n\n# Add a circle to the plot\ncircle = plt.Circle((0, 0), 0.1, fc='gold')\nax.add_patch(circle)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0, 0), 1, 1, fc='navy')\nax.add_patch(rect)\n\n# Add a circle to the plot\ncircle = plt.Circle((0, 0), 0.1, fc='olive')\nax.add_patch(circle)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0, 0), 1, 1, fc='teal')\nax.add_patch(rect)\n\n# Add a circle to the plot\ncircle = plt.Circle((0, 0), 0.1, fc='coral')\nax.add_patch(circle)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0, 0), 1, 1, fc='maroon')\nax.add_patch(rect)\n\n# Add a circle to the plot\ncircle = plt.Circle((0, 0), 0.1, fc='aqua')\nax.add_patch(circle)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0, 0), 1, 1, fc='fuchsia')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0, 0), 1, 1, fc='silver')\nax.add_patch(rect)\n\n# Add a circle to the plot\ncircle = plt.Circle((0, 0), 0.1, fc='gold')\nax.add_patch(circle)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0, 0), 1, 1, fc='navy')\nax.add_patch(rect)\n\n# Add a circle to the plot\ncircle = plt.Circle((0, 0), 0.1, fc='olive')\nax.add_patch(circle)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0, 0), 1, 1, fc='teal')\nax.add_patch(rect)\n\n# Add a circle to the plot\ncircle = plt.Circle((0, 0), 0.1, fc='coral')\nax.add_patch(circle)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0, 0), 1, 1, fc='maroon')\nax.add_patch(rect)\n\n# Add a circle to the plot\ncircle = plt.Circle((0, 0), 0.1, fc='aqua')\nax.add_patch(circle)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0, 0), 1, 1, fc='fuchsia')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0, 0), 1, 1, fc='silver')\nax.add_patch(rect)\n\n# Add a circle to the plot\ncircle = plt.Circle((0, 0), 0.1, fc='gold')\nax.add_patch(circle)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0, 0), 1, 1, fc='navy')\nax.add_patch(rect)\n\n# Add a circle to the plot\ncircle = plt.Circle((0, 0), 0.1, fc='olive')\nax.add_patch(circle)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0, 0), 1, 1, fc='teal')\nax.add_patch(rect)\n\n# Add a circle to the plot\ncircle = plt.Circle((0, 0), 0.1, fc='coral')\nax.add_patch(circle)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0, 0), 1, 1, fc='maroon')\nax.add_patch(rect)\n\n# Add a circle to the plot\ncircle = plt.Circle((0, 0), 0.1, fc='aqua')\nax.add_patch(circle)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0, 0), 1, 1, fc='fuchsia')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0, 0), 1, 1, fc='silver')\nax.add_patch(rect)\n\n# Add a circle to the plot\ncircle = plt.Circle((0, 0), 0.1, fc='gold')\nax.add_patch(circle)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0, 0), 1, 1, fc='navy')\nax.add_patch(rect)\n\n# Add a circle to the plot\ncircle = plt.Circle((0, 0), 0.1, fc='olive')\nax.add_patch(circle)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0, 0), 1, 1, fc='teal')\nax.add_patch(rect)\n\n# Add a circle to the plot\ncircle = plt.Circle((0, 0), 0.1, fc='coral')\nax.add_patch(circle)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0, 0), 1, 1, fc='maroon')\nax.add_patch(rect)\n\n# Add a circle to the plot\ncircle = plt.Circle((0, 0), 0.1, fc='aqua')\nax.add_patch(circle)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0, 0), 1, 1, fc='fuchsia')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0, 0), 1, 1, fc='silver')\nax.add_patch(rect)\n\n# Add a circle to the plot\ncircle = plt.Circle((0, 0), 0.1, fc='gold')\nax.add_patch(circle)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0, 0), 1, 1, fc='navy')\nax.add_patch(rect)\n\n# Add a circle to the plot\ncircle = plt.Circle((0, 0), 0.1, fc='olive')\nax.add_patch(circle)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0, 0), 1, 1, fc='teal')\nax.add_patch(rect)\n\n# Add a circle to the plot\ncircle = plt.Circle((0, 0), 0.1, fc='coral')\nax.add_patch(circle)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0, 0), 1, 1, fc='maroon')\nax.add_patch(rect)\n\n# Add a circle to the plot\ncircle = plt.Circle((0, 0), 0.1, fc='aqua')\nax.add_patch(circle)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0, 0), 1, 1, fc='fuchsia')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0, 0), 1, 1, fc='silver')\nax.add_patch(rect)\n\n# Add a circle to the plot\ncircle = plt.Circle((0, 0), 0.1, fc='gold')\nax.add_patch(circle)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0, 0), 1, 1, fc='navy')\nax.add_patch(rect)\n\n# Add a circle to the plot\ncircle = plt.Circle((0, 0), 0.1, fc='olive')\nax.add_patch(circle)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0"}
{"file": "dataset/ori_500/scatter_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Number of parameters')\n\n# Create a scatter plot with a circle marker\ncircle1 = plt.Circle((20, 30), 5, color='gray')\ncircle2 = plt.Circle((40, 30), 5, color='gray')\ncircle3 = plt.Circle((60, 30), 5, color='gray')\ncircle4 = plt.Circle((80, 30), 5, color='gray')\ncircle5 = plt.Circle((100, 30), 5, color='gray')\ncircle6 = plt.Circle((120, 30), 5, color='gray')\ncircle7 = plt.Circle((140, 30), 5, color='gray')\ncircle8 = plt.Circle((160, 30), 5, color='gray')\ncircle9 = plt.Circle((180, 30), 5, color='gray')\ncircle10 = plt.Circle((200, 30), 5, color='gray')\ncircle11 = plt.Circle((220, 30), 5, color='gray')\ncircle12 = plt.Circle((240, 30), 5, color='gray')\ncircle13 = plt.Circle((260, 30), 5, color='gray')\ncircle14 = plt.Circle((280, 30), 5, color='gray')\ncircle15 = plt.Circle((300, 30), 5, color='gray')\ncircle16 = plt.Circle((320, 30), 5, color='gray')\ncircle17 = plt.Circle((340, 30), 5, color='gray')\ncircle18 = plt.Circle((360, 30), 5, color='gray')\ncircle19 = plt.Circle((380, 30), 5, color='gray')\ncircle20 = plt.Circle((400, 30), 5, color='gray')\ncircle21 = plt.Circle((420, 30), 5, color='gray')\ncircle22 = plt.Circle((440, 30), 5, color='gray')\ncircle23 = plt.Circle((460, 30), 5, color='gray')\ncircle24 = plt.Circle((480, 30), 5, color='gray')\ncircle25 = plt.Circle((500, 30), 5, color='gray')\ncircle26 = plt.Circle((520, 30), 5, color='gray')\ncircle27 = plt.Circle((540, 30), 5, color='gray')\ncircle28 = plt.Circle((560, 30), 5, color='gray')\ncircle29 = plt.Circle((580, 30), 5, color='gray')\ncircle30 = plt.Circle((600, 30), 5, color='gray')\n\n# Add the circles to the plot\nax.add_artist(circle1)\nax.add_artist(circle2)\nax.add_artist(circle3)\nax.add_artist(circle4)\nax.add_artist(circle5)\nax.add_artist(circle6)\nax.add_artist(circle7)\nax.add_artist(circle8)\nax.add_artist(circle9)\nax.add_artist(circle10)\nax.add_artist(circle11)\nax.add_artist(circle12)\nax.add_artist(circle13)\nax.add_artist(circle14)\nax.add_artist(circle15)\nax.add_artist(circle16)\nax.add_artist(circle17)\nax.add_artist(circle18)\nax.add_artist(circle19)\nax.add_artist(circle20)\nax.add_artist(circle21)\nax.add_artist(circle22)\nax.add_artist(circle23)\nax.add_artist(circle24)\nax.add_artist(circle25)\nax.add_artist(circle26)\nax.add_artist(circle27)\nax.add_artist(circle28)\nax.add_artist(circle29)\nax.add_artist(circle30)\n\n# Set the x and y limits of the plot\nax.set_xlim(0, 620)\nax.set_ylim(0, 620)\n\n# Set the x and y ticks of the plot\nax.set_xticks(range(0, 620, 20))\nax.set_yticks(range(0, 620, 20))\n\n# Set the x and y labels of the plot\nax.set_xlabel('EgoSchema VQA accuracy')\nax.set_ylabel('Perception Test VQA accuracy')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Average Relative Error, u')\n\n# Set the x-axis label\nax.set_xlabel('Test Case Index')\n\n# Set the y-axis label\nax.set_ylabel('Average Relative Error, u')\n\n# Set the x-axis limits\nax.set_xlim(1, 5)\n\n# Set the y-axis limits\nax.set_ylim(0.01, 0.08)\n\n# Set the x-axis ticks\nax.set_xticks([1, 2, 3, 4, 5])\n\n# Set the y-axis ticks\nax.set_yticks([0.01, 0.02, 0.03, 0.04, 0.05, 0.06, 0.07, 0.08])\n\n# Add a rectangle for each test case\nrects = [plt.Rectangle((i, 0.01), 1, 0.07, color='blue') for i in range(1, 6)]\nfor rect in rects:\n    ax.add_patch(rect)\n\n# Add a circle for each test case\ncircles = [plt.Circle((i + 0.5, 0.01), 0.02, color='black') for i in range(1, 6)]\nfor circle in circles:\n    ax.add_patch(circle)\n\n# Add a triangle for each test case\ntriangles = [plt.Polygon([[i, 0.01], [i + 0.5, 0.01], [i + 0.25, 0.08]], color='blue') for i in range(1, 6)]\nfor triangle in triangles:\n    ax.add_patch(triangle)\n\n# Add a green rectangle for each test case\ngreen_rects = [plt.Rectangle((i, 0.01), 1, 0.07, color='green') for i in range(1, 6)]\nfor green_rect in green_rects:\n    ax.add_patch(green_rect)\n\n# Add a black circle for each test case\nblack_circles = [plt.Circle((i + 0.5, 0.01), 0.02, color='black') for i in range(1, 6)]\nfor black_circle in black_circles:\n    ax.add_patch(black_circle)\n\n# Add a blue triangle for each test case\nblue_triangles = [plt.Polygon([[i, 0.01], [i + 0.5, 0.01], [i + 0.25, 0.08]], color='blue') for i in range(1, 6)]\nfor blue_triangle in blue_triangles:\n    ax.add_patch(blue_triangle)\n\n# Add a green rectangle for each test case\ngreen_rects = [plt.Rectangle((i, 0.01), 1, 0.07, color='green') for i in range(1, 6)]\nfor green_rect in green_rects:\n    ax.add_patch(green_rect)\n\n# Add a black circle for each test case\nblack_circles = [plt.Circle((i + 0.5, 0.01), 0.02, color='black') for i in range(1, 6)]\nfor black_circle in black_circles:\n    ax.add_patch(black_circle)\n\n# Add a blue triangle for each test case\nblue_triangles = [plt.Polygon([[i, 0.01], [i + 0.5, 0.01], [i + 0.25, 0.08]], color='blue') for i in range(1, 6)]\nfor blue_triangle in blue_triangles:\n    ax.add_patch(blue_triangle)\n\n# Add a green rectangle for each test case\ngreen_rects = [plt.Rectangle((i, 0.01), 1, 0.07, color='green') for i in range(1, 6)]\nfor green_rect in green_rects:\n    ax.add_patch(green_rect)\n\n# Add a black circle for each test case\nblack_circles = [plt.Circle((i + 0.5, 0.01), 0.02, color='black') for i in range(1, 6)]\nfor black_circle in black_circles:\n    ax.add_patch(black_circle)\n\n# Add a blue triangle for each test case\nblue_triangles = [plt.Polygon([[i, 0.01], [i + 0.5, 0.01], [i + 0.25, 0.08]], color='blue') for i in range(1, 6)]\nfor blue_triangle in blue_triangles:\n    ax.add_patch(blue_triangle)\n\n# Add a green rectangle for each test case\ngreen_rects = [plt.Rectangle((i, 0.01), 1, 0.07, color='green') for i in range(1, 6)]\nfor green_rect in green_rects:\n    ax.add_patch(green_rect)\n\n# Add a black circle for each test case\nblack_circles = [plt.Circle((i + 0.5, 0.01), 0.02, color='black') for i in range(1, 6)]\nfor black_circle in black_circles:\n    ax.add_patch(black_circle)\n\n# Add a blue triangle for each test case\nblue_triangles = [plt.Polygon([[i, 0.01], [i + 0.5, 0.01], [i + 0.25, 0.08]], color='blue') for i in range(1, 6)]\nfor blue_triangle in blue_triangles:\n    ax.add_patch(blue_triangle)\n\n# Add a green rectangle for each test case\ngreen_rects = [plt.Rectangle((i, 0.01), 1, 0.07, color='green') for i in range(1, 6)]\nfor green_rect in green_rects:\n    ax.add_patch(green_rect)\n\n# Add a black circle for each test case\nblack_circles = [plt.Circle((i + 0.5, 0.01), 0.02, color='black') for i in range(1, 6)]\nfor black_circle in black_circles:\n    ax.add_patch(black_circle)\n\n# Add a blue triangle for each test case\nblue_triangles = [plt.Polygon([[i, 0.01], [i + 0.5, 0.01], [i + 0.25, 0.08]], color='blue') for i in range(1, 6)]\nfor blue_triangle in blue_triangles:\n    ax.add_patch(blue_triangle)\n\n# Add a green rectangle for each test case\ngreen_rects = [plt.Rectangle((i, 0.01), 1, 0.07, color='green') for i in range(1, 6)]\nfor green_rect in green_rects:\n    ax.add_patch(green_rect)\n\n# Add a black circle for each test case\nblack_circles = [plt.Circle((i + 0.5, 0.01), 0.02, color='black') for i in range(1, 6)]\nfor black_circle in black_circles:\n    ax.add_patch(black_circle)\n\n# Add a blue triangle for each test case\nblue_triangles = [plt.Polygon([[i, 0.01], [i + 0.5, 0.01], [i + 0.25, 0.08]], color='blue') for i in range(1, 6)]\nfor blue_triangle in blue_triangles:\n    ax.add_patch(blue_triangle)\n\n# Add a green rectangle for each test case\ngreen_rects = [plt.Rectangle((i, 0.01), 1, 0.07, color='green') for i in range(1, 6)]\nfor green_rect in green_rects:\n    ax.add_patch(green_rect)\n\n# Add a black circle for each test case\nblack_circles = [plt.Circle((i + 0.5, 0.01), 0.02, color='black') for i in range(1, 6)]\nfor black_circle in black_circles:\n    ax.add_patch(black_circle)\n\n# Add a blue triangle for each test case\nblue_triangles = [plt.Polygon([[i, 0.01], [i + 0.5, 0.01], [i + 0.25, 0.08]], color='blue') for i in range(1, 6)]\nfor blue_triangle in blue_triangles:\n    ax.add_patch(blue_triangle)\n\n# Add a green rectangle for each test case\ngreen_rects = [plt.Rectangle((i, 0.01), 1, 0.07, color='green') for i in range(1, 6)]\nfor green_rect in green_rects:\n    ax.add_patch(green_rect)\n\n# Add a black circle for each test case\nblack_circles = [plt.Circle((i + 0.5, 0.01), 0.02, color='black') for i in range(1, 6)]\nfor black_circle in black_circles:\n    ax.add_patch(black_circle)\n\n# Add a blue triangle for each test case\nblue_triangles = [plt.Polygon([[i, 0.01], [i + 0.5, 0.01], [i + 0.25, 0.08]], color='blue') for i in range(1, 6)]\nfor blue_triangle in blue_triangles:\n    ax.add_patch(blue_triangle)\n\n# Add a green rectangle for each test case\ngreen_rects = [plt.Rectangle((i, 0.01), 1, 0.07, color='green') for i in range(1, 6)]\nfor green_rect in green_rects:\n    ax.add_patch(green_rect)\n\n# Add a black circle for each test case\nblack_circles = [plt.Circle((i + 0.5, 0.01), 0.02, color='black') for i in range(1, 6)]\nfor black_circle in black_circles:\n    ax.add_patch(black_circle)\n\n# Add a blue triangle for each test case\nblue_triangles = [plt.Polygon([[i, 0.01], [i + 0.5, 0.01], [i + 0.25, 0.08]], color='blue') for i in range(1, 6)]\nfor blue_triangle in blue_triangles:\n    ax.add_patch(blue_triangle)\n\n# Add a green rectangle for each test case\ngreen_rects = [plt.Rectangle((i, 0.01), 1, 0.07, color='green') for i in range(1, 6)]\nfor green_rect in green_rects:\n    ax.add_patch(green_rect)\n\n# Add a black circle for each test case\nblack_circles = [plt.Circle((i + 0.5, 0.01), 0.02, color='black') for i in range(1, 6)]\nfor black_circle in black_circles:\n    ax.add_patch(black_circle)\n\n# Add a blue triangle for each test case\nblue_triangles = [plt.Polygon([[i, 0.01], [i + 0.5, 0.01], [i + 0.25, 0.08]], color='blue') for i in range(1, 6)]\nfor blue_triangle in blue_triangles:\n    ax.add_patch(blue_triangle)\n\n# Add a green rectangle for each test case\ngreen_rects = [plt.Rectangle((i, 0.01), 1, 0.07, color='green') for i in range(1, 6)]\nfor green_rect in green_rects:\n    ax.add_patch(green_rect)\n\n# Add a black circle for each test case\nblack_circles = [plt.Circle((i + 0.5, 0.01), 0.02, color='black') for i in range(1, 6)]\nfor black_circle in black_circles:\n    ax.add_patch(black_circle)\n\n# Add a blue triangle for each test case\nblue_triangles = [plt.Polygon([[i, 0.01], [i + 0.5, 0.01], [i + 0.25, 0.08]], color='blue') for i in range(1, 6)]\nfor blue_triangle in blue_triangles:\n    ax.add_patch(blue_triangle)\n\n# Add a green rectangle for each test case\ngreen_rects = [plt.Rectangle((i, 0.01), 1, 0.07, color='green') for i in range(1, 6)]\nfor green_rect in green_rects:\n    ax.add_patch(green_rect)\n\n# Add a black circle for each test case\nblack_circles = [plt.Circle((i + 0.5, 0.01), 0.02, color='black') for i in range(1, 6)]\nfor black_circle in black_circles:\n    ax.add_patch(black_circle)\n\n# Add a blue triangle for each test case\nblue_triangles = [plt.Polygon([[i, 0.01], [i + 0.5, 0.01], [i + 0.25, 0.08]], color='blue') for i in range(1, 6)]\nfor blue_triangle in blue_triangles:\n    ax.add_patch(blue_triangle)\n\n# Add a green rectangle for each test case\ngreen_rects = [plt.Rectangle((i, 0.01), 1, 0.07, color='green') for i in range(1, 6)]\nfor green_rect in green_rects:\n    ax.add_patch(green_rect)\n\n# Add a black circle for each test case\nblack_circles = [plt.Circle((i + 0.5, 0.01), 0.02, color='black') for i in range(1, 6)]\nfor black_circle in black_circles:\n    ax.add_patch(black_circle)\n\n# Add a blue triangle for each test case\nblue_triangles = [plt.Polygon([[i, 0.01], [i + 0.5, 0.01], [i + 0.25, 0.08]], color='blue') for i in range(1, 6)]\nfor blue_triangle in blue_triangles:\n    ax.add_patch(blue_triangle)\n\n# Add a green rectangle for each test case\ngreen_rects = [plt.Rectangle((i, 0.01), 1, 0.07, color='green') for i in range(1, 6)]\nfor green_rect in green_rects:\n    ax.add_patch(green_rect)\n\n# Add a black circle for each test case\nblack_circles = [plt.Circle((i + 0.5, 0.01), 0.02, color='black') for i in range(1, 6)]\nfor black_circle in black_circles:\n    ax.add_patch(black_circle)\n\n# Add a blue triangle for each test case\nblue_triangles = [plt.Polygon([[i, 0.01], [i + 0.5, 0.01], [i + 0.25, 0.08]], color='blue') for i in range(1, 6)]\nfor blue_triangle in blue_triangles:\n    ax.add_patch(blue_triangle)\n\n# Add a green rectangle for each test case\ngreen_rects = [plt.Rectangle((i, 0.01), 1, 0.07, color='green') for i in range(1, 6)]\nfor green_rect in green_rects:\n    ax.add_patch(green_rect)\n\n# Add a black circle for each test case\nblack_circles = [plt.Circle((i + 0.5, 0.01), 0.02, color='black') for i in range(1, 6)]\nfor black_circle in black_circles:\n    ax.add_patch(black_circle)\n\n# Add a blue triangle for each test case\nblue_triangles = [plt.Polygon([[i, 0.01], [i + 0.5, 0.01], [i + 0.25, 0.08]], color='blue') for i in range(1, 6)]\nfor blue_triangle in blue_triangles:\n    ax.add_patch(blue_triangle)\n\n# Add a green rectangle for each test case\ngreen_rects = [plt.Rectangle((i, 0.01), 1, 0.07, color='green') for i in range(1, 6)]\nfor green_rect in green_rects:\n    ax.add_patch(green_rect)\n\n# Add a black circle for each test case\nblack_circles = [plt.Circle((i + 0.5, 0.01), 0.02, color='black') for i in range(1, 6)]\nfor black_circle in black_circles:\n    ax.add_patch(black_circle)\n\n# Add a blue triangle for each test case\nblue_triangles = [plt.Polygon([[i, 0.01], [i + 0.5, 0.01], [i + 0.25, 0.08]], color='blue') for i in range(1, 6)]\nfor blue_triangle in blue_triangles:\n    ax.add_patch(blue_triangle)\n\n# Add a green rectangle for each test case\ngreen_rects = [plt.Rectangle((i, 0.01), 1, 0.07, color='green') for i in range(1, 6)]\nfor green_rect in green_rects:\n    ax.add_patch(green_rect)\n\n# Add a black circle for each test case\nblack_circles = [plt.Circle((i + 0.5, 0.01), 0.02, color='black') for i in range(1, 6)]\nfor black_circle in black_circles:\n    ax.add_patch(black_circle)\n\n# Add a blue triangle for each test case\nblue_triangles = [plt.Polygon([[i, 0.01], [i + 0.5, 0.01], [i + 0.25, 0.08]], color='blue') for i in range(1, 6)]\nfor blue"}
{"file": "dataset/ori_500/scatter_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nclasses = ['spotlight', 'sliding', 'wool', 'weasel', 'space', 'partridge', 'mushroom', 'bighorn']\naccuracies = [1.2, 1.1, 1.0, 0.9, 0.8, 0.7, 0.6, 0.5]\nmajority_minority = ['majority', 'minority'] * 4\n\n# Plot\nfig, ax = plt.subplots(figsize=(6.0, 3.0))\nax.plot(classes, accuracies, 'bo-')\nax.set_title('Accuracies for the ImageNet Classes (ClarifAI)')\nax.set_xlabel('Classes')\nax.set_ylabel('Accuracies')\n\n# Legend\nlegend_elements = [plt.Line2D([0], [0], marker='o', color='w', label=m, markerfacecolor=c, markersize=10)\n                  for m, c in zip(majority_minority, ['blue', 'red'])]\nax.legend(handles=legend_elements)\n\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the first plot\nx1 = [50, 30, 20, 10, 0]\ny1 = [68, 66, 64, 62, 60]\ncolors1 = ['red', 'red', 'blue', 'orange', 'pink']\nlabels1 = ['MAD+judge', 'ToT', 'CoT(maj@5)', 'CoT(maj@1)', 'Self-refine']\n\n# Data for the second plot\nx2 = [50, 30, 20, 10, 0]\ny2 = [68, 66, 64, 62, 60]\ncolors2 = ['red', 'red', 'blue', 'orange', 'pink']\nlabels2 = ['MAD+judge', 'ToT', 'CoT(maj@5)', 'CoT(maj@1)', 'Self-refine']\n\n# Create a figure and a set of subplots\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10, 4))\n\n# Plot the first subplot\nfor i in range(len(x1)):\n    ax1.plot([x1[i], x1[i]], [y1[i], y1[i]], color=colors1[i])\n    ax1.text(x1[i], y1[i], labels1[i], color=colors1[i])\n\n# Plot the second subplot\nfor i in range(len(x2)):\n    ax2.plot([x2[i], x2[i]], [y2[i], y2[i]], color=colors2[i])\n    ax2.text(x2[i], y2[i], labels2[i], color=colors2[i])\n\n# Set the titles and labels\nax1.set_title('Logic Grid Puzzle(Accuracy versus token cost)')\nax2.set_title('Logic Grid Puzzle(Accuracy versus TFLOPS)')\nax1.set_xlabel('Token cost($)')\nax2.set_xlabel('TFLOPS')\nax1.set_ylabel('Accuracy(%)')\nax2.set_ylabel('Accuracy(%)')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_16.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 4.0))\n\n# Set the title of the plot\nax.set_title('Energy Source')\n\n# Set the labels for the x and y axes\nax.set_xlabel('Efficiency (%)')\nax.set_ylabel('Carbon Reduction (%)')\n\n# Define the data points\nx = [15, 20, 25, 30, 35, 40, 45, 50]\ny = [10, 20, 30, 40, 50, 60, 70, 80]\n\n# Plot the data points\nax.plot(x, y, 'ro-')\n\n# Add a legend\nax.legend(['Solar', 'Wind', 'Hydro', 'Geothermal', 'Biomass', 'Nuclear', 'Tidal', 'Wave'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_17.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(9.0, 6.0))\n\n# Set the background color of the plot\nax.set_facecolor('white')\n\n# Set the x-axis and y-axis limits\nax.set_xlim(-30, 10)\nax.set_ylim(-10, 30)\n\n# Set the x-axis and y-axis labels\nax.set_xlabel('\u0394 Robust Accuracy (%)')\nax.set_ylabel('\u0394 RNFR (%)')\n\n# Set the title of the plot\nax.set_title('Scatter Plot of \u0394 Robust Accuracy vs \u0394 RNFR')\n\n# Define the colors for the scatter plot\ncolors = ['blue', 'green', 'purple', 'yellow']\n\n# Generate random data points\nx = [-25, -15, -5, 5, 15]\ny = [25, 15, 5, 15, 25]\n\n# Create a scatter plot with the specified colors\nscatter = ax.scatter(x, y, c=colors)\n\n# Add a legend to the plot\nlegend = ax.legend(['Data Point 1', 'Data Point 2', 'Data Point 3', 'Data Point 4'], loc='upper right')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_18.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Sales Data')\n\n# Set the x-axis label\nax.set_xlabel('Time')\n\n# Set the y-axis label\nax.set_ylabel('Sales')\n\n# Set the x-axis limits\nax.set_xlim(2, 16)\n\n# Set the y-axis limits\nax.set_ylim(80, 110)\n\n# Set the x-axis ticks\nax.set_xticks(range(2, 17, 2))\n\n# Set the y-axis ticks\nax.set_yticks(range(80, 111, 10))\n\n# Draw grid lines\nax.grid(True)\n\n# Define the data points\nx = [2, 4, 6, 8, 10, 12, 14, 16]\ny = [95, 90, 85, 80, 75, 70, 65, 60]\n\n# Plot the data points\nax.plot(x, y, 'bo-')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_19.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Set the x-axis and y-axis limits\nax.set_xlim(2, 16)\nax.set_ylim(80, 110)\n\n# Draw vertical lines at specified positions\nfor i in range(2, 17, 2):\n    ax.axvline(i, color='black', linestyle='--')\n\n# Draw horizontal lines at specified positions\nfor i in range(80, 111, 10):\n    ax.axhline(i, color='black', linestyle='--')\n\n# Plot points with specified colors\npoints = [(2, 95), (4, 90), (6, 85), (8, 80), (10, 75), (12, 70), (14, 65), (16, 60)]\ncolors = ['blue', 'green', 'purple', 'yellow', 'cyan', 'magenta', 'lime', 'orange']\nfor point, color in zip(points, colors):\n    ax.plot(point[0], point[1], 'o', color=color)\n\n# Set the title of the plot\nax.set_title('Scatter Plot')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(4.0, 8.0))\n\n# Set the title of the plot\nax.set_title('Energy Production Trends')\n\n# Set the x-axis label\nax.set_xlabel('Installed Capacity (GW)')\n\n# Set the y-axis label\nax.set_ylabel('Energy Output (TWh)')\n\n# Define the data points for the plot\nx = [175, 200, 225, 250, 275, 300]\ny = [140, 160, 180, 200, 220, 240]\n\n# Plot the data points\nax.plot(x, y, 'r-')\n\n# Add markers at the data points\nfor i, txt in enumerate(y):\n    ax.annotate(txt, (x[i], y[i]))\n\n# Set the limits of the x-axis\nax.set_xlim(175, 300)\n\n# Set the limits of the y-axis\nax.set_ylim(140, 240)\n\n# Set the tick marks on the x-axis\nax.set_xticks([175, 200, 225, 250, 275, 300])\n\n# Set the tick marks on the y-axis\nax.set_yticks([140, 160, 180, 200, 220, 240])\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_20.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Scatter plot with colorbar')\n\n# Define the data points\nx = [10, 20, 30, 40, 50, 60, 70, 80, 90]\ny = [20, 30, 40, 50, 60, 70, 80, 90, 100]\ncolors = ['green', 'cyan', 'blue', 'purple', 'orange', 'yellow', 'pink', 'gray', 'brown']\nsizes = [100, 80, 60, 40, 20, 100, 80, 60, 40]\n\n# Create scatter plot\nscatter = ax.scatter(x, y, c=colors, s=sizes)\n\n# Add a colorbar\ncbar = fig.colorbar(scatter)\ncbar.set_label('Colorbar')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_21.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Set the title of the plot\nax.set_title('LibriCSS vs Additional Data 1')\n\n# Set the x-axis label\nax.set_xlabel('Number of Microphones')\n\n# Set the y-axis label\nax.set_ylabel('WER (%)')\n\n# Create a scatter plot with blue circles\nax.scatter([2, 3, 4, 5, 6, 7, 8], [0.9, 0.8, 0.8, 0.7, 0.7, 0.6, 0.6], color='blue', label='LibriCSS WER')\n\n# Create a scatter plot with blue squares\nax.scatter([2, 3, 4, 5, 6, 7, 8], [0.9, 0.8, 0.8, 0.7, 0.7, 0.6, 0.6], color='blue', marker='s', label='Additional Data 1')\n\n# Create a scatter plot with red triangles\nax.scatter([2, 3, 4, 5, 6, 7, 8], [0.9, 0.8, 0.8, 0.7, 0.7, 0.6, 0.6], color='red', marker='^', label='AMi WER')\n\n# Create a scatter plot with red diamonds\nax.scatter([2, 3, 4, 5, 6, 7, 8], [0.9, 0.8, 0.8, 0.7, 0.7, 0.6, 0.6], color='red', marker='d', label='Additional Data 2')\n\n# Create a scatter plot with blue triangles\nax.scatter([2, 3, 4, 5, 6, 7, 8], [0.9, 0.8, 0.8, 0.7, 0.7, 0.6, 0.6], color='blue', marker='^', label='AMi WER')\n\n# Create a scatter plot with blue squares\nax.scatter([2, 3, 4, 5, 6, 7, 8], [0.9, 0.8, 0.8, 0.7, 0.7, 0.6, 0.6], color='blue', marker='s', label='Additional Data 1')\n\n# Create a scatter plot with red triangles\nax.scatter([2, 3, 4, 5, 6, 7, 8], [0.9, 0.8, 0.8, 0.7, 0.7, 0.6, 0.6], color='red', marker='^', label='AMi WER')\n\n# Create a scatter plot with red diamonds\nax.scatter([2, 3, 4, 5, 6, 7, 8], [0.9, 0.8, 0.8, 0.7, 0.7, 0.6, 0.6], color='red', marker='d', label='Additional Data 2')\n\n# Create a scatter plot with blue triangles\nax.scatter([2, 3, 4, 5, 6, 7, 8], [0.9, 0.8, 0.8, 0.7, 0.7, 0.6, 0.6], color='blue', marker='^', label='AMi WER')\n\n# Create a scatter plot with blue squares\nax.scatter([2, 3, 4, 5, 6, 7, 8], [0.9, 0.8, 0.8, 0.7, 0.7, 0.6, 0.6], color='blue', marker='s', label='Additional Data 1')\n\n# Create a scatter plot with red triangles\nax.scatter([2, 3, 4, 5, 6, 7, 8], [0.9, 0.8, 0.8, 0.7, 0.7, 0.6, 0.6], color='red', marker='^', label='AMi WER')\n\n# Create a scatter plot with red diamonds\nax.scatter([2, 3, 4, 5, 6, 7, 8], [0.9, 0.8, 0.8, 0.7, 0.7, 0.6, 0.6], color='red', marker='d', label='Additional Data 2')\n\n# Create a scatter plot with blue triangles\nax.scatter([2, 3, 4, 5, 6, 7, 8], [0.9, 0.8, 0.8, 0.7, 0.7, 0.6, 0.6], color='blue', marker='^', label='AMi WER')\n\n# Create a scatter plot with blue squares\nax.scatter([2, 3, 4, 5, 6, 7, 8], [0.9, 0.8, 0.8, 0.7, 0.7, 0.6, 0.6], color='blue', marker='s', label='Additional Data 1')\n\n# Create a scatter plot with red triangles\nax.scatter([2, 3, 4, 5, 6, 7, 8], [0.9, 0.8, 0.8, 0.7, 0.7, 0.6, 0.6], color='red', marker='^', label='AMi WER')\n\n# Create a scatter plot with red diamonds\nax.scatter([2, 3, 4, 5, 6, 7, 8], [0.9, 0.8, 0.8, 0.7, 0.7, 0.6, 0.6], color='red', marker='d', label='Additional Data 2')\n\n# Create a scatter plot with blue triangles\nax.scatter([2, 3, 4, 5, 6, 7, 8], [0.9, 0.8, 0.8, 0.7, 0.7, 0.6, 0.6], color='blue', marker='^', label='AMi WER')\n\n# Create a scatter plot with blue squares\nax.scatter([2, 3, 4, 5, 6, 7, 8], [0.9, 0.8, 0.8, 0.7, 0.7, 0.6, 0.6], color='blue', marker='s', label='Additional Data 1')\n\n# Create a scatter plot with red triangles\nax.scatter([2, 3, 4, 5, 6, 7, 8], [0.9, 0.8, 0.8, 0.7, 0.7, 0.6, 0.6], color='red', marker='^', label='AMi WER')\n\n# Create a scatter plot with red diamonds\nax.scatter([2, 3, 4, 5, 6, 7, 8], [0.9, 0.8, 0.8, 0.7, 0.7, 0.6, 0.6], color='red', marker='d', label='Additional Data 2')\n\n# Create a scatter plot with blue triangles\nax.scatter([2, 3, 4, 5, 6, 7, 8], [0.9, 0.8, 0.8, 0.7, 0.7, 0.6, 0.6], color='blue', marker='^', label='AMi WER')\n\n# Create a scatter plot with blue squares\nax.scatter([2, 3, 4, 5, 6, 7, 8], [0.9, 0.8, 0.8, 0.7, 0.7, 0.6, 0.6], color='blue', marker='s', label='Additional Data 1')\n\n# Create a scatter plot with red triangles\nax.scatter([2, 3, 4, 5, 6, 7, 8], [0.9, 0.8, 0.8, 0.7, 0.7, 0.6, 0.6], color='red', marker='^', label='AMi WER')\n\n# Create a scatter plot with red diamonds\nax.scatter([2, 3, 4, 5, 6, 7, 8], [0.9, 0.8, 0.8, 0.7, 0.7, 0.6, 0.6], color='red', marker='d', label='Additional Data 2')\n\n# Create a scatter plot with blue triangles\nax.scatter([2, 3, 4, 5, 6, 7, 8], [0.9, 0.8, 0.8, 0.7, 0.7, 0.6, 0.6], color='blue', marker='^', label='AMi WER')\n\n# Create a scatter plot with blue squares\nax.scatter([2, 3, 4, 5, 6, 7, 8], [0.9, 0.8, 0.8, 0.7, 0.7, 0.6, 0.6], color='blue', marker='s', label='Additional Data 1')\n\n# Create a scatter plot with red triangles\nax.scatter([2, 3, 4, 5, 6, 7, 8], [0.9, 0.8, 0.8, 0.7, 0.7, 0.6, 0.6], color='red', marker='^', label='AMi WER')\n\n# Create a scatter plot with red diamonds\nax.scatter([2, 3, 4, 5, 6, 7, 8], [0.9, 0.8, 0.8, 0.7, 0.7, 0.6, 0.6], color='red', marker='d', label='Additional Data 2')\n\n# Create a scatter plot with blue triangles\nax.scatter([2, 3, 4, 5, 6, 7, 8], [0.9, 0.8, 0.8, 0.7, 0.7, 0.6, 0.6], color='blue', marker='^', label='AMi WER')\n\n# Create a scatter plot with blue squares\nax.scatter([2, 3, 4, 5, 6, 7, 8], [0.9, 0.8, 0.8, 0.7, 0.7, 0.6, 0.6], color='blue', marker='s', label='Additional Data 1')\n\n# Create a scatter plot with red triangles\nax.scatter([2, 3, 4, 5, 6, 7, 8], [0.9, 0.8, 0.8, 0.7, 0.7, 0.6, 0.6], color='red', marker='^', label='AMi WER')\n\n# Create a scatter plot with red diamonds\nax.scatter([2, 3, 4, 5, 6, 7, 8], [0.9, 0.8, 0.8, 0.7, 0.7, 0.6, 0.6], color='red', marker='d', label='Additional Data 2')\n\n# Create a scatter plot with blue triangles\nax.scatter([2, 3, 4, 5, 6, 7, 8], [0.9, 0.8, 0.8, 0.7, 0.7, 0.6, 0.6], color='blue', marker='^', label='AMi WER')\n\n# Create a scatter plot with blue squares\nax.scatter([2, 3, 4, 5, 6, 7, 8], [0.9, 0.8, 0.8, 0.7, 0.7, 0.6, 0.6], color='blue', marker='s', label='Additional Data 1')\n\n# Create a scatter plot with red triangles\nax.scatter([2, 3, 4, 5, 6, 7, 8], [0.9, 0.8, 0.8, 0.7, 0.7, 0.6, 0.6], color='red', marker='^', label='AMi WER')\n\n# Create a scatter plot with red diamonds\nax.scatter([2, 3, 4, 5, 6, 7, 8], [0.9, 0.8, 0.8, 0.7, 0.7, 0.6, 0.6], color='red', marker='d', label='Additional Data 2')\n\n# Create a scatter plot with blue triangles\nax.scatter([2, 3, 4, 5, 6, 7, 8], [0.9, 0.8, 0.8, 0.7, 0.7, 0.6, 0.6], color='blue', marker='^', label='AMi WER')\n\n# Create a scatter plot with blue squares\nax.scatter([2, 3, 4, 5, 6, 7, 8], [0.9, 0.8, 0.8, 0.7, 0.7, 0.6, 0.6], color='blue', marker='s', label='Additional Data 1')\n\n# Create a scatter plot with red triangles\nax.scatter([2, 3, 4, 5, 6, 7, 8], [0.9, 0.8, 0.8, 0.7, 0.7, 0.6, 0.6], color='red', marker='^', label='AMi WER')\n\n# Create a scatter plot with red diamonds\nax.scatter([2, 3, 4, 5, 6, 7, 8], [0.9, 0.8, 0.8, 0.7, 0.7, 0.6, 0.6], color='red', marker='d', label='Additional Data 2')\n\n# Create a scatter plot with blue triangles\nax.scatter([2, 3, 4, 5, 6, 7, 8], [0.9, 0.8, 0.8, 0.7, 0.7, 0.6, 0.6], color='blue', marker='^', label='AMi WER')\n\n# Create a scatter plot with blue squares\nax.scatter([2, 3, 4, 5, 6, 7, 8], [0.9, 0.8, 0.8, 0.7, 0.7, 0.6, 0.6], color='blue', marker='s', label='Additional Data 1')\n\n# Create a scatter plot with red triangles\nax.scatter([2, 3, 4, 5, 6, 7, 8], [0.9, 0.8, 0.8, 0.7, 0.7, 0.6, 0.6], color='red', marker='^', label='AMi WER')\n\n# Create a scatter plot with red diamonds\nax.scatter([2, 3, 4, 5, 6, 7, 8], [0.9, 0.8, 0.8, 0.7, 0.7, 0.6, 0.6], color='red', marker='d', label='Additional Data 2')\n\n# Create a scatter plot with blue triangles\nax.scatter([2, 3, 4, 5, 6, 7, 8], [0.9, 0.8, 0.8, 0.7, 0.7, 0.6, 0.6], color='blue', marker='^', label='AMi WER')\n\n# Create a scatter plot with blue squares\nax.scatter([2, 3, 4, 5, 6, 7, 8], [0.9, 0.8, 0.8, 0.7, 0.7, 0.6, 0.6], color='blue', marker='s', label='Additional Data 1')\n\n# Create a scatter plot with red triangles\nax.scatter([2, 3, 4, 5, 6, 7, 8], [0.9, 0.8, 0.8, 0.7, 0.7, 0.6, 0.6], color='red', marker='^', label='AMi WER')\n\n# Create a scatter plot with red diamonds\nax.scatter([2, 3, 4, 5, 6, 7, 8], [0.9, 0.8, 0.8, 0.7, 0.7, 0.6, 0.6], color='red', marker='d', label='Additional Data 2')\n\n# Create a scatter plot with blue triangles\nax.scatter([2, 3, 4, 5, 6, 7, 8], [0.9, 0.8, 0.8, 0.7, 0.7, 0.6, 0.6], color='blue', marker='^', label='AMi WER')\n\n"}
{"file": "dataset/ori_500/scatter_22.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(12, 6))\n\n# Set the title of the plot\nax.set_title('Performance Comparison')\n\n# Define the data for the left subplot\nleft_data = [0.5, 0.7, 0.9, 1.1, 1.3, 1.5, 1.7, 1.9]\nleft_labels = ['llama-2-70-chat', 'llama-2-70', 'hfalcon-40b', 'claude-2', 'claude-1', 'text-bison@002', 'claude-2', 'claude-1', 'text-bison@002', 'gpt-4']\n\n# Plot the data\nax.plot(left_data, left_labels, 'o-', color='blue')\n\n# Set the x-axis label\nax.set_xlabel('Value')\n\n# Set the y-axis label\nax.set_ylabel('Models')\n\n# Create a second subplot\nax2 = fig.add_subplot(1, 2, 2)\n\n# Set the title of the second subplot\nax2.set_title('Strategic Traits')\n\n# Define the data for the right subplot\nright_data = [0.2, 0.4, 0.6, 0.8, 1.0]\nright_labels = ['Exploration', 'Risk Taking']\n\n# Plot the data\nax2.plot(right_data, right_labels, 'o-', color='red')\n\n# Set the x-axis label\nax2.set_xlabel('Value')\n\n# Set the y-axis label\nax2.set_ylabel('Traits')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_23.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Set the background color of the plot\nax.set_facecolor('lightgrey')\n\n# Set the title of the plot\nax.set_title('Model-Basedness')\n\n# Set the x-axis label\nax.set_xlabel('Models')\n\n# Set the y-axis label\nax.set_ylabel('Score')\n\n# Set the x-ticks\nax.set_xticks([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n\n# Set the x-tick labels\nax.set_xticklabels(['Mixtal-8x7B', 'MPT-7B', 'Llama2-7B', 'Falcon-40B', 'Davinci-003', 'Davinci-002', 'Claude-2', 'Claude-1'])\n\n# Set the y-ticks\nax.set_yticks([0, 50, 100, 150, 200])\n\n# Set the y-tick labels\nax.set_yticklabels(['0', '50', '100', '150', '200'])\n\n# Set the grid lines\nax.grid(True)\n\n# Set the line colors\nline_colors = ['blue', 'green', 'red']\n\n# Set the line styles\nline_styles = ['-', '--', '-.']\n\n# Set the line widths\nline_widths = [2, 1, 1]\n\n# Set the line markers\nline_markers = ['o', 's', '^']\n\n# Set the line marker sizes\nline_marker_sizes = [10, 10, 10]\n\n# Set the line marker edge colors\nline_marker_edge_colors = ['black', 'black', 'black']\n\n# Set the line marker face colors\nline_marker_face_colors = ['blue', 'green', 'red']\n\n# Set the line marker edge widths\nline_marker_edge_widths = [1, 1, 1]\n\n# Set the line marker face widths\nline_marker_face_widths = [1, 1, 1]\n\n# Set the line marker hatch patterns\nline_marker_hatch_patterns = ['', '', '']\n\n# Set the line marker fill styles\nline_marker_fill_styles = ['full', 'full', 'full']\n\n# Set the line marker antialiased properties\nline_marker_antialiased_properties = [True, True, True]\n\n# Set the line marker cap styles\nline_marker_cap_styles = ['butt', 'round', 'projecting']\n\n# Set the line marker join styles\nline_marker_join_styles = ['miter', 'round', 'bevel']\n\n# Set the line marker miter limits\nline_marker_miter_limits = [10, 10, 10]\n\n# Set the line marker solid cap lengths\nline_marker_solid_cap_lengths = [0, 0, 0]\n\n# Set the line marker solid join lengths\nline_marker_solid_join_lengths = [0, 0, 0]\n\n# Set the line marker dash cap lengths\nline_marker_dash_cap_lengths = [0, 0, 0]\n\n# Set the line marker dash join lengths\nline_marker_dash_join_lengths = [0, 0, 0]\n\n# Set the line marker dash pattern lengths\nline_marker_dash_pattern_lengths = [0, 0, 0]\n\n# Set the line marker dash pattern offsets\nline_marker_dash_pattern_offsets = [0, 0, 0]\n\n# Set the line marker dash pattern repeat counts\nline_marker_dash_pattern_repeat_counts = [0, 0, 0]\n\n# Set the line marker dash pattern phase shifts\nline_marker_dash_pattern_phase_shifts = [0, 0, 0]\n\n# Set the line marker dash pattern antialiased properties\nline_marker_dash_pattern_antialiased_properties = [True, True, True]\n\n# Set the line marker dash pattern cap styles\nline_marker_dash_pattern_cap_styles = ['butt', 'round', 'projecting']\n\n# Set the line marker dash pattern join styles\nline_marker_dash_pattern_join_styles = ['miter', 'round', 'bevel']\n\n# Set the line marker dash pattern miter limits\nline_marker_dash_pattern_miter_limits = [10, 10, 10]\n\n# Set the line marker dash pattern solid cap lengths\nline_marker_dash_pattern_solid_cap_lengths = [0, 0, 0]\n\n# Set the line marker dash pattern solid join lengths\nline_marker_dash_pattern_solid_join_lengths = [0, 0, 0]\n\n# Set the line marker dash pattern dash cap lengths\nline_marker_dash_pattern_dash_cap_lengths = [0, 0, 0]\n\n# Set the line marker dash pattern dash join lengths\nline_marker_dash_pattern_dash_join_lengths = [0, 0, 0]\n\n# Set the line marker dash pattern dash pattern lengths\nline_marker_dash_pattern_dash_pattern_lengths = [0, 0, 0]\n\n# Set the line marker dash pattern dash pattern offsets\nline_marker_dash_pattern_dash_pattern_offsets = [0, 0, 0]\n\n# Set the line marker dash pattern dash pattern repeat counts\nline_marker_dash_pattern_dash_pattern_repeat_counts = [0, 0, 0]\n\n# Set the line marker dash pattern dash pattern phase shifts\nline_marker_dash_pattern_dash_pattern_phase_shifts = [0, 0, 0]\n\n# Set the line marker dash pattern dash pattern antialiased properties\nline_marker_dash_pattern_dash_pattern_antialiased_properties = [True, True, True]\n\n# Set the line marker dash pattern dash pattern cap styles\nline_marker_dash_pattern_dash_pattern_cap_styles = ['butt', 'round', 'projecting']\n\n# Set the line marker dash pattern dash pattern join styles\nline_marker_dash_pattern_dash_pattern_join_styles = ['miter', 'round', 'bevel']\n\n# Set the line marker dash pattern dash pattern miter limits\nline_marker_dash_pattern_dash_pattern_miter_limits = [10, 10, 10]\n\n# Set the line marker dash pattern dash pattern solid cap lengths\nline_marker_dash_pattern_dash_pattern_solid_cap_lengths = [0, 0, 0]\n\n# Set the line marker dash pattern dash pattern solid join lengths\nline_marker_dash_pattern_dash_pattern_solid_join_lengths = [0, 0, 0]\n\n# Set the line marker dash pattern dash pattern dash cap lengths\nline_marker_dash_pattern_dash_pattern_dash_cap_lengths = [0, 0, 0]\n\n# Set the line marker dash pattern dash pattern dash join lengths\nline_marker_dash_pattern_dash_pattern_dash_join_lengths = [0, 0, 0]\n\n# Set the line marker dash pattern dash pattern dash pattern lengths\nline_marker_dash_pattern_dash_pattern_dash_pattern_lengths = [0, 0, 0]\n\n# Set the line marker dash pattern dash pattern dash pattern offsets\nline_marker_dash_pattern_dash_pattern_dash_pattern_offsets = [0, 0, 0]\n\n# Set the line marker dash pattern dash pattern dash pattern repeat counts\nline_marker_dash_pattern_dash_pattern_dash_pattern_repeat_counts = [0, 0, 0]\n\n# Set the line marker dash pattern dash pattern dash pattern phase shifts\nline_marker_dash_pattern_dash_pattern_dash_pattern_phase_shifts = [0, 0, 0]\n\n# Set the line marker dash pattern dash pattern dash pattern antialiased properties\nline_marker_dash_pattern_dash_pattern_dash_pattern_antialiased_properties = [True, True, True]\n\n# Set the line marker dash pattern dash pattern dash pattern cap styles\nline_marker_dash_pattern_dash_pattern_dash_pattern_cap_styles = ['butt', 'round', 'projecting']\n\n# Set the line marker dash pattern dash pattern dash pattern join styles\nline_marker_dash_pattern_dash_pattern_dash_pattern_join_styles = ['miter', 'round', 'bevel']\n\n# Set the line marker dash pattern dash pattern dash pattern miter limits\nline_marker_dash_pattern_dash_pattern_dash_pattern_miter_limits = [10, 10, 10]\n\n# Set the line marker dash pattern dash pattern dash pattern solid cap lengths\nline_marker_dash_pattern_dash_pattern_dash_pattern_solid_cap_lengths = [0, 0, 0]\n\n# Set the line marker dash pattern dash pattern dash pattern solid join lengths\nline_marker_dash_pattern_dash_pattern_dash_pattern_solid_join_lengths = [0, 0, 0]\n\n# Set the line marker dash pattern dash pattern dash pattern dash cap lengths\nline_marker_dash_pattern_dash_pattern_dash_pattern_dash_cap_lengths = [0, 0, 0]\n\n# Set the line marker dash pattern dash pattern dash pattern dash join lengths\nline_marker_dash_pattern_dash_pattern_dash_pattern_dash_join_lengths = [0, 0, 0]\n\n# Set the line marker dash pattern dash pattern dash pattern dash pattern lengths\nline_marker_dash_pattern_dash_pattern_dash_pattern_dash_pattern_lengths = [0, 0, 0]\n\n# Set the line marker dash pattern dash pattern dash pattern dash pattern offsets\nline_marker_dash_pattern_dash_pattern_dash_pattern_dash_pattern_offsets = [0, 0, 0]\n\n# Set the line marker dash pattern dash pattern dash pattern dash pattern repeat counts\nline_marker_dash_pattern_dash_pattern_dash_pattern_dash_pattern_repeat_counts = [0, 0, 0]\n\n# Set the line marker dash pattern dash pattern dash pattern dash pattern phase shifts\nline_marker_dash_pattern_dash_pattern_dash_pattern_dash_pattern_phase_shifts = [0, 0, 0]\n\n# Set the line marker dash pattern dash pattern dash pattern dash pattern antialiased properties\nline_marker_dash_pattern_dash_pattern_dash_pattern_dash_pattern_antialiased_properties = [True, True, True]\n\n# Set the line marker dash pattern dash pattern dash pattern dash pattern cap styles\nline_marker_dash_pattern_dash_pattern_dash_pattern_dash_pattern_cap_styles = ['butt', 'round', 'projecting']\n\n# Set the line marker dash pattern dash pattern dash pattern dash pattern join styles\nline_marker_dash_pattern_dash_pattern_dash_pattern_dash_pattern_join_styles = ['miter', 'round', 'bevel']\n\n# Set the line marker dash pattern dash pattern dash pattern dash pattern miter limits\nline_marker_dash_pattern_dash_pattern_dash_pattern_dash_pattern_miter_limits = [10, 10, 10]\n\n# Set the line marker dash pattern dash pattern dash pattern dash pattern solid cap lengths\nline_marker_dash_pattern_dash_pattern_dash_pattern_dash_pattern_solid_cap_lengths = [0, 0, 0]\n\n# Set the line marker dash pattern dash pattern dash pattern dash pattern solid join lengths\nline_marker_dash_pattern_dash_pattern_dash_pattern_dash_pattern_solid_join_lengths = [0, 0, 0]\n\n# Set the line marker dash pattern dash pattern dash pattern dash pattern dash cap lengths\nline_marker_dash_pattern_dash_pattern_dash_pattern_dash_pattern_dash_cap_lengths = [0, 0, 0]\n\n# Set the line marker dash pattern dash pattern dash pattern dash pattern dash join lengths\nline_marker_dash_pattern_dash_pattern_dash_pattern_dash_pattern_dash_join_lengths = [0, 0, 0]\n\n# Set the line marker dash pattern dash pattern dash pattern dash pattern dash pattern lengths\nline_marker_dash_pattern_dash_pattern_dash_pattern_dash_pattern_dash_pattern_lengths = [0, 0, 0]\n\n# Set the line marker dash pattern dash pattern dash pattern dash pattern dash pattern offsets\nline_marker_dash_pattern_dash_pattern_dash_pattern_dash_pattern_dash_pattern_offsets = [0, 0, 0]\n\n# Set the line marker dash pattern dash pattern dash pattern dash pattern dash pattern repeat counts\nline_marker_dash_pattern_dash_pattern_dash_pattern_dash_pattern_dash_pattern_repeat_counts = [0, 0, 0]\n\n# Set the line marker dash pattern dash pattern dash pattern dash pattern dash pattern phase shifts\nline_marker_dash_pattern_dash_pattern_dash_pattern_dash_pattern_dash_pattern_phase_shifts = [0, 0, 0]\n\n# Set the line marker dash pattern dash pattern dash pattern dash pattern dash pattern antialiased properties\nline_marker_dash_pattern_dash_pattern_dash_pattern_dash_pattern_dash_pattern_antialiased_properties = [True, True, True]\n\n# Set the line marker dash pattern dash pattern dash pattern dash pattern dash pattern cap styles\nline_marker_dash_pattern_dash_pattern_dash_pattern_dash_pattern_dash_pattern_cap_styles = ['butt', 'round', 'projecting']\n\n# Set the line marker dash pattern dash pattern dash pattern dash pattern dash pattern join styles\nline_marker_dash_pattern_dash_pattern_dash_pattern_dash_pattern_dash_pattern_join_styles = ['miter', 'round', 'bevel']\n\n# Set the line marker dash pattern dash pattern dash pattern dash pattern dash pattern miter limits\nline_marker_dash_pattern_dash_pattern_dash_pattern_dash_pattern_dash_pattern_miter_limits = [10, 10, 10]\n\n# Set the line marker dash pattern dash pattern dash pattern dash pattern dash pattern solid cap lengths\nline_marker_dash_pattern_dash_pattern_dash_pattern_dash_pattern_dash_pattern_solid_cap_lengths = [0, 0, 0]\n\n# Set the line marker dash pattern dash pattern dash pattern dash pattern dash pattern solid join lengths\nline_marker_dash_pattern_dash_pattern_dash_pattern_dash_pattern_dash_pattern_solid_join_lengths = [0, 0, 0]\n\n# Set the line marker dash pattern dash pattern dash pattern dash pattern dash pattern dash cap lengths\nline_marker_dash_pattern_dash_pattern_dash_pattern_dash_pattern_dash_pattern_dash_cap_lengths = [0, 0, 0]\n\n# Set the line marker dash pattern dash pattern dash pattern dash pattern dash pattern dash join lengths\nline_marker_dash_pattern_dash_pattern_dash_pattern_dash_pattern_dash_pattern_dash_join_lengths = [0, 0, 0]\n\n# Set the line marker dash pattern dash pattern dash pattern dash pattern dash pattern dash pattern lengths\nline_marker_dash_pattern_dash_pattern_dash_pattern_dash_pattern_dash_pattern_dash_pattern_lengths = [0, 0, 0]\n\n# Set the line marker dash pattern dash pattern dash pattern dash pattern dash pattern dash pattern offsets\nline_marker_dash_pattern_dash_pattern_dash_pattern_dash_pattern_dash_pattern_dash_pattern_offsets = [0, 0, 0]\n\n# Set the line marker dash pattern dash pattern dash pattern dash pattern dash pattern dash pattern repeat counts\nline_marker_dash_pattern_dash_pattern_dash_pattern_dash_pattern_dash_pattern_dash_pattern_repeat_counts = [0, 0, 0]\n\n# Set the line marker dash pattern dash pattern dash pattern dash pattern dash pattern dash pattern phase shifts\nline_marker_dash_pattern_dash_pattern_dash_pattern_dash_pattern_dash_pattern_dash_pattern_phase_shifts = [0, 0, 0]\n\n# Set the line marker dash pattern dash pattern dash pattern dash pattern dash pattern dash pattern antialiased properties\nline_marker_dash_pattern_dash_pattern_dash_pattern_dash_pattern_dash_pattern_dash_pattern_antialiased_properties = [True, True, True]\n\n# Set the line marker dash pattern dash pattern dash pattern dash pattern dash pattern dash pattern cap styles\nline_marker_dash_pattern_dash_pattern_dash_pattern_dash_pattern_dash_pattern_dash_pattern_cap_styles = ['butt', 'round', 'projecting']\n\n# Set the line marker dash pattern dash pattern dash pattern dash pattern dash pattern dash pattern join styles\nline_marker_dash_pattern_dash_pattern_dash_pattern_dash_pattern_dash_pattern_dash_pattern_join_styles = ['miter', 'round', 'bevel']\n\n# Set the line marker dash pattern dash pattern dash pattern dash pattern dash pattern dash pattern miter limits\nline_marker_dash_pattern_dash_pattern_dash_pattern_dash_pattern_dash_pattern_dash_pattern_miter_limits = [10, 10, 10]\n\n# Set the line marker dash pattern dash pattern dash pattern dash pattern dash pattern dash pattern solid cap lengths\nline_marker_dash_pattern_dash_pattern_dash_pattern_dash_pattern_dash_pattern_dash_pattern_solid_cap_lengths = [0, 0, 0]\n\n# Set the line marker dash pattern dash pattern dash pattern dash pattern dash pattern dash pattern solid join lengths\nline_marker_dash_pattern_dash_pattern_dash_pattern_dash_pattern_dash_pattern_dash_pattern_solid_join_lengths = [0, 0, 0]\n\n# Set the line marker dash pattern dash pattern dash pattern dash pattern dash pattern dash pattern dash cap lengths\nline_marker_dash_pattern_dash_pattern_dash_pattern_dash_pattern_dash_pattern_dash_pattern_dash_cap_lengths = [0, 0, 0]\n\n# Set the line marker dash pattern dash pattern dash pattern dash pattern dash pattern dash pattern dash join lengths\nline_marker_dash_pattern_dash_pattern_dash_pattern_dash_pattern_dash_pattern_dash_pattern_dash_join_lengths = [0, 0, 0]\n\n# Set the line marker dash pattern dash pattern dash pattern dash pattern dash pattern dash pattern dash pattern lengths\nline_marker_dash_pattern_dash_pattern_dash_pattern_dash_pattern_dash_pattern_dash_pattern_dash_pattern_lengths = [0, 0, 0]\n\n# Set the line marker dash pattern dash pattern dash pattern dash pattern dash pattern dash pattern dash pattern offsets\nline_marker_dash_pattern_dash_pattern_dash_pattern_dash_pattern_dash_pattern_dash_pattern_dash_pattern_offsets = [0, 0, 0]\n\n# Set the line marker dash pattern dash pattern dash pattern dash pattern dash pattern dash pattern dash pattern repeat counts\nline_marker_dash_pattern_dash_pattern_dash_pattern_dash_pattern_dash_pattern_dash_pattern_dash_pattern_repeat_counts = [0, 0, 0]\n\n# Set the line marker dash pattern dash pattern dash pattern dash pattern dash pattern dash pattern dash pattern phase shifts\nline_marker_dash_pattern_dash_pattern_dash_pattern_dash_pattern_dash_pattern_dash_pattern_dash_pattern_phase_shifts = [0, 0, 0]\n\n# Set the line marker dash pattern dash pattern dash pattern dash pattern dash pattern dash pattern dash pattern antialiased properties\nline_marker_dash_pattern_dash_pattern_dash_pattern_dash_pattern_dash_pattern_dash_pattern_dash_pattern_antialiased_properties = [True, True, True]\n\n# Set the line marker dash pattern dash pattern dash pattern dash pattern dash pattern dash pattern dash pattern cap styles\nline_marker_dash_pattern_dash_pattern_dash_pattern_dash_pattern_dash_pattern_dash_pattern_dash_pattern_cap_styles = ['butt', 'round', 'projecting']\n\n# Set the line marker dash pattern dash pattern dash pattern dash pattern dash pattern dash pattern dash pattern join styles\nline_marker_dash_pattern_dash_pattern_dash_pattern_dash_pattern_dash_pattern_dash_pattern_dash_pattern_join_styles = ['miter', 'round', 'bevel']\n\n# Set the line marker dash pattern dash pattern dash pattern dash pattern dash pattern dash pattern dash pattern miter limits\nline_marker_dash_pattern_dash_pattern_dash_pattern_dash_pattern_dash_pattern_dash_pattern_dash_pattern_miter_limits = [10, 10, 10]\n\n# Set the line marker dash pattern dash pattern dash pattern dash pattern dash pattern dash pattern dash pattern solid cap lengths\nline_marker_dash_pattern_dash_pattern_dash_pattern_dash_pattern_dash_pattern_dash_pattern_dash_pattern_solid_cap_lengths = [0, 0, 0]\n\n# Set the line marker dash pattern dash pattern dash pattern dash pattern dash pattern dash pattern dash pattern solid join lengths\nline_marker_dash_pattern_dash_pattern_dash_pattern_dash_pattern_dash_pattern_dash_pattern_dash_pattern_solid_join_lengths = [0, 0, 0]\n\n# Set the line marker dash pattern dash pattern dash pattern dash pattern dash pattern dash pattern dash pattern dash cap lengths\nline_marker_dash_pattern_dash_pattern_dash_pattern_dash_pattern_dash_pattern_dash_pattern_dash_pattern_dash_cap_lengths = [0, 0, 0]\n\n# Set the line marker dash pattern dash pattern dash pattern dash pattern dash pattern dash pattern dash pattern dash join lengths\nline_marker_dash_pattern_dash_pattern_dash_pattern_dash_pattern_dash_pattern_dash_pattern_dash_pattern_dash_join_lengths = [0, 0, 0]\n\n# Set the line marker dash pattern dash pattern dash pattern dash pattern dash pattern dash pattern dash pattern dash pattern lengths\nline_marker_dash_pattern_dash_pattern_dash_pattern_dash_pattern_dash_pattern_dash_pattern_dash_pattern_dash_pattern_lengths = [0, 0, 0]\n\n# Set the line marker dash pattern dash pattern dash pattern dash pattern dash pattern dash pattern dash pattern dash pattern offsets\nline_marker_dash"}
{"file": "dataset/ori_500/scatter_24.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, axes = plt.subplots(1, 4, figsize=(15, 5))\n\n# Scatter Plot - deepskyblue\naxes[0].scatter([70, 80, 90], [30, 25, 20], color='blue')\naxes[0].set_title('Scatter Plot - deepskyblue')\naxes[0].set_xlabel('X Values')\naxes[0].set_ylabel('Y Values')\n\n# Scatter Plot - magenta\naxes[1].scatter([70, 80, 90], [30, 25, 20], color='magenta')\naxes[1].set_title('Scatter Plot - magenta')\naxes[1].set_xlabel('X Values')\naxes[1].set_ylabel('Y Values')\n\n# Scatter Plot - limegreen\naxes[2].scatter([70, 80, 90], [30, 25, 20], color='limegreen')\naxes[2].set_title('Scatter Plot - limegreen')\naxes[2].set_xlabel('X Values')\naxes[2].set_ylabel('Y Values')\n\n# Scatter Plot - lime\naxes[3].scatter([70, 80, 90], [30, 25, 20], color='lime')\naxes[3].set_title('Scatter Plot - lime')\naxes[3].set_xlabel('X Values')\naxes[3].set_ylabel('Y Values')\n\n# Set the color scale for each subplot\ncmap = plt.get_cmap('coolwarm')\nfor ax in axes:\n    ax.set_facecolor(cmap(0.5))  # Set the background color of the plot\n\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_25.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\nx = [70, 72, 74, 76, 78, 80, 82, 84, 86, 88]\ny1 = [50, 45, 40, 35, 30, 25, 20, 15, 10, 5]\ny2 = [45, 40, 35, 30, 25, 20, 15, 10, 5, 0]\ny3 = [50, 45, 40, 35, 30, 25, 20, 15, 10, 5]\n\n# Create a figure and a set of subplots\nfig, axs = plt.subplots(1, 3, figsize=(15, 5))\n\n# Plot 1\naxs[0].plot(x, y1, 'm-')\naxs[0].scatter(x, y1, color='pink')\naxs[0].set_title('ViTPose (sc) Performance')\naxs[0].set_xlabel('Age on MSCOCO (%)')\naxs[0].set_ylabel('Average Precision on HumanArt (%)')\n\n# Plot 2\naxs[1].plot(x, y2, 'c-')\naxs[1].scatter(x, y2, color='pink')\naxs[1].set_title('ViTPose (ft) Performance')\naxs[1].set_xlabel('Age on MSCOCO (%)')\naxs[1].set_ylabel('Average Precision on HumanArt (%)')\n\n# Plot 3\naxs[2].plot(x, y3, 'g-')\naxs[2].scatter(x, y3, color='pink')\naxs[2].set_title('VLPose Performance')\naxs[2].set_xlabel('Age on MSCOCO (%)')\naxs[2].set_ylabel('Average Precision on HumanArt (%)')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the plots\nx = [1.2, 1.4, 1.6, 1.8, 2.0, 2.2, 2.4, 2.6, 2.8, 3.0, 3.2, 3.4, 3.6, 3.8, 4.0, 4.2, 4.4, 4.6, 4.8, 5.0, 5.2, 5.4, 5.6, 5.8, 6.0]\ny = [75, 70, 65, 60, 55, 50, 45, 40, 35, 30, 25, 20, 15, 10, 5, 0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90]\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Plot the data\nax.plot(x, y, 'ro-')\n\n# Set the title and labels\nax.set_title('Token cost ($)')\nax.set_xlabel('Token cost ($)')\nax.set_ylabel('Token cost ($)')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_4.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(5.0, 5.0))\n\n# Set the background color of the plot\nax.set_facecolor('white')\n\n# Define the number of circles and their properties\nnum_circles = 100\ncircle_radius = 0.02\ncircle_color = 'red'\n\n# Generate random positions for the circles\ncircle_positions = np.random.rand(num_circles, 2)\n\n# Draw the circles\nfor pos in circle_positions:\n    circle = plt.Circle(pos, circle_radius, color=circle_color)\n    ax.add_artist(circle)\n\n# Set the limits of the plot\nax.set_xlim(0, 1)\nax.set_ylim(0, 1)\n\n# Remove the axis\nax.axis('off')\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/scatter_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Scatter Plot of WRMSE vs BPP')\n\n# Set the x-axis label\nax.set_xlabel('Bit per pixel (BPP)')\n\n# Set the y-axis label\nax.set_ylabel('WRMSE')\n\n# Set the x-axis limits\nax.set_xlim(0.06, 0.2)\n\n# Set the y-axis limits\nax.set_ylim(200, 800)\n\n# Define the data points\nx = [0.06, 0.08, 0.1, 0.12, 0.14, 0.16, 0.18, 0.2]\ny = [750, 700, 650, 600, 550, 500, 450, 400]\n\n# Define the colors for the scatter plot\ncolors = ['blue', 'cyan', 'red', 'green', 'purple', 'pink', 'orange', 'gold']\n\n# Create a scatter plot with the defined data points and colors\nscatter = ax.scatter(x, y, c=colors)\n\n# Add a legend to the plot\nlegend = ax.legend(['SIREN', 'WIRE', 'FFN', 'SZ3', 'NNComp', 'Ours'], loc='upper right')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\nax.set_title('Daytime Sunny')\nax.scatter([1, 2, 3], [4, 5, 6], color='orange')\n\nax = fig.add_axes([0.15, 0.55, 0.3, 0.3])\nax.set_title('Night Rainy')\nax.scatter([1, 2, 3], [4, 5, 6], color='blue')\n\nax = fig.add_axes([0.55, 0.55, 0.3, 0.3])\nax.set_title('PGST')\nax.scatter([1, 2, 3], [4, 5, 6], color='green')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 3.0))\n\n# Set the title of the plot\nax.set_title('Number of params. vs. NMAE on QM9')\n\n# Set the x-axis label\nax.set_xlabel('Number of parameters (M)')\n\n# Set the y-axis label\nax.set_ylabel('NMAE (%)')\n\n# Define the data points\nx = [0.6, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0]\ny = [10, 15, 20, 25, 30, 35, 40]\n\n# Plot the data points\nax.plot(x, y, 'ro-')\n\n# Add labels to the data points\nax.text(0.6, 10, 'LNO', color='purple')\nax.text(1.0, 15, 'LNO', color='gray')\nax.text(2.0, 20, 'GNO', color='red')\nax.text(3.0, 25, 'GNO', color='brown')\nax.text(4.0, 30, 'InfGCN', color='purple')\nax.text(5.0, 35, 'InfGCN', color='brown')\nax.text(6.0, 40, 'DeepDFT2', color='green')\n\n# Add a rectangle to represent the vertical line\nax.add_patch(plt.Rectangle((3.5, 0), 0.5, 40, fill=False, linestyle='--'))\n\n# Add a rectangle to represent the horizontal line\nax.add_patch(plt.Rectangle((0, 20), 7, 0.5, fill=False, linestyle='--'))\n\n# Add a rectangle to represent the rectangle\nax.add_patch(plt.Rectangle((0.5, 0.5), 0.5, 0.5, fill=True, color='red'))\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Set the title of the plot\nax.set_title('Legend')\n\n# Set the x-axis label\nax.set_xlabel('PC1')\n\n# Set the y-axis label\nax.set_ylabel('PC2')\n\n# Set the x-axis limits\nax.set_xlim(-0.4, 0.4)\n\n# Set the y-axis limits\nax.set_ylim(-0.2, 0.4)\n\n# Set the x-axis ticks\nax.set_xticks([-0.4, -0.2, 0.0, 0.2, 0.4])\n\n# Set the y-axis ticks\nax.set_yticks([-0.2, 0.0, 0.2, 0.4])\n\n# Set the x-axis tick labels\nax.set_xticklabels(['-0.4', '-0.2', '0.0', '0.2', '0.4'])\n\n# Set the y-axis tick labels\nax.set_yticklabels(['-0.2', '0.0', '0.2', '0.4'])\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='pink')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='pink')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='blue')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='pink')\n\n# Set the color of the x-axis spines\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis spines\nax.spines['left'].set_color('pink')\n\n# Set the color of the top x-axis spine\nax.spines['top'].set_color('blue')\n\n# Set the color of the right y-axis spine\nax.spines['right'].set_color('pink')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='pink')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='pink')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='blue')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='pink')\n\n# Set the color of the x-axis spines\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis spines\nax.spines['left'].set_color('pink')\n\n# Set the color of the top x-axis spine\nax.spines['top'].set_color('blue')\n\n# Set the color of the right y-axis spine\nax.spines['right'].set_color('pink')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='pink')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='pink')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='blue')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='pink')\n\n# Set the color of the x-axis spines\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis spines\nax.spines['left'].set_color('pink')\n\n# Set the color of the top x-axis spine\nax.spines['top'].set_color('blue')\n\n# Set the color of the right y-axis spine\nax.spines['right'].set_color('pink')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='pink')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='pink')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='blue')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='pink')\n\n# Set the color of the x-axis spines\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis spines\nax.spines['left'].set_color('pink')\n\n# Set the color of the top x-axis spine\nax.spines['top'].set_color('blue')\n\n# Set the color of the right y-axis spine\nax.spines['right'].set_color('pink')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='pink')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='pink')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='blue')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='pink')\n\n# Set the color of the x-axis spines\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis spines\nax.spines['left'].set_color('pink')\n\n# Set the color of the top x-axis spine\nax.spines['top'].set_color('blue')\n\n# Set the color of the right y-axis spine\nax.spines['right'].set_color('pink')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='pink')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='pink')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='blue')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='pink')\n\n# Set the color of the x-axis spines\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis spines\nax.spines['left'].set_color('pink')\n\n# Set the color of the top x-axis spine\nax.spines['top'].set_color('blue')\n\n# Set the color of the right y-axis spine\nax.spines['right'].set_color('pink')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='pink')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='pink')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='blue')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='pink')\n\n# Set the color of the x-axis spines\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis spines\nax.spines['left'].set_color('pink')\n\n# Set the color of the top x-axis spine\nax.spines['top'].set_color('blue')\n\n# Set the color of the right y-axis spine\nax.spines['right'].set_color('pink')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='pink')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='pink')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='blue')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='pink')\n\n# Set the color of the x-axis spines\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis spines\nax.spines['left'].set_color('pink')\n\n# Set the color of the top x-axis spine\nax.spines['top'].set_color('blue')\n\n# Set the color of the right y-axis spine\nax.spines['right'].set_color('pink')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='pink')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='pink')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='blue')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='pink')\n\n# Set the color of the x-axis spines\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis spines\nax.spines['left'].set_color('pink')\n\n# Set the color of the top x-axis spine\nax.spines['top'].set_color('blue')\n\n# Set the color of the right y-axis spine\nax.spines['right'].set_color('pink')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='pink')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='pink')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='blue')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='pink')\n\n# Set the color of the x-axis spines\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis spines\nax.spines['left'].set_color('pink')\n\n# Set the color of the top x-axis spine\nax.spines['top'].set_color('blue')\n\n# Set the color of the right y-axis spine\nax.spines['right'].set_color('pink')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='pink')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='pink')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='blue')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='pink')\n\n# Set the color of the x-axis spines\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis spines\nax.spines['left'].set_color('pink')\n\n# Set the color of the top x-axis spine\nax.spines['top'].set_color('blue')\n\n# Set the color of the right y-axis spine\nax.spines['right'].set_color('pink')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='pink')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='pink')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='blue')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='pink')\n\n# Set the color of the x-axis spines\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis spines\nax.spines['left'].set_color('pink')\n\n# Set the color of the top x-axis spine\nax.spines['top'].set_color('blue')\n\n# Set the color of the right y-axis spine\nax.spines['right'].set_color('pink')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='pink')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='pink')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='blue')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='pink')\n\n# Set the color of the x-axis spines\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis spines\nax.spines['left'].set_color('pink')\n\n# Set the color of the top x-axis spine\nax.spines['top'].set_color('blue')\n\n# Set the color of the right y-axis spine\nax.spines['right'].set_color('pink')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='pink')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='pink')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='blue')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='pink')\n\n# Set the color of the x-axis spines\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis spines\nax.spines['left'].set_color('pink')\n\n# Set the color of the top x-axis spine\nax.spines['top'].set_color('blue')\n\n# Set the color of the right y-axis spine\nax.spines['right'].set_color('pink')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='pink')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='pink')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='blue')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='pink')\n\n# Set the color of the x-axis spines\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis spines\nax.spines['left'].set_color('pink')\n\n# Set the color of the top x-axis spine\nax.spines['top'].set_color('blue')\n\n# Set the color of the right y-axis spine\nax.spines['right'].set_color('pink')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='pink')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='pink')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='blue')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='pink')\n\n# Set the color of the x-axis spines\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis spines\nax.spines['left'].set_color('pink')\n\n# Set the color of the top x-axis spine\nax.spines['top'].set_color('blue')\n\n# Set the color of the right y-axis spine\nax.spines['right'].set_color('pink')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='pink')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='pink')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='blue')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='pink')\n\n# Set the color of the x-axis spines\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis spines\nax.spines['left'].set_color('pink')\n\n# Set the color of the top x-axis spine\nax.spines['top'].set_color('blue')\n\n# Set the color of the right y-axis spine\nax.spines['right'].set_color('pink')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='pink')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='pink')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='blue')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='pink')\n\n# Set the color of"}
{"file": "dataset/ori_500/scatter_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(7, 10))\n\n# Set the title of the plot\nax.set_title('DE')\n\n# Set the x-axis label\nax.set_xlabel('CQA Similarity')\n\n# Set the y-axis label\nax.set_ylabel('MSE')\n\n# Set the x-axis limits\nax.set_xlim(0.5, 1.1)\n\n# Set the y-axis limits\nax.set_ylim(0.09, 0.13)\n\n# Draw a rectangle around the plot\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\nax.spines['bottom'].set_visible(False)\nax.spines['left'].set_visible(False)\n\n# Add a scatter plot with a circle marker\nax.scatter(0.6, 0.12, color='orange', s=100)\n\n# Add a scatter plot with a circle marker\nax.scatter(0.7, 0.11, color='green', s=100)\n\n# Add a scatter plot with a circle marker\nax.scatter(0.8, 0.10, color='cyan', s=100)\n\n# Add a scatter plot with a circle marker\nax.scatter(0.9, 0.09, color='red', s=100)\n\n# Add a scatter plot with a circle marker\nax.scatter(1.0, 0.08, color='blue', s=100)\n\n# Add a scatter plot with a circle marker\nax.scatter(1.1, 0.07, color='magenta', s=100)\n\n# Add a scatter plot with a circle marker\nax.scatter(0.6, 0.11, color='yellow', s=100)\n\n# Add a scatter plot with a circle marker\nax.scatter(0.7, 0.10, color='lime', s=100)\n\n# Add a scatter plot with a circle marker\nax.scatter(0.8, 0.09, color='pink', s=100)\n\n# Add a scatter plot with a circle marker\nax.scatter(0.9, 0.08, color='brown', s=100)\n\n# Add a scatter plot with a circle marker\nax.scatter(1.0, 0.07, color='grey', s=100)\n\n# Add a scatter plot with a circle marker\nax.scatter(1.1, 0.06, color='black', s=100)\n\n# Add a scatter plot with a circle marker\nax.scatter(0.6, 0.10, color='orange', s=100)\n\n# Add a scatter plot with a circle marker\nax.scatter(0.7, 0.09, color='green', s=100)\n\n# Add a scatter plot with a circle marker\nax.scatter(0.8, 0.08, color='cyan', s=100)\n\n# Add a scatter plot with a circle marker\nax.scatter(0.9, 0.07, color='red', s=100)\n\n# Add a scatter plot with a circle marker\nax.scatter(1.0, 0.06, color='blue', s=100)\n\n# Add a scatter plot with a circle marker\nax.scatter(1.1, 0.05, color='magenta', s=100)\n\n# Add a scatter plot with a circle marker\nax.scatter(0.6, 0.09, color='yellow', s=100)\n\n# Add a scatter plot with a circle marker\nax.scatter(0.7, 0.08, color='lime', s=100)\n\n# Add a scatter plot with a circle marker\nax.scatter(0.8, 0.07, color='pink', s=100)\n\n# Add a scatter plot with a circle marker\nax.scatter(0.9, 0.06, color='brown', s=100)\n\n# Add a scatter plot with a circle marker\nax.scatter(1.0, 0.05, color='grey', s=100)\n\n# Add a scatter plot with a circle marker\nax.scatter(1.1, 0.04, color='black', s=100)\n\n# Add a scatter plot with a circle marker\nax.scatter(0.6, 0.08, color='orange', s=100)\n\n# Add a scatter plot with a circle marker\nax.scatter(0.7, 0.07, color='green', s=100)\n\n# Add a scatter plot with a circle marker\nax.scatter(0.8, 0.06, color='cyan', s=100)\n\n# Add a scatter plot with a circle marker\nax.scatter(0.9, 0.05, color='red', s=100)\n\n# Add a scatter plot with a circle marker\nax.scatter(1.0, 0.04, color='blue', s=100)\n\n# Add a scatter plot with a circle marker\nax.scatter(1.1, 0.03, color='magenta', s=100)\n\n# Add a scatter plot with a circle marker\nax.scatter(0.6, 0.07, color='yellow', s=100)\n\n# Add a scatter plot with a circle marker\nax.scatter(0.7, 0.06, color='lime', s=100)\n\n# Add a scatter plot with a circle marker\nax.scatter(0.8, 0.05, color='pink', s=100)\n\n# Add a scatter plot with a circle marker\nax.scatter(0.9, 0.04, color='brown', s=100)\n\n# Add a scatter plot with a circle marker\nax.scatter(1.0, 0.03, color='grey', s=100)\n\n# Add a scatter plot with a circle marker\nax.scatter(1.1, 0.02, color='black', s=100)\n\n# Add a scatter plot with a circle marker\nax.scatter(0.6, 0.06, color='orange', s=100)\n\n# Add a scatter plot with a circle marker\nax.scatter(0.7, 0.05, color='green', s=100)\n\n# Add a scatter plot with a circle marker\nax.scatter(0.8, 0.04, color='cyan', s=100)\n\n# Add a scatter plot with a circle marker\nax.scatter(0.9, 0.03, color='red', s=100)\n\n# Add a scatter plot with a circle marker\nax.scatter(1.0, 0.02, color='blue', s=100)\n\n# Add a scatter plot with a circle marker\nax.scatter(1.1, 0.01, color='magenta', s=100)\n\n# Add a scatter plot with a circle marker\nax.scatter(0.6, 0.05, color='yellow', s=100)\n\n# Add a scatter plot with a circle marker\nax.scatter(0.7, 0.04, color='lime', s=100)\n\n# Add a scatter plot with a circle marker\nax.scatter(0.8, 0.03, color='pink', s=100)\n\n# Add a scatter plot with a circle marker\nax.scatter(0.9, 0.02, color='brown', s=100)\n\n# Add a scatter plot with a circle marker\nax.scatter(1.0, 0.01, color='grey', s=100)\n\n# Add a scatter plot with a circle marker\nax.scatter(1.1, 0.00, color='black', s=100)\n\n# Add a scatter plot with a circle marker\nax.scatter(0.6, 0.04, color='orange', s=100)\n\n# Add a scatter plot with a circle marker\nax.scatter(0.7, 0.03, color='green', s=100)\n\n# Add a scatter plot with a circle marker\nax.scatter(0.8, 0.02, color='cyan', s=100)\n\n# Add a scatter plot with a circle marker\nax.scatter(0.9, 0.01, color='red', s=100)\n\n# Add a scatter plot with a circle marker\nax.scatter(1.0, 0.00, color='blue', s=100)\n\n# Add a scatter plot with a circle marker\nax.scatter(1.1, -0.01, color='magenta', s=100)\n\n# Add a scatter plot with a circle marker\nax.scatter(0.6, 0.03, color='yellow', s=100)\n\n# Add a scatter plot with a circle marker\nax.scatter(0.7, 0.02, color='lime', s=100)\n\n# Add a scatter plot with a circle marker\nax.scatter(0.8, 0.01, color='pink', s=100)\n\n# Add a scatter plot with a circle marker\nax.scatter(0.9, -0.01, color='brown', s=100)\n\n# Add a scatter plot with a circle marker\nax.scatter(1.0, -0.02, color='grey', s=100)\n\n# Add a scatter plot with a circle marker\nax.scatter(1.1, -0.03, color='black', s=100)\n\n# Add a scatter plot with a circle marker\nax.scatter(0.6, 0.02, color='orange', s=100)\n\n# Add a scatter plot with a circle marker\nax.scatter(0.7, 0.01, color='green', s=100)\n\n# Add a scatter plot with a circle marker\nax.scatter(0.8, -0.01, color='cyan', s=100)\n\n# Add a scatter plot with a circle marker\nax.scatter(0.9, -0.02, color='red', s=100)\n\n# Add a scatter plot with a circle marker\nax.scatter(1.0, -0.03, color='blue', s=100)\n\n# Add a scatter plot with a circle marker\nax.scatter(1.1, -0.04, color='magenta', s=100)\n\n# Add a scatter plot with a circle marker\nax.scatter(0.6, 0.01, color='yellow', s=100)\n\n# Add a scatter plot with a circle marker\nax.scatter(0.7, -0.01, color='lime', s=100)\n\n# Add a scatter plot with a circle marker\nax.scatter(0.8, -0.02, color='pink', s=100)\n\n# Add a scatter plot with a circle marker\nax.scatter(0.9, -0.03, color='brown', s=100)\n\n# Add a scatter plot with a circle marker\nax.scatter(1.0, -0.04, color='grey', s=100)\n\n# Add a scatter plot with a circle marker\nax.scatter(1.1, -0.05, color='black', s=100)\n\n# Add a scatter plot with a circle marker\nax.scatter(0.6, -0.01, color='orange', s=100)\n\n# Add a scatter plot with a circle marker\nax.scatter(0.7, -0.02, color='green', s=100)\n\n# Add a scatter plot with a circle marker\nax.scatter(0.8, -0.03, color='cyan', s=100)\n\n# Add a scatter plot with a circle marker\nax.scatter(0.9, -0.04, color='red', s=100)\n\n# Add a scatter plot with a circle marker\nax.scatter(1.0, -0.05, color='blue', s=100)\n\n# Add a scatter plot with a circle marker\nax.scatter(1.1, -0.06, color='magenta', s=100)\n\n# Add a scatter plot with a circle marker\nax.scatter(0.6, -0.02, color='yellow', s=100)\n\n# Add a scatter plot with a circle marker\nax.scatter(0.7, -0.03, color='lime', s=100)\n\n# Add a scatter plot with a circle marker\nax.scatter(0.8, -0.04, color='pink', s=100)\n\n# Add a scatter plot with a circle marker\nax.scatter(0.9, -0.05, color='brown', s=100)\n\n# Add a scatter plot with a circle marker\nax.scatter(1.0, -0.06, color='grey', s=100)\n\n# Add a scatter plot with a circle marker\nax.scatter(1.1, -0.07, color='black', s=100)\n\n# Add a scatter plot with a circle marker\nax.scatter(0.6, -0.03, color='orange', s=100)\n\n# Add a scatter plot with a circle marker\nax.scatter(0.7, -0.04, color='green', s=100)\n\n# Add a scatter plot with a circle marker\nax.scatter(0.8, -0.05, color='cyan', s=100)\n\n# Add a scatter plot with a circle marker\nax.scatter(0.9, -0.06, color='red', s=100)\n\n# Add a scatter plot with a circle marker\nax.scatter(1.0, -0.07, color='blue', s=100)\n\n# Add a scatter plot with a circle marker\nax.scatter(1.1, -0.08, color='magenta', s=100)\n\n# Add a scatter plot with a circle marker\nax.scatter(0.6, -0.04, color='yellow', s=100)\n\n# Add a scatter plot with a circle marker\nax.scatter(0.7, -0.05, color='lime', s=100)\n\n# Add a scatter plot with a circle marker\nax.scatter(0.8, -0.06, color='pink', s=100)\n\n# Add a scatter plot with a circle marker\nax.scatter(0.9, -0.07, color='brown', s=100)\n\n# Add a scatter plot with a circle marker\nax.scatter(1.0, -0.08, color='grey', s=100)\n\n# Add a scatter plot with a circle marker\nax.scatter(1.1, -0.09, color='black', s=100)\n\n# Add a scatter plot with a circle marker\nax.scatter(0.6, -0.05, color='orange', s=100)\n\n# Add a scatter plot with a circle marker\nax.scatter(0.7, -0.06, color='green', s=100)\n\n# Add a scatter plot with a circle marker\nax.scatter(0.8, -0.07, color='cyan', s=100)\n\n# Add a scatter plot with a circle marker\nax.scatter(0.9, -0.08, color='red', s=100)\n\n# Add a scatter plot with a circle marker\nax.scatter(1.0, -0.09, color='blue', s=100)\n\n# Add a scatter plot with a circle marker\nax.scatter(1.1, -0.10, color='magenta', s=100)\n\n# Add a scatter plot with a circle marker\nax.scatter(0.6, -0.06, color='yellow', s=100)\n\n# Add a scatter plot with a circle marker\nax.scatter(0.7, -0.07, color='lime', s=100)\n\n# Add a scatter plot with a circle marker\nax.scatter(0.8, -0.08, color='pink', s=100)\n\n# Add a scatter plot with a circle marker\nax.scatter(0.9, -0.09, color='brown', s=100)\n\n# Add a scatter plot with a circle marker\nax.scatter(1.0, -0.10, color='grey', s=100)\n\n# Add a scatter plot with a circle marker\nax.scatter(1.1, -0.11, color='black', s=100)\n\n# Add a scatter plot with a circle marker\nax.scatter(0.6, -0.07, color='orange', s=100)\n\n# Add a scatter plot with a circle marker\nax.scatter(0.7, -0.08, color='green', s=100)\n\n# Add a scatter plot with a circle marker\nax.scatter(0.8, -0.09, color='cyan', s=100)\n\n# Add a scatter plot with a circle marker\nax.scatter(0.9, -0.10, color='red', s=100)\n\n# Add a scatter plot with a circle marker\nax.scatter(1.0, -0.11, color='blue', s=100)\n\n# Add a scatter plot with a circle marker\nax.scatter(1.1, -0.12, color='magenta', s=100)\n\n# Add a scatter plot with a circle marker\nax.scatter(0.6, -0.08, color='yellow', s=100)\n\n# Add a scatter plot with a circle marker\nax.scatter(0.7, -0.09, color='lime', s=100)\n\n# Add a scatter plot with a circle marker\nax.scatter(0.8, -0.10, color='pink', s=100)\n\n# Add a scatter plot with a circle marker\nax.scatter(0.9, -0.11, color='brown', s=100)\n\n# Add a scatter plot with a circle marker\nax.scatter(1.0, -0.12, color='grey', s"}
{"file": "dataset/ori_500/tree_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(12.0, 8.0))\n\n# Set the background color of the plot\nax.set_facecolor('#E6F9FF')\n\n# Create a rectangle for the first column\nrect1 = plt.Rectangle((0.1, 0.7), 0.3, 0.3, color='#ADD8E6')\nax.add_patch(rect1)\n\n# Create a rectangle for the second column\nrect2 = plt.Rectangle((0.4, 0.7), 0.2, 0.3, color='#FFD700')\nax.add_patch(rect2)\n\n# Create a rectangle for the third column\nrect3 = plt.Rectangle((0.7, 0.7), 0.3, 0.3, color='#FFA500')\nax.add_patch(rect3)\n\n# Create a rectangle for the fourth column\nrect4 = plt.Rectangle((0.1, 0.4), 0.3, 0.3, color='#87CEEB')\nax.add_patch(rect4)\n\n# Create a rectangle for the fifth column\nrect5 = plt.Rectangle((0.4, 0.4), 0.2, 0.3, color='#ADD8E6')\nax.add_patch(rect5)\n\n# Create a rectangle for the sixth column\nrect6 = plt.Rectangle((0.7, 0.4), 0.3, 0.3, color='#FFD700')\nax.add_patch(rect6)\n\n# Create a rectangle for the seventh column\nrect7 = plt.Rectangle((0.1, 0.1), 0.3, 0.3, color='#FFA500')\nax.add_patch(rect7)\n\n# Create a rectangle for the eighth column\nrect8 = plt.Rectangle((0.4, 0.1), 0.2, 0.3, color='#87CEEB')\nax.add_patch(rect8)\n\n# Create a rectangle for the ninth column\nrect9 = plt.Rectangle((0.7, 0.1), 0.3, 0.3, color='#FFD700')\nax.add_patch(rect9)\n\n# Add text to the rectangles\nax.text(0.2, 0.8, 'physicsforums.com\\n18.42%', ha='center', va='center')\nax.text(0.5, 0.8, 'gmatclub.com\\n6.26%', ha='center', va='center')\nax.text(0.8, 0.8, 'mathworks.com\\n4.91%', ha='center', va='center')\nax.text(0.2, 0.5, 'stackexchange.com\\n30.6%', ha='center', va='center')\nax.text(0.5, 0.5, 'mathoverflow.net\\n10.91%', ha='center', va='center')\nax.text(0.8, 0.5, 'proofwiki.org\\n8.54%', ha='center', va='center')\nax.text(0.2, 0.2, 'mathhelpforum.com\\n14.21%', ha='center', va='center')\nax.text(0.5, 0.2, 'mathhelpboards.com\\n6.15%', ha='center', va='center')\nax.text(0.8, 0.2, 'mathhelpforum.com\\n14.21%', ha='center', va='center')\n\n# Set the limits of the plot\nax.set_xlim(0, 1)\nax.set_ylim(0, 1)\n\n# Remove the axes\nax.axis('off')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/tree_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(12.0, 8.0))\n\n# Set the background color of the plot\nax.set_facecolor('white')\n\n# Define the colors for each rectangle\ncolors = ['purple', 'pink', 'darkblue', 'lightblue', 'orange']\n\n# Define the labels for each rectangle\nlabels = ['Java 10%', 'JavaScript 27%', 'Python 20%', 'C++ 23%', 'Other 8%']\n\n# Define the widths and heights of each rectangle\nwidths = [0.2, 0.4, 0.2, 0.2, 0.2]\nheights = [0.2, 0.4, 0.2, 0.2, 0.2]\n\n# Define the x and y coordinates for each rectangle\nx_coords = [0.1, 0.5, 0.1, 0.5, 0.1]\ny_coords = [0.1, 0.1, 0.5, 0.5, 0.9]\n\n# Draw the rectangles\nfor i in range(len(labels)):\n    ax.add_patch(plt.Rectangle((x_coords[i], y_coords[i]), widths[i], heights[i], color=colors[i]))\n\n# Add the labels to the rectangles\nfor i in range(len(labels)):\n    ax.text(x_coords[i] + widths[i]/2, y_coords[i] + heights[i]/2, labels[i], ha='center', va='center', fontsize=12)\n\n# Set the limits of the plot\nax.set_xlim(0, 1)\nax.set_ylim(0, 1)\n\n# Remove the axes\nax.axis('off')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/tree_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(12, 8))\n\n# Set the background color of the plot\nax.set_facecolor('lightblue')\n\n# Create a rectangle for Adidas\nrect1 = plt.Rectangle((0.1, 0.7), 0.4, 0.2, color='skyblue')\nax.add_patch(rect1)\n\n# Create a rectangle for Under Armour\nrect2 = plt.Rectangle((0.6, 0.7), 0.4, 0.2, color='orange')\nax.add_patch(rect2)\n\n# Create a rectangle for Nike\nrect3 = plt.Rectangle((0.1, 0.4), 0.4, 0.2, color='lightgreen')\nax.add_patch(rect3)\n\n# Create a rectangle for Reebok\nrect4 = plt.Rectangle((0.6, 0.4), 0.4, 0.2, color='yellow')\nax.add_patch(rect4)\n\n# Create a rectangle for Puma\nrect5 = plt.Rectangle((0.1, 0.1), 0.4, 0.2, color='lightgreen')\nax.add_patch(rect5)\n\n# Create a rectangle for New Balance\nrect6 = plt.Rectangle((0.6, 0.1), 0.4, 0.2, color='salmon')\nax.add_patch(rect6)\n\n# Add text annotations\nax.text(0.25, 0.8, 'Adidas\\n13.42%', ha='center', va='center')\nax.text(0.85, 0.8, 'Under Armour\\n8.54%', ha='center', va='center')\nax.text(0.25, 0.5, 'Nike\\n30.6%', ha='center', va='center')\nax.text(0.85, 0.5, 'Reebok\\n10.91%', ha='center', va='center')\nax.text(0.25, 0.2, 'Puma\\n14.21%', ha='center', va='center')\nax.text(0.85, 0.2, 'New Balance\\n6.26%', ha='center', va='center')\n\n# Set the limits of the plot\nax.set_xlim(0, 1)\nax.set_ylim(0, 1)\n\n# Remove the axes\nax.axis('off')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/tree_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(4.0, 6.0))\n\n# Set the background color of the plot\nax.set_facecolor('#FFD7A6')\n\n# Create a bar chart with the data\nbars = ax.bar(['50%', '15%', '20%'], [50, 15, 20], color=['#8B4513', '#ADD8E6', '#90EE90'])\n\n# Add labels to the bars\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 1), ha='center', va='bottom')\n\n# Set the title of the plot\nax.set_title('Bar Chart')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/tree_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Set the background color of the plot\nax.set_facecolor('white')\n\n# Define the rectangles\nrect1 = plt.Rectangle((0.1, 0.7), 0.2, 0.2, color='yellow')\nrect2 = plt.Rectangle((0.4, 0.7), 0.2, 0.2, color='purple')\nrect3 = plt.Rectangle((0.7, 0.7), 0.2, 0.2, color='cyan')\nrect4 = plt.Rectangle((0.1, 0.4), 0.2, 0.2, color='pink')\nrect5 = plt.Rectangle((0.4, 0.4), 0.2, 0.2, color='lightblue')\nrect6 = plt.Rectangle((0.7, 0.4), 0.2, 0.2, color='lightgreen')\nrect7 = plt.Rectangle((0.1, 0.1), 0.2, 0.2, color='orange')\nrect8 = plt.Rectangle((0.4, 0.1), 0.2, 0.2, color='lightblue')\nrect9 = plt.Rectangle((0.7, 0.1), 0.2, 0.2, color='lightgreen')\n\n# Add the rectangles to the plot\nax.add_patch(rect1)\nax.add_patch(rect2)\nax.add_patch(rect3)\nax.add_patch(rect4)\nax.add_patch(rect5)\nax.add_patch(rect6)\nax.add_patch(rect7)\nax.add_patch(rect8)\nax.add_patch(rect9)\n\n# Set the labels for the rectangles\nax.text(0.15, 0.85, 'European\\n15%', ha='center', va='center')\nax.text(0.45, 0.85, 'Australian\\n18%', ha='center', va='center')\nax.text(0.75, 0.85, 'African\\n12%', ha='center', va='center')\nax.text(0.15, 0.55, 'South American\\n10%', ha='center', va='center')\nax.text(0.45, 0.55, 'North American\\n20%', ha='center', va='center')\nax.text(0.75, 0.55, 'Asian\\n25%', ha='center', va='center')\n\n# Set the limits of the plot\nax.set_xlim(0, 1)\nax.set_ylim(0, 1)\n\n# Remove the axes\nax.axis('off')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/violin_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 7.0))\n\n# Set the title of the plot\nax.set_title('Llama2')\n\n# Set the x-axis label\nax.set_xlabel('Number of examples')\n\n# Set the y-axis label\nax.set_ylabel('logP(CL)')\n\n# Set the x-axis limits\nax.set_xlim(1, 5)\n\n# Set the y-axis limits\nax.set_ylim(1, 7)\n\n# Set the x-axis ticks\nax.set_xticks([1, 2, 3, 4, 5])\n\n# Set the y-axis ticks\nax.set_yticks([1, 2, 3, 4, 5, 6, 7])\n\n# Set the x-axis tick labels\nax.set_xticklabels(['1', '2', '3', '4', '5'])\n\n# Set the y-axis tick labels\nax.set_yticklabels(['1', '2', '3', '4', '5', '6', '7'])\n\n# Set the background color of the plot\nax.set_facecolor('white')\n\n# Set the grid lines\nax.grid(True)\n\n# Set the color of the grid lines\nax.grid(color='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the axis labels\nax.xaxis.label.set_color('black')\nax.yaxis.label.set_color('black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the legend\nax.legend().get_texts()[0].set_color('black')\n\n# Set the color of the text\nax.text(3, 6, 'Llama2', fontsize=12, color='black')\n\n# Set the color of the text\nax.text(3, 5, 'Llama2 (In-Chat)', fontsize=12, color='black')\n\n# Set the color of the text\nax.text(3, 4, 'Llama2', fontsize=12, color='black')\n\n# Set the color of the text\nax.text(3, 3, 'Llama2', fontsize=12, color='black')\n\n# Set the color of the text\nax.text(3, 2, 'Llama2', fontsize=12, color='black')\n\n# Set the color of the text\nax.text(3, 1, 'Llama2', fontsize=12, color='black')\n\n# Set the color of the text\nax.text(4, 6, 'Llama2', fontsize=12, color='black')\n\n# Set the color of the text\nax.text(4, 5, 'Llama2 (In-Chat)', fontsize=12, color='black')\n\n# Set the color of the text\nax.text(4, 4, 'Llama2', fontsize=12, color='black')\n\n# Set the color of the text\nax.text(4, 3, 'Llama2', fontsize=12, color='black')\n\n# Set the color of the text\nax.text(4, 2, 'Llama2', fontsize=12, color='black')\n\n# Set the color of the text\nax.text(4, 1, 'Llama2', fontsize=12, color='black')\n\n# Set the color of the text\nax.text(5, 6, 'Llama2', fontsize=12, color='black')\n\n# Set the color of the text\nax.text(5, 5, 'Llama2 (In-Chat)', fontsize=12, color='black')\n\n# Set the color of the text\nax.text(5, 4, 'Llama2', fontsize=12, color='black')\n\n# Set the color of the text\nax.text(5, 3, 'Llama2', fontsize=12, color='black')\n\n# Set the color of the text\nax.text(5, 2, 'Llama2', fontsize=12, color='black')\n\n# Set the color of the text\nax.text(5, 1, 'Llama2', fontsize=12, color='black')\n\n# Set the color of the text\nax.text(6, 6, 'Llama2', fontsize=12, color='black')\n\n# Set the color of the text\nax.text(6, 5, 'Llama2 (In-Chat)', fontsize=12, color='black')\n\n# Set the color of the text\nax.text(6, 4, 'Llama2', fontsize=12, color='black')\n\n# Set the color of the text\nax.text(6, 3, 'Llama2', fontsize=12, color='black')\n\n# Set the color of the text\nax.text(6, 2, 'Llama2', fontsize=12, color='black')\n\n# Set the color of the text\nax.text(6, 1, 'Llama2', fontsize=12, color='black')\n\n# Set the color of the text\nax.text(7, 6, 'Llama2', fontsize=12, color='black')\n\n# Set the color of the text\nax.text(7, 5, 'Llama2 (In-Chat)', fontsize=12, color='black')\n\n# Set the color of the text\nax.text(7, 4, 'Llama2', fontsize=12, color='black')\n\n# Set the color of the text\nax.text(7, 3, 'Llama2', fontsize=12, color='black')\n\n# Set the color of the text\nax.text(7, 2, 'Llama2', fontsize=12, color='black')\n\n# Set the color of the text\nax.text(7, 1, 'Llama2', fontsize=12, color='black')\n\n# Set the color of the text\nax.text(8, 6, 'Llama2', fontsize=12, color='black')\n\n# Set the color of the text\nax.text(8, 5, 'Llama2 (In-Chat)', fontsize=12, color='black')\n\n# Set the color of the text\nax.text(8, 4, 'Llama2', fontsize=12, color='black')\n\n# Set the color of the text\nax.text(8, 3, 'Llama2', fontsize=12, color='black')\n\n# Set the color of the text\nax.text(8, 2, 'Llama2', fontsize=12, color='black')\n\n# Set the color of the text\nax.text(8, 1, 'Llama2', fontsize=12, color='black')\n\n# Set the color of the text\nax.text(9, 6, 'Llama2', fontsize=12, color='black')\n\n# Set the color of the text\nax.text(9, 5, 'Llama2 (In-Chat)', fontsize=12, color='black')\n\n# Set the color of the text\nax.text(9, 4, 'Llama2', fontsize=12, color='black')\n\n# Set the color of the text\nax.text(9, 3, 'Llama2', fontsize=12, color='black')\n\n# Set the color of the text\nax.text(9, 2, 'Llama2', fontsize=12, color='black')\n\n# Set the color of the text\nax.text(9, 1, 'Llama2', fontsize=12, color='black')\n\n# Set the color of the text\nax.text(10, 6, 'Llama2', fontsize=12, color='black')\n\n# Set the color of the text\nax.text(10, 5, 'Llama2 (In-Chat)', fontsize=12, color='black')\n\n# Set the color of the text\nax.text(10, 4, 'Llama2', fontsize=12, color='black')\n\n# Set the color of the text\nax.text(10, 3, 'Llama2', fontsize=12, color='black')\n\n# Set the color of the text\nax.text(10, 2, 'Llama2', fontsize=12, color='black')\n\n# Set the color of the text\nax.text(10, 1, 'Llama2', fontsize=12, color='black')\n\n# Set the color of the text\nax.text(11, 6, 'Llama2', fontsize=12, color='black')\n\n# Set the color of the text\nax.text(11, 5, 'Llama2 (In-Chat)', fontsize=12, color='black')\n\n# Set the color of the text\nax.text(11, 4, 'Llama2', fontsize=12, color='black')\n\n# Set the color of the text\nax.text(11, 3, 'Llama2', fontsize=12, color='black')\n\n# Set the color of the text\nax.text(11, 2, 'Llama2', fontsize=12, color='black')\n\n# Set the color of the text\nax.text(11, 1, 'Llama2', fontsize=12, color='black')\n\n# Set the color of the text\nax.text(12, 6, 'Llama2', fontsize=12, color='black')\n\n# Set the color of the text\nax.text(12, 5, 'Llama2 (In-Chat)', fontsize=12, color='black')\n\n# Set the color of the text\nax.text(12, 4, 'Llama2', fontsize=12, color='black')\n\n# Set the color of the text\nax.text(12, 3, 'Llama2', fontsize=12, color='black')\n\n# Set the color of the text\nax.text(12, 2, 'Llama2', fontsize=12, color='black')\n\n# Set the color of the text\nax.text(12, 1, 'Llama2', fontsize=12, color='black')\n\n# Set the color of the text\nax.text(13, 6, 'Llama2', fontsize=12, color='black')\n\n# Set the color of the text\nax.text(13, 5, 'Llama2 (In-Chat)', fontsize=12, color='black')\n\n# Set the color of the text\nax.text(13, 4, 'Llama2', fontsize=12, color='black')\n\n# Set the color of the text\nax.text(13, 3, 'Llama2', fontsize=12, color='black')\n\n# Set the color of the text\nax.text(13, 2, 'Llama2', fontsize=12, color='black')\n\n# Set the color of the text\nax.text(13, 1, 'Llama2', fontsize=12, color='black')\n\n# Set the color of the text\nax.text(14, 6, 'Llama2', fontsize=12, color='black')\n\n# Set the color of the text\nax.text(14, 5, 'Llama2 (In-Chat)', fontsize=12, color='black')\n\n# Set the color of the text\nax.text(14, 4, 'Llama2', fontsize=12, color='black')\n\n# Set the color of the text\nax.text(14, 3, 'Llama2', fontsize=12, color='black')\n\n# Set the color of the text\nax.text(14, 2, 'Llama2', fontsize=12, color='black')\n\n# Set the color of the text\nax.text(14, 1, 'Llama2', fontsize=12, color='black')\n\n# Set the color of the text\nax.text(15, 6, 'Llama2', fontsize=12, color='black')\n\n# Set the color of the text\nax.text(15, 5, 'Llama2 (In-Chat)', fontsize=12, color='black')\n\n# Set the color of the text\nax.text(15, 4, 'Llama2', fontsize=12, color='black')\n\n# Set the color of the text\nax.text(15, 3, 'Llama2', fontsize=12, color='black')\n\n# Set the color of the text\nax.text(15, 2, 'Llama2', fontsize=12, color='black')\n\n# Set the color of the text\nax.text(15, 1, 'Llama2', fontsize=12, color='black')\n\n# Set the color of the text\nax.text(16, 6, 'Llama2', fontsize=12, color='black')\n\n# Set the color of the text\nax.text(16, 5, 'Llama2 (In-Chat)', fontsize=12, color='black')\n\n# Set the color of the text\nax.text(16, 4, 'Llama2', fontsize=12, color='black')\n\n# Set the color of the text\nax.text(16, 3, 'Llama2', fontsize=12, color='black')\n\n# Set the color of the text\nax.text(16, 2, 'Llama2', fontsize=12, color='black')\n\n# Set the color of the text\nax.text(16, 1, 'Llama2', fontsize=12, color='black')\n\n# Set the color of the text\nax.text(17, 6, 'Llama2', fontsize=12, color='black')\n\n# Set the color of the text\nax.text(17, 5, 'Llama2 (In-Chat)', fontsize=12, color='black')\n\n# Set the color of the text\nax.text(17, 4, 'Llama2', fontsize=12, color='black')\n\n# Set the color of the text\nax.text(17, 3, 'Llama2', fontsize=12, color='black')\n\n# Set the color of the text\nax.text(17, 2, 'Llama2', fontsize=12, color='black')\n\n# Set the color of the text\nax.text(17, 1, 'Llama2', fontsize=12, color='black')\n\n# Set the color of the text\nax.text(18, 6, 'Llama2', fontsize=12, color='black')\n\n# Set the color of the text\nax.text(18, 5, 'Llama2 (In-Chat)', fontsize=12, color='black')\n\n# Set the color of the text\nax.text(18, 4, 'Llama2', fontsize=12, color='black')\n\n# Set the color of the text\nax.text(18, 3, 'Llama2', fontsize=12, color='black')\n\n# Set the color of the text\nax.text(18, 2, 'Llama2', fontsize=12, color='black')\n\n# Set the color of the text\nax.text(18, 1, 'Llama2', fontsize=12, color='black')\n\n# Set the color of the text\nax.text(19, 6, 'Llama2', fontsize=12, color='black')\n\n# Set the color of the text\nax.text(19, 5, 'Llama2 (In-Chat)', fontsize=12, color='black')\n\n# Set the color of the text\nax.text(19, 4, 'Llama2', fontsize=12, color='black')\n\n# Set the color of the text\nax.text(19, 3, 'Llama2', fontsize=12, color='black')\n\n# Set the color of the text\nax.text(19, 2, 'Llama2', fontsize=12, color='black')\n\n# Set the color of the text\nax.text(19, 1, 'Llama2', fontsize=12, color='black')\n\n# Set the color of the text\nax.text(20, 6, 'Llama2', fontsize=12, color='black')\n\n# Set the color of the text\nax.text(20, 5, 'Llama2 (In-Chat)', fontsize=12, color='black')\n\n# Set the color of the text\nax.text(20, 4, 'Llama2', fontsize=12, color='black')\n\n# Set the color of the text\nax.text(20, 3, 'Llama2', fontsize=12, color='black')\n\n# Set the color of the text\nax.text(20, 2, 'Llama2', fontsize=12, color='black')\n\n# Set the color of the text\nax.text(20, 1, 'Llama2', fontsize=12, color='black')\n\n# Set the color of the text\nax.text(21, 6, 'Llama2', fontsize=12, color='black')\n\n# Set the color of the text\nax.text(21, 5, 'Llama2 (In-Chat)', fontsize=12, color='black')\n\n# Set the color of the text\nax.text(21, 4, 'Llama2', fontsize=12, color='black')\n\n# Set the color of the text\nax.text(21, 3, 'Llama2', fontsize=12, color='black')\n\n# Set the color of the text\nax.text(21, 2, 'Llama2', fontsize=12, color='black')\n\n# Set the color of the text\nax.text(21, 1, 'Llama2', fontsize=12, color='black')\n\n# Set the color of the text\nax.text(22, 6, 'Llama2', fontsize=12, color='black')\n\n# Set the color of the text\nax.text(22, 5, 'Llama2 (In-Chat)', fontsize=12, color='black')\n\n# Set the color of the text\nax.text(22, 4, 'Llama2', fontsize=12, color='"}
{"file": "dataset/ori_500/violin_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Comparison of Scores with and without Memory')\n\n# Set the x-axis label\nax.set_xlabel('Efficiency')\n\n# Set the y-axis label\nax.set_ylabel('Score')\n\n# Set the x-ticks\nax.set_xticks([0.25, 0.75])\n\n# Set the x-tick labels\nax.set_xticklabels(['Without Memory', 'With Memory'])\n\n# Set the y-ticks\nax.set_yticks([0.2, 0.4, 0.6, 0.8, 1.0])\n\n# Set the y-tick labels\nax.set_yticklabels(['0.2', '0.4', '0.6', '0.8', '1.0'])\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.2), 0.5, 0.6, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.8), 0.5, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.7, 0.2), 0.3, 0.6, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.7, 0.8), 0.3, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.2), 0.5, 0.6, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.8), 0.5, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.7, 0.2), 0.3, 0.6, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.7, 0.8), 0.3, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.2), 0.5, 0.6, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.8), 0.5, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.7, 0.2), 0.3, 0.6, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.7, 0.8), 0.3, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.2), 0.5, 0.6, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.8), 0.5, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.7, 0.2), 0.3, 0.6, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.7, 0.8), 0.3, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.2), 0.5, 0.6, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.8), 0.5, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.7, 0.2), 0.3, 0.6, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.7, 0.8), 0.3, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.2), 0.5, 0.6, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.8), 0.5, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.7, 0.2), 0.3, 0.6, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.7, 0.8), 0.3, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.2), 0.5, 0.6, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.8), 0.5, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.7, 0.2), 0.3, 0.6, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.7, 0.8), 0.3, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.2), 0.5, 0.6, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.8), 0.5, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.7, 0.2), 0.3, 0.6, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.7, 0.8), 0.3, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.2), 0.5, 0.6, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.8), 0.5, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.7, 0.2), 0.3, 0.6, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.7, 0.8), 0.3, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.2), 0.5, 0.6, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.8), 0.5, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.7, 0.2), 0.3, 0.6, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.7, 0.8), 0.3, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.2), 0.5, 0.6, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.8), 0.5, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.7, 0.2), 0.3, 0.6, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.7, 0.8), 0.3, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.2), 0.5, 0.6, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.8), 0.5, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.7, 0.2), 0.3, 0.6, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.7, 0.8), 0.3, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.2), 0.5, 0.6, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.8), 0.5, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.7, 0.2), 0.3, 0.6, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.7, 0.8), 0.3, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.2), 0.5, 0.6, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.8), 0.5, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.7, 0.2), 0.3, 0.6, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.7, 0.8), 0.3, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.2), 0.5, 0.6, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.8), 0.5, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.7, 0.2), 0.3, 0.6, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.7, 0.8), 0.3, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.2), 0.5, 0.6, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.8), 0.5, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.7, 0.2), 0.3, 0.6, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.7, 0.8), 0.3, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.2), 0.5, 0.6, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.8), 0.5, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.7, 0.2), 0.3, 0.6, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.7, 0.8), 0.3, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.2), 0.5, 0.6, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.8), 0.5, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.7, 0.2), 0.3, 0.6, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.7, 0.8), 0.3, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.2), 0.5, 0.6, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.8), 0.5, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.7, 0.2), 0.3, 0.6, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.7, 0.8), 0.3, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.2), 0.5, 0.6, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.8), 0.5, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.7, 0.2), 0.3, 0.6, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.7, 0.8), 0.3, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.2), 0.5, 0.6, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.8), 0.5, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.7, 0.2), 0.3, 0.6, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.7, 0.8), 0.3, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.2), 0.5, 0.6, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.8), 0.5, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.7, 0.2), 0.3, 0.6, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.7, 0.8), 0.3, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.2), 0.5, 0.6, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.8), 0.5, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.7, 0.2), 0.3, 0.6, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.7, 0.8), 0.3, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.2), 0.5, 0.6, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.8), 0.5, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.7, 0.2), 0.3, 0.6, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.7, 0.8), 0.3, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.2), 0.5, 0.6, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.8), 0.5, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.7, 0.2), 0.3, 0.6, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.7, 0.8), 0.3, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.2), 0.5, 0.6, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.8), 0.5, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.7, 0.2), 0.3, 0.6, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.7, 0.8), 0.3, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.2), 0.5, 0.6, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.8), 0.5, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.7, 0.2), 0.3, 0.6, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.7, 0.8), 0.3, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.2), 0.5, 0.6, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.8), 0.5, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.7, 0.2), 0.3, 0.6, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0"}
{"file": "dataset/ori_500/violin_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Define the data for the bar chart\ncategories = ['Efficiency', 'Comfort', 'Safety']\nvalues = [0.5, 0.7, 0.8]\n\n# Create a bar chart\nax.bar(categories, values, color='blue')\n\n# Add labels and title\nax.set_xlabel('Categories')\nax.set_ylabel('Score')\nax.set_title('Car Performance Metrics')\n\n# Add a legend\nax.legend(['Without Memory', 'With Memory'], loc='upper right')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/violin_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 4.0))\n\n# Set the title of the plot\nax.set_title('Scoring Evaluation')\n\n# Create a bar chart with the data\nax.bar([1, 2, 3, 4, 5], [0.9, 0.8, 0.7, 0.6, 0.5], color='green')\nax.bar([1, 2, 3, 4, 5], [0.8, 0.7, 0.6, 0.5, 0.4], color='orange')\n\n# Set the x-axis label\nax.set_xlabel('Player')\n\n# Set the y-axis label\nax.set_ylabel('Score')\n\n# Set the y-axis limits\nax.set_ylim(0, 1)\n\n# Add a legend\nax.legend(['GPT-4V(Version)', 'Gemini'])\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/violin_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Define the data for the rectangles\nrectangles = [\n    (0.2, 0.3, 0.4, 0.6),  # (x, y, width, height)\n    (0.5, 0.3, 0.4, 0.6),\n    (0.8, 0.3, 0.4, 0.6)\n]\n\n# Define the colors for the rectangles\ncolors = ['pink', 'lightblue', 'lavender']\n\n# Draw the rectangles\nfor rect, color in zip(rectangles, colors):\n    ax.add_patch(plt.Rectangle((rect[0], rect[1]), rect[2], rect[3], color=color, edgecolor='black'))\n\n# Set the limits of the plot\nax.set_xlim(0, 1)\nax.set_ylim(0, 1)\n\n# Set the title of the plot\nax.set_title('Accuracy Comparison')\n\n# Set the labels of the plot\nax.set_xlabel('Model')\nax.set_ylabel('Accuracy')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/violin_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Define the data for the bars\nx = ['A2', 'B1', 'B2', 'C1', 'C2']\ny = [0.5, 0.7, 0.3, 0.8, 0.9]\n\n# Plot the bars\nbars = ax.bar(x, y, color='blue')\n\n# Add stars at specific positions\nfor bar in bars:\n    height = bar.get_height()\n    if height == 0.5 or height == 0.7 or height == 0.3 or height == 0.8 or height == 0.9:\n        ax.text(bar.get_x() + bar.get_width()/2, height, '*', ha='center', va='bottom', color='yellow')\n\n# Set the title and labels\nax.set_title('Bar Chart with Stars')\nax.set_xlabel('Categories')\nax.set_ylabel('Values')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/violin_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Define the data for the plots\ndata1 = np.random.rand(10)\ndata2 = np.random.rand(10)\n\n# Create the first plot\nax.plot(data1, 'r-')\nax.set_title('Vanilla')\n\n# Create the second plot\nax.plot(data2, 'b-')\nax.set_title('CoT')\n\n# Set the limits of the x-axis\nax.set_xlim(0, 10)\n\n# Set the limits of the y-axis\nax.set_ylim(0, 10)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/violin_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Set the title of the plot\nax.set_title('% Decrease in Test MSE vs. FLAM-GL')\n\n# Set the x-axis label\nax.set_xlabel('Number of Features')\n\n# Set the y-axis label\nax.set_ylabel('% Decrease')\n\n# Set the x-ticks\nax.set_xticks([2, 4, 6, 8, 10])\n\n# Set the y-limits\nax.set_ylim(0, 700)\n\n# Set the y-tick labels\nax.set_yticks(range(0, 701, 100))\n\n# Set the y-tick labels\nax.set_yticklabels(['0%', '100%', '200%', '300%', '400%', '500%', '600%', '700%'])\n\n# Set the x-tick labels\nax.set_xticklabels(['2', '4', '6', '8', '10'])\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('blue')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the title\nax.set_title(' % Decrease in Test MSE vs. FLAM-GL ', color='blue')\n\n# Set the color of the x-axis label\nax.set_xlabel(' Number of Features ', color='blue')\n\n# Set the color of the y-axis label\nax.set_ylabel(' % Decrease ', color='blue')\n\n# Set the color of the x-tick labels\nax.set_xticklabels(['2', '4', '6', '8', '10'], color='blue')\n\n# Set the color of the y-tick labels\nax.set_yticklabels(['0%', '100%', '200%', '300%', '400%', '500%', '600%', '700%'], color='blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the title\nax.set_title(' % Decrease in Test MSE vs. FLAM-GL ', color='blue')\n\n# Set the color of the x-axis label\nax.set_xlabel(' Number of Features ', color='blue')\n\n# Set the color of the y-axis label\nax.set_ylabel(' % Decrease ', color='blue')\n\n# Set the color of the x-tick labels\nax.set_xticklabels(['2', '4', '6', '8', '10'], color='blue')\n\n# Set the color of the y-tick labels\nax.set_yticklabels(['0%', '100%', '200%', '300%', '400%', '500%', '600%', '700%'], color='blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the title\nax.set_title(' % Decrease in Test MSE vs. FLAM-GL ', color='blue')\n\n# Set the color of the x-axis label\nax.set_xlabel(' Number of Features ', color='blue')\n\n# Set the color of the y-axis label\nax.set_ylabel(' % Decrease ', color='blue')\n\n# Set the color of the x-tick labels\nax.set_xticklabels(['2', '4', '6', '8', '10'], color='blue')\n\n# Set the color of the y-tick labels\nax.set_yticklabels(['0%', '100%', '200%', '300%', '400%', '500%', '600%', '700%'], color='blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the title\nax.set_title(' % Decrease in Test MSE vs. FLAM-GL ', color='blue')\n\n# Set the color of the x-axis label\nax.set_xlabel(' Number of Features ', color='blue')\n\n# Set the color of the y-axis label\nax.set_ylabel(' % Decrease ', color='blue')\n\n# Set the color of the x-tick labels\nax.set_xticklabels(['2', '4', '6', '8', '10'], color='blue')\n\n# Set the color of the y-tick labels\nax.set_yticklabels(['0%', '100%', '200%', '300%', '400%', '500%', '600%', '700%'], color='blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the title\nax.set_title(' % Decrease in Test MSE vs. FLAM-GL ', color='blue')\n\n# Set the color of the x-axis label\nax.set_xlabel(' Number of Features ', color='blue')\n\n# Set the color of the y-axis label\nax.set_ylabel(' % Decrease ', color='blue')\n\n# Set the color of the x-tick labels\nax.set_xticklabels(['2', '4', '6', '8', '10'], color='blue')\n\n# Set the color of the y-tick labels\nax.set_yticklabels(['0%', '100%', '200%', '300%', '400%', '500%', '600%', '700%'], color='blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the title\nax.set_title(' % Decrease in Test MSE vs. FLAM-GL ', color='blue')\n\n# Set the color of the x-axis label\nax.set_xlabel(' Number of Features ', color='blue')\n\n# Set the color of the y-axis label\nax.set_ylabel(' % Decrease ', color='blue')\n\n# Set the color of the x-tick labels\nax.set_xticklabels(['2', '4', '6', '8', '10'], color='blue')\n\n# Set the color of the y-tick labels\nax.set_yticklabels(['0%', '100%', '200%', '300%', '400%', '500%', '600%', '700%'], color='blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the title\nax.set_title(' % Decrease in Test MSE vs. FLAM-GL ', color='blue')\n\n# Set the color of the x-axis label\nax.set_xlabel(' Number of Features ', color='blue')\n\n# Set the color of the y-axis label\nax.set_ylabel(' % Decrease ', color='blue')\n\n# Set the color of the x-tick labels\nax.set_xticklabels(['2', '4', '6', '8', '10'], color='blue')\n\n# Set the color of the y-tick labels\nax.set_yticklabels(['0%', '100%', '200%', '300%', '400%', '500%', '600%', '700%'], color='blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the title\nax.set_title(' % Decrease in Test MSE vs. FLAM-GL ', color='blue')\n\n# Set the color of the x-axis label\nax.set_xlabel(' Number of Features ', color='blue')\n\n# Set the color of the y-axis label\nax.set_ylabel(' % Decrease ', color='blue')\n\n# Set the color of the x-tick labels\nax.set_xticklabels(['2', '4', '6', '8', '10'], color='blue')\n\n# Set the color of the y-tick labels\nax.set_yticklabels(['0%', '100%', '200%', '300%', '400%', '500%', '600%', '700%'], color='blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the title\nax.set_title(' % Decrease in Test MSE vs. FLAM-GL ', color='blue')\n\n# Set the color of the x-axis label\nax.set_xlabel(' Number of Features ', color='blue')\n\n# Set the color of the y-axis label\nax.set_ylabel(' % Decrease ', color='blue')\n\n# Set the color of the x-tick labels\nax.set_xticklabels(['2', '4', '6', '8', '10'], color='blue')\n\n# Set the color of the y-tick labels\nax.set_yticklabels(['0%', '100%', '200%', '300%', '400%', '500%', '600%', '700%'], color='blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the title\nax.set_title(' % Decrease in Test MSE vs. FLAM-GL ', color='blue')\n\n# Set the color of the x-axis label\nax.set_xlabel(' Number of Features ', color='blue')\n\n# Set the color of the y-axis label\nax.set_ylabel(' % Decrease ', color='blue')\n\n# Set the color of the x-tick labels\nax.set_xticklabels(['2', '4', '6', '8', '10'], color='blue')\n\n# Set the color of the y-tick labels\nax.set_yticklabels(['0%', '100%', '200%', '300%', '400%', '500%', '600%', '700%'], color='blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the title\nax.set_title(' % Decrease in Test MSE vs. FLAM-GL ', color='blue')\n\n# Set the color of the x-axis label\nax.set_xlabel(' Number of Features ', color='blue')\n\n# Set the color of the y-axis label\nax.set_ylabel(' % Decrease ', color='blue')\n\n# Set the color of the x-tick labels\nax.set_xticklabels(['2', '4', '6', '8', '10'], color='blue')\n\n# Set the color of the y-tick labels\nax.set_yticklabels(['0%', '100%', '200%', '300%', '400%', '500%', '600%', '700%'], color='blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the title\nax.set_title(' % Decrease in Test MSE vs. FLAM-GL ', color='blue')\n\n# Set the color of the x-axis label\nax.set_xlabel(' Number of Features ', color='blue')\n\n# Set the color of the y-axis label\nax.set_ylabel(' % Decrease ', color='blue')\n\n# Set the color of the x-tick labels\nax.set_xticklabels(['2', '4', '6', '8', '10'], color='blue')\n\n# Set the color of the y-tick labels\nax.set_yticklabels(['0%', '100%', '200%', '300%', '400%', '500%', '600%', '700%'], color='blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the title\nax.set_title(' % Decrease in Test MSE vs. FLAM-GL ', color='blue')\n\n# Set the color of the x-axis label\nax.set_xlabel(' Number of Features ', color='blue')\n\n# Set the color of the y-axis label\nax.set_ylabel(' % Decrease ', color='blue')\n\n# Set the color of the x-tick labels\nax.set_xticklabels(['2', '4', '6', '8', '10'], color='blue')\n\n# Set the color of the y-tick labels\nax.set_yticklabels(['0%', '100%', '200%', '300%', '400%', '500%', '600%', '700%'], color='blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the title\nax.set_title(' % Decrease in Test MSE vs. FLAM-GL ', color='blue')\n\n# Set the color of the x-axis label\nax.set_xlabel(' Number of Features ', color='blue')\n\n# Set the color of the y-axis label\nax.set_ylabel(' % Decrease ', color='blue')\n\n# Set the color of the x-tick labels\nax.set_xticklabels(['2', '4', '6', '8', '10'], color='blue')\n\n# Set the color of the y-tick labels\nax.set_yticklabels(['0%', '100%', '200%', '300%', '400%', '500%', '600%', '700%'], color='blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the title\nax.set_title(' % Decrease in Test MSE vs. FLAM-GL ', color='blue')\n\n# Set the color of the x-axis label\nax.set_xlabel(' Number of Features ', color='blue')\n\n# Set the color of the y-axis label\nax.set_ylabel(' % Decrease ', color='blue')\n\n# Set the color of the x-tick labels\nax.set_xticklabels(['2', '4', '6', '8', '10'], color='blue')\n\n# Set the color of the y-tick labels\nax.set_yticklabels(['0%', '100%', '200%', '300%', '400%', '500%', '600%', '700%'], color='blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the title\nax.set_title(' % Decrease in Test MSE vs. FLAM-GL ', color='blue')\n\n# Set the color of the x-axis label\nax.set_xlabel(' Number of Features ', color='blue')\n\n# Set the color of the y-axis label\nax.set_ylabel(' % Decrease ', color='blue')\n\n# Set the color of the x-tick labels\nax.set_xticklabels(['2', '4', '6', '8', '10'], color='blue')\n\n# Set the color of the y-tick labels\nax.set_yticklabels(['0%', '100%', '200%', '300%', '400%', '500%', '600%', '700%'], color='blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='"}
{"file": "dataset/ori_500/violin_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Define the data\nx = np.array([0.88, 0.85, 0.79, 0.67, 0.57])\ny = np.array([0.18, 0.19, 0.19, 0.18, 0.16])\n\n# Plot the data\nax.plot(x, y, 'ro-')\n\n# Set the title and labels\nax.set_title('Decimated Sampling Rate')\nax.set_xlabel('Decimated Sampling Rate')\nax.set_ylabel('KCC')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/violin_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(12, 8))\n\n# Set the title of the plot\nax.set_title('Distribution of Grades: Class 1')\n\n# Create a rectangle patch for the first bar chart\nrect1 = plt.Rectangle((0.1, 0.1), 0.3, 0.8, color='lightblue')\nax.add_patch(rect1)\n\n# Create a rectangle patch for the second bar chart\nrect2 = plt.Rectangle((0.5, 0.1), 0.3, 0.8, color='lightblue')\nax.add_patch(rect2)\n\n# Set the x-axis label\nax.set_xlabel('Boys')\n\n# Set the y-axis label\nax.set_ylabel('Grades')\n\n# Set the x-axis limits\nax.set_xlim(0, 1)\n\n# Set the y-axis limits\nax.set_ylim(0, 100)\n\n# Set the x-tick labels\nax.set_xticks([0.1, 0.5])\nax.set_xticklabels(['Boys', 'Girls'])\n\n# Set the y-tick labels\nax.set_yticks([0, 20, 40, 60, 80, 100])\n\n# Display the plot\nplt.show()\n```"}
