{"file": "dataset/ori_500/3d_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create sample data\nx = np.linspace(0, 10, 100)\ny1 = np.sin(x)\ny2 = np.cos(x)\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(7.0, 7.0))\n\n# Plot the data with enhanced styles\nax.plot(x, y1, label='Targets', color='darkorange', linestyle='-', linewidth=2, marker='o', markersize=5)\nax.plot(x, y2, label='Predictions', color='royalblue', linestyle='--', linewidth=2, marker='s', markersize=5)\n\n# Set labels and title with improved font sizes\nax.set_xlabel('Time (s)', fontsize=12)\nax.set_ylabel('Amplitude', fontsize=12)\nax.set_title('Comparison of Targets and Predictions', fontsize=14, fontweight='bold')\n\n# Add grid for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5, alpha=0.7)\n\n# Customize ticks\nax.set_xticks(np.arange(0, 11, 1))\nax.set_yticks(np.arange(-1, 1.5, 0.5))\n\n# Add a legend with a shadow effect\nax.legend(loc='upper right', fontsize=10, shadow=True)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create data for a 3D bar chart\nx = np.array([0.5, 1.5, 2.5, 3.5])\ny = np.array([0.5, 1.5, 2.5, 3.5])\nz = np.zeros_like(x)\ndx = dy = dz = np.ones_like(x)\n\n# Create a new figure with a larger size for better visibility\nfig = plt.figure(figsize=(8.0, 6.0))\nax = fig.add_subplot(111, projection='3d')\n\n# Plot the 3D bar chart\nbars = ax.bar3d(x, y, z, dx, dy, dz, color='red', shade=True, edgecolor='black')\n\n# Set labels and title\nax.set_xlabel('Height')\nax.set_ylabel('Width')\nax.set_zlabel('Count')\nax.set_title('3D Bar Chart Example')\n\n# Add grid lines for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Add a legend\nax.legend([bars], ['Data Points'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_11.pdf", "response": "```python\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\n\n# Define the grid for the surface plot\nx = np.linspace(-5, 5, 100)\ny = np.linspace(-5, 5, 100)\nx, y = np.meshgrid(x, y)\nz = np.sin(np.sqrt(x**2 + y**2))\n\n# Create a new figure with a larger size for better visibility\nfig = plt.figure(figsize=(8.0, 6.0))\nax = fig.add_subplot(111, projection='3d')\n\n# Plot the surface with enhanced aesthetics\nsurf = ax.plot_surface(x, y, z, cmap='viridis', edgecolor='none', alpha=0.8)\n\n# Add a color bar which maps values to colors\ncbar = fig.colorbar(surf, shrink=0.5, aspect=10)\ncbar.set_label('Z Value')\n\n# Set labels with more descriptive text\nax.set_xlabel('X Axis')\nax.set_ylabel('Y Axis')\nax.set_zlabel('Z Axis')\n\n# Set a title for the plot\nax.set_title('3D Surface Plot of a Function', fontsize=14, fontweight='bold')\n\n# Customize the view angle\nax.view_init(elev=30, azim=120)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nimport numpy as np\n\n# Create data for plotting\nx = np.linspace(-4, 4, 10)\ny = np.linspace(-2, 2, 10)\nx, y = np.meshgrid(x, y)\nz = x**2 + y**2\n\n# Create a new figure with a larger size for better visibility\nfig = plt.figure(figsize=(8.0, 6.0))\nax = fig.add_subplot(111, projection='3d')\n\n# Plot the surface with enhanced aesthetics\nsurf = ax.plot_surface(x, y, z, cmap='viridis', edgecolor='none', alpha=0.8)\n\n# Add contour lines on the surface for better depth perception\ncontour = ax.contour(x, y, z, zdir='z', offset=-1, cmap='coolwarm', linewidths=2)\n\n# Add color bar which maps values to colors\ncbar = fig.colorbar(surf, shrink=0.5, aspect=5)\ncbar.set_label('Volume (L)')\n\n# Set labels with more descriptive text\nax.set_xlabel('Temperature (\u00b0C)', fontsize=12)\nax.set_ylabel('Pressure (kPa)', fontsize=12)\nax.set_zlabel('Volume (L)', fontsize=12)\n\n# Add a title to the plot\nax.set_title('3D Surface Plot of Volume vs Temperature and Pressure', fontsize=14, pad=20)\n\n# Add grid lines for better readability\nax.grid(True, linestyle='--', alpha=0.5)\n\n# Add annotations for clarity\nax.text(0, 0, 0, 'Origin', fontsize=10, ha='center', va='center', color='black')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Number of students in public and private schools over years\nyears = np.array([2010, 2012, 2014, 2016, 2018])\npublic_schools = np.array([0.3, 0.4, 0.5, 0.6, 0.7])\nprivate_schools = np.array([0.1, 0.2, 0.3, 0.4, 0.5])\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data with different colors and styles\nax.bar(years - 0.2, public_schools, width=0.4, color='orange', label='Public Schools')\nax.bar(years + 0.2, private_schools, width=0.4, color='blue', label='Private Schools')\n\n# Set labels and title with improved font sizes\nax.set_xlabel('Year', fontsize=12)\nax.set_ylabel('Student to Teacher Ratio', fontsize=12)\nax.set_title('Comparison of Student to Teacher Ratios in Public and Private Schools', fontsize=14)\n\n# Add grid lines for better readability\nax.grid(True, linestyle='--', alpha=0.7)\n\n# Add a legend with a slightly larger font size\nax.legend(fontsize=10)\n\n# Enhance the layout\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_14.pdf", "response": "```python\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\n\n# Create data\nx = np.linspace(0, 10, 100)\ny = np.linspace(0, 10, 100)\nx, y = np.meshgrid(x, y)\nz = np.sin(np.sqrt(x**2 + y**2))\n\n# Create a new figure with a specific size\nfig = plt.figure(figsize=(8.0, 6.0))\nax = fig.add_subplot(111, projection='3d')\n\n# Plot the surface with enhanced aesthetics\nsurf = ax.plot_surface(x, y, z, cmap='viridis', edgecolor='none', alpha=0.8)\n\n# Add a color bar which maps values to colors\ncbar = fig.colorbar(surf, shrink=0.5, aspect=10)\ncbar.set_label('Incidence Rate')\n\n# Set labels with improved font size and style\nax.set_xlabel('Age', fontsize=12, fontweight='bold')\nax.set_ylabel('Vaccination Number', fontsize=12, fontweight='bold')\nax.set_zlabel('Incidence Rate', fontsize=12, fontweight='bold')\n\n# Add a title with enhanced font size and style\nax.set_title('Infection Rate by Age and Vaccination Number', fontsize=14, fontweight='bold')\n\n# Customize the view angle for better perspective\nax.view_init(elev=30, azim=120)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data for the first plot: Investment over time by sector\nsectors = ['AI', 'Healthcare', 'Finance', 'Tech']\nyears = [2010, 2012, 2014, 2016, 2018]\ninvestments = [\n    [1.5, 2.0, 3.0, 4.0, 5.0],  # AI\n    [0.5, 0.7, 1.0, 1.2, 1.5],  # Healthcare\n    [1.0, 1.5, 2.0, 2.5, 3.0],  # Finance\n    [2.0, 2.5, 3.0, 3.5, 4.0]   # Tech\n]\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Plot the data with enhanced aesthetics\nfor i, sector in enumerate(sectors):\n    ax.barh(years, investments[i], left=np.sum(investments[:i], axis=0), color=plt.cm.viridis(i / len(sectors)), label=sector)\n\n# Set labels and title\nax.set_xlabel('Investment (Billion USD)', fontsize=12)\nax.set_ylabel('Year', fontsize=12)\nax.set_title('Investment in Various Sectors Over Time', fontsize=14, fontweight='bold')\n\n# Add grid lines for better readability\nax.grid(axis='x', linestyle='--', alpha=0.7)\n\n# Add a legend\nax.legend(title='Sector', loc='upper right', fontsize=10)\n\n# Add annotations for each bar\nfor i, sector in enumerate(sectors):\n    for j, value in enumerate(investments[i]):\n        ax.text(value + np.sum(investments[:i], axis=0)[j], j, f'{value}', ha='left', va='center', fontsize=9)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n\n# Sample data for the second plot: Adoption rate over time by technology level\ntime_since_introduction = np.arange(1, 11)\ntechnology_levels = ['Low', 'Medium', 'High']\nadoption_rates = [\n    [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0],  # Low\n    [0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1],  # Medium\n    [0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2]   # High\n]\n\n# Create a new figure for the second plot\nfig2, ax2 = plt.subplots(figsize=(10.0, 8.0))\n\n# Plot the data with enhanced aesthetics\nfor i, level in enumerate(technology_levels):\n    ax2.scatter(time_since_introduction, adoption_rates[i], s=100, c=plt.cm.plasma(i / len(technology_levels)), label=level, edgecolor='w', linewidth=1.5)\n\n# Set labels and title\nax2.set_xlabel('Time Since Introduction (Years)', fontsize=12)\nax2.set_ylabel('Adoption Rate', fontsize=12)\nax2.set_title('Adoption Rate of Technology Over Time', fontsize=14, fontweight='bold')\n\n# Add grid lines for better readability\nax2.grid(True, linestyle='--', alpha=0.7)\n\n# Add a legend\nax2.legend(title='Technology Level', loc='lower right', fontsize=10)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_2.pdf", "response": "```python\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\n\n# Define the data for the first plot\nx = np.linspace(-1, 1, 100)\ny = np.linspace(-1, 1, 100)\nX, Y = np.meshgrid(x, y)\nZ = X**2 + Y**2\n\n# Create a new figure with two subplots side by side\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10.0, 7.0), subplot_kw={'projection': '3d'})\n\n# Plot the first subplot\nsurf1 = ax1.plot_surface(X, Y, Z, cmap='viridis', edgecolor='none')\nax1.set_title('f(x)')\nax1.set_xlabel('X')\nax1.set_ylabel('Y')\nax1.set_zlabel('Z')\nax1.view_init(elev=30, azim=45)\n\n# Add color bar for reference\ncbar1 = fig.colorbar(surf1, ax=ax1, shrink=0.5, aspect=10)\ncbar1.set_label('Z Value')\n\n# Plot the second subplot\nsurf2 = ax2.contourf(X, Y, Z, levels=20, cmap='plasma')\nax2.set_title('solution')\nax2.set_xlabel('X')\nax2.set_ylabel('Y')\nax2.set_zlabel('Z')\nax2.view_init(elev=30, azim=-45)\n\n# Add color bar for reference\ncbar2 = fig.colorbar(surf2, ax=ax2, shrink=0.5, aspect=10)\ncbar2.set_label('Z Value')\n\n# Adjust layout for better spacing\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nimport numpy as np\n\n# Create data for the plot\nx = np.linspace(0, 5, 100)\ny = np.linspace(0, 5, 100)\nx, y = np.meshgrid(x, y)\nz = np.sin(np.sqrt(x**2 + y**2))\n\n# Create a new figure with a larger size for better visibility\nfig = plt.figure(figsize=(10.0, 6.0))\nax = fig.add_subplot(111, projection='3d')\n\n# Plot the surface with enhanced color mapping and edge colors\nsurf = ax.plot_surface(x, y, z, cmap='viridis', edgecolor='none', alpha=0.8)\n\n# Add a color bar which maps values to colors\ncbar = fig.colorbar(surf, shrink=0.5, aspect=10)\ncbar.set_label('Accuracy (%)')\n\n# Set labels with more descriptive text\nax.set_xlabel('K')\nax.set_ylabel('T')\nax.set_zlabel('tau')\n\n# Set a title for the plot\nax.set_title('CIFAR10 Spiking ResNet18 T=6', fontsize=14, fontweight='bold')\n\n# Customize the view angle for better perspective\nax.view_init(elev=30, azim=120)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nimport numpy as np\n\n# Create data for the plots\nx = np.linspace(-100, 100, 200)\ny = np.linspace(-100, 100, 200)\nX, Y = np.meshgrid(x, y)\nZ1 = np.sin(np.sqrt(X**2 + Y**2))\nZ2 = np.cos(np.sqrt(X**2 + Y**2))\nZ3 = np.exp(-(X**2 + Y**2) / 100)\n\n# Create a new figure with a larger size for better visibility\nfig, axes = plt.subplots(2, 2, figsize=(15.0, 10.0), subplot_kw={'projection': '3d'})\n\n# Plot 1: Simple surface plot\nax1 = axes[0, 0]\nsurf1 = ax1.plot_surface(X, Y, Z1, cmap='viridis', edgecolor='none')\nax1.set_title('Origin')\nax1.set_xlabel('m')\nax1.set_ylabel('n')\nax1.set_zlabel('Freedom')\nfig.colorbar(surf1, ax=ax1, shrink=0.5, aspect=10)\n\n# Plot 2: Contour plot with shading\nax2 = axes[0, 1]\ncontour2 = ax2.contourf(X, Y, Z2, levels=20, cmap='plasma', alpha=0.8)\nax2.set_title('MG (ours)')\nax2.set_xlabel('m')\nax2.set_ylabel('n')\nfig.colorbar(contour2, ax=ax2, shrink=0.5, aspect=10)\n\n# Plot 3: Wireframe plot\nax3 = axes[1, 0]\nwireframe3 = ax3.plot_wireframe(X, Y, Z3, color='green', linewidth=0.5)\nax3.set_title('Origin')\nax3.set_xlabel('m')\nax3.set_ylabel('n')\nax3.set_zlabel('Freedom')\n\n# Plot 4: Surface plot with a different colormap\nax4 = axes[1, 1]\nsurf4 = ax4.plot_surface(X, Y, Z3, cmap='coolwarm', edgecolor='none')\nax4.set_title('MG (ours)')\nax4.set_xlabel('m')\nax4.set_ylabel('n')\nax4.set_zlabel('Freedom')\nfig.colorbar(surf4, ax=ax4, shrink=0.5, aspect=10)\n\n# Adjust layout and display the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nimport numpy as np\n\n# Create data for plotting\nx = np.linspace(0, 1, 50)\ny = np.linspace(0, 1, 50)\nx, y = np.meshgrid(x, y)\nz = np.sin(np.pi * x) * np.cos(2 * np.pi * y)\n\n# Create a new figure with a larger size for better visibility\nfig = plt.figure(figsize=(7.0, 7.0))\nax = fig.add_subplot(111, projection='3d')\n\n# Plot the surface with enhanced aesthetics\nsurf = ax.plot_surface(x, y, z, cmap='viridis', edgecolor='none', alpha=0.8)\n\n# Add contour lines on the surface for better depth perception\ncontour = ax.contour(x, y, z, zdir='z', offset=-1.0, cmap='coolwarm', linewidths=0.5)\n\n# Set labels with improved font size and style\nax.set_xlabel('X Axis', fontsize=12, fontweight='bold')\nax.set_ylabel('Y Axis', fontsize=12, fontweight='bold')\nax.set_zlabel('Z Axis', fontsize=12, fontweight='bold')\n\n# Add a color bar which maps values to colors\ncbar = fig.colorbar(surf, shrink=0.5, aspect=5)\ncbar.set_label('Z Value', fontsize=10)\n\n# Add grid lines for better readability\nax.grid(True, linestyle='--', alpha=0.5)\n\n# Add a title with improved font size and style\nax.set_title('3D Surface Plot with Contours', fontsize=14, fontweight='bold')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nimport numpy as np\n\n# Create data for the plot\nx = np.linspace(-4, 4, 100)\ny = np.linspace(-4, 4, 100)\nx, y = np.meshgrid(x, y)\nz = np.sin(np.sqrt(x**2 + y**2))\n\n# Create a new figure with a specific size\nfig = plt.figure(figsize=(8.0, 8.0))\nax = fig.add_subplot(111, projection='3d')\n\n# Plot the surface with enhanced aesthetics\nsurf = ax.plot_surface(x, y, z, cmap='viridis', edgecolor='none', alpha=0.8)\n\n# Add contour lines on the surface\ncontour = ax.contour(x, y, z, zdir='z', offset=-1.5, cmap='coolwarm')\n\n# Set labels and title\nax.set_xlabel('Time')\nax.set_ylabel('Bus')\nax.set_zlabel('Value')\nax.set_title('3D Surface Plot of a Function')\n\n# Add a color bar which maps values to colors\ncbar = fig.colorbar(surf, shrink=0.5, aspect=5)\ncbar.set_label('Color Scale')\n\n# Improve the view angle\nax.view_init(elev=30, azim=120)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create data for a 3D bar chart\nx = np.array([1, 2, 3, 4])\ny = np.array([1, 2, 3, 4])\nz = np.zeros_like(x)\ndx = dy = dz = 0.5\n\n# Define colors for each bar\ncolors = ['red', 'green', 'blue', 'orange']\n\n# Create a new figure with a larger size for better visibility\nfig = plt.figure(figsize=(8.0, 8.0))\nax = fig.add_subplot(111, projection='3d')\n\n# Plot the 3D bar chart\nbars = ax.bar3d(x, y, z, dx, dy, dz, color=colors, shade=True)\n\n# Add labels and title\nax.set_xlabel('X Axis')\nax.set_ylabel('Y Axis')\nax.set_zlabel('Z Axis')\nax.set_title('Styled 3D Bar Chart')\n\n# Customize the color bar\ncbar = plt.colorbar(bars, ax=ax, shrink=0.5, aspect=10)\ncbar.set_label('Intensity')\n\n# Set limits for better visualization\nax.set_xlim([0, 5])\nax.set_ylim([0, 5])\nax.set_zlim([0, 10])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nimport numpy as np\n\n# Create data for the scatter plot\nx = np.array([10, 20, 30, 40, 50, 60, 70, 80, 90, 100])\ny = np.array([15, 25, 35, 45, 55, 65, 75, 85, 95, 105])\nz = np.array([10, 20, 30, 40, 50, 60, 70, 80, 90, 100])\n\n# Create a new figure with a specific size\nfig = plt.figure(figsize=(8.0, 6.0))\nax = fig.add_subplot(111, projection='3d')\n\n# Plot the data with enhanced aesthetics\nscatter = ax.scatter(x, y, z, c=z, cmap='viridis', s=100, edgecolor='k', alpha=0.7)\n\n# Add labels and title\nax.set_xlabel('Age')\nax.set_ylabel('Income')\nax.set_zlabel('Debt')\nax.set_title('3D Scatter Plot of Age, Income, and Debt')\n\n# Add a color bar to indicate the scale\ncbar = fig.colorbar(scatter)\ncbar.set_label('Debt')\n\n# Customize the grid lines\nax.grid(True, linestyle='--', linewidth=0.5, color='gray', alpha=0.7)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nimport numpy as np\n\n# Create data for plotting\nx = np.linspace(10, 50, 100)\ny = np.linspace(15, 35, 100)\nx, y = np.meshgrid(x, y)\nz = np.sin(x / 10) * np.cos(y / 10)\n\n# Create a new figure with a specific size\nfig = plt.figure(figsize=(8.0, 6.0))\nax = fig.add_subplot(111, projection='3d')\n\n# Plot the surface with enhanced aesthetics\nsurf = ax.plot_surface(x, y, z, cmap='viridis', edgecolor='none', alpha=0.8)\n\n# Add contour lines on the surface\ncontour = ax.contour(x, y, z, zdir='z', offset=-1.0, cmap='coolwarm')\n\n# Set labels with improved formatting\nax.set_xlabel('Temperature (\u00b0C)', fontsize=12, labelpad=10)\nax.set_ylabel('Time (s)', fontsize=12, labelpad=10)\nax.set_zlabel('Depth (m)', fontsize=12, labelpad=10)\n\n# Add a color bar which maps values to colors\ncbar = fig.colorbar(surf, shrink=0.5, aspect=10)\ncbar.set_label('Intensity', fontsize=12)\n\n# Add a title and adjust its position\nax.set_title('3D Surface Plot with Contours', fontsize=14, pad=20)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Generate data for demonstration\nx = np.linspace(-20, 20, 400)\ny = np.linspace(-20, 20, 400)\nX, Y = np.meshgrid(x, y)\nZ = np.sin(np.sqrt(X**2 + Y**2)) / (np.sqrt(X**2 + Y**2))\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Plot the heatmap with enhanced color map and transparency\ncax = ax.imshow(Z, cmap='coolwarm', interpolation='nearest', alpha=0.8)\n\n# Add a color bar to the plot\ncbar = fig.colorbar(cax, ax=ax, orientation='vertical')\ncbar.set_label('Density')\n\n# Set labels and title\nax.set_xlabel('LR Test', fontsize=12)\nax.set_ylabel('m^2', fontsize=12)\nax.set_title('Heatmap of Density', fontsize=14)\n\n# Add grid lines for better readability\nax.grid(False)\n\n# Add annotations to highlight specific points\nfor i in range(len(x)):\n    for j in range(len(y)):\n        ax.text(j, i, f'{Z[i, j]:.2f}', ha='center', va='center', color='white' if Z[i, j] > 0.5 else 'black')\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create sample data\nx = np.array([150, 200, 250, 300, 350, 400])\ny = np.array([100, 150, 200, 250, 300, 350])\n\n# Define colors and markers for different categories\ncolors = ['blue', 'orange', 'green']\nmarkers = ['o', 's', '^']\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(7.0, 5.0))\n\n# Plot the data with different styles for each category\nfor i in range(len(x)):\n    ax.scatter(x[i], y[i], color=colors[i % len(colors)], marker=markers[i % len(markers)], s=100, alpha=0.7)\n\n# Add a grid for better readability\nax.grid(True, linestyle='--', alpha=0.6)\n\n# Set labels with improved font size and style\nax.set_xlabel('Average Tracked ORB Feature Number', fontsize=12, fontweight='bold')\nax.set_ylabel('ATE RMSE', fontsize=12, fontweight='bold')\n\n# Add a title with enhanced styling\nax.set_title('Log(ATE RMSE) vs Average Tracked ORB Feature Number', fontsize=14, fontweight='bold')\n\n# Add a legend with a custom location\nax.legend(['Low', 'Middle', 'High'], loc='upper left', fontsize=10)\n\n# Add annotations to highlight key points\nfor i in range(len(x)):\n    ax.annotate(f'({x[i]}, {y[i]})', (x[i], y[i]), textcoords=\"offset points\", xytext=(0,10), ha='center')\n\n# Add a shaded region to represent a confidence interval\nax.axhspan(-4, -2, color='gray', alpha=0.3, label='Confidence Interval')\n\n# Add a line of best fit\nz = np.polyfit(x, y, 1)\np = np.poly1d(z)\nax.plot(x, p(x), \"r--\", linewidth=2)\n\n# Add a correlation coefficient annotation\ncorrelation_coefficient = np.corrcoef(x, y)[0, 1]\nax.text(150, -3, f'Correlation: {correlation_coefficient:.2f}', fontsize=10, color='red')\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Log of ATE RMSE vs Log of Depth L1\nlog_ate_rmse = np.array([-2.3, -1.8, -1.4, -1.0, -0.6, -0.2, 0.2, 0.6, 1.0, 1.4, 1.8, 2.2])\nlog_depth_l1 = np.array([-3.0, -2.5, -2.0, -1.5, -1.0, -0.5, 0.0, 0.5, 1.0, 1.5, 2.0, 2.5])\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(7.0, 5.0))\n\n# Plot the data with enhanced aesthetics\nscatter = ax.scatter(log_depth_l1, log_ate_rmse, c=log_ate_rmse, cmap='viridis', s=100, alpha=0.7, edgecolor='k')\n\n# Add a color bar which maps values to colors\ncbar = plt.colorbar(scatter)\ncbar.set_label('Log ATE RMSE')\n\n# Add a grid for better readability\nax.grid(True, linestyle='--', alpha=0.6)\n\n# Set labels with more descriptive text\nax.set_xlabel('Log (Depth L1)', fontsize=12)\nax.set_ylabel('Log (ATE RMSE)', fontsize=12)\n\n# Add a title\nax.set_title('Log ATE RMSE vs Log Depth L1', fontsize=14, fontweight='bold')\n\n# Add a regression line\nz = np.polyfit(log_depth_l1, log_ate_rmse, 1)\np = np.poly1d(z)\nax.plot(log_depth_l1, p(log_depth_l1), \"r--\", lw=2)\n\n# Annotate the correlation coefficient\ncorrelation_coefficient = np.corrcoef(log_depth_l1, log_ate_rmse)[0, 1]\nax.annotate(f'Correlation: {correlation_coefficient:.2f}', xy=(0.1, 0.9), xycoords=ax.transAxes, fontsize=10)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Average Top-5 Persistence of 1D Histograms\nx = np.array([0.0, 0.2, 0.4, 0.6, 0.8])\ny = np.array([0.1, 0.3, 0.5, 0.7, 0.9])\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data with enhanced aesthetics\nax.plot(x, y, color='darkred', linestyle='-', linewidth=2, marker='o', markersize=8, label='T-test p-value = 0.0000')\n\n# Fill the area under the curve with a semi-transparent color\nax.fill_between(x, y, color='lightcoral', alpha=0.3)\n\n# Set labels and title with improved font sizes and styles\nax.set_xlabel('Average Top-5 Persistence of 1D Histograms', fontsize=12, fontweight='bold')\nax.set_ylabel('Density', fontsize=12, fontweight='bold')\nax.set_title('Comparison of Persistence Diagrams', fontsize=14, fontweight='bold')\n\n# Add grid lines for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5, alpha=0.7)\n\n# Customize ticks\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Add a legend with a shadow effect\nax.legend(loc='upper left', fontsize=10, shadow=True)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.array([1, 2, 3, 4, 5])\ny_snacks = np.array([0.6, 0.7, 0.8, 0.9, 0.85])\ny_nav = np.array([0.5, 0.6, 0.7, 0.8, 0.75])\ny_qsel = np.array([0.4, 0.5, 0.6, 0.7, 0.65])\ny_objcount = np.array([0.3, 0.4, 0.5, 0.6, 0.55])\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(10.0, 4.0))\n\n# Plot the data with different styles\nax.plot(x, y_snacks, label='snacks', color='royalblue', linestyle='-', linewidth=2, marker='o', markersize=6)\nax.plot(x, y_nav, label='navigate', color='darkgreen', linestyle='--', linewidth=2, marker='s', markersize=6)\nax.plot(x, y_qsel, label='question_selection', color='darkred', linestyle='-.', linewidth=2, marker='^', markersize=6)\nax.plot(x, y_objcount, label='object_counting', color='darkorange', linestyle=':', linewidth=2, marker='D', markersize=6)\n\n# Set labels and title\nax.set_xlabel('Tasks', fontsize=12)\nax.set_ylabel('Scores', fontsize=12)\nax.set_title('Comparison of APO & APO-APEs (GPT-3 5-Turbo)', fontsize=14, fontweight='bold')\n\n# Add grid for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5, alpha=0.7)\n\n# Customize ticks\nax.set_xticks(x)\nax.set_yticks(np.arange(0.3, 1.0, 0.1))\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Add legend with a shadow effect\nax.legend(loc='upper left', fontsize=10, shadow=True)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Simulating a scenario where we have two different distributions\nx = np.linspace(0, 1.4, 100)\ny1 = np.sin(x * np.pi / 2) * np.exp(-x) + 0.5\ny2 = np.cos(x * np.pi / 2) * np.exp(-x) + 0.5\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot the data with enhanced aesthetics\nax.plot(x, y1, label='H-wand - centers-cos', color='royalblue', linestyle='-', linewidth=2, marker='o', markersize=5)\nax.plot(x, y2, label='random', color='hotpink', linestyle='--', linewidth=2, marker='s', markersize=5)\n\n# Set labels and title with improved font sizes and styles\nax.set_xlabel('norm size', fontsize=12, fontweight='bold')\nax.set_ylabel('count', fontsize=12, fontweight='bold')\nax.set_title('summation_xsum:temperature=0.3,device=cuda', fontsize=14, fontweight='bold')\n\n# Add grid for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5, alpha=0.7)\n\n# Customize ticks\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Add a legend with a shadow effect\nax.legend(loc='upper right', fontsize=10, shadow=True)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the pie chart\nlabels = ['Incomparable', 'Different', 'Same']\nsizes = [73.3, 23.7, 3.0]\ncolors = ['#66b3ff', '#99ff99', '#ffcc99']\nexplode = (0.1, 0, 0)  # explode 1st slice\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(8.0, 4.0))\n\n# Plot the pie chart\nwedges, texts, autotexts = ax.pie(\n    sizes, \n    labels=labels, \n    colors=colors, \n    autopct='%1.1f%%', \n    startangle=140, \n    explode=explode,\n    textprops=dict(color=\"black\")\n)\n\n# Enhance the pie chart with a shadow and remove the axis\nax.set(aspect=\"equal\", title='Pie Chart of Comparability')\nax.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\n\n# Add a legend\nplt.legend(wedges, labels, title=\"Comparability\", loc=\"center left\", bbox_to_anchor=(1, 0, 0.5, 1))\n\n# Add a title\nplt.title(\"Comparability of Languages\", fontsize=14, fontweight='bold')\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_16.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data for demonstration\nx1 = np.array([45, 46, 47, 48, 49, 50, 51, 52])\ny1 = np.array([45, 46, 47, 48, 49, 50, 51, 52])\n\nx2 = np.array([45, 46, 47, 48, 49, 50, 51, 52])\ny2 = np.array([46, 47, 48, 49, 50, 51, 52, 53])\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(7.0, 5.0))\n\n# Plot the first dataset with a different style\nax.scatter(x1, y1, color='teal', label='SEAC', s=50, alpha=0.7, edgecolor='black')\n\n# Plot the second dataset with a different style\nax.scatter(x2, y2, color='coral', label='SAC(20Hz)', s=50, alpha=0.7, edgecolor='black')\n\n# Set labels and title with improved font sizes\nax.set_xlabel('Time Cost (Seconds)', fontsize=12)\nax.set_ylabel('Algorithms', fontsize=12)\nax.set_title('Comparison of Algorithms', fontsize=14)\n\n# Add a legend with a shadow effect\nax.legend(loc='upper left', fontsize=10, shadow=True)\n\n# Customize grid lines\nax.grid(True, linestyle='--', alpha=0.6)\n\n# Set axis limits for better focus\nax.set_xlim(45, 53)\nax.set_ylim(45, 53)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_17.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\nmethods = ['CodeBERT', 'ChatGPT-3.5', 'ChatGPT-4.0']\ncodebert_scores = [63.64, 80.08, 84.27]\nchatgpt35_scores = [87.20, 90.12, 90.12]\nchatgpt40_scores = [93.89, 90.12, 90.12]\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(10.0, 4.0))\n\n# Plot the data with enhanced aesthetics\nax.bar(methods, codebert_scores, color='skyblue', label='CodeBERT', edgecolor='black')\nax.bar(methods, chatgpt35_scores, bottom=codebert_scores, color='lightgreen', label='ChatGPT-3.5', edgecolor='black')\nax.bar(methods, chatgpt40_scores, bottom=[x+y for x, y in zip(codebert_scores, chatgpt35_scores)], color='orange', label='ChatGPT-4.0', edgecolor='black')\n\n# Add a title and labels with improved font sizes\nax.set_title('Average Recall Scores by Method', fontsize=14, fontweight='bold')\nax.set_xlabel('Method', fontsize=12)\nax.set_ylabel('Scores', fontsize=12)\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.7)\n\n# Add a legend with a shadow effect\nax.legend(loc='upper left', fontsize=10, shadow=True)\n\n# Annotate each bar with its value\nfor i, v in enumerate(codebert_scores):\n    ax.text(i, v + 1, f'{v:.1f}%', ha='center', va='bottom', fontsize=10, color='black')\nfor i, v in enumerate(chatgpt35_scores):\n    ax.text(i, sum([codebert_scores[i], v]) + 1, f'{v:.1f}%', ha='center', va='bottom', fontsize=10, color='black')\nfor i, v in enumerate(chatgpt40_scores):\n    ax.text(i, sum([codebert_scores[i], chatgpt35_scores[i], v]) + 1, f'{v:.1f}%', ha='center', va='bottom', fontsize=10, color='black')\n\n# Set x-ticks to be centered between bars\nax.set_xticks(np.arange(len(methods)))\nax.set_xticklabels(methods, rotation=45, ha='right')\n\n# Adjust layout for better spacing\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_18.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Let's assume we're plotting the performance of two different models over time\ntime = np.array([4, 8, 12, 16, 20, 24, 28, 32])\nmodel1_performance = np.array([85, 87, 90, 92, 94, 95, 96, 97])\nmodel2_performance = np.array([83, 85, 88, 90, 92, 93, 94, 95])\n\n# Create a new figure with a specific size\nplt.figure(figsize=(6.0, 4.0))\n\n# Plot the data with enhanced styles\nplt.plot(time, model1_performance, label='Trained w Few-Shot Ex', color='royalblue', linestyle='-', linewidth=2, marker='o', markersize=6)\nplt.plot(time, model2_performance, label='Def Deduce+Ex Gen', color='darkred', linestyle='--', linewidth=2, marker='s', markersize=6)\n\n# Add grid for better readability\nplt.grid(True, which='both', linestyle='--', linewidth=0.5, alpha=0.7)\n\n# Set labels and title with improved font sizes\nplt.xlabel('Few-Shot K', fontsize=12)\nplt.ylabel('Micro F1', fontsize=12)\nplt.title('Model Performance Over Time', fontsize=14)\n\n# Add a legend with a shadow effect\nplt.legend(loc='upper left', fontsize=10, shadow=True)\n\n# Annotate a specific point for emphasis\nplt.annotate('Best Model', xy=(32, 97), xytext=(25, 98),\n             arrowprops=dict(facecolor='black', shrink=0.05),\n             fontsize=10, color='darkred')\n\n# Fill between the two lines to show the difference visually\nplt.fill_between(time, model1_performance, model2_performance, where=(model1_performance > model2_performance), interpolate=True, color='skyblue', alpha=0.3)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_19.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Vehicle efficiency (in miles per gallon) vs. Vehicle size (in cubic feet)\nefficiency = np.array([60, 62, 65, 70, 75, 80])\nsize = np.array([10, 15, 20, 25, 30, 35])\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(7.0, 7.0))\n\n# Plot the data with enhanced aesthetics\nax.plot(size, efficiency, marker='o', linestyle='-', color='darkred', linewidth=2, markersize=8, label='Cars')\n\n# Add a secondary line for trucks\ntruck_efficiency = np.array([55, 58, 60, 62, 64, 66])\ntruck_size = np.array([12, 17, 22, 27, 32, 37])\nax.plot(truck_size, truck_efficiency, marker='s', linestyle='--', color='royalblue', linewidth=2, markersize=8, label='Trucks')\n\n# Set labels and title with improved font sizes and styles\nax.set_xlabel('Vehicle Parameter Size (units)', fontsize=12, fontweight='bold')\nax.set_ylabel('Efficiency (%)', fontsize=12, fontweight='bold')\nax.set_title('Vehicle Efficiency vs. Size', fontsize=14, fontweight='bold')\n\n# Add grid lines for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Customize ticks for better readability\nax.set_xticks(np.arange(0, 41, 5))\nax.set_yticks(np.arange(50, 91, 5))\n\n# Add a legend with a shadow effect\nax.legend(loc='upper left', fontsize=10, shadow=True)\n\n# Annotate specific points for emphasis\nfor i, txt in enumerate(efficiency):\n    ax.annotate(f'Car {i+1}', (size[i], efficiency[i]), textcoords=\"offset points\", xytext=(0,10), ha='center', fontsize=9)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the bar chart\nmodels = ['GPT-2', 'Llama 2 7B', 'Llama 2 70B', 'Mixtral 8x7B', 'GPT-3.5', 'GPT-4']\nsuccess_rates = [16, 12, 20, 26, 20, 10]\nencoding_decoding_points = [56, 36, 40, 50, 40, 22]\n\n# Create a new figure with a specific size\nfig, ax1 = plt.subplots(figsize=(8.0, 5.0))\n\n# Plot the success rates on the primary y-axis\ncolor = 'tab:purple'\nax1.set_xlabel('Model')\nax1.set_ylabel('Success Rate (%)', color=color)\nax1.bar(models, success_rates, color=color, alpha=0.7, edgecolor='black', label='Success Rate')\nax1.tick_params(axis='y', labelcolor=color)\n\n# Create a secondary y-axis for encoding/decoding points\nax2 = ax1.twinx()\ncolor = 'tab:red'\nax2.set_ylabel('Encoding/Decoding Points', color=color)\nax2.plot(models, encoding_decoding_points, color=color, marker='o', linestyle='--', linewidth=2, markersize=8, label='Encoding/Decoding Points')\nax2.tick_params(axis='y', labelcolor=color)\n\n# Add a title and legend\nplt.title('Encoding/Decoding Schelling Points by Model', fontsize=14, fontweight='bold')\nfig.tight_layout()\n\n# Add a legend\nlines, labels = ax1.get_legend_handles_labels()\nlines2, labels2 = ax2.get_legend_handles_labels()\nax1.legend(lines + lines2, labels + labels2, loc='upper left')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_20.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create data\nx = np.linspace(0, 1, 100)\ny = np.sin(x) * np.cos(x) + 0.5\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Plot the main line chart\nax.plot(x, y, color='black', linewidth=2, linestyle='-', label='Calibration curve')\n\n# Add markers to the line chart\nax.scatter(x, y, color='orange', s=50, alpha=0.7, edgecolor='black', label='Subgroups')\n\n# Set labels and title\nax.set_xlabel('Reduced probability', fontsize=12)\nax.set_ylabel('Fraction of positives', fontsize=12)\nax.set_title('Calibration plot', fontsize=14, fontweight='bold')\n\n# Add grid for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Customize ticks\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Add a legend\nax.legend(loc='upper left', fontsize=10)\n\n# Annotate a point of interest\nax.annotate('Optimal Point', xy=(0.5, 0.5), xytext=(0.3, 0.8),\n            arrowprops=dict(facecolor='black', shrink=0.05),\n            fontsize=10, color='blue')\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_21.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data for demonstration\nx = np.linspace(-5, 5, 100)\ny1 = np.exp(-(x - 1)**2)\ny2 = np.exp(-(x + 1)**2)\ny3 = np.exp(-(x - 2)**2)\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(8.0, 4.0))\n\n# Plot the data with different styles and colors\nax.plot(x, y1, label='Model', color='blue', linestyle='-', linewidth=2, marker='o', markersize=5)\nax.fill_between(x, y1, color='lightblue', alpha=0.3)\n\nax.plot(x, y2, label='FOD-NET', color='orange', linestyle='--', linewidth=2, marker='s', markersize=5)\nax.fill_between(x, y2, color='lightcoral', alpha=0.3)\n\nax.plot(x, y3, label='SS3T', color='green', linestyle='-.', linewidth=2, marker='^', markersize=5)\nax.fill_between(x, y3, color='lightgreen', alpha=0.3)\n\n# Set labels and title\nax.set_xlabel('ACC', fontsize=12)\nax.set_ylabel('Probability Density', fontsize=12)\nax.set_title('Comparison of Models', fontsize=14, fontweight='bold')\n\n# Add grid for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5, alpha=0.7)\n\n# Add a legend\nax.legend(loc='upper right', fontsize=10)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_22.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data for the histograms\ndata1 = np.random.normal(loc=150, scale=20, size=1000)\ndata2 = np.random.normal(loc=200, scale=15, size=1000)\ndata3 = np.random.normal(loc=250, scale=10, size=1000)\n\n# Create a new figure with a larger size for better visibility\nfig, axes = plt.subplots(2, 2, figsize=(10.0, 8.0), sharex=True, sharey=True)\n\n# Plot the first histogram\naxes[0, 0].hist(data1, bins=30, color='blue', alpha=0.7, edgecolor='black')\naxes[0, 0].set_title('Total')\naxes[0, 0].set_xlabel('Daily reward (Ether)')\naxes[0, 0].set_ylabel('Probability')\n\n# Plot the second histogram\naxes[0, 1].hist(data2, bins=30, color='red', alpha=0.7, edgecolor='black')\naxes[0, 1].set_title('Proposer')\naxes[0, 1].set_xlabel('Daily reward (Ether)')\naxes[0, 1].set_ylabel('Probability')\n\n# Plot the third histogram\naxes[1, 0].hist(data3, bins=30, color='green', alpha=0.7, edgecolor='black')\naxes[1, 0].set_title('Attestor')\naxes[1, 0].set_xlabel('Daily reward (Ether)')\naxes[1, 0].set_ylabel('Probability')\n\n# Plot the fourth histogram\naxes[1, 1].hist(data1, bins=30, color='yellow', alpha=0.7, edgecolor='black')\naxes[1, 1].set_title('Sync committee member')\naxes[1, 1].set_xlabel('Daily reward (Ether)')\naxes[1, 1].set_ylabel('Probability')\n\n# Adjust layout and add a global title\nplt.tight_layout()\nplt.suptitle('Histograms of Daily Rewards', fontsize=16, fontweight='bold')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_23.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: RMSE values for different models at various trainable parameter sizes\ntrainable_sizes = np.array([10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150])\nrmse_values = np.array([\n    1.30, 1.21, 1.27, 1.28, 1.29, 1.31, 1.32, 1.33, 1.34, 1.35, 1.36, 1.37, 1.38, 1.39, 1.40\n])\n\n# Create a new figure with a larger size for better visibility\nplt.figure(figsize=(6.0, 8.0))\n\n# Plot the data with enhanced aesthetics\nplt.plot(trainable_sizes, rmse_values, marker='o', linestyle='-', color='darkred', linewidth=2, markersize=8, label='Llama 2 13B')\n\n# Add grid lines for better readability\nplt.grid(True, which='both', linestyle='--', linewidth=0.5, alpha=0.7)\n\n# Set labels with improved font size and style\nplt.xlabel('Trainable Parameter Size (M)', fontsize=12, fontweight='bold')\nplt.ylabel('RMSE', fontsize=12, fontweight='bold')\n\n# Set title with enhanced font size and style\nplt.title('RMSE vs Trainable Parameter Size', fontsize=14, fontweight='bold')\n\n# Customize ticks for better readability\nplt.xticks(fontsize=10)\nplt.yticks(fontsize=10)\n\n# Add a legend with a shadow effect\nplt.legend(loc='upper right', fontsize=10, shadow=True)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_24.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Execution duration (in seconds) and distribution of a process\nexecution_durations = np.array([45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100, 105, 110, 115, 120, 125, 130, 135, 140, 145, 150, 155, 160])\ndistribution = np.array([0.01, 0.02, 0.03, 0.04, 0.05, 0.06, 0.07, 0.08, 0.09, 0.1, 0.11, 0.12, 0.13, 0.14, 0.15, 0.16, 0.17, 0.18, 0.19, 0.2, 0.21, 0.22, 0.23, 0.24])\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data with enhanced aesthetics\nax.plot(execution_durations, distribution, color='navy', linestyle='-', linewidth=2, marker='o', markersize=5, label='Execution Duration')\n\n# Set labels with improved font size and style\nax.set_xlabel('Execution Duration (seconds)', fontsize=12, fontweight='bold')\nax.set_ylabel('Distribution', fontsize=12, fontweight='bold')\n\n# Add grid for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Add a legend with a shadow effect\nax.legend(loc='upper left', fontsize=10, shadow=True)\n\n# Set limits for x and y axes\nax.set_xlim(40, 160)\nax.set_ylim(0, 0.25)\n\n# Annotate key points on the plot\nax.annotate('Peak', xy=(100, 0.15), xytext=(110, 0.2),\n             arrowprops=dict(facecolor='black', shrink=0.05),\n             fontsize=10, fontweight='bold')\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_25.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Improvement of different methods over different instance sizes\ninstance_sizes = np.array([15, 20, 30, 40, 50, 60])\npetrirl_improvement = np.array([18, 14, 13, 12, 9, 5])\ngam_improvement = np.array([0, 0, 0, 0, 0, 0])\ngin_improvement = np.array([10, 10, 10, 10, 10, 10])\ndgerd_improvement = np.array([0, 0, 0, 0, 0, 0])\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Plot the data with different styles and markers\nax.plot(instance_sizes, petrirl_improvement, label='PetriRL', color='green', marker='o', linestyle='-', linewidth=2)\nax.plot(instance_sizes, gam_improvement, label='GAM', color='orange', marker='s', linestyle='--', linewidth=2)\nax.plot(instance_sizes, gin_improvement, label='GIN', color='blue', marker='^', linestyle='-.', linewidth=2)\nax.plot(instance_sizes, dgerd_improvement, label='DGERD', color='purple', marker='x', linestyle=':', linewidth=2)\n\n# Set labels and title with improved descriptions\nax.set_xlabel('Instance Size (step)', fontsize=12)\nax.set_ylabel('Improvement (%)', fontsize=12)\nax.set_title('Comparison of Different Methods Over Instance Sizes', fontsize=14, fontweight='bold')\n\n# Add grid for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Customize ticks\nax.set_xticks(instance_sizes)\nax.set_yticks(np.arange(0, 20, 2))\n\n# Add a legend with a shadow effect\nax.legend(loc='upper left', fontsize=10, shadow=True)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_26.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data for demonstration\nx1 = np.array([1, 2, 3, 4, 5])\ny1 = np.array([1.5, 2.5, 3.5, 4.5, 5.5])\n\nx2 = np.array([1, 2, 3, 4, 5])\ny2 = np.array([0.5, 1.5, 2.5, 3.5, 4.5])\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(7.0, 5.0))\n\n# Plot the first dataset with enhanced aesthetics\nax.scatter(x1, y1, color='teal', s=100, alpha=0.7, edgecolor='black', label='SEAC')\n\n# Plot the second dataset with different aesthetics\nax.scatter(x2, y2, color='orange', s=80, alpha=0.6, edgecolor='black', marker='o', label='CTCO')\n\n# Set labels and title with improved font sizes\nax.set_xlabel('Algorithms', fontsize=12)\nax.set_ylabel('Time Cost (Seconds)', fontsize=12)\nax.set_title('Comparison of Algorithms', fontsize=14)\n\n# Add grid lines for better readability\nax.grid(True, linestyle='--', alpha=0.6)\n\n# Customize the legend\nax.legend(loc='upper left', fontsize=10)\n\n# Set axis limits for better focus\nax.set_xlim(0, 6)\nax.set_ylim(0, 6)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_27.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Time to market (in days) for different brands\nbrands = ['Adidas', 'Nike', 'New Balance', 'Our Brand']\ntime_to_market = [45, 30, 55, 70]\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Define colors and markers for each brand\ncolors = ['#4CAF50', '#FFC107', '#F44336', '#2196F3']\nmarkers = ['o', 's', '^', 'D']\n\n# Plot the data with enhanced aesthetics\nfor i, brand in enumerate(brands):\n    ax.bar(i, time_to_market[i], color=colors[i], edgecolor='black', alpha=0.8, label=brand, zorder=3)\n    ax.text(i, time_to_market[i] + 5, brand, ha='center', va='bottom', fontsize=10, color='black')\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='gray', alpha=0.7)\n\n# Set labels and title with improved font sizes\nax.set_xlabel('Brands', fontsize=12)\nax.set_ylabel('Time to Market (Days)', fontsize=12)\nax.set_title('Time to Market for Different Brands', fontsize=14, fontweight='bold')\n\n# Customize ticks\nax.set_xticks(np.arange(len(brands)))\nax.set_xticklabels(brands, fontsize=10)\nax.set_yticks(np.arange(0, 120, 10))\nax.set_ylim(0, 120)\n\n# Add a legend with a shadow effect\nax.legend(title='Legend', loc='upper right', fontsize=10, frameon=True, shadow=True)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_28.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data for the line chart\nx = np.linspace(0, 1, 100)\ny1 = np.sin(x * 2 * np.pi)\ny2 = np.cos(x * 2 * np.pi)\ny3 = np.tan(x * 2 * np.pi)\n\n# Create a new figure with a larger size for better visibility\nfig, ax1 = plt.subplots(figsize=(10.0, 5.0))\n\n# Plot the first line with a blue color and dashed style\nax1.plot(x, y1, color='b', linestyle='--', linewidth=2, label='Early 20th Century')\n\n# Plot the second line with an orange color and solid style\nax1.plot(x, y2, color='orange', linestyle='-', linewidth=2, label='Mid 20th Century')\n\n# Plot the third line with a green color and dash-dot style\nax1.plot(x, y3, color='green', linestyle='-.', linewidth=2, label='Turn of the Century')\n\n# Set labels and title with improved font sizes\nax1.set_xlabel('Density', fontsize=12)\nax1.set_ylabel('Year', fontsize=12)\nax1.set_title('Era', fontsize=14, fontweight='bold')\n\n# Add a legend with a shadow effect\nax1.legend(loc='upper right', fontsize=10, shadow=True)\n\n# Enhance grid lines for better readability\nax1.grid(True, which='both', linestyle='--', linewidth=0.5, alpha=0.7)\n\n# Create a secondary y-axis for demonstration purposes\nax2 = ax1.twinx()\nax2.plot(x, y1, color='blue', linestyle='--', linewidth=2, alpha=0.5)\nax2.set_ylabel('Amplitude', fontsize=12)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_29.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the bar chart\ncategories = ['Nano', 'Quantum', 'Cybersecurity', 'VR', 'Biotech', 'Robotics', 'IoT', 'Cloud Computing', 'Blockchain', 'AI']\nvalues_2013 = [20, 10, 40, 30, 60, 70, 90, 50, 80, 120]\nvalues_2022 = [90, 50, 150, 100, 180, 250, 300, 200, 400, 500]\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Define colors for the bars\ncolors = ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd', '#8c564b', '#e377c2', '#7f7f7f', '#bcbd22', '#17becf']\n\n# Plot the data with enhanced styling\nbars = ax.bar(categories, values_2013, color=colors, edgecolor='black', linewidth=1.2, label='2013')\nax.bar(categories, values_2022, bottom=values_2013, color=[c for c in colors if c != '#1f77b4'], edgecolor='black', linewidth=1.2, label='2022')\n\n# Add annotations to each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 5, f'{yval}', ha='center', va='bottom', fontsize=10)\n\n# Set labels and title\nax.set_xlabel('Technology Field', fontsize=12)\nax.set_ylabel('Number of Patents', fontsize=12)\nax.set_title('Patent Filings in 2013 and 2022', fontsize=14, fontweight='bold')\n\n# Add a legend\nax.legend(title='Year', loc='upper left')\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.7)\n\n# Set x-ticks rotation for better readability\nplt.xticks(rotation=45)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Predicted probabilities and actual outcomes\npredicted_probabilities = np.array([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0])\nactual_outcomes = np.array([0, 0, 0, 1, 1, 1, 1, 1, 1, 1])\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Plot the data points with enhanced styling\nscatter = ax.scatter(predicted_probabilities, actual_outcomes, \n                     c=actual_outcomes, cmap='viridis', s=100, edgecolor='k', alpha=0.7,\n                     label='Data points')\n\n# Add a color bar to indicate the actual outcomes\ncbar = plt.colorbar(scatter)\ncbar.set_label('Actual Outcome')\n\n# Plot the calibration curve\ncalibration_curve = np.linspace(0, 1, 100)\nax.plot(calibration_curve, calibration_curve, color='black', linestyle='--', linewidth=2, label='Calibration curve')\n\n# Set labels and title with improved font sizes\nax.set_xlabel('Predicted probability', fontsize=12)\nax.set_ylabel('Fraction of positives', fontsize=12)\nax.set_title('Calibration Curve', fontsize=14, fontweight='bold')\n\n# Add grid lines for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Add a legend with a shadow effect\nax.legend(loc='upper left', fontsize=10, shadow=True)\n\n# Enhance the layout\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_30.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Earnings and growth rates for different companies over quarters\nquarters = ['Q1', 'Q2', 'Q3', 'Q4']\nearnings_tesla = [150, 200, 250, 300]\nearnings_benz = [180, 220, 270, 320]\nearnings_byd = [100, 150, 200, 250]\nearnings_porsche = [200, 250, 300, 350]\n\ngrowth_tesla = [10, 15, 20, 25]\ngrowth_benz = [12, 17, 22, 27]\ngrowth_byd = [8, 13, 18, 23]\ngrowth_porsche = [14, 19, 24, 29]\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data with enhanced styles\nax.plot(quarters, earnings_tesla, marker='o', linestyle='-', color='green', label='Tesla')\nax.plot(quarters, earnings_benz, marker='s', linestyle='--', color='orange', label='Benz')\nax.plot(quarters, earnings_byd, marker='^', linestyle='-.', color='blue', label='BYD')\nax.plot(quarters, earnings_porsche, marker='x', linestyle=':', color='purple', label='Porsche')\n\n# Add grid lines for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Set labels and title with improved font sizes and styles\nax.set_xlabel('Quarter', fontsize=12, fontweight='bold')\nax.set_ylabel('Earnings ($1000s)', fontsize=12, fontweight='bold')\nax.set_title('Company Earnings Over Quarters', fontsize=14, fontweight='bold')\n\n# Customize ticks for better readability\nax.set_xticks(range(len(quarters)))\nax.set_xticklabels(quarters)\nax.set_yticks(np.arange(0, 401, 50))\nax.set_yticklabels([f'{i}' for i in range(0, 401, 50)])\n\n# Add a legend with a shadow effect\nax.legend(loc='upper left', fontsize=10, shadow=True)\n\n# Annotate the points with growth rates\nfor i, (q, g) in enumerate(zip(quarters, growth_tesla)):\n    ax.annotate(f'{g}%', xy=(i, earnings_tesla[i]), xytext=(i+0.1, earnings_tesla[i]+5),\n                arrowprops=dict(facecolor='black', shrink=0.05), fontsize=9)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nmethods = ['Linear probing', 'BitFit', 'Prompt tuning', 'Full finetuning', 'LoRA', 'Ours (LoSA)']\naccuracy = [75, 78, 82, 84, 86, 88]\ninference_gflops = [0.5, 0.6, 0.7, 0.8, 0.9, 1.0]\ntrain_sec_img = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6]\nparam_log10 = [1, 2, 3, 4, 5, 6]\ntrain_memory = [0.05, 0.1, 0.15, 0.2, 0.25, 0.3]\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Define colors and markers for each method\ncolors = ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd', '#8c564b']\nmarkers = ['o', 's', '^', 'D', 'p', 'h']\n\n# Plot each method with different styles\nfor i, method in enumerate(methods):\n    ax.plot(accuracy[i], inference_gflops[i], \n            marker=markers[i], color=colors[i], linestyle='-', \n            linewidth=2, markersize=8, label=method)\n\n# Set labels and title\nax.set_xlabel('Normalized Requirements (lower is better)', fontsize=12)\nax.set_ylabel('Inference GFLOPs', fontsize=12)\nax.set_title('Comparison of Different Methods', fontsize=14, fontweight='bold')\n\n# Add grid for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Customize ticks\nax.set_xticks(np.arange(min(accuracy), max(accuracy)+1, 1))\nax.set_yticks(np.arange(min(inference_gflops), max(inference_gflops)+1, 0.5))\n\n# Add legend with a shadow effect\nax.legend(title='Methods', loc='upper left', shadow=True, fontsize=10)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create data for plotting\nx1 = np.random.normal(0.5, 0.1, 100)\ny1 = np.random.normal(0.5, 0.1, 100)\n\nx2 = np.random.normal(0.3, 0.1, 100)\ny2 = np.random.normal(0.3, 0.1, 100)\n\nx3 = np.random.normal(0.7, 0.1, 100)\ny3 = np.random.normal(0.7, 0.1, 100)\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Plot the data with different colors and markers\nax.scatter(x1, y1, color='blue', marker='o', label='Group 1')\nax.scatter(x2, y2, color='green', marker='s', label='Group 2')\nax.scatter(x3, y3, color='red', marker='^', label='Group 3')\n\n# Set labels with improved font size and style\nax.set_xlabel('TM-score', fontsize=12, fontweight='bold')\nax.set_ylabel('Seq-ident', fontsize=12, fontweight='bold')\n\n# Add a title with enhanced styling\nax.set_title('Comparison of TM-score and Seq-ident', fontsize=14, fontweight='bold')\n\n# Add a grid for better readability\nax.grid(True, linestyle='--', alpha=0.7)\n\n# Add a legend with a shadow effect\nax.legend(title='Groups', title_fontsize='12', fontsize='10', shadow=True)\n\n# Adjust layout for better spacing\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Relative Cluster Size vs Average Norm of Difference Vectors\nx = np.array([25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45])\ny_teenagers = np.array([0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2.0, 2.1, 2.2, 2.3, 2.4, 2.5])\ny_children = np.array([0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2.0, 2.1, 2.2, 2.3])\ny_adults = np.array([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2.0, 2.1])\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Plot the data with different colors and markers\nax.scatter(x, y_teenagers, color='red', marker='o', label='teenagers')\nax.scatter(x, y_children, color='green', marker='s', label='children')\nax.scatter(x, y_adults, color='blue', marker='^', label='adults')\n\n# Add grid lines for better readability\nax.grid(True, linestyle='--', alpha=0.7)\n\n# Set labels and title with improved font sizes\nax.set_xlabel('Relative Cluster Size', fontsize=12)\nax.set_ylabel('Average Norm of Difference Vectors', fontsize=12)\nax.set_title('Impact of Relative Cluster Size on Average Norm of Difference Vectors', fontsize=14)\n\n# Add a legend with a shadow effect\nax.legend(title='Species', fontsize=10, shadow=True)\n\n# Customize the x-axis ticks\nax.set_xticks(np.arange(25, 46, 5))\nax.set_xticklabels(['25', '30', '35', '40', '45'])\n\n# Customize the y-axis ticks\nax.set_yticks(np.arange(0, 3.1, 0.5))\nax.set_yticklabels(['0', '0.5', '1', '1.5', '2', '2.5', '3'])\n\n# Add annotations to highlight key points\nfor i, txt in enumerate(y_teenagers):\n    ax.annotate(f'{txt:.1f}', (x[i], y_teenagers[i]), textcoords=\"offset points\", xytext=(0,10), ha='center', fontsize=9)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create data\nx = np.array([0, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 104, 112, 120])\ny = np.array([99.6, 96.0, 92.3, 90.9, 92.5, 91.3, 90.9, 92.5, 93.3, 94.1, 95.0, 96.0, 97.0, 98.0, 99.0, 100.0])\n\n# Create a new figure with a specific size\nplt.figure(figsize=(8.0, 6.0))\n\n# Plot the data with enhanced aesthetics\nplt.plot(x, y, color='black', linestyle='-', linewidth=2, marker='o', markersize=8, markerfacecolor='blue', label='Data Trend')\n\n# Add grid for better readability\nplt.grid(True, which='both', linestyle='--', linewidth=0.5, alpha=0.7)\n\n# Set labels with improved font size and style\nplt.xlabel('HC_first (before aging)', fontsize=12, fontweight='bold')\nplt.ylabel('HC_first (after aging)', fontsize=12, fontweight='bold')\n\n# Set title with enhanced font size and style\nplt.title('Trend of HC_first Over Time', fontsize=14, fontweight='bold')\n\n# Customize ticks for better clarity\nplt.xticks(fontsize=10)\nplt.yticks(fontsize=10)\n\n# Add a legend with a shadow effect\nplt.legend(loc='upper left', fontsize=10, shadow=True)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create data for the heatmap\ndata = np.array([\n    [0.1, 0.2, 0.3, 0.4, 0.5],\n    [0.2, 0.3, 0.4, 0.5, 0.6],\n    [0.3, 0.4, 0.5, 0.6, 0.7],\n    [0.4, 0.5, 0.6, 0.7, 0.8],\n    [0.5, 0.6, 0.7, 0.8, 0.9]\n])\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Plot the heatmap with a color map\ncax = ax.imshow(data, cmap='viridis', interpolation='nearest')\n\n# Add a color bar\ncbar = fig.colorbar(cax)\ncbar.set_label('Intensity')\n\n# Set labels and title\nax.set_xlabel('TMScore')\nax.set_ylabel('Sequence ID')\nax.set_title('Heatmap of TMScore vs Sequence ID')\n\n# Add grid lines for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Customize ticks\nax.set_xticks(np.arange(len(data[0])))\nax.set_yticks(np.arange(len(data)))\nax.set_xticklabels(['0.2', '0.3', '0.4', '0.5', '0.6'])\nax.set_yticklabels(['0.1', '0.2', '0.3', '0.4', '0.5'])\n\n# Add annotations for each cell\nfor i in range(len(data)):\n    for j in range(len(data[i])):\n        text = ax.text(j, i, f'{data[i, j]:.1f}', ha=\"center\", va=\"center\", color=\"w\")\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Let's assume we're plotting the performance of two different models over time\nmodels = ['4211', '2411', '2141', '1124']\nsrcc_values = [0.9628, 0.9604, 0.9624, 0.9561]\nplcc_values = [0.9640, 0.9624, 0.9624, 0.9592]\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot the SRCC values with a blue color and a bar width\nbars = ax.bar(models, srcc_values, color='royalblue', edgecolor='black', label='SRCC')\n\n# Add a second y-axis for PLCC values\nax2 = ax.twinx()\nax2.bar(models, plcc_values, color='seagreen', alpha=0.7, edgecolor='black', label='PLCC')\n\n# Set labels and title\nax.set_xlabel('Modes')\nax.set_ylabel('Values', color='navy')\nax.set_title('SRCC and PLCC values with their sum for different modes', fontsize=14, fontweight='bold')\n\n# Add a legend\nlines, labels = ax.get_legend_handles_labels()\nlines2, labels2 = ax2.get_legend_handles_labels()\nax2.legend(lines + lines2, labels + labels2, loc='upper left')\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.7)\nax2.yaxis.grid(False)\n\n# Annotate each bar with its value\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.01, f'{yval:.4f}', ha='center', va='bottom', fontsize=10, color='navy')\n\n# Adjust layout for better spacing\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\nx = np.array([0, 1, 2, 3])\ny1 = np.array([176, 176, 176, 176])\ny2 = np.array([0, 0, 0, 0])\ny3 = np.array([0, 0, 0, 0])\ny4 = np.array([64, 64, 64, 64])\ny5 = np.array([0, 0, 0, 0])\ny6 = np.array([0, 0, 0, 0])\ny7 = np.array([64, 64, 64, 64])\ny8 = np.array([0, 0, 0, 0])\ny9 = np.array([0, 0, 0, 0])\ny10 = np.array([0, 0, 0, 0])\ny11 = np.array([0, 0, 0, 0])\ny12 = np.array([0, 0, 0, 0])\ny13 = np.array([0, 0, 0, 0])\ny14 = np.array([0, 0, 0, 0])\ny15 = np.array([0, 0, 0, 0])\ny16 = np.array([0, 0, 0, 0])\ny17 = np.array([0, 0, 0, 0])\ny18 = np.array([0, 0, 0, 0])\ny19 = np.array([0, 0, 0, 0])\ny20 = np.array([0, 0, 0, 0])\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(10.0, 3.0))\n\n# Plot the data with different styles and colors\nax.plot(x, y1, label='IIID-1 SDMT', color='blue', linestyle='-', marker='o')\nax.plot(x, y2, label='IIID-2 SDST', color='green', linestyle='--', marker='s')\nax.plot(x, y3, label='IIID-3 SDST', color='orange', linestyle='-.', marker='^')\nax.plot(x, y4, label='IIID-4 UBSDT', color='cyan', linestyle=':', marker='D')\nax.plot(x, y5, label='IIID-5 UBSDT', color='magenta', linestyle='-', marker='p')\n\n# Add a legend with a title\nax.legend(title=\"Legend\", loc='upper right')\n\n# Set labels and title\nax.set_xlabel('Client')\nax.set_ylabel('Value')\nax.set_title('Comparison of Different Models')\n\n# Customize grid lines\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Generate data for a more complex plot\nx = np.linspace(-10, 10, 500)\ny = np.sin(x) * np.cos(x) * np.exp(-0.1 * x**2)\n\n# Create a new figure with a larger size for better visibility\nplt.figure(figsize=(8.0, 8.0))\n\n# Plot the data with enhanced styling\nplt.plot(x, y, label='SINDy', color='royalblue', linewidth=2, linestyle='-', marker='o', markersize=4, markerfacecolor='white')\n\n# Add grid lines for better readability\nplt.grid(True, which='both', linestyle='--', linewidth=0.5, alpha=0.7)\n\n# Set axis limits and labels\nplt.xlim(-10, 10)\nplt.ylim(-1, 1)\nplt.xlabel('X-axis', fontsize=12)\nplt.ylabel('Y-axis', fontsize=12)\n\n# Add a title and legend with improved placement\nplt.title('Compact Spiral with Elliptical Hollow Center', fontsize=14, fontweight='bold')\nplt.legend(loc='upper right', fontsize=10)\n\n# Annotate a specific point of interest\nplt.annotate('Center', xy=(0, 0), xytext=(-5, 0.5),\n             arrowprops=dict(facecolor='black', shrink=0.05),\n             fontsize=10, color='darkred')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Let's assume we're plotting the growth of a population over time\ntime = np.linspace(0, 10, 100)\npopulation = np.exp(time)  # Exponential growth model\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(8.0, 7.0))\n\n# Plot the data with enhancements\nax.plot(time, population, label='w/o FMA', color='black', linewidth=2, linestyle='-', marker='o', markersize=5)\n\n# Add grid lines for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5, alpha=0.7)\n\n# Set labels with more descriptive text\nax.set_xlabel('Flops/byte', fontsize=12)\nax.set_ylabel('Flows/s', fontsize=12)\nax.set_title('DAXPY memory bandwidth', fontsize=14, fontweight='bold')\n\n# Add a legend with a title\nax.legend(title='Legend', title_fontsize='13', fontsize='11')\n\n# Customize the x and y axis limits\nax.set_xlim([0, 10])\nax.set_ylim([1e-1, 1e12])\n\n# Add a background color to the plot area\nax.set_facecolor('#f0f8ff')  # Light blue background\n\n# Add annotations to highlight key points\nax.annotate('Peak', xy=(5, np.exp(5)), xytext=(6, np.exp(6)),\n            arrowprops=dict(facecolor='black', shrink=0.05),\n            fontsize=10, color='black')\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the bar chart\ncategories = ['Satisfy Constraints', 'No Severe Errors', 'Lengthy', 'Contain Rich Info', 'No Moderate Errors', \n              'Grammatical Correctness', 'No Minor Errors', 'Clear', 'Non-Repetitive', 'Support Stances', \n              '19 Other Features']\nvalues = [0.76, 0.68, 0.55, 0.52, 0.48, 0.45, 0.43, 0.42, 0.41, 0.40, 0.39]\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Define colors for the bars\ncolors = ['#FF9999', '#FFCC99', '#FFFF99', '#B3FF99', '#99E6FF', \n          '#FF99E6', '#FFCC99', '#FFFF99', '#B3FF99', '#99E6FF', '#FF99E6']\n\n# Plot the bar chart with enhanced aesthetics\nbars = ax.bar(categories, values, color=colors, edgecolor='black', linewidth=1.2)\n\n# Add value labels on top of each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.01, f'{yval:.2f}', ha='center', va='bottom', fontsize=10)\n\n# Set title and labels with improved font sizes\nax.set_title('Feature Importance', fontsize=14, fontweight='bold')\nax.set_xlabel('Features', fontsize=12)\nax.set_ylabel('f(x)', fontsize=12)\n\n# Customize the x-axis ticks\nplt.xticks(rotation=45, ha='right')\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.7)\n\n# Adjust layout to prevent clipping of labels\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define data for the plot\ndata = np.array([[24, 15], [15, 8]])\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the heatmap with a color map and add a color bar\ncax = ax.matshow(data, cmap='YlOrBr', interpolation='nearest')\nfig.colorbar(cax)\n\n# Set labels for the axes\nax.set_xticks(np.arange(len(data[0])))\nax.set_yticks(np.arange(len(data)))\nax.set_xticklabels(['CigaR', 'ChatRepair'])\nax.set_yticklabels(['CigaR', 'ChatRepair'])\n\n# Add annotations to each cell\nfor i in range(len(data)):\n    for j in range(len(data[i])):\n        ax.text(j, i, str(data[i][j]), ha='center', va='center', color='black')\n\n# Set title and labels\nax.set_title('Heatmap of User Engagement')\nax.set_xlabel('Engagement Type')\nax.set_ylabel('User Type')\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_14.pdf", "response": "```python\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Define data for the radar chart\ncategories = ['Level 1', 'Level 2', 'Level 3', 'Level 4', 'Level 5']\nvalues = [10, 15, 20, 25, 30]\n\n# Number of variables and categories\nN = len(categories)\n\n# Convert the categories into radians\nangles = np.linspace(0, 2 * np.pi, N, endpoint=False).tolist()\nangles += angles[:1]  # Repeat the first angle to close the plot\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(6.0, 6.0), subplot_kw=dict(polar=True))\n\n# Plot the data\nax.plot(angles, values + values[:1], linewidth=2, linestyle='solid', label='GPT4V-CoT')\nax.fill(angles, values + values[:1], alpha=0.25)\n\n# Set the category labels\nax.set_xticks(angles[:-1])\nax.set_xticklabels(categories)\n\n# Add a title\nax.set_title('Qwen-VL-Max', size=14, color='darkred', y=1.1)\n\n# Customize the grid lines\nax.grid(True, color='grey', linestyle='--', linewidth=0.5)\n\n# Add a legend\nax.legend(loc='upper right', bbox_to_anchor=(1.1, 1.1))\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.logspace(1, 2, 100)\ny1 = x**-1\ny2 = x**-2\ny3 = x**-3\ny4 = x**-4\ny5 = x**-5\n\n# Create a new figure with a larger size for better visibility\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10.0, 4.0), sharey=True)\n\n# Plot the first subplot\nax1.plot(x, y1, label='s = 19', color='purple', linestyle='-', marker='o')\nax1.plot(x, y2, label='s = 50', color='pink', linestyle='--', marker='s')\nax1.plot(x, y3, label='s = 76', color='orange', linestyle='-.', marker='^')\nax1.set_xscale('log')\nax1.set_yscale('log')\nax1.set_xlabel('Number of matvecs m')\nax1.set_ylabel('Approximation error ||A - A\u0302||_F')\nax1.set_title('Approximation Error')\nax1.legend(loc='upper right')\n\n# Plot the second subplot\nax2.plot(x, y4, label='s = 142', color='green', linestyle=':', marker='D')\nax2.plot(x, y5, label='s = 232', color='brown', linestyle='-', marker='p')\nax2.set_xscale('log')\nax2.set_yscale('log')\nax2.set_xlabel('Number of matvecs m')\nax2.set_ylabel('Sparse recovery error ||S\u0302A - A\u0302||_F')\nax2.set_title('Sparse Recovery Error')\nax2.legend(loc='upper right')\n\n# Adjust layout for better spacing\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_16.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define data for the pie chart\nlabels = ['Retrieval.KV', 'Retrieve.Number', 'Retrieve.PassKey', 'En.Sum', 'En.QA']\nsizes = [30, 25, 15, 20, 10]\ncolors = ['#46b8da', '#90ed7d', '#fdae61', '#f46d43', '#e0e0e0']\nexplode = (0.1, 0, 0, 0, 0)  # explode the first slice\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Plot the pie chart\nwedges, texts, autotexts = ax.pie(\n    sizes, \n    labels=labels, \n    colors=colors, \n    autopct='%1.1f%%', \n    startangle=140, \n    pctdistance=0.85, \n    wedgeprops=dict(width=0.3, edgecolor='w'), \n    textprops={'fontsize': 10, 'color': 'black'}\n)\n\n# Add a circle at the center to make it look like a donut chart\ncentre_circle = plt.Circle((0,0),0.70,fc='white')\nfig.gca().add_artist(centre_circle)\n\n# Enhance the layout\nax.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\nax.set_title('Pie Chart of Various Retrieval Methods', fontsize=14, fontweight='bold')\n\n# Add annotations for clarity\nfor i, txt in enumerate(texts):\n    txt.set_color(colors[i])\n    if i == 0:\n        txt.set_fontweight('bold')\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_17.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create data\nx = np.linspace(0, 100, 200)\ny1 = np.sin(x / 10) * np.exp(-x / 100)\ny2 = np.cos(x / 10) * np.exp(-x / 100)\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(6.0, 5.0))\n\n# Plot the data with different styles and colors\nax.plot(x, y1, label='Sine Wave', color='green', linestyle='-', linewidth=2, marker='o', markersize=4)\nax.plot(x, y2, label='Cosine Wave', color='orange', linestyle='--', linewidth=2, marker='s', markersize=4)\n\n# Set labels with more descriptive text\nax.set_xlabel('Time (s)', fontsize=12)\nax.set_ylabel('Amplitude', fontsize=12)\nax.set_title('Sine and Cosine Waves', fontsize=14, fontweight='bold')\n\n# Add grid for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5, alpha=0.7)\n\n# Customize ticks\nax.xaxis.set_major_locator(plt.MultipleLocator(20))\nax.yaxis.set_major_locator(plt.MultipleLocator(1))\n\n# Add a legend with a shadow effect\nax.legend(loc='upper right', fontsize=10, shadow=True)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_18.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.array([0, 1, 2, 3, 4, 5, 6])\ny = np.array([1.5, 2.5, 3.5, 4.5, 3.0, 2.0, 1.0])\nerror_x = np.array([0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1])\nerror_y = np.array([0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05])\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(7.0, 5.0))\n\n# Plot the data with error bars\nax.errorbar(x, y, xerr=error_x, yerr=error_y, fmt='o', color='black', ecolor='gray', elinewidth=2, capsize=5, label='Data Points')\n\n# Set labels and title with improved font sizes\nax.set_xlabel('Sample Number', fontsize=12)\nax.set_ylabel('Thermal Conductivity (W/m.K)', fontsize=12)\nax.set_title('Uncertainty in Thermal Conductivity Measurements', fontsize=14)\n\n# Add grid lines for better readability\nax.grid(True, linestyle='--', alpha=0.7)\n\n# Customize the legend\nax.legend(loc='upper right', fontsize=10)\n\n# Set limits for axes\nax.set_xlim(0, 7)\nax.set_ylim(1, 5)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_19.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\ncategories = ['I', 'II', 'III', 'IV', 'V']\nvalues1 = [28, 20, 10, 20, 28]\nvalues2 = [35, 26, 20, 25, 30]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(7.0, 5.0))\n\n# Define colors and markers\ncolors = ['#1f77b4', '#2ca02c']\nmarkers = ['o', 's']\n\n# Plot the data with enhanced styling\nfor i, (values, color, marker) in enumerate(zip([values1, values2], colors, markers)):\n    ax.bar(categories, values, color=color, alpha=0.7, edgecolor='black', linewidth=1.2, label=f'Player {chr(65 + i)}', hatch='/', zorder=3)\n    for j, value in enumerate(values):\n        ax.text(j, value + 1, str(value), ha='center', va='bottom', fontsize=9, color='black')\n\n# Set labels and title\nax.set_xlabel('Games', fontsize=12)\nax.set_ylabel('Scores', fontsize=12)\nax.set_title('Scores by number of game and players', fontsize=14, fontweight='bold')\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.7)\n\n# Customize ticks\nax.set_xticks(np.arange(len(categories)))\nax.set_xticklabels(categories, rotation=45, ha='right')\n\n# Add legend\nax.legend(title='Players', loc='upper right', fontsize=10)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create data\nx = np.linspace(-5, 5, 100)\ny = np.linspace(-5, 5, 100)\nX, Y = np.meshgrid(x, y)\nZ = np.sin(np.sqrt(X**2 + Y**2))\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Plot the contourf with a colormap and add a color bar\ncontour = ax.contourf(X, Y, Z, levels=20, cmap='viridis')\n\n# Add a color bar to the plot\ncbar = fig.colorbar(contour, ax=ax)\ncbar.set_label('Time', rotation=270, labelpad=15)\n\n# Set labels and title\nax.set_xlabel('Variable 1')\nax.set_ylabel('Variable 2')\nax.set_title('Contour Plot of a Function')\n\n# Add a grid for better readability\nax.grid(True, linestyle='--', alpha=0.5)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_20.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the bar chart\ncategories = ['Female Player', 'Male Player', 'LLM Player', 'Person Player']\nvalues = [5.7, 6.2, 7.0, 3.4]\nerrors = [0.5, 0.3, 0.4, 0.2]\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Define colors for each bar\ncolors = ['#FF9999', '#66B3FF', '#99FF99', '#FFCC99']\n\n# Plot the bar chart with error bars\nbars = ax.bar(categories, values, yerr=errors, color=colors, capsize=5, edgecolor='black')\n\n# Add labels and title\nax.set_xlabel('Trustee Scenario', fontsize=12)\nax.set_ylabel('Average Amount Sent ($)', fontsize=12)\nax.set_title('Comparison of Average Amount Sent by Different Player Types', fontsize=14, fontweight='bold')\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.7)\n\n# Annotate each bar with its value\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.1, f'{yval:.1f}', ha='center', va='bottom', fontsize=10)\n\n# Customize the legend\nlegend_labels = ['gpt-3.5-turbo-0613', 'gpt-3.5-turbo-instruct', 'gpt-4', 'llama-2-13b', 'llama-2-70b']\nax.legend(bars, legend_labels, title='Model', loc='upper right', fontsize=10)\n\n# Add a horizontal line at y=4.2 for reference\nax.axhline(y=4.2, color='green', linestyle='--', linewidth=1.5, label='Reference Line')\n\n# Add a vertical line at x=2 for reference\nax.axvline(x=2, color='red', linestyle='--', linewidth=1.5, label='Reference Line')\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_21.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\ncategories = ['Athlete Jim', 'Athlete Bill']\nrunning_times = [120, 130]\ninterrupted_times = [140, 160]\nrest_times = [100, 110]\nrunning2_times = [150, 170]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(7.0, 5.0))\n\n# Define colors for each category\ncolors = ['#008000', '#FFA500', '#FF0000', '#00FF00']\n\n# Plot the data with error bars and custom colors\nbar_width = 0.2\nindex = np.arange(len(categories))\n\nax.bar(index, running_times, bar_width, label='Running', color=colors[0], edgecolor='black')\nax.bar(index + bar_width, interrupted_times, bar_width, label='Interrupted', color=colors[1], edgecolor='black')\nax.bar(index + 2*bar_width, rest_times, bar_width, label='Rest', color=colors[2], edgecolor='black')\nax.bar(index + 3*bar_width, running2_times, bar_width, label='Running2', color=colors[3], edgecolor='black')\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.5)\n\n# Set labels and title\nax.set_xlabel('Seconds Since Start', fontsize=12)\nax.set_ylabel('Time (seconds)', fontsize=12)\nax.set_title('Endurance Race Performance Analysis', fontsize=14, fontweight='bold')\nax.set_xticks(index + bar_width)\nax.set_xticklabels(categories, fontsize=11)\n\n# Add a legend\nax.legend(loc='upper right', fontsize=10)\n\n# Annotate the chart with a note\nax.annotate('Race interrupted due to weather',\n            xy=(0.5, 180), xytext=(0.5, 190),\n            arrowprops=dict(facecolor='black', shrink=0.05),\n            fontsize=10, ha='center')\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_22.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create sample data for three different groups\ngroup1 = np.random.normal(loc=3, scale=1, size=100)\ngroup2 = np.random.normal(loc=4, scale=1.5, size=100)\ngroup3 = np.random.normal(loc=5, scale=2, size=100)\n\n# Create a new figure with a larger size for better visibility\nfig, axes = plt.subplots(1, 3, figsize=(15, 5), sharey=True)\n\n# Plot the first subplot\naxes[0].hist(group1, bins=20, color='green', edgecolor='black', alpha=0.7)\naxes[0].set_title('Control Group')\naxes[0].set_xlabel('Number of Observations')\naxes[0].set_ylabel('Value Range')\n\n# Plot the second subplot\naxes[1].scatter(group2, group1, color='red', alpha=0.6)\naxes[1].set_title('Treatment Group 1')\naxes[1].set_xlabel('Number of Observations')\naxes[1].set_ylabel('Value Range')\n\n# Plot the third subplot\naxes[2].boxplot([group3, group2], vert=False, patch_artist=True, colors=['orange', 'red'])\naxes[2].set_title('Treatment Group 2')\naxes[2].set_xlabel('Number of Observations')\naxes[2].set_ylabel('Value Range')\n\n# Adjust layout for better spacing\nplt.tight_layout()\n\n# Add a main title to the figure\nplt.suptitle('Comparative Distribution of Three Different Groups', fontsize=16, fontweight='bold')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_23.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Waterfall chart representing sales over time\nmonths = np.array([-300, -200, -100, 0, 100, 200, 300])\nsales = np.array([350, 150, -50, -120, 200, 75, -135])\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Plot the waterfall chart\nbars = ax.bar(months, sales, color=['green' if s >= 0 else 'red' for s in sales], edgecolor='black')\n\n# Add value labels on top of each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 5, f'{yval}', ha='center', va='bottom', fontsize=10)\n\n# Set labels and title\nax.set_xlabel('Months')\nax.set_ylabel('Sales')\nax.set_title('Waterfall Chart')\n\n# Customize the x-axis ticks\nax.set_xticks(months)\nax.set_xticklabels(['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul'])\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=.25)\n\n# Adjust layout for better spacing\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_24.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create data for the plot\nx = np.linspace(-1, 1, 200)\ny = np.linspace(-1, 1, 200)\nX, Y = np.meshgrid(x, y)\nZ = np.sin(np.sqrt(X**2 + Y**2)) / (np.sqrt(X**2 + Y**2))\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data with a colormap and contour lines\nc = ax.contourf(X, Y, Z, levels=50, cmap='coolwarm', alpha=0.8)\ncontour = ax.contour(X, Y, Z, levels=10, colors='black', linewidths=0.5)\n\n# Add a color bar to the plot\ncbar = fig.colorbar(c, ax=ax, orientation='vertical')\ncbar.set_label('Z Value')\n\n# Set labels and title\nax.set_xlabel('X Axis')\nax.set_ylabel('Y Axis')\nax.set_title('Triangular Mesh of Delaunay Triangulation, Flat Shading')\n\n# Add a grid for better readability\nax.grid(True, linestyle='--', alpha=0.5)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_25.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create data for the heatmap\ndata = np.array([\n    [1, 2, 3, 4, 5],\n    [2, 3, 4, 5, 6],\n    [3, 4, 5, 6, 7],\n    [4, 5, 6, 7, 8],\n    [5, 6, 7, 8, 9]\n])\n\n# Create a new figure with a specific size\nfig, axes = plt.subplots(2, 2, figsize=(8.0, 6.0), constrained_layout=True)\n\n# Plot the first heatmap\ncax1 = axes[0, 0].imshow(data, cmap='viridis', interpolation='nearest')\naxes[0, 0].set_title('nearest')\naxes[0, 0].set_xlabel('X-axis')\naxes[0, 0].set_ylabel('Y-axis')\nfig.colorbar(cax1, ax=axes[0, 0], orientation='vertical')\n\n# Plot the second heatmap\ncax2 = axes[0, 1].imshow(data, cmap='plasma', interpolation='nearest')\naxes[0, 1].set_title('nearest')\naxes[0, 1].set_xlabel('X-axis')\naxes[0, 1].set_ylabel('Y-axis')\nfig.colorbar(cax2, ax=axes[0, 1], orientation='vertical')\n\n# Plot the third heatmap\ncax3 = axes[1, 0].imshow(data, cmap='coolwarm', interpolation='nearest')\naxes[1, 0].set_title('bilinear')\naxes[1, 0].set_xlabel('X-axis')\naxes[1, 0].set_ylabel('Y-axis')\nfig.colorbar(cax3, ax=axes[1, 0], orientation='vertical')\n\n# Plot the fourth heatmap\ncax4 = axes[1, 1].imshow(data, cmap='hot', interpolation='nearest')\naxes[1, 1].set_title('bilinear')\naxes[1, 1].set_xlabel('X-axis')\naxes[1, 1].set_ylabel('Y-axis')\nfig.colorbar(cax4, ax=axes[1, 1], orientation='vertical')\n\n# Add a main title to the figure\nplt.suptitle('NonUniformImage class', fontsize=16, fontweight='bold')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data for two different datasets\nx1 = np.array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\ny1 = np.array([100, 200, 300, 400, 500, 600, 550, 450, 350, 250])\n\nx2 = np.array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\ny2 = np.array([150, 250, 350, 450, 550, 650, 500, 400, 300, 200])\n\n# Create a new figure with a larger size for better visibility\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10.0, 4.0), sharey=True)\n\n# Plot the first dataset\nbars1 = ax1.bar(x1, y1, color=['#FF9999', '#FFCC99', '#FFFF99', '#B3FF99', '#99E6FF', '#9999FF', '#CC99FF', '#FF99E6', '#FF99B3', '#FF9999'])\nax1.set_title('Flickr30k')\nax1.set_xlabel('Number of bits')\nax1.set_ylabel('Recall sum')\nax1.set_xticks(x1)\nax1.set_xticklabels(x1)\nax1.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.7)\n\n# Add labels to each bar\nfor bar in bars1:\n    yval = bar.get_height()\n    ax1.text(bar.get_x() + bar.get_width()/2, yval + 10, int(yval), ha='center', va='bottom')\n\n# Plot the second dataset\nbars2 = ax2.bar(x2, y2, color=['#FF9999', '#FFCC99', '#FFFF99', '#B3FF99', '#99E6FF', '#9999FF', '#CC99FF', '#FF99E6', '#FF99B3', '#FF9999'])\nax2.set_title('MS-COCO')\nax2.set_xlabel('Number of bits')\nax2.set_xticks(x2)\nax2.set_xticklabels(x2)\nax2.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.7)\n\n# Add labels to each bar\nfor bar in bars2:\n    yval = bar.get_height()\n    ax2.text(bar.get_x() + bar.get_width()/2, yval + 10, int(yval), ha='center', va='bottom')\n\n# Adjust layout for better spacing\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Generate data\nx = np.linspace(0, 25, 100)\ny = np.sin(x) + np.cos(x) + np.random.normal(0, 0.1, 100)\n\n# Create a new figure with a larger size for better visibility\nplt.figure(figsize=(8.0, 6.0))\n\n# Plot the data with enhanced aesthetics\nplt.plot(x, y, label='Monte Carlo', color='darkred', linestyle='-', linewidth=2, marker='o', markersize=4, markerfacecolor='white')\n\n# Add grid lines for better readability\nplt.grid(True, which='both', linestyle='--', linewidth=0.5, alpha=0.7)\n\n# Set axis limits\nplt.xlim(0, 25)\nplt.ylim(-3, 3)\n\n# Add labels and title with improved font sizes\nplt.xlabel('x (m)', fontsize=12)\nplt.ylabel('y (m)', fontsize=12)\nplt.title('Denser Points with Perfectly Circular Error Ellipses', fontsize=14, fontweight='bold')\n\n# Add a legend with a shadow effect\nplt.legend(loc='upper right', fontsize=10, shadow=True)\n\n# Annotate a specific point for emphasis\nplt.annotate('Peak', xy=(np.pi, 2), xytext=(np.pi + 1, 2.5),\n             arrowprops=dict(facecolor='black', shrink=0.05),\n             fontsize=10, color='darkblue')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create data for a more complex plot\nx = np.linspace(0, 2 * np.pi, 100)\ny = np.sin(x)\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Plot the data with enhanced styling\nax.plot(x, y, color='blue', linestyle='-', linewidth=2, marker='o', markersize=5, markerfacecolor='orange', label='Sine Wave')\n\n# Set labels with improved font size and style\nax.set_xlabel('X-axis', fontsize=12, fontweight='bold')\nax.set_ylabel('Y-axis', fontsize=12, fontweight='bold')\n\n# Add a title with enhanced font size and style\nax.set_title('Enhanced Sine Wave Plot', fontsize=14, fontweight='bold')\n\n# Add grid lines for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5, alpha=0.7)\n\n# Customize the legend\nax.legend(loc='upper right', fontsize=10)\n\n# Set axis limits for better focus\nax.set_xlim([0, 2 * np.pi])\nax.set_ylim([-1.5, 1.5])\n\n# Add annotations to highlight key points\nax.annotate('Peak', xy=(np.pi/2, 1), xytext=(np.pi/2 + 0.5, 1.2),\n            arrowprops=dict(facecolor='black', shrink=0.05),\n            fontsize=10, fontweight='bold')\n\nax.annotate('Trough', xy=(3*np.pi/2, -1), xytext=(3*np.pi/2 + 0.5, -1.2),\n            arrowprops=dict(facecolor='black', shrink=0.05),\n            fontsize=10, fontweight='bold')\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create data\nx = np.linspace(0, 2, 100)\ny = np.linspace(0, 2, 100)\nX, Y = np.meshgrid(x, y)\nZ = np.sin(X) * np.cos(Y)\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(8.0, 7.0))\n\n# Plot the heatmap with enhanced color map and transparency\ncax = ax.imshow(Z, cmap='viridis', interpolation='nearest', alpha=0.8)\n\n# Add a color bar to the plot\ncbar = fig.colorbar(cax, ax=ax, orientation='vertical')\ncbar.set_label('Intensity')\n\n# Set labels and title\nax.set_xlabel('\u03b1')\nax.set_ylabel('\u03b2')\nax.set_title('Heatmap of Intensity')\n\n# Add grid lines for better readability\nax.grid(True, linestyle='--', linewidth=0.5, color='gray', alpha=0.5)\n\n# Add contour lines to highlight patterns\ncontour = ax.contour(X, Y, Z, levels=10, colors='black', linewidths=0.5)\n\n# Add contour labels\nax.clabel(contour, inline=True, fontsize=8, fmt='%1.1f')\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data for the first plot\nx = np.linspace(0, 100, 200)\ny1 = np.sin(x / 10) * np.cos(x / 50)\ny2 = np.cos(x / 10) * np.sin(x / 50)\ny3 = np.sin(x / 10) * np.cos(x / 50) - 1.5\ny4 = np.cos(x / 10) * np.sin(x / 50) - 1.5\n\n# Create a new figure with a specific size\nfig, ax1 = plt.subplots(figsize=(8.0, 4.0))\n\n# Plot the first line with a blue color and dashed style\nax1.plot(x, y1, 'b--', label='Left', linewidth=2)\nax1.plot(x, y2, 'g--', label='Center Left', linewidth=2)\nax1.plot(x, y3, 'r--', label='Center Right', linewidth=2)\nax1.plot(x, y4, 'm--', label='Right', linewidth=2)\n\n# Set labels and title for the first subplot\nax1.set_xlabel('Users (U)', fontsize=12)\nax1.set_ylabel('Utility (f)', fontsize=12)\nax1.set_title('Utility distribution per topic', fontsize=14, fontweight='bold')\n\n# Add a legend with a shadow effect\nax1.legend(loc='upper right', fontsize=10, shadow=True)\n\n# Create a second subplot\nax2 = fig.add_subplot(122)\n\n# Sample data for the second plot\nitems = ['L', 'CL', 'C', 'CR', 'R']\nusers = [10, 20, 30, 40, 50]\nutility = [0.5, 0.7, 0.6, 0.8, 0.9]\n\n# Scatter plot with different colors and sizes\nscatter = ax2.scatter(users, utility, c=utility, cmap='viridis', s=100, alpha=0.7)\n\n# Add a color bar\ncbar = plt.colorbar(scatter)\ncbar.set_label('Utility', rotation=270, labelpad=15)\n\n# Set labels and title for the second subplot\nax2.set_xlabel('Items (M)', fontsize=12)\nax2.set_ylabel('Users(U)', fontsize=12)\nax2.set_title('User preference matrix (M)', fontsize=14, fontweight='bold')\n\n# Add grid lines for better readability\nax2.grid(True, linestyle='--', alpha=0.7)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create data for three different scatter plots\nx1 = np.array([1, 2, 3, 4, 5])\ny1 = np.array([2, 3, 5, 7, 11])\n\nx2 = np.array([0, 1, 2, 3, 4])\ny2 = np.array([1, 4, 9, 16, 25])\n\nx3 = np.array([-1, 0, 1, 2, 3])\ny3 = np.array([1, 0, 1, 0, 1])\n\n# Create a new figure with a larger size for better visibility\nfig, axes = plt.subplots(1, 3, figsize=(10.0, 4.0), sharex=True, sharey=True)\n\n# Plot the first scatter plot\naxes[0].scatter(x1, y1, c='red', s=100, alpha=0.6, edgecolors='k')\naxes[0].set_title('num. of points = 5')\naxes[0].set_xlabel('Reactive-2 payoff')\naxes[0].set_ylabel('Memory-2 payoff')\n\n# Plot the second scatter plot\naxes[1].scatter(x2, y2, c='blue', s=100, alpha=0.6, edgecolors='k')\naxes[1].set_title('num. of points = 3')\naxes[1].set_xlabel('Reactive-2 payoff')\n\n# Plot the third scatter plot\naxes[2].scatter(x3, y3, c='green', s=100, alpha=0.6, edgecolors='k')\naxes[2].set_title('num. of points = 3')\naxes[2].set_xlabel('Reactive-2 payoff')\n\n# Add a common title for the entire figure\nplt.suptitle('Scatter Plots of Different Data Sets', fontsize=16, fontweight='bold')\n\n# Adjust layout to prevent overlap\nplt.tight_layout(rect=[0, 0.03, 1, 0.95])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data for two different models\nmodel1_data = np.array([\n    [2.5, 3.0, 3.5, 4.0, 4.5],\n    [3.0, 3.5, 4.0, 4.5, 5.0],\n    [3.5, 4.0, 4.5, 5.0, 5.5],\n    [4.0, 4.5, 5.0, 5.5, 6.0],\n    [4.5, 5.0, 5.5, 6.0, 6.5]\n])\n\nmodel2_data = np.array([\n    [1.5, 2.0, 2.5, 3.0, 3.5],\n    [2.0, 2.5, 3.0, 3.5, 4.0],\n    [2.5, 3.0, 3.5, 4.0, 4.5],\n    [3.0, 3.5, 4.0, 4.5, 5.0],\n    [3.5, 4.0, 4.5, 5.0, 5.5]\n])\n\n# Create a new figure with a larger size for better visibility\nfig, axes = plt.subplots(1, 2, figsize=(10.0, 4.0), sharey=True)\n\n# Plot the first model's data\naxes[0].boxplot(model1_data, vert=False, patch_artist=True, boxprops=dict(facecolor='lightblue', edgecolor='black'),\n                whiskerprops=dict(color='black'), capprops=dict(color='black'), medianprops=dict(color='red'))\naxes[0].set_title('Model = Vicuna')\naxes[0].set_xlabel('Perplexity Reduction')\n\n# Plot the second model's data\naxes[1].boxplot(model2_data, vert=False, patch_artist=True, boxprops=dict(facecolor='lightcoral', edgecolor='black'),\n                whiskerprops=dict(color='black'), capprops=dict(color='black'), medianprops=dict(color='red'))\naxes[1].set_title('Model = Alpaca')\naxes[1].set_xlabel('Perplexity Reduction')\n\n# Enhance the layout\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/PIP_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create sample data\nx = np.linspace(-40, 10, 100)\ny = np.sin(x / 2) * np.cos(x / 3)\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Plot the main line chart\nax.plot(x, y, label='Main Line', color='navy', linewidth=2, linestyle='-', marker='o', markersize=5, markevery=10)\n\n# Add a secondary y-axis for demonstration purposes\nax2 = ax.twinx()\nax2.plot(x, np.exp(x / 10), label='Exponential', color='darkorange', linewidth=2, linestyle='--', marker='s', markersize=5, markevery=10)\n\n# Set labels and title\nax.set_xlabel('X Axis Label (units)', fontsize=12)\nax.set_ylabel('Y Axis Label (units)', fontsize=12)\nax.set_title('Sample Plot with Two Y-Axes', fontsize=14, fontweight='bold')\n\n# Customize grid\nax.grid(True, which='both', linestyle='--', linewidth=0.5, alpha=0.7)\n\n# Add legends\nax.legend(loc='upper left', fontsize=10)\nax2.legend(loc='upper right', fontsize=10)\n\n# Enhance aesthetics\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\nax2.spines['left'].set_color('navy')\nax2.spines['bottom'].set_color('navy')\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/PIP_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Let's create a more complex scenario with multiple lines and annotations\nx = np.linspace(0, 100, 100)\ny1 = np.sin(x / 10) * np.exp(-x / 50) + 1\ny2 = np.cos(x / 10) * np.exp(-x / 50) + 1\ny3 = np.tan(x / 10) * np.exp(-x / 50) + 1\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Plot the data with different styles\nax.plot(x, y1, label='Line 1 (Random Noise)', color='green', linestyle='-', linewidth=2, marker='o', markersize=4)\nax.plot(x, y2, label='Line 2 (Exponential Focus)', color='red', linestyle='--', linewidth=2, marker='s', markersize=4)\nax.plot(x, y3, label='Line 3 (Sine Wave)', color='blue', linestyle='-.', linewidth=2, marker='^', markersize=4)\n\n# Add a legend with a shadow effect\nax.legend(loc='upper right', shadow=True)\n\n# Set labels with more descriptive text\nax.set_xlabel('Gradient Steps (x 62.5K)', fontsize=12)\nax.set_ylabel('Exponential Scale', fontsize=12)\nax.set_title('Complex Data Visualization', fontsize=14, fontweight='bold')\n\n# Add grid lines for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Add a shaded region to highlight a specific area of interest\nax.axhspan(1.5, 2.5, color='gray', alpha=0.3, label='Highlighted Region')\n\n# Annotate a specific point\nax.annotate('Key Point', xy=(50, 1.8), xytext=(60, 2.5),\n            arrowprops=dict(facecolor='black', shrink=0.05),\n            fontsize=10, color='darkred')\n\n# Add a subplot with a zoomed-in view of a specific region\naxins = fig.add_axes([0.6, 0.6, 0.25, 0.25])  # [left, bottom, width, height]\naxins.plot(x, y1, color='green', linestyle='-', linewidth=2, marker='o', markersize=4)\naxins.set_xlim(25, 75)\naxins.set_ylim(1.5, 2.5)\naxins.set_xticks([])\naxins.set_yticks([])\n\n# Add a rectangle to indicate the zoomed-in area\nrect = plt.Rectangle((25, 1.5), 50, 1, fill=False, edgecolor='black', linewidth=1)\nax.add_patch(rect)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/PIP_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Predicted probability of a binary event\nx = np.array([0.35, 0.4, 0.45, 0.5, 0.55, 0.6, 0.65, 0.7, 0.75, 0.8, 0.85, 0.9, 0.95])\ny = np.array([0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 0.95, 0.98, 0.99, 0.995, 0.998])\n\n# Create a new figure with a larger size for better visibility\nplt.figure(figsize=(10.0, 6.0))\n\n# Plot the data with enhanced aesthetics\nplt.scatter(x, y, c='blue', edgecolor='black', s=100, alpha=0.7, label='Known')\n\n# Add a second dataset for comparison\nx_unknown = np.array([0.3, 0.35, 0.4, 0.45, 0.5, 0.55, 0.6, 0.65, 0.7, 0.75, 0.8, 0.85, 0.9])\ny_unknown = np.array([0.15, 0.25, 0.35, 0.45, 0.55, 0.65, 0.75, 0.85, 0.9, 0.92, 0.94, 0.96, 0.98])\nplt.scatter(x_unknown, y_unknown, c='green', edgecolor='black', s=100, alpha=0.7, label='Unknown')\n\n# Add grid lines for better readability\nplt.grid(True, linestyle='--', alpha=0.5)\n\n# Set labels and title with improved font sizes\nplt.xlabel('Maximum Predicted Probability', fontsize=12)\nplt.ylabel('Number of Examples', fontsize=12)\nplt.title('Comparison of Known vs Unknown Events', fontsize=14, fontweight='bold')\n\n# Add a legend with a shadow effect\nplt.legend(loc='upper left', fontsize=10, shadow=True)\n\n# Customize the x and y axis limits\nplt.xlim(0.3, 1.0)\nplt.ylim(0, 1.0)\n\n# Add annotations to highlight key points\nfor i, txt in enumerate(y):\n    plt.annotate(f'{txt:.2f}', (x[i], y[i]), textcoords=\"offset points\", xytext=(0,10), ha='center', fontsize=9)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/PIP_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.array([1, 2, 3, 4, 5])\ny1 = np.array([2, 3, 5, 7, 11])\ny2 = np.array([1, 4, 6, 8, 10])\ny3 = np.array([3, 5, 7, 9, 11])\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot the data with different styles\nax.plot(x, y1, label='INT8', color='red', linestyle='-', marker='o', markersize=5)\nax.plot(x, y2, label='INT4', color='blue', linestyle='--', marker='s', markersize=5)\nax.plot(x, y3, label='INT2', color='green', linestyle='-.', marker='^', markersize=5)\n\n# Set labels and title with improved font sizes\nax.set_xlabel('Data Type', fontsize=12)\nax.set_ylabel('Bias Score', fontsize=12)\nax.set_title('Bias Score by Data Type and Model', fontsize=14, fontweight='bold')\n\n# Add grid lines for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Add a legend with a shadow effect\nax.legend(loc='upper left', fontsize=10, shadow=True)\n\n# Annotate specific points for emphasis\nfor i, txt in enumerate(y1):\n    ax.annotate(txt, (x[i], y1[i]), textcoords=\"offset points\", xytext=(0,10), ha='center', fontsize=9)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/PIP_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Predicted probability of two classes\npredicted_probabilities = np.array([0.05, 0.1, 0.15, 0.2, 0.25, 0.3, 0.35, 0.4, 0.45, 0.5, 0.55, 0.6, 0.65, 0.7, 0.75, 0.8, 0.85, 0.9, 0.95])\nclass_1_counts = np.array([100, 150, 200, 250, 300, 350, 400, 450, 500, 550, 600, 650, 700, 750, 800, 850, 900, 950, 1000])\nclass_2_counts = np.array([50, 100, 150, 200, 250, 300, 350, 400, 450, 500, 550, 600, 650, 700, 750, 800, 850, 900, 950])\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot the bar chart with different colors and styles\nax.bar(predicted_probabilities, class_1_counts, color='tab:orange', alpha=0.7, label='Known')\nax.bar(predicted_probabilities, class_2_counts, bottom=class_1_counts, color='tab:blue', alpha=0.7, label='Unknown')\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.5)\n\n# Set labels and title with improved font sizes\nax.set_xlabel('Maximum Predicted Probability', fontsize=12)\nax.set_ylabel('Number of Examples', fontsize=12)\nax.set_title('Distribution of Examples by Predicted Probability', fontsize=14)\n\n# Add a legend with a more descriptive title\nax.legend(title='Class', fontsize=10)\n\n# Customize ticks for better readability\nax.set_xticks(predicted_probabilities)\nax.set_xticklabels(predicted_probabilities, rotation=45, ha='right', fontsize=10)\n\n# Add annotations to highlight the maximum values\nfor i, (p, c1, c2) in enumerate(zip(predicted_probabilities, class_1_counts, class_2_counts)):\n    ax.annotate(f'{c1}', xy=(p, c1), xytext=(p, c1 + 50),\n                arrowprops=dict(facecolor='black', shrink=0.05),\n                fontsize=9, ha='center')\n    ax.annotate(f'{c2}', xy=(p, c1 + c2), xytext=(p, c1 + c2 + 50),\n                arrowprops=dict(facecolor='black', shrink=0.05),\n                fontsize=9, ha='center')\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/PIP_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Width of layer vs. Empirical Lipschitz constant\nwidths = np.array([2**i for i in range(1, 11)])\nlipschitz_constants = [\n    np.array([100000, 200000, 300000, 400000, 500000, 600000, 700000, 800000, 900000, 1000000]),\n    np.array([10000, 20000, 30000, 40000, 50000, 60000, 70000, 80000, 90000, 100000]),\n    np.array([1000, 2000, 3000, 4000, 5000, 6000, 7000, 8000, 9000, 10000]),\n    np.array([100, 200, 300, 400, 500, 600, 700, 800, 900, 1000])\n]\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Plot each dataset with different styles\nfor i, lc in enumerate(lipschitz_constants):\n    ax.plot(widths, lc, label=f'Cos | n = {10 * (i + 1)}', linestyle='-', marker='o', markersize=5)\n\n# Set labels and title with improved font sizes\nax.set_xlabel('Width of Layer', fontsize=12)\nax.set_ylabel('Empirical Lipschitz Constant', fontsize=12)\nax.set_title('Empirical Lipschitz Constant vs. Width of Layer', fontsize=14)\n\n# Add grid for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Customize ticks\nax.set_xticks(widths)\nax.set_yticks(np.arange(0, 1100000, 100000))\n\n# Add a legend with a shadow effect\nax.legend(loc='upper left', fontsize=10, shadow=True)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/PIP_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Simulating a scenario where we have multiple lines representing different conditions\nx = np.linspace(0, 10000, 100)\ny1 = np.exp(x / 2000) * 5000\ny2 = np.exp(x / 3000) * 4000\ny3 = np.exp(x / 4000) * 3000\ny4 = np.exp(x / 5000) * 2000\n\n# Create a new figure with a larger size for better visibility\nplt.figure(figsize=(8.0, 6.0))\n\n# Plot the data with enhanced styles\nplt.plot(x, y1, label='WI', color='red', linestyle='-', linewidth=2, marker='o', markersize=4)\nplt.plot(x, y2, label='ISQ', color='green', linestyle='--', linewidth=2, marker='s', markersize=4)\nplt.plot(x, y3, label='WIQL', color='purple', linestyle='-.', linewidth=2, marker='^', markersize=4)\nplt.plot(x, y4, label='Greedy', color='blue', linestyle=':', linewidth=2, marker='D', markersize=4)\n\n# Add grid for better readability\nplt.grid(True, which='both', linestyle='--', linewidth=0.5, alpha=0.7)\n\n# Set labels and title with improved font sizes\nplt.xlabel('Time Steps', fontsize=12)\nplt.ylabel('Discounted Cumulative Reward', fontsize=12)\nplt.title('Discounted Cumulative Rewards Over Time', fontsize=14, fontweight='bold')\n\n# Add a legend with a shadow effect\nplt.legend(loc='upper left', fontsize=10, shadow=True)\n\n# Customize ticks for better readability\nplt.xticks(fontsize=10)\nplt.yticks(fontsize=10)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/PIP_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Discounted cumulative reward over time for two different strategies\ntime_steps = np.arange(1, 201)\ndiscounted_reward_wi = np.array([0.05 * i for i in range(1, 201)])\ndiscounted_reward_isq = np.array([0.03 * i + 0.05 * (i % 20) for i in range(1, 201)])\n\n# Create a new figure with a specific size\nplt.figure(figsize=(6.0, 4.0))\n\n# Plot the discounted cumulative reward for each strategy\nplt.plot(time_steps, discounted_reward_wi, label='WI', color='blue', linestyle='-', linewidth=2)\nplt.plot(time_steps, discounted_reward_isq, label='ISQ', color='orange', linestyle='--', linewidth=2)\n\n# Add grid lines for better readability\nplt.grid(True, which='both', linestyle='--', linewidth=0.5, alpha=0.7)\n\n# Set labels and title with improved font sizes\nplt.xlabel('Time Steps', fontsize=12)\nplt.ylabel('Discounted Cumulative Reward', fontsize=12)\nplt.title('Discounted Cumulative Reward Over Time', fontsize=14)\n\n# Add a legend with a shadow effect\nplt.legend(loc='upper left', fontsize=10, shadow=True)\n\n# Customize ticks for better clarity\nplt.xticks(np.arange(0, 201, 20))\nplt.yticks(np.arange(0, 0.55, 0.05))\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/PIP_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create sample data\nx = np.linspace(-4, 4, 100)\ny1 = np.sin(x)\ny2 = np.cos(x)\ny3 = np.tan(x)\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Plot the data with different styles and markers\nax.scatter(x, y1, c='orange', marker='o', s=50, label='Daytime Sunny')\nax.scatter(x, y2, c='blue', marker='s', s=50, label='Night Rainy')\nax.scatter(x, y3, c='green', marker='^', s=50, label='PGST')\n\n# Set labels and title with improved font sizes\nax.set_xlabel('X Axis', fontsize=12)\nax.set_ylabel('Y Axis', fontsize=12)\nax.set_title('Sample Scatter Plot', fontsize=14)\n\n# Add a grid for better readability\nax.grid(True, linestyle='--', alpha=0.7)\n\n# Add a legend with a shadow effect\nax.legend(loc='upper right', fontsize=10, shadow=True)\n\n# Customize the axis limits\nax.set_xlim(-4, 4)\nax.set_ylim(-2, 2)\n\n# Add annotations to highlight specific points\nax.annotate('Max', xy=(np.pi/2, 1), xytext=(np.pi/2 + 0.5, 1.5),\n            arrowprops=dict(facecolor='black', shrink=0.05),\n            fontsize=10)\nax.annotate('Min', xy=(-np.pi/2, -1), xytext=(-np.pi/2 - 0.5, -1.5),\n            arrowprops=dict(facecolor='black', shrink=0.05),\n            fontsize=10)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/PIP_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create sample data for multiple scatter plots\nx1, y1 = np.random.rand(50) * 10 - 5, np.random.rand(50) * 10 - 5\nx2, y2 = np.random.rand(50) * 10 - 5, np.random.rand(50) * 10 - 5\nx3, y3 = np.random.rand(50) * 10 - 5, np.random.rand(50) * 10 - 5\nx4, y4 = np.random.rand(50) * 10 - 5, np.random.rand(50) * 10 - 5\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Plot the data with different colors and markers\nax.scatter(x1, y1, c='red', marker='o', label='Group 1')\nax.scatter(x2, y2, c='green', marker='s', label='Group 2')\nax.scatter(x3, y3, c='blue', marker='^', label='Group 3')\nax.scatter(x4, y4, c='purple', marker='D', label='Group 4')\n\n# Add a legend to the plot\nax.legend(title='Groups')\n\n# Set labels with more descriptive text\nax.set_xlabel('X Axis Label', fontsize=12)\nax.set_ylabel('Y Axis Label', fontsize=12)\n\n# Add a title to the plot\nax.set_title('Multiple Scatter Plots with Legends', fontsize=14)\n\n# Add grid lines for better readability\nax.grid(True, linestyle='--', alpha=0.7)\n\n# Add a reference line for demonstration\nax.axhline(y=0, color='black', linewidth=0.8)\nax.axvline(x=0, color='black', linewidth=0.8)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/area_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create sample data\nx = np.linspace(0, 10, 100)\ny1 = np.sin(x)\ny2 = np.cos(x)\ny3 = np.tan(x)\ny4 = np.exp(-x)\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(9.0, 8.0))\n\n# Plot the data with different styles and colors\nax.plot(x, y1, label='ActivityNet mIoU', color='darkred', linestyle='-', linewidth=2, marker='o', markersize=5)\nax.plot(x, y2, label='Breakfast MoF', color='orange', linestyle='--', linewidth=2, marker='s', markersize=5)\nax.plot(x, y3, label='ActivityNet CIDER', color='teal', linestyle='-.', linewidth=2, marker='^', markersize=5)\nax.plot(x, y4, label='QVHighlights mAP', color='gray', linestyle=':', linewidth=2, marker='D', markersize=5)\n\n# Set labels with improved font size and style\nax.set_xlabel('Time (seconds)', fontsize=12, fontweight='bold')\nax.set_ylabel('Performance Score', fontsize=12, fontweight='bold')\n\n# Add a title with enhanced styling\nax.set_title('Performance Metrics Over Time', fontsize=14, fontweight='bold', color='navy')\n\n# Customize the grid\nax.grid(True, which='both', linestyle='--', linewidth=0.5, alpha=0.7)\n\n# Add a legend with a shadow effect\nax.legend(loc='upper right', fontsize=10, shadow=True)\n\n# Enhance the background color for better contrast\nax.set_facecolor('#f0f0f0')\n\n# Add annotations to highlight specific points\nax.annotate('Peak', xy=(np.pi/2, 1), xytext=(np.pi/2 + 0.5, 1.5),\n             arrowprops=dict(facecolor='black', shrink=0.05),\n             fontsize=10, color='darkred')\n\nax.annotate('Tangent', xy=(np.pi/4, 1), xytext=(np.pi/4 - 1, 0.5),\n             arrowprops=dict(facecolor='black', shrink=0.05),\n             fontsize=10, color='teal')\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/area_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Let's assume we're plotting the growth of two different species over time\ntime = np.linspace(0, 3, 100)\nspecies1 = np.exp(time)  # Exponential growth for species 1\nspecies2 = np.sin(time) + 1  # Sine wave for species 2\nspecies3 = np.cos(time) + 1  # Cosine wave for species 3\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(10.0, 10.0))\n\n# Plot the data with different styles and markers\nax.plot(time, species1, label='GT', color='green', linestyle='-', linewidth=2, marker='o', markersize=5)\nax.plot(time, species2, label='DRS', color='blue', linestyle='--', linewidth=2, marker='s', markersize=5)\nax.plot(time, species3, label='PR-based', color='red', linestyle='-.', linewidth=2, marker='^', markersize=5)\n\n# Set labels with more descriptive text\nax.set_xlabel('Time (years)', fontsize=12)\nax.set_ylabel('Population Size', fontsize=12)\nax.set_title('Growth of Different Species Over Time', fontsize=14, fontweight='bold')\n\n# Add grid lines for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5, alpha=0.7)\n\n# Customize the legend\nax.legend(loc='upper left', fontsize=10, frameon=True, shadow=True)\n\n# Add annotations to highlight key points\nax.annotate('Peak Growth', xy=(1.5, 4), xytext=(2, 45),\n            arrowprops=dict(facecolor='black', shrink=0.05),\n            fontsize=10, color='darkred')\n\n# Enhance the layout\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/area_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: A hypothetical scenario of accuracy over time for different models\ntime = np.linspace(0, 80, 100)\naccuracy_clip = 0.53 + 0.2 * np.sin(time / 10)\naccuracy_laion_5k = 0.55 + 0.15 * np.cos(time / 10)\naccuracy_coco_5k = 0.57 + 0.1 * np.sin(time / 10)\naccuracy_laion_10k = 0.59 + 0.05 * np.cos(time / 10)\naccuracy_coco_10k = 0.61 + 0.025 * np.sin(time / 10)\n\n# Create a new figure with a larger size for better visibility\nplt.figure(figsize=(10.0, 6.0))\n\n# Plot each line with different styles and colors\nplt.plot(time, accuracy_clip, label='clip', color='black', linestyle='-', linewidth=2)\nplt.plot(time, accuracy_laion_5k, label='laion (5k)', color='yellow', linestyle='--', linewidth=2)\nplt.plot(time, accuracy_coco_5k, label='coco (5k)', color='blue', linestyle='-.', linewidth=2)\nplt.plot(time, accuracy_laion_10k, label='laion (10k)', color='green', linestyle=':', linewidth=2)\nplt.plot(time, accuracy_coco_10k, label='coco (10k)', color='red', linestyle='-', linewidth=2)\n\n# Set labels and title with improved font sizes\nplt.xlabel('Decomposition IO Norm', fontsize=12)\nplt.ylabel('Accuracy', fontsize=12)\nplt.title('Dynamic Effect of Vocab on Zero Shot Accuracy', fontsize=14, fontweight='bold')\n\n# Add grid lines for better readability\nplt.grid(True, which='both', linestyle='--', linewidth=0.5, alpha=0.7)\n\n# Customize ticks for better readability\nplt.xticks(fontsize=10)\nplt.yticks(fontsize=10)\n\n# Add a legend with a shadow effect\nplt.legend(loc='upper left', fontsize=10, shadow=True)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/area_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Cumulative performance gain over different augmentation levels\naugmentation_levels = np.linspace(0, 1, 10)\ncontent_gain = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\norganization_gain = np.array([1, 1.5, 2.5, 3, 4, 5, 6, 7, 8, 9])\nlanguage_gain = np.array([1, 1.2, 2, 3, 4, 5, 6, 7, 8, 9])\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(8.0, 4.0))\n\n# Plot the data with different styles and labels\nax.plot(augmentation_levels, content_gain, label='Content', color='royalblue', linestyle='-', linewidth=2, marker='o')\nax.plot(augmentation_levels, organization_gain, label='Organization', color='darkorange', linestyle='--', linewidth=2, marker='s')\nax.plot(augmentation_levels, language_gain, label='Language', color='teal', linestyle='-.', linewidth=2, marker='^')\n\n# Set labels and title with improved font sizes\nax.set_xlabel('n', fontsize=12)\nax.set_ylabel('Performance Gain (%)', fontsize=12)\nax.set_title('Cumulative Performance Gain by Augmentation Level', fontsize=14, fontweight='bold')\n\n# Add grid for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Customize ticks\nax.set_xticks(np.arange(0, 1.1, 0.1))\nax.set_yticks(np.arange(0, 11, 1))\n\n# Add a legend with a shadow effect\nax.legend(loc='upper left', fontsize=10, shadow=True)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/area_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: World population growth over time (in millions)\nyears = np.array([1950, 1960, 1970, 1980, 1990, 2000, 2010])\nafrica = np.array([1.3, 1.8, 2.5, 3.2, 4.1, 5.3, 6.7])\namericas = np.array([0.5, 0.7, 0.9, 1.1, 1.4, 1.8, 2.2])\nasia = np.array([3.5, 4.2, 5.1, 6.0, 7.0, 8.0, 9.0])\neurope = np.array([0.8, 1.0, 1.2, 1.5, 1.8, 2.1, 2.5])\noceania = np.array([0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8])\n\n# Create a new figure with a larger size for better visibility\nplt.figure(figsize=(8.0, 6.0))\n\n# Plot each region with different colors and line styles\nplt.plot(years, africa, label='Africa', color='green', linestyle='-', linewidth=2, marker='o')\nplt.plot(years, americas, label='Americas', color='yellow', linestyle='--', linewidth=2, marker='s')\nplt.plot(years, asia, label='Asia', color='red', linestyle='-.', linewidth=2, marker='^')\nplt.plot(years, europe, label='Europe', color='purple', linestyle=':', linewidth=2, marker='D')\nplt.plot(years, oceania, label='Oceania', color='blue', linestyle='-', linewidth=2, marker='x')\n\n# Set labels and title with improved font sizes\nplt.xlabel('Year', fontsize=12)\nplt.ylabel('Number of people (millions)', fontsize=12)\nplt.title('World Population Growth', fontsize=14, fontweight='bold')\n\n# Add grid lines for better readability\nplt.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Customize ticks for better readability\nplt.xticks(years)\nplt.yticks(np.arange(0, 10, 1))\n\n# Add a legend with a shadow effect\nplt.legend(loc='upper left', fontsize=10, shadow=True)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Scores for different games\ngames = ['Notre-Dame de Paris', 'Demi-Gods and Semi-Devils', 'The Count of Monte Cristo', 'Game of Thrones', 'Attack on Titan']\nscores = [6.2, 5.8, 4.9, 3.5, 2.1]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(7.0, 5.0))\n\n# Define colors for each bar\ncolors = ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd']\n\n# Plot the bar chart with enhanced aesthetics\nbars = ax.bar(games, scores, color=colors, edgecolor='black', linewidth=1.2)\n\n# Add value labels on top of each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.05, f'{yval:.1f}', ha='center', va='bottom', fontsize=10, fontweight='bold')\n\n# Set title and labels with improved styling\nax.set_title('Scores for Different Games', fontsize=14, fontweight='bold')\nax.set_xlabel('Games', fontsize=12)\nax.set_ylabel('Scores', fontsize=12)\n\n# Customize the x-axis ticks\nax.set_xticks(np.arange(len(games)))\nax.set_xticklabels(games, rotation=45, ha='right', fontsize=10)\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.7)\n\n# Adjust layout for better spacing\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Accuracy of different machine learning models\nmodels = ['Which', 'What', 'How', 'Will', 'Are', 'Is', 'Choose', 'Select', 'Identify', 'Fill']\naccuracy = [55, 45, 35, 25, 15, 60, 50, 40, 30, 20]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data with enhanced aesthetics\nbars = ax.bar(models, accuracy, color='skyblue', edgecolor='black', linewidth=1.2)\n\n# Add value labels on top of each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 1, f'{yval}%', ha='center', va='bottom', fontsize=10, fontweight='bold')\n\n# Set title and labels with improved styling\nax.set_title('Model Accuracy Comparison', fontsize=14, fontweight='bold')\nax.set_xlabel('Models', fontsize=12)\nax.set_ylabel('Accuracy (%)', fontsize=12)\n\n# Customize the x-axis ticks for better readability\nax.set_xticks(np.arange(len(models)))\nax.set_xticklabels(models, rotation=45, ha='right', fontsize=10)\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.7)\n\n# Adjust layout to prevent clipping of labels\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_100.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Average monthly sales for different products across three regions\nproducts = ['Product A', 'Product B', 'Product C', 'Product D', 'Product E']\nregion1_sales = [40, 60, 80, 90, 70]\nregion2_sales = [50, 70, 90, 100, 80]\nregion3_sales = [60, 80, 100, 110, 90]\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(15.0, 5.0))\n\n# Define colors for each region\ncolors = ['#1f77b4', '#ff7f0e', '#2ca02c']\n\n# Plot the data with improved aesthetics\nbar_width = 0.25\nindex = np.arange(len(products))\n\n# Plot each region's sales with different bar widths and colors\nbars1 = ax.bar(index, region1_sales, bar_width, label='Region 1', color=colors[0], edgecolor='black')\nbars2 = ax.bar(index + bar_width, region2_sales, bar_width, label='Region 2', color=colors[1], edgecolor='black')\nbars3 = ax.bar(index + 2*bar_width, region3_sales, bar_width, label='Region 3', color=colors[2], edgecolor='black')\n\n# Add labels and title\nax.set_xlabel('Products', fontsize=12)\nax.set_ylabel('Average Monthly Sales', fontsize=12)\nax.set_title('Average Monthly Sales by Product Across Regions', fontsize=14, fontweight='bold')\nax.set_xticks(index + bar_width)\nax.set_xticklabels(products)\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.7)\n\n# Add legend\nax.legend()\n\n# Annotate bars with values\ndef add_value_labels(bars):\n    for bar in bars:\n        yval = bar.get_height()\n        ax.text(bar.get_x() + bar.get_width()/2, yval + 5, int(yval), ha='center', va='bottom', fontsize=10)\n\nadd_value_labels(bars1)\nadd_value_labels(bars2)\nadd_value_labels(bars3)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Length of objects and their corresponding 'speakman' values\nlengths = np.array([0.9, 10.19, 20.29, 30.39, 40.49])\nspeakman_values = np.array([-0.5, -0.25, 0.0, 0.25, 0.5])\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Plot the data with enhanced aesthetics\nbars = ax.bar(lengths, speakman_values, color='royalblue', edgecolor='black', linewidth=1.2)\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.7)\nax.xaxis.grid(False)\n\n# Set labels with improved font size and style\nax.set_xlabel('Length', fontsize=12, fontweight='bold')\nax.set_ylabel('Speakman', fontsize=12, fontweight='bold')\n\n# Add title with enhanced font size and style\nax.set_title('Length vs. Speakman', fontsize=14, fontweight='bold', pad=20)\n\n# Add annotations for each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.01, round(yval, 2), ha='center', va='bottom', fontsize=10)\n\n# Customize the x-axis ticks\nax.set_xticks(lengths)\nax.set_xticklabels(['0-9', '10-19', '20-29', '30-39', '40-49'], rotation=45, ha='right')\n\n# Adjust layout for better spacing\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\ncategories = ['Beauty', 'MovieLens-1M', 'Yelp']\nvalues = [\n    [2.2, 11.2, 19.9],\n    [3.0, 5.1, 4.8],\n    [19.7]\n]\n\n# Create a new figure with a larger size for better visibility\nfig, axes = plt.subplots(1, 3, figsize=(10.0, 4.0), sharey=True)\n\n# Define colors for each bar\ncolors = ['#FFD700', '#FF6347', '#FFA500']\n\n# Plot data for each category\nfor ax, category, values in zip(axes, categories, values):\n    ax.barh(range(len(values)), values, color=colors)\n    ax.set_title(category)\n    ax.set_xlabel('Percentage (%)')\n    ax.set_yticks(range(len(values)))\n    ax.set_yticklabels([f'Item {i+1}' for i in range(len(values))])\n\n# Adjust layout for better spacing between subplots\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nmodels = ['Bactrian-X', 'Lima-X']\nimprovement = [3.5, 2.8]\nstd_dev = [0.4, 0.9]\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Define colors and patterns for the bars\ncolors = ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd']\npatterns = ['/', '\\\\', '|', '-', '+']\n\n# Plot the bar chart\nbars = ax.bar(models, improvement, yerr=std_dev, color=colors[:len(models)], edgecolor='black', hatch=patterns[:len(models)])\n\n# Add labels and title\nax.set_xlabel('Model', fontsize=12)\nax.set_ylabel('Improvement [%]', fontsize=12)\nax.set_title('ENDEFRRITES sampled', fontsize=14, fontweight='bold')\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.7)\n\n# Annotate each bar with its value\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.1, f'{yval:.1f}', ha='center', va='bottom', fontsize=10)\n\n# Add a legend for the error bars\nax.legend(['EN', 'FR', 'ES', 'DE', 'IT'], loc='upper right', fontsize=10)\n\n# Adjust layout for better spacing\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\npheme_scores = [0.82, 0.84, 0.81, 0.83, 0.85]\nllm_scores = [0.86, 0.87, 0.85, 0.88, 0.89]\n\n# Define colors for the bars\ncolors = ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd']\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(7.0, 5.0))\n\n# Plot the bar chart with enhanced aesthetics\nbars = ax.bar(range(len(pheme_scores)), pheme_scores, color=colors, edgecolor='black', linewidth=1.2)\nax.bar_label(bars, padding=3, fontsize=10, color='black')\n\n# Add a second y-axis for LLM-mis scores\nax2 = ax.twinx()\nbars2 = ax2.bar(range(len(llm_scores)), llm_scores, color=[c for c in colors if c != '#1f77b4'], alpha=0.7, edgecolor='black', linewidth=1.2)\nax2.bar_label(bars2, padding=3, fontsize=10, color='black')\n\n# Set labels and title\nax.set_xlabel('Pheme', fontsize=12)\nax.set_ylabel('Macro F1-score', fontsize=12)\nax2.set_ylabel('LLM-mis', fontsize=12)\n\n# Set x-ticks and labels\nax.set_xticks(range(len(pheme_scores)))\nax.set_xticklabels(['GCN', 'RvNN', 'Hyphen', 'GET', 'WSDMS', 'DELL'], rotation=45, ha='right', fontsize=10)\n\n# Add a legend\nax.legend([bars[0], bars2[0]], ['Macro F1-score', 'LLM-mis'], loc='upper left', fontsize=10)\n\n# Add grid lines\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.7)\nax2.yaxis.grid(False)\n\n# Adjust layout for better spacing\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\ncategories = ['1', '2', '3', '4', '5', '6']\nvalues = [\n    [10, 20, 30, 40, 50],\n    [15, 25, 35, 45, 55],\n    [12, 22, 32, 42, 52],\n    [18, 28, 38, 48, 58],\n    [14, 24, 34, 44, 54],\n    [16, 26, 36, 46, 56]\n]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Define colors for each category\ncolors = ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd', '#8c564b']\n\n# Plot the data with a bar chart\nbars = ax.bar(categories, [sum(v) for v in zip(*values)], color=colors)\n\n# Add labels and title\nax.set_xlabel('Human Annotator')\nax.set_ylabel('Scores')\nax.set_title('Human Labeling and Agreement Bias Checking')\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=.25)\n\n# Add annotations on top of each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 1, f'{yval}', ha='center', va='bottom', fontsize=10)\n\n# Customize the legend\nax.legend(['5', '4', '3', '2', '1'], title=\"Scores\", loc='upper right')\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_16.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the bar chart\ncategories = ['human', 'gpt4', 'gpt4-cot']\nvalues_s1 = [500, 700, 800]\nvalues_s2 = [600, 800, 900]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Define colors for the bars\ncolors = ['#1f77b4', '#ff7f0e', '#d62728']\n\n# Plot the data with different styles\nax.bar(categories, values_s1, color=colors[0], label='s1', edgecolor='black')\nax.bar(categories, values_s2, bottom=values_s1, color=colors[1], label='s2', edgecolor='black')\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.7)\n\n# Set labels and title\nax.set_xlabel('Role', fontsize=12)\nax.set_ylabel('Count', fontsize=12)\nax.set_title('Resonance Preference Plot for rich-context', fontsize=14, fontweight='bold')\n\n# Add a legend\nax.legend(title='Plot', loc='upper right', fontsize=10)\n\n# Add annotations to each bar\nfor i, v in enumerate(values_s1):\n    ax.text(i, v + 50, str(v), ha='center', va='bottom', fontsize=10, color='black')\n\nfor i, v in enumerate(values_s2):\n    ax.text(i, v + values_s1[i] + 50, str(v), ha='center', va='bottom', fontsize=10, color='black')\n\n# Adjust layout for better spacing\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_17.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\ntasks = ['ARC', 'MMLU', 'TruthfulQa', 'Winogrande', 'Average']\naccuracies = [53.0, 51.3, 56.4, 73.1, 53.1]\nstd_devs = [2.0, 1.1, 1.2, 1.8, 0.9]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(10.0, 4.0))\n\n# Define colors for the bars\ncolors = ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd']\n\n# Plot the bar chart with error bars\nbars = ax.bar(tasks, accuracies, yerr=std_devs, color=colors, capsize=5, edgecolor='black')\n\n# Add labels and title\nax.set_xlabel('Tasks', fontsize=12)\nax.set_ylabel('Accuracy (%)', fontsize=12)\nax.set_title('Task Accuracy Comparison', fontsize=14, fontweight='bold')\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.7)\n\n# Annotate each bar with its value\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.5, f'{yval:.1f}', ha='center', va='bottom', fontsize=10)\n\n# Customize the x-axis ticks\nax.set_xticks(np.arange(len(tasks)))\nax.set_xticklabels(tasks, rotation=45, ha='right', fontsize=10)\n\n# Add a legend\nax.legend(['LLaMA-2-7B', 'Evol-Instruct-70k', 'Evol-Instruct-AlpaGasus-1k', 'Evol-Instruct-1k-longest', 'LIMA-1k'], loc='upper left', fontsize=10)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_18.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Performance metrics for different models\nmodels = ['GSM8K', 'MNLI', 'race@High']\nperformance_metrics = [\n    [45, 50, 55, 60, 65],  # Example performance data for GSM8K\n    [50, 55, 60, 65, 70],  # Example performance data for MNLI\n    [55, 60, 65, 70, 75]   # Example performance data for race@High\n]\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Define colors for each model\ncolors = ['#1f77b4', '#ff7f0e', '#2ca02c']\n\n# Plot the data with enhanced styling\nfor i, (model, metrics) in enumerate(zip(models, performance_metrics)):\n    ax.bar(range(len(metrics)), metrics, color=colors[i], label=model, alpha=0.7, edgecolor='black')\n\n# Set labels and title with improved font sizes\nax.set_xlabel('Epochs', fontsize=12)\nax.set_ylabel('Performance', fontsize=12)\nax.set_title('Model Performance Over Epochs', fontsize=14, fontweight='bold')\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.7)\n\n# Customize ticks\nax.set_xticks(range(len(metrics)))\nax.set_xticklabels(['M=3', 'M=4', 'M=5', 'M=6', 'M=7'], rotation=45, ha='right')\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Add a legend with a shadow effect\nax.legend(loc='upper left', fontsize=10, shadow=True)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_19.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the bar chart\ncategories = ['DLMA-7B vs. LLAMA-7B', 'DLMA-7B vs. CD-7B', 'DLMA-7B vs. RLAIF-7B', 'DLMA-7B vs. RLCD-7B', \n              'DLMA-13B vs. LLAMA-13B', 'DLMA-13B vs. CD-13B', 'DLMA-13B vs. RLAIF-13B', 'DLMA-13B vs. RLCD-13B']\nvalues = [60.2, 60.2, 46.8, 34.7, 62.5, 62.5, 62.5, 49.2]\nerrors = [11.0, 11.0, 14.1, 26.2, 9.8, 9.8, 14.5, 30.5]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Define colors for the bars\ncolors = ['#4CAF50', '#2196F3', '#FF5733']\n\n# Plot the data with error bars\nbars = ax.bar(categories, values, yerr=errors, color=colors, capsize=5, edgecolor='black')\n\n# Add labels and title\nax.set_ylabel('Percentage')\nax.set_title('DLMA vs. Baseline Methods On HHH (Evaluated by GPT4)', fontsize=14, fontweight='bold')\nax.set_xlabel('DLMA vs. Baseline', fontsize=12)\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.7)\n\n# Add annotations for each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.5, f'{yval:.1f}%', ha='center', va='bottom', fontsize=10)\n\n# Add a legend\nax.legend(['DLMA win', 'Tie', 'DLMA lose'], loc='upper right', fontsize=10)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Gait distribution over time for different conditions\ntime_points = np.array([0, 10, 20, 30, 40])\ngait_conditions = ['trot', 'pace', 'bound', 'pronk', 'transition']\ngait_data = np.array([\n    [0.5, 0.7, 0.8, 0.9, 0.95],  # trot\n    [0.3, 0.5, 0.6, 0.7, 0.8],   # pace\n    [0.2, 0.4, 0.5, 0.6, 0.7],   # bound\n    [0.1, 0.3, 0.4, 0.5, 0.6],   # pronk\n    [0.05, 0.1, 0.15, 0.2, 0.25] # transition\n])\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(6.0, 3.0))\n\n# Plot each gait condition with different colors and patterns\ncolors = ['#00FF00', '#FF0000', '#0000FF', '#8B4513', '#808080']\npatterns = ['/', '\\\\', '|', '-', '+']\n\nfor i, condition in enumerate(gait_conditions):\n    ax.bar(time_points, gait_data[i], color=colors[i], hatch=patterns[i], label=condition)\n\n# Set labels and title\nax.set_xlabel('Time (s)')\nax.set_ylabel('% Experiments')\nax.set_title('Gait Distribution Over Time: Policy ORC=111')\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.5)\n\n# Add legend\nax.legend(loc='upper right', fontsize='small')\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_20.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the bar chart\ncategories = ['LIMA', 'Vicuna', 'Koala', 'Wizardlm', 'Self-Instruct']\nap1k_wins = [68, 82, 68, 72, 68]\ntie_wins = [24, 15, 22, 19, 23]\nag1k_wins = [8, 3, 10, 9, 9]\n\n# Set the width of the bars\nbar_width = 0.25\n\n# Create the positions of the bars on the x-axis\nr1 = np.arange(len(categories))\nr2 = [x + bar_width for x in r1]\nr3 = [x + bar_width for x in r2]\n\n# Create the figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Plot the bars\nbars1 = ax.bar(r1, ap1k_wins, color='royalblue', width=bar_width, edgecolor='grey', label='AP-1k wins')\nbars2 = ax.bar(r2, tie_wins, color='mediumpurple', width=bar_width, edgecolor='grey', label='Tie')\nbars3 = ax.bar(r3, ag1k_wins, color='lightgrey', width=bar_width, edgecolor='grey', label='AG-1k wins')\n\n# Add some text for labels, title, and custom x-axis tick labels, etc.\nax.set_xlabel('Categories', fontweight='bold')\nax.set_ylabel('Wins', fontweight='bold')\nax.set_title('Comparison of Wins Across Categories', fontweight='bold')\nax.set_xticks([r + bar_width for r in range(len(categories))])\nax.set_xticklabels(categories)\nax.legend()\n\n# Annotate each bar with its value\ndef add_labels(bars):\n    for bar in bars:\n        yval = bar.get_height()\n        ax.text(bar.get_x() + bar.get_width()/2, yval + 0.5, round(yval, 1), ha='center', va='bottom')\n\nadd_labels(bars1)\nadd_labels(bars2)\nadd_labels(bars3)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_21.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the bar chart\ncategories = ['Benefits', 'Reliability', 'Security', 'Privacy']\nbenefits = [14.8, 9.4, 8.3, 24.1]\nreliability = [29.6, 24.1, 14.8, 29.6]\nsecurity = [18.5, 40.7, 33.3, 16.7]\nprivacy = [35.7, 45.2, 38.1, 33.3]\n\n# Create a new figure with a larger size\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Define colors for each category\ncolors = ['#FF5733', '#FFC300', '#8E44AD', '#3498DB']\n\n# Plot the data with different colors and edge colors\nbars_benefits = ax.bar(categories, benefits, color=colors[0], edgecolor='black')\nbars_reliability = ax.bar(categories, reliability, bottom=benefits, color=colors[1], edgecolor='black')\nbars_security = ax.bar(categories, security, bottom=[b + r for b, r in zip(benefits, reliability)], color=colors[2], edgecolor='black')\nbars_privacy = ax.bar(categories, privacy, bottom=[b + r + s for b, r, s in zip(benefits, reliability, security)], color=colors[3], edgecolor='black')\n\n# Add labels and title\nax.set_xlabel('Categories', fontsize=12)\nax.set_ylabel('Percentage', fontsize=12)\nax.set_title('Eye Movement', fontsize=14, fontweight='bold')\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.7)\n\n# Add annotations on top of each bar\nfor bar in bars_benefits:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.5, f'{yval}%', ha='center', va='bottom', fontsize=10)\n\nfor bar in bars_reliability:\n    yval = bar.get_height() + bar.get_x()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.5, f'{yval}%', ha='center', va='bottom', fontsize=10)\n\nfor bar in bars_security:\n    yval = bar.get_height() + bar.get_x() + bar.get_y()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.5, f'{yval}%', ha='center', va='bottom', fontsize=10)\n\nfor bar in bars_privacy:\n    yval = bar.get_height() + bar.get_x() + bar.get_y() + bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.5, f'{yval}%', ha='center', va='bottom', fontsize=10)\n\n# Add legend\nax.legend(['Strong Disagree', 'Disagree', 'Neutral', 'Agree', 'Strong Agree'], loc='upper right', fontsize=10)\n\n# Set x-ticks and labels\nax.set_xticks(np.arange(len(categories)))\nax.set_xticklabels(categories, rotation=45, ha='right', fontsize=10)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_22.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data for demonstration\nx = np.array([-150, -120, -90, -60, -30, 0, 30, 60, 90, 120, 150])\ny1 = np.array([10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110])\ny2 = np.array([15, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115])\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(6.0, 10.0))\n\n# Plot the data with enhanced aesthetics\nax.plot(x, y1, label='Ours', color='royalblue', linestyle='-', linewidth=2, marker='o', markersize=5)\nax.plot(x, y2, label='Saliency-based Sampling', color='lightseagreen', linestyle='--', linewidth=2, marker='s', markersize=5)\n\n# Set labels and title with improved font sizes and styles\nax.set_xlabel('Rotation Angle (\u00b0)', fontsize=12, fontweight='bold')\nax.set_ylabel('Rate of Gain Change (%)', fontsize=12, fontweight='bold')\nax.set_title('Comparison of Rate of Gain Change', fontsize=14, fontweight='bold')\n\n# Add grid lines for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5, alpha=0.7)\n\n# Customize ticks\nax.set_xticks(np.arange(-150, 151, 30))\nax.set_yticks(np.arange(-10, 120, 10))\n\n# Add a legend with a shadow effect\nax.legend(loc='upper left', fontsize=10, shadow=True)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_23.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Ratings of language models\nmodels = ['GPT4', 'GPT-few-shot', 'GPT3.5', 'StarCoder', 'Code Llama', 'NCL']\naccuracy = [3.2, 2.8, 3.1, 2.9, 3.4, 2.7]\ncompleteness = [3.0, 2.6, 2.9, 2.7, 3.3, 2.5]\nconciseness = [2.8, 2.4, 2.7, 2.5, 3.2, 2.3]\nreadability = [2.6, 2.2, 2.5, 2.3, 3.1, 2.1]\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(9.0, 5.0))\n\n# Define colors for each bar\ncolors = ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd', '#8c564b']\n\n# Plot bars for each metric\nbar_width = 0.15\nindex = np.arange(len(models))\nbars = []\n\n# Plot accuracy bars\nbars.append(ax.bar(index, accuracy, bar_width, label='Accuracy', color=colors[0], edgecolor='black'))\n\n# Plot completeness bars\nbars.append(ax.bar(index + bar_width, completeness, bar_width, label='Completeness', color=colors[1], edgecolor='black'))\n\n# Plot conciseness bars\nbars.append(ax.bar(index + 2 * bar_width, conciseness, bar_width, label='Conciseness', color=colors[2], edgecolor='black'))\n\n# Plot readability bars\nbars.append(ax.bar(index + 3 * bar_width, readability, bar_width, label='Readability', color=colors[3], edgecolor='black'))\n\n# Add labels and title\nax.set_xlabel('Language Models', fontsize=12)\nax.set_ylabel('Ratings', fontsize=12)\nax.set_title('Ratings of Language Models on a Scale from 1-4', fontsize=14, fontweight='bold')\nax.set_xticks(index + 1.5 * bar_width)\nax.set_xticklabels(models, rotation=45, ha='right')\n\n# Add a legend\nax.legend(loc='upper right', fontsize=10)\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.7)\n\n# Add annotations for clarity\nfor i, bars in enumerate(bars):\n    for j, bar in enumerate(bars):\n        height = bar.get_height()\n        ax.annotate(f'{height:.1f}',\n                    xy=(bar.get_x() + bar.get_width() / 2, height),\n                    xytext=(0, 3),  # 3 points vertical offset\n                    textcoords=\"offset points\",\n                    ha='center', va='bottom', fontsize=10, color='black')\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_24.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\nmodels = ['Majority', 'Flan-T5', 'GPT-3.5', 'GPT-4', 'Wizard13b', 'Vicuna13b', 'Mistral17b']\naccuracies = [0.302, 0.601, 0.468, 0.653, 0.384, 0.379, 0.364]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(8.0, 4.0))\n\n# Define colors for each bar\ncolors = ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd', '#8c564b', '#e377c2']\n\n# Plot the data with customizations\nbars = ax.bar(models, accuracies, color=colors, edgecolor='black', linewidth=1.2)\n\n# Add value labels on top of each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.01, f'{yval:.3f}', ha='center', va='bottom', fontsize=10, fontweight='bold')\n\n# Set labels and title with improved styling\nax.set_xlabel('Models', fontsize=12, fontweight='bold')\nax.set_ylabel('Accuracy', fontsize=12, fontweight='bold')\nax.set_title('Model Accuracy Comparison', fontsize=14, fontweight='bold', pad=20)\n\n# Customize the x-axis ticks\nax.set_xticks(np.arange(len(models)))\nax.set_xticklabels(models, rotation=45, ha='right', fontsize=10)\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.7)\n\n# Adjust layout for better spacing\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_25.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the bar chart\ncategories = ['Alpaca-52k+', 'Alpaga-1k+', 'LIMa-1k+']\nvalues = [78.8, 67.4, 44.2]\nerrors = [9.5, 14.5, 19.2]\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(10.0, 4.0))\n\n# Define colors for the bars\ncolors = ['#1f77b4', '#ff7f0e', '#2ca02c']\n\n# Plot the data with error bars\nbars = ax.bar(categories, values, yerr=errors, color=colors, capsize=5, edgecolor='black')\n\n# Add labels and title\nax.set_ylabel('Value')\nax.set_title('GPT4-as-a-judge')\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=.25)\n\n# Annotate each bar with its value\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.5, f'{yval:.1f}', ha='center', va='bottom', fontsize=10)\n\n# Customize the x-axis ticks\nax.set_xticks(np.arange(len(categories)))\nax.set_xticklabels(categories, rotation=45, ha='right')\n\n# Add a legend\nax.legend(['Refined-Alpaca-1k-longest wins', 'Refined-Alpaca-1k-longest losses'], loc='upper right')\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_26.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\nemotions = ['Ang', 'Ct', 'Dis', 'Fea', 'Joy', 'Ntr', 'Sad', 'Sur']\nvalues = [120, 300, 50, 180, 220, 350, 70, 30]\n\n# Define colors for each bar\ncolors = ['#FF0000', '#00FF00', '#808080', '#FFA500', '#0000FF', '#800080', '#FFFF00', '#FFD700']\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Plot the data with custom colors and edge color\nbars = ax.bar(emotions, values, color=colors, edgecolor='black')\n\n# Add value labels on top of each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 10, f'{yval}', ha='center', va='bottom', fontsize=9)\n\n# Set title and labels with improved font sizes\nax.set_title('Emotion Frequency', fontsize=14)\nax.set_xlabel('Emotions', fontsize=12)\nax.set_ylabel('Frequency', fontsize=12)\n\n# Rotate x-axis labels for better readability\nplt.xticks(rotation=45, ha='right')\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.7)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_27.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\ncategories = ['GPT-4V', 'RoboCodeX']\nsuccess_rates = [0.95, 0.85]\noccupancy_error = [0.02, 0.03]\ngrounding_error = [0.01, 0.01]\ngripper_collision = [0.01, 0.01]\ntrajectory_optimization_error = [0.01, 0.01]\ngrasping_failed = [0.01, 0.01]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(10.0, 3.0))\n\n# Define colors for each bar\ncolors = ['#008000', '#FFA500', '#808080', '#FFFF00', '#8B4513', '#800080']\n\n# Plot the bars with different colors and edge colors\nbars = ax.bar(categories, success_rates, color=colors[0], edgecolor='black')\nax.bar(categories, occupancy_error, bottom=success_rates, color=colors[1], edgecolor='black')\nax.bar(categories, grounding_error, bottom=[s + o for s, o in zip(success_rates, occupancy_error)], color=colors[2], edgecolor='black')\nax.bar(categories, gripper_collision, bottom=[s + o + g for s, o, g in zip(success_rates, occupancy_error, grounding_error)], color=colors[3], edgecolor='black')\nax.bar(categories, trajectory_optimization_error, bottom=[s + o + g + gc for s, o, g, gc in zip(success_rates, occupancy_error, grounding_error, gripper_collision)], color=colors[4], edgecolor='black')\nax.bar(categories, grasping_failed, bottom=[s + o + g + gc + toe for s, o, g, gc, toe in zip(success_rates, occupancy_error, grounding_error, gripper_collision, trajectory_optimization_error)], color=colors[5], edgecolor='black')\n\n# Add labels and title\nax.set_xlabel('Percentage of Total Trials', fontsize=12)\nax.set_ylabel('Success Rate', fontsize=12)\nax.set_title('Performance Metrics', fontsize=14, fontweight='bold')\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.7)\n\n# Add legend\nax.legend(['Success', 'Occupancy Error', 'Grounding Error', 'Gripper Collision', 'Trajectory Optimization Error', 'Grasping Failed'], loc='upper right', fontsize=10)\n\n# Add annotations for clarity\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.01, f'{yval:.2f}', ha='center', va='bottom', fontsize=10)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_28.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Transmission Delay (ms) for different datasets\ndatasets = ['VOC 2012', 'COCO 2017']\ntransmission_delays = [3.5, 2.8]\nerror = [0.4, 0.3]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(6.0, 5.0))\n\n# Define colors and patterns for the bars\ncolors = ['#FF9999', '#66B3FF']\npatterns = ['/', '\\\\', '|', '-']\n\n# Plot the bar chart with error bars\nbars = ax.bar(datasets, transmission_delays, yerr=error, color=colors, edgecolor='black', hatch=patterns)\n\n# Add labels and title\nax.set_xlabel('Datasets', fontsize=12)\nax.set_ylabel('Transmission Delay (ms)', fontsize=12)\nax.set_title('Comparison of Transmission Delays for Different Datasets', fontsize=14, fontweight='bold')\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.7)\n\n# Annotate each bar with its value\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.1, f'{yval:.1f}', ha='center', va='bottom', fontsize=10)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_29.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Logarithmic scale for demonstration\ncategories = ['Wave', 'Diffusion', 'Heat', 'Poison', 'Burgers', 'N-S']\nvalues = [1e-1, 1e-2, 1e-3, 1e-4, 1e-5, 1e-6]\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot the data with logarithmic scaling\nbars = ax.bar(categories, values, color=plt.cm.viridis(np.linspace(0.2, 0.8, len(categories))))\n\n# Add a grid for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.7)\n\n# Set labels and title with improved font sizes\nax.set_xlabel('PDEs', fontsize=12)\nax.set_ylabel('log L2', fontsize=12)\nax.set_title('Logarithmic Scale of PDE Solutions', fontsize=14, fontweight='bold')\n\n# Add a legend\nax.legend(bars, categories, title=\"Categories\", loc='upper right', fontsize=10)\n\n# Annotate each bar with its value\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval, f'{yval:.1e}', ha='center', va='bottom', fontsize=10)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ncategories = ['PICC', 'SROCC']\nmetrics = [\n    [0.965, 0.945, 0.935],\n    [0.975, 0.965, 0.955]\n]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(10.0, 3.0))\n\n# Define colors for each bar\ncolors = ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd']\n\n# Plot the bars\nbar_width = 0.2\nindex = np.arange(len(categories))\nbars = []\n\nfor i, metric in enumerate(metrics):\n    bars.append(ax.bar(index + i * bar_width, metric, bar_width, label=f'Metric {i+1}', color=colors[i]))\n\n# Add labels and title\nax.set_xlabel('Categories')\nax.set_ylabel('Metric Values')\nax.set_title('Comparison of Metrics Across Categories')\nax.set_xticks(index + bar_width)\nax.set_xticklabels(categories)\n\n# Add a legend\nax.legend(title='Metrics')\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=.25)\n\n# Add annotations for clarity\nfor bar in bars:\n    for i, v in enumerate(bar):\n        ax.text(v.get_x() + v.get_width()/2, v.get_height(), f'{v.get_height():.3f}', ha='center', va='bottom')\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_30.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\ncategories = ['Mixtral-8x7b-Instruct', 'GPT-3.5', 'GPT-4']\nvalues = [6.11, 28.33, 31.11, 44.44, 56.11, 85.0, 60.56, 42.78, 99.44]\ncolors = ['#FF9999', '#66B3FF', '#99FF99', '#FFCC99', '#FF99FF', '#CCCCFF', '#FFFF99', '#FF99CC', '#C2C2F0']\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Plot the data with a bar chart\nbars = ax.bar(categories, values, color=colors)\n\n# Add value labels on top of each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 1, f'{yval:.2f}', ha='center', va='bottom')\n\n# Set labels and title\nax.set_xlabel('Zero-shot')\nax.set_ylabel('One-pass rate (%)')\nax.set_title('Performance Comparison')\n\n# Customize the x-axis ticks\nax.set_xticks(np.arange(len(categories)))\nax.set_xticklabels(categories, rotation=45, ha='right')\n\n# Add a grid for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=.25)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_31.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the bar chart\ncategories = ['LMM-based vs. TPLM-based', 'LMM-based vs. Template', 'LMM-based vs. Markdown', 'TPLM-based vs. Template', 'TPLM-based vs. Markdown', 'Markdown vs. Template']\nwin_percentages = [17.0, 20.0, 25.0, 30.5, 31.5, 19.5]\ntie_percentages = [54.0, 67.5, 56.5, 57.5, 54.5, 61.0]\nloss_percentages = [29.0, 12.5, 18.5, 12.0, 14.0, 19.5]\n\n# Set up the figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Define colors for the bars\ncolors = ['#1f77b4', '#2ca02c', '#ff7f0e']\n\n# Plot the data\nbar_width = 0.25\nindex = np.arange(len(categories))\n\nbars1 = ax.bar(index, win_percentages, bar_width, label='Win', color=colors[0], edgecolor='black')\nbars2 = ax.bar(index + bar_width, tie_percentages, bar_width, label='Tie', color=colors[1], edgecolor='black')\nbars3 = ax.bar(index + 2*bar_width, loss_percentages, bar_width, label='Loss', color=colors[2], edgecolor='black')\n\n# Add labels and title\nax.set_xlabel('Categories', fontsize=12)\nax.set_ylabel('Percentage', fontsize=12)\nax.set_title('Comparison of Win, Tie, and Loss Percentages', fontsize=14)\nax.set_xticks(index + bar_width)\nax.set_xticklabels(categories, rotation=45, ha='right', fontsize=10)\nax.legend()\n\n# Add value labels on top of each bar\ndef add_value_labels(bars):\n    for bar in bars:\n        yval = bar.get_height()\n        ax.text(bar.get_x() + bar.get_width()/2, yval + 1, f'{yval}%', ha='center', va='bottom', fontsize=10)\n\nadd_value_labels(bars1)\nadd_value_labels(bars2)\nadd_value_labels(bars3)\n\n# Adjust layout\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_32.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\ncategories = ['Combat Spider', 'Milky Cow', 'Shear Sheep']\nvalues = [0.72, 0.74, 0.56]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(6.0, 2.0))\n\n# Define colors for the bars\ncolors = ['#1f77b4', '#ff7f0e', '#2ca02c']\n\n# Plot the data\nbars = ax.bar(categories, values, color=colors, edgecolor='black')\n\n# Add value labels on top of each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.01, f'{yval:.2f}', ha='center', va='bottom', fontsize=10)\n\n# Set title and labels\nax.set_title('Probability of Improvement over VLM Image Encoder Baseline Returns', fontsize=12, fontweight='bold')\nax.set_xlabel('Baseline', fontsize=10)\nax.set_ylabel('Probability of Improvement', fontsize=10)\n\n# Customize the x-axis ticks\nax.set_xticks(np.arange(len(categories)))\nax.set_xticklabels(categories, rotation=45, ha='right')\n\n# Remove grid lines\nax.grid(False)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_33.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\nsteps = np.array([0, 1, 2, 3, 4])\navg_following_rate = np.array([100.0, 60.0, 29.8, 100.0, 60.8])\nfollowing_error_rate = np.array([100.0, 83.3, 50.7, 63.4, 91.7])\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Plot the data with enhanced aesthetics\nbars = ax.bar(steps, avg_following_rate, color='darkgray', edgecolor='black', label='Avg. Following Rate')\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.5, f'{yval:.1f}%', ha='center', va='bottom')\n\n# Add error bars to represent the following error rate\nax.errorbar(steps, avg_following_rate, yerr=following_error_rate, fmt='o', color='blue', ecolor='lightblue', elinewidth=2, capsize=5, label='Following-related Format Error Rate')\n\n# Set labels and title with improved font sizes and styles\nax.set_xlabel('Steps', fontsize=12, fontweight='bold')\nax.set_ylabel('Scores', fontsize=12, fontweight='bold')\nax.set_title('Instruction Following Results In Different Steps (gpt-3.5-turbo)', fontsize=14, fontweight='bold')\n\n# Customize the x-axis ticks\nax.set_xticks(steps)\nax.set_xticklabels(['0', '1', '2', '3', '4'])\n\n# Add a legend with a shadow effect\nax.legend(loc='upper right', shadow=True)\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.7)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_34.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Average performance of different models across various metrics\nmetrics = ['RegOpt', 'BIOpt', 'LoopOpt']\nmodels = [\n    ['coreutils', 'scp', 'tar', 'exim', 'memc', 'niginx', 'bzip2', 'astar', 'gcc', 'gobmk', 'h264', 'liba', 'libm', 'libp', 'libq', 'libr', 'libt', 'libu', 'libv', 'libw', 'libx', 'liby', 'libz'],\n    ['coreutils', 'scp', 'tar', 'exim', 'memc', 'niginx', 'bzip2', 'astar', 'gcc', 'gobmk', 'h264', 'liba', 'libm', 'libp', 'libq', 'libr', 'libt', 'libu', 'libv', 'libw', 'libx', 'liby', 'libz'],\n    ['coreutils', 'scp', 'tar', 'exim', 'memc', 'niginx', 'bzip2', 'astar', 'gcc', 'gobmk', 'h264', 'liba', 'libm', 'libp', 'libq', 'libr', 'libt', 'libu', 'libv', 'libw', 'libx', 'liby', 'libz']\n]\n\n# Performance data for each model and metric\nperformance_data = [\n    [95, 85, 75],\n    [88, 78, 68],\n    [80, 70, 60]\n]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(8.0, 4.0))\n\n# Define colors for each model\ncolors = ['#4CAF50', '#FFC107', '#2196F3']\n\n# Plot the data\nfor i, model in enumerate(models):\n    ax.barh(model, performance_data[i], height=0.5, color=colors[i % len(colors)], edgecolor='black', alpha=0.8)\n\n# Set labels and title\nax.set_xlabel('Performance (%)')\nax.set_ylabel('Models')\nax.set_title('Average Performance of Models Across Metrics')\n\n# Add grid lines for better readability\nax.grid(axis='x', linestyle='--', alpha=0.7)\n\n# Add a legend\nax.legend(['Metric 1', 'Metric 2', 'Metric 3'], loc='upper right')\n\n# Invert the y-axis to have the first model at the top\nax.invert_yaxis()\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_35.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\ncategories = ['Llama2', 'Mistral']\nvalues = [5.52, 5.53, 5.83, 5.54, 5.84, 6.57, 6.75, 6.81, 7.08, 6.9]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Define colors for each bar\ncolors = ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd', \n          '#8c564b', '#e377c2', '#7f7f7f', '#bcbd22', '#17becf']\n\n# Plot the data with customizations\nbars = ax.bar(categories, values, color=colors, edgecolor='black')\n\n# Add value labels on top of each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.1, f'{yval:.2f}', ha='center', va='bottom', fontsize=10)\n\n# Set labels and title\nax.set_xlabel('Categories', fontsize=12)\nax.set_ylabel('MT-Bench Score', fontsize=12)\nax.set_title('MT-Bench Score by Categories', fontsize=14, fontweight='bold')\n\n# Customize the x-axis ticks\nax.set_xticks(np.arange(len(categories)))\nax.set_xticklabels(categories, rotation=45, ha='right')\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.7)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_36.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Number of clusters vs. MMLU values\nclusters = np.array([100, 100, 100, 1000, 1000, 1000])\nmmlu_values = np.array([49.98, 51.05, 51.05, 49.63, 50.74, 50.74])\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(6.61, 5.23))\n\n# Plot the data with enhanced aesthetics\nbars = ax.bar(clusters, mmlu_values, color=['#8B4513', '#FFD700', '#FFA500', '#8B4513', '#FFD700', '#FFA500'], edgecolor='black')\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.7)\n\n# Set labels and title with improved font sizes and styles\nax.set_xlabel('Number of Clusters', fontsize=12, fontweight='bold')\nax.set_ylabel('MMLU', fontsize=12, fontweight='bold')\nax.set_title('MMLU Values by Number of Clusters', fontsize=14, fontweight='bold')\n\n# Annotate each bar with its value\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.5, f'{yval:.2f}', ha='center', va='bottom', fontsize=10)\n\n# Add a legend to differentiate between different types of sampling\nax.legend(['Random Sampling', 'Uniform', 'ClusterClip'], loc='upper right', fontsize=10)\n\n# Adjust layout for better spacing\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_37.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\ncategories = ['ResNet18', 'AlexNet', 'ResNet50']\nperturbations = [0, 50, 75, 87.5]\nspeedups = [\n    [1.0, 1.8, 2.6, 3.3, 4.6, 4.5, 7.4],\n    [1.0, 1.9, 2.9, 3.4, 5.2, 6.1, 8.7],\n    [1.0, 1.6, 2.7, 2.8, 3.9, 4.3]\n]\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(12.0, 4.0))\n\n# Define colors and patterns for each category\ncolors = ['#FF9999', '#66B3FF', '#99FF99']\npatterns = ['/', '\\\\', 'x']\n\n# Plot each category with different colors and patterns\nfor i, (category, perturbation, speedup) in enumerate(zip(categories, perturbations, speedups)):\n    ax.bar(perturbation, speedup, color=colors[i], hatch=patterns[i], label=f'{category}')\n\n# Set labels and title\nax.set_xlabel('Perturbation (%)')\nax.set_ylabel('Speedup')\nax.set_title('Perturbation vs Speedup')\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.7)\n\n# Add legend with a shadow effect\nax.legend(title='Model', loc='upper left', shadow=True)\n\n# Adjust layout for better spacing\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_38.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Accuracy of different models\nmodels = ['CL-7b', 'CL-13b', 'CL-34b', 'DS-6.7b', 'DS-33b', 'SC']\naccuracies = [45, 55, 50, 65, 70, 60]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(7.0, 5.0))\n\n# Define colors for each bar\ncolors = ['#4CAF50', '#2196F3', '#FFC107', '#FF5722', '#9C27B0', '#607D8B']\n\n# Plot the bar chart with enhanced aesthetics\nbars = ax.bar(models, accuracies, color=colors, edgecolor='black', linewidth=1.2)\n\n# Add value labels on top of each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 1, f'{yval}%', ha='center', va='bottom', fontsize=10, fontweight='bold')\n\n# Set title and labels with improved styling\nax.set_title('LeetCode, DS-6.7b', fontsize=14, fontweight='bold')\nax.set_xlabel('Models', fontsize=12)\nax.set_ylabel('Accuracy', fontsize=12)\n\n# Customize the x-axis ticks\nax.set_xticks(np.arange(len(models)))\nax.set_xticklabels(models, rotation=45, ha='right', fontsize=10)\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.7)\n\n# Adjust layout for better spacing\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_39.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the bar chart\ncategories = ['Vicuna', 'Koala', 'WizardLM', 'SInstruct', 'LIMA']\nvalues = [53, 80, 116, 99, 179]\nrecost_wins = [1, 2, 3, 4, 5]\ntie_wins = [6, 7, 8, 9, 10]\nalpacawins = [21, 33, 49, 50, 98]\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Define colors for the bars\ncolors = ['#FF5733', '#FFC300', '#87CEEB']\n\n# Plot the data with different colors and patterns\nbars = ax.bar(categories, values, color=colors[0], label='Recost (1% wins)')\nax.bar(categories, recost_wins, bottom=values, color=colors[1], hatch='/', label='Tie')\nax.bar(categories, tie_wins, bottom=[v + r for v, r in zip(values, recost_wins)], color=colors[2], hatch='\\\\', label='Alpaca wins')\n\n# Add labels and title\nax.set_xlabel('Model', fontsize=12)\nax.set_ylabel('Wins', fontsize=12)\nax.set_title('Model Performance Comparison', fontsize=14, fontweight='bold')\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=.25)\n\n# Add annotations for each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 1, int(yval), ha='center', va='bottom', fontsize=10)\n\n# Add a legend\nax.legend(loc='upper right', fontsize=10)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\ncategories = ['CometKiwi', 'LaBSE', 'IF', 'Max', 'Ppl', 'STARE', 'Wass Combo', 'ALTI+']\nvalues = [35.15, 26.86, 19.08, 22.09, 20.67, 58.99, 66.19, 58]\ncolors = ['#4CAF50', '#FFC107', '#F44336', '#2196F3', '#9C27B0', '#FF5722', '#009688', '#FFEB3B']\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Plot the data with a bar chart\nbars = ax.bar(categories, values, color=colors)\n\n# Add value labels on top of each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 1, f'{yval}', ha='center', va='bottom', fontsize=10, fontweight='bold')\n\n# Set title and labels\nax.set_title('FPR@90TPR on Guerreo et al. 2022', fontsize=14, fontweight='bold')\nax.set_xlabel('Categories', fontsize=12)\nax.set_ylabel('FPR@90TPR', fontsize=12)\n\n# Add a horizontal line at y=30\nax.axhline(y=30, color='gray', linestyle='--', linewidth=1)\n\n# Add a legend\nax.legend(['Non-Aggregate', 'Aggregate'], loc='upper right', fontsize=10)\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.5)\n\n# Adjust layout for better spacing\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_40.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the bar chart\ncategories = ['Literal', 'Assignment', 'Operator', 'Comment', 'Operation', \n              'Exception Handling', 'Method Call', 'Return', 'Variable', \n              'External Class', 'Argument', 'Conditional Block', 'Loop', \n              'External Variable/Method', 'Method Declaration', 'Parameter']\nvalues = [120, 90, 80, 70, 60, 50, 40, 30, 20, 10, 5, 3, 2, 1, 0.5]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Define colors for the bars\ncolors = ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd', \n          '#8c564b', '#e377c2', '#7f7f7f', '#bcbd22', '#17becf', \n          '#aec7e8', '#ffbb78', '#9edae5', '#c49c94', '#f7b6d2']\n\n# Plot the data with customized bar width and edge color\nbars = ax.bar(categories, values, color=colors, edgecolor='black', linewidth=1.2)\n\n# Add value labels on top of each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 1, f'{yval}', ha='center', va='bottom', fontsize=8)\n\n# Set title and labels with improved font sizes\nax.set_title('Relative Difference in Machine vs. Human Focus on Semantic Categories', fontsize=14, fontweight='bold')\nax.set_xlabel('Semantic Category', fontsize=12)\nax.set_ylabel('Difference (%)', fontsize=12)\n\n# Rotate x-axis labels for better readability\nplt.xticks(rotation=45, ha='right')\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.7)\n\n# Adjust layout to prevent clipping of labels\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_41.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the bar chart\ncategories = ['5', '10', '15', '20']\ntruthful_recall = [66.3, 61.9, 53.8, 13.7]\nmisleading_recall = [10.1, 13.6, 36.3, 41.0]\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(14.0, 4.0))\n\n# Define colors for the bars\ncolors = ['#1f77b4', '#ff7f0e']\n\n# Plot the data\nbars = ax.bar(categories, truthful_recall, color=colors[0], label='Truthful Recall')\nax.bar(categories, misleading_recall, bottom=truthful_recall, color=colors[1], label='Misleading Recall')\n\n# Add labels and title\nax.set_xlabel('Categories', fontsize=12)\nax.set_ylabel('Recall', fontsize=12)\nax.set_title('Comparison of Truthful vs Misleading Recall', fontsize=14, fontweight='bold')\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.7)\n\n# Add annotations for each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 1, f'{yval:.1f}', ha='center', va='bottom', fontsize=10)\n\n# Add a legend\nax.legend(loc='upper right', fontsize=10)\n\n# Adjust layout for better spacing\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_42.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Model names and their corresponding \u0394Acc values\nmodels = [\n    'PROST', 'ARC-easy', 'COMVE', 'OpenBookQA', 'SCIQ', 'NumSense', 'CoQA', \n    'ComQA2.0', 'ComQAT', 'ComIC', 'ComWinogrande', 'ComCoda', 'ComArcChallenge', \n    'SocialIQA', 'HellaSWAG-wikiHow', 'HellaSWAG-elem', 'Winograd', 'PIQA', 'Quarel', \n    'SCAT', 'AlphaNLI', 'SWAG'\n]\ndelta_acc_values = [\n    -3.4, -2.1, -1.9, -1.7, -1.6, -1.5, -1.4, -1.3, -1.2, -1.1, -1.0, -0.9, -0.8, \n    -0.7, -0.6, -0.5, -0.4, -0.3, -0.2, -0.1, 0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8\n]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Plot the data with enhanced aesthetics\nbars = ax.bar(models, delta_acc_values, color='royalblue', edgecolor='black', linewidth=0.7)\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.7)\n\n# Set labels and title with improved font sizes and styles\nax.set_xlabel('Model', fontsize=12, fontweight='bold')\nax.set_ylabel('\u0394Acc (with Rules)', fontsize=12, fontweight='bold')\nax.set_title('Model = Vicuna', fontsize=14, fontweight='bold')\n\n# Add annotations for each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.1, f'{yval:.1f}', ha='center', va='bottom', fontsize=9)\n\n# Customize the x-axis tick labels\nplt.xticks(rotation=45, ha='right', fontsize=10)\n\n# Add a legend to differentiate between different types of \u0394Acc\nax.legend(['\u0394Acc < -1', '\u0394Acc <= -1', '\u0394Acc > 1'], loc='upper right', fontsize=10)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_43.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the bar chart\ncategories = [\n    'LSTM-2/32b/v0.1', 'Zephyr-7/32b/v0.1', 'Qwen-7/32b/v0.1', 'MedMCQA', 'Gemini Pro',\n    'MMLU Anatomy', 'MMLU Clinical knowledge', 'MMLU College biology', 'MMLU Medical genetics', 'MMLU Professional medicine'\n]\nperformance_scores = [54.3, 60.8, 69.2, 79.1, 80.4, 89.6, 93.8, 95.2, 98.0, 99.2]\naccuracy_scores = [75.6, 76.8, 78.5, 80.4, 82.0, 83.1, 84.0, 85.4, 86.1, 87.7]\nf1_scores = [86.5, 87.7, 88.8, 90.2, 91.8, 93.8, 94.8, 95.8, 96.5, 97.7]\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Define colors for the bars\ncolors = ['#FF9999', '#FFCC99', '#FFFF99', '#CCFF99', '#99FF99', '#99CCFF', '#9999FF', '#CC99FF', '#FF99FF', '#FF99CC']\n\n# Plot the data\nbar_width = 0.25\nindex = np.arange(len(categories))\n\nax.bar(index, performance_scores, bar_width, label='Performance Score', color=colors[0], edgecolor='black')\nax.bar(index + bar_width, accuracy_scores, bar_width, label='Accuracy Score', color=colors[1], edgecolor='black')\nax.bar(index + 2*bar_width, f1_scores, bar_width, label='F1 Score', color=colors[2], edgecolor='black')\n\n# Set labels and title\nax.set_xlabel('Categories', fontsize=12)\nax.set_ylabel('Scores (%)', fontsize=12)\nax.set_title('Comparison of Scores Across Categories', fontsize=14, fontweight='bold')\nax.set_xticks(index + bar_width)\nax.set_xticklabels(categories, rotation=45, ha='right', fontsize=10)\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.7)\n\n# Add a legend\nax.legend(loc='upper right', fontsize=10)\n\n# Add annotations for each bar\nfor i, v in enumerate(performance_scores):\n    ax.text(i, v + 1, str(v), ha='center', va='bottom', fontsize=10, color='black')\nfor i, v in enumerate(accuracy_scores):\n    ax.text(i + bar_width, v + 1, str(v), ha='center', va='bottom', fontsize=10, color='black')\nfor i, v in enumerate(f1_scores):\n    ax.text(i + 2*bar_width, v + 1, str(v), ha='center', va='bottom', fontsize=10, color='black')\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_44.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Number of non-NLAs per category\ncategories = ['AFAN', 'AFBE', 'AFCE', 'AFAO', 'AFEX', 'AFFG', 'AFPK', 'AFPO', 'AFPP', 'AFPR', 'AFSC', 'AFSL', 'AFSR', 'AFSS', 'AFST', 'AFTH', 'AFTR', 'AFUC', 'AFUS', 'AFUT', 'AFWA', 'AFWB', 'AFWC', 'AFWD', 'AFWE', 'AFWF', 'AFWS', 'AFSS']\nnon_nlas = [15, 20, 10, 30, 45, 25, 35, 18, 22, 30, 28, 35, 20, 15, 25, 30, 20, 10, 15, 20, 25, 30, 35, 40, 45, 50, 40, 35, 30]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Define colors for the bars\ncolors = ['#1f77b4', '#ff7f0e']\n\n# Plot the bar chart with a gradient effect\nbars = ax.bar(categories, non_nlas, color=colors[0], edgecolor='black')\n\n# Add a secondary y-axis for the gradient effect\nax2 = ax.twinx()\ngradient = np.linspace(0.1, 0.9, len(non_nlas))\nax2.fill_between(range(len(non_nlas)), non_nlas, alpha=0.3, color=colors[1])\n\n# Set labels and title\nax.set_xlabel('Categories')\nax.set_ylabel('Non-NLAs', color=colors[0])\nax.set_title('Number of Non-NLAs per Category', fontsize=14, fontweight='bold')\nax.tick_params(axis='y', labelcolor=colors[0])\n\n# Add a legend\nax.legend(['Non-NLAs'], loc='upper left', fontsize=10)\n\n# Rotate x-axis labels for better readability\nplt.xticks(rotation=45, ha='right')\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_45.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Scores for different models and constraint words\nconstraint_words = ['LLAMA-Default', 'LLAMA-HAG', 'Vicuna-Default', 'Vicuna-HAG']\nmodels = ['Model 3', 'Model 5', 'Model 7', 'Model 10']\nscores = [\n    [0.2, 0.4, 0.6, 0.8],  # Model 3 scores\n    [0.3, 0.5, 0.7, 0.9],  # Model 5 scores\n    [0.4, 0.6, 0.8, 0.9],  # Model 7 scores\n    [0.5, 0.7, 0.9, 1.0]   # Model 10 scores\n]\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(10.0, 7.0))\n\n# Plot the data with enhanced aesthetics\nbar_width = 0.2\nindex = np.arange(len(models))\ncolors = ['#FF9999', '#FFCC99', '#B3E2CD', '#C2E6FB']\n\nfor i, score in enumerate(scores):\n    ax.bar(index + i * bar_width, score, width=bar_width, label=constraint_words[i], color=colors[i])\n\n# Set labels and title with improved font sizes\nax.set_xlabel('Num of Constraint Words', fontsize=12)\nax.set_ylabel('Score', fontsize=12)\nax.set_title('Comparison of Models on Different Constraint Words', fontsize=14)\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.5)\n\n# Set x-ticks and labels\nax.set_xticks(index + bar_width * (len(scores) - 1) / 2)\nax.set_xticklabels(models, fontsize=11)\n\n# Add a legend with a shadow effect\nax.legend(title='Constraint Word', title_fontsize='13', fontsize=11, shadow=True)\n\n# Adjust layout for better spacing\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_46.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\ncategories = ['Lavila', 'Video-LLaMA', 'BLIP1', 'BLIP2 Model', 'LLaVA', 'OSCaR', 'GPT4V']\nvalues = [0.0, 0.71, 4.64, 4.64, 31.79, 73.93, 82.5]\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Define colors for the bars\ncolors = ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd', '#8c564b', '#e377c2']\n\n# Plot the bar chart\nbars = ax.bar(categories, values, color=colors)\n\n# Add value labels on top of each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 1, f'{yval:.1f}', ha='center', va='bottom', fontsize=10, fontweight='bold')\n\n# Set title and labels with improved styling\nax.set_title('Human Study', fontsize=16, fontweight='bold')\nax.set_xlabel('Categories', fontsize=12)\nax.set_ylabel('Percentage (%)', fontsize=12)\n\n# Customize the x-axis ticks\nax.set_xticks(np.arange(len(categories)))\nax.set_xticklabels(categories, rotation=45, ha='right', fontsize=10)\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.7)\n\n# Adjust layout to prevent clipping of labels\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_47.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the bar chart\ncategories = ['HH', 'Reddit', 'IMDB', 'AVG']\nvalues = [22, 40, 35, 26]\ncolors = ['#FF5733', '#FFC300', '#DAF7A6', '#900C3F']\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(13.0, 6.0))\n\n# Plot the bar chart with customized colors and edge color\nbars = ax.bar(categories, values, color=colors, edgecolor='black')\n\n# Add data labels on top of each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 1, f'{yval}%', ha='center', va='bottom', fontsize=10)\n\n# Set title and labels with improved font sizes\nax.set_title('COPR v.s. Golden (Human Eval)', fontsize=16, fontweight='bold')\nax.set_xlabel('Categories', fontsize=12)\nax.set_ylabel('Percentage', fontsize=12)\n\n# Customize the x-axis ticks\nax.set_xticks(np.arange(len(categories)))\nax.set_xticklabels(categories, rotation=45, ha='right', fontsize=10)\n\n# Add a grid for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.7)\n\n# Add a legend to explain the colors\nax.legend(['Win', 'Tie', 'Lose'], loc='upper right', fontsize=10)\n\n# Adjust layout for better spacing\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_48.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data for demonstration\ncategories = ['Accuracy', 'Unfairness']\nvalues1 = [0.32, 0.15]\nvalues2 = [0.18, 0.09]\n\n# Create a new figure with a larger size for better visibility\nfig, axes = plt.subplots(1, 2, figsize=(10, 5), sharey=True)\n\n# Plot the first bar chart\nbars1 = axes[0].bar(categories, values1, color=['purple', 'orange'], edgecolor='black')\naxes[0].set_title('NDCG@20')\naxes[0].set_ylabel('Score')\naxes[0].set_xlabel('Metrics')\n\n# Add value labels on top of each bar\nfor bar in bars1:\n    yval = bar.get_height()\n    axes[0].text(bar.get_x() + bar.get_width()/2, yval + 0.01, round(yval, 2), ha='center', va='bottom')\n\n# Plot the second bar chart\nbars2 = axes[1].bar(categories, values2, color=['purple', 'orange'], edgecolor='black')\naxes[1].set_title('CV@20')\naxes[1].set_xlabel('Metrics')\n\n# Add value labels on top of each bar\nfor bar in bars2:\n    yval = bar.get_height()\n    axes[1].text(bar.get_x() + bar.get_width()/2, yval + 0.01, round(yval, 2), ha='center', va='bottom')\n\n# Adjust layout for better spacing\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_49.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\nresolutions = [224, 128, 64, 32]\naccuracies = [0.95, 0.85, 0.75, 0.65]\nimage_net_1k = [0.98, 0.88, 0.78, 0.68]\npac_fno = [0.96, 0.86, 0.76, 0.66]\npac_fno_2 = [0.94, 0.84, 0.74, 0.64]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data with different colors and styles\nbars1 = ax.bar(resolutions, accuracies, color='skyblue', label='Top-1 Accuracy')\nbars2 = ax.bar(resolutions, image_net_1k, bottom=accuracies, color='orange', alpha=0.7, label='ImageNet-1k')\nbars3 = ax.bar(resolutions, pac_fno, bottom=[a + i for a, i in zip(accuracies, image_net_1k)], color='pink', alpha=0.7, label='PAC-FNO')\nbars4 = ax.bar(resolutions, pac_fno_2, bottom=[a + i + j for a, i, j in zip(accuracies, image_net_1k, pac_fno)], color='teal', alpha=0.7, label='PAC-FNO')\n\n# Add annotations to each bar\nfor bar in bars1:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.01, f'{yval*100:.0f}%', ha='center', va='bottom')\n\n# Set labels and title\nax.set_xlabel('Resolutions', fontsize=12)\nax.set_ylabel('Top-1 Acc. (%)', fontsize=12)\nax.set_title('Top-1 Accuracy by Resolution and Method', fontsize=14, fontweight='bold')\nax.set_xticks(resolutions)\nax.set_ylim(0, 1)\n\n# Add a legend\nax.legend(loc='upper right', fontsize=10)\n\n# Add grid lines\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.7)\n\n# Add a horizontal line at y=0.5\nax.axhline(y=0.5, color='black', linestyle='--', linewidth=1)\n\n# Add a vertical line at x=64\nax.axvline(x=64, color='black', linestyle='--', linewidth=1)\n\n# Add a red arrow pointing down at the highest point\nmax_accuracy = max(accuracies)\nmax_index = accuracies.index(max_accuracy)\nax.annotate('', xy=(resolutions[max_index], max_accuracy), xytext=(resolutions[max_index], max_accuracy+0.05),\n             arrowprops=dict(facecolor='red', shrink=0.05), zorder=5)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\ncategories = ['Level 1', 'Level 2', 'Level 3', 'Level 4']\nvalues = [50000, 50000, 28000, 50000]\nerrors = [3000, 2000, 1000, 1000]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(8.0, 3.0))\n\n# Define colors for the bars\ncolors = ['#FFD700', '#ADD8E6', '#FF4500', '#FF69B4']\n\n# Plot the bar chart with error bars\nbars = ax.bar(categories, values, yerr=errors, color=colors, capsize=5, edgecolor='black')\n\n# Add labels and title\nax.set_xlabel('Categories')\nax.set_ylabel('# Uploaded Samples')\nax.set_title('Comparison of Categories')\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.7)\n\n# Annotate each bar with its value\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 1000, f'{yval}', ha='center', va='bottom', fontsize=10)\n\n# Customize the legend\nlegend_labels = ['Tent/PL/CoTTA', 'ETA', 'CETTA (ours)']\nax.legend(bars, legend_labels, loc='upper right', frameon=False)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_50.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\ncategories = ['\u03bb=0.06', '\u03bb=0.08', '\u03bb=0.10', '\u03bb=0.12', '\u03bb=0.14', '\u03bb=0.16', '\u03bb=0.18', '\u03bb=0.20', '\u03bb=0.22', '\u03bb=0.24', '\u03bb=0.26', '\u03bb=0.28', '\u03bb=0.30', '\u03bb=0.32', '\u03bb=0.34', '\u03bb=0.36', '\u03bb=0.38', '\u03bb=0.40']\nvalues = [39.4, 32.84, 19.66, 26.82, 0, 35.18, 22, 0, 20.84, 28.0, 22, 0, 30, 20, 0, 34.06, 24.27, 34.6]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(6.0, 5.0))\n\n# Define colors for the bars\ncolors = ['#FF9999', '#66B3FF', '#99FF99', '#FFCC99', '#C2C2F0', '#FF9999', '#66B3FF', '#99FF99', '#FFCC99', '#C2C2F0', '#FF9999', '#66B3FF', '#99FF99', '#FFCC99', '#C2C2F0', '#FF9999', '#66B3FF', '#99FF99']\n\n# Plot the data\nbars = ax.bar(categories, values, color=colors)\n\n# Add value labels on top of each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.5, f'{yval:.2f}', ha='center', va='bottom', fontsize=8)\n\n# Set labels and title\nax.set_xlabel('Categories', fontsize=12)\nax.set_ylabel('Reward Values', fontsize=12)\nax.set_title('Reward Values by Categories', fontsize=14, fontweight='bold')\n\n# Rotate x-axis labels for better readability\nplt.xticks(rotation=45, ha='right')\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.7)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_51.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Number of videos by profession\nprofessions = [\n    'Cleaning / Laundry', 'Crafting/ Knitting', 'Baker', 'Carpenter', \n    'Making Bricks', 'Gardening', 'Construction/ Renovation', \n    'Household Management', 'Scooter Mechanic', 'Farmer'\n]\nvideo_counts = [5375, 4190, 3543, 3216, 2915, 2548, 2343, 2158, 2060, 2008]\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(12.0, 8.0))\n\n# Plot the data with enhanced aesthetics\nbars = ax.bar(professions, video_counts, color='skyblue', edgecolor='black', linewidth=1.2)\n\n# Add value labels on top of each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 50, f'{yval}', ha='center', va='bottom', fontsize=10, fontweight='bold')\n\n# Set title and labels with improved styling\nax.set_title('Number of Videos by Profession', fontsize=16, fontweight='bold')\nax.set_xlabel('Profession', fontsize=12)\nax.set_ylabel('Number of Videos', fontsize=12)\n\n# Customize the x-axis ticks for better readability\nplt.xticks(rotation=45, ha='right')\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.7)\n\n# Adjust layout to prevent clipping of labels\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_52.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the bar chart\ncategories = ['Greeting', 'Request', 'Criticism', 'Apology', 'Persuasion', 'Thanking', 'Leave-taking']\nsynthetic_data = [8, 31, 24, 7, 10, 10, 10]\nhuman_authored_data = [16, 28, 11, 5, 15, 16, 9]\n\n# Define colors for the bars\ncolors = ['#FF9999', '#66B3FF', '#99FF99', '#FFCC99', '#FF6666', '#66FF66', '#FF99FF']\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Plot the data with error bars and custom colors\nbars = ax.bar(categories, synthetic_data, color=colors, label='Synthetic data')\nax.bar(categories, human_authored_data, bottom=synthetic_data, color=[c.replace('FF', 'AA') for c in colors], label='Human-authored data')\n\n# Add error bars to each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 1, f'{yval}%', ha='center', va='bottom', fontsize=10)\n\n# Set labels and title\nax.set_xlabel('Categories', fontsize=12)\nax.set_ylabel('Percentage', fontsize=12)\nax.set_title('Comparison of Categories', fontsize=14, fontweight='bold')\n\n# Add a legend\nax.legend(loc='upper right', fontsize=10)\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.7)\n\n# Adjust layout for better spacing\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_53.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Probability distribution of words\nwords = ['small', 'certain', 'little', 'fraction', 'limited', 'a', 'day', 'few', 'new', 'tiny', 'substantial', 'tall', 'short', 'long', 'wide', 'slim', 'fat', 'thin', 'big', 'medium', 'large', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short', 'tall', 'short',"}
{"file": "dataset/ori_500/bar_54.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the bar chart\ncategories = ['Convertible', 'Coupe', 'Sedan', 'SUV', 'Truck']\nvalues = [0.15, 0.35, 0.25, 0.4, 0.3]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(6.0, 2.0))\n\n# Define colors for each bar\ncolors = ['#FFD700', '#90EE90', '#8B008B', '#ADD8E6', '#FF6347']\n\n# Plot the bar chart\nbars = ax.bar(categories, values, color=colors)\n\n# Add value labels on top of each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.01, f'{yval:.2f}', ha='center', va='bottom')\n\n# Set title and labels\nax.set_title('Probability of Improvement over VLM Image Encoder Baseline Returns', fontsize=12, fontweight='bold')\nax.set_xlabel('Category', fontsize=10)\nax.set_ylabel('Probability of Improvement', fontsize=10)\n\n# Remove grid lines\nax.grid(False)\n\n# Add a legend\nax.legend(bars, categories, title=\"Categories\", loc='upper right', fontsize=8)\n\n# Adjust layout for better spacing\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_55.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data for the bar chart\nemotions = ['Disapproval', 'Joy', 'Relief', 'Gratitude', 'Annoyance', 'Nervousness', 'Pride', 'Sadness', 'Unbored', 'Amusement']\nfrequencies = [2.1, 3.0, 3.5, 3.5, 6.0, 6.0, 6.6, 6.7, 7.0, 7.6]\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Plot the bar chart with enhanced aesthetics\nbars = ax.bar(emotions, frequencies, color='darkred', edgecolor='black')\n\n# Add value labels on top of each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.5, f'{yval}%', ha='center', va='bottom', fontsize=10)\n\n# Set labels and title with improved font sizes and styles\nax.set_xlabel('Emotion', fontsize=12, fontweight='bold')\nax.set_ylabel('Frequency (%)', fontsize=12, fontweight='bold')\nax.set_title('Emotion Frequency Distribution', fontsize=14, fontweight='bold')\n\n# Customize the x-axis ticks for better readability\nplt.xticks(rotation=45, ha='right')\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.7)\n\n# Adjust layout to prevent clipping of labels\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_56.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the bar chart\ncategories = ['Making Bricks', 'Carpenter', 'Baker', 'Crafting/Knitting', 'Cleaning/Laundry', 'Gardening']\nvalues = [500, 400, 600, 700, 800, 900]\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(12.0, 8.0))\n\n# Define colors for each bar\ncolors = ['#FF9999', '#FFCC99', '#FFFF99', '#99FF99', '#99CCFF', '#9999FF']\n\n# Plot the bar chart with enhanced aesthetics\nbars = ax.bar(categories, values, color=colors, edgecolor='black', linewidth=1.2)\n\n# Add value labels on top of each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 50, f'{yval}', ha='center', va='bottom', fontsize=10, fontweight='bold')\n\n# Set title and labels with improved styling\nax.set_title('Number of Videos by Profession', fontsize=16, fontweight='bold')\nax.set_xlabel('Profession', fontsize=14)\nax.set_ylabel('Number of Videos', fontsize=14)\n\n# Customize the x-axis ticks\nax.set_xticks(np.arange(len(categories)))\nax.set_xticklabels(categories, rotation=45, ha='right', fontsize=12)\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.7)\n\n# Add a legend to explain the colors\nax.legend(['Number of Videos'], loc='upper right', fontsize=12)\n\n# Adjust layout for better spacing\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_57.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the bar chart\ncategories = ['GDP Growth', 'Unemployment Rate', 'Inflation Rate', 'NASDAQ', 'Exchange Rate', 'Real Estate Prices', 'Corporate Profits']\nvalues = [37, 12, 15, 45, 20, 30, 25]\ncolors = ['#FF6F61', '#8D5B41', '#85C1E9', '#0072B2', '#F4A261', '#7798BF', '#5DADE2']\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Plot the bar chart with customized colors and edge color\nbars = ax.bar(categories, values, color=colors, edgecolor='black')\n\n# Add value labels on top of each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.5, f'{yval}', ha='center', va='bottom', fontsize=10)\n\n# Set title and labels with improved font sizes\nax.set_title('Economic Indicators', fontsize=14, fontweight='bold')\nax.set_xlabel('Indicators', fontsize=12)\nax.set_ylabel('Values', fontsize=12)\n\n# Customize the x-axis ticks\nplt.xticks(rotation=45, ha='right')\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.7)\n\n# Add a legend\nax.legend(['US', 'China', 'EU', 'Brazil', 'India'], loc='upper right', fontsize=10)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_58.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the bar chart\ncities = ['New York', 'Los Angeles', 'Chicago', 'Houston', 'Phoenix', 'Philadelphia']\nexcellent = [55, 45, 35, 25, 15, 5]\ngood = [40, 30, 20, 10, 5, 0]\nmoderate = [30, 20, 10, 5, 0, 0]\npoor = [20, 10, 5, 0, 0, 0]\nvery_poor = [10, 5, 0, 0, 0, 0]\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Define colors for each category\ncolors = ['#FF9999', '#FFCC99', '#B3E2CD', '#80B3D2', '#808080']\n\n# Plot the data with different colors and edge colors\nbars = ax.bar(cities, excellent, color=colors[0], edgecolor='black', label='Excellent')\nax.bar(cities, good, bottom=excellent, color=colors[1], edgecolor='black', label='Good')\nax.bar(cities, moderate, bottom=[e + g for e, g in zip(excellent, good)], color=colors[2], edgecolor='black', label='Moderate')\nax.bar(cities, poor, bottom=[e + g + m for e, g, m in zip(excellent, good, moderate)], color=colors[3], edgecolor='black', label='Poor')\nax.bar(cities, very_poor, bottom=[e + g + m + p for e, g, m, p in zip(excellent, good, moderate, poor)], color=colors[4], edgecolor='black', label='Very Poor')\n\n# Add title and labels\nax.set_title('City Satisfaction Distribution', fontsize=16, fontweight='bold')\nax.set_xlabel('Cities', fontsize=12)\nax.set_ylabel('Satisfaction Score', fontsize=12)\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.7)\n\n# Add a legend\nax.legend(title='Satisfaction Level', loc='upper right', fontsize=10)\n\n# Add annotations to display the exact values on top of each bar\nfor i, city in enumerate(cities):\n    ax.text(i, sum([excellent[i], good[i], moderate[i], poor[i], very_poor[i]]), f'{sum([excellent[i], good[i], moderate[i], poor[i], very_poor[i]])}', ha='center', va='bottom', fontsize=10, color='black')\n\n# Set x-ticks to be more readable\nplt.xticks(rotation=45, ha='right')\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_59.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\ncategories = ['External Class', 'Argument', 'Loop', 'Conditional Statement', 'Variable Declaration', 'Method Declaration', 'Parameter']\npositive_differences = [75, 65, 80, 45, 30, 25, 10]\nnegative_differences = [10, 20, 5, 15, 25, 30, 40]\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Define colors for the bars\ncolors = ['#FF9999', '#FFCC99', '#FFFF99', '#B3FF99', '#99E6FF', '#9999FF', '#FF99E6']\n\n# Plot the data with error bars\nbars = ax.bar(categories, positive_differences, color=colors, edgecolor='black', label='Positive Differences')\nax.bar(categories, negative_differences, bottom=positive_differences, color=[c.replace('FF', 'AA') for c in colors], edgecolor='black', label='Negative Differences')\n\n# Add labels and title\nax.set_xlabel('Semantic Category', fontsize=12)\nax.set_ylabel('Difference (%)', fontsize=12)\nax.set_title('Relative Difference in Machine vs. Human Focus on Semantic Categories', fontsize=14, fontweight='bold')\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.7)\n\n# Add annotations for each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 1, f'{yval}', ha='center', va='bottom', fontsize=10, fontweight='bold')\n\n# Add a legend\nax.legend(loc='upper right', fontsize=10)\n\n# Set x-ticks rotation for better readability\nplt.xticks(rotation=45)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data for the bar chart\nemotions = ['Disappointment', 'Embarrassment', 'Oblivious', 'Delight', 'Excitement', 'Disapproval', 'Joy', 'Relief', 'Gratitude', 'Annoyance', 'Nervousness', 'Pride', 'Sadness', 'Unbored', 'Amusement']\nfrequencies = [7, 6, 5, 4, 3, 2, 1, 0.5, 0.3, 0.2, 0.1, 0.05, 0.03, 0.01, 0.005]\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Plot the bar chart with enhanced aesthetics\nbars = ax.bar(emotions, frequencies, color='skyblue', edgecolor='black')\n\n# Add value labels on top of each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.05, f'{yval:.1f}', ha='center', va='bottom', fontsize=10)\n\n# Set title and labels with improved font sizes and styles\nax.set_title('Emotion Frequency Distribution', fontsize=16, fontweight='bold')\nax.set_xlabel('Emotion', fontsize=12)\nax.set_ylabel('Frequency (%)', fontsize=12)\n\n# Customize the x-axis to rotate labels for better readability\nplt.xticks(rotation=45, ha='right')\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.7)\n\n# Adjust layout to prevent clipping of labels\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_60.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: hypothetical data for demonstration\ncategories = ['FMLP-Rec', 'BERT4Rec', 'SASRec', 'CaseR', 'GRU4Rec']\nvalues = [19.7, 4.8, -8.5, -15.9, 19.7]\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Define colors and patterns for each bar\ncolors = ['#FF6347', '#4682B4', '#FFD700', '#FF4500', '#2E8B57']\npatterns = ['/', '\\\\', '|', '-', '+']\n\n# Plot the bars with custom patterns and colors\nbars = ax.bar(categories, values, color=colors, edgecolor='black')\n\n# Add hatching to the bars\nfor bar, pattern in zip(bars, patterns):\n    bar.set_hatch(pattern)\n\n# Add value labels on top of each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.5, f'{yval:.1f}', ha='center', va='bottom', fontsize=10)\n\n# Set title and labels with improved font sizes\nax.set_title('Comparison of Different Models', fontsize=16, fontweight='bold')\nax.set_xlabel('Models', fontsize=14)\nax.set_ylabel('Performance (%)', fontsize=14)\n\n# Customize the x-axis ticks\nax.set_xticks(np.arange(len(categories)))\nax.set_xticklabels(categories, rotation=45, ha='right', fontsize=12)\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', alpha=0.7)\n\n# Adjust layout for better spacing\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_61.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the bar chart\ncategories = ['Patents Filed', 'Research Investment', 'Smartphone Usage', 'Internet Penetration']\nvalues = [1200, 1500, 2000, 2500]\ncolors = ['#FF6347', '#90EE90', '#ADD8E6', '#87CEEB']\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Plot the bar chart with customized colors and edge color\nbars = ax.bar(categories, values, color=colors, edgecolor='black')\n\n# Add value labels on top of each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 100, int(yval), ha='center', va='bottom', fontsize=10)\n\n# Set title and labels with improved font sizes\nax.set_title('Innovation Metrics', fontsize=14, fontweight='bold')\nax.set_xlabel('Metrics', fontsize=12)\nax.set_ylabel('Values', fontsize=12)\n\n# Customize the x-axis ticks\nax.set_xticks(np.arange(len(categories)))\nax.set_xticklabels(categories, rotation=45, ha='right', fontsize=10)\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.7)\n\n# Add a legend\nax.legend(['Internet Penetration (%)', 'Smartphone Usage (%)', 'Research Investment (%)', 'Patents Filed (%)'], loc='upper left', fontsize=10)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_62.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the bar chart\ncategories = ['Greeting', 'Request', 'Criticism', 'Apology', 'Persuasion', 'Thanking', 'Leave-taking']\nsynthetic_data = [12, 35, 28, 15, 18, 14, 16]\nhuman_authored_data = [18, 32, 15, 8, 20, 22, 12]\n\n# Set the width of the bars\nbar_width = 0.35\n\n# Create the positions of the bars on the x-axis\nindex = np.arange(len(categories))\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Plot the data with different colors and edge styles\nbars1 = ax.bar(index - bar_width/2, synthetic_data, bar_width, label='Synthetic data', color='#1f77b4', edgecolor='black')\nbars2 = ax.bar(index + bar_width/2, human_authored_data, bar_width, label='Human-authored data', color='#ff7f0e', edgecolor='black')\n\n# Add labels and title\nax.set_xlabel('Categories', fontsize=12)\nax.set_ylabel('Percentage', fontsize=12)\nax.set_title('Comparison of Categories', fontsize=14, fontweight='bold')\nax.set_xticks(index)\nax.set_xticklabels(categories, rotation=45, ha='right', fontsize=10)\n\n# Add a legend\nax.legend()\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.7)\n\n# Annotate each bar with its value\ndef add_value_labels(bars):\n    for bar in bars:\n        yval = bar.get_height()\n        ax.text(bar.get_x() + bar.get_width()/2, yval + 0.5, f'{yval}%', ha='center', va='bottom', fontsize=10)\n\nadd_value_labels(bars1)\nadd_value_labels(bars2)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_63.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\ncategories = ['Attack on Titan', 'Game of Thrones', 'The Count of Monte Cristo', 'Demi-Gods and Semi-Devils', 'Notre-Dame de Paris']\nscores = [\n    [0.45, 0.35, 0.25, 0.15],\n    [0.60, 0.50, 0.40, 0.30],\n    [0.30, 0.20, 0.10, 0.05],\n    [0.55, 0.45, 0.35, 0.25],\n    [0.70, 0.60, 0.50, 0.40]\n]\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Define colors for each category\ncolors = ['#0000FF', '#0000FF', '#0000FF', '#0000FF', '#0000FF']\n\n# Plot the data with error bars\nbars = []\nfor i, score in enumerate(scores):\n    bar = ax.bar(categories[i], score, color=colors[i], alpha=0.7, label=f'Time {i*20}')\n    bars.append(bar)\n\n# Add error bars (optional)\n# for bar in bars:\n#     yerr = [0.05] * len(score)  # Standard deviation or error\n#     ax.errorbar(range(len(score)), score, yerr=yerr, fmt='o', color='black', ecolor='gray', elinewidth=2, capsize=5)\n\n# Set labels and title\nax.set_xlabel('Categories')\nax.set_ylabel('Scores by Time Over')\nax.set_title('Scores by Category Over Time')\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.5)\n\n# Add legend\nax.legend(title='Time')\n\n# Add annotations for clarity\nfor bar in bars:\n    for i, v in enumerate(bar):\n        ax.text(i, v.get_height() + 0.01, f'{v.get_height():.2f}', ha='center', va='bottom', fontsize=9)\n\n# Set x-ticks rotation for better readability\nplt.xticks(rotation=45)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_64.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\nregions = ['West', 'East', 'South', 'North']\nmetrics = [\n    [40.44, 54.46],\n    [25.36, 32.19, 56.03],\n    [39.63, 48.23, 92.15],\n    [32.84, 65.49]\n]\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(10.0, 7.0))\n\n# Define colors for each region\ncolors = ['#4a90e2', '#e57373', '#81c784', '#b39ddb']\n\n# Plot the data with error bars\nfor i, region in enumerate(regions):\n    ax.bar(region, metrics[i], color=colors[i], edgecolor='black', label=region)\n\n# Set labels and title\nax.set_xlabel('Regions', fontsize=12)\nax.set_ylabel('Air Quality Metrics (by Region)', fontsize=12)\nax.set_title('Air Quality Metrics by Region', fontsize=14, fontweight='bold')\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.7)\n\n# Add a legend\nax.legend(title='Metrics', loc='upper right', fontsize=10)\n\n# Add annotations for clarity\nfor i, region in enumerate(regions):\n    for j, value in enumerate(metrics[i]):\n        ax.text(j, value + 1, f'{value:.2f}', ha='center', va='bottom', fontsize=10)\n\n# Adjust layout for better spacing\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_65.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define data for plotting\ncategories = ['LLAMA-Default', 'LLAMA-HAG', 'Vicuna-Default', 'Vicuna-HAG']\nscores_3_constraint_words = [-2.2, -2.3, -3.3, -3.2]\nscores_5_constraint_words = [-1.9, -1.7, -1.9, -1.9]\nscores_7_constraint_words = [-1.8, -1.6, -1.5, -2.0]\nscores_10_constraint_words = [-1.4, -1.1, -1.1, -1.0]\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Set the width of the bars\nbar_width = 0.15\n\n# Define the positions of the bars on the x-axis\nindex = np.arange(len(categories))\n\n# Plot the bars with different colors and labels\nbars1 = ax.bar(index, scores_3_constraint_words, bar_width, label='3 Constraint Words', color='#FF9999')\nbars2 = ax.bar(index + bar_width, scores_5_constraint_words, bar_width, label='5 Constraint Words', color='#99CCFF')\nbars3 = ax.bar(index + 2 * bar_width, scores_7_constraint_words, bar_width, label='7 Constraint Words', color='#FFB399')\nbars4 = ax.bar(index + 3 * bar_width, scores_10_constraint_words, bar_width, label='10 Constraint Words', color='#AEEEEE')\n\n# Add titles and labels\nax.set_xlabel('Scores by group and constraint word count', fontsize=12)\nax.set_ylabel('Score', fontsize=12)\nax.set_title('Scores by group and constraint word count', fontsize=14, fontweight='bold')\nax.set_xticks(index + 1.5 * bar_width)\nax.set_xticklabels(categories)\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=.25)\n\n# Add legend\nax.legend()\n\n# Annotate each bar with its value\ndef add_labels(bars):\n    for bar in bars:\n        yval = bar.get_height()\n        ax.text(bar.get_x() + bar.get_width()/2, yval + 0.05, round(yval, 2), ha='center', va='bottom', fontsize=10)\n\nadd_labels(bars1)\nadd_labels(bars2)\nadd_labels(bars3)\nadd_labels(bars4)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_66.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\ncountries = ['USA', 'China', 'Germany', 'Brazil']\ngdp_growth_2018 = [-0.5, -0.3, -0.4, -0.2]\ngdp_growth_2019 = [-0.4, -0.2, -0.3, -0.1]\ngdp_growth_2020 = [-0.3, -0.1, -0.2, 0.0]\ngdp_growth_2021 = [-0.2, 0.0, -0.1, 0.1]\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Define colors for each country\ncolors = ['#FF9999', '#66B3FF', '#99FF99', '#FFCC99']\n\n# Plot the data with error bars and custom styles\nbars = ax.bar(countries, gdp_growth_2018, color=colors[0], label='GDP growth 2018', edgecolor='black', linewidth=1.2)\nax.errorbar(countries, gdp_growth_2018, yerr=[0.1]*len(countries), fmt='o', color='black', ecolor='gray', elinewidth=1, capsize=5)\n\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.05, f'{yval:.1f}', ha='center', va='bottom')\n\nbars = ax.bar(countries, gdp_growth_2019, bottom=gdp_growth_2018, color=colors[1], label='GDP growth 2019', edgecolor='black', linewidth=1.2)\nax.errorbar(countries, [gdp_growth_2018[i] + gdp_growth_2019[i] for i in range(len(countries))], \n           yerr=[0.1]*len(countries), fmt='o', color='black', ecolor='gray', elinewidth=1, capsize=5)\n\nfor bar in bars:\n    yval = bar.get_height() + gdp_growth_2018[bars.index(bar)]\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.05, f'{yval:.1f}', ha='center', va='bottom')\n\nbars = ax.bar(countries, gdp_growth_2020, bottom=[gdp_growth_2018[i] + gdp_growth_2019[i] for i in range(len(countries))], color=colors[2], label='GDP growth 2020', edgecolor='black', linewidth=1.2)\nax.errorbar(countries, [gdp_growth_2018[i] + gdp_growth_2019[i] + gdp_growth_2020[i] for i in range(len(countries))], \n           yerr=[0.1]*len(countries), fmt='o', color='black', ecolor='gray', elinewidth=1, capsize=5)\n\nfor bar in bars:\n    yval = bar.get_height() + gdp_growth_2018[bars.index(bar)] + gdp_growth_2019[bars.index(bar)]\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.05, f'{yval:.1f}', ha='center', va='bottom')\n\nbars = ax.bar(countries, gdp_growth_2021, bottom=[gdp_growth_2018[i] + gdp_growth_2019[i] + gdp_growth_2020[i] for i in range(len(countries))], color=colors[3], label='GDP growth 2021', edgecolor='black', linewidth=1.2)\nax.errorbar(countries, [gdp_growth_2018[i] + gdp_growth_2019[i] + gdp_growth_2020[i] + gdp_growth_2021[i] for i in range(len(countries))], \n           yerr=[0.1]*len(countries), fmt='o', color='black', ecolor='gray', elinewidth=1, capsize=5)\n\nfor bar in bars:\n    yval = bar.get_height() + gdp_growth_2018[bars.index(bar)] + gdp_growth_2019[bars.index(bar)] + gdp_growth_2020[bars.index(bar)]\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.05, f'{yval:.1f}', ha='center', va='bottom')\n\n# Set labels and title\nax.set_xlabel('Country')\nax.set_ylabel('GDP Growth Rate (%)')\nax.set_title('Negative GDP Growth Rates by Country and Year')\nax.set_xticks(range(len(countries)))\nax.set_xticklabels(countries, rotation=45, ha='right')\n\n# Add a legend\nax.legend(loc='upper right')\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.7)\n\n# Adjust layout for better spacing\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_67.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the bar chart\nmodels = ['GPT4V', 'OSCAR', 'LLaMA', 'BLIP2', 'BLIP1', 'Video-LLMA', 'LaVIA']\nperformance = [82.5, 73.93, 31.79, 4.64, 4.64, 0.71, 0.0]\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(12.0, 8.0))\n\n# Define colors for the bars\ncolors = ['#FF9999', '#66B3FF', '#99FF99', '#FFCC99', '#C2C2F0', '#FFD700', '#FF6347']\n\n# Plot the bar chart with enhanced aesthetics\nbars = ax.bar(models, performance, color=colors, edgecolor='black', linewidth=1.2)\n\n# Add data labels on top of each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 1, f'{yval:.1f}%', ha='center', va='bottom', fontsize=10, fontweight='bold')\n\n# Set title and labels with improved styling\nax.set_title('Human Study', fontsize=16, fontweight='bold')\nax.set_xlabel('Model', fontsize=12)\nax.set_ylabel('Percentage (%)', fontsize=12)\n\n# Customize the x-axis ticks\nax.set_xticks(np.arange(len(models)))\nax.set_xticklabels(models, rotation=45, ha='right', fontsize=10)\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.7)\n\n# Adjust layout for better spacing\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_68.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the stacked bar chart\ncategories = ['Traffic Flow', 'Accident Rate', 'Public Transport Usage', 'Road Condition']\nvalues = [\n    [50, 30, 70],  # Cars\n    [20, 20, 40],  # Buses\n    [30, 30, 30],  # Bikes\n    [15, 10, 5]    # Pedestrians\n]\n\n# Define colors for each category\ncolors = ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728']\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Initialize the bottom of the bars\nbottom = np.zeros(len(categories))\n\n# Plot each category as a stacked bar\nfor i, (category, value) in enumerate(zip(categories, values)):\n    ax.bar(range(len(value)), value, color=colors[i], label=category, bottom=bottom)\n    bottom += value\n\n# Set labels and title\nax.set_xlabel('Categories')\nax.set_ylabel('Values')\nax.set_title('Stacked Bar Chart of Transportation Data')\nax.set_xticks(np.arange(len(categories)))\nax.set_xticklabels(categories)\n\n# Add a legend\nax.legend(title='Transportation Mode')\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.7)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_69.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Sales units for different product categories\ncategories = ['Category A', 'Category B', 'Category C', 'Category D', 'Category E', 'Category F', 'Category G']\nsales_units = [\n    [85, 60, 45, 30, 20],\n    [70, 55, 40, 25, 15],\n    [65, 50, 35, 20, 10],\n    [60, 45, 30, 15, 5],\n    [55, 40, 25, 10, 0],\n    [50, 35, 20, 5, 0],\n    [45, 30, 15, 0, 0]\n]\n\n# Define colors for each category\ncolors = ['#FF9999', '#FFCC99', '#FFFF99', '#B3FF99', '#99E6FF', '#9999FF', '#FF99E6']\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(10.0, 7.0))\n\n# Plot the stacked bar chart\nbottom = np.zeros(len(categories))\nfor i, sales in enumerate(sales_units):\n    ax.bar(categories, sales, color=colors[i], bottom=bottom, label=f'Product {chr(65 + i)} Sales')\n    bottom += sales\n\n# Add title and labels\nax.set_title('Enhanced Stacked Bar Chart with Textures and Annotated Values', fontsize=14, fontweight='bold')\nax.set_xlabel('Product Categories', fontsize=12)\nax.set_ylabel('Sales Units', fontsize=12)\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.7)\n\n# Add annotations on top of each bar\nfor i, sales in enumerate(sales_units):\n    for j, value in enumerate(sales):\n        ax.text(j, sum(sales[:i+1]) - value/2, f'{value}', ha='center', va='center', fontsize=10, color='black')\n\n# Add legend\nax.legend(title='Legend', loc='upper right', fontsize=10)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\ncategories = ['SEQ', 'REPLAY', 'MTL']\nprobing_fgt = [84.3, -9.12, -37.9]\nobserved_fgt = [-9.44, -35.1, -3.67]\nfeature_embedding_distance = [0.83, 0.6, 0.11]\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Define colors for each bar\ncolors = ['#6a5acd', '#add8e6', '#ffcccb']\n\n# Plot the bars with different colors and edge colors\nbars = ax.bar(categories, probing_fgt, color=colors[0], edgecolor='black', label='Probing FGT')\nax.bar(categories, observed_fgt, bottom=probing_fgt, color=colors[1], edgecolor='black', label='Observed FGT')\nax.bar(categories, feature_embedding_distance, bottom=[p + o for p, o in zip(probing_fgt, observed_fgt)], \n       color=colors[2], edgecolor='black', label='Feature Embedding Distance')\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.7)\n\n# Set labels and title with improved font sizes\nax.set_xlabel('Categories', fontsize=12)\nax.set_ylabel('Accuracy (%)', fontsize=12)\nax.set_title('Comparison of Different Categories', fontsize=14, fontweight='bold')\n\n# Add a legend with a shadow effect\nax.legend(loc='upper right', fontsize=10, shadow=True)\n\n# Annotate each bar with its value\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.5, f'{yval:.2f}', ha='center', va='bottom', fontsize=10)\n\n# Adjust layout for better spacing\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_70.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\ncategories = ['Score 1', 'Score 2', 'Score 3', 'Score 4', 'Score 5']\nscores = [10, 8, 12, 6, 8]\nhuman_scores = [10, 8, 12, 10, 15]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Define colors for the bars\ncolors = ['#4CAF50', '#2196F3', '#FFC107', '#FF5722', '#9C27B0']\n\n# Plot the data with enhanced styling\nbars = ax.bar(categories, scores, color=colors, edgecolor='black', linewidth=1.2, label='Scores')\n\n# Add a secondary y-axis for human scores\nax2 = ax.twinx()\nax2.bar(categories, human_scores, color=[c for c in colors if c != '#4CAF50'], alpha=0.7, edgecolor='black', linewidth=1.2, label='Human Scores')\n\n# Set labels and title\nax.set_xlabel('Human Annotator', fontsize=12)\nax.set_ylabel('Scores', fontsize=12)\nax.set_title('Human Labeling and Agreement Bias Checking', fontsize=14, fontweight='bold')\n\n# Add grid lines\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.7)\n\n# Add annotations for clarity\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.5, f'{yval}', ha='center', va='bottom', fontsize=10)\n\n# Add a legend\nax.legend(loc='upper left', fontsize=10)\nax2.legend(loc='upper right', fontsize=10)\n\n# Adjust layout for better spacing\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_71.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Number of students in different courses\ncourses = ['Coreutils', 'Gzip', 'Scp', 'Libq', 'Mcf', 'Omnet', 'Perl']\nstudents = [150, 120, 130, 110, 140, 90, 70]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(8.0, 4.0))\n\n# Define colors for each bar\ncolors = ['#66b3ff', '#99ff99', '#ffcc99', '#ff9999', '#c2c2f0', '#ffb3e6', '#c2c2f0']\n\n# Plot the bar chart with customized styles\nbars = ax.bar(courses, students, color=colors, edgecolor='black', linewidth=1.2)\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.7)\n\n# Set labels and title with improved font sizes\nax.set_xlabel('Courses', fontsize=12)\nax.set_ylabel('Number of Students', fontsize=12)\nax.set_title('Student Enrollment by Course', fontsize=14, fontweight='bold')\n\n# Add annotations on top of each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 5, f'{yval}', ha='center', va='bottom', fontsize=10)\n\n# Customize the x-axis ticks\nax.set_xticks(np.arange(len(courses)))\nax.set_xticklabels(courses, rotation=45, ha='right', fontsize=10)\n\n# Add a legend\nax.legend(['Students'], loc='upper right', fontsize=10)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_72.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Model performance improvement by language\nmodels = ['Bactrian-X EN', 'Lima-X DE', 'Bactrian-X FR', 'Lima-X IT', 'Bactrian-X ES']\nperformance_improvement = [3.5, 2.3, 4.4, 1.3, 0.7]\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Define colors for each bar\ncolors = ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd']\n\n# Plot the bar chart with enhanced aesthetics\nbars = ax.bar(models, performance_improvement, color=colors, edgecolor='black', linewidth=1.2)\n\n# Add value labels on top of each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.1, f'{yval:.1f}', ha='center', va='bottom', fontsize=10, fontweight='bold')\n\n# Set title and labels with improved formatting\nax.set_title('Model Performance Improvement by Language', fontsize=14, fontweight='bold')\nax.set_xlabel('Model with Language', fontsize=12)\nax.set_ylabel('Improvement [%]', fontsize=12)\n\n# Customize the x-axis ticks\nax.set_xticks(np.arange(len(models)))\nax.set_xticklabels(models, rotation=45, ha='right', fontsize=10)\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.7)\n\n# Add a legend to explain the colors\nax.legend(['EN', 'DE', 'FR', 'IT', 'ES'], loc='upper right', fontsize=10)\n\n# Adjust layout for better spacing\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_73.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Index changes for two different indices over fiscal quarters\nfiscal_quarters = np.array([1, 2, 3, 4, 5])\ndow_jones_index = np.array([0.5, 1.5, 2.2, 3.9, 4.6])\nnasdaq_index = np.array([-0.6, -0.8, 0.4, 0.0, -1.2])\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Plot the Dow Jones Index with a green color and a bar width of 0.3\nax.bar(fiscal_quarters - 0.15, dow_jones_index, width=0.3, color='seagreen', label='Dow Jones Index')\n\n# Plot the Nasdaq Index with an orange color and a bar width of 0.3\nax.bar(fiscal_quarters + 0.15, nasdaq_index, width=0.3, color='darkorange', label='Nasdaq Index')\n\n# Set labels and title with improved font sizes and styles\nax.set_xlabel('Fiscal Quarter', fontsize=12, fontweight='bold')\nax.set_ylabel('Index Change (%)', fontsize=12, fontweight='bold')\nax.set_title('Index Changes Over Fiscal Quarters', fontsize=14, fontweight='bold')\n\n# Add grid lines for better readability\nax.grid(axis='y', linestyle='--', alpha=0.7)\n\n# Add a legend with a shadow effect\nax.legend(loc='upper left', fontsize=10, shadow=True)\n\n# Set x-ticks to display fiscal quarters\nax.set_xticks(fiscal_quarters)\nax.set_xticklabels(['Q1', 'Q2', 'Q3', 'Q4', 'Q5'])\n\n# Adjust y-axis limits for better spacing\nax.set_ylim(-5, 5)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_74.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\ncategories = ['E16.6', 'L26.8', 'D19.7', 'L22.2']\nvalues = [39.4, 34.06, 30.84, 34.06]\ncolors = ['#FF9999', '#66B3FF', '#99FF99', '#FFCC99']\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Plot the data with a bar chart\nbars = ax.bar(categories, values, color=colors, edgecolor='black')\n\n# Add value labels on top of each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.5, f'{yval:.2f}', ha='center', va='bottom', fontsize=10)\n\n# Set labels and title\nax.set_xlabel('Series Labels', fontsize=12)\nax.set_ylabel('Reward Values', fontsize=12)\nax.set_title('Comparison of Reward Values Across Series', fontsize=14, fontweight='bold')\n\n# Customize the x-axis ticks\nax.set_xticks(np.arange(len(categories)))\nax.set_xticklabels(categories, rotation=45, ha='right')\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.7)\n\n# Add a legend\nax.legend(['\u03bb=0.06', '\u03bb=0.08', '\u03bb=0.1'], loc='upper right', fontsize=10)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_75.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the bar chart\ncategories = ['Truthful: Misleading = 2:0']\ntruthful_recall = [53.8]\nmisleading_recall = [19.4]\n\n# Define colors for the bars\ncolors = ['#6a0dad', '#ff9999']\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Plot the data with customized bar width and edge color\nbar_width = 0.35\nindex = np.arange(len(categories))\nbars = ax.bar(index, truthful_recall, bar_width, label='Truthful Recall', color=colors[0], edgecolor='black')\nax.bar(index + bar_width, misleading_recall, bar_width, label='Misleading Recall', color=colors[1], edgecolor='black')\n\n# Add labels and title\nax.set_xlabel('Truthfulness vs Misleadingness Ratio', fontsize=12)\nax.set_ylabel('Recall (%)', fontsize=12)\nax.set_title('Truthfulness:Misleading = 2:0', fontsize=14, fontweight='bold')\nax.set_xticks(index + bar_width / 2)\nax.set_xticklabels(categories)\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.7)\n\n# Add annotations for each bar\nfor i, v in enumerate(truthful_recall):\n    ax.text(i, v + 1, f'{v}%', ha='center', va='bottom', fontsize=10, color='black')\n\nfor i, v in enumerate(misleading_recall):\n    ax.text(i + bar_width, v + 1, f'{v}%', ha='center', va='bottom', fontsize=10, color='black')\n\n# Add a legend\nax.legend(loc='upper right', fontsize=10)\n\n# Adjust layout for better spacing\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_76.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the bar chart\ncategories = ['Light Industry', 'Heavy Industry', 'Transportation', 'Residential']\ncurrent_year = [1200, 1500, 800, 1000]\nprevious_year = [1300, 1400, 900, 1100]\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Define colors for the bars\ncolors = ['#1f77b4', '#ff7f0e']\n\n# Plot the data with different styles\nbars = ax.bar(categories, current_year, color=colors[0], label='Current Year', edgecolor='black', linewidth=1.2)\nax.bar(categories, previous_year, bottom=current_year, color=colors[1], label='Previous Year', edgecolor='black', linewidth=1.2)\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.7)\n\n# Set labels and title with improved font sizes\nax.set_xlabel('Industry Sectors', fontsize=12)\nax.set_ylabel('Pollution Emissions (thousands of metric tons)', fontsize=12)\nax.set_title('Environmental Impact by Sector', fontsize=14, fontweight='bold')\n\n# Add a legend with a shadow effect\nax.legend(loc='upper right', fontsize=10, shadow=True)\n\n# Annotate each bar with its value\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 50, f'{yval}', ha='center', va='bottom', fontsize=10)\n\n# Customize the x-axis ticks\nax.set_xticks(range(len(categories)))\nax.set_xticklabels(categories, rotation=45, ha='right', fontsize=10)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_77.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the bar chart\ncities = ['Beijing', 'Shanghai', 'Guangzhou', 'Shenzhen', 'Chengdu']\ntemperatures = [12, 15, 18, 22, 19]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(8.0, 4.0))\n\n# Define colors for the bars\ncolors = ['#ADD8E6', '#ADD8E6', '#ADD8E6', '#ADD8E6', '#ADD8E6']\n\n# Plot the bar chart\nbars = ax.bar(cities, temperatures, color=colors, edgecolor='black')\n\n# Add value labels on top of each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.5, f'{yval}\u00b0C', ha='center', va='bottom', fontsize=10)\n\n# Set title and labels with improved font sizes\nax.set_title('Average City Temperatures', fontsize=14, fontweight='bold')\nax.set_xlabel('City', fontsize=12)\nax.set_ylabel('Average Temperature (\u00b0C)', fontsize=12)\n\n# Customize the x-axis ticks\nax.set_xticks(np.arange(len(cities)))\nax.set_xticklabels(cities, rotation=45, ha='right', fontsize=10)\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.7)\n\n# Adjust layout for better spacing\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_78.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Pollution emissions (in thousands of tons)\nregions = ['Region 1', 'Region 2', 'Region 3', 'Region 4']\nemissions_2020 = [180, 160, 175, 190]\nemissions_2021 = [150, 140, 165, 180]\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Define colors and patterns for the bars\ncolors = ['#FF6F61', '#8E44AD', '#2980B9', '#27AE60']\npatterns = ['/', '\\\\', '|', '-']\n\n# Plot the data with enhanced styling\nbars = ax.bar(regions, emissions_2020, color=colors, edgecolor='black', hatch=patterns, label='2020 Emissions')\nax.bar_label(bars, padding=3, fmt='{:.0f}', color='black')\n\n# Add a second bar chart for comparison\nbars2 = ax.bar(regions, emissions_2021, color=[c.replace('#', '#88') for c in colors], edgecolor='black', hatch=patterns, alpha=0.7, label='2021 Emissions')\nax.bar_label(bars2, padding=3, fmt='{:.0f}', color='black')\n\n# Set labels and title\nax.set_xlabel('Regions', fontsize=12)\nax.set_ylabel('Pollution Emissions (thousands of tons)', fontsize=12)\nax.set_title('Annual Pollution Emission Reductions', fontsize=14, fontweight='bold')\n\n# Add a legend\nax.legend(title='Legend', loc='upper right', fontsize=10)\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.7)\n\n# Adjust layout for better spacing\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_79.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the bar chart\ncategories = ['Question 1', 'Question 2', 'Question 3', 'Question 4', 'Question 5']\nresponses = [\n    [26, 10, 17, 10, 10],  # Question 1\n    [32, 10, 13, 10, 10],  # Question 2\n    [29, 10, 15, 10, 10],  # Question 3\n    [37, 10, 15, 10, 10],  # Question 4\n    [35, 10, 15, 10, 10]   # Question 5\n]\n\n# Define colors for each category\ncolors = ['#a6cee3', '#b2df8a', '#fb9a99', '#fdbf6f', '#cab2d6']\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot the data with a bar width and edge color for clarity\nbar_width = 0.8\nopacity = 0.8\n\n# Plot each category's bars\nbars = []\nfor i, response in enumerate(responses):\n    bars.append(ax.bar(categories, response, bar_width, alpha=opacity, color=colors[i], label=f'Response {i+1}'))\n\n# Add a title and labels\nax.set_title('Survey Responses by Question', fontsize=16, fontweight='bold')\nax.set_xlabel('Questions', fontsize=12)\nax.set_ylabel('Percentage (%)', fontsize=12)\n\n# Add a legend\nax.legend(title='Responses')\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.7)\n\n# Add annotations to display the exact values on top of each bar\nfor bar in bars:\n    for i, v in enumerate(bar):\n        ax.text(v.get_x() + v.get_width()/2, v.get_height() + 1, f'{v.get_height()}%', ha='center', va='bottom', fontsize=10)\n\n# Set x-ticks to be more readable\nplt.xticks(rotation=45)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Accuracy of a machine learning model across different epochs\nepochs = np.arange(1, 11)\naccuracy = np.array([0.95, 0.97, 0.98, 0.99, 0.995, 0.998, 0.999, 0.9995, 0.9998, 0.9999])\n\n# Create a new figure with a larger size for better visibility\nplt.figure(figsize=(10.0, 6.0))\n\n# Plot the data with enhanced styling\nplt.bar(epochs, accuracy, color='skyblue', edgecolor='black', linewidth=1.2, alpha=0.8)\n\n# Add grid lines for better readability\nplt.grid(axis='y', linestyle='--', alpha=0.7)\n\n# Set labels and title with improved font sizes and styles\nplt.xlabel('Top-10 super families in training dataset', fontsize=12, fontweight='bold')\nplt.ylabel('Accuracy', fontsize=12, fontweight='bold')\nplt.title('Model Accuracy Over Epochs', fontsize=14, fontweight='bold')\n\n# Add a horizontal line at y=0.5 to indicate a threshold\nplt.axhline(y=0.5, color='red', linestyle='--', linewidth=1.5, label='Threshold')\n\n# Customize ticks for better readability\nplt.xticks(epochs, fontsize=10)\nplt.yticks(np.arange(0, 1.1, 0.1), fontsize=10)\n\n# Add a legend to explain the horizontal line\nplt.legend(loc='upper left', fontsize=10)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_80.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Scores for different models and constraint words\nmodels = ['LLAMA-Default', 'LLAMA-HAG', 'Vicuna-Default', 'Vicuna-HAG']\nconstraint_words = [3, 5, 7, 9, 10]\nscores = [\n    [0.8, 0.6, 0.4, 0.2, 0.1],  # LLAMA-Default\n    [0.7, 0.5, 0.3, 0.1, 0.05], # LLAMA-HAG\n    [0.9, 0.7, 0.5, 0.3, 0.2],  # Vicuna-Default\n    [0.6, 0.4, 0.2, 0.1, 0.05]  # Vicuna-HAG\n]\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Define colors for each model\ncolors = ['#4CAF50', '#FFC107', '#2196F3', '#9C27B0']\n\n# Plot the data with error bars\nfor i, model_scores in enumerate(scores):\n    ax.bar(constraint_words, model_scores, color=colors[i], label=models[i], alpha=0.7, edgecolor='black')\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.5)\n\n# Set labels and title with improved font sizes\nax.set_xlabel('Num of Constraint Words', fontsize=12)\nax.set_ylabel('Score', fontsize=12)\nax.set_title('Taboo', fontsize=14, fontweight='bold')\n\n# Add a legend with a shadow effect\nax.legend(title='Model', title_fontsize='12', fontsize='10', shadow=True)\n\n# Customize the x-ticks for better readability\nax.set_xticks(constraint_words)\nax.set_xticklabels(constraint_words, rotation=45, ha='right')\n\n# Adjust layout for better spacing\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_81.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the bar chart\ncategories = ['LLaMA', 'Vicuna', 'Alpaca', 'WizardLM']\ntrue_recall = [45.3, 56.9, 53.8, 19.4]\nmisleading_recall = [30.1, 34, 40, 20]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(8.0, 4.0))\n\n# Define colors for the bars\ncolors = ['#1f77b4', '#2ca02c', '#ff7f0e', '#d62728']\n\n# Plot the true recall bars\nbars_true = ax.bar(categories, true_recall, color=colors, label='True Recall', edgecolor='black')\n\n# Plot the misleading recall bars\nbars_misleading = ax.bar(categories, misleading_recall, bottom=true_recall, color=[c for c in colors if c != '#1f77b4'], label='Misleading Recall', edgecolor='black')\n\n# Add data labels on top of each bar\nfor bar in bars_true + bars_misleading:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.5, f'{yval:.1f}', ha='center', va='bottom', fontsize=10)\n\n# Set labels and title\nax.set_xlabel('Model')\nax.set_ylabel('Misleading Recall')\nax.set_title('Truthful:Misleading Recall')\n\n# Add a legend\nax.legend()\n\n# Set x-ticks and labels\nax.set_xticks(np.arange(len(categories)))\nax.set_xticklabels(categories, rotation=45, ha='right')\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=.25)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_82.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the bar chart\ncategories = ['Convertible', 'Coupe', 'Sedan', 'SUV', 'Truck', 'Coupe New', 'Sedan New', 'Truck New', 'SUV New', 'Convertible New']\nvalues = [25, 28, 15, 22, 20, 24, 18, 19, 23, 27]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Define colors for each bar\ncolors = ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd', '#8c564b', '#e377c2', '#7f7f7f', '#bcbd22', '#17becf']\n\n# Plot the bar chart with customized parameters\nbars = ax.bar(categories, values, color=colors, edgecolor='black')\n\n# Add value labels on top of each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.5, f'{yval}', ha='center', va='bottom', fontsize=10)\n\n# Set title and labels with improved styling\nax.set_title('Probability of Improvement over VLM Image Encoder Baseline Returns', fontsize=14, fontweight='bold')\nax.set_xlabel('Vehicle Type', fontsize=12)\nax.set_ylabel('Probability of Improvement', fontsize=12)\n\n# Rotate x-axis labels for better readability\nplt.xticks(rotation=45, ha='right')\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.7)\n\n# Adjust layout to prevent clipping of labels\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_83.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the bar chart\nemotions = ['Disappointment', 'Joy', 'Relief', 'Gratitude', 'Annoyance', 'Nervousness', 'Pride', 'Sadness', 'Unbored', 'Amusement']\ndisappointment = [2.1, 3.0, 3.5, 3.5, 6.0, 6.0, 6.7, 7.0, 7.0, 7.6]\njoy = [3.0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\nrelief = [0, 3.0, 3.5, 3.5, 0, 0, 0, 0, 0, 0]\ngratitude = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\nannoyance = [0, 0, 0, 0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0]\nnervousness = [0, 0, 0, 0, 0, 6.0, 6.0, 6.0, 6.0, 6.0]\npride = [0, 0, 0, 0, 0, 0, 6.0, 6.0, 6.0, 6.0]\nsadness = [0, 0, 0, 0, 0, 0, 0, 7.0, 7.0, 7.0]\nunbored = [0, 0, 0, 0, 0, 0, 0, 0, 3.0, 3.0]\namusement = [0, 0, 0, 0, 0, 0, 0, 0, 0, 2.6]\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(10.0, 4.0))\n\n# Define colors for each emotion\ncolors = ['#FF9999', '#66B3FF', '#99FF99', '#FFCC99', '#FF6666', '#FFCCCC', '#9999FF', '#CC99FF', '#FFFF99', '#CCFFCC']\n\n# Plot the bar chart with customized styles\nbars = ax.bar(emotions, disappointment, color=colors[0], label='Disappointment')\nax.bar(emotions, joy, bottom=disappointment, color=colors[1], label='Joy')\nax.bar(emotions, relief, bottom=[d + j for d, j in zip(disappointment, joy)], color=colors[2], label='Relief')\nax.bar(emotions, gratitude, bottom=[d + j + r for d, j, r in zip(disappointment, joy, relief)], color=colors[3], label='Gratitude')\nax.bar(emotions, annoyance, bottom=[d + j + r + g for d, j, r, g in zip(disappointment, joy, relief, gratitude)], color=colors[4], label='Annoyance')\nax.bar(emotions, nervousness, bottom=[d + j + r + g + a for d, j, r, g, a in zip(disappointment, joy, relief, gratitude, annoyance)], color=colors[5], label='Nervousness')\nax.bar(emotions, pride, bottom=[d + j + r + g + a + n for d, j, r, g, a, n in zip(disappointment, joy, relief, gratitude, annoyance, nervousness)], color=colors[6], label='Pride')\nax.bar(emotions, sadness, bottom=[d + j + r + g + a + n + p for d, j, r, g, a, n, p in zip(disappointment, joy, relief, gratitude, annoyance, nervousness, pride)], color=colors[7], label='Sadness')\nax.bar(emotions, unbored, bottom=[d + j + r + g + a + n + p + s for d, j, r, g, a, n, p, s in zip(disappointment, joy, relief, gratitude, annoyance, nervousness, pride, sadness)], color=colors[8], label='Unbored')\nax.bar(emotions, amusement, bottom=[d + j + r + g + a + n + p + s + u for d, j, r, g, a, n, p, s, u in zip(disappointment, joy, relief, gratitude, annoyance, nervousness, pride, sadness, unbored)], color=colors[9], label='Amusement')\n\n# Add title and labels\nax.set_title('Emotion Frequency Distribution', fontsize=14, fontweight='bold')\nax.set_xlabel('Emotion', fontsize=12)\nax.set_ylabel('Frequency Metric 1 (%)', fontsize=12)\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.7)\n\n# Add a legend with a shadow effect\nax.legend(loc='upper right', fontsize=10, shadow=True)\n\n# Set x-ticks rotation for better readability\nplt.xticks(rotation=45, ha='right')\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_84.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the bar chart\ncategories = ['Attack on Titan', 'Game of Thrones', 'The Count of Monte Cristo', 'Demi-Gods and Semi-Devils', 'Notre-Dame de Paris']\nscores_0 = [0.45, 0.35, 0.25, 0.30, 0.55]\nscores_20 = [0.40, 0.30, 0.20, 0.25, 0.50]\nscores_40 = [0.42, 0.32, 0.22, 0.27, 0.52]\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Define colors for each category\ncolors = ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd']\n\n# Plot the bars with different scores\nbars = ax.bar(categories, scores_0, color=colors[0], label='Score at Time 0')\nax.bar(categories, scores_20, bottom=scores_0, color=colors[1], label='Score at Time 20')\nax.bar(categories, scores_40, bottom=[x + y for x, y in zip(scores_0, scores_20)], color=colors[2], label='Score at Time 40')\n\n# Add labels and title\nax.set_xlabel('Movies')\nax.set_ylabel('Scores')\nax.set_title('Movie Scores Over Time')\nax.set_xticklabels(categories, rotation=45, ha='right')\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.7)\n\n# Add a legend\nax.legend()\n\n# Annotate each bar with its value\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.01, round(yval, 2), ha='center', va='bottom')\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_85.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the bar chart\ncategories = ['Japan', 'Australia', 'Canada', 'Germany', 'Italy', 'France', 'UK', 'USA']\nvalues1 = [1200, 800, 1500, 1800, 1300, 1600, 1400, 1700]\nvalues2 = [100, 150, 200, 250, 300, 350, 400, 450]\nvalues3 = [50, 75, 100, 125, 150, 175, 200, 225]\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Define colors for each bar\ncolors = ['#FF5733', '#FFC300', '#DAF7A6', '#90EE90', '#ADD8E6', '#87CEEB', '#FFD700', '#FF6347']\n\n# Plot the bars with different colors and edge colors\nbars1 = ax.bar(categories, values1, color=colors, edgecolor='black', label='Total Energy Consumption (10^2 PJ)')\nbars2 = ax.bar(categories, values2, bottom=values1, color=[c for c in colors if c != '#FF5733'], edgecolor='black', label='Electricity Production (10^1 TWh)')\nbars3 = ax.bar(categories, values3, bottom=[v1 + v2 for v1, v2 in zip(values1, values2)], color=[c for c in colors if c not in ['#FF5733', '#FFC300']], edgecolor='black', label='Renewable Energy Ratio (%)')\n\n# Add a legend to the chart\nax.legend(loc='upper right')\n\n# Set labels and title with improved font sizes\nax.set_xlabel('Country', fontsize=12)\nax.set_ylabel('Values', fontsize=12)\nax.set_title('Energy Consumption and Production', fontsize=14)\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.7)\n\n# Add annotations to display the exact values on top of each bar\nfor bar in bars1:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 50, f'{yval}', ha='center', va='bottom', fontsize=10)\n\n# Adjust layout for better spacing\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_86.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the bar chart\ncategories = ['leave-taking', 'thanking', 'persuasion', 'apology', 'criticism', 'request', 'greeting']\nsynthetic_data = [10, 10, 10, 7, 24, 31, 8]\nhuman_authored_data = [9, 16, 15, 5, 11, 28, 16]\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Define colors for the bars\ncolors = ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd', '#8c564b', '#e377c2']\n\n# Plot the data\nbars = ax.bar(categories, synthetic_data, color=colors, label='Synthetic data')\nax.bar(categories, human_authored_data, bottom=synthetic_data, color=[c for c in colors if c != '#1f77b4'], label='Human-authored data')\n\n# Add annotations to each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.5, f'{yval}%', ha='center', va='bottom', fontsize=10)\n\n# Set labels and title\nax.set_xlabel('Categories', fontsize=12)\nax.set_ylabel('Percentage (%)', fontsize=12)\nax.set_title('Comparison of Synthetic and Human-Authored Data', fontsize=14, fontweight='bold')\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.7)\n\n# Add a legend\nax.legend(loc='upper right', fontsize=10)\n\n# Set x-ticks rotation for better readability\nplt.xticks(rotation=45)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_87.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the bar chart\ncategories = ['Beauty', 'Yelp', 'More']\nvalues = [5.1, 6, 19.7]\ncolors = ['#FFD700', '#FF6347', '#ADD8E6']\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Plot the bar chart with customized styles\nbars = ax.bar(categories, values, color=colors, edgecolor='black', linewidth=1.2)\n\n# Add value labels on top of each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.5, f'{yval}%', ha='center', va='bottom', fontsize=10, fontweight='bold')\n\n# Set title and labels with improved styling\nax.set_title('Customer Satisfaction by Category', fontsize=14, fontweight='bold')\nax.set_xlabel('Category', fontsize=12)\nax.set_ylabel('Satisfaction (%)', fontsize=12)\n\n# Customize the x-ticks\nax.set_xticks(np.arange(len(categories)))\nax.set_xticklabels(categories, rotation=45, ha='right')\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', alpha=0.7)\n\n# Add a legend\nax.legend(['Satisfaction'], loc='upper right')\n\n# Adjust layout for better spacing\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_88.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data for the bar chart\ncategories = ['Vicuna-HAG', 'Vicuna-Default', 'LLAMA-HAG', 'LLAMA-Default']\nscores = [\n    [-3.2, -3.3, -3.2, -3.3],\n    [-1.9, -1.9, -2.2, -2.3],\n    [-0.8, -0.7, -0.6, -0.7],\n    [-0.5, -0.4, -0.6, -0.5]\n]\n\n# Define colors for each category\ncolors = ['#FF9999', '#66B3FF', '#99FF99', '#FFCC99']\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Plot the bar chart with customized aesthetics\nbars = ax.bar(categories, [np.mean(score) for score in scores], color=colors, edgecolor='black')\n\n# Add error bars to represent the standard deviation of each group\nfor i, bar in enumerate(bars):\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.05, f'{yval:.1f}', ha='center', va='bottom', fontsize=10)\n\n# Set labels and title with improved font sizes\nax.set_xlabel('Scores by group and constraint word count', fontsize=12)\nax.set_ylabel('Score', fontsize=12)\nax.set_title('Scores by group and constraint word count', fontsize=14, fontweight='bold')\n\n# Customize the x-ticks\nax.set_xticks(range(len(categories)))\nax.set_xticklabels(categories, rotation=45, ha='right', fontsize=10)\n\n# Add a legend\nax.legend(['3 Constraint Words', '5 Constraint Words', '7 Constraint Words', '10 Constraint Words'], loc='upper right', fontsize=10)\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.7)\n\n# Adjust layout for better spacing\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_89.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Accuracy and Precision of different models\nmodels = ['Model 1', 'Model 2', 'Model 3', 'Model 4', 'Model 5', 'Model 6', 'Model 7', 'Model 8', 'Model 9', 'Model 10']\naccuracy = [0.78, 0.75, 0.72, 0.68, 0.65, 0.62, 0.59, 0.56, 0.53, 0.50]\nprecision = [0.85, 0.80, 0.75, 0.70, 0.65, 0.60, 0.55, 0.50, 0.45, 0.40]\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot the accuracy data\nax.bar(models, accuracy, color='skyblue', edgecolor='black', label='Accuracy')\n\n# Add a horizontal line at y=0.5 to indicate a threshold\nax.axhline(y=0.5, color='red', linestyle='--', linewidth=1.5)\n\n# Plot the precision data\nax.bar(models, precision, bottom=accuracy, color='salmon', edgecolor='black', label='Precision')\n\n# Set labels and title\nax.set_xlabel('Top-10 Superfamilies in Training Dataset')\nax.set_ylabel('Scores')\nax.set_title('Comparison of Model Performance')\n\n# Add a legend\nax.legend()\n\n# Add grid lines for better readability\nax.grid(axis='y', linestyle='--', alpha=0.7)\n\n# Adjust layout for better spacing\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ncategories = ['Type', 'Span', 'T&S', 'Spurious', 'Total']\nvalues1 = [50, 30, 45, 20, 70]\nvalues2 = [80, 60, 75, 30, 90]\nvalues3 = [60, 40, 55, 25, 80]\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(9.0, 6.0))\n\n# Define colors for each bar\ncolors = ['#FF9999', '#66B3FF', '#99FF99', '#FFCC99', '#C2C2F0']\n\n# Plot the bars with different styles\nbars1 = ax.bar(categories, values1, color=colors[0], label='Manual Mapping')\nbars2 = ax.bar(categories, values2, bottom=values1, color=colors[1], label='LLM-revision w/CoT')\nbars3 = ax.bar(categories, values3, bottom=[v1 + v2 for v1, v2 in zip(values1, values2)], color=colors[2], label='LLM-revision')\n\n# Add error bars to the bars\nerrors = [10, 5, 8, 3, 12]\nfor bar, error in zip(bars1, errors):\n    ax.errorbar(bar.get_x() + bar.get_width() / 2, bar.get_height(), yerr=error, fmt='o', color='black', ecolor='gray', elinewidth=2, capsize=5)\n\n# Add labels and title\nax.set_xlabel('Category', fontsize=12)\nax.set_ylabel('Error Correction Rate (%)', fontsize=12)\nax.set_title('Error Correction Rate by Category', fontsize=14, fontweight='bold')\nax.legend(title='Legend', loc='upper right', fontsize=10)\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.7)\n\n# Add annotations to display the exact values on top of each bar\nfor bar in bars1:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width() / 2, yval + 1, f'{yval:.0f}', ha='center', va='bottom', fontsize=10)\n\n# Adjust layout for better spacing\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_90.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the bar chart\nmodels = ['GPT4V', 'OSCAR', 'LLaMA', 'BLIP2', 'BLIP1', 'Video-LLaMA', 'Lavila']\nscores_a = [82.5, 73.93, 31.79, 46.4, 46.4, 0.71, 0.0]\nscores_b = [15.0, 10.0, 5.0, 10.0, 5.0, 15.0, 10.0]\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(12.0, 8.0))\n\n# Define colors for the bars\ncolors = ['#FF9999', '#66B3FF', '#99FF99', '#FFCC99', '#C2C2F0', '#FF99E6', '#FFCC99']\n\n# Plot the bar chart with enhanced aesthetics\nbars = ax.bar(models, scores_a, color=colors, edgecolor='black', linewidth=1.2)\n\n# Add labels and title with improved font sizes\nax.set_xlabel('Model', fontsize=12)\nax.set_ylabel('Score A (%)', fontsize=12)\nax.set_title('Human Study', fontsize=14, fontweight='bold')\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.7)\n\n# Annotate each bar with its value\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 1, f'{yval:.1f}%', ha='center', va='bottom', fontsize=10)\n\n# Customize the x-axis ticks\nax.set_xticks(np.arange(len(models)))\nax.set_xticklabels(models, rotation=45, ha='right', fontsize=10)\n\n# Add a legend to differentiate between score types\nax.legend(['Score A'], loc='upper right', fontsize=10)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_91.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Phases and their corresponding F1-scores for different models\nphases = ['GCN', 'RvNN', 'Hyphen', 'GET']\nf1_scores = {\n    'GCN': [0.78, 0.82, 0.75, 0.85],\n    'RvNN': [0.76, 0.80, 0.79, 0.83],\n    'Hyphen': [0.74, 0.78, 0.77, 0.81],\n    'GET': [0.79, 0.83, 0.80, 0.84]\n}\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Define colors for each model\ncolors = ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728']\n\n# Plot each phase's F1-scores with error bars\nfor i, (phase, scores) in enumerate(f1_scores.items()):\n    ax.bar(i, np.mean(scores), yerr=np.std(scores), color=colors[i], alpha=0.7, label=phase, capsize=5)\n\n# Set labels and title\nax.set_xlabel('Phases', fontsize=12)\nax.set_ylabel('Macro F1-score', fontsize=12)\nax.set_title('F1-Score Comparison Across Phases', fontsize=14, fontweight='bold')\nax.set_xticks(range(len(phases)))\nax.set_xticklabels(phases, fontsize=10)\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.5)\n\n# Add a legend\nax.legend(title='Model', loc='upper right', fontsize=10)\n\n# Annotate the bars with their mean values\nfor i, (phase, scores) in enumerate(f1_scores.items()):\n    mean_score = np.mean(scores)\n    ax.text(i, mean_score + 0.01, f'{mean_score:.2f}', ha='center', va='bottom', fontsize=10, color='black')\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_92.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the plot\ncategories = ['human', 'gpt4', 'gpt4-cot']\nvalues = [\n    [100, 200, 300, 400, 500, 600, 700, 800],\n    [150, 250, 350, 450, 550, 650, 750, 850],\n    [200, 300, 400, 500, 600, 700, 800, 900]\n]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Define colors for each bar\ncolors = ['#1f77b4', '#ff7f0e', '#2ca02c']\n\n# Plot the data with customized bar width and edge color\nbar_width = 0.25\nindex = np.arange(len(categories))\nbars = []\n\nfor i, value_set in enumerate(values):\n    bars.append(ax.bar(index + i * bar_width, value_set, bar_width, label=categories[i], color=colors[i], edgecolor='black'))\n\n# Add labels and title\nax.set_xlabel('Count', fontsize=12)\nax.set_ylabel('Resonance Preference', fontsize=12)\nax.set_title('Resonance Preference Plot for rich-context', fontsize=14, fontweight='bold')\nax.set_xticks(index + bar_width * (len(values) - 1) / 2)\nax.set_xticklabels(['s1', 's2', 's3'], fontsize=12)\n\n# Add a legend\nax.legend(title='Role', title_fontsize='12', fontsize='10')\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.7)\n\n# Add annotations to each bar\nfor bar in bars:\n    for i, v in enumerate(bar):\n        ax.text(v.get_x() + v.get_width()/2, v.get_height() + 10, f'{v.get_height()}', ha='center', va='bottom', fontsize=10)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_93.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the bar chart\ncategories = ['Effort', 'Brainwave']\neffort_values = [20.4, 23.8]\nbrainwave_values = [9.3, 7.1]\n\n# Define colors for the bars\ncolors = ['#FF5733', '#FFC300', '#DAF7A6', '#90EE90', '#33FFCE']\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(6.0, 3.0))\n\n# Plot the data for Effort\nbars_effort = ax.bar(categories[0], effort_values, color=colors[:len(effort_values)], label='Very Low')\n\n# Plot the data for Brainwave\nbars_brainwave = ax.bar(categories[1], brainwave_values, color=colors[len(effort_values):len(effort_values)+len(brainwave_values)], label='Very High')\n\n# Add labels and title\nax.set_xlabel('Categories')\nax.set_ylabel('Percentage')\nax.set_title('Survey Results')\nax.set_xticks(np.arange(len(categories)))\nax.set_xticklabels(categories)\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.7)\n\n# Add legend\nax.legend(title='Intensity')\n\n# Annotate each bar with its value\nfor bar in bars_effort + bars_brainwave:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.5, f'{yval}%', ha='center', va='bottom', fontsize=10)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_94.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data for demonstration\nx = np.linspace(0.5, 1.2, 10)\ny1 = np.array([10, 15, 20, 25, 30, 35, 40, 45, 50, 55])\ny2 = np.array([5, 10, 15, 20, 25, 30, 35, 40, 45, 50])\n\n# Create a new figure with a larger size for better visibility\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10.0, 6.0), sharey=True)\n\n# Plot the first dataset\nbars1 = ax1.bar(x, y1, color='red', alpha=0.7, label='Ours')\nax1.set_title('Rate of Gain Change[%]')\nax1.set_xlabel('Brightness')\nax1.set_ylabel('Rate of Gain Change[%]')\nax1.set_xticks(x)\nax1.set_xticklabels(['0.5', '0.6', '0.7', '0.8', '0.9', '1.0', '1.1', '1.2', '1.3', '1.4'])\nax1.legend()\n\n# Plot the second dataset\nbars2 = ax2.bar(x, y2, color='blue', alpha=0.7, label='Saliency-based Sampling')\nax2.set_title('Rate of Gain Change[%]')\nax2.set_xlabel('Rotation Angle [\u00b0]')\nax2.set_ylabel('Rate of Gain Change[%]')\nax2.set_xticks(x)\nax2.set_xticklabels(['0.5', '0.6', '0.7', '0.8', '0.9', '1.0', '1.1', '1.2', '1.3', '1.4'])\nax2.legend()\n\n# Add a title for the entire figure\nfig.suptitle('Comparison of Rate of Gain Change', fontsize=14, fontweight='bold')\n\n# Adjust layout to prevent overlap\nplt.tight_layout(rect=[0, 0.03, 1, 0.95])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_95.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Model performance improvement over language\nlanguages = ['Bactrian-X EN', 'Lima-X DE', 'Bactrian-X FR', 'Lima-X IT', 'Bactrian-X ES']\nperformance_improvement = [3.5, 2.3, 4.4, 1.3, -0.7]\nlanguage_codes = ['EN', 'DE', 'FR', 'IT', 'ES']\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Define colors for each bar\ncolors = ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd']\n\n# Plot the bars with enhanced styling\nbars = ax.bar(languages, performance_improvement, color=colors, edgecolor='black', linewidth=1.2)\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.7)\n\n# Set labels and title with improved font sizes\nax.set_xlabel('Model with Language', fontsize=12)\nax.set_ylabel('Model Performance Improvement [%]', fontsize=12)\nax.set_title('Model Performance Improvement by Language', fontsize=14, fontweight='bold')\n\n# Annotate each bar with its value\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.1, f'{yval:.1f}', ha='center', va='bottom', fontsize=10)\n\n# Customize the x-ticks\nplt.xticks(rotation=45, ha='right', fontsize=10)\n\n# Add a legend to explain the language codes\nax.legend(bars, language_codes, title=\"Language\", loc='upper right', fontsize=10)\n\n# Adjust layout for better spacing\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_96.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\ncategories = ['Random', 'Ours', 'SOTA']\nvalues1 = [66.3, 61.9, 53.8]\nvalues2 = [49.3, 45.7, 41.6]\nvalues3 = [48.0, 42.6, 40.5]\n\n# Create a new figure with a larger size for better visibility\nfig, axes = plt.subplots(2, 2, figsize=(8.0, 8.0), sharex=True, sharey=True)\n\n# Plot the first subplot\naxes[0, 0].bar(categories, values1, color='blue', alpha=0.7)\naxes[0, 0].set_title('Truthful: Misleading = 2:0')\naxes[0, 0].set_ylabel('Score')\n\n# Plot the second subplot\naxes[0, 1].bar(categories, values2, color='blue', alpha=0.7)\naxes[0, 1].set_title('Truthful: Misleading = 2:1')\n\n# Plot the third subplot\naxes[1, 0].bar(categories, values3, color='blue', alpha=0.7)\naxes[1, 0].set_title('Truthful: Misleading = 2:2')\naxes[1, 0].set_xlabel('Categories')\naxes[1, 0].set_ylabel('Score')\n\n# Plot the fourth subplot\naxes[1, 1].bar(categories, values2, color='blue', alpha=0.7)\naxes[1, 1].set_title('Truthful: Misleading = 1:2')\n\n# Adjust layout for better spacing\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_97.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the bar chart\ncategories = ['1', '2', '3', '4', '5', '6']\nvalues1 = [10, 20, 30, 40, 50, 60]\nvalues2 = [15, 25, 35, 45, 55, 65]\nvalues3 = [12, 22, 32, 42, 52, 62]\nvalues4 = [18, 28, 38, 48, 58, 68]\n\n# Create a new figure with a larger size for better visibility\nfig, axes = plt.subplots(2, 2, figsize=(10.0, 8.0), sharex=True, sharey=True)\n\n# Plot the first subplot\naxes[0, 0].bar(categories, values1, color='pink', label='Score Type 1')\naxes[0, 0].set_title('Human Labeling and Agreement Bias Checking 1')\naxes[0, 0].set_ylabel('Scores')\naxes[0, 0].legend()\n\n# Plot the second subplot\naxes[0, 1].bar(categories, values2, color=['blue', 'green', 'orange', 'purple', 'cyan'], label='Score Type 2')\naxes[0, 1].set_title('Human Labeling and Agreement Bias Checking 2')\naxes[0, 1].legend()\n\n# Plot the third subplot\naxes[1, 0].bar(categories, values3, color=['pink', 'blue', 'green', 'orange', 'purple'], label='Score Type 3')\naxes[1, 0].set_title('Human Labeling and Agreement Bias Checking 3')\naxes[1, 0].set_xlabel('Human Annotator')\naxes[1, 0].set_ylabel('Scores')\naxes[1, 0].legend()\n\n# Plot the fourth subplot\naxes[1, 1].bar(categories, values4, color=['blue', 'green', 'orange', 'purple', 'cyan'], label='Score Type 4')\naxes[1, 1].set_title('Human Labeling and Agreement Bias Checking 4')\naxes[1, 1].set_xlabel('Human Annotator')\naxes[1, 1].legend()\n\n# Adjust layout for better spacing between subplots\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_98.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the bar chart\nmodels = ['Model A', 'Model B', 'Model C', 'Model D', 'Model E', 'Model F', 'Model G', 'Model H', 'Model I']\ncontrastive_scores = [54.9, 71.5, 79.2, 60.3, 54.5, 56.8, 92.6, 89.2, 83.3]\nbeam_scores = [38.3, 79.2, 60.3, 52.9, 54.5, 64.6, 86.4, 96.4, 83.3]\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Define colors for the bars\ncolors = ['#4CAF50', '#FF5733']\n\n# Plot the data with enhanced styling\nbars = ax.bar(models, contrastive_scores, color=colors[0], label='Contrastive Search', edgecolor='black', linewidth=1.2)\nax.bar(models, beam_scores, bottom=contrastive_scores, color=colors[1], label='Beam Search', edgecolor='black', linewidth=1.2)\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.7)\n\n# Set labels and title with improved font sizes\nax.set_xlabel('Models', fontsize=12)\nax.set_ylabel('Scores', fontsize=12)\nax.set_title('Performance Comparison by Model', fontsize=14, fontweight='bold')\n\n# Add a legend with a shadow effect\nax.legend(loc='upper left', fontsize=10, shadow=True)\n\n# Annotate each bar with its value\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 1, f'{yval:.1f}', ha='center', va='bottom', fontsize=10)\n\n# Customize the x-axis ticks\nplt.xticks(rotation=45, ha='right')\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_99.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\ncategories = ['Traffic Flow', 'Accident Rate', 'Public Transport Usage', 'Road Conditions', 'Public Satisfaction']\ndata1 = [150.0, 180.0, 75.0, 90.0, 80.0]\ndata2 = [2.5, 2.0, 1.5, 1.0, 0.5]\ndata3 = [60.0, 55.0, 70.0, 65.0, 72.0]\ndata4 = [80.0, 75.0, 90.0, 85.0, 88.0]\n\n# Create a new figure with a larger size for better visibility\nfig, axes = plt.subplots(2, 2, figsize=(10.0, 8.0), sharex=True, sharey=True)\n\n# Plot data for each subplot\naxes[0, 0].bar(categories, data1, color='orange', alpha=0.7)\naxes[0, 0].set_title('Dataset 1')\naxes[0, 0].set_ylabel('Values')\n\naxes[0, 1].bar(categories, data2, color='blue', alpha=0.7)\naxes[0, 1].set_title('Dataset 2')\n\naxes[1, 0].bar(categories, data3, color='green', alpha=0.7)\naxes[1, 0].set_title('Dataset 3')\naxes[1, 0].set_xlabel('Categories')\naxes[1, 0].set_ylabel('Values')\n\naxes[1, 1].bar(categories, data4, color='yellow', alpha=0.7)\naxes[1, 1].set_title('Dataset 4')\naxes[1, 1].set_xlabel('Categories')\n\n# Adjust layout for better spacing\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: A hypothetical dataset representing some form of measurement across different categories\ncategories = ['neutral', 'yellow high', 'yellow low', 'green high', 'green low', 'blue high', 'blue low', 'red high', 'red low', 'orange high', 'orange low']\nmeasurements = [2.5, 3.0, 2.8, 4.5, 4.0, 3.5, 3.2, 5.0, 4.8, 5.5, 5.2]\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Define colors for each category\ncolors = ['#66b3ff', '#99ff99', '#ffcc99', '#ff9999', '#c2c2f0', '#ffb3e6', '#c2c2f0', '#ffb3e6', '#c2c2f0', '#ffb3e6', '#c2c2f0']\n\n# Plot the bar chart with customized styles\nbars = ax.bar(categories, measurements, color=colors, edgecolor='black', linewidth=1.2)\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.7)\n\n# Set labels and title with improved font sizes and styles\nax.set_xlabel('Color', fontsize=12, fontweight='bold')\nax.set_ylabel('SAM Rating', fontsize=12, fontweight='bold')\nax.set_title('Dominance', fontsize=14, fontweight='bold')\n\n# Add value annotations on top of each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.1, round(yval, 1), ha='center', va='bottom', fontsize=10)\n\n# Rotate x-axis labels for better readability\nplt.xticks(rotation=45, ha='right')\n\n# Adjust layout to prevent clipping of labels\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\nx = np.array([20, 30, 40, 50, 60, 70, 80])\ny1 = np.array([10, 15, 20, 25, 30, 35, 40])\ny2 = np.array([12, 17, 22, 27, 32, 37, 42])\ny3 = np.array([14, 19, 24, 29, 34, 39, 44])\ny4 = np.array([16, 21, 26, 31, 36, 41, 46])\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(9.0, 5.0))\n\n# Plot the data with different styles and colors\nax.plot(x, y1, label='Gaming Duration', color='teal', marker='o', linestyle='-', linewidth=2)\nax.plot(x, y2, label='Exercise Duration', color='lightgreen', marker='s', linestyle='--', linewidth=2)\nax.plot(x, y3, label='Reading Duration', color='orange', marker='^', linestyle='-.', linewidth=2)\nax.plot(x, y4, label='Music Playtime', color='purple', marker='D', linestyle=':', linewidth=2)\n\n# Add grid lines for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5, alpha=0.7)\n\n# Set labels and title with improved font sizes\nax.set_xlabel('Duration (minutes)', fontsize=12)\nax.set_ylabel('Activity', fontsize=12)\nax.set_title('Daily Activity Durations', fontsize=14, fontweight='bold')\n\n# Customize the legend\nax.legend(loc='upper left', fontsize=10)\n\n# Enhance the layout\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data for demonstration\ncategories = ['Llama-70b (T2TT)', 'Llama-70b (S2TT)']\nbleu_scores = [18.5, 19.2]\nbless_scores = [17.8, 18.3]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Plot the BLEU scores\nax.bar(categories, bleu_scores, color='skyblue', edgecolor='black', label='BLEU')\n\n# Plot the BLESS scores\nax.bar(categories, bless_scores, bottom=bleu_scores, color='orange', edgecolor='black', label='BLEU')\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.7)\n\n# Set labels and title\nax.set_xlabel('Models', fontsize=12)\nax.set_ylabel('Scores', fontsize=12)\nax.set_title('Comparison of BLEU and BLESS Scores', fontsize=14, fontweight='bold')\n\n# Add a legend\nax.legend(loc='upper right', fontsize=10)\n\n# Annotate the bars with their values\nfor i, score in enumerate(bleu_scores):\n    ax.annotate(f'{score:.1f}', xy=(i, score), xytext=(0, 3),\n                textcoords=\"offset points\", ha='center', va='bottom', fontsize=10, color='black')\nfor i, score in enumerate(bless_scores):\n    ax.annotate(f'{score:.1f}', xy=(i, bleu_scores[i] + score), xytext=(0, 3),\n                textcoords=\"offset points\", ha='center', va='bottom', fontsize=10, color='black')\n\n# Adjust layout for better spacing\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Let's assume we're plotting the relationship between two variables\n# with different levels of complexity and noise.\nx = np.linspace(0, 10, 50)\ny1 = np.sin(x) + np.random.normal(0, 0.1, 50)\ny2 = np.cos(x) + np.random.normal(0, 0.1, 50)\ny3 = np.tan(x) + np.random.normal(0, 0.1, 50)\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data with different styles\nax.scatter(x, y1, color='blue', label='AlphaBeta', s=50, alpha=0.7, edgecolor='black')\nax.scatter(x, y2, color='green', label='z+', s=50, alpha=0.7, edgecolor='black')\nax.scatter(x, y3, color='red', label='Gamma(g=0.05)', s=50, alpha=0.7, edgecolor='black')\n\n# Set labels and title with improved font sizes\nax.set_xlabel('X Axis Label', fontsize=12)\nax.set_ylabel('Y Axis Label', fontsize=12)\nax.set_title('Scatter Plot of Different Functions', fontsize=14)\n\n# Add a grid for better readability\nax.grid(True, linestyle='--', alpha=0.6)\n\n# Add a legend with a shadow effect\nax.legend(loc='upper right', fontsize=10, shadow=True)\n\n# Customize ticks\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/box_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Execution accuracy of different models\nmodels = ['SQL-Only', 'PoT', 'IC-LP', 'DAIL', 'IC-LP+PoT']\naccuracy = [0.875, 0.85, 0.825, 0.81, 0.83]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(6.0, 5.0))\n\n# Plot the data with enhanced aesthetics\nax.bar(models, accuracy, color='teal', edgecolor='black', linewidth=1.2, alpha=0.9)\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.7)\n\n# Set labels and title with improved font sizes and styles\nax.set_xlabel('Models', fontsize=12, fontweight='bold')\nax.set_ylabel('Execution Accuracy', fontsize=12, fontweight='bold')\nax.set_title('Comparison of Execution Accuracy Across Models', fontsize=14, fontweight='bold')\n\n# Customize ticks for better readability\nax.set_xticks(np.arange(len(models)))\nax.set_xticklabels(models, rotation=45, ha='right', fontsize=10)\n\n# Add annotations to highlight key data points\nfor i, acc in enumerate(accuracy):\n    ax.annotate(f'{acc:.3f}', (i, acc), textcoords=\"offset points\", xytext=(0,10), ha='center', fontsize=10, color='darkred')\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/box_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the first subplot\nx1 = np.array([0.88, 0.87, 0.83])\ny1 = np.array([0.6, 0.7, 0.8])\n\n# Data for the second subplot\nx2 = np.array([6.91, 9.33, 9.00])\ny2 = np.array([7.5, 10.0, 12.5])\n\n# Create a new figure with a larger size for better visibility\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10.0, 5.0), sharey=True)\n\n# Plot the first subplot\nax1.boxplot(x1, vert=False, patch_artist=True, boxprops=dict(facecolor='lightblue', edgecolor='black'),\n            whiskerprops=dict(color='black'), capprops=dict(color='black'), medianprops=dict(color='red'))\nax1.set_title('Region Classification Accuracy')\nax1.set_xlabel('Accuracy')\nax1.set_ylabel('Region')\nax1.set_yticklabels(['DENSE (ref)', 'Joint Multimodal Framework (ours)', 'Cine'])\n\n# Plot the second subplot\nax2.boxplot(x2, vert=False, patch_artist=True, boxprops=dict(facecolor='lightgreen', edgecolor='black'),\n            whiskerprops=dict(color='black'), capprops=dict(color='black'), medianprops=dict(color='red'))\nax2.set_title('Slice Mean Error (ms)')\nax2.set_xlabel('Error (ms)')\nax2.set_yticklabels(['DENSE (ref)', 'Joint Multimodal Framework (ours)', 'Cine'])\n\n# Adjust layout for better spacing\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Z-scores for different models\nz_scores = [\n    [3.2, 4.1, 2.9],\n    [4.5, 3.8, 5.0],\n    [2.7, 3.5, 4.2],\n    [5.1, 4.9, 3.6]\n]\n\n# Define model names\nmodels = ['w/o att', 'w/o DP', '1xQ', '20xQ']\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Plot the boxplots\nboxplot = ax.boxplot(z_scores, patch_artist=True, vert=False)\n\n# Customize the colors of the boxes\ncolors = ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728']\nfor patch, color in zip(boxplot['boxes'], colors):\n    patch.set_facecolor(color)\n    patch.set_edgecolor('black')\n\n# Add horizontal lines to indicate thresholds\nthresholds = [5, 10, 15]\nfor threshold in thresholds:\n    ax.axhline(y=threshold, color='red', linestyle='--', linewidth=1.5)\n\n# Set labels and title\nax.set_xlabel('Z-Score')\nax.set_ylabel('Model')\nax.set_title('Z-Scores for Different Models')\n\n# Add gridlines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=.25)\n\n# Add annotations for clarity\nfor i, model in enumerate(models):\n    ax.text(5, i + 1, model, ha='right', va='center', fontsize=10)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/box_16.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the bar chart\ncategories = ['REM', 'No POP', 'Separate M emb.', '4 x 4 tokenizer', 'No latent space C', 'C w/o action inputs']\nvalues = [1.2, 1.8, 2.3, 2.7, 2.9, 3.1]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(5.0, 5.0))\n\n# Define colors for each category\ncolors = ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd', '#8c564b']\n\n# Plot the bar chart with customized styles\nbars = ax.bar(categories, values, color=colors, edgecolor='black', linewidth=1.2)\n\n# Add value labels on top of each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.05, f'{yval:.1f}', ha='center', va='bottom', fontsize=10)\n\n# Set title and labels with improved styling\nax.set_title('Mean', fontsize=14, fontweight='bold')\nax.set_xlabel('Categories', fontsize=12)\nax.set_ylabel('Mean', fontsize=12)\n\n# Customize the x-axis ticks\nax.set_xticks(np.arange(len(categories)))\nax.set_xticklabels(categories, rotation=45, ha='right')\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.7)\n\n# Adjust layout for better spacing\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_17.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Run times for different participants\nrun_times = [\n    [35, 40, 38, 37, 36],  # Participant 1\n    [42, 45, 43, 44, 41],  # Participant 2\n    [39, 41, 38, 40, 37],  # Participant 3\n    [45, 47, 46, 48, 44],  # Participant 4\n    [36, 38, 37, 39, 35]   # Participant 5\n]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(8.0, 4.0))\n\n# Plot the boxplot\nboxplot = ax.boxplot(run_times, patch_artist=True, vert=False)\n\n# Customize the boxplot colors and styles\ncolors = ['#66b3ff', '#99ff99', '#ffcc99', '#ff9999', '#c2c2f0']\nfor patch, color in zip(boxplot['boxes'], colors):\n    patch.set_facecolor(color)\n    patch.set_edgecolor('black')\n    patch.set_linewidth(1.5)\n\n# Add horizontal grid lines\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.7)\n\n# Set labels and title\nax.set_xlabel('Run Time (seconds)', fontsize=12)\nax.set_ylabel('Participant', fontsize=12)\nax.set_title('Comparison of Run Times Among Participants', fontsize=14, fontweight='bold')\n\n# Add a legend\nax.legend([boxplot['boxes'][i] for i in range(len(boxplot['boxes']))],\n          ['Participant 1', 'Participant 2', 'Participant 3', 'Participant 4', 'Participant 5'],\n          loc='upper right', fontsize=10)\n\n# Add annotations for median values\nmedians = [np.median(run_times[i]) for i in range(len(run_times))]\nfor i, median in enumerate(medians):\n    ax.annotate(f'{median:.1f}', xy=(median, i + 1), xytext=(median + 1, i + 1),\n                arrowprops=dict(facecolor='black', shrink=0.05), fontsize=10, ha='left')\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/box_18.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the plots\ncategories = ['AR', 'LSTMAlpha', 'LSTMBeta', 'AE', 'EncDecAD', 'SRCNN', 'AnomalyTransformer', 'TimesNet', 'Donut', 'TFAD']\nvalues = [\n    [0.8, 0.9, 0.7, 0.6, 0.5],\n    [0.2, 0.3, 0.4, 0.5, 0.6],\n    [0.1, 0.2, 0.3, 0.4, 0.5],\n    [0.3, 0.4, 0.5, 0.6, 0.7],\n    [0.4, 0.5, 0.6, 0.7, 0.8],\n    [0.5, 0.6, 0.7, 0.8, 0.9],\n    [0.6, 0.7, 0.8, 0.9, 1.0],\n    [0.7, 0.8, 0.9, 1.0, 1.1],\n    [0.8, 0.9, 1.0, 1.1, 1.2],\n    [0.9, 1.0, 1.1, 1.2, 1.3]\n]\n\n# Create a new figure with a larger size for better visibility\nfig, axes = plt.subplots(1, 2, figsize=(10.0, 5.0), sharey=True)\n\n# Plot 1: Box plot\naxes[0].boxplot(values, vert=False, patch_artist=True, medianprops=dict(color='black'))\nfor i, patch in enumerate(axes[0].patches):\n    patch.set_facecolor(plt.cm.viridis(i / len(categories)))\n\n# Add labels and title\naxes[0].set_title('Box Plot')\naxes[0].set_xlabel('Value')\naxes[0].set_yticklabels(categories)\naxes[0].grid(True, linestyle='--', alpha=0.7)\n\n# Plot 2: Violin plot\naxes[1].violinplot(values, showmeans=True, showmedians=True, showextrema=False)\nfor i, patch in enumerate(axes[1].collections):\n    patch.set_facecolor(plt.cm.viridis(i / len(categories)))\n    patch.set_edgecolor('black')\n\n# Add labels and title\naxes[1].set_title('Violin Plot')\naxes[1].set_xlabel('Value')\naxes[1].set_yticklabels(categories)\naxes[1].grid(True, linestyle='--', alpha=0.7)\n\n# Adjust layout for better spacing\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_19.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Sentiment analysis scores for different categories\ncategories = ['BERT Base', 'MacBERT', 'English HLM']\nsentiments = ['EME sentences', 'Neutral sentences', 'ME sentences']\nscores = [\n    [0.85, 0.92, 0.78, 0.88, 0.95],\n    [0.65, 0.70, 0.68, 0.72, 0.75],\n    [0.90, 0.93, 0.88, 0.91, 0.94]\n]\n\n# Create a new figure with a larger size for better visibility\nfig, axes = plt.subplots(nrows=1, ncols=3, figsize=(10.0, 4.0), sharey=True)\n\n# Plot each category's data\nfor ax, sentiment, category_scores in zip(axes, sentiments, scores):\n    ax.boxplot(category_scores, vert=False, patch_artist=True)\n    ax.set_title(sentiment)\n    ax.set_xlabel('Sentiment Score')\n    ax.yaxis.set_tick_params(labelleft=False)\n    ax.grid(True, linestyle='--', alpha=0.7)\n\n# Set the y-axis labels for all subplots\nfor ax, category in zip(axes, categories):\n    ax.set_yticklabels([category], fontsize=10, fontweight='bold')\n\n# Adjust layout for better spacing and alignment\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the plots\ndata1 = [2.3, 2.5, 2.7, 2.9, 3.1]\ndata2 = [2.4, 2.6, 2.8, 3.0, 3.2]\ndata3 = [2.5, 2.7, 2.9, 3.1, 3.3]\n\n# Create a new figure with a larger size for better visibility\nfig, axes = plt.subplots(2, 2, figsize=(8.0, 6.0), sharex=True, sharey=True)\n\n# Plot the first subplot\naxes[0, 0].boxplot([data1], patch_artist=True, boxprops=dict(facecolor='lightcoral'))\naxes[0, 0].set_title('Our Model')\naxes[0, 0].set_ylabel('Ratings')\n\n# Plot the second subplot\naxes[0, 1].boxplot([data2], patch_artist=True, boxprops=dict(facecolor='lightgreen'))\naxes[0, 1].set_title('NTM+CL')\naxes[0, 1].set_ylabel('Ratings')\n\n# Plot the third subplot\naxes[1, 0].boxplot([data1], patch_artist=True, boxprops=dict(facecolor='lightcoral'))\naxes[1, 0].set_title('Our Model')\naxes[1, 0].set_ylabel('Intrusion')\n\n# Plot the fourth subplot\naxes[1, 1].boxplot([data2], patch_artist=True, boxprops=dict(facecolor='lightgreen'))\naxes[1, 1].set_title('NTM+CL')\naxes[1, 1].set_ylabel('Intrusion')\n\n# Adjust layout and add a central title\nplt.suptitle('Comparative Analysis', fontsize=14, fontweight='bold', y=1.05)\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_20.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\ngroups = ['target', 'control']\ncorrect_reaction_time = [1.2, 1.4]\ncorrect_response_ratio = [0.7, 0.8]\nreaction_time = [0.6, 0.7]\ntime_per_tap = [1.3, 1.5]\n\n# Create a new figure with a larger size for better visibility\nfig, axes = plt.subplots(2, 2, figsize=(10.0, 5.0), sharex=True, sharey=True)\n\n# Plot 1: Correct Reaction Time\naxes[0, 0].boxplot(correct_reaction_time, vert=False)\naxes[0, 0].set_title('Correct reaction time')\naxes[0, 0].set_xlabel('Reaction Time (s)')\naxes[0, 0].set_yticklabels(groups)\naxes[0, 0].grid(True, linestyle='--', alpha=0.7)\n\n# Plot 2: Correct Response Ratio\naxes[0, 1].boxplot(correct_response_ratio, vert=False)\naxes[0, 1].set_title('Correct response ratio')\naxes[0, 1].set_xlabel('Response Ratio')\naxes[0, 1].set_yticklabels(groups)\naxes[0, 1].grid(True, linestyle='--', alpha=0.7)\n\n# Plot 3: Reaction Time\naxes[1, 0].boxplot(reaction_time, vert=False)\naxes[1, 0].set_title('Reaction time')\naxes[1, 0].set_xlabel('Time per tap (s)')\naxes[1, 0].set_yticklabels(groups)\naxes[1, 0].grid(True, linestyle='--', alpha=0.7)\n\n# Plot 4: Time per Tap\naxes[1, 1].boxplot(time_per_tap, vert=False)\naxes[1, 1].set_title('Time per tap')\naxes[1, 1].set_xlabel('Time per tap (s)')\naxes[1, 1].set_yticklabels(groups)\naxes[1, 1].grid(True, linestyle='--', alpha=0.7)\n\n# Adjust layout for better spacing\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_21.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the bar chart\ncategories = ['Method A', 'Method B', 'Method C', 'Method D']\nvalues = [70, 85, 60, 90]\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(9.0, 5.0))\n\n# Define colors for each category\ncolors = ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728']\n\n# Plot the bar chart with enhanced aesthetics\nbars = ax.bar(categories, values, color=colors, edgecolor='black', linewidth=1.2)\n\n# Add value labels on top of each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 1, f'{yval}%', ha='center', va='bottom', fontsize=10, fontweight='bold')\n\n# Set title and labels with improved font sizes and styles\nax.set_title('Comparison of Prediction Accuracy', fontsize=14, fontweight='bold')\nax.set_xlabel('Prediction Accuracy vD1', fontsize=12)\nax.set_ylabel('Methods', fontsize=12)\n\n# Customize the x-axis ticks\nax.set_xticks(np.arange(len(categories)))\nax.set_xticklabels(categories, rotation=45, ha='right', fontsize=10)\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.7)\n\n# Adjust layout to prevent clipping of labels\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_22.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Search depth and corresponding reward values\nsearch_depth = np.array([50, 100, 150, 200, 300, 350])\nrewards = np.array([-0.04, -0.02, 0.00, 0.02, 0.04, 0.06])\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(6.0, 5.0))\n\n# Plot the data with enhanced aesthetics\nax.bar(search_depth, rewards, color='royalblue', edgecolor='black', linewidth=1.2, alpha=0.8)\n\n# Set labels with improved font size and style\nax.set_xlabel('Search depth', fontsize=12, fontweight='bold')\nax.set_ylabel('Reward', fontsize=12, fontweight='bold')\n\n# Add grid lines for better readability\nax.grid(True, linestyle='--', alpha=0.7)\n\n# Set title with enhanced font size and style\nax.set_title('Impact of Search Depth on Reward', fontsize=14, fontweight='bold', pad=20)\n\n# Customize ticks for better readability\nax.set_xticks(search_depth)\nax.set_yticks(np.arange(-0.06, 0.07, 0.02))\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/box_23.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\nactivities = ['Music Playtime', 'Reading Duration', 'Exercise Duration', 'Gaming Duration']\ndurations = [65.1, 55.7, 38.1, 29.5]\nintensities = [4.5, 3.2, 2.8, 1.5]\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(9.0, 5.0))\n\n# Plot the data using a bar chart with error bars\nbars = ax.bar(activities, durations, yerr=intensities, capsize=5, color='skyblue', edgecolor='black')\n\n# Add labels and title\nax.set_xlabel('Activity Type')\nax.set_ylabel('Duration (minutes)')\nax.set_title('Daily Activity Durations')\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.7)\n\n# Annotate each bar with its duration value\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 1, f'{yval:.1f}', ha='center', va='bottom', fontsize=10)\n\n# Customize the x-axis ticks\nplt.xticks(rotation=45, ha='right')\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/box_24.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\ncategories = ['No Intervention', 'Low Intensity', 'High Intensity', 'Recovery', 'Environment']\nmean_values = [1.5, 2.0, 1.8, 2.2, 1.9]\nmedian_values = [1.6, 2.1, 1.7, 2.3, 1.8]\niqr_mean = [0.4, 0.3, 0.3, 0.2, 0.3]\niqr_median = [0.2, 0.2, 0.2, 0.1, 0.2]\n\n# Create a new figure with a larger size for better visibility\nfig, axes = plt.subplots(2, 2, figsize=(8.0, 8.0), constrained_layout=True)\n\n# Plot 1: Mean Value\naxes[0, 0].bar(categories, mean_values, color='skyblue', edgecolor='black')\naxes[0, 0].set_title('Mean Value')\naxes[0, 0].set_ylabel('Value')\naxes[0, 0].set_ylim(1.0, 3.0)\nfor i, v in enumerate(mean_values):\n    axes[0, 0].text(i, v + 0.1, f'{v:.1f}', ha='center', va='bottom')\n\n# Plot 2: Median Value\naxes[0, 1].bar(categories, median_values, color='lightgreen', edgecolor='black')\naxes[0, 1].set_title('Median Value')\naxes[0, 1].set_ylabel('Value')\naxes[0, 1].set_ylim(1.0, 3.0)\nfor i, v in enumerate(median_values):\n    axes[0, 1].text(i, v + 0.1, f'{v:.1f}', ha='center', va='bottom')\n\n# Plot 3: IQR Mean\naxes[1, 0].bar(categories, iqr_mean, color='orange', edgecolor='black')\naxes[1, 0].set_title('IQR Mean')\naxes[1, 0].set_ylabel('Value')\naxes[1, 0].set_ylim(0.0, 0.5)\nfor i, v in enumerate(iqr_mean):\n    axes[1, 0].text(i, v + 0.01, f'{v:.1f}', ha='center', va='bottom')\n\n# Plot 4: IQR Median\naxes[1, 1].bar(categories, iqr_median, color='purple', edgecolor='black')\naxes[1, 1].set_title('IQR Median')\naxes[1, 1].set_ylabel('Value')\naxes[1, 1].set_ylim(0.0, 0.3)\nfor i, v in enumerate(iqr_median):\n    axes[1, 1].text(i, v + 0.01, f'{v:.1f}', ha='center', va='bottom')\n\n# Add a main title for the entire figure\nplt.suptitle('Comparison of Statistical Measures', fontsize=16, fontweight='bold')\n\n# Adjust layout to prevent overlap\nplt.tight_layout(rect=[0, 0.03, 1, 0.95])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_25.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Simulated data for demonstration\nx = np.linspace(-40, 40, 100)\ny1 = np.sin(x) * np.exp(-0.05 * abs(x))\ny2 = np.cos(x) * np.exp(-0.05 * abs(x))\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot the data with different styles and markers\nax.plot(x, y1, label=r'$\\theta_{max}$', color='darkblue', linestyle='-', linewidth=2, marker='o', markersize=5)\nax.plot(x, y2, label=r'$\\theta_{min}$', color='darkred', linestyle='--', linewidth=2, marker='x', markersize=5)\n\n# Set labels with LaTeX formatting for mathematical expressions\nax.set_xlabel('Thrust Angle [\u00b0]', fontsize=12)\nax.set_ylabel('Angular Frequency [rad/s]', fontsize=12)\n\n# Add a legend with a shadow effect for better readability\nax.legend(loc='upper right', fontsize=10, shadow=True)\n\n# Add grid lines for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Set limits for x and y axes\nax.set_xlim(-40, 40)\nax.set_ylim(-0.4, 0.4)\n\n# Add a title to the plot\nax.set_title('Optimization Infeasible', fontsize=14, fontweight='bold')\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/box_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Performance metrics for different models\nmodels = ['ST_CVRP', 'ST_VRPTW', 'ST_All', 'Ours']\nperformance_gaps = [35, 45, 25, 15]  # Performance gap in percentage\nerror_margins = [5, 7, 3, 2]  # Error margins for each model\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the bar chart with error bars\nbars = ax.bar(models, performance_gaps, yerr=error_margins, capsize=5,\n              color=['skyblue', 'lavender', 'orange', 'salmon'], edgecolor='black')\n\n# Add labels and title\nax.set_xlabel('Models', fontsize=12)\nax.set_ylabel('Performance Gap (%)', fontsize=12)\nax.set_title('Comparison of Performance Gaps Among Models', fontsize=14)\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='gray', alpha=0.7)\n\n# Annotate each bar with its value\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 1, f'{yval:.1f}', ha='center', va='bottom', fontsize=10)\n\n# Customize the legend\nax.legend(['ST_CVRP', 'ST_VRPTW', 'ST_All', 'Ours'], loc='upper right', fontsize=10)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/box_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Human normalized scores and corresponding scores for different conditions\nhuman_normalized_scores = [0.2, 0.4, 0.6, 0.8, 1.0]\nrem_scores = [0.1, 0.3, 0.5, 0.7, 0.9]\niris_scores = [0.15, 0.35, 0.55, 0.75, 0.95]\nstorm_scores = [0.12, 0.32, 0.52, 0.72, 0.92]\ntumor_scores = [0.11, 0.31, 0.51, 0.71, 0.91]\ndreamerV3_scores = [0.13, 0.33, 0.53, 0.73, 0.93]\nsimple_plant_scores = [0.14, 0.34, 0.54, 0.74, 0.94]\n\n# Create a new figure with a larger size for better visibility\nfig, axes = plt.subplots(1, 4, figsize=(12.0, 3.0), sharey=True)\n\n# Plot each condition on a separate subplot\nconditions = ['REM (ours)', 'IRIS', 'STORM', 'TWM', 'DreamerV3', 'SimPLe']\ncolors = ['#FF9999', '#66B3FF', '#99FF99', '#FFCC99', '#FF99FF', '#CCCCFF']\n\nfor ax, condition, color in zip(axes, conditions, colors):\n    if condition == 'REM (ours)':\n        ax.scatter(human_normalized_scores, rem_scores, color=color, label=condition, s=100)\n    elif condition == 'IRIS':\n        ax.scatter(human_normalized_scores, iris_scores, color=color, label=condition, s=100)\n    elif condition == 'STORM':\n        ax.scatter(human_normalized_scores, storm_scores, color=color, label=condition, s=100)\n    elif condition == 'TWM':\n        ax.scatter(human_normalized_scores, tumor_scores, color=color, label=condition, s=100)\n    elif condition == 'DreamerV3':\n        ax.scatter(human_normalized_scores, dreamerV3_scores, color=color, label=condition, s=100)\n    elif condition == 'SimPLe':\n        ax.scatter(human_normalized_scores, simple_plant_scores, color=color, label=condition, s=100)\n\n    # Set labels and title\n    ax.set_xlabel('Human Normalized Score')\n    ax.set_ylabel('Score')\n    ax.set_title(condition)\n    ax.legend(loc='upper left')\n\n# Add a global title\nplt.suptitle('Comparison of Different Conditions', fontsize=14, fontweight='bold')\n\n# Adjust layout for better spacing\nplt.tight_layout(rect=[0, 0.03, 1, 0.95])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Angular frequency (rad/s) and Thrust angle (\u00b0)\ndata = {\n    'SOCP Learning (Proposed)': [2.0, 2.5, 3.0, 3.5, 4.0, 4.5, 5.0],\n    'SOCP No Learning': [2.1, 2.6, 3.1, 3.6, 4.1, 4.6, 5.1],\n    'Optimization Infeasible': [2.2, 2.7, 3.2, 3.7, 4.2, 4.7, 5.2],\n    'FMPC': [2.3, 2.8, 3.3, 3.8, 4.3, 4.8, 5.3]\n}\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Define colors for each dataset\ncolors = ['#1f77b4', '#ff7f0e', '#d62728', '#2ca02c']\n\n# Plot each dataset with different markers and line styles\nfor i, (label, values) in enumerate(data.items()):\n    ax.scatter(values, np.full_like(values, i), s=100, c=colors[i], alpha=0.7, edgecolor='w', label=label)\n\n# Set labels and title\nax.set_xlabel('Angular Frequency [rad/s]', fontsize=12)\nax.set_ylabel('Thrust Angle [\u00b0]', fontsize=12)\nax.set_title('Thrust Angle vs Angular Frequency', fontsize=14, fontweight='bold')\n\n# Add grid lines for better readability\nax.grid(True, linestyle='--', alpha=0.6)\n\n# Add a legend with a shadow effect\nax.legend(title='Method', loc='upper left', fontsize=10, frameon=True, shadow=True)\n\n# Add horizontal and vertical lines to separate the plots\nax.axhline(y=0, color='black', linewidth=0.8, linestyle='--')\nax.axvline(x=0, color='black', linewidth=0.8, linestyle='--')\n\n# Adjust the y-axis limits to ensure all data fits well\nax.set_ylim(-1, len(data))\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/box_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: CEE (dB) vs SE (bps)\ncee_db = np.array([-10, -5, 0, 5, 10])\nse_bps = np.array([9, 8, 7, 6, 5])\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data with enhanced aesthetics\nax.scatter(cee_db, se_bps, c='royalblue', edgecolor='black', s=100, alpha=0.7, marker='o', label='CEE (dB)')\n\n# Add grid lines for better readability\nax.grid(True, linestyle='--', linewidth=0.5, alpha=0.7)\n\n# Set labels with improved font size and style\nax.set_xlabel('CEE (dB)', fontsize=12, fontweight='bold')\nax.set_ylabel('SE (bps)', fontsize=12, fontweight='bold')\n\n# Set title with enhanced font size and style\nax.set_title('Performance Metrics', fontsize=14, fontweight='bold', pad=20)\n\n# Customize ticks for better readability\nax.set_xticks(np.arange(-10, 11, 5))\nax.set_yticks(np.arange(5, 13, 1))\n\n# Add a legend with a shadow effect\nax.legend(loc='upper left', fontsize=10, shadow=True)\n\n# Annotate key points for clarity\nfor i, txt in enumerate(se_bps):\n    ax.annotate(f'{txt} bps', (cee_db[i], se_bps[i]), textcoords=\"offset points\", xytext=(0,10), ha='center', fontsize=10)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/box_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data for three different datasets\nx1 = np.array([1, 2, 3, 4, 5])\ny1 = np.array([10, 15, 13, 17, 20])\n\nx2 = np.array([1, 2, 3, 4, 5])\ny2 = np.array([5, 10, 12, 18, 25])\n\nx3 = np.array([1, 2, 3, 4, 5])\ny3 = np.array([2, 6, 8, 14, 19])\n\n# Create a new figure with a larger size for better visibility\nfig, axes = plt.subplots(1, 3, figsize=(25.0, 8.0), sharey=True)\n\n# Plot the first dataset\naxes[0].scatter(x1, y1, color='blue', marker='o', label='Dataset 1')\naxes[0].set_title('Linear travel times')\naxes[0].set_xlabel('X-axis')\naxes[0].set_ylabel('Y-axis')\naxes[0].grid(True)\naxes[0].legend()\n\n# Plot the second dataset\naxes[1].scatter(x2, y2, color='green', marker='s', label='Dataset 2')\naxes[1].set_title('Exponential travel times')\naxes[1].set_xlabel('X-axis')\naxes[1].grid(True)\naxes[1].legend()\n\n# Plot the third dataset\naxes[2].scatter(x3, y3, color='red', marker='^', label='Dataset 3')\naxes[2].set_title('Sigmoidal travel times')\naxes[2].set_xlabel('X-axis')\naxes[2].grid(True)\naxes[2].legend()\n\n# Adjust layout for better spacing\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: AUC values for different models\nauc_values = [\n    [0.92, 0.88, 0.95],  # Model 1\n    [0.87, 0.86, 0.93],  # Model 2\n    [0.85, 0.84, 0.91]   # Model 3\n]\n\n# Define labels for each model\nmodels = ['Only WSI Modality', 'Only CNV Modality', 'WSI+CNV Modality']\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(5.0, 5.0))\n\n# Plot the data using a bar chart with error bars\nbar_width = 0.2\nindex = np.arange(len(models))\nopacity = 0.8\n\n# Plot each model's AUC values\nbars = []\nfor i, auc in enumerate(auc_values):\n    bars.append(ax.bar(index + i * bar_width, auc, bar_width, alpha=opacity, label=models[i]))\n\n# Add error bars (assuming standard deviation for demonstration)\nerrors = [[0.02, 0.01, 0.03], [0.01, 0.01, 0.02], [0.02, 0.01, 0.03]]\nfor bar, error in zip(bars, errors):\n    ax.errorbar(index + np.arange(len(error)) * bar_width, [b.get_height() for b in bar],\n                yerr=error, fmt='o', color='black', ecolor='gray', elinewidth=1, capsize=5)\n\n# Set labels and title\nax.set_xlabel('Models')\nax.set_ylabel('AUC')\nax.set_title('AUC Values for Different Models')\nax.set_xticks(index + bar_width)\nax.set_xticklabels(models)\nax.legend()\n\n# Adjust layout for better spacing\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data for two different conditions\ncondition_1 = np.array([22.5, 23.0, 22.8, 22.6, 22.4])\ncondition_2 = np.array([19.8, 19.7, 19.6, 19.5, 19.4])\n\n# Create a new figure with a larger size for better visibility\nfig, axes = plt.subplots(1, 2, figsize=(10.0, 5.0), sharey=True)\n\n# Plot for Condition 1\naxes[0].boxplot(condition_1, vert=False, patch_artist=True, boxprops=dict(facecolor='lightblue', edgecolor='black'),\n                whiskerprops=dict(color='black'), capprops=dict(color='black'), medianprops=dict(color='red'))\naxes[0].set_title('0.25 HIAR')\naxes[0].set_xlabel('PSNR (dB)')\naxes[0].set_ylabel('Condition')\n\n# Plot for Condition 2\naxes[1].boxplot(condition_2, vert=False, patch_artist=True, boxprops=dict(facecolor='lightgreen', edgecolor='black'),\n                whiskerprops=dict(color='black'), capprops=dict(color='black'), medianprops=dict(color='red'))\naxes[1].set_title('0.1 HIAR')\naxes[1].set_xlabel('PSNR (dB)')\n\n# Enhance the layout\nplt.tight_layout()\nplt.suptitle('Comparison of PSNR for Different Conditions', fontsize=14, fontweight='bold')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/contour_1.pdf", "response": "```python\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Create data for the plot\nx = np.linspace(-80, 80, 100)\ny = np.linspace(-80, 80, 100)\nX, Y = np.meshgrid(x, y)\nZ1 = np.sin(np.sqrt(X**2 + Y**2))\nZ2 = np.cos(np.sqrt(X**2 + Y**2))\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot the first dataset with a colormap and transparency\nc1 = ax.contourf(X, Y, Z1, levels=20, cmap='coolwarm', alpha=0.7)\n\n# Plot the second dataset with a different colormap and transparency\nc2 = ax.contourf(X, Y, Z2, levels=20, cmap='viridis', alpha=0.7)\n\n# Add a colorbar to the plot\ncbar = fig.colorbar(c1, ax=ax, orientation='vertical')\ncbar.set_label('Intensity')\n\n# Set labels and title\nax.set_xlabel('X-axis')\nax.set_ylabel('Y-axis')\nax.set_title('T-SNE plot for the output variable Y3')\n\n# Add a legend to differentiate between datasets\nax.legend([c1.collections[0], c2.collections[0]], ['Ground Truth', 'Generated'], loc='upper right')\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/contour_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create data\nx = np.linspace(0, 1, 100)\ny = np.linspace(0, 1, 100)\nX, Y = np.meshgrid(x, y)\nZ = np.sin(X * np.pi) * np.cos(Y * np.pi)\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the contourf with a colormap and adjust levels for clarity\ncontour = ax.contourf(X, Y, Z, levels=20, cmap='viridis', alpha=0.8)\n\n# Add a color bar to the plot\ncbar = fig.colorbar(contour, ax=ax)\ncbar.set_label('\u03bb(x, z)', rotation=270, labelpad=15)\n\n# Set labels and title\nax.set_xlabel('x1')\nax.set_ylabel('x2')\nax.set_title('Contour Plot of \u03bb(x, z)')\n\n# Add grid lines for better readability\nax.grid(True, linestyle='--', alpha=0.5)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/contour_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Let's assume we're plotting the relationship between two variables\n# For example, let's consider the relationship between age and blood pressure (in mmHg)\nage = np.array([50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160])\nfemale_bp = np.array([120, 125, 130, 135, 140, 145, 150, 155, 160, 165, 170, 175])\nmale_bp = np.array([130, 135, 140, 145, 150, 155, 160, 165, 170, 175, 180, 185])\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Plot the data with enhanced styles\nax.plot(age, female_bp, label='Female', color='blue', linestyle='-', linewidth=2, marker='o', markersize=5)\nax.plot(age, male_bp, label='Male', color='red', linestyle='--', linewidth=2, marker='s', markersize=5)\n\n# Set labels with more descriptive text\nax.set_xlabel('Age (years)', fontsize=12)\nax.set_ylabel('Systolic Blood Pressure (mmHg)', fontsize=12)\nax.set_title('Relationship Between Age and Blood Pressure', fontsize=14, fontweight='bold')\n\n# Add grid lines for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5, alpha=0.7)\n\n# Customize ticks\nax.set_xticks(np.arange(50, 170, 10))\nax.set_yticks(np.arange(120, 180, 5))\n\n# Add a legend with a shadow effect\nax.legend(loc='upper left', fontsize=10, shadow=True)\n\n# Annotate a specific point for emphasis\nax.annotate('Peak BP', xy=(150, 180), xytext=(140, 185),\n            arrowprops=dict(facecolor='black', shrink=0.05),\n            fontsize=10, color='darkred')\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/contour_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Generate data\nx = np.linspace(-4, 4, 100)\ny = np.sin(x) * np.exp(-0.1 * x**2)\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Plot the data with enhanced styling\nax.plot(x, y, color='royalblue', linewidth=2.5, linestyle='-', marker='o', markersize=5, label='Sine Wave')\n\n# Set labels with improved font size and style\nax.set_xlabel('X-axis', fontsize=12, fontweight='bold')\nax.set_ylabel('Y-axis', fontsize=12, fontweight='bold')\n\n# Add a title with enhanced font size and style\nax.set_title('Enhanced Sine Wave Plot', fontsize=14, fontweight='bold')\n\n# Customize grid lines\nax.grid(True, which='both', linestyle='--', linewidth=0.5, alpha=0.7)\n\n# Add a legend with a shadow effect\nax.legend(loc='upper right', fontsize=10, shadow=True)\n\n# Set axis limits for better focus\nax.set_xlim(-4, 4)\nax.set_ylim(-1.5, 1.5)\n\n# Add annotations to highlight key points\nax.annotate('Peak', xy=(0, 1), xytext=(-3, 1.2),\n            arrowprops=dict(facecolor='black', shrink=0.05),\n            fontsize=10, fontweight='bold')\n\nax.annotate('Trough', xy=(0, -1), xytext=(-3, -1.2),\n            arrowprops=dict(facecolor='black', shrink=0.05),\n            fontsize=10, fontweight='bold')\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/contour_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create data\ntheta = np.linspace(0, 2 * np.pi, 100)\nr = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n\n# Create a polar plot\nfig, ax = plt.subplots(subplot_kw={'projection': 'polar'}, figsize=(6.0, 6.0))\n\n# Plot concentric circles\nfor i, radius in enumerate(r):\n    ax.plot(theta, np.full_like(theta, radius), color=plt.cm.viridis(i / len(r)), linewidth=2)\n\n# Add grid lines\nax.grid(True, linestyle='--', alpha=0.7)\n\n# Set title and labels\nax.set_title(\"Concentric Circles\", fontsize=14, weight='bold')\nax.set_xlabel(\"Theta (radians)\", fontsize=12)\nax.set_ylabel(\"Radius\", fontsize=12)\n\n# Customize ticks\nax.set_xticks(np.arange(0, 2 * np.pi + np.pi / 4, np.pi / 4))\nax.set_yticks(r)\nax.set_xticklabels(['0', r'$\\frac{\\pi}{4}$', r'$\\frac{\\pi}{2}$', r'$\\frac{3\\pi}{4}$', \n                    '\u03c0', r'$\\frac{5\\pi}{4}$', r'$\\frac{3\\pi}{2}$', r'$\\frac{7\\pi}{4}$', '2\u03c0'])\nax.set_yticklabels(r)\n\n# Add annotations\nfor i, radius in enumerate(r):\n    ax.annotate(f'{radius}', xy=(0, radius), xytext=(0.1, radius + 0.1),\n                arrowprops=dict(facecolor='black', shrink=0.05),\n                fontsize=10, ha='center')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/density_1.pdf", "response": "```python\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Create data\nx = np.linspace(8, 15, 100)\ny = np.linspace(8, 15, 100)\nX, Y = np.meshgrid(x, y)\nZ = np.sin(X) * np.cos(Y)\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(10.0, 3.0))\n\n# Plot the heatmap with enhanced aesthetics\ncax = ax.imshow(Z, cmap='coolwarm', interpolation='nearest', aspect='auto')\n\n# Add color bar with a label\ncbar = fig.colorbar(cax, ax=ax, orientation='vertical')\ncbar.set_label('Iteration', rotation=270, labelpad=15)\n\n# Set labels and title\nax.set_xlabel('Time (s)')\nax.set_ylabel('Frequency (Hz)')\nax.set_title('Heatmap of Iteration Over Time and Frequency')\n\n# Customize ticks for better readability\nax.set_xticks(np.arange(len(x)))\nax.set_yticks(np.arange(len(y)))\nax.set_xticklabels([f'{i}' for i in x])\nax.set_yticklabels([f'{i}' for i in y])\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/density_2.pdf", "response": "```python\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Define the data for the plot\nx = np.linspace(0, 10, 200)\ny = np.sin(x) * np.exp(-0.1 * x)\n\n# Create a new figure with a specific size\nplt.figure(figsize=(8.0, 4.0))\n\n# Plot the data with enhanced styling\nplt.plot(x, y, color='darkred', linestyle='-', linewidth=2, marker='o', markersize=5, label='Decaying Sine Wave')\n\n# Add a fill between the curve and the x-axis for visual emphasis\nplt.fill_between(x, y, color='pink', alpha=0.3)\n\n# Set labels with improved font size and style\nplt.xlabel('Time (s)', fontsize=12, fontweight='bold')\nplt.ylabel('Amplitude', fontsize=12, fontweight='bold')\n\n# Add a title with enhanced font size and style\nplt.title('Decaying Sine Wave', fontsize=14, fontweight='bold')\n\n# Add a grid for better readability\nplt.grid(True, which='both', linestyle='--', linewidth=0.5, alpha=0.7)\n\n# Add a legend with a shadow effect\nplt.legend(loc='upper right', fontsize=10, shadow=True)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/density_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data for the plot\nx = np.linspace(-1.0, 1.0, 200)\ny = np.exp(-(x**2)) * np.cos(5 * np.pi * x)\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(8.0, 4.0))\n\n# Plot the data with enhanced aesthetics\nax.plot(x, y, color='teal', linewidth=2, linestyle='-', marker='o', markersize=4, label='Spearman Coefficient Distribution')\n\n# Fill the area under the curve for better visual appeal\nax.fill_between(x, y, color='lightcyan', alpha=0.5)\n\n# Set labels and title with improved font sizes\nax.set_xlabel('Spearman Coefficient', fontsize=12)\nax.set_ylabel('Density', fontsize=12)\nax.set_title('KDE Plot of Spearman Coefficient Distribution', fontsize=14, fontweight='bold')\n\n# Add grid lines for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5, alpha=0.7)\n\n# Customize ticks\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Add a legend\nax.legend(loc='upper right', fontsize=10)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/density_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data for the plot\nx = np.linspace(7, 15, 100)\ny1 = np.exp(-(x - 10)**2 / (2 * 2**2))\ny2 = np.exp(-(x - 12)**2 / (2 * 1.5**2))\ny3 = np.exp(-(x - 8)**2 / (2 * 1.5**2))\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(9.0, 6.0))\n\n# Plot the data with different styles and colors\nax.plot(x, y1, label='Random Bundle', color='royalblue', linestyle='-', linewidth=2, marker='o', markersize=4)\nax.plot(x, y2, label='Increase Price', color='pink', linestyle='--', linewidth=2, marker='s', markersize=4)\nax.plot(x, y3, label='Strategic (Ours)', color='lightgreen', linestyle='-.', linewidth=2, marker='^', markersize=4)\n\n# Add a vertical line to highlight a specific point of interest\nax.axvline(x=10, color='red', linestyle='--', linewidth=1.5, label='Reserved price p_i')\n\n# Set labels and title with improved font sizes\nax.set_xlabel('p', fontsize=12)\nax.set_ylabel('Shape Density', fontsize=12)\nax.set_title('Density of p', fontsize=14, fontweight='bold')\n\n# Add grid lines for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5, alpha=0.7)\n\n# Customize the legend\nax.legend(loc='upper right', fontsize=10)\n\n# Adjust the limits for better focus\nax.set_xlim(7, 15)\nax.set_ylim(0, 0.7)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/density_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Let's assume we're plotting a simple sine wave with added noise for demonstration\nx = np.linspace(0, 1, 100)\ny1 = np.sin(x) + np.random.normal(0, 0.1, 100)\ny2 = np.cos(x) + np.random.normal(0, 0.1, 100)\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(9.0, 6.0))\n\n# Plot the data with different styles\nax.plot(x, y1, label='Gucci', color='royalblue', linestyle='-', linewidth=2, marker='o', markersize=4)\nax.plot(x, y2, label='Chanel', color='seagreen', linestyle='--', linewidth=2, marker='s', markersize=4)\n\n# Set labels with more descriptive text\nax.set_xlabel('Density', fontsize=12)\nax.set_ylabel('Value', fontsize=12)\nax.set_title('Comparison of Two Variables', fontsize=14, fontweight='bold')\n\n# Add grid lines for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5, alpha=0.7)\n\n# Customize ticks\nax.set_xticks(np.arange(0, 1.1, 0.1))\nax.set_yticks(np.arange(-1.5, 1.6, 0.5))\n\n# Add a legend with a shadow effect\nax.legend(loc='upper right', fontsize=10, shadow=True)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data for demonstration\ncategories = ['Deep Ens.', 'Dropout', 'Laplace', 'SNP', 'HET-XL', 'Baseline', 'GP', 'Shallow Ens.', 'DUQ', 'Corr. Pred.']\nlog_probabilities = [-0.500, -0.394, -0.443, -0.531, -0.539, -0.541, -0.543, -0.552, -0.819, -0.590]\ndistributions = [0.001, 0.002, 0.003, 0.004, 0.005, 0.006, 0.007, 0.008, 0.009, 0.010]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Plot the data with enhanced styling\nbars = ax.bar(categories, log_probabilities, color='forestgreen', edgecolor='black', linewidth=1.2)\n\n# Add error bars to represent uncertainty\nax.errorbar(categories, log_probabilities, yerr=distributions, fmt='o', color='darkorange', ecolor='gray', elinewidth=1.2, capsize=4)\n\n# Set labels and title with improved font sizes\nax.set_xlabel('Categories', fontsize=12)\nax.set_ylabel('Log Probability', fontsize=12)\nax.set_title('Comparison of Log Probabilities', fontsize=14, fontweight='bold')\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.7)\n\n# Customize ticks\nax.set_xticklabels(categories, rotation=45, ha='right', fontsize=10)\nax.set_yticks(np.arange(-1.75, 0.0, 0.25))\nax.set_yticklabels([f'{y:.1f}' for y in ax.get_yticks()], fontsize=10)\n\n# Add annotations for each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.01, f'{yval:.3f}', ha='center', va='bottom', fontsize=10, color='black')\n\n# Add a legend\nax.legend(['Distributional', 'Deterministic'], loc='upper right', fontsize=10)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: IQ scores of different groups of experts\niq_scores = np.array([5.2, 5.8, 6.1, 6.4, 6.7, 7.0, 7.3, 7.5])\nnum_experts = np.arange(1, len(iq_scores) + 1)\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data with enhanced aesthetics\nax.bar(num_experts, iq_scores, color=['#4CAF50', '#2196F3', '#FFC107', '#FF5722', '#9C27B0', '#00BCD4', '#E91E63', '#607D8B'], edgecolor='black')\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.7)\n\n# Set labels and title with improved font sizes and styles\nax.set_xlabel('Number of Experts', fontsize=12, fontweight='bold')\nax.set_ylabel('IQ Human Normalized Score', fontsize=12, fontweight='bold')\nax.set_title('Expert dimension', fontsize=14, fontweight='bold')\n\n# Customize ticks\nax.set_xticks(num_experts)\nax.set_xticklabels(['1', '2', '3', '4', '5', '6', '7', '8'])\n\n# Add a legend\nax.legend(['Baseline', 'SoftMoE (unchanged)', 'SoftMoE (\u2202 NumExperts)'], loc='upper right', fontsize=10)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\nx = np.array([1, 2, 3])\ny1 = np.array([0.748, 0.762, 0.709])\ny2 = np.array([0.759, 0.748, 0.687])\ny3 = np.array([0.78, 0.78, 0.713])\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Plot the data with different styles and colors\nax.bar(x - 0.2, y1, width=0.2, color='skyblue', edgecolor='black', label='Baseline 1')\nax.bar(x, y2, width=0.2, color='salmon', edgecolor='black', label='Baseline 2')\nax.bar(x + 0.2, y3, width=0.2, color='lightgreen', edgecolor='black', label='FedMM')\n\n# Set labels and title\nax.set_xlabel('Hospital', fontsize=12)\nax.set_ylabel('Accuracy', fontsize=12)\nax.set_title('Accuracy by hospital and method', fontsize=14, fontweight='bold')\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.7)\n\n# Add a legend\nax.legend(title='Method', loc='upper right', fontsize=10)\n\n# Add annotations for each bar\nfor i, v in enumerate(y1):\n    ax.text(i - 0.2, v + 0.01, f'{v:.3f}', ha='center', va='bottom', fontsize=10)\nfor i, v in enumerate(y2):\n    ax.text(i, v + 0.01, f'{v:.3f}', ha='center', va='bottom', fontsize=10)\nfor i, v in enumerate(y3):\n    ax.text(i + 0.2, v + 0.01, f'{v:.3f}', ha='center', va='bottom', fontsize=10)\n\n# Set x-ticks and labels\nax.set_xticks(x)\nax.set_xticklabels(['Hospital 1', 'Hospital 2', 'Hospital 3'])\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\nx = np.arange(1, 6)\ny1 = np.array([10, 20, 30, 40, 50])\ny2 = np.array([5, 15, 25, 35, 45])\ny3 = np.array([10, 20, 30, 40, 50])\ny4 = np.array([5, 15, 25, 35, 45])\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Plot the data with different styles\nax.bar(x - 0.2, y1, width=0.2, color='orange', label='GPT-4 Buyer (valuation 40)')\nax.bar(x, y2, width=0.2, color='teal', label='Claude-2.1 Buyer (valuation 40)')\nax.bar(x + 0.2, y3, width=0.2, color='red', label='Claude-2 Buyer (valuation 40)')\nax.bar(x + 0.4, y4, width=0.2, color='blue', label='GPT-3.5 Buyer (valuation 40)')\n\n# Set labels and title\nax.set_xlabel('Sellers (valuation 60)', fontsize=12)\nax.set_ylabel('Value', fontsize=12)\nax.set_title('Comparison of Buyers', fontsize=14, fontweight='bold')\nax.set_xticks(x)\nax.set_xticklabels(['Seller 1', 'Seller 2', 'Seller 3', 'Seller 4', 'Seller 5'])\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.7)\n\n# Add a legend\nax.legend(loc='upper right', fontsize=10)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the bar chart\ncategories = ['[m]', '[\u0394R]', '[\u0394R^-1]', '[none]']\nvalues = [0.96, 0.86, 0.78, 0.80]\nerrors = [0.04, 0.02, 0.02, 0.02]\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Plot the bar chart with error bars\nbars = ax.bar(categories, values, yerr=errors, capsize=5, color='gray', edgecolor='black')\n\n# Add error bars with custom line styles and colors\nfor bar, error in zip(bars, errors):\n    ax.errorbar(\n        bar.get_x() + bar.get_width() / 2,\n        bar.get_height(),\n        yerr=error,\n        fmt='o',\n        ecolor='black',\n        elinewidth=2,\n        capsize=5,\n        capthick=2\n    )\n\n# Set labels and title with improved font sizes\nax.set_xlabel('Categories', fontsize=12)\nax.set_ylabel('Values', fontsize=12)\nax.set_title('Bar Chart with Error Bars', fontsize=14)\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=.5)\n\n# Annotate each bar with its value\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width() / 2, yval + 0.01, f'{yval:.1f}', ha='center', va='bottom', fontsize=10)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Let's assume we're plotting the accuracy of different models over time\nx = np.arange(1, 11)\ny1 = np.array([0.95, 0.97, 0.98, 0.99, 0.995, 0.998, 0.999, 0.9995, 0.9998, 0.9999])\ny2 = np.array([0.85, 0.88, 0.90, 0.92, 0.93, 0.94, 0.95, 0.96, 0.97, 0.98])\ny3 = np.array([0.75, 0.78, 0.80, 0.82, 0.83, 0.84, 0.85, 0.86, 0.87, 0.88])\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data with enhanced styles\nax.plot(x, y1, label='Model A', color='royalblue', linestyle='-', linewidth=2, marker='o', markersize=6)\nax.plot(x, y2, label='Model B', color='darkorange', linestyle='--', linewidth=2, marker='s', markersize=6)\nax.plot(x, y3, label='Model C', color='forestgreen', linestyle='-.', linewidth=2, marker='^', markersize=6)\n\n# Set labels and title with improved font sizes\nax.set_xlabel('Time (epochs)', fontsize=12)\nax.set_ylabel('Posterior Accuracy', fontsize=12)\nax.set_title('Comparison of Model Performance Over Time', fontsize=14, fontweight='bold')\n\n# Add grid lines for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5, alpha=0.7)\n\n# Customize ticks\nax.set_xticks(x)\nax.set_yticks(np.arange(0.7, 1.0, 0.1))\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Add a legend with a shadow effect\nax.legend(loc='upper left', fontsize=10, shadow=True)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Performance metrics for different models\nmodels = ['Model A', 'Model B', 'Model C']\naug_scores = [85, 90, 88]\nte_scores = [78, 82, 80]\nqual_scores = [92, 88, 90]\ndiff_stitch_scores = [80, 85, 83]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(10.0, 3.0))\n\n# Define colors and patterns for each bar\ncolors = ['#FFA500', '#ADD8E6', '#0000FF']\npatterns = ['/', '\\\\', '|']\n\n# Plot the bars with different styles\nbar_width = 0.2\nindex = np.arange(len(models))\n\n# Plot each dataset with different styles\nbars1 = ax.bar(index, aug_scores, bar_width, color=colors[0], hatch=patterns[0], label='Aug')\nbars2 = ax.bar(index + bar_width, te_scores, bar_width, color=colors[1], hatch=patterns[1], label='T-Estimation')\nbars3 = ax.bar(index + 2*bar_width, qual_scores, bar_width, color=colors[2], hatch=patterns[2], label='Qualification')\nbars4 = ax.bar(index + 3*bar_width, diff_stitch_scores, bar_width, color='darkblue', hatch='x', label='Diff-Stitch')\n\n# Add labels and title\nax.set_xlabel('Models', fontsize=12)\nax.set_ylabel('Performance', fontsize=12)\nax.set_title('Performance Metrics of Different Models', fontsize=14, fontweight='bold')\nax.set_xticks(index + bar_width)\nax.set_xticklabels(models)\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.7)\n\n# Add legend\nax.legend(loc='upper right', fontsize=10)\n\n# Annotate each bar with its value\ndef annotate_bars(bars):\n    for bar in bars:\n        yval = bar.get_height()\n        ax.text(bar.get_x() + bar.get_width()/2, yval + 1, f'{yval}', ha='center', va='bottom', fontsize=10)\n\nannotate_bars(bars1)\nannotate_bars(bars2)\nannotate_bars(bars3)\nannotate_bars(bars4)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_16.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Hypothesis and Metric values\nhypotheses = [\n    \"128/0.5/0.0001\", \"128/0.5/0.0001\", \"256/0.1/0.0001\", \"256/0.1/0.0001\",\n    \"256/0.3/0.0001\", \"256/0.3/0.0001\", \"256/0.5/0.0001\", \"256/0.5/0.0001\",\n    \"64/0.1/0.0001\", \"64/0.1/0.0001\", \"64/0.3/0.0001\", \"64/0.3/0.0001\",\n    \"64/0.5/0.0001\", \"64/0.5/0.0001\"\n]\nmetrics = [0.7, 0.8, 0.5, 0.6, 0.9, 0.75, 0.85, 0.95, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9]\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Define colors for the bars\ncolors = ['#FF9999', '#FFCC99', '#FFFF99', '#CCFF99', '#99FF99', '#99CCFF', \n          '#9999FF', '#CC99FF', '#FF99FF', '#FF99CC', '#FFCC99', '#FFFF99', \n          '#CCFF99', '#99FF99']\n\n# Plot the bar chart with enhanced aesthetics\nbars = ax.bar(hypotheses, metrics, color=colors, edgecolor='black', linewidth=1.2)\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.7)\n\n# Set labels and title with improved font sizes\nax.set_xlabel('Hypothesis', fontsize=12)\nax.set_ylabel('Metric', fontsize=12)\nax.set_title('FashionMNIST (NEURAL)', fontsize=14, fontweight='bold')\n\n# Rotate x-axis labels for better readability\nplt.xticks(rotation=45, ha='right')\n\n# Add annotations to each bar for clarity\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.01, round(yval, 2), ha='center', va='bottom', fontsize=10)\n\n# Adjust layout to prevent clipping of labels\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_17.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\ncategories = ['Japan', 'Brazil', 'India', 'Germany', 'United States']\nvalues1 = [28, 15, 10, 30, 25]\nvalues2 = [12, 18, 22, 27, 35]\n\n# Create a new figure with a larger size for better visibility\nfig, ax1 = plt.subplots(figsize=(6.0, 6.0))\n\n# Plot the first dataset with a different color and style\nbars1 = ax1.bar(categories, values1, color='purple', alpha=0.7, edgecolor='black', label='Higher Education Enrollment Rate')\n\n# Set labels and title for the first y-axis\nax1.set_xlabel('Country')\nax1.set_ylabel('Higher Education Enrollment Rate', color='purple')\nax1.set_title('Higher Education Enrollment Rate')\nax1.tick_params(axis='y', labelcolor='purple')\n\n# Create a second y-axis for the second dataset\nax2 = ax1.twinx()\n\n# Plot the second dataset with a different color and style\nbars2 = ax2.bar(categories, values2, color='green', alpha=0.7, edgecolor='black', label='Student-Teacher Ratio')\n\n# Set labels for the second y-axis\nax2.set_ylabel('Student-Teacher Ratio', color='green')\nax2.tick_params(axis='y', labelcolor='green')\n\n# Add a legend for both datasets\nfig.legend(loc='upper left', bbox_to_anchor=(0.1, 0.9), bbox_transform=ax1.transAxes)\n\n# Add grid lines for better readability\nax1.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.7)\nax2.yaxis.grid(False)\n\n# Add annotations for each bar\nfor bar in bars1:\n    yval = bar.get_height()\n    ax1.annotate(f'{yval}', xy=(bar.get_x() + bar.get_width() / 2, yval),\n                 xytext=(0, 3), textcoords=\"offset points\", ha='center', va='bottom', fontsize=8, color='black')\n\nfor bar in bars2:\n    yval = bar.get_height()\n    ax2.annotate(f'{yval}', xy=(bar.get_x() + bar.get_width() / 2, yval),\n                 xytext=(0, -10), textcoords=\"offset points\", ha='center', va='top', fontsize=8, color='black')\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_18.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the bar chart\ncategories = ['Africa', 'South America', 'North America', 'Asia', 'Europe']\nemissions = [1200, 1800, 5000, 10400, 3200]\nforest_coverage = [21, 34, 25, 38, 52]\nland_area = [10, 20, 30, 40, 50]\nenergy_consumption = [18, 28, 25, 34, 38]\nrenewable_energy_usage = [10, 20, 30, 40, 50]\n\n# Create a new figure with a larger size for better visibility\nfig, axes = plt.subplots(3, 1, figsize=(6.0, 9.0), sharex=True)\n\n# Plot 1: Carbon Dioxide Emissions\nbars_emissions = axes[0].bar(categories, emissions, color='lightblue', edgecolor='black')\naxes[0].set_title('Annual Carbon Dioxide Emissions')\naxes[0].set_ylabel('Millions of Metric Tons')\n\n# Add value labels on top of each bar\nfor bar in bars_emissions:\n    yval = bar.get_height()\n    axes[0].text(bar.get_x() + bar.get_width()/2, yval + 100, f'{yval}', ha='center', va='bottom')\n\n# Plot 2: Forest Coverage Rate\nbars_forest = axes[1].bar(categories, forest_coverage, color='lightgreen', edgecolor='black')\naxes[1].set_title('Forest Coverage Rate')\naxes[1].set_ylabel('% of Land Area')\n\n# Add value labels on top of each bar\nfor bar in bars_forest:\n    yval = bar.get_height()\n    axes[1].text(bar.get_x() + bar.get_width()/2, yval + 1, f'{yval}', ha='center', va='bottom')\n\n# Plot 3: Renewable Energy Usage\nbars_renewable = axes[2].bar(categories, renewable_energy_usage, color='orange', edgecolor='black')\naxes[2].set_title('Renewable Energy Usage')\naxes[2].set_xlabel('Region')\naxes[2].set_ylabel('% of Total Energy Consumption')\n\n# Add value labels on top of each bar\nfor bar in bars_renewable:\n    yval = bar.get_height()\n    axes[2].text(bar.get_x() + bar.get_width()/2, yval + 1, f'{yval}', ha='center', va='bottom')\n\n# Adjust layout and spacing between subplots\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_19.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\ncategories = ['Crime Rate', 'Happiness Index', 'Social Security Coverage', 'Political Participation']\nvalues = [50, 60, 70, 80]\ncolors = ['#800080', '#0000FF', '#FF4500', '#FFFF00']\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(10.0, 9.0))\n\n# Plot the data with enhanced aesthetics\nbars = ax.bar(categories, values, color=colors, edgecolor='black', linewidth=1.2)\n\n# Add value labels on top of each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 1, f'{yval}', ha='center', va='bottom', fontsize=10, fontweight='bold')\n\n# Set title and labels with improved styling\nax.set_title('Comparison of Various Metrics', fontsize=16, fontweight='bold')\nax.set_xlabel('Metrics', fontsize=14)\nax.set_ylabel('Percentage', fontsize=14)\n\n# Customize the x-axis ticks\nax.set_xticks(np.arange(len(categories)))\nax.set_xticklabels(categories, rotation=45, ha='right', fontsize=12)\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.7)\n\n# Add a legend to explain the colors\nax.legend(['Crime Rate', 'Happiness Index', 'Social Security Coverage', 'Political Participation'], loc='upper right', fontsize=12)\n\n# Adjust layout for better spacing\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Hypothetical judge scores for different judges and cases\ncases = ['GPT-3.5-Turbo', 'Claude 2.1', 'GPT-4-Turbo', 'Human']\njudges = ['Expert', 'Blind', 'Consultant', 'Debate', 'Interactive Consultancy', 'Interactive Debate']\n\n# Scores for each case and judge\nscores = np.array([\n    [85, 78, 90, 88, 92, 89],  # Expert\n    [70, 72, 68, 75, 73, 71],  # Blind\n    [80, 82, 84, 83, 85, 86],  # Consultant\n    [90, 88, 92, 91, 93, 94],  # Debate\n    [88, 90, 87, 89, 91, 92],  # Interactive Consultancy\n    [92, 91, 93, 94, 95, 96]   # Interactive Debate\n])\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Define colors for each judge\ncolors = ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd', '#8c564b']\n\n# Plot the bar chart with enhanced styling\nbars = []\nfor i, score in enumerate(scores):\n    bar = ax.bar(cases, score, color=colors[i], edgecolor='black', linewidth=1.2, label=judges[i])\n    bars.append(bar)\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.7)\n\n# Set labels and title with improved font sizes\nax.set_xlabel('Judge', fontsize=12)\nax.set_ylabel('Judge Accuracy (%)', fontsize=12)\nax.set_title('Comparison of Judge Accuracy Across Different Cases', fontsize=14, fontweight='bold')\n\n# Add a legend with a shadow effect\nax.legend(title='Judges', loc='upper right', frameon=True, shadow=True)\n\n# Add annotations to display the exact scores on top of each bar\nfor bar in bars:\n    for i, v in enumerate(bar):\n        ax.text(v.get_x() + v.get_width()/2, v.get_height() + 1, f'{v.get_height()}', ha='center', va='bottom', fontsize=10)\n\n# Adjust layout for better spacing\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_20.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data for demonstration\ncities = ['New York', 'London', 'Beijing', 'Tokyo']\nspring_avg_temp = [12, 14, 16, 18]\nautumn_avg_temp = [10, 13, 15, 17]\nspring_rainfall = [500, 600, 700, 800]\nautumn_rainfall = [400, 500, 600, 700]\nwind_speed = [3, 4, 5, 6]\nair_quality_index = [50, 60, 70, 80]\n\n# Create a new figure with a larger size for better visibility\nfig, axes = plt.subplots(2, 2, figsize=(10.0, 5.0), sharex=True, sharey=True)\n\n# Plot 1: Annual Average Temperature\ncolors = ['#FF9999', '#66B3FF', '#99FF99', '#FFCC99']\nbars1 = axes[0, 0].bar(cities, spring_avg_temp, color=colors, label='Spring')\nbars2 = axes[0, 0].bar(cities, autumn_avg_temp, bottom=spring_avg_temp, color=[c.replace('FF', 'AA') for c in colors], label='Autumn')\n\n# Add labels and title\naxes[0, 0].set_title('Annual Average Temperature')\naxes[0, 0].set_ylabel('Temperature (\u00b0C)')\naxes[0, 0].legend()\n\n# Add value annotations\nfor bar in bars1 + bars2:\n    yval = bar.get_height()\n    axes[0, 0].text(bar.get_x() + bar.get_width()/2, yval + 0.5, f'{yval}', ha='center', va='bottom')\n\n# Plot 2: Annual Rainfall\nbars1 = axes[0, 1].bar(cities, spring_rainfall, color=colors, label='Spring')\nbars2 = axes[0, 1].bar(cities, autumn_rainfall, bottom=spring_rainfall, color=[c.replace('FF', 'AA') for c in colors], label='Autumn')\n\n# Add labels and title\naxes[0, 1].set_title('Annual Rainfall')\naxes[0, 1].set_ylabel('Rainfall (mm)')\naxes[0, 1].legend()\n\n# Add value annotations\nfor bar in bars1 + bars2:\n    yval = bar.get_height()\n    axes[0, 1].text(bar.get_x() + bar.get_width()/2, yval + 50, f'{yval}', ha='center', va='bottom')\n\n# Plot 3: Wind Speed\ncolors = ['#FF9999', '#66B3FF', '#99FF99', '#FFCC99']\nbars = axes[1, 0].bar(cities, wind_speed, color=colors, label='Wind Speed')\n\n# Add labels and title\naxes[1, 0].set_title('Wind Speed')\naxes[1, 0].set_ylabel('Speed (m/s)')\naxes[1, 0].legend()\n\n# Add value annotations\nfor bar in bars:\n    yval = bar.get_height()\n    axes[1, 0].text(bar.get_x() + bar.get_width()/2, yval + 0.5, f'{yval}', ha='center', va='bottom')\n\n# Plot 4: Air Quality Index\ncolors = ['#FF9999', '#66B3FF', '#99FF99', '#FFCC99']\nbars = axes[1, 1].bar(cities, air_quality_index, color=colors, label='Air Quality Index')\n\n# Add labels and title\naxes[1, 1].set_title('Air Quality Index')\naxes[1, 1].set_ylabel('AQI')\naxes[1, 1].legend()\n\n# Add value annotations\nfor bar in bars:\n    yval = bar.get_height()\n    axes[1, 1].text(bar.get_x() + bar.get_width()/2, yval + 5, f'{yval}', ha='center', va='bottom')\n\n# Adjust layout for better spacing\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_21.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\ncountries = ['Germany', 'China', 'USA', 'India', 'Brazil']\nenergy_consumption = [2500, 3000, 1800, 1200, 900]\nrenewable_energy_usage = [1500, 1800, 1200, 800, 600]\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Define colors for the bars\ncolors = ['#4B0082', '#FFD700', '#FFA500', '#FF4500', '#008000']\n\n# Plot the data with enhanced styling\nbars = ax.bar(countries, energy_consumption, color=colors, edgecolor='black', linewidth=1.2, label='Total Energy Consumption by Country')\n\n# Add a second bar chart for renewable energy usage\nax.bar(countries, renewable_energy_usage, bottom=energy_consumption, color=[c for c in colors if c != '#008000'], edgecolor='black', linewidth=1.2, label='Renewable Energy Usage by Country')\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=.25)\n\n# Set labels and title with improved font sizes\nax.set_xlabel('Country', fontsize=12)\nax.set_ylabel('Energy Consumption (Petajoules)', fontsize=12)\nax.set_title('Total Energy Consumption and Renewable Energy Usage by Country', fontsize=14, fontweight='bold')\n\n# Add a legend with a shadow effect\nax.legend(loc='upper right', fontsize=10, shadow=True)\n\n# Annotate each bar with its value\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 100, f'{yval}', ha='center', va='bottom', fontsize=10)\n\n# Adjust layout for better spacing\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_22.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\ncategories = ['Refrigerator', 'Washing Machine', 'Dishwasher']\nvalues = [0.15, -0.10, 0.20]\nstd_devs = [0.05, 0.05, 0.05]\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Define colors and patterns for the bars\ncolors = ['#FF9999', '#66B3FF', '#99FF99']\npatterns = ['/', '\\\\', '|']\n\n# Plot the data with error bars\nbars = ax.bar(categories, values, yerr=std_devs, color=colors, edgecolor='black', hatch=patterns)\n\n# Add labels and title\nax.set_ylabel('Energy Efficiency Rating')\nax.set_title('Energy Efficiency Ratings by Appliance Model')\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.7)\n\n# Annotate each bar with its value\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.01, f'{yval:.2f}', ha='center', va='bottom', fontsize=10)\n\n# Customize the legend\nlegend_labels = ['Standard Model', 'Advanced Model', 'Optimal Model']\nax.legend(bars, legend_labels, loc='upper right', title='Model Type')\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_23.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Energy assessment scores for different scenarios\nscenarios = ['Wind', 'Solar', 'Hydro', 'Nuclear']\nefficiency_scores = [85, 90, 95, 88]\nmaintenance_costs = [20, 15, 18, 25]\noperational_impact = [30, 25, 20, 35]\nenvironmental_impact = [10, 12, 14, 11]\nsafety_standards = [5, 7, 6, 4]\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Define colors for each bar\ncolors = ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd']\n\n# Plot the bars with varying heights and colors\nbar_width = 0.8\nx = np.arange(len(scenarios))\nax.bar(x, efficiency_scores, width=bar_width, color=colors[0], label='Installation Efficiency')\nax.bar(x, maintenance_costs, bottom=efficiency_scores, width=bar_width, color=colors[1], label='Maintenance Costs')\nax.bar(x, operational_impact, bottom=[sum(v) for v in zip(efficiency_scores, maintenance_costs)], width=bar_width, color=colors[2], label='Operational Impact')\nax.bar(x, environmental_impact, bottom=[sum(v) for v in zip(efficiency_scores, maintenance_costs, operational_impact)], width=bar_width, color=colors[3], label='Environmental Impact')\nax.bar(x, safety_standards, bottom=[sum(v) for v in zip(efficiency_scores, maintenance_costs, operational_impact, environmental_impact)], width=bar_width, color=colors[4], label='Safety Standards')\n\n# Add labels and title\nax.set_xlabel('Energy Assessment Entity', fontsize=12)\nax.set_ylabel('Score', fontsize=12)\nax.set_title('Energy Assessment Scores', fontsize=14, fontweight='bold')\nax.set_xticks(x)\nax.set_xticklabels(scenarios, rotation=45, ha='right', fontsize=10)\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.7)\n\n# Add a legend\nax.legend(loc='upper left', fontsize=10)\n\n# Add annotations for clarity\nfor i, score in enumerate(efficiency_scores):\n    ax.annotate(f'{score}', (i, score), textcoords=\"offset points\", xytext=(0,10), ha='center', fontsize=10, color='black')\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_24.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\nregions = ['North America', 'Europe', 'Asia', 'South America', 'Africa', 'Australia', 'Central America', 'Middle East', 'Southeast Asia', 'Scandinavia']\nhigh_school_graduation = [85, 90, 75, 80, 70, 88, 72, 84, 78, 82]\nhigher_education_enrollment = [95, 92, 80, 85, 75, 90, 82, 88, 80, 85]\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Define colors for the bars\ncolors = ['#4CAF50', '#FFEB3B']\n\n# Plot the data with different colors and styles\nbars = ax.bar(regions, high_school_graduation, color=colors[0], label='High School Graduation')\nax.bar(regions, higher_education_enrollment, bottom=high_school_graduation, color=colors[1], label='Higher Education Enrollment')\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.7)\n\n# Set labels and title with improved font sizes\nax.set_xlabel('Region', fontsize=12)\nax.set_ylabel('Percentage (%)', fontsize=12)\nax.set_title('Educational Metrics by Region', fontsize=14, fontweight='bold')\n\n# Add a legend with a more descriptive title\nax.legend(title='Metrics', title_fontsize='12', fontsize='10')\n\n# Add annotations to each bar for clarity\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 1, f'{yval:.0f}%', ha='center', va='bottom', fontsize=10)\n\n# Adjust layout for better spacing\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_25.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the bar chart\ncategories = ['iPhone 13', 'Samsung S21', 'Google Pixel 6', 'OnePlus 9']\ntruthful_recall = [46.3, 57.9, 53.8, 19.4]\nmisleading_recall = [30.1, 34.0, 55.8, 20.0]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Define colors for the bars\ncolors = ['#1f77b4', '#ff7f0e']\n\n# Plot the data\nbar_width = 0.35\nindex = np.arange(len(categories))\nbars = ax.bar(index, truthful_recall, bar_width, label='Truthful Recall', color=colors[0], edgecolor='black')\nax.bar_label(bars, padding=3)\n\nbars = ax.bar(index + bar_width, misleading_recall, bar_width, label='Misleading Recall', color=colors[1], edgecolor='black')\nax.bar_label(bars, padding=3)\n\n# Set labels and title\nax.set_xlabel('Products', fontsize=12)\nax.set_ylabel('Recall Rates (%)', fontsize=12)\nax.set_title('Comparison of Recall Rates Across Products', fontsize=14, fontweight='bold')\nax.set_xticks(index + bar_width / 2)\nax.set_xticklabels(categories, fontsize=10)\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=.25)\n\n# Add a legend\nax.legend(loc='upper right', fontsize=10)\n\n# Adjust layout for better spacing\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_26.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the bar chart\ncategories = ['Support', 'Delivery', 'Product Quality', 'Returns', 'Pricing', 'Website Usability', 'Checkout Process']\nvalues = [15, 18, 20, 12, 17, 10, 8]\nerrors = [3, 2, 2, 1, 1, 1, 1]  # Error bars for each bar\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Define colors for the bars\ncolors = ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd', '#8c564b', '#e377c2']\n\n# Plot the bar chart with error bars\nbars = ax.bar(categories, values, yerr=errors, color=colors, edgecolor='black', capsize=5)\n\n# Add data labels on top of each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 1, f'{yval}%', ha='center', va='bottom', fontsize=10, fontweight='bold')\n\n# Set labels and title\nax.set_xlabel('Complaint Rates', fontsize=12)\nax.set_ylabel('Satisfaction Scores', fontsize=12)\nax.set_title('Customer Satisfaction by Complaint Rate', fontsize=14, fontweight='bold')\n\n# Customize the x-axis ticks\nax.set_xticks(np.arange(len(categories)))\nax.set_xticklabels(categories, rotation=45, ha='right', fontsize=10)\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.7)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_27.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the bar chart\ncategories = ['Support', 'Delivery', 'Product Quality', 'Returns', 'Pricing', 'Website Usability', 'Checkout Process']\nvalues = [75, 82, 78, 85, 88, 90, 8]\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Define colors for each bar\ncolors = ['#FFD700', '#FFA500', '#FF4500', '#FF6347', '#FFD700', '#FFA500', '#FF4500']\n\n# Plot the bar chart with enhanced aesthetics\nbars = ax.bar(categories, values, color=colors, edgecolor='black', linewidth=1.2)\n\n# Add value labels on top of each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 1, f'{yval}%', ha='center', va='bottom', fontsize=10, fontweight='bold')\n\n# Set title and labels with improved styling\nax.set_title('Customer Satisfaction by Category', fontsize=16, fontweight='bold')\nax.set_xlabel('Categories', fontsize=12)\nax.set_ylabel('Agree Rates (%)', fontsize=12)\n\n# Customize the x-axis ticks\nax.set_xticks(np.arange(len(categories)))\nax.set_xticklabels(categories, rotation=45, ha='right', fontsize=10)\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.7)\n\n# Add a legend to explain the colors\nax.legend(['Agree Rates'], loc='upper right', fontsize=10)\n\n# Adjust layout for better spacing\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_28.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Impact of various environmental factors on plant growth\nfactors = ['Watering Frequency', 'Plant Density', 'Plant Variety', 'CO2 Levels', 'Pesticides', 'Temperature', 'Fertilizer', 'Soil pH', 'Water Quality', 'Sunlight']\nimpacts = [\n    [0.05, 0.10, 0.15], \n    [0.03, 0.07, 0.12], \n    [0.04, 0.09, 0.14], \n    [0.06, 0.11, 0.16], \n    [0.02, 0.08, 0.13], \n    [0.07, 0.12, 0.17], \n    [0.05, 0.10, 0.15], \n    [0.04, 0.09, 0.14], \n    [0.03, 0.07, 0.12], \n    [0.06, 0.11, 0.16]\n]\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Define colors for each bar group\ncolors = ['#4CAF50', '#FFEB3B', '#F44336']\n\n# Plot the data with grouped bars\nbar_width = 0.2\nindex = np.arange(len(factors))\nfor i, impact in enumerate(impacts):\n    ax.bar(index + i * bar_width, impact, bar_width, label=f'Factor {i+1}', color=colors[i % len(colors)])\n\n# Set labels and title\nax.set_xlabel('Environmental Factors', fontsize=12)\nax.set_ylabel('Impact on Plant Growth (\u0394 to control)', fontsize=12)\nax.set_title('Impact of Environmental Factors on Plant Growth', fontsize=14, fontweight='bold')\nax.set_xticks(index + bar_width * (len(impacts) - 1) / 2)\nax.set_xticklabels(factors, rotation=45, ha='right')\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.7)\n\n# Add legend\nax.legend(title='Factors', loc='upper right', fontsize=10)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_29.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\ncategories = ['Traffic Volume', 'Public Transit', 'Accident Rate']\nnew_york = [250, 150, 200]\nlos_angeles = [230, 170, 180]\nchicago = [220, 160, 190]\n\n# Create a new figure with a larger size for better visibility\nfig, axes = plt.subplots(1, 3, figsize=(10.0, 4.0), sharey=True)\n\n# Plot for New York\naxes[0].bar(categories, new_york, color='green', edgecolor='black')\naxes[0].set_title('New York')\naxes[0].set_ylabel('Metric Values')\n\n# Plot for Los Angeles\naxes[1].bar(categories, los_angeles, color='blue', edgecolor='black')\naxes[1].set_title('Los Angeles')\n\n# Plot for Chicago\naxes[2].bar(categories, chicago, color='red', edgecolor='black')\naxes[2].set_title('Chicago')\n\n# Enhance the layout\nplt.tight_layout()\n\n# Add a global title\nplt.suptitle('Comparison of Metric Values Across Cities', fontsize=16, fontweight='bold')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create sample data\nx = np.linspace(0, 1, 100)\ny = np.sin(x * 2 * np.pi)\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(10.0, 10.0))\n\n# Plot the data with enhanced styling\nax.plot(x, y, color='darkorange', linewidth=2.5, linestyle='-', marker='o', markersize=5, label='Sine Wave')\n\n# Set labels with improved font size and style\nax.set_xlabel('X-axis', fontsize=14, fontweight='bold')\nax.set_ylabel('Y-axis', fontsize=14, fontweight='bold')\n\n# Add a title with enhanced font size and style\nax.set_title('FashionMNIST (Neural)', fontsize=16, fontweight='bold')\n\n# Customize grid lines\nax.grid(True, which='both', linestyle='--', linewidth=0.5, alpha=0.7)\n\n# Add a legend with improved location and font size\nax.legend(loc='upper right', fontsize=12)\n\n# Set x and y axis limits\nax.set_xlim(0, 1)\nax.set_ylim(-1.2, 1.2)\n\n# Add minor ticks for better granularity\nax.minorticks_on()\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_30.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Environmental impact scores across different cities\ncities = ['City A', 'City B', 'City C', 'City D']\nair_quality_scores = [-2.5, -3.0, -1.5, -4.0]\nwater_quality_scores = [0.5, 0.3, 0.7, 0.9]\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Define colors and patterns for the bars\ncolors = ['#FF6F61', '#88B04B', '#F7CAC9', '#AED6F1']\npatterns = ['/', '\\\\', '|', '-']\n\n# Plot the bar chart with enhanced styling\nbars = ax.bar(cities, air_quality_scores, color=colors, edgecolor='black', linewidth=1.2, alpha=0.8)\n\n# Add patterns to the bars\nfor bar, pattern in zip(bars, patterns):\n    bar.set_hatch(pattern)\n\n# Add error bars to represent variability\nerror_air = [0.5, 0.3, 0.2, 0.4]\nerror_water = [0.1, 0.1, 0.1, 0.1]\nax.errorbar(cities, air_quality_scores, yerr=error_air, fmt='o', color='black', ecolor='gray', elinewidth=1, capsize=5)\nax.errorbar(cities, water_quality_scores, yerr=error_water, fmt='s', color='green', ecolor='gray', elinewidth=1, capsize=5)\n\n# Set labels and title with improved font sizes\nax.set_xlabel('Cities', fontsize=12)\nax.set_ylabel('Environmental Impact Score', fontsize=12)\nax.set_title('Environmental Impact Scores Across Cities', fontsize=14, fontweight='bold')\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.7)\n\n# Add legend with a descriptive label\nax.legend(['Air Quality', 'Water Quality'], loc='upper right', fontsize=10)\n\n# Adjust layout for better spacing\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the bar chart\ncategories = ['Wererewolf', 'Seer', 'Troll', 'Hunter', 'Villager']\nvalues = [84.97, 102.67, 78.22, 85.17, 67.17]\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(10.0, 4.0))\n\n# Define colors for the bars\ncolors = ['#4CAF50', '#2196F3', '#FFC107', '#FF5722', '#9C27B0']\n\n# Plot the bar chart with enhanced aesthetics\nbars = ax.bar(categories, values, color=colors, edgecolor='black', linewidth=1.2)\n\n# Add value labels on top of each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 1, f'{yval:.2f}', ha='center', va='bottom', fontsize=10, fontweight='bold')\n\n# Set title and labels with improved styling\nax.set_title('Speak duration of roles', fontsize=14, fontweight='bold')\nax.set_xlabel('Roles', fontsize=12)\nax.set_ylabel('Duration (s)', fontsize=12)\n\n# Customize the x-axis ticks\nax.set_xticks(np.arange(len(categories)))\nax.set_xticklabels(categories, rotation=45, ha='right', fontsize=10)\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.7)\n\n# Add a legend to explain the data\nax.legend(['Duration'], loc='upper right', fontsize=10)\n\n# Adjust layout for better spacing\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Hypothetical accuracy rates for different sample sizes\nsample_sizes = [40, 81, 163, 245, 326, 408]\naccuracy_rates = [63.77, 64.17, 64.31, 64.98, 65.82, 65.78]\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(10.0, 7.0))\n\n# Plot the data with enhanced aesthetics\nbars = ax.bar(sample_sizes, accuracy_rates, color='skyblue', edgecolor='black', linewidth=1.2)\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='gray', alpha=0.7)\nax.xaxis.grid(False)\n\n# Set labels and title with improved font sizes and styles\nax.set_xlabel('Size of Data for Training and Validation', fontsize=12, fontweight='bold')\nax.set_ylabel('True+ info (%)', fontsize=12, fontweight='bold')\nax.set_title('Impact of Sample Size on Model Accuracy', fontsize=14, fontweight='bold')\n\n# Annotate each bar with its value\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.5, f'{yval:.2f}', ha='center', va='bottom', fontsize=10)\n\n# Customize ticks for better readability\nax.set_xticks(sample_sizes)\nax.set_xticklabels([f'{size} samples' for size in sample_sizes], rotation=45, ha='right')\n\n# Add a legend to explain the plot\nax.legend(['Accuracy'], loc='upper left', fontsize=10)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\nx = np.arange(1, 11)\ny1 = np.array([0.834, 0.832, 0.830, 0.828, 0.826, 0.824, 0.822, 0.820, 0.818, 0.816])\ny2 = np.array([0.04, 0.035, 0.03, 0.025, 0.02, 0.015, 0.01, 0.005, 0.002, 0.001])\n\n# Create a new figure with a larger size for better visibility\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10.0, 5.0), sharey=True)\n\n# Plot the first dataset\nbars1 = ax1.bar(x, y1, color='tab:red', edgecolor='black', label='all')\nax1.set_title('Out-of-domain accuracy')\nax1.set_xlabel('Models')\nax1.set_ylabel('Accuracy')\nax1.set_xticks(x)\nax1.set_xticklabels(['all', 'arg.causal', 'test.0', 'test.1', 'test.2', 'test.3', 'test.4', 'test.5', 'test.6', 'constant'], rotation=45)\nax1.legend()\n\n# Add error bars to the first plot\nfor bar in bars1:\n    yval = bar.get_height()\n    ax1.text(bar.get_x() + bar.get_width()/2, yval + 0.005, f'{yval:.3f}', ha='center', va='bottom')\n\n# Plot the second dataset\nbars2 = ax2.bar(x, y2, color='tab:blue', edgecolor='black', label='shift gap')\nax2.set_title('Shift gap')\nax2.set_xlabel('Models')\nax2.set_xticks(x)\nax2.set_xticklabels(['all', 'arg.causal', 'test.0', 'test.1', 'test.2', 'test.3', 'test.4', 'test.5', 'test.6', 'constant'], rotation=45)\nax2.legend()\n\n# Add error bars to the second plot\nfor bar in bars2:\n    yval = bar.get_height()\n    ax2.text(bar.get_x() + bar.get_width()/2, yval + 0.0005, f'{yval:.4f}', ha='center', va='bottom')\n\n# Adjust layout for better spacing\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\ncategories = ['Final Distribution with GPT-4-Turbo', 'Final Distribution with GPT-3.5-Turbo', \n              '0.125 Parameter-Valued Distribution', 'Initial Distribution', 'Best-of-Three']\nvalues = [0.7, 0.6, 0.5, 0.4, 0.3]\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Define colors for each bar\ncolors = ['#ADD8E6', '#90EE90', '#FFD700', '#FFA07A', '#FF6347']\n\n# Plot the bars with enhanced aesthetics\nbars = ax.bar(categories, values, color=colors, edgecolor='black', linewidth=1.2)\n\n# Add value labels on top of each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.01, f'{yval:.1f}', ha='center', va='bottom', fontsize=10, fontweight='bold')\n\n# Set title and labels with improved styling\nax.set_title('Mini Crosswords Performance', fontsize=16, fontweight='bold')\nax.set_xlabel('Categories', fontsize=12)\nax.set_ylabel('Objective Value', fontsize=12)\n\n# Customize the x-axis ticks\nax.set_xticks(np.arange(len(categories)))\nax.set_xticklabels(categories, rotation=45, ha='right', fontsize=10)\n\n# Add gridlines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.7)\n\n# Add a legend\nax.legend(['Performance'], loc='upper right', fontsize=10)\n\n# Add a reference line for comparison\nax.axhline(y=0.6, color='red', linestyle='--', linewidth=1.5, label='ToT (0.675)')\n\n# Adjust layout for better spacing\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Accuracy of different models\nmodels = ['BERT', 'RoBERTa', 'DistilBERT', 'XLNet', 'Electra', 'BART', 'DeBERTa', 'Albert', 'Llama2']\naccuracy = [58, 62, 55, 67, 59, 64, 56, 53, 50]\nweak_labels = [52, 58, 50, 60, 51, 59, 54, 48, 45]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(10.0, 3.0))\n\n# Define colors for the bars\ncolors = ['#FF9999', '#66B3FF', '#99FF99', '#FFCC99', '#FF99FF', '#FF9999', '#66B3FF', '#99FF99', '#FFCC99']\n\n# Plot the bars with error bars\nbars = ax.bar(models, accuracy, color=colors, yerr=[np.std(weak_labels), np.std(weak_labels), np.std(weak_labels), \n                                                np.std(weak_labels), np.std(weak_labels), np.std(weak_labels), \n                                                np.std(weak_labels), np.std(weak_labels), np.std(weak_labels)],\n              capsize=5, label='Ground-truth labels')\n\n# Add error bars for weak labels\nax.errorbar(models, weak_labels, yerr=np.std(weak_labels), fmt='o', color='blue', ecolor='gray', elinewidth=2, capsize=5, label='Weak labels')\n\n# Set labels and title\nax.set_xlabel('Models')\nax.set_ylabel('Accuracy (%)')\nax.set_title('Comparison of Model Accuracy')\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.5)\n\n# Add a legend\nax.legend()\n\n# Rotate x-axis labels for better readability\nplt.xticks(rotation=45)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the bar chart\ncategories = ['Computational Social Science and Social Media', 'Phonology, Morphology and Word Segmentation', \n              'Information Retrieval and Text Mining', 'Machine Learning for NLP', 'Information Extraction', \n              'Discourse and Pragmatics', 'Syntax: Tagging, Chunking and Parsing']\nvalues = [1.45, 1.35, 1.25, 1.15, 1.05, 0.95, 0.85]\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Define colors for the bars\ncolors = ['#ADD8E6', '#90EE90', '#FFD700', '#FFA07A', '#FF6347', '#FF4500', '#FF1493']\n\n# Plot the bar chart with enhanced aesthetics\nbars = ax.bar(categories, values, color=colors, edgecolor='black', linewidth=1.2)\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.7)\n\n# Set labels and title with improved font sizes and styles\nax.set_xlabel('Categories', fontsize=12, fontweight='bold')\nax.set_ylabel('A', fontsize=12, fontweight='bold')\nax.set_title('Your Chart Title Here', fontsize=14, fontweight='bold')\n\n# Add annotations to each bar for clarity\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.05, f'{yval:.2f}', ha='center', va='bottom', fontsize=10)\n\n# Rotate x-axis labels for better readability\nplt.xticks(rotation=45, ha='right')\n\n# Adjust layout to prevent clipping of labels\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorpoint_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Categories and their corresponding values\ncategories = ['Kashmir', 'Religion', 'Crime and Justice', 'CAA', 'Pulwama-Balakot', 'Politics']\nvalues = [0.06, 0.12, 0.14, 0.10, 0.08, 0.04]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Plot the data with enhancements\nax.bar(categories, values, color='royalblue', edgecolor='black', linewidth=1.2, alpha=0.9)\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='gray', alpha=0.7)\nax.xaxis.grid(False)\n\n# Set labels and title with improved font sizes\nax.set_xlabel('Categories', fontsize=12)\nax.set_ylabel('Shouting Fraction (Fraction of videos)', fontsize=12)\nax.set_title('Shouting Fraction by Category', fontsize=14, fontweight='bold')\n\n# Customize ticks\nax.set_xticklabels(categories, rotation=45, ha='right')\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Add a horizontal line at y=0.1 for reference\nax.axhline(y=0.1, color='gray', linestyle='--', linewidth=1.0, alpha=0.7)\n\n# Add annotations for each bar\nfor i, v in enumerate(values):\n    ax.text(i, v + 0.01, f'{v:.2f}', ha='center', va='bottom', fontsize=10, color='black')\n\n# Add a legend\nax.legend(['Dataset mean', 'Mean'], loc='upper right', fontsize=10)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/errorpoint_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data for three different variables\nx = np.array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\ny1 = np.array([15.49, 17.15, 16.03, 15.45, 14.24, 16.46, 15.00, 14.00, 13.00, 12.00, 11.00])\ny2 = np.array([19.38, 23.92, 24.64, 22.92, 20.29, 18.83, 17.50, 16.00, 14.50, 13.00, 12.00])\ny3 = np.array([20.00, 22.92, 24.64, 22.92, 20.29, 18.83, 17.50, 16.00, 14.50, 13.00, 12.00])\n\n# Create a new figure with a larger size for better visibility\nfig, axes = plt.subplots(2, 1, figsize=(6.0, 9.0), sharex=True)\n\n# Plot the first variable\naxes[0].scatter(x, y1, color='red', label='Variable 1', marker='o')\naxes[0].plot(x, y1, color='blue', linestyle='--', linewidth=2)\naxes[0].set_title('Variable, Symmetric Error', fontsize=14, fontweight='bold')\naxes[0].set_ylabel('Value', fontsize=12)\naxes[0].grid(True, which='both', linestyle='--', linewidth=0.5)\naxes[0].legend(loc='upper left')\n\n# Plot the second variable\naxes[1].scatter(x, y2, color='green', label='Variable 2', marker='s')\naxes[1].plot(x, y2, color='orange', linestyle='-', linewidth=2)\naxes[1].set_xlabel('Index', fontsize=12)\naxes[1].set_ylabel('Value', fontsize=12)\naxes[1].grid(True, which='both', linestyle='--', linewidth=0.5)\naxes[1].legend(loc='upper left')\n\n# Plot the third variable\naxes[1].scatter(x, y3, color='purple', label='Variable 3', marker='^')\naxes[1].plot(x, y3, color='black', linestyle=':', linewidth=2)\n\n# Add a legend to the second subplot\naxes[1].legend(loc='upper right')\n\n# Adjust layout for better spacing\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorpoint_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Incivility scores for different categories\ncategories = ['Politics', 'Religion', 'Kashmir', 'CAA', 'Pulwama-Balakot']\nincivility_scores = [0.17, 0.20, 0.22, 0.24, 0.26]\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Define colors and markers for each category\ncolors = ['#FF5733', '#33FF57', '#3357FF', '#F333FF', '#FFFF33']\nmarkers = ['o', 's', '^', 'D', 'p']\n\n# Plot the data with enhanced aesthetics\nfor i, (category, score) in enumerate(zip(categories, incivility_scores)):\n    ax.plot(score, i, marker=markers[i], color=colors[i], linestyle='-', linewidth=2, markersize=8, label=category)\n\n# Set labels and title with improved font sizes\nax.set_xlabel('Incivility (Fraction of Videos)', fontsize=12)\nax.set_ylabel('Category', fontsize=12)\nax.set_title('Incivility Scores by Category', fontsize=14, fontweight='bold')\n\n# Customize the y-axis ticks to match the categories\nax.set_yticks(range(len(categories)))\nax.set_yticklabels(categories)\n\n# Add grid lines for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5, alpha=0.7)\n\n# Add a legend with a shadow effect\nax.legend(title='Dataset mean', loc='upper right', fontsize=10, frameon=True, shadow=True)\n\n# Adjust layout for better spacing\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorpoint_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: M values and corresponding CC+Pantheon, CC+BAO+Pantheon, and other models\nM_values = np.array([-19.6, -19.5, -19.4, -19.3, -19.2, -19.1])\nCC_pantheon = np.array([-19.353, -19.394, -19.404, -19.314, -19.344, -19.374])\nCC_BAO_pantheon = np.array([-19.257, -19.220, -19.220, -19.220, -19.220, -19.220])\nCC_BAO = np.array([-19.190, -19.190, -19.190, -19.190, -19.190, -19.190])\nalpha_BAO = np.array([-0.078, -0.028, -0.028, -0.028, -0.028, -0.028])\nr_CMB = np.array([0.078, 0.028, 0.028, 0.028, 0.028, 0.028])\nd_Pantheon = np.array([0.078, 0.028, 0.028, 0.028, 0.028, 0.028])\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Plot the data with different styles\nax.errorbar(M_values, CC_pantheon, yerr=0.078, fmt='o', color='blue', ecolor='gray', elinewidth=2, capsize=5, label='CC+Pantheon')\nax.errorbar(M_values, CC_BAO_pantheon, yerr=0.028, fmt='s', color='green', ecolor='gray', elinewidth=2, capsize=5, label='CC+BAO+Pantheon')\nax.errorbar(M_values, CC_BAO, yerr=0.028, fmt='^', color='red', ecolor='gray', elinewidth=2, capsize=5, label='CC+BAO')\nax.errorbar(M_values, alpha_BAO, yerr=0.028, fmt='x', color='purple', ecolor='gray', elinewidth=2, capsize=5, label='\u03b1BAO')\nax.errorbar(M_values, r_CMB, yerr=0.028, fmt='D', color='orange', ecolor='gray', elinewidth=2, capsize=5, label='rCMB')\nax.errorbar(M_values, d_Pantheon, yerr=0.028, fmt='p', color='cyan', ecolor='gray', elinewidth=2, capsize=5, label='dPantheon')\n\n# Add a shaded region to highlight a specific area of interest\nax.axvspan(-19.4, -19.3, color='pink', alpha=0.3, label='Highlighted Region')\n\n# Set labels and title\nax.set_xlabel('M$_B$', fontsize=12)\nax.set_ylabel('Model Values', fontsize=12)\nax.set_title('Comparison of Models', fontsize=14, fontweight='bold')\n\n# Add a legend with a shadow effect\nax.legend(loc='upper right', fontsize=10, shadow=True)\n\n# Add grid lines for better readability\nax.grid(True, linestyle='--', alpha=0.7)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/errorpoint_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Number of speakers over different categories\ncategories = ['Education', 'Religion', 'Bollywood', 'Crime and Justice', 'Farmers Protest', 'Issue Politics']\nunique_speaker_counts = [5, 7, 3, 8, 4, 2]\nunique_shouter_counts = [10, 12, 9, 14, 16, 15]\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot the data with enhanced aesthetics\nax.plot(categories, unique_speaker_counts, marker='o', linestyle='-', color='b', label='Unique speaker count mean')\nax.plot(categories, unique_shouter_counts, marker='s', linestyle='--', color='r', label='Unique shouter count mean')\n\n# Set labels and title with improved font sizes\nax.set_xlabel('Category', fontsize=12)\nax.set_ylabel('Number of speakers', fontsize=12)\nax.set_title('Dataset unique shouter count mean', fontsize=14, fontweight='bold')\n\n# Add grid lines for better readability\nax.grid(True, linestyle='--', alpha=0.7)\n\n# Add a legend with a shadow effect\nax.legend(loc='upper left', fontsize=10, shadow=True)\n\n# Customize ticks for better readability\nax.set_xticks(range(len(categories)))\nax.set_xticklabels(categories, rotation=45, ha='right')\n\n# Add annotations for each data point\nfor i, (x, y) in enumerate(zip(categories, unique_speaker_counts)):\n    ax.annotate(f'{y}', (x, y), textcoords=\"offset points\", xytext=(0,10), ha='center', fontsize=9)\nfor i, (x, y) in enumerate(zip(categories, unique_shouter_counts)):\n    ax.annotate(f'{y}', (x, y), textcoords=\"offset points\", xytext=(0,-10), ha='center', fontsize=9)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/errorpoint_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Let's assume we're plotting the number of videos watched by different countries over time\ncountries = ['Kashmir', 'COVID/Lockdown', 'Sports', 'China']\nvideos_watched = [12, 15, 18, 20]\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data with enhanced styling\nax.bar(countries, videos_watched, color='royalblue', edgecolor='black', linewidth=1.2)\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.7)\n\n# Set labels and title with improved font sizes and styles\nax.set_xlabel('Country', fontsize=12, fontweight='bold')\nax.set_ylabel('Fraction of Videos (in millions)', fontsize=12, fontweight='bold')\nax.set_title('Female Face Presence (Fraction of Videos)', fontsize=14, fontweight='bold')\n\n# Customize ticks\nax.set_xticks(range(len(countries)))\nax.set_xticklabels(countries, rotation=45, ha='right', fontsize=10)\nax.set_yticks(np.arange(0, 25, 5))\nax.set_ylim(0, 25)\n\n# Add annotations to each bar for clarity\nfor i, v in enumerate(videos_watched):\n    ax.text(i, v + 0.5, f'{v}', ha='center', va='bottom', fontsize=10, fontweight='bold')\n\n# Add a legend to differentiate between data sets\nax.legend(['Dataset mean', 'Mean'], loc='upper right', fontsize=10)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/errorpoint_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data for demonstration\nx = np.arange(1, 6)\ny = np.array([0.5, 1.2, 2.8, 3.4, 4.1])\nyerr = np.array([0.1, 0.2, 0.3, 0.4, 0.5])\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(9.0, 6.0))\n\n# Plot the data with error bars\nax.errorbar(x, y, yerr=yerr, fmt='o', ecolor='gray', elinewidth=2, capsize=5,\n            color='blue', markerfacecolor='orange', markersize=8, linestyle='--')\n\n# Set labels and title with improved font sizes\nax.set_xlabel('X Axis Label', fontsize=12)\nax.set_ylabel('Y Axis Label', fontsize=12)\nax.set_title('Errorbar upper and lower limits', fontsize=14)\n\n# Customize the grid\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Add a legend\nax.legend(['Standard', 'Upper Limits', 'Lower Limits', 'Upper and Lower Limits', 'Random'], loc='upper right')\n\n# Adjust layout for better spacing\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorpoint_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data for plotting\nx = np.array([0.0, 0.5, 1.0, 1.5, 2.0, 2.5, 3.0, 3.5])\ny1 = np.array([100, 120, 130, 140, 150, 160, 170, 180])\ny2 = np.array([10, 20, 30, 40, 50, 60, 70, 80])\n\n# Create a new figure with a larger size for better visibility\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10.0, 4.0), sharey=True)\n\n# Plot the first dataset\nax1.plot(x, y1, marker='o', linestyle='-', color='purple', label='variable, symmetric error')\nax1.set_title('variable, symmetric error')\nax1.set_xlabel('X-axis')\nax1.set_ylabel('Y-axis')\nax1.grid(True)\nax1.legend()\n\n# Plot the second dataset\nax2.plot(x, y2, marker='s', linestyle='--', color='teal', label='variable, symmetric error')\nax2.set_title('variable, symmetric error')\nax2.set_xlabel('X-axis')\nax2.grid(True)\nax2.legend()\n\n# Adjust layout for better spacing\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorpoint_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Let's assume we're plotting the relationship between two variables\nx = np.array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\ny = np.array([1.829, 2.061, 2.237, 2.561, 2.889, 3.044, 3.234, 3.587, 3.704, 3.923, 4.158])\n\n# Create a new figure with a larger size for better visibility\nplt.figure(figsize=(10.0, 7.0))\n\n# Plot the data with error bars\nerror = np.array([0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1])  # Example error values\nplt.errorbar(x, y, yerr=error, fmt='o', ecolor='orange', capsize=5, color='teal', label='Data Points')\n\n# Add grid lines for better readability\nplt.grid(True, linestyle='--', alpha=0.7)\n\n# Set labels and title with improved font sizes\nplt.xlabel('Variable X', fontsize=12)\nplt.ylabel('Variable Y', fontsize=12)\nplt.title('Variable, Asymmetric Error', fontsize=14, fontweight='bold')\n\n# Add a legend\nplt.legend(loc='upper left', fontsize=10)\n\n# Customize the x and y axis limits\nplt.xlim(-1, 11)\nplt.ylim(15, 35)\n\n# Add a horizontal line at y=25 for reference\nplt.axhline(y=25, color='yellow', linestyle='-', linewidth=1.5, label='Reference Line')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorpoint_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: A hypothetical scenario of error bars representing some measurements\nx = np.array([0, 5, 10, 15, 20])\ny = np.array([-2.1, -2.6, -1.2, -1.0, -2.7])\ny_err = np.array([0.3, 0.4, 0.1, 0.2, 0.3])\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(10.0, 7.0))\n\n# Plot the data with error bars\nax.errorbar(x, y, yerr=y_err, fmt='o', color='purple', ecolor='gray', elinewidth=2, capsize=5, label='errorbar')\n\n# Set labels and title with improved font sizes\nax.set_xlabel('X-axis', fontsize=12)\nax.set_ylabel('Y-axis', fontsize=12)\nax.set_title('Variable, Asymmetric Error', fontsize=14)\n\n# Add grid lines for better readability\nax.grid(True, linestyle='--', alpha=0.7)\n\n# Customize the legend\nax.legend(loc='upper right', fontsize=10)\n\n# Set limits for x and y axes\nax.set_xlim(0, 25)\nax.set_ylim(-3, 2)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/graph_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the number of points and the radius of the circle\nnum_points = 10\nradius = 1\n\n# Create a circle using polar coordinates\ntheta = np.linspace(0, 2 * np.pi, num_points, endpoint=False)\nx = radius * np.cos(theta)\ny = radius * np.sin(theta)\n\n# Plot the circle\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\nax.plot(x, y, 'k-', linewidth=2, marker='o', markersize=8, label='Circle')\n\n# Add grid for better readability\nax.grid(True, linestyle='--', alpha=0.7)\n\n# Set equal aspect ratio to ensure the circle is not distorted\nax.set_aspect('equal', adjustable='box')\n\n# Add title and labels\nax.set_title('Circle with Equal Aspect Ratio', fontsize=14, fontweight='bold')\nax.set_xlabel('X-axis', fontsize=12)\nax.set_ylabel('Y-axis', fontsize=12)\n\n# Add a legend\nax.legend(loc='upper right', fontsize=10)\n\n# Add annotations for each point\nfor i, (xi, yi) in enumerate(zip(x, y)):\n    ax.annotate(f'Point {i+1}', (xi, yi), textcoords=\"offset points\", xytext=(0,10), ha='center', fontsize=10)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/graph_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Define the number of points and their positions\nnum_points = 20\nangles = np.linspace(0, 2 * np.pi, num_points, endpoint=False).tolist()\nangles += angles[:1]  # Closing the loop\n\n# Create a radial grid\nradii = np.linspace(0.5, 1.5, num_points)\nradii = np.concatenate((radii, radii[:1]))  # Closing the loop\n\n# Plot the data\nax.plot(angles, radii, marker='o', linestyle='-', color='pink', linewidth=2, markersize=8)\n\n# Set the title and labels\nax.set_title('Radial Network Diagram', fontsize=14, fontweight='bold')\nax.set_xlabel('Angle', fontsize=12)\nax.set_ylabel('Radius', fontsize=12)\n\n# Customize the grid\nax.grid(True, linestyle='--', alpha=0.7)\n\n# Customize the ticks\nax.set_xticks(angles[:-1])\nax.set_xticklabels(['Point 1', 'Point 2', 'Point 3', 'Point 4', 'Point 5', 'Point 6', 'Point 7', 'Point 8', 'Point 9', 'Point 10'])\n\n# Add a legend\nax.legend(['Network'], loc='upper right', fontsize=10)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/graph_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data for the plot\nx = np.linspace(0, 2 * np.pi, 100)\ny = np.sin(x)\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Plot the data with enhanced aesthetics\nax.plot(x, y, color='black', linewidth=2, linestyle='-', marker='o', markersize=5, label='Sine Wave')\n\n# Set labels with improved font size and style\nax.set_xlabel('X-axis', fontsize=14, fontweight='bold')\nax.set_ylabel('Y-axis', fontsize=14, fontweight='bold')\n\n# Add a title with a larger font size and style\nax.set_title('Sine Wave Visualization', fontsize=16, fontweight='bold')\n\n# Customize the grid\nax.grid(True, which='both', linestyle='--', linewidth=0.5, alpha=0.7)\n\n# Add a legend with a shadow effect\nax.legend(loc='upper right', fontsize=12, shadow=True)\n\n# Enhance the axis limits for better focus\nax.set_xlim([0, 2 * np.pi])\nax.set_ylim([-1.5, 1.5])\n\n# Add annotations to highlight key points\nax.annotate('Peak', xy=(np.pi/2, 1), xytext=(np.pi/2 + 0.5, 1.2),\n            arrowprops=dict(facecolor='black', shrink=0.05),\n            fontsize=12, fontweight='bold')\n\nax.annotate('Trough', xy=(3*np.pi/2, -1), xytext=(3*np.pi/2 + 0.5, -1.2),\n            arrowprops=dict(facecolor='black', shrink=0.05),\n            fontsize=12, fontweight='bold')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/graph_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data for the plot\nx = np.array([0, 1, 2, 3, 4])\ny = np.array([0, 1, 4, 9, 16])\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Plot the data with enhanced aesthetics\nax.plot(x, y, color='gray', linestyle='--', linewidth=2, marker='o', markersize=8, markerfacecolor='purple', label='Data Points')\n\n# Add grid lines for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Set labels with improved font size and style\nax.set_xlabel('X Axis Label', fontsize=12, fontweight='bold')\nax.set_ylabel('Y Axis Label', fontsize=12, fontweight='bold')\n\n# Add a title with enhanced font size and style\nax.set_title('Enhanced Line Plot', fontsize=14, fontweight='bold')\n\n# Customize the legend\nax.legend(loc='upper left', fontsize=10)\n\n# Enhance the layout\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/graph_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the number of points for the polygon\nn = 50\n\n# Create a regular pentagon\ntheta = np.linspace(0, 2 * np.pi, n, endpoint=False)\nx = np.cos(theta)\ny = np.sin(theta)\n\n# Plot the pentagon\nplt.figure(figsize=(10, 8))\nplt.plot(x, y, color='black', linewidth=2, marker='o', markersize=5, linestyle='-', label='Pentagon')\n\n# Add grid lines for better readability\nplt.grid(True, which='both', linestyle='--', linewidth=0.5, alpha=0.7)\n\n# Set equal aspect ratio to ensure the circle is not distorted\nplt.gca().set_aspect('equal', adjustable='box')\n\n# Add title and labels\nplt.title('Regular Pentagon', fontsize=16, fontweight='bold')\nplt.xlabel('X-axis', fontsize=12)\nplt.ylabel('Y-axis', fontsize=12)\n\n# Add a legend\nplt.legend(loc='upper right', fontsize=10)\n\n# Add annotations for clarity\nfor i in range(n):\n    plt.annotate(f'{i+1}', (x[i], y[i]), textcoords=\"offset points\", xytext=(0,10), ha='center', fontsize=9)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the heatmap\ndata = np.array([\n    [0.61, 0.74, 0.70, 0.70, 0.57],\n    [1.00, 0.69, 0.64, 0.67, 0.45],\n    [1.00, 0.77, 0.88, 0.62, 0.69],\n    [1.00, 0.72, 0.54, 0.50, 0.60]\n])\n\n# Define the labels for the x and y axes\nx_labels = ['CoreNLP', 'Stanza', 'Biaffine', 'StackPointer', 'TowerParse']\ny_labels = ['CoreNLP', 'Stanza', 'Biaffine', 'StackPointer', 'TowerParse']\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Plot the heatmap with a color map\ncax = ax.matshow(data, cmap='YlOrBr')\n\n# Add color bar\ncbar = fig.colorbar(cax)\n\n# Set the tick parameters for both axes\nax.set_xticks(np.arange(len(x_labels)))\nax.set_yticks(np.arange(len(y_labels)))\n\n# Rotate the x-axis labels for better readability\nplt.xticks(rotation=45)\n\n# Set the labels for the axes\nax.set_xlabel('X Axis Label')\nax.set_ylabel('Y Axis Label')\n\n# Set the title of the plot\nax.set_title('Heatmap Visualization')\n\n# Add grid lines for better separation of cells\nax.grid(True, linestyle='--', alpha=0.5)\n\n# Add annotations to each cell\nfor i in range(len(y_labels)):\n    for j in range(len(x_labels)):\n        ax.text(j, i, f'{data[i, j]:.2f}', ha='center', va='center', color='black')\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the heatmap\ndata = np.array([\n    [15.7, 28.1, 2.6, 0.5, 14.5],\n    [76.0, 2.1, 0.9, 4.1, 8.1],\n    [50.8, 12.2, 0.6, 6.2, 15.5],\n    [70.0, 11.2, 0.9, 7.8, 13.9],\n    [50.3, 12.0, 0.9, 7.0, 16.3]\n])\n\n# Define labels for rows and columns\nrows = ['Villager', 'Hunter', 'Witch', 'Seer', 'Wererewolf']\ncolumns = ['Wererewolf', 'Seer', 'Witch', 'Hunter', 'Abstain']\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Plot the heatmap\ncax = ax.matshow(data, cmap='coolwarm', interpolation='nearest')\n\n# Add color bar\ncbar = fig.colorbar(cax)\ncbar.set_label('Percentage', rotation=270, labelpad=15)\n\n# Set labels for rows and columns\nax.set_xticks(np.arange(len(columns)))\nax.set_yticks(np.arange(len(rows)))\nax.set_xticklabels(columns)\nax.set_yticklabels(rows)\n\n# Rotate the x-axis labels for better readability\nplt.xticks(rotation=45)\n\n# Add title and axis labels\nplt.title('Heatmap of Votes by Vottee and Character', fontsize=16, fontweight='bold')\nplt.xlabel('Character', fontsize=14)\nplt.ylabel('Vottee', fontsize=14)\n\n# Add annotations to each cell\nfor i in range(len(rows)):\n    for j in range(len(columns)):\n        text = ax.text(j, i, f'{data[i, j]:.1f}', ha=\"center\", va=\"center\", color=\"w\")\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create data for the heatmap\ndata = np.array([\n    [0.1, 0.2, 0.3, 0.4, 0.5],\n    [0.2, 0.3, 0.4, 0.5, 0.6],\n    [0.3, 0.4, 0.5, 0.6, 0.7],\n    [0.4, 0.5, 0.6, 0.7, 0.8],\n    [0.5, 0.6, 0.7, 0.8, 0.9]\n])\n\n# Define labels for the players\nplayers = ['D. Fox', 'T. Haliburton', 'M. Harkless', 'H. Barnes', 'C. Metu']\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the heatmap\ncax = ax.matshow(data, cmap='viridis')\n\n# Add color bar\ncbar = fig.colorbar(cax)\ncbar.set_label('Player Performance')\n\n# Set labels for the axes\nax.set_xticks(np.arange(len(players)))\nax.set_yticks(np.arange(len(players)))\n\n# Set labels for the ticks\nax.set_xticklabels([''] + players)\nax.set_yticklabels([''] + players)\n\n# Rotate x-axis labels for better readability\nplt.xticks(rotation=45)\n\n# Add title and axis labels\nplt.title('Player Performance Heatmap')\nplt.xlabel('Players')\nplt.ylabel('Players')\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the heatmap\ndata = np.array([\n    [10, 20, 30, 40],\n    [5, 15, 25, 35],\n    [10, 20, 30, 40],\n    [5, 15, 25, 35]\n])\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(6.0, 5.0))\n\n# Plot the heatmap\ncax = ax.matshow(data, cmap='viridis', fignum=1)\n\n# Add color bar\ncbar = fig.colorbar(cax)\ncbar.ax.set_ylabel('Intensity', rotation=270, labelpad=15)\n\n# Set labels and title\nax.set_xlabel('Predicted category')\nax.set_ylabel('Labeling function similarity')\nax.set_title('Labeling Function Similarity')\n\n# Set ticks and labels\nax.set_xticks(np.arange(len(data[0])))\nax.set_yticks(np.arange(len(data)))\nax.set_xticklabels(['0', '10', '20', '30'])\nax.set_yticklabels(['0', '10', '20', '30'])\n\n# Rotate x-axis labels for better readability\nplt.xticks(rotation=45)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the heatmap\ndata = np.array([\n    [10, 4, 8, 12],\n    [7, 3, 6, 28],\n    [5, 2, 4, 22]\n])\n\n# Define labels for the rows and columns\nrow_labels = ['LOH0', 'LOH1', 'LOH2']\ncol_labels = ['D\\'2', 'D\\'1', 'D\\'0', '=']\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Plot the heatmap\ncax = ax.matshow(data, cmap='viridis')\n\n# Add color bar\ncbar = fig.colorbar(cax)\n\n# Set labels for the axes\nax.set_xticks(np.arange(len(col_labels)))\nax.set_yticks(np.arange(len(row_labels)))\n\n# Rotate the x-axis labels for better readability\nax.set_xticklabels(col_labels, rotation=45)\nax.set_yticklabels(row_labels)\n\n# Add grid lines for better separation of cells\nax.grid(True, which='both', linestyle='-', linewidth=0.5, color='gray', alpha=0.5)\n\n# Add annotations to each cell\nfor i in range(len(row_labels)):\n    for j in range(len(col_labels)):\n        ax.text(j, i, f'{data[i, j]}%', ha='center', va='center', color='black')\n\n# Set title and axis labels\nax.set_title('Heatmap Representation', fontsize=14, fontweight='bold')\nax.set_xlabel('Columns', fontsize=12)\nax.set_ylabel('Rows', fontsize=12)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the heatmap\ncategories = ['Academia', 'Agriculture', 'Construction and Real Estate', 'Corporate', 'Entertainment', \n              'Finance', 'Government', 'Hospitality', 'Legal Services', 'Life Sciences']\nsubcategories = ['Subcat1', 'Subcat2', 'Subcat3', 'Subcat4', 'Subcat5', 'Subcat6', 'Subcat7', 'Subcat8', 'Subcat9', 'Subcat10']\ndata = np.array([\n    [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0],\n    [0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 0.9],\n    [0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 0.9, 0.8],\n    [0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 0.9, 0.8, 0.7],\n    [0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 0.9, 0.8, 0.7, 0.6],\n    [0.6, 0.7, 0.8, 0.9, 1.0, 0.9, 0.8, 0.7, 0.6, 0.5],\n    [0.7, 0.8, 0.9, 1.0, 0.9, 0.8, 0.7, 0.6, 0.5, 0.4],\n    [0.8, 0.9, 1.0, 0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3],\n    [0.9, 1.0, 0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2],\n    [1.0, 0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1]\n])\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(6.0, 10.0))\n\n# Plot the heatmap\ncax = ax.matshow(data, cmap='coolwarm', interpolation='nearest')\n\n# Add color bar\ncbar = fig.colorbar(cax)\ncbar.set_label('Intensity', rotation=270, labelpad=15)\n\n# Set labels and title\nax.set_xticks(np.arange(len(subcategories)))\nax.set_yticks(np.arange(len(categories)))\nax.set_xticklabels(subcategories, rotation=45, ha='right')\nax.set_yticklabels(categories)\nax.set_title('Heatmap of Categories and Subcategories')\n\n# Add grid lines for better readability\nax.grid(True, linestyle='--', alpha=0.5)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create data for the heatmap\ndata = np.array([\n    [1, 2, 3, 4, 5],\n    [2, 3, 4, 5, 6],\n    [3, 4, 5, 6, 7],\n    [4, 5, 6, 7, 8],\n    [5, 6, 7, 8, 9]\n])\n\n# Define the labels for the x and y axes\nx_labels = ['Layer 1', 'Layer 2', 'Layer 3', 'Layer 4', 'Layer 5']\ny_labels = ['To Layer 1', 'To Layer 2', 'To Layer 3', 'To Layer 4', 'To Layer 5']\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(6.0, 8.0))\n\n# Plot the heatmap with improved color scheme and annotations\ncax = ax.matshow(data, cmap='viridis', interpolation='nearest')\n\n# Add color bar\ncbar = fig.colorbar(cax)\ncbar.set_label('Perplexity', rotation=270, labelpad=15)\n\n# Set axis labels\nax.set_xlabel('To layer')\nax.set_ylabel('Start removing from layer')\n\n# Set tick labels\nax.set_xticks(np.arange(len(x_labels)))\nax.set_yticks(np.arange(len(y_labels)))\nax.set_xticklabels(x_labels)\nax.set_yticklabels(y_labels)\n\n# Rotate x-axis labels for better readability\nplt.xticks(rotation=45)\n\n# Add a title\nplt.title('Perplexity Heatmap', fontsize=14, fontweight='bold')\n\n# Add a text annotation\nplt.text(0.5, -0.15, 'mbert\u2192sat Perplexity=7.59', \n         transform=ax.transAxes, ha='center', va='center', fontsize=10, color='gray')\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_16.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the heatmap\ndata = np.array([\n    [659, 777, 247, 153, 953],\n    [807, 187, 643, 373, 819],\n    [109, 172, 759, 588, 327],\n    [459, 274, 637, 523, 660],\n    [784, 637, 523, 435, 405],\n    [935, 945, 739, 856, 243],\n    [729, 651, 797, 665, 891],\n    [863, 700, 644, 733, 760],\n    [292, 949, 365, 473, 429]\n])\n\n# Define labels for rows and columns\nrows = ['Product A Q1', 'Product A Q2', 'Product A Q3', 'Product B Q1', 'Product B Q2', 'Product B Q3']\ncolumns = ['Sales Rank 1', 'Sales Rank 2', 'Sales Rank 3', 'Sales Rank 4', 'Sales Rank 5']\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(4.0, 8.0))\n\n# Plot the heatmap\ncax = ax.matshow(data, cmap='coolwarm', interpolation='nearest')\n\n# Add color bar\ncbar = fig.colorbar(cax)\ncbar.set_label('Sales Performance')\n\n# Set labels for rows and columns\nax.set_xticks(np.arange(len(columns)))\nax.set_yticks(np.arange(len(rows)))\nax.set_xticklabels(columns, rotation=45, ha='right')\nax.set_yticklabels(rows)\n\n# Add grid lines\nax.grid(True, linestyle='--', alpha=0.5)\n\n# Add annotations to each cell\nfor i in range(len(rows)):\n    for j in range(len(columns)):\n        ax.text(j, i, data[i, j], ha='center', va='center', color='black')\n\n# Set title\nax.set_title('Sales Performance Heatmap')\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_17.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create data for the heatmap\ndata = np.array([\n    [0.2, 0.3, 0.4, 0.5, 0.6],\n    [0.3, 0.4, 0.5, 0.6, 0.7],\n    [0.4, 0.5, 0.6, 0.7, 0.8],\n    [0.5, 0.6, 0.7, 0.8, 0.9],\n    [0.6, 0.7, 0.8, 0.9, 1.0]\n])\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(10.0, 3.0))\n\n# Plot the heatmap\ncax = ax.imshow(data, cmap='viridis', interpolation='nearest')\n\n# Add color bar\ncbar = fig.colorbar(cax)\ncbar.set_label('Values', rotation=270, labelpad=15)\n\n# Set labels and title\nax.set_title('Heatmap of Values')\nax.set_xlabel('X-axis')\nax.set_ylabel('Y-axis')\n\n# Add grid lines\nax.grid(False)\n\n# Add annotations\nfor i in range(data.shape[0]):\n    for j in range(data.shape[1]):\n        ax.text(j, i, f'{data[i, j]:.1f}', ha='center', va='center', color='black')\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_18.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the heatmap\ndata = np.array([\n    [0.55, 0.72, 0.60, 0.54],\n    [0.42, 0.65, 0.44, 0.89],\n    [0.96, 0.38, 0.79, 0.53],\n    [0.57, 0.93, 0.07, 0.09]\n])\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(7.0, 6.0))\n\n# Plot the heatmap with a color map and annotations\ncax = ax.matshow(data, cmap='YlOrBr', fignum=1)\nfor (i, j), z in np.ndenumerate(data):\n    ax.text(j, i, '{:0.2f}'.format(z), ha='center', va='center', fontsize=10)\n\n# Add a color bar to the plot\ncbar = fig.colorbar(cax)\ncbar.set_label('Correlation Coefficient')\n\n# Set labels for the axes\nax.set_xticks(np.arange(len(data[0])))\nax.set_yticks(np.arange(len(data)))\nax.set_xticklabels(['96', '192', '336', '720'])\nax.set_yticklabels(['96', '192', '336', '720'])\n\n# Add a title to the plot\nplt.title('Weather', fontsize=14, fontweight='bold')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_19.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the heatmap\ndata = np.array([\n    [15.7, 28.1, 2.6, 14.5, 28.6, 10.5],\n    [76.0, 2.1, 0.5, 4.1, 8.1, 9.2],\n    [50.8, 12.3, 0.9, 6.2, 15.5, 13.9],\n    [11.2, 0.6, 7.8, 17.3, 16.3, 0.9],\n    [50.3, 12.0, 0.9, 7.0, 13.4, 0.6]\n])\n\n# Define labels for rows and columns\nrows = ['Wererewolf', 'Seer', 'Witch', 'Hunter', 'Abstain']\ncolumns = ['Villager', 'Hunter', 'Witch', 'Seer', 'Wererewolf', 'Abstain']\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(20.0, 8.0))\n\n# Plot the heatmap\ncax = ax.matshow(data, cmap='coolwarm', interpolation='nearest')\n\n# Add color bar\ncbar = fig.colorbar(cax)\ncbar.set_label('Percentage', rotation=270, labelpad=15)\n\n# Set labels for rows and columns\nax.set_xticks(np.arange(len(columns)))\nax.set_yticks(np.arange(len(rows)))\nax.set_xticklabels(columns)\nax.set_yticklabels(rows)\n\n# Rotate the column labels for better readability\nplt.xticks(rotation=45)\n\n# Add title and axis labels\nplt.title('Role voting in the Werewolf game', fontsize=16, fontweight='bold')\nplt.xlabel('Roles', fontsize=14)\nplt.ylabel('Players', fontsize=14)\n\n# Add annotations to each cell\nfor i in range(len(rows)):\n    for j in range(len(columns)):\n        text = ax.text(j, i, f'{data[i, j]:.1f}%', ha=\"center\", va=\"center\", color=\"w\")\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\ncategories = ['Qwen', 'ChatGLM3', 'Baichuan2', 'LLaMA-2', 'Xverse']\nresponses = [\n    [169, 547, 662, 271, 145],\n    [115, 439, 753, 239, 1355],\n    [219, 585, 557, 259, 1269],\n    [67, 941, 708, 432, 732],\n    [177, 554, 661, 235, 1246]\n]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(9.0, 6.0))\n\n# Define colors for each category\ncolors = ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd']\n\n# Plot the data with a bar chart\nbars = []\nfor i, (category, response) in enumerate(zip(categories, responses)):\n    bar = ax.barh(category, response, color=colors[i], label=category)\n    bars.append(bar)\n\n# Add a legend\nax.legend(title='Response Type')\n\n# Set labels and title\nax.set_xlabel('Response Action Category')\nax.set_ylabel('Question Type: All three types of questions')\nax.set_title('Question Type: All three types of questions')\n\n# Add grid lines for better readability\nax.grid(axis='x', linestyle='--', alpha=0.7)\n\n# Add annotations to each bar\nfor bar in bars:\n    for index, value in enumerate(bar):\n        ax.text(value + 1, index, str(value), va='center', ha='left')\n\n# Add a color bar to indicate the scale\nsm = plt.cm.ScalarMappable(cmap='viridis', norm=plt.Normalize(vmin=0, vmax=1200))\nsm._A = []\ncbar = fig.colorbar(sm)\ncbar.set_label('Scale')\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_20.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define data for the bar chart\ncategories = ['angry', 'sad', 'disgust', 'contempt', 'fear', 'neutral', 'surprise', 'happy']\nvalues = [0.10, 0.00, 0.30, 0.00, 0.00, 0.50, 0.00, 0.10]\nadjusted_values = [0.12, 0.00, 0.44, 0.00, 0.00, 0.44, 0.00, 0.00]\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Define colors for the bars\ncolors = ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd', '#8c564b', '#e377c2', '#7f7f7f']\n\n# Plot the original and adjusted data\nbars1 = ax.bar(categories, values, color=colors, label='Original')\nbars2 = ax.bar(categories, adjusted_values, bottom=values, color=[c for c in colors if c != '#ff7f0e'], label='Adjusted')\n\n# Add labels and title\nax.set_xlabel('Emotion', fontsize=12)\nax.set_ylabel('Intensity', fontsize=12)\nax.set_title('Emotion Intensity Comparison', fontsize=14, fontweight='bold')\nax.set_ylim(0, 0.6)\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.5)\n\n# Add annotations for clarity\nfor bar in bars1 + bars2:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.01, f'{yval:.2f}', ha='center', va='bottom', fontsize=10)\n\n# Add legend\nax.legend(loc='upper right', fontsize=10)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_21.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data: Percentage of votes for each class by each voter\nvoters = ['Villager', 'Hunter', 'Witch', 'Seer', 'Werewolf']\nclasses = ['Villager', 'Hunter', 'Witch', 'Seer', 'Abstain']\n\n# Create a matrix of vote percentages\nvote_percentages = np.array([\n    [15.7, 28.1, 2.6, 0.9, 10.5],\n    [76.0, 2.1, 0.5, 4.1, 9.2],\n    [50.8, 12.3, 0.9, 6.2, 14.3],\n    [49.2, 11.2, 0.6, 7.8, 13.9],\n    [50.3, 12.0, 0.9, 7.0, 16.3]\n])\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Plot the heatmap\ncax = ax.matshow(vote_percentages, cmap='Blues', interpolation='nearest')\n\n# Add color bar\ncbar = fig.colorbar(cax)\ncbar.set_label('Percentage of Votes (%)')\n\n# Set labels and title\nax.set_xticks(np.arange(len(classes)))\nax.set_yticks(np.arange(len(voters)))\nax.set_xticklabels(classes, rotation=45)\nax.set_yticklabels(voters)\nax.set_title('Vote Distribution by Class and Voter')\n\n# Annotate the heatmap with the vote percentages\nfor i in range(len(voters)):\n    for j in range(len(classes)):\n        ax.text(j, i, f'{vote_percentages[i, j]:.1f}%', ha='center', va='center', color='black')\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_22.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the first subplot\ncategories = ['Baseline', 'Reversed Order', 'Reversed IDs']\nvalues = [1.5, 2.5, 3.5]\ncolors = ['#FF9999', '#66B3FF', '#99FF99']\n\n# Data for the second subplot\ngpt_categories = ['Baseline', 'Reversed Order', 'Reversed IDs']\ngpt_values = [[1.7, 1.1, 1.5], [1.3, 1.9, 1.8], [1.2, 1.4, 1.6]]\ngpt_colors = ['#FF9999', '#66B3FF', '#99FF99']\n\n# Create a new figure with two subplots side by side\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(6.0, 3.0), sharey=True)\n\n# Plot the first subplot\nbars1 = ax1.bar(categories, values, color=colors)\nax1.set_title('LLaMA')\nax1.set_xlabel('Rank')\nax1.set_ylabel('Score')\n\n# Add value labels on top of each bar\nfor bar in bars1:\n    yval = bar.get_height()\n    ax1.text(bar.get_x() + bar.get_width()/2, yval + 0.05, round(yval, 1), ha='center', va='bottom')\n\n# Plot the second subplot\nbars2 = ax2.bar(gpt_categories, gpt_values, color=gpt_colors)\nax2.set_title('GPT')\nax2.set_xlabel('Rank')\n\n# Add value labels on top of each bar\nfor i, group in enumerate(gpt_values):\n    for j, value in enumerate(group):\n        ax2.text(j, value + 0.05, round(value, 1), ha='center', va='bottom')\n\n# Adjust layout and display the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_23.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the plot\nx = np.arange(1, 11)\ny = np.array([0.1, 0.08, 0.3, 0.6, 0.0, 0.5, 0.07, 0.1, 0.0, 0.1])\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot the data with enhanced aesthetics\nbars = ax.bar(x, y, color=plt.cm.viridis(y), edgecolor='black', linewidth=0.7)\n\n# Add value labels on top of each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.01, f'{yval:.2f}', ha='center', va='bottom', fontsize=10, fontweight='bold')\n\n# Set labels and title with improved formatting\nax.set_xlabel('Data Points', fontsize=12, fontweight='bold')\nax.set_ylabel('Values', fontsize=12, fontweight='bold')\nax.set_title('Enhanced Bar Chart with Value Labels', fontsize=14, fontweight='bold')\n\n# Customize the x-axis ticks\nax.set_xticks(x)\nax.set_xticklabels(['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J'], fontsize=10)\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.7)\n\n# Adjust layout to prevent clipping of labels\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_24.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the bar chart\ncategories = ['cucumber', 'tomato', 'lettuce', 'asparagus', 'potato', 'wheat', 'barley']\nyears = [2015, 2016, 2017, 2018, 2019, 2020]\nharvest = [\n    [0.8, 2.4, 2.5, 3.9, 0.0],\n    [2.4, 0.0, 4.0, 1.0, 2.7, 0.0],\n    [1.1, 2.4, 0.8, 4.3, 1.9, 0.0],\n    [0.6, 0.0, 0.3, 3.1, 0.0, 0.0],\n    [0.7, 1.7, 0.6, 2.6, 0.0, 0.0],\n    [1.3, 1.2, 0.0, 0.0, 0.0, 0.0],\n    [0.1, 2.0, 0.0, 0.0, 0.0, 0.0]\n]\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Define colors for each category\ncolors = ['#e0f3db', '#ccebc5', '#a8ddb5', '#7bccc4', '#4eb3d3', '#2b8cbe', '#08519c']\n\n# Plot the data\nfor i, (category, color) in enumerate(zip(categories, colors)):\n    ax.bar(years, harvest[i], label=category, color=color, alpha=0.8, edgecolor='black')\n\n# Set labels and title\nax.set_xlabel('Year', fontsize=12)\nax.set_ylabel('Harvest [t/year]', fontsize=12)\nax.set_title('Harvest by Year and Category', fontsize=14, fontweight='bold')\nax.set_xticks(years)\nax.set_xticklabels(years, rotation=45)\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.7)\n\n# Add a legend\nax.legend(title='Category', loc='upper right', fontsize=10)\n\n# Add annotations for each bar\nfor i, category in enumerate(categories):\n    for j, value in enumerate(harvest[i]):\n        ax.text(j + 1, value + 0.1, f'{value} t', ha='center', va='bottom', fontsize=9)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_25.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the bar chart\ncategories = ['cucumber', 'tomato', 'lettuce', 'asparagus', 'potato', 'barley']\nharvest = [0.8, 2.4, 1.1, 0.6, 0.7, 0.1]\nweekly_sales = [6, 5, 3, 2, 1, 0.5]\n\n# Create a new figure with a specific size\nfig, ax1 = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the first y-axis (weekly sales)\ncolor = 'tab:red'\nax1.set_xlabel('Product')\nax1.set_ylabel('Weekly Sold Copies', color=color)\nax1.bar(categories, weekly_sales, color=color, alpha=0.7, label='Weekly Sales')\nax1.tick_params(axis='y', labelcolor=color)\n\n# Create a second y-axis for the second dataset\nax2 = ax1.twinx()\ncolor = 'tab:blue'\nax2.set_ylabel('Harvest [t/year]', color=color)\nax2.plot(categories, harvest, color=color, marker='o', linestyle='--', linewidth=2, markersize=8, label='Harvest')\nax2.tick_params(axis='y', labelcolor=color)\n\n# Add a legend for both axes\nfig.tight_layout()\nfig.legend(loc='upper left', bbox_to_anchor=(0.1, 0.9), fontsize='small')\n\n# Set title and labels\nplt.title('Harvest and Weekly Sales of Various Products', fontsize=14, fontweight='bold')\nax1.set_xticks(np.arange(len(categories)))\nax1.set_xticklabels(categories, rotation=45, ha='right')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_26.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a new figure with a larger size for better visibility\nfig, axes = plt.subplots(4, 3, figsize=(9.0, 6.0), constrained_layout=True)\n\n# Define a color map for the plots\ncmap = plt.cm.viridis\n\n# Generate data for each subplot\ndata = [\n    np.random.rand(10, 10),\n    np.random.rand(10, 10),\n    np.random.rand(10, 10),\n    np.random.rand(10, 10),\n    np.random.rand(10, 10),\n    np.random.rand(10, 10),\n    np.random.rand(10, 10),\n    np.random.rand(10, 10),\n    np.random.rand(10, 10),\n    np.random.rand(10, 10),\n    np.random.rand(10, 10),\n    np.random.rand(10, 10),\n    np.random.rand(10, 10),\n    np.random.rand(10, 10),\n    np.random.rand(10, 10),\n    np.random.rand(10, 10)\n]\n\n# Plot each dataset\nfor ax, d in zip(axes.flatten(), data):\n    im = ax.imshow(d, cmap=cmap, interpolation='nearest')\n    ax.set_title('Title', fontsize=8)\n    ax.axis('off')\n\n# Add a color bar to the last subplot\ncbar_ax = fig.add_axes([0.92, 0.15, 0.02, 0.7])\nfig.colorbar(im, cax=cbar_ax)\n\n# Set a title for the entire figure\nfig.suptitle('Heatmaps of Various Datasets', fontsize=14, fontweight='bold')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_27.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create data for the bar chart\ncategories = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J']\nvalues = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Plot the bar chart with enhanced aesthetics\nbars = ax.bar(categories, values, color=plt.cm.viridis(np.linspace(0, 1, len(categories))))\n\n# Add value labels on top of each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.1, f'{yval}', ha='center', va='bottom')\n\n# Set title and labels with improved font sizes\nax.set_title('default: no edges', fontsize=14, fontweight='bold')\nax.set_xlabel('Categories', fontsize=12)\nax.set_ylabel('Values', fontsize=12)\n\n# Customize the x-axis ticks\nax.set_xticks(range(len(categories)))\nax.set_xticklabels(categories, rotation=45, ha='right')\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.7)\n\n# Add a legend to explain the color scheme\nax.legend(['Data'], loc='upper right')\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_28.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\nvendors = ['Vendor A', 'Vendor B', 'Vendor C', 'Vendor D', 'Vendor E', 'Vendor F', 'Vendor G']\nproducts = ['apples', 'bananas', 'cherries', 'dates', 'elderberries', 'figs', 'grapes']\nsales = [\n    [1.5, 2.2, 1.8, 3.2, 0.5],  # apples\n    [2.8, 0.5, 3.6, 1.8, 0.7],  # bananas\n    [1.0, 2.1, 0.9, 4.0, 1.6],  # cherries\n    [0.7, 0.6, 0.4, 0.5, 2.3],  # dates\n    [0.9, 1.6, 1.5, 3.4, 2.0],  # elderberries\n    [1.2, 1.3, 0.5, 1.6, 3.1],  # figs\n    [0.3, 1.9, 0.6, 0.8, 1.8]   # grapes\n]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Define colors for each product\ncolors = ['#FFD700', '#FFA500', '#FF6347', '#FF4500', '#FF1493', '#FF0000', '#800080']\n\n# Plot the data\nfor i, product in enumerate(products):\n    ax.barh(vendors, sales[i], color=colors[i], label=product, height=0.5, edgecolor='black')\n\n# Set labels and title\nax.set_xlabel('Sales (in tons/year)')\nax.set_ylabel('Vendors')\nax.set_title('Sales of vendors (in tons/year)')\n\n# Add grid lines for better readability\nax.grid(axis='x', linestyle='--', alpha=0.7)\n\n# Add a legend\nax.legend(title='Products', loc='upper right')\n\n# Invert the y-axis to have the first vendor at the top\nax.invert_yaxis()\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_29.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the bar chart\ncategories = ['Low', 'Medium', 'High']\nvalues = [17, 28, 36]\nsub_values = [79, 34, 53]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(5.0, 4.0))\n\n# Define colors for the bars\ncolors = ['#1f77b4', '#ff7f0e', '#2ca02c']\n\n# Plot the main bars\nbars = ax.bar(categories, values, color=colors, edgecolor='black', linewidth=1.2)\n\n# Add sub-values on top of each bar\nfor bar, sub_val in zip(bars, sub_values):\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.5, f'{sub_val}', ha='center', va='bottom', fontsize=10, fontweight='bold')\n\n# Set labels and title\nax.set_xlabel('Degree of acceptance of a product', fontsize=12)\nax.set_ylabel('Number of participants', fontsize=12)\nax.set_title('Degree of acceptance of a product', fontsize=14, fontweight='bold')\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.7)\n\n# Customize ticks\nax.set_xticks(np.arange(len(categories)))\nax.set_xticklabels(categories, rotation=45, ha='right')\n\n# Add a legend\nax.legend(['Main Category'], loc='upper right', fontsize=10)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create data for the heatmap\ndata = np.array([\n    [0.1, 0.2, 0.3, 0.4, 0.5],\n    [0.2, 0.3, 0.4, 0.5, 0.6],\n    [0.3, 0.4, 0.5, 0.6, 0.7],\n    [0.4, 0.5, 0.6, 0.7, 0.8],\n    [0.5, 0.6, 0.7, 0.8, 0.9]\n])\n\n# Define labels for the x and y axes\nx_labels = ['a', 'm', 'd', 'p', 'n']\ny_labels = ['ada', 'mis', 'dis', 'mpn', 'min']\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the heatmap with improved color scheme and annotations\ncax = ax.matshow(data, cmap='viridis', interpolation='nearest')\n\n# Add color bar\ncbar = fig.colorbar(cax)\ncbar.set_label('Bottle Neck Distance', rotation=270, labelpad=15)\n\n# Set axis labels\nax.set_xticks(np.arange(len(x_labels)))\nax.set_yticks(np.arange(len(y_labels)))\nax.set_xticklabels(x_labels, rotation=45)\nax.set_yticklabels(y_labels)\n\n# Add grid lines for better readability\nax.grid(True, linestyle='--', alpha=0.5)\n\n# Add annotations to each cell\nfor i in range(len(y_labels)):\n    for j in range(len(x_labels)):\n        ax.text(j, i, f'{data[i, j]:.2f}', ha='center', va='center', color='white')\n\n# Set title and labels\nax.set_title('Heatmap of Bottleneck Distance', fontsize=14, fontweight='bold')\nax.set_xlabel('Wasserstein Distance', fontsize=12)\nax.set_ylabel('Bottle Neck Distance', fontsize=12)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_30.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Define the data for the heatmap\ndata = np.array([\n    [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0],\n    [0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 0.9],\n    [0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 0.9, 0.8],\n    [0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 0.9, 0.8, 0.7],\n    [0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 0.9, 0.8, 0.7, 0.6],\n    [0.6, 0.7, 0.8, 0.9, 1.0, 0.9, 0.8, 0.7, 0.6, 0.5],\n    [0.7, 0.8, 0.9, 1.0, 0.9, 0.8, 0.7, 0.6, 0.5, 0.4],\n    [0.8, 0.9, 1.0, 0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3],\n    [0.9, 1.0, 0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2],\n    [1.0, 0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1]\n])\n\n# Plot the heatmap\ncax = ax.imshow(data, cmap='coolwarm', interpolation='nearest')\n\n# Add color bar\ncbar = fig.colorbar(cax)\ncbar.set_label('Value')\n\n# Set labels and title\nax.set_title(\"ROC's AUC\", fontsize=14, fontweight='bold')\nax.set_xlabel('Timeshift', fontsize=12)\nax.set_ylabel('Scales', fontsize=12)\n\n# Customize ticks\nax.set_xticks(np.arange(len(data[0])))\nax.set_yticks(np.arange(len(data)))\nax.set_xticklabels([str(i) for i in range(1, len(data[0]) + 1)])\nax.set_yticklabels([str(i) for i in range(1, len(data) + 1)])\n\n# Add grid lines\nax.grid(True, linestyle='--', alpha=0.5)\n\n# Add annotations\nfor i in range(len(data)):\n    for j in range(len(data[i])):\n        text = ax.text(j, i, f'{data[i, j]:.1f}', ha=\"center\", va=\"center\", color=\"w\")\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create data for the heatmap\ndata = np.array([\n    [0.1, 0.2, 0.3, 0.4, 0.5],\n    [0.2, 0.3, 0.4, 0.5, 0.6],\n    [0.3, 0.4, 0.5, 0.6, 0.7],\n    [0.4, 0.5, 0.6, 0.7, 0.8],\n    [0.5, 0.6, 0.7, 0.8, 0.9]\n])\n\n# Define categories for x and y axes\ncategories = ['C Subject', 'C Relation', 'C Attribute', 'Q Subject', 'Q Relation']\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(6.0, 3.0))\n\n# Plot the heatmap\ncax = ax.matshow(data, cmap='viridis')\n\n# Add color bar\ncbar = fig.colorbar(cax)\n\n# Set labels for the axes\nax.set_xticks(np.arange(len(categories)))\nax.set_yticks(np.arange(len(categories)))\n\n# Set labels for each tick\nax.set_xticklabels(categories)\nax.set_yticklabels(categories)\n\n# Rotate x-axis labels for better readability\nplt.xticks(rotation=45)\n\n# Add title and axis labels\nplt.title('Heatmap of Categories')\nplt.xlabel('Category')\nplt.ylabel('Category')\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the heatmap\ndata = np.array([\n    [44, 12, 0, 0],\n    [35, 8, 24, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, "}
{"file": "dataset/ori_500/heatmap_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\nmodels = ['Kokkos', 'Raja', 'OMP', 'OACC', 'SYCL', 'Native Port']\nbandwidths = [876, 136, 435, 534, 322, 804]\npermutations = [\n    [876, 136, 435, 534, 322, 804],\n    [750, 1737, 742, 375, 750, 1825],\n    [764, 676, 782, 421, 925, 911],\n    [482, 120, 843, 1170, 925, 911]\n]\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Define colors for the bars\ncolors = ['#FFD700', '#FFA500', '#FF6347', '#FF4500', '#FF0000', '#8B0000']\n\n# Plot the data with enhanced styling\nfor i, (model, bw, perm) in enumerate(zip(models, bandwidths, permutations)):\n    ax.barh(model, bw, color=colors[i], edgecolor='black', linewidth=1.2, alpha=0.8)\n    for j, value in enumerate(perm):\n        ax.text(value + 10, i, f'{value}', va='center', ha='left', fontsize=8, color='black')\n\n# Set labels and title with improved font sizes\nax.set_xlabel('BabelStream triad Average Memory Bandwidth (GB/s)', fontsize=12)\nax.set_ylabel('Programming Model', fontsize=12)\nax.set_title('BabelStream triad Average Memory Bandwidth (GB/s)', fontsize=14, fontweight='bold')\n\n# Add grid lines for better readability\nax.grid(axis='x', linestyle='--', alpha=0.7)\n\n# Customize ticks\nax.set_yticks(np.arange(len(models)))\nax.set_yticklabels(models)\nax.set_xticks(np.arange(0, 1600, 200))\nax.set_xticklabels([f'{i}' for i in range(0, 1600, 200)])\n\n# Add a color bar for reference\ncmap = plt.cm.viridis\nnorm = plt.Normalize(vmin=min(bandwidths), vmax=max(bandwidths))\nsm = plt.cm.ScalarMappable(cmap=cmap, norm=norm)\nsm.set_array([])\ncbar = fig.colorbar(sm, ax=ax, orientation='vertical', pad=0.02)\ncbar.set_label('Bandwidth (GB/s)', rotation=270, labelpad=15, fontsize=10)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data for the heatmap\ndata = np.array([\n    [1.00, 0.90, 0.89, 0.88, 0.64, 0.65, 0.71, 0.82],\n    [0.90, 1.00, 0.93, 0.92, 0.67, 0.69, 0.72, 0.82],\n    [0.89, 0.93, 1.00, 0.95, 0.66, 0.69, 0.74, 0.81],\n    [0.88, 0.92, 0.95, 1.00, 0.68, 0.69, 0.75, 0.82],\n    [0.64, 0.65, 0.66, 0.68, 0.85, 0.86, 0.88, 0.90],\n    [0.65, 0.69, 0.69, 0.69, 0.85, 0.86, 0.88, 0.90],\n    [0.71, 0.72, 0.74, 0.75, 0.83, 0.86, 0.88, 0.90],\n    [0.82, 0.82, 0.81, 0.82, 0.90, 0.90, 0.92, 1.00]\n])\n\n# Define labels for the x and y axes\nlabels = ['en', 'fr', 'es', 'pt', 'bn', 'nr', 'hi', 'zh']\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Plot the heatmap\ncax = ax.matshow(data, cmap='coolwarm', fignum=1)\n\n# Add color bar\ncbar = fig.colorbar(cax)\ncbar.set_label('Correlation Coefficients')\n\n# Set labels for the axes\nax.set_xticks(np.arange(len(labels)))\nax.set_yticks(np.arange(len(labels)))\nax.set_xticklabels(labels)\nax.set_yticklabels(labels)\n\n# Rotate the tick labels and set their alignment.\nplt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\", rotation_mode=\"anchor\")\n\n# Add title and axis labels\nax.set_title('Correlation Coefficients')\nax.set_xlabel('X Axis Label')\nax.set_ylabel('Y Axis Label')\n\n# Add annotations to each cell\nfor i in range(len(labels)):\n    for j in range(len(labels)):\n        text = ax.text(j, i, f'{data[i, j]:.2f}', ha=\"center\", va=\"center\", color=\"w\")\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the heatmap\ndata = np.array([\n    [0.19, 0.19, 0.26, 0.53, 0.52],\n    [0.16, 0.19, 0.24, 0.50, 0.39],\n    [0.03, 0.24, 0.24, 0.34, 0.20],\n    [0.07, 0.28, 0.26, 0.26, 0.21],\n    [0.05, 0.06, 0.05, 0.06, 0.05]\n])\n\n# Define labels for the x and y axes\nx_labels = ['LexRank', 'ROUGE', 'BERTScore', 'SimCSE', 'PMI']\ny_labels = ['GPT-3.5', 'CrossAttn', 'PPL', 'BERTScore', 'ROUGE']\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the heatmap with a color map\ncax = ax.matshow(data, cmap='viridis')\n\n# Add color bar\ncbar = fig.colorbar(cax)\ncbar.set_label('Score', rotation=270, labelpad=15)\n\n# Set axis labels\nax.set_xticks(np.arange(len(x_labels)))\nax.set_yticks(np.arange(len(y_labels)))\nax.set_xticklabels(x_labels, rotation=45, ha='right')\nax.set_yticklabels(y_labels)\n\n# Add grid lines for better readability\nax.grid(True, linestyle='--', alpha=0.5)\n\n# Add annotations to each cell\nfor i in range(len(y_labels)):\n    for j in range(len(x_labels)):\n        ax.text(j, i, f'{data[i, j]:.2f}', ha='center', va='center', color='black')\n\n# Set title and labels\nax.set_title('Heatmap of Scores', fontsize=14, fontweight='bold')\nax.set_xlabel('Metrics', fontsize=12)\nax.set_ylabel('Models', fontsize=12)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define data for the heatmap\ndata = np.array([\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],\n    [15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1],\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],\n    [15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1],\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],\n    [15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1],\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],\n    [15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1],\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],\n    [15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1],\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],\n    [15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1],\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],\n    [15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]\n])\n\n# Create a new figure with a specific size\nfig, axes = plt.subplots(2, 1, figsize=(5.0, 6.0), sharex=True, sharey=True)\n\n# Plot the first heatmap\ncax1 = axes[0].imshow(data, cmap='viridis', interpolation='nearest')\naxes[0].set_title('No / The')\naxes[0].set_xlabel('Layers')\naxes[0].set_ylabel('Endofoffset')\n\n# Add colorbar to the first subplot\ncbar1 = fig.colorbar(cax1, ax=axes[0], orientation='vertical')\ncbar1.set_label('Intensity')\n\n# Plot the second heatmap\ncax2 = axes[1].imshow(data, cmap='viridis', interpolation='nearest')\naxes[1].set_title('athletic')\naxes[1].set_xlabel('Layers')\naxes[1].set_ylabel('Endofoffset')\n\n# Add colorbar to the second subplot\ncbar2 = fig.colorbar(cax2, ax=axes[1], orientation='vertical')\ncbar2.set_label('Intensity')\n\n# Adjust layout to prevent overlap\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Number of pairs vs. Test Winning Distance\npairs = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]\nwinning_distances = [\n    [0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9],\n    [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0],\n    [0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1],\n    [0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2],\n    [0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3],\n    [0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3, 1.4],\n    [0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3, 1.4, 1.5],\n    [0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6],\n    [0.8, 0.9, 1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7],\n    [0.9, 1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8]\n]\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(8.0, 7.0))\n\n# Plot the data with enhanced aesthetics\nfor i, distances in enumerate(winning_distances):\n    ax.bar(pairs, distances, width=5, alpha=0.7, label=f'Pair {i+1}', color=plt.cm.viridis(i/len(winning_distances)))\n\n# Set labels and title with improved font sizes\nax.set_xlabel('Number of Pairs', fontsize=12)\nax.set_ylabel('Test Winning Distance', fontsize=12)\nax.set_title('Impact of Pair Count on Test Performance', fontsize=14)\n\n# Add grid lines for better readability\nax.grid(True, linestyle='--', alpha=0.6)\n\n# Customize the legend\nax.legend(title='Pairs', loc='upper left', fontsize=10)\n\n# Set x-ticks and y-ticks with more descriptive labels\nax.set_xticks(pairs)\nax.set_yticks(np.arange(0, 1.1, 0.1))\nax.set_yticklabels([f'{y:.1f}' for y in np.arange(0, 1.1, 0.1)])\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create data for the scatter plot\nx = np.linspace(-1, 1, 100)\ny = np.sin(x) * np.cos(x)\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(10.0, 3.0))\n\n# Plot the data with enhanced aesthetics\nscatter = ax.scatter(x, y, c=y, cmap='viridis', s=50, alpha=0.7, edgecolor='w', linewidth=0.5)\n\n# Add a color bar to indicate the scale of the colormap\ncbar = plt.colorbar(scatter)\ncbar.set_label('Cosine Similarity')\n\n# Set labels and title with improved font sizes\nax.set_xlabel('Cosine Similarity', fontsize=12)\nax.set_ylabel('Cosine Similarity', fontsize=12)\nax.set_title('Cosine Similarity Scatter Plot', fontsize=14)\n\n# Customize grid lines\nax.grid(True, linestyle='--', alpha=0.6)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data for plotting\nx = np.linspace(0.5, 2.5, 100)\ny1 = np.sin(x) * np.exp(-0.1 * x)\ny2 = np.cos(x) * np.exp(-0.1 * x)\n\n# Create a new figure with a larger size for better visibility\nfig, axes = plt.subplots(2, 2, figsize=(10.0, 8.0), sharex=True, sharey=True)\n\n# Plot the first subplot\naxes[0, 0].scatter(x, y1, c=y1, cmap='viridis', s=50, alpha=0.7)\naxes[0, 0].set_title('Baseline')\naxes[0, 0].set_xlabel('Euclidean Distance')\naxes[0, 0].set_ylabel('Density')\naxes[0, 0].set_xlim([0.5, 2.5])\naxes[0, 0].set_ylim([0, 1.5])\ncbar1 = fig.colorbar(plt.cm.ScalarMappable(cmap='viridis'), ax=axes[0, 0], orientation='vertical')\ncbar1.set_label('V-I positive')\n\n# Plot the second subplot\naxes[0, 1].scatter(x, y2, c=y2, cmap='plasma', s=50, alpha=0.7)\naxes[0, 1].set_title('MIRL w/ MULT')\naxes[0, 1].set_xlabel('Euclidean Distance')\naxes[0, 1].set_ylabel('Density')\naxes[0, 1].set_xlim([0.5, 2.5])\naxes[0, 1].set_ylim([0, 1.5])\ncbar2 = fig.colorbar(plt.cm.ScalarMappable(cmap='plasma'), ax=axes[0, 1], orientation='vertical')\ncbar2.set_label('V-I negative')\n\n# Plot the third subplot\naxes[1, 0].scatter(x, y1 + y2, c=y1 + y2, cmap='coolwarm', s=50, alpha=0.7)\naxes[1, 0].set_title('MIRL + OCLR w/ MULT')\naxes[1, 0].set_xlabel('Euclidean Distance')\naxes[1, 0].set_ylabel('Density')\naxes[1, 0].set_xlim([0.5, 2.5])\naxes[1, 0].set_ylim([0, 1.5])\ncbar3 = fig.colorbar(plt.cm.ScalarMappable(cmap='coolwarm'), ax=axes[1, 0], orientation='vertical')\ncbar3.set_label('V-I positive')\n\n# Plot the fourth subplot\naxes[1, 1].scatter(x, y1 - y2, c=y1 - y2, cmap='inferno', s=50, alpha=0.7)\naxes[1, 1].set_title('MIRL + OCLR w/ DOTLA')\naxes[1, 1].set_xlabel('Euclidean Distance')\naxes[1, 1].set_ylabel('Density')\naxes[1, 1].set_xlim([0.5, 2.5])\naxes[1, 1].set_ylim([0, 1.5])\ncbar4 = fig.colorbar(plt.cm.ScalarMappable(cmap='inferno'), ax=axes[1, 1], orientation='vertical')\ncbar4.set_label('V-I negative')\n\n# Adjust layout and display the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data for demonstration\ndata_sets = {\n    'Mathwell': (np.random.normal(5, 1, 100), np.random.normal(3, 1, 100)),\n    'Llama-2': (np.random.normal(4, 1, 100), np.random.normal(2, 1, 100)),\n    'LemmeMMA': (np.random.normal(6, 1, 100), np.random.normal(4, 1, 100)),\n    'MammothTH': (np.random.normal(7, 1, 100), np.random.normal(5, 1, 100))\n}\n\n# Create a new figure with a larger size for better visibility\nfig, axes = plt.subplots(nrows=3, ncols=2, figsize=(7.0, 8.0), constrained_layout=True)\n\n# Plot each dataset on a separate subplot\nfor ax, (title, (x, y)) in zip(axes.flatten(), data_sets.items()):\n    ax.scatter(x, y, alpha=0.6, edgecolor='k', s=50)\n    ax.set_title(title, fontsize=12, fontweight='bold')\n    ax.set_xlabel('FKGL', fontsize=10)\n    ax.set_ylabel('Density', fontsize=10)\n    ax.grid(True, linestyle='--', alpha=0.7)\n    ax.set_xlim(0, 10)\n    ax.set_ylim(0, 4)\n\n# Add a main title for the entire figure\nplt.suptitle('Comparison of Distributions', fontsize=14, fontweight='bold')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\ncategories = ['Camels', 'Kangaroos']\nvalues = [\n    [100, 200, 300, 400, 500],\n    [150, 250, 350, 450, 550]\n]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(5.0, 5.0))\n\n# Define colors for each bar\ncolors = ['#FFA500', '#ADD8E6']\n\n# Plot the data with error bars\nbar_width = 0.35\nindex = np.arange(len(categories))\nbars = []\n\nfor i, (category, value) in enumerate(zip(categories, values)):\n    bar = ax.bar(index + i * bar_width, value, bar_width, label=category, color=colors[i], edgecolor='black')\n    bars.append(bar)\n\n# Add error bars if needed\n# ax.errorbar(index, means, yerr=stds, fmt='o', color='black', ecolor='gray', elinewidth=2, capsize=5)\n\n# Set labels and title\nax.set_xlabel('Animal Weight (Tons)', fontsize=12)\nax.set_ylabel('Frequency', fontsize=12)\nax.set_title('Desert Animals in the Wild', fontsize=14, fontweight='bold')\nax.set_xticks(index + bar_width / 2)\nax.set_xticklabels(['0.02', '0.04', '0.06', '0.08', '0.10'], fontsize=10)\nax.legend(title='Species', loc='upper right', fontsize=10)\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.7)\n\n# Annotate bars with values\nfor bar in bars:\n    for i, v in enumerate(bar):\n        ax.text(v.get_x() + v.get_width() / 2, v.get_height() + 10, f'{v.get_height():.0f}', ha='center', va='bottom', fontsize=9)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\nx = np.array([0, 1, 2, 3, 4, 5, 6, 7, 8])\ny1 = np.array([10, 20, 30, 40, 50, 60, 70, 80, 90])\ny2 = np.array([15, 25, 35, 45, 55, 65, 75, 85, 95])\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Plot the data with different styles\nax.bar(x - 0.2, y1, width=0.4, color='red', alpha=0.7, label='Uniform data')\nax.bar(x + 0.2, y2, width=0.4, color='blue', alpha=0.7, label='Normal data')\n\n# Set labels and title\nax.set_xlabel('Value', fontsize=12)\nax.set_ylabel('Frequency', fontsize=12)\nax.set_title('Comparison of Uniform and Normal Distributions', fontsize=14)\n\n# Add grid lines for better readability\nax.grid(axis='y', linestyle='--', alpha=0.7)\n\n# Add a legend to differentiate between datasets\nax.legend(title='Data Type', fontsize=10)\n\n# Enhance the layout\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Wind speed measurements (km/h) and corresponding wind speed (m/s)\nwind_speed_kmh = np.array([1.5, 2.0, 2.5, 3.0, 3.5, 4.0, 4.5, 5.0, 5.5, 6.0])\nwind_speed_ms = np.array([0.417, 0.556, 0.694, 0.833, 0.972, 1.111, 1.25, 1.389, 1.528, 1.667])\n\n# Create a new figure with a larger size for better visibility\nplt.figure(figsize=(8.0, 6.0))\n\n# Plot the histogram with enhanced aesthetics\nplt.hist(wind_speed_kmh, bins=10, color='skyblue', edgecolor='black', alpha=0.7)\n\n# Add a vertical line at the median of the wind speed\nmedian_speed = np.median(wind_speed_kmh)\nplt.axvline(x=median_speed, color='darkred', linestyle='--', linewidth=2, label=f'Median: {median_speed:.2f}')\n\n# Set labels and title with improved font sizes and styles\nplt.xlabel('Wind Speed (km/h)', fontsize=12, fontweight='bold')\nplt.ylabel('Number of Measurements', fontsize=12, fontweight='bold')\nplt.title('Histogram of Wind Speed Measurements', fontsize=14, fontweight='bold')\n\n# Add grid lines for better readability\nplt.grid(True, which='both', linestyle='--', linewidth=0.5, alpha=0.7)\n\n# Add a legend to explain the dashed line\nplt.legend()\n\n# Adjust layout for better spacing\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_16.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\ncategories = ['Category 1', 'Category 2', 'Category 3', 'Category 4']\nvalues = [120, 80, 150, 90]\nerrors = [5, 3, 7, 4]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(5.0, 4.0))\n\n# Plot the data with error bars\nbars = ax.bar(categories, values, yerr=errors, capsize=5, color='skyblue', edgecolor='black')\n\n# Add labels and title\nax.set_xlabel('Categories', fontsize=12)\nax.set_ylabel('Values', fontsize=12)\nax.set_title('Baking Accuracy Analysis', fontsize=14, fontweight='bold')\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.7)\n\n# Annotate each bar with its value\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 2, f'{yval}', ha='center', va='bottom', fontsize=10)\n\n# Customize the x-axis ticks\nax.set_xticks(np.arange(len(categories)))\nax.set_xticklabels(categories, rotation=45, ha='right')\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_17.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Number of pairs and test winning distance\npairs = [20, 30, 40, 50, 60, 70, 80, 90, 100]\nwinning_distances = [\n    [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9],\n    [0.15, 0.25, 0.35, 0.45, 0.55, 0.65, 0.75, 0.85, 0.95],\n    [0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0],\n    [0.18, 0.28, 0.38, 0.48, 0.58, 0.68, 0.78, 0.88, 0.98],\n    [0.12, 0.22, 0.32, 0.42, 0.52, 0.62, 0.72, 0.82, 0.92],\n    [0.13, 0.23, 0.33, 0.43, 0.53, 0.63, 0.73, 0.83, 0.93],\n    [0.14, 0.24, 0.34, 0.44, 0.54, 0.64, 0.74, 0.84, 0.94],\n    [0.16, 0.26, 0.36, 0.46, 0.56, 0.66, 0.76, 0.86, 0.96],\n    [0.17, 0.27, 0.37, 0.47, 0.57, 0.67, 0.77, 0.87, 0.97]\n]\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(16.0, 7.0))\n\n# Plot each dataset with different colors and line styles\ncolors = ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd', '#8c564b', '#e377c2', '#7f7f7f', '#bcbd22']\nlinestyles = ['-', '--', '-.', ':']\n\nfor i, data in enumerate(winning_distances):\n    ax.plot(pairs, data, label=f'Dataset {i+1}', color=colors[i], linestyle=linestyles[i % len(linestyles)], marker='o')\n\n# Set labels and title\nax.set_xlabel('Number of Pairs', fontsize=12)\nax.set_ylabel('Test Winning Distance', fontsize=12)\nax.set_title('Comparison of Test Winning Distances for Different Datasets', fontsize=14)\n\n# Add grid for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Customize ticks\nax.set_xticks(pairs)\nax.set_yticks(np.arange(0, 1.1, 0.1))\n\n# Add legend\nax.legend(title='Datasets', loc='upper left', fontsize=10)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_18.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Number of nominations for different categories over years\ncategories = ['Record of the Year', 'Album of the Year', 'Song of the Year', \n              'Best New Artist', 'Best Pop Solo Performance']\nyears = [2019, 2020, 2021, 2022, 2023]\nnominations = [\n    [5, 10, 15, 20, 25],  # Record of the Year\n    [3, 7, 12, 18, 23],  # Album of the Year\n    [4, 8, 13, 19, 24],  # Song of the Year\n    [6, 11, 16, 21, 26],  # Best New Artist\n    [2, 6, 11, 17, 22]   # Best Pop Solo Performance\n]\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(12.0, 8.0))\n\n# Define colors for each category\ncolors = ['#FF9999', '#FFCC99', '#FFFF99', '#B3E6FF', '#FFD966']\n\n# Plot the data with a bar chart\nbars = []\nfor i, category in enumerate(categories):\n    bars.append(ax.bar(years, nominations[i], bottom=np.sum(nominations[:i], axis=0), color=colors[i], label=category))\n\n# Add a legend to the plot\nax.legend(title='Categories')\n\n# Set labels and title\nax.set_xlabel('Year')\nax.set_ylabel('Number of Nominations')\nax.set_title('Histogram of Grammy Nominations Across Expanded Categories 2019-2023')\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.7)\n\n# Add annotations to show the exact number of nominations\nfor bar in bars:\n    for i, v in enumerate(bar):\n        ax.text(v.get_x() + v.get_width()/2, v.get_height(), str(v.get_height()), ha='center', va='bottom', fontsize=10)\n\n# Set x-ticks to be more readable\nax.set_xticks(years)\nax.set_xticklabels(years, rotation=45)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_19.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define data for the plots\nx = np.linspace(0, 0.3, 500)\ny1 = np.exp(-x**2)\ny2 = np.exp(-(x-0.1)**2)\n\n# Create a new figure with a larger size for better visibility\nfig, axes = plt.subplots(1, 2, figsize=(10.0, 7.0), sharex=True, sharey=True)\n\n# Plot the first subplot\naxes[0].plot(x, y1, color='blue', label='Non-defective')\naxes[0].fill_between(x, y1, color='lightblue', alpha=0.5)\naxes[0].set_title('MNIST - Defect Detection')\naxes[0].set_xlabel('X-axis')\naxes[0].set_ylabel('Y-axis')\naxes[0].legend()\n\n# Plot the second subplot\naxes[1].plot(x, y2, color='red', label='Defective')\naxes[1].fill_between(x, y2, color='orange', alpha=0.5)\naxes[1].set_title('FashionMNIST - Defect Detection')\naxes[1].set_xlabel('X-axis')\naxes[1].set_ylabel('Y-axis')\naxes[1].legend()\n\n# Add a global title\nplt.suptitle('Defect Detection Data Distribution', fontsize=16, fontweight='bold')\n\n# Adjust layout for better spacing\nplt.tight_layout(rect=[0, 0.03, 1, 0.95])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Let's assume we have some data representing different categories and their values\ncategories = ['Category A', 'Category B', 'Category C', 'Category D']\nvalues = [35, 45, 25, 55]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(9.0, 6.0))\n\n# Define colors for each bar\ncolors = ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728']\n\n# Plot the bar chart with enhanced styling\nbars = ax.bar(categories, values, color=colors, edgecolor='black', linewidth=1.2)\n\n# Add value labels on top of each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 1, f'{yval}', ha='center', va='bottom', fontsize=10, fontweight='bold')\n\n# Set title and labels with improved font sizes and styles\nax.set_title('Sample Bar Chart', fontsize=14, fontweight='bold')\nax.set_xlabel('Categories', fontsize=12)\nax.set_ylabel('Values', fontsize=12)\n\n# Customize the x-axis ticks\nax.set_xticks(np.arange(len(categories)))\nax.set_xticklabels(categories, rotation=45, ha='right', fontsize=10)\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.7)\n\n# Adjust layout for better spacing\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_20.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data for demonstration\ncategories = ['Sweet', 'Dark', 'White', 'Ruby']\nswiss_values = [0.5, 1.2, 0.7, 0.9]\nnew_zealand_values = [0.3, 0.8, 0.6, 0.4]\n\n# Create a new figure with a larger size for better visibility\nfig, axes = plt.subplots(2, 2, figsize=(10.0, 8.0), constrained_layout=True)\n\n# Plotting the first subplot\naxes[0, 0].bar(categories, swiss_values, color='skyblue', label='Swiss')\naxes[0, 0].bar(categories, new_zealand_values, bottom=swiss_values, color='coral', label='New Zealand')\naxes[0, 0].set_title('a) Milk Chocolate')\naxes[0, 0].set_xlabel('Sweetness')\naxes[0, 0].set_ylabel('Density')\naxes[0, 0].legend()\n\n# Plotting the second subplot\naxes[0, 1].bar(categories, swiss_values, color='skyblue', label='Swiss')\naxes[0, 1].bar(categories, new_zealand_values, bottom=swiss_values, color='coral', label='New Zealand')\naxes[0, 1].set_title('b) Dark Chocolate')\naxes[0, 1].set_xlabel('Sweetness')\naxes[0, 1].set_ylabel('Density')\naxes[0, 1].legend()\n\n# Plotting the third subplot\naxes[1, 0].bar(categories, swiss_values, color='skyblue', label='Swiss')\naxes[1, 0].bar(categories, new_zealand_values, bottom=swiss_values, color='coral', label='New Zealand')\naxes[1, 0].set_title('c) White Chocolate')\naxes[1, 0].set_xlabel('Sweetness')\naxes[1, 0].set_ylabel('Density')\naxes[1, 0].legend()\n\n# Plotting the fourth subplot\naxes[1, 1].bar(categories, swiss_values, color='skyblue', label='Swiss')\naxes[1, 1].bar(categories, new_zealand_values, bottom=swiss_values, color='coral', label='New Zealand')\naxes[1, 1].set_title('d) Ruby Chocolate')\naxes[1, 1].set_xlabel('Sweetness')\naxes[1, 1].set_ylabel('Density')\naxes[1, 1].legend()\n\n# Adjust layout and show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define data for the bar chart\ncategories = ['Class A', 'Class B', 'Class C', 'Class D', 'Class E']\nvalues = [1000, 200, 30, 10, 5]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(5.0, 4.0))\n\n# Plot the bar chart with enhanced aesthetics\nbars = ax.bar(categories, values, color=['#8B4513', '#FFD700', '#FF69B4', '#FFA500', '#ADD8E6'], edgecolor='black')\n\n# Add value labels on top of each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 5, f'{yval}', ha='center', va='bottom', fontsize=10)\n\n# Set title and labels with improved font sizes\nax.set_title('CIFAR100 \\'Desert\\' Concept', fontsize=14, fontweight='bold')\nax.set_xlabel('Concept', fontsize=12)\nax.set_ylabel('Count', fontsize=12)\n\n# Customize the x-axis ticks\nax.set_xticks(np.arange(len(categories)))\nax.set_xticklabels(categories, rotation=45, ha='right', fontsize=10)\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.7)\n\n# Adjust layout for better spacing\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the heatmap\ndata = np.array([\n    [10, 20, 30, 40, 50],\n    [60, 70, 80, 90, 100],\n    [110, 120, 130, 140, 150],\n    [160, 170, 180, 190, 200],\n    [210, 220, 230, 240, 250]\n])\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(5.0, 3.0))\n\n# Plot the heatmap with enhanced aesthetics\ncax = ax.matshow(data, cmap='YlOrBr', interpolation='nearest')\n\n# Add color bar\ncbar = fig.colorbar(cax)\ncbar.set_label('Number of Examples')\n\n# Set labels and title\nax.set_xlabel('Distance Difference (Random vs. Center)')\nax.set_ylabel('Sample Number')\nax.set_title('Heatmap of Sample Distribution')\n\n# Customize ticks\nax.set_xticks(np.arange(len(data[0])))\nax.set_yticks(np.arange(len(data)))\nax.set_xticklabels(['-5.0', '-2.5', '0.0', '2.5', '5.0'])\nax.set_yticklabels(['1', '2', '3', '4', '5'])\n\n# Add grid lines for better readability\nax.grid(True, linestyle='--', alpha=0.5)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Number of repetitions for different exercises\nexercises = ['Squats', 'Push-ups', 'Planks', 'Lunges', 'Bench Press']\nrepetitions = [120, 80, 60, 90, 70]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(4.0, 3.0))\n\n# Plot the bar chart with enhanced aesthetics\nbars = ax.bar(exercises, repetitions, color='teal', edgecolor='black', linewidth=1.2)\n\n# Add value labels on top of each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 5, int(yval), ha='center', va='bottom', fontsize=10, color='black')\n\n# Set labels and title with improved font sizes\nax.set_xlabel('Exercises', fontsize=12)\nax.set_ylabel('Number of Repetition', fontsize=12)\nax.set_title('Repetition Count for Different Exercises', fontsize=14, fontweight='bold')\n\n# Customize the x-axis ticks\nax.set_xticks(range(len(exercises)))\nax.set_xticklabels(exercises, rotation=45, ha='right', fontsize=10)\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.7)\n\n# Adjust layout for better spacing\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create data\nx = np.array([0, 1, 2, 3, 4])\ny1 = np.array([400, 300, 200, 100, 50])\ny2 = np.array([350, 250, 150, 75, 25])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(5.0, 3.0))\n\n# Plot the data with different colors and styles\nax.bar(x, y1, color='royalblue', label='Correctly classified', edgecolor='black')\nax.bar(x, y2, bottom=y1, color='darkorange', label='Misclassified', edgecolor='black')\n\n# Set labels and title\nax.set_xlabel('Distance to threshold')\nax.set_ylabel('Count')\nax.set_title('Classification Results by Distance')\n\n# Add grid for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.7)\n\n# Add legend\nax.legend(loc='upper right')\n\n# Enhance x-ticks\nax.set_xticks(x)\nax.set_xticklabels(['0', '1', '2', '3', '4'])\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create data\nx = np.array([0.0, 0.2, 0.4, 0.6, 0.8, 1.0])\ny = np.array([0.1, 0.3, 0.5, 0.7, 0.9, 1.0])\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Plot the data with enhanced aesthetics\nax.plot(x, y, color='darkorange', linewidth=2.5, linestyle='--', marker='o', markersize=8, label='Calibration Error: 0.31')\n\n# Set labels and title with improved font sizes and styles\nax.set_xlabel('Confidence in bin', fontsize=12, fontweight='bold')\nax.set_ylabel('Accuracy in bin', fontsize=12, fontweight='bold')\nax.set_title('Cascade', fontsize=14, fontweight='bold')\n\n# Add grid lines for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5, alpha=0.7)\n\n# Customize ticks\nax.set_xticks(x)\nax.set_yticks(np.arange(0, 1.1, 0.2))\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Add a legend with a shadow effect\nax.legend(loc='upper left', fontsize=10, shadow=True)\n\n# Annotate the line with a text box\nax.annotate('Calibration Error: 0.31', xy=(0.5, 0.9), xytext=(0.7, 0.8),\n            arrowprops=dict(facecolor='black', shrink=0.05),\n            fontsize=10, fontweight='bold', color='darkorange')\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Number of images overlapped\nimages_overlapped = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000]\n\n# Create a new figure with a specific size\nplt.figure(figsize=(6.0, 5.0))\n\n# Plot the histogram with enhanced aesthetics\nplt.hist(images_overlapped, bins=10, color='skyblue', edgecolor='black', alpha=0.7)\n\n# Add grid lines for better readability\nplt.grid(True, linestyle='--', alpha=0.5)\n\n# Set labels and title with improved font sizes and styles\nplt.xlabel('Number of images overlap', fontsize=12, fontweight='bold')\nplt.ylabel('Frequency', fontsize=12, fontweight='bold')\nplt.title('Distribution of Image Overlaps', fontsize=14, fontweight='bold')\n\n# Customize ticks for better readability\nplt.xticks(fontsize=10)\nplt.yticks(fontsize=10)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create data for the histogram\ndata = np.random.normal(loc=0.1, scale=0.05, size=1000)\n\n# Create a new figure with a larger size for better visibility\nfig, axes = plt.subplots(1, 2, figsize=(10.0, 7.0), sharex=True, sharey=True)\n\n# Plot the first histogram\naxes[0].hist(data, bins=30, color='skyblue', edgecolor='black', alpha=0.7)\naxes[0].set_title('MNIST')\naxes[0].set_xlabel('Value')\naxes[0].set_ylabel('Frequency')\n\n# Plot the second histogram\naxes[1].hist(data, bins=30, color='lightcoral', edgecolor='black', alpha=0.7)\naxes[1].set_title('FashionMNIST')\naxes[1].set_xlabel('Value')\naxes[1].set_ylabel('Frequency')\n\n# Adjust layout for better spacing\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Let's assume we're plotting the performance of different models over time\n# Each model's performance is represented by a different line\nx = np.linspace(5, 20, 100)\ny1 = 30 * np.sin(x / 5) + 50\ny2 = 20 * np.cos(x / 4) + 60\ny3 = 10 * np.tan(x / 3) + 70\ny4 = 5 * np.exp(-0.1 * x) + 80\n\n# Create a new figure with a larger size for better visibility\nplt.figure(figsize=(8.0, 6.0))\n\n# Plot each line with different styles and markers\nplt.plot(x, y1, label='JPEG+LDPC', color='b', linestyle='-', linewidth=2, marker='o', markersize=5)\nplt.plot(x, y2, label='DEEPJSCC w/o ofdm', color='orange', linestyle='--', linewidth=2, marker='s', markersize=5)\nplt.plot(x, y3, label='DEEPJSCC w/ ofdm', color='g', linestyle='-.', linewidth=2, marker='^', markersize=5)\nplt.plot(x, y4, label='OURS', color='r', linestyle=':', linewidth=2, marker='>', markersize=5)\n\n# Set labels with more descriptive text\nplt.xlabel('SNR (dB)', fontsize=12)\nplt.ylabel('Classification Accuracy (%)', fontsize=12)\nplt.title('Comparison of Different Models Over SNR', fontsize=14, fontweight='bold')\n\n# Add grid for better readability\nplt.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Customize ticks\nplt.xticks(np.arange(5, 21, 5))\nplt.yticks(np.arange(0, 101, 10))\n\n# Add a legend with a shadow effect\nplt.legend(loc='upper left', fontsize=10, shadow=True)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Performance gain over time for different categories\nn = np.arange(1, 9)\ncontent_gain = [1, 2, 3, 4, 5, 6, 7, 8]\norganization_gain = [1, 1.5, 2.5, 3, 3.5, 4, 4.5, 5]\nlanguage_gain = [0.5, 1, 1.5, 2, 2.5, 3, 3.5, 4]\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data with enhanced styles\nax.plot(n, content_gain, label='Content', color='royalblue', linestyle='-', linewidth=2, marker='o', markersize=6)\nax.plot(n, organization_gain, label='Organization', color='darkorange', linestyle='--', linewidth=2, marker='s', markersize=6)\nax.plot(n, language_gain, label='Language', color='teal', linestyle='-.', linewidth=2, marker='^', markersize=6)\n\n# Set labels and title with improved font sizes\nax.set_xlabel('n', fontsize=12)\nax.set_ylabel('Performance Gain (%)', fontsize=12)\nax.set_title('Performance Gain Over Time', fontsize=14, fontweight='bold')\n\n# Add grid lines for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5, alpha=0.7)\n\n# Customize ticks\nax.set_xticks(np.arange(1, 9))\nax.set_yticks(np.arange(0, 8, 1))\n\n# Add a legend with a shadow effect\nax.legend(loc='upper left', fontsize=10, shadow=True)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Deposition IO Norm vs. Accuracy for different vocabularies\nvocabularies = ['coco (10k)', 'laion (10k)', 'coco (5k)', 'laion (5k)']\ndecomposition_io_norms = np.array([0, 20, 40, 60, 80])\naccuracies = [\n    [0.55, 0.60, 0.65, 0.70, 0.75],\n    [0.55, 0.60, 0.65, 0.70, 0.75],\n    [0.55, 0.60, 0.65, 0.70, 0.75],\n    [0.55, 0.60, 0.65, 0.70, 0.75]\n]\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Plot each vocabulary's accuracy over decomposition IO norm\ncolors = ['#FF0000', '#00FF00', '#0000FF', '#FFFF00']\nlinestyles = ['-', '--', '-.', ':']\n\nfor i, acc in enumerate(accuracies):\n    ax.plot(decomposition_io_norms, acc, label=vocabularies[i], color=colors[i], linestyle=linestyles[i], marker='o')\n\n# Set labels and title with improved font sizes\nax.set_xlabel('Decomposition IO Norm', fontsize=12)\nax.set_ylabel('Accuracy', fontsize=12)\nax.set_title('Effect of Vocabulary on Zero Shot Accuracy', fontsize=14, fontweight='bold')\n\n# Add grid lines for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Customize ticks for better readability\nax.set_xticks(decomposition_io_norms)\nax.set_yticks(np.arange(0.5, 0.8, 0.05))\n\n# Add a legend with a shadow effect\nax.legend(title='Dictionary', loc='upper left', fontsize=10, shadow=True)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Let's assume we're plotting the standard deviation of a dataset over different sample ratios\nsample_ratios = np.array([0.25, 0.5, 0.75, 1.0])\nstd_devs = np.array([0.03, 0.04, 0.05, 0.06])\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data with enhanced styling\nax.plot(sample_ratios, std_devs, marker='o', linestyle='-', color='green', linewidth=2, markersize=8, label='Std of ACC')\n\n# Add grid lines for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Set labels with more descriptive text\nax.set_xlabel('Sample Ratio', fontsize=12)\nax.set_ylabel('Standard Deviation', fontsize=12)\nax.set_title('Impact of Sample Ratio on Standard Deviation', fontsize=14)\n\n# Customize ticks for better presentation\nax.set_xticks(sample_ratios)\nax.set_yticks(np.arange(0.01, 0.07, 0.01))\n\n# Add a legend with a shadow effect\nax.legend(loc='upper right', fontsize=10, shadow=True)\n\n# Annotate key points on the plot\nfor i, txt in enumerate(std_devs):\n    ax.annotate(f'{txt:.2f}', (sample_ratios[i], std_devs[i]), textcoords=\"offset points\", xytext=(0,10), ha='center', fontsize=9)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data for demonstration\nx = np.linspace(0, 200, 201)\ny1_base = np.sin(x / 50) + 0.3\ny1_ours = np.sin(x / 50) + 0.4\ny2_base = np.cos(x / 50) + 0.3\ny2_ours = np.cos(x / 50) + 0.4\ny3_base = np.tan(x / 50) + 0.3\ny3_ours = np.tan(x / 50) + 0.4\ny4_base = np.exp(-x / 100) + 0.3\ny4_ours = np.exp(-x / 100) + 0.4\ny5_base = np.log(x + 1) + 0.3\ny5_ours = np.log(x + 1) + 0.4\n\n# Create a new figure with a larger size for better visibility\nfig, axes = plt.subplots(nrows=5, ncols=1, figsize=(8.0, 10.0), sharex=True)\n\n# Plot each dataset with different styles\naxes[0].plot(x, y1_base, label='base', color='blue', linestyle='-', linewidth=2)\naxes[0].plot(x, y1_ours, label='ours', color='orange', linestyle='--', linewidth=2)\naxes[0].set_title('FID (dJ/dt)')\naxes[0].set_ylabel('FID (dJ/dt)')\naxes[0].legend()\n\naxes[1].plot(x, y2_base, label='base', color='blue', linestyle='-', linewidth=2)\naxes[1].plot(x, y2_ours, label='ours', color='orange', linestyle='--', linewidth=2)\naxes[1].set_title('IS (dI/dt)')\naxes[1].set_ylabel('IS (dI/dt)')\naxes[1].legend()\n\naxes[2].plot(x, y3_base, label='base', color='blue', linestyle='-', linewidth=2)\naxes[2].plot(x, y3_ours, label='ours', color='orange', linestyle='--', linewidth=2)\naxes[2].set_title('CW-FID (dC/dt)')\naxes[2].set_ylabel('CW-FID (dC/dt)')\naxes[2].legend()\n\naxes[3].plot(x, y4_base, label='base', color='blue', linestyle='-', linewidth=2)\naxes[3].plot(x, y4_ours, label='ours', color='orange', linestyle='--', linewidth=2)\naxes[3].set_title('FIS (dF/dt)')\naxes[3].set_ylabel('FIS (dF/dt)')\naxes[3].legend()\n\naxes[4].plot(x, y5_base, label='base', color='blue', linestyle='-', linewidth=2)\naxes[4].plot(x, y5_ours, label='ours', color='orange', linestyle='--', linewidth=2)\naxes[4].set_title('CAS (dA/dt)')\naxes[4].set_xlabel('Training iterations')\naxes[4].set_ylabel('CAS (dA/dt)')\naxes[4].legend()\n\n# Adjust layout for better spacing\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Trends over time\nweeks = np.arange(1, 29)\nauto_profiled = np.array([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, \n                          1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2.0, \n                          1.8, 1.6, 1.4, 1.2, 1.0, 0.8, 0.6, 0.4, 0.2])\nmanually_analyzed = np.array([0.05, 0.1, 0.15, 0.2, 0.25, 0.3, 0.35, 0.4, 0.45, 0.5, \n                             0.55, 0.6, 0.65, 0.7, 0.75, 0.8, 0.85, 0.9, 0.95, 1.0, \n                             0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1])\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Plot the data with enhanced styles\nax.plot(weeks, auto_profiled, label='Auto-profiled', color='red', linestyle='-', linewidth=2, marker='x', markersize=5)\nax.plot(weeks, manually_analyzed, label='Manually-analyzed', color='blue', linestyle='--', linewidth=2, marker='o', markersize=5)\n\n# Set labels and title with improved font sizes\nax.set_xlabel('Week', fontsize=12)\nax.set_ylabel('Normalized Value', fontsize=12)\nax.set_title('Trends Over Time', fontsize=14, fontweight='bold')\n\n# Add grid for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5, alpha=0.7)\n\n# Customize ticks\nax.set_xticks(np.arange(1, 30, 2))\nax.set_yticks(np.arange(0, 1.1, 0.1))\n\n# Add a legend with a shadow effect\nax.legend(loc='upper left', fontsize=10, shadow=True)\n\n# Annotate a specific point of interest\nax.annotate('Release new product', xy=(25, 0.8), xytext=(28, 0.9),\n            arrowprops=dict(facecolor='black', shrink=0.05),\n            fontsize=10, color='navy')\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Average accuracy of different models over time\ntime = np.arange(1, 21)\nmodel1 = np.array([95, 93, 92, 91, 90, 89, 88, 87, 86, 85, 84, 83, 82, 81, 80, 79, 78, 77, 76, 75])\nmodel2 = np.array([85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 99, 98, 97, 96, 95])\nmodel3 = np.array([75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95])\nmodel4 = np.array([65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85])\n\n# Create a new figure with a specific size\nplt.figure(figsize=(8.0, 6.0))\n\n# Plot the data with different styles and markers\nplt.plot(time, model1, label='BaCE', color='navy', linestyle='-', marker='s', markersize=5)\nplt.plot(time, model2, label='LWF', color='darkorange', linestyle='--', marker='o', markersize=5)\nplt.plot(time, model3, label='EWC', color='magenta', linestyle='-.', marker='^', markersize=5)\nplt.plot(time, model4, label='SEQ', color='pink', linestyle=':', marker='D', markersize=5)\n\n# Set labels and title with improved font sizes\nplt.xlabel('Task', fontsize=12)\nplt.ylabel('Average Accuracy (%)', fontsize=12)\nplt.title('Comparison of Model Performance Over Time', fontsize=14)\n\n# Add grid for better readability\nplt.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Customize ticks\nplt.xticks(fontsize=10)\nplt.yticks(fontsize=10)\n\n# Add a legend with a shadow effect\nplt.legend(loc='upper left', fontsize=10, shadow=True)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_16.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Uncertainty threshold vs. Accuracy for different models\nuncertainty = np.linspace(0, 1, 10)\naccuracy_oesense = np.array([0.95, 0.97, 0.98, 0.99, 0.995, 0.99, 0.985, 0.975, 0.96, 0.94])\naccuracy_kws = np.array([0.93, 0.95, 0.96, 0.97, 0.98, 0.985, 0.975, 0.965, 0.955, 0.945])\naccuracy_ecg5000 = np.array([0.92, 0.94, 0.95, 0.96, 0.97, 0.975, 0.965, 0.955, 0.945, 0.935])\n\n# Create a new figure with a larger size for better visibility\nplt.figure(figsize=(8.0, 6.0))\n\n# Plot the data with enhanced styles\nplt.plot(uncertainty, accuracy_oesense, label='Oesense', color='b', linestyle='-', marker='o', markersize=8, linewidth=2)\nplt.plot(uncertainty, accuracy_kws, label='KWS', color='r', linestyle='--', marker='s', markersize=8, linewidth=2)\nplt.plot(uncertainty, accuracy_ecg5000, label='ECG5000', color='g', linestyle='-.', marker='^', markersize=8, linewidth=2)\n\n# Set labels and title with improved font sizes\nplt.xlabel('Uncertainty threshold', fontsize=12)\nplt.ylabel('Accuracy', fontsize=12)\nplt.title('Model Performance vs. Uncertainty Threshold', fontsize=14)\n\n# Add grid for better readability\nplt.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Customize ticks for better readability\nplt.xticks(fontsize=10)\nplt.yticks(fontsize=10)\n\n# Add a legend with a shadow effect\nplt.legend(loc='lower right', fontsize=10, shadow=True)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_17.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Generate data\nx = np.linspace(0, 100, 100)\ny = np.log10(x + 1)\n\n# Create a new figure with a specific size\nplt.figure(figsize=(6.0, 4.0))\n\n# Plot the data with enhanced styling\nplt.plot(x, y, color='royalblue', linestyle='-', linewidth=2, marker='o', markersize=5, markerfacecolor='white', label='Log KL Divergence')\n\n# Set labels with improved font size and style\nplt.xlabel('Number of Parameters', fontsize=12, fontweight='bold')\nplt.ylabel('Log KL Divergence', fontsize=12, fontweight='bold')\n\n# Add a grid for better readability\nplt.grid(True, which='both', linestyle='--', linewidth=0.5, alpha=0.7)\n\n# Set axis limits\nplt.xlim(0, 120)\nplt.ylim(-5, -3)\n\n# Add a legend with a shadow effect\nplt.legend(loc='upper right', fontsize=10, shadow=True)\n\n# Add a title with enhanced font size and style\nplt.title('KL Divergence Analysis', fontsize=14, fontweight='bold')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_18.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data for demonstration\nx = np.linspace(0, 2000, 100)\ny1 = np.sin(x / 500) * 10\ny2 = np.cos(x / 1000) * 10\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(9.0, 4.0))\n\n# Plot the data with enhanced styles\nax.plot(x, y1, label='7B', color='royalblue', linestyle='-', linewidth=2, marker='o', markersize=4)\nax.plot(x, y2, label='7B (Fine-tuned)', color='darkmagenta', linestyle='--', linewidth=2, marker='s', markersize=4)\n\n# Add grid lines for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5, alpha=0.7)\n\n# Set labels and title with improved font sizes\nax.set_xlabel('Iterations', fontsize=12)\nax.set_ylabel('Attack Success Rate', fontsize=12)\nax.set_title('GPT-4 Evaluation vs Llama Guard Evaluation', fontsize=14, fontweight='bold')\n\n# Customize the legend\nax.legend(loc='upper right', fontsize=10)\n\n# Enhance the axis limits for better focus\nax.set_xlim(0, 2000)\nax.set_ylim(0, 10)\n\n# Add annotations to highlight key points\nax.annotate('Peak', xy=(1500, 8), xytext=(1600, 9),\n            arrowprops=dict(facecolor='black', shrink=0.05),\n            fontsize=10, color='darkred')\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_19.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Let's assume we're plotting the accuracy of different models over time\ntime = np.logspace(-2, 0, num=100)\nfull_model = 0.5 * (1 - np.exp(-time))\nspt_model = 0.7 * (1 - np.exp(-time))\nvpt_model = 0.9 * (1 - np.exp(-time))\n\n# Create a new figure with a specific size\nplt.figure(figsize=(5.0, 4.0))\n\n# Plot the data with enhanced styles\nplt.plot(time, full_model, label='Full', color='green', linestyle='-', linewidth=2, marker='o', markersize=5)\nplt.plot(time, spt_model, label='SPT', color='red', linestyle='--', linewidth=2, marker='s', markersize=5)\nplt.plot(time, vpt_model, label='VPT', color='blue', linestyle='-.', linewidth=2, marker='^', markersize=5)\n\n# Set labels and title with improved font sizes\nplt.xlabel('Fraction of training data (log scale)', fontsize=12)\nplt.ylabel('Test accuracy (%)', fontsize=12)\nplt.title('Model Performance Over Time', fontsize=14)\n\n# Add a grid for better readability\nplt.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Add a legend with a shadow effect\nplt.legend(loc='upper left', fontsize=10, shadow=True)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create data\nx = np.linspace(0, 200, 100)\ny1 = np.sin(x / 50) * 1.5 + 1.5\ny2 = np.cos(x / 50) * 1.5 + 1.5\ny3 = np.sin(x / 50) * 1.5 + 0.5\ny4 = np.cos(x / 50) * 1.5 + 0.5\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(4.0, 3.0))\n\n# Plot the data with different styles and colors\nax.plot(x, y1, label='Gradient 1', color='blue', linestyle='-', linewidth=2, marker='o', markersize=4)\nax.plot(x, y2, label='Gradient 2', color='green', linestyle='--', linewidth=2, marker='s', markersize=4)\nax.plot(x, y3, label='Gradient 3', color='red', linestyle='-.', linewidth=2, marker='^', markersize=4)\nax.plot(x, y4, label='Gradient 4', color='orange', linestyle=':', linewidth=2, marker='D', markersize=4)\n\n# Add a legend with a shadow effect\nax.legend(loc='upper right', shadow=True)\n\n# Set labels with improved font size\nax.set_xlabel('Gradient Steps (x 62.5K)', fontsize=10)\nax.set_ylabel('Performance', fontsize=10)\n\n# Add grid lines for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Set limits for x and y axes\nax.set_xlim(0, 200)\nax.set_ylim(0, 2)\n\n# Add a title with a larger font size\nax.set_title('Gradient Descent Performance', fontsize=12, fontweight='bold')\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_20.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data for plotting\nx = np.linspace(0.2, 1.0, 50)\ny1 = np.sin(x) * np.cos(x)\ny2 = np.sin(x) * np.cos(x) + 0.1\ny3 = np.sin(x) * np.cos(x) - 0.1\ny4 = np.sin(x) * np.cos(x) + 0.2\ny5 = np.sin(x) * np.cos(x) - 0.2\n\n# Create a new figure with a larger size for better visibility\nfig, axes = plt.subplots(nrows=2, ncols=2, figsize=(16.0, 8.0), sharex=True, sharey=True)\n\n# Plot the data on each subplot\naxes[0, 0].plot(x, y1, label='PNA + ours', color='purple', linestyle='-', linewidth=2, marker='o')\naxes[0, 0].fill_between(x, y1-0.05, y1+0.05, color='lavender', alpha=0.5)\naxes[0, 0].set_title('MOLHIV', fontsize=14, fontweight='bold')\naxes[0, 0].set_xlabel('Ratio r', fontsize=12)\naxes[0, 0].set_ylabel('Performance', fontsize=12)\naxes[0, 0].legend(loc='upper right')\n\naxes[0, 1].plot(x, y2, label='GIN + ours', color='orange', linestyle='--', linewidth=2, marker='s')\naxes[0, 1].fill_between(x, y2-0.05, y2+0.05, color='lightcoral', alpha=0.5)\naxes[0, 1].set_title('Graph-SST2', fontsize=14, fontweight='bold')\naxes[0, 1].set_xlabel('Ratio r', fontsize=12)\naxes[0, 1].set_ylabel('Performance', fontsize=12)\naxes[0, 1].legend(loc='upper right')\n\naxes[1, 0].plot(x, y3, label='GIN + GSAT', color='green', linestyle='-.', linewidth=2, marker='^')\naxes[1, 0].fill_between(x, y3-0.05, y3+0.05, color='lightgreen', alpha=0.5)\naxes[1, 0].set_title('MNIST-75SP', fontsize=14, fontweight='bold')\naxes[1, 0].set_xlabel('Ratio r', fontsize=12)\naxes[1, 0].set_ylabel('Performance', fontsize=12)\naxes[1, 0].legend(loc='upper right')\n\naxes[1, 1].plot(x, y4, label='GIN + ours', color='red', linestyle=':', linewidth=2, marker='D')\naxes[1, 1].fill_between(x, y4-0.05, y4+0.05, color='salmon', alpha=0.5)\naxes[1, 1].set_title('SPMotif-0.5', fontsize=14, fontweight='bold')\naxes[1, 1].set_xlabel('Ratio r', fontsize=12)\naxes[1, 1].set_ylabel('Performance', fontsize=12)\naxes[1, 1].legend(loc='upper right')\n\n# Adjust layout and display the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_21.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Imbalance ratio of unlabeled data vs. Top-1 Acc\nimbalance_ratios = np.array([120, 90, 60, 30, 10])\ntop1_acc_ours = np.array([75.0, 80.0, 85.0, 87.5, 88.5])\ntop1_acc_acr = np.array([77.5, 82.5, 85.0, 87.5, 89.0])\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(9.0, 6.0))\n\n# Plot the data with enhanced styles\nax.plot(imbalance_ratios, top1_acc_ours, marker='o', linestyle='-', color='royalblue', linewidth=2, markersize=8, label='Ours')\nax.plot(imbalance_ratios, top1_acc_acr, marker='s', linestyle='--', color='seagreen', linewidth=2, markersize=8, label='ACR')\n\n# Set labels and title with improved font sizes and styles\nax.set_xlabel('Imbalance Ratio of Unlabeled Data', fontsize=12, fontweight='bold')\nax.set_ylabel('Top-1 Acc (%)', fontsize=12, fontweight='bold')\nax.set_title('Impact of Imbalance Ratio on Top-1 Accuracy', fontsize=14, fontweight='bold')\n\n# Add grid lines for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Customize ticks for better readability\nax.set_xticks(imbalance_ratios)\nax.set_yticks(np.arange(75, 90, 1))\n\n# Add a legend with a shadow effect\nax.legend(loc='upper right', fontsize=10, shadow=True)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_22.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Perplexity vs. Ratio of 4-bit Utilization\nperplexity = np.array([2.91, 3.11, 3.32, 3.53, 3.63, 3.74, 3.94])\nratio_4bit_utilization = np.array([40, 50, 60, 70, 80, 90, 100])\n\n# Create a new figure with a specific size\nplt.figure(figsize=(5.0, 4.0))\n\n# Plot the data with different styles for each line\nplt.plot(ratio_4bit_utilization, perplexity, label='APTQ', color='b', linestyle='-', linewidth=2, marker='o', markersize=5)\nplt.plot(ratio_4bit_utilization, perplexity + 0.1, label='LLLaMa-7B (FP16): 5.22', color='m', linestyle='--', linewidth=2, marker='s', markersize=5)\nplt.plot(ratio_4bit_utilization, perplexity + 0.2, label='OWQ-4bit: 5.56', color='y', linestyle='-.', linewidth=2, marker='^', markersize=5)\nplt.plot(ratio_4bit_utilization, perplexity + 0.3, label='GPTQ-4bit: 5.62', color='g', linestyle=':', linewidth=2, marker='D', markersize=5)\nplt.plot(ratio_4bit_utilization, perplexity + 0.4, label='LLM-QAT-4bit: 7.4', color='r', linestyle='-', linewidth=2, marker='p', markersize=5)\n\n# Add grid lines for better readability\nplt.grid(True, which='both', linestyle='--', linewidth=0.5, alpha=0.7)\n\n# Set labels and title with improved font sizes\nplt.xlabel('Ratio of 4-bit Utilization (%)', fontsize=10)\nplt.ylabel('Perplexity (PPL)', fontsize=10)\nplt.title('Perplexity vs. Ratio of 4-bit Utilization', fontsize=12)\n\n# Add a legend with a shadow effect\nplt.legend(loc='upper right', fontsize=8, shadow=True)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_23.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Number of training objects vs Coverage Ratio\nx = np.array([2**1, 2**2, 2**3, 2**4, 2**5, 2**6, 2**7])\ny = np.array([67.32, 82.98, 89.53, 90.47, 92.41, 93.7, 96.75])\n\n# Create a new figure with specified size\nplt.figure(figsize=(5.0, 2.0))\n\n# Plot the data with enhanced styling\nplt.plot(x, y, marker='o', linestyle='-', color='b', linewidth=2, markersize=8, label='Coverage Ratio')\n\n# Add grid for better readability\nplt.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Set labels and title with improved font size and style\nplt.xlabel('Number of Training Objects', fontsize=10)\nplt.ylabel('Coverage Ratio (%)', fontsize=10)\nplt.title('Impact of Training Object Size on Coverage Ratio', fontsize=12, fontweight='bold')\n\n# Add a legend with a shadow effect\nplt.legend(loc='upper left', shadow=True, fontsize=8)\n\n# Enhance the x-axis ticks for better readability\nplt.xticks(x, [f'{2**i}' for i in range(1, len(x)+1)])\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_24.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create data\nx = np.linspace(0, 10, 100)\ny = np.sin(x) * np.exp(-x / 5)\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Plot the main line with enhanced style\nax.plot(x, y, label='Average', color='tab:blue', linewidth=2, linestyle='-', marker='o', markersize=5, markevery=10)\n\n# Add a shaded region to represent standard deviation\nstd_dev = 0.1 * np.abs(np.cos(x))\nax.fill_between(x, y - std_dev, y + std_dev, color='tab:blue', alpha=0.3, label='Standard Deviation')\n\n# Set labels and title with improved font sizes\nax.set_xlabel('Iterations', fontsize=12)\nax.set_ylabel('N-ELBO', fontsize=12)\nax.set_title('Convergence of Model', fontsize=14, fontweight='bold')\n\n# Customize grid lines\nax.grid(True, which='both', linestyle='--', linewidth=0.5, color='gray', alpha=0.7)\n\n# Add a legend with a shadow effect\nax.legend(loc='upper right', fontsize=10, shadow=True)\n\n# Enhance the layout for better readability\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_25.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Let's assume we're plotting the growth of different species over time\ntime = np.arange(1, 9)\nspecies1 = np.array([3.2, 3.5, 3.8, 4.0, 4.2, 4.5, 4.7, 5.0])\nspecies2 = np.array([2.8, 3.0, 3.2, 3.4, 3.6, 3.8, 4.0, 4.2])\nspecies3 = np.array([3.0, 3.2, 3.4, 3.6, 3.8, 4.0, 4.2, 4.4])\n\n# Create a new figure with a larger size for better visibility\nfig, ax1 = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the first line with a blue color and a dashed line style\ncolor = 'tab:blue'\nax1.set_xlabel('Number of Experts')\nax1.set_ylabel('DoN', color=color)\nax1.plot(time, species1, color=color, linestyle='--', marker='o', label='Baseline')\nax1.tick_params(axis='y', labelcolor=color)\n\n# Create a second y-axis for the second line\nax2 = ax1.twinx()\n\n# Plot the second line with a green color and a solid line style\ncolor = 'tab:green'\nax2.set_ylabel('Ribbon', color=color)\nax2.plot(time, species2, color=color, linestyle='-', marker='s', label='SoftMoE')\nax2.tick_params(axis='y', labelcolor=color)\n\n# Create a third y-axis for the third line\nax3 = ax1.twinx()\n\n# Plot the third line with a purple color and a dash-dot line style\ncolor = 'tab:purple'\nax3.set_ylabel('Rainbow', color=color)\nax3.plot(time, species3, color=color, linestyle='-.', marker='^', label='Top1-MoE')\nax3.tick_params(axis='y', labelcolor=color)\n\n# Add a legend for each line\nfig.legend(loc=\"upper left\", bbox_to_anchor=(0.1, 0.9), fontsize=10)\n\n# Set the title of the plot\nplt.title('Growth of Different Species Over Time')\n\n# Show the grid for better readability\nax1.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Adjust layout to prevent clipping of labels\nfig.tight_layout()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_26.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Let's assume we're plotting the performance of different models over time\ntime = np.linspace(256, 16384, 100)\nbpe_values = np.sin(time / 1000) * 0.8 + 0.5\nwordpunct_values = np.cos(time / 1000) * 0.7 + 0.5\nwhitespace_values = np.sin(time / 1000 + np.pi/4) * 0.6 + 0.5\n\n# Create a new figure with a larger size for better visibility\nplt.figure(figsize=(8.0, 6.0))\n\n# Plot the data with enhanced styles\nplt.plot(time, bpe_values, label='BPE', color='blue', linestyle='-', linewidth=2, marker='o', markersize=5)\nplt.plot(time, wordpunct_values, label='Wordpunct', color='orange', linestyle='--', linewidth=2, marker='s', markersize=5)\nplt.plot(time, whitespace_values, label='Whitespaces', color='green', linestyle='-.', linewidth=2, marker='^', markersize=5)\n\n# Set labels and title with improved font sizes\nplt.xlabel('Vocabulary Size', fontsize=12)\nplt.ylabel('Test set TPR | FPR = 10^-4', fontsize=12)\nplt.title('Test set TPR | FPR = 10^-4', fontsize=14, fontweight='bold')\n\n# Add grid for better readability\nplt.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Customize ticks\nplt.xticks(fontsize=10)\nplt.yticks(fontsize=10)\n\n# Add a legend with a shadow effect\nplt.legend(loc='upper left', fontsize=10, shadow=True)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_27.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Word error rate (WER) vs. Compression rate for different models\ncompression_rates = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\nwer_cnn = np.array([26.0, 24.7, 23.4, 22.1, 20.8, 19.5, 18.2, 16.9, 15.6, 14.3, 13.0, 11.7, 10.4, 9.1, 7.8, 6.5, 5.2, 3.9, 2.6, 1.3])\nwer_cif = np.array([30.2, 28.6, 27.0, 25.4, 23.8, 22.2, 20.6, 19.0, 17.4, 15.8, 14.2, 12.6, 11.0, 9.4, 7.8, 6.2, 4.6, 3.0, 1.4, 0.0])\nwer_star = np.array([34.4, 32.8, 31.2, 29.6, 28.0, 26.4, 24.8, 23.2, 21.6, 20.0, 18.4, 16.8, 15.2, 13.6, 12.0, 10.4, 8.8, 7.2, 5.6, 4.0])\n\n# Create a new figure with a specific size\nplt.figure(figsize=(6.0, 6.0))\n\n# Plot the data with enhanced styles\nplt.plot(compression_rates, wer_cnn, label='CNN', color='lightcoral', linestyle='--', marker='o', markersize=5)\nplt.plot(compression_rates, wer_cif, label='CIF', color='violet', linestyle='-', marker='s', markersize=5)\nplt.plot(compression_rates, wer_star, label='STAR', color='darkslategray', linestyle=':', marker='^', markersize=5)\n\n# Add grid lines for better readability\nplt.grid(True, which='both', linestyle='--', linewidth=0.5, alpha=0.7)\n\n# Set labels and title with improved font sizes\nplt.xlabel('Compression Rate (%)', fontsize=12)\nplt.ylabel('Word Error Rate (%)', fontsize=12)\nplt.title('Word Error Rate vs. Compression Rate', fontsize=14)\n\n# Add a legend with a shadow effect\nplt.legend(loc='upper right', fontsize=10, shadow=True)\n\n# Enhance the ticks for better readability\nplt.xticks(fontsize=10)\nplt.yticks(fontsize=10)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_28.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Number of exemplars in class 'Run'\nx = np.array([25, 50, 75, 100, 125, 150, 175, 200])\n\n# Sample data: Average accuracy for different models\ny_pilot = np.array([0.85, 0.88, 0.90, 0.92, 0.93, 0.94, 0.95, 0.96])\ny_retrained = np.array([0.75, 0.78, 0.80, 0.82, 0.83, 0.84, 0.85, 0.86])\ny_pretrained = np.array([0.70, 0.72, 0.74, 0.76, 0.78, 0.80, 0.82, 0.84])\n\n# Create a new figure with a specific size\nplt.figure(figsize=(6.0, 4.0))\n\n# Plot the data with different styles and markers\nplt.plot(x, y_pilot, marker='o', linestyle='-', color='red', label='PILOTE')\nplt.plot(x, y_retrained, marker='s', linestyle='--', color='blue', label='Re-trained model')\nplt.plot(x, y_pretrained, marker='^', linestyle='-.', color='green', label='Pre-trained model')\n\n# Set labels and title with improved font sizes\nplt.xlabel('Number of exemplars in class \\'Run\\'', fontsize=12)\nplt.ylabel('Avg. accuracy of five rounds', fontsize=12)\nplt.title('Comparison of Model Accuracy', fontsize=14)\n\n# Add grid lines for better readability\nplt.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Add a legend with a shadow effect\nplt.legend(loc='upper left', shadow=True, fontsize=10)\n\n# Set x and y axis limits for better focus\nplt.xlim(20, 210)\nplt.ylim(0.65, 0.97)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_29.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Average fidelity over a number of steps for different models\nsteps = np.arange(1, 21)\nfidelity_xllm = np.array([0.1, 0.15, 0.2, 0.25, 0.3, 0.35, 0.4, 0.45, 0.5, 0.55,\n                          0.6, 0.65, 0.7, 0.75, 0.8, 0.85, 0.9, 0.95, 1.0, 1.05])\nfidelity_spllm = np.array([0.1, 0.12, 0.14, 0.16, 0.18, 0.2, 0.22, 0.24, 0.26, 0.28,\n                           0.3, 0.32, 0.34, 0.36, 0.38, 0.4, 0.42, 0.44, 0.46, 0.48])\n\n# Create a new figure with a specific size\nplt.figure(figsize=(4.0, 3.0))\n\n# Plot the data with enhanced styles\nplt.plot(steps, fidelity_xllm, label='xLLM', color='royalblue', linestyle='-', marker='o', markersize=5)\nplt.plot(steps, fidelity_spllm, label='Single-Pass LLM', color='darkred', linestyle='--', marker='s', markersize=5)\n\n# Set labels and title with improved font sizes\nplt.xlabel('Number of Steps', fontsize=10)\nplt.ylabel('Avg Fidelity', fontsize=10)\nplt.title('Fidelity Over Training Steps', fontsize=12)\n\n# Add grid for better readability\nplt.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Customize ticks for better clarity\nplt.xticks(fontsize=8)\nplt.yticks(fontsize=8)\n\n# Add a legend with a shadow effect\nplt.legend(loc='upper left', fontsize=8, shadow=True)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Hypothetical data for demonstration\ncategories = ['All', 'MLP', 'GCN', 'NCN', 'NeogNN-BUDDY', 'SEAL', 'Node2Vec']\nhits_ogbl_collab = [75, 80, 78, 76, 74, 72, 70]\nhits_ogbl_ppa = [65, 68, 66, 64, 62, 60, 58]\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Plot the data with enhanced styles\nax.plot(categories, hits_ogbl_collab, marker='o', linestyle='-', color='tab:blue', label='ogbl-collab')\nax.plot(categories, hits_ogbl_ppa, marker='s', linestyle='--', color='tab:orange', label='ogbl-ppa')\n\n# Set labels and title with improved font sizes\nax.set_xlabel('Categories', fontsize=12)\nax.set_ylabel('Hits@50', fontsize=12)\nax.set_title('Comparison of Hits@50 for Different Categories', fontsize=14)\n\n# Add grid lines for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Customize ticks\nax.set_xticks(range(len(categories)))\nax.set_xticklabels(categories, rotation=45, ha='right', fontsize=10)\nax.set_yticks(np.arange(50, 90, 10))\nax.set_yticklabels(np.arange(50, 90, 10), fontsize=10)\n\n# Add a legend with a shadow effect\nax.legend(loc='upper left', fontsize=10, shadow=True)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_30.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Comparing two different methods over a range of layers\nlayers = np.arange(2, 13)\noutside_code_diff = [0.035, 0.045, 0.05, 0.055, 0.06, 0.065, 0.07, 0.075, 0.08, 0.085, 0.09, 0.095]\ninside_code_diff = [0.03, 0.035, 0.04, 0.045, 0.05, 0.055, 0.06, 0.065, 0.07, 0.075, 0.08, 0.085]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Plot the data with enhanced styles\nax.plot(layers, outside_code_diff, label='outside-code-diff', color='tab:blue', linestyle='-', marker='o', markersize=5)\nax.plot(layers, inside_code_diff, label='inside-code-diff', color='tab:orange', linestyle='--', marker='s', markersize=5)\n\n# Set labels and title with improved font sizes\nax.set_xlabel('Layer', fontsize=12)\nax.set_ylabel('Performance', fontsize=12)\nax.set_title('Comparison of Different Methods Over Layers', fontsize=14, fontweight='bold')\n\n# Add grid for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5, alpha=0.7)\n\n# Customize ticks\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Add a legend with a shadow effect\nax.legend(loc='upper left', fontsize=10, shadow=True)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_31.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Different models' performance over different digit lengths\ndigit_lengths = np.array([6, 7, 8, 9])\ndirect_100 = np.array([0.95, 0.92, 0.88, 0.85])\nrfft_100 = np.array([0.93, 0.90, 0.86, 0.83])\nscrap_pad_100 = np.array([0.91, 0.88, 0.84, 0.81])\ndirect_5000 = np.array([0.90, 0.87, 0.83, 0.80])\n\n# Create a new figure with a larger size for better visibility\nplt.figure(figsize=(8.0, 6.0))\n\n# Plot the data with enhanced styles\nplt.plot(digit_lengths, direct_100, label='Direct (100 samples)', color='b', linestyle='-', marker='o')\nplt.plot(digit_lengths, rfft_100, label='RFFT (100 samples)', color='g', linestyle='--', marker='s')\nplt.plot(digit_lengths, scrap_pad_100, label='Scrappad (100 samples)', color='y', linestyle='-.', marker='^')\nplt.plot(digit_lengths, direct_5000, label='Direct (5000 samples)', color='r', linestyle=':', marker='D')\n\n# Add grid lines for better readability\nplt.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Set labels and title with improved font sizes\nplt.xlabel('Digit Length', fontsize=12)\nplt.ylabel('Accuracy', fontsize=12)\nplt.title('Model Performance Over Different Digit Lengths', fontsize=14)\n\n# Add a legend with a shadow effect\nplt.legend(loc='lower right', fontsize=10, shadow=True)\n\n# Customize ticks for better clarity\nplt.xticks(digit_lengths)\nplt.yticks(np.arange(0.3, 1.0, 0.1))\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_32.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create sample data\nx = np.linspace(0, 100, 100)\ny1 = 0.5 * x + 20\ny2 = 0.3 * x + 25\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data with enhanced styles\nax.plot(x, y1, label='iaion', color='orange', linestyle='-', linewidth=2, marker='o', markersize=5)\nax.plot(x, y2, label='CLIP', color='black', linestyle='--', linewidth=2, marker='s', markersize=5)\n\n# Set labels and title with improved font sizes\nax.set_xlabel('Decomposition IO Norm', fontsize=12)\nax.set_ylabel('Accuracy', fontsize=12)\nax.set_title('CIFAR100 States Zero Shot Accuracy', fontsize=14, fontweight='bold')\n\n# Add grid lines for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5, alpha=0.7)\n\n# Customize ticks\nax.set_xticks(np.arange(0, 101, 10))\nax.set_yticks(np.arange(200, 401, 25))\n\n# Add a legend with a shadow effect\nax.legend(loc='upper left', fontsize=10, shadow=True)\n\n# Annotate a specific point\nax.annotate('Optimal Point', xy=(50, 325), xytext=(60, 330),\n             arrowprops=dict(facecolor='black', shrink=0.05),\n             fontsize=10)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_33.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Number of users in development sets over time\nx = np.array([20, 40, 60, 80, 100])\ny1 = np.array([0.5, 0.55, 0.6, 0.65, 0.7])\ny2 = np.array([0.52, 0.57, 0.62, 0.67, 0.72])\ny3 = np.array([0.53, 0.58, 0.63, 0.68, 0.73])\ny4 = np.array([0.54, 0.59, 0.64, 0.69, 0.74])\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Plot the data with different styles and markers\nax.plot(x, y1, label='CNN', color='gold', linestyle='-', marker='o', markersize=5)\nax.plot(x, y2, label='CNN+HMM', color='darkorange', linestyle='--', marker='^', markersize=5)\nax.plot(x, y3, label='RF', color='royalblue', linestyle='-.', marker='s', markersize=5)\nax.plot(x, y4, label='RF+HMM', color='navy', linestyle=':', marker='D', markersize=5)\n\n# Set labels and title with improved font sizes\nax.set_xlabel('No. of Users in Development Set', fontsize=12)\nax.set_ylabel('F1', fontsize=12)\nax.set_title('Performance Metrics Over Time', fontsize=14, fontweight='bold')\n\n# Add grid for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Customize ticks\nax.set_xticks(x)\nax.set_yticks(np.arange(0.5, 0.8, 0.1))\n\n# Add a legend with a shadow effect\nax.legend(loc='upper left', fontsize=10, shadow=True)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_34.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Number of microphones vs. WER and AMI\nmicrophones = np.array([2, 3, 4, 5, 6, 7, 8])\nwer = np.array([27.44, 24.75, 23.38, 22.77, 22.32, 21.47, 21.51])\nami = np.array([6.74, 4.54, 3.96, 3.71, 3.49, 3.34, 3.1])\n\n# Create a new figure with a larger size for better visibility\nplt.figure(figsize=(8.0, 7.0))\n\n# Plot WER data\nplt.plot(microphones, wer, marker='o', linestyle='-', color='royalblue', linewidth=2, markersize=8, label='WER (%)')\n\n# Plot AMI data\nplt.plot(microphones, ami, marker='s', linestyle='--', color='darkorange', linewidth=2, markersize=8, label='AMI (%)')\n\n# Add grid lines for better readability\nplt.grid(True, which='both', linestyle='--', linewidth=0.5, alpha=0.7)\n\n# Set labels with improved font size and style\nplt.xlabel('Number of microphones', fontsize=12, fontweight='bold')\nplt.ylabel('WER (%)', fontsize=12, fontweight='bold')\n\n# Add a title with enhanced styling\nplt.title('WER and AMI Performance with Increasing Microphones', fontsize=14, fontweight='bold')\n\n# Add a legend with a shadow effect\nplt.legend(loc='upper right', fontsize=10, shadow=True)\n\n# Customize ticks for better readability\nplt.xticks(microphones)\nplt.yticks(np.arange(0, 30, 2))\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_35.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.logspace(-7, -4, num=100)\ny1 = 1 + 0.5 * x\ny2 = 1 + 0.3 * x\ny3 = 1 + 0.2 * x\ny4 = 1 + 0.1 * x\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Plot the data with different styles\nax.plot(x, y1, label='M-LVQ-4x8-10', color='darkorange', linestyle='-', linewidth=2, marker='o', markersize=5)\nax.plot(x, y2, label='M-LVQ-4x8-100', color='teal', linestyle='--', linewidth=2, marker='s', markersize=5)\nax.plot(x, y3, label='M-LVQ-4x8-256', color='darkviolet', linestyle='-.', linewidth=2, marker='^', markersize=5)\nax.plot(x, y4, label='M-LVQ-4x8', color='royalblue', linestyle=':', linewidth=2, marker='D', markersize=5)\n\n# Set labels and title\nax.set_xlabel('Quantization error', fontsize=12)\nax.set_ylabel('Search window size ratio', fontsize=12)\nax.set_title('Empirical relat. (B2=8.0)', fontsize=14, fontweight='bold')\n\n# Add grid for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Add a legend with a shadow effect\nax.legend(loc='upper left', fontsize=10, shadow=True)\n\n# Enhance the ticks\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_36.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.linspace(0.1, 1.0, 100)\ny1 = np.sin(x) * np.cos(x)\ny2 = np.sin(x) * np.cos(x) + 0.1\ny3 = np.sin(x) * np.cos(x) + 0.2\n\n# Create a new figure with a larger size for better visibility\nfig, axes = plt.subplots(nrows=1, ncols=3, figsize=(15.0, 5.0), sharey=True)\n\n# Plot the first subplot\naxes[0].plot(x, y1, label='PNA + ours', color='purple', linestyle='-', linewidth=2, marker='o', markersize=4)\naxes[0].fill_between(x, y1 - 0.1, y1 + 0.1, color='lavender', alpha=0.5)\naxes[0].set_title('SPMotif-0.5')\naxes[0].set_xlabel('Ratio r')\naxes[0].set_ylabel('Performance')\naxes[0].legend()\n\n# Plot the second subplot\naxes[1].plot(x, y2, label='PNA + ours', color='purple', linestyle='--', linewidth=2, marker='s', markersize=4)\naxes[1].plot(x, y2, color='orange', linestyle='--', linewidth=2, marker='s', markersize=4)\naxes[1].fill_between(x, y2 - 0.1, y2 + 0.1, color='lightcoral', alpha=0.5)\naxes[1].set_title('SPMotif-0.7')\naxes[1].set_xlabel('Ratio r')\naxes[1].legend()\n\n# Plot the third subplot\naxes[2].plot(x, y3, label='PNA + ours', color='purple', linestyle='-.', linewidth=2, marker='^', markersize=4)\naxes[2].plot(x, y3, color='orange', linestyle='-.', linewidth=2, marker='^', markersize=4)\naxes[2].fill_between(x, y3 - 0.1, y3 + 0.1, color='khaki', alpha=0.5)\naxes[2].set_title('SPMotif-0.9')\naxes[2].set_xlabel('Ratio r')\naxes[2].legend()\n\n# Adjust layout and display the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_37.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Ensemble size vs. Accuracy\nensemble_sizes = np.array([6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30])\naccuracies = np.array([74.5, 75.0, 75.5, 76.0, 76.5, 77.0, 77.5, 78.0, 78.5, 79.0, 79.5, 80.0, 80.5])\n\n# Create a new figure with a specific size\nplt.figure(figsize=(6.0, 5.0))\n\n# Plot the data with enhanced aesthetics\nplt.plot(ensemble_sizes, accuracies, color='navy', linestyle='-', linewidth=2, marker='o', markersize=8, label='Accuracy')\n\n# Fill the area under the curve for better visual appeal\nplt.fill_between(ensemble_sizes, accuracies, color='skyblue', alpha=0.3)\n\n# Set labels and title with improved font sizes\nplt.xlabel('Ensemble Size', fontsize=12)\nplt.ylabel('Accuracy', fontsize=12)\nplt.title('Ensemble Size vs. Model Accuracy', fontsize=14, fontweight='bold')\n\n# Add grid lines for better readability\nplt.grid(True, which='both', linestyle='--', linewidth=0.5, alpha=0.7)\n\n# Customize ticks for better readability\nplt.xticks(fontsize=10)\nplt.yticks(fontsize=10)\n\n# Add a legend with a shadow effect\nplt.legend(loc='upper left', fontsize=10, shadow=True)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_38.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Let's assume we're plotting the performance of different models over epochs\nepochs = np.arange(1, 101)\nmodel1 = np.sin(epochs / 10) * 0.8 + 0.5\nmodel2 = np.cos(epochs / 10) * 0.7 + 0.4\nmodel3 = np.sin(epochs / 10) * 0.6 + 0.3\nmodel4 = np.cos(epochs / 10) * 0.5 + 0.2\nmodel5 = np.sin(epochs / 10) * 0.4 + 0.1\n\n# Create a new figure with a specific size\nplt.figure(figsize=(6.0, 3.0))\n\n# Plot each model with different styles\nplt.plot(epochs, model1, label='GPT-Neo', color='darkred', linestyle='-', marker='o', markersize=4)\nplt.plot(epochs, model2, label='5', color='gold', linestyle='--', marker='s', markersize=4)\nplt.plot(epochs, model3, label='3', color='darkblue', linestyle='-.', marker='^', markersize=4)\nplt.plot(epochs, model4, label='7', color='darkgreen', linestyle=':', marker='D', markersize=4)\nplt.plot(epochs, model5, label='30', color='darkorange', linestyle='-', marker='x', markersize=4)\n\n# Set labels and title with improved font sizes\nplt.xlabel('Number of Epochs', fontsize=10)\nplt.ylabel('Performance (MA)', fontsize=10)\nplt.title('Model Performance Over Epochs', fontsize=12)\n\n# Add grid for better readability\nplt.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Add a legend with a shadow effect\nplt.legend(loc='upper right', fontsize=8, shadow=True)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_39.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.array([96, 192, 336, 720])\ny1 = np.array([0.12, 0.14, 0.16, 0.18])\ny2 = np.array([0.10, 0.12, 0.14, 0.16])\ny3 = np.array([0.08, 0.10, 0.12, 0.14])\ny4 = np.array([0.06, 0.08, 0.10, 0.12])\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(15.0, 4.0))\n\n# Plot the data with different styles and markers\nax.plot(x, y1, label='pred_length=96', color='blue', linestyle='-', marker='o', markersize=8)\nax.plot(x, y2, label='pred_length=192', color='orange', linestyle='--', marker='s', markersize=8)\nax.plot(x, y3, label='pred_length=336', color='green', linestyle='-.', marker='^', markersize=8)\nax.plot(x, y4, label='pred_length=720', color='red', linestyle=':', marker='x', markersize=8)\n\n# Set labels and title\nax.set_xlabel('Time (seconds)', fontsize=12)\nax.set_ylabel('MSE', fontsize=12)\nax.set_title('Comparison of MSE Over Time', fontsize=14, fontweight='bold')\n\n# Add grid for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Customize ticks\nax.set_xticks(x)\nax.set_yticks(np.arange(0.05, 0.2, 0.05))\n\n# Add legend with a shadow effect\nax.legend(loc='upper left', fontsize=10, shadow=True)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data for plotting\nx = np.array([224, 128, 64, 32])\ny1 = np.array([75, 60, 45, 30])\ny2 = np.array([80, 70, 60, 50])\ny3 = np.array([70, 65, 55, 45])\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(9.0, 4.0))\n\n# Plot the data with different styles and markers\nax.plot(x, y1, label='ImageNet-1k', color='darkorange', linestyle='-', marker='o', markersize=8)\nax.plot(x, y2, label='ImageNet-C/P (Fog)', color='darkorange', linestyle='--', marker='s', markersize=8)\nax.plot(x, y3, label='ImageNet-C/P (Fog)', color='royalblue', linestyle='-.', marker='^', markersize=8)\n\n# Set labels and title with improved font sizes\nax.set_xlabel('Serial (n=8, m=1)', fontsize=12)\nax.set_ylabel('Top-1 Acc.', fontsize=12)\nax.set_title('Comparison of Different Models', fontsize=14, fontweight='bold')\n\n# Add grid lines for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5, alpha=0.7)\n\n# Add a legend with a shadow effect\nax.legend(loc='upper right', fontsize=10, shadow=True)\n\n# Annotate specific points for emphasis\nfor i, txt in enumerate(y1):\n    ax.annotate(f'{txt}%', (x[i], y1[i]), textcoords=\"offset points\", xytext=(0,10), ha='center', fontsize=9)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_40.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: SNR vs. Classification Accuracy\nsnr = np.array([5.0, 7.5, 10.0, 12.5, 15.0, 17.5, 20.0, 22.5, 25.0])\naccuracy_jpegldpc = np.array([95, 85, 75, 65, 55, 45, 35, 25, 15])\naccuracy_deepjsscwoffdm = np.array([85, 75, 65, 55, 45, 35, 25, 15, 5])\naccuracy_deepjsscwoofdm = np.array([75, 65, 55, 45, 35, 25, 15, 5, 0])\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data with different styles and markers\nax.plot(snr, accuracy_jpegldpc, label='JPEG+LDPC', color='b', linestyle='-', marker='o', linewidth=2)\nax.plot(snr, accuracy_deepjsscwoffdm, label='DEEPJSCC w/o OFDM', color='orange', linestyle='--', marker='s', linewidth=2)\nax.plot(snr, accuracy_deepjsscwoofdm, label='DEEPJSCC w/ OFDM', color='green', linestyle='-.', marker='^', linewidth=2)\nax.plot(snr, accuracy_deepjsscwoffdm, label='OURS', color='red', linestyle=':', marker='x', linewidth=2)\n\n# Set labels and title\nax.set_xlabel('SNR (dB)', fontsize=12)\nax.set_ylabel('Classification Accuracy (%)', fontsize=12)\nax.set_title('Classification Accuracy vs. SNR', fontsize=14, fontweight='bold')\n\n# Add grid for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Customize ticks\nax.set_xticks(snr)\nax.set_yticks(np.arange(0, 101, 10))\n\n# Add a legend with a shadow effect\nax.legend(loc='lower right', fontsize=10, shadow=True)\n\n# Annotate a specific point\nax.annotate('Peak', xy=(15.0, 55), xytext=(16, 60),\n             arrowprops=dict(facecolor='black', shrink=0.05),\n             fontsize=10, color='black')\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_41.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data for demonstration\nx = np.linspace(0, 200, 100)\ny1 = np.sin(x / 50) + 1\ny2 = x**2 / 10000 + 1\ny3 = np.random.normal(3, 0.5, 100)\ny4 = np.exp(x / 100)\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(6.0, 8.0))\n\n# Plot the data with different styles and markers\nax.plot(x, y1, label='Line 1 (Sinusoidal)', color='purple', linestyle='-', linewidth=2, marker='o', markersize=5, markevery=10)\nax.plot(x, y2, label='Line 2 (Quadratic)', color='blue', linestyle='--', linewidth=2, marker='s', markersize=5, markevery=10)\nax.plot(x, y3, label='Line 3 (Random Noise)', color='green', linestyle='-.', linewidth=2, marker='^', markersize=5, markevery=10)\nax.plot(x, y4, label='Line 4 (Exponential Focus)', color='red', linestyle=':', linewidth=2, marker='D', markersize=5, markevery=10)\n\n# Set labels with more descriptive text\nax.set_xlabel('Gradient Steps (x 62.5K)', fontsize=12)\nax.set_ylabel('Performance Value', fontsize=12)\nax.set_title('Comparison of Different Line Styles', fontsize=14, fontweight='bold')\n\n# Add grid for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Add a legend with a shadow effect\nax.legend(loc='upper left', fontsize=10, shadow=True)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_42.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data for demonstration\nx = np.linspace(0, 200, 201)\ny1 = np.sin(x / 62.5) + 0.5 * np.cos(x / 100)\ny2 = np.cos(x / 62.5) - 0.5 * np.sin(x / 100)\ny3 = np.polyval([0.01, -0.005, 0.001], x)\n\n# Create a new figure with a larger size for better visibility\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10.0, 5.0), sharey=True)\n\n# Plot the first line chart\nax1.plot(x, y1, label='Line 1', color='orange', linestyle='-', linewidth=2, marker='o', markersize=5)\nax1.plot(x, y2, label='Line 2', color='blue', linestyle='--', linewidth=2, marker='s', markersize=5)\nax1.set_title('Line Chart')\nax1.set_xlabel('Gradient Steps (x 62.5K)')\nax1.set_ylabel('Polynomial Value')\nax1.legend(loc='upper right')\n\n# Plot the second line chart\nax2.plot(x, y3, label='Line 3', color='green', linestyle='-', linewidth=2, marker='^', markersize=5)\nax2.set_title('Polynomial Trend (from Line 2)')\nax2.set_xlabel('Gradient Steps (x 62.5K)')\nax2.set_ylabel('Polynomial Value')\nax2.legend(loc='upper right')\n\n# Enhance the layout\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_43.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\ny1 = np.array([55, 60, 65, 70, 75, 80, 85, 90, 95, 100])\ny2 = np.array([50, 55, 60, 65, 70, 75, 80, 85, 90, 95])\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(12.0, 5.0))\n\n# Plot the data with enhanced styles\nax.plot(x, y1, label='ogbl-collab 2022', color='royalblue', linestyle='-', marker='o', markersize=8)\nax.plot(x, y2, label='ogbl-collab 2023', color='darkorange', linestyle='--', marker='s', markersize=8)\n\n# Set labels and title with improved font sizes\nax.set_xlabel('Epoch', fontsize=12)\nax.set_ylabel('Hits@50', fontsize=12)\nax.set_title('ogbl-collab Results', fontsize=14, fontweight='bold')\n\n# Add grid lines for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5, alpha=0.7)\n\n# Customize ticks\nax.set_xticks(x)\nax.set_yticks(np.arange(50, 101, 10))\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Add a legend with a shadow effect\nax.legend(loc='upper left', fontsize=10, shadow=True)\n\n# Annotate specific points for emphasis\nfor i, txt in enumerate(y1):\n    ax.annotate(txt, (x[i], y1[i]), textcoords=\"offset points\", xytext=(0,10), ha='center', fontsize=9)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_44.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Let's assume we're plotting the growth of different types of plants over time\ntime = np.linspace(0, 60, 100)\ngrowth_standard = np.exp(time / 20)\ngrowth_constrained = np.exp(time / 30)\ngrowth_experimental = np.exp(time / 40)\ngrowth_hypothetical = np.exp(time / 50)\n\n# Create a new figure with a larger size for better visibility\nplt.figure(figsize=(10.0, 6.0))\n\n# Plot each line with different styles and markers\nplt.plot(time, growth_standard, label='Standard', color='b', linestyle='-', marker='o')\nplt.plot(time, growth_constrained, label='Constrained', color='r', linestyle='--', marker='s')\nplt.plot(time, growth_experimental, label='Experimental', color='g', linestyle='-.', marker='^')\nplt.plot(time, growth_hypothetical, label='Hypothetical', color='m', linestyle=':', marker='p')\n\n# Set labels with more descriptive text\nplt.xlabel('Time (days)', fontsize=12)\nplt.ylabel('Growth (units)', fontsize=12)\nplt.title('Plant Growth Over Time', fontsize=14, fontweight='bold')\n\n# Add grid lines for better readability\nplt.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Customize ticks\nplt.xticks(np.arange(0, 61, 10))\nplt.yticks(np.arange(1, 13, 1))\n\n# Add a legend with a shadow effect\nplt.legend(loc='upper left', shadow=True, fontsize=10)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_45.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.logspace(1, 4, 100)\ny1 = x**2\ny2 = x**3\ny3 = x**4\ny4 = x**5\n\n# Create a new figure with a larger size for better visibility\nfig, axes = plt.subplots(nrows=2, ncols=2, figsize=(12.0, 8.0), sharex=True, sharey=True)\n\n# Plot data on each subplot\naxes[0, 0].plot(x, y1, label='Standard', color='tab:blue', linestyle='-', linewidth=2, marker='o', markersize=5)\naxes[0, 0].plot(x, y2, label='Constrained', color='tab:orange', linestyle='--', linewidth=2, marker='s', markersize=5)\naxes[0, 0].plot(x, y3, label='Innovative', color='tab:green', linestyle='-.', linewidth=2, marker='^', markersize=5)\naxes[0, 0].plot(x, y4, label='Experimental', color='tab:red', linestyle=':', linewidth=2, marker='D', markersize=5)\naxes[0, 0].set_title('Graph Variation 1')\naxes[0, 0].set_xlabel('N')\naxes[0, 0].set_ylabel('Peak Performance')\naxes[0, 0].legend(loc='upper left')\n\naxes[0, 1].plot(x, y1, label='Standard', color='tab:blue', linestyle='-', linewidth=2, marker='o', markersize=5)\naxes[0, 1].plot(x, y2, label='Constrained', color='tab:orange', linestyle='--', linewidth=2, marker='s', markersize=5)\naxes[0, 1].plot(x, y3, label='Innovative', color='tab:green', linestyle='-.', linewidth=2, marker='^', markersize=5)\naxes[0, 1].plot(x, y4, label='Experimental', color='tab:red', linestyle=':', linewidth=2, marker='D', markersize=5)\naxes[0, 1].set_title('Graph Variation 2')\naxes[0, 1].set_xlabel('N')\naxes[0, 1].set_ylabel('Peak Performance')\naxes[0, 1].legend(loc='upper left')\n\naxes[1, 0].plot(x, y1, label='Standard', color='tab:blue', linestyle='-', linewidth=2, marker='o', markersize=5)\naxes[1, 0].plot(x, y2, label='Constrained', color='tab:orange', linestyle='--', linewidth=2, marker='s', markersize=5)\naxes[1, 0].plot(x, y3, label='Innovative', color='tab:green', linestyle='-.', linewidth=2, marker='^', markersize=5)\naxes[1, 0].plot(x, y4, label='Experimental', color='tab:red', linestyle=':', linewidth=2, marker='D', markersize=5)\naxes[1, 0].set_title('Graph Variation 3')\naxes[1, 0].set_xlabel('N')\naxes[1, 0].set_ylabel('Peak Performance')\naxes[1, 0].legend(loc='upper left')\n\naxes[1, 1].plot(x, y1, label='Standard', color='tab:blue', linestyle='-', linewidth=2, marker='o', markersize=5)\naxes[1, 1].plot(x, y2, label='Constrained', color='tab:orange', linestyle='--', linewidth=2, marker='s', markersize=5)\naxes[1, 1].plot(x, y3, label='Innovative', color='tab:green', linestyle='-.', linewidth=2, marker='^', markersize=5)\naxes[1, 1].plot(x, y4, label='Experimental', color='tab:red', linestyle=':', linewidth=2, marker='D', markersize=5)\naxes[1, 1].set_title('Graph Variation 4')\naxes[1, 1].set_xlabel('N')\naxes[1, 1].set_ylabel('Peak Performance')\naxes[1, 1].legend(loc='upper left')\n\n# Adjust layout for better spacing\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_46.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data for plotting\nx = np.linspace(0, 25, 100)\ny1 = np.sin(x) * 0.5 + 0.5\ny2 = np.cos(x) * 0.5 - 0.5\n\n# Create a new figure with a larger size for better visibility\nfig, (ax1, ax2) = plt.subplots(2, 1, figsize=(6.0, 10.0), sharex=True)\n\n# Plot the first subplot\nax1.plot(x, y1, color='b', linestyle='-', linewidth=2, marker='o', markersize=4, label='Standard Activity')\nax1.set_title('Daytime Activity Monitoring', fontsize=14, fontweight='bold')\nax1.set_ylabel('Activity Level', fontsize=12)\nax1.grid(True, which='both', linestyle='--', linewidth=0.5)\nax1.legend(loc='upper right')\n\n# Plot the second subplot\nax2.plot(x, y2, color='r', linestyle='--', linewidth=2, marker='s', markersize=4, label='Innovative Activity')\nax2.set_xlabel('Time (Hours)', fontsize=12)\nax2.set_ylabel('Activity Level', fontsize=12)\nax2.grid(True, which='both', linestyle='--', linewidth=0.5)\nax2.legend(loc='upper right')\n\n# Adjust layout for better spacing between subplots\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_47.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Performance metrics over time\ntime = np.linspace(0, 12, 100)\nperformance_standard = np.sin(time) + 0.5 * np.cos(2 * time)\nperformance_innovative = np.sin(time) + 0.5 * np.cos(2 * time) + 0.3\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot the data with enhanced styles\nax.plot(time, performance_standard, label='Standard Performance', color='b', linestyle='-', linewidth=2, marker='o', markersize=4)\nax.plot(time, performance_innovative, label='Innovative Performance', color='r', linestyle='--', linewidth=2, marker='s', markersize=4)\n\n# Fill between the two lines to create a shaded area\nax.fill_between(time, performance_standard, performance_innovative, where=(performance_innovative > performance_standard), color='lightcoral', alpha=0.5)\nax.fill_between(time, performance_standard, performance_innovative, where=(performance_innovative <= performance_standard), color='lightblue', alpha=0.5)\n\n# Set labels and title with improved font sizes\nax.set_xlabel('Time (Months)', fontsize=12)\nax.set_ylabel('Performance Index', fontsize=12)\nax.set_title('Comparative Performance Analysis Over Time', fontsize=14, fontweight='bold')\n\n# Add grid for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5, alpha=0.7)\n\n# Customize ticks\nax.set_xticks(np.arange(0, 13, 1))\nax.set_yticks(np.arange(0, 1.1, 0.2))\n\n# Add a legend with a shadow effect\nax.legend(loc='upper left', fontsize=10, shadow=True)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_48.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Monthly sales and average temperature over a year\nmonths = np.arange(1, 13)\nsales = np.array([1200, 1150, 1300, 1400, 1500, 1600, 1700, 1800, 1900, 2000, 2100, 2200])\ntemperature = np.array([10, 12, 15, 18, 20, 22, 24, 23, 21, 19, 17, 15])\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot the data with enhanced aesthetics\nax.plot(months, sales, label='Monthly Sales', color='royalblue', linestyle='-', linewidth=2, marker='o', markersize=8)\nax.plot(months, temperature, label='Average Temperature', color='darkred', linestyle='--', linewidth=2, marker='s', markersize=8)\n\n# Set labels with more descriptive text\nax.set_xlabel('Month', fontsize=12)\nax.set_ylabel('Temperature (\u00b0C)', fontsize=12)\nax.set_title('Sales and Temperature Correlation Over a Year', fontsize=14, fontweight='bold')\n\n# Add grid lines for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5, alpha=0.7)\n\n# Customize ticks\nax.set_xticks(months)\nax.set_xticklabels(['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'])\nax.set_yticks(np.arange(10, 25, 1))\n\n# Add a legend with a shadow effect\nax.legend(loc='upper left', fontsize=10, shadow=True)\n\n# Annotate specific points for emphasis\nfor i, txt in enumerate(sales):\n    ax.annotate(f'{txt}', (months[i], sales[i]), textcoords=\"offset points\", xytext=(0,10), ha='center', fontsize=9)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_49.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data for three different scenarios\ntime = np.linspace(0, 10, 100)\ngrowth = np.exp(time / 5)\ndecay = np.exp(-time / 5)\noscillation = np.sin(time) + 1.5\n\n# Create a new figure with a larger size for better visibility\nfig, axes = plt.subplots(nrows=3, ncols=1, figsize=(6.0, 9.0), sharex=True)\n\n# Plot the growth scenario\naxes[0].plot(time, growth, color='green', linestyle='-', linewidth=2, marker='o', markersize=5, label='Growth')\naxes[0].set_title('Exponential Growth Over Time')\naxes[0].set_ylabel('Value')\naxes[0].grid(True, which='both', linestyle='--', linewidth=0.5)\naxes[0].legend()\n\n# Plot the decay scenario\naxes[1].plot(time, decay, color='red', linestyle='--', linewidth=2, marker='x', markersize=5, label='Decay')\naxes[1].set_title('Exponential Decay Over Time')\naxes[1].set_ylabel('Value')\naxes[1].grid(True, which='both', linestyle='--', linewidth=0.5)\naxes[1].legend()\n\n# Plot the oscillation scenario\naxes[2].plot(time, oscillation, color='blue', linestyle='-.', linewidth=2, marker='s', markersize=5, label='Oscillation')\naxes[2].set_title('Oscillatory Behavior Over Time')\naxes[2].set_xlabel('Time')\naxes[2].set_ylabel('Value')\naxes[2].grid(True, which='both', linestyle='--', linewidth=0.5)\naxes[2].legend()\n\n# Adjust layout for better spacing between subplots\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Accuracy of different models over varying digit lengths\ndigit_lengths = np.arange(1, 11)\nmodel1_accuracy = [0.95, 0.93, 0.92, 0.91, 0.90, 0.89, 0.88, 0.87, 0.86, 0.85]\nmodel2_accuracy = [0.90, 0.88, 0.87, 0.86, 0.85, 0.84, 0.83, 0.82, 0.81, 0.80]\nmodel3_accuracy = [0.85, 0.84, 0.83, 0.82, 0.81, 0.80, 0.79, 0.78, 0.77, 0.76]\n\n# Create a new figure with a specific size\nplt.figure(figsize=(6.0, 4.0))\n\n# Plot the data with enhanced styles\nplt.plot(digit_lengths, model1_accuracy, label='5-shot direct', color='royalblue', linestyle='-', marker='o', markersize=5)\nplt.plot(digit_lengths, model2_accuracy, label='5-shot scratchpad', color='darkorange', linestyle='--', marker='s', markersize=5)\nplt.plot(digit_lengths, model3_accuracy, label='5-shot rule-following', color='forestgreen', linestyle='-.', marker='^', markersize=5)\n\n# Set labels and title with improved font sizes\nplt.xlabel('Digit Length', fontsize=12)\nplt.ylabel('Accuracy', fontsize=12)\nplt.title('Model Performance Over Different Digit Lengths', fontsize=14)\n\n# Add grid for better readability\nplt.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Customize ticks for better clarity\nplt.xticks(fontsize=10)\nplt.yticks(fontsize=10)\n\n# Add a legend with a shadow effect\nplt.legend(loc='lower right', fontsize=10, shadow=True)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_50.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data for plotting\nx = np.linspace(0, 20, 100)\ny1 = np.sin(x) + np.random.normal(0, 0.1, 100)\ny2 = np.cos(x) + np.random.normal(0, 0.1, 100)\ny3 = np.cumsum(y1)\n\n# Create a new figure with a larger size for better visibility\nfig, axes = plt.subplots(nrows=3, ncols=1, figsize=(5.0, 10.0), sharex=True)\n\n# Plot the first subplot: Smoothed Data\naxes[0].plot(x, y1, color='purple', linewidth=2, linestyle='-', marker='o', markersize=4, label='Smoothed Data')\naxes[0].set_title('Smoothed Representation', fontsize=14, fontweight='bold')\naxes[0].set_ylabel('Value', fontsize=12)\naxes[0].grid(True, which='both', linestyle='--', linewidth=0.5)\naxes[0].legend(loc='upper right')\n\n# Plot the second subplot: First Difference of Data\ndiff_y1 = np.diff(y1)\naxes[1].plot(x[:-1], diff_y1, color='orange', linewidth=2, linestyle='-', marker='x', markersize=4, label='First Difference Data')\naxes[1].set_title('First Difference of Data', fontsize=14, fontweight='bold')\naxes[1].set_ylabel('Delta Value', fontsize=12)\naxes[1].grid(True, which='both', linestyle='--', linewidth=0.5)\naxes[1].legend(loc='upper right')\n\n# Plot the third subplot: Cumulative Sum Over Time\naxes[2].plot(x, y3, color='green', linewidth=2, linestyle='-', marker='s', markersize=4, label='Cumulative Sum')\naxes[2].set_title('Cumulative Sum Over Time', fontsize=14, fontweight='bold')\naxes[2].set_xlabel('Time', fontsize=12)\naxes[2].set_ylabel('Cumulative Value', fontsize=12)\naxes[2].grid(True, which='both', linestyle='--', linewidth=0.5)\naxes[2].legend(loc='upper left')\n\n# Adjust layout for better spacing between subplots\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_51.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data for different patterns\nx = np.linspace(0, 10, 100)\ny1 = np.sin(x)\ny2 = np.cos(x)\ny3 = np.exp(-x / 5)\ny4 = np.log(x + 1)\n\n# Create a new figure with a larger size for better visibility\nfig, axes = plt.subplots(nrows=4, ncols=1, figsize=(6.0, 12.0), sharex=True)\n\n# Plot the first subplot: Sin Wave\naxes[0].plot(x, y1, color='purple', linestyle='-', linewidth=2, marker='o', markersize=4, label='Sin Wave')\naxes[0].set_title('Sinoidal Pattern')\naxes[0].set_ylabel('Amplitude')\naxes[0].legend()\n\n# Plot the second subplot: Cos Wave\naxes[1].plot(x, y2, color='green', linestyle='--', linewidth=2, marker='s', markersize=4, label='Cos Wave')\naxes[1].set_title('Cosine Pattern')\naxes[1].set_ylabel('Amplitude')\naxes[1].legend()\n\n# Plot the third subplot: Exp Decay\naxes[2].plot(x, y3, color='blue', linestyle='-.', linewidth=2, marker='^', markersize=4, label='Exp Decay')\naxes[2].set_title('Exponential Decay')\naxes[2].set_ylabel('Value')\naxes[2].legend()\n\n# Plot the fourth subplot: Log Growth\naxes[3].plot(x, y4, color='red', linestyle=':', linewidth=2, marker='D', markersize=4, label='Log Growth')\naxes[3].set_title('Logarithmic Growth')\naxes[3].set_xlabel('Time')\naxes[3].set_ylabel('Value')\naxes[3].legend()\n\n# Adjust layout for better spacing between subplots\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_52.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data for plotting\nx = np.linspace(0, 1, 100)\ny1 = np.sin(x * np.pi / 2) + 0.5\ny2 = np.cos(x * np.pi / 2) + 0.5\ny3 = np.tan(x * np.pi / 2) + 0.5\ny4 = np.exp(-x) + 0.5\n\n# Create a new figure with a larger size for better visibility\nfig, axes = plt.subplots(nrows=2, ncols=2, figsize=(9.0, 6.0), sharex=True, sharey=True)\n\n# Plot the data on each subplot\naxes[0, 0].plot(x, y1, color='b', linestyle='-', linewidth=2, marker='o', markersize=5, label='Positive bound')\naxes[0, 1].plot(x, y2, color='r', linestyle='--', linewidth=2, marker='s', markersize=5, label='Negative bound')\naxes[1, 0].plot(x, y3, color='g', linestyle='-.', linewidth=2, marker='^', markersize=5, label='Contrastive loss weight')\naxes[1, 1].plot(x, y4, color='m', linestyle=':', linewidth=2, marker='D', markersize=5, label='Fuzzy coefficient')\n\n# Set titles and labels for each subplot\naxes[0, 0].set_title('a')\naxes[0, 1].set_title('b')\naxes[1, 0].set_title('c')\naxes[1, 1].set_title('d')\n\n# Add a common x and y axis label\nfig.text(0.5, 0.04, 'X-axis', ha='center', fontsize=12)\nfig.text(0.04, 0.5, 'Y-axis', va='center', rotation='vertical', fontsize=12)\n\n# Add a global title for the entire figure\nfig.suptitle('Different Types of Plots', fontsize=16, fontweight='bold')\n\n# Add legends to each subplot\nfor ax in axes.flat:\n    ax.legend(loc='upper right')\n\n# Adjust layout to prevent overlap\nplt.tight_layout(rect=[0, 0.03, 1, 0.95])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_53.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data for plotting\nx = np.linspace(0.0, 1.0, 100)\ny1 = np.sin(x * np.pi / 2) + 0.5\ny2 = np.cos(x * np.pi / 2) + 0.5\ny3 = np.tan(x * np.pi / 4) + 0.5\ny4 = np.exp(-x) + 0.5\ny5 = np.log(x + 1) + 0.5\n\n# Create a new figure with a larger size for better visibility\nfig, axes = plt.subplots(nrows=3, ncols=2, figsize=(12.0, 8.0), sharex=True, sharey=True)\n\n# Plot the data on each subplot\naxes[0, 0].plot(x, y1, color='red', linestyle='-', linewidth=2, marker='o', markersize=5, label='Positive Bound')\naxes[0, 0].set_title('Positive Bound')\naxes[0, 0].set_xlabel('X-axis')\naxes[0, 0].set_ylabel('Y-axis')\naxes[0, 0].grid(True, which='both', linestyle='--', linewidth=0.5)\naxes[0, 0].legend()\n\naxes[0, 1].plot(x, y2, color='green', linestyle='--', linewidth=2, marker='s', markersize=5, label='Negative Bound')\naxes[0, 1].set_title('Negative Bound')\naxes[0, 1].set_xlabel('X-axis')\naxes[0, 1].set_ylabel('Y-axis')\naxes[0, 1].grid(True, which='both', linestyle='--', linewidth=0.5)\naxes[0, 1].legend()\n\naxes[1, 0].plot(x, y3, color='purple', linestyle='-.', linewidth=2, marker='^', markersize=5, label='Fuzzy Coefficient')\naxes[1, 0].set_title('Fuzzy Coefficient')\naxes[1, 0].set_xlabel('X-axis')\naxes[1, 0].set_ylabel('Y-axis')\naxes[1, 0].grid(True, which='both', linestyle='--', linewidth=0.5)\naxes[1, 0].legend()\n\naxes[1, 1].plot(x, y4, color='blue', linestyle=':', linewidth=2, marker='D', markersize=5, label='Contrastive Loss Weight')\naxes[1, 1].set_title('Contrastive Loss Weight')\naxes[1, 1].set_xlabel('X-axis')\naxes[1, 1].set_ylabel('Y-axis')\naxes[1, 1].grid(True, which='both', linestyle='--', linewidth=0.5)\naxes[1, 1].legend()\n\naxes[2, 0].plot(x, y5, color='orange', linestyle='-', linewidth=2, marker='P', markersize=5, label='Additional Metric 1')\naxes[2, 0].set_title('Additional Metric 1')\naxes[2, 0].set_xlabel('X-axis')\naxes[2, 0].set_ylabel('Y-axis')\naxes[2, 0].grid(True, which='both', linestyle='--', linewidth=0.5)\naxes[2, 0].legend()\n\naxes[2, 1].plot(x, y5, color='cyan', linestyle='--', linewidth=2, marker='H', markersize=5, label='Additional Metric 2')\naxes[2, 1].set_title('Additional Metric 2')\naxes[2, 1].set_xlabel('X-axis')\naxes[2, 1].set_ylabel('Y-axis')\naxes[2, 1].grid(True, which='both', linestyle='--', linewidth=0.5)\naxes[2, 1].legend()\n\n# Adjust layout and display the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_54.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Driving Style vs Relaxation Level\ndriving_styles = ['Passive', 'Rail', 'Replay', 'Sportive']\nrelaxation_levels = [\n    [1.2, 1.1, 1.3, 1.4],\n    [1.0, 0.9, 1.1, 1.2],\n    [0.8, 0.7, 0.9, 1.0],\n    [0.6, 0.5, 0.7, 0.8]\n]\n\n# Create a new figure with a larger size for better visibility\nfig, axes = plt.subplots(1, 3, figsize=(12.0, 4.0), sharey=True)\n\n# Plot each driving style with different colors and line styles\nfor i, (style, levels) in enumerate(zip(driving_styles, relaxation_levels)):\n    ax = axes[i]\n    ax.plot(levels, label=style, marker='o', linestyle='-', linewidth=2, markersize=8)\n    ax.set_title(f'{style} vs Relaxation')\n    ax.set_xlabel('Relaxation Level')\n    ax.set_ylabel('Driving Style')\n    ax.set_ylim(0, 1.5)\n    ax.grid(True, which='both', linestyle='--', linewidth=0.5)\n    ax.legend(loc='upper right')\n\n# Adjust layout for better spacing between subplots\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_55.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Performance gain over time for different strategies\naugust = np.array([0, 0.125, 0.25, 0.5, 1, 2, 4, 8])\ncontent = np.array([0.5, 1.2, 2.1, 3.5, 5.0, 6.5, 7.8, 8.2])\norganization = np.array([0.3, 1.0, 1.8, 3.0, 4.5, 5.5, 6.8, 7.9])\nlanguage = np.array([0.4, 1.1, 1.9, 3.2, 4.7, 5.7, 6.9, 7.5])\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(8.0, 3.0))\n\n# Plot the data with enhanced styles\nax.plot(august, content, label='Content', color='royalblue', linestyle='-', marker='o', markersize=5)\nax.plot(august, organization, label='Organization', color='darkred', linestyle='--', marker='s', markersize=5)\nax.plot(august, language, label='Language', color='forestgreen', linestyle='-.', marker='^', markersize=5)\n\n# Set labels and title with improved font sizes\nax.set_xlabel('n_aug', fontsize=12)\nax.set_ylabel('Performance Gain (%)', fontsize=12)\nax.set_title('Dynamic Performance Gain Across Different n_aug Levels', fontsize=14, fontweight='bold')\n\n# Add grid lines for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5, alpha=0.7)\n\n# Customize ticks\nax.set_xticks(august)\nax.set_yticks(np.arange(0, 9, 1))\n\n# Add a legend with a shadow effect\nax.legend(loc='upper left', fontsize=10, shadow=True)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_56.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data for plotting\nx = np.linspace(0, 80, 100)\ny1 = 0.6 + 0.1 * np.sin(x / 10)\ny2 = 0.55 + 0.05 * np.cos(x / 10)\ny3 = 0.62 + 0.08 * np.tan(x / 20)\n\n# Create a new figure with a larger size for better visibility\nfig, axes = plt.subplots(1, 3, figsize=(9.0, 3.0), sharey=True)\n\n# Plotting the first subplot\naxes[0].plot(x, y1, color='red', linestyle='-', linewidth=2, marker='o', markersize=5, label='COCO (10k)')\naxes[0].set_title('COCO 10K')\naxes[0].set_xlabel('Decomposition IO Norm')\naxes[0].set_ylabel('Accuracy')\naxes[0].grid(True)\naxes[0].legend(loc='upper left')\n\n# Plotting the second subplot\naxes[1].plot(x, y2, color='blue', linestyle='--', linewidth=2, marker='^', markersize=5, label='LAION (10k)')\naxes[1].set_title('LAION 10K')\naxes[1].set_xlabel('Decomposition IO Norm')\naxes[1].grid(True)\naxes[1].legend(loc='upper left')\n\n# Plotting the third subplot\naxes[2].plot(x, y3, color='green', linestyle='-.', linewidth=2, marker='s', markersize=5, label='COCO & LAION 5K')\naxes[2].plot(x, y2, color='orange', linestyle=':', linewidth=2, marker='x', markersize=5, label='LAION 5K')\naxes[2].set_title('COCO & LAION 5K')\naxes[2].set_xlabel('Decomposition IO Norm')\naxes[2].grid(True)\naxes[2].legend(loc='upper left')\n\n# Adjust layout for better spacing\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_57.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data for plotting\nx = np.linspace(0.01, 0.3, 100)\ny1 = 0.18 - 0.05 * x\ny2 = 0.16 - 0.04 * x\ny3 = 0.14 - 0.03 * x\ny4 = 0.12 - 0.02 * x\ny5 = 0.10 - 0.01 * x\n\n# Create a new figure with a larger size for better visibility\nfig, axes = plt.subplots(nrows=2, ncols=2, figsize=(12.0, 9.0), sharex=True, sharey=True)\n\n# Plot the first subplot\naxes[0, 0].plot(x, y1, label='Error Rate vs. Learning Rate (Batch Size=64)', color='blue', linestyle='-', linewidth=2, marker='o', markersize=5)\naxes[0, 0].plot(x, y2, label='Error Rate vs. Learning Rate (Batch Size=128)', color='red', linestyle='--', linewidth=2, marker='s', markersize=5)\naxes[0, 0].set_title('Error Rate vs. Learning Rate')\naxes[0, 0].set_xlabel('Parameter Rate')\naxes[0, 0].set_ylabel('Metric')\naxes[0, 0].legend(loc='upper right')\naxes[0, 0].grid(True)\n\n# Plot the second subplot\naxes[0, 1].plot(x, y3, label='Accuracy vs. Dropout (Batch Size=64)', color='green', linestyle='-', linewidth=2, marker='^', markersize=5)\naxes[0, 1].plot(x, y4, label='Accuracy vs. Dropout (Batch Size=128)', color='yellow', linestyle='--', linewidth=2, marker='>', markersize=5)\naxes[0, 1].set_title('Accuracy vs. Dropout')\naxes[0, 1].set_xlabel('Parameter Rate')\naxes[0, 1].set_ylabel('Metric')\naxes[0, 1].legend(loc='upper right')\naxes[0, 1].grid(True)\n\n# Plot the third subplot\naxes[1, 0].plot(x, y5, label='Error Rate vs. Learning Rate (Batch Size=64)', color='purple', linestyle='-', linewidth=2, marker='p', markersize=5)\naxes[1, 0].plot(x, y2, label='Error Rate vs. Learning Rate (Batch Size=128)', color='orange', linestyle='--', linewidth=2, marker='h', markersize=5)\naxes[1, 0].set_title('Error Rate vs. Learning Rate')\naxes[1, 0].set_xlabel('Parameter Rate')\naxes[1, 0].set_ylabel('Metric')\naxes[1, 0].legend(loc='upper right')\naxes[1, 0].grid(True)\n\n# Plot the fourth subplot\naxes[1, 1].plot(x, y3, label='Accuracy vs. Dropout (Batch Size=64)', color='cyan', linestyle='-', linewidth=2, marker='D', markersize=5)\naxes[1, 1].plot(x, y4, label='Accuracy vs. Dropout (Batch Size=128)', color='magenta', linestyle='--', linewidth=2, marker='X', markersize=5)\naxes[1, 1].set_title('Accuracy vs. Dropout')\naxes[1, 1].set_xlabel('Parameter Rate')\naxes[1, 1].set_ylabel('Metric')\naxes[1, 1].legend(loc='upper right')\naxes[1, 1].grid(True)\n\n# Adjust layout and display the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_58.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data for demonstration\nx = np.linspace(0, 200, 201)\ny1 = np.sin(x / 50) * 0.6 + 0.3\ny2 = np.cos(x / 50) * 0.6 + 0.3\n\n# Create a new figure with a larger size for better visibility\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10.0, 4.0), sharey=True)\n\n# Plot the first dataset\nax1.plot(x, y1, color='blue', linestyle='-', linewidth=2, marker='o', markersize=4, label='Base Model')\nax1.set_title('Metric 1')\nax1.set_xlabel('Training Iterations')\nax1.set_ylabel('Metric Value')\nax1.legend(loc='upper right')\n\n# Plot the second dataset\nax2.plot(x, y2, color='orange', linestyle='--', linewidth=2, marker='s', markersize=4, label='Our Model')\nax2.set_title('Metric 2')\nax2.set_xlabel('Training Iterations')\nax2.legend(loc='upper right')\n\n# Enhance the layout\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_59.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Training iterations and corresponding accuracy values for two models\niterations = np.arange(1, 201)\nbase_model_accuracy = np.array([0.45, 0.5, 0.55, 0.6, 0.65, 0.7, 0.75, 0.8, 0.85, 0.9, 0.95, 0.96, 0.97, 0.98, 0.99, 0.995, 0.997, 0.998, 0.999, 0.9995, 0.9997, 0.9998, 0.9999])\nour_model_accuracy = np.array([0.4, 0.45, 0.5, 0.55, 0.6, 0.65, 0.7, 0.75, 0.8, 0.85, 0.9, 0.92, 0.94, 0.96, 0.98, 0.99, 0.995, 0.997, 0.998, 0.999, 0.9995, 0.9997, 0.9998])\n\n# Create a new figure with a specific size\nplt.figure(figsize=(5.0, 3.0))\n\n# Plot the data with enhanced styling\nplt.plot(iterations, base_model_accuracy, label='Base Model', color='royalblue', linestyle='-', linewidth=2, marker='o', markersize=4)\nplt.plot(iterations, our_model_accuracy, label='Our Model', color='skyblue', linestyle='--', linewidth=2, marker='s', markersize=4)\n\n# Set labels and title with improved font sizes\nplt.xlabel('Training Iterations', fontsize=10)\nplt.ylabel('Metric Value', fontsize=10)\nplt.title('Accuracy', fontsize=12, fontweight='bold')\n\n# Add grid lines for better readability\nplt.grid(True, which='both', linestyle='--', linewidth=0.5, alpha=0.7)\n\n# Customize ticks for better readability\nplt.xticks(np.arange(0, 201, 25))\nplt.yticks(np.arange(0.4, 1.01, 0.1))\n\n# Add a legend with a shadow effect\nplt.legend(loc='lower right', fontsize=8, shadow=True)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Let's assume we're plotting the growth of a population over time\ntime = np.array([1, 2, 3, 4, 5, 6])\npopulation = np.array([100, 200, 300, 400, 500, 600])\n\n# Create a new figure with a larger size for better visibility\nplt.figure(figsize=(9.0, 6.0))\n\n# Plot the data with enhanced styling\nplt.plot(time, population, marker='o', linestyle='-', color='b', linewidth=2, markersize=8, label='Population Growth')\n\n# Add grid lines for better readability\nplt.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Set labels with more descriptive text\nplt.xlabel('Time (years)', fontsize=12)\nplt.ylabel('Population', fontsize=12)\nplt.title('Population Growth Over Time', fontsize=14, fontweight='bold')\n\n# Add a legend with a shadow effect\nplt.legend(loc='upper left', fontsize=10, shadow=True)\n\n# Set x and y axis limits for better focus\nplt.xlim(0, 7)\nplt.ylim(0, 700)\n\n# Add minor ticks for better granularity\nplt.minorticks_on()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_60.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Performance and Efficiency over Weeks\nweeks = np.arange(1, 26)\nperformance = np.array([0.5, 0.7, 0.9, 1.1, 1.3, 1.4, 1.5, 1.4, 1.3, 1.2,\n                         1.1, 1.0, 0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2,\n                         0.1, 0.05, 0.02, 0.01, 0.005])\nefficiency = np.array([0.05, 0.1, 0.15, 0.2, 0.25, 0.3, 0.35, 0.4, 0.45, 0.5,\n                      0.55, 0.6, 0.65, 0.7, 0.75, 0.8, 0.85, 0.9, 0.95, 1.0,\n                      1.05, 1.1, 1.15, 1.2, 1.25])\n\n# Create a new figure with a larger size for better visibility\nplt.figure(figsize=(8.0, 6.0))\n\n# Plot the data with enhanced styles\nplt.plot(weeks, performance, label='Performance', color='royalblue', linestyle='-', linewidth=2, marker='o', markersize=5, markerfacecolor='white')\nplt.plot(weeks, efficiency, label='Efficiency', color='darkred', linestyle='--', linewidth=2, marker='x', markersize=5)\n\n# Set labels and title with improved font sizes\nplt.xlabel('Weeks', fontsize=12)\nplt.ylabel('Performance/Efficiency', fontsize=12)\nplt.title('Performance and Efficiency Over Weeks', fontsize=14, fontweight='bold')\n\n# Add grid for better readability\nplt.grid(True, which='both', linestyle='--', linewidth=0.5, alpha=0.7)\n\n# Customize ticks\nplt.xticks(np.arange(1, 26, 5))\nplt.yticks(np.arange(-1.5, 1.6, 0.5))\n\n# Add a legend with a shadow effect\nplt.legend(loc='upper left', fontsize=10, shadow=True)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_61.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data for demonstration\nweeks = np.arange(1, 26)\nperformance = np.array([0.5, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3, 1.4, 1.5,\n                        1.6, 1.7, 1.8, 1.9, 2.0, 1.9, 1.8, 1.7, 1.6, 1.5,\n                        1.4, 1.3, 1.2, 1.1, 1.0])\nefficiency = np.array([0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2,\n                       1.3, 1.4, 1.5, 1.6, 1.7, 1.6, 1.5, 1.4, 1.3, 1.2,\n                       1.1, 1.0, 0.9, 0.8, 0.7])\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Plot the data with enhanced styles\nax.plot(weeks, performance, label='Performance', color='royalblue', linestyle='-', linewidth=2, marker='o', markersize=5, markevery=5)\nax.plot(weeks, efficiency, label='Efficiency', color='darkred', linestyle='--', linewidth=2, marker='x', markersize=5, markevery=5)\n\n# Fill between the lines for better visual representation\nax.fill_between(weeks, performance, color='lightblue', alpha=0.3)\nax.fill_between(weeks, efficiency, color='salmon', alpha=0.3)\n\n# Set labels and title with improved font sizes\nax.set_xlabel('Weeks', fontsize=12)\nax.set_ylabel('Values', fontsize=12)\nax.set_title('Performance and Efficiency Analysis', fontsize=14, fontweight='bold')\n\n# Add grid for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5, alpha=0.7)\n\n# Customize ticks\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Add legend with a shadow effect\nax.legend(loc='upper left', fontsize=10, shadow=True)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_62.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Performance and Efficiency over Weeks\nweeks = np.arange(1, 31)\nperformance = np.array([0.5, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3, 1.4, 1.5,\n                         1.6, 1.7, 1.8, 1.9, 2.0, 2.1, 2.2, 2.3, 2.4, 2.5,\n                         2.6, 2.7, 2.8, 2.9, 3.0, 3.1, 3.2, 3.3, 3.4, 3.5])\nefficiency = np.array([0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1,\n                      1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2.0, 2.1,\n                      2.2, 2.3, 2.4, 2.5, 2.6, 2.7, 2.8, 2.9, 3.0, 3.1])\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot the data with enhanced styles\nax.plot(weeks, performance, label='Performance', color='royalblue', linestyle='-', linewidth=2, marker='o', markersize=5, markevery=5)\nax.plot(weeks, efficiency, label='Efficiency', color='crimson', linestyle='--', linewidth=2, marker='s', markersize=5, markevery=5)\n\n# Set labels with improved font size and style\nax.set_xlabel('Weeks', fontsize=12, fontweight='bold')\nax.set_ylabel('Efficiency', fontsize=12, fontweight='bold')\n\n# Add a title with enhanced font size and style\nax.set_title('Detailed Performance and Efficiency Analysis Over Weeks', fontsize=14, fontweight='bold')\n\n# Add grid lines for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5, alpha=0.7)\n\n# Customize the legend\nax.legend(loc='upper left', fontsize=10, frameon=True, shadow=True)\n\n# Set x and y axis limits\nax.set_xlim(0, 31)\nax.set_ylim(0, 3.5)\n\n# Add annotations to highlight key points\nfor i, txt in enumerate(performance):\n    ax.annotate(f'{txt:.1f}', (weeks[i], performance[i]), textcoords=\"offset points\", xytext=(0,10), ha='center', fontsize=9)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_63.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Let's create a more complex scenario with multiple lines and different styles\nx = np.linspace(0, 25, 100)\ny1 = np.sin(x)\ny2 = np.cos(x)\ny3 = np.tan(x)\n\n# Create a new figure with a larger size for better visibility\nplt.figure(figsize=(12.0, 8.0))\n\n# Plot the data with different styles\nplt.plot(x, y1, label='Data Series 1', color='dodgerblue', linestyle='-', linewidth=2, marker='o', markersize=4)\nplt.plot(x, y2, label='Data Series 2 with Gradient', color='forestgreen', linestyle='--', linewidth=2, marker='s', markersize=4)\nplt.plot(x, y3, label='Data Series 3', color='hotpink', linestyle='-.', linewidth=2, marker='^', markersize=4)\n\n# Set labels and title with improved font sizes\nplt.xlabel('Weeks', fontsize=12)\nplt.ylabel('Normalized Value', fontsize=12)\nplt.title('Dynamic Data Presentation Across Weeks', fontsize=14, fontweight='bold')\n\n# Add grid for better readability\nplt.grid(True, which='both', linestyle='--', linewidth=0.5, alpha=0.7)\n\n# Customize ticks\nplt.xticks(fontsize=10)\nplt.yticks(fontsize=10)\n\n# Add a legend with a shadow effect\nplt.legend(loc='upper right', fontsize=10, shadow=True)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_64.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Average accuracy over different tasks for multiple models\ntasks = np.arange(1, 11)\nba_ce = [85, 90, 88, 92, 95, 93, 94, 96, 97, 98]\nlwf = [75, 78, 80, 82, 85, 87, 89, 91, 93, 95]\newc = [65, 68, 70, 72, 75, 77, 79, 81, 83, 85]\nseq = [55, 58, 60, 62, 65, 67, 69, 71, 73, 75]\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(12.0, 6.0))\n\n# Plot each model's average accuracy over tasks\nax.plot(tasks, ba_ce, label='BaCE', marker='s', linestyle='-', color='royalblue')\nax.plot(tasks, lwf, label='LWF', marker='^', linestyle='--', color='teal')\nax.plot(tasks, ewc, label='EWC', marker='o', linestyle='-.', color='forestgreen')\nax.plot(tasks, seq, label='SEQ', marker='D', linestyle=':', color='darkorange')\n\n# Set labels and title with improved font sizes\nax.set_xlabel('Task', fontsize=12)\nax.set_ylabel('Average Accuracy (%)', fontsize=12)\nax.set_title('Comparison of Models on Different Tasks', fontsize=14)\n\n# Add grid lines for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Customize ticks for better readability\nax.set_xticks(tasks)\nax.set_yticks(np.arange(20, 101, 10))\n\n# Add a legend with a shadow effect\nax.legend(loc='upper left', fontsize=10, shadow=True)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_65.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data for plotting\nx = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\ny1 = np.array([85, 80, 75, 70, 65, 60, 55, 50, 45, 40])\ny2 = np.array([90, 85, 80, 75, 70, 65, 60, 55, 50, 45])\ny3 = np.array([70, 75, 80, 85, 90, 95, 100, 95, 90, 85])\n\n# Create a new figure with a specific size\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(8.0, 3.0), sharey=True)\n\n# Plot the first dataset\nax1.plot(x, y1, marker='o', linestyle='-', color='b', label='BaCE')\nax1.plot(x, y2, marker='s', linestyle='--', color='g', label='EWC')\nax1.set_title('Performance Comparison: BaCE vs EWC')\nax1.set_xlabel('Task')\nax1.set_ylabel('Average Accuracy (%)')\nax1.legend(loc='upper left')\n\n# Plot the second dataset\nax2.plot(x, y3, marker='^', linestyle='-.', color='r', label='LWF')\nax2.plot(x, y2, marker='v', linestyle=':', color='m', label='SEQ')\nax2.set_title('Performance Comparison: LWF vs SEQ')\nax2.set_xlabel('Task')\n\n# Enhance the layout\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_66.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data for multiple models and their performance metrics\niterations = np.arange(0, 2001, 50)\nmodel1_series1 = np.array([0.1, 0.3, 0.4, 0.6, 0.8, 0.9, 0.95, 0.98, 0.99, 1.0])\nmodel1_series2 = np.array([0.15, 0.35, 0.45, 0.65, 0.85, 0.92, 0.97, 0.99, 1.0, 1.05])\n\nmodel2_series1 = np.array([0.12, 0.33, 0.47, 0.68, 0.88, 0.93, 0.98, 0.995, 1.0, 1.05])\nmodel2_series2 = np.array([0.18, 0.38, 0.52, 0.73, 0.93, 0.96, 0.99, 0.995, 1.0, 1.05])\n\nmodel3_series1 = np.array([0.11, 0.32, 0.46, 0.67, 0.87, 0.94, 0.99, 0.995, 1.0, 1.05])\nmodel3_series2 = np.array([0.16, 0.36, 0.50, 0.71, 0.91, 0.95, 0.99, 0.995, 1.0, 1.05])\n\nmodel4_series1 = np.array([0.13, 0.34, 0.48, 0.69, 0.89, 0.94, 0.99, 0.995, 1.0, 1.05])\nmodel4_series2 = np.array([0.19, 0.39, 0.53, 0.74, 0.94, 0.97, 0.99, 0.995, 1.0, 1.05])\n\n# Create a new figure with a larger size for better visibility\nfig, axes = plt.subplots(nrows=2, ncols=2, figsize=(9.0, 7.0), sharex=True, sharey=True)\n\n# Plot the data on each subplot\naxes[0, 0].plot(iterations, model1_series1, label='model1 Series 1', color='blue', linestyle='-', linewidth=2, marker='o')\naxes[0, 0].plot(iterations, model1_series2, label='model1 Series 2', color='magenta', linestyle='--', linewidth=2, marker='s')\naxes[0, 0].set_title('model1 Performance')\naxes[0, 0].set_xlabel('Iterations')\naxes[0, 0].set_ylabel('Success Rate')\naxes[0, 0].legend(loc='upper left')\n\naxes[0, 1].plot(iterations, model2_series1, label='model2 Series 1', color='blue', linestyle='-', linewidth=2, marker='o')\naxes[0, 1].plot(iterations, model2_series2, label='model2 Series 2', color='magenta', linestyle='--', linewidth=2, marker='s')\naxes[0, 1].set_title('model2 Performance')\naxes[0, 1].set_xlabel('Iterations')\naxes[0, 1].set_ylabel('Success Rate')\naxes[0, 1].legend(loc='upper left')\n\naxes[1, 0].plot(iterations, model3_series1, label='model3 Series 1', color='blue', linestyle='-', linewidth=2, marker='o')\naxes[1, 0].plot(iterations, model3_series2, label='model3 Series 2', color='magenta', linestyle='--', linewidth=2, marker='s')\naxes[1, 0].set_title('model3 Performance')\naxes[1, 0].set_xlabel('Iterations')\naxes[1, 0].set_ylabel('Success Rate')\naxes[1, 0].legend(loc='upper left')\n\naxes[1, 1].plot(iterations, model4_series1, label='model4 Series 1', color='blue', linestyle='-', linewidth=2, marker='o')\naxes[1, 1].plot(iterations, model4_series2, label='model4 Series 2', color='magenta', linestyle='--', linewidth=2, marker='s')\naxes[1, 1].set_title('model4 Performance')\naxes[1, 1].set_xlabel('Iterations')\naxes[1, 1].set_ylabel('Success Rate')\naxes[1, 1].legend(loc='upper left')\n\n# Adjust layout for better spacing\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_67.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Number of microphones vs. WER and AMI\nnum_microphones = np.array([2, 3, 4, 5, 6, 7, 8])\nwer_values = np.array([3.5, 3.0, 2.8, 2.5, 2.3, 2.1, 2.0])\nami_values = np.array([22, 24, 26, 28, 30, 32, 34])\n\n# Create a new figure with a larger size for better visibility\nplt.figure(figsize=(6.0, 5.0))\n\n# Plot WER values with markers and line style\nplt.plot(num_microphones, wer_values, marker='o', linestyle='-', color='b', label='WER (%)')\n\n# Plot AMI values with different markers and line style\nplt.plot(num_microphones, ami_values, marker='s', linestyle='--', color='r', label='AMI (%)')\n\n# Add grid lines for better readability\nplt.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Set labels with more descriptive text\nplt.xlabel('Number of microphones')\nplt.ylabel('WAV Error Rate (WER) / Average Mutual Information (AMI)')\n\n# Add a title to the chart\nplt.title('Performance Metrics for Different Microphone Configurations')\n\n# Add a legend to differentiate between the two lines\nplt.legend()\n\n# Annotate specific points for emphasis\nfor i, txt in enumerate(wer_values):\n    plt.annotate(f'{txt:.1f}', (num_microphones[i], wer_values[i]), textcoords=\"offset points\", xytext=(0,10), ha='center')\n\nfor i, txt in enumerate(ami_values):\n    plt.annotate(f'{txt}', (num_microphones[i], ami_values[i]), textcoords=\"offset points\", xytext=(0,-10), ha='center')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_68.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Number of microphones vs. WER and AMI\nx = np.array([2, 3, 4, 5, 6, 7, 8])\ny1 = np.array([2.5, 3.0, 3.5, 4.0, 4.5, 5.0, 5.5])  # WER\ny2 = np.array([2.0, 2.5, 3.0, 3.5, 4.0, 4.5, 5.0])  # AMI\n\n# Create a new figure with a larger size for better visibility\nplt.figure(figsize=(8.0, 7.0))\n\n# Plot the data with enhanced styles\nplt.plot(x, y1, label='WER Trend', color='darkgreen', linestyle='-', linewidth=2, marker='o', markersize=8)\nplt.plot(x, y2, label='AMI Trend', color='purple', linestyle='--', linewidth=2, marker='s', markersize=8)\n\n# Add grid lines for better readability\nplt.grid(True, which='both', linestyle='--', linewidth=0.5, alpha=0.7)\n\n# Set labels with more descriptive text\nplt.xlabel('Number of microphones', fontsize=12)\nplt.ylabel('WER (%) / AMI (%)', fontsize=12)\nplt.title('Trend Analysis of WER and AMI', fontsize=14, fontweight='bold')\n\n# Add a legend with a shadow effect\nplt.legend(loc='upper right', fontsize=10, shadow=True)\n\n# Annotate specific points for emphasis\nfor i, txt in enumerate(y1):\n    plt.annotate(f'{txt:.1f}', (x[i], y1[i]), textcoords=\"offset points\", xytext=(0,10), ha='center', fontsize=9)\n\n# Customize ticks for better readability\nplt.xticks(x)\nplt.yticks(np.arange(2, 6, 0.5))\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_69.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Number of microphones vs. Weight Error Ratio (WER)\nx = np.array([2, 3, 4, 5, 6, 7, 8])\ny1 = np.array([0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8])\ny2 = np.array([0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9])\ny3 = np.array([0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0])\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Plot the data with different styles and markers\nax.plot(x, y1, label='Highlight 3', color='orange', linestyle='-', marker='s', markersize=8, linewidth=2)\nax.plot(x, y2, label='Highlight 5', color='blue', linestyle='--', marker='o', markersize=8, linewidth=2)\nax.plot(x, y3, label='Highlight 7', color='red', linestyle='-.', marker='^', markersize=8, linewidth=2)\n\n# Set labels with more descriptive text\nax.set_xlabel('Number of Microphones', fontsize=12)\nax.set_ylabel('WER (%)', fontsize=12)\nax.set_title('Weight Error Ratio (WER) vs. Number of Microphones', fontsize=14, fontweight='bold')\n\n# Add a grid for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5, alpha=0.7)\n\n# Add a horizontal line at y=0.7 for reference\nax.axhline(y=0.7, color='red', linestyle='-', linewidth=1.5, label='Threshold')\n\n# Customize the legend\nax.legend(loc='upper left', fontsize=10, frameon=True, shadow=True)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data for plotting\nx = np.linspace(0, 1, 100)\ny1 = np.sin(x * np.pi / 2)\ny2 = np.cos(x * np.pi / 2)\ny3 = np.tan(x * np.pi / 2)\n\n# Create a new figure with a larger size for better visibility\nfig, axes = plt.subplots(nrows=1, ncols=4, figsize=(12.0, 4.0), sharex=True, sharey=True)\n\n# Plot the first subplot\naxes[0].plot(x, y1, color='blue', linewidth=2, linestyle='-', marker='o', markersize=5)\naxes[0].fill_between(x, y1, where=(y1 > 0.7), color='lightblue', alpha=0.5)\naxes[0].set_title('a\\nPositive bound.')\naxes[0].set_xlabel('X-axis')\naxes[0].set_ylabel('Y-axis')\n\n# Plot the second subplot\naxes[1].plot(x, y2, color='green', linewidth=2, linestyle='--', marker='s', markersize=5)\naxes[1].fill_between(x, y2, where=(y2 < -0.8), color='lightgreen', alpha=0.5)\naxes[1].set_title('b\\nNegative bound.')\naxes[1].set_xlabel('X-axis')\n\n# Plot the third subplot\naxes[2].plot(x, y3, color='red', linewidth=2, linestyle='-.', marker='^', markersize=5)\naxes[2].fill_between(x, y3, where=(y3 > 0.9), color='salmon', alpha=0.5)\naxes[2].set_title('c\\nFuzzy coefficient.')\naxes[2].set_xlabel('X-axis')\n\n# Plot the fourth subplot\naxes[3].plot(x, y1 + y2 + y3, color='purple', linewidth=2, linestyle=':', marker='D', markersize=5)\naxes[3].fill_between(x, y1 + y2 + y3, where=(y1 + y2 + y3 > 80), color='plum', alpha=0.5)\naxes[3].set_title('d\\nContrastive loss weight.')\naxes[3].set_xlabel('X-axis')\n\n# Adjust layout and display the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_70.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.array([2, 3, 4, 5, 6, 7, 8])\ny1 = np.array([0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9])\ny2 = np.array([0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8])\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(12.0, 5.0))\n\n# Plot the data with enhanced styles\nax.plot(x, y1, label='LibriCSS WER', color='gold', linestyle='-', linewidth=2, marker='o', markersize=8)\nax.plot(x, y2, label='Threshold', color='darkred', linestyle='--', linewidth=2, marker='s', markersize=8)\n\n# Set labels and title with improved font sizes\nax.set_xlabel('Number of Microphones', fontsize=12)\nax.set_ylabel('WER (%)', fontsize=12)\nax.set_title('Comparison of WER with Different Microphone Configurations', fontsize=14)\n\n# Add grid lines for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5, alpha=0.7)\n\n# Customize ticks\nax.set_xticks(x)\nax.set_yticks(np.arange(0.2, 1.0, 0.1))\n\n# Add a legend with a shadow effect\nax.legend(loc='upper right', fontsize=10, shadow=True)\n\n# Highlight specific points\nhighlight_points = [2, 4, 6]\nfor point in highlight_points:\n    ax.annotate(f'Highlight {point}', xy=(point, y1[point-2]), xytext=(point+0.5, y1[point-2]+0.05),\n                arrowprops=dict(facecolor='black', shrink=0.05), fontsize=10, color='darkblue')\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_71.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.linspace(0.1, 1.0, 100)\ny1 = np.sin(x) * np.cos(x)\ny2 = np.sin(x) * np.cos(x) + 0.1\ny3 = np.sin(x) * np.cos(x) - 0.1\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(6.0, 12.0))\n\n# Plot the data with different styles and markers\nax.plot(x, y1, label='PNA', color='b', linestyle='-', linewidth=2, marker='o', markersize=5)\nax.plot(x, y2, label='GIN', color='g', linestyle='--', linewidth=2, marker='s', markersize=5)\n\n# Fill between the lines with different colors\nax.fill_between(x, y1, y2, where=(y1 < y2), color='lightblue', alpha=0.5)\nax.fill_between(x, y1, y2, where=(y1 > y2), color='lightgreen', alpha=0.5)\n\n# Set labels and title with improved font sizes\nax.set_xlabel('Ratio r', fontsize=14)\nax.set_ylabel('Performance', fontsize=14)\nax.set_title('SPMotif-0.5', fontsize=16, fontweight='bold')\n\n# Add grid for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Add a legend with a shadow effect\nax.legend(loc='upper left', fontsize=12, shadow=True)\n\n# Customize ticks\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_72.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Performance trends over different ratios\nratios = np.array([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0])\nperformance_pna = np.array([-80, -70, -60, -50, -40, -30, -20, -10, 0, 10])\nperformance_gin = np.array([-85, -75, -65, -55, -45, -35, -25, -15, -5, 5])\n\n# Create a new figure with a larger size for better visibility\nplt.figure(figsize=(10.0, 5.0))\n\n# Plot the data with enhanced styles\nplt.plot(ratios, performance_pna, marker='o', linestyle='-', color='purple', label='PNA + ours')\nplt.plot(ratios, performance_gin, marker='s', linestyle='--', color='orange', label='GIN + ours')\n\n# Set labels and title with improved font sizes\nplt.xlabel('Ratio r', fontsize=12)\nplt.ylabel('Performance', fontsize=12)\nplt.title('Dynamic Performance Trends', fontsize=14, fontweight='bold')\n\n# Add grid lines for better readability\nplt.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Customize ticks for better readability\nplt.xticks(ratios)\nplt.yticks(np.arange(-80, 20, 10))\n\n# Add a legend with a shadow effect\nplt.legend(loc='upper left', fontsize=10, shadow=True)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_73.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Performance metrics for two different models\nr_values = np.array([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0])\nperformance_pna = np.array([0.95, 0.98, 0.97, 0.96, 0.95, 0.94, 0.93, 0.92, 0.91, 0.90])\nperformance_gin = np.array([0.85, 0.88, 0.87, 0.86, 0.85, 0.84, 0.83, 0.82, 0.81, 0.80])\n\n# Create a new figure with a larger size for better visibility\nplt.figure(figsize=(8.0, 6.0))\n\n# Plot the data with enhanced styles\nplt.plot(r_values, performance_pna, marker='o', linestyle='-', color='purple', label='PNA + ours', linewidth=2, markersize=8)\nplt.plot(r_values, performance_gin, marker='s', linestyle='--', color='orange', label='GIN + ours', linewidth=2, markersize=8)\n\n# Set labels and title with improved font sizes\nplt.xlabel('Ratio r', fontsize=12)\nplt.ylabel('Performance', fontsize=12)\nplt.title('Modern Linear Performance Evaluation', fontsize=14, fontweight='bold')\n\n# Add grid lines for better readability\nplt.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Customize ticks for better readability\nplt.xticks(fontsize=10)\nplt.yticks(fontsize=10)\n\n# Add a legend with a shadow effect\nplt.legend(loc='upper left', fontsize=10, shadow=True)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_74.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Performance metrics over different ratios\nratios = np.array([0.2, 0.4, 0.6, 0.8, 1.0])\nperformance_pna = np.array([0.5, 0.7, 0.9, 0.8, 0.6])\nperformance_gin = np.array([0.3, 0.5, 0.7, 0.6, 0.4])\n\n# Create a new figure with a larger size for better visibility\nplt.figure(figsize=(10.0, 6.0))\n\n# Plot the data with enhanced styles\nplt.plot(ratios, performance_pna, marker='o', linestyle='-', color='b', label='PNA + ours', linewidth=2, markersize=8)\nplt.plot(ratios, performance_gin, marker='s', linestyle='--', color='r', label='GIN + ours', linewidth=2, markersize=8)\n\n# Set labels and title with improved font sizes\nplt.xlabel('Ratio r', fontsize=12)\nplt.ylabel('Performance', fontsize=12)\nplt.title('Dynamic Model Performance', fontsize=14, fontweight='bold')\n\n# Add grid lines for better readability\nplt.grid(True, which='both', linestyle='--', linewidth=0.5, alpha=0.7)\n\n# Customize ticks\nplt.xticks(ratios)\nplt.yticks(np.arange(0, 1.1, 0.2))\n\n# Add a legend with a shadow effect\nplt.legend(loc='upper right', fontsize=10, shadow=True)\n\n# Annotate key points\nfor i, txt in enumerate(performance_pna):\n    plt.annotate(f'{txt:.1f}', (ratios[i], performance_pna[i]), textcoords=\"offset points\", xytext=(0,10), ha='center', fontsize=9)\nfor i, txt in enumerate(performance_gin):\n    plt.annotate(f'{txt:.1f}', (ratios[i], performance_gin[i]), textcoords=\"offset points\", xytext=(0,10), ha='center', fontsize=9)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_75.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Ensemble size vs. Model accuracy\nensemble_sizes = np.array([5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29])\nmodel1_accuracy = np.array([70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94])\nmodel2_accuracy = np.array([75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99])\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot the data with enhanced styles\nax.plot(ensemble_sizes, model1_accuracy, label='Model 1 Mean Accuracy', color='royalblue', linestyle='-', linewidth=2, marker='o', markersize=6)\nax.plot(ensemble_sizes, model2_accuracy, label='Model 2 Mean Accuracy', color='darkred', linestyle='--', linewidth=2, marker='s', markersize=6)\n\n# Add grid lines for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5, alpha=0.7)\n\n# Set labels and title with improved font sizes\nax.set_xlabel('Ensemble Size', fontsize=12)\nax.set_ylabel('Accuracy', fontsize=12)\nax.set_title('Comparison of Model Accuracies', fontsize=14, fontweight='bold')\n\n# Customize the legend\nax.legend(loc='upper left', fontsize=10)\n\n# Add annotations to highlight key points\nfor i, acc in enumerate(model1_accuracy):\n    ax.annotate(f'{acc}%', xy=(ensemble_sizes[i], acc), xytext=(ensemble_sizes[i] + 1, acc - 2),\n                arrowprops=dict(facecolor='black', shrink=0.05), fontsize=9)\n\n# Enhance the background with a subtle color gradient\nax.set_facecolor('#f5f5f5')\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_76.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data for three different models\nx = np.arange(1, 10)\ny1 = np.array([75, 78, 80, 82, 84, 86, 88, 90, 92])\ny2 = np.array([70, 73, 75, 77, 79, 81, 83, 85, 87])\ny3 = np.array([65, 68, 70, 72, 74, 76, 78, 80, 82])\n\n# Create a new figure with a larger size for better visibility\nfig, axes = plt.subplots(nrows=3, ncols=1, figsize=(8.0, 12.0), sharex=True)\n\n# Plot the first model's performance\naxes[0].plot(x, y1, label='Config A - Model X', color='red', linestyle='-', marker='o', markersize=5, linewidth=2)\naxes[0].set_title('Performance of Model X')\naxes[0].set_ylabel('Score')\naxes[0].grid(True, which='both', linestyle='--', linewidth=0.5)\naxes[0].legend()\n\n# Plot the second model's performance\naxes[1].plot(x, y2, label='Config B - Model X', color='green', linestyle='--', marker='s', markersize=5, linewidth=2)\naxes[1].set_title('Performance of Model Y')\naxes[1].set_ylabel('Score')\naxes[1].grid(True, which='both', linestyle='--', linewidth=0.5)\naxes[1].legend()\n\n# Plot the third model's performance\naxes[2].plot(x, y3, label='Config C - Model X', color='blue', linestyle='-.', marker='^', markersize=5, linewidth=2)\naxes[2].set_title('Performance of Model Z')\naxes[2].set_xlabel('Iteration')\naxes[2].set_ylabel('Score')\naxes[2].grid(True, which='both', linestyle='--', linewidth=0.5)\naxes[2].legend()\n\n# Adjust layout for better spacing between subplots\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_77.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data for three different configurations\nx = np.array([2, 4, 6, 8, 10])\ny1 = np.array([75, 78, 80, 82, 85])\ny2 = np.array([70, 73, 75, 77, 80])\ny3 = np.array([65, 68, 70, 72, 75])\n\n# Create a new figure with a larger size for better visibility\nfig, axes = plt.subplots(3, 1, figsize=(8.0, 12.0), sharex=True)\n\n# Plot the first subplot\naxes[0].plot(x, y1, label='Config A - Llama', color='pink', linestyle='-', marker='o')\naxes[0].plot(x, y2, label='Config B - Llama', color='lightgreen', linestyle='--', marker='s')\naxes[0].plot(x, y3, label='Config C - Llama', color='skyblue', linestyle='-.', marker='^')\naxes[0].set_title('Performance of Llama')\naxes[0].set_ylabel('Score')\naxes[0].legend(loc='upper left')\n\n# Plot the second subplot\naxes[1].plot(x, y1, label='Config A - Falcon', color='pink', linestyle='-', marker='o')\naxes[1].plot(x, y2, label='Config B - Falcon', color='lightgreen', linestyle='--', marker='s')\naxes[1].plot(x, y3, label='Config C - Falcon', color='skyblue', linestyle='-.', marker='^')\naxes[1].set_title('Performance of Falcon')\naxes[1].set_ylabel('Score')\naxes[1].legend(loc='upper left')\n\n# Plot the third subplot\naxes[2].plot(x, y1, label='Config A - Qwen', color='pink', linestyle='-', marker='o')\naxes[2].plot(x, y2, label='Config B - Qwen', color='lightgreen', linestyle='--', marker='s')\naxes[2].plot(x, y3, label='Config C - Qwen', color='skyblue', linestyle='-.', marker='^')\naxes[2].set_title('Performance of Qwen')\naxes[2].set_xlabel('Iteration')\naxes[2].set_ylabel('Score')\naxes[2].legend(loc='upper left')\n\n# Adjust layout and display the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_78.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Sales growth over quarters for different brands\nquarters = np.array(['Q1', 'Q2', 'Q3', 'Q4'])\nsales_a = np.array([1.0, 1.5, 1.8, 2.2])\nsales_b = np.array([1.2, 1.6, 1.9, 2.3])\nsales_c = np.array([1.1, 1.7, 1.9, 2.1])\nsales_d = np.array([1.3, 1.7, 1.8, 2.4])\nsales_e = np.array([1.4, 1.8, 1.9, 2.2])\nsales_f = np.array([1.5, 1.9, 2.0, 2.3])\n\n# Create a new figure with a larger size for better visibility\nfig, axes = plt.subplots(nrows=3, ncols=2, figsize=(10.0, 10.0), sharex=True, sharey=True)\n\n# Plot each brand's sales growth\naxes[0, 0].plot(quarters, sales_a, marker='o', linestyle='-', color='red', label='Brand A Sales Growth')\naxes[0, 0].set_title('Brand A')\naxes[0, 0].set_ylabel('Sales Growth')\n\naxes[0, 1].plot(quarters, sales_b, marker='^', linestyle='--', color='teal', label='Brand B Sales Growth')\naxes[0, 1].set_title('Brand B')\n\naxes[1, 0].plot(quarters, sales_c, marker='s', linestyle='-.', color='purple', label='Brand C Sales Growth')\naxes[1, 0].set_title('Brand C')\n\naxes[1, 1].plot(quarters, sales_d, marker='D', linestyle=':', color='green', label='Brand D Sales Growth')\naxes[1, 1].set_title('Brand D')\n\naxes[2, 0].plot(quarters, sales_e, marker='p', linestyle='-', color='magenta', label='Brand E Sales Growth')\naxes[2, 0].set_title('Brand E')\naxes[2, 0].set_xlabel('Quarter')\naxes[2, 0].set_ylabel('Sales Growth')\n\naxes[2, 1].plot(quarters, sales_f, marker='h', linestyle='--', color='orange', label='Brand F Sales Growth')\naxes[2, 1].set_title('Brand F')\naxes[2, 1].set_xlabel('Quarter')\n\n# Add legends to each subplot\nfor ax in axes.flat:\n    ax.legend(loc='upper left')\n\n# Adjust layout to prevent overlap\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_79.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data for plotting\nx = np.linspace(100, 700, 100)\ny1 = np.sin(x / 100) * 2 + 1\ny2 = np.cos(x / 100) * 2 + 1\ny3 = np.tan(x / 100) * 2 + 1\ny4 = np.exp(-x / 100) * 2 + 1\n\n# Create a new figure with a larger size for better visibility\nfig, axes = plt.subplots(nrows=1, ncols=4, figsize=(18.0, 4.0), sharex=True, sharey=True)\n\n# Plot the data on each subplot\naxes[0].plot(x, y1, label='ECL Run 1', color='tab:blue', linestyle='-', linewidth=2, marker='o', markersize=5)\naxes[0].set_title('Traffic Performance')\naxes[0].set_xlabel('Time (s)')\naxes[0].set_ylabel('Metric Value')\naxes[0].grid(True, which='both', linestyle='--', linewidth=0.5)\naxes[0].legend()\n\naxes[1].plot(x, y2, label='ECL Run 2', color='tab:orange', linestyle='--', linewidth=2, marker='s', markersize=5)\naxes[1].set_title('ETMm2 Performance')\naxes[1].set_xlabel('Time (s)')\naxes[1].grid(True, which='both', linestyle='--', linewidth=0.5)\naxes[1].legend()\n\naxes[2].plot(x, y3, label='ETTh2 Performance', color='tab:green', linestyle='-.', linewidth=2, marker='^', markersize=5)\naxes[2].set_title('ETTh2 Performance')\naxes[2].set_xlabel('Time (s)')\naxes[2].grid(True, which='both', linestyle='--', linewidth=0.5)\naxes[2].legend()\n\naxes[3].plot(x, y4, label='ECL Performance', color='tab:red', linestyle=':', linewidth=2, marker='D', markersize=5)\naxes[3].set_title('ECL Performance')\naxes[3].set_xlabel('Time (s)')\naxes[3].grid(True, which='both', linestyle='--', linewidth=0.5)\naxes[3].legend()\n\n# Adjust layout for better spacing\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Driving styles and their corresponding relaxation levels\ndriving_styles = ['Passive', 'Rail', 'Replay', 'Sportive']\nrelaxation_levels = [\n    [1.2, 1.4, 1.3, 1.5],  # Weather\n    [0.8, 0.9, 0.7, 0.6],  # Dry\n    [0.5, 0.6, 0.4, 0.3]   # Rain\n]\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Plot each driving style with different colors and markers\nfor i, style in enumerate(driving_styles):\n    ax.plot(relaxation_levels[i], label=style, marker='o', linestyle='-', color=plt.cm.viridis(i / len(driving_styles)))\n\n# Set labels and title with improved font sizes\nax.set_xlabel('Driving Style', fontsize=12)\nax.set_ylabel('Relaxation Level', fontsize=12)\nax.set_title('Impact of Driving Style on Relaxation', fontsize=14)\n\n# Add grid lines for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Customize ticks\nax.set_xticks(range(len(driving_styles)))\nax.set_xticklabels(driving_styles)\nax.set_yticks(np.arange(0, 1.6, 0.2))\n\n# Add a legend with a shadow effect\nax.legend(title='Weather', loc='upper right', shadow=True)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_80.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.array([1, 2, 3, 4, 5])\ny1 = np.array([50, 60, 70, 80, 90])\ny2 = np.array([40, 55, 65, 75, 85])\n\n# Create a new figure with a larger size for better visibility\nfig, axes = plt.subplots(3, 2, figsize=(9.0, 6.0), constrained_layout=True)\n\n# Plot data on each subplot\nfor ax, (y, title) in zip(axes.flatten(), [(y1, 'Category A Growth'), (y2, 'Category B Growth')]):\n    ax.plot(x, y, marker='o', linestyle='-', color='red')\n    ax.set_title(title)\n    ax.set_xlabel('Phase')\n    ax.set_ylabel('Cumulative Value')\n    ax.grid(True, which='both', linestyle='--', linewidth=0.5)\n    ax.set_xticks(x)\n    ax.set_yticks(np.arange(0, 101, 10))\n    ax.set_ylim(0, 100)\n\n# Add a main title for the entire figure\nfig.suptitle('Growth Phases', fontsize=16, fontweight='bold')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Let's assume we're plotting the growth of two different investment strategies over time\ntime = np.array([4, 6, 10, 20, 30])\nstrategy1 = np.array([1.08, 1.15, 1.25, 1.45, 1.75])  # Standard strategy growth\nstrategy2 = np.array([1.05, 1.10, 1.15, 1.30, 1.50])  # Constrained strategy growth\n\n# Create a new figure with a larger size for better visibility\nplt.figure(figsize=(9.0, 6.0))\n\n# Plot the data with enhanced styles\nplt.plot(time, strategy1, label='Standard', color='royalblue', linestyle='-', marker='o', markersize=8)\nplt.plot(time, strategy2, label='Constrained', color='darkorange', linestyle='--', marker='x', markersize=8)\n\n# Set labels and title with improved font sizes\nplt.xlabel('Time (in years)', fontsize=12)\nplt.ylabel('Growth Factor', fontsize=12)\nplt.title('Investment Strategy Growth Over Time', fontsize=14, fontweight='bold')\n\n# Add grid lines for better readability\nplt.grid(True, which='both', linestyle='--', linewidth=0.5, alpha=0.7)\n\n# Customize ticks for better readability\nplt.xticks(time)\nplt.yticks(np.arange(1, 2.5, 0.25))\n\n# Add a legend with a shadow effect\nplt.legend(loc='upper left', fontsize=10, shadow=True)\n\n# Annotate key points on the plot\nfor i, txt in enumerate(strategy1):\n    plt.annotate(f'{txt:.2f}', (time[i], strategy1[i]), textcoords=\"offset points\", xytext=(0,10), ha='center', fontsize=9)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the bar chart\nregions = ['South', 'North', 'East', 'West']\npercentages = [25, 40, 15, 30]\n\n# Create a new figure with a specific size\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10.0, 5.0), gridspec_kw={'width_ratios': [1, 2]})\n\n# Bar chart on the left\nbars = ax1.bar(regions, percentages, color=['#66b3ff', '#99ff99', '#ffcc99', '#ff9999'])\nax1.set_title('Literacy Rate by Region')\nax1.set_xlabel('Region')\nax1.set_ylabel('Percentage (%)')\n\n# Add value labels on top of each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax1.text(bar.get_x() + bar.get_width()/2, yval + 0.5, f'{yval}%', ha='center', va='bottom', fontsize=10)\n\n# Pie chart on the right\nsizes = [35, 25, 20, 15]\nlabels = ['Central', 'North', 'East', 'West']\ncolors = ['#ff9999','#66b3ff','#99ff99','#ffcc99']\nexplode = (0.1, 0, 0, 0)  # explode 1st slice\n\nwedges, texts, autotexts = ax2.pie(sizes, explode=explode, labels=labels, colors=colors,\n                                  autopct='%1.1f%%', shadow=True, startangle=140, textprops=dict(color=\"black\"))\n\n# Equal aspect ratio ensures that pie is drawn as a circle.\nax2.axis('equal')  \n\n# Add a title to the pie chart\nax2.set_title('Literacy Rate by Region')\n\n# Adjust layout to prevent overlap\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create data for the heatmap\ndata = np.array([\n    [0.1, 0.2, 0.3, 0.4, 0.5],\n    [0.6, 0.7, 0.8, 0.9, 1.0],\n    [1.1, 1.2, 1.3, 1.4, 1.5],\n    [1.6, 1.7, 1.8, 1.9, 2.0],\n    [2.1, 2.2, 2.3, 2.4, 2.5]\n])\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(8.0, 2.0))\n\n# Plot the heatmap with enhanced color map and annotations\ncax = ax.matshow(data, cmap='coolwarm', interpolation='nearest')\n\n# Add color bar\ncbar = fig.colorbar(cax)\n\n# Set labels for the axes\nax.set_xlabel('Sensitive attribute')\nax.set_ylabel('Sensory attribute')\n\n# Set titles\nax.set_title('Heatmap of Sensory Data', fontsize=14, fontweight='bold')\ncbar.set_label('Intensity', rotation=270, labelpad=15)\n\n# Add grid lines for better readability\nax.grid(True, linestyle='--', alpha=0.5)\n\n# Add annotations to each cell\nfor (i, j), val in np.ndenumerate(data):\n    ax.text(j, i, f'{val:.1f}', ha='center', va='center', color='black')\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the bar chart\ncategories = ['Engstrom (M1)', 'Zhang (M2)', 'Rice (M3)', 'Rade (M4)', 'Hendrycks (M5)', 'Addep. (M6)', 'Carmon (M7)']\nvalues = [44.15, 44.05, 41.55, 40.90, 40.65, 39.45, 36.70]\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Define colors for the bars\ncolors = ['#4CAF50', '#8BC34A', '#CDDC39', '#FFEB3B', '#FFC107', '#FF9800', '#FF5722']\n\n# Plot the bar chart\nbars = ax.bar(categories, values, color=colors)\n\n# Add value labels on top of each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.5, f'{yval:.2f}', ha='center', va='bottom', fontsize=10)\n\n# Set title and labels\nax.set_title('Robust Error (%)', fontsize=14, fontweight='bold')\nax.set_xlabel('Models', fontsize=12)\nax.set_ylabel('Robust Error (%)', fontsize=12)\n\n# Rotate x-axis labels for better readability\nplt.xticks(rotation=45, ha='right')\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.7)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data for demonstration\ncategories = ['Cartesian', 'Retinotopic']\nvalues = [0.551, 0.538, 0.043, 0.095, 0.744, 0.394, 0.477, 0.762]\n\n# Create a new figure with a specific size\nfig, axes = plt.subplots(1, 3, figsize=(10.0, 4.0), sharey=True)\n\n# Plot 1: Accuracy\naxes[0].bar(categories, values[:2], color='lightblue', edgecolor='black')\naxes[0].set_title('A: VGG16')\naxes[0].set_ylabel('Accuracy')\naxes[0].set_xlabel('Model')\naxes[0].set_ylim([0, 1])\naxes[0].grid(True, linestyle='--', alpha=0.7)\n\n# Plot 2: Resnet101\naxes[1].bar(categories, values[2:4], color='lightgreen', edgecolor='black')\naxes[1].set_title('B: Resnet101')\naxes[1].set_xlabel('Model')\naxes[1].set_ylim([0, 1])\naxes[1].grid(True, linestyle='--', alpha=0.7)\n\n# Plot 3: Rotation Invariance\nrotation_invariance = [0.85, 0.88, 0.90, 0.92, 0.95]\nx_values = np.arange(len(rotation_invariance))\naxes[2].plot(x_values, rotation_invariance, marker='o', linestyle='-', color='red', label='VGG16 Cartesian')\naxes[2].plot(x_values, rotation_invariance, marker='x', linestyle='--', color='blue', label='Resnet101 Cartesian')\naxes[2].plot(x_values, rotation_invariance, marker='s', linestyle='-.', color='orange', label='VGG16 Retinotopic')\naxes[2].plot(x_values, rotation_invariance, marker='^', linestyle=':', color='grey', label='Resnet101 Polar')\naxes[2].set_title('C: Rotation Invariance')\naxes[2].set_xlabel('Rotation Angle (\u00b0)')\naxes[2].set_ylabel('Invariance')\naxes[2].set_xticks(x_values)\naxes[2].set_xticklabels(['0', '30', '60', '90', '120'])\naxes[2].set_ylim([0, 1])\naxes[2].grid(True, linestyle='--', alpha=0.7)\naxes[2].legend(loc='upper right')\n\n# Adjust layout and display the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create data for the heatmap\ndata = np.array([\n    [0.1, 0.2, 0.3, 0.4, 0.5],\n    [0.6, 0.7, 0.8, 0.9, 1.0],\n    [1.1, 1.2, 1.3, 1.4, 1.5],\n    [1.6, 1.7, 1.8, 1.9, 2.0],\n    [2.1, 2.2, 2.3, 2.4, 2.5]\n])\n\n# Create a new figure with a larger size for better visibility\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(8.0, 8.0), gridspec_kw={'width_ratios': [3, 1]})\n\n# Plot the heatmap\ncax = ax1.imshow(data, cmap='viridis', interpolation='nearest')\nax1.set_title('Heatmap')\nax1.set_xlabel('Attribute')\nax1.set_ylabel('Sensitivity')\nax1.set_xticks(np.arange(len(data[0])))\nax1.set_yticks(np.arange(len(data)))\nax1.set_xticklabels(['PaleSkin', 'OvalFace', 'Smiling', 'BrownHair', 'Attractive'])\nax1.set_yticklabels(['Male', 'BigLips', 'PointyNose', 'White', 'NoBeard'])\nax1.grid(False)\n\n# Add color bar\ncbar = fig.colorbar(cax, ax=ax1, orientation='vertical')\ncbar.set_label('Intensity')\n\n# Plot the bar chart\ncategories = ['PaleSkin', 'OvalFace', 'Smiling', 'BrownHair', 'Attractive']\nvalues = [0.3, 0.4, 0.5, 0.6, 0.7]\nbars = ax2.bar(categories, values, color='skyblue', edgecolor='black')\nax2.set_title('Bar Chart')\nax2.set_xlabel('Category')\nax2.set_ylabel('Value')\nax2.set_ylim(0, 1)\nax2.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Add value labels on top of each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax2.text(bar.get_x() + bar.get_width()/2, yval + 0.05, f'{yval:.1f}', ha='center', va='bottom')\n\n# Adjust layout to prevent overlap\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data for the plot\nx = np.array([0, 10, 20, 30, 40, 50])\ny = np.array([-8.5, -9.2, -9.8, -10.5, -11.0, -11.5])\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(5.0, 6.0))\n\n# Plot the line chart with enhanced aesthetics\nax.plot(x, y, marker='o', linestyle='-', color='navy', linewidth=2, markersize=8, label='Token Rarity')\n\n# Add a shaded region to represent a confidence interval or error margin\nax.fill_between(x, y - 0.5, y + 0.5, color='lightgrey', alpha=0.3)\n\n# Set labels and title with improved font sizes and styles\nax.set_xlabel('GPT2 Tokenizer rank', fontsize=12)\nax.set_ylabel('Loss', fontsize=12)\nax.set_title('Token rarity', fontsize=14, fontweight='bold')\n\n# Add grid lines for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5, alpha=0.7)\n\n# Add a legend with a shadow effect\nax.legend(loc='upper right', fontsize=10, shadow=True)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the bar chart\ncategories = ['Sentiment', 'Toxicity', 'News']\nvalues = [0.35, 0.20, 0.25]\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(10.0, 4.0))\n\n# Define colors for the bars\ncolors = ['#1f77b4', '#ff7f0e', '#2ca02c']\n\n# Plot the bar chart\nbars = ax.bar(categories, values, color=colors, edgecolor='black')\n\n# Add value labels on top of each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.01, f'{yval:.2f}', ha='center', va='bottom', fontsize=10)\n\n# Set title and labels\nax.set_title('Correlation of Categories', fontsize=14, fontweight='bold')\nax.set_xlabel('Categories', fontsize=12)\nax.set_ylabel('Correlation', fontsize=12)\n\n# Customize the x-axis ticks\nax.set_xticks(np.arange(len(categories)))\nax.set_xticklabels(categories, rotation=45, ha='right')\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=.25)\n\n# Add a legend\nax.legend(['Sentiment', 'Toxicity', 'News'], loc='upper right', fontsize=10)\n\n# Adjust layout for better spacing\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_16.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Number of successful ADC circuits and OMLA KPA for different models\nmodels = ['c1355', 'c1908', 'c2670', 'c3540']\nadc_circuits = [30, 45, 55, 40]\nomla_kpa = [0.42, 0.48, 0.55, 0.40]\n\n# Create a new figure with a larger size for better visibility\nfig, (ax1, ax2) = plt.subplots(2, 1, figsize=(6.0, 6.0), gridspec_kw={'height_ratios': [3, 1]})\n\n# Plot 1: Bar chart for ADC circuits\nbars = ax1.bar(models, adc_circuits, color='skyblue', edgecolor='black', hatch='///')\nax1.set_ylabel('# Successful ADC Circuits', fontsize=10)\nax1.set_title('Number of Successful ADC Circuits per Model', fontsize=12, fontweight='bold')\nax1.set_ylim(0, 60)\n\n# Add value labels on top of each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax1.text(bar.get_x() + bar.get_width()/2, yval + 1, int(yval), ha='center', va='bottom', fontsize=8)\n\n# Add horizontal lines for thresholds\nax1.axhline(y=40, color='red', linestyle='--', linewidth=1.5, label='Lower Success Threshold')\nax1.axhline(y=50, color='darkred', linestyle='--', linewidth=1.5, label='Upper Success Threshold')\n\n# Add legend\nax1.legend(loc='upper right', fontsize=8)\n\n# Plot 2: Box plot for OMLA KPA\nax2.boxplot(omla_kpa, vert=False, patch_artist=True, medianprops=dict(color='orange'))\nax2.set_xlabel('OMLA KPA', fontsize=10)\nax2.set_yticks([])\nax2.set_xlim(0.3, 0.6)\nax2.set_title('OMLA KPA Distribution', fontsize=12, fontweight='bold')\n\n# Add horizontal lines for thresholds\nax2.axvline(x=0.5, color='red', linestyle='--', linewidth=1.5, label='Lower Success Threshold')\nax2.axvline(x=0.6, color='darkred', linestyle='--', linewidth=1.5, label='Upper Success Threshold')\n\n# Add legend\nax2.legend(loc='upper left', fontsize=8)\n\n# Adjust layout\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_17.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the first chart: Cumulative Knowledge by Subject Area\nsubjects = ['Education', 'Law', 'Technology', 'History', 'Geography', 'Humanities', 'Finance']\ncumulative_knowledge = [50, 60, 70, 80, 90, 100, 110]\n\n# Data for the second chart: Number of Publications by Domain\ndomains = ['Education', 'Law', 'Technology', 'History', 'Geography', 'Humanities', 'Finance']\npublications = [250, 300, 200, 150, 100, 120, 220]\n\n# Create a new figure with a larger size for better visibility\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10.0, 4.0), sharey=True)\n\n# Plot the first chart: Cumulative Knowledge by Subject Area\ncolors = ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd', '#8c564b', '#e377c2']\nbars = ax1.bar(subjects, cumulative_knowledge, color=colors, edgecolor='black')\nax1.set_title('Cumulative Knowledge by Subject Area')\nax1.set_xlabel('Subject Area')\nax1.set_ylabel('Cumulative Knowledge (%)')\n\n# Add data labels on top of each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax1.text(bar.get_x() + bar.get_width()/2, yval + 5, f'{yval}%', ha='center', va='bottom', fontsize=8)\n\n# Plot the second chart: Number of Publications by Domain\nax2.bar(domains, publications, color=colors, edgecolor='black')\nax2.set_title('Number of Publications by Domain')\nax2.set_xlabel('Domain')\nax2.set_ylabel('Publications')\n\n# Add data labels on top of each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax2.text(bar.get_x() + bar.get_width()/2, yval + 5, f'{yval}', ha='center', va='bottom', fontsize=8)\n\n# Adjust layout for better spacing\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_18.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data for the line chart\nyears = np.array([2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022])\nhardware = np.array([10, 15, 20, 30, 40, 50, 60, 70])\nsoftware = np.array([12, 18, 25, 35, 45, 55, 65, 75])\nai = np.array([14, 20, 28, 40, 50, 60, 70, 80])\n\n# Create a new figure with a larger size for better visibility\nfig, ax1 = plt.subplots(figsize=(8.0, 10.0))\n\n# Plot the line chart with different styles\nax1.plot(years, hardware, label='Hardware', color='royalblue', linestyle='-', linewidth=2, marker='o')\nax1.plot(years, software, label='Software', color='darkorange', linestyle='--', linewidth=2, marker='s')\nax1.plot(years, ai, label='AI', color='forestgreen', linestyle='-.', linewidth=2, marker='^')\n\n# Set labels and title for the line chart\nax1.set_xlabel('Year', fontsize=12)\nax1.set_ylabel('Progress (%)', fontsize=12)\nax1.set_title('Technological Advancements', fontsize=14, fontweight='bold')\nax1.legend(loc='upper left', fontsize=10)\n\n# Add grid lines for better readability\nax1.grid(True, which='both', linestyle='--', linewidth=0.5, alpha=0.7)\n\n# Set limits for y-axis\nax1.set_ylim(0, 120)\n\n# Create a second y-axis for the bar chart\nax2 = ax1.twinx()\n\n# Sample data for the bar chart\nsectors = ['Big Tech', 'Startups', 'Academia', 'Government']\ninnovation_gaps = [30, 25, 20, 15]\ninnovation_gaps_std = [5, 4, 3, 2]\n\n# Plot the bar chart with error bars\nbars = ax2.bar(sectors, innovation_gaps, yerr=innovation_gaps_std, color=['royalblue', 'darkorange', 'forestgreen', 'red'], alpha=0.7, edgecolor='black')\n\n# Set labels and title for the bar chart\nax2.set_ylabel('Innovation Gap (%)', fontsize=12)\nax2.set_title('Innovation Gaps Across Different Sectors in Technology', fontsize=14, fontweight='bold')\n\n# Add value annotations on top of each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax2.text(bar.get_x() + bar.get_width()/2, yval + 1, f'{yval}', ha='center', va='bottom', fontsize=10)\n\n# Adjust layout to prevent overlap\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_19.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the bar chart\ncategories = ['USA', 'UK', 'Germany', 'France', 'Italy', 'Spain']\nvalues = [3.2, 2.8, 2.4, 2.9, 3.1, 2.6]\n\n# Create a new figure with a larger size for better visibility\nfig, (ax1, ax2) = plt.subplots(2, 1, figsize=(8.0, 10.0), sharex=True)\n\n# Plot the bar chart\nbars = ax1.bar(categories, values, color='orange', edgecolor='black')\nax1.set_ylabel('Crime Rate per 100,000 Inhabitants')\nax1.set_title('Average Legal Crime Rates by Country')\n\n# Add value labels on top of each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax1.text(bar.get_x() + bar.get_width()/2, yval + 0.05, f'{yval:.1f}', ha='center', va='bottom', fontsize=10)\n\n# Add grid lines for better readability\nax1.yaxis.grid(True, linestyle='--', which='major', color='gray', alpha=0.7)\n\n# Plot the line chart\nax2.plot(categories, values, marker='o', linestyle='-', color='teal', linewidth=2, markersize=8)\nax2.set_xlabel('Country')\nax2.set_ylabel('Crime Rate per 100,000 Inhabitants')\nax2.set_title('Average Legal Crime Rates by Country')\n\n# Add horizontal line for reference\nax2.axhline(y=150, color='gray', linestyle='--', linewidth=1)\n\n# Add grid lines for better readability\nax2.yaxis.grid(True, linestyle='--', which='major', color='gray', alpha=0.7)\n\n# Adjust layout to prevent overlap\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the histogram\nscores = [45, 50, 60, 70, 80, 90, 100, 100, 90, 80, 70, 60, 50, 45, 40, 35, 30, 25, 20, 15, 10]\n\n# Create a new figure with a larger size for better visibility\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10.0, 5.0), gridspec_kw={'width_ratios': [3, 1]})\n\n# Plot the histogram\nax1.hist(scores, bins=range(0, 110, 10), color='skyblue', edgecolor='black', alpha=0.7)\nax1.set_title('Student Performance in Schools')\nax1.set_xlabel('Score')\nax1.set_ylabel('Number of Students')\n\n# Add a legend\nax1.legend(['Public School', 'Private School'], loc='upper right')\n\n# Plot the pie chart\nlabels = ['Books', 'Staff', 'Facilities', 'Technology', 'Extracurricular']\nsizes = [80, 20, 15, 10, 5]\ncolors = ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd']\nexplode = (0.1, 0, 0, 0, 0)  # \"explode\" the 1st slice\n\nwedges, texts, autotexts = ax2.pie(sizes, explode=explode, labels=labels, colors=colors,\n                                  autopct='%1.1f%%', startangle=140, shadow=True)\n\n# Enhance the pie chart\nfor text in texts:\n    text.set_color('white')\nfor autotext in autotexts:\n    autotext.set_color('white')\n    autotext.set_fontsize(10)\n    autotext.set_weight('bold')\n\nax2.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\n\n# Set title for the second subplot\nax2.set_title('Resource Allocation in Schools')\n\n# Adjust layout to prevent overlap\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_20.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data for demonstration\n# Let's assume we have some data about temperature and elevation\n# We'll create a more complex scenario with multiple regions and different distributions\n\n# Define the data\nregions = ['Region 1', 'Region 2']\ntemperatures = [np.random.normal(20, 5, 100), np.random.normal(22, 4, 100)]\nelevations = [np.random.normal(1000, 200, 100), np.random.normal(1500, 300, 100)]\n\n# Create a new figure with a larger size for better visibility\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10.0, 5.0), gridspec_kw={'width_ratios': [3, 1]})\n\n# Plot the first subplot: Temperature vs. Elevation\nfor temp, elev, region in zip(temperatures, elevations, regions):\n    ax1.scatter(elev, temp, alpha=0.6, label=region, s=20)\nax1.set_xlabel('Elevation (m)')\nax1.set_ylabel('Average Annual Temperature')\nax1.set_title('Average Annual Temperature')\nax1.legend(title='Region')\n\n# Plot the second subplot: Geographical Elevation Distribution\n# Create a histogram of elevations\nall_elevations = np.concatenate(elevations)\nax2.hist(all_elevations, bins=20, color='skyblue', edgecolor='black', alpha=0.7)\nax2.set_xlabel('Elevation (m)')\nax2.set_ylabel('Density')\nax2.set_title('Geographical Elevation Distribution')\n\n# Add a color bar to the second subplot\ncbar = plt.colorbar(ax2.images[0], ax=ax2)\ncbar.set_label('Color Bar Label')\n\n# Adjust layout for better spacing\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_21.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the bar chart\ncategories = ['Savings', 'CDs', 'Stocks', 'Bonds', 'Real Estate', 'ETFs', 'Mutual Funds']\nvalues = [250, 200, 175, 150, 130, 120, 100]\ncolors = ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd', '#8c564b', '#e377c2']\n\n# Create a new figure with a specific size\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10.0, 5.0), gridspec_kw={'width_ratios': [3, 1]})\n\n# Plot the first bar chart\nbars = ax1.bar(categories, values, color=colors, edgecolor='black')\nax1.set_title('Popularity of Financial Products', fontsize=14)\nax1.set_xlabel('Product Type', fontsize=12)\nax1.set_ylabel('Number of Accounts (%)', fontsize=12)\nax1.set_ylim(0, 250)\n\n# Add value labels on top of each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax1.text(bar.get_x() + bar.get_width()/2, yval + 5, f'{yval}', ha='center', va='bottom', fontsize=10)\n\n# Add a legend\nax1.legend(['Stocks', 'Bonds', 'Real Estate'], loc='upper right')\n\n# Plot the second bar chart\nloan_values = [10000, 20000, 30000, 40000]\nloan_labels = ['Urban Loans', 'Rural Loans']\nloan_colors = ['#1f77b4', '#ff7f0e']\n\n# Create a new subplot for the second chart\nax2.barh(loan_labels, loan_values, color=loan_colors, edgecolor='black')\nax2.set_title('Loan Amount Distribution by Region', fontsize=14)\nax2.set_xlabel('Loan Amount ($)', fontsize=12)\nax2.set_ylabel('Region', fontsize=12)\nax2.set_xlim(0, 45000)\n\n# Add value labels on the left side of each bar\nfor i, v in enumerate(loan_values):\n    ax2.text(v + 1000, i, f'{v}', va='center', fontsize=10)\n\n# Adjust layout and display the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_22.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data for the bar chart\ncategories = ['Image Recog.', 'Speech Recog.', 'Language Proc.', 'Game AI']\nvalues = [85, 75, 90, 88]\n\n# Create a new figure with a larger size for better visibility\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10.0, 10.0), gridspec_kw={'width_ratios': [3, 1]})\n\n# Bar chart on the left\nbars = ax1.bar(categories, values, color='skyblue', edgecolor='gray', linewidth=1.5)\nax1.set_title('AI Task Success Rates', fontsize=14, fontweight='bold')\nax1.set_xlabel('Algorithm', fontsize=12)\nax1.set_ylabel('Success Rate (%)', fontsize=12)\nax1.set_ylim(0, 100)\nax1.yaxis.grid(True, linestyle='--', alpha=0.7)\n\n# Add value labels on top of each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax1.text(bar.get_x() + bar.get_width()/2, yval + 1, f'{yval}%', ha='center', va='bottom', fontsize=10)\n\n# Scatter plot on the right\nx = np.array([1, 2, 3, 4])\ny = np.array([95, 90, 85, 80])\ncolors = ['green', 'blue']\nmarkers = ['o', 's']\n\nfor i, (xi, yi, color, marker) in enumerate(zip(x, y, colors, markers)):\n    ax2.scatter(xi, yi, color=color, s=100, marker=marker, label=f'Model {chr(65+i)}')\n\nax2.set_title('AI Model Adaptability', fontsize=14, fontweight='bold')\nax2.set_xlabel('Model', fontsize=12)\nax2.set_ylabel('Adaptability Score (%)', fontsize=12)\nax2.set_xlim(0.5, 4.5)\nax2.set_ylim(75, 100)\nax2.yaxis.grid(True, linestyle='--', alpha=0.7)\n\n# Add a legend\nax2.legend(title='Conditions', loc='upper right', title_fontsize='12', fontsize='10')\n\n# Adjust layout for better spacing\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_23.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data for demonstration\n# Let's assume we have traffic volume data over time of day and different locations\ntime_of_day = np.array([100, 200, 300, 400, 500, 600, 700])\ntraffic_volume_morning = np.array([10, 20, 30, 40, 50, 60, 70])\ntraffic_volume_evening = np.array([15, 25, 35, 45, 55, 65, 75])\n\n# Create a new figure with a larger size for better visibility\nfig, axes = plt.subplots(1, 3, figsize=(10.0, 10.0), constrained_layout=True)\n\n# Plot 1: Traffic Volume by Time of Day\naxes[0].bar(time_of_day, traffic_volume_morning, color='orange', label='Morning Traffic')\naxes[0].bar(time_of_day, traffic_volume_evening, bottom=traffic_volume_morning, color='darkgreen', label='Evening Traffic')\naxes[0].set_title('Traffic Volume by Time of Day')\naxes[0].set_xlabel('Time of Day (km/h)')\naxes[0].set_ylabel('Number of Vehicles')\naxes[0].legend()\n\n# Plot 2: Speed Distribution by Location\nspeeds = np.array([50, 60, 70, 80, 90, 100, 110])\nurban_speeds = np.array([55, 65, 75, 85, 95, 105, 115])\nhighway_speeds = np.array([60, 70, 80, 90, 100, 110, 120])\n\naxes[1].hist(speeds, bins=10, color='lightblue', edgecolor='black', alpha=0.7, label='All Locations')\naxes[1].hist(urban_speeds, bins=10, color='skyblue', edgecolor='black', alpha=0.7, label='Urban')\naxes[1].hist(highway_speeds, bins=10, color='cornflowerblue', edgecolor='black', alpha=0.7, label='Highway')\naxes[1].set_title('Speed Distribution by Location')\naxes[1].set_xlabel('Speed (km/h)')\naxes[1].set_ylabel('Frequency')\naxes[1].legend()\n\n# Plot 3: Elevation Changes Along a Route\nelevation = np.array([0, 100, 150, 200, 250, 300, 350, 400, 450, 500, 550, 600, 650, 700, 750, 800, 850, 900, 950, 1000])\ndistance = np.arange(len(elevation))\n\naxes[2].plot(distance, elevation, color='purple', linewidth=2, marker='o', markersize=5)\naxes[2].set_title('Elevation Changes Along a Route')\naxes[2].set_xlabel('Distance (km)')\naxes[2].set_ylabel('Elevation (m)')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_24.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the pie chart\ncategories = ['Literature', 'Performing Arts', 'Visual Arts', 'Music', 'Dance']\nvalues = [10, 30, 25, 15, 10]\ncolors = ['#ff9999','#66b3ff','#99ff99','#ffcc99','#c2c2f0']\n\n# Create a new figure with a specific size\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10.0, 5.0), subplot_kw={'aspect': 'equal'})\n\n# Plot the first pie chart\nwedges, texts, autotexts = ax1.pie(values, labels=categories, colors=colors, autopct='%1.1f%%', startangle=140, wedgeprops=dict(width=0.4))\nfor text in texts:\n    text.set_color('white')\nfor autotext in autotexts:\n    autotext.set_color('black')\n\n# Add a title to the first subplot\nax1.set_title('Distribution of Arts Education Programs', fontsize=14, fontweight='bold')\n\n# Plot the second pie chart\n# Define data for the second pie chart\ncategories2 = ['Creativity', 'Expression', 'Collaboration', 'Dedication', 'Technique']\nvalues2 = [0.8, 0.6, 0.4, 0.2, 0.0]\ncolors2 = ['#ff9999','#66b3ff','#99ff99','#ffcc99','#c2c2f0']\n\n# Plot the second pie chart\nwedges2, texts2, autotexts2 = ax2.pie(values2, labels=categories2, colors=colors2, autopct='%1.1f%%', startangle=140, wedgeprops=dict(width=0.4))\nfor text in texts2:\n    text.set_color('white')\nfor autotext in autotexts2:\n    autotext.set_color('black')\n\n# Add a title to the second subplot\nax2.set_title('Student Performance in Arts Education', fontsize=14, fontweight='bold')\n\n# Adjust layout for better spacing\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_25.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nregions = ['Region 1', 'Region 2', 'Region 3', 'Region 4', 'Region 5']\nproducts = ['Product A', 'Product B', 'Product C', 'Product D', 'Product E', 'Product F']\nsales = [\n    [2500, 2000, 1500, 1000, 500],\n    [2200, 1800, 1300, 800, 300],\n    [2100, 1700, 1200, 700, 200],\n    [2000, 1600, 1100, 600, 100],\n    [1900, 1500, 1000, 500, 50]\n]\n\n# Create a new figure with a larger size for better visibility\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10.0, 5.0), gridspec_kw={'width_ratios': [2, 3]})\n\n# Plot 1: Bar chart with error bars\nx = np.arange(len(regions))\nbar_width = 0.35\nopacity = 0.8\n\nbars = []\nfor i, product in enumerate(products):\n    bars.append(ax1.bar(x + i * bar_width, sales[i], bar_width, alpha=opacity, label=product, color=plt.cm.viridis(i / len(products))))\n\nax1.set_xlabel('Regions')\nax1.set_ylabel('Sales')\nax1.set_title('Sales by Region and Product')\nax1.set_xticks(x + bar_width)\nax1.set_xticklabels(regions)\nax1.legend(loc='upper right')\n\n# Add error bars\nerrors = [[50, 100, 150, 200, 250] for _ in products]\nfor bar, error in zip(bars, errors):\n    for b, e in zip(bar, error):\n        ax1.errorbar(b.get_x() + b.get_width() / 2, b.get_height(), yerr=e, fmt='o', color='black', capsize=5)\n\n# Add a grid for better readability\nax1.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.7)\n\n# Plot 2: Heatmap\nheatmap_data = np.array([\n    [100, 200, 300, 400, 500],\n    [150, 250, 350, 450, 550],\n    [200, 300, 400, 500, 600],\n    [250, 350, 450, 550, 650],\n    [300, 400, 500, 600, 700]\n])\n\ncax = ax2.imshow(heatmap_data, cmap='viridis', aspect='auto')\n\n# Add color bar\ncbar = fig.colorbar(cax, ax=ax2, orientation='vertical')\ncbar.set_label('User Ratings')\n\n# Set labels and title\nax2.set_xlabel('Technology Products')\nax2.set_ylabel('Regions')\nax2.set_title('User Ratings by Region and Technology Product')\nax2.set_xticks(np.arange(len(products)))\nax2.set_yticks(np.arange(len(regions)))\nax2.set_xticklabels(products)\nax2.set_yticklabels(regions)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data for demonstration\nx1 = np.random.normal(0, 0.2, 100)\ny1 = np.random.normal(0, 0.2, 100)\n\nx2 = np.random.normal(-0.5, 0.3, 100)\ny2 = np.random.normal(0.5, 0.3, 100)\n\nx3 = np.random.normal(0.5, 0.3, 100)\ny3 = np.random.normal(-0.5, 0.3, 100)\n\n# Create a new figure with a larger size for better visibility\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10.0, 5.0), sharey=True)\n\n# Plot the first histogram\nax1.hist([x1, x2, x3], bins=20, color=['green', 'red', 'blue'], alpha=0.7, label=['Gains', 'Losses', 'Tech Stocks'])\nax1.set_title('Histogram of Stock Returns')\nax1.set_xlabel('Returns')\nax1.set_ylabel('Frequency')\nax1.legend()\n\n# Plot the second scatter plot\nax2.scatter(x1, y1, color='yellow', label='Energy Stocks', alpha=0.6)\nax2.scatter(x2, y2, color='cyan', label='Tech Stocks', alpha=0.6)\nax2.scatter(x3, y3, color='magenta', label='Utility Stocks', alpha=0.6)\nax2.set_title('Investment Clusters')\nax2.set_xlabel('X-axis')\nax2.set_ylabel('Y-axis')\nax2.legend()\n\n# Adjust layout for better spacing\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create data for the first plot\nx = np.linspace(0, 5, 100)\ny = np.sin(x) * np.exp(-x / 2)\n\n# Create data for the second plot\nx2 = np.linspace(-4, 4, 100)\ny2 = np.linspace(-2, 2, 100)\nX, Y = np.meshgrid(x2, y2)\nZ = np.sin(np.sqrt(X**2 + Y**2))\n\n# Create a new figure with a larger size for better visibility\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(8.0, 4.0), constrained_layout=True)\n\n# Plot the first graph: Line plot with markers\nax1.plot(x, y, marker='o', linestyle='-', color='b', linewidth=2, markersize=5, label='Energy Consumption')\nax1.set_title('Energy Consumption (GWh)')\nax1.set_xlabel('Relative Year')\nax1.set_ylabel('Energy Consumption (GWh)')\nax1.grid(True, which='both', linestyle='--', linewidth=0.5)\nax1.legend()\n\n# Plot the second graph: Surface plot\nax2.contourf(X, Y, Z, levels=20, cmap='viridis', alpha=0.8)\nax2.set_title('Renewable Energy Ratio (%)')\nax2.set_xlabel('Relative Year')\nax2.set_ylabel('Relative Month')\nax2.set_zlabel('Renewable Energy Ratio (%)')\nax2.view_init(elev=30, azim=120)\nax2.grid(False)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the pie chart\nlabels = ['Ancient Scripts', 'Modern Records', 'Medieval Texts', 'Renaissance Literature']\nsizes = [15, 35, 20, 30]\ncolors = ['#FF9999','#66B3FF','#99FF99','#FFCC99']\nexplode = (0.1, 0, 0, 0)  # explode 1st slice\n\n# Create a new figure with a larger size for better visibility\nfig, ax1 = plt.subplots(figsize=(10.0, 5.0))\n\n# Plot the pie chart\nwedges, texts, autotexts = ax1.pie(sizes, explode=explode, labels=labels, colors=colors,\n                                  autopct='%1.1f%%', shadow=True, startangle=140)\n\n# Enhance the pie chart aesthetics\nax1.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\nplt.setp(autotexts, size=8, weight=\"bold\")\nplt.setp(texts, size=10)\n\n# Add a title to the pie chart\nax1.set_title('Historical Document Types in Library', fontsize=14, fontweight='bold')\n\n# Create a second subplot for the scatter plot\nax2 = fig.add_subplot(122)\nx = np.array([150, 200, 250, 300])\ny = np.array([100, 150, 200, 250])\ncolors = np.array(['purple', 'purple', 'purple', 'purple'])\nsizes = np.array([150, 200, 250, 300])\n\n# Plot the scatter plot\nscatter = ax2.scatter(x, y, c=colors, s=sizes, alpha=0.7, edgecolor='black')\n\n# Set labels and title for the scatter plot\nax2.set_xlabel('Year', fontsize=12)\nax2.set_ylabel('Number of Documents', fontsize=12)\nax2.set_title('Document Count Over Historical Periods', fontsize=14, fontweight='bold')\n\n# Add grid lines for better readability\nax2.grid(True, linestyle='--', alpha=0.7)\n\n# Add annotations for each point\nfor i, txt in enumerate(labels):\n    ax2.annotate(txt, (x[i], y[i]), textcoords=\"offset points\", xytext=(0,10), ha='center', fontsize=10)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data for the scatter plot\nx = np.array([1000, 1200, 1400, 1600, 1800, 2000])\ny = np.array([850, 870, 890, 910, 930, 950])\npopularity_index = np.array([8.5, 8.7, 8.9, 9.1, 9.3, 9.5])\n\n# Create a new figure with a larger size for better visibility\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10.0, 6.0), sharey=True)\n\n# Scatter plot on the first subplot\nscatter = ax1.scatter(x, y, c=popularity_index, cmap='viridis', s=100, alpha=0.7)\nax1.set_title('Luxury Brand Popularity vs Price')\nax1.set_xlabel('Average Price ($)')\nax1.set_ylabel('Popularity Index')\nax1.grid(True, linestyle='--', alpha=0.5)\n\n# Add a color bar to indicate the popularity index\ncbar = fig.colorbar(scatter, ax=ax1, orientation='vertical')\ncbar.set_label('Popularity Index')\n\n# Pie chart on the second subplot\nlabels = ['Gucci', 'Prada', 'Dior', 'Louis Vuitton', 'Chanel']\nsizes = [25, 20, 30, 15, 10]\ncolors = ['#ff9999','#66b3ff','#99ff99','#ffcc99','#c2c2f0']\nexplode = (0.1, 0, 0, 0, 0)  # explode the first slice\n\nax2.pie(sizes, explode=explode, labels=labels, colors=colors,\n        autopct='%1.1f%%', shadow=True, startangle=140)\nax2.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\nax2.set_title('Customer Satisfaction Distribution Across Brands')\n\n# Adjust layout for better spacing\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\ncategories = ['Zhang2020', 'Addelpalli2021', 'Rice2020', 'Rade2021', 'Engstrom2019', 'Hendrycks2019']\naccuracy = [75.32, 77.11, 77.03, 76.86, 75.34, 74.52]\nrobustness = [60.5, 59.3, 58.35, 59.1, 55.95, 55.5]\n\n# Create a new figure with a larger size for better visibility\nfig, axes = plt.subplots(1, 2, figsize=(10.0, 7.0), constrained_layout=True)\n\n# Plotting the first subplot: Accuracy\nbars1 = axes[0].bar(categories, accuracy, color=plt.cm.viridis(np.linspace(0.2, 0.8, len(categories))))\naxes[0].set_title('Accuracy (%)')\naxes[0].set_xlabel('Models')\naxes[0].set_ylabel('Accuracy (%)')\naxes[0].set_ylim([0, 100])\naxes[0].grid(axis='y', linestyle='--', alpha=0.7)\n\n# Add value labels on top of each bar\nfor bar in bars1:\n    yval = bar.get_height()\n    axes[0].text(bar.get_x() + bar.get_width()/2, yval + 0.5, f'{yval:.2f}', ha='center', va='bottom', fontsize=10)\n\n# Plotting the second subplot: Robustness\nbars2 = axes[1].bar(categories, robustness, color=plt.cm.viridis(np.linspace(0.2, 0.8, len(categories))))\naxes[1].set_title('Robustness (%)')\naxes[1].set_xlabel('Models')\naxes[1].set_ylabel('Robustness (%)')\naxes[1].set_ylim([0, 100])\naxes[1].grid(axis='y', linestyle='--', alpha=0.7)\n\n# Add value labels on top of each bar\nfor bar in bars2:\n    yval = bar.get_height()\n    axes[1].text(bar.get_x() + bar.get_width()/2, yval + 0.5, f'{yval:.2f}', ha='center', va='bottom', fontsize=10)\n\n# Add a legend to explain the color coding\ncolors = plt.cm.viridis(np.linspace(0.2, 0.8, len(categories)))\nfor i, (bar, color) in enumerate(zip(bars1, colors)):\n    axes[0].bar_label(bar, padding=3, color=color, label_type='center')\n\n# Add a legend to explain the color coding\ncolors = plt.cm.viridis(np.linspace(0.2, 0.8, len(categories)))\nfor i, (bar, color) in enumerate(zip(bars2, colors)):\n    axes[1].bar_label(bar, padding=3, color=color, label_type='center')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: General Variance and Average Regret for different algorithms\ngeneral_variance = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0]\navg_regret = [\n    [0.15, 0.18, 0.20, 0.22, 0.25, 0.28, 0.30, 0.32, 0.34, 0.35],\n    [0.10, 0.12, 0.14, 0.16, 0.18, 0.20, 0.22, 0.24, 0.26, 0.28],\n    [0.12, 0.14, 0.16, 0.18, 0.20, 0.22, 0.24, 0.26, 0.28, 0.30],\n    [0.13, 0.15, 0.17, 0.19, 0.21, 0.23, 0.25, 0.27, 0.29, 0.31],\n    [0.14, 0.16, 0.18, 0.20, 0.22, 0.24, 0.26, 0.28, 0.30, 0.32]\n]\n\n# Create a new figure with a larger size for better visibility\nfig, ax1 = plt.subplots(figsize=(7.0, 9.0))\n\n# Plot the main line chart for average regret\ncolors = ['#1f77b4', '#2ca02c', '#ff7f0e', '#d62728', '#9467bd']\nlinestyles = ['-', '--', '-.', ':']\n\nfor i, regret in enumerate(avg_regret):\n    ax1.plot(general_variance, regret, color=colors[i], linestyle=linestyles[i], marker='o', markersize=5, label=f'Algorithm {i+1}')\n\n# Set labels and title for the primary y-axis\nax1.set_xlabel('General Variance')\nax1.set_ylabel('Average Regret', color=colors[0])\nax1.set_title('Comparison of Algorithms on Different Variance Settings')\n\n# Add a legend for the primary y-axis\nax1.legend(loc='upper right')\n\n# Create a secondary y-axis for general variance\nax2 = ax1.twinx()\nax2.set_ylabel('General Variance', color='gray')\nax2.tick_params(axis='y', labelcolor='gray')\n\n# Customize the grid\nax1.grid(True, which='both', linestyle='--', linewidth=0.5)\nax1.yaxis.grid(True, which='major', linestyle='-', linewidth=0.5)\n\n# Add annotations to highlight key points\nfor i, regret in enumerate(avg_regret):\n    for j, value in enumerate(regret):\n        ax1.annotate(f'{value:.2f}', (general_variance[j], regret[j]), textcoords=\"offset points\", xytext=(0,10), ha='center', fontsize=8, color=colors[i])\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data for plotting\nx = np.array([0, 200, 400])\ny = np.array([50, 100, 150])\n\n# Create a new figure with a specific size\nfig, (ax1, ax2, ax3) = plt.subplots(1, 3, figsize=(10.0, 4.0), sharey=True)\n\n# Plot 1: Line plot\nax1.plot(x, y, marker='o', linestyle='-', color='b', linewidth=2, markersize=8)\nax1.set_title('Debater')\nax1.set_xlabel('Elo Rating')\nax1.set_ylabel('Correct Rating - Incorrect Rating')\n\n# Add annotations\nfor i, txt in enumerate(y):\n    ax1.annotate(f'bo{i+32}', (x[i], y[i]), textcoords=\"offset points\", xytext=(0,10), ha='center')\n\n# Plot 2: Scatter plot\ncolors = ['blue', 'green', 'red']\nmarkers = ['o', 's', '^']\nlabels = ['Assignment', 'Correct', 'Incorrect']\n\nfor i, (color, marker, label) in enumerate(zip(colors, markers, labels)):\n    ax2.scatter(x, y, c=color, marker=marker, s=100, alpha=0.7, label=label)\nax2.set_title('Aggregate Elo Rating')\nax2.set_xlabel('Aggregate Elo Rating')\nax2.legend()\n\n# Plot 3: Scatter plot with line of best fit\nslope, intercept = np.polyfit(x, y, 1)\nline_x = np.array(ax3.get_xlim())\nline_y = slope * line_x + intercept\nax3.scatter(x, y, c='orange', marker='x', s=100, alpha=0.7, label='Data Points')\nax3.plot(line_x, line_y, color='black', linestyle='--', linewidth=2, label='Line of Best Fit')\nax3.set_title('Judge Accuracy (%)')\nax3.set_xlabel('Aggregate Elo Rating')\nax3.set_ylabel('Judge Accuracy (%)')\nax3.legend()\n\n# Adjust layout and display the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the pie chart\nsizes = [30.5, 46, 10.6, 11.3, 13.2, 29.8]\nlabels = ['Green', 'Blue', 'Purple', 'Yellow', 'Orange', 'Cyan']\ncolors = ['#4CAF50', '#2196F3', '#9C27B0', '#FFC107', '#FF5722', '#00BCD4']\nexplode = (0.1, 0, 0, 0, 0, 0)  # Explode the first slice for emphasis\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(5.0, 5.0))\n\n# Plot the pie chart\nwedges, texts, autotexts = ax.pie(\n    sizes,\n    labels=labels,\n    colors=colors,\n    autopct='%1.1f%%',\n    startangle=140,\n    explode=explode,\n    shadow=True,\n    textprops={'color': 'white'}\n)\n\n# Enhance the chart with a title and a legend\nax.set_title('Pie Chart of Various Categories', fontsize=14, fontweight='bold')\nax.legend(wedges, labels, title=\"Categories\", loc=\"center left\", bbox_to_anchor=(1, 0, 0.5, 1))\n\n# Equal aspect ratio ensures that pie is drawn as a circle.\nax.axis('equal')\n\n# Display the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the pie chart\nsizes = [90, 225, 1, 60, 1/2]\nlabels = ['90 g sugar', '225 g flour', '1 egg', '60 g butter', '1/2 package of yeast']\ncolors = ['#ff9999','#66b3ff','#99ff99','#ffcc99','#c2c2f0']\nexplode = (0.1, 0, 0, 0, 0)  # explode 1st slice\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Plot the pie chart\nwedges, texts, autotexts = ax.pie(\n    sizes, \n    explode=explode, \n    labels=labels, \n    colors=colors, \n    autopct='%1.1f%%', \n    shadow=True, \n    startangle=140,\n    wedgeprops=dict(width=0.4)\n)\n\n# Enhance the chart with additional features\nax.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\n\n# Add a title\nplt.title('Matplotlib bakery: A donut', fontsize=14, fontweight='bold')\n\n# Add a legend\nplt.legend(wedges, labels, title=\"Ingredients\", loc=\"center left\", bbox_to_anchor=(1, 0, 0.5, 1))\n\n# Add annotations for clarity\nfor text in texts:\n    text.set_fontsize(10)\nfor autotext in autotexts:\n    autotext.set_fontsize(10)\n\n# Display the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the pie chart\nlabels = ['Transport', 'Food', 'Utilities', 'Others', 'Entertainment']\nsizes = [37.5, 29.2, 16.7, 10.0, 10.0]\ncolors = ['#4a90e2', '#f2c80f', '#e74c3c', '#3498db', '#2ecc71']\nexplode = (0.1, 0, 0, 0, 0)  # explode the first slice\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Plot the pie chart\nwedges, texts, autotexts = ax.pie(\n    sizes, \n    labels=labels, \n    colors=colors, \n    autopct='%1.1f%%', \n    startangle=140, \n    pctdistance=0.85, \n    explode=explode, \n    shadow=True, \n    wedgeprops=dict(width=0.3)\n)\n\n# Add a circle at the center to make it look like a donut\ncentre_circle = plt.Circle((0,0),0.70,fc='white')\nfig.gca().add_artist(centre_circle)\n\n# Equal aspect ratio ensures that pie is drawn as a circle.\nax.axis('equal')  \n\n# Add a title\nplt.title('Expenses - Company vs. Project', fontsize=16, fontweight='bold')\n\n# Add a legend\nplt.legend(wedges, labels, title=\"Categories\", loc=\"center left\", bbox_to_anchor=(1, 0, 0.5, 1))\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the first pie chart\nlabels1 = ['Model', 'Optimizer', 'Unused', 'Gradient']\nsizes1 = [31.4, 19.9, 15.7, 33.0]\ncolors1 = ['#FFD700', '#ADD8E6', '#FFA500', '#90EE90']\nexplode1 = (0.1, 0, 0, 0)  # Explode the first slice\n\n# Data for the second pie chart\nlabels2 = ['Model', 'Optimizer', 'Unused', 'Gradient']\nsizes2 = [54.8, 28.4, 10.5, 6.3]\ncolors2 = ['#FFD700', '#ADD8E6', '#FFA500', '#90EE90']\nexplode2 = (0.1, 0, 0, 0)  # Explode the first slice\n\n# Create a new figure with a larger size\nfig, axes = plt.subplots(1, 2, figsize=(10.0, 4.0))\n\n# Plot the first pie chart\nwedges1, texts1, autotexts1 = axes[0].pie(\n    sizes1, labels=labels1, colors=colors1, autopct='%1.1f%%', startangle=140,\n    explode=explode1, shadow=True, textprops={'color': 'black'}\n)\naxes[0].set_title('LoRA', fontsize=14, fontweight='bold')\naxes[0].axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\n\n# Add a legend\nplt.legend(wedges1, labels1, title=\"Components\", loc=\"center left\", bbox_to_anchor=(1, 0, 0.5, 1))\n\n# Plot the second pie chart\nwedges2, texts2, autotexts2 = axes[1].pie(\n    sizes2, labels=labels2, colors=colors2, autopct='%1.1f%%', startangle=140,\n    explode=explode2, shadow=True, textprops={'color': 'black'}\n)\naxes[1].set_title('QLoRA', fontsize=14, fontweight='bold')\naxes[1].axis('equal')\n\n# Add a legend\nplt.legend(wedges2, labels2, title=\"Components\", loc=\"center left\", bbox_to_anchor=(1, 0, 0.5, 1))\n\n# Adjust layout to prevent overlap\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the pie charts\ndata1 = [25.1, 26.4, 12.6]\ndata2 = [46.2, 23.9, 4.6, 5.3]\n\n# Labels for the slices\nlabels1 = ['Model', 'Optimizer', 'Gradient+Activations+Other']\nlabels2 = ['Model', 'Optimizer', 'Gradient+Activations+Other', 'Unused']\n\n# Create a new figure with a larger size for better visibility\nfig, axes = plt.subplots(1, 2, figsize=(10, 5), subplot_kw={'aspect': 'equal'})\n\n# Plot the first pie chart\nwedges1, texts1, autotexts1 = axes[0].pie(\n    data1, \n    labels=labels1, \n    autopct='%1.1f%%', \n    startangle=140, \n    colors=['#FFA500', '#87CEEB', '#90EE90'], \n    wedgeprops=dict(width=0.4)\n)\n\n# Enhance the first pie chart\naxes[0].set_title('Full Finetuning', fontsize=14, fontweight='bold')\nplt.setp(autotexts1, size=10, weight=\"bold\")\nplt.setp(texts1, size=10)\n\n# Plot the second pie chart\nwedges2, texts2, autotexts2 = axes[1].pie(\n    data2, \n    labels=labels2, \n    autopct='%1.1f%%', \n    startangle=140, \n    colors=['#FFA500', '#87CEEB', '#90EE90', '#FFFF00'], \n    wedgeprops=dict(width=0.4)\n)\n\n# Enhance the second pie chart\naxes[1].set_title('QLoRA', fontsize=14, fontweight='bold')\nplt.setp(autotexts2, size=10, weight=\"bold\")\nplt.setp(texts2, size=10)\n\n# Adjust layout and display the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the pie chart\nlabels = ['Fruits', 'Proteins', 'Vegetables', 'Grains', 'Dairy']\nsizes = [35, 25, 20, 10, 10]\ncolors = ['#FF9999','#66B3FF','#99FF99','#FFCC99','#C2C2F0']\nexplode = (0.1, 0, 0, 0, 0)  # explode 1st slice\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Plot the pie chart\nwedges, texts, autotexts = ax.pie(\n    sizes, \n    explode=explode, \n    labels=labels, \n    colors=colors, \n    autopct='%1.1f%%', \n    shadow=True, \n    startangle=140,\n    wedgeprops=dict(width=0.4)\n)\n\n# Enhance the chart with a title and annotations\nax.set_title('Nutritional Distribution', fontsize=14, fontweight='bold')\nfor text in texts:\n    text.set_color('white')\nfor autotext in autotexts:\n    autotext.set_color('black')\n\n# Equal aspect ratio ensures that pie is drawn as a circle.\nax.axis('equal')  \n\n# Add a legend\nplt.legend(wedges, labels, title=\"Categories\", loc=\"center left\", bbox_to_anchor=(1, 0, 0.5, 1))\n\n# Display the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the pie chart\nlabels = ['Education', 'Entertainment', 'Technology']\nsizes = [18.8, 21.4, 37.5]\ncolors = ['#1f77b4', '#ff7f0e', '#2ca02c']\nexplode = (0.1, 0, 0)  # explode 1st slice\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the pie chart\nwedges, texts, autotexts = ax.pie(\n    sizes, \n    labels=labels, \n    colors=colors, \n    autopct='%1.1f%%', \n    startangle=140, \n    explode=explode,\n    shadow=True, \n    wedgeprops=dict(width=0.4)\n)\n\n# Customize the text properties\nfor text in texts:\n    text.set_color('white')\n    text.set_fontsize(12)\n\nfor autotext in autotexts:\n    autotext.set_color('white')\n    autotext.set_fontsize(12)\n    autotext.set_weight('bold')\n\n# Add a title\nax.set_title('Market Share by Sector - External vs. Internal', fontsize=16, fontweight='bold')\n\n# Equal aspect ratio ensures that pie is drawn as a circle.\nax.axis('equal')  \n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the pie chart\nsizes = [40, 33.3, 16.7, 10, 3.3]  # Values representing different categories\nlabels = ['Hogs 30%', 'Frogs 15%', 'Logs 10%', 'Dogs 45%', 'Other 3%']\ncolors = ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd']  # Custom colors for each slice\nexplode = (0.1, 0, 0, 0, 0)  # Explode the first slice for emphasis\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Plot the pie chart\nwedges, texts, autotexts = ax.pie(\n    sizes,\n    labels=labels,\n    autopct='%1.1f%%',\n    startangle=140,\n    colors=colors,\n    explode=explode,\n    shadow=True,\n    wedgeprops=dict(width=0.4)\n)\n\n# Customize the text properties\nfor text in texts:\n    text.set_color('white')\n    text.set_fontsize(10)\n\nfor autotext in autotexts:\n    autotext.set_color('white')\n    autotext.set_fontsize(10)\n    autotext.set_weight('bold')\n\n# Add a title\nax.set_title('Pie Chart of Different Categories', fontsize=14, fontweight='bold')\n\n# Equal aspect ratio ensures that pie is drawn as a circle.\nax.axis('equal')  \n\n# Display the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the pie chart\nlabels = ['David', 'John', 'Marry', 'Peter']\nsizes = [29, 11, 20, 40]\ncolors = ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728']\nexplode = (0.1, 0, 0, 0)  # Explode the first slice for emphasis\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(5.0, 5.0))\n\n# Plot the pie chart\nwedges, texts, autotexts = ax.pie(\n    sizes, \n    explode=explode, \n    labels=labels, \n    colors=colors, \n    autopct='%1.1f%%', \n    startangle=140, \n    shadow=True, \n    wedgeprops=dict(width=0.4)\n)\n\n# Customize the text properties\nfor text in texts:\n    text.set_color('white')\nfor autotext in autotexts:\n    autotext.set_color('white')\n\n# Add a title\nax.set_title('Pie Chart of Survey Results', fontsize=14, fontweight='bold')\n\n# Equal aspect ratio ensures that pie is drawn as a circle.\nax.axis('equal')  \n\n# Display the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the pie chart\nlabels = ['UK', 'Germany', 'France', 'Italy']\nsizes = [42, 12, 18, 28]\ncolors = ['#6b9a6c', '#7f7f7f', '#d65f5f', '#984ea3']\nexplode = (0.1, 0, 0, 0)  # explode the first slice\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(5.0, 5.0))\n\n# Plot the pie chart\nwedges, texts, autotexts = ax.pie(\n    sizes, \n    labels=labels, \n    colors=colors, \n    autopct='%1.1f%%', \n    startangle=140, \n    pctdistance=0.85, \n    explode=explode,\n    shadow=True, \n    wedgeprops=dict(width=0.3)\n)\n\n# Add a circle at the center to make it look like a donut chart\ncentre_circle = plt.Circle((0,0),0.70,fc='white')\nfig.gca().add_artist(centre_circle)\n\n# Customize the text properties\nplt.setp(autotexts, size=10, weight=\"bold\", color=\"white\")\nplt.setp(texts, size=10, weight=\"bold\")\n\n# Set the title of the chart\nax.set_title('Countries in Europe', fontsize=14, fontweight='bold')\n\n# Equal aspect ratio ensures that pie is drawn as a circle.\nax.axis('equal')  \n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the pie chart\nsizes = [26.2, 19.0, 14.3, 13.3, 5.7]\nlabels = ['Slice 1', 'Slice 2', 'Slice 3', 'Slice 4', 'Slice 5']\ncolors = ['#ff9999','#66b3ff','#99ff99','#ffcc99','#c2c2f0']\nexplode = (0.1, 0, 0, 0, 0)  # explode 1st slice\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(5.0, 5.0))\n\n# Plot the pie chart\nwedges, texts, autotexts = ax.pie(\n    sizes, \n    labels=labels, \n    colors=colors, \n    autopct='%1.1f%%', \n    startangle=140, \n    pctdistance=0.85, \n    wedgeprops=dict(width=0.3), \n    textprops={'color': 'black'}\n)\n\n# Add a circle at the center to make it look like a donut\ncentre_circle = plt.Circle((0,0),0.70,fc='white')\nfig.gca().add_artist(centre_circle)\n\n# Enhance the chart with a title and a legend\nax.set_title('Slice of a pie chart', fontsize=14, fontweight='bold', pad=20)\nax.legend(wedges, labels, title=\"Slices\", loc=\"center left\", bbox_to_anchor=(1, 0, 0.5, 1))\n\n# Adjust layout for better spacing\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the pie chart\nlabels = ['Psychological', 'Others', 'Market', 'Satisfactory', 'Social']\nsizes = [35.4, 12.4, 17.2, 24.7, 10.3]\ncolors = ['#1f77b4', '#2ca02c', '#ff7f0e', '#d62728', '#9467bd']\nexplode = (0.1, 0, 0, 0, 0)  # explode the first slice\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the pie chart\nwedges, texts, autotexts = ax.pie(\n    sizes, \n    labels=labels, \n    colors=colors, \n    autopct='%1.1f%%', \n    startangle=140, \n    explode=explode,\n    textprops=dict(color=\"w\")\n)\n\n# Enhance the chart with a title and a legend\nax.set_title('Pie Chart of Various Categories', fontsize=14, fontweight='bold')\nax.legend(wedges, labels, title=\"Categories\", loc=\"center left\", bbox_to_anchor=(1, 0, 0.5, 1))\n\n# Equal aspect ratio ensures that pie is drawn as a circle.\nax.axis('equal')  \n\n# Display the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the pie chart\nlabels = ['YouTube', 'Facebook', 'Instagram', 'Twitter', 'LinkedIn']\nsizes = [25, 35, 10, 10, 20]\ncolors = ['#87CEEB', '#ADD8E6', '#FFD700', '#FFA07A', '#FF4500']\nexplode = (0.1, 0, 0, 0, 0)  # explode the first slice\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the pie chart\nwedges, texts, autotexts = ax.pie(\n    sizes, \n    labels=labels, \n    colors=colors, \n    autopct='%1.1f%%', \n    startangle=140, \n    explode=explode,\n    shadow=True, \n    wedgeprops=dict(width=0.4)\n)\n\n# Enhance the chart with a title and annotations\nax.set_title('Social Media Usage', fontsize=16, fontweight='bold')\nax.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\n\n# Add a legend\nplt.legend(wedges, labels, title=\"Social Media\", loc=\"center left\", bbox_to_anchor=(1, 0, 0.5, 1))\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the pie chart\nlabels = ['NAACL', 'EMNLP', 'COLING', 'EACL', 'ACL']\nsizes = [25.4, 7.4, 12.2, 20.3, 34.7]\ncolors = ['#8dd3c7', '#ffffb3', '#bebada', '#fb8072', '#d9d9d9']\nexplode = (0.1, 0, 0, 0, 0)  # Explode the first slice for emphasis\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Plot the pie chart\nwedges, texts, autotexts = ax.pie(\n    sizes, \n    explode=explode, \n    labels=labels, \n    colors=colors, \n    autopct='%1.1f%%', \n    startangle=140, \n    textprops=dict(color=\"black\")\n)\n\n# Enhance the pie chart with a shadow and a title\nax.set_title('NLP Conference Influence', fontsize=14, fontweight='bold')\nax.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\n\n# Add a legend\nplt.legend(wedges, labels, title=\"Conferences\", loc=\"center left\", bbox_to_anchor=(1, 0, 0.5, 1))\n\n# Add annotations for clarity\nfor i, txt in enumerate(autotexts):\n    txt.set_color(colors[i])\n    txt.set_fontsize(10)\n    txt.set_weight('bold')\n\n# Display the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the pie chart\nlabels = ['Coal', 'Hydro', 'Wind', 'Solar', 'Other']\nsizes = [25, 15, 12.5, 8.3, 10]\ncolors = ['#FF9999','#66B3FF','#99FF99','#FFCC99','#C2C2F0']\nexplode = (0.1, 0, 0, 0, 0)  # explode 1st slice\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Plot the pie chart\nwedges, texts, autotexts = ax.pie(sizes, \n                                  explode=explode, \n                                  labels=labels, \n                                  colors=colors, \n                                  autopct='%1.1f%%', \n                                  shadow=True, \n                                  startangle=140, \n                                  wedgeprops=dict(width=0.4))\n\n# Enhance the chart with a title and annotations\nax.set_title('Energy Consumption - National vs. Project', fontsize=14, fontweight='bold')\nfor text in texts:\n    text.set_color('white')\nfor autotext in autotexts:\n    autotext.set_color('black')\n\n# Add a legend\nax.legend(wedges, labels, title=\"Energy Sources\", loc=\"center left\", bbox_to_anchor=(1, 0, 0.5, 1))\n\n# Equal aspect ratio ensures that pie is drawn as a circle.\nax.axis('equal')  \n\n# Display the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/quiver_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Bias scores for different countries and bias types\ncountries = ['English', 'French', 'German', 'Chinese', 'Korean', 'Japanese']\nout_group_bias = [-4.00, -3.22, -2.44, -4.00, -4.75, -4.75]\nin_group_bias = [1.88, 2.88, 3.38, 1.11, 0.50, 0.78]\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(10.0, 4.0))\n\n# Plot the data with enhanced aesthetics\nax.plot(countries, out_group_bias, marker='o', linestyle='-', color='red', label='Out-group bias (Collectivism)', linewidth=2)\nax.plot(countries, in_group_bias, marker='s', linestyle='--', color='blue', label='In-group bias (Individualism)', linewidth=2)\n\n# Set labels and title with improved font sizes\nax.set_xlabel('Country', fontsize=12)\nax.set_ylabel('Bias Score', fontsize=12)\nax.set_title('Bias Scores by Country', fontsize=14)\n\n# Add grid lines for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Customize ticks\nax.set_xticks(range(len(countries)))\nax.set_xticklabels(countries, rotation=45, ha='right')\n\n# Add a legend with a shadow effect\nax.legend(loc='upper left', fontsize=10, shadow=True)\n\n# Annotate each point with its value\nfor i, (out_val, in_val) in enumerate(zip(out_group_bias, in_group_bias)):\n    ax.annotate(f'{out_val:.2f}', (i, out_val), textcoords=\"offset points\", xytext=(0,10), ha='center')\n    ax.annotate(f'{in_val:.2f}', (i, in_val), textcoords=\"offset points\", xytext=(0,-10), ha='center')\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/quiver_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Scores of different languages on a test\nlanguages = ['English', 'French', 'German']\nscores = [\n    [-4.00, -3.22, -2.44],\n    [-3.00, -2.50, -1.90],\n    [-2.00, -1.50, -1.00]\n]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(5.0, 4.0))\n\n# Define colors for each language\ncolors = ['#FF0000', '#0000FF', '#008000']\n\n# Plot the data with error bars\nfor i, (language, score) in enumerate(zip(languages, scores)):\n    ax.errorbar(\n        np.arange(1, len(score) + 1),\n        score,\n        yerr=0.1,  # Standard error for demonstration\n        fmt='o',\n        color=colors[i],\n        ecolor='gray',\n        elinewidth=2,\n        capsize=5,\n        label=language\n    )\n\n# Set labels and title\nax.set_xlabel('Test Questions', fontsize=12)\nax.set_ylabel('Scores', fontsize=12)\nax.set_title('Language Test Scores', fontsize=14, fontweight='bold')\n\n# Add grid lines for better readability\nax.grid(True, linestyle='--', alpha=0.7)\n\n# Add legend\nax.legend(title='Languages', loc='upper right', fontsize=10)\n\n# Customize ticks\nax.set_xticks(np.arange(1, len(score) + 1))\nax.set_xticklabels(['Q1', 'Q2', 'Q3'], fontsize=10)\nax.set_yticks(np.arange(-5, 0, 1))\nax.set_yticklabels([str(i) for i in range(-5, 0)], fontsize=10)\n\n# Add annotations for clarity\nfor i, score in enumerate(scores):\n    for j, s in enumerate(score):\n        ax.annotate(f'{s:.2f}', (j + 1, s), textcoords=\"offset points\", xytext=(0,10), ha='center', fontsize=9)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/quiver_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create data for demonstration\nx = np.linspace(0, 1, 100)\ny = np.sin(x * 2 * np.pi) + 0.5 * np.cos(x * 4 * np.pi)\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the main line with enhanced styling\nax.plot(x, y, label='Main Line', color='blue', linewidth=2, linestyle='-', marker='o', markersize=5, markevery=10)\n\n# Add grid lines for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5, alpha=0.7)\n\n# Set labels with improved font size and style\nax.set_xlabel('X1', fontsize=12, fontweight='bold')\nax.set_ylabel('X2', fontsize=12, fontweight='bold')\n\n# Add a title with enhanced font size and style\nax.set_title('Enhanced Line Plot', fontsize=14, fontweight='bold')\n\n# Add a legend with improved location and font size\nax.legend(loc='upper right', fontsize=10)\n\n# Customize ticks for better readability\nax.xaxis.set_major_locator(plt.MultipleLocator(0.2))\nax.yaxis.set_major_locator(plt.MultipleLocator(0.2))\n\n# Add annotations to highlight key points\nax.annotate('Peak', xy=(0.5, 1), xytext=(0.6, 1.2),\n            arrowprops=dict(facecolor='black', shrink=0.05),\n            fontsize=10, fontweight='bold')\n\nax.annotate('Trough', xy=(0.9, -0.5), xytext=(0.8, -0.8),\n            arrowprops=dict(facecolor='black', shrink=0.05),\n            fontsize=10, fontweight='bold')\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/quiver_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create data for demonstration\nx = np.linspace(-1, 1, 100)\ny = np.linspace(-1, 1, 100)\nX, Y = np.meshgrid(x, y)\n\n# Define a vector field\nU = -Y\nV = X\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(5.0, 4.0))\n\n# Plot the vector field\nquiver = ax.quiver(X, Y, U, V, color='blue', scale=20, width=0.005, headwidth=3, headlength=4)\n\n# Add a color bar to indicate the magnitude of the vectors\ncbar = plt.colorbar(quiver)\ncbar.set_label('Magnitude')\n\n# Set labels and title\nax.set_xlabel('X')\nax.set_ylabel('Y')\nax.set_title('Vector Field: $-F + \\u03C1\\u2227\\u2202\\u03C6$ (Small \\u03C1)')\n\n# Add grid lines for better readability\nax.grid(True, linestyle='--', alpha=0.7)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/quiver_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create data for demonstration\nx = np.linspace(-2, 2, 100)\ny = np.linspace(-2, 2, 100)\nX, Y = np.meshgrid(x, y)\nZ = np.sin(np.sqrt(X**2 + Y**2))\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(6.0, 5.0))\n\n# Plot the contourf with a color map\ncontour_filled = ax.contourf(X, Y, Z, levels=20, cmap='viridis', alpha=0.8)\n\n# Add contour lines for better visualization\ncontour_lines = ax.contour(X, Y, Z, levels=20, colors='black', linewidths=0.5)\n\n# Add labels and title\nax.set_xlabel('X-axis')\nax.set_ylabel('Y-axis')\nax.set_title('Magnetic Field $\\mathbf{B}$ in Tesla units')\n\n# Add a color bar\ncbar = fig.colorbar(contour_filled)\ncbar.set_label('Field Intensity')\n\n# Add grid lines for better readability\nax.grid(True, linestyle='--', alpha=0.5)\n\n# Add arrows to indicate direction of the field\nax.quiver(X[::3, ::3], Y[::3, ::3], Z[::3, ::3], Z[::3, ::3], color='white', scale=50)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_1.pdf", "response": "```python\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Define the data for the radar chart\ncategories = ['VQA', 'MME', 'MM', 'LLaVA-W', 'POPE']\nvalues = [79.9, 64.9, 66.9, 75.8, 86.4]\ncolors = ['#FF5733', '#33FF57', '#3357FF', '#F333FF', '#FFFF33']\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(8.0, 7.0), subplot_kw=dict(polar=True))\n\n# Calculate the number of categories and create an array of angles\nN = len(categories)\nangles = np.linspace(0, 2 * np.pi, N, endpoint=False).tolist()\nangles += angles[:1]  # Repeat the first angle to close the polygon\n\n# Plot the data\nax.plot(angles, values + values[:1], linewidth=1, linestyle='solid', label='TextVQA', color='red')\nax.fill(angles, values + values[:1], facecolor='red', alpha=0.2)\n\n# Set the category labels\nax.set_xticks(angles[:-1])\nax.set_xticklabels(categories)\n\n# Add a title\nax.set_title('Radar Chart Example', size=16, color='darkblue', y=1.1)\n\n# Customize the grid lines\nax.yaxis.grid(True, color='gray', linestyle='--', linewidth=0.5)\n\n# Add a legend\nax.legend(loc='upper right', bbox_to_anchor=(1.1, 1.1))\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_10.pdf", "response": "```python\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Define the data for the radar chart\ncategories = ['fr', 'hi', 'ru', 'th', 'tr', 'ur', 'vi', 'zh']\nvalues = [20, 40, 60, 80, 100, 120, 140, 160]\nnum_vars = len(categories)\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(5.0, 5.0), subplot_kw=dict(polar=True))\n\n# Calculate the angle for each category\nangles = np.linspace(0, 2 * np.pi, num_vars, endpoint=False).tolist()\nangles += angles[:1]  # Repeat the first angle to close the plot\n\n# Plot the data\nax.plot(angles, values + values[:1], linewidth=2, linestyle='solid', label='Speed-up ratio: 4')\nax.fill(angles, values + values[:1], alpha=0.25)\n\n# Set the categories as tick labels\nax.set_xticks(angles[:-1])\nax.set_xticklabels(categories)\n\n# Add a title and legend\nax.set_title('XLNI', size=16, color='darkred', y=1.1)\nax.legend(loc='upper right', bbox_to_anchor=(1.3, 1.1))\n\n# Customize the grid lines\nax.grid(True, color='grey', linestyle='--', linewidth=0.5)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_11.pdf", "response": "```python\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Define the data for the radar chart\ncategories = ['Understanding', 'Memory', 'Reasoning', 'Questioning', 'Paraphrasing', 'Reflection']\nN = len(categories)\n\n# Data for each category\nvalues = [8, 10, 6, 4, 2, 0]\n\n# Normalize the values to fit within the unit circle\nmax_value = max(values)\nnormalized_values = [v / max_value for v in values]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(4.0, 4.0), subplot_kw=dict(polar=True))\n\n# Draw one axe per variable and add labels\nangles = np.linspace(0, 2 * np.pi, N, endpoint=False).tolist()\nangles += angles[:1]  # To close the loop\n\n# Plot the data\nax.plot(angles, normalized_values + normalized_values[:1], linewidth=2, linestyle='solid', label='Interference')\nax.fill(angles, normalized_values + normalized_values[:1], 'b', alpha=0.1)\n\n# Add labels\nplt.xticks(angles[:-1], categories, color='grey', size=10)\nplt.yticks([0.25, 0.5, 0.75, 1], ['0.25', '0.5', '0.75', '1'], color='grey', size=10)\n\n# Add a title\nplt.title(\"Radar Chart Example\", size=14, color='black', y=1.1)\n\n# Add a legend\nplt.legend(loc='upper right', bbox_to_anchor=(1.3, 1.1))\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_12.pdf", "response": "```python\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Define the data for the radar chart\ncategories = ['N', 'E', 'S', 'W']\nvalues = [0.46, 0.5, 0.48, 0.5]\nnum_vars = len(categories)\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(8.0, 6.0), subplot_kw=dict(polar=True))\n\n# Plot the radar chart\nax.plot(np.append(values, values[0]), np.append(categories, categories[0]), \n       color='blue', linewidth=2, linestyle='-', marker='o', markersize=8, label='\u03bcTrain')\n\n# Fill the area under the line\nax.fill(np.append(values, values[0]), np.append(categories, categories[0]), \n        color='lightblue', alpha=0.3)\n\n# Set the title of the chart\nax.set_title('Radar Chart Example', fontsize=14, fontweight='bold', pad=20)\n\n# Customize the grid lines\nax.grid(True, linestyle='--', linewidth=0.5, color='gray', alpha=0.7)\n\n# Add a legend\nax.legend(loc='upper right', fontsize=10)\n\n# Customize the ticks and labels\nax.set_yticks(range(num_vars))\nax.set_yticklabels(categories)\nax.set_xticks(np.linspace(0, 2 * np.pi, num_vars, endpoint=False))\nax.set_xticklabels(['N', 'NE', 'E', 'SE', 'S', 'SW', 'W', 'NW'])\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define categories and their order\ncategories = ['video game', 'programming world', 'universe', 'fairy tale', 'country', 'special place', 'city', 'landscape', 'cultural event']\nN = len(categories)\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(6.0, 6.0), subplot_kw=dict(polar=True))\n\n# Define data for each category\ndata = [0.8, 0.6, 0.4, 0.2, 0.6, 0.8, 0.2, 0.4, 0.6]\n\n# Compute the angle for each category\nangles = np.linspace(0, 2 * np.pi, N, endpoint=False).tolist()\nangles += angles[:1]  # Repeat the first angle to close the plot\n\n# Plot the data\nax.plot(angles, data + data[:1], linewidth=1, linestyle='solid', label='Llama-2-70B', color='b')\n\n# Fill the area under the line\nax.fill(angles, data + data[:1], alpha=0.25, color='b')\n\n# Set the category labels\nax.set_xticks(angles[:-1])\nax.set_xticklabels(categories)\n\n# Add a title\nax.set_title('Categorical Data Visualization', size=14, color='darkred', y=1.1)\n\n# Customize the grid lines\nax.grid(True, color='gray', linestyle='--', linewidth=0.5)\n\n# Add a legend\nax.legend(loc='upper right', bbox_to_anchor=(1.3, 1.1))\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_14.pdf", "response": "```python\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Define the categories and their order\ncategories = ['Reasoning', 'Writing', 'Coding', 'Math', 'Humanities', 'STEM', 'Extraction']\nN = len(categories)\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(6.0, 6.0), subplot_kw=dict(polar=True))\n\n# Define the data for each category\ndata = [\n    [1, 2, 3, 4, 5, 6, 7],  # Reasoning\n    [2, 3, 4, 5, 6, 7, 8],  # Writing\n    [3, 4, 5, 6, 7, 8, 9],  # Coding\n    [4, 5, 6, 7, 8, 9, 10], # Math\n    [5, 6, 7, 8, 9, 10, 11],# Humanities\n    [6, 7, 8, 9, 10, 11, 12],# STEM\n    [7, 8, 9, 10, 11, 12, 13] # Extraction\n]\n\n# Define the color map for the lines\ncolors = ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd', '#8c564b', '#e377c2']\n\n# Plot the data\nfor i, (values, color) in enumerate(zip(data, colors)):\n    values += values[:1]  # Close the loop\n    ax.plot(np.arange(N + 1), values, linewidth=2, linestyle='-', marker='o', markersize=8, color=color, label=categories[i])\n\n# Set the title of the plot\nax.set_title('Roleplay', size=16, weight='bold', color='#333333', y=1.1)\n\n# Customize the grid\nax.yaxis.grid(True, color='#d3d3d3', linestyle='--', linewidth=0.5)\n\n# Add a legend\nax.legend(loc='upper right', bbox_to_anchor=(1.1, 1.1), fontsize=10)\n\n# Remove the default ticks\nax.set_xticks([])\nax.set_yticks([])\n\n# Display the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define data for the radar chart\ncategories = ['Nutrition', 'Purity', 'Allergen', 'Pollution', 'Compliance', 'Storage', 'Material']\nN = len(categories)\n\n# Data for MUJI and Nestle\nmuji_values = [0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2]\nnestle_values = [0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8]\n\n# Normalize values to be between 0 and 1\nmax_value = max(max(muji_values), max(nestle_values))\nmuji_values = [x / max_value for x in muji_values]\nnestle_values = [x / max_value for x in nestle_values]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(8.0, 8.0), subplot_kw=dict(polar=True))\n\n# Plot MUJI data\nax.plot(np.arange(N) + np.pi/7, muji_values, color='red', linestyle='-', linewidth=2, marker='o', markersize=8, label='MUJI')\n\n# Plot Nestle data\nax.plot(np.arange(N) + np.pi/7, nestle_values, color='green', linestyle='--', linewidth=2, marker='s', markersize=8, label='Nestle')\n\n# Fill the area under the lines\nax.fill(np.arange(N) + np.pi/7, muji_values, color='red', alpha=0.2)\nax.fill(np.arange(N) + np.pi/7, nestle_values, color='green', alpha=0.2)\n\n# Set the title of the chart\nax.set_title('MUJI vs Nestle in Food Safety', fontsize=14, fontweight='bold', pad=20)\n\n# Customize the grid\nax.grid(True, linestyle='--', linewidth=0.5, color='gray', alpha=0.7)\n\n# Add a legend\nax.legend(loc='upper right', bbox_to_anchor=(1.1, 1.1), fontsize=10)\n\n# Set category labels\nax.set_xticks(np.arange(N) + np.pi/7)\nax.set_xticklabels(categories, fontsize=10, rotation=45)\n\n# Display the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_16.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data for the radar chart\ncategories = ['Apple', 'Samsung', 'Huawei']\nvalues = [85.8, 86.4, 80.9]\n\n# Number of variables and their order\nN = len(categories)\n\n# Initialize the plot\nfig, ax = plt.subplots(figsize=(8.0, 7.0), subplot_kw=dict(polar=True))\n\n# Convert category labels into position angles\nangles = np.linspace(0, 2 * np.pi, N, endpoint=False).tolist()\nangles += angles[:1]  # Repeat the first angle to close the polygon\n\n# Plot the data\nax.plot(angles, values + values[:1], linewidth=1, linestyle='solid', label='Radar Chart', color='blue')\nax.fill(angles, values + values[:1], alpha=0.25, color='blue')\n\n# Draw one axe per variable and add labels\nplt.xticks(angles[:-1], categories, color='black', size=10)\nplt.yticks(np.arange(0, 90, 10), color=\"grey\", size=7)\nplt.ylim(0, 90)\n\n# Add a title\nplt.title(\"Mobile Phone Market Share\", size=14, color=\"darkred\", y=1.1)\n\n# Add a legend\nplt.legend(loc='upper right', bbox_to_anchor=(1.3, 1.1))\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_17.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define data for three different scenarios\ndata = [\n    [1, 2, 3, 4, 5],  # Extrusion\n    [1, 2, 3, 4, 5],  # Injection Molding\n    [1, 2, 3, 4, 5]   # Blow Molding\n]\n\n# Create a new figure with a larger size for better visibility\nfig, axes = plt.subplots(1, 3, figsize=(10.0, 8.0), subplot_kw={'aspect': 'equal'})\n\n# Define colors and labels for each scenario\ncolors = ['#FF9999', '#66B3FF', '#99FF99']\nlabels = ['Extrusion', 'Injection Molding', 'Blow Molding']\n\n# Plot each scenario\nfor ax, data, color, label in zip(axes, data, colors, labels):\n    ax.pie(data, radius=1.5, colors=[color], startangle=90, counterclock=False, wedgeprops=dict(width=0.4))\n    ax.set_title(label, fontsize=14, fontweight='bold')\n    ax.axis('off')  # Turn off axis for cleaner look\n\n# Add a central circle to create a radar effect\ncircle = plt.Circle((0, 0), 0.7, color='white')\nfor ax in axes:\n    ax.add_artist(circle)\n\n# Add a legend outside the plot\nfig.legend(labels, loc='upper right', bbox_to_anchor=(1.1, 0.8), fontsize=12)\n\n# Adjust layout for better spacing\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_18.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define data for the radar chart\ncategories = ['Food Quality', 'Shows', 'Staff', 'Cleanliness', 'Wait Times', 'Parking', 'Ticket Price', 'Souvenirs', 'Thrive Rides', 'Family Rides']\nN = len(categories)\n\n# Data for Disney and Universal Studios\ndisney_scores = [0.8, 0.9, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1, 0.0]\nuniversal_scores = [0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 0.1, 0.0]\n\n# Normalize scores to be between 0 and 1\nmax_score = max(max(disney_scores), max(universal_scores))\ndisney_scores = [score / max_score for score in disney_scores]\nuniversal_scores = [score / max_score for score in universal_scores]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(8.0, 8.0), subplot_kw=dict(polar=True))\n\n# Plot the radar chart for Disney\nax.plot(np.append(disney_scores, disney_scores[0]), np.append(categories, categories[0]), label='Disney', color='orange', linewidth=2)\nax.fill(np.append(disney_scores, disney_scores[0]), np.append(categories, categories[0]), alpha=0.2, color='orange')\n\n# Plot the radar chart for Universal Studios\nax.plot(np.append(universal_scores, universal_scores[0]), np.append(categories, categories[0]), label='Universal Studios', color='purple', linewidth=2)\nax.fill(np.append(universal_scores, universal_scores[0]), np.append(categories, categories[0]), alpha=0.2, color='purple')\n\n# Customize the plot\nax.set_title('Amusement Park Comparison: Disney vs Universal Studios', size=16, color='darkblue', y=1.1)\nax.set_yticks(np.arange(N))\nax.set_yticklabels(categories)\nax.grid(True, linestyle='--', linewidth=0.5, color='gray')\nax.spines['polar'].set_visible(False)\n\n# Add a legend\nax.legend(loc='upper right', bbox_to_anchor=(1.1, 1.1), fontsize=10)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_19.pdf", "response": "```python\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Define the data for the radar chart\ncategories = ['Creativity', 'Versatility', 'Longevity', 'Sillage', 'Projection', 'Value', 'Popularity', 'Packaging']\nvalues = [1, 3, 5, 7, 9, 11, 13, 15]\nnum_vars = len(categories)\n\n# Normalize the values to fit within the unit circle\nangles = np.linspace(0, 2 * np.pi, num_vars, endpoint=False).tolist()\nangles += angles[:1]  # Repeat the first value to close the loop\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(6.0, 6.0), subplot_kw=dict(polar=True))\n\n# Plot the data\nax.plot(angles, values + values[:1], linewidth=2, linestyle='solid', label='Chanel')\nax.fill(angles, values + values[:1], 'y', alpha=0.1)\n\n# Customize the plot\nax.set_title(\"Radar Chart of Chanel's Attributes\", size=14, color=\"darkred\", y=1.1)\nax.set_xticks(angles[:-1])\nax.set_xticklabels(categories, fontsize=10, color=\"darkblue\")\nax.yaxis.grid(True, color='gray', linestyle='--', linewidth=0.5)\n\n# Add a legend\nax.legend(loc='upper right', bbox_to_anchor=(1.1, 1.1), fontsize=10)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_2.pdf", "response": "```python\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Define the data for the radar chart\ncategories = ['A', 'B', 'C', 'D', 'E', 'F']\nvalues = [50, 60, 70, 80, 90, 100]\n\n# Number of variables and their order\nN = len(categories)\n\n# Initialize the figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 7.0), subplot_kw=dict(polar=True))\n\n# Compute the angle for each category\nangles = np.linspace(0, 2 * np.pi, N, endpoint=False).tolist()\nangles += angles[:1]  # Repeat the first angle to close the polygon\n\n# Plot the data\nax.plot(angles, values + values[:1], linewidth=2, linestyle='solid', label='Data', color='darkorange')\nax.fill(angles, values + values[:1], alpha=0.25, color='darkorange')\n\n# Draw one axe per variable and add labels\nplt.xticks(angles[:-1], categories, color='grey', size=12)\nplt.yticks(np.arange(0, 101, 10), color=\"grey\", size=10)\n\n# Add a title\nplt.title(\"Radar Chart Example\", size=14, color=\"darkred\", y=1.1)\n\n# Add a legend\nplt.legend(loc='upper right', bbox_to_anchor=(1.3, 1.1))\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_20.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define data for three different brands\nbrands = ['Chanel', 'Dior', 'Gucci']\nmetrics = ['Versatility', 'Longevity', 'Sillage', 'Value', 'Projection', 'Popularity']\n\n# Create sample data for each brand\ndata = {\n    'Chanel': [5, 7, 9, 3, 1, 2],\n    'Dior': [4, 6, 8, 2, 1, 1],\n    'Gucci': [6, 8, 7, 4, 2, 3]\n}\n\n# Create a new figure with a larger size for better visibility\nfig, axes = plt.subplots(1, 3, figsize=(18.0, 6.0), subplot_kw={'aspect': 'equal'})\n\n# Define colors for the radar charts\ncolors = ['#1f77b4', '#ff7f0e', '#2ca02c']\n\n# Function to plot a radar chart\ndef plot_radar_chart(ax, brand, data, color):\n    N = len(metrics)\n    angles = np.linspace(0, 2 * np.pi, N, endpoint=False).tolist()\n    angles += angles[:1]  # Closing the loop\n\n    values = data[brand]\n    values += values[:1]  # Closing the loop\n\n    ax.fill(angles, values, color=color, alpha=0.25)\n    ax.plot(angles, values, linewidth=2, linestyle='solid', color=color)\n    ax.set_title(brand, size=12, color=color, pad=20)\n\n    # Draw one axe per variable and add labels\n    plt.xticks(angles[:-1], metrics, color='grey', size=10)\n    ax.tick_params(axis='y', labelsize=10)\n\n# Plot each brand's radar chart\nfor ax, brand, color in zip(axes, brands, colors):\n    plot_radar_chart(ax, brand, data, color)\n\n# Add a legend\nplt.legend(axes, brands, loc='upper right', bbox_to_anchor=(1.1, 1.1))\n\n# Adjust layout for better spacing\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data for the radar chart\ncategories = ['Loading PC1', 'Loading PC2']\nvalues = [0.6, 0.4]\ncolors = ['#1f77b4', '#ff7f0e']\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(8.0, 8.0), subplot_kw=dict(polar=True))\n\n# Calculate the number of categories and create an array of angles\nN = len(categories)\nangles = np.linspace(0, 2 * np.pi, N, endpoint=False).tolist()\nangles += angles[:1]  # Repeat the first angle to close the polygon\n\n# Plot the data\nax.plot(angles, values + values[:1], linewidth=2, linestyle='solid', label='Data', color=colors[0])\nax.fill(angles, values + values[:1], alpha=0.25, color=colors[0])\n\n# Add a second dataset for comparison\nvalues2 = [0.8, 0.2]\nax.plot(angles, values2 + values2[:1], linewidth=2, linestyle='dashed', label='Comparison', color=colors[1])\nax.fill(angles, values2 + values2[:1], alpha=0.25, color=colors[1])\n\n# Customize the plot\nax.set_title(\"Radar Chart Example\", size=16, color=\"#333333\", y=1.1)\nax.set_xticks(angles[:-1])\nax.set_xticklabels(categories)\n\n# Add a legend\nax.legend(loc='upper right', bbox_to_anchor=(1.1, 1.1))\n\n# Add grid lines\nax.yaxis.grid(True, color='#dcdcdc', linestyle='--', linewidth=0.5)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define data for three different scenarios\ndata = [\n    (np.array([1, 2, 3, 4, 5]), np.array([1, 2, 3, 4, 5])),\n    (np.array([1, 2, 3, 4, 5]), np.array([1, 2, 3, 4, 5])),\n    (np.array([1, 2, 3, 4, 5]), np.array([1, 2, 3, 4, 5]))\n]\n\n# Create a new figure with a larger size for better visibility\nfig, axes = plt.subplots(1, 3, figsize=(10.0, 6.0), subplot_kw={'projection': 'polar'})\n\n# Define a color map for the scatter plot\ncmap = plt.cm.get_cmap('viridis', len(data))\n\n# Plot each dataset on a separate subplot\nfor ax, (x, y) in zip(axes, data):\n    ax.scatter(x, y, c=np.arange(len(x)), cmap=cmap, s=100, alpha=0.7)\n    ax.set_title(\"Fidelity(D-test)\", fontsize=12, ha='center', va='center')\n    ax.set_rticks([1, 2, 3, 4, 5])\n    ax.set_rlabel_position(0)\n    ax.grid(True)\n\n# Add a legend to explain the color coding\nfig.legend(['MLA', 'Query Error'], loc='upper right', bbox_to_anchor=(1.1, 1.1))\n\n# Adjust layout for better spacing\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_5.pdf", "response": "```python\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Define the data for the radar chart\ncategories = ['Heterocycle formation', 'C-C bond formation', 'Acylation and related processes', \n              'Hetroalkylation and arylation', 'Functional group addition, FGA']\nN = len(categories)\n\n# Data for each category\nvalues = [35, 40, 25, 30, 45]\n\n# Normalize the values to fit within the unit circle\nmax_value = max(values)\nnormalized_values = [v / max_value for v in values]\n\n# Add the first value at the end to close the radar chart\nnormalized_values += normalized_values[:1]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(8.0, 8.0), subplot_kw=dict(polar=True))\n\n# Draw the radar chart\nax.plot(normalized_values, linestyle='-', linewidth=2, color='blue', marker='o', markersize=8, label='Baseline')\nax.fill(normalized_values, alpha=0.2, color='blue')\n\n# Set the categories as tick labels\nax.set_xticks(np.linspace(0, 2 * np.pi, N, endpoint=False))\nax.set_xticklabels(categories, fontsize=10, fontweight='bold')\n\n# Customize the grid lines\nax.grid(True, linestyle='--', linewidth=0.5, color='gray', alpha=0.7)\n\n# Add a legend\nax.legend(loc='upper right', bbox_to_anchor=(1.1, 1.1), fontsize=10)\n\n# Add a title\nax.set_title('Radar Chart Example', fontsize=14, fontweight='bold', pad=20)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data for the radar chart\ncategories = ['Model A', 'Model B', 'Model C', 'Model D', 'Model E', 'Model F']\nN = len(categories)\n\n# Data for the radar chart\nvalues = [\n    [0.07, 0.03, 0.05, 0.07, 0.03, 0.07],\n    [0.03, 0.07, 0.05, 0.03, 0.07, 0.03],\n    [0.05, 0.03, 0.07, 0.03, 0.07, 0.03],\n    [0.07, 0.03, 0.05, 0.07, 0.03, 0.07],\n    [0.03, 0.07, 0.05, 0.03, 0.07, 0.03],\n    [0.05, 0.03, 0.07, 0.03, 0.07, 0.03]\n]\n\n# Normalize the data\nmax_value = max(max(row) for row in values)\nnormalized_values = [[v / max_value for v in row] for row in values]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(6.0, 6.0), subplot_kw=dict(polar=True))\n\n# Plot the data\nfor i, (model, value) in enumerate(zip(categories, normalized_values)):\n    ax.plot([j + 1 for j in range(N)] + [1], value + [value[0]], label=model, linewidth=2, linestyle='-', marker='o')\n\n# Add a grid\nax.yaxis.grid(True, color='gray', linestyle='--', linewidth=0.5)\n\n# Set the title and labels\nax.set_title('Radar Chart of Model Performance', fontsize=14, y=1.1)\nax.set_yticks(np.arange(0.0, 1.1, 0.1))\nax.set_yticklabels(['0.0', '0.1', '0.2', '0.3', '0.4', '0.5', '0.6', '0.7', '0.8', '0.9', '1.0'])\n\n# Add a legend\nax.legend(loc='upper right', bbox_to_anchor=(1.1, 1.1), fontsize=10)\n\n# Add annotations\nfor i, (model, value) in enumerate(zip(categories, normalized_values)):\n    ax.annotate(model, xy=(i + 1, value[i]), xytext=(i + 1, value[i] + 0.01),\n                arrowprops=dict(facecolor='black', shrink=0.05), fontsize=10)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_7.pdf", "response": "```python\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Define data for the radar chart\ncategories = ['Area', 'Pie', 'Funnel', 'Radar', 'Bubble', 'Rose', 'Candlestick', 'Heatmap', 'Treemap', 'Box']\nN = len(categories)\nvalues = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]\n\n# Initialize the plot\nfig, ax = plt.subplots(figsize=(8.0, 8.0), subplot_kw=dict(polar=True))\n\n# Plot the radar chart\nax.plot(np.append(values, values[0]), np.append(categories, categories[0]), linewidth=2, linestyle='-', color='darkred', label='QWen-VL')\nax.fill(np.append(values, values[0]), np.append(categories, categories[0]), alpha=0.2, color='darkred')\n\n# Add grid lines\nax.set_rgrids(range(1, 11), labels=[str(i) for i in range(1, 11)], color='gray', linestyle='--', linewidth=0.5)\n\n# Set title and labels\nax.set_title(\"3D-bar\", y=1.1, fontsize=16, fontweight='bold')\nax.set_yticklabels(categories, fontsize=10)\n\n# Add legend\nax.legend(loc='upper right', bbox_to_anchor=(1.1, 1.1), fontsize=10)\n\n# Customize the radar chart\nax.spines['polar'].set_visible(False)\nax.set_theta_offset(np.pi / 2)\nax.set_theta_direction(-1)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_8.pdf", "response": "```python\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Define the data for the radar chart\ncategories = ['Anomaly Detection', 'Short-horizon Forecasting', 'Long-horizon Forecasting']\nvalues = [\n    [0.8, 0.6, 0.7],\n    [0.5, 0.9, 0.4],\n    [0.3, 0.7, 0.8]\n]\n\n# Number of variables and categories\nN = len(categories)\n\n# Convert data into a format suitable for plotting\nangles = np.linspace(0, 2 * np.pi, N, endpoint=False).tolist()\nangles += angles[:1]  # Repeat the first angle to close the polygon\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(5.0, 5.0), subplot_kw=dict(polar=True))\n\n# Plot each category with different colors and line styles\nfor i, (category, value) in enumerate(zip(categories, values)):\n    ax.plot(angles, [v + 0.1 * i for v in value] + [value[0]], linewidth=2, linestyle='-', label=category)\n    ax.fill(angles, [v + 0.1 * i for v in value] + [value[0]], alpha=0.25)\n\n# Set the title and labels\nax.set_title(\"Imputation\", size=16, color=\"darkred\", y=1.1)\nax.set_xticks(angles[:-1])\nax.set_xticklabels(categories)\n\n# Add a legend\nax.legend(loc='upper right', bbox_to_anchor=(1.1, 1.1))\n\n# Customize the grid lines\nax.grid(True, color='grey', linestyle='--', linewidth=0.5)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data for the radar chart\ncategories = ['POPE', 'MM-Vet', 'TextVQA', 'GQA']\nvalues = [72.9, 56.9, 65.0, 49.3]\ncolors = ['#FF5733', '#33FF57', '#3357FF', '#F333FF']\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(8.0, 7.0), subplot_kw=dict(polar=True))\n\n# Calculate the number of categories and create an array of angles\nN = len(categories)\nangles = np.linspace(0, 2 * np.pi, N, endpoint=False).tolist()\nangles += angles[:1]  # Repeat the first angle to close the polygon\n\n# Plot the data\nax.plot(angles, values + values[:1], linewidth=1, linestyle='solid', label='TinyLLaVA-3.1B', color=colors[0])\nax.fill(angles, values + values[:1], alpha=0.25, color=colors[0])\n\n# Set the category labels\nax.set_xticks(angles[:-1])\nax.set_xticklabels(categories)\n\n# Add a title\nax.set_title('Radar Chart Example', size=16, color='#333333', y=1.1)\n\n# Customize the grid lines\nax.yaxis.grid(True, color='#D3D3D3', linestyle='-', linewidth=0.5)\n\n# Add a legend\nax.legend(loc='upper right', bbox_to_anchor=(1.1, 1.1))\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ncategories = ['Model-Basedness', 'Meta-Cognition', 'Exploration', 'Risk Taking', 'Bayesian Reasoning', 'Simple Bandits']\nx_values = [0.5, 1.5, 2.5, 3.5, 4.5, 5.5]\ny_values = [\n    [0.8, 1.2, 1.5, 0.9, 1.1],\n    [0.6, 0.7, 1.0, 0.8, 0.9],\n    [0.4, 0.5, 0.6, 0.7, 0.8],\n    [0.3, 0.4, 0.5, 0.6, 0.7],\n    [0.2, 0.3, 0.4, 0.5, 0.6],\n    [0.1, 0.2, 0.3, 0.4, 0.5]\n]\n\n# Create a new figure with a larger size for better visibility\nfig, axes = plt.subplots(nrows=1, ncols=6, figsize=(12.0, 4.0), sharey=True)\n\n# Plot each category with different styles\nfor ax, category, x, y in zip(axes, categories, x_values, y_values):\n    ax.scatter(x, y, color='blue', marker='o', s=100, alpha=0.7)\n    ax.set_title(category)\n    ax.set_xlabel('Value')\n    ax.set_ylabel('Score')\n\n# Add a global title\nplt.suptitle('Comparison of Different Models', fontsize=16, fontweight='bold')\n\n# Adjust layout for better spacing\nplt.tight_layout(rect=[0, 0.03, 1, 0.95])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data for plotting\nx = np.array([100, 200, 300, 400, 500, 600, 700, 800, 900, 1000])\ny = np.array([77, 79, 81, 83, 85, 87, 89, 91, 93, 95])\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Plot the data with enhanced aesthetics\nax.plot(x, y, color='darkgreen', linestyle='-', linewidth=2, marker='o', markersize=8, label='Linear Trend')\n\n# Add grid lines for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Set labels with improved font size and style\nax.set_xlabel('Pre-training GPU Hours', fontsize=12, fontweight='bold')\nax.set_ylabel('Accuracy [%]', fontsize=12, fontweight='bold')\n\n# Set title with enhanced font size and style\nax.set_title('ImageNet-1K Linear Probing', fontsize=14, fontweight='bold')\n\n# Add a legend with a shadow effect\nax.legend(loc='upper left', fontsize=10, shadow=True)\n\n# Customize ticks for better readability\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Inference time (in seconds) and Average score for different models\ninference_times = np.array([10, 20, 30, 40, 50, 60])\naverage_scores = np.array([0.75, 0.80, 0.70, 0.85, 0.90, 0.65])\n\n# Define colors for each model\ncolors = ['#FF6F61', '#88B04B', '#F7CAC9', '#AED6F1', '#FFD966', '#FF9F40']\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data with enhanced aesthetics\nscatter = ax.scatter(inference_times, average_scores, c=colors, s=100, edgecolor='w', alpha=0.7)\n\n# Add labels and title\nax.set_xlabel('Inference Time (seconds)', fontsize=12)\nax.set_ylabel('Average Score', fontsize=12)\nax.set_title('Bubble Size: Number of Anomalies Detected', fontsize=14, fontweight='bold')\n\n# Add grid lines for better readability\nax.grid(True, linestyle='--', alpha=0.5)\n\n# Add annotations for each point\nfor i, txt in enumerate(['AR', 'LSTM-\u03b1', 'LSTM-\u03b2', 'AE', 'FITS', 'Donut']):\n    ax.annotate(txt, (inference_times[i], average_scores[i]), textcoords=\"offset points\", xytext=(0,10), ha='center', fontsize=10)\n\n# Customize the legend\nlegend_labels = ['AR', 'LSTM-\u03b1', 'LSTM-\u03b2', 'AE', 'FITS', 'Donut']\nlegend_handles = [plt.Line2D([0], [0], marker='o', color='w', markerfacecolor=color, markersize=10) for color in colors]\nax.legend(legend_handles, legend_labels, title='Models', loc='upper left', fontsize=10)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data for demonstration\nx = np.array([20, 25, 30, 35, 40, 45, 50])\ny = np.array([45, 40, 35, 30, 25, 20, 15])\ncolors = np.array(['blue', 'green', 'red', 'purple', 'orange', 'cyan', 'magenta'])\nsizes = np.array([200, 400, 100, 150, 400, 200, 400])\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the scatter plot with enhanced aesthetics\nscatter = ax.scatter(x, y, s=sizes, c=colors, alpha=0.7, edgecolor='black', linewidth=1.5)\n\n# Add a legend with a title\nlegend_labels = ['MC-ViT-B', 'Bard + ImageViT', 'ShortViT', 'LongViT', 'SeVILA']\nax.legend(scatter.legend_elements(), legend_labels, title=\"EgoSchema VQA accuracy\", loc=\"upper left\")\n\n# Set labels and title with improved font sizes\nax.set_xlabel('EgoSchema VQA accuracy', fontsize=12)\nax.set_ylabel('Perception Test VQA accuracy', fontsize=12)\nax.set_title('Number of parameters', fontsize=14, fontweight='bold')\n\n# Add grid lines for better readability\nax.grid(True, linestyle='--', alpha=0.6)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Test case index and average relative error\ntest_case_index = np.array([1.0, 2.0, 3.0, 4.0, 5.0])\naverage_relative_error = np.array([0.01, 0.02, 0.03, 0.04, 0.05])\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data with enhanced aesthetics\nax.plot(test_case_index, average_relative_error, \n        marker='o', linestyle='-', color='navy', linewidth=2, markersize=8, \n        label='Average Relative Error')\n\n# Set labels with improved font size and style\nax.set_xlabel('Test Case Index', fontsize=12, fontweight='bold')\nax.set_ylabel('Average Relative Error, u', fontsize=12, fontweight='bold')\n\n# Add a title with enhanced font size and style\nax.set_title('Average Relative Error, u', fontsize=14, fontweight='bold')\n\n# Customize grid lines\nax.grid(True, which='both', linestyle='--', linewidth=0.5, alpha=0.7)\n\n# Add a legend with a shadow effect\nax.legend(loc='upper right', fontsize=10, shadow=True)\n\n# Enhance the tick parameters\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Accuracies for different classes in a classification task\nclasses = ['Spotlight', 'Sliding', 'Wool', 'Weasel', 'Space', 'Partridge', 'Mushroom', 'Bighorn']\naccuracies_majority = [0.95, 0.88, 0.75, 0.65, 0.55, 0.45, 0.35, 0.25]\naccuracies_minority = [0.90, 0.85, 0.70, 0.60, 0.50, 0.40, 0.30, 0.20]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(6.0, 3.0))\n\n# Plot the data with enhanced aesthetics\nax.plot(classes, accuracies_majority, marker='o', linestyle='-', color='b', label='Majority')\nax.plot(classes, accuracies_minority, marker='s', linestyle='--', color='r', label='Minority')\n\n# Set labels and title with improved font sizes\nax.set_xlabel('Classes', fontsize=12)\nax.set_ylabel('Accuracies', fontsize=12)\nax.set_title('Accuracies for the ImageNet Classes (ClarifAI)', fontsize=14)\n\n# Add grid lines for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Customize ticks\nax.set_xticks(range(len(classes)))\nax.set_xticklabels(classes, rotation=45, ha='right', fontsize=10)\nax.set_yticks(np.arange(0, 1.1, 0.1))\n\n# Add a legend with a shadow effect\nax.legend(loc='upper left', fontsize=10, shadow=True)\n\n# Annotate the points for clarity\nfor i, acc in enumerate(accuracies_majority):\n    ax.annotate(f'{acc:.2f}', (i, acc), textcoords=\"offset points\", xytext=(0,10), ha='center', fontsize=9)\nfor i, acc in enumerate(accuracies_minority):\n    ax.annotate(f'{acc:.2f}', (i, acc), textcoords=\"offset points\", xytext=(0,10), ha='center', fontsize=9)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data for two different scenarios\nx1 = np.array([5, 10, 20, 30, 40])\ny1 = np.array([68, 67, 66, 65, 64])\n\nx2 = np.array([0.1, 0.2, 0.5, 1.0, 1.5, 2.0, 2.5, 3.0, 3.5, 4.0])\ny2 = np.array([68, 67, 66, 65, 64, 63, 62, 61, 60, 59])\n\n# Create a new figure with a larger size for better visibility\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10.0, 4.0), sharey=True)\n\n# Plot the first dataset\nscatter1 = ax1.scatter(x1, y1, c='red', marker='o', s=100, edgecolor='black', label='Scenario 1')\nax1.set_title('Logic Grid Puzzle(Accuracy versus token cost)')\nax1.set_xlabel('Token cost($)')\nax1.set_ylabel('Accuracy(%)')\nax1.grid(True, linestyle='--', alpha=0.7)\nax1.legend()\n\n# Plot the second dataset\nscatter2 = ax2.scatter(x2, y2, c='blue', marker='s', s=100, edgecolor='black', label='Scenario 2')\nax2.set_title('Logic Grid Puzzle(Accuracy versus TFLOPS)')\nax2.set_xlabel('TFLOPS')\nax2.set_ylabel('Accuracy(%)')\nax2.grid(True, linestyle='--', alpha=0.7)\nax2.legend()\n\n# Add a color bar to differentiate between the two datasets\ncbar = fig.colorbar(scatter1, ax=[ax1, ax2], orientation='vertical', fraction=0.046, pad=0.04)\ncbar.set_label('Dataset')\n\n# Adjust layout for better spacing\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_16.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Carbon reduction vs. Efficiency\nefficiency = np.array([15, 20, 25, 30, 35, 40, 45, 50])\ncarbon_reduction = np.array([5, 10, 15, 20, 25, 30, 35, 40])\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(8.0, 4.0))\n\n# Plot the data with enhanced styling\nax.plot(efficiency, carbon_reduction, marker='o', linestyle='-', color='navy', linewidth=2, markersize=8, label='Carbon Reduction')\n\n# Set labels with improved font size and style\nax.set_xlabel('Efficiency (%)', fontsize=12, fontweight='bold')\nax.set_ylabel('Carbon Reduction (%)', fontsize=12, fontweight='bold')\n\n# Add a title with enhanced font size and style\nax.set_title('Impact of Efficiency on Carbon Reduction', fontsize=14, fontweight='bold')\n\n# Customize the grid\nax.grid(True, which='both', linestyle='--', linewidth=0.5, alpha=0.7)\n\n# Add a legend with improved location and font size\nax.legend(loc='upper left', fontsize=10)\n\n# Enhance the ticks for better readability\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_17.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create sample data\nx = np.array([-30, -25, -20, -15, -10, -5, 0, 5, 10, 15, 20, 25, 30])\ny = np.array([15, 18, 12, 10, 8, 6, 4, 2, 0, -2, -4, -6, -8])\n\n# Create a new figure with a larger size for better visibility\nplt.figure(figsize=(9.0, 6.0))\n\n# Plot the data with enhanced aesthetics\nscatter = plt.scatter(x, y, c=y, cmap='viridis', s=100, alpha=0.7, edgecolor='w', linewidth=1.5)\n\n# Add a color bar to indicate the scale of the data\ncbar = plt.colorbar(scatter)\ncbar.set_label('\u0394 Robust Accuracy (%)')\n\n# Set labels and title with improved font sizes\nplt.xlabel('\u0394 RNFR (%)', fontsize=12)\nplt.ylabel('\u0394 Robust Accuracy (%)', fontsize=12)\nplt.title('Scatter Plot of \u0394 RNFR vs \u0394 Robust Accuracy', fontsize=14)\n\n# Add grid lines for better readability\nplt.grid(True, linestyle='--', alpha=0.5)\n\n# Customize the x and y axis limits\nplt.xlim(-35, 35)\nplt.ylim(-15, 20)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_18.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create sample data\nx = np.array([2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\ny1 = np.array([85, 90, 95, 100, 105, 110, 115, 120, 125, 130, 135, 140, 145, 150, 155])\ny2 = np.array([80, 85, 90, 95, 100, 105, 110, 115, 120, 125, 130, 135, 140, 145, 150])\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Plot the data with different markers and line styles\nax.plot(x, y1, marker='o', linestyle='-', color='b', label='Day 1')\nax.plot(x, y2, marker='s', linestyle='--', color='r', label='Day 2')\n\n# Set labels and title\nax.set_xlabel('Time (hours)', fontsize=12)\nax.set_ylabel('Temperature (\u00b0C)', fontsize=12)\nax.set_title('Temperature Variation Over Time', fontsize=14)\n\n# Add grid for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Customize ticks\nax.set_xticks(np.arange(2, 17, 1))\nax.set_yticks(np.arange(80, 160, 5))\n\n# Add a legend\nax.legend(loc='upper left', fontsize=10)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_19.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create sample data\nx = np.array([2, 4, 6, 8, 10, 12, 14, 16])\ny = np.array([95, 90, 85, 80, 75, 70, 65, 60])\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Plot the data with enhanced aesthetics\nscatter = ax.scatter(x, y, c=y, cmap='viridis', s=100, edgecolor='k', alpha=0.7)\n\n# Add a color bar to indicate the scale of the data\ncbar = plt.colorbar(scatter)\ncbar.set_label('Y-axis')\n\n# Set labels and title with improved font sizes\nax.set_xlabel('X-axis', fontsize=12)\nax.set_ylabel('Y-axis', fontsize=12)\nax.set_title('Scatter Plot with Color Coding', fontsize=14)\n\n# Add grid lines for better readability\nax.grid(True, linestyle='--', alpha=0.5)\n\n# Customize ticks for better readability\nax.set_xticks(np.arange(2, 18, 2))\nax.set_yticks(np.arange(60, 110, 5))\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Installed capacity (in GW) and corresponding energy output (in TWh)\ncapacity = np.array([175, 200, 225, 250, 275, 300])\noutput = np.array([140, 160, 180, 200, 220, 240])\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(4.0, 8.0))\n\n# Plot the data with enhanced aesthetics\nax.plot(capacity, output, marker='o', linestyle='-', color='navy', linewidth=2, markersize=8, label='Energy Output (TWh)')\n\n# Set labels with improved font size and style\nax.set_xlabel('Installed Capacity (GW)', fontsize=12, fontweight='bold')\nax.set_ylabel('Energy Output (TWh)', fontsize=12, fontweight='bold')\n\n# Add a title with enhanced font size and style\nax.set_title('Energy Production Trends', fontsize=14, fontweight='bold', pad=20)\n\n# Add grid lines for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5, alpha=0.7)\n\n# Customize ticks for better readability\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Add a legend with a shadow effect\nax.legend(loc='upper left', fontsize=10, shadow=True)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_20.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create sample data\nx = np.array([10, 20, 30, 40, 50, 60, 70, 80, 90])\ny = np.array([20, 30, 40, 50, 60, 70, 80, 90, 100])\n\n# Define colors for each point\ncolors = np.array(['green', 'blue', 'green', 'purple', 'orange', 'purple', 'orange', 'gray', 'cyan'])\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the scatter plot with enhanced aesthetics\nscatter = ax.scatter(x, y, c=colors, s=100, edgecolor='black', alpha=0.7)\n\n# Add a color bar to indicate the color mapping\ncbar = plt.colorbar(scatter)\ncbar.set_label('Color Scale')\n\n# Set labels and title with improved font sizes\nax.set_xlabel('X Axis Label', fontsize=12)\nax.set_ylabel('Y Axis Label', fontsize=12)\nax.set_title('Scatter plot with colorbar', fontsize=14)\n\n# Customize grid lines\nax.grid(True, linestyle='--', alpha=0.5)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_21.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data for two different datasets\nx1 = np.array([2, 3, 4, 5, 6, 7, 8])\ny1 = np.array([0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8])\n\nx2 = np.array([2, 3, 4, 5, 6, 7, 8])\ny2 = np.array([0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3])\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Plot the first dataset with enhanced aesthetics\nax.scatter(x1, y1, color='teal', marker='o', s=100, edgecolor='black', label='LibriCSS WER')\nax.plot(x1, y1, color='teal', linestyle='--', linewidth=2)\n\n# Plot the second dataset with different aesthetics\nax.scatter(x2, y2, color='darkred', marker='^', s=100, edgecolor='black', label='AMI WER')\nax.plot(x2, y2, color='darkred', linestyle='-', linewidth=2)\n\n# Set labels and title with improved font sizes\nax.set_xlabel('Number of Microphones', fontsize=12)\nax.set_ylabel('WER (%)', fontsize=12)\nax.set_title('LibriCSS vs Additional Data 1\\nAMI vs Additional Data 2', fontsize=14, fontweight='bold')\n\n# Add grid for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Customize ticks\nax.set_xticks(np.arange(2, 9, 1))\nax.set_yticks(np.arange(0.2, 1.0, 0.1))\n\n# Add a legend with a shadow effect\nax.legend(loc='upper left', fontsize=10, shadow=True)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_22.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nmodels = ['llama-2-70-chat', 'llama-2-70', 'hfalcon-40b', 'claude-2', 'claude-1', \n          'text-bison@002', 'text-davinci-001', 'text-davinci-003', 'gpt-4']\nvalues = [0.85, 0.90, 0.88, 0.92, 0.87, 0.91, 0.89, 0.93, 0.86]\nexploration = [0.1, 0.15, 0.12, 0.18, 0.13, 0.17, 0.14, 0.19, 0.16]\nrisk_taking = [0.05, 0.07, 0.06, 0.08, 0.07, 0.09, 0.08, 0.10, 0.09]\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(12.0, 6.0))\n\n# Plot the data with enhanced aesthetics\nax.scatter(values, exploration, color='green', label='Exploration', marker='o', s=100)\nax.scatter(values, risk_taking, color='red', label='Risk Taking', marker='s', s=100)\n\n# Set labels and title with improved font sizes\nax.set_xlabel('Value', fontsize=14)\nax.set_ylabel('Performance', fontsize=14)\nax.set_title('Performance Comparison', fontsize=16, fontweight='bold')\n\n# Add grid lines for better readability\nax.grid(True, linestyle='--', alpha=0.7)\n\n# Add a legend with a shadow effect\nax.legend(loc='upper left', fontsize=12, shadow=True)\n\n# Annotate each point with the model name\nfor i, model in enumerate(models):\n    ax.annotate(model, (values[i], exploration[i]), textcoords=\"offset points\", xytext=(0,10), ha='center', fontsize=10)\n    ax.annotate(model, (values[i], risk_taking[i]), textcoords=\"offset points\", xytext=(0,-10), ha='center', fontsize=10)\n\n# Set x and y axis limits\nax.set_xlim(0.2, 1.0)\nax.set_ylim(0.2, 0.95)\n\n# Customize ticks\nax.set_xticks(np.arange(0.2, 1.1, 0.1))\nax.set_yticks(np.arange(0.2, 1.0, 0.1))\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_23.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data for plotting\nmodels = ['Model-Basedness', 'Meta-Cognition', 'Exploration', 'Risk-Taking']\ngpt4_scores = [1.25, 1.75, 1.5, 1.3]\nmptb_scores = [1.3, 1.6, 1.4, 1.2]\nlama27b_scores = [1.4, 1.7, 1.5, 1.3]\nfalcon40b_scores = [1.5, 1.8, 1.6, 1.4]\ndavinci003_scores = [1.6, 1.9, 1.7, 1.5]\ndavinci002_scores = [1.7, 2.0, 1.8, 1.6]\ndavinci001_scores = [1.8, 2.1, 1.9, 1.7]\n\n# Create a new figure with a larger size for better visibility\nfig, axes = plt.subplots(2, 2, figsize=(8.0, 8.0), sharex=True, sharey=True)\n\n# Plot the data on each subplot\naxes[0, 0].plot(gpt4_scores, label='GPT4', color='blue', marker='o')\naxes[0, 0].set_title('Model-Basedness')\naxes[0, 0].set_ylabel('Score')\naxes[0, 0].legend()\n\naxes[0, 1].plot(mptb_scores, label='MPTB', color='orange', marker='s')\naxes[0, 1].set_title('Meta-Cognition')\naxes[0, 1].legend()\n\naxes[1, 0].plot(lama27b_scores, label='Llama2-7B', color='green', marker='^')\naxes[1, 0].set_title('Exploration')\naxes[1, 0].set_xlabel('Models')\naxes[1, 0].set_ylabel('Score')\naxes[1, 0].legend()\n\naxes[1, 1].plot(falcon40b_scores, label='Falcon40B', color='red', marker='x')\naxes[1, 1].set_title('Risk-Taking')\naxes[1, 1].set_xlabel('Models')\naxes[1, 1].legend()\n\n# Add a global title and adjust layout\nplt.suptitle('Comparison of Models', fontsize=16, fontweight='bold')\nplt.tight_layout(rect=[0, 0.03, 1, 0.95])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_24.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data for three different scatter plots\nx1 = np.array([70, 80, 90])\ny1 = np.array([30, 40, 50])\n\nx2 = np.array([70, 75, 80, 85, 90])\ny2 = np.array([20, 25, 30, 35, 40])\n\nx3 = np.array([70, 75, 80, 85, 90])\ny3 = np.array([15, 17, 19, 21, 23])\n\n# Create a new figure with a larger size for better visibility\nfig, axes = plt.subplots(1, 3, figsize=(15.0, 5.0), sharey=True)\n\n# Plot the first scatter plot\naxes[0].scatter(x1, y1, color='purple', s=100, alpha=0.6, edgecolor='black')\naxes[0].set_title('Scatter Plot - deepskyblue')\naxes[0].set_xlabel('X Values')\naxes[0].set_ylabel('Y Values')\naxes[0].grid(True, linestyle='--', alpha=0.7)\n\n# Plot the second scatter plot\naxes[1].scatter(x2, y2, color='magenta', s=100, alpha=0.6, edgecolor='black')\naxes[1].set_title('Scatter Plot - magenta')\naxes[1].set_xlabel('X Values')\naxes[1].set_ylabel('Y Values')\naxes[1].grid(True, linestyle='--', alpha=0.7)\n\n# Plot the third scatter plot\naxes[2].scatter(x3, y3, color='limegreen', s=100, alpha=0.6, edgecolor='black')\naxes[2].set_title('Scatter Plot - limegreen')\naxes[2].set_xlabel('X Values')\naxes[2].set_ylabel('Y Values')\naxes[2].grid(True, linestyle='--', alpha=0.7)\n\n# Add a color bar to the last subplot\ncbar = fig.colorbar(axes[2].collections[0], ax=axes[2], orientation='vertical')\ncbar.set_label('Color scale for X')\n\n# Adjust layout for better spacing\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_25.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data for three different scenarios\nx = np.array([70, 72, 74, 76, 78, 80, 82, 84, 86, 88])\ny1 = np.array([30, 35, 40, 45, 50, 55, 60, 65, 70, 75])  # Average Precision on HumanArt (%)\ny2 = np.array([25, 30, 35, 40, 45, 50, 55, 60, 65, 70])  # Average Precision on MSCOCO (%)\ny3 = np.array([20, 25, 30, 35, 40, 45, 50, 55, 60, 65])  # Average Precision on HumanArt (%)\n\n# Create a new figure with a larger size for better visibility\nfig, axes = plt.subplots(1, 3, figsize=(15.0, 5.0), sharey=True)\n\n# Plot the first subplot\naxes[0].plot(x, y1, marker='o', linestyle='-', color='purple', label='ViTPose (sc)')\naxes[0].set_title('ViT Pose (sc) Performance')\naxes[0].set_xlabel('Average Precision on HumanArt (%)')\naxes[0].set_ylabel('Average Precision on MSCOCO (%)')\naxes[0].grid(True)\naxes[0].legend()\n\n# Plot the second subplot\naxes[1].plot(x, y2, marker='s', linestyle='--', color='orange', label='ViT Pose (ft)')\naxes[1].set_title('ViT Pose (ft) Performance')\naxes[1].set_xlabel('Average Precision on HumanArt (%)')\naxes[1].set_ylabel('Average Precision on MSCOCO (%)')\naxes[1].grid(True)\naxes[1].legend()\n\n# Plot the third subplot\naxes[2].plot(x, y3, marker='^', linestyle='-.', color='green', label='VLPose')\naxes[2].set_title('VLPose Performance')\naxes[2].set_xlabel('Average Precision on HumanArt (%)')\naxes[2].set_ylabel('Average Precision on MSCOCO (%)')\naxes[2].grid(True)\naxes[2].legend()\n\n# Adjust layout for better spacing between subplots\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data for demonstration\nx = np.array([1.2, 1.4, 1.6, 2.0, 2.5, 3.0, 3.5, 4.0, 4.5, 5.0, 5.5, 6.0])\ny = np.array([75, 55, 35, 85, 65, 95, 70, 40, 50, 60, 80, 90])\ncolors = np.array([0.1, 0.25, 0.1, 0.1, 0.25, 0.1, 0.25, 0.1, 0.25, 0.1, 0.25, 0.1])\nsizes = np.array([100, 150, 100, 200, 150, 250, 150, 100, 150, 100, 200, 250])\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Scatter plot with enhanced aesthetics\nscatter = ax.scatter(x, y, c=colors, s=sizes, alpha=0.7, edgecolor='w', cmap='viridis')\n\n# Add a color bar to indicate the scale of the data\ncbar = plt.colorbar(scatter)\ncbar.set_label('Color Scale')\n\n# Set labels and title with improved font sizes\nax.set_xlabel('Diversity (%)', fontsize=12)\nax.set_ylabel('Accuracy (%)', fontsize=12)\nax.set_title('TFLOPS', fontsize=14, fontweight='bold')\n\n# Add grid lines for better readability\nax.grid(True, linestyle='--', alpha=0.5)\n\n# Add annotations for each point\nfor i, txt in enumerate(['CoT', 'DefInt', 'SPP', 'Self-refine', 'ToT', 'MAD+judge', 'CoT', 'DefInt', 'SPP', 'Self-refine', 'ToT', 'MAD+judge']):\n    ax.annotate(txt, (x[i], y[i]), textcoords=\"offset points\", xytext=(0,10), ha='center', fontsize=10)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(5.0, 5.0))\n\n# Define the data for the scatter plot\nx = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\ny = np.array([2, 3, 5, 7, 11, 13, 17, 19, 23, 29])\n\n# Define colors and sizes for each point\ncolors = np.array(['red', 'green', 'blue', 'yellow', 'cyan', 'magenta', 'orange', 'purple', 'pink', 'brown'])\nsizes = np.array([50, 100, 150, 200, 250, 300, 350, 400, 450, 500])\n\n# Plot the scatter plot with custom colors and sizes\nscatter = ax.scatter(x, y, c=colors, s=sizes, alpha=0.7, edgecolor='w')\n\n# Add a legend to explain the colors\nlegend_labels = ['Point 1', 'Point 2', 'Point 3', 'Point 4', 'Point 5', 'Point 6', 'Point 7', 'Point 8', 'Point 9', 'Point 10']\nax.legend(scatter.legend_elements(), legend_labels, title=\"Legend\")\n\n# Set labels and title\nax.set_xlabel('X Axis Label')\nax.set_ylabel('Y Axis Label')\nax.set_title('Custom Scatter Plot with Legends')\n\n# Add grid lines for better readability\nax.grid(True, linestyle='--', alpha=0.5)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: WRMSE vs BPP for different models\nwrmse = np.array([0.12, 0.14, 0.15, 0.16, 0.17, 0.18, 0.19, 0.20])\nbpp = np.array([0.06, 0.08, 0.10, 0.12, 0.14, 0.16, 0.18, 0.20])\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Plot the data with enhanced aesthetics\nax.scatter(bpp, wrmse, c=['blue', 'cyan', 'red', 'green', 'purple', 'orange', 'pink', 'yellow'],\n           marker=['o', 's', '^', 'D', 'x', '+', 'v', '*'], s=100, edgecolor='black', linewidth=1.5)\n\n# Set labels with improved font size and style\nax.set_xlabel('Bit per pixel (BPP)', fontsize=12, fontweight='bold')\nax.set_ylabel('WRMSE', fontsize=12, fontweight='bold')\n\n# Add a title with enhanced font size and style\nax.set_title('Scatter Plot of WRMSE vs BPP', fontsize=14, fontweight='bold')\n\n# Add a legend with improved location and font size\nax.legend(['SIREN', 'WIRE', 'FFN', 'SZ3', 'NNComp', 'Ours'], loc='upper right', fontsize=10)\n\n# Add grid lines for better readability\nax.grid(True, linestyle='--', alpha=0.7)\n\n# Set axis limits for better focus\nax.set_xlim(0.05, 0.21)\nax.set_ylim(0.11, 0.21)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create sample data\nx = np.random.rand(100)\ny = np.random.rand(100)\n\n# Define categories for the scatter plot\ncategories = np.random.choice(['Daytime Sunny', 'Night Rainy', 'PGST'], size=100)\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Scatter plot with different colors and sizes based on categories\nscatter = ax.scatter(x, y, c=categories, cmap='viridis', s=50, alpha=0.7, edgecolor='w')\n\n# Add a legend with a title\nax.legend(*scatter.legend_elements(), title=\"Categories\")\n\n# Set labels and title\nax.set_xlabel('X Axis Label')\nax.set_ylabel('Y Axis Label')\nax.set_title('Sample Scatter Plot with Categories')\n\n# Add grid for better readability\nax.grid(True, linestyle='--', alpha=0.6)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Number of parameters vs. NMAE on QM9\nn_params = np.array([0.5, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0])\nnmae = np.array([1.2, 1.1, 1.0, 0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2])\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(6.0, 3.0))\n\n# Plot the data with enhanced aesthetics\nax.scatter(n_params, nmae, c=n_params, cmap='viridis', s=100, alpha=0.7, edgecolor='k')\n\n# Add a color bar to indicate the number of parameters\ncbar = plt.colorbar(ax.collections[0])\ncbar.set_label('Number of Parameters (M)', rotation=270, labelpad=15)\n\n# Set labels and title with improved font sizes\nax.set_xlabel('Number of Parameters (M)', fontsize=12)\nax.set_ylabel('NMAE on QM9', fontsize=12)\nax.set_title('Number of params. vs. NMAE on QM9', fontsize=14, fontweight='bold')\n\n# Add grid lines for better readability\nax.grid(True, linestyle='--', alpha=0.6)\n\n# Add annotations for each point\nfor i, txt in enumerate(n_params):\n    ax.annotate(f'{txt}', (n_params[i], nmae[i]), textcoords=\"offset points\", xytext=(0,10), ha='center')\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create sample data\nx1 = np.random.randn(100)\ny1 = np.random.randn(100)\nx2 = np.random.randn(100) * 0.5 + 0.5\ny2 = np.random.randn(100) * 0.5 + 0.5\nx3 = np.random.randn(100) * 0.5 - 0.5\ny3 = np.random.randn(100) * 0.5 - 0.5\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Plot the data with different markers and colors\nax.scatter(x1, y1, c='b', marker='o', label='ar')\nax.scatter(x2, y2, c='m', marker='s', label='de')\nax.scatter(x3, y3, c='g', marker='^', label='fr')\n\n# Set labels and title\nax.set_xlabel('PC1', fontsize=12)\nax.set_ylabel('PC2', fontsize=12)\nax.set_title('Scatter Plot of Principal Components', fontsize=14)\n\n# Add a legend\nax.legend(title='Legend', loc='upper right', fontsize=10)\n\n# Customize grid lines\nax.grid(True, linestyle='--', alpha=0.7)\n\n# Set axis limits for better focus\nax.set_xlim(-1.5, 1.5)\nax.set_ylim(-1.5, 1.5)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data for two different datasets\nx1 = np.array([0.5, 0.6, 0.7, 0.8, 0.9])\ny1 = np.array([0.45, 0.5, 0.55, 0.6, 0.65])\n\nx2 = np.array([0.5, 0.6, 0.7, 0.8, 0.9])\ny2 = np.array([0.4, 0.45, 0.5, 0.55, 0.6])\n\n# Create a new figure with a larger size for better visibility\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(14, 6), sharey=True)\n\n# Plot the first dataset\nscatter1 = ax1.scatter(x1, y1, c='green', marker='o', s=100, edgecolor='black', label='iTrm-All')\nax1.set_title('DE')\nax1.set_xlabel('CKA Similarity')\nax1.set_ylabel('MSE')\nax1.grid(True, linestyle='--', alpha=0.7)\nax1.legend()\n\n# Plot the second dataset\nscatter2 = ax2.scatter(x2, y2, c='red', marker='s', s=100, edgecolor='black', label='TimeXer')\nax2.set_title('PJM')\nax2.set_xlabel('CKA Similarity')\nax2.set_ylabel('MSE')\nax2.grid(True, linestyle='--', alpha=0.7)\nax2.legend()\n\n# Add a color bar to differentiate between the two datasets\ncbar = fig.colorbar(scatter1, ax=[ax1, ax2], orientation='vertical', fraction=0.046, pad=0.04)\ncbar.set_label('Dataset')\n\n# Adjust layout for better spacing\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/tree_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the bar chart\ncategories = ['Physics Forums', 'gmatclub.com', 'MathOverflow.net', 'StackExchange.com', 'MathHelpForum.com']\nvalues = [18.42, 6.26, 10.91, 30.6, 14.21]\ncolors = ['#4CAF50', '#FFC107', '#F44336', '#2196F3', '#9C27B0']\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(12.0, 8.0))\n\n# Plot the bar chart with customized colors and edge color\nbars = ax.bar(categories, values, color=colors, edgecolor='black')\n\n# Add value labels on top of each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.5, f'{yval}%', ha='center', va='bottom', fontsize=10)\n\n# Set title and labels with improved font sizes\nax.set_title('Popularity of Online Forums', fontsize=16, fontweight='bold')\nax.set_xlabel('Online Forums', fontsize=14)\nax.set_ylabel('Percentage (%)', fontsize=14)\n\n# Customize the x-axis ticks\nax.set_xticks(np.arange(len(categories)))\nax.set_xticklabels(categories, rotation=45, ha='right', fontsize=12)\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', alpha=0.7)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/tree_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the pie chart\nlabels = ['Java', 'Python', 'JavaScript', 'C++', 'Other']\nsizes = [10, 20, 27, 23, 8]\ncolors = ['#9400D3', '#FF6F61', '#FFD700', '#00FF00', '#FFA500']\nexplode = (0.1, 0, 0, 0, 0)  # explode the first slice\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(12.0, 8.0))\n\n# Plot the pie chart\nwedges, texts, autotexts = ax.pie(sizes, explode=explode, labels=labels, colors=colors,\n                                  autopct='%1.1f%%', startangle=140, shadow=True)\n\n# Enhance the pie chart with additional features\nax.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\nax.set_title(\"Programming Language Usage\", fontsize=16, fontweight='bold')\n\n# Customize the text properties\nfor text in texts:\n    text.set_color('white')\n    text.set_fontsize(12)\n    text.set_fontweight('bold')\n\nfor autotext in autotexts:\n    autotext.set_color('black')\n    autotext.set_fontsize(12)\n    autotext.set_fontweight('bold')\n\n# Add a legend\nax.legend(wedges, labels, title=\"Languages\", loc=\"center left\", bbox_to_anchor=(1, 0, 0.5, 1))\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/tree_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the bar chart\ncategories = ['Adidas', 'Nike', 'Puma', 'Reebok']\nvalues = [13.42, 30.6, 14.21, 10.91]\ncolors = ['#4682B4', '#FFD700', '#FFA500', '#FF4500']\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(12.0, 8.0))\n\n# Plot the bar chart with customized colors and edge color\nbars = ax.bar(categories, values, color=colors, edgecolor='black')\n\n# Add value labels on top of each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.5, f'{yval}%', ha='center', va='bottom', fontsize=10)\n\n# Set title and labels with improved font sizes\nax.set_title('Market Share of Sports Brands', fontsize=16, fontweight='bold')\nax.set_xlabel('Brands', fontsize=14)\nax.set_ylabel('Market Share (%)', fontsize=14)\n\n# Customize the x-axis ticks\nax.set_xticks(np.arange(len(categories)))\nax.set_xticklabels(categories, rotation=45, ha='right', fontsize=12)\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.7)\n\n# Adjust layout to prevent clipping of labels\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/tree_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the bar chart\ncategories = ['Category A', 'Category B', 'Category C']\nvalues = [50, 15, 20]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(4.0, 6.0))\n\n# Define colors for each bar\ncolors = ['#FF9A9E', '#90EE90', '#ADD8E6']\n\n# Plot the bar chart\nbars = ax.bar(categories, values, color=colors, edgecolor='black')\n\n# Add value labels on top of each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 1, f'{yval}%', ha='center', va='bottom', fontsize=10)\n\n# Set title and labels\nax.set_title('Bar Chart with Value Labels', fontsize=14, fontweight='bold')\nax.set_xlabel('Categories', fontsize=12)\nax.set_ylabel('Values (%)', fontsize=12)\n\n# Customize the x-axis ticks\nax.set_xticks(np.arange(len(categories)))\nax.set_xticklabels(categories, rotation=45, ha='right')\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.7)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/tree_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the bar chart\ncategories = ['European', 'Australian', 'South American', 'Asian', 'North American', 'African']\nvalues = [15, 18, 10, 25, 20, 12]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Define colors for each bar\ncolors = ['#FFD700', '#ADD8E6', '#90EE90', '#FF6347', '#98FB98', '#4682B4']\n\n# Plot the bar chart\nbars = ax.bar(categories, values, color=colors, edgecolor='black')\n\n# Add value labels on top of each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 1, f'{yval}%', ha='center', va='bottom', fontsize=10)\n\n# Set title and labels\nax.set_title('Percentage Distribution of Categories', fontsize=14, fontweight='bold')\nax.set_xlabel('Categories', fontsize=12)\nax.set_ylabel('Percentage (%)', fontsize=12)\n\n# Customize the x-axis ticks\nax.set_xticks(np.arange(len(categories)))\nax.set_xticklabels(categories, rotation=45, ha='right')\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.7)\n\n# Adjust layout for better spacing\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/violin_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create data\nx = np.array([1, 2, 3, 4, 5])\ny = np.array([1.5, 2.5, 3.5, 4.5, 5.5])\nlog_y = np.log(y)\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(8.0, 7.0))\n\n# Plot the data with enhanced aesthetics\nscatter = ax.scatter(x, log_y, c=y, cmap='viridis', s=100, alpha=0.7, edgecolor='k')\n\n# Add a color bar to indicate the scale of y values\ncbar = plt.colorbar(scatter)\ncbar.set_label('y values')\n\n# Set labels and title with improved font sizes\nax.set_xlabel('Number of examples', fontsize=12)\nax.set_ylabel(r'$\\log_{10}(P_{CL})$', fontsize=12)\nax.set_title('Logarithmic Plot of PCL vs Number of Examples', fontsize=14)\n\n# Add grid lines for better readability\nax.grid(True, linestyle='--', alpha=0.6)\n\n# Add a legend to explain the color coding\nlegend_labels = ['Llama2', 'Llama2 (In-Chat)']\nax.legend(legend_labels, loc='upper left', fontsize=10)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/violin_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Efficiency, Comfort, Safety scores for two conditions (Without Memory and With Memory)\nefficiency = [0.8, 0.9, 0.7, 0.6, 0.5]\ncomfort = [0.4, 0.3, 0.5, 0.6, 0.7]\nsafety = [0.2, 0.1, 0.3, 0.4, 0.5]\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Define colors for the bars\ncolors = ['#1f77b4', '#ff7f0e']\n\n# Plot the bar chart with different colors for each condition\nbars1 = ax.bar(range(len(efficiency)), efficiency, color=colors[0], label='Without Memory')\nbars2 = ax.bar(range(len(comfort)), comfort, bottom=efficiency, color=colors[1], label='With Memory')\n\n# Add stars at specific positions\nax.plot([0, 1, 2, 3, 4], [0.8, 0.3, 0.5, 0.6, 0.7], 'ro', markersize=8, label='Stars')\n\n# Set labels and title\nax.set_xlabel('Criteria', fontsize=12)\nax.set_ylabel('Score', fontsize=12)\nax.set_title('Comparison of Scores with and without Memory', fontsize=14, fontweight='bold')\nax.set_xticks(range(len(efficiency)))\nax.set_xticklabels(['Efficiency', 'Comfort', 'Safety'], fontsize=10)\n\n# Add a legend\nax.legend(loc='upper right', fontsize=10)\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.7)\n\n# Annotate the stars with text\nfor i, v in enumerate([0.8, 0.3, 0.5, 0.6, 0.7]):\n    ax.text(i, v + 0.05, '*', ha='center', va='bottom', fontsize=12, color='red')\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/violin_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Efficiency, Comfort, Safety scores for two conditions (Without Memory and With Memory)\nefficiency = [0.8, 0.9, 0.7]\ncomfort = [0.5, 0.6, 0.4]\nsafety = [0.7, 0.8, 0.6]\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Define colors for the bars\ncolors = ['#FF9999', '#66B3FF']\n\n# Plot the bar chart with different colors for each condition\nax.bar(range(len(efficiency)), efficiency, color=colors[0], label='Without Memory')\nax.bar(range(len(comfort)), comfort, bottom=efficiency, color=colors[1], label='With Memory')\n\n# Add labels for the x-axis\nax.set_xticks(range(len(efficiency)))\nax.set_xticklabels(['Efficiency', 'Comfort', 'Safety'])\n\n# Set labels for the y-axis\nax.set_ylabel('Score')\n\n# Add a title to the chart\nax.set_title('Comparison of Features with and without Memory')\n\n# Add a legend to differentiate between conditions\nax.legend()\n\n# Add grid lines for better readability\nax.grid(axis='y', linestyle='--', alpha=0.7)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/violin_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data for demonstration\nx = np.arange(1, 6)\ny1 = np.array([0.3, 0.5, 0.7, 0.9, 1.1])\ny2 = np.array([0.2, 0.4, 0.6, 0.8, 1.0])\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(8.0, 4.0))\n\n# Plot the data with enhanced styling\nax.plot(x, y1, label='GPT-4V(Version)', color='green', linestyle='-', linewidth=2, marker='o', markersize=6)\nax.plot(x, y2, label='Gemini', color='orange', linestyle='--', linewidth=2, marker='s', markersize=6)\n\n# Set labels and title with improved font sizes\nax.set_xlabel('Length Distribution', fontsize=12)\nax.set_ylabel('Score', fontsize=12)\nax.set_title('Scoring Evaluation', fontsize=14, fontweight='bold')\n\n# Add grid lines for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5, alpha=0.7)\n\n# Customize ticks\nax.set_xticks(x)\nax.set_yticks(np.arange(0, 1.2, 0.2))\n\n# Add a legend with a shadow effect\nax.legend(loc='upper left', fontsize=10, shadow=True)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/violin_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data for demonstration\ncategories = ['jTrans', 'PalmTree', 'CLAP']\nvalues = [0.3, 0.6, 0.8]\nerrors = [0.1, 0.05, 0.07]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(5.0, 5.0))\n\n# Plot the bar chart with error bars\nbars = ax.bar(categories, values, yerr=errors, capsize=5, color=['#FF9999', '#66B3FF', '#99FF99'], edgecolor='black')\n\n# Add labels and title\nax.set_xlabel('Categories', fontsize=12)\nax.set_ylabel('Accuracy', fontsize=12)\nax.set_title('Comparison of Model Accuracy', fontsize=14)\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.7)\n\n# Annotate each bar with its value\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.01, f'{yval:.2f}', ha='center', va='bottom', fontsize=10)\n\n# Customize the layout\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/violin_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Let's create a more complex dataset for demonstration\nx = np.linspace(0, 10, 100)\ny1 = np.sin(x)\ny2 = np.cos(x)\ny3 = np.tan(x)\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Plot the data with different styles and markers\nax.plot(x, y1, label='Teacher-Style', color='royalblue', linestyle='-', linewidth=2, marker='o', markersize=5, markevery=10)\nax.plot(x, y2, label='Standardize', color='darkorange', linestyle='--', linewidth=2, marker='s', markersize=5, markevery=10)\nax.plot(x, y3, label='Custom', color='forestgreen', linestyle='-.', linewidth=2, marker='^', markersize=5, markevery=10)\n\n# Set labels with improved font size and style\nax.set_xlabel('X-axis', fontsize=12, fontweight='bold')\nax.set_ylabel('Y-axis', fontsize=12, fontweight='bold')\n\n# Add a title with enhanced styling\nax.set_title('Comparison of Different Plot Styles', fontsize=14, fontweight='bold')\n\n# Add grid lines for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5, alpha=0.7)\n\n# Add a legend with a shadow effect\nax.legend(loc='upper right', fontsize=10, shadow=True)\n\n# Customize ticks for better readability\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/violin_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data for demonstration\ncategories = ['Vanilla', 'CoT']\nvalues1 = [75, 85]\nvalues2 = [60, 90]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Define colors for each category\ncolors = ['#FF9999', '#66B3FF']\n\n# Plot the data with enhanced aesthetics\nbars = ax.bar(categories, values1, color=colors[0], edgecolor='black', linewidth=1.2, label='Category 1')\nax.bar(categories, values2, bottom=values1, color=colors[1], edgecolor='black', linewidth=1.2, label='Category 2')\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.7)\n\n# Set labels and title with improved font sizes\nax.set_xlabel('Categories', fontsize=12)\nax.set_ylabel('Values', fontsize=12)\nax.set_title('Comparison of Two Categories', fontsize=14, fontweight='bold')\n\n# Add a legend\nax.legend(loc='upper right', fontsize=10)\n\n# Annotate the bars with their values\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 1, f'{yval}', ha='center', va='bottom', fontsize=10)\n\n# Adjust layout for better spacing\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/violin_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Number of features vs. Decrease in MSE for different groups\nx = np.array([2, 4, 6, 8, 10])\ny1 = np.array([163, 201, 176, 159, 109])  # Group l0\ny2 = np.array([97, 95, 95, 109, 97])    # AGIS\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Plot the data with enhanced aesthetics\nax.bar(x - 0.2, y1, width=0.4, color='skyblue', edgecolor='black', label='Group l0')\nax.bar(x + 0.2, y2, width=0.4, color='orange', edgecolor='black', label='AGIS')\n\n# Set labels and title with improved font sizes and styles\nax.set_xlabel('Number of Features', fontsize=12, fontweight='bold')\nax.set_ylabel('% Decrease in Test MSE vs. FLAM-Gl', fontsize=12, fontweight='bold')\nax.set_title('Comparison of % Decrease in Test MSE vs. FLAM-Gl', fontsize=14, fontweight='bold')\n\n# Add grid lines for better readability\nax.grid(axis='y', linestyle='--', alpha=0.7)\n\n# Add a legend with a shadow effect\nax.legend(loc='upper right', fontsize=10, shadow=True)\n\n# Customize ticks for better readability\nax.set_xticks(x)\nax.set_xticklabels(['2', '4', '6', '8', '10'], fontsize=10)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/violin_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: correlation coefficients and p-values for different conditions\nconditions = ['Raw', '125Hz', '25Hz', '50Hz', '100Hz']\ncorrelation_coefficients = [0.18, 0.33, 0.19, 0.67, 0.57]\np_values = [0.88, 0.85, 0.79, 0.67, 0.57]\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Define colors for each condition\ncolors = ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd']\n\n# Plot the data using a scatter plot with varying sizes and colors\nscatter = ax.scatter(correlation_coefficients, p_values, s=1000 * np.array(correlation_coefficients)**2, c=colors, alpha=0.7, edgecolor='w', linewidth=2)\n\n# Add annotations for each point\nfor i, txt in enumerate(conditions):\n    ax.annotate(txt, (correlation_coefficients[i], p_values[i]), textcoords=\"offset points\", xytext=(0,10), ha='center')\n\n# Set labels and title\nax.set_xlabel('Decimated Sampling Rate', fontsize=12)\nax.set_ylabel('KCC', fontsize=12)\nax.set_title('Correlation Coefficients and P-Values by Decimation Rate', fontsize=14, fontweight='bold')\n\n# Add a grid for better readability\nax.grid(True, linestyle='--', alpha=0.6)\n\n# Add a color bar to indicate the correlation coefficient values\ncbar = plt.colorbar(scatter)\ncbar.set_label('Correlation Coefficient', rotation=270, labelpad=15)\n\n# Add a legend to explain the colors\nlegend_labels = ['Raw', '125Hz', '25Hz', '50Hz', '100Hz']\nfor i, label in enumerate(legend_labels):\n    ax.plot([], [], marker='o', color=colors[i], linestyle='', label=label, markersize=10)\nax.legend(title='Conditions', loc='upper left', bbox_to_anchor=(1, 1))\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/violin_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data for a hypothetical scenario\n# Let's assume we have data about students' grades and their gender\n# We'll create a more complex dataset with multiple classes and genders\n\n# Number of students in each class\nnum_students = [50, 60, 70, 80]\n\n# Grades for each student in different classes\ngrades_class_1 = np.random.normal(loc=75, scale=10, size=num_students[0])\ngrades_class_2 = np.random.normal(loc=80, scale=10, size=num_students[1])\ngrades_class_3 = np.random.normal(loc=85, scale=10, size=num_students[2])\ngrades_class_4 = np.random.normal(loc=90, scale=10, size=num_students[3])\n\n# Combine all grades into one array\nall_grades = np.concatenate([grades_class_1, grades_class_2, grades_class_3, grades_class_4])\n\n# Create a color map for different classes\ncolors = plt.cm.viridis(np.linspace(0, 1, len(all_grades)))\n\n# Create a new figure with a larger size for better visibility\nfig, axes = plt.subplots(nrows=2, ncols=2, figsize=(12.0, 8.0), constrained_layout=True)\n\n# Plot the first subplot\naxes[0, 0].scatter(range(len(grades_class_1)), grades_class_1, c=colors[:len(grades_class_1)], s=50, alpha=0.7)\naxes[0, 0].set_title('Distribution of Grades: Class 1')\naxes[0, 0].set_xlabel('Student ID')\naxes[0, 0].set_ylabel('Grade')\n\n# Plot the second subplot\naxes[0, 1].scatter(range(len(grades_class_2)), grades_class_2, c=colors[len(grades_class_1):len(grades_class_1)+len(grades_class_2)], s=50, alpha=0.7)\naxes[0, 1].set_title('Distribution of Grades: Class 2')\naxes[0, 1].set_xlabel('Student ID')\naxes[0, 1].set_ylabel('Grade')\n\n# Plot the third subplot\naxes[1, 0].scatter(range(len(grades_class_3)), grades_class_3, c=colors[len(grades_class_1)+len(grades_class_2):len(grades_class_1)+len(grades_class_2)+len(grades_class_3)], s=50, alpha=0.7)\naxes[1, 0].set_title('Distribution of Grades: Class 3')\naxes[1, 0].set_xlabel('Student ID')\naxes[1, 0].set_ylabel('Grade')\n\n# Plot the fourth subplot\naxes[1, 1].scatter(range(len(grades_class_4)), grades_class_4, c=colors[len(grades_class_1)+len(grades_class_2)+len(grades_class_3):], s=50, alpha=0.7)\naxes[1, 1].set_title('Distribution of Grades: Class 4')\naxes[1, 1].set_xlabel('Student ID')\naxes[1, 1].set_ylabel('Grade')\n\n# Add a main title for the entire figure\nplt.suptitle('Distribution of Grades: Classes 1-4', fontsize=16, fontweight='bold')\n\n# Show the plot\nplt.show()\n```"}
