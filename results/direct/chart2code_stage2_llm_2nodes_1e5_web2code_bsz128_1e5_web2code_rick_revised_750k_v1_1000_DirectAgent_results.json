{"file": "dataset/ori_500/3d_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfig = plt.figure(figsize=(7.0, 7.0))\nax = fig.add_subplot(111, projection='3d')\n\nx = np.arange(0, 10, 1)\ny = np.arange(0, 10, 1)\nx, y = np.meshgrid(x, y)\n\nz = np.sin(np.sqrt(x**2 + y**2))\n\nax.plot_surface(x, y, z, color='blue')\nax.scatter(x, y, z, color='red')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Define the data\nheights = [1.0, 2.0, 2.5, 3.0, 3.5]\ncounts = [4, 3, 2, 1, 0]\n\n# Plot the data\nax.bar(heights, counts, color='red')\n\n# Set the title and labels\nax.set_title('Height vs Count')\nax.set_xlabel('Height')\nax.set_ylabel('Count')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_11.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig = plt.figure(figsize=(8.0, 6.0))\nax = fig.add_subplot(111, projection='3d')\n\n# Define the data for the sphere\nu = np.linspace(0, 2 * np.pi, 100)\nv = np.linspace(0, np.pi, 100)\nx = 5 * np.outer(np.cos(u), np.sin(v))\ny = 5 * np.outer(np.sin(u), np.sin(v))\nz = 5 * np.outer(np.ones(np.size(u)), np.cos(v))\n\n# Plot the sphere\nax.plot_surface(x, y, z, color='magenta')\n\n# Set the limits for the axes\nax.set_xlim(-5, 5)\nax.set_ylim(-5, 5)\nax.set_zlim(-5, 5)\n\n# Set the labels for the axes\nax.set_xlabel('X')\nax.set_ylabel('Y')\nax.set_zlabel('Z')\n\n# Display the plot\nplt.show()"}
{"file": "dataset/ori_500/3d_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig = plt.figure(figsize=(8.0, 6.0))\nax = fig.add_subplot(111, projection='3d')\n\n# Define the data points\nx = [-4, -2, 0, 2, 4]\ny = [0, 0, 0, 0, 0]\nz = [0, 0, 0, 0, 0]\n\n# Plot the data points\nax.scatter(x, y, z, c='r', marker='o')\n\n# Define the line of best fit\nx_line = np.linspace(-4, 4, 100)\ny_line = np.linspace(0, 0, 100)\nz_line = np.linspace(0, 20, 100)\n\n# Plot the line of best fit\nax.plot(x_line, y_line, z_line, c='b', linestyle='-')\n\n# Set labels\nax.set_xlabel('Temperature (\u00b0C)')\nax.set_ylabel('Pressure (kPa)')\nax.set_zlabel('Volume (L)')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nyears = [2010, 2012, 2014, 2016, 2018]\npublic_schools = [0.3, 0.5, 0.7, 0.9, 0.8]\nprivate_schools = [0.4, 0.6, 0.8, 0.9, 0.7]\n\n# Create a 3D plot\nfig = plt.figure(figsize=(8.0, 6.0))\nax = fig.add_subplot(111, projection='3d')\n\n# Plot bars for public schools\nx = years\ny = [0]*len(years)\nz = [0]*len(years)\ndx = [0.5]*len(years)\ndy = [0.5]*len(years)\ndz = public_schools\nax.bar3d(x, y, z, dx, dy, dz, color='blue')\n\n# Plot bars for private schools\nx = years\ny = [0]*len(years)\nz = [0]*len(years)\ndx = [0.5]*len(years)\ndy = [0.5]*len(years)\ndz = private_schools\nax.bar3d(x, y, z, dx, dy, dz, color='orange')\n\n# Set labels and title\nax.set_xlabel('Year')\nax.set_ylabel('Type')\nax.set_zlabel('Student to Teacher Ratio')\nax.set_title('Student to Teacher Ratio by School Type')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Define the data for the bar chart\nx = np.arange(10)\ny = np.random.rand(10)\n\n# Create a bar chart\nax.bar(x, y, color='blue')\n\n# Set the title and labels\nax.set_title('Bar Chart')\nax.set_xlabel('X-axis')\nax.set_ylabel('Y-axis')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis for the 3D plot\nfig = plt.figure(figsize=(10.0, 8.0))\nax = fig.add_subplot(121, projection='3d')\n\n# Define the data for the 3D plot\nx = np.arange(2010, 2019)\ny = np.arange(0, 4)\nx, y = np.meshgrid(x, y)\nz = np.random.rand(9, 4)\n\n# Plot the 3D bar chart\nax.bar3d(x.ravel(), y.ravel(), np.zeros_like(z).ravel(), 1, 1, z.ravel())\n\n# Set the labels for the axes\nax.set_xlabel('Year')\nax.set_ylabel('Sector')\nax.set_zlabel('Investment (Billion USD)')\n\n# Create a figure and axis for the 2D plot\nax2 = fig.add_subplot(122)\n\n# Define the data for the 2D plot\nx = np.arange(0, 11, 2)\ny = np.random.rand(6)\ncolors = ['blue', 'green', 'red', 'purple', 'orange', 'yellow']\n\n# Plot the 2D bar chart\nfor i in range(len(x)):\n    ax2.bar(x[i], y[i], color=colors[i])\n\n# Set the labels for the axes\nax2.set_xlabel('Time Since Introduction (Years)')\nax2.set_ylabel('Adoption Rate')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure with two subplots\nfig, axs = plt.subplots(1, 2, figsize=(10.0, 7.0))\n\n# Define the function f(x)\ndef f(x):\n    return x**2 - 2*x + 1\n\n# Generate x values\nx = np.linspace(-1.0, 1.0, 100)\n\n# Plot the function f(x) on the first subplot\naxs[0].plot(x, f(x), 'r-')\naxs[0].set_title('f(x)')\naxs[0].set_xlabel('x')\naxs[0].set_ylabel('f(x)')\n\n# Define the function g(x)\ndef g(x):\n    return np.sin(x)\n\n# Generate x values\nx = np.linspace(-1.0, 1.0, 100)\n\n# Plot the function g(x) on the second subplot\naxs[1].plot(x, g(x), 'b-')\naxs[1].set_title('g(x)')\naxs[1].set_xlabel('x')\naxs[1].set_ylabel('g(x)')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig = plt.figure(figsize=(10.0, 6.0))\nax = fig.add_subplot(111, projection='3d')\n\n# Define the data for the plot\nx = np.linspace(1, 6, 10)\ny = np.linspace(1, 6, 10)\nx, y = np.meshgrid(x, y)\nz = np.sin(np.sqrt(x**2 + y**2))\n\n# Plot the surface\nsurf = ax.plot_surface(x, y, z, cmap='viridis')\n\n# Add a color bar which maps values to colors\nfig.colorbar(surf, shrink=0.5, aspect=5)\n\n# Set the title of the plot\nax.set_title('CIFAR10 Spiking ResNet18 T = 6')\n\n# Set the labels for the axes\nax.set_xlabel('tau')\nax.set_ylabel('kappa')\nax.set_zlabel('accuracy (%)')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the function for the surface plot\ndef f(x, y):\n    return np.sin(np.sqrt(x**2 + y**2))\n\n# Create a grid of points\nx = np.linspace(-100, 100, 400)\ny = np.linspace(-100, 100, 400)\nX, Y = np.meshgrid(x, y)\nZ = f(X, Y)\n\n# Create a figure and a set of subplots\nfig, axs = plt.subplots(2, 2, figsize=(15, 10), subplot_kw={'projection': '3d'})\n\n# Plot the surfaces in each subplot\naxs[0, 0].plot_surface(X, Y, Z, cmap='viridis')\naxs[0, 0].set_title('Origin')\naxs[0, 0].set_xlabel('m')\naxs[0, 0].set_ylabel('n')\naxs[0, 0].set_zlabel('FREEDOM')\n\naxs[0, 1].plot_surface(X, Y, Z, cmap='plasma')\naxs[0, 1].set_title('MG (ours)')\naxs[0, 1].set_xlabel('m')\naxs[0, 1].set_ylabel('n')\naxs[0, 1].set_zlabel('FREEDOM')\n\naxs[1, 0].plot_surface(X, Y, Z, cmap='inferno')\naxs[1, 0].set_title('Origin')\naxs[1, 0].set_xlabel('m')\naxs[1, 0].set_ylabel('n')\naxs[1, 0].set_zlabel('FREEDOM')\n\naxs[1, 1].plot_surface(X, Y, Z, cmap='coolwarm')\naxs[1, 1].set_title('MG (ours)')\naxs[1, 1].set_xlabel('m')\naxs[1, 1].set_ylabel('n')\naxs[1, 1].set_zlabel('FREEDOM')\n\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfig = plt.figure(figsize=(7.0, 7.0))\nax = fig.add_subplot(111, projection='3d')\n\n# Create a grid of points\nx = np.linspace(0, 1, 10)\ny = np.linspace(0, 1, 10)\nx, y = np.meshgrid(x, y)\nz = np.sin(np.sqrt(x**2 + y**2))\n\n# Plot the surface\nsurf = ax.plot_surface(x, y, z, cmap='viridis')\n\n# Add a color bar which maps values to colors\nfig.colorbar(surf, shrink=0.5, aspect=5)\n\n# Set labels\nax.set_xlabel('X Label')\nax.set_ylabel('Y Label')\nax.set_zlabel('Z Label')\n\n# Add a target point\nax.scatter(0.5, 0.5, 0.5, c='r', marker='o')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig = plt.figure(figsize=(8.0, 8.0))\nax = fig.add_subplot(111, projection='3d')\n\n# Define the grid\nx = np.linspace(-4, 4, 100)\ny = np.linspace(-2, 2, 100)\nx, y = np.meshgrid(x, y)\nz = np.sin(np.sqrt(x**2 + y**2))\n\n# Plot the surface\nsurf = ax.plot_surface(x, y, z, cmap='coolwarm')\n\n# Add color bar which maps values to colors\nfig.colorbar(surf, shrink=0.5, aspect=5)\n\n# Set labels\nax.set_xlabel('Bus')\nax.set_ylabel('Time')\nax.set_zlabel('Value')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Define the data for the bar chart\nx = np.arange(1, 5)\ny = [3, 4, 2, 1]\nwidth = 0.35\n\n# Create a bar chart\nrects = ax.bar(x, y, width, color='b')\n\n# Add some text for labels, title, and custom x-axis tick labels, etc.\nax.set_ylabel('Scores')\nax.set_title('Scores by group and gender')\nax.set_xticks(x)\nax.set_xticklabels(['G1', 'G2', 'G3', 'G4'])\n\n# Add a color bar which maps values to colors\ncmap = plt.cm.RdYlGn\nnorm = plt.Normalize(vmin=0, vmax=12)\nsm = plt.cm.ScalarMappable(cmap=cmap, norm=norm)\nsm.set_array([])\nfig.colorbar(sm)\n\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and a 3D axis\nfig = plt.figure(figsize=(8.0, 6.0))\nax = fig.add_subplot(111, projection='3d')\n\n# Define the data points\nx = [10, 20, 30, 40, 50]\ny = [15, 25, 35, 45, 55]\nz = [10, 20, 30, 40, 50]\n\n# Plot the data points\nax.scatter(x, y, z, c='r', marker='o')\n\n# Set the labels for the axes\nax.set_xlabel('Age')\nax.set_ylabel('Income')\nax.set_zlabel('Debt')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and a 3D axis\nfig = plt.figure(figsize=(8.0, 6.0))\nax = fig.add_subplot(111, projection='3d')\n\n# Define the data for the plot\ntime = np.linspace(0, 100, 100)\ntemperature = np.linspace(10, 40, 100)\ndepth = np.linspace(-20, 50, 100)\n\n# Create a meshgrid for the 3D plot\nT, D = np.meshgrid(time, depth)\n\n# Plot the data\nax.plot_surface(T, D, temperature, color='blue')\nax.plot_surface(T, D, depth, color='red')\nax.plot_surface(T, D, time, color='green')\n\n# Set the labels for the axes\nax.set_xlabel('Time (s)')\nax.set_ylabel('Depth (m)')\nax.set_zlabel('Temperature (\u00b0C)')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Set the background color of the plot\nax.set_facecolor('white')\n\n# Set the x-axis limits\nax.set_xlim(-20, 20)\n\n# Set the y-axis limits\nax.set_ylim(0, 12)\n\n# Set the x-axis label\nax.set_xlabel('LR Test')\n\n# Set the y-axis label\nax.set_ylabel('Density')\n\n# Set the title of the plot\nax.set_title('Histograms of LR Test')\n\n# Create a rectangle for the left side of the plot\nrect_left = plt.Rectangle((-20, 0), 40, 12, facecolor='blue', alpha=0.5)\nax.add_patch(rect_left)\n\n# Create a rectangle for the right side of the plot\nrect_right = plt.Rectangle((0, 0), 20, 12, facecolor='red', alpha=0.5)\nax.add_patch(rect_right)\n\n# Create a line for the middle of the plot\nline_middle = plt.Line2D([-10, 10], [6, 6], color='blue')\nax.add_line(line_middle)\n\n# Create a line for the top of the plot\nline_top = plt.Line2D([0, 0], [12, 0], color='red')\nax.add_line(line_top)\n\n# Create a line for the bottom of the plot\nline_bottom = plt.Line2D([0, 0], [0, 0], color='red')\nax.add_line(line_bottom)\n\n# Create a line for the left side of the plot\nline_left = plt.Line2D([-20, -20], [0, 12], color='blue')\nax.add_line(line_left)\n\n# Create a line for the right side of the plot\nline_right = plt.Line2D([20, 20], [0, 12], color='red')\nax.add_line(line_right)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(7, 5))\n\n# Define the data\nx = np.linspace(150, 400, 100)\ny = -2 * np.log(x / 150)\n\n# Plot the data\nax.plot(x, y, color='black')\n\n# Add a rectangle for severity\nrect = plt.Rectangle((150, -2), 250, 2, color='gray', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle for correlation\nrect = plt.Rectangle((350, -6), 50, 2, color='gray', alpha=0.5)\nax.add_patch(rect)\n\n# Add scatter plots\nax.scatter([180, 200, 220], [-2, -3, -4], color='blue')\nax.scatter([250, 270, 290], [-3, -4, -5], color='orange')\nax.scatter([300, 320, 340], [-4, -5, -6], color='green')\nax.scatter([350, 370, 390], [-5, -6, -7], color='green')\n\n# Set the labels\nax.set_xlabel('Average Tracked ORB Feature Number')\nax.set_ylabel('Log (ATE RMSE)')\n\n# Add a legend\nlegend_elements = [plt.Line2D([0], [0], marker='o', color='w', label='Low', markerfacecolor='blue', markersize=10),\n                  plt.Line2D([0], [0], marker='o', color='w', label='Middle', markerfacecolor='orange', markersize=10),\n                  plt.Line2D([0], [0], marker='o', color='w', label='High', markerfacecolor='green', markersize=10)]\nax.legend(handles=legend_elements, loc='upper right')\n\n# Add a title\nax.set_title('Severity: Low, Middle, High\\nCorrelation: -0.47')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(7.0, 5.0))\n\n# Define the data\nx = np.linspace(-3, 0, 100)\ny = np.log(x + 4)\ncolors = ['blue', 'orange', 'green', 'brown']\nmarkers = ['o', 's', '^', 'p']\n\n# Plot the data\nfor i in range(len(colors)):\n    ax.plot(x, y + i * 0.2, color=colors[i], marker=markers[i], linestyle='-', label=f'{i}x')\n\n# Add a shaded rectangle\nax.add_patch(plt.Rectangle((0, -1), 1, 2, color='lightgrey'))\n\n# Add a line\nax.axhline(y=-1, color='black', linestyle='-')\n\n# Add a text\nax.text(0.5, -1.5, 'Correlation: -0.47', horizontalalignment='center', verticalalignment='center')\n\n# Set the limits\nax.set_xlim(-3, 0)\nax.set_ylim(-3, 0)\n\n# Set the labels\nax.set_xlabel('Log (Depth L1)')\nax.set_ylabel('Log (ATE RMSE)')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('T-test p-value = 0.0000')\n\n# Set the x-axis label\nax.set_xlabel('Avg Top-5 Persistence of 1D')\n\n# Set the y-axis label\nax.set_ylabel('Density')\n\n# Define the data for the plot\nx = [0.0, 0.2, 0.4, 0.6, 0.8]\ny = [3.5, 3.2, 2.8, 2.5, 2.2]\n\n# Plot the data\nax.plot(x, y, 'ro-')\n\n# Set the limits of the x-axis\nax.set_xlim(0.0, 0.8)\n\n# Set the limits of the y-axis\nax.set_ylim(0.0, 4.0)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\ntasks = ['snacks', 'navigate', 'question_selection', 'object_counting']\nscores = [7.2, 7.5, 7.8, 7.9]\ncolors = ['blue', 'green', 'red', 'purple']\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(10.0, 4.0))\nbars = ax.bar(tasks, scores, color=colors)\n\n# Add labels and title\nax.set_xlabel('Tasks')\nax.set_ylabel('Scores')\nax.set_title('Comparison of APO & APO-APEs (GPT-3 5-Turbo)')\n\n# Add a legend\nlegend_labels = ['APO-trend', 'AOP-step1-APE', 'AOP-step2-APE', 'AOP-best', 'AOP-Sum-best']\nlegend_handles = [plt.Rectangle((0,0),1,1, color=c) for c in colors]\nax.legend(legend_handles, legend_labels)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Set the title of the plot\nax.set_title('summarization_xsum:temperature=0.3,device=cuda')\n\n# Set the x-axis label\nax.set_xlabel('norm size')\n\n# Set the y-axis label\nax.set_ylabel('count')\n\n# Define the data for the plot\nx = [0.0, 0.2, 0.4, 0.6, 0.8, 1.0, 1.2, 1.4]\ny = [50, 70, 90, 110, 130, 150, 170, 190]\n\n# Plot the data\nax.plot(x, y, 'r-')\n\n# Set the color of the x-axis ticks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis ticks\nax.tick_params(axis='y', colors='red')\n\n# Set the color of the x-axis labels\nax.xaxis.label.set_color('green')\n\n# Set the color of the y-axis labels\nax.yaxis.label.set_color('purple')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='orange')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='pink')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['0.0', '0.2', '0.4', '0.6', '0.8', '1.0', '1.2', '1.4'], color='brown')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0', '20', '40', '60', '80', '100', '120'], color='cyan')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='magenta')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='yellow')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='black')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='grey')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['0.0', '0.2', '0.4', '0.6', '0.8', '1.0', '1.2', '1.4'], color='white')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0', '20', '40', '60', '80', '100', '120'], color='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='red')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='green')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='purple')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['0.0', '0.2', '0.4', '0.6', '0.8', '1.0', '1.2', '1.4'], color='cyan')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0', '20', '40', '60', '80', '100', '120'], color='magenta')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='yellow')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='white')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='red')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['0.0', '0.2', '0.4', '0.6', '0.8', '1.0', '1.2', '1.4'], color='blue')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0', '20', '40', '60', '80', '100', '120'], color='green')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='purple')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='cyan')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='magenta')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='yellow')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['0.0', '0.2', '0.4', '0.6', '0.8', '1.0', '1.2', '1.4'], color='black')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0', '20', '40', '60', '80', '100', '120'], color='white')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='red')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='green')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='purple')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['0.0', '0.2', '0.4', '0.6', '0.8', '1.0', '1.2', '1.4'], color='cyan')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0', '20', '40', '60', '80', '100', '120'], color='magenta')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='yellow')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='white')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='red')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['0.0', '0.2', '0.4', '0.6', '0.8', '1.0', '1.2', '1.4'], color='blue')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0', '20', '40', '60', '80', '100', '120'], color='green')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='purple')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='cyan')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='magenta')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='yellow')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['0.0', '0.2', '0.4', '0.6', '0.8', '1.0', '1.2', '1.4'], color='black')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0', '20', '40', '60', '80', '100', '120'], color='white')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='red')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='green')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='purple')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['0.0', '0.2', '0.4', '0.6', '0.8', '1.0', '1.2', '1.4'], color='cyan')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0', '20', '40', '60', '80', '100', '120'], color='magenta')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='yellow')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='white')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='red')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['0.0', '0.2', '0.4', '0.6', '0.8', '1.0', '1.2', '1.4'], color='blue')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0', '20', '40', '60', '80', '100', '120'], color='green')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='purple')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='cyan')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='magenta')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='yellow')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['0.0', '0.2', '0.4', '0.6', '0.8', '1.0', '1.2', '1.4'], color='black')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0', '20', '40', '60', '80', '100', '120'], color='white')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='red')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='green')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='purple')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['0.0', '0.2', '0.4', '0.6', '0.8', '1.0', '1.2', '1.4'], color='cyan')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0', '20', '40', '60', '80', '100', '120'], color='magenta')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='yellow')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='white')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='red')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['0.0', '0.2', '0.4', '0.6', '0.8', '1.0', '1.2', '1.4'], color='blue')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0', '20', '40', '60', '80', '100', '120'], color='green')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='purple')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='cyan')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='magenta')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='yellow')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['0.0', '0.2', '0.4', '0.6', '0.8', '1.0', '1.2', '1.4'], color='black')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0', '20', '40', '60', '80', '100', '120'], color='white')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='red')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='green')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='purple')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['0.0', '0.2', '0.4', '0.6', '0.8', '1.0', '1.2', '1.4'], color='cyan')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0', '20', '40', '60', '80', '100', '120'], color='magenta')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='yellow')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='white')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='red')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['0.0', '0.2', '0.4', '0.6', '0.8', '1.0', '1.2', '1.4'], color='blue')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0', '20', '40', '60', '80', '100', '120'], color='green')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='purple')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='cyan')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='magenta')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='yellow')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['0.0', '0.2', '0.4', '0.6', '0.8', '1.0', '1.2', '1.4'], color='black')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0', '20', '40', '60', '80', '100', '120'], color='white')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='red')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='green')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='purple')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['0.0', '0.2', '0.4', '0.6', '0.8', '1.0', '1.2', '1.4'], color='cyan')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0', '20', '40', '60', '80', '100', '120'], color='magenta')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='yellow')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='white')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='red')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['0.0', '0.2', '0.4', '0.6', '0.8', '1.0', '1.2', '1.4'], color='blue')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0', '20', '40', '60', '80', '100', '120'], color='green')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='purple')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='cyan')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='magenta')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='yellow')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['0.0', '0.2', '0.4', '0.6', '0.8', '1.0', '1.2', '1.4'], color='black')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0', '20', '40', '60', '80', '100', '120'], color='white')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='red')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis grid lines\n"}
{"file": "dataset/ori_500/CB_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the pie chart\nlabels = ['Same', 'Different', 'Incomparable']\nsizes = [32, 4, 99]\ncolors = ['blue', 'orange', 'green']\n\n# Create a pie chart\nfig, ax = plt.subplots(figsize=(8.0, 4.0))\nax.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%', startangle=140)\nax.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\n\n# Define the data for the bar chart\nbar_labels = ['English', 'German', 'Both']\nbar_sizes = [11.1, 44.4, 44.4]\nbar_colors = ['darkgreen', 'lightgreen', 'lightgreen']\n\n# Create a bar chart\nax2 = fig.add_axes([0.7, 0.15, 0.2, 0.7])\nax2.bar(bar_labels, bar_sizes, color=bar_colors)\n\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_16.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(7, 5))\n\n# Set the title of the plot\nax.set_title('Time Cost (Seconds)')\n\n# Set the x-axis label\nax.set_xlabel('Algorithms')\n\n# Set the y-axis label\nax.set_ylabel('Time Cost (Seconds)')\n\n# Set the x-axis limits\nax.set_xlim(0, 10)\n\n# Set the y-axis limits\nax.set_ylim(45, 52)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((1, 46), 3, 5, color='green')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((4, 48), 3, 3, color='orange')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((7, 49), 3, 2, color='red')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((1, 46), 3, 5, color='blue')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((4, 48), 3, 3, color='purple')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((7, 49), 3, 2, color='pink')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((1, 46), 3, 5, color='cyan')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((4, 48), 3, 3, color='magenta')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((7, 49), 3, 2, color='yellow')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((1, 46), 3, 5, color='brown')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((4, 48), 3, 3, color='gray')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((7, 49), 3, 2, color='black')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((1, 46), 3, 5, color='white')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((4, 48), 3, 3, color='silver')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((7, 49), 3, 2, color='gold')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((1, 46), 3, 5, color='bronze')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((4, 48), 3, 3, color='ivory')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((7, 49), 3, 2, color='cornsilk')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((1, 46), 3, 5, color='blanchedalmond')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((4, 48), 3, 3, color='bisque')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((7, 49), 3, 2, color='navajowhite')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((1, 46), 3, 5, color='moccasin')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((4, 48), 3, 3, color='papayawhip')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((7, 49), 3, 2, color='blanchedalmond')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((1, 46), 3, 5, color='lemonchiffon')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((4, 48), 3, 3, color='lightgoldenrodyellow')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((7, 49), 3, 2, color='lightyellow')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((1, 46), 3, 5, color='lightgoldenrodyellow')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((4, 48), 3, 3, color='lightyellow')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((7, 49), 3, 2, color='lightgoldenrodyellow')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((1, 46), 3, 5, color='lightgoldenrodyellow')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((4, 48), 3, 3, color='lightyellow')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((7, 49), 3, 2, color='lightgoldenrodyellow')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((1, 46), 3, 5, color='lightgoldenrodyellow')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((4, 48), 3, 3, color='lightyellow')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((7, 49), 3, 2, color='lightgoldenrodyellow')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((1, 46), 3, 5, color='lightgoldenrodyellow')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((4, 48), 3, 3, color='lightyellow')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((7, 49), 3, 2, color='lightgoldenrodyellow')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((1, 46), 3, 5, color='lightgoldenrodyellow')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((4, 48), 3, 3, color='lightyellow')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((7, 49), 3, 2, color='lightgoldenrodyellow')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((1, 46), 3, 5, color='lightgoldenrodyellow')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((4, 48), 3, 3, color='lightyellow')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((7, 49), 3, 2, color='lightgoldenrodyellow')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((1, 46), 3, 5, color='lightgoldenrodyellow')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((4, 48), 3, 3, color='lightyellow')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((7, 49), 3, 2, color='lightgoldenrodyellow')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((1, 46), 3, 5, color='lightgoldenrodyellow')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((4, 48), 3, 3, color='lightyellow')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((7, 49), 3, 2, color='lightgoldenrodyellow')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((1, 46), 3, 5, color='lightgoldenrodyellow')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((4, 48), 3, 3, color='lightyellow')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((7, 49), 3, 2, color='lightgoldenrodyellow')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((1, 46), 3, 5, color='lightgoldenrodyellow')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((4, 48), 3, 3, color='lightyellow')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((7, 49), 3, 2, color='lightgoldenrodyellow')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((1, 46), 3, 5, color='lightgoldenrodyellow')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((4, 48), 3, 3, color='lightyellow')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((7, 49), 3, 2, color='lightgoldenrodyellow')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((1, 46), 3, 5, color='lightgoldenrodyellow')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((4, 48), 3, 3, color='lightyellow')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((7, 49), 3, 2, color='lightgoldenrodyellow')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((1, 46), 3, 5, color='lightgoldenrodyellow')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((4, 48), 3, 3, color='lightyellow')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((7, 49), 3, 2, color='lightgoldenrodyellow')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((1, 46), 3, 5, color='lightgoldenrodyellow')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((4, 48), 3, 3, color='lightyellow')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((7, 49), 3, 2, color='lightgoldenrodyellow')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((1, 46), 3, 5, color='lightgoldenrodyellow')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((4, 48), 3, 3, color='lightyellow')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((7, 49), 3, 2, color='lightgoldenrodyellow')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((1, 46), 3, 5, color='lightgoldenrodyellow')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((4, 48), 3, 3, color='lightyellow')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((7, 49), 3, 2, color='lightgoldenrodyellow')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((1, 46), 3, 5, color='lightgoldenrodyellow')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((4, 48), 3, 3, color='lightyellow')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((7, 49), 3, 2, color='lightgoldenrodyellow')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((1, 46), 3, 5, color='lightgoldenrodyellow')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((4, 48), 3, 3, color='lightyellow')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((7, 49), 3, 2, color='lightgoldenrodyellow')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((1, 46), 3, 5, color='lightgoldenrodyellow')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((4, 48), 3, 3, color='lightyellow')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((7, 49), 3, 2, color='lightgoldenrodyellow')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((1, 46), 3, 5, color='lightgoldenrodyellow')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((4, 48), 3, 3, color='lightyellow')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((7, 49), 3, 2, color='lightgoldenrodyellow')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((1, 46), 3, 5, color='lightgoldenrodyellow')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((4, 48), 3, 3, color='lightyellow')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((7, 49), 3, 2, color='lightgoldenrodyellow')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((1, 46), 3, 5, color='lightgoldenrodyellow')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((4, 48), 3, 3, color='lightyellow')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((7, 49), 3, 2, color='lightgoldenrodyellow')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((1, 46), 3, 5, color='lightgoldenrodyellow')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((4, 48), 3, 3, color='lightyellow')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((7, 49), 3, 2, color='lightgoldenrodyellow')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((1, 46), 3, 5, color='lightgoldenrodyellow')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((4, 48), 3, 3, color='lightyellow')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((7, 49), 3, 2, color='lightgoldenrodyellow')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((1, 46), 3, 5, color='lightgoldenrodyellow')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((4, 48), 3, 3, color='lightyellow')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((7, 49), 3, 2, color='lightgoldenrodyellow')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((1, 46), 3, 5, color='lightgoldenrodyellow')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((4, 48), 3, 3, color='lightyellow')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((7, 49), 3, 2, color='lightgoldenrodyellow')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((1, 46), 3, 5, color='lightgoldenrodyellow')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((4, 48), 3, 3, color='lightyellow')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((7, 49), 3, 2, color='lightgoldenrodyellow')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((1, 46), 3, 5, color='lightgoldenrodyellow')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((4, 48), 3, 3, color='lightyellow')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((7, 49), 3, 2, color='lightgoldenrodyellow')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((1, 46), 3, 5, color='lightgoldenrodyellow')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((4, 48), 3, 3, color='lightyellow')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((7, 49), 3, 2, color='lightgoldenrodyellow')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((1, 46), 3, 5, color='lightgoldenrodyellow')\nax.add_patch(rectangle)\n\n# Draw a rectangle\n"}
{"file": "dataset/ori_500/CB_17.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the first chart\nmethods = ['CodeBERT', 'ChatGPT-3.5', 'ChatGPT-4.0', 'CodeAgent']\nscores = [63.64, 80.08, 84.27, 90.11]\n\n# Data for the second chart\nf1_methods = ['CodeBERT', 'ChatGPT-3.5', 'ChatGPT-4.0', 'CodeAgent']\nf1_scores = [75.00, 87.20, 88.12, 93.89]\n\n# Create the figure and axis objects\nfig, ax = plt.subplots(1, 2, figsize=(10, 4))\n\n# Plot the first chart\nax[0].bar(methods, scores, color='skyblue')\nax[0].set_title('Average Recall Scores by Method')\nax[0].set_xlabel('Method')\nax[0].set_ylabel('Scores')\n\n# Plot the second chart\nax[1].bar(f1_methods, f1_scores, color='lightblue')\nax[1].plot(f1_methods, f1_scores, color='red', marker='o')\nax[1].set_title('Average F1 Scores by Method')\nax[1].set_xlabel('Method')\nax[1].set_ylabel('Scores')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_18.pdf", "response": "import matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Set the x-axis limits\nax.set_xlim(4, 32)\n\n# Set the y-axis limits\nax.set_ylim(80, 96)\n\n# Set the x-axis tick labels\nax.set_xticks([4, 8, 12, 16, 20, 24, 28, 32])\n\n# Set the y-axis tick labels\nax.set_yticks(range(80, 97, 2))\n\n# Draw a rectangle with a gradient fill\ngradient = plt.Rectangle((0, 0), 1, 1, fc='lightblue', alpha=0.5)\nax.add_patch(gradient)\n\n# Draw a vertical line\nax.plot([4, 4], [80, 96], 'r-')\n\n# Draw a horizontal line\nax.plot([4, 32], [80, 80], 'b-')\n\n# Draw a circle\ncircle = plt.Circle((4, 80), 0.5, color='red')\nax.add_artist(circle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((4, 80), 1, 1, fc='blue')\nax.add_patch(rectangle)\n\n# Set the title of the plot\nax.set_title('Micro F1')\n\n# Set the x-axis label\nax.set_xlabel('Few-Shot K')\n\n# Set the y-axis label\nax.set_ylabel('Micro F1')\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/CB_19.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nx = [60, 62, 65, 70, 75]\ny = [60, 62, 65, 70, 75]\nlabels = ['Car A', 'Car B', 'Car C', 'Car D', 'Car E']\ncolors = ['red', 'blue']\n\n# Plot\nfig, ax = plt.subplots(figsize=(7, 7))\nax.plot(x, y, 'ro-')\nfor i, label in enumerate(labels):\n    ax.annotate(label, (x[i], y[i]), textcoords=\"offset points\", xytext=(0,10), ha='center')\n\n# Legend\nlegend_elements = [plt.Line2D([0], [0], marker='o', color='w', label=label, markerfacecolor=color, markersize=10)\n                  for label, color in zip(['Cars', 'Trucks'], colors)]\nax.legend(handles=legend_elements)\n\n# Title and labels\nax.set_title('80 Truck A')\nax.set_xlabel('Vehicle Parameter Size (units)')\nax.set_ylabel('Efficiency (%)')\n\n# Display plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nmodels = ['GPT-2', 'Llama 2 7B', 'Llama 2 70B', 'Mixtral 8x7B', 'GPT-3.5', 'GPT-4']\nsuccess_rates = [0, 6, 16, 20, 26, 56]\ntrend = [0, 0, 0, 0, 0, 0]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Plot the success rates\nax.bar(models, success_rates, color='lightgrey')\n\n# Plot the trend line\nax.plot(models, trend, color='purple', linestyle='--')\n\n# Set the title and labels\nax.set_title('Encoding/Decoding Schelling Points by Model')\nax.set_xlabel('Model')\nax.set_ylabel('Success Rate (%)')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_20.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Calibration Curve')\n\n# Set the x-axis label\nax.set_xlabel('Reducted Probability')\n\n# Set the y-axis label\nax.set_ylabel('Fraction of Positives')\n\n# Set the x-axis limits\nax.set_xlim(0, 1)\n\n# Set the y-axis limits\nax.set_ylim(0, 1)\n\n# Draw a horizontal line\nax.axhline(y=0.5, color='r', linestyle='-')\n\n# Draw a vertical line\nax.axvline(x=0.5, color='b', linestyle='-')\n\n# Draw a diagonal line\nax.plot([0, 1], [0, 1], 'k-')\n\n# Draw a circle\ncircle = plt.Circle((0.5, 0.5), 0.1, color='r')\nax.add_artist(circle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.2, 0.2), 0.3, 0.3, color='g')\nax.add_artist(rectangle)\n\n# Draw a triangle\ntriangle = plt.Polygon([[0.4, 0.4], [0.6, 0.2], [0.8, 0.4]], color='b')\nax.add_artist(triangle)\n\n# Draw a star\nstar = plt.Polygon([[0.3, 0.3], [0.4, 0.5], [0.5, 0.3], [0.6, 0.5], [0.7, 0.3]], color='y')\nax.add_artist(star)\n\n# Draw a pentagon\npentagon = plt.Polygon([[0.2, 0.6], [0.3, 0.7], [0.4, 0.6], [0.3, 0.5], [0.2, 0.6]], color='m')\nax.add_artist(pentagon)\n\n# Draw a hexagon\nhexagon = plt.Polygon([[0.6, 0.6], [0.7, 0.7], [0.8, 0.6], [0.7, 0.5], [0.6, 0.6]], color='c')\nax.add_artist(hexagon)\n\n# Draw a heptagon\nheptagon = plt.Polygon([[0.4, 0.8], [0.5, 0.9], [0.6, 0.8], [0.5, 0.7], [0.4, 0.8]], color='k')\nax.add_artist(heptagon)\n\n# Draw an octagon\noctagon = plt.Polygon([[0.2, 0.8], [0.3, 0.9], [0.4, 0.8], [0.3, 0.7], [0.2, 0.8]], color='w')\nax.add_artist(octagon)\n\n# Draw a nonagon\nnonagon = plt.Polygon([[0.6, 0.8], [0.7, 0.9], [0.8, 0.8], [0.7, 0.7], [0.6, 0.8]], color='orange')\nax.add_artist(nonagon)\n\n# Draw a decagon\ndecagon = plt.Polygon([[0.4, 0.9], [0.5, 1.0], [0.6, 0.9], [0.5, 0.8], [0.4, 0.9]], color='purple')\nax.add_artist(decagon)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_21.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 4.0))\n\n# Set the background color of the plot\nax.set_facecolor('lightblue')\n\n# Create a rectangle for the model\nmodel_rect = plt.Rectangle((-5, -1), 10, 2, color='blue')\nax.add_patch(model_rect)\n\n# Create a rectangle for the FOD-Net model\nfodnet_rect = plt.Rectangle((-3, -1), 6, 2, color='orange')\nax.add_patch(fodnet_rect)\n\n# Create a rectangle for the SS3T model\nss3t_rect = plt.Rectangle((-1, -1), 4, 2, color='green')\nax.add_patch(ss3t_rect)\n\n# Create a rectangle for the ACC\nacc_rect = plt.Rectangle((-3, -3), 6, 2, color='brown')\nax.add_patch(acc_rect)\n\n# Create a rectangle for the model\nmodel_rect = plt.Rectangle((-5, -5), 10, 2, color='blue')\nax.add_patch(model_rect)\n\n# Create a rectangle for the FOD-Net model\nfodnet_rect = plt.Rectangle((-3, -5), 6, 2, color='orange')\nax.add_patch(fodnet_rect)\n\n# Create a rectangle for the SS3T model\nss3t_rect = plt.Rectangle((-1, -5), 4, 2, color='green')\nax.add_patch(ss3t_rect)\n\n# Create a rectangle for the ACC\nacc_rect = plt.Rectangle((-3, -7), 6, 2, color='brown')\nax.add_patch(acc_rect)\n\n# Set the limits of the x-axis\nax.set_xlim(-6, 6)\n\n# Set the limits of the y-axis\nax.set_ylim(-8, 2)\n\n# Set the title of the plot\nax.set_title('Model')\n\n# Set the labels of the axes\nax.set_xlabel('ACC')\nax.set_ylabel('Model')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_22.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the plots\nx = np.arange(1340, 1461)\ny = np.random.rand(len(x)) * 0.025\nz = np.random.rand(len(x)) * 0.025\na = np.random.rand(len(x)) * 0.025\nb = np.random.rand(len(x)) * 0.025\nc = np.random.rand(len(x)) * 0.025\nd = np.random.rand(len(x)) * 0.025\ne = np.random.rand(len(x)) * 0.025\nf = np.random.rand(len(x)) * 0.025\ng = np.random.rand(len(x)) * 0.025\nh = np.random.rand(len(x)) * 0.025\ni = np.random.rand(len(x)) * 0.025\nj = np.random.rand(len(x)) * 0.025\nk = np.random.rand(len(x)) * 0.025\nl = np.random.rand(len(x)) * 0.025\nm = np.random.rand(len(x)) * 0.025\nn = np.random.rand(len(x)) * 0.025\no = np.random.rand(len(x)) * 0.025\np = np.random.rand(len(x)) * 0.025\nq = np.random.rand(len(x)) * 0.025\nr = np.random.rand(len(x)) * 0.025\ns = np.random.rand(len(x)) * 0.025\nt = np.random.rand(len(x)) * 0.025\nu = np.random.rand(len(x)) * 0.025\nv = np.random.rand(len(x)) * 0.025\nw = np.random.rand(len(x)) * 0.025\nx1 = np.random.rand(len(x)) * 0.025\ny1 = np.random.rand(len(x)) * 0.025\nz1 = np.random.rand(len(x)) * 0.025\na1 = np.random.rand(len(x)) * 0.025\nb1 = np.random.rand(len(x)) * 0.025\nc1 = np.random.rand(len(x)) * 0.025\nd1 = np.random.rand(len(x)) * 0.025\ne1 = np.random.rand(len(x)) * 0.025\nf1 = np.random.rand(len(x)) * 0.025\ng1 = np.random.rand(len(x)) * 0.025\nh1 = np.random.rand(len(x)) * 0.025\ni1 = np.random.rand(len(x)) * 0.025\nj1 = np.random.rand(len(x)) * 0.025\nk1 = np.random.rand(len(x)) * 0.025\nl1 = np.random.rand(len(x)) * 0.025\nm1 = np.random.rand(len(x)) * 0.025\nn1 = np.random.rand(len(x)) * 0.025\no1 = np.random.rand(len(x)) * 0.025\np1 = np.random.rand(len(x)) * 0.025\nq1 = np.random.rand(len(x)) * 0.025\nr1 = np.random.rand(len(x)) * 0.025\ns1 = np.random.rand(len(x)) * 0.025\nt1 = np.random.rand(len(x)) * 0.025\nu1 = np.random.rand(len(x)) * 0.025\nv1 = np.random.rand(len(x)) * 0.025\nw1 = np.random.rand(len(x)) * 0.025\n\n# Plotting\nfig, axes = plt.subplots(2, 2, figsize=(10.0, 8.0))\naxes[0, 0].bar(x, y, color='blue')\naxes[0, 0].set_title('Total')\naxes[0, 0].set_xlabel('Daily reward (Ether)')\naxes[0, 0].set_ylabel('Probability')\n\naxes[0, 1].bar(x, z, color='red')\naxes[0, 1].set_title('Proposer')\naxes[0, 1].set_xlabel('Daily reward (Ether)')\naxes[0, 1].set_ylabel('Probability')\n\naxes[1, 0].bar(x, a, color='green')\naxes[1, 0].set_title('Attestor')\naxes[1, 0].set_xlabel('Daily reward (Ether)')\naxes[1, 0].set_ylabel('Probability')\n\naxes[1, 1].bar(x, b, color='yellow')\naxes[1, 1].set_title('Sync committee member')\naxes[1, 1].set_xlabel('Daily reward (Ether)')\naxes[1, 1].set_ylabel('Probability')\n\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_23.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data points\nx = [0, 50, 100, 150]\ny = [1.30, 1.27, 1.28, 1.29]\n\n# Create a scatter plot\nplt.scatter(x, y, color='red')\n\n# Set the title and labels\nplt.title('LlaSMol')\nplt.xlabel('Trainable Parameter Size (M)')\nplt.ylabel('RMSE')\n\n# Set the limits of the x-axis\nplt.xlim(0, 150)\n\n# Set the limits of the y-axis\nplt.ylim(1.15, 1.30)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_24.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Execution Duration (clock)')\n\n# Set the x-axis label\nax.set_xlabel('Execution Duration (clock)')\n\n# Set the y-axis label\nax.set_ylabel('Distribution')\n\n# Set the x-axis limits\nax.set_xlim(40, 160)\n\n# Set the y-axis limits\nax.set_ylim(0, 0.1)\n\n# Set the x-axis ticks\nax.set_xticks([40, 60, 80, 100, 120, 140, 160])\n\n# Set the y-axis ticks\nax.set_yticks([0, 0.05, 0.1])\n\n# Set the x-axis tick labels\nax.set_xticklabels(['40', '60', '80', '100', '120', '140', '160'])\n\n# Set the y-axis tick labels\nax.set_yticklabels(['0', '0.05', '0.1'])\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('blue')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='blue', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the title\nax.title.set_color('blue')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('blue')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('blue')\n\n# Set the color of the x-axis ticks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis ticks\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['40', '60', '80', '100', '120', '140', '160'], color='blue')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0', '0.05', '0.1'], color='blue')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('blue')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='blue', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the title\nax.title.set_color('blue')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('blue')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('blue')\n\n# Set the color of the x-axis ticks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis ticks\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['40', '60', '80', '100', '120', '140', '160'], color='blue')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0', '0.05', '0.1'], color='blue')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('blue')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='blue', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the title\nax.title.set_color('blue')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('blue')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('blue')\n\n# Set the color of the x-axis ticks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis ticks\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['40', '60', '80', '100', '120', '140', '160'], color='blue')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0', '0.05', '0.1'], color='blue')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('blue')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='blue', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the title\nax.title.set_color('blue')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('blue')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('blue')\n\n# Set the color of the x-axis ticks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis ticks\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['40', '60', '80', '100', '120', '140', '160'], color='blue')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0', '0.05', '0.1'], color='blue')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('blue')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='blue', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the title\nax.title.set_color('blue')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('blue')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('blue')\n\n# Set the color of the x-axis ticks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis ticks\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['40', '60', '80', '100', '120', '140', '160'], color='blue')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0', '0.05', '0.1'], color='blue')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('blue')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='blue', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the title\nax.title.set_color('blue')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('blue')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('blue')\n\n# Set the color of the x-axis ticks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis ticks\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['40', '60', '80', '100', '120', '140', '160'], color='blue')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0', '0.05', '0.1'], color='blue')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('blue')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='blue', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the title\nax.title.set_color('blue')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('blue')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('blue')\n\n# Set the color of the x-axis ticks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis ticks\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['40', '60', '80', '100', '120', '140', '160'], color='blue')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0', '0.05', '0.1'], color='blue')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('blue')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='blue', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the title\nax.title.set_color('blue')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('blue')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('blue')\n\n# Set the color of the x-axis ticks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis ticks\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['40', '60', '80', '100', '120', '140', '160'], color='blue')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0', '0.05', '0.1'], color='blue')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('blue')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='blue', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the title\nax.title.set_color('blue')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('blue')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('blue')\n\n# Set the color of the x-axis ticks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis ticks\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['40', '60', '80', '100', '120', '140', '160'], color='blue')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0', '0.05', '0.1'], color='blue')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('blue')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='blue', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the title\nax.title.set_color('blue')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('blue')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('blue')\n\n# Set the color of the x-axis ticks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis ticks\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['40', '60', '80', '100', '120', '140', '160'], color='blue')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0', '0.05', '0.1'], color='blue')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('blue')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='blue', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the title\nax.title.set_color('blue')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('blue')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('blue')\n\n# Set the color of the x-axis ticks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis ticks\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['40', '60', '80', '100', '120', '140', '160'], color='blue')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0', '0.05', '0.1'], color='blue')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('blue')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='blue', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the title\nax.title.set_color('blue')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('blue')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('blue')\n\n# Set the color of the x-axis ticks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis ticks\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['40', '60', '80', '100', '120', '140', '160'], color='blue')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0', '0.05', '0.1'], color='blue')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('blue')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='blue', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the title\nax.title.set_color('blue')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('blue')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('blue')\n\n# Set the color of the x-axis ticks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis ticks\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['40', '60', '80', '100', '120"}
{"file": "dataset/ori_500/CB_25.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nx = ['15x15', '20x15', '20x20', '30x20', '40x20', '50x20', '60x20']\ny = [18, 14, 13, 12, 12, 9, 0]\ncolors = ['green', 'orange', 'blue', 'purple', 'pink']\n\n# Plot\nfig, ax1 = plt.subplots(figsize=(8.0, 5.0))\nax1.plot(x, y, 'r-')\nax1.set_xlabel('Instance size')\nax1.set_ylabel('Makespan (step)', color='red')\nax1.tick_params(axis='y', labelcolor='red')\n\nax2 = ax1.twinx()\nax2.bar(x, [5000, 4000, 3000, 2000, 1000, 500, 0], color=colors)\nax2.set_ylabel('Improvement (%)', color='blue')\nax2.tick_params(axis='y', labelcolor='blue')\n\nfig.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_26.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(7, 5))\n\n# Set the background color of the plot\nax.set_facecolor('lightblue')\n\n# Set the title of the plot\nax.set_title('Time Cost vs Algorithms')\n\n# Set the x-axis label\nax.set_xlabel('Algorithms')\n\n# Set the y-axis label\nax.set_ylabel('Time Cost (Seconds)')\n\n# Set the x-axis limits\nax.set_xlim(-1, 4)\n\n# Set the y-axis limits\nax.set_ylim(0, 4)\n\n# Add a rectangle to the plot\nrectangle = plt.Rectangle((0.5, 0.5), 1, 1, color='green')\nax.add_patch(rectangle)\n\n# Add a circle to the plot\ncircle = plt.Circle((2, 2), 0.5, color='red')\nax.add_artist(circle)\n\n# Add a line to the plot\nline = plt.Line2D([0, 1], [0, 1], color='black')\nax.add_line(line)\n\n# Add a scatter plot to the plot\nscatter = plt.scatter([0.5, 1.5, 2.5], [0.5, 1.5, 2.5], color='blue')\nax.add_collection(scatter)\n\n# Add a bar chart to the plot\nbar = plt.bar([0.5, 1.5, 2.5], [0.5, 1.5, 2.5], color='orange')\nax.add_collection(bar)\n\n# Add a histogram to the plot\nhist = plt.hist([0.5, 1.5, 2.5], bins=3, color='purple')\nax.add_collection(hist)\n\n# Add a pie chart to the plot\npie = plt.pie([0.5, 1.5, 2.5], colors=['green', 'red', 'blue'])\nax.add_collection(pie)\n\n# Add a text box to the plot\ntext_box = plt.text(0.5, 0.5, 'SEAC', color='green')\nax.add_artist(text_box)\n\n# Add a text box to the plot\ntext_box = plt.text(2, 2, 'CTCO', color='red')\nax.add_artist(text_box)\n\n# Add a text box to the plot\ntext_box = plt.text(1.5, 1.5, 'Algorithm 1', color='blue')\nax.add_artist(text_box)\n\n# Add a text box to the plot\ntext_box = plt.text(1.5, 1.5, 'Algorithm 2', color='orange')\nax.add_artist(text_box)\n\n# Add a text box to the plot\ntext_box = plt.text(1.5, 1.5, 'Algorithm 3', color='purple')\nax.add_artist(text_box)\n\n# Add a text box to the plot\ntext_box = plt.text(1.5, 1.5, 'Algorithm 4', color='green')\nax.add_artist(text_box)\n\n# Add a text box to the plot\ntext_box = plt.text(1.5, 1.5, 'Algorithm 5', color='red')\nax.add_artist(text_box)\n\n# Add a text box to the plot\ntext_box = plt.text(1.5, 1.5, 'Algorithm 6', color='blue')\nax.add_artist(text_box)\n\n# Add a text box to the plot\ntext_box = plt.text(1.5, 1.5, 'Algorithm 7', color='orange')\nax.add_artist(text_box)\n\n# Add a text box to the plot\ntext_box = plt.text(1.5, 1.5, 'Algorithm 8', color='purple')\nax.add_artist(text_box)\n\n# Add a text box to the plot\ntext_box = plt.text(1.5, 1.5, 'Algorithm 9', color='green')\nax.add_artist(text_box)\n\n# Add a text box to the plot\ntext_box = plt.text(1.5, 1.5, 'Algorithm 10', color='red')\nax.add_artist(text_box)\n\n# Add a text box to the plot\ntext_box = plt.text(1.5, 1.5, 'Algorithm 11', color='blue')\nax.add_artist(text_box)\n\n# Add a text box to the plot\ntext_box = plt.text(1.5, 1.5, 'Algorithm 12', color='orange')\nax.add_artist(text_box)\n\n# Add a text box to the plot\ntext_box = plt.text(1.5, 1.5, 'Algorithm 13', color='purple')\nax.add_artist(text_box)\n\n# Add a text box to the plot\ntext_box = plt.text(1.5, 1.5, 'Algorithm 14', color='green')\nax.add_artist(text_box)\n\n# Add a text box to the plot\ntext_box = plt.text(1.5, 1.5, 'Algorithm 15', color='red')\nax.add_artist(text_box)\n\n# Add a text box to the plot\ntext_box = plt.text(1.5, 1.5, 'Algorithm 16', color='blue')\nax.add_artist(text_box)\n\n# Add a text box to the plot\ntext_box = plt.text(1.5, 1.5, 'Algorithm 17', color='orange')\nax.add_artist(text_box)\n\n# Add a text box to the plot\ntext_box = plt.text(1.5, 1.5, 'Algorithm 18', color='purple')\nax.add_artist(text_box)\n\n# Add a text box to the plot\ntext_box = plt.text(1.5, 1.5, 'Algorithm 19', color='green')\nax.add_artist(text_box)\n\n# Add a text box to the plot\ntext_box = plt.text(1.5, 1.5, 'Algorithm 20', color='red')\nax.add_artist(text_box)\n\n# Add a text box to the plot\ntext_box = plt.text(1.5, 1.5, 'Algorithm 21', color='blue')\nax.add_artist(text_box)\n\n# Add a text box to the plot\ntext_box = plt.text(1.5, 1.5, 'Algorithm 22', color='orange')\nax.add_artist(text_box)\n\n# Add a text box to the plot\ntext_box = plt.text(1.5, 1.5, 'Algorithm 23', color='purple')\nax.add_artist(text_box)\n\n# Add a text box to the plot\ntext_box = plt.text(1.5, 1.5, 'Algorithm 24', color='green')\nax.add_artist(text_box)\n\n# Add a text box to the plot\ntext_box = plt.text(1.5, 1.5, 'Algorithm 25', color='red')\nax.add_artist(text_box)\n\n# Add a text box to the plot\ntext_box = plt.text(1.5, 1.5, 'Algorithm 26', color='blue')\nax.add_artist(text_box)\n\n# Add a text box to the plot\ntext_box = plt.text(1.5, 1.5, 'Algorithm 27', color='orange')\nax.add_artist(text_box)\n\n# Add a text box to the plot\ntext_box = plt.text(1.5, 1.5, 'Algorithm 28', color='purple')\nax.add_artist(text_box)\n\n# Add a text box to the plot\ntext_box = plt.text(1.5, 1.5, 'Algorithm 29', color='green')\nax.add_artist(text_box)\n\n# Add a text box to the plot\ntext_box = plt.text(1.5, 1.5, 'Algorithm 30', color='red')\nax.add_artist(text_box)\n\n# Add a text box to the plot\ntext_box = plt.text(1.5, 1.5, 'Algorithm 31', color='blue')\nax.add_artist(text_box)\n\n# Add a text box to the plot\ntext_box = plt.text(1.5, 1.5, 'Algorithm 32', color='orange')\nax.add_artist(text_box)\n\n# Add a text box to the plot\ntext_box = plt.text(1.5, 1.5, 'Algorithm 33', color='purple')\nax.add_artist(text_box)\n\n# Add a text box to the plot\ntext_box = plt.text(1.5, 1.5, 'Algorithm 34', color='green')\nax.add_artist(text_box)\n\n# Add a text box to the plot\ntext_box = plt.text(1.5, 1.5, 'Algorithm 35', color='red')\nax.add_artist(text_box)\n\n# Add a text box to the plot\ntext_box = plt.text(1.5, 1.5, 'Algorithm 36', color='blue')\nax.add_artist(text_box)\n\n# Add a text box to the plot\ntext_box = plt.text(1.5, 1.5, 'Algorithm 37', color='orange')\nax.add_artist(text_box)\n\n# Add a text box to the plot\ntext_box = plt.text(1.5, 1.5, 'Algorithm 38', color='purple')\nax.add_artist(text_box)\n\n# Add a text box to the plot\ntext_box = plt.text(1.5, 1.5, 'Algorithm 39', color='green')\nax.add_artist(text_box)\n\n# Add a text box to the plot\ntext_box = plt.text(1.5, 1.5, 'Algorithm 40', color='red')\nax.add_artist(text_box)\n\n# Add a text box to the plot\ntext_box = plt.text(1.5, 1.5, 'Algorithm 41', color='blue')\nax.add_artist(text_box)\n\n# Add a text box to the plot\ntext_box = plt.text(1.5, 1.5, 'Algorithm 42', color='orange')\nax.add_artist(text_box)\n\n# Add a text box to the plot\ntext_box = plt.text(1.5, 1.5, 'Algorithm 43', color='purple')\nax.add_artist(text_box)\n\n# Add a text box to the plot\ntext_box = plt.text(1.5, 1.5, 'Algorithm 44', color='green')\nax.add_artist(text_box)\n\n# Add a text box to the plot\ntext_box = plt.text(1.5, 1.5, 'Algorithm 45', color='red')\nax.add_artist(text_box)\n\n# Add a text box to the plot\ntext_box = plt.text(1.5, 1.5, 'Algorithm 46', color='blue')\nax.add_artist(text_box)\n\n# Add a text box to the plot\ntext_box = plt.text(1.5, 1.5, 'Algorithm 47', color='orange')\nax.add_artist(text_box)\n\n# Add a text box to the plot\ntext_box = plt.text(1.5, 1.5, 'Algorithm 48', color='purple')\nax.add_artist(text_box)\n\n# Add a text box to the plot\ntext_box = plt.text(1.5, 1.5, 'Algorithm 49', color='green')\nax.add_artist(text_box)\n\n# Add a text box to the plot\ntext_box = plt.text(1.5, 1.5, 'Algorithm 50', color='red')\nax.add_artist(text_box)\n\n# Add a text box to the plot\ntext_box = plt.text(1.5, 1.5, 'Algorithm 51', color='blue')\nax.add_artist(text_box)\n\n# Add a text box to the plot\ntext_box = plt.text(1.5, 1.5, 'Algorithm 52', color='orange')\nax.add_artist(text_box)\n\n# Add a text box to the plot\ntext_box = plt.text(1.5, 1.5, 'Algorithm 53', color='purple')\nax.add_artist(text_box)\n\n# Add a text box to the plot\ntext_box = plt.text(1.5, 1.5, 'Algorithm 54', color='green')\nax.add_artist(text_box)\n\n# Add a text box to the plot\ntext_box = plt.text(1.5, 1.5, 'Algorithm 55', color='red')\nax.add_artist(text_box)\n\n# Add a text box to the plot\ntext_box = plt.text(1.5, 1.5, 'Algorithm 56', color='blue')\nax.add_artist(text_box)\n\n# Add a text box to the plot\ntext_box = plt.text(1.5, 1.5, 'Algorithm 57', color='orange')\nax.add_artist(text_box)\n\n# Add a text box to the plot\ntext_box = plt.text(1.5, 1.5, 'Algorithm 58', color='purple')\nax.add_artist(text_box)\n\n# Add a text box to the plot\ntext_box = plt.text(1.5, 1.5, 'Algorithm 59', color='green')\nax.add_artist(text_box)\n\n# Add a text box to the plot\ntext_box = plt.text(1.5, 1.5, 'Algorithm 60', color='red')\nax.add_artist(text_box)\n\n# Add a text box to the plot\ntext_box = plt.text(1.5, 1.5, 'Algorithm 61', color='blue')\nax.add_artist(text_box)\n\n# Add a text box to the plot\ntext_box = plt.text(1.5, 1.5, 'Algorithm 62', color='orange')\nax.add_artist(text_box)\n\n# Add a text box to the plot\ntext_box = plt.text(1.5, 1.5, 'Algorithm 63', color='purple')\nax.add_artist(text_box)\n\n# Add a text box to the plot\ntext_box = plt.text(1.5, 1.5, 'Algorithm 64', color='green')\nax.add_artist(text_box)\n\n# Add a text box to the plot\ntext_box = plt.text(1.5, 1.5, 'Algorithm 65', color='red')\nax.add_artist(text_box)\n\n# Add a text box to the plot\ntext_box = plt.text(1.5, 1.5, 'Algorithm 66', color='blue')\nax.add_artist(text_box)\n\n# Add a text box to the plot\ntext_box = plt.text(1.5, 1.5, 'Algorithm 67', color='orange')\nax.add_artist(text_box)\n\n# Add a text box to the plot\ntext_box = plt.text(1.5, 1.5, 'Algorithm 68', color='purple')\nax.add_artist(text_box)\n\n# Add a text box to the plot\ntext_box = plt.text(1.5, 1.5, 'Algorithm 69', color='green')\nax.add_artist(text_box)\n\n# Add a text box to the plot\ntext_box = plt.text(1.5, 1.5, 'Algorithm 70', color='red')\nax.add_artist(text_box)\n\n# Add a text box to the plot\ntext_box = plt.text(1.5, 1.5, 'Algorithm 71', color='blue')\nax.add_artist(text_box)\n\n# Add a text box to the plot\ntext_box = plt.text(1.5, 1.5, 'Algorithm 72', color='orange')\nax.add_artist(text_box)\n\n# Add a text box to the plot\ntext_box = plt.text(1.5, 1.5, 'Algorithm 73', color='purple')\nax.add_artist(text_box)\n\n# Add a text box to the plot\ntext_box = plt.text(1.5, 1.5, 'Algorithm 74', color='green')\nax.add_artist(text_box)\n\n# Add a text box to the plot\ntext_box = plt.text(1.5, 1.5, 'Algorithm 75', color='red')\nax.add_artist(text_box)\n\n# Add a text box to the plot\ntext_box = plt.text(1.5, 1.5, 'Algorithm 76', color='blue')\nax.add_artist(text_box)\n\n# Add a text box to the plot\ntext_box = plt.text(1.5, 1.5, 'Algorithm 77', color='orange')\nax.add_artist(text_box)\n\n# Add a text box to the plot\ntext_box = plt.text(1.5, 1.5, 'Algorithm 78', color='purple')\nax.add_artist(text_box)\n\n# Add a text box to the plot\ntext_box = plt.text(1.5, 1.5, 'Algorithm 79', color='green')\nax.add_artist(text_box)\n\n# Add a text box to the plot\ntext_box = plt.text(1.5, 1.5, 'Algorithm 80', color='red')\nax.add_artist(text_box)\n\n# Add a text box to the plot\ntext_box = plt.text(1.5, 1.5, 'Algorithm 81', color='blue')\nax.add_artist(text_box)\n\n# Add a text box to the plot\ntext_box = plt.text(1.5, 1.5, 'Algorithm 82', color='orange')\nax.add_artist(text_box)\n\n# Add a text box to the plot\ntext_box = plt.text(1.5, 1.5, 'Algorithm 83', color='purple')\nax.add_artist(text_box)\n\n# Add a text box to the plot\ntext_box = plt.text(1.5, 1.5, 'Algorithm 84', color='green')\nax.add_artist(text_box)\n\n# Add a text box to the plot\ntext_box = plt.text(1.5, 1.5, 'Algorithm 85', color='red')\nax.add_artist(text_box)\n\n# Add a text box to the plot\ntext_box = plt.text(1.5, 1.5, 'Algorithm 86', color='blue')\nax.add_artist(text_box)\n\n# Add a text box to the plot\ntext_box = plt.text(1.5, 1.5, 'Algorithm 87', color='orange')\nax.add_artist(text_box)\n\n# Add a text box to the plot\ntext_box = plt.text(1.5, 1.5, 'Algorithm 88', color='purple')\nax.add_artist(text_box)\n\n# Add a text box to the plot\ntext_box = plt.text(1.5, 1.5, 'Algorithm 89', color='green')\nax.add_artist(text_box)\n\n# Add a text box to the plot\ntext_box = plt.text(1.5, 1.5, 'Algorithm 90', color='red')\nax.add_artist(text_box)\n\n# Add a text box to the plot\ntext_box ="}
{"file": "dataset/ori_500/CB_27.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Time to Market')\n\n# Set the x-axis label\nax.set_xlabel('Brand')\n\n# Set the y-axis label\nax.set_ylabel('Time to Market (Days)')\n\n# Define the data for the plot\nbrands = ['Adidas', 'Nike', 'New Balance', 'Our Brand']\ntime_to_market = [85, 95, 75, 65]\n\n# Plot the data\nax.plot(brands, time_to_market, marker='o')\n\n# Add a legend\nax.legend(['Median Time to Market'])\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_28.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Set the background color of the plot\nax.set_facecolor('lightblue')\n\n# Set the title of the plot\nax.set_title('Era')\n\n# Set the x-axis label\nax.set_xlabel('Density')\n\n# Set the y-axis label\nax.set_ylabel('Year')\n\n# Define the data for the plot\ndata = [0.005, 0.015, 0.025, 0.035]\ncolors = ['blue', 'orange', 'green', 'brown']\neras = ['Early 20th Century', 'Mid 20th Century', 'Turn of the Century']\n\n# Plot the data\nfor i in range(len(data)):\n    ax.plot([i], [data[i]], 'o', color=colors[i])\n\n# Add a legend\nax.legend(eras)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_29.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the bar chart\ntech = ['Nano', 'Quantum', 'Cybersecurity', 'VR', 'Biotech', 'Robotics', 'IoT', 'Cloud Computing', 'Blockchain', 'AI']\npatents_2013 = [20, 10, 40, 30, 60, 70, 90, 50, 80, 120]\npatents_2022 = [90, 50, 150, 100, 180, 250, 300, 200, 400, 500]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Plot the bar chart\nax.bar(tech, patents_2013, color='blue')\nax.bar(tech, patents_2022, color='red')\n\n# Add labels and title\nax.set_xlabel('Technology')\nax.set_ylabel('Number of Patents')\nax.set_title('Patent Filings in 2013')\n\n# Rotate x-axis labels for better visibility\nplt.xticks(rotation=45)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Set the background color of the plot\nax.set_facecolor('lightgrey')\n\n# Set the title of the plot\nax.set_title('Calibration Curve', fontsize=14)\n\n# Set the x-axis label\nax.set_xlabel('Predicted Probability', fontsize=12)\n\n# Set the y-axis label\nax.set_ylabel('Fraction of Positives', fontsize=12)\n\n# Set the tick labels for the x-axis\nax.set_xticks([0, 0.25, 0.5, 0.75, 1])\nax.set_xticklabels(['0.00', '0.25', '0.50', '0.75', '1.00'])\n\n# Set the tick labels for the y-axis\nax.set_yticks([0, 0.25, 0.5, 0.75, 1])\nax.set_yticklabels(['0.00', '0.25', '0.50', '0.75', '1.00'])\n\n# Set the grid lines\nax.grid(True)\n\n# Set the color of the grid lines\nax.grid(color='grey', linestyle='--', linewidth=0.5)\n\n# Set the color of the x-axis ticks\nax.tick_params(axis='x', colors='grey')\n\n# Set the color of the y-axis ticks\nax.tick_params(axis='y', colors='grey')\n\n# Set the color of the x-axis labels\nax.tick_params(axis='x', labelcolor='grey')\n\n# Set the color of the y-axis labels\nax.tick_params(axis='y', labelcolor='grey')\n\n# Set the color of the x-axis spines\nax.spines['bottom'].set_color('grey')\n\n# Set the color of the y-axis spines\nax.spines['left'].set_color('grey')\n\n# Set the color of the top spine\nax.spines['top'].set_visible(False)\n\n# Set the color of the right spine\nax.spines['right'].set_visible(False)\n\n# Set the color of the calibration curve\ncalibration_curve_color = 'black'\n\n# Set the color of the data points\ndata_points_color = 'orange'\n\n# Set the color of the bin edges\nbin_edges_color = 'orange'\n\n# Set the color of the calibration curve\ncalibration_curve_color = 'black'\n\n# Set the color of the data points\ndata_points_color = 'orange'\n\n# Set the color of the bin edges\nbin_edges_color = 'orange'\n\n# Set the color of the calibration curve\ncalibration_curve_color = 'black'\n\n# Set the color of the data points\ndata_points_color = 'orange'\n\n# Set the color of the bin edges\nbin_edges_color = 'orange'\n\n# Set the color of the calibration curve\ncalibration_curve_color = 'black'\n\n# Set the color of the data points\ndata_points_color = 'orange'\n\n# Set the color of the bin edges\nbin_edges_color = 'orange'\n\n# Set the color of the calibration curve\ncalibration_curve_color = 'black'\n\n# Set the color of the data points\ndata_points_color = 'orange'\n\n# Set the color of the bin edges\nbin_edges_color = 'orange'\n\n# Set the color of the calibration curve\ncalibration_curve_color = 'black'\n\n# Set the color of the data points\ndata_points_color = 'orange'\n\n# Set the color of the bin edges\nbin_edges_color = 'orange'\n\n# Set the color of the calibration curve\ncalibration_curve_color = 'black'\n\n# Set the color of the data points\ndata_points_color = 'orange'\n\n# Set the color of the bin edges\nbin_edges_color = 'orange'\n\n# Set the color of the calibration curve\ncalibration_curve_color = 'black'\n\n# Set the color of the data points\ndata_points_color = 'orange'\n\n# Set the color of the bin edges\nbin_edges_color = 'orange'\n\n# Set the color of the calibration curve\ncalibration_curve_color = 'black'\n\n# Set the color of the data points\ndata_points_color = 'orange'\n\n# Set the color of the bin edges\nbin_edges_color = 'orange'\n\n# Set the color of the calibration curve\ncalibration_curve_color = 'black'\n\n# Set the color of the data points\ndata_points_color = 'orange'\n\n# Set the color of the bin edges\nbin_edges_color = 'orange'\n\n# Set the color of the calibration curve\ncalibration_curve_color = 'black'\n\n# Set the color of the data points\ndata_points_color = 'orange'\n\n# Set the color of the bin edges\nbin_edges_color = 'orange'\n\n# Set the color of the calibration curve\ncalibration_curve_color = 'black'\n\n# Set the color of the data points\ndata_points_color = 'orange'\n\n# Set the color of the bin edges\nbin_edges_color = 'orange'\n\n# Set the color of the calibration curve\ncalibration_curve_color = 'black'\n\n# Set the color of the data points\ndata_points_color = 'orange'\n\n# Set the color of the bin edges\nbin_edges_color = 'orange'\n\n# Set the color of the calibration curve\ncalibration_curve_color = 'black'\n\n# Set the color of the data points\ndata_points_color = 'orange'\n\n# Set the color of the bin edges\nbin_edges_color = 'orange'\n\n# Set the color of the calibration curve\ncalibration_curve_color = 'black'\n\n# Set the color of the data points\ndata_points_color = 'orange'\n\n# Set the color of the bin edges\nbin_edges_color = 'orange'\n\n# Set the color of the calibration curve\ncalibration_curve_color = 'black'\n\n# Set the color of the data points\ndata_points_color = 'orange'\n\n# Set the color of the bin edges\nbin_edges_color = 'orange'\n\n# Set the color of the calibration curve\ncalibration_curve_color = 'black'\n\n# Set the color of the data points\ndata_points_color = 'orange'\n\n# Set the color of the bin edges\nbin_edges_color = 'orange'\n\n# Set the color of the calibration curve\ncalibration_curve_color = 'black'\n\n# Set the color of the data points\ndata_points_color = 'orange'\n\n# Set the color of the bin edges\nbin_edges_color = 'orange'\n\n# Set the color of the calibration curve\ncalibration_curve_color = 'black'\n\n# Set the color of the data points\ndata_points_color = 'orange'\n\n# Set the color of the bin edges\nbin_edges_color = 'orange'\n\n# Set the color of the calibration curve\ncalibration_curve_color = 'black'\n\n# Set the color of the data points\ndata_points_color = 'orange'\n\n# Set the color of the bin edges\nbin_edges_color = 'orange'\n\n# Set the color of the calibration curve\ncalibration_curve_color = 'black'\n\n# Set the color of the data points\ndata_points_color = 'orange'\n\n# Set the color of the bin edges\nbin_edges_color = 'orange'\n\n# Set the color of the calibration curve\ncalibration_curve_color = 'black'\n\n# Set the color of the data points\ndata_points_color = 'orange'\n\n# Set the color of the bin edges\nbin_edges_color = 'orange'\n\n# Set the color of the calibration curve\ncalibration_curve_color = 'black'\n\n# Set the color of the data points\ndata_points_color = 'orange'\n\n# Set the color of the bin edges\nbin_edges_color = 'orange'\n\n# Set the color of the calibration curve\ncalibration_curve_color = 'black'\n\n# Set the color of the data points\ndata_points_color = 'orange'\n\n# Set the color of the bin edges\nbin_edges_color = 'orange'\n\n# Set the color of the calibration curve\ncalibration_curve_color = 'black'\n\n# Set the color of the data points\ndata_points_color = 'orange'\n\n# Set the color of the bin edges\nbin_edges_color = 'orange'\n\n# Set the color of the calibration curve\ncalibration_curve_color = 'black'\n\n# Set the color of the data points\ndata_points_color = 'orange'\n\n# Set the color of the bin edges\nbin_edges_color = 'orange'\n\n# Set the color of the calibration curve\ncalibration_curve_color = 'black'\n\n# Set the color of the data points\ndata_points_color = 'orange'\n\n# Set the color of the bin edges\nbin_edges_color = 'orange'\n\n# Set the color of the calibration curve\ncalibration_curve_color = 'black'\n\n# Set the color of the data points\ndata_points_color = 'orange'\n\n# Set the color of the bin edges\nbin_edges_color = 'orange'\n\n# Set the color of the calibration curve\ncalibration_curve_color = 'black'\n\n# Set the color of the data points\ndata_points_color = 'orange'\n\n# Set the color of the bin edges\nbin_edges_color = 'orange'\n\n# Set the color of the calibration curve\ncalibration_curve_color = 'black'\n\n# Set the color of the data points\ndata_points_color = 'orange'\n\n# Set the color of the bin edges\nbin_edges_color = 'orange'\n\n# Set the color of the calibration curve\ncalibration_curve_color = 'black'\n\n# Set the color of the data points\ndata_points_color = 'orange'\n\n# Set the color of the bin edges\nbin_edges_color = 'orange'\n\n# Set the color of the calibration curve\ncalibration_curve_color = 'black'\n\n# Set the color of the data points\ndata_points_color = 'orange'\n\n# Set the color of the bin edges\nbin_edges_color = 'orange'\n\n# Set the color of the calibration curve\ncalibration_curve_color = 'black'\n\n# Set the color of the data points\ndata_points_color = 'orange'\n\n# Set the color of the bin edges\nbin_edges_color = 'orange'\n\n# Set the color of the calibration curve\ncalibration_curve_color = 'black'\n\n# Set the color of the data points\ndata_points_color = 'orange'\n\n# Set the color of the bin edges\nbin_edges_color = 'orange'\n\n# Set the color of the calibration curve\ncalibration_curve_color = 'black'\n\n# Set the color of the data points\ndata_points_color = 'orange'\n\n# Set the color of the bin edges\nbin_edges_color = 'orange'\n\n# Set the color of the calibration curve\ncalibration_curve_color = 'black'\n\n# Set the color of the data points\ndata_points_color = 'orange'\n\n# Set the color of the bin edges\nbin_edges_color = 'orange'\n\n# Set the color of the calibration curve\ncalibration_curve_color = 'black'\n\n# Set the color of the data points\ndata_points_color = 'orange'\n\n# Set the color of the bin edges\nbin_edges_color = 'orange'\n\n# Set the color of the calibration curve\ncalibration_curve_color = 'black'\n\n# Set the color of the data points\ndata_points_color = 'orange'\n\n# Set the color of the bin edges\nbin_edges_color = 'orange'\n\n# Set the color of the calibration curve\ncalibration_curve_color = 'black'\n\n# Set the color of the data points\ndata_points_color = 'orange'\n\n# Set the color of the bin edges\nbin_edges_color = 'orange'\n\n# Set the color of the calibration curve\ncalibration_curve_color = 'black'\n\n# Set the color of the data points\ndata_points_color = 'orange'\n\n# Set the color of the bin edges\nbin_edges_color = 'orange'\n\n# Set the color of the calibration curve\ncalibration_curve_color = 'black'\n\n# Set the color of the data points\ndata_points_color = 'orange'\n\n# Set the color of the bin edges\nbin_edges_color = 'orange'\n\n# Set the color of the calibration curve\ncalibration_curve_color = 'black'\n\n# Set the color of the data points\ndata_points_color = 'orange'\n\n# Set the color of the bin edges\nbin_edges_color = 'orange'\n\n# Set the color of the calibration curve\ncalibration_curve_color = 'black'\n\n# Set the color of the data points\ndata_points_color = 'orange'\n\n# Set the color of the bin edges\nbin_edges_color = 'orange'\n\n# Set the color of the calibration curve\ncalibration_curve_color = 'black'\n\n# Set the color of the data points\ndata_points_color = 'orange'\n\n# Set the color of the bin edges\nbin_edges_color = 'orange'\n\n# Set the color of the calibration curve\ncalibration_curve_color = 'black'\n\n# Set the color of the data points\ndata_points_color = 'orange'\n\n# Set the color of the bin edges\nbin_edges_color = 'orange'\n\n# Set the color of the calibration curve\ncalibration_curve_color = 'black'\n\n# Set the color of the data points\ndata_points_color = 'orange'\n\n# Set the color of the bin edges\nbin_edges_color = 'orange'\n\n# Set the color of the calibration curve\ncalibration_curve_color = 'black'\n\n# Set the color of the data points\ndata_points_color = 'orange'\n\n# Set the color of the bin edges\nbin_edges_color = 'orange'\n\n# Set the color of the calibration curve\ncalibration_curve_color = 'black'\n\n# Set the color of the data points\ndata_points_color = 'orange'\n\n# Set the color of the bin edges\nbin_edges_color = 'orange'\n\n# Set the color of the calibration curve\ncalibration_curve_color = 'black'\n\n# Set the color of the data points\ndata_points_color = 'orange'\n\n# Set the color of the bin edges\nbin_edges_color = 'orange'\n\n# Set the color of the calibration curve\ncalibration_curve_color = 'black'\n\n# Set the color of the data points\ndata_points_color = 'orange'\n\n# Set the color of the bin edges\nbin_edges_color = 'orange'\n\n# Set the color of the calibration curve\ncalibration_curve_color = 'black'\n\n# Set the color of the data points\ndata_points_color = 'orange'\n\n# Set the color of the bin edges\nbin_edges_color = 'orange'\n\n# Set the color of the calibration curve\ncalibration_curve_color = 'black'\n\n# Set the color of the data points\ndata_points_color = 'orange'\n\n# Set the color of the bin edges\nbin_edges_color = 'orange'\n\n# Set the color of the calibration curve\ncalibration_curve_color = 'black'\n\n# Set the color of the data points\ndata_points_color = 'orange'\n\n# Set the color of the bin edges\nbin_edges_color = 'orange'\n\n# Set the color of the calibration curve\ncalibration_curve_color = 'black'\n\n# Set the color of the data points\ndata_points_color = 'orange'\n\n# Set the color of the bin edges\nbin_edges_color = 'orange'\n\n# Set the color of the calibration curve\ncalibration_curve_color = 'black'\n\n# Set the color of the data points\ndata_points_color = 'orange'\n\n# Set the color of the bin edges\nbin_edges_color = 'orange'\n\n# Set the color of the calibration curve\ncalibration_curve_color = 'black'\n\n# Set the color of the data points\ndata_points_color = 'orange'\n\n# Set the color of the bin edges\nbin_edges_color = 'orange'\n\n# Set the color of the calibration curve\ncalibration_curve_color = 'black'\n\n# Set the color of the data points\ndata_points_color = 'orange'\n\n# Set the color of the bin edges\nbin_edges_color = 'orange'\n\n# Set the color of the calibration curve\ncalibration_curve_color = 'black'\n\n# Set the color of the data points\ndata_points_color = 'orange'\n\n# Set the color of the bin edges\nbin_edges_color = 'orange'\n\n# Set the color of the calibration curve\ncalibration_curve_color = 'black'\n\n# Set the color of the data points\ndata_points_color = 'orange'\n\n# Set the color of the bin edges\nbin_edges_color = 'orange'\n\n# Set the color of the calibration curve\ncalibration_curve_color = 'black'\n\n# Set the color of the data points\ndata_points_color = 'orange'\n\n# Set the color of the bin edges\nbin_edges_color = 'orange'\n\n# Set the color of the calibration curve\ncalibration_curve_color = 'black'\n\n# Set the color of the data points\ndata_points_color = 'orange'\n\n# Set the color of the bin edges\nbin_edges_color = 'orange'\n\n# Set the color of the calibration curve\ncalibration_curve_color = 'black'\n\n# Set the color of the data points\ndata_points_color = 'orange'\n\n# Set the color of the bin edges\nbin_edges_color = 'orange'\n\n# Set the color of the calibration curve\ncalibration_curve_color = 'black'\n\n# Set the color of the data points\ndata_points_color = 'orange'\n\n# Set the color of the bin edges\nbin_edges_color = 'orange'\n\n# Set the color of the calibration curve\ncalibration_curve_color = 'black'\n\n# Set the color of the data points\ndata_points_color = 'orange'\n\n# Set the color of the bin edges\nbin_edges_color = 'orange'\n\n# Set the color of the calibration curve\ncalibration_curve_color = 'black'\n\n# Set the color of the data points\ndata_points_color = 'orange'\n\n# Set the color of the bin edges\nbin_edges_color = 'orange'\n\n# Set the color of the calibration curve\ncalibration_curve_color = 'black'\n\n# Set the color of the data points\ndata_points_color = 'orange'\n\n# Set the color of the bin edges\nbin_edges_color = 'orange'\n\n# Set the color of the calibration curve\ncalibration_curve_color = 'black'\n\n# Set the color of the data points\ndata_points_color = 'orange'\n\n# Set the color of the bin edges\nbin_edges_color = 'orange'\n\n# Set the color of the calibration curve\ncalibration_curve_color = 'black'\n\n# Set the color of the data points\ndata_points_color = 'orange'\n\n# Set the color of the bin edges\nbin_edges_color = 'orange'\n\n# Set the color of the calibration curve\ncalibration_curve_color = 'black'\n\n# Set the color of the data points\ndata_points_color = 'orange'\n\n# Set the color of the bin edges\nbin_edges_color = 'orange'\n\n# Set the color of the calibration curve\ncalibration_curve_color = 'black'\n\n# Set the color of the data points\ndata_points_color = 'orange'\n\n# Set the color of the bin edges\nbin_edges_color = 'orange'\n\n# Set the color of the calibration curve\ncalibration_curve_color = 'black'\n\n# Set the color of the data points\ndata_points_color = 'orange'\n\n# Set the color of the bin edges\nbin_edges_color = 'orange'\n\n# Set the color of the calibration curve\ncalibration_curve_color = 'black'\n\n# Set the color of the data points\ndata_points_color = 'orange'\n\n# Set the color of the bin edges\nbin_edges_color = 'orange'\n\n# Set the color of the calibration curve\ncalibration_curve_color = 'black'\n\n# Set the color of the data points\ndata_points_color = 'orange'\n\n# Set the color of the bin edges\nbin_edges_color = 'orange'\n\n# Set the color of the calibration curve\ncalibration_curve_color = 'black'\n\n# Set the color of the data points\ndata_points_color = 'orange'\n\n# Set the color of the bin edges\nbin_edges_color = 'orange'\n\n# Set the color of the calibration curve\ncalibration"}
{"file": "dataset/ori_500/CB_30.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nquarters = ['Q1', 'Q2', 'Q3', 'Q4']\nearnings = [350, 300, 250, 200]\ngrowth = [70, 60, 50, 40]\n\n# Create a figure and axis\nfig, ax1 = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the earnings data\ncolor = 'tab:blue'\nax1.set_xlabel('Quarter')\nax1.set_ylabel('Earnings ($1000s)', color=color)\nax1.plot(quarters, earnings, color=color)\nax1.tick_params(axis='y', labelcolor=color)\n\n# Create a second y-axis for growth\nax2 = ax1.twinx()  \ncolor = 'tab:red'\nax2.set_ylabel('Growth (%)', color=color)  \nax2.plot(quarters, growth, color=color)\nax2.tick_params(axis='y', labelcolor=color)\n\n# Add a title and legend\nfig.tight_layout()\nplt.title('Earnings and Growth by Quarter')\nfig.legend(['Earnings', 'Growth'], loc='upper left')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nx = ['Linear probing', 'BitFit', 'Prompt tuning', 'Full finetuning', 'LoRA', 'Ours (LoSA)']\ny = [72, 74, 76, 78, 80, 82]\ncolors = ['blue', 'orange', 'green', 'red', 'purple', 'brown']\nmarkers = ['o', 's', '^', 'D', 'v', '<']\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Plot the data\nfor i in range(len(x)):\n    ax.plot([i, i], [y[i], y[i]], color=colors[i], marker=markers[i], markersize=10)\n\n# Set the title and labels\nax.set_title('Accuracy, iNaturalist 2021')\nax.set_xlabel('Methods')\nax.set_ylabel('Normalized Requirements (lower is better)')\n\n# Set the x-ticks and labels\nax.set_xticks(range(len(x)))\nax.set_xticklabels(x, rotation=45)\n\n# Set the y-limits\nax.set_ylim(0, 80)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Set the title of the plot\nax.set_title('TM-score vs. Seq-ident')\n\n# Set the x-axis label\nax.set_xlabel('TM-score')\n\n# Set the y-axis label\nax.set_ylabel('Seq-ident')\n\n# Set the x-axis limits\nax.set_xlim(0, 1)\n\n# Set the y-axis limits\nax.set_ylim(0, 1)\n\n# Draw horizontal lines\nfor i in range(1, 11):\n    ax.axhline(i/10, color='blue', linestyle='--')\n\n# Draw vertical lines\nfor i in range(1, 11):\n    ax.axvline(i/10, color='blue', linestyle='--')\n\n# Draw rectangles\nrectangles = [\n    [0.1, 0.9, 0.2, 0.1],\n    [0.3, 0.8, 0.2, 0.1],\n    [0.5, 0.7, 0.2, 0.1],\n    [0.7, 0.6, 0.2, 0.1]\n]\nfor rect in rectangles:\n    ax.add_patch(plt.Rectangle((rect[0], rect[1]), rect[2], rect[3], color='blue'))\n\n# Draw circles\ncircles = [\n    [0.1, 0.4, 0.1],\n    [0.3, 0.3, 0.1],\n    [0.5, 0.2, 0.1],\n    [0.7, 0.1, 0.1]\n]\nfor circle in circles:\n    ax.add_patch(plt.Circle((circle[0], circle[1]), circle[2], color='blue'))\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Set the background color of the plot\nax.set_facecolor('white')\n\n# Draw a rectangle for the top part\nax.add_patch(plt.Rectangle((0, 25), 45, 5, color='red'))\n\n# Draw a rectangle for the middle part\nax.add_patch(plt.Rectangle((0, 20), 45, 5, color='green'))\n\n# Draw a rectangle for the bottom part\nax.add_patch(plt.Rectangle((0, 15), 45, 5, color='blue'))\n\n# Draw a rectangle for the left part\nax.add_patch(plt.Rectangle((0, 0), 5, 30, color='purple'))\n\n# Draw a rectangle for the right part\nax.add_patch(plt.Rectangle((40, 0), 5, 30, color='orange'))\n\n# Add a title to the plot\nax.set_title('Species')\n\n# Add labels to the x-axis and y-axis\nax.set_xlabel('Relative Cluster Size')\nax.set_ylabel('Average Norm of Difference Vectors')\n\n# Add a legend to the plot\nax.legend(['teenagers', 'children', 'adults'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nx = [0, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 104, 112, 120, 128]\ny = [99.6, 99.9, 96.0, 92.3, 96.0, 90.9, 92.5, 91.3, 90.9, 99.5, 93.3, 98.7, 99.3, 96.0, 92.3, 90.9, 99.6]\n\n# Plotting\nplt.figure(figsize=(8.0, 6.0))\nplt.plot(x, y, marker='o', linestyle='-')\nplt.xlabel('HC_first (before aging)')\nplt.ylabel('HC_first (after aging)')\nplt.title('HC_first over time')\nplt.grid(True)\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Set the background color of the plot\nax.set_facecolor('lightblue')\n\n# Set the title of the plot\nax.set_title('TMS Score vs Sequence ID')\n\n# Set the x-axis label\nax.set_xlabel('TMS Score')\n\n# Set the y-axis label\nax.set_ylabel('Sequence ID')\n\n# Set the grid lines\nax.grid(True)\n\n# Set the tick labels\nax.set_xticks([0.2, 0.4, 0.6, 0.8, 1.0])\nax.set_yticks([0.1, 0.3, 0.5, 0.7, 0.9])\n\n# Set the tick labels\nax.set_xticklabels(['0.2', '0.4', '0.6', '0.8', '1.0'])\nax.set_yticklabels(['0.1', '0.3', '0.5', '0.7', '0.9'])\n\n# Set the tick line width\nax.tick_params(axis='both', which='major', labelsize=10, width=2)\n\n# Set the tick line color\nax.tick_params(axis='both', which='major', colors='blue')\n\n# Set the tick line style\nax.tick_params(axis='both', which='major', linestyle='-')\n\n# Set the tick line length\nax.tick_params(axis='both', which='major', length=10)\n\n# Set the tick line position\nax.tick_params(axis='both', which='major', pad=10)\n\n# Set the tick line rotation\nax.tick_params(axis='both', which='major', rotation=0)\n\n# Set the tick line color\nax.tick_params(axis='both', which='major', colors='blue')\n\n# Set the tick line style\nax.tick_params(axis='both', which='major', linestyle='-')\n\n# Set the tick line length\nax.tick_params(axis='both', which='major', length=10)\n\n# Set the tick line position\nax.tick_params(axis='both', which='major', pad=10)\n\n# Set the tick line rotation\nax.tick_params(axis='both', which='major', rotation=0)\n\n# Set the tick line color\nax.tick_params(axis='both', which='major', colors='blue')\n\n# Set the tick line style\nax.tick_params(axis='both', which='major', linestyle='-')\n\n# Set the tick line length\nax.tick_params(axis='both', which='major', length=10)\n\n# Set the tick line position\nax.tick_params(axis='both', which='major', pad=10)\n\n# Set the tick line rotation\nax.tick_params(axis='both', which='major', rotation=0)\n\n# Set the tick line color\nax.tick_params(axis='both', which='major', colors='blue')\n\n# Set the tick line style\nax.tick_params(axis='both', which='major', linestyle='-')\n\n# Set the tick line length\nax.tick_params(axis='both', which='major', length=10)\n\n# Set the tick line position\nax.tick_params(axis='both', which='major', pad=10)\n\n# Set the tick line rotation\nax.tick_params(axis='both', which='major', rotation=0)\n\n# Set the tick line color\nax.tick_params(axis='both', which='major', colors='blue')\n\n# Set the tick line style\nax.tick_params(axis='both', which='major', linestyle='-')\n\n# Set the tick line length\nax.tick_params(axis='both', which='major', length=10)\n\n# Set the tick line position\nax.tick_params(axis='both', which='major', pad=10)\n\n# Set the tick line rotation\nax.tick_params(axis='both', which='major', rotation=0)\n\n# Set the tick line color\nax.tick_params(axis='both', which='major', colors='blue')\n\n# Set the tick line style\nax.tick_params(axis='both', which='major', linestyle='-')\n\n# Set the tick line length\nax.tick_params(axis='both', which='major', length=10)\n\n# Set the tick line position\nax.tick_params(axis='both', which='major', pad=10)\n\n# Set the tick line rotation\nax.tick_params(axis='both', which='major', rotation=0)\n\n# Set the tick line color\nax.tick_params(axis='both', which='major', colors='blue')\n\n# Set the tick line style\nax.tick_params(axis='both', which='major', linestyle='-')\n\n# Set the tick line length\nax.tick_params(axis='both', which='major', length=10)\n\n# Set the tick line position\nax.tick_params(axis='both', which='major', pad=10)\n\n# Set the tick line rotation\nax.tick_params(axis='both', which='major', rotation=0)\n\n# Set the tick line color\nax.tick_params(axis='both', which='major', colors='blue')\n\n# Set the tick line style\nax.tick_params(axis='both', which='major', linestyle='-')\n\n# Set the tick line length\nax.tick_params(axis='both', which='major', length=10)\n\n# Set the tick line position\nax.tick_params(axis='both', which='major', pad=10)\n\n# Set the tick line rotation\nax.tick_params(axis='both', which='major', rotation=0)\n\n# Set the tick line color\nax.tick_params(axis='both', which='major', colors='blue')\n\n# Set the tick line style\nax.tick_params(axis='both', which='major', linestyle='-')\n\n# Set the tick line length\nax.tick_params(axis='both', which='major', length=10)\n\n# Set the tick line position\nax.tick_params(axis='both', which='major', pad=10)\n\n# Set the tick line rotation\nax.tick_params(axis='both', which='major', rotation=0)\n\n# Set the tick line color\nax.tick_params(axis='both', which='major', colors='blue')\n\n# Set the tick line style\nax.tick_params(axis='both', which='major', linestyle='-')\n\n# Set the tick line length\nax.tick_params(axis='both', which='major', length=10)\n\n# Set the tick line position\nax.tick_params(axis='both', which='major', pad=10)\n\n# Set the tick line rotation\nax.tick_params(axis='both', which='major', rotation=0)\n\n# Set the tick line color\nax.tick_params(axis='both', which='major', colors='blue')\n\n# Set the tick line style\nax.tick_params(axis='both', which='major', linestyle='-')\n\n# Set the tick line length\nax.tick_params(axis='both', which='major', length=10)\n\n# Set the tick line position\nax.tick_params(axis='both', which='major', pad=10)\n\n# Set the tick line rotation\nax.tick_params(axis='both', which='major', rotation=0)\n\n# Set the tick line color\nax.tick_params(axis='both', which='major', colors='blue')\n\n# Set the tick line style\nax.tick_params(axis='both', which='major', linestyle='-')\n\n# Set the tick line length\nax.tick_params(axis='both', which='major', length=10)\n\n# Set the tick line position\nax.tick_params(axis='both', which='major', pad=10)\n\n# Set the tick line rotation\nax.tick_params(axis='both', which='major', rotation=0)\n\n# Set the tick line color\nax.tick_params(axis='both', which='major', colors='blue')\n\n# Set the tick line style\nax.tick_params(axis='both', which='major', linestyle='-')\n\n# Set the tick line length\nax.tick_params(axis='both', which='major', length=10)\n\n# Set the tick line position\nax.tick_params(axis='both', which='major', pad=10)\n\n# Set the tick line rotation\nax.tick_params(axis='both', which='major', rotation=0)\n\n# Set the tick line color\nax.tick_params(axis='both', which='major', colors='blue')\n\n# Set the tick line style\nax.tick_params(axis='both', which='major', linestyle='-')\n\n# Set the tick line length\nax.tick_params(axis='both', which='major', length=10)\n\n# Set the tick line position\nax.tick_params(axis='both', which='major', pad=10)\n\n# Set the tick line rotation\nax.tick_params(axis='both', which='major', rotation=0)\n\n# Set the tick line color\nax.tick_params(axis='both', which='major', colors='blue')\n\n# Set the tick line style\nax.tick_params(axis='both', which='major', linestyle='-')\n\n# Set the tick line length\nax.tick_params(axis='both', which='major', length=10)\n\n# Set the tick line position\nax.tick_params(axis='both', which='major', pad=10)\n\n# Set the tick line rotation\nax.tick_params(axis='both', which='major', rotation=0)\n\n# Set the tick line color\nax.tick_params(axis='both', which='major', colors='blue')\n\n# Set the tick line style\nax.tick_params(axis='both', which='major', linestyle='-')\n\n# Set the tick line length\nax.tick_params(axis='both', which='major', length=10)\n\n# Set the tick line position\nax.tick_params(axis='both', which='major', pad=10)\n\n# Set the tick line rotation\nax.tick_params(axis='both', which='major', rotation=0)\n\n# Set the tick line color\nax.tick_params(axis='both', which='major', colors='blue')\n\n# Set the tick line style\nax.tick_params(axis='both', which='major', linestyle='-')\n\n# Set the tick line length\nax.tick_params(axis='both', which='major', length=10)\n\n# Set the tick line position\nax.tick_params(axis='both', which='major', pad=10)\n\n# Set the tick line rotation\nax.tick_params(axis='both', which='major', rotation=0)\n\n# Set the tick line color\nax.tick_params(axis='both', which='major', colors='blue')\n\n# Set the tick line style\nax.tick_params(axis='both', which='major', linestyle='-')\n\n# Set the tick line length\nax.tick_params(axis='both', which='major', length=10)\n\n# Set the tick line position\nax.tick_params(axis='both', which='major', pad=10)\n\n# Set the tick line rotation\nax.tick_params(axis='both', which='major', rotation=0)\n\n# Set the tick line color\nax.tick_params(axis='both', which='major', colors='blue')\n\n# Set the tick line style\nax.tick_params(axis='both', which='major', linestyle='-')\n\n# Set the tick line length\nax.tick_params(axis='both', which='major', length=10)\n\n# Set the tick line position\nax.tick_params(axis='both', which='major', pad=10)\n\n# Set the tick line rotation\nax.tick_params(axis='both', which='major', rotation=0)\n\n# Set the tick line color\nax.tick_params(axis='both', which='major', colors='blue')\n\n# Set the tick line style\nax.tick_params(axis='both', which='major', linestyle='-')\n\n# Set the tick line length\nax.tick_params(axis='both', which='major', length=10)\n\n# Set the tick line position\nax.tick_params(axis='both', which='major', pad=10)\n\n# Set the tick line rotation\nax.tick_params(axis='both', which='major', rotation=0)\n\n# Set the tick line color\nax.tick_params(axis='both', which='major', colors='blue')\n\n# Set the tick line style\nax.tick_params(axis='both', which='major', linestyle='-')\n\n# Set the tick line length\nax.tick_params(axis='both', which='major', length=10)\n\n# Set the tick line position\nax.tick_params(axis='both', which='major', pad=10)\n\n# Set the tick line rotation\nax.tick_params(axis='both', which='major', rotation=0)\n\n# Set the tick line color\nax.tick_params(axis='both', which='major', colors='blue')\n\n# Set the tick line style\nax.tick_params(axis='both', which='major', linestyle='-')\n\n# Set the tick line length\nax.tick_params(axis='both', which='major', length=10)\n\n# Set the tick line position\nax.tick_params(axis='both', which='major', pad=10)\n\n# Set the tick line rotation\nax.tick_params(axis='both', which='major', rotation=0)\n\n# Set the tick line color\nax.tick_params(axis='both', which='major', colors='blue')\n\n# Set the tick line style\nax.tick_params(axis='both', which='major', linestyle='-')\n\n# Set the tick line length\nax.tick_params(axis='both', which='major', length=10)\n\n# Set the tick line position\nax.tick_params(axis='both', which='major', pad=10)\n\n# Set the tick line rotation\nax.tick_params(axis='both', which='major', rotation=0)\n\n# Set the tick line color\nax.tick_params(axis='both', which='major', colors='blue')\n\n# Set the tick line style\nax.tick_params(axis='both', which='major', linestyle='-')\n\n# Set the tick line length\nax.tick_params(axis='both', which='major', length=10)\n\n# Set the tick line position\nax.tick_params(axis='both', which='major', pad=10)\n\n# Set the tick line rotation\nax.tick_params(axis='both', which='major', rotation=0)\n\n# Set the tick line color\nax.tick_params(axis='both', which='major', colors='blue')\n\n# Set the tick line style\nax.tick_params(axis='both', which='major', linestyle='-')\n\n# Set the tick line length\nax.tick_params(axis='both', which='major', length=10)\n\n# Set the tick line position\nax.tick_params(axis='both', which='major', pad=10)\n\n# Set the tick line rotation\nax.tick_params(axis='both', which='major', rotation=0)\n\n# Set the tick line color\nax.tick_params(axis='both', which='major', colors='blue')\n\n# Set the tick line style\nax.tick_params(axis='both', which='major', linestyle='-')\n\n# Set the tick line length\nax.tick_params(axis='both', which='major', length=10)\n\n# Set the tick line position\nax.tick_params(axis='both', which='major', pad=10)\n\n# Set the tick line rotation\nax.tick_params(axis='both', which='major', rotation=0)\n\n# Set the tick line color\nax.tick_params(axis='both', which='major', colors='blue')\n\n# Set the tick line style\nax.tick_params(axis='both', which='major', linestyle='-')\n\n# Set the tick line length\nax.tick_params(axis='both', which='major', length=10)\n\n# Set the tick line position\nax.tick_params(axis='both', which='major', pad=10)\n\n# Set the tick line rotation\nax.tick_params(axis='both', which='major', rotation=0)\n\n# Set the tick line color\nax.tick_params(axis='both', which='major', colors='blue')\n\n# Set the tick line style\nax.tick_params(axis='both', which='major', linestyle='-')\n\n# Set the tick line length\nax.tick_params(axis='both', which='major', length=10)\n\n# Set the tick line position\nax.tick_params(axis='both', which='major', pad=10)\n\n# Set the tick line rotation\nax.tick_params(axis='both', which='major', rotation=0)\n\n# Set the tick line color\nax.tick_params(axis='both', which='major', colors='blue')\n\n# Set the tick line style\nax.tick_params(axis='both', which='major', linestyle='-')\n\n# Set the tick line length\nax.tick_params(axis='both', which='major', length=10)\n\n# Set the tick line position\nax.tick_params(axis='both', which='major', pad=10)\n\n# Set the tick line rotation\nax.tick_params(axis='both', which='major', rotation=0)\n\n# Set the tick line color\nax.tick_params(axis='both', which='major', colors='blue')\n\n# Set the tick line style\nax.tick_params(axis='both', which='major', linestyle='-')\n\n# Set the tick line length\nax.tick_params(axis='both', which='major', length=10)\n\n# Set the tick line position\nax.tick_params(axis='both', which='major', pad=10)\n\n# Set the tick line rotation\nax.tick_params(axis='both', which='major', rotation=0)\n\n# Set the tick line color\nax.tick_params(axis='both', which='major', colors='blue')\n\n# Set the tick line style\nax.tick_params(axis='both', which='major', linestyle='-')\n\n# Set the tick line length\nax.tick_params(axis='both', which='major', length=10)\n\n# Set the tick line position\nax.tick_params(axis='both', which='major', pad=10)\n\n# Set the tick line rotation\nax.tick_params(axis='both', which='major', rotation=0)\n\n# Set the tick line color\nax.tick_params(axis='both', which='major', colors='blue')\n\n# Set the tick line style\nax.tick_params(axis='both', which='major', linestyle='-')\n\n# Set the tick line length\nax.tick_params(axis='both', which='major', length=10)\n\n# Set the tick line position\nax.tick_params(axis='both', which='major', pad=10)\n\n# Set the tick line rotation\nax.tick_params(axis='both', which='major', rotation=0)\n\n# Set the tick line color\nax.tick_params(axis='both', which='major', colors='blue')\n\n# Set the tick line style\nax.tick_params(axis='both', which='major', linestyle='-')\n\n# Set the tick line length\nax.tick_params(axis='both', which='major', length=10)\n\n# Set the tick line position\nax.tick_params(axis='both', which='major', pad=10)\n\n# Set the tick line rotation\nax.tick_params(axis='both', which='major', rotation=0)\n\n# Set the tick line color\nax.tick_params(axis='both', which='major', colors='blue')\n\n# Set the tick line style\nax.tick_params(axis='both', which='major', linestyle='-')\n\n# Set the tick line length\nax.tick_params(axis='both', which='major', length=10)\n\n# Set the tick line position\nax.tick_params(axis='both', which='major', pad=10)\n\n# Set the tick line rotation\nax.tick_params(axis='both', which='major', rotation=0)\n\n# Set the tick line color\nax.tick_params(axis='both', which='major', colors='blue')\n\n# Set the tick line style\nax.tick_params(axis='both', which='major', linestyle='-')\n\n# Set the tick line length\nax.tick_params(axis='both"}
{"file": "dataset/ori_500/CB_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nx = [4211, 2411, 2141, 1124]\ny = [0.9628, 0.9604, 0.9624, 0.9592]\ncolors = ['blue', 'green', 'blue', 'green']\nlabels = ['SRCC', 'PLCC']\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot the data\nfor i in range(len(x)):\n    ax.bar(x[i], y[i], color=colors[i], label=labels[i])\n\n# Set the title and labels\nax.set_title('SRCC and PLCC values with their sum for different modes')\nax.set_xlabel('Modes')\nax.set_ylabel('Values')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_1.pdf", "response": "```python\n\"\"\"\nThis is a simple bar chart with multiple subplots. The data is not provided, but the structure of the chart is.\n\"\"\"\n\nimport matplotlib.pyplot as plt\n\n# Create a figure and a set of subplots\nfig, axs = plt.subplots(2, 2, figsize=(10.0, 3.0))\n\n# Set the title for each subplot\naxs[0, 0].set_title('IIID-1 SDMT')\naxs[0, 1].set_title('NIID-2 SDST')\naxs[0, 2].set_title('NIID-4 UBSDT')\naxs[0, 3].set_title('NIID-5 UBSDST')\n\n# Set the x-axis label for each subplot\naxs[1, 0].set_xlabel('Client')\naxs[1, 1].set_xlabel('Client')\naxs[1, 2].set_xlabel('Client')\naxs[1, 3].set_xlabel('Client')\n\n# Set the y-axis label for each subplot\naxs[0, 0].set_ylabel('Value')\naxs[0, 1].set_ylabel('Value')\naxs[0, 2].set_ylabel('Value')\naxs[0, 3].set_ylabel('Value')\n\n# Set the colorbar for each subplot\ncbar = fig.colorbar(axs[0, 0].images[0], ax=axs[:, 0])\ncbar.set_label('Colorbar Label')\n\n# Set the legend for each subplot\naxs[0, 0].legend(['Depth', 'Edge', 'Normals', 'Semseg'], loc='upper right')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\nax.set_title('Compact Spiral with Elliptical Hollow Center')\nax.set_xlabel('X-axis')\nax.set_ylabel('Y-axis')\n\n# Draw the spiral pattern\ntheta = np.linspace(0, 10 * np.pi, 1000)\nr = 5 * np.sin(theta)\nx = r * np.cos(theta)\ny = r * np.sin(theta)\nax.plot(x, y, color='blue')\n\n# Add a colored rectangle\nrect = plt.Rectangle((-2, -2), 4, 4, color='blue', alpha=0.3)\nax.add_patch(rect)\n\n# Add a colored circle\ncircle = plt.Circle((0, 0), 0.5, color='red', alpha=0.3)\nax.add_artist(circle)\n\n# Add a colored line\nline = plt.Line2D([-2, 2], [-2, 2], color='green', linewidth=2)\nax.add_line(line)\n\n# Add a colored text\ntext = ax.text(0, 0, 'Center', fontsize=12, color='black')\n\n# Set the limits of the plot\nax.set_xlim(-10, 10)\nax.set_ylim(-10, 10)\n\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 7.0))\n\n# Set the background color of the plot\nax.set_facecolor('lightblue')\n\n# Set the title of the plot\nax.set_title('w/o FMA')\n\n# Set the x-axis label\nax.set_xlabel('Flops/byte')\n\n# Set the y-axis label\nax.set_ylabel('Flows/s')\n\n# Set the x-axis limits\nax.set_xlim(10**-1, 10**1)\n\n# Set the y-axis limits\nax.set_ylim(10**10, 10**12)\n\n# Set the x-axis ticks\nax.set_xticks([10**-1, 10**0, 10**1])\n\n# Set the y-axis ticks\nax.set_yticks([10**10, 10**11, 10**12])\n\n# Set the x-axis tick labels\nax.set_xticklabels(['10^-1', '10^0', '10^1'])\n\n# Set the y-axis tick labels\nax.set_yticklabels(['10^10', '10^11', '10^12'])\n\n# Set the grid lines\nax.grid(True)\n\n# Set the color of the grid lines\nax.grid(color='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the axis labels\nax.label_outer()\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('black')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('black')\n\n# Set the color of the x-axis tick labels\nax.get_xticklabels()[0].set_color('black')\nax.get_xticklabels()[1].set_color('black')\nax.get_xticklabels()[2].set_color('black')\n\n# Set the color of the y-axis tick labels\nax.get_yticklabels()[0].set_color('black')\nax.get_yticklabels()[1].set_color('black')\nax.get_yticklabels()[2].set_color('black')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='black')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.get_xticklabels()[0].set_color('black')\nax.get_xticklabels()[1].set_color('black')\nax.get_xticklabels()[2].set_color('black')\n\n# Set the color of the y-axis tick labels\nax.get_yticklabels()[0].set_color('black')\nax.get_yticklabels()[1].set_color('black')\nax.get_yticklabels()[2].set_color('black')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='black')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.get_xticklabels()[0].set_color('black')\nax.get_xticklabels()[1].set_color('black')\nax.get_xticklabels()[2].set_color('black')\n\n# Set the color of the y-axis tick labels\nax.get_yticklabels()[0].set_color('black')\nax.get_yticklabels()[1].set_color('black')\nax.get_yticklabels()[2].set_color('black')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='black')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.get_xticklabels()[0].set_color('black')\nax.get_xticklabels()[1].set_color('black')\nax.get_xticklabels()[2].set_color('black')\n\n# Set the color of the y-axis tick labels\nax.get_yticklabels()[0].set_color('black')\nax.get_yticklabels()[1].set_color('black')\nax.get_yticklabels()[2].set_color('black')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='black')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.get_xticklabels()[0].set_color('black')\nax.get_xticklabels()[1].set_color('black')\nax.get_xticklabels()[2].set_color('black')\n\n# Set the color of the y-axis tick labels\nax.get_yticklabels()[0].set_color('black')\nax.get_yticklabels()[1].set_color('black')\nax.get_yticklabels()[2].set_color('black')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='black')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.get_xticklabels()[0].set_color('black')\nax.get_xticklabels()[1].set_color('black')\nax.get_xticklabels()[2].set_color('black')\n\n# Set the color of the y-axis tick labels\nax.get_yticklabels()[0].set_color('black')\nax.get_yticklabels()[1].set_color('black')\nax.get_yticklabels()[2].set_color('black')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='black')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.get_xticklabels()[0].set_color('black')\nax.get_xticklabels()[1].set_color('black')\nax.get_xticklabels()[2].set_color('black')\n\n# Set the color of the y-axis tick labels\nax.get_yticklabels()[0].set_color('black')\nax.get_yticklabels()[1].set_color('black')\nax.get_yticklabels()[2].set_color('black')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='black')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.get_xticklabels()[0].set_color('black')\nax.get_xticklabels()[1].set_color('black')\nax.get_xticklabels()[2].set_color('black')\n\n# Set the color of the y-axis tick labels\nax.get_yticklabels()[0].set_color('black')\nax.get_yticklabels()[1].set_color('black')\nax.get_yticklabels()[2].set_color('black')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='black')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.get_xticklabels()[0].set_color('black')\nax.get_xticklabels()[1].set_color('black')\nax.get_xticklabels()[2].set_color('black')\n\n# Set the color of the y-axis tick labels\nax.get_yticklabels()[0].set_color('black')\nax.get_yticklabels()[1].set_color('black')\nax.get_yticklabels()[2].set_color('black')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='black')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.get_xticklabels()[0].set_color('black')\nax.get_xticklabels()[1].set_color('black')\nax.get_xticklabels()[2].set_color('black')\n\n# Set the color of the y-axis tick labels\nax.get_yticklabels()[0].set_color('black')\nax.get_yticklabels()[1].set_color('black')\nax.get_yticklabels()[2].set_color('black')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='black')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.get_xticklabels()[0].set_color('black')\nax.get_xticklabels()[1].set_color('black')\nax.get_xticklabels()[2].set_color('black')\n\n# Set the color of the y-axis tick labels\nax.get_yticklabels()[0].set_color('black')\nax.get_yticklabels()[1].set_color('black')\nax.get_yticklabels()[2].set_color('black')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='black')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.get_xticklabels()[0].set_color('black')\nax.get_xticklabels()[1].set_color('black')\nax.get_xticklabels()[2].set_color('black')\n\n# Set the color of the y-axis tick labels\nax.get_yticklabels()[0].set_color('black')\nax.get_yticklabels()[1].set_color('black')\nax.get_yticklabels()[2].set_color('black')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='black')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.get_xticklabels()[0].set_color('black')\nax.get_xticklabels()[1].set_color('black')\nax.get_xticklabels()[2].set_color('black')\n\n# Set the color of the y-axis tick labels\nax.get_yticklabels()[0].set_color('black')\nax.get_yticklabels()[1].set_color('black')\nax.get_yticklabels()[2].set_color('black')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='black')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.get_xticklabels()[0].set_color('black')\nax.get_xticklabels()[1].set_color('black')\nax.get_xticklabels()[2].set_color('black')\n\n# Set the color of the y-axis tick labels\nax.get_yticklabels()[0].set_color('black')\nax.get_yticklabels()[1].set_color('black')\nax.get_yticklabels()[2].set_color('black')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='black')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.get_xticklabels()[0].set_color('black')\nax.get_xticklabels()[1].set_color('black')\nax.get_xticklabels()[2].set_color('black')\n\n# Set the color of the y-axis tick labels\nax.get_yticklabels()[0].set_color('black')\nax.get_yticklabels()[1].set_color('black')\nax.get_yticklabels()[2].set_color('black')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='black')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.get_xticklabels()[0].set_color('black')\nax.get_xticklabels()[1].set_color('black')\nax.get_xticklabels()[2].set_color('black')\n\n# Set the color of the y-axis tick labels\nax.get_yticklabels()[0].set_color('black')\nax.get_yticklabels()[1].set_color('black')\nax.get_yticklabels()[2].set_color('black')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='black')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.get_xticklabels()[0].set_color('black')\nax.get_xticklabels()[1].set_color('black')\nax.get_xticklabels()[2].set_color('black')\n\n# Set the color of the y-axis tick labels\nax.get_yticklabels()[0].set_color('black')\nax.get_yticklabels()[1].set_color('black')\nax.get_yticklabels()[2].set_color('black')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='black')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.get_xticklabels()[0].set_color('black')\nax.get_xticklabels()[1].set_color('black')\nax.get_xticklabels()[2].set_color('black')\n\n# Set the color of the y-axis tick labels\nax.get_yticklabels()[0].set_color('black')\nax.get_yticklabels()[1].set_color('black')\nax.get_yticklabels()[2].set_color('black')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='black')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.get_xticklabels()[0].set_color('black')\nax.get_xticklabels()[1].set_color('black')\nax.get_xticklabels()[2].set_color('black')\n\n# Set the color of the y-axis tick labels\nax.get_yticklabels()[0].set_color('black')\nax.get_yticklabels()[1].set_color('black')\nax.get_yticklabels()[2].set_color('black')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='black')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.get_xticklabels()[0].set_color('black')\nax.get_xticklabels()[1].set_color('black')\nax.get_xticklabels()[2].set_color('black')\n\n# Set the color of the y-axis tick labels\nax.get_yticklabels()[0].set_color('black')\nax.get_yticklabels()[1].set_color('black')\nax.get_yticklabels()[2].set_color('black')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='black')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.get_xticklabels()[0].set_color('black')\nax.get_xticklabels()[1].set_color('black')\nax.get_xticklabels()[2].set_color('black')\n\n# Set the color of the y-axis tick labels\nax.get_yticklabels()[0].set_color('black')\nax.get_yticklabels()[1].set_color('black')\nax.get_yticklabels()[2"}
{"file": "dataset/ori_500/HR_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nx = [0.45, 0.5, 0.55, 0.6, 0.65, 0.7, 0.75]\ny = [0.01, 0.02, 0.02, 0.02, 0.02, 0.02, 0.01]\n\n# Create a bar chart\nplt.bar(x, y, color='red')\n\n# Set the title and labels\nplt.title('f(x) = 0.50')\nplt.xlabel('x')\nplt.ylabel('f(x)')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Define the colors for the rectangles\ncolors = ['pink', 'orange', 'lightgreen']\n\n# Draw the rectangles\nfor i, color in enumerate(colors):\n    ax.add_patch(plt.Rectangle((i*2, 0), 1, 1, color=color))\n\n# Set the limits of the plot\nax.set_xlim(-1, 5)\nax.set_ylim(-1, 1)\n\n# Remove the axes\nax.axis('off')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Qwen-VL-Max')\n\n# Create a color map for the levels\ncmap = plt.get_cmap('tab20')\n\n# Create a list of colors for each level\ncolors = [cmap(i) for i in range(10)]\n\n# Create a list of labels for each level\nlabels = ['Level 1', 'Level 2', 'Level 3', 'Level 4', 'Level 5']\n\n# Create a list of values for each level\nvalues = [10, 20, 30, 40, 50]\n\n# Create a pie chart with the values and colors\nwedges, texts, autotexts = ax.pie(values, colors=colors, autopct='%1.1f%%')\n\n# Add a legend to the plot\nax.legend(wedges, labels, title=\"Levels\", loc=\"center left\", bbox_to_anchor=(1, 0, 0.5, 1))\n\n# Set the x and y limits of the plot\nax.set_xlim(-1, 1)\nax.set_ylim(-1, 1)\n\n# Set the aspect ratio of the plot to be equal\nax.set_aspect('equal')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(1, 2, figsize=(10.0, 4.0))\n\n# Define the data\nx = np.logspace(1, 2, 100)\ny1 = 10**(-x**2 + 3*x - 2)\ny2 = 10**(-x**2 + 2*x - 1)\ny3 = 10**(-x**2 + x - 0.5)\n\n# Plot the data\nax[0].plot(x, y1, 'p', color='purple')\nax[0].plot(x, y2, 'p', color='pink')\nax[0].plot(x, y3, 'p', color='orange')\nax[0].set_xscale('log')\nax[0].set_xlabel('Number of matvecs m')\nax[0].set_ylabel('Approximation error ||A - \\u03C3\\u03B1\\u03B2\\u03B3\\u03B4\\u03B5\\u03B6\\u03B7\\u03B8\\u03B9\\u03BA\\u03BB\\u03BC\\u03BD\\u03BE\\u03BF\\u03C0\\u03C1\\u03C2\\u03C3\\u03C4\\u03C5\\u03C6\\u03C7\\u03C8\\u03C9\\u03D1\\u03D2\\u03D3\\u03D4\\u03D5\\u03D6\\u03D7\\u03D8\\u03D9\\u03DA\\u03DB\\u03DC\\u03DD\\u03DE\\u03DF\\u03E0\\u03E1\\u03E2\\u03E3\\u03E4\\u03E5\\u03E6\\u03E7\\u03E8\\u03E9\\u03EA\\u03EB\\u03EC\\u03ED\\u03EE\\u03EF\\u03F0\\u03F1\\u03F2\\u03F3\\u03F4\\u03F5\\u03F6\\u03F7\\u03F8\\u03F9\\u03FA\\u03FB\\u03FC\\u03FD\\u03FE\\u03FF\\u0400\\u0401\\u0402\\u0403\\u0404\\u0405\\u0406\\u0407\\u0408\\u0409\\u040A\\u040B\\u040C\\u040D\\u040E\\u040F\\u0410\\u0411\\u0412\\u03B1\\u03B2\\u03B3\\u03B4\\u03B5\\u03B6\\u03B7\\u03B8\\u03B9\\u03BA\\u03BB\\u03BC\\u03BD\\u03BE\\u03BF\\u03C0\\u03C1\\u03C2\\u03C3\\u03C4\\u03C5\\u03C6\\u03C7\\u03C8\\u03C9\\u03D1\\u03D2\\u03D3\\u03D4\\u03D5\\u03D6\\u03D7\\u03D8\\u03D9\\u03DA\\u03DB\\u03DC\\u03DD\\u03DE\\u03DF\\u03E0\\u03E1\\u03E2\\u03E3\\u03E4\\u03E5\\u03E6\\u03E7\\u03E8\\u03E9\\u03EA\\u03EB\\u03EC\\u03ED\\u03EE\\u03EF\\u03F0\\u03F1\\u03F2\\u03F3\\u03F4\\u03F5\\u03F6\\u03F7\\u03F8\\u03F9\\u03FA\\u03FB\\u03FC\\u03FD\\u03FE\\u03FF\\u0400\\u0401\\u0402\\u0403\\u0404\\u0405\\u0406\\u0407\\u0408\\u0409\\u040A\\u040B\\u040C\\u040D\\u040E\\u040F\\u0410\\u0411\\u0412\\u03B1\\u03B2\\u03B3\\u03B4\\u03B5\\u03B6\\u03B7\\u03B8\\u03B9\\u03BA\\u03BB\\u03BC\\u03BD\\u03BE\\u03BF\\u03C0\\u03C1\\u03C2\\u03C3\\u03C4\\u03C5\\u03C6\\u03C7\\u03C8\\u03C9\\u03D1\\u03D2\\u03D3\\u03D4\\u03D5\\u03D6\\u03D7\\u03D8\\u03D9\\u03DA\\u03DB\\u03DC\\u03DD\\u03DE\\u03DF\\u03E0\\u03E1\\u03E2\\u03E3\\u03E4\\u03E5\\u03E6\\u03E7\\u03E8\\u03E9\\u03EA\\u03EB\\u03EC\\u03ED\\u03EE\\u03EF\\u03F0\\u03F1\\u03F2\\u03F3\\u03F4\\u03F5\\u03F6\\u03F7\\u03F8\\u03F9\\u03FA\\u03FB\\u03FC\\u03FD\\u03FE\\u03FF\\u0400\\u0401\\u0402\\u0403\\u0404\\u0405\\u0406\\u0407\\u0408\\u0409\\u040A\\u040B\\u040C\\u040D\\u040E\\u040F\\u0410\\u0411\\u0412\\u03B1\\u03B2\\u03B3\\u03B4\\u03B5\\u03B6\\u03B7\\u03B8\\u03B9\\u03BA\\u03BB\\u03BC\\u03BD\\u03BE\\u03BF\\u03C0\\u03C1\\u03C2\\u03C3\\u03C4\\u03C5\\u03C6\\u03C7\\u03C8\\u03C9\\u03D1\\u03D2\\u03D3\\u03D4\\u03D5\\u03D6\\u03D7\\u03D8\\u03D9\\u03DA\\u03DB\\u03DC\\u03DD\\u03DE\\u03DF\\u03E0\\u03E1\\u03E2\\u03E3\\u03E4\\u03E5\\u03E6\\u03E7\\u03E8\\u03E9\\u03EA\\u03EB\\u03EC\\u03ED\\u03EE\\u03EF\\u03F0\\u03F1\\u03F2\\u03F3\\u03F4\\u03F5\\u03F6\\u03F7\\u03F8\\u03F9\\u03FA\\u03FB\\u03FC\\u03FD\\u03FE\\u03FF\\u0400\\u0401\\u0402\\u0403\\u0404\\u0405\\u0406\\u0407\\u0408\\u0409\\u040A\\u040B\\u040C\\u040D\\u040E\\u040F\\u0410\\u0411\\u0412\\u03B1\\u03B2\\u03B3\\u03B4\\u03B5\\u03B6\\u03B7\\u03B8\\u03B9\\u03BA\\u03BB\\u03BC\\u03BD\\u03BE\\u03BF\\u03C0\\u03C1\\u03C2\\u03C3\\u03C4\\u03C5\\u03C6\\u03C7\\u03C8\\u03C9\\u03D1\\u03D2\\u03D3\\u03D4\\u03D5\\u03D6\\u03D7\\u03D8\\u03D9\\u03DA\\u03DB\\u03DC\\u03DD\\u03DE\\u03DF\\u03E0\\u03E1\\u03E2\\u03E3\\u03E4\\u03E5\\u03E6\\u03E7\\u03E8\\u03E9\\u03EA\\u03EB\\u03EC\\u03ED\\u03EE\\u03EF\\u03F0\\u03F1\\u03F2\\u03F3\\u03F4\\u03F5\\u03F6\\u03F7\\u03F8\\u03F9\\u03FA\\u03FB\\u03FC\\u03FD\\u03FE\\u03FF\\u0400\\u0401\\u0402\\u0403\\u0404\\u0405\\u0406\\u0407\\u0408\\u0409\\u040A\\u040B\\u040C\\u040D\\u040E\\u040F\\u0410\\u0411\\u0412\\u03B1\\u03B2\\u03B3\\u03B4\\u03B5\\u03B6\\u03B7\\u03B8\\u03B9\\u03BA\\u03BB\\u03BC\\u03BD\\u03BE\\u03BF\\u03C0\\u03C1\\u03C2\\u03C3\\u03C4\\u03C5\\u03C6\\u03C7\\u03C8\\u03C9\\u03D1\\u03D2\\u03D3\\u03D4\\u03D5\\u03D6\\u03D7\\u03D8\\u03D9\\u03DA\\u03DB\\u03DC\\u03DD\\u03DE\\u03DF\\u03E0\\u03E1\\u03E2\\u03E3\\u03E4\\u03E5\\u03E6\\u03E7\\u03E8\\u03E9\\u03EA\\u03EB\\u03EC\\u03ED\\u03EE\\u03EF\\u03F0\\u03F1\\u03F2\\u03F3\\u03F4\\u03F5\\u03F6\\u03F7\\u03F8\\u03F9\\u03FA\\u03FB\\u03FC\\u03FD\\u03FE\\u03FF\\u0400\\u0401\\u0402\\u0403\\u0404\\u0405\\u0406\\u0407\\u0408\\u0409\\u040A\\u040B\\u040C\\u040D\\u040E\\u040F\\u0410\\u0411\\u0412\\u03B1\\u03B2\\u03B3\\u03B4\\u03B5\\u03B6\\u03B7\\u03B8\\u03B9\\u03BA\\u03BB\\u03BC\\u03BD\\u03BE\\u03BF\\u03C0\\u03C1\\u03C2\\u03C3\\u03C4\\u03C5\\u03C6\\u03C7\\u03C8\\u03C9\\u03D1\\u03D2\\u03D3\\u03D4\\u03D5\\u03D6\\u03D7\\u03D8\\u03D9\\u03DA\\u03DB\\u03DC\\u03DD\\u03DE\\u03DF\\u03E0\\u03E1\\u03E2\\u03E3\\u03E4\\u03E5\\u03E6\\u03E7\\u03E8\\u03E9\\u03EA\\u03EB\\u03EC\\u03ED\\u03EE\\u03EF\\u03F0\\u03F1\\u03F2\\u03F3\\u03F4\\u03F5\\u03F6\\u03F7\\u03F8\\u03F9\\u03FA\\u03FB\\u03FC\\u03FD\\u03FE\\u03FF\\u0400\\u0401\\u0402\\u0403\\u0404\\u0405\\u0406\\u0407\\u0408\\u0409\\u040A\\u040B\\u040C\\u040D\\u040E\\u040F\\u0410\\u0411\\u0412\\u03B1\\u03B2\\u03B3\\u03B4\\u03B5\\u03B6\\u03B7\\u03B8\\u03B9\\u03BA\\u03BB\\u03BC\\u03BD\\u03BE\\u03BF\\u03C0\\u03C1\\u03C2\\u03C3\\u03C4\\u03C5\\u03C6\\u03C7\\u03C8\\u03C9\\u03D1\\u03D2\\u03D3\\u03D4\\u03D5\\u03D6\\u03D7\\u03D8\\u03D9\\u03DA\\u03DB\\u03DC\\u03DD\\u03DE\\u03DF\\u03E0\\u03E1\\u03E2\\u03E3\\u03E4\\u03E5\\u03E6\\u03E7\\u03E8\\u03E9\\u03EA\\u03EB\\u03EC\\u03ED\\u03EE\\u03EF\\u03F0\\u03F1\\u03F2\\u03F3\\u03F4\\u03F5\\u03F6\\u03F7\\u03F8\\u03F9\\u03FA\\u03FB\\u03FC\\u03FD\\u03FE\\u03FF\\u0400\\u0401\\u0402\\u0403\\u0404\\u0405\\u0406\\u0407\\u0408\\u0409\\u040A\\u040B\\u040C\\u040D\\u040E\\u040F\\u0410\\u0411\\u0412\\u03B1\\u03B2\\u03B3\\u03B4\\u03B5\\u03B6\\u03B7\\u03B8\\u03B9\\u03BA\\u03BB\\u03BC\\u03BD\\u03BE\\u03BF\\u03C0\\u03C1\\u03C2\\u03C3\\u03C4\\u03C5\\u03C6\\u03C7\\u03C8\\u03C9\\u03D1\\u03D2\\u03D3\\u03D4\\u03D5\\u03D6\\u03D7\\u03D8\\u03D9\\u03DA\\u03DB\\u03DC\\u03DD\\u03DE\\u03DF\\u03E0\\u03E1\\u03E2\\u03E3\\u03E4\\u03E5\\u03E6\\u03E7\\u03E8\\u03E9\\u03EA\\u03EB\\u03EC\\u03ED\\u03EE\\u03EF\\u03F0\\u03F1\\u03F2\\u03F3\\u03F4\\u03F5\\u03F6\\u03F7\\u03F8\\u03F9\\u03FA\\u03FB\\u03FC\\u03FD\\u03FE\\u03FF\\u0400\\u0401\\u0402\\u0403\\u0404\\u0405\\u0406\\u0407\\u0408\\u0409\\u040A\\u040B\\u040C\\u040D\\u040E\\u040F\\u0410\\u0411"}
{"file": "dataset/ori_500/HR_16.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data for the pie chart\nlabels = ['Retrive.KV', 'En.Sum', 'Retrive.Number', 'En.QA', 'Retrive.PassKey']\nsizes = [30, 25, 20, 15, 10]\ncolors = ['lightgreen', 'lightskyblue', 'lavender', 'lightcoral', 'yellowgreen']\n\n# Create a pie chart\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\nax.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%', startangle=90)\n\n# Equal aspect ratio ensures that pie is drawn as a circle.\nax.axis('equal')  \n\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_17.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 5.0))\n\n# Define the data\nx = np.linspace(0, 140, 100)\ny1 = np.sin(x / 20)\ny2 = np.cos(x / 20)\ny3 = np.tan(x / 20)\n\n# Plot the data\nax.plot(x, y1, color='green')\nax.plot(x, y2, color='orange')\nax.plot(x, y3, color='blue')\n\n# Set the limits of the x-axis\nax.set_xlim(0, 140)\n\n# Set the title and labels\nax.set_title('Sine, Cosine, and Tangent Functions')\nax.set_xlabel('Time (s)')\nax.set_ylabel('Amplitude')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_18.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(7, 5))\n\n# Define the data for the plot\nx = np.arange(6)\ny = np.array([3.2, 3.4, 3.1, 3.8, 3.5, 3.3])\n\n# Plot the data\nax.bar(x, y, color='skyblue')\n\n# Set the title and labels\nax.set_title('Uncertainty in Thermal Conductivity Measurements')\nax.set_xlabel('Sample Number')\nax.set_ylabel('Thermal Conductivity (W/m.K)')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_19.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ngames = ['I', 'II', 'III', 'IV', 'V']\nscores = [28, 20, 10, 20, 28]\nplayer_a_scores = [35, 26, 20, 22, 30]\nplayer_b_scores = [20, 20, 10, 25, 28]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(7, 5))\n\n# Plot the scores\nax.bar(games, scores, color='green')\n\n# Add player A scores as horizontal lines\nfor game, score in zip(games, player_a_scores):\n    ax.hlines(score, 0, 1, colors='red', linestyles='--')\n\n# Add player B scores as horizontal lines\nfor game, score in zip(games, player_b_scores):\n    ax.hlines(score, 1, 2, colors='green', linestyles='--')\n\n# Set labels and title\nax.set_xlabel('Games')\nax.set_ylabel('Scores by number of game and players')\nax.set_title('Scores by number of game and players')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Define the data for the plot\nx = np.linspace(-6, 6, 100)\ny = np.sin(x)\n\n# Plot the data\nax.plot(x, y, color='blue')\n\n# Set the title and labels\nax.set_title('Sine Wave')\nax.set_xlabel('Variable 1')\nax.set_ylabel('Variable 2')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_20.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nteams = ['Female Player', 'Male Player', 'LLM Player', 'Person Player']\nstats = [\n    [5.7, 6.0, 5.1, 5.7],\n    [6.2, 6.0, 4.9, 6.2],\n    [7.5, 7.8, 7.6, 7.0],\n    [7.0, 6.9, 6.0, 3.4]\n]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Plot bars for each team\nfor i, team in enumerate(teams):\n    ax.barh(team, stats[i], color=plt.cm.tab20(i), height=0.5)\n\n# Set the title of the plot\nax.set_title('Trustee Scenario')\n\n# Set the x-axis label\nax.set_xlabel('Trustee Scenario')\n\n# Set the y-axis label\nax.set_ylabel('Team')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_21.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nteams = ['Athlete Jim', 'Athlete Bill']\ntimes = [120, 140]\ndistances = [100, 130]\nweather_impacts = [15, 20]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(7.0, 5.0))\n\n# Plot the data\nax.bar(teams, times, color='green')\nax.bar(teams, distances, bottom=times, color='orange')\nax.bar(teams, weather_impacts, bottom=[t+d for t,d in zip(times, distances)], color='red')\n\n# Add labels and title\nax.set_xlabel('Seconds Since Start')\nax.set_ylabel('Distance')\nax.set_title('Endurance Race Performance Analysis')\n\n# Add a rectangle to indicate the weather impact\nax.add_patch(plt.Rectangle((0.5, 160), 1, 10, color='black'))\n\n# Add a legend\nax.legend(['Running', 'Interrupted', 'Rest', 'Running2'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_22.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(7, 5))\n\n# Define the data for the plot\nx = np.linspace(-6, 6, 100)\ny = np.sin(x)\n\n# Plot the data\nax.plot(x, y, color='green')\n\n# Set the title of the plot\nax.set_title('Comparative Distribution of Three Different Groups')\n\n# Set the x-axis label\nax.set_xlabel('Number of Observations')\n\n# Set the y-axis label\nax.set_ylabel('Value Range')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_23.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nx = [-150, -120, -100, -75, -50, -35, -135]\ny = [350, 150, 100, 200, 75, 50, 25]\n\n# Plot\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\nax.plot(x, y, 'r-')\nax.set_xlabel('Time (s)')\nax.set_ylabel('Value ($)')\nax.set_title('Waterfall Chart')\n\n# Rectangle\nrect = plt.Rectangle((-150, 350), 100, 100, color='green', alpha=0.5)\nax.add_patch(rect)\n\n# Display plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_24.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Define the data for the plot\nx = np.linspace(-1, 1, 100)\ny = np.linspace(-1, 1, 100)\nX, Y = np.meshgrid(x, y)\nZ = np.sin(np.sqrt(X**2 + Y**2))\n\n# Plot the data\ncax = ax.contourf(X, Y, Z, cmap='coolwarm')\n\n# Add a colorbar\nfig.colorbar(cax)\n\n# Set the title\nax.set_title('tripcolor of Delaunay triangulation, flat shading')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_25.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Define the data for the heatmap\ndata = np.random.rand(10, 10)\n\n# Create a heatmap\ncax = ax.matshow(data, cmap='YlOrRd')\n\n# Set the title of the plot\nax.set_title('NonUniformImage class')\n\n# Set the x and y ticks\nax.set_xticks(np.arange(-4, 5))\nax.set_yticks(np.arange(-4, 5))\n\n# Set the x and y tick labels\nax.set_xticklabels(['-4', '-3', '-2', '-1', '0', '1', '2', '3', '4'])\nax.set_yticklabels(['-4', '-3', '-2', '-1', '0', '1', '2', '3', '4'])\n\n# Add a colorbar\nfig.colorbar(cax)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the first graph\nx1 = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\ny1 = [100, 200, 300, 400, 500, 600, 500, 400, 300, 200]\n\n# Data for the second graph\nx2 = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\ny2 = [150, 250, 350, 450, 550, 650, 550, 450, 350, 250]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 4.0))\n\n# Plot the data\nax.plot(x1, y1, 'ro-')\nax.plot(x2, y2, 'bo-')\n\n# Set the title and labels\nax.set_title('Flickr30k')\nax.set_xlabel('Number of bits')\nax.set_ylabel('Recall sum')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Denser Points with Perfectly Circular Error Ellipses')\n\n# Set the x-axis label\nax.set_xlabel('x(m)')\n\n# Set the y-axis label\nax.set_ylabel('y(m)')\n\n# Set the x-axis limits\nax.set_xlim(0, 25)\n\n# Set the y-axis limits\nax.set_ylim(0, 30)\n\n# Draw a red line\nax.plot([0, 25], [0, 30], 'r-')\n\n# Draw a blue circle\ncircle1 = plt.Circle((5, 5), 1, color='b')\nax.add_artist(circle1)\n\n# Draw a blue circle\ncircle2 = plt.Circle((10, 10), 1, color='b')\nax.add_artist(circle2)\n\n# Draw a blue circle\ncircle3 = plt.Circle((15, 15), 1, color='b')\nax.add_artist(circle3)\n\n# Draw a blue circle\ncircle4 = plt.Circle((20, 20), 1, color='b')\nax.add_artist(circle4)\n\n# Draw a blue circle\ncircle5 = plt.Circle((25, 25), 1, color='b')\nax.add_artist(circle5)\n\n# Draw a red circle\ncircle6 = plt.Circle((5, 5), 1, color='r')\nax.add_artist(circle6)\n\n# Draw a red circle\ncircle7 = plt.Circle((10, 10), 1, color='r')\nax.add_artist(circle7)\n\n# Draw a red circle\ncircle8 = plt.Circle((15, 15), 1, color='r')\nax.add_artist(circle8)\n\n# Draw a red circle\ncircle9 = plt.Circle((20, 20), 1, color='r')\nax.add_artist(circle9)\n\n# Draw a red circle\ncircle10 = plt.Circle((25, 25), 1, color='r')\nax.add_artist(circle10)\n\n# Draw a rectangle\nrect = plt.Rectangle((0, 0), 25, 30, color='r', alpha=0.5)\nax.add_artist(rect)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Draw a circle with blue dots\ncircle = plt.Circle((0.5, 0.5), 0.4, color='blue', fill=False)\nax.add_artist(circle)\n\n# Draw a rectangle with blue dots\nrectangle = plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='blue', fill=False)\nax.add_artist(rectangle)\n\n# Draw a triangle with blue dots\ntriangle = plt.Polygon([[0.3, 0.7], [0.7, 0.7], [0.5, 0.3]], color='blue', fill=False)\nax.add_artist(triangle)\n\n# Set the aspect ratio to be equal so that the circle is not distorted\nax.set_aspect('equal')\n\n# Set the limits of the plot\nax.set_xlim(0, 1)\nax.set_ylim(0, 1)\n\n# Remove the axes\nax.axis('off')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 7.0))\n\n# Set the color map for the plot\ncmap = 'coolwarm'\n\n# Create a grid of colored rectangles\nfor i in range(10):\n    for j in range(10):\n        ax.add_patch(plt.Rectangle((i*0.25, j*0.25), 0.25, 0.25, color=plt.cm.coolwarm(i/10)))\n\n# Draw a line on the plot\nax.plot([0, 10], [0, 10], 'g-')\n\n# Set the limits of the x and y axes\nax.set_xlim(0, 10)\nax.set_ylim(0, 10)\n\n# Set the labels for the x and y axes\nax.set_xlabel('\u03b1')\nax.set_ylabel('\u03b2')\n\n# Set the title of the plot\nax.set_title('Heatmap of \u03b1 and \u03b2')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis for the first subplot\nfig, ax1 = plt.subplots(figsize=(8.0, 4.0))\n\n# Plot the utility distribution per topic\nax1.plot([0, 20, 40, 60, 80, 100], [0.5, -0.3, -0.7, -0.2, 0.4, -0.6], 'b-')\nax1.plot([0, 20, 40, 60, 80, 100], [-0.5, 0.3, 0.7, 0.2, -0.4, 0.6], 'g-')\nax1.plot([0, 20, 40, 60, 80, 100], [-1.5, -0.9, -0.3, 0.3, 0.9, 1.5], 'r-')\nax1.set_xlabel('Users (U)')\nax1.set_ylabel('Utility (f)', color='b')\nax1.tick_params(axis='y', labelcolor='b')\n\n# Create a second subplot for the user preference matrix\nax2 = ax1.twinx()\ncmap = plt.cm.get_cmap('coolwarm')\nfor i in range(10):\n    for j in range(10):\n        ax2.scatter(i, j, color=cmap(np.random.rand()), s=100)\nax2.set_ylabel('Items (C)', color='r')\nax2.tick_params(axis='y', labelcolor='r')\n\n# Set the title of the first subplot\nax1.set_title('Utility distribution per topic')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 4))\n\n# Define the data for the plot\nx = np.linspace(-2, 4, 100)\ny = np.sin(x)\n\n# Plot the data\nax.plot(x, y, 'b-')\n\n# Set the title and labels\nax.set_title('Reactive-2 Payoff')\nax.set_xlabel('Reactive-2 Payoff')\nax.set_ylabel('Memory-2 Mutants Payoff')\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0, 0), 1, 1, color='red')\nax.add_patch(rect)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 4))\n\n# Define the data for the first subplot\nx1 = np.linspace(0, 10, 100)\ny1 = np.sin(x1)\n\n# Define the data for the second subplot\nx2 = np.linspace(0, 10, 100)\ny2 = np.cos(x2)\n\n# Define the data for the third subplot\nx3 = np.linspace(0, 10, 100)\ny3 = np.tan(x3)\n\n# Plot the data\nax.plot(x1, y1, label='Model = Vicuna')\nax.plot(x2, y2, label='Model = Alpaca')\nax.plot(x3, y3, label='Model = Rule')\n\n# Add labels and title\nax.set_xlabel('Permeability Reduction')\nax.set_ylabel('Temperature')\nax.set_title('Model Performance')\n\n# Add legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/PIP_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Set the background color of the plot\nax.set_facecolor('pink')\n\n# Set the x-axis limits\nax.set_xlim(-40, 1)\n\n# Set the y-axis limits\nax.set_ylim(-5, 6)\n\n# Set the x-axis label\nax.set_xlabel('\u0394 Robust Accuracy (%)')\n\n# Set the y-axis label\nax.set_ylabel('\u0394 RNFR (%)')\n\n# Draw a rectangle with a blue border\nrectangle = plt.Rectangle((-30, -2), 10, 4, linewidth=1, edgecolor='blue', facecolor='none')\nax.add_patch(rectangle)\n\n# Draw a line with a gray color\nline = plt.Line2D([-30, -20], [-2, 2], color='gray')\nax.add_line(line)\n\n# Draw a rectangle with a green border\ngreen_rectangle = plt.Rectangle((-10, -2), 10, 4, linewidth=1, edgecolor='green', facecolor='none')\nax.add_patch(green_rectangle)\n\n# Draw a rectangle with a red border\nred_rectangle = plt.Rectangle((0, -2), 10, 4, linewidth=1, edgecolor='red', facecolor='none')\nax.add_patch(red_rectangle)\n\n# Draw a rectangle with a yellow border\nyellow_rectangle = plt.Rectangle((10, -2), 10, 4, linewidth=1, edgecolor='yellow', facecolor='none')\nax.add_patch(yellow_rectangle)\n\n# Draw a rectangle with a purple border\npurple_rectangle = plt.Rectangle((20, -2), 10, 4, linewidth=1, edgecolor='purple', facecolor='none')\nax.add_patch(purple_rectangle)\n\n# Draw a rectangle with a brown border\nbrown_rectangle = plt.Rectangle((30, -2), 10, 4, linewidth=1, edgecolor='brown', facecolor='none')\nax.add_patch(brown_rectangle)\n\n# Draw a rectangle with a pink border\npink_rectangle = plt.Rectangle((40, -2), 10, 4, linewidth=1, edgecolor='pink', facecolor='none')\nax.add_patch(pink_rectangle)\n\n# Draw a rectangle with a orange border\norange_rectangle = plt.Rectangle((-30, 2), 10, 4, linewidth=1, edgecolor='orange', facecolor='none')\nax.add_patch(orange_rectangle)\n\n# Draw a rectangle with a green border\ngreen_rectangle_2 = plt.Rectangle((-20, 2), 10, 4, linewidth=1, edgecolor='green', facecolor='none')\nax.add_patch(green_rectangle_2)\n\n# Draw a rectangle with a blue border\nblue_rectangle = plt.Rectangle((-10, 2), 10, 4, linewidth=1, edgecolor='blue', facecolor='none')\nax.add_patch(blue_rectangle)\n\n# Draw a rectangle with a red border\nred_rectangle_2 = plt.Rectangle((0, 2), 10, 4, linewidth=1, edgecolor='red', facecolor='none')\nax.add_patch(red_rectangle_2)\n\n# Draw a rectangle with a yellow border\nyellow_rectangle_2 = plt.Rectangle((10, 2), 10, 4, linewidth=1, edgecolor='yellow', facecolor='none')\nax.add_patch(yellow_rectangle_2)\n\n# Draw a rectangle with a purple border\npurple_rectangle_2 = plt.Rectangle((20, 2), 10, 4, linewidth=1, edgecolor='purple', facecolor='none')\nax.add_patch(purple_rectangle_2)\n\n# Draw a rectangle with a brown border\nbrown_rectangle_2 = plt.Rectangle((30, 2), 10, 4, linewidth=1, edgecolor='brown', facecolor='none')\nax.add_patch(brown_rectangle_2)\n\n# Draw a rectangle with a pink border\npink_rectangle_2 = plt.Rectangle((40, 2), 10, 4, linewidth=1, edgecolor='pink', facecolor='none')\nax.add_patch(pink_rectangle_2)\n\n# Draw a rectangle with a orange border\norange_rectangle_2 = plt.Rectangle((-30, 4), 10, 4, linewidth=1, edgecolor='orange', facecolor='none')\nax.add_patch(orange_rectangle_2)\n\n# Draw a rectangle with a green border\ngreen_rectangle_3 = plt.Rectangle((-20, 4), 10, 4, linewidth=1, edgecolor='green', facecolor='none')\nax.add_patch(green_rectangle_3)\n\n# Draw a rectangle with a blue border\nblue_rectangle_2 = plt.Rectangle((-10, 4), 10, 4, linewidth=1, edgecolor='blue', facecolor='none')\nax.add_patch(blue_rectangle_2)\n\n# Draw a rectangle with a red border\nred_rectangle_3 = plt.Rectangle((0, 4), 10, 4, linewidth=1, edgecolor='red', facecolor='none')\nax.add_patch(red_rectangle_3)\n\n# Draw a rectangle with a yellow border\nyellow_rectangle_3 = plt.Rectangle((10, 4), 10, 4, linewidth=1, edgecolor='yellow', facecolor='none')\nax.add_patch(yellow_rectangle_3)\n\n# Draw a rectangle with a purple border\npurple_rectangle_3 = plt.Rectangle((20, 4), 10, 4, linewidth=1, edgecolor='purple', facecolor='none')\nax.add_patch(purple_rectangle_3)\n\n# Draw a rectangle with a brown border\nbrown_rectangle_3 = plt.Rectangle((30, 4), 10, 4, linewidth=1, edgecolor='brown', facecolor='none')\nax.add_patch(brown_rectangle_3)\n\n# Draw a rectangle with a pink border\npink_rectangle_3 = plt.Rectangle((40, 4), 10, 4, linewidth=1, edgecolor='pink', facecolor='none')\nax.add_patch(pink_rectangle_3)\n\n# Draw a rectangle with a orange border\norange_rectangle_3 = plt.Rectangle((-30, 6), 10, 4, linewidth=1, edgecolor='orange', facecolor='none')\nax.add_patch(orange_rectangle_3)\n\n# Draw a rectangle with a green border\ngreen_rectangle_4 = plt.Rectangle((-20, 6), 10, 4, linewidth=1, edgecolor='green', facecolor='none')\nax.add_patch(green_rectangle_4)\n\n# Draw a rectangle with a blue border\nblue_rectangle_3 = plt.Rectangle((-10, 6), 10, 4, linewidth=1, edgecolor='blue', facecolor='none')\nax.add_patch(blue_rectangle_3)\n\n# Draw a rectangle with a red border\nred_rectangle_4 = plt.Rectangle((0, 6), 10, 4, linewidth=1, edgecolor='red', facecolor='none')\nax.add_patch(red_rectangle_4)\n\n# Draw a rectangle with a yellow border\nyellow_rectangle_4 = plt.Rectangle((10, 6), 10, 4, linewidth=1, edgecolor='yellow', facecolor='none')\nax.add_patch(yellow_rectangle_4)\n\n# Draw a rectangle with a purple border\npurple_rectangle_4 = plt.Rectangle((20, 6), 10, 4, linewidth=1, edgecolor='purple', facecolor='none')\nax.add_patch(purple_rectangle_4)\n\n# Draw a rectangle with a brown border\nbrown_rectangle_4 = plt.Rectangle((30, 6), 10, 4, linewidth=1, edgecolor='brown', facecolor='none')\nax.add_patch(brown_rectangle_4)\n\n# Draw a rectangle with a pink border\npink_rectangle_4 = plt.Rectangle((40, 6), 10, 4, linewidth=1, edgecolor='pink', facecolor='none')\nax.add_patch(pink_rectangle_4)\n\n# Draw a rectangle with a orange border\norange_rectangle_4 = plt.Rectangle((-30, 8), 10, 4, linewidth=1, edgecolor='orange', facecolor='none')\nax.add_patch(orange_rectangle_4)\n\n# Draw a rectangle with a green border\ngreen_rectangle_5 = plt.Rectangle((-20, 8), 10, 4, linewidth=1, edgecolor='green', facecolor='none')\nax.add_patch(green_rectangle_5)\n\n# Draw a rectangle with a blue border\nblue_rectangle_4 = plt.Rectangle((-10, 8), 10, 4, linewidth=1, edgecolor='blue', facecolor='none')\nax.add_patch(blue_rectangle_4)\n\n# Draw a rectangle with a red border\nred_rectangle_5 = plt.Rectangle((0, 8), 10, 4, linewidth=1, edgecolor='red', facecolor='none')\nax.add_patch(red_rectangle_5)\n\n# Draw a rectangle with a yellow border\nyellow_rectangle_5 = plt.Rectangle((10, 8), 10, 4, linewidth=1, edgecolor='yellow', facecolor='none')\nax.add_patch(yellow_rectangle_5)\n\n# Draw a rectangle with a purple border\npurple_rectangle_5 = plt.Rectangle((20, 8), 10, 4, linewidth=1, edgecolor='purple', facecolor='none')\nax.add_patch(purple_rectangle_5)\n\n# Draw a rectangle with a brown border\nbrown_rectangle_5 = plt.Rectangle((30, 8), 10, 4, linewidth=1, edgecolor='brown', facecolor='none')\nax.add_patch(brown_rectangle_5)\n\n# Draw a rectangle with a pink border\npink_rectangle_5 = plt.Rectangle((40, 8), 10, 4, linewidth=1, edgecolor='pink', facecolor='none')\nax.add_patch(pink_rectangle_5)\n\n# Draw a rectangle with a orange border\norange_rectangle_5 = plt.Rectangle((-30, 10), 10, 4, linewidth=1, edgecolor='orange', facecolor='none')\nax.add_patch(orange_rectangle_5)\n\n# Draw a rectangle with a green border\ngreen_rectangle_6 = plt.Rectangle((-20, 10), 10, 4, linewidth=1, edgecolor='green', facecolor='none')\nax.add_patch(green_rectangle_6)\n\n# Draw a rectangle with a blue border\nblue_rectangle_5 = plt.Rectangle((-10, 10), 10, 4, linewidth=1, edgecolor='blue', facecolor='none')\nax.add_patch(blue_rectangle_5)\n\n# Draw a rectangle with a red border\nred_rectangle_6 = plt.Rectangle((0, 10), 10, 4, linewidth=1, edgecolor='red', facecolor='none')\nax.add_patch(red_rectangle_6)\n\n# Draw a rectangle with a yellow border\nyellow_rectangle_6 = plt.Rectangle((10, 10), 10, 4, linewidth=1, edgecolor='yellow', facecolor='none')\nax.add_patch(yellow_rectangle_6)\n\n# Draw a rectangle with a purple border\npurple_rectangle_6 = plt.Rectangle((20, 10), 10, 4, linewidth=1, edgecolor='purple', facecolor='none')\nax.add_patch(purple_rectangle_6)\n\n# Draw a rectangle with a brown border\nbrown_rectangle_6 = plt.Rectangle((30, 10), 10, 4, linewidth=1, edgecolor='brown', facecolor='none')\nax.add_patch(brown_rectangle_6)\n\n# Draw a rectangle with a pink border\npink_rectangle_6 = plt.Rectangle((40, 10), 10, 4, linewidth=1, edgecolor='pink', facecolor='none')\nax.add_patch(pink_rectangle_6)\n\n# Draw a rectangle with a orange border\norange_rectangle_6 = plt.Rectangle((-30, 12), 10, 4, linewidth=1, edgecolor='orange', facecolor='none')\nax.add_patch(orange_rectangle_6)\n\n# Draw a rectangle with a green border\ngreen_rectangle_7 = plt.Rectangle((-20, 12), 10, 4, linewidth=1, edgecolor='green', facecolor='none')\nax.add_patch(green_rectangle_7)\n\n# Draw a rectangle with a blue border\nblue_rectangle_6 = plt.Rectangle((-10, 12), 10, 4, linewidth=1, edgecolor='blue', facecolor='none')\nax.add_patch(blue_rectangle_6)\n\n# Draw a rectangle with a red border\nred_rectangle_7 = plt.Rectangle((0, 12), 10, 4, linewidth=1, edgecolor='red', facecolor='none')\nax.add_patch(red_rectangle_7)\n\n# Draw a rectangle with a yellow border\nyellow_rectangle_7 = plt.Rectangle((10, 12), 10, 4, linewidth=1, edgecolor='yellow', facecolor='none')\nax.add_patch(yellow_rectangle_7)\n\n# Draw a rectangle with a purple border\npurple_rectangle_7 = plt.Rectangle((20, 12), 10, 4, linewidth=1, edgecolor='purple', facecolor='none')\nax.add_patch(purple_rectangle_7)\n\n# Draw a rectangle with a brown border\nbrown_rectangle_7 = plt.Rectangle((30, 12), 10, 4, linewidth=1, edgecolor='brown', facecolor='none')\nax.add_patch(brown_rectangle_7)\n\n# Draw a rectangle with a pink border\npink_rectangle_7 = plt.Rectangle((40, 12), 10, 4, linewidth=1, edgecolor='pink', facecolor='none')\nax.add_patch(pink_rectangle_7)\n\n# Draw a rectangle with a orange border\norange_rectangle_7 = plt.Rectangle((-30, 14), 10, 4, linewidth=1, edgecolor='orange', facecolor='none')\nax.add_patch(orange_rectangle_7)\n\n# Draw a rectangle with a green border\ngreen_rectangle_8 = plt.Rectangle((-20, 14), 10, 4, linewidth=1, edgecolor='green', facecolor='none')\nax.add_patch(green_rectangle_8)\n\n# Draw a rectangle with a blue border\nblue_rectangle_7 = plt.Rectangle((-10, 14), 10, 4, linewidth=1, edgecolor='blue', facecolor='none')\nax.add_patch(blue_rectangle_7)\n\n# Draw a rectangle with a red border\nred_rectangle_8 = plt.Rectangle((0, 14), 10, 4, linewidth=1, edgecolor='red', facecolor='none')\nax.add_patch(red_rectangle_8)\n\n# Draw a rectangle with a yellow border\nyellow_rectangle_8 = plt.Rectangle((10, 14), 10, 4, linewidth=1, edgecolor='yellow', facecolor='none')\nax.add_patch(yellow_rectangle_8)\n\n# Draw a rectangle with a purple border\npurple_rectangle_8 = plt.Rectangle((20, 14), 10, 4, linewidth=1, edgecolor='purple', facecolor='none')\nax.add_patch(purple_rectangle_8)\n\n# Draw a rectangle with a brown border\nbrown_rectangle_8 = plt.Rectangle((30, 14), 10, 4, linewidth=1, edgecolor='brown', facecolor='none')\nax.add_patch(brown_rectangle_8)\n\n# Draw a rectangle with a pink border\npink_rectangle_8 = plt.Rectangle((40, 14), 10, 4, linewidth=1, edgecolor='pink', facecolor='none')\nax.add_patch(pink_rectangle_8)\n\n# Draw a rectangle with a orange border\norange_rectangle_8 = plt.Rectangle((-30, 16), 10, 4, linewidth=1, edgecolor='orange', facecolor='none')\nax.add_patch(orange_rectangle_8)\n\n# Draw a rectangle with a green border\ngreen_rectangle_9 = plt.Rectangle((-20, 16), 10, 4, linewidth=1, edgecolor='green', facecolor='none')\nax.add_patch(green_rectangle_9)\n\n# Draw a rectangle with a blue border\nblue_rectangle_8 = plt.Rectangle((-10, 16), 10, 4, linewidth=1, edgecolor='blue', facecolor='none')\nax.add_patch(blue_rectangle_8)\n\n# Draw a rectangle with a red border\nred_rectangle_9 = plt.Rectangle((0, 16), 10, 4, linewidth=1, edgecolor='red', facecolor='none')\nax.add_patch(red_rectangle_9)\n\n# Draw a rectangle with a yellow border\nyellow_rectangle_9 = plt.Rectangle((10, 16), 10, 4, linewidth=1, edgecolor='yellow', facecolor='none')\nax.add_patch(yellow_rectangle_9)\n\n# Draw a rectangle with a purple border\npurple_rectangle_9 = plt.Rectangle((20, 16), 10, 4, linewidth=1, edgecolor='purple', facecolor='none')\nax.add_patch(purple_rectangle_9)\n\n# Draw a rectangle with a brown border\nbrown_rectangle_9 = plt.Rectangle((30, 16), 10, 4, linewidth=1, edgecolor='brown', facecolor='none')\nax.add_patch(brown_rectangle_9)\n\n# Draw a rectangle with a pink border\npink_rectangle_9 = plt.Rectangle((40, 16), 10, 4, linewidth=1, edgecolor='pink', facecolor='none')\nax.add_patch(pink_rectangle_9)\n\n# Draw a rectangle with a orange border\norange_rectangle_9 = plt.Rectangle((-30, 18), 10, 4, linewidth=1, edgecolor='orange', facecolor='none')\nax.add_patch(orange_rectangle_9)\n\n# Draw a rectangle with a green border\ngreen_rectangle_10 = plt.Rectangle((-20, 18), 10, 4, linewidth=1, edgecolor='green', facecolor='none')\nax.add_patch(green_rectangle_10)\n\n# Draw a rectangle with a blue border\nblue_rectangle_9 = plt.Rectangle((-10, 18), 10, 4, linewidth=1, edgecolor='blue', facecolor='none')\nax.add_patch(blue_rectangle_9)\n\n# Draw a rectangle with a red border\nred_rectangle_10 = plt.Rectangle((0, 18), 10, 4, linewidth=1, edgecolor='red', facecolor='"}
{"file": "dataset/ori_500/PIP_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Exponential Scale')\n\n# Set the x-axis label\nax.set_xlabel('Gradient Steps (x 62.5K)')\n\n# Set the y-axis label\nax.set_ylabel('Exponential Scale')\n\n# Create a rectangle for the legend\nrect = plt.Rectangle((0, 0), 1, 1, color='green', alpha=0.5)\nax.add_patch(rect)\n\n# Create a line plot with green triangles\nax.plot([0, 25, 50, 75], [1, 2, 3, 4], 'g^--')\n\n# Create a line plot with red crosses\nax.plot([0, 25, 50, 75], [1, 2, 3, 4], 'r+-')\n\n# Create a line plot with green triangles\nax.plot([0, 25, 50, 75], [1, 2, 3, 4], 'g^--')\n\n# Create a line plot with red crosses\nax.plot([0, 25, 50, 75], [1, 2, 3, 4], 'r+-')\n\n# Create a line plot with green triangles\nax.plot([0, 25, 50, 75], [1, 2, 3, 4], 'g^--')\n\n# Create a line plot with red crosses\nax.plot([0, 25, 50, 75], [1, 2, 3, 4], 'r+-')\n\n# Create a line plot with green triangles\nax.plot([0, 25, 50, 75], [1, 2, 3, 4], 'g^--')\n\n# Create a line plot with red crosses\nax.plot([0, 25, 50, 75], [1, 2, 3, 4], 'r+-')\n\n# Create a line plot with green triangles\nax.plot([0, 25, 50, 75], [1, 2, 3, 4], 'g^--')\n\n# Create a line plot with red crosses\nax.plot([0, 25, 50, 75], [1, 2, 3, 4], 'r+-')\n\n# Create a line plot with green triangles\nax.plot([0, 25, 50, 75], [1, 2, 3, 4], 'g^--')\n\n# Create a line plot with red crosses\nax.plot([0, 25, 50, 75], [1, 2, 3, 4], 'r+-')\n\n# Create a line plot with green triangles\nax.plot([0, 25, 50, 75], [1, 2, 3, 4], 'g^--')\n\n# Create a line plot with red crosses\nax.plot([0, 25, 50, 75], [1, 2, 3, 4], 'r+-')\n\n# Create a line plot with green triangles\nax.plot([0, 25, 50, 75], [1, 2, 3, 4], 'g^--')\n\n# Create a line plot with red crosses\nax.plot([0, 25, 50, 75], [1, 2, 3, 4], 'r+-')\n\n# Create a line plot with green triangles\nax.plot([0, 25, 50, 75], [1, 2, 3, 4], 'g^--')\n\n# Create a line plot with red crosses\nax.plot([0, 25, 50, 75], [1, 2, 3, 4], 'r+-')\n\n# Create a line plot with green triangles\nax.plot([0, 25, 50, 75], [1, 2, 3, 4], 'g^--')\n\n# Create a line plot with red crosses\nax.plot([0, 25, 50, 75], [1, 2, 3, 4], 'r+-')\n\n# Create a line plot with green triangles\nax.plot([0, 25, 50, 75], [1, 2, 3, 4], 'g^--')\n\n# Create a line plot with red crosses\nax.plot([0, 25, 50, 75], [1, 2, 3, 4], 'r+-')\n\n# Create a line plot with green triangles\nax.plot([0, 25, 50, 75], [1, 2, 3, 4], 'g^--')\n\n# Create a line plot with red crosses\nax.plot([0, 25, 50, 75], [1, 2, 3, 4], 'r+-')\n\n# Create a line plot with green triangles\nax.plot([0, 25, 50, 75], [1, 2, 3, 4], 'g^--')\n\n# Create a line plot with red crosses\nax.plot([0, 25, 50, 75], [1, 2, 3, 4], 'r+-')\n\n# Create a line plot with green triangles\nax.plot([0, 25, 50, 75], [1, 2, 3, 4], 'g^--')\n\n# Create a line plot with red crosses\nax.plot([0, 25, 50, 75], [1, 2, 3, 4], 'r+-')\n\n# Create a line plot with green triangles\nax.plot([0, 25, 50, 75], [1, 2, 3, 4], 'g^--')\n\n# Create a line plot with red crosses\nax.plot([0, 25, 50, 75], [1, 2, 3, 4], 'r+-')\n\n# Create a line plot with green triangles\nax.plot([0, 25, 50, 75], [1, 2, 3, 4], 'g^--')\n\n# Create a line plot with red crosses\nax.plot([0, 25, 50, 75], [1, 2, 3, 4], 'r+-')\n\n# Create a line plot with green triangles\nax.plot([0, 25, 50, 75], [1, 2, 3, 4], 'g^--')\n\n# Create a line plot with red crosses\nax.plot([0, 25, 50, 75], [1, 2, 3, 4], 'r+-')\n\n# Create a line plot with green triangles\nax.plot([0, 25, 50, 75], [1, 2, 3, 4], 'g^--')\n\n# Create a line plot with red crosses\nax.plot([0, 25, 50, 75], [1, 2, 3, 4], 'r+-')\n\n# Create a line plot with green triangles\nax.plot([0, 25, 50, 75], [1, 2, 3, 4], 'g^--')\n\n# Create a line plot with red crosses\nax.plot([0, 25, 50, 75], [1, 2, 3, 4], 'r+-')\n\n# Create a line plot with green triangles\nax.plot([0, 25, 50, 75], [1, 2, 3, 4], 'g^--')\n\n# Create a line plot with red crosses\nax.plot([0, 25, 50, 75], [1, 2, 3, 4], 'r+-')\n\n# Create a line plot with green triangles\nax.plot([0, 25, 50, 75], [1, 2, 3, 4], 'g^--')\n\n# Create a line plot with red crosses\nax.plot([0, 25, 50, 75], [1, 2, 3, 4], 'r+-')\n\n# Create a line plot with green triangles\nax.plot([0, 25, 50, 75], [1, 2, 3, 4], 'g^--')\n\n# Create a line plot with red crosses\nax.plot([0, 25, 50, 75], [1, 2, 3, 4], 'r+-')\n\n# Create a line plot with green triangles\nax.plot([0, 25, 50, 75], [1, 2, 3, 4], 'g^--')\n\n# Create a line plot with red crosses\nax.plot([0, 25, 50, 75], [1, 2, 3, 4], 'r+-')\n\n# Create a line plot with green triangles\nax.plot([0, 25, 50, 75], [1, 2, 3, 4], 'g^--')\n\n# Create a line plot with red crosses\nax.plot([0, 25, 50, 75], [1, 2, 3, 4], 'r+-')\n\n# Create a line plot with green triangles\nax.plot([0, 25, 50, 75], [1, 2, 3, 4], 'g^--')\n\n# Create a line plot with red crosses\nax.plot([0, 25, 50, 75], [1, 2, 3, 4], 'r+-')\n\n# Create a line plot with green triangles\nax.plot([0, 25, 50, 75], [1, 2, 3, 4], 'g^--')\n\n# Create a line plot with red crosses\nax.plot([0, 25, 50, 75], [1, 2, 3, 4], 'r+-')\n\n# Create a line plot with green triangles\nax.plot([0, 25, 50, 75], [1, 2, 3, 4], 'g^--')\n\n# Create a line plot with red crosses\nax.plot([0, 25, 50, 75], [1, 2, 3, 4], 'r+-')\n\n# Create a line plot with green triangles\nax.plot([0, 25, 50, 75], [1, 2, 3, 4], 'g^--')\n\n# Create a line plot with red crosses\nax.plot([0, 25, 50, 75], [1, 2, 3, 4], 'r+-')\n\n# Create a line plot with green triangles\nax.plot([0, 25, 50, 75], [1, 2, 3, 4], 'g^--')\n\n# Create a line plot with red crosses\nax.plot([0, 25, 50, 75], [1, 2, 3, 4], 'r+-')\n\n# Create a line plot with green triangles\nax.plot([0, 25, 50, 75], [1, 2, 3, 4], 'g^--')\n\n# Create a line plot with red crosses\nax.plot([0, 25, 50, 75], [1, 2, 3, 4], 'r+-')\n\n# Create a line plot with green triangles\nax.plot([0, 25, 50, 75], [1, 2, 3, 4], 'g^--')\n\n# Create a line plot with red crosses\nax.plot([0, 25, 50, 75], [1, 2, 3, 4], 'r+-')\n\n# Create a line plot with green triangles\nax.plot([0, 25, 50, 75], [1, 2, 3, 4], 'g^--')\n\n# Create a line plot with red crosses\nax.plot([0, 25, 50, 75], [1, 2, 3, 4], 'r+-')\n\n# Create a line plot with green triangles\nax.plot([0, 25, 50, 75], [1, 2, 3, 4], 'g^--')\n\n# Create a line plot with red crosses\nax.plot([0, 25, 50, 75], [1, 2, 3, 4], 'r+-')\n\n# Create a line plot with green triangles\nax.plot([0, 25, 50, 75], [1, 2, 3, 4], 'g^--')\n\n# Create a line plot with red crosses\nax.plot([0, 25, 50, 75], [1, 2, 3, 4], 'r+-')\n\n# Create a line plot with green triangles\nax.plot([0, 25, 50, 75], [1, 2, 3, 4], 'g^--')\n\n# Create a line plot with red crosses\nax.plot([0, 25, 50, 75], [1, 2, 3, 4], 'r+-')\n\n# Create a line plot with green triangles\nax.plot([0, 25, 50, 75], [1, 2, 3, 4], 'g^--')\n\n# Create a line plot with red crosses\nax.plot([0, 25, 50, 75], [1, 2, 3, 4], 'r+-')\n\n# Create a line plot with green triangles\nax.plot([0, 25, 50, 75], [1, 2, 3, 4], 'g^--')\n\n# Create a line plot with red crosses\nax.plot([0, 25, 50, 75], [1, 2, 3, 4], 'r+-')\n\n# Create a line plot with green triangles\nax.plot([0, 25, 50, 75], [1, 2, 3, 4], 'g^--')\n\n# Create a line plot with red crosses\nax.plot([0, 25, 50, 75], [1, 2, 3, 4], 'r+-')\n\n# Create a line plot with green triangles\nax.plot([0, 25, 50, 75], [1, 2, 3, 4], 'g^--')\n\n# Create a line plot with red crosses\nax.plot([0, 25, 50, 75], [1, 2, 3, 4], 'r+-')\n\n# Create a line plot with green triangles\nax.plot([0, 25, 50, 75], [1, 2, 3, 4], 'g^--')\n\n# Create a line plot with red crosses\nax.plot([0, 25, 50, 75], [1, 2, 3, 4], 'r+-')\n\n# Create a line plot with green triangles\nax.plot([0, 25, 50, 75], [1, 2, 3, 4], 'g^--')\n\n# Create a line plot with red crosses\nax.plot([0, 25, 50, 75], [1, 2, 3, 4], 'r+-')\n\n# Create a line plot with green triangles\nax.plot([0, 25, 50, 75], [1, 2, 3, 4], 'g^--')\n\n# Create a line plot with red crosses\nax.plot([0, 25, 50, 75], [1, 2, 3, 4], 'r+-')\n\n# Create a line plot with green triangles\nax.plot([0, 25, 50, 75], [1, 2, 3, 4], 'g^--')\n\n# Create a line plot with red crosses\nax.plot([0, 25, 50, 75], [1, 2, 3, 4], 'r+-')\n\n# Create a line plot with green triangles\nax.plot([0, 25, 50, 75], [1, 2, 3, 4], 'g^--')\n\n# Create a line plot with red crosses\nax.plot([0, 25, 50, 75], [1, 2, 3, 4], 'r+-')\n\n# Create a line plot with green triangles\nax.plot([0, 25, 50, 75], [1, 2, 3, 4], 'g^--')\n\n# Create a line plot with red crosses\nax.plot([0, 25, 50, 75], [1, 2, 3, 4], 'r+-')\n\n# Create a line plot with green triangles\nax.plot([0, 25, 50, 75], [1, 2, 3, 4], 'g^--')\n\n# Create a line plot with red crosses\nax.plot([0, 25, 50, 75], [1, 2, 3, 4], 'r+-')\n\n# Create a line plot with green triangles\nax.plot([0, 25, 50, 75], [1, 2, 3, 4], 'g^--')\n\n# Create a line plot with red crosses\nax.plot(["}
{"file": "dataset/ori_500/PIP_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nx = [0.35, 0.4, 0.45, 0.5, 0.55, 0.6, 0.65, 0.7, 0.75, 0.8, 0.85, 0.9, 0.95, 1.0]\ny = [200, 150, 100, 50, 20, 10, 5, 2, 1, 0.5, 0.25, 0.1, 0.05, 0.02]\n\n# Plot\nplt.figure(figsize=(10.0, 6.0))\nplt.plot(x, y, 'b-')\nplt.xlabel('Maximum Predicted Probability')\nplt.ylabel('Number of Examples')\nplt.title('Number of Examples vs Maximum Predicted Probability')\nplt.grid(True)\nplt.show()\n```"}
{"file": "dataset/ori_500/PIP_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Bias Score by Data Type and Model')\n\n# Set the x-axis label\nax.set_xlabel('Data Type')\n\n# Set the y-axis label\nax.set_ylabel('Bias Score')\n\n# Define the data points\nx = ['BFloat16', 'INT8', 'INT4', 'INT2']\ny = [9.3, 9.2, 9.1, 9.0]\n\n# Plot the data points\nax.plot(x, y, marker='o')\n\n# Add a legend\nax.legend(['Qwen-7B-Chat', 'Llama2-7B-Chat', 'MPT-7B-Chat', 'CodeLlama-7B-Instruct'])\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/PIP_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nx = [0.0, 0.2, 0.4, 0.6]\ny = [500, 300, 700, 900]\ncolors = ['blue', 'orange', 'red', 'green']\nlabels = ['Known', 'Unknown']\n\n# Plot\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\nax.bar(x, y, color=colors)\nax.set_xlabel('Maximum Predicted Probability')\nax.set_ylabel('Number of Examples')\nax.set_title('Number of Examples by Maximum Predicted Probability')\n\n# Legend\nlegend_elements = [plt.Line2D([0], [0], marker='o', color='w', label=label, markerfacecolor=color, markersize=10) for label, color in zip(labels, colors)]\nax.legend(handles=legend_elements)\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/PIP_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Empirical Lipschitz Constant')\n\n# Set the x-axis label\nax.set_xlabel('Width of Layer')\n\n# Set the y-axis label\nax.set_ylabel('Empirical Lipschitz Constant')\n\n# Set the x-ticks\nax.set_xticks([2**6, 2**7, 2**8, 2**9, 2**10, 2**11])\n\n# Set the y-ticks\nax.set_yticks(range(0, 20, 5))\n\n# Plot the data\nax.plot([2**6, 2**7, 2**8, 2**9, 2**10, 2**11], [100000, 200000, 300000, 400000, 500000, 600000], 'g-')\nax.plot([2**6, 2**7, 2**8, 2**9, 2**10, 2**11], [100000, 200000, 300000, 400000, 500000, 600000], 'g^')\nax.plot([2**6, 2**7, 2**8, 2**9, 2**10, 2**11], [100000, 200000, 300000, 400000, 500000, 600000], 'g*')\nax.plot([2**6, 2**7, 2**8, 2**9, 2**10, 2**11], [100000, 200000, 300000, 400000, 500000, 600000], 'g+')\n\n# Add a legend\nax.legend(['Cos | n = 200', 'Cos | n = 400', 'ReLU | n = 200', 'ReLU | n = 400'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/PIP_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ntime_steps = [0, 2000, 4000, 6000, 8000, 10000]\nrewards = [35000, 55000, 57000, 69000, 71000, 70000]\ncolors = ['red', 'green', 'purple', 'blue']\n\n# Plotting\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\nax.plot(time_steps, rewards, color=colors[0])\nax.plot(time_steps, rewards, color=colors[1])\nax.plot(time_steps, rewards, color=colors[2])\nax.plot(time_steps, rewards, color=colors[3])\n\n# Adding rectangles\nfor i in range(1, len(colors)):\n    ax.add_patch(plt.Rectangle((time_steps[i-1], 50000), time_steps[i] - time_steps[i-1], 10000, color=colors[i]))\n\n# Adding text\nax.text(5000, 72000, \"WI\", color=colors[0])\nax.text(5000, 70000, \"ISQ\", color=colors[1])\nax.text(5000, 68000, \"WIQL\", color=colors[2])\nax.text(5000, 66000, \"Greedy\", color=colors[3])\n\n# Setting limits and labels\nax.set_xlim(0, 10000)\nax.set_ylim(35000, 75000)\nax.set_xlabel('Time Steps')\nax.set_ylabel('Discounted Cumulative Reward')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/PIP_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Plot the data\nax.plot([0, 25, 50, 75, 100, 125, 150, 175, 200], [0.55, 0.5, 0.45, 0.4, 0.35, 0.3, 0.25, 0.2, 0.15], color='blue', label='WI')\nax.plot([0, 25, 50, 75, 100, 125, 150, 175, 200], [0.55, 0.5, 0.45, 0.4, 0.35, 0.3, 0.25, 0.2, 0.15], color='orange', label='ISQ')\n\n# Set the title and labels\nax.set_title('Discounted Cumulative Reward')\nax.set_xlabel('Time Steps')\nax.set_ylabel('Discounted Cumulative Reward')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/PIP_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\nax.set_title('Daytime Sunny')\nax.scatter([1, 2, 3], [1, 2, 3], color='orange')\n\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\nax.set_title('Night Rainy')\nax.scatter([1, 2, 3], [1, 2, 3], color='blue')\n\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\nax.set_title('PGST')\nax.scatter([1, 2, 3], [1, 2, 3], color='green')\n\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\nax.set_title('Daytime Sunny')\nax.scatter([1, 2, 3], [1, 2, 3], color='orange')\n\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\nax.set_title('Night Rainy')\nax.scatter([1, 2, 3], [1, 2, 3], color='blue')\n\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\nax.set_title('PGST')\nax.scatter([1, 2, 3], [1, 2, 3], color='green')\n\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\nax.set_title('Daytime Sunny')\nax.scatter([1, 2, 3], [1, 2, 3], color='orange')\n\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\nax.set_title('Night Rainy')\nax.scatter([1, 2, 3], [1, 2, 3], color='blue')\n\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\nax.set_title('PGST')\nax.scatter([1, 2, 3], [1, 2, 3], color='green')\n\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\nax.set_title('Daytime Sunny')\nax.scatter([1, 2, 3], [1, 2, 3], color='orange')\n\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\nax.set_title('Night Rainy')\nax.scatter([1, 2, 3], [1, 2, 3], color='blue')\n\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\nax.set_title('PGST')\nax.scatter([1, 2, 3], [1, 2, 3], color='green')\n\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\nax.set_title('Daytime Sunny')\nax.scatter([1, 2, 3], [1, 2, 3], color='orange')\n\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\nax.set_title('Night Rainy')\nax.scatter([1, 2, 3], [1, 2, 3], color='blue')\n\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\nax.set_title('PGST')\nax.scatter([1, 2, 3], [1, 2, 3], color='green')\n\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\nax.set_title('Daytime Sunny')\nax.scatter([1, 2, 3], [1, 2, 3], color='orange')\n\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\nax.set_title('Night Rainy')\nax.scatter([1, 2, 3], [1, 2, 3], color='blue')\n\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\nax.set_title('PGST')\nax.scatter([1, 2, 3], [1, 2, 3], color='green')\n\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\nax.set_title('Daytime Sunny')\nax.scatter([1, 2, 3], [1, 2, 3], color='orange')\n\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\nax.set_title('Night Rainy')\nax.scatter([1, 2, 3], [1, 2, 3], color='blue')\n\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\nax.set_title('PGST')\nax.scatter([1, 2, 3], [1, 2, 3], color='green')\n\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\nax.set_title('Daytime Sunny')\nax.scatter([1, 2, 3], [1, 2, 3], color='orange')\n\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\nax.set_title('Night Rainy')\nax.scatter([1, 2, 3], [1, 2, 3], color='blue')\n\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\nax.set_title('PGST')\nax.scatter([1, 2, 3], [1, 2, 3], color='green')\n\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\nax.set_title('Daytime Sunny')\nax.scatter([1, 2, 3], [1, 2, 3], color='orange')\n\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\nax.set_title('Night Rainy')\nax.scatter([1, 2, 3], [1, 2, 3], color='blue')\n\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\nax.set_title('PGST')\nax.scatter([1, 2, 3], [1, 2, 3], color='green')\n\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\nax.set_title('Daytime Sunny')\nax.scatter([1, 2, 3], [1, 2, 3], color='orange')\n\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\nax.set_title('Night Rainy')\nax.scatter([1, 2, 3], [1, 2, 3], color='blue')\n\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\nax.set_title('PGST')\nax.scatter([1, 2, 3], [1, 2, 3], color='green')\n\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\nax.set_title('Daytime Sunny')\nax.scatter([1, 2, 3], [1, 2, 3], color='orange')\n\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\nax.set_title('Night Rainy')\nax.scatter([1, 2, 3], [1, 2, 3], color='blue')\n\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\nax.set_title('PGST')\nax.scatter([1, 2, 3], [1, 2, 3], color='green')\n\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\nax.set_title('Daytime Sunny')\nax.scatter([1, 2, 3], [1, 2, 3], color='orange')\n\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\nax.set_title('Night Rainy')\nax.scatter([1, 2, 3], [1, 2, 3], color='blue')\n\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\nax.set_title('PGST')\nax.scatter([1, 2, 3], [1, 2, 3], color='green')\n\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\nax.set_title('Daytime Sunny')\nax.scatter([1, 2, 3], [1, 2, 3], color='orange')\n\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\nax.set_title('Night Rainy')\nax.scatter([1, 2, 3], [1, 2, 3], color='blue')\n\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\nax.set_title('PGST')\nax.scatter([1, 2, 3], [1, 2, 3], color='green')\n\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\nax.set_title('Daytime Sunny')\nax.scatter([1, 2, 3], [1, 2, 3], color='orange')\n\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\nax.set_title('Night Rainy')\nax.scatter([1, 2, 3], [1, 2, 3], color='blue')\n\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\nax.set_title('PGST')\nax.scatter([1, 2, 3], [1, 2, 3], color='green')\n\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\nax.set_title('Daytime Sunny')\nax.scatter([1, 2, 3], [1, 2, 3], color='orange')\n\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\nax.set_title('Night Rainy')\nax.scatter([1, 2, 3], [1, 2, 3], color='blue')\n\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\nax.set_title('PGST')\nax.scatter([1, 2, 3], [1, 2, 3], color='green')\n\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\nax.set_title('Daytime Sunny')\nax.scatter([1, 2, 3], [1, 2, 3], color='orange')\n\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\nax.set_title('Night Rainy')\nax.scatter([1, 2, 3], [1, 2, 3], color='blue')\n\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\nax.set_title('PGST')\nax.scatter([1, 2, 3], [1, 2, 3], color='green')\n\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\nax.set_title('Daytime Sunny')\nax.scatter([1, 2, 3], [1, 2, 3], color='orange')\n\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\nax.set_title('Night Rainy')\nax.scatter([1, 2, 3], [1, 2, 3], color='blue')\n\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\nax.set_title('PGST')\nax.scatter([1, 2, 3], [1, 2, 3], color='green')\n\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\nax.set_title('Daytime Sunny')\nax.scatter([1, 2, 3], [1, 2, 3], color='orange')\n\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\nax.set_title('Night Rainy')\nax.scatter([1, 2, 3], [1, 2, 3], color='blue')\n\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\nax.set_title('PGST')\nax.scatter([1, 2, 3], [1, 2, 3], color='green')\n\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\nax.set_title('Daytime Sunny')\nax.scatter([1, 2, 3], [1, 2, 3], color='orange')\n\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\nax.set_title('Night Rainy')\nax.scatter([1, 2, 3], [1, 2, 3], color='blue')\n\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\nax.set_title('PGST')\nax.scatter([1, 2, 3], [1, 2, 3], color='green')\n\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\nax.set_title('Daytime Sunny')\nax.scatter([1, 2, 3], [1, 2, 3], color='orange')\n\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\nax.set_title('Night Rainy')\nax.scatter([1, 2, 3], [1, 2, 3], color='blue')\n\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\nax.set_title('PGST')\nax.scatter([1, 2, 3], [1, 2, 3], color='green')\n\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\nax.set_title('Daytime Sunny')\nax.scatter([1, 2, 3], [1, 2, 3], color='orange')\n\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\nax.set_title('Night Rainy')\nax.scatter([1, 2, 3], [1, 2, 3], color='blue')\n\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\nax.set_title('PGST')\nax.scatter([1, 2, 3], [1, 2, 3], color='green')\n\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\nax.set_title('Daytime Sunny')\nax.scatter([1, 2, 3], [1, 2, 3], color='orange')\n\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\nax.set_title('Night Rainy')\nax.scatter([1, 2, 3], [1, 2, 3], color='blue')\n\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\nax.set_title('PGST')\nax.scatter([1, 2, 3], [1, 2, 3], color='green')\n\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\nax.set_title('Daytime Sunny')\nax.scatter([1, 2, 3], [1, 2, 3], color='orange')\n\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\nax.set_title('Night Rainy')\nax.scatter([1, 2, 3], [1, 2, 3], color='blue')\n\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\nax.set_title('PGST')\nax.scatter([1, 2, 3], [1, 2, 3], color='green')\n\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\nax.set_title('Daytime Sunny')\nax.scatter([1, 2, 3], [1, 2, 3], color='orange')\n\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\nax.set_title('Night Rainy')\nax.scatter([1, 2, 3], [1, 2, 3], color='blue')\n\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\nax.set_title('PGST')\nax.scatter([1, 2, 3], [1, 2, 3], color='green')\n\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\nax.set_title('Daytime Sunny')\nax.scatter([1, 2, 3], [1, 2, 3], color='orange')\n\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\nax.set_title('Night Rainy')\nax.scatter([1, 2, 3], [1, 2, 3], color='blue')\n\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\nax.set_title('PGST')\nax.scatter([1, 2, 3], [1, 2, 3], color='green')\n\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\nax.set_title('Daytime Sunny')\nax.scatter([1, 2, 3], [1, 2, 3], color='orange')\n\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\nax.set_title('Night Rainy')\nax.scatter([1, 2, 3], [1, 2, 3], color='blue')\n\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\nax.set_title('PGST')\nax.scatter([1, 2, 3], [1, 2, 3], color='green')\n\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\nax.set_title('Daytime Sunny')\nax.scatter([1, 2, 3], [1, 2, 3], color='orange')\n\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\nax.set_title('Night Rainy')\nax.scatter([1, 2, 3], [1, 2, 3], color='blue')\n\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\nax.set_title('PGST')\nax.scatter([1, 2, 3], [1, 2, 3], color='green')\n\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\nax.set_title('Daytime Sunny')\nax.scatter([1, 2, 3], [1, 2, 3], color='orange')\n\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\nax.set_title('Night Rainy')\nax.scatter([1, 2, 3], [1, 2, 3], color='blue')\n\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\nax.set_title('PGST')\nax.scatter([1, 2, 3], [1, 2, 3], color='green"}
{"file": "dataset/ori_500/PIP_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Plot the scatter plot\nax.scatter([1, 2, 3, 4, 5], [1, 2, 3, 4, 5], color='red')\nax.scatter([1, 2, 3, 4, 5], [1, 2, 3, 4, 5], color='green')\nax.scatter([1, 2, 3, 4, 5], [1, 2, 3, 4, 5], color='blue')\n\n# Add a rectangle\nrectangle = plt.Rectangle((0, 0), 1, 1, color='black')\nax.add_patch(rectangle)\n\n# Set the title and labels\nax.set_title('Scatter Plot with Rectangle')\nax.set_xlabel('X-axis')\nax.set_ylabel('Y-axis')\n\n# Set the limits\nax.set_xlim(-8, 8)\nax.set_ylim(-8, 8)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/area_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(9.0, 8.0))\n\n# Set the background color of the plot\nax.set_facecolor('lightgrey')\n\n# Set the title of the plot\nax.set_title('Sales Data', fontsize=16)\n\n# Set the x-axis label\nax.set_xlabel('Time (in minutes)', fontsize=14)\n\n# Set the y-axis label\nax.set_ylabel('Sales', fontsize=14)\n\n# Set the tick labels for the x-axis\nax.set_xticks([10, 50, 100, 150, 200])\nax.set_xticklabels(['10K', '50K', '100K', '150K', '200K'])\n\n# Set the tick labels for the y-axis\nax.set_yticks([0, 10, 20, 30, 40])\nax.set_yticklabels(['0', '10', '20', '30', '40'])\n\n# Set the grid lines\nax.grid(True)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='minor', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='minor', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of"}
{"file": "dataset/ori_500/area_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 10.0))\n\n# Set the background color of the plot\nax.set_facecolor('lightgrey')\n\n# Set the x-axis limits\nax.set_xlim(0, 3)\n\n# Set the y-axis limits\nax.set_ylim(0, 50)\n\n# Set the x-axis ticks\nax.set_xticks([0, 1, 2, 3])\n\n# Set the y-axis ticks\nax.set_yticks([0, 10, 20, 30, 40, 50])\n\n# Set the x-axis label\nax.set_xlabel('Time step')\n\n# Set the y-axis label\nax.set_ylabel('Value')\n\n# Set the title\nax.set_title('Stock Prices')\n\n# Set the grid\nax.grid(True)\n\n# Set the legend\nax.legend(['GT', 'DRS', 'PR-based'])\n\n# Set the colors\ncolors = ['green', 'blue', 'red']\n\n# Set the markers\nmarkers = ['o', 's', '^']\n\n# Plot the data\nfor i, color in enumerate(colors):\n    ax.plot(range(4), [i * 10 + 96, i * 10 + 98, i * 10 + 99, i * 10 + 98], color=color, marker=markers[i])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/area_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Dynamic Effect of Vocab on Zero Shot Accuracy')\n\n# Set the x-axis label\nax.set_xlabel('Deposition IO Norm')\n\n# Set the y-axis label\nax.set_ylabel('Accuracy')\n\n# Set the x-axis limits\nax.set_xlim(0, 80)\n\n# Set the y-axis limits\nax.set_ylim(0.53, 0.76)\n\n# Set the x-axis ticks\nax.set_xticks([0, 20, 40, 60, 80])\n\n# Set the y-axis ticks\nax.set_yticks([0.55, 0.60, 0.65, 0.70, 0.75])\n\n# Set the x-axis tick labels\nax.set_xticklabels(['0', '20', '40', '60', '80'])\n\n# Set the y-axis tick labels\nax.set_yticklabels(['0.55', '0.60', '0.65', '0.70', '0.75'])\n\n# Set the background color of the plot\nax.set_facecolor('#f0e68c')\n\n# Set the grid lines\nax.grid(True)\n\n# Set the color of the grid lines\nax.grid(color='black')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('black')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='black')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('black')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='black')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('black')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='black')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('black')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='black')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('black')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='black')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('black')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='black')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('black')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='black')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('black')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='black')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('black')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='black')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('black')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='black')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('black')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='black')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('black')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='black')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('black')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='black')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('black')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='black')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('black')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='black')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('black')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='black')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='"}
{"file": "dataset/ori_500/area_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nx = [0, 1, 2, 3, 4, 5, 6, 7, 8]\ny_content = [1, 2, 3, 4, 5, 4, 3, 2, 1]\ny_organization = [2, 3, 4, 5, 6, 5, 4, 3, 2]\ny_language = [3, 4, 5, 6, 7, 6, 5, 4, 3]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 4.0))\n\n# Plot the data\nax.plot(x, y_content, label='Content', color='blue')\nax.plot(x, y_organization, label='Organization', color='orange')\nax.plot(x, y_language, label='Language', color='green')\n\n# Set the title and labels\nax.set_title('Cumulative Performance Gain by Augmentation Level')\nax.set_xlabel('n')\nax.set_ylabel('Performance Gain (%)')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/area_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nyears = [1950, 1960, 1970, 1980, 1990, 2000, 2010]\nafrica = [300, 350, 400, 450, 500, 550, 600]\namericas = [200, 250, 300, 350, 400, 450, 500]\nasia = [100, 150, 200, 250, 300, 350, 400]\neurope = [150, 200, 250, 300, 350, 400, 450]\noceania = [50, 100, 150, 200, 250, 300, 350]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data\nax.plot(years, africa, label='Africa', color='lightgreen')\nax.plot(years, americas, label='Americas', color='yellow')\nax.plot(years, asia, label='Asia', color='darkred')\nax.plot(years, europe, label='Europe', color='orange')\nax.plot(years, oceania, label='Oceania', color='lightblue')\n\n# Set the title and labels\nax.set_title('World population')\nax.set_xlabel('Year')\nax.set_ylabel('Number of people (millions)')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nmovies = [\"Notre-Dame de Paris\", \"Demi-Gods and Semi-Devils\", \"The Count of Monte Cristo\", \"Game of Thrones\", \"Attack on Titan\"]\nscores = [6.2, 5.8, 5.3, 4.9, 4.5]\ncolors = [\"blue\", \"skyblue\", \"tan\", \"cyan\", \"darkblue\"]\n\n# Create a bar chart\nplt.figure(figsize=(7, 5))\nbars = plt.bar(movies, scores, color=colors)\n\n# Add labels and title\nplt.xlabel('Movies')\nplt.ylabel('Scores')\nplt.title('Movie Scores')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\ncategories = ['Which', 'What', 'How', 'Will', 'Are', 'Is', 'Choose', 'Select', 'Identify', 'Fill']\naccuracies = [55, 45, 35, 25, 15, 50, 40, 30, 20, 10]\n\n# Create a bar chart\nplt.figure(figsize=(8.0, 6.0))\nplt.bar(categories, accuracies, color='skyblue')\n\n# Set the title and labels\nplt.title('Model Accuracy by Category')\nplt.xlabel('Category')\nplt.ylabel('Accuracy (%)')\n\n# Rotate the category labels for better visibility\nplt.xticks(rotation=45)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_100.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the first bar chart\nproducts_region_1 = ['Product A', 'Product B', 'Product C', 'Product D', 'Product E']\nsales_region_1 = [70, 80, 60, 90, 50]\n\n# Data for the second bar chart\nproducts_region_2 = ['Product A', 'Product B', 'Product C', 'Product D', 'Product E']\nsales_region_2 = [80, 60, 70, 90, 40]\n\n# Data for the third bar chart\nproducts_region_3 = ['Product A', 'Product B', 'Product C', 'Product D', 'Product E']\nsales_region_3 = [90, 50, 60, 80, 30]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(15, 5))\n\n# Plot the first bar chart\nax.bar(products_region_1, sales_region_1, color='green')\nax.set_title('Region 1 Sales')\n\n# Plot the second bar chart\nax.bar(products_region_2, sales_region_2, color='blue')\nax.set_title('Region 2 Sales')\n\n# Plot the third bar chart\nax.bar(products_region_3, sales_region_3, color='red')\nax.set_title('Region 3 Sales')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nlengths = [0.9, 10.19, 20.29, 30.39, 40.49]\nspearmans = [0.5, 0.5, 0.5, 0.5, 0.5]\n\n# Create a bar chart\nplt.bar(lengths, spearmans, color='blue')\n\n# Set the title and labels\nplt.title('Spearman Correlation by Length')\nplt.xlabel('Length')\nplt.ylabel('Spearman')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the first bar chart\ncategories = ['FMLP-Rec', 'BERT4Rec', 'SASRec', 'Caser', 'GRU4Rec']\nvalues = [2.2, 2.4, 2.4, 19.9, 14.3]\n\n# Data for the second bar chart\ncategories2 = ['MovieLens-1M']\nvalues2 = [3.0, 5.1, 4.1, 2.9, 3.1, 4.4, 5.1, 3.0, 4.8, 5.1, 4.1, 3.0, 4.4, 5.1, 3.0, 4.8, 5.1, 4.1, 3.0, 4.8, 5.1, 4.1, 3.0, 4.8, 5.1, 4.1, 3.0, 4.8, 5.1, 4.1, 3.0, 4.8, 5.1, 4.1, 3.0, 4.8, 5.1, 4.1, 3.0, 4.8, 5.1, 4.1, 3.0, 4.8, 5.1, 4.1, 3.0, 4.8, 5.1, 4.1, 3.0, 4.8, 5.1, 4.1, 3.0, 4.8, 5.1, 4.1, 3.0, 4.8, 5.1, 4.1, 3.0, 4.8, 5.1, 4.1, 3.0, 4.8, 5.1, 4.1, 3.0, 4.8, 5.1, 4.1, 3.0, 4.8, 5.1, 4.1, 3.0, 4.8, 5.1, 4.1, 3.0, 4.8, 5.1, 4.1, 3.0, 4.8, 5.1, 4.1, 3.0, 4.8, 5.1, 4.1, 3.0, 4.8, 5.1, 4.1, 3.0, 4.8, 5.1, 4.1, 3.0, 4.8, 5.1, 4.1, 3.0, 4.8, 5.1, 4.1, 3.0, 4.8, 5.1, 4.1, 3.0, 4.8, 5.1, 4.1, 3.0, 4.8, 5.1, 4.1, 3.0, 4.8, 5.1, 4.1, 3.0, 4.8, 5.1, 4.1, 3.0, 4.8, 5.1, 4.1, 3.0, 4.8, 5.1, 4.1, 3.0, 4.8, 5.1, 4.1, 3.0, 4.8, 5.1, 4.1, 3.0, 4.8, 5.1, 4.1, 3.0, 4.8, 5.1, 4.1, 3.0, 4.8, 5.1, 4.1, 3.0, 4.8, 5.1, 4.1, 3.0, 4.8, 5.1, 4.1, 3.0, 4.8, 5.1, 4.1, 3.0, 4.8, 5.1, 4.1, 3.0, 4.8, 5.1, 4.1, 3.0, 4.8, 5.1, 4.1, 3.0, 4.8, 5.1, 4.1, 3.0, 4.8, 5.1, 4.1, 3.0, 4.8, 5.1, 4.1, 3.0, 4.8, 5.1, 4.1, 3.0, 4.8, 5.1, 4.1, 3.0, 4.8, 5.1, 4.1, 3.0, 4.8, 5.1, 4.1, 3.0, 4.8, 5.1, 4.1, 3.0, 4.8, 5.1, 4.1, 3.0, 4.8, 5.1, 4.1, 3.0, 4.8, 5.1, 4.1, 3.0, 4.8, 5.1, 4.1, 3.0, 4.8, 5.1, 4.1, 3.0, 4.8, 5.1, 4.1, 3.0, 4.8, 5.1, 4.1, 3.0, 4.8, 5.1, 4.1, 3.0, 4.8, 5.1, 4.1, 3.0, 4.8, 5.1, 4.1, 3.0, 4.8, 5.1, 4.1, 3.0, 4.8, 5.1, 4.1, 3.0, 4.8, 5.1, 4.1, 3.0, 4.8, 5.1, 4.1, 3.0, 4.8, 5.1, 4.1, 3.0, 4.8, 5.1, 4.1, 3.0, 4.8, 5.1, 4.1, 3.0, 4.8, 5.1, 4.1, 3.0, 4.8, 5.1, 4.1, 3.0, 4.8, 5.1, 4.1, 3.0, 4.8, 5.1, 4.1, 3.0, 4.8, 5.1, 4.1, 3.0, 4.8, 5.1, 4.1, 3.0, 4.8, 5.1, 4.1, 3.0, 4.8, 5.1, 4.1, 3.0, 4.8, 5.1, 4.1, 3.0, 4.8, 5.1, 4.1, 3.0, 4.8, 5.1, 4.1, 3.0, 4.8, 5.1, 4.1, 3.0, 4.8, 5.1, 4.1, 3.0, 4.8, 5.1, 4.1, 3.0, 4.8, 5.1, 4.1, 3.0, 4.8, 5.1, 4.1, 3.0, 4.8, 5.1, 4.1, 3.0, 4.8, 5.1, 4.1, 3.0, 4.8, 5.1, 4.1, 3.0, 4.8, 5.1, 4.1, 3.0, 4.8, 5.1, 4.1, 3.0, 4.8, 5.1, 4.1, 3.0, 4.8, 5.1, 4.1, 3.0, 4.8, 5.1, 4.1, 3.0, 4.8, 5.1, 4.1, 3.0, 4.8, 5.1, 4.1, 3.0, 4.8, 5.1, 4.1, 3.0, 4.8, 5.1, 4.1, 3.0, 4.8, 5.1, 4.1, 3.0, 4.8, 5.1, 4.1, 3.0, 4.8, 5.1, 4.1, 3.0, 4.8, 5.1, 4.1, 3.0, 4.8, 5.1, 4.1, 3.0, 4.8, 5.1, 4.1, 3.0, 4.8, 5.1, 4.1, 3.0, 4.8, 5.1, 4.1, 3.0, 4.8, 5.1, 4.1, 3.0, 4.8, 5.1, 4.1, 3.0, 4.8, 5.1, 4.1, 3.0, 4.8, 5.1, 4.1, 3.0, 4.8, 5.1, 4.1, 3.0, 4.8, 5.1, 4.1, 3.0, 4.8, 5.1, 4.1, 3.0, 4.8, 5.1, 4.1, 3.0, 4.8, 5.1, 4.1, 3.0, 4.8, 5.1, 4.1, 3.0, 4.8, 5.1, 4.1, 3.0, 4.8, 5.1, 4.1, 3.0, 4.8, 5.1, 4.1, 3.0, 4.8, 5.1, 4.1, 3.0, 4.8, 5.1, 4.1, 3.0, 4.8, 5.1, 4.1, 3.0, 4.8, 5.1, 4.1, 3.0, 4.8, 5.1, 4.1, 3.0, 4.8, 5.1, 4.1, 3.0, 4.8, 5.1, 4.1, 3.0, 4.8, 5.1, 4.1, 3.0, 4.8, 5.1, 4.1, 3.0, 4.8, 5.1, 4.1, 3.0, 4.8, 5.1, 4.1, 3.0, 4.8, 5.1, 4.1, 3.0, 4.8, 5.1, 4.1, 3.0, 4.8, 5.1, 4.1, 3.0, 4.8, 5.1, 4.1, 3.0, 4.8, 5.1, 4.1, 3.0, 4.8, 5.1, 4.1, 3.0, 4.8, 5.1, 4.1, 3.0, 4.8, 5.1, 4.1, 3.0, 4.8, 5.1, 4.1, 3.0, 4.8, 5.1, 4.1, 3.0, 4.8, 5.1, 4.1, 3.0, 4.8, 5.1, 4.1, 3.0, 4.8, 5.1, 4.1, 3.0, 4.8, 5.1, 4.1, 3.0, 4.8, 5.1, 4.1, 3.0, 4.8, 5.1, 4.1, 3.0, 4.8, 5.1, 4.1, 3.0, 4.8, 5.1, 4.1, 3.0, 4.8, 5.1, 4.1, 3.0, 4.8, 5.1, 4.1, 3.0, 4.8, 5.1, 4.1, 3.0, 4.8, 5.1, 4.1, 3.0, 4.8, 5.1, 4.1, 3.0, 4.8, 5.1, 4.1, 3.0, 4.8, 5.1, 4.1, 3.0, 4.8, 5.1, 4.1, 3.0, 4.8, 5.1, 4.1, 3.0, 4.8, 5.1, 4.1, 3.0, 4.8, 5.1, 4.1, 3.0, 4.8, 5.1, 4.1, 3.0, 4.8, 5.1, 4.1, 3.0, 4.8, 5.1, 4.1, 3.0, 4.8, 5.1, 4.1, 3.0, 4.8, 5.1, 4.1, 3.0, 4.8, 5.1, 4.1, 3.0, 4.8, 5.1, 4.1, 3.0, 4.8, 5.1, 4.1, 3.0, 4.8, 5.1, 4.1, 3.0, 4.8, 5.1, 4.1, 3.0, 4.8, 5.1, 4.1, 3.0, 4.8, 5.1, 4.1, 3.0, 4.8, 5.1, 4.1, 3.0, 4.8, 5.1, 4.1, 3.0, 4.8, 5.1, 4.1, 3.0, 4.8, 5.1, 4.1, 3.0, 4.8, 5.1, 4.1, 3.0, 4.8, 5.1, 4.1, 3.0, 4.8, 5.1, 4.1, 3.0, 4.8, 5.1, 4.1, 3.0, 4.8, 5.1, 4.1, 3.0, 4.8, 5.1, 4.1, 3.0, 4.8, 5.1, 4.1, 3.0, 4.8, 5.1, 4.1, 3.0, 4.8, 5.1, 4.1, 3.0, 4.8, 5.1, 4.1, 3.0, 4.8, 5.1, 4.1, 3.0, 4.8, 5.1, 4.1, 3.0, 4.8, 5.1, 4.1, 3.0, 4.8, 5.1, 4.1, 3.0, 4.8, 5.1, 4.1, 3.0, 4.8, 5.1, 4.1, 3.0, 4.8, 5.1, 4.1, 3.0, 4.8, 5.1, 4.1, 3.0, 4.8, 5.1, 4.1, 3.0, 4.8, 5.1, 4.1, 3.0, 4.8, 5.1, 4.1, 3.0, 4.8, 5.1, 4.1, 3.0, 4.8, 5.1, 4.1, 3.0, 4.8, 5.1, 4.1, 3.0, 4.8,"}
{"file": "dataset/ori_500/bar_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nmodels = ['Bactrian-X', 'Lima-X', 'Bactrian-X', 'Lima-X']\nimprovement = [3.5, 2.3, 1.5, 0.8]\ncolors = ['blue', 'orange', 'green', 'brown', 'yellow']\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot bars\nfor i, model in enumerate(models):\n    ax.bar(model, improvement[i], color=colors[i % len(colors)])\n\n# Set title and labels\nax.set_title('ENDEFRRITES sampled')\nax.set_xlabel('Model')\nax.set_ylabel('Improve [%]')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\npheme = ['GCN', 'RvNN', 'Hyphen', 'GET', 'WSDMS', 'DELL']\nf1_scores = [0.82, 0.83, 0.81, 0.84, 0.86, 0.89]\nllm_mis = [0.78, 0.79, 0.77, 0.80, 0.82, 0.85]\n\n# Colors\ncolors = ['blue', 'gray', 'red']\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(7, 5))\n\n# Plot F1 scores\nfor i, score in enumerate(f1_scores):\n    ax.barh(pheme[i], score, color=colors[i % len(colors)])\n\n# Plot LLM-mis\nfor i, mis in enumerate(llm_mis):\n    ax.barh(pheme[i], mis, left=f1_scores[i], color=colors[(i + 1) % len(colors)])\n\n# Set labels and title\nax.set_xlabel('F1-score')\nax.set_title('Pheme vs LLM-mis')\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Define the data for the bars\nbars = [\n    [10, 20, 30, 40, 50],\n    [15, 25, 35, 45, 55],\n    [20, 30, 40, 50, 60],\n    [25, 35, 45, 55, 65],\n    [30, 40, 50, 60, 70],\n    [35, 45, 55, 65, 75]\n]\n\n# Define the colors for the bars\ncolors = ['blue', 'green', 'yellow', 'orange', 'red']\n\n# Draw the bars\nfor i, bar in enumerate(bars):\n    ax.bar(range(1, 7), bar, color=colors[i % len(colors)])\n\n# Set the title and labels\nax.set_title('Human Labeling and Agreement Bias Checking')\nax.set_xlabel('Human Annotator')\nax.set_ylabel('Scores')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_16.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the first plot\nx = [0, 100, 200, 300, 400, 500, 600, 700, 800]\ny1 = [0, 0, 0, 0, 0, 0, 0, 0, 0]\ny2 = [0, 0, 0, 0, 0, 0, 0, 0, 0]\ny3 = [0, 0, 0, 0, 0, 0, 0, 0, 0]\ny4 = [0, 0, 0, 0, 0, 0, 0, 0, 0]\ny5 = [0, 0, 0, 0, 0, 0, 0, 0, 0]\ny6 = [0, 0, 0, 0, 0, 0, 0, 0, 0]\n\n# Data for the second plot\nx2 = [0, 100, 200, 300, 400, 500, 600, 700, 800]\ny12 = [0, 0, 0, 0, 0, 0, 0, 0, 0]\ny22 = [0, 0, 0, 0, 0, 0, 0, 0, 0]\ny32 = [0, 0, 0, 0, 0, 0, 0, 0, 0]\ny42 = [0, 0, 0, 0, 0, 0, 0, 0, 0]\ny52 = [0, 0, 0, 0, 0, 0, 0, 0, 0]\ny62 = [0, 0, 0, 0, 0, 0, 0, 0, 0]\n\n# Create the first plot\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\nax.bar(x, y1, color='cyan')\nax.bar(x, y2, color='cyan')\nax.bar(x, y3, color='cyan')\nax.bar(x, y4, color='cyan')\nax.bar(x, y5, color='cyan')\nax.bar(x, y6, color='cyan')\nax.set_title('s1')\nax.set_xlabel('Count')\nax.set_ylabel('Role')\n\n# Create the second plot\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\nax.bar(x2, y12, color='cyan')\nax.bar(x2, y22, color='cyan')\nax.bar(x2, y32, color='cyan')\nax.bar(x2, y42, color='cyan')\nax.bar(x2, y52, color='cyan')\nax.bar(x2, y62, color='cyan')\nax.set_title('s2')\nax.set_xlabel('Count')\nax.set_ylabel('Role')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_17.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ntasks = ['ARC', 'MMLU', 'TruthfulQa', 'Winogrande', 'Average']\naccuracies = [53.0, 51.3, 56.4, 73.1, 53.1]\ncolors = ['skyblue', 'lightblue', 'lightgreen', 'salmon', 'pink']\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(10.0, 4.0))\nbars = ax.bar(tasks, accuracies, color=colors)\n\n# Add labels and title\nax.set_xlabel('Tasks')\nax.set_ylabel('Accuracy (%)')\nax.set_title('Task Accuracy')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_18.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Set the background color of the plot\nax.set_facecolor('lightgrey')\n\n# Set the title of the plot\nax.set_title('Performance Metrics', fontsize=20)\n\n# Set the x-axis label\nax.set_xlabel('Time (s)', fontsize=14)\n\n# Set the y-axis label\nax.set_ylabel('Performance', fontsize=14)\n\n# Set the tick labels for the x-axis\nax.set_xticks([0, 1, 2, 3])\nax.set_xticklabels(['M = 3', 'M = 4', 'M = 5', 'M = 6'])\n\n# Set the tick labels for the y-axis\nax.set_yticks([35, 40, 45, 50, 55, 60, 65, 70, 75])\n\n# Set the grid lines\nax.grid(True)\n\n# Set the color of the grid lines\nax.grid(color='grey', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='minor', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='minor', colors='grey')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelcolor='black')\n\n# Set"}
{"file": "dataset/ori_500/bar_19.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nmatches = [\n    \"DLMA-7B VS. LLAMA-7B\", \n    \"DLMA-7B VS. CD-7B\", \n    \"DLMA-7B VS. RLAIF-7B\", \n    \"DLMA-7B VS. RLCD-7B\", \n    \"DLMA-13B VS. LLAMA-13B\", \n    \"DLMA-13B VS. CD-13B\", \n    \"DLMA-13B VS. RLAIF-13B\", \n    \"DLMA-13B VS. RLCD-13B\"\n]\nwin_rates = [60.2, 60.2, 46.8, 34.7, 62.5, 62.5, 62.5, 49.2]\ntie_rates = [28.8, 28.8, 39.1, 39.1, 27.7, 27.7, 27.7, 36.3]\nloss_rates = [11.0, 11.0, 14.1, 26.2, 9.8, 9.8, 9.8, 14.5]\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\nbar_width = 0.35\nindex = range(len(matches))\n\n# Plot bars for win rates\nbars_win = ax.bar(index, win_rates, bar_width, label='Win Rate', color='#90EE90')\n\n# Plot bars for tie rates\nbars_tie = ax.bar([i + bar_width for i in index], tie_rates, bar_width, label='Tie Rate', color='#ADD8E6')\n\n# Plot bars for loss rates\nbars_loss = ax.bar([i + 2 * bar_width for i in index], loss_rates, bar_width, label='Loss Rate', color='#FF6347')\n\n# Add some text for labels, title, and custom x-axis tick labels, etc.\nax.set_xlabel('Matches')\nax.set_ylabel('Percentage')\nax.set_title('DLMA vs. Baseline Methods On HHH (Evaluated by GPT4)')\nax.set_xticks([i + bar_width for i in index])\nax.set_xticklabels(matches)\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plot\ntime = [0, 10, 20, 30, 40]\ngait = [0.5, 0.7, 0.8, 0.9, 0.95]\ntrot = [0.2, 0.3, 0.4, 0.5, 0.6]\npace = [0.3, 0.4, 0.5, 0.6, 0.7]\nbound = [0.4, 0.5, 0.6, 0.7, 0.8]\npronk = [0.5, 0.6, 0.7, 0.8, 0.9]\ntransition = [0.6, 0.7, 0.8, 0.9, 1.0]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 3.0))\n\n# Plot the gait data\nax.plot(time, gait, label='gait')\n\n# Plot the trot data\nax.bar(time, trot, color='green', alpha=0.5, label='trot')\n\n# Plot the pace data\nax.bar(time, pace, color='red', alpha=0.5, label='pace')\n\n# Plot the bound data\nax.bar(time, bound, color='purple', alpha=0.5, label='bound')\n\n# Plot the pronk data\nax.bar(time, pronk, color='brown', alpha=0.5, label='pronk')\n\n# Plot the transition data\nax.bar(time, transition, color='gray', alpha=0.5, label='transition')\n\n# Set the title and labels\nax.set_title('Gait Distribution Over Time: Policy ORC=111')\nax.set_xlabel('Time (s)')\nax.set_ylabel('% Experiments')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_20.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nbrands = ['LIMA', 'Vicuna', 'Koala', 'Wizardlm', 'Self-Instruct']\nwins = [68, 82, 68, 72, 68]\ntie = [24, 15, 22, 19, 23]\nag_kl = [8, 3, 10, 9, 9]\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\nbars = ax.bar(brands, wins, color='blue')\n\n# Add labels and title\nax.set_xlabel('Brands')\nax.set_ylabel('Wins')\nax.set_title('Brand Performance')\n\n# Add text for each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 2), ha='center', va='bottom')\n\n# Add a legend\nax.legend(['AP-1kL wins', 'Tie', 'AG-1k wins'], loc='upper right')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_21.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ncategories = ['Benefits', 'Reliability', 'Security', 'Privacy']\nbenefits = [14.8, 29.6, 9.4, 24.1]\nreliability = [18.5, 27.8, 33.3, 16.7]\nsecurity = [8.4, 40.7, 45.2, 38.1]\nprivacy = [9.0, 29.6, 33.3, 21.4]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot the data\nax.bar(categories, benefits, color='red')\nax.bar(categories, reliability, bottom=benefits, color='orange')\nax.bar(categories, security, bottom=[sum(x) for x in zip(benefits, reliability)], color='grey')\nax.bar(categories, privacy, bottom=[sum(x) for x in zip(benefits, reliability, security)], color='blue')\n\n# Set the title and labels\nax.set_title('Eye Movement')\nax.set_xlabel('Categories')\nax.set_ylabel('Percentage')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_22.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\nx = [0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3, 1.4, 1.5]\ny1 = [-5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15]\ny2 = [-10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20]\ny3 = [-15, -16, -17, -18, -19, -20, -21, -22, -23, -24, -25]\nx2 = [0.75, 0.85, 0.95, 1.05, 1.15, 1.25, 1.35, 1.45, 1.55, 1.65, 1.75]\ny4 = [-20, -21, -22, -23, -24, -25, -26, -27, -28, -29, -30]\ny5 = [-30, -31, -32, -33, -34, -35, -36, -37, -38, -39, -40]\nx3 = [-150, -140, -130, -120, -110, -100, -90, -80, -70, -60, -50]\ny6 = [-10, -20, -30, -40, -50, -60, -70, -80, -90, -100, -110]\ny7 = [-20, -30, -40, -50, -60, -70, -80, -90, -100, -110, -120]\ny8 = [-30, -40, -50, -60, -70, -80, -90, -100, -110, -120, -130]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 10.0))\n\n# Plot the data\nax.plot(x, y1, color='blue', label='Ours')\nax.plot(x, y2, color='lightblue', label='Saliency-based Sampling')\n\n# Set the title and labels\nax.set_title('Rate of Gain Change (%)')\nax.set_xlabel('Brightness')\nax.set_ylabel('Rate of Gain Change (%)')\n\n# Add a legend\nax.legend()\n\n# Create a second subplot\nax2 = fig.add_subplot(2, 1, 2)\n\n# Plot the data\nax2.plot(x2, y4, color='blue', label='Ours')\nax2.plot(x2, y5, color='lightblue', label='Saliency-based Sampling')\n\n# Set the title and labels\nax2.set_title('Rate of Gain Change (%)')\nax2.set_xlabel('Scale')\nax2.set_ylabel('Rate of Gain Change (%)')\n\n# Add a legend\nax2.legend()\n\n# Create a third subplot\nax3 = fig.add_subplot(2, 1, 3)\n\n# Plot the data\nax3.plot(x3, y6, color='blue', label='Ours')\nax3.plot(x3, y7, color='lightblue', label='Saliency-based Sampling')\n\n# Set the title and labels\nax3.set_title('Rate of Gain Change (%)')\nax3.set_xlabel('Rotation Angle (\u00b0)')\nax3.set_ylabel('Rate of Gain Change (%)')\n\n# Add a legend\nax3.legend()\n\n# Create a fourth subplot\nax4 = fig.add_subplot(2, 1, 4)\n\n# Plot the data\nax4.plot(x3, y8, color='blue', label='Ours')\nax4.plot(x3, y7, color='lightblue', label='Saliency-based Sampling')\n\n# Set the title and labels\nax4.set_title('Rate of Gain Change (%)')\nax4.set_xlabel('Rotation Angle (\u00b0)')\nax4.set_ylabel('Rate of Gain Change (%)')\n\n# Add a legend\nax4.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_23.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nbrands = ['GPT4', 'GPT-few-shot', 'GPT3.5', 'StarCoder', 'Code Llama', 'NCL']\nratings = [\n    [3.2, 3.1, 3.3, 3.4, 3.5],\n    [2.8, 2.7, 2.9, 3.0, 3.1],\n    [2.6, 2.5, 2.7, 2.8, 2.9],\n    [2.4, 2.3, 2.5, 2.6, 2.7],\n    [2.2, 2.1, 2.3, 2.4, 2.5],\n    [2.0, 1.9, 2.1, 2.2, 2.3]\n]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(9.0, 5.0))\n\n# Plot bars\nfor i, brand in enumerate(brands):\n    ax.barh(brand, ratings[i], color='blue')\n\n# Set labels and title\nax.set_xlabel('Ratings')\nax.set_title('Ratings of Language Models on a Scale from 1-4')\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_24.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nmodels = ['Majority', 'Flan-T5', 'GPT-3.5', 'GPT-4', 'Wizard13b', 'Vicuna13b', 'Mistral17b']\naccuracies = [0.302, 0.601, 0.468, 0.653, 0.384, 0.379, 0.364]\n\n# Create a bar chart\nplt.figure(figsize=(8.0, 4.0))\nplt.bar(models, accuracies, color='green')\n\n# Set the title and labels\nplt.title('Model Accuracy')\nplt.xlabel('Models')\nplt.ylabel('Accuracy')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_25.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\nproducts = ['Alpaca-52k+', 'Alpaga-1k+', 'LIMa-1k+']\nsales = [78.8, 67.4, 44.2]\nlosses = [11.7, 18.1, 21.9]\nrevenue = [9.5, 14.5, 19.2]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 4.0))\n\n# Plot bars\nax.barh(products, sales, color='orange', label='Sales')\nax.barh(products, losses, left=sales, color='yellow', label='Losses')\nax.barh(products, revenue, left=[s+l for s, l in zip(sales, losses)], color='blue', label='Revenue')\n\n# Set labels and title\nax.set_xlabel('Values')\nax.set_title('GPT4-as-a-judge')\n\n# Add legend\nax.legend()\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_26.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nemotions = ['Ang', 'Cn', 'Dis', 'Fea', 'Joy', 'Ntr', 'Sad', 'Sur']\nvalues = [320, 150, 100, 120, 200, 380, 100, 50]\n\n# Create a bar chart\nplt.figure(figsize=(6.0, 4.0))\nplt.bar(emotions, values, color=['red', 'green', 'gray', 'orange', 'red', 'gray', 'red', 'yellow'])\n\n# Set labels and title\nplt.xlabel('Emotions')\nplt.ylabel('Frequency')\nplt.title('Emotion Frequency')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_27.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nmodels = ['GPT-4V', 'RoboCodeX']\nsuccess_rates = [0.9, 0.8]\noccupancy_errors = [0.1, 0.2]\ntrajectory_optimization_errors = [0.3, 0.4]\ngripping_collision_errors = [0.5, 0.6]\ngrasping_failed = [0.7, 0.8]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 3.0))\n\n# Plot bars\nax.bar(models, success_rates, color='green', label='Success')\nax.bar(models, occupancy_errors, bottom=success_rates, color='orange', label='Occupancy Error')\nax.bar(models, trajectory_optimization_errors, bottom=[sum(x) for x in zip(success_rates, occupancy_errors)], color='blue', label='Trajectory optimization Error')\nax.bar(models, gripping_collision_errors, bottom=[sum(x) for x in zip(success_rates, occupancy_errors, trajectory_optimization_errors)], color='yellow', label='Gripper collision')\nax.bar(models, grasping_failed, bottom=[sum(x) for x in zip(success_rates, occupancy_errors, trajectory_optimization_errors, gripping_collision_errors)], color='purple', label='Grasping failed')\n\n# Set labels and title\nax.set_xlabel('Model')\nax.set_ylabel('Percentage of total trials')\nax.set_title('Performance Metrics')\nax.legend()\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_28.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 5.0))\n\n# Set the title of the plot\nax.set_title('Transmission Delay (ms)')\n\n# Set the x-axis label\nax.set_xlabel('Datasets')\n\n# Set the y-axis label\nax.set_ylabel('Transmission Delay (ms)')\n\n# Define the data for the bar chart\ndatasets = ['VOC 2012', 'COCO 2017']\ntransmission_delays = [3.5, 2.5]\n\n# Create a bar chart with the data\nax.bar(datasets, transmission_delays, color='lightgray')\n\n# Add a legend to the plot\nlegend_elements = [\n    plt.Line2D([0], [0], marker='o', color='w', label='JPEG', markerfacecolor='orange', markersize=10),\n    plt.Line2D([0], [0], marker='o', color='w', label='DEEPJSCC w/ ofdm', markerfacecolor='red', markersize=10),\n    plt.Line2D([0], [0], marker='o', color='w', label='OURS', markerfacecolor='green', markersize=10)\n]\nax.legend(handles=legend_elements)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_29.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Set the title of the plot\nax.set_title('PDEs')\n\n# Set the x-axis label\nax.set_xlabel('log L2')\n\n# Set the y-axis label\nax.set_ylabel('log L2')\n\n# Set the tick labels for the x-axis\nax.set_xticks([1, 2, 3, 4, 5])\nax.set_xticklabels(['Wave', 'Diffusion', 'Heat', 'Poison', 'N-S'])\n\n# Set the tick labels for the y-axis\nax.set_yticks([1, 2, 3, 4])\nax.set_yticklabels(['1e-1', '1e-2', '1e-3', '1e-4'])\n\n# Set the color bar\ncbar = fig.colorbar(ax.images[0])\n\n# Set the color bar label\ncbar.set_label('RBF-INT RBF-POL RBF-COM')\n\n# Set the color bar ticks\ncbar.set_ticks([0, 1, 2, 3])\n\n# Set the color bar tick labels\ncbar.set_ticklabels(['RBF-INT', 'RBF-POL', 'RBF-COM'])\n\n# Set the color bar orientation\ncbar.ax.set_yticklabels(['RBF-INT', 'RBF-POL', 'RBF-COM'], rotation=90)\n\n# Set the color bar position\ncbar.ax.set_position([0.8, 0.1, 0.05, 0.8])\n\n# Set the color bar aspect\ncbar.ax.set_aspect(10)\n\n# Set the color bar label rotation\ncbar.ax.yaxis.set_label_position('right')\n\n# Set the color bar label horizontal alignment\ncbar.ax.yaxis.label.set_horizontalalignment('left')\n\n# Set the color bar label vertical alignment\ncbar.ax.yaxis.label.set_verticalalignment('center')\n\n# Set the color bar label font size\ncbar.ax.yaxis.label.set_fontsize(12)\n\n# Set the color bar label font weight\ncbar.ax.yaxis.label.set_fontweight('bold')\n\n# Set the color bar label font style\ncbar.ax.yaxis.label.set_fontstyle('italic')\n\n# Set the color bar label font family\ncbar.ax.yaxis.label.set_fontfamily('serif')\n\n# Set the color bar label font variant\ncbar.ax.yaxis.label.set_fontvariant('small-caps')\n\n# Set the color bar label font stretch\ncbar.ax.yaxis.label.set_fontstretch('ultra-condensed')\n\n# Set the color bar label font size\ncbar.ax.yaxis.label.set_fontsize(12)\n\n# Set the color bar label font weight\ncbar.ax.yaxis.label.set_fontweight('bold')\n\n# Set the color bar label font style\ncbar.ax.yaxis.label.set_fontstyle('italic')\n\n# Set the color bar label font family\ncbar.ax.yaxis.label.set_fontfamily('serif')\n\n# Set the color bar label font variant\ncbar.ax.yaxis.label.set_fontvariant('small-caps')\n\n# Set the color bar label font stretch\ncbar.ax.yaxis.label.set_fontstretch('ultra-condensed')\n\n# Set the color bar label font size\ncbar.ax.yaxis.label.set_fontsize(12)\n\n# Set the color bar label font weight\ncbar.ax.yaxis.label.set_fontweight('bold')\n\n# Set the color bar label font style\ncbar.ax.yaxis.label.set_fontstyle('italic')\n\n# Set the color bar label font family\ncbar.ax.yaxis.label.set_fontfamily('serif')\n\n# Set the color bar label font variant\ncbar.ax.yaxis.label.set_fontvariant('small-caps')\n\n# Set the color bar label font stretch\ncbar.ax.yaxis.label.set_fontstretch('ultra-condensed')\n\n# Set the color bar label font size\ncbar.ax.yaxis.label.set_fontsize(12)\n\n# Set the color bar label font weight\ncbar.ax.yaxis.label.set_fontweight('bold')\n\n# Set the color bar label font style\ncbar.ax.yaxis.label.set_fontstyle('italic')\n\n# Set the color bar label font family\ncbar.ax.yaxis.label.set_fontfamily('serif')\n\n# Set the color bar label font variant\ncbar.ax.yaxis.label.set_fontvariant('small-caps')\n\n# Set the color bar label font stretch\ncbar.ax.yaxis.label.set_fontstretch('ultra-condensed')\n\n# Set the color bar label font size\ncbar.ax.yaxis.label.set_fontsize(12)\n\n# Set the color bar label font weight\ncbar.ax.yaxis.label.set_fontweight('bold')\n\n# Set the color bar label font style\ncbar.ax.yaxis.label.set_fontstyle('italic')\n\n# Set the color bar label font family\ncbar.ax.yaxis.label.set_fontfamily('serif')\n\n# Set the color bar label font variant\ncbar.ax.yaxis.label.set_fontvariant('small-caps')\n\n# Set the color bar label font stretch\ncbar.ax.yaxis.label.set_fontstretch('ultra-condensed')\n\n# Set the color bar label font size\ncbar.ax.yaxis.label.set_fontsize(12)\n\n# Set the color bar label font weight\ncbar.ax.yaxis.label.set_fontweight('bold')\n\n# Set the color bar label font style\ncbar.ax.yaxis.label.set_fontstyle('italic')\n\n# Set the color bar label font family\ncbar.ax.yaxis.label.set_fontfamily('serif')\n\n# Set the color bar label font variant\ncbar.ax.yaxis.label.set_fontvariant('small-caps')\n\n# Set the color bar label font stretch\ncbar.ax.yaxis.label.set_fontstretch('ultra-condensed')\n\n# Set the color bar label font size\ncbar.ax.yaxis.label.set_fontsize(12)\n\n# Set the color bar label font weight\ncbar.ax.yaxis.label.set_fontweight('bold')\n\n# Set the color bar label font style\ncbar.ax.yaxis.label.set_fontstyle('italic')\n\n# Set the color bar label font family\ncbar.ax.yaxis.label.set_fontfamily('serif')\n\n# Set the color bar label font variant\ncbar.ax.yaxis.label.set_fontvariant('small-caps')\n\n# Set the color bar label font stretch\ncbar.ax.yaxis.label.set_fontstretch('ultra-condensed')\n\n# Set the color bar label font size\ncbar.ax.yaxis.label.set_fontsize(12)\n\n# Set the color bar label font weight\ncbar.ax.yaxis.label.set_fontweight('bold')\n\n# Set the color bar label font style\ncbar.ax.yaxis.label.set_fontstyle('italic')\n\n# Set the color bar label font family\ncbar.ax.yaxis.label.set_fontfamily('serif')\n\n# Set the color bar label font variant\ncbar.ax.yaxis.label.set_fontvariant('small-caps')\n\n# Set the color bar label font stretch\ncbar.ax.yaxis.label.set_fontstretch('ultra-condensed')\n\n# Set the color bar label font size\ncbar.ax.yaxis.label.set_fontsize(12)\n\n# Set the color bar label font weight\ncbar.ax.yaxis.label.set_fontweight('bold')\n\n# Set the color bar label font style\ncbar.ax.yaxis.label.set_fontstyle('italic')\n\n# Set the color bar label font family\ncbar.ax.yaxis.label.set_fontfamily('serif')\n\n# Set the color bar label font variant\ncbar.ax.yaxis.label.set_fontvariant('small-caps')\n\n# Set the color bar label font stretch\ncbar.ax.yaxis.label.set_fontstretch('ultra-condensed')\n\n# Set the color bar label font size\ncbar.ax.yaxis.label.set_fontsize(12)\n\n# Set the color bar label font weight\ncbar.ax.yaxis.label.set_fontweight('bold')\n\n# Set the color bar label font style\ncbar.ax.yaxis.label.set_fontstyle('italic')\n\n# Set the color bar label font family\ncbar.ax.yaxis.label.set_fontfamily('serif')\n\n# Set the color bar label font variant\ncbar.ax.yaxis.label.set_fontvariant('small-caps')\n\n# Set the color bar label font stretch\ncbar.ax.yaxis.label.set_fontstretch('ultra-condensed')\n\n# Set the color bar label font size\ncbar.ax.yaxis.label.set_fontsize(12)\n\n# Set the color bar label font weight\ncbar.ax.yaxis.label.set_fontweight('bold')\n\n# Set the color bar label font style\ncbar.ax.yaxis.label.set_fontstyle('italic')\n\n# Set the color bar label font family\ncbar.ax.yaxis.label.set_fontfamily('serif')\n\n# Set the color bar label font variant\ncbar.ax.yaxis.label.set_fontvariant('small-caps')\n\n# Set the color bar label font stretch\ncbar.ax.yaxis.label.set_fontstretch('ultra-condensed')\n\n# Set the color bar label font size\ncbar.ax.yaxis.label.set_fontsize(12)\n\n# Set the color bar label font weight\ncbar.ax.yaxis.label.set_fontweight('bold')\n\n# Set the color bar label font style\ncbar.ax.yaxis.label.set_fontstyle('italic')\n\n# Set the color bar label font family\ncbar.ax.yaxis.label.set_fontfamily('serif')\n\n# Set the color bar label font variant\ncbar.ax.yaxis.label.set_fontvariant('small-caps')\n\n# Set the color bar label font stretch\ncbar.ax.yaxis.label.set_fontstretch('ultra-condensed')\n\n# Set the color bar label font size\ncbar.ax.yaxis.label.set_fontsize(12)\n\n# Set the color bar label font weight\ncbar.ax.yaxis.label.set_fontweight('bold')\n\n# Set the color bar label font style\ncbar.ax.yaxis.label.set_fontstyle('italic')\n\n# Set the color bar label font family\ncbar.ax.yaxis.label.set_fontfamily('serif')\n\n# Set the color bar label font variant\ncbar.ax.yaxis.label.set_fontvariant('small-caps')\n\n# Set the color bar label font stretch\ncbar.ax.yaxis.label.set_fontstretch('ultra-condensed')\n\n# Set the color bar label font size\ncbar.ax.yaxis.label.set_fontsize(12)\n\n# Set the color bar label font weight\ncbar.ax.yaxis.label.set_fontweight('bold')\n\n# Set the color bar label font style\ncbar.ax.yaxis.label.set_fontstyle('italic')\n\n# Set the color bar label font family\ncbar.ax.yaxis.label.set_fontfamily('serif')\n\n# Set the color bar label font variant\ncbar.ax.yaxis.label.set_fontvariant('small-caps')\n\n# Set the color bar label font stretch\ncbar.ax.yaxis.label.set_fontstretch('ultra-condensed')\n\n# Set the color bar label font size\ncbar.ax.yaxis.label.set_fontsize(12)\n\n# Set the color bar label font weight\ncbar.ax.yaxis.label.set_fontweight('bold')\n\n# Set the color bar label font style\ncbar.ax.yaxis.label.set_fontstyle('italic')\n\n# Set the color bar label font family\ncbar.ax.yaxis.label.set_fontfamily('serif')\n\n# Set the color bar label font variant\ncbar.ax.yaxis.label.set_fontvariant('small-caps')\n\n# Set the color bar label font stretch\ncbar.ax.yaxis.label.set_fontstretch('ultra-condensed')\n\n# Set the color bar label font size\ncbar.ax.yaxis.label.set_fontsize(12)\n\n# Set the color bar label font weight\ncbar.ax.yaxis.label.set_fontweight('bold')\n\n# Set the color bar label font style\ncbar.ax.yaxis.label.set_fontstyle('italic')\n\n# Set the color bar label font family\ncbar.ax.yaxis.label.set_fontfamily('serif')\n\n# Set the color bar label font variant\ncbar.ax.yaxis.label.set_fontvariant('small-caps')\n\n# Set the color bar label font stretch\ncbar.ax.yaxis.label.set_fontstretch('ultra-condensed')\n\n# Set the color bar label font size\ncbar.ax.yaxis.label.set_fontsize(12)\n\n# Set the color bar label font weight\ncbar.ax.yaxis.label.set_fontweight('bold')\n\n# Set the color bar label font style\ncbar.ax.yaxis.label.set_fontstyle('italic')\n\n# Set the color bar label font family\ncbar.ax.yaxis.label.set_fontfamily('serif')\n\n# Set the color bar label font variant\ncbar.ax.yaxis.label.set_fontvariant('small-caps')\n\n# Set the color bar label font stretch\ncbar.ax.yaxis.label.set_fontstretch('ultra-condensed')\n\n# Set the color bar label font size\ncbar.ax.yaxis.label.set_fontsize(12)\n\n# Set the color bar label font weight\ncbar.ax.yaxis.label.set_fontweight('bold')\n\n# Set the color bar label font style\ncbar.ax.yaxis.label.set_fontstyle('italic')\n\n# Set the color bar label font family\ncbar.ax.yaxis.label.set_fontfamily('serif')\n\n# Set the color bar label font variant\ncbar.ax.yaxis.label.set_fontvariant('small-caps')\n\n# Set the color bar label font stretch\ncbar.ax.yaxis.label.set_fontstretch('ultra-condensed')\n\n# Set the color bar label font size\ncbar.ax.yaxis.label.set_fontsize(12)\n\n# Set the color bar label font weight\ncbar.ax.yaxis.label.set_fontweight('bold')\n\n# Set the color bar label font style\ncbar.ax.yaxis.label.set_fontstyle('italic')\n\n# Set the color bar label font family\ncbar.ax.yaxis.label.set_fontfamily('serif')\n\n# Set the color bar label font variant\ncbar.ax.yaxis.label.set_fontvariant('small-caps')\n\n# Set the color bar label font stretch\ncbar.ax.yaxis.label.set_fontstretch('ultra-condensed')\n\n# Set the color bar label font size\ncbar.ax.yaxis.label.set_fontsize(12)\n\n# Set the color bar label font weight\ncbar.ax.yaxis.label.set_fontweight('bold')\n\n# Set the color bar label font style\ncbar.ax.yaxis.label.set_fontstyle('italic')\n\n# Set the color bar label font family\ncbar.ax.yaxis.label.set_fontfamily('serif')\n\n# Set the color bar label font variant\ncbar.ax.yaxis.label.set_fontvariant('small-caps')\n\n# Set the color bar label font stretch\ncbar.ax.yaxis.label.set_fontstretch('ultra-condensed')\n\n# Set the color bar label font size\ncbar.ax.yaxis.label.set_fontsize(12)\n\n# Set the color bar label font weight\ncbar.ax.yaxis.label.set_fontweight('bold')\n\n# Set the color bar label font style\ncbar.ax.yaxis.label.set_fontstyle('italic')\n\n# Set the color bar label font family\ncbar.ax.yaxis.label.set_fontfamily('serif')\n\n# Set the color bar label font variant\ncbar.ax.yaxis.label.set_fontvariant('small-caps')\n\n# Set the color bar label font stretch\ncbar.ax.yaxis.label.set_fontstretch('ultra-condensed')\n\n# Set the color bar label font size\ncbar.ax.yaxis.label.set_fontsize(12)\n\n# Set the color bar label font weight\ncbar.ax.yaxis.label.set_fontweight('bold')\n\n# Set the color bar label font style\ncbar.ax.yaxis.label.set_fontstyle('italic')\n\n# Set the color bar label font family\ncbar.ax.yaxis.label.set_fontfamily('serif')\n\n# Set the color bar label font variant\ncbar.ax.yaxis.label.set_fontvariant('small-caps')\n\n# Set the color bar label font stretch\ncbar.ax.yaxis.label.set_fontstretch('ultra-condensed')\n\n# Set the color bar label font size\ncbar.ax.yaxis.label.set_fontsize(12)\n\n# Set the color bar label font weight\ncbar.ax.yaxis.label.set_fontweight('bold')\n\n# Set the color bar label font style\ncbar.ax.yaxis.label.set_fontstyle('italic')\n\n# Set the color bar label font family\ncbar.ax.yaxis.label.set_fontfamily('serif')\n\n# Set the color bar label font variant\ncbar.ax.yaxis.label.set_fontvariant('small-caps')\n\n# Set the color bar label font stretch\ncbar.ax.yaxis.label.set_fontstretch('ultra-condensed')\n\n# Set the color bar label font size\ncbar.ax.yaxis.label.set_fontsize(12)\n\n# Set the color bar label font weight\ncbar.ax.yaxis.label.set_fontweight('bold')\n\n# Set the color bar label font style\ncbar.ax.yaxis.label.set_fontstyle('italic')\n\n# Set the color bar label font family\ncbar.ax.yaxis.label.set_fontfamily('serif')\n\n# Set the color bar label font variant\ncbar.ax.yaxis.label.set_fontvariant('small-caps')\n\n# Set the color bar label font stretch\ncbar.ax.yaxis.label.set_fontstretch('ultra-condensed')\n\n# Set the color bar label font size\ncbar.ax.yaxis.label.set_fontsize(12)\n\n# Set the color bar label font weight\ncbar.ax.yaxis.label.set_fontweight('bold')\n\n# Set the color bar label font style\ncbar.ax.yaxis.label.set_fontstyle('italic')\n\n# Set the color bar label font family\ncbar.ax.yaxis.label.set_fontfamily('serif')\n\n# Set the color bar label font variant\ncbar.ax.yaxis.label.set_fontvariant('small-caps')\n\n# Set the color bar label font stretch\ncbar.ax.yaxis.label.set_fontstretch('ultra-condensed')\n\n# Set the color bar label font size\ncbar.ax.yaxis.label.set_fontsize(12)\n\n# Set the color bar label font weight\ncbar.ax.yaxis.label.set_fontweight('bold')\n\n# Set the color bar label font style\ncbar.ax.yaxis.label.set_fontstyle('italic')\n\n# Set the color bar label font family\ncbar.ax.yaxis.label.set_fontfamily('serif')\n\n# Set the color bar label font variant\ncbar.ax.yaxis.label.set_fontvariant('small-caps')\n\n# Set the color bar label font stretch\ncbar.ax.yaxis.label.set_fontstretch('ultra-condensed')\n\n# Set the color bar label font size\ncbar.ax.yaxis.label.set_fontsize(12)\n\n# Set the color bar label font weight\ncbar.ax.yaxis.label.set_fontweight('bold')\n\n# Set the color bar label font style\ncbar.ax.yaxis.label.set_fontstyle('italic')\n\n# Set the color bar label font family\ncbar.ax.yaxis.label.set_fontfamily('serif')\n\n# Set the color bar label font variant\ncbar.ax.yaxis.label.set_fontvariant('small-caps')\n\n# Set the color bar label font stretch\ncbar.ax.yaxis.label.set_fontstretch('ultra-condensed')\n\n# Set the color bar label font size\ncbar.ax.yaxis.label.set_fontsize(12)\n\n# Set the color bar label font weight\ncbar.ax.yaxis.label.set_fontweight('bold')\n\n# Set the color bar label font style\ncbar.ax.yaxis.label.set_fontstyle('italic')\n\n# Set the color bar label font family\ncbar.ax"}
{"file": "dataset/ori_500/bar_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nmodels = ['w/o DaQNR', 'w/o CPRN', 'w/o QCN', 'Full model']\nlive_values = [0.975, 0.975, 0.975, 0.975]\nsroi_values = [0.975, 0.975, 0.975, 0.975]\nt2013_values = [0.975, 0.975, 0.975, 0.975]\nlive_m_values = [0.975, 0.975, 0.975, 0.975]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 3))\n\n# Plot bars for each model\nax.bar(models, live_values, color='blue', label='Live')\nax.bar(models, sroi_values, bottom=live_values, color='orange', label='SROI')\nax.bar(models, t2013_values, bottom=[x + y for x, y in zip(live_values, sroi_values)], color='tan', label='TID2013')\nax.bar(models, live_m_values, bottom=[x + y + z for x, y, z in zip(live_values, sroi_values, t2013_values)], color='green', label='Live-M')\n\n# Set labels and title\nax.set_xlabel('Models')\nax.set_ylabel('Metric Values')\nax.set_title('Models')\n\n# Add legend\nax.legend()\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_30.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nproducts = ['Mixtral-8x7b-Instruct', 'GPT-3.5', 'GPT-4']\none_pass_rates = [6.11, 28.33, 31.11, 44.44, 56.11, 85.0, 60.56, 60.56, 99.44]\ncolors = ['red', 'blue', 'purple']\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\nbars = ax.bar(products, one_pass_rates, color=colors)\n\n# Add labels and title\nax.set_xlabel('Products')\nax.set_ylabel('One pass rate (%)')\nax.set_title('One Pass Rate by Product')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_31.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ncategories = ['LMM-based vs. TPLM-based', 'LMM-based vs. Template', 'LMM-based vs. Markdown', 'TPLM-based vs. Template', 'TPLM-based vs. Markdown', 'Markdown vs. Template']\nwin_percentages = [17.0, 20.0, 25.0, 30.5, 31.5, 19.5]\ntie_percentages = [54.0, 67.5, 56.5, 57.5, 54.5, 61.0]\nloss_percentages = [29.0, 12.5, 18.5, 12.0, 14.0, 19.5]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot bars for win percentages\nax.bar(categories, win_percentages, color='skyblue', label='Win')\n\n# Plot bars for tie percentages\nax.bar(categories, tie_percentages, bottom=win_percentages, color='lightgreen', label='Tie')\n\n# Plot bars for loss percentages\nax.bar(categories, loss_percentages, bottom=[x + y for x, y in zip(win_percentages, tie_percentages)], color='pink', label='Loss')\n\n# Set labels and title\nax.set_xlabel('Categories')\nax.set_ylabel('Percentage')\nax.set_title('Comparison of Win, Tie, and Loss Percentages')\nax.legend()\n\n# Set x-axis limits\nax.set_xlim(0, len(categories))\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_32.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nnames = ['Combat Spider', 'Milky Cow', 'Shear Sheep']\nvalues = [0.72, 0.74, 0.56]\n\n# Create bar chart\nfig, ax = plt.subplots(figsize=(6.0, 2.0))\nax.barh(names, values, color='blue')\n\n# Set title and labels\nax.set_title('Probability of Improvement over VLM Image Encoder Baseline Returns')\nax.set_xlabel('Probability of Improvement')\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_33.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nsteps = [0, 1, 2, 3, 4]\navg_following_rate = [100.0, 60.0, 48.1, 100.0, 91.7]\nfollowing_error_rate = [10.0, 10.0, 10.0, 100.0, 100.0]\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\nax.bar(steps, avg_following_rate, color='gray', label='Avg. Following Rate')\nax.bar(steps, following_error_rate, bottom=avg_following_rate, color='green', label='Following-related Error Rate')\n\n# Set the title and labels\nax.set_title('Instruction Following Results In Different Steps (gpt-3.5-turbo)')\nax.set_xlabel('Steps')\nax.set_ylabel('Scores')\n\n# Set the y-axis limits\nax.set_ylim(0, 12)\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_34.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the plot\ncategories = ['coreutils', 'scp', 'tar', 'exim', 'menc.c', 'niginx', 'memc', 'bzip2', 'astar', 'gcc', 'gobmk', 'h264', 'liba', 'libm', 'libp', 'libq', 'libr', 'libt', 'libu', 'libv', 'libw', 'libx', 'liby', 'libz', 'liba', 'libb', 'libc', 'libd', 'libe', 'libf', 'libg', 'libh', 'libi', 'libj', 'libk', 'libl', 'libm', 'libn', 'libo', 'libp', 'libq', 'libr', 'libs', 'libt', 'libu', 'libv', 'libw', 'libx', 'liby', 'libz', 'liba', 'libb', 'libc', 'libd', 'libe', 'libf', 'libg', 'libh', 'libi', 'libj', 'libk', 'libl', 'libm', 'libn', 'libo', 'libp', 'libq', 'libr', 'libs', 'libt', 'libu', 'libv', 'libw', 'libx', 'liby', 'libz', 'liba', 'libb', 'libc', 'libd', 'libe', 'libf', 'libg', 'libh', 'libi', 'libj', 'libk', 'libl', 'libm', 'libn', 'libo', 'libp', 'libq', 'libr', 'libs', 'libt', 'libu', 'libv', 'libw', 'libx', 'liby', 'libz', 'liba', 'libb', 'libc', 'libd', 'libe', 'libf', 'libg', 'libh', 'libi', 'libj', 'libk', 'libl', 'libm', 'libn', 'libo', 'libp', 'libq', 'libr', 'libs', 'libt', 'libu', 'libv', 'libw', 'libx', 'liby', 'libz', 'liba', 'libb', 'libc', 'libd', 'libe', 'libf', 'libg', 'libh', 'libi', 'libj', 'libk', 'libl', 'libm', 'libn', 'libo', 'libp', 'libq', 'libr', 'libs', 'libt', 'libu', 'libv', 'libw', 'libx', 'liby', 'libz', 'liba', 'libb', 'libc', 'libd', 'libe', 'libf', 'libg', 'libh', 'libi', 'libj', 'libk', 'libl', 'libm', 'libn', 'libo', 'libp', 'libq', 'libr', 'libs', 'libt', 'libu', 'libv', 'libw', 'libx', 'liby', 'libz', 'liba', 'libb', 'libc', 'libd', 'libe', 'libf', 'libg', 'libh', 'libi', 'libj', 'libk', 'libl', 'libm', 'libn', 'libo', 'libp', 'libq', 'libr', 'libs', 'libt', 'libu', 'libv', 'libw', 'libx', 'liby', 'libz', 'liba', 'libb', 'libc', 'libd', 'libe', 'libf', 'libg', 'libh', 'libi', 'libj', 'libk', 'libl', 'libm', 'libn', 'libo', 'libp', 'libq', 'libr', 'libs', 'libt', 'libu', 'libv', 'libw', 'libx', 'liby', 'libz', 'liba', 'libb', 'libc', 'libd', 'libe', 'libf', 'libg', 'libh', 'libi', 'libj', 'libk', 'libl', 'libm', 'libn', 'libo', 'libp', 'libq', 'libr', 'libs', 'libt', 'libu', 'libv', 'libw', 'libx', 'liby', 'libz', 'liba', 'libb', 'libc', 'libd', 'libe', 'libf', 'libg', 'libh', 'libi', 'libj', 'libk', 'libl', 'libm', 'libn', 'libo', 'libp', 'libq', 'libr', 'libs', 'libt', 'libu', 'libv', 'libw', 'libx', 'liby', 'libz', 'liba', 'libb', 'libc', 'libd', 'libe', 'libf', 'libg', 'libh', 'libi', 'libj', 'libk', 'libl', 'libm', 'libn', 'libo', 'libp', 'libq', 'libr', 'libs', 'libt', 'libu', 'libv', 'libw', 'libx', 'liby', 'libz', 'liba', 'libb', 'libc', 'libd', 'libe', 'libf', 'libg', 'libh', 'libi', 'libj', 'libk', 'libl', 'libm', 'libn', 'libo', 'libp', 'libq', 'libr', 'libs', 'libt', 'libu', 'libv', 'libw', 'libx', 'liby', 'libz', 'liba', 'libb', 'libc', 'libd', 'libe', 'libf', 'libg', 'libh', 'libi', 'libj', 'libk', 'libl', 'libm', 'libn', 'libo', 'libp', 'libq', 'libr', 'libs', 'libt', 'libu', 'libv', 'libw', 'libx', 'liby', 'libz', 'liba', 'libb', 'libc', 'libd', 'libe', 'libf', 'libg', 'libh', 'libi', 'libj', 'libk', 'libl', 'libm', 'libn', 'libo', 'libp', 'libq', 'libr', 'libs', 'libt', 'libu', 'libv', 'libw', 'libx', 'liby', 'libz', 'liba', 'libb', 'libc', 'libd', 'libe', 'libf', 'libg', 'libh', 'libi', 'libj', 'libk', 'libl', 'libm', 'libn', 'libo', 'libp', 'libq', 'libr', 'libs', 'libt', 'libu', 'libv', 'libw', 'libx', 'liby', 'libz', 'liba', 'libb', 'libc', 'libd', 'libe', 'libf', 'libg', 'libh', 'libi', 'libj', 'libk', 'libl', 'libm', 'libn', 'libo', 'libp', 'libq', 'libr', 'libs', 'libt', 'libu', 'libv', 'libw', 'libx', 'liby', 'libz', 'liba', 'libb', 'libc', 'libd', 'libe', 'libf', 'libg', 'libh', 'libi', 'libj', 'libk', 'libl', 'libm', 'libn', 'libo', 'libp', 'libq', 'libr', 'libs', 'libt', 'libu', 'libv', 'libw', 'libx', 'liby', 'libz', 'liba', 'libb', 'libc', 'libd', 'libe', 'libf', 'libg', 'libh', 'libi', 'libj', 'libk', 'libl', 'libm', 'libn', 'libo', 'libp', 'libq', 'libr', 'libs', 'libt', 'libu', 'libv', 'libw', 'libx', 'liby', 'libz', 'liba', 'libb', 'libc', 'libd', 'libe', 'libf', 'libg', 'libh', 'libi', 'libj', 'libk', 'libl', 'libm', 'libn', 'libo', 'libp', 'libq', 'libr', 'libs', 'libt', 'libu', 'libv', 'libw', 'libx', 'liby', 'libz', 'liba', 'libb', 'libc', 'libd', 'libe', 'libf', 'libg', 'libh', 'libi', 'libj', 'libk', 'libl', 'libm', 'libn', 'libo', 'libp', 'libq', 'libr', 'libs', 'libt', 'libu', 'libv', 'libw', 'libx', 'liby', 'libz', 'liba', 'libb', 'libc', 'libd', 'libe', 'libf', 'libg', 'libh', 'libi', 'libj', 'libk', 'libl', 'libm', 'libn', 'libo', 'libp', 'libq', 'libr', 'libs', 'libt', 'libu', 'libv', 'libw', 'libx', 'liby', 'libz', 'liba', 'libb', 'libc', 'libd', 'libe', 'libf', 'libg', 'libh', 'libi', 'libj', 'libk', 'libl', 'libm', 'libn', 'libo', 'libp', 'libq', 'libr', 'libs', 'libt', 'libu', 'libv', 'libw', 'libx', 'liby', 'libz', 'liba', 'libb', 'libc', 'libd', 'libe', 'libf', 'libg', 'libh', 'libi', 'libj', 'libk', 'libl', 'libm', 'libn', 'libo', 'libp', 'libq', 'libr', 'libs', 'libt', 'libu', 'libv', 'libw', 'libx', 'liby', 'libz', 'liba', 'libb', 'libc', 'libd', 'libe', 'libf', 'libg', 'libh', 'libi', 'libj', 'libk', 'libl', 'libm', 'libn', 'libo', 'libp', 'libq', 'libr', 'libs', 'libt', 'libu', 'libv', 'libw', 'libx', 'liby', 'libz', 'liba', 'libb', 'libc', 'libd', 'libe', 'libf', 'libg', 'libh', 'libi', 'libj', 'libk', 'libl', 'libm', 'libn', 'libo', 'libp', 'libq', 'libr', 'libs', 'libt', 'libu', 'libv', 'libw', 'libx', 'liby', 'libz', 'liba', 'libb', 'libc', 'libd', 'libe', 'libf', 'libg', 'libh', 'libi', 'libj', 'libk', 'libl', 'libm', 'libn', 'libo', 'libp', 'libq', 'libr', 'libs', 'libt', 'libu', 'libv', 'libw', 'libx', 'liby', 'libz', 'liba', 'libb', 'libc', 'libd', 'libe', 'libf', 'libg', 'libh', 'libi', 'libj', 'libk', 'libl', 'libm', 'libn', 'libo', 'libp', 'libq', 'libr', 'libs', 'libt', 'libu', 'libv', 'libw', 'libx', 'liby', 'libz', 'liba', 'libb', 'libc', 'libd', 'libe', 'libf', 'libg', 'libh', 'libi', 'libj', 'libk', 'libl', 'libm', 'libn', 'libo', 'libp', 'libq', 'libr', 'libs', 'libt', 'libu', 'libv', 'libw', 'libx', 'liby', 'libz', 'liba', 'libb', 'libc', 'libd', 'libe', 'libf', 'libg', 'libh', 'libi', 'libj', 'libk', 'libl', 'libm', 'libn', 'libo', 'libp', 'libq', 'libr', 'libs', 'libt', 'libu', 'libv', 'libw', 'libx', 'liby', 'libz', 'liba', 'libb', 'libc', 'libd', 'libe', 'libf', 'libg', 'libh', 'libi', 'libj', 'libk', 'libl', 'libm', 'libn', 'libo', 'libp', 'libq', 'libr', 'libs', 'libt', 'libu', 'libv', 'libw', 'libx', 'liby', 'libz', 'liba', 'libb', 'libc', 'libd', 'libe', 'libf', 'libg', 'libh', 'libi', 'libj', 'libk', 'libl', 'libm', 'libn', 'libo', 'libp', 'libq', 'libr', 'libs', 'libt', 'libu', 'libv', 'libw', 'libx', 'liby', 'libz', 'liba', 'libb', 'libc', 'libd', 'libe', 'libf', 'libg', 'libh', 'libi', 'libj', 'libk', 'libl', 'libm', 'libn', 'libo', 'libp', 'libq', 'libr', 'libs', 'libt', 'libu', 'libv', 'libw', 'libx', 'liby', 'libz', 'liba', 'libb', 'libc', 'libd', 'libe', 'libf', 'libg', 'libh', 'libi', 'libj', 'libk', 'libl', 'libm', 'libn', 'libo', 'libp', 'libq', 'libr', 'libs', 'libt', 'libu', 'libv', 'libw', 'libx', 'liby', 'libz', 'liba', 'libb', 'libc', 'libd', 'libe', 'libf', 'libg', 'libh', 'libi', 'libj', 'libk', 'libl', 'libm', 'libn', 'libo', 'libp', 'libq', 'libr', 'libs', 'libt', 'libu', 'libv', 'libw', 'libx', 'liby', 'libz', 'liba', 'libb', 'libc', 'libd', 'libe', 'libf', 'libg', 'libh', 'libi', 'libj', 'libk', 'libl', 'libm', 'libn', 'libo', 'libp', 'libq', 'libr', 'libs', 'libt', 'libu', 'libv', 'libw', 'libx', 'liby', 'libz', 'liba', 'libb', 'libc', 'libd', 'libe', 'libf', 'libg', 'libh', 'libi', 'libj', 'libk', 'libl', 'libm', 'libn', 'libo', 'libp', 'libq', 'libr', 'libs', 'libt', 'libu', 'libv', 'libw', 'libx', 'liby', 'libz', 'liba', 'libb', 'libc', 'libd', 'libe', 'libf', 'libg', 'libh', 'libi', 'libj', 'libk', 'libl', 'libm', 'libn', 'libo', 'libp', 'libq', 'libr', 'libs', 'libt', 'libu', 'libv', 'libw', 'libx', 'liby', 'libz', 'liba', 'libb', 'libc', 'libd', 'libe', 'libf', 'libg', 'libh', 'libi', 'libj', 'libk', 'libl', 'libm', 'libn', 'libo', 'libp', 'libq', 'libr', 'libs', 'libt', 'libu', 'libv', 'libw', 'libx', 'liby', 'libz', 'liba', 'libb', 'libc', 'libd', 'libe', 'libf', 'libg', 'libh', 'libi', 'libj', 'libk', 'libl', 'libm', 'libn', 'libo', 'libp', 'libq', 'libr', 'libs', 'libt', 'libu', 'libv', 'libw', 'libx', 'liby', 'libz',"}
{"file": "dataset/ori_500/bar_35.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nbrands = ['Random', 'Uniform', 'G2S', 'S2G', 'ClusterClip']\nscores = [6.9, 7.08, 6.81, 6.75, 6.57]\nmismatch_scores = [5.52, 5.53, 5.83, 5.54, 5.84]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Plot the bars\nax.bar(brands, scores, color='blue')\nax.bar(brands, mismatch_scores, color='red')\n\n# Set the title and labels\nax.set_title('MT-Bench Score vs Mismatch Score')\nax.set_xlabel('Brands')\nax.set_ylabel('Scores')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_36.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nx = [100, 1000]\ny = [49.98, 49.63]\ncolors = ['blue', 'blue']\nwidths = [50, 50]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.61, 5.23))\n\n# Plot the bars\nfor i in range(len(x)):\n    ax.bar(x[i], y[i], color=colors[i], width=widths[i])\n\n# Set the title and labels\nax.set_title('Random Sampling')\nax.set_xlabel('Number of Clusters')\nax.set_ylabel('MMLU')\n\n# Add a horizontal line at the mean of y values\nmean_y = sum(y) / len(y)\nax.axhline(mean_y, color='green', linestyle='-')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_37.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nbrands = ['ResNet18', 'AlexNet', 'ResNet50']\nperturbations = [0, 50, 48, 75, 68, 87.5, 78]\nspeedups = [1.0, 1.8, 2.6, 3.3, 4.6, 4.5, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4,"}
{"file": "dataset/ori_500/bar_38.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the bar chart\nx = ['CL-7b', 'CL-13b', 'CL-34b', 'DS-6.7b', 'DS-33b', 'SC']\ny = [20, 40, 60, 80, 90, 100]\ncolors = ['green', 'blue', 'red', 'purple', 'green', 'blue']\n\n# Create a bar chart with the specified colors and labels\nplt.bar(x, y, color=colors)\n\n# Set the title of the chart\nplt.title('LeetCode, DS-6.7b')\n\n# Set the x-axis label\nplt.xlabel('Test Cases')\n\n# Set the y-axis label\nplt.ylabel('Accuracies')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_39.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ndata = {\n    'Recost (1% wins)': [53, 80, 116, 99, 179],\n    'Tie': [6, 33, 49, 50, 23],\n    'Alpacas wins': [21, 67, 53, 103, 98]\n}\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Plot bars\nfor i, (label, values) in enumerate(data.items()):\n    ax.barh(range(len(values)), values, left=[sum(values[:j]) for j in range(len(values))], height=0.8, label=label)\n\n# Set labels and title\nax.set_xlabel('Wins')\nax.set_title('Player Performance')\nax.legend()\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nbrands = ['CometKiwi', 'LaBSE', 'IF', 'Max', 'Ppl', 'STARE', 'Wass Combo', 'ALTI+']\nfpr_values = [35.15, 26.86, 26.86, 26.86, 58.99, 60.67, 66.19, 66.19]\naggregations = ['Non-Aggregate', 'Aggregate']\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Plot the bars\nfor i, brand in enumerate(brands):\n    ax.barh(brand, fpr_values[i], color='lightgreen' if i % 2 == 0 else 'saddlebrown')\n\n# Add a horizontal line at the median FPR value\nmedian_fpr = sum(fpr_values) / len(fpr_values)\nax.axhline(y=median_fpr, color='r', linestyle='-')\n\n# Set the title\nax.set_title('FPR@90TPR on Guerreiro et al. 2022')\n\n# Set the x-axis label\nax.set_xlabel('FPR@90TPR')\n\n# Set the y-axis label\nax.set_ylabel('Brands')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_40.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ncategories = ['Literal', 'Assignment', 'Operator', 'Comment', 'Operation', 'Exception Handling', 'Method Call', 'External Variable/Method', 'Return', 'Variable', 'External Class', 'Argument', 'Conditional Block', 'Loop', 'Conditional Statement', 'Variable Declaration', 'Method Declaration', 'Parameter']\nvalues = [120, 110, 100, 90, 80, 70, 60, 50, 40, 30, 20, 10, 0, -10, -20, -30, -40, -50]\n\n# Create bar chart\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\nbars = ax.bar(categories, values, color='skyblue')\n\n# Add value labels\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 2), ha='center', va='bottom')\n\n# Set title and labels\nax.set_title('Relative Difference in Machine vs. Human Focus on Semantic Categories')\nax.set_xlabel('Semantic Category')\nax.set_ylabel('Difference (%)')\n\n# Rotate x-axis labels for better visibility\nplt.xticks(rotation=45)\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_41.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nx = [5, 10, 20]\ny1 = [66.3, 61.9, 53.8]\ny2 = [10.1, 13.6, 13.7]\ny3 = [49.3, 45.7, 41.6]\ny4 = [36.3, 31.5, 0]\ny5 = [48.0, 42.6, 36.5]\ny6 = [43.8, 40.2, 30.6]\ny7 = [22.3, 25.9, 22.5]\ny8 = [64.7, 59.6, 43.4]\ny9 = [49.5, 40.5, 36.8]\ny10 = [43.8, 42.8, 40.2]\ny11 = [22.3, 25.9, 22.5]\ny12 = [64.7, 59.6, 43.4]\n\n# Plotting\nfig, ax = plt.subplots(figsize=(14.0, 4.0))\nax.plot(x, y1, label='Truthful: Misleading = 2:0', color='blue')\nax.plot(x, y2, label='Truthful: Misleading = 2:1', color='red')\nax.plot(x, y3, label='Truthful: Misleading = 2:2', color='blue')\nax.plot(x, y4, label='Misleading: Misleading = 2:0', color='red')\nax.plot(x, y5, label='Misleading: Misleading = 2:1', color='blue')\nax.plot(x, y6, label='Misleading: Misleading = 2:2', color='red')\nax.plot(x, y7, label='Truthful: Misleading = 1:2', color='blue')\nax.plot(x, y8, label='Misleading: Misleading = 1:2', color='red')\nax.plot(x, y9, label='Truthful: Misleading = 0:2', color='blue')\nax.plot(x, y10, label='Misleading: Misleading = 0:2', color='red')\nax.plot(x, y11, label='Truthful: Misleading = 0:1', color='blue')\nax.plot(x, y12, label='Misleading: Misleading = 0:1', color='red')\n\n# Setting up the plot\nax.set_xlabel('Time (in minutes)')\nax.set_ylabel('Score')\nax.set_title('Misleading vs Truthful')\nax.legend()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_42.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nmodels = ['PROST', 'ARC-easy', 'COMVE', 'OpenBookQA', 'SciQ', 'NumSense', 'CoQA', 'ComQA2.0', 'ComQC', 'ComQT', 'CyC', 'Winogventi', 'Com2Sense', 'ARC-challenge', 'SocialIQA', 'HellaSWAG-wikiHow', 'HellaSWAG-elem', 'Winogrande', 'PIQA', 'QuaRel', 'SCAT', 'alphaNLI', 'SWAG']\nda_acc_values = [-3.5, -2.5, -2.0, -1.5, -1.0, -0.5, 0.0, 0.5, 1.0, 1.5, 2.0, 2.5, 3.0, 3.5, 4.0, 4.5, 5.0, 5.5, 6.0, 6.5, 7.0, 7.5, 8.0]\n\n# Create a bar chart\nplt.figure(figsize=(8.0, 5.0))\nplt.bar(models, da_acc_values, color='blue')\nplt.xlabel('Model')\nplt.ylabel('\u0394Acc (with STO Rules)')\nplt.title('Model = Vicuna')\nplt.xticks(rotation=90)\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_43.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\ndata = {\n    'MedMCQA': [48.1, 57.2, 59.3, 64.9, 72.3, 79.1, 54.3],\n    'MedQA (USMLE)': [56.0, 62.2, 64.4, 64.4, 67.6, 86.5, 90.2],\n    'PubMed QA': [74.4, 75.8, 76.8, 77.4, 79.0, 81.8, 82.0, 88.0, 90.2, 93.2, 95.2, 98.0, 77.7],\n    'MMLU Anatomy': [55.6, 75.6, 76.5, 78.5, 84.1, 89.6, 66.7],\n    'MMLU Clinical knowledge': [70.2, 69.4, 77.7, 80.4, 88.7, 93.8, 95.8],\n    'MMLU College biology': [78.5, 68.8, 66.7, 68.0, 88.9, 93.2, 95.2],\n    'MMLU Medical genetics': [72.0, 71.0, 76.0, 75.0, 92.0, 93.0, 95.8],\n    'MMLU Professional medicine': [76.0, 71.0, 76.0, 75.0, 92.0, 93.0, 95.8],\n    'Performance Score (%)': [40, 50, 60, 70, 80, 90, 100]\n}\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Plot the data\nfor i, (key, value) in enumerate(data.items()):\n    ax.bar(key, value, color='brown')\n\n# Set the title and labels\nax.set_title('Performance Metrics')\nax.set_xlabel('Metrics')\nax.set_ylabel('Score')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_44.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ncategories = ['AFAN', 'AFBE', 'AFCE', 'AFAO', 'AFEX', 'AFEP', 'AFPK', 'AFPO', 'AFPP', 'AFPR', 'AFSC', 'AFSL', 'AFSR', 'AFSS', 'AFST', 'AFTH', 'AFVT', 'AFWS', 'DAH', 'IC', 'SS']\nvalues = [45, 42, 39, 36, 33, 30, 27, 24, 21, 18, 15, 12, 9, 6, 3, 0, 0, 0, 0, 0]\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\nbars = ax.bar(categories, values, color='blue')\n\n# Add value labels\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 1), ha='center', va='bottom')\n\n# Set the title and labels\nax.set_title('GPT-3.5-Turbo vs GPT-4')\nax.set_xlabel('Categories')\nax.set_ylabel('Non-Negative NLAs')\n\n# Rotate category labels for better visibility\nplt.xticks(rotation=90)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_45.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nx = [3, 5, 7, 9, 11]\ny = [-4.5, -2.5, -1.5, -0.5, 0.5]\ncolors = ['pink', 'red', 'lightblue', 'skyblue', 'darkblue']\nlabels = ['LLAMA-Default', 'LLAMA-HAG', 'Vicuna-Default', 'Vicuna-HAG']\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 7.0))\n\n# Plot the data\nfor i in range(len(x)):\n    ax.bar(x[i], y[i], color=colors[i])\n\n# Set the title and labels\nax.set_title('Taboo')\nax.set_xlabel('Num of Constraint Words')\nax.set_ylabel('Score')\n\n# Add legend\nax.legend(labels)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_46.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nbrands = ['Lavila', 'Video-LLaMA', 'BLIP1', 'BLIP2 Model', 'LLaVA', 'OSCaR', 'GPT4V']\nsales = [0.0, 0.71, 4.64, 4.64, 31.79, 73.93, 82.5]\n\n# Create a bar chart\nplt.figure(figsize=(10.0, 6.0))\nplt.bar(brands, sales, color='skyblue')\n\n# Set title and labels\nplt.title('Human Study')\nplt.xlabel('Brands')\nplt.ylabel('Sales (%)')\n\n# Rotate x-axis labels for better visibility\nplt.xticks(rotation=45)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_47.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\nfig, ax = plt.subplots(figsize=(13.0, 6.0))\n\n# Data for the first bar chart\nx = [0, 20, 40, 60, 80, 100]\ny = [22, 50, 35, 28, 10, 0]\ncolors = ['red', 'orange', 'pink']\nax.barh(x, y, color=colors)\nax.set_title('COPR v.s. Golden (Human Eval)')\nax.set_xlabel('Percentage')\nax.set_ylabel('Category')\n\n# Data for the second bar chart\nx = [0, 20, 40, 60, 80, 100]\ny = [40, 30, 50, 60, 70, 80]\ncolors = ['red', 'orange', 'pink']\nax.barh(x, y, color=colors, left=y)\nax.set_title('COPR v.s. Golden (GPT-4 Eval)')\nax.set_xlabel('Percentage')\nax.set_ylabel('Category')\n\n# Data for the third bar chart\nx = [0, 20, 40, 60, 80, 100]\ny = [45, 50, 20, 35, 40, 55]\ncolors = ['red', 'orange', 'pink']\nax.barh(x, y, color=colors, left=y)\nax.set_title('COPR v.s. DPO-ER (Human Eval)')\nax.set_xlabel('Percentage')\nax.set_ylabel('Category')\n\n# Data for the fourth bar chart\nx = [0, 20, 40, 60, 80, 100]\ny = [40, 30, 50, 60, 70, 80]\ncolors = ['red', 'orange', 'pink']\nax.barh(x, y, color=colors, left=y)\nax.set_title('COPR v.s. DPO-ER (GPT-4 Eval)')\nax.set_xlabel('Percentage')\nax.set_ylabel('Category')\n\n# Data for the fifth bar chart\nx = [0, 20, 40, 60, 80, 100]\ny = [45, 50, 20, 35, 40, 55]\ncolors = ['red', 'orange', 'pink']\nax.barh(x, y, color=colors, left=y)\nax.set_title('COPR v.s. DPO-ER (Human Eval)')\nax.set_xlabel('Percentage')\nax.set_ylabel('Category')\n\n# Data for the sixth bar chart\nx = [0, 20, 40, 60, 80, 100]\ny = [40, 30, 50, 60, 70, 80]\ncolors = ['red', 'orange', 'pink']\nax.barh(x, y, color=colors, left=y)\nax.set_title('COPR v.s. DPO-ER (GPT-4 Eval)')\nax.set_xlabel('Percentage')\nax.set_ylabel('Category')\n\n# Data for the seventh bar chart\nx = [0, 20, 40, 60, 80, 100]\ny = [45, 50, 20, 35, 40, 55]\ncolors = ['red', 'orange', 'pink']\nax.barh(x, y, color=colors, left=y)\nax.set_title('COPR v.s. DPO-ER (Human Eval)')\nax.set_xlabel('Percentage')\nax.set_ylabel('Category')\n\n# Data for the eighth bar chart\nx = [0, 20, 40, 60, 80, 100]\ny = [40, 30, 50, 60, 70, 80]\ncolors = ['red', 'orange', 'pink']\nax.barh(x, y, color=colors, left=y)\nax.set_title('COPR v.s. DPO-ER (GPT-4 Eval)')\nax.set_xlabel('Percentage')\nax.set_ylabel('Category')\n\n# Data for the ninth bar chart\nx = [0, 20, 40, 60, 80, 100]\ny = [45, 50, 20, 35, 40, 55]\ncolors = ['red', 'orange', 'pink']\nax.barh(x, y, color=colors, left=y)\nax.set_title('COPR v.s. DPO-ER (Human Eval)')\nax.set_xlabel('Percentage')\nax.set_ylabel('Category')\n\n# Data for the tenth bar chart\nx = [0, 20, 40, 60, 80, 100]\ny = [40, 30, 50, 60, 70, 80]\ncolors = ['red', 'orange', 'pink']\nax.barh(x, y, color=colors, left=y)\nax.set_title('COPR v.s. DPO-ER (GPT-4 Eval)')\nax.set_xlabel('Percentage')\nax.set_ylabel('Category')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_48.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the first bar chart\ncategories1 = ['Accuracy', 'Unfairness']\nvalues1 = [35, 10]\n\n# Data for the second bar chart\ncategories2 = ['Accuracy', 'Unfairness']\nvalues2 = [18, 8]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(5.0, 6.0))\n\n# Plot the first bar chart\nax.bar(categories1, values1, color=['purple', 'red'], width=0.4)\nax.set_title('a')\nax.set_ylabel('Score')\n\n# Plot the second bar chart\nax2 = ax.twinx()\nax2.bar(categories2, values2, color=['purple', 'red'], width=0.4)\nax2.set_title('b')\nax2.set_ylabel('Score')\n\n# Set the x-axis labels\nax.set_xlabel('Categories')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_49.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nresolutions = [224, 128, 64, 32]\naccuracies = [29, 60, 29, 87]\ncolors = ['blue', 'orange', 'pink', 'blue']\nlabels = ['ImageNet-1k', 'ImageNet (F)', 'PAC-FNO', 'PAC-FNO']\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the bars\nfor i, resolution in enumerate(resolutions):\n    ax.bar(resolution, accuracies[i], color=colors[i], label=labels[i])\n\n# Add a title and labels\nax.set_title('Top-1 Accuracy by Resolution and Method')\nax.set_xlabel('Resolutions')\nax.set_ylabel('Top-1 Acc (%)')\n\n# Add a legend\nax.legend()\n\n# Add a horizontal line at the top of the plot\nax.axhline(y=80, color='b', linestyle='-')\n\n# Add a vertical line at the bottom of the plot\nax.axvline(x=0, color='b', linestyle='-')\n\n# Add a red arrow pointing down\nax.annotate('', xy=(32, 87), xytext=(32, 180),\n             arrowprops=dict(facecolor='red', shrink=0.05))\n\n# Set the y-axis limits\nax.set_ylim(0, 100)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nlabels = ['Level 1', 'Level 2', 'Level 3', 'Level 4']\nvalues = [50.0, 50.0, 50.0, 50.0]\ncolors = ['yellow', 'blue', 'red', 'pink']\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(8.0, 3.0))\nbars = ax.bar(labels, values, color=colors)\n\n# Add labels and title\nax.set_xlabel('Levels')\nax.set_ylabel('# Avg Uploaded Samples')\nax.set_title('Uploads by Level')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_50.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ncategories = ['\u03bb=0.06', '\u03bb=0.08', '\u03bb=0.1']\nrewards = [39.4, 35.18, 30]\nstd_devs = [2.84, 2.084, 2]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 5.0))\n\n# Plot the bars\nbars = ax.bar(categories, rewards, yerr=std_devs, capsize=5)\n\n# Set the title and labels\nax.set_title('Rewards for Different Categories')\nax.set_xlabel('Categories')\nax.set_ylabel('Reward Values')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_51.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\nfig, ax = plt.subplots(figsize=(12.0, 8.0))\n\ncategories = ['Cleaning / laundry', 'Crafting/knitting', 'Baker', 'Carpenter', 'Making Bricks', 'Gardening', 'Construction/renovation', 'Household management', 'Scooter mechanic', 'Farmer']\nvalues = [5375, 4190, 3543, 3216, 2915, 2548, 2343, 2158, 2060, 2008]\n\nax.bar(categories, values, color='blue')\nax.set_title('Number of Videos by Profession')\nax.set_xlabel('Profession')\nax.set_ylabel('Number of Videos')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_52.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ncategories = ['greeting', 'request', 'criticism', 'apology', 'persuasion', 'thanking', 'leave-taking']\nsynthetic_data = [8, 31, 24, 7, 10, 10, 10]\nhuman_authored_data = [16, 28, 11, 5, 15, 16, 9]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Plot the bars\nbars = ax.bar(categories, synthetic_data, color='blue')\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 1), ha='center', va='bottom')\n\nbars = ax.bar(categories, human_authored_data, bottom=synthetic_data, color='red')\nfor bar in bars:\n    yval = bar.get_height() + synthetic_data[bar.get_x()]\n    ax.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 1), ha='center', va='bottom')\n\n# Set the title and labels\nax.set_title('Sentiment Analysis of Synthetic vs Human-Authored Data')\nax.set_xlabel('Sentiment Category')\nax.set_ylabel('Percentage')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_53.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nwords = ['small', 'certain', 'little', 'fraction', 'limited', 'a', 'day', 'few', 'new', 'substantial', 'tiny', 'very', 'wide', 'slight', 'relative', 'moderate', 'handy', 'low']\nprobabilities = [0.25, 0.23, 0.22, 0.21, 0.20, 0.19, 0.18, 0.17, 0.16, 0.15, 0.14, 0.13, 0.12, 0.11, 0.10, 0.09, 0.08, 0.07, 0.06, 0.05, 0.04, 0.03, 0.02, 0.01]\n\n# Create a bar chart\nplt.figure(figsize=(10.0, 8.0))\nplt.bar(words, probabilities, color='lightblue')\nplt.xlabel('Word')\nplt.ylabel('Probability')\nplt.title('Context: The human body can tolerate only a')\n\n# Add colored rectangles at the top of each bar\nfor i, prob in enumerate(probabilities):\n    plt.text(i, prob + 0.01, f'{prob:.2f}', ha='center', va='bottom', fontsize=10)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_54.pdf", "response": "import matplotlib.pyplot as plt\n\n# Data\nmodels = ['Convertible', 'Coupe', 'Sedan', 'Truck', 'SUV']\nprobabilities = [0.75, 0.85, 0.95, 0.8, 0.9]\n\n# Create bar chart\nfig, ax = plt.subplots(figsize=(6.0, 2.0))\nbars = ax.bar(models, probabilities, color=['yellow', 'green', 'blue', 'purple', 'red'])\n\n# Add labels and title\nax.set_xlabel('Probability of Improvement over VLM Image Encoder Baseline Returns')\nax.set_ylabel('Model')\nax.set_title('Probability of Improvement over VLM Image Encoder Baseline Returns')\n\n# Show plot\nplt.show()"}
{"file": "dataset/ori_500/bar_55.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nemotions = ['Disapproval', 'Joy', 'Relief', 'Gratitude', 'Annoyance', 'Nervousness', 'Pride', 'Sadness', 'Unbored', 'Amusement']\nfrequencies = [2.1, 3.0, 3.5, 3.5, 6.0, 6.0, 6.6, 6.7, 7.0, 7.6]\n\n# Create a bar chart\nplt.figure(figsize=(8.0, 8.0))\nbars = plt.bar(emotions, frequencies, color='pink')\n\n# Add labels and title\nplt.xlabel('Emotion')\nplt.ylabel('Frequency (%)')\nplt.title('Emotion Frequency Distribution')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_56.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\nfig, ax = plt.subplots(figsize=(12.0, 8.0))\nax.set_title('Number of Videos by Profession')\nax.set_xlabel('Number of Videos')\nax.set_ylabel('Profession')\n\n# Define the data\nprofessions = ['Making Bricks', 'Carpenter', 'Baker', 'Crafting/Knitting', 'Cleaning/Laundry', 'Gardening']\nvideo_counts = [450, 600, 500, 600, 700, 800]\n\n# Create a bar chart\nbars = ax.bar(professions, video_counts, color='blue')\n\n# Add labels to each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval, round(yval), ha='center', va='bottom')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_57.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the bar chart\ncategories = ['GDP Growth', 'Unemployment Rate', 'Inflation Rate', 'NASDAQ', 'Exchange Rate', 'Real Estate Prices', 'Corporate Profits']\nvalues = [30, 25, 20, 40, 35, 30, 45]\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\nbars = ax.bar(categories, values, color='blue')\n\n# Add labels and title\nax.set_xlabel('Categories')\nax.set_ylabel('Values')\nax.set_title('Economic Indicators')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_58.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ncities = ['New York', 'Los Angeles', 'Chicago', 'Houston', 'Phoenix', 'Philadelphia']\nexcellent = [50, 40, 30, 20, 10, 0]\ngood = [60, 50, 40, 30, 20, 10]\nmoderate = [70, 60, 50, 40, 30, 20]\npoor = [80, 70, 60, 50, 40, 30]\nvery_poor = [90, 80, 70, 60, 50, 40]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot bars\nax.barh(cities, excellent, color='red', label='Excellent')\nax.barh(cities, good, left=excellent, color='pink', label='Good')\nax.barh(cities, moderate, left=[e + g for e, g in zip(excellent, good)], color='lightgrey', label='Moderate')\nax.barh(cities, poor, left=[e + g + m for e, g, m in zip(excellent, good, moderate)], color='skyblue', label='Poor')\nax.barh(cities, very_poor, left=[e + g + m + p for e, g, m, p in zip(excellent, good, moderate, poor)], color='darkblue', label='Very Poor')\n\n# Set title and labels\nax.set_title('City Ratings')\nax.set_xlabel('Rating')\nax.set_ylabel('Cities')\n\n# Add a vertical line at x=50\nax.axvline(x=50, color='black', linestyle='--')\n\n# Add a legend\nax.legend()\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_59.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ncategories = ['External Class', 'Argument', 'Loop', 'Conditional Statement', 'Variable Declaration', 'Method Declaration', 'Parameter']\npositive_differences = [80, 70, 60, 50, 40, 30, 20]\nnegative_differences = [0, 10, 20, 30, 40, 50, 60]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Plot the positive differences\nax.bar(categories, positive_differences, color='green')\n\n# Plot the negative differences\nax.bar(categories, negative_differences, bottom=positive_differences, color='red')\n\n# Set the title and labels\nax.set_title('Relative Difference in Machine vs. Human Focus on Semantic Categories')\nax.set_xlabel('Semantic Category')\nax.set_ylabel('Difference (%)')\n\n# Set the x-axis limits\nax.set_xlim(-80, 80)\n\n# Set the y-axis limits\nax.set_ylim(0, 80)\n\n# Set the color of the rectangle\nax.set_facecolor('lightgrey')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\nemotions = ['Disappointment', 'Embarrassment', 'Oblivious', 'Delight', 'Excitement', 'Disapproval', 'Joy', 'Relief', 'Gratitude', 'Annoyance', 'Nervousness', 'Pride', 'Sadness', 'Unboredom', 'Amusement']\nfrequencies = [7, 6, 5, 4, 3, 2, 1, 0.5, 0.3, 0.2, 0.1, 0.05, 0.03, 0.01, 0]\n\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\nax.bar(emotions, frequencies, color='skyblue')\nax.set_xlabel('Emotion')\nax.set_ylabel('Frequency (%)')\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_60.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ncompanies = ['FMLP-Rec', 'BERT4Rec', 'SASRec', 'Case', 'GRU4Rec']\nperformance = [-7.0, -8.5, -10.0, -15.9, -19.7]\ncolors = ['red', 'blue', 'green', 'purple', 'orange']\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\nbars = ax.bar(companies, performance, color=colors)\n\n# Add labels and title\nax.set_xlabel('Companies')\nax.set_ylabel('Performance (%)')\nax.set_title('Company Performance')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_61.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\npatents = [100, 200, 300, 400, 500]\nresearch = [150, 250, 350, 450, 550]\nusage = [200, 300, 400, 500, 600]\npenetration = [250, 350, 450, 550, 650]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Set the title of the chart\nax.set_title('Tech Metrics')\n\n# Set the x-axis label\nax.set_xlabel('Year')\n\n# Set the y-axis label\nax.set_ylabel('Metrics')\n\n# Set the x-ticks\nax.set_xticks(range(len(patents)))\nax.set_xticklabels(['2010', '2015', '2020', '2025', '2030'])\n\n# Set the y-ticks\nax.set_yticks(range(0, 700, 100))\nax.set_yticklabels(['0', '100', '200', '300', '400', '500', '600'])\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('red')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('green')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Plot the data\nax.plot(patents, 'ro-', label='Patents Filed')\nax.plot(research, 'go-', label='Research Investment')\nax.plot(usage, 'bo-', label='Smartphone Usage')\nax.plot(penetration, 'mo-', label='Internet Penetration')\n\n# Show the legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_62.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\ncategories = ['greeting', 'request', 'criticism', 'apology', 'persuasion', 'thanking', 'leave-taking']\nsynthetic_data = [12, 35, 28, 15, 18, 14, 16]\nhuman_authored_data = [18, 32, 15, 8, 20, 22, 12]\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\nbars = ax.bar(categories, synthetic_data, color='blue')\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 1), ha='center', va='bottom')\n\n# Add a vertical line\nax.axvline(x=3.5, color='black', linestyle='-')\n\n# Set the title and labels\nax.set_title('Sentiment Analysis of Synthetic Data vs Human-Authored Data')\nax.set_xlabel('Sentiment Category')\nax.set_ylabel('Percentage')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_63.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\ncategories = ['Attack on Titan', 'Game of Thrones', 'The Count of Monte Cristo', 'Demi-Gods and Semi-Devils', 'Notre-Dame de Paris']\nscores = [0.5, 0.6, 0.4, 0.3, 0.7]\n\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\nax.bar(categories, scores, color='blue')\nax.set_title('Scores by Category Over Time')\nax.set_xlabel('Categories')\nax.set_ylabel('Scores')\n\n# Add colored rectangles for time options\ntime_options = ['Time 0', 'Time 20', 'Time 40', 'Time 60']\ncolors = ['black', 'blue', 'purple', 'skyblue']\nfor i, option in enumerate(time_options):\n    ax.add_patch(plt.Rectangle((i, 0), 1, 0.1, color=colors[i]))\n    ax.text(i + 0.5, 0.05, option, ha='center', va='center')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_64.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\nregions = ['West', 'East', 'South', 'North']\nmetrics = [54.46, 56.03, 92.15, 65.49]\nconcentrations = [\n    [11.59, 25.36, 23.38, 32.19, 40.44],\n    [17.38, 25.36, 17.38, 32.19, 40.44],\n    [39.63, 39.63, 39.63, 39.63, 40.44],\n    [32.84, 32.84, 32.84, 32.84, 40.44]\n]\n\nfig, ax = plt.subplots(figsize=(10.0, 7.0))\nax.set_title('Air Quality Metrics by Region')\nax.set_xlabel('Concentration (ppm)')\nax.set_ylabel('Regions')\n\nfor region, metric, concentration in zip(regions, metrics, concentrations):\n    ax.bar(region, metric, color='skyblue')\n    for i, value in enumerate(concentration):\n        ax.text(i, value + 1, str(value), ha='center', va='bottom')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_65.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nbrands = ['LLAMA-Default', 'LLAMA-HAG', 'Vicuna-Default', 'Vicuna-HAG']\nscores = [-2.2, -2.3, -3.3, -3.2]\nconstraint_words = [3, 5, 7, 10]\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\nbars = ax.bar(brands, scores, color='blue')\n\n# Add labels and title\nax.set_xlabel('Brands')\nax.set_ylabel('Scores by group and constraint word count')\nax.set_title('Scores by group and constraint word count')\nax.set_xticks(range(len(brands)))\nax.set_xticklabels(brands)\nax.grid(True)\n\n# Add constraint words as annotations\nfor i, v in enumerate(constraint_words):\n    ax.text(i, -4, f'{v} Constraint Words', ha='center', va='bottom')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_66.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ncountries = ['USA', 'China', 'Germany', 'Brazil']\ngdp_growth_rates = [-0.5, -0.3, -0.4, -0.2]\ncolors = ['red', 'green', 'blue', 'purple']\n\n# Create a bar chart\nplt.figure(figsize=(10.0, 6.0))\nbars = plt.bar(countries, gdp_growth_rates, color=colors)\n\n# Add labels and title\nplt.xlabel('Country')\nplt.ylabel('GDP Growth Rate (%)')\nplt.title('Negative GDP Growth Rates by Country and Year')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_67.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nmodels = ['GPT4V', 'OSCaR', 'LLaVA', 'BLIP2', 'BLIP1', 'Video-LLMA', 'Lavia']\nperformance = [82.5, 73.93, 31.79, 4.64, 4.64, 0.71, 0.0]\n\n# Create a bar chart\nplt.figure(figsize=(12.0, 8.0))\nplt.bar(models, performance, color='blue')\nplt.title('Human Study')\nplt.xlabel('Model')\nplt.ylabel('Percentage (%)')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_68.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ncategories = ['Traffic Flow', 'Accident Rate', 'Public Transport Usage', 'Road Condition']\nvalues = [50, 20, 40, 80]\ncolors = ['blue', 'cyan', 'lightblue', 'darkblue']\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(10, 6))\nbars = ax.bar(categories, values, color=colors)\n\n# Add value labels\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 2), ha='center', va='bottom')\n\n# Set title and labels\nax.set_title('Stacked Bar Chart of Transportation Data')\nax.set_xlabel('Categories')\nax.set_ylabel('Values')\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_69.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\ncategories = ['Category A', 'Category B', 'Category C', 'Category D', 'Category E', 'Category F', 'Category G']\nsales_units = [80, 60, 40, 20, 0, 20, 40]\nproduct_a_sales = [50, 30, 10, 0, 0, 0, 0]\nproduct_c_sales = [70, 50, 30, 10, 0, 0, 0]\nproduct_e_sales = [90, 70, 50, 30, 10, 0, 0]\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(10.0, 7.0))\nax.bar(categories, sales_units, color='orange')\nax.bar(categories, product_a_sales, bottom=sales_units, color='red')\nax.bar(categories, product_c_sales, bottom=[sum(x) for x in zip(sales_units, product_a_sales)], color='pink')\nax.bar(categories, product_e_sales, bottom=[sum(x) for x in zip(sales_units, product_a_sales, product_c_sales)], color='yellow')\n\n# Add labels and title\nax.set_xlabel('Product Categories')\nax.set_ylabel('Sales Units')\nax.set_title('Enhanced Stacked Bar Chart with Textures and Annotated Values')\n\n# Add a legend\nlegend_labels = ['Product A Sales', 'Product C Sales', 'Product E Sales']\nax.legend(legend_labels, loc='upper right')\n\n# Add a horizontal line at the top of the chart\nax.axhline(y=80, color='black', linestyle='-')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ncategories = ['SEQ', 'REPLAY', 'MTL']\naccuracies = [0.83, 0.6, 0.11]\nembedding_distances = [-9.44, -9.12, -3.67]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot bars for accuracies\nfor i, accuracy in enumerate(accuracies):\n    ax.bar(categories[i], accuracy, color='lightgreen')\n\n# Set labels and title\nax.set_xlabel('Categories')\nax.set_ylabel('Accuracy (%)')\nax.set_title('Feature Embedding Distance')\n\n# Add embedding distances as text annotations\nfor i, distance in enumerate(embedding_distances):\n    ax.text(i, 0.5, f'{distance}', ha='center', va='bottom')\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_70.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nscores = [10, 8, 12, 10, 6, 8, 12, 10, 8, 15]\nlabels = ['Score 1', 'Score 2', 'Score 3', 'Score 4', 'Score 5']\ncolors = ['skyblue', 'lightgreen', 'lightseagreen', 'lightskyblue', 'lavender']\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Plot the bars\nbars = ax.bar(labels, scores, color=colors)\n\n# Add labels and title\nax.set_xlabel('Scores')\nax.set_ylabel('Human Annotator')\nax.set_title('Human Labeling and Agreement Bias Checking')\n\n# Set the x-axis tick labels\nax.set_xticks(range(len(labels)))\nax.set_xticklabels(labels)\n\n# Set the y-axis limits\nax.set_ylim(0, 50)\n\n# Draw a horizontal line at the middle of the plot\nax.axhline(y=25, color='gray', linestyle='--')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_71.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the bar chart\ncategories = ['coreutils', 'gizip', 'scp', 'libq', 'mcf', 'omnet.', 'perl']\nvalues = [90, 70, 60, 50, 40, 30, 20]\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(8.0, 4.0))\nax.bar(categories, values, color='blue')\n\n# Add a title and labels\nax.set_title('Bar Chart')\nax.set_xlabel('Categories')\nax.set_ylabel('Values')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_72.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nbrands = ['Bactrian-X EN', 'Lima-X DE', 'Bactrian-X FR', 'Lima-X IT', 'Bactrian-X ES']\nimprovement = [3.5, 2.3, 4.4, 1.3, 0.7]\nlanguages = ['EN', 'DE', 'FR', 'IT', 'ES']\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot bars\nfor i, imp in enumerate(improvement):\n    ax.barh(i, imp, color='blue')\n\n# Set labels and title\nax.set_xlabel('Model Performance (%)')\nax.set_title('Model Performance Improvement by Language')\n\n# Set y-axis ticks and labels\nax.set_yticks(range(len(brands)))\nax.set_yticklabels(brands)\n\n# Set x-axis limits\nax.set_xlim(-1, 5)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_73.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nfiscal_quarter = [1, 2, 3, 4, 5]\ndow_jones_index = [0.5, 1.5, 2.2, 3.9, 4.6]\nnasdaq_index = [-0.6, -0.8, -1.2, -1.2, -1.2]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Plot the Dow Jones Index\nax.bar(fiscal_quarter, dow_jones_index, color='green', label='Dow Jones Index')\n\n# Plot the Nasdaq Index\nax.bar(fiscal_quarter, nasdaq_index, bottom=dow_jones_index, color='orange', label='Nasdaq Index')\n\n# Set the title and labels\nax.set_title('Index Change (%)')\nax.set_xlabel('Fiscal Quarter')\nax.set_ylabel('Index Change (%)')\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_74.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nx = ['E16.6', 'L26.8', 'D19.7', 'L22.2']\ny = [39.4, 34.06, 30.84, 34.06]\ncolors = ['pink', 'lightblue', 'lightgreen', 'orange']\nlabels = ['\u03bb=0.06', '\u03bb=0.08', '\u03bb=0.1']\n\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Plot bars\nfor i, (xi, yi, ci) in enumerate(zip(x, y, colors)):\n    ax.bar(xi, yi, color=ci)\n\n# Add labels\nfor xi, yi, li in zip(x, y, labels):\n    ax.text(xi, yi + 1, li, ha='center')\n\n# Set limits and ticks\nax.set_xlim(-1, len(x))\nax.set_ylim(0, 40)\nax.set_yticks(range(0, 41, 10))\nax.set_xticks(range(len(x)))\nax.set_xticklabels(x)\n\n# Add categories\nax.text(0.5, 42, 'Categories', ha='center', va='bottom')\nax.text(0.5, 43, '\u03bb=0.06', ha='center', va='bottom', color='pink')\nax.text(1.5, 43, '\u03bb=0.08', ha='center', va='bottom', color='lightblue')\nax.text(2.5, 43, '\u03bb=0.1', ha='center', va='bottom', color='lightgreen')\n\n# Add rectangles for categories\nax.add_patch(plt.Rectangle((0.25, 42), 0.5, 0.5, color='pink'))\nax.add_patch(plt.Rectangle((1.25, 42), 0.5, 0.5, color='lightblue'))\nax.add_patch(plt.Rectangle((2.25, 42), 0.5, 0.5, color='lightgreen'))\n\n# Add rectangles for values\nax.add_patch(plt.Rectangle((-0.5, 0), 1, 40, color='pink'))\nax.add_patch(plt.Rectangle((0.5, 0), 1, 40, color='lightblue'))\nax.add_patch(plt.Rectangle((1.5, 0), 1, 40, color='lightgreen'))\n\n# Add rectangles for series labels\nax.add_patch(plt.Rectangle((-0.5, 42), 1, 0.5, color='pink'))\nax.add_patch(plt.Rectangle((0.5, 42), 1, 0.5, color='lightblue'))\nax.add_patch(plt.Rectangle((1.5, 42), 1, 0.5, color='lightgreen'))\n\n# Add rectangles for series values\nax.add_patch(plt.Rectangle((-0.5, 0), 1, 40, color='pink'))\nax.add_patch(plt.Rectangle((0.5, 0), 1, 40, color='lightblue'))\nax.add_patch(plt.Rectangle((1.5, 0), 1, 40, color='lightgreen'))\n\n# Add rectangles for series labels\nax.add_patch(plt.Rectangle((-0.5, 42), 1, 0.5, color='pink'))\nax.add_patch(plt.Rectangle((0.5, 42), 1, 0.5, color='lightblue'))\nax.add_patch(plt.Rectangle((1.5, 42), 1, 0.5, color='lightgreen'))\n\n# Add rectangles for series values\nax.add_patch(plt.Rectangle((-0.5, 0), 1, 40, color='pink'))\nax.add_patch(plt.Rectangle((0.5, 0), 1, 40, color='lightblue'))\nax.add_patch(plt.Rectangle((1.5, 0), 1, 40, color='lightgreen'))\n\n# Add rectangles for series labels\nax.add_patch(plt.Rectangle((-0.5, 42), 1, 0.5, color='pink'))\nax.add_patch(plt.Rectangle((0.5, 42), 1, 0.5, color='lightblue'))\nax.add_patch(plt.Rectangle((1.5, 42), 1, 0.5, color='lightgreen'))\n\n# Add rectangles for series values\nax.add_patch(plt.Rectangle((-0.5, 0), 1, 40, color='pink'))\nax.add_patch(plt.Rectangle((0.5, 0), 1, 40, color='lightblue'))\nax.add_patch(plt.Rectangle((1.5, 0), 1, 40, color='lightgreen'))\n\n# Add rectangles for series labels\nax.add_patch(plt.Rectangle((-0.5, 42), 1, 0.5, color='pink'))\nax.add_patch(plt.Rectangle((0.5, 42), 1, 0.5, color='lightblue'))\nax.add_patch(plt.Rectangle((1.5, 42), 1, 0.5, color='lightgreen'))\n\n# Add rectangles for series values\nax.add_patch(plt.Rectangle((-0.5, 0), 1, 40, color='pink'))\nax.add_patch(plt.Rectangle((0.5, 0), 1, 40, color='lightblue'))\nax.add_patch(plt.Rectangle((1.5, 0), 1, 40, color='lightgreen'))\n\n# Add rectangles for series labels\nax.add_patch(plt.Rectangle((-0.5, 42), 1, 0.5, color='pink'))\nax.add_patch(plt.Rectangle((0.5, 42), 1, 0.5, color='lightblue'))\nax.add_patch(plt.Rectangle((1.5, 42), 1, 0.5, color='lightgreen'))\n\n# Add rectangles for series values\nax.add_patch(plt.Rectangle((-0.5, 0), 1, 40, color='pink'))\nax.add_patch(plt.Rectangle((0.5, 0), 1, 40, color='lightblue'))\nax.add_patch(plt.Rectangle((1.5, 0), 1, 40, color='lightgreen'))\n\n# Add rectangles for series labels\nax.add_patch(plt.Rectangle((-0.5, 42), 1, 0.5, color='pink'))\nax.add_patch(plt.Rectangle((0.5, 42), 1, 0.5, color='lightblue'))\nax.add_patch(plt.Rectangle((1.5, 42), 1, 0.5, color='lightgreen'))\n\n# Add rectangles for series values\nax.add_patch(plt.Rectangle((-0.5, 0), 1, 40, color='pink'))\nax.add_patch(plt.Rectangle((0.5, 0), 1, 40, color='lightblue'))\nax.add_patch(plt.Rectangle((1.5, 0), 1, 40, color='lightgreen'))\n\n# Add rectangles for series labels\nax.add_patch(plt.Rectangle((-0.5, 42), 1, 0.5, color='pink'))\nax.add_patch(plt.Rectangle((0.5, 42), 1, 0.5, color='lightblue'))\nax.add_patch(plt.Rectangle((1.5, 42), 1, 0.5, color='lightgreen'))\n\n# Add rectangles for series values\nax.add_patch(plt.Rectangle((-0.5, 0), 1, 40, color='pink'))\nax.add_patch(plt.Rectangle((0.5, 0), 1, 40, color='lightblue'))\nax.add_patch(plt.Rectangle((1.5, 0), 1, 40, color='lightgreen'))\n\n# Add rectangles for series labels\nax.add_patch(plt.Rectangle((-0.5, 42), 1, 0.5, color='pink'))\nax.add_patch(plt.Rectangle((0.5, 42), 1, 0.5, color='lightblue'))\nax.add_patch(plt.Rectangle((1.5, 42), 1, 0.5, color='lightgreen'))\n\n# Add rectangles for series values\nax.add_patch(plt.Rectangle((-0.5, 0), 1, 40, color='pink'))\nax.add_patch(plt.Rectangle((0.5, 0), 1, 40, color='lightblue'))\nax.add_patch(plt.Rectangle((1.5, 0), 1, 40, color='lightgreen'))\n\n# Add rectangles for series labels\nax.add_patch(plt.Rectangle((-0.5, 42), 1, 0.5, color='pink'))\nax.add_patch(plt.Rectangle((0.5, 42), 1, 0.5, color='lightblue'))\nax.add_patch(plt.Rectangle((1.5, 42), 1, 0.5, color='lightgreen'))\n\n# Add rectangles for series values\nax.add_patch(plt.Rectangle((-0.5, 0), 1, 40, color='pink'))\nax.add_patch(plt.Rectangle((0.5, 0), 1, 40, color='lightblue'))\nax.add_patch(plt.Rectangle((1.5, 0), 1, 40, color='lightgreen'))\n\n# Add rectangles for series labels\nax.add_patch(plt.Rectangle((-0.5, 42), 1, 0.5, color='pink'))\nax.add_patch(plt.Rectangle((0.5, 42), 1, 0.5, color='lightblue'))\nax.add_patch(plt.Rectangle((1.5, 42), 1, 0.5, color='lightgreen'))\n\n# Add rectangles for series values\nax.add_patch(plt.Rectangle((-0.5, 0), 1, 40, color='pink'))\nax.add_patch(plt.Rectangle((0.5, 0), 1, 40, color='lightblue'))\nax.add_patch(plt.Rectangle((1.5, 0), 1, 40, color='lightgreen'))\n\n# Add rectangles for series labels\nax.add_patch(plt.Rectangle((-0.5, 42), 1, 0.5, color='pink'))\nax.add_patch(plt.Rectangle((0.5, 42), 1, 0.5, color='lightblue'))\nax.add_patch(plt.Rectangle((1.5, 42), 1, 0.5, color='lightgreen'))\n\n# Add rectangles for series values\nax.add_patch(plt.Rectangle((-0.5, 0), 1, 40, color='pink'))\nax.add_patch(plt.Rectangle((0.5, 0), 1, 40, color='lightblue'))\nax.add_patch(plt.Rectangle((1.5, 0), 1, 40, color='lightgreen'))\n\n# Add rectangles for series labels\nax.add_patch(plt.Rectangle((-0.5, 42), 1, 0.5, color='pink'))\nax.add_patch(plt.Rectangle((0.5, 42), 1, 0.5, color='lightblue'))\nax.add_patch(plt.Rectangle((1.5, 42), 1, 0.5, color='lightgreen'))\n\n# Add rectangles for series values\nax.add_patch(plt.Rectangle((-0.5, 0), 1, 40, color='pink'))\nax.add_patch(plt.Rectangle((0.5, 0), 1, 40, color='lightblue'))\nax.add_patch(plt.Rectangle((1.5, 0), 1, 40, color='lightgreen'))\n\n# Add rectangles for series labels\nax.add_patch(plt.Rectangle((-0.5, 42), 1, 0.5, color='pink'))\nax.add_patch(plt.Rectangle((0.5, 42), 1, 0.5, color='lightblue'))\nax.add_patch(plt.Rectangle((1.5, 42), 1, 0.5, color='lightgreen'))\n\n# Add rectangles for series values\nax.add_patch(plt.Rectangle((-0.5, 0), 1, 40, color='pink'))\nax.add_patch(plt.Rectangle((0.5, 0), 1, 40, color='lightblue'))\nax.add_patch(plt.Rectangle((1.5, 0), 1, 40, color='lightgreen'))\n\n# Add rectangles for series labels\nax.add_patch(plt.Rectangle((-0.5, 42), 1, 0.5, color='pink'))\nax.add_patch(plt.Rectangle((0.5, 42), 1, 0.5, color='lightblue'))\nax.add_patch(plt.Rectangle((1.5, 42), 1, 0.5, color='lightgreen'))\n\n# Add rectangles for series values\nax.add_patch(plt.Rectangle((-0.5, 0), 1, 40, color='pink'))\nax.add_patch(plt.Rectangle((0.5, 0), 1, 40, color='lightblue'))\nax.add_patch(plt.Rectangle((1.5, 0), 1, 40, color='lightgreen'))\n\n# Add rectangles for series labels\nax.add_patch(plt.Rectangle((-0.5, 42), 1, 0.5, color='pink'))\nax.add_patch(plt.Rectangle((0.5, 42), 1, 0.5, color='lightblue'))\nax.add_patch(plt.Rectangle((1.5, 42), 1, 0.5, color='lightgreen'))\n\n# Add rectangles for series values\nax.add_patch(plt.Rectangle((-0.5, 0), 1, 40, color='pink'))\nax.add_patch(plt.Rectangle((0.5, 0), 1, 40, color='lightblue'))\nax.add_patch(plt.Rectangle((1.5, 0), 1, 40, color='lightgreen'))\n\n# Add rectangles for series labels\nax.add_patch(plt.Rectangle((-0.5, 42), 1, 0.5, color='pink'))\nax.add_patch(plt.Rectangle((0.5, 42), 1, 0.5, color='lightblue'))\nax.add_patch(plt.Rectangle((1.5, 42), 1, 0.5, color='lightgreen'))\n\n# Add rectangles for series values\nax.add_patch(plt.Rectangle((-0.5, 0), 1, 40, color='pink'))\nax.add_patch(plt.Rectangle((0.5, 0), 1, 40, color='lightblue'))\nax.add_patch(plt.Rectangle((1.5, 0), 1, 40, color='lightgreen'))\n\n# Add rectangles for series labels\nax.add_patch(plt.Rectangle((-0.5, 42), 1, 0.5, color='pink'))\nax.add_patch(plt.Rectangle((0.5, 42), 1, 0.5, color='lightblue'))\nax.add_patch(plt.Rectangle((1.5, 42), 1, 0.5, color='lightgreen'))\n\n# Add rectangles for series values\nax.add_patch(plt.Rectangle((-0.5, 0), 1, 40, color='pink'))\nax.add_patch(plt.Rectangle((0.5, 0), 1, 40, color='lightblue'))\nax.add_patch(plt.Rectangle((1.5, 0), 1, 40, color='lightgreen'))\n\n# Add rectangles for series labels\nax.add_patch(plt.Rectangle((-0.5, 42), 1, 0.5, color='pink'))\nax.add_patch(plt.Rectangle((0.5, 42), 1, 0.5, color='lightblue'))\nax.add_patch(plt.Rectangle((1.5, 42), 1, 0.5, color='lightgreen'))\n\n# Add rectangles for series values\nax.add_patch(plt.Rectangle((-0.5, 0), 1, 40, color='pink'))\nax.add_patch(plt.Rectangle((0.5, 0), 1, 40, color='lightblue'))\nax.add_patch(plt.Rectangle((1.5, 0), 1, 40, color='lightgreen'))\n\n# Add rectangles for series labels\nax.add_patch(plt.Rectangle((-0.5, 42), 1, 0.5, color='pink'))\nax.add_patch(plt.Rectangle((0.5, 42), 1, 0.5, color='lightblue'))\nax.add_patch(plt.Rectangle((1.5, 42), 1, 0.5, color='lightgreen'))\n\n# Add rectangles for series values\nax.add_patch(plt.Rectangle((-0.5, 0), 1, 40, color='pink'))\nax.add_patch(plt.Rectangle((0.5, 0), 1, 40, color='lightblue'))\nax.add_patch(plt.Rectangle((1.5, 0), 1, 40, color='lightgreen'))\n\n# Add rectangles for series labels\nax.add_patch(plt.Rectangle((-0.5, 42), 1, 0.5, color='pink'))\nax.add_patch(plt.Rectangle((0.5, 42), 1, 0.5, color='lightblue'))\nax.add_patch(plt.Rectangle((1.5, 42), 1, 0.5, color='lightgreen'))\n\n# Add rectangles for series values\nax.add_patch(plt.Rectangle((-0.5, 0), 1, 40, color='pink'))\nax.add_patch(plt.Rectangle((0.5, 0), 1, 40, color='lightblue'))\nax.add_patch(plt.Rectangle((1.5, 0), 1, 40, color='lightgreen'))\n\n# Add rectangles for series labels\nax.add_patch(plt.Rectangle((-0.5, 42), 1, 0.5, color='pink'))\nax.add_patch(plt.Rectangle((0.5, 42), 1, 0.5, color='lightblue'))\nax.add_patch"}
{"file": "dataset/ori_500/bar_75.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\ntruthful_recall = [30.1, 34, 43.7]\nmisleading_recall = [46.3, 57.9, 53.8]\nmisleading_recall2 = [19.4, 20, 20]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Plot the bars\nax.bar(range(len(truthful_recall)), truthful_recall, color='pink')\nax.bar(range(len(misleading_recall)), misleading_recall, color='pink', bottom=truthful_recall)\nax.bar(range(len(misleading_recall2)), misleading_recall2, color='pink', bottom=[x+y for x, y in zip(truthful_recall, misleading_recall)])\n\n# Set the title and labels\nax.set_title('Truthful:Misleading = 2:0')\nax.set_xlabel('Product')\nax.set_ylabel('Recall')\n\n# Set the x-ticks\nax.set_xticks(range(len(truthful_recall)))\nax.set_xticklabels(['Product 1', 'Product 2', 'Product 3'])\n\n# Set the y-limits\nax.set_ylim(-40, 60)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_76.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nsectors = ['Light Industry', 'Heavy Industry', 'Transportation', 'Residential']\ncurrent_year_emissions = [250, 300, 400, 350]\nprevious_year_emissions = [200, 250, 350, 300]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Set the background color of the plot\nax.set_facecolor('lightgrey')\n\n# Draw the bars for current year emissions\nfor i, sector in enumerate(sectors):\n    ax.bar(sector, current_year_emissions[i], color='skyblue', label=sector)\n\n# Draw the bars for previous year emissions\nfor i, sector in enumerate(sectors):\n    ax.bar(sector, previous_year_emissions[i], color='orange', bottom=current_year_emissions[i])\n\n# Set the title of the plot\nax.set_title('Environmental Impact by Sector')\n\n# Set the x-axis label\nax.set_xlabel('Industry Sectors')\n\n# Set the y-axis label\nax.set_ylabel('Pollution Emissions (thousands of metric tons)')\n\n# Set the y-axis limits\nax.set_ylim(-200, 1600)\n\n# Set the y-axis ticks\nax.set_yticks(range(-200, 1700, 200))\n\n# Set the y-axis grid\nax.yaxis.grid(True)\n\n# Set the legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_77.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ncities = ['Beijing', 'Shanghai', 'Guangzhou', 'Shenzhen', 'Chengdu']\ntemperatures = [12, 14, 16, 18, 20]\n\n# Create a bar chart\nplt.figure(figsize=(8, 4))\nbars = plt.bar(cities, temperatures, color='skyblue')\n\n# Add labels and title\nplt.xlabel('Cities')\nplt.ylabel('Average Temperature (\u00b0C)')\nplt.title('Average City Temperatures')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_78.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nregions = ['Region 1', 'Region 2', 'Region 3', 'Region 4']\nemissions_2020 = [180, 160, 170, 190]\nemissions_2021 = [170, 150, 160, 180]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Plot the data\nax.bar(regions, emissions_2020, color='red', label='2020 Emissions')\nax.bar(regions, emissions_2021, color='blue', label='2021 Emissions')\n\n# Set the title and labels\nax.set_title('Annual Pollution Emission Reductions')\nax.set_xlabel('Regions')\nax.set_ylabel('Emissions')\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_79.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nquestions = ['Question 1', 'Question 2', 'Question 3', 'Question 4', 'Question 5']\nresponses = [\n    [26.0, 10.0, 17.0, 10.0, 10.0],\n    [32.0, 10.0, 29.0, 10.0, 10.0],\n    [13.0, 10.0, 22.0, 10.0, 10.0],\n    [19.0, 12.0, 15.0, 15.0, 15.0],\n    [33.0, 10.0, 11.0, 10.0, 10.0]\n]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Survey Results')\n\n# Set the x-axis labels\nax.set_xlabel('Questions')\nax.set_ylabel('Responses')\n\n# Set the y-axis limits\nax.set_ylim(0, 80)\n\n# Set the x-axis ticks\nax.set_xticks(range(len(questions)))\nax.set_xticklabels(questions)\n\n# Draw the bars\nfor i, question_responses in enumerate(responses):\n    for j, response in enumerate(question_responses):\n        ax.barh(i, response, left=sum(question_responses[:j]), color=plt.cm.tab20(j), label=f'Response {j+1}')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Set the x-axis limits\nax.set_xlim(1, 10)\n\n# Set the y-axis limits\nax.set_ylim(0, 10)\n\n# Draw a horizontal line at y=5\nax.axhline(y=5, color='r', linestyle='-')\n\n# Draw a rectangle with a red border\nrect = plt.Rectangle((1, 0), 9, 10, fill=False, edgecolor='r')\nax.add_patch(rect)\n\n# Draw rectangles for each bar\nbars = [plt.Rectangle((i, 0), 1, 10, color='b') for i in range(1, 11)]\nfor bar in bars:\n    ax.add_patch(bar)\n\n# Set the x-ticks\nax.set_xticks(range(1, 11))\nax.set_xticklabels(range(1, 11))\n\n# Set the y-ticks\nax.set_yticks([0, 2, 4, 6, 8, 10])\n\n# Set the title\nax.set_title('Top-10 super families in training dataset')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_80.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nx = [3, 5, 7, 9, 11]\ny = [1.2, 1.8, 1.5, 1.3, 1.4]\ncolors = ['cyan', 'orange', 'blue', 'orange', 'brown']\nstyles = ['-', '--', '-.', ':', '-']\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Plot the data\nfor i in range(len(x)):\n    ax.plot([x[i], x[i]], [0, y[i]], color=colors[i], linestyle=styles[i])\n\n# Set the title and labels\nax.set_title('Taboo')\nax.set_xlabel('Num of Constraint Words')\nax.set_ylabel('Score')\n\n# Set the limits for the x-axis\nax.set_xlim(0, 12)\n\n# Set the limits for the y-axis\nax.set_ylim(-2, 2)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_81.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nbrands = ['LLaMA', 'Vicuna', 'Alpaca', 'WizardLM']\ntrue_recall = [46.3, 56.9, 53.8, 19.4]\nmisleading_recall = [30.1, 34, 40, 20]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 4.0))\n\n# Plot bars for true recall\nax.bar(brands, true_recall, color='blue')\n\n# Plot bars for misleading recall\nax.bar(brands, misleading_recall, bottom=true_recall, color='pink')\n\n# Set labels and title\nax.set_xlabel('Brands')\nax.set_ylabel('Misleading Recall')\nax.set_title('Truthful: Misleading Recall = 2:0')\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_82.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\nax.set_title('Probability of Improvement over VLM Image Encoder Baseline Returns')\nax.set_xlabel('Probability of Improvement')\nax.set_ylabel('Car Type')\n\ncar_types = ['Convertible', 'Coupe', 'SUV', 'Sedan', 'Truck', 'Coupe New', 'SUV New', 'Truck New', 'Sedan New', 'Convertible New']\nprobabilities = [25, 28, 29, 30, 27, 24, 21, 18, 15, 12]\n\nfor car_type, probability in zip(car_types, probabilities):\n    ax.bar(car_type, probability, color='blue')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_83.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the bar chart\nemotions = ['Disapproval', 'Joy', 'Relief', 'Gratitude', 'Annoyance', 'Nervousness', 'Pride', 'Sadness', 'Unboredom', 'Amusement']\ndisapprovals = [2.1, 3.0, 3.5, 3.5, 6.0, 6.0, 6.7, 7.0, 7.0, 7.6]\njoy = [3.0, 3.0, 3.5, 3.5, 6.0, 6.0, 6.7, 7.0, 7.0, 7.6]\nrelief = [3.5, 3.0, 3.5, 3.5, 6.0, 6.0, 6.7, 7.0, 7.0, 7.6]\ngratitude = [3.5, 3.0, 3.5, 3.5, 6.0, 6.0, 6.7, 7.0, 7.0, 7.6]\nannoyance = [6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.7, 7.0, 7.0, 7.6]\nnervousness = [6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.7, 7.0, 7.0, 7.6]\npride = [6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.7, 7.0, 7.0, 7.6]\nsadness = [6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.7, 7.0, 7.0, 7.6]\nunboredom = [6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.7, 7.0, 7.0, 7.6]\namusement = [6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.7, 7.0, 7.0, 7.6]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 4.0))\n\n# Plot the bar chart\nax.bar(emotions, disapprovals, color='pink')\nax.bar(emotions, joy, bottom=disapprovals, color='lightblue')\nax.bar(emotions, relief, bottom=[x+y for x,y in zip(disapprovals, joy)], color='pink')\nax.bar(emotions, gratitude, bottom=[x+y+z for x,y,z in zip(disapprovals, joy, relief)], color='lightblue')\nax.bar(emotions, annoyance, bottom=[x+y+z+t for x,y,z,t in zip(disapprovals, joy, relief, gratitude)], color='pink')\nax.bar(emotions, nervousness, bottom=[x+y+z+t+u for x,y,z,t,u in zip(disapprovals, joy, relief, gratitude, annoyance)], color='lightblue')\nax.bar(emotions, pride, bottom=[x+y+z+t+u+v for x,y,z,t,u,v in zip(disapprovals, joy, relief, gratitude, annoyance, nervousness)], color='pink')\nax.bar(emotions, sadness, bottom=[x+y+z+t+u+v+w for x,y,z,t,u,v,w in zip(disapprovals, joy, relief, gratitude, annoyance, nervousness, pride)], color='lightblue')\nax.bar(emotions, unboredom, bottom=[x+y+z+t+u+v+w+x for x,y,z,t,u,v,w,x in zip(disapprovals, joy, relief, gratitude, annoyance, nervousness, pride, sadness)], color='pink')\nax.bar(emotions, amusement, bottom=[x+y+z+t+u+v+w+x+y for x,y,z,t,u,v,w,x,y in zip(disapprovals, joy, relief, gratitude, annoyance, nervousness, pride, sadness, unboredom)], color='lightblue')\n\n# Set the title and labels\nax.set_title('Emotion Frequency Distribution')\nax.set_xlabel('Emotion')\nax.set_ylabel('Frequency Metric 1 (%)')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_84.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nmovies = ['Attack on Titan', 'Game of Thrones', 'The Count of Monte Cristo', 'Demi-Gods and Semi-Devils', 'Notre-Dame de Paris']\nscores_0 = [0.2, 0.3, 0.4, 0.5, 0.6]\nscores_20 = [0.3, 0.4, 0.5, 0.6, 0.7]\nscores_40 = [0.4, 0.5, 0.6, 0.7, 0.8]\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(10, 6))\nbars = ax.bar(movies, scores_0, color='cyan')\nax.bar_label(bars)\nax.set_title('Score at Time 0')\n\n# Create a second bar chart\nfig, ax = plt.subplots(figsize=(10, 6))\nbars = ax.bar(movies, scores_20, color='orange')\nax.bar_label(bars)\nax.set_title('Score at Time 20')\n\n# Create a third bar chart\nfig, ax = plt.subplots(figsize=(10, 6))\nbars = ax.bar(movies, scores_40, color='red')\nax.bar_label(bars)\nax.set_title('Score at Time 40')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_85.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ncountries = ['Japan', 'Australia', 'Canada', 'Germany', 'Italy', 'France', 'UK', 'USA']\nconsumption = [1200, 1300, 1400, 1500, 1600, 1700, 1800, 1900]\nproduction = [1000, 1100, 1200, 1300, 1400, 1500, 1600, 1700]\nratio = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Plot bars for consumption\nfor i, country in enumerate(countries):\n    ax.bar(country, consumption[i], color='red')\n\n# Plot bars for production\nfor i, country in enumerate(countries):\n    ax.bar(country, production[i], bottom=consumption[i], color='blue')\n\n# Plot bars for ratio\nfor i, country in enumerate(countries):\n    ax.bar(country, ratio[i] * 1000, bottom=consumption[i] + production[i], color='green')\n\n# Set title and labels\nax.set_title('Energy Consumption and Production')\nax.set_xlabel('Country')\nax.set_ylabel('Energy (TWh)')\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_86.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the left bar chart\ncategories = ['leave-taking', 'thanking', 'persuasion', 'apology', 'criticism', 'request', 'greeting']\nsynthetic_data = [10, 10, 10, 7, 24, 31, 8]\nhuman_authored_data = [9, 16, 15, 5, 11, 28, 16]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Plot the bars\nbars = ax.bar(categories, synthetic_data, color='blue')\n\n# Add labels and title\nax.set_xlabel('Categories')\nax.set_ylabel('Percentage')\nax.set_title('Original')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_87.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the first bar chart\nx = [-5, -5, -5, 0, 0, 0]\ny = [6, 6, 6, 8, 10, 10]\nlabels = ['Beauty', 'Beauty', 'Beauty', 'Yelp', 'Yelp', 'Yelp']\ncolors = ['blue', 'green', 'red', 'blue', 'green', 'red']\n\n# Data for the second bar chart\nx2 = [-5, -4.1, -4.1, -3, -3, -2, -2, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "}
{"file": "dataset/ori_500/bar_88.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nbrands = ['Vicuna-HAG', 'Vicuna-Default', 'LLAMA-HAG', 'LLAMA-Default']\nscores = [-3.2, -3.3, -3.2, -3.3]\nconstraint_words = ['3 Constraint Words', '5 Constraint Words', '7 Constraint Words', '10 Constraint Words']\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\nbars = ax.bar(brands, scores, color='blue')\n\n# Add constraint words as labels\nfor i, bar in enumerate(bars):\n    ax.text(bar.get_x() + bar.get_width()/2, bar.get_height(), constraint_words[i], ha='center', va='bottom')\n\n# Set the title and labels\nax.set_title('Scores by group and constraint word count')\nax.set_xlabel('Brands')\nax.set_ylabel('Score')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_89.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Set the background color of the plot\nax.set_facecolor('white')\n\n# Set the title of the plot\nax.set_title('Model Performance Metrics', fontsize=14)\n\n# Set the x-axis label\nax.set_xlabel('Top-10 superfamily in training dataset', fontsize=12)\n\n# Set the y-axis label\nax.set_ylabel('Metrics', fontsize=12)\n\n# Set the tick labels for the x-axis\nax.set_xticks([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\nax.set_xticklabels(['1', '2', '3', '4', '5', '6', '7', '8', '9', '10'])\n\n# Set the tick labels for the y-axis\nax.set_yticks([0.2, 0.4, 0.6, 0.8, 1.0])\n\n# Set the grid lines\nax.grid(True)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the x-axis ticks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis ticks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis labels\nax.tick_params(axis='x', labelcolor='black')\n\n# Set the color of the y-axis labels\nax.tick_params(axis='y', labelcolor='black')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelsize=10)\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelsize=10)\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', width=0.5)\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', width=0.5)\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelrotation=0)\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelrotation=0)\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelpad=5)\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelpad=5)\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelcolor='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='black')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelsize=10)\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelsize=10)\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', width=0.5)\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', width=0.5)\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelrotation=0)\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelrotation=0)\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelpad=5)\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelpad=5)\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelcolor='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='black')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelsize=10)\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelsize=10)\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', width=0.5)\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', width=0.5)\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelrotation=0)\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelrotation=0)\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelpad=5)\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelpad=5)\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelcolor='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='black')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelsize=10)\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelsize=10)\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', width=0.5)\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', width=0.5)\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelrotation=0)\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelrotation=0)\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelpad=5)\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelpad=5)\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelcolor='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='black')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelsize=10)\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelsize=10)\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', width=0.5)\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', width=0.5)\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelrotation=0)\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelrotation=0)\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelpad=5)\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelpad=5)\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelcolor='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='black')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelsize=10)\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelsize=10)\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', width=0.5)\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', width=0.5)\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelrotation=0)\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelrotation=0)\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelpad=5)\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelpad=5)\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelcolor='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='black')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelsize=10)\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelsize=10)\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', width=0.5)\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', width=0.5)\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelrotation=0)\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelrotation=0)\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelpad=5)\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelpad=5)\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelcolor='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='black')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelsize=10)\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelsize=10)\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', width=0.5)\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', width=0.5)\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelrotation=0)\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelrotation=0)\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelpad=5)\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelpad=5)\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelcolor='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='black')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelsize=10)\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelsize=10)\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', width=0.5)\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', width=0.5)\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelrotation=0)\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelrotation=0)\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelpad=5)\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelpad=5)\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelcolor='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='black')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelsize=10)\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelsize=10)\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', width=0.5)\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', width=0.5)\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelrotation=0)\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelrotation=0)\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelpad=5)\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelpad=5)\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelcolor='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='black')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelsize=10)\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelsize=10)\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', width=0.5)\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', width=0.5)\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelrotation=0)\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelrotation=0)\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelpad=5)\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelpad=5)\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelcolor='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='black')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelsize=10)\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelsize=10)\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', width=0.5)\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', width=0.5)\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelrotation=0)\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelrotation=0)\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelpad=5)\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelpad=5)\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelcolor='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='black')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelsize=10)\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelsize=10)\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', width=0.5)\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', width=0.5)\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelrotation=0)\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelrotation=0)\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelpad=5)\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelpad=5)\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelcolor='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='black')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelsize=10)\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelsize=10)\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', width=0.5)\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', width=0.5)\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelrotation=0)\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelrotation=0)\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelpad=5)\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelpad=5)\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelcolor='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='black')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelsize=10)\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelsize=10)\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', width=0.5)\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', width=0.5)\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelrotation=0)\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelrotation=0)\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelpad=5)\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelpad=5)\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelcolor='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='black')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelsize=10)\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelsize=10)\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', width=0.5)\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', width=0.5)\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelrotation=0)\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelrotation=0)\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelpad=5)\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelpad=5)\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelcolor='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='black')\n\n"}
{"file": "dataset/ori_500/bar_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ncategories = ['Type', 'Span', 'T&S', 'Spurious', 'Total']\nerror_rates = [50, 40, 30, 20, 10]\nerror_rates_2 = [80, 70, 60, 50, 40]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(9.0, 6.0))\n\n# Plot the error rates\nax.bar(categories, error_rates, color='pink')\nax.bar(categories, error_rates_2, bottom=error_rates, color='lightgreen')\n\n# Set the title and labels\nax.set_title('GENIA')\nax.set_xlabel('Categories')\nax.set_ylabel('Error correction rate (%)')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_90.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nmodels = ['GPT4V', 'OSCAR', 'LLaMA', 'BLIP2', 'BLIP1', 'Video-LLaMA', 'Lavila']\nscores_a = [82.5, 73.93, 31.79, 4.64, 4.64, 0.71, 0.0]\nscores_b = [80, 60, 50, 40, 30, 20, 10]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(12.0, 8.0))\n\n# Plot bars for scores A\nfor i, score in enumerate(scores_a):\n    ax.bar(models[i], score, color='red' if score > 50 else 'green')\n\n# Plot bars for scores B\nfor i, score in enumerate(scores_b):\n    ax.bar(models[i], score, color='blue' if score > 50 else 'purple')\n\n# Set title and labels\nax.set_title('Human Study')\nax.set_xlabel('Model')\nax.set_ylabel('Score')\n\n# Set y-axis limits\nax.set_ylim(0, 80)\n\n# Add grid lines\nax.grid(axis='y')\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_91.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\npheme = ['GCN', 'RvNN', 'Hyphen', 'GET']\nf1_scores = [75, 80, 85, 90]\nparty_colors = ['blue', 'orange', 'red']\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Plot the bar chart\nfor i, ph in enumerate(pheme):\n    ax.barh(ph, f1_scores[i], color=party_colors[i % len(party_colors)])\n\n# Set the title and labels\nax.set_title('Pheme vs Macro F1-score')\nax.set_xlabel('Macro F1-score')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_92.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Data for plotting\nroles = ['human', 'gpt4', 'gpt4-cot']\ncounts = [800, 700, 600]\ncolors = ['blue', 'green', 'purple']\n\nfor role, count, color in zip(roles, counts, colors):\n    ax.bar(role, count, color=color)\n\nax.set_title('Resonance Preference Plot for rich-context')\nax.set_xlabel('Role')\nax.set_ylabel('Count')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_93.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for Effort\neffort_data = [20.4, 29.6, 20.4, 20.4, 9.3]\neffort_labels = ['Very Low', 'Low', 'Neutral', 'High', 'Very High']\neffort_colors = ['red', 'orange', 'yellow', 'green', 'darkgreen']\n\n# Data for Brainwave\nbrainwave_data = [23.8, 14.3, 16.7, 38.1, 7.1]\nbrainwave_labels = ['Very Low', 'Low', 'Neutral', 'High', 'Very High']\nbrainwave_colors = ['red', 'orange', 'yellow', 'green', 'darkgreen']\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6, 3))\n\n# Plot Effort data\nax.bar(effort_labels, effort_data, color=effort_colors)\nax.set_title('Effort')\n\n# Plot Brainwave data\nax.bar(brainwave_labels, brainwave_data, color=brainwave_colors)\nax.set_title('Brainwave')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_94.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Define the data\nx = np.linspace(0.5, 1.2, 10)\ny = np.random.randint(0, 100, 10)\n\n# Plot the data\nax.plot(x, y, 'ro-')\n\n# Set the title and labels\nax.set_title('Rate of Gain Change[%]')\nax.set_xlabel('Scale')\nax.set_ylabel('Rate of Gain Change[%]')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_95.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nbrands = ['Bactrian-X EN', 'Lima-X DE', 'Bactrian-X FR', 'Lima-X IT', 'Bactrian-X ES']\nperformance = [3.5, 2.3, 4.4, 1.3, -0.7]\nimprovement = [-1.0, 0.3, 3.4, -3.3, -2.7]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Plot the performance data\nax.barh(brands, performance, color='blue')\nax.set_xlabel('Performance [EN]')\nax.set_title('Model Performance Improvement by Language')\n\n# Plot the improvement data\nax2 = ax.twiny()\nax2.barh(brands, improvement, color='green')\nax2.set_xlabel('Improvement [%]')\n\n# Set the y-axis limits\nax.set_ylim(-5, 5)\nax2.set_ylim(-5, 5)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_96.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the first graph\nx1 = ['Random', 'Ours', 'SOTA']\ny1 = [66.3, 61.9, 53.8]\ncolors1 = ['blue', 'red', 'pink']\n\n# Data for the second graph\nx2 = ['Random', 'Ours', 'SOTA']\ny2 = [49.3, 45.7, 41.6]\ncolors2 = ['blue', 'red', 'pink']\n\n# Data for the third graph\nx3 = ['Random', 'Ours', 'SOTA']\ny3 = [48.0, 42.6, 36.5]\ncolors3 = ['blue', 'red', 'pink']\n\n# Data for the fourth graph\nx4 = ['Random', 'Ours', 'SOTA']\ny4 = [43.8, 40.2, 36.5]\ncolors4 = ['blue', 'red', 'pink']\n\n# Create a figure and a set of subplots\nfig, axs = plt.subplots(2, 2, figsize=(8.0, 8.0))\n\n# Plot the first graph\naxs[0, 0].bar(x1, y1, color=colors1)\naxs[0, 0].set_title('Truthful:Misleading = 2:0')\naxs[0, 0].set_ylim(-80, 80)\n\n# Plot the second graph\naxs[0, 1].bar(x2, y2, color=colors2)\naxs[0, 1].set_title('Truthful:Misleading = 2:1')\naxs[0, 1].set_ylim(-80, 80)\n\n# Plot the third graph\naxs[1, 0].bar(x3, y3, color=colors3)\naxs[1, 0].set_title('Truthful:Misleading = 2:2')\naxs[1, 0].set_ylim(-80, 80)\n\n# Plot the fourth graph\naxs[1, 1].bar(x4, y4, color=colors4)\naxs[1, 1].set_title('Truthful:Misleading = 1:2')\naxs[1, 1].set_ylim(-80, 80)\n\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_97.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the first chart\nx1 = [1, 2, 3, 4, 5, 6]\ny1 = [10, 20, 30, 40, 50, 60]\n\n# Data for the second chart\nx2 = [1, 2, 3, 4, 5, 6]\ny2 = [10, 20, 30, 40, 50, 60]\n\n# Data for the third chart\nx3 = [1, 2, 3, 4, 5, 6]\ny3 = [10, 20, 30, 40, 50, 60]\n\n# Data for the fourth chart\nx4 = [1, 2, 3, 4, 5, 6]\ny4 = [10, 20, 30, 40, 50, 60]\n\nfig, axs = plt.subplots(2, 2, figsize=(10.0, 8.0))\n\n# First chart\naxs[0, 0].bar(x1, y1, color='pink')\naxs[0, 0].set_title('Human Labeling and Agreement Bias Checking 1')\naxs[0, 0].set_xlabel('Human Annotator')\naxs[0, 0].set_ylabel('Scores')\n\n# Second chart\naxs[0, 1].bar(x2, y2, color='orange')\naxs[0, 1].set_title('Human Labeling and Agreement Bias Checking 2')\naxs[0, 1].set_xlabel('Human Annotator')\naxs[0, 1].set_ylabel('Scores')\n\n# Third chart\naxs[1, 0].bar(x3, y3, color='green')\naxs[1, 0].set_title('Human Labeling and Agreement Bias Checking 3')\naxs[1, 0].set_xlabel('Human Annotator')\naxs[1, 0].set_ylabel('Scores')\n\n# Fourth chart\naxs[1, 1].bar(x4, y4, color='blue')\naxs[1, 1].set_title('Human Labeling and Agreement Bias Checking 4')\naxs[1, 1].set_xlabel('Human Annotator')\naxs[1, 1].set_ylabel('Scores')\n\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_98.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nmodels = ['Model A', 'Model B', 'Model C', 'Model D', 'Model E', 'Model F', 'Model G', 'Model H', 'Model I']\nscores_contrastive = [54.9, 71.5, 79.2, 60.3, 54.5, 52.9, 42.4, 7.1, 2.0]\nscores_beam = [83.3, 92.6, 96.4, 89.2, 83.3, 80.6, 71.4, 83.3, 80.6]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot bars for contrastive search scores\nax.bar(models, scores_contrastive, color='lightseagreen')\n\n# Plot bars for beam search scores\nax.bar(models, scores_beam, color='saddlebrown', bottom=scores_contrastive)\n\n# Set title and labels\nax.set_title('Performance Comparison by Model')\nax.set_xlabel('Models')\nax.set_ylabel('Scores')\n\n# Add a colored rectangle at the top right corner\nax.add_patch(plt.Rectangle((0.95, 0.95), 0.05, 0.05, color='lightseagreen'))\nax.text(0.97, 0.97, 'Contrastive Search', ha='center', va='center', transform=ax.transAxes, fontsize=10)\n\nax.add_patch(plt.Rectangle((0.95, 0.9), 0.05, 0.05, color='saddlebrown'))\nax.text(0.97, 0.9, 'Beam Search', ha='center', va='center', transform=ax.transAxes, fontsize=10)\n\n# Set y-axis limits\nax.set_ylim(0, 100)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_99.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the first graph\ncategories = ['Traffic Flow', 'Accident Rate', 'Public Transport Usage', 'Road Conditions', 'Public Satisfaction']\nvalues = [150.0, 180.0, 75.0, 90.0, 80.0]\n\n# Data for the second graph\ncategories2 = ['Traffic Flow', 'Accident Rate', 'Public Transport Usage', 'Road Conditions', 'Public Satisfaction']\nvalues2 = [2.5, 2.0, 1.5, 2.0, 2.0]\n\n# Data for the third graph\ncategories3 = ['Traffic Flow', 'Accident Rate', 'Public Transport Usage', 'Road Conditions', 'Public Satisfaction']\nvalues3 = [60.0, 55.0, 70.0, 72.0, 70.0]\n\n# Data for the fourth graph\ncategories4 = ['Traffic Flow', 'Accident Rate', 'Public Transport Usage', 'Road Conditions', 'Public Satisfaction']\nvalues4 = [80.0, 75.0, 70.0, 85.0, 88.0]\n\n# Create a figure and a set of subplots\nfig, axs = plt.subplots(2, 2, figsize=(10.0, 8.0))\n\n# Plot the first graph\naxs[0, 0].bar(categories, values, color='orange')\naxs[0, 0].set_title('Dataset 1')\n\n# Plot the second graph\naxs[0, 1].bar(categories2, values2, color='blue')\naxs[0, 1].set_title('Dataset 2')\n\n# Plot the third graph\naxs[1, 0].bar(categories3, values3, color='green')\naxs[1, 0].set_title('Dataset 3')\n\n# Plot the fourth graph\naxs[1, 1].bar(categories4, values4, color='yellow')\naxs[1, 1].set_title('Dataset 4')\n\n# Adjust layout\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\nax.set_title('Dominance')\nax.set_xlabel('SAM rating')\nax.set_ylabel('color')\n\n# Define the data for each color\ncolors = ['neutral', 'yellow high', 'green high', 'blue high', 'red high']\nsam_ratings = [1, 3, 5, 7, 9]\nvalues = [2, 4, 6, 8, 10]\n\n# Plot the bars\nfor i, color in enumerate(colors):\n    ax.bar(color, values[i], width=0.5, align='center', alpha=0.5)\n\nplt.show()\n```"}
{"file": "dataset/ori_500/box_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\nfig, ax = plt.subplots(figsize=(9.0, 5.0))\n\n# Rectangles\nax.add_patch(plt.Rectangle((1, 1), 2, 2, color='blue', ec='black'))\nax.add_patch(plt.Rectangle((4, 1), 2, 2, color='green', ec='black'))\nax.add_patch(plt.Rectangle((7, 1), 2, 2, color='red', ec='black'))\n\n# Lines\nax.plot([1, 3], [1, 1], color='blue')\nax.plot([4, 6], [1, 1], color='green')\nax.plot([7, 9], [1, 1], color='red')\n\n# Text\nax.text(1.5, 1.5, 'Gaming Duration', ha='center', va='center')\nax.text(4.5, 1.5, 'Exercise Duration', ha='center', va='center')\nax.text(7.5, 1.5, 'Reading Duration', ha='center', va='center')\n\n# X-axis\nax.set_xlim(0, 10)\nax.set_xticks(range(0, 11, 10))\nax.set_xlabel('Duration (minutes)')\n\n# Y-axis\nax.set_ylim(0, 2)\nax.set_yticks([])\nax.set_ylabel('Activity')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/box_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Set the background color of the plot\nax.set_facecolor('lightblue')\n\n# Set the title of the plot\nax.set_title('1.0 BLCU')\n\n# Set the x-axis label\nax.set_xlabel('Llama-70b (T2TT)')\n\n# Set the y-axis label\nax.set_ylabel('Llama-70b (S2TT)')\n\n# Set the tick labels for the x-axis\nax.set_xticks([1, 2])\nax.set_xticklabels(['Llama-70b (T2TT)', 'Llama-70b (S2TT)'])\n\n# Set the tick labels for the y-axis\nax.set_yticks([16, 18, 20, 22])\nax.set_yticklabels(['16', '18', '20', '22'])\n\n# Draw a rectangle with a border\nax.add_patch(plt.Rectangle((0.5, 16), 1, 6, fill=False, edgecolor='black'))\n\n# Draw a rectangle with a border\nax.add_patch(plt.Rectangle((2.5, 16), 1, 6, fill=False, edgecolor='black'))\n\n# Draw a rectangle with a border\nax.add_patch(plt.Rectangle((0.5, 18), 1, 4, fill=False, edgecolor='black'))\n\n# Draw a rectangle with a border\nax.add_patch(plt.Rectangle((2.5, 18), 1, 4, fill=False, edgecolor='black'))\n\n# Draw a rectangle with a border\nax.add_patch(plt.Rectangle((0.5, 20), 1, 2, fill=False, edgecolor='black'))\n\n# Draw a rectangle with a border\nax.add_patch(plt.Rectangle((2.5, 20), 1, 2, fill=False, edgecolor='black'))\n\n# Draw a rectangle with a border\nax.add_patch(plt.Rectangle((0.5, 22), 1, 2, fill=False, edgecolor='black'))\n\n# Draw a rectangle with a border\nax.add_patch(plt.Rectangle((2.5, 22), 1, 2, fill=False, edgecolor='black'))\n\n# Draw a rectangle with a border\nax.add_patch(plt.Rectangle((0.5, 16), 1, 6, fill=False, edgecolor='orange'))\n\n# Draw a rectangle with a border\nax.add_patch(plt.Rectangle((2.5, 16), 1, 6, fill=False, edgecolor='orange'))\n\n# Draw a rectangle with a border\nax.add_patch(plt.Rectangle((0.5, 18), 1, 4, fill=False, edgecolor='orange'))\n\n# Draw a rectangle with a border\nax.add_patch(plt.Rectangle((2.5, 18), 1, 4, fill=False, edgecolor='orange'))\n\n# Draw a rectangle with a border\nax.add_patch(plt.Rectangle((0.5, 20), 1, 2, fill=False, edgecolor='orange'))\n\n# Draw a rectangle with a border\nax.add_patch(plt.Rectangle((2.5, 20), 1, 2, fill=False, edgecolor='orange'))\n\n# Draw a rectangle with a border\nax.add_patch(plt.Rectangle((0.5, 22), 1, 2, fill=False, edgecolor='orange'))\n\n# Draw a rectangle with a border\nax.add_patch(plt.Rectangle((2.5, 22), 1, 2, fill=False, edgecolor='orange'))\n\n# Draw a rectangle with a border\nax.add_patch(plt.Rectangle((0.5, 16), 1, 6, fill=False, edgecolor='grey'))\n\n# Draw a rectangle with a border\nax.add_patch(plt.Rectangle((2.5, 16), 1, 6, fill=False, edgecolor='grey'))\n\n# Draw a rectangle with a border\nax.add_patch(plt.Rectangle((0.5, 18), 1, 4, fill=False, edgecolor='grey'))\n\n# Draw a rectangle with a border\nax.add_patch(plt.Rectangle((2.5, 18), 1, 4, fill=False, edgecolor='grey'))\n\n# Draw a rectangle with a border\nax.add_patch(plt.Rectangle((0.5, 20), 1, 2, fill=False, edgecolor='grey'))\n\n# Draw a rectangle with a border\nax.add_patch(plt.Rectangle((2.5, 20), 1, 2, fill=False, edgecolor='grey'))\n\n# Draw a rectangle with a border\nax.add_patch(plt.Rectangle((0.5, 22), 1, 2, fill=False, edgecolor='grey'))\n\n# Draw a rectangle with a border\nax.add_patch(plt.Rectangle((2.5, 22), 1, 2, fill=False, edgecolor='grey'))\n\n# Draw a rectangle with a border\nax.add_patch(plt.Rectangle((0.5, 16), 1, 6, fill=False, edgecolor='brown'))\n\n# Draw a rectangle with a border\nax.add_patch(plt.Rectangle((2.5, 16), 1, 6, fill=False, edgecolor='brown'))\n\n# Draw a rectangle with a border\nax.add_patch(plt.Rectangle((0.5, 18), 1, 4, fill=False, edgecolor='brown'))\n\n# Draw a rectangle with a border\nax.add_patch(plt.Rectangle((2.5, 18), 1, 4, fill=False, edgecolor='brown'))\n\n# Draw a rectangle with a border\nax.add_patch(plt.Rectangle((0.5, 20), 1, 2, fill=False, edgecolor='brown'))\n\n# Draw a rectangle with a border\nax.add_patch(plt.Rectangle((2.5, 20), 1, 2, fill=False, edgecolor='brown'))\n\n# Draw a rectangle with a border\nax.add_patch(plt.Rectangle((0.5, 22), 1, 2, fill=False, edgecolor='brown'))\n\n# Draw a rectangle with a border\nax.add_patch(plt.Rectangle((2.5, 22), 1, 2, fill=False, edgecolor='brown'))\n\n# Draw a rectangle with a border\nax.add_patch(plt.Rectangle((0.5, 16), 1, 6, fill=False, edgecolor='green'))\n\n# Draw a rectangle with a border\nax.add_patch(plt.Rectangle((2.5, 16), 1, 6, fill=False, edgecolor='green'))\n\n# Draw a rectangle with a border\nax.add_patch(plt.Rectangle((0.5, 18), 1, 4, fill=False, edgecolor='green'))\n\n# Draw a rectangle with a border\nax.add_patch(plt.Rectangle((2.5, 18), 1, 4, fill=False, edgecolor='green'))\n\n# Draw a rectangle with a border\nax.add_patch(plt.Rectangle((0.5, 20), 1, 2, fill=False, edgecolor='green'))\n\n# Draw a rectangle with a border\nax.add_patch(plt.Rectangle((2.5, 20), 1, 2, fill=False, edgecolor='green'))\n\n# Draw a rectangle with a border\nax.add_patch(plt.Rectangle((0.5, 22), 1, 2, fill=False, edgecolor='green'))\n\n# Draw a rectangle with a border\nax.add_patch(plt.Rectangle((2.5, 22), 1, 2, fill=False, edgecolor='green'))\n\n# Draw a rectangle with a border\nax.add_patch(plt.Rectangle((0.5, 16), 1, 6, fill=False, edgecolor='purple'))\n\n# Draw a rectangle with a border\nax.add_patch(plt.Rectangle((2.5, 16), 1, 6, fill=False, edgecolor='purple'))\n\n# Draw a rectangle with a border\nax.add_patch(plt.Rectangle((0.5, 18), 1, 4, fill=False, edgecolor='purple'))\n\n# Draw a rectangle with a border\nax.add_patch(plt.Rectangle((2.5, 18), 1, 4, fill=False, edgecolor='purple'))\n\n# Draw a rectangle with a border\nax.add_patch(plt.Rectangle((0.5, 20), 1, 2, fill=False, edgecolor='purple'))\n\n# Draw a rectangle with a border\nax.add_patch(plt.Rectangle((2.5, 20), 1, 2, fill=False, edgecolor='purple'))\n\n# Draw a rectangle with a border\nax.add_patch(plt.Rectangle((0.5, 22), 1, 2, fill=False, edgecolor='purple'))\n\n# Draw a rectangle with a border\nax.add_patch(plt.Rectangle((2.5, 22), 1, 2, fill=False, edgecolor='purple'))\n\n# Draw a rectangle with a border\nax.add_patch(plt.Rectangle((0.5, 16), 1, 6, fill=False, edgecolor='pink'))\n\n# Draw a rectangle with a border\nax.add_patch(plt.Rectangle((2.5, 16), 1, 6, fill=False, edgecolor='pink'))\n\n# Draw a rectangle with a border\nax.add_patch(plt.Rectangle((0.5, 18), 1, 4, fill=False, edgecolor='pink'))\n\n# Draw a rectangle with a border\nax.add_patch(plt.Rectangle((2.5, 18), 1, 4, fill=False, edgecolor='pink'))\n\n# Draw a rectangle with a border\nax.add_patch(plt.Rectangle((0.5, 20), 1, 2, fill=False, edgecolor='pink'))\n\n# Draw a rectangle with a border\nax.add_patch(plt.Rectangle((2.5, 20), 1, 2, fill=False, edgecolor='pink'))\n\n# Draw a rectangle with a border\nax.add_patch(plt.Rectangle((0.5, 22), 1, 2, fill=False, edgecolor='pink'))\n\n# Draw a rectangle with a border\nax.add_patch(plt.Rectangle((2.5, 22), 1, 2, fill=False, edgecolor='pink'))\n\n# Draw a rectangle with a border\nax.add_patch(plt.Rectangle((0.5, 16), 1, 6, fill=False, edgecolor='cyan'))\n\n# Draw a rectangle with a border\nax.add_patch(plt.Rectangle((2.5, 16), 1, 6, fill=False, edgecolor='cyan'))\n\n# Draw a rectangle with a border\nax.add_patch(plt.Rectangle((0.5, 18), 1, 4, fill=False, edgecolor='cyan'))\n\n# Draw a rectangle with a border\nax.add_patch(plt.Rectangle((2.5, 18), 1, 4, fill=False, edgecolor='cyan'))\n\n# Draw a rectangle with a border\nax.add_patch(plt.Rectangle((0.5, 20), 1, 2, fill=False, edgecolor='cyan'))\n\n# Draw a rectangle with a border\nax.add_patch(plt.Rectangle((2.5, 20), 1, 2, fill=False, edgecolor='cyan'))\n\n# Draw a rectangle with a border\nax.add_patch(plt.Rectangle((0.5, 22), 1, 2, fill=False, edgecolor='cyan'))\n\n# Draw a rectangle with a border\nax.add_patch(plt.Rectangle((2.5, 22), 1, 2, fill=False, edgecolor='cyan'))\n\n# Draw a rectangle with a border\nax.add_patch(plt.Rectangle((0.5, 16), 1, 6, fill=False, edgecolor='magenta'))\n\n# Draw a rectangle with a border\nax.add_patch(plt.Rectangle((2.5, 16), 1, 6, fill=False, edgecolor='magenta'))\n\n# Draw a rectangle with a border\nax.add_patch(plt.Rectangle((0.5, 18), 1, 4, fill=False, edgecolor='magenta'))\n\n# Draw a rectangle with a border\nax.add_patch(plt.Rectangle((2.5, 18), 1, 4, fill=False, edgecolor='magenta'))\n\n# Draw a rectangle with a border\nax.add_patch(plt.Rectangle((0.5, 20), 1, 2, fill=False, edgecolor='magenta'))\n\n# Draw a rectangle with a border\nax.add_patch(plt.Rectangle((2.5, 20), 1, 2, fill=False, edgecolor='magenta'))\n\n# Draw a rectangle with a border\nax.add_patch(plt.Rectangle((0.5, 22), 1, 2, fill=False, edgecolor='magenta'))\n\n# Draw a rectangle with a border\nax.add_patch(plt.Rectangle((2.5, 22), 1, 2, fill=False, edgecolor='magenta'))\n\n# Draw a rectangle with a border\nax.add_patch(plt.Rectangle((0.5, 16), 1, 6, fill=False, edgecolor='yellow'))\n\n# Draw a rectangle with a border\nax.add_patch(plt.Rectangle((2.5, 16), 1, 6, fill=False, edgecolor='yellow'))\n\n# Draw a rectangle with a border\nax.add_patch(plt.Rectangle((0.5, 18), 1, 4, fill=False, edgecolor='yellow'))\n\n# Draw a rectangle with a border\nax.add_patch(plt.Rectangle((2.5, 18), 1, 4, fill=False, edgecolor='yellow'))\n\n# Draw a rectangle with a border\nax.add_patch(plt.Rectangle((0.5, 20), 1, 2, fill=False, edgecolor='yellow'))\n\n# Draw a rectangle with a border\nax.add_patch(plt.Rectangle((2.5, 20), 1, 2, fill=False, edgecolor='yellow'))\n\n# Draw a rectangle with a border\nax.add_patch(plt.Rectangle((0.5, 22), 1, 2, fill=False, edgecolor='yellow'))\n\n# Draw a rectangle with a border\nax.add_patch(plt.Rectangle((2.5, 22), 1, 2, fill=False, edgecolor='yellow'))\n\n# Draw a rectangle with a border\nax.add_patch(plt.Rectangle((0.5, 16), 1, 6, fill=False, edgecolor='red'))\n\n# Draw a rectangle with a border\nax.add_patch(plt.Rectangle((2.5, 16), 1, 6, fill=False, edgecolor='red'))\n\n# Draw a rectangle with a border\nax.add_patch(plt.Rectangle((0.5, 18), 1, 4, fill=False, edgecolor='red'))\n\n# Draw a rectangle with a border\nax.add_patch(plt.Rectangle((2.5, 18), 1, 4, fill=False, edgecolor='red'))\n\n# Draw a rectangle with a border\nax.add_patch(plt.Rectangle((0.5, 20), 1, 2, fill=False, edgecolor='red'))\n\n# Draw a rectangle with a border\nax.add_patch(plt.Rectangle((2.5, 20), 1, 2, fill=False, edgecolor='red'))\n\n# Draw a rectangle with a border\nax.add_patch(plt.Rectangle((0.5, 22), 1, 2, fill=False, edgecolor='red'))\n\n# Draw a rectangle with a border\nax.add_patch(plt.Rectangle((2.5, 22), 1, 2, fill=False, edgecolor='red'))\n\n# Draw a rectangle with a border\nax.add_patch(plt.Rectangle((0.5, 16), 1, 6, fill=False, edgecolor='blue'))\n\n# Draw a rectangle with a border\nax.add_patch(plt.Rectangle((2.5, 16), 1, 6, fill=False, edgecolor='blue'))\n\n# Draw a rectangle with a border\nax.add_patch(plt.Rectangle((0.5, 18), 1, 4, fill=False, edgecolor='blue'))\n\n# Draw a rectangle with a border\nax.add_patch(plt.Rectangle((2.5, 18), 1, 4, fill=False, edgecolor='blue'))\n\n# Draw a rectangle with a border\nax.add_patch(plt.Rectangle((0.5, 20), 1, 2, fill=False, edgecolor='blue'))\n\n# Draw a rectangle with a border\nax.add_patch(plt.Rectangle((2.5, 20), 1, 2, fill=False, edgecolor='blue'))\n\n# Draw a rectangle with a border\nax.add_patch(plt.Rectangle((0.5, 22), 1, 2, fill=False, edgecolor='blue'))\n\n# Draw a rectangle with a border\nax.add_patch(plt.Rectangle((2.5, 22), 1, 2, fill=False, edgecolor='blue'))\n\n# Draw a rectangle with a border\nax.add_patch(plt.Rectangle((0.5, 16), 1, 6, fill=False, edgecolor='green'))\n\n# Draw a rectangle with a border\nax.add_patch(plt.Rectangle((2.5, 16), 1, 6, fill=False, edgecolor='green'))\n\n# Draw a rectangle with a border\nax.add_patch(plt.Rectangle((0.5, 18), 1, 4, fill=False, edgecolor='green'))\n\n# Draw a rectangle with a border\nax.add_patch(plt.Rectangle((2.5, 18), 1, 4, fill=False, edgecolor='green'))\n\n# Draw a rectangle with a border\nax.add_patch(plt.Rectangle((0.5, 20), 1, 2, fill=False, edgecolor='green'))\n\n# Draw a rectangle with a border\nax.add_patch(plt.Rectangle((2.5, 20), 1, 2, fill=False, edgecolor='green'))\n\n# Draw a rectangle with a border\nax.add_patch(plt.Rectangle((0.5, 22), 1, 2, fill=False, edgecolor='green'))\n\n# Draw a rectangle with a border\nax.add_patch(plt.Rectangle((2.5, 22), 1, 2, fill=False, edgecolor='green'))\n\n# Draw a rectangle with a border\nax.add_patch(plt.Rectangle((0.5, 16), "}
{"file": "dataset/ori_500/box_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Define the data\nx = np.array([1, 2, 3, 4, 5])\ny = np.array([1, 2, 3, 4, 5])\n\n# Plot the data\nax.plot(x, y)\n\n# Set the title and labels\nax.set_title('Simple Line Plot')\nax.set_xlabel('X-axis Label')\nax.set_ylabel('Y-axis Label')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 5.0))\n\n# Set the title of the plot\nax.set_title('Execution Accuracy')\n\n# Set the x-axis label\nax.set_xlabel('Algorithm')\n\n# Set the y-axis label\nax.set_ylabel('Accuracy')\n\n# Define the data for the bar chart\nalgorithms = ['SQL-Only', 'PoT', 'IC-LP', 'DAIL', 'IC-LP+PoT']\naccuracies = [875, 875, 850, 850, 825]\n\n# Create a bar chart\nax.bar(algorithms, accuracies, color='lightblue')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Define the data for the first subplot\ndata1 = [0.88, 0.87, 0.83]\nlabels1 = ['DENSE (ref)', 'Joint Multimodal Framework (ours)', 'Cine']\ncolors1 = ['blue', 'brown', 'green']\n\n# Create a bar chart for the first subplot\nax.bar(labels1, data1, color=colors1)\nax.set_title('Region Classification Accuracy')\n\n# Define the data for the second subplot\ndata2 = [9.00, 9.33, 6.91, 9.33, 9.00]\nlabels2 = ['DENSE (ref)', 'Joint Multimodal Framework (ours)', 'Cine']\ncolors2 = ['green', 'orange', 'blue']\n\n# Create a bar chart for the second subplot\nax2 = ax.twinx()\nax2.bar(labels2, data2, color=colors2)\nax2.set_title('Slice Mean Error (ms)')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Set the title of the plot\nax.set_title('Z-Score')\n\n# Set the x-axis label\nax.set_xlabel('w/o att')\n\n# Set the y-axis label\nax.set_ylabel('Z-Score')\n\n# Draw a horizontal line at y=5\nax.axhline(y=5, color='r', linestyle='-')\n\n# Draw a horizontal line at y=10\nax.axhline(y=10, color='r', linestyle='-')\n\n# Draw a horizontal line at y=15\nax.axhline(y=15, color='r', linestyle='-')\n\n# Draw a horizontal line at y=20\nax.axhline(y=20, color='r', linestyle='-')\n\n# Draw a horizontal line at y=25\nax.axhline(y=25, color='r', linestyle='-')\n\n# Draw a horizontal line at y=30\nax.axhline(y=30, color='r', linestyle='-')\n\n# Draw a horizontal line at y=35\nax.axhline(y=35, color='r', linestyle='-')\n\n# Draw a horizontal line at y=40\nax.axhline(y=40, color='r', linestyle='-')\n\n# Draw a horizontal line at y=45\nax.axhline(y=45, color='r', linestyle='-')\n\n# Draw a horizontal line at y=50\nax.axhline(y=50, color='r', linestyle='-')\n\n# Draw a horizontal line at y=55\nax.axhline(y=55, color='r', linestyle='-')\n\n# Draw a horizontal line at y=60\nax.axhline(y=60, color='r', linestyle='-')\n\n# Draw a horizontal line at y=65\nax.axhline(y=65, color='r', linestyle='-')\n\n# Draw a horizontal line at y=70\nax.axhline(y=70, color='r', linestyle='-')\n\n# Draw a horizontal line at y=75\nax.axhline(y=75, color='r', linestyle='-')\n\n# Draw a horizontal line at y=80\nax.axhline(y=80, color='r', linestyle='-')\n\n# Draw a horizontal line at y=85\nax.axhline(y=85, color='r', linestyle='-')\n\n# Draw a horizontal line at y=90\nax.axhline(y=90, color='r', linestyle='-')\n\n# Draw a horizontal line at y=95\nax.axhline(y=95, color='r', linestyle='-')\n\n# Draw a horizontal line at y=100\nax.axhline(y=100, color='r', linestyle='-')\n\n# Draw a horizontal line at y=105\nax.axhline(y=105, color='r', linestyle='-')\n\n# Draw a horizontal line at y=110\nax.axhline(y=110, color='r', linestyle='-')\n\n# Draw a horizontal line at y=115\nax.axhline(y=115, color='r', linestyle='-')\n\n# Draw a horizontal line at y=120\nax.axhline(y=120, color='r', linestyle='-')\n\n# Draw a horizontal line at y=125\nax.axhline(y=125, color='r', linestyle='-')\n\n# Draw a horizontal line at y=130\nax.axhline(y=130, color='r', linestyle='-')\n\n# Draw a horizontal line at y=135\nax.axhline(y=135, color='r', linestyle='-')\n\n# Draw a horizontal line at y=140\nax.axhline(y=140, color='r', linestyle='-')\n\n# Draw a horizontal line at y=145\nax.axhline(y=145, color='r', linestyle='-')\n\n# Draw a horizontal line at y=150\nax.axhline(y=150, color='r', linestyle='-')\n\n# Draw a horizontal line at y=155\nax.axhline(y=155, color='r', linestyle='-')\n\n# Draw a horizontal line at y=160\nax.axhline(y=160, color='r', linestyle='-')\n\n# Draw a horizontal line at y=165\nax.axhline(y=165, color='r', linestyle='-')\n\n# Draw a horizontal line at y=170\nax.axhline(y=170, color='r', linestyle='-')\n\n# Draw a horizontal line at y=175\nax.axhline(y=175, color='r', linestyle='-')\n\n# Draw a horizontal line at y=180\nax.axhline(y=180, color='r', linestyle='-')\n\n# Draw a horizontal line at y=185\nax.axhline(y=185, color='r', linestyle='-')\n\n# Draw a horizontal line at y=190\nax.axhline(y=190, color='r', linestyle='-')\n\n# Draw a horizontal line at y=195\nax.axhline(y=195, color='r', linestyle='-')\n\n# Draw a horizontal line at y=200\nax.axhline(y=200, color='r', linestyle='-')\n\n# Draw a horizontal line at y=205\nax.axhline(y=205, color='r', linestyle='-')\n\n# Draw a horizontal line at y=210\nax.axhline(y=210, color='r', linestyle='-')\n\n# Draw a horizontal line at y=215\nax.axhline(y=215, color='r', linestyle='-')\n\n# Draw a horizontal line at y=220\nax.axhline(y=220, color='r', linestyle='-')\n\n# Draw a horizontal line at y=225\nax.axhline(y=225, color='r', linestyle='-')\n\n# Draw a horizontal line at y=230\nax.axhline(y=230, color='r', linestyle='-')\n\n# Draw a horizontal line at y=235\nax.axhline(y=235, color='r', linestyle='-')\n\n# Draw a horizontal line at y=240\nax.axhline(y=240, color='r', linestyle='-')\n\n# Draw a horizontal line at y=245\nax.axhline(y=245, color='r', linestyle='-')\n\n# Draw a horizontal line at y=250\nax.axhline(y=250, color='r', linestyle='-')\n\n# Draw a horizontal line at y=255\nax.axhline(y=255, color='r', linestyle='-')\n\n# Draw a horizontal line at y=260\nax.axhline(y=260, color='r', linestyle='-')\n\n# Draw a horizontal line at y=265\nax.axhline(y=265, color='r', linestyle='-')\n\n# Draw a horizontal line at y=270\nax.axhline(y=270, color='r', linestyle='-')\n\n# Draw a horizontal line at y=275\nax.axhline(y=275, color='r', linestyle='-')\n\n# Draw a horizontal line at y=280\nax.axhline(y=280, color='r', linestyle='-')\n\n# Draw a horizontal line at y=285\nax.axhline(y=285, color='r', linestyle='-')\n\n# Draw a horizontal line at y=290\nax.axhline(y=290, color='r', linestyle='-')\n\n# Draw a horizontal line at y=295\nax.axhline(y=295, color='r', linestyle='-')\n\n# Draw a horizontal line at y=300\nax.axhline(y=300, color='r', linestyle='-')\n\n# Draw a horizontal line at y=305\nax.axhline(y=305, color='r', linestyle='-')\n\n# Draw a horizontal line at y=310\nax.axhline(y=310, color='r', linestyle='-')\n\n# Draw a horizontal line at y=315\nax.axhline(y=315, color='r', linestyle='-')\n\n# Draw a horizontal line at y=320\nax.axhline(y=320, color='r', linestyle='-')\n\n# Draw a horizontal line at y=325\nax.axhline(y=325, color='r', linestyle='-')\n\n# Draw a horizontal line at y=330\nax.axhline(y=330, color='r', linestyle='-')\n\n# Draw a horizontal line at y=335\nax.axhline(y=335, color='r', linestyle='-')\n\n# Draw a horizontal line at y=340\nax.axhline(y=340, color='r', linestyle='-')\n\n# Draw a horizontal line at y=345\nax.axhline(y=345, color='r', linestyle='-')\n\n# Draw a horizontal line at y=350\nax.axhline(y=350, color='r', linestyle='-')\n\n# Draw a horizontal line at y=355\nax.axhline(y=355, color='r', linestyle='-')\n\n# Draw a horizontal line at y=360\nax.axhline(y=360, color='r', linestyle='-')\n\n# Draw a horizontal line at y=365\nax.axhline(y=365, color='r', linestyle='-')\n\n# Draw a horizontal line at y=370\nax.axhline(y=370, color='r', linestyle='-')\n\n# Draw a horizontal line at y=375\nax.axhline(y=375, color='r', linestyle='-')\n\n# Draw a horizontal line at y=380\nax.axhline(y=380, color='r', linestyle='-')\n\n# Draw a horizontal line at y=385\nax.axhline(y=385, color='r', linestyle='-')\n\n# Draw a horizontal line at y=390\nax.axhline(y=390, color='r', linestyle='-')\n\n# Draw a horizontal line at y=395\nax.axhline(y=395, color='r', linestyle='-')\n\n# Draw a horizontal line at y=400\nax.axhline(y=400, color='r', linestyle='-')\n\n# Draw a horizontal line at y=405\nax.axhline(y=405, color='r', linestyle='-')\n\n# Draw a horizontal line at y=410\nax.axhline(y=410, color='r', linestyle='-')\n\n# Draw a horizontal line at y=415\nax.axhline(y=415, color='r', linestyle='-')\n\n# Draw a horizontal line at y=420\nax.axhline(y=420, color='r', linestyle='-')\n\n# Draw a horizontal line at y=425\nax.axhline(y=425, color='r', linestyle='-')\n\n# Draw a horizontal line at y=430\nax.axhline(y=430, color='r', linestyle='-')\n\n# Draw a horizontal line at y=435\nax.axhline(y=435, color='r', linestyle='-')\n\n# Draw a horizontal line at y=440\nax.axhline(y=440, color='r', linestyle='-')\n\n# Draw a horizontal line at y=445\nax.axhline(y=445, color='r', linestyle='-')\n\n# Draw a horizontal line at y=450\nax.axhline(y=450, color='r', linestyle='-')\n\n# Draw a horizontal line at y=455\nax.axhline(y=455, color='r', linestyle='-')\n\n# Draw a horizontal line at y=460\nax.axhline(y=460, color='r', linestyle='-')\n\n# Draw a horizontal line at y=465\nax.axhline(y=465, color='r', linestyle='-')\n\n# Draw a horizontal line at y=470\nax.axhline(y=470, color='r', linestyle='-')\n\n# Draw a horizontal line at y=475\nax.axhline(y=475, color='r', linestyle='-')\n\n# Draw a horizontal line at y=480\nax.axhline(y=480, color='r', linestyle='-')\n\n# Draw a horizontal line at y=485\nax.axhline(y=485, color='r', linestyle='-')\n\n# Draw a horizontal line at y=490\nax.axhline(y=490, color='r', linestyle='-')\n\n# Draw a horizontal line at y=495\nax.axhline(y=495, color='r', linestyle='-')\n\n# Draw a horizontal line at y=500\nax.axhline(y=500, color='r', linestyle='-')\n\n# Draw a horizontal line at y=505\nax.axhline(y=505, color='r', linestyle='-')\n\n# Draw a horizontal line at y=510\nax.axhline(y=510, color='r', linestyle='-')\n\n# Draw a horizontal line at y=515\nax.axhline(y=515, color='r', linestyle='-')\n\n# Draw a horizontal line at y=520\nax.axhline(y=520, color='r', linestyle='-')\n\n# Draw a horizontal line at y=525\nax.axhline(y=525, color='r', linestyle='-')\n\n# Draw a horizontal line at y=530\nax.axhline(y=530, color='r', linestyle='-')\n\n# Draw a horizontal line at y=535\nax.axhline(y=535, color='r', linestyle='-')\n\n# Draw a horizontal line at y=540\nax.axhline(y=540, color='r', linestyle='-')\n\n# Draw a horizontal line at y=545\nax.axhline(y=545, color='r', linestyle='-')\n\n# Draw a horizontal line at y=550\nax.axhline(y=550, color='r', linestyle='-')\n\n# Draw a horizontal line at y=555\nax.axhline(y=555, color='r', linestyle='-')\n\n# Draw a horizontal line at y=560\nax.axhline(y=560, color='r', linestyle='-')\n\n# Draw a horizontal line at y=565\nax.axhline(y=565, color='r', linestyle='-')\n\n# Draw a horizontal line at y=570\nax.axhline(y=570, color='r', linestyle='-')\n\n# Draw a horizontal line at y=575\nax.axhline(y=575, color='r', linestyle='-')\n\n# Draw a horizontal line at y=580\nax.axhline(y=580, color='r', linestyle='-')\n\n# Draw a horizontal line at y=585\nax.axhline(y=585, color='r', linestyle='-')\n\n# Draw a horizontal line at y=590\nax.axhline(y=590, color='r', linestyle='-')\n\n# Draw a horizontal line at y=595\nax.axhline(y=595, color='r', linestyle='-')\n\n# Draw a horizontal line at y=600\nax.axhline(y=600, color='r', linestyle='-')\n\n# Draw a horizontal line at y=605\nax.axhline(y=605, color='r', linestyle='-')\n\n# Draw a horizontal line at y=610\nax.axhline(y=610, color='r', linestyle='-')\n\n# Draw a horizontal line at y=615\nax.axhline(y=615, color='r', linestyle='-')\n\n# Draw a horizontal line at y=620\nax.axhline(y=620, color='r', linestyle='-')\n\n# Draw a horizontal line at y=625\nax.axhline(y=625, color='r', linestyle='-')\n\n# Draw a horizontal line at y=630\nax.axhline(y=630, color='r', linestyle='-')\n\n# Draw a horizontal line at y=635\nax.axhline(y=635, color='r', linestyle='-')\n\n# Draw a horizontal line at y=640\nax.axhline(y=640, color='r', linestyle='-')\n\n# Draw a horizontal line at y=645\nax.axhline(y=645, color='r', linestyle='-')\n\n# Draw a horizontal line at y=650\nax.axhline(y=650, color='r', linestyle='-')\n\n# Draw a horizontal line at y=655\nax.axhline(y=655, color='r', linestyle='-')\n\n# Draw a horizontal line at y=660\nax.axhline(y=660, color='r', linestyle='-')\n\n# Draw a horizontal line at y=665\nax.axhline(y=665, color='r', linestyle='-')\n\n# Draw a horizontal line at y=670\nax.axhline(y=670, color='r', linestyle='-')\n\n# Draw a horizontal line at y=675\nax.axhline(y=675, color='r', linestyle='-')\n\n# Draw a horizontal line at y=680\nax.axhline(y=680, color='r', linestyle='-')\n\n# Draw a horizontal line at y=685\nax.axhline(y=685, color='r', linestyle='-')\n\n# Draw a horizontal line at y=690\nax.axhline(y=690, color='r', linestyle='-')\n\n# Draw a horizontal line at y=695\nax.axhline(y=695, color='r', linestyle='-')\n\n# Draw a horizontal line at y=700\nax.axhline(y=700, color='r',"}
{"file": "dataset/ori_500/box_16.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the bar chart\ncategories = ['REM', 'No POP', 'Separate M emb.', '4 x 4 tokenizer', 'No latent space C', 'C w/o action inputs']\nvalues = [2.3, 1.8, 2.1, 2.6, 2.2, 2.4]\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(5.0, 5.0))\nax.bar(categories, values, color='blue')\n\n# Set the title and labels\nax.set_title('Mean')\nax.set_xlabel('Categories')\nax.set_ylabel('Values')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_17.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 4.0))\n\n# Set the title of the plot\nax.set_title('Run Performance')\n\n# Set the x-axis label\nax.set_xlabel('Run')\n\n# Set the y-axis label\nax.set_ylabel('Value')\n\n# Define the data for the plot\nx = ['Run 1', 'Run 2', 'Run 3', 'Run 4', 'Run 5', 'Run 6', 'Run 7', 'Run 8', 'Run 9', 'Run 10']\ny = [50, 60, 70, 80, 90, 100, 90, 80, 70, 60]\n\n# Plot the data\nax.plot(x, y, 'ro-')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_18.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Define the data for the plots\ndata = {\n    'AR': [0.2, 0.4, 0.6, 0.8],\n    'LSTMAlpha': [0.3, 0.5, 0.7, 0.9],\n    'LSTMDbeta': [0.1, 0.3, 0.5, 0.7],\n    'AE': [0.2, 0.4, 0.6, 0.8],\n    'EncDecAD': [0.1, 0.3, 0.5, 0.7],\n    'SRCNN': [0.2, 0.4, 0.6, 0.8],\n    'AnomalyTransformer': [0.1, 0.3, 0.5, 0.7],\n    'TimesNet': [0.2, 0.4, 0.6, 0.8],\n    'Donut': [0.1, 0.3, 0.5, 0.7],\n    'TFAD': [0.2, 0.4, 0.6, 0.8]\n}\n\n# Plot the data\nfor key, value in data.items():\n    ax.plot(value, label=key)\n\n# Set the title and labels\nax.set_title('Plot of Data')\nax.set_xlabel('Time (one by one)')\nax.set_ylabel('Value')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_19.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 4))\n\n# Define the data\nx = ['BERT Base', 'MacBERT', 'English HLM']\ny = [0.8, 0.6, 0.4]\ncolors = ['green', 'orange', 'blue']\n\n# Plot the data\nfor i in range(len(x)):\n    ax.plot([x[i], x[i]], [y[i], y[i] + 0.2], marker='o', color=colors[i])\n\n# Set the title and labels\nax.set_title('BERT sentences')\nax.set_xlabel('Sentences')\nax.set_ylabel('\u03b4 (m/s)')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and a set of subplots\nfig, axes = plt.subplots(2, 2, figsize=(8.0, 6.0))\n\n# Define the data for the plots\ndata1 = [2.5, 2.4, 2.2]\ndata2 = [0.7, 0.6, 0.8]\ndata3 = [2.5, 2.4, 2.2]\ndata4 = [0.7, 0.6, 0.8]\n\n# Plot the data on the first subplot\naxes[0, 0].bar(range(len(data1)), data1, color='pink')\naxes[0, 0].set_title('Our Model')\n\n# Plot the data on the second subplot\naxes[0, 1].bar(range(len(data2)), data2, color='lightblue')\naxes[0, 1].set_title('NTM+CL')\n\n# Plot the data on the third subplot\naxes[1, 0].bar(range(len(data3)), data3, color='pink')\naxes[1, 0].set_title('Our Model')\n\n# Plot the data on the fourth subplot\naxes[1, 1].bar(range(len(data4)), data4, color='lightblue')\naxes[1, 1].set_title('NTM+CL')\n\n# Set the y-axis limits for all subplots\nfor ax in axes.flat:\n    ax.set_ylim(0.5, 2.8)\n\n# Display the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/box_20.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the plots\ngroups = ['target', 'control']\nmetrics = ['Digit span', 'Lexical decision', 'Lexical decision', 'Reaction time', 'Trail making']\nvalues = [7, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\ncolors = ['blue', 'orange']\n\n# Create a figure and a set of subplots\nfig, axes = plt.subplots(2, 3, figsize=(10, 5))\n\n# Plot the first subplot\naxes[0, 0].bar(groups, values[:2], color=colors)\naxes[0, 0].set_title(metrics[0])\naxes[0, 0].set_ylabel('Digit span')\n\n# Plot the second subplot\naxes[0, 1].bar(groups, values[2:4], color=colors)\naxes[0, 1].set_title(metrics[1])\naxes[0, 1].set_ylabel('Lexical decision')\n\n# Plot the third subplot\naxes[0, 2].bar(groups, values[4:6], color=colors)\naxes[0, 2].set_title(metrics[2])\naxes[0, 2].set_ylabel('Lexical decision')\n\n# Plot the fourth subplot\naxes[1, 0].bar(groups, values[6:8], color=colors)\naxes[1, 0].set_title(metrics[3])\naxes[1, 0].set_ylabel('Reaction time')\n\n# Plot the fifth subplot\naxes[1, 1].bar(groups, values[8:10], color=colors)\naxes[1, 1].set_title(metrics[4])\naxes[1, 1].set_ylabel('Trail making')\n\n# Plot the sixth subplot\naxes[1, 2].bar(groups, values[10:12], color=colors)\naxes[1, 2].set_title(metrics[5])\naxes[1, 2].set_ylabel('Time per tap [s]')\n\n# Adjust layout\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/box_21.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(9.0, 5.0))\n\n# Set the title of the plot\nax.set_title('Methods')\n\n# Set the x-axis label\nax.set_xlabel('Prediction Accuracy vD1')\n\n# Set the y-axis label\nax.set_ylabel('Method')\n\n# Define the data for the bar chart\ndata = {\n    'BG': [70, 80],\n    'IBP': [60, 70],\n    'SSP': [50, 60],\n    'NBP': [40, 50]\n}\n\n# Plot the bar chart\nfor method, values in data.items():\n    ax.barh(method, values[0], color='brown')\n    ax.barh(method, values[1], left=values[0], color='green')\n\n# Set the x-axis limits\nax.set_xlim(0, 100)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_22.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ndepth = [50, 100, 150, 200, 300, 350]\nrewards = [0.04, 0.04, 0.02, 0.02, 0.02, 0.02]\n\n# Plot\nfig, ax = plt.subplots(figsize=(6.0, 5.0))\nax.bar(depth, rewards, color='blue')\nax.set_xlabel('Search depth')\nax.set_ylabel('Reward')\nplt.show()\n```"}
{"file": "dataset/ori_500/box_23.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(9.0, 5.0))\n\n# Define the data\nactivities = ['Music Playtime', 'Reading Duration', 'Exercise Duration', 'Gaming Duration']\ndurations = [65.1, 55.7, 50.3, 29.5]\ncolors = ['pink', 'orange', 'green', 'purple']\n\n# Plot the bars\nfor i, activity in enumerate(activities):\n    ax.bar(activity, durations[i], color=colors[i])\n\n# Set the title\nax.set_title('Daily Activity Durations')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_24.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\ncategories = ['No Intervention', 'Low Intensity', 'High Intensity', 'Recovery', 'Environment']\nmean_values = [2.1, 2.3, 2.5, 2.7, 2.9]\nmedian_values = [1.9, 2.1, 2.3, 2.5, 2.7]\niqr_mean_values = [2.2, 2.4, 2.6, 2.8, 3.0]\niqr_median_values = [1.8, 2.0, 2.2, 2.4, 2.6]\n\n# Create a figure and a set of subplots\nfig, axes = plt.subplots(2, 2, figsize=(8.0, 8.0))\n\n# Plot the first subplot\naxes[0, 0].bar(categories, mean_values, color='blue')\naxes[0, 0].set_title('Mean Value')\n\n# Plot the second subplot\naxes[0, 1].bar(categories, median_values, color='green')\naxes[0, 1].set_title('Median Value')\n\n# Plot the third subplot\naxes[1, 0].bar(categories, iqr_mean_values, color='purple')\naxes[1, 0].set_title('IQR Mean')\n\n# Plot the fourth subplot\naxes[1, 1].bar(categories, iqr_median_values, color='orange')\naxes[1, 1].set_title('IQR Median')\n\n# Adjust layout\nplt.tight_layout()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_25.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Set the x-axis limits\nax.set_xlim(-40, 40)\n\n# Set the y-axis limits\nax.set_ylim(-0.4, 7.6)\n\n# Set the x-axis ticks\nax.set_xticks(range(-40, 50, 20))\n\n# Set the y-axis ticks\nax.set_yticks(range(0, 8, 2))\n\n# Set the x-axis label\nax.set_xlabel('Thrust Angle [\u00b0]')\n\n# Set the y-axis label\nax.set_ylabel('Angular Frequency [rad/s]')\n\n# Add a vertical line at x=0\nax.axvline(x=0, color='k', linestyle='-')\n\n# Add a horizontal line at y=0\nax.axhline(y=0, color='k', linestyle='-')\n\n# Add a rectangle with a specific width and height\nrect = plt.Rectangle((-30, 5), 20, 1, color='blue')\nax.add_patch(rect)\n\n# Add a rectangle with a specific width and height\nrect = plt.Rectangle((-10, 4), 20, 1, color='green')\nax.add_patch(rect)\n\n# Add a rectangle with a specific width and height\nrect = plt.Rectangle((10, 3), 20, 1, color='blue')\nax.add_patch(rect)\n\n# Add a rectangle with a specific width and height\nrect = plt.Rectangle((30, 2), 20, 1, color='green')\nax.add_patch(rect)\n\n# Add a rectangle with a specific width and height\nrect = plt.Rectangle((-30, 1), 20, 1, color='blue')\nax.add_patch(rect)\n\n# Add a rectangle with a specific width and height\nrect = plt.Rectangle((-10, 0), 20, 1, color='green')\nax.add_patch(rect)\n\n# Add a rectangle with a specific width and height\nrect = plt.Rectangle((10, -1), 20, 1, color='blue')\nax.add_patch(rect)\n\n# Add a rectangle with a specific width and height\nrect = plt.Rectangle((30, -2), 20, 1, color='green')\nax.add_patch(rect)\n\n# Add a rectangle with a specific width and height\nrect = plt.Rectangle((-30, -3), 20, 1, color='blue')\nax.add_patch(rect)\n\n# Add a rectangle with a specific width and height\nrect = plt.Rectangle((-10, -4), 20, 1, color='green')\nax.add_patch(rect)\n\n# Add a rectangle with a specific width and height\nrect = plt.Rectangle((10, -5), 20, 1, color='blue')\nax.add_patch(rect)\n\n# Add a rectangle with a specific width and height\nrect = plt.Rectangle((30, -6), 20, 1, color='green')\nax.add_patch(rect)\n\n# Add a rectangle with a specific width and height\nrect = plt.Rectangle((-30, -7), 20, 1, color='blue')\nax.add_patch(rect)\n\n# Add a rectangle with a specific width and height\nrect = plt.Rectangle((-10, -8), 20, 1, color='green')\nax.add_patch(rect)\n\n# Add a rectangle with a specific width and height\nrect = plt.Rectangle((10, -9), 20, 1, color='blue')\nax.add_patch(rect)\n\n# Add a rectangle with a specific width and height\nrect = plt.Rectangle((30, -10), 20, 1, color='green')\nax.add_patch(rect)\n\n# Add a rectangle with a specific width and height\nrect = plt.Rectangle((-30, -11), 20, 1, color='blue')\nax.add_patch(rect)\n\n# Add a rectangle with a specific width and height\nrect = plt.Rectangle((-10, -12), 20, 1, color='green')\nax.add_patch(rect)\n\n# Add a rectangle with a specific width and height\nrect = plt.Rectangle((10, -13), 20, 1, color='blue')\nax.add_patch(rect)\n\n# Add a rectangle with a specific width and height\nrect = plt.Rectangle((30, -14), 20, 1, color='green')\nax.add_patch(rect)\n\n# Add a rectangle with a specific width and height\nrect = plt.Rectangle((-30, -15), 20, 1, color='blue')\nax.add_patch(rect)\n\n# Add a rectangle with a specific width and height\nrect = plt.Rectangle((-10, -16), 20, 1, color='green')\nax.add_patch(rect)\n\n# Add a rectangle with a specific width and height\nrect = plt.Rectangle((10, -17), 20, 1, color='blue')\nax.add_patch(rect)\n\n# Add a rectangle with a specific width and height\nrect = plt.Rectangle((30, -18), 20, 1, color='green')\nax.add_patch(rect)\n\n# Add a rectangle with a specific width and height\nrect = plt.Rectangle((-30, -19), 20, 1, color='blue')\nax.add_patch(rect)\n\n# Add a rectangle with a specific width and height\nrect = plt.Rectangle((-10, -20), 20, 1, color='green')\nax.add_patch(rect)\n\n# Add a rectangle with a specific width and height\nrect = plt.Rectangle((10, -21), 20, 1, color='blue')\nax.add_patch(rect)\n\n# Add a rectangle with a specific width and height\nrect = plt.Rectangle((30, -22), 20, 1, color='green')\nax.add_patch(rect)\n\n# Add a rectangle with a specific width and height\nrect = plt.Rectangle((-30, -23), 20, 1, color='blue')\nax.add_patch(rect)\n\n# Add a rectangle with a specific width and height\nrect = plt.Rectangle((-10, -24), 20, 1, color='green')\nax.add_patch(rect)\n\n# Add a rectangle with a specific width and height\nrect = plt.Rectangle((10, -25), 20, 1, color='blue')\nax.add_patch(rect)\n\n# Add a rectangle with a specific width and height\nrect = plt.Rectangle((30, -26), 20, 1, color='green')\nax.add_patch(rect)\n\n# Add a rectangle with a specific width and height\nrect = plt.Rectangle((-30, -27), 20, 1, color='blue')\nax.add_patch(rect)\n\n# Add a rectangle with a specific width and height\nrect = plt.Rectangle((-10, -28), 20, 1, color='green')\nax.add_patch(rect)\n\n# Add a rectangle with a specific width and height\nrect = plt.Rectangle((10, -29), 20, 1, color='blue')\nax.add_patch(rect)\n\n# Add a rectangle with a specific width and height\nrect = plt.Rectangle((30, -30), 20, 1, color='green')\nax.add_patch(rect)\n\n# Add a rectangle with a specific width and height\nrect = plt.Rectangle((-30, -31), 20, 1, color='blue')\nax.add_patch(rect)\n\n# Add a rectangle with a specific width and height\nrect = plt.Rectangle((-10, -32), 20, 1, color='green')\nax.add_patch(rect)\n\n# Add a rectangle with a specific width and height\nrect = plt.Rectangle((10, -33), 20, 1, color='blue')\nax.add_patch(rect)\n\n# Add a rectangle with a specific width and height\nrect = plt.Rectangle((30, -34), 20, 1, color='green')\nax.add_patch(rect)\n\n# Add a rectangle with a specific width and height\nrect = plt.Rectangle((-30, -35), 20, 1, color='blue')\nax.add_patch(rect)\n\n# Add a rectangle with a specific width and height\nrect = plt.Rectangle((-10, -36), 20, 1, color='green')\nax.add_patch(rect)\n\n# Add a rectangle with a specific width and height\nrect = plt.Rectangle((10, -37), 20, 1, color='blue')\nax.add_patch(rect)\n\n# Add a rectangle with a specific width and height\nrect = plt.Rectangle((30, -38), 20, 1, color='green')\nax.add_patch(rect)\n\n# Add a rectangle with a specific width and height\nrect = plt.Rectangle((-30, -39), 20, 1, color='blue')\nax.add_patch(rect)\n\n# Add a rectangle with a specific width and height\nrect = plt.Rectangle((-10, -40), 20, 1, color='green')\nax.add_patch(rect)\n\n# Add a rectangle with a specific width and height\nrect = plt.Rectangle((10, -41), 20, 1, color='blue')\nax.add_patch(rect)\n\n# Add a rectangle with a specific width and height\nrect = plt.Rectangle((30, -42), 20, 1, color='green')\nax.add_patch(rect)\n\n# Add a rectangle with a specific width and height\nrect = plt.Rectangle((-30, -43), 20, 1, color='blue')\nax.add_patch(rect)\n\n# Add a rectangle with a specific width and height\nrect = plt.Rectangle((-10, -44), 20, 1, color='green')\nax.add_patch(rect)\n\n# Add a rectangle with a specific width and height\nrect = plt.Rectangle((10, -45), 20, 1, color='blue')\nax.add_patch(rect)\n\n# Add a rectangle with a specific width and height\nrect = plt.Rectangle((30, -46), 20, 1, color='green')\nax.add_patch(rect)\n\n# Add a rectangle with a specific width and height\nrect = plt.Rectangle((-30, -47), 20, 1, color='blue')\nax.add_patch(rect)\n\n# Add a rectangle with a specific width and height\nrect = plt.Rectangle((-10, -48), 20, 1, color='green')\nax.add_patch(rect)\n\n# Add a rectangle with a specific width and height\nrect = plt.Rectangle((10, -49), 20, 1, color='blue')\nax.add_patch(rect)\n\n# Add a rectangle with a specific width and height\nrect = plt.Rectangle((30, -50), 20, 1, color='green')\nax.add_patch(rect)\n\n# Add a rectangle with a specific width and height\nrect = plt.Rectangle((-30, -51), 20, 1, color='blue')\nax.add_patch(rect)\n\n# Add a rectangle with a specific width and height\nrect = plt.Rectangle((-10, -52), 20, 1, color='green')\nax.add_patch(rect)\n\n# Add a rectangle with a specific width and height\nrect = plt.Rectangle((10, -53), 20, 1, color='blue')\nax.add_patch(rect)\n\n# Add a rectangle with a specific width and height\nrect = plt.Rectangle((30, -54), 20, 1, color='green')\nax.add_patch(rect)\n\n# Add a rectangle with a specific width and height\nrect = plt.Rectangle((-30, -55), 20, 1, color='blue')\nax.add_patch(rect)\n\n# Add a rectangle with a specific width and height\nrect = plt.Rectangle((-10, -56), 20, 1, color='green')\nax.add_patch(rect)\n\n# Add a rectangle with a specific width and height\nrect = plt.Rectangle((10, -57), 20, 1, color='blue')\nax.add_patch(rect)\n\n# Add a rectangle with a specific width and height\nrect = plt.Rectangle((30, -58), 20, 1, color='green')\nax.add_patch(rect)\n\n# Add a rectangle with a specific width and height\nrect = plt.Rectangle((-30, -59), 20, 1, color='blue')\nax.add_patch(rect)\n\n# Add a rectangle with a specific width and height\nrect = plt.Rectangle((-10, -60), 20, 1, color='green')\nax.add_patch(rect)\n\n# Add a rectangle with a specific width and height\nrect = plt.Rectangle((10, -61), 20, 1, color='blue')\nax.add_patch(rect)\n\n# Add a rectangle with a specific width and height\nrect = plt.Rectangle((30, -62), 20, 1, color='green')\nax.add_patch(rect)\n\n# Add a rectangle with a specific width and height\nrect = plt.Rectangle((-30, -63), 20, 1, color='blue')\nax.add_patch(rect)\n\n# Add a rectangle with a specific width and height\nrect = plt.Rectangle((-10, -64), 20, 1, color='green')\nax.add_patch(rect)\n\n# Add a rectangle with a specific width and height\nrect = plt.Rectangle((10, -65), 20, 1, color='blue')\nax.add_patch(rect)\n\n# Add a rectangle with a specific width and height\nrect = plt.Rectangle((30, -66), 20, 1, color='green')\nax.add_patch(rect)\n\n# Add a rectangle with a specific width and height\nrect = plt.Rectangle((-30, -67), 20, 1, color='blue')\nax.add_patch(rect)\n\n# Add a rectangle with a specific width and height\nrect = plt.Rectangle((-10, -68), 20, 1, color='green')\nax.add_patch(rect)\n\n# Add a rectangle with a specific width and height\nrect = plt.Rectangle((10, -69), 20, 1, color='blue')\nax.add_patch(rect)\n\n# Add a rectangle with a specific width and height\nrect = plt.Rectangle((30, -70), 20, 1, color='green')\nax.add_patch(rect)\n\n# Add a rectangle with a specific width and height\nrect = plt.Rectangle((-30, -71), 20, 1, color='blue')\nax.add_patch(rect)\n\n# Add a rectangle with a specific width and height\nrect = plt.Rectangle((-10, -72), 20, 1, color='green')\nax.add_patch(rect)\n\n# Add a rectangle with a specific width and height\nrect = plt.Rectangle((10, -73), 20, 1, color='blue')\nax.add_patch(rect)\n\n# Add a rectangle with a specific width and height\nrect = plt.Rectangle((30, -74), 20, 1, color='green')\nax.add_patch(rect)\n\n# Add a rectangle with a specific width and height\nrect = plt.Rectangle((-30, -75), 20, 1, color='blue')\nax.add_patch(rect)\n\n# Add a rectangle with a specific width and height\nrect = plt.Rectangle((-10, -76), 20, 1, color='green')\nax.add_patch(rect)\n\n# Add a rectangle with a specific width and height\nrect = plt.Rectangle((10, -77), 20, 1, color='blue')\nax.add_patch(rect)\n\n# Add a rectangle with a specific width and height\nrect = plt.Rectangle((30, -78), 20, 1, color='green')\nax.add_patch(rect)\n\n# Add a rectangle with a specific width and height\nrect = plt.Rectangle((-30, -79), 20, 1, color='blue')\nax.add_patch(rect)\n\n# Add a rectangle with a specific width and height\nrect = plt.Rectangle((-10, -80), 20, 1, color='green')\nax.add_patch(rect)\n\n# Add a rectangle with a specific width and height\nrect = plt.Rectangle((10, -81), 20, 1, color='blue')\nax.add_patch(rect)\n\n# Add a rectangle with a specific width and height\nrect = plt.Rectangle((30, -82), 20, 1, color='green')\nax.add_patch(rect)\n\n# Add a rectangle with a specific width and height\nrect = plt.Rectangle((-30, -83), 20, 1, color='blue')\nax.add_patch(rect)\n\n# Add a rectangle with a specific width and height\nrect = plt.Rectangle((-10, -84), 20, 1, color='green')\nax.add_patch(rect)\n\n# Add a rectangle with a specific width and height\nrect = plt.Rectangle((10, -85), 20, 1, color='blue')\nax.add_patch(rect)\n\n# Add a rectangle with a specific width and height\nrect = plt.Rectangle((30, -86), 20, 1, color='green')\nax.add_patch(rect)\n\n# Add a rectangle with a specific width and height\nrect = plt.Rectangle((-30, -87), 20, 1, color='blue')\nax.add_patch(rect)\n\n# Add a rectangle with a specific width and height\nrect = plt.Rectangle((-10, -88), 20, 1, color='green')\nax.add_patch(rect)\n\n# Add a rectangle with a specific width and height\nrect = plt.Rectangle((10, -89), 20, 1, color='blue')\nax.add_patch(rect)\n\n# Add a rectangle with a specific width and height\nrect = plt.Rectangle((30, -90), 20, 1, color='green')\nax.add_patch(rect)\n\n# Add a rectangle with a specific width and height\nrect = plt.Rectangle((-30, -91), 20, 1, color='blue')\nax.add_patch(rect)\n\n# Add a rectangle with a specific width and height\nrect = plt.Rectangle((-10, -92), 20, 1, color='green')\nax.add_patch(rect)\n\n# Add a rectangle with a specific width and height\nrect = plt.Rectangle((10, -93), 20, 1, color='blue')\nax.add_patch(rect)\n\n# Add a rectangle with a specific width and height\nrect = plt.Rectangle((30, -94), 20, 1, color='green')\nax.add_patch(rect)\n\n# Add a rectangle with a specific width"}
{"file": "dataset/ori_500/box_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Define the data\nx = ['ST_CVRP', 'ST_VRPTW', 'ST_All', 'Ours']\ny = [25, 45, 35, 15]\ncolors = ['blue', 'purple', 'orange', 'red']\n\n# Plot the bars\nbars = ax.bar(x, y, color=colors)\n\n# Add labels and title\nax.set_xlabel('Performance Gap (%)')\nax.set_ylabel('Team')\nax.set_title('Team Performance')\n\n# Add grid\nax.grid(True)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_4.pdf", "response": "```python\n\"\"\"\n=====================================\nComparing Performance of Different Models\n=====================================\n\nThis example demonstrates how to create a grid of plots with different models and their performance metrics.\n\"\"\"\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and a set of subplots\nfig, axs = plt.subplots(2, 4, figsize=(12.0, 3.0), constrained_layout=True)\n\n# Define the models and their performance metrics\nmodels = ['REM (ours)', 'IRIS', 'STORM', 'TWM', 'DreamerV3', 'SimPLe']\nperformance_metrics = [\n    [0.3, 0.5, 0.7, 0.9],  # REM (ours)\n    [0.2, 0.4, 0.6, 0.8],  # IRIS\n    [0.1, 0.3, 0.5, 0.7],  # STORM\n    [0.0, 0.2, 0.4, 0.6],  # TWM\n    [0.1, 0.3, 0.5, 0.7],  # DreamerV3\n    [0.0, 0.2, 0.4, 0.6]   # SimPLe\n]\n\n# Plot the performance metrics for each model\nfor i, model in enumerate(models):\n    ax = axs[i // 4, i % 4]\n    ax.set_title(model)\n    ax.plot(performance_metrics[i], 'ro-')\n    ax.set_xlabel('Human Normalized Score')\n    ax.set_ylabel('Performance Metric')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/box_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Thrust Angle vs Angular Frequency')\n\n# Set the x-axis label\nax.set_xlabel('Angular Frequency [rad/s]')\n\n# Set the y-axis label\nax.set_ylabel('Thrust Angle [\u00b0]')\n\n# Set the x-axis limits\nax.set_xlim(2.0, 5.0)\n\n# Set the y-axis limits\nax.set_ylim(-60, 60)\n\n# Draw a horizontal line at y=0\nax.axhline(y=0, color='black', linestyle='-')\n\n# Draw a vertical line at x=0\nax.axvline(x=0, color='black', linestyle='-')\n\n# Draw a rectangle with a cross in the center\nrectangle = plt.Rectangle((0, 0), 1, 1, color='orange')\nax.add_patch(rectangle)\nax.text(0.5, 0.5, 'X', ha='center', va='center')\n\n# Draw a rectangle with a cross in the center\nrectangle = plt.Rectangle((0, 0), 1, 1, color='red')\nax.add_patch(rectangle)\nax.text(0.5, 0.5, 'X', ha='center', va='center')\n\n# Draw a rectangle with a cross in the center\nrectangle = plt.Rectangle((0, 0), 1, 1, color='blue')\nax.add_patch(rectangle)\nax.text(0.5, 0.5, 'X', ha='center', va='center')\n\n# Draw a rectangle with a cross in the center\nrectangle = plt.Rectangle((0, 0), 1, 1, color='green')\nax.add_patch(rectangle)\nax.text(0.5, 0.5, 'X', ha='center', va='center')\n\n# Draw a rectangle with a cross in the center\nrectangle = plt.Rectangle((0, 0), 1, 1, color='purple')\nax.add_patch(rectangle)\nax.text(0.5, 0.5, 'X', ha='center', va='center')\n\n# Draw a rectangle with a cross in the center\nrectangle = plt.Rectangle((0, 0), 1, 1, color='brown')\nax.add_patch(rectangle)\nax.text(0.5, 0.5, 'X', ha='center', va='center')\n\n# Draw a rectangle with a cross in the center\nrectangle = plt.Rectangle((0, 0), 1, 1, color='pink')\nax.add_patch(rectangle)\nax.text(0.5, 0.5, 'X', ha='center', va='center')\n\n# Draw a rectangle with a cross in the center\nrectangle = plt.Rectangle((0, 0), 1, 1, color='cyan')\nax.add_patch(rectangle)\nax.text(0.5, 0.5, 'X', ha='center', va='center')\n\n# Draw a rectangle with a cross in the center\nrectangle = plt.Rectangle((0, 0), 1, 1, color='magenta')\nax.add_patch(rectangle)\nax.text(0.5, 0.5, 'X', ha='center', va='center')\n\n# Draw a rectangle with a cross in the center\nrectangle = plt.Rectangle((0, 0), 1, 1, color='yellow')\nax.add_patch(rectangle)\nax.text(0.5, 0.5, 'X', ha='center', va='center')\n\n# Draw a rectangle with a cross in the center\nrectangle = plt.Rectangle((0, 0), 1, 1, color='grey')\nax.add_patch(rectangle)\nax.text(0.5, 0.5, 'X', ha='center', va='center')\n\n# Draw a rectangle with a cross in the center\nrectangle = plt.Rectangle((0, 0), 1, 1, color='white')\nax.add_patch(rectangle)\nax.text(0.5, 0.5, 'X', ha='center', va='center')\n\n# Draw a rectangle with a cross in the center\nrectangle = plt.Rectangle((0, 0), 1, 1, color='black')\nax.add_patch(rectangle)\nax.text(0.5, 0.5, 'X', ha='center', va='center')\n\n# Draw a rectangle with a cross in the center\nrectangle = plt.Rectangle((0, 0), 1, 1, color='silver')\nax.add_patch(rectangle)\nax.text(0.5, 0.5, 'X', ha='center', va='center')\n\n# Draw a rectangle with a cross in the center\nrectangle = plt.Rectangle((0, 0), 1, 1, color='gold')\nax.add_patch(rectangle)\nax.text(0.5, 0.5, 'X', ha='center', va='center')\n\n# Draw a rectangle with a cross in the center\nrectangle = plt.Rectangle((0, 0), 1, 1, color='brown')\nax.add_patch(rectangle)\nax.text(0.5, 0.5, 'X', ha='center', va='center')\n\n# Draw a rectangle with a cross in the center\nrectangle = plt.Rectangle((0, 0), 1, 1, color='maroon')\nax.add_patch(rectangle)\nax.text(0.5, 0.5, 'X', ha='center', va='center')\n\n# Draw a rectangle with a cross in the center\nrectangle = plt.Rectangle((0, 0), 1, 1, color='navy')\nax.add_patch(rectangle)\nax.text(0.5, 0.5, 'X', ha='center', va='center')\n\n# Draw a rectangle with a cross in the center\nrectangle = plt.Rectangle((0, 0), 1, 1, color='olive')\nax.add_patch(rectangle)\nax.text(0.5, 0.5, 'X', ha='center', va='center')\n\n# Draw a rectangle with a cross in the center\nrectangle = plt.Rectangle((0, 0), 1, 1, color='indigo')\nax.add_patch(rectangle)\nax.text(0.5, 0.5, 'X', ha='center', va='center')\n\n# Draw a rectangle with a cross in the center\nrectangle = plt.Rectangle((0, 0), 1, 1, color='violet')\nax.add_patch(rectangle)\nax.text(0.5, 0.5, 'X', ha='center', va='center')\n\n# Draw a rectangle with a cross in the center\nrectangle = plt.Rectangle((0, 0), 1, 1, color='azure')\nax.add_patch(rectangle)\nax.text(0.5, 0.5, 'X', ha='center', va='center')\n\n# Draw a rectangle with a cross in the center\nrectangle = plt.Rectangle((0, 0), 1, 1, color='beige')\nax.add_patch(rectangle)\nax.text(0.5, 0.5, 'X', ha='center', va='center')\n\n# Draw a rectangle with a cross in the center\nrectangle = plt.Rectangle((0, 0), 1, 1, color='chocolate')\nax.add_patch(rectangle)\nax.text(0.5, 0.5, 'X', ha='center', va='center')\n\n# Draw a rectangle with a cross in the center\nrectangle = plt.Rectangle((0, 0), 1, 1, color='coral')\nax.add_patch(rectangle)\nax.text(0.5, 0.5, 'X', ha='center', va='center')\n\n# Draw a rectangle with a cross in the center\nrectangle = plt.Rectangle((0, 0), 1, 1, color='crimson')\nax.add_patch(rectangle)\nax.text(0.5, 0.5, 'X', ha='center', va='center')\n\n# Draw a rectangle with a cross in the center\nrectangle = plt.Rectangle((0, 0), 1, 1, color='cyan')\nax.add_patch(rectangle)\nax.text(0.5, 0.5, 'X', ha='center', va='center')\n\n# Draw a rectangle with a cross in the center\nrectangle = plt.Rectangle((0, 0), 1, 1, color='darkblue')\nax.add_patch(rectangle)\nax.text(0.5, 0.5, 'X', ha='center', va='center')\n\n# Draw a rectangle with a cross in the center\nrectangle = plt.Rectangle((0, 0), 1, 1, color='darkgreen')\nax.add_patch(rectangle)\nax.text(0.5, 0.5, 'X', ha='center', va='center')\n\n# Draw a rectangle with a cross in the center\nrectangle = plt.Rectangle((0, 0), 1, 1, color='darkgrey')\nax.add_patch(rectangle)\nax.text(0.5, 0.5, 'X', ha='center', va='center')\n\n# Draw a rectangle with a cross in the center\nrectangle = plt.Rectangle((0, 0), 1, 1, color='darkkhaki')\nax.add_patch(rectangle)\nax.text(0.5, 0.5, 'X', ha='center', va='center')\n\n# Draw a rectangle with a cross in the center\nrectangle = plt.Rectangle((0, 0), 1, 1, color='darkmagenta')\nax.add_patch(rectangle)\nax.text(0.5, 0.5, 'X', ha='center', va='center')\n\n# Draw a rectangle with a cross in the center\nrectangle = plt.Rectangle((0, 0), 1, 1, color='darkolivegreen')\nax.add_patch(rectangle)\nax.text(0.5, 0.5, 'X', ha='center', va='center')\n\n# Draw a rectangle with a cross in the center\nrectangle = plt.Rectangle((0, 0), 1, 1, color='darkorange')\nax.add_patch(rectangle)\nax.text(0.5, 0.5, 'X', ha='center', va='center')\n\n# Draw a rectangle with a cross in the center\nrectangle = plt.Rectangle((0, 0), 1, 1, color='darkred')\nax.add_patch(rectangle)\nax.text(0.5, 0.5, 'X', ha='center', va='center')\n\n# Draw a rectangle with a cross in the center\nrectangle = plt.Rectangle((0, 0), 1, 1, color='darksalmon')\nax.add_patch(rectangle)\nax.text(0.5, 0.5, 'X', ha='center', va='center')\n\n# Draw a rectangle with a cross in the center\nrectangle = plt.Rectangle((0, 0), 1, 1, color='darkseagreen')\nax.add_patch(rectangle)\nax.text(0.5, 0.5, 'X', ha='center', va='center')\n\n# Draw a rectangle with a cross in the center\nrectangle = plt.Rectangle((0, 0), 1, 1, color='darkslateblue')\nax.add_patch(rectangle)\nax.text(0.5, 0.5, 'X', ha='center', va='center')\n\n# Draw a rectangle with a cross in the center\nrectangle = plt.Rectangle((0, 0), 1, 1, color='darkslategray')\nax.add_patch(rectangle)\nax.text(0.5, 0.5, 'X', ha='center', va='center')\n\n# Draw a rectangle with a cross in the center\nrectangle = plt.Rectangle((0, 0), 1, 1, color='darkturquoise')\nax.add_patch(rectangle)\nax.text(0.5, 0.5, 'X', ha='center', va='center')\n\n# Draw a rectangle with a cross in the center\nrectangle = plt.Rectangle((0, 0), 1, 1, color='darkviolet')\nax.add_patch(rectangle)\nax.text(0.5, 0.5, 'X', ha='center', va='center')\n\n# Draw a rectangle with a cross in the center\nrectangle = plt.Rectangle((0, 0), 1, 1, color='deeppink')\nax.add_patch(rectangle)\nax.text(0.5, 0.5, 'X', ha='center', va='center')\n\n# Draw a rectangle with a cross in the center\nrectangle = plt.Rectangle((0, 0), 1, 1, color='deepskyblue')\nax.add_patch(rectangle)\nax.text(0.5, 0.5, 'X', ha='center', va='center')\n\n# Draw a rectangle with a cross in the center\nrectangle = plt.Rectangle((0, 0), 1, 1, color='dimgray')\nax.add_patch(rectangle)\nax.text(0.5, 0.5, 'X', ha='center', va='center')\n\n# Draw a rectangle with a cross in the center\nrectangle = plt.Rectangle((0, 0), 1, 1, color='dimgrey')\nax.add_patch(rectangle)\nax.text(0.5, 0.5, 'X', ha='center', va='center')\n\n# Draw a rectangle with a cross in the center\nrectangle = plt.Rectangle((0, 0), 1, 1, color='dodgerblue')\nax.add_patch(rectangle)\nax.text(0.5, 0.5, 'X', ha='center', va='center')\n\n# Draw a rectangle with a cross in the center\nrectangle = plt.Rectangle((0, 0), 1, 1, color='firebrick')\nax.add_patch(rectangle)\nax.text(0.5, 0.5, 'X', ha='center', va='center')\n\n# Draw a rectangle with a cross in the center\nrectangle = plt.Rectangle((0, 0), 1, 1, color='floralwhite')\nax.add_patch(rectangle)\nax.text(0.5, 0.5, 'X', ha='center', va='center')\n\n# Draw a rectangle with a cross in the center\nrectangle = plt.Rectangle((0, 0), 1, 1, color='forestgreen')\nax.add_patch(rectangle)\nax.text(0.5, 0.5, 'X', ha='center', va='center')\n\n# Draw a rectangle with a cross in the center\nrectangle = plt.Rectangle((0, 0), 1, 1, color='fuchsia')\nax.add_patch(rectangle)\nax.text(0.5, 0.5, 'X', ha='center', va='center')\n\n# Draw a rectangle with a cross in the center\nrectangle = plt.Rectangle((0, 0), 1, 1, color='gainsboro')\nax.add_patch(rectangle)\nax.text(0.5, 0.5, 'X', ha='center', va='center')\n\n# Draw a rectangle with a cross in the center\nrectangle = plt.Rectangle((0, 0), 1, 1, color='ghostwhite')\nax.add_patch(rectangle)\nax.text(0.5, 0.5, 'X', ha='center', va='center')\n\n# Draw a rectangle with a cross in the center\nrectangle = plt.Rectangle((0, 0), 1, 1, color='gold')\nax.add_patch(rectangle)\nax.text(0.5, 0.5, 'X', ha='center', va='center')\n\n# Draw a rectangle with a cross in the center\nrectangle = plt.Rectangle((0, 0), 1, 1, color='goldenrod')\nax.add_patch(rectangle)\nax.text(0.5, 0.5, 'X', ha='center', va='center')\n\n# Draw a rectangle with a cross in the center\nrectangle = plt.Rectangle((0, 0), 1, 1, color='gray')\nax.add_patch(rectangle)\nax.text(0.5, 0.5, 'X', ha='center', va='center')\n\n# Draw a rectangle with a cross in the center\nrectangle = plt.Rectangle((0, 0), 1, 1, color='green')\nax.add_patch(rectangle)\nax.text(0.5, 0.5, 'X', ha='center', va='center')\n\n# Draw a rectangle with a cross in the center\nrectangle = plt.Rectangle((0, 0), 1, 1, color='greenyellow')\nax.add_patch(rectangle)\nax.text(0.5, 0.5, 'X', ha='center', va='center')\n\n# Draw a rectangle with a cross in the center\nrectangle = plt.Rectangle((0, 0), 1, 1, color='grey')\nax.add_patch(rectangle)\nax.text(0.5, 0.5, 'X', ha='center', va='center')\n\n# Draw a rectangle with a cross in the center\nrectangle = plt.Rectangle((0, 0), 1, 1, color='honeydew')\nax.add_patch(rectangle)\nax.text(0.5, 0.5, 'X', ha='center', va='center')\n\n# Draw a rectangle with a cross in the center\nrectangle = plt.Rectangle((0, 0), 1, 1, color='hotpink')\nax.add_patch(rectangle)\nax.text(0.5, 0.5, 'X', ha='center', va='center')\n\n# Draw a rectangle with a cross in the center\nrectangle = plt.Rectangle((0, 0), 1, 1, color='indianred')\nax.add_patch(rectangle)\nax.text(0.5, 0.5, 'X', ha='center', va='center')\n\n# Draw a rectangle with a cross in the center\nrectangle = plt.Rectangle((0, 0), 1, 1, color='indigo')\nax.add_patch(rectangle)\nax.text(0.5, 0.5, 'X', ha='center', va='center')\n\n# Draw a rectangle with a cross in the center\nrectangle = plt.Rectangle((0, 0), 1, 1, color='ivory')\nax.add_patch(rectangle)\nax.text(0.5, 0.5, 'X', ha='center', va='center')\n\n# Draw a rectangle with a cross in the center\nrectangle = plt.Rectangle((0, 0), 1, 1, color='khaki')\nax.add_patch(rectangle)\nax.text(0.5, 0.5, 'X', ha='center', va='center')\n\n# Draw a rectangle with a cross in the"}
{"file": "dataset/ori_500/box_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the background color of the plot\nax.set_facecolor('lightgrey')\n\n# Set the title of the plot\nax.set_title('SE (bps/HZ) vs CEE (dB)')\n\n# Set the x-axis label\nax.set_xlabel('CEE (dB)')\n\n# Set the y-axis label\nax.set_ylabel('SE (bps/HZ)')\n\n# Set the grid lines\nax.grid(True)\n\n# Define the data for the plot\nx = [-10, 0]\ny = [9, 10]\n\n# Plot the data\nax.plot(x, y, 'ro-')\n\n# Define the data for the rectangles\nrectangles = [\n    [2, 4, 3, 5],\n    [5, 7, 4, 6],\n    [8, 10, 5, 7]\n]\n\n# Draw the rectangles\nfor rect in rectangles:\n    ax.add_patch(plt.Rectangle((rect[0], rect[1]), rect[2], rect[3], fill=True, color='blue'))\n\n# Define the data for the bars\nbars = [\n    [2, 4, 3, 5],\n    [5, 7, 4, 6],\n    [8, 10, 5, 7]\n]\n\n# Draw the bars\nfor bar in bars:\n    ax.bar(bar[0], bar[1], width=bar[2], height=bar[3], color='green')\n\n# Define the data for the scatter plot\nscatter = [\n    [2, 4, 3, 5],\n    [5, 7, 4, 6],\n    [8, 10, 5, 7]\n]\n\n# Draw the scatter plot\nfor point in scatter:\n    ax.scatter(point[0], point[1], color='red')\n\n# Define the data for the line plot\nline = [\n    [2, 4, 3, 5],\n    [5, 7, 4, 6],\n    [8, 10, 5, 7]\n]\n\n# Draw the line plot\nfor point in line:\n    ax.plot(point[0], point[1], 'bo-')\n\n# Define the data for the histogram\nhistogram = [\n    [2, 4, 3, 5],\n    [5, 7, 4, 6],\n    [8, 10, 5, 7]\n]\n\n# Draw the histogram\nfor bin in histogram:\n    ax.hist(bin, bins=10, color='purple')\n\n# Define the data for the pie chart\npie = [\n    [2, 4, 3, 5],\n    [5, 7, 4, 6],\n    [8, 10, 5, 7]\n]\n\n# Draw the pie chart\nax.pie(pie, labels=['GMM', 'GML', 'AO'], colors=['red', 'blue', 'green'])\n\n# Define the data for the heatmap\nheatmap = [\n    [2, 4, 3, 5],\n    [5, 7, 4, 6],\n    [8, 10, 5, 7]\n]\n\n# Draw the heatmap\nax.imshow(heatmap, cmap='hot', interpolation='nearest')\n\n# Define the data for the contour plot\ncontour = [\n    [2, 4, 3, 5],\n    [5, 7, 4, 6],\n    [8, 10, 5, 7]\n]\n\n# Draw the contour plot\nax.contour(contour, colors='black')\n\n# Define the data for the bar chart\nbar_chart = [\n    [2, 4, 3, 5],\n    [5, 7, 4, 6],\n    [8, 10, 5, 7]\n]\n\n# Draw the bar chart\nax.barh(bar_chart, width=bar_chart[0], height=bar_chart[1], color='orange')\n\n# Define the data for the violin plot\nviolin = [\n    [2, 4, 3, 5],\n    [5, 7, 4, 6],\n    [8, 10, 5, 7]\n]\n\n# Draw the violin plot\nax.violinplot(violin, showmeans=True)\n\n# Define the data for the box plot\nbox = [\n    [2, 4, 3, 5],\n    [5, 7, 4, 6],\n    [8, 10, 5, 7]\n]\n\n# Draw the box plot\nax.boxplot(box)\n\n# Define the data for the error bar plot\nerror_bar = [\n    [2, 4, 3, 5],\n    [5, 7, 4, 6],\n    [8, 10, 5, 7]\n]\n\n# Draw the error bar plot\nax.errorbar(error_bar, yerr=0.5, fmt='o')\n\n# Define the data for the stem plot\nstem = [\n    [2, 4, 3, 5],\n    [5, 7, 4, 6],\n    [8, 10, 5, 7]\n]\n\n# Draw the stem plot\nax.stem(stem, use_line_collection=True)\n\n# Define the data for the polar plot\npolar = [\n    [2, 4, 3, 5],\n    [5, 7, 4, 6],\n    [8, 10, 5, 7]\n]\n\n# Draw the polar plot\nax.polar(polar, color='cyan')\n\n# Define the data for the ternary plot\nternary = [\n    [2, 4, 3, 5],\n    [5, 7, 4, 6],\n    [8, 10, 5, 7]\n]\n\n# Draw the ternary plot\nax.triplot(ternary, color='magenta')\n\n# Define the data for the hexbin plot\nhexbin = [\n    [2, 4, 3, 5],\n    [5, 7, 4, 6],\n    [8, 10, 5, 7]\n]\n\n# Draw the hexbin plot\nax.hexbin(hexbin, gridsize=10, cmap='coolwarm')\n\n# Define the data for the quiver plot\nquiver = [\n    [2, 4, 3, 5],\n    [5, 7, 4, 6],\n    [8, 10, 5, 7]\n]\n\n# Draw the quiver plot\nax.quiver(quiver, units='xy')\n\n# Define the data for the streamplot\nstream = [\n    [2, 4, 3, 5],\n    [5, 7, 4, 6],\n    [8, 10, 5, 7]\n]\n\n# Draw the streamplot\nax.streamplot(stream, color='yellow')\n\n# Define the data for the barh plot\nbarh = [\n    [2, 4, 3, 5],\n    [5, 7, 4, 6],\n    [8, 10, 5, 7]\n]\n\n# Draw the barh plot\nax.bar(barh, width=barh[0], height=barh[1], color='pink')\n\n# Define the data for the pie plot\npie = [\n    [2, 4, 3, 5],\n    [5, 7, 4, 6],\n    [8, 10, 5, 7]\n]\n\n# Draw the pie plot\nax.pie(pie, labels=['GMM', 'GML', 'AO'], colors=['red', 'blue', 'green'])\n\n# Define the data for the heatmap\nheatmap = [\n    [2, 4, 3, 5],\n    [5, 7, 4, 6],\n    [8, 10, 5, 7]\n]\n\n# Draw the heatmap\nax.imshow(heatmap, cmap='hot', interpolation='nearest')\n\n# Define the data for the contour plot\ncontour = [\n    [2, 4, 3, 5],\n    [5, 7, 4, 6],\n    [8, 10, 5, 7]\n]\n\n# Draw the contour plot\nax.contour(contour, colors='black')\n\n# Define the data for the bar chart\nbar_chart = [\n    [2, 4, 3, 5],\n    [5, 7, 4, 6],\n    [8, 10, 5, 7]\n]\n\n# Draw the bar chart\nax.barh(bar_chart, width=bar_chart[0], height=bar_chart[1], color='orange')\n\n# Define the data for the violin plot\nviolin = [\n    [2, 4, 3, 5],\n    [5, 7, 4, 6],\n    [8, 10, 5, 7]\n]\n\n# Draw the violin plot\nax.violinplot(violin, showmeans=True)\n\n# Define the data for the box plot\nbox = [\n    [2, 4, 3, 5],\n    [5, 7, 4, 6],\n    [8, 10, 5, 7]\n]\n\n# Draw the box plot\nax.boxplot(box)\n\n# Define the data for the error bar plot\nerror_bar = [\n    [2, 4, 3, 5],\n    [5, 7, 4, 6],\n    [8, 10, 5, 7]\n]\n\n# Draw the error bar plot\nax.errorbar(error_bar, yerr=0.5, fmt='o')\n\n# Define the data for the stem plot\nstem = [\n    [2, 4, 3, 5],\n    [5, 7, 4, 6],\n    [8, 10, 5, 7]\n]\n\n# Draw the stem plot\nax.stem(stem, use_line_collection=True)\n\n# Define the data for the polar plot\npolar = [\n    [2, 4, 3, 5],\n    [5, 7, 4, 6],\n    [8, 10, 5, 7]\n]\n\n# Draw the polar plot\nax.polar(polar, color='cyan')\n\n# Define the data for the ternary plot\nternary = [\n    [2, 4, 3, 5],\n    [5, 7, 4, 6],\n    [8, 10, 5, 7]\n]\n\n# Draw the ternary plot\nax.triplot(ternary, color='magenta')\n\n# Define the data for the hexbin plot\nhexbin = [\n    [2, 4, 3, 5],\n    [5, 7, 4, 6],\n    [8, 10, 5, 7]\n]\n\n# Draw the hexbin plot\nax.hexbin(hexbin, gridsize=10, cmap='coolwarm')\n\n# Define the data for the quiver plot\nquiver = [\n    [2, 4, 3, 5],\n    [5, 7, 4, 6],\n    [8, 10, 5, 7]\n]\n\n# Draw the quiver plot\nax.quiver(quiver, units='xy')\n\n# Define the data for the streamplot\nstream = [\n    [2, 4, 3, 5],\n    [5, 7, 4, 6],\n    [8, 10, 5, 7]\n]\n\n# Draw the streamplot\nax.streamplot(stream, color='yellow')\n\n# Define the data for the barh plot\nbarh = [\n    [2, 4, 3, 5],\n    [5, 7, 4, 6],\n    [8, 10, 5, 7]\n]\n\n# Draw the barh plot\nax.bar(barh, width=barh[0], height=barh[1], color='pink')\n\n# Define the data for the pie plot\npie = [\n    [2, 4, 3, 5],\n    [5, 7, 4, 6],\n    [8, 10, 5, 7]\n]\n\n# Draw the pie plot\nax.pie(pie, labels=['GMM', 'GML', 'AO'], colors=['red', 'blue', 'green'])\n\n# Define the data for the heatmap\nheatmap = [\n    [2, 4, 3, 5],\n    [5, 7, 4, 6],\n    [8, 10, 5, 7]\n]\n\n# Draw the heatmap\nax.imshow(heatmap, cmap='hot', interpolation='nearest')\n\n# Define the data for the contour plot\ncontour = [\n    [2, 4, 3, 5],\n    [5, 7, 4, 6],\n    [8, 10, 5, 7]\n]\n\n# Draw the contour plot\nax.contour(contour, colors='black')\n\n# Define the data for the bar chart\nbar_chart = [\n    [2, 4, 3, 5],\n    [5, 7, 4, 6],\n    [8, 10, 5, 7]\n]\n\n# Draw the bar chart\nax.barh(bar_chart, width=bar_chart[0], height=bar_chart[1], color='orange')\n\n# Define the data for the violin plot\nviolin = [\n    [2, 4, 3, 5],\n    [5, 7, 4, 6],\n    [8, 10, 5, 7]\n]\n\n# Draw the violin plot\nax.violinplot(violin, showmeans=True)\n\n# Define the data for the box plot\nbox = [\n    [2, 4, 3, 5],\n    [5, 7, 4, 6],\n    [8, 10, 5, 7]\n]\n\n# Draw the box plot\nax.boxplot(box)\n\n# Define the data for the error bar plot\nerror_bar = [\n    [2, 4, 3, 5],\n    [5, 7, 4, 6],\n    [8, 10, 5, 7]\n]\n\n# Draw the error bar plot\nax.errorbar(error_bar, yerr=0.5, fmt='o')\n\n# Define the data for the stem plot\nstem = [\n    [2, 4, 3, 5],\n    [5, 7, 4, 6],\n    [8, 10, 5, 7]\n]\n\n# Draw the stem plot\nax.stem(stem, use_line_collection=True)\n\n# Define the data for the polar plot\npolar = [\n    [2, 4, 3, 5],\n    [5, 7, 4, 6],\n    [8, 10, 5, 7]\n]\n\n# Draw the polar plot\nax.polar(polar, color='cyan')\n\n# Define the data for the ternary plot\nternary = [\n    [2, 4, 3, 5],\n    [5, 7, 4, 6],\n    [8, 10, 5, 7]\n]\n\n# Draw the ternary plot\nax.triplot(ternary, color='magenta')\n\n# Define the data for the hexbin plot\nhexbin = [\n    [2, 4, 3, 5],\n    [5, 7, 4, 6],\n    [8, 10, 5, 7]\n]\n\n# Draw the hexbin plot\nax.hexbin(hexbin, gridsize=10, cmap='coolwarm')\n\n# Define the data for the quiver plot\nquiver = [\n    [2, 4, 3, 5],\n    [5, 7, 4, 6],\n    [8, 10, 5, 7]\n]\n\n# Draw the quiver plot\nax.quiver(quiver, units='xy')\n\n# Define the data for the streamplot\nstream = [\n    [2, 4, 3, 5],\n    [5, 7, 4, 6],\n    [8, 10, 5, 7]\n]\n\n# Draw the streamplot\nax.streamplot(stream, color='yellow')\n\n# Define the data for the barh plot\nbarh = [\n    [2, 4, 3, 5],\n    [5, 7, 4, 6],\n    [8, 10, 5, 7]\n]\n\n# Draw the barh plot\nax.bar(barh, width=barh[0], height=barh[1], color='pink')\n\n# Define the data for the pie plot\npie = [\n    [2, 4, 3, 5],\n    [5, 7, 4, 6],\n    [8, 10, 5, 7]\n]\n\n# Draw the pie plot\nax.pie(pie, labels=['GMM', 'GML', 'AO'], colors=['red', 'blue', 'green'])\n\n# Define the data for the heatmap\nheatmap = [\n    [2, 4, 3, 5],\n    [5, 7, 4, 6],\n    [8, 10, 5, 7]\n]\n\n# Draw the heatmap\nax.imshow(heatmap, cmap='hot', interpolation='nearest')\n\n# Define the data for the contour plot\ncontour = [\n    [2, 4, 3, 5],\n    [5, 7, 4, 6],\n    [8, 10, 5, 7]\n]\n\n# Draw the contour plot\nax.contour(contour, colors='black')\n\n# Define the data for the bar chart\nbar_chart = [\n    [2, 4, 3, 5],\n    [5, 7, 4, 6],\n    [8, 10, 5, 7]\n]\n\n# Draw the bar chart\nax.barh(bar_chart, width=bar_chart[0], height=bar_chart[1], color='orange')\n\n# Define the data for the violin plot\nviolin = [\n    [2, 4, 3, 5],\n    [5, 7, 4, 6],\n    [8, 10, 5, 7]\n]\n\n# Draw the violin plot\nax.violinplot(violin, showmeans=True"}
{"file": "dataset/ori_500/box_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(25, 8))\n\n# Set the title of the plot\nax.set_title('Linear travel times')\n\n# Create a bar chart\nax.bar(['D-avg', 'PTO-KNN', 'PTO-OLS', 'P-F', 'SAA'], [10, 20, 30, 40, 50], color='blue')\n\n# Set the x-axis label\nax.set_xlabel('Time')\n\n# Set the y-axis label\nax.set_ylabel('Speed')\n\n# Create a scatter plot\nax.scatter(['D-avg', 'PTO-KNN', 'PTO-OLS', 'P-F', 'SAA'], [10, 20, 30, 40, 50], color='red')\n\n# Create a line plot\nax.plot(['D-avg', 'PTO-KNN', 'PTO-OLS', 'P-F', 'SAA'], [10, 20, 30, 40, 50], color='green')\n\n# Create a pie chart\nax.pie([10, 20, 30, 40, 50], labels=['D-avg', 'PTO-KNN', 'PTO-OLS', 'P-F', 'SAA'], colors=['blue', 'red', 'green', 'purple', 'orange'])\n\n# Create a histogram\nax.hist([10, 20, 30, 40, 50], bins=5, color='blue')\n\n# Create a box plot\nax.boxplot([10, 20, 30, 40, 50])\n\n# Create a violin plot\nax.violinplot([10, 20, 30, 40, 50])\n\n# Create a heatmap\nax.imshow([[10, 20, 30, 40, 50], [10, 20, 30, 40, 50]], cmap='hot', interpolation='nearest')\n\n# Create a contour plot\nx = np.linspace(-10, 10, 100)\ny = np.linspace(-10, 10, 100)\nX, Y = np.meshgrid(x, y)\nZ = np.sin(np.sqrt(X**2 + Y**2))\nax.contourf(X, Y, Z)\n\n# Create a stream plot\nax.streamplot(X, Y, Z, Z)\n\n# Create a quiver plot\nax.quiver(X, Y, Z, Z)\n\n# Create a polar plot\nax.polar()\n\n# Create a 3D plot\nfrom mpl_toolkits.mplot3d import Axes3D\nax = fig.add_subplot(111, projection='3d')\nax.plot_surface(X, Y, Z)\n\n# Create a 3D scatter plot\nax.scatter(X, Y, Z)\n\n# Create a 3D bar chart\nax.bar3d([0, 1, 2, 3, 4], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [10, 20, 30, 40, 50], [10, 20, 30, 40, 50], [10, 20, 30, 40, 50])\n\n# Create a 3D pie chart\nax.pie([10, 20, 30, 40, 50], labels=['D-avg', 'PTO-KNN', 'PTO-OLS', 'P-F', 'SAA'], colors=['blue', 'red', 'green', 'purple', 'orange'])\n\n# Create a 3D histogram\nax.hist3d([10, 20, 30, 40, 50], [10, 20, 30, 40, 50], [10, 20, 30, 40, 50], bins=5, color='blue')\n\n# Create a 3D box plot\nax.boxplot([10, 20, 30, 40, 50])\n\n# Create a 3D violin plot\nax.violinplot([10, 20, 30, 40, 50])\n\n# Create a 3D heatmap\nax.imshow([[10, 20, 30, 40, 50], [10, 20, 30, 40, 50]], cmap='hot', interpolation='nearest')\n\n# Create a 3D contour plot\nax.contourf(X, Y, Z)\n\n# Create a 3D stream plot\nax.streamplot(X, Y, Z, Z)\n\n# Create a 3D quiver plot\nax.quiver(X, Y, Z, Z)\n\n# Create a 3D polar plot\nax.polar()\n\n# Create a 3D 3D plot\nax.plot_surface(X, Y, Z)\n\n# Create a 3D 3D scatter plot\nax.scatter(X, Y, Z)\n\n# Create a 3D 3D bar chart\nax.bar3d([0, 1, 2, 3, 4], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [10, 20, 30, 40, 50], [10, 20, 30, 40, 50], [10, 20, 30, 40, 50])\n\n# Create a 3D 3D pie chart\nax.pie([10, 20, 30, 40, 50], labels=['D-avg', 'PTO-KNN', 'PTO-OLS', 'P-F', 'SAA'], colors=['blue', 'red', 'green', 'purple', 'orange'])\n\n# Create a 3D 3D histogram\nax.hist3d([10, 20, 30, 40, 50], [10, 20, 30, 40, 50], [10, 20, 30, 40, 50], bins=5, color='blue')\n\n# Create a 3D 3D box plot\nax.boxplot([10, 20, 30, 40, 50])\n\n# Create a 3D 3D violin plot\nax.violinplot([10, 20, 30, 40, 50])\n\n# Create a 3D 3D heatmap\nax.imshow([[10, 20, 30, 40, 50], [10, 20, 30, 40, 50]], cmap='hot', interpolation='nearest')\n\n# Create a 3D 3D contour plot\nax.contourf(X, Y, Z)\n\n# Create a 3D 3D stream plot\nax.streamplot(X, Y, Z, Z)\n\n# Create a 3D 3D quiver plot\nax.quiver(X, Y, Z, Z)\n\n# Create a 3D 3D polar plot\nax.polar()\n\n# Create a 3D 3D 3D plot\nax.plot_surface(X, Y, Z)\n\n# Create a 3D 3D 3D scatter plot\nax.scatter(X, Y, Z)\n\n# Create a 3D 3D 3D bar chart\nax.bar3d([0, 1, 2, 3, 4], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [10, 20, 30, 40, 50], [10, 20, 30, 40, 50], [10, 20, 30, 40, 50])\n\n# Create a 3D 3D 3D pie chart\nax.pie([10, 20, 30, 40, 50], labels=['D-avg', 'PTO-KNN', 'PTO-OLS', 'P-F', 'SAA'], colors=['blue', 'red', 'green', 'purple', 'orange'])\n\n# Create a 3D 3D 3D histogram\nax.hist3d([10, 20, 30, 40, 50], [10, 20, 30, 40, 50], [10, 20, 30, 40, 50], bins=5, color='blue')\n\n# Create a 3D 3D 3D box plot\nax.boxplot([10, 20, 30, 40, 50])\n\n# Create a 3D 3D 3D violin plot\nax.violinplot([10, 20, 30, 40, 50])\n\n# Create a 3D 3D 3D heatmap\nax.imshow([[10, 20, 30, 40, 50], [10, 20, 30, 40, 50]], cmap='hot', interpolation='nearest')\n\n# Create a 3D 3D 3D contour plot\nax.contourf(X, Y, Z)\n\n# Create a 3D 3D 3D stream plot\nax.streamplot(X, Y, Z, Z)\n\n# Create a 3D 3D 3D quiver plot\nax.quiver(X, Y, Z, Z)\n\n# Create a 3D 3D 3D polar plot\nax.polar()\n\n# Create a 3D 3D 3D 3D plot\nax.plot_surface(X, Y, Z)\n\n# Create a 3D 3D 3D 3D scatter plot\nax.scatter(X, Y, Z)\n\n# Create a 3D 3D 3D 3D bar chart\nax.bar3d([0, 1, 2, 3, 4], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [10, 20, 30, 40, 50], [10, 20, 30, 40, 50], [10, 20, 30, 40, 50])\n\n# Create a 3D 3D 3D 3D pie chart\nax.pie([10, 20, 30, 40, 50], labels=['D-avg', 'PTO-KNN', 'PTO-OLS', 'P-F', 'SAA'], colors=['blue', 'red', 'green', 'purple', 'orange'])\n\n# Create a 3D 3D 3D 3D histogram\nax.hist3d([10, 20, 30, 40, 50], [10, 20, 30, 40, 50], [10, 20, 30, 40, 50], bins=5, color='blue')\n\n# Create a 3D 3D 3D 3D box plot\nax.boxplot([10, 20, 30, 40, 50])\n\n# Create a 3D 3D 3D 3D violin plot\nax.violinplot([10, 20, 30, 40, 50])\n\n# Create a 3D 3D 3D 3D heatmap\nax.imshow([[10, 20, 30, 40, 50], [10, 20, 30, 40, 50]], cmap='hot', interpolation='nearest')\n\n# Create a 3D 3D 3D 3D contour plot\nax.contourf(X, Y, Z)\n\n# Create a 3D 3D 3D 3D stream plot\nax.streamplot(X, Y, Z, Z)\n\n# Create a 3D 3D 3D 3D quiver plot\nax.quiver(X, Y, Z, Z)\n\n# Create a 3D 3D 3D 3D polar plot\nax.polar()\n\n# Create a 3D 3D 3D 3D 3D plot\nax.plot_surface(X, Y, Z)\n\n# Create a 3D 3D 3D 3D 3D scatter plot\nax.scatter(X, Y, Z)\n\n# Create a 3D 3D 3D 3D 3D bar chart\nax.bar3d([0, 1, 2, 3, 4], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [10, 20, 30, 40, 50], [10, 20, 30, 40, 50], [10, 20, 30, 40, 50])\n\n# Create a 3D 3D 3D 3D 3D pie chart\nax.pie([10, 20, 30, 40, 50], labels=['D-avg', 'PTO-KNN', 'PTO-OLS', 'P-F', 'SAA'], colors=['blue', 'red', 'green', 'purple', 'orange'])\n\n# Create a 3D 3D 3D 3D 3D histogram\nax.hist3d([10, 20, 30, 40, 50], [10, 20, 30, 40, 50], [10, 20, 30, 40, 50], bins=5, color='blue')\n\n# Create a 3D 3D 3D 3D 3D box plot\nax.boxplot([10, 20, 30, 40, 50])\n\n# Create a 3D 3D 3D 3D 3D violin plot\nax.violinplot([10, 20, 30, 40, 50])\n\n# Create a 3D 3D 3D 3D 3D heatmap\nax.imshow([[10, 20, 30, 40, 50], [10, 20, 30, 40, 50]], cmap='hot', interpolation='nearest')\n\n# Create a 3D 3D 3D 3D 3D contour plot\nax.contourf(X, Y, Z)\n\n# Create a 3D 3D 3D 3D 3D stream plot\nax.streamplot(X, Y, Z, Z)\n\n# Create a 3D 3D 3D 3D 3D quiver plot\nax.quiver(X, Y, Z, Z)\n\n# Create a 3D 3D 3D 3D 3D polar plot\nax.polar()\n\n# Create a 3D 3D 3D 3D 3D 3D plot\nax.plot_surface(X, Y, Z)\n\n# Create a 3D 3D 3D 3D 3D 3D scatter plot\nax.scatter(X, Y, Z)\n\n# Create a 3D 3D 3D 3D 3D 3D bar chart\nax.bar3d([0, 1, 2, 3, 4], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [10, 20, 30, 40, 50], [10, 20, 30, 40, 50], [10, 20, 30, 40, 50])\n\n# Create a 3D 3D 3D 3D 3D 3D pie chart\nax.pie([10, 20, 30, 40, 50], labels=['D-avg', 'PTO-KNN', 'PTO-OLS', 'P-F', 'SAA'], colors=['blue', 'red', 'green', 'purple', 'orange'])\n\n# Create a 3D 3D 3D 3D 3D 3D histogram\nax.hist3d([10, 20, 30, 40, 50], [10, 20, 30, 40, 50], [10, 20, 30, 40, 50], bins=5, color='blue')\n\n# Create a 3D 3D 3D 3D 3D 3D box plot\nax.boxplot([10, 20, 30, 40, 50])\n\n# Create a 3D 3D 3D 3D 3D 3D violin plot\nax.violinplot([10, 20, 30, 40, 50])\n\n# Create a 3D 3D 3D 3D 3D 3D heatmap\nax.imshow([[10, 20, 30, 40, 50], [10, 20, 30, 40, 50]], cmap='hot', interpolation='nearest')\n\n# Create a 3D 3D 3D 3D 3D 3D contour plot\nax.contourf(X, Y, Z)\n\n# Create a 3D 3D 3D 3D 3D 3"}
{"file": "dataset/ori_500/box_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(5.0, 5.0))\n\n# Define the data\ndata = {\n    'Only WSI Modality': [89, 87, 85, 83, 81],\n    'Only CNV Modality': [91, 89, 87, 85, 83],\n    'WSI+CNV Modality': [93, 91, 89, 87, 85]\n}\n\n# Define the colors for each hospital\ncolors = ['blue', 'green', 'pink']\n\n# Plot the data\nfor i, (modality, values) in enumerate(data.items()):\n    ax.barh(range(len(values)), values, color=colors[i % len(colors)], label=modality)\n\n# Set the title and labels\nax.set_title('Modality Performance')\nax.set_xlabel('Performance')\nax.set_ylabel('Modality')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Set the title of the plot\nax.set_title('0.25 HIAR')\n\n# Draw a rectangle with a specific color\nrectangle = plt.Rectangle((0.2, 0.2), 0.6, 0.6, fc='orange')\nax.add_patch(rectangle)\n\n# Draw a circle with a specific color\ncircle = plt.Circle((0.4, 0.4), 0.1, fc='blue')\nax.add_patch(circle)\n\n# Set the x and y limits\nax.set_xlim(0, 1)\nax.set_ylim(0, 1)\n\n# Set the x and y labels\nax.set_xlabel('PSNR (dB)')\nax.set_ylabel('SNR (dB)')\n\n# Set the grid\nax.grid(True)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/contour_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Define the colors for the plots\ncolors = ['blue', 'red']\n\n# Create a grid of subplots\nfor i in range(2):\n    for j in range(2):\n        ax[i, j].set_title('T-SNE plot for the output variable Y3')\n        ax[i, j].set_xlabel('X-axis')\n        ax[i, j].set_ylabel('Y-axis')\n        ax[i, j].set_xlim(-80, 80)\n        ax[i, j].set_ylim(-80, 80)\n        ax[i, j].set_facecolor(colors[i])\n\n# Add a color bar\ncbar = fig.colorbar(ax[0, 0].imshow(np.random.rand(10, 10), cmap='coolwarm'), ax=ax[:, 0])\ncbar.set_label('Color Bar')\n\n# Add a legend\nlegend_elements = [plt.Line2D([0], [0], marker='o', color='w', label='Ground Truth', markerfacecolor=colors[0], markersize=10),\n                  plt.Line2D([0], [0], marker='o', color='w', label='Generated', markerfacecolor=colors[1], markersize=10)]\nax[0, 0].legend(handles=legend_elements, loc='upper right')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/contour_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the background color of the plot\nax.set_facecolor('darkgreen')\n\n# Define the grid for x and y values\nx = np.linspace(0, 1, 100)\ny = np.linspace(0, 1, 100)\nX, Y = np.meshgrid(x, y)\n\n# Define the function to calculate the value at each point\ndef f(X, Y):\n    return np.sin(np.pi * X) * np.cos(np.pi * Y)\n\n# Calculate the Z values\nZ = f(X, Y)\n\n# Plot the contourf\nc = ax.contourf(X, Y, Z, cmap='viridis')\n\n# Add a colorbar\nfig.colorbar(c, ax=ax)\n\n# Set the title\nax.set_title(r'$\\lambda(x, z)$')\n\n# Set the x and y labels\nax.set_xlabel('$x_1$')\nax.set_ylabel('$x_2$')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/contour_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Set the background color of the plot\nax.set_facecolor('lightgray')\n\n# Set the x-axis and y-axis limits\nax.set_xlim(50, 160)\nax.set_ylim(50, 100)\n\n# Set the x-axis and y-axis ticks\nax.set_xticks(range(50, 170, 10))\nax.set_yticks(range(50, 110, 10))\n\n# Draw a rectangle for the legend\nlegend_rect = plt.Rectangle((140, 90), 20, 10, color='white', fill=False)\nax.add_patch(legend_rect)\n\n# Add text to the legend\nax.text(145, 95, 'Female', color='blue')\nax.text(145, 85, 'Male', color='red')\n\n# Draw a circle with a blue border\ncircle_blue = plt.Circle((80, 80), 30, color='blue', fill=False)\nax.add_artist(circle_blue)\n\n# Draw a circle with a red border\ncircle_red = plt.Circle((120, 80), 30, color='red', fill=False)\nax.add_artist(circle_red)\n\n# Set the title of the plot\nax.set_title('DBP (mmHg) vs. SBP (mmHg)')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/contour_4.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Define the data\nx = np.linspace(-4, 4, 100)\ny = np.sin(x)\n\n# Plot the data\nax.plot(x, y, 'b-')\n\n# Set the title and labels\nax.set_title('Sine Wave')\nax.set_xlabel('X-axis')\nax.set_ylabel('Y-axis')\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/contour_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Define the colors for each circle\ncolors = ['red', 'orange', 'yellow', 'green', 'blue', 'indigo', 'violet']\n\n# Draw concentric circles with different radii and colors\nfor i, color in enumerate(colors):\n    circle = plt.Circle((5, 5), 10 - 2 * i, color=color)\n    ax.add_artist(circle)\n\n# Set the limits of the plot\nax.set_xlim(0, 10)\nax.set_ylim(0, 10)\n\n# Set the aspect ratio to be equal\nax.set_aspect('equal')\n\n# Remove the axes\nax.axis('off')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/density_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 3.0))\n\n# Define the data\nx = np.linspace(8, 15, 100)\ny = np.sin(x)\n\n# Plot the data\nax.plot(x, y, color='blue')\n\n# Set the title and labels\nax.set_title('Sine Wave')\nax.set_xlabel('Time')\nax.set_ylabel('Amplitude')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/density_2.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 4.0))\n\n# Plot a triangle\nax.plot([0, 1, 1, 0], [0, 0, 1, 0], 'r-')\n\n# Set the aspect ratio to be equal\nax.set_aspect('equal')\n\n# Set the limits of the x and y axes\nax.set_xlim(-0.5, 1.5)\nax.set_ylim(-0.5, 1.5)\n\n# Set the background color of the plot\nax.set_facecolor('pink')\n\n# Set the title of the plot\nax.set_title('Triangle')\n\n# Display the plot\nplt.show()"}
{"file": "dataset/ori_500/density_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 4.0))\n\n# Set the title of the plot\nax.set_title('KDE Plot of Spearman Coefficient Distribution')\n\n# Define the x-axis values\nx = np.linspace(-1.0, 1.0, 100)\n\n# Define the y-axis values\ny = np.sin(x * np.pi / 2) + 0.5\n\n# Plot the KDE\nax.plot(x, y, color='blue')\n\n# Set the x-axis label\nax.set_xlabel('Spearman Coefficient')\n\n# Set the y-axis label\nax.set_ylabel('Density')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/density_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(9.0, 6.0))\n\n# Set the background color of the plot\nax.set_facecolor('lightgrey')\n\n# Set the grid lines\nax.grid(True)\n\n# Set the x-axis limits\nax.set_xlim(7, 15)\n\n# Set the y-axis limits\nax.set_ylim(0, 0.7)\n\n# Set the x-axis ticks\nax.set_xticks(np.arange(7, 16, 1))\n\n# Set the y-axis ticks\nax.set_yticks(np.arange(0, 0.8, 0.1))\n\n# Set the x-axis label\nax.set_xlabel('p')\n\n# Set the y-axis label\nax.set_ylabel('Shape Density')\n\n# Set the title\nax.set_title('Shape Density vs p')\n\n# Set the colorbar\ncbar = fig.colorbar(ax.imshow([[0.1, 0.2], [0.3, 0.4]], cmap='viridis'))\n\n# Set the colorbar label\ncbar.set_label('Colorbar Label')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/density_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(9.0, 6.0))\n\n# Set the background color of the plot\nax.set_facecolor('lightgrey')\n\n# Set the grid lines\nax.grid(True)\n\n# Set the x-axis and y-axis limits\nax.set_xlim(0, 1)\nax.set_ylim(0, 14)\n\n# Set the x-axis and y-axis labels\nax.set_xlabel('Density')\nax.set_ylabel('Value')\n\n# Set the title of the plot\nax.set_title('Gucci vs Chanel')\n\n# Set the color bar\ncbar = fig.colorbar(ax.imshow([[0.5, 0.5], [0.5, 0.5]], cmap='Blues'))\n\n# Set the color bar label\ncbar.set_label('Color')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the bar chart\nbrands = ['Deep Ens.', 'Dropout', 'Laplace', 'SNP', 'HET-XL', 'Baseline', 'Gap', 'Shallow Ens.', 'DUQ', 'Corr. Pred.']\nlog_probabilities = [-0.500, -0.394, -0.443, -0.531, -0.539, -0.541, -0.543, -0.552, -0.590, -0.819]\ndistributions = ['Distributional', 'Deterministic']\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Plot the bar chart\nax.bar(brands, log_probabilities, color='green')\n\n# Set the title and labels\nax.set_title('Log Probability of Brands')\nax.set_xlabel('Brands')\nax.set_ylabel('Log Probability')\n\n# Add a horizontal line at y=0\nax.axhline(y=0, color='black', linestyle='-')\n\n# Add a legend\nax.legend(distributions)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nx = [1, 2, 4, 8]\ny = [5, 6, 7, 6]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data\nax.plot(x, y, 'bo-')\n\n# Set the title and labels\nax.set_title('Expert dimension')\nax.set_xlabel('Number of experts')\nax.set_ylabel('IQM Human Normalized Score')\n\n# Add colored rectangles\nrectangles = [\n    plt.Rectangle((1, 5), 1, 1, color='green'),\n    plt.Rectangle((2, 6), 1, 1, color='purple'),\n    plt.Rectangle((4, 7), 1, 1, color='green'),\n    plt.Rectangle((8, 6), 1, 1, color='purple')\n]\nfor rect in rectangles:\n    ax.add_patch(rect)\n\n# Add colored lines\nlines = [\n    plt.Line2D([1, 2], [5, 6], color='blue'),\n    plt.Line2D([2, 4], [6, 7], color='blue'),\n    plt.Line2D([4, 8], [7, 6], color='blue')\n]\nfor line in lines:\n    ax.add_line(line)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nhospitals = ['Hospital 1', 'Hospital 2', 'Hospital 3']\naccuracies = [0.748, 0.762, 0.709]\ncolors = ['blue', 'red', 'green']\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\nbars = ax.bar(hospitals, accuracies, color=colors)\n\n# Add labels and title\nax.set_xlabel('Hospitals')\nax.set_ylabel('Accuracy')\nax.set_title('Accuracy by hospital and method')\n\n# Add colored rectangles for each bar\nfor bar, color in zip(bars, colors):\n    width = bar.get_width()\n    height = bar.get_height()\n    x = bar.get_x()\n    y = bar.get_y()\n    ax.add_patch(plt.Rectangle((x, y), width, height, facecolor=color, edgecolor='black'))\n\n# Add colored lines for each bar\nfor bar, color in zip(bars, colors):\n    width = bar.get_width()\n    height = bar.get_height()\n    x = bar.get_x()\n    y = bar.get_y()\n    ax.plot([x, x + width], [y, y], color='black')\n    ax.plot([x, x], [y, y + height], color='black')\n\n# Add colored dots for each bar\nfor bar, color in zip(bars, colors):\n    width = bar.get_width()\n    height = bar.get_height()\n    x = bar.get_x()\n    y = bar.get_y()\n    ax.plot([x, x + width], [y + height, y + height], color='black')\n    ax.plot([x + width, x + width], [y + height, y], color='black')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data for the plots\ngpt4_data = [10, 20, 30, 40, 50]\nclade21_data = [15, 25, 35, 45, 55]\nclade2_data = [20, 30, 40, 50, 60]\nclade35_data = [25, 35, 45, 55, 65]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Plot the data\nax.plot(gpt4_data, label='GPT-4 Buyer (valuation 40)')\nax.plot(clade21_data, label='Claude-2.1 Buyer (valuation 40)')\nax.plot(clade2_data, label='Claude-2 Buyer (valuation 40)')\nax.plot(clade35_data, label='GPT-3.5 Buyer (valuation 40)')\n\n# Set the limits of the y-axis\nax.set_ylim(-20, 0)\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\ndata = {\n    \"[m]\": [0.96, 0.95, 0.94, 0.93, 0.92],\n    \"[\u0394R]\": [0.86, 0.85, 0.84, 0.83, 0.82],\n    \"[\u0394R -1]\": [0.78, 0.77, 0.76, 0.75, 0.74],\n    \"[none]\": [0.70, 0.69, 0.68, 0.67, 0.66]\n}\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Plot the data\nfor key, values in data.items():\n    ax.bar(key, values, color='gray')\n\n# Set the title and labels\nax.set_title('DNN Performance')\nax.set_xlabel('Model')\nax.set_ylabel('Performance')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nx = [1, 2, 3, 4, 5, 6, 7]\ny = [0.1, 0.15, 0.2, 0.15, 0.1, 0.05, 0.0]\n\n# Plot\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\nax.plot(x, y, 'ro-')\nax.set_xlabel('Time (s)')\nax.set_ylabel('Posterior Accuracy')\nax.set_title('Posterior Accuracy over Time')\n\n# Rectangle\nrect = plt.Rectangle((0.5, 0.5), 0.5, 0.5, color='blue')\nax.add_patch(rect)\n\n# Line\nline = plt.Line2D([0.5, 1], [0.5, 1], color='black')\nax.add_line(line)\n\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ncategories = ['a', 'b', 'c']\nperformance = [85, 82, 88]\naug = [75, 78, 80]\nte = [65, 68, 70]\nqual = [55, 58, 60]\ndiff = [45, 48, 50]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 3))\n\n# Plot bars for each category\nfor i, cat in enumerate(categories):\n    ax.bar(cat, performance[i], color='blue')\n    ax.bar(cat, aug[i], bottom=performance[i], color='orange')\n    ax.bar(cat, te[i], bottom=[p + a for p, a in zip(performance, aug)], color='yellow')\n    ax.bar(cat, qual[i], bottom=[p + a + t for p, a, t in zip(performance, aug, te)], color='blue')\n    ax.bar(cat, diff[i], bottom=[p + a + t + q for p, a, t, q in zip(performance, aug, te, qual)], color='darkblue')\n\n# Set labels and title\nax.set_xlabel('Category')\nax.set_ylabel('Performance')\nax.set_title('Performance Metrics')\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_16.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\nax.set_title('FashionMNIST (NEURAL)')\nax.set_xlabel('Hyperparameters')\nax.set_ylabel('Metric')\n\n# Define the hyperparameters and their corresponding values\nhyperparameters = ['128/0.5/0.0001', '128/0.1/0.0001', '256/0.1/0.0001', '256/0.3/0.0001', '256/0.5/0.0001', '64/0.1/0.0001', '64/0.3/0.0001', '64/0.5/0.0001']\nvalues = [0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2]\n\n# Create a bar chart with the hyperparameters and their corresponding values\nbars = ax.bar(hyperparameters, values, color='blue')\n\n# Add a legend to the plot\nax.legend(['Value'])\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_17.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the first chart\ncountries1 = ['Japan', 'Brazil', 'India', 'Germany', 'United States']\nvalues1 = [25, 18, 14, 29, 35]\n\n# Data for the second chart\ncountries2 = ['Japan', 'Brazil', 'India', 'Germany', 'United States']\nvalues2 = [20, 15, 10, 25, 30]\n\n# Create a figure and a set of subplots\nfig, axes = plt.subplots(1, 2, figsize=(6.0, 6.0))\n\n# Plot the first chart\nfor i, country in enumerate(countries1):\n    axes[0].bar(country, values1[i], color=plt.cm.viridis(i / len(countries1)))\n\n# Plot the second chart\nfor i, country in enumerate(countries2):\n    axes[1].bar(country, values2[i], color=plt.cm.viridis(i / len(countries2)))\n\n# Set the title for each subplot\naxes[0].set_title('Higher Education Enrollment Rate')\naxes[1].set_title('Student-Teacher Ratio')\n\n# Set the x-axis label for each subplot\naxes[0].set_xlabel('Country')\naxes[1].set_xlabel('Country')\n\n# Set the y-axis label for each subplot\naxes[0].set_ylabel('Enrollment Rate')\naxes[1].set_ylabel('Ratio')\n\n# Set the y-axis limits for each subplot\naxes[0].set_ylim(0, 35)\naxes[1].set_ylim(0, 35)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_18.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the first chart\nregions = ['Africa', 'South America', 'North America', 'Asia', 'Europe']\nemissions = [1200, 1800, 5000, 7000, 10400]\nforest_coverage = [21, 34, 25, 28, 38]\n\n# Data for the second chart\nenergy_usage = [18, 28, 25, 34, 38]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 9.0))\n\n# Plot the first chart\nfor i, region in enumerate(regions):\n    ax.barh(region, emissions[i], color='lightgrey')\n    ax.text(emissions[i] + 100, i, str(emissions[i]), va='center')\n\n# Plot the second chart\nfor i, region in enumerate(regions):\n    ax.barh(region, forest_coverage[i], color='lightblue')\n    ax.text(forest_coverage[i] + 100, i, str(forest_coverage[i]), va='center')\n\n# Set the title of the chart\nax.set_title('Forest Coverage Rate')\n\n# Set the x-axis label\nax.set_xlabel('% of Land Area')\n\n# Set the y-axis label\nax.set_ylabel('Region')\n\n# Set the y-axis limits\nax.set_ylim(-1, len(regions))\n\n# Set the x-axis limits\nax.set_xlim(0, 10000)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_19.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the first bar chart\ncategories = ['Crime Rate', 'Happiness Index', 'Social Security Coverage', 'Political Participation']\nvalues = [75, 85, 90, 60]\ncolors = ['purple', 'blue', 'red', 'yellow']\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 9.0))\n\n# Plot the bar chart\nax.bar(categories, values, color=colors)\n\n# Set the title and labels\nax.set_title('a')\nax.set_xlabel('Categories')\nax.set_ylabel('Percentage')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Set the title of the plot\nax.set_title('Protocol')\n\n# Define the colors for the rectangles\ncolors = ['blue', 'green', 'orange', 'red', 'pink']\n\n# Draw the rectangles\nfor i in range(5):\n    ax.add_patch(plt.Rectangle((i*2, 0), 2, 120, color=colors[i]))\n\n# Set the limits of the x-axis\nax.set_xlim(0, 10)\n\n# Set the limits of the y-axis\nax.set_ylim(0, 120)\n\n# Set the labels for the x-axis\nax.set_xticks([0, 2, 4, 6, 8])\nax.set_xticklabels(['Expert', 'Blue', 'Consultancy', 'Debate', 'Interactive Consultancy'])\n\n# Set the labels for the y-axis\nax.set_yticks([0, 20, 40, 60, 80, 100, 120])\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_20.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the plots\ncities = ['New York', 'London', 'Beijing', 'Tokyo']\ntemperatures = [12, 14, 16, 18]\nrainfall = [1200, 1300, 1400, 1500]\nwind_speed = [5, 6, 7, 8]\nair_quality = [50, 60, 70, 80]\n\n# Create a figure and a set of subplots\nfig, axes = plt.subplots(2, 2, figsize=(10, 5))\n\n# Plot 1: Annual Average Temperature\naxes[0, 0].bar(cities, temperatures, color='pink')\naxes[0, 0].set_title('Annual Average Temperature')\naxes[0, 0].set_ylabel('Temperature (\u00b0C)')\naxes[0, 0].set_xlabel('City')\n\n# Plot 2: Annual Rainfall\naxes[0, 1].bar(cities, rainfall, color='lightgreen')\naxes[0, 1].set_title('Annual Rainfall')\naxes[0, 1].set_ylabel('Rainfall (mm)')\naxes[0, 1].set_xlabel('City')\n\n# Plot 3: Wind Speed\naxes[1, 0].bar(cities, wind_speed, color='orange')\naxes[1, 0].set_title('Wind Speed')\naxes[1, 0].set_ylabel('Speed (m/s)')\naxes[1, 0].set_xlabel('City')\n\n# Plot 4: Air Quality Index\naxes[1, 1].bar(cities, air_quality, color='purple')\naxes[1, 1].set_title('Air Quality Index')\naxes[1, 1].set_ylabel('AQI')\naxes[1, 1].set_xlabel('City')\n\n# Adjust layout\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_21.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the bar charts\nenergy_consumption = [0, 0, 0, 0]\nrenewable_energy_usage = [20, 15, 10, 5]\ntotal_energy_consumption = [25, 20, 15, 10]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot the bar chart\nax.bar(range(len(energy_consumption)), energy_consumption, color='purple')\nax.bar(range(len(renewable_energy_usage)), renewable_energy_usage, color='cyan', bottom=energy_consumption)\nax.bar(range(len(total_energy_consumption)), total_energy_consumption, color='green', bottom=[sum(x) for x in zip(energy_consumption, renewable_energy_usage)])\n\n# Set the labels and title\nax.set_xlabel('Country')\nax.set_ylabel('Energy Consumption (Petajoules)')\nax.set_title('Total Energy Consumption by Country')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_22.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nmodels = ['Standard Model', 'Advanced Model', 'Optimal Model']\nefficiency_ratings = [0.25, 0.30, 0.20]\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\nax.bar(models, efficiency_ratings, color='blue')\n\n# Set the title and labels\nax.set_title('Energy Efficiency Ratings by Appliance Model')\nax.set_xlabel('Appliance Model')\nax.set_ylabel('Energy Efficiency Rating')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_23.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nefficiency = [85, 75, 65, 95, 80]\ncosts = [45, 35, 25, 55, 40]\ncolors = ['blue', 'orange', 'green', 'purple', 'cyan']\nlabels = ['Installation Efficiency', 'Maintenance Costs', 'Operational Efficiency', 'Environmental Impact', 'Safety Standards']\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Plot bars\nfor i, e in enumerate(efficiency):\n    ax.bar(labels[i], e, color=colors[i])\n\n# Set title and labels\nax.set_title('Energy Assessment Entity')\nax.set_xlabel('Efficiency and Cost Scores')\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_24.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nregions = ['North America', 'Europe', 'Asia', 'South America', 'Africa', 'Australia', 'Central America', 'Middle East', 'Southeast Asia', 'Scandinavia']\nhigh_school_graduation = [85, 90, 75, 80, 95, 85, 70, 85, 90, 80]\nhigher_education_enrollment = [110, 115, 95, 100, 110, 105, 90, 105, 110, 100]\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(10, 6))\nax.bar(regions, high_school_graduation, color='lightgreen')\nax.bar(regions, higher_education_enrollment, bottom=high_school_graduation, color='gold')\n\n# Add labels and title\nax.set_xlabel('Region')\nax.set_ylabel('Percentage (%)')\nax.set_title('Educational Metrics by Region')\n\n# Add a legend\nax.legend(['High School Graduation', 'Higher Education Enrollment'])\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_25.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nbrands = ['iPhone 13', 'Samsung S21', 'Google Pixel 6', 'OnePlus 9']\ntruthful_recall = [46.3, 57.9, 53.8, 19.4]\nmisleading_recall = [30.1, 34.0, 55.8, 20.0]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Plot the bars\nax.bar(brands, truthful_recall, color='skyblue', label='Truthful Recall')\nax.bar(brands, misleading_recall, bottom=truthful_recall, color='orange', label='Misleading Recall')\n\n# Set the title and labels\nax.set_title('Comparison of Recall Rates Across Products')\nax.set_xlabel('Product')\nax.set_ylabel('Recall Rate (%)')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_26.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ncategories = ['Support', 'Delivery', 'Product Quality', 'Returns', 'Pricing', 'Website Usability', 'Checkout Process']\nsupport = [15, 75]\ndelivery = [18, 82]\nproduct_quality = [20, 78]\nreturns = [12, 85]\npricing = [17, 80]\nwebsite_usability = [10, 88]\ncheckout_process = [8, 90]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot bars for each category\nax.bar(categories, support, color='skyblue', label='Support')\nax.bar(categories, delivery, color='lightgreen', label='Delivery')\nax.bar(categories, product_quality, color='lightblue', label='Product Quality')\nax.bar(categories, returns, color='lavender', label='Returns')\nax.bar(categories, pricing, color='lightsalmon', label='Pricing')\nax.bar(categories, website_usability, color='lightgrey', label='Website Usability')\nax.bar(categories, checkout_process, color='lightcyan', label='Checkout Process')\n\n# Set the title and labels\nax.set_title('Customer Satisfaction Scores')\nax.set_xlabel('Categories')\nax.set_ylabel('Satisfaction Scores')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_27.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ncategories = ['Support', 'Delivery', 'Product Quality', 'Returns', 'Pricing', 'Website Usability', 'Checkout Process']\nagree_rates = [75, 82, 78, 78, 85, 88, 90]\ndisagree_rates = [15, 18, 20, 12, 17, 10, 8]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Plot bars for agree rates\nfor i, rate in enumerate(agree_rates):\n    ax.bar(categories[i], rate, color='orange', label='Agree' if i == 0 else None)\n\n# Plot bars for disagree rates\nfor i, rate in enumerate(disagree_rates):\n    ax.bar(categories[i], -rate, color='lightblue', label='Disagree' if i == 0 else None)\n\n# Set labels and title\nax.set_xlabel('Categories')\nax.set_ylabel('Percentage')\nax.set_title('Customer Satisfaction')\n\n# Add a horizontal line at y=0\nax.axhline(y=0, color='black', linewidth=0.5)\n\n# Show legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_28.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nx = [-0.15, -0.1, -0.05, 0, 0.05, 0.1, 0.15, 0.2, 0.25]\ny = [0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05]\n\n# Plot\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\nax.plot(x, y, 'k-')\n\n# Set title and labels\nax.set_title('Impact on Plant Growth (\u0394 to control)')\nax.set_xlabel('Watering Frequency')\nax.set_ylabel('Plant Variety')\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_29.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for New York\nny_data = [250, 200, 200, 200, 200]\n\n# Data for Los Angeles\nla_data = [220, 200, 150, 100, 150]\n\n# Data for Chicago\nchi_data = [220, 200, 150, 100, 150]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 4))\n\n# Plot bars for New York\nax.bar(range(len(ny_data)), ny_data, color='green', label='New York')\n\n# Plot bars for Los Angeles\nax.bar(range(len(la_data)), la_data, color='red', label='Los Angeles')\n\n# Plot bars for Chicago\nax.bar(range(len(chi_data)), chi_data, color='blue', label='Chicago')\n\n# Set labels and title\nax.set_xlabel('Metrics')\nax.set_ylabel('Metric Values')\nax.set_title('Traffic Metrics Comparison')\nax.legend()\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 10.0))\n\n# Set the title of the plot\nax.set_title('FashionMNIST (NEURAL)')\n\n# Set the x-axis label\nax.set_xlabel('Metric')\n\n# Set the y-axis label\nax.set_ylabel('Hyperparameters')\n\n# Define the data for the plot\nx = [0.0, 0.2, 0.4, 0.6, 0.8, 1.0]\ny = [0.0, 0.2, 0.4, 0.6, 0.8, 1.0]\n\n# Plot the data\nfor i in range(len(x)):\n    ax.plot([x[i], x[i]], [0.0, 1.0], 'k-')\n    ax.plot([0.0, 1.0], [y[i], y[i]], 'k-')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_30.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the bar chart\ncategories = ['City A', 'City B', 'City C', 'City D']\nair_quality_scores = [3.2, 4.1, 2.9, 3.7]\nwater_quality_scores = [2.5, 3.6, 2.8, 3.1]\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Set the title of the plot\nax.set_title('Environmental Impact Scores Across Cities')\n\n# Set the x-axis label\nax.set_xlabel('Cities')\n\n# Set the y-axis label\nax.set_ylabel('Environmental Impact Score')\n\n# Set the tick labels for the x-axis\nax.set_xticks(range(len(categories)))\nax.set_xticklabels(categories)\n\n# Set the tick labels for the y-axis\nax.set_yticks(range(-30, 10, 5))\nax.set_yticklabels([str(i) for i in range(-30, 10, 5)])\n\n# Set the color of the bars\nbar_colors = ['pink'] * len(categories)\n\n# Set the hatch pattern of the bars\nbar_hatches = ['///'] * len(categories)\n\n# Create the bar chart\nbars = ax.bar(categories, air_quality_scores, color=bar_colors, hatch=bar_hatches)\n\n# Add a legend to the plot\nax.legend(['Air Quality Score', 'Water Quality Score'], loc='upper right')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nroles = ['Wererewolf', 'Seer', 'Witch', 'Hunter', 'Villager']\ndurations = [84.97, 102.67, 78.22, 85.17, 80]\ntokens = [80, 780.67, 700, 612.99, 618.52]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 4))\n\n# Plot bars for durations\nax.bar(roles, durations, color='blue')\nax.set_title('a) Speak duration of roles')\n\n# Plot bars for tokens\nax2 = ax.twinx()\nax2.bar(roles, tokens, color='green')\nax2.set_title('b) Speak tokens of roles')\n\n# Set y-axis limits\nax.set_ylim(0, 120)\nax2.set_ylim(0, 800)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nx = [5, 10, 20, 30, 40, 50]\ny = [63.77, 64.17, 64.31, 64.98, 65.82, 65.78]\n\n# Plotting\nfig, ax = plt.subplots(figsize=(10.0, 7.0))\nax.bar(x, y, color='skyblue')\nax.set_xlabel('Size of Data for Training and Validation')\nax.set_ylabel('True+ info (%)')\nax.set_title('Performance Metrics')\n\n# Adding vertical lines\nfor i in range(len(x)):\n    ax.plot([x[i], x[i]], [0, y[i]], 'k-')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nx = ['all', 'arg-causal', 'test 0', 'test 1', 'test 2', 'test 3', 'test 4', 'test 5', 'test 6', 'constant']\ny = [834, 832, 830, 830, 830, 830, 830, 830, 830, 828]\ncolors = ['red', 'blue', 'green', 'yellow', 'cyan', 'magenta', 'black', 'white', 'gray', 'brown']\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Plot the data\nfor i in range(len(x)):\n    ax.barh(x[i], y[i], color=colors[i])\n\n# Set the title\nax.set_title('Out-of-domain accuracy')\n\n# Set the x-axis label\nax.set_xlabel('Accuracy')\n\n# Set the y-axis label\nax.set_ylabel('Test cases')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nmodels = ['Final Distribution with GPT-4-Turbo', 'Final Distribution with GPT-3.5-Turbo', '0.125 Parameter-Valued Distribution', 'Initial Distribution', 'Best-of-Three']\nvalues = [0.7, 0.6, 0.5, 0.4, 0.3]\ncolors = ['lightblue', 'lightblue', 'lightblue', 'lightblue', 'lightblue']\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\nbars = ax.bar(models, values, color=colors)\n\n# Add a vertical line at the end of each bar\nfor bar in bars:\n    height = bar.get_height()\n    ax.plot([bar.get_x() + bar.get_width(), bar.get_x() + bar.get_width()], [0, height], color='black')\n\n# Set the title and labels\nax.set_title('Mini Crosswords Performance')\nax.set_xlabel('Model')\nax.set_ylabel('Objective Value')\n\n# Add a colored rectangle at the bottom right corner\nrect = plt.Rectangle((0.9, 0.9), 0.1, 0.1, color='red')\nax.add_patch(rect)\n\n# Add a text annotation\nax.text(0.95, 0.95, 'ToT (0.675)', ha='right', va='top', fontsize=12, color='white')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nbrands = ['BERT', 'RoBERTa', 'DistilBERT', 'XLNet', 'Electra', 'Albert', 'BART', 'DeBERTa', 'DeBERTaTa', 'Llama2']\naccuracies = [55, 50, 60, 65, 45, 40, 70, 60, 55, 35]\nlabels = ['Ground-truth labels', 'Weak labels']\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 3.0))\n\n# Plot bars\nfor i, brand in enumerate(brands):\n    ax.bar(brand, accuracies[i], color='red' if i % 2 == 0 else 'blue')\n\n# Set labels and title\nax.set_xlabel('Brands')\nax.set_ylabel('Accuracy (%)')\nax.set_title('Brand Accuracy Comparison')\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for each category\ncategories = ['Computational Social Science and Social Media', 'Phonology, Morphology and Word Segmentation', 'Information Retrieval and Text Mining', 'Machine Learning for NLP', 'Information Extraction', 'Discourse and Pragmatics', 'Syntax: Tagging, Chunking and Parsing']\nvalues = [1.5, 1.4, 1.3, 1.2, 1.1, 1.0, 0.9]\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\nbars = ax.bar(categories, values, color='lavender')\n\n# Add labels and title\nax.set_xlabel('A')\nax.set_ylabel('Your Chart Title Here')\nax.set_title('Your Chart Title Here')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorpoint_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ncategories = ['Kashmir', 'Religion', 'Crime and Justice', 'CAA', 'Pulwama-Balakot', 'Politics']\nshouting_fractions = [0.12, 0.14, 0.16, 0.18, 0.20, 0.22]\nmean_values = [0.13, 0.15, 0.17, 0.19, 0.21, 0.23]\n\n# Plotting\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\nax.plot(categories, shouting_fractions, marker='o', color='blue')\nax.set_title('Shouting Fraction (Fraction of videos)')\nax.set_xlabel('Category')\nax.set_ylabel('Shouting Fraction')\n\n# Adding mean values\nfor i, v in enumerate(mean_values):\n    ax.text(i, v, str(v), ha='center', va='bottom')\n\n# Adding legend\nlegend_elements = [plt.Line2D([0], [0], marker='o', color='w', label='Dataset mean', markerfacecolor='blue', markersize=10),\n                   plt.Line2D([0], [0], marker='o', color='w', label='Mean', markerfacecolor='red', markersize=10)]\nax.legend(handles=legend_elements)\n\nplt.show()\n```"}
{"file": "dataset/ori_500/errorpoint_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for Variable, Symmetric Error\nvariable_symmetric_error = [15.49, 17.15, 16.03, 15.45, 14.24, 16.46]\nsymmetric_error = [15.49, 17.15, 16.03, 15.45, 14.24, 16.46]\n\n# Data for Variable, Symmetric Error\nvariable_symmetric_error_2 = [19.38, 23.92, 24.64, 22.92, 20.29, 18.83]\nsymmetric_error_2 = [19.38, 23.92, 24.64, 22.92, 20.29, 18.83]\n\n# Data for Variable, Symmetric Error\nvariable_symmetric_error_3 = [15.49, 17.15, 16.03, 15.45, 14.24, 16.46]\nsymmetric_error_3 = [15.49, 17.15, 16.03, 15.45, 14.24, 16.46]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 9.0))\n\n# Plot the data\nax.plot(variable_symmetric_error, symmetric_error, 'ro-')\nax.plot(variable_symmetric_error_2, symmetric_error_2, 'go-')\nax.plot(variable_symmetric_error_3, symmetric_error_3, 'bo-')\n\n# Set the title and labels\nax.set_title('Variable, Symmetric Error')\nax.set_xlabel('Variable')\nax.set_ylabel('Symmetric Error')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorpoint_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Incivility (Fraction of Videos)')\n\n# Set the x-axis label\nax.set_xlabel('Incivility (Fraction of Videos)')\n\n# Set the y-axis label\nax.set_ylabel('Category')\n\n# Define the categories and their corresponding incivility values\ncategories = ['Politics', 'Religion', 'Kashmir', 'CAA', 'Pulwama-Balakot']\nincivility_values = [0.16, 0.18, 0.2, 0.22, 0.24]\n\n# Plot the data\nfor category, value in zip(categories, incivility_values):\n    ax.plot([value, value], [category, category], color='red', marker='o')\n\n# Set the x-axis limits\nax.set_xlim(0.15, 0.25)\n\n# Set the y-axis limits\nax.set_ylim(-1, len(categories))\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorpoint_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plot\nx = [-19.6, -19.5, -19.4, -19.3]\ny = [-19.353 + 0.073, -19.257 + 0.028, -19.404 + 0.099, -19.314 + 0.104]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Plot the data\nax.plot(x, y, 'o-')\n\n# Set the title and labels\nax.set_title('Stock Prices')\nax.set_xlabel('M_{B}')\nax.set_ylabel('M_{B}')\n\n# Add a rectangle with a red border\nrect = plt.Rectangle((-19.5, -19.5), 0.1, 0.1, color='pink', edgecolor='red')\nax.add_patch(rect)\n\n# Add a vertical line at x = -19.2\nax.axvline(x=-19.2, color='r', linestyle='-')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorpoint_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Set the title of the plot\nax.set_title('Dataset unique shouter count mean')\n\n# Set the x-axis label\nax.set_xlabel('Unique speaker count mean')\n\n# Set the y-axis label\nax.set_ylabel('Unique shouter count mean')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the legend\nax.legend(['Education', 'Religion', 'Bollywood', 'Crime and Justice', 'Farmers Protest', 'Issue Politics'], loc='upper right', fancybox=True, shadow=True)\n\n# Set the color of the plot\nax.plot([1, 2, 3, 4, 5], [10, 12, 14, 16, 18], 'bo-', label='Education')\nax.plot([1, 2, 3, 4, 5], [8, 10, 12, 14, 16], 'ro-', label='Religion')\nax.plot([1, 2, 3, 4, 5], [6, 8, 10, 12, 14], 'go-', label='Bollywood')\nax.plot([1, 2, 3, 4, 5], [4, 6, 8, 10, 12], 'mo-', label='Crime and Justice')\nax.plot([1, 2, 3, 4, 5], [2, 4, 6, 8, 10], 'co-', label='Farmers Protest')\nax.plot([1, 2, 3, 4, 5], [0, 2, 4, 6, 8], 'ko-', label='Issue Politics')\n\n# Set the color of the markers\nax.plot([1, 2, 3, 4, 5], [10, 12, 14, 16, 18], 'bo', label='Education')\nax.plot([1, 2, 3, 4, 5], [8, 10, 12, 14, 16], 'ro', label='Religion')\nax.plot([1, 2, 3, 4, 5], [6, 8, 10, 12, 14], 'go', label='Bollywood')\nax.plot([1, 2, 3, 4, 5], [4, 6, 8, 10, 12], 'mo', label='Crime and Justice')\nax.plot([1, 2, 3, 4, 5], [2, 4, 6, 8, 10], 'co', label='Farmers Protest')\nax.plot([1, 2, 3, 4, 5], [0, 2, 4, 6, 8], 'ko', label='Issue Politics')\n\n# Set the color of the line\nax.plot([1, 2, 3, 4, 5], [10, 12, 14, 16, 18], 'b-', label='Education')\nax.plot([1, 2, 3, 4, 5], [8, 10, 12, 14, 16], 'r-', label='Religion')\nax.plot([1, 2, 3, 4, 5], [6, 8, 10, 12, 14], 'g-', label='Bollywood')\nax.plot([1, 2, 3, 4, 5], [4, 6, 8, 10, 12], 'm-', label='Crime and Justice')\nax.plot([1, 2, 3, 4, 5], [2, 4, 6, 8, 10], 'c-', label='Farmers Protest')\nax.plot([1, 2, 3, 4, 5], [0, 2, 4, 6, 8], 'k-', label='Issue Politics')\n\n# Set the color of the marker edge color\nax.plot([1, 2, 3, 4, 5], [10, 12, 14, 16, 18], 'bo', label='Education')\nax.plot([1, 2, 3, 4, 5], [8, 10, 12, 14, 16], 'ro', label='Religion')\nax.plot([1, 2, 3, 4, 5], [6, 8, 10, 12, 14], 'go', label='Bollywood')\nax.plot([1, 2, 3, 4, 5], [4, 6, 8, 10, 12], 'mo', label='Crime and Justice')\nax.plot([1, 2, 3, 4, 5], [2, 4, 6, 8, 10], 'co', label='Farmers Protest')\nax.plot([1, 2, 3, 4, 5], [0, 2, 4, 6, 8], 'ko', label='Issue Politics')\n\n# Set the color of the marker face color\nax.plot([1, 2, 3, 4, 5], [10, 12, 14, 16, 18], 'bo', label='Education')\nax.plot([1, 2, 3, 4, 5], [8, 10, 12, 14, 16], 'ro', label='Religion')\nax.plot([1, 2, 3, 4, 5], [6, 8, 10, 12, 14], 'go', label='Bollywood')\nax.plot([1, 2, 3, 4, 5], [4, 6, 8, 10, 12], 'mo', label='Crime and Justice')\nax.plot([1, 2, 3, 4, 5], [2, 4, 6, 8, 10], 'co', label='Farmers Protest')\nax.plot([1, 2, 3, 4, 5], [0, 2, 4, 6, 8], 'ko', label='Issue Politics')\n\n# Set the color of the marker size\nax.plot([1, 2, 3, 4, 5], [10, 12, 14, 16, 18], 'bo', label='Education')\nax.plot([1, 2, 3, 4, 5], [8, 10, 12, 14, 16], 'ro', label='Religion')\nax.plot([1, 2, 3, 4, 5], [6, 8, 10, 12, 14], 'go', label='Bollywood')\nax.plot([1, 2, 3, 4, 5], [4, 6, 8, 10, 12], 'mo', label='Crime and Justice')\nax.plot([1, 2, 3, 4, 5], [2, 4, 6, 8, 10], 'co', label='Farmers Protest')\nax.plot([1, 2, 3, 4, 5], [0, 2, 4, 6, 8], 'ko', label='Issue Politics')\n\n# Set the color of the marker edge width\nax.plot([1, 2, 3, 4, 5], [10, 12, 14, 16, 18], 'bo', label='Education')\nax.plot([1, 2, 3, 4, 5], [8, 10, 12, 14, 16], 'ro', label='Religion')\nax.plot([1, 2, 3, 4, 5], [6, 8, 10, 12, 14], 'go', label='Bollywood')\nax.plot([1, 2, 3, 4, 5], [4, 6, 8, 10, 12], 'mo', label='Crime and Justice')\nax.plot([1, 2, 3, 4, 5], [2, 4, 6, 8, 10], 'co', label='Farmers Protest')\nax.plot([1, 2, 3, 4, 5], [0, 2, 4, 6, 8], 'ko', label='Issue Politics')\n\n# Set the color of the marker fill style\nax.plot([1, 2, 3, 4, 5], [10, 12, 14, 16, 18], 'bo', label='Education')\nax.plot([1, 2, 3, 4, 5], [8, 10, 12, 14, 16], 'ro', label='Religion')\nax.plot([1, 2, 3, 4, 5], [6, 8, 10, 12, 14], 'go', label='Bollywood')\nax.plot([1, 2, 3, 4, 5], [4, 6, 8, 10, 12], 'mo', label='Crime and Justice')\nax.plot([1, 2, 3, 4, 5], [2, 4, 6, 8, 10], 'co', label='Farmers Protest')\nax.plot([1, 2, 3, 4, 5], [0, 2, 4, 6, 8], 'ko', label='Issue Politics')\n\n# Set the color of the marker hatch\nax.plot([1, 2, 3, 4, 5], [10, 12, 14, 16, 18], 'bo', label='Education')\nax.plot([1, 2, 3, 4, 5], [8, 10, 12, 14, 16], 'ro', label='Religion')\nax.plot([1, 2, 3, 4, 5], [6, 8, 10, 12, 14], 'go', label='Bollywood')\nax.plot([1, 2, 3, 4, 5], [4, 6, 8, 10, 12], 'mo', label='Crime and Justice')\nax.plot([1, 2, 3, 4, 5], [2, 4, 6, 8, 10], 'co', label='Farmers Protest')\nax.plot([1, 2, 3, 4, 5], [0, 2, 4, 6, 8], 'ko', label='Issue Politics')\n\n# Set the color of the marker antialiased\nax.plot([1, 2, 3, 4, 5], [10, 12, 14, 16, 18], 'bo', label='Education')\nax.plot([1, 2, 3, 4, 5], [8, 10, 12, 14, 16], 'ro', label='Religion')\nax.plot([1, 2, 3, 4, 5], [6, 8, 10, 12, 14], 'go', label='Bollywood')\nax.plot([1, 2, 3, 4, 5], [4, 6, 8, 10, 12], 'mo', label='Crime and Justice')\nax.plot([1, 2, 3, 4, 5], [2, 4, 6, 8, 10], 'co', label='Farmers Protest')\nax.plot([1, 2, 3, 4, 5], [0, 2, 4, 6, 8], 'ko', label='Issue Politics')\n\n# Set the color of the marker capsize\nax.plot([1, 2, 3, 4, 5], [10, 12, 14, 16, 18], 'bo', label='Education')\nax.plot([1, 2, 3, 4, 5], [8, 10, 12, 14, 16], 'ro', label='Religion')\nax.plot([1, 2, 3, 4, 5], [6, 8, 10, 12, 14], 'go', label='Bollywood')\nax.plot([1, 2, 3, 4, 5], [4, 6, 8, 10, 12], 'mo', label='Crime and Justice')\nax.plot([1, 2, 3, 4, 5], [2, 4, 6, 8, 10], 'co', label='Farmers Protest')\nax.plot([1, 2, 3, 4, 5], [0, 2, 4, 6, 8], 'ko', label='Issue Politics')\n\n# Set the color of the marker error bar\nax.errorbar([1, 2, 3, 4, 5], [10, 12, 14, 16, 18], yerr=[1, 2, 3, 4, 5], fmt='bo', label='Education')\nax.errorbar([1, 2, 3, 4, 5], [8, 10, 12, 14, 16], yerr=[1, 2, 3, 4, 5], fmt='ro', label='Religion')\nax.errorbar([1, 2, 3, 4, 5], [6, 8, 10, 12, 14], yerr=[1, 2, 3, 4, 5], fmt='go', label='Bollywood')\nax.errorbar([1, 2, 3, 4, 5], [4, 6, 8, 10, 12], yerr=[1, 2, 3, 4, 5], fmt='mo', label='Crime and Justice')\nax.errorbar([1, 2, 3, 4, 5], [2, 4, 6, 8, 10], yerr=[1, 2, 3, 4, 5], fmt='co', label='Farmers Protest')\nax.errorbar([1, 2, 3, 4, 5], [0, 2, 4, 6, 8], yerr=[1, 2, 3, 4, 5], fmt='ko', label='Issue Politics')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/errorpoint_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Female Face Presence (Fraction of videos)')\n\n# Set the x-axis label\nax.set_xlabel('PULWAMA-BALAKOT')\n\n# Set the y-axis label\nax.set_ylabel('Dataset mean')\n\n# Set the y-axis limits\nax.set_ylim(0.05, 0.25)\n\n# Set the x-axis ticks\nax.set_xticks([0, 1, 2, 3, 4])\n\n# Set the x-axis tick labels\nax.set_xticklabels(['KASHMIR', 'COVID/LOCKDOWN', 'SPORTS', 'CHINA', 'PULWAMA-BALAKOT'])\n\n# Draw a horizontal line at the mean value\nax.axhline(y=0.15, color='r', linestyle='-')\n\n# Draw a vertical line at the median value\nax.axvline(x=2, color='g', linestyle='-')\n\n# Draw a rectangle around the legend\nax.legend(['Dataset mean', 'Mean'], loc='upper right', frameon=True)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorpoint_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(9.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Errorbar upper and lower limits')\n\n# Define the x-axis values\nx = [1, 2, 3, 4, 5]\n\n# Define the y-axis values\ny = [1.5, 2.5, 3.5, 4.5, 5.5]\n\n# Define the error values\nyerr = [0.5, 0.5, 0.5, 0.5, 0.5]\n\n# Plot the data with error bars\nax.errorbar(x, y, yerr=yerr, fmt='o', ecolor='r', capsize=5)\n\n# Set the x-axis limits\nax.set_xlim(0, 6)\n\n# Set the y-axis limits\nax.set_ylim(0, 6)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorpoint_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 4))\n\n# Plot the first graph\nax.plot([0, 0.5, 1, 1.5, 2, 2.5, 3, 3.5], [1, 1.5, 2, 2.5, 3, 3.5, 4, 4.5], 'p', color='purple')\nax.set_title('variable, symmetric error')\n\n# Plot the second graph\nax2 = fig.add_subplot(122)\nax2.plot([0, 0.5, 1, 1.5, 2, 2.5, 3, 3.5], [10, 15, 20, 25, 30, 35, 40, 45], 'o', color='green')\nax2.set_title('variable, symmetric error')\n\n# Set the y-axis limits for both graphs\nax.set_ylim(0, 5)\nax2.set_ylim(0, 5)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorpoint_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 7.0))\n\n# Set the title of the plot\nax.set_title('variable, asymmetric error')\n\n# Set the x-axis label\nax.set_xlabel('x')\n\n# Set the y-axis label\nax.set_ylabel('y')\n\n# Set the x-axis limits\nax.set_xlim(0, 10)\n\n# Set the y-axis limits\nax.set_ylim(15, 35)\n\n# Set the x-axis ticks\nax.set_xticks([0, 2, 4, 6, 8, 10])\n\n# Set the y-axis ticks\nax.set_yticks([15, 20, 25, 30, 35])\n\n# Set the x-axis grid\nax.xaxis.grid(True)\n\n# Set the y-axis grid\nax.yaxis.grid(True)\n\n# Set the x-axis tick labels\nax.set_xticklabels(['0', '2', '4', '6', '8', '10'])\n\n# Set the y-axis tick labels\nax.set_yticklabels(['15', '20', '25', '30', '35'])\n\n# Set the x-axis tick color\nax.tick_params(axis='x', colors='green')\n\n# Set the y-axis tick color\nax.tick_params(axis='y', colors='green')\n\n# Set the x-axis tick label color\nax.tick_params(axis='x', labelcolor='green')\n\n# Set the y-axis tick label color\nax.tick_params(axis='y', labelcolor='green')\n\n# Set the x-axis tick label rotation\nax.tick_params(axis='x', rotation=0)\n\n# Set the y-axis tick label rotation\nax.tick_params(axis='y', rotation=0)\n\n# Set the x-axis tick label font size\nax.tick_params(axis='x', labelsize=10)\n\n# Set the y-axis tick label font size\nax.tick_params(axis='y', labelsize=10)\n\n# Set the x-axis tick label font weight\nax.tick_params(axis='x', labelweight='normal')\n\n# Set the y-axis tick label font weight\nax.tick_params(axis='y', labelweight='normal')\n\n# Set the x-axis tick label font style\nax.tick_params(axis='x', labelstyle='italic')\n\n# Set the y-axis tick label font style\nax.tick_params(axis='y', labelstyle='italic')\n\n# Set the x-axis tick label font family\nax.tick_params(axis='x', labelfamily='sans-serif')\n\n# Set the y-axis tick label font family\nax.tick_params(axis='y', labelfamily='sans-serif')\n\n# Set the x-axis tick label font variant\nax.tick_params(axis='x', labelvariant='normal')\n\n# Set the y-axis tick label font variant\nax.tick_params(axis='y', labelvariant='normal')\n\n# Set the x-axis tick label font stretch\nax.tick_params(axis='x', labelstretch='normal')\n\n# Set the y-axis tick label font stretch\nax.tick_params(axis='y', labelstretch='normal')\n\n# Set the x-axis tick label font size\nax.tick_params(axis='x', labelsize=10)\n\n# Set the y-axis tick label font size\nax.tick_params(axis='y', labelsize=10)\n\n# Set the x-axis tick label font weight\nax.tick_params(axis='x', labelweight='normal')\n\n# Set the y-axis tick label font weight\nax.tick_params(axis='y', labelweight='normal')\n\n# Set the x-axis tick label font style\nax.tick_params(axis='x', labelstyle='italic')\n\n# Set the y-axis tick label font style\nax.tick_params(axis='y', labelstyle='italic')\n\n# Set the x-axis tick label font family\nax.tick_params(axis='x', labelfamily='sans-serif')\n\n# Set the y-axis tick label font family\nax.tick_params(axis='y', labelfamily='sans-serif')\n\n# Set the x-axis tick label font variant\nax.tick_params(axis='x', labelvariant='normal')\n\n# Set the y-axis tick label font variant\nax.tick_params(axis='y', labelvariant='normal')\n\n# Set the x-axis tick label font stretch\nax.tick_params(axis='x', labelstretch='normal')\n\n# Set the y-axis tick label font stretch\nax.tick_params(axis='y', labelstretch='normal')\n\n# Set the x-axis tick label font size\nax.tick_params(axis='x', labelsize=10)\n\n# Set the y-axis tick label font size\nax.tick_params(axis='y', labelsize=10)\n\n# Set the x-axis tick label font weight\nax.tick_params(axis='x', labelweight='normal')\n\n# Set the y-axis tick label font weight\nax.tick_params(axis='y', labelweight='normal')\n\n# Set the x-axis tick label font style\nax.tick_params(axis='x', labelstyle='italic')\n\n# Set the y-axis tick label font style\nax.tick_params(axis='y', labelstyle='italic')\n\n# Set the x-axis tick label font family\nax.tick_params(axis='x', labelfamily='sans-serif')\n\n# Set the y-axis tick label font family\nax.tick_params(axis='y', labelfamily='sans-serif')\n\n# Set the x-axis tick label font variant\nax.tick_params(axis='x', labelvariant='normal')\n\n# Set the y-axis tick label font variant\nax.tick_params(axis='y', labelvariant='normal')\n\n# Set the x-axis tick label font stretch\nax.tick_params(axis='x', labelstretch='normal')\n\n# Set the y-axis tick label font stretch\nax.tick_params(axis='y', labelstretch='normal')\n\n# Set the x-axis tick label font size\nax.tick_params(axis='x', labelsize=10)\n\n# Set the y-axis tick label font size\nax.tick_params(axis='y', labelsize=10)\n\n# Set the x-axis tick label font weight\nax.tick_params(axis='x', labelweight='normal')\n\n# Set the y-axis tick label font weight\nax.tick_params(axis='y', labelweight='normal')\n\n# Set the x-axis tick label font style\nax.tick_params(axis='x', labelstyle='italic')\n\n# Set the y-axis tick label font style\nax.tick_params(axis='y', labelstyle='italic')\n\n# Set the x-axis tick label font family\nax.tick_params(axis='x', labelfamily='sans-serif')\n\n# Set the y-axis tick label font family\nax.tick_params(axis='y', labelfamily='sans-serif')\n\n# Set the x-axis tick label font variant\nax.tick_params(axis='x', labelvariant='normal')\n\n# Set the y-axis tick label font variant\nax.tick_params(axis='y', labelvariant='normal')\n\n# Set the x-axis tick label font stretch\nax.tick_params(axis='x', labelstretch='normal')\n\n# Set the y-axis tick label font stretch\nax.tick_params(axis='y', labelstretch='normal')\n\n# Set the x-axis tick label font size\nax.tick_params(axis='x', labelsize=10)\n\n# Set the y-axis tick label font size\nax.tick_params(axis='y', labelsize=10)\n\n# Set the x-axis tick label font weight\nax.tick_params(axis='x', labelweight='normal')\n\n# Set the y-axis tick label font weight\nax.tick_params(axis='y', labelweight='normal')\n\n# Set the x-axis tick label font style\nax.tick_params(axis='x', labelstyle='italic')\n\n# Set the y-axis tick label font style\nax.tick_params(axis='y', labelstyle='italic')\n\n# Set the x-axis tick label font family\nax.tick_params(axis='x', labelfamily='sans-serif')\n\n# Set the y-axis tick label font family\nax.tick_params(axis='y', labelfamily='sans-serif')\n\n# Set the x-axis tick label font variant\nax.tick_params(axis='x', labelvariant='normal')\n\n# Set the y-axis tick label font variant\nax.tick_params(axis='y', labelvariant='normal')\n\n# Set the x-axis tick label font stretch\nax.tick_params(axis='x', labelstretch='normal')\n\n# Set the y-axis tick label font stretch\nax.tick_params(axis='y', labelstretch='normal')\n\n# Set the x-axis tick label font size\nax.tick_params(axis='x', labelsize=10)\n\n# Set the y-axis tick label font size\nax.tick_params(axis='y', labelsize=10)\n\n# Set the x-axis tick label font weight\nax.tick_params(axis='x', labelweight='normal')\n\n# Set the y-axis tick label font weight\nax.tick_params(axis='y', labelweight='normal')\n\n# Set the x-axis tick label font style\nax.tick_params(axis='x', labelstyle='italic')\n\n# Set the y-axis tick label font style\nax.tick_params(axis='y', labelstyle='italic')\n\n# Set the x-axis tick label font family\nax.tick_params(axis='x', labelfamily='sans-serif')\n\n# Set the y-axis tick label font family\nax.tick_params(axis='y', labelfamily='sans-serif')\n\n# Set the x-axis tick label font variant\nax.tick_params(axis='x', labelvariant='normal')\n\n# Set the y-axis tick label font variant\nax.tick_params(axis='y', labelvariant='normal')\n\n# Set the x-axis tick label font stretch\nax.tick_params(axis='x', labelstretch='normal')\n\n# Set the y-axis tick label font stretch\nax.tick_params(axis='y', labelstretch='normal')\n\n# Set the x-axis tick label font size\nax.tick_params(axis='x', labelsize=10)\n\n# Set the y-axis tick label font size\nax.tick_params(axis='y', labelsize=10)\n\n# Set the x-axis tick label font weight\nax.tick_params(axis='x', labelweight='normal')\n\n# Set the y-axis tick label font weight\nax.tick_params(axis='y', labelweight='normal')\n\n# Set the x-axis tick label font style\nax.tick_params(axis='x', labelstyle='italic')\n\n# Set the y-axis tick label font style\nax.tick_params(axis='y', labelstyle='italic')\n\n# Set the x-axis tick label font family\nax.tick_params(axis='x', labelfamily='sans-serif')\n\n# Set the y-axis tick label font family\nax.tick_params(axis='y', labelfamily='sans-serif')\n\n# Set the x-axis tick label font variant\nax.tick_params(axis='x', labelvariant='normal')\n\n# Set the y-axis tick label font variant\nax.tick_params(axis='y', labelvariant='normal')\n\n# Set the x-axis tick label font stretch\nax.tick_params(axis='x', labelstretch='normal')\n\n# Set the y-axis tick label font stretch\nax.tick_params(axis='y', labelstretch='normal')\n\n# Set the x-axis tick label font size\nax.tick_params(axis='x', labelsize=10)\n\n# Set the y-axis tick label font size\nax.tick_params(axis='y', labelsize=10)\n\n# Set the x-axis tick label font weight\nax.tick_params(axis='x', labelweight='normal')\n\n# Set the y-axis tick label font weight\nax.tick_params(axis='y', labelweight='normal')\n\n# Set the x-axis tick label font style\nax.tick_params(axis='x', labelstyle='italic')\n\n# Set the y-axis tick label font style\nax.tick_params(axis='y', labelstyle='italic')\n\n# Set the x-axis tick label font family\nax.tick_params(axis='x', labelfamily='sans-serif')\n\n# Set the y-axis tick label font family\nax.tick_params(axis='y', labelfamily='sans-serif')\n\n# Set the x-axis tick label font variant\nax.tick_params(axis='x', labelvariant='normal')\n\n# Set the y-axis tick label font variant\nax.tick_params(axis='y', labelvariant='normal')\n\n# Set the x-axis tick label font stretch\nax.tick_params(axis='x', labelstretch='normal')\n\n# Set the y-axis tick label font stretch\nax.tick_params(axis='y', labelstretch='normal')\n\n# Set the x-axis tick label font size\nax.tick_params(axis='x', labelsize=10)\n\n# Set the y-axis tick label font size\nax.tick_params(axis='y', labelsize=10)\n\n# Set the x-axis tick label font weight\nax.tick_params(axis='x', labelweight='normal')\n\n# Set the y-axis tick label font weight\nax.tick_params(axis='y', labelweight='normal')\n\n# Set the x-axis tick label font style\nax.tick_params(axis='x', labelstyle='italic')\n\n# Set the y-axis tick label font style\nax.tick_params(axis='y', labelstyle='italic')\n\n# Set the x-axis tick label font family\nax.tick_params(axis='x', labelfamily='sans-serif')\n\n# Set the y-axis tick label font family\nax.tick_params(axis='y', labelfamily='sans-serif')\n\n# Set the x-axis tick label font variant\nax.tick_params(axis='x', labelvariant='normal')\n\n# Set the y-axis tick label font variant\nax.tick_params(axis='y', labelvariant='normal')\n\n# Set the x-axis tick label font stretch\nax.tick_params(axis='x', labelstretch='normal')\n\n# Set the y-axis tick label font stretch\nax.tick_params(axis='y', labelstretch='normal')\n\n# Set the x-axis tick label font size\nax.tick_params(axis='x', labelsize=10)\n\n# Set the y-axis tick label font size\nax.tick_params(axis='y', labelsize=10)\n\n# Set the x-axis tick label font weight\nax.tick_params(axis='x', labelweight='normal')\n\n# Set the y-axis tick label font weight\nax.tick_params(axis='y', labelweight='normal')\n\n# Set the x-axis tick label font style\nax.tick_params(axis='x', labelstyle='italic')\n\n# Set the y-axis tick label font style\nax.tick_params(axis='y', labelstyle='italic')\n\n# Set the x-axis tick label font family\nax.tick_params(axis='x', labelfamily='sans-serif')\n\n# Set the y-axis tick label font family\nax.tick_params(axis='y', labelfamily='sans-serif')\n\n# Set the x-axis tick label font variant\nax.tick_params(axis='x', labelvariant='normal')\n\n# Set the y-axis tick label font variant\nax.tick_params(axis='y', labelvariant='normal')\n\n# Set the x-axis tick label font stretch\nax.tick_params(axis='x', labelstretch='normal')\n\n# Set the y-axis tick label font stretch\nax.tick_params(axis='y', labelstretch='normal')\n\n# Set the x-axis tick label font size\nax.tick_params(axis='x', labelsize=10)\n\n# Set the y-axis tick label font size\nax.tick_params(axis='y', labelsize=10)\n\n# Set the x-axis tick label font weight\nax.tick_params(axis='x', labelweight='normal')\n\n# Set the y-axis tick label font weight\nax.tick_params(axis='y', labelweight='normal')\n\n# Set the x-axis tick label font style\nax.tick_params(axis='x', labelstyle='italic')\n\n# Set the y-axis tick label font style\nax.tick_params(axis='y', labelstyle='italic')\n\n# Set the x-axis tick label font family\nax.tick_params(axis='x', labelfamily='sans-serif')\n\n# Set the y-axis tick label font family\nax.tick_params(axis='y', labelfamily='sans-serif')\n\n# Set the x-axis tick label font variant\nax.tick_params(axis='x', labelvariant='normal')\n\n# Set the y-axis tick label font variant\nax.tick_params(axis='y', labelvariant='normal')\n\n# Set the x-axis tick label font stretch\nax.tick_params(axis='x', labelstretch='normal')\n\n# Set the y-axis tick label font stretch\nax.tick_params(axis='y', labelstretch='normal')\n\n# Set the x-axis tick label font size\nax.tick_params(axis='x', labelsize=10)\n\n# Set the y-axis tick label font size\nax.tick_params(axis='y', labelsize=10)\n\n# Set the x-axis tick label font weight\nax.tick_params(axis='x', labelweight='normal')\n\n# Set the y-axis tick label font weight\nax.tick_params(axis='y', labelweight='normal')\n\n# Set the x-axis tick label font style\nax.tick_params(axis='x', labelstyle='italic')\n\n# Set the y-axis tick label font style\nax.tick_params(axis='y', labelstyle='italic')\n\n# Set the x-axis tick label font family\nax.tick_params(axis='x', labelfamily='sans-serif')\n\n# Set the y-axis tick label font family\nax.tick_params(axis='y', labelfamily='sans-serif')\n\n# Set the x-axis tick label font variant\nax.tick_params(axis='x', labelvariant='normal')\n\n# Set the y-axis tick label font variant\nax.tick_params(axis='y', labelvariant='normal')\n\n# Set the x-axis tick label font stretch\nax.tick_params(axis='x', labelstretch='normal')\n\n# Set the y-axis tick label font stretch\nax.tick_params(axis='y', labelstretch='normal')\n\n# Set the x-axis tick label font size\nax.tick_params(axis='x', labelsize=10)\n\n# Set the y-axis tick label font size\nax.tick_params(axis='y', labelsize=10)\n\n# Set the x-axis tick label font weight\nax.tick_params(axis='x', labelweight='normal')\n\n# Set the y-axis tick label font weight\nax.tick_params(axis='y', labelweight='normal')\n\n# Set the x-axis tick label font style\nax.tick_params(axis='x', labelstyle='italic')\n\n# Set the y-axis tick label font style\nax.tick_params(axis='y', labelstyle='italic')\n\n# Set the x-axis tick label font family\nax.tick_params(axis='x', labelfamily='sans-serif')\n\n# Set the y-axis tick label font family\nax.tick_params(axis='y', labelfamily='sans-serif')\n\n# Set the x-axis tick label font variant\nax.tick_params(axis='x', labelvariant='normal')\n\n# Set the y-axis tick label font variant\nax.tick_params(axis='y', labelvariant='normal')\n\n# Set the x-axis tick label font stretch\nax.tick_params(axis='x', labelstretch='normal')\n\n# Set the y-axis tick label font stretch\nax.tick_params(axis='y', labelstretch='normal')\n\n# Set the x-axis tick label font size\nax.tick_params(axis='x', labelsize=10)\n\n# Set the y-axis tick label font size\nax.tick_params(axis='y', labelsize=10)\n\n# Set the x-axis tick label font weight\nax.tick_params(axis='x', labelweight='normal')\n\n# Set the y-axis tick label font weight\nax.tick_params(axis='y', labelweight='normal')\n\n# Set the x-axis tick label font style\nax.tick_params(axis='x', labelstyle='italic')\n\n# Set the y-axis tick label font style\nax.tick_params(axis='y', labelstyle='italic')\n\n# Set the x-axis tick label font family\nax.tick_params(axis='x', labelfamily='sans-serif')\n\n# Set the y-axis tick label font family\nax.tick_params(axis='y', labelfamily='sans-serif')\n\n# Set the x-axis tick label font variant\nax.tick_params(axis='x', labelvariant='normal')\n\n# Set the y-axis tick label font variant\nax.tick_params(axis='y', labelvariant='normal')\n\n# Set the x-axis"}
{"file": "dataset/ori_500/errorpoint_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 7.0))\n\n# Set the title of the plot\nax.set_title('variable, asymmetric error')\n\n# Define the x-axis values\nx_values = [0, 5, 10, 15, 20]\n\n# Define the y-axis values\ny_values = [-2.1, -2.6, -2.9, -1.2, -1.1, -1.0, -1.3, -2.7, -1.2, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1.0, -1.3, -2.7, -1.1, -1"}
{"file": "dataset/ori_500/graph_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Define the coordinates of the vertices of the hexagon\nx = np.array([0, 1, 1, 0, -1, -1, 0])\ny = np.array([0, 0, 1, 1.732, 1.732, 0, 0])\n\n# Plot the hexagon\nax.plot(x, y, 'k-')\n\n# Define the coordinates of the circles\ncircle1 = np.array([0, 0])\ncircle2 = np.array([1, 0])\ncircle3 = np.array([-1, 0])\ncircle4 = np.array([0, 1.732])\ncircle5 = np.array([0, -1.732])\n\n# Plot the circles\nax.plot(circle1[0], circle1[1], 'o', color='purple')\nax.plot(circle2[0], circle2[1], 'o', color='orange')\nax.plot(circle3[0], circle3[1], 'o', color='cyan')\nax.plot(circle4[0], circle4[1], 'o', color='red')\nax.plot(circle5[0], circle5[1], 'o', color='pink')\n\n# Set the aspect ratio to be equal\nax.set_aspect('equal')\n\n# Set the limits of the plot\nax.set_xlim(-2, 2)\nax.set_ylim(-2, 2)\n\n# Remove the axes\nax.axis('off')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/graph_2.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Define the number of points\nn = 20\n\n# Generate random data for the points\nx = np.random.rand(n)\ny = np.random.rand(n)\n\n# Plot the points\nax.plot(x, y, 'o')\n\n# Set the aspect ratio to be equal\nax.set_aspect('equal')\n\n# Set the limits of the plot\nax.set_xlim(0, 1)\nax.set_ylim(0, 1)\n\n# Set the title of the plot\nax.set_title('Random Points')\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/graph_3.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Define the data for the circle\ntheta = np.linspace(0, 2*np.pi, 10)\nr = np.arange(10)\nx = r * np.cos(theta)\ny = r * np.sin(theta)\n\n# Plot the circle\nax.plot(x, y, 'k-')\n\n# Add circles at each point\nfor i in range(10):\n    circle = plt.Circle((x[i], y[i]), 0.5, color='yellow')\n    ax.add_artist(circle)\n\n# Set the aspect ratio to be equal so that the circle is not distorted\nax.set_aspect('equal')\n\n# Remove the axes\nax.axis('off')\n\nplt.show()"}
{"file": "dataset/ori_500/graph_4.pdf", "response": "```\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Define the coordinates of the vertices of the rectangle\nx = [0, 2, 2, 0, 0]\ny = [0, 0, 3, 3, 0]\n\n# Plot the rectangle\nax.plot(x, y, 'k-')\n\n# Define the coordinates of the circle\ncircle_x = [1]\ncircle_y = [1]\n\n# Plot the circle\nax.plot(circle_x, circle_y, 'bo')\n\n# Set the limits of the plot\nax.set_xlim(-1, 3)\nax.set_ylim(-1, 4)\n\n# Set the aspect ratio of the plot\nax.set_aspect('equal')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/graph_5.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Plot a triangle\nax.plot([0, 2, 1, 0], [0, 0, 3, 0], 'k-')\n\n# Add circles at each vertex\ncircle1 = plt.Circle((0, 0), 0.5, color='orange')\ncircle2 = plt.Circle((2, 0), 0.5, color='orange')\ncircle3 = plt.Circle((1, 3), 0.5, color='orange')\nax.add_artist(circle1)\nax.add_artist(circle2)\nax.add_artist(circle3)\n\n# Set limits and aspect ratio\nax.set_xlim(-1, 3)\nax.set_ylim(-1, 4)\nax.set_aspect('equal')\n\n# Hide axes\nax.axis('off')\n\nplt.show()"}
{"file": "dataset/ori_500/heatmap_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the rectangles\nrectangles = [\n    [0.1, 0.1, 0.2, 0.2],  # x, y, width, height\n    [0.3, 0.1, 0.2, 0.2],\n    [0.5, 0.1, 0.2, 0.2],\n    [0.7, 0.1, 0.2, 0.2],\n    [0.9, 0.1, 0.2, 0.2],\n    [0.1, 0.3, 0.2, 0.2],\n    [0.3, 0.3, 0.2, 0.2],\n    [0.5, 0.3, 0.2, 0.2],\n    [0.7, 0.3, 0.2, 0.2],\n    [0.9, 0.3, 0.2, 0.2],\n    [0.1, 0.5, 0.2, 0.2],\n    [0.3, 0.5, 0.2, 0.2],\n    [0.5, 0.5, 0.2, 0.2],\n    [0.7, 0.5, 0.2, 0.2],\n    [0.9, 0.5, 0.2, 0.2],\n    [0.1, 0.7, 0.2, 0.2],\n    [0.3, 0.7, 0.2, 0.2],\n    [0.5, 0.7, 0.2, 0.2],\n    [0.7, 0.7, 0.2, 0.2],\n    [0.9, 0.7, 0.2, 0.2]\n]\n\n# Colors for the rectangles\ncolors = [\n    'pink', 'orange', 'pink', 'orange', 'pink', 'orange', 'pink', 'orange', 'pink', 'orange',\n    'pink', 'orange', 'pink', 'orange', 'pink', 'orange', 'pink', 'orange', 'pink', 'orange'\n]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Draw the rectangles\nfor rect, color in zip(rectangles, colors):\n    ax.add_patch(plt.Rectangle((rect[0], rect[1]), rect[2], rect[3], color=color))\n\n# Set the title of the plot\nax.set_title('CoreNLP')\n\n# Set the limits of the plot\nax.set_xlim(0, 1)\nax.set_ylim(0, 1)\n\n# Remove the axes\nax.axis('off')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data\nvoters = ['Villager', 'Hunter', 'Witch', 'Seer', 'Wererwolf']\nabilities = ['Abstain', 'Vigilant', 'Hunter', 'Witch', 'Seer', 'Wererwolf']\nabilities_data = [15.7, 28.1, 2.6, 2.1, 0.5, 76.0, 0.9, 4.1, 0.5, 6.2, 8.1, 10.5, 14.5, 28.6, 9.2, 10.5, 15.5, 13.9, 16.3, 50.8, 12.0, 0.9, 7.8, 11.2, 0.6, 17.3, 13.4, 7.0, 15.5, 14.3, 12.0, 16.3, 50.3, 13.4, 10.5, 10.5, 14.3, 16.3]\n\n# Create a color map for the abilities\ncmap = plt.get_cmap('coolwarm')\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Plot the data\nfor i, ability in enumerate(abilities):\n    ax.barh(voters, abilities_data[i*len(voters):(i+1)*len(voters)], height=0.8, left=i*0.8, color=cmap(abilities_data[i*len(voters):(i+1)*len(voters)]/100))\n\n# Set the limits of the x-axis\nax.set_xlim(0, len(abilities)*0.8)\n\n# Set the labels\nax.set_xlabel('Ability')\nax.set_ylabel('Voter')\n\n# Set the title\nax.set_title('Voter Abilities')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Players')\n\n# Set the x-axis label\nax.set_xlabel('Players')\n\n# Set the y-axis label\nax.set_ylabel('Player Rating')\n\n# Set the color map for the bars\ncmap = plt.cm.get_cmap('viridis', 10)\n\n# Set the data for the bars\nbars = ['D. Fox', 'T. Haliburton', 'M. Harkless', 'H. Barnes', 'C. Metu']\nratings = [0.2, 0.4, 0.6, 0.8, 1.0]\n\n# Plot the bars\nfor i, bar in enumerate(bars):\n    ax.bar(bar, ratings[i], color=cmap(i))\n\n# Set the color bar\ncbar = fig.colorbar(ax.images[0])\ncbar.set_label('Player Rating')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6, 5))\n\n# Set the background color of the plot\nax.set_facecolor('white')\n\n# Set the title of the plot\nax.set_title('Live vs Predicted Category')\n\n# Set the x-axis label\nax.set_xlabel('Predicted category')\n\n# Set the y-axis label\nax.set_ylabel('Labeling function similarity')\n\n# Set the x-axis limits\nax.set_xlim(0, 50)\n\n# Set the y-axis limits\nax.set_ylim(0, 100)\n\n# Set the x-axis ticks\nax.set_xticks(np.arange(0, 51, 10))\n\n# Set the y-axis ticks\nax.set_yticks(np.arange(0, 101, 10))\n\n# Set the x-axis tick labels\nax.set_xticklabels(['0', '10', '20', '30', '40', '50'])\n\n# Set the y-axis tick labels\nax.set_yticklabels(['0', '10', '20', '30', '40', '50', '60', '70', '80', '90', '100'])\n\n# Set the x-axis grid lines\nax.grid(axis='x')\n\n# Set the y-axis grid lines\nax.grid(axis='y')\n\n# Set the x-axis grid line style\nax.xaxis.grid(True, linestyle='--', linewidth=0.5)\n\n# Set the y-axis grid line style\nax.yaxis.grid(True, linestyle='--', linewidth=0.5)\n\n# Set the x-axis grid line color\nax.xaxis.grid(color='gray')\n\n# Set the y-axis grid line color\nax.yaxis.grid(color='gray')\n\n# Set the x-axis grid line alpha\nax.xaxis.grid(alpha=0.5)\n\n# Set the y-axis grid line alpha\nax.yaxis.grid(alpha=0.5)\n\n# Set the x-axis grid line zorder\nax.xaxis.grid(zorder=0)\n\n# Set the y-axis grid line zorder\nax.yaxis.grid(zorder=0)\n\n# Set the x-axis grid line visible\nax.xaxis.grid(visible=True)\n\n# Set the y-axis grid line visible\nax.yaxis.grid(visible=True)\n\n# Set the x-axis grid line which\nax.xaxis.grid(which='both')\n\n# Set the y-axis grid line which\nax.yaxis.grid(which='both')\n\n# Set the x-axis grid line axis\nax.xaxis.grid(axis='x')\n\n# Set the y-axis grid line axis\nax.yaxis.grid(axis='y')\n\n# Set the x-axis grid line linestyle\nax.xaxis.grid(linestyle='--')\n\n# Set the y-axis grid line linestyle\nax.yaxis.grid(linestyle='--')\n\n# Set the x-axis grid line linewidth\nax.xaxis.grid(linewidth=0.5)\n\n# Set the y-axis grid line linewidth\nax.yaxis.grid(linewidth=0.5)\n\n# Set the x-axis grid line color\nax.xaxis.grid(color='gray')\n\n# Set the y-axis grid line color\nax.yaxis.grid(color='gray')\n\n# Set the x-axis grid line alpha\nax.xaxis.grid(alpha=0.5)\n\n# Set the y-axis grid line alpha\nax.yaxis.grid(alpha=0.5)\n\n# Set the x-axis grid line zorder\nax.xaxis.grid(zorder=0)\n\n# Set the y-axis grid line zorder\nax.yaxis.grid(zorder=0)\n\n# Set the x-axis grid line visible\nax.xaxis.grid(visible=True)\n\n# Set the y-axis grid line visible\nax.yaxis.grid(visible=True)\n\n# Set the x-axis grid line which\nax.xaxis.grid(which='both')\n\n# Set the y-axis grid line which\nax.yaxis.grid(which='both')\n\n# Set the x-axis grid line axis\nax.xaxis.grid(axis='x')\n\n# Set the y-axis grid line axis\nax.yaxis.grid(axis='y')\n\n# Set the x-axis grid line linestyle\nax.xaxis.grid(linestyle='--')\n\n# Set the y-axis grid line linestyle\nax.yaxis.grid(linestyle='--')\n\n# Set the x-axis grid line linewidth\nax.xaxis.grid(linewidth=0.5)\n\n# Set the y-axis grid line linewidth\nax.yaxis.grid(linewidth=0.5)\n\n# Set the x-axis grid line color\nax.xaxis.grid(color='gray')\n\n# Set the y-axis grid line color\nax.yaxis.grid(color='gray')\n\n# Set the x-axis grid line alpha\nax.xaxis.grid(alpha=0.5)\n\n# Set the y-axis grid line alpha\nax.yaxis.grid(alpha=0.5)\n\n# Set the x-axis grid line zorder\nax.xaxis.grid(zorder=0)\n\n# Set the y-axis grid line zorder\nax.yaxis.grid(zorder=0)\n\n# Set the x-axis grid line visible\nax.xaxis.grid(visible=True)\n\n# Set the y-axis grid line visible\nax.yaxis.grid(visible=True)\n\n# Set the x-axis grid line which\nax.xaxis.grid(which='both')\n\n# Set the y-axis grid line which\nax.yaxis.grid(which='both')\n\n# Set the x-axis grid line axis\nax.xaxis.grid(axis='x')\n\n# Set the y-axis grid line axis\nax.yaxis.grid(axis='y')\n\n# Set the x-axis grid line linestyle\nax.xaxis.grid(linestyle='--')\n\n# Set the y-axis grid line linestyle\nax.yaxis.grid(linestyle='--')\n\n# Set the x-axis grid line linewidth\nax.xaxis.grid(linewidth=0.5)\n\n# Set the y-axis grid line linewidth\nax.yaxis.grid(linewidth=0.5)\n\n# Set the x-axis grid line color\nax.xaxis.grid(color='gray')\n\n# Set the y-axis grid line color\nax.yaxis.grid(color='gray')\n\n# Set the x-axis grid line alpha\nax.xaxis.grid(alpha=0.5)\n\n# Set the y-axis grid line alpha\nax.yaxis.grid(alpha=0.5)\n\n# Set the x-axis grid line zorder\nax.xaxis.grid(zorder=0)\n\n# Set the y-axis grid line zorder\nax.yaxis.grid(zorder=0)\n\n# Set the x-axis grid line visible\nax.xaxis.grid(visible=True)\n\n# Set the y-axis grid line visible\nax.yaxis.grid(visible=True)\n\n# Set the x-axis grid line which\nax.xaxis.grid(which='both')\n\n# Set the y-axis grid line which\nax.yaxis.grid(which='both')\n\n# Set the x-axis grid line axis\nax.xaxis.grid(axis='x')\n\n# Set the y-axis grid line axis\nax.yaxis.grid(axis='y')\n\n# Set the x-axis grid line linestyle\nax.xaxis.grid(linestyle='--')\n\n# Set the y-axis grid line linestyle\nax.yaxis.grid(linestyle='--')\n\n# Set the x-axis grid line linewidth\nax.xaxis.grid(linewidth=0.5)\n\n# Set the y-axis grid line linewidth\nax.yaxis.grid(linewidth=0.5)\n\n# Set the x-axis grid line color\nax.xaxis.grid(color='gray')\n\n# Set the y-axis grid line color\nax.yaxis.grid(color='gray')\n\n# Set the x-axis grid line alpha\nax.xaxis.grid(alpha=0.5)\n\n# Set the y-axis grid line alpha\nax.yaxis.grid(alpha=0.5)\n\n# Set the x-axis grid line zorder\nax.xaxis.grid(zorder=0)\n\n# Set the y-axis grid line zorder\nax.yaxis.grid(zorder=0)\n\n# Set the x-axis grid line visible\nax.xaxis.grid(visible=True)\n\n# Set the y-axis grid line visible\nax.yaxis.grid(visible=True)\n\n# Set the x-axis grid line which\nax.xaxis.grid(which='both')\n\n# Set the y-axis grid line which\nax.yaxis.grid(which='both')\n\n# Set the x-axis grid line axis\nax.xaxis.grid(axis='x')\n\n# Set the y-axis grid line axis\nax.yaxis.grid(axis='y')\n\n# Set the x-axis grid line linestyle\nax.xaxis.grid(linestyle='--')\n\n# Set the y-axis grid line linestyle\nax.yaxis.grid(linestyle='--')\n\n# Set the x-axis grid line linewidth\nax.xaxis.grid(linewidth=0.5)\n\n# Set the y-axis grid line linewidth\nax.yaxis.grid(linewidth=0.5)\n\n# Set the x-axis grid line color\nax.xaxis.grid(color='gray')\n\n# Set the y-axis grid line color\nax.yaxis.grid(color='gray')\n\n# Set the x-axis grid line alpha\nax.xaxis.grid(alpha=0.5)\n\n# Set the y-axis grid line alpha\nax.yaxis.grid(alpha=0.5)\n\n# Set the x-axis grid line zorder\nax.xaxis.grid(zorder=0)\n\n# Set the y-axis grid line zorder\nax.yaxis.grid(zorder=0)\n\n# Set the x-axis grid line visible\nax.xaxis.grid(visible=True)\n\n# Set the y-axis grid line visible\nax.yaxis.grid(visible=True)\n\n# Set the x-axis grid line which\nax.xaxis.grid(which='both')\n\n# Set the y-axis grid line which\nax.yaxis.grid(which='both')\n\n# Set the x-axis grid line axis\nax.xaxis.grid(axis='x')\n\n# Set the y-axis grid line axis\nax.yaxis.grid(axis='y')\n\n# Set the x-axis grid line linestyle\nax.xaxis.grid(linestyle='--')\n\n# Set the y-axis grid line linestyle\nax.yaxis.grid(linestyle='--')\n\n# Set the x-axis grid line linewidth\nax.xaxis.grid(linewidth=0.5)\n\n# Set the y-axis grid line linewidth\nax.yaxis.grid(linewidth=0.5)\n\n# Set the x-axis grid line color\nax.xaxis.grid(color='gray')\n\n# Set the y-axis grid line color\nax.yaxis.grid(color='gray')\n\n# Set the x-axis grid line alpha\nax.xaxis.grid(alpha=0.5)\n\n# Set the y-axis grid line alpha\nax.yaxis.grid(alpha=0.5)\n\n# Set the x-axis grid line zorder\nax.xaxis.grid(zorder=0)\n\n# Set the y-axis grid line zorder\nax.yaxis.grid(zorder=0)\n\n# Set the x-axis grid line visible\nax.xaxis.grid(visible=True)\n\n# Set the y-axis grid line visible\nax.yaxis.grid(visible=True)\n\n# Set the x-axis grid line which\nax.xaxis.grid(which='both')\n\n# Set the y-axis grid line which\nax.yaxis.grid(which='both')\n\n# Set the x-axis grid line axis\nax.xaxis.grid(axis='x')\n\n# Set the y-axis grid line axis\nax.yaxis.grid(axis='y')\n\n# Set the x-axis grid line linestyle\nax.xaxis.grid(linestyle='--')\n\n# Set the y-axis grid line linestyle\nax.yaxis.grid(linestyle='--')\n\n# Set the x-axis grid line linewidth\nax.xaxis.grid(linewidth=0.5)\n\n# Set the y-axis grid line linewidth\nax.yaxis.grid(linewidth=0.5)\n\n# Set the x-axis grid line color\nax.xaxis.grid(color='gray')\n\n# Set the y-axis grid line color\nax.yaxis.grid(color='gray')\n\n# Set the x-axis grid line alpha\nax.xaxis.grid(alpha=0.5)\n\n# Set the y-axis grid line alpha\nax.yaxis.grid(alpha=0.5)\n\n# Set the x-axis grid line zorder\nax.xaxis.grid(zorder=0)\n\n# Set the y-axis grid line zorder\nax.yaxis.grid(zorder=0)\n\n# Set the x-axis grid line visible\nax.xaxis.grid(visible=True)\n\n# Set the y-axis grid line visible\nax.yaxis.grid(visible=True)\n\n# Set the x-axis grid line which\nax.xaxis.grid(which='both')\n\n# Set the y-axis grid line which\nax.yaxis.grid(which='both')\n\n# Set the x-axis grid line axis\nax.xaxis.grid(axis='x')\n\n# Set the y-axis grid line axis\nax.yaxis.grid(axis='y')\n\n# Set the x-axis grid line linestyle\nax.xaxis.grid(linestyle='--')\n\n# Set the y-axis grid line linestyle\nax.yaxis.grid(linestyle='--')\n\n# Set the x-axis grid line linewidth\nax.xaxis.grid(linewidth=0.5)\n\n# Set the y-axis grid line linewidth\nax.yaxis.grid(linewidth=0.5)\n\n# Set the x-axis grid line color\nax.xaxis.grid(color='gray')\n\n# Set the y-axis grid line color\nax.yaxis.grid(color='gray')\n\n# Set the x-axis grid line alpha\nax.xaxis.grid(alpha=0.5)\n\n# Set the y-axis grid line alpha\nax.yaxis.grid(alpha=0.5)\n\n# Set the x-axis grid line zorder\nax.xaxis.grid(zorder=0)\n\n# Set the y-axis grid line zorder\nax.yaxis.grid(zorder=0)\n\n# Set the x-axis grid line visible\nax.xaxis.grid(visible=True)\n\n# Set the y-axis grid line visible\nax.yaxis.grid(visible=True)\n\n# Set the x-axis grid line which\nax.xaxis.grid(which='both')\n\n# Set the y-axis grid line which\nax.yaxis.grid(which='both')\n\n# Set the x-axis grid line axis\nax.xaxis.grid(axis='x')\n\n# Set the y-axis grid line axis\nax.yaxis.grid(axis='y')\n\n# Set the x-axis grid line linestyle\nax.xaxis.grid(linestyle='--')\n\n# Set the y-axis grid line linestyle\nax.yaxis.grid(linestyle='--')\n\n# Set the x-axis grid line linewidth\nax.xaxis.grid(linewidth=0.5)\n\n# Set the y-axis grid line linewidth\nax.yaxis.grid(linewidth=0.5)\n\n# Set the x-axis grid line color\nax.xaxis.grid(color='gray')\n\n# Set the y-axis grid line color\nax.yaxis.grid(color='gray')\n\n# Set the x-axis grid line alpha\nax.xaxis.grid(alpha=0.5)\n\n# Set the y-axis grid line alpha\nax.yaxis.grid(alpha=0.5)\n\n# Set the x-axis grid line zorder\nax.xaxis.grid(zorder=0)\n\n# Set the y-axis grid line zorder\nax.yaxis.grid(zorder=0)\n\n# Set the x-axis grid line visible\nax.xaxis.grid(visible=True)\n\n# Set the y-axis grid line visible\nax.yaxis.grid(visible=True)\n\n# Set the x-axis grid line which\nax.xaxis.grid(which='both')\n\n# Set the y-axis grid line which\nax.yaxis.grid(which='both')\n\n# Set the x-axis grid line axis\nax.xaxis.grid(axis='x')\n\n# Set the y-axis grid line axis\nax.yaxis.grid(axis='y')\n\n# Set the x-axis grid line linestyle\nax.xaxis.grid(linestyle='--')\n\n# Set the y-axis grid line linestyle\nax.yaxis.grid(linestyle='--')\n\n# Set the x-axis grid line linewidth\nax.xaxis.grid(linewidth=0.5)\n\n# Set the y-axis grid line linewidth\nax.yaxis.grid(linewidth=0.5)\n\n# Set the x-axis grid line color\nax.xaxis.grid(color='gray')\n\n# Set the y-axis grid line color\nax.yaxis.grid(color='gray')\n\n# Set the x-axis grid line alpha\nax.xaxis.grid(alpha=0.5)\n\n# Set the y-axis grid line alpha\nax.yaxis.grid(alpha=0.5)\n\n# Set the x-axis grid line zorder\nax.xaxis.grid(zorder=0)\n\n# Set the y-axis grid line zorder\nax.yaxis.grid(zorder=0)\n\n# Set the x-axis grid line visible\nax.xaxis.grid(visible=True)\n\n# Set the y-axis grid line visible\nax.yaxis.grid(visible=True)\n\n# Set the x-axis grid line which\nax.xaxis.grid(which='both')\n\n# Set the y-axis grid line which\nax.yaxis.grid(which='both')\n\n# Set the x-axis grid line axis\nax.xaxis.grid(axis='x')\n\n# Set the y-axis grid line axis\nax.yaxis.grid(axis='y')\n\n# Set the x-axis grid line linestyle\nax.xaxis.grid(linestyle='--')\n\n# Set the y-axis grid line linestyle\nax.yaxis.grid(linestyle='--')\n\n# Set the x-axis grid line linewidth\nax.xaxis.grid(linewidth=0.5)\n\n# Set the y-axis grid line linewidth\nax.yaxis.grid(linewidth=0.5)\n\n# Set the x-axis grid line color\nax.xaxis.grid(color='gray')\n\n# Set the y-axis grid line color\nax.yaxis.grid(color='gray')\n\n# Set the x-axis grid line alpha\nax.xaxis.grid(alpha=0.5)\n\n# Set the y-axis grid line alpha\nax.yaxis.grid(alpha=0.5)\n\n# Set the x-axis grid line zorder\nax.xaxis.grid(zorder=0)\n\n# Set the y-axis grid line zorder\nax.yaxis.grid(zorder=0)\n\n# Set the x-axis grid line visible\nax.xaxis.grid(visible=True)\n\n# Set the y-axis grid line visible\nax.yaxis.grid(visible=True)\n\n# Set the x-axis grid line which\nax.xaxis.grid(which='both')\n\n# Set the y-axis grid line which\nax.yaxis.grid(which='both')\n\n# Set the x-axis grid line axis\nax.xaxis.grid(axis='x')\n\n# Set the y-axis grid line axis\nax.yaxis.grid(axis='y')\n\n# Set the x-axis grid line linestyle\nax.xaxis.grid(linestyle='--')\n\n# Set the y-axis grid line linestyle\nax.yaxis.grid(linestyle='--')\n\n# Set the x-axis grid line linewidth\nax.xaxis.grid(linewidth=0.5)\n\n# Set the y-axis grid line linewidth\nax.yaxis.grid(linewidth=0.5)\n\n# Set the x-axis grid line color\nax.xaxis.grid(color='gray')\n\n# Set the y-axis grid line color\nax.yaxis.grid(color='gray')\n\n# Set the x-axis grid line alpha\nax.xaxis.grid(alpha=0.5)\n\n# Set the y-axis grid line alpha\nax.yaxis.grid(alpha=0.5)\n\n# Set the x-axis grid line zorder\nax.xaxis.grid(zorder=0)\n\n# Set the y-axis grid line zorder\nax.yaxis.grid(zorder=0)\n\n# Set the x-axis grid line visible\nax.xaxis.grid(visible=True)\n\n# Set the y-axis grid line visible\nax.yaxis.grid(visible=True)\n\n# Set the x-axis grid line which\nax.xaxis.grid(which='both')\n\n# Set the y-axis grid line which\nax.yaxis.grid(which='both')\n\n# Set the x-axis grid line axis\nax.xaxis.grid(axis='x')\n\n# Set the y-axis grid line axis\nax.yaxis.grid(axis='y')\n\n# Set the x-axis grid line linestyle\nax.xaxis.grid(linestyle='--')\n\n# Set the y-axis grid line linestyle\nax.yaxis.grid(linestyle='--')\n\n# Set the x-axis grid line linewidth\nax.xaxis.grid(linewidth=0.5)\n\n# Set the y-axis grid line linewidth\nax.yaxis.grid(linewidth=0.5)\n\n# Set the x-axis grid line color\nax.xaxis.grid(color='gray')\n\n# Set the y-axis grid line color\nax.yaxis.grid(color='gray')\n\n# Set the x-axis grid line alpha\nax.xaxis.grid(alpha=0.5)\n\n# Set the y-axis grid line alpha\nax.yaxis.grid(alpha=0.5)\n\n# Set the x-axis grid line"}
{"file": "dataset/ori_500/heatmap_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Set the background color of the plot\nax.set_facecolor('lightblue')\n\n# Set the title of the plot\nax.set_title('LOMLOP')\n\n# Set the x-axis label\nax.set_xlabel('D''2')\n\n# Set the y-axis label\nax.set_ylabel('D''1')\n\n# Set the grid lines\nax.grid(True)\n\n# Set the tick labels\nax.set_xticks([0, 1, 2])\nax.set_yticks([0, 1, 2])\n\n# Set the tick labels\nax.set_xticklabels(['D''2', 'D''1', 'D''0'])\nax.set_yticklabels(['LOH0', 'LOH1', 'LOH2'])\n\n# Set the rectangle colors\nrects = [plt.Rectangle((0, 0), 1, 1, color='gray'),\n        plt.Rectangle((1, 0), 1, 1, color='green'),\n        plt.Rectangle((0, 1), 1, 1, color='cyan'),\n        plt.Rectangle((1, 1), 1, 1, color='brown'),\n        plt.Rectangle((0, 2), 1, 1, color='orange'),\n        plt.Rectangle((1, 2), 1, 1, color='purple')]\n\n# Add the rectangles to the plot\nfor rect in rects:\n    ax.add_patch(rect)\n\n# Set the rectangle labels\nax.text(0.5, 0.5, '10%', ha='center', va='center')\nax.text(1.5, 0.5, '1.0%', ha='center', va='center')\nax.text(0.5, 1.5, '16.0%', ha='center', va='center')\nax.text(1.5, 1.5, '7.0%', ha='center', va='center')\nax.text(0.5, 2.5, '22.0%', ha='center', va='center')\nax.text(1.5, 2.5, '28.0%', ha='center', va='center')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 10.0))\n\n# Set the background color of the plot\nax.set_facecolor('lightblue')\n\n# Set the title of the plot\nax.set_title('Sector Performance', fontsize=20)\n\n# Set the x-axis label\nax.set_xlabel('Sectors', fontsize=15)\n\n# Set the y-axis label\nax.set_ylabel('Performance', fontsize=15)\n\n# Set the tick labels for the x-axis\nax.set_xticks(np.arange(1, 7))\nax.set_xticklabels(['LLVA', 'BakLiva', 'GeminiProVision', 'GPT4V', 'CODI'])\n\n# Set the tick labels for the y-axis\nax.set_yticks(np.arange(-100, 100, 10))\nax.set_yticklabels(['-100', '-90', '-80', '-70', '-60', '-50', '-40', '-30', '-20', '-10', '0', '10', '20', '30', '40', '50', '60', '70', '80', '90', '100'])\n\n# Set the color map for the bars\ncmap = plt.cm.RdYlBu\n\n# Set the bar width\nbar_width = 0.5\n\n# Set the bar colors\ncolors = ['pink', 'orange', 'yellow', 'green', 'cyan', 'blue', 'purple']\n\n# Set the bar positions\nbar_positions = np.arange(1, 7)\n\n# Set the bar heights\nbar_heights = [0.5, 0.4, 0.3, 0.2, 0.1]\n\n# Set the bar labels\nbar_labels = ['Academia', 'Agriculture', 'Construction and Real Estate', 'Corporate', 'Entertainment', 'Finance', 'Government', 'Hospitality', 'Legal Services', 'Life Sciences']\n\n# Set the bar colors\nbar_colors = [cmap(i/len(bar_labels)) for i in range(len(bar_labels))]\n\n# Set the bar edge colors\nbar_edge_colors = ['black' for _ in range(len(bar_labels))]\n\n# Set the bar edge widths\nbar_edge_widths = [0.5 for _ in range(len(bar_labels))]\n\n# Set the bar hatch patterns\nbar_hatches = ['/' for _ in range(len(bar_labels))]\n\n# Set the bar fill styles\nbar_fill_styles = ['solid' for _ in range(len(bar_labels))]\n\n# Set the bar alpha values\nbar_alphas = [0.8 for _ in range(len(bar_labels))]\n\n# Set the bar rotation angles\nbar_rotation_angles = [0 for _ in range(len(bar_labels))]\n\n# Set the bar text positions\nbar_text_positions = ['center' for _ in range(len(bar_labels))]\n\n# Set the bar text vertical alignments\nbar_text_vertical_alignments = ['center' for _ in range(len(bar_labels))]\n\n# Set the bar text horizontal alignments\nbar_text_horizontal_alignments = ['center' for _ in range(len(bar_labels))]\n\n# Set the bar text font sizes\nbar_text_font_sizes = [12 for _ in range(len(bar_labels))]\n\n# Set the bar text font weights\nbar_text_font_weights = ['normal' for _ in range(len(bar_labels))]\n\n# Set the bar text font styles\nbar_text_font_styles = ['normal' for _ in range(len(bar_labels))]\n\n# Set the bar text font families\nbar_text_font_families = ['sans-serif' for _ in range(len(bar_labels))]\n\n# Set the bar text font properties\nbar_text_font_properties = [plt.font_manager.FontProperties() for _ in range(len(bar_labels))]\n\n# Set the bar text rotation angles\nbar_text_rotation_angles = [0 for _ in range(len(bar_labels))]\n\n# Set the bar text vertical alignments\nbar_text_vertical_alignments = ['center' for _ in range(len(bar_labels))]\n\n# Set the bar text horizontal alignments\nbar_text_horizontal_alignments = ['center' for _ in range(len(bar_labels))]\n\n# Set the bar text font sizes\nbar_text_font_sizes = [12 for _ in range(len(bar_labels))]\n\n# Set the bar text font weights\nbar_text_font_weights = ['normal' for _ in range(len(bar_labels))]\n\n# Set the bar text font styles\nbar_text_font_styles = ['normal' for _ in range(len(bar_labels))]\n\n# Set the bar text font families\nbar_text_font_families = ['sans-serif' for _ in range(len(bar_labels))]\n\n# Set the bar text font properties\nbar_text_font_properties = [plt.font_manager.FontProperties() for _ in range(len(bar_labels))]\n\n# Set the bar text rotation angles\nbar_text_rotation_angles = [0 for _ in range(len(bar_labels))]\n\n# Set the bar text vertical alignments\nbar_text_vertical_alignments = ['center' for _ in range(len(bar_labels))]\n\n# Set the bar text horizontal alignments\nbar_text_horizontal_alignments = ['center' for _ in range(len(bar_labels))]\n\n# Set the bar text font sizes\nbar_text_font_sizes = [12 for _ in range(len(bar_labels))]\n\n# Set the bar text font weights\nbar_text_font_weights = ['normal' for _ in range(len(bar_labels))]\n\n# Set the bar text font styles\nbar_text_font_styles = ['normal' for _ in range(len(bar_labels))]\n\n# Set the bar text font families\nbar_text_font_families = ['sans-serif' for _ in range(len(bar_labels))]\n\n# Set the bar text font properties\nbar_text_font_properties = [plt.font_manager.FontProperties() for _ in range(len(bar_labels))]\n\n# Set the bar text rotation angles\nbar_text_rotation_angles = [0 for _ in range(len(bar_labels))]\n\n# Set the bar text vertical alignments\nbar_text_vertical_alignments = ['center' for _ in range(len(bar_labels))]\n\n# Set the bar text horizontal alignments\nbar_text_horizontal_alignments = ['center' for _ in range(len(bar_labels))]\n\n# Set the bar text font sizes\nbar_text_font_sizes = [12 for _ in range(len(bar_labels))]\n\n# Set the bar text font weights\nbar_text_font_weights = ['normal' for _ in range(len(bar_labels))]\n\n# Set the bar text font styles\nbar_text_font_styles = ['normal' for _ in range(len(bar_labels))]\n\n# Set the bar text font families\nbar_text_font_families = ['sans-serif' for _ in range(len(bar_labels))]\n\n# Set the bar text font properties\nbar_text_font_properties = [plt.font_manager.FontProperties() for _ in range(len(bar_labels))]\n\n# Set the bar text rotation angles\nbar_text_rotation_angles = [0 for _ in range(len(bar_labels))]\n\n# Set the bar text vertical alignments\nbar_text_vertical_alignments = ['center' for _ in range(len(bar_labels))]\n\n# Set the bar text horizontal alignments\nbar_text_horizontal_alignments = ['center' for _ in range(len(bar_labels))]\n\n# Set the bar text font sizes\nbar_text_font_sizes = [12 for _ in range(len(bar_labels))]\n\n# Set the bar text font weights\nbar_text_font_weights = ['normal' for _ in range(len(bar_labels))]\n\n# Set the bar text font styles\nbar_text_font_styles = ['normal' for _ in range(len(bar_labels))]\n\n# Set the bar text font families\nbar_text_font_families = ['sans-serif' for _ in range(len(bar_labels))]\n\n# Set the bar text font properties\nbar_text_font_properties = [plt.font_manager.FontProperties() for _ in range(len(bar_labels))]\n\n# Set the bar text rotation angles\nbar_text_rotation_angles = [0 for _ in range(len(bar_labels))]\n\n# Set the bar text vertical alignments\nbar_text_vertical_alignments = ['center' for _ in range(len(bar_labels))]\n\n# Set the bar text horizontal alignments\nbar_text_horizontal_alignments = ['center' for _ in range(len(bar_labels))]\n\n# Set the bar text font sizes\nbar_text_font_sizes = [12 for _ in range(len(bar_labels))]\n\n# Set the bar text font weights\nbar_text_font_weights = ['normal' for _ in range(len(bar_labels))]\n\n# Set the bar text font styles\nbar_text_font_styles = ['normal' for _ in range(len(bar_labels))]\n\n# Set the bar text font families\nbar_text_font_families = ['sans-serif' for _ in range(len(bar_labels))]\n\n# Set the bar text font properties\nbar_text_font_properties = [plt.font_manager.FontProperties() for _ in range(len(bar_labels))]\n\n# Set the bar text rotation angles\nbar_text_rotation_angles = [0 for _ in range(len(bar_labels))]\n\n# Set the bar text vertical alignments\nbar_text_vertical_alignments = ['center' for _ in range(len(bar_labels))]\n\n# Set the bar text horizontal alignments\nbar_text_horizontal_alignments = ['center' for _ in range(len(bar_labels))]\n\n# Set the bar text font sizes\nbar_text_font_sizes = [12 for _ in range(len(bar_labels))]\n\n# Set the bar text font weights\nbar_text_font_weights = ['normal' for _ in range(len(bar_labels))]\n\n# Set the bar text font styles\nbar_text_font_styles = ['normal' for _ in range(len(bar_labels))]\n\n# Set the bar text font families\nbar_text_font_families = ['sans-serif' for _ in range(len(bar_labels))]\n\n# Set the bar text font properties\nbar_text_font_properties = [plt.font_manager.FontProperties() for _ in range(len(bar_labels))]\n\n# Set the bar text rotation angles\nbar_text_rotation_angles = [0 for _ in range(len(bar_labels))]\n\n# Set the bar text vertical alignments\nbar_text_vertical_alignments = ['center' for _ in range(len(bar_labels))]\n\n# Set the bar text horizontal alignments\nbar_text_horizontal_alignments = ['center' for _ in range(len(bar_labels))]\n\n# Set the bar text font sizes\nbar_text_font_sizes = [12 for _ in range(len(bar_labels))]\n\n# Set the bar text font weights\nbar_text_font_weights = ['normal' for _ in range(len(bar_labels))]\n\n# Set the bar text font styles\nbar_text_font_styles = ['normal' for _ in range(len(bar_labels))]\n\n# Set the bar text font families\nbar_text_font_families = ['sans-serif' for _ in range(len(bar_labels))]\n\n# Set the bar text font properties\nbar_text_font_properties = [plt.font_manager.FontProperties() for _ in range(len(bar_labels))]\n\n# Set the bar text rotation angles\nbar_text_rotation_angles = [0 for _ in range(len(bar_labels))]\n\n# Set the bar text vertical alignments\nbar_text_vertical_alignments = ['center' for _ in range(len(bar_labels))]\n\n# Set the bar text horizontal alignments\nbar_text_horizontal_alignments = ['center' for _ in range(len(bar_labels))]\n\n# Set the bar text font sizes\nbar_text_font_sizes = [12 for _ in range(len(bar_labels))]\n\n# Set the bar text font weights\nbar_text_font_weights = ['normal' for _ in range(len(bar_labels))]\n\n# Set the bar text font styles\nbar_text_font_styles = ['normal' for _ in range(len(bar_labels))]\n\n# Set the bar text font families\nbar_text_font_families = ['sans-serif' for _ in range(len(bar_labels))]\n\n# Set the bar text font properties\nbar_text_font_properties = [plt.font_manager.FontProperties() for _ in range(len(bar_labels))]\n\n# Set the bar text rotation angles\nbar_text_rotation_angles = [0 for _ in range(len(bar_labels))]\n\n# Set the bar text vertical alignments\nbar_text_vertical_alignments = ['center' for _ in range(len(bar_labels))]\n\n# Set the bar text horizontal alignments\nbar_text_horizontal_alignments = ['center' for _ in range(len(bar_labels))]\n\n# Set the bar text font sizes\nbar_text_font_sizes = [12 for _ in range(len(bar_labels))]\n\n# Set the bar text font weights\nbar_text_font_weights = ['normal' for _ in range(len(bar_labels))]\n\n# Set the bar text font styles\nbar_text_font_styles = ['normal' for _ in range(len(bar_labels))]\n\n# Set the bar text font families\nbar_text_font_families = ['sans-serif' for _ in range(len(bar_labels))]\n\n# Set the bar text font properties\nbar_text_font_properties = [plt.font_manager.FontProperties() for _ in range(len(bar_labels))]\n\n# Set the bar text rotation angles\nbar_text_rotation_angles = [0 for _ in range(len(bar_labels))]\n\n# Set the bar text vertical alignments\nbar_text_vertical_alignments = ['center' for _ in range(len(bar_labels))]\n\n# Set the bar text horizontal alignments\nbar_text_horizontal_alignments = ['center' for _ in range(len(bar_labels))]\n\n# Set the bar text font sizes\nbar_text_font_sizes = [12 for _ in range(len(bar_labels))]\n\n# Set the bar text font weights\nbar_text_font_weights = ['normal' for _ in range(len(bar_labels))]\n\n# Set the bar text font styles\nbar_text_font_styles = ['normal' for _ in range(len(bar_labels))]\n\n# Set the bar text font families\nbar_text_font_families = ['sans-serif' for _ in range(len(bar_labels))]\n\n# Set the bar text font properties\nbar_text_font_properties = [plt.font_manager.FontProperties() for _ in range(len(bar_labels))]\n\n# Set the bar text rotation angles\nbar_text_rotation_angles = [0 for _ in range(len(bar_labels))]\n\n# Set the bar text vertical alignments\nbar_text_vertical_alignments = ['center' for _ in range(len(bar_labels))]\n\n# Set the bar text horizontal alignments\nbar_text_horizontal_alignments = ['center' for _ in range(len(bar_labels))]\n\n# Set the bar text font sizes\nbar_text_font_sizes = [12 for _ in range(len(bar_labels))]\n\n# Set the bar text font weights\nbar_text_font_weights = ['normal' for _ in range(len(bar_labels))]\n\n# Set the bar text font styles\nbar_text_font_styles = ['normal' for _ in range(len(bar_labels))]\n\n# Set the bar text font families\nbar_text_font_families = ['sans-serif' for _ in range(len(bar_labels))]\n\n# Set the bar text font properties\nbar_text_font_properties = [plt.font_manager.FontProperties() for _ in range(len(bar_labels))]\n\n# Set the bar text rotation angles\nbar_text_rotation_angles = [0 for _ in range(len(bar_labels))]\n\n# Set the bar text vertical alignments\nbar_text_vertical_alignments = ['center' for _ in range(len(bar_labels))]\n\n# Set the bar text horizontal alignments\nbar_text_horizontal_alignments = ['center' for _ in range(len(bar_labels))]\n\n# Set the bar text font sizes\nbar_text_font_sizes = [12 for _ in range(len(bar_labels))]\n\n# Set the bar text font weights\nbar_text_font_weights = ['normal' for _ in range(len(bar_labels))]\n\n# Set the bar text font styles\nbar_text_font_styles = ['normal' for _ in range(len(bar_labels))]\n\n# Set the bar text font families\nbar_text_font_families = ['sans-serif' for _ in range(len(bar_labels))]\n\n# Set the bar text font properties\nbar_text_font_properties = [plt.font_manager.FontProperties() for _ in range(len(bar_labels))]\n\n# Set the bar text rotation angles\nbar_text_rotation_angles = [0 for _ in range(len(bar_labels))]\n\n# Set the bar text vertical alignments\nbar_text_vertical_alignments = ['center' for _ in range(len(bar_labels))]\n\n# Set the bar text horizontal alignments\nbar_text_horizontal_alignments = ['center' for _ in range(len(bar_labels))]\n\n# Set the bar text font sizes\nbar_text_font_sizes = [12 for _ in range(len(bar_labels))]\n\n# Set the bar text font weights\nbar_text_font_weights = ['normal' for _ in range(len(bar_labels))]\n\n# Set the bar text font styles\nbar_text_font_styles = ['normal' for _ in range(len(bar_labels))]\n\n# Set the bar text font families\nbar_text_font_families = ['sans-serif' for _ in range(len(bar_labels))]\n\n# Set the bar text font properties\nbar_text_font_properties = [plt.font_manager.FontProperties() for _ in range(len(bar_labels))]\n\n# Set the bar text rotation angles\nbar_text_rotation_angles = [0 for _ in range(len(bar_labels))]\n\n# Set the bar text vertical alignments\nbar_text_vertical_alignments = ['center' for _ in range(len(bar_labels))]\n\n# Set the bar text horizontal alignments\nbar_text_horizontal_alignments = ['center' for _ in range(len(bar_labels))]\n\n# Set the bar text font sizes\nbar_text_font_sizes = [12 for _ in range(len(bar_labels))]\n\n# Set the bar text font weights\nbar_text_font_weights = ['normal' for _ in range(len(bar_labels))]\n\n# Set the bar text font styles\nbar_text_font_styles = ['normal' for _ in range(len(bar_labels))]\n\n# Set the bar text font families\nbar_text_font_families = ['sans-serif' for _ in range(len(bar_labels))]\n\n# Set the bar text font properties\nbar_text_font_properties = [plt.font_manager.FontProperties() for _ in range(len(bar_labels))]\n\n# Set the bar text rotation angles\nbar_text_rotation_angles = [0 for _ in range(len(bar_labels))]\n\n# Set the bar text vertical alignments\nbar_text_vertical_alignments = ['center' for _ in range(len(bar_labels))]\n\n# Set the bar text horizontal alignments\nbar_text_horizontal_alignments = ['center' for _ in range(len(bar_labels))]\n\n# Set the bar text font sizes\nbar_text_font_sizes = [12 for _ in range(len(bar_labels))]\n\n# Set the bar text font weights\nbar_text_font_weights = ['normal' for _ in range(len(bar_labels))]\n\n# Set the bar text font styles\nbar_text_font_styles = ['normal' for _ in range(len(bar_labels))]\n\n# Set the bar text font families\nbar_text_font_families = ['sans-serif' for _ in range(len(bar_labels))]\n\n# Set the bar text font properties\nbar_text_font_properties = [plt.font_manager.FontProperties() for _ in range(len(bar_labels))]\n\n# Set the bar text rotation angles\nbar_text_rotation_angles = [0 for _ in range(len(bar_labels))]\n\n# Set the bar text vertical alignments\nbar_text_vertical_alignments = ['center' for _ in range(len(bar_labels))]\n\n# Set the bar text horizontal alignments\nbar_text_horizontal_alignments = ['center' for _ in range(len(bar_labels))]\n\n# Set the bar text font sizes\nbar_text_font_sizes = [12 for _ in range(len(bar_labels))]\n\n# Set the bar text font weights\nbar_text_font_weights = ['normal' for _ in range(len(bar_labels))]\n\n# Set the bar text font styles\nbar_text_font_styles = ['normal' for _ in range(len(bar_labels))]\n\n# Set the bar text font families\nbar_text_font_families = ['sans"}
{"file": "dataset/ori_500/heatmap_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 8.0))\n\n# Set the background color of the plot\nax.set_facecolor('purple')\n\n# Set the title of the plot\nax.set_title('Perplexity vs. Layer')\n\n# Set the x-axis label\nax.set_xlabel('To layer')\n\n# Set the y-axis label\nax.set_ylabel('Perplexity')\n\n# Set the tick labels for the x-axis\nax.set_xticks([1, 3, 5, 9, 12])\nax.set_xticklabels(['1', '3', '5', '9', '12'])\n\n# Set the tick labels for the y-axis\nax.set_yticks([1, 3, 5, 7, 9, 11, 13, 15])\nax.set_yticklabels(['1', '3', '5', '7', '9', '11', '13', '15'])\n\n# Set the colorbar\ncbar = fig.colorbar(ax.imshow([[1, 2], [3, 4]], cmap='hot'), ax=ax)\ncbar.set_label('Increase in perpexity')\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0, 0), 1, 1, color='black')\nax.add_patch(rect)\n\n# Add a text box to the plot\ntext_box = ax.text(0.5, 0.5, 'mbert\u2192sat Perplexity=7.59', ha='center', va='center', color='white', fontsize=12, bbox=dict(facecolor='purple', alpha=0.5))\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_16.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the heatmap\ndata = [\n    [659, 777, 247, 153, 953],\n    [807, 187, 643, 373, 819],\n    [109, 172, 759, 588, 327],\n    [459, 274, 637, 435, 660],\n    [784, 637, 523, 856, 405],\n    [935, 945, 739, 688, 243],\n    [729, 651, 797, 488, 891],\n    [863, 700, 644, 650, 760],\n    [292, 949, 365, 142, 473]\n]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(4.0, 8.0))\n\n# Create a heatmap\nheatmap = ax.imshow(data, cmap='YlOrRd')\n\n# Add colorbar\ncbar = fig.colorbar(heatmap)\n\n# Set labels\nax.set_xticks(range(len(data[0])))\nax.set_yticks(range(len(data)))\nax.set_xticklabels(['Product A Q1', 'Product A Q2', 'Product A Q3', 'Product B Q1', 'Product B Q2', 'Product B Q3'])\nax.set_yticklabels(['1', '2', '3', '4', '5', '6', '7', '8', '9'])\n\n# Set title\nax.set_title('Sales Performance Heatmap')\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_17.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 3))\n\n# Set the background color of the plot\nax.set_facecolor('white')\n\n# Create a color bar\ncbar = fig.colorbar(ax.imshow([[0.2, 0.4], [0.6, 0.8]], cmap='hot'), ax=ax)\n\n# Set the title of the color bar\ncbar.set_label('Values')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_18.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfig, ax = plt.subplots(figsize=(7.0, 6.0))\n\n# Create a color map for the rectangles\ncmap = plt.cm.get_cmap('YlOrBr')\n\n# Create a grid of rectangles\nrects = []\nfor i in range(3):\n    for j in range(3):\n        rect = plt.Rectangle((i*10, j*10), 10, 10, color=cmap(np.random.rand()))\n        rects.append(rect)\n        ax.add_patch(rect)\n\n# Set the limits of the plot\nax.set_xlim(0, 30)\nax.set_ylim(0, 30)\n\n# Set the title of the plot\nax.set_title('Weather')\n\n# Set the x and y labels of the plot\nax.set_xlabel('Year')\nax.set_ylabel('Temperature')\n\n# Set the x and y ticks of the plot\nax.set_xticks([0, 10, 20, 30])\nax.set_yticks([0, 10, 20, 30])\n\n# Set the x and y tick labels of the plot\nax.set_xticklabels(['96', '192', '336', '720'])\nax.set_yticklabels(['96', '192', '336', '720'])\n\n# Set the color bar\nsm = plt.cm.ScalarMappable(cmap=cmap, norm=plt.Normalize(vmin=0, vmax=1))\nsm._A = []\ncbar = fig.colorbar(sm)\n\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_19.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(20, 8))\n\n# Define the data\ndata = {\n    'Villager': [15.7, 28.1, 26, 14.5, 28.6, 10.5],\n    'Hunter': [76.0, 2.1, 0.5, 4.1, 8.1, 9.2],\n    'Witch': [50.8, 12.3, 0.9, 6.2, 15.5, 13.9],\n    'Seer': [49.2, 12.2, 0.6, 7.8, 17.3, 13.9],\n    'Wererewolf': [50.3, 12.0, 0.9, 7.0, 19.5, 16.3]\n}\n\n# Plot the data\nfor i, (role, percentages) in enumerate(data.items()):\n    ax.bar(range(len(percentages)), percentages, color=plt.cm.viridis(i / len(data)), label=role)\n\n# Set the title and labels\nax.set_title('Role voting in the Werewolf game')\nax.set_xlabel('Player')\nax.set_ylabel('Percentage')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(9.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Question Type: All three types of questions')\n\n# Set the x-axis label\nax.set_xlabel('Response Action Category')\n\n# Set the y-axis label\nax.set_ylabel('Score')\n\n# Define the data for the bar chart\ncategories = ['Qwen', 'ChatGLM3', 'Baichuan2', 'LLaMA-2', 'Xverse']\nscores = [169, 115, 219, 67, 177]\ncolors = ['blue', 'cyan', 'green', 'orange', 'purple']\n\n# Create a bar chart with the specified colors\nbars = ax.bar(categories, scores, color=colors)\n\n# Add labels to each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval, round(yval), ha='center', va='bottom')\n\n# Set the y-axis limits\nax.set_ylim(0, 1200)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_20.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\ncategories = ['angry', 'sad', 'disgust', 'contempt', 'fear', 'neutral', 'surprise', 'happy']\noriginal_values = [0.10, 0.00, 0.30, 0.00, 0.00, 0.50, 0.00, 0.10]\nadjusted_values = [0.12, 0.00, 0.44, 0.00, 0.00, 0.44, 0.00, 0.00]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 8))\n\n# Plot the bars for the original values\nax.bar(categories, original_values, color='blue')\n\n# Plot the bars for the adjusted values\nax.bar(categories, adjusted_values, color='red')\n\n# Set the title\nax.set_title('Original vs Adjusted')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_21.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\nvoters = ['Villager', 'Hunter', 'Witch', 'Seer', 'Wererwolf']\nabilities = ['Villager', 'Hunter', 'Witch', 'Seer', 'Wererwolf']\nabilities_values = [15.7, 28.1, 2.6, 0.5, 14.5, 10.5, 76.0, 2.1, 0.9, 28.6, 9.2, 50.8, 12.3, 0.6, 6.2, 8.1, 15.5, 14.3, 50.2, 11.2, 0.9, 7.8, 13.4, 17.3, 16.3]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Plot the heatmap\nheatmap = ax.imshow(abilities_values.reshape((5, 5)), cmap='Blues')\n\n# Set the tick labels\nax.set_xticks(np.arange(len(voters)))\nax.set_yticks(np.arange(len(abilities)))\nax.set_xticklabels(voters)\nax.set_yticklabels(abilities)\n\n# Rotate the tick labels and set their alignment.\nplt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\", rotation_mode=\"anchor\")\n\n# Add a colorbar\ncbar = ax.figure.colorbar(heatmap, ax=ax)\ncbar.ax.set_ylabel('Percentage', rotation=-90, va=\"bottom\")\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_22.pdf", "response": "```python\n\"\"\"\n=====================================\nRanking of LLaMA and GPT Models\n=====================================\n\nThis example demonstrates how to create a side-by-side bar chart using Matplotlib.\n\"\"\"\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\nmodels = ['LLaMA', 'GPT']\nbaseline = [17, 17]\nreversed_order = [24, 24]\nreversed_ids = [23, 23]\n\n# Create a figure and a set of subplots\nfig, ax = plt.subplots(figsize=(6.0, 3.0))\n\n# Set the width of the bars\nbar_width = 0.35\n\n# Set the positions of the bars on the x-axis\nr1 = np.arange(len(models))\nr2 = [x + bar_width for x in r1]\n\n# Create bars\nrects1 = ax.bar(r1, baseline, color='orange', width=bar_width, edgecolor='grey', label='Baseline')\nrects2 = ax.bar(r2, reversed_order, color='blue', width=bar_width, edgecolor='grey', label='Reversed Order')\n\n# Add some text for labels, title, and custom x-axis tick labels, etc.\nax.set_xlabel('Models')\nax.set_ylabel('Rank')\nax.set_title('Ranking of LLaMA and GPT Models')\nax.set_xticks([r + bar_width / 2 for r in range(len(models))])\nax.set_xticklabels(models)\nax.legend()\n\n# Function to add value labels on top of the bars\ndef autolabel(rects):\n    for rect in rects:\n        height = rect.get_height()\n        ax.annotate('{}'.format(height),\n                    xy=(rect.get_x() + rect.get_width() / 2, height),\n                    xytext=(0, 3),  # 3 points vertical offset\n                    textcoords=\"offset points\",\n                    ha='center', va='bottom')\n\nautolabel(rects1)\nautolabel(rects2)\n\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_23.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Set the background color of the plot\nax.set_facecolor('white')\n\n# Define the data for the bars\nx = np.arange(4)\ny = [0.10, 0.08, 0.30, 0.60]\nwidth = 0.25\n\n# Create the bar chart\nrects = ax.bar(x, y, width, label='Data', color='blue')\n\n# Add some text for labels, title, and custom x-axis tick labels, etc.\nax.set_xlabel('X Axis')\nax.set_ylabel('Y Axis')\nax.set_title('Bar Chart with Colored Bars')\nax.set_xticks(x)\nax.set_xticklabels(['A', 'B', 'C', 'D'])\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_24.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Create a color map for the rectangles\ncmap = plt.cm.get_cmap('Blues')\n\n# Create a grid of rectangles\nfor i in range(10):\n    for j in range(10):\n        ax.add_patch(plt.Rectangle((i, j), 1, 1, color=cmap(np.random.rand())))\n\n# Set the limits of the plot\nax.set_xlim(0, 10)\nax.set_ylim(0, 10)\n\n# Set the title of the plot\nax.set_title('Harvest [t/year]')\n\n# Set the x and y labels of the plot\nax.set_xlabel('Time')\nax.set_ylabel('Space')\n\n# Set the color bar\nsm = plt.cm.ScalarMappable(cmap=cmap)\nsm.set_array([])\ncbar = fig.colorbar(sm)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_25.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the background color of the plot\nax.set_facecolor('lightgrey')\n\n# Set the title of the plot\nax.set_title('Harvest and Sales Data', fontsize=14)\n\n# Set the x-axis label\nax.set_xlabel('Week', fontsize=12)\n\n# Set the y-axis label\nax.set_ylabel('Sales', fontsize=12)\n\n# Set the tick labels for the x-axis\nax.set_xticks([0, 1, 2, 3, 4, 5, 6])\nax.set_xticklabels(['Cycle 1', 'Cycle 2', 'Cycle 3', 'Cycle 4', 'Cycle 5', 'Cycle 6', 'Book 7'])\n\n# Set the tick labels for the y-axis\nax.set_yticks([0, 10, 20, 30, 40, 50, 60, 70, 80])\nax.set_yticklabels(['0', '10', '20', '30', '40', '50', '60', '70', '80'])\n\n# Set the color map for the bars\ncmap = plt.cm.get_cmap('viridis', 9)\n\n# Set the bar width\nbar_width = 0.8\n\n# Set the bar positions\nbar_positions = np.arange(7)\n\n# Set the bar colors\nbar_colors = ['green', 'yellow', 'orange', 'red', 'purple', 'pink', 'brown']\n\n# Set the bar labels\nbar_labels = ['Cucumber', 'Tomato', 'Lettuce', 'Asparagus', 'Potato', 'Barley', 'Book 7']\n\n# Set the bar heights\nbar_heights = [6, 5, 4, 3, 2, 1, 0]\n\n# Set the bar edge colors\nbar_edge_colors = ['black'] * 7\n\n# Set the bar hatch patterns\nbar_hatches = [''] * 7\n\n# Set the bar alpha values\nbar_alphas = [1] * 7\n\n# Set the bar linewidths\nbar_linewidths = [1] * 7\n\n# Set the bar cap styles\nbar_cap_styles = ['butt'] * 7\n\n# Set the bar join styles\nbar_join_styles = ['miter'] * 7\n\n# Set the bar edgecap styles\nbar_edgecap_styles = ['butt'] * 7\n\n# Set the bar edgejoin styles\nbar_edgejoin_styles = ['miter'] * 7\n\n# Set the bar edgecolor\nbar_edgecolor = 'black'\n\n# Set the bar edgealpha\nbar_edgealpha = 1\n\n# Set the bar edgewidth\nbar_edgewidth = 1\n\n# Set the bar edgecapstyle\nbar_edgecapstyle = 'butt'\n\n# Set the bar edgejoinstyle\nbar_edgejoinstyle = 'miter'\n\n# Set the bar edgecolor\nbar_edgecolor = 'black'\n\n# Set the bar edgealpha\nbar_edgealpha = 1\n\n# Set the bar edgewidth\nbar_edgewidth = 1\n\n# Set the bar edgecapstyle\nbar_edgecapstyle = 'butt'\n\n# Set the bar edgejoinstyle\nbar_edgejoinstyle = 'miter'\n\n# Set the bar edgecolor\nbar_edgecolor = 'black'\n\n# Set the bar edgealpha\nbar_edgealpha = 1\n\n# Set the bar edgewidth\nbar_edgewidth = 1\n\n# Set the bar edgecapstyle\nbar_edgecapstyle = 'butt'\n\n# Set the bar edgejoinstyle\nbar_edgejoinstyle = 'miter'\n\n# Set the bar edgecolor\nbar_edgecolor = 'black'\n\n# Set the bar edgealpha\nbar_edgealpha = 1\n\n# Set the bar edgewidth\nbar_edgewidth = 1\n\n# Set the bar edgecapstyle\nbar_edgecapstyle = 'butt'\n\n# Set the bar edgejoinstyle\nbar_edgejoinstyle = 'miter'\n\n# Set the bar edgecolor\nbar_edgecolor = 'black'\n\n# Set the bar edgealpha\nbar_edgealpha = 1\n\n# Set the bar edgewidth\nbar_edgewidth = 1\n\n# Set the bar edgecapstyle\nbar_edgecapstyle = 'butt'\n\n# Set the bar edgejoinstyle\nbar_edgejoinstyle = 'miter'\n\n# Set the bar edgecolor\nbar_edgecolor = 'black'\n\n# Set the bar edgealpha\nbar_edgealpha = 1\n\n# Set the bar edgewidth\nbar_edgewidth = 1\n\n# Set the bar edgecapstyle\nbar_edgecapstyle = 'butt'\n\n# Set the bar edgejoinstyle\nbar_edgejoinstyle = 'miter'\n\n# Set the bar edgecolor\nbar_edgecolor = 'black'\n\n# Set the bar edgealpha\nbar_edgealpha = 1\n\n# Set the bar edgewidth\nbar_edgewidth = 1\n\n# Set the bar edgecapstyle\nbar_edgecapstyle = 'butt'\n\n# Set the bar edgejoinstyle\nbar_edgejoinstyle = 'miter'\n\n# Set the bar edgecolor\nbar_edgecolor = 'black'\n\n# Set the bar edgealpha\nbar_edgealpha = 1\n\n# Set the bar edgewidth\nbar_edgewidth = 1\n\n# Set the bar edgecapstyle\nbar_edgecapstyle = 'butt'\n\n# Set the bar edgejoinstyle\nbar_edgejoinstyle = 'miter'\n\n# Set the bar edgecolor\nbar_edgecolor = 'black'\n\n# Set the bar edgealpha\nbar_edgealpha = 1\n\n# Set the bar edgewidth\nbar_edgewidth = 1\n\n# Set the bar edgecapstyle\nbar_edgecapstyle = 'butt'\n\n# Set the bar edgejoinstyle\nbar_edgejoinstyle = 'miter'\n\n# Set the bar edgecolor\nbar_edgecolor = 'black'\n\n# Set the bar edgealpha\nbar_edgealpha = 1\n\n# Set the bar edgewidth\nbar_edgewidth = 1\n\n# Set the bar edgecapstyle\nbar_edgecapstyle = 'butt'\n\n# Set the bar edgejoinstyle\nbar_edgejoinstyle = 'miter'\n\n# Set the bar edgecolor\nbar_edgecolor = 'black'\n\n# Set the bar edgealpha\nbar_edgealpha = 1\n\n# Set the bar edgewidth\nbar_edgewidth = 1\n\n# Set the bar edgecapstyle\nbar_edgecapstyle = 'butt'\n\n# Set the bar edgejoinstyle\nbar_edgejoinstyle = 'miter'\n\n# Set the bar edgecolor\nbar_edgecolor = 'black'\n\n# Set the bar edgealpha\nbar_edgealpha = 1\n\n# Set the bar edgewidth\nbar_edgewidth = 1\n\n# Set the bar edgecapstyle\nbar_edgecapstyle = 'butt'\n\n# Set the bar edgejoinstyle\nbar_edgejoinstyle = 'miter'\n\n# Set the bar edgecolor\nbar_edgecolor = 'black'\n\n# Set the bar edgealpha\nbar_edgealpha = 1\n\n# Set the bar edgewidth\nbar_edgewidth = 1\n\n# Set the bar edgecapstyle\nbar_edgecapstyle = 'butt'\n\n# Set the bar edgejoinstyle\nbar_edgejoinstyle = 'miter'\n\n# Set the bar edgecolor\nbar_edgecolor = 'black'\n\n# Set the bar edgealpha\nbar_edgealpha = 1\n\n# Set the bar edgewidth\nbar_edgewidth = 1\n\n# Set the bar edgecapstyle\nbar_edgecapstyle = 'butt'\n\n# Set the bar edgejoinstyle\nbar_edgejoinstyle = 'miter'\n\n# Set the bar edgecolor\nbar_edgecolor = 'black'\n\n# Set the bar edgealpha\nbar_edgealpha = 1\n\n# Set the bar edgewidth\nbar_edgewidth = 1\n\n# Set the bar edgecapstyle\nbar_edgecapstyle = 'butt'\n\n# Set the bar edgejoinstyle\nbar_edgejoinstyle = 'miter'\n\n# Set the bar edgecolor\nbar_edgecolor = 'black'\n\n# Set the bar edgealpha\nbar_edgealpha = 1\n\n# Set the bar edgewidth\nbar_edgewidth = 1\n\n# Set the bar edgecapstyle\nbar_edgecapstyle = 'butt'\n\n# Set the bar edgejoinstyle\nbar_edgejoinstyle = 'miter'\n\n# Set the bar edgecolor\nbar_edgecolor = 'black'\n\n# Set the bar edgealpha\nbar_edgealpha = 1\n\n# Set the bar edgewidth\nbar_edgewidth = 1\n\n# Set the bar edgecapstyle\nbar_edgecapstyle = 'butt'\n\n# Set the bar edgejoinstyle\nbar_edgejoinstyle = 'miter'\n\n# Set the bar edgecolor\nbar_edgecolor = 'black'\n\n# Set the bar edgealpha\nbar_edgealpha = 1\n\n# Set the bar edgewidth\nbar_edgewidth = 1\n\n# Set the bar edgecapstyle\nbar_edgecapstyle = 'butt'\n\n# Set the bar edgejoinstyle\nbar_edgejoinstyle = 'miter'\n\n# Set the bar edgecolor\nbar_edgecolor = 'black'\n\n# Set the bar edgealpha\nbar_edgealpha = 1\n\n# Set the bar edgewidth\nbar_edgewidth = 1\n\n# Set the bar edgecapstyle\nbar_edgecapstyle = 'butt'\n\n# Set the bar edgejoinstyle\nbar_edgejoinstyle = 'miter'\n\n# Set the bar edgecolor\nbar_edgecolor = 'black'\n\n# Set the bar edgealpha\nbar_edgealpha = 1\n\n# Set the bar edgewidth\nbar_edgewidth = 1\n\n# Set the bar edgecapstyle\nbar_edgecapstyle = 'butt'\n\n# Set the bar edgejoinstyle\nbar_edgejoinstyle = 'miter'\n\n# Set the bar edgecolor\nbar_edgecolor = 'black'\n\n# Set the bar edgealpha\nbar_edgealpha = 1\n\n# Set the bar edgewidth\nbar_edgewidth = 1\n\n# Set the bar edgecapstyle\nbar_edgecapstyle = 'butt'\n\n# Set the bar edgejoinstyle\nbar_edgejoinstyle = 'miter'\n\n# Set the bar edgecolor\nbar_edgecolor = 'black'\n\n# Set the bar edgealpha\nbar_edgealpha = 1\n\n# Set the bar edgewidth\nbar_edgewidth = 1\n\n# Set the bar edgecapstyle\nbar_edgecapstyle = 'butt'\n\n# Set the bar edgejoinstyle\nbar_edgejoinstyle = 'miter'\n\n# Set the bar edgecolor\nbar_edgecolor = 'black'\n\n# Set the bar edgealpha\nbar_edgealpha = 1\n\n# Set the bar edgewidth\nbar_edgewidth = 1\n\n# Set the bar edgecapstyle\nbar_edgecapstyle = 'butt'\n\n# Set the bar edgejoinstyle\nbar_edgejoinstyle = 'miter'\n\n# Set the bar edgecolor\nbar_edgecolor = 'black'\n\n# Set the bar edgealpha\nbar_edgealpha = 1\n\n# Set the bar edgewidth\nbar_edgewidth = 1\n\n# Set the bar edgecapstyle\nbar_edgecapstyle = 'butt'\n\n# Set the bar edgejoinstyle\nbar_edgejoinstyle = 'miter'\n\n# Set the bar edgecolor\nbar_edgecolor = 'black'\n\n# Set the bar edgealpha\nbar_edgealpha = 1\n\n# Set the bar edgewidth\nbar_edgewidth = 1\n\n# Set the bar edgecapstyle\nbar_edgecapstyle = 'butt'\n\n# Set the bar edgejoinstyle\nbar_edgejoinstyle = 'miter'\n\n# Set the bar edgecolor\nbar_edgecolor = 'black'\n\n# Set the bar edgealpha\nbar_edgealpha = 1\n\n# Set the bar edgewidth\nbar_edgewidth = 1\n\n# Set the bar edgecapstyle\nbar_edgecapstyle = 'butt'\n\n# Set the bar edgejoinstyle\nbar_edgejoinstyle = 'miter'\n\n# Set the bar edgecolor\nbar_edgecolor = 'black'\n\n# Set the bar edgealpha\nbar_edgealpha = 1\n\n# Set the bar edgewidth\nbar_edgewidth = 1\n\n# Set the bar edgecapstyle\nbar_edgecapstyle = 'butt'\n\n# Set the bar edgejoinstyle\nbar_edgejoinstyle = 'miter'\n\n# Set the bar edgecolor\nbar_edgecolor = 'black'\n\n# Set the bar edgealpha\nbar_edgealpha = 1\n\n# Set the bar edgewidth\nbar_edgewidth = 1\n\n# Set the bar edgecapstyle\nbar_edgecapstyle = 'butt'\n\n# Set the bar edgejoinstyle\nbar_edgejoinstyle = 'miter'\n\n# Set the bar edgecolor\nbar_edgecolor = 'black'\n\n# Set the bar edgealpha\nbar_edgealpha = 1\n\n# Set the bar edgewidth\nbar_edgewidth = 1\n\n# Set the bar edgecapstyle\nbar_edgecapstyle = 'butt'\n\n# Set the bar edgejoinstyle\nbar_edgejoinstyle = 'miter'\n\n# Set the bar edgecolor\nbar_edgecolor = 'black'\n\n# Set the bar edgealpha\nbar_edgealpha = 1\n\n# Set the bar edgewidth\nbar_edgewidth = 1\n\n# Set the bar edgecapstyle\nbar_edgecapstyle = 'butt'\n\n# Set the bar edgejoinstyle\nbar_edgejoinstyle = 'miter'\n\n# Set the bar edgecolor\nbar_edgecolor = 'black'\n\n# Set the bar edgealpha\nbar_edgealpha = 1\n\n# Set the bar edgewidth\nbar_edgewidth = 1\n\n# Set the bar edgecapstyle\nbar_edgecapstyle = 'butt'\n\n# Set the bar edgejoinstyle\nbar_edgejoinstyle = 'miter'\n\n# Set the bar edgecolor\nbar_edgecolor = 'black'\n\n# Set the bar edgealpha\nbar_edgealpha = 1\n\n# Set the bar edgewidth\nbar_edgewidth = 1\n\n# Set the bar edgecapstyle\nbar_edgecapstyle = 'butt'\n\n# Set the bar edgejoinstyle\nbar_edgejoinstyle = 'miter'\n\n# Set the bar edgecolor\nbar_edgecolor = 'black'\n\n# Set the bar edgealpha\nbar_edgealpha = 1\n\n# Set the bar edgewidth\nbar_edgewidth = 1\n\n# Set the bar edgecapstyle\nbar_edgecapstyle = 'butt'\n\n# Set the bar edgejoinstyle\nbar_edgejoinstyle = 'miter'\n\n# Set the bar edgecolor\nbar_edgecolor = 'black'\n\n# Set the bar edgealpha\nbar_edgealpha = 1\n\n# Set the bar edgewidth\nbar_edgewidth = 1\n\n# Set the bar edgecapstyle\nbar_edgecapstyle = 'butt'\n\n# Set the bar edgejoinstyle\nbar_edgejoinstyle = 'miter'\n\n# Set the bar edgecolor\nbar_edgecolor = 'black'\n\n# Set the bar edgealpha\nbar_edgealpha = 1\n\n# Set the bar edgewidth\nbar_edgewidth = 1\n\n# Set the bar edgecapstyle\nbar_edgecapstyle = 'butt'\n\n# Set the bar edgejoinstyle\nbar_edgejoinstyle = 'miter'\n\n# Set the bar edgecolor\nbar_edgecolor = 'black'\n\n# Set the bar edgealpha\nbar_edgealpha = 1\n\n# Set the bar edgewidth\nbar_edgewidth = 1\n\n# Set the bar edgecapstyle\nbar_edgecapstyle = 'butt'\n\n# Set the bar edgejoinstyle\nbar_edgejoinstyle = 'miter'\n\n# Set the bar edgecolor\nbar_edgecolor = 'black'\n\n# Set the bar edgealpha\nbar_edgealpha = 1\n\n# Set the bar edgewidth\nbar_edgewidth = 1\n\n# Set the bar edgecapstyle\nbar_edgecapstyle = 'butt'\n\n# Set the bar edgejoinstyle\nbar_edgejoinstyle = 'miter'\n\n# Set the bar edgecolor\nbar_edgecolor = 'black'\n\n# Set the bar edgealpha\nbar_edgealpha = 1\n\n# Set the bar edgewidth\nbar_edgewidth = 1\n\n# Set the bar edgecapstyle\nbar_edgecapstyle = 'butt'\n\n# Set the bar edgejoinstyle\nbar_edgejoinstyle = 'miter'\n\n# Set the bar edgecolor\nbar_edgecolor = 'black'\n\n# Set the bar edgealpha\nbar_edgealpha = 1\n\n# Set the bar edgewidth\nbar_edgewidth = 1\n\n# Set the bar edgecapstyle\nbar_edgecapstyle = 'butt'\n\n# Set the bar edgejoinstyle\nbar_edgejoinstyle = 'miter'\n\n# Set the bar edgecolor\nbar_edgecolor = 'black'\n\n# Set the bar edgealpha\nbar_edgealpha = 1\n\n# Set the bar edgewidth\nbar_edgewidth = 1\n\n# Set the bar edgecapstyle\nbar_edgecapstyle = 'butt'\n\n# Set the bar edgejoinstyle\nbar_edgejoinstyle = 'miter'\n\n# Set the bar edgecolor\nbar_edgecolor = 'black'\n\n# Set the bar edgealpha\nbar_edgealpha = 1\n\n# Set the bar edgewidth\nbar_edgewidth = 1\n\n# Set the bar edgecapstyle\nbar_edgecapstyle = 'butt'\n\n# Set the bar edgejoinstyle\nbar_edgejoinstyle = 'miter'\n\n# Set the bar edgecolor\nbar_edgecolor = 'black'\n\n# Set the bar edgealpha\nbar_edgealpha = 1\n\n# Set the bar edgewidth\nbar_edgewidth = 1\n\n# Set the bar edgecapstyle\nbar_edgecapstyle = 'butt'\n\n# Set the bar edgejoinstyle\nbar_edgejoinstyle = 'miter'\n\n# Set the bar edgecolor\nbar_edgecolor = 'black'\n\n# Set the bar edgealpha\nbar_edgealpha = 1\n\n# Set the bar edgewidth\nbar_edgewidth = 1\n\n# Set the bar edgecapstyle\nbar_edgecapstyle = 'butt'\n\n# Set the bar edgejoinstyle\nbar_edgejoinstyle = 'miter'\n\n# Set the bar edgecolor\nbar_edgecolor = 'black'\n\n# Set the bar edgealpha\nbar_edgealpha = 1\n\n# Set the bar edgewidth\nbar_edgewidth = 1\n\n# Set the bar edgecapstyle\nbar_edgecapstyle = 'butt'\n\n# Set the bar edgejoinstyle\nbar_edgejoinstyle = 'miter'\n\n# Set the bar edgecolor\nbar_edgecolor = 'black'\n\n# Set the bar edgealpha\nbar_edgealpha = 1\n\n# Set the bar edgewidth\nbar_edgewidth = 1\n\n# Set the bar edgecapstyle\nbar_edgecapstyle = 'butt'\n\n# Set the bar edgejoinstyle\nbar_edgejoinstyle = 'miter'\n\n# Set the bar edgecolor\nbar_edgecolor = 'black'\n\n# Set the bar edgealpha\nbar_edgealpha = 1\n\n# Set the bar edgewidth\nbar_edgewidth = 1\n\n# Set the bar edgecapstyle"}
{"file": "dataset/ori_500/heatmap_26.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(9.0, 6.0))\n\n# Define the data for the plots\ndata = [\n    [1, 2, 3, 4, 5],\n    [2, 3, 4, 5, 6],\n    [3, 4, 5, 6, 7],\n    [4, 5, 6, 7, 8],\n    [5, 6, 7, 8, 9]\n]\n\n# Plot the data\nfor i in range(len(data)):\n    for j in range(len(data[i])):\n        ax.plot([i, j], [data[i][j], data[j][i]], 'b-')\n\n# Set the title of the plot\nax.set_title('Example Plot')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_27.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6, 4))\n\n# Set the background color of the plot\nax.set_facecolor('white')\n\n# Set the title of the plot\nax.set_title('default: no edges')\n\n# Set the x-axis limits\nax.set_xlim(0, 10)\n\n# Set the y-axis limits\nax.set_ylim(0, 6)\n\n# Set the x-axis ticks\nax.set_xticks([0, 2, 4, 6, 8, 10])\n\n# Set the y-axis ticks\nax.set_yticks([0, 2, 4, 6])\n\n# Set the x-axis tick labels\nax.set_xticklabels(['0', '2', '4', '6', '8', '10'])\n\n# Set the y-axis tick labels\nax.set_yticklabels(['0', '2', '4', '6'])\n\n# Set the grid lines\nax.grid(True)\n\n# Set the color of the grid lines\nax.grid(color='black')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('black')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='black')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('black')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='black')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('black')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='black')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('black')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='black')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('black')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='black')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('black')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='black')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('black')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='black')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('black')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='black')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('black')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='black')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('black')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='black')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('black')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='black')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('black')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='black')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('black')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='black')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('black')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='black')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('black')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='black')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('black')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='black')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('black')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('black')\n\n# Set the"}
{"file": "dataset/ori_500/heatmap_28.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Create a color map for the rectangles\ncmap = plt.get_cmap('Oranges')\n\n# Create a grid of rectangles\nrects = []\nfor i in range(10):\n    for j in range(10):\n        rect = plt.Rectangle((i, j), 1, 1, color=cmap(i*0.1))\n        rects.append(rect)\n\n# Add the rectangles to the axes\nax.add_collection(plt.collections.PatchCollection(rects))\n\n# Set the limits of the axes\nax.set_xlim(0, 10)\nax.set_ylim(0, 10)\n\n# Set the labels of the axes\nax.set_xlabel('Vendor')\nax.set_ylabel('Product')\n\n# Set the title of the plot\nax.set_title('Sales of vendors (in tons/year)')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_29.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(5.0, 4.0))\n\n# Set the title of the plot\nax.set_title('Degree of acceptance of a product')\n\n# Define the data for the bars\nx = [17, 36, 28, 23]\ny = [79, 53, 34, 35]\nwidth = [4, 5, 0, 75]\nheight = [42, 38, 0, 55]\n\n# Create the bar chart\nax.barh(x, width, color='blue')\nax.barh(x, height, left=width, color='green')\n\n# Set the x-axis label\nax.set_xlabel('Degree of acceptance')\n\n# Set the y-axis label\nax.set_ylabel('Product')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the background color of the plot\nax.set_facecolor('lightblue')\n\n# Create a colorbar with a gradient\ncmap = plt.get_cmap('Blues')\nnorm = plt.Normalize(vmin=0.1, vmax=0.9)\nsm = plt.cm.ScalarMappable(cmap=cmap, norm=norm)\nsm.set_array([])\ncbar = fig.colorbar(sm, ax=ax)\n\n# Set the title of the colorbar\ncbar.set_label('Bottlebeck Distance')\n\n# Set the title of the plot\nax.set_title('Wasserstein Distance')\n\n# Set the x-axis label\nax.set_xlabel('X-axis Label')\n\n# Set the y-axis label\nax.set_ylabel('Y-axis Label')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_30.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Create a grid of colored rectangles\nfor i in range(1, 9):\n    for j in range(1, 9):\n        color = 'blue' if (i + j) % 2 == 0 else 'red'\n        ax.add_patch(plt.Rectangle((j - 1, i - 1), 1, 1, color=color))\n\n# Set the title and labels\nax.set_title('ROC\\'s AUC')\nax.set_xlabel('Timeshift')\nax.set_ylabel('Scales')\n\n# Set the x-axis and y-axis limits\nax.set_xlim(0, 12)\nax.set_ylim(0, 8)\n\n# Set the colorbar\ncbar = fig.colorbar(ax.images[0])\ncbar.set_label('AUC')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 3.0))\n\n# Define the data\ncategories = ['C Subject', 'C Relation', 'C Attribute', 'Q Subject', 'Q Relation', 'Last']\ncounts = [0, 4, 8, 12, 16, 20, 24, 28]\nvalues = [0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9]\n\n# Create a heatmap\nfor i, category in enumerate(categories):\n    for j, count in enumerate(counts):\n        ax.add_patch(plt.Rectangle((count, i), 1, 1, color=plt.cm.RdYlGn(values[j])))\n\n# Set the labels\nax.set_xlabel('Count')\nax.set_ylabel('Categories')\n\n# Set the title\nax.set_title('Heatmap of Categories and Counts')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the plots\nlive_data = {\n    'Ground truth category': [0, 1, 2, 3],\n    'Predicted category': [0, 1, 2, 3],\n    'Value': [44, 12, 0, 0]\n}\n\ncqi_data = {\n    'Ground truth category': [0, 1, 2, 3],\n    'Predicted category': [0, 1, 2, 3],\n    'Value': [35, 8, 0, 0]\n}\n\nt2013_data = {\n    'Ground truth category': [0, 1, 2, 3],\n    'Predicted category': [0, 1, 2, 3],\n    'Value': [115, 28, 33, 6]\n}\n\nkadi_data = {\n    'Ground truth category': [0, 1, 2, 3],\n    'Predicted category': [0, 1, 2, 3],\n    'Value': [36, 108, 23, 13]\n}\n\nlive_c_data = {\n    'Ground truth category': [0, 1, 2, 3],\n    'Predicted category': [0, 1, 2, 3],\n    'Value': [339, 121, 23, 13]\n}\n\nkoniq_data = {\n    'Ground truth category': [0, 1, 2, 3],\n    'Predicted category': [0, 1, 2, 3],\n    'Value': [100, 220, 204, 184]\n}\n\nlive_m_data = {\n    'Ground truth category': [0, 1, 2, 3],\n    'Predicted category': [0, 1, 2, 3],\n    'Value': [20, 8, 0, 0]\n}\n\npipal_data = {\n    'Ground truth category': [0, 1, 2, 3],\n    'Predicted category': [0, 1, 2, 3],\n    'Value': [754, 271, 278, 498]\n}\n\n# Create a figure and axis\nfig, axes = plt.subplots(3, 3, figsize=(12.0, 6.0))\n\n# Plot the data\naxes[0, 0].bar(live_data['Ground truth category'], live_data['Value'], color='purple')\naxes[0, 1].bar(cqi_data['Ground truth category'], cqi_data['Value'], color='green')\naxes[0, 2].bar(t2013_data['Ground truth category'], t2013_data['Value'], color='orange')\naxes[1, 0].bar(kadi_data['Ground truth category'], kadi_data['Value'], color='blue')\naxes[1, 1].bar(live_c_data['Ground truth category'], live_c_data['Value'], color='red')\naxes[1, 2].bar(koniq_data['Ground truth category'], koniq_data['Value'], color='yellow')\naxes[2, 0].bar(live_m_data['Ground truth category'], live_m_data['Value'], color='pink')\naxes[2, 1].bar(pipal_data['Ground truth category'], pipal_data['Value'], color='brown')\n\n# Set titles\naxes[0, 0].set_title('LIVE')\naxes[0, 1].set_title('CSIQ')\naxes[0, 2].set_title('TID2013')\naxes[1, 0].set_title('KADID')\naxes[1, 1].set_title('LIVE-C')\naxes[1, 2].set_title('KonIQ')\naxes[2, 0].set_title('LIVE-M')\naxes[2, 1].set_title('PIPAL')\n\n# Adjust layout\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nmodels = ['Kokkos', 'Raja', 'OMP', 'OACC', 'SYCL', 'Native Port']\nbandwidths = [876, 136, 435, 534, 322, 804]\ncolors = ['pink', 'orange', 'brown', 'red', 'purple', 'gray']\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Plot the bar chart\nax.bar(models, bandwidths, color=colors)\n\n# Set the title and labels\nax.set_title('BabelStream triad Average Memory Bandwidth (GB/s)')\nax.set_xlabel('Programming Model')\nax.set_ylabel('Memory Bandwidth')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Create a color map\ncmap = plt.get_cmap('hot')\n\n# Create a grid of values\nx = np.linspace(0, 1, 10)\ny = np.linspace(0, 1, 10)\nX, Y = np.meshgrid(x, y)\nZ = np.sin(X * np.pi) * np.cos(Y * np.pi)\n\n# Plot the heatmap\nim = ax.imshow(Z, cmap=cmap, interpolation='nearest', aspect='auto')\n\n# Add a color bar\ncbar = fig.colorbar(im, ax=ax)\n\n# Set the title\nax.set_title('Correlation Coefficients')\n\n# Set the labels\nax.set_xlabel('X-axis')\nax.set_ylabel('Y-axis')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the bar chart\ncategories = ['LexRank', 'ROUGE', 'BERTScore', 'SimCSE', 'PMI', 'GPT-3.5', 'CrossAttN', 'PPL']\nvalues = [0.19, 0.19, 0.62, 0.53, 0.52, 0.39, 0.34, 0.20, 0.06, 0.26, 0.21, 0.05]\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\nax.bar(categories, values, color='skyblue')\n\n# Set the title and labels\nax.set_title('Bar Chart')\nax.set_xlabel('Categories')\nax.set_ylabel('Values')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\nfig, ax = plt.subplots(figsize=(5.0, 6.0))\n\n# Create a grid of rectangles with different colors\nfor i in range(15):\n    for j in range(15):\n        if (i + j) % 2 == 0:\n            color = 'blue'\n        else:\n            color = 'purple'\n        ax.add_patch(plt.Rectangle((i, j), 1, 1, color=color))\n\nax.set_xlim(0, 15)\nax.set_ylim(0, 15)\nax.set_xlabel('Layers')\nax.set_ylabel('Endofoffset')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the plot\nx = [0.0, 0.2, 0.4, 0.6, 0.8]\ny = [100, 90, 80, 70, 60]\ncolors = ['blue', 'green', 'pink', 'purple', 'yellow', 'cyan']\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 7.0))\n\n# Plot the data\nfor i in range(len(x)):\n    ax.barh(y[i], x[i], color=colors[i])\n\n# Set the title and labels\nax.set_title('Test Winning Distance')\nax.set_xlabel('Number of Pairs')\nax.set_ylabel('Test Winning Distance')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure with two subplots\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10.0, 3.0))\n\n# Define the data for the first subplot\nx1 = np.linspace(-0.2, 0.8, 100)\ny1 = np.sin(x1)\n\n# Plot the data on the first subplot\nax1.plot(x1, y1, color='blue')\nax1.set_title('Inter Class')\nax1.set_xlabel('Cosine Similarity')\n\n# Define the data for the second subplot\nx2 = np.linspace(-0.2, 0.8, 100)\ny2 = np.cos(x2)\n\n# Plot the data on the second subplot\nax2.plot(x2, y2, color='green')\nax2.set_title('Intra Class')\nax2.set_xlabel('Cosine Similarity')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, axes = plt.subplots(2, 2, figsize=(10.0, 8.0))\n\n# Define the data for each subplot\ndata1 = np.random.rand(10, 10)\ndata2 = np.random.rand(10, 10)\ndata3 = np.random.rand(10, 10)\ndata4 = np.random.rand(10, 10)\n\n# Plot the data on each subplot\naxes[0, 0].imshow(data1, cmap='YlOrBr')\naxes[0, 1].imshow(data2, cmap='YlOrBr')\naxes[1, 0].imshow(data3, cmap='Blues')\naxes[1, 1].imshow(data4, cmap='Blues')\n\n# Set the titles for each subplot\naxes[0, 0].set_title('Baseline')\naxes[0, 1].set_title('MIRL w/ MUL')\naxes[1, 0].set_title('MIRL + OCLR w/ MUL')\naxes[1, 1].set_title('MIRL + OCLR w/ DOTLA')\n\n# Set the colorbar for each subplot\ncbar1 = fig.colorbar(axes[0, 0].images[0], ax=axes[0, 0])\ncbar2 = fig.colorbar(axes[0, 1].images[0], ax=axes[0, 1])\ncbar3 = fig.colorbar(axes[1, 0].images[0], ax=axes[1, 0])\ncbar4 = fig.colorbar(axes[1, 1].images[0], ax=axes[1, 1])\n\n# Set the labels for the colorbars\ncbar1.set_label('V-I positive')\ncbar2.set_label('V-I negative')\ncbar3.set_label('V-I positive')\ncbar4.set_label('V-I negative')\n\n# Set the labels for the x-axis\nfor ax in axes.flat:\n    ax.set_xlabel('Euclidean Distance')\n\n# Set the labels for the y-axis\nfor ax in axes.flat:\n    ax.set_ylabel('Density')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(7.0, 8.0))\n\n# Set the title of the plot\nax.set_title('MATHWELL')\n\n# Create a histogram\nax.hist(np.random.normal(5, 1, 1000), bins=20, color='blue')\n\n# Set the x-axis label\nax.set_xlabel('FKGL')\n\n# Set the y-axis label\nax.set_ylabel('Density')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nx = [0.02, 0.04, 0.06, 0.08]\ny1 = [1000, 1000, 1000, 1000]\ny2 = [900, 900, 900, 900]\ny3 = [800, 800, 800, 800]\ny4 = [700, 700, 700, 700]\ny5 = [600, 600, 600, 600]\ny6 = [500, 500, 500, 500]\ny7 = [400, 400, 400, 400]\ny8 = [300, 300, 300, 300]\ny9 = [200, 200, 200, 200]\ny10 = [100, 100, 100, 100]\n\n# Plot\nfig, ax = plt.subplots(figsize=(5.0, 5.0))\nax.bar(x, y1, color='orange')\nax.bar(x, y2, color='orange')\nax.bar(x, y3, color='orange')\nax.bar(x, y4, color='orange')\nax.bar(x, y5, color='orange')\nax.bar(x, y6, color='orange')\nax.bar(x, y7, color='orange')\nax.bar(x, y8, color='orange')\nax.bar(x, y9, color='orange')\nax.bar(x, y10, color='orange')\n\n# Labels\nax.set_xlabel('Animal Weight (Tons)')\nax.set_ylabel('Frequency')\nax.set_title('Desert Animals in the Wild')\n\n# Legend\nlegend_labels = ['Camels', 'Kangaroos']\nlegend_colors = ['blue', 'orange']\nfor i in range(len(legend_labels)):\n    ax.plot([], [], color=legend_colors[i], label=legend_labels[i])\nax.legend()\n\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plot\nx = [0, 2, 4, 6, 8]\ny = [10, 30, 50, 70, 90]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Plot the data\nax.bar(x, y, color='blue')\n\n# Set the title and labels\nax.set_title('Comparison of Uniform and Normal Distributions')\nax.set_xlabel('Frequency')\nax.set_ylabel('Value')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Histogram of Wind Speed Measurements')\n\n# Set the x-axis label\nax.set_xlabel('Wind Speed (km/h)')\n\n# Set the y-axis label\nax.set_ylabel('Number of Measurements')\n\n# Set the x-axis limits\nax.set_xlim(-2, 6)\n\n# Set the y-axis limits\nax.set_ylim(0, 1200)\n\n# Set the grid\nax.grid(True)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both',"}
{"file": "dataset/ori_500/hist_16.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\ndistances = [0.0, 0.5, 1.0, 1.5, 2.0, 2.5, 3.0]\nbaguette_ratings = [100, 90, 80, 70, 60, 50, 40]\nyoutiao_ratings = [120, 110, 100, 90, 80, 70, 60]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(5.0, 4.0))\n\n# Plot the data\nax.bar(distances, baguette_ratings, color='blue', label='Baguette')\nax.bar(distances, youtiao_ratings, color='orange', label='Youtiao')\n\n# Set the title and labels\nax.set_title('Baking Accuracy Analysis')\nax.set_xlabel('Distance to Threshold')\nax.set_ylabel('Rating')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_17.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(16.0, 7.0))\n\n# Set the background color of the plot\nax.set_facecolor('lightgrey')\n\n# Set the title of the plot\nax.set_title('Test Win Rate by Pairs', fontsize=20)\n\n# Set the x-axis label\nax.set_xlabel('Number of Pairs', fontsize=15)\n\n# Set the y-axis label\nax.set_ylabel('Test Win Rate', fontsize=15)\n\n# Set the tick labels for the x-axis\nax.set_xticks([0.0, 0.2, 0.4, 0.6, 0.8, 1.0])\nax.set_xticklabels(['0.0', '0.2', '0.4', '0.6', '0.8', '1.0'], fontsize=12)\n\n# Set the tick labels for the y-axis\nax.set_yticks([0, 20, 40, 60, 80, 100, 120, 140])\nax.set_yticklabels(['0', '20', '40', '60', '80', '100', '120', '140'], fontsize=12)\n\n# Set the grid lines\nax.grid(True)\n\n# Set the color of the grid lines\nax.grid(color='grey', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the x-axis ticks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis ticks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('black')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='grey', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the x-axis ticks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis ticks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('black')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='grey', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the x-axis ticks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis ticks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('black')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='grey', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the x-axis ticks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis ticks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('black')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='grey', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the x-axis ticks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis ticks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('black')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='grey', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the x-axis ticks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis ticks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('black')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='grey', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the x-axis ticks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis ticks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('black')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='grey', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the x-axis ticks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis ticks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('black')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='grey', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the x-axis ticks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis ticks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('black')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='grey', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the x-axis ticks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis ticks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('black')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='grey', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the x-axis ticks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis ticks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('black')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='grey', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the x-axis ticks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis ticks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('black')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='grey', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the x-axis ticks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis ticks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('black')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='grey', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the x-axis ticks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis ticks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('black')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='grey', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the x-axis ticks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis ticks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('black')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='grey', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the x-axis ticks\nax.tick_params(axis='x"}
{"file": "dataset/ori_500/hist_18.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the bar chart\ncategories = ['Record of the Year', 'Album of the Year', 'Song of the Year', 'Best New Artist', 'Best Pop Solo Performance']\nnominations = [15, 17, 13, 19, 20]\n\n# Create a bar chart with the specified data\nplt.bar(categories, nominations, color='orange')\n\n# Set the title and labels for the chart\nplt.title('Grammy Nominations Across Expanded Categories 2019-2023')\nplt.xlabel('Categories')\nplt.ylabel('Number of Nominations')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_19.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 7.0))\n\n# Set the title of the plot\nax.set_title('MNIST - Defect Detection')\n\n# Set the x-axis label\nax.set_xlabel('Defect Type')\n\n# Set the y-axis label\nax.set_ylabel('Frequency')\n\n# Set the x-axis limits\nax.set_xlim(0, 0.3)\n\n# Set the y-axis limits\nax.set_ylim(0, 400)\n\n# Set the x-axis ticks\nax.set_xticks([0, 0.05, 0.1, 0.15, 0.2, 0.25, 0.3])\n\n# Set the y-axis ticks\nax.set_yticks([0, 100, 200, 300, 400])\n\n# Set the colorbar\ncbar = fig.colorbar(ax.images[0], ax=ax)\ncbar.set_label('Defect Frequency')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\ntime_scores = [0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0]\nscores = [30, 25, 20, 15, 10, 5, 0]\n\n# Create a bar chart\nplt.bar(time_scores, scores, color='blue')\n\n# Set the title and labels\nplt.title('Time Score vs. Scores')\nplt.xlabel('Time Score')\nplt.ylabel('Scores')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_20.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and a set of subplots\nfig, axs = plt.subplots(2, 2, figsize=(10.0, 8.0))\n\n# Plot the first subplot\naxs[0, 0].bar(range(1, 6), [0.5, 0.7, 0.9, 1.1, 1.3], color='blue')\naxs[0, 0].set_title('a')\naxs[0, 0].set_xlabel('Sweetness')\naxs[0, 0].set_ylabel('Density')\n\n# Plot the second subplot\naxs[0, 1].bar(range(1, 6), [0.4, 0.6, 0.8, 1.0, 1.2], color='orange')\naxs[0, 1].set_title('b')\naxs[0, 1].set_xlabel('Sweetness')\naxs[0, 1].set_ylabel('Density')\n\n# Plot the third subplot\naxs[1, 0].bar(range(1, 6), [0.3, 0.5, 0.7, 0.9, 1.1], color='blue')\naxs[1, 0].set_title('c')\naxs[1, 0].set_xlabel('Sweetness')\naxs[1, 0].set_ylabel('Density')\n\n# Plot the fourth subplot\naxs[1, 1].bar(range(1, 6), [0.2, 0.4, 0.6, 0.8, 1.0], color='orange')\naxs[1, 1].set_title('d')\naxs[1, 1].set_xlabel('Sweetness')\naxs[1, 1].set_ylabel('Density')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the bar chart\nx = [0.00, 0.05, 0.10, 0.15]\ny = [1000, 100, 10, 1]\n\n# Create a bar chart\nplt.bar(x, y, color='brown')\n\n# Add labels and title\nplt.xlabel('Concept Weight')\nplt.ylabel('Count')\nplt.title('CIFAR100 \\'Desert\\' Concept')\n\n# Add a legend\nplt.legend(['Class', 'Camel', 'Kangaroo'], loc='upper right')\n\n# Set the figure size\nfig = plt.gcf()\nfig.set_size_inches(5.0, 4.0)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plot\ndistance_diff = [-5.0, -2.5, 0.0, 2.5, 5.0, 7.5, 10.0]\ncenter_samples = [80, 90, 100, 90, 80, 70, 60]\nrandom_samples = [60, 70, 80, 90, 100, 90, 80]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(5.0, 3.0))\n\n# Plot the data\nax.bar(distance_diff, center_samples, color='yellow', label='Center')\nax.bar(distance_diff, random_samples, color='blue', label='Random')\n\n# Set the title and labels\nax.set_title('Number of Samples vs Distance Difference')\nax.set_xlabel('Distance Difference (Random vs Center)')\nax.set_ylabel('Number of Samples')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_5.pdf", "response": "import matplotlib.pyplot as plt\n\n# Data\nrepetition = [0.0, 2.5, 5.0, 7.5, 10.0]\nclusters = [1200, 1100, 900, 600, 300]\n\n# Plot\nplt.figure(figsize=(4.0, 3.0))\nplt.bar(repetition, clusters, color='orange')\nplt.xlabel('Number of Repetition')\nplt.ylabel('Number of Clusters')\nplt.title('Clusters vs Number of Repetition')\nplt.show()"}
{"file": "dataset/ori_500/hist_6.pdf", "response": "import matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(5.0, 3.0))\n\n# Define the data\nx = [0, 1, 2, 3, 4]\ny_correct = [400, 350, 300, 250, 200]\ny_misclassified = [300, 250, 200, 150, 100]\n\n# Plot the data\nax.bar(x, y_correct, color='blue', label='Correctly classified')\nax.bar(x, y_misclassified, bottom=y_correct, color='orange', label='Misclassified')\n\n# Set the labels and title\nax.set_xlabel('Distance to threshold')\nax.set_ylabel('Number of samples')\nax.set_title('Classification results')\nax.legend()\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/hist_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Set the title of the plot\nax.set_title('Cascade')\n\n# Set the x-axis label\nax.set_xlabel('Confidence in bin')\n\n# Set the y-axis label\nax.set_ylabel('Accuracy in bin')\n\n# Set the x-axis limits\nax.set_xlim(0, 10)\n\n# Set the y-axis limits\nax.set_ylim(0, 10)\n\n# Draw a line with a slope of 1\nax.plot([0, 10], [0, 10], 'r-')\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='brown'))\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nqueries = [0.2, 0.4, 0.6, 0.8]\noverlap = [1000, 2000, 3000, 4000]\n\n# Create a bar chart\nplt.bar(queries, overlap, color='blue')\n\n# Set the title and labels\nplt.title('Number of Queries Overlap')\nplt.xlabel('% images overlap')\nplt.ylabel('Number of queries')\n\n# Set the x-axis limits\nplt.xlim(0, 1)\n\n# Set the y-axis limits\nplt.ylim(0, 5000)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 7.0))\n\n# Set the title of the plot\nax.set_title('MNIST')\n\n# Create a histogram with random data\nax.hist(np.random.randn(1000), bins=30, color='blue')\n\n# Set the x-axis label\nax.set_xlabel('Value')\n\n# Set the y-axis label\nax.set_ylabel('Frequency')\n\n# Create a second subplot\nax2 = fig.add_subplot(212)\n\n# Set the title of the second plot\nax2.set_title('FashionMNIST')\n\n# Create a histogram with random data\nax2.hist(np.random.randn(1000), bins=30, color='blue')\n\n# Set the x-axis label\nax2.set_xlabel('Value')\n\n# Set the y-axis label\nax2.set_ylabel('Frequency')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nx = [5, 10, 15, 20]\ny1 = [90, 80, 70, 60]\ny2 = [80, 70, 60, 50]\ny3 = [70, 60, 50, 40]\ny4 = [60, 50, 40, 30]\ny5 = [50, 40, 30, 20]\n\n# Create the plot\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\nax.plot(x, y1, 'b-', label='JPEG+LDPC')\nax.plot(x, y2, 'or-', label='DEEPJSCC w/o ofdm')\nax.plot(x, y3, 'g^-', label='DEEPJSCC w/ ofdm')\nax.plot(x, y4, 'r--', label='OURS')\n\n# Set the title and labels\nax.set_title('Classification Accuracy (%)')\nax.set_xlabel('SNR')\nax.set_ylabel('Classification Accuracy (%)')\n\n# Add grid lines\nax.grid(True)\n\n# Add legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the background color of the plot\nax.set_facecolor('lightgrey')\n\n# Set the grid lines\nax.grid(True)\n\n# Set the x-axis limits\nax.set_xlim(0, 8)\n\n# Set the y-axis limits\nax.set_ylim(0, 7)\n\n# Set the x-axis ticks\nax.set_xticks([0, 1, 2, 3, 4, 5, 6, 7, 8])\n\n# Set the y-axis ticks\nax.set_yticks([0, 1, 2, 3, 4, 5, 6, 7])\n\n# Set the x-axis labels\nax.set_xlabel('n')\n\n# Set the y-axis labels\nax.set_ylabel('Performance Gain (%)')\n\n# Set the title\nax.set_title('Performance Metrics')\n\n# Plot the data\nax.plot([0, 1, 2, 3, 4, 5, 6, 7, 8], [0, 1, 2, 3, 4, 5, 6, 7, 8], 'b-')\nax.plot([0, 1, 2, 3, 4, 5, 6, 7, 8], [1, 2, 3, 4, 5, 6, 7, 8, 9], 'r-')\nax.plot([0, 1, 2, 3, 4, 5, 6, 7, 8], [2, 3, 4, 5, 6, 7, 8, 9, 10], 'g-')\nax.plot([0, 1, 2, 3, 4, 5, 6, 7, 8], [3, 4, 5, 6, 7, 8, 9, 10, 11], 'c-')\nax.plot([0, 1, 2, 3, 4, 5, 6, 7, 8], [4, 5, 6, 7, 8, 9, 10, 11, 12], 'm-')\nax.plot([0, 1, 2, 3, 4, 5, 6, 7, 8], [5, 6, 7, 8, 9, 10, 11, 12, 13], 'y-')\nax.plot([0, 1, 2, 3, 4, 5, 6, 7, 8], [6, 7, 8, 9, 10, 11, 12, 13, 14], 'k-')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Effect of Vocab on Zero Shot Accuracy')\n\n# Set the x-axis label\nax.set_xlabel('Deposition IO Norm')\n\n# Set the y-axis label\nax.set_ylabel('Accuracy')\n\n# Set the x-axis limits\nax.set_xlim(0, 80)\n\n# Set the y-axis limits\nax.set_ylim(0.55, 0.75)\n\n# Draw a horizontal line at y=0.75\nax.axhline(y=0.75, color='black', linestyle='-')\n\n# Draw a horizontal line at y=0.70\nax.axhline(y=0.70, color='black', linestyle='-')\n\n# Draw a horizontal line at y=0.65\nax.axhline(y=0.65, color='black', linestyle='-')\n\n# Draw a horizontal line at y=0.60\nax.axhline(y=0.60, color='black', linestyle='-')\n\n# Draw a horizontal line at y=0.55\nax.axhline(y=0.55, color='black', linestyle='-')\n\n# Draw a vertical line at x=0\nax.axvline(x=0, color='black', linestyle='-')\n\n# Draw a vertical line at x=20\nax.axvline(x=20, color='black', linestyle='-')\n\n# Draw a vertical line at x=40\nax.axvline(x=40, color='black', linestyle='-')\n\n# Draw a vertical line at x=60\nax.axvline(x=60, color='black', linestyle='-')\n\n# Draw a vertical line at x=80\nax.axvline(x=80, color='black', linestyle='-')\n\n# Define the colors for each line\ncolors = ['red', 'green', 'blue', 'orange', 'yellow']\n\n# Define the labels for each line\nlabels = ['coco (10k)', 'laion (10k)', 'coco (5k)', 'laion (5k)', 'CLIP']\n\n# Plot the lines\nfor i in range(len(colors)):\n    ax.plot([0, 20, 40, 60, 80], [0.55 + i * 0.05] * 5, color=colors[i], label=labels[i])\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Sample data\nx = [0.25, 0.5, 0.75, 1.0]\ny1 = [0.03, 0.04, 0.05, 0.06]\ny2 = [0.02, 0.03, 0.04, 0.05]\ny3 = [0.01, 0.02, 0.03, 0.04]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data\nax.plot(x, y1, label='MAXN=512', color='green')\nax.plot(x, y2, label='MAXN=1024', color='red')\nax.plot(x, y3, label='MAXN=2048', color='blue')\n\n# Add markers at specific points\nax.plot(0.25, 0.03, 'g^')\nax.plot(0.5, 0.04, 'r^')\nax.plot(0.75, 0.05, 'g^')\nax.plot(1.0, 0.06, 'r^')\n\n# Set the title and labels\nax.set_title('Sample Ratio vs. Std of ACC')\nax.set_xlabel('Sample Ratio')\nax.set_ylabel('Std of ACC')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 10.0))\n\n# Plot the first line graph\nax.plot([0, 25, 50, 75, 100, 125, 150, 175, 200], [0.5, 0.4, 0.3, 0.2, 0.1, 0.2, 0.3, 0.4, 0.5], 'b-', label='base')\nax.plot([0, 25, 50, 75, 100, 125, 150, 175, 200], [0.5, 0.4, 0.3, 0.2, 0.1, 0.2, 0.3, 0.4, 0.5], 'y-', label='ours')\n\n# Plot the second line graph\nax.plot([0, 25, 50, 75, 100, 125, 150, 175, 200], [0.4, 0.3, 0.2, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6], 'b-', label='base')\nax.plot([0, 25, 50, 75, 100, 125, 150, 175, 200], [0.4, 0.3, 0.2, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6], 'y-', label='ours')\n\n# Plot the third line graph\nax.plot([0, 25, 50, 75, 100, 125, 150, 175, 200], [0.3, 0.2, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7], 'b-', label='base')\nax.plot([0, 25, 50, 75, 100, 125, 150, 175, 200], [0.3, 0.2, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7], 'y-', label='ours')\n\n# Set the title and labels\nax.set_title('Training Iterations')\nax.set_xlabel('Training iterations')\nax.set_ylabel('Value')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Set the background color of the plot\nax.set_facecolor('#F5DEB3')\n\n# Set the title of the plot\nax.set_title('Realize the trend', fontsize=12)\n\n# Set the x-axis label\nax.set_xlabel('Week', fontsize=10)\n\n# Set the y-axis label\nax.set_ylabel('Normalized Value', fontsize=10)\n\n# Set the x-axis limits\nax.set_xlim(1, 28)\n\n# Set the y-axis limits\nax.set_ylim(0, 100)\n\n# Set the x-axis ticks\nax.set_xticks([1, 4, 7, 10, 13, 16, 19, 22, 25, 28])\n\n# Set the y-axis ticks\nax.set_yticks([0, 25, 50, 75, 100])\n\n# Set the grid lines\nax.grid(True)\n\n# Set the line colors\nline_colors = ['red', 'blue']\n\n# Set the line styles\nline_styles = ['-', '--']\n\n# Set the line widths\nline_widths = [1, 1]\n\n# Set the line markers\nline_markers = ['x', 'o']\n\n# Set the line marker sizes\nline_marker_sizes = [10, 10]\n\n# Set the line marker edge colors\nline_marker_edge_colors = ['black', 'black']\n\n# Set the line marker face colors\nline_marker_face_colors = ['red', 'blue']\n\n# Set the line marker edge widths\nline_marker_edge_widths = [1, 1]\n\n# Set the line marker face widths\nline_marker_face_widths = [1, 1]\n\n# Set the line marker angles\nline_marker_angles = [0, 0]\n\n# Set the line marker scales\nline_marker_scales = [1, 1]\n\n# Set the line marker rotations\nline_marker_rotations = [0, 0]\n\n# Set the line marker alignments\nline_marker_alignments = ['center', 'center']\n\n# Set the line marker vertical alignments\nline_marker_vertical_alignments = ['center', 'center']\n\n# Set the line marker horizontal alignments\nline_marker_horizontal_alignments = ['center', 'center']\n\n# Set the line marker padding\nline_marker_padding = [0, 0]\n\n# Set the line marker border pad\nline_marker_border_pad = [0, 0]\n\n# Set the line marker clip box\nline_marker_clip_box = [None, None]\n\n# Set the line marker transform\nline_marker_transform = [None, None]\n\n# Set the line marker path\nline_marker_path = [None, None]\n\n# Set the line marker path codes\nline_marker_path_codes = [None, None]\n\n# Set the line marker path vertices\nline_marker_path_vertices = [None, None]\n\n# Set the line marker path closed\nline_marker_path_closed = [False, False]\n\n# Set the line marker path filled\nline_marker_path_filled = [False, False]\n\n# Set the line marker path antialiased\nline_marker_path_antialiased = [True, True]\n\n# Set the line marker path join style\nline_marker_path_join_style = ['miter', 'round']\n\n# Set the line marker path cap style\nline_marker_path_cap_style = ['butt', 'projecting']\n\n# Set the line marker path miter limit\nline_marker_path_miter_limit = [4.0, 4.0]\n\n# Set the line marker path linestyle\nline_marker_path_linestyle = ['-', '--']\n\n# Set the line marker path linewidth\nline_marker_path_linewidth = [1, 1]\n\n# Set the line marker path color\nline_marker_path_color = ['red', 'blue']\n\n# Set the line marker path alpha\nline_marker_path_alpha = [1.0, 1.0]\n\n# Set the line marker path hatch\nline_marker_path_hatch = ['', '']\n\n# Set the line marker path edgecolor\nline_marker_path_edgecolor = ['black', 'black']\n\n# Set the line marker path facecolor\nline_marker_path_facecolor = ['red', 'blue']\n\n# Set the line marker path edgealpha\nline_marker_path_edgealpha = [1.0, 1.0]\n\n# Set the line marker path facealpha\nline_marker_path_facealpha = [1.0, 1.0]\n\n# Set the line marker path linestyle\nline_marker_path_linestyle = ['-', '--']\n\n# Set the line marker path linewidth\nline_marker_path_linewidth = [1, 1]\n\n# Set the line marker path color\nline_marker_path_color = ['red', 'blue']\n\n# Set the line marker path alpha\nline_marker_path_alpha = [1.0, 1.0]\n\n# Set the line marker path hatch\nline_marker_path_hatch = ['', '']\n\n# Set the line marker path edgecolor\nline_marker_path_edgecolor = ['black', 'black']\n\n# Set the line marker path facecolor\nline_marker_path_facecolor = ['red', 'blue']\n\n# Set the line marker path edgealpha\nline_marker_path_edgealpha = [1.0, 1.0]\n\n# Set the line marker path facealpha\nline_marker_path_facealpha = [1.0, 1.0]\n\n# Set the line marker path linestyle\nline_marker_path_linestyle = ['-', '--']\n\n# Set the line marker path linewidth\nline_marker_path_linewidth = [1, 1]\n\n# Set the line marker path color\nline_marker_path_color = ['red', 'blue']\n\n# Set the line marker path alpha\nline_marker_path_alpha = [1.0, 1.0]\n\n# Set the line marker path hatch\nline_marker_path_hatch = ['', '']\n\n# Set the line marker path edgecolor\nline_marker_path_edgecolor = ['black', 'black']\n\n# Set the line marker path facecolor\nline_marker_path_facecolor = ['red', 'blue']\n\n# Set the line marker path edgealpha\nline_marker_path_edgealpha = [1.0, 1.0]\n\n# Set the line marker path facealpha\nline_marker_path_facealpha = [1.0, 1.0]\n\n# Set the line marker path linestyle\nline_marker_path_linestyle = ['-', '--']\n\n# Set the line marker path linewidth\nline_marker_path_linewidth = [1, 1]\n\n# Set the line marker path color\nline_marker_path_color = ['red', 'blue']\n\n# Set the line marker path alpha\nline_marker_path_alpha = [1.0, 1.0]\n\n# Set the line marker path hatch\nline_marker_path_hatch = ['', '']\n\n# Set the line marker path edgecolor\nline_marker_path_edgecolor = ['black', 'black']\n\n# Set the line marker path facecolor\nline_marker_path_facecolor = ['red', 'blue']\n\n# Set the line marker path edgealpha\nline_marker_path_edgealpha = [1.0, 1.0]\n\n# Set the line marker path facealpha\nline_marker_path_facealpha = [1.0, 1.0]\n\n# Set the line marker path linestyle\nline_marker_path_linestyle = ['-', '--']\n\n# Set the line marker path linewidth\nline_marker_path_linewidth = [1, 1]\n\n# Set the line marker path color\nline_marker_path_color = ['red', 'blue']\n\n# Set the line marker path alpha\nline_marker_path_alpha = [1.0, 1.0]\n\n# Set the line marker path hatch\nline_marker_path_hatch = ['', '']\n\n# Set the line marker path edgecolor\nline_marker_path_edgecolor = ['black', 'black']\n\n# Set the line marker path facecolor\nline_marker_path_facecolor = ['red', 'blue']\n\n# Set the line marker path edgealpha\nline_marker_path_edgealpha = [1.0, 1.0]\n\n# Set the line marker path facealpha\nline_marker_path_facealpha = [1.0, 1.0]\n\n# Set the line marker path linestyle\nline_marker_path_linestyle = ['-', '--']\n\n# Set the line marker path linewidth\nline_marker_path_linewidth = [1, 1]\n\n# Set the line marker path color\nline_marker_path_color = ['red', 'blue']\n\n# Set the line marker path alpha\nline_marker_path_alpha = [1.0, 1.0]\n\n# Set the line marker path hatch\nline_marker_path_hatch = ['', '']\n\n# Set the line marker path edgecolor\nline_marker_path_edgecolor = ['black', 'black']\n\n# Set the line marker path facecolor\nline_marker_path_facecolor = ['red', 'blue']\n\n# Set the line marker path edgealpha\nline_marker_path_edgealpha = [1.0, 1.0]\n\n# Set the line marker path facealpha\nline_marker_path_facealpha = [1.0, 1.0]\n\n# Set the line marker path linestyle\nline_marker_path_linestyle = ['-', '--']\n\n# Set the line marker path linewidth\nline_marker_path_linewidth = [1, 1]\n\n# Set the line marker path color\nline_marker_path_color = ['red', 'blue']\n\n# Set the line marker path alpha\nline_marker_path_alpha = [1.0, 1.0]\n\n# Set the line marker path hatch\nline_marker_path_hatch = ['', '']\n\n# Set the line marker path edgecolor\nline_marker_path_edgecolor = ['black', 'black']\n\n# Set the line marker path facecolor\nline_marker_path_facecolor = ['red', 'blue']\n\n# Set the line marker path edgealpha\nline_marker_path_edgealpha = [1.0, 1.0]\n\n# Set the line marker path facealpha\nline_marker_path_facealpha = [1.0, 1.0]\n\n# Set the line marker path linestyle\nline_marker_path_linestyle = ['-', '--']\n\n# Set the line marker path linewidth\nline_marker_path_linewidth = [1, 1]\n\n# Set the line marker path color\nline_marker_path_color = ['red', 'blue']\n\n# Set the line marker path alpha\nline_marker_path_alpha = [1.0, 1.0]\n\n# Set the line marker path hatch\nline_marker_path_hatch = ['', '']\n\n# Set the line marker path edgecolor\nline_marker_path_edgecolor = ['black', 'black']\n\n# Set the line marker path facecolor\nline_marker_path_facecolor = ['red', 'blue']\n\n# Set the line marker path edgealpha\nline_marker_path_edgealpha = [1.0, 1.0]\n\n# Set the line marker path facealpha\nline_marker_path_facealpha = [1.0, 1.0]\n\n# Set the line marker path linestyle\nline_marker_path_linestyle = ['-', '--']\n\n# Set the line marker path linewidth\nline_marker_path_linewidth = [1, 1]\n\n# Set the line marker path color\nline_marker_path_color = ['red', 'blue']\n\n# Set the line marker path alpha\nline_marker_path_alpha = [1.0, 1.0]\n\n# Set the line marker path hatch\nline_marker_path_hatch = ['', '']\n\n# Set the line marker path edgecolor\nline_marker_path_edgecolor = ['black', 'black']\n\n# Set the line marker path facecolor\nline_marker_path_facecolor = ['red', 'blue']\n\n# Set the line marker path edgealpha\nline_marker_path_edgealpha = [1.0, 1.0]\n\n# Set the line marker path facealpha\nline_marker_path_facealpha = [1.0, 1.0]\n\n# Set the line marker path linestyle\nline_marker_path_linestyle = ['-', '--']\n\n# Set the line marker path linewidth\nline_marker_path_linewidth = [1, 1]\n\n# Set the line marker path color\nline_marker_path_color = ['red', 'blue']\n\n# Set the line marker path alpha\nline_marker_path_alpha = [1.0, 1.0]\n\n# Set the line marker path hatch\nline_marker_path_hatch = ['', '']\n\n# Set the line marker path edgecolor\nline_marker_path_edgecolor = ['black', 'black']\n\n# Set the line marker path facecolor\nline_marker_path_facecolor = ['red', 'blue']\n\n# Set the line marker path edgealpha\nline_marker_path_edgealpha = [1.0, 1.0]\n\n# Set the line marker path facealpha\nline_marker_path_facealpha = [1.0, 1.0]\n\n# Set the line marker path linestyle\nline_marker_path_linestyle = ['-', '--']\n\n# Set the line marker path linewidth\nline_marker_path_linewidth = [1, 1]\n\n# Set the line marker path color\nline_marker_path_color = ['red', 'blue']\n\n# Set the line marker path alpha\nline_marker_path_alpha = [1.0, 1.0]\n\n# Set the line marker path hatch\nline_marker_path_hatch = ['', '']\n\n# Set the line marker path edgecolor\nline_marker_path_edgecolor = ['black', 'black']\n\n# Set the line marker path facecolor\nline_marker_path_facecolor = ['red', 'blue']\n\n# Set the line marker path edgealpha\nline_marker_path_edgealpha = [1.0, 1.0]\n\n# Set the line marker path facealpha\nline_marker_path_facealpha = [1.0, 1.0]\n\n# Set the line marker path linestyle\nline_marker_path_linestyle = ['-', '--']\n\n# Set the line marker path linewidth\nline_marker_path_linewidth = [1, 1]\n\n# Set the line marker path color\nline_marker_path_color = ['red', 'blue']\n\n# Set the line marker path alpha\nline_marker_path_alpha = [1.0, 1.0]\n\n# Set the line marker path hatch\nline_marker_path_hatch = ['', '']\n\n# Set the line marker path edgecolor\nline_marker_path_edgecolor = ['black', 'black']\n\n# Set the line marker path facecolor\nline_marker_path_facecolor = ['red', 'blue']\n\n# Set the line marker path edgealpha\nline_marker_path_edgealpha = [1.0, 1.0]\n\n# Set the line marker path facealpha\nline_marker_path_facealpha = [1.0, 1.0]\n\n# Set the line marker path linestyle\nline_marker_path_linestyle = ['-', '--']\n\n# Set the line marker path linewidth\nline_marker_path_linewidth = [1, 1]\n\n# Set the line marker path color\nline_marker_path_color = ['red', 'blue']\n\n# Set the line marker path alpha\nline_marker_path_alpha = [1.0, 1.0]\n\n# Set the line marker path hatch\nline_marker_path_hatch = ['', '']\n\n# Set the line marker path edgecolor\nline_marker_path_edgecolor = ['black', 'black']\n\n# Set the line marker path facecolor\nline_marker_path_facecolor = ['red', 'blue']\n\n# Set the line marker path edgealpha\nline_marker_path_edgealpha = [1.0, 1.0]\n\n# Set the line marker path facealpha\nline_marker_path_facealpha = [1.0, 1.0]\n\n# Set the line marker path linestyle\nline_marker_path_linestyle = ['-', '--']\n\n# Set the line marker path linewidth\nline_marker_path_linewidth = [1, 1]\n\n# Set the line marker path color\nline_marker_path_color = ['red', 'blue']\n\n# Set the line marker path alpha\nline_marker_path_alpha = [1.0, 1.0]\n\n# Set the line marker path hatch\nline_marker_path_hatch = ['', '']\n\n# Set the line marker path edgecolor\nline_marker_path_edgecolor = ['black', 'black']\n\n# Set the line marker path facecolor\nline_marker_path_facecolor = ['red', 'blue']\n\n# Set the line marker path edgealpha\nline_marker_path_edgealpha = [1.0, 1.0]\n\n# Set the line marker path facealpha\nline_marker_path_facealpha = [1.0, 1.0]\n\n# Set the line marker path linestyle\nline_marker_path_linestyle = ['-', '--']\n\n# Set the line marker path linewidth\nline_marker_path_linewidth = [1, 1]\n\n# Set the line marker path color\nline_marker_path_color = ['red', 'blue']\n\n# Set the line marker path alpha\nline_marker_path_alpha = [1.0, 1.0]\n\n# Set the line marker path hatch\nline_marker_path_hatch = ['', '']\n\n# Set the line marker path edgecolor\nline_marker_path_edgecolor = ['black', 'black']\n\n# Set the line marker path facecolor\nline_marker_path_facecolor = ['red', 'blue']\n\n# Set the line marker path edgealpha\nline_marker_path_edgealpha = [1.0, 1.0]\n\n# Set the line marker path facealpha\nline_marker_path_facealpha = [1.0, 1.0]\n\n# Set the line marker path linestyle\nline_marker_path_linestyle = ['-', '--']\n\n# Set the line marker path linewidth\nline_marker_path_linewidth = [1, 1]\n\n# Set the line marker path color\nline_marker_path_color = ['red', 'blue']\n\n# Set the line marker path alpha\nline_marker_path_alpha = [1.0, 1.0]\n\n# Set the line marker path hatch\nline_marker_path_hatch = ['', '']\n\n# Set the line marker path edgecolor\nline_marker_path_edgecolor = ['black', 'black']\n\n# Set the line marker path facecolor\nline_marker_path_facecolor = ['red', 'blue']\n\n# Set the line marker path edgealpha\nline_marker_path_edgealpha = [1.0, 1.0]\n\n# Set the line marker path facealpha\nline_marker_path_facealpha = [1.0, 1.0]\n\n# Set the line marker path linestyle\nline_marker_path_linestyle = ['-', '--']\n\n# Set the line marker path linewidth\nline_marker_path_linewidth = [1, 1]\n\n# Set the line marker path color\nline_marker_path_color = ['red', 'blue']\n\n# Set the line marker path alpha\nline_marker_path_alpha = [1.0, 1.0]\n\n# Set the line marker path hatch\nline_marker_path_hatch = ['', '']\n\n# Set the line marker path edgecolor\nline_marker_path_edgecolor = ['black', 'black']\n\n# Set the line marker path facecolor\nline_marker_path_facecolor = ['red', 'blue']\n\n# Set the line marker path edgealpha\nline_marker_path_edgealpha = [1.0, 1.0]\n\n# Set the line marker path facealpha\nline_marker_path_facealpha = [1.0, 1.0]\n\n# Set the line marker path linestyle\nline_marker_path_linestyle = ['-', '--']\n\n# Set the line marker path linewidth\nline_marker_path_linewidth = [1, 1]\n\n# Set the line marker path color\nline_marker_path_color = ['red', 'blue']\n\n# Set the line marker path alpha\nline_marker_path_alpha = [1.0, 1.0]\n\n# Set the line marker path hatch\nline_marker_path_hatch = ['', '']\n\n# Set the line marker path edgecolor\nline_marker_path_edgecolor = ['black', 'black']\n\n# Set the line marker path facecolor\nline_marker"}
{"file": "dataset/ori_500/line_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Sample data\nx = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\ny1 = [95, 90, 85, 80, 75, 70, 65, 60, 55, 50, 45, 40, 35, 30, 25, 20, 15, 10, 5, 0]\ny2 = [85, 80, 75, 70, 65, 60, 55, 50, 45, 40, 35, 30, 25, 20, 15, 10, 5, 0, 5, 10]\ny3 = [75, 70, 65, 60, 55, 50, 45, 40, 35, 30, 25, 20, 15, 10, 5, 0, 5, 10, 15, 20]\ny4 = [65, 60, 55, 50, 45, 40, 35, 30, 25, 20, 15, 10, 5, 0, 5, 10, 15, 20, 25, 30]\ny5 = [55, 50, 45, 40, 35, 30, 25, 20, 15, 10, 5, 0, 5, 10, 15, 20, 25, 30, 35, 40]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data\nax.plot(x, y1, label='BaCE', color='blue')\nax.plot(x, y2, label='LWF', color='#FF6347')\nax.plot(x, y3, label='EWC', color='#FF69B4')\nax.plot(x, y4, label='SEQ', color='#FFC0CB')\n\n# Set the title and labels\nax.set_title('Average Accuracy of Models')\nax.set_xlabel('Task')\nax.set_ylabel('Accuracy (%)')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_16.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nx = [0.0, 0.2, 0.4, 0.6, 0.8, 1.0]\ny1 = [0.99, 0.98, 0.97, 0.96, 0.95, 0.94]\ny2 = [0.96, 0.95, 0.94, 0.93, 0.92, 0.91]\ny3 = [0.93, 0.92, 0.91, 0.90, 0.89, 0.88]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data\nax.plot(x, y1, 'b-', label='Oesense')\nax.plot(x, y2, 'r-', label='KWS')\nax.plot(x, y3, 'g-', label='ECG5000')\n\n# Add markers at specific points\nmarkers = ['^', 'v', '<', '>', 's', 'p']\nfor i, marker in enumerate(markers):\n    ax.plot(x[i], y1[i], marker, color='blue')\n    ax.plot(x[i], y2[i], marker, color='red')\n    ax.plot(x[i], y3[i], marker, color='green')\n\n# Set the title and labels\nax.set_title('Model Accuracy vs Uncertainty Threshold')\nax.set_xlabel('Uncertainty threshold')\nax.set_ylabel('Accuracy')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_17.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Set the x-axis limits\nax.set_xlim(0, 120)\n\n# Set the y-axis limits\nax.set_ylim(-5, -3)\n\n# Set the x-axis label\nax.set_xlabel('Number of Parameters')\n\n# Set the y-axis label\nax.set_ylabel('Log KL Divergence')\n\n# Plot the line graph\nax.plot([0, 20, 40, 60, 80, 100, 120], [10**-3, 10**-3, 10**-3, 10**-3, 10**-3, 10**-3, 10**-3], 'bo-')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_18.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(9, 4))\n\n# Set the title of the plot\nax.set_title('GPT-4 Evaluation')\n\n# Create a rectangle for the first graph\nrect1 = plt.Rectangle((0, 0), 1000, 10, color='skyblue')\nax.add_patch(rect1)\n\n# Create a rectangle for the second graph\nrect2 = plt.Rectangle((0, 0), 1000, 10, color='lightblue')\nax.add_patch(rect2)\n\n# Create a rectangle for the third graph\nrect3 = plt.Rectangle((0, 0), 1000, 10, color='pink')\nax.add_patch(rect3)\n\n# Create a rectangle for the fourth graph\nrect4 = plt.Rectangle((0, 0), 1000, 10, color='lightpink')\nax.add_patch(rect4)\n\n# Create a rectangle for the fifth graph\nrect5 = plt.Rectangle((0, 0), 1000, 10, color='salmon')\nax.add_patch(rect5)\n\n# Create a rectangle for the sixth graph\nrect6 = plt.Rectangle((0, 0), 1000, 10, color='lightsalmon')\nax.add_patch(rect6)\n\n# Create a rectangle for the seventh graph\nrect7 = plt.Rectangle((0, 0), 1000, 10, color='lavender')\nax.add_patch(rect7)\n\n# Create a rectangle for the eighth graph\nrect8 = plt.Rectangle((0, 0), 1000, 10, color='thistle')\nax.add_patch(rect8)\n\n# Create a rectangle for the ninth graph\nrect9 = plt.Rectangle((0, 0), 1000, 10, color='plum')\nax.add_patch(rect9)\n\n# Create a rectangle for the tenth graph\nrect10 = plt.Rectangle((0, 0), 1000, 10, color='violet')\nax.add_patch(rect10)\n\n# Create a rectangle for the eleventh graph\nrect11 = plt.Rectangle((0, 0), 1000, 10, color='orchid')\nax.add_patch(rect11)\n\n# Create a rectangle for the twelfth graph\nrect12 = plt.Rectangle((0, 0), 1000, 10, color='fuchsia')\nax.add_patch(rect12)\n\n# Create a rectangle for the thirteenth graph\nrect13 = plt.Rectangle((0, 0), 1000, 10, color='magenta')\nax.add_patch(rect13)\n\n# Create a rectangle for the fourteenth graph\nrect14 = plt.Rectangle((0, 0), 1000, 10, color='deeppink')\nax.add_patch(rect14)\n\n# Create a rectangle for the fifteenth graph\nrect15 = plt.Rectangle((0, 0), 1000, 10, color='hotpink')\nax.add_patch(rect15)\n\n# Create a rectangle for the sixteenth graph\nrect16 = plt.Rectangle((0, 0), 1000, 10, color='pink')\nax.add_patch(rect16)\n\n# Create a rectangle for the seventeenth graph\nrect17 = plt.Rectangle((0, 0), 1000, 10, color='lavenderblush')\nax.add_patch(rect17)\n\n# Create a rectangle for the eighteenth graph\nrect18 = plt.Rectangle((0, 0), 1000, 10, color='thistle')\nax.add_patch(rect18)\n\n# Create a rectangle for the nineteenth graph\nrect19 = plt.Rectangle((0, 0), 1000, 10, color='plum')\nax.add_patch(rect19)\n\n# Create a rectangle for the twentieth graph\nrect20 = plt.Rectangle((0, 0), 1000, 10, color='violet')\nax.add_patch(rect20)\n\n# Create a rectangle for the twenty-first graph\nrect21 = plt.Rectangle((0, 0), 1000, 10, color='orchid')\nax.add_patch(rect21)\n\n# Create a rectangle for the twenty-second graph\nrect22 = plt.Rectangle((0, 0), 1000, 10, color='fuchsia')\nax.add_patch(rect22)\n\n# Create a rectangle for the twenty-third graph\nrect23 = plt.Rectangle((0, 0), 1000, 10, color='magenta')\nax.add_patch(rect23)\n\n# Create a rectangle for the twenty-fourth graph\nrect24 = plt.Rectangle((0, 0), 1000, 10, color='deeppink')\nax.add_patch(rect24)\n\n# Create a rectangle for the twenty-fifth graph\nrect25 = plt.Rectangle((0, 0), 1000, 10, color='hotpink')\nax.add_patch(rect25)\n\n# Create a rectangle for the twenty-sixth graph\nrect26 = plt.Rectangle((0, 0), 1000, 10, color='pink')\nax.add_patch(rect26)\n\n# Create a rectangle for the twenty-seventh graph\nrect27 = plt.Rectangle((0, 0), 1000, 10, color='lavenderblush')\nax.add_patch(rect27)\n\n# Create a rectangle for the twenty-eighth graph\nrect28 = plt.Rectangle((0, 0), 1000, 10, color='thistle')\nax.add_patch(rect28)\n\n# Create a rectangle for the twenty-ninth graph\nrect29 = plt.Rectangle((0, 0), 1000, 10, color='plum')\nax.add_patch(rect29)\n\n# Create a rectangle for the thirtieth graph\nrect30 = plt.Rectangle((0, 0), 1000, 10, color='violet')\nax.add_patch(rect30)\n\n# Create a rectangle for the thirtieth-first graph\nrect31 = plt.Rectangle((0, 0), 1000, 10, color='orchid')\nax.add_patch(rect31)\n\n# Create a rectangle for the thirtieth-second graph\nrect32 = plt.Rectangle((0, 0), 1000, 10, color='fuchsia')\nax.add_patch(rect32)\n\n# Create a rectangle for the thirtieth-third graph\nrect33 = plt.Rectangle((0, 0), 1000, 10, color='magenta')\nax.add_patch(rect33)\n\n# Create a rectangle for the thirtieth-fourth graph\nrect34 = plt.Rectangle((0, 0), 1000, 10, color='deeppink')\nax.add_patch(rect34)\n\n# Create a rectangle for the thirtieth-fifth graph\nrect35 = plt.Rectangle((0, 0), 1000, 10, color='hotpink')\nax.add_patch(rect35)\n\n# Create a rectangle for the thirtieth-sixth graph\nrect36 = plt.Rectangle((0, 0), 1000, 10, color='pink')\nax.add_patch(rect36)\n\n# Create a rectangle for the thirtieth-seventh graph\nrect37 = plt.Rectangle((0, 0), 1000, 10, color='lavenderblush')\nax.add_patch(rect37)\n\n# Create a rectangle for the thirtieth-eighth graph\nrect38 = plt.Rectangle((0, 0), 1000, 10, color='thistle')\nax.add_patch(rect38)\n\n# Create a rectangle for the thirtieth-ninth graph\nrect39 = plt.Rectangle((0, 0), 1000, 10, color='plum')\nax.add_patch(rect39)\n\n# Create a rectangle for the thirtieth-tenth graph\nrect40 = plt.Rectangle((0, 0), 1000, 10, color='violet')\nax.add_patch(rect40)\n\n# Create a rectangle for the thirtieth-eleventh graph\nrect41 = plt.Rectangle((0, 0), 1000, 10, color='orchid')\nax.add_patch(rect41)\n\n# Create a rectangle for the thirtieth-twelfth graph\nrect42 = plt.Rectangle((0, 0), 1000, 10, color='fuchsia')\nax.add_patch(rect42)\n\n# Create a rectangle for the thirtieth-thirteenth graph\nrect43 = plt.Rectangle((0, 0), 1000, 10, color='magenta')\nax.add_patch(rect43)\n\n# Create a rectangle for the thirtieth-fourteenth graph\nrect44 = plt.Rectangle((0, 0), 1000, 10, color='deeppink')\nax.add_patch(rect44)\n\n# Create a rectangle for the thirtieth-fifteenth graph\nrect45 = plt.Rectangle((0, 0), 1000, 10, color='hotpink')\nax.add_patch(rect45)\n\n# Create a rectangle for the thirtieth-sixteenth graph\nrect46 = plt.Rectangle((0, 0), 1000, 10, color='pink')\nax.add_patch(rect46)\n\n# Create a rectangle for the thirtieth-seventeenth graph\nrect47 = plt.Rectangle((0, 0), 1000, 10, color='lavenderblush')\nax.add_patch(rect47)\n\n# Create a rectangle for the thirtieth-eighteenth graph\nrect48 = plt.Rectangle((0, 0), 1000, 10, color='thistle')\nax.add_patch(rect48)\n\n# Create a rectangle for the thirtieth-nineteenth graph\nrect49 = plt.Rectangle((0, 0), 1000, 10, color='plum')\nax.add_patch(rect49)\n\n# Create a rectangle for the thirtieth-twentieth graph\nrect50 = plt.Rectangle((0, 0), 1000, 10, color='violet')\nax.add_patch(rect50)\n\n# Create a rectangle for the thirtieth-twenty-first graph\nrect51 = plt.Rectangle((0, 0), 1000, 10, color='orchid')\nax.add_patch(rect51)\n\n# Create a rectangle for the thirtieth-twenty-second graph\nrect52 = plt.Rectangle((0, 0), 1000, 10, color='fuchsia')\nax.add_patch(rect52)\n\n# Create a rectangle for the thirtieth-twenty-third graph\nrect53 = plt.Rectangle((0, 0), 1000, 10, color='magenta')\nax.add_patch(rect53)\n\n# Create a rectangle for the thirtieth-twenty-fourth graph\nrect54 = plt.Rectangle((0, 0), 1000, 10, color='deeppink')\nax.add_patch(rect54)\n\n# Create a rectangle for the thirtieth-twenty-fifth graph\nrect55 = plt.Rectangle((0, 0), 1000, 10, color='hotpink')\nax.add_patch(rect55)\n\n# Create a rectangle for the thirtieth-twenty-sixth graph\nrect56 = plt.Rectangle((0, 0), 1000, 10, color='pink')\nax.add_patch(rect56)\n\n# Create a rectangle for the thirtieth-twenty-seventh graph\nrect57 = plt.Rectangle((0, 0), 1000, 10, color='lavenderblush')\nax.add_patch(rect57)\n\n# Create a rectangle for the thirtieth-twenty-eighth graph\nrect58 = plt.Rectangle((0, 0), 1000, 10, color='thistle')\nax.add_patch(rect58)\n\n# Create a rectangle for the thirtieth-twenty-ninth graph\nrect59 = plt.Rectangle((0, 0), 1000, 10, color='plum')\nax.add_patch(rect59)\n\n# Create a rectangle for the thirtieth-thirtieth graph\nrect60 = plt.Rectangle((0, 0), 1000, 10, color='violet')\nax.add_patch(rect60)\n\n# Create a rectangle for the thirtieth-thirtieth-first graph\nrect61 = plt.Rectangle((0, 0), 1000, 10, color='orchid')\nax.add_patch(rect61)\n\n# Create a rectangle for the thirtieth-thirtieth-second graph\nrect62 = plt.Rectangle((0, 0), 1000, 10, color='fuchsia')\nax.add_patch(rect62)\n\n# Create a rectangle for the thirtieth-thirtieth-third graph\nrect63 = plt.Rectangle((0, 0), 1000, 10, color='magenta')\nax.add_patch(rect63)\n\n# Create a rectangle for the thirtieth-thirtieth-fourth graph\nrect64 = plt.Rectangle((0, 0), 1000, 10, color='deeppink')\nax.add_patch(rect64)\n\n# Create a rectangle for the thirtieth-thirtieth-fifteenth graph\nrect65 = plt.Rectangle((0, 0), 1000, 10, color='hotpink')\nax.add_patch(rect65)\n\n# Create a rectangle for the thirtieth-thirtieth-sixteenth graph\nrect66 = plt.Rectangle((0, 0), 1000, 10, color='pink')\nax.add_patch(rect66)\n\n# Create a rectangle for the thirtieth-thirtieth-seventeenth graph\nrect67 = plt.Rectangle((0, 0), 1000, 10, color='lavenderblush')\nax.add_patch(rect67)\n\n# Create a rectangle for the thirtieth-thirtieth-eighteenth graph\nrect68 = plt.Rectangle((0, 0), 1000, 10, color='thistle')\nax.add_patch(rect68)\n\n# Create a rectangle for the thirtieth-thirtieth-nineteenth graph\nrect69 = plt.Rectangle((0, 0), 1000, 10, color='plum')\nax.add_patch(rect69)\n\n# Create a rectangle for the thirtieth-thirtieth-twentieth graph\nrect70 = plt.Rectangle((0, 0), 1000, 10, color='violet')\nax.add_patch(rect70)\n\n# Create a rectangle for the thirtieth-thirtieth-twenty-first graph\nrect71 = plt.Rectangle((0, 0), 1000, 10, color='orchid')\nax.add_patch(rect71)\n\n# Create a rectangle for the thirtieth-thirtieth-twenty-second graph\nrect72 = plt.Rectangle((0, 0), 1000, 10, color='fuchsia')\nax.add_patch(rect72)\n\n# Create a rectangle for the thirtieth-thirtieth-twenty-third graph\nrect73 = plt.Rectangle((0, 0), 1000, 10, color='magenta')\nax.add_patch(rect73)\n\n# Create a rectangle for the thirtieth-thirtieth-twenty-fourth graph\nrect74 = plt.Rectangle((0, 0), 1000, 10, color='deeppink')\nax.add_patch(rect74)\n\n# Create a rectangle for the thirtieth-thirtieth-twenty-fifth graph\nrect75 = plt.Rectangle((0, 0), 1000, 10, color='hotpink')\nax.add_patch(rect75)\n\n# Create a rectangle for the thirtieth-thirtieth-twenty-sixth graph\nrect76 = plt.Rectangle((0, 0), 1000, 10, color='pink')\nax.add_patch(rect76)\n\n# Create a rectangle for the thirtieth-thirtieth-twenty-seventh graph\nrect77 = plt.Rectangle((0, 0), 1000, 10, color='lavenderblush')\nax.add_patch(rect77)\n\n# Create a rectangle for the thirtieth-thirtieth-twenty-eighth graph\nrect78 = plt.Rectangle((0, 0), 1000, 10, color='thistle')\nax.add_patch(rect78)\n\n# Create a rectangle for the thirtieth-thirtieth-twenty-ninth graph\nrect79 = plt.Rectangle((0, 0), 1000, 10, color='plum')\nax.add_patch(rect79)\n\n# Create a rectangle for the thirtieth-thirtieth-thirtieth graph\nrect80 = plt.Rectangle((0, 0), 1000, 10, color='violet')\nax.add_patch(rect80)\n\n# Create a rectangle for the thirtieth-thirtieth-thirtieth-first graph\nrect81 = plt.Rectangle((0, 0), 1000, 10, color='orchid')\nax.add_patch(rect81)\n\n# Create a rectangle for the thirtieth-thirtieth-thirtieth-second graph\nrect82 = plt.Rectangle((0, 0), 1000, 10, color='fuchsia')\nax.add_patch(rect82)\n\n# Create a rectangle for the thirtieth-thirtieth-thirtieth-third graph\nrect83 = plt.Rectangle((0, 0), 1000, 10, color='magenta')\nax.add_patch(rect83)\n\n# Create a rectangle for the thirtieth-thirtieth-thirtieth-fourth graph\nrect84 = plt.Rectangle((0, 0), 1000, 10, color='deeppink')\nax.add_patch"}
{"file": "dataset/ori_500/line_19.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(5.0, 4.0))\n\n# Set the title of the plot\nax.set_title('Test Accuracy vs Fraction of Training Data')\n\n# Set the x-axis label\nax.set_xlabel('Fraction of training data (log scale)')\n\n# Set the y-axis label\nax.set_ylabel('Test accuracy (%)')\n\n# Define the data points for each model\nfull_data = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]\nspt_data = [15, 25, 35, 45, 55, 65, 75, 85, 95, 105]\nvpt_data = [20, 30, 40, 50, 60, 70, 80, 90, 100, 110]\n\n# Plot the data points for each model\nax.plot(full_data, 'g-', label='Full')\nax.plot(spt_data, 'r-', label='SPT')\nax.plot(vpt_data, 'b-', label='VPT')\n\n# Add markers at each data point\nax.plot(full_data, 'go')\nax.plot(spt_data, 'ro')\nax.plot(vpt_data, 'bo')\n\n# Add a legend to the plot\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_2.pdf", "response": "import matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(4.0, 3.0))\n\n# Define the data\nx = [0, 50, 100, 150, 200]\ny1 = [1.5, 1.8, 1.2, 1.7, 1.9]\ny2 = [1.2, 1.6, 1.1, 1.5, 1.8]\ny3 = [1.0, 1.4, 0.9, 1.3, 1.6]\ny4 = [0.8, 1.2, 0.7, 1.1, 1.4]\n\n# Plot the data\nax.plot(x, y1, label='Data 1', color='blue')\nax.plot(x, y2, label='Data 2', color='green')\nax.plot(x, y3, label='Data 3', color='orange')\nax.plot(x, y4, label='Data 4', color='red')\n\n# Add a legend\nax.legend()\n\n# Set the title and labels\nax.set_title('Gradient Steps (x 62.5K)')\nax.set_xlabel('Gradient Steps (x 62.5K)')\nax.set_ylabel('Value')\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/line_20.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(16.0, 8.0))\n\n# Set the title of the plot\nax.set_title('MOLHIV')\n\n# Set the x-axis label\nax.set_xlabel('Ratio r')\n\n# Set the y-axis label\nax.set_ylabel('Performance')\n\n# Set the x-axis limits\nax.set_xlim(0.2, 1.0)\n\n# Set the y-axis limits\nax.set_ylim(0.74, 0.88)\n\n# Draw horizontal lines\nfor i in range(75, 89, 2):\n    ax.axhline(i/100, color='gray', linestyle='--')\n\n# Draw vertical lines\nfor i in range(20, 101, 20):\n    ax.axvline(i/100, color='gray', linestyle='--')\n\n# Draw rectangles\nrectangles = [\n    [0.2, 0.78, 0.3, 0.1],\n    [0.4, 0.76, 0.2, 0.1],\n    [0.6, 0.74, 0.2, 0.1],\n    [0.8, 0.72, 0.2, 0.1]\n]\n\nfor rect in rectangles:\n    ax.add_patch(plt.Rectangle((rect[0], rect[1]), rect[2], rect[3], color='purple'))\n\n# Draw lines\nlines = [\n    [0.2, 0.78, 0.8, 0.78],\n    [0.4, 0.76, 0.8, 0.76],\n    [0.6, 0.74, 0.8, 0.74],\n    [0.8, 0.72, 0.8, 0.72]\n]\n\nfor line in lines:\n    ax.plot([line[0], line[2]], [line[1], line[3]], color='orange')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_21.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nx = [120, 130, 140, 150, 160, 170, 180, 190, 200]\ny_ours = [75, 77.5, 80, 82.5, 85, 87.5, 90, 92.5, 95]\ny_acr = [75, 77.5, 80, 82.5, 85, 87.5, 90, 92.5, 95]\n\n# Plot\nfig, ax = plt.subplots(figsize=(9.0, 6.0))\nax.plot(x, y_ours, 'bo-', label='Ours')\nax.plot(x, y_acr, 'go-', label='ACR')\n\n# Set labels and title\nax.set_xlabel('Imbalance Ratio of Unlabeled Data (%)')\nax.set_ylabel('Top-1 Acc (%)')\nax.set_title('Top-1 Accuracy vs Imbalance Ratio of Unlabeled Data')\nax.legend()\n\n# Display plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_22.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nratios = [40, 50, 60, 70, 80, 90, 100]\nperplexities = [2.91, 3.11, 3.32, 3.53, 3.63, 3.74, 3.94]\ncolors = ['blue', 'purple', 'orange', 'green', 'red', 'pink']\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(5.0, 4.0))\n\n# Plot the data\nfor i, color in enumerate(colors):\n    ax.plot(ratios, perplexities, color=color)\n\n# Set the title and labels\nax.set_title('Perplexity vs Ratio of 4-bit Utilization')\nax.set_xlabel('Ratio of 4-bit Utilization (%)')\nax.set_ylabel('Perplexity (PPL)')\n\n# Add a legend\nlegend_elements = [plt.Line2D([0], [0], marker='o', color='w', label='APTQ', markerfacecolor='blue', markersize=10),\n                  plt.Line2D([0], [0], marker='o', color='w', label='LLMa-7B', markerfacecolor='purple', markersize=10),\n                  plt.Line2D([0], [0], marker='o', color='w', label='OWQ-4bit', markerfacecolor='orange', markersize=10),\n                  plt.Line2D([0], [0], marker='o', color='w', label='GPTQ-4bit', markerfacecolor='green', markersize=10),\n                  plt.Line2D([0], [0], marker='o', color='w', label='LLM-QAT-4bit', markerfacecolor='red', markersize=10),\n                  plt.Line2D([0], [0], marker='o', color='w', label='LLM-QAT-4bit', markerfacecolor='pink', markersize=10)]\nax.legend(handles=legend_elements, loc='upper right')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_23.pdf", "response": "import matplotlib.pyplot as plt\n\n# Data points\nx = [2**1, 2**2, 2**3, 2**4, 2**5, 2**6, 2**7]\ny = [82.98, 89.53, 90.47, 92.41, 93.7, 96.75, 98.5]\n\n# Plotting\nplt.figure(figsize=(5.0, 2.0))\nplt.plot(x, y, marker='o', linestyle='-', color='blue')\nplt.xlabel('Number of Training Objects')\nplt.ylabel('Coverage Ratio (%)')\nplt.title('Coverage Ratio vs Number of Training Objects')\nplt.grid(True)\nplt.show()"}
{"file": "dataset/ori_500/line_24.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Set the title and labels\nax.set_title('N-ELBO')\nax.set_xlabel('Iterations')\nax.set_ylabel('N-ELBO')\n\n# Define the data\nx = [0, 2, 4, 6, 8]\ny = [750, 700, 650, 600, 550]\n\n# Plot the line graph\nax.plot(x, y, 'bo-', label='Average')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_25.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data\nax.plot([1, 2, 3, 4, 5, 6, 7, 8], [3.2, 3.1, 3.3, 3.4, 3.5, 3.6, 3.7, 3.8], 'r-')\nax.plot([1, 2, 3, 4, 5, 6, 7, 8], [2.2, 2.1, 2.3, 2.4, 2.5, 2.6, 2.7, 2.8], 'g-')\nax.plot([1, 2, 3, 4, 5, 6, 7, 8], [4.2, 4.1, 4.3, 4.4, 4.5, 4.6, 4.7, 4.8], 'b-')\n\n# Set the title and labels\nax.set_title('IQM Human Normalized Score')\nax.set_xlabel('Number of experts')\nax.set_ylabel('DoN')\n\n# Add a legend\nax.legend(['Baseline', 'SoftMoE', 'Top1-MoE'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_26.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Test set TPR | FPR = 10^-4')\n\n# Set the x-axis label\nax.set_xlabel('Vocabulary size')\n\n# Set the y-axis label\nax.set_ylabel('TPR')\n\n# Define the data points\nx = [256, 512, 1024, 2048, 8192, 16384]\ny1 = [0.2, 0.4, 0.6, 0.8, 0.9, 0.95]\ny2 = [0.3, 0.5, 0.7, 0.9, 0.95, 0.98]\ny3 = [0.4, 0.6, 0.8, 0.95, 0.98, 0.99]\n\n# Plot the data points\nax.plot(x, y1, 'b-', label='BPE')\nax.plot(x, y2, 'or', label='Wordpunct')\nax.plot(x, y3, 'g-', label='Whitespace')\n\n# Add grid lines\nax.grid(True)\n\n# Add legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_27.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for CNN\ncnn_data = [35.0, 34.4, 32.6, 30.2, 28.6, 26.0, 24.7, 22.6, 20.8, 18.0, 16.0, 14.8, 13.6, 12.4, 11.2, 10.0]\n\n# Data for CIF\ncif_data = [36.8, 34.4, 32.6, 30.2, 28.6, 26.0, 24.7, 22.6, 20.8, 18.0, 16.0, 14.8, 13.6, 12.4, 11.2, 10.0]\n\n# Data for STAR\nstar_data = [35.0, 34.4, 32.6, 30.2, 28.6, 26.0, 24.7, 22.6, 20.8, 18.0, 16.0, 14.8, 13.6, 12.4, 11.2, 10.0]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Plot the data\nax.plot(cnn_data, label='CNN', color='#FFD700')\nax.plot(cif_data, label='CIF', color='#800080')\nax.plot(star_data, label='STAR', color='#000000')\n\n# Set the title and labels\nax.set_title('Word Error Rate vs Compression Rate')\nax.set_xlabel('Compression Rate')\nax.set_ylabel('Word Error Rate (%)')\n\n# Add grid lines\nax.grid(True)\n\n# Add legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_28.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Sample data\nx = [25, 50, 75, 100, 125, 150, 175, 200]\ny1 = [90, 92, 93, 95, 94, 93, 92, 91]\ny2 = [85, 87, 88, 90, 89, 88, 87, 86]\ny3 = [80, 82, 83, 85, 84, 83, 82, 81]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Plot the data\nax.plot(x, y1, 'r-', label='PILOTE')\nax.plot(x, y2, 'b-', label='Re-trained model')\nax.plot(x, y3, 'g-', label='Pre-trained model accuracy')\n\n# Add markers\nfor xi, yi in zip(x, y1):\n    ax.plot(xi, yi, 'ro')\nfor xi, yi in zip(x, y2):\n    ax.plot(xi, yi, 'bo')\nfor xi, yi in zip(x, y3):\n    ax.plot(xi, yi, 'go')\n\n# Set the title and labels\nax.set_title('Model Accuracy Over Time')\nax.set_xlabel('Number of exemplars in class \\'Run\\'')\nax.set_ylabel('Avg. accuracy of five rounds')\n\n# Add a horizontal line at y=75\nax.axhline(y=75, color='g', linestyle='-')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_29.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(4.0, 3.0))\n\n# Plot the data\nax.plot([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], [0.1, 0.12, 0.14, 0.16, 0.18, 0.2, 0.22, 0.24, 0.26, 0.28, 0.3, 0.32, 0.34, 0.36, 0.38, 0.4, 0.42, 0.44, 0.46, 0.48, 0.5], color='blue')\nax.plot([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], [0.1, 0.12, 0.14, 0.16, 0.18, 0.2, 0.22, 0.24, 0.26, 0.28, 0.3, 0.32, 0.34, 0.36, 0.38, 0.4, 0.42, 0.44, 0.46, 0.48, 0.5], color='red')\n\n# Set the title and labels\nax.set_title('Average Fidelity Over Steps')\nax.set_xlabel('# of Steps')\nax.set_ylabel('Avg Fidelity')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nteams = ['All', 'MLP', 'GCN', 'NCN', 'NEC', 'SEAL', 'Node2Vec']\nhits = [75, 70, 65, 60, 55, 50, 45]\ncollab = [80, 75, 70, 65, 60, 55, 50]\nppa = [85, 80, 75, 70, 65, 60, 55]\n\n# Plot\nfig, ax = plt.subplots(figsize=(10, 5))\nax.plot(teams, hits, label='Hits')\nax.plot(teams, collab, label='Collaborations')\nax.plot(teams, ppa, label='PPA')\n\n# Legend\nlegend = ax.legend(loc='upper center', shadow=True)\n\n# Set title and labels\nax.set_title('Team Performance Metrics')\nax.set_xlabel('Teams')\nax.set_ylabel('Metrics')\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_30.pdf", "response": "import matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Set the title of the plot\nax.set_title('Android')\n\n# Define the x-axis values\nx = [2, 4, 6, 8, 10, 12]\n\n# Define the y-axis values for each line\ny1 = [0.055, 0.055, 0.055, 0.055, 0.055, 0.055]\ny2 = [0.045, 0.045, 0.045, 0.045, 0.045, 0.045]\ny3 = [0.040, 0.040, 0.040, 0.040, 0.040, 0.040]\ny4 = [0.035, 0.035, 0.035, 0.035, 0.035, 0.035]\n\n# Plot the lines with different colors\nax.plot(x, y1, color='blue', label='outside-code-diff')\nax.plot(x, y2, color='orange', label='inside-code-diff')\n\n# Add a legend to the plot\nax.legend()\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/line_31.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Sample data\nx = [6, 7, 8, 9]\ny1 = [0.5, 0.7, 0.8, 0.9]\ny2 = [0.4, 0.6, 0.7, 0.8]\ny3 = [0.3, 0.5, 0.6, 0.7]\ny4 = [0.2, 0.4, 0.5, 0.6]\ny5 = [0.1, 0.3, 0.4, 0.5]\n\n# Plotting\nplt.figure(figsize=(8.0, 6.0))\nplt.plot(x, y1, 'b-', label='Direct (100 samples)')\nplt.plot(x, y2, 'g-', label='RFFT (100 samples)')\nplt.plot(x, y3, 'y-', label='Scatterpad (100 samples)')\nplt.plot(x, y4, 'r-', label='Scatterpad (5000 samples)')\nplt.plot(x, y5, 'm-', label='Scatterpad (5000 samples)')\n\n# Adding markers\nplt.scatter(6, 0.5, color='blue')\nplt.scatter(7, 0.7, color='green')\nplt.scatter(8, 0.8, color='yellow')\nplt.scatter(9, 0.9, color='red')\n\n# Adding legend\nplt.legend()\n\n# Setting labels and title\nplt.xlabel('Digit Length')\nplt.ylabel('Digit Accuracy')\nplt.title('Digit Recognition Performance')\n\n# Display plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_32.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('CIFAR100 States Zero Shot Accuracy')\n\n# Set the x-axis label\nax.set_xlabel('Decomposition IO Norm')\n\n# Set the y-axis label\nax.set_ylabel('Accuracy')\n\n# Set the x-axis limits\nax.set_xlim(0, 80)\n\n# Set the y-axis limits\nax.set_ylim(200, 375)\n\n# Draw horizontal lines\nfor i in range(200, 400, 50):\n    ax.axhline(i, color='black', linestyle='-')\n\n# Draw vertical lines\nfor i in range(0, 90, 10):\n    ax.axvline(i, color='black', linestyle='-')\n\n# Plot the data\nax.plot([0, 20, 40, 60, 80], [225, 275, 325, 350, 375], color='orange')\nax.plot([0, 20, 40, 60, 80], [225, 275, 325, 350, 375], color='black')\n\n# Add a rectangle for the legend\nax.add_patch(plt.Rectangle((0, 0), 10, 10, color='orange'))\nax.add_patch(plt.Rectangle((0, 0), 10, 10, color='black'))\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_33.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Sample data\nx = [20, 40, 60, 80, 100]\ny1 = [0.55, 0.65, 0.7, 0.75, 0.75]\ny2 = [0.5, 0.6, 0.65, 0.7, 0.75]\ny3 = [0.5, 0.6, 0.65, 0.7, 0.75]\ny4 = [0.5, 0.6, 0.65, 0.7, 0.75]\ny5 = [0.5, 0.6, 0.65, 0.7, 0.75]\n\n# Plotting\nplt.figure(figsize=(6.0, 4.0))\nplt.plot(x, y1, 'o-', color='gold', label='CNN')\nplt.plot(x, y2, '^-', color='orange', label='CNN+HMM')\nplt.plot(x, y3, 's-', color='blue', label='RF')\nplt.plot(x, y4, 'p-', color='cyan', label='RF+HMM')\nplt.plot(x, y5, 'D-', color='purple', label='RF+HMM')\n\n# Adding labels and title\nplt.xlabel('No. of Users in Development Set')\nplt.ylabel('F1')\nplt.title('Performance Metrics for Different Models')\nplt.legend()\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_34.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nx = [2, 3, 4, 5, 6, 7, 8]\ny1 = [27.44, 24.75, 23.38, 22.77, 22.32, 21.47, 21.51]\ny2 = [6.74, 4.54, 3.96, 3.71, 3.49, 3.34, 3.14]\ny3 = [27.44, 24.75, 23.38, 22.77, 22.32, 21.47, 21.51]\n\n# Plot\nfig, ax1 = plt.subplots(figsize=(8.0, 7.0))\ncolor = 'tab:blue'\nax1.set_xlabel('Number of microphones')\nax1.set_ylabel('WER (%)', color=color)\nax1.plot(x, y1, color=color)\nax1.tick_params(axis='y', labelcolor=color)\n\nax2 = ax1.twinx()  \ncolor = 'tab:orange'\nax2.set_ylabel('AMI WER (%)', color=color)  \nax2.plot(x, y2, color=color)\nax2.plot(x, y3, color=color)\nax2.tick_params(axis='y', labelcolor=color)\n\nfig.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_35.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the plot\nx = [10**-7, 10**-6, 10**-5, 10**-4]\ny = [1, 2, 3, 4]\nerror = [0.1, 0.2, 0.3, 0.4]\n\n# Create the plot\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\nax.plot(x, y, 'bo-', label='empirical relat. (B2=8.0)')\nax.errorbar(x, y, yerr=error, fmt='o', ecolor='r', capsize=5)\nax.set_xlabel('Quantization error')\nax.set_ylabel('Search window size ratio')\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_36.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(15, 5))\n\n# Define the data\nratios = np.arange(0.1, 1.1, 0.1)\nperformance_pna = np.random.rand(len(ratios)) * 0.4 + 0.3\nperformance_gin = np.random.rand(len(ratios)) * 0.4 + 0.3\nmotif_pna = np.random.rand(len(ratios)) * 0.4 + 0.3\nmotif_gin = np.random.rand(len(ratios)) * 0.4 + 0.3\n\n# Plot the data\nax.plot(ratios, performance_pna, label='PNA + ours', color='purple')\nax.plot(ratios, performance_gin, label='GIN + ours', color='orange')\nax.plot(ratios, motif_pna, label='SPMotif-0.5', color='purple')\nax.plot(ratios, motif_gin, label='SPMotif-0.7', color='orange')\n\n# Add a legend\nax.legend()\n\n# Set the title\nax.set_title('Performance and Motif Over Time')\n\n# Set the x-axis label\nax.set_xlabel('Ratio r')\n\n# Set the y-axis label\nax.set_ylabel('Performance')\n\n# Set the y-axis limits\nax.set_ylim(0.4, 0.9)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_37.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 5.0))\n\n# Set the x-axis limits\nax.set_xlim(6, 30)\n\n# Set the y-axis limits\nax.set_ylim(74.5, 78.0)\n\n# Set the x-axis label\nax.set_xlabel('Ensemble Size')\n\n# Set the y-axis label\nax.set_ylabel('Accuracy')\n\n# Set the title of the plot\nax.set_title('Model Performance')\n\n# Draw a rectangle for the first model\nax.add_patch(plt.Rectangle((6, 74.5), 12, 3.5, color='lightblue'))\n\n# Draw a rectangle for the second model\nax.add_patch(plt.Rectangle((18, 74.5), 12, 3.5, color='lightgreen'))\n\n# Draw a rectangle for the third model\nax.add_patch(plt.Rectangle((30, 74.5), 12, 3.5, color='lightgrey'))\n\n# Draw a rectangle for the fourth model\nax.add_patch(plt.Rectangle((6, 77.5), 12, 3.5, color='lightblue'))\n\n# Draw a rectangle for the fifth model\nax.add_patch(plt.Rectangle((18, 77.5), 12, 3.5, color='lightgreen'))\n\n# Draw a rectangle for the sixth model\nax.add_patch(plt.Rectangle((30, 77.5), 12, 3.5, color='lightgrey'))\n\n# Draw a rectangle for the seventh model\nax.add_patch(plt.Rectangle((6, 78.0), 12, 3.5, color='lightblue'))\n\n# Draw a rectangle for the eighth model\nax.add_patch(plt.Rectangle((18, 78.0), 12, 3.5, color='lightgreen'))\n\n# Draw a rectangle for the ninth model\nax.add_patch(plt.Rectangle((30, 78.0), 12, 3.5, color='lightgrey'))\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_38.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nepochs = [3, 5, 10, 30]\ngpt_neo = [0.8, 0.7, 0.6, 0.5]\ngpt_5 = [0.7, 0.6, 0.5, 0.4]\ngpt_10 = [0.6, 0.5, 0.4, 0.3]\ngpt_30 = [0.5, 0.4, 0.3, 0.2]\n\n# Plotting\nfig, ax = plt.subplots(figsize=(6.0, 3.0))\nax.plot(epochs, gpt_neo, label='GPT-Neo', color='blue')\nax.plot(epochs, gpt_5, label='5', color='yellow')\nax.plot(epochs, gpt_10, label='10', color='red')\nax.plot(epochs, gpt_30, label='30', color='green')\n\n# Adding labels and title\nax.set_xlabel('# Epochs')\nax.set_ylabel('Magnitude')\nax.set_title('Training Loss Over Epochs')\nax.legend()\n\n# Display plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_39.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nx = [96, 192, 336, 512, 720]\ny1 = [0.165, 0.165, 0.165, 0.165, 0.165]\ny2 = [0.16, 0.16, 0.16, 0.16, 0.16]\ny3 = [0.155, 0.155, 0.155, 0.155, 0.155]\ny4 = [0.15, 0.15, 0.15, 0.15, 0.15]\ny5 = [0.145, 0.145, 0.145, 0.145, 0.145]\ny6 = [0.14, 0.14, 0.14, 0.14, 0.14]\ny7 = [0.135, 0.135, 0.135, 0.135, 0.135]\ny8 = [0.13, 0.13, 0.13, 0.13, 0.13]\ny9 = [0.125, 0.125, 0.125, 0.125, 0.125]\ny10 = [0.12, 0.12, 0.12, 0.12, 0.12]\ny11 = [0.115, 0.115, 0.115, 0.115, 0.115]\ny12 = [0.11, 0.11, 0.11, 0.11, 0.11]\ny13 = [0.105, 0.105, 0.105, 0.105, 0.105]\ny14 = [0.1, 0.1, 0.1, 0.1, 0.1]\n\n# Plot\nfig, axs = plt.subplots(3, 4, figsize=(15.0, 4.0))\naxs[0, 0].plot(x, y1, 'r-')\naxs[0, 0].set_title('Traffic')\naxs[0, 1].plot(x, y2, 'r-')\naxs[0, 1].set_title('ETMm2')\naxs[0, 2].plot(x, y3, 'r-')\naxs[0, 2].set_title('ETTh2')\naxs[0, 3].plot(x, y4, 'r-')\naxs[0, 3].set_title('ECL')\n\naxs[1, 0].plot(x, y5, 'g-')\naxs[1, 0].set_title('MSF')\naxs[1, 1].plot(x, y6, 'g-')\naxs[1, 1].set_title('MSE')\naxs[1, 2].plot(x, y7, 'g-')\naxs[1, 2].set_title('MSE')\naxs[1, 3].plot(x, y8, 'g-')\naxs[1, 3].set_title('MSE')\n\naxs[2, 0].plot(x, y9, 'b-')\naxs[2, 0].set_title('MSF')\naxs[2, 1].plot(x, y10, 'b-')\naxs[2, 1].set_title('MSE')\naxs[2, 2].plot(x, y11, 'b-')\naxs[2, 2].set_title('MSE')\naxs[2, 3].plot(x, y12, 'b-')\naxs[2, 3].set_title('MSE')\n\nfor ax in axs.flat:\n    ax.set_xlabel('pred_length')\n    ax.set_ylabel('MSE')\n\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\nserial_data = {\n    '224': [75, 65, 55, 45, 35],\n    '128': [65, 55, 45, 35, 25],\n    '64': [55, 45, 35, 25, 15],\n    '32': [45, 35, 25, 15, 5]\n}\nparallel_data = {\n    '224': [80, 70, 60, 50, 40],\n    '128': [70, 60, 50, 40, 30],\n    '64': [60, 50, 40, 30, 20],\n    '32': [50, 40, 30, 20, 10]\n}\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(9, 4))\n\n# Plot the data\nfor key, value in serial_data.items():\n    ax.plot(value, label=key)\nax.set_xlabel('Time')\nax.set_ylabel('Top-1 Acc.')\nax.set_title('Serial (n=8, m=1)')\nax.legend()\n\n# Create a second subplot\nax2 = fig.add_subplot(122)\nfor key, value in parallel_data.items():\n    ax2.plot(value, label=key)\nax2.set_xlabel('Time')\nax2.set_ylabel('Top-1 Acc.')\nax2.set_title('Parallel (n=2, m=4)')\nax2.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_40.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Classification Accuracy (%)')\n\n# Set the x-axis label\nax.set_xlabel('SNR')\n\n# Set the y-axis label\nax.set_ylabel('Accuracy (%)')\n\n# Set the x-axis ticks\nax.set_xticks([5, 7.5, 10, 12.5, 15, 17.5, 20, 22.5, 25])\n\n# Set the y-axis ticks\nax.set_yticks([20, 40, 60, 80, 100])\n\n# Set the x-axis tick labels\nax.set_xticklabels(['5.0', '7.5', '10.0', '12.5', '15.0', '17.5', '20.0', '22.5', '25.0'])\n\n# Set the y-axis tick labels\nax.set_yticklabels(['20', '40', '60', '80', '100'])\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the text\nax.set_color_cycle(['blue', 'orange', 'green', 'red'])\n\n# Draw the rectangles\nax.add_patch(plt.Rectangle((5, 90), 2, 10, color='#ff9999'))\nax.add_patch(plt.Rectangle((7.5, 80), 2, 10, color='#99ccff'))\nax.add_patch(plt.Rectangle((10, 70), 2, 10, color='#99ff99'))\nax.add_patch(plt.Rectangle((12.5, 60), 2, 10, color='#ff9999'))\nax.add_patch(plt.Rectangle((15, 50), 2, 10, color='#99ccff'))\nax.add_patch(plt.Rectangle((17.5, 40), 2, 10, color='#99ff99'))\nax.add_patch(plt.Rectangle((20, 30), 2, 10, color='#ff9999'))\nax.add_patch(plt.Rectangle((22.5, 20), 2, 10, color='#99ccff'))\n\n# Draw the lines\nax.plot([5, 7.5, 10, 12.5, 15, 17.5, 20, 22.5, 25], [90, 80, 70, 60, 50, 40, 30, 20, 10], color='red')\nax.plot([5, 7.5, 10, 12.5, 15, 17.5, 20, 22.5, 25], [80, 70, 60, 50, 40, 30, 20, 10, 0], color='green')\nax.plot([5, 7.5, 10, 12.5, 15, 17.5, 20, 22.5, 25], [70, 60, 50, 40, 30, 20, 10, 0, -10], color='blue')\nax.plot([5, 7.5, 10, 12.5, 15, 17.5, 20, 22.5, 25], [60, 50, 40, 30, 20, 10, 0, -10, -20], color='orange')\n\n# Draw the markers\nax.plot(5, 90, 'ro')\nax.plot(7.5, 80, 'go')\nax.plot(10, 70, 'bo')\nax.plot(12.5, 60, 'co')\nax.plot(15, 50, 'mo')\nax.plot(17.5, 40, 'yo')\nax.plot(20, 30, 'ko')\nax.plot(22.5, 20, 'ro')\n\n# Draw the legend\nax.legend(['JPEG+LDPC', 'DEEPJSCC w/o OFDM', 'DEEPJSCC w/ OFDM', 'OURS'], loc='upper right')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_41.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 8.0))\n\n# Set the title of the plot\nax.set_title('Performance vs. Gradient Scale')\n\n# Set the x-axis label\nax.set_xlabel('Gradient Steps (x 62.5K)')\n\n# Set the y-axis label\nax.set_ylabel('Performance Value')\n\n# Set the y-axis limits\nax.set_ylim(0, 7)\n\n# Set the x-axis limits\nax.set_xlim(0, 200)\n\n# Plot the data\nax.plot([0, 100, 200], [1, 2, 3], 'r-')\nax.plot([0, 50, 100, 150, 200], [1, 2, 3, 4, 5], 'g-')\nax.plot([0, 25, 50, 75, 100, 125, 150, 175, 200], [1, 2, 3, 4, 5, 6, 7, 8, 9], 'b-')\nax.plot([0, 25, 50, 75, 100, 125, 150, 175, 200], [1, 2, 3, 4, 5, 6, 7, 8, 9], 'm-')\n\n# Set the legend\nax.legend(['Line 1 (Sinusoidal)', 'Line 2 (Quadratic)', 'Line 3 (Random Noise)', 'Line 4 (Exponential Focus)'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_42.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for Line 1\nx1 = np.linspace(0, 200, 100)\ny1 = np.sin(x1 / 10) + 1.5\n\n# Data for Line 2\nx2 = np.linspace(0, 200, 100)\ny2 = np.cos(x2 / 10) + 1.3\n\n# Data for Line 3\nx3 = np.linspace(0, 200, 100)\ny3 = np.tan(x3 / 10) + 1.7\n\n# Plotting\nfig, ax = plt.subplots(figsize=(10, 5))\n\nax.plot(x1, y1, 'o-', label='Line 1')\nax.plot(x2, y2, 'b-', label='Line 2')\nax.plot(x3, y3, 'g-', label='Line 3')\n\nax.set_xlabel('Gradient Steps (x 62.5K)')\nax.set_ylabel('Polynomial Value')\nax.legend()\n\nplt.show()\n```"}
{"file": "dataset/ori_500/line_43.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(12, 5))\n\n# Set the title of the plot\nax.set_title('ogbl-collab Results')\n\n# Define the x-axis labels\nx_labels = ['All', 'MLP', 'GCN', 'NCN', 'NeoGNN-BUDDY', 'Node2Vec']\n\n# Define the y-axis values\ny_values = [75, 70, 65, 60, 55, 50]\n\n# Plot the data\nfor i in range(len(x_labels)):\n    ax.plot([i, i], [y_values[i], y_values[i]], color='blue')\n    ax.text(i, y_values[i], x_labels[i], ha='center', va='bottom')\n\n# Set the y-axis limits\nax.set_ylim(50, 80)\n\n# Set the x-axis limits\nax.set_xlim(-1, len(x_labels))\n\n# Set the x-axis tick labels\nax.set_xticks(range(len(x_labels)))\n\n# Set the x-axis tick labels\nax.set_xticklabels(x_labels)\n\n# Set the y-axis tick labels\nax.set_yticks(range(50, 81, 5))\n\n# Set the y-axis tick labels\nax.set_yticklabels(range(50, 81, 5))\n\n# Set the y-axis label\nax.set_ylabel('Hits@50')\n\n# Set the x-axis label\nax.set_xlabel('Model')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_44.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Set the grid\nax.grid(True)\n\n# Set the title and labels\nax.set_title('Price vs. N')\nax.set_xlabel('N')\nax.set_ylabel('Price')\n\n# Define the data\nn_values = [10, 20, 30, 40, 50, 60]\nprice_values = [10**-10, 10**-8, 10**-6, 10**-4, 10**-2, 10**0]\n\n# Plot the data\nax.plot(n_values, price_values, 'b-', label='Standard')\nax.plot(n_values, price_values, 'o-', label='Constrained')\nax.plot(n_values, price_values, 'g-', label='Experimental')\nax.plot(n_values, price_values, 'm-', label='Hypothetical')\n\n# Add markers at specific points\nmarkers = [(10, 10**-10), (20, 10**-8), (30, 10**-6), (40, 10**-4), (50, 10**-2), (60, 10**0)]\nfor n, p in markers:\n    ax.plot(n, p, 'ro')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_45.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(12, 8))\n\n# Set the title of the graph\nax.set_title('Graph Variation 1')\n\n# Set the x-axis label\nax.set_xlabel('N')\n\n# Set the y-axis label\nax.set_ylabel('Peak Performance')\n\n# Set the x-axis limits\nax.set_xlim(1, 6)\n\n# Set the y-axis limits\nax.set_ylim(10**-4, 10**10)\n\n# Set the x-axis ticks\nax.set_xticks([1, 2, 3, 4, 5, 6])\n\n# Set the y-axis ticks\nax.set_yticks([10**-4, 10**-2, 10**0, 10**2, 10**4, 10**6, 10**8, 10**10])\n\n# Set the x-axis tick labels\nax.set_xticklabels(['10^0', '10^1', '10^2', '10^3', '10^4', '10^5'])\n\n# Set the y-axis tick labels\nax.set_yticklabels(['10^-4', '10^-2', '10^0', '10^2', '10^4', '10^6', '10^8', '10^10'])\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='purple')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='purple')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='blue')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='purple')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='purple')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='purple')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='blue')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='purple')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='purple')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='purple')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='blue')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='purple')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='purple')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='purple')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='blue')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='purple')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='purple')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='purple')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='blue')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='purple')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='purple')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='purple')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='blue')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='purple')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='purple')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='purple')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='blue')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='purple')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='purple')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='purple')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='blue')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='purple')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='purple')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='purple')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='blue')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='purple')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='purple')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='purple')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='blue')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='purple')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='purple')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='purple')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='blue')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='purple')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='purple')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='purple')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='blue')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='purple')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='purple')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='purple')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='blue')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='purple')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='purple')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='purple')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='blue')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='purple')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='purple')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='purple')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='blue')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='purple')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='purple')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='purple')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='blue')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='purple')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='purple')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='purple')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='blue')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='purple')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='purple')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='purple')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='blue')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='purple')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='purple')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='purple')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='blue')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='purple')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='purple')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='purple')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='blue')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='purple')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='purple')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='purple')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='blue')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='purple')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='purple')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='purple')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='blue')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='purple')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='purple')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='purple')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='blue')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='purple')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='purple')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='purple')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='blue')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='purple')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='purple')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='purple')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='blue')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='purple')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='purple')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='purple')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='blue')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='purple')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='purple')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='purple')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='blue')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='purple')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='purple')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='purple')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='blue')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='purple')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='purple')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='purple')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='blue')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='purple')\n\n# Set the color of the x-axis tick labels"}
{"file": "dataset/ori_500/line_46.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfig, ax = plt.subplots(figsize=(6.0, 10.0))\nax.plot([0, 5, 10, 15, 20, 25], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0], color='blue', label='Standard Activity')\nax.plot([0, 5, 10, 15, 20, 25], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0], color='red', label='Innovative Activity')\nax.set_xlabel('Time (Hours)')\nax.set_ylabel('Activity Level')\nax.set_title('Daytime Activity Monitoring')\nax.legend()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_47.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Define the time range\ntime = np.arange(0, 13)\n\n# Define the performance index values\nperformance_index = np.array([0.2, 0.4, 0.6, 0.8, 1.0, 0.8, 0.6, 0.4, 0.2, 0.4, 0.6, 0.8, 1.0])\n\n# Plot the performance index\nax.plot(time, performance_index, color='blue')\n\n# Set the title of the plot\nax.set_title('Comparative Performance Analysis Over Time')\n\n# Set the x-axis label\nax.set_xlabel('Time (Months)')\n\n# Set the y-axis label\nax.set_ylabel('Performance Index')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_48.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nx = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\ny1 = [1000, 1100, 1200, 1300, 1400, 1500, 1600, 1700, 1800, 1900, 2000, 2100]\ny2 = [100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200, 210]\n\n# Plot\nfig, ax1 = plt.subplots(figsize=(10.0, 6.0))\n\ncolor = 'tab:blue'\nax1.set_xlabel('Month')\nax1.set_ylabel('Sales', color=color)\nax1.plot(x, y1, color=color)\nax1.tick_params(axis='y', labelcolor=color)\n\nax2 = ax1.twinx()  \ncolor = 'tab:red'\nax2.set_ylabel('Temperature (\u00b0C)', color=color)  \nax2.plot(x, y2, color=color)\nax2.tick_params(axis='y', labelcolor=color)\n\nfig.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_49.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 9.0))\n\n# Set the title of the plot\nax.set_title('Exponential Growth Over Time')\n\n# Set the x-axis label\nax.set_xlabel('Time')\n\n# Set the y-axis label\nax.set_ylabel('Value')\n\n# Set the grid\nax.grid(True)\n\n# Set the x-axis limits\nax.set_xlim(0, 10)\n\n# Set the y-axis limits\nax.set_ylim(-1.2, 1.3)\n\n# Set the color of the line\nax.plot([0, 2, 4, 6, 8, 10], [1.3, 1.1, 0.9, 0.7, 0.5, 0.3], 'g-')\n\n# Set the color of the markers\nax.plot([0, 2, 4, 6, 8, 10], [1.3, 1.1, 0.9, 0.7, 0.5, 0.3], 'go')\n\n# Set the color of the line\nax.plot([0, 2, 4, 6, 8, 10], [0.8, 0.6, 0.4, 0.2, 0.0, -0.2], 'r-')\n\n# Set the color of the markers\nax.plot([0, 2, 4, 6, 8, 10], [0.8, 0.6, 0.4, 0.2, 0.0, -0.2], 'ro')\n\n# Set the color of the line\nax.plot([0, 2, 4, 6, 8, 10], [0.8, 0.6, 0.4, 0.2, 0.0, -0.2], 'b-')\n\n# Set the color of the markers\nax.plot([0, 2, 4, 6, 8, 10], [0.8, 0.6, 0.4, 0.2, 0.0, -0.2], 'bo')\n\n# Set the color of the line\nax.plot([0, 2, 4, 6, 8, 10], [0.8, 0.6, 0.4, 0.2, 0.0, -0.2], 'm-')\n\n# Set the color of the markers\nax.plot([0, 2, 4, 6, 8, 10], [0.8, 0.6, 0.4, 0.2, 0.0, -0.2], 'mo')\n\n# Set the color of the line\nax.plot([0, 2, 4, 6, 8, 10], [0.8, 0.6, 0.4, 0.2, 0.0, -0.2], 'c-')\n\n# Set the color of the markers\nax.plot([0, 2, 4, 6, 8, 10], [0.8, 0.6, 0.4, 0.2, 0.0, -0.2], 'co')\n\n# Set the color of the line\nax.plot([0, 2, 4, 6, 8, 10], [0.8, 0.6, 0.4, 0.2, 0.0, -0.2], 'y-')\n\n# Set the color of the markers\nax.plot([0, 2, 4, 6, 8, 10], [0.8, 0.6, 0.4, 0.2, 0.0, -0.2], 'yo')\n\n# Set the color of the line\nax.plot([0, 2, 4, 6, 8, 10], [0.8, 0.6, 0.4, 0.2, 0.0, -0.2], 'k-')\n\n# Set the color of the markers\nax.plot([0, 2, 4, 6, 8, 10], [0.8, 0.6, 0.4, 0.2, 0.0, -0.2], 'ko')\n\n# Set the color of the line\nax.plot([0, 2, 4, 6, 8, 10], [0.8, 0.6, 0.4, 0.2, 0.0, -0.2], 'w-')\n\n# Set the color of the markers\nax.plot([0, 2, 4, 6, 8, 10], [0.8, 0.6, 0.4, 0.2, 0.0, -0.2], 'wo')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/line_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nx = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ny1 = [0.5, 0.4, 0.3, 0.2, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6]\ny2 = [0.6, 0.5, 0.4, 0.3, 0.2, 0.1, 0.2, 0.3, 0.4, 0.5]\ny3 = [0.5, 0.4, 0.3, 0.2, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6]\ny4 = [0.6, 0.5, 0.4, 0.3, 0.2, 0.1, 0.2, 0.3, 0.4, 0.5]\n\n# Create the plot\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\nax.plot(x, y1, 'b-', label='5-shot direct')\nax.plot(x, y2, 'or-', label='5-shot scratchpad')\nax.plot(x, y3, 'g-', label='5-shot rule-following')\n\n# Set the title and labels\nax.set_title('Shot Accuracy vs Digit Length')\nax.set_xlabel('Digit Length')\nax.set_ylabel('Accuracy')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_50.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(5.0, 10.0))\n\n# Set the title of the plot\nax.set_title('Smoothed Representation')\n\n# Set the x-axis label\nax.set_xlabel('Time')\n\n# Set the y-axis label\nax.set_ylabel('Value')\n\n# Set the x-axis limits\nax.set_xlim(0, 20)\n\n# Set the y-axis limits\nax.set_ylim(-1, 1)\n\n# Plot the data\nax.plot([2, 4, 6, 8, 10, 12, 14, 16, 18], [0.3, 0.2, 0.1, 0.2, 0.3, 0.2, 0.1, 0.2, 0.3], 'p-', color='purple', label='Smoothed Data')\nax.plot([2, 4, 6, 8, 10, 12, 14, 16, 18], [0.3, 0.2, 0.1, 0.2, 0.3, 0.2, 0.1, 0.2, 0.3], 'p-', color='purple')\n\n# Add a legend\nax.legend()\n\n# Create a second subplot\nax2 = fig.add_subplot(212)\n\n# Set the title of the second subplot\nax2.set_title('First Difference of Data')\n\n# Set the x-axis label\nax2.set_xlabel('Time')\n\n# Set the y-axis label\nax2.set_ylabel('Delta Value')\n\n# Set the x-axis limits\nax2.set_xlim(0, 20)\n\n# Set the y-axis limits\nax2.set_ylim(-1, 1)\n\n# Plot the data\nax2.plot([2, 4, 6, 8, 10, 12, 14, 16, 18], [0.3, 0.2, 0.1, 0.2, 0.3, 0.2, 0.1, 0.2, 0.3], 'p-', color='orange', label='Difference Data')\nax2.plot([2, 4, 6, 8, 10, 12, 14, 16, 18], [0.3, 0.2, 0.1, 0.2, 0.3, 0.2, 0.1, 0.2, 0.3], 'p-', color='orange')\n\n# Add a legend\nax2.legend()\n\n# Create a third subplot\nax3 = fig.add_subplot(213)\n\n# Set the title of the third subplot\nax3.set_title('Cumulative Sum Over Time')\n\n# Set the x-axis label\nax3.set_xlabel('Time')\n\n# Set the y-axis label\nax3.set_ylabel('Cumulative Sum')\n\n# Set the x-axis limits\nax3.set_xlim(0, 20)\n\n# Set the y-axis limits\nax3.set_ylim(0, 3)\n\n# Plot the data\nax3.plot([2, 4, 6, 8, 10, 12, 14, 16, 18], [0.3, 0.2, 0.1, 0.2, 0.3, 0.2, 0.1, 0.2, 0.3], 'p-', color='green', label='Cumulative Sum')\nax3.plot([2, 4, 6, 8, 10, 12, 14, 16, 18], [0.3, 0.2, 0.1, 0.2, 0.3, 0.2, 0.1, 0.2, 0.3], 'p-', color='green')\n\n# Add a legend\nax3.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_51.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfig, axes = plt.subplots(4, 1, figsize=(6.0, 12.0))\n\n# Sin Wave\nx = np.linspace(0, 10, 100)\ny_sin = np.sin(x)\naxes[0].plot(x, y_sin, color='purple')\naxes[0].set_title('Sin Wave')\n\n# Cos Wave\ny_cos = np.cos(x)\naxes[1].plot(x, y_cos, color='green')\naxes[1].set_title('Cos Wave')\n\n# Exp Decay\ny_exp = np.exp(-x/5)\naxes[2].plot(x, y_exp, color='blue')\naxes[2].set_title('Exp Decay')\n\n# Log Growth\ny_log = np.log(x + 1)\naxes[3].plot(x, y_log, color='red')\naxes[3].set_title('Log Growth')\n\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_52.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\nx = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0]\ny1 = [79.0, 79.0, 79.0, 79.0, 79.0, 79.0, 79.0, 79.0, 79.0, 79.0]\ny2 = [80.0, 80.0, 80.0, 80.0, 80.0, 80.0, 80.0, 80.0, 80.0, 80.0]\ny3 = [81.0, 81.0, 81.0, 81.0, 81.0, 81.0, 81.0, 81.0, 81.0, 81.0]\ny4 = [82.0, 82.0, 82.0, 82.0, 82.0, 82.0, 82.0, 82.0, 82.0, 82.0]\ny5 = [83.0, 83.0, 83.0, 83.0, 83.0, 83.0, 83.0, 83.0, 83.0, 83.0]\ny6 = [84.0, 84.0, 84.0, 84.0, 84.0, 84.0, 84.0, 84.0, 84.0, 84.0]\n\n# Create a figure and a set of subplots\nfig, axs = plt.subplots(2, 2, figsize=(9.0, 6.0))\n\n# Plot the data\naxs[0, 0].plot(x, y1, 'b-')\naxs[0, 0].set_title('a')\naxs[0, 0].set_xlabel('Time (s)')\naxs[0, 0].set_ylabel('Weight (kg)')\naxs[0, 0].grid(True)\n\naxs[0, 1].plot(x, y2, 'r-')\naxs[0, 1].set_title('b')\naxs[0, 1].set_xlabel('Time (s)')\naxs[0, 1].set_ylabel('Weight (kg)')\naxs[0, 1].grid(True)\n\naxs[1, 0].plot(x, y3, 'g-')\naxs[1, 0].set_title('d')\naxs[1, 0].set_xlabel('Time (s)')\naxs[1, 0].set_ylabel('Weight (kg)')\naxs[1, 0].grid(True)\n\naxs[1, 1].plot(x, y4, 'm-')\naxs[1, 1].set_title('c')\naxs[1, 1].set_xlabel('Time (s)')\naxs[1, 1].set_ylabel('Weight (kg)')\naxs[1, 1].grid(True)\n\n# Display the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_53.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\nx = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9]\ny1 = [82, 81, 80, 79, 78, 77, 76, 75, 74]\ny2 = [85, 84, 83, 82, 81, 80, 79, 78, 77]\ny3 = [80, 79, 78, 77, 76, 75, 74, 73, 72]\ny4 = [83, 82, 81, 80, 79, 78, 77, 76, 75]\ny5 = [85, 84, 83, 82, 81, 80, 79, 78, 77]\ny6 = [80, 79, 78, 77, 76, 75, 74, 73, 72]\n\n# Create a figure and a set of subplots\nfig, axs = plt.subplots(3, 2, figsize=(12, 8))\n\n# Plot the first subplot\naxs[0, 0].plot(x, y1, 'r-')\naxs[0, 0].set_title('Positive Bound')\naxs[0, 0].set_xlabel('Time')\naxs[0, 0].set_ylabel('Value')\n\n# Plot the second subplot\naxs[0, 1].plot(x, y2, 'g-')\naxs[0, 1].set_title('Negative Bound')\naxs[0, 1].set_xlabel('Time')\naxs[0, 1].set_ylabel('Value')\n\n# Plot the third subplot\naxs[1, 0].plot(x, y3, 'b-')\naxs[1, 0].set_title('Contrastive Loss Weight')\naxs[1, 0].set_xlabel('Time')\naxs[1, 0].set_ylabel('Value')\n\n# Plot the fourth subplot\naxs[1, 1].plot(x, y4, 'm-')\naxs[1, 1].set_title('Fuzzy Coefficient')\naxs[1, 1].set_xlabel('Time')\naxs[1, 1].set_ylabel('Value')\n\n# Plot the fifth subplot\naxs[2, 0].plot(x, y5, 'c-')\naxs[2, 0].set_title('Additional Metric 1')\naxs[2, 0].set_xlabel('Time')\naxs[2, 0].set_ylabel('Value')\n\n# Plot the sixth subplot\naxs[2, 1].plot(x, y6, 'y-')\naxs[2, 1].set_title('Additional Metric 2')\naxs[2, 1].set_xlabel('Time')\naxs[2, 1].set_ylabel('Value')\n\n# Adjust layout\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_54.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, axs = plt.subplots(1, 3, figsize=(12, 4))\n\n# Define the data\ndriving_styles = ['Passive', 'Rail', 'Replay', 'Sportive']\nrelaxation_levels = [1.2, 1.1, 1.0, 0.9]\nsnow_vs_rain = [1.3, 1.2, 1.1, 1.0]\nsnow_vs_fog = [1.4, 1.3, 1.2, 1.1]\nrain_vs_snow = [1.4, 1.3, 1.2, 1.1]\n\n# Plot the data\nfor ax, style in zip(axs, driving_styles):\n    ax.plot(relaxation_levels, label=style)\n    ax.set_xlabel('Relaxation Level')\n    ax.set_ylabel('Driving Style')\n    ax.legend()\n\n# Set the title for each subplot\naxs[0].set_title('Dry vs Rain')\naxs[1].set_title('Snow vs Fog')\naxs[2].set_title('Rain vs Snow')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_55.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 3.0))\n\n# Set the background color of the plot\nax.set_facecolor('lightblue')\n\n# Set the title of the plot\nax.set_title('Dynamic Performance Gain Across Different n_aug Levels')\n\n# Set the x-axis label\nax.set_xlabel('n_aug')\n\n# Set the y-axis label\nax.set_ylabel('Performance Gain (%)')\n\n# Define the data for the plot\nx = np.linspace(0, 8, 100)\ny_content = np.sin(x) * 5 + 5\ny_organization = np.cos(x) * 4 + 6\ny_language = np.tan(x) * 3 + 7\n\n# Plot the data\nax.plot(x, y_content, label='Content', color='blue')\nax.plot(x, y_organization, label='Organization', color='red')\nax.plot(x, y_language, label='Language', color='green')\n\n# Add markers to the plot\nax.plot([0, 2, 4, 6], [5, 6, 7, 8], 'ro')\nax.plot([1, 3, 5, 7], [6, 7, 8, 9], 'go')\nax.plot([0, 2, 4, 6], [4, 5, 6, 7], 'bo')\nax.plot([1, 3, 5, 7], [5, 6, 7, 8], 'mo')\n\n# Add a legend to the plot\nax.legend()\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/line_56.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\ndecomp_norms = [0, 20, 40, 60, 80]\ncoco_10k_acc = [0.65, 0.7, 0.75, 0.75, 0.75]\nlaion_10k_acc = [0.65, 0.7, 0.75, 0.75, 0.75]\ncoco_5k_acc = [0.65, 0.7, 0.75, 0.75, 0.75]\nlaion_5k_acc = [0.65, 0.7, 0.75, 0.75, 0.75]\n\n# Create a figure and a set of subplots\nfig, axs = plt.subplots(1, 3, figsize=(9.0, 3.0))\n\n# Plot 1: COCO 10K\naxs[0].plot(decomp_norms, coco_10k_acc, 'r-', label='COCO (10k)')\naxs[0].set_title('COCO 10K')\naxs[0].set_xlabel('Deposition IO Norm')\naxs[0].set_ylabel('Accuracy')\naxs[0].legend()\n\n# Plot 2: LAION 10K\naxs[1].plot(decomp_norms, laion_10k_acc, 'b-', label='LAION (10k)')\naxs[1].set_title('LAION 10K')\naxs[1].set_xlabel('Deposition IO Norm')\naxs[1].set_ylabel('Accuracy')\naxs[1].legend()\n\n# Plot 3: COCO & LAION 5K\naxs[2].plot(decomp_norms, coco_5k_acc, 'g-', label='COCO (5k)')\naxs[2].plot(decomp_norms, laion_5k_acc, 'y-', label='LAION (5k)')\naxs[2].set_title('COCO & LAION 5K')\naxs[2].set_xlabel('Deposition IO Norm')\naxs[2].set_ylabel('Accuracy')\naxs[2].legend()\n\n# Display the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_57.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(12.0, 9.0))\n\n# Set the x-axis limits\nax.set_xlim(0.025, 0.3)\n\n# Set the y-axis limits\nax.set_ylim(0.08, 0.9)\n\n# Set the x-axis ticks\nax.set_xticks([0.025, 0.05, 0.075, 0.1, 0.125, 0.15, 0.175, 0.2, 0.225, 0.25, 0.275, 0.3])\n\n# Set the y-axis ticks\nax.set_yticks([0.08, 0.1, 0.12, 0.14, 0.16, 0.18, 0.2, 0.22, 0.24, 0.26, 0.28, 0.3, 0.32, 0.34, 0.36, 0.38, 0.4, 0.42, 0.44, 0.46, 0.48, 0.5, 0.52, 0.54, 0.56, 0.58, 0.6, 0.62, 0.64, 0.66, 0.68, 0.7, 0.72, 0.74, 0.76, 0.78, 0.8, 0.82, 0.84, 0.86, 0.88, 0.9])\n\n# Set the x-axis label\nax.set_xlabel('Parameter Rate')\n\n# Set the y-axis label\nax.set_ylabel('Metric')\n\n# Set the title\nax.set_title('Error Rate vs. Learning Rate')\n\n# Plot the data\nax.plot([0.025, 0.05, 0.075, 0.1, 0.125, 0.15, 0.175, 0.2, 0.225, 0.25, 0.275, 0.3], [0.18, 0.16, 0.14, 0.12, 0.1, 0.08, 0.06, 0.04, 0.02, 0.0, 0.0, 0.0], 'b-', label='Error Rate vs. Learning Rate (Batch Size=64)')\nax.plot([0.025, 0.05, 0.075, 0.1, 0.125, 0.15, 0.175, 0.2, 0.225, 0.25, 0.275, 0.3], [0.18, 0.16, 0.14, 0.12, 0.1, 0.08, 0.06, 0.04, 0.02, 0.0, 0.0, 0.0], 'r-', label='Error Rate vs. Learning Rate (Batch Size=128)')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_58.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 4))\n\n# Plot the first line graph\nax.plot([0, 25, 50, 75, 100, 125, 150, 175, 200], [0.6, 0.5, 0.4, 0.3, 0.2, 0.1, 0.05, 0.02, 0.01], label='Base Model', color='blue')\nax.plot([0, 25, 50, 75, 100, 125, 150, 175, 200], [0.65, 0.55, 0.45, 0.35, 0.25, 0.15, 0.08, 0.04, 0.02], label='Our Model', color='orange')\n\n# Plot the second line graph\nax2 = ax.twinx()\nax2.plot([0, 25, 50, 75, 100, 125, 150, 175, 200], [0.6, 0.5, 0.4, 0.3, 0.2, 0.1, 0.05, 0.02, 0.01], label='Base Model', color='blue')\nax2.plot([0, 25, 50, 75, 100, 125, 150, 175, 200], [0.65, 0.55, 0.45, 0.35, 0.25, 0.15, 0.08, 0.04, 0.02], label='Our Model', color='orange')\n\n# Set labels and title\nax.set_xlabel('Training Iterations')\nax.set_ylabel('Metric Value')\nax.set_title('Metric 1')\nax.legend(loc='upper left')\n\nax2.set_ylabel('Metric Value')\nax2.set_title('Metric 2')\nax2.legend(loc='upper right')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_59.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(5.0, 3.0))\n\n# Set the title of the plot\nax.set_title('Accuracy')\n\n# Set the x-axis label\nax.set_xlabel('Training Iterations')\n\n# Set the y-axis label\nax.set_ylabel('Metric Value')\n\n# Plot the data\nax.plot([0, 25, 50, 75, 100, 125, 150, 175, 200], [0.6, 0.5, 0.4, 0.3, 0.2, 0.1, 0.05, 0.02, 0.01], color='blue', label='Base Model')\nax.plot([0, 25, 50, 75, 100, 125, 150, 175, 200], [0.6, 0.55, 0.5, 0.45, 0.4, 0.35, 0.3, 0.25, 0.2], color='cyan', label='Our Model')\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(9.0, 6.0))\n\n# Set the x-axis limits\nax.set_xlim(10**1, 6*10**1)\n\n# Set the y-axis limits\nax.set_ylim(10**-13, 10**-4)\n\n# Set the x-axis ticks\nax.set_xticks([10**1, 2*10**1, 3*10**1, 4*10**1, 5*10**1, 6*10**1])\n\n# Set the y-axis ticks\nax.set_yticks([10**-13, 10**-10, 10**-7, 10**-4, 10**-1])\n\n# Set the x-axis tick labels\nax.set_xticklabels(['10^1', '2*10^1', '3*10^1', '4*10^1', '5*10^1', '6*10^1'])\n\n# Set the y-axis tick labels\nax.set_yticklabels(['10^-13', '10^-10', '10^-7', '10^-4', '10^-1'])\n\n# Set the title of the plot\nax.set_title('Plot Title')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('red')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the plot area\nax.set_facecolor('white')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot title\nax.set_title('Plot Title', color='black')\n\n# Set the color of the plot legend\nax.legend(['Standard', 'Constrained'], loc='upper left', frameon=True, fancybox=True, shadow=True, facecolor='white', edgecolor='black')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_60.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Performance and Efficiency Over Weeks')\n\n# Set the x-axis label\nax.set_xlabel('Weeks')\n\n# Set the y-axis label\nax.set_ylabel('Efficiency')\n\n# Set the x-axis limits\nax.set_xlim(0, 25)\n\n# Set the y-axis limits\nax.set_ylim(-1.5, 1.5)\n\n# Set the x-axis ticks\nax.set_xticks([0, 5, 10, 15, 20, 25])\n\n# Set the y-axis ticks\nax.set_yticks([-1.5, -1.0, -0.5, 0.0, 0.5, 1.0, 1.5])\n\n# Set the grid\nax.grid(True)\n\n# Set the performance line\nperformance_line = [0.5, 0.7, 0.9, 1.1, 1.3, 1.4, 1.3, 1.2, 1.1, 1.0, 0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1, 0.0, 0.1, 0.2, 0.3, 0.4, 0.5]\nax.plot(performance_line, 'b-')\n\n# Set the efficiency line\nefficiency_line = [0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.4, 1.3, 1.2, 1.1, 1.0, 0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1]\nax.plot(efficiency_line, 'r-')\n\n# Set the legend\nax.legend(['Performance', 'Efficiency'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_61.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Set the title of the plot\nax.set_title('Performance and Efficiency Analysis')\n\n# Set the x-axis label\nax.set_xlabel('Weeks')\n\n# Set the y-axis label\nax.set_ylabel('Values')\n\n# Define the data for the plot\nx = [0, 5, 10, 15, 20, 25]\ny1 = [0.3, 0.8, 0.7, 0.9, 0.5, 0.2]\ny2 = [0.4, 0.9, 0.8, 1.0, 0.6, 0.3]\n\n# Plot the data\nax.plot(x, y1, 'b-', label='Performance')\nax.plot(x, y2, 'r-', label='Efficiency')\n\n# Add a legend to the plot\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_62.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Detailed Performance and Efficiency Analysis Over Weeks')\n\n# Set the x-axis label\nax.set_xlabel('Weeks')\n\n# Set the y-axis label\nax.set_ylabel('Efficiency')\n\n# Set the y-axis limits\nax.set_ylim(0, 12)\n\n# Set the x-axis limits\nax.set_xlim(0, 30)\n\n# Set the grid\nax.grid(True)\n\n# Set the background color\nax.set_facecolor('#e0f3db')\n\n# Set the performance data\nperformance_data = [0.8, 0.9, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1, 0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.1, 1.0, 0.9, 0.8, 0.7, 0.6, 0.5]\n\n# Set the efficiency data\nefficiency_data = [0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.1, 1.0, 0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1, 0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0]\n\n# Set the growth data\ngrowth_data = [0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.1, 1.0, 0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1, 0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9]\n\n# Plot the performance data\nax.plot(performance_data, 'bo-', label='Performance')\n\n# Plot the efficiency data\nax.plot(efficiency_data, 'ro-', label='Efficiency')\n\n# Plot the growth data\nax.plot(growth_data, 'go-', label='Growth')\n\n# Add legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_63.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(12.0, 8.0))\n\n# Set the background color of the plot\nax.set_facecolor('bisque')\n\n# Set the title of the plot\nax.set_title('Dynamic Data Presentation Across Weeks')\n\n# Set the x-axis label\nax.set_xlabel('Weeks')\n\n# Set the y-axis label\nax.set_ylabel('Normalized Value')\n\n# Define the data for each series\nx = [0, 5, 10, 15, 20, 25]\ny1 = [0.6, 0.4, 0.2, 0.3, 0.5, 0.7]\ny2 = [0.8, 0.6, 0.4, 0.5, 0.7, 0.9]\ny3 = [0.7, 0.5, 0.3, 0.4, 0.6, 0.8]\n\n# Plot the data with different colors and line styles\nax.plot(x, y1, 'b--', label='Data Series 1')\nax.plot(x, y2, 'g--', label='Data Series 2 with Gradient')\nax.plot(x, y3, 'm--', label='Data Series 3')\n\n# Add a legend to the plot\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_64.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nx = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ny1 = [90, 85, 80, 75, 70, 65, 60, 55, 50, 45]\ny2 = [85, 80, 75, 70, 65, 60, 55, 50, 45, 40]\ny3 = [80, 75, 70, 65, 60, 55, 50, 45, 40, 35]\ny4 = [75, 70, 65, 60, 55, 50, 45, 40, 35, 30]\ny5 = [70, 65, 60, 55, 50, 45, 40, 35, 30, 25]\ny6 = [65, 60, 55, 50, 45, 40, 35, 30, 25, 20]\n\n# Plotting\nfig, ax = plt.subplots(figsize=(12.0, 6.0))\nax.plot(x, y1, 'b-', label='BaCE')\nax.plot(x, y2, 'c-', label='LWF')\nax.plot(x, y3, 'g-', label='EWC')\nax.plot(x, y4, 'm-', label='SEQ')\n\n# Markers\nax.plot(1, 90, 'b^', markersize=10)\nax.plot(2, 85, 'c^', markersize=10)\nax.plot(3, 80, 'g^', markersize=10)\nax.plot(4, 75, 'm^', markersize=10)\nax.plot(5, 70, 'b^', markersize=10)\nax.plot(6, 65, 'c^', markersize=10)\nax.plot(7, 60, 'g^', markersize=10)\nax.plot(8, 55, 'm^', markersize=10)\nax.plot(9, 50, 'b^', markersize=10)\nax.plot(10, 45, 'c^', markersize=10)\n\nax.plot(1, 85, 'c^', markersize=10)\nax.plot(2, 80, 'g^', markersize=10)\nax.plot(3, 75, 'm^', markersize=10)\nax.plot(4, 70, 'b^', markersize=10)\nax.plot(5, 65, 'c^', markersize=10)\nax.plot(6, 60, 'g^', markersize=10)\nax.plot(7, 55, 'm^', markersize=10)\nax.plot(8, 50, 'b^', markersize=10)\nax.plot(9, 45, 'c^', markersize=10)\nax.plot(10, 40, 'g^', markersize=10)\n\nax.plot(1, 80, 'g^', markersize=10)\nax.plot(2, 75, 'm^', markersize=10)\nax.plot(3, 70, 'b^', markersize=10)\nax.plot(4, 65, 'c^', markersize=10)\nax.plot(5, 60, 'g^', markersize=10)\nax.plot(6, 55, 'm^', markersize=10)\nax.plot(7, 50, 'b^', markersize=10)\nax.plot(8, 45, 'c^', markersize=10)\nax.plot(9, 40, 'g^', markersize=10)\nax.plot(10, 35, 'm^', markersize=10)\n\nax.plot(1, 75, 'm^', markersize=10)\nax.plot(2, 70, 'b^', markersize=10)\nax.plot(3, 65, 'c^', markersize=10)\nax.plot(4, 60, 'g^', markersize=10)\nax.plot(5, 55, 'm^', markersize=10)\nax.plot(6, 50, 'b^', markersize=10)\nax.plot(7, 45, 'c^', markersize=10)\nax.plot(8, 40, 'g^', markersize=10)\nax.plot(9, 35, 'm^', markersize=10)\nax.plot(10, 30, 'b^', markersize=10)\n\nax.plot(1, 70, 'b^', markersize=10)\nax.plot(2, 65, 'c^', markersize=10)\nax.plot(3, 60, 'g^', markersize=10)\nax.plot(4, 55, 'm^', markersize=10)\nax.plot(5, 50, 'b^', markersize=10)\nax.plot(6, 45, 'c^', markersize=10)\nax.plot(7, 40, 'g^', markersize=10)\nax.plot(8, 35, 'm^', markersize=10)\nax.plot(9, 30, 'b^', markersize=10)\nax.plot(10, 25, 'c^', markersize=10)\n\nax.plot(1, 65, 'c^', markersize=10)\nax.plot(2, 60, 'g^', markersize=10)\nax.plot(3, 55, 'm^', markersize=10)\nax.plot(4, 50, 'b^', markersize=10)\nax.plot(5, 45, 'c^', markersize=10)\nax.plot(6, 40, 'g^', markersize=10)\nax.plot(7, 35, 'm^', markersize=10)\nax.plot(8, 30, 'b^', markersize=10)\nax.plot(9, 25, 'c^', markersize=10)\nax.plot(10, 20, 'g^', markersize=10)\n\nax.plot(1, 60, 'g^', markersize=10)\nax.plot(2, 55, 'm^', markersize=10)\nax.plot(3, 50, 'b^', markersize=10)\nax.plot(4, 45, 'c^', markersize=10)\nax.plot(5, 40, 'g^', markersize=10)\nax.plot(6, 35, 'm^', markersize=10)\nax.plot(7, 30, 'b^', markersize=10)\nax.plot(8, 25, 'c^', markersize=10)\nax.plot(9, 20, 'g^', markersize=10)\nax.plot(10, 15, 'm^', markersize=10)\n\nax.plot(1, 55, 'm^', markersize=10)\nax.plot(2, 50, 'b^', markersize=10)\nax.plot(3, 45, 'c^', markersize=10)\nax.plot(4, 40, 'g^', markersize=10)\nax.plot(5, 35, 'm^', markersize=10)\nax.plot(6, 30, 'b^', markersize=10)\nax.plot(7, 25, 'c^', markersize=10)\nax.plot(8, 20, 'g^', markersize=10)\nax.plot(9, 15, 'm^', markersize=10)\nax.plot(10, 10, 'b^', markersize=10)\n\nax.plot(1, 50, 'b^', markersize=10)\nax.plot(2, 45, 'c^', markersize=10)\nax.plot(3, 40, 'g^', markersize=10)\nax.plot(4, 35, 'm^', markersize=10)\nax.plot(5, 30, 'b^', markersize=10)\nax.plot(6, 25, 'c^', markersize=10)\nax.plot(7, 20, 'g^', markersize=10)\nax.plot(8, 15, 'm^', markersize=10)\nax.plot(9, 10, 'b^', markersize=10)\nax.plot(10, 5, 'c^', markersize=10)\n\nax.plot(1, 45, 'c^', markersize=10)\nax.plot(2, 40, 'g^', markersize=10)\nax.plot(3, 35, 'm^', markersize=10)\nax.plot(4, 30, 'b^', markersize=10)\nax.plot(5, 25, 'c^', markersize=10)\nax.plot(6, 20, 'g^', markersize=10)\nax.plot(7, 15, 'm^', markersize=10)\nax.plot(8, 10, 'b^', markersize=10)\nax.plot(9, 5, 'c^', markersize=10)\nax.plot(10, 0, 'g^', markersize=10)\n\nax.set_xlabel('Task')\nax.set_ylabel('Average Accuracy (%)')\nax.legend()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_65.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\nx = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ny1 = [85, 80, 75, 70, 65, 60, 55, 50, 45, 40]\ny2 = [88, 83, 78, 73, 68, 63, 58, 53, 48, 43]\ny3 = [82, 77, 72, 67, 62, 57, 52, 47, 42, 37]\ny4 = [84, 79, 74, 69, 64, 59, 54, 49, 44, 39]\ny5 = [86, 81, 76, 71, 66, 61, 56, 51, 46, 41]\ny6 = [87, 82, 77, 72, 67, 62, 57, 52, 47, 42]\ny7 = [89, 84, 79, 74, 69, 64, 59, 54, 49, 44]\ny8 = [85, 80, 75, 70, 65, 60, 55, 50, 45, 40]\ny9 = [88, 83, 78, 73, 68, 63, 58, 53, 48, 43]\ny10 = [82, 77, 72, 67, 62, 57, 52, 47, 42, 37]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 3.0))\n\n# Plot the data\nax.plot(x, y1, label='BaCE')\nax.plot(x, y2, label='EWC')\nax.plot(x, y3, label='LWF')\nax.plot(x, y4, label='SEQ')\n\n# Set the title and labels\nax.set_title('Performance Comparison: BaCE vs EWC')\nax.set_xlabel('Task')\nax.set_ylabel('Average Accuracy (%)')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_66.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(9.0, 7.0))\n\n# Set the title of the plot\nax.set_title('model1 Performance')\n\n# Set the x-axis label\nax.set_xlabel('Iterations')\n\n# Set the y-axis label\nax.set_ylabel('Success Rate')\n\n# Create a rectangle patch\nrect = plt.Rectangle((0, 0), 10, 10, color='blue')\nax.add_patch(rect)\n\n# Create a line plot\nax.plot([0, 250, 500, 750, 1000, 1250, 1500, 1750, 2000], [0.2, 0.4, 0.6, 0.8, 1.0, 0.8, 0.6, 0.4, 0.2], color='red')\n\n# Create a second rectangle patch\nrect = plt.Rectangle((0, 0), 10, 10, color='pink')\nax.add_patch(rect)\n\n# Create a second line plot\nax.plot([0, 250, 500, 750, 1000, 1250, 1500, 1750, 2000], [0.3, 0.5, 0.7, 0.9, 1.1, 0.9, 0.7, 0.5, 0.3], color='purple')\n\n# Create a third rectangle patch\nrect = plt.Rectangle((0, 0), 10, 10, color='blue')\nax.add_patch(rect)\n\n# Create a third line plot\nax.plot([0, 250, 500, 750, 1000, 1250, 1500, 1750, 2000], [0.4, 0.6, 0.8, 1.0, 0.8, 0.6, 0.4, 0.2, 0.0], color='pink')\n\n# Create a fourth rectangle patch\nrect = plt.Rectangle((0, 0), 10, 10, color='blue')\nax.add_patch(rect)\n\n# Create a fourth line plot\nax.plot([0, 250, 500, 750, 1000, 1250, 1500, 1750, 2000], [0.5, 0.7, 0.9, 1.1, 0.9, 0.7, 0.5, 0.3, 0.1], color='purple')\n\n# Create a fifth rectangle patch\nrect = plt.Rectangle((0, 0), 10, 10, color='blue')\nax.add_patch(rect)\n\n# Create a fifth line plot\nax.plot([0, 250, 500, 750, 1000, 1250, 1500, 1750, 2000], [0.6, 0.8, 1.0, 0.8, 0.6, 0.4, 0.2, 0.0, -0.2], color='pink')\n\n# Create a sixth rectangle patch\nrect = plt.Rectangle((0, 0), 10, 10, color='blue')\nax.add_patch(rect)\n\n# Create a sixth line plot\nax.plot([0, 250, 500, 750, 1000, 1250, 1500, 1750, 2000], [0.7, 0.9, 1.1, 0.9, 0.7, 0.5, 0.3, 0.1, -0.1], color='purple')\n\n# Create a seventh rectangle patch\nrect = plt.Rectangle((0, 0), 10, 10, color='blue')\nax.add_patch(rect)\n\n# Create a seventh line plot\nax.plot([0, 250, 500, 750, 1000, 1250, 1500, 1750, 2000], [0.8, 1.0, 0.8, 0.6, 0.4, 0.2, 0.0, -0.2, -0.4], color='pink')\n\n# Create a eighth rectangle patch\nrect = plt.Rectangle((0, 0), 10, 10, color='blue')\nax.add_patch(rect)\n\n# Create a eighth line plot\nax.plot([0, 250, 500, 750, 1000, 1250, 1500, 1750, 2000], [0.9, 1.1, 0.9, 0.7, 0.5, 0.3, 0.1, -0.1, -0.3], color='purple')\n\n# Create a ninth rectangle patch\nrect = plt.Rectangle((0, 0), 10, 10, color='blue')\nax.add_patch(rect)\n\n# Create a ninth line plot\nax.plot([0, 250, 500, 750, 1000, 1250, 1500, 1750, 2000], [1.0, 0.8, 0.6, 0.4, 0.2, 0.0, -0.2, -0.4, -0.6], color='pink')\n\n# Create a tenth rectangle patch\nrect = plt.Rectangle((0, 0), 10, 10, color='blue')\nax.add_patch(rect)\n\n# Create a tenth line plot\nax.plot([0, 250, 500, 750, 1000, 1250, 1500, 1750, 2000], [0.8, 0.6, 0.4, 0.2, 0.0, -0.2, -0.4, -0.6, -0.8], color='purple')\n\n# Create a eleventh rectangle patch\nrect = plt.Rectangle((0, 0), 10, 10, color='blue')\nax.add_patch(rect)\n\n# Create a eleventh line plot\nax.plot([0, 250, 500, 750, 1000, 1250, 1500, 1750, 2000], [0.6, 0.4, 0.2, 0.0, -0.2, -0.4, -0.6, -0.8, -1.0], color='pink')\n\n# Create a twelfth rectangle patch\nrect = plt.Rectangle((0, 0), 10, 10, color='blue')\nax.add_patch(rect)\n\n# Create a twelfth line plot\nax.plot([0, 250, 500, 750, 1000, 1250, 1500, 1750, 2000], [0.4, 0.2, 0.0, -0.2, -0.4, -0.6, -0.8, -1.0, -1.2], color='purple')\n\n# Create a thirteenth rectangle patch\nrect = plt.Rectangle((0, 0), 10, 10, color='blue')\nax.add_patch(rect)\n\n# Create a thirteenth line plot\nax.plot([0, 250, 500, 750, 1000, 1250, 1500, 1750, 2000], [0.2, 0.0, -0.2, -0.4, -0.6, -0.8, -1.0, -1.2, -1.4], color='pink')\n\n# Create a fourteenth rectangle patch\nrect = plt.Rectangle((0, 0), 10, 10, color='blue')\nax.add_patch(rect)\n\n# Create a fourteenth line plot\nax.plot([0, 250, 500, 750, 1000, 1250, 1500, 1750, 2000], [0.0, -0.2, -0.4, -0.6, -0.8, -1.0, -1.2, -1.4, -1.6], color='purple')\n\n# Create a fifteenth rectangle patch\nrect = plt.Rectangle((0, 0), 10, 10, color='blue')\nax.add_patch(rect)\n\n# Create a fifteenth line plot\nax.plot([0, 250, 500, 750, 1000, 1250, 1500, 1750, 2000], [-0.2, -0.4, -0.6, -0.8, -1.0, -1.2, -1.4, -1.6, -1.8], color='pink')\n\n# Create a sixteenth rectangle patch\nrect = plt.Rectangle((0, 0), 10, 10, color='blue')\nax.add_patch(rect)\n\n# Create a sixteenth line plot\nax.plot([0, 250, 500, 750, 1000, 1250, 1500, 1750, 2000], [-0.4, -0.6, -0.8, -1.0, -1.2, -1.4, -1.6, -1.8, -2.0], color='purple')\n\n# Create a seventeenth rectangle patch\nrect = plt.Rectangle((0, 0), 10, 10, color='blue')\nax.add_patch(rect)\n\n# Create a seventeenth line plot\nax.plot([0, 250, 500, 750, 1000, 1250, 1500, 1750, 2000], [-0.6, -0.8, -1.0, -1.2, -1.4, -1.6, -1.8, -2.0, -2.2], color='pink')\n\n# Create a eighteenth rectangle patch\nrect = plt.Rectangle((0, 0), 10, 10, color='blue')\nax.add_patch(rect)\n\n# Create a eighteenth line plot\nax.plot([0, 250, 500, 750, 1000, 1250, 1500, 1750, 2000], [-0.8, -1.0, -1.2, -1.4, -1.6, -1.8, -2.0, -2.2, -2.4], color='purple')\n\n# Create a nineteenth rectangle patch\nrect = plt.Rectangle((0, 0), 10, 10, color='blue')\nax.add_patch(rect)\n\n# Create a nineteenth line plot\nax.plot([0, 250, 500, 750, 1000, 1250, 1500, 1750, 2000], [-1.0, -1.2, -1.4, -1.6, -1.8, -2.0, -2.2, -2.4, -2.6], color='pink')\n\n# Create a twentieth rectangle patch\nrect = plt.Rectangle((0, 0), 10, 10, color='blue')\nax.add_patch(rect)\n\n# Create a twentieth line plot\nax.plot([0, 250, 500, 750, 1000, 1250, 1500, 1750, 2000], [-0.8, -0.6, -0.4, -0.2, 0.0, 0.2, 0.4, 0.6, 0.8], color='purple')\n\n# Create a twenty-first rectangle patch\nrect = plt.Rectangle((0, 0), 10, 10, color='blue')\nax.add_patch(rect)\n\n# Create a twenty-first line plot\nax.plot([0, 250, 500, 750, 1000, 1250, 1500, 1750, 2000], [-0.6, -0.4, -0.2, 0.0, 0.2, 0.4, 0.6, 0.8, 1.0], color='pink')\n\n# Create a twenty-second rectangle patch\nrect = plt.Rectangle((0, 0), 10, 10, color='blue')\nax.add_patch(rect)\n\n# Create a twenty-second line plot\nax.plot([0, 250, 500, 750, 1000, 1250, 1500, 1750, 2000], [-0.4, -0.2, 0.0, 0.2, 0.4, 0.6, 0.8, 1.0, 1.2], color='purple')\n\n# Create a twenty-third rectangle patch\nrect = plt.Rectangle((0, 0), 10, 10, color='blue')\nax.add_patch(rect)\n\n# Create a twenty-third line plot\nax.plot([0, 250, 500, 750, 1000, 1250, 1500, 1750, 2000], [-0.2, 0.0, 0.2, 0.4, 0.6, 0.8, 1.0, 1.2, 1.4], color='pink')\n\n# Create a twenty-fourth rectangle patch\nrect = plt.Rectangle((0, 0), 10, 10, color='blue')\nax.add_patch(rect)\n\n# Create a twenty-fourth line plot\nax.plot([0, 250, 500, 750, 1000, 1250, 1500, 1750, 2000], [0.0, 0.2, 0.4, 0.6, 0.8, 1.0, 1.2, 1.4, 1.6], color='purple')\n\n# Create a twenty-fifth rectangle patch\nrect = plt.Rectangle((0, 0), 10, 10, color='blue')\nax.add_patch(rect)\n\n# Create a twenty-fifth line plot\nax.plot([0, 250, 500, 750, 1000, 1250, 1500, 1750, 2000], [0.2, 0.4, 0.6, 0.8, 1.0, 1.2, 1.4, 1.6, 1.8], color='pink')\n\n# Create a twenty-sixth rectangle patch\nrect = plt.Rectangle((0, 0), 10, 10, color='blue')\nax.add_patch(rect)\n\n# Create a twenty-sixth line plot\nax.plot([0, 250, 500, 750, 1000, 1250, 1500, 1750, 2000], [0.4, 0.6, 0.8, 1.0, 1.2, 1.4, 1.6, 1.8, 2.0], color='purple')\n\n# Create a twenty-seventh rectangle patch\nrect = plt.Rectangle((0, 0), 10, 10, color='blue')\nax.add_patch(rect)\n\n# Create a twenty-seventh line plot\nax.plot([0, 250, 500, 750, 1000, 1250, 1500, 1750, 2000], [0.6, 0.8, 1.0, 1.2, 1.4, 1.6, 1.8, 2.0, 2.2], color='pink')\n\n# Create a twenty-eighth rectangle patch\nrect = plt.Rectangle((0, 0), 10, 10, color='blue')\nax.add_patch(rect)\n\n# Create a twenty-eighth line plot\nax.plot([0, 250, 500, 750, 1000, 1250, 1500, 1750, 2000], [0.8, 1.0, 1.2, 1.4, 1.6, 1.8, 2.0, 2.2, 2.4], color='purple')\n\n# Create a twenty-ninth rectangle patch\nrect = plt.Rectangle((0, 0), 10, 10, color='blue')\nax.add_patch(rect)\n\n# Create a twenty-ninth line plot\nax.plot([0, 250, 50"}
{"file": "dataset/ori_500/line_67.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nx = [2, 3, 4, 5, 6, 7, 8]\ny1 = [2.5, 3.5, 4.5, 5.5, 6.5, 7.5, 8.5]\ny2 = [2.3, 3.3, 4.3, 5.3, 6.3, 7.3, 8.3]\ny3 = [2.1, 3.1, 4.1, 5.1, 6.1, 7.1, 8.1]\n\n# Plot\nfig, ax = plt.subplots(figsize=(6.0, 5.0))\nax.plot(x, y1, 'b-', label='WRR')\nax.plot(x, y2, 'r-', label='SDM')\nax.plot(x, y3, 'g-', label='AMM')\n\n# Markers\nfor i in range(len(x)):\n    ax.plot(x[i], y1[i], 'bo')\n    ax.plot(x[i], y2[i], 'ro')\n    ax.plot(x[i], y3[i], 'go')\n\n# Legend\nax.legend()\n\n# Title and labels\nax.set_title('Microphone Performance')\nax.set_xlabel('Number of microphones')\nax.set_ylabel('Performance (%)')\n\n# Grid\nax.grid(True)\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_68.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 7.0))\n\n# Set the title and labels\nax.set_title('Trend Analysis')\nax.set_xlabel('Number of microphones')\nax.set_ylabel('WER (%)')\n\n# Define the data\nx = [2, 3, 4, 5, 6, 7, 8]\ny1 = [2.5, 3.5, 4.5, 5.5, 6.5, 7.5, 8.5]\ny2 = [2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0]\ny3 = [2.2, 3.2, 4.2, 5.2, 6.2, 7.2, 8.2]\n\n# Plot the data\nax.plot(x, y1, color='green', label='IHM Trend')\nax.plot(x, y2, color='purple', label='SDM Trend')\nax.plot(x, y3, color='orange', label='AMR (dev)')\n\n# Add markers\nfor i in range(len(x)):\n    ax.plot(x[i], y1[i], 'o', color='blue')\n    ax.plot(x[i], y2[i], 'o', color='orange')\n    ax.plot(x[i], y3[i], 'o', color='red')\n\n# Add legend\nax.legend()\n\n# Set the y-axis limits\nax.set_ylim(2, 9)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_69.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nx = [2, 3, 4, 5, 6, 7, 8]\ny1 = [0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3]\ny2 = [0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2]\ny3 = [0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1]\n\n# Plot\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\nax.plot(x, y1, 'b-', label='Highlight 3')\nax.plot(x, y2, 'r-', label='Threshold')\nax.plot(x, y3, 'g-', label='Highlight 5')\n\n# Markers\nax.plot(2, 0.9, 'bo', markersize=10)\nax.plot(3, 0.8, 'ro', markersize=10)\nax.plot(4, 0.7, 'bo', markersize=10)\nax.plot(5, 0.6, 'ro', markersize=10)\nax.plot(6, 0.5, 'bo', markersize=10)\nax.plot(7, 0.4, 'ro', markersize=10)\nax.plot(8, 0.3, 'bo', markersize=10)\n\n# Legend\nlegend = ax.legend(loc='upper left', shadow=True)\n\n# Title and labels\nax.set_title('Wavelength vs Number of Microphones')\nax.set_xlabel('Number of Microphones')\nax.set_ylabel('Wavelength (m)')\n\n# Grid\nax.grid(True)\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, axes = plt.subplots(1, 4, figsize=(12, 4))\n\n# Define the data for each subplot\ndata = [\n    [78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89],\n    [78, 77, 76, 75, 74, 73, 72, 71, 70, 69, 68, 67],\n    [78, 77, 76, 75, 74, 73, 72, 71, 70, 69, 68, 67],\n    [78, 77, 76, 75, 74, 73, 72, 71, 70, 69, 68, 67]\n]\n\n# Plot the data\nfor ax, d in zip(axes, data):\n    ax.plot(d, 'b-')\n    ax.fill_between(range(len(d)), d, color='skyblue')\n\n# Set the title for each subplot\ntitles = ['a', 'b', 'c', 'd']\nfor ax, t in zip(axes, titles):\n    ax.set_title(f'({t})')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_70.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(12, 5))\n\n# Plot the first graph\nx = np.linspace(2, 8, 100)\ny = np.sin(x)\nax.plot(x, y, 'y-', label='LibriCSS WER')\nax.plot(x, y + 0.1, 'r-', label='Threshold')\n\n# Add markers for specific points\nmarkers = [2, 3, 4, 5, 6, 7, 8]\nfor m in markers:\n    ax.plot(m, np.sin(m), 'ro')\n\n# Set the title and labels\nax.set_title('Highlight 3')\nax.set_xlabel('Number of Microphones')\nax.set_ylabel('WER (%)')\n\n# Add a legend\nax.legend()\n\n# Create a second subplot\nax2 = fig.add_subplot(122)\n\n# Plot the second graph\nx2 = np.linspace(2, 8, 100)\ny2 = np.cos(x2)\nax2.plot(x2, y2, 'g-', label='AMi WER')\nax2.plot(x2, y2 + 0.1, 'r-', label='Threshold')\n\n# Add markers for specific points\nmarkers2 = [2, 3, 4, 5, 6, 7, 8]\nfor m in markers2:\n    ax2.plot(m, np.cos(m), 'go')\n\n# Set the title and labels\nax2.set_title('Highlight 5')\nax2.set_xlabel('Number of Microphones')\nax2.set_ylabel('WER (%)')\n\n# Add a legend\nax2.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_71.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 12.0))\n\n# Set the title of the plot\nax.set_title('SPMotif-0.5')\n\n# Create a rectangle with a blue fill color\nrect = plt.Rectangle((0.1, 0.4), 0.8, 0.2, facecolor='blue')\nax.add_patch(rect)\n\n# Create a rectangle with a green fill color\nrect = plt.Rectangle((0.3, 0.4), 0.8, 0.2, facecolor='green')\nax.add_patch(rect)\n\n# Create a rectangle with a light blue fill color\nrect = plt.Rectangle((0.5, 0.4), 0.8, 0.2, facecolor='lightblue')\nax.add_patch(rect)\n\n# Create a rectangle with a light green fill color\nrect = plt.Rectangle((0.7, 0.4), 0.8, 0.2, facecolor='lightgreen')\nax.add_patch(rect)\n\n# Create a rectangle with a light blue fill color\nrect = plt.Rectangle((0.9, 0.4), 0.8, 0.2, facecolor='lightblue')\nax.add_patch(rect)\n\n# Create a rectangle with a light green fill color\nrect = plt.Rectangle((0.1, 0.6), 0.8, 0.2, facecolor='lightgreen')\nax.add_patch(rect)\n\n# Create a rectangle with a light blue fill color\nrect = plt.Rectangle((0.3, 0.6), 0.8, 0.2, facecolor='lightblue')\nax.add_patch(rect)\n\n# Create a rectangle with a light green fill color\nrect = plt.Rectangle((0.5, 0.6), 0.8, 0.2, facecolor='lightgreen')\nax.add_patch(rect)\n\n# Create a rectangle with a light blue fill color\nrect = plt.Rectangle((0.7, 0.6), 0.8, 0.2, facecolor='lightblue')\nax.add_patch(rect)\n\n# Create a rectangle with a light green fill color\nrect = plt.Rectangle((0.9, 0.6), 0.8, 0.2, facecolor='lightgreen')\nax.add_patch(rect)\n\n# Create a rectangle with a light blue fill color\nrect = plt.Rectangle((0.1, 0.8), 0.8, 0.2, facecolor='lightblue')\nax.add_patch(rect)\n\n# Create a rectangle with a light green fill color\nrect = plt.Rectangle((0.3, 0.8), 0.8, 0.2, facecolor='lightgreen')\nax.add_patch(rect)\n\n# Create a rectangle with a light blue fill color\nrect = plt.Rectangle((0.5, 0.8), 0.8, 0.2, facecolor='lightblue')\nax.add_patch(rect)\n\n# Create a rectangle with a light green fill color\nrect = plt.Rectangle((0.7, 0.8), 0.8, 0.2, facecolor='lightgreen')\nax.add_patch(rect)\n\n# Create a rectangle with a light blue fill color\nrect = plt.Rectangle((0.9, 0.8), 0.8, 0.2, facecolor='lightblue')\nax.add_patch(rect)\n\n# Create a rectangle with a light green fill color\nrect = plt.Rectangle((0.1, 1.0), 0.8, 0.2, facecolor='lightgreen')\nax.add_patch(rect)\n\n# Create a rectangle with a light blue fill color\nrect = plt.Rectangle((0.3, 1.0), 0.8, 0.2, facecolor='lightblue')\nax.add_patch(rect)\n\n# Create a rectangle with a light green fill color\nrect = plt.Rectangle((0.5, 1.0), 0.8, 0.2, facecolor='lightgreen')\nax.add_patch(rect)\n\n# Create a rectangle with a light blue fill color\nrect = plt.Rectangle((0.7, 1.0), 0.8, 0.2, facecolor='lightblue')\nax.add_patch(rect)\n\n# Create a rectangle with a light green fill color\nrect = plt.Rectangle((0.9, 1.0), 0.8, 0.2, facecolor='lightgreen')\nax.add_patch(rect)\n\n# Create a rectangle with a light blue fill color\nrect = plt.Rectangle((0.1, 1.2), 0.8, 0.2, facecolor='lightblue')\nax.add_patch(rect)\n\n# Create a rectangle with a light green fill color\nrect = plt.Rectangle((0.3, 1.2), 0.8, 0.2, facecolor='lightgreen')\nax.add_patch(rect)\n\n# Create a rectangle with a light blue fill color\nrect = plt.Rectangle((0.5, 1.2), 0.8, 0.2, facecolor='lightblue')\nax.add_patch(rect)\n\n# Create a rectangle with a light green fill color\nrect = plt.Rectangle((0.7, 1.2), 0.8, 0.2, facecolor='lightgreen')\nax.add_patch(rect)\n\n# Create a rectangle with a light blue fill color\nrect = plt.Rectangle((0.9, 1.2), 0.8, 0.2, facecolor='lightblue')\nax.add_patch(rect)\n\n# Create a rectangle with a light green fill color\nrect = plt.Rectangle((0.1, 1.4), 0.8, 0.2, facecolor='lightgreen')\nax.add_patch(rect)\n\n# Create a rectangle with a light blue fill color\nrect = plt.Rectangle((0.3, 1.4), 0.8, 0.2, facecolor='lightblue')\nax.add_patch(rect)\n\n# Create a rectangle with a light green fill color\nrect = plt.Rectangle((0.5, 1.4), 0.8, 0.2, facecolor='lightgreen')\nax.add_patch(rect)\n\n# Create a rectangle with a light blue fill color\nrect = plt.Rectangle((0.7, 1.4), 0.8, 0.2, facecolor='lightblue')\nax.add_patch(rect)\n\n# Create a rectangle with a light green fill color\nrect = plt.Rectangle((0.9, 1.4), 0.8, 0.2, facecolor='lightgreen')\nax.add_patch(rect)\n\n# Create a rectangle with a light blue fill color\nrect = plt.Rectangle((0.1, 1.6), 0.8, 0.2, facecolor='lightblue')\nax.add_patch(rect)\n\n# Create a rectangle with a light green fill color\nrect = plt.Rectangle((0.3, 1.6), 0.8, 0.2, facecolor='lightgreen')\nax.add_patch(rect)\n\n# Create a rectangle with a light blue fill color\nrect = plt.Rectangle((0.5, 1.6), 0.8, 0.2, facecolor='lightblue')\nax.add_patch(rect)\n\n# Create a rectangle with a light green fill color\nrect = plt.Rectangle((0.7, 1.6), 0.8, 0.2, facecolor='lightgreen')\nax.add_patch(rect)\n\n# Create a rectangle with a light blue fill color\nrect = plt.Rectangle((0.9, 1.6), 0.8, 0.2, facecolor='lightblue')\nax.add_patch(rect)\n\n# Create a rectangle with a light green fill color\nrect = plt.Rectangle((0.1, 1.8), 0.8, 0.2, facecolor='lightgreen')\nax.add_patch(rect)\n\n# Create a rectangle with a light blue fill color\nrect = plt.Rectangle((0.3, 1.8), 0.8, 0.2, facecolor='lightblue')\nax.add_patch(rect)\n\n# Create a rectangle with a light green fill color\nrect = plt.Rectangle((0.5, 1.8), 0.8, 0.2, facecolor='lightgreen')\nax.add_patch(rect)\n\n# Create a rectangle with a light blue fill color\nrect = plt.Rectangle((0.7, 1.8), 0.8, 0.2, facecolor='lightblue')\nax.add_patch(rect)\n\n# Create a rectangle with a light green fill color\nrect = plt.Rectangle((0.9, 1.8), 0.8, 0.2, facecolor='lightgreen')\nax.add_patch(rect)\n\n# Create a rectangle with a light blue fill color\nrect = plt.Rectangle((0.1, 2.0), 0.8, 0.2, facecolor='lightblue')\nax.add_patch(rect)\n\n# Create a rectangle with a light green fill color\nrect = plt.Rectangle((0.3, 2.0), 0.8, 0.2, facecolor='lightgreen')\nax.add_patch(rect)\n\n# Create a rectangle with a light blue fill color\nrect = plt.Rectangle((0.5, 2.0), 0.8, 0.2, facecolor='lightblue')\nax.add_patch(rect)\n\n# Create a rectangle with a light green fill color\nrect = plt.Rectangle((0.7, 2.0), 0.8, 0.2, facecolor='lightgreen')\nax.add_patch(rect)\n\n# Create a rectangle with a light blue fill color\nrect = plt.Rectangle((0.9, 2.0), 0.8, 0.2, facecolor='lightblue')\nax.add_patch(rect)\n\n# Create a rectangle with a light green fill color\nrect = plt.Rectangle((0.1, 2.2), 0.8, 0.2, facecolor='lightgreen')\nax.add_patch(rect)\n\n# Create a rectangle with a light blue fill color\nrect = plt.Rectangle((0.3, 2.2), 0.8, 0.2, facecolor='lightblue')\nax.add_patch(rect)\n\n# Create a rectangle with a light green fill color\nrect = plt.Rectangle((0.5, 2.2), 0.8, 0.2, facecolor='lightgreen')\nax.add_patch(rect)\n\n# Create a rectangle with a light blue fill color\nrect = plt.Rectangle((0.7, 2.2), 0.8, 0.2, facecolor='lightblue')\nax.add_patch(rect)\n\n# Create a rectangle with a light green fill color\nrect = plt.Rectangle((0.9, 2.2), 0.8, 0.2, facecolor='lightgreen')\nax.add_patch(rect)\n\n# Create a rectangle with a light blue fill color\nrect = plt.Rectangle((0.1, 2.4), 0.8, 0.2, facecolor='lightblue')\nax.add_patch(rect)\n\n# Create a rectangle with a light green fill color\nrect = plt.Rectangle((0.3, 2.4), 0.8, 0.2, facecolor='lightgreen')\nax.add_patch(rect)\n\n# Create a rectangle with a light blue fill color\nrect = plt.Rectangle((0.5, 2.4), 0.8, 0.2, facecolor='lightblue')\nax.add_patch(rect)\n\n# Create a rectangle with a light green fill color\nrect = plt.Rectangle((0.7, 2.4), 0.8, 0.2, facecolor='lightgreen')\nax.add_patch(rect)\n\n# Create a rectangle with a light blue fill color\nrect = plt.Rectangle((0.9, 2.4), 0.8, 0.2, facecolor='lightblue')\nax.add_patch(rect)\n\n# Create a rectangle with a light green fill color\nrect = plt.Rectangle((0.1, 2.6), 0.8, 0.2, facecolor='lightgreen')\nax.add_patch(rect)\n\n# Create a rectangle with a light blue fill color\nrect = plt.Rectangle((0.3, 2.6), 0.8, 0.2, facecolor='lightblue')\nax.add_patch(rect)\n\n# Create a rectangle with a light green fill color\nrect = plt.Rectangle((0.5, 2.6), 0.8, 0.2, facecolor='lightgreen')\nax.add_patch(rect)\n\n# Create a rectangle with a light blue fill color\nrect = plt.Rectangle((0.7, 2.6), 0.8, 0.2, facecolor='lightblue')\nax.add_patch(rect)\n\n# Create a rectangle with a light green fill color\nrect = plt.Rectangle((0.9, 2.6), 0.8, 0.2, facecolor='lightgreen')\nax.add_patch(rect)\n\n# Create a rectangle with a light blue fill color\nrect = plt.Rectangle((0.1, 2.8), 0.8, 0.2, facecolor='lightblue')\nax.add_patch(rect)\n\n# Create a rectangle with a light green fill color\nrect = plt.Rectangle((0.3, 2.8), 0.8, 0.2, facecolor='lightgreen')\nax.add_patch(rect)\n\n# Create a rectangle with a light blue fill color\nrect = plt.Rectangle((0.5, 2.8), 0.8, 0.2, facecolor='lightblue')\nax.add_patch(rect)\n\n# Create a rectangle with a light green fill color\nrect = plt.Rectangle((0.7, 2.8), 0.8, 0.2, facecolor='lightgreen')\nax.add_patch(rect)\n\n# Create a rectangle with a light blue fill color\nrect = plt.Rectangle((0.9, 2.8), 0.8, 0.2, facecolor='lightblue')\nax.add_patch(rect)\n\n# Create a rectangle with a light green fill color\nrect = plt.Rectangle((0.1, 3.0), 0.8, 0.2, facecolor='lightgreen')\nax.add_patch(rect)\n\n# Create a rectangle with a light blue fill color\nrect = plt.Rectangle((0.3, 3.0), 0.8, 0.2, facecolor='lightblue')\nax.add_patch(rect)\n\n# Create a rectangle with a light green fill color\nrect = plt.Rectangle((0.5, 3.0), 0.8, 0.2, facecolor='lightgreen')\nax.add_patch(rect)\n\n# Create a rectangle with a light blue fill color\nrect = plt.Rectangle((0.7, 3.0), 0.8, 0.2, facecolor='lightblue')\nax.add_patch(rect)\n\n# Create a rectangle with a light green fill color\nrect = plt.Rectangle((0.9, 3.0), 0.8, 0.2, facecolor='lightgreen')\nax.add_patch(rect)\n\n# Create a rectangle with a light blue fill color\nrect = plt.Rectangle((0.1, 3.2), 0.8, 0.2, facecolor='lightblue')\nax.add_patch(rect)\n\n# Create a rectangle with a light green fill color\nrect = plt.Rectangle((0.3, 3.2), 0.8, 0.2, facecolor='lightgreen')\nax.add_patch(rect)\n\n# Create a rectangle with a light blue fill color\nrect = plt.Rectangle((0.5, 3.2), 0.8, 0.2, facecolor='lightblue')\nax.add_patch(rect)\n\n# Create a rectangle with a light green fill color\nrect = plt.Rectangle((0.7, 3.2), 0.8, 0.2, facecolor='lightgreen')\nax.add_patch(rect)\n\n# Create a rectangle with a light blue fill color\nrect = plt.Rectangle((0.9, 3.2), 0.8, 0.2, facecolor='lightblue')\nax.add_patch(rect)\n\n# Create a rectangle with a light green fill color\nrect = plt.Rectangle((0.1, 3.4), 0.8, 0.2, facecolor='lightgreen')\nax.add_patch(rect)\n\n# Create a rectangle with a light blue fill color\nrect = plt.Rectangle((0.3, 3.4), 0.8, 0.2, facecolor='lightblue')\nax.add_patch(rect)\n\n# Create a rectangle with a light green fill color\nrect = plt.Rectangle((0.5, 3.4), 0.8, 0.2, facecolor='lightgreen')\nax.add_patch(rect)\n\n# Create a rectangle with a light blue fill color\nrect = plt.Rectangle((0.7, 3.4), 0.8, 0.2, facecolor='lightblue')\nax.add_patch(rect)\n\n# Create a rectangle with a light green fill color\nrect = plt.Rectangle((0.9, 3.4), 0.8, 0.2, facecolor='lightgreen')\nax.add_patch(rect)\n\n# Create a rectangle with a light blue fill color\nrect = plt.Rectangle((0.1, 3.6), 0.8, 0.2, facecolor='lightblue')\nax.add_patch(rect)\n\n# Create a rectangle with a light green fill color\nrect = plt.Rectangle((0.3, 3.6), 0.8, 0.2, facecolor='lightgreen')\nax.add_patch(rect)\n\n# Create a rectangle with a light blue fill color\nrect = plt.Rectangle((0.5, 3.6), 0.8, 0.2, facecolor='lightblue')\nax.add_patch(rect)\n\n# Create a rectangle with a light green fill color\nrect = plt.Rectangle((0.7, 3.6), 0.8, 0.2, facecolor='lightgreen')\nax.add_patch(rect)\n\n# Create a rectangle with a light blue fill color\nrect = plt.Rectangle((0.9, 3.6), 0.8, 0.2, facecolor='lightblue')\nax.add_patch(rect)\n\n# Create a rectangle with a light green fill color\nrect = plt.Rectangle((0.1, 3.8), 0.8, 0.2, facecolor='lightgreen')\nax.add_patch(rect)\n\n# Create a rectangle with a light blue fill color\nrect = plt.Rectangle((0.3, 3.8), 0.8, 0.2, facecolor='lightblue')\nax.add_patch(rect)\n\n# Create a rectangle with a light green fill color\nrect = plt.Rectangle((0.5, 3.8), 0.8, 0.2, facecolor='lightgreen')\nax.add_patch"}
{"file": "dataset/ori_500/line_72.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Set the background color of the plot\nax.set_facecolor('lightgreen')\n\n# Set the grid lines\nax.grid(True)\n\n# Set the x-axis limits\nax.set_xlim(0.1, 1.0)\n\n# Set the y-axis limits\nax.set_ylim(-80, 80)\n\n# Set the x-axis ticks\nax.set_xticks([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0])\n\n# Set the y-axis ticks\nax.set_yticks([-80, -60, -40, -20, 0, 20, 40, 60, 80])\n\n# Set the x-axis label\nax.set_xlabel('Ratio r')\n\n# Set the y-axis label\nax.set_ylabel('Performance')\n\n# Set the title\nax.set_title('Dynamic Performance Trends')\n\n# Set the legend\nax.legend(['PNA + ours', 'GIN + ours'])\n\n# Set the line colors\nline_colors = ['purple', 'orange']\n\n# Set the marker colors\nmarker_colors = ['red', 'yellow']\n\n# Plot the data\nfor i in range(2):\n    ax.plot([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0], [i*10, i*10+10, i*10+20, i*10+30, i*10+40, i*10+50, i*10+60, i*10+70, i*10+80, i*10+90], color=line_colors[i], marker=marker_colors[i])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_73.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Modern Linear Performance Evaluation')\n\n# Set the x-axis label\nax.set_xlabel('Ratio r')\n\n# Set the y-axis label\nax.set_ylabel('Performance')\n\n# Define the data points\nx = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0]\ny1 = [0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9]\ny2 = [0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9]\n\n# Plot the data points\nax.plot(x, y1, 'o-', color='purple', label='PNA + ours')\nax.plot(x, y2, 'o-', color='orange', label='GIN + ours')\n\n# Add a legend to the plot\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_74.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Dynamic Model Performance')\n\n# Set the x-axis label\nax.set_xlabel('Ratio r')\n\n# Set the y-axis label\nax.set_ylabel('Performance')\n\n# Define the data points\nx = [0.0, 0.2, 0.4, 0.6, 0.8, 1.0]\ny1 = [0.5, 0.7, 0.9, 0.8, 0.6, 0.4]\ny2 = [0.3, 0.5, 0.7, 0.6, 0.4, 0.2]\n\n# Plot the data points\nax.plot(x, y1, 'bo-')\nax.plot(x, y2, 'ro-')\n\n# Add a legend\nax.legend(['PNA + ours', 'GIN + ours'])\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_75.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Comparison of Model Accuracies')\n\n# Set the x-axis label\nax.set_xlabel('Ensemble Size')\n\n# Set the y-axis label\nax.set_ylabel('Accuracy')\n\n# Set the grid\nax.grid(True)\n\n# Set the x-ticks\nax.set_xticks([5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29])\n\n# Set the y-ticks\nax.set_yticks([60, 65, 70, 75, 80, 85, 90, 95])\n\n# Set the color of the x-axis\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis\nax.spines['left'].set_color('red')\n\n# Set the color of the top and right spines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', length=5, width=1)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='minor', length=2, width=1)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', bottom=True, top=False, left=True, right=False)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', labelbottom=True, labeltop=False, labelleft=True, labelright=False)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', pad=5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', direction='in')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', length=5, width=1)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', bottom=True, top=False, left=True, right=False)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', labelbottom=True, labeltop=False, labelleft=True, labelright=False)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', pad=5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', direction='in')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', length=5, width=1)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', bottom=True, top=False, left=True, right=False)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', labelbottom=True, labeltop=False, labelleft=True, labelright=False)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', pad=5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', direction='in')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', length=5, width=1)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', bottom=True, top=False, left=True, right=False)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', labelbottom=True, labeltop=False, labelleft=True, labelright=False)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', pad=5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', direction='in')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', length=5, width=1)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', bottom=True, top=False, left=True, right=False)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', labelbottom=True, labeltop=False, labelleft=True, labelright=False)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', pad=5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', direction='in')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', length=5, width=1)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', bottom=True, top=False, left=True, right=False)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', labelbottom=True, labeltop=False, labelleft=True, labelright=False)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', pad=5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', direction='in')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', length=5, width=1)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', bottom=True, top=False, left=True, right=False)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', labelbottom=True, labeltop=False, labelleft=True, labelright=False)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', pad=5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', direction='in')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', length=5, width=1)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', bottom=True, top=False, left=True, right=False)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', labelbottom=True, labeltop=False, labelleft=True, labelright=False)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', pad=5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', direction='in')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', length=5, width=1)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', bottom=True, top=False, left=True, right=False)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', labelbottom=True, labeltop=False, labelleft=True, labelright=False)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', pad=5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', direction='in')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', length=5, width=1)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', bottom=True, top=False, left=True, right=False)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', labelbottom=True, labeltop=False, labelleft=True, labelright=False)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', pad=5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', direction='in')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', length=5, width=1)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', bottom=True, top=False, left=True, right=False)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', labelbottom=True, labeltop=False, labelleft=True, labelright=False)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', pad=5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', direction='in')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', length=5, width=1)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', bottom=True, top=False, left=True, right=False)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', labelbottom=True, labeltop=False, labelleft=True, labelright=False)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', pad=5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', direction='in')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', length=5, width=1)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', bottom=True, top=False, left=True, right=False)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', labelbottom=True, labeltop=False, labelleft=True, labelright=False)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', pad=5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', direction='in')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', length=5, width=1)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', bottom=True, top=False, left=True, right=False)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', labelbottom=True, labeltop=False, labelleft=True, labelright=False)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', pad=5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', direction='in')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', length=5, width=1)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', bottom=True, top=False, left=True, right=False)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', labelbottom=True, labeltop=False, labelleft=True, labelright=False)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', pad=5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', direction='in')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', length=5, width=1)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', bottom=True, top=False, left=True, right=False)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', labelbottom=True, labeltop=False, labelleft=True, labelright=False)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', pad=5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', direction='in')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', length=5, width=1)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', bottom=True, top=False, left=True, right=False)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', labelbottom=True, labeltop=False, labelleft=True, labelright=False)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', pad=5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', direction='in')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', length=5, width=1)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', bottom=True, top=False, left=True, right=False)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', labelbottom=True, labeltop=False, labelleft=True, labelright=False)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', pad=5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', direction='in')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', length=5, width=1)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', bottom=True, top=False, left=True, right=False)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', labelbottom=True, labeltop=False, labelleft=True, labelright=False)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', pad=5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', direction='in')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', length=5, width=1)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', bottom=True, top=False, left=True, right=False)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', labelbottom=True, labeltop=False, labelleft=True, labelright=False)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', pad=5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', direction='in')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', length=5, width=1)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', bottom=True, top=False, left=True, right=False)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', labelbottom=True, labeltop=False, labelleft=True, labelright=False)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', pad=5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', direction='in')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', length=5, width=1)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', bottom=True, top=False, left=True, right=False)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', labelbottom=True, labeltop=False, labelleft=True, labelright=False)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', pad=5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', direction='in')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', length=5, width=1)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', bottom=True, top=False, left=True, right=False)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', labelbottom=True, labeltop=False, labelleft=True, labelright=False)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', pad=5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', direction='in')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', length=5, width=1)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', bottom=True, top=False, left=True, right=False)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', labelbottom=True, labeltop=False, labelleft=True, labelright=False)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', pad=5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', direction='in')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', length=5, width=1)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', bottom=True, top=False, left=True, right=False)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', labelbottom=True, labeltop=False, labelleft=True, labelright=False)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', pad=5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', direction='in')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', length=5, width=1)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', bottom=True, top=False, left=True, right=False)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', labelbottom=True, labeltop=False, labelleft=True, labelright=False)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', pad=5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', direction='in')\n\n# Set the color of the tick marks\nax.tick_params(axis='"}
{"file": "dataset/ori_500/line_76.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for Config A - Model X\nconfig_a_x = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nconfig_a_y = [85, 87, 88, 89, 88, 87, 86, 85, 84, 83]\n\n# Data for Config B - Model X\nconfig_b_x = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nconfig_b_y = [75, 77, 78, 79, 78, 77, 76, 75, 74, 73]\n\n# Data for Config C - Model X\nconfig_c_x = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nconfig_c_y = [65, 67, 68, 69, 68, 67, 66, 65, 64, 63]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 12.0))\n\n# Plot the data\nax.plot(config_a_x, config_a_y, 'r-o', label='Config A - Model X')\nax.plot(config_b_x, config_b_y, 'g-o', label='Config B - Model X')\nax.plot(config_c_x, config_c_y, 'b-o', label='Config C - Model X')\n\n# Set the title and labels\nax.set_title('Performance of Model X')\nax.set_xlabel('Iteration')\nax.set_ylabel('Score')\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_77.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for Performance of Llama\nllama_data = {\n    'Config A - Llama': [93, 94, 95, 96, 97, 98, 99],\n    'Config B - Llama': [92, 93, 94, 95, 96, 97, 98],\n    'Config C - Llama': [91, 92, 93, 94, 95, 96, 97]\n}\n\n# Data for Performance of Falcon\nfalcon_data = {\n    'Config A - Falcon': [75, 76, 77, 78, 79, 80, 81],\n    'Config B - Falcon': [74, 75, 76, 77, 78, 79, 80],\n    'Config C - Falcon': [73, 74, 75, 76, 77, 78, 79]\n}\n\n# Data for Performance of Qwen\nqwen_data = {\n    'Config A - Qwen': [85, 86, 87, 88, 89, 90, 91],\n    'Config B - Qwen': [84, 85, 86, 87, 88, 89, 90],\n    'Config C - Qwen': [83, 84, 85, 86, 87, 88, 89]\n}\n\n# Create a figure and axis\nfig, axes = plt.subplots(3, 1, figsize=(8.0, 12.0))\n\n# Plot Performance of Llama\nfor config, scores in llama_data.items():\n    axes[0].plot(scores, label=config)\naxes[0].set_title('Performance of Llama')\naxes[0].legend()\naxes[0].set_xlabel('Iteration')\naxes[0].set_ylabel('Score')\n\n# Plot Performance of Falcon\nfor config, scores in falcon_data.items():\n    axes[1].plot(scores, label=config)\naxes[1].set_title('Performance of Falcon')\naxes[1].legend()\naxes[1].set_xlabel('Iteration')\naxes[1].set_ylabel('Score')\n\n# Plot Performance of Qwen\nfor config, scores in qwen_data.items():\n    axes[2].plot(scores, label=config)\naxes[2].set_title('Performance of Qwen')\naxes[2].legend()\naxes[2].set_xlabel('Iteration')\naxes[2].set_ylabel('Score')\n\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_78.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 10.0))\n\n# Set the background color of the plot\nax.set_facecolor('#f0f0f0')\n\n# Set the title of the plot\nax.set_title('Sales Growth by Quarter')\n\n# Set the x-axis label\nax.set_xlabel('Quarter')\n\n# Set the y-axis label\nax.set_ylabel('Sales Growth')\n\n# Define the data for each brand\nbrands = ['Brand A', 'Brand B', 'Brand C', 'Brand D', 'Brand E', 'Brand F']\nsales_growth = [\n    [1.2, 1.4, 1.6, 1.8, 2.0],\n    [1.5, 1.7, 1.9, 2.1, 2.3],\n    [1.3, 1.5, 1.7, 1.9, 2.1],\n    [1.4, 1.6, 1.8, 2.0, 2.2],\n    [1.5, 1.7, 1.9, 2.1, 2.3],\n    [1.6, 1.8, 2.0, 2.2, 2.4]\n]\n\n# Plot the sales growth for each brand\nfor i, brand in enumerate(brands):\n    ax.plot(sales_growth[i], label=brand)\n\n# Add a legend to the plot\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_79.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(18.0, 4.0))\n\n# Define the data\ntime = np.arange(100, 800, 100)\nmetric_value = np.array([0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2.0])\n\n# Plot the data\nax.plot(time, metric_value, 'o-')\n\n# Set the title and labels\nax.set_title('Traffic Performance')\nax.set_xlabel('Time (s)')\nax.set_ylabel('Metric Value')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ndriving_styles = ['Passive', 'Rail', 'Replay', 'Sportive']\nweather_conditions = ['Dry', 'Rain']\nrelaxation_levels = [14, 12, 10, 8, 6, 4, 2]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Plot the data\nfor i, style in enumerate(driving_styles):\n    ax.plot(relaxation_levels[i*2:i*2+2], label=style)\n\n# Set the title and labels\nax.set_title('Relaxation Level')\nax.set_xlabel('Driving Style')\nax.set_ylabel('Relaxation Level')\n\n# Add legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_80.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\ndata = {\n    'Category A Growth': {'Run 1': [20, 30, 40, 50, 60], 'Run 2': [25, 35, 45, 55, 65]},\n    'Category B Growth': {'Run 1': [10, 20, 30, 40, 50], 'Run 2': [15, 25, 35, 45, 55]},\n    'Category C Growth': {'Run 1': [80, 70, 60, 50, 40], 'Run 2': [85, 75, 65, 55, 45]},\n    'Category D Growth': {'Run 1': [80, 70, 60, 50, 40], 'Run 2': [85, 75, 65, 55, 45]},\n    'Category E Growth': {'Run 1': [80, 70, 60, 50, 40], 'Run 2': [85, 75, 65, 55, 45]},\n    'Category F Growth': {'Run 1': [80, 70, 60, 50, 40], 'Run 2': [85, 75, 65, 55, 45]}\n}\n\n# Create a figure and a set of subplots\nfig, axes = plt.subplots(3, 2, figsize=(9.0, 6.0), constrained_layout=True)\n\n# Plot each category's growth\nfor i, (category, runs) in enumerate(data.items()):\n    ax = axes[i // 2, i % 2]\n    ax.set_title(category)\n    ax.set_xlabel('Phase')\n    ax.set_ylabel('Cumulative Value')\n    ax.set_yticks(range(0, 100, 10))\n    ax.set_xticks(range(1, 6))\n    ax.set_xticklabels(['Phase 1', 'Phase 2', 'Phase 3', 'Phase 4', 'Phase 5'])\n    ax.grid(True)\n    for run, values in runs.items():\n        ax.plot(values, label=run)\n    ax.legend()\n\nplt.show()\n```"}
{"file": "dataset/ori_500/line_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(9.0, 6.0))\n\n# Set the background color of the plot\nax.set_facecolor('lightgrey')\n\n# Set the grid lines\nax.grid(True)\n\n# Set the x-axis limits\nax.set_xlim(4, 30)\n\n# Set the y-axis limits\nax.set_ylim(10, 12)\n\n# Set the x-axis ticks\nax.set_xticks([4, 6, 10, 30])\n\n# Set the y-axis ticks\nax.set_yticks([10, 11, 12])\n\n# Set the x-axis tick labels\nax.set_xticklabels(['4\u00d710^0', '6\u00d710^0', '10', '3\u00d710^1'])\n\n# Set the y-axis tick labels\nax.set_yticklabels(['10', '11', '12'])\n\n# Set the title of the plot\nax.set_title('Plot Title')\n\n# Set the label of the x-axis\nax.set_xlabel('N')\n\n# Set the label of the y-axis\nax.set_ylabel('Y')\n\n# Plot the data\nax.plot([4, 6, 10, 30], [10, 11, 12, 10], 'b-')\nax.plot([4, 6, 10, 30], [10, 11, 12, 10], 'r-')\n\n# Add a legend\nax.legend(['Standard', 'Constrained'], loc='upper right')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the bar chart\nregions = ['South', 'North', 'West', 'East']\npercentages = [25, 40, 10, 15]\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(10, 5))\nax.bar(regions, percentages, color=['blue', 'cyan', 'orange', 'purple'])\nax.set_title('Literacy Rate by Region')\nax.set_xlabel('Region')\nax.set_ylabel('Literacy Rate (%)')\n\n# Define the data for the pie chart\nregions_pie = ['North', 'East', 'South', 'West']\npercentages_pie = [35, 25, 20, 15]\n\n# Create a pie chart\nfig, ax = plt.subplots(figsize=(10, 5), subplot_kw={'aspect': 'equal'})\nwedges, texts, autotexts = ax.pie(percentages_pie, labels=regions_pie, autopct='%1.1f%%', startangle=90)\nax.set_title('Literacy Rate by Region')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_10.pdf", "response": "```python\n\"\"\"\n=====================================\nVisualizing a Colorful Palette Chart\n=====================================\n\nThis example demonstrates how to create a colorful palette chart using Matplotlib.\n\"\"\"\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data for the chart\ncategories = ['PaleSkin', 'OvalFace', 'Smiling', 'BrownHair', 'Attractive']\npalette = ['blue', 'green', 'red', 'purple', 'orange']\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 2.0))\n\n# Plot the data\nfor i, category in enumerate(categories):\n    ax.bar(category, np.random.rand(), color=palette[i])\n\n# Set the title and labels\nax.set_title('Colorful Palette Chart')\nax.set_xlabel('Category')\nax.set_ylabel('Value')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the left column\nproducts = ['Engstrom (M1)', 'Zhang (M2)', 'Rice (M3)', 'Rade (M4)', 'Hendryks (M5)', 'Addep. (M6)', 'Carmon (M7)']\nerrors = [44.15, 44.05, 41.55, 40.90, 40.65, 39.45, 36.70]\n\n# Data for the right column\nmodels = ['Engstrom (M1)', 'Zhang (M2)', 'Rice (M3)', 'Rade (M4)', 'Hendryks (M5)', 'Addep. (M6)', 'Carmon (M7)']\nrf_values = [\n    [0.00, 6.20, 4.90, 4.25, 3.65, 3.25],\n    [0.00, 6.15, 5.25, 2.80, 3.65, 2.50],\n    [0.00, 5.35, 6.30, 5.25, 3.85, 2.95],\n    [0.00, 6.25, 5.45, 0.00, 5.25, 4.95],\n    [0.00, 7.25, 6.45, 7.15, 0.00, 4.15],\n    [0.00, 8.75, 6.95, 7.15, 8.95, 0.00],\n    [0.00, 9.90, 9.15, 7.15, 0.00, 0.00]\n]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot the left column\nax.barh(products, errors, color='green')\nax.set_xlabel('Robust Error (%)')\nax.set_title('Robust Error (%)')\n\n# Plot the right column\nfor i, model in enumerate(models):\n    ax.barh([model], rf_values[i], color=plt.cm.RdYlGn(i/len(models)))\n\n# Set the title of the right column\nax.set_title('RFs (%)')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\nmodels = ['VGG16', 'Resnet101']\naccuracies = [0.551, 0.538, 0.043, 0.195, 0.744, 0.394, 0.477, 0.762]\nrotation_angles = [0, 30, 60, 90, 120, 150, 180]\n\n# Create a figure and axis\nfig, ax = plt.subplots(1, 3, figsize=(10, 4))\n\n# Plot 1: Accuracy\nax[0].bar(models, accuracies, color=['pink', 'orange', 'blue'])\nax[0].set_title('A')\nax[0].set_ylabel('Accuracy')\n\n# Plot 2: Retinotopic\nax[1].bar(['Cartesian', 'Retinotopic'], [0.551, 0.538], color='yellow')\nax[1].bar(['Cartesian', 'Retinotopic'], [0.043, 0.195], color='orange')\nax[1].set_title('B')\nax[1].set_ylabel('Retinotopic')\n\n# Plot 3: Rotation Invariance\nax[2].plot(rotation_angles, [0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2], label='VGG16 Cartesian', color='red')\nax[2].plot(rotation_angles, [0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2], label='Resnet101 Cartesian', color='blue')\nax[2].plot(rotation_angles, [0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2], label='VGG16 Retinotopic', color='orange')\nax[2].plot(rotation_angles, [0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2], label='Resnet101 Retinotopic', color='gray')\nax[2].plot(rotation_angles, [0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2], label='Resnet101 Polar', color='cyan')\nax[2].set_title('C')\nax[2].set_ylabel('Rotation Invariance')\nax[2].legend()\n\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Set the background color of the plot\nax.set_facecolor('lightblue')\n\n# Set the title of the plot\nax.set_title('Beauty Products')\n\n# Set the x-axis label\nax.set_xlabel('Sensitivity Attribute')\n\n# Set the y-axis label\nax.set_ylabel('Price ($,Z)')\n\n# Set the x-axis limits\nax.set_xlim(-0.5, 4.5)\n\n# Set the y-axis limits\nax.set_ylim(0, 1.5)\n\n# Create a bar chart\nax.bar(['PaleSkin', 'OvalFace', 'Smiling', 'BrownHair', 'Attractive', 'Male', 'BigLips', 'PointyNose', 'White', 'BigNose', 'NoBeard', 'HeavyMakeup'], [0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3], color='blue')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(5.0, 6.0))\n\n# Plot the first graph\nax.plot([0, 10, 20, 30, 40, 50], [-8, -8, -9, -9, -9, -8], 'k-')\nax.fill_between([0, 10, 20, 30, 40, 50], [-8, -8, -9, -9, -9, -8], [-10, -10, -10, -10, -10, -10], color='gray', alpha=0.5)\nax.set_xlabel('GPT2 Tokenizer rank')\nax.set_ylabel('Loss')\n\n# Plot the second graph\nax2 = fig.add_axes([0.15, 0.5, 0.7, 0.3])\nax2.bar([0, 10, 20, 30, 40], [8, 6, 4, 2, 0], color='gray')\nax2.set_xlabel('# of documents')\nax2.set_ylabel('Loss')\n\n# Add rectangles for the second graph\nrects = [plt.Rectangle((i, 0), 10, 8, color='gray') for i in range(0, 50, 10)]\nfor rect in rects:\n    ax2.add_patch(rect)\n\n# Set the title\nax.set_title('a')\nax2.set_title('b')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the bar chart\ncategories = ['Sentiment', 'Toxicity', 'News']\nvalues = [0.35, 0.25, 0.25]\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(10, 4))\nax.bar(categories, values, color='blue')\n\n# Set the title and labels\nax.set_title('Sentiment Analysis')\nax.set_xlabel('Categories')\nax.set_ylabel('Sentiment Score')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_16.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the bar chart\nx = ['c1355', 'c1908', 'c2670', 'c3540']\ny = [40, 50, 55, 45]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6, 6))\n\n# Plot the bar chart\nax.bar(x, y, color='lightblue')\n\n# Set the title and labels\nax.set_title('Number of Successful Advc Circuits')\nax.set_xlabel('Circuit')\nax.set_ylabel('# Successful adv circuits')\n\n# Add a horizontal line at the mean value\nmean_value = sum(y) / len(y)\nax.axhline(mean_value, color='red', linestyle='--')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_17.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis for the first plot\nfig, ax = plt.subplots(figsize=(10, 4))\n\n# Define the data for the first plot\nstudy_levels = [0, 1, 2, 3, 4, 5]\nknowledge_increase = [20, 30, 40, 50, 60, 70]\n\n# Plot the data\nax.plot(study_levels, knowledge_increase, color='blue')\nax.fill_between(study_levels, knowledge_increase, color='lightblue')\n\n# Add labels and title\nax.set_xlabel('Study Level')\nax.set_ylabel('Knowledge Increase (%)')\nax.set_title('Knowledge Increase by Study Area')\n\n# Create a second subplot\nax2 = fig.add_subplot(122)\n\n# Define the data for the second plot\ndomains = ['Education', 'Law', 'Technology', 'History', 'Geography', 'Humanities', 'Finance']\npublications = [250, 280, 300, 150, 120, 180, 220]\n\n# Plot the data\nax2.bar(domains, publications, color='blue')\n\n# Add labels and title\nax2.set_xlabel('Domain')\nax2.set_ylabel('Number of Publications')\nax2.set_title('Number of Publications by Domain')\n\n# Display the plots\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_18.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the line chart\nyears = [2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022]\nhardware_progress = [0, 10, 20, 30, 40, 50, 60, 70]\nsoftware_progress = [0, 20, 30, 40, 50, 60, 70, 80]\nai_progress = [0, 30, 40, 50, 60, 70, 80, 90]\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 10.0))\n\n# Plot the line chart\nax.plot(years, hardware_progress, label='Hardware', color='blue')\nax.plot(years, software_progress, label='Software', color='orange')\nax.plot(years, ai_progress, label='AI', color='green')\n\n# Set the title and labels\nax.set_title('Technological Advancements')\nax.set_xlabel('Year')\nax.set_ylabel('Progress (%)')\n\n# Add a legend\nax.legend()\n\n# Define the data for the bar chart\nsectors = ['Big Tech', 'Startups', 'Academia', 'Government']\ninnovation_gaps = [20, 40, 60, 80]\n\n# Create a new subplot for the bar chart\nax2 = fig.add_subplot(2, 1, 2)\n\n# Plot the bar chart\nax2.bar(sectors, innovation_gaps, color='red')\n\n# Set the title and labels\nax2.set_title('Innovation Gaps Across Different Sectors in Technology')\nax2.set_xlabel('Sector')\nax2.set_ylabel('Innovation Gap (%)')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_19.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the first graph\ncountries = ['USA', 'UK', 'Germany', 'France', 'Italy', 'Spain']\ncrime_rates = [3.2, 2.8, 2.5, 2.7, 3.0, 2.9]\n\n# Data for the second graph\ncrimes = ['Theft', 'Assault', 'Fraud', 'Drug Trafficking', 'Vandalism']\nrates = [140, 130, 120, 110, 100]\n\n# Create the first graph\nfig, ax1 = plt.subplots(figsize=(8.0, 10.0))\nax1.bar(countries, crime_rates, color='orange')\nax1.set_xlabel('Country')\nax1.set_ylabel('Crime Rate per 100,000 Inhabitants', color='orange')\nax1.tick_params(axis='y', labelcolor='orange')\n\n# Create the second graph\nfig, ax2 = plt.subplots(figsize=(8.0, 10.0))\nax2.plot(crimes, rates, color='blue')\nax2.set_xlabel('Crime')\nax2.set_ylabel('Crime Rate per 100,000 Inhabitants', color='blue')\nax2.tick_params(axis='y', labelcolor='blue')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis for the histogram\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Define the data for the histogram\nbins = [0, 20, 40, 60, 80, 100, 120]\ncounts = [10, 30, 50, 70, 90, 110, 130]\n\n# Plot the histogram\nax.bar(bins[:-1], counts, width=10, color='orange')\n\n# Set the title and labels\nax.set_title('Student Performance in Schools')\nax.set_xlabel('Score')\nax.set_ylabel('Number of Students')\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"blue\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"orange\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"green\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"gray\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"purple\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"brown\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"cyan\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"magenta\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"yellow\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"black\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"white\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"silver\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"gold\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"pink\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"lime\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"navy\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"olive\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"teal\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"maroon\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"aqua\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"fuchsia\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"silver\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"gold\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"pink\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"lime\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"navy\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"olive\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"teal\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"maroon\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"aqua\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"fuchsia\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"silver\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"gold\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"pink\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"lime\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"navy\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"olive\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"teal\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"maroon\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"aqua\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"fuchsia\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"silver\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"gold\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"pink\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"lime\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"navy\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"olive\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"teal\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"maroon\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"aqua\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"fuchsia\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"silver\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"gold\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"pink\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"lime\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"navy\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"olive\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"teal\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"maroon\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"aqua\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"fuchsia\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"silver\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"gold\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"pink\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"lime\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"navy\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"olive\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"teal\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"maroon\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"aqua\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"fuchsia\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"silver\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"gold\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"pink\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"lime\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"navy\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"olive\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"teal\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"maroon\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"aqua\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"fuchsia\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"silver\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"gold\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"pink\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"lime\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"navy\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"olive\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"teal\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"maroon\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"aqua\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"fuchsia\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"silver\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"gold\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"pink\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"lime\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"navy\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"olive\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"teal\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"maroon\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"aqua\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"fuchsia\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"silver\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"gold\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"pink\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"lime\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"navy\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"olive\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"teal\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"maroon\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"aqua\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"fuchsia\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"silver\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"gold\")\nax.add_patch(rect)\n\n# Create a rectangle for the colored bar\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"pink\")\nax.add"}
{"file": "dataset/ori_500/multidiff_20.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis for the first plot\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Define the data for the first plot\nregions = ['Region 1', 'Region 2']\ntemperatures = [20, 22]\ncolors = ['skyblue', 'lightblue']\n\n# Plot the data\nfor region, temp, color in zip(regions, temperatures, colors):\n    ax.bar(region, temp, color=color)\n\n# Set the title and labels\nax.set_title('Average Annual Temperature')\nax.set_xlabel('Region')\nax.set_ylabel('Temperature (\u00b0C)')\n\n# Create a second plot\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Define the data for the second plot\nelevations = np.arange(0, 2001, 100)\ntemperatures = np.random.rand(len(elevations)) * 1000\n\n# Plot the data\nax.plot(elevations, temperatures, color='blue')\n\n# Set the title and labels\nax.set_title('Geographical Elevation Distribution')\nax.set_xlabel('Elevation (m)')\nax.set_ylabel('Temperature (\u00b0C)')\n\n# Show the plots\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_21.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the first chart\nyears = ['2019', '2020', '2021', '2022']\ninvestment_growth = [300, 250, 200, 150]\n\n# Data for the second chart\nproducts = ['Savings', 'CDs', 'Stocks', 'Bonds', 'Real Estate', 'ETFs', 'Mutual Funds']\nnumber_of_accounts = [200, 175, 150, 125, 100, 75, 50]\n\n# Data for the third chart\nloan_amounts = [40000, 30000, 20000, 10000]\nfrequency = [80, 60, 40, 20]\n\n# Create the figure and axis objects\nfig, axes = plt.subplots(1, 3, figsize=(10, 5))\n\n# Plot the first chart\naxes[0].barh(years, investment_growth, color='yellow')\naxes[0].set_title('Investment Growth Over Time')\naxes[0].set_xlabel('Growth (%)')\n\n# Plot the second chart\naxes[1].bar(products, number_of_accounts, color='blue')\naxes[1].set_title('Popularity of Financial Products')\naxes[1].set_xlabel('Number of Accounts')\n\n# Plot the third chart\naxes[2].barh(loan_amounts, frequency, color='green')\naxes[2].set_title('Loan Amount Distribution by Region')\naxes[2].set_xlabel('Frequency')\n\n# Display the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_22.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 10.0))\n\n# Set the title of the plot\nax.set_title('AI Task Success Rates')\n\n# Create a bar chart with blue bars\nax.bar(['Image Recog.', 'Speech Recog.', 'Language Proc.', 'Game AI'], [85, 75, 90, 80], color='blue')\n\n# Set the y-axis label\nax.set_ylabel('Success Rate (%)')\n\n# Set the x-axis label\nax.set_xlabel('Algorithms')\n\n# Create a second subplot for the efficiency scores\nax2 = fig.add_subplot(122)\n\n# Set the title of the second subplot\nax2.set_title('Algorithm Efficiency Scores')\n\n# Create a scatter plot with red dots\nax2.scatter(['Alg1', 'Alg2', 'Alg3', 'Alg4'], [90, 85, 95, 80], color='red')\n\n# Set the y-axis label\nax2.set_ylabel('Efficiency (%)')\n\n# Set the x-axis label\nax2.set_xlabel('Algorithms')\n\n# Create a third subplot for the adaptability scores\nax3 = fig.add_subplot(122)\n\n# Set the title of the third subplot\nax3.set_title('AI Model Adaptability')\n\n# Create a line plot with green line\nax3.plot(['Model A', 'Model B', 'Model C', 'Model D'], [95, 90, 85, 80], color='green')\n\n# Set the y-axis label\nax3.set_ylabel('Adaptability Score (%)')\n\n# Set the x-axis label\nax3.set_xlabel('Models')\n\n# Add a legend to the third subplot\nax3.legend(['Dry Conditions', 'Wet Conditions'])\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_23.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the first bar chart\nx = [100, 200, 300, 400, 500, 600, 700]\ny = [10, 20, 30, 40, 50, 60, 70]\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(10.0, 10.0))\n\n# Plot the bar chart\nax.bar(x, y)\n\n# Set the title of the chart\nax.set_title('Traffic Volume by Time of Day')\n\n# Set the x-axis label\nax.set_xlabel('Number of Vehicles')\n\n# Set the y-axis label\nax.set_ylabel('Time of Day')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_24.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the first chart\narts = ['Literature', 'Performing Arts', 'Visual Arts', 'Dance']\nvalues = [10, 30, 25, 15]\ncolors = ['purple', 'pink', 'blue', 'orange']\n\n# Data for the second chart\ntechniques = ['Expression', 'Creativity', 'Collaboration', 'Dedication']\nperformance_values = [0.6, 0.8, 0.4, 0.2]\ncolors2 = ['blue', 'green', 'red', 'purple']\n\nfig, ax = plt.subplots(1, 2, figsize=(10, 5))\n\n# First chart\nax[0].pie(values, labels=arts, colors=colors, autopct='%1.1f%%')\nax[0].set_title('Distribution of Arts Education Programs')\n\n# Second chart\nax[1].pie(performance_values, labels=techniques, colors=colors2, startangle=90)\nax[1].set_title('Student Performance in Arts Education')\nax[1].axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\n\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_25.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Define the data\nsales = [25000, 20000, 15000, 10000, 5000]\nproducts = ['Product A', 'Product B', 'Product C', 'Product D', 'Product E', 'Product F']\nregions = ['Region 1', 'Region 2', 'Region 3', 'Region 4', 'Region 5']\nsales_probabilities = [0.0, 0.1, 0.2, 0.3, 0.4, 0.5]\n\n# Plot the sales data\nax.barh(products, sales, color='green')\nax.set_xlabel('Sales')\nax.set_ylabel('Products')\n\n# Add a colored rectangle for the legend\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='blue'))\nax.text(1.1, 0.5, 'Known Sales', color='blue')\n\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='cyan'))\nax.text(1.1, 0.3, 'Unknown Sales', color='cyan')\n\n# Add a colored rectangle for the legend\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='red'))\nax.text(1.1, 0.7, 'Sales Probability', color='red')\n\n# Add a colored rectangle for the legend\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='yellow'))\nax.text(1.1, 0.9, 'Region', color='yellow')\n\n# Add a colored rectangle for the legend\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='orange'))\nax.text(1.1, 0.8, 'Technology Products', color='orange')\n\n# Add a colored rectangle for the legend\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='purple'))\nax.text(1.1, 0.6, 'User Ratings', color='purple')\n\n# Add a colored rectangle for the legend\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='pink'))\nax.text(1.1, 0.4, 'Sales Probability', color='pink')\n\n# Add a colored rectangle for the legend\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='brown'))\nax.text(1.1, 0.2, 'Sales Probability', color='brown')\n\n# Add a colored rectangle for the legend\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='grey'))\nax.text(1.1, 0.0, 'Sales Probability', color='grey')\n\n# Add a colored rectangle for the legend\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='black'))\nax.text(1.1, 0.1, 'Sales Probability', color='black')\n\n# Add a colored rectangle for the legend\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='white'))\nax.text(1.1, 0.9, 'Sales Probability', color='white')\n\n# Add a colored rectangle for the legend\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='silver'))\nax.text(1.1, 0.8, 'Sales Probability', color='silver')\n\n# Add a colored rectangle for the legend\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='gold'))\nax.text(1.1, 0.7, 'Sales Probability', color='gold')\n\n# Add a colored rectangle for the legend\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='bronze'))\nax.text(1.1, 0.6, 'Sales Probability', color='bronze')\n\n# Add a colored rectangle for the legend\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='maroon'))\nax.text(1.1, 0.5, 'Sales Probability', color='maroon')\n\n# Add a colored rectangle for the legend\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='navy'))\nax.text(1.1, 0.4, 'Sales Probability', color='navy')\n\n# Add a colored rectangle for the legend\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='olive'))\nax.text(1.1, 0.3, 'Sales Probability', color='olive')\n\n# Add a colored rectangle for the legend\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lime'))\nax.text(1.1, 0.2, 'Sales Probability', color='lime')\n\n# Add a colored rectangle for the legend\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='teal'))\nax.text(1.1, 0.1, 'Sales Probability', color='teal')\n\n# Add a colored rectangle for the legend\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='aqua'))\nax.text(1.1, 0.0, 'Sales Probability', color='aqua')\n\n# Add a colored rectangle for the legend\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='fuchsia'))\nax.text(1.1, 0.9, 'Sales Probability', color='fuchsia')\n\n# Add a colored rectangle for the legend\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='silver'))\nax.text(1.1, 0.8, 'Sales Probability', color='silver')\n\n# Add a colored rectangle for the legend\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='gold'))\nax.text(1.1, 0.7, 'Sales Probability', color='gold')\n\n# Add a colored rectangle for the legend\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='bronze'))\nax.text(1.1, 0.6, 'Sales Probability', color='bronze')\n\n# Add a colored rectangle for the legend\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='maroon'))\nax.text(1.1, 0.5, 'Sales Probability', color='maroon')\n\n# Add a colored rectangle for the legend\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='navy'))\nax.text(1.1, 0.4, 'Sales Probability', color='navy')\n\n# Add a colored rectangle for the legend\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='olive'))\nax.text(1.1, 0.3, 'Sales Probability', color='olive')\n\n# Add a colored rectangle for the legend\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lime'))\nax.text(1.1, 0.2, 'Sales Probability', color='lime')\n\n# Add a colored rectangle for the legend\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='teal'))\nax.text(1.1, 0.1, 'Sales Probability', color='teal')\n\n# Add a colored rectangle for the legend\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='aqua'))\nax.text(1.1, 0.0, 'Sales Probability', color='aqua')\n\n# Add a colored rectangle for the legend\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='fuchsia'))\nax.text(1.1, 0.9, 'Sales Probability', color='fuchsia')\n\n# Add a colored rectangle for the legend\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='silver'))\nax.text(1.1, 0.8, 'Sales Probability', color='silver')\n\n# Add a colored rectangle for the legend\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='gold'))\nax.text(1.1, 0.7, 'Sales Probability', color='gold')\n\n# Add a colored rectangle for the legend\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='bronze'))\nax.text(1.1, 0.6, 'Sales Probability', color='bronze')\n\n# Add a colored rectangle for the legend\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='maroon'))\nax.text(1.1, 0.5, 'Sales Probability', color='maroon')\n\n# Add a colored rectangle for the legend\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='navy'))\nax.text(1.1, 0.4, 'Sales Probability', color='navy')\n\n# Add a colored rectangle for the legend\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='olive'))\nax.text(1.1, 0.3, 'Sales Probability', color='olive')\n\n# Add a colored rectangle for the legend\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lime'))\nax.text(1.1, 0.2, 'Sales Probability', color='lime')\n\n# Add a colored rectangle for the legend\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='teal'))\nax.text(1.1, 0.1, 'Sales Probability', color='teal')\n\n# Add a colored rectangle for the legend\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='aqua'))\nax.text(1.1, 0.0, 'Sales Probability', color='aqua')\n\n# Add a colored rectangle for the legend\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='fuchsia'))\nax.text(1.1, 0.9, 'Sales Probability', color='fuchsia')\n\n# Add a colored rectangle for the legend\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='silver'))\nax.text(1.1, 0.8, 'Sales Probability', color='silver')\n\n# Add a colored rectangle for the legend\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='gold'))\nax.text(1.1, 0.7, 'Sales Probability', color='gold')\n\n# Add a colored rectangle for the legend\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='bronze'))\nax.text(1.1, 0.6, 'Sales Probability', color='bronze')\n\n# Add a colored rectangle for the legend\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='maroon'))\nax.text(1.1, 0.5, 'Sales Probability', color='maroon')\n\n# Add a colored rectangle for the legend\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='navy'))\nax.text(1.1, 0.4, 'Sales Probability', color='navy')\n\n# Add a colored rectangle for the legend\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='olive'))\nax.text(1.1, 0.3, 'Sales Probability', color='olive')\n\n# Add a colored rectangle for the legend\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lime'))\nax.text(1.1, 0.2, 'Sales Probability', color='lime')\n\n# Add a colored rectangle for the legend\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='teal'))\nax.text(1.1, 0.1, 'Sales Probability', color='teal')\n\n# Add a colored rectangle for the legend\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='aqua'))\nax.text(1.1, 0.0, 'Sales Probability', color='aqua')\n\n# Add a colored rectangle for the legend\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='fuchsia'))\nax.text(1.1, 0.9, 'Sales Probability', color='fuchsia')\n\n# Add a colored rectangle for the legend\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='silver'))\nax.text(1.1, 0.8, 'Sales Probability', color='silver')\n\n# Add a colored rectangle for the legend\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='gold'))\nax.text(1.1, 0.7, 'Sales Probability', color='gold')\n\n# Add a colored rectangle for the legend\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='bronze'))\nax.text(1.1, 0.6, 'Sales Probability', color='bronze')\n\n# Add a colored rectangle for the legend\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='maroon'))\nax.text(1.1, 0.5, 'Sales Probability', color='maroon')\n\n# Add a colored rectangle for the legend\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='navy'))\nax.text(1.1, 0.4, 'Sales Probability', color='navy')\n\n# Add a colored rectangle for the legend\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='olive'))\nax.text(1.1, 0.3, 'Sales Probability', color='olive')\n\n# Add a colored rectangle for the legend\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lime'))\nax.text(1.1, 0.2, 'Sales Probability', color='lime')\n\n# Add a colored rectangle for the legend\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='teal'))\nax.text(1.1, 0.1, 'Sales Probability', color='teal')\n\n# Add a colored rectangle for the legend\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='aqua'))\nax.text(1.1, 0.0, 'Sales Probability', color='aqua')\n\n# Add a colored rectangle for the legend\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='fuchsia'))\nax.text(1.1, 0.9, 'Sales Probability', color='fuchsia')\n\n# Add a colored rectangle for the legend\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='silver'))\nax.text(1.1, 0.8, 'Sales Probability', color='silver')\n\n# Add a colored rectangle for the legend\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='gold'))\nax.text(1.1, 0.7, 'Sales Probability', color='gold')\n\n# Add a colored rectangle for the legend\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='bronze'))\nax.text(1.1, 0.6, 'Sales Probability', color='bronze')\n\n# Add a colored rectangle for the legend\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='maroon'))\nax.text(1.1, 0.5, 'Sales Probability', color='maroon')\n\n# Add a colored rectangle for the legend\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='navy'))\nax.text(1.1, 0.4, 'Sales Probability', color='navy')\n\n# Add a colored rectangle for the legend\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='olive'))\nax.text(1.1, 0.3, 'Sales Probability', color='olive')\n\n# Add a colored rectangle for the legend\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lime'))\nax.text(1.1, 0.2, 'Sales Probability', color='lime')\n\n# Add a colored rectangle for the legend\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='teal'))\nax.text(1.1, 0.1, 'Sales Probability', color='teal')\n\n# Add a colored rectangle for the legend\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='aqua'))\nax.text(1.1, 0.0, 'Sales Probability', color='aqua')\n\n# Add a colored rectangle for the legend\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='fuchsia'))\nax.text(1.1, 0.9, 'Sales Probability', color='fuchsia')\n\n# Add a colored rectangle for the legend\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='silver'))\nax.text(1.1, 0.8, 'Sales Probability', color='silver')\n\n# Add a colored rectangle for the legend\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='gold'))\nax.text(1.1, 0.7, 'Sales Probability', color='gold')\n\n# Add a colored rectangle for the legend\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='bronze'))\nax.text(1.1, 0.6, 'Sales Probability', color='bronze')\n\n# Add a colored rectangle for the legend\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='maroon'))\nax.text(1.1, 0.5, 'Sales Probability', color='maroon')\n\n#"}
{"file": "dataset/ori_500/multidiff_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Set the background color of the plot\nax.set_facecolor('white')\n\n# Set the title of the plot\nax.set_title('Histogram of Stock Returns')\n\n# Set the x-axis label\nax.set_xlabel('Returns')\n\n# Set the y-axis label\nax.set_ylabel('Frequency')\n\n# Set the x-axis limits\nax.set_xlim(-0.6, 0.6)\n\n# Set the y-axis limits\nax.set_ylim(0, 160)\n\n# Set the x-axis ticks\nax.set_xticks([-0.6, -0.4, -0.2, 0, 0.2, 0.4, 0.6])\n\n# Set the y-axis ticks\nax.set_yticks([0, 20, 40, 60, 80, 100, 120, 140, 160])\n\n# Set the x-axis tick labels\nax.set_xticklabels(['-0.6', '-0.4', '-0.2', '0.0', '0.2', '0.4', '0.6'])\n\n# Set the y-axis tick labels\nax.set_yticklabels(['0', '20', '40', '60', '80', '100', '120', '140', '160'])\n\n# Set the color of the histogram bars\nax.bar([-0.6, -0.4, -0.2, 0, 0.2, 0.4, 0.6], [10, 20, 30, 40, 50, 60, 70], color='green')\n\n# Set the color of the histogram bars\nax.bar([-0.6, -0.4, -0.2, 0, 0.2, 0.4, 0.6], [10, 20, 30, 40, 50, 60, 70], color='red')\n\n# Set the color of the histogram bars\nax.bar([-0.6, -0.4, -0.2, 0, 0.2, 0.4, 0.6], [10, 20, 30, 40, 50, 60, 70], color='blue')\n\n# Set the color of the histogram bars\nax.bar([-0.6, -0.4, -0.2, 0, 0.2, 0.4, 0.6], [10, 20, 30, 40, 50, 60, 70], color='yellow')\n\n# Set the color of the histogram bars\nax.bar([-0.6, -0.4, -0.2, 0, 0.2, 0.4, 0.6], [10, 20, 30, 40, 50, 60, 70], color='orange')\n\n# Set the color of the histogram bars\nax.bar([-0.6, -0.4, -0.2, 0, 0.2, 0.4, 0.6], [10, 20, 30, 40, 50, 60, 70], color='cyan')\n\n# Set the color of the histogram bars\nax.bar([-0.6, -0.4, -0.2, 0, 0.2, 0.4, 0.6], [10, 20, 30, 40, 50, 60, 70], color='magenta')\n\n# Set the color of the histogram bars\nax.bar([-0.6, -0.4, -0.2, 0, 0.2, 0.4, 0.6], [10, 20, 30, 40, 50, 60, 70], color='black')\n\n# Set the color of the histogram bars\nax.bar([-0.6, -0.4, -0.2, 0, 0.2, 0.4, 0.6], [10, 20, 30, 40, 50, 60, 70], color='white')\n\n# Set the color of the histogram bars\nax.bar([-0.6, -0.4, -0.2, 0, 0.2, 0.4, 0.6], [10, 20, 30, 40, 50, 60, 70], color='gray')\n\n# Set the color of the histogram bars\nax.bar([-0.6, -0.4, -0.2, 0, 0.2, 0.4, 0.6], [10, 20, 30, 40, 50, 60, 70], color='brown')\n\n# Set the color of the histogram bars\nax.bar([-0.6, -0.4, -0.2, 0, 0.2, 0.4, 0.6], [10, 20, 30, 40, 50, 60, 70], color='pink')\n\n# Set the color of the histogram bars\nax.bar([-0.6, -0.4, -0.2, 0, 0.2, 0.4, 0.6], [10, 20, 30, 40, 50, 60, 70], color='purple')\n\n# Set the color of the histogram bars\nax.bar([-0.6, -0.4, -0.2, 0, 0.2, 0.4, 0.6], [10, 20, 30, 40, 50, 60, 70], color='orange')\n\n# Set the color of the histogram bars\nax.bar([-0.6, -0.4, -0.2, 0, 0.2, 0.4, 0.6], [10, 20, 30, 40, 50, 60, 70], color='cyan')\n\n# Set the color of the histogram bars\nax.bar([-0.6, -0.4, -0.2, 0, 0.2, 0.4, 0.6], [10, 20, 30, 40, 50, 60, 70], color='magenta')\n\n# Set the color of the histogram bars\nax.bar([-0.6, -0.4, -0.2, 0, 0.2, 0.4, 0.6], [10, 20, 30, 40, 50, 60, 70], color='black')\n\n# Set the color of the histogram bars\nax.bar([-0.6, -0.4, -0.2, 0, 0.2, 0.4, 0.6], [10, 20, 30, 40, 50, 60, 70], color='white')\n\n# Set the color of the histogram bars\nax.bar([-0.6, -0.4, -0.2, 0, 0.2, 0.4, 0.6], [10, 20, 30, 40, 50, 60, 70], color='gray')\n\n# Set the color of the histogram bars\nax.bar([-0.6, -0.4, -0.2, 0, 0.2, 0.4, 0.6], [10, 20, 30, 40, 50, 60, 70], color='brown')\n\n# Set the color of the histogram bars\nax.bar([-0.6, -0.4, -0.2, 0, 0.2, 0.4, 0.6], [10, 20, 30, 40, 50, 60, 70], color='pink')\n\n# Set the color of the histogram bars\nax.bar([-0.6, -0.4, -0.2, 0, 0.2, 0.4, 0.6], [10, 20, 30, 40, 50, 60, 70], color='purple')\n\n# Set the color of the histogram bars\nax.bar([-0.6, -0.4, -0.2, 0, 0.2, 0.4, 0.6], [10, 20, 30, 40, 50, 60, 70], color='orange')\n\n# Set the color of the histogram bars\nax.bar([-0.6, -0.4, -0.2, 0, 0.2, 0.4, 0.6], [10, 20, 30, 40, 50, 60, 70], color='cyan')\n\n# Set the color of the histogram bars\nax.bar([-0.6, -0.4, -0.2, 0, 0.2, 0.4, 0.6], [10, 20, 30, 40, 50, 60, 70], color='magenta')\n\n# Set the color of the histogram bars\nax.bar([-0.6, -0.4, -0.2, 0, 0.2, 0.4, 0.6], [10, 20, 30, 40, 50, 60, 70], color='black')\n\n# Set the color of the histogram bars\nax.bar([-0.6, -0.4, -0.2, 0, 0.2, 0.4, 0.6], [10, 20, 30, 40, 50, 60, 70], color='white')\n\n# Set the color of the histogram bars\nax.bar([-0.6, -0.4, -0.2, 0, 0.2, 0.4, 0.6], [10, 20, 30, 40, 50, 60, 70], color='gray')\n\n# Set the color of the histogram bars\nax.bar([-0.6, -0.4, -0.2, 0, 0.2, 0.4, 0.6], [10, 20, 30, 40, 50, 60, 70], color='brown')\n\n# Set the color of the histogram bars\nax.bar([-0.6, -0.4, -0.2, 0, 0.2, 0.4, 0.6], [10, 20, 30, 40, 50, 60, 70], color='pink')\n\n# Set the color of the histogram bars\nax.bar([-0.6, -0.4, -0.2, 0, 0.2, 0.4, 0.6], [10, 20, 30, 40, 50, 60, 70], color='purple')\n\n# Set the color of the histogram bars\nax.bar([-0.6, -0.4, -0.2, 0, 0.2, 0.4, 0.6], [10, 20, 30, 40, 50, 60, 70], color='orange')\n\n# Set the color of the histogram bars\nax.bar([-0.6, -0.4, -0.2, 0, 0.2, 0.4, 0.6], [10, 20, 30, 40, 50, 60, 70], color='cyan')\n\n# Set the color of the histogram bars\nax.bar([-0.6, -0.4, -0.2, 0, 0.2, 0.4, 0.6], [10, 20, 30, 40, 50, 60, 70], color='magenta')\n\n# Set the color of the histogram bars\nax.bar([-0.6, -0.4, -0.2, 0, 0.2, 0.4, 0.6], [10, 20, 30, 40, 50, 60, 70], color='black')\n\n# Set the color of the histogram bars\nax.bar([-0.6, -0.4, -0.2, 0, 0.2, 0.4, 0.6], [10, 20, 30, 40, 50, 60, 70], color='white')\n\n# Set the color of the histogram bars\nax.bar([-0.6, -0.4, -0.2, 0, 0.2, 0.4, 0.6], [10, 20, 30, 40, 50, 60, 70], color='gray')\n\n# Set the color of the histogram bars\nax.bar([-0.6, -0.4, -0.2, 0, 0.2, 0.4, 0.6], [10, 20, 30, 40, 50, 60, 70], color='brown')\n\n# Set the color of the histogram bars\nax.bar([-0.6, -0.4, -0.2, 0, 0.2, 0.4, 0.6], [10, 20, 30, 40, 50, 60, 70], color='pink')\n\n# Set the color of the histogram bars\nax.bar([-0.6, -0.4, -0.2, 0, 0.2, 0.4, 0.6], [10, 20, 30, 40, 50, 60, 70], color='purple')\n\n# Set the color of the histogram bars\nax.bar([-0.6, -0.4, -0.2, 0, 0.2, 0.4, 0.6], [10, 20, 30, 40, 50, 60, 70], color='orange')\n\n# Set the color of the histogram bars\nax.bar([-0.6, -0.4, -0.2, 0, 0.2, 0.4, 0.6], [10, 20, 30, 40, 50, 60, 70], color='cyan')\n\n# Set the color of the histogram bars\nax.bar([-0.6, -0.4, -0.2, 0, 0.2, 0.4, 0.6], [10, 20, 30, 40, 50, 60, 70], color='magenta')\n\n# Set the color of the histogram bars\nax.bar([-0.6, -0.4, -0.2, 0, 0.2, 0.4, 0.6], [10, 20, 30, 40, 50, 60, 70], color='black')\n\n# Set the color of the histogram bars\nax.bar([-0.6, -0.4, -0.2, 0, 0.2, 0.4, 0.6], [10, 20, 30, 40, 50, 60, 70], color='white')\n\n# Set the color of the histogram bars\nax.bar([-0.6, -0.4, -0.2, 0, 0.2, 0.4, 0.6], [10, 20, 30, 40, 50, 60, 70], color='gray')\n\n# Set the color of the histogram bars\nax.bar([-0.6, -0.4, -0.2, 0, 0.2, 0.4, 0.6], [10, 20, 30, 40, 50, 60, 70], color='brown')\n\n# Set the color of the histogram bars\nax.bar([-0.6, -0.4, -0.2, 0, 0.2, 0.4, 0.6], [10, 20, 30, 40, 50, 60, 70], color='pink')\n\n# Set the color of the histogram bars\nax.bar([-0.6, -0.4, -0.2, 0, 0.2, 0.4, 0.6], [10, 20, 30, 40, 50, 60, 70], color='purple')\n\n# Set the color of the histogram bars\nax.bar([-0.6, -0.4, -0.2, 0, 0.2, 0.4, 0.6], ["}
{"file": "dataset/ori_500/multidiff_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure with two subplots\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(8.0, 10.0))\n\n# Plot the first subplot\nx = np.linspace(0, 5, 100)\ny = np.sin(x)\nax1.plot(x, y, 'bo-')\nax1.set_xlabel('Relative Year')\nax1.set_ylabel('Energy Consumption (GWh)')\nax1.set_title('Energy Consumption Over Time')\n\n# Plot the second subplot\nx = np.linspace(-4, 4, 100)\ny = np.linspace(-2, 2, 100)\nX, Y = np.meshgrid(x, y)\nZ = np.sin(np.sqrt(X**2 + Y**2))\nax2.contourf(X, Y, Z, levels=20, cmap='Blues')\nax2.set_xlabel('Relative Month')\nax2.set_ylabel('RPM')\nax2.set_title('Engine Performance')\n\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data for the pie chart\nlabels = ['Ancient Scripts', 'Modern Records', 'Medieval Texts', 'Renaissance Literature']\nsizes = [15, 35, 30, 20]\ncolors = ['#FF9999','#66b3ff','#99ff99','#ffcc99']\n\n# Create a figure and axis for the pie chart\nfig, ax = plt.subplots(figsize=(10, 5), subplot_kw={'aspect': 'equal'})\n\n# Plot the pie chart\nwedges, texts, autotexts = ax.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%', startangle=140)\n\n# Set the title of the pie chart\nax.set_title('Historical Document Types in Library')\n\n# Create a scatter plot for the document count over historical periods\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Define the data for the scatter plot\nx = np.array([1400, 1600, 1800, 2000])\ny = np.array([350, 300, 250, 200])\n\n# Plot the scatter plot\nax.scatter(x, y, color='purple')\n\n# Set the title of the scatter plot\nax.set_title('Document Count Over Historical Periods')\n\n# Set the x-axis label\nax.set_xlabel('Year')\n\n# Set the y-axis label\nax.set_ylabel('Number of Documents')\n\n# Set the x-axis limits\nax.set_xlim(400, 2000)\n\n# Set the y-axis limits\nax.set_ylim(150, 400)\n\n# Display the plots\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the left column\nbrands = ['Luxury Brand Popularity vs Price', 'Louis Vuitton', 'Chanel', 'Dior', 'Prada']\npopularity_index = [9.25, 9.0, 9.0, 8.75, 7.5]\naverage_price = [1000, 1200, 1600, 1800, 2000]\n\n# Data for the right column\nbrands_right = ['Customer Satisfaction Distribution Across Brands', 'Louis Vuitton', 'Chanel', 'Dior', 'Prada']\nsatisfaction = [10, 8, 6, 4, 2]\nbrands_right = brands_right[1:]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot the left column\nax.plot(popularity_index, average_price, 'ro-')\nfor i, txt in enumerate(brands):\n    ax.annotate(txt, (popularity_index[i], average_price[i]))\n\n# Plot the right column\nax2 = ax.twinx()\nax2.barh(brands_right, satisfaction, color='blue')\n\n# Set the title and labels\nax.set_title('Luxury Brand Popularity vs Price vs Average Price ($)')\nax.set_xlabel('Popularity Index')\nax.set_ylabel('Average Price ($)')\n\nax2.set_ylabel('Customer Satisfaction')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\nfig, ax = plt.subplots(2, 3, figsize=(10.0, 7.0))\n\n# Accuracy\nax[0, 0].barh(['Zhang2020', 'Addelpalli2021', 'Rice2020', 'Rade2021', 'Engstrom2019', 'Hendrycks2019'], [75.32, 77.11, 77.03, 76.86, 75.34, 74.52], color='green')\nax[0, 0].set_title('Accuracy (%)')\nax[0, 0].set_xlim([0, 100])\n\n# NFR\nax[0, 1].barh(['Zhang2020', 'Addelpalli2021', 'Rice2020', 'Rade2021', 'Engstrom2019', 'Hendrycks2019'], [0.02, 0.08, 0.25, 0.23, 0.0, 0.0], color='red')\nax[0, 1].set_title('NFR (%)')\nax[0, 1].set_xlim([0, 10])\n\n# NNR\nax[0, 2].barh(['Zhang2020', 'Addelpalli2021', 'Rice2020', 'Rade2021', 'Engstrom2019', 'Hendrycks2019'], [0.08, 0.17, 0.25, 0.23, 0.0, 0.0], color='blue')\nax[0, 2].set_title('NNR (%)')\nax[0, 2].set_xlim([0, 10])\n\n# Robust Accuracy\nax[1, 0].barh(['Zhang2020', 'Addelpalli2021', 'Rice2020', 'Rade2021', 'Engstrom2019', 'Henriques2021', 'Addelpalli2021'], [60.5, 59.3, 58.35, 59.1, 60.5, 55.95, 55.5], color='red')\nax[1, 0].set_title('Robust Accuracy (%)')\nax[1, 0].set_xlim([0, 100])\n\n# Robust NFR\nax[1, 1].barh(['Zhang2020', 'Addelpalli2021', 'Rice2020', 'Rade2021', 'Engstrom2019', 'Henriques2021', 'Addelpalli2021'], [0.25, 0.25, 0.25, 0.25, 0.0, 0.0, 0.0], color='purple')\nax[1, 1].set_title('Robust NFR (%)')\nax[1, 1].set_xlim([0, 10])\n\n# Robust NNR\nax[1, 2].barh(['Zhang2020', 'Addelpalli2021', 'Rice2020', 'Rade2021', 'Engstrom2019', 'Henriques2021', 'Addelpalli2021'], [0.25, 0.25, 0.25, 0.25, 0.0, 0.0, 0.0], color='orange')\nax[1, 2].set_title('Robust NNR (%)')\nax[1, 2].set_xlim([0, 10])\n\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ncontext = ['Full Context', 'Partial Context', 'No Context', 'HCube', 'Sobol', 'Random']\nvariance = [0.6, 0.6, 0.8, 0.8, 0.8, 0.8]\nregret = [[0.25, 0.3, 0.35, 0.4, 0.45, 0.5], [0.25, 0.3, 0.35, 0.4, 0.45, 0.5], [0.25, 0.3, 0.35, 0.4, 0.45, 0.5], [0.25, 0.3, 0.35, 0.4, 0.45, 0.5], [0.25, 0.3, 0.35, 0.4, 0.45, 0.5], [0.25, 0.3, 0.35, 0.4, 0.45, 0.5]]\n\n# Plot\nfig, ax1 = plt.subplots(figsize=(7.0, 9.0))\nax1.set_xlabel('Trials')\nax1.set_ylabel('Generalized Variance', color='tab:blue')\nax1.plot(variance, color='tab:blue')\nax1.tick_params(axis='y', labelcolor='tab:blue')\n\nax2 = ax1.twinx()\nax2.set_ylabel('Average Regret', color='tab:purple')\nfor i, r in enumerate(regret):\n    ax2.plot(r, label=context[i], color=plt.cm.viridis(i/len(context)))\nax2.legend(loc='upper right')\nax2.tick_params(axis='y', labelcolor='tab:purple')\n\nfig.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 4))\n\n# Set the title of the plot\nax.set_title('Debaters')\n\n# Create a bar chart\nbar_width = 0.35\nindex = np.arange(len(['GPT-3.5-Turbo', 'Claude 1.3', 'Claude 2.1', 'GPT-4-Turbo']))\nbar1 = ax.bar(index - bar_width/2, [100, 150, 200, 250], bar_width, label='GPT-3.5-Turbo')\nbar2 = ax.bar(index + bar_width/2, [120, 170, 220, 270], bar_width, label='Claude 1.3')\nax.set_xlabel('Debater')\nax.set_ylabel('Rating')\nax.set_xticks(index)\nax.set_xticklabels(['GPT-3.5-Turbo', 'Claude 1.3', 'Claude 2.1', 'GPT-4-Turbo'])\nax.legend()\n\n# Create a scatter plot\nscatter_x = [-100, 0, 100, 200]\nscatter_y = [100, 150, 200, 250]\nax.scatter(scatter_x, scatter_y, color='red')\n\n# Create a line plot\nline_x = [-100, 0, 100, 200]\nline_y = [100, 150, 200, 250]\nax.plot(line_x, line_y, color='blue')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the pie chart\nsizes = [4.6, 10.6, 11.3, 13.2, 29.8, 30.5]\nlabels = ['Gray', 'Purple', 'Yellow', 'Light Blue', 'Blue', 'Cyan']\ncolors = ['#808080', '#800080', '#FFFF00', '#ADD8E6', '#0000FF', '#00FFFF']\n\n# Create a pie chart\nfig, ax = plt.subplots(figsize=(5.0, 5.0))\nwedges, texts, autotexts = ax.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%', startangle=140)\n\n# Set the aspect ratio of the plot to be equal so that pie is drawn as a circle.\nax.axis('equal')  \n\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_10.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the ingredients and their weights\ningredients = ['90 g sugar', '1 egg', '60 g butter', '1/2 package of yeast', '100 ml milk']\nweights = [90, 1, 60, 0.5, 100]\n\n# Create a color map for the ingredients\ncmap = plt.get_cmap('tab20')\ncolors = cmap(np.linspace(0, 1, len(ingredients)))\n\n# Create a pie chart\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\nax.pie(weights, labels=ingredients, colors=colors, startangle=90, autopct='%1.1f%%')\n\n# Add a title\nax.set_title('Matplotlib bakery: A donut')\n\n# Add a legend\nax.legend(ingredients, loc='upper right')\n\n# Display the plot\nplt.show()"}
{"file": "dataset/ori_500/pie_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nlabels = ['Transport', 'Utilities', 'Food', 'Others', 'Entertainment']\nsizes = [37.5, 16.7, 29.2, 10.0, 10.0]\ncolors = ['#007FFF', '#00BFFF', '#00FF7F', '#FFFF00', '#FFA500']\nexplode = (0.1, 0, 0, 0, 0)\n\n# Create pie chart\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\nwedges, texts, autotexts = ax.pie(sizes, explode=explode, labels=labels, colors=colors,\nautopct='%1.1f%%', startangle=140, textprops=dict(color=\"w\"))\n\n# Add a circle at the center to make it a donut chart\ncentre_circle = plt.Circle((0,0),0.70,fc='white')\nfig.gca().add_artist(centre_circle)\n\n# Set title\nax.set_title('Expenses - Company vs. Project')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for LoRA\nlora_data = [31.4, 15.7, 19.9, 33.0]\nlora_labels = ['Unused', 'Model', 'Optimizer', 'Gradient']\nlora_colors = ['orange', 'blue', 'red', 'green']\n\n# Data for QLoRA\nqlora_data = [54.8, 10.5, 6.3, 28.4]\nqlora_labels = ['Unused', 'Model', 'Optimizer', 'Gradient']\nqlora_colors = ['orange', 'red', 'blue', 'green']\n\nfig, axs = plt.subplots(1, 2, figsize=(10.0, 4.0))\n\n# Plotting LoRA\naxs[0].pie(lora_data, labels=lora_labels, colors=lora_colors, autopct='%1.1f%%')\naxs[0].set_title('LoRA')\n\n# Plotting QLoRA\naxs[1].pie(qlora_data, labels=qlora_labels, colors=qlora_colors, autopct='%1.1f%%')\naxs[1].set_title('QLoRA')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the first circle\ndata1 = [25.1, 26.4, 12.6]\ncolors1 = ['yellow', 'green', 'orange']\nlabels1 = ['Model', 'Optimizer', 'Gradient+Activations+Other']\n\n# Define the data for the second circle\ndata2 = [46.2, 4.6, 5.3, 23.9]\ncolors2 = ['yellow', 'green', 'orange', 'lightgreen']\nlabels2 = ['Model', 'Optimizer', 'Gradient+Activations+Other', 'Unused']\n\n# Create the figure and axis objects\nfig, ax = plt.subplots(1, 2, figsize=(5.0, 8.0))\n\n# Plot the first circle\nax[0].pie(data1, colors=colors1, labels=labels1, startangle=90)\nax[0].set_title('Full Finetuning')\n\n# Plot the second circle\nax[1].pie(data2, colors=colors2, labels=labels2, startangle=90)\nax[1].set_title('QLoRA')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\ncategories = ['Fruits', 'Proteins', 'Vegetables', 'Grains', 'Dairy']\nvalues = [25.0, 35.0, 20.0, 10.0, 10.0]\ncolors = ['pink', 'skyblue', 'lightgreen', 'orange', 'purple']\n\n# Create a pie chart\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\nwedges, texts, autotexts = ax.pie(values, labels=categories, colors=colors, autopct='%1.1f%%', startangle=90)\n\n# Set the title\nax.set_title('Nutritional Distribution')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nlabels = ['Education', 'Entertainment', 'Technology']\nsizes = [18.8, 21.4, 37.5]\ncolors = ['blue', 'green', 'yellow']\nexplode = (0.1, 0, 0)  # explode 1st slice\n\n# Create a pie chart\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\nax.pie(sizes, explode=explode, labels=labels, colors=colors,\nautopct='%1.1f%%', shadow=True, startangle=140)\n\n# Equal aspect ratio ensures that pie is drawn as a circle.\nax.axis('equal')  \n\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for each category\ndogs = [20.0]\nlogs = [10.0, 30.0, 15.0]\nhogs = [40.0]\nfrogs = [30.0, 15.0]\nlogs_colors = ['purple', 'pink', 'orange']\nhogs_colors = ['blue', 'cyan']\nfrogs_colors = ['green', 'yellow']\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Draw the outer circle for dogs\nax.add_artist(plt.Circle((0.5, 0.5), 0.4, color='lightgrey'))\n\n# Draw the inner circles for logs, hogs, and frogs\nax.add_artist(plt.Circle((0.5, 0.5), 0.3, color='lightgrey'))\nax.add_artist(plt.Circle((0.5, 0.5), 0.2, color='lightgrey'))\n\n# Draw the colored segments for each category\nax.add_artist(plt.Rectangle((0.2, 0.2), 0.1, 0.1, color=logs_colors[0]))\nax.add_artist(plt.Rectangle((0.2, 0.2), 0.1, 0.1, color=logs_colors[1]))\nax.add_artist(plt.Rectangle((0.2, 0.2), 0.1, 0.1, color=logs_colors[2]))\nax.add_artist(plt.Rectangle((0.2, 0.2), 0.1, 0.1, color=hogs_colors[0]))\nax.add_artist(plt.Rectangle((0.2, 0.2), 0.1, 0.1, color=hogs_colors[1]))\nax.add_artist(plt.Rectangle((0.2, 0.2), 0.1, 0.1, color=frogs_colors[0]))\nax.add_artist(plt.Rectangle((0.2, 0.2), 0.1, 0.1, color=frogs_colors[1]))\n\n# Add labels for each category\nax.text(0.5, 0.5, 'Dogs 45%', ha='center', va='center', fontsize=12)\nax.text(0.5, 0.4, 'Logs 10%', ha='center', va='center', fontsize=10)\nax.text(0.5, 0.3, 'Hogs 30%', ha='center', va='center', fontsize=10)\nax.text(0.5, 0.2, 'Frogs 15%', ha='center', va='center', fontsize=10)\n\n# Set the aspect ratio of the plot to be equal\nax.set_aspect('equal')\n\n# Remove the axis\nax.axis('off')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nlabels = ['David', 'John', 'Marry', 'Peter']\nsizes = [40, 29, 20, 11]\ncolors = ['blue', 'orange', 'green', 'red']\n\n# Create a pie chart\nfig, ax = plt.subplots(figsize=(5.0, 5.0))\nax.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%', startangle=140)\n\n# Set the title\nax.set_title('Pie Chart')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the pie chart\nlabels = ['France', 'Germany', 'Italy']\nsizes = [18, 12, 28]\ncolors = ['orange', 'blue', 'red']\nexplode = (0.1, 0, 0)  # explode 1st slice\n\n# Create a pie chart\nfig, ax = plt.subplots(figsize=(5.0, 5.0))\nax.pie(sizes, explode=explode, labels=labels, colors=colors,\nautopct='%1.1f%%', shadow=True, startangle=140)\n\n# Equal aspect ratio ensures that pie is drawn as a circle.\nax.axis('equal')  \n\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nlabels = ['5.7%', '13.3%', '14.3%', '19.0%', '21.4%', '26.2%']\nsizes = [5.7, 13.3, 14.3, 19.0, 21.4, 26.2]\ncolors = ['#FFD700', '#FFA500', '#FF6347', '#FF4500', '#8B0000', '#800000']\n\n# Create a pie chart\nfig, ax = plt.subplots(figsize=(5.0, 5.0))\nax.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%', startangle=140)\nax.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\n\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\ncategories = ['Psychological', 'Others', 'Market', 'Satisfactory', 'Social']\nvalues = [12.4, 35.4, 17.2, 24.7, 10.3]\n\n# Create a pie chart\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\nax.pie(values, labels=categories, autopct='%1.1f%%', startangle=90)\n\n# Set the title\nax.set_title('Pie Chart of Categories')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nlabels = ['Youtube', 'Facebook', 'Instagram', 'Twitter', 'LinkedIn']\nsizes = [25, 35, 10, 10, 20]\ncolors = ['skyblue', 'lightskyblue', 'lightblue', 'deepskyblue', 'navy']\n\n# Create a pie chart\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\nax.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%', startangle=90)\n\n# Set the title\nax.set_title('Social Media Usage')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nlabels = ['COLING', 'EACL', 'NAACL', 'EMNLP']\nsizes = [25.4, 7.4, 20.3, 12.2]\ncolors = ['skyblue', 'lightgreen', 'lightcoral', 'lightskyblue']\nexplode = (0.1, 0, 0, 0)  # explode 1st slice\n\n# Create a pie chart\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\nax.pie(sizes, explode=explode, labels=labels, colors=colors,\nautopct='%1.1f%%', shadow=True, startangle=140)\n\n# Equal aspect ratio ensures that pie is drawn as a circle.\nax.axis('equal')  \n\n# Add a title\nax.set_title('NLP Conference Influence')\n\n# Add a rectangle for ACL\nrect = plt.Rectangle((0.8, 0.8), 0.2, 0.2, color='orange')\nax.add_patch(rect)\nax.text(0.9, 0.9, 'ACL', ha='center', va='center')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for each energy source\nenergy_sources = ['Coal', 'Hydro', 'Wind', 'Solar', 'Other']\nconsumption_percentages = [25.0, 15.0, 12.5, 30.0, 10.0]\ncolors = ['brown', 'blue', 'cyan', 'yellow', 'grey']\n\n# Create a pie chart for each energy source\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\nax.pie(consumption_percentages, labels=energy_sources, colors=colors, autopct='%1.1f%%', startangle=90)\nax.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\n\nplt.show()\n```"}
{"file": "dataset/ori_500/quiver_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\ndata = {\n    'English': [-4.00, -3.22, -2.44, -1.88, -1.33, -0.88, -0.44, 0.00],\n    'French': [-4.00, -3.22, -2.44, -1.88, -1.33, -0.88, -0.44, 0.00],\n    'German': [-4.00, -3.22, -2.44, -1.88, -1.33, -0.88, -0.44, 0.00],\n    'Chinese': [-4.00, -3.22, -2.44, -1.88, -1.33, -0.88, -0.44, 0.00],\n    'Korean': [-4.00, -3.22, -2.44, -1.88, -1.33, -0.88, -0.44, 0.00],\n    'Japanese': [-4.00, -3.22, -2.44, -1.88, -1.33, -0.88, -0.44, 0.00]\n}\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 4.0))\n\n# Plot the data\nfor language, values in data.items():\n    ax.plot(values, label=language)\n\n# Set the title and labels\nax.set_title('Language Sentiment Analysis')\nax.set_xlabel('Time')\nax.set_ylabel('Sentiment Score')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/quiver_2.pdf", "response": "import matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(5.0, 4.0))\n\n# Set the x-axis limits\nax.set_xlim(0, 10)\n\n# Set the y-axis limits\nax.set_ylim(-5, 0)\n\n# Set the x-axis ticks\nax.set_xticks(range(0, 11, 2))\n\n# Set the y-axis ticks\nax.set_yticks(range(-5, 1, 1))\n\n# Set the x-axis labels\nax.set_xticklabels(['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10'])\n\n# Set the y-axis labels\nax.set_yticklabels(['-5', '-4', '-3', '-2', '-1', '0'])\n\n# Set the title of the plot\nax.set_title('Language Sentiment Analysis')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the text\nax.text(0.5, -4.5, 'English', ha='center', va='center', fontsize=12, color='black')\nax.text(0.5, -3.5, 'French', ha='center', va='center', fontsize=12, color='black')\nax.text(0.5, -2.5, 'German', ha='center', va='center', fontsize=12, color='black')\n\n# Set the color of the legend\nax.legend(['Sentiment'], loc='upper left', bbox_to_anchor=(1, 1), fancybox=True, shadow=True, fontsize=10)\n\n# Set the color of the plot area\nax.set_facecolor('white')\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the border\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the text\nax.text(0.5, -4.5, 'English', ha='center', va='center', fontsize=12, color='black')\nax.text(0.5, -3.5, 'French', ha='center', va='center', fontsize=12, color='black')\nax.text(0.5, -2.5, 'German', ha='center', va='center', fontsize=12, color='black')\n\n# Set the color of the legend\nax.legend(['Sentiment'], loc='upper left', bbox_to_anchor=(1, 1), fancybox=True, shadow=True, fontsize=10)\n\n# Set the color of the plot area\nax.set_facecolor('white')\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the border\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the text\nax.text(0.5, -4.5, 'English', ha='center', va='center', fontsize=12, color='black')\nax.text(0.5, -3.5, 'French', ha='center', va='center', fontsize=12, color='black')\nax.text(0.5, -2.5, 'German', ha='center', va='center', fontsize=12, color='black')\n\n# Set the color of the legend\nax.legend(['Sentiment'], loc='upper left', bbox_to_anchor=(1, 1), fancybox=True, shadow=True, fontsize=10)\n\n# Set the color of the plot area\nax.set_facecolor('white')\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the border\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the text\nax.text(0.5, -4.5, 'English', ha='center', va='center', fontsize=12, color='black')\nax.text(0.5, -3.5, 'French', ha='center', va='center', fontsize=12, color='black')\nax.text(0.5, -2.5, 'German', ha='center', va='center', fontsize=12, color='black')\n\n# Set the color of the legend\nax.legend(['Sentiment'], loc='upper left', bbox_to_anchor=(1, 1), fancybox=True, shadow=True, fontsize=10)\n\n# Set the color of the plot area\nax.set_facecolor('white')\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the border\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the text\nax.text(0.5, -4.5, 'English', ha='center', va='center', fontsize=12, color='black')\nax.text(0.5, -3.5, 'French', ha='center', va='center', fontsize=12, color='black')\nax.text(0.5, -2.5, 'German', ha='center', va='center', fontsize=12, color='black')\n\n# Set the color of the legend\nax.legend(['Sentiment'], loc='upper left', bbox_to_anchor=(1, 1), fancybox=True, shadow=True, fontsize=10)\n\n# Set the color of the plot area\nax.set_facecolor('white')\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the border\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the text\nax.text(0.5, -4.5, 'English', ha='center', va='center', fontsize=12, color='black')\nax.text(0.5, -3.5, 'French', ha='center', va='center', fontsize=12, color='black')\nax.text(0.5, -2.5, 'German', ha='center', va='center', fontsize=12, color='black')\n\n# Set the color of the legend\nax.legend(['Sentiment'], loc='upper left', bbox_to_anchor=(1, 1), fancybox=True, shadow=True, fontsize=10)\n\n# Set the color of the plot area\nax.set_facecolor('white')\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the border\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the text\nax.text(0.5, -4.5, 'English', ha='center', va='center', fontsize=12, color='black')\nax.text(0.5, -3.5, 'French', ha='center', va='center', fontsize=12, color='black')\nax.text(0.5, -2.5, 'German', ha='center', va='center', fontsize=12, color='black')\n\n# Set the color of the legend\nax.legend(['Sentiment'], loc='upper left', bbox_to_anchor=(1, 1), fancybox=True, shadow=True, fontsize=10)\n\n# Set the color of the plot area\nax.set_facecolor('white')\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the border\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the text\nax.text(0.5, -4.5, 'English', ha='center', va='center', fontsize=12, color='black')\nax.text(0.5, -3.5, 'French', ha='center', va='center', fontsize=12, color='black')\nax.text(0.5, -2.5, 'German', ha='center', va='center', fontsize=12, color='black')\n\n# Set the color of the legend\nax.legend(['Sentiment'], loc='upper left', bbox_to_anchor=(1, 1), fancybox=True, shadow=True, fontsize=10)\n\n# Set the color of the plot area\nax.set_facecolor('white')\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the border\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the text\nax.text(0.5, -4.5, 'English', ha='center', va='center', fontsize=12, color='black')\nax.text(0.5, -3.5, 'French', ha='center', va='center', fontsize=12, color='black')\nax.text(0.5, -2.5, 'German', ha='center', va='center', fontsize=12, color='black')\n\n# Set the color of the legend\nax.legend(['Sentiment'], loc='upper left', bbox_to_anchor=(1, 1), fancybox=True, shadow=True, fontsize=10)\n\n# Set the color of the plot area\nax.set_facecolor('white')\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the border\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the text\nax.text(0.5, -4.5, 'English', ha='center', va='center', fontsize=12, color='black')\nax.text(0.5, -3.5, 'French', ha='center', va='center', fontsize=12, color='black')\nax.text(0.5, -2.5, 'German', ha='center', va='center', fontsize=12, color='black')\n\n# Set the color of the legend\nax.legend(['Sentiment'], loc='upper left', bbox_to_anchor=(1, 1), fancybox=True, shadow=True, fontsize=10)\n\n# Set the color of the plot area\nax.set_facecolor('white')\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the border\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the text\nax.text(0.5, -4.5, 'English', ha='center', va='center', fontsize=12, color='black')\nax.text(0.5, -3.5, 'French', ha='center', va='center', fontsize=12, color='black')\nax.text(0.5, -2.5, 'German', ha='center', va='center', fontsize=12, color='black')\n\n# Set the color of the legend\nax.legend(['Sentiment'], loc='upper left', bbox_to_anchor=(1, 1), fancybox=True, shadow=True, fontsize=10)\n\n# Set the color of the plot area\nax.set_facecolor('white')\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the border\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the text\nax.text(0.5, -4.5, 'English', ha='center', va='center', fontsize=12, color='black')\nax.text(0.5, -3.5, 'French', ha='center', va='center', fontsize=12, color='black')\nax.text(0.5, -2.5, 'German', ha='center', va='center', fontsize=12, color='black')\n\n# Set the color of the legend\nax.legend(['Sentiment'], loc='upper left', bbox_to_anchor=(1, 1), fancybox=True, shadow=True, fontsize=10)\n\n# Set the color of the plot area\nax.set_facecolor('white')\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the border\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the text\nax.text(0.5, -4.5, 'English', ha='center', va='center', fontsize=12, color='black')\nax.text(0.5, -3.5, 'French', ha='center', va='center', fontsize=12, color='black')\nax.text(0.5, -2.5, 'German', ha='center', va='center', fontsize=12, color='black')\n\n# Set the color of the legend\nax.legend(['Sentiment'], loc='upper left', bbox_to_anchor=(1, 1), fancybox=True, shadow=True, fontsize=10)\n\n# Set the color of the plot area\nax.set_facecolor('white')\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the border\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the text\nax.text(0.5, -4.5, 'English', ha='center', va='center', fontsize=12, color='black')\nax.text(0.5, -3.5, 'French', ha='center', va='center', fontsize=12, color='black')\nax.text(0.5, -2.5, 'German', ha='center', va='center', fontsize=12, color='black')\n\n# Set the color of the legend\nax.legend(['Sentiment'], loc='upper left', bbox_to_anchor=(1, 1), fancybox=True, shadow=True, fontsize=10)\n\n# Set the color of the plot area\nax.set_facecolor('white')\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the border\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors"}
{"file": "dataset/ori_500/quiver_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the background color of the plot\nax.set_facecolor('lightblue')\n\n# Draw arrows\nfor i in range(10):\n    for j in range(10):\n        ax.arrow(i, j, 0.1, 0.1, head_width=0.05, head_length=0.05, fc='purple', ec='purple')\n\n# Plot lines\nx = np.linspace(0, 1, 100)\ny1 = np.sin(x)\ny2 = np.cos(x)\ny3 = np.tan(x)\nax.plot(x, y1, 'r-')\nax.plot(x, y2, 'b-')\nax.plot(x, y3, 'g-')\n\n# Set labels\nax.set_xlabel('X1')\nax.set_ylabel('X2')\n\n# Set title\nax.set_title('Sample Plot')\n\n# Show legend\nax.legend(['True Field', 'SINDy Learned Field', 'Train Sample', 'Test Sample', 'SINDy Train', 'SINDy Test'])\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/quiver_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(5.0, 4.0))\n\n# Set the limits of the x and y axes\nax.set_xlim(-1, 1)\nax.set_ylim(-1, 1)\n\n# Draw arrows\nfor i in np.linspace(-1, 1, 20):\n    for j in np.linspace(-1, 1, 20):\n        ax.arrow(i, j, 0.05, 0.05, head_width=0.03, head_length=0.03, fc='b', ec='b')\n\n# Set the title of the plot\nax.set_title('Vector Field: -F + \u03c1\u2207FF (Small \u03c1)')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/quiver_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 5.0))\n\n# Set the title of the plot\nax.set_title('Magnetic Field $\\mathbf{B}$ in Tesla units')\n\n# Set the x-axis label\nax.set_xlabel('x')\n\n# Set the y-axis label\nax.set_ylabel('y')\n\n# Generate a grid of points\nx = np.linspace(-2, 2, 100)\ny = np.linspace(-2, 2, 100)\nX, Y = np.meshgrid(x, y)\n\n# Calculate the magnetic field values\nBx = np.sin(X) * np.cos(Y)\nBy = np.cos(X) * np.sin(Y)\n\n# Plot the magnetic field vectors\nQ = ax.quiver(X, Y, Bx, By, color='b', scale=20)\n\n# Add a colorbar to the plot\ncbar = fig.colorbar(Q)\ncbar.set_label('Magnitude')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 7.0))\n\n# Define the data for the radar chart\ncategories = ['VQAv2', 'MME', 'MM', 'LLaVA-W', 'POPE']\nvalues = [79.9, 64.9, 66.9, 75.8, 86.4]\ncolors = ['blue', 'red', 'green', 'purple', 'orange']\n\n# Draw the radar chart\nax.pie(values, labels=categories, colors=colors, startangle=90, counterclock=False)\n\n# Set the title of the plot\nax.set_title('Radar Chart')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the colors for each direction\ncolors = {\n    'fr': 'pink',\n    'el': 'pink',\n    'de': 'blue',\n    'sw': 'green',\n    'ar': 'green',\n    'hi': 'orange',\n    'ru': 'orange',\n    'th': 'orange',\n    'tr': 'orange',\n    'ur': 'red',\n    'vi': 'red',\n    'zh': 'red'\n}\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(5.0, 5.0))\n\n# Draw the circle\ncircle = plt.Circle((0.5, 0.5), 0.4, color='white')\nax.add_artist(circle)\n\n# Draw the lines\nfor direction, color in colors.items():\n    ax.plot([0.5, 0.5], [0.5, 0.5], color=color, linewidth=2)\n\n# Set the title\nax.set_title('XNLI (speed-up ratio: 4)', fontsize=16)\n\n# Set the labels\nax.set_xlabel('Speed', fontsize=14)\nax.set_ylabel('Time', fontsize=14)\n\n# Set the tick labels\nax.set_xticks([])\nax.set_yticks([])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(4.0, 4.0))\n\n# Define colors\ncolors = [\"green\", \"cyan\"]\n\n# Draw a circle\ncircle = plt.Circle((0.5, 0.5), 0.4, color=\"gray\")\nax.add_artist(circle)\n\n# Draw a hexagon\nhexagon = plt.Polygon([[0.3, 0.2], [0.4, 0.1], [0.6, 0.1], [0.7, 0.2], [0.6, 0.3], [0.4, 0.3]], color=colors[0])\nax.add_patch(hexagon)\n\n# Draw a rectangle\nrectangle = plt.Rectangle([0.3, 0.4], 0.4, 0.2, color=colors[1])\nax.add_patch(rectangle)\n\n# Draw a triangle\ntriangle = plt.Polygon([[0.5, 0.6], [0.4, 0.8], [0.6, 0.8]], color=colors[0])\nax.add_patch(triangle)\n\n# Draw a star\nstar = plt.Polygon([[0.5, 0.9], [0.4, 0.8], [0.6, 0.8], [0.5, 0.7], [0.4, 0.9], [0.6, 0.9]], color=colors[1])\nax.add_patch(star)\n\n# Set limits and labels\nax.set_xlim(0, 1)\nax.set_ylim(0, 1)\nax.set_aspect('equal')\nax.axis('off')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Define the data for the plot\ndata = {\n    '\u03bcR': [0.496],\n    '\u03bcAUC': [0.37],\n    '\u03bcTP': [0.5],\n    'NTP': [0.46],\n    'Nff': [0.28],\n    'NTP': [0.29],\n    'Nff': [0.22],\n    'NTP': [0.36],\n    'Nff': [0.29],\n    'NTP': [0.48],\n    'Nff': [0.46]\n}\n\n# Plot the data\nfor key, values in data.items():\n    ax.plot(values, label=key)\n\n# Set the title and labels\nax.set_title('Plot of Data')\nax.set_xlabel('X-axis')\nax.set_ylabel('Y-axis')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data\ncategories = ['novel', 'programming world', 'universe', 'fairy tale', 'country', 'special place', 'cultural event']\nvalues = [0.2, 0.4, 0.6, 0.8, 0.6, 0.8, 0.2]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Draw the circle\ncircle = plt.Circle((0.5, 0.5), 0.4, color='gray')\nax.add_artist(circle)\n\n# Draw the lines\nfor i, category in enumerate(categories):\n    angle = (i / len(categories)) * 2 * np.pi\n    x = 0.5 + 0.3 * np.cos(angle)\n    y = 0.5 + 0.3 * np.sin(angle)\n    ax.plot([0.5, x], [0.5, y], color='blue')\n\n# Set the title\nax.set_title('My Circle Plot')\n\n# Set the labels\nax.set_xlabel('X Label')\nax.set_ylabel('Y Label')\n\n# Set the limits\nax.set_xlim(0, 1)\nax.set_ylim(0, 1)\n\n# Set the aspect ratio\nax.set_aspect('equal')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the colors for each subject\ncolors = {\n    'Reasoning': 'blue',\n    'Writing': 'red',\n    'Math': 'green',\n    'Coding': 'orange',\n    'Extraction': 'purple',\n    'Humanities': 'brown',\n    'STEM': 'grey'\n}\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Draw the circle\ncircle = plt.Circle((0.5, 0.5), 0.4, color='white', fill=False)\nax.add_artist(circle)\n\n# Draw the lines\nfor i, (subject, color) in enumerate(colors.items()):\n    angle = 2 * np.pi * i / len(colors)\n    x = 0.5 + 0.3 * np.cos(angle)\n    y = 0.5 + 0.3 * np.sin(angle)\n    ax.plot([0.5, x], [0.5, y], color=color, linewidth=2)\n\n# Set the title\nax.set_title('Roleplay')\n\n# Set the labels\nax.set_xlabel('Reasoning')\nax.set_ylabel('Writing')\n\n# Set the aspect ratio to be equal\nax.set_aspect('equal')\n\n# Remove the ticks\nax.set_xticks([])\nax.set_yticks([])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Set the title of the plot\nax.set_title('MUJI vs Nestle in Food Safety')\n\n# Draw a circle\ncircle = plt.Circle((0.5, 0.5), 0.4, color='gray')\nax.add_artist(circle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='orange')\nax.add_artist(rectangle)\n\n# Draw a triangle\ntriangle = plt.Polygon([[0.3, 0.7], [0.7, 0.7], [0.5, 0.3]], color='green')\nax.add_artist(triangle)\n\n# Draw a star\nstar = plt.Polygon([[0.5, 0.9], [0.4, 0.8], [0.6, 0.8], [0.5, 0.6], [0.4, 0.6], [0.5, 0.4], [0.6, 0.6], [0.4, 0.6]], color='blue')\nax.add_artist(star)\n\n# Draw a pentagon\npentagon = plt.Polygon([[0.3, 0.3], [0.5, 0.1], [0.7, 0.3], [0.6, 0.5], [0.4, 0.5]], color='red')\nax.add_artist(pentagon)\n\n# Draw a hexagon\nhexagon = plt.Polygon([[0.2, 0.5], [0.3, 0.7], [0.5, 0.7], [0.7, 0.5], [0.6, 0.3], [0.4, 0.3]], color='purple')\nax.add_artist(hexagon)\n\n# Draw a circle with a hole\ncircle_with_hole = plt.Circle((0.8, 0.5), 0.1, color='yellow')\nax.add_artist(circle_with_hole)\n\n# Draw a rectangle with a hole\nrectangle_with_hole = plt.Rectangle((0.6, 0.2), 0.2, 0.2, color='pink')\nax.add_artist(rectangle_with_hole)\n\n# Draw a triangle with a hole\ntriangle_with_hole = plt.Polygon([[0.7, 0.7], [0.9, 0.7], [0.8, 0.5]], color='brown')\nax.add_artist(triangle_with_hole)\n\n# Draw a star with a hole\nstar_with_hole = plt.Polygon([[0.8, 0.9], [0.7, 0.8], [0.9, 0.8], [0.8, 0.6], [0.7, 0.6], [0.8, 0.4], [0.9, 0.6], [0.7, 0.6]], color='cyan')\nax.add_artist(star_with_hole)\n\n# Draw a pentagon with a hole\npentagon_with_hole = plt.Polygon([[0.6, 0.3], [0.7, 0.1], [0.9, 0.3], [0.8, 0.5], [0.6, 0.5]], color='magenta')\nax.add_artist(pentagon_with_hole)\n\n# Draw a hexagon with a hole\nhexagon_with_hole = plt.Polygon([[0.5, 0.5], [0.6, 0.7], [0.8, 0.7], [0.9, 0.5], [0.8, 0.3], [0.6, 0.3]], color='lime')\nax.add_artist(hexagon_with_hole)\n\n# Draw a circle with a hole and a rectangle with a hole\ncircle_with_hole_and_rectangle_with_hole = plt.Circle((0.2, 0.8), 0.1, color='white')\nax.add_artist(circle_with_hole_and_rectangle_with_hole)\n\n# Draw a rectangle with a hole and a triangle with a hole\nrectangle_with_hole_and_triangle_with_hole = plt.Rectangle((0.4, 0.5), 0.2, 0.2, color='black')\nax.add_artist(rectangle_with_hole_and_triangle_with_hole)\n\n# Draw a triangle with a hole and a star with a hole\ntriangle_with_hole_and_star_with_hole = plt.Polygon([[0.3, 0.9], [0.5, 0.8], [0.7, 0.8], [0.6, 0.6], [0.4, 0.6], [0.5, 0.4], [0.6, 0.6], [0.4, 0.6]], color='silver')\nax.add_artist(triangle_with_hole_and_star_with_hole)\n\n# Draw a star with a hole and a pentagon with a hole\nstar_with_hole_and_pentagon_with_hole = plt.Polygon([[0.5, 0.1], [0.4, 0.3], [0.6, 0.3], [0.5, 0.5], [0.4, 0.5], [0.5, 0.7], [0.6, 0.5], [0.4, 0.5]], color='gold')\nax.add_artist(star_with_hole_and_pentagon_with_hole)\n\n# Draw a pentagon with a hole and a hexagon with a hole\npentagon_with_hole_and_hexagon_with_hole = plt.Polygon([[0.7, 0.5], [0.8, 0.7], [1.0, 0.7], [0.9, 0.5], [0.8, 0.3], [0.6, 0.3]], color='navy')\nax.add_artist(pentagon_with_hole_and_hexagon_with_hole)\n\n# Draw a hexagon with a hole and a circle with a hole\nhexagon_with_hole_and_circle_with_hole = plt.Circle((0.8, 0.2), 0.1, color='olive')\nax.add_artist(hexagon_with_hole_and_circle_with_hole)\n\n# Draw a circle with a hole and a rectangle with a hole and a triangle with a hole\ncircle_with_hole_and_rectangle_with_hole_and_triangle_with_hole = plt.Circle((0.2, 0.5), 0.1, color='coral')\nax.add_artist(circle_with_hole_and_rectangle_with_hole_and_triangle_with_hole)\n\n# Draw a rectangle with a hole and a triangle with a hole and a star with a hole\nrectangle_with_hole_and_triangle_with_hole_and_star_with_hole = plt.Rectangle((0.4, 0.2), 0.2, 0.2, color='plum')\nax.add_artist(rectangle_with_hole_and_triangle_with_hole_and_star_with_hole)\n\n# Draw a triangle with a hole and a star with a hole and a pentagon with a hole\ntriangle_with_hole_and_star_with_hole_and_pentagon_with_hole = plt.Polygon([[0.3, 0.3], [0.5, 0.1], [0.7, 0.3], [0.6, 0.5], [0.4, 0.5], [0.5, 0.7], [0.6, 0.5], [0.4, 0.5]], color='tan')\nax.add_artist(triangle_with_hole_and_star_with_hole_and_pentagon_with_hole)\n\n# Draw a star with a hole and a pentagon with a hole and a hexagon with a hole\nstar_with_hole_and_pentagon_with_hole_and_hexagon_with_hole = plt.Polygon([[0.5, 0.9], [0.4, 0.8], [0.6, 0.8], [0.5, 0.6], [0.4, 0.6], [0.5, 0.4], [0.6, 0.6], [0.4, 0.6]], color='indigo')\nax.add_artist(star_with_hole_and_pentagon_with_hole_and_hexagon_with_hole)\n\n# Draw a pentagon with a hole and a hexagon with a hole and a circle with a hole\npentagon_with_hole_and_hexagon_with_hole_and_circle_with_hole = plt.Circle((0.8, 0.8), 0.1, color='violet')\nax.add_artist(pentagon_with_hole_and_hexagon_with_hole_and_circle_with_hole)\n\n# Draw a hexagon with a hole and a circle with a hole and a rectangle with a hole\nhexagon_with_hole_and_circle_with_hole_and_rectangle_with_hole = plt.Rectangle((0.6, 0.5), 0.2, 0.2, color='azure')\nax.add_artist(hexagon_with_hole_and_circle_with_hole_and_rectangle_with_hole)\n\n# Draw a circle with a hole and a rectangle with a hole and a triangle with a hole and a star with a hole\ncircle_with_hole_and_rectangle_with_hole_and_triangle_with_hole_and_star_with_hole = plt.Circle((0.2, 0.8), 0.1, color='beige')\nax.add_artist(circle_with_hole_and_rectangle_with_hole_and_triangle_with_hole_and_star_with_hole)\n\n# Draw a rectangle with a hole and a triangle with a hole and a star with a hole and a pentagon with a hole\nrectangle_with_hole_and_triangle_with_hole_and_star_with_hole_and_pentagon_with_hole = plt.Rectangle((0.4, 0.5), 0.2, 0.2, color='chocolate')\nax.add_artist(rectangle_with_hole_and_triangle_with_hole_and_star_with_hole_and_pentagon_with_hole)\n\n# Draw a triangle with a hole and a star with a hole and a pentagon with a hole and a hexagon with a hole\ntriangle_with_hole_and_star_with_hole_and_pentagon_with_hole_and_hexagon_with_hole = plt.Polygon([[0.3, 0.9], [0.5, 0.8], [0.7, 0.8], [0.6, 0.6], [0.4, 0.6], [0.5, 0.4], [0.6, 0.6], [0.4, 0.6]], color='sienna')\nax.add_artist(triangle_with_hole_and_star_with_hole_and_pentagon_with_hole_and_hexagon_with_hole)\n\n# Draw a star with a hole and a pentagon with a hole and a hexagon with a hole and a circle with a hole\nstar_with_hole_and_pentagon_with_hole_and_hexagon_with_hole_and_circle_with_hole = plt.Circle((0.8, 0.2), 0.1, color='lavender')\nax.add_artist(star_with_hole_and_pentagon_with_hole_and_hexagon_with_hole_and_circle_with_hole)\n\n# Draw a pentagon with a hole and a hexagon with a hole and a circle with a hole and a rectangle with a hole\npentagon_with_hole_and_hexagon_with_hole_and_circle_with_hole_and_rectangle_with_hole = plt.Rectangle((0.6, 0.5), 0.2, 0.2, color='wheat')\nax.add_artist(pentagon_with_hole_and_hexagon_with_hole_and_circle_with_hole_and_rectangle_with_hole)\n\n# Draw a hexagon with a hole and a circle with a hole and a rectangle with a hole and a triangle with a hole\nhexagon_with_hole_and_circle_with_hole_and_rectangle_with_hole_and_triangle_with_hole = plt.Polygon([[0.5, 0.5], [0.6, 0.7], [0.8, 0.7], [0.9, 0.5], [0.8, 0.3], [0.6, 0.3]], color='salmon')\nax.add_artist(hexagon_with_hole_and_circle_with_hole_and_rectangle_with_hole_and_triangle_with_hole)\n\n# Draw a circle with a hole and a rectangle with a hole and a triangle with a hole and a star with a hole and a pentagon with a hole\ncircle_with_hole_and_rectangle_with_hole_and_triangle_with_hole_and_star_with_hole_and_pentagon_with_hole = plt.Circle((0.2, 0.8), 0.1, color='peru')\nax.add_artist(circle_with_hole_and_rectangle_with_hole_and_triangle_with_hole_and_star_with_hole_and_pentagon_with_hole)\n\n# Draw a rectangle with a hole and a triangle with a hole and a star with a hole and a pentagon with a hole and a hexagon with a hole\nrectangle_with_hole_and_triangle_with_hole_and_star_with_hole_and_pentagon_with_hole_and_hexagon_with_hole = plt.Rectangle((0.4, 0.5), 0.2, 0.2, color='tan')\nax.add_artist(rectangle_with_hole_and_triangle_with_hole_and_star_with_hole_and_pentagon_with_hole_and_hexagon_with_hole)\n\n# Draw a triangle with a hole and a star with a hole and a pentagon with a hole and a hexagon with a hole and a circle with a hole\ntriangle_with_hole_and_star_with_hole_and_pentagon_with_hole_and_hexagon_with_hole_and_circle_with_hole = plt.Polygon([[0.3, 0.9], [0.5, 0.8], [0.7, 0.8], [0.6, 0.6], [0.4, 0.6], [0.5, 0.4], [0.6, 0.6], [0.4, 0.6]], color='indigo')\nax.add_artist(triangle_with_hole_and_star_with_hole_and_pentagon_with_hole_and_hexagon_with_hole_and_circle_with_hole)\n\n# Draw a star with a hole and a pentagon with a hole and a hexagon with a hole and a circle with a hole and a rectangle with a hole\nstar_with_hole_and_pentagon_with_hole_and_hexagon_with_hole_and_circle_with_hole_and_rectangle_with_hole = plt.Circle((0.8, 0.2), 0.1, color='violet')\nax.add_artist(star_with_hole_and_pentagon_with_hole_and_hexagon_with_hole_and_circle_with_hole_and_rectangle_with_hole)\n\n# Draw a pentagon with a hole and a hexagon with a hole and a circle with a hole and a rectangle with a hole and a triangle with a hole\npentagon_with_hole_and_hexagon_with_hole_and_circle_with_hole_and_rectangle_with_hole_and_triangle_with_hole = plt.Rectangle((0.6, 0.5), 0.2, 0.2, color='azure')\nax.add_artist(pentagon_with_hole_and_hexagon_with_hole_and_circle_with_hole_and_rectangle_with_hole_and_triangle_with_hole)\n\n# Draw a hexagon with a hole and a circle with a hole and a rectangle with a hole and a triangle with a hole and a star with a hole\nhexagon_with_hole_and_circle_with_hole_and_rectangle_with_hole_and_triangle_with_hole_and_star_with_hole = plt.Polygon([[0.5, 0.5], [0.6, 0.7], [0.8, 0.7], [0.9, 0.5], [0.8, 0.3], [0.6, 0.3]], color='salmon')\nax.add_artist(hexagon_with_hole_and_circle_with_hole_and_rectangle_with_hole_and_triangle_with_hole_and_star_with_hole)\n\n# Draw a circle with a hole and a rectangle with a hole and a triangle with a hole and a star with a hole and a pentagon with a hole and a hexagon with a hole\ncircle_with_hole_and_rectangle_with_hole_and_triangle_with_hole_and_star_with_hole_and_pentagon_with_hole_and_hexagon_with_hole = plt.Circle((0.2, 0.8), 0.1, color='peru')\nax.add_artist(circle_with_hole_and_rectangle_with_hole_and_triangle_with_hole_and_star_with_hole_and_pentagon_with_hole_and_hexagon_with_hole)\n\n# Draw a rectangle with a hole and a triangle with a hole and a star with a hole and a pentagon with a hole and a hexagon with a hole and a circle with a hole\nrectangle_with_hole_and_triangle_with_hole_and_star_with_hole_and_pentagon_with_hole_and_hexagon_with_hole_and_circle_with_hole = plt.Rectangle((0.4, 0.5), 0.2, 0.2, color='tan')\nax.add_artist(rectangle_with_hole_and_triangle_with_hole_and_star_with_hole_and_pentagon_with_hole_and_hexagon_with_hole_and_circle_with_hole)\n\n# Draw a triangle with a hole and a star with a hole and a pentagon with a hole and a hexagon with a hole and a circle with a hole and a rectangle with a hole\ntriangle_with_hole_and_star_with_hole_and_pentagon_with_hole_and_hexagon_with_hole_and_circle_with_hole_and_rectangle_with_hole = plt.Polygon([[0.3, 0.9], [0.5, 0.8], [0.7, 0.8], [0.6, 0.6], [0.4, 0.6], [0.5, 0.4], [0.6, 0.6], [0.4, 0.6]], color='indigo')\nax.add_artist(triangle_with_hole_and_star_with_hole_and_pentagon_with_hole_and_hexagon_with_hole_and_circle_with_hole_and_rectangle_with_hole)\n\n# Draw a star with a hole and a pentagon with a hole and a hexagon with a hole and a circle with a hole and a rectangle with a hole and a triangle with a hole\nstar_with_hole_and_pentagon_with_hole_and_hexagon_with_hole_and_circle_with_hole_and_rectangle_with_hole_and_triangle_with_hole = plt.Circle((0.8, 0.2), 0.1,"}
{"file": "dataset/ori_500/radar_16.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 7.0))\n\n# Set the background color of the plot\nax.set_facecolor('black')\n\n# Set the title of the plot\nax.set_title('Global Sales', color='white')\n\n# Set the x-axis label\nax.set_xlabel('Sales', color='white')\n\n# Set the y-axis label\nax.set_ylabel('Countries', color='white')\n\n# Define the data for the plot\nsales = [85.8, 78.7, 71.9, 64.1, 59.7, 50.8, 40.0, 36.1, 32.0, 20.0]\ncountries = ['Europe', 'China', 'India', 'Brazil']\n\n# Plot the data\nax.plot(sales, countries, marker='o', linestyle='-', color='orange')\n\n# Set the tick labels\nax.set_xticks(sales)\nax.set_yticks(countries)\n\n# Set the tick label colors\nax.tick_params(axis='x', colors='white')\nax.tick_params(axis='y', colors='white')\n\n# Set the grid\nax.grid(True, color='gray')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_17.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Define the data for the radar chart\ncategories = ['Extrusion', 'Injection', 'Blow Molding']\nvalues = [1, 2, 3]\nvalues2 = [4, 5, 6]\n\n# Create a radar chart\nax.plot(categories, values, label='Radar Chart 1')\nax.plot(categories, values2, label='Radar Chart 2')\n\n# Set the title of the plot\nax.set_title('Radar Chart')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_18.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Set the title of the plot\nax.set_title('Amusement Park Comparison: Disney vs Universal Studios')\n\n# Define the colors for the plots\ncolors = ['orange', 'purple']\n\n# Define the labels for the plots\nlabels = ['Disney', 'Universal Studios']\n\n# Define the data for the plots\ndata = [0.2, 0.4, 0.6, 0.8, 1.0]\n\n# Create a pie chart\nwedges, texts, autotexts = ax.pie(data, colors=colors, labels=labels, autopct='%1.1f%%')\n\n# Add a legend\nax.legend(wedges, labels, title=\"Park\", loc=\"center left\", bbox_to_anchor=(1, 0, 0.5, 1))\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_19.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Creativity')\n\n# Define the colors for each category\ncolors = ['yellow', 'lightgrey', 'darkgrey', 'green']\n\n# Define the labels for each category\nlabels = ['Chanel', 'Dior', 'Gucci']\n\n# Define the data for each category\ndata = [1, 2, 3]\n\n# Create a pie chart\nwedges, texts, autotexts = ax.pie(data, colors=colors, labels=labels, autopct='%1.1f%%')\n\n# Add a legend\nax.legend(wedges, labels, title=\"Brands\", loc=\"center left\", bbox_to_anchor=(1, 0, 0.5, 1))\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 7.0))\n\n# Define the colors\ncolors = ['red', 'blue', 'green']\n\n# Create a circle patch\ncircle = plt.Circle((0.5, 0.5), 0.4, color='grey')\nax.add_artist(circle)\n\n# Create a rectangle patch\nrectangle = plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='blue')\nax.add_artist(rectangle)\n\n# Create a triangle patch\ntriangle = plt.Polygon([[0.3, 0.7], [0.7, 0.7], [0.5, 0.3]], color='green')\nax.add_artist(triangle)\n\n# Set the limits of the plot\nax.set_xlim(0, 1)\nax.set_ylim(0, 1)\n\n# Set the aspect ratio of the plot\nax.set_aspect('equal')\n\n# Set the title of the plot\nax.set_title('POPE')\n\n# Set the labels of the plot\nax.set_xlabel('TinyLaMA')\nax.set_ylabel('StableLM')\n\n# Set the colorbar\ncbar = fig.colorbar(ax.images[0])\ncbar.set_label('Phi-2')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_20.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(18.0, 6.0))\n\n# Define the data for the radar chart\ncategories = ['Versatility', 'Longevity']\nvalues = [5, 7]\ncolors = ['blue', 'green']\n\n# Create a radar chart\nax.plot(categories + categories[:1], values + values[:1], color=colors[0])\nax.fill(categories + categories[:1], values + values[:1], color=colors[0], alpha=0.2)\nax.set_title('Creativity')\n\n# Add labels to the axes\nfor i, category in enumerate(categories):\n    ax.text(i, 0, category, ha='center', va='center')\n\n# Add a legend\nax.legend(['Chanel', 'Dior', 'Gucci'], loc='upper right')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Set the background color of the plot\nax.set_facecolor('lightgray')\n\n# Draw a circle with a radius of 100\ncircle = plt.Circle((0.5, 0.5), 0.4, color='lightblue')\nax.add_artist(circle)\n\n# Draw a rectangle with a width of 200 and a height of 100\nrectangle = plt.Rectangle((0.3, 0.3), 0.4, 0.2, color='lightgreen')\nax.add_artist(rectangle)\n\n# Draw a polygon with 6 sides\npolygon = plt.Polygon([[0.2, 0.2], [0.3, 0.3], [0.4, 0.2], [0.3, 0.1], [0.2, 0.2]], color='lightcoral')\nax.add_artist(polygon)\n\n# Draw a star with 5 points\nstar = plt.Polygon([[0.4, 0.4], [0.5, 0.5], [0.6, 0.4], [0.5, 0.3], [0.4, 0.4]], color='lightsalmon')\nax.add_artist(star)\n\n# Draw a line from (0.2, 0.2) to (0.4, 0.4)\nline = plt.Line2D([0.2, 0.4], [0.2, 0.4], color='black')\nax.add_artist(line)\n\n# Draw a point at (0.3, 0.3)\npoint = plt.Circle((0.3, 0.3), 0.01, color='red')\nax.add_artist(point)\n\n# Set the aspect ratio of the plot to be equal\nax.set_aspect('equal')\n\n# Set the limits of the plot\nax.set_xlim(0, 1)\nax.set_ylim(0, 1)\n\n# Set the title of the plot\nax.set_title('Loadings PC1 vs Loadings PC2')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and a set of subplots\nfig, axs = plt.subplots(1, 3, figsize=(10.0, 6.0))\n\n# Define the data for each subplot\ndata1 = [1, 2, 3, 4, 5]\ndata2 = [1, 2, 3, 4, 5]\ndata3 = [1, 2, 3, 4, 5]\n\n# Plot the data in each subplot\naxs[0].plot(data1)\naxs[1].plot(data2)\naxs[2].plot(data3)\n\n# Set the title of each subplot\naxs[0].set_title('Fidelity(D-train)')\naxs[1].set_title('Fidelity(D-test)')\naxs[2].set_title('Fidelity(D-train)')\n\n# Set the x-axis label of each subplot\naxs[0].set_xlabel('Query Error')\naxs[1].set_xlabel('Query Error')\naxs[2].set_xlabel('Query Error')\n\n# Set the y-axis label of each subplot\naxs[0].set_ylabel('Privacy')\naxs[1].set_ylabel('Privacy')\naxs[2].set_ylabel('Privacy')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Set the title of the plot\nax.set_title('Heterocycle formation')\n\n# Create a circle\ncircle = plt.Circle((0.5, 0.5), 0.4, color='black')\nax.add_artist(circle)\n\n# Create a grid\nax.grid(True)\n\n# Create a rectangle\nrectangle = plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='blue')\nax.add_artist(rectangle)\n\n# Create a polygon\npolygon = plt.Polygon([[0.3, 0.3], [0.7, 0.3], [0.5, 0.7]], color='orange')\nax.add_artist(polygon)\n\n# Create a line\nline = plt.Line2D([0.1, 0.9], [0.1, 0.9], color='green')\nax.add_artist(line)\n\n# Create a scatter plot\nscatter = plt.scatter([0.1, 0.9], [0.1, 0.9], color='red')\nax.add_artist(scatter)\n\n# Create a bar chart\nbar = plt.bar([0.1, 0.9], [0.1, 0.9], color='purple')\nax.add_artist(bar)\n\n# Create a pie chart\npie = plt.pie([0.1, 0.9], colors=['cyan', 'magenta'])\nax.add_artist(pie)\n\n# Create a histogram\nhist = plt.hist([0.1, 0.9], bins=10, color='yellow')\nax.add_artist(hist)\n\n# Create a heatmap\nheatmap = plt.imshow([[0.1, 0.9], [0.1, 0.9]], cmap='hot', interpolation='nearest')\nax.add_artist(heatmap)\n\n# Create a contour plot\ncontour = plt.contourf([[0.1, 0.9], [0.1, 0.9]], cmap='coolwarm')\nax.add_artist(contour)\n\n# Create a polar plot\ntheta = np.linspace(0, 2*np.pi, 100)\nr = np.sin(theta)\npolar = plt.polar(theta, r, color='brown')\nax.add_artist(polar)\n\n# Create a 3D plot\nfrom mpl_toolkits.mplot3d import Axes3D\nax3d = fig.add_subplot(111, projection='3d')\nx = np.linspace(-1, 1, 100)\ny = np.linspace(-1, 1, 100)\nx, y = np.meshgrid(x, y)\nz = np.sin(np.sqrt(x**2 + y**2))\nax3d.plot_surface(x, y, z, cmap='viridis')\n\n# Set the limits of the plot\nax.set_xlim(0, 1)\nax.set_ylim(0, 1)\n\n# Set the labels of the plot\nax.set_xlabel('X-axis')\nax.set_ylabel('Y-axis')\n\n# Set the legend of the plot\nax.legend(['Rectangle', 'Polygon', 'Line', 'Scatter', 'Bar', 'Pie', 'Histogram', 'Heatmap', 'Contour', 'Polar', '3D'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Define the colors for the models\ncolors = ['green', 'orange', 'blue', 'red']\n\n# Define the scores for the models\nscores = [0.07, 0.03, 0.05, 0.07]\n\n# Draw the circle\ncircle = plt.Circle((0.5, 0.5), 0.4, color='grey', alpha=0.5)\nax.add_artist(circle)\n\n# Draw the models\nfor i, (color, score) in enumerate(zip(colors, scores)):\n    ax.plot([0.5, 0.5 + 0.2 * np.cos(2 * np.pi * i / len(colors))], \n            [0.5, 0.5 + 0.2 * np.sin(2 * np.pi * i / len(colors))], \n            color=color, linewidth=10)\n    ax.text(0.5 + 0.25 * np.cos(2 * np.pi * i / len(colors)), \n            0.5 + 0.25 * np.sin(2 * np.pi * i / len(colors)), \n            f'Model {chr(65+i)}', \n            ha='center', va='center')\n\n# Set the limits of the plot\nax.set_xlim(0, 1)\nax.set_ylim(0, 1)\n\n# Set the aspect ratio of the plot\nax.set_aspect('equal')\n\n# Set the title of the plot\nax.set_title('Model Scores')\n\n# Set the labels of the plot\nax.set_xlabel('Predicted Score')\nax.set_ylabel('Helpful Score')\n\n# Set the legend of the plot\nax.legend(['Result Score', 'Rating Score'])\n\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Set the title of the plot\nax.set_title('3D-bar')\n\n# Define the colors for the bars\ncolors = ['red', 'blue', 'orange', 'green', 'purple']\n\n# Define the labels for the bars\nlabels = ['rose', 'candlestick', 'line_num', 'radar', 'bubble', 'multi-axes', 'pie', 'funnel', 'area', 'fennel', 'box', 'treemap', 'heatmap', 'bar_num']\n\n# Define the values for the bars\nvalues = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]\n\n# Create a bar chart\nax.bar(labels, values, color=colors)\n\n# Set the x-axis label\nax.set_xlabel('3D-bar')\n\n# Set the y-axis label\nax.set_ylabel('line_num')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(5.0, 5.0))\n\n# Set the title of the plot\nax.set_title('Imputation')\n\n# Create a circle for the center of the plot\ncircle = plt.Circle((0.5, 0.5), 0.4, color='black')\nax.add_artist(circle)\n\n# Define the colors for the rectangles\ncolors = ['blue', 'green', 'red']\n\n# Create the rectangles\nfor i in range(3):\n    rect = plt.Rectangle((0.25 + i * 0.1, 0.25 + i * 0.1), 0.5, 0.5, color=colors[i])\n    ax.add_patch(rect)\n\n# Set the aspect ratio of the plot to be equal\nax.set_aspect('equal')\n\n# Set the limits of the plot\nax.set_xlim(0, 1)\nax.set_ylim(0, 1)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 7.0))\n\n# Set the background color of the plot\nax.set_facecolor('white')\n\n# Draw a circle with a radius of 10\ncircle = plt.Circle((0.5, 0.5), 0.4, color='black')\nax.add_artist(circle)\n\n# Define the data for the radar chart\ndata = [72.9, 66.3, 67.2, 42.9, 65.0, 49.3, 55.6, 43.1, 49.5, 55.6]\n\n# Define the colors for the radar chart\ncolors = ['red', 'blue']\n\n# Plot the radar chart\nax.plot(data, color=colors[0])\nax.fill(data, color=colors[1])\n\n# Set the title of the plot\nax.set_title('Radar Chart')\n\n# Set the x-axis and y-axis limits\nax.set_xlim(0, 1)\nax.set_ylim(0, 1)\n\n# Set the x-axis and y-axis ticks\nax.set_xticks([])\nax.set_yticks([])\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(12.0, 4.0))\n\n# Define the data\nx = np.arange(3)\ny = [1, 2, 3]\ncolors = ['blue', 'orange', 'green', 'red', 'purple', 'brown']\nmodels = ['llama-2-70-chat', 'llama-2-70', 'hfalcon-40b', 'text-bison@002', 'claude-2', 'claude-1', 'text-davinci-002', 'text-davinci-003', 'gpt-4']\n\n# Plot the data\nfor i, model in enumerate(models):\n    ax.plot(x, y, color=colors[i % len(colors)], label=model)\n\n# Set the title and labels\nax.set_title('Model-Basedness')\nax.set_xlabel('Value')\nax.set_ylabel('Model')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_10.pdf", "response": "import matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Set the title of the plot\nax.set_title('ImageNet-1K Linear Probing')\n\n# Set the x-axis label\nax.set_xlabel('Pre-training GPU Hours')\n\n# Set the y-axis label\nax.set_ylabel('Accuracy [%]')\n\n# Define the data points\nx = [0, 1000, 2000, 3000]\ny = [77, 79, 81, 83]\n\n# Plot the data points\nax.plot(x, y, 'o-')\n\n# Add labels to the data points\nfor i, txt in enumerate(['iBOT', 'MEAE', 'MoCo v3', 'D2V2']):\n    ax.annotate(txt, (x[i], y[i]))\n\n# Add a colored rectangle to represent the accuracy range\nax.add_patch(plt.Rectangle((0, 77), 1000, 2, color='green'))\n\n# Add a colored rectangle to represent the accuracy range\nax.add_patch(plt.Rectangle((1000, 79), 1000, 2, color='blue'))\n\n# Add a colored rectangle to represent the accuracy range\nax.add_patch(plt.Rectangle((2000, 81), 1000, 2, color='red'))\n\n# Add a colored rectangle to represent the accuracy range\nax.add_patch(plt.Rectangle((3000, 83), 1000, 2, color='orange'))\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/scatter_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the background color of the plot\nax.set_facecolor('lightgrey')\n\n# Set the tick labels for the x-axis\nax.set_xticks([10, 20, 30, 40, 50, 60])\nax.set_xticklabels(['10', '20', '30', '40', '50', '60'])\n\n# Set the tick labels for the y-axis\nax.set_yticks([0.5, 0.6, 0.7, 0.8, 0.9])\nax.set_yticklabels(['0.5', '0.6', '0.7', '0.8', '0.9'])\n\n# Set the title of the plot\nax.set_title('Bubble Size: Number of Anomalies Detected')\n\n# Set the label for the x-axis\nax.set_xlabel('Infernece Time (seconds)')\n\n# Set the label for the y-axis\nax.set_ylabel('Average Score')\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0.1, 0.1), 0.8, 0.8, facecolor='purple', alpha=0.5)\nax.add_patch(rect)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.5, 0.5), 0.1, facecolor='blue')\nax.add_artist(circle)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.5, 0.5), 0.1, facecolor='green')\nax.add_artist(circle)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.5, 0.5), 0.1, facecolor='yellow')\nax.add_artist(circle)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.5, 0.5), 0.1, facecolor='orange')\nax.add_artist(circle)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.5, 0.5), 0.1, facecolor='red')\nax.add_artist(circle)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.5, 0.5), 0.1, facecolor='pink')\nax.add_artist(circle)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.5, 0.5), 0.1, facecolor='brown')\nax.add_artist(circle)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.5, 0.5), 0.1, facecolor='cyan')\nax.add_artist(circle)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.5, 0.5), 0.1, facecolor='magenta')\nax.add_artist(circle)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.5, 0.5), 0.1, facecolor='lime')\nax.add_artist(circle)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.5, 0.5), 0.1, facecolor='silver')\nax.add_artist(circle)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.5, 0.5), 0.1, facecolor='gold')\nax.add_artist(circle)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.5, 0.5), 0.1, facecolor='navy')\nax.add_artist(circle)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.5, 0.5), 0.1, facecolor='olive')\nax.add_artist(circle)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.5, 0.5), 0.1, facecolor='teal')\nax.add_artist(circle)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.5, 0.5), 0.1, facecolor='indigo')\nax.add_artist(circle)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.5, 0.5), 0.1, facecolor='violet')\nax.add_artist(circle)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.5, 0.5), 0.1, facecolor='white')\nax.add_artist(circle)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.5, 0.5), 0.1, facecolor='black')\nax.add_artist(circle)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.5, 0.5), 0.1, facecolor='gray')\nax.add_artist(circle)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.5, 0.5), 0.1, facecolor='brown')\nax.add_artist(circle)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.5, 0.5), 0.1, facecolor='maroon')\nax.add_artist(circle)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.5, 0.5), 0.1, facecolor='aqua')\nax.add_artist(circle)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.5, 0.5), 0.1, facecolor='fuchsia')\nax.add_artist(circle)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.5, 0.5), 0.1, facecolor='silver')\nax.add_artist(circle)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.5, 0.5), 0.1, facecolor='gold')\nax.add_artist(circle)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.5, 0.5), 0.1, facecolor='navy')\nax.add_artist(circle)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.5, 0.5), 0.1, facecolor='olive')\nax.add_artist(circle)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.5, 0.5), 0.1, facecolor='teal')\nax.add_artist(circle)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.5, 0.5), 0.1, facecolor='indigo')\nax.add_artist(circle)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.5, 0.5), 0.1, facecolor='violet')\nax.add_artist(circle)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.5, 0.5), 0.1, facecolor='white')\nax.add_artist(circle)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.5, 0.5), 0.1, facecolor='black')\nax.add_artist(circle)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.5, 0.5), 0.1, facecolor='gray')\nax.add_artist(circle)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.5, 0.5), 0.1, facecolor='brown')\nax.add_artist(circle)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.5, 0.5), 0.1, facecolor='maroon')\nax.add_artist(circle)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.5, 0.5), 0.1, facecolor='aqua')\nax.add_artist(circle)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.5, 0.5), 0.1, facecolor='fuchsia')\nax.add_artist(circle)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.5, 0.5), 0.1, facecolor='silver')\nax.add_artist(circle)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.5, 0.5), 0.1, facecolor='gold')\nax.add_artist(circle)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.5, 0.5), 0.1, facecolor='navy')\nax.add_artist(circle)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.5, 0.5), 0.1, facecolor='olive')\nax.add_artist(circle)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.5, 0.5), 0.1, facecolor='teal')\nax.add_artist(circle)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.5, 0.5), 0.1, facecolor='indigo')\nax.add_artist(circle)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.5, 0.5), 0.1, facecolor='violet')\nax.add_artist(circle)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.5, 0.5), 0.1, facecolor='white')\nax.add_artist(circle)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.5, 0.5), 0.1, facecolor='black')\nax.add_artist(circle)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.5, 0.5), 0.1, facecolor='gray')\nax.add_artist(circle)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.5, 0.5), 0.1, facecolor='brown')\nax.add_artist(circle)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.5, 0.5), 0.1, facecolor='maroon')\nax.add_artist(circle)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.5, 0.5), 0.1, facecolor='aqua')\nax.add_artist(circle)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.5, 0.5), 0.1, facecolor='fuchsia')\nax.add_artist(circle)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.5, 0.5), 0.1, facecolor='silver')\nax.add_artist(circle)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.5, 0.5), 0.1, facecolor='gold')\nax.add_artist(circle)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.5, 0.5), 0.1, facecolor='navy')\nax.add_artist(circle)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.5, 0.5), 0.1, facecolor='olive')\nax.add_artist(circle)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.5, 0.5), 0.1, facecolor='teal')\nax.add_artist(circle)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.5, 0.5), 0.1, facecolor='indigo')\nax.add_artist(circle)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.5, 0.5), 0.1, facecolor='violet')\nax.add_artist(circle)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.5, 0.5), 0.1, facecolor='white')\nax.add_artist(circle)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.5, 0.5), 0.1, facecolor='black')\nax.add_artist(circle)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.5, 0.5), 0.1, facecolor='gray')\nax.add_artist(circle)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.5, 0.5), 0.1, facecolor='brown')\nax.add_artist(circle)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.5, 0.5), 0.1, facecolor='maroon')\nax.add_artist(circle)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.5, 0.5), 0.1, facecolor='aqua')\nax.add_artist(circle)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.5, 0.5), 0.1, facecolor='fuchsia')\nax.add_artist(circle)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.5, 0.5), 0.1, facecolor='silver')\nax.add_artist(circle)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.5, 0.5), 0.1, facecolor='gold')\nax.add_artist(circle)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.5, 0.5), 0.1, facecolor='navy')\nax.add_artist(circle)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.5, 0.5), 0.1, facecolor='olive')\nax.add_artist(circle)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.5, 0.5), 0.1, facecolor='teal')\nax.add_artist(circle)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.5, 0.5), 0.1, facecolor='indigo')\nax.add_artist(circle)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.5, 0.5), 0.1, facecolor='violet')\nax.add_artist(circle)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.5, 0.5), 0.1, facecolor='white')\nax.add_artist(circle)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.5, 0.5), 0.1, facecolor='black')\nax.add_artist(circle)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.5, 0.5), 0.1, facecolor='gray')\nax.add_artist(circle)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.5, 0.5), 0.1, facecolor='brown')\nax.add_artist(circle)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.5, 0.5), 0.1, facecolor='maroon')\nax.add_artist(circle)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.5, 0.5), 0.1, facecolor='aqua')\nax.add_artist(circle)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.5, 0.5), 0.1, facecolor='fuchsia')\nax.add_artist(circle)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.5, 0.5), 0.1, facecolor='silver')\nax.add_artist(circle)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.5, 0.5), 0.1, facecolor='gold')\nax.add_artist(circle)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.5, 0.5), 0.1, facecolor='navy')\nax.add_artist(circle)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.5, 0.5), 0.1, facecolor='olive')\nax.add_artist(circle)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.5, 0.5), 0.1, facecolor='teal')\nax.add_artist(circle)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.5, 0.5), 0.1, facecolor='indigo')\nax.add_artist(circle)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.5, 0.5), 0.1, facecolor='violet')\nax.add_artist(circle)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.5, 0.5), 0.1, facecolor='white')\nax.add_artist(circle)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.5, 0.5), 0.1, facecolor='black')\nax.add_artist(circle)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.5, 0.5), 0.1, facecolor='gray')\nax.add_artist(circle)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.5, 0.5), 0.1, facecolor='brown')\nax.add_artist(circle)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.5, 0.5), 0.1, facecolor='maroon')\nax.add_artist(circle)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.5, 0.5), 0.1, facecolor='aqua')\nax.add_artist(circle)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.5, 0.5), 0.1, facecolor='fuchsia')\nax.add_artist(circle)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.5, 0.5), 0.1, facecolor='silver')\nax.add_artist(circle)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.5, 0.5), 0.1, facecolor='gold')\nax.add_artist(circle)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.5, 0.5), 0.1, facecolor='navy')\nax.add_artist(circle)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.5, 0.5), 0.1, facecolor='olive')\nax.add_artist(circle)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.5, 0.5), 0.1, facecolor='teal')\nax.add_artist(circle)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.5, 0.5), 0.1, facecolor='indigo')\nax.add_artist(circle)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.5, 0.5), 0.1, facecolor='violet')\nax.add_artist(circle)\n\n# Add a circle to the plot\ncircle = plt"}
{"file": "dataset/ori_500/scatter_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Number of parameters')\n\n# Create a scatter plot with circles\ncircle1 = plt.Circle((203, 50), 10, color='gray')\ncircle2 = plt.Circle((424, 50), 10, color='gray')\ncircle3 = plt.Circle((1, 50), 10, color='gray')\ncircle4 = plt.Circle((4, 50), 10, color='gray')\ncircle5 = plt.Circle((46, 50), 10, color='gray')\nax.add_artist(circle1)\nax.add_artist(circle2)\nax.add_artist(circle3)\nax.add_artist(circle4)\nax.add_artist(circle5)\n\n# Set the x-axis and y-axis limits\nax.set_xlim(0, 50)\nax.set_ylim(0, 70)\n\n# Set the x-axis and y-axis labels\nax.set_xlabel('EgoSchema VQA accuracy')\nax.set_ylabel('Perception Test VQA accuracy')\n\n# Set the tick marks\nax.set_xticks([0, 10, 20, 30, 40, 50])\nax.set_yticks([0, 10, 20, 30, 40, 50, 60])\n\n# Set the tick labels\nax.set_xticklabels(['0', '10', '20', '30', '40', '50'])\nax.set_yticklabels(['0', '10', '20', '30', '40', '50', '60'])\n\n# Set the grid\nax.grid(True)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Average Relative Error, u')\n\n# Set the x-axis label\nax.set_xlabel('Test Case Index, u')\n\n# Set the y-axis label\nax.set_ylabel('Average Relative Error, u')\n\n# Define the test case index values\ntest_case_index = [1.0, 2.0, 3.0, 4.0, 5.0]\n\n# Define the average relative error values\naverage_relative_error = [0.01, 0.02, 0.03, 0.04, 0.05]\n\n# Plot the data\nax.plot(test_case_index, average_relative_error, 'ro-')\n\n# Add markers for each data point\nfor i, txt in enumerate(average_relative_error):\n    ax.annotate(txt, (test_case_index[i], average_relative_error[i]))\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nclasses = ['spotlight', 'sliding', 'wool', 'weasel', 'space', 'partridge', 'mushroom', 'bighorn']\naccuracies = [1.2, 1.1, 1.0, 0.9, 0.8, 0.7, 0.6, 0.5]\nmajority_minority = ['majority', 'minority'] * 4\n\n# Plot\nfig, ax = plt.subplots(figsize=(6.0, 3.0))\nax.plot(classes, accuracies, 'bo-')\nax.set_title('Accuracies for the ImageNet Classes (ClarifAI)')\nax.set_xlabel('Classes')\nax.set_ylabel('Accuracies')\n\n# Legend\nlegend_elements = [plt.Line2D([0], [0], marker='o', color='w', label=m, markerfacecolor=c, markersize=10)\n                  for m, c in zip(majority_minority, ['blue', 'red'])]\nax.legend(handles=legend_elements)\n\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the first plot\nx1 = [50, 30, 20, 10, 0]\ny1 = [68, 66, 64, 62, 60]\ncolors1 = ['red', 'red', 'purple', 'purple', 'pink']\nlabels1 = ['MAD+judge', 'ToT', 'CoT(maj@5)', 'CoT(maj@1)', 'DefInt']\n\n# Data for the second plot\nx2 = [50, 30, 20, 10, 0]\ny2 = [68, 66, 64, 62, 60]\ncolors2 = ['orange', 'orange', 'blue', 'blue', 'pink']\nlabels2 = ['MAD+judge', 'ToT', 'CoT(maj@5)', 'CoT(maj@1)', 'DefInt']\n\n# Create the figure and axes\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10.0, 4.0))\n\n# Plot the first graph\nfor i in range(len(x1)):\n    ax1.plot([x1[i], x1[i]], [y1[i], y1[i]], color=colors1[i])\n    ax1.text(x1[i], y1[i], labels1[i], color=colors1[i])\n\n# Plot the second graph\nfor i in range(len(x2)):\n    ax2.plot([x2[i], x2[i]], [y2[i], y2[i]], color=colors2[i])\n    ax2.text(x2[i], y2[i], labels2[i], color=colors2[i])\n\n# Set the titles\nax1.set_title('Logic Grid Puzzle(Accuracy versus token cost)')\nax2.set_title('Logic Grid Puzzle(Accuracy versus TFLOPS)')\n\n# Set the x-axis labels\nax1.set_xlabel('Token cost($)')\nax2.set_xlabel('TFLOPS')\n\n# Set the y-axis labels\nax1.set_ylabel('Accuracy(%)')\nax2.set_ylabel('Accuracy(%)')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_16.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 4.0))\n\n# Set the title of the plot\nax.set_title('Energy Source')\n\n# Set the labels for the x and y axes\nax.set_xlabel('Efficiency (%)')\nax.set_ylabel('Carbon Reduction (%)')\n\n# Define the data points\nx = [15, 20, 25, 30, 35, 40, 45, 50]\ny = [10, 20, 30, 40, 50, 60, 70, 80]\n\n# Plot the data points\nax.plot(x, y, 'ro-')\n\n# Add a legend\nax.legend(['Solar', 'Wind', 'Hydro', 'Geothermal', 'Biomass', 'Nuclear', 'Tidal', 'Wave'])\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_17.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(9.0, 6.0))\n\n# Set the background color of the plot\nax.set_facecolor('lightgrey')\n\n# Set the grid lines\nax.grid(True)\n\n# Set the x-axis and y-axis limits\nax.set_xlim(-30, 10)\nax.set_ylim(-10, 30)\n\n# Set the x-axis and y-axis labels\nax.set_xlabel('\u0394 Robust Accuracy (%)')\nax.set_ylabel('\u0394 RNFR (%)')\n\n# Set the title of the plot\nax.set_title('Scatter Plot of \u0394 Robust Accuracy vs \u0394 RNFR')\n\n# Draw the scatter plot\nscatter = ax.scatter([0, 5, 10], [15, 20, 25], c=['blue', 'green', 'red'], s=100)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_18.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Sales Data')\n\n# Set the x-axis label\nax.set_xlabel('Time')\n\n# Set the y-axis label\nax.set_ylabel('Sales')\n\n# Set the grid\nax.grid(True)\n\n# Define the data points\nx = [2, 4, 6, 8, 10, 12, 14, 16]\ny_day1 = [95, 90, 85, 80, 75, 70, 65, 60]\ny_day2 = [105, 100, 95, 90, 85, 80, 75, 70]\n\n# Plot the data points\nax.plot(x, y_day1, 'bo', label='Day 1')\nax.plot(x, y_day2, 'ro', label='Day 2')\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_19.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Set the background color of the plot\nax.set_facecolor('white')\n\n# Set the x-axis and y-axis limits\nax.set_xlim(2, 16)\nax.set_ylim(80, 110)\n\n# Draw grid lines\nax.grid(True)\n\n# Define the data points\nx = [2, 4, 6, 8, 10, 12, 14, 16]\ny = [95, 90, 85, 80, 75, 70, 65, 60]\n\n# Plot the data points\nax.plot(x, y, 'ro-')\n\n# Set the title and labels\nax.set_title('Sample Plot')\nax.set_xlabel('X-axis')\nax.set_ylabel('Y-axis')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nx = [175, 200, 225, 250, 275, 300]\ny = [140, 160, 180, 200, 220, 240]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(4.0, 8.0))\n\n# Plot the data\nax.plot(x, y, 'r-')\n\n# Set the title and labels\nax.set_title('Energy Production Trends')\nax.set_xlabel('Installed Capacity (GW)')\nax.set_ylabel('Energy Output (TWh)')\n\n# Add colored dots at each point\nfor xi, yi in zip(x, y):\n    ax.plot(xi, yi, 'ro')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_20.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the background color of the plot\nax.set_facecolor('white')\n\n# Set the title of the plot\nax.set_title('Scatter plot with colorbar')\n\n# Set the x-axis label\nax.set_xlabel('X-axis')\n\n# Set the y-axis label\nax.set_ylabel('Y-axis')\n\n# Set the x-axis limits\nax.set_xlim(10, 90)\n\n# Set the y-axis limits\nax.set_ylim(0, 100)\n\n# Set the x-axis ticks\nax.set_xticks([10, 20, 30, 40, 50, 60, 70, 80, 90])\n\n# Set the y-axis ticks\nax.set_yticks([0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100])\n\n# Set the colorbar\ncbar = fig.colorbar(ax.images[0], ax=ax)\ncbar.set_label('Colorbar')\n\n# Set the scatter plot\nscatter = ax.scatter([10, 20, 30, 40, 50, 60, 70, 80, 90], [10, 20, 30, 40, 50, 60, 70, 80, 90], c=[10, 20, 30, 40, 50, 60, 70, 80, 90], cmap='viridis')\n\n# Set the color of the scatter plot points\nscatter.set_facecolor('blue')\n\n# Set the color of the scatter plot points\nscatter.set_edgecolor('black')\n\n# Set the color of the scatter plot points\nscatter.set_linewidth(1)\n\n# Set the color of the scatter plot points\nscatter.set_alpha(0.5)\n\n# Set the color of the scatter plot points\nscatter.set_sizes([100, 200, 300, 400, 500, 600, 700, 800, 900])\n\n# Set the color of the scatter plot points\nscatter.set_marker('o')\n\n# Set the color of the scatter plot points\nscatter.set_color('red')\n\n# Set the color of the scatter plot points\nscatter.set_cmap('plasma')\n\n# Set the color of the scatter plot points\nscatter.set_clim(0, 100)\n\n# Set the color of the scatter plot points\nscatter.set_cmap('coolwarm')\n\n# Set the color of the scatter plot points\nscatter.set_clim(0, 100)\n\n# Set the color of the scatter plot points\nscatter.set_cmap('spring')\n\n# Set the color of the scatter plot points\nscatter.set_clim(0, 100)\n\n# Set the color of the scatter plot points\nscatter.set_cmap('summer')\n\n# Set the color of the scatter plot points\nscatter.set_clim(0, 100)\n\n# Set the color of the scatter plot points\nscatter.set_cmap('autumn')\n\n# Set the color of the scatter plot points\nscatter.set_clim(0, 100)\n\n# Set the color of the scatter plot points\nscatter.set_cmap('winter')\n\n# Set the color of the scatter plot points\nscatter.set_clim(0, 100)\n\n# Set the color of the scatter plot points\nscatter.set_cmap('bone')\n\n# Set the color of the scatter plot points\nscatter.set_clim(0, 100)\n\n# Set the color of the scatter plot points\nscatter.set_cmap('copper')\n\n# Set the color of the scatter plot points\nscatter.set_clim(0, 100)\n\n# Set the color of the scatter plot points\nscatter.set_cmap('pink')\n\n# Set the color of the scatter plot points\nscatter.set_clim(0, 100)\n\n# Set the color of the scatter plot points\nscatter.set_cmap('orange')\n\n# Set the color of the scatter plot points\nscatter.set_clim(0, 100)\n\n# Set the color of the scatter plot points\nscatter.set_cmap('brown')\n\n# Set the color of the scatter plot points\nscatter.set_clim(0, 100)\n\n# Set the color of the scatter plot points\nscatter.set_cmap('grey')\n\n# Set the color of the scatter plot points\nscatter.set_clim(0, 100)\n\n# Set the color of the scatter plot points\nscatter.set_cmap('black')\n\n# Set the color of the scatter plot points\nscatter.set_clim(0, 100)\n\n# Set the color of the scatter plot points\nscatter.set_cmap('white')\n\n# Set the color of the scatter plot points\nscatter.set_clim(0, 100)\n\n# Set the color of the scatter plot points\nscatter.set_cmap('yellow')\n\n# Set the color of the scatter plot points\nscatter.set_clim(0, 100)\n\n# Set the color of the scatter plot points\nscatter.set_cmap('cyan')\n\n# Set the color of the scatter plot points\nscatter.set_clim(0, 100)\n\n# Set the color of the scatter plot points\nscatter.set_cmap('magenta')\n\n# Set the color of the scatter plot points\nscatter.set_clim(0, 100)\n\n# Set the color of the scatter plot points\nscatter.set_cmap('lime')\n\n# Set the color of the scatter plot points\nscatter.set_clim(0, 100)\n\n# Set the color of the scatter plot points\nscatter.set_cmap('teal')\n\n# Set the color of the scatter plot points\nscatter.set_clim(0, 100)\n\n# Set the color of the scatter plot points\nscatter.set_cmap('navy')\n\n# Set the color of the scatter plot points\nscatter.set_clim(0, 100)\n\n# Set the color of the scatter plot points\nscatter.set_cmap('silver')\n\n# Set the color of the scatter plot points\nscatter.set_clim(0, 100)\n\n# Set the color of the scatter plot points\nscatter.set_cmap('gold')\n\n# Set the color of the scatter plot points\nscatter.set_clim(0, 100)\n\n# Set the color of the scatter plot points\nscatter.set_cmap('maroon')\n\n# Set the color of the scatter plot points\nscatter.set_clim(0, 100)\n\n# Set the color of the scatter plot points\nscatter.set_cmap('olive')\n\n# Set the color of the scatter plot points\nscatter.set_clim(0, 100)\n\n# Set the color of the scatter plot points\nscatter.set_cmap('aqua')\n\n# Set the color of the scatter plot points\nscatter.set_clim(0, 100)\n\n# Set the color of the scatter plot points\nscatter.set_cmap('fuchsia')\n\n# Set the color of the scatter plot points\nscatter.set_clim(0, 100)\n\n# Set the color of the scatter plot points\nscatter.set_cmap('indigo')\n\n# Set the color of the scatter plot points\nscatter.set_clim(0, 100)\n\n# Set the color of the scatter plot points\nscatter.set_cmap('violet')\n\n# Set the color of the scatter plot points\nscatter.set_clim(0, 100)\n\n# Set the color of the scatter plot points\nscatter.set_cmap('chartreuse')\n\n# Set the color of the scatter plot points\nscatter.set_clim(0, 100)\n\n# Set the color of the scatter plot points\nscatter.set_cmap('saddlebrown')\n\n# Set the color of the scatter plot points\nscatter.set_clim(0, 100)\n\n# Set the color of the scatter plot points\nscatter.set_cmap('tan')\n\n# Set the color of the scatter plot points\nscatter.set_clim(0, 100)\n\n# Set the color of the scatter plot points\nscatter.set_cmap('peru')\n\n# Set the color of the scatter plot points\nscatter.set_clim(0, 100)\n\n# Set the color of the scatter plot points\nscatter.set_cmap('chocolate')\n\n# Set the color of the scatter plot points\nscatter.set_clim(0, 100)\n\n# Set the color of the scatter plot points\nscatter.set_cmap('sienna')\n\n# Set the color of the scatter plot points\nscatter.set_clim(0, 100)\n\n# Set the color of the scatter plot points\nscatter.set_cmap('burlywood')\n\n# Set the color of the scatter plot points\nscatter.set_clim(0, 100)\n\n# Set the color of the scatter plot points\nscatter.set_cmap('wheat')\n\n# Set the color of the scatter plot points\nscatter.set_clim(0, 100)\n\n# Set the color of the scatter plot points\nscatter.set_cmap('beige')\n\n# Set the color of the scatter plot points\nscatter.set_clim(0, 100)\n\n# Set the color of the scatter plot points\nscatter.set_cmap('lightyellow')\n\n# Set the color of the scatter plot points\nscatter.set_clim(0, 100)\n\n# Set the color of the scatter plot points\nscatter.set_cmap('lightgreen')\n\n# Set the color of the scatter plot points\nscatter.set_clim(0, 100)\n\n# Set the color of the scatter plot points\nscatter.set_cmap('lightskyblue')\n\n# Set the color of the scatter plot points\nscatter.set_clim(0, 100)\n\n# Set the color of the scatter plot points\nscatter.set_cmap('lavender')\n\n# Set the color of the scatter plot points\nscatter.set_clim(0, 100)\n\n# Set the color of the scatter plot points\nscatter.set_cmap('palegreen')\n\n# Set the color of the scatter plot points\nscatter.set_clim(0, 100)\n\n# Set the color of the scatter plot points\nscatter.set_cmap('palegoldenrod')\n\n# Set the color of the scatter plot points\nscatter.set_clim(0, 100)\n\n# Set the color of the scatter plot points\nscatter.set_cmap('palevioletred')\n\n# Set the color of the scatter plot points\nscatter.set_clim(0, 100)\n\n# Set the color of the scatter plot points\nscatter.set_cmap('papayawhip')\n\n# Set the color of the scatter plot points\nscatter.set_clim(0, 100)\n\n# Set the color of the scatter plot points\nscatter.set_cmap('blanchedalmond')\n\n# Set the color of the scatter plot points\nscatter.set_clim(0, 100)\n\n# Set the color of the scatter plot points\nscatter.set_cmap('bisque')\n\n# Set the color of the scatter plot points\nscatter.set_clim(0, 100)\n\n# Set the color of the scatter plot points\nscatter.set_cmap('cornsilk')\n\n# Set the color of the scatter plot points\nscatter.set_clim(0, 100)\n\n# Set the color of the scatter plot points\nscatter.set_cmap('linen')\n\n# Set the color of the scatter plot points\nscatter.set_clim(0, 100)\n\n# Set the color of the scatter plot points\nscatter.set_cmap('antiquewhite')\n\n# Set the color of the scatter plot points\nscatter.set_clim(0, 100)\n\n# Set the color of the scatter plot points\nscatter.set_cmap('floralwhite')\n\n# Set the color of the scatter plot points\nscatter.set_clim(0, 100)\n\n# Set the color of the scatter plot points\nscatter.set_cmap('oldlace')\n\n# Set the color of the scatter plot points\nscatter.set_clim(0, 100)\n\n# Set the color of the scatter plot points\nscatter.set_cmap('seashell')\n\n# Set the color of the scatter plot points\nscatter.set_clim(0, 100)\n\n# Set the color of the scatter plot points\nscatter.set_cmap('ivory')\n\n# Set the color of the scatter plot points\nscatter.set_clim(0, 100)\n\n# Set the color of the scatter plot points\nscatter.set_cmap('honeydew')\n\n# Set the color of the scatter plot points\nscatter.set_clim(0, 100)\n\n# Set the color of the scatter plot points\nscatter.set_cmap('mintcream')\n\n# Set the color of the scatter plot points\nscatter.set_clim(0, 100)\n\n# Set the color of the scatter plot points\nscatter.set_cmap('azure')\n\n# Set the color of the scatter plot points\nscatter.set_clim(0, 100)\n\n# Set the color of the scatter plot points\nscatter.set_cmap('snow')\n\n# Set the color of the scatter plot points\nscatter.set_clim(0, 100)\n\n# Set the color of the scatter plot points\nscatter.set_cmap('ghostwhite')\n\n# Set the color of the scatter plot points\nscatter.set_clim(0, 100)\n\n# Set the color of the scatter plot points\nscatter.set_cmap('whitesmoke')\n\n# Set the color of the scatter plot points\nscatter.set_clim(0, 100)\n\n# Set the color of the scatter plot points\nscatter.set_cmap('gainsboro')\n\n# Set the color of the scatter plot points\nscatter.set_clim(0, 100)\n\n# Set the color of the scatter plot points\nscatter.set_cmap('floralwhite')\n\n# Set the color of the scatter plot points\nscatter.set_clim(0, 100)\n\n# Set the color of the scatter plot points\nscatter.set_cmap('aliceblue')\n\n# Set the color of the scatter plot points\nscatter.set_clim(0, 100)\n\n# Set the color of the scatter plot points\nscatter.set_cmap('lavenderblush')\n\n# Set the color of the scatter plot points\nscatter.set_clim(0, 100)\n\n# Set the color of the scatter plot points\nscatter.set_cmap('mistyrose')\n\n# Set the color of the scatter plot points\nscatter.set_clim(0, 100)\n\n# Set the color of the scatter plot points\nscatter.set_cmap('seashell')\n\n# Set the color of the scatter plot points\nscatter.set_clim(0, 100)\n\n# Set the color of the scatter plot points\nscatter.set_cmap('cornsilk')\n\n# Set the color of the scatter plot points\nscatter.set_clim(0, 100)\n\n# Set the color of the scatter plot points\nscatter.set_cmap('blanchedalmond')\n\n# Set the color of the scatter plot points\nscatter.set_clim(0, 100)\n\n# Set the color of the scatter plot points\nscatter.set_cmap('bisque')\n\n# Set the color of the scatter plot points\nscatter.set_clim(0, 100)\n\n# Set the color of the scatter plot points\nscatter.set_cmap('navajowhite')\n\n# Set the color of the scatter plot points\nscatter.set_clim(0, 100)\n\n# Set the color of the scatter plot points\nscatter.set_cmap('lemonchiffon')\n\n# Set the color of the scatter plot points\nscatter.set_clim(0, 100)\n\n# Set the color of the scatter plot points\nscatter.set_cmap('lightgoldenrodyellow')\n\n# Set the color of the scatter plot points\nscatter.set_clim(0, 100)\n\n# Set the color of the scatter plot points\nscatter.set_cmap('palegoldenrod')\n\n# Set the color of the scatter plot points\nscatter.set_clim(0, 100)\n\n# Set the color of the scatter plot points\nscatter.set_cmap('khaki')\n\n# Set the color of the scatter plot points\nscatter.set_clim(0, 100)\n\n# Set the color of the scatter plot points\nscatter.set_cmap('darkkhaki')\n\n# Set the color of the scatter plot points\nscatter.set_clim(0, 100)\n\n# Set the color of the scatter plot points\nscatter.set_cmap('palegreen')\n\n# Set the color of the scatter plot points\nscatter.set_clim(0, 100)\n\n# Set the color of the scatter plot points\nscatter.set_cmap('lightgreen')\n\n# Set the color of the scatter plot points\nscatter.set_clim(0, 100)\n\n# Set the color of the scatter plot points\nscatter.set_cmap('lightyellow')\n\n# Set the color of the scatter plot points\nscatter.set_clim(0, 100)\n\n# Set the color of the scatter plot points\nscatter.set_cmap('lightcoral')\n\n# Set the color of the scatter plot points\nscatter.set_clim(0, 100)\n\n# Set the color of the scatter plot points\nscatter.set_cmap('salmon')\n\n# Set the color of the scatter plot points\nscatter.set_clim(0, 100)\n\n# Set the color of the scatter plot points\nscatter.set_cmap('tomato')\n\n# Set the color of the scatter plot points\nscatter.set_clim(0, 100)\n\n# Set the color of the scatter plot points\nscatter.set_cmap('orangered')\n\n# Set the color of the scatter plot points\nscatter.set_clim(0, 100)\n\n# Set the color of the scatter plot points\nscatter.set_cmap('darkorange')\n\n# Set the color of the scatter plot points\nscatter.set_clim(0, 100)\n\n# Set the color of the scatter plot points\nscatter.set_cmap('gold')\n\n# Set the color of the scatter plot points\nscatter.set_clim(0, 100)\n\n# Set the color of the scatter plot points\nscatter.set_cmap('yellow')\n\n# Set the color of the scatter plot points\nscatter.set_clim(0, 100)\n\n# Set the color of the scatter plot points\nscatter.set_cmap('olive')\n\n# Set the color of the scatter plot points\nscatter.set_clim(0, 100)\n\n# Set the color of the scatter plot points\nscatter.set_cmap('chartreuse')\n\n# Set the color of the scatter plot points\nscatter.set_clim(0, 100)\n\n# Set the color of the scatter plot points\nscatter.set_cmap('lawngreen')\n\n# Set the color of the scatter plot points\nscatter.set_clim(0, 100)\n\n# Set the color"}
{"file": "dataset/ori_500/scatter_21.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for LibriCSS vs Additional Data 1\nx1 = [2, 3, 4, 5, 6, 7, 8]\ny1 = [0.9, 0.8, 0.8, 0.7, 0.7, 0.6, 0.6]\n\n# Data for AMI vs Additional Data 2\nx2 = [2, 3, 4, 5, 6, 7, 8]\ny2 = [0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9]\n\nfig, ax = plt.subplots(1, 2, figsize=(10, 5))\n\n# Plot for LibriCSS vs Additional Data 1\nax[0].plot(x1, y1, 'o-')\nax[0].set_title('LibriCSS vs Additional Data 1')\nax[0].set_xlabel('Number of Microphones')\nax[0].set_ylabel('WER (%)')\n\n# Plot for AMI vs Additional Data 2\nax[1].plot(x2, y2, 'o-')\nax[1].set_title('AMI vs Additional Data 2')\nax[1].set_xlabel('Number of Microphones')\nax[1].set_ylabel('WER (%)')\n\n# Adding colored rectangles for data points\nfor i in range(len(x1)):\n    ax[0].add_patch(plt.Rectangle((x1[i], 0), 0.1, 0.1, color='blue'))\n    ax[0].add_patch(plt.Rectangle((x2[i], 0), 0.1, 0.1, color='red'))\n\n# Adding colored triangles for data points\nfor i in range(len(x1)):\n    ax[1].add_patch(plt.Polygon([[x1[i], 0], [x1[i] - 0.1, 0.1], [x1[i] + 0.1, 0.1]], color='purple'))\n    ax[1].add_patch(plt.Polygon([[x2[i], 0], [x2[i] - 0.1, 0.1], [x2[i] + 0.1, 0.1]], color='orange'))\n\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_22.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(12.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Performance Comparison')\n\n# Set the x-axis label\nax.set_xlabel('Value')\n\n# Set the y-axis label\nax.set_ylabel('Models')\n\n# Define the data points\ndata = {\n    'llama-2-70-chat': [0.5, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2.0],\n    'llama-2-70': [0.5, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2.0],\n    'hfalcon-40b': [0.5, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2.0],\n    'text-bison@002': [0.5, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2.0],\n    'claude-2': [0.5, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2.0],\n    'claude-1': [0.5, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2.0],\n    'text-davinci-002': [0.5, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2.0],\n    'text-davinci-003': [0.5, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2.0],\n    'gpt-4': [0.5, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2.0]\n}\n\n# Plot the data\nfor model, values in data.items():\n    ax.plot(values, [model] * len(values), 'o-', label=model)\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_23.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Set the title of the plot\nax.set_title('Model-Basedness')\n\n# Set the x-axis label\nax.set_xlabel('Models')\n\n# Set the y-axis label\nax.set_ylabel('Score')\n\n# Set the tick labels for the x-axis\nax.set_xticks([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\nax.set_xticklabels(['Mixtal-8x7B', 'MPT-7B', 'Llama2-70B', 'Falcon-40B', 'Davinci-003', 'Davinci-002', 'Claude-2', 'Claude-1'])\n\n# Set the tick labels for the y-axis\nax.set_yticks([0, 50, 100, 150, 200])\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='blue')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='blue')\n\n# Set the color of the x-axis spines\nax.spines['left'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis spines\nax.spines['left'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the x-axis ticks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis ticks\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='blue')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='blue')\n\n# Set the color of the x-axis spines\nax.spines['left'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis spines\nax.spines['left'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the x-axis ticks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis ticks\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='blue')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='blue')\n\n# Set the color of the x-axis spines\nax.spines['left'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis spines\nax.spines['left'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the x-axis ticks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis ticks\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='blue')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='blue')\n\n# Set the color of the x-axis spines\nax.spines['left'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis spines\nax.spines['left'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the x-axis ticks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis ticks\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='blue')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='blue')\n\n# Set the color of the x-axis spines\nax.spines['left'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis spines\nax.spines['left'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the x-axis ticks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis ticks\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='blue')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='blue')\n\n# Set the color of the x-axis spines\nax.spines['left'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis spines\nax.spines['left'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the x-axis ticks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis ticks\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='blue')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='blue')\n\n# Set the color of the x-axis spines\nax.spines['left'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis spines\nax.spines['left'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the x-axis ticks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis ticks\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='blue')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='blue')\n\n# Set the color of the x-axis spines\nax.spines['left'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis spines\nax.spines['left'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the x-axis ticks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis ticks\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='blue')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='blue')\n\n# Set the color of the x-axis spines\nax.spines['left'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis spines\nax.spines['left'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the x-axis ticks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis ticks\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='blue')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='blue')\n\n# Set the color of the x-axis spines\nax.spines['left'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis spines\nax.spines['left'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the x-axis ticks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis ticks\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='blue')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='blue')\n\n# Set the color of the x-axis spines\nax.spines['left'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis spines\nax.spines['left'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the x-axis ticks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis ticks\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='blue')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='blue')\n\n# Set the color of the x-axis spines\nax.spines['left'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis spines\nax.spines['left'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the x-axis ticks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis ticks\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='blue')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='blue')\n\n# Set the color of the x-axis spines\nax.spines['left'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis spines\nax.spines['left'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the x-axis ticks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis ticks\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='blue')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='blue')\n\n# Set the color of the x-axis spines\nax.spines['left'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis spines\nax.spines['left'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the x-axis ticks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis ticks\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='blue')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='blue')\n\n# Set the color of the x-axis spines\nax.spines['left'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis spines\nax.spines['left'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the x-axis ticks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis ticks\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='blue')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='blue')\n\n# Set the color of the x-axis spines\nax.spines['left'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis spines\nax.spines['left'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the x-axis ticks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis ticks\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='blue')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='blue')\n\n# Set the color of the x-axis spines\nax.spines['left'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis spines\nax.spines['left'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the x-axis ticks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis ticks\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='blue')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='blue')\n\n# Set the color of the x-axis spines\nax.spines['left'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis spines\nax.spines['left'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the x-axis ticks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis ticks\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='blue')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='blue')\n\n# Set the color of the x-axis spines\nax.spines['left'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis spines\nax.spines['left'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the x-axis ticks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis ticks\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='blue')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='blue')\n\n# Set the color of the x-axis spines\nax.spines['left'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['bottom'].set_color('blue')\n\n"}
{"file": "dataset/ori_500/scatter_24.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, axes = plt.subplots(1, 3, figsize=(15, 5))\n\n# Scatter Plot - Deepskyblue\naxes[0].scatter([70, 80, 90], [40, 60, 80], color='blue')\naxes[0].set_title('Scatter Plot - deepskyblue')\naxes[0].set_xlabel('X Values')\naxes[0].set_ylabel('Y Values')\naxes[0].set_ylim(30, 90)\naxes[0].set_xlim(70, 90)\n\n# Scatter Plot - Magenta\naxes[1].scatter([70, 80, 90], [20, 40, 60], color='magenta')\naxes[1].set_title('Scatter Plot - magenta')\naxes[1].set_xlabel('X Values')\naxes[1].set_ylabel('Y Values')\naxes[1].set_ylim(10, 70)\naxes[1].set_xlim(70, 90)\n\n# Scatter Plot - Limegreen\naxes[2].scatter([70, 80, 90], [10, 30, 50], color='limegreen')\naxes[2].set_title('Scatter Plot - limegreen')\naxes[2].set_xlabel('X Values')\naxes[2].set_ylabel('Y Values')\naxes[2].set_ylim(5, 60)\naxes[2].set_xlim(70, 90)\n\n# Set the color scale for each subplot\ncmap = plt.get_cmap(\"coolwarm\")\nfor ax in axes:\n    ax.imshow([[0.1, 0.2, 0.3], [0.4, 0.5, 0.6], [0.7, 0.8, 0.9]], cmap=cmap, aspect='auto')\n\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_25.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\nx = [70, 72, 74, 76, 78, 80, 82, 84, 86, 88]\ny1 = [50, 45, 40, 35, 30, 25, 20, 15, 10, 5]\ny2 = [45, 40, 35, 30, 25, 20, 15, 10, 5, 0]\ny3 = [50, 45, 40, 35, 30, 25, 20, 15, 10, 5]\n\n# Create a figure and a set of subplots\nfig, axs = plt.subplots(1, 3, figsize=(15, 5))\n\n# Plot 1\naxs[0].plot(x, y1, 'm-')\naxs[0].set_title('ViTPose (sc) Performance')\naxs[0].set_xlabel('Time (s)')\naxs[0].set_ylabel('Performance (%)')\naxs[0].scatter([70, 72, 74, 76, 78, 80, 82, 84, 86, 88], [50, 45, 40, 35, 30, 25, 20, 15, 10, 5], color='pink')\n\n# Plot 2\naxs[1].plot(x, y2, 'c-')\naxs[1].set_title('ViTPose (ft) Performance')\naxs[1].set_xlabel('Time (s)')\naxs[1].set_ylabel('Performance (%)')\naxs[1].scatter([70, 72, 74, 76, 78, 80, 82, 84, 86, 88], [45, 40, 35, 30, 25, 20, 15, 10, 5, 0], color='pink')\n\n# Plot 3\naxs[2].plot(x, y3, 'g-')\naxs[2].set_title('VLPose Performance')\naxs[2].set_xlabel('Time (s)')\naxs[2].set_ylabel('Performance (%)')\naxs[2].scatter([70, 72, 74, 76, 78, 80, 82, 84, 86, 88], [50, 45, 40, 35, 30, 25, 20, 15, 10, 5], color='yellow')\n\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the plot\nx = [1.2, 1.4, 1.6, 1.8, 2.0, 2.2, 2.4, 2.6, 2.8, 3.0, 3.2, 3.4, 3.6, 3.8, 4.0, 4.2, 4.4, 4.6, 4.8, 5.0, 5.2, 5.4, 5.6, 5.8, 6.0]\ny = [75, 70, 65, 60, 55, 50, 45, 40, 35, 30, 25, 20, 15, 10, 5, 0, 5, 10, 15, 20, 25, 30, 35, 40, 45]\ncolors = ['pink', 'purple', 'green', 'red', 'blue', 'orange', 'gray', 'brown', 'cyan', 'magenta', 'yellow', 'lime', 'olive', 'navy', 'silver', 'gold', 'teal', 'aqua', 'maroon', 'fuchsia', 'white']\nsizes = [100, 90, 80, 70, 60, 50, 40, 30, 20, 10, 5, 0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60]\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Plot the data\nfor i in range(len(x)):\n    ax.scatter(x[i], y[i], color=colors[i], s=sizes[i])\n\n# Set the labels and title\nax.set_xlabel('Diversity (%)')\nax.set_ylabel('Accuracy (%)')\nax.set_title('Token cost ($)')\n\n# Add a rectangle with a colored border\nrect = plt.Rectangle((0.5, 0.5), 0.5, 0.5, color='red', fill=False)\nax.add_patch(rect)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_4.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(5.0, 5.0))\n\n# Set the background color of the plot\nax.set_facecolor('white')\n\n# Define the number of circles and their properties\nnum_circles = 100\ncircle_radius = 0.02\ncircle_color = 'red'\n\n# Generate random positions for the circles\ncircle_positions = np.random.rand(num_circles, 2)\n\n# Draw the circles\nfor pos in circle_positions:\n    circle = plt.Circle(pos, circle_radius, color=circle_color)\n    ax.add_artist(circle)\n\n# Set the limits of the plot\nax.set_xlim(0, 1)\nax.set_ylim(0, 1)\n\n# Remove the axis ticks\nax.set_xticks([])\nax.set_yticks([])\n\n# Display the plot\nplt.show()"}
{"file": "dataset/ori_500/scatter_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Scatter Plot of WRMSE vs BPP')\n\n# Set the x-axis label\nax.set_xlabel('Bit per pixel (BPP)')\n\n# Set the y-axis label\nax.set_ylabel('WRMSE')\n\n# Define the data points\nx = [0.06, 0.08, 0.1, 0.12, 0.14, 0.16, 0.18, 0.2]\ny = [800, 700, 600, 500, 400, 300, 200, 100]\n\n# Define the colors for each point\ncolors = ['blue', 'cyan', 'red', 'green', 'purple', 'orange', 'pink', 'yellow']\n\n# Plot the data points with different colors\nfor i in range(len(x)):\n    ax.scatter(x[i], y[i], color=colors[i])\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\nax.set_title('Daytime Sunny')\nax.scatter([1, 2, 3], [4, 5, 6], color='orange')\n\nax2 = fig.add_axes([0.7, 0.7, 0.2, 0.2])\nax2.set_title('Night Rainy')\nax2.scatter([1, 2, 3], [4, 5, 6], color='blue')\n\nax3 = fig.add_axes([0.7, 0.4, 0.2, 0.2])\nax3.set_title('PGST')\nax3.scatter([1, 2, 3], [4, 5, 6], color='green')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 3.0))\n\n# Set the title of the plot\nax.set_title('Number of params. vs. NMAE on QM9')\n\n# Set the x-axis label\nax.set_xlabel('Number of parameters (M)')\n\n# Set the y-axis label\nax.set_ylabel('NMAE (%)')\n\n# Define the data points\nx = [0.6, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0]\ny = [10, 15, 20, 25, 30, 35, 40]\n\n# Define the colors for each point\ncolors = ['purple', 'gray', 'red', 'brown', 'purple', 'green', 'red']\n\n# Plot the data points\nfor xi, yi, color in zip(x, y, colors):\n    ax.plot(xi, yi, 'o', color=color)\n\n# Add a vertical line at x=3\nax.axvline(x=3, color='black', linestyle='--')\n\n# Add a horizontal line at y=20\nax.axhline(y=20, color='black', linestyle='--')\n\n# Add a rectangle with a dashed border\nrect = plt.Rectangle((0.5, 18), 2, 10, linewidth=1, edgecolor='black', facecolor='none')\nax.add_patch(rect)\n\n# Add a red circle at (0.6, 10)\ncircle = plt.Circle((0.6, 10), 0.1, color='red')\nax.add_artist(circle)\n\n# Add a green circle at (6.0, 40)\ncircle = plt.Circle((6.0, 40), 0.1, color='green')\nax.add_artist(circle)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Set the title of the plot\nax.set_title('Legend')\n\n# Set the labels for the x and y axes\nax.set_xlabel('PC1')\nax.set_ylabel('PC2')\n\n# Set the limits for the x and y axes\nax.set_xlim(-0.4, 0.4)\nax.set_ylim(-0.2, 0.4)\n\n# Define the colors for each category\ncolors = ['blue', 'pink', 'yellow', 'green', 'grey']\n\n# Plot the data points with different colors\nfor i, color in enumerate(colors):\n    ax.scatter([i]*100, [i]*100, color=color)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(7.0, 10.0))\n\n# Set the title of the plot\nax.set_title('DE')\n\n# Set the x-axis label\nax.set_xlabel('CQA Similarity')\n\n# Set the y-axis label\nax.set_ylabel('MSE')\n\n# Set the grid\nax.grid(True)\n\n# Define the colors for the scatter plot\ncolors = ['green', 'green', 'cyan', 'orange', 'red']\n\n# Define the labels for the scatter plot\nlabels = ['iTrm-All', 'iTrm-En', 'PatchTST', 'TiDE', 'TimeXer']\n\n# Define the data points for the scatter plot\nx = [0.6, 0.7, 0.8, 0.9, 1.0]\ny = [0.12, 0.11, 0.10, 0.9, 1.1]\n\n# Create a scatter plot\nscatter = ax.scatter(x, y, c=colors, label=labels)\n\n# Add a legend\nax.legend()\n\n# Create a second subplot\nfig, ax = plt.subplots(figsize=(7.0, 10.0))\n\n# Set the title of the plot\nax.set_title('PJM')\n\n# Set the x-axis label\nax.set_xlabel('CQA Similarity')\n\n# Set the y-axis label\nax.set_ylabel('MSE')\n\n# Set the grid\nax.grid(True)\n\n# Define the colors for the scatter plot\ncolors = ['green', 'green', 'cyan', 'orange', 'red']\n\n# Define the labels for the scatter plot\nlabels = ['iTrm-All', 'iTrm-En', 'PatchTST', 'TiDE', 'TimeXer']\n\n# Define the data points for the scatter plot\nx = [0.6, 0.7, 0.8, 0.9, 1.0]\ny = [0.6, 0.55, 0.50, 0.45, 0.40]\n\n# Create a scatter plot\nscatter = ax.scatter(x, y, c=colors, label=labels)\n\n# Add a legend\nax.legend()\n```"}
{"file": "dataset/ori_500/tree_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(12.0, 8.0))\n\n# Set the background color of the plot\nax.set_facecolor('lightgrey')\n\n# Define the colors for the rectangles\ncolors = ['skyblue', 'orange', 'lightgreen', 'lightcoral', 'lightskyblue']\n\n# Define the positions of the rectangles\npositions = [0.1, 0.3, 0.5, 0.7, 0.9]\n\n# Define the widths of the rectangles\nwidths = [0.2, 0.2, 0.2, 0.2, 0.2]\n\n# Define the heights of the rectangles\nheights = [0.4, 0.4, 0.4, 0.4, 0.4]\n\n# Define the labels for the rectangles\nlabels = ['physicsforums.com 18.42%', 'gmatclub.com 6.26%', 'mathworks.com 4.91%', 'mathhelpboards.com 6.15%', 'mathoverflow.net 10.91%']\n\n# Draw the rectangles\nfor i in range(len(colors)):\n    ax.barh(positions[i], widths[i], height=heights[i], color=colors[i], label=labels[i])\n\n# Set the title of the plot\nax.set_title('Mathematics Sites')\n\n# Set the x-axis label\nax.set_xlabel('Percentage')\n\n# Set the y-axis label\nax.set_ylabel('Sites')\n\n# Set the legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/tree_2.pdf", "response": "```\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(12.0, 8.0))\n\n# Define the colors for each rectangle\ncolors = ['purple', 'pink', 'orange', 'brown', 'grey']\n\n# Define the width of each rectangle\nwidths = [0.2, 0.2, 0.2, 0.2, 0.2]\n\n# Define the height of each rectangle\nheights = [0.2, 0.2, 0.2, 0.2, 0.2]\n\n# Define the labels for each rectangle\nlabels = ['Java 10%', 'Python 20%', 'JavaScript 27%', 'C++ 23%', 'Other 8%']\n\n# Create a bar chart\nax.bar(labels, heights, color=colors, width=widths)\n\n# Set the title of the chart\nax.set_title('Programming Language Usage')\n\n# Set the x-axis label\nax.set_xlabel('Language')\n\n# Set the y-axis label\nax.set_ylabel('Usage (%)')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/tree_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(12.0, 8.0))\n\n# Set the background color of the plot\nax.set_facecolor('lightblue')\n\n# Create a rectangle for Adidas\nrect1 = plt.Rectangle((0.1, 0.7), 0.4, 0.2, color='skyblue')\nax.add_patch(rect1)\n\n# Create a rectangle for Under Armour\nrect2 = plt.Rectangle((0.6, 0.7), 0.4, 0.2, color='orange')\nax.add_patch(rect2)\n\n# Create a rectangle for Nike\nrect3 = plt.Rectangle((0.1, 0.4), 0.4, 0.2, color='lightgreen')\nax.add_patch(rect3)\n\n# Create a rectangle for Reebok\nrect4 = plt.Rectangle((0.6, 0.4), 0.4, 0.2, color='yellow')\nax.add_patch(rect4)\n\n# Create a rectangle for Puma\nrect5 = plt.Rectangle((0.1, 0.1), 0.4, 0.2, color='lightcoral')\nax.add_patch(rect5)\n\n# Create a rectangle for New Balance\nrect6 = plt.Rectangle((0.6, 0.1), 0.4, 0.2, color='salmon')\nax.add_patch(rect6)\n\n# Set the title of the plot\nax.set_title('Sports Brand Market Share', fontsize=16)\n\n# Set the x-axis and y-axis labels\nax.set_xlabel('Brands', fontsize=14)\nax.set_ylabel('Market Share (%)', fontsize=14)\n\n# Set the tick labels\nax.set_xticks([0.25, 0.75])\nax.set_yticks([0.25, 0.75])\n\n# Set the tick label colors\nax.tick_params(axis='x', colors='white')\nax.tick_params(axis='y', colors='white')\n\n# Set the tick label rotation\nax.tick_params(axis='x', rotation=90)\n\n# Set the tick label font size\nax.tick_params(axis='both', labelsize=12)\n\n# Set the tick label font weight\nax.tick_params(axis='both', labelweight='bold')\n\n# Set the tick label font style\nax.tick_params(axis='both', labelstyle='italic')\n\n# Set the tick label font family\nax.tick_params(axis='both', labelfamily='serif')\n\n# Set the tick label font variant\nax.tick_params(axis='both', labelvariant='small-caps')\n\n# Set the tick label font stretch\nax.tick_params(axis='both', labelstretch='ultra-condensed')\n\n# Set the tick label font size\nax.tick_params(axis='both', labelsize=12)\n\n# Set the tick label font weight\nax.tick_params(axis='both', labelweight='bold')\n\n# Set the tick label font style\nax.tick_params(axis='both', labelstyle='italic')\n\n# Set the tick label font family\nax.tick_params(axis='both', labelfamily='serif')\n\n# Set the tick label font variant\nax.tick_params(axis='both', labelvariant='small-caps')\n\n# Set the tick label font stretch\nax.tick_params(axis='both', labelstretch='ultra-condensed')\n\n# Set the tick label font size\nax.tick_params(axis='both', labelsize=12)\n\n# Set the tick label font weight\nax.tick_params(axis='both', labelweight='bold')\n\n# Set the tick label font style\nax.tick_params(axis='both', labelstyle='italic')\n\n# Set the tick label font family\nax.tick_params(axis='both', labelfamily='serif')\n\n# Set the tick label font variant\nax.tick_params(axis='both', labelvariant='small-caps')\n\n# Set the tick label font stretch\nax.tick_params(axis='both', labelstretch='ultra-condensed')\n\n# Set the tick label font size\nax.tick_params(axis='both', labelsize=12)\n\n# Set the tick label font weight\nax.tick_params(axis='both', labelweight='bold')\n\n# Set the tick label font style\nax.tick_params(axis='both', labelstyle='italic')\n\n# Set the tick label font family\nax.tick_params(axis='both', labelfamily='serif')\n\n# Set the tick label font variant\nax.tick_params(axis='both', labelvariant='small-caps')\n\n# Set the tick label font stretch\nax.tick_params(axis='both', labelstretch='ultra-condensed')\n\n# Set the tick label font size\nax.tick_params(axis='both', labelsize=12)\n\n# Set the tick label font weight\nax.tick_params(axis='both', labelweight='bold')\n\n# Set the tick label font style\nax.tick_params(axis='both', labelstyle='italic')\n\n# Set the tick label font family\nax.tick_params(axis='both', labelfamily='serif')\n\n# Set the tick label font variant\nax.tick_params(axis='both', labelvariant='small-caps')\n\n# Set the tick label font stretch\nax.tick_params(axis='both', labelstretch='ultra-condensed')\n\n# Set the tick label font size\nax.tick_params(axis='both', labelsize=12)\n\n# Set the tick label font weight\nax.tick_params(axis='both', labelweight='bold')\n\n# Set the tick label font style\nax.tick_params(axis='both', labelstyle='italic')\n\n# Set the tick label font family\nax.tick_params(axis='both', labelfamily='serif')\n\n# Set the tick label font variant\nax.tick_params(axis='both', labelvariant='small-caps')\n\n# Set the tick label font stretch\nax.tick_params(axis='both', labelstretch='ultra-condensed')\n\n# Set the tick label font size\nax.tick_params(axis='both', labelsize=12)\n\n# Set the tick label font weight\nax.tick_params(axis='both', labelweight='bold')\n\n# Set the tick label font style\nax.tick_params(axis='both', labelstyle='italic')\n\n# Set the tick label font family\nax.tick_params(axis='both', labelfamily='serif')\n\n# Set the tick label font variant\nax.tick_params(axis='both', labelvariant='small-caps')\n\n# Set the tick label font stretch\nax.tick_params(axis='both', labelstretch='ultra-condensed')\n\n# Set the tick label font size\nax.tick_params(axis='both', labelsize=12)\n\n# Set the tick label font weight\nax.tick_params(axis='both', labelweight='bold')\n\n# Set the tick label font style\nax.tick_params(axis='both', labelstyle='italic')\n\n# Set the tick label font family\nax.tick_params(axis='both', labelfamily='serif')\n\n# Set the tick label font variant\nax.tick_params(axis='both', labelvariant='small-caps')\n\n# Set the tick label font stretch\nax.tick_params(axis='both', labelstretch='ultra-condensed')\n\n# Set the tick label font size\nax.tick_params(axis='both', labelsize=12)\n\n# Set the tick label font weight\nax.tick_params(axis='both', labelweight='bold')\n\n# Set the tick label font style\nax.tick_params(axis='both', labelstyle='italic')\n\n# Set the tick label font family\nax.tick_params(axis='both', labelfamily='serif')\n\n# Set the tick label font variant\nax.tick_params(axis='both', labelvariant='small-caps')\n\n# Set the tick label font stretch\nax.tick_params(axis='both', labelstretch='ultra-condensed')\n\n# Set the tick label font size\nax.tick_params(axis='both', labelsize=12)\n\n# Set the tick label font weight\nax.tick_params(axis='both', labelweight='bold')\n\n# Set the tick label font style\nax.tick_params(axis='both', labelstyle='italic')\n\n# Set the tick label font family\nax.tick_params(axis='both', labelfamily='serif')\n\n# Set the tick label font variant\nax.tick_params(axis='both', labelvariant='small-caps')\n\n# Set the tick label font stretch\nax.tick_params(axis='both', labelstretch='ultra-condensed')\n\n# Set the tick label font size\nax.tick_params(axis='both', labelsize=12)\n\n# Set the tick label font weight\nax.tick_params(axis='both', labelweight='bold')\n\n# Set the tick label font style\nax.tick_params(axis='both', labelstyle='italic')\n\n# Set the tick label font family\nax.tick_params(axis='both', labelfamily='serif')\n\n# Set the tick label font variant\nax.tick_params(axis='both', labelvariant='small-caps')\n\n# Set the tick label font stretch\nax.tick_params(axis='both', labelstretch='ultra-condensed')\n\n# Set the tick label font size\nax.tick_params(axis='both', labelsize=12)\n\n# Set the tick label font weight\nax.tick_params(axis='both', labelweight='bold')\n\n# Set the tick label font style\nax.tick_params(axis='both', labelstyle='italic')\n\n# Set the tick label font family\nax.tick_params(axis='both', labelfamily='serif')\n\n# Set the tick label font variant\nax.tick_params(axis='both', labelvariant='small-caps')\n\n# Set the tick label font stretch\nax.tick_params(axis='both', labelstretch='ultra-condensed')\n\n# Set the tick label font size\nax.tick_params(axis='both', labelsize=12)\n\n# Set the tick label font weight\nax.tick_params(axis='both', labelweight='bold')\n\n# Set the tick label font style\nax.tick_params(axis='both', labelstyle='italic')\n\n# Set the tick label font family\nax.tick_params(axis='both', labelfamily='serif')\n\n# Set the tick label font variant\nax.tick_params(axis='both', labelvariant='small-caps')\n\n# Set the tick label font stretch\nax.tick_params(axis='both', labelstretch='ultra-condensed')\n\n# Set the tick label font size\nax.tick_params(axis='both', labelsize=12)\n\n# Set the tick label font weight\nax.tick_params(axis='both', labelweight='bold')\n\n# Set the tick label font style\nax.tick_params(axis='both', labelstyle='italic')\n\n# Set the tick label font family\nax.tick_params(axis='both', labelfamily='serif')\n\n# Set the tick label font variant\nax.tick_params(axis='both', labelvariant='small-caps')\n\n# Set the tick label font stretch\nax.tick_params(axis='both', labelstretch='ultra-condensed')\n\n# Set the tick label font size\nax.tick_params(axis='both', labelsize=12)\n\n# Set the tick label font weight\nax.tick_params(axis='both', labelweight='bold')\n\n# Set the tick label font style\nax.tick_params(axis='both', labelstyle='italic')\n\n# Set the tick label font family\nax.tick_params(axis='both', labelfamily='serif')\n\n# Set the tick label font variant\nax.tick_params(axis='both', labelvariant='small-caps')\n\n# Set the tick label font stretch\nax.tick_params(axis='both', labelstretch='ultra-condensed')\n\n# Set the tick label font size\nax.tick_params(axis='both', labelsize=12)\n\n# Set the tick label font weight\nax.tick_params(axis='both', labelweight='bold')\n\n# Set the tick label font style\nax.tick_params(axis='both', labelstyle='italic')\n\n# Set the tick label font family\nax.tick_params(axis='both', labelfamily='serif')\n\n# Set the tick label font variant\nax.tick_params(axis='both', labelvariant='small-caps')\n\n# Set the tick label font stretch\nax.tick_params(axis='both', labelstretch='ultra-condensed')\n\n# Set the tick label font size\nax.tick_params(axis='both', labelsize=12)\n\n# Set the tick label font weight\nax.tick_params(axis='both', labelweight='bold')\n\n# Set the tick label font style\nax.tick_params(axis='both', labelstyle='italic')\n\n# Set the tick label font family\nax.tick_params(axis='both', labelfamily='serif')\n\n# Set the tick label font variant\nax.tick_params(axis='both', labelvariant='small-caps')\n\n# Set the tick label font stretch\nax.tick_params(axis='both', labelstretch='ultra-condensed')\n\n# Set the tick label font size\nax.tick_params(axis='both', labelsize=12)\n\n# Set the tick label font weight\nax.tick_params(axis='both', labelweight='bold')\n\n# Set the tick label font style\nax.tick_params(axis='both', labelstyle='italic')\n\n# Set the tick label font family\nax.tick_params(axis='both', labelfamily='serif')\n\n# Set the tick label font variant\nax.tick_params(axis='both', labelvariant='small-caps')\n\n# Set the tick label font stretch\nax.tick_params(axis='both', labelstretch='ultra-condensed')\n\n# Set the tick label font size\nax.tick_params(axis='both', labelsize=12)\n\n# Set the tick label font weight\nax.tick_params(axis='both', labelweight='bold')\n\n# Set the tick label font style\nax.tick_params(axis='both', labelstyle='italic')\n\n# Set the tick label font family\nax.tick_params(axis='both', labelfamily='serif')\n\n# Set the tick label font variant\nax.tick_params(axis='both', labelvariant='small-caps')\n\n# Set the tick label font stretch\nax.tick_params(axis='both', labelstretch='ultra-condensed')\n\n# Set the tick label font size\nax.tick_params(axis='both', labelsize=12)\n\n# Set the tick label font weight\nax.tick_params(axis='both', labelweight='bold')\n\n# Set the tick label font style\nax.tick_params(axis='both', labelstyle='italic')\n\n# Set the tick label font family\nax.tick_params(axis='both', labelfamily='serif')\n\n# Set the tick label font variant\nax.tick_params(axis='both', labelvariant='small-caps')\n\n# Set the tick label font stretch\nax.tick_params(axis='both', labelstretch='ultra-condensed')\n\n# Set the tick label font size\nax.tick_params(axis='both', labelsize=12)\n\n# Set the tick label font weight\nax.tick_params(axis='both', labelweight='bold')\n\n# Set the tick label font style\nax.tick_params(axis='both', labelstyle='italic')\n\n# Set the tick label font family\nax.tick_params(axis='both', labelfamily='serif')\n\n# Set the tick label font variant\nax.tick_params(axis='both', labelvariant='small-caps')\n\n# Set the tick label font stretch\nax.tick_params(axis='both', labelstretch='ultra-condensed')\n\n# Set the tick label font size\nax.tick_params(axis='both', labelsize=12)\n\n# Set the tick label font weight\nax.tick_params(axis='both', labelweight='bold')\n\n# Set the tick label font style\nax.tick_params(axis='both', labelstyle='italic')\n\n# Set the tick label font family\nax.tick_params(axis='both', labelfamily='serif')\n\n# Set the tick label font variant\nax.tick_params(axis='both', labelvariant='small-caps')\n\n# Set the tick label font stretch\nax.tick_params(axis='both', labelstretch='ultra-condensed')\n\n# Set the tick label font size\nax.tick_params(axis='both', labelsize=12)\n\n# Set the tick label font weight\nax.tick_params(axis='both', labelweight='bold')\n\n# Set the tick label font style\nax.tick_params(axis='both', labelstyle='italic')\n\n# Set the tick label font family\nax.tick_params(axis='both', labelfamily='serif')\n\n# Set the tick label font variant\nax.tick_params(axis='both', labelvariant='small-caps')\n\n# Set the tick label font stretch\nax.tick_params(axis='both', labelstretch='ultra-condensed')\n\n# Set the tick label font size\nax.tick_params(axis='both', labelsize=12)\n\n# Set the tick label font weight\nax.tick_params(axis='both', labelweight='bold')\n\n# Set the tick label font style\nax.tick_params(axis='both', labelstyle='italic')\n\n# Set the tick label font family\nax.tick_params(axis='both', labelfamily='serif')\n\n# Set the tick label font variant\nax.tick_params(axis='both', labelvariant='small-caps')\n\n# Set the tick label font stretch\nax.tick_params(axis='both', labelstretch='ultra-condensed')\n\n# Set the tick label font size\nax.tick_params(axis='both', labelsize=12)\n\n# Set the tick label font weight\nax.tick_params(axis='both', labelweight='bold')\n\n# Set the tick label font style\nax.tick_params(axis='both', labelstyle='italic')\n\n# Set the tick label font family\nax.tick_params(axis='both', labelfamily='serif')\n\n# Set the tick label font variant\nax.tick_params(axis='both', labelvariant='small-caps')\n\n# Set the tick label font stretch\nax.tick_params(axis='both', labelstretch='ultra-condensed')\n\n# Set the tick label font size\nax.tick_params(axis='both', labelsize=12)\n\n# Set the tick label font weight\nax.tick_params(axis='both', labelweight='bold')\n\n# Set the tick label font style\nax.tick_params(axis='both', labelstyle='italic')\n\n# Set the tick label font family\nax.tick_params(axis='both', labelfamily='serif')\n\n# Set the tick label font variant\nax.tick_params(axis='both', labelvariant='small-caps')\n\n# Set the tick label font stretch\nax.tick_params(axis='both', labelstretch='ultra-condensed')\n\n# Set the tick label font size\nax.tick_params(axis='both', labelsize=12)\n\n# Set the tick label font weight\nax.tick_params(axis='both', labelweight='bold')\n\n# Set the tick label font style\nax.tick_params(axis='both', labelstyle='italic')\n\n# Set the tick label font family\nax.tick_params(axis='both', labelfamily='serif')\n\n# Set the tick label font variant\nax.tick_params(axis='both', labelvariant='small-caps')\n\n# Set the tick label font stretch\nax.tick_params(axis='both', labelstretch='ultra-condensed')\n\n# Set the tick label font size\nax.tick_params(axis='both', labelsize=12)\n\n# Set the tick label font weight\nax.tick_params(axis='both', labelweight='bold')\n\n# Set the tick label font style\nax.tick_params(axis='both', labelstyle='italic')\n\n# Set the tick label font family\nax.tick_params(axis='both', labelfamily='serif')\n\n# Set the tick label font variant\nax.tick_params(axis='both', labelvariant='small-caps')\n\n# Set the tick label font stretch\nax.tick_params(axis='both', labelstretch='ultra-condensed')\n\n# Set the tick label font size\nax.tick_params(axis='both', labelsize=12)\n\n# Set the tick label font weight\nax.tick_params(axis='both', labelweight='bold')\n\n# Set the tick label font style\nax.tick_params(axis='both', labelstyle='italic')\n\n# Set the tick label font family\nax.tick_params(axis='both', labelfamily='"}
{"file": "dataset/ori_500/tree_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(4.0, 6.0))\n\n# Set the background color of the plot\nax.set_facecolor('#FFD700')\n\n# Create a bar chart with the data\nbars = ax.barh(['50%', '15%', '20%'], [50, 15, 20], height=0.8, color=['#FFA07A', '#ADD8E6', '#90EE90'])\n\n# Add labels to the bars\nfor bar in bars:\n    width = bar.get_width()\n    ax.text(width, bar.get_y() + bar.get_height()/2, f'{width}%', ha='left', va='center')\n\n# Set the title of the plot\nax.set_title('Bar Chart with Colored Bars')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/tree_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Define the data for the rectangles\nrectangles = [\n    (0.1, 0.7, 0.2, 0.2, 'yellow', 'European 15%'),\n    (0.4, 0.7, 0.2, 0.2, 'purple', 'Australian 18%'),\n    (0.1, 0.4, 0.2, 0.2, 'pink', 'Asian 25%'),\n    (0.4, 0.4, 0.2, 0.2, 'cyan', 'South American 10%'),\n    (0.1, 0.1, 0.2, 0.2, 'lightblue', 'North American 20%'),\n    (0.4, 0.1, 0.2, 0.2, 'lightgreen', 'African 12%')\n]\n\n# Draw the rectangles\nfor x, y, width, height, color, label in rectangles:\n    rect = plt.Rectangle((x, y), width, height, color=color)\n    ax.add_patch(rect)\n\n# Set the limits of the plot\nax.set_xlim(0, 1)\nax.set_ylim(0, 1)\n\n# Set the aspect ratio of the plot\nax.set_aspect('equal')\n\n# Remove the axes\nax.axis('off')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/violin_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 7.0))\n\n# Set the title of the plot\nax.set_title('Llama2')\n\n# Set the x-axis label\nax.set_xlabel('Number of examples')\n\n# Set the y-axis label\nax.set_ylabel('logP(CL) - logP(CL)')\n\n# Set the x-axis limits\nax.set_xlim(1, 5)\n\n# Set the y-axis limits\nax.set_ylim(1, 7)\n\n# Set the x-axis ticks\nax.set_xticks([1, 2, 3, 4, 5])\n\n# Set the y-axis ticks\nax.set_yticks([1, 2, 3, 4, 5, 6, 7])\n\n# Set the x-axis tick labels\nax.set_xticklabels(['1', '2', '3', '4', '5'])\n\n# Set the y-axis tick labels\nax.set_yticklabels(['1', '2', '3', '4', '5', '6', '7'])\n\n# Set the background color of the plot\nax.set_facecolor('white')\n\n# Set the grid lines\nax.grid(True)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the axis labels\nax.xaxis.label.set_color('black')\nax.yaxis.label.set_color('black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the legend\nax.legend().get_texts()[0].set_color('blue')\nax.legend().get_texts()[1].set_color('orange')\n\n# Set the color of the plot elements\nax.plot([1, 2, 3, 4, 5], [2, 3, 4, 5, 6], color='blue')\nax.plot([1, 2, 3, 4, 5], [3, 4, 5, 6, 7], color='orange')\n\n# Set the color of the scatter plot elements\nax.scatter([1, 2, 3, 4, 5], [2, 3, 4, 5, 6], color='blue')\nax.scatter([1, 2, 3, 4, 5], [3, 4, 5, 6, 7], color='orange')\n\n# Set the color of the bar chart elements\nax.bar([1, 2, 3, 4, 5], [2, 3, 4, 5, 6], color='blue')\nax.bar([1, 2, 3, 4, 5], [3, 4, 5, 6, 7], color='orange')\n\n# Set the color of the pie chart elements\nax.pie([2, 3, 4, 5, 6], colors=['blue', 'orange'])\nax.pie([3, 4, 5, 6, 7], colors=['blue', 'orange'])\n\n# Set the color of the histogram elements\nax.hist([2, 3, 4, 5, 6], bins=5, color='blue')\nax.hist([3, 4, 5, 6, 7], bins=5, color='orange')\n\n# Set the color of the boxplot elements\nax.boxplot([2, 3, 4, 5, 6], vert=False, patch_artist=True, boxprops=dict(facecolor='blue'))\nax.boxplot([3, 4, 5, 6, 7], vert=False, patch_artist=True, boxprops=dict(facecolor='orange'))\n\n# Set the color of the violin plot elements\nax.violinplot([2, 3, 4, 5, 6], showmeans=True, showmedians=True, showextrema=True, points=100, bw_method=None, gridsize=None, cut=3, widths=None, showfliers=True, quantiles=None, vert=True, patch_artist=True, inner='quartile', bw_method=None, gridsize=None, cut=3, widths=None, showfliers=True, quantiles=None, vert=True, patch_artist=True, inner='quartile', showmeans=True, showmedians=True, showextrema=True, points=100, bw_method=None, gridsize=None, cut=3, widths=None, showfliers=True, quantiles=None, vert=True, patch_artist=True, inner='quartile')\n\n# Set the color of the heatmap elements\nax.imshow([[2, 3, 4, 5, 6], [3, 4, 5, 6, 7]], cmap='Blues')\nax.imshow([[3, 4, 5, 6, 7], [4, 5, 6, 7, 8]], cmap='Oranges')\n\n# Set the color of the contour plot elements\nx = np.linspace(-5, 5, 100)\ny = np.linspace(-5, 5, 100)\nX, Y = np.meshgrid(x, y)\nZ = np.sin(np.sqrt(X**2 + Y**2))\nCS = ax.contour(X, Y, Z, levels=10, colors='k')\nCS.clabel(fmt='%2.1f', use_clabeltext=True)\n\n# Set the color of the contourf plot elements\nCS = ax.contourf(X, Y, Z, levels=10, cmap='Blues')\nCS = ax.contourf(X, Y, Z, levels=10, cmap='Oranges')\n\n# Set the color of the streamplot elements\nax.streamplot(X, Y, Z, Z, color='b')\n\n# Set the color of the quiver plot elements\nU = np.cos(X)\nV = np.sin(Y)\nax.quiver(X, Y, U, V, color='r')\n\n# Set the color of the polar plot elements\nax.polar()\n\n# Set the color of the scatter plot elements\nax.scatter([1, 2, 3, 4, 5], [2, 3, 4, 5, 6], color='blue')\nax.scatter([1, 2, 3, 4, 5], [3, 4, 5, 6, 7], color='orange')\n\n# Set the color of the bar chart elements\nax.bar([1, 2, 3, 4, 5], [2, 3, 4, 5, 6], color='blue')\nax.bar([1, 2, 3, 4, 5], [3, 4, 5, 6, 7], color='orange')\n\n# Set the color of the pie chart elements\nax.pie([2, 3, 4, 5, 6], colors=['blue', 'orange'])\nax.pie([3, 4, 5, 6, 7], colors=['blue', 'orange'])\n\n# Set the color of the histogram elements\nax.hist([2, 3, 4, 5, 6], bins=5, color='blue')\nax.hist([3, 4, 5, 6, 7], bins=5, color='orange')\n\n# Set the color of the boxplot elements\nax.boxplot([2, 3, 4, 5, 6], vert=False, patch_artist=True, boxprops=dict(facecolor='blue'))\nax.boxplot([3, 4, 5, 6, 7], vert=False, patch_artist=True, boxprops=dict(facecolor='orange'))\n\n# Set the color of the violin plot elements\nax.violinplot([2, 3, 4, 5, 6], showmeans=True, showmedians=True, showextrema=True, points=100, bw_method=None, gridsize=None, cut=3, widths=None, showfliers=True, quantiles=None, vert=True, patch_artist=True, inner='quartile', bw_method=None, gridsize=None, cut=3, widths=None, showfliers=True, quantiles=None, vert=True, patch_artist=True, inner='quartile', showmeans=True, showmedians=True, showextrema=True, points=100, bw_method=None, gridsize=None, cut=3, widths=None, showfliers=True, quantiles=None, vert=True, patch_artist=True, inner='quartile')\n\n# Set the color of the heatmap elements\nax.imshow([[2, 3, 4, 5, 6], [3, 4, 5, 6, 7]], cmap='Blues')\nax.imshow([[3, 4, 5, 6, 7], [4, 5, 6, 7, 8]], cmap='Oranges')\n\n# Set the color of the contour plot elements\nx = np.linspace(-5, 5, 100)\ny = np.linspace(-5, 5, 100)\nX, Y = np.meshgrid(x, y)\nZ = np.sin(np.sqrt(X**2 + Y**2))\nCS = ax.contour(X, Y, Z, levels=10, colors='k')\nCS.clabel(fmt='%2.1f', use_clabeltext=True)\n\n# Set the color of the contourf plot elements\nCS = ax.contourf(X, Y, Z, levels=10, cmap='Blues')\nCS = ax.contourf(X, Y, Z, levels=10, cmap='Oranges')\n\n# Set the color of the streamplot elements\nax.streamplot(X, Y, Z, Z, color='b')\n\n# Set the color of the quiver plot elements\nU = np.cos(X)\nV = np.sin(Y)\nax.quiver(X, Y, U, V, color='r')\n\n# Set the color of the polar plot elements\nax.polar()\n\n# Set the color of the scatter plot elements\nax.scatter([1, 2, 3, 4, 5], [2, 3, 4, 5, 6], color='blue')\nax.scatter([1, 2, 3, 4, 5], [3, 4, 5, 6, 7], color='orange')\n\n# Set the color of the bar chart elements\nax.bar([1, 2, 3, 4, 5], [2, 3, 4, 5, 6], color='blue')\nax.bar([1, 2, 3, 4, 5], [3, 4, 5, 6, 7], color='orange')\n\n# Set the color of the pie chart elements\nax.pie([2, 3, 4, 5, 6], colors=['blue', 'orange'])\nax.pie([3, 4, 5, 6, 7], colors=['blue', 'orange'])\n\n# Set the color of the histogram elements\nax.hist([2, 3, 4, 5, 6], bins=5, color='blue')\nax.hist([3, 4, 5, 6, 7], bins=5, color='orange')\n\n# Set the color of the boxplot elements\nax.boxplot([2, 3, 4, 5, 6], vert=False, patch_artist=True, boxprops=dict(facecolor='blue'))\nax.boxplot([3, 4, 5, 6, 7], vert=False, patch_artist=True, boxprops=dict(facecolor='orange'))\n\n# Set the color of the violin plot elements\nax.violinplot([2, 3, 4, 5, 6], showmeans=True, showmedians=True, showextrema=True, points=100, bw_method=None, gridsize=None, cut=3, widths=None, showfliers=True, quantiles=None, vert=True, patch_artist=True, inner='quartile', bw_method=None, gridsize=None, cut=3, widths=None, showfliers=True, quantiles=None, vert=True, patch_artist=True, inner='quartile', showmeans=True, showmedians=True, showextrema=True, points=100, bw_method=None, gridsize=None, cut=3, widths=None, showfliers=True, quantiles=None, vert=True, patch_artist=True, inner='quartile')\n\n# Set the color of the heatmap elements\nax.imshow([[2, 3, 4, 5, 6], [3, 4, 5, 6, 7]], cmap='Blues')\nax.imshow([[3, 4, 5, 6, 7], [4, 5, 6, 7, 8]], cmap='Oranges')\n\n# Set the color of the contour plot elements\nx = np.linspace(-5, 5, 100)\ny = np.linspace(-5, 5, 100)\nX, Y = np.meshgrid(x, y)\nZ = np.sin(np.sqrt(X**2 + Y**2))\nCS = ax.contour(X, Y, Z, levels=10, colors='k')\nCS.clabel(fmt='%2.1f', use_clabeltext=True)\n\n# Set the color of the contourf plot elements\nCS = ax.contourf(X, Y, Z, levels=10, cmap='Blues')\nCS = ax.contourf(X, Y, Z, levels=10, cmap='Oranges')\n\n# Set the color of the streamplot elements\nax.streamplot(X, Y, Z, Z, color='b')\n\n# Set the color of the quiver plot elements\nU = np.cos(X)\nV = np.sin(Y)\nax.quiver(X, Y, U, V, color='r')\n\n# Set the color of the polar plot elements\nax.polar()\n\n# Set the color of the scatter plot elements\nax.scatter([1, 2, 3, 4, 5], [2, 3, 4, 5, 6], color='blue')\nax.scatter([1, 2, 3, 4, 5], [3, 4, 5, 6, 7], color='orange')\n\n# Set the color of the bar chart elements\nax.bar([1, 2, 3, 4, 5], [2, 3, 4, 5, 6], color='blue')\nax.bar([1, 2, 3, 4, 5], [3, 4, 5, 6, 7], color='orange')\n\n# Set the color of the pie chart elements\nax.pie([2, 3, 4, 5, 6], colors=['blue', 'orange'])\nax.pie([3, 4, 5, 6, 7], colors=['blue', 'orange'])\n\n# Set the color of the histogram elements\nax.hist([2, 3, 4, 5, 6], bins=5, color='blue')\nax.hist([3, 4, 5, 6, 7], bins=5, color='orange')\n\n# Set the color of the boxplot elements\nax.boxplot([2, 3, 4, 5, 6], vert=False, patch_artist=True, boxprops=dict(facecolor='blue'))\nax.boxplot([3, 4, 5, 6, 7], vert=False, patch_artist=True, boxprops=dict(facecolor='orange'))\n\n# Set the color of the violin plot elements\nax.violinplot([2, 3, 4, 5, 6], showmeans=True, showmedians=True, showextrema=True, points=100, bw_method=None, gridsize=None, cut=3, widths=None, showfliers=True, quantiles=None, vert=True, patch_artist=True, inner='quartile', bw_method=None, gridsize=None, cut=3, widths=None, showfliers=True, quantiles=None, vert=True, patch_artist=True, inner='quartile', showmeans=True, showmedians=True, showextrema=True, points=100, bw_method=None, gridsize=None, cut=3, widths=None, showfliers=True, quantiles=None, vert=True, patch_artist=True, inner='quartile')\n\n# Set the color of the heatmap elements\nax.imshow([[2, 3, 4, 5, 6], [3, 4, 5, 6, 7]], cmap='Blues')\nax.imshow([[3, 4, 5, 6, 7], [4, 5, 6, 7, 8]], cmap='Oranges')\n\n# Set the color of the contour plot elements\nx = np.linspace(-5, 5, 100)\ny = np.linspace(-5, 5, 100)\nX, Y = np.meshgrid(x, y)\nZ = np.sin(np.sqrt(X**2 + Y**2))\nCS = ax.contour(X, Y, Z, levels=10, colors='k')\nCS.clabel(fmt='%2.1f', use_clabeltext=True)\n\n# Set the color of the contourf plot elements\nCS = ax.contourf(X, Y, Z, levels=10, cmap='Blues')\nCS = ax.contourf(X, Y, Z, levels=10, cmap='Oranges')\n\n# Set the color of the streamplot elements\nax.streamplot(X, Y, Z, Z, color='b')\n\n# Set the color of the quiver plot elements\nU = np.cos(X)\nV = np.sin(Y)\nax.quiver(X, Y, U, V, color='r')\n\n# Set the color of the polar plot elements\nax.polar()\n\n# Set the color of the scatter plot elements\nax.scatter([1, 2, 3, 4, 5], [2, 3, 4, 5, 6], color='blue')\nax.scatter([1, 2, 3, 4, 5], [3, 4, 5, 6, 7], color='orange')\n\n# Set the color of the bar chart elements\nax.bar([1, 2, 3, 4, 5], [2, 3, 4, 5"}
{"file": "dataset/ori_500/violin_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Comparison of Scores with and without Memory')\n\n# Set the x-axis label\nax.set_xlabel('Efficiency')\n\n# Set the y-axis label\nax.set_ylabel('Score')\n\n# Set the x-ticks\nax.set_xticks([0.25, 0.75])\n\n# Set the x-tick labels\nax.set_xticklabels(['Without Memory', 'With Memory'])\n\n# Set the y-ticks\nax.set_yticks([0.2, 0.4, 0.6, 0.8, 1.0])\n\n# Set the y-tick labels\nax.set_yticklabels(['0.2', '0.4', '0.6', '0.8', '1.0'])\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.25, 0.8), 0.5, 0.2, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.25, 0.6), 0.5, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.25, 0.4), 0.5, 0.2, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.25, 0.2), 0.5, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.75, 0.8), 0.5, 0.2, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.75, 0.6), 0.5, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.75, 0.4), 0.5, 0.2, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.75, 0.2), 0.5, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.25, 0.8), 0.5, 0.2, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.25, 0.6), 0.5, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.25, 0.4), 0.5, 0.2, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.25, 0.2), 0.5, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.75, 0.8), 0.5, 0.2, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.75, 0.6), 0.5, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.75, 0.4), 0.5, 0.2, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.75, 0.2), 0.5, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.25, 0.8), 0.5, 0.2, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.25, 0.6), 0.5, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.25, 0.4), 0.5, 0.2, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.25, 0.2), 0.5, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.75, 0.8), 0.5, 0.2, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.75, 0.6), 0.5, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.75, 0.4), 0.5, 0.2, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.75, 0.2), 0.5, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.25, 0.8), 0.5, 0.2, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.25, 0.6), 0.5, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.25, 0.4), 0.5, 0.2, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.25, 0.2), 0.5, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.75, 0.8), 0.5, 0.2, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.75, 0.6), 0.5, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.75, 0.4), 0.5, 0.2, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.75, 0.2), 0.5, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.25, 0.8), 0.5, 0.2, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.25, 0.6), 0.5, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.25, 0.4), 0.5, 0.2, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.25, 0.2), 0.5, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.75, 0.8), 0.5, 0.2, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.75, 0.6), 0.5, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.75, 0.4), 0.5, 0.2, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.75, 0.2), 0.5, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.25, 0.8), 0.5, 0.2, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.25, 0.6), 0.5, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.25, 0.4), 0.5, 0.2, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.25, 0.2), 0.5, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.75, 0.8), 0.5, 0.2, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.75, 0.6), 0.5, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.75, 0.4), 0.5, 0.2, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.75, 0.2), 0.5, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.25, 0.8), 0.5, 0.2, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.25, 0.6), 0.5, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.25, 0.4), 0.5, 0.2, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.25, 0.2), 0.5, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.75, 0.8), 0.5, 0.2, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.75, 0.6), 0.5, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.75, 0.4), 0.5, 0.2, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.75, 0.2), 0.5, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.25, 0.8), 0.5, 0.2, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.25, 0.6), 0.5, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.25, 0.4), 0.5, 0.2, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.25, 0.2), 0.5, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.75, 0.8), 0.5, 0.2, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.75, 0.6), 0.5, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.75, 0.4), 0.5, 0.2, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.75, 0.2), 0.5, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.25, 0.8), 0.5, 0.2, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.25, 0.6), 0.5, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.25, 0.4), 0.5, 0.2, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.25, 0.2), 0.5, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.75, 0.8), 0.5, 0.2, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.75, 0.6), 0.5, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.75, 0.4), 0.5, 0.2, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.75, 0.2), 0.5, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.25, 0.8), 0.5, 0.2, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.25, 0.6), 0.5, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.25, 0.4), 0.5, 0.2, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.25, 0.2), 0.5, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.75, 0.8), 0.5, 0.2, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.75, 0.6), 0.5, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.75, 0.4), 0.5, 0.2, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.75, 0.2), 0.5, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.25, 0.8), 0.5, 0.2, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.25, 0.6), 0.5, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.25, 0.4), 0.5, 0.2, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.25, 0.2), 0.5, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.75, 0.8), 0.5, 0.2, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.75, 0.6), 0.5, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.75, 0.4), 0.5, 0.2, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.75, 0.2), 0.5, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.25, 0.8), 0.5, 0.2, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.25, 0.6), 0.5, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.25, 0.4), 0.5, 0.2, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.25, 0.2), 0.5, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.75, 0.8), 0.5, 0.2, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.75, 0.6), 0.5, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.75, 0.4), 0.5, 0.2, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.75, 0.2), 0.5, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.25, 0.8), 0.5, 0.2, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.25, 0.6), 0.5, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.25, 0.4), 0.5, 0.2, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.25, 0.2), 0.5, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.75, 0.8), 0.5, 0.2, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.75, 0.6), 0.5, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.75, 0.4), 0.5, 0.2, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.75, 0.2), 0.5, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.25, 0.8), 0.5, 0.2, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.25, 0.6), 0.5, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.25, 0.4), 0.5, 0.2, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.25, 0.2), 0.5, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt"}
{"file": "dataset/ori_500/violin_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Define the data\nefficiency = np.array([0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9])\ncomfort = np.array([0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8])\nsafety = np.array([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7])\n\n# Plot the data\nax.plot(efficiency, 'r-', label='Without Memory')\nax.plot(comfort, 'b-', label='With Memory')\nax.plot(safety, 'g-', label='Safety')\n\n# Set the title and labels\nax.set_title('Vehicle Performance Metrics')\nax.set_xlabel('Time (seconds)')\nax.set_ylabel('Score')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/violin_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 4.0))\n\n# Set the title of the plot\nax.set_title('Scoring Evaluation')\n\n# Set the x-axis label\nax.set_xlabel('Player')\n\n# Set the y-axis label\nax.set_ylabel('Score')\n\n# Set the x-ticks\nax.set_xticks([1, 2, 3, 4, 5])\n\n# Set the y-limits\nax.set_ylim(0, 10)\n\n# Set the color bar\ncbar = fig.colorbar(ax.images[0])\ncbar.set_label('GPT-4V(Version) / Gemini')\n\n# Set the color map\ncmap = 'Greens'\n\n# Set the data\ndata = [[0.9, 0.8, 0.7, 0.6, 0.5],\n        [0.8, 0.7, 0.6, 0.5, 0.4],\n        [0.7, 0.6, 0.5, 0.4, 0.3],\n        [0.6, 0.5, 0.4, 0.3, 0.2],\n        [0.5, 0.4, 0.3, 0.2, 0.1]]\n\n# Plot the data\nim = ax.imshow(data, cmap=cmap)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/violin_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(5.0, 5.0))\n\n# Set the background color of the plot\nax.set_facecolor('white')\n\n# Set the title of the plot\nax.set_title('Accuracy Comparison')\n\n# Set the x-axis label\nax.set_xlabel('Model')\n\n# Set the y-axis label\nax.set_ylabel('Accuracy')\n\n# Set the x-ticks\nax.set_xticks([0, 1, 2])\nax.set_xticklabels(['jTrans', 'PalmTree', 'CLAP'])\n\n# Set the y-ticks\nax.set_yticks([0.2, 0.4, 0.6, 0.8, 1.0])\n\n# Set the grid\nax.grid(True)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/violin_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Define the data for the plot\nx = np.linspace(0, 10, 100)\ny1 = np.sin(x)\ny2 = np.cos(x)\n\n# Plot the data\nax.plot(x, y1, label='Teacher-Style')\nax.plot(x, y2, label='Standardize')\n\n# Add stars at specific points\nstars = [(2, 0.5), (4, 0.7), (6, 0.3), (8, 0.9)]\nfor star in stars:\n    ax.plot(star[0], star[1], 'y*')\n\n# Set the title and labels\nax.set_title('Student Performance')\nax.set_xlabel('Time')\nax.set_ylabel('Performance')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/violin_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Define the data for the first plot\nx1 = np.linspace(0, 10, 100)\ny1 = np.sin(x1)\n\n# Define the data for the second plot\nx2 = np.linspace(0, 10, 100)\ny2 = np.cos(x2)\n\n# Plot the first plot\nax.plot(x1, y1, 'r-')\n\n# Plot the second plot\nax.plot(x2, y2, 'b-')\n\n# Set the title of the plot\nax.set_title('Sine and Cosine Waves')\n\n# Set the x-axis label\nax.set_xlabel('Time (s)')\n\n# Set the y-axis label\nax.set_ylabel('Amplitude')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/violin_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the first graph\nx1 = [2, 4, 6, 8, 10]\ny1 = [163, 201, 176, 159, 97]\ncolors1 = ['skyblue', 'lightcoral', 'skyblue', 'lightcoral', 'skyblue']\nlabels1 = ['Group l0', 'AGIS']\n\n# Data for the second graph\nx2 = [2, 4, 6, 8, 10]\ny2 = [163, 201, 176, 159, 97]\ncolors2 = ['skyblue', 'lightcoral', 'skyblue', 'lightcoral', 'skyblue']\nlabels2 = ['Group l0', 'AGIS']\n\nfig, axs = plt.subplots(2, 1, figsize=(8.0, 8.0))\n\n# First graph\naxs[0].bar(x1, y1, color=colors1)\naxs[0].set_title('% Decrease in Test MSE vs. FLAM-GL')\naxs[0].set_xlabel('Number of Features')\naxs[0].set_ylabel('% Decrease')\naxs[0].legend(labels1)\n\n# Second graph\naxs[1].bar(x2, y2, color=colors2)\naxs[1].set_title('% Decrease in Test MSE vs. EBM-RS')\naxs[1].set_xlabel('Number of Features')\naxs[1].set_ylabel('% Decrease')\naxs[1].legend(labels2)\n\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/violin_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Define the data\nx = [0.88, 0.85, 0.79, 0.67, 0.57]\ny = [0.18, 0.19, 0.19, 0.16, 0.16]\ncolors = ['blue', 'orange', 'green', 'red', 'purple']\nsizes = [0.88, 0.85, 0.79, 0.67, 0.57]\n\n# Plot the data\nfor i in range(len(x)):\n    ax.add_patch(plt.Circle((x[i], y[i]), sizes[i], color=colors[i]))\n    ax.text(x[i], y[i], f'{sizes[i]:.2f}', ha='center', va='center')\n\n# Set the limits of the plot\nax.set_xlim(0, 1)\nax.set_ylim(0, 1)\n\n# Add a color bar\nsm = plt.cm.ScalarMappable(cmap='viridis', norm=plt.Normalize(vmin=min(sizes), vmax=max(sizes)))\nsm._A = []\ncbar = fig.colorbar(sm)\n\n# Add text annotations\nax.text(0.1, 0.9, 'KCC', fontsize=14, fontweight='bold')\nax.text(0.1, 0.8, 'Pearson R', fontsize=14, fontweight='bold')\nax.text(0.1, 0.7, 'EER (%)', fontsize=14, fontweight='bold')\n\n# Add a horizontal line\nax.axhline(y=0.5, color='black', linestyle='-')\n\n# Add a vertical line\nax.axvline(x=0.5, color='black', linestyle='-')\n\n# Set the title\nax.set_title('Decimated Sampling Rate')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/violin_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(12.0, 8.0))\n\n# Create a bar chart\nax.bar([1, 2, 3], [50, 60, 70], color='blue')\n\n# Set the title of the chart\nax.set_title('Distribution of Grades: Class 1')\n\n# Set the x-axis label\nax.set_xlabel('Grades')\n\n# Set the y-axis label\nax.set_ylabel('Number of Students')\n\n# Display the plot\nplt.show()\n```"}
