{"file": "dataset/ori_500/3d_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the plot\nx = [0.2, 0.4, 0.6, 0.8, 1.0]\ny_targets = [1.2, 1.0, 0.8, 0.6, 0.4]\ny_predictions = [1.3, 1.1, 0.9, 0.7, 0.5]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(7.0, 7.0))\n\n# Plot the data\nax.plot(x, y_targets, 'o-', label='Targets')\nax.plot(x, y_predictions, 's-', label='Predictions')\n\n# Set the title and labels\nax.set_title('Targets vs Predictions')\nax.set_xlabel('Time')\nax.set_ylabel('Value')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data\nheights = [0.5, 1.0, 1.5, 2.0, 2.5, 3.0, 3.5]\nwidths = [0.5, 1.0, 1.5, 2.0, 2.5, 3.0, 3.5]\ncounts = [4, 4, 4, 4, 4, 4, 4]\n\n# Create a 3D scatter plot\nfig = plt.figure(figsize=(8.0, 6.0))\nax = fig.add_subplot(111, projection='3d')\n\n# Scatter plot\nscatter = ax.scatter(heights, widths, counts, c='r', marker='o')\n\n# Set labels\nax.set_xlabel('Height')\nax.set_ylabel('Width')\nax.set_zlabel('Count')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_11.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Define the data for the plot\nx = np.linspace(-5, 5, 100)\ny = np.linspace(-5, 5, 100)\nX, Y = np.meshgrid(x, y)\nZ = np.sin(np.sqrt(X**2 + Y**2))\n\n# Plot the data\nax.contourf(X, Y, Z, cmap='viridis')\n\n# Set the limits of the plot\nax.set_xlim(-5, 5)\nax.set_ylim(-5, 5)\n\n# Set the labels of the axes\nax.set_xlabel('X')\nax.set_ylabel('Y')\n\n# Set the title of the plot\nax.set_title('Contour Plot of a Function')\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/3d_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Define the data points\nx = [-4, -2, 0, 2, 4]\ny = [10, 15, 20, 25, 30]\n\n# Plot the data points\nax.plot(x, y, 'ro')  # 'ro' means red circles\n\n# Set the title and labels\nax.set_title('Volume vs Temperature')\nax.set_xlabel('Temperature (\u00b0C)')\nax.set_ylabel('Volume (L)')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nyears = [2010, 2012, 2014, 2016, 2018]\nprivate_schools = [0.75, 0.75, 0.75, 0.75, 0.75]\npublic_schools = [0.3, 0.3, 0.3, 0.3, 0.3]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data\nax.bar(years, private_schools, color='orange', label='Private Schools')\nax.bar(years, public_schools, bottom=private_schools, color='blue', label='Public Schools')\n\n# Set the title and labels\nax.set_title('Student to Teacher Ratio by School Type')\nax.set_xlabel('Year')\nax.set_ylabel('Student to Teacher Ratio')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Define the data\nx = np.linspace(0, 10, 100)\ny = np.sin(x)\n\n# Plot the data\nax.plot(x, y)\n\n# Set the title and labels\nax.set_title('Sine Wave')\nax.set_xlabel('X-axis')\nax.set_ylabel('Y-axis')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the first subplot\nyears = ['2010', '2012', '2014', '2016', '2018']\ninvestment = [3, 5, 7, 9, 11]\nsector = ['Al', 'CS']\n\n# Data for the second subplot\ntime_since_introduction = np.arange(0, 11, 2)\ntechnology_level = np.arange(0, 11, 2)\nadoption_rate = np.random.rand(5, 5)\n\n# Create subplots\nfig, axs = plt.subplots(1, 2, figsize=(10.0, 8.0))\n\n# First subplot: Investment over time\naxs[0].bar(years, investment, color='green')\naxs[0].set_xlabel('Year')\naxs[0].set_ylabel('Investment (Billion USD)')\naxs[0].set_title('Investment Over Time')\n\n# Second subplot: Adoption rate by technology level and time since introduction\ncmap = plt.cm.get_cmap('viridis')\nim = axs[1].imshow(adoption_rate, cmap=cmap, interpolation='nearest')\naxs[1].set_xlabel('Time Since Introduction (Years)')\naxs[1].set_ylabel('Technology Level')\naxs[1].set_title('Adoption Rate by Technology Level and Time Since Introduction')\ncbar = fig.colorbar(im, ax=axs[1])\n\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_2.pdf", "response": "```python\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\n\n# Define the function f(x)\ndef f(x):\n    return x**2 - 2*x + 1\n\n# Create a grid of x values\nx = np.linspace(-1, 1, 100)\n\n# Calculate the corresponding y values\ny = f(x)\n\n# Create a figure with two subplots\nfig, axs = plt.subplots(1, 2, figsize=(10.0, 7.0), subplot_kw={'projection': '3d'})\n\n# Plot the function f(x) in the first subplot\naxs[0].plot(x, y, 'r')\naxs[0].set_xlabel('x')\naxs[0].set_ylabel('f(x)')\naxs[0].set_title('f(x)')\n\n# Plot the solution in the second subplot\naxs[1].plot(x, y, 'b')\naxs[1].set_xlabel('x')\naxs[1].set_ylabel('solution')\naxs[1].set_title('solution')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_3.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom mpl_toolkits.mplot3d import Axes3D\n\n# Create a figure and a 3D subplot\nfig = plt.figure(figsize=(10.0, 6.0))\nax = fig.add_subplot(111, projection='3d')\n\n# Define the data for the plot\nx = np.linspace(1, 6, 10)\ny = np.linspace(1, 6, 10)\nx, y = np.meshgrid(x, y)\nz = np.sin(np.sqrt(x**2 + y**2))\n\n# Plot the surface\nsurf = ax.plot_surface(x, y, z, cmap='viridis')\n\n# Add color bar which maps values to colors\nfig.colorbar(surf, shrink=0.5, aspect=5)\n\n# Set labels\nax.set_xlabel('K')\nax.set_ylabel('T')\nax.set_zlabel('Accuracy (%)')\n\n# Display the plot\nplt.show()"}
{"file": "dataset/ori_500/3d_4.pdf", "response": "```python\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\n\n# Define the function for the surface\ndef f(x, y):\n    return np.sin(np.sqrt(x**2 + y**2))\n\n# Create a grid of points\nx = np.linspace(-100, 100, 100)\ny = np.linspace(-100, 100, 100)\nx, y = np.meshgrid(x, y)\n\n# Calculate the z values\nz = f(x, y)\n\n# Create a figure and a 3D subplot\nfig, axs = plt.subplots(2, 2, figsize=(15.0, 10.0), subplot_kw={'projection': '3d'})\n\n# Plot the surfaces\naxs[0, 0].plot_surface(x, y, z, cmap='viridis')\naxs[0, 1].plot_surface(x, y, z, cmap='plasma')\naxs[1, 0].plot_surface(x, y, z, cmap='inferno')\naxs[1, 1].plot_surface(x, y, z, cmap='magma')\n\n# Set labels\naxs[0, 0].set_xlabel('m')\naxs[0, 0].set_ylabel('n')\naxs[0, 0].set_zlabel('FREEDOM')\naxs[0, 1].set_xlabel('m')\naxs[0, 1].set_ylabel('n')\naxs[0, 1].set_zlabel('FREEDOM')\naxs[1, 0].set_xlabel('m')\naxs[1, 0].set_ylabel('n')\naxs[1, 0].set_zlabel('FREEDOM')\naxs[1, 1].set_xlabel('m')\naxs[1, 1].set_ylabel('n')\naxs[1, 1].set_zlabel('FREEDOM')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_5.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\nfig, ax = plt.subplots(figsize=(7.0, 7.0))\nax.plot([0.4, 0.6], [0.2, 0.4], 'o-')\nax.set_xlim(0, 1)\nax.set_ylim(0, 1)\nplt.show()"}
{"file": "dataset/ori_500/3d_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a grid of points\nx = np.linspace(-4, 4, 100)\ny = np.linspace(-2, 2, 100)\nX, Y = np.meshgrid(x, y)\n\n# Define the function\nZ = np.sin(np.sqrt(X**2 + Y**2))\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Plot the surface\nsurf = ax.plot_surface(X, Y, Z, cmap='coolwarm')\n\n# Add a color bar which maps values to colors\nfig.colorbar(surf, shrink=0.5, aspect=5)\n\n# Set labels\nax.set_xlabel('Time')\nax.set_ylabel('Bus')\nax.set_zlabel('Value')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Define the data\nx = np.array([1, 2, 3, 4])\ny = np.array([6, 7, 8, 9])\n\n# Plot the data\nax.bar(x, y, color='blue')\n\n# Set the title and labels\nax.set_title('Bar Chart')\nax.set_xlabel('X-axis')\nax.set_ylabel('Y-axis')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Define the data points\nx = np.array([10, 20, 30, 40, 50])\ny = np.array([-20, -30, -40, -50, -60])\n\n# Plot the data points\nax.plot(x, y, 'ro')\n\n# Set the labels and title\nax.set_xlabel('Age')\nax.set_ylabel('Debt')\nax.set_title('Debt vs Age')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Define the data\ntime = np.linspace(10, 90, 10)\ntemperature = np.array([15, 20, 25, 30, 35, 40, 45, 50, 55, 60])\ndepth = np.array([-20, -20, -20, -20, -20, -20, -20, -20, -20, -20])\n\n# Plot the data\nax.plot(time, depth, label='Depth')\nax.plot(time, temperature, label='Temperature')\n\n# Set the labels and title\nax.set_xlabel('Time (s)')\nax.set_ylabel('Depth (m)')\nax.set_title('Depth vs Time and Temperature')\n\n# Show the legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Define the data for the histograms\nx = np.linspace(-20, 20, 100)\ny_out = np.exp(-(x**2)/2)\ny_in = np.exp(-(x**2)/2)\n\n# Plot the histograms\nax.plot(x, y_out, 'b-', label='Out')\nax.plot(x, y_in, 'r-', label='In')\n\n# Set the limits of the x-axis\nax.set_xlim(-20, 20)\n\n# Set the title and labels\nax.set_title('Histograms of Out and In')\nax.set_xlabel('LR Test')\nax.set_ylabel('Density')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(7.0, 5.0))\n\n# Define the data points\nx = [150, 200, 250, 300, 350, 400]\ny_low = [-2, -3, -4, -5, -6, -7]\ny_middle = [-2, -3, -4, -5, -6, -7]\ny_high = [-2, -3, -4, -5, -6, -7]\n\n# Plot the data points\nax.plot(x, y_low, 'bo', label='Low')\nax.plot(x, y_middle, 'o', color='orange', label='Middle')\nax.plot(x, y_high, 'go', label='High')\n\n# Add a shaded region\nax.fill_between(x, -2, -4, color='gray', alpha=0.5)\n\n# Add a line\nax.plot(x, [-2]*len(x), 'k-', lw=2)\n\n# Add a legend\nax.legend()\n\n# Set the title and labels\nax.set_title('Severity')\nax.set_xlabel('Average Tracked ORB Feature Number')\nax.set_ylabel('Log (ATE RMSE)')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(7.0, 5.0))\n\n# Define the data\nx = [-3.0, -2.5, -2.0, -1.5, -1.0, -0.5, 0.0]\ny1 = [8, 4, 2, 1]\ny2 = [8, 4, 2, 1]\ny3 = [8, 4, 2, 1]\ny4 = [8, 4, 2, 1]\n\n# Plot the data\nax.plot(x, y1, 'b', label='8x')\nax.plot(x, y2, 'o', label='4x')\nax.plot(x, y3, 'g', label='2x')\nax.plot(x, y4, 'r', label='1x')\n\n# Add a legend\nax.legend()\n\n# Set the title and labels\nax.set_title('Log (ATE RMSE)')\nax.set_xlabel('Log (Depth L1)')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Define the data\nx = [0.0, 0.2, 0.4, 0.6, 0.8]\ny1 = [5, 4, 3, 2, 1]\ny2 = [4, 3, 2, 1, 0]\ny3 = [3, 2, 1, 0, 5]\ny4 = [2, 1, 0, 5, 4]\n\n# Plot the data\nax.plot(x, y1, color='red', label='Benign')\nax.plot(x, y2, color='green', label='BadNets')\nax.plot(x, y3, color='darkred', label='Benign KDE')\nax.plot(x, y4, color='darkgreen', label='BadNets KDE')\n\n# Set the title and labels\nax.set_title('T-test p-value = 0.0000')\nax.set_xlabel('Average Top-5 Persistence of 1D')\nax.set_ylabel('Density')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_13.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 4.0))\n\n# Define the data\nx = np.arange(1, 6)\ny_snacks = [0.75, 0.8, 0.7, 0.75, 0.8]\ny_nav = [0.65, 0.7, 0.65, 0.7, 0.75]\ny_qsel = [0.6, 0.65, 0.6, 0.65, 0.7]\ny_objcount = [0.55, 0.6, 0.55, 0.6, 0.65]\n\n# Plot the data\nax.plot(x, y_snacks, label='snacks')\nax.plot(x, y_nav, label='navigate')\nax.plot(x, y_qsel, label='question_selection')\nax.plot(x, y_objcount, label='object_counting')\n\n# Set the title and labels\nax.set_title('Comparison of APO & APO-APEs (GPT-3 5-Turbo)')\nax.set_xlabel('Tasks')\nax.set_ylabel('Scores')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/CB_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nx = [0.0, 0.2, 0.4, 0.6, 0.8, 1.0, 1.2, 1.4]\ny1 = [100, 90, 80, 70, 60, 50, 40, 30]\ny2 = [110, 100, 90, 80, 70, 60, 50, 40]\n\n# Plotting\nplt.figure(figsize=(10.0, 6.0))\nplt.plot(x, y1, 'r-', label='random')\nplt.plot(x, y2, 'b-', label='H-wand - centers-cos')\nplt.xlabel('norm size')\nplt.ylabel('count')\nplt.title('summarization_xsum:temperature=0.3,device=cuda')\nplt.legend()\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the pie chart\nlabels = ['Incomparable', 'Different', 'Same']\nsizes = [73.3, 23.7, 3.0]\ncolors = ['green', 'blue', 'yellow']\n\n# Create a pie chart\nfig, ax = plt.subplots(figsize=(8.0, 4.0))\nax.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%', startangle=90)\n\n# Equal aspect ratio ensures that pie is drawn as a circle.\nax.axis('equal')  \n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_16.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(7.0, 5.0))\n\n# Define the data\ntime_cost_seac = [46, 47, 48, 49, 50]\ntime_cost_sac = [47, 48, 49, 50, 51]\nalgorithms = ['SEAC', 'SAC(20Hz)']\n\n# Plot the data\nax.bar(algorithms, time_cost_seac, color='green')\nax.bar(algorithms, time_cost_sac, bottom=time_cost_seac, color='red')\n\n# Set the title and labels\nax.set_title('Time Cost (Seconds)')\nax.set_xlabel('Algorithms')\nax.set_ylabel('Time Cost (Seconds)')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_17.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the first graph\nx = ['CodeBERT', 'ChatGPT-3.5', 'ChatGPT-4.0', 'CodeAgent']\ny = [63.64, 80.08, 84.27, 90.11]\n\n# Data for the second graph\nx_f1 = ['CodeBERT', 'ChatGPT-3.5', 'ChatGPT-4.0', 'CodeAgent']\ny_f1 = [75.00, 87.20, 88.12, 93.89]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 4.0))\n\n# Plot the first graph\nax.plot(x, y, marker='o', linestyle='-', color='blue')\nax.set_title('Average Recall Scores by Method')\n\n# Plot the second graph\nax2 = ax.twinx()\nax2.plot(x_f1, y_f1, marker='o', linestyle='-', color='red')\nax2.set_title('Average F1 Scores by Method')\n\n# Set the x-axis labels\nax.set_xlabel('Method')\nax2.set_xlabel('Method')\n\n# Set the y-axis labels\nax.set_ylabel('Recall Score')\nax2.set_ylabel('F1 Score')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_18.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Define the data\nx = np.array([4, 8, 12, 16, 20, 24, 28, 32])\ny1 = np.array([84, 86, 88, 90, 92, 94, 96, 98])\ny2 = np.array([84, 86, 88, 90, 92, 94, 96, 98])\n\n# Plot the data\nax.plot(x, y1, 'b-', label='Trained w Few-Shot Ex')\nax.plot(x, y2, 'r-', label='Def Deduce+Ex Gen')\n\n# Add a legend\nax.legend()\n\n# Set the title and labels\nax.set_title('Micro F1')\nax.set_xlabel('Few-Shot K')\nax.set_ylabel('Micro F1')\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/CB_19.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data points\nx = [60, 62, 65, 70, 75]\ny_cars = [60, 62, 65, 70, 75]\ny_trucks = [80, 80, 80, 80, 80]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(7.0, 7.0))\n\n# Plot the data\nax.plot(x, y_cars, 'ro-', label='Cars')\nax.plot(x, y_trucks, 'bo-', label='Trucks')\n\n# Set the title and labels\nax.set_title('Vehicle Efficiency vs Vehicle Parameter Size')\nax.set_xlabel('Vehicle Parameter Size (units)')\nax.set_ylabel('Efficiency (%)')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_2.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data\nmodels = ['GPT-2', 'Llama 2 7B', 'Llama 2 70B', 'Mixtral 8x7B', 'GPT-3.5', 'GPT-4']\nsimple_trend = [0, 6, 16, 20, 12, 10]\nsimple = [0, 6, 12, 20, 12, 10]\ncomplex_ = [0, 4, 8, 18, 26, 20]\ncode = [0, 4, 8, 18, 26, 20]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Plot the data\nax.plot(models, simple_trend, label='Simple Trend', color='magenta')\nax.plot(models, simple, label='Simple', color='orange')\nax.plot(models, complex_, label='Complex', color='pink')\nax.plot(models, code, label='Code', color='lightgrey')\n\n# Set the title and labels\nax.set_title('Encoding/Decoding Schelling Points by Model')\nax.set_xlabel('Model')\nax.set_ylabel('Success Rate (%)')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/CB_20.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Calibration Curve')\n\n# Set the x-axis label\nax.set_xlabel('Reduced Probability')\n\n# Set the y-axis label\nax.set_ylabel('Fraction of Positives')\n\n# Set the x-axis limits\nax.set_xlim(0, 1)\n\n# Set the y-axis limits\nax.set_ylim(0, 1)\n\n# Draw a line graph\nax.plot([0, 0.25, 0.5, 0.75, 1], [0.05, 0.3, 0.45, 0.6, 0.95], 'b-')\n\n# Draw a horizontal line\nax.axhline(y=0.5, color='r', linestyle='-')\n\n# Draw a vertical line\nax.axvline(x=0.5, color='g', linestyle='-')\n\n# Draw a scatter plot\nax.scatter([0, 0.25, 0.5, 0.75, 1], [0.05, 0.3, 0.45, 0.6, 0.95], color='orange')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_21.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 4.0))\n\n# Plot the histogram\nax.hist([1, 2, 3, 4], bins=5, color='blue')\n\n# Set the title and labels\nax.set_title('Histogram of Data')\nax.set_xlabel('Data')\nax.set_ylabel('Frequency')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_22.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the first plot\nx1 = [1600, 1625, 1650, 1675, 1700, 1725]\ny1 = [0.0025, 0.0025, 0.0025, 0.0025, 0.0025, 0.0025]\n\n# Data for the second plot\nx2 = [205, 210, 215]\ny2 = [0.125, 0.125, 0.125]\n\n# Data for the third plot\nx3 = [1340, 1360, 1380, 1400, 1420, 1440, 1460]\ny3 = [0.0025, 0.0025, 0.0025, 0.0025, 0.0025, 0.0025, 0.0025]\n\n# Data for the fourth plot\nx4 = [48, 49, 50, 51, 52]\ny4 = [0.06, 0.06, 0.06, 0.06, 0.06]\n\n# Create a figure and a set of subplots\nfig, axs = plt.subplots(2, 2, figsize=(10.0, 8.0))\n\n# Plot the first subplot\naxs[0, 0].bar(x1, y1, color='blue')\naxs[0, 0].set_title('Total')\naxs[0, 0].set_xlabel('Daily reward (Ether)')\naxs[0, 0].set_ylabel('Probability')\n\n# Plot the second subplot\naxs[0, 1].bar(x2, y2, color='red')\naxs[0, 1].set_title('Proposer')\naxs[0, 1].set_xlabel('Daily reward (Ether)')\naxs[0, 1].set_ylabel('Probability')\n\n# Plot the third subplot\naxs[1, 0].bar(x3, y3, color='green')\naxs[1, 0].set_title('Attester')\naxs[1, 0].set_xlabel('Daily reward (Ether)')\naxs[1, 0].set_ylabel('Probability')\n\n# Plot the fourth subplot\naxs[1, 1].bar(x4, y4, color='yellow')\naxs[1, 1].set_title('Sync committee member')\naxs[1, 1].set_xlabel('Daily reward (Ether)')\naxs[1, 1].set_ylabel('Probability')\n\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_23.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data points\nx = [0, 50, 100, 150]\ny1 = [1.30, 1.27, 1.28, 1.29]\ny2 = [1.30, 1.27, 1.28, 1.29]\ny3 = [1.30, 1.27, 1.28, 1.29]\ny4 = [1.30, 1.27, 1.28, 1.29]\ny5 = [1.30, 1.27, 1.28, 1.29]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 8.0))\n\n# Plot the data\nax.plot(x, y1, 'r', label='LlaSMol Lite')\nax.plot(x, y2, 'b', label='LlaSMol 21B')\nax.plot(x, y3, 'r', label='LlaSMol FFN')\nax.plot(x, y4, 'b', label='LlaSMol Plus')\nax.plot(x, y5, 'r', label='LlaSMol Large')\n\n# Set the labels and title\nax.set_xlabel('Trainable Parameter Size (M)')\nax.set_ylabel('RMSE')\nax.set_title('RMSE vs Trainable Parameter Size')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_24.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Define the data\nx = [40, 60, 80, 100, 120, 140, 160]\ny = [0.03, 0.05, 0.07, 0.09, 0.11, 0.13, 0.15]\n\n# Plot the data\nax.plot(x, y, 'b.')\n\n# Set the title and labels\nax.set_title('Execution Duration Distribution')\nax.set_xlabel('Execution Duration (clock)')\nax.set_ylabel('Distribution')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_25.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nx = [15, 20, 30, 40, 50]\ny1 = [18, 14, 13, 12, 12]\ny2 = [5000, 4000, 3000, 2000, 1000]\ny3 = [0, 0, 0, 0, 0]\ny4 = [5, 5, 5, 5, 5]\n\n# Plotting\nplt.figure(figsize=(8.0, 5.0))\nplt.plot(x, y1, color='green', label='PetriRL')\nplt.plot(x, y2, color='orange', label='GAM')\nplt.plot(x, y3, color='blue', label='GIN')\nplt.plot(x, y4, color='pink', label='DGERD')\n\n# Setting labels and title\nplt.xlabel('Instance size (step)')\nplt.ylabel('Makespan (step)')\nplt.title('Comparison of Different Methods')\n\n# Show legend\nplt.legend()\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_26.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(7.0, 5.0))\n\n# Set the x-axis limits\nax.set_xlim(-1, 4)\n\n# Set the y-axis limits\nax.set_ylim(0, 4)\n\n# Set the x-axis label\nax.set_xlabel('Algorithms')\n\n# Set the y-axis label\nax.set_ylabel('Time Cost (Seconds)')\n\n# Set the title of the plot\nax.set_title('SEAC vs CTCO')\n\n# Define the data for SEAC\nseac_data = [3, 2, 1, 0, -1]\n\n# Define the data for CTCO\nctco_data = [2, 1, 0, -1, -2]\n\n# Plot the data for SEAC\nax.plot(seac_data, 'g-')\n\n# Plot the data for CTCO\nax.plot(ctco_data, 'r-')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_27.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Define the data\nbrands = ['Adidas', 'Nike', 'New Balance', 'Our Brand']\nprices = [90, 80, 70, 60]\nmedians = [95, 85, 75, 65]\n\n# Plot the data\nax.plot(brands, prices, marker='o')\nax.plot(brands, medians, marker='o')\n\n# Set the title and labels\nax.set_title('Brand Prices and Medians')\nax.set_xlabel('Brands')\nax.set_ylabel('Prices')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_28.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Define the data\nera_data = {\n    'Early 20th Century': [0.005, 0.015, 0.025, 0.035],\n    'Mid 20th Century': [0.005, 0.015, 0.025, 0.035],\n    'Turn of the Century': [0.005, 0.015, 0.025, 0.035]\n}\nyear_data = [1970, 1980, 1990, 2000]\n\n# Plot the data\nfor era, values in era_data.items():\n    ax.plot(year_data, values, label=era)\n\n# Set the title and labels\nax.set_title('Era')\nax.set_xlabel('Year')\nax.set_ylabel('Density')\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_29.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ntech = ['Nanotechnology', 'Quantum Computing', 'Cybersecurity', 'VR', 'Biotech', 'Robotics', 'IoT', 'Cloud Computing', 'Blockchain', 'Al']\npatents_2013 = [20, 10, 40, 30, 60, 70, 90, 50, 80, 120]\npatents_2022 = [90, 50, 150, 100, 180, 250, 400, 200, 300, 500]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Plot the data\nax.plot(tech, patents_2013, label='2013')\nax.plot(tech, patents_2022, label='2022')\n\n# Set the title and labels\nax.set_title('Patent Filings in 2013 and 2022')\nax.set_xlabel('Technology')\nax.set_ylabel('Number of Patents')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Set the x-axis limits\nax.set_xlim(0, 1)\n\n# Set the y-axis limits\nax.set_ylim(0, 1)\n\n# Set the x-axis ticks\nax.set_xticks([0, 0.25, 0.5, 0.75, 1])\n\n# Set the y-axis ticks\nax.set_yticks([0, 0.25, 0.5, 0.75, 1])\n\n# Set the x-axis label\nax.set_xlabel('Predicted probability')\n\n# Set the y-axis label\nax.set_ylabel('Fraction of positives')\n\n# Set the title\nax.set_title('Calibration curve')\n\n# Set the color of the calibration curve\ncalibration_curve_color = 'black'\n\n# Set the color of the data points\ndata_points_color = 'red'\n\n# Set the color of the bin edges\nbin_edges_color = 'orange'\n\n# Plot the calibration curve\nax.plot([0, 1], [0, 1], color=calibration_curve_color)\n\n# Plot the data points\nax.scatter([0.1, 0.3, 0.5, 0.7, 0.9], [0.1, 0.3, 0.5, 0.7, 0.9], color=data_points_color)\n\n# Plot the bin edges\nax.bar([0.1, 0.3, 0.5, 0.7, 0.9], [0.1, 0.3, 0.5, 0.7, 0.9], color=bin_edges_color)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_30.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nquarters = ['Q1', 'Q2', 'Q3', 'Q4']\nearnings_tesla = [350, 300, 250, 200]\nearnings_benz = [320, 270, 220, 170]\nearnings_byd = [310, 260, 210, 160]\nearnings_porsche = [330, 280, 230, 180]\n\n# Plotting\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\nax.plot(quarters, earnings_tesla, label='Tesla', color='green')\nax.plot(quarters, earnings_benz, label='Benz', color='orange')\nax.plot(quarters, earnings_byd, label='BYD', color='blue')\nax.plot(quarters, earnings_porsche, label='Porsche', color='purple')\n\n# Setting labels and title\nax.set_xlabel('Quarter')\nax.set_ylabel('Earnings ($1000s)')\nax.set_title('Earnings by Quarter and Company')\nax.legend()\n\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nmethods = ['Linear probing', 'BitFit', 'Prompt Tuning', 'Full finetuning', 'LoRA', 'Ours (LoSA)']\ntrain_sec_img = [0.25, 0.25, 0.25, 0.25, 0.25, 0.25]\ninference_gflops = [0.75, 0.75, 0.75, 0.75, 0.75, 0.75]\nparam_log10 = [0.5, 0.5, 0.5, 0.5, 0.5, 0.5]\ntrain_memory = [0.75, 0.75, 0.75, 0.75, 0.75, 0.75]\n\n# Plotting\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\nax.plot(train_sec_img, label='Train sec / img')\nax.plot(inference_gflops, label='Inference GFLOPs')\nax.plot(param_log10, label='Param, log10')\nax.plot(train_memory, label='Train Memory')\n\nax.set_xlabel('Methods')\nax.set_ylabel('Normalized Requirements (lower is better)')\nax.set_title('Performance Metrics')\nax.legend()\n\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Set the x-axis limits\nax.set_xlim(0, 1)\n\n# Set the y-axis limits\nax.set_ylim(0, 1)\n\n# Set the x-axis ticks\nax.set_xticks([0, 0.2, 0.4, 0.6, 0.8, 1])\n\n# Set the y-axis ticks\nax.set_yticks([0, 0.2, 0.4, 0.6, 0.8, 1])\n\n# Set the x-axis label\nax.set_xlabel('TM-score')\n\n# Set the y-axis label\nax.set_ylabel('Seq-ident')\n\n# Set the title of the plot\nax.set_title('Scatter Plot')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Set the title of the plot\nax.set_title('Relative Norm of Difference Vectors')\n\n# Set the x-axis label\nax.set_xlabel('Relative Cluster Size')\n\n# Set the y-axis label\nax.set_ylabel('Average Norm of Difference Vectors')\n\n# Set the limits for the x-axis\nax.set_xlim(25, 45)\n\n# Set the limits for the y-axis\nax.set_ylim(-10, 30)\n\n# Create a scatter plot with different colors for each species\nscatter = ax.scatter([26, 27, 28, 29, 30], [10, 11, 12, 13, 14], color='red', label='teenagers')\nscatter = ax.scatter([26, 27, 28, 29, 30], [15, 16, 17, 18, 19], color='green', label='children')\nscatter = ax.scatter([26, 27, 28, 29, 30], [20, 21, 22, 23, 24], color='blue', label='adults')\n\n# Add a legend to the plot\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data points\nx = [0, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 104, 112, 120, 128]\ny = [99.6, 99.9, 99.9, 96.0, 92.3, 90.9, 90.9, 91.3, 92.5, 93.3, 93.3, 96.0, 98.7, 98.7, 98.7, 98.7, 98.7]\n\n# Plotting\nplt.figure(figsize=(8.0, 6.0))\nplt.plot(x, y, 'bo-')\nplt.xlabel('HC_first (before aging)')\nplt.ylabel('HC_first (after aging)')\nplt.title('Plot of HC_first over time')\nplt.grid(True)\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Set the title of the plot\nax.set_title('TMScore vs Sequence ID')\n\n# Set the x-axis label\nax.set_xlabel('TMScore')\n\n# Set the y-axis label\nax.set_ylabel('Sequence ID')\n\n# Set the grid lines\nax.grid(True)\n\n# Set the tick labels\nax.set_xticks([0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0])\nax.set_yticks([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9])\n\n# Set the tick labels\nax.set_xticklabels(['0.2', '0.3', '0.4', '0.5', '0.6', '0.7', '0.8', '0.9', '1.0'])\nax.set_yticklabels(['0.1', '0.2', '0.3', '0.4', '0.5', '0.6', '0.7', '0.8', '0.9'])\n\n# Set the color map\ncmap = plt.cm.Blues\n\n# Create a heatmap\nheatmap = ax.imshow([[0.1, 0.2, 0.3], [0.4, 0.5, 0.6], [0.7, 0.8, 0.9]], cmap=cmap)\n\n# Add a color bar\ncbar = fig.colorbar(heatmap)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_9.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data\nx = [4211, 2411, 2141, 1124]\ny1 = [0.9628, 0.9604, 0.9624, 0.9592]\ny2 = [0.9624, 0.9604, 0.9624, 0.9561]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot the data\nax.plot(x, y1, 'b', label='SRCC')\nax.plot(x, y2, 'g', label='PLCC')\n\n# Set the title and labels\nax.set_title('SRCC and PLCC values with their sum for different modes')\nax.set_xlabel('Modes')\nax.set_ylabel('Values')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/HR_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 3.0))\n\n# Define the data\ndata = [\n    [176, 176, 176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176, 176, 176, 176, 176, 176, 176],\n    [176, 176, 176, 176"}
{"file": "dataset/ori_500/HR_10.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\nax.plot(np.linspace(-10, 10, 100), np.sin(np.linspace(-10, 10, 100)), color='blue', label='SINDy')\nax.set_title('Compact Spiral with Elliptical Hollow Center')\nax.set_xlabel('X-axis')\nax.set_ylabel('Y-axis')\nax.legend()\nplt.show()"}
{"file": "dataset/ori_500/HR_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nx = [10**-1, 10**0, 10**1]\ny1 = [10**11, 10**11, 10**12]\ny2 = [10**10, 10**10, 10**11]\ny3 = [10**9, 10**9, 10**10]\ny4 = [10**8, 10**8, 10**9]\ny5 = [10**7, 10**7, 10**8]\ny6 = [10**6, 10**6, 10**7]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 7.0))\n\n# Plot the data\nax.plot(x, y1, label='explicit, random')\nax.plot(x, y2, label='explicit, block size 10')\nax.plot(x, y3, label='explicit, block size 100')\nax.plot(x, y4, label='implicit, random')\nax.plot(x, y5, label='implicit, block size 10')\nax.plot(x, y6, label='implicit, block size 100')\n\n# Set the title and labels\nax.set_title('DAXPY memory bandwidth')\nax.set_xlabel('Flops/byte')\nax.set_ylabel('Flows/s')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\ncategories = ['satisfy constraints', 'no severe errors', 'lengthy', 'contain rich info', 'no moderate errors', 'grammatical correct', 'no minor errors', 'clear', 'non-repetitive', 'support stances', '19 other features']\nf_x_values = [0.76, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5]\nf_x_errors = [0.18, 0.11, 0.11, 0.11, 0.11, 0.11, 0.11, 0.11, 0.11, 0.11, 0.11]\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\nax.bar(categories, f_x_values, yerr=f_x_errors, capsize=5)\n\n# Set the title and labels\nax.set_title('f(x) = 0.50')\nax.set_xlabel('Categories')\nax.set_ylabel('f(x)')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data for the pie chart\nsizes = [24, 45, 8]\nlabels = ['CigaR', 'ChatRepair']\ncolors = ['pink', 'orange', 'lightgreen']\n\n# Create a pie chart\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\nwedges, texts, autotexts = ax.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%', startangle=90)\n\n# Equal aspect ratio ensures that pie is drawn as a circle.\nax.axis('equal')  \n\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data\ndata = {\n    'Gemin Pro-CoT': [25, 15, 10, 5, 3],\n    'GPT4V-CoT': [28, 22, 18, 14, 10],\n    'Gemini Pro': [27, 21, 17, 13, 9]\n}\ncategories = ['Level 1', 'Level 2', 'Level 3', 'Level 4', 'Level 5']\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Plot the data\nfor i, (label, values) in enumerate(data.items()):\n    ax.barh(categories, values, left=np.arange(len(values)), height=0.8, label=label)\n\n# Set the title and labels\nax.set_title('Qwen-VR-Max')\nax.set_xlabel('Value')\nax.set_ylabel('Level')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Generate some data\nx = np.logspace(1, 2, 100)\ny1 = np.random.rand(100) * 10**np.random.randint(-6, -2, 100)\ny2 = np.random.rand(100) * 10**np.random.randint(-6, -2, 100)\ny3 = np.random.rand(100) * 10**np.random.randint(-6, -2, 100)\ny4 = np.random.rand(100) * 10**np.random.randint(-6, -2, 100)\ny5 = np.random.rand(100) * 10**np.random.randint(-6, -2, 100)\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 4.0))\n\n# Plot the data\nax.plot(x, y1, 'r.')\nax.plot(x, y2, 'g.')\nax.plot(x, y3, 'b.')\nax.plot(x, y4, 'c.')\nax.plot(x, y5, 'm.')\n\n# Set the labels\nax.set_xlabel('Number of matvecs m')\nax.set_ylabel('Approximation error ||A - \\u03B1\\u03BB\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F\\u208F"}
{"file": "dataset/ori_500/HR_16.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data\nlabels = ['Retrive.KV', 'En.Sum', 'Retrive.Number', 'En.QA', 'Retrive.PassKey']\nsizes = [150, 100, 75, 50, 25]\ncolors = ['lightgreen', 'lightskyblue', 'lavender', 'gold', 'orange']\nexplode = (0.1, 0, 0, 0, 0)  # explode 1st slice\n\n# Plot\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\nax.pie(sizes, explode=explode, labels=labels, colors=colors,\nautopct='%1.1f%%', shadow=True, startangle=140)\nax.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\n\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_17.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for plotting\nx = [0, 20, 40, 60, 80, 100, 120, 140]\ny1 = [1, 2, 3, 2, 1, 0, -1, -2]\ny2 = [-1, -2, -3, -2, -1, 0, 1, 2]\ny3 = [1, 2, 3, 2, 1, 0, -1, -2]\ny4 = [-1, -2, -3, -2, -1, 0, 1, 2]\n\n# Plotting\nplt.figure(figsize=(6.0, 5.0))\nplt.plot(x, y1, color='green')\nplt.plot(x, y2, color='orange')\nplt.plot(x, y3, color='blue')\nplt.plot(x, y4, color='red')\n\n# Setting the y-axis limits\nplt.ylim(-4, 4)\n\n# Displaying the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_18.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(7.0, 5.0))\n\n# Define the data\nx = np.array([0, 1, 2, 3, 4, 5, 6])\ny = np.array([3.2, 3.4, 3.6, 3.8, 4.0, 4.2, 4.4])\n\n# Plot the data\nax.plot(x, y, 'o-')\n\n# Set the title and labels\nax.set_title('Urgency in Thermal Conductivity Measurements')\nax.set_xlabel('Sample Number')\nax.set_ylabel('Thermal Conductivity (W/m.K)')\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/HR_19.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ngames = ['I', 'II', 'III', 'IV', 'V']\nscores_a = [28, 20, 10, 22, 28]\nscores_b = [35, 26, 20, 25, 30]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(7.0, 5.0))\n\n# Plot the data\nax.plot(games, scores_a, label='Player A', color='r')\nax.plot(games, scores_b, label='Player B', color='g')\n\n# Set the title and labels\nax.set_title('Scores by number of game and players')\nax.set_xlabel('Games')\nax.set_ylabel('Score')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Define the data for Variable 1\nx = np.linspace(-6, 6, 100)\ny = np.sin(x)\n\n# Plot the data\nax.plot(x, y, color='blue')\n\n# Set the limits of the axes\nax.set_xlim(-6, 6)\nax.set_ylim(-6, 6)\n\n# Add a color bar\ncbar = fig.colorbar(ax.imshow(np.random.rand(10, 10), cmap='viridis'))\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_20.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nfemale = [5.7, 6.0, 5.1, 5.2, 6.2, 5.2]\nmale = [6.6, 6.0, 5.7, 6.2, 5.2, 6.2]\nllm = [7.8, 7.5, 7.5, 7.0, 7.0, 7.0]\nperson = [7.4, 7.3, 7.2, 7.2, 7.2, 7.2]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Plot the data\nax.plot(female, label='Female Player')\nax.plot(male, label='Male Player')\nax.plot(llm, label='LLM Player')\nax.plot(person, label='Person Player')\n\n# Set the title and labels\nax.set_title('Trustee Scenario')\nax.set_xlabel('Trustee Scenario')\nax.set_ylabel('Average Amount Sent ($)')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_21.pdf", "response": "import matplotlib.pyplot as plt\n\nfig, ax = plt.subplots(figsize=(7.0, 5.0))\n\nax.bar([1, 2, 3], [100, 120, 140], color='green')\nax.bar([1, 2, 3], [150, 160, 170], color='orange')\nax.bar([1, 2, 3], [130, 140, 150], color='red')\n\nax.set_xlabel('Seconds Since Start')\nax.set_ylabel('Time (seconds)')\nax.set_title('Endurance Race Performance Analysis')\n\nplt.show()"}
{"file": "dataset/ori_500/HR_22.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(7.0, 5.0))\n\n# Set the title of the plot\nax.set_title('Comparative Distribution of Three Different Groups')\n\n# Create a bar chart\nax.bar([1, 2, 3], [4, 5, 6])\n\n# Set the x-axis label\nax.set_xlabel('Number of Observations')\n\n# Set the y-axis label\nax.set_ylabel('Value Range')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_23.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data\nx = np.array([-300, -120, -100, -75, -50, -30])\ny = np.array([350, 200, 150, 100, 50, 25])\n\n# Create a bar chart\nplt.bar(x, y, color='red')\n\n# Set the title and labels\nplt.title('Waterfall Chart')\nplt.xlabel('X-axis')\nplt.ylabel('Y-axis')\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/HR_24.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a grid of points\nx = np.linspace(-1, 1, 100)\ny = np.linspace(-1, 1, 100)\nX, Y = np.meshgrid(x, y)\n\n# Calculate the distance from the center\nR = np.sqrt(X**2 + Y**2)\n\n# Create a color map\ncmap = plt.cm.viridis\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data\ncax = ax.pcolormesh(X, Y, R, cmap=cmap, shading='auto')\n\n# Add a color bar\nfig.colorbar(cax)\n\n# Set the title\nax.set_title('tripcolor of Delaunay triangulation, flat shading')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_25.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Define the data for the heatmap\ndata = np.random.rand(10, 10)\n\n# Create a heatmap\ncax = ax.matshow(data, cmap='hot')\n\n# Add a colorbar\nfig.colorbar(cax)\n\n# Set the title of the plot\nax.set_title('NonUniformImage class')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for Flickr30k\nflickr30k_data = [\n    [500, 400, 300, 200, 100],\n    [550, 450, 350, 250, 150],\n    [600, 500, 400, 300, 200],\n    [650, 550, 450, 350, 250],\n    [700, 600, 500, 400, 300],\n    [750, 650, 550, 450, 350],\n    [800, 700, 600, 500, 400],\n    [850, 750, 650, 550, 450],\n    [900, 800, 700, 600, 500]\n]\n\n# Data for MS-COCO\nmscoco_data = [\n    [500, 400, 300, 200, 100],\n    [550, 450, 350, 250, 150],\n    [600, 500, 400, 300, 200],\n    [650, 550, 450, 350, 250],\n    [700, 600, 500, 400, 300],\n    [750, 650, 550, 450, 350],\n    [800, 700, 600, 500, 400],\n    [850, 750, 650, 550, 450],\n    [900, 800, 700, 600, 500]\n]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 4.0))\n\n# Plot the data\nax.bar(range(9), flickr30k_data[0], color='pink')\nax.bar(range(9), flickr30k_data[1], color='purple')\nax.bar(range(9), flickr30k_data[2], color='orange')\nax.bar(range(9), flickr30k_data[3], color='green')\nax.bar(range(9), flickr30k_data[4], color='blue')\nax.bar(range(9), flickr30k_data[5], color='red')\nax.bar(range(9), flickr30k_data[6], color='cyan')\nax.bar(range(9), flickr30k_data[7], color='magenta')\nax.bar(range(9), flickr30k_data[8], color='yellow')\n\n# Set the title and labels\nax.set_title('Flickr30k')\nax.set_xlabel('Number of bits')\nax.set_ylabel('Recall sum')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Denser Points with Perfectly Circular Error Ellipses')\n\n# Set the x-axis label\nax.set_xlabel('x(m)')\n\n# Set the y-axis label\nax.set_ylabel('y(m)')\n\n# Set the limits for the x-axis\nax.set_xlim(0, 25)\n\n# Set the limits for the y-axis\nax.set_ylim(0, 30)\n\n# Draw a red line\nax.plot([0, 25], [0, 30], color='red')\n\n# Draw a blue line\nax.plot([0, 25], [0, 25], color='blue')\n\n# Draw a black line\nax.plot([0, 25], [0, 20], color='black')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Define the circle's radius\nradius = 1\n\n# Generate points on the circle\ntheta = np.linspace(0, 2*np.pi, 100)\nx = radius * np.cos(theta)\ny = radius * np.sin(theta)\n\n# Plot the circle\nax.plot(x, y, 'b.')\n\n# Set the aspect ratio to be equal\nax.set_aspect('equal')\n\n# Remove the axes\nax.axis('off')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a grid of values for alpha and beta\nalpha = np.linspace(0, 2, 100)\nbeta = np.linspace(0, 2, 100)\nalpha_grid, beta_grid = np.meshgrid(alpha, beta)\n\n# Calculate delta_t for each pair of alpha and beta\ndelta_t = np.sqrt(alpha_grid**2 + beta_grid**2)\n\n# Create a colormap for delta_t\ncmap = plt.cm.viridis\n\n# Plot the heatmap\nplt.figure(figsize=(8.0, 7.0))\nplt.pcolormesh(alpha_grid, beta_grid, delta_t, cmap=cmap)\nplt.colorbar(label=r'$\\Delta t$')\nplt.xlabel(r'$\\alpha$')\nplt.ylabel(r'$\\beta$')\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis for the first subplot\nfig, ax1 = plt.subplots(figsize=(8.0, 4.0))\n\n# Define the data for the first subplot\nx = np.linspace(0, 100, 100)\ny1 = np.sin(x / 10)\ny2 = np.cos(x / 10)\ny3 = np.tan(x / 10)\ny4 = np.exp(-x / 10)\n\n# Plot the data on the first subplot\nax1.plot(x, y1, 'b-', label='Left')\nax1.plot(x, y2, 'g-', label='Center Left')\nax1.plot(x, y3, 'r-', label='Center Right')\nax1.plot(x, y4, 'm-', label='Right')\n\n# Set the title of the first subplot\nax1.set_title('Utility distribution per topic')\n\n# Create a second subplot\nax2 = fig.add_subplot(122)\n\n# Define the data for the second subplot\nitems = ['L', 'CL', 'C', 'CR', 'R']\nusers = [np.random.rand(100) for _ in range(len(items))]\n\n# Plot the data on the second subplot\nfor i, item in enumerate(items):\n    ax2.scatter(range(100), users[i], color=plt.cm.viridis(i / len(items)))\n\n# Set the title of the second subplot\nax2.set_title('User preference matrix (M)')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 4.0))\n\n# Define the data\nx = np.linspace(-2, 2, 100)\ny = np.sin(x)\n\n# Plot the data\nax.plot(x, y, 'r-')\n\n# Set the title and labels\nax.set_title('Sine Wave')\nax.set_xlabel('Reactive-2 payoff')\nax.set_ylabel('Memory-2 payoff')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 4.0))\n\n# Define the data for the plots\ndata_vicuna = np.random.rand(3, 5)\ndata_alpaca = np.random.rand(3, 5)\n\n# Create the plots\nax.imshow(data_vicuna, cmap='Blues')\nax.imshow(data_alpaca, cmap='Oranges')\n\n# Set the title\nax.set_title('Model = Vicuna')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/PIP_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Set the color of the background\nax.set_facecolor('pink')\n\n# Set the x-axis limits\nax.set_xlim(-40, 1)\n\n# Set the y-axis limits\nax.set_ylim(-5, 6)\n\n# Draw horizontal lines\nax.axhline(y=0, color='black', linewidth=0.5)\nax.axhline(y=1, color='black', linewidth=0.5)\nax.axhline(y=2, color='black', linewidth=0.5)\nax.axhline(y=3, color='black', linewidth=0.5)\nax.axhline(y=4, color='black', linewidth=0.5)\nax.axhline(y=5, color='black', linewidth=0.5)\n\n# Draw vertical lines\nax.axvline(x=-40, color='black', linewidth=0.5)\nax.axvline(x=-35, color='black', linewidth=0.5)\nax.axvline(x=-30, color='black', linewidth=0.5)\nax.axvline(x=-25, color='black', linewidth=0.5)\nax.axvline(x=-20, color='black', linewidth=0.5)\nax.axvline(x=-15, color='black', linewidth=0.5)\nax.axvline(x=-10, color='black', linewidth=0.5)\nax.axvline(x=-5, color='black', linewidth=0.5)\nax.axvline(x=0, color='black', linewidth=0.5)\nax.axvline(x=5, color='black', linewidth=0.5)\nax.axvline(x=10, color='black', linewidth=0.5)\nax.axvline(x=15, color='black', linewidth=0.5)\nax.axvline(x=20, color='black', linewidth=0.5)\nax.axvline(x=25, color='black', linewidth=0.5)\nax.axvline(x=30, color='black', linewidth=0.5)\nax.axvline(x=35, color='black', linewidth=0.5)\nax.axvline(x=40, color='black', linewidth=0.5)\n\n# Draw a rectangle\nrect = plt.Rectangle((-40, -5), 80, 10, facecolor='lightgreen')\nax.add_patch(rect)\n\n# Draw a line\nline = plt.Line2D([-40, 0], [0, 5], color='gray', linestyle='--')\nax.add_line(line)\n\n# Draw scatter plots\nscatter1 = ax.scatter([-30, -25, -20, -15, -10, -5, 0, 5, 10, 15, 20, 25, 30, 35, 40], [30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100], color='green')\nscatter2 = ax.scatter([-30, -25, -20, -15, -10, -5, 0, 5, 10, 15, 20, 25, 30, 35, 40], [20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90], color='blue')\nscatter3 = ax.scatter([-30, -25, -20, -15, -10, -5, 0, 5, 10, 15, 20, 25, 30, 35, 40], [10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80], color='red')\nscatter4 = ax.scatter([-30, -25, -20, -15, -10, -5, 0, 5, 10, 15, 20, 25, 30, 35, 40], [0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70], color='orange')\nscatter5 = ax.scatter([-30, -25, -20, -15, -10, -5, 0, 5, 10, 15, 20, 25, 30, 35, 40], [-10, -5, 0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60], color='purple')\nscatter6 = ax.scatter([-30, -25, -20, -15, -10, -5, 0, 5, 10, 15, 20, 25, 30, 35, 40], [-20, -15, -10, -5, 0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50], color='brown')\n\n# Add labels\nax.set_xlabel('Delta Robust Accuracy (%)')\nax.set_ylabel('Delta RNFR (%)')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/PIP_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Exponential Scale')\n\n# Set the x-axis label\nax.set_xlabel('Gradient Steps (x 62.5K)')\n\n# Set the y-axis label\nax.set_ylabel('Exponential Scale')\n\n# Set the x-axis limits\nax.set_xlim(0, 200)\n\n# Set the y-axis limits\nax.set_ylim(1, 7)\n\n# Draw a horizontal line at y=2\nax.axhline(y=2, color='black', linestyle='-')\n\n# Draw a vertical line at x=50\nax.axvline(x=50, color='black', linestyle='-')\n\n# Draw a rectangle with a red border\nrect = plt.Rectangle((40, 3), 10, 1, linewidth=1, edgecolor='red', facecolor='none')\nax.add_patch(rect)\n\n# Draw a triangle with a green border\ntriangle = plt.Polygon([[50, 4], [55, 5], [45, 5]], closed=True, edgecolor='green', facecolor='none')\nax.add_patch(triangle)\n\n# Draw a circle with a blue border\ncircle = plt.Circle((60, 5), 0.5, color='blue', fill=False)\nax.add_patch(circle)\n\n# Draw a square with a yellow border\nsquare = plt.Rectangle((70, 4), 1, 1, linewidth=1, edgecolor='yellow', facecolor='none')\nax.add_patch(square)\n\n# Draw a pentagon with a purple border\npentagon = plt.Polygon([[80, 5], [85, 6], [75, 6], [80, 7], [75, 6]], closed=True, edgecolor='purple', facecolor='none')\nax.add_patch(pentagon)\n\n# Draw a hexagon with a orange border\nhexagon = plt.Polygon([[90, 6], [95, 7], [85, 7], [90, 8], [85, 7], [90, 6]], closed=True, edgecolor='orange', facecolor='none')\nax.add_patch(hexagon)\n\n# Draw a heptagon with a pink border\nheptagon = plt.Polygon([[100, 7], [105, 8], [95, 8], [100, 9], [95, 8], [100, 7], [95, 7]], closed=True, edgecolor='pink', facecolor='none')\nax.add_patch(heptagon)\n\n# Draw a octagon with a brown border\noctagon = plt.Polygon([[110, 8], [115, 9], [105, 9], [110, 10], [105, 9], [110, 8], [105, 8], [110, 7]], closed=True, edgecolor='brown', facecolor='none')\nax.add_patch(octagon)\n\n# Draw a nonagon with a gray border\nnonagon = plt.Polygon([[120, 9], [125, 10], [115, 10], [120, 11], [115, 10], [120, 9], [115, 9], [120, 8], [115, 8]], closed=True, edgecolor='gray', facecolor='none')\nax.add_patch(nonagon)\n\n# Draw a decagon with a black border\ndecagon = plt.Polygon([[130, 10], [135, 11], [125, 11], [130, 12], [125, 11], [130, 10], [125, 10], [130, 9], [125, 9], [130, 8]], closed=True, edgecolor='black', facecolor='none')\nax.add_patch(decagon)\n\n# Draw a dodecagon with a white border\ndodecagon = plt.Polygon([[140, 11], [145, 12], [135, 12], [140, 13], [135, 12], [140, 11], [135, 11], [140, 10], [135, 10], [140, 9], [135, 9], [140, 8]], closed=True, edgecolor='white', facecolor='none')\nax.add_patch(dodecagon)\n\n# Draw a trapezoid with a cyan border\ntrapezoid = plt.Polygon([[150, 12], [155, 13], [145, 13], [150, 14]], closed=True, edgecolor='cyan', facecolor='none')\nax.add_patch(trapezoid)\n\n# Draw a parallelogram with a magenta border\nparallelogram = plt.Polygon([[160, 13], [165, 14], [155, 14], [160, 15]], closed=True, edgecolor='magenta', facecolor='none')\nax.add_patch(parallelogram)\n\n# Draw a kite with a lime border\nkite = plt.Polygon([[170, 14], [175, 15], [165, 15], [170, 16]], closed=True, edgecolor='lime', facecolor='none')\nax.add_patch(kite)\n\n# Draw a rhombus with a navy border\nrhombus = plt.Polygon([[180, 15], [185, 16], [175, 16], [180, 17]], closed=True, edgecolor='navy', facecolor='none')\nax.add_patch(rhombus)\n\n# Draw a star with a olive border\nstar = plt.Polygon([[190, 16], [195, 17], [185, 17], [190, 18], [185, 17], [190, 16], [185, 16], [190, 15], [185, 15], [190, 14]], closed=True, edgecolor='olive', facecolor='none')\nax.add_patch(star)\n\nplt.show()\n```"}
{"file": "dataset/ori_500/PIP_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nx = [0.35, 0.4, 0.45, 0.5, 0.55, 0.6, 0.65, 0.7, 0.75, 0.8, 0.85, 0.9, 0.95]\ny_known = [200, 300, 400, 500, 600, 700, 800, 900, 1000, 1100, 1200, 1300, 1400]\ny_unknown = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 1100, 1200, 1300]\n\n# Plotting\nplt.figure(figsize=(10.0, 6.0))\nplt.plot(x, y_known, label='Known', color='green')\nplt.plot(x, y_unknown, label='Unknown', color='blue')\nplt.xlabel('Maximum Predicted Probability')\nplt.ylabel('Number of Examples')\nplt.title('Number of Examples vs Maximum Predicted Probability')\nplt.legend()\nplt.grid(True)\nplt.show()\n```"}
{"file": "dataset/ori_500/PIP_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nx = ['Bfloat16', 'INT8', 'INT4', 'INT2']\ny1 = [9, 8, 7, 9]\ny2 = [8, 7, 6, 9]\ny3 = [7, 6, 5, 9]\ny4 = [6, 5, 4, 9]\ny5 = [5, 4, 3, 9]\ny6 = [4, 3, 2, 9]\n\n# Plotting\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\nax.plot(x, y1, 'r-', label='Qwen-7B-Chat')\nax.plot(x, y2, 'b-', label='Llama2-7B-Chat')\nax.plot(x, y3, 'g-', label='MPT-7B-Chat')\nax.plot(x, y4, 'y-', label='CodeLlama-7B-Instruct')\n\n# Adding a legend\nax.legend()\n\n# Setting the title and labels\nax.set_title('Bias Score by Data Type and Model')\nax.set_xlabel('Data Type')\nax.set_ylabel('Bias Score')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/PIP_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nx = [0.0, 0.2, 0.4]\ny_known = [1500, 500, 300]\ny_unknown = [1200, 800, 600]\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\nax.bar(x, y_known, color='orange', label='Known')\nax.bar(x, y_unknown, bottom=y_known, color='blue', label='Unknown')\n\n# Add labels and title\nax.set_xlabel('Maximum Predicted Probability')\nax.set_ylabel('Number of Examples')\nax.set_title('Number of Examples by Maximum Predicted Probability')\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/PIP_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data points\nx = [2**6, 2**7, 2**8, 2**9, 2**10, 2**11]\ny1 = [100000, 200000, 300000, 400000, 500000, 600000]\ny2 = [100000, 200000, 300000, 400000, 500000, 600000]\ny3 = [100000, 200000, 300000, 400000, 500000, 600000]\ny4 = [100000, 200000, 300000, 400000, 500000, 600000]\ny5 = [100000, 200000, 300000, 400000, 500000, 600000]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Plot the data\nax.plot(x, y1, 'g-', label='Cos | n0 = 200')\nax.plot(x, y2, 'g--', label='Cos | n0 = 400')\nax.plot(x, y3, 'b-', label='ReLU | n0 = 200')\nax.plot(x, y4, 'b--', label='ReLU | n0 = 400')\nax.plot(x, y5, 'r-', label='Leaky ReLU | n0 = 200')\nax.plot(x, y6, 'r--', label='Leaky ReLU | n0 = 400')\n\n# Set the title and labels\nax.set_title('Empirical Lipschitz Constant')\nax.set_xlabel('Width of Layer')\nax.set_ylabel('Empirical Lipschitz Constant')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/PIP_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\ntime_steps = [0, 2000, 4000, 6000, 8000, 10000]\nwi = [3500, 3700, 4000, 4500, 5000, 5500]\nisq = [3600, 3800, 4100, 4600, 5100, 5600]\nwql = [3700, 3900, 4200, 4700, 5200, 5700]\ngreedy = [3800, 4000, 4300, 4800, 5300, 5800]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data\nax.plot(time_steps, wi, 'r', label='WI')\nax.plot(time_steps, isq, 'g', label='ISQ')\nax.plot(time_steps, wql, 'm', label='WIQL')\nax.plot(time_steps, greedy, 'b', label='Greedy')\n\n# Set the title and labels\nax.set_title('Discounted Cumulative Reward')\nax.set_xlabel('Time Steps')\nax.set_ylabel('Discounted Cumulative Reward')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/PIP_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Plot the data\nax.plot([0, 25, 50, 75, 100, 125, 150, 175, 200], [0.5, 0.45, 0.4, 0.35, 0.3, 0.25, 0.2, 0.15, 0.1], label='WI', color='blue')\nax.plot([0, 25, 50, 75, 100, 125, 150, 175, 200], [0.5, 0.45, 0.4, 0.35, 0.3, 0.25, 0.2, 0.15, 0.1], label='ISQ', color='orange')\n\n# Set the title and labels\nax.set_title('Discounted Cumulative Reward')\nax.set_xlabel('Time Steps')\nax.set_ylabel('Discounted Cumulative Reward')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/PIP_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\nax.plot([1, 2, 3], [4, 5, 6], 'o', color='orange')\nax.plot([1, 2, 3], [4, 5, 6], 'o', color='blue')\nax.plot([1, 2, 3], [4, 5, 6], 'o', color='green')\nplt.show()\n```"}
{"file": "dataset/ori_500/PIP_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Define the data for each scatter plot\ndata1 = [[-2, -1, 0], [0, 1, 2], [3, 4, 5]]\ndata2 = [[-2, -1, 0], [0, 1, 2], [3, 4, 5]]\ndata3 = [[-2, -1, 0], [0, 1, 2], [3, 4, 5]]\ndata4 = [[-2, -1, 0], [0, 1, 2], [3, 4, 5]]\ndata5 = [[-2, -1, 0], [0, 1, 2], [3, 4, 5]]\n\n# Plot the scatter plots\nax.scatter(data1[0], data1[1], color='red')\nax.scatter(data2[0], data2[1], color='green')\nax.scatter(data3[0], data3[1], color='blue')\nax.scatter(data4[0], data4[1], color='yellow')\nax.scatter(data5[0], data5[1], color='purple')\n\n# Set the limits of the x and y axes\nax.set_xlim(-8, 8)\nax.set_ylim(-7, 7)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/area_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nx = [10, 50, 100, 500]\ny1 = [20, 20, 20, 20]\ny2 = [10, 10, 10, 10]\ny3 = [30, 30, 30, 30]\ny4 = [15, 15, 15, 15]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(9.0, 8.0))\n\n# Plot the data\nax.plot(x, y1, 'r-o', label='ActivityNet mIoU')\nax.plot(x, y2, 'o-y', label='Breakfast MoF')\nax.plot(x, y3, 'c-', label='ActivityNet CIDER')\nax.plot(x, y4, 'k-', label='QVHighlights mAP')\n\n# Set the title and labels\nax.set_title('Performance Metrics Over Time')\nax.set_xlabel('Time (seconds)')\nax.set_ylabel('Performance Score')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/area_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 10.0))\n\n# Define the data\ntime_steps = [0, 1, 2, 3]\nGT_values = [0, 10, 20, 30]\nDRS_values = [0, 10, 20, 30]\nPR_based_values = [0, 10, 20, 30]\n\n# Plot the data\nax.plot(time_steps, GT_values, 'g-', label='GT')\nax.plot(time_steps, DRS_values, 'b-', label='DRS')\nax.plot(time_steps, PR_based_values, 'r-', label='PR-based')\n\n# Set the title and labels\nax.set_title('Time Series Data')\nax.set_xlabel('Time Step')\nax.set_ylabel('Values')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/area_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nx = [0, 20, 40, 60]\ny_clip = [0.53, 0.75, 0.75, 0.75]\ny_laion_5k = [0.55, 0.75, 0.75, 0.75]\ny_coco_5k = [0.55, 0.75, 0.75, 0.75]\ny_laion_10k = [0.55, 0.75, 0.75, 0.75]\ny_coco_10k = [0.55, 0.75, 0.75, 0.75]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot the data\nax.plot(x, y_clip, label='clip')\nax.plot(x, y_laion_5k, label='laion (5k)')\nax.plot(x, y_coco_5k, label='coco (5k)')\nax.plot(x, y_laion_10k, label='laion (10k)')\nax.plot(x, y_coco_10k, label='coco (10k)')\n\n# Set the limits of the x-axis\nax.set_xlim(0, 80)\n\n# Set the limits of the y-axis\nax.set_ylim(0.53, 0.76)\n\n# Set the title of the plot\nax.set_title('Dynamic Effect of Vocab on Zero Shot Accuracy')\n\n# Set the labels for the axes\nax.set_xlabel('Deposition IO Norm')\nax.set_ylabel('Accuracy')\n\n# Add a legend to the plot\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/area_4.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 4.0))\n\n# Define the data\nn = np.arange(0, 9)\ncontent = [1, 2, 3, 4, 5, 6, 7, 8, 9]\norganization = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nlanguage = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n# Plot the data\nax.plot(n, content, label='Content', color='blue')\nax.plot(n, organization, label='Organization', color='orange')\nax.plot(n, language, label='Language', color='green')\n\n# Set the title and labels\nax.set_title('Cumulative Performance Gain by Augmentation Level')\nax.set_xlabel('n')\nax.set_ylabel('Performance Gain (%)')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/area_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nyears = [1950, 1960, 1970, 1980, 1990, 2000, 2010]\nafrica = [300, 350, 400, 450, 500, 550, 600]\namericas = [100, 150, 200, 250, 300, 350, 400]\nasia = [200, 250, 300, 350, 400, 450, 500]\neurope = [150, 200, 250, 300, 350, 400, 450]\noceania = [500, 550, 600, 650, 700, 750, 800]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data\nax.plot(years, africa, color='green')\nax.plot(years, americas, color='yellow')\nax.plot(years, asia, color='red')\nax.plot(years, europe, color='orange')\nax.plot(years, oceania, color='blue')\n\n# Set the title and labels\nax.set_title('World population')\nax.set_xlabel('Year')\nax.set_ylabel('Number of people (millions)')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nx = [0, 20, 40]\ny1 = [6.3, 5.2, 3.1]\ny2 = [6.1, 5.1, 3.1]\ny3 = [6.1, 5.1, 3.1]\ny4 = [6.1, 5.1, 3.1]\ny5 = [6.1, 5.1, 3.1]\n\n# Plotting\nplt.figure(figsize=(7.0, 5.0))\nplt.plot(x, y1, label='Notre-Dame de Paris')\nplt.plot(x, y2, label='Demi-Gods and Semi-Devils')\nplt.plot(x, y3, label='The Count of Monte Cristo')\nplt.plot(x, y4, label='Game of Thrones')\nplt.plot(x, y5, label='Attack on Titan')\n\n# Setting labels and title\nplt.xlabel('Time')\nplt.ylabel('Scores')\nplt.title('Scores over Time')\n\n# Display legend\nplt.legend()\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\ncategories = ['Which', 'What', 'How', 'Will', 'Are', 'Is', 'Choose', 'Select', 'Identify', 'Fill']\nvalues = [50, 40, 30, 20, 10, 50, 50, 50, 50, 40]\n\n# Create a bar chart\nplt.figure(figsize=(8.0, 6.0))\nplt.bar(categories, values, color='blue')\n\n# Set the title and labels\nplt.title('Bar Chart of Values')\nplt.xlabel('Categories')\nplt.ylabel('Values')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_100.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nregion1 = [60, 60, 40, 20]\nregion2 = [80, 80, 60, 40]\nregion3 = [90, 70, 50, 30]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(15.0, 5.0))\n\n# Plot the data\nax.bar(range(len(region1)), region1, color='green')\nax.bar(range(len(region2)), region2, color='blue')\nax.bar(range(len(region3)), region3, color='red')\n\n# Set the title and labels\nax.set_title('Average Monthly Sales by Product Across Regions')\nax.set_xlabel('Product')\nax.set_ylabel('Sales')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nlengths = [0.9, 10.19, 20.29, 30.39, 40.49]\nspearmans = [0.5, 0.25, 0.25, 0.25, 0.5]\n\n# Create a bar chart\nplt.bar(lengths, spearmans, color='blue')\n\n# Set the title and labels\nplt.title('Spearman Correlation by Length')\nplt.xlabel('Length')\nplt.ylabel('Spearman')\n\n# Set the y-axis limits\nplt.ylim(-1, 0.75)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ncategories = ['FMLP-Rec', 'BERT4Rec', 'SASRec', 'Caser', 'GRU4Rec']\nbeauty_values = [2.2, 2.4, 2.4, 19.9, 14.3]\nmovie_lens_values = [3.0, 3.0, 3.1, 5.1, 4.8]\nyelp_values = [4.8, 4.8, 4.8, 19.7, 19.7]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 4.0))\n\n# Plot bars for each category\nax.bar(categories, beauty_values, color='blue', label='Beauty')\nax.bar(categories, movie_lens_values, bottom=beauty_values, color='red', label='MovieLens-1M')\nax.bar(categories, yelp_values, bottom=[sum(x) for x in zip(beauty_values, movie_lens_values)], color='green', label='Yelp')\n\n# Set labels and title\nax.set_xlabel('Categories')\nax.set_ylabel('Percentage')\nax.set_title('Category-wise Percentage Distribution')\nax.legend()\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nmodels = ['Bactrian-X', 'Lima-X', 'Bactrian-X', 'Lima-X']\nimprovement = [3.5, 2.3, 1.5, 0.8]\nlanguages = ['EN', 'FR', 'ES', 'DE', 'IT']\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\nbars = ax.bar(models, improvement, color='blue')\n\n# Add labels and title\nax.set_xlabel('Model')\nax.set_ylabel('Improvement [%]')\nax.set_title('ENDEFRRITES sampled')\n\n# Add language labels\nfor i, v in enumerate(improvement):\n    ax.text(i, v + 0.1, languages[i], ha='center', va='bottom')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\npheme = ['GCN', 'RvNN', 'Hyphen', 'GET', 'WSDMS', 'DELL']\nf1_scores = [82, 83, 80, 81, 84, 86]\nllm_mis = [83, 84, 81, 82, 85, 87]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(7, 5))\n\n# Plot the data\nax.barh(pheme, f1_scores, color='blue')\nax.barh(pheme, llm_mis, left=f1_scores, color='gray')\n\n# Set the title and labels\nax.set_title('F1-score vs LLM-mis')\nax.set_xlabel('F1-score')\nax.set_ylabel('Pheme')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_15.pdf", "response": "import matplotlib.pyplot as plt\n\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Define the data\nx = [1, 2, 3, 4, 5, 6]\ny = [\n    [5, 4, 3, 2, 1],\n    [5, 4, 3, 2, 1],\n    [5, 4, 3, 2, 1],\n    [5, 4, 3, 2, 1],\n    [5, 4, 3, 2, 1],\n    [5, 4, 3, 2, 1]\n]\n\n# Create a bar chart\nax.bar(x, y[0], color='blue')\nax.bar(x, y[1], bottom=y[0], color='cyan')\nax.bar(x, y[2], bottom=[sum(y[i]) for i in range(2)], color='green')\nax.bar(x, y[3], bottom=[sum(y[i]) for i in range(3)], color='yellow')\nax.bar(x, y[4], bottom=[sum(y[i]) for i in range(4)], color='orange')\nax.bar(x, y[5], bottom=[sum(y[i]) for i in range(5)], color='red')\n\n# Set the title and labels\nax.set_title('Human Labeling and Agreement Bias Checking')\nax.set_xlabel('Human Annotator')\nax.set_ylabel('Scores')\n\nplt.show()"}
{"file": "dataset/ori_500/bar_16.pdf", "response": "import matplotlib.pyplot as plt\n\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\nax.bar(['human', 'gpt4', 'gpt4-cot'], [700, 700, 800], color='r')\nax.set_title('Resonance Preference Plot for rich-context')\nax.set_xlabel('Role')\nax.set_ylabel('Count')\n\nplt.show()"}
{"file": "dataset/ori_500/bar_17.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ntasks = ['ARC', 'MMLU', 'TruthfulQa', 'Winograd', 'Average']\naccuracies = [\n    [53.0, 51.3, 56.4, 56.2],\n    [46.6, 45.8, 48.0, 46.7],\n    [45.3, 45.8, 44.5, 44.3],\n    [43.0, 43.7, 48.5, 43.1],\n    [53.1, 53.7, 53.1]\n]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 4.0))\n\n# Plot bars for each task\nfor i, task_accuracies in enumerate(accuracies):\n    ax.bar(tasks, task_accuracies, label=f'Task {i+1}')\n\n# Set labels and title\nax.set_xlabel('Tasks')\nax.set_ylabel('Accuracy (%)')\nax.set_title('Task Accuracy Comparison')\n\n# Add legend\nax.legend()\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_18.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nx = ['M=3', 'M=4', 'M=5', 'M=6', 'M=7']\ny1 = [60, 60, 70, 60, 65]\ny2 = [60, 60, 70, 60, 65]\ny3 = [60, 60, 70, 60, 65]\ny4 = [60, 60, 70, 60, 65]\ny5 = [60, 60, 70, 60, 65]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot the data\nax.plot(x, y1, label='M=3')\nax.plot(x, y2, label='M=4')\nax.plot(x, y3, label='M=5')\nax.plot(x, y4, label='M=6')\nax.plot(x, y5, label='M=7')\n\n# Set the title and labels\nax.set_title('Performance of Different Models')\nax.set_xlabel('Model')\nax.set_ylabel('Performance')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_19.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nmatches = ['DLMA-7B VS. LLAMA-7B', 'DLMA-7B VS. CD-7B', 'DLMA-7B VS. RLAIF-7B', 'DLMA-7B VS. RLCD-7B', 'DLMA-13B VS. LLAMA-13B', 'DLMA-13B VS. CD-13B', 'DLMA-13B VS. RLAIF-13B', 'DLMA-13B VS. RLCD-13B']\ndlma_win = [60.2, 60.2, 46.8, 34.7, 62.5, 62.5, 62.5, 49.2]\ntie = [28.8, 28.8, 39.1, 39.1, 27.7, 27.7, 27.7, 36.3]\ndlma_lose = [11.0, 11.0, 14.1, 26.2, 9.8, 9.8, 9.8, 14.5]\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\nax.bar(matches, dlma_win, color='green')\nax.bar(matches, tie, bottom=dlma_win, color='blue')\nax.bar(matches, dlma_lose, bottom=[i + j for i, j in zip(dlma_win, tie)], color='red')\n\n# Set labels and title\nax.set_xlabel('Matches')\nax.set_ylabel('Percentage')\nax.set_title('DLMA vs. Baseline Methods On HHH (Evaluated by GPT4)')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_2.pdf", "response": "import matplotlib.pyplot as plt\n\n# Data for plotting\ntime = [0, 10, 20, 30, 40]\ntrot = [0.5, 0.7, 0.8, 0.9, 0.95]\npace = [0.6, 0.8, 0.9, 0.95, 0.98]\nbound = [0.7, 0.9, 0.95, 0.98, 0.99]\npronk = [0.8, 0.95, 0.98, 0.99, 1.0]\ntransition = [0.4, 0.5, 0.6, 0.7, 0.8]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 3.0))\n\n# Plot the data\nax.plot(time, trot, label='trot', color='green')\nax.plot(time, pace, label='pace', color='red')\nax.plot(time, bound, label='bound', color='purple')\nax.plot(time, pronk, label='pronk', color='brown')\nax.plot(time, transition, label='transition', color='gray')\n\n# Set the title and labels\nax.set_title('Gait Distribution Over Time: Policy ORC=111')\nax.set_xlabel('Time (s)')\nax.set_ylabel('% Experiments')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/bar_20.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nlabels = ['LIMA', 'Vicuna', 'Koala', 'Wizardlm', 'Self-Instruct']\nap1kL_wins = [68, 82, 68, 72, 68]\ntie = [24, 15, 22, 19, 23]\nag1k_wins = [8, 3, 10, 9, 9]\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\nbar_width = 0.2\nindex = range(len(labels))\n\n# Plot bars for AP-1kL wins\nax.bar([i - bar_width for i in index], ap1kL_wins, bar_width, label='AP-1kL wins')\n\n# Plot bars for Tie\nax.bar(index, tie, bar_width, label='Tie')\n\n# Plot bars for AG-1k wins\nax.bar([i + bar_width for i in index], ag1k_wins, bar_width, label='AG-1k wins')\n\n# Set labels and title\nax.set_xlabel('Labels')\nax.set_ylabel('Values')\nax.set_title('Bar Chart with Multiple Y-Axes')\nax.set_xticks(index)\nax.set_xticklabels(labels)\nax.legend()\n\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_21.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data\ncategories = ['Benefits', 'Reliability', 'Security', 'Privacy']\nbenefits_data = [14.8, 29.6, 29.6, 18.5, 8.4]\nreliability_data = [9.4, 24.1, 24.1, 27.8, 9.0]\nsecurity_data = [8.3, 14.8, 14.8, 16.7, 9.3]\nprivacy_data = [24.1, 29.6, 29.6, 16.7, 9.3]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot the data\nax.bar(categories, benefits_data, color='red')\nax.bar(categories, reliability_data, bottom=benefits_data, color='orange')\nax.bar(categories, security_data, bottom=[sum(x) for x in zip(benefits_data, reliability_data)], color='grey')\nax.bar(categories, privacy_data, bottom=[sum(x) for x in zip(benefits_data, reliability_data, security_data)], color='blue')\n\n# Set the labels and title\nax.set_xlabel('Categories')\nax.set_ylabel('Percentage')\nax.set_title('Eye Movement')\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/bar_22.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data for the plot\nx = np.arange(0.5, 1.55, 0.1)\ny1 = np.random.randint(-10, 20, size=11)\ny2 = np.random.randint(-10, 20, size=11)\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(6.0, 10.0))\n\n# Plot the data\nax.plot(x, y1, label='Ours')\nax.plot(x, y2, label='Saliency-based Sampling')\n\n# Set the title and labels\nax.set_title('Rate of Gain Change (%)')\nax.set_xlabel('Brightness')\nax.set_ylabel('Rate of Gain Change (%)')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/bar_23.pdf", "response": "import matplotlib.pyplot as plt\n\n# Define the data for the bar chart\ndata = {\n    'GPT4': [3.2, 3.1, 3.0, 2.8, 2.7],\n    'GPT-few-shot': [3.1, 3.0, 2.9, 2.8, 2.7],\n    'GPT3.5': [3.0, 2.9, 2.8, 2.7, 2.6],\n    'StarCoder': [2.9, 2.8, 2.7, 2.6, 2.5],\n    'Code Llama': [2.8, 2.7, 2.6, 2.5, 2.4],\n    'NCL': [2.7, 2.6, 2.5, 2.4, 2.3]\n}\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(9.0, 5.0))\n\n# Set the colors for each bar\ncolors = ['blue', 'orange', 'red', 'green', 'cyan']\n\n# Plot the bars\nfor i, (label, values) in enumerate(data.items()):\n    ax.barh(range(len(values)), values, color=colors[i % len(colors)], label=label)\n\n# Set the labels and title\nax.set_xlabel('Ratings')\nax.set_ylabel('Language Models')\nax.set_title('Ratings of Language Models on a Scale from 1-4')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/bar_24.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nmodels = ['Majority', 'Flan-T5', 'GPT-3.5', 'GPT-4', 'Wizard13b', 'Vicuna13b', 'Mistral17b']\naccuracies = [0.302, 0.601, 0.468, 0.653, 0.384, 0.379, 0.364]\n\n# Create bar chart\nplt.figure(figsize=(8.0, 4.0))\nbars = plt.bar(models, accuracies, color='green')\n\n# Add value labels\nfor bar in bars:\n    yval = bar.get_height()\n    plt.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 3), ha='center', va='bottom')\n\n# Set title and labels\nplt.title('Model Accuracy')\nplt.xlabel('Models')\nplt.ylabel('Accuracy')\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_25.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nproducts = ['Alpaca-52k+', 'Alpaga-1k+', 'LIMa-1k+']\nalpaca_52k_plus = [78.8, 67.4, 44.2]\nalpaga_1k_plus = [11.7, 18.1, 21.9]\nalpaga_1k_plus_losses = [9.5, 14.5, 33.9]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 4.0))\n\n# Plot the data\nax.barh(products, alpaca_52k_plus, color='orange', label='Refined-Alpaca-1k-longest wins')\nax.barh(products, alpaga_1k_plus, left=alpaca_52k_plus, color='blue', label='Alpaca-1k-longest wins')\nax.barh(products, alpaga_1k_plus_losses, left=[sum(x) for x in zip(alpaca_52k_plus, alpaga_1k_plus)], color='lightblue', label='Alpaca-1k-longest losses')\n\n# Set the title and labels\nax.set_title('GPT4-as-a-judge')\nax.set_xlabel('Score')\nax.set_ylabel('Products')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_26.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nemotions = ['Ang', 'Cn', 'Dis', 'Fea', 'Joy', 'Ntr', 'Sad', 'Sur']\nnegative = [100, 50, 20, 10, 100, 350, 50, 10]\npositive = [100, 50, 20, 10, 100, 350, 50, 10]\nnone = [100, 50, 20, 10, 100, 350, 50, 10]\nmixed = [100, 50, 20, 10, 100, 350, 50, 10]\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\nax.bar(emotions, negative, color='red', label='negative')\nax.bar(emotions, positive, color='green', bottom=negative, label='positive')\nax.bar(emotions, none, color='gray', bottom=[i+j for i,j in zip(negative, positive)], label='none')\nax.bar(emotions, mixed, color='orange', bottom=[i+j+k for i,j,k in zip(negative, positive, none)], label='mixed')\n\n# Add labels and title\nax.set_xlabel('Emotions')\nax.set_ylabel('Frequency')\nax.set_title('Emotion Frequency Distribution')\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_27.pdf", "response": "import matplotlib.pyplot as plt\n\n# Define the data\ndata = {\n    'GPT-4V': [0.9, 0.8, 0.7, 0.6, 0.5],\n    'RoboCodeX': [0.9, 0.8, 0.7, 0.6, 0.5]\n}\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(10.0, 3.0))\nbars = ax.bar(range(len(data)), data['GPT-4V'], color='green')\nax.bar(range(len(data)), data['RoboCodeX'], bottom=data['GPT-4V'], color='blue')\n\n# Add labels and title\nax.set_xlabel('Percentage of Total Trials')\nax.set_ylabel('Success')\nax.set_title('Success Rate Comparison')\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/bar_28.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\ndatasets = ['VOC 2012', 'COCO 2017']\ntransmission_delay_jpeg = [3.5, 2.5]\ntransmission_delay_deepjscss = [3.0, 2.0]\ntransmission_delay_ours = [3.2, 2.2]\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(6.0, 5.0))\nbar_width = 0.2\nindex = range(len(datasets))\n\n# Plot the bars for each dataset\nax.bar([i - bar_width for i in index], transmission_delay_jpeg, bar_width, label='JPEG')\nax.bar(index, transmission_delay_deepjscss, bar_width, label='DEEPJSCC w/ ofdm')\nax.bar([i + bar_width for i in index], transmission_delay_ours, bar_width, label='OURS')\n\n# Set the labels and title\nax.set_xlabel('Datasets')\nax.set_ylabel('Transmission Delay (ms)')\nax.set_title('Transmission Delay by Dataset')\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_29.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ncategories = ['Wave', 'Diffusion', 'Heat', 'Poison', 'Burgers', 'N-S']\nvalues = [1.2, 1.3, 1.4, 1.5, 1.6, 1.7]\n\n# Create a bar chart\nplt.figure(figsize=(10.0, 6.0))\nbars = plt.bar(categories, values, color='blue')\n\n# Add labels and title\nplt.xlabel('PDEs')\nplt.ylabel('log L2')\nplt.title('Log L2 vs PDEs')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nmodels = ['w/o DaQNR', 'w/o CPRN', 'w/o QCN', 'Full model']\nlive_data = [975, 975, 975, 975]\nsroi_data = [975, 975, 975, 975]\nt2013_data = [975, 975, 975, 975]\nlive_m_data = [975, 975, 975, 975]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 3.0))\n\n# Plot data\nax.bar(models, live_data, color='blue')\nax.bar(models, sroi_data, bottom=live_data, color='orange')\nax.bar(models, t2013_data, bottom=[x+y for x,y in zip(live_data, sroi_data)], color='cyan')\nax.bar(models, live_m_data, bottom=[x+y+z for x,y,z in zip(live_data, sroi_data, t2013_data)], color='yellow')\n\n# Set labels and title\nax.set_xlabel('Models')\nax.set_ylabel('Metric Values')\nax.set_title('Models')\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_30.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ncategories = ['Mixtral-8x7b-Instruct', 'GPT-3.5', 'GPT-4']\nzero_shot_values = [6.11, 28.33, 31.11, 44.44, 56.11, 85.0, 60.56, 99.44]\none_shot_values = [28.33, 31.11, 44.44, 56.11, 85.0, 60.56, 99.44]\nds_agent_values = [31.11, 44.44, 56.11, 85.0, 60.56, 99.44]\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\nbar_width = 0.25\nindex = range(len(categories))\n\n# Plot bars for each category\nax.bar([i - bar_width for i in index], zero_shot_values, bar_width, label='Zero-shot')\nax.bar(index, one_shot_values, bar_width, label='One-shot')\nax.bar([i + bar_width for i in index], ds_agent_values, bar_width, label='DS-Agent')\n\n# Set labels and title\nax.set_xlabel('Categories')\nax.set_ylabel('One pass rate (%)')\nax.set_title('One Pass Rate by Category')\nax.set_xticks(index)\nax.set_xticklabels(categories)\nax.legend()\n\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_31.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ncategories = ['LMM-based vs. TPLM-based', 'LMM-based vs. Template', 'LMM-based vs. Markdown', 'TPLM-based vs. Template', 'TPLM-based vs. Markdown', 'Markdown vs. Template']\nwin_values = [17.0, 20.0, 25.0, 30.5, 31.5, 19.5]\ntie_values = [54.0, 67.5, 56.5, 57.5, 54.5, 61.0]\nloss_values = [29.0, 12.5, 18.5, 12.0, 14.0, 19.5]\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\nbar_width = 0.2\nindex = range(len(categories))\n\nax.bar([i - bar_width for i in index], win_values, bar_width, label='Win')\nax.bar(index, tie_values, bar_width, label='Tie')\nax.bar([i + bar_width for i in index], loss_values, bar_width, label='Loss')\n\nax.set_xlabel('Categories')\nax.set_ylabel('Percentage')\nax.set_title('Comparison of Win, Tie, and Loss')\nax.set_xticks(index)\nax.set_xticklabels(categories)\nax.legend()\n\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_32.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nlabels = ['Combat Spider', 'Milky Cow', 'Shear Sheep']\nvalues = [0.72, 0.74, 0.56]\n\n# Create bar chart\nplt.figure(figsize=(6.0, 2.0))\nplt.bar(labels, values, color='blue')\n\n# Set title and labels\nplt.title('Probability of Improvement over VLM Image Encoder Baseline Returns')\nplt.xlabel('Baseline')\nplt.ylabel('Probability of Improvement')\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_33.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nsteps = [0, 1, 2, 3, 4]\navg_following_rate = [100.0, 60.0, 48.1, 100.0, 91.7]\nfollowing_related_format_error_rate = [100.0, 83.3, 48.1, 100.0, 91.7]\nfollowing_related_error_rate = [100.0, 100.0, 100.0, 100.0, 91.7]\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\nbars = ax.bar(steps, avg_following_rate, color='gray')\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 1), ha='center', va='bottom')\n\n# Set the title and labels\nax.set_title('Instruction Following Results In Different Steps (gpt-3.5-turbo)')\nax.set_xlabel('Steps')\nax.set_ylabel('Scores')\n\n# Set the y-axis limits\nax.set_ylim(0, 12)\n\n# Set the x-axis ticks\nax.set_xticks(steps)\nax.set_xticklabels(['0', '1', '2', '3', '4'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_34.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ncategories = ['coreutils', 'scp', 'tar', 'exim', 'menc.c', 'niginx', 'bzip2', 'astar', 'gobmk', 'h264.', 'liba', 'libm', 'libp', 'libq', 'libr', 'libt', 'libu', 'libv', 'libw', 'libx', 'liby', 'libz', 'liba', 'libb', 'libc', 'libd', 'libe', 'libf', 'libg', 'libh', 'libi', 'libj', 'libk', 'libl', 'libm', 'libn', 'libo', 'libp', 'libq', 'libr', 'libs', 'libt', 'libu', 'libv', 'libw', 'libx', 'liby', 'libz', 'liba', 'libb', 'libc', 'libd', 'libe', 'libf', 'libg', 'libh', 'libi', 'libj', 'libk', 'libl', 'libm', 'libn', 'libo', 'libp', 'libq', 'libr', 'libs', 'libt', 'libu', 'libv', 'libw', 'libx', 'liby', 'libz', 'liba', 'libb', 'libc', 'libd', 'libe', 'libf', 'libg', 'libh', 'libi', 'libj', 'libk', 'libl', 'libm', 'libn', 'libo', 'libp', 'libq', 'libr', 'libs', 'libt', 'libu', 'libv', 'libw', 'libx', 'liby', 'libz', 'liba', 'libb', 'libc', 'libd', 'libe', 'libf', 'libg', 'libh', 'libi', 'libj', 'libk', 'libl', 'libm', 'libn', 'libo', 'libp', 'libq', 'libr', 'libs', 'libt', 'libu', 'libv', 'libw', 'libx', 'liby', 'libz', 'liba', 'libb', 'libc', 'libd', 'libe', 'libf', 'libg', 'libh', 'libi', 'libj', 'libk', 'libl', 'libm', 'libn', 'libo', 'libp', 'libq', 'libr', 'libs', 'libt', 'libu', 'libv', 'libw', 'libx', 'liby', 'libz', 'liba', 'libb', 'libc', 'libd', 'libe', 'libf', 'libg', 'libh', 'libi', 'libj', 'libk', 'libl', 'libm', 'libn', 'libo', 'libp', 'libq', 'libr', 'libs', 'libt', 'libu', 'libv', 'libw', 'libx', 'liby', 'libz', 'liba', 'libb', 'libc', 'libd', 'libe', 'libf', 'libg', 'libh', 'libi', 'libj', 'libk', 'libl', 'libm', 'libn', 'libo', 'libp', 'libq', 'libr', 'libs', 'libt', 'libu', 'libv', 'libw', 'libx', 'liby', 'libz', 'liba', 'libb', 'libc', 'libd', 'libe', 'libf', 'libg', 'libh', 'libi', 'libj', 'libk', 'libl', 'libm', 'libn', 'libo', 'libp', 'libq', 'libr', 'libs', 'libt', 'libu', 'libv', 'libw', 'libx', 'liby', 'libz', 'liba', 'libb', 'libc', 'libd', 'libe', 'libf', 'libg', 'libh', 'libi', 'libj', 'libk', 'libl', 'libm', 'libn', 'libo', 'libp', 'libq', 'libr', 'libs', 'libt', 'libu', 'libv', 'libw', 'libx', 'liby', 'libz', 'liba', 'libb', 'libc', 'libd', 'libe', 'libf', 'libg', 'libh', 'libi', 'libj', 'libk', 'libl', 'libm', 'libn', 'libo', 'libp', 'libq', 'libr', 'libs', 'libt', 'libu', 'libv', 'libw', 'libx', 'liby', 'libz', 'liba', 'libb', 'libc', 'libd', 'libe', 'libf', 'libg', 'libh', 'libi', 'libj', 'libk', 'libl', 'libm', 'libn', 'libo', 'libp', 'libq', 'libr', 'libs', 'libt', 'libu', 'libv', 'libw', 'libx', 'liby', 'libz', 'liba', 'libb', 'libc', 'libd', 'libe', 'libf', 'libg', 'libh', 'libi', 'libj', 'libk', 'libl', 'libm', 'libn', 'libo', 'libp', 'libq', 'libr', 'libs', 'libt', 'libu', 'libv', 'libw', 'libx', 'liby', 'libz', 'liba', 'libb', 'libc', 'libd', 'libe', 'libf', 'libg', 'libh', 'libi', 'libj', 'libk', 'libl', 'libm', 'libn', 'libo', 'libp', 'libq', 'libr', 'libs', 'libt', 'libu', 'libv', 'libw', 'libx', 'liby', 'libz', 'liba', 'libb', 'libc', 'libd', 'libe', 'libf', 'libg', 'libh', 'libi', 'libj', 'libk', 'libl', 'libm', 'libn', 'libo', 'libp', 'libq', 'libr', 'libs', 'libt', 'libu', 'libv', 'libw', 'libx', 'liby', 'libz', 'liba', 'libb', 'libc', 'libd', 'libe', 'libf', 'libg', 'libh', 'libi', 'libj', 'libk', 'libl', 'libm', 'libn', 'libo', 'libp', 'libq', 'libr', 'libs', 'libt', 'libu', 'libv', 'libw', 'libx', 'liby', 'libz', 'liba', 'libb', 'libc', 'libd', 'libe', 'libf', 'libg', 'libh', 'libi', 'libj', 'libk', 'libl', 'libm', 'libn', 'libo', 'libp', 'libq', 'libr', 'libs', 'libt', 'libu', 'libv', 'libw', 'libx', 'liby', 'libz', 'liba', 'libb', 'libc', 'libd', 'libe', 'libf', 'libg', 'libh', 'libi', 'libj', 'libk', 'libl', 'libm', 'libn', 'libo', 'libp', 'libq', 'libr', 'libs', 'libt', 'libu', 'libv', 'libw', 'libx', 'liby', 'libz', 'liba', 'libb', 'libc', 'libd', 'libe', 'libf', 'libg', 'libh', 'libi', 'libj', 'libk', 'libl', 'libm', 'libn', 'libo', 'libp', 'libq', 'libr', 'libs', 'libt', 'libu', 'libv', 'libw', 'libx', 'liby', 'libz', 'liba', 'libb', 'libc', 'libd', 'libe', 'libf', 'libg', 'libh', 'libi', 'libj', 'libk', 'libl', 'libm', 'libn', 'libo', 'libp', 'libq', 'libr', 'libs', 'libt', 'libu', 'libv', 'libw', 'libx', 'liby', 'libz', 'liba', 'libb', 'libc', 'libd', 'libe', 'libf', 'libg', 'libh', 'libi', 'libj', 'libk', 'libl', 'libm', 'libn', 'libo', 'libp', 'libq', 'libr', 'libs', 'libt', 'libu', 'libv', 'libw', 'libx', 'liby', 'libz', 'liba', 'libb', 'libc', 'libd', 'libe', 'libf', 'libg', 'libh', 'libi', 'libj', 'libk', 'libl', 'libm', 'libn', 'libo', 'libp', 'libq', 'libr', 'libs', 'libt', 'libu', 'libv', 'libw', 'libx', 'liby', 'libz', 'liba', 'libb', 'libc', 'libd', 'libe', 'libf', 'libg', 'libh', 'libi', 'libj', 'libk', 'libl', 'libm', 'libn', 'libo', 'libp', 'libq', 'libr', 'libs', 'libt', 'libu', 'libv', 'libw', 'libx', 'liby', 'libz', 'liba', 'libb', 'libc', 'libd', 'libe', 'libf', 'libg', 'libh', 'libi', 'libj', 'libk', 'libl', 'libm', 'libn', 'libo', 'libp', 'libq', 'libr', 'libs', 'libt', 'libu', 'libv', 'libw', 'libx', 'liby', 'libz', 'liba', 'libb', 'libc', 'libd', 'libe', 'libf', 'libg', 'libh', 'libi', 'libj', 'libk', 'libl', 'libm', 'libn', 'libo', 'libp', 'libq', 'libr', 'libs', 'libt', 'libu', 'libv', 'libw', 'libx', 'liby', 'libz', 'liba', 'libb', 'libc', 'libd', 'libe', 'libf', 'libg', 'libh', 'libi', 'libj', 'libk', 'libl', 'libm', 'libn', 'libo', 'libp', 'libq', 'libr', 'libs', 'libt', 'libu', 'libv', 'libw', 'libx', 'liby', 'libz', 'liba', 'libb', 'libc', 'libd', 'libe', 'libf', 'libg', 'libh', 'libi', 'libj', 'libk', 'libl', 'libm', 'libn', 'libo', 'libp', 'libq', 'libr', 'libs', 'libt', 'libu', 'libv', 'libw', 'libx', 'liby', 'libz', 'liba', 'libb', 'libc', 'libd', 'libe', 'libf', 'libg', 'libh', 'libi', 'libj', 'libk', 'libl', 'libm', 'libn', 'libo', 'libp', 'libq', 'libr', 'libs', 'libt', 'libu', 'libv', 'libw', 'libx', 'liby', 'libz', 'liba', 'libb', 'libc', 'libd', 'libe', 'libf', 'libg', 'libh', 'libi', 'libj', 'libk', 'libl', 'libm', 'libn', 'libo', 'libp', 'libq', 'libr', 'libs', 'libt', 'libu', 'libv', 'libw', 'libx', 'liby', 'libz', 'liba', 'libb', 'libc', 'libd', 'libe', 'libf', 'libg', 'libh', 'libi', 'libj', 'libk', 'libl', 'libm', 'libn', 'libo', 'libp', 'libq', 'libr', 'libs', 'libt', 'libu', 'libv', 'libw', 'libx', 'liby', 'libz', 'liba', 'libb', 'libc', 'libd', 'libe', 'libf', 'libg', 'libh', 'libi', 'libj', 'libk', 'libl', 'libm', 'libn', 'libo', 'libp', 'libq', 'libr', 'libs', 'libt', 'libu', 'libv', 'libw', 'libx', 'liby', 'libz', 'liba', 'libb', 'libc', 'libd', 'libe', 'libf', 'libg', 'libh', 'libi', 'libj', 'libk', 'libl', 'libm', 'libn', 'libo', 'libp', 'libq', 'libr', 'libs', 'libt', 'libu', 'libv', 'libw', 'libx', 'liby', 'libz', 'liba', 'libb', 'libc', 'libd', 'libe', 'libf', 'libg', 'libh', 'libi', 'libj', 'libk', 'libl', 'libm', 'libn', 'libo', 'libp', 'libq', 'libr', 'libs', 'libt', 'libu', 'libv', 'libw', 'libx', 'liby', 'libz', 'liba', 'libb', 'libc', 'libd', 'libe', 'libf', 'libg', 'libh', 'libi', 'libj', 'libk', 'libl', 'libm', 'libn', 'libo', 'libp', 'libq', 'libr', 'libs', 'libt', 'libu', 'libv', 'libw', 'libx', 'liby', 'libz', 'liba', 'libb', 'libc', 'libd', 'libe', 'libf', 'libg', 'libh', 'libi', 'libj', 'libk', 'libl', 'libm', 'libn', 'libo', 'libp', 'libq', 'libr', 'libs', 'libt', 'libu', 'libv', 'libw', 'libx', 'liby', 'libz', 'liba', 'libb', 'libc', 'libd', 'libe', 'libf', 'libg', 'libh', 'libi', 'libj', 'libk', 'libl', 'libm', 'libn', 'libo', 'libp', 'libq', 'libr', 'libs', 'libt', 'libu', 'libv', 'libw', 'libx', 'liby', 'libz', 'liba', 'libb', 'libc', 'libd', 'libe', 'libf', 'libg', 'libh', 'libi', 'libj', 'libk', 'libl', 'libm', 'libn', 'libo', 'libp', 'libq', 'libr', 'libs', 'libt', 'libu', 'libv', 'libw', 'libx', 'liby', 'libz', 'liba', 'libb', 'libc', 'libd', 'libe', 'libf', 'libg', 'libh', 'libi', 'libj', 'libk', 'libl', 'libm', 'libn', 'libo', 'libp', 'libq', 'libr', 'libs', 'libt', 'libu', 'libv', 'libw', 'libx', 'liby', 'libz', 'liba', 'libb', 'libc', 'libd', 'libe', 'libf', 'libg', 'libh', 'libi', 'libj', 'libk', 'libl', 'libm', 'libn', 'libo', 'libp', 'libq', 'libr', 'libs', 'libt', 'libu', 'libv', 'libw', 'libx', 'liby', 'libz', 'liba', 'libb', 'libc', 'libd', 'libe', 'libf', 'libg', 'libh', 'libi', 'libj', 'libk', 'libl', 'libm', 'libn', 'libo', 'libp', 'libq', 'libr', 'libs', 'libt', 'libu', 'libv', 'libw', 'libx', 'liby', 'libz', 'liba', 'libb', 'libc', '"}
{"file": "dataset/ori_500/bar_35.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nx = ['Llama2', 'Mistral']\ny1 = [5.52, 5.53]\ny2 = [5.83, 5.84]\ny3 = [5.54, 5.54]\ny4 = [6.57, 6.75]\ny5 = [6.81, 6.81]\ny6 = [7.08, 7.08]\ny7 = [6.9, 6.9]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Plot the data\nax.bar(x, y1, color='purple')\nax.bar(x, y2, bottom=y1, color='red')\nax.bar(x, y3, bottom=[sum(y) for y in zip(y1, y2)], color='green')\nax.bar(x, y4, bottom=[sum(y) for y in zip(y1, y2, y3)], color='orange')\nax.bar(x, y5, bottom=[sum(y) for y in zip(y1, y2, y3, y4)], color='brown')\nax.bar(x, y6, bottom=[sum(y) for y in zip(y1, y2, y3, y4, y5)], color='blue')\nax.bar(x, y7, bottom=[sum(y) for y in zip(y1, y2, y3, y4, y5, y6)], color='darkblue')\n\n# Set the title and labels\nax.set_title('MT-Bench Score')\nax.set_xlabel('Models')\nax.set_ylabel('Score')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_36.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nx = [100, 100]\ny1 = [49.98, 51.05]\ny2 = [49.63, 50.74]\n\n# Plotting\nplt.figure(figsize=(6.61, 5.23))\nplt.plot(x, y1, label='Random Sampling', color='blue')\nplt.plot(x, y2, label='ClusterClip', color='orange')\nplt.axhline(y=50, color='green', linestyle='--')\nplt.xlabel('Number of Clusters')\nplt.ylabel('MMLU')\nplt.title('Comparison of Sampling Techniques')\nplt.legend()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_37.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nx = ['ResNet18', 'AlexNet', 'ResNet50']\ny0 = [1.0, 1.0, 1.0]\ny50 = [1.8, 1.9, 1.6]\ny48 = [3.3, 2.9, 1.8]\ny75 = [7.4, 5.2, 2.7]\ny78 = [8.7, 6.1, 2.9]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(12.0, 4.0))\n\n# Plot bars\nax.bar(x, y0, color='pink')\nax.bar(x, y50, bottom=y0, color='orange')\nax.bar(x, y48, bottom=[sum(i) for i in zip(y0, y50)], color='green')\nax.bar(x, y75, bottom=[sum(i) for i in zip(y0, y50, y48)], color='cyan')\nax.bar(x, y78, bottom=[sum(i) for i in zip(y0, y50, y48, y75)], color='magenta')\n\n# Set labels and title\nax.set_xlabel('Perturbation')\nax.set_ylabel('Speedup')\nax.set_title('Speedup vs Perturbation')\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_38.pdf", "response": "import matplotlib.pyplot as plt\n\nfig, ax = plt.subplots(figsize=(7.0, 5.0))\n\n# Define the data\nx = ['CL-7b', 'CL-13b', 'CL-34b', 'DS-6.7b', 'DS-33b', 'SC']\ny = [20, 20, 20, 60, 60, 60]\ncolors = ['green', 'blue', 'red', 'purple', 'green', 'blue']\n\n# Create a bar chart\nax.bar(x, y, color=colors)\n\n# Set the title and labels\nax.set_title('LeetCode, DS-6.7b')\nax.set_xlabel('Test Cases')\nax.set_ylabel('Accuracy')\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/bar_39.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ngames = ['Vicuna', 'Koala', 'WizardLM', 'SInstruct', 'LIMA']\nrecost_wins = [53, 80, 116, 99, 179]\ntie_wins = [6, 33, 49, 50, 23]\nalpacawins_wins = [21, 67, 53, 103, 98]\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\nbar_width = 0.2\nindex = range(len(games))\n\n# Plot bars for each game\nax.bar([i - bar_width for i in index], recost_wins, bar_width, label='Recost (1% wins)')\nax.bar(index, tie_wins, bar_width, label='Tie')\nax.bar([i + bar_width for i in index], alpacawins_wins, bar_width, label='Alpaca wins')\n\n# Set labels and title\nax.set_xlabel('Games')\nax.set_ylabel('Wins')\nax.set_title('Game Wins by Category')\nax.set_xticks(index)\nax.set_xticklabels(games)\nax.legend()\n\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_4.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data\nbrands = ['CometKiwi', 'LaBSE', 'IF', 'Max', 'Ppl', 'STARE', 'Wass Combo', 'ALTI+']\nfpr_non_agg = [35.15, 26.86, 19.08, 22.09, 20.67, 38.99, 48.38, 58.99]\nfpr_agg = [66.19, 66.19, 66.19, 66.19, 66.19, 66.19, 66.19, 66.19]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Plot the data\nax.bar(brands, fpr_non_agg, color='green', label='Non-Aggregate')\nax.bar(brands, fpr_agg, bottom=fpr_non_agg, color='orange', label='Aggregate')\n\n# Add a horizontal line at the median\nmedian = np.median(fpr_non_agg)\nax.axhline(y=median, color='red', linestyle='--')\n\n# Set the title and labels\nax.set_title('FPR@90TPR on Guerrero et al. 2022')\nax.set_xlabel('Brands')\nax.set_ylabel('FPR@90TPR')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/bar_40.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Define the data\ncategories = ['Literal', 'Assignment', 'Operator', 'Comment', 'Operation', 'Exception Handling', 'Method Call', 'Return', 'Variable', 'External Class', 'Argument', 'Conditional Block', 'Loop', 'External Variable/Method', 'Method Declaration', 'Parameter']\nvalues = [140, 130, 120, 110, 100, 90, 80, 70, 60, 50, 40, 30, 20, 10, 0]\n\n# Create a bar chart\nbars = ax.bar(categories, values, color='blue')\n\n# Set the x-axis limits\nax.set_xlim(-50, 200)\n\n# Set the y-axis limits\nax.set_ylim(0, 160)\n\n# Set the title of the plot\nax.set_title('Relative Difference in Machine vs. Human Focus on Semantic Categories')\n\n# Set the labels for the x-axis and y-axis\nax.set_xlabel('Semantic Category')\nax.set_ylabel('Difference (%)')\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/bar_41.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nx = [5, 10, 20]\ny1 = [66.3, 61.9, 53.8]\ny2 = [10.1, 13.6, 13.7]\n\n# Plotting\nfig, ax = plt.subplots(figsize=(14.0, 4.0))\nax.bar(x, y1, color='blue', label='Truthful Recall')\nax.bar(x, y2, color='red', label='Misleading Recall')\n\n# Setting labels and title\nax.set_xlabel('Time')\nax.set_ylabel('Score')\nax.set_title('Scores Over Time')\nax.legend()\n\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_42.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data\nmodels = ['PROST', 'ARC-easy', 'COMVE', 'OpenBookQA', 'SciQ', 'NumSense', 'CoQA', 'ComQA2.0', 'ComQC', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2.0', 'ComQC2."}
{"file": "dataset/ori_500/bar_43.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\nx = ['LSTM-2/7b/0.1', 'Zephyr-7b/0.1', 'Qwen-7b/0.1', 'Med-PALM', 'GPT4']\ny1 = [48.1, 57.2, 59.3, 64.9, 72.3]\ny2 = [56.0, 62.2, 64.4, 66.4, 67.6]\ny3 = [54.3, 50.8, 59.3, 64.9, 72.3]\ny4 = [72.0, 71.0, 79.2, 80.4, 86.7]\ny5 = [84.4, 82.3, 80.4, 76.9, 66.7]\ny6 = [89.6, 86.1, 88.7, 93.8, 95.8]\ny7 = [83.2, 86.1, 88.7, 93.8, 95.8]\ny8 = [88.0, 80.9, 83.1, 88.3, 93.2]\ny9 = [83.2, 80.9, 83.1, 88.3, 93.2]\ny10 = [88.0, 80.9, 83.1, 88.3, 93.2]\ny11 = [88.0, 80.9, 83.1, 88.3, 93.2]\ny12 = [88.0, 80.9, 83.1, 88.3, 93.2]\ny13 = [88.0, 80.9, 83.1, 88.3, 93.2]\ny14 = [88.0, 80.9, 83.1, 88.3, 93.2]\ny15 = [88.0, 80.9, 83.1, 88.3, 93.2]\ny16 = [88.0, 80.9, 83.1, 88.3, 93.2]\ny17 = [88.0, 80.9, 83.1, 88.3, 93.2]\ny18 = [88.0, 80.9, 83.1, 88.3, 93.2]\ny19 = [88.0, 80.9, 83.1, 88.3, 93.2]\ny20 = [88.0, 80.9, 83.1, 88.3, 93.2]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Plot the data\nax.bar(x, y1, color='brown')\nax.bar(x, y2, bottom=y1, color='blue')\nax.bar(x, y3, bottom=[sum(i) for i in zip(y1, y2)], color='green')\nax.bar(x, y4, bottom=[sum(i) for i in zip(y1, y2, y3)], color='red')\n\n# Set the title and labels\nax.set_title('Performance Score (%)')\nax.set_xlabel('Model')\nax.set_ylabel('Score')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_44.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ncategories = ['AFAN', 'AFBE', 'AFCE', 'AFAO', 'AFEX', 'AFG', 'AFH', 'AFI', 'AFJ', 'AFK', 'AFL', 'AFP', 'AFP', 'AFR', 'AFS', 'AFT', 'AFV', 'AFW', 'AFX', 'AFY', 'AFZ', 'IC', 'SS']\ngpt35 = [42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21]\ngpt4 = [45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24]\n\n# Plotting\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\nbars = ax.bar(categories, gpt35, color='blue')\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 2), ha='center', va='bottom')\n\nbars = ax.bar(categories, gpt4, color='orange', bottom=gpt35)\nfor bar in bars:\n    yval = bar.get_height() + gpt35[bar.get_x()]\n    ax.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 2), ha='center', va='bottom')\n\nax.set_xlabel('Categories')\nax.set_ylabel('Non-NLAs')\nax.set_title('Non-NLAs by Category')\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_45.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nx = [3, 5, 7, 10]\ny1 = [-4.5, -4.5, -4.5, -4.5]\ny2 = [-4.5, -4.5, -4.5, -4.5]\ny3 = [-4.5, -4.5, -4.5, -4.5]\ny4 = [-4.5, -4.5, -4.5, -4.5]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 7.0))\n\n# Plot the data\nax.plot(x, y1, color='pink')\nax.plot(x, y2, color='red')\nax.plot(x, y3, color='lightblue')\nax.plot(x, y4, color='blue')\n\n# Set the title and labels\nax.set_title('Taboo')\nax.set_xlabel('Num of Constraint Words')\nax.set_ylabel('Score')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_46.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nproducts = ['Lavila', 'Video-LLaMA', 'BLIP1', 'BLIP2 Model', 'LLaVA', 'OSCaR', 'GPT4V']\nsales = [0.0, 0.71, 4.64, 4.64, 31.79, 73.93, 82.5]\n\n# Create a bar chart\nplt.figure(figsize=(10.0, 6.0))\nplt.bar(products, sales, color='blue')\n\n# Set the title and labels\nplt.title('Human Study')\nplt.xlabel('Products')\nplt.ylabel('Sales (%)')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_47.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\nfig, ax = plt.subplots(figsize=(13.0, 6.0))\n\n# Data\ndata = [\n    [22, 50, 28],\n    [25, 40, 35],\n    [30, 60, 10],\n    [26, 40, 37],\n    [45, 20, 35],\n    [50, 30, 20],\n    [38, 50, 30],\n    [42, 55, 22],\n    [20, 40, 20],\n    [35, 50, 30]\n]\n\n# Colors\ncolors = ['red', 'orange', 'pink']\n\n# Plotting\nfor i, row in enumerate(data):\n    ax.barh([i]*len(row), row, color=colors)\n\n# Labels\nax.set_yticks(range(len(data)))\nax.set_yticklabels(['HH', 'Reddit', 'IMDB', 'AVG'])\nax.set_xlabel('Percentage')\nax.set_title('COPR v.s. Golden (Human Eval)')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_48.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for plotting\ncategories = ['Accuracy', 'Unfairness']\nmovielens_data = [[32, 34, 35], [10, 11, 12]]\ntenrec_data = [[18, 19, 20], [12, 13, 14]]\n\n# Create a figure and axis\nfig, axes = plt.subplots(2, 1, figsize=(5.0, 6.0))\n\n# Plotting the first subplot\naxes[0].bar(categories, movielens_data[0], color='purple')\naxes[0].bar(categories, movielens_data[1], bottom=movielens_data[0], color='orange')\naxes[0].set_title('NDCG@20')\n\n# Plotting the second subplot\naxes[1].bar(categories, tenrec_data[0], color='purple')\naxes[1].bar(categories, tenrec_data[1], bottom=tenrec_data[0], color='orange')\naxes[1].set_title('CV@20')\n\n# Adjust layout\nplt.tight_layout()\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_49.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nresolutions = [224, 128, 64, 32]\naccuracies = [29, 60, 29, 87]\ncolors = ['blue', 'orange', 'pink', 'orange']\n\n# Create a bar chart\nplt.bar(resolutions, accuracies, color=colors)\n\n# Add labels and title\nplt.xlabel('Resolutions')\nplt.ylabel('Top-1 Acc (%)')\nplt.title('Top-1 Accuracy by Resolution and Method')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nx = ['Level 1', 'Level 2', 'Level 4']\ny1 = [50.0, 50.0, 50.0]\ny2 = [30.0, 28.0, 22.9]\ny3 = [22.0, 20.6, 16.8]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 3.0))\n\n# Plot the data\nax.bar(x, y1, color='yellow')\nax.bar(x, y2, bottom=y1, color='blue')\nax.bar(x, y3, bottom=[sum(i) for i in zip(y1, y2)], color='red')\n\n# Set the title and labels\nax.set_title('Uploads by Level')\nax.set_xlabel('Levels')\nax.set_ylabel('Uploads (k)')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_50.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ncategories = ['\u03bb=0.06', '\u03bb=0.08', '\u03bb=0.1']\nvalues = [\n    [39.4, 32.84, 19.66, 26.82, 22],\n    [35.18, 33.58, 26.82, 22],\n    [30, 28, 20.84, 22]\n]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 5.0))\n\n# Plot bars for each category\nfor i, category in enumerate(categories):\n    ax.bar(range(len(values[i])), values[i], label=category)\n\n# Set labels and title\nax.set_xlabel('Categories')\nax.set_ylabel('Rewards')\nax.set_title('Rewards by Category')\nax.legend()\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_51.pdf", "response": "import matplotlib.pyplot as plt\n\nfig, ax = plt.subplots(figsize=(12.0, 8.0))\nax.bar(['Cleaning / laundry', 'Crafting/knitting', 'Baker', 'Carpenter', 'Making Bricks', 'Gardening', 'Construction/renovation', 'Household management', 'Scooter mechanic', 'Farmer'], [5375, 4190, 3543, 3216, 2915, 2548, 2343, 2158, 2060, 2008], color='blue')\nplt.show()"}
{"file": "dataset/ori_500/bar_52.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ncategories = ['greeting', 'request', 'criticism', 'apology', 'persuasion', 'thanking', 'leave-taking']\nsynthetic_data = [8, 31, 24, 7, 10, 10, 10]\nhuman_authored_data = [16, 28, 11, 5, 15, 16, 9]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Plot the data\nbars = ax.bar(categories, synthetic_data, color='blue')\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 2), ha='center', va='bottom')\n\nbars = ax.bar(categories, human_authored_data, bottom=synthetic_data, color='red')\nfor bar in bars:\n    yval = bar.get_height() + synthetic_data[bar.get_x()]\n    ax.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 2), ha='center', va='bottom')\n\n# Set the title and labels\nax.set_title('Sentiment Analysis of Texts')\nax.set_xlabel('Sentiment Category')\nax.set_ylabel('Percentage')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_53.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data\nwords = ['small', 'certain', 'little', 'fraction', 'limited', 'a', 'day', 'few', 'new', 'substantial', 'tiny', 'very', 'wide', 'slight', 'medium', 'large', 'tall', 'short', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall', 'tall',"}
{"file": "dataset/ori_500/bar_54.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data\ncategories = ['Convertible', 'Coupe', 'Truck', 'SUV', 'Sedan']\nvalues = [0.1, 0.3, 0.4, 0.5, 0.2]\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(6.0, 2.0))\nbars = ax.bar(categories, values, color=['yellow', 'green', 'blue', 'darkblue', 'purple'])\n\n# Add labels and title\nax.set_xlabel('Category')\nax.set_ylabel('Probability of Improvement')\nax.set_title('Probability of Improvement over VLM Image Encoder Baseline Returns')\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/bar_55.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nemotions = ['Disapproval', 'Joy', 'Relief', 'Gratitude', 'Annoyance', 'Nervousness', 'Pride', 'Sadness', 'Unbored', 'Amusement']\nfrequencies = [2.1, 3.0, 3.5, 3.5, 6.0, 6.0, 6.6, 6.7, 7.0, 7.6]\n\n# Create a bar chart\nplt.figure(figsize=(8.0, 8.0))\nbars = plt.bar(emotions, frequencies, color='red')\n\n# Add value labels on top of each bar\nfor bar in bars:\n    yval = bar.get_height()\n    plt.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 1), ha='center', va='bottom')\n\n# Set the title and labels\nplt.title('Emotion Frequencies')\nplt.xlabel('Emotion')\nplt.ylabel('Frequency (%)')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_56.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\nfig, ax = plt.subplots(figsize=(12.0, 8.0))\nax.bar(['Making Bricks', 'Carpenter', 'Baker', 'Crafting/knitting', 'Cleaning/laundering', 'Gardening'], [400, 500, 600, 700, 800, 900], color=['red', 'orange', 'yellow', 'green', 'blue', 'cyan'])\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_57.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ncategories = ['GDP Growth', 'Unemployment Rate', 'Inflation Rate', 'NASDAQ', 'Exchange Rate', 'Real Estate Prices', 'Corporate Profits']\nus_values = [37, 29, 26, 41, 39, 35, 33]\nchina_values = [10, 10, 10, 10, 10, 10, 10]\neu_values = [10, 10, 10, 10, 10, 10, 10]\nbrazil_values = [10, 10, 10, 10, 10, 10, 10]\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\nbar_width = 0.2\nindex = range(len(categories))\n\nax.bar([i - bar_width for i in index], us_values, bar_width, label='US')\nax.bar(index, china_values, bar_width, label='China')\nax.bar([i + bar_width for i in index], eu_values, bar_width, label='EU')\nax.bar([i + 2 * bar_width for i in index], brazil_values, bar_width, label='Brazil')\n\nax.set_xlabel('Categories')\nax.set_ylabel('Values')\nax.set_title('Economic Indicators')\nax.set_xticks(index)\nax.set_xticklabels(categories)\nax.legend()\n\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_58.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ncities = ['New York', 'Los Angeles', 'Chicago', 'Houston', 'Phoenix', 'Philadelphia']\nexcellent = [50, 40, 30, 20, 10, 0]\ngood = [40, 30, 20, 10, 0, 0]\nmoderate = [30, 20, 10, 0, 0, 0]\npoor = [20, 10, 0, 0, 0, 0]\nvery_poor = [10, 0, 0, 0, 0, 0]\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\nax.barh(cities, excellent, color='red', label='Excellent')\nax.barh(cities, good, left=excellent, color='pink', label='Good')\nax.barh(cities, moderate, left=[sum(x) for x in zip(excellent, good)], color='lightgrey', label='Moderate')\nax.barh(cities, poor, left=[sum(x) for x in zip(excellent, good, moderate)], color='blue', label='Poor')\nax.barh(cities, very_poor, left=[sum(x) for x in zip(excellent, good, moderate, poor)], color='darkblue', label='Very Poor')\n\n# Set labels and title\nax.set_xlabel('Number of People')\nax.set_title('City Ratings')\nax.legend()\n\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_59.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data\ncategories = ['External Class', 'Argument', 'Loop', 'Conditional Statement', 'Variable Declaration', 'Method Declaration', 'Parameter']\npositive_differences = [80, 70, 60, 50, 40, 30, 20]\nnegative_differences = [0, 0, 0, 0, 0, 0, 0]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Plot the positive differences\nax.bar(categories, positive_differences, color='green')\n\n# Plot the negative differences\nax.bar(categories, negative_differences, color='red', bottom=positive_differences)\n\n# Set the title and labels\nax.set_title('Relative Difference in Machine vs. Human Focus on Semantic Categories')\nax.set_xlabel('Semantic Category')\nax.set_ylabel('Difference (%)')\n\n# Set the y-axis limits\nax.set_ylim(0, 80)\n\n# Display the plot\nplt.show()"}
{"file": "dataset/ori_500/bar_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nemotions = ['Disappointment', 'Embarrassment', 'Oblivious', 'Delight', 'Excitement', 'Disapproval', 'Joy', 'Relief', 'Gratitude', 'Annoyance', 'Nervousness', 'Pride', 'Sadness', 'Unbored', 'Amusement']\nfrequencies = [7, 7, 6, 6, 6, 6, 5, 5, 4, 4, 3, 3, 2, 1]\n\n# Create a bar chart\nplt.figure(figsize=(8.0, 8.0))\nplt.bar(emotions, frequencies, color='blue')\n\n# Set the title and labels\nplt.title('Emotion Frequencies')\nplt.xlabel('Emotion')\nplt.ylabel('Frequency (%)')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_60.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ncategories = ['FMLP-Rec', 'BERT4Rec', 'SASRec', 'Case', 'GRU4Rec']\nvalues = [-0.7, 4.8, -8.5, -15.9, 19.7]\n\n# Create a bar chart\nplt.figure(figsize=(10.0, 8.0))\nbars = plt.bar(categories, values, color='red')\n\n# Add value labels on top of each bar\nfor bar in bars:\n    yval = bar.get_height()\n    plt.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 1), ha='center', va='bottom')\n\n# Set the title and labels\nplt.title('Yelp Ratings')\nplt.xlabel('Categories')\nplt.ylabel('Ratings')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_61.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data for each category\ncategories = ['Patents Filed', 'Research Investment', 'Smartphone Usage', 'Internet Penetration']\nvalues = [270, 260, 250, 240]\ncolors = ['red', 'green', 'blue', 'purple']\n\n# Create a bar chart with the data\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\nbars = ax.bar(categories, values, color=colors)\n\n# Add labels and title\nax.set_xlabel('Category')\nax.set_ylabel('Value')\nax.set_title('Bar Chart Example')\n\n# Display the plot\nplt.show()"}
{"file": "dataset/ori_500/bar_62.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ncategories = ['greeting', 'request', 'criticism', 'apology', 'persuasion', 'thanking', 'leave-taking']\nsynthetic_data = [12, 35, 28, 15, 18, 14, 16]\nhuman_authored_data = [18, 32, 15, 8, 20, 22, 12]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Plot the data\nbars = ax.bar(categories, synthetic_data, color='blue')\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 1), ha='center', va='bottom')\n\nbars = ax.bar(categories, human_authored_data, bottom=synthetic_data, color='orange')\nfor bar in bars:\n    yval = bar.get_height() + synthetic_data[bar.get_x()]\n    ax.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 1), ha='center', va='bottom')\n\n# Set the title and labels\nax.set_title('Sentiment Analysis of Texts')\nax.set_xlabel('Sentiment Category')\nax.set_ylabel('Percentage')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_63.pdf", "response": "import matplotlib.pyplot as plt\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\nax.bar([0, 1, 2], [0.4, 0.5, 0.6], color='blue')\nax.set_title('Scores by Category Over Time')\nax.set_xlabel('Category')\nax.set_ylabel('Score')\nplt.show()"}
{"file": "dataset/ori_500/bar_64.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nregions = ['West', 'East', 'South', 'North']\nco2 = [40.44, 54.46, 92.15, 65.49]\npm = [11.59, 25.36, 32.84, 22.89]\nso2 = [17.38, 32.19, 48.23, 37.12]\nno2 = [39.63, 36.03, 96.03, 65.49]\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(10.0, 7.0))\nbar_width = 0.2\nindex = range(len(regions))\n\nax.bar([i - bar_width for i in index], co2, bar_width, label='CO2 (ppm)')\nax.bar(index, pm, bar_width, label='PM (\u00b5g/m\u00b3)')\nax.bar([i + bar_width for i in index], so2, bar_width, label='SO2 (\u00b5g/m\u00b3)')\nax.bar([i + 2 * bar_width for i in index], no2, bar_width, label='NO2 (\u00b5g/m\u00b3)')\n\nax.set_xlabel('Region')\nax.set_ylabel('Air Quality Metrics')\nax.set_title('Air Quality Metrics by Region')\nax.set_xticks(index)\nax.set_xticklabels(regions)\nax.legend()\n\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_65.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data\nx = np.arange(-3.0, 0.0, 0.5)\ny1 = [-2.2, -2.3, -3.3]\ny2 = [-1.9, -1.7, -1.9]\ny3 = [-1.8, -1.6, -3.2]\ny4 = [-1.4, -1.1, -1.9]\ny5 = [-0.6, -0.7, -0.8]\ny6 = [-0.5, -0.5, -0.5]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot the data\nax.bar(x, y1, color='red')\nax.bar(x, y2, bottom=y1, color='blue')\nax.bar(x, y3, bottom=[sum(y) for y in zip(y1, y2)], color='orange')\nax.bar(x, y4, bottom=[sum(y) for y in zip(y1, y2, y3)], color='cyan')\nax.bar(x, y5, bottom=[sum(y) for y in zip(y1, y2, y3, y4)], color='magenta')\nax.bar(x, y6, bottom=[sum(y) for y in zip(y1, y2, y3, y4, y5)], color='yellow')\n\n# Set the title and labels\nax.set_title('Scores by group and constraint word count')\nax.set_xlabel('Score')\nax.set_ylabel('Constraint Word Count')\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/bar_66.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data\ngdp_data = {\n    \"USA\": [-0.8, -0.7, -0.6, -0.5, -0.4, -0.3, -0.2, -0.1, 0],\n    \"China\": [-0.8, -0.7, -0.6, -0.5, -0.4, -0.3, -0.2, -0.1, 0],\n    \"Germany\": [-0.8, -0.7, -0.6, -0.5, -0.4, -0.3, -0.2, -0.1, 0],\n    \"Brazil\": [-0.8, -0.7, -0.6, -0.5, -0.4, -0.3, -0.2, -0.1, 0]\n}\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Set the x-axis limits\nax.set_xlim(-1.0, 0.0)\n\n# Set the y-axis limits\nax.set_ylim(-0.8, 0.0)\n\n# Set the tick labels for the x-axis\nax.set_xticks(np.arange(-1.0, 0.1, 0.2))\nax.set_xticklabels(['-1.0', '-0.8', '-0.6', '-0.4', '-0.2', '0.0'])\n\n# Set the tick labels for the y-axis\nax.set_yticks(np.arange(-0.8, 0.1, 0.2))\nax.set_yticklabels(['-0.8', '-0.6', '-0.4', '-0.2', '0.0'])\n\n# Set the title of the plot\nax.set_title('Negative GDP Growth Rates by Country and Year')\n\n# Set the labels for the columns\ncolumn_labels = ['GDP growth 2018', 'GDP growth 2019', 'GDP growth 2020', 'GDP growth 2021']\n\n# Set the colors for each column\ncolors = ['red', 'green', 'blue', 'purple']\n\n# Plot the data\nfor i, (country, data) in enumerate(gdp_data.items()):\n    ax.bar(column_labels, data, color=colors[i % len(colors)], label=country)\n\n# Add a legend to the plot\nax.legend()\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/bar_67.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nmodels = ['GPT4V', 'OSCaR', 'LLaMA', 'BLIP2', 'BLIP1', 'Video-LLMA', 'Lavila']\npercentages = [82.5, 73.93, 31.79, 4.64, 4.64, 0.71, 0.0]\n\n# Create a bar chart\nplt.figure(figsize=(12.0, 8.0))\nplt.bar(models, percentages, color='blue')\n\n# Set the title and labels\nplt.title('Human Study')\nplt.xlabel('Model')\nplt.ylabel('Percentage (%)')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_68.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\ncategories = ['Traffic Flow', 'Accident Rate', 'Public Transport Usage', 'Road Condition']\nvalues = [50, 20, 40, 85]\ncolors = ['blue', 'cyan', 'lightblue', 'lightgreen']\n\n# Create a bar chart\nplt.bar(categories, values, color=colors)\n\n# Set the title and labels\nplt.title('Stacked Bar Chart of Transportation Data')\nplt.xlabel('Categories')\nplt.ylabel('Values')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_69.pdf", "response": "import matplotlib.pyplot as plt\n\nfig, ax = plt.subplots(figsize=(10.0, 7.0))\nax.barh(['Category A', 'Category B', 'Category C', 'Category D', 'Category E', 'Category F', 'Category G'], [80, 60, 60, 60, 60, 60, 60], color=['orange', 'orange', 'orange', 'orange', 'orange', 'orange', 'orange'])\nax.set_yticks([0, 1, 2, 3, 4, 5, 6])\nax.set_yticklabels(['Category A', 'Category B', 'Category C', 'Category D', 'Category E', 'Category F', 'Category G'])\nax.set_xlabel('Sales Units')\nax.set_title('Enhanced Stacked Bar Chart with Textures and Annotated Values')\nplt.show()"}
{"file": "dataset/ori_500/bar_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ncategories = ['SEQ', 'REPLAY', 'MTL']\nprobing_fgt = [84.3, 9.12, 37.9]\nobserved_fgt = [83, 9.12, 37.9]\nfeature_embedding_distance = [0.83, 0.6, 0.11]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot bars for each category\nax.bar(categories, probing_fgt, color='green', label='Probing FGT')\nax.bar(categories, observed_fgt, color='lightgreen', bottom=probing_fgt, label='Observed FGT')\nax.bar(categories, feature_embedding_distance, color='orange', bottom=[p + o for p, o in zip(probing_fgt, observed_fgt)], label='Feature Embedding Distance')\n\n# Set labels and title\nax.set_xlabel('Categories')\nax.set_ylabel('Feature Embedding Distance (%)')\nax.set_title('Feature Embedding Distance by Category')\nax.legend()\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_70.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data\nx = np.array([1, 2, 3, 4, 5, 6])\ny1 = np.array([10, 8, 12, 10, 6, 8])\ny2 = np.array([11, 5, 10, 10, 12, 15])\ny3 = np.array([8, 12, 8, 10, 8, 7])\ny4 = np.array([10, 10, 10, 10, 12, 10])\ny5 = np.array([15, 15, 10, 10, 12, 10])\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\nax.bar(x, y1, color='cyan')\nax.bar(x, y2, bottom=y1, color='green')\nax.bar(x, y3, bottom=y1+y2, color='lightblue')\nax.bar(x, y4, bottom=y1+y2+y3, color='orange')\nax.bar(x, y5, bottom=y1+y2+y3+y4, color='purple')\n\n# Set the title and labels\nax.set_title('Human Labeling and Agreement Bias Checking')\nax.set_xlabel('Human Annotator')\nax.set_ylabel('Scores')\n\n# Set the x-axis tick labels\nax.set_xticks(x)\nax.set_xticklabels(['1', '2', '3', '4', '5', '6'])\n\n# Set the y-axis limits\nax.set_ylim(0, 50)\n\n# Display the plot\nplt.show()"}
{"file": "dataset/ori_500/bar_71.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ncategories = ['coreutils', 'gizip', 'scp', 'libq', 'mcf', 'omnet.', 'perl']\nreg_opt = [90, 70, 60, 50, 40, 30, 20]\nbio_opt = [80, 60, 50, 40, 30, 20, 10]\nloop_opt = [100, 80, 70, 60, 50, 40, 30]\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(8.0, 4.0))\nax.bar(categories, reg_opt, color='green')\nax.bar(categories, bio_opt, bottom=reg_opt, color='yellow')\nax.bar(categories, loop_opt, bottom=[x+y for x, y in zip(reg_opt, bio_opt)], color='blue')\n\n# Set labels and title\nax.set_xlabel('Categories')\nax.set_ylabel('Percentage')\nax.set_title('Optimization Options')\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_72.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nmodels = ['Bactrian-X EN', 'Lima-X DE', 'Bactrian-X FR', 'Lima-X IT', 'Bactrian-X ES']\nimprovement = [3.5, 2.3, 4.4, 1.3, 0.7]\nlanguages = ['EN', 'DE', 'FR', 'IT', 'ES']\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\nbars = ax.bar(models, improvement, color='blue')\n\n# Add labels and title\nax.set_xlabel('Model with Language')\nax.set_ylabel('Improvement [%]')\nax.set_title('Model Performance Improvement by Language')\n\n# Add language labels on top of each bar\nfor bar, lang in zip(bars, languages):\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval, lang, ha='center', va='bottom')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_73.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nfiscal_quarter = [1, 2, 3, 4, 5]\ndow_jones_index = [0.5, 1.5, 2.2, 3.9, 4.6]\nnasdaq_index = [0.5, 1.5, 2.2, 3.9, 4.6]\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\nax.bar(fiscal_quarter, dow_jones_index, color='green', label='Dow Jones Index')\nax.bar(fiscal_quarter, nasdaq_index, color='orange', label='Nasdaq Index')\n\n# Set the title and labels\nax.set_title('Index Change (%)')\nax.set_xlabel('Fiscal Quarter')\nax.set_ylabel('Index Change (%)')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_74.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nx = ['E16.6', 'L26.8', 'D19.7', 'L22.2']\ny1 = [39.4, 35.18, 30.84, 34.06]\ny2 = [35.18, 34.06, 30.84, 34.06]\ny3 = [34.06, 33.18, 28.0, 34.06]\ny4 = [33.18, 32.84, 24.27, 34.06]\ny5 = [32.84, 32.4, 20.84, 34.06]\ny6 = [32.4, 31.4, 19.66, 34.06]\ny7 = [31.4, 30.84, 14.66, 34.06]\ny8 = [30.84, 30.4, 12, 34.06]\ny9 = [30.4, 28.0, 11.66, 34.06]\ny10 = [28.0, 24.27, 10, 34.06]\ny11 = [24.27, 20.84, 9.16, 34.06]\ny12 = [20.84, 19.66, 8.4, 34.06]\ny13 = [19.66, 18.84, 7, 34.06]\ny14 = [18.84, 16, 6, 34.06]\ny15 = [16, 14, 5, 34.06]\ny16 = [14, 12, 4, 34.06]\ny17 = [12, 10, 3, 34.06]\ny18 = [10, 8.4, 2, 34.06]\ny19 = [8.4, 7, 1, 34.06]\ny20 = [7, 6, 0, 34.06]\ny21 = [6, 5, 0, 34.06]\ny22 = [5, 4, 0, 34.06]\ny23 = [4, 3, 0, 34.06]\ny24 = [3, 2, 0, 34.06]\ny25 = [2, 1, 0, 34.06]\ny26 = [1, 0, 0, 34.06]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Plot bars\nax.bar(x, y1, color='pink')\nax.bar(x, y2, bottom=y1, color='lightblue')\nax.bar(x, y3, bottom=[sum(i) for i in zip(y1, y2)], color='cyan')\nax.bar(x, y4, bottom=[sum(i) for i in zip(y1, y2, y3)], color='orange')\nax.bar(x, y5, bottom=[sum(i) for i in zip(y1, y2, y3, y4)], color='green')\nax.bar(x, y6, bottom=[sum(i) for i in zip(y1, y2, y3, y4, y5)], color='purple')\nax.bar(x, y7, bottom=[sum(i) for i in zip(y1, y2, y3, y4, y5, y6)], color='brown')\nax.bar(x, y8, bottom=[sum(i) for i in zip(y1, y2, y3, y4, y5, y6, y7)], color='grey')\nax.bar(x, y9, bottom=[sum(i) for i in zip(y1, y2, y3, y4, y5, y6, y7, y8)], color='olive')\nax.bar(x, y10, bottom=[sum(i) for i in zip(y1, y2, y3, y4, y5, y6, y7, y8, y9)], color='navy')\nax.bar(x, y11, bottom=[sum(i) for i in zip(y1, y2, y3, y4, y5, y6, y7, y8, y9, y10)], color='maroon')\nax.bar(x, y12, bottom=[sum(i) for i in zip(y1, y2, y3, y4, y5, y6, y7, y8, y9, y10, y11)], color='magenta')\nax.bar(x, y13, bottom=[sum(i) for i in zip(y1, y2, y3, y4, y5, y6, y7, y8, y9, y10, y11, y12)], color='lime')\nax.bar(x, y14, bottom=[sum(i) for i in zip(y1, y2, y3, y4, y5, y6, y7, y8, y9, y10, y11, y12, y13)], color='indigo')\nax.bar(x, y15, bottom=[sum(i) for i in zip(y1, y2, y3, y4, y5, y6, y7, y8, y9, y10, y11, y12, y13, y14)], color='silver')\nax.bar(x, y16, bottom=[sum(i) for i in zip(y1, y2, y3, y4, y5, y6, y7, y8, y9, y10, y11, y12, y13, y14, y15)], color='gold')\nax.bar(x, y17, bottom=[sum(i) for i in zip(y1, y2, y3, y4, y5, y6, y7, y8, y9, y10, y11, y12, y13, y14, y15, y16)], color='chartreuse')\nax.bar(x, y18, bottom=[sum(i) for i in zip(y1, y2, y3, y4, y5, y6, y7, y8, y9, y10, y11, y12, y13, y14, y15, y16, y17)], color='coral')\nax.bar(x, y19, bottom=[sum(i) for i in zip(y1, y2, y3, y4, y5, y6, y7, y8, y9, y10, y11, y12, y13, y14, y15, y16, y17, y18)], color='crimson')\nax.bar(x, y20, bottom=[sum(i) for i in zip(y1, y2, y3, y4, y5, y6, y7, y8, y9, y10, y11, y12, y13, y14, y15, y16, y17, y18, y19)], color='darkred')\nax.bar(x, y21, bottom=[sum(i) for i in zip(y1, y2, y3, y4, y5, y6, y7, y8, y9, y10, y11, y12, y13, y14, y15, y16, y17, y18, y19, y20)], color='darkgreen')\nax.bar(x, y22, bottom=[sum(i) for i in zip(y1, y2, y3, y4, y5, y6, y7, y8, y9, y10, y11, y12, y13, y14, y15, y16, y17, y18, y19, y20, y21)], color='darkblue')\nax.bar(x, y23, bottom=[sum(i) for i in zip(y1, y2, y3, y4, y5, y6, y7, y8, y9, y10, y11, y12, y13, y14, y15, y16, y17, y18, y19, y20, y21, y22)], color='darkorange')\nax.bar(x, y24, bottom=[sum(i) for i in zip(y1, y2, y3, y4, y5, y6, y7, y8, y9, y10, y11, y12, y13, y14, y15, y16, y17, y18, y19, y20, y21, y22, y23)], color='darkviolet')\nax.bar(x, y25, bottom=[sum(i) for i in zip(y1, y2, y3, y4, y5, y6, y7, y8, y9, y10, y11, y12, y13, y14, y15, y16, y17, y18, y19, y20, y21, y22, y23, y24)], color='darkcyan')\nax.bar(x, y26, bottom=[sum(i) for i in zip(y1, y2, y3, y4, y5, y6, y7, y8, y9, y10, y11, y12, y13, y14, y15, y16, y17, y18, y19, y20, y21, y22, y23, y24, y25)], color='darkslategray')\n\n# Set labels and title\nax.set_xlabel('Series Labels')\nax.set_ylabel('Reward Values')\nax.set_title('Bar Chart of Reward Values by Series Label')\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_75.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\ntrue_recall = [46.3, 57.9, 53.8, 43.7]\nmisleading_recall = [30.1, 34, 20, 19.4]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Plot the bars\nax.bar(range(len(true_recall)), true_recall, color='black', label='Truthful Recall')\nax.bar(range(len(misleading_recall)), misleading_recall, color='pink', label='Misleading Recall')\n\n# Set the labels and title\nax.set_xlabel('Recall')\nax.set_ylabel('Percentage')\nax.set_title('Truthful:Misleading = 2:0')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_76.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the bar chart\nindustries = ['Light Industry', 'Heavy Industry', 'Transportation', 'Residential']\ncurrent_year = [-1200, -1400, -1300, -1500]\nprevious_year = [-1800, -1600, -1700, -1900]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Set the color map\ncmap = plt.get_cmap('Blues')\n\n# Plot the bars for the current year\nbars_current = ax.bar(industries, current_year, color=cmap(0.2), label='Current Year')\n\n# Plot the bars for the previous year\nbars_previous = ax.bar(industries, previous_year, color=cmap(0.8), label='Previous Year')\n\n# Add a legend\nax.legend()\n\n# Set the title and labels\nax.set_title('Environmental Impact by Sector')\nax.set_xlabel('Industry Sectors')\nax.set_ylabel('Pollution Emissions (thousands of metric tons)')\n\n# Set the y-axis limits\nax.set_ylim(-200, 0)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_77.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ncities = ['Beijing', 'Shanghai', 'Guangzhou', 'Shenzhen', 'Chengdu']\ntemperatures = [12, 13, 17, 22, 19]\n\n# Create a bar chart\nplt.figure(figsize=(8.0, 4.0))\nbars = plt.bar(cities, temperatures, color='skyblue')\n\n# Add value labels\nfor bar in bars:\n    yval = bar.get_height()\n    plt.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 2), ha='center', va='bottom')\n\n# Set title and labels\nplt.title('Average City Temperatures')\nplt.xlabel('Cities')\nplt.ylabel('Temperature (\u00b0C)')\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_78.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nregions = ['Region 1', 'Region 2', 'Region 3', 'Region 4']\nemissions_2020 = [180, 160, 170, 190]\nemissions_2021 = [170, 150, 160, 180]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Plot the data\nax.bar(regions, emissions_2020, color='red', label='2020 Emissions')\nax.bar(regions, emissions_2021, color='blue', bottom=emissions_2020, label='2021 Emissions')\n\n# Set the title and labels\nax.set_title('Annual Pollution Emission Reductions')\nax.set_xlabel('Regions')\nax.set_ylabel('Emissions')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_79.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\ncategories = ['Question 1', 'Question 2', 'Question 3', 'Question 4', 'Question 5']\nresponses = [\n    [26.0, 13.0, 10.0, 17.0, 10.0],\n    [32.0, 10.0, 29.0, 15.0, 10.0],\n    [35.0, 22.0, 37.0, 33.0, 21.0],\n    [40.0, 14.0, 15.0, 13.0, 29.0],\n    [40.0, 14.0, 15.0, 13.0, 29.0]\n]\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\nbar_width = 0.2\nindex = range(len(categories))\n\nfor i, response in enumerate(responses):\n    ax.bar([j + i * bar_width for j in index], response, bar_width, label=f'Response {i+1}')\n\nax.set_xlabel('Questions')\nax.set_ylabel('Percentage')\nax.set_title('Survey Responses')\nax.set_xticks([j + bar_width for j in index])\nax.set_xticklabels(categories)\nax.legend()\n\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nx = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ny = [0.9, 0.8, 0.8, 0.8, 0.8, 0.8, 0.8, 0.8, 0.8, 1.0]\n\n# Plotting\nplt.figure(figsize=(10.0, 6.0))\nplt.bar(x, y, color='blue')\nplt.axhline(y=0.8, color='red', linestyle='-')\n\n# Labels and Title\nplt.xlabel('Top-10 super families in training dataset')\nplt.ylabel('Accuracy')\nplt.title('Model Performance')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_80.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data\nx = np.array([3, 5, 7, 9, 10])\ny1 = np.array([-1.2, -0.8, -0.4, 0.2, 0.6])\ny2 = np.array([-1.5, -1.1, -0.7, -0.3, 0.1])\ny3 = np.array([-1.8, -1.4, -1.0, -0.6, -0.2])\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Plot the data\nax.plot(x, y1, label='LLAMA-Default')\nax.plot(x, y2, label='LLAMA-HAG')\nax.plot(x, y3, label='Vicuna-Default')\nax.plot(x, y4, label='Vicuna-HAG')\n\n# Set the title and labels\nax.set_title('Taboo')\nax.set_xlabel('Num of Constraint Words')\nax.set_ylabel('Score')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/bar_81.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data\nbrands = ['LLaMA', 'Vicuna', 'Alpaca', 'WizardLM']\ntruthful_recall = [45.3, 56.9, 53.8, 27]\nmisleading_recall = [30.1, 34, 40, 20]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 4.0))\n\n# Plot the bars for truthful recall\nax.bar(brands, truthful_recall, color='blue')\n\n# Plot the bars for misleading recall\nax.bar(brands, misleading_recall, bottom=truthful_recall, color='pink')\n\n# Set the title and labels\nax.set_title('Truthful: Misleading = 2:0')\nax.set_xlabel('Brands')\nax.set_ylabel('Misleading Recall')\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/bar_82.pdf", "response": "import matplotlib.pyplot as plt\n\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\nrects1 = ax.bar(['Convertible', 'Coupe', 'Truck', 'SUV', 'Sedan'], [25, 25, 20, 25, 20], color='blue')\nrects2 = ax.bar(['Convertible New', 'Coupe New', 'Truck New', 'SUV New', 'Sedan New'], [20, 20, 15, 15, 15], color='green')\n\nax.set_ylabel('Probability of Improvement over VLM Image Encoder Baseline Returns')\nax.set_title('Probability of Improvement over VLM Image Encoder Baseline Returns')\n\nplt.show()"}
{"file": "dataset/ori_500/bar_83.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nemotions = ['Disapproval', 'Joy', 'Relief', 'Gratitude', 'Annoyance', 'Nervousness', 'Pride', 'Sadness', 'Unbored', 'Amusement']\ndisapproval = [2.1, 3.0, 3.5, 3.5, 6.0, 6.0, 6.7, 7.0, 7.0, 7.6]\njoy = [3.0, 3.0, 3.5, 3.5, 6.0, 6.0, 6.7, 7.0, 7.0, 7.6]\nrelief = [3.5, 3.0, 3.5, 3.5, 6.0, 6.0, 6.7, 7.0, 7.0, 7.6]\ngratitude = [3.5, 3.0, 3.5, 3.5, 6.0, 6.0, 6.7, 7.0, 7.0, 7.6]\nannoyance = [6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.7, 7.0, 7.0, 7.6]\nnervousness = [6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.7, 7.0, 7.0, 7.6]\npride = [6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.7, 7.0, 7.0, 7.6]\nsadness = [6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.7, 7.0, 7.0, 7.6]\nunbored = [6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.7, 7.0, 7.0, 7.6]\namusement = [6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.7, 7.0, 7.0, 7.6]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 4.0))\n\n# Plot the data\nax.bar(emotions, disapproval, color='red')\nax.bar(emotions, joy, bottom=disapproval, color='red')\nax.bar(emotions, relief, bottom=[x+y for x,y in zip(disapproval, joy)], color='red')\nax.bar(emotions, gratitude, bottom=[x+y+z for x,y,z in zip(disapproval, joy, relief)], color='red')\nax.bar(emotions, annoyance, bottom=[x+y+z+t for x,y,z,t in zip(disapproval, joy, relief, gratitude)], color='red')\nax.bar(emotions, nervousness, bottom=[x+y+z+t+u for x,y,z,t,u in zip(disapproval, joy, relief, gratitude, annoyance)], color='red')\nax.bar(emotions, pride, bottom=[x+y+z+t+u+v for x,y,z,t,u,v in zip(disapproval, joy, relief, gratitude, annoyance, nervousness)], color='red')\nax.bar(emotions, sadness, bottom=[x+y+z+t+u+v+w for x,y,z,t,u,v,w in zip(disapproval, joy, relief, gratitude, annoyance, nervousness, pride)], color='red')\nax.bar(emotions, unbored, bottom=[x+y+z+t+u+v+w+x for x,y,z,t,u,v,w,x in zip(disapproval, joy, relief, gratitude, annoyance, nervousness, pride, sadness)], color='red')\nax.bar(emotions, amusement, bottom=[x+y+z+t+u+v+w+x+y for x,y,z,t,u,v,w,x,y in zip(disapproval, joy, relief, gratitude, annoyance, nervousness, pride, sadness, unbored)], color='red')\n\n# Set the limits of the y-axis\nax.set_ylim(0, 8)\n\n# Set the title and labels\nax.set_title('Emotion Frequency Distribution')\nax.set_xlabel('Emotion')\nax.set_ylabel('Frequency')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_84.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nmovies = ['Attack on Titan', 'Game of Thrones', 'The Count of Monte Cristo', 'Demi-Gods and Semi-Devils', 'Notre-Dame de Paris']\nscores_0 = [0.4, 0.3, 0.2, 0.5, 0.7]\nscores_20 = [0.4, 0.3, 0.2, 0.5, 0.7]\nscores_40 = [0.4, 0.3, 0.2, 0.5, 0.7]\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\nbars = ax.bar(movies, scores_0, color='cyan')\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 2), ha='center', va='bottom')\n\n# Set labels and title\nax.set_xlabel('Movies')\nax.set_ylabel('Scores')\nax.set_title('Scores at Time 0')\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_85.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ncountries = ['Japan', 'Australia', 'Canada', 'Germany']\nenergy_consumption = [1600, 1700, 1500, 1900]\nelectricity_production = [1000, 1200, 1300, 1400]\nrenewable_energy_ratio = [10, 15, 20, 25]\nelectricity_consumption = [1100, 1200, 1300, 1400]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Plot bars for each country\nfor i, country in enumerate(countries):\n    ax.bar(country, energy_consumption[i], color='red')\n    ax.bar(country, electricity_production[i], bottom=energy_consumption[i], color='blue')\n    ax.bar(country, renewable_energy_ratio[i], bottom=[energy_consumption[i] + electricity_production[i] for _ in range(len(countries))], color='yellow')\n    ax.bar(country, electricity_consumption[i], bottom=[energy_consumption[i] + electricity_production[i] + renewable_energy_ratio[i] for _ in range(len(countries))], color='green')\n\n# Set labels and title\nax.set_xlabel('Country')\nax.set_ylabel('Energy Consumption (TWh)')\nax.set_title('Energy Consumption by Country')\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_86.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for plotting\ncategories = ['leave-taking', 'thanking', 'persuasion', 'apology', 'criticism', 'request', 'greeting']\nsynthetic_data = [10, 10, 10, 7, 24, 31, 8]\nhuman_authored_data = [9, 16, 15, 5, 11, 28, 16]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot the data\nbars = ax.bar(categories, synthetic_data, color='blue')\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 1), ha='center', va='bottom')\n\nbars = ax.bar(categories, human_authored_data, bottom=synthetic_data, color='green')\nfor bar in bars:\n    yval = bar.get_height() + synthetic_data[bar.get_x()]\n    ax.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 1), ha='center', va='bottom')\n\n# Set the title and labels\nax.set_title('Original')\nax.set_xlabel('Categories')\nax.set_ylabel('Percentage')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_87.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the first bar chart\ncategories = ['Beauty', 'Yelp', 'More']\nvalues = [5.1, 6, 19.7]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Plot the bars\nax.bar(categories, values, color='blue')\n\n# Set the title and labels\nax.set_title('Bar Chart')\nax.set_xlabel('Categories')\nax.set_ylabel('Values')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_88.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data for the bar chart\nx = np.arange(-3.5, 0.5, 0.5)\ny1 = [-3.2, -3.3, -3.2]\ny2 = [-3.3, -3.3, -3.3]\ny3 = [-3.2, -3.3, -3.2]\ny4 = [-3.2, -3.3, -3.2]\ny5 = [-3.2, -3.3, -3.2]\ny6 = [-3.2, -3.3, -3.2]\ny7 = [-3.2, -3.3, -3.2]\ny8 = [-3.2, -3.3, -3.2]\ny9 = [-3.2, -3.3, -3.2]\ny10 = [-3.2, -3.3, -3.2]\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Plot the bars\nax.bar(x, y1, color='red')\nax.bar(x, y2, color='green')\nax.bar(x, y3, color='purple')\nax.bar(x, y4, color='blue')\n\n# Set the title and labels\nax.set_title('Scores by group and constraint word count')\nax.set_xlabel('Score')\nax.set_ylabel('Group')\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/bar_89.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the first graph\nx1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ny1 = [0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75]\n\n# Data for the second graph\nx2 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ny2 = [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5]\n\n# Data for the third graph\nx3 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ny3 = [0.8, 0.8, 0.8, 0.8, 0.8, 0.8, 0.8, 0.8, 0.8, 0.8]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot the data\nax.plot(x1, y1, 'bo-')\nax.plot(x2, y2, 'ro-')\nax.plot(x3, y3, 'go-')\n\n# Set the title and labels\nax.set_title('Graphs of Accuracy and Precision')\nax.set_xlabel('Top-10 super families in training dataset')\nax.set_ylabel('Accuracy and Precision')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ncategories = ['Type', 'Span', 'T&S', 'Spurious', 'Total']\nmanual_mapping = [65, 45, 35, 25, 75]\nllm_revision_wcot = [85, 65, 55, 45, 95]\nllm_revision_wcot = [75, 55, 45, 35, 85]\nverifner = [60, 40, 30, 20, 70]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(9.0, 6.0))\n\n# Plot bars for each category\nax.bar(categories, manual_mapping, color='pink')\nax.bar(categories, llm_revision_wcot, bottom=manual_mapping, color='orange')\nax.bar(categories, llm_revision_wcot, bottom=[x + y for x, y in zip(manual_mapping, llm_revision_wcot)], color='green')\n\n# Set labels and title\nax.set_xlabel('Category')\nax.set_ylabel('Error correction rate (%)')\nax.set_title('GENIA')\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_90.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nmodels = ['GPT4V', 'OSCaR', 'LLaVA', 'BLIP2', 'BLIP1', 'Video-LLMA', 'Lavila']\nscores_a = [82.5, 73.93, 31.79, 4.64, 4.64, 0.71, 0.0]\nscores_b = [15.0, 10.0, 5.0, 10.0, 10.0, 15.0, 10.0]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(12.0, 8.0))\n\n# Plot bars for scores A\nbars_a = ax.bar(models, scores_a, color='red')\n\n# Plot bars for scores B\nbars_b = ax.bar(models, scores_b, color='blue')\n\n# Set labels and title\nax.set_xlabel('Model')\nax.set_ylabel('Score A (%)')\nax.set_title('Human Study')\n\n# Add value labels on top of the bars\nfor bar in bars_a:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 2), ha='center', va='bottom')\n\nfor bar in bars_b:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 2), ha='center', va='bottom')\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_91.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\npheme = ['GCN', 'RvNN', 'Hyphen', 'GET']\nf1_scores = [80, 85, 80, 90]\nparty_colors = ['blue', 'orange', 'red']\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Plot the data\nfor i, p in enumerate(pheme):\n    ax.bar(p, f1_scores[i], color=party_colors[i % len(party_colors)])\n\n# Set the title and labels\nax.set_title('Pheme vs Macro F1-score')\nax.set_xlabel('Pheme')\nax.set_ylabel('Macro F1-score')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_92.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\nax.bar([0, 100, 200, 300, 400, 500, 600, 700, 800], [100, 200, 300, 400, 500, 600, 700, 800, 900], color='green')\nax.set_xlabel('Count')\nax.set_ylabel('Role')\nax.set_title('Resonance Preference Plot for rich-context')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_93.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\neffort_data = [20.4, 29.6, 20.4, 20.4, 9.3]\nbrainwave_data = [23.8, 14.3, 16.7, 38.1, 7.1]\ncategories = ['Very Low', 'Low', 'Neutral', 'High', 'Very High']\neffort_labels = ['Effort', 'Effort', 'Effort', 'Effort', 'Effort']\nbrainwave_labels = ['Brainwave', 'Brainwave', 'Brainwave', 'Brainwave', 'Brainwave']\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6, 3))\n\n# Plot Effort data\nax.bar(categories, effort_data, color='red', label=effort_labels[0])\nax.bar(categories, effort_data, bottom=effort_data, color='orange', label=effort_labels[1])\nax.bar(categories, effort_data, bottom=[sum(x) for x in zip(effort_data, effort_data)], color='yellow', label=effort_labels[2])\nax.bar(categories, effort_data, bottom=[sum(x) for x in zip(effort_data, effort_data, effort_data)], color='green', label=effort_labels[3])\nax.bar(categories, effort_data, bottom=[sum(x) for x in zip(effort_data, effort_data, effort_data, effort_data)], color='darkgreen', label=effort_labels[4])\n\n# Plot Brainwave data\nax.bar(categories, brainwave_data, color='red', label=brainwave_labels[0], alpha=0.5)\nax.bar(categories, brainwave_data, bottom=brainwave_data, color='orange', label=brainwave_labels[1], alpha=0.5)\nax.bar(categories, brainwave_data, bottom=[sum(x) for x in zip(brainwave_data, brainwave_data)], color='yellow', label=brainwave_labels[2], alpha=0.5)\nax.bar(categories, brainwave_data, bottom=[sum(x) for x in zip(brainwave_data, brainwave_data, brainwave_data)], color='green', label=brainwave_labels[3], alpha=0.5)\nax.bar(categories, brainwave_data, bottom=[sum(x) for x in zip(brainwave_data, brainwave_data, brainwave_data, brainwave_data)], color='darkgreen', label=brainwave_labels[4], alpha=0.5)\n\n# Set labels and title\nax.set_xlabel('Categories')\nax.set_ylabel('Percentage')\nax.set_title('Survey Results')\n\n# Show legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_94.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the first graph\nx = [0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3, 1.4]\ny1 = [-10, -10, -10, -10, -10, -10, -10, -10, -10, -10]\ny2 = [-10, -10, -10, -10, -10, -10, -10, -10, -10, -10]\n\n# Data for the second graph\nx2 = [-150, -140, -130, -120, -110, -100, -90, -80, -70, -60, -50, -40, -30, -20, -10, 0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\ny3 = [50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50]\ny4 = [40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40]\ny5 = [30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30]\ny6 = [20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20]\ny7 = [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10]\ny8 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot the data\nax.plot(x, y1, 'r', label='Ours')\nax.plot(x, y2, 'b', label='Saliency-based Sampling')\n\n# Set the title and labels\nax.set_title('Rate of Gain Change[%]')\nax.set_xlabel('Brightness')\nax.set_ylabel('Rate of Gain Change[%]')\n\n# Add a legend\nax.legend()\n\n# Create a second subplot\nax2 = fig.add_subplot(212)\n\n# Plot the data for the second graph\nax2.plot(x2, y3, 'r', label='Ours')\nax2.plot(x2, y4, 'b', label='Saliency-based Sampling')\nax2.plot(x2, y5, 'r', label='Ours')\nax2.plot(x2, y6, 'b', label='Saliency-based Sampling')\nax2.plot(x2, y7, 'r', label='Ours')\nax2.plot(x2, y8, 'b', label='Saliency-based Sampling')\n\n# Set the title and labels\nax2.set_title('Rate of Gain Change[%]')\nax2.set_xlabel('Scale')\nax2.set_ylabel('Rate of Gain Change[%]')\n\n# Add a legend\nax2.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_95.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nmodels = ['Bactrian-X EN', 'Lima-X DE', 'Bactrian-X FR', 'Lima-X IT', 'Bactrian-X ES']\nperformance = [3.5, 2.3, 4.4, 1.3, -0.7]\nlanguage = ['EN', 'DE', 'FR', 'IT', 'ES']\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot the data\nax.bar(models, performance, color='blue')\n\n# Set the title and labels\nax.set_title('Model Performance Improvement by Language')\nax.set_xlabel('Model with Language')\nax.set_ylabel('Model Performance')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_96.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the first chart\nx1 = ['Random', 'Ours', 'SOTA']\ny1 = [66.3, 61.9, 53.8]\ny2 = [10.1, 13.6, 13.7]\ny3 = [49.3, 45.7, 41.6]\n\n# Data for the second chart\nx2 = ['Random', 'Ours', 'SOTA']\ny4 = [48.0, 42.6, 36.5]\ny5 = [40.5, 49.5, 41.0]\ny6 = [36.3, 36.5, 31.5]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Plot the bars for the first chart\nax.bar(x1, y1, color='blue')\nax.bar(x1, y2, bottom=y1, color='red')\nax.bar(x1, y3, bottom=[sum(i) for i in zip(y1, y2)], color='blue')\n\n# Plot the bars for the second chart\nax.bar(x2, y4, color='blue')\nax.bar(x2, y5, bottom=y4, color='red')\nax.bar(x2, y6, bottom=[sum(i) for i in zip(y4, y5)], color='blue')\n\n# Set the title and labels\nax.set_title('Truthful:Misleading = 2:0')\nax.set_xlabel('Misleading')\nax.set_ylabel('Score')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_97.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Define the data\nx = np.array([1, 2, 3, 4, 5, 6])\ny1 = np.array([50, 40, 30, 20, 10, 0])\ny2 = np.array([55, 45, 35, 25, 15, 5])\ny3 = np.array([60, 50, 40, 30, 20, 10])\n\n# Plot the data\nax.bar(x, y1, color='red')\nax.bar(x, y2, bottom=y1, color='blue')\nax.bar(x, y3, bottom=y1+y2, color='green')\n\n# Set the title and labels\nax.set_title('Human Labeling and Agreement Bias Checking 1')\nax.set_xlabel('Human Annotator')\nax.set_ylabel('Scores')\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/bar_98.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data\nmodels = ['Model A', 'Model B', 'Model C', 'Model D', 'Model E', 'Model F', 'Model G', 'Model H', 'Model I']\ncontrastive_search_scores = [54.9, 71.5, 79.2, 60.3, 54.5, 52.9, 42.4, 7.1, 2.0]\nbeam_search_scores = [83.3, 92.6, 96.4, 89.2, 83.3, 80.4, 76.4, 83.3, 83.3]\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\nbar_width = 0.35\nindex = np.arange(len(models))\n\n# Plot the bars for contrastive search scores\nbars1 = ax.bar(index - bar_width/2, contrastive_search_scores, bar_width, label='Contrastive Search')\n\n# Plot the bars for beam search scores\nbars2 = ax.bar(index + bar_width/2, beam_search_scores, bar_width, label='Beam Search')\n\n# Add some text for labels, title, and custom x-axis tick labels, etc.\nax.set_xlabel('Models')\nax.set_ylabel('Scores')\nax.set_title('Performance Comparison by Model')\nax.set_xticks(index)\nax.set_xticklabels(models)\nax.legend()\n\nplt.show()"}
{"file": "dataset/ori_500/bar_99.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for Dataset 1\ncategories = ['Traffic Flow', 'Accident Rate', 'Public Transport Usage', 'Road Conditions', 'Public Satisfaction']\nvalues_1 = [150.0, 180.0, 75.0, 90.0, 80.0]\n\n# Data for Dataset 2\nvalues_2 = [2.5, 2.0, 1.5, 2.0, 2.0, 2.8]\n\n# Data for Dataset 3\nvalues_3 = [60.0, 55.0, 70.0, 65.0, 72.0]\n\n# Data for Dataset 4\nvalues_4 = [80.0, 85.0, 88.0, 80.0, 85.0]\n\n# Create a figure and axis\nfig, axes = plt.subplots(2, 2, figsize=(10.0, 8.0))\n\n# Plot Dataset 1\naxes[0, 0].bar(categories, values_1, color='orange')\naxes[0, 0].set_title('Dataset 1')\n\n# Plot Dataset 2\naxes[0, 1].bar(categories, values_2, color='blue')\naxes[0, 1].set_title('Dataset 2')\n\n# Plot Dataset 3\naxes[1, 0].bar(categories, values_3, color='green')\naxes[1, 0].set_title('Dataset 3')\n\n# Plot Dataset 4\naxes[1, 1].bar(categories, values_4, color='yellow')\naxes[1, 1].set_title('Dataset 4')\n\n# Adjust layout\nplt.tight_layout()\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\nax.bar([1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9])\nplt.show()\n```"}
{"file": "dataset/ori_500/box_10.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(9.0, 5.0))\n\n# Define the data\nx = np.arange(20, 90, 10)\ny1 = np.random.randint(20, 80, 7)\ny2 = np.random.randint(20, 80, 7)\ny3 = np.random.randint(20, 80, 7)\ny4 = np.random.randint(20, 80, 7)\n\n# Plot the data\nax.plot(x, y1, 'o', color='green')\nax.plot(x, y2, 'o', color='blue')\nax.plot(x, y3, 'o', color='red')\nax.plot(x, y4, 'o', color='purple')\n\n# Set the title and labels\nax.set_title('Daily Activity Durations')\nax.set_xlabel('Duration (minutes)')\nax.set_ylabel('Activity')\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/box_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for plotting\nbleu_values = [21, 20, 19]\nbloeu_values = [18, 17, 16]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Plot BLEU values\nax.bar(range(len(bleu_values)), bleu_values, color='blue', label='BLEU')\n\n# Plot BLOEU values\nax.bar(range(len(bloeu_values)), bloeu_values, color='orange', label='BLOEU')\n\n# Set labels and title\nax.set_xlabel('Models')\nax.set_ylabel('Scores')\nax.set_title('Model Performance Comparison')\nax.legend()\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Define the data\ndata = [\n    [50, 50, 50, 50, 50],\n    [40, 40, 40, 40, 40],\n    [30, 30, 30, 30, 30],\n    [20, 20, 20, 20, 20]\n]\n\n# Create a heatmap for each dataset\nfor i, row in enumerate(data):\n    ax.bar(range(len(row)), row, color='orange', alpha=0.5)\n\n# Set the title and labels\nax.set_title('Heatmap of Data')\nax.set_xlabel('X-axis')\nax.set_ylabel('Y-axis')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ncategories = ['SQL-Only', 'PoT', 'IC-LP', 'DAIL', 'IC-LP+PoT']\nvalues = [\n    [875, 875], \n    [875, 875], \n    [875, 875], \n    [875, 875], \n    [875, 875]\n]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 5.0))\n\n# Plot the data\nfor category, value in zip(categories, values):\n    ax.bar(category, value, color='blue')\n\n# Set the title and labels\nax.set_title('Execution Accuracy')\nax.set_xlabel('Category')\nax.set_ylabel('Accuracy')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the first plot\nregion_data = {\n    'DENSE (ref)': [0.88, 0.87, 0.83],\n    'Joint Multimodal Framework (ours)': [0.88, 0.87, 0.83],\n    'Cine': [0.88, 0.87, 0.83]\n}\n\n# Data for the second plot\nslice_data = {\n    'DENSE (ref)': [6.91, 6.91, 6.91],\n    'Joint Multimodal Framework (ours)': [9.33, 9.33, 9.33],\n    'Cine': [9.00, 9.00, 9.00]\n}\n\n# Create the first plot\nfig, ax1 = plt.subplots(figsize=(10.0, 5.0))\nax1.bar(region_data.keys(), region_data['DENSE (ref)'], color='blue', label='DENSE (ref)')\nax1.bar(region_data.keys(), region_data['Joint Multimodal Framework (ours)'], color='orange', bottom=region_data['DENSE (ref)'], label='Joint Multimodal Framework (ours)')\nax1.bar(region_data.keys(), region_data['Cine'], color='green', bottom=[sum(x) for x in zip(region_data['DENSE (ref)'], region_data['Joint Multimodal Framework (ours)'])], label='Cine')\nax1.set_ylabel('Region Classification Accuracy')\nax1.set_title('Region Classification Accuracy')\n\n# Create the second plot\nax2 = ax1.twinx()\nax2.bar(slice_data.keys(), slice_data['DENSE (ref)'], color='blue', label='DENSE (ref)', alpha=0.5)\nax2.bar(slice_data.keys(), slice_data['Joint Multimodal Framework (ours)'], color='orange', bottom=slice_data['DENSE (ref)'], label='Joint Multimodal Framework (ours)', alpha=0.5)\nax2.bar(slice_data.keys(), slice_data['Cine'], color='green', bottom=[sum(x) for x in zip(slice_data['DENSE (ref)'], slice_data['Joint Multimodal Framework (ours)'])], label='Cine', alpha=0.5)\nax2.set_ylabel('Slice Mean Error (ms)')\nax2.set_title('Slice Mean Error (ms)')\n\n# Show legend\nfig.legend(loc='upper right')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/box_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Sample data\ndata = {\n    'w/o att': [3, 2, 1],\n    'w/o DP': [4, 3, 2],\n    '1xQ': [5, 4, 3],\n    '20xQ': [6, 5, 4],\n    '200xQ': [7, 6, 5]\n}\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Plot the data\nfor key, values in data.items():\n    ax.plot(values, label=key)\n\n# Set the title and labels\nax.set_title('Z-Score')\nax.set_xlabel('Categories')\nax.set_ylabel('Z-Score')\n\n# Add a horizontal line at the threshold\nax.axhline(y=10, color='r', linestyle='-')\n\n# Show the plot\nplt.legend()\nplt.show()\n```"}
{"file": "dataset/ori_500/box_16.pdf", "response": "import matplotlib.pyplot as plt\nfig, ax = plt.subplots(figsize=(5.0, 5.0))\nax.bar(['REM', 'No POP', 'Separate M emb.', '4 x 4 tokenizer', 'No latent space C', 'C w/o action inputs'], [1.2, 1.3, 1.4, 1.5, 1.6, 1.7], color=['blue', 'green', 'red', 'purple', 'orange', 'pink'])\nplt.show()"}
{"file": "dataset/ori_500/box_17.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 4.0))\n\n# Define the data\nx = ['Run 1', 'Run 2', 'Run 3', 'Run 4', 'Run 5', 'Run 6', 'Run 7', 'Run 8', 'Run 9', 'Run 10']\ny = [np.random.randint(20, 100, 10) for _ in range(10)]\n\n# Plot the data\nfor i in range(len(x)):\n    ax.plot([i]*len(y[i]), y[i], 'o-')\n\n# Set the x-axis labels\nax.set_xticks(range(len(x)))\nax.set_xticklabels(x)\n\n# Set the y-axis label\nax.set_ylabel('Value')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_18.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ncategories = ['AR', 'LSTMAlpha', 'LSTMBeta', 'AE', 'EncDecAD', 'SRCCN', 'AnomalyTransformer', 'TimesNet', 'Donut', 'TFAD']\nvalues = [np.random.rand(10) for _ in range(len(categories))]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Plot the data\nfor category, value in zip(categories, values):\n    ax.bar(category, value, color='blue')\n\n# Set the title and labels\nax.set_title('Bar Chart')\nax.set_xlabel('Categories')\nax.set_ylabel('Values')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_19.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 4.0))\n\n# Define the data\ndata = [\n    [0.8, 0.9, 0.7, 0.6],\n    [0.7, 0.8, 0.6, 0.5],\n    [0.6, 0.7, 0.5, 0.4],\n    [0.5, 0.6, 0.4, 0.3],\n    [0.4, 0.5, 0.3, 0.2]\n]\n\n# Plot the data\nfor i in range(len(data)):\n    ax.plot(range(len(data[i])), data[i], 'o')\n\n# Set the title and labels\nax.set_title('EEM sentences')\nax.set_xlabel('Sentences')\nax.set_ylabel('\u03b4 (m/s)')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the plots\ndata = {\n    'Our Model': [2.4, 2.6],\n    'NTM+CL': [2.4, 2.6]\n}\n\n# Create a figure and a set of subplots\nfig, axes = plt.subplots(2, 2, figsize=(8.0, 6.0))\n\n# Plot the first subplot\naxes[0, 0].boxplot([data['Our Model'], data['NTM+CL']], vert=False)\naxes[0, 0].set_title('Ratings')\n\n# Plot the second subplot\naxes[0, 1].boxplot([data['Our Model'], data['NTM+CL']], vert=False)\naxes[0, 1].set_title('Intrusion')\n\n# Plot the third subplot\naxes[1, 0].boxplot([data['Our Model'], data['NTM+CL']], vert=False)\naxes[1, 0].set_title('Ratings')\n\n# Plot the fourth subplot\naxes[1, 1].boxplot([data['Our Model'], data['NTM+CL']], vert=False)\naxes[1, 1].set_title('Intrusion')\n\n# Adjust layout\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_20.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\nx = ['Digit span', 'Lexical decision', 'Lexical decision', 'Lexical decision', 'Reaction time', 'Reaction time', 'Reaction time', 'Trail making', 'Trail making', 'Trail making']\ny = ['Correct word reaction time', 'Correct word reaction time', 'Correct response ratio', 'Correct response ratio', 'Correct word reaction time', 'Correct word reaction time', 'Correct response ratio', 'Correct word reaction time', 'Correct word reaction time', 'Correct response ratio']\ngroup = ['target Group', 'target Group', 'target Group', 'control Group', 'target Group', 'control Group', 'control Group', 'target Group', 'control Group', 'control Group']\nvalue = [7, 20, 18, 10, 8, 9, 10, 225, 175, 150]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Plot the data\nfor i in range(len(x)):\n    ax.barh(y[i], value[i], color='blue' if group[i] == 'target Group' else 'orange')\n\n# Set the title and labels\nax.set_title('Performance Metrics')\nax.set_xlabel('Value')\nax.set_ylabel('Metrics')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_21.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nmethods = ['BG', 'IBP', 'SSP', 'NBP']\naccuracy = [80, 70, 60, 50]\ncolors = ['brown', 'green', 'blue', 'purple']\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(9.0, 5.0))\nbars = ax.bar(methods, accuracy, color=colors)\n\n# Add text annotations\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 2), ha='center', va='bottom')\n\n# Set labels and title\nax.set_xlabel('Methods')\nax.set_ylabel('Prediction Accuracy vD1')\nax.set_title('Methods')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/box_22.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nsearch_depth = [50, 100, 150, 200, 350]\nrewards = [\n    [-0.04, -0.04, -0.04],\n    [-0.04, -0.04, -0.04],\n    [-0.02, -0.02, -0.02],\n    [-0.02, -0.02, -0.02],\n    [0.02, 0.02, 0.02]\n]\n\n# Plotting\nfig, ax = plt.subplots(figsize=(6.0, 5.0))\nax.bar(search_depth, rewards[0], color='blue')\nax.bar(search_depth, rewards[1], color='blue')\nax.bar(search_depth, rewards[2], color='blue')\nax.bar(search_depth, rewards[3], color='blue')\nax.bar(search_depth, rewards[4], color='blue')\n\n# Setting labels and title\nax.set_xlabel('Search depth')\nax.set_ylabel('Reward')\nax.set_title('Rewards by Search Depth')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/box_23.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(9.0, 5.0))\n\n# Define the data\nactivities = ['Music Playtime', 'Reading Duration', 'Exercise Duration', 'Gaming Duration']\ndurations = [65.1, 55.7, 50.3, 29.5]\n\n# Create a bar chart\nbars = ax.bar(activities, durations, color='blue')\n\n# Add labels and title\nax.set_xlabel('Activity')\nax.set_ylabel('Duration (minutes)')\nax.set_title('Daily Activity Durations')\n\n# Display the plot\nplt.show()"}
{"file": "dataset/ori_500/box_24.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\ncategories = ['No Intervention', 'Low Intensity', 'High Intensity', 'Recovery', 'Environment']\nmean_values = [2.3, 2.1, 2.4, 2.2, 2.5]\nmedian_values = [2.2, 2.0, 2.1, 2.0, 2.3]\niqr_mean = [2.4, 2.2, 2.3, 2.1, 2.4]\niqr_median = [2.3, 2.1, 2.2, 2.0, 2.3]\n\n# Create a figure and a set of subplots\nfig, axs = plt.subplots(2, 2, figsize=(8.0, 8.0))\n\n# Plot the mean values\naxs[0, 0].bar(categories, mean_values, color='green')\naxs[0, 0].set_title('Mean Value')\n\n# Plot the median values\naxs[0, 1].bar(categories, median_values, color='blue')\naxs[0, 1].set_title('Median Value')\n\n# Plot the IQR mean values\naxs[1, 0].bar(categories, iqr_mean, color='red')\naxs[1, 0].set_title('IQR Mean')\n\n# Plot the IQR median values\naxs[1, 1].bar(categories, iqr_median, color='purple')\naxs[1, 1].set_title('IQR Median')\n\n# Adjust layout\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_25.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Sample data\nx = [-40, -20, 0, 20, 40]\ny = [7.6, 5.6, 3.6, 1.6, -0.4]\ncolors = ['blue', 'green']\nlabels = ['SOCP No Learning', 'SOCP Learning (Proposed)']\n\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\nfor i, color in enumerate(colors):\n    ax.plot(x, y, color=color, label=labels[i])\n\nax.set_xlabel('Thrust Angle [\u00b0]')\nax.set_ylabel('Angular Frequency [rad/s]')\nax.legend()\nplt.show()\n```"}
{"file": "dataset/ori_500/box_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Define the data\nx = ['ST_CVRP', 'ST_VRPTW', 'ST_All', 'Ours']\ny1 = [50, 40, 30, 20]\ny2 = [60, 60, 50, 40]\ny3 = [55, 55, 50, 45]\ny4 = [65, 65, 60, 55]\n\n# Plot the data\nax.bar(x, y1, color='blue')\nax.bar(x, y2, bottom=y1, color='purple')\nax.bar(x, y3, bottom=[sum(y) for y in zip(y1, y2)], color='orange')\nax.bar(x, y4, bottom=[sum(y) for y in zip(y1, y2, y3)], color='red')\n\n# Set the title and labels\nax.set_title('Performance Gap (%)')\nax.set_xlabel('Teams')\nax.set_ylabel('Performance Gap (%)')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ncategories = ['REM (ours)', 'IRIS', 'STORM', 'TWM', 'DreamerV3', 'SimPLe']\nhuman_scores = [0.2, 0.4, 0.6, 0.8, 1.0, 1.2]\nmean_scores = [0.3, 0.5, 0.7, 0.9, 1.1, 1.3]\nmedian_scores = [0.4, 0.6, 0.8, 1.0, 1.2, 1.4]\ninterquartile_mean_scores = [0.5, 0.7, 0.9, 1.1, 1.3, 1.5]\noptimal_gap_scores = [0.6, 0.8, 1.0, 1.2, 1.4, 1.6]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(12.0, 3.0))\n\n# Plot the data\nfor i, category in enumerate(categories):\n    ax.bar(category, human_scores[i], color='green')\n    ax.bar(category, mean_scores[i], bottom=human_scores[i], color='blue')\n    ax.bar(category, median_scores[i], bottom=[human_scores[i] + mean_scores[i]] * 2, color='orange')\n    ax.bar(category, interquartile_mean_scores[i], bottom=[human_scores[i] + mean_scores[i] + median_scores[i]] * 3, color='red')\n    ax.bar(category, optimal_gap_scores[i], bottom=[human_scores[i] + mean_scores[i] + median_scores[i] + interquartile_mean_scores[i]] * 4, color='purple')\n\n# Set the limits of the y-axis\nax.set_ylim(0, 1.6)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Define the data\nx = [2.0, 2.5, 3.0, 3.5, 4.0, 4.5, 5.0]\ny1 = [20, 25, 30, 35, 40, 45, 50]\ny2 = [22, 27, 32, 37, 42, 47, 52]\ny3 = [24, 29, 34, 39, 44, 49, 54]\n\n# Plot the data\nax.plot(x, y1, 'b-')\nax.plot(x, y2, 'y-')\nax.plot(x, y3, 'r-')\n\n# Set the title and labels\nax.set_title('Thrust Angle vs Angular Frequency')\nax.set_xlabel('Angular Frequency [rad/s]')\nax.set_ylabel('Thrust Angle [\u00b0]')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Define the data\nx = ['Perfect', 'Perfect', 'Perfect', 'Perfect', 'Perfect', 'Perfect', 'Perfect', 'Perfect', 'Perfect', 'Perfect']\ny = [10, 9, 10, 9, 10, 9, 10, 9, 10, 9]\ncolor = ['red', 'green', 'blue', 'red', 'green', 'blue', 'red', 'green', 'blue', 'red']\n\n# Plot the data\nax.bar(x, y, color=color)\n\n# Set the title and labels\nax.set_title('SE (bps/HZ)')\nax.set_xlabel('Method')\nax.set_ylabel('CEE (dB)')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(25.0, 8.0))\n\n# Define the data\ndata = {\n    'D-avg': [100, 150, 120, 130, 140],\n    'P-NN': [110, 160, 130, 140, 150],\n    'SAA': [120, 170, 140, 150, 160],\n    'CSA': [130, 180, 150, 160, 170],\n    'P-OL': [140, 190, 160, 170, 180]\n}\n\n# Plot the data\nfor key, values in data.items():\n    ax.plot(values, label=key)\n\n# Set the title and labels\nax.set_title('Linear travel times')\nax.set_xlabel('Time')\nax.set_ylabel('Speed')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ncategories = ['Only WSI Modality', 'Only CNV Modality', 'WSI+CNV Modality']\nhospital1 = [89, 87, 85]\nhospital2 = [91, 89, 87]\nhospital3 = [93, 91, 89]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(5.0, 5.0))\n\n# Plot bars for each category\nax.bar(categories, hospital1, color='blue')\nax.bar(categories, hospital2, bottom=hospital1, color='green')\nax.bar(categories, hospital3, bottom=[x + y for x, y in zip(hospital1, hospital2)], color='pink')\n\n# Set labels and title\nax.set_xlabel('Modality')\nax.set_ylabel('AUC')\nax.set_title('AUC by Modality and Hospital')\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\ndata = {\n    'Vanilla DIP': [22.8, 22.6, 22.4],\n    'SGLD DIP': [23.2, 23.0, 22.8],\n    'Ours': [23.2, 23.0, 22.8]\n}\n\n# Create a figure and axis\nfig, axes = plt.subplots(1, 2, figsize=(10.0, 5.0))\n\n# Plotting the first subplot\nfor key, values in data.items():\n    axes[0].boxplot(values, positions=[np.where(list(data.keys()) == key)[0][0]], widths=0.6)\naxes[0].set_title('0.25 HIAR')\naxes[0].set_xlabel('HIAR')\naxes[0].set_ylabel('PSNR (dB)')\naxes[0].set_yticks(np.arange(22.2, 23.5, 0.2))\naxes[0].grid(True)\n\n# Plotting the second subplot\nfor key, values in data.items():\n    axes[1].boxplot(values, positions=[np.where(list(data.keys()) == key)[0][0]], widths=0.6)\naxes[1].set_title('0.1 HIAR')\naxes[1].set_xlabel('HIAR')\naxes[1].set_ylabel('PSNR (dB)')\naxes[1].set_yticks(np.arange(22.2, 23.5, 0.2))\naxes[1].grid(True)\n\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/contour_1.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Define the data for the plot\nx = np.linspace(-80, 80, 100)\ny = np.linspace(-80, 80, 100)\nX, Y = np.meshgrid(x, y)\nZ1 = np.sin(X/20) * np.cos(Y/20)\nZ2 = np.sin(X/30) * np.cos(Y/30)\n\n# Plot the data\nc1 = ax.contourf(X, Y, Z1, cmap='coolwarm')\nc2 = ax.contourf(X, Y, Z2, cmap='Blues')\n\n# Add a colorbar\nfig.colorbar(c1, ax=ax, label='Ground Truth')\nfig.colorbar(c2, ax=ax, label='Generated')\n\n# Set the title\nax.set_title('T-SNE plot for the output variable Y3')\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/contour_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a grid of points\nx = np.linspace(0, 1, 100)\ny = np.linspace(0, 1, 100)\nX, Y = np.meshgrid(x, y)\n\n# Define the function\ndef f(X, Y):\n    return np.sin(np.pi * X) * np.cos(np.pi * Y)\n\n# Compute the function values\nZ = f(X, Y)\n\n# Create a color map\ncmap = plt.cm.viridis\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the function using imshow\nim = ax.imshow(Z, cmap=cmap, extent=[0, 1, 0, 1], origin='lower')\n\n# Add a color bar\ncbar = fig.colorbar(im)\n\n# Set the title\nax.set_title('f(x, y) = sin(\u03c0x)cos(\u03c0y)')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/contour_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Set the title of the plot\nax.set_title('DBP vs SBP')\n\n# Set the x-axis label\nax.set_xlabel('SBP (mmHg)')\n\n# Set the y-axis label\nax.set_ylabel('DBP (mmHg)')\n\n# Set the grid\nax.grid(True)\n\n# Set the limits for the x-axis and y-axis\nax.set_xlim(50, 160)\nax.set_ylim(50, 100)\n\n# Set the tick marks\nax.set_xticks(range(50, 160, 10))\nax.set_yticks(range(50, 100, 10))\n\n# Set the color map\ncmap = plt.cm.get_cmap('coolwarm')\n\n# Plot the data\nax.scatter(sbp, dbp, c=gender, cmap=cmap)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/contour_4.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the time array\nt = np.linspace(-4, 10, 1000)\n\n# Define the amplitude array\nA = np.array([10, 8, 6, 4, 2])\n\n# Calculate the phase array\nphi = np.array([0, 2*np.pi/3, 4*np.pi/3, 2*np.pi, 5*np.pi/3])\n\n# Calculate the signal\nsignal = A[0]*np.cos(t + phi[0]) + A[1]*np.cos(2*t + phi[1]) + A[2]*np.cos(3*t + phi[2]) + A[3]*np.cos(4*t + phi[3]) + A[4]*np.cos(5*t + phi[4])\n\n# Plot the signal\nplt.plot(t, signal)\nplt.xlabel('Time')\nplt.ylabel('Amplitude')\nplt.title('Signal')\nplt.show()"}
{"file": "dataset/ori_500/contour_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the radii of the circles\nradii = [10, 8, 6, 4, 2]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Draw the circles\nfor radius in radii:\n    circle = plt.Circle((0, 0), radius, color='lightcoral')\n    ax.add_artist(circle)\n\n# Set the limits of the plot\nax.set_xlim(-10, 10)\nax.set_ylim(-10, 10)\n\n# Set the aspect ratio to be equal\nax.set_aspect('equal')\n\n# Remove the axes\nax.axis('off')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/density_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 3.0))\n\n# Define the data\nx = np.linspace(8, 15, 100)\ny = np.sin(x)\n\n# Plot the data\nax.plot(x, y, color='blue')\n\n# Set the colorbar\ncbar = fig.colorbar(ax.imshow(y, cmap='hot', interpolation='nearest'))\n\n# Set the title and labels\nax.set_title('Sine Wave')\nax.set_xlabel('Time')\nax.set_ylabel('Amplitude')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/density_2.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 4.0))\n\n# Define the x and y coordinates for the triangle\nx = np.array([0, 1, 2, 0])\ny = np.array([0, 0, 1, 0])\n\n# Plot the triangle\nax.plot(x, y, 'r-')\n\n# Set the limits of the plot\nax.set_xlim(-1, 3)\nax.set_ylim(-1, 2)\n\n# Set the aspect ratio of the plot\nax.set_aspect('equal')\n\n# Display the plot\nplt.show()"}
{"file": "dataset/ori_500/density_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the plot\nx = [-1.0, -0.5, 0.0, 0.5, 1.0]\ny = [0.0, 0.6, 0.4, 0.6, 0.0]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 4.0))\n\n# Plot the data\nax.plot(x, y)\n\n# Set the title and labels\nax.set_title('KDE Plot of Spearman Coefficient Distribution')\nax.set_xlabel('Spearman Coefficient')\nax.set_ylabel('Density')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/density_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data\nx = np.arange(7, 16)\ny1 = np.random.rand(9)\ny2 = np.random.rand(9)\ny3 = np.random.rand(9)\ny4 = np.random.rand(9)\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(9.0, 6.0))\n\n# Plot the data\nax.plot(x, y1, label='Random Bundle')\nax.plot(x, y2, label='Increase Price')\nax.plot(x, y3, label='Strategic (Ours)')\nax.plot(x, y4, label='Reserved price p_i', color='red')\n\n# Set the title and labels\nax.set_title('Price Distribution')\nax.set_xlabel('p')\nax.set_ylabel('Shape Density')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/density_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(9.0, 6.0))\n\n# Define the data\nx = [0.0, 0.1, 0.2, 0.3, 0.4, 0.5]\ny1 = [14, 12, 10, 8, 6, 4]\ny2 = [14, 12, 10, 8, 6, 4]\n\n# Plot the data\nax.plot(x, y1, color='blue', label='Gucci')\nax.plot(x, y2, color='green', label='Chanel')\n\n# Set the title and labels\nax.set_title('Sales Data')\nax.set_xlabel('Density')\nax.set_ylabel('Value')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_1.pdf", "response": "import matplotlib.pyplot as plt\n\n# Data\nlabels = ['Deep Ens.', 'Dropout', 'Laplace', 'SNP', 'HET-XL', 'Baseline', 'GP', 'Shallow Ens.', 'DUQ', 'Corr. Pred.']\nlog_probabilities = [-0.500, -0.394, -0.443, -0.531, -0.539, -0.541, -0.543, -0.552, -0.590, -0.819]\ndistributions = [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5]\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\nbars = ax.bar(labels, log_probabilities, color='green')\n\n# Add distribution labels\nfor bar, dist in zip(bars, distributions):\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.01, f'{dist}', ha='center', va='bottom')\n\n# Set the y-axis limits\nax.set_ylim(-1.75, 0.75)\n\n# Set the y-axis label\nax.set_ylabel('Log Probability')\n\n# Set the title\nax.set_title('Log Probability of Different Models')\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/errorbar_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nx = [1, 2, 4, 8]\ny1 = [5, 6, 7, 6]\ny2 = [5, 6, 7, 6]\ny3 = [5, 6, 7, 6]\n\n# Plotting\nplt.figure(figsize=(8.0, 6.0))\nplt.plot(x, y1, 'b-', label='Baseline')\nplt.plot(x, y2, 'g-', label='SoftMoE (unchanged)')\nplt.plot(x, y3, 'm-', label='SoftMoE (\u2202 NumExperts)')\n\n# Setting labels and title\nplt.xlabel('Number of experts')\nplt.ylabel('IQM Human Normalized Score')\nplt.title('Expert dimension')\n\n# Adding legend\nplt.legend()\n\n# Displaying plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_11.pdf", "response": "import matplotlib.pyplot as plt\n\n# Define the data for the bars\nx = ['Hospital 1', 'Hospital 2', 'Hospital 3']\ny1 = [0.748, 0.762, 0.709]\ny2 = [0.759, 0.748, 0.687]\ny3 = [0.78, 0.78, 0.713]\n\n# Create a bar chart with three bars for each hospital\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\nax.bar(x, y1, color='blue')\nax.bar(x, y2, bottom=y1, color='orange')\nax.bar(x, y3, bottom=[sum(y) for y in zip(y1, y2)], color='green')\n\n# Set the title and labels\nax.set_title('Accuracy by hospital and method')\nax.set_xlabel('Hospital')\nax.set_ylabel('Accuracy')\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/errorbar_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ngpt4_buyer = [-12, -15, -18, -21]\nclade2_buyer = [-10, -13, -16, -19]\nclade2_1_buyer = [-8, -11, -14, -17]\nclade3_5_buyer = [-6, -9, -12, -15]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Plot the data\nax.bar(range(len(gpt4_buyer)), gpt4_buyer, color='orange', label='GPT-4 Buyer (valuation 40)')\nax.bar(range(len(clade2_buyer)), clade2_buyer, color='cyan', label='Claude-2 Buyer (valuation 40)')\nax.bar(range(len(clade2_1_buyer)), clade2_1_buyer, color='red', label='Claude-2.1 Buyer (valuation 40)')\nax.bar(range(len(clade3_5_buyer)), clade3_5_buyer, color='blue', label='GPT-3.5 Buyer (valuation 40)')\n\n# Set the x-axis labels\nax.set_xticks(range(len(gpt4_buyer)))\nax.set_xticklabels(['GPT-4', 'GPT-2.1', 'Claude-2', 'GPT-3.5'])\n\n# Set the y-axis limits\nax.set_ylim(-20, 0)\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the bar chart\ncategories = ['[m]', '[\u0394R]', '[\u0394R^-1]', '[none]']\nvalues = [0.96, 0.86, 0.78, 0.80]\n\n# Create a bar chart\nplt.bar(categories, values, color='gray')\n\n# Add vertical lines at the bottom of each bar\nfor i, v in enumerate(values):\n    plt.plot([i, i], [0, v], 'k-')\n\n# Set the title and labels\nplt.title('DNN x red (k=1)')\nplt.xlabel('Categories')\nplt.ylabel('Values')\n\n# Set the y-axis limits\nplt.ylim(0.5, 0.9)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nx = [1, 2, 3, 4, 5]\ny1 = [1.9, 1.7, 1.5, 1.3, 1.1]\ny2 = [1.8, 1.6, 1.4, 1.2, 1.0]\ny3 = [1.7, 1.5, 1.3, 1.1, 0.9]\ny4 = [1.6, 1.4, 1.2, 1.0, 0.8]\ny5 = [1.5, 1.3, 1.1, 0.9, 0.7]\ny6 = [1.4, 1.2, 1.0, 0.8, 0.6]\ny7 = [1.3, 1.1, 0.9, 0.7, 0.5]\n\n# Plotting\nplt.figure(figsize=(8.0, 6.0))\nplt.plot(x, y1, 'b-', label='Blue')\nplt.plot(x, y2, 'g-', label='Green')\nplt.plot(x, y3, 'r-', label='Red')\nplt.plot(x, y4, 'c-', label='Cyan')\nplt.plot(x, y5, 'm-', label='Magenta')\nplt.plot(x, y6, 'y-', label='Yellow')\nplt.plot(x, y7, 'k-', label='Black')\n\n# Setting labels and title\nplt.xlabel('X-axis')\nplt.ylabel('Y-axis')\nplt.title('Line Chart with Multiple Colors')\nplt.legend()\n\n# Display plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ncategories = ['Medium', 'Medium-replay', 'Medium-expert']\naug_values = [85, 82, 80]\nte_values = [75, 78, 76]\nqual_values = [90, 88, 85]\ndiff_values = [82, 80, 78]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 3.0))\n\n# Plot bars for each category\nbar_width = 0.2\nindex = range(len(categories))\nax.bar([i - bar_width for i in index], aug_values, bar_width, label='AUG')\nax.bar(index, te_values, bar_width, label='T-Estimation')\nax.bar([i + bar_width for i in index], qual_values, bar_width, label='Qualification')\nax.bar([i - bar_width for i in index], diff_values, bar_width, label='Diff-Stitch')\n\n# Set labels and title\nax.set_xlabel('Categories')\nax.set_ylabel('Performance')\nax.set_title('Performance Metrics')\nax.set_xticks(index)\nax.set_xticklabels(categories)\nax.legend()\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_16.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\ndata = [\n    [1, 0.5, 0.3],\n    [1, 0.5, 0.3],\n    [1, 0.5, 0.3],\n    [1, 0.5, 0.3],\n    [1, 0.5, 0.3],\n    [1, 0.5, 0.3],\n    [1, 0.5, 0.3],\n    [1, 0.5, 0.3]\n]\n\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\nax.bar(range(len(data)), [sum(row) for row in data], color='blue')\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_17.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the first chart\ncountries1 = ['Japan', 'Brazil', 'India', 'Germany', 'United States']\nvalues1 = [29, 27, 25, 23, 21]\n\n# Data for the second chart\ncountries2 = ['Japan', 'Brazil', 'India', 'Germany', 'United States']\nvalues2 = [34, 32, 30, 28, 26]\n\n# Create a figure and a set of subplots\nfig, axs = plt.subplots(2, 1, figsize=(6.0, 6.0))\n\n# Plot the first chart\naxs[0].bar(countries1, values1, color=['purple', 'pink', 'green', 'blue', 'purple'])\naxs[0].set_title('Higher Education Enrollment Rate')\n\n# Plot the second chart\naxs[1].bar(countries2, values2, color=['purple', 'pink', 'green', 'blue', 'purple'])\naxs[1].set_title('Student-Teacher Ratio')\n\n# Display the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_18.pdf", "response": "import matplotlib.pyplot as plt\nfig, axs = plt.subplots(2, 1, figsize=(6.0, 9.0))\naxs[0].bar(['Africa', 'South America', 'North America', 'Asia', 'Europe'], [1200, 1800, 5000, 10400, 3200], color=['lightgrey', 'yellow', 'green', 'blue', 'orange'])\naxs[0].set_title('Annual Carbon Dioxide Emissions')\naxs[0].set_ylabel('Millions of Metric Tons')\naxs[1].bar(['Africa', 'South America', 'North America', 'Asia', 'Europe'], [52, 34, 25, 28, 38], color=['lightgrey', 'yellow', 'green', 'blue', 'orange'])\naxs[1].set_title('Forest Coverage Rate')\naxs[1].set_ylabel('% of Land Area')\naxs[2].bar(['Africa', 'South America', 'North America', 'Asia', 'Europe'], [18, 28, 25, 34, 38], color=['lightgrey', 'yellow', 'green', 'blue', 'orange'])\naxs[2].set_title('Renewable Energy Usage')\naxs[2].set_ylabel('% of Total Energy Consumption')\nplt.tight_layout()\nplt.show()"}
{"file": "dataset/ori_500/errorbar_19.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the chart\ncities = ['Detroit', 'Philadelphia', 'Baltimore']\ncrime_rates = [50, 60, 40]\nhappiness_indices = [70, 80, 60]\nsocial_security_coverages = [90, 95, 85]\npolitical_participations = [75, 85, 90]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 9.0))\n\n# Plot the data\nax.bar(cities, crime_rates, color='purple', label='Crime Rate')\nax.bar(cities, happiness_indices, color='blue', label='Happiness Index')\nax.bar(cities, social_security_coverages, color='red', label='Social Security Coverage')\nax.bar(cities, political_participations, color='yellow', label='Political Participation')\n\n# Set the title and labels\nax.set_title('City Metrics')\nax.set_xlabel('Cities')\nax.set_ylabel('Percentage')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\njudge_names = ['GPT-3.5-Turbo', 'Claude 2.1', 'GPT-4-Turbo', 'Human']\nprotocols = ['Expert', 'Blind', 'Consultancy', 'Debate', 'Interactive Consultancy', 'Interactive Debate']\nscores = [\n    [80, 70, 90, 85, 95, 90],\n    [60, 50, 70, 65, 75, 70],\n    [90, 80, 100, 95, 105, 100],\n    [70, 60, 80, 75, 85, 80]\n]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot bars for each protocol\nfor i, protocol in enumerate(protocols):\n    ax.bar(judge_names, scores[i], color=plt.cm.tab20(i), label=protocol)\n\n# Set labels and title\nax.set_xlabel('Judge')\nax.set_ylabel('Judge Accuracy (%)')\nax.set_title('Protocol')\n\n# Add legend\nax.legend()\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_20.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\ncities = ['New York', 'London', 'Beijing', 'Tokyo']\nspring_temperatures = [12, 14, 13, 16]\nautumn_temperatures = [11, 13, 12, 15]\nspring_rainfall = [800, 900, 700, 1100]\nautumn_rainfall = [700, 800, 600, 1000]\nspring_wind_speed = [5, 4, 3, 6]\nautumn_wind_speed = [4, 3, 2, 5]\nspring_air_quality = [50, 60, 40, 70]\nautumn_air_quality = [40, 50, 30, 60]\n\n# Create a figure and axis\nfig, axes = plt.subplots(2, 2, figsize=(10.0, 5.0))\n\n# Plot 1: Annual Average Temperature\naxes[0, 0].bar(cities, spring_temperatures, color='orange')\naxes[0, 0].bar(cities, autumn_temperatures, bottom=spring_temperatures, color='pink')\naxes[0, 0].set_title('Annual Average Temperature')\naxes[0, 0].set_ylabel('Temperature (\u00b0C)')\naxes[0, 0].set_ylim(0, 20)\n\n# Plot 2: Annual Rainfall\naxes[0, 1].bar(cities, spring_rainfall, color='green')\naxes[0, 1].bar(cities, autumn_rainfall, bottom=spring_rainfall, color='blue')\naxes[0, 1].set_title('Annual Rainfall')\naxes[0, 1].set_ylabel('Rainfall (mm)')\naxes[0, 1].set_ylim(0, 600)\n\n# Plot 3: Wind Speed\naxes[1, 0].bar(cities, spring_wind_speed, color='orange')\naxes[1, 0].bar(cities, autumn_wind_speed, bottom=spring_wind_speed, color='pink')\naxes[1, 0].set_title('Wind Speed')\naxes[1, 0].set_ylabel('Speed (m/s)')\naxes[1, 0].set_ylim(0, 7)\n\n# Plot 4: Air Quality Index\naxes[1, 1].bar(cities, spring_air_quality, color='green')\naxes[1, 1].bar(cities, autumn_air_quality, bottom=spring_air_quality, color='blue')\naxes[1, 1].set_title('Air Quality Index')\naxes[1, 1].set_ylabel('AQI')\naxes[1, 1].set_ylim(0, 80)\n\n# Adjust layout\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_21.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ncountries = ['Germany', 'China', 'USA', 'India', 'Brazil']\nenergy_consumption = [0, 0, 0, 0, 0]\nrenewable_energy_usage = [20, 15, 10, 5, 0]\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\nax.bar(countries, renewable_energy_usage, color='blue')\n\n# Set the title and labels\nax.set_title('Renewable Energy Usage by Country')\nax.set_xlabel('Country')\nax.set_ylabel('Renewable Energy Usage (%)')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_22.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nmodels = ['Standard Model', 'Advanced Model', 'Optimal Model']\nefficiency_ratings = [0.25, 0.30, 0.20]\n\n# Create a bar chart\nplt.bar(models, efficiency_ratings, color='blue')\n\n# Set the title and labels\nplt.title('Energy Efficiency Ratings by Appliance Model')\nplt.xlabel('Appliance Model')\nplt.ylabel('Energy Efficiency Rating')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_23.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ncategories = ['Wind', 'Solar', 'Hydro', 'Nuclear']\nefficiency_scores = [\n    [85, 90, 95, 100],\n    [75, 80, 85, 90],\n    [65, 70, 75, 80],\n    [55, 60, 65, 70]\n]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Plot bars for each category\nfor i, category in enumerate(categories):\n    ax.bar(category, efficiency_scores[i], color='blue')\n\n# Set labels and title\nax.set_xlabel('Energy Assessment Entity')\nax.set_ylabel('Efficiency and Cost Scores')\nax.set_title('Energy Efficiency Assessment')\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_24.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nregions = ['North America', 'Europe', 'Asia', 'South America', 'Africa', 'Australia', 'Central America', 'Middle East', 'Southeast Asia', 'Scandinavia']\nhigh_school_graduation = [85, 90, 75, 80, 70, 65, 75, 80, 70, 65]\nhigher_education_enrollment = [110, 115, 90, 95, 85, 80, 90, 95, 85, 80]\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\nax.bar(regions, high_school_graduation, color='green')\nax.bar(regions, higher_education_enrollment, bottom=high_school_graduation, color='yellow')\n\n# Set labels and title\nax.set_xlabel('Region')\nax.set_ylabel('Percentage (%)')\nax.set_title('Educational Metrics by Region')\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_25.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nbrands = ['iPhone 13', 'Samsung S21', 'Google Pixel 6', 'OnePlus 9']\ntruthful_recall = [46.3, 30.1, 57.9, 19.4]\nmisleading_recall = [34.0, 53.8, 43.7, 20.0]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Plot bars for truthful recall\nax.bar(brands, truthful_recall, color='blue')\n\n# Plot bars for misleading recall\nax.bar(brands, misleading_recall, bottom=truthful_recall, color='orange')\n\n# Set title and labels\nax.set_title('Comparison of Recall Rates Across Products')\nax.set_xlabel('Product')\nax.set_ylabel('Recall Rate (%)')\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_26.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ncategories = ['Support', 'Delivery', 'Product Quality', 'Returns', 'Pricing', 'Website Usability', 'Checkout Process']\nsupport = [15, 75]\ndelivery = [18, 82]\nproduct_quality = [20, 78]\nreturns = [12, 85]\npricing = [17, 80]\nwebsite_usability = [10, 88]\ncheckout_process = [8, 90]\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\nax.bar(categories, support, color='blue')\nax.bar(categories, delivery, color='green')\nax.bar(categories, product_quality, color='cyan')\nax.bar(categories, returns, color='magenta')\nax.bar(categories, pricing, color='yellow')\nax.bar(categories, website_usability, color='purple')\nax.bar(categories, checkout_process, color='orange')\n\n# Set the title and labels\nax.set_title('Customer Satisfaction by Complaint Rate')\nax.set_xlabel('Complaint Rate')\nax.set_ylabel('Satisfaction Score')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_27.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ncategories = ['Support', 'Delivery', 'Product Quality', 'Returns', 'Pricing', 'Website Usability', 'Checkout Process']\nagree_rates = [75, 82, 78, 78, 85, 88, 90]\ndisagree_rates = [15, 18, 20, 12, 80, 10, 8]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot bars for agree rates\nax.bar(categories, agree_rates, color='pink')\n\n# Plot bars for disagree rates\nax.bar(categories, disagree_rates, bottom=agree_rates, color='orange')\n\n# Set labels and title\nax.set_xlabel('Categories')\nax.set_ylabel('Rates (%)')\nax.set_title('Customer Satisfaction Rates')\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_28.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\ncategories = ['Watering Frequency', 'Plant Density', 'Plant Variety', 'CO2 Levels', 'Pesticides', 'Temperature', 'Fertilizer', 'Soil pH', 'Water Quality', 'Sunlight']\nvalues = [0.15, 0.15, 0.15, 0.15, 0.15, 0.15, 0.15, 0.15, 0.15, 0.15]\n\n# Create a bar chart\nplt.figure(figsize=(10.0, 8.0))\nbars = plt.bar(categories, values, color='green')\n\n# Add labels and title\nplt.xlabel('Environmental Factors')\nplt.ylabel('Impact on Plant Growth (\u0394 to control)')\nplt.title('Impact of Environmental Factors on Plant Growth')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_29.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ncities = ['New York', 'Los Angeles', 'Chicago']\nmetrics = ['Traffic Volume', 'Public Transit', 'Accident Rate']\nvalues = [\n    [-25, -15, -20],\n    [-20, -10, -20],\n    [-15, -10, -15]\n]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 4.0))\n\n# Plot bars for each city\nfor i, city in enumerate(cities):\n    ax.bar(metrics, values[i], color=plt.cm.tab10(i), label=city)\n\n# Set labels and title\nax.set_xlabel('Metrics')\nax.set_ylabel('Metric Values')\nax.set_title('City Metrics')\nax.legend()\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 10.0))\n\n# Set the x-axis limits\nax.set_xlim(0, 1)\n\n# Set the y-axis limits\nax.set_ylim(0, 1)\n\n# Set the x-axis tick labels\nax.set_xticks([0, 0.2, 0.4, 0.6, 0.8, 1])\n\n# Set the y-axis tick labels\nax.set_yticks([0, 0.2, 0.4, 0.6, 0.8, 1])\n\n# Set the x-axis label\nax.set_xlabel('Hyperparameters')\n\n# Set the y-axis label\nax.set_ylabel('Metrics')\n\n# Set the title of the plot\nax.set_title('FashionMNIST (NEURAL)')\n\n# Draw horizontal lines\nfor i in range(1, 11):\n    ax.axhline(y=i/10, color='gray', linestyle='-')\n\n# Draw vertical lines\nfor i in range(1, 11):\n    ax.axvline(x=i/10, color='gray', linestyle='-')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_30.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the bar chart\ncategories = ['City A', 'City B', 'City C', 'City D']\nair_quality_scores = [-4.0, -3.0, -2.0, -1.0]\nwater_quality_scores = [0.0, 0.0, 0.0, 0.0]\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Set the title of the plot\nax.set_title('Environmental Impact Scores Across Cities')\n\n# Set the labels for the x-axis and y-axis\nax.set_xlabel('Cities')\nax.set_ylabel('Scores')\n\n# Set the tick labels for the y-axis\nax.set_yticks([-30, -20, -10, 0, 10, 20, 30])\n\n# Set the tick labels for the x-axis\nax.set_xticks(range(len(categories)))\nax.set_xticklabels(categories)\n\n# Plot the bars for air quality scores\nax.bar(categories, air_quality_scores, color='red')\n\n# Plot the bars for water quality scores\nax.bar(categories, water_quality_scores, bottom=air_quality_scores, color='green')\n\n# Add a legend to the plot\nax.legend(['Air Quality Score', 'Water Quality Score'])\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nwerewolf = [84.97, 67.17, 78.22, 85.17]\nseer = [102.67, 100.00, 78.22, 80.67]\nwitch = [102.67, 67.17, 78.22, 80.67]\nhunter = [102.67, 67.17, 78.22, 80.67]\nvillager = [102.67, 67.17, 78.22, 80.67]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 4.0))\n\n# Plot bars\nax.bar(['Wererwolf', 'Seer', 'Witch', 'Hunter', 'Villager'], werewolf, color='green')\nax.bar(['Wererwolf', 'Seer', 'Witch', 'Hunter', 'Villager'], seer, color='blue')\nax.bar(['Wererwolf', 'Seer', 'Witch', 'Hunter', 'Villager'], witch, color='cyan')\nax.bar(['Wererwolf', 'Seer', 'Witch', 'Hunter', 'Villager'], hunter, color='magenta')\nax.bar(['Wererwolf', 'Seer', 'Witch', 'Hunter', 'Villager'], villager, color='yellow')\n\n# Set labels and title\nax.set_xlabel('Character')\nax.set_ylabel('Tokens')\nax.set_title('Tokens per Character')\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nx = [5, 10, 20, 30, 40, 50]\ny = [63.77, 64.17, 64.31, 64.98, 65.82, 65.78]\n\n# Create a bar chart\nplt.bar(x, y, color='blue')\n\n# Set the title and labels\nplt.title('True+ info (%)')\nplt.xlabel('Size of Data for Training and Validation')\nplt.ylabel('True+ info (%)')\n\n# Set the tick marks on the x-axis\nplt.xticks([5, 10, 20, 30, 40, 50], ['(40 samples)', '(81 samples)', '(163 samples)', '(245 samples)', '(326 samples)', '(408 samples)'])\n\n# Set the y-axis limits\nplt.ylim(56, 66)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ncategories = ['all', 'arg.causal', 'test.0', 'test.1', 'test.2', 'test.3', 'test.4', 'test.5', 'test.6', 'constant']\nvalues = [\n    [834, 832, 832, 832, 832, 832, 832, 832, 832, 832],\n    [832, 832, 832, 832, 832, 832, 832, 832, 832, 832],\n    [832, 832, 832, 832, 832, 832, 832, 832, 832, 832],\n    [832, 832, 832, 832, 832, 832, 832, 832, 832, 832],\n    [832, 832, 832, 832, 832, 832, 832, 832, 832, 832],\n    [832, 832, 832, 832, 832, 832, 832, 832, 832, 832],\n    [832, 832, 832, 832, 832, 832, 832, 832, 832, 832],\n    [832, 832, 832, 832, 832, 832, 832, 832, 832, 832],\n    [832, 832, 832, 832, 832, 832, 832, 832, 832, 832],\n    [832, 832, 832, 832, 832, 832, 832, 832, 832, 832]\n]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Plot the data\nfor i, value in enumerate(values):\n    ax.bar(categories, value, label=f'Column {i+1}')\n\n# Set the title and labels\nax.set_title('Out-of-domain accuracy')\nax.set_xlabel('Categories')\nax.set_ylabel('Values')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ncategories = ['Final Distribution with GPT-4-Turbo', 'Final Distribution with GPT-3.5-Turbo', '0.125 Parameter-Valued Distribution', 'Initial Distribution', 'Best-of-Three']\nvalues = [\n    [0.7, 0.7, 0.7, 0.7, 0.7],\n    [0.7, 0.7, 0.7, 0.7, 0.7],\n    [0.7, 0.7, 0.7, 0.7, 0.7],\n    [0.7, 0.7, 0.7, 0.7, 0.7],\n    [0.7, 0.7, 0.7, 0.7, 0.7]\n]\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\nbars = ax.bar(categories, values[0], color='blue')\n\n# Add a vertical line at the end of each bar\nfor bar in bars:\n    height = bar.get_height()\n    ax.plot([bar.get_x() + bar.get_width(), bar.get_x() + bar.get_width()], [height, height], color='red')\n\n# Set the y-axis limits\nax.set_ylim(0, 0.8)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ncategories = ['BERT', 'RoBERTa', 'DistilBERT', 'XLNet', 'Electra', 'Albert', 'BART', 'DeBERTa', 'Llama2']\nground_truth_labels = [65, 60, 60, 65, 60, 60, 65, 60, 60]\nweak_labels = [55, 50, 50, 55, 50, 50, 55, 50, 50]\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(10.0, 3.0))\nbars = ax.bar(categories, ground_truth_labels, color='r')\nax.bar(categories, weak_labels, bottom=ground_truth_labels, color='b')\n\n# Add labels and title\nax.set_xlabel('Categories')\nax.set_ylabel('Accuracy (%)')\nax.set_title('Model Accuracy Comparison')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_9.pdf", "response": "import matplotlib.pyplot as plt\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\nax.bar(['Computational Social Science and Social Media', 'Phonology, Morphology and Word Segmentation', 'Information Retrieval and Text Mining', 'Machine Learning for NLP', 'Information Extraction', 'Disourse and Pragmatics', 'Syntax: Tagging, Chinking and Parsing'], [1.45, 1.45, 1.45, 1.45, 1.45, 1.45, 1.45], color='purple')\nplt.show()"}
{"file": "dataset/ori_500/errorpoint_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ncategories = ['Kashmir', 'Religion', 'Crime and Justice', 'CAA', 'Pulwama-Balakot', 'Politics']\nshouting_fractions = [0.12, 0.14, 0.16, 0.18, 0.20, 0.22]\nmeans = [0.13, 0.15, 0.17, 0.19, 0.21, 0.23]\n\n# Plotting\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\nax.plot(categories, shouting_fractions, 'b-', label='Dataset mean')\nax.plot(categories, means, 'ro', label='Mean')\n\n# Setting labels and title\nax.set_xlabel('Category')\nax.set_ylabel('Shouting Fraction (Fraction of videos)')\nax.set_title('Shouting Fraction by Category')\n\n# Displaying legend\nax.legend()\n\nplt.show()\n```"}
{"file": "dataset/ori_500/errorpoint_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for Variable, Symmetric Error\nx1 = [0, 5, 10, 15, 20]\ny1 = [15.49, 17.15, 16.03, 15.45, 16.46]\n\n# Data for Variable, Symmetric Error\nx2 = [0, 5, 10, 15, 20]\ny2 = [19.38, 19.38, 19.38, 19.38, 19.38]\n\n# Data for Variable, Symmetric Error\nx3 = [0, 5, 10, 15, 20]\ny3 = [23.92, 23.92, 23.92, 23.92, 23.92]\n\n# Data for Variable, Symmetric Error\nx4 = [0, 5, 10, 15, 20]\ny4 = [24.64, 24.64, 24.64, 24.64, 24.64]\n\n# Data for Variable, Symmetric Error\nx5 = [0, 5, 10, 15, 20]\ny5 = [24.64, 24.64, 24.64, 24.64, 24.64]\n\n# Data for Variable, Symmetric Error\nx6 = [0, 5, 10, 15, 20]\ny6 = [24.64, 24.64, 24.64, 24.64, 24.64]\n\n# Data for Variable, Symmetric Error\nx7 = [0, 5, 10, 15, 20]\ny7 = [24.64, 24.64, 24.64, 24.64, 24.64]\n\n# Data for Variable, Symmetric Error\nx8 = [0, 5, 10, 15, 20]\ny8 = [24.64, 24.64, 24.64, 24.64, 24.64]\n\n# Data for Variable, Symmetric Error\nx9 = [0, 5, 10, 15, 20]\ny9 = [24.64, 24.64, 24.64, 24.64, 24.64]\n\n# Data for Variable, Symmetric Error\nx10 = [0, 5, 10, 15, 20]\ny10 = [24.64, 24.64, 24.64, 24.64, 24.64]\n\n# Data for Variable, Symmetric Error\nx11 = [0, 5, 10, 15, 20]\ny11 = [24.64, 24.64, 24.64, 24.64, 24.64]\n\n# Data for Variable, Symmetric Error\nx12 = [0, 5, 10, 15, 20]\ny12 = [24.64, 24.64, 24.64, 24.64, 24.64]\n\n# Data for Variable, Symmetric Error\nx13 = [0, 5, 10, 15, 20]\ny13 = [24.64, 24.64, 24.64, 24.64, 24.64]\n\n# Data for Variable, Symmetric Error\nx14 = [0, 5, 10, 15, 20]\ny14 = [24.64, 24.64, 24.64, 24.64, 24.64]\n\n# Data for Variable, Symmetric Error\nx15 = [0, 5, 10, 15, 20]\ny15 = [24.64, 24.64, 24.64, 24.64, 24.64]\n\n# Data for Variable, Symmetric Error\nx16 = [0, 5, 10, 15, 20]\ny16 = [24.64, 24.64, 24.64, 24.64, 24.64]\n\n# Data for Variable, Symmetric Error\nx17 = [0, 5, 10, 15, 20]\ny17 = [24.64, 24.64, 24.64, 24.64, 24.64]\n\n# Data for Variable, Symmetric Error\nx18 = [0, 5, 10, 15, 20]\ny18 = [24.64, 24.64, 24.64, 24.64, 24.64]\n\n# Data for Variable, Symmetric Error\nx19 = [0, 5, 10, 15, 20]\ny19 = [24.64, 24.64, 24.64, 24.64, 24.64]\n\n# Data for Variable, Symmetric Error\nx20 = [0, 5, 10, 15, 20]\ny20 = [24.64, 24.64, 24.64, 24.64, 24.64]\n\n# Data for Variable, Symmetric Error\nx21 = [0, 5, 10, 15, 20]\ny21 = [24.64, 24.64, 24.64, 24.64, 24.64]\n\n# Data for Variable, Symmetric Error\nx22 = [0, 5, 10, 15, 20]\ny22 = [24.64, 24.64, 24.64, 24.64, 24.64]\n\n# Data for Variable, Symmetric Error\nx23 = [0, 5, 10, 15, 20]\ny23 = [24.64, 24.64, 24.64, 24.64, 24.64]\n\n# Data for Variable, Symmetric Error\nx24 = [0, 5, 10, 15, 20]\ny24 = [24.64, 24.64, 24.64, 24.64, 24.64]\n\n# Data for Variable, Symmetric Error\nx25 = [0, 5, 10, 15, 20]\ny25 = [24.64, 24.64, 24.64, 24.64, 24.64]\n\n# Data for Variable, Symmetric Error\nx26 = [0, 5, 10, 15, 20]\ny26 = [24.64, 24.64, 24.64, 24.64, 24.64]\n\n# Data for Variable, Symmetric Error\nx27 = [0, 5, 10, 15, 20]\ny27 = [24.64, 24.64, 24.64, 24.64, 24.64]\n\n# Data for Variable, Symmetric Error\nx28 = [0, 5, 10, 15, 20]\ny28 = [24.64, 24.64, 24.64, 24.64, 24.64]\n\n# Data for Variable, Symmetric Error\nx29 = [0, 5, 10, 15, 20]\ny29 = [24.64, 24.64, 24.64, 24.64, 24.64]\n\n# Data for Variable, Symmetric Error\nx30 = [0, 5, 10, 15, 20]\ny30 = [24.64, 24.64, 24.64, 24.64, 24.64]\n\n# Data for Variable, Symmetric Error\nx31 = [0, 5, 10, 15, 20]\ny31 = [24.64, 24.64, 24.64, 24.64, 24.64]\n\n# Data for Variable, Symmetric Error\nx32 = [0, 5, 10, 15, 20]\ny32 = [24.64, 24.64, 24.64, 24.64, 24.64]\n\n# Data for Variable, Symmetric Error\nx33 = [0, 5, 10, 15, 20]\ny33 = [24.64, 24.64, 24.64, 24.64, 24.64]\n\n# Data for Variable, Symmetric Error\nx34 = [0, 5, 10, 15, 20]\ny34 = [24.64, 24.64, 24.64, 24.64, 24.64]\n\n# Data for Variable, Symmetric Error\nx35 = [0, 5, 10, 15, 20]\ny35 = [24.64, 24.64, 24.64, 24.64, 24.64]\n\n# Data for Variable, Symmetric Error\nx36 = [0, 5, 10, 15, 20]\ny36 = [24.64, 24.64, 24.64, 24.64, 24.64]\n\n# Data for Variable, Symmetric Error\nx37 = [0, 5, 10, 15, 20]\ny37 = [24.64, 24.64, 24.64, 24.64, 24.64]\n\n# Data for Variable, Symmetric Error\nx38 = [0, 5, 10, 15, 20]\ny38 = [24.64, 24.64, 24.64, 24.64, 24.64]\n\n# Data for Variable, Symmetric Error\nx39 = [0, 5, 10, 15, 20]\ny39 = [24.64, 24.64, 24.64, 24.64, 24.64]\n\n# Data for Variable, Symmetric Error\nx40 = [0, 5, 10, 15, 20]\ny40 = [24.64, 24.64, 24.64, 24.64, 24.64]\n\n# Data for Variable, Symmetric Error\nx41 = [0, 5, 10, 15, 20]\ny41 = [24.64, 24.64, 24.64, 24.64, 24.64]\n\n# Data for Variable, Symmetric Error\nx42 = [0, 5, 10, 15, 20]\ny42 = [24.64, 24.64, 24.64, 24.64, 24.64]\n\n# Data for Variable, Symmetric Error\nx43 = [0, 5, 10, 15, 20]\ny43 = [24.64, 24.64, 24.64, 24.64, 24.64]\n\n# Data for Variable, Symmetric Error\nx44 = [0, 5, 10, 15, 20]\ny44 = [24.64, 24.64, 24.64, 24.64, 24.64]\n\n# Data for Variable, Symmetric Error\nx45 = [0, 5, 10, 15, 20]\ny45 = [24.64, 24.64, 24.64, 24.64, 24.64]\n\n# Data for Variable, Symmetric Error\nx46 = [0, 5, 10, 15, 20]\ny46 = [24.64, 24.64, 24.64, 24.64, 24.64]\n\n# Data for Variable, Symmetric Error\nx47 = [0, 5, 10, 15, 20]\ny47 = [24.64, 24.64, 24.64, 24.64, 24.64]\n\n# Data for Variable, Symmetric Error\nx48 = [0, 5, 10, 15, 20]\ny48 = [24.64, 24.64, 24.64, 24.64, 24.64]\n\n# Data for Variable, Symmetric Error\nx49 = [0, 5, 10, 15, 20]\ny49 = [24.64, 24.64, 24.64, 24.64, 24.64]\n\n# Data for Variable, Symmetric Error\nx50 = [0, 5, 10, 15, 20]\ny50 = [24.64, 24.64, 24.64, 24.64, 24.64]\n\n# Data for Variable, Symmetric Error\nx51 = [0, 5, 10, 15, 20]\ny51 = [24.64, 24.64, 24.64, 24.64, 24.64]\n\n# Data for Variable, Symmetric Error\nx52 = [0, 5, 10, 15, 20]\ny52 = [24.64, 24.64, 24.64, 24.64, 24.64]\n\n# Data for Variable, Symmetric Error\nx53 = [0, 5, 10, 15, 20]\ny53 = [24.64, 24.64, 24.64, 24.64, 24.64]\n\n# Data for Variable, Symmetric Error\nx54 = [0, 5, 10, 15, 20]\ny54 = [24.64, 24.64, 24.64, 24.64, 24.64]\n\n# Data for Variable, Symmetric Error\nx55 = [0, 5, 10, 15, 20]\ny55 = [24.64, 24.64, 24.64, 24.64, 24.64]\n\n# Data for Variable, Symmetric Error\nx56 = [0, 5, 10, 15, 20]\ny56 = [24.64, 24.64, 24.64, 24.64, 24.64]\n\n# Data for Variable, Symmetric Error\nx57 = [0, 5, 10, 15, 20]\ny57 = [24.64, 24.64, 24.64, 24.64, 24.64]\n\n# Data for Variable, Symmetric Error\nx58 = [0, 5, 10, 15, 20]\ny58 = [24.64, 24.64, 24.64, 24.64, 24.64]\n\n# Data for Variable, Symmetric Error\nx59 = [0, 5, 10, 15, 20]\ny59 = [24.64, 24"}
{"file": "dataset/ori_500/errorpoint_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data points\ncategories = ['Politics', 'Religion', 'Kashmir', 'CAA', 'Pulwama-Balakot']\nincivility_values = [0.16, 0.18, 0.2, 0.22, 0.24]\nmean_values = [0.17, 0.19, 0.21, 0.23, 0.25]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data\nax.plot(categories, incivility_values, label='Dataset mean')\nax.plot(categories, mean_values, label='Mean')\n\n# Set the title and labels\nax.set_title('Incivility by Category')\nax.set_xlabel('Category')\nax.set_ylabel('Incivility (Fraction of Videos)')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorpoint_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for each category\ncategories = ['This work*', 'Shah et al.', 'Shah et al.', 'Banerjee et al.', 'Favale et al.', 'Favale et al.', 'Gomez-Valent', 'Gomez-Valent', 'Benisty et al.', 'Benisty et al.', 'Benisty et al.', 'Benisty et al.']\nvalues = [-19.353, -19.394, -19.404, -19.314, -19.404, -19.314, -19.362, -19.362, -19.374, -19.374, -19.38, -19.38]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Plot the data\nax.plot(categories, values, 'bo-')\n\n# Set the x-axis limits\nax.set_xlim(-19.6, -19.0)\n\n# Set the y-axis limits\nax.set_ylim(-19.6, -19.0)\n\n# Set the title of the plot\nax.set_title('Plot of Categories vs Values')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorpoint_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Sample data\ncategories = ['Education', 'Religion', 'Bollywood', 'Crime and Justice', 'Farmers Protest', 'Issue Politics']\nunique_speaker_means = [12, 14, 13, 15, 16, 15]\nunique_shouter_means = [10, 12, 11, 13, 14, 13]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot the data\nax.plot(categories, unique_speaker_means, 'bo-', label='Unique speaker count mean')\nax.plot(categories, unique_shouter_means, 'ro-', label='Unique shouter count mean')\n\n# Set the title and labels\nax.set_title('Dataset unique shouter count mean')\nax.set_xlabel('Category')\nax.set_ylabel('Number of speakers')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorpoint_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Female Face Presence')\n\n# Set the x-axis label\nax.set_xlabel('PULWAMA-BALAKOT')\n\n# Set the y-axis label\nax.set_ylabel('Fraction of videos')\n\n# Set the y-axis limits\nax.set_ylim(0.05, 0.25)\n\n# Set the y-axis ticks\nax.set_yticks([0.1, 0.15, 0.2, 0.25])\n\n# Set the y-axis tick labels\nax.set_yticklabels(['0.1', '0.15', '0.2', '0.25'])\n\n# Set the x-axis limits\nax.set_xlim(0, 4)\n\n# Set the x-axis ticks\nax.set_xticks([0, 1, 2, 3, 4])\n\n# Set the x-axis tick labels\nax.set_xticklabels(['KASHMIR', 'COVID/LOCKDOWN', 'SPORTS', 'CHINA', 'PULWAMA-BALAKOT'])\n\n# Draw a horizontal line at the mean value\nax.axhline(y=0.15, color='r', linestyle='--')\n\n# Draw a vertical line at the mean value\nax.axvline(x=2, color='r', linestyle='--')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorpoint_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nx = [1, 2, 3, 4, 5]\ny = [\n    [2.5, 2.5, 2.5, 2.5, 2.5],\n    [2.5, 2.5, 2.5, 2.5, 2.5],\n    [2.5, 2.5, 2.5, 2.5, 2.5],\n    [2.5, 2.5, 2.5, 2.5, 2.5],\n    [2.5, 2.5, 2.5, 2.5, 2.5]\n]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(9.0, 6.0))\n\n# Plot the data\nfor i in range(len(y)):\n    ax.plot(x, y[i], marker='o')\n\n# Set the title\nax.set_title('Errorbar upper and lower limits')\n\n# Set the x-axis label\nax.set_xlabel('X-axis')\n\n# Set the y-axis label\nax.set_ylabel('Y-axis')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorpoint_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\nx = [0.0, 0.5, 1.0, 1.5, 2.0, 2.5, 3.0, 3.5]\ny1 = [170, 160, 150, 140, 130, 120, 110, 100]\ny2 = [175, 165, 155, 145, 135, 125, 115, 105]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 4.0))\n\n# Plot the data\nax.plot(x, y1, 'r-')\nax.plot(x, y2, 'g-')\n\n# Set the title and labels\nax.set_title('variable, symmetric error')\nax.set_xlabel('time (s)')\nax.set_ylabel('error')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorpoint_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data points\nx = [0, 2, 4, 6, 8, 10]\ny1 = [3587, 2598, 3704, 3777, 2889, 2044]\ny2 = [4375, 2598, 3704, 3777, 2889, 2044]\ny3 = [4375, 2598, 3704, 3777, 2889, 2044]\ny4 = [4375, 2598, 3704, 3777, 2889, 2044]\ny5 = [4375, 2598, 3704, 3777, 2889, 2044]\ny6 = [4375, 2598, 3704, 3777, 2889, 2044]\ny7 = [4375, 2598, 3704, 3777, 2889, 2044]\ny8 = [4375, 2598, 3704, 3777, 2889, 2044]\ny9 = [4375, 2598, 3704, 3777, 2889, 2044]\ny10 = [4375, 2598, 3704, 3777, 2889, 2044]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 7.0))\n\n# Plot the data\nax.plot(x, y1, 'g-')\nax.plot(x, y2, 'g-')\nax.plot(x, y3, 'g-')\nax.plot(x, y4, 'g-')\nax.plot(x, y5, 'g-')\nax.plot(x, y6, 'g-')\nax.plot(x, y7, 'g-')\nax.plot(x, y8, 'g-')\nax.plot(x, y9, 'g-')\nax.plot(x, y10, 'g-')\n\n# Set the title and labels\nax.set_title('variable, asymmetric error')\nax.set_xlabel('x')\nax.set_ylabel('y')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorpoint_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data points\nx = [0, 5, 10, 15, 20]\ny1 = [-2.1, -2.6, -2.7, -2.9, -2.7]\ny2 = [2.6, 2.6, 2.9, 2.9, 2.0]\ny3 = [1.9, 1.9, 1.2, 1.2, 1.3]\ny4 = [1.1, 1.1, 1.0, 1.0, 1.8]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 7.0))\n\n# Plot the data\nax.plot(x, y1, 'p-', color='purple')\nax.plot(x, y2, 'p-', color='purple')\nax.plot(x, y3, 'p-', color='purple')\nax.plot(x, y4, 'p-', color='purple')\n\n# Set the title and labels\nax.set_title('variable, asymmetric error')\nax.set_xlabel('time')\nax.set_ylabel('error')\n\n# Set the y-axis limits\nax.set_ylim(14, 19)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/graph_1.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Define the coordinates of the hexagon\nhexagon_coords = np.array([\n    [0, 1],\n    [1, 1],\n    [1.5, 0.5],\n    [1, 0],\n    [0, 0],\n    [-0.5, 0.5]\n])\n\n# Plot the hexagon\nax.plot(hexagon_coords[:, 0], hexagon_coords[:, 1], 'b-')\n\n# Define the coordinates of the circles\ncircle_coords = np.array([\n    [0, 0],\n    [1, 0],\n    [1.5, 0.5],\n    [1, 1],\n    [0, 1],\n    [-0.5, 0.5],\n    [0, 0]\n])\n\n# Plot the circles\nfor coord in circle_coords:\n    ax.add_artist(plt.Circle(coord, 0.1, color='r'))\n\n# Set the aspect ratio to equal\nax.set_aspect('equal')\n\n# Set the limits of the plot\nax.set_xlim(-1, 2)\nax.set_ylim(-0.5, 1.5)\n\n# Display the plot\nplt.show()"}
{"file": "dataset/ori_500/graph_2.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Define the coordinates of the points\nx = np.linspace(0, 10, 20)\ny = np.sin(x)\n\n# Plot the points\nax.plot(x, y, 'o')\n\n# Set the limits of the plot\nax.set_xlim(0, 10)\nax.set_ylim(-1, 1)\n\n# Set the title and labels\nax.set_title('Sine Wave')\nax.set_xlabel('X-axis')\nax.set_ylabel('Y-axis')\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/graph_3.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Define the data for the circle\ntheta = np.linspace(0, 2*np.pi, 100)\nx = np.cos(theta)\ny = np.sin(theta)\n\n# Plot the circle\nax.plot(x, y, 'k-')\n\n# Define the data for the circles\ncircles = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n\n# Plot the circles\nfor circle in circles:\n    ax.add_artist(plt.Circle((circle, 0), 1, color='y'))\n\n# Set the aspect ratio to be equal so that the circle is not distorted\nax.set_aspect('equal')\n\n# Set the limits of the plot\nax.set_xlim(-15, 15)\nax.set_ylim(-15, 15)\n\n# Remove the axes\nax.axis('off')\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/graph_4.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis.\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Define the vertices of the triangle.\ntriangle_vertices = np.array([[2, 4], [3, 4], [3, 2]])\n\n# Plot the triangle.\nax.plot(triangle_vertices[:, 0], triangle_vertices[:, 1], 'b-')\n\n# Define the vertices of the rectangle.\nrectangle_vertices = np.array([[0, 0], [0, 1], [1, 1], [1, 0]])\n\n# Plot the rectangle.\nax.plot(rectangle_vertices[:, 0], rectangle_vertices[:, 1], 'r-')\n\n# Set the aspect ratio to equal.\nax.set_aspect('equal')\n\n# Set the limits of the plot.\nax.set_xlim(-1, 4)\nax.set_ylim(-1, 5)\n\n# Display the plot.\nplt.show()"}
{"file": "dataset/ori_500/graph_5.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\nax.plot([0, 1], [0, 1], 'ro-')\nax.set_xlim(-1, 2)\nax.set_ylim(-1, 2)\nplt.show()"}
{"file": "dataset/ori_500/heatmap_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ncategories = ['CoreNLP', 'Stanza', 'Biaffine', 'StackPointer', 'TowerParse']\nvalues = [\n    [0.61, 0.74, 0.70, 0.70, 0.57],\n    [1.00, 0.69, 0.77, 0.88, 0.62],\n    [1.00, 0.64, 0.72, 0.70, 0.69],\n    [1.00, 0.67, 0.70, 0.54, 1.00]\n]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Plot the data\nfor i, category in enumerate(categories):\n    ax.barh(category, values[i], color=plt.cm.Reds(np.linspace(0, 1, len(values[i]))))\n\n# Set the title and labels\nax.set_title('Average Values')\nax.set_xlabel('Values')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\nvoters = ['Villager', 'Hunter', 'Witch', 'Seer', 'Wererwolf']\nvotess = ['Wererwolf', 'Seer', 'Witch', 'Hunter', 'Abstain']\npercentages = [\n    [15.7, 28.1, 2.6, 2.6, 10.5],\n    [76.0, 2.1, 0.5, 4.1, 9.2],\n    [50.8, 12.2, 0.9, 6.2, 13.9],\n    [49.2, 11.2, 0.6, 7.8, 16.3],\n    [50.3, 12.0, 0.9, 7.0, 13.4]\n]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Plot the data\nfor i, voter in enumerate(voters):\n    for j, votee in enumerate(votess):\n        ax.add_patch(plt.Circle((j + 0.5, i + 0.5), 0.4, color=plt.cm.RdYlGn(percentages[i][j] / 100)))\n\n# Set the limits of the plot\nax.set_xlim(-0.5, len(votess) - 0.5)\nax.set_ylim(-0.5, len(voters) - 0.5)\n\n# Set the labels\nax.set_xticks(np.arange(len(votess)) + 0.5)\nax.set_yticks(np.arange(len(voters)) + 0.5)\nax.set_xticklabels(votess)\nax.set_yticklabels(voters)\n\n# Add a colorbar\nsm = plt.cm.ScalarMappable(cmap=plt.cm.RdYlGn, norm=plt.Normalize(vmin=0, vmax=100))\nsm._A = []\ncbar = fig.colorbar(sm, ax=ax)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Define the data\nplayers = ['D. Fox', 'T. Haliburton', 'M. Harkless', 'H. Barnes', 'C. Metu']\nfox_data = [0.9, 0.7, 0.5, 0.3, 0.1]\nhaliburton_data = [0.8, 0.6, 0.4, 0.2, 0.0]\nharkless_data = [0.7, 0.5, 0.3, 0.1, 0.0]\nbarnes_data = [0.6, 0.4, 0.2, 0.0, 0.0]\nmetu_data = [0.5, 0.3, 0.1, 0.0, 0.0]\n\n# Plot the data\nax.bar(players, fox_data, color='orange')\nax.bar(players, haliburton_data, bottom=fox_data, color='yellow')\nax.bar(players, harkless_data, bottom=[sum(x) for x in zip(fox_data, haliburton_data)], color='purple')\nax.bar(players, barnes_data, bottom=[sum(x) for x in zip(fox_data, haliburton_data, harkless_data)], color='blue')\nax.bar(players, metu_data, bottom=[sum(x) for x in zip(fox_data, haliburton_data, harkless_data, barnes_data)], color='pink')\n\n# Set the title and labels\nax.set_title('Player Performance')\nax.set_xlabel('Players')\nax.set_ylabel('Performance')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 5.0))\n\n# Define the data\ndata = [\n    [10, 20, 30, 40],\n    [15, 25, 35, 45],\n    [20, 30, 40, 50]\n]\n\n# Create a heatmap\nim = ax.imshow(data, cmap='viridis')\n\n# Add colorbar\ncbar = ax.figure.colorbar(im, ax=ax)\ncbar.ax.set_ylabel('Color Intensity', rotation=-90, va=\"bottom\")\n\n# Set labels\nax.set_xticks(np.arange(len(data[0])))\nax.set_yticks(np.arange(len(data)))\nax.set_xticklabels(['A', 'B', 'C'])\nax.set_yticklabels(['X', 'Y', 'Z'])\n\n# Rotate the tick labels and set their alignment.\nplt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\", rotation_mode=\"anchor\")\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ncategories = ['LOH0', 'LOH1', 'LOH2', 'LOMLP']\nd2 = [10, 4.0, 12.0, 3.0]\nd1 = [10, 8.0, 12.0, 4.0]\nd0 = [10, 16.0, 28.0, 16.0]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Plot the data\nax.bar(categories, d2, color='gray')\nax.bar(categories, d1, bottom=d2, color='cyan')\nax.bar(categories, d0, bottom=[sum(x) for x in zip(d2, d1)], color='brown')\n\n# Set the title and labels\nax.set_title('Bar Chart')\nax.set_xlabel('Categories')\nax.set_ylabel('Values')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ncategories = ['Academia', 'Agriculture', 'Construction and Real Estate', 'Corporate', 'Entertainment', 'Finance', 'Government', 'Hospitality', 'Legal Services', 'Life Sciences']\nsubcategories = ['LLVA', 'BakLiva', 'GeminiProVision', 'GPT4V', 'CODI']\nvalues = [\n    [0.2, 0.3, 0.4, 0.5, 0.6],\n    [0.3, 0.4, 0.5, 0.6, 0.7],\n    [0.4, 0.5, 0.6, 0.7, 0.8],\n    [0.5, 0.6, 0.7, 0.8, 0.9],\n    [0.6, 0.7, 0.8, 0.9, 1.0]\n]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 10.0))\n\n# Create a heatmap\ncax = ax.matshow(values, cmap='coolwarm')\n\n# Set the tick labels\nax.set_xticks(np.arange(len(subcategories)))\nax.set_yticks(np.arange(len(categories)))\nax.set_xticklabels(subcategories)\nax.set_yticklabels(categories)\n\n# Add colorbar\nfig.colorbar(cax)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nx = [1, 3, 5, 9, 12]\ny = [1, 1, 1, 1, 5]\n\n# Create a bar chart\nplt.bar(x, y, color='blue')\n\n# Set the title and labels\nplt.title('Perplexity')\nplt.xlabel('To layer')\nplt.ylabel('mbert\u2192sat Perplexity=7.59')\n\n# Set the y-axis limits\nplt.ylim(0, 12)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_16.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data for the heatmap\ndata = [\n    [659, 777, 247, 153, 953],\n    [807, 187, 643, 373, 819],\n    [109, 172, 759, 665, 327],\n    [459, 274, 797, 660, 405],\n    [784, 637, 523, 435, 498],\n    [935, 945, 739, 650, 243],\n    [729, 651, 797, 660, 891],\n    [863, 700, 644, 733, 760],\n    [292, 949, 365, 473, 429]\n]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(4.0, 8.0))\n\n# Create a heatmap\ncax = ax.matshow(data, cmap='hot')\n\n# Add colorbar\nfig.colorbar(cax)\n\n# Set labels\nax.set_xticks(np.arange(len(data[0])))\nax.set_yticks(np.arange(len(data)))\nax.set_xticklabels(['Product A Q1', 'Product A Q2', 'Product A Q3', 'Product B Q1', 'Product B Q2', 'Product B Q3'])\nax.set_yticklabels(['Sales Rank 1', 'Sales Rank 2', 'Sales Rank 3', 'Sales Rank 4', 'Sales Rank 5', 'Sales Rank 6', 'Sales Rank 7', 'Sales Rank 8', 'Sales Rank 9'])\n\n# Set title\nax.set_title('Sales Performance Heatmap')\n\nplt.show()"}
{"file": "dataset/ori_500/heatmap_17.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 3.0))\n\n# Set the color map\ncmap = plt.cm.get_cmap('viridis')\n\n# Create a heatmap\nheatmap = ax.imshow([[0.2, 0.3, 0.4], [0.5, 0.6, 0.7], [0.8, 0.9, 1.0]], cmap=cmap)\n\n# Add a color bar\ncbar = fig.colorbar(heatmap)\n\n# Set the tick labels\nax.set_xticks([0, 1, 2])\nax.set_yticks([0, 1, 2])\nax.set_xticklabels(['context', 'option', 'cot'])\nax.set_yticklabels(['0', '10', '20'])\n\n# Set the title\nax.set_title('Heatmap')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_18.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(7.0, 6.0))\n\n# Define the data for the heatmap\ndata = [\n    [0.55, 0.72, 0.6, 0.6, 0.89],\n    [0.42, 0.65, 0.44, 0.79, 0.54],\n    [0.96, 0.38, 0.79, 0.53, 0.54],\n    [0.57, 0.93, 0.07, 0.09, 0.54],\n    [0.96, 0.38, 0.79, 0.53, 0.54],\n    [0.57, 0.93, 0.07, 0.09, 0.54],\n    [0.96, 0.38, 0.79, 0.53, 0.54],\n    [0.57, 0.93, 0.07, 0.09, 0.54],\n    [0.96, 0.38, 0.79, 0.53, 0.54],\n    [0.57, 0.93, 0.07, 0.09, 0.54]\n]\n\n# Create a heatmap\nim = ax.imshow(data, cmap='hot', interpolation='nearest')\n\n# Add colorbar\ncbar = fig.colorbar(im)\n\n# Set labels\nax.set_xticks(np.arange(len(data)))\nax.set_yticks(np.arange(len(data)))\nax.set_xticklabels(['96', '192', '336', '720'])\nax.set_yticklabels(['96', '192', '336', '720'])\n\n# Rotate the tick labels and set their alignment.\nplt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\", rotation_mode=\"anchor\")\n\n# Loop over data dimensions and create text annotations.\nfor i in range(len(data)):\n    for j in range(len(data)):\n        text = ax.text(j, i, round(data[i][j], 2), ha=\"center\", va=\"center\", color=\"w\")\n\n# Display the plot\nplt.show()"}
{"file": "dataset/ori_500/heatmap_19.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(20.0, 8.0))\n\n# Define the data\ndata = [\n    [15.7, 28.1, 2.6, 14.5, 28.6, 10.5],\n    [76.0, 2.1, 0.5, 4.1, 8.1, 9.2],\n    [50.8, 12.3, 0.9, 6.2, 15.5, 13.9],\n    [49.2, 11.2, 0.6, 7.8, 17.3, 16.3],\n    [50.3, 12.0, 0.9, 7.0, 13.4, 16.3]\n]\n\n# Create a heatmap\nim = ax.imshow(data, cmap='Blues')\n\n# Add colorbar\ncbar = ax.figure.colorbar(im, ax=ax)\ncbar.ax.set_ylabel('Percentage', rotation=-90, va=\"bottom\")\n\n# Set labels\nax.set_xticks(np.arange(len(data[0])))\nax.set_yticks(np.arange(len(data)))\nax.set_xticklabels(['Villager', 'Hunter', 'Witch', 'Seer', 'Werewolf'])\nax.set_yticklabels(['Wererwolf', 'Seer', 'Witch', 'Seer', 'Abstain'])\n\n# Rotate the tick labels and set their alignment.\nplt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\", rotation_mode=\"anchor\")\n\n# Display the plot\nplt.show()"}
{"file": "dataset/ori_500/heatmap_2.pdf", "response": "import matplotlib.pyplot as plt\n\nfig, ax = plt.subplots(figsize=(9.0, 6.0))\n\ncategories = ['Qwen', 'ChatGLM3', 'Baichuan2', 'LLaMA-2', 'Xverse']\nresponses = [169, 115, 219, 67, 177]\ncolors = ['blue', 'green', 'red', 'purple', 'orange']\n\nfor i, category in enumerate(categories):\n    ax.barh([i], responses[i], color=colors[i])\n\nax.set_yticks(range(len(categories)))\nax.set_yticklabels(categories)\nax.set_xlabel('Response Action Category')\nax.set_ylabel('Question Type: All three types of questions')\n\nplt.show()"}
{"file": "dataset/ori_500/heatmap_20.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the bar chart\ncategories = ['angry', 'sad', 'disgust', 'contempt', 'feet', 'neutral', 'surprise', 'happy']\noriginal_values = [0.10, 0.00, 0.30, 0.00, 0.50, 0.00, 0.00, 0.10]\nadjusted_values = [0.12, 0.00, 0.44, 0.00, 0.44, 0.00, 0.00, 0.10]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Plot the bars\nax.bar(categories, original_values, color='blue', label='Original')\nax.bar(categories, adjusted_values, color='red', label='Adjusted')\n\n# Set the title and labels\nax.set_title('Emotion Intensity Comparison')\nax.set_xlabel('Emotion')\nax.set_ylabel('Intensity')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_21.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\nvoters = ['Villager', 'Hunter', 'Witch', 'Seer', 'Wererwolf']\nvotess = ['Voter 1', 'Voter 2', 'Voter 3', 'Voter 4', 'Voter 5', 'Voter 6', 'Voter 7', 'Voter 8', 'Voter 9', 'Voter 10', 'Voter 11', 'Voter 12', 'Voter 13', 'Voter 14', 'Voter 15', 'Voter 16', 'Voter 17', 'Voter 18', 'Voter 19', 'Voter 20', 'Voter 21', 'Voter 22', 'Voter 23', 'Voter 24', 'Voter 25', 'Voter 26', 'Voter 27', 'Voter 28', 'Voter 29', 'Voter 30']\npercentages = [15.7, 28.1, 2.6, 2.6, 14.5, 10.5, 76.0, 2.1, 0.5, 4.1, 8.1, 9.2, 50.8, 12.3, 0.9, 6.2, 15.5, 14.3, 50.3, 12.0, 0.9, 7.0, 13.4, 16.3, 10.5, 9.2, 14.5, 10.5, 10.5, 10.5, 10.5, 10.5]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Plot the data\nax.barh(voters, percentages, color='blue')\n\n# Set the title and labels\nax.set_title('Voter Preferences')\nax.set_xlabel('Percentage')\nax.set_ylabel('Voter')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_22.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 3.0))\n\n# Define the data for the heatmap\ndata = [\n    [17, 24, 23],\n    [3, 8, 17],\n    [13, 10, 3],\n    [5, 4, 10],\n    [1, 1, 15]\n]\n\n# Create a heatmap\nim = ax.imshow(data, cmap='hot', interpolation='nearest')\n\n# Add colorbar\ncbar = ax.figure.colorbar(im, ax=ax)\ncbar.ax.set_ylabel('Rank', rotation=-90, va=\"bottom\")\n\n# Set the labels for the x-axis\nax.set_xticks(np.arange(len(['Baseline', 'Reversed Order', 'Reversed IDs'])))\nax.set_yticks(np.arange(len}
{"file": "dataset/ori_500/heatmap_23.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Define the data for the bars\nx = np.arange(4)\ny1 = [0.10, 0.08, 0.30, 0.60]\ny2 = [0.50, 0.07, 0.00, 0.10]\n\n# Create the bar chart\nax.bar(x, y1, color='lightgrey', label='Group 1')\nax.bar(x, y2, bottom=y1, color='darkgrey', label='Group 2')\n\n# Set the x-axis labels\nax.set_xticks(x)\nax.set_xticklabels(['Bar 1', 'Bar 2', 'Bar 3', 'Bar 4'])\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_24.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Create a DataFrame with the data\ndata = {\n    'Upland Bros.': [0.8, 2.4, 1.1, 0.7, 1.3, 0.1],\n    'Smith Gardening': [2.4, 0.0, 2.4, 1.7, 1.2, 2.0],\n    'Agrifun': [2.5, 4.0, 0.8, 0.6, 0.0, 0.0],\n    'Organic': [3.9, 1.0, 4.3, 2.6, 0.0, 1.4],\n    'BioGoods Ltd.': [0.0, 2.7, 1.9, 2.2, 0.0, 1.9],\n    'Cornley Corp.': [0.0, 0.0, 0.0, 0.0, 0.0, 6.3]\n}\ndf = pd.DataFrame(data, index=['cucumber', 'tomato', 'lettuce', 'asparagus', 'potato', 'barley'])\n\n# Plot the DataFrame\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\nax.axis('off')\ntable = ax.table(cellText=df.values, colLabels=df.columns, cellLoc='center', loc='center')\n\n# Set the color of the table cells\nfor (row, col), cell in table.get_celld().items():\n    if row == 0 or col == 0:\n        cell.set_facecolor('lightgrey')\n    else:\n        cell.set_facecolor('lightgreen')\n\n# Set the color of the last column\nfor (row, col), cell in table.get_celld().items():\n    if col == len(df.columns) - 1:\n        cell.set_facecolor('darkgreen')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_25.pdf", "response": "import matplotlib.pyplot as plt\nimport pandas as pd\n\n# Create a DataFrame with the data\ndata = {\n    'Product': ['cucumber', 'tomato', 'lettuce', 'asparagus', 'potato', 'barley'],\n    'Harvest [t/y]': [0.8, 2.4, 1.1, 0.6, 0.7, 0.1],\n    'Book 1': [46, 23, 60, 39, 71, 11],\n    'Book 2': [49, 38, 67, 41, 81, 38],\n    'Book 3': [66, 79, 90, 69, 88, 48],\n    'Book 4': [69, 89, 90, 74, 90, 41],\n    'Book 5': [83, 90, 90, 82, 90, 22],\n    'Book 6': [85, 83, 82, 74, 80, 37],\n    'Book 7': [0, 0, 0, 0, 0, 0]\n}\n\ndf = pd.DataFrame(data)\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\nax.bar(df['Product'], df['Harvest [t/y]'], color='green')\nax.set_title('Harvest by Product')\nax.set_xlabel('Product')\nax.set_ylabel('Harvest [t/y]')\nplt.show()"}
{"file": "dataset/ori_500/heatmap_26.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(9.0, 6.0))\n\n# Generate random data for each subplot\ndata = np.random.rand(12, 12)\n\n# Plot the data\nfor i in range(4):\n    for j in range(3):\n        ax.imshow(data, cmap='viridis')\n        ax.set_title('Title')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_27.pdf", "response": "import matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Set the x-axis limits\nax.set_xlim(0, 10)\n\n# Set the y-axis limits\nax.set_ylim(0, 6)\n\n# Set the x-axis ticks\nax.set_xticks([0, 2, 4, 6, 8, 10])\n\n# Set the y-axis ticks\nax.set_yticks([0, 2, 4, 6])\n\n# Set the x-axis tick labels\nax.set_xticklabels(['0', '2', '4', '6', '8', '10'])\n\n# Set the y-axis tick labels\nax.set_yticklabels(['0', '2', '4', '6'])\n\n# Set the title of the plot\nax.set_title('default: no edges')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', labelcolor='black')\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', labelcolor='black')\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', labelcolor='black')\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', labelcolor='black')\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', labelcolor='black')\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', labelcolor='black')\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', labelcolor='black')\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', labelcolor='black')\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', labelcolor='black')\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', labelcolor='black')\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', labelcolor='black')\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', labelcolor='black')\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', labelcolor='black')\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', labelcolor='black')\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', labelcolor='black')\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', labelcolor='black')\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', labelcolor='black')\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', labelcolor='black')\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', labelcolor='black')\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', labelcolor='black')\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', labelcolor='black')\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', labelcolor='black')\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', labelcolor='black')\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', labelcolor='black')\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', labelcolor='black')\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', labelcolor='black')\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', labelcolor='black')\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', labelcolor='black')\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', labelcolor='black')\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of"}
{"file": "dataset/ori_500/heatmap_28.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Define the data\ndata = {\n    'apples': [1.5, 2.2, 1.8, 3.2, 0.5],\n    'bananas': [2.8, 0.5, 3.6, 1.8, 2.2, 0.7],\n    'cherries': [1.0, 2.1, 0.9, 4.0, 1.5, 4.2, 0.4],\n    'dates': [0.7, 0.6, 0.4, 0.5, 3.4, 2.3, 0.6],\n    'elderberries': [0.9, 1.6, 0.7, 2.0, 5.9, 3.1, 0.5],\n    'figs': [1.2, 1.3, 0.5, 0.6, 3.1, 0.7, 4.8],\n    'grapes': [0.3, 1.9, 0.6, 1.3, 0.8, 1.8, 5.9]\n}\n\n# Define the vendors\nvendors = ['Vendor A', 'Vendor B', 'Vendor C', 'Vendor D', 'Vendor E', 'Vendor F', 'Vendor G']\n\n# Create a color map\ncmap = plt.cm.get_cmap('YlOrRd')\n\n# Create a bar chart\nfor i, (vendor, sales) in enumerate(zip(vendors, data.values())):\n    ax.barh(range(len(sales)), sales, left=np.arange(len(sales)), height=0.8, label=vendor, color=cmap(i/len(vendors)))\n\n# Set the title and labels\nax.set_title('Sales of vendors (in tons/year)')\nax.set_xlabel('Sales')\nax.set_ylabel('Fruit')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/heatmap_29.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ncategories = ['Low', 'Medium', 'High']\nvalues = [17, 36, 28, 23]\nacceptance = [79, 53, 34, 35]\ndegree = [42, 38, 0, 55]\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(5.0, 4.0))\nax.bar(categories, acceptance, color='blue')\nax.bar(categories, degree, bottom=acceptance, color='green')\n\n# Set labels and title\nax.set_xlabel('Categories')\nax.set_ylabel('Values')\nax.set_title('Degree of acceptance of a product')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Define the data\ndata = [\n    ['ada', 'mistral', 'mistral', 'mistral', 'mistral'],\n    ['ada', 'mistral', 'mistral', 'mistral', 'mistral'],\n    ['ada', 'mistral', 'mistral', 'mistral', 'mistral'],\n    ['ada', 'mistral', 'mistral', 'mistral', 'mistral'],\n    ['ada', 'mistral', 'mistral', 'mistral', 'mistral'],\n    ['ada', 'mistral', 'mistral', 'mistral', 'mistral'],\n    ['ada', 'mistral', 'mistral', 'mistral', 'mistral'],\n    ['ada', 'mistral', 'mistral', 'mistral', 'mistral'],\n    ['ada', 'mistral', 'mistral', 'mistral', 'mistral'],\n    ['ada', 'mistral', 'mistral', 'mistral', 'mistral'],\n    ['ada', 'mistral', 'mistral', 'mistral', 'mistral'],\n    ['ada', 'mistral', 'mistral', 'mistral', 'mistral'],\n    ['ada', 'mistral', 'mistral', 'mistral', 'mistral'],\n    ['ada', 'mistral', 'mistral', 'mistral', 'mistral'],\n    ['ada', 'mistral', 'mistral', 'mistral', 'mistral'],\n    ['ada', 'mistral', 'mistral', 'mistral', 'mistral'],\n    ['ada', 'mistral', 'mistral', 'mistral', 'mistral'],\n    ['ada', 'mistral', 'mistral', 'mistral', 'mistral'],\n    ['ada', 'mistral', 'mistral', 'mistral', 'mistral'],\n    ['ada', 'mistral', 'mistral', 'mistral', 'mistral'],\n    ['ada', 'mistral', 'mistral', 'mistral', 'mistral'],\n    ['ada', 'mistral', 'mistral', 'mistral', 'mistral'],\n    ['ada', 'mistral', 'mistral', 'mistral', 'mistral'],\n    ['ada', 'mistral', 'mistral', 'mistral', 'mistral'],\n    ['ada', 'mistral', 'mistral', 'mistral', 'mistral'],\n    ['ada', 'mistral', 'mistral', 'mistral', 'mistral'],\n    ['ada', 'mistral', 'mistral', 'mistral', 'mistral'],\n    ['ada', 'mistral', 'mistral', 'mistral', 'mistral'],\n    ['ada', 'mistral', 'mistral', 'mistral', 'mistral'],\n    ['ada', 'mistral', 'mistral', 'mistral', 'mistral'],\n    ['ada', 'mistral', 'mistral', 'mistral', 'mistral'],\n    ['ada', 'mistral', 'mistral', 'mistral', 'mistral'],\n    ['ada', 'mistral', 'mistral', 'mistral', 'mistral'],\n    ['ada', 'mistral', 'mistral', 'mistral', 'mistral'],\n    ['ada', 'mistral', 'mistral', 'mistral', 'mistral'],\n    ['ada', 'mistral', 'mistral', 'mistral', 'mistral'],\n    ['ada', 'mistral', 'mistral', 'mistral', 'mistral'],\n    ['ada', 'mistral', 'mistral', 'mistral', 'mistral'],\n    ['ada', 'mistral', 'mistral', 'mistral', 'mistral'],\n    ['ada', 'mistral', 'mistral', 'mistral', 'mistral'],\n    ['ada', 'mistral', 'mistral', 'mistral', 'mistral'],\n    ['ada', 'mistral', 'mistral', 'mistral', 'mistral'],\n    ['ada', 'mistral', 'mistral', 'mistral', 'mistral'],\n    ['ada', 'mistral', 'mistral', 'mistral', 'mistral'],\n    ['ada', 'mistral', 'mistral', 'mistral', 'mistral'],\n    ['ada', 'mistral', 'mistral', 'mistral', 'mistral'],\n    ['ada', 'mistral', 'mistral', 'mistral', 'mistral'],\n    ['ada', 'mistral', 'mistral', 'mistral', 'mistral'],\n    ['ada', 'mistral', 'mistral', 'mistral', 'mistral'],\n    ['ada', 'mistral', 'mistral', 'mistral', 'mistral'],\n    ['ada', 'mistral', 'mistral', 'mistral', 'mistral'],\n    ['ada', 'mistral', 'mistral', 'mistral', 'mistral'],\n    ['ada', 'mistral', 'mistral', 'mistral', 'mistral'],\n    ['ada', 'mistral', 'mistral', 'mistral', 'mistral'],\n    ['ada', 'mistral', 'mistral', 'mistral', 'mistral'],\n    ['ada', 'mistral', 'mistral', 'mistral', 'mistral'],\n    ['ada', 'mistral', 'mistral', 'mistral', 'mistral'],\n    ['ada', 'mistral', 'mistral', 'mistral', 'mistral'],\n    ['ada', 'mistral', 'mistral', 'mistral', 'mistral'],\n    ['ada', 'mistral', 'mistral', 'mistral', 'mistral'],\n    ['ada', 'mistral', 'mistral', 'mistral', 'mistral'],\n    ['ada', 'mistral', 'mistral', 'mistral', 'mistral'],\n    ['ada', 'mistral', 'mistral', 'mistral', 'mistral'],\n    ['ada', 'mistral', 'mistral', 'mistral', 'mistral'],\n    ['ada', 'mistral', 'mistral', 'mistral', 'mistral'],\n    ['ada', 'mistral', 'mistral', 'mistral', 'mistral'],\n    ['ada', 'mistral', 'mistral', 'mistral', 'mistral'],\n    ['ada', 'mistral', 'mistral', 'mistral', 'mistral'],\n    ['ada', 'mistral', 'mistral', 'mistral', 'mistral'],\n    ['ada', 'mistral', 'mistral', 'mistral', 'mistral'],\n    ['ada', 'mistral', 'mistral', 'mistral', 'mistral'],\n    ['ada', 'mistral', 'mistral', 'mistral', 'mistral'],\n    ['ada', 'mistral', 'mistral', 'mistral', 'mistral'],\n    ['ada', 'mistral', 'mistral', 'mistral', 'mistral'],\n    ['ada', 'mistral', 'mistral', 'mistral', 'mistral'],\n    ['ada', 'mistral', 'mistral', 'mistral', 'mistral'],\n    ['ada', 'mistral', 'mistral', 'mistral', 'mistral'],\n    ['ada', 'mistral', 'mistral', 'mistral', 'mistral'],\n    ['ada', 'mistral', 'mistral', 'mistral', 'mistral'],\n    ['ada', 'mistral', 'mistral', 'mistral', 'mistral'],\n    ['ada', 'mistral', 'mistral', 'mistral', 'mistral'],\n    ['ada', 'mistral', 'mistral', 'mistral', 'mistral'],\n    ['ada', 'mistral', 'mistral', 'mistral', 'mistral'],\n    ['ada', 'mistral', 'mistral', 'mistral', 'mistral'],\n    ['ada', 'mistral', 'mistral', 'mistral', 'mistral'],\n    ['ada', 'mistral', 'mistral', 'mistral', 'mistral'],\n    ['ada', 'mistral', 'mistral', 'mistral', 'mistral'],\n    ['ada', 'mistral', 'mistral', 'mistral', 'mistral'],\n    ['ada', 'mistral', 'mistral', 'mistral', 'mistral'],\n    ['ada', 'mistral', 'mistral', 'mistral', 'mistral'],\n    ['ada', 'mistral', 'mistral', 'mistral', 'mistral'],\n    ['ada', 'mistral', 'mistral', 'mistral', 'mistral'],\n    ['ada', 'mistral', 'mistral', 'mistral', 'mistral'],\n    ['ada', 'mistral', 'mistral', 'mistral', 'mistral'],\n    ['ada', 'mistral', 'mistral', 'mistral', 'mistral'],\n    ['ada', 'mistral', 'mistral', 'mistral', 'mistral'],\n    ['ada', 'mistral', 'mistral', 'mistral', 'mistral'],\n    ['ada', 'mistral', 'mistral', 'mistral', 'mistral'],\n    ['ada', 'mistral', 'mistral', 'mistral', 'mistral'],\n    ['ada', 'mistral', 'mistral', 'mistral', 'mistral'],\n    ['ada', 'mistral', 'mistral', 'mistral', 'mistral'],\n    ['ada', 'mistral', 'mistral', 'mistral', 'mistral'],\n    ['ada', 'mistral', 'mistral', 'mistral', 'mistral'],\n    ['ada', 'mistral', 'mistral', 'mistral', 'mistral'],\n    ['ada', 'mistral', 'mistral', 'mistral', 'mistral'],\n    ['ada', 'mistral', 'mistral', 'mistral', 'mistral'],\n    ['ada', 'mistral', 'mistral', 'mistral', 'mistral'],\n    ['ada', 'mistral', 'mistral', 'mistral', 'mistral'],\n    ['ada', 'mistral', 'mistral', 'mistral', 'mistral'],\n    ['ada', 'mistral', 'mistral', 'mistral', 'mistral'],\n    ['ada', 'mistral', 'mistral', 'mistral', 'mistral'],\n    ['ada', 'mistral', 'mistral', 'mistral', 'mistral'],\n    ['ada', 'mistral', 'mistral', 'mistral', 'mistral'],\n    ['ada', 'mistral', 'mistral', 'mistral', 'mistral'],\n    ['ada', 'mistral', 'mistral', 'mistral', 'mistral'],\n    ['ada', 'mistral', 'mistral', 'mistral', 'mistral'],\n    ['ada', 'mistral', 'mistral', 'mistral', 'mistral'],\n    ['ada', 'mistral', 'mistral', 'mistral', 'mistral'],\n    ['ada', 'mistral', 'mistral', 'mistral', 'mistral'],\n    ['ada', 'mistral', 'mistral', 'mistral', 'mistral'],\n    ['ada', 'mistral', 'mistral', 'mistral', 'mistral'],\n    ['ada', 'mistral', 'mistral', 'mistral', 'mistral'],\n    ['ada', 'mistral', 'mistral', 'mistral', 'mistral'],\n    ['ada', 'mistral', 'mistral', 'mistral', 'mistral'],\n    ['ada', 'mistral', 'mistral', 'mistral', 'mistral'],\n    ['ada', 'mistral', 'mistral', 'mistral', 'mistral'],\n    ['ada', 'mistral', 'mistral', 'mistral', 'mistral'],\n    ['ada', 'mistral', 'mistral', 'mistral', 'mistral'],\n    ['ada', 'mistral', 'mistral', 'mistral', 'mistral'],\n    ['ada', 'mistral', 'mistral', 'mistral', 'mistral'],\n    ['ada', 'mistral', 'mistral', 'mistral', 'mistral'],\n    ['ada', 'mistral', 'mistral', 'mistral', 'mistral'],\n    ['ada', 'mistral', 'mistral', 'mistral', 'mistral'],\n    ['ada', 'mistral', 'mistral', 'mistral', 'mistral'],\n    ['ada', 'mistral', 'mistral', 'mistral', 'mistral'],\n    ['ada', 'mistral', 'mistral', 'mistral', 'mistral'],\n    ['ada', 'mistral', 'mistral', 'mistral', 'mistral'],\n    ['ada', 'mistral', 'mistral', 'mistral', 'mistral'],\n    ['ada', 'mistral', 'mistral', 'mistral', 'mistral'],\n    ['ada', 'mistral', 'mistral', 'mistral', 'mistral'],\n    ['ada', 'mistral', 'mistral', 'mistral', 'mistral'],\n    ['ada', 'mistral', 'mistral', 'mistral', 'mistral'],\n    ['ada', 'mistral', 'mistral', 'mistral', 'mistral'],\n    ['ada', 'mistral', 'mistral', 'mistral', 'mistral'],\n    ['ada', 'mistral', 'mistral', 'mistral', 'mistral'],\n    ['ada', 'mistral', 'mistral', 'mistral', 'mistral'],\n    ['ada', 'mistral', 'mistral', 'mistral', 'mistral'],\n    ['ada', 'mistral', 'mistral', 'mistral', 'mistral'],\n    ['ada', 'mistral', 'mistral', 'mistral', 'mistral'],\n    ['ada', 'mistral', 'mistral', 'mistral', 'mistral'],\n    ['ada', 'mistral', 'mistral', 'mistral', 'mistral'],\n    ['ada', 'mistral', 'mistral', 'mistral', 'mistral'],\n    ['ada', 'mistral', 'mistral', 'mistral', 'mistral'],\n    ['ada', 'mistral', 'mistral', 'mistral', 'mistral'],\n    ['ada', 'mistral', 'mistral', 'mistral', 'mistral'],\n    ['ada', 'mistral', 'mistral', 'mistral', 'mistral'],\n    ['ada', 'mistral', 'mistral', 'mistral', 'mistral'],\n    ['ada', 'mistral', 'mistral', 'mistral', 'mistral'],\n    ['ada', 'mistral', 'mistral', 'mistral', 'mistral'],\n    ['ada', 'mistral', 'mistral', 'mistral', 'mistral'],\n    ['ada', 'mistral', 'mistral', 'mistral', 'mistral'],\n    ['ada', 'mistral', 'mistral', 'mistral', 'mistral'],\n    ['ada', 'mistral', 'mistral', 'mistral', 'mistral'],\n    ['ada', 'mistral', 'mistral', 'mistral', 'mistral'],\n    ['ada', 'mistral', 'mistral', 'mistral', 'mistral'],\n    ['ada', 'mistral', 'mistral', 'mistral', 'mistral'],\n    ['ada', 'mistral', 'mistral', 'mistral', 'mistral'],\n    ['ada', 'mistral', 'mistral', 'mistral', 'mistral'],\n    ['ada', 'mistral', 'mistral', 'mistral"}
{"file": "dataset/ori_500/heatmap_30.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a grid of values\ngrid = np.random.rand(10, 10)\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Display the grid\ncax = ax.matshow(grid, cmap='hot')\n\n# Add a colorbar\nfig.colorbar(cax)\n\n# Set the title\nax.set_title('ROC''s AUC')\n\n# Set the x and y labels\nax.set_xlabel('Timeshift')\nax.set_ylabel('Scales')\n\nplt.show()"}
{"file": "dataset/ori_500/heatmap_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 3.0))\n\n# Define the data\ncategories = ['C Subject', 'C Relation', 'C Attribute', 'Q Subject', 'Q Relation', 'Last']\ncounts = [0, 4, 8, 12, 16, 20, 24, 28]\nvalues = [0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9]\n\n# Create a heatmap\nheatmap = ax.imshow(np.array([values]*len(categories)).T, cmap='Greens')\n\n# Set the tick labels\nax.set_xticks(counts)\nax.set_yticks(range(len(categories)))\nax.set_xticklabels(counts)\nax.set_yticklabels(categories)\n\n# Add a colorbar\ncbar = fig.colorbar(heatmap)\ncbar.set_label('Value')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ndata = [\n    [44, 12, 0, 0],\n    [35, 8, 24, 0],\n    [0, 0, 0, 31],\n    [5, 42, 3, 0],\n    [0, 8, 23, 9],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n"}
{"file": "dataset/ori_500/heatmap_6.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data\nmodels = ['Kokkos', 'Raja', 'Omp', 'Oacc', 'Sycl', 'Native Port']\nsummit = [876, 136, 435, 534, 322, 804]\npermutter = [750, 1737, 742, 375, 750, 1825]\ncorona = [764, 676, 782, 421, 925, 911]\nfrontier = [482, 120, 843, 1170, 925, 911]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Set the color map\ncmap = plt.cm.RdYlGn\n\n# Plot the data\nax.bar(models, summit, color=cmap(0.2), label='Summit')\nax.bar(models, permutter, bottom=summit, color=cmap(0.4), label='Permutter')\nax.bar(models, corona, bottom=[summit[i] + permutter[i] for i in range(len(summit))], color=cmap(0.6), label='Corona')\nax.bar(models, frontier, bottom=[summit[i] + permutter[i] + corona[i] for i in range(len(summit))], color=cmap(0.8), label='Frontier')\n\n# Add labels and title\nax.set_xlabel('Programming Model')\nax.set_ylabel('BabelStream triad Average Memory Bandwidth (GB/s)')\nax.set_title('BabelStream triad Average Memory Bandwidth (GB/s)')\nax.legend()\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/heatmap_7.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Define the data\ndata = [\n    [1.00, 0.90, 0.89, 0.88, 0.64, 0.65, 0.71, 0.82],\n    [0.90, 0.90, 0.93, 0.92, 0.67, 0.69, 0.72, 0.82],\n    [0.89, 0.93, 0.95, 0.95, 0.66, 0.69, 0.72, 0.82],\n    [0.88, 0.92, 0.95, 0.95, 0.68, 0.69, 0.72, 0.82],\n    [0.88, 0.92, 0.95, 0.95, 0.68, 0.69, 0.72, 0.82],\n    [0.88, 0.92, 0.95, 0.95, 0.68, 0.69, 0.72, 0.82],\n    [0.88, 0.92, 0.95, 0.95, 0.68, 0.69, 0.72, 0.82],\n    [0.88, 0.92, 0.95, 0.95, 0.68, 0.69, 0.72, 0.82],\n    [0.88, 0.92, 0.95, 0.95, 0.68, 0.69, 0.72, 0.82],\n    [0.88, 0.92, 0.95, 0.95, 0.68, 0.69, 0.72, 0.82]\n]\n\n# Create a heatmap\ncax = ax.matshow(data, cmap='hot')\n\n# Add a colorbar\nfig.colorbar(cax)\n\n# Set the tick labels\nax.set_xticks(np.arange(len(data[0])))\nax.set_yticks(np.arange(len(data)))\nax.set_xticklabels(['en', 'fr', 'es', 'pt', 'bn', 'nr', 'hi', 'ar', 'zh'])\nax.set_yticklabels(['en', 'fr', 'es', 'pt', 'bn', 'nr', 'hi', 'ar', 'zh'])\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/heatmap_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data\ndata = {\n    'LexRank': [0.19, 0.19, 0.26, 0.26, 0.16, 0.16, 0.03, 0.03, 0.07],\n    'BertScore': [0.62, 0.53, 0.52, 0.49, 0.39, 0.39, 0.24, 0.24, 0.28],\n    'SimCSE': [0.53, 0.52, 0.49, 0.40, 0.39, 0.34, 0.24, 0.24, 0.26],\n    'PMI': [0.50, 0.40, 0.39, 0.20, 0.20, 0.20, 0.10, 0.10, 0.20],\n    'GPT-3.5': [0.34, 0.24, 0.24, 0.20, 0.20, 0.20, 0.10, 0.10, 0.20],\n    'CrossAttN': [0.06, 0.06, 0.06, 0.06, 0.06, 0.06, 0.06, 0.06, 0.05],\n    'PPL': [0.26, 0.26, 0.26, 0.20, 0.20, 0.20, 0.20, 0.20, 0.05]\n}\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the color map\ncmap = plt.cm.Blues\n\n# Plot the data\nfor i, (key, value) in enumerate(data.items()):\n    ax.barh(range(len(value)), value, left=np.arange(len(value)), height=0.8, label=key, color=cmap(i/len(data)))\n\n# Set the labels and title\nax.set_xlabel('Value')\nax.set_ylabel('Metric')\nax.set_title('Metrics Comparison')\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the first graph\ndata1 = [\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\n]\n\n# Data for the second graph\ndata2 = [\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\n]\n\n# Create a figure with two subplots\nfig, axs = plt.subplots(2, 1, figsize=(5.0, 6.0))\n\n# Plot the first graph\naxs[0].imshow(data1, cmap='viridis')\naxs[0].set_title('pythia-1b')\n\n# Plot the second graph\naxs[1].imshow(data2, cmap='viridis')\naxs[1].set_title('pythia-1b')\n\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nx = [0.0, 0.2, 0.4, 0.6, 0.8]\ny1 = [90, 85, 80, 75, 70]\ny2 = [85, 80, 75, 70, 65]\ny3 = [80, 75, 70, 65, 60]\ny4 = [75, 70, 65, 60, 55]\ny5 = [70, 65, 60, 55, 50]\ny6 = [65, 60, 55, 50, 45]\ny7 = [60, 55, 50, 45, 40]\ny8 = [55, 50, 45, 40, 35]\ny9 = [50, 45, 40, 35, 30]\ny10 = [45, 40, 35, 30, 25]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 7.0))\n\n# Plot the data\nax.plot(x, y1, label='XSum')\nax.plot(x, y2, label='CNN/DailyMail')\nax.plot(x, y3, label='NarrativeQA')\nax.plot(x, y4, label='NaturalQuestions - Closed-book')\nax.plot(x, y5, label='NaturalQuestions - Open-book')\nax.plot(x, y6, label='QuAC')\n\n# Set the title and labels\nax.set_title('Number of Pairs vs Test Winning Distance')\nax.set_xlabel('Test Winning Distance')\nax.set_ylabel('Number of Pairs')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure with two subplots\nfig, axs = plt.subplots(1, 2, figsize=(10.0, 3.0))\n\n# Define the data for the histograms\ncosine_similarity = np.linspace(-0.2, 0.8, 10)\ninter_class = np.random.randint(20, 80, size=10)\nintra_class = np.random.randint(20, 80, size=10)\n\n# Plot the histograms\naxs[0].bar(cosine_similarity, inter_class, color='blue', label='Inter Class')\naxs[0].bar(cosine_similarity, intra_class, color='green', label='Intra Class', bottom=inter_class)\naxs[1].bar(cosine_similarity, inter_class, color='blue', label='Inter Class')\naxs[1].bar(cosine_similarity, intra_class, color='green', label='Intra Class', bottom=inter_class)\n\n# Set the labels and title\naxs[0].set_xlabel('Cosine Similarity')\naxs[0].set_ylabel('Frequency')\naxs[0].set_title('Histogram of Cosine Similarity')\naxs[0].legend()\naxs[1].set_xlabel('Cosine Similarity')\naxs[1].set_ylabel('Frequency')\naxs[1].set_title('Histogram of Cosine Similarity')\naxs[1].legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, axs = plt.subplots(2, 2, figsize=(10.0, 8.0))\n\n# Plot the first subplot\naxs[0, 0].bar([0.5, 1.0, 1.5, 2.0], [0.6, 0.7, 0.8, 0.9], color='orange')\naxs[0, 0].set_title('Baseline')\naxs[0, 0].set_xlabel('Euclidean Distance')\naxs[0, 0].set_ylabel('Density')\n\n# Plot the second subplot\naxs[0, 1].bar([0.5, 1.0, 1.5, 2.0], [0.6, 0.7, 0.8, 0.9], color='blue')\naxs[0, 1].set_title('MIRL w/ MULT')\naxs[0, 1].set_xlabel('Euclidean Distance')\naxs[0, 1].set_ylabel('Density')\n\n# Plot the third subplot\naxs[1, 0].bar([0.5, 1.0, 1.5, 2.0], [0.6, 0.7, 0.8, 0.9], color='orange')\naxs[1, 0].set_title('MIRL + OCLR w/ MUL')\naxs[1, 0].set_xlabel('Euclidean Distance')\naxs[1, 0].set_ylabel('Density')\n\n# Plot the fourth subplot\naxs[1, 1].bar([0.5, 1.0, 1.5, 2.0], [0.6, 0.7, 0.8, 0.9], color='blue')\naxs[1, 1].set_title('MIRL + OCLR w/ DOTLA')\naxs[1, 1].set_xlabel('Euclidean Distance')\naxs[1, 1].set_ylabel('Density')\n\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, axes = plt.subplots(6, 2, figsize=(7.0, 8.0))\n\n# Define the data for each subplot\ndata_sets = [\n    (np.random.rand(100), np.random.rand(100)),\n    (np.random.rand(100), np.random.rand(100)),\n    (np.random.rand(100), np.random.rand(100)),\n    (np.random.rand(100), np.random.rand(100)),\n    (np.random.rand(100), np.random.rand(100)),\n    (np.random.rand(100), np.random.rand(100))\n]\n\n# Plot the data\nfor i, (x, y) in enumerate(data_sets):\n    ax = axes[i // 2, i % 2]\n    ax.scatter(x, y)\n    ax.set_xlabel('FKGL')\n    ax.set_ylabel('Density')\n\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_13.pdf", "response": "import matplotlib.pyplot as plt\n\n# Data for plotting\nx = [0.02, 0.04, 0.06, 0.08]\ny1 = [1000, 1000, 1000, 1000]\ny2 = [1000, 1000, 1000, 1000]\ny3 = [1000, 1000, 1000, 1000]\ny4 = [1000, 1000, 1000, 1000]\ny5 = [1000, 1000, 1000, 1000]\ny6 = [1000, 1000, 1000, 1000]\ny7 = [1000, 1000, 1000, 1000]\ny8 = [1000, 1000, 1000, 1000]\ny9 = [1000, 1000, 1000, 1000]\ny10 = [1000, 1000, 1000, 1000]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(5.0, 5.0))\n\n# Plot the data\nax.bar(x, y1, color='blue', label='Camels')\nax.bar(x, y2, bottom=y1, color='orange', label='Kangaroos')\nax.bar(x, y3, bottom=[sum(y) for y in zip(y1, y2)], color='blue', label='Camels')\nax.bar(x, y4, bottom=[sum(y) for y in zip(y1, y2, y3)], color='orange', label='Kangaroos')\nax.bar(x, y5, bottom=[sum(y) for y in zip(y1, y2, y3, y4)], color='blue', label='Camels')\nax.bar(x, y6, bottom=[sum(y) for y in zip(y1, y2, y3, y4, y5)], color='orange', label='Kangaroos')\nax.bar(x, y7, bottom=[sum(y) for y in zip(y1, y2, y3, y4, y5, y6)], color='blue', label='Camels')\nax.bar(x, y8, bottom=[sum(y) for y in zip(y1, y2, y3, y4, y5, y6, y7)], color='orange', label='Kangaroos')\nax.bar(x, y9, bottom=[sum(y) for y in zip(y1, y2, y3, y4, y5, y6, y7, y8)], color='blue', label='Camels')\nax.bar(x, y10, bottom=[sum(y) for y in zip(y1, y2, y3, y4, y5, y6, y7, y8, y9)], color='orange', label='Kangaroos')\n\n# Set the title and labels\nax.set_title('Desert Animals in the Wild')\nax.set_xlabel('Animal Weight (Tons)')\nax.set_ylabel('Frequency')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/hist_14.pdf", "response": "import matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Define the data\nx = [0, 2, 4, 6, 8]\ny1 = [50, 70, 80, 80, 80]\ny2 = [30, 50, 60, 60, 60]\n\n# Plot the data\nax.bar(x, y1, color='red', label='Uniform data')\nax.bar(x, y2, color='blue', label='Normal data')\n\n# Set the title and labels\nax.set_title('Comparison of Uniform and Normal Distributions')\nax.set_xlabel('Value')\nax.set_ylabel('Frequency')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/hist_15.pdf", "response": "import matplotlib.pyplot as plt\nplt.figure(figsize=(8.0, 6.0))\nplt.bar([0, 1, 2, 3, 4, 5], [1000, 900, 800, 700, 600, 500], color='blue')\nplt.title('Histogram of Wind Speed Measurements')\nplt.xlabel('Wind Speed (km/h)')\nplt.ylabel('Number of Measurements')\nplt.show()"}
{"file": "dataset/ori_500/hist_16.pdf", "response": "import matplotlib.pyplot as plt\n\n# Data for plotting\nx = [0.0, 0.5, 1.0, 1.5, 2.0, 2.5, 3.0]\ny1 = [150, 140, 130, 120, 110, 100, 90]\ny2 = [140, 130, 120, 110, 100, 90, 80]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(5.0, 4.0))\n\n# Plot the data\nax.plot(x, y1, color='blue', label='Baguette')\nax.plot(x, y2, color='orange', label='Youtiao')\n\n# Set the title and labels\nax.set_title('Baking Accuracy Analysis')\nax.set_xlabel('Distance to Threshold')\nax.set_ylabel('Frequency')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/hist_17.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Sample data\nx = [0.0, 0.2, 0.4, 0.6, 0.8]\ny = [100, 110, 120, 130, 140]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(16.0, 7.0))\n\n# Plot the data\nax.plot(x, y, 'ro-')\n\n# Set the title and labels\nax.set_title('Sample Plot')\nax.set_xlabel('X-axis Label')\nax.set_ylabel('Y-axis Label')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_18.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(12.0, 8.0))\n\n# Define the data\ncategories = ['Record of the Year', 'Album of the Year', 'Song of the Year', 'Best New Artist', 'Best Pop Solo Performance']\nyears = [0, 50, 100, 150, 200, 250]\ndata = [\n    [10, 15, 12, 14, 16, 18],\n    [12, 17, 13, 15, 17, 19],\n    [14, 19, 15, 17, 19, 21],\n    [16, 21, 17, 19, 21, 23],\n    [18, 23, 19, 21, 23, 25]\n]\n\n# Plot the data\nfor i, category in enumerate(categories):\n    ax.barh(years, data[i], color=plt.cm.viridis(i / len(categories)), label=category)\n\n# Set the title and labels\nax.set_title('Histogram of Grammy Nominations Across Expanded Categories 2019-2023')\nax.set_xlabel('Number of Nominations')\nax.set_ylabel('Year')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/hist_19.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the first graph\nx = [0.00, 0.05, 0.10, 0.15, 0.20, 0.25, 0.30]\ny1 = [400, 300, 200, 100, 50, 25, 10]\ny2 = [350, 250, 150, 50, 20, 10, 5]\n\n# Data for the second graph\nx = [0.00, 0.05, 0.10, 0.15, 0.20, 0.25, 0.30]\ny1 = [400, 300, 200, 100, 50, 25, 10]\ny2 = [350, 250, 150, 50, 20, 10, 5]\n\nfig, axs = plt.subplots(2, 1, figsize=(10.0, 7.0))\n\naxs[0].bar(x, y1, color='blue', label='Non-defective')\naxs[0].bar(x, y2, bottom=y1, color='orange', label='Defective')\naxs[0].set_title('MNIST - Defect Detection')\naxs[0].set_xlabel('X-axis')\naxs[0].set_ylabel('Y-axis')\naxs[0].legend()\n\naxs[1].bar(x, y1, color='green', label='Non-defective')\naxs[1].bar(x, y2, bottom=y1, color='red', label='Defective')\naxs[1].set_title('FashionMNIST - Defect Detection')\naxs[1].set_xlabel('X-axis')\naxs[1].set_ylabel('Y-axis')\naxs[1].legend()\n\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\ntime_scores = [0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0]\nsam_data = [55, 52, 53, 54, 55, 56, 57]\nthioredoxin_like_data = [58, 59, 60, 61, 62, 63, 64]\ntetracopeptide_like_helical_domain_data = [65, 66, 67, 68, 69, 70, 71]\ncheY_like_data = [72, 73, 74, 75, 76, 77, 78]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(9.0, 6.0))\n\n# Plot the data\nax.plot(time_scores, sam_data, label='SAM-dependent methyltransferase')\nax.plot(time_scores, thioredoxin_like_data, label='Thioredoxin-like')\nax.plot(time_scores, tetracopeptide_like_helical_domain_data, label='Tetracopeptide-like helical domain')\nax.plot(time_scores, cheY_like_data, label='CheY-like')\n\n# Set the title and labels\nax.set_title('Time Series Data')\nax.set_xlabel('Time Score')\nax.set_ylabel('Data Value')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_20.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for Milk Chocolate\nmilk_swiss = [1.2, 1.1, 1.0, 0.9, 0.8]\nmilk_new_zealand = [1.1, 1.0, 0.9, 0.8, 0.7]\n\n# Data for Dark Chocolate\ndark_swiss = [1.2, 1.1, 1.0, 0.9, 0.8]\ndark_new_zealand = [1.1, 1.0, 0.9, 0.8, 0.7]\n\n# Data for White Chocolate\nwhite_swiss = [1.2, 1.1, 1.0, 0.9, 0.8]\nwhite_new_zealand = [1.1, 1.0, 0.9, 0.8, 0.7]\n\n# Data for Ruby Chocolate\nruby_swiss = [1.2, 1.1, 1.0, 0.9, 0.8]\nruby_new_zealand = [1.1, 1.0, 0.9, 0.8, 0.7]\n\n# Create a figure with four subplots\nfig, axs = plt.subplots(2, 2, figsize=(10.0, 8.0))\n\n# Plot Milk Chocolate\naxs[0, 0].bar(range(1, 6), milk_swiss, color='blue')\naxs[0, 0].bar(range(1, 6), milk_new_zealand, color='orange')\n\n# Plot Dark Chocolate\naxs[0, 1].bar(range(1, 6), dark_swiss, color='blue')\naxs[0, 1].bar(range(1, 6), dark_new_zealand, color='orange')\n\n# Plot White Chocolate\naxs[1, 0].bar(range(1, 6), white_swiss, color='blue')\naxs[1, 0].bar(range(1, 6), white_new_zealand, color='orange')\n\n# Plot Ruby Chocolate\naxs[1, 1].bar(range(1, 6), ruby_swiss, color='blue')\naxs[1, 1].bar(range(1, 6), ruby_new_zealand, color='orange')\n\n# Set titles and labels\naxs[0, 0].set_title('Milk Chocolate')\naxs[0, 0].set_xlabel('Sweetness')\naxs[0, 0].set_ylabel('Density')\n\naxs[0, 1].set_title('Dark Chocolate')\naxs[0, 1].set_xlabel('Sweetness')\naxs[0, 1].set_ylabel('Density')\n\naxs[1, 0].set_title('White Chocolate')\naxs[1, 0].set_xlabel('Sweetness')\naxs[1, 0].set_ylabel('Density')\n\naxs[1, 1].set_title('Ruby Chocolate')\naxs[1, 1].set_xlabel('Sweetness')\naxs[1, 1].set_ylabel('Density')\n\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_3.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data\nx = np.array([0.00, 0.05, 0.10, 0.15])\ny_camel = np.array([1000, 100, 10, 1])\ny_kangaroo = np.array([1000, 100, 10, 1])\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(5.0, 4.0))\nax.bar(x, y_camel, color='green', label='Camel')\nax.bar(x, y_kangaroo, bottom=y_camel, color='pink', label='Kangaroo')\n\n# Set the title and labels\nax.set_title('CIFAR100 ''Desert'' Concept')\nax.set_xlabel('Concept Weight')\nax.set_ylabel('Count')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/hist_4.pdf", "response": "import matplotlib.pyplot as plt\n\n# Data for the plot\ndistance_diff = [-5.0, -2.5, 0.0, 2.5, 5.0, 7.5, 10.0]\ncenter_samples = [100, 90, 80, 70, 60, 50, 40]\nrandom_samples = [110, 100, 90, 80, 70, 60, 50]\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(5.0, 3.0))\nax.bar(distance_diff, center_samples, color='yellow', label='Center')\nax.bar(distance_diff, random_samples, color='blue', label='Random')\n\n# Add labels and title\nax.set_xlabel('Distance Difference (Random vs Center)')\nax.set_ylabel('Number of Samples')\nax.set_title('Number of Samples by Distance Difference')\nax.legend()\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/hist_5.pdf", "response": "import matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(4.0, 3.0))\n\n# Define the data\nx = [0.0, 2.5, 5.0, 7.5, 10.0, 12.5]\ny = [1000, 800, 600, 400, 200, 100]\n\n# Plot the data\nax.bar(x, y, color='orange')\n\n# Set the title and labels\nax.set_title('Number of Clusters')\nax.set_xlabel('Number of Repetition')\nax.set_ylabel('Number of Clusters')\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/hist_6.pdf", "response": "import matplotlib.pyplot as plt\n\n# Data\ndistances = [0, 1, 2, 3, 4]\ncorrectly_classified = [400, 300, 200, 100, 0]\nmisclassified = [350, 250, 150, 50, 0]\n\n# Plotting\nplt.figure(figsize=(5.0, 3.0))\nplt.bar(distances, correctly_classified, color='blue', label='Correctly classified')\nplt.bar(distances, misclassified, bottom=correctly_classified, color='orange', label='Misclassified')\nplt.xlabel('Distance to threshold')\nplt.ylabel('Count')\nplt.title('Classification Accuracy by Distance')\nplt.legend()\nplt.show()"}
{"file": "dataset/ori_500/hist_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nconfidences = [0.0, 0.2, 0.4, 0.6, 0.8]\naccuracies = [0.2, 0.2, 0.4, 0.6, 0.8]\n\n# Create a bar chart\nplt.bar(confidences, accuracies, color='brown')\n\n# Set the title and labels\nplt.title('Calibration Error: 0.31')\nplt.xlabel('Confidence in bin')\nplt.ylabel('Accuracy in bin')\n\n# Set the y-axis limits\nplt.ylim(0, 1)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nx = [0.2, 0.4, 0.6, 0.8]\ny = [500, 300, 100, 50]\n\n# Create a bar chart\nplt.bar(x, y, color='blue')\n\n# Set the title and labels\nplt.title('Number of Queries Overlap')\nplt.xlabel('% Images Overlap')\nplt.ylabel('Number of Queries')\n\n# Set the figure size\nplt.figure(figsize=(6.0, 5.0))\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 7.0))\n\n# Set the title of the plot\nax.set_title('MNIST')\n\n# Set the x-axis label\nax.set_xlabel('X Label')\n\n# Set the y-axis label\nax.set_ylabel('Y Label')\n\n# Set the x-axis limits\nax.set_xlim(0, 0.25)\n\n# Set the y-axis limits\nax.set_ylim(0, 500)\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.08, 0.06), 0.4, 0.4, color='blue'))\n\n# Draw another rectangle\nax.add_patch(plt.Rectangle((0.12, 0.08), 0.3, 0.3, color='blue'))\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nx = [5, 10, 15, 20]\ny1 = [20, 40, 60, 80]\ny2 = [20, 40, 60, 80]\ny3 = [20, 40, 60, 80]\ny4 = [20, 40, 60, 80]\n\n# Plotting\nplt.figure(figsize=(8.0, 6.0))\nplt.plot(x, y1, 'b-', label='JPEG+LDPC')\nplt.plot(x, y2, 'r-', label='DEEPJSCC w/o ofdm')\nplt.plot(x, y3, 'g-', label='DEEPJSCC w/ ofdm')\nplt.plot(x, y4, 'm-', label='OURS')\n\n# Adding labels and title\nplt.xlabel('SNR')\nplt.ylabel('Classification Accuracy (%)')\nplt.title('Classification Accuracy vs SNR')\nplt.legend()\n\n# Display plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Define the data\nx = [0, 0.125, 0.25, 0.5, 1, 2, 3, 4, 5, 6, 7, 8]\ny_content = [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6]\ny_organization = [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6]\ny_language = [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6]\n\n# Plot the data\nax.plot(x, y_content, label='Content')\nax.plot(x, y_organization, label='Organization')\nax.plot(x, y_language, label='Language')\n\n# Set the title and labels\nax.set_title('Performance Gain (%)')\nax.set_xlabel('n')\nax.set_ylabel('Performance Gain (%)')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Sample data\nx = [0, 20, 40, 60, 80]\ny1 = [0.55, 0.65, 0.75, 0.85, 0.95]\ny2 = [0.55, 0.65, 0.75, 0.85, 0.95]\ny3 = [0.55, 0.65, 0.75, 0.85, 0.95]\ny4 = [0.55, 0.65, 0.75, 0.85, 0.95]\ny5 = [0.55, 0.65, 0.75, 0.85, 0.95]\ny6 = [0.55, 0.65, 0.75, 0.85, 0.95]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Plot the data\nax.plot(x, y1, 'r', label='coco (10k)')\nax.plot(x, y2, 'g', label='laion (10k)')\nax.plot(x, y3, 'b', label='coco (5k)')\nax.plot(x, y4, 'y', label='laion (5k)')\nax.plot(x, y5, 'm', label='CLIP')\nax.plot(x, y6, 'c', label='CLIP')\n\n# Set the title and labels\nax.set_title('Effect of Vocabulary on Zero Shot Accuracy')\nax.set_xlabel('Deposition IO Norm')\nax.set_ylabel('Accuracy')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Sample Ratio values\nsample_ratios = [0.25, 0.5, 0.75, 1.0]\n\n# Data for each line\ndata_512 = [0.7, 0.6, 0.5, 0.4, 0.3]\ndata_1024 = [0.7, 0.6, 0.5, 0.4, 0.3]\ndata_2048 = [0.7, 0.6, 0.5, 0.4, 0.3]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data\nax.plot(sample_ratios, data_512, 'g^', label='MAXN=512')\nax.plot(sample_ratios, data_1024, 'rd', label='MAXN=1024')\nax.plot(sample_ratios, data_2048, 'bo', label='MAXN=2048')\n\n# Set the title and labels\nax.set_title('Standard Deviation of ACC')\nax.set_xlabel('Sample Ratio')\nax.set_ylabel('Std of ACC')\n\n# Add legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Sample data for plotting\nx = [0, 25, 50, 75, 100, 125, 150, 175, 200]\ny_base = [0.5, 0.4, 0.3, 0.2, 0.1, 0.1, 0.1, 0.1, 0.1]\ny_ours = [0.5, 0.4, 0.3, 0.2, 0.1, 0.1, 0.1, 0.1, 0.1]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 10.0))\n\n# Plot the data\nax.plot(x, y_base, label='base')\nax.plot(x, y_ours, label='ours')\n\n# Set the title and labels\nax.set_title('FID (dJ)')\nax.set_xlabel('Training iterations')\nax.set_ylabel('FID (dJ)')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nweeks = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28]\nauto_profiled = [0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2.0, 2.1, 2.2, 2.3, 2.4, 2.5, 2.6, 2.7, 2.8]\nmanually_analyzed = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2.0, 2.1, 2.2, 2.3, 2.4, 2.5, 2.6, 2.7, 2.8]\n\n# Plotting\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\nax.plot(weeks, auto_profiled, 'r-')\nax.plot(weeks, manually_analyzed, 'b-')\n\n# Annotations\nax.annotate('Release new product', xy=(25, 25), xytext=(25, 28),\n            arrowprops=dict(facecolor='blue', shrink=0.05))\n\n# Labels and Title\nax.set_xlabel('Week')\nax.set_ylabel('Normalized Value')\nax.set_title('Sales Trend Analysis')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/line_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Sample data\nx = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\ny1 = [95, 90, 85, 80, 75, 70, 65, 60, 55, 50, 45, 40, 35, 30, 25, 20, 15, 10, 5, 0]\ny2 = [85, 80, 75, 70, 65, 60, 55, 50, 45, 40, 35, 30, 25, 20, 15, 10, 5, 0, 5, 10]\ny3 = [75, 70, 65, 60, 55, 50, 45, 40, 35, 30, 25, 20, 15, 10, 5, 0, 5, 10, 15, 20]\ny4 = [65, 60, 55, 50, 45, 40, 35, 30, 25, 20, 15, 10, 5, 0, 5, 10, 15, 20, 25, 30]\ny5 = [55, 50, 45, 40, 35, 30, 25, 20, 15, 10, 5, 0, 5, 10, 15, 20, 25, 30, 35, 40]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data\nax.plot(x, y1, label='BaCE', color='blue')\nax.plot(x, y2, label='LWF', color='red')\nax.plot(x, y3, label='EWC', color='magenta')\nax.plot(x, y4, label='SEQ', color='pink')\n\n# Set the title and labels\nax.set_title('Average Accuracy')\nax.set_xlabel('Task')\nax.set_ylabel('Accuracy (%)')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_16.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Sample data\nx = [0.0, 0.2, 0.4, 0.6, 0.8, 1.0]\ny1 = [0.99, 0.96, 0.93, 0.9, 0.87, 0.84]\ny2 = [0.99, 0.96, 0.93, 0.9, 0.87, 0.84]\ny3 = [0.99, 0.96, 0.93, 0.9, 0.87, 0.84]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data\nax.plot(x, y1, 'bo-', label='Oesense')\nax.plot(x, y2, 'ro-', label='KWS')\nax.plot(x, y3, 'go-', label='ECG5000')\n\n# Add markers at specific points\nmarkers = [(0.0, 0.99), (0.2, 0.96), (0.4, 0.93), (0.6, 0.9), (0.8, 0.87), (1.0, 0.84)]\nfor marker in markers:\n    ax.plot(marker[0], marker[1], 'D', color='green')\n\n# Set labels and title\nax.set_xlabel('Unertainty threshold')\nax.set_ylabel('Accuracy')\nax.set_title('Model Performance vs Uncertainty Threshold')\n\n# Show legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_17.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data points\nx = [0, 20, 40, 60, 80, 100, 120]\ny = [10**-5, 10**-5, 10**-5, 10**-5, 10**-5, 10**-5, 10**-5]\n\n# Create a plot\nplt.figure(figsize=(6.0, 4.0))\nplt.plot(x, y, 'bo-')  # 'bo-' means blue circles connected by lines\n\n# Set the title and labels\nplt.title('Log KL Divergence')\nplt.xlabel('Number of Parameters')\nplt.ylabel('Log KL Divergence')\n\n# Set the y-axis limits\nplt.ylim(10**-5, 10**-3)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_18.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(9.0, 4.0))\n\n# Define the data\nx = [0, 500, 1000, 1500, 2000]\ny1 = [0.8, 0.9, 0.7, 0.6, 0.5]\ny2 = [0.7, 0.8, 0.6, 0.5, 0.4]\n\n# Plot the data\nax.plot(x, y1, label='7B')\nax.plot(x, y2, label='7B (Fine-tuned)')\n\n# Set the title and labels\nax.set_title('GPT-4 Evaluation')\nax.set_xlabel('Iterations')\nax.set_ylabel('Attack Success Rate')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_19.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Sample data\nx = [10**-2, 10**-1, 10**0]\ny_full = [50, 60, 70]\ny_spt = [55, 65, 75]\ny_vpt = [60, 70, 80]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(5.0, 4.0))\n\n# Plot the data\nax.plot(x, y_full, label='Full', color='green')\nax.plot(x, y_spt, label='SPT', color='red')\nax.plot(x, y_vpt, label='VPT', color='blue')\n\n# Set the title and labels\nax.set_title('Test Accuracy vs Fraction of Training Data')\nax.set_xlabel('Fraction of Training Data (log scale)')\nax.set_ylabel('Test Accuracy (%)')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_2.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(4.0, 3.0))\n\n# Define the data\nx = np.linspace(0, 200, 10)\ny1 = np.sin(x / 50) * 1.5 + 1\ny2 = np.cos(x / 50) * 1.5 + 1\ny3 = np.tan(x / 50) * 1.5 + 1\ny4 = np.sin(x / 50) * 1.5 + 1\ny5 = np.cos(x / 50) * 1.5 + 1\ny6 = np.tan(x / 50) * 1.5 + 1\n\n# Plot the data\nax.plot(x, y1, color='green')\nax.plot(x, y2, color='blue')\nax.plot(x, y3, color='orange')\nax.plot(x, y4, color='green')\nax.plot(x, y5, color='blue')\nax.plot(x, y6, color='orange')\n\n# Set the limits of the x-axis\nax.set_xlim(0, 200)\n\n# Set the title and labels\nax.set_title('Gradient Steps (x 62.5K)')\nax.set_xlabel('Gradient Steps (x 62.5K)')\nax.set_ylabel('Value')\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/line_20.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(16.0, 8.0))\n\n# Set the x-axis limits\nax.set_xlim(0.2, 1.0)\n\n# Set the y-axis limits\nax.set_ylim(0.74, 0.88)\n\n# Set the x-axis ticks\nax.set_xticks([0.2, 0.4, 0.6, 0.8, 1.0])\n\n# Set the y-axis ticks\nax.set_yticks([0.74, 0.76, 0.78, 0.80, 0.82, 0.84, 0.86, 0.88])\n\n# Set the x-axis label\nax.set_xlabel('Ratio r')\n\n# Set the y-axis label\nax.set_ylabel('Performance')\n\n# Set the title\nax.set_title('MOLHIV')\n\n# Add a grid\nax.grid(True)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_21.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(9.0, 6.0))\n\n# Define the data\nx = np.linspace(120, 1120, 10)\ny_ours = np.linspace(75, 95, 10)\ny_acr = np.linspace(75, 95, 10)\n\n# Plot the data\nax.plot(x, y_ours, 'bo', label='Ours')\nax.plot(x, y_acr, 'go', label='ACR')\n\n# Set the title and labels\nax.set_title('Top-1 Acc (%) vs Imbalance Ratio of Unlabeled Data')\nax.set_xlabel('Imbalance Ratio of Unlabeled Data (%)')\nax.set_ylabel('Top-1 Acc (%)')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/line_22.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nratio = [40, 50, 60, 70, 80, 90, 100]\nperplexity_APTQ = [2.91, 3.11, 3.32, 3.53, 3.63, 3.74, 3.94]\nperplexity_LLaMA = [3.11, 3.32, 3.53, 3.63, 3.74, 3.94, 3.94]\nperplexity_OWQ = [3.32, 3.53, 3.63, 3.74, 3.94, 3.94, 3.94]\nperplexity_GPTQ = [3.53, 3.63, 3.74, 3.94, 3.94, 3.94, 3.94]\nperplexity_LLM_QAT = [3.63, 3.74, 3.94, 3.94, 3.94, 3.94, 3.94]\n\n# Plotting\nplt.figure(figsize=(5.0, 4.0))\nplt.plot(ratio, perplexity_APTQ, label='APTQ', color='blue')\nplt.plot(ratio, perplexity_LLaMA, label='LLaMA', color='purple')\nplt.plot(ratio, perplexity_OWQ, label='OWQ', color='orange')\nplt.plot(ratio, perplexity_GPTQ, label='GPTQ', color='green')\nplt.plot(ratio, perplexity_LLM_QAT, label='LLM-QAT', color='red')\n\n# Adding labels and title\nplt.xlabel('Ratio of 4-bit Utilization (%)')\nplt.ylabel('Perplexity (PPL)')\nplt.title('Perplexity vs Ratio of 4-bit Utilization')\n\n# Adding legend\nplt.legend()\n\n# Displaying the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_23.pdf", "response": "import matplotlib.pyplot as plt\n\n# Data points\nx = [2**1, 2**2, 2**3, 2**4, 2**5, 2**6, 2**7]\ny = [82.98, 89.53, 90.47, 92.41, 93.7, 96.75, 96.75]\n\n# Plotting\nplt.figure(figsize=(5.0, 2.0))\nplt.plot(x, y, 'bo-')\nplt.xlabel('Number of Training Objects')\nplt.ylabel('Coverage Ratio (%)')\nplt.title('Coverage Ratio vs Number of Training Objects')\nplt.show()"}
{"file": "dataset/ori_500/line_24.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Define the data\nx = [0, 2, 4, 6, 8]\ny1 = [750, 700, 650, 600, 550]  # Average\ny2 = [740, 690, 640, 590, 540]  # Standard Deviation\n\n# Plot the data\nax.plot(x, y1, color='blue', label='Average')\nax.plot(x, y2, color='lightblue', label='Standard Deviation')\n\n# Fill between the two lines\nax.fill_between(x, y1, y2, color='lightgrey')\n\n# Set the title and labels\nax.set_title('N-ELBO')\nax.set_xlabel('Iterations')\nax.set_ylabel('N-ELBO')\n\n# Show the legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_25.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for plotting\nx = [1, 2, 3, 4, 5, 6, 7, 8]\ny1 = [3.2, 3.1, 3.3, 3.4, 3.5, 3.6, 3.7, 3.8]\ny2 = [2.2, 2.1, 2.3, 2.4, 2.5, 2.6, 2.7, 2.8]\ny3 = [2.9, 2.8, 3.0, 3.1, 3.2, 3.3, 3.4, 3.5]\ny4 = [2.1, 2.0, 2.2, 2.3, 2.4, 2.5, 2.6, 2.7]\ny5 = [2.8, 2.7, 2.9, 3.0, 3.1, 3.2, 3.3, 3.4]\ny6 = [2.5, 2.4, 2.6, 2.7, 2.8, 2.9, 3.0, 3.1]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data\nax.plot(x, y1, 'r', label='Baseline')\nax.plot(x, y2, 'g', label='SoftMoE')\nax.plot(x, y3, 'm', label='Top1-MoE')\n\n# Set the title and labels\nax.set_title('IQM Human Normalized Score')\nax.set_xlabel('Number of experts')\nax.set_ylabel('DoN')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_26.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Define the data\nx = np.array([256, 512, 1024, 2048, 8192, 16384])\ny_bpe = np.array([0.4, 0.6, 0.8, 0.9, 0.8, 0.7])\ny_wordpunct = np.array([0.4, 0.6, 0.8, 0.9, 0.8, 0.7])\ny_whitespaces = np.array([0.4, 0.6, 0.8, 0.9, 0.8, 0.7])\n\n# Plot the data\nax.plot(x, y_bpe, 'b-', label='BPE')\nax.plot(x, y_wordpunct, 'o-', label='Wordpunct')\nax.plot(x, y_whitespaces, 'g-', label='Whitespaces')\n\n# Set the title and labels\nax.set_title('Test set TPR | FPR = 10^-4')\nax.set_xlabel('Vocabulary size')\nax.set_ylabel('TPR')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/line_27.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ncompression_rate = [1, 12, 18, 30]\nword_error_rate_cnn = [26.0, 34.4, 28.6, 55.0]\nword_error_rate_cif = [24.7, 36.8, 29.8, 55.0]\nword_error_rate_star = [18.0, 30.2, 24.7, 55.0]\n\n# Plotting\nplt.figure(figsize=(6.0, 6.0))\nplt.plot(compression_rate, word_error_rate_cnn, color='pink', label='CNN')\nplt.plot(compression_rate, word_error_rate_cif, color='purple', label='CIF')\nplt.plot(compression_rate, word_error_rate_star, color='brown', label='STAR')\n\n# Adding grid and labels\nplt.grid(True)\nplt.xlabel('Compression Rate (%)')\nplt.ylabel('Word Error Rate (%)')\nplt.title('Word Error Rate vs Compression Rate')\n\n# Show legend\nplt.legend()\n\n# Display plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_28.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Sample data\nx = [25, 50, 75, 100, 125, 150, 175, 200]\ny1 = [90, 90, 90, 90, 90, 90, 90, 90]  # Placeholder values\ny2 = [85, 85, 85, 85, 85, 85, 85, 85]  # Placeholder values\ny3 = [80, 80, 80, 80, 80, 80, 80, 80]  # Placeholder values\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Plot the data\nax.plot(x, y1, 'r', marker='o', label='PILOTE')\nax.plot(x, y2, 'b', marker='o', label='Re-trained model')\nax.plot(x, y3, 'g', marker='o', label='Pre-trained model accuracy')\n\n# Set the title and labels\nax.set_title('Average Accuracy of Five Rounds')\nax.set_xlabel('Number of exemplars in class \"Run\"')\nax.set_ylabel('Avg. accuracy of five rounds')\n\n# Add a horizontal line at y=75\nax.axhline(y=75, color='g', linestyle='--')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_29.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data points\nx = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\ny_xLLM = [0.1, 0.12, 0.14, 0.16, 0.18, 0.2, 0.22, 0.24, 0.26, 0.28, 0.3, 0.32, 0.34, 0.36, 0.38, 0.4, 0.42, 0.44, 0.46, 0.48, 0.5]\ny_SinglePassLLM = [0.1, 0.15, 0.2, 0.25, 0.3, 0.35, 0.4, 0.45, 0.5, 0.55, 0.6, 0.65, 0.7, 0.75, 0.8, 0.85, 0.9, 0.95, 1, 1.05, 1.1, 1.15]\n\n# Plotting\nplt.figure(figsize=(4.0, 3.0))\nplt.plot(x, y_xLLM, color='blue', label='xLLM')\nplt.plot(x, y_SinglePassLLM, color='red', label='Single-Pass LLM')\nplt.xlabel('# of Steps')\nplt.ylabel('Avg Fidelity')\nplt.legend()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Sample data\nx = ['All', 'MLP', 'GCN', 'NCN', 'NEO', 'SEAL', 'Node2Vec']\ny1 = [80, 70, 60, 50, 40, 30, 20]\ny2 = [70, 60, 50, 40, 30, 20, 10]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Plot the data\nax.plot(x, y1, label='ogbl-collab')\nax.plot(x, y2, label='ogbl-ppa')\n\n# Set the title and labels\nax.set_title('Hits @ 50')\nax.set_xlabel('Dataset')\nax.set_ylabel('Hits')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_30.pdf", "response": "import matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Define the data\nx = [2, 4, 6, 8, 10, 12]\ny1 = [0.055, 0.055, 0.055, 0.055, 0.055, 0.055]\ny2 = [0.045, 0.045, 0.045, 0.045, 0.045, 0.045]\n\n# Plot the data\nax.plot(x, y1, 'b-')  # Blue line for outside-code-diff\nax.plot(x, y2, 'r-')  # Red line for inside-code-diff\n\n# Set the title and labels\nax.set_title('Android')\nax.set_xlabel('Layer')\nax.set_ylabel('Value')\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/line_31.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Sample data\nx = [6, 7, 8, 9]\ny1 = [0.5, 0.4, 0.3, 0.2]\ny2 = [0.6, 0.5, 0.4, 0.3]\ny3 = [0.7, 0.6, 0.5, 0.4]\ny4 = [0.8, 0.7, 0.6, 0.5]\ny5 = [0.9, 0.8, 0.7, 0.6]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data\nax.plot(x, y1, 'b-', label='Direct (100 samples)')\nax.plot(x, y2, 'g-', label='RFFT (100 samples)')\nax.plot(x, y3, 'y-', label='Scratchpad (100 samples)')\nax.plot(x, y4, 'r-', label='Scratchpad (5000 samples)')\n\n# Set the title and labels\nax.set_title('Digit Recognition Accuracy')\nax.set_xlabel('Digit Length')\nax.set_ylabel('Accuracy')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_32.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Define the data\nx = np.linspace(0, 80, 100)\ny1 = np.linspace(0, 80, 100)\ny2 = np.linspace(0, 80, 100)\n\n# Plot the data\nax.plot(x, y1, 'o', label='iaion')\nax.plot(x, y2, '-', label='CLIP')\n\n# Set the title and labels\nax.set_title('CIFAR100 States Zero Shot Accuracy')\nax.set_xlabel('Decomposition IO Norm')\nax.set_ylabel('Accuracy')\n\n# Set the y-axis limits\nax.set_ylim(0, 375)\n\n# Add a horizontal line at y=375\nax.axhline(y=375, color='k', linestyle='--')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/line_33.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Sample data\nx = [20, 40, 60, 80, 100]\ny1 = [0.55, 0.6, 0.65, 0.7, 0.75]\ny2 = [0.55, 0.6, 0.65, 0.7, 0.75]\ny3 = [0.55, 0.6, 0.65, 0.7, 0.75]\ny4 = [0.55, 0.6, 0.65, 0.7, 0.75]\ny5 = [0.55, 0.6, 0.65, 0.7, 0.75]\n\n# Plotting\nplt.figure(figsize=(6.0, 4.0))\nplt.plot(x, y1, 'y^', label='CNN')\nplt.plot(x, y2, 'r^', label='CNN+HMM')\nplt.plot(x, y3, 'b^', label='RF')\nplt.plot(x, y4, 'c^', label='RF+HMM')\nplt.plot(x, y5, 'm^', label='RF+HMM')\n\n# Adding labels and title\nplt.xlabel('No. of Users in Development Set')\nplt.ylabel('F1')\nplt.title('Performance Metrics')\nplt.legend()\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_34.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Sample data\nx = [2, 3, 4, 5, 6, 7, 8]\ny1 = [27.44, 24.75, 23.38, 22.77, 22.32, 21.47, 21.51]\ny2 = [6.74, 4.54, 3.96, 3.71, 3.49, 3.34, 3.14]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 7.0))\n\n# Plot the data\nax.plot(x, y1, 'b-', label='LibriCSS (test)')\nax.plot(x, y2, 'r-', label='AMI (dev)')\n\n# Set the title and labels\nax.set_title('WER (%) vs Number of Microphones')\nax.set_xlabel('Number of Microphones')\nax.set_ylabel('WER (%)')\n\n# Add markers at specific points\nmarkers = [2, 3, 4, 5, 6, 7, 8]\nfor i in markers:\n    ax.plot(i, y1[markers.index(i)], 'bo', markersize=10)\n    ax.plot(i, y2[markers.index(i)], 'ro', markersize=10)\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_35.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data points\nx = [10**-7, 10**-6, 10**-5, 10**-4]\ny1 = [1, 1, 1, 1]\ny2 = [1, 1, 1, 1]\ny3 = [1, 1, 1, 1]\ny4 = [1, 1, 1, 1]\ny5 = [1, 1, 1, 1]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Plot the data\nax.plot(x, y1, label='M-LVQ-4x8-10', color='orange')\nax.plot(x, y2, label='M-LVQ-4x8-100', color='green')\nax.plot(x, y3, label='M-LVQ-4x8-256', color='orange')\nax.plot(x, y4, label='M-LVQ-4x8', color='purple')\nax.plot(x, y5, label='empirical relat. (B2=8.0)', color='blue')\n\n# Set the title and labels\nax.set_title('Quantization error')\nax.set_xlabel('Quantization error')\nax.set_ylabel('Search window size ratio')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_36.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for plotting\nratios = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0]\nperformance_pna_ours = [0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 0.9, 0.8, 0.7, 0.6]\nperformance_gin_ours = [0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 0.9, 0.8, 0.7, 0.6]\nperformance_pna_others = [0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 0.9, 0.8, 0.7, 0.6]\nperformance_gin_others = [0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 0.9, 0.8, 0.7, 0.6]\n\n# Create a figure and axis\nfig, axs = plt.subplots(1, 3, figsize=(15.0, 5.0))\n\n# Plot the first subplot\naxs[0].plot(ratios, performance_pna_ours, label='PNA + ours', color='purple')\naxs[0].plot(ratios, performance_gin_ours, label='GIN + ours', color='orange')\naxs[0].fill_between(ratios, 0.5, 0.8, color='lightblue')\naxs[0].set_title('SPMotif-0.5')\n\n# Plot the second subplot\naxs[1].plot(ratios, performance_pna_ours, label='PNA + ours', color='purple')\naxs[1].plot(ratios, performance_gin_ours, label='GIN + ours', color='orange')\naxs[1].fill_between(ratios, 0.5, 0.8, color='lightgreen')\naxs[1].set_title('SPMotif-0.7')\n\n# Plot the third subplot\naxs[2].plot(ratios, performance_pna_ours, label='PNA + ours', color='purple')\naxs[2].plot(ratios, performance_gin_ours, label='GIN + ours', color='orange')\naxs[2].fill_between(ratios, 0.5, 0.8, color='lightcoral')\naxs[2].set_title('SPMotif-0.9')\n\n# Set the x-axis label\nfor ax in axs:\n    ax.set_xlabel('Ratio r')\n\n# Set the y-axis label\naxs[0].set_ylabel('Performance')\n\n# Show legend\naxs[0].legend()\n\n# Adjust layout\nplt.tight_layout()\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_37.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 5.0))\n\n# Set the x-axis limits\nax.set_xlim(6, 30)\n\n# Set the y-axis limits\nax.set_ylim(74.5, 78.0)\n\n# Set the x-axis ticks\nax.set_xticks(range(6, 31, 2))\n\n# Set the y-axis ticks\nax.set_yticks(range(75, 79))\n\n# Set the x-axis label\nax.set_xlabel('Ensemble Size')\n\n# Set the y-axis label\nax.set_ylabel('Accuracy')\n\n# Set the title of the plot\nax.set_title('Model Performance')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_38.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Sample data\nepochs = [3, 10, 30]\ngpt_neo = [0.8, 0.7, 0.6]\nfive = [0.7, 0.6, 0.5]\nthree = [0.6, 0.5, 0.4]\nseven = [0.5, 0.4, 0.3]\nten = [0.4, 0.3, 0.2]\nthirty = [0.3, 0.2, 0.1]\n\n# Plotting\nplt.figure(figsize=(6.0, 3.0))\nplt.plot(epochs, gpt_neo, label='GPT-Neo', color='red')\nplt.plot(epochs, five, label='5', color='yellow')\nplt.plot(epochs, three, label='3', color='green')\nplt.plot(epochs, seven, label='7', color='black')\nplt.plot(epochs, ten, label='10', color='blue')\nplt.plot(epochs, thirty, label='30', color='purple')\n\n# Adding labels and title\nplt.xlabel('# Epochs')\nplt.ylabel('Magnitude')\nplt.title('Learning Curve')\nplt.legend()\n\n# Display plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_39.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nx = [96, 192, 336, 720]\ny1 = [0.14, 0.16, 0.18, 0.20]\ny2 = [0.14, 0.16, 0.18, 0.20]\ny3 = [0.14, 0.16, 0.18, 0.20]\ny4 = [0.14, 0.16, 0.18, 0.20]\n\n# Plotting\nplt.figure(figsize=(15.0, 4.0))\nplt.plot(x, y1, 'b', label='pred_length=96')\nplt.plot(x, y2, 'o', label='pred_length=192')\nplt.plot(x, y3, 'g', label='pred_length=336')\nplt.plot(x, y4, 'r', label='pred_length=720')\n\n# Adding labels and title\nplt.xlabel('Time')\nplt.ylabel('Value')\nplt.title('Traffic')\nplt.legend()\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for plotting\nx = [224, 128, 64, 32]\ny1 = [70, 60, 50, 40]\ny2 = [70, 60, 50, 40]\ny3 = [70, 60, 50, 40]\ny4 = [70, 60, 50, 40]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(9, 4))\n\n# Plot the data\nax.plot(x, y1, label='ImageNet-1k', color='orange')\nax.plot(x, y2, label='ImageNet-C/P (Fog)', color='orange')\nax.plot(x, y3, label='ImageNet-1k', color='blue')\nax.plot(x, y4, label='ImageNet-C/P (Fog)', color='blue')\n\n# Set the title and labels\nax.set_title('Serial (n=8, m=1)')\nax.set_xlabel('Time')\nax.set_ylabel('Top-1 Acc.')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_40.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nsnr = [5.0, 7.5, 10.0, 12.5, 15.0, 17.5, 20.0, 22.5, 25.0]\naccuracy_jpegldpc = [90, 80, 70, 60, 50, 40, 30, 20, 10]\naccuracy_deepjscsswofdm = [80, 70, 60, 50, 40, 30, 20, 10, 0]\naccuracy_deepjscsswofdm2 = [85, 75, 65, 55, 45, 35, 25, 15, 5]\naccuracy_ours = [95, 85, 75, 65, 55, 45, 35, 25, 15]\n\n# Plotting\nplt.figure(figsize=(8.0, 6.0))\nplt.plot(snr, accuracy_jpegldpc, 'b-', label='JPEG+LDPC')\nplt.plot(snr, accuracy_deepjscsswofdm, 'or-', label='DEEPJSCC w/o OFDM')\nplt.plot(snr, accuracy_deepjscsswofdm2, 'g^-', label='DEEPJSCC w/ OFDM')\nplt.plot(snr, accuracy_ours, 'rs-', label='OURS')\n\n# Adding labels and title\nplt.xlabel('SNR')\nplt.ylabel('Classification Accuracy (%)')\nplt.title('Classification Accuracy vs SNR')\nplt.legend()\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_41.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 8.0))\n\n# Plot the first line\nax.plot([0, 25, 50, 75, 100, 125, 150, 175, 200], [1, 2, 3, 4, 3, 2, 1, 2, 3], color='purple', label='Line 1 (Sinusoidal)')\n\n# Plot the second line\nax.plot([0, 25, 50, 75, 100, 125, 150, 175, 200], [1, 2, 3, 4, 3, 2, 1, 2, 3], color='blue', label='Line 2 (Quadratic)')\n\n# Set the title of the plot\nax.set_title('Performance vs. Gradient Steps')\n\n# Set the x-axis label\nax.set_xlabel('Gradient Steps (x 62.5K)')\n\n# Set the y-axis label\nax.set_ylabel('Performance Value')\n\n# Set the legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_42.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for Line 1\nx_line1 = [0, 50, 100, 150, 200]\ny_line1 = [0.1, 0.8, 1.2, 1.5, 1.3]\n\n# Data for Line 2\nx_line2 = [0, 50, 100, 150, 200]\ny_line2 = [0.1, 0.8, 1.2, 1.5, 1.3]\n\n# Data for Line 3\nx_line3 = [0, 50, 100, 150, 200]\ny_line3 = [0.1, 0.8, 1.2, 1.5, 1.3]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Plot the lines\nax.plot(x_line1, y_line1, 'o-', color='orange', label='Line 1')\nax.plot(x_line2, y_line2, 's-', color='blue', label='Line 2')\nax.plot(x_line3, y_line3, '^-', color='green', label='Line 3')\n\n# Set the title and labels\nax.set_title('Polynomial Trend (from Line 2)')\nax.set_xlabel('Gradient Steps (x 62.5K)')\nax.set_ylabel('Polynomial Value')\n\n# Add legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_43.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nx = ['All', 'MLP', 'GCN', 'NCN', 'NeoGNN-BUDDY', 'Node2Vec']\ny1 = [75, 70, 65, 60, 55, 75]\ny2 = [80, 75, 70, 65, 60, 55]\ny3 = [78, 73, 68, 63, 58, 78]\ny4 = [77, 72, 67, 62, 57, 77]\ny5 = [76, 71, 66, 61, 56, 76]\ny6 = [79, 74, 69, 64, 59, 79]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(12.0, 5.0))\n\n# Plot the data\nax.plot(x, y1, label='ogbl-collab 2022')\nax.plot(x, y2, label='ogbl-collab 2023')\n\n# Set the title and labels\nax.set_title('ogbl-collab Results')\nax.set_xlabel('Nodes')\nax.set_ylabel('Hits')\n\n# Add legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_44.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Sample data\nx = [10, 20, 30, 40, 50, 60]\ny_standard = [10**-10, 10**-10, 10**-10, 10**-10, 10**-10, 10**-10]\ny_constrained = [10**-10, 10**-10, 10**-10, 10**-10, 10**-10, 10**-10]\ny_experimental = [10**-10, 10**-10, 10**-10, 10**-10, 10**-10, 10**-10]\ny_hypothetical = [10**-10, 10**-10, 10**-10, 10**-10, 10**-10, 10**-10]\n\n# Plotting\nplt.figure(figsize=(10.0, 6.0))\nplt.plot(x, y_standard, label='Standard')\nplt.plot(x, y_constrained, label='Constrained')\nplt.plot(x, y_experimental, label='Experimental')\nplt.plot(x, y_hypothetical, label='Hypothetical')\n\n# Adding markers at specific points\nplt.scatter([10, 20, 30, 40, 50, 60], [10**-10, 10**-10, 10**-10, 10**-10, 10**-10, 10**-10], color='red', marker='^')\nplt.scatter([10, 20, 30, 40, 50, 60], [10**-10, 10**-10, 10**-10, 10**-10, 10**-10, 10**-10], color='green', marker='s')\nplt.scatter([10, 20, 30, 40, 50, 60], [10**-10, 10**-10, 10**-10, 10**-10, 10**-10, 10**-10], color='blue', marker='p')\n\n# Setting labels and title\nplt.xlabel('N')\nplt.ylabel('Precision')\nplt.title('Performance Metrics')\nplt.legend()\n\n# Displaying the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_45.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Sample data for plotting\nx = [10**i for i in range(5)]\ny1 = [10**i for i in range(5)]\ny2 = [10**i for i in range(5)]\ny3 = [10**i for i in range(5)]\ny4 = [10**i for i in range(5)]\n\n# Create a figure and axis\nfig, axs = plt.subplots(2, 2, figsize=(12.0, 8.0))\n\n# Plotting the first graph\naxs[0, 0].plot(x, y1, 'b-', label='Standard')\naxs[0, 0].plot(x, y2, 'r-', label='Constrained')\naxs[0, 0].plot(x, y3, 'g-', label='Innovative')\naxs[0, 0].plot(x, y4, 'y-', label='Experimental')\naxs[0, 0].set_title('Graph Variation 1')\naxs[0, 0].set_xlabel('N')\naxs[0, 0].set_ylabel('Peak Performance')\naxs[0, 0].legend()\n\n# Plotting the second graph\naxs[0, 1].plot(x, y1, 'b-', label='Standard')\naxs[0, 1].plot(x, y2, 'r-', label='Constrained')\naxs[0, 1].plot(x, y3, 'g-', label='Innovative')\naxs[0, 1].plot(x, y4, 'y-', label='Experimental')\naxs[0, 1].set_title('Graph Variation 2')\naxs[0, 1].set_xlabel('N')\naxs[0, 1].set_ylabel('Peak Performance')\naxs[0, 1].legend()\n\n# Plotting the third graph\naxs[1, 0].plot(x, y1, 'b-', label='Standard')\naxs[1, 0].plot(x, y2, 'r-', label='Constrained')\naxs[1, 0].plot(x, y3, 'g-', label='Innovative')\naxs[1, 0].plot(x, y4, 'y-', label='Experimental')\naxs[1, 0].set_title('Graph Variation 3')\naxs[1, 0].set_xlabel('N')\naxs[1, 0].set_ylabel('Peak Performance')\naxs[1, 0].legend()\n\n# Plotting the fourth graph\naxs[1, 1].plot(x, y1, 'b-', label='Standard')\naxs[1, 1].plot(x, y2, 'r-', label='Constrained')\naxs[1, 1].plot(x, y3, 'g-', label='Innovative')\naxs[1, 1].plot(x, y4, 'y-', label='Experimental')\naxs[1, 1].set_title('Graph Variation 4')\naxs[1, 1].set_xlabel('N')\naxs[1, 1].set_ylabel('Peak Performance')\naxs[1, 1].legend()\n\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_46.pdf", "response": "import matplotlib.pyplot as plt\nfig, axs = plt.subplots(2, 1, figsize=(6.0, 10.0))\naxs[0].plot([0, 5, 10, 15, 20, 25], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0], color='blue')\naxs[0].set_title('Daytime Activity Monitoring')\naxs[0].set_xlabel('Time (Hours)')\naxs[0].set_ylabel('Activity Level')\naxs[1].plot([0, 5, 10, 15, 20, 25], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0], color='red')\naxs[1].set_title('Nighttime Activity Monitoring')\naxs[1].set_xlabel('Time (Hours)')\naxs[1].set_ylabel('Activity Level')"}
{"file": "dataset/ori_500/line_47.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Define the data\ntime = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\nstandard_performance = [0.4, 0.6, 0.8, 0.6, 0.4, 0.2, 0.4, 0.6, 0.8, 0.6, 0.4, 0.2, 0.4]\ninnovative_performance = [0.6, 0.8, 0.6, 0.4, 0.2, 0.4, 0.6, 0.8, 0.6, 0.4, 0.2, 0.4, 0.6]\n\n# Plot the data\nax.plot(time, standard_performance, color='blue', label='Standard Performance')\nax.plot(time, innovative_performance, color='red', label='Innovative Performance')\n\n# Set the title and labels\nax.set_title('Comparative Performance Analysis Over Time')\nax.set_xlabel('Time (Months)')\nax.set_ylabel('Performance Index')\n\n# Show the legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_48.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nmonths = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\nmonthly_sales = [1000, 1100, 1200, 1300, 1400, 1500, 1600, 1700, 1800, 1900, 2000, 2100]\naverage_temperature = [20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]\n\n# Plotting\nplt.figure(figsize=(10.0, 6.0))\nplt.plot(months, monthly_sales, 'b-', label='Monthly Sales')\nplt.plot(months, average_temperature, 'r-', label='Average Temperature')\n\n# Marking specific points\nplt.scatter([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [1000, 1100, 1200, 1300, 1400, 1500, 1600, 1700, 1800, 1900, 2000, 2100], color='red', marker='o')\nplt.scatter([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], color='red', marker='o')\n\n# Adding labels and title\nplt.xlabel('Month')\nplt.ylabel('Sales/Celsius')\nplt.title('Sales and Temperature Correlation Over a Year')\nplt.legend()\n\n# Display plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_49.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for each graph\ntime = [0, 2, 4, 6, 8, 10]\ngrowth_values = [1.3, 0.8, 0.3, 0.3, 0.3, 0.9]\ndecay_values = [1.3, 0.8, 0.3, 0.3, 0.3, 0.9]\noscillation_values = [1.2, 1.0, 0.8, 0.6, 0.4, 0.2]\n\n# Create a figure and axis\nfig, axs = plt.subplots(3, 1, figsize=(6.0, 9.0))\n\n# Plot the first graph\naxs[0].plot(time, growth_values, 'g-')\naxs[0].set_title('Exponential Growth Over Time')\n\n# Plot the second graph\naxs[1].plot(time, decay_values, 'r-')\naxs[1].set_title('Exponential Decay Over Time')\n\n# Plot the third graph\naxs[2].plot(time, oscillation_values, 'b-')\naxs[2].set_title('Oscillatory Behavior Over Time')\n\n# Set the y-axis limits for all graphs\nfor ax in axs:\n    ax.set_ylim(-1.2, 1.2)\n\n# Display the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nx = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ny1 = [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5]\ny2 = [0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6]\ny3 = [0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Plot the data\nax.plot(x, y1, label='5-shot direct', color='blue')\nax.plot(x, y2, label='5-shot scratchpad', color='orange')\nax.plot(x, y3, label='5-shot rule-following', color='green')\n\n# Set the title and labels\nax.set_title('5-shot Accuracy by Digit Length')\nax.set_xlabel('Digit Length')\nax.set_ylabel('Accuracy')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_50.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the first graph\nx = [2, 4, 6, 8, 10, 12, 14, 16, 18]\ny_smooth = [0.3, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2]\ny_first_diff = [100, 100, 100, 100, 100, 100, 100, 100, 100]\n\n# Data for the second graph\nx = [2.5, 5, 7.5, 10, 12.5, 15, 17.5, 20]\ny_cumulative_sum = [2.5, 2.0, 1.5, 1.0, 0.5, 0.0, -0.5, -1.0]\n\n# Create a figure and axis\nfig, axs = plt.subplots(2, 1, figsize=(5.0, 10.0))\n\n# Plot the first graph\naxs[0].plot(x, y_smooth, color='purple', label='Smooth Data')\naxs[0].plot(x, y_first_diff, color='orange', label='First Difference Data')\naxs[0].set_title('Smoothed Representation')\naxs[0].set_xlabel('Time')\naxs[0].set_ylabel('Value')\naxs[0].legend()\n\n# Plot the second graph\naxs[1].plot(x, y_cumulative_sum, color='green', label='Cumulative Sum')\naxs[1].set_title('Cumulative Sum Over Time')\naxs[1].set_xlabel('Time')\naxs[1].set_ylabel('Cumulative Value')\n\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_51.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfig, axs = plt.subplots(4, 1, figsize=(6.0, 12.0))\n\n# Sin Wave\nt = np.linspace(0, 10, 100)\nsin_wave = np.sin(t)\naxs[0].plot(t, sin_wave, 'm')\naxs[0].set_title('Sin Wave')\n\n# Cos Wave\ncos_wave = np.cos(t)\naxs[1].plot(t, cos_wave, 'g')\naxs[1].set_title('Cos Wave')\n\n# Exp Decay\nexp_decay = np.exp(-t / 5)\naxs[2].plot(t, exp_decay, 'b')\naxs[2].set_title('Exp Decay')\n\n# Log Growth\nlog_growth = np.log(t + 1)\naxs[3].plot(t, log_growth, 'r')\naxs[3].set_title('Log Growth')\n\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_52.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\nx = [0.1, 0.2, 0.3, 0.4]\ny_positive = [82, 82, 82, 82]\ny_negative = [79, 79, 79, 79]\ny_contrastive = [84, 84, 84, 84]\ny_fuzzy = [86, 86, 86, 86]\n\n# Create a figure and axis\nfig, axs = plt.subplots(2, 2, figsize=(9.0, 6.0))\n\n# Plot the data\naxs[0, 0].plot(x, y_positive, 'b-')\naxs[0, 0].set_title('Positive bound')\n\naxs[0, 1].plot(x, y_negative, 'r-')\naxs[0, 1].set_title('Negative bound')\n\naxs[1, 0].plot(x, y_contrastive, 'g-')\naxs[1, 0].set_title('Contrastive loss weight')\n\naxs[1, 1].plot(x, y_fuzzy, 'm-')\naxs[1, 1].set_title('Fuzzy coefficient')\n\n# Set the x-axis limits\nfor ax in axs.flat:\n    ax.set_xlim(0, 1)\n\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_53.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Sample data for plotting\nx = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0]\ny1 = [82, 81, 79, 78, 77, 76, 75, 74, 73, 72]  # Positive Bound\ny2 = [82, 81, 79, 78, 77, 76, 75, 74, 73, 72]  # Negative Bound\ny3 = [82, 81, 79, 78, 77, 76, 75, 74, 73, 72]  # Contrastive Loss Weight\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(12.0, 8.0))\n\n# Plot the data\nax.plot(x, y1, 'r-', label='Positive Bound')\nax.plot(x, y2, 'g-', label='Negative Bound')\nax.plot(x, y3, 'b-', label='Contrastive Loss Weight')\n\n# Set the title and labels\nax.set_title('Plot Title')\nax.set_xlabel('X-axis Label')\nax.set_ylabel('Y-axis Label')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_54.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ndriving_styles = ['Passive', 'Rail', 'Replay', 'Sportive']\nweather_conditions = ['Dry', 'Rain', 'Snow']\nrelaxation_levels = [\n    [1.3, 1.2, 1.1, 1.0],  # Dry\n    [1.3, 1.2, 1.1, 1.0],  # Rain\n    [1.3, 1.2, 1.1, 1.0]   # Snow\n]\n\n# Create subplots\nfig, axs = plt.subplots(1, 3, figsize=(12, 4))\n\n# Plot each weather condition\nfor i, weather in enumerate(weather_conditions):\n    for j, style in enumerate(driving_styles):\n        axs[i].plot(relaxation_levels[i], label=style)\n    axs[i].set_title(weather)\n    axs[i].legend()\n\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_55.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 3.0))\n\n# Define the data\nn_aug = np.arange(0, 9, 1)\ncontent = [8, 7, 6, 5, 4, 3, 2, 1, 0]\norganization = [6, 5, 4, 3, 2, 1, 0, -1, -2]\nlanguage = [4, 3, 2, 1, 0, -1, -2, -3, -4]\n\n# Plot the data\nax.plot(n_aug, content, label='Content', color='blue')\nax.plot(n_aug, organization, label='Organization', color='red')\nax.plot(n_aug, language, label='Language', color='green')\n\n# Add markers at specific points\nmarkers = [0.25, 0.5, 1, 2, 4]\nfor marker in markers:\n    ax.plot(marker, content[int(marker)], 'gp')\n    ax.plot(marker, organization[int(marker)], 'rp')\n    ax.plot(marker, language[int(marker)], 'cp')\n\n# Set the title and labels\nax.set_title('Dynamic Performance Gain Across Different n_aug Levels')\nax.set_xlabel('n_aug')\nax.set_ylabel('Performance Gain (%)')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/line_56.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for plotting\nx = [0, 20, 40, 60, 80]\ny1 = [0.75, 0.75, 0.75, 0.75, 0.75]\ny2 = [0.70, 0.70, 0.70, 0.70, 0.70]\ny3 = [0.65, 0.65, 0.65, 0.65, 0.65]\ny4 = [0.60, 0.60, 0.60, 0.60, 0.60]\ny5 = [0.55, 0.55, 0.55, 0.55, 0.55]\n\n# Create a figure and axis\nfig, axs = plt.subplots(1, 3, figsize=(9.0, 3.0))\n\n# Plotting the first subplot\naxs[0].plot(x, y1, 'r-', label='COCO (10k)')\naxs[0].set_title('COCO 10K')\naxs[0].set_xlabel('Decomposition IO Norm')\naxs[0].set_ylabel('Accuracy')\naxs[0].legend()\n\n# Plotting the second subplot\naxs[1].plot(x, y2, 'b-', label='LAION (10k)')\naxs[1].set_title('LAION 10K')\naxs[1].set_xlabel('Decomposition IO Norm')\naxs[1].set_ylabel('Accuracy')\naxs[1].legend()\n\n# Plotting the third subplot\naxs[2].plot(x, y3, 'g-', label='COCO (5k)')\naxs[2].plot(x, y4, 'y-', label='LAION (5k)')\naxs[2].set_title('COCO & LAION 5K')\naxs[2].set_xlabel('Decomposition IO Norm')\naxs[2].set_ylabel('Accuracy')\naxs[2].legend()\n\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_57.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\nx = [0.025, 0.05, 0.075, 0.1, 0.125, 0.15, 0.175, 0.2]\ny1 = [0.18, 0.16, 0.14, 0.12, 0.1, 0.08, 0.06, 0.04]\ny2 = [0.18, 0.16, 0.14, 0.12, 0.1, 0.08, 0.06, 0.04]\ny3 = [0.18, 0.16, 0.14, 0.12, 0.1, 0.08, 0.06, 0.04]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(12.0, 9.0))\n\n# Plot the data\nax.plot(x, y1, 'b-', label='Error Rate vs. Learning Rate (Batch Size=64)')\nax.plot(x, y2, 'r-', label='Error Rate vs. Learning Rate (Batch Size=128)')\nax.plot(x, y3, 'g-', label='Accuracy vs. Dropout (Batch Size=64)')\nax.plot(x, y3, 'y-', label='Accuracy vs. Dropout (Batch Size=128)')\n\n# Set the title and labels\nax.set_title('Error Rate vs. Learning Rate')\nax.set_xlabel('Parameter Rate')\nax.set_ylabel('Metric')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_58.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 4.0))\n\n# Plot the data\nax.plot([0, 25, 50, 100, 150, 200], [0.6, 0.5, 0.4, 0.3, 0.2, 0.1], 'b-')\nax.plot([0, 25, 50, 100, 150, 200], [0.7, 0.6, 0.5, 0.4, 0.3, 0.2], 'r-')\n\n# Set the title and labels\nax.set_title('Metric 1')\nax.set_xlabel('Training Iterations')\nax.set_ylabel('Metric Value')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_59.pdf", "response": "import matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(5.0, 3.0))\n\n# Define the data points\nx = [0, 25, 50, 75, 100, 125, 150, 175, 200]\ny_base_model = [0.6, 0.5, 0.4, 0.3, 0.2, 0.1, 0.05, 0.02, 0.01]\ny_our_model = [0.6, 0.5, 0.4, 0.3, 0.2, 0.1, 0.05, 0.02, 0.01]\n\n# Plot the data points\nax.plot(x, y_base_model, color='blue', label='Base Model')\nax.plot(x, y_our_model, color='cyan', label='Our Model')\n\n# Set the title and labels\nax.set_title('Accuracy')\nax.set_xlabel('Training Iterations')\nax.set_ylabel('Metric Value')\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()"}
{"file": "dataset/ori_500/line_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(9.0, 6.0))\n\n# Set the x-axis limits\nax.set_xlim(10**1, 6*10**1)\n\n# Set the y-axis limits\nax.set_ylim(10**-13, 10**-4)\n\n# Draw horizontal lines at specified y-values\nfor y in [10**-13, 10**-10, 10**-7, 10**-4]:\n    ax.axhline(y=y, color='black', linestyle='-')\n\n# Draw vertical lines at specified x-values\nfor x in [2*10**1, 3*10**1, 4*10**1, 6*10**1]:\n    ax.axvline(x=x, color='black', linestyle='-')\n\n# Plot the data\nax.plot([10**1, 2*10**1, 3*10**1, 4*10**1, 6*10**1], [10**-13, 10**-10, 10**-7, 10**-4, 10**-1], label='Standard')\nax.plot([10**1, 2*10**1, 3*10**1, 4*10**1, 6*10**1], [10**-13, 10**-10, 10**-7, 10**-4, 10**-1], label='Constrained', color='orange')\n\n# Add legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_60.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Define the data\nx = np.arange(0, 26)\ny1 = np.random.rand(26) * 1.5 - 0.75\ny2 = np.random.rand(26) * 1.5 - 0.75\n\n# Plot the data\nax.plot(x, y1, 'b-', label='Performance')\nax.plot(x, y2, 'r-', label='Efficiency')\n\n# Set the limits of the axes\nax.set_xlim(0, 25)\nax.set_ylim(-1.5, 1.5)\n\n# Add grid lines\nax.grid(True)\n\n# Add labels and title\nax.set_xlabel('Weeks')\nax.set_ylabel('Efficiency')\nax.set_title('Performance and Efficiency Over Weeks')\n\n# Add legend\nax.legend()\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/line_61.pdf", "response": "import matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Define the data\nx = [0, 5, 10, 15, 20, 25]\ny1 = [0.3, 0.7, 0.9, 0.8, 0.6, 0.4]\ny2 = [0.5, 0.8, 0.7, 0.6, 0.5, 0.4]\n\n# Plot the data\nax.plot(x, y1, 'b-', label='Performance')\nax.plot(x, y2, 'r-', label='Efficiency')\n\n# Add labels and title\nax.set_xlabel('Weeks')\nax.set_ylabel('Values')\nax.set_title('Performance and Efficiency Analysis')\n\n# Add legend\nax.legend()\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/line_62.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Define the data\nx = np.arange(30)\ny1 = np.random.rand(30)\ny2 = np.random.rand(30)\ny3 = np.random.rand(30)\ny4 = np.random.rand(30)\n\n# Plot the data\nax.plot(x, y1, 'b-', label='Performance')\nax.plot(x, y2, 'r-', label='Efficiency')\nax.plot(x, y3, 'g-', label='Growth')\n\n# Set the limits of the x-axis\nax.set_xlim(0, 30)\n\n# Set the limits of the y-axis\nax.set_ylim(0, 12)\n\n# Set the title of the plot\nax.set_title('Detailed Performance and Efficiency Analysis Over Weeks')\n\n# Set the labels for the x-axis and y-axis\nax.set_xlabel('Weeks')\nax.set_ylabel('Efficiency')\n\n# Show the legend\nax.legend()\n\n# Display the plot\nplt.show()"}
{"file": "dataset/ori_500/line_63.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(12.0, 8.0))\n\n# Define the data series\ndata_series_1 = [1.0, 0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1, 0.0]\ndata_series_2_with_gradient = [0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1, 0.0, 0.0]\ndata_series_3 = [0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1, 0.0, 0.0, 0.0]\n\n# Plot the data series\nax.plot(data_series_1, label='Data Series 1')\nax.plot(data_series_2_with_gradient, label='Data Series 2 with Gradient')\nax.plot(data_series_3, label='Data Series 3')\n\n# Set the title and labels\nax.set_title('Dynamic Data Presentation Across Weeks')\nax.set_xlabel('Weeks')\nax.set_ylabel('Normalized Value')\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_64.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Sample data\nx = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ny1 = [95, 90, 85, 80, 75, 70, 65, 60, 55, 50]\ny2 = [85, 80, 75, 70, 65, 60, 55, 50, 45, 40]\ny3 = [75, 70, 65, 60, 55, 50, 45, 40, 35, 30]\ny4 = [65, 60, 55, 50, 45, 40, 35, 30, 25, 20]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(12.0, 6.0))\n\n# Plot the data\nax.plot(x, y1, 'b^', label='BaCE')\nax.plot(x, y2, 'bv', label='LWF')\nax.plot(x, y3, 'g^', label='EWC')\nax.plot(x, y4, 'gv', label='SEQ')\n\n# Set the title and labels\nax.set_title('Average Accuracy (%)')\nax.set_xlabel('Task')\nax.set_ylabel('Average Accuracy (%)')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_65.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the first graph\nx1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ny1_bace = [90, 85, 80, 75, 70, 65, 60, 55, 50, 45]\ny1_ewc = [80, 75, 70, 65, 60, 55, 50, 45, 40, 35]\n\n# Data for the second graph\nx2 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ny2_lwf = [85, 80, 75, 70, 65, 60, 55, 50, 45, 40]\ny2_se = [80, 75, 70, 65, 60, 55, 50, 45, 40, 35]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 3.0))\n\n# Plot the first graph\nax.plot(x1, y1_bace, 'bo-', label='BaCE')\nax.plot(x1, y1_ewc, 'co-', label='EWC')\n\n# Plot the second graph\nax.plot(x2, y2_lwf, 'ro-', label='LWF')\nax.plot(x2, y2_se, 'mo-', label='SE')\n\n# Set the title and labels\nax.set_title('Performance Comparison')\nax.set_xlabel('Task')\nax.set_ylabel('Average Accuracy (%)')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_66.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(9.0, 7.0))\n\n# Define the data\nx = [0, 250, 500, 750, 1000, 1250, 1500, 1750, 2000]\ny1 = [0.2, 0.4, 0.6, 0.8, 1.0, 1.2, 1.4, 1.6, 1.8]\ny2 = [0.2, 0.4, 0.6, 0.8, 1.0, 1.2, 1.4, 1.6, 1.8]\n\n# Plot the data\nax.plot(x, y1, label='model1 Series 1')\nax.plot(x, y2, label='model1 Series 2')\n\n# Set the title and labels\nax.set_title('model1 Performance')\nax.set_xlabel('Iterations')\nax.set_ylabel('Success Rate')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_67.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Sample data\nx = [2, 3, 4, 5, 6, 7, 8]\ny1 = [25, 23, 21, 19, 17, 15, 13]\ny2 = [27, 25, 23, 21, 19, 17, 15]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 5.0))\n\n# Plot the data\nax.plot(x, y1, 'o-', label='IHM')\nax.plot(x, y2, 's-', label='SDM')\n\n# Set the title and labels\nax.set_title('Wear Rate (%) vs Number of Microphones')\nax.set_xlabel('Number of Microphones')\nax.set_ylabel('Wear Rate (%)')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_68.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Sample data\nx = [2, 3, 4, 5, 6, 7, 8]\ny1 = [22, 24, 26, 28, 26, 24, 22]  # WER\ny2 = [20, 22, 24, 26, 24, 22, 20]  # AMI WER\ny3 = [22, 24, 26, 28, 26, 24, 22]  # LibriCSS (test)\ny4 = [20, 22, 24, 26, 24, 22, 20]  # AMI (dev)\n\n# Plotting\nplt.figure(figsize=(8.0, 7.0))\nplt.plot(x, y1, 'b-', label='IHM Trend')\nplt.plot(x, y2, 'm-', label='SDM Trend')\nplt.plot(x, y3, 'bo', label='LibriCSS (test)')\nplt.plot(x, y4, 'ro', label='AMI (dev)')\nplt.xlabel('Number of microphones')\nplt.ylabel('WER (%)')\nplt.title('Trend Analysis')\nplt.legend()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_69.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nx = [2, 3, 4, 5, 6, 7, 8]\ny1 = [0.9, 0.9, 0.8, 0.7, 0.6, 0.5, 0.4]\ny2 = [0.9, 0.9, 0.8, 0.7, 0.6, 0.5, 0.4]\ny3 = [0.9, 0.9, 0.8, 0.7, 0.6, 0.5, 0.4]\ny4 = [0.9, 0.9, 0.8, 0.7, 0.6, 0.5, 0.4]\ny5 = [0.9, 0.9, 0.8, 0.7, 0.6, 0.5, 0.4]\ny6 = [0.9, 0.9, 0.8, 0.7, 0.6, 0.5, 0.4]\ny7 = [0.9, 0.9, 0.8, 0.7, 0.6, 0.5, 0.4]\n\n# Plotting\nplt.figure(figsize=(8.0, 5.0))\nplt.plot(x, y1, 'o-', label='LibriCSS WER')\nplt.plot(x, y2, 'b-', label='AMI WER')\nplt.plot(x, y3, 'r-', label='Threshold')\nplt.axhline(y=0.7, color='r', linestyle='-')\nplt.xlabel('Number of Microphones')\nplt.ylabel('WER (%)')\nplt.title('WER vs Number of Microphones')\nplt.legend()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for plotting\nx = [0.1, 0.2, 0.3, 0.4]\ny1 = [78, 76, 74, 72]\ny2 = [78, 76, 74, 72]\ny3 = [78, 76, 74, 72]\ny4 = [78, 76, 74, 72]\n\n# Create a figure and axis\nfig, axs = plt.subplots(1, 4, figsize=(12, 4))\n\n# Plot each graph\naxs[0].plot(x, y1, 'b-')\naxs[1].plot(x, y2, 'b-')\naxs[2].plot(x, y3, 'b-')\naxs[3].plot(x, y4, 'b-')\n\n# Set titles\naxs[0].set_title('a Positive bound.')\naxs[1].set_title('b Negative bound.')\naxs[2].set_title('c Contrastive loss weight.')\naxs[3].set_title('d Fuzzy coefficient.')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_70.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nx = [2, 3, 4, 5, 6, 7, 8]\ny1 = [0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3]\ny2 = [0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3]\n\n# Plotting\nfig, ax = plt.subplots(1, 2, figsize=(12.0, 5.0))\nax[0].plot(x, y1, 'y-', label='LibriCSS WER')\nax[0].plot(x, y2, 'r-', label='Threshold')\nax[0].set_xlabel('Number of Microphones')\nax[0].set_ylabel('WER (%)')\nax[0].legend()\n\nax[1].plot(x, y1, 'g-', label='AMi WER')\nax[1].plot(x, y2, 'r-', label='Threshold')\nax[1].set_xlabel('Number of Microphones')\nax[1].set_ylabel('WER (%)')\nax[1].legend()\n\nplt.show()\n```"}
{"file": "dataset/ori_500/line_71.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 12.0))\n\n# Set the x-axis limits\nax.set_xlim(0.1, 1.0)\n\n# Set the y-axis limits\nax.set_ylim(0.4, 0.8)\n\n# Set the x-axis ticks\nax.set_xticks([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0])\n\n# Set the y-axis ticks\nax.set_yticks([0.4, 0.5, 0.6, 0.7, 0.8])\n\n# Set the x-axis label\nax.set_xlabel('Ratio r')\n\n# Set the y-axis label\nax.set_ylabel('Performance')\n\n# Set the title of the plot\nax.set_title('SPMotif-0.5')\n\n# Plot the data\nax.plot([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0], [0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6], color='blue', marker='o')\nax.plot([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0], [0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6], color='green', marker='^')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_72.pdf", "response": "import matplotlib.pyplot as plt\nplt.figure(figsize=(10.0, 5.0))\nplt.plot([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], color='purple')\nplt.plot([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], color='orange')\nplt.show()"}
{"file": "dataset/ori_500/line_73.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Modern Linear Performance Evaluation')\n\n# Set the x-axis label\nax.set_xlabel('Ratio r')\n\n# Set the y-axis label\nax.set_ylabel('Performance')\n\n# Define the data points\nx = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0]\ny1 = [1.2, 1.2, 1.2, 1.2, 1.2, 1.2, 1.2, 1.2, 1.2, 1.2]\ny2 = [1.1, 1.1, 1.1, 1.1, 1.1, 1.1, 1.1, 1.1, 1.1, 1.1]\n\n# Plot the data points\nax.plot(x, y1, 'b-')\nax.plot(x, y2, 'r-')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_74.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Dynamic Model Performance')\n\n# Set the x-axis label\nax.set_xlabel('Ratio r')\n\n# Set the y-axis label\nax.set_ylabel('Performance')\n\n# Define the data points\nx = [0.2, 0.4, 0.6, 0.8, 1.0]\ny1 = [8.0, 7.0, 6.0, 5.0, 4.0]\ny2 = [8.0, 7.0, 6.0, 5.0, 4.0]\n\n# Plot the data points\nax.plot(x, y1, 'bo-', label='PNA + ours')\nax.plot(x, y2, 'ro-', label='GIN + ours')\n\n# Add a legend to the plot\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_75.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Define the data\nx = np.arange(5, 30)\ny1 = np.random.randint(70, 85, 25)\ny2 = np.random.randint(70, 85, 25)\n\n# Plot the data\nax.plot(x, y1, color='blue', label='Model 1 Mean Accuracy')\nax.plot(x, y2, color='red', label='Model 2 Mean Accuracy')\n\n# Set the title and labels\nax.set_title('Comparison of Model Accuracies')\nax.set_xlabel('Ensemble Size')\nax.set_ylabel('Accuracy')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/line_76.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the first graph\nx = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\ny1 = [90, 92, 93, 94, 95, 94, 93, 92, 91, 90]\ny2 = [85, 87, 88, 89, 90, 89, 88, 87, 86, 85]\ny3 = [80, 82, 83, 84, 85, 84, 83, 82, 81, 80]\n\n# Data for the second graph\nz1 = [70, 72, 73, 74, 75, 74, 73, 72, 71, 70]\nz2 = [65, 67, 68, 69, 70, 69, 68, 67, 66, 65]\nz3 = [60, 62, 63, 64, 65, 64, 63, 62, 61, 60]\n\n# Create a figure and axis\nfig, axs = plt.subplots(2, 1, figsize=(8.0, 12.0))\n\n# Plot the first graph\naxs[0].plot(x, y1, 'r-o', label='Config A - Model X')\naxs[0].plot(x, y2, 'g-o', label='Config B - Model X')\naxs[0].plot(x, y3, 'b-o', label='Config C - Model X')\naxs[0].set_title('Performance of Model X')\naxs[0].set_xlabel('Iteration')\naxs[0].set_ylabel('Score')\naxs[0].legend()\n\n# Plot the second graph\naxs[1].plot(x, z1, 'r-o', label='Config A - Model X')\naxs[1].plot(x, z2, 'g-o', label='Config B - Model X')\naxs[1].plot(x, z3, 'b-o', label='Config C - Model X')\naxs[1].set_title('Performance of Model Z')\naxs[1].set_xlabel('Iteration')\naxs[1].set_ylabel('Score')\naxs[1].legend()\n\n# Display the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_77.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, axs = plt.subplots(3, 1, figsize=(8.0, 12.0))\n\n# Define the data for each subplot\ndata_performance = [\n    [90, 92, 94, 96, 98, 100],\n    [85, 87, 89, 91, 93, 95],\n    [80, 82, 84, 86, 88, 90]\n]\n\ndata_falcon = [\n    [70, 72, 74, 76, 78, 80],\n    [65, 67, 69, 71, 73, 75],\n    [60, 62, 64, 66, 68, 70]\n]\n\ndata_qwen = [\n    [75, 77, 79, 81, 83, 85],\n    [70, 72, 74, 76, 78, 80],\n    [65, 67, 69, 71, 73, 75]\n]\n\n# Plot the data for each subplot\nfor i, ax in enumerate(axs):\n    ax.plot(data_performance[i], label='Performance of Llama')\n    ax.plot(data_falcon[i], label='Performance of Falcon')\n    ax.plot(data_qwen[i], label='Performance of Qwen')\n    ax.set_title(f'Performance of Config {chr(65 + i)} - Llama, Falcon, Qwen')\n    ax.set_xlabel('Iteration')\n    ax.set_ylabel('Score')\n    ax.legend()\n\nplt.tight_layout()\nplt.show()"}
{"file": "dataset/ori_500/line_78.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for each brand\nbrands = ['Brand A', 'Brand B', 'Brand C', 'Brand D', 'Brand E', 'Brand F']\nsales_growth = [\n    [1.2, 1.4, 1.6, 1.8, 2.0],  # Brand A\n    [1.3, 1.5, 1.7, 1.9, 2.1],  # Brand B\n    [1.4, 1.6, 1.8, 2.0, 2.2],  # Brand C\n    [1.5, 1.7, 1.9, 2.1, 2.3],  # Brand D\n    [1.6, 1.8, 2.0, 2.2, 2.4],  # Brand E\n    [1.7, 1.9, 2.1, 2.3, 2.5]   # Brand F\n]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 10.0))\n\n# Plot each brand's sales growth\nfor i, brand in enumerate(brands):\n    ax.plot(sales_growth[i], label=brand)\n\n# Set the title and labels\nax.set_title('Sales Growth by Quarter')\nax.set_xlabel('Quarter')\nax.set_ylabel('Sales Growth')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_79.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(18.0, 4.0))\n\n# Define the data\ntime_values = [100, 300, 500, 700]\nmetric_values_1 = [0.5, 0.6, 0.7, 0.8]\nmetric_values_2 = [0.4, 0.5, 0.6, 0.7]\n\n# Plot the data\nax.plot(time_values, metric_values_1, 'b-', label='ECL Run 1')\nax.plot(time_values, metric_values_2, 'r-', label='ECL Run 2')\n\n# Set the title and labels\nax.set_title('Traffic Performance')\nax.set_xlabel('Time (s)')\nax.set_ylabel('Metric Value')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ndriving_styles = ['Passive', 'Rail', 'Replay', 'Sportive']\nweather_conditions = ['Dry', 'Rain']\ntemperatures = [\n    [14, 12, 10, 8, 6],\n    [13, 11, 9, 7, 5]\n]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Plot the data\nfor i, condition in enumerate(weather_conditions):\n    ax.plot(driving_styles, temperatures[i], marker='o', color='r' if condition == 'Rain' else 'b')\n\n# Set labels and title\nax.set_xlabel('Driving Style')\nax.set_ylabel('Relaxation Level')\nax.set_title('Relaxation Levels by Driving Style and Weather Condition')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_80.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the first subplot\nx = [1, 2, 3, 4, 5]\ny1 = [20, 25, 30, 35, 40]\ny2 = [25, 30, 35, 40, 45]\n\n# Data for the second subplot\ny3 = [30, 35, 40, 45, 50]\ny4 = [35, 40, 45, 50, 55]\n\n# Data for the third subplot\ny5 = [40, 45, 50, 55, 60]\ny6 = [45, 50, 55, 60, 65]\n\n# Data for the fourth subplot\ny7 = [50, 55, 60, 65, 70]\ny8 = [55, 60, 65, 70, 75]\n\n# Data for the fifth subplot\ny9 = [60, 65, 70, 75, 80]\ny10 = [65, 70, 75, 80, 85]\n\n# Create a figure and a set of subplots\nfig, axs = plt.subplots(2, 3, figsize=(9.0, 6.0))\n\n# Plot the data on the subplots\naxs[0, 0].plot(x, y1, 'b-', label='Run 1')\naxs[0, 0].plot(x, y2, 'g-', label='Run 2')\naxs[0, 0].set_title('Category A Growth')\naxs[0, 0].set_xlabel('Phase')\naxs[0, 0].set_ylabel('Cumulative Value')\naxs[0, 0].legend()\n\naxs[0, 1].plot(x, y3, 'r-', label='Run 1')\naxs[0, 1].plot(x, y4, 'm-', label='Run 2')\naxs[0, 1].set_title('Category B Growth')\naxs[0, 1].set_xlabel('Phase')\naxs[0, 1].set_ylabel('Cumulative Value')\naxs[0, 1].legend()\n\naxs[0, 2].plot(x, y5, 'c-', label='Run 1')\naxs[0, 2].plot(x, y6, 'y-', label='Run 2')\naxs[0, 2].set_title('Category C Growth')\naxs[0, 2].set_xlabel('Phase')\naxs[0, 2].set_ylabel('Cumulative Value')\naxs[0, 2].legend()\n\naxs[1, 0].plot(x, y7, 'b-', label='Run 1')\naxs[1, 0].plot(x, y8, 'g-', label='Run 2')\naxs[1, 0].set_title('Category D Growth')\naxs[1, 0].set_xlabel('Phase')\naxs[1, 0].set_ylabel('Cumulative Value')\naxs[1, 0].legend()\n\naxs[1, 1].plot(x, y9, 'r-', label='Run 1')\naxs[1, 1].plot(x, y10, 'm-', label='Run 2')\naxs[1, 1].set_title('Category E Growth')\naxs[1, 1].set_xlabel('Phase')\naxs[1, 1].set_ylabel('Cumulative Value')\naxs[1, 1].legend()\n\naxs[1, 2].plot(x, y7, 'b-', label='Run 1')\naxs[1, 2].plot(x, y8, 'g-', label='Run 2')\naxs[1, 2].set_title('Category F Growth')\naxs[1, 2].set_xlabel('Phase')\naxs[1, 2].set_ylabel('Cumulative Value')\naxs[1, 2].legend()\n\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Sample data\nx = [4, 6, 10, 30]\ny_standard = [1.08, 1.04, 1.06, 1.06]\ny_constrained = [1.08, 1.04, 1.06, 1.06]\n\n# Plotting\nplt.figure(figsize=(9.0, 6.0))\nplt.plot(x, y_standard, 'bo-', label='Standard')\nplt.plot(x, y_constrained, 'ro-', label='Constrained')\n\n# Adding labels and title\nplt.xlabel('N')\nplt.ylabel('Value')\nplt.title('Comparison of Standard and Constrained Models')\nplt.legend()\n\n# Displaying the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the bar chart\nregions = ['South', 'North', 'West', 'East']\npercentages = [25, 40, 10, 15]\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\nax.bar(regions, percentages, color=['yellow', 'cyan', 'orange', 'blue'])\n\n# Set labels and title\nax.set_xlabel('Region')\nax.set_ylabel('Percentage')\nax.set_title('Literacy Rate by Region')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 2.0))\n\n# Define the data\ndata = [\n    [1.5, 0.5, 0.3, 0.7, 0.9],\n    [0.8, 0.4, 0.6, 0.2, 0.1],\n    [0.6, 0.3, 0.5, 0.7, 0.9],\n    [0.4, 0.2, 0.8, 0.6, 0.3],\n    [0.2, 0.1, 0.4, 0.8, 0.6]\n]\n\n# Create a heatmap\nim = ax.imshow(data, cmap='hot', interpolation='nearest')\n\n# Add colorbar\ncbar = ax.figure.colorbar(im, ax=ax)\ncbar.ax.set_ylabel('Intensity', rotation=-90, va=\"bottom\")\n\n# Set labels\nax.set_xticks(np.arange(len(data[0])))\nax.set_yticks(np.arange(len(data)))\nax.set_xticklabels(['Sensitive Attribute 1', 'Sensitive Attribute 2', 'Sensitive Attribute 3', 'Sensitive Attribute 4', 'Sensitive Attribute 5'])\nax.set_yticklabels(['PaleSkin', 'OvalFace', 'Smiling', 'BrownHair', 'Attractive'])\n\n# Rotate the tick labels and set their alignment.\nplt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\",\n         rotation_mode=\"anchor\")\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_11.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data\nengstrom = [44.15, 44.05, 41.55, 40.95, 36.70]\nzhang = [44.15, 44.05, 41.55, 40.95, 36.70]\nrice = [44.15, 44.05, 41.55, 40.95, 36.70]\nrare = [44.15, 44.05, 41.55, 40.95, 36.70]\nhendricks = [44.15, 44.05, 41.55, 40.95, 36.70]\naddep = [44.15, 44.05, 41.55, 40.95, 36.70]\ncarmon = [44.15, 44.05, 41.55, 40.95, 36.70]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot the data\nax.bar(range(len(engstrom)), engstrom, color='green')\nax.bar(range(len(zhang)), zhang, color='blue')\nax.bar(range(len(rice)), rice, color='green')\nax.bar(range(len(rare)), rare, color='blue')\nax.bar(range(len(hendricks)), hendricks, color='green')\nax.bar(range(len(addep)), addep, color='blue')\nax.bar(range(len(carmon)), carmon, color='green')\n\n# Set the x-axis labels\nax.set_xticks(range(len(engstrom)))\nax.set_xticklabels(['Engstrom (M1)', 'Zhang (M2)', 'Rice (M3)', 'Rade (M4)', 'Hendricks (M5)'])\n\n# Set the y-axis label\nax.set_ylabel('Robust Error (%)')\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/multidiff_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ncategories = ['VGG16', 'Resnet101']\nangles = [0, 90, 180]\nvgg16_values = [0.551, 0.538, 0.043, 0.0195, 0.043, 0.0195]\nresnet101_values = [0.744, 0.762, 0.394, 0.477, 0.394, 0.477]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 4.0))\n\n# Plot the data\nax.plot(angles, vgg16_values, label='VGG16')\nax.plot(angles, resnet101_values, label='Resnet101')\n\n# Set the title and labels\nax.set_title('Rotation Invariance')\nax.set_xlabel('Rotation angle (\u00b0)')\nax.set_ylabel('Invariance')\n\n# Set the x-axis ticks\nax.set_xticks(angles)\nax.set_xticklabels(['0', '90', '180'])\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Create a heatmap\nheatmap_data = [[0.1, 0.2, 0.3], [0.4, 0.5, 0.6], [0.7, 0.8, 0.9]]\ncax = ax.matshow(heatmap_data, cmap='coolwarm')\n\n# Add a colorbar\nfig.colorbar(cax)\n\n# Set the title of the plot\nax.set_title('Heatmap')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(5.0, 6.0))\n\n# Plot the line graph\nax.plot([0, 10, 20, 30, 40, 50], [-8, -8, -9, -9, -9, -8], 'bo-')\n\n# Add a shaded region\nax.fill_between([0, 10, 20, 30, 40, 50], [-8, -8, -9, -9, -9, -8], [-10, -10, -10, -10, -10, -10], color='gray', alpha=0.5)\n\n# Set the title and labels\nax.set_title('Token rarity')\nax.set_xlabel('GPT2Tokenizer rank')\nax.set_ylabel('Loss')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ncategories = ['Sentiment', 'Toxicity', 'News']\nvalues = [0.35, 0.25, 0.25]\n\n# Create a bar chart\nplt.bar(categories, values, color='blue')\n\n# Set the title and labels\nplt.title('Correlation of Sentiment, Toxicity, and News')\nplt.xlabel('Categories')\nplt.ylabel('Correlation')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_16.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the bar chart\ncategories = ['c1355', 'c1908', 'c2670', 'c3540']\nvalues = [40, 50, 50, 40]\n\n# Create a figure and axis\nfig, ax1 = plt.subplots(figsize=(6.0, 6.0))\n\n# Plot the bar chart\nbars = ax1.bar(categories, values, color='lightblue')\n\n# Set the y-axis limits\nax1.set_ylim(0, 60)\n\n# Add grid lines\nax1.grid(True)\n\n# Create a second y-axis for the OMLA KPA\nax2 = ax1.twinx()\nomla_kpa_values = [0.45, 0.55, 0.5, 0.45]\nax2.plot(categories, omla_kpa_values, 'o-', color='orange')\n\n# Set the y-axis limits for the second y-axis\nax2.set_ylim(0.35, 0.65)\n\n# Add horizontal lines to separate the plots\nax1.axhline(y=0.5, color='red', linestyle='--')\nax2.axhline(y=0.5, color='red', linestyle='--')\n\n# Set the title and labels\nax1.set_title('Number of Successful Advc Circuits vs OMLA KPA')\nax1.set_xlabel('Category')\nax1.set_ylabel('Number of Successful Advc Circuits')\nax2.set_ylabel('OMLA KPA')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_17.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the first graph\nstudy_levels = [0, 1, 2, 3, 4, 5]\nknowledge_increase = [60, 70, 80, 90, 80, 70]\n\n# Data for the second graph\ndomains = ['Education', 'Law', 'Technology', 'History', 'Geography', 'Humans', 'Finance']\npublications = [250, 220, 280, 120, 150, 180, 230]\n\n# Create the first graph\nfig, ax1 = plt.subplots(figsize=(10.0, 4.0))\nax1.plot(study_levels, knowledge_increase, 'b-')\nax1.set_xlabel('Study Level')\nax1.set_ylabel('Cumulative Knowledge Increase (%)', color='b')\nax1.tick_params(axis='y', labelcolor='b')\n\n# Create the second graph\nax2 = ax1.twinx()\nax2.bar(domains, publications, color='g')\nax2.set_ylabel('Number of Publications by Domain', color='g')\nax2.tick_params(axis='y', labelcolor='g')\n\n# Set the title\nplt.title('Knowledge Increase by Subject Area and Number of Publications by Domain')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_18.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data for the first graph\nx = np.array([2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022])\ny1 = np.array([40, 40, 40, 40, 40, 40, 40, 40])\ny2 = np.array([60, 60, 60, 60, 60, 60, 60, 60])\ny3 = np.array([80, 80, 80, 80, 80, 80, 80, 80])\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 10.0))\n\n# Plot the data\nax.plot(x, y1, color='blue', label='Hardware')\nax.plot(x, y2, color='orange', label='Software')\nax.plot(x, y3, color='green', label='AI')\n\n# Set the title and labels\nax.set_title('Technological Advancements')\nax.set_xlabel('Year')\nax.set_ylabel('Progress (%)')\n\n# Add a legend\nax.legend()\n\n# Define the data for the second graph\ncategories = ['Big Tech', 'Startups', 'Academia', 'Government']\nvalues = [60, 40, 20, 0]\n\n# Create a bar chart\nax.bar(categories, values, color=['blue', 'orange', 'green', 'red'])\n\n# Set the title and labels\nax.set_title('Innovation Gaps Across Different Sectors in Technology')\nax.set_xlabel('Sector')\nax.set_ylabel('Innovation Gap (%)')\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/multidiff_19.pdf", "response": "import matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\n\n# Create a DataFrame with the data\ndata = {\n    'Country': ['USA', 'UK', 'Germany', 'France', 'Italy', 'Spain'],\n    'Crime Rate per 100,000 Inhabitants': [3.2, 2.8, 2.5, 2.7, 2.9, 2.6],\n    'Crime Rate per 100,000 Inhabitants (2)': [140, 130, 120, 110, 100, 90]\n}\ndf = pd.DataFrame(data)\n\n# Create a figure and axis for the first plot\nfig, ax1 = plt.subplots(figsize=(8.0, 10.0))\n\n# Plot the first bar chart\nbars = ax1.bar(df['Country'], df['Crime Rate per 100,000 Inhabitants'], color='orange')\nax1.set_xlabel('Country')\nax1.set_ylabel('Crime Rate per 100,000 Inhabitants', color='orange')\nax1.tick_params(axis='y', labelcolor='orange')\n\n# Create a second y-axis for the second bar chart\nax2 = ax1.twinx()\nbars2 = ax2.bar(df['Country'], df['Crime Rate per 100,000 Inhabitants (2)'], color='blue')\nax2.set_ylabel('Crime Rate per 100,000 Inhabitants (2)', color='blue')\nax2.tick_params(axis='y', labelcolor='blue')\n\n# Set the title of the plot\nplt.title('Average Legal Crime Rates by Country')\n\n# Display the plot\nplt.show()"}
{"file": "dataset/ori_500/multidiff_2.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Define the data for the histogram\nbins = np.arange(0, 121, 10)\ndata = [np.random.normal(70, 10, 1000), np.random.normal(60, 10, 1000)]\n\n# Plot the histogram\nax.hist(data, bins=bins, color=['blue', 'orange'], alpha=0.7)\n\n# Set the title and labels\nax.set_title('Student Performance in Schools')\nax.set_xlabel('Score')\nax.set_ylabel('Number of Students')\n\n# Create a pie chart\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\nlabels = ['Books', 'Staff', 'Extracurricular', 'Facilities']\nsizes = [80, 40, 30, 50]\ncolors = ['lightblue', 'lightgreen', 'lightcoral', 'lightskyblue']\nexplode = (0.1, 0, 0, 0)  # explode 1st slice\n\n# Plot the pie chart\nax.pie(sizes, explode=explode, labels=labels, colors=colors,\nautopct='%1.1f%%', shadow=True, startangle=140)\n\n# Equal aspect ratio ensures that pie is drawn as a circle.\nax.axis('equal')  \n\nplt.show()"}
{"file": "dataset/ori_500/multidiff_20.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis for the first plot\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Define the data for the first plot\nx = np.array([10, 20, 30, 40, 50])\ny = np.array([100, 200, 300, 400, 500])\n\n# Plot the data\nax.plot(x, y)\n\n# Set the title of the plot\nax.set_title('Average Annual Temperature')\n\n# Create a figure and axis for the second plot\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Define the data for the second plot\nx = np.array([0, 250, 500, 750, 1000, 1250, 1500, 1750, 2000])\ny = np.array([0.001, 0.002, 0.003, 0.004, 0.005, 0.006, 0.007, 0.008, 0.009])\n\n# Plot the data\nax.plot(x, y)\n\n# Set the title of the plot\nax.set_title('Geographical Elevation Distribution')\n\n# Display the plots\nplt.show()"}
{"file": "dataset/ori_500/multidiff_21.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the first chart\nyears = ['2019', '2020', '2021', '2022']\nstocks = [300, 250, 200, 150]\nbonds = [250, 200, 150, 100]\nreal_estate = [200, 150, 100, 50]\n\n# Data for the second chart\nproducts = ['Savings', 'CDs', 'Stocks', 'Bonds', 'ETFs', 'Mutual Funds']\npopularity = [200, 175, 150, 125, 100, 75]\n\n# Data for the third chart\nloan_amounts = [10000, 20000, 30000, 40000]\nloan_distribution = [80, 70, 60, 50]\n\n# Create a figure and axis\nfig, axs = plt.subplots(1, 3, figsize=(10, 5))\n\n# Plot the first chart\naxs[0].barh(years, stocks, color='green')\naxs[0].barh(years, bonds, left=stocks, color='blue')\naxs[0].barh(years, real_estate, left=[x + y for x, y in zip(stocks, bonds)], color='yellow')\naxs[0].set_title('Investment Growth Over Time')\n\n# Plot the second chart\naxs[1].bar(products, popularity, color='blue')\naxs[1].set_title('Popularity of Financial Products')\n\n# Plot the third chart\naxs[2].barh(loan_amounts, loan_distribution, color='blue')\naxs[2].set_title('Loan Amount Distribution by Region')\n\n# Adjust layout\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_22.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the first graph\ncategories = ['Image Recog.', 'Speech Recog.', 'Language Proc.', 'Game AI']\nsuccess_rates = [85, 75, 90, 80]\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(10.0, 10.0))\nax.bar(categories, success_rates, color='lightblue')\n\n# Set the title and labels\nax.set_title('AI Task Success Rates')\nax.set_xlabel('Task')\nax.set_ylabel('Success Rate (%)')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_23.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the first graph\nx = [100, 200, 300, 400, 500, 600, 700]\ny1 = [100, 150, 125, 175, 150, 125, 100]\ny2 = [125, 150, 175, 100, 125, 150, 175]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 10.0))\n\n# Plot the data\nax.plot(x, y1, label='Morning Traffic')\nax.plot(x, y2, label='Evening Traffic')\n\n# Set the title and labels\nax.set_title('Traffic Volume by Time of Day')\nax.set_xlabel('Number of Vehicles')\nax.set_ylabel('Time of Day')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_24.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the pie chart\nlabels = ['Literature', 'Performing Arts', 'Visual Arts', 'Dance']\nsizes = [10, 30, 25, 15]\ncolors = ['purple', 'red', 'blue', 'orange']\nexplode = (0.1, 0, 0, 0)  # explode 1st slice\n\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\nax.pie(sizes, explode=explode, labels=labels, colors=colors,\nautopct='%1.1f%%', shadow=True, startangle=140)\nax.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\n\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_25.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nsales = [25000, 20000, 15000, 10000, 5000]\nproducts = ['Product A', 'Product B', 'Product C', 'Product D', 'Product E', 'Product F']\nregions = ['Region 1', 'Region 2', 'Region 3', 'Region 4', 'Region 5']\nsales_probabilities = [0.0, 0.1, 0.2, 0.3, 0.4, 0.5]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Plot the bar chart\nax.barh(products, sales, color='green')\nax.set_xlabel('Sales')\nax.set_ylabel('Products')\n\n# Add a vertical line at x=0.5\nax.axvline(x=0.5, color='black', linestyle='--')\n\n# Add a legend\nax.legend(['Known Sales', 'Unknown Sales'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Define the data for the histogram\ndata = [120, 130, 140, 150, 160]\n\n# Create a histogram\nax.hist(data, bins=5, color='green')\n\n# Set the title of the histogram\nax.set_title('Histogram of Stock Returns')\n\n# Set the x-axis label\nax.set_xlabel('Returns')\n\n# Set the y-axis label\nax.set_ylabel('Frequency')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure with two subplots\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(8.0, 10.0))\n\n# First subplot: Energy Consumption\nx = np.linspace(0, 5, 100)\ny = np.sin(x)\nax1.plot(x, y, 'bo-')\nax1.set_xlabel('Relative Year')\nax1.set_ylabel('Energy Consumption (GWh)')\nax1.set_title('Energy Consumption Over Time')\n\n# Second subplot: Renewable Energy Ratio\nx = np.linspace(-4, 4, 100)\ny = np.sin(x)\nz = np.cos(x)\nax2.plot_surface(x, y, z, cmap='Blues')\nax2.set_xlabel('Relative Year')\nax2.set_ylabel('Relative Month')\nax2.set_zlabel('Renewable Energy Ratio (%)')\nax2.set_title('Renewable Energy Ratio Over Time')\n\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the pie chart\nlabels = ['Ancient Scripts', 'Modern Records', 'Medieval Texts', 'Renaissance Literature']\nsizes = [15, 35, 30, 20]\ncolors = ['yellow', 'red', 'blue', 'green']\nexplode = (0.1, 0, 0, 0)  # explode 1st slice\n\nfig1, ax1 = plt.subplots()\nax1.pie(sizes, explode=explode, labels=labels, colors=colors,\nautopct='%1.1f%%', shadow=True, startangle=140)\nax1.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\n\n# Data for the scatter plot\nx = np.array([400, 600, 800, 1000, 1200, 1400, 1600, 1800, 2000])\ny = np.array([150, 170, 190, 210, 230, 250, 270, 290, 310])\n\nfig2, ax2 = plt.subplots()\nax2.scatter(x, y, color='purple')\nax2.set_xlabel('Year')\nax2.set_ylabel('Number of Documents')\nax2.set_title('Document Count Over Historical Periods')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the left plot\nx = [1000, 1200, 1400, 1600, 1800, 2000]\ny1 = [9.25, 9.25, 9.25, 9.25, 9.25, 9.25]\ny2 = [9, 9, 9, 9, 9, 9]\ny3 = [9, 9, 9, 9, 9, 9]\n\n# Data for the right plot\nbrands = ['Gucci', 'Prada', 'Louis Vuitton', 'Chanel', 'Dior']\nsatisfaction = [9, 7, 8, 9, 8]\npopularity = [8, 7, 8, 9, 8]\n\n# Create the figure and axis objects\nfig, ax = plt.subplots(1, 2, figsize=(10.0, 6.0))\n\n# Left plot: Luxury Brand Popularity vs Price\nax[0].barh(x, y1, color='purple')\nax[0].barh(x, y2, color='green')\nax[0].barh(x, y3, color='yellow')\nax[0].set_xlabel('Popularity Index')\nax[0].set_ylabel('Average Price ($)')\nax[0].legend(['Louis Vuitton', 'Chanel', 'Dior'])\n\n# Right plot: Customer Satisfaction Distribution Across Brands\nax[1].bar(brands, satisfaction, color='blue')\nax[1].bar(brands, popularity, color='red')\nax[1].set_xlabel('Brands')\nax[1].set_ylabel('Customer Satisfaction')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_7.pdf", "response": "import matplotlib.pyplot as plt fig, ax = plt.subplots(figsize=(10.0, 7.0)) ax.bar(['Zhang2020', 'Addelpalli2021', 'Rice2020', 'Rade2021', 'Engstrom2019', 'Hendrycks2019'], [75.32, 77.11, 77.03, 76.86, 75.34, 74.52], color='green') ax.set_ylabel('Accuracy (%)') ax.set_title('Accuracy (%)') plt.show()"}
{"file": "dataset/ori_500/multidiff_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ncontext = ['Full Context', 'Partial Context', 'No Context', 'HCube', 'Sobol', 'Random']\nvariance = [0.6, 0.6, 0.8, 0.8, 0.8, 0.8]\nregret = [[0.25, 0.25, 0.25, 0.25, 0.25], [0.25, 0.25, 0.25, 0.25, 0.25], [0.25, 0.25, 0.25, 0.25, 0.25], [0.25, 0.25, 0.25, 0.25, 0.25], [0.25, 0.25, 0.25, 0.25, 0.25], [0.25, 0.25, 0.25, 0.25, 0.25]]\n\n# Plotting\nfig, ax1 = plt.subplots(figsize=(7.0, 9.0))\nax1.set_xlabel('Trials')\nax1.set_ylabel('Generalized Variance', color='tab:blue')\nax1.plot(context, variance, color='tab:blue', marker='o')\nax1.tick_params(axis='y', labelcolor='tab:blue')\n\nax2 = ax1.twinx()\nax2.set_ylabel('Average Regret', color='tab:red')\nfor i, r in enumerate(regret):\n    ax2.plot(context, r, color=plt.cm.viridis(i), marker='o')\nax2.tick_params(axis='y', labelcolor='tab:red')\n\nfig.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the left subplot\nx = [0, 200, 400]\ny = [300, 250, 200]\n\n# Data for the middle subplot\nx2 = [-100, 0, 100, 200]\ny2 = [100, 150, 200, 250]\n\n# Data for the right subplot\nx3 = [-200, -100, 0, 100, 200]\ny3 = [40, 60, 80, 100, 120]\n\nfig, axs = plt.subplots(1, 3, figsize=(10, 4))\n\n# Left subplot\naxs[0].plot(x, y, 'ro-')\naxs[0].set_title('Debater')\naxs[0].set_xlabel('Elo Rating')\naxs[0].set_ylabel('Correct Rating - Incorrect Rating')\n\n# Middle subplot\naxs[1].scatter(x2, y2, color='r')\naxs[1].set_title('Debater')\naxs[1].set_xlabel('Aggregate Elo Rating')\naxs[1].set_ylabel('Correct Rating - Incorrect Rating')\n\n# Right subplot\naxs[2].plot(x3, y3, 'bo-')\naxs[2].set_title('Judge')\naxs[2].set_xlabel('Aggregate Elo Rating')\naxs[2].set_ylabel('Judge Accuracy (%)')\n\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nlabels = ['Gray', 'Blue', 'Yellow', 'Purple', 'Green']\nsizes = [4.6, 30.5, 11.3, 10.6, 29.8]\n\n# Create a pie chart\nfig, ax = plt.subplots(figsize=(5.0, 5.0))\nax.pie(sizes, labels=labels, autopct='%1.1f%%')\n\n# Set the aspect ratio of the plot to be equal so that pie is drawn as a circle.\nax.axis('equal')  \n\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_10.pdf", "response": "import matplotlib.pyplot as plt\n\n# Define the data\ningredients = ['90 g sugar', '225 g flour', '1 egg', '60 g butter', '1/2 package of yeast', '100 ml milk']\nquantities = [90, 225, 1, 60, 0.5, 100]\n\n# Create a pie chart\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\nax.pie(quantities, labels=ingredients, autopct='%1.1f%%')\n\n# Set the title\nax.set_title('Matplotlib bakery: A donut')\n\nplt.show()"}
{"file": "dataset/ori_500/pie_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nlabels = ['Transport', 'Utilities', 'Food', 'Others', 'Entertainment']\nsizes = [37.5, 16.7, 29.2, 10.0, 10.0]\ncolors = ['blue', 'green', 'red', 'yellow', 'orange']\nexplode = (0.1, 0, 0, 0, 0)  # explode 1st slice\n\n# Create a pie chart\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\nax.pie(sizes, explode=explode, labels=labels, colors=colors,\nautopct='%1.1f%%', shadow=True, startangle=140)\n\n# Equal aspect ratio ensures that pie is drawn as a circle.\nax.axis('equal')  \n\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for LoRA\nlabels = ['Unused', 'Model', 'Optimizer', 'Gradient']\nsizes = [31.4, 15.7, 19.9, 33.0]\ncolors = ['orange', 'red', 'blue', 'green']\n\n# Data for QLoRA\nq_labels = ['Unused', 'Model', 'Optimizer', 'Gradient']\nq_sizes = [54.8, 10.5, 6.3, 28.4]\nq_colors = ['orange', 'red', 'blue', 'green']\n\nfig, axs = plt.subplots(1, 2, figsize=(10.0, 4.0))\n\n# Plotting LoRA\naxs[0].pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%', startangle=140)\naxs[0].set_title('LoRA')\n\n# Plotting QLoRA\naxs[1].pie(q_sizes, labels=q_labels, colors=q_colors, autopct='%1.1f%%', startangle=140)\naxs[1].set_title('QLoRA')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_13.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data for the first circle\ndata1 = [25.1, 26.4, 12.6, 15.9]\ncolors1 = ['orange', 'green', 'gray', 'yellow']\nlabels1 = ['Model', 'Optimizer', 'Gradient+Activations+Other', 'Unused']\n\n# Define the data for the second circle\ndata2 = [46.2, 4.6, 5.3, 23.9]\ncolors2 = ['orange', 'green', 'gray', 'yellow']\nlabels2 = ['Model', 'Optimizer', 'Gradient+Activations+Other', 'Unused']\n\n# Create a figure and axis\nfig, ax = plt.subplots(1, 2, figsize=(5.0, 8.0))\n\n# Plot the first circle\nax[0].pie(data1, colors=colors1, labels=labels1, autopct='%1.1f%%')\n\n# Plot the second circle\nax[1].pie(data2, colors=colors2, labels=labels2, autopct='%1.1f%%')\n\n# Set the title of the first subplot\nax[0].set_title('Full Finetuning')\n\n# Set the title of the second subplot\nax[1].set_title('QLoRA')\n\n# Display the plot\nplt.show()"}
{"file": "dataset/ori_500/pie_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ncategories = ['Fruits', 'Proteins', 'Grains', 'Vegetables', 'Dairy']\nvalues = [25.0, 35.0, 10.0, 20.0, 10.0]\ncolors = ['pink', 'lightblue', 'orange', 'lightgreen', 'purple']\n\n# Create a pie chart\nplt.figure(figsize=(6.0, 6.0))\nplt.pie(values, labels=categories, colors=colors, autopct='%1.1f%%', startangle=90)\n\n# Set the title\nplt.title('Nutritional Distribution')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nlabels = ['E-commerce', 'Education', 'Entertainment', 'Technology']\nsizes = [31.2, 18.8, 35.7, 37.5]\ncolors = ['#FFA500', '#FF4500', '#ADD8E6', '#90EE90']\n\n# Create a pie chart\nplt.figure(figsize=(8.0, 6.0))\nplt.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%', startangle=140)\n\n# Set the title\nplt.title('Market Share by Sector - External vs. Internal')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\ndogs = [45]\nlogs = [10, 30, 10, 15]\nhogs = [30, 40]\nfrogs = [15, 33.3, 33.3, 20]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Plot the data\nax.pie(dogs, colors=['blue'], startangle=90)\nax.pie(logs, colors=['purple', 'orange', 'cyan', 'green'], startangle=90)\nax.pie(hogs, colors=['red', 'blue'], startangle=90)\nax.pie(frogs, colors=['pink', 'yellow', 'green', 'cyan'], startangle=90)\n\n# Set the title\nax.set_title('Dogs 45%')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nlabels = ['David', 'John', 'Marry', 'Peter']\nsizes = [29, 11, 20, 40]\ncolors = ['blue', 'orange', 'green', 'red']\n\n# Create a pie chart\nplt.figure(figsize=(5.0, 5.0))\nplt.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_4.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data\nlabels = ['France', 'UK', 'Germany', 'Italy']\nsizes = [18, 42, 12, 28]\ncolors = ['orange', 'green', 'blue', 'red']\n\n# Create a pie chart\nfig, ax = plt.subplots(figsize=(5.0, 5.0))\nwedges, texts, autotexts = ax.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%', startangle=90)\n\n# Set the aspect ratio of the pie chart to be equal\nax.axis('equal')\n\n# Display the plot\nplt.show()"}
{"file": "dataset/ori_500/pie_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nlabels = ['Slice 1', 'Slice 2', 'Slice 3', 'Slice 4', 'Slice 5']\nsizes = [26.2, 21.4, 19.0, 14.3, 13.3]\ncolors = ['#FF6347', '#FFD700', '#FFA500', '#8B4513', '#800000']\n\n# Create a pie chart\nfig, ax = plt.subplots(figsize=(5.0, 5.0))\nax.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%', startangle=140)\n\n# Set the title\nax.set_title('Slice of a pie chart')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nlabels = ['Psychological', 'Others', 'Market', 'Satisfactory', 'Social']\nsizes = [35.4, 12.4, 17.2, 24.7, 10.3]\ncolors = ['blue', 'green', 'lightblue', 'orange', 'pink']\n\n# Create a pie chart\nplt.figure(figsize=(8.0, 6.0))\nplt.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%', startangle=140)\n\n# Set the title of the pie chart\nplt.title('Pie Chart of Market Segments')\n\n# Display the pie chart\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nlabels = ['Youtube', 'Facebook', 'Instagram', 'Twitter', 'LinkedIn']\nsizes = [25, 10, 10, 10, 35]\ncolors = ['lightblue', 'skyblue', 'lightskyblue', 'deepskyblue', 'navy']\n\n# Create a pie chart\nplt.figure(figsize=(8.0, 6.0))\nplt.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%', startangle=90)\n\n# Add a title\nplt.title('Social Media Usage')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nlabels = ['COLING', 'EACL', 'NAACL', 'EMNLP', 'ACL']\nsizes = [25.4, 12.2, 20.3, 7.4, 34.7]\ncolors = ['blue', 'purple', 'green', 'brown', 'orange']\n\n# Create a pie chart\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\nax.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%', startangle=90)\n\n# Set the title\nax.set_title('NLP Conference Influence')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the pie chart\nlabels = ['Coal', 'Other', 'Solar', 'Wind', 'Hydro']\nsizes = [25.0, 10.0, 20.0, 30.0, 15.0]\ncolors = ['red', 'green', 'yellow', 'blue', 'purple']\n\n# Create a pie chart\nplt.figure(figsize=(6.0, 6.0))\nplt.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%', startangle=90)\n\n# Set the title of the pie chart\nplt.title('Energy Consumption - National vs. Project')\n\n# Display the pie chart\nplt.show()\n```"}
{"file": "dataset/ori_500/quiver_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nx = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\ny1 = [-4.00, -4.00, -3.22, -3.22, -2.44, -2.44, -1.88, -1.88, -1.33, -1.33]\ny2 = [-4.00, -4.00, -3.22, -3.22, -2.44, -2.44, -1.88, -1.88, -1.33, -1.33]\ny3 = [-4.00, -4.00, -3.22, -3.22, -2.44, -2.44, -1.88, -1.88, -1.33, -1.33]\ny4 = [-4.00, -4.00, -3.22, -3.22, -2.44, -2.44, -1.88, -1.88, -1.33, -1.33]\ny5 = [-4.00, -4.00, -3.22, -3.22, -2.44, -2.44, -1.88, -1.88, -1.33, -1.33]\n\n# Plotting\nfig, ax = plt.subplots(figsize=(10.0, 4.0))\nax.plot(x, y1, 'r-', label='English')\nax.plot(x, y2, 'b-', label='French')\nax.plot(x, y3, 'g-', label='German')\nax.plot(x, y4, 'r-', label='Chinese')\nax.plot(x, y5, 'b-', label='Korean')\n\n# Legend\nax.legend()\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/quiver_2.pdf", "response": "import matplotlib.pyplot as plt\n\n# Data for the plot\nx = [1, 2, 3, 4, 5, 6, 7, 8, 9]\ny1 = [-4.00, -3.22, -2.44, -2.00, -1.50, -1.00, -0.50, 0.00, 0.50]\ny2 = [-3.22, -2.44, -1.88, -1.32, -0.76, -0.20, 0.36, 0.92, 1.48]\ny3 = [-2.44, -1.88, -1.32, -0.76, -0.20, 0.36, 0.92, 1.48, 2.04]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(5.0, 4.0))\n\n# Plot the data\nax.plot(x, y1, 'r-o', label='English')\nax.plot(x, y2, 'r-o', label='French')\nax.plot(x, y3, 'r-o', label='German')\n\n# Set the title and labels\nax.set_title('Language Bias')\nax.set_xlabel('Time')\nax.set_ylabel('Bias')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/quiver_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the x and y limits\nax.set_xlim(0, 0.6)\nax.set_ylim(0, 0.6)\n\n# Draw arrows\nfor i in range(10):\n    for j in range(10):\n        ax.arrow(i/10, j/10, 0.05, 0.05, head_width=0.02, head_length=0.02, fc='purple', ec='purple')\n\n# Plot lines\nx = [0.1, 0.2, 0.3, 0.4, 0.5]\ny1 = [0.1, 0.2, 0.3, 0.4, 0.5]\ny2 = [0.2, 0.3, 0.4, 0.5, 0.6]\ny3 = [0.3, 0.4, 0.5, 0.6, 0.7]\ny4 = [0.4, 0.5, 0.6, 0.7, 0.8]\ny5 = [0.5, 0.6, 0.7, 0.8, 0.9]\nax.plot(x, y1, color='red')\nax.plot(x, y2, color='blue')\nax.plot(x, y3, color='orange')\nax.plot(x, y4, color='green')\nax.plot(x, y5, color='black')\n\n# Add legend\nax.legend(['True Field', 'SINDy Learned Field', 'Train Sample', 'Test Sample', 'SINDy Train', 'SINDy Test'])\n\nplt.show()\n```"}
{"file": "dataset/ori_500/quiver_4.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a grid of points\nx = np.linspace(-1, 1, 20)\ny = np.linspace(-1, 1, 20)\nX, Y = np.meshgrid(x, y)\n\n# Create a vector field\nU = -Y\nV = X\n\n# Plot the vector field\nplt.figure(figsize=(5.0, 4.0))\nplt.quiver(X, Y, U, V, color='b')\n\n# Set the limits of the plot\nplt.xlim(-1, 1)\nplt.ylim(-1, 1)\n\n# Set the title of the plot\nplt.title('Vector Field: -F + \u03c1\u2207FF (Small \u03c1)')\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/quiver_5.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a grid of points\nx = np.linspace(-2, 2, 100)\ny = np.linspace(-2, 2, 100)\nX, Y = np.meshgrid(x, y)\n\n# Define the magnetic field vector B\nBx = np.sin(X) * np.cos(Y)\nBy = -np.cos(X) * np.sin(Y)\n\n# Plot the magnetic field vector B\nplt.figure(figsize=(6.0, 5.0))\nplt.quiver(X, Y, Bx, By, color='blue')\nplt.title('Magnetic Field $\\mathbf{B}$ in Tesla units')\nplt.xlabel('x')\nplt.ylabel('y')\nplt.grid(True)\nplt.show()"}
{"file": "dataset/ori_500/radar_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 7.0))\n\n# Define the data\nlabels = ['VQA', 'MME', 'MM', 'LLaVA-W', 'POPE']\nsizes = [79.9, 62.0, 86.8, 59.1, 78.2]\ncolors = ['red', 'blue', 'green', 'purple', 'orange']\n\n# Create a pie chart\nwedges, texts, autotexts = ax.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%')\n\n# Set the aspect ratio of the plot to be equal so that pie is drawn as a circle.\nax.axis('equal')  \n\n# Add a title\nax.set_title('Pie Chart')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_10.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data\nspeed_ratio = 4\ncolors = ['red', 'green', 'blue']\nlabels = ['fr', 'es', 'en', 'el', 'de', 'bg', 'sw', 'ar', 'ur', 'th', 'ru', 'tr', 'vi', 'zh']\nvalues = [20, 40, 60, 80]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(5.0, 5.0))\n\n# Draw the radar chart\nax.pie(values, labels=labels, colors=colors, startangle=90, counterclock=False)\n\n# Set the title\nax.set_title(f'XNLI (speed-up ratio: {speed_ratio})')\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/radar_11.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(4.0, 4.0))\n\n# Define the data for each quadrant\nquadrant_data = {\n    'Interference': [0, 2, 4, 6, 8],\n    'Understanding': [10, 8, 6, 4, 2, 0],\n    'Questioning': [0, 2, 4, 6, 8],\n    'Reasoning': [0, 2, 4, 6, 8],\n    'Paraphrasing': [0, 2, 4, 6, 8]\n}\n\n# Define the colors for each quadrant\nquadrant_colors = {\n    'Interference': 'green',\n    'Understanding': 'cyan',\n    'Questioning': 'lightblue',\n    'Reasoning': 'lightgreen',\n    'Paraphrasing': 'lightcoral'\n}\n\n# Draw the quadrants\nfor quadrant, data in quadrant_data.items():\n    ax.plot(data, color=quadrant_colors[quadrant])\n\n# Set the title and labels\nax.set_title('Interference')\nax.set_xlabel('Memory')\nax.set_ylabel('Reflection')\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/radar_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Define the data for the plot\ndata = {\n    '\u03bcR': [9.496, 0.37, 0.284],\n    '\u03bcAUC': [0.43, 0.33, 0.24],\n    '\u03bcTrain': [0.46, 0.22, 0.29],\n    'NTP': [0.5, 0.4, 0.28],\n    'NFF': [0.46, 0.22, 0.29]\n}\n\n# Plot the data\nfor key, values in data.items():\n    ax.plot(values, label=key)\n\n# Set the title and labels\nax.set_title('Sample Plot')\nax.set_xlabel('X-axis')\nax.set_ylabel('Y-axis')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data\ncategories = ['novel', 'programming world', 'mythology', 'universe', 'general', 'movie', 'fairy tale', 'country', 'special place', 'city', 'landscape', 'cultural event']\nvalues = [0.2, 0.8, 0.4, 0.6, 0.6, 0.8, 0.6, 0.8, 0.6, 0.8, 0.6, 0.8]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Draw a circle\ncircle = plt.Circle((0.5, 0.5), 0.5, color='white')\nax.add_artist(circle)\n\n# Draw a grid\nax.set_xticks(np.arange(0, 1.1, 0.2))\nax.set_yticks(np.arange(0, 1.1, 0.2))\nax.grid(True, which='both', linestyle='--')\n\n# Draw the data points\nfor i, value in enumerate(values):\n    ax.plot(0.5 + 0.4 * np.cos(2 * np.pi * i / len(categories)), 0.5 + 0.4 * np.sin(2 * np.pi * i / len(categories)), 'bo')\n\n# Set the title\nax.set_title('Radar Chart')\n\n# Set the labels\nax.set_xlabel('X Label')\nax.set_ylabel('Y Label')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data\ncategories = ['Reasoning', 'Writing', 'Math', 'Coding', 'Extraction', 'STEM']\nvalues = [10, 20, 30, 40, 50, 60]\ncolors = ['blue', 'orange', 'green', 'red', 'purple', 'brown']\n\n# Create a polar plot\nfig, ax = plt.subplots(subplot_kw={'projection': 'polar'}, figsize=(6.0, 6.0))\n\n# Plot the data\nbars = ax.bar(np.deg2rad(categories), values, color=colors)\n\n# Set the title\nax.set_title('Roleplay')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_15.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data for the pie chart\ndata = [15, 30, 45, 10]\nlabels = ['MUJI', 'Nestle']\ncolors = ['red', 'green']\n\n# Create a pie chart with the specified data and labels\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\nax.pie(data, labels=labels, colors=colors, autopct='%1.1f%%')\n\n# Set the title of the chart\nax.set_title('MUJI vs Nestle in Food Safety')\n\n# Display the chart\nplt.show()"}
{"file": "dataset/ori_500/radar_16.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\nlabels = ['Apple', 'Samsung', 'Huawei']\nsizes = [85.8, 86.4, 80.9]\ncolors = ['orange', 'blue', 'green']\n\n# Create a pie chart\nfig, ax = plt.subplots(figsize=(8.0, 7.0))\nax.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%')\n\n# Set the title\nax.set_title('Pie Chart of Smartphone Sales')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_17.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the radar chart\ncategories = ['Blow Molding', 'Extrusion', 'Injection', 'Compression']\nvalues = [5, 4, 3, 2]\ncolors = ['red', 'green', 'blue', 'orange']\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 8.0), subplot_kw=dict(polar=True))\n\n# Plot the radar chart\nax.plot(np.linspace(0, 2*np.pi, len(categories), endpoint=False).tolist() + [np.linspace(0, 2*np.pi, len(categories), endpoint=False)[0]], values + [values[0]], color='black')\nax.fill(np.linspace(0, 2*np.pi, len(categories), endpoint=False).tolist() + [np.linspace(0, 2*np.pi, len(categories), endpoint=False)[0]], values + [values[0]], color='lightgrey')\n\n# Set the categories as tick labels\nax.set_xticks(np.linspace(0, 2*np.pi, len(categories), endpoint=False))\nax.set_xticklabels(categories)\n\n# Set the title\nax.set_title('Radar Chart')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_18.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data\ncategories = ['Food Quality', 'Shows', 'Staff', 'Family Rides', 'Cleanliness', 'Thrill Rides', 'Wait Times', 'Ticket Price', 'Souvenirs', 'Parking']\nvalues_disney = [0.2, 0.4, 0.6, 0.8, 1.0, 0.2, 0.4, 0.6, 0.8, 1.0]\nvalues_universal_studios = [0.4, 0.6, 0.8, 1.0, 0.2, 0.4, 0.6, 0.8, 1.0, 0.2]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Draw the radar chart\nax.plot(categories, values_disney, 'o-', color='orange')\nax.plot(categories, values_universal_studios, 'o-', color='purple')\n\n# Set the title\nax.set_title('Amusement Park Comparison: Disney vs Universal Studios')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_19.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data\ncategories = ['Creativity', 'Versatility', 'Longevity', 'Projection', 'Value', 'Packaging', 'Popularity']\ndata = [1, 3, 5, 7, 9, 11, 13]\n\n# Create a color map\ncmap = plt.cm.get_cmap('viridis', len(categories))\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Draw the radar chart\nax.pie(data, labels=categories, colors=cmap(np.linspace(0, 1, len(categories))), startangle=90)\n\n# Set the title\nax.set_title('Radar Chart')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 7.0))\n\n# Define the data\ndata = {\n    'MM-Vet': [78.7],\n    'TextVQA': [85.8],\n    'GQA': [85.0, 71.9, 64.1, 69.9],\n    'VQAav2': [86.9, 71.9, 64.1, 69.9],\n    'LLaVA-W': [86.9, 71.9, 64.1, 69.9],\n    'SQA-I': [85.8, 76.1, 66.4, 56.5]\n}\n\n# Define the colors\ncolors = ['red', 'blue', 'green']\n\n# Plot the data\nfor i, (key, values) in enumerate(data.items()):\n    ax.plot(values, label=key, color=colors[i % len(colors)])\n\n# Set the title and labels\nax.set_title('POPE')\nax.set_xlabel('Data Points')\nax.set_ylabel('Values')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_20.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data for the radar charts\ncategories = ['Versatility', 'Longevity']\nvalues_creativity = [7, 9]\nvalues_popularity = [5, 7]\nvalues_projection = [3, 5]\nvalues_sillage = [1, 3]\n\n# Create a figure and a set of subplots\nfig, axs = plt.subplots(1, 3, figsize=(18.0, 6.0), subplot_kw={'projection': 'polar'})\n\n# Plot the radar charts\naxs[0].plot(categories, values_creativity, color='blue')\naxs[0].set_title('Creativity')\n\naxs[1].plot(categories, values_popularity, color='blue')\naxs[1].set_title('Popularity')\n\naxs[2].plot(categories, values_projection, color='blue')\naxs[2].set_title('Projection')\n\n# Add a legend\nfig.legend(['Chanel', 'Dior', 'Gucci'], loc='upper right')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Define the data\nangles = np.linspace(0, 2*np.pi, 10, endpoint=False).tolist() + [0]\nangles += np.pi/2\nangles = np.array(angles)\nvalues = [0.6, 0.8, 0.4, 0.2, 0.6, 0.8, 0.4, 0.2, 0.6, 0.8, 0.4, 0.2]\n\n# Plot the data\nax.plot(angles, values, 'o-')\n\n# Set the limits of the plot\nax.set_ylim(0, 1)\n\n# Set the title of the plot\nax.set_title('Loadings PC1')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the plots\ndata = [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 5]\n]\n\n# Create a figure and a set of subplots\nfig, axs = plt.subplots(1, 3, figsize=(10.0, 6.0))\n\n# Plot each subplot\nfor ax, d in zip(axs, data):\n    ax.pie(d, startangle=90)\n    ax.set_title('Fidelity(D-test)')\n    ax.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\n\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_5.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Define the data\ncategories = ['Heterocycle formation', 'C-C bond formation', 'Acylation and related processes', 'Hetroalkylation and arylation', 'Functional group addition, FGA']\nvalues = [35, 45, 55, 65, 75]\n\n# Create a pie chart\nax.pie(values, labels=categories, autopct='%1.1f%%')\n\n# Set the title\nax.set_title('Pie Chart')\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/radar_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Define the data\nmodels = ['Model C', 'Model B', 'Model D', 'Model E', 'Model F']\npredicted_scores = [0.07, 0.07, 0.07, 0.07, 0.07]\nhelpful_scores = [0.03, 0.03, 0.03, 0.03, 0.03]\nresult_scores = [0.05, 0.05, 0.05, 0.05, 0.05]\nrating_scores = [0.1, 0.1, 0.1, 0.1, 0.1]\n\n# Create a color map\ncmap = plt.cm.get_cmap('viridis')\n\n# Create a scatter plot\nscatter = ax.scatter(models, predicted_scores, c=rating_scores, cmap=cmap)\n\n# Add a color bar\ncbar = fig.colorbar(scatter)\ncbar.set_label('Rating Score')\n\n# Set the title and labels\nax.set_title('Model Scores')\nax.set_xlabel('Models')\nax.set_ylabel('Scores')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data for the radar chart\ncategories = ['rose', 'candlestick', 'line_num', 'pie', 'bubble', 'radar', 'area', 'funnel', 'box', 'treemap', 'heatmap']\nvalues = [3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3]\n\n# Create a radar chart\nfig, ax = plt.subplots(figsize=(8.0, 8.0), subplot_kw=dict(polar=True))\nax.plot(np.deg2rad(categories), values, 'ro-')\nax.fill(np.deg2rad(categories), values, alpha=0.25)\n\n# Set the title of the chart\nax.set_title('3D-bar')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_8.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(5.0, 5.0))\n\n# Define the data for the pie chart\ndata = [1, 2, 3, 4, 5]\ncolors = ['red', 'blue', 'green', 'purple', 'orange']\nlabels = ['Anomaly Detection', 'Long-horizon Forecasting', 'Short-horizon Forecasting', 'Imputation', 'TimesNet']\n\n# Plot the pie chart\nwedges, texts, autotexts = ax.pie(data, colors=colors, labels=labels, autopct='%1.1f%%')\n\n# Set the title of the plot\nax.set_title('Classification')\n\n# Display the plot\nplt.show()"}
{"file": "dataset/ori_500/radar_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 7.0))\n\n# Define the data\nangles = np.linspace(0, 2 * np.pi, 6, endpoint=False).tolist() + [angles[0]]\nangles = np.array(angles)\nvalues = [72.9, 66.3, 67.2, 42.9, 65.0, 49.3, 55.6, 43.1, 55.6, 49.5, 62.8, 43.1]\ncolors = ['red', 'blue']\n\n# Plot the data\nax.plot(angles, values, 'o-', linewidth=2, markersize=8, color=colors[0])\nax.fill(angles, values, alpha=0.25, color=colors[0])\n\n# Set the title and labels\nax.set_title('Example Plot')\nax.set_xticks(angles[:-1])\nax.set_xticklabels(['VQA', 'GQA', 'POPE', 'MM-Vet', 'TextVQA'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nmodels = ['llama-2-70-chat', 'llama-2-70', 'hfalcon-40b', 'text-bison@002', 'claude-2', 'claude-1', 'text-davinci-002', 'text-davinci-003', 'gpt-4']\nvalues = [1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5]\ncolors = ['orange', 'blue', 'orange', 'blue', 'green', 'green', 'green', 'green', 'green']\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(12.0, 4.0))\n\n# Plot the data\nfor model, value, color in zip(models, values, colors):\n    ax.plot([value], [0], marker='o', color=color, label=model)\n\n# Set the x-axis limits\nax.set_xlim(0, 2)\n\n# Set the y-axis limits\nax.set_ylim(0, 1)\n\n# Set the x-axis ticks\nax.set_xticks([0, 1, 2])\n\n# Set the y-axis ticks\nax.set_yticks([0, 1])\n\n# Set the x-axis label\nax.set_xlabel('Value')\n\n# Set the y-axis label\nax.set_ylabel('Risk')\n\n# Set the title\nax.set_title('Risk Taking')\n\n# Show the legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_10.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Define the data points\nx = np.array([0, 1000, 2000, 3000])\ny = np.array([77, 79, 81, 83])\n\n# Plot the data points\nax.plot(x, y, 'o-')\n\n# Set the title and labels\nax.set_title('ImageNet-1K Linear Probing')\nax.set_xlabel('Pre-training GPU Hours')\nax.set_ylabel('Accuracy [%]')\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/scatter_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data points\ninference_time = [10, 20, 30, 40, 50, 60]\naverage_score = [0.85, 0.80, 0.75, 0.70, 0.65, 0.60]\nbubble_size = [0.90, 0.90, 0.90, 0.90, 0.90, 0.90]\n\n# Create a scatter plot\nplt.scatter(inference_time, average_score, s=bubble_size*100)\n\n# Set the title and labels\nplt.title('Bubble Size: Number of Anomalies Detected')\nplt.xlabel('Inference Time (seconds)')\nplt.ylabel('Average Score')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data points\nx = [203, 424, 1, 46, 40]\ny = [55, 55, 55, 55, 55]\ncolors = ['gray', 'gray', 'gray', 'red', 'red']\nlabels = ['203M', '424M', '1B', '4B', '>4B']\n\n# Create a scatter plot\nplt.scatter(x, y, c=colors)\n\n# Add labels to each point\nfor i, label in enumerate(labels):\n    plt.annotate(label, (x[i], y[i]), textcoords=\"offset points\", xytext=(0,10), ha='center')\n\n# Set the title and axis labels\nplt.title('Number of parameters')\nplt.xlabel('EgoSchema VQA accuracy')\nplt.ylabel('Perception Test VQA accuracy')\n\n# Set the figure size\nplt.figure(figsize=(8.0, 6.0))\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data points\nx = [1.0, 2.0, 3.0, 4.0, 5.0]\ny_single_lstm = [0.08, 0.07, 0.06, 0.05, 0.04]\ny_ensemble_lstm = [0.08, 0.07, 0.06, 0.05, 0.04]\ny_caereconstruction = [0.08, 0.07, 0.06, 0.05, 0.04]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data\nax.plot(x, y_single_lstm, 'b^', label='Single LST')\nax.plot(x, y_ensemble_lstm, 'g^', label='Ensemble LST')\nax.plot(x, y_caereconstruction, 'ro', label='CAE Reconstruction')\n\n# Set the title and labels\nax.set_title('Average Relative Error, u')\nax.set_xlabel('Test Case Index, u')\nax.set_ylabel('Average Relative Error, u')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nclasses = ['spotlight', 'sliding', 'wool', 'weasel', 'space', 'partridge', 'mushroom', 'bighorn']\nmajority_accuracies = [1.2, 1.1, 1.0, 0.9, 0.8, 0.7, 0.6, 0.5]\nminority_accuracies = [0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2]\n\n# Plotting\nfig, ax = plt.subplots(figsize=(6.0, 3.0))\nax.plot(classes, majority_accuracies, 'bo', label='Majority')\nax.plot(classes, minority_accuracies, 'ro', label='Minority')\n\n# Adding legend and title\nax.legend()\nax.set_title('Accuracies for the ImageNet Classes (ClarifAI)')\n\n# Display plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data points\nx = [50, 30, 20, 10, 0]\ny1 = [68, 68, 68, 68, 68]\ny2 = [68, 68, 68, 68, 68]\ny3 = [64, 64, 64, 64, 64]\ny4 = [62, 62, 62, 62, 62]\ny5 = [60, 60, 60, 60, 60]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 4.0))\n\n# Plot the data points\nax.plot(x, y1, 'ro')\nax.plot(x, y2, 'bo')\nax.plot(x, y3, 'go')\nax.plot(x, y4, 'mo')\nax.plot(x, y5, 'co')\n\n# Set the labels and title\nax.set_xlabel('Token cost($)')\nax.set_ylabel('Accuracy(%)')\nax.set_title('Logic Grid Puzzle(Accuracy versus token cost)')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_16.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data points\nx = [15, 20, 25, 30, 35, 40, 45, 50]\ny_solar = [30, 35, 40, 45, 50, 55, 60, 65]\ny_wind = [25, 30, 35, 40, 45, 50, 55, 60]\ny_hydro = [20, 25, 30, 35, 40, 45, 50, 55]\ny_geothermal = [15, 20, 25, 30, 35, 40, 45, 50]\ny_biomass = [10, 15, 20, 25, 30, 35, 40, 45]\ny_nuclear = [5, 10, 15, 20, 25, 30, 35, 40]\ny_tidal = [0, 5, 10, 15, 20, 25, 30, 35]\ny_wave = [-5, 0, 5, 10, 15, 20, 25, 30]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 4.0))\n\n# Plot the data\nax.plot(x, y_solar, 'y-')\nax.plot(x, y_wind, 'b-')\nax.plot(x, y_hydro, 'c-')\nax.plot(x, y_geothermal, 'm-')\nax.plot(x, y_biomass, 'g-')\nax.plot(x, y_nuclear, 'y-')\nax.plot(x, y_tidal, 'p-')\nax.plot(x, y_wave, 'r-')\n\n# Set the labels and title\nax.set_xlabel('Efficiency (%)')\nax.set_ylabel('Carbon Reduction (%)')\nax.set_title('Energy Source vs Carbon Reduction')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_17.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(9.0, 6.0))\n\n# Set the limits of the x-axis\nax.set_xlim(-30, 10)\n\n# Set the limits of the y-axis\nax.set_ylim(-10, 30)\n\n# Draw horizontal lines at y=0, y=10, y=20, and y=30\nfor y in range(0, 40, 10):\n    ax.axhline(y=y, color='black', linestyle='--')\n\n# Draw vertical lines at x=-30, x=-20, x=0, and x=10\nfor x in range(-30, 11, 10):\n    ax.axvline(x=x, color='black', linestyle='--')\n\n# Set the title of the plot\nax.set_title('Scatter Plot with Grid Lines')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_18.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Define the data points\nx = [2, 4, 6, 8, 10, 12, 14, 16]\ny_day1 = [105, 100, 95, 90, 85, 80, 75, 70]\ny_day2 = [100, 95, 90, 85, 80, 75, 70, 65]\n\n# Plot the data points\nax.plot(x, y_day1, 'bo')  # blue circles for Day 1\nax.plot(x, y_day2, 'ro')  # red circles for Day 2\n\n# Set the title and labels\nax.set_title('Temperature Trends')\nax.set_xlabel('Time (hours)')\nax.set_ylabel('Temperature (\u00b0C)')\n\n# Set the grid\nax.grid(True)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_19.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data points\nx = [2, 4, 6, 8, 10, 12, 14, 16]\ny1 = [105, 100, 95, 90, 85, 80, 75, 70]\ny2 = [100, 95, 90, 85, 80, 75, 70, 65]\ny3 = [95, 90, 85, 80, 75, 70, 65, 60]\ny4 = [90, 85, 80, 75, 70, 65, 60, 55]\ny5 = [85, 80, 75, 70, 65, 60, 55, 50]\n\n# Create a scatter plot for each y-axis\nplt.scatter(x, y1, color='blue')\nplt.scatter(x, y2, color='green')\nplt.scatter(x, y3, color='red')\nplt.scatter(x, y4, color='purple')\nplt.scatter(x, y5, color='yellow')\n\n# Set the limits of the x and y axes\nplt.xlim(0, 18)\nplt.ylim(0, 115)\n\n# Set the labels for the x and y axes\nplt.xlabel('X-axis')\nplt.ylabel('Y-axis')\n\n# Set the title of the plot\nplt.title('Scatter Plot with Multiple Y-Axes')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data points\nx = [175, 200, 225, 250, 275, 300]\ny_solar = [140, 160, 180, 200, 220, 240]\ny_wind = [140, 160, 180, 200, 220, 240]\ny_hydro = [140, 160, 180, 200, 220, 240]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(4.0, 8.0))\n\n# Plot the data\nax.plot(x, y_solar, 'bo-', label='Solar Energy')\nax.plot(x, y_wind, 'ro-', label='Wind Energy')\nax.plot(x, y_hydro, 'go-', label='Hydropower')\n\n# Set the title and labels\nax.set_title('Energy Production Trends')\nax.set_xlabel('Installed Capacity (GW)')\nax.set_ylabel('Energy Output (TWh)')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_20.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Define the data points\nx = [10, 20, 30, 40, 50, 60, 70, 80, 90]\ny = [20, 60, 60, 60, 60, 60, 60, 60, 60]\n\n# Plot the data points\nax.plot(x, y, 'ro')\n\n# Set the title of the plot\nax.set_title('Scatter plot with colorbar')\n\n# Set the x-axis label\nax.set_xlabel('X-axis')\n\n# Set the y-axis label\nax.set_ylabel('Y-axis')\n\n# Set the colorbar\ncbar = fig.colorbar(ax.images[0])\n\n# Display the plot\nplt.show()"}
{"file": "dataset/ori_500/scatter_21.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Define the data\nx1 = [2, 3, 4, 5, 6, 7, 8]\ny1 = [0.9, 0.8, 0.8, 0.8, 0.8, 0.9, 0.9]\nx2 = [2, 3, 4, 5, 6, 7, 8]\ny2 = [0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9]\n\n# Plot the data\nax.plot(x1, y1, 'bo-')\nax.plot(x2, y2, 'ro-')\n\n# Set the title and labels\nax.set_title('LibriCSS vs Additional Data 1')\nax.set_xlabel('Number of Microphones')\nax.set_ylabel('WER (%)')\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/scatter_22.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(12.0, 6.0))\n\n# Define the data\nmodels = ['llama-2-70-chat', 'llama-2-70', 'hfalcon-40b', 'text-bison@002', 'claude-2', 'claude-1', 'text-davinci-002', 'text-davinci-003', 'gpt-4']\nvalues = [0.8, 0.9, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1]\nexploration = [0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0]\nrisk_taking = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9]\n\n# Plot the data\nax.plot(models, values, 'bo')\nax.plot(models, exploration, 'go')\nax.plot(models, risk_taking, 'ro')\n\n# Set the title and labels\nax.set_title('Performance Comparison')\nax.set_xlabel('Models')\nax.set_ylabel('Value')\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/scatter_23.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the plots\nmodels = ['Mixtal-8x7B', 'MPT-7B', 'Llama2-70B', 'Falcon-40B', 'Davinci-003', 'Davinci-002', 'Claude-2', 'Claude-1']\ngpt4_scores = [190, 160, 150, 140, 130, 120, 110, 100]\nmeta_cognition_scores = [180, 160, 150, 140, 130, 120, 110, 100]\nexploration_scores = [180, 160, 150, 140, 130, 120, 110, 100]\nrisk_taking_scores = [180, 160, 150, 140, 130, 120, 110, 100]\n\n# Create a figure and a set of subplots\nfig, axs = plt.subplots(2, 2, figsize=(8.0, 8.0))\n\n# Plot the data on the subplots\naxs[0, 0].plot(models, gpt4_scores, label='GPT4')\naxs[0, 0].set_title('Model-Basedness')\naxs[0, 0].legend()\n\naxs[0, 1].plot(models, meta_cognition_scores, label='Meta-Cognition', color='orange')\naxs[0, 1].set_title('Meta-Cognition')\n\naxs[1, 0].plot(models, exploration_scores, label='Exploration', color='green')\naxs[1, 0].set_title('Exploration')\n\naxs[1, 1].plot(models, risk_taking_scores, label='Risk Taking', color='red')\naxs[1, 1].set_title('Risk Taking')\n\n# Set the y-axis limits for all subplots\nfor ax in axs.flat:\n    ax.set_ylim(0, 200)\n\n# Adjust the layout of the subplots\nplt.tight_layout()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_24.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\nx_values = [70, 75, 80, 90]\ny_values = [30, 25, 20, 15]\ncolor_scale_for_x = [35, 35, 35, 35]\ncolor_scale_for_y = [40, 40, 40, 40]\n\n# Create a figure and axis\nfig, axs = plt.subplots(1, 3, figsize=(15, 5))\n\n# Scatter Plot - deepskyblue\naxs[0].scatter(x_values, y_values, color='blue')\naxs[0].set_title('Scatter Plot - deepskyblue')\naxs[0].set_xlabel('X Values')\naxs[0].set_ylabel('Y Values')\naxs[0].set_xlim(70, 90)\naxs[0].set_ylim(30, 45)\naxs[0].set_facecolor('#ADD8E6')  # Light blue background\n\n# Scatter Plot - magenta\naxs[1].scatter(x_values, y_values, color='magenta')\naxs[1].set_title('Scatter Plot - magenta')\naxs[1].set_xlabel('X Values')\naxs[1].set_ylabel('Y Values')\naxs[1].set_xlim(70, 90)\naxs[1].set_ylim(30, 45)\naxs[1].set_facecolor('#FF00FF')  # Magenta background\n\n# Scatter Plot - limegreen\naxs[2].scatter(x_values, y_values, color='limegreen')\naxs[2].set_title('Scatter Plot - limegreen')\naxs[2].set_xlabel('X Values')\naxs[2].set_ylabel('Y Values')\naxs[2].set_xlim(70, 90)\naxs[2].set_ylim(30, 45)\naxs[2].set_facecolor('#90EE90')  # Lime green background\n\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_25.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\nx = [70, 72, 74, 76, 78, 80, 82, 84, 86, 88]\ny1 = [50, 45, 40, 35, 30, 25, 20, 15, 10, 5]\ny2 = [45, 40, 35, 30, 25, 20, 15, 10, 5, 0]\ny3 = [50, 45, 40, 35, 30, 25, 20, 15, 10, 5]\n\n# Create a figure and a set of subplots\nfig, axs = plt.subplots(1, 3, figsize=(15, 5))\n\n# Plot the first subplot\naxs[0].plot(x, y1, 'p-', color='purple')\naxs[0].set_title('ViTPose (sc) Performance')\naxs[0].set_xlabel('Average Precision on MSCOCO (%)')\naxs[0].set_ylabel('Average Precision on HumanArt (%)')\n\n# Plot the second subplot\naxs[1].plot(x, y2, 'p-', color='purple')\naxs[1].set_title('ViTPose (ft) Performance')\naxs[1].set_xlabel('Average Precision on MSCOCO (%)')\naxs[1].set_ylabel('Average Precision on HumanArt (%)')\n\n# Plot the third subplot\naxs[2].plot(x, y3, 'p-', color='purple')\naxs[2].set_title('VLPose Performance')\naxs[2].set_xlabel('Average Precision on MSCOCO (%)')\naxs[2].set_ylabel('Average Precision on HumanArt (%)')\n\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nx = [1.2, 1.4, 1.6, 1.8, 2.0, 2.2, 2.4, 2.6, 2.8, 3.0, 3.2, 3.4, 3.6, 3.8, 4.0, 4.2, 4.4, 4.6, 4.8, 5.0, 5.2, 5.4, 5.6, 5.8, 6.0]\ny = [1.0, 2.5, 10.0, 25.0, 1.0, 2.5, 10.0, 25.0, 1.0, 2.5, 10.0, 25.0, 1.0, 2.5, 10.0, 25.0, 1.0, 2.5, 10.0, 25.0, 1.0, 2.5, 10.0, 25.0, 1.0, 2.5, 10.0, 25.0]\ncolors = ['red', 'purple', 'green', 'orange', 'blue', 'cyan', 'magenta', 'yellow', 'pink', 'brown', 'gray', 'black', 'lime', 'olive', 'navy', 'maroon', 'silver', 'gold', 'teal', 'aqua', 'coral', 'plum', 'indigo', 'violet', 'turquoise', 'lavender', 'salmon', 'sienna', 'beige', 'wheat', 'tan', 'chocolate', 'saddlebrown', 'peru', 'rosybrown', 'darkkhaki', 'palegoldenrod', 'lightcoral', 'lightsalmon', 'lightyellow', 'lightgreen', 'lightcyan', 'lightblue', 'powderblue', 'skyblue', 'lightskyblue', 'deepskyblue', 'dodgerblue', 'cornflowerblue', 'royalblue', 'slateblue', 'mediumslateblue', 'lightslategray', 'slategray', 'darkslategray', 'gray', 'dimgray', 'grey', 'darkgray', 'silver', 'lightgray', 'gainsboro', 'whitesmoke', 'snow', 'floralwhite', 'oldlace', 'linen', 'antiquewhite', 'papayawhip', 'blanchedalmond', 'bisque', 'peachpuff', 'navajowhite', 'moccasin', 'cornsilk', 'ivory', 'lemonchiffon', 'seashell', 'mintcream', 'azure', 'aliceblue', 'lavenderblush', 'mistyrose', 'lavender', 'thistle', 'plum', 'orchid', 'fuchsia', 'magenta', 'deeppink', 'violet', 'purple', 'indigo', 'blueviolet', 'darkviolet', 'darkorchid', 'darkmagenta', 'purple', 'mediumvioletred', 'palevioletred', 'hotpink', 'deeppink', 'pink', 'lightpink', 'coral', 'tomato', 'orangered', 'darkorange', 'orange', 'gold', 'yellow', 'chartreuse', 'lawngreen', 'limegreen', 'lime', 'forestgreen', 'green', 'darkgreen', 'olivedrab', 'olive', 'darkolivegreen', 'yellowgreen', 'springgreen', 'mediumspringgreen', 'lightgreen', 'greenyellow', 'lime', 'lawngreen', 'chartreuse', 'yellowgreen', 'greenyellow', 'lime', 'lawngreen', 'chartreuse', 'yellowgreen', 'greenyellow', 'lime', 'lawngreen', 'chartreuse', 'yellowgreen', 'greenyellow', 'lime', 'lawngreen', 'chartreuse', 'yellowgreen', 'greenyellow', 'lime', 'lawngreen', 'chartreuse', 'yellowgreen', 'greenyellow', 'lime', 'lawngreen', 'chartreuse', 'yellowgreen', 'greenyellow', 'lime', 'lawngreen', 'chartreuse', 'yellowgreen', 'greenyellow', 'lime', 'lawngreen', 'chartreuse', 'yellowgreen', 'greenyellow', 'lime', 'lawngreen', 'chartreuse', 'yellowgreen', 'greenyellow', 'lime', 'lawngreen', 'chartreuse', 'yellowgreen', 'greenyellow', 'lime', 'lawngreen', 'chartreuse', 'yellowgreen', 'greenyellow', 'lime', 'lawngreen', 'chartreuse', 'yellowgreen', 'greenyellow', 'lime', 'lawngreen', 'chartreuse', 'yellowgreen', 'greenyellow', 'lime', 'lawngreen', 'chartreuse', 'yellowgreen', 'greenyellow', 'lime', 'lawngreen', 'chartreuse', 'yellowgreen', 'greenyellow', 'lime', 'lawngreen', 'chartreuse', 'yellowgreen', 'greenyellow', 'lime', 'lawngreen', 'chartreuse', 'yellowgreen', 'greenyellow', 'lime', 'lawngreen', 'chartreuse', 'yellowgreen', 'greenyellow', 'lime', 'lawngreen', 'chartreuse', 'yellowgreen', 'greenyellow', 'lime', 'lawngreen', 'chartreuse', 'yellowgreen', 'greenyellow', 'lime', 'lawngreen', 'chartreuse', 'yellowgreen', 'greenyellow', 'lime', 'lawngreen', 'chartreuse', 'yellowgreen', 'greenyellow', 'lime', 'lawngreen', 'chartreuse', 'yellowgreen', 'greenyellow', 'lime', 'lawngreen', 'chartreuse', 'yellowgreen', 'greenyellow', 'lime', 'lawngreen', 'chartreuse', 'yellowgreen', 'greenyellow', 'lime', 'lawngreen', 'chartreuse', 'yellowgreen', 'greenyellow', 'lime', 'lawngreen', 'chartreuse', 'yellowgreen', 'greenyellow', 'lime', 'lawngreen', 'chartreuse', 'yellowgreen', 'greenyellow', 'lime', 'lawngreen', 'chartreuse', 'yellowgreen', 'greenyellow', 'lime', 'lawngreen', 'chartreuse', 'yellowgreen', 'greenyellow', 'lime', 'lawngreen', 'chartreuse', 'yellowgreen', 'greenyellow', 'lime', 'lawngreen', 'chartreuse', 'yellowgreen', 'greenyellow', 'lime', 'lawngreen', 'chartreuse', 'yellowgreen', 'greenyellow', 'lime', 'lawngreen', 'chartreuse', 'yellowgreen', 'greenyellow', 'lime', 'lawngreen', 'chartreuse', 'yellowgreen', 'greenyellow', 'lime', 'lawngreen', 'chartreuse', 'yellowgreen', 'greenyellow', 'lime', 'lawngreen', 'chartreuse', 'yellowgreen', 'greenyellow', 'lime', 'lawngreen', 'chartreuse', 'yellowgreen', 'greenyellow', 'lime', 'lawngreen', 'chartreuse', 'yellowgreen', 'greenyellow', 'lime', 'lawngreen', 'chartreuse', 'yellowgreen', 'greenyellow', 'lime', 'lawngreen', 'chartreuse', 'yellowgreen', 'greenyellow', 'lime', 'lawngreen', 'chartreuse', 'yellowgreen', 'greenyellow', 'lime', 'lawngreen', 'chartreuse', 'yellowgreen', 'greenyellow', 'lime', 'lawngreen', 'chartreuse', 'yellowgreen', 'greenyellow', 'lime', 'lawngreen', 'chartreuse', 'yellowgreen', 'greenyellow', 'lime', 'lawngreen', 'chartreuse', 'yellowgreen', 'greenyellow', 'lime', 'lawngreen', 'chartreuse', 'yellowgreen', 'greenyellow', 'lime', 'lawngreen', 'chartreuse', 'yellowgreen', 'greenyellow', 'lime', 'lawngreen', 'chartreuse', 'yellowgreen', 'greenyellow', 'lime', 'lawngreen', 'chartreuse', 'yellowgreen', 'greenyellow', 'lime', 'lawngreen', 'chartreuse', 'yellowgreen', 'greenyellow', 'lime', 'lawngreen', 'chartreuse', 'yellowgreen', 'greenyellow', 'lime', 'lawngreen', 'chartreuse', 'yellowgreen', 'greenyellow', 'lime', 'lawngreen', 'chartreuse', 'yellowgreen', 'greenyellow', 'lime', 'lawngreen', 'chartreuse', 'yellowgreen', 'greenyellow', 'lime', 'lawngreen', 'chartreuse', 'yellowgreen', 'greenyellow', 'lime', 'lawngreen', 'chartreuse', 'yellowgreen', 'greenyellow', 'lime', 'lawngreen', 'chartreuse', 'yellowgreen', 'greenyellow', 'lime', 'lawngreen', 'chartreuse', 'yellowgreen', 'greenyellow', 'lime', 'lawngreen', 'chartreuse', 'yellowgreen', 'greenyellow', 'lime', 'lawngreen', 'chartreuse', 'yellowgreen', 'greenyellow', 'lime', 'lawngreen', 'chartreuse', 'yellowgreen', 'greenyellow', 'lime', 'lawngreen', 'chartreuse', 'yellowgreen', 'greenyellow', 'lime', 'lawngreen', 'chartreuse', 'yellowgreen', 'greenyellow', 'lime', 'lawngreen', 'chartreuse', 'yellowgreen', 'greenyellow', 'lime', 'lawngreen', 'chartreuse', 'yellowgreen', 'greenyellow', 'lime', 'lawngreen', 'chartreuse', 'yellowgreen', 'greenyellow', 'lime', 'lawngreen', 'chartreuse', 'yellowgreen', 'greenyellow', 'lime', 'lawngreen', 'chartreuse', 'yellowgreen', 'greenyellow', 'lime', 'lawngreen', 'chartreuse', 'yellowgreen', 'greenyellow', 'lime', 'lawngreen', 'chartreuse', 'yellowgreen', 'greenyellow', 'lime', 'lawngreen', 'chartreuse', 'yellowgreen', 'greenyellow', 'lime', 'lawngreen', 'chartreuse', 'yellowgreen', 'greenyellow', 'lime', 'lawngreen', 'chartreuse', 'yellowgreen', 'greenyellow', 'lime', 'lawngreen', 'chartreuse', 'yellowgreen', 'greenyellow', 'lime', 'lawngreen', 'chartreuse', 'yellowgreen', 'greenyellow', 'lime', 'lawngreen', 'chartreuse', 'yellowgreen', 'greenyellow', 'lime', 'lawngreen', 'chartreuse', 'yellowgreen', 'greenyellow', 'lime', 'lawngreen', 'chartreuse', 'yellowgreen', 'greenyellow', 'lime', 'lawngreen', 'chartreuse', 'yellowgreen', 'greenyellow', 'lime', 'lawngreen', 'chartreuse', 'yellowgreen', 'greenyellow', 'lime', 'lawngreen', 'chartreuse', 'yellowgreen', 'greenyellow', 'lime', 'lawngreen', 'chartreuse', 'yellowgreen', 'greenyellow', 'lime', 'lawngreen', 'chartreuse', 'yellowgreen', 'greenyellow', 'lime', 'lawngreen', 'chartreuse', 'yellowgreen', 'greenyellow', 'lime', 'lawngreen', 'chartreuse', 'yellowgreen', 'greenyellow', 'lime', 'lawngreen', 'chartreuse', 'yellowgreen', 'greenyellow', 'lime', 'lawngreen', 'chartreuse', 'yellowgreen', 'greenyellow', 'lime', 'lawngreen', 'chartreuse', 'yellowgreen', 'greenyellow', 'lime', 'lawngreen', 'chartreuse', 'yellowgreen', 'greenyellow', 'lime', 'lawngreen', 'chartreuse', 'yellowgreen', 'greenyellow', 'lime', 'lawngreen', 'chartreuse', 'yellowgreen', 'greenyellow', 'lime', 'lawngreen', 'chartreuse', 'yellowgreen', 'greenyellow', 'lime', 'lawngreen', 'chartreuse', 'yellowgreen', 'greenyellow', 'lime', 'lawngreen', 'chartreuse', 'yellowgreen', 'greenyellow', 'lime', 'lawngreen', 'chartreuse', 'yellowgreen', 'greenyellow', 'lime', 'lawngreen', 'chartreuse', 'yellowgreen', 'greenyellow', 'lime', 'lawngreen', 'chartreuse', 'yellowgreen', 'greenyellow', 'lime', 'lawngreen', 'chartreuse', 'yellowgreen', 'greenyellow', 'lime', 'lawngreen', 'chartreuse', 'yellowgreen', 'greenyellow', 'lime', 'lawngreen', 'chartreuse', 'yellowgreen', 'greenyellow', 'lime', 'lawngreen', 'chartreuse', 'yellowgreen', 'greenyellow', 'lime', 'lawngreen', 'chartreuse', 'yellowgreen', 'greenyellow', 'lime', 'lawngreen', 'chartreuse', 'yellowgreen', 'greenyellow', 'lime', 'lawngreen', 'chartreuse', 'yellowgreen', 'greenyellow', 'lime', 'lawngreen', 'chartreuse', 'yellowgreen', 'greenyellow', 'lime', 'lawngreen', 'chartreuse', 'yellowgreen', 'greenyellow', 'lime', 'lawngreen', 'chartreuse', 'yellowgreen', 'greenyellow', 'lime', 'lawngreen', 'chartreuse', 'yellowgreen', 'greenyellow', 'lime', 'lawngreen', 'chartreuse', 'yellowgreen', 'greenyellow', 'lime', 'lawngreen', 'chartreuse', 'yellowgreen', 'greenyellow', 'lime', 'lawngreen', 'chartreuse', 'yellowgreen', 'greenyellow', 'lime', 'lawngreen', 'chartreuse', 'yellowgreen', 'greenyellow', 'lime', 'lawngreen', 'chartreuse', 'yellowgreen', 'greenyellow', 'lime', 'lawngreen', 'chartreuse', 'yellowgreen', 'greenyellow', 'lime', 'lawngreen', 'chartreuse', 'yellowgreen', 'greenyellow', 'lime', 'lawngreen', 'chartreuse', 'yellowgreen', 'greenyellow', 'lime', 'lawngreen', 'chartreuse', 'yellowgreen', 'greenyellow', 'lime', 'lawngreen', 'chartreuse', 'yellowgreen', 'greenyellow', 'lime', 'lawngreen', 'chartreuse', 'yellowgreen', 'greenyellow', 'lime', 'lawngreen', 'chartreuse', 'yellowgreen', 'greenyellow', 'lime', 'lawngreen', 'chartreuse', 'yellowgreen', 'greenyellow', 'lime', 'lawngreen', 'chartreuse', 'yellowgreen', 'greenyellow', 'lime', 'lawngreen', 'chartreuse', 'yellowgreen', 'greenyellow', 'lime', 'lawngreen', 'chartreuse', 'yellowgreen', 'greenyellow', 'lime', 'lawngreen', 'chartreuse', 'yellowgreen', 'greenyellow', 'lime', 'lawngreen', 'chartreuse', 'yellowgreen', 'greenyellow', 'lime', 'lawngreen', 'chartreuse', 'yellowgreen', 'greenyellow', 'lime', 'lawngreen', 'chartreuse', 'yellowgreen', 'greenyellow', 'lime', 'lawngreen', 'chartreuse', 'yellowgreen', 'greenyellow', 'lime', 'lawngreen', 'chartreuse', 'yellowgreen', 'greenyellow', 'lime', 'lawngreen', 'chartreuse', 'yellowgreen', 'greenyellow', 'lime', 'lawngreen', 'chartreuse', 'yellowgreen', 'greenyellow', 'lime', 'lawngreen', 'chartreuse', 'yellowgreen', 'greenyellow', 'lime', 'lawngreen', 'chartreuse', 'yellowgreen', 'greenyellow', 'lime', 'lawngreen', 'chartreuse', 'yellowgreen', 'greenyellow', 'lime', 'lawngreen', 'chartreuse', 'yellowgreen', 'greenyellow', 'lime', 'lawngreen', 'chartreuse', 'yellowgreen', 'greenyellow', 'lime', 'lawngreen', 'chartreuse', 'yellowgreen', 'greenyellow', 'lime', 'lawngreen', 'chartreuse', 'yellowgreen', 'greenyellow', 'lime', 'lawngreen', 'chartreuse', 'yellowgreen', 'greenyellow', 'lime', 'lawngreen', 'chartreuse', 'yellowgreen', 'greenyellow', 'lime', 'lawngreen', 'chartreuse', 'yellowgreen', 'greenyellow', 'lime', 'lawngreen', 'chartreuse', 'yellowgreen', 'greenyellow', 'lime', 'lawngreen', 'chartreuse', 'yellowgreen', 'greenyellow', 'lime', 'lawngreen', 'chartreuse', 'yellowgreen', 'greenyellow', 'lime', 'lawngreen', 'chartreuse', 'yellowgreen', 'greenyellow', 'lime', 'lawngreen', 'chartreuse', 'yellowgreen', 'greenyellow', 'lime', 'lawngreen', 'chartreuse', 'yellowgreen', 'greenyellow', 'lime', 'lawngreen', 'chartreuse', 'yellowgreen', 'greenyellow', 'lime', 'lawngreen', 'chartreuse', 'yellowgreen', 'greenyellow', 'lime', 'lawngreen', 'chartreuse', 'yellowgreen', 'greenyellow', 'lime', 'lawngreen', 'chartreuse', 'yellowgreen', 'greenyellow', 'lime', 'lawngreen', 'chartreuse', 'yellowgreen', 'greenyellow', 'lime', 'lawngreen', 'chartreuse', 'yellowgreen', 'greenyellow', 'lime', 'lawngreen', 'chartreuse', 'yellowgreen', 'greenyellow', 'lime', 'lawngreen', 'chartreuse', 'yellowgreen', 'greenyellow', 'lime', 'lawngreen', 'chartreuse', 'yellowgreen', 'greenyellow', 'lime', 'lawngreen', 'chartreuse', 'yellowgreen', 'greenyellow', 'lime', 'lawngreen', 'chartreuse', 'yellowgreen', 'greenyellow', 'lime', 'lawngreen', 'chartreuse', 'yellowgreen', 'greenyellow', 'lime', 'lawngreen', 'chartreuse', 'yellowgreen', 'greenyellow', 'lime', 'lawngreen', 'chartreuse', 'yellowgreen', 'greenyellow"}
{"file": "dataset/ori_500/scatter_4.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom matplotlib.patches import Ellipse\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(5.0, 5.0))\n\n# Define the colors\ncolors = ['red', 'green', 'blue', 'yellow', 'orange', 'purple']\n\n# Define the number of points\nn_points = 100\n\n# Define the range for x and y coordinates\nx_range = np.linspace(-1, 1, n_points)\ny_range = np.linspace(-1, 1, n_points)\n\n# Loop over each color\nfor i, color in enumerate(colors):\n    # Generate random x and y coordinates\n    x = np.random.choice(x_range, n_points)\n    y = np.random.choice(y_range, n_points)\n    \n    # Plot the points\n    ax.scatter(x, y, color=color, s=10)\n\n# Set the limits of the plot\nax.set_xlim(-1, 1)\nax.set_ylim(-1, 1)\n\n# Remove the axes\nax.axis('off')\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/scatter_5.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Define the data points\nx = np.array([0.06, 0.08, 0.1, 0.12, 0.14, 0.16, 0.18, 0.2])\ny1 = np.array([800, 750, 700, 650, 600, 550, 500, 450])\ny2 = np.array([600, 550, 500, 450, 400, 350, 300, 250])\ny3 = np.array([800, 750, 700, 650, 600, 550, 500, 450])\ny4 = np.array([600, 550, 500, 450, 400, 350, 300, 250])\ny5 = np.array([800, 750, 700, 650, 600, 550, 500, 450])\ny6 = np.array([600, 550, 500, 450, 400, 350, 300, 250])\n\n# Plot the data points\nax.plot(x, y1, 'bo', label='SIREN')\nax.plot(x, y2, 'co', label='WIRE')\nax.plot(x, y3, 'ro', label='FFN')\nax.plot(x, y4, 'go', label='SZ3')\nax.plot(x, y5, 'mo', label='NNComp')\nax.plot(x, y6, 'yo', label='Ours')\n\n# Set the title and labels\nax.set_title('Scatter Plot of WRMSE vs BPP')\nax.set_xlabel('Bit per pixel (BPP)')\nax.set_ylabel('WRMSE')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/scatter_6.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Define the data points\nx = np.random.rand(100)\ny = np.random.rand(100)\n\n# Plot the data points with different colors\nax.scatter(x, y, c='orange', label='Daytime Sunny')\nax.scatter(x, y, c='blue', label='Night Rainy')\nax.scatter(x, y, c='green', label='PGST')\n\n# Set the title and labels\nax.set_title('Weather Data')\nax.set_xlabel('X-axis')\nax.set_ylabel('Y-axis')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/scatter_7.pdf", "response": "import matplotlib.pyplot as plt\n\n# Define the data points\nnmae = [25, 18, 15, 12, 10, 8]\nparams = [10, 20, 30, 40, 50, 60]\n\n# Create a scatter plot\nplt.scatter(params, nmae, color='blue')\n\n# Set the title and labels\nplt.title('Number of params. vs. NMAE on QM9')\nplt.xlabel('Number of parameters (M)')\nplt.ylabel('NMAE (%)')\n\n# Set the y-axis limits\nplt.ylim(0, 35)\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/scatter_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Set the title of the plot\nax.set_title('Legend')\n\n# Set the x-axis label\nax.set_xlabel('PC1')\n\n# Set the y-axis label\nax.set_ylabel('PC2')\n\n# Define the colors for each category\ncolors = ['blue', 'pink', 'yellow', 'green']\n\n# Define the labels for each category\nlabels = ['ar', 'de', 'fr', 'he']\n\n# Define the data points for each category\ndata_points = [\n    [0.3, 0.4, 0.5, 0.6],\n    [0.2, 0.3, 0.4, 0.5],\n    [0.1, 0.2, 0.3, 0.4],\n    [0.0, 0.1, 0.2, 0.3]\n]\n\n# Plot the data points with different colors and labels\nfor i in range(len(data_points)):\n    ax.scatter(range(len(data_points[i])), data_points[i], color=colors[i], label=labels[i])\n\n# Add a legend to the plot\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for DE\nde_x = [0.6, 0.7, 0.8, 0.9, 1.0]\nde_y = [0.12, 0.12, 0.11, 0.11, 0.11]\n\n# Data for PJM\npjm_x = [0.6, 0.7, 0.8, 0.9, 1.0]\npjm_y = [0.6, 0.55, 0.55, 0.5, 0.45]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(7.0, 10.0))\n\n# Plot DE data\nax.scatter(de_x, de_y, color='green')\nax.set_title('DE')\n\n# Plot PJM data\nax.scatter(pjm_x, pjm_y, color='blue')\n\n# Set labels\nax.set_xlabel('CQA Similarity')\nax.set_ylabel('MSE')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/tree_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data for the bar chart\ncategories = ['physicsforums.com', 'gmatclub.com', 'mathhelpboards.com', 'mathoverflow.net', 'proofwiki.org', 'stackexchange.com', 'mathhelpforum.com']\nvalues = [18.42, 6.26, 6.15, 10.91, 8.54, 30.6, 14.21]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(12.0, 8.0))\n\n# Create a bar chart with the data\nbars = ax.bar(categories, values, color='blue')\n\n# Add labels and title\nax.set_xlabel('Categories')\nax.set_ylabel('Values')\nax.set_title('Bar Chart of Categories and Values')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/tree_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\nfig, ax = plt.subplots(figsize=(12.0, 8.0))\nax.axis('off')\n\n# Define the colors and sizes for each bar\ncolors = ['purple', 'pink', 'orange', 'lightblue']\nsizes = [10, 27, 8, 12]\n\n# Create a bar chart with the specified colors and sizes\nbars = ax.bar(range(len(colors)), sizes, color=colors)\n\n# Add labels to each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 2), ha='center', va='bottom')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/tree_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\nbrands = ['Adidas', 'Nike', 'Reebok', 'Puma']\nmarket_shares = [13.42, 30.6, 10.91, 14.21]\nunder_armour_shares = [8.54, 0, 0, 0]\nnew_balance_shares = [0, 0, 0, 6.26]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(12.0, 8.0))\n\n# Plot the market shares\nax.bar(brands, market_shares, color='blue')\n\n# Plot the Under Armour shares\nax.bar(brands, under_armour_shares, bottom=market_shares, color='orange')\n\n# Plot the New Balance shares\nax.bar(brands, new_balance_shares, bottom=[sum(x) for x in zip(market_shares, under_armour_shares)], color='red')\n\n# Set the title and labels\nax.set_title('Market Share Distribution')\nax.set_xlabel('Brands')\nax.set_ylabel('Market Share (%)')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/tree_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the bar chart\ncategories = ['Category A', 'Category B', 'Category C']\nvalues = [50, 15, 20]\n\n# Create a bar chart\nplt.bar(categories, values, color=['orange', 'lightblue', 'lightgreen'])\n\n# Set the title and labels\nplt.title('Bar Chart')\nplt.xlabel('Categories')\nplt.ylabel('Values')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/tree_5.pdf", "response": "```\nimport matplotlib.pyplot as plt\n\n# Data\nregions = ['European', 'Australian', 'South American', 'Asian', 'North American']\npercentages = [15, 18, 10, 25, 20]\n\n# Create a bar chart\nplt.bar(regions, percentages, color=['yellow', 'purple', 'cyan', 'pink', 'green'])\n\n# Set the title and labels\nplt.title('Percentage of Population by Region')\nplt.xlabel('Region')\nplt.ylabel('Percentage')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/violin_1.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 7.0))\n\n# Define the data\nx = np.arange(1, 6)\ny1 = np.random.rand(5) * 6\ny2 = np.random.rand(5) * 6\n\n# Plot the data\nax.plot(x, y1, 'b-', label='Llama2')\nax.plot(x, y2, 'r-', label='Llama2 (In-Chat)')\n\n# Set the title and labels\nax.set_title('Logarithmic Plot of Llama2 vs Llama2 (In-Chat)')\nax.set_xlabel('Number of examples')\nax.set_ylabel('LogP(CL)')\n\n# Set the y-axis limits\nax.set_ylim(0, 7)\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/violin_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nefficiency = [0.8, 0.7, 0.6, 0.5, 0.4, 0.3]\ncomfort = [0.9, 0.8, 0.7, 0.6, 0.5, 0.4]\nsafety = [0.7, 0.6, 0.5, 0.4, 0.3, 0.2]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Plot the data\nax.plot(efficiency, label='Efficiency')\nax.plot(comfort, label='Comfort')\nax.plot(safety, label='Safety')\n\n# Add stars at specific points\nax.plot([1, 3, 5], [0.8, 0.6, 0.4], 'r*')\nax.plot([1, 3, 5], [0.9, 0.7, 0.5], 'r*')\nax.plot([1, 3, 5], [0.7, 0.5, 0.3], 'r*')\n\n# Set labels and title\nax.set_xlabel('Time')\nax.set_ylabel('Score')\nax.set_title('Comparison of Scores with and without Memory')\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/violin_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nefficiency = [0.3, 0.4, 0.5]\ncomfort = [0.2, 0.3, 0.4]\nsafety = [0.1, 0.2, 0.3]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Plot the data\nax.bar(range(len(efficiency)), efficiency, color='pink', label='Without Memory')\nax.bar(range(len(comfort)), comfort, color='lightblue', label='With Memory')\nax.bar(range(len(safety)), safety, color='pink', label='Without Memory')\n\n# Set the labels and title\nax.set_xlabel('Category')\nax.set_ylabel('Score')\nax.set_title('Category Scores')\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/violin_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for plotting\nx = [1, 2, 3, 4, 5]\ny1 = [0.9, 0.8, 0.7, 0.6, 0.5]\ny2 = [0.8, 0.7, 0.6, 0.5, 0.4]\ny3 = [0.7, 0.6, 0.5, 0.4, 0.3]\ny4 = [0.6, 0.5, 0.4, 0.3, 0.2]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 4.0))\n\n# Plot the data\nax.plot(x, y1, label='GPT-4V(Video)', color='green')\nax.plot(x, y2, label='Gemini', color='orange')\n\n# Set the title and labels\nax.set_title('Scoring Evaluation')\nax.set_xlabel('Time')\nax.set_ylabel('Score')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/violin_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(5.0, 5.0))\n\n# Set the title of the plot\nax.set_title('Accuracy')\n\n# Set the x-axis labels\nax.set_xlabel('Algorithm')\nax.set_ylabel('Accuracy')\n\n# Define the data for the plot\nalgorithms = ['jTrans', 'PalmTree', 'CLAP']\naccuracies = [0.9, 0.8, 0.7]\n\n# Plot the data\nax.bar(algorithms, accuracies)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/violin_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Define the data\nx = ['A2', 'B1', 'B2', 'C1', 'C2']\ny1 = [0.3, 0.4, 0.5, 0.6, 0.7]\ny2 = [0.8, 0.9, 1.0, 1.1, 1.2]\n\n# Plot the data\nax.plot(x, y1, label='Teacher-Style')\nax.plot(x, y2, label='Standardize')\n\n# Add stars at specific points\nstars = [(0, 0.3), (1, 0.4), (2, 0.5), (3, 0.6), (4, 0.7)]\nfor i, (x_val, y_val) in enumerate(stars):\n    ax.annotate('*', (x_val, y_val), color='yellow')\n\n# Set the title and labels\nax.set_title('Comparison of Teacher-Style and Standardize')\nax.set_xlabel('Time')\nax.set_ylabel('Score')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/violin_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the plots\ndata1 = [75, 80, 85]\ndata2 = [65, 70, 75]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Plot the first data set\nax.bar(range(len(data1)), data1, color='pink')\n\n# Plot the second data set\nax.bar(range(len(data2)), data2, color='blue')\n\n# Set the title and labels\nax.set_title('Comparison of Data')\nax.set_xlabel('Data Points')\nax.set_ylabel('Values')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/violin_7.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Define the data\nx = [2, 4, 6, 8, 10]\ny1 = [163, 201, 176, 159, 153]\ny2 = [97, 97, 95, 109, 97]\n\n# Plot the data\nax.plot(x, y1, label='Group l0')\nax.plot(x, y2, label='AGIS')\n\n# Set the title and labels\nax.set_title('% Decrease in Test MSE vs. FLAM-GL')\nax.set_xlabel('Number of Features')\nax.set_ylabel('% Decrease')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/violin_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\nx = [0.88, 0.85, 0.79, 0.67, 0.57]\ny = [0.18, 0.19, 0.19, 0.16, 0.16]\nlabels = ['Raw', '125Hz', '50Hz', '25Hz', '10Hz']\npearson_r = [0.33, 0.33, 10.67, 16.95, 29.10]\neer = [0.18, 0.19, 0.18, 0.16, 0.16]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot the data\nfor i in range(len(x)):\n    ax.plot([x[i], x[i]], [y[i], y[i]], 'k-')\n    ax.text(x[i], y[i], labels[i], ha='center', va='center')\n\n# Set the limits and ticks\nax.set_xlim(0.5, 1.0)\nax.set_ylim(0.1, 1.0)\nax.set_xticks(np.arange(0.5, 1.1, 0.1))\nax.set_yticks(np.arange(0.1, 1.1, 0.1))\n\n# Add Pearson R and EER values\nfor i in range(len(x)):\n    ax.text(x[i], y[i] - 0.05, f'Pearson R: {pearson_r[i]:.2f}', ha='center', va='center')\n    ax.text(x[i], y[i] - 0.1, f'EER: {eer[i]:.2f}%', ha='center', va='center')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/violin_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and a set of subplots\nfig, axes = plt.subplots(2, 2, figsize=(12.0, 8.0))\n\n# Define the data for each subplot\ndata_boys_class1 = np.random.randint(50, 100, size=(4, 4))\ndata_girls_class1 = np.random.randint(50, 100, size=(4, 4))\ndata_boys_class3 = np.random.randint(50, 100, size=(4, 4))\ndata_girls_class3 = np.random.randint(50, 100, size=(4, 4))\ndata_boys_class4 = np.random.randint(50, 100, size=(4, 4))\ndata_girls_class4 = np.random.randint(50, 100, size=(4, 4))\n\n# Plot the data on each subplot\naxes[0, 0].imshow(data_boys_class1, cmap='Blues')\naxes[0, 0].set_title('Distribution of Grades: Class 1')\naxes[0, 1].imshow(data_girls_class1, cmap='Blues')\naxes[0, 1].set_title('Distribution of Grades: Class 2')\naxes[1, 0].imshow(data_boys_class3, cmap='Blues')\naxes[1, 0].set_title('Distribution of Grades: Class 3')\naxes[1, 1].imshow(data_girls_class3, cmap='Blues')\naxes[1, 1].set_title('Distribution of Grades: Class 4')\n\n# Adjust the layout of the subplots\nplt.tight_layout()\n\n# Display the plot\nplt.show()\n```"}
