{"file": "dataset/ori_500/3d_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfig = plt.figure(figsize=(7.0, 7.0))\nax = fig.add_subplot(111, projection='3d')\n\nx = np.linspace(0, 10, 100)\ny = np.sin(x)\nz = np.cos(x)\n\nax.plot(x, y, z, 'b-')\nax.set_xlabel('Time')\nax.set_ylabel('Price')\nax.set_zlabel('Volume')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_10.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a 3D plot\nfig = plt.figure(figsize=(8.0, 6.0))\nax = fig.add_subplot(111, projection='3d')\n\n# Define the data\nx = np.array([0.5, 1.5, 2.5, 3.5])\ny = np.array([0.5, 1.5, 2.5, 3.5])\nz = np.array([0.5, 1.5, 2.5, 3.5])\ndx = dy = dz = 0.5\n\n# Plot the bars\nax.bar3d(x, y, z, dx, dy, dz, color='r')\n\n# Set the labels\nax.set_xlabel('Height')\nax.set_ylabel('Width')\nax.set_zlabel('Count')\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/3d_11.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig = plt.figure(figsize=(8.0, 6.0))\nax = fig.add_subplot(111, projection='3d')\n\n# Define the data for the sphere\nu = np.linspace(0, 2 * np.pi, 100)\nv = np.linspace(0, np.pi, 100)\nx = 10 * np.outer(np.cos(u), np.sin(v))\ny = 10 * np.outer(np.sin(u), np.sin(v))\nz = 10 * np.outer(np.ones(np.size(u)), np.cos(v))\n\n# Plot the sphere\nax.plot_surface(x, y, z, color='magenta')\n\n# Set the limits of the axes\nax.set_xlim(-15, 15)\nax.set_ylim(-15, 15)\nax.set_zlim(-15, 15)\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/3d_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nimport numpy as np\n\nfig = plt.figure(figsize=(8.0, 6.0))\nax = fig.add_subplot(111, projection='3d')\n\n# Data points\nx = [-4, -2, 0, 2, 4]\ny = [0, 0, 0, 0, 0]\nz = [0, 0, 0, 0, 0]\n\n# Plot data points\nax.scatter(x, y, z, c='r', marker='o')\n\n# Fit line\nx_fit = np.linspace(-4, 4, 100)\ny_fit = 2 * x_fit + 5\nz_fit = 0.5 * x_fit**2 + 3 * x_fit + 1\nax.plot(x_fit, y_fit, z_fit, 'b-')\n\n# Labels\nax.set_xlabel('Temperature (\u00b0C)')\nax.set_ylabel('Pressure (kPa)')\nax.set_zlabel('Volume (L)')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\nyears = ['2010', '2012', '2014', '2016', '2018']\nprivate_schools = [0.3, 0.5, 0.7, 0.9, 0.8]\npublic_schools = [0.2, 0.4, 0.6, 0.8, 0.9]\n\n# Create a 3D plot\nfig = plt.figure(figsize=(8.0, 6.0))\nax = fig.add_subplot(111, projection='3d')\n\n# Plot the data\nx = np.arange(len(years))\ny = np.zeros(len(years))\nz = private_schools\ndx = dy = 0.5\ndz = public_schools\nax.bar3d(x, y, z, dx, dy, dz, shade=True)\n\n# Set labels and title\nax.set_xlabel('Year')\nax.set_ylabel('Type')\nax.set_zlabel('Student to Teacher Ratio')\nax.set_title('Student to Teacher Ratio by School Type')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Create a color map for the scatter plot\ncmap = plt.cm.get_cmap('viridis')\n\n# Create a scatter plot with random data\nx = np.random.rand(100)\ny = np.random.rand(100)\nz = np.random.rand(100)\nscatter = ax.scatter(x, y, c=z, cmap=cmap)\n\n# Add a color bar which maps values to colors\ncbar = fig.colorbar(scatter)\ncbar.set_label('Incidence Rate')\n\n# Set the limits of the x and y axes\nax.set_xlim([0, 10])\nax.set_ylim([0, 10])\n\n# Set the labels of the x and y axes\nax.set_xlabel('Vaccination Number')\nax.set_ylabel('Age')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis for the first subplot\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\nax.set_title('Global AI Investment')\nax.set_xlabel('Year')\nax.set_ylabel('Investment (Billion USD)')\nax.plot([2010, 2012, 2014, 2016, 2018], [1, 3, 5, 7, 9], 'g-')\n\n# Create a figure and axis for the second subplot\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\nax.set_title('AI Adoption Rate')\nax.set_xlabel('Time Since Introduction (Years)')\nax.set_ylabel('Adoption Rate (%)')\nax.plot([0, 2, 4, 6, 8, 10], [0.1, 0.3, 0.5, 0.7, 0.9, 1.0], 'b-')\n\n# Create a figure and axis for the third subplot\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\nax.set_title('AI Sector Distribution')\nax.set_xlabel('Sector')\nax.set_ylabel('Percentage (%)')\nax.pie([20, 30, 50], labels=['Healthcare', 'Finance', 'Retail'], colors=['r', 'g', 'b'])\n\n# Create a figure and axis for the fourth subplot\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\nax.set_title('AI Technology Level')\nax.set_xlabel('Technology Level')\nax.set_ylabel('Adoption Rate (%)')\nax.bar([0, 1, 2, 3], [0.2, 0.4, 0.6, 0.8], color='y')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_2.pdf", "response": "```python\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\n\n# Define the function f(x)\ndef f(x):\n    return x**2 + 2*x + 1\n\n# Create a grid of points\nx = np.linspace(-1, 1, 100)\ny = np.linspace(-1, 1, 100)\nX, Y = np.meshgrid(x, y)\n\n# Compute the function values\nZ = f(X)\n\n# Create a 3D plot\nfig = plt.figure(figsize=(10, 7))\nax = fig.add_subplot(121, projection='3d')\nsurf = ax.plot_surface(X, Y, Z, cmap='viridis')\n\n# Add color bar which maps values to colors\nfig.colorbar(surf, shrink=0.5, aspect=5)\n\n# Set labels\nax.set_xlabel('x')\nax.set_ylabel('y')\nax.set_zlabel('f(x)')\n\n# Create a 3D plot for the solution\nax2 = fig.add_subplot(122, projection='3d')\nsurf2 = ax2.plot_surface(X, Y, Z, cmap='plasma')\n\n# Add color bar which maps values to colors\nfig.colorbar(surf2, shrink=0.5, aspect=5)\n\n# Set labels\nax2.set_xlabel('x')\nax2.set_ylabel('y')\nax2.set_zlabel('solution')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig = plt.figure(figsize=(10.0, 6.0))\nax = fig.add_subplot(111, projection='3d')\n\n# Define the data for the plot\nx = np.linspace(0, 10, 100)\ny = np.linspace(0, 10, 100)\nx, y = np.meshgrid(x, y)\nz = np.sin(np.sqrt(x**2 + y**2))\n\n# Plot the data\nsurf = ax.plot_surface(x, y, z, cmap='viridis')\n\n# Add a color bar which maps values to colors\nfig.colorbar(surf, shrink=0.5, aspect=5)\n\n# Set the title of the plot\nax.set_title('CIFAR10 Spiking ResNet18 T = 6')\n\n# Set the labels for the axes\nax.set_xlabel('t')\nax.set_ylabel('tau')\nax.set_zlabel('accuracy (%)')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nimport numpy as np\n\nfig = plt.figure(figsize=(15, 10))\nax = fig.add_subplot(111, projection='3d')\n\n# Define the data for the plots\nx = np.linspace(-100, 100, 100)\ny = np.linspace(-100, 100, 100)\nx, y = np.meshgrid(x, y)\nz1 = np.sin(np.sqrt(x**2 + y**2))\nz2 = np.cos(np.sqrt(x**2 + y**2))\nz3 = np.tan(np.sqrt(x**2 + y**2))\nz4 = np.exp(-(x**2 + y**2))\n\n# Plot the data\nax.plot_surface(x, y, z1, color='blue')\nax.plot_surface(x, y, z2, color='green')\nax.plot_surface(x, y, z3, color='red')\nax.plot_surface(x, y, z4, color='yellow')\n\n# Set the labels\nax.set_xlabel('m')\nax.set_ylabel('n')\nax.set_zlabel('Freedom')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfig = plt.figure(figsize=(7,7))\nax = fig.add_subplot(111, projection='3d')\n\n# Create a grid of points\nx = np.linspace(0, 1, 10)\ny = np.linspace(0, 1, 10)\nx, y = np.meshgrid(x, y)\nz = np.sin(np.sqrt(x**2 + y**2))\n\n# Plot the surface\nsurf = ax.plot_surface(x, y, z, cmap='viridis')\n\n# Add some targets\ntargets = [(0.5, 0.5, 0.5), (0.8, 0.8, 0.8)]\nfor target in targets:\n    ax.scatter(target[0], target[1], target[2], color='orange')\n\n# Set labels and title\nax.set_xlabel('X Label')\nax.set_ylabel('Y Label')\nax.set_zlabel('Z Label')\nax.set_title('3D Surface Plot with Targets')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig = plt.figure(figsize=(8.0, 8.0))\nax = fig.add_subplot(111, projection='3d')\n\n# Define the data\nx = np.linspace(-4, 4, 100)\ny = np.linspace(-2, 2, 100)\nx, y = np.meshgrid(x, y)\nz = np.sin(np.sqrt(x**2 + y**2))\n\n# Plot the surface\nsurf = ax.plot_surface(x, y, z, cmap='coolwarm', linewidth=0, antialiased=False)\n\n# Add a color bar which maps values to colors\nfig.colorbar(surf, shrink=0.5, aspect=5)\n\n# Set labels\nax.set_xlabel('Bus')\nax.set_ylabel('Time')\nax.set_zlabel('Price')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Create a 3D scatter plot\nax.scatter([1, 2, 3, 4], [1, 2, 3, 4], c='blue')\n\n# Create a 3D bar chart\nx = np.arange(1, 5)\ny = np.arange(1, 5)\nx, y = np.meshgrid(x, y)\nz = np.sin(np.sqrt(x**2 + y**2))\nsurf = ax.plot_surface(x, y, z, cmap='viridis')\n\n# Add a color bar which maps values to colors\nfig.colorbar(surf, shrink=0.5, aspect=5)\n\n# Set labels for the axes\nax.set_xlabel('X Label')\nax.set_ylabel('Y Label')\nax.set_zlabel('Z Label')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig = plt.figure(figsize=(8.0, 6.0))\nax = fig.add_subplot(111, projection='3d')\n\n# Scatter plot for Age vs Income\nx = np.random.rand(20)\ny = np.random.rand(20)\nz = np.random.rand(20)\nax.scatter(x, y, z, c='r', marker='o')\nax.set_xlabel('Age')\nax.set_ylabel('Income')\nax.set_zlabel('Debt')\n\n# Scatter plot for Age vs Debt\nx = np.random.rand(20)\ny = np.random.rand(20)\nz = np.random.rand(20)\nax.scatter(x, y, z, c='b', marker='^')\nax.set_xlabel('Age')\nax.set_ylabel('Debt')\nax.set_zlabel('Income')\n\n# Scatter plot for Income vs Debt\nx = np.random.rand(20)\ny = np.random.rand(20)\nz = np.random.rand(20)\nax.scatter(x, y, z, c='g', marker='s')\nax.set_xlabel('Income')\nax.set_ylabel('Debt')\nax.set_zlabel('Age')\n\n# Set the color of the grid lines\nax.w_xaxis.line.set_color((1.0, 1.0, 1.0, 0.0))\nax.w_yaxis.line.set_color((1.0, 1.0, 1.0, 0.0))\nax.w_zaxis.line.set_color((1.0, 1.0, 1.0, 0.0))\n\n# Set the color of the background\nax.w_xaxis.pane.fill = False\nax.w_yaxis.pane.fill = False\nax.w_zaxis.pane.fill = False\n\n# Set the color of the ticks\nax.w_xaxis.ticks.set_color((1.0, 1.0, 1.0, 0.0))\nax.w_yaxis.ticks.set_color((1.0, 1.0, 1.0, 0.0))\nax.w_zaxis.ticks.set_color((1.0, 1.0, 1.0, 0.0))\n\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the background color of the plot\nax.set_facecolor('lightgrey')\n\n# Set the x-axis and y-axis labels\nax.set_xlabel('Time (s)')\nax.set_ylabel('Depth (m)')\n\n# Set the x-axis and y-axis limits\nax.set_xlim(0, 100)\nax.set_ylim(-50, 50)\n\n# Create a grid\nax.grid(True)\n\n# Create a scatter plot\nx = np.linspace(0, 100, 100)\ny = np.sin(x/10)\nax.plot(x, y, 'r-')\n\n# Create a line plot\nx = np.linspace(0, 100, 100)\ny = np.cos(x/10)\nax.plot(x, y, 'b-')\n\n# Create a bar chart\nx = np.linspace(0, 100, 100)\ny = np.tan(x/10)\nax.plot(x, y, 'g-')\n\n# Create a pie chart\nx = np.linspace(0, 100, 100)\ny = np.exp(x/10)\nax.plot(x, y, 'y-')\n\n# Create a histogram\nx = np.linspace(0, 100, 100)\ny = np.log(x/10)\nax.plot(x, y, 'c-')\n\n# Create a scatter plot with different colors\nx = np.linspace(0, 100, 100)\ny = np.sin(x/10)\nax.plot(x, y, 'm-')\n\n# Create a line plot with different markers\nx = np.linspace(0, 100, 100)\ny = np.cos(x/10)\nax.plot(x, y, 'k-')\n\n# Create a bar chart with different styles\nx = np.linspace(0, 100, 100)\ny = np.tan(x/10)\nax.plot(x, y, 'w-')\n\n# Create a pie chart with different sizes\nx = np.linspace(0, 100, 100)\ny = np.exp(x/10)\nax.plot(x, y, 'o-')\n\n# Create a histogram with different bins\nx = np.linspace(0, 100, 100)\ny = np.log(x/10)\nax.plot(x, y, 'p-')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Set the x-axis limits\nax.set_xlim(-20, 20)\n\n# Set the y-axis limits\nax.set_ylim(0, 12)\n\n# Set the x-axis label\nax.set_xlabel('LR Test')\n\n# Set the y-axis label\nax.set_ylabel('Density')\n\n# Set the title of the plot\nax.set_title('Histogram of LR Test')\n\n# Create a histogram with 50 bins\nx = np.random.normal(loc=0, scale=1, size=1000)\nax.hist(x, bins=50, color='blue', alpha=0.7)\n\n# Create a scatter plot with 100 points\nx = np.random.normal(loc=0, scale=1, size=100)\ny = np.random.normal(loc=0, scale=1, size=100)\nax.scatter(x, y, color='red', alpha=0.5)\n\n# Create a line plot with 100 points\nx = np.linspace(-20, 20, 100)\ny = np.sin(x)\nax.plot(x, y, color='green', linestyle='--')\n\n# Create a bar chart with 10 bars\nx = np.arange(10)\ny = np.random.randint(0, 10, size=10)\nax.bar(x, y, color='orange')\n\n# Create a pie chart with 3 slices\nx = [1, 2, 3]\ny = [10, 20, 30]\nax.pie(y, labels=x, colors=['blue', 'red', 'green'])\n\n# Create a heatmap with 10x10 grid\nx = np.random.rand(10, 10)\nax.imshow(x, cmap='hot', interpolation='nearest')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(7, 5))\n\n# Set the background color of the plot\nax.set_facecolor('lightgrey')\n\n# Create a rectangle for the severity bar\nseverity_bar = plt.Rectangle((0, 0), 1, 1, fc='orange')\nax.add_patch(severity_bar)\n\n# Create a rectangle for the correlation bar\ncorrelation_bar = plt.Rectangle((0, 0), 1, 1, fc='blue')\nax.add_patch(correlation_bar)\n\n# Create a scatter plot for the data points\nx = np.random.randint(150, 400, 20)\ny = np.random.randint(-6, 0, 20)\nax.scatter(x, y, c='green')\n\n# Add labels and title\nax.set_xlabel('Average Tracked ORB Feature Number')\nax.set_ylabel('Log (ATE RMSE)')\nax.set_title('Risk Assessment Model')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(7.0, 5.0))\n\n# Define the data\nx = np.linspace(-3, 0, 100)\ny = np.log(x**2 + 1)\n\n# Plot the data\nax.plot(x, y, 'b-')\n\n# Add a rectangle for the background\nrect = plt.Rectangle((0, 0), 1, 1, color='lightgrey', alpha=0.5)\nax.add_patch(rect)\n\n# Add a text annotation\nax.text(0.5, 0.5, 'Correlation: -0.47', ha='center', va='center', transform=ax.transAxes)\n\n# Set the limits of the axes\nax.set_xlim(-3, 0)\nax.set_ylim(-3, 0)\n\n# Set the labels of the axes\nax.set_xlabel('Log (Depth L1)')\nax.set_ylabel('Log (ATE RMSE)')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the background color of the plot\nax.set_facecolor('lightpink')\n\n# Set the title of the plot\nax.set_title('T-test p-value = 0.0000', fontsize=14)\n\n# Set the x-axis label\nax.set_xlabel('Avg. Top-5 Persistence of 1D')\n\n# Set the y-axis label\nax.set_ylabel('Avg. Top-5 Persistence of 2D')\n\n# Set the x-axis limits\nax.set_xlim(0, 1)\n\n# Set the y-axis limits\nax.set_ylim(0, 1)\n\n# Draw a rectangle\nrect = plt.Rectangle((0.3, 0.3), 0.4, 0.4, color='red')\nax.add_patch(rect)\n\n# Draw a circle\ncircle = plt.Circle((0.7, 0.7), 0.2, color='blue')\nax.add_patch(circle)\n\n# Draw a line\nline = plt.Line2D([0.1, 0.9], [0.1, 0.9], color='green')\nax.add_line(line)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 4.0))\n\n# Set the title of the graph\nax.set_title('Comparison of APO & APO-APEs (GPT-3 5-Turbo)')\n\n# Set the x-axis label\nax.set_xlabel('Tasks')\n\n# Set the y-axis label\nax.set_ylabel('Scores')\n\n# Define the tasks\ntasks = ['snarks', 'navigate', 'question_selection', 'object_counting']\n\n# Define the scores\nscores = [0.75, 0.85, 0.9, 0.8]\n\n# Define the colors for each task\ncolors = ['blue', 'green', 'red', 'purple']\n\n# Plot the scores\nfor i, score in enumerate(scores):\n    ax.plot([i, i], [0, score], color=colors[i])\n\n# Add the task names as labels\nfor i, task in enumerate(tasks):\n    ax.text(i, -0.1, task, ha='center', va='top')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Set the title of the plot\nax.set_title('summarization_xsum:temperature=0.3,device=cuda')\n\n# Create a color bar\ncbar = fig.colorbar(ax)\n\n# Set the x-axis label\nax.set_xlabel('norm size')\n\n# Set the y-axis label\nax.set_ylabel('xsum')\n\n# Set the x-axis ticks\nax.set_xticks([0.0, 0.2, 0.4, 0.6, 0.8, 1.0, 1.2, 1.4])\n\n# Set the y-axis ticks\nax.set_yticks([0, 20, 40, 60, 80, 100, 120])\n\n# Set the color map\ncmap = 'coolwarm'\n\n# Create a scatter plot\nscatter = ax.scatter(np.random.rand(10), np.random.rand(10), c=np.random.rand(10), cmap=cmap)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 4.0))\n\n# Create a pie chart\nax.pie([23.7, 73.3, 3.0], labels=[\"Same\", \"Incomparable\", \"Different\"], autopct='%1.1f%%', startangle=90)\n\n# Set the title of the pie chart\nax.set_title('Pie Chart')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_16.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(7, 5))\n\n# Set the title of the plot\nax.set_title('Algorithms')\n\n# Create a scatter plot for SEAC\nax.scatter([1, 2, 3], [4, 5, 6], color='green', label='SEAC')\n\n# Create a bar chart for SAC(20Hz)\nax.bar([1, 2, 3], [7, 8, 9], color='red', label='SAC(20Hz)')\n\n# Add a legend to the plot\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_17.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the first graph\nx = ['CodeBERT', 'ChatGPT-3.5', 'ChatGPT-4.0', 'CodeAgent']\ny = [63.64, 80.08, 84.27, 90.11]\ncolors = ['blue', 'cyan', 'cyan', 'blue']\n\n# Data for the second graph\nx2 = ['CodeBERT', 'ChatGPT-3.5', 'ChatGPT-4.0', 'CodeAgent']\ny2 = [75.00, 87.20, 89.12, 93.89]\ncolors2 = ['red', 'red', 'red', 'red']\n\nfig, ax = plt.subplots(1, 2, figsize=(10, 4))\n\n# Plotting the first graph\nax[0].bar(x, y, color=colors)\nax[0].set_title('Average Recall Scores by Method')\nax[0].set_xlabel('Method')\nax[0].set_ylabel('Scores')\n\n# Plotting the second graph\nax[1].plot(x2, y2, color='red')\nax[1].set_title('Average F1 Scores by Method')\nax[1].set_xlabel('Method')\nax[1].set_ylabel('Scores')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_18.pdf", "response": "import matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Set the x-axis limits\nax.set_xlim(4, 32)\n\n# Set the y-axis limits\nax.set_ylim(80, 96)\n\n# Set the x-axis label\nax.set_xlabel('Few-Shot K')\n\n# Set the y-axis label\nax.set_ylabel('Micro F1')\n\n# Plot the data\nax.plot([4, 8, 12, 16, 20, 24, 28, 32], [85, 87, 89, 91, 93, 95, 97, 99], 'b-')\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((4, 80), 28, 16, color='lightblue', alpha=0.5)\nax.add_patch(rect)\n\n# Add a text box to the plot\ntextstr = '\\n'.join((\n    r'Trained w Few-Shot Ex',\n    r'Def Deduc+Ex Gen'))\nprops = dict(boxstyle='round,pad=0.5', facecolor='wheat', alpha=0.5)\nax.text(4, 80, textstr, transform=ax.transAxes, fontsize=10,\n        verticalalignment='top', bbox=props)\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/CB_19.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(7.0, 7.0))\n\n# Set the x-axis and y-axis limits\nax.set_xlim(0, 50)\nax.set_ylim(50, 85)\n\n# Set the x-axis and y-axis labels\nax.set_xlabel('Vehicle Parameter Size (units)')\nax.set_ylabel('Efficiency (%)')\n\n# Plot the data\nax.plot([10, 20, 30, 40, 50], [60, 65, 70, 75, 80], 'ro-')\nax.plot([10, 20, 30, 40, 50], [60, 65, 70, 75, 80], 'bo-')\nax.plot([10, 20, 30, 40, 50], [60, 65, 70, 75, 80], 'go-')\n\n# Add a legend\nax.legend(['Car A', 'Car B', 'Car C'])\n\n# Add a title\nax.set_title('Car Efficiency vs Vehicle Parameter Size')\n\n# Add a watermark\nax.text(0.5, 0.5, '80 Truck A', transform=ax.transAxes, color='red', fontsize=20, ha='center', va='center')\nax.text(0.5, 0.5, 'Car E', transform=ax.transAxes, color='blue', fontsize=20, ha='center', va='center')\n\n# Add a logo\nax.text(0.5, 0.5, 'Cars', transform=ax.transAxes, color='red', fontsize=10, ha='center', va='center')\nax.text(0.5, 0.5, 'Trucks', transform=ax.transAxes, color='blue', fontsize=10, ha='center', va='center')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nmodels = ['GPT-2', 'Llama 2 7B', 'Llama 2 70B', 'Mixtral 8x7B', 'GPT-3.5', 'GPT-4']\nsuccess_rates = [16, 12, 20, 26, 20, 12]\ntrends = ['Simple Trend', 'Simple', 'Complex', 'Code']\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Plot the success rates\nax.plot(models, success_rates, marker='o', linestyle='-', color='purple')\n\n# Set the title and labels\nax.set_title('Encoding/Decoding Schelling Points by Model')\nax.set_xlabel('Model')\nax.set_ylabel('Success Rate (%)')\n\n# Add colored rectangles for each model\nfor i, model in enumerate(models):\n    ax.add_patch(plt.Rectangle((i, 0), 1, success_rates[i], color=plt.cm.RdYlGn(i/len(models))))\n\n# Add colored rectangles for each trend\nfor i, trend in enumerate(trends):\n    ax.add_patch(plt.Rectangle((0, 0), len(models), 1, color=plt.cm.PuRd(i/len(trends))))\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_20.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Calibration Curve')\n\n# Set the x-axis label\nax.set_xlabel('Redicted Probability')\n\n# Set the y-axis label\nax.set_ylabel('Fraction of Positives')\n\n# Set the x-axis limits\nax.set_xlim(0, 1)\n\n# Set the y-axis limits\nax.set_ylim(0, 1)\n\n# Create a scatter plot\nax.scatter(np.random.rand(50), np.random.rand(50), color='orange')\n\n# Create a line plot\nax.plot(np.linspace(0, 1, 100), np.linspace(0, 1, 100), color='black')\n\n# Add a rectangle for subgroups\nax.add_patch(plt.Rectangle((0.2, 0.8), 0.6, 0.2, color='pink'))\n\n# Add a text box for calibration curve\nax.text(0.1, 0.9, 'Calibration curve', fontsize=12, color='black')\n\n# Add a text box for subgroups\nax.text(0.3, 0.85, 'Subgroups', fontsize=12, color='black')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_21.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 4.0))\n\n# Set the background color of the plot\nax.set_facecolor('lightgrey')\n\n# Create a circle for the logo\ncircle = plt.Circle((3, 2), 1, color='blue')\nax.add_artist(circle)\n\n# Create a rectangle for the model name\nrect = plt.Rectangle((2, 1), 2, 1, color='green')\nax.add_artist(rect)\n\n# Create a rectangle for the model description\nrect = plt.Rectangle((2, 0), 2, 1, color='orange')\nax.add_artist(rect)\n\n# Create a rectangle for the model price\nrect = plt.Rectangle((2, -1), 2, 1, color='yellow')\nax.add_artist(rect)\n\n# Create a rectangle for the model rating\nrect = plt.Rectangle((2, -2), 2, 1, color='red')\nax.add_artist(rect)\n\n# Create a rectangle for the model reviews\nrect = plt.Rectangle((2, -3), 2, 1, color='purple')\nax.add_artist(rect)\n\n# Create a rectangle for the model specifications\nrect = plt.Rectangle((2, -4), 2, 1, color='cyan')\nax.add_artist(rect)\n\n# Create a rectangle for the model images\nrect = plt.Rectangle((2, -5), 2, 1, color='magenta')\nax.add_artist(rect)\n\n# Create a rectangle for the model videos\nrect = plt.Rectangle((2, -6), 2, 1, color='brown')\nax.add_artist(rect)\n\n# Create a rectangle for the model testimonials\nrect = plt.Rectangle((2, -7), 2, 1, color='pink')\nax.add_artist(rect)\n\n# Create a rectangle for the model comparisons\nrect = plt.Rectangle((2, -8), 2, 1, color='lime')\nax.add_artist(rect)\n\n# Create a rectangle for the model recommendations\nrect = plt.Rectangle((2, -9), 2, 1, color='silver')\nax.add_artist(rect)\n\n# Create a rectangle for the model support\nrect = plt.Rectangle((2, -10), 2, 1, color='gold')\nax.add_artist(rect)\n\n# Create a rectangle for the model warranty\nrect = plt.Rectangle((2, -11), 2, 1, color='silver')\nax.add_artist(rect)\n\n# Create a rectangle for the model return policy\nrect = plt.Rectangle((2, -12), 2, 1, color='gold')\nax.add_artist(rect)\n\n# Create a rectangle for the model shipping options\nrect = plt.Rectangle((2, -13), 2, 1, color='silver')\nax.add_artist(rect)\n\n# Create a rectangle for the model payment options\nrect = plt.Rectangle((2, -14), 2, 1, color='gold')\nax.add_artist(rect)\n\n# Create a rectangle for the model delivery time\nrect = plt.Rectangle((2, -15), 2, 1, color='silver')\nax.add_artist(rect)\n\n# Create a rectangle for the model customer service\nrect = plt.Rectangle((2, -16), 2, 1, color='gold')\nax.add_artist(rect)\n\n# Create a rectangle for the model product comparison\nrect = plt.Rectangle((2, -17), 2, 1, color='silver')\nax.add_artist(rect)\n\n# Create a rectangle for the model product recommendations\nrect = plt.Rectangle((2, -18), 2, 1, color='gold')\nax.add_artist(rect)\n\n# Create a rectangle for the model product support\nrect = plt.Rectangle((2, -19), 2, 1, color='silver')\nax.add_artist(rect)\n\n# Create a rectangle for the model product warranty\nrect = plt.Rectangle((2, -20), 2, 1, color='gold')\nax.add_artist(rect)\n\n# Create a rectangle for the model product return policy\nrect = plt.Rectangle((2, -21), 2, 1, color='silver')\nax.add_artist(rect)\n\n# Create a rectangle for the model product shipping options\nrect = plt.Rectangle((2, -22), 2, 1, color='gold')\nax.add_artist(rect)\n\n# Create a rectangle for the model product payment options\nrect = plt.Rectangle((2, -23), 2, 1, color='silver')\nax.add_artist(rect)\n\n# Create a rectangle for the model product delivery time\nrect = plt.Rectangle((2, -24), 2, 1, color='gold')\nax.add_artist(rect)\n\n# Create a rectangle for the model product customer service\nrect = plt.Rectangle((2, -25), 2, 1, color='silver')\nax.add_artist(rect)\n\n# Create a rectangle for the model product product comparison\nrect = plt.Rectangle((2, -26), 2, 1, color='gold')\nax.add_artist(rect)\n\n# Create a rectangle for the model product product recommendations\nrect = plt.Rectangle((2, -27), 2, 1, color='silver')\nax.add_artist(rect)\n\n# Create a rectangle for the model product product support\nrect = plt.Rectangle((2, -28), 2, 1, color='gold')\nax.add_artist(rect)\n\n# Create a rectangle for the model product product warranty\nrect = plt.Rectangle((2, -29), 2, 1, color='silver')\nax.add_artist(rect)\n\n# Create a rectangle for the model product product return policy\nrect = plt.Rectangle((2, -30), 2, 1, color='gold')\nax.add_artist(rect)\n\n# Create a rectangle for the model product product shipping options\nrect = plt.Rectangle((2, -31), 2, 1, color='silver')\nax.add_artist(rect)\n\n# Create a rectangle for the model product product payment options\nrect = plt.Rectangle((2, -32), 2, 1, color='gold')\nax.add_artist(rect)\n\n# Create a rectangle for the model product product delivery time\nrect = plt.Rectangle((2, -33), 2, 1, color='silver')\nax.add_artist(rect)\n\n# Create a rectangle for the model product product customer service\nrect = plt.Rectangle((2, -34), 2, 1, color='gold')\nax.add_artist(rect)\n\n# Create a rectangle for the model product product product comparison\nrect = plt.Rectangle((2, -35), 2, 1, color='silver')\nax.add_artist(rect)\n\n# Create a rectangle for the model product product product recommendations\nrect = plt.Rectangle((2, -36), 2, 1, color='gold')\nax.add_artist(rect)\n\n# Create a rectangle for the model product product product support\nrect = plt.Rectangle((2, -37), 2, 1, color='silver')\nax.add_artist(rect)\n\n# Create a rectangle for the model product product product warranty\nrect = plt.Rectangle((2, -38), 2, 1, color='gold')\nax.add_artist(rect)\n\n# Create a rectangle for the model product product product return policy\nrect = plt.Rectangle((2, -39), 2, 1, color='silver')\nax.add_artist(rect)\n\n# Create a rectangle for the model product product product shipping options\nrect = plt.Rectangle((2, -40), 2, 1, color='gold')\nax.add_artist(rect)\n\n# Create a rectangle for the model product product product payment options\nrect = plt.Rectangle((2, -41), 2, 1, color='silver')\nax.add_artist(rect)\n\n# Create a rectangle for the model product product product delivery time\nrect = plt.Rectangle((2, -42), 2, 1, color='gold')\nax.add_artist(rect)\n\n# Create a rectangle for the model product product product customer service\nrect = plt.Rectangle((2, -43), 2, 1, color='silver')\nax.add_artist(rect)\n\n# Create a rectangle for the model product product product product comparison\nrect = plt.Rectangle((2, -44), 2, 1, color='gold')\nax.add_artist(rect)\n\n# Create a rectangle for the model product product product product recommendations\nrect = plt.Rectangle((2, -45), 2, 1, color='silver')\nax.add_artist(rect)\n\n# Create a rectangle for the model product product product product support\nrect = plt.Rectangle((2, -46), 2, 1, color='gold')\nax.add_artist(rect)\n\n# Create a rectangle for the model product product product product warranty\nrect = plt.Rectangle((2, -47), 2, 1, color='silver')\nax.add_artist(rect)\n\n# Create a rectangle for the model product product product product return policy\nrect = plt.Rectangle((2, -48), 2, 1, color='gold')\nax.add_artist(rect)\n\n# Create a rectangle for the model product product product product shipping options\nrect = plt.Rectangle((2, -49), 2, 1, color='silver')\nax.add_artist(rect)\n\n# Create a rectangle for the model product product product product payment options\nrect = plt.Rectangle((2, -50), 2, 1, color='gold')\nax.add_artist(rect)\n\n# Create a rectangle for the model product product product product delivery time\nrect = plt.Rectangle((2, -51), 2, 1, color='silver')\nax.add_artist(rect)\n\n# Create a rectangle for the model product product product product customer service\nrect = plt.Rectangle((2, -52), 2, 1, color='gold')\nax.add_artist(rect)\n\n# Create a rectangle for the model product product product product product comparison\nrect = plt.Rectangle((2, -53), 2, 1, color='silver')\nax.add_artist(rect)\n\n# Create a rectangle for the model product product product product product recommendations\nrect = plt.Rectangle((2, -54), 2, 1, color='gold')\nax.add_artist(rect)\n\n# Create a rectangle for the model product product product product product support\nrect = plt.Rectangle((2, -55), 2, 1, color='silver')\nax.add_artist(rect)\n\n# Create a rectangle for the model product product product product product warranty\nrect = plt.Rectangle((2, -56), 2, 1, color='gold')\nax.add_artist(rect)\n\n# Create a rectangle for the model product product product product product return policy\nrect = plt.Rectangle((2, -57), 2, 1, color='silver')\nax.add_artist(rect)\n\n# Create a rectangle for the model product product product product product shipping options\nrect = plt.Rectangle((2, -58), 2, 1, color='gold')\nax.add_artist(rect)\n\n# Create a rectangle for the model product product product product product payment options\nrect = plt.Rectangle((2, -59), 2, 1, color='silver')\nax.add_artist(rect)\n\n# Create a rectangle for the model product product product product product delivery time\nrect = plt.Rectangle((2, -60), 2, 1, color='gold')\nax.add_artist(rect)\n\n# Create a rectangle for the model product product product product product customer service\nrect = plt.Rectangle((2, -61), 2, 1, color='silver')\nax.add_artist(rect)\n\n# Create a rectangle for the model product product product product product product comparison\nrect = plt.Rectangle((2, -62), 2, 1, color='gold')\nax.add_artist(rect)\n\n# Create a rectangle for the model product product product product product product recommendations\nrect = plt.Rectangle((2, -63), 2, 1, color='silver')\nax.add_artist(rect)\n\n# Create a rectangle for the model product product product product product product support\nrect = plt.Rectangle((2, -64), 2, 1, color='gold')\nax.add_artist(rect)\n\n# Create a rectangle for the model product product product product product product warranty\nrect = plt.Rectangle((2, -65), 2, 1, color='silver')\nax.add_artist(rect)\n\n# Create a rectangle for the model product product product product product product return policy\nrect = plt.Rectangle((2, -66), 2, 1, color='gold')\nax.add_artist(rect)\n\n# Create a rectangle for the model product product product product product product shipping options\nrect = plt.Rectangle((2, -67), 2, 1, color='silver')\nax.add_artist(rect)\n\n# Create a rectangle for the model product product product product product product payment options\nrect = plt.Rectangle((2, -68), 2, 1, color='gold')\nax.add_artist(rect)\n\n# Create a rectangle for the model product product product product product product delivery time\nrect = plt.Rectangle((2, -69), 2, 1, color='silver')\nax.add_artist(rect)\n\n# Create a rectangle for the model product product product product product product customer service\nrect = plt.Rectangle((2, -70), 2, 1, color='gold')\nax.add_artist(rect)\n\n# Create a rectangle for the model product product product product product product product comparison\nrect = plt.Rectangle((2, -71), 2, 1, color='silver')\nax.add_artist(rect)\n\n# Create a rectangle for the model product product product product product product product recommendations\nrect = plt.Rectangle((2, -72), 2, 1, color='gold')\nax.add_artist(rect)\n\n# Create a rectangle for the model product product product product product product product support\nrect = plt.Rectangle((2, -73), 2, 1, color='silver')\nax.add_artist(rect)\n\n# Create a rectangle for the model product product product product product product product warranty\nrect = plt.Rectangle((2, -74), 2, 1, color='gold')\nax.add_artist(rect)\n\n# Create a rectangle for the model product product product product product product product return policy\nrect = plt.Rectangle((2, -75), 2, 1, color='silver')\nax.add_artist(rect)\n\n# Create a rectangle for the model product product product product product product product shipping options\nrect = plt.Rectangle((2, -76), 2, 1, color='gold')\nax.add_artist(rect)\n\n# Create a rectangle for the model product product product product product product product payment options\nrect = plt.Rectangle((2, -77), 2, 1, color='silver')\nax.add_artist(rect)\n\n# Create a rectangle for the model product product product product product product product delivery time\nrect = plt.Rectangle((2, -78), 2, 1, color='gold')\nax.add_artist(rect)\n\n# Create a rectangle for the model product product product product product product product customer service\nrect = plt.Rectangle((2, -79), 2, 1, color='silver')\nax.add_artist(rect)\n\n# Create a rectangle for the model product product product product product product product product comparison\nrect = plt.Rectangle((2, -80), 2, 1, color='gold')\nax.add_artist(rect)\n\n# Create a rectangle for the model product product product product product product product product recommendations\nrect = plt.Rectangle((2, -81), 2, 1, color='silver')\nax.add_artist(rect)\n\n# Create a rectangle for the model product product product product product product product product support\nrect = plt.Rectangle((2, -82), 2, 1, color='gold')\nax.add_artist(rect)\n\n# Create a rectangle for the model product product product product product product product product warranty\nrect = plt.Rectangle((2, -83), 2, 1, color='silver')\nax.add_artist(rect)\n\n# Create a rectangle for the model product product product product product product product product return policy\nrect = plt.Rectangle((2, -84), 2, 1, color='gold')\nax.add_artist(rect)\n\n# Create a rectangle for the model product product product product product product product product shipping options\nrect = plt.Rectangle((2, -85), 2, 1, color='silver')\nax.add_artist(rect)\n\n# Create a rectangle for the model product product product product product product product product payment options\nrect = plt.Rectangle((2, -86), 2, 1, color='gold')\nax.add_artist(rect)\n\n# Create a rectangle for the model product product product product product product product product delivery time\nrect = plt.Rectangle((2, -87), 2, 1, color='silver')\nax.add_artist(rect)\n\n# Create a rectangle for the model product product product product product product product product customer service\nrect = plt.Rectangle((2, -88), 2, 1, color='gold')\nax.add_artist(rect)\n\n# Create a rectangle for the model product product product product product product product product product comparison\nrect = plt.Rectangle((2, -89), 2, 1, color='silver')\nax.add_artist(rect)\n\n# Create a rectangle for the model product product product product product product product product product recommendations\nrect = plt.Rectangle((2, -90), 2, 1, color='gold')\nax.add_artist(rect)\n\n# Create a rectangle for the model product product product product product product product product product support\nrect = plt.Rectangle((2, -91), 2, 1, color='silver')\nax.add_artist(rect)\n\n# Create a rectangle for the model product product product product product product product product product warranty\nrect = plt.Rectangle((2, -92), 2, 1, color='gold')\nax.add_artist(rect)\n\n# Create a rectangle for the model product product product product product product product product product return policy\nrect = plt.Rectangle((2, -93), 2, 1, color='silver')\nax.add_artist(rect)\n\n# Create a rectangle for the model product product product product product product product product product shipping options\nrect = plt.Rectangle((2, -94), 2, 1, color='gold')\nax.add_artist(rect)\n\n# Create a rectangle for the model product product product product product product product product product payment options\nrect = plt.Rectangle((2, -95), 2, 1, color='silver')\nax.add_artist(rect)\n\n# Create a rectangle for the model product product product product product product product product product delivery time\nrect = plt.Rectangle((2, -96), 2, 1, color='gold')\nax.add_artist(rect)\n\n# Create a rectangle for the model product product product product product product product product product customer service\nrect = plt.Rectangle((2, -97), 2, 1, color='silver')\nax.add_artist(rect)\n\n# Create a rectangle for the model product product product product product product product product product product comparison\nrect = plt.Rectangle((2, -98), 2, 1, color='gold')\nax.add_artist(rect)\n\n# Create a rectangle for the model product product product product product product product product product product recommendations\nrect = plt.Rectangle((2, -99), 2, 1, color='silver')\nax.add_artist(rect)\n\n# Create a rectangle for the model product product product product"}
{"file": "dataset/ori_500/CB_22.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the plots\nx = np.arange(1340, 1461)\ny = np.random.rand(len(x)) * 0.025\nz = np.random.rand(len(x)) * 0.025\na = np.random.rand(len(x)) * 0.025\nb = np.random.rand(len(x)) * 0.025\nc = np.random.rand(len(x)) * 0.025\nd = np.random.rand(len(x)) * 0.025\ne = np.random.rand(len(x)) * 0.025\nf = np.random.rand(len(x)) * 0.025\ng = np.random.rand(len(x)) * 0.025\nh = np.random.rand(len(x)) * 0.025\ni = np.random.rand(len(x)) * 0.025\nj = np.random.rand(len(x)) * 0.025\nk = np.random.rand(len(x)) * 0.025\nl = np.random.rand(len(x)) * 0.025\nm = np.random.rand(len(x)) * 0.025\nn = np.random.rand(len(x)) * 0.025\no = np.random.rand(len(x)) * 0.025\np = np.random.rand(len(x)) * 0.025\nq = np.random.rand(len(x)) * 0.025\nr = np.random.rand(len(x)) * 0.025\ns = np.random.rand(len(x)) * 0.025\nt = np.random.rand(len(x)) * 0.025\nu = np.random.rand(len(x)) * 0.025\nv = np.random.rand(len(x)) * 0.025\nw = np.random.rand(len(x)) * 0.025\nx = np.random.rand(len(x)) * 0.025\ny = np.random.rand(len(x)) * 0.025\nz = np.random.rand(len(x)) * 0.025\na = np.random.rand(len(x)) * 0.025\nb = np.random.rand(len(x)) * 0.025\nc = np.random.rand(len(x)) * 0.025\nd = np.random.rand(len(x)) * 0.025\ne = np.random.rand(len(x)) * 0.025\nf = np.random.rand(len(x)) * 0.025\ng = np.random.rand(len(x)) * 0.025\nh = np.random.rand(len(x)) * 0.025\ni = np.random.rand(len(x)) * 0.025\nj = np.random.rand(len(x)) * 0.025\nk = np.random.rand(len(x)) * 0.025\nl = np.random.rand(len(x)) * 0.025\nm = np.random.rand(len(x)) * 0.025\nn = np.random.rand(len(x)) * 0.025\no = np.random.rand(len(x)) * 0.025\np = np.random.rand(len(x)) * 0.025\nq = np.random.rand(len(x)) * 0.025\nr = np.random.rand(len(x)) * 0.025\ns = np.random.rand(len(x)) * 0.025\nt = np.random.rand(len(x)) * 0.025\nu = np.random.rand(len(x)) * 0.025\nv = np.random.rand(len(x)) * 0.025\nw = np.random.rand(len(x)) * 0.025\nx = np.random.rand(len(x)) * 0.025\ny = np.random.rand(len(x)) * 0.025\nz = np.random.rand(len(x)) * 0.025\na = np.random.rand(len(x)) * 0.025\nb = np.random.rand(len(x)) * 0.025\nc = np.random.rand(len(x)) * 0.025\nd = np.random.rand(len(x)) * 0.025\ne = np.random.rand(len(x)) * 0.025\nf = np.random.rand(len(x)) * 0.025\ng = np.random.rand(len(x)) * 0.025\nh = np.random.rand(len(x)) * 0.025\ni = np.random.rand(len(x)) * 0.025\nj = np.random.rand(len(x)) * 0.025\nk = np.random.rand(len(x)) * 0.025\nl = np.random.rand(len(x)) * 0.025\nm = np.random.rand(len(x)) * 0.025\nn = np.random.rand(len(x)) * 0.025\no = np.random.rand(len(x)) * 0.025\np = np.random.rand(len(x)) * 0.025\nq = np.random.rand(len(x)) * 0.025\nr = np.random.rand(len(x)) * 0.025\ns = np.random.rand(len(x)) * 0.025\nt = np.random.rand(len(x)) * 0.025\nu = np.random.rand(len(x)) * 0.025\nv = np.random.rand(len(x)) * 0.025\nw = np.random.rand(len(x)) * 0.025\nx = np.random.rand(len(x)) * 0.025\ny = np.random.rand(len(x)) * 0.025\nz = np.random.rand(len(x)) * 0.025\na = np.random.rand(len(x)) * 0.025\nb = np.random.rand(len(x)) * 0.025\nc = np.random.rand(len(x)) * 0.025\nd = np.random.rand(len(x)) * 0.025\ne = np.random.rand(len(x)) * 0.025\nf = np.random.rand(len(x)) * 0.025\ng = np.random.rand(len(x)) * 0.025\nh = np.random.rand(len(x)) * 0.025\ni = np.random.rand(len(x)) * 0.025\nj = np.random.rand(len(x)) * 0.025\nk = np.random.rand(len(x)) * 0.025\nl = np.random.rand(len(x)) * 0.025\nm = np.random.rand(len(x)) * 0.025\nn = np.random.rand(len(x)) * 0.025\no = np.random.rand(len(x)) * 0.025\np = np.random.rand(len(x)) * 0.025\nq = np.random.rand(len(x)) * 0.025\nr = np.random.rand(len(x)) * 0.025\ns = np.random.rand(len(x)) * 0.025\nt = np.random.rand(len(x)) * 0.025\nu = np.random.rand(len(x)) * 0.025\nv = np.random.rand(len(x)) * 0.025\nw = np.random.rand(len(x)) * 0.025\nx = np.random.rand(len(x)) * 0.025\ny = np.random.rand(len(x)) * 0.025\nz = np.random.rand(len(x)) * 0.025\na = np.random.rand(len(x)) * 0.025\nb = np.random.rand(len(x)) * 0.025\nc = np.random.rand(len(x)) * 0.025\nd = np.random.rand(len(x)) * 0.025\ne = np.random.rand(len(x)) * 0.025\nf = np.random.rand(len(x)) * 0.025\ng = np.random.rand(len(x)) * 0.025\nh = np.random.rand(len(x)) * 0.025\ni = np.random.rand(len(x)) * 0.025\nj = np.random.rand(len(x)) * 0.025\nk = np.random.rand(len(x)) * 0.025\nl = np.random.rand(len(x)) * 0.025\nm = np.random.rand(len(x)) * 0.025\nn = np.random.rand(len(x)) * 0.025\no = np.random.rand(len(x)) * 0.025\np = np.random.rand(len(x)) * 0.025\nq = np.random.rand(len(x)) * 0.025\nr = np.random.rand(len(x)) * 0.025\ns = np.random.rand(len(x)) * 0.025\nt = np.random.rand(len(x)) * 0.025\nu = np.random.rand(len(x)) * 0.025\nv = np.random.rand(len(x)) * 0.025\nw = np.random.rand(len(x)) * 0.025\nx = np.random.rand(len(x)) * 0.025\ny = np.random.rand(len(x)) * 0.025\nz = np.random.rand(len(x)) * 0.025\na = np.random.rand(len(x)) * 0.025\nb = np.random.rand(len(x)) * 0.025\nc = np.random.rand(len(x)) * 0.025\nd = np.random.rand(len(x)) * 0.025\ne = np.random.rand(len(x)) * 0.025\nf = np.random.rand(len(x)) * 0.025\ng = np.random.rand(len(x)) * 0.025\nh = np.random.rand(len(x)) * 0.025\ni = np.random.rand(len(x)) * 0.025\nj = np.random.rand(len(x)) * 0.025\nk = np.random.rand(len(x)) * 0.025\nl = np.random.rand(len(x)) * 0.025\nm = np.random.rand(len(x)) * 0.025\nn = np.random.rand(len(x)) * 0.025\no = np.random.rand(len(x)) * 0.025\np = np.random.rand(len(x)) * 0.025\nq = np.random.rand(len(x)) * 0.025\nr = np.random.rand(len(x)) * 0.025\ns = np.random.rand(len(x)) * 0.025\nt = np.random.rand(len(x)) * 0.025\nu = np.random.rand(len(x)) * 0.025\nv = np.random.rand(len(x)) * 0.025\nw = np.random.rand(len(x)) * 0.025\nx = np.random.rand(len(x)) * 0.025\ny = np.random.rand(len(x)) * 0.025\nz = np.random.rand(len(x)) * 0.025\na = np.random.rand(len(x)) * 0.025\nb = np.random.rand(len(x)) * 0.025\nc = np.random.rand(len(x)) * 0.025\nd = np.random.rand(len(x)) * 0.025\ne = np.random.rand(len(x)) * 0.025\nf = np.random.rand(len(x)) * 0.025\ng = np.random.rand(len(x)) * 0.025\nh = np.random.rand(len(x)) * 0.025\ni = np.random.rand(len(x)) * 0.025\nj = np.random.rand(len(x)) * 0.025\nk = np.random.rand(len(x)) * 0.025\nl = np.random.rand(len(x)) * 0.025\nm = np.random.rand(len(x)) * 0.025\nn = np.random.rand(len(x)) * 0.025\no = np.random.rand(len(x)) * 0.025\np = np.random.rand(len(x)) * 0.025\nq = np.random.rand(len(x)) * 0.025\nr = np.random.rand(len(x)) * 0.025\ns = np.random.rand(len(x)) * 0.025\nt = np.random.rand(len(x)) * 0.025\nu = np.random.rand(len(x)) * 0.025\nv = np.random.rand(len(x)) * 0.025\nw = np.random.rand(len(x)) * 0.025\nx = np.random.rand(len(x)) * 0.025\ny = np.random.rand(len(x)) * 0.025\nz = np.random.rand(len(x)) * 0.025\na = np.random.rand(len(x)) * 0.025\nb = np.random.rand(len(x)) * 0.025\nc = np.random.rand(len(x)) * 0.025\nd = np.random.rand(len(x)) * 0.025\ne = np.random.rand(len(x)) * 0.025\nf = np.random.rand(len(x)) * 0.025\ng = np.random.rand(len(x)) * 0.025\nh = np.random.rand(len(x)) * 0.025\ni = np.random.rand(len(x)) * 0.025\nj = np.random.rand(len(x)) * 0.025\nk = np.random.rand(len(x)) * 0.025\nl = np.random.rand(len(x)) * 0.025\nm = np.random.rand(len(x)) * 0.025\nn = np.random.rand(len(x)) * 0.025\no = np.random.rand(len(x)) * 0.025\np = np.random.rand(len(x)) * 0.025\nq = np.random.rand(len(x)) * 0.025\nr = np.random.rand(len(x)) * 0.025\ns = np.random.rand(len(x)) * 0.025\nt = np.random.rand(len(x)) * 0.025\nu = np.random.rand(len(x)) * 0.025\nv = np.random.rand(len(x)) * 0.025\nw = np.random.rand(len(x)) * 0.025\nx = np.random.rand(len(x)) * 0.025\ny = np.random.rand(len(x)) * 0.025\nz = np.random.rand(len(x)) * 0.025\na = np.random.rand(len(x)) * 0.025\nb = np.random.rand(len(x)) * 0.025\nc = np.random.rand(len(x)) * 0.025\nd = np.random.rand(len(x)) * 0.025\ne = np.random.rand(len(x)) * 0.025\nf = np.random.rand(len(x)) * 0.025\ng = np.random.rand(len(x)) * 0.025\nh = np.random.rand(len(x)) * 0.025\ni = np.random.rand(len(x)) * 0.025\nj = np.random.rand(len(x)) * 0.025\nk = np.random.rand(len(x)) * 0.025\nl = np.random.rand(len(x)) * 0.025\nm = np.random.rand(len(x)) * 0.025\nn = np.random.rand(len(x)) * 0.025\no = np.random.rand(len(x)) * 0.025\np = np.random.rand(len(x)) * 0.025\nq = np.random.rand(len(x)) * 0.025\nr = np.random.rand(len(x)) * 0.025\ns = np.random.rand(len(x)) * 0.025\nt = np.random.rand(len(x)) * 0.025\nu = np.random.rand(len(x)) * 0.025\nv = np.random.rand(len(x)) * 0.025\nw = np.random.rand(len(x)) * 0.025\nx = np.random.rand(len(x)) * 0.025\ny = np.random.rand(len(x)) * 0.025\nz = np.random.rand(len(x)) * 0.025\na = np.random.rand(len(x)) * 0.025\nb = np.random.rand(len(x)) * 0.025\nc = np.random.rand(len(x)) * 0.025\nd = np.random.rand(len(x)) * 0.025\ne = np.random.rand(len(x)) * 0.025\nf = np.random.rand(len(x)) * 0.025\ng = np.random.rand(len(x)) * 0.025\nh = np.random.rand(len(x)) * 0.025\ni = np.random.rand(len(x)) * 0.025\nj = np.random.rand(len(x)) * 0.025\nk = np.random.rand(len(x)) * 0.025\nl = np.random.rand(len(x)) * 0.025\nm = np.random.rand(len(x)) * 0.025\nn = np.random.rand(len(x)) * 0.025\no = np.random.rand(len(x)) * 0.025\np = np.random.rand(len(x)) * 0.025\nq = np.random.rand(len(x)) * 0.025\nr = np.random.rand(len(x)) * 0."}
{"file": "dataset/ori_500/CB_23.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ntrainable_sizes = [0, 50, 100, 150]\nrmse_values = [1.30, 1.27, 1.28, 1.29]\nattn_values = [1.30, 1.21, 1.22, 1.23]\n\n# Plotting\nfig, ax = plt.subplots(figsize=(6.0, 8.0))\nax.plot(trainable_sizes, rmse_values, 'r-', label='RMSE')\nax.plot(trainable_sizes, attn_values, 'b-', label='Attention')\n\n# Markers for each point\nfor i, txt in enumerate(rmse_values):\n    ax.annotate(txt, (trainable_sizes[i], rmse_values[i]), textcoords=\"offset points\", xytext=(0,10), ha='center')\n\nfor i, txt in enumerate(attn_values):\n    ax.annotate(txt, (trainable_sizes[i], attn_values[i]), textcoords=\"offset points\", xytext=(0,10), ha='center')\n\n# Legend\nax.legend()\n\n# Labels\nax.set_xlabel('Trainable Parameter Size (M)')\nax.set_ylabel('RMSE')\n\n# Title\nax.set_title('LlaSMol Performance')\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_24.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the x-axis limits\nax.set_xlim(40, 160)\n\n# Set the y-axis limits\nax.set_ylim(0, 0.1)\n\n# Set the x-axis label\nax.set_xlabel('Execution Duration (clock)')\n\n# Set the y-axis label\nax.set_ylabel('Distribution')\n\n# Create a scatter plot for each dataset\nax.scatter([40, 60, 80, 100, 120, 140, 160], [0.05, 0.07, 0.09, 0.11, 0.13, 0.15, 0.17], color='red', label='Dataset 1')\nax.scatter([40, 60, 80, 100, 120, 140, 160], [0.06, 0.08, 0.10, 0.12, 0.14, 0.16, 0.18], color='orange', label='Dataset 2')\nax.scatter([40, 60, 80, 100, 120, 140, 160], [0.07, 0.09, 0.11, 0.13, 0.15, 0.17, 0.19], color='blue', label='Dataset 3')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_25.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the graph\nx = ['15x15', '20x15', '20x20', '30x15', '30x20', '40x15', '40x20', '50x15', '50x20', '60x15', '60x20']\ny = [18, 14, 13, 12, 9, 12, 11, 10, 9, 8, 7]\nz = [5000, 4500, 4000, 3500, 3000, 2500, 2000, 1500, 1000, 500, 0]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Plot the data\nax.plot(x, y, color='red')\nax.plot(x, z, color='orange')\n\n# Set the title and labels\nax.set_title('Car Sales Data')\nax.set_xlabel('Instance Size')\nax.set_ylabel('Makespan (step)')\n\n# Add a legend\nax.legend(['Makespan', 'Improvement'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_26.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(7, 5))\n\n# Set the title of the plot\nax.set_title('Time Cost Comparison')\n\n# Set the x-axis label\nax.set_xlabel('Algorithms')\n\n# Set the y-axis label\nax.set_ylabel('Time Cost (Seconds)')\n\n# Set the x-ticks\nax.set_xticks([1, 2])\n\n# Set the x-tick labels\nax.set_xticklabels(['SEAC', 'CTCO'])\n\n# Set the y-limits\nax.set_ylim(0, 4)\n\n# Set the y-ticks\nax.set_yticks([0, 1, 2, 3, 4])\n\n# Set the y-tick labels\nax.set_yticklabels(['0', '1', '2', '3', '4'])\n\n# Add a rectangle for SEAC\nax.add_patch(plt.Rectangle((0.5, 0), 1, 4, color='green'))\n\n# Add a rectangle for CTCO\nax.add_patch(plt.Rectangle((1.5, 0), 1, 4, color='orange'))\n\n# Add a circle for SEAC\nax.add_patch(plt.Circle((0.5, 3), 0.1, color='red'))\n\n# Add a circle for CTCO\nax.add_patch(plt.Circle((1.5, 3), 0.1, color='blue'))\n\n# Add a line for SEAC\nax.plot([0.5, 1.5], [2, 2], color='black')\n\n# Add a line for CTCO\nax.plot([0.5, 1.5], [1, 1], color='black')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_27.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Set the title of the graph\nax.set_title('Stock Price Analysis')\n\n# Set the x-axis label\nax.set_xlabel('Time to Market (Days)')\n\n# Set the y-axis label\nax.set_ylabel('Stock Price ($)')\n\n# Set the tick labels for the x-axis\nax.set_xticks([0, 30, 60, 90, 120])\nax.set_xticklabels(['0', '30', '60', '90', '120'])\n\n# Set the tick labels for the y-axis\nax.set_yticks([40, 50, 60, 70, 80, 90, 100, 110, 120])\nax.set_yticklabels(['40', '50', '60', '70', '80', '90', '100', '110', '120'])\n\n# Draw a rectangle\nrect = plt.Rectangle((0, 0), 10, 10, color='blue')\nax.add_patch(rect)\n\n# Draw a star\nstar = plt.Circle((5, 5), 2, color='red')\nax.add_artist(star)\n\n# Draw a line\nline = plt.Line2D([0, 10], [0, 10], color='black')\nax.add_line(line)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_28.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Set the background color of the plot\nax.set_facecolor('lightblue')\n\n# Set the title of the plot\nax.set_title('Era')\n\n# Set the x-axis label\nax.set_xlabel('Density')\n\n# Set the y-axis label\nax.set_ylabel('Year')\n\n# Set the x-axis limits\nax.set_xlim(0, 2)\n\n# Set the y-axis limits\nax.set_ylim(1900, 2025)\n\n# Create a rectangle for the first era\nrect1 = plt.Rectangle((0.05, 1950), 0.3, 50, color='orange')\nax.add_patch(rect1)\n\n# Create a rectangle for the second era\nrect2 = plt.Rectangle((0.45, 1950), 0.3, 50, color='green')\nax.add_patch(rect2)\n\n# Create a rectangle for the third era\nrect3 = plt.Rectangle((0.85, 1950), 0.3, 50, color='brown')\nax.add_patch(rect3)\n\n# Create a rectangle for the fourth era\nrect4 = plt.Rectangle((0.05, 1900), 0.3, 50, color='blue')\nax.add_patch(rect4)\n\n# Create a rectangle for the fifth era\nrect5 = plt.Rectangle((0.45, 1900), 0.3, 50, color='yellow')\nax.add_patch(rect5)\n\n# Create a rectangle for the sixth era\nrect6 = plt.Rectangle((0.85, 1900), 0.3, 50, color='red')\nax.add_patch(rect6)\n\n# Create a rectangle for the seventh era\nrect7 = plt.Rectangle((0.05, 1850), 0.3, 50, color='purple')\nax.add_patch(rect7)\n\n# Create a rectangle for the eighth era\nrect8 = plt.Rectangle((0.45, 1850), 0.3, 50, color='pink')\nax.add_patch(rect8)\n\n# Create a rectangle for the ninth era\nrect9 = plt.Rectangle((0.85, 1850), 0.3, 50, color='cyan')\nax.add_patch(rect9)\n\n# Create a rectangle for the tenth era\nrect10 = plt.Rectangle((0.05, 1800), 0.3, 50, color='grey')\nax.add_patch(rect10)\n\n# Create a rectangle for the eleventh era\nrect11 = plt.Rectangle((0.45, 1800), 0.3, 50, color='black')\nax.add_patch(rect11)\n\n# Create a rectangle for the twelfth era\nrect12 = plt.Rectangle((0.85, 1800), 0.3, 50, color='white')\nax.add_patch(rect12)\n\n# Create a rectangle for the thirteenth era\nrect13 = plt.Rectangle((0.05, 1750), 0.3, 50, color='brown')\nax.add_patch(rect13)\n\n# Create a rectangle for the fourteenth era\nrect14 = plt.Rectangle((0.45, 1750), 0.3, 50, color='green')\nax.add_patch(rect14)\n\n# Create a rectangle for the fifteenth era\nrect15 = plt.Rectangle((0.85, 1750), 0.3, 50, color='orange')\nax.add_patch(rect15)\n\n# Create a rectangle for the sixteenth era\nrect16 = plt.Rectangle((0.05, 1700), 0.3, 50, color='blue')\nax.add_patch(rect16)\n\n# Create a rectangle for the seventeenth era\nrect17 = plt.Rectangle((0.45, 1700), 0.3, 50, color='yellow')\nax.add_patch(rect17)\n\n# Create a rectangle for the eighteenth era\nrect18 = plt.Rectangle((0.85, 1700), 0.3, 50, color='red')\nax.add_patch(rect18)\n\n# Create a rectangle for the nineteenth era\nrect19 = plt.Rectangle((0.05, 1650), 0.3, 50, color='purple')\nax.add_patch(rect19)\n\n# Create a rectangle for the twentieth era\nrect20 = plt.Rectangle((0.45, 1650), 0.3, 50, color='pink')\nax.add_patch(rect20)\n\n# Create a rectangle for the twenty-first era\nrect21 = plt.Rectangle((0.85, 1650), 0.3, 50, color='cyan')\nax.add_patch(rect21)\n\n# Create a rectangle for the twenty-second era\nrect22 = plt.Rectangle((0.05, 1600), 0.3, 50, color='grey')\nax.add_patch(rect22)\n\n# Create a rectangle for the twenty-third era\nrect23 = plt.Rectangle((0.45, 1600), 0.3, 50, color='black')\nax.add_patch(rect23)\n\n# Create a rectangle for the twenty-fourth era\nrect24 = plt.Rectangle((0.85, 1600), 0.3, 50, color='white')\nax.add_patch(rect24)\n\n# Create a rectangle for the twenty-fifth era\nrect25 = plt.Rectangle((0.05, 1550), 0.3, 50, color='brown')\nax.add_patch(rect25)\n\n# Create a rectangle for the twenty-sixth era\nrect26 = plt.Rectangle((0.45, 1550), 0.3, 50, color='green')\nax.add_patch(rect26)\n\n# Create a rectangle for the twenty-seventh era\nrect27 = plt.Rectangle((0.85, 1550), 0.3, 50, color='orange')\nax.add_patch(rect27)\n\n# Create a rectangle for the twenty-eighth era\nrect28 = plt.Rectangle((0.05, 1500), 0.3, 50, color='blue')\nax.add_patch(rect28)\n\n# Create a rectangle for the twenty-ninth era\nrect29 = plt.Rectangle((0.45, 1500), 0.3, 50, color='yellow')\nax.add_patch(rect29)\n\n# Create a rectangle for the thirtieth era\nrect30 = plt.Rectangle((0.85, 1500), 0.3, 50, color='red')\nax.add_patch(rect30)\n\n# Create a rectangle for the thirtieth-first era\nrect31 = plt.Rectangle((0.05, 1450), 0.3, 50, color='purple')\nax.add_patch(rect31)\n\n# Create a rectangle for the thirtieth-second era\nrect32 = plt.Rectangle((0.45, 1450), 0.3, 50, color='pink')\nax.add_patch(rect32)\n\n# Create a rectangle for the thirtieth-third era\nrect33 = plt.Rectangle((0.85, 1450), 0.3, 50, color='cyan')\nax.add_patch(rect33)\n\n# Create a rectangle for the thirtieth-fourth era\nrect34 = plt.Rectangle((0.05, 1400), 0.3, 50, color='grey')\nax.add_patch(rect34)\n\n# Create a rectangle for the thirtieth-fifth era\nrect35 = plt.Rectangle((0.45, 1400), 0.3, 50, color='black')\nax.add_patch(rect35)\n\n# Create a rectangle for the thirtieth-sixth era\nrect36 = plt.Rectangle((0.85, 1400), 0.3, 50, color='white')\nax.add_patch(rect36)\n\n# Create a rectangle for the thirtieth-seventh era\nrect37 = plt.Rectangle((0.05, 1350), 0.3, 50, color='brown')\nax.add_patch(rect37)\n\n# Create a rectangle for the thirtieth-eighth era\nrect38 = plt.Rectangle((0.45, 1350), 0.3, 50, color='green')\nax.add_patch(rect38)\n\n# Create a rectangle for the thirtieth-ninth era\nrect39 = plt.Rectangle((0.85, 1350), 0.3, 50, color='orange')\nax.add_patch(rect39)\n\n# Create a rectangle for the thirtieth-tenth era\nrect40 = plt.Rectangle((0.05, 1300), 0.3, 50, color='blue')\nax.add_patch(rect40)\n\n# Create a rectangle for the thirtieth-eleventh era\nrect41 = plt.Rectangle((0.45, 1300), 0.3, 50, color='yellow')\nax.add_patch(rect41)\n\n# Create a rectangle for the thirtieth-twelfth era\nrect42 = plt.Rectangle((0.85, 1300), 0.3, 50, color='red')\nax.add_patch(rect42)\n\n# Create a rectangle for the thirtieth-thirteenth era\nrect43 = plt.Rectangle((0.05, 1250), 0.3, 50, color='purple')\nax.add_patch(rect43)\n\n# Create a rectangle for the thirtieth-fourteenth era\nrect44 = plt.Rectangle((0.45, 1250), 0.3, 50, color='pink')\nax.add_patch(rect44)\n\n# Create a rectangle for the thirtieth-fifteenth era\nrect45 = plt.Rectangle((0.85, 1250), 0.3, 50, color='cyan')\nax.add_patch(rect45)\n\n# Create a rectangle for the thirtieth-sixteenth era\nrect46 = plt.Rectangle((0.05, 1200), 0.3, 50, color='grey')\nax.add_patch(rect46)\n\n# Create a rectangle for the thirtieth-seventeenth era\nrect47 = plt.Rectangle((0.45, 1200), 0.3, 50, color='black')\nax.add_patch(rect47)\n\n# Create a rectangle for the thirtieth-eighteenth era\nrect48 = plt.Rectangle((0.85, 1200), 0.3, 50, color='white')\nax.add_patch(rect48)\n\n# Create a rectangle for the thirtieth-nineteenth era\nrect49 = plt.Rectangle((0.05, 1150), 0.3, 50, color='brown')\nax.add_patch(rect49)\n\n# Create a rectangle for the thirtieth-twentieth era\nrect50 = plt.Rectangle((0.45, 1150), 0.3, 50, color='green')\nax.add_patch(rect50)\n\n# Create a rectangle for the thirtieth-twenty-first era\nrect51 = plt.Rectangle((0.85, 1150), 0.3, 50, color='orange')\nax.add_patch(rect51)\n\n# Create a rectangle for the thirtieth-twenty-second era\nrect52 = plt.Rectangle((0.05, 1100), 0.3, 50, color='blue')\nax.add_patch(rect52)\n\n# Create a rectangle for the thirtieth-twenty-third era\nrect53 = plt.Rectangle((0.45, 1100), 0.3, 50, color='yellow')\nax.add_patch(rect53)\n\n# Create a rectangle for the thirtieth-twenty-fourth era\nrect54 = plt.Rectangle((0.85, 1100), 0.3, 50, color='red')\nax.add_patch(rect54)\n\n# Create a rectangle for the thirtieth-twenty-fifth era\nrect55 = plt.Rectangle((0.05, 1050), 0.3, 50, color='purple')\nax.add_patch(rect55)\n\n# Create a rectangle for the thirtieth-twenty-sixth era\nrect56 = plt.Rectangle((0.45, 1050), 0.3, 50, color='pink')\nax.add_patch(rect56)\n\n# Create a rectangle for the thirtieth-twenty-seventh era\nrect57 = plt.Rectangle((0.85, 1050), 0.3, 50, color='cyan')\nax.add_patch(rect57)\n\n# Create a rectangle for the thirtieth-twenty-eighth era\nrect58 = plt.Rectangle((0.05, 1000), 0.3, 50, color='grey')\nax.add_patch(rect58)\n\n# Create a rectangle for the thirtieth-twenty-ninth era\nrect59 = plt.Rectangle((0.45, 1000), 0.3, 50, color='black')\nax.add_patch(rect59)\n\n# Create a rectangle for the thirtieth-thirtieth era\nrect60 = plt.Rectangle((0.85, 1000), 0.3, 50, color='white')\nax.add_patch(rect60)\n\n# Create a rectangle for the thirtieth-thirtieth-first era\nrect61 = plt.Rectangle((0.05, 950), 0.3, 50, color='brown')\nax.add_patch(rect61)\n\n# Create a rectangle for the thirtieth-thirtieth-second era\nrect62 = plt.Rectangle((0.45, 950), 0.3, 50, color='green')\nax.add_patch(rect62)\n\n# Create a rectangle for the thirtieth-thirtieth-third era\nrect63 = plt.Rectangle((0.85, 950), 0.3, 50, color='orange')\nax.add_patch(rect63)\n\n# Create a rectangle for the thirtieth-thirtieth-fourth era\nrect64 = plt.Rectangle((0.05, 900), 0.3, 50, color='blue')\nax.add_patch(rect64)\n\n# Create a rectangle for the thirtieth-thirtieth-fifth era\nrect65 = plt.Rectangle((0.45, 900), 0.3, 50, color='yellow')\nax.add_patch(rect65)\n\n# Create a rectangle for the thirtieth-thirtieth-sixth era\nrect66 = plt.Rectangle((0.85, 900), 0.3, 50, color='red')\nax.add_patch(rect66)\n\n# Create a rectangle for the thirtieth-thirtieth-seventh era\nrect67 = plt.Rectangle((0.05, 850), 0.3, 50, color='purple')\nax.add_patch(rect67)\n\n# Create a rectangle for the thirtieth-thirtieth-eighth era\nrect68 = plt.Rectangle((0.45, 850), 0.3, 50, color='pink')\nax.add_patch(rect68)\n\n# Create a rectangle for the thirtieth-thirtieth-ninth era\nrect69 = plt.Rectangle((0.85, 850), 0.3, 50, color='cyan')\nax.add_patch(rect69)\n\n# Create a rectangle for the thirtieth-thirtieth-tenth era\nrect70 = plt.Rectangle((0.05, 800), 0.3, 50, color='grey')\nax.add_patch(rect70)\n\n# Create a rectangle for the thirtieth-thirtieth-eleventh era\nrect71 = plt.Rectangle((0.45, 800), 0.3, 50, color='black')\nax.add_patch(rect71)\n\n# Create a rectangle for the thirtieth-thirtieth-twelfth era\nrect72 = plt.Rectangle((0.85, 800), 0.3, 50, color='white')\nax.add_patch(rect72)\n\n# Create a rectangle for the thirtieth-thirtieth-thirteenth era\nrect73 = plt.Rectangle((0.05, 750), 0.3, 50, color='brown')\nax.add_patch(rect73)\n\n# Create a rectangle for the thirtieth-thirtieth-fourteenth era\nrect74 = plt.Rectangle((0.45, 750), 0.3, 50, color='green')\nax.add_patch(rect74)\n\n# Create a rectangle for the thirtieth-thirtieth-fifteenth era\nrect75 = plt.Rectangle((0.85, 750), 0.3, 50, color='orange')\nax.add_patch(rect75)\n\n# Create a rectangle for the thirtieth-thirtieth-sixteenth era\nrect76 = plt.Rectangle((0.05, 700), 0.3, 50, color='blue')\nax.add_patch(rect76)\n\n# Create a rectangle for the thirtieth-thirtieth-seventeenth era\nrect77 = plt.Rectangle((0.45, 700), 0.3, 50, color='yellow')\nax.add_patch(rect77)\n\n# Create a rectangle for the thirtieth-thirtieth-eighteenth era\nrect78 = plt.Rectangle((0.85, 700),"}
{"file": "dataset/ori_500/CB_29.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the graph\ntech = ['Nano', 'Quantum', 'Cybersecurity', 'VR', 'Biotech', 'Robotics', 'IoT', 'Cloud Computing', 'Blockchain', 'AI']\npatents = [20, 10, 40, 30, 60, 70, 90, 80, 50, 120]\nyears = [2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Plot the data\nax.plot(years, patents, marker='o')\n\n# Set the title and labels\nax.set_title('Patent Filings in 2013')\nax.set_xlabel('Year')\nax.set_ylabel('Number of Patents')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Set the color of the background\nax.set_facecolor('pink')\n\n# Set the title of the graph\nax.set_title('Calibration Curve', color='black')\n\n# Set the x-axis label\nax.set_xlabel('Predicted Probability', color='black')\n\n# Set the y-axis label\nax.set_ylabel('Fraction of Positives', color='black')\n\n# Set the x-axis limits\nax.set_xlim(0, 1)\n\n# Set the y-axis limits\nax.set_ylim(0, 1)\n\n# Set the x-axis ticks\nax.set_xticks(np.arange(0, 1.1, 0.25))\n\n# Set the y-axis ticks\nax.set_yticks(np.arange(0, 1.1, 0.25))\n\n# Set the x-axis tick labels\nax.set_xticklabels(['0.00', '0.25', '0.50', '0.75', '1.00'])\n\n# Set the y-axis tick labels\nax.set_yticklabels(['0.00', '0.25', '0.50', '0.75', '1.00'])\n\n# Set the x-axis grid lines\nax.xaxis.grid(True)\n\n# Set the y-axis grid lines\nax.yaxis.grid(True)\n\n# Set the x-axis grid line style\nax.xaxis.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the y-axis grid line style\nax.yaxis.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the x-axis grid line color\nax.xaxis.grid(color='black')\n\n# Set the y-axis grid line color\nax.yaxis.grid(color='black')\n\n# Set the x-axis grid line width\nax.xaxis.grid(linewidth=0.5)\n\n# Set the y-axis grid line width\nax.yaxis.grid(linewidth=0.5)\n\n# Set the x-axis grid line style\nax.xaxis.grid(linestyle='-')\n\n# Set the y-axis grid line style\nax.yaxis.grid(linestyle='-')\n\n# Set the x-axis grid line color\nax.xaxis.grid(color='black')\n\n# Set the y-axis grid line color\nax.yaxis.grid(color='black')\n\n# Set the x-axis grid line width\nax.xaxis.grid(linewidth=0.5)\n\n# Set the y-axis grid line width\nax.yaxis.grid(linewidth=0.5)\n\n# Set the x-axis grid line style\nax.xaxis.grid(linestyle='-')\n\n# Set the y-axis grid line style\nax.yaxis.grid(linestyle='-')\n\n# Set the x-axis grid line color\nax.xaxis.grid(color='black')\n\n# Set the y-axis grid line color\nax.yaxis.grid(color='black')\n\n# Set the x-axis grid line width\nax.xaxis.grid(linewidth=0.5)\n\n# Set the y-axis grid line width\nax.yaxis.grid(linewidth=0.5)\n\n# Set the x-axis grid line style\nax.xaxis.grid(linestyle='-')\n\n# Set the y-axis grid line style\nax.yaxis.grid(linestyle='-')\n\n# Set the x-axis grid line color\nax.xaxis.grid(color='black')\n\n# Set the y-axis grid line color\nax.yaxis.grid(color='black')\n\n# Set the x-axis grid line width\nax.xaxis.grid(linewidth=0.5)\n\n# Set the y-axis grid line width\nax.yaxis.grid(linewidth=0.5)\n\n# Set the x-axis grid line style\nax.xaxis.grid(linestyle='-')\n\n# Set the y-axis grid line style\nax.yaxis.grid(linestyle='-')\n\n# Set the x-axis grid line color\nax.xaxis.grid(color='black')\n\n# Set the y-axis grid line color\nax.yaxis.grid(color='black')\n\n# Set the x-axis grid line width\nax.xaxis.grid(linewidth=0.5)\n\n# Set the y-axis grid line width\nax.yaxis.grid(linewidth=0.5)\n\n# Set the x-axis grid line style\nax.xaxis.grid(linestyle='-')\n\n# Set the y-axis grid line style\nax.yaxis.grid(linestyle='-')\n\n# Set the x-axis grid line color\nax.xaxis.grid(color='black')\n\n# Set the y-axis grid line color\nax.yaxis.grid(color='black')\n\n# Set the x-axis grid line width\nax.xaxis.grid(linewidth=0.5)\n\n# Set the y-axis grid line width\nax.yaxis.grid(linewidth=0.5)\n\n# Set the x-axis grid line style\nax.xaxis.grid(linestyle='-')\n\n# Set the y-axis grid line style\nax.yaxis.grid(linestyle='-')\n\n# Set the x-axis grid line color\nax.xaxis.grid(color='black')\n\n# Set the y-axis grid line color\nax.yaxis.grid(color='black')\n\n# Set the x-axis grid line width\nax.xaxis.grid(linewidth=0.5)\n\n# Set the y-axis grid line width\nax.yaxis.grid(linewidth=0.5)\n\n# Set the x-axis grid line style\nax.xaxis.grid(linestyle='-')\n\n# Set the y-axis grid line style\nax.yaxis.grid(linestyle='-')\n\n# Set the x-axis grid line color\nax.xaxis.grid(color='black')\n\n# Set the y-axis grid line color\nax.yaxis.grid(color='black')\n\n# Set the x-axis grid line width\nax.xaxis.grid(linewidth=0.5)\n\n# Set the y-axis grid line width\nax.yaxis.grid(linewidth=0.5)\n\n# Set the x-axis grid line style\nax.xaxis.grid(linestyle='-')\n\n# Set the y-axis grid line style\nax.yaxis.grid(linestyle='-')\n\n# Set the x-axis grid line color\nax.xaxis.grid(color='black')\n\n# Set the y-axis grid line color\nax.yaxis.grid(color='black')\n\n# Set the x-axis grid line width\nax.xaxis.grid(linewidth=0.5)\n\n# Set the y-axis grid line width\nax.yaxis.grid(linewidth=0.5)\n\n# Set the x-axis grid line style\nax.xaxis.grid(linestyle='-')\n\n# Set the y-axis grid line style\nax.yaxis.grid(linestyle='-')\n\n# Set the x-axis grid line color\nax.xaxis.grid(color='black')\n\n# Set the y-axis grid line color\nax.yaxis.grid(color='black')\n\n# Set the x-axis grid line width\nax.xaxis.grid(linewidth=0.5)\n\n# Set the y-axis grid line width\nax.yaxis.grid(linewidth=0.5)\n\n# Set the x-axis grid line style\nax.xaxis.grid(linestyle='-')\n\n# Set the y-axis grid line style\nax.yaxis.grid(linestyle='-')\n\n# Set the x-axis grid line color\nax.xaxis.grid(color='black')\n\n# Set the y-axis grid line color\nax.yaxis.grid(color='black')\n\n# Set the x-axis grid line width\nax.xaxis.grid(linewidth=0.5)\n\n# Set the y-axis grid line width\nax.yaxis.grid(linewidth=0.5)\n\n# Set the x-axis grid line style\nax.xaxis.grid(linestyle='-')\n\n# Set the y-axis grid line style\nax.yaxis.grid(linestyle='-')\n\n# Set the x-axis grid line color\nax.xaxis.grid(color='black')\n\n# Set the y-axis grid line color\nax.yaxis.grid(color='black')\n\n# Set the x-axis grid line width\nax.xaxis.grid(linewidth=0.5)\n\n# Set the y-axis grid line width\nax.yaxis.grid(linewidth=0.5)\n\n# Set the x-axis grid line style\nax.xaxis.grid(linestyle='-')\n\n# Set the y-axis grid line style\nax.yaxis.grid(linestyle='-')\n\n# Set the x-axis grid line color\nax.xaxis.grid(color='black')\n\n# Set the y-axis grid line color\nax.yaxis.grid(color='black')\n\n# Set the x-axis grid line width\nax.xaxis.grid(linewidth=0.5)\n\n# Set the y-axis grid line width\nax.yaxis.grid(linewidth=0.5)\n\n# Set the x-axis grid line style\nax.xaxis.grid(linestyle='-')\n\n# Set the y-axis grid line style\nax.yaxis.grid(linestyle='-')\n\n# Set the x-axis grid line color\nax.xaxis.grid(color='black')\n\n# Set the y-axis grid line color\nax.yaxis.grid(color='black')\n\n# Set the x-axis grid line width\nax.xaxis.grid(linewidth=0.5)\n\n# Set the y-axis grid line width\nax.yaxis.grid(linewidth=0.5)\n\n# Set the x-axis grid line style\nax.xaxis.grid(linestyle='-')\n\n# Set the y-axis grid line style\nax.yaxis.grid(linestyle='-')\n\n# Set the x-axis grid line color\nax.xaxis.grid(color='black')\n\n# Set the y-axis grid line color\nax.yaxis.grid(color='black')\n\n# Set the x-axis grid line width\nax.xaxis.grid(linewidth=0.5)\n\n# Set the y-axis grid line width\nax.yaxis.grid(linewidth=0.5)\n\n# Set the x-axis grid line style\nax.xaxis.grid(linestyle='-')\n\n# Set the y-axis grid line style\nax.yaxis.grid(linestyle='-')\n\n# Set the x-axis grid line color\nax.xaxis.grid(color='black')\n\n# Set the y-axis grid line color\nax.yaxis.grid(color='black')\n\n# Set the x-axis grid line width\nax.xaxis.grid(linewidth=0.5)\n\n# Set the y-axis grid line width\nax.yaxis.grid(linewidth=0.5)\n\n# Set the x-axis grid line style\nax.xaxis.grid(linestyle='-')\n\n# Set the y-axis grid line style\nax.yaxis.grid(linestyle='-')\n\n# Set the x-axis grid line color\nax.xaxis.grid(color='black')\n\n# Set the y-axis grid line color\nax.yaxis.grid(color='black')\n\n# Set the x-axis grid line width\nax.xaxis.grid(linewidth=0.5)\n\n# Set the y-axis grid line width\nax.yaxis.grid(linewidth=0.5)\n\n# Set the x-axis grid line style\nax.xaxis.grid(linestyle='-')\n\n# Set the y-axis grid line style\nax.yaxis.grid(linestyle='-')\n\n# Set the x-axis grid line color\nax.xaxis.grid(color='black')\n\n# Set the y-axis grid line color\nax.yaxis.grid(color='black')\n\n# Set the x-axis grid line width\nax.xaxis.grid(linewidth=0.5)\n\n# Set the y-axis grid line width\nax.yaxis.grid(linewidth=0.5)\n\n# Set the x-axis grid line style\nax.xaxis.grid(linestyle='-')\n\n# Set the y-axis grid line style\nax.yaxis.grid(linestyle='-')\n\n# Set the x-axis grid line color\nax.xaxis.grid(color='black')\n\n# Set the y-axis grid line color\nax.yaxis.grid(color='black')\n\n# Set the x-axis grid line width\nax.xaxis.grid(linewidth=0.5)\n\n# Set the y-axis grid line width\nax.yaxis.grid(linewidth=0.5)\n\n# Set the x-axis grid line style\nax.xaxis.grid(linestyle='-')\n\n# Set the y-axis grid line style\nax.yaxis.grid(linestyle='-')\n\n# Set the x-axis grid line color\nax.xaxis.grid(color='black')\n\n# Set the y-axis grid line color\nax.yaxis.grid(color='black')\n\n# Set the x-axis grid line width\nax.xaxis.grid(linewidth=0.5)\n\n# Set the y-axis grid line width\nax.yaxis.grid(linewidth=0.5)\n\n# Set the x-axis grid line style\nax.xaxis.grid(linestyle='-')\n\n# Set the y-axis grid line style\nax.yaxis.grid(linestyle='-')\n\n# Set the x-axis grid line color\nax.xaxis.grid(color='black')\n\n# Set the y-axis grid line color\nax.yaxis.grid(color='black')\n\n# Set the x-axis grid line width\nax.xaxis.grid(linewidth=0.5)\n\n# Set the y-axis grid line width\nax.yaxis.grid(linewidth=0.5)\n\n# Set the x-axis grid line style\nax.xaxis.grid(linestyle='-')\n\n# Set the y-axis grid line style\nax.yaxis.grid(linestyle='-')\n\n# Set the x-axis grid line color\nax.xaxis.grid(color='black')\n\n# Set the y-axis grid line color\nax.yaxis.grid(color='black')\n\n# Set the x-axis grid line width\nax.xaxis.grid(linewidth=0.5)\n\n# Set the y-axis grid line width\nax.yaxis.grid(linewidth=0.5)\n\n# Set the x-axis grid line style\nax.xaxis.grid(linestyle='-')\n\n# Set the y-axis grid line style\nax.yaxis.grid(linestyle='-')\n\n# Set the x-axis grid line color\nax.xaxis.grid(color='black')\n\n# Set the y-axis grid line color\nax.yaxis.grid(color='black')\n\n# Set the x-axis grid line width\nax.xaxis.grid(linewidth=0.5)\n\n# Set the y-axis grid line width\nax.yaxis.grid(linewidth=0.5)\n\n# Set the x-axis grid line style\nax.xaxis.grid(linestyle='-')\n\n# Set the y-axis grid line style\nax.yaxis.grid(linestyle='-')\n\n# Set the x-axis grid line color\nax.xaxis.grid(color='black')\n\n# Set the y-axis grid line color\nax.yaxis.grid(color='black')\n\n# Set the x-axis grid line width\nax.xaxis.grid(linewidth=0.5)\n\n# Set the y-axis grid line width\nax.yaxis.grid(linewidth=0.5)\n\n# Set the x-axis grid line style\nax.xaxis.grid(linestyle='-')\n\n# Set the y-axis grid line style\nax.yaxis.grid(linestyle='-')\n\n# Set the x-axis grid line color\nax.xaxis.grid(color='black')\n\n# Set the y-axis grid line color\nax.yaxis.grid(color='black')\n\n# Set the x-axis grid line width\nax.xaxis.grid(linewidth=0.5)\n\n# Set the y-axis grid line width\nax.yaxis.grid(linewidth=0.5)\n\n# Set the x-axis grid line style\nax.xaxis.grid(linestyle='-')\n\n# Set the y-axis grid line style\nax.yaxis.grid(linestyle='-')\n\n# Set the x-axis grid line color\nax.xaxis.grid(color='black')\n\n# Set the y-axis grid line color\nax.yaxis.grid(color='black')\n\n# Set the x-axis grid line width\nax.xaxis.grid(linewidth=0.5)\n\n# Set the y-axis grid line width\nax.yaxis.grid(linewidth=0.5)\n\n# Set the x-axis grid line style\nax.xaxis.grid(linestyle='-')\n\n# Set the y-axis grid line style\nax.yaxis.grid(linestyle='-')\n\n# Set the x-axis grid line color\nax.xaxis.grid(color='black')\n\n# Set the y-axis grid line color\nax.yaxis.grid(color='black')\n\n# Set the x-axis grid line width\nax.xaxis.grid(linewidth=0.5)\n\n# Set the y-axis grid line width\nax.yaxis.grid(linewidth=0.5)\n\n# Set the x-axis grid line style\nax.xaxis.grid(linestyle='-')\n\n# Set the y-axis grid line style\nax.yaxis.grid(linestyle='-')\n\n# Set the x-axis grid line color\nax.xaxis.grid(color='black')\n\n# Set the y-axis grid line color\nax.yaxis.grid(color='black')\n\n# Set the x-axis grid line width\nax.xaxis.grid(linewidth=0.5)\n\n# Set the y-axis grid line width\nax.yaxis.grid(linewidth=0.5)\n\n# Set the x-axis grid line style\nax.xaxis.grid(linestyle='-')\n\n# Set the y-axis grid line style\nax.yaxis.grid(linestyle='-')\n\n# Set the x-axis grid line color\nax.xaxis.grid(color='black')\n\n# Set the y-axis grid line color\nax.yaxis.grid(color='black')\n\n# Set the x-axis grid line width\nax.xaxis.grid(linewidth=0.5)\n\n# Set the y-axis grid line width\nax.yaxis.grid(linewidth=0.5)\n\n# Set the x-axis grid line style\nax.xaxis.grid(linestyle='-')\n\n# Set the y-axis grid line style\nax.yaxis.grid(linestyle='-')\n\n# Set the x-axis grid line color\nax.xaxis.grid(color='black')\n\n# Set the y-axis grid line color\nax.yaxis.grid(color='black')\n\n# Set the x-axis grid line width\nax.xaxis.grid(linewidth=0.5)\n\n# Set the y-axis grid line width\nax.yaxis.grid(linewidth=0.5)\n\n# Set the x-axis grid line style\nax.xaxis.grid(linestyle='-')\n\n# Set the y-axis grid line style\nax.yaxis.grid(linestyle='-')\n\n# Set the x-axis grid line color\nax.xaxis.grid(color='black')\n\n# Set the y-axis grid line color\nax.yaxis.grid(color='black')\n\n# Set the x-axis grid line width\nax.xaxis.grid(linewidth=0.5)\n\n# Set the y-axis grid line width\nax.yaxis.grid(linewidth=0.5)\n\n# Set the x-axis grid line style\nax.xaxis.grid(linestyle='-')\n\n# Set the y-axis grid line style\nax.yaxis.grid(linestyle='-')\n\n# Set the x-axis grid line color\nax.xaxis.grid(color='black')\n\n# Set the y-axis grid line color\nax.yaxis.grid(color='black')\n\n# Set the x-axis grid line width\nax.xaxis.grid(linewidth=0.5)\n\n# Set the y-axis grid line width\nax.yaxis.grid(linewidth=0.5)\n\n# Set the x-axis grid line style\nax.xaxis.grid(linestyle='-')\n\n# Set the y-axis grid line style\nax.yaxis.grid(linestyle='-')\n\n# Set the x-axis grid line color\nax.xaxis.grid(color='black')\n\n# Set the y-axis grid line color\nax.yaxis.grid(color='black')\n\n# Set the x-axis grid line width\nax.xaxis.grid(linewidth=0.5)\n\n# Set the y-axis grid line width\nax.yaxis.grid(linewidth=0.5)\n\n# Set the x-axis grid line style\nax.xaxis.grid(linestyle='-')\n\n# Set the y-axis grid line style\nax.yaxis.grid(linestyle='-')\n\n# Set the x-axis grid line color\nax.xaxis.grid(color='black')\n\n# Set the y-axis grid line color\nax.yaxis.grid(color='black')\n\n# Set the x-axis grid line width\nax.xaxis.grid(linewidth=0.5)\n\n# Set the y-axis grid line width\nax.yaxis.grid(linewidth=0.5)\n\n# Set the x-axis grid line style\nax.xaxis.grid(linestyle='-')\n\n# Set the y-axis grid line style\nax.yaxis.grid(linestyle='-')\n\n# Set the x-axis grid line color\nax.xaxis.grid(color='black')\n\n# Set the y-axis grid line color\nax.yaxis"}
{"file": "dataset/ori_500/CB_30.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the graph\nquarters = ['Q1', 'Q2', 'Q3', 'Q4']\nearnings = [250, 300, 350, 400]\ngrowth = [10, 20, 30, 40]\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data\nax.plot(quarters, earnings, label='Earnings ($1000s)')\nax.plot(quarters, growth, label='Growth (%)')\n\n# Set the title and labels\nax.set_title('Company Performance')\nax.set_xlabel('Quarter')\nax.set_ylabel('Earnings (in $1000s)')\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Set the title of the plot\nax.set_title('Training Performance Metrics')\n\n# Set the x-axis label\nax.set_xlabel('Methods')\n\n# Set the y-axis label\nax.set_ylabel('Normalized Requirements (lower is better)')\n\n# Define the data for the plot\nx = ['Linear probing', 'BitFit', 'Prompt tuning', 'Full finetuning', 'LoRA', 'Ours (LoSA)']\ny = [72, 74, 76, 78, 80, 82]\n\n# Plot the data\nax.plot(x, y, marker='o', linestyle='-')\n\n# Add rectangles for each method\nrectangles = [\n    plt.Rectangle((0, 0), 1, 1, color='blue'),\n    plt.Rectangle((1, 0), 1, 1, color='orange'),\n    plt.Rectangle((2, 0), 1, 1, color='green'),\n    plt.Rectangle((3, 0), 1, 1, color='red'),\n    plt.Rectangle((4, 0), 1, 1, color='blue'),\n    plt.Rectangle((5, 0), 1, 1, color='orange')\n]\n\n# Add rectangles to the plot\nfor rect in rectangles:\n    ax.add_patch(rect)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Team Performance')\n\n# Set the x-axis label\nax.set_xlabel('TM-score')\n\n# Set the y-axis label\nax.set_ylabel('Sequident')\n\n# Create a scatter plot\nax.scatter(np.random.rand(100), np.random.rand(100), color='blue')\n\n# Create a bar chart\nax.bar(['Player 1', 'Player 2', 'Player 3'], [np.random.rand(), np.random.rand(), np.random.rand()], color='blue')\n\n# Create a line graph\nax.plot([0, 1, 2, 3, 4, 5], [np.random.rand(), np.random.rand(), np.random.rand(), np.random.rand(), np.random.rand(), np.random.rand()], color='blue')\n\n# Create a pie chart\nax.pie([np.random.rand(), np.random.rand()], labels=['Player 1', 'Player 2'], colors=['blue', 'red'])\n\n# Create a histogram\nax.hist(np.random.rand(100), bins=10, color='blue')\n\n# Create a heatmap\nax.imshow(np.random.rand(10, 10), cmap='Blues')\n\n# Create a contour plot\nx = np.linspace(-1, 1, 100)\ny = np.linspace(-1, 1, 100)\nX, Y = np.meshgrid(x, y)\nZ = np.sin(X**2 + Y**2)\nax.contourf(X, Y, Z, cmap='Blues')\n\n# Create a scatter plot with different sizes\nax.scatter(np.random.rand(100), np.random.rand(100), s=np.random.rand(100)*100, color='blue')\n\n# Create a scatter plot with different colors\nax.scatter(np.random.rand(100), np.random.rand(100), c=np.random.rand(100), cmap='Blues')\n\n# Create a scatter plot with different markers\nax.scatter(np.random.rand(100), np.random.rand(100), marker='o', color='blue')\n\n# Create a scatter plot with different edge colors\nax.scatter(np.random.rand(100), np.random.rand(100), edgecolor='black', facecolor='blue')\n\n# Create a scatter plot with different alpha values\nax.scatter(np.random.rand(100), np.random.rand(100), alpha=0.5, color='blue')\n\n# Create a scatter plot with different zorder values\nax.scatter(np.random.rand(100), np.random.rand(100), zorder=10, color='blue')\n\n# Create a scatter plot with different linewidths\nax.scatter(np.random.rand(100), np.random.rand(100), linewidth=2, color='blue')\n\n# Create a scatter plot with different antialiased values\nax.scatter(np.random.rand(100), np.random.rand(100), antialiased=True, color='blue')\n\n# Create a scatter plot with different s values\nax.scatter(np.random.rand(100), np.random.rand(100), s=np.random.rand(100)*100, color='blue')\n\n# Create a scatter plot with different c values\nax.scatter(np.random.rand(100), np.random.rand(100), c=np.random.rand(100), cmap='Blues')\n\n# Create a scatter plot with different marker values\nax.scatter(np.random.rand(100), np.random.rand(100), marker='o', color='blue')\n\n# Create a scatter plot with different edgecolor values\nax.scatter(np.random.rand(100), np.random.rand(100), edgecolor='black', facecolor='blue')\n\n# Create a scatter plot with different alpha values\nax.scatter(np.random.rand(100), np.random.rand(100), alpha=0.5, color='blue')\n\n# Create a scatter plot with different zorder values\nax.scatter(np.random.rand(100), np.random.rand(100), zorder=10, color='blue')\n\n# Create a scatter plot with different linewidths\nax.scatter(np.random.rand(100), np.random.rand(100), linewidth=2, color='blue')\n\n# Create a scatter plot with different antialiased values\nax.scatter(np.random.rand(100), np.random.rand(100), antialiased=True, color='blue')\n\n# Create a scatter plot with different s values\nax.scatter(np.random.rand(100), np.random.rand(100), s=np.random.rand(100)*100, color='blue')\n\n# Create a scatter plot with different c values\nax.scatter(np.random.rand(100), np.random.rand(100), c=np.random.rand(100), cmap='Blues')\n\n# Create a scatter plot with different marker values\nax.scatter(np.random.rand(100), np.random.rand(100), marker='o', color='blue')\n\n# Create a scatter plot with different edgecolor values\nax.scatter(np.random.rand(100), np.random.rand(100), edgecolor='black', facecolor='blue')\n\n# Create a scatter plot with different alpha values\nax.scatter(np.random.rand(100), np.random.rand(100), alpha=0.5, color='blue')\n\n# Create a scatter plot with different zorder values\nax.scatter(np.random.rand(100), np.random.rand(100), zorder=10, color='blue')\n\n# Create a scatter plot with different linewidths\nax.scatter(np.random.rand(100), np.random.rand(100), linewidth=2, color='blue')\n\n# Create a scatter plot with different antialiased values\nax.scatter(np.random.rand(100), np.random.rand(100), antialiased=True, color='blue')\n\n# Create a scatter plot with different s values\nax.scatter(np.random.rand(100), np.random.rand(100), s=np.random.rand(100)*100, color='blue')\n\n# Create a scatter plot with different c values\nax.scatter(np.random.rand(100), np.random.rand(100), c=np.random.rand(100), cmap='Blues')\n\n# Create a scatter plot with different marker values\nax.scatter(np.random.rand(100), np.random.rand(100), marker='o', color='blue')\n\n# Create a scatter plot with different edgecolor values\nax.scatter(np.random.rand(100), np.random.rand(100), edgecolor='black', facecolor='blue')\n\n# Create a scatter plot with different alpha values\nax.scatter(np.random.rand(100), np.random.rand(100), alpha=0.5, color='blue')\n\n# Create a scatter plot with different zorder values\nax.scatter(np.random.rand(100), np.random.rand(100), zorder=10, color='blue')\n\n# Create a scatter plot with different linewidths\nax.scatter(np.random.rand(100), np.random.rand(100), linewidth=2, color='blue')\n\n# Create a scatter plot with different antialiased values\nax.scatter(np.random.rand(100), np.random.rand(100), antialiased=True, color='blue')\n\n# Create a scatter plot with different s values\nax.scatter(np.random.rand(100), np.random.rand(100), s=np.random.rand(100)*100, color='blue')\n\n# Create a scatter plot with different c values\nax.scatter(np.random.rand(100), np.random.rand(100), c=np.random.rand(100), cmap='Blues')\n\n# Create a scatter plot with different marker values\nax.scatter(np.random.rand(100), np.random.rand(100), marker='o', color='blue')\n\n# Create a scatter plot with different edgecolor values\nax.scatter(np.random.rand(100), np.random.rand(100), edgecolor='black', facecolor='blue')\n\n# Create a scatter plot with different alpha values\nax.scatter(np.random.rand(100), np.random.rand(100), alpha=0.5, color='blue')\n\n# Create a scatter plot with different zorder values\nax.scatter(np.random.rand(100), np.random.rand(100), zorder=10, color='blue')\n\n# Create a scatter plot with different linewidths\nax.scatter(np.random.rand(100), np.random.rand(100), linewidth=2, color='blue')\n\n# Create a scatter plot with different antialiased values\nax.scatter(np.random.rand(100), np.random.rand(100), antialiased=True, color='blue')\n\n# Create a scatter plot with different s values\nax.scatter(np.random.rand(100), np.random.rand(100), s=np.random.rand(100)*100, color='blue')\n\n# Create a scatter plot with different c values\nax.scatter(np.random.rand(100), np.random.rand(100), c=np.random.rand(100), cmap='Blues')\n\n# Create a scatter plot with different marker values\nax.scatter(np.random.rand(100), np.random.rand(100), marker='o', color='blue')\n\n# Create a scatter plot with different edgecolor values\nax.scatter(np.random.rand(100), np.random.rand(100), edgecolor='black', facecolor='blue')\n\n# Create a scatter plot with different alpha values\nax.scatter(np.random.rand(100), np.random.rand(100), alpha=0.5, color='blue')\n\n# Create a scatter plot with different zorder values\nax.scatter(np.random.rand(100), np.random.rand(100), zorder=10, color='blue')\n\n# Create a scatter plot with different linewidths\nax.scatter(np.random.rand(100), np.random.rand(100), linewidth=2, color='blue')\n\n# Create a scatter plot with different antialiased values\nax.scatter(np.random.rand(100), np.random.rand(100), antialiased=True, color='blue')\n\n# Create a scatter plot with different s values\nax.scatter(np.random.rand(100), np.random.rand(100), s=np.random.rand(100)*100, color='blue')\n\n# Create a scatter plot with different c values\nax.scatter(np.random.rand(100), np.random.rand(100), c=np.random.rand(100), cmap='Blues')\n\n# Create a scatter plot with different marker values\nax.scatter(np.random.rand(100), np.random.rand(100), marker='o', color='blue')\n\n# Create a scatter plot with different edgecolor values\nax.scatter(np.random.rand(100), np.random.rand(100), edgecolor='black', facecolor='blue')\n\n# Create a scatter plot with different alpha values\nax.scatter(np.random.rand(100), np.random.rand(100), alpha=0.5, color='blue')\n\n# Create a scatter plot with different zorder values\nax.scatter(np.random.rand(100), np.random.rand(100), zorder=10, color='blue')\n\n# Create a scatter plot with different linewidths\nax.scatter(np.random.rand(100), np.random.rand(100), linewidth=2, color='blue')\n\n# Create a scatter plot with different antialiased values\nax.scatter(np.random.rand(100), np.random.rand(100), antialiased=True, color='blue')\n\n# Create a scatter plot with different s values\nax.scatter(np.random.rand(100), np.random.rand(100), s=np.random.rand(100)*100, color='blue')\n\n# Create a scatter plot with different c values\nax.scatter(np.random.rand(100), np.random.rand(100), c=np.random.rand(100), cmap='Blues')\n\n# Create a scatter plot with different marker values\nax.scatter(np.random.rand(100), np.random.rand(100), marker='o', color='blue')\n\n# Create a scatter plot with different edgecolor values\nax.scatter(np.random.rand(100), np.random.rand(100), edgecolor='black', facecolor='blue')\n\n# Create a scatter plot with different alpha values\nax.scatter(np.random.rand(100), np.random.rand(100), alpha=0.5, color='blue')\n\n# Create a scatter plot with different zorder values\nax.scatter(np.random.rand(100), np.random.rand(100), zorder=10, color='blue')\n\n# Create a scatter plot with different linewidths\nax.scatter(np.random.rand(100), np.random.rand(100), linewidth=2, color='blue')\n\n# Create a scatter plot with different antialiased values\nax.scatter(np.random.rand(100), np.random.rand(100), antialiased=True, color='blue')\n\n# Create a scatter plot with different s values\nax.scatter(np.random.rand(100), np.random.rand(100), s=np.random.rand(100)*100, color='blue')\n\n# Create a scatter plot with different c values\nax.scatter(np.random.rand(100), np.random.rand(100), c=np.random.rand(100), cmap='Blues')\n\n# Create a scatter plot with different marker values\nax.scatter(np.random.rand(100), np.random.rand(100), marker='o', color='blue')\n\n# Create a scatter plot with different edgecolor values\nax.scatter(np.random.rand(100), np.random.rand(100), edgecolor='black', facecolor='blue')\n\n# Create a scatter plot with different alpha values\nax.scatter(np.random.rand(100), np.random.rand(100), alpha=0.5, color='blue')\n\n# Create a scatter plot with different zorder values\nax.scatter(np.random.rand(100), np.random.rand(100), zorder=10, color='blue')\n\n# Create a scatter plot with different linewidths\nax.scatter(np.random.rand(100), np.random.rand(100), linewidth=2, color='blue')\n\n# Create a scatter plot with different antialiased values\nax.scatter(np.random.rand(100), np.random.rand(100), antialiased=True, color='blue')\n\n# Create a scatter plot with different s values\nax.scatter(np.random.rand(100), np.random.rand(100), s=np.random.rand(100)*100, color='blue')\n\n# Create a scatter plot with different c values\nax.scatter(np.random.rand(100), np.random.rand(100), c=np.random.rand(100), cmap='Blues')\n\n# Create a scatter plot with different marker values\nax.scatter(np.random.rand(100), np.random.rand(100), marker='o', color='blue')\n\n# Create a scatter plot with different edgecolor values\nax.scatter(np.random.rand(100), np.random.rand(100), edgecolor='black', facecolor='blue')\n\n# Create a scatter plot with different alpha values\nax.scatter(np.random.rand(100), np.random.rand(100), alpha=0.5, color='blue')\n\n# Create a scatter plot with different zorder values\nax.scatter(np.random.rand(100), np.random.rand(100), zorder=10, color='blue')\n\n# Create a scatter plot with different linewidths\nax.scatter(np.random.rand(100), np.random.rand(100), linewidth=2, color='blue')\n\n# Create a scatter plot with different antialiased values\nax.scatter(np.random.rand(100), np.random.rand(100), antialiased=True, color='blue')\n\n# Create a scatter plot with different s values\nax.scatter(np.random.rand(100), np.random.rand(100), s=np.random.rand(100)*100, color='blue')\n\n# Create a scatter plot with different c values\nax.scatter(np.random.rand(100), np.random.rand(100), c=np.random.rand(100), cmap='Blues')\n\n# Create a scatter plot with different marker values\nax.scatter(np.random.rand(100), np.random.rand(100), marker='o', color='blue')\n\n# Create a scatter plot with different edgecolor values\nax.scatter(np.random.rand(100), np.random.rand(100), edgecolor='black', facecolor='blue')\n\n# Create a scatter plot with different alpha values\nax.scatter(np.random.rand(100), np.random.rand(100), alpha=0.5, color='blue')\n\n# Create a scatter plot with different zorder values\nax.scatter(np.random.rand(100), np.random.rand(100), zorder=10, color='blue')\n\n# Create a scatter plot with different linewidths\nax.scatter(np.random.rand(100), np.random.rand(100), linewidth=2, color='blue')\n\n# Create a scatter plot with different antialiased values\nax.scatter(np.random.rand(100), np.random.rand(100), antialiased=True, color='blue')\n\n# Create a scatter plot with different s values\nax.scatter(np.random.rand(100), np.random.rand(100), s=np.random.rand(100)*100, color='blue')\n\n# Create a scatter plot with different c values\nax.scatter(np.random.rand(100), np.random.rand(100), c=np.random.rand(100), cmap='Blues')\n\n# Create a scatter plot with different marker values\nax.scatter(np.random.rand(100), np.random.rand(100), marker='o', color='blue')\n\n# Create a scatter plot with different edgecolor values\nax.scatter(np.random.rand(100), np.random.rand(100), edgecolor='black', facecolor='blue')\n\n# Create a scatter plot with different alpha values\nax.scatter(np.random.rand(100), np.random.rand(100), alpha=0.5, color='blue')\n\n# Create a scatter plot with different zorder values\nax.scatter(np.random.rand(100), np.random.rand(100), zorder=10, color='blue')\n\n# Create a scatter plot with different linewidths\nax.scatter(np.random.rand(100), np.random.rand(100), linewidth=2, color='blue')\n\n# Create a scatter plot with different antiali"}
{"file": "dataset/ori_500/CB_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Set the background color of the plot\nax.set_facecolor('white')\n\n# Set the title of the plot\nax.set_title('Fish Population Data')\n\n# Set the x-axis label\nax.set_xlabel('Relative Cluster Size')\n\n# Set the y-axis label\nax.set_ylabel('Average Norm of Difference Vectors')\n\n# Set the x-axis limits\nax.set_xlim(25, 45)\n\n# Set the y-axis limits\nax.set_ylim(-10, 35)\n\n# Add a rectangle for each species\nspecies_rectangles = [\n    (0.1, 0.9, 0.2, 0.1, 'red'),\n    (0.3, 0.7, 0.2, 0.1, 'green'),\n    (0.5, 0.5, 0.2, 0.1, 'blue')\n]\n\nfor rect in species_rectangles:\n    ax.add_patch(plt.Rectangle(rect[0], rect[1], rect[2], rect[3], color=rect[4]))\n\n# Add a scatter plot for each species\nspecies_scatter_plots = [\n    (0.1, 0.9, 0.2, 0.1, 'red'),\n    (0.3, 0.7, 0.2, 0.1, 'green'),\n    (0.5, 0.5, 0.2, 0.1, 'blue')\n]\n\nfor scatter in species_scatter_plots:\n    ax.scatter(scatter[0], scatter[1], s=scatter[2]*100, c=scatter[3])\n\n# Add a legend\nax.legend(['teens', 'children', 'adults'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the x-axis and y-axis limits\nax.set_xlim(0, 128)\nax.set_ylim(0, 128)\n\n# Set the x-axis and y-axis labels\nax.set_xlabel('HC_first (before aging)')\nax.set_ylabel('HC_first (after aging)')\n\n# Create a scatter plot with blue dots\nax.scatter([0, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 104, 112, 120], [99.6, 99.9, 99.9, 99.9, 99.9, 99.9, 99.9, 99.9, 99.9, 99.9, 99.9, 99.9, 99.9, 99.9, 99.9, 99.9], color='blue')\n\n# Create a line plot with black line\nax.plot([0, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 104, 112, 120], [99.6, 99.9, 99.9, 99.9, 99.9, 99.9, 99.9, 99.9, 99.9, 99.9, 99.9, 99.9, 99.9, 99.9, 99.9, 99.9], color='black')\n\n# Add a title to the plot\nax.set_title('Heart Rate Change Over Time')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Set the background color of the plot\nax.set_facecolor('white')\n\n# Set the title of the plot\nax.set_title('TMS Score vs Sequence ID')\n\n# Set the x-axis label\nax.set_xlabel('Sequence ID')\n\n# Set the y-axis label\nax.set_ylabel('TMS Score')\n\n# Set the x-axis limits\nax.set_xlim(0, 1)\n\n# Set the y-axis limits\nax.set_ylim(0, 1)\n\n# Set the x-axis ticks\nax.set_xticks(np.arange(0, 1.1, 0.1))\n\n# Set the y-axis ticks\nax.set_yticks(np.arange(0, 1.1, 0.1))\n\n# Set the x-axis tick labels\nax.set_xticklabels(['0.0', '0.1', '0.2', '0.3', '0.4', '0.5', '0.6', '0.7', '0.8', '0.9', '1.0'])\n\n# Set the y-axis tick labels\nax.set_yticklabels(['0.0', '0.1', '0.2', '0.3', '0.4', '0.5', '0.6', '0.7', '0.8', '0.9', '1.0'])\n\n# Set the grid lines\nax.grid(True)\n\n# Set the aspect ratio of the plot\nax.set_aspect('equal')\n\n# Set the face color of the grid lines\nax.grid(color='blue', linestyle='-', linewidth=0.5)\n\n# Set the face color of the plot\nax.set_facecolor('lightblue')\n\n# Set the face color of the plot\nax.set_facecolor('lightgreen')\n\n# Set the face color of the plot\nax.set_facecolor('lightgrey')\n\n# Set the face color of the plot\nax.set_facecolor('lightpink')\n\n# Set the face color of the plot\nax.set_facecolor('lightyellow')\n\n# Set the face color of the plot\nax.set_facecolor('navy')\n\n# Set the face color of the plot\nax.set_facecolor('olive')\n\n# Set the face color of the plot\nax.set_facecolor('orange')\n\n# Set the face color of the plot\nax.set_facecolor('purple')\n\n# Set the face color of the plot\nax.set_facecolor('red')\n\n# Set the face color of the plot\nax.set_facecolor('silver')\n\n# Set the face color of the plot\nax.set_facecolor('teal')\n\n# Set the face color of the plot\nax.set_facecolor('white')\n\n# Set the face color of the plot\nax.set_facecolor('yellow')\n\n# Set the face color of the plot\nax.set_facecolor('black')\n\n# Set the face color of the plot\nax.set_facecolor('brown')\n\n# Set the face color of the plot\nax.set_facecolor('cyan')\n\n# Set the face color of the plot\nax.set_facecolor('fuchsia')\n\n# Set the face color of the plot\nax.set_facecolor('gold')\n\n# Set the face color of the plot\nax.set_facecolor('gray')\n\n# Set the face color of the plot\nax.set_facecolor('green')\n\n# Set the face color of the plot\nax.set_facecolor('indigo')\n\n# Set the face color of the plot\nax.set_facecolor('khaki')\n\n# Set the face color of the plot\nax.set_facecolor('lavender')\n\n# Set the face color of the plot\nax.set_facecolor('lime')\n\n# Set the face color of the plot\nax.set_facecolor('magenta')\n\n# Set the face color of the plot\nax.set_facecolor('maroon')\n\n# Set the face color of the plot\nax.set_facecolor('navy')\n\n# Set the face color of the plot\nax.set_facecolor('olive')\n\n# Set the face color of the plot\nax.set_facecolor('orange')\n\n# Set the face color of the plot\nax.set_facecolor('purple')\n\n# Set the face color of the plot\nax.set_facecolor('red')\n\n# Set the face color of the plot\nax.set_facecolor('silver')\n\n# Set the face color of the plot\nax.set_facecolor('teal')\n\n# Set the face color of the plot\nax.set_facecolor('white')\n\n# Set the face color of the plot\nax.set_facecolor('yellow')\n\n# Set the face color of the plot\nax.set_facecolor('black')\n\n# Set the face color of the plot\nax.set_facecolor('brown')\n\n# Set the face color of the plot\nax.set_facecolor('cyan')\n\n# Set the face color of the plot\nax.set_facecolor('fuchsia')\n\n# Set the face color of the plot\nax.set_facecolor('gold')\n\n# Set the face color of the plot\nax.set_facecolor('gray')\n\n# Set the face color of the plot\nax.set_facecolor('green')\n\n# Set the face color of the plot\nax.set_facecolor('indigo')\n\n# Set the face color of the plot\nax.set_facecolor('khaki')\n\n# Set the face color of the plot\nax.set_facecolor('lavender')\n\n# Set the face color of the plot\nax.set_facecolor('lime')\n\n# Set the face color of the plot\nax.set_facecolor('magenta')\n\n# Set the face color of the plot\nax.set_facecolor('maroon')\n\n# Set the face color of the plot\nax.set_facecolor('navy')\n\n# Set the face color of the plot\nax.set_facecolor('olive')\n\n# Set the face color of the plot\nax.set_facecolor('orange')\n\n# Set the face color of the plot\nax.set_facecolor('purple')\n\n# Set the face color of the plot\nax.set_facecolor('red')\n\n# Set the face color of the plot\nax.set_facecolor('silver')\n\n# Set the face color of the plot\nax.set_facecolor('teal')\n\n# Set the face color of the plot\nax.set_facecolor('white')\n\n# Set the face color of the plot\nax.set_facecolor('yellow')\n\n# Set the face color of the plot\nax.set_facecolor('black')\n\n# Set the face color of the plot\nax.set_facecolor('brown')\n\n# Set the face color of the plot\nax.set_facecolor('cyan')\n\n# Set the face color of the plot\nax.set_facecolor('fuchsia')\n\n# Set the face color of the plot\nax.set_facecolor('gold')\n\n# Set the face color of the plot\nax.set_facecolor('gray')\n\n# Set the face color of the plot\nax.set_facecolor('green')\n\n# Set the face color of the plot\nax.set_facecolor('indigo')\n\n# Set the face color of the plot\nax.set_facecolor('khaki')\n\n# Set the face color of the plot\nax.set_facecolor('lavender')\n\n# Set the face color of the plot\nax.set_facecolor('lime')\n\n# Set the face color of the plot\nax.set_facecolor('magenta')\n\n# Set the face color of the plot\nax.set_facecolor('maroon')\n\n# Set the face color of the plot\nax.set_facecolor('navy')\n\n# Set the face color of the plot\nax.set_facecolor('olive')\n\n# Set the face color of the plot\nax.set_facecolor('orange')\n\n# Set the face color of the plot\nax.set_facecolor('purple')\n\n# Set the face color of the plot\nax.set_facecolor('red')\n\n# Set the face color of the plot\nax.set_facecolor('silver')\n\n# Set the face color of the plot\nax.set_facecolor('teal')\n\n# Set the face color of the plot\nax.set_facecolor('white')\n\n# Set the face color of the plot\nax.set_facecolor('yellow')\n\n# Set the face color of the plot\nax.set_facecolor('black')\n\n# Set the face color of the plot\nax.set_facecolor('brown')\n\n# Set the face color of the plot\nax.set_facecolor('cyan')\n\n# Set the face color of the plot\nax.set_facecolor('fuchsia')\n\n# Set the face color of the plot\nax.set_facecolor('gold')\n\n# Set the face color of the plot\nax.set_facecolor('gray')\n\n# Set the face color of the plot\nax.set_facecolor('green')\n\n# Set the face color of the plot\nax.set_facecolor('indigo')\n\n# Set the face color of the plot\nax.set_facecolor('khaki')\n\n# Set the face color of the plot\nax.set_facecolor('lavender')\n\n# Set the face color of the plot\nax.set_facecolor('lime')\n\n# Set the face color of the plot\nax.set_facecolor('magenta')\n\n# Set the face color of the plot\nax.set_facecolor('maroon')\n\n# Set the face color of the plot\nax.set_facecolor('navy')\n\n# Set the face color of the plot\nax.set_facecolor('olive')\n\n# Set the face color of the plot\nax.set_facecolor('orange')\n\n# Set the face color of the plot\nax.set_facecolor('purple')\n\n# Set the face color of the plot\nax.set_facecolor('red')\n\n# Set the face color of the plot\nax.set_facecolor('silver')\n\n# Set the face color of the plot\nax.set_facecolor('teal')\n\n# Set the face color of the plot\nax.set_facecolor('white')\n\n# Set the face color of the plot\nax.set_facecolor('yellow')\n\n# Set the face color of the plot\nax.set_facecolor('black')\n\n# Set the face color of the plot\nax.set_facecolor('brown')\n\n# Set the face color of the plot\nax.set_facecolor('cyan')\n\n# Set the face color of the plot\nax.set_facecolor('fuchsia')\n\n# Set the face color of the plot\nax.set_facecolor('gold')\n\n# Set the face color of the plot\nax.set_facecolor('gray')\n\n# Set the face color of the plot\nax.set_facecolor('green')\n\n# Set the face color of the plot\nax.set_facecolor('indigo')\n\n# Set the face color of the plot\nax.set_facecolor('khaki')\n\n# Set the face color of the plot\nax.set_facecolor('lavender')\n\n# Set the face color of the plot\nax.set_facecolor('lime')\n\n# Set the face color of the plot\nax.set_facecolor('magenta')\n\n# Set the face color of the plot\nax.set_facecolor('maroon')\n\n# Set the face color of the plot\nax.set_facecolor('navy')\n\n# Set the face color of the plot\nax.set_facecolor('olive')\n\n# Set the face color of the plot\nax.set_facecolor('orange')\n\n# Set the face color of the plot\nax.set_facecolor('purple')\n\n# Set the face color of the plot\nax.set_facecolor('red')\n\n# Set the face color of the plot\nax.set_facecolor('silver')\n\n# Set the face color of the plot\nax.set_facecolor('teal')\n\n# Set the face color of the plot\nax.set_facecolor('white')\n\n# Set the face color of the plot\nax.set_facecolor('yellow')\n\n# Set the face color of the plot\nax.set_facecolor('black')\n\n# Set the face color of the plot\nax.set_facecolor('brown')\n\n# Set the face color of the plot\nax.set_facecolor('cyan')\n\n# Set the face color of the plot\nax.set_facecolor('fuchsia')\n\n# Set the face color of the plot\nax.set_facecolor('gold')\n\n# Set the face color of the plot\nax.set_facecolor('gray')\n\n# Set the face color of the plot\nax.set_facecolor('green')\n\n# Set the face color of the plot\nax.set_facecolor('indigo')\n\n# Set the face color of the plot\nax.set_facecolor('khaki')\n\n# Set the face color of the plot\nax.set_facecolor('lavender')\n\n# Set the face color of the plot\nax.set_facecolor('lime')\n\n# Set the face color of the plot\nax.set_facecolor('magenta')\n\n# Set the face color of the plot\nax.set_facecolor('maroon')\n\n# Set the face color of the plot\nax.set_facecolor('navy')\n\n# Set the face color of the plot\nax.set_facecolor('olive')\n\n# Set the face color of the plot\nax.set_facecolor('orange')\n\n# Set the face color of the plot\nax.set_facecolor('purple')\n\n# Set the face color of the plot\nax.set_facecolor('red')\n\n# Set the face color of the plot\nax.set_facecolor('silver')\n\n# Set the face color of the plot\nax.set_facecolor('teal')\n\n# Set the face color of the plot\nax.set_facecolor('white')\n\n# Set the face color of the plot\nax.set_facecolor('yellow')\n\n# Set the face color of the plot\nax.set_facecolor('black')\n\n# Set the face color of the plot\nax.set_facecolor('brown')\n\n# Set the face color of the plot\nax.set_facecolor('cyan')\n\n# Set the face color of the plot\nax.set_facecolor('fuchsia')\n\n# Set the face color of the plot\nax.set_facecolor('gold')\n\n# Set the face color of the plot\nax.set_facecolor('gray')\n\n# Set the face color of the plot\nax.set_facecolor('green')\n\n# Set the face color of the plot\nax.set_facecolor('indigo')\n\n# Set the face color of the plot\nax.set_facecolor('khaki')\n\n# Set the face color of the plot\nax.set_facecolor('lavender')\n\n# Set the face color of the plot\nax.set_facecolor('lime')\n\n# Set the face color of the plot\nax.set_facecolor('magenta')\n\n# Set the face color of the plot\nax.set_facecolor('maroon')\n\n# Set the face color of the plot\nax.set_facecolor('navy')\n\n# Set the face color of the plot\nax.set_facecolor('olive')\n\n# Set the face color of the plot\nax.set_facecolor('orange')\n\n# Set the face color of the plot\nax.set_facecolor('purple')\n\n# Set the face color of the plot\nax.set_facecolor('red')\n\n# Set the face color of the plot\nax.set_facecolor('silver')\n\n# Set the face color of the plot\nax.set_facecolor('teal')\n\n# Set the face color of the plot\nax.set_facecolor('white')\n\n# Set the face color of the plot\nax.set_facecolor('yellow')\n\n# Set the face color of the plot\nax.set_facecolor('black')\n\n# Set the face color of the plot\nax.set_facecolor('brown')\n\n# Set the face color of the plot\nax.set_facecolor('cyan')\n\n# Set the face color of the plot\nax.set_facecolor('fuchsia')\n\n# Set the face color of the plot\nax.set_facecolor('gold')\n\n# Set the face color of the plot\nax.set_facecolor('gray')\n\n# Set the face color of the plot\nax.set_facecolor('green')\n\n# Set the face color of the plot\nax.set_facecolor('indigo')\n\n# Set the face color of the plot\nax.set_facecolor('khaki')\n\n# Set the face color of the plot\nax.set_facecolor('lavender')\n\n# Set the face color of the plot\nax.set_facecolor('lime')\n\n# Set the face color of the plot\nax.set_facecolor('magenta')\n\n# Set the face color of the plot\nax.set_facecolor('maroon')\n\n# Set the face color of the plot\nax.set_facecolor('navy')\n\n# Set the face color of the plot\nax.set_facecolor('olive')\n\n# Set the face color of the plot\nax.set_facecolor('orange')\n\n# Set the face color of the plot\nax.set_facecolor('purple')\n\n# Set the face color of the plot\nax.set_facecolor('red')\n\n# Set the face color of the plot\nax.set_facecolor('silver')\n\n# Set the face color of the plot\nax.set_facecolor('teal')\n\n# Set the face color of the plot\nax.set_facecolor('white')\n\n# Set the face color of the plot\nax.set_facecolor('yellow')\n\n# Set the face color of the plot\nax.set_facecolor('black')\n\n# Set the face color of the plot\nax.set_facecolor('brown')\n\n# Set the face color of the plot\nax.set_facecolor('cyan')\n\n# Set the face color of the plot\nax.set_facecolor('fuchsia')\n\n# Set the face color of the plot\nax.set_facecolor('gold')\n\n# Set the face color of the plot\nax.set_facecolor('gray')\n\n# Set the face color of the plot\nax.set_facecolor('green')\n\n# Set the face color of the plot\nax.set_facecolor('indigo')\n\n# Set the face color of the plot\nax.set_facecolor('khaki')\n\n# Set the face color of the plot\nax.set_facecolor('lavender')\n\n# Set the face color of the plot\nax.set_facecolor('lime')\n\n# Set the face color of the plot\nax.set_facecolor('magenta')\n\n# Set the face color of the plot\nax.set_facecolor('maroon')\n\n# Set the face color of the plot\nax.set_facecolor('navy')\n\n# Set the face color of the plot\nax.set_facecolor('olive')\n\n# Set the face color of the plot\nax.set_facecolor('orange')\n\n# Set the face color of the plot\nax.set_facecolor('purple')\n\n# Set the face color of the plot\nax.set_facecolor('red')\n\n# Set the face color of the plot\nax.set_facecolor('silver')\n\n# Set the face color of the plot\nax.set_facecolor('teal')\n\n# Set the face color of the plot\nax.set_facecolor('white')\n\n# Set the face color of the plot\nax.set_facecolor('yellow')\n\n# Set the face color of the plot\nax.set_facecolor('black')\n\n# Set the face color of the plot\nax.set_facecolor('brown')\n\n# Set the face color of the plot\nax.set_facecolor('cyan')\n\n# Set the face color of the plot\nax.set_facecolor('fuchsia')\n\n# Set the face color of the plot\nax.set_facecolor('gold')\n\n# Set the face color of the plot\nax.set_facecolor('gray')\n\n# Set the face color of the plot\nax.set_facecolor('green')\n\n# Set the face color of the plot\nax.set_facecolor('indigo')\n\n# Set the face color of the plot\nax.set_facecolor('khaki')\n\n# Set the face color of the plot\nax.set_facecolor('lavender')\n\n# Set the face color of the plot\nax.set_facecolor('lime')\n\n# Set the face color of the plot\nax.set_facecolor('magenta')\n\n# Set the face color of the plot\nax.set_facecolor('maroon')\n\n# Set the face color of the plot\nax.set_facecolor('navy')\n\n# Set the face color of the plot\nax.set_face"}
{"file": "dataset/ori_500/CB_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nyears = [4211, 2411, 2141, 1124]\nvalues = [0.9628, 0.9604, 0.9624, 0.9592]\nsums = [0.9641, 0.9641, 0.9624, 0.9561]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot the data\nax.plot(years, values, 'b-o', label='Values')\nax.plot(years, sums, 'r-o', label='Sum (SRCC + PLCC)')\n\n# Set the title and labels\nax.set_title('SRCC and PLCC values with their sum for different modes')\nax.set_xlabel('Modes')\nax.set_ylabel('Values')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 3.0))\n\n# Create a bar chart\nax.bar([0, 1, 2, 3], [176, 176, 176, 176], color='blue')\nax.set_xlabel('Client')\nax.set_ylabel('Revenue')\n\n# Add a title\nax.set_title('IIID-1 SDMT')\n\n# Create a scatter plot\nax.scatter([0, 1, 2, 3], [0, 0, 0, 0], color='red')\n\n# Create a pie chart\nax.pie([176, 176, 176, 176], colors=['blue', 'blue', 'blue', 'blue'])\n\n# Create a histogram\nax.hist([176, 176, 176, 176], bins=5, color='blue')\n\n# Create a line chart\nax.plot([0, 1, 2, 3], [176, 176, 176, 176], color='blue')\n\n# Create a box plot\nax.boxplot([176, 176, 176, 176], vert=False, patch_artist=True)\n\n# Create a violin plot\nax.violinplot([176, 176, 176, 176], showmeans=True)\n\n# Create a heatmap\nax.imshow([[176, 176, 176, 176]], cmap='Blues')\n\n# Create a contour plot\nX, Y = np.meshgrid(np.linspace(0, 1, 10), np.linspace(0, 1, 10))\nZ = np.sin(X) + np.cos(Y)\nax.contourf(X, Y, Z, cmap='Blues')\n\n# Create a scatter plot with different colors\nax.scatter([0, 1, 2, 3], [0, 0, 0, 0], c=['blue', 'blue', 'blue', 'blue'])\n\n# Create a scatter plot with different sizes\nax.scatter([0, 1, 2, 3], [0, 0, 0, 0], s=[100, 200, 300, 400])\n\n# Create a scatter plot with different markers\nax.scatter([0, 1, 2, 3], [0, 0, 0, 0], marker='o')\n\n# Create a scatter plot with different alpha values\nax.scatter([0, 1, 2, 3], [0, 0, 0, 0], alpha=0.5)\n\n# Create a scatter plot with different edge colors\nax.scatter([0, 1, 2, 3], [0, 0, 0, 0], edgecolor='black')\n\n# Create a scatter plot with different edge widths\nax.scatter([0, 1, 2, 3], [0, 0, 0, 0], linewidth=2)\n\n# Create a scatter plot with different face colors\nax.scatter([0, 1, 2, 3], [0, 0, 0, 0], facecolor='blue')\n\n# Create a scatter plot with different hatch patterns\nax.scatter([0, 1, 2, 3], [0, 0, 0, 0], hatch='///')\n\n# Create a scatter plot with different zorder values\nax.scatter([0, 1, 2, 3], [0, 0, 0, 0], zorder=10)\n\n# Create a scatter plot with different clip_on values\nax.scatter([0, 1, 2, 3], [0, 0, 0, 0], clip_on=False)\n\n# Create a scatter plot with different transform values\nax.scatter([0, 1, 2, 3], [0, 0, 0, 0], transform=ax.transAxes)\n\n# Create a scatter plot with different picker values\nax.scatter([0, 1, 2, 3], [0, 0, 0, 0], picker=True)\n\n# Create a scatter plot with different snap values\nax.scatter([0, 1, 2, 3], [0, 0, 0, 0], snap=True)\n\n# Create a scatter plot with different visible values\nax.scatter([0, 1, 2, 3], [0, 0, 0, 0], visible=True)\n\n# Create a scatter plot with different path_effects values\nax.scatter([0, 1, 2, 3], [0, 0, 0, 0], path_effects=[PathPatchEffect()])\n\n# Create a scatter plot with different antialiased values\nax.scatter([0, 1, 2, 3], [0, 0, 0, 0], antialiased=True)\n\n# Create a scatter plot with different rasterized values\nax.scatter([0, 1, 2, 3], [0, 0, 0, 0], rasterized=True)\n\n# Create a scatter plot with different capsize values\nax.scatter([0, 1, 2, 3], [0, 0, 0, 0], capsize=5)\n\n# Create a scatter plot with different error_kw values\nax.scatter([0, 1, 2, 3], [0, 0, 0, 0], error_kw={'ecolor': 'red', 'capthick': 2})\n\n# Create a scatter plot with different xerr values\nax.scatter([0, 1, 2, 3], [0, 0, 0, 0], xerr=[0.1, 0.2, 0.3, 0.4])\n\n# Create a scatter plot with different yerr values\nax.scatter([0, 1, 2, 3], [0, 0, 0, 0], yerr=[0.1, 0.2, 0.3, 0.4])\n\n# Create a scatter plot with different ecolor values\nax.scatter([0, 1, 2, 3], [0, 0, 0, 0], ecolor='red')\n\n# Create a scatter plot with different capthick values\nax.scatter([0, 1, 2, 3], [0, 0, 0, 0], capthick=2)\n\n# Create a scatter plot with different capsize values\nax.scatter([0, 1, 2, 3], [0, 0, 0, 0], capsize=5)\n\n# Create a scatter plot with different ecolor values\nax.scatter([0, 1, 2, 3], [0, 0, 0, 0], ecolor='red')\n\n# Create a scatter plot with different capthick values\nax.scatter([0, 1, 2, 3], [0, 0, 0, 0], capthick=2)\n\n# Create a scatter plot with different capsize values\nax.scatter([0, 1, 2, 3], [0, 0, 0, 0], capsize=5)\n\n# Create a scatter plot with different ecolor values\nax.scatter([0, 1, 2, 3], [0, 0, 0, 0], ecolor='red')\n\n# Create a scatter plot with different capthick values\nax.scatter([0, 1, 2, 3], [0, 0, 0, 0], capthick=2)\n\n# Create a scatter plot with different capsize values\nax.scatter([0, 1, 2, 3], [0, 0, 0, 0], capsize=5)\n\n# Create a scatter plot with different ecolor values\nax.scatter([0, 1, 2, 3], [0, 0, 0, 0], ecolor='red')\n\n# Create a scatter plot with different capthick values\nax.scatter([0, 1, 2, 3], [0, 0, 0, 0], capthick=2)\n\n# Create a scatter plot with different capsize values\nax.scatter([0, 1, 2, 3], [0, 0, 0, 0], capsize=5)\n\n# Create a scatter plot with different ecolor values\nax.scatter([0, 1, 2, 3], [0, 0, 0, 0], ecolor='red')\n\n# Create a scatter plot with different capthick values\nax.scatter([0, 1, 2, 3], [0, 0, 0, 0], capthick=2)\n\n# Create a scatter plot with different capsize values\nax.scatter([0, 1, 2, 3], [0, 0, 0, 0], capsize=5)\n\n# Create a scatter plot with different ecolor values\nax.scatter([0, 1, 2, 3], [0, 0, 0, 0], ecolor='red')\n\n# Create a scatter plot with different capthick values\nax.scatter([0, 1, 2, 3], [0, 0, 0, 0], capthick=2)\n\n# Create a scatter plot with different capsize values\nax.scatter([0, 1, 2, 3], [0, 0, 0, 0], capsize=5)\n\n# Create a scatter plot with different ecolor values\nax.scatter([0, 1, 2, 3], [0, 0, 0, 0], ecolor='red')\n\n# Create a scatter plot with different capthick values\nax.scatter([0, 1, 2, 3], [0, 0, 0, 0], capthick=2)\n\n# Create a scatter plot with different capsize values\nax.scatter([0, 1, 2, 3], [0, 0, 0, 0], capsize=5)\n\n# Create a scatter plot with different ecolor values\nax.scatter([0, 1, 2, 3], [0, 0, 0, 0], ecolor='red')\n\n# Create a scatter plot with different capthick values\nax.scatter([0, 1, 2, 3], [0, 0, 0, 0], capthick=2)\n\n# Create a scatter plot with different capsize values\nax.scatter([0, 1, 2, 3], [0, 0, 0, 0], capsize=5)\n\n# Create a scatter plot with different ecolor values\nax.scatter([0, 1, 2, 3], [0, 0, 0, 0], ecolor='red')\n\n# Create a scatter plot with different capthick values\nax.scatter([0, 1, 2, 3], [0, 0, 0, 0], capthick=2)\n\n# Create a scatter plot with different capsize values\nax.scatter([0, 1, 2, 3], [0, 0, 0, 0], capsize=5)\n\n# Create a scatter plot with different ecolor values\nax.scatter([0, 1, 2, 3], [0, 0, 0, 0], ecolor='red')\n\n# Create a scatter plot with different capthick values\nax.scatter([0, 1, 2, 3], [0, 0, 0, 0], capthick=2)\n\n# Create a scatter plot with different capsize values\nax.scatter([0, 1, 2, 3], [0, 0, 0, 0], capsize=5)\n\n# Create a scatter plot with different ecolor values\nax.scatter([0, 1, 2, 3], [0, 0, 0, 0], ecolor='red')\n\n# Create a scatter plot with different capthick values\nax.scatter([0, 1, 2, 3], [0, 0, 0, 0], capthick=2)\n\n# Create a scatter plot with different capsize values\nax.scatter([0, 1, 2, 3], [0, 0, 0, 0], capsize=5)\n\n# Create a scatter plot with different ecolor values\nax.scatter([0, 1, 2, 3], [0, 0, 0, 0], ecolor='red')\n\n# Create a scatter plot with different capthick values\nax.scatter([0, 1, 2, 3], [0, 0, 0, 0], capthick=2)\n\n# Create a scatter plot with different capsize values\nax.scatter([0, 1, 2, 3], [0, 0, 0, 0], capsize=5)\n\n# Create a scatter plot with different ecolor values\nax.scatter([0, 1, 2, 3], [0, 0, 0, 0], ecolor='red')\n\n# Create a scatter plot with different capthick values\nax.scatter([0, 1, 2, 3], [0, 0, 0, 0], capthick=2)\n\n# Create a scatter plot with different capsize values\nax.scatter([0, 1, 2, 3], [0, 0, 0, 0], capsize=5)\n\n# Create a scatter plot with different ecolor values\nax.scatter([0, 1, 2, 3], [0, 0, 0, 0], ecolor='red')\n\n# Create a scatter plot with different capthick values\nax.scatter([0, 1, 2, 3], [0, 0, 0, 0], capthick=2)\n\n# Create a scatter plot with different capsize values\nax.scatter([0, 1, 2, 3], [0, 0, 0, 0], capsize=5)\n\n# Create a scatter plot with different ecolor values\nax.scatter([0, 1, 2, 3], [0, 0, 0, 0], ecolor='red')\n\n# Create a scatter plot with different capthick values\nax.scatter([0, 1, 2, 3], [0, 0, 0, 0], capthick=2)\n\n# Create a scatter plot with different capsize values\nax.scatter([0, 1, 2, 3], [0, 0, 0, 0], capsize=5)\n\n# Create a scatter plot with different ecolor values\nax.scatter([0, 1, 2, 3], [0, 0, 0, 0], ecolor='red')\n\n# Create a scatter plot with different capthick values\nax.scatter([0, 1, 2, 3], [0, 0, 0, 0], capthick=2)\n\n# Create a scatter plot with different capsize values\nax.scatter([0, 1, 2, 3], [0, 0, 0, 0], capsize=5)\n\n# Create a scatter plot with different ecolor values\nax.scatter([0, 1, 2, 3], [0, 0, 0, 0], ecolor='red')\n\n# Create a scatter plot with different capthick values\nax.scatter([0, 1, 2, 3], [0, 0, 0, 0], capthick=2)\n\n# Create a scatter plot with different capsize values\nax.scatter([0, 1, 2, 3], [0, 0, 0, 0], capsize=5)\n\n# Create a scatter plot with different ecolor values\nax.scatter([0, 1, 2, 3], [0, 0, 0, 0], ecolor='red')\n\n# Create a scatter plot with different capthick values\nax.scatter([0, 1, 2, 3], [0, 0, 0, 0], capthick=2)\n\n# Create a scatter plot with different capsize values\nax.scatter([0, 1, 2, 3], [0, 0, 0, 0], capsize=5)\n\n# Create a scatter plot with different ecolor values\nax.scatter([0, 1, 2, 3], [0, 0, 0, 0], ecolor='red')\n\n# Create a scatter plot with different capthick values\nax.scatter([0, 1, 2, 3], [0, 0, 0, 0], capthick=2)\n\n# Create a scatter plot with different capsize values\nax.scatter([0, 1, 2, 3], [0, 0, 0, 0], capsize=5)\n\n# Create a scatter plot with different ecolor values\nax.scatter([0, 1, 2, 3], [0, 0, 0, 0], ecolor='red')\n\n# Create a scatter plot with different capthick values\nax.scatter([0, 1, 2, 3], [0, 0, 0, 0], capthick=2)\n\n# Create a scatter plot with different capsize values\nax.scatter([0, 1, 2, 3], [0, 0, 0, 0], capsize=5)\n\n# Create a scatter plot with different ecolor values\nax.scatter([0, 1, 2, 3], [0, 0, 0, 0], ecolor='red')\n\n# Create a scatter plot with different capthick values\nax.scatter([0, 1, 2, 3], [0, 0, 0, 0], capthick=2)\n\n# Create a scatter plot with different capsize values\nax.scatter([0, 1, 2, 3], [0, 0, 0, 0], capsize=5)\n\n# Create a scatter plot with different ecolor values\nax.scatter([0, 1, 2, 3], [0, 0, 0, 0], ecolor='red')\n\n"}
{"file": "dataset/ori_500/HR_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\nax.set_title('Compact Spiral with Elliptical Hollow Center')\nax.set_xlabel('X-axis')\nax.set_ylabel('Y-axis')\n\n# Draw the spiral\ntheta = np.linspace(0, 10*np.pi, 1000)\nr = 5 + 2.5 * np.sin(3*theta)\nx = r * np.cos(theta)\ny = r * np.sin(theta)\nax.plot(x, y, 'b-')\n\n# Draw the hollow center\ncircle = plt.Circle((0, 0), 0.5, color='r', fill=False)\nax.add_artist(circle)\n\n# Draw the blue line\nline, = ax.plot([0, 0], [0, 0], 'b-', lw=2)\nline.set_xdata([0, 0])\nline.set_ydata([0, 0])\n\n# Set the limits of the plot\nax.set_xlim(-10, 10)\nax.set_ylim(-10, 10)\n\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 7.0))\n\n# Set the title of the plot\nax.set_title('DAXPY memory bandwidth')\n\n# Set the x-axis label\nax.set_xlabel('Flops/byte')\n\n# Set the y-axis label\nax.set_ylabel('Time (s)')\n\n# Set the x-axis limits\nax.set_xlim(10**-1, 10**1)\n\n# Set the y-axis limits\nax.set_ylim(10**-1, 10**1)\n\n# Set the x-axis ticks\nax.set_xticks([10**-1, 10**0, 10**1])\n\n# Set the y-axis ticks\nax.set_yticks([10**-1, 10**0, 10**1])\n\n# Set the x-axis tick labels\nax.set_xticklabels(['10^-1', '10^0', '10^1'])\n\n# Set the y-axis tick labels\nax.set_yticklabels(['10^-1', '10^0', '10^1'])\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot title\nax.set_title('DAXPY memory bandwidth', color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('Flops/byte', color='black')\n\n# Set the color of the y-axis label\nax.set_ylabel('Time (s)', color='black')\n\n# Set the color of the x-axis ticks\nax.set_xticklabels(['10^-1', '10^0', '10^1'], color='black')\n\n# Set the color of the y-axis ticks\nax.set_yticklabels(['10^-1', '10^0', '10^1'], color='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot title\nax.set_title('DAXPY memory bandwidth', color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('Flops/byte', color='black')\n\n# Set the color of the y-axis label\nax.set_ylabel('Time (s)', color='black')\n\n# Set the color of the x-axis ticks\nax.set_xticklabels(['10^-1', '10^0', '10^1'], color='black')\n\n# Set the color of the y-axis ticks\nax.set_yticklabels(['10^-1', '10^0', '10^1'], color='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot title\nax.set_title('DAXPY memory bandwidth', color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('Flops/byte', color='black')\n\n# Set the color of the y-axis label\nax.set_ylabel('Time (s)', color='black')\n\n# Set the color of the x-axis ticks\nax.set_xticklabels(['10^-1', '10^0', '10^1'], color='black')\n\n# Set the color of the y-axis ticks\nax.set_yticklabels(['10^-1', '10^0', '10^1'], color='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot title\nax.set_title('DAXPY memory bandwidth', color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('Flops/byte', color='black')\n\n# Set the color of the y-axis label\nax.set_ylabel('Time (s)', color='black')\n\n# Set the color of the x-axis ticks\nax.set_xticklabels(['10^-1', '10^0', '10^1'], color='black')\n\n# Set the color of the y-axis ticks\nax.set_yticklabels(['10^-1', '10^0', '10^1'], color='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot title\nax.set_title('DAXPY memory bandwidth', color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('Flops/byte', color='black')\n\n# Set the color of the y-axis label\nax.set_ylabel('Time (s)', color='black')\n\n# Set the color of the x-axis ticks\nax.set_xticklabels(['10^-1', '10^0', '10^1'], color='black')\n\n# Set the color of the y-axis ticks\nax.set_yticklabels(['10^-1', '10^0', '10^1'], color='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot title\nax.set_title('DAXPY memory bandwidth', color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('Flops/byte', color='black')\n\n# Set the color of the y-axis label\nax.set_ylabel('Time (s)', color='black')\n\n# Set the color of the x-axis ticks\nax.set_xticklabels(['10^-1', '10^0', '10^1'], color='black')\n\n# Set the color of the y-axis ticks\nax.set_yticklabels(['10^-1', '10^0', '10^1'], color='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot title\nax.set_title('DAXPY memory bandwidth', color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('Flops/byte', color='black')\n\n# Set the color of the y-axis label\nax.set_ylabel('Time (s)', color='black')\n\n# Set the color of the x-axis ticks\nax.set_xticklabels(['10^-1', '10^0', '10^1'], color='black')\n\n# Set the color of the y-axis ticks\nax.set_yticklabels(['10^-1', '10^0', '10^1'], color='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot title\nax.set_title('DAXPY memory bandwidth', color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('Flops/byte', color='black')\n\n# Set the color of the y-axis label\nax.set_ylabel('Time (s)', color='black')\n\n# Set the color of the x-axis ticks\nax.set_xticklabels(['10^-1', '10^0', '10^1'], color='black')\n\n# Set the color of the y-axis ticks\nax.set_yticklabels(['10^-1', '10^0', '10^1'], color='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot title\nax.set_title('DAXPY memory bandwidth', color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('Flops/byte', color='black')\n\n# Set the color of the y-axis label\nax.set_ylabel('Time (s)', color='black')\n\n# Set the color of the x-axis ticks\nax.set_xticklabels(['10^-1', '10^0', '10^1'], color='black')\n\n# Set the color of the y-axis ticks\nax.set_yticklabels(['10^-1', '10^0', '10^1'], color='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot title\nax.set_title('DAXPY memory bandwidth', color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('Flops/byte', color='black')\n\n# Set the color of the y-axis label\nax.set_ylabel('Time (s)', color='black')\n\n# Set the color of the x-axis ticks\nax.set_xticklabels(['10^-1', '10^0', '10^1'], color='black')\n\n# Set the color of the y-axis ticks\nax.set_yticklabels(['10^-1', '10^0', '10^1'], color='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot title\nax.set_title('DAXPY memory bandwidth', color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('Flops/byte', color='black')\n\n# Set the color of the y-axis label\nax.set_ylabel('Time (s)', color='black')\n\n# Set the color of the x-axis ticks\nax.set_xticklabels(['10^-1', '10^0', '10^1'], color='black')\n\n# Set the color of the y-axis ticks\nax.set_yticklabels(['10^-1', '10^0', '10^1'], color='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot title\nax.set_title('DAXPY memory bandwidth', color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('Flops/byte', color='black')\n\n# Set the color of the y-axis label\nax.set_ylabel('Time (s)', color='black')\n\n# Set the color of the x-axis ticks\nax.set_xticklabels(['10^-1', '10^0', '10^1'], color='black')\n\n# Set the color of the y-axis ticks\nax.set_yticklabels(['10^-1', '10^0', '10^1'], color='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot title\nax.set_title('DAXPY memory bandwidth', color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('Flops/byte', color='black')\n\n# Set the color of the y-axis label\nax.set_ylabel('Time (s)', color='black')\n\n# Set the color of the x-axis ticks\nax.set_xticklabels(['10^-1', '10^0', '10^1'], color='black')\n\n# Set the color of the y-axis ticks\nax.set_yticklabels(['10^-1', '10^0', '10^1'], color='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot title\nax.set_title('DAXPY memory bandwidth', color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('Flops/byte', color='black')\n\n# Set the color of the y-axis label\nax.set_ylabel('Time (s)', color='black')\n\n# Set the color of the x-axis ticks\nax.set_xticklabels(['10^-1', '10^0', '10^1'], color='black')\n\n# Set the color of the y-axis ticks\nax.set_yticklabels(['10^-1', '10^0', '10^1'], color='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue"}
{"file": "dataset/ori_500/HR_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the x-axis limits\nax.set_xlim(0.45, 0.75)\n\n# Set the y-axis limits\nax.set_ylim(-0.01, 0.75)\n\n# Set the x-axis tick labels\nax.set_xticks([0.45, 0.5, 0.55, 0.6, 0.65, 0.7, 0.75])\n\n# Set the y-axis tick labels\nax.set_yticks([-0.01, 0.02, 0.04, 0.06, 0.08, 0.1, 0.12, 0.14, 0.16, 0.18, 0.2, 0.22, 0.24, 0.26, 0.28, 0.3, 0.32, 0.34, 0.36, 0.38, 0.4, 0.42, 0.44, 0.46, 0.48, 0.5, 0.52, 0.54, 0.56, 0.58, 0.6, 0.62, 0.64, 0.66, 0.68, 0.7, 0.72, 0.74, 0.76, 0.78, 0.8, 0.82, 0.84, 0.86, 0.88, 0.9, 0.92, 0.94, 0.96, 0.98, 1.0])\n\n# Set the x-axis tick label rotation\nax.set_xticklabels(['f(x) = 0.45', 'f(x) = 0.50', 'f(x) = 0.55', 'f(x) = 0.60', 'f(x) = 0.65', 'f(x) = 0.70', 'f(x) = 0.75'], rotation=45)\n\n# Set the y-axis tick label rotation\nax.set_yticklabels(['f(x) = -0.01', 'f(x) = 0.02', 'f(x) = 0.04', 'f(x) = 0.06', 'f(x) = 0.08', 'f(x) = 0.10', 'f(x) = 0.12', 'f(x) = 0.14', 'f(x) = 0.16', 'f(x) = 0.18', 'f(x) = 0.20', 'f(x) = 0.22', 'f(x) = 0.24', 'f(x) = 0.26', 'f(x) = 0.28', 'f(x) = 0.30', 'f(x) = 0.32', 'f(x) = 0.34', 'f(x) = 0.36', 'f(x) = 0.38', 'f(x) = 0.40', 'f(x) = 0.42', 'f(x) = 0.44', 'f(x) = 0.46', 'f(x) = 0.48', 'f(x) = 0.50', 'f(x) = 0.52', 'f(x) = 0.54', 'f(x) = 0.56', 'f(x) = 0.58', 'f(x) = 0.60', 'f(x) = 0.62', 'f(x) = 0.64', 'f(x) = 0.66', 'f(x) = 0.68', 'f(x) = 0.70', 'f(x) = 0.72', 'f(x) = 0.74', 'f(x) = 0.76', 'f(x) = 0.78', 'f(x) = 0.80', 'f(x) = 0.82', 'f(x) = 0.84', 'f(x) = 0.86', 'f(x) = 0.88', 'f(x) = 0.90', 'f(x) = 0.92', 'f(x) = 0.94', 'f(x) = 0.96', 'f(x) = 0.98', 'f(x) = 1.00'])\n\n# Set the x-axis tick label color\nax.tick_params(axis='x', colors='red')\n\n# Set the y-axis tick label color\nax.tick_params(axis='y', colors='blue')\n\n# Set the x-axis tick label font size\nax.tick_params(axis='x', labelsize=10)\n\n# Set the y-axis tick label font size\nax.tick_params(axis='y', labelsize=10)\n\n# Set the x-axis tick label font weight\nax.tick_params(axis='x', labelweight='bold')\n\n# Set the y-axis tick label font weight\nax.tick_params(axis='y', labelweight='bold')\n\n# Set the x-axis tick label font style\nax.tick_params(axis='x', labelstyle='italic')\n\n# Set the y-axis tick label font style\nax.tick_params(axis='y', labelstyle='italic')\n\n# Set the x-axis tick label font family\nax.tick_params(axis='x', labelfamily='serif')\n\n# Set the y-axis tick label font family\nax.tick_params(axis='y', labelfamily='sans-serif')\n\n# Set the x-axis tick label font variant\nax.tick_params(axis='x', labelvariant='small-caps')\n\n# Set the y-axis tick label font variant\nax.tick_params(axis='y', labelvariant='normal')\n\n# Set the x-axis tick label font stretch\nax.tick_params(axis='x', labelstretch='ultra-condensed')\n\n# Set the y-axis tick label font stretch\nax.tick_params(axis='y', labelstretch='ultra-expanded')\n\n# Set the x-axis tick label font size\nax.tick_params(axis='x', labelsize=10)\n\n# Set the y-axis tick label font size\nax.tick_params(axis='y', labelsize=10)\n\n# Set the x-axis tick label font weight\nax.tick_params(axis='x', labelweight='bold')\n\n# Set the y-axis tick label font weight\nax.tick_params(axis='y', labelweight='bold')\n\n# Set the x-axis tick label font style\nax.tick_params(axis='x', labelstyle='italic')\n\n# Set the y-axis tick label font style\nax.tick_params(axis='y', labelstyle='italic')\n\n# Set the x-axis tick label font family\nax.tick_params(axis='x', labelfamily='serif')\n\n# Set the y-axis tick label font family\nax.tick_params(axis='y', labelfamily='sans-serif')\n\n# Set the x-axis tick label font variant\nax.tick_params(axis='x', labelvariant='small-caps')\n\n# Set the y-axis tick label font variant\nax.tick_params(axis='y', labelvariant='normal')\n\n# Set the x-axis tick label font stretch\nax.tick_params(axis='x', labelstretch='ultra-condensed')\n\n# Set the y-axis tick label font stretch\nax.tick_params(axis='y', labelstretch='ultra-expanded')\n\n# Set the x-axis tick label font size\nax.tick_params(axis='x', labelsize=10)\n\n# Set the y-axis tick label font size\nax.tick_params(axis='y', labelsize=10)\n\n# Set the x-axis tick label font weight\nax.tick_params(axis='x', labelweight='bold')\n\n# Set the y-axis tick label font weight\nax.tick_params(axis='y', labelweight='bold')\n\n# Set the x-axis tick label font style\nax.tick_params(axis='x', labelstyle='italic')\n\n# Set the y-axis tick label font style\nax.tick_params(axis='y', labelstyle='italic')\n\n# Set the x-axis tick label font family\nax.tick_params(axis='x', labelfamily='serif')\n\n# Set the y-axis tick label font family\nax.tick_params(axis='y', labelfamily='sans-serif')\n\n# Set the x-axis tick label font variant\nax.tick_params(axis='x', labelvariant='small-caps')\n\n# Set the y-axis tick label font variant\nax.tick_params(axis='y', labelvariant='normal')\n\n# Set the x-axis tick label font stretch\nax.tick_params(axis='x', labelstretch='ultra-condensed')\n\n# Set the y-axis tick label font stretch\nax.tick_params(axis='y', labelstretch='ultra-expanded')\n\n# Set the x-axis tick label font size\nax.tick_params(axis='x', labelsize=10)\n\n# Set the y-axis tick label font size\nax.tick_params(axis='y', labelsize=10)\n\n# Set the x-axis tick label font weight\nax.tick_params(axis='x', labelweight='bold')\n\n# Set the y-axis tick label font weight\nax.tick_params(axis='y', labelweight='bold')\n\n# Set the x-axis tick label font style\nax.tick_params(axis='x', labelstyle='italic')\n\n# Set the y-axis tick label font style\nax.tick_params(axis='y', labelstyle='italic')\n\n# Set the x-axis tick label font family\nax.tick_params(axis='x', labelfamily='serif')\n\n# Set the y-axis tick label font family\nax.tick_params(axis='y', labelfamily='sans-serif')\n\n# Set the x-axis tick label font variant\nax.tick_params(axis='x', labelvariant='small-caps')\n\n# Set the y-axis tick label font variant\nax.tick_params(axis='y', labelvariant='normal')\n\n# Set the x-axis tick label font stretch\nax.tick_params(axis='x', labelstretch='ultra-condensed')\n\n# Set the y-axis tick label font stretch\nax.tick_params(axis='y', labelstretch='ultra-expanded')\n\n# Set the x-axis tick label font size\nax.tick_params(axis='x', labelsize=10)\n\n# Set the y-axis tick label font size\nax.tick_params(axis='y', labelsize=10)\n\n# Set the x-axis tick label font weight\nax.tick_params(axis='x', labelweight='bold')\n\n# Set the y-axis tick label font weight\nax.tick_params(axis='y', labelweight='bold')\n\n# Set the x-axis tick label font style\nax.tick_params(axis='x', labelstyle='italic')\n\n# Set the y-axis tick label font style\nax.tick_params(axis='y', labelstyle='italic')\n\n# Set the x-axis tick label font family\nax.tick_params(axis='x', labelfamily='serif')\n\n# Set the y-axis tick label font family\nax.tick_params(axis='y', labelfamily='sans-serif')\n\n# Set the x-axis tick label font variant\nax.tick_params(axis='x', labelvariant='small-caps')\n\n# Set the y-axis tick label font variant\nax.tick_params(axis='y', labelvariant='normal')\n\n# Set the x-axis tick label font stretch\nax.tick_params(axis='x', labelstretch='ultra-condensed')\n\n# Set the y-axis tick label font stretch\nax.tick_params(axis='y', labelstretch='ultra-expanded')\n\n# Set the x-axis tick label font size\nax.tick_params(axis='x', labelsize=10)\n\n# Set the y-axis tick label font size\nax.tick_params(axis='y', labelsize=10)\n\n# Set the x-axis tick label font weight\nax.tick_params(axis='x', labelweight='bold')\n\n# Set the y-axis tick label font weight\nax.tick_params(axis='y', labelweight='bold')\n\n# Set the x-axis tick label font style\nax.tick_params(axis='x', labelstyle='italic')\n\n# Set the y-axis tick label font style\nax.tick_params(axis='y', labelstyle='italic')\n\n# Set the x-axis tick label font family\nax.tick_params(axis='x', labelfamily='serif')\n\n# Set the y-axis tick label font family\nax.tick_params(axis='y', labelfamily='sans-serif')\n\n# Set the x-axis tick label font variant\nax.tick_params(axis='x', labelvariant='small-caps')\n\n# Set the y-axis tick label font variant\nax.tick_params(axis='y', labelvariant='normal')\n\n# Set the x-axis tick label font stretch\nax.tick_params(axis='x', labelstretch='ultra-condensed')\n\n# Set the y-axis tick label font stretch\nax.tick_params(axis='y', labelstretch='ultra-expanded')\n\n# Set the x-axis tick label font size\nax.tick_params(axis='x', labelsize=10)\n\n# Set the y-axis tick label font size\nax.tick_params(axis='y', labelsize=10)\n\n# Set the x-axis tick label font weight\nax.tick_params(axis='x', labelweight='bold')\n\n# Set the y-axis tick label font weight\nax.tick_params(axis='y', labelweight='bold')\n\n# Set the x-axis tick label font style\nax.tick_params(axis='x', labelstyle='italic')\n\n# Set the y-axis tick label font style\nax.tick_params(axis='y', labelstyle='italic')\n\n# Set the x-axis tick label font family\nax.tick_params(axis='x', labelfamily='serif')\n\n# Set the y-axis tick label font family\nax.tick_params(axis='y', labelfamily='sans-serif')\n\n# Set the x-axis tick label font variant\nax.tick_params(axis='x', labelvariant='small-caps')\n\n# Set the y-axis tick label font variant\nax.tick_params(axis='y', labelvariant='normal')\n\n# Set the x-axis tick label font stretch\nax.tick_params(axis='x', labelstretch='ultra-condensed')\n\n# Set the y-axis tick label font stretch\nax.tick_params(axis='y', labelstretch='ultra-expanded')\n\n# Set the x-axis tick label font size\nax.tick_params(axis='x', labelsize=10)\n\n# Set the y-axis tick label font size\nax.tick_params(axis='y', labelsize=10)\n\n# Set the x-axis tick label font weight\nax.tick_params(axis='x', labelweight='bold')\n\n# Set the y-axis tick label font weight\nax.tick_params(axis='y', labelweight='bold')\n\n# Set the x-axis tick label font style\nax.tick_params(axis='x', labelstyle='italic')\n\n# Set the y-axis tick label font style\nax.tick_params(axis='y', labelstyle='italic')\n\n# Set the x-axis tick label font family\nax.tick_params(axis='x', labelfamily='serif')\n\n# Set the y-axis tick label font family\nax.tick_params(axis='y', labelfamily='sans-serif')\n\n# Set the x-axis tick label font variant\nax.tick_params(axis='x', labelvariant='small-caps')\n\n# Set the y-axis tick label font variant\nax.tick_params(axis='y', labelvariant='normal')\n\n# Set the x-axis tick label font stretch\nax.tick_params(axis='x', labelstretch='ultra-condensed')\n\n# Set the y-axis tick label font stretch\nax.tick_params(axis='y', labelstretch='ultra-expanded')\n\n# Set the x-axis tick label font size\nax.tick_params(axis='x', labelsize=10)\n\n# Set the y-axis tick label font size\nax.tick_params(axis='y', labelsize=10)\n\n# Set the x-axis tick label font weight\nax.tick_params(axis='x', labelweight='bold')\n\n# Set the y-axis tick label font weight\nax.tick_params(axis='y', labelweight='bold')\n\n# Set the x-axis tick label font style\nax.tick_params(axis='x', labelstyle='italic')\n\n# Set the y-axis tick label font style\nax.tick_params(axis='y', labelstyle='italic')\n\n# Set the x-axis tick label font family\nax.tick_params(axis='x', labelfamily='serif')\n\n# Set the y-axis tick label font family\nax.tick_params(axis='y', labelfamily='sans-serif')\n\n# Set the x-axis tick label font variant\nax.tick_params(axis='x', labelvariant='small-caps')\n\n# Set the y-axis tick label font variant\nax.tick_params(axis='y', labelvariant='normal')\n\n# Set the x-axis tick label font stretch\nax.tick_params(axis='x', labelstretch='ultra-condensed')\n\n# Set the y-axis tick label font stretch\nax.tick_params(axis='y', labelstretch='ultra-expanded')\n\n# Set the x-axis tick label font size\nax.tick_params(axis='x', labelsize=10)\n\n# Set the y-axis tick label font size\nax.tick_params(axis='y', labelsize=10)\n\n# Set the x-axis tick label font weight\nax.tick_params(axis='x', labelweight='bold')\n\n# Set the y-axis tick label font weight\nax.tick_params(axis='y', labelweight='bold')\n\n# Set the x-axis tick label font style\nax.tick_params(axis='x', labelstyle='italic')\n\n# Set the y-axis tick label font style\nax.tick_params(axis='y', labelstyle='italic')\n\n# Set the x-axis tick label font family\nax.tick_params(axis='x', labelfamily='serif')\n\n# Set the y-axis tick label font family\nax.tick_params(axis='y', labelfamily='sans-serif')\n\n# Set the x-axis tick label font variant\nax.tick_params(axis='x', labelvariant='small-caps')\n\n# Set the y-axis tick label font variant\nax.tick_params(axis='y', labelvariant='normal')\n\n# Set the x-axis tick label font stretch\nax.tick_params(axis='x', labelstretch='ultra-condensed')\n\n# Set the y-axis tick label font stretch\nax.tick_params(axis='y', labelstretch='ultra-expanded')\n\n# Set the x-axis tick label font size\nax.tick_params(axis='x', labelsize=10)\n\n# Set the y-axis tick label font size\nax.tick_params(axis='y', labelsize=10)\n\n# Set the x-axis tick label font weight\nax.tick_params(axis='x', labelweight='bold')\n\n# Set the y-axis tick label font weight\nax.tick_params(axis='y', labelweight='bold')\n\n# Set the x-axis tick label font style\nax.tick_params(axis='x', labelstyle='italic')\n\n# Set the y-axis tick label font style\nax.tick_params(axis='y', labelstyle='italic')\n\n# Set the x-axis tick label font family\nax.tick_params(axis='x', labelfamily='serif')\n\n# Set the y-axis tick label font family\nax.tick_params(axis='y', labelfamily='sans-serif')\n\n# Set the x-axis tick label font variant\nax.tick_params(axis='x', label"}
{"file": "dataset/ori_500/HR_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Create a circle for the logo\ncircle = plt.Circle((0.5, 0.5), 0.4, color='orange')\nax.add_artist(circle)\n\n# Create a rectangle for the chatbot\nrect = plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='green')\nax.add_artist(rect)\n\n# Create a rectangle for the age\nrect = plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='pink')\nax.add_artist(rect)\n\n# Create a rectangle for the gender\nrect = plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='orange')\nax.add_artist(rect)\n\n# Set the aspect ratio of the plot to be equal\nax.set_aspect('equal')\n\n# Set the limits of the plot\nax.set_xlim(0, 1)\nax.set_ylim(0, 1)\n\n# Set the title of the plot\nax.set_title('CigaR')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Qwen-VR-Max')\n\n# Create a color map for the levels\ncmap = plt.get_cmap('tab20')\n\n# Create a list of colors for each level\ncolors = [cmap(i) for i in range(10)]\n\n# Create a list of labels for each level\nlabels = ['Level 1', 'Level 2', 'Level 3', 'Level 4', 'Level 5']\n\n# Create a list of values for each level\nvalues = [10, 20, 30, 40, 50]\n\n# Create a pie chart with the levels\nwedges, texts, autotexts = ax.pie(values, colors=colors, labels=labels, autopct='%1.1f%%')\n\n# Add a legend to the plot\nax.legend(wedges, labels, title=\"Levels\", loc=\"center left\", bbox_to_anchor=(1, 0, 0.5, 1))\n\n# Set the aspect ratio of the plot to be equal\nax.axis('equal')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis for the first plot\nfig1, ax1 = plt.subplots(figsize=(10, 4))\nax1.set_title('Approximation Error')\nax1.set_xlabel('Number of matvecs m')\nax1.set_ylabel('||A - A\u0302||F')\nax1.plot([1, 2, 3, 4], [1e-1, 1e-2, 1e-3, 1e-4], 'o-', color='purple')\nax1.plot([1, 2, 3, 4], [1e-2, 1e-3, 1e-4, 1e-5], 'o-', color='pink')\nax1.plot([1, 2, 3, 4], [1e-3, 1e-4, 1e-5, 1e-6], 'o-', color='orange')\n\n# Create a figure and axis for the second plot\nfig2, ax2 = plt.subplots(figsize=(10, 4))\nax2.set_title('Sparse Recovery Error')\nax2.set_xlabel('Number of matvecs m')\nax2.set_ylabel('||S\u0302A \u2212 A\u0302||F')\nax2.plot([1, 2, 3, 4], [1e-1, 1e-2, 1e-3, 1e-4], 'o-', color='purple')\nax2.plot([1, 2, 3, 4], [1e-2, 1e-3, 1e-4, 1e-5], 'o-', color='pink')\nax2.plot([1, 2, 3, 4], [1e-3, 1e-4, 1e-5, 1e-6], 'o-', color='orange')\n\n# Display the plots\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_16.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Draw a circle\ncircle = plt.Circle((0.5, 0.5), 0.4, color='black')\nax.add_artist(circle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='lightgreen')\nax.add_artist(rectangle)\n\n# Draw a triangle\ntriangle = plt.Polygon([[0.3, 0.7], [0.7, 0.7], [0.5, 0.9]], color='lightblue')\nax.add_artist(triangle)\n\n# Draw a star\nstar = plt.Polygon([[0.5, 0.1], [0.4, 0.3], [0.6, 0.3], [0.5, 0.5], [0.4, 0.7], [0.6, 0.7]], color='lightsalmon')\nax.add_artist(star)\n\n# Set the aspect ratio to be equal so circles look round\nax.set_aspect('equal')\n\n# Set the limits of the plot\nax.set_xlim(0, 1)\nax.set_ylim(0, 1)\n\n# Remove the axes\nax.axis('off')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_17.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 5.0))\n\n# Define the data\nx = np.linspace(0, 100, 100)\ny1 = np.sin(x)\ny2 = np.cos(x)\ny3 = np.tan(x)\ny4 = np.exp(x)\ny5 = np.log(x)\n\n# Plot the data\nax.plot(x, y1, 'g-')  # Green line for sine wave\nax.plot(x, y2, 'r-')  # Red line for cosine wave\nax.plot(x, y3, 'b-')  # Blue line for tangent wave\nax.plot(x, y4, 'y-')  # Yellow line for exponential wave\nax.plot(x, y5, 'm-')  # Magenta line for logarithmic wave\n\n# Set the limits of the x-axis\nax.set_xlim([0, 100])\n\n# Set the limits of the y-axis\nax.set_ylim([-4, 140])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_18.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(7, 5))\n\n# Set the title of the plot\nax.set_title('Uncertainty in Thermal Conductivity Measurements')\n\n# Create a grid of subplots\ngs = ax.grid(True)\n\n# Create a color map for the plots\ncmap = plt.cm.viridis\n\n# Create a scatter plot for each sample\nfor i in range(10):\n    x = np.random.rand(10)\n    y = np.random.rand(10)\n    ax.scatter(x, y, c=cmap(i/10), label=f'Sample {i}')\n\n# Add a legend to the plot\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_19.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ngames = ['I', 'II', 'III', 'IV', 'V']\nscores = [28, 35, 26, 20, 10]\nplayer_a_scores = [22, 20, 20, 22, 28]\nplayer_b_scores = [30, 35, 25, 20, 30]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(7, 5))\n\n# Plot the scores\nax.plot(games, scores, label='Scores')\n\n# Plot the player A scores\nax.plot(games, player_a_scores, label='Player A')\n\n# Plot the player B scores\nax.plot(games, player_b_scores, label='Player B')\n\n# Set the title and labels\nax.set_title('Scores by number of game and players')\nax.set_xlabel('Games')\nax.set_ylabel('Score')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_2.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Plot the data\nax.plot([0, 1, 2, 3, 4, 5, 6], [0, 1, 2, 3, 4, 5, 6], 'ro-')\n\n# Set the title and labels\nax.set_title('Variable 1 vs Variable 2')\nax.set_xlabel('Variable 1')\nax.set_ylabel('Variable 2')\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/HR_20.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\nteams = ['Female Player', 'Male Player', 'LLM Player', 'Person Player']\nsentiments = [5.7, 6.2, 5.2, 3.4]\nprices = [5.7, 6.0, 5.2, 3.1]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Plot the data\nax.plot(teams, sentiments, 'g--o')\nax.plot(teams, prices, 'b--o')\n\n# Set the title and labels\nax.set_title('Trustee Scenario')\nax.set_xlabel('Teams')\nax.set_ylabel('Sentiment Score')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_21.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(7.0, 5.0))\n\n# Set the title of the plot\nax.set_title('Endurance Race Performance Analysis')\n\n# Set the x-axis label\nax.set_xlabel('Seconds Since Start')\n\n# Set the y-axis label\nax.set_ylabel('Performance')\n\n# Create a bar chart with the data\nax.bar([1, 2, 3, 4, 5], [100, 120, 130, 140, 150], color='green')\nax.bar([1, 2, 3, 4, 5], [110, 130, 140, 150, 160], color='orange')\nax.bar([1, 2, 3, 4, 5], [120, 140, 150, 160, 170], color='red')\n\n# Add a rectangle to represent the race interruption\nrect = plt.Rectangle((2, 120), 1, 50, color='black')\nax.add_patch(rect)\n\n# Add a text box to display the race interruption message\nax.text(2, 180, 'Race interrupted due to weather', fontsize=12, verticalalignment='top')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_22.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(7.0, 5.0))\n\n# Create a scatter plot\nax.scatter(np.random.rand(10), np.random.rand(10), color='green')\n\n# Set the title of the plot\nax.set_title('Control Group')\n\n# Set the x and y labels\nax.set_xlabel('Number of Observations')\nax.set_ylabel('Value Range')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_23.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ndates = ['2019-01', '2019-02', '2019-03', '2019-04', '2019-05', '2019-06', '2019-07']\nprices = [350, 150, -50, -120, 200, 75, -300]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Plot the data\nax.plot(dates, prices, marker='o')\n\n# Set the title and labels\nax.set_title('Waterfall Chart')\nax.set_xlabel('Date')\nax.set_ylabel('Price')\n\n# Set the grid\nax.grid(True)\n\n# Set the limits of the x-axis\nax.set_xlim(min(dates), max(dates))\n\n# Set the limits of the y-axis\nax.set_ylim(-300, 350)\n\n# Set the tick marks\nax.set_xticks(dates)\nax.set_yticks(range(-300, 400, 50))\n\n# Set the color of the lines\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the ticks\nax.tick_params(axis='x', colors='black')\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the labels\nax.xaxis.label.set_color('black')\nax.yaxis.label.set_color('black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the grid\nax.grid(color = 'gray', linestyle = '--', linewidth = 0.5)\n\n# Set the color of the markers\nax.plot(dates, prices, marker='o', color='red')\n\n# Set the color of the lines\nax.plot(dates, prices, color='blue')\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Waterfall Chart', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_24.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Define the data for the plot\nx = np.linspace(-1, 1, 100)\ny = np.sin(x)\n\n# Plot the data\nax.plot(x, y)\n\n# Set the title of the plot\nax.set_title('tripcolor of Delaunay triangulation, flat shading')\n\n# Set the colorbar\ncbar = fig.colorbar(ax.images[0])\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_25.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('NonUniformImage class')\n\n# Create a grid of images\nimages = [\n    np.random.rand(10, 10),\n    np.random.rand(10, 10),\n    np.random.rand(10, 10),\n    np.random.rand(10, 10)\n]\n\n# Display the images\nfor i, img in enumerate(images):\n    ax.imshow(img, extent=[-4, 4, -4, 4], origin='lower', cmap='Oranges')\n    ax.text(0, 0, 'nearest', ha='center', va='center', color='black')\n\n# Set the x and y limits\nax.set_xlim(-4, 4)\nax.set_ylim(-4, 4)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the first graph\nx1 = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\ny1 = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000]\n\n# Data for the second graph\nx2 = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\ny2 = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 4))\n\n# Plot the data\nax.plot(x1, y1, 'r-')\nax.plot(x2, y2, 'b-')\n\n# Set the title and labels\nax.set_title('Flickr30k vs MS-COCO')\nax.set_xlabel('Number of bits')\nax.set_ylabel('Recall sum')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Denser Points with Perfectly Circular Error Ellipses')\n\n# Set the x-axis label\nax.set_xlabel('x(m)')\n\n# Set the y-axis label\nax.set_ylabel('y(m)')\n\n# Set the x-axis limits\nax.set_xlim(0, 25)\n\n# Set the y-axis limits\nax.set_ylim(0, 30)\n\n# Create a rectangle for the Monte Carlo prediction\nrect1 = plt.Rectangle((0, 0), 10, 10, fc='red', ec='black')\nax.add_patch(rect1)\n\n# Create a rectangle for the \u00b13-\u03c3 of Prediction\nrect2 = plt.Rectangle((10, 0), 10, 10, fc='white', ec='black')\nax.add_patch(rect2)\n\n# Create a rectangle for the Mean-Taylor\nrect3 = plt.Rectangle((20, 0), 5, 10, fc='blue', ec='black')\nax.add_patch(rect3)\n\n# Create a line for the Monte Carlo prediction\nline1 = plt.Line2D([0, 25], [0, 30], color='red')\nax.add_line(line1)\n\n# Create a line for the \u00b13-\u03c3 of Prediction\nline2 = plt.Line2D([0, 25], [0, 30], color='black')\nax.add_line(line2)\n\n# Create a line for the Mean-Taylor\nline3 = plt.Line2D([0, 25], [0, 30], color='blue')\nax.add_line(line3)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Create a circle\ncircle = plt.Circle((0.5, 0.5), 0.4, color='blue')\nax.add_artist(circle)\n\n# Create a rectangle\nrectangle = plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='green')\nax.add_artist(rectangle)\n\n# Create a triangle\ntriangle = plt.Polygon([[0.1, 0.1], [0.9, 0.1], [0.5, 0.9]], color='red')\nax.add_artist(triangle)\n\n# Set the aspect ratio of the plot to be equal\nax.set_aspect('equal')\n\n# Set the limits of the plot\nax.set_xlim(0, 1)\nax.set_ylim(0, 1)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 7.0))\n\n# Set the x-axis and y-axis limits\nax.set_xlim(0, 2)\nax.set_ylim(0, 1)\n\n# Create a color map for the heatmap\ncmap = plt.get_cmap('coolwarm')\n\n# Create a heatmap with a diagonal line\nx = np.linspace(0, 2, 100)\ny = np.linspace(0, 1, 100)\nX, Y = np.meshgrid(x, y)\nZ = np.sqrt(X**2 + Y**2)\nim = ax.imshow(Z, cmap=cmap, interpolation='nearest', origin='lower')\n\n# Add a color bar\ncbar = fig.colorbar(im, ax=ax)\n\n# Set the tick labels\nax.set_xticks([0, 0.5, 1, 1.5, 2])\nax.set_yticks([0, 0.25, 0.5, 0.75, 1])\n\n# Set the tick labels\nax.set_xticklabels(['\u03b1', '\u03b2', '\u03b3', '\u03b4', '\u03b5'])\nax.set_yticklabels(['0.0', '0.25', '0.5', '0.75', '1.0'])\n\n# Set the title\nax.set_title('Heatmap of \u03b1, \u03b2, \u03b3, \u03b4, \u03b5')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis for the first plot\nfig1, ax1 = plt.subplots(figsize=(8.0, 4.0))\nax1.plot([0, 20, 40, 60, 80, 100], [0, -0.5, -1, -1.5, -2, -2.5], 'b-')\nax1.plot([0, 20, 40, 60, 80, 100], [-0.5, -1, -1.5, -2, -2.5, -3], 'g-')\nax1.plot([0, 20, 40, 60, 80, 100], [-1, -1.5, -2, -2.5, -3, -3.5], 'r-')\nax1.set_xlabel('Users (U)')\nax1.set_ylabel('Utility (f)')\nax1.set_title('Utility distribution per topic')\n\n# Create a figure and axis for the second plot\nfig2, ax2 = plt.subplots(figsize=(8.0, 4.0))\nax2.plot([0, 20, 40, 60, 80, 100], [0, 0.5, 1, 1.5, 2, 2.5], 'b-')\nax2.plot([0, 20, 40, 60, 80, 100], [0.5, 1, 1.5, 2, 2.5, 3], 'g-')\nax2.plot([0, 20, 40, 60, 80, 100], [1, 1.5, 2, 2.5, 3, 3.5], 'r-')\nax2.set_xlabel('Items (I)')\nax2.set_ylabel('Users (U)')\nax2.set_title('User preference matrix (M)')\n\n# Display the plots\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 4))\n\n# Set the x-axis limits\nax.set_xlim(-2, 4)\n\n# Set the y-axis limits\nax.set_ylim(-2, 4)\n\n# Set the x-axis ticks\nax.set_xticks(np.arange(-2, 5, 1))\n\n# Set the y-axis ticks\nax.set_yticks(np.arange(-2, 5, 1))\n\n# Set the x-axis labels\nax.set_xticklabels(['-2', '-1', '0', '1', '2', '3', '4'])\n\n# Set the y-axis labels\nax.set_yticklabels(['-2', '-1', '0', '1', '2', '3', '4'])\n\n# Set the title of the plot\nax.set_title('Reactive-2 Payoff')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('blue')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='green')\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the plot background\nax.set_facecolor('lightblue')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the plot background\nax.set_facecolor('lightblue')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the plot background\nax.set_facecolor('lightblue')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the plot background\nax.set_facecolor('lightblue')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the plot background\nax.set_facecolor('lightblue')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the plot background\nax.set_facecolor('lightblue')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the plot background\nax.set_facecolor('lightblue')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the plot background\nax.set_facecolor('lightblue')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the plot background\nax.set_facecolor('lightblue')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the plot background\nax.set_facecolor('lightblue')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the plot background\nax.set_facecolor('lightblue')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the plot background\nax.set_facecolor('lightblue')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the plot background\nax.set_facecolor('lightblue')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the plot background\nax.set_facecolor('lightblue')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the plot background\nax.set_facecolor('lightblue')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the plot background\nax.set_facecolor('lightblue')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the plot background\nax.set_facecolor('lightblue')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the plot background\nax.set_facecolor('lightblue')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the plot background\nax.set_facecolor('lightblue')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the plot background\nax.set_facecolor('lightblue')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the plot background\nax.set_facecolor('lightblue')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the plot background\nax.set_facecolor('lightblue')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the plot background\nax.set_facecolor('lightblue')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the plot background\nax.set_facecolor('lightblue')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the plot background\nax.set_facecolor('lightblue')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the plot background\nax.set_facecolor('lightblue')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the plot background\nax.set_facecolor('lightblue')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the plot background\nax.set_facecolor('lightblue')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the plot background\nax.set_facecolor('lightblue')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the plot background\nax.set_facecolor('lightblue')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the plot background\nax.set_facecolor('lightblue')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the plot background\nax.set_facecolor('lightblue')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the plot background\nax.set_facecolor('lightblue')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the plot background\nax.set_facecolor('lightblue')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the plot background\nax.set_facecolor('lightblue')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the plot background\nax.set_facecolor('lightblue')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the plot background\nax.set_facecolor('lightblue')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the plot background\nax.set_facecolor('lightblue')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the plot background\nax.set_facecolor('lightblue')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the plot background\nax.set_facecolor('lightblue')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the plot background\nax.set_facecolor('lightblue')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the plot background\nax.set_facecolor('lightblue')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the plot background\nax.set_facecolor('lightblue')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the plot background\nax.set_facecolor('lightblue')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the plot background\nax.set_facecolor('lightblue')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the plot background\nax.set_facecolor('lightblue')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the plot background\nax.set_facecolor('lightblue')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the plot background\nax.set_facecolor('lightblue')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the plot background\nax.set_facecolor('lightblue')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the plot background\nax.set_facecolor('lightblue')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the plot background\nax.set_facecolor('lightblue')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the plot background\nax.set_facecolor('lightblue')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the plot background\nax.set_facecolor('lightblue')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the plot background\nax.set_facecolor('lightblue')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the plot background\nax.set_facecolor('lightblue')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the plot background\nax.set_facecolor('lightblue')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the plot background\nax.set_facecolor('lightblue')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the plot background\nax.set_facecolor('lightblue')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the plot background\nax.set_facecolor('lightblue')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the plot background\nax.set_facecolor('lightblue')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the plot background\nax.set_facecolor('lightblue')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the plot background\nax.set_facecolor('lightblue')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the plot background\nax.set_facecolor('lightblue')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the plot background\nax.set_facecolor('lightblue')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the plot background\nax.set_facecolor('lightblue')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the plot background\nax.set_facecolor('lightblue')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the plot background\nax.set_facecolor('lightblue')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the plot background\nax.set_facecolor('lightblue')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the plot background\nax.set_facecolor('lightblue')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the plot background\nax.set_facecolor('lightblue')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the plot background\nax.set_facecolor('lightblue')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the plot background\nax.set_facecolor('lightblue')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the plot background\nax.set_facecolor('lightblue')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the plot background\nax.set_facecolor('lightblue')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the plot background\nax.set_facecolor('lightblue')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the plot background\nax.set_facecolor('lightblue')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the plot background\nax.set_facecolor('lightblue')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the plot background\nax.set_facecolor('lightblue')\n\n# Set the color"}
{"file": "dataset/ori_500/HR_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 4))\n\n# Create a scatter plot\nax.scatter(np.random.rand(50), np.random.rand(50), color='blue')\n\n# Set the title of the plot\nax.set_title('Model = Vicuna')\n\n# Set the x and y labels\nax.set_xlabel('Permeability Reduction')\nax.set_ylabel('Porosity')\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='red', alpha=0.3)\nax.add_patch(rect)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/PIP_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Set the background color of the plot\nax.set_facecolor('pink')\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0, 0), 1, 1, fc='green')\nax.add_patch(rect)\n\n# Add a line to the plot\nline, = ax.plot([0, 1], [0, 1], 'r-')\n\n# Add a scatter plot to the plot\nscatter = ax.scatter([0, 1, 2], [0, 1, 2], c='blue')\n\n# Add a text label to the plot\ntext = ax.text(0.5, 0.5, 'Hello World', fontsize=12)\n\n# Add a legend to the plot\nlegend = ax.legend(['Line', 'Scatter'], loc='upper left')\n\n# Add a title to the plot\ntitle = ax.set_title('My Plot')\n\n# Add a subtitle to the plot\nsubtitle = ax.set_xlabel('X Axis Label')\n\n# Add a y-axis label to the plot\nylabel = ax.set_ylabel('Y Axis Label')\n\n# Add a grid to the plot\ngrid = ax.grid(True)\n\n# Add a colorbar to the plot\ncbar = fig.colorbar(scatter)\n\n# Add a colorbar label to the plot\ncbar_label = cbar.set_label('Colorbar Label')\n\n# Add a colorbar orientation to the plot\ncbar_orientation = cbar.ax.set_aspect('auto')\n\n# Add a colorbar ticks to the plot\ncbar_ticks = cbar.set_ticks([0, 1, 2])\n\n# Add a colorbar tick labels to the plot\ncbar_tick_labels = cbar.set_ticklabels(['Label 1', 'Label 2', 'Label 3'])\n\n# Add a colorbar tick format to the plot\ncbar_tick_format = cbar.set_tick_params(labelsize=10)\n\n# Add a colorbar tick rotation to the plot\ncbar_tick_rotation = cbar.set_tick_params(rotation=45)\n\n# Add a colorbar tick length to the plot\ncbar_tick_length = cbar.set_tick_params(length=10)\n\n# Add a colorbar tick width to the plot\ncbar_tick_width = cbar.set_tick_params(width=2)\n\n# Add a colorbar tick pad to the plot\ncbar_tick_pad = cbar.set_tick_params(pad=5)\n\n# Add a colorbar tick color to the plot\ncbar_tick_color = cbar.set_tick_params(color='red')\n\n# Add a colorbar tick style to the plot\ncbar_tick_style = cbar.set_tick_params(style='dashed')\n\n# Add a colorbar tick alpha to the plot\ncbar_tick_alpha = cbar.set_tick_params(alpha=0.5)\n\n# Add a colorbar tick zorder to the plot\ncbar_tick_zorder = cbar.set_tick_params(zorder=10)\n\n# Add a colorbar tick hatch to the plot\ncbar_tick_hatch = cbar.set_tick_params(hatch='///')\n\n# Add a colorbar tick edgecolor to the plot\ncbar_tick_edgecolor = cbar.set_tick_params(edgecolor='blue')\n\n# Add a colorbar tick linewidth to the plot\ncbar_tick_linewidth = cbar.set_tick_params(linewidth=2)\n\n# Add a colorbar tick linestyle to the plot\ncbar_tick_linestyle = cbar.set_tick_params(linestyle='--')\n\n# Add a colorbar tick marker to the plot\ncbar_tick_marker = cbar.set_tick_params(marker='o')\n\n# Add a colorbar tick markersize to the plot\ncbar_tick_markersize = cbar.set_tick_params(markersize=10)\n\n# Add a colorbar tick markeredgewidth to the plot\ncbar_tick_markeredgewidth = cbar.set_tick_params(markeredgewidth=2)\n\n# Add a colorbar tick markeredgecolor to the plot\ncbar_tick_markeredgecolor = cbar.set_tick_params(markeredgecolor='red')\n\n# Add a colorbar tick markerfacecolor to the plot\ncbar_tick_markerfacecolor = cbar.set_tick_params(markerfacecolor='blue')\n\n# Add a colorbar tick markeredgelinecolor to the plot\ncbar_tick_markeredgelinecolor = cbar.set_tick_params(markeredgelinecolor='green')\n\n# Add a colorbar tick markeredgelinealpha to the plot\ncbar_tick_markeredgelinealpha = cbar.set_tick_params(markeredgelinealpha=0.5)\n\n# Add a colorbar tick markeredgelinezorder to the plot\ncbar_tick_markeredgelinezorder = cbar.set_tick_params(markeredgelinezorder=10)\n\n# Add a colorbar tick markeredgelinehatch to the plot\ncbar_tick_markeredgelinehatch = cbar.set_tick_params(markeredgelinehatch='///')\n\n# Add a colorbar tick markeredgelineedgecolor to the plot\ncbar_tick_markeredgelineedgecolor = cbar.set_tick_params(markeredgelineedgecolor='blue')\n\n# Add a colorbar tick markeredgelinelinewidth to the plot\ncbar_tick_markeredgelinelinewidth = cbar.set_tick_params(markeredgelinelinewidth=2)\n\n# Add a colorbar tick markeredgeline linestyle to the plot\ncbar_tick_markeredgeline linestyle = cbar.set_tick_params(markeredgeline linestyle='--')\n\n# Add a colorbar tick markeredgeline marker to the plot\ncbar_tick_markeredgeline marker = cbar.set_tick_params(markeredgeline marker='o')\n\n# Add a colorbar tick markeredgeline markersize to the plot\ncbar_tick_markeredgeline markersize = cbar.set_tick_params(markeredgeline markersize=10)\n\n# Add a colorbar tick markeredgeline markeredgewidth to the plot\ncbar_tick_markeredgeline markeredgewidth = cbar.set_tick_params(markeredgeline markeredgewidth=2)\n\n# Add a colorbar tick markeredgeline markeredgecolor to the plot\ncbar_tick_markeredgeline markeredgecolor = cbar.set_tick_params(markeredgeline markeredgecolor='red')\n\n# Add a colorbar tick markeredgeline markerfacecolor to the plot\ncbar_tick_markeredgeline markerfacecolor = cbar.set_tick_params(markeredgeline markerfacecolor='blue')\n\n# Add a colorbar tick markeredgeline markeredgelinecolor to the plot\ncbar_tick_markeredgeline markeredgelinecolor = cbar.set_tick_params(markeredgeline markeredgelinecolor='green')\n\n# Add a colorbar tick markeredgeline markeredgelinealpha to the plot\ncbar_tick_markeredgeline markeredgelinealpha = cbar.set_tick_params(markeredgeline markeredgelinealpha=0.5)\n\n# Add a colorbar tick markeredgeline markeredgelinezorder to the plot\ncbar_tick_markeredgeline markeredgelinezorder = cbar.set_tick_params(markeredgeline markeredgelinezorder=10)\n\n# Add a colorbar tick markeredgeline markeredgelinehatch to the plot\ncbar_tick_markeredgeline markeredgelinehatch = cbar.set_tick_params(markeredgeline markeredgelinehatch='///')\n\n# Add a colorbar tick markeredgeline markeredgelineedgecolor to the plot\ncbar_tick_markeredgeline markeredgelineedgecolor = cbar.set_tick_params(markeredgeline markeredgelineedgecolor='blue')\n\n# Add a colorbar tick markeredgeline markeredgelinelinewidth to the plot\ncbar_tick_markeredgeline markeredgelinelinewidth = cbar.set_tick_params(markeredgeline markeredgelinelinewidth=2)\n\n# Add a colorbar tick markeredgeline linestyle to the plot\ncbar_tick_markeredgeline linestyle = cbar.set_tick_params(markeredgeline linestyle='--')\n\n# Add a colorbar tick markeredgeline marker to the plot\ncbar_tick_markeredgeline marker = cbar.set_tick_params(markeredgeline marker='o')\n\n# Add a colorbar tick markeredgeline markersize to the plot\ncbar_tick_markeredgeline markersize = cbar.set_tick_params(markeredgeline markersize=10)\n\n# Add a colorbar tick markeredgeline markeredgewidth to the plot\ncbar_tick_markeredgeline markeredgewidth = cbar.set_tick_params(markeredgeline markeredgewidth=2)\n\n# Add a colorbar tick markeredgeline markeredgecolor to the plot\ncbar_tick_markeredgeline markeredgecolor = cbar.set_tick_params(markeredgeline markeredgecolor='red')\n\n# Add a colorbar tick markeredgeline markerfacecolor to the plot\ncbar_tick_markeredgeline markerfacecolor = cbar.set_tick_params(markeredgeline markerfacecolor='blue')\n\n# Add a colorbar tick markeredgeline markeredgelinecolor to the plot\ncbar_tick_markeredgeline markeredgelinecolor = cbar.set_tick_params(markeredgeline markeredgelinecolor='green')\n\n# Add a colorbar tick markeredgeline markeredgelinealpha to the plot\ncbar_tick_markeredgeline markeredgelinealpha = cbar.set_tick_params(markeredgeline markeredgelinealpha=0.5)\n\n# Add a colorbar tick markeredgeline markeredgelinezorder to the plot\ncbar_tick_markeredgeline markeredgelinezorder = cbar.set_tick_params(markeredgeline markeredgelinezorder=10)\n\n# Add a colorbar tick markeredgeline markeredgelinehatch to the plot\ncbar_tick_markeredgeline markeredgelinehatch = cbar.set_tick_params(markeredgeline markeredgelinehatch='///')\n\n# Add a colorbar tick markeredgeline markeredgelineedgecolor to the plot\ncbar_tick_markeredgeline markeredgelineedgecolor = cbar.set_tick_params(markeredgeline markeredgelineedgecolor='blue')\n\n# Add a colorbar tick markeredgeline markeredgelinelinewidth to the plot\ncbar_tick_markeredgeline markeredgelinelinewidth = cbar.set_tick_params(markeredgeline markeredgelinelinewidth=2)\n\n# Add a colorbar tick markeredgeline linestyle to the plot\ncbar_tick_markeredgeline linestyle = cbar.set_tick_params(markeredgeline linestyle='--')\n\n# Add a colorbar tick markeredgeline marker to the plot\ncbar_tick_markeredgeline marker = cbar.set_tick_params(markeredgeline marker='o')\n\n# Add a colorbar tick markeredgeline markersize to the plot\ncbar_tick_markeredgeline markersize = cbar.set_tick_params(markeredgeline markersize=10)\n\n# Add a colorbar tick markeredgeline markeredgewidth to the plot\ncbar_tick_markeredgeline markeredgewidth = cbar.set_tick_params(markeredgeline markeredgewidth=2)\n\n# Add a colorbar tick markeredgeline markeredgecolor to the plot\ncbar_tick_markeredgeline markeredgecolor = cbar.set_tick_params(markeredgeline markeredgecolor='red')\n\n# Add a colorbar tick markeredgeline markerfacecolor to the plot\ncbar_tick_markeredgeline markerfacecolor = cbar.set_tick_params(markeredgeline markerfacecolor='blue')\n\n# Add a colorbar tick markeredgeline markeredgelinecolor to the plot\ncbar_tick_markeredgeline markeredgelinecolor = cbar.set_tick_params(markeredgeline markeredgelinecolor='green')\n\n# Add a colorbar tick markeredgeline markeredgelinealpha to the plot\ncbar_tick_markeredgeline markeredgelinealpha = cbar.set_tick_params(markeredgeline markeredgelinealpha=0.5)\n\n# Add a colorbar tick markeredgeline markeredgelinezorder to the plot\ncbar_tick_markeredgeline markeredgelinezorder = cbar.set_tick_params(markeredgeline markeredgelinezorder=10)\n\n# Add a colorbar tick markeredgeline markeredgelinehatch to the plot\ncbar_tick_markeredgeline markeredgelinehatch = cbar.set_tick_params(markeredgeline markeredgelinehatch='///')\n\n# Add a colorbar tick markeredgeline markeredgelineedgecolor to the plot\ncbar_tick_markeredgeline markeredgelineedgecolor = cbar.set_tick_params(markeredgeline markeredgelineedgecolor='blue')\n\n# Add a colorbar tick markeredgeline markeredgelinelinewidth to the plot\ncbar_tick_markeredgeline markeredgelinelinewidth = cbar.set_tick_params(markeredgeline markeredgelinelinewidth=2)\n\n# Add a colorbar tick markeredgeline linestyle to the plot\ncbar_tick_markeredgeline linestyle = cbar.set_tick_params(markeredgeline linestyle='--')\n\n# Add a colorbar tick markeredgeline marker to the plot\ncbar_tick_markeredgeline marker = cbar.set_tick_params(markeredgeline marker='o')\n\n# Add a colorbar tick markeredgeline markersize to the plot\ncbar_tick_markeredgeline markersize = cbar.set_tick_params(markeredgeline markersize=10)\n\n# Add a colorbar tick markeredgeline markeredgewidth to the plot\ncbar_tick_markeredgeline markeredgewidth = cbar.set_tick_params(markeredgeline markeredgewidth=2)\n\n# Add a colorbar tick markeredgeline markeredgecolor to the plot\ncbar_tick_markeredgeline markeredgecolor = cbar.set_tick_params(markeredgeline markeredgecolor='red')\n\n# Add a colorbar tick markeredgeline markerfacecolor to the plot\ncbar_tick_markeredgeline markerfacecolor = cbar.set_tick_params(markeredgeline markerfacecolor='blue')\n\n# Add a colorbar tick markeredgeline markeredgelinecolor to the plot\ncbar_tick_markeredgeline markeredgelinecolor = cbar.set_tick_params(markeredgeline markeredgelinecolor='green')\n\n# Add a colorbar tick markeredgeline markeredgelinealpha to the plot\ncbar_tick_markeredgeline markeredgelinealpha = cbar.set_tick_params(markeredgeline markeredgelinealpha=0.5)\n\n# Add a colorbar tick markeredgeline markeredgelinezorder to the plot\ncbar_tick_markeredgeline markeredgelinezorder = cbar.set_tick_params(markeredgeline markeredgelinezorder=10)\n\n# Add a colorbar tick markeredgeline markeredgelinehatch to the plot\ncbar_tick_markeredgeline markeredgelinehatch = cbar.set_tick_params(markeredgeline markeredgelinehatch='///')\n\n# Add a colorbar tick markeredgeline markeredgelineedgecolor to the plot\ncbar_tick_markeredgeline markeredgelineedgecolor = cbar.set_tick_params(markeredgeline markeredgelineedgecolor='blue')\n\n# Add a colorbar tick markeredgeline markeredgelinelinewidth to the plot\ncbar_tick_markeredgeline markeredgelinelinewidth = cbar.set_tick_params(markeredgeline markeredgelinelinewidth=2)\n\n# Add a colorbar tick markeredgeline linestyle to the plot\ncbar_tick_markeredgeline linestyle = cbar.set_tick_params(markeredgeline linestyle='--')\n\n# Add a colorbar tick markeredgeline marker to the plot\ncbar_tick_markeredgeline marker = cbar.set_tick_params(markeredgeline marker='o')\n\n# Add a colorbar tick markeredgeline markersize to the plot\ncbar_tick_markeredgeline markersize = cbar.set_tick_params(markeredgeline markersize=10)\n\n# Add a colorbar tick markeredgeline markeredgewidth to the plot\ncbar_tick_markeredgeline markeredgewidth = cbar.set_tick_params(markeredgeline markeredgewidth=2)\n\n# Add a colorbar tick markeredgeline markeredgecolor to the plot\ncbar_tick_markeredgeline markeredgecolor = cbar.set_tick_params(markeredgeline markeredgecolor='red')\n\n# Add a colorbar tick markeredgeline markerfacecolor to the plot\ncbar_tick_markeredgeline markerfacecolor = cbar.set_tick_params(markeredgeline markerfacecolor='blue')\n\n# Add a colorbar tick markeredgeline markeredgelinecolor to the plot\ncbar_tick_markeredgeline markeredgelinecolor = cbar.set_tick_params(markeredgeline markeredgelinecolor='green')\n\n# Add a colorbar tick markeredgeline markeredgelinealpha to the plot\ncbar_tick_markeredgeline markeredgelinealpha = cbar.set_tick_params(markeredgeline markeredgelinealpha=0.5)\n\n# Add a colorbar tick markeredgeline markeredgelinezorder to the plot\ncbar_tick_markeredgeline markeredgelinezorder = cbar.set_tick_params(markeredgeline markeredgelinezorder=10)\n\n# Add a colorbar tick markeredgeline markeredgelinehatch to the plot\ncbar_tick_markeredgeline markeredgelinehatch = cbar.set_tick_params(markeredgeline markeredgelinehatch='///')\n\n# Add a colorbar tick markeredgeline markeredgelineedgecolor to the plot\ncbar_tick_markeredgeline markeredgelineedgecolor = cbar.set_tick_params(markeredgeline markeredgelineedgecolor='blue')\n\n# Add a colorbar tick markeredgeline markeredgelinelinewidth to the plot\ncbar_tick_markeredgeline markeredgelinelinewidth = cbar.set_tick_params(markeredgeline markeredgelinelinewidth=2)\n\n# Add a colorbar tick markeredgeline linestyle to the plot\ncbar_tick_markeredgeline linestyle = cbar.set_tick_params(markeredgeline linestyle='--')\n\n# Add a colorbar tick markeredgeline marker to the plot\ncbar_tick_markeredgeline marker = cbar.set_tick_params(markeredgeline marker='o')\n\n# Add a colorbar tick markeredgeline markersize to the plot\ncbar_tick_markeredgeline markersize = cbar.set_tick_params(markeredgeline markersize=10)\n\n# Add a colorbar tick markeredgeline markeredgewidth to the plot\ncbar_tick_markeredgeline markeredgewidth = cbar.set_tick_params(markeredgeline markeredgewidth=2)\n\n# Add a colorbar tick markeredgeline markeredgecolor to the plot\ncbar_tick_markeredgeline markeredgecolor = cbar.set_tick_params(markeredgeline markeredgecolor='red')\n\n# Add"}
{"file": "dataset/ori_500/PIP_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Exponential Scale')\n\n# Set the x-axis label\nax.set_xlabel('Gradient Steps (x 62.5K)')\n\n# Set the y-axis label\nax.set_ylabel('Exponential Scale')\n\n# Create a scatter plot with random data\nax.scatter(np.random.rand(10), np.random.rand(10), color='green')\n\n# Create a line plot with random data\nax.plot(np.random.rand(10), np.random.rand(10), color='red')\n\n# Create a rectangle patch with random data\nrect = plt.Rectangle((0.2, 0.2), 0.3, 0.3, color='blue')\nax.add_patch(rect)\n\n# Create a rectangle patch with random data\nrect = plt.Rectangle((0.4, 0.4), 0.3, 0.3, color='green')\nax.add_patch(rect)\n\n# Create a rectangle patch with random data\nrect = plt.Rectangle((0.6, 0.6), 0.3, 0.3, color='red')\nax.add_patch(rect)\n\n# Create a rectangle patch with random data\nrect = plt.Rectangle((0.8, 0.8), 0.3, 0.3, color='blue')\nax.add_patch(rect)\n\n# Create a rectangle patch with random data\nrect = plt.Rectangle((0.1, 0.1), 0.3, 0.3, color='green')\nax.add_patch(rect)\n\n# Create a rectangle patch with random data\nrect = plt.Rectangle((0.3, 0.3), 0.3, 0.3, color='red')\nax.add_patch(rect)\n\n# Create a rectangle patch with random data\nrect = plt.Rectangle((0.5, 0.5), 0.3, 0.3, color='blue')\nax.add_patch(rect)\n\n# Create a rectangle patch with random data\nrect = plt.Rectangle((0.7, 0.7), 0.3, 0.3, color='green')\nax.add_patch(rect)\n\n# Create a rectangle patch with random data\nrect = plt.Rectangle((0.9, 0.9), 0.3, 0.3, color='red')\nax.add_patch(rect)\n\n# Create a rectangle patch with random data\nrect = plt.Rectangle((0.2, 0.2), 0.3, 0.3, color='blue')\nax.add_patch(rect)\n\n# Create a rectangle patch with random data\nrect = plt.Rectangle((0.4, 0.4), 0.3, 0.3, color='green')\nax.add_patch(rect)\n\n# Create a rectangle patch with random data\nrect = plt.Rectangle((0.6, 0.6), 0.3, 0.3, color='red')\nax.add_patch(rect)\n\n# Create a rectangle patch with random data\nrect = plt.Rectangle((0.8, 0.8), 0.3, 0.3, color='blue')\nax.add_patch(rect)\n\n# Create a rectangle patch with random data\nrect = plt.Rectangle((0.1, 0.1), 0.3, 0.3, color='green')\nax.add_patch(rect)\n\n# Create a rectangle patch with random data\nrect = plt.Rectangle((0.3, 0.3), 0.3, 0.3, color='red')\nax.add_patch(rect)\n\n# Create a rectangle patch with random data\nrect = plt.Rectangle((0.5, 0.5), 0.3, 0.3, color='blue')\nax.add_patch(rect)\n\n# Create a rectangle patch with random data\nrect = plt.Rectangle((0.7, 0.7), 0.3, 0.3, color='green')\nax.add_patch(rect)\n\n# Create a rectangle patch with random data\nrect = plt.Rectangle((0.9, 0.9), 0.3, 0.3, color='red')\nax.add_patch(rect)\n\n# Create a rectangle patch with random data\nrect = plt.Rectangle((0.2, 0.2), 0.3, 0.3, color='blue')\nax.add_patch(rect)\n\n# Create a rectangle patch with random data\nrect = plt.Rectangle((0.4, 0.4), 0.3, 0.3, color='green')\nax.add_patch(rect)\n\n# Create a rectangle patch with random data\nrect = plt.Rectangle((0.6, 0.6), 0.3, 0.3, color='red')\nax.add_patch(rect)\n\n# Create a rectangle patch with random data\nrect = plt.Rectangle((0.8, 0.8), 0.3, 0.3, color='blue')\nax.add_patch(rect)\n\n# Create a rectangle patch with random data\nrect = plt.Rectangle((0.1, 0.1), 0.3, 0.3, color='green')\nax.add_patch(rect)\n\n# Create a rectangle patch with random data\nrect = plt.Rectangle((0.3, 0.3), 0.3, 0.3, color='red')\nax.add_patch(rect)\n\n# Create a rectangle patch with random data\nrect = plt.Rectangle((0.5, 0.5), 0.3, 0.3, color='blue')\nax.add_patch(rect)\n\n# Create a rectangle patch with random data\nrect = plt.Rectangle((0.7, 0.7), 0.3, 0.3, color='green')\nax.add_patch(rect)\n\n# Create a rectangle patch with random data\nrect = plt.Rectangle((0.9, 0.9), 0.3, 0.3, color='red')\nax.add_patch(rect)\n\n# Create a rectangle patch with random data\nrect = plt.Rectangle((0.2, 0.2), 0.3, 0.3, color='blue')\nax.add_patch(rect)\n\n# Create a rectangle patch with random data\nrect = plt.Rectangle((0.4, 0.4), 0.3, 0.3, color='green')\nax.add_patch(rect)\n\n# Create a rectangle patch with random data\nrect = plt.Rectangle((0.6, 0.6), 0.3, 0.3, color='red')\nax.add_patch(rect)\n\n# Create a rectangle patch with random data\nrect = plt.Rectangle((0.8, 0.8), 0.3, 0.3, color='blue')\nax.add_patch(rect)\n\n# Create a rectangle patch with random data\nrect = plt.Rectangle((0.1, 0.1), 0.3, 0.3, color='green')\nax.add_patch(rect)\n\n# Create a rectangle patch with random data\nrect = plt.Rectangle((0.3, 0.3), 0.3, 0.3, color='red')\nax.add_patch(rect)\n\n# Create a rectangle patch with random data\nrect = plt.Rectangle((0.5, 0.5), 0.3, 0.3, color='blue')\nax.add_patch(rect)\n\n# Create a rectangle patch with random data\nrect = plt.Rectangle((0.7, 0.7), 0.3, 0.3, color='green')\nax.add_patch(rect)\n\n# Create a rectangle patch with random data\nrect = plt.Rectangle((0.9, 0.9), 0.3, 0.3, color='red')\nax.add_patch(rect)\n\n# Create a rectangle patch with random data\nrect = plt.Rectangle((0.2, 0.2), 0.3, 0.3, color='blue')\nax.add_patch(rect)\n\n# Create a rectangle patch with random data\nrect = plt.Rectangle((0.4, 0.4), 0.3, 0.3, color='green')\nax.add_patch(rect)\n\n# Create a rectangle patch with random data\nrect = plt.Rectangle((0.6, 0.6), 0.3, 0.3, color='red')\nax.add_patch(rect)\n\n# Create a rectangle patch with random data\nrect = plt.Rectangle((0.8, 0.8), 0.3, 0.3, color='blue')\nax.add_patch(rect)\n\n# Create a rectangle patch with random data\nrect = plt.Rectangle((0.1, 0.1), 0.3, 0.3, color='green')\nax.add_patch(rect)\n\n# Create a rectangle patch with random data\nrect = plt.Rectangle((0.3, 0.3), 0.3, 0.3, color='red')\nax.add_patch(rect)\n\n# Create a rectangle patch with random data\nrect = plt.Rectangle((0.5, 0.5), 0.3, 0.3, color='blue')\nax.add_patch(rect)\n\n# Create a rectangle patch with random data\nrect = plt.Rectangle((0.7, 0.7), 0.3, 0.3, color='green')\nax.add_patch(rect)\n\n# Create a rectangle patch with random data\nrect = plt.Rectangle((0.9, 0.9), 0.3, 0.3, color='red')\nax.add_patch(rect)\n\n# Create a rectangle patch with random data\nrect = plt.Rectangle((0.2, 0.2), 0.3, 0.3, color='blue')\nax.add_patch(rect)\n\n# Create a rectangle patch with random data\nrect = plt.Rectangle((0.4, 0.4), 0.3, 0.3, color='green')\nax.add_patch(rect)\n\n# Create a rectangle patch with random data\nrect = plt.Rectangle((0.6, 0.6), 0.3, 0.3, color='red')\nax.add_patch(rect)\n\n# Create a rectangle patch with random data\nrect = plt.Rectangle((0.8, 0.8), 0.3, 0.3, color='blue')\nax.add_patch(rect)\n\n# Create a rectangle patch with random data\nrect = plt.Rectangle((0.1, 0.1), 0.3, 0.3, color='green')\nax.add_patch(rect)\n\n# Create a rectangle patch with random data\nrect = plt.Rectangle((0.3, 0.3), 0.3, 0.3, color='red')\nax.add_patch(rect)\n\n# Create a rectangle patch with random data\nrect = plt.Rectangle((0.5, 0.5), 0.3, 0.3, color='blue')\nax.add_patch(rect)\n\n# Create a rectangle patch with random data\nrect = plt.Rectangle((0.7, 0.7), 0.3, 0.3, color='green')\nax.add_patch(rect)\n\n# Create a rectangle patch with random data\nrect = plt.Rectangle((0.9, 0.9), 0.3, 0.3, color='red')\nax.add_patch(rect)\n\n# Create a rectangle patch with random data\nrect = plt.Rectangle((0.2, 0.2), 0.3, 0.3, color='blue')\nax.add_patch(rect)\n\n# Create a rectangle patch with random data\nrect = plt.Rectangle((0.4, 0.4), 0.3, 0.3, color='green')\nax.add_patch(rect)\n\n# Create a rectangle patch with random data\nrect = plt.Rectangle((0.6, 0.6), 0.3, 0.3, color='red')\nax.add_patch(rect)\n\n# Create a rectangle patch with random data\nrect = plt.Rectangle((0.8, 0.8), 0.3, 0.3, color='blue')\nax.add_patch(rect)\n\n# Create a rectangle patch with random data\nrect = plt.Rectangle((0.1, 0.1), 0.3, 0.3, color='green')\nax.add_patch(rect)\n\n# Create a rectangle patch with random data\nrect = plt.Rectangle((0.3, 0.3), 0.3, 0.3, color='red')\nax.add_patch(rect)\n\n# Create a rectangle patch with random data\nrect = plt.Rectangle((0.5, 0.5), 0.3, 0.3, color='blue')\nax.add_patch(rect)\n\n# Create a rectangle patch with random data\nrect = plt.Rectangle((0.7, 0.7), 0.3, 0.3, color='green')\nax.add_patch(rect)\n\n# Create a rectangle patch with random data\nrect = plt.Rectangle((0.9, 0.9), 0.3, 0.3, color='red')\nax.add_patch(rect)\n\n# Create a rectangle patch with random data\nrect = plt.Rectangle((0.2, 0.2), 0.3, 0.3, color='blue')\nax.add_patch(rect)\n\n# Create a rectangle patch with random data\nrect = plt.Rectangle((0.4, 0.4), 0.3, 0.3, color='green')\nax.add_patch(rect)\n\n# Create a rectangle patch with random data\nrect = plt.Rectangle((0.6, 0.6), 0.3, 0.3, color='red')\nax.add_patch(rect)\n\n# Create a rectangle patch with random data\nrect = plt.Rectangle((0.8, 0.8), 0.3, 0.3, color='blue')\nax.add_patch(rect)\n\n# Create a rectangle patch with random data\nrect = plt.Rectangle((0.1, 0.1), 0.3, 0.3, color='green')\nax.add_patch(rect)\n\n# Create a rectangle patch with random data\nrect = plt.Rectangle((0.3, 0.3), 0.3, 0.3, color='red')\nax.add_patch(rect)\n\n# Create a rectangle patch with random data\nrect = plt.Rectangle((0.5, 0.5), 0.3, 0.3, color='blue')\nax.add_patch(rect)\n\n# Create a rectangle patch with random data\nrect = plt.Rectangle((0.7, 0.7), 0.3, 0.3, color='green')\nax.add_patch(rect)\n\n# Create a rectangle patch with random data\nrect = plt.Rectangle((0.9, 0.9), 0.3, 0.3, color='red')\nax.add_patch(rect)\n\n# Create a rectangle patch with random data\nrect = plt.Rectangle((0.2, 0.2), 0.3, 0.3, color='blue')\nax.add_patch(rect)\n\n# Create a rectangle patch with random data\nrect = plt.Rectangle((0.4, 0.4), 0.3, 0.3, color='green')\nax.add_patch(rect)\n\n# Create a rectangle patch with random data\nrect = plt.Rectangle((0.6, 0.6), 0.3, 0.3, color='red')\nax.add_patch(rect)\n\n# Create a rectangle patch with random data\nrect = plt.Rectangle((0.8, 0.8), 0.3, 0.3, color='blue')\nax.add_patch(rect)\n\n# Create a rectangle patch with random data\nrect = plt.Rectangle((0.1, 0.1), 0.3, 0.3, color='green')\nax.add_patch(rect)\n\n# Create a rectangle patch with random data\nrect = plt.Rectangle((0.3, 0.3), 0.3, 0.3, color='red')\nax.add_patch(rect)\n\n# Create a rectangle patch with random data\nrect = plt.Rectangle((0.5, 0.5), 0.3, 0.3, color='blue')\nax.add_patch(rect)\n\n# Create a rectangle patch with random data\nrect = plt.Rectangle((0.7, 0.7), 0.3, 0.3, color='green')\nax.add_patch(rect)\n\n# Create a rectangle patch with random data\nrect = plt.Rectangle((0.9, 0.9), 0.3, 0.3, color='red')\nax.add_patch(rect)\n\n# Create a rectangle patch with random data\nrect = plt.Rectangle((0.2, 0.2), 0.3, 0.3, color='blue')\nax.add_patch(rect)\n\n# Create a rectangle patch with random data\nrect = plt.Rectangle((0.4, 0.4), 0.3, 0.3, color='green')\nax.add_patch(rect)\n\n# Create a rectangle patch with random data\nrect = plt.Rectangle((0.6, 0.6), 0.3, 0.3, color='red')\nax.add_patch(rect)\n\n# Create a rectangle patch with random data\nrect = plt.Rectangle((0.8, 0.8), 0.3, 0.3, color='blue')\nax.add_patch(rect)\n\n# Create a rectangle patch with random data\nrect = plt.Rectangle((0.1, 0.1), 0.3, 0.3, color='green')\nax.add_patch(rect)\n\n# Create a rectangle patch with random data\nrect = plt.Rectangle((0.3, 0.3), 0.3, 0.3, color='red')\nax.add_patch(rect)\n\n# Create a rectangle patch with random data\nrect = plt.Rectangle((0.5, 0.5), 0.3, 0.3, color='blue')\nax.add_patch(rect)\n\n# Create a rectangle patch with random data\nrect = plt.Rectangle((0.7, 0.7), 0.3, 0.3, color='green')\nax.add_patch(rect)\n\n# Create a rectangle patch with random data\nrect = plt.Rectangle((0.9, 0.9), 0.3, 0.3, color='red')\nax.add_patch(rect)\n\n# Create a rectangle patch with random data\nrect = plt.Rectangle((0.2, 0.2), 0.3, 0.3, color='blue')\nax.add_patch(rect)\n\n# Create a rectangle patch with random data\nrect = plt.Rectangle((0.4, 0.4), 0.3, 0.3, color='green')\nax.add_patch(rect)\n\n# Create a rectangle patch with random data\nrect = plt.Rectangle((0.6, 0.6), 0.3, 0.3, color='red')\nax.add_patch(rect)\n\n# Create a rectangle patch with random data\nrect = plt.Rectangle((0.8, 0.8), 0.3, 0.3, color='blue')\nax.add"}
{"file": "dataset/ori_500/PIP_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Set the x-axis limits\nax.set_xlim(0, 1)\n\n# Set the y-axis limits\nax.set_ylim(0, 2000)\n\n# Set the x-axis ticks\nax.set_xticks([0, 0.2, 0.4, 0.6, 0.8, 1])\n\n# Set the y-axis ticks\nax.set_yticks(range(0, 2000, 500))\n\n# Set the x-axis labels\nax.set_xticklabels(['0.0', '0.2', '0.4', '0.6', '0.8', '1.0'])\n\n# Set the y-axis labels\nax.set_yticklabels(['0', '500', '1000', '1500', '2000'])\n\n# Set the title of the plot\nax.set_title('Predicted vs Actual')\n\n# Set the color of the line\nax.plot([0, 0.2, 0.4, 0.6, 0.8, 1], [0, 100, 300, 500, 700, 900], color='gray')\n\n# Set the color of the bars\nax.bar([0, 0.2, 0.4, 0.6, 0.8, 1], [100, 200, 300, 400, 500, 600], color='blue')\n\n# Set the color of the rectangles\nax.fill_between([0, 0.2, 0.4, 0.6, 0.8, 1], [0, 100, 300, 500, 700, 900], [100, 200, 300, 400, 500, 600], color='green')\n\n# Set the color of the rectangles\nax.fill_between([0, 0.2, 0.4, 0.6, 0.8, 1], [0, 100, 300, 500, 700, 900], [100, 200, 300, 400, 500, 600], color='red')\n\n# Set the color of the rectangles\nax.fill_between([0, 0.2, 0.4, 0.6, 0.8, 1], [0, 100, 300, 500, 700, 900], [100, 200, 300, 400, 500, 600], color='yellow')\n\n# Set the color of the rectangles\nax.fill_between([0, 0.2, 0.4, 0.6, 0.8, 1], [0, 100, 300, 500, 700, 900], [100, 200, 300, 400, 500, 600], color='cyan')\n\n# Set the color of the rectangles\nax.fill_between([0, 0.2, 0.4, 0.6, 0.8, 1], [0, 100, 300, 500, 700, 900], [100, 200, 300, 400, 500, 600], color='magenta')\n\n# Set the color of the rectangles\nax.fill_between([0, 0.2, 0.4, 0.6, 0.8, 1], [0, 100, 300, 500, 700, 900], [100, 200, 300, 400, 500, 600], color='black')\n\n# Set the color of the rectangles\nax.fill_between([0, 0.2, 0.4, 0.6, 0.8, 1], [0, 100, 300, 500, 700, 900], [100, 200, 300, 400, 500, 600], color='white')\n\n# Set the color of the rectangles\nax.fill_between([0, 0.2, 0.4, 0.6, 0.8, 1], [0, 100, 300, 500, 700, 900], [100, 200, 300, 400, 500, 600], color='silver')\n\n# Set the color of the rectangles\nax.fill_between([0, 0.2, 0.4, 0.6, 0.8, 1], [0, 100, 300, 500, 700, 900], [100, 200, 300, 400, 500, 600], color='gold')\n\n# Set the color of the rectangles\nax.fill_between([0, 0.2, 0.4, 0.6, 0.8, 1], [0, 100, 300, 500, 700, 900], [100, 200, 300, 400, 500, 600], color='brown')\n\n# Set the color of the rectangles\nax.fill_between([0, 0.2, 0.4, 0.6, 0.8, 1], [0, 100, 300, 500, 700, 900], [100, 200, 300, 400, 500, 600], color='pink')\n\n# Set the color of the rectangles\nax.fill_between([0, 0.2, 0.4, 0.6, 0.8, 1], [0, 100, 300, 500, 700, 900], [100, 200, 300, 400, 500, 600], color='orange')\n\n# Set the color of the rectangles\nax.fill_between([0, 0.2, 0.4, 0.6, 0.8, 1], [0, 100, 300, 500, 700, 900], [100, 200, 300, 400, 500, 600], color='purple')\n\n# Set the color of the rectangles\nax.fill_between([0, 0.2, 0.4, 0.6, 0.8, 1], [0, 100, 300, 500, 700, 900], [100, 200, 300, 400, 500, 600], color='navy')\n\n# Set the color of the rectangles\nax.fill_between([0, 0.2, 0.4, 0.6, 0.8, 1], [0, 100, 300, 500, 700, 900], [100, 200, 300, 400, 500, 600], color='maroon')\n\n# Set the color of the rectangles\nax.fill_between([0, 0.2, 0.4, 0.6, 0.8, 1], [0, 100, 300, 500, 700, 900], [100, 200, 300, 400, 500, 600], color='lime')\n\n# Set the color of the rectangles\nax.fill_between([0, 0.2, 0.4, 0.6, 0.8, 1], [0, 100, 300, 500, 700, 900], [100, 200, 300, 400, 500, 600], color='teal')\n\n# Set the color of the rectangles\nax.fill_between([0, 0.2, 0.4, 0.6, 0.8, 1], [0, 100, 300, 500, 700, 900], [100, 200, 300, 400, 500, 600], color='aqua')\n\n# Set the color of the rectangles\nax.fill_between([0, 0.2, 0.4, 0.6, 0.8, 1], [0, 100, 300, 500, 700, 900], [100, 200, 300, 400, 500, 600], color='fuchsia')\n\n# Set the color of the rectangles\nax.fill_between([0, 0.2, 0.4, 0.6, 0.8, 1], [0, 100, 300, 500, 700, 900], [100, 200, 300, 400, 500, 600], color='silver')\n\n# Set the color of the rectangles\nax.fill_between([0, 0.2, 0.4, 0.6, 0.8, 1], [0, 100, 300, 500, 700, 900], [100, 200, 300, 400, 500, 600], color='gold')\n\n# Set the color of the rectangles\nax.fill_between([0, 0.2, 0.4, 0.6, 0.8, 1], [0, 100, 300, 500, 700, 900], [100, 200, 300, 400, 500, 600], color='brown')\n\n# Set the color of the rectangles\nax.fill_between([0, 0.2, 0.4, 0.6, 0.8, 1], [0, 100, 300, 500, 700, 900], [100, 200, 300, 400, 500, 600], color='pink')\n\n# Set the color of the rectangles\nax.fill_between([0, 0.2, 0.4, 0.6, 0.8, 1], [0, 100, 300, 500, 700, 900], [100, 200, 300, 400, 500, 600], color='orange')\n\n# Set the color of the rectangles\nax.fill_between([0, 0.2, 0.4, 0.6, 0.8, 1], [0, 100, 300, 500, 700, 900], [100, 200, 300, 400, 500, 600], color='purple')\n\n# Set the color of the rectangles\nax.fill_between([0, 0.2, 0.4, 0.6, 0.8, 1], [0, 100, 300, 500, 700, 900], [100, 200, 300, 400, 500, 600], color='navy')\n\n# Set the color of the rectangles\nax.fill_between([0, 0.2, 0.4, 0.6, 0.8, 1], [0, 100, 300, 500, 700, 900], [100, 200, 300, 400, 500, 600], color='maroon')\n\n# Set the color of the rectangles\nax.fill_between([0, 0.2, 0.4, 0.6, 0.8, 1], [0, 100, 300, 500, 700, 900], [100, 200, 300, 400, 500, 600], color='lime')\n\n# Set the color of the rectangles\nax.fill_between([0, 0.2, 0.4, 0.6, 0.8, 1], [0, 100, 300, 500, 700, 900], [100, 200, 300, 400, 500, 600], color='teal')\n\n# Set the color of the rectangles\nax.fill_between([0, 0.2, 0.4, 0.6, 0.8, 1], [0, 100, 300, 500, 700, 900], [100, 200, 300, 400, 500, 600], color='aqua')\n\n# Set the color of the rectangles\nax.fill_between([0, 0.2, 0.4, 0.6, 0.8, 1], [0, 100, 300, 500, 700, 900], [100, 200, 300, 400, 500, 600], color='fuchsia')\n\n# Set the color of the rectangles\nax.fill_between([0, 0.2, 0.4, 0.6, 0.8, 1], [0, 100, 300, 500, 700, 900], [100, 200, 300, 400, 500, 600], color='silver')\n\n# Set the color of the rectangles\nax.fill_between([0, 0.2, 0.4, 0.6, 0.8, 1], [0, 100, 300, 500, 700, 900], [100, 200, 300, 400, 500, 600], color='gold')\n\n# Set the color of the rectangles\nax.fill_between([0, 0.2, 0.4, 0.6, 0.8, 1], [0, 100, 300, 500, 700, 900], [100, 200, 300, 400, 500, 600], color='brown')\n\n# Set the color of the rectangles\nax.fill_between([0, 0.2, 0.4, 0.6, 0.8, 1], [0, 100, 300, 500, 700, 900], [100, 200, 300, 400, 500, 600], color='pink')\n\n# Set the color of the rectangles\nax.fill_between([0, 0.2, 0.4, 0.6, 0.8, 1], [0, 100, 300, 500, 700, 900], [100, 200, 300, 400, 500, 600], color='orange')\n\n# Set the color of the rectangles\nax.fill_between([0, 0.2, 0.4, 0.6, 0.8, 1], [0, 100, 300, 500, 700, 900], [100, 200, 300, 400, 500, 600], color='purple')\n\n# Set the color of the rectangles\nax.fill_between([0, 0.2, 0.4, 0.6, 0.8, 1], [0, 100, 300, 500,"}
{"file": "dataset/ori_500/PIP_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Bias Score by Data Type and Model')\n\n# Set the x-axis label\nax.set_xlabel('Data Type')\n\n# Set the y-axis label\nax.set_ylabel('Bias Score')\n\n# Define the data points\nx = ['INT8', 'INT8', 'INT8', 'INT4', 'INT4', 'INT4']\ny = [9.2, 9.3, 9.4, 9.5, 9.6, 9.7]\n\n# Plot the data points\nax.plot(x, y, 'ro-')\n\n# Add a legend\nax.legend(['Model 1', 'Model 2'])\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/PIP_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Set the title of the plot\nax.set_title('Predicted vs Actual')\n\n# Set the x-axis label\nax.set_xlabel('Maximum Predicted Probability')\n\n# Set the y-axis label\nax.set_ylabel('Number of Examples')\n\n# Create a scatter plot\nax.scatter([0.25, 0.3, 0.4, 0.45, 0.5], [1000, 1200, 1300, 1400, 1500], color='orange', label='Known')\nax.scatter([0.25, 0.3, 0.4, 0.45, 0.5], [1000, 1200, 1300, 1400, 1500], color='blue', label='Unknown')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/PIP_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nx = [2**6, 2**7, 2**8, 2**9, 2**10, 2**11]\ny1 = [10000, 20000, 30000, 40000, 50000, 60000]\ny2 = [15000, 25000, 35000, 45000, 55000, 65000]\n\n# Create the plot\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\nax.plot(x, y1, 'g-', label='Cos | n0 = 200')\nax.plot(x, y2, 'b-', label='RelLU | n0 = 200')\n\n# Add markers\nfor i in range(len(x)):\n    ax.plot(x[i], y1[i], 'go')\n    ax.plot(x[i], y2[i], 'bo')\n\n# Add legend\nax.legend()\n\n# Set the title and labels\nax.set_title('Empirical Lipschitz Constant')\nax.set_xlabel('Width of Layer')\nax.set_ylabel('Empirical Lipschitz Constant')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/PIP_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data\nax.plot([0, 1000, 2000, 3000, 4000, 5000, 6000, 7000, 8000, 9000, 10000], [3500, 3600, 3700, 3800, 3900, 4000, 4100, 4200, 4300, 4400, 4500], 'b-')\nax.plot([0, 1000, 2000, 3000, 4000, 5000, 6000, 7000, 8000, 9000, 10000], [3600, 3700, 3800, 3900, 4000, 4100, 4200, 4300, 4400, 4500, 4600], 'g-')\nax.plot([0, 1000, 2000, 3000, 4000, 5000, 6000, 7000, 8000, 9000, 10000], [3700, 3800, 3900, 4000, 4100, 4200, 4300, 4400, 4500, 4600, 4700], 'r-')\nax.plot([0, 1000, 2000, 3000, 4000, 5000, 6000, 7000, 8000, 9000, 10000], [3800, 3900, 4000, 4100, 4200, 4300, 4400, 4500, 4600, 4700, 4800], 'c-')\nax.plot([0, 1000, 2000, 3000, 4000, 5000, 6000, 7000, 8000, 9000, 10000], [3900, 4000, 4100, 4200, 4300, 4400, 4500, 4600, 4700, 4800, 4900], 'm-')\nax.plot([0, 1000, 2000, 3000, 4000, 5000, 6000, 7000, 8000, 9000, 10000], [4000, 4100, 4200, 4300, 4400, 4500, 4600, 4700, 4800, 4900, 5000], 'y-')\n\n# Set the title and labels\nax.set_title('Discounted Cumulative Rewarded')\nax.set_xlabel('Time Steps')\nax.set_ylabel('Discounted Cumulative Rewarded')\n\n# Add a legend\nax.legend(['WI', 'ISQ', 'WIQL', 'Greedy'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/PIP_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Plot the data\nax.plot([0, 25, 50, 75, 100, 125, 150, 175, 200], [0.55, 0.50, 0.45, 0.40, 0.35, 0.30, 0.25, 0.20, 0.15], color='blue', label='WI')\nax.plot([0, 25, 50, 75, 100, 125, 150, 175, 200], [0.55, 0.50, 0.45, 0.40, 0.35, 0.30, 0.25, 0.20, 0.15], color='orange', label='ISQ')\n\n# Set the title and labels\nax.set_title('Discounted Cumulative Reward')\nax.set_xlabel('Time Steps')\nax.set_ylabel('Discounted Cumulative Reward')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/PIP_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Set the x-axis limits\nax.set_xlim(-4, 4)\n\n# Set the y-axis limits\nax.set_ylim(-4, 4)\n\n# Create a scatter plot with orange color\nax.scatter([1, 2, 3], [1, 2, 3], color='orange')\n\n# Create a scatter plot with blue color\nax.scatter([1, 2, 3], [1, 2, 3], color='blue')\n\n# Create a scatter plot with green color\nax.scatter([1, 2, 3], [1, 2, 3], color='green')\n\n# Create a scatter plot with red color\nax.scatter([1, 2, 3], [1, 2, 3], color='red')\n\n# Create a scatter plot with black color\nax.scatter([1, 2, 3], [1, 2, 3], color='black')\n\n# Create a scatter plot with gray color\nax.scatter([1, 2, 3], [1, 2, 3], color='gray')\n\n# Create a scatter plot with brown color\nax.scatter([1, 2, 3], [1, 2, 3], color='brown')\n\n# Create a scatter plot with pink color\nax.scatter([1, 2, 3], [1, 2, 3], color='pink')\n\n# Create a scatter plot with purple color\nax.scatter([1, 2, 3], [1, 2, 3], color='purple')\n\n# Create a scatter plot with olive color\nax.scatter([1, 2, 3], [1, 2, 3], color='olive')\n\n# Create a scatter plot with silver color\nax.scatter([1, 2, 3], [1, 2, 3], color='silver')\n\n# Create a scatter plot with gold color\nax.scatter([1, 2, 3], [1, 2, 3], color='gold')\n\n# Create a scatter plot with white color\nax.scatter([1, 2, 3], [1, 2, 3], color='white')\n\n# Create a scatter plot with cyan color\nax.scatter([1, 2, 3], [1, 2, 3], color='cyan')\n\n# Create a scatter plot with magenta color\nax.scatter([1, 2, 3], [1, 2, 3], color='magenta')\n\n# Create a scatter plot with navy color\nax.scatter([1, 2, 3], [1, 2, 3], color='navy')\n\n# Create a scatter plot with maroon color\nax.scatter([1, 2, 3], [1, 2, 3], color='maroon')\n\n# Create a scatter plot with teal color\nax.scatter([1, 2, 3], [1, 2, 3], color='teal')\n\n# Create a scatter plot with lime color\nax.scatter([1, 2, 3], [1, 2, 3], color='lime')\n\n# Create a scatter plot with aqua color\nax.scatter([1, 2, 3], [1, 2, 3], color='aqua')\n\n# Create a scatter plot with fuchsia color\nax.scatter([1, 2, 3], [1, 2, 3], color='fuchsia')\n\n# Create a scatter plot with silver color\nax.scatter([1, 2, 3], [1, 2, 3], color='silver')\n\n# Create a scatter plot with gold color\nax.scatter([1, 2, 3], [1, 2, 3], color='gold')\n\n# Create a scatter plot with white color\nax.scatter([1, 2, 3], [1, 2, 3], color='white')\n\n# Create a scatter plot with cyan color\nax.scatter([1, 2, 3], [1, 2, 3], color='cyan')\n\n# Create a scatter plot with magenta color\nax.scatter([1, 2, 3], [1, 2, 3], color='magenta')\n\n# Create a scatter plot with navy color\nax.scatter([1, 2, 3], [1, 2, 3], color='navy')\n\n# Create a scatter plot with maroon color\nax.scatter([1, 2, 3], [1, 2, 3], color='maroon')\n\n# Create a scatter plot with teal color\nax.scatter([1, 2, 3], [1, 2, 3], color='teal')\n\n# Create a scatter plot with lime color\nax.scatter([1, 2, 3], [1, 2, 3], color='lime')\n\n# Create a scatter plot with aqua color\nax.scatter([1, 2, 3], [1, 2, 3], color='aqua')\n\n# Create a scatter plot with fuchsia color\nax.scatter([1, 2, 3], [1, 2, 3], color='fuchsia')\n\n# Create a scatter plot with silver color\nax.scatter([1, 2, 3], [1, 2, 3], color='silver')\n\n# Create a scatter plot with gold color\nax.scatter([1, 2, 3], [1, 2, 3], color='gold')\n\n# Create a scatter plot with white color\nax.scatter([1, 2, 3], [1, 2, 3], color='white')\n\n# Create a scatter plot with cyan color\nax.scatter([1, 2, 3], [1, 2, 3], color='cyan')\n\n# Create a scatter plot with magenta color\nax.scatter([1, 2, 3], [1, 2, 3], color='magenta')\n\n# Create a scatter plot with navy color\nax.scatter([1, 2, 3], [1, 2, 3], color='navy')\n\n# Create a scatter plot with maroon color\nax.scatter([1, 2, 3], [1, 2, 3], color='maroon')\n\n# Create a scatter plot with teal color\nax.scatter([1, 2, 3], [1, 2, 3], color='teal')\n\n# Create a scatter plot with lime color\nax.scatter([1, 2, 3], [1, 2, 3], color='lime')\n\n# Create a scatter plot with aqua color\nax.scatter([1, 2, 3], [1, 2, 3], color='aqua')\n\n# Create a scatter plot with fuchsia color\nax.scatter([1, 2, 3], [1, 2, 3], color='fuchsia')\n\n# Create a scatter plot with silver color\nax.scatter([1, 2, 3], [1, 2, 3], color='silver')\n\n# Create a scatter plot with gold color\nax.scatter([1, 2, 3], [1, 2, 3], color='gold')\n\n# Create a scatter plot with white color\nax.scatter([1, 2, 3], [1, 2, 3], color='white')\n\n# Create a scatter plot with cyan color\nax.scatter([1, 2, 3], [1, 2, 3], color='cyan')\n\n# Create a scatter plot with magenta color\nax.scatter([1, 2, 3], [1, 2, 3], color='magenta')\n\n# Create a scatter plot with navy color\nax.scatter([1, 2, 3], [1, 2, 3], color='navy')\n\n# Create a scatter plot with maroon color\nax.scatter([1, 2, 3], [1, 2, 3], color='maroon')\n\n# Create a scatter plot with teal color\nax.scatter([1, 2, 3], [1, 2, 3], color='teal')\n\n# Create a scatter plot with lime color\nax.scatter([1, 2, 3], [1, 2, 3], color='lime')\n\n# Create a scatter plot with aqua color\nax.scatter([1, 2, 3], [1, 2, 3], color='aqua')\n\n# Create a scatter plot with fuchsia color\nax.scatter([1, 2, 3], [1, 2, 3], color='fuchsia')\n\n# Create a scatter plot with silver color\nax.scatter([1, 2, 3], [1, 2, 3], color='silver')\n\n# Create a scatter plot with gold color\nax.scatter([1, 2, 3], [1, 2, 3], color='gold')\n\n# Create a scatter plot with white color\nax.scatter([1, 2, 3], [1, 2, 3], color='white')\n\n# Create a scatter plot with cyan color\nax.scatter([1, 2, 3], [1, 2, 3], color='cyan')\n\n# Create a scatter plot with magenta color\nax.scatter([1, 2, 3], [1, 2, 3], color='magenta')\n\n# Create a scatter plot with navy color\nax.scatter([1, 2, 3], [1, 2, 3], color='navy')\n\n# Create a scatter plot with maroon color\nax.scatter([1, 2, 3], [1, 2, 3], color='maroon')\n\n# Create a scatter plot with teal color\nax.scatter([1, 2, 3], [1, 2, 3], color='teal')\n\n# Create a scatter plot with lime color\nax.scatter([1, 2, 3], [1, 2, 3], color='lime')\n\n# Create a scatter plot with aqua color\nax.scatter([1, 2, 3], [1, 2, 3], color='aqua')\n\n# Create a scatter plot with fuchsia color\nax.scatter([1, 2, 3], [1, 2, 3], color='fuchsia')\n\n# Create a scatter plot with silver color\nax.scatter([1, 2, 3], [1, 2, 3], color='silver')\n\n# Create a scatter plot with gold color\nax.scatter([1, 2, 3], [1, 2, 3], color='gold')\n\n# Create a scatter plot with white color\nax.scatter([1, 2, 3], [1, 2, 3], color='white')\n\n# Create a scatter plot with cyan color\nax.scatter([1, 2, 3], [1, 2, 3], color='cyan')\n\n# Create a scatter plot with magenta color\nax.scatter([1, 2, 3], [1, 2, 3], color='magenta')\n\n# Create a scatter plot with navy color\nax.scatter([1, 2, 3], [1, 2, 3], color='navy')\n\n# Create a scatter plot with maroon color\nax.scatter([1, 2, 3], [1, 2, 3], color='maroon')\n\n# Create a scatter plot with teal color\nax.scatter([1, 2, 3], [1, 2, 3], color='teal')\n\n# Create a scatter plot with lime color\nax.scatter([1, 2, 3], [1, 2, 3], color='lime')\n\n# Create a scatter plot with aqua color\nax.scatter([1, 2, 3], [1, 2, 3], color='aqua')\n\n# Create a scatter plot with fuchsia color\nax.scatter([1, 2, 3], [1, 2, 3], color='fuchsia')\n\n# Create a scatter plot with silver color\nax.scatter([1, 2, 3], [1, 2, 3], color='silver')\n\n# Create a scatter plot with gold color\nax.scatter([1, 2, 3], [1, 2, 3], color='gold')\n\n# Create a scatter plot with white color\nax.scatter([1, 2, 3], [1, 2, 3], color='white')\n\n# Create a scatter plot with cyan color\nax.scatter([1, 2, 3], [1, 2, 3], color='cyan')\n\n# Create a scatter plot with magenta color\nax.scatter([1, 2, 3], [1, 2, 3], color='magenta')\n\n# Create a scatter plot with navy color\nax.scatter([1, 2, 3], [1, 2, 3], color='navy')\n\n# Create a scatter plot with maroon color\nax.scatter([1, 2, 3], [1, 2, 3], color='maroon')\n\n# Create a scatter plot with teal color\nax.scatter([1, 2, 3], [1, 2, 3], color='teal')\n\n# Create a scatter plot with lime color\nax.scatter([1, 2, 3], [1, 2, 3], color='lime')\n\n# Create a scatter plot with aqua color\nax.scatter([1, 2, 3], [1, 2, 3], color='aqua')\n\n# Create a scatter plot with fuchsia color\nax.scatter([1, 2, 3], [1, 2, 3], color='fuchsia')\n\n# Create a scatter plot with silver color\nax.scatter([1, 2, 3], [1, 2, 3], color='silver')\n\n# Create a scatter plot with gold color\nax.scatter([1, 2, 3], [1, 2, 3], color='gold')\n\n# Create a scatter plot with white color\nax.scatter([1, 2, 3], [1, 2, 3], color='white')\n\n# Create a scatter plot with cyan color\nax.scatter([1, 2, 3], [1, 2, 3], color='cyan')\n\n# Create a scatter plot with magenta color\nax.scatter([1, 2, 3], [1, 2, 3], color='magenta')\n\n# Create a scatter plot with navy color\nax.scatter([1, 2, 3], [1, 2, 3], color='navy')\n\n# Create a scatter plot with maroon color\nax.scatter([1, 2, 3], [1, 2, 3], color='maroon')\n\n# Create a scatter plot with teal color\nax.scatter([1, 2, 3], [1, 2, 3], color='teal')\n\n# Create a scatter plot with lime color\nax.scatter([1, 2, 3], [1, 2, 3], color='lime')\n\n# Create a scatter plot with aqua color\nax.scatter([1, 2, 3], [1, 2, 3], color='aqua')\n\n# Create a scatter plot with fuchsia color\nax.scatter([1, 2, 3], [1, 2, 3], color='fuchsia')\n\n# Create a scatter plot with silver color\nax.scatter([1, 2, 3], [1, 2, 3], color='silver')\n\n# Create a scatter plot with gold color\nax.scatter([1, 2, 3], [1, 2, 3], color='gold')\n\n# Create a scatter plot with white color\nax.scatter([1, 2, 3], [1, 2, 3], color='white')\n\n# Create a scatter plot with cyan color\nax.scatter([1, 2, 3], [1, 2, 3], color='cyan')\n\n# Create a scatter plot with magenta color\nax.scatter([1, 2, 3], [1, 2, 3], color='magenta')\n\n# Create a scatter plot with navy color\nax.scatter([1, 2, 3], [1, 2, 3], color='navy')\n\n# Create a scatter plot with maroon color\nax.scatter([1, 2, 3], [1, 2, 3], color='maroon')\n\n# Create a scatter plot with teal color\nax.scatter([1, 2, 3], [1, 2, 3], color='teal')\n\n# Create a scatter plot with lime color\nax.scatter([1, 2, 3], [1, 2, 3], color='lime')\n\n# Create a scatter plot with aqua color\nax.scatter([1, 2, 3], [1, 2, 3], color='aqua')\n\n# Create a scatter plot with fuchsia color\nax.scatter([1, 2, 3], [1, 2, 3], color='fuchsia')\n\n# Create a scatter plot with silver color\nax.scatter([1, 2, 3], [1, 2, 3], color='silver')\n\n# Create a scatter plot with gold color\nax.scatter([1, 2, 3], [1, 2, 3], color='gold')\n\n# Create a scatter plot with white color\nax.scatter([1, 2, 3], [1, 2, 3], color='white')\n\n# Create a scatter plot with cyan color\nax.scatter([1, 2, 3], [1, 2, 3], color='cyan')\n\n# Create a scatter plot with magenta color\nax.scatter([1, 2, 3], [1, 2, 3], color='magenta')\n\n# Create a scatter plot with navy color\nax.scatter([1, 2, 3], [1, 2, 3], color='navy')\n\n# Create a scatter plot with maroon color\nax.scatter([1, 2, 3], [1, 2, 3], color='maroon')\n\n# Create a scatter plot with teal color\nax.scatter([1, 2, 3], [1, 2, 3], color='teal')\n\n# Create a scatter plot with lime color\nax.scatter([1, 2, 3], [1, 2, 3], color='lime')\n\n# Create a scatter plot with aqua color\nax.scatter([1, 2, 3], [1, 2, 3], color='aqua')\n\n# Create a scatter plot"}
{"file": "dataset/ori_500/PIP_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Plot the scatter plot\nax.scatter([1, 2, 3], [4, 5, 6], color='red')\n\n# Set the title of the plot\nax.set_title('Scatter Plot')\n\n# Set the x and y labels\nax.set_xlabel('X-axis')\nax.set_ylabel('Y-axis')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/area_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(9.0, 8.0))\n\n# Set the background color of the plot\nax.set_facecolor('lightgrey')\n\n# Set the title of the plot\nax.set_title('Stock Market Analysis', fontsize=16)\n\n# Set the x-axis label\nax.set_xlabel('Time (in minutes)', fontsize=14)\n\n# Set the y-axis label\nax.set_ylabel('Price (in dollars)', fontsize=14)\n\n# Set the tick labels for the x-axis\nax.set_xticks([0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50])\nax.set_xticklabels(['0K', '5K', '10K', '15K', '20K', '25K', '30K', '35K', '40K', '45K', '50K'])\n\n# Set the tick labels for the y-axis\nax.set_yticks([0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50])\nax.set_yticklabels(['0', '5', '10', '15', '20', '25', '30', '35', '40', '45', '50'])\n\n# Set the grid lines\nax.grid(True)\n\n# Set the legend\nax.legend()\n\n# Set the colors of the lines\nax.plot([0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50], [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100], color='red')\nax.plot([0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50], [0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50], color='orange')\nax.plot([0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50], [0, 15, 30, 45, 60, 75, 90, 105, 120, 135, 150], color='green')\nax.plot([0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50], [0, 20, 40, 60, 80, 100, 120, 140, 160, 180, 200], color='blue')\n\n# Set the markers\nax.plot([0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50], [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100], 'o', color='red')\nax.plot([0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50], [0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50], 'o', color='orange')\nax.plot([0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50], [0, 15, 30, 45, 60, 75, 90, 105, 120, 135, 150], 'o', color='green')\nax.plot([0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50], [0, 20, 40, 60, 80, 100, 120, 140, 160, 180, 200], 'o', color='blue')\n\n# Set the labels for the markers\nax.text(0, 0, 'ActivityNet mIoU', fontsize=12, color='red')\nax.text(0, 5, 'Breakfast MoF', fontsize=12, color='orange')\nax.text(0, 15, 'ActivityNet CIDER', fontsize=12, color='green')\nax.text(0, 20, 'QVHighlights mAP', fontsize=12, color='blue')\n\n# Set the rectangle for the logo\nrect = plt.Rectangle((0, 0), 1, 1, fc='red', ec='black')\nax.add_patch(rect)\n\n# Set the rectangle for the map\nrect = plt.Rectangle((0, 0), 1, 1, fc='blue', ec='black')\nax.add_patch(rect)\n\n# Set the rectangle for the logo\nrect = plt.Rectangle((0, 0), 1, 1, fc='orange', ec='black')\nax.add_patch(rect)\n\n# Set the rectangle for the map\nrect = plt.Rectangle((0, 0), 1, 1, fc='green', ec='black')\nax.add_patch(rect)\n\n# Set the rectangle for the logo\nrect = plt.Rectangle((0, 0), 1, 1, fc='blue', ec='black')\nax.add_patch(rect)\n\n# Set the rectangle for the map\nrect = plt.Rectangle((0, 0), 1, 1, fc='red', ec='black')\nax.add_patch(rect)\n\n# Set the rectangle for the logo\nrect = plt.Rectangle((0, 0), 1, 1, fc='green', ec='black')\nax.add_patch(rect)\n\n# Set the rectangle for the map\nrect = plt.Rectangle((0, 0), 1, 1, fc='orange', ec='black')\nax.add_patch(rect)\n\n# Set the rectangle for the logo\nrect = plt.Rectangle((0, 0), 1, 1, fc='blue', ec='black')\nax.add_patch(rect)\n\n# Set the rectangle for the map\nrect = plt.Rectangle((0, 0), 1, 1, fc='red', ec='black')\nax.add_patch(rect)\n\n# Set the rectangle for the logo\nrect = plt.Rectangle((0, 0), 1, 1, fc='green', ec='black')\nax.add_patch(rect)\n\n# Set the rectangle for the map\nrect = plt.Rectangle((0, 0), 1, 1, fc='orange', ec='black')\nax.add_patch(rect)\n\n# Set the rectangle for the logo\nrect = plt.Rectangle((0, 0), 1, 1, fc='blue', ec='black')\nax.add_patch(rect)\n\n# Set the rectangle for the map\nrect = plt.Rectangle((0, 0), 1, 1, fc='red', ec='black')\nax.add_patch(rect)\n\n# Set the rectangle for the logo\nrect = plt.Rectangle((0, 0), 1, 1, fc='green', ec='black')\nax.add_patch(rect)\n\n# Set the rectangle for the map\nrect = plt.Rectangle((0, 0), 1, 1, fc='orange', ec='black')\nax.add_patch(rect)\n\n# Set the rectangle for the logo\nrect = plt.Rectangle((0, 0), 1, 1, fc='blue', ec='black')\nax.add_patch(rect)\n\n# Set the rectangle for the map\nrect = plt.Rectangle((0, 0), 1, 1, fc='red', ec='black')\nax.add_patch(rect)\n\n# Set the rectangle for the logo\nrect = plt.Rectangle((0, 0), 1, 1, fc='green', ec='black')\nax.add_patch(rect)\n\n# Set the rectangle for the map\nrect = plt.Rectangle((0, 0), 1, 1, fc='orange', ec='black')\nax.add_patch(rect)\n\n# Set the rectangle for the logo\nrect = plt.Rectangle((0, 0), 1, 1, fc='blue', ec='black')\nax.add_patch(rect)\n\n# Set the rectangle for the map\nrect = plt.Rectangle((0, 0), 1, 1, fc='red', ec='black')\nax.add_patch(rect)\n\n# Set the rectangle for the logo\nrect = plt.Rectangle((0, 0), 1, 1, fc='green', ec='black')\nax.add_patch(rect)\n\n# Set the rectangle for the map\nrect = plt.Rectangle((0, 0), 1, 1, fc='orange', ec='black')\nax.add_patch(rect)\n\n# Set the rectangle for the logo\nrect = plt.Rectangle((0, 0), 1, 1, fc='blue', ec='black')\nax.add_patch(rect)\n\n# Set the rectangle for the map\nrect = plt.Rectangle((0, 0), 1, 1, fc='red', ec='black')\nax.add_patch(rect)\n\n# Set the rectangle for the logo\nrect = plt.Rectangle((0, 0), 1, 1, fc='green', ec='black')\nax.add_patch(rect)\n\n# Set the rectangle for the map\nrect = plt.Rectangle((0, 0), 1, 1, fc='orange', ec='black')\nax.add_patch(rect)\n\n# Set the rectangle for the logo\nrect = plt.Rectangle((0, 0), 1, 1, fc='blue', ec='black')\nax.add_patch(rect)\n\n# Set the rectangle for the map\nrect = plt.Rectangle((0, 0), 1, 1, fc='red', ec='black')\nax.add_patch(rect)\n\n# Set the rectangle for the logo\nrect = plt.Rectangle((0, 0), 1, 1, fc='green', ec='black')\nax.add_patch(rect)\n\n# Set the rectangle for the map\nrect = plt.Rectangle((0, 0), 1, 1, fc='orange', ec='black')\nax.add_patch(rect)\n\n# Set the rectangle for the logo\nrect = plt.Rectangle((0, 0), 1, 1, fc='blue', ec='black')\nax.add_patch(rect)\n\n# Set the rectangle for the map\nrect = plt.Rectangle((0, 0), 1, 1, fc='red', ec='black')\nax.add_patch(rect)\n\n# Set the rectangle for the logo\nrect = plt.Rectangle((0, 0), 1, 1, fc='green', ec='black')\nax.add_patch(rect)\n\n# Set the rectangle for the map\nrect = plt.Rectangle((0, 0), 1, 1, fc='orange', ec='black')\nax.add_patch(rect)\n\n# Set the rectangle for the logo\nrect = plt.Rectangle((0, 0), 1, 1, fc='blue', ec='black')\nax.add_patch(rect)\n\n# Set the rectangle for the map\nrect = plt.Rectangle((0, 0), 1, 1, fc='red', ec='black')\nax.add_patch(rect)\n\n# Set the rectangle for the logo\nrect = plt.Rectangle((0, 0), 1, 1, fc='green', ec='black')\nax.add_patch(rect)\n\n# Set the rectangle for the map\nrect = plt.Rectangle((0, 0), 1, 1, fc='orange', ec='black')\nax.add_patch(rect)\n\n# Set the rectangle for the logo\nrect = plt.Rectangle((0, 0), 1, 1, fc='blue', ec='black')\nax.add_patch(rect)\n\n# Set the rectangle for the map\nrect = plt.Rectangle((0, 0), 1, 1, fc='red', ec='black')\nax.add_patch(rect)\n\n# Set the rectangle for the logo\nrect = plt.Rectangle((0, 0), 1, 1, fc='green', ec='black')\nax.add_patch(rect)\n\n# Set the rectangle for the map\nrect = plt.Rectangle((0, 0), 1, 1, fc='orange', ec='black')\nax.add_patch(rect)\n\n# Set the rectangle for the logo\nrect = plt.Rectangle((0, 0), 1, 1, fc='blue', ec='black')\nax.add_patch(rect)\n\n# Set the rectangle for the map\nrect = plt.Rectangle((0, 0), 1, 1, fc='red', ec='black')\nax.add_patch(rect)\n\n# Set the rectangle for the logo\nrect = plt.Rectangle((0, 0), 1, 1, fc='green', ec='black')\nax.add_patch(rect)\n\n# Set the rectangle for the map\nrect = plt.Rectangle((0, 0), 1, 1, fc='orange', ec='black')\nax.add_patch(rect)\n\n# Set the rectangle for the logo\nrect = plt.Rectangle((0, 0), 1, 1, fc='blue', ec='black')\nax.add_patch(rect)\n\n# Set the rectangle for the map\nrect = plt.Rectangle((0, 0), 1, 1, fc='red', ec='black')\nax.add_patch(rect)\n\n# Set the rectangle for the logo\nrect = plt.Rectangle((0, 0), 1, 1, fc='green', ec='black')\nax.add_patch(rect)\n\n# Set the rectangle for the map\nrect = plt.Rectangle((0, 0), 1, 1, fc='orange', ec='black')\nax.add_patch(rect)\n\n# Set the rectangle for the logo\nrect = plt.Rectangle((0, 0), 1, 1, fc='blue', ec='black')\nax.add_patch(rect)\n\n# Set the rectangle for the map\nrect = plt.Rectangle((0, 0), 1, 1, fc='red', ec='black')\nax.add_patch(rect)\n\n# Set the rectangle for the logo\nrect = plt.Rectangle((0, 0), 1, 1, fc='green', ec='black')\nax.add_patch(rect)\n\n# Set the rectangle for the map\nrect = plt.Rectangle((0, 0), 1, 1, fc='orange', ec='black')\nax.add_patch(rect)\n\n# Set the rectangle for the logo\nrect = plt.Rectangle((0, 0), 1, 1, fc='blue', ec='black')\nax.add_patch(rect)\n\n# Set the rectangle for the map\nrect = plt.Rectangle((0, 0), 1, 1, fc='red', ec='black')\nax.add_patch(rect)\n\n# Set the rectangle for the logo\nrect = plt.Rectangle((0, 0), 1, 1, fc='green', ec='black')\nax.add_patch(rect)\n\n# Set the rectangle for the map\nrect = plt.Rectangle((0, 0), 1, 1, fc='orange', ec='black')\nax.add_patch(rect)\n\n# Set the rectangle for the logo\nrect = plt.Rectangle((0, 0), 1, 1, fc='blue', ec='black')\nax.add_patch(rect)\n\n# Set the rectangle for the map\nrect = plt.Rectangle((0, 0), 1, 1, fc='red', ec='black')\nax.add_patch(rect)\n\n# Set the rectangle for the logo\nrect = plt.Rectangle((0, 0), 1, 1, fc='green', ec='black')\nax.add_patch(rect)\n\n# Set the rectangle for the map\nrect = plt.Rectangle((0, 0), 1, 1, fc='orange', ec='black')\nax.add_patch(rect)\n\n# Set the rectangle for the logo\nrect = plt.Rectangle((0, 0), 1, 1, fc='blue', ec='black')\nax.add_patch(rect)\n\n# Set the rectangle for the map\nrect = plt.Rectangle((0, 0), 1, 1, fc='red', ec='black')\nax.add_patch(rect)\n\n# Set the rectangle for the logo\nrect = plt.Rectangle((0, 0), 1, 1, fc='green', ec='black')\nax.add_patch(rect)\n\n# Set the rectangle for the map\nrect = plt.Rectangle((0, 0), 1, 1, fc='orange', ec='black')\nax.add_patch(rect)\n\n# Set the rectangle for the logo\nrect = plt.Rectangle((0, 0), 1, 1, fc='blue', ec='black')\nax.add_patch(rect)\n\n# Set the rectangle for the map\nrect = plt.Rectangle((0, 0), 1, 1, fc='red', ec='black')\nax.add_patch(rect)\n\n# Set the rectangle for the logo\nrect = plt.Rectangle((0, 0), 1, 1, fc='green', ec='black')\nax.add_patch(rect)\n\n# Set the rectangle for the map\nrect = plt.Rectangle((0, 0), 1, 1, fc='orange', ec='black')\nax.add_patch(rect)\n\n# Set the rectangle for the logo\nrect = plt.Rectangle((0, 0), 1, 1, fc='blue', ec='black')\nax.add_patch(rect)\n\n# Set the rectangle for the map\nrect = plt.Rectangle((0, 0), 1, 1, fc='red', ec='black')\nax.add_patch(rect)\n\n# Set the rectangle for the logo\nrect = plt.Rectangle((0, 0), 1, 1, fc='green', ec='black')\nax.add_patch(rect)\n\n# Set the rectangle for the map\nrect = plt.Rectangle((0, 0), 1, 1, fc='orange', ec='black')\nax.add_patch(rect)\n\n# Set the rectangle for the logo\nrect = plt.Rectangle((0, 0), 1, 1, fc='blue', ec='black')\nax.add_patch(rect)\n\n# Set the rectangle for the map\nrect = plt.Rectangle((0, 0), 1, "}
{"file": "dataset/ori_500/area_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 10.0))\n\n# Set the title of the plot\nax.set_title('Stock Market Analysis')\n\n# Set the x-axis label\nax.set_xlabel('Time Step')\n\n# Set the y-axis label\nax.set_ylabel('Stock Price')\n\n# Set the x-ticks\nax.set_xticks([0, 1, 2, 3])\n\n# Set the y-ticks\nax.set_yticks([0, 10, 20, 30, 40, 50])\n\n# Set the x-tick labels\nax.set_xticklabels(['0', '1', '2', '3'])\n\n# Set the y-tick labels\nax.set_yticklabels(['0', '10', '20', '30', '40', '50'])\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('green')\nax.spines['top'].set_color('green')\nax.spines['right'].set_color('green')\nax.spines['left'].set_color('green')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('green')\nax.spines['top'].set_color('green')\nax.spines['right'].set_color('green')\nax.spines['left'].set_color('green')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('green')\nax.spines['top'].set_color('green')\nax.spines['right'].set_color('green')\nax.spines['left'].set_color('green')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('green')\nax.spines['top'].set_color('green')\nax.spines['right'].set_color('green')\nax.spines['left'].set_color('green')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('green')\nax.spines['top'].set_color('green')\nax.spines['right'].set_color('green')\nax.spines['left'].set_color('green')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('green')\nax.spines['top'].set_color('green')\nax.spines['right'].set_color('green')\nax.spines['left'].set_color('green')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('green')\nax.spines['top'].set_color('green')\nax.spines['right'].set_color('green')\nax.spines['left'].set_color('green')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('green')\nax.spines['top'].set_color('green')\nax.spines['right'].set_color('green')\nax.spines['left'].set_color('green')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('green')\nax.spines['top'].set_color('green')\nax.spines['right'].set_color('green')\nax.spines['left'].set_color('green')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('green')\nax.spines['top'].set_color('green')\nax.spines['right'].set_color('green')\nax.spines['left'].set_color('green')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('green')\nax.spines['top'].set_color('green')\nax.spines['right'].set_color('green')\nax.spines['left'].set_color('green')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('green')\nax.spines['top'].set_color('green')\nax.spines['right'].set_color('green')\nax.spines['left'].set_color('green')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('green')\nax.spines['top'].set_color('green')\nax.spines['right'].set_color('green')\nax.spines['left'].set_color('green')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('green')\nax.spines['top'].set_color('green')\nax.spines['right'].set_color('green')\nax.spines['left'].set_color('green')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('green')\nax.spines['top'].set_color('green')\nax.spines['right'].set_color('green')\nax.spines['left'].set_color('green')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('green')\nax.spines['top'].set_color('green')\nax.spines['right'].set_color('green')\nax.spines['left'].set_color('green')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('green')\nax.spines['top'].set_color('green')\nax.spines['right'].set_color('green')\nax.spines['left'].set_color('green')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('green')\nax.spines['top'].set_color('green')\nax.spines['right'].set_color('green')\nax.spines['left'].set_color('green')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('green')\nax.spines['top'].set_color('green')\nax.spines['right'].set_color('green')\nax.spines['left'].set_color('green')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('green')\nax.spines['top'].set_color('green')\nax.spines['right'].set_color('green')\nax.spines['left'].set_color('green')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('green')\nax.spines['top'].set_color('green')\nax.spines['right'].set_color('green')\nax.spines['left'].set_color('green')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('green')\nax.spines['top'].set_color('green')\nax.spines['right'].set_color('green')\nax.spines['left'].set_color('green')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('green')\nax.spines['top'].set_color('green')\nax.spines['right'].set_color('green')\nax.spines['left'].set_color('green')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('green')\nax.spines['top'].set_color('green')\nax.spines['right'].set_color('green')\nax.spines['left'].set_color('green')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('green')\nax.spines['top'].set_color('green')\nax.spines['right'].set_color('green')\nax.spines['left'].set_color('green')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('green')\nax.spines['top'].set_color('green')\nax.spines['right'].set_color('green')\nax.spines['left'].set_color('green')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('green')\nax.spines['top'].set_color('green')\nax.spines['right'].set_color('green')\nax.spines['left'].set_color('green')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('green')\nax.spines['top'].set_color('green')\nax.spines['right'].set_color('green')\nax.spines['left'].set_color('green')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('green')\nax.spines['top'].set_color('green')\nax.spines['right'].set_color('green')\nax.spines['left'].set_color('green')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('green')\nax.spines['top'].set_color('green')\nax.spines['right'].set_color('green')\nax.spines['left'].set_color('green')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('green')\nax.spines['top'].set_color('green')\nax.spines['right'].set_color('green')\nax.spines['left'].set_color('green')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('green')\nax.spines['top'].set_color('green')\nax.spines['right'].set_color('green')\nax.spines['left'].set_color('green')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('green')\nax.spines['top'].set_color('green')\nax.spines['right'].set_color('green')\nax.spines['left'].set_color('green')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('green')\nax.spines['top'].set_color('green')\nax.spines['right'].set_color('green')\nax.spines['left'].set_color('green')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('green')\nax.spines['top'].set_color('green')\nax"}
{"file": "dataset/ori_500/area_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Dynamic Effect of Vocab on Zero Shot Accuracy')\n\n# Set the x-axis label\nax.set_xlabel('Deposition IO Norm')\n\n# Set the y-axis label\nax.set_ylabel('Accuracy')\n\n# Create a bar chart with the data\nax.bar([0, 20, 40, 60], [0.53, 0.65, 0.75, 0.80], color='blue')\n\n# Create a line chart with the data\nax.plot([0, 20, 40, 60], [0.55, 0.65, 0.75, 0.80], color='red')\n\n# Create a scatter plot with the data\nax.scatter([0, 20, 40, 60], [0.55, 0.65, 0.75, 0.80], color='green')\n\n# Create a pie chart with the data\nax.pie([0.55, 0.65, 0.75, 0.80], labels=['clip', 'laion (5k)', 'coco (5k)', 'laion (10k)', 'coco (10k)'], colors=['black', 'yellow', 'blue', 'green', 'pink'])\n\n# Create a histogram with the data\nax.hist([0.55, 0.65, 0.75, 0.80], bins=5, color='brown')\n\n# Create a box plot with the data\nax.boxplot([0.55, 0.65, 0.75, 0.80])\n\n# Create a violin plot with the data\nax.violinplot([0.55, 0.65, 0.75, 0.80])\n\n# Create a heatmap with the data\nax.imshow([[0.55, 0.65, 0.75, 0.80]], cmap='hot', interpolation='nearest')\n\n# Create a contour plot with the data\nax.contour([0.55, 0.65, 0.75, 0.80])\n\n# Create a contourf plot with the data\nax.contourf([0.55, 0.65, 0.75, 0.80])\n\n# Create a streamplot with the data\nax.streamplot([0.55, 0.65, 0.75, 0.80])\n\n# Create a quiver plot with the data\nax.quiver([0.55, 0.65, 0.75, 0.80])\n\n# Create a polar plot with the data\nax.polar([0.55, 0.65, 0.75, 0.80])\n\n# Create a 3D plot with the data\nax.plot_surface([0.55, 0.65, 0.75, 0.80])\n\n# Create a 3D scatter plot with the data\nax.scatter3D([0.55, 0.65, 0.75, 0.80])\n\n# Create a 3D bar chart with the data\nax.bar3d([0.55, 0.65, 0.75, 0.80])\n\n# Create a 3D contour plot with the data\nax.contour3D([0.55, 0.65, 0.75, 0.80])\n\n# Create a 3D contourf plot with the data\nax.contourf3D([0.55, 0.65, 0.75, 0.80])\n\n# Create a 3D streamplot with the data\nax.streamplot3D([0.55, 0.65, 0.75, 0.80])\n\n# Create a 3D quiver plot with the data\nax.quiver3D([0.55, 0.65, 0.75, 0.80])\n\n# Create a 3D polar plot with the data\nax.polar3D([0.55, 0.65, 0.75, 0.80])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/area_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nn = [0, 1, 2, 3, 4, 5, 6, 7, 8]\ncontent_gain = [1, 2, 3, 4, 5, 6, 7, 8, 9]\norganization_gain = [2, 3, 4, 5, 6, 7, 8, 9, 10]\nlanguage_gain = [3, 4, 5, 6, 7, 8, 9, 10, 11]\n\n# Plot\nfig, ax = plt.subplots(figsize=(8.0, 4.0))\nax.plot(n, content_gain, label='Content', color='blue')\nax.plot(n, organization_gain, label='Organization', color='orange')\nax.plot(n, language_gain, label='Language', color='green')\n\n# Fill between\nax.fill_between(n, content_gain, color='lightblue')\nax.fill_between(n, organization_gain, color='orange')\nax.fill_between(n, language_gain, color='lightgreen')\n\n# Title and labels\nax.set_title('Cumulative Performance Gain by Augmentation Level')\nax.set_xlabel('n')\nax.set_ylabel('Performance Gain (%)')\n\n# Legend\nax.legend()\n\nplt.show()\n```"}
{"file": "dataset/ori_500/area_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nyears = [1950, 1960, 1970, 1980, 1990, 2000, 2010]\nafrica = [100, 200, 300, 400, 500, 600, 700]\namericas = [150, 250, 350, 450, 550, 650, 750]\nasia = [200, 300, 400, 500, 600, 700, 800]\neurope = [250, 350, 450, 550, 650, 750, 850]\noceania = [300, 400, 500, 600, 700, 800, 900]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data\nax.plot(years, africa, label='Africa', color='#90EE90')\nax.plot(years, americas, label='Americas', color='#FFD700')\nax.plot(years, asia, label='Asia', color='#DC143C')\nax.plot(years, europe, label='Europe', color='#FFA500')\nax.plot(years, oceania, label='Oceania', color='#87CEFA')\n\n# Set the title and labels\nax.set_title('World Population')\nax.set_xlabel('Year')\nax.set_ylabel('Number of people (millions)')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the plots\nx = [0, 20, 40, 60]\ny1 = [0.3, 0.4, 0.5, 0.6]\ny2 = [0.1, 0.2, 0.3, 0.4]\ny3 = [0.5, 0.6, 0.7, 0.8]\ny4 = [0.2, 0.3, 0.4, 0.5]\ny5 = [0.4, 0.5, 0.6, 0.7]\ny6 = [0.1, 0.2, 0.3, 0.4]\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(7.0, 5.0))\n\n# Plot the data\nax.plot(x, y1, color='blue', label='Notre-Dame de Paris')\nax.plot(x, y2, color='green', label='Demi-Gods and Semi-Devils')\nax.plot(x, y3, color='orange', label='The Count of Monte Cristo')\nax.plot(x, y4, color='cyan', label='Game of Thrones')\nax.plot(x, y5, color='purple', label='Attack on Titan')\n\n# Set the limits of the x-axis\nax.set_xlim(0, 60)\n\n# Set the limits of the y-axis\nax.set_ylim(0, 0.8)\n\n# Set the title of the plot\nax.set_title('Movie Scores')\n\n# Set the labels of the axes\nax.set_xlabel('Time (in minutes)')\nax.set_ylabel('Scores')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Product Accuracy')\n\n# Set the x-axis label\nax.set_xlabel('Products')\n\n# Set the y-axis label\nax.set_ylabel('Accuracy (%)')\n\n# Define the products and their accuracy\nproducts = ['Which', 'What', 'How', 'Will', 'Are', 'Is', 'Choose', 'Select', 'Identify', 'Fill']\naccuracy = [55, 45, 35, 25, 15, 50, 40, 30, 20, 10]\n\n# Plot the data\nax.bar(products, accuracy, color='skyblue')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_100.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(15, 5))\n\n# Create a bar chart\nax.bar(['Product A', 'Product B', 'Product C', 'Product D', 'Product E'], [80, 60, 40, 20, 0], color='blue')\n\n# Set the title of the chart\nax.set_title('Average Monthly Sales by Product Across Regions')\n\n# Set the x-axis label\nax.set_xlabel('Products')\n\n# Set the y-axis label\nax.set_ylabel('Sales')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nlengths = [0.9, 10.19, 20.29, 30.39, 40.49]\nspearmans = [0.5, 0.5, 0.5, 0.5, 0.5]\n\n# Plot\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\nax.plot(lengths, spearmans, 'o-')\nax.set_xlabel('length')\nax.set_ylabel('spearman')\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the first bar chart\ncategories = ['FMLP-Rec', 'BERT4Rec', 'SASRec', 'CasER', 'GRU4Rec']\nvalues = [2.2, 2.4, 2.4, 19.9, 14.3]\ncolors = ['blue', 'green', 'red', 'purple', 'orange']\n\n# Data for the second bar chart\ncategories2 = ['MovieLens-1M', 'MovieLens-2M', 'MovieLens-3M', 'MovieLens-4M', 'MovieLens-5M']\nvalues2 = [3.0, 3.1, 3.2, 3.3, 3.4]\ncolors2 = ['blue', 'green', 'red', 'purple', 'orange']\n\n# Data for the third bar chart\ncategories3 = ['Yelp', 'Amazon', 'Google', 'Facebook', 'Twitter']\nvalues3 = [4.8, 4.9, 5.1, 5.2, 5.3]\ncolors3 = ['blue', 'green', 'red', 'purple', 'orange']\n\n# Create a figure and a set of subplots\nfig, axs = plt.subplots(1, 3, figsize=(10, 4))\n\n# Plot the first bar chart\naxs[0].bar(categories, values, color=colors)\naxs[0].set_title('Beauty')\naxs[0].set_xlabel('Categories')\naxs[0].set_ylabel('Values')\n\n# Plot the second bar chart\naxs[1].bar(categories2, values2, color=colors2)\naxs[1].set_title('MovieLens-1M')\naxs[1].set_xlabel('Categories')\naxs[1].set_ylabel('Values')\n\n# Plot the third bar chart\naxs[2].bar(categories3, values3, color=colors3)\naxs[2].set_title('Yelp')\naxs[2].set_xlabel('Categories')\naxs[2].set_ylabel('Values')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nbrands = ['Bactrian-X', 'Lima-X', 'Bactrian-X', 'Lima-X']\nmodels = ['Bactrian-X', 'Lima-X', 'Bactrian-X', 'Lima-X']\nimprovement = [3.5, 2.3, 1.5, 0.8]\ncolors = ['blue', 'orange', 'green', 'brown', 'yellow']\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot the data\nfor i in range(len(brands)):\n    ax.barh(models[i], improvement[i], color=colors[i])\n\n# Set the title and labels\nax.set_title('ENDEFRRITES sampled')\nax.set_xlabel('Improvement [%]')\nax.set_ylabel('Model')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the first graph\ncompanies = ['GCN', 'RvNN', 'Hyphen', 'GET', 'WSDMS', 'DELL']\nf1_scores = [0.82, 0.84, 0.83, 0.86, 0.85, 0.87]\nmarket_cap = [0.75, 0.76, 0.77, 0.78, 0.79, 0.80]\n\n# Data for the second graph\nf1_scores_2 = [0.81, 0.83, 0.84, 0.85, 0.86, 0.87]\nmarket_cap_2 = [0.75, 0.76, 0.77, 0.78, 0.79, 0.80]\n\n# Create the first graph\nfig, ax1 = plt.subplots(figsize=(7, 5))\ncolor = 'tab:blue'\nax1.set_xlabel('Pheme')\nax1.set_ylabel('F1-score', color=color)\nax1.plot(companies, f1_scores, color=color)\nax1.tick_params(axis='y', labelcolor=color)\n\n# Create the second graph\nax2 = ax1.twinx()  \ncolor = 'tab:red'\nax2.set_ylabel('Market Cap', color=color)  \nax2.plot(companies, market_cap, color=color)\nax2.tick_params(axis='y', labelcolor=color)\n\nfig.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Set the title of the plot\nax.set_title('Human Labeling and Agreement Bias Checking')\n\n# Define the data for the bars\nx = ['1', '2', '3', '4', '5', '6']\ny = [45, 35, 25, 15, 5, 5]\n\n# Create a bar chart\nax.bar(x, y, color='blue')\n\n# Add labels to the x-axis\nax.set_xlabel('Human Annotator')\n\n# Add labels to the y-axis\nax.set_ylabel('Score')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_16.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the first subplot\nx1 = [0, 100, 200, 300, 400, 500, 600, 700, 800]\ny1 = [0, 0, 0, 0, 0, 0, 0, 0, 0]\nlabels1 = ['human', 'gpt4', 'gpt4-cot']\nsizes1 = [100, 200, 300]\n\n# Data for the second subplot\nx2 = [0, 100, 200, 300, 400, 500, 600, 700, 800]\ny2 = [0, 0, 0, 0, 0, 0, 0, 0, 0]\nlabels2 = ['human', 'gpt4', 'gpt4-cot']\nsizes2 = [100, 200, 300]\n\nfig, axs = plt.subplots(2, 1, figsize=(8.0, 6.0))\n\n# First subplot\naxs[0].bar(labels1, sizes1, color='cyan')\naxs[0].set_title('s1')\naxs[0].set_xlabel('Role')\naxs[0].set_ylabel('Count')\n\n# Second subplot\naxs[1].bar(labels2, sizes2, color='magenta')\naxs[1].set_title('s2')\naxs[1].set_xlabel('Role')\naxs[1].set_ylabel('Count')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_17.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nproducts = ['ARC', 'MMLU', 'TruthfulQa', 'Winograde', 'Average']\naccuracies = [53.0, 51.3, 56.4, 73.1, 53.1]\ntasks = ['Evol-Instr-2-7B', 'Evol-Instr-70k', 'Evol-Instr-AlpaGasus-1k', 'Evol-Instr-1k-longest', 'LIMA-1k']\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 4.0))\n\n# Plot the data\nax.barh(products, accuracies, color='skyblue')\nax.set_xlabel('Accuracy (%)')\nax.set_title('Product Accuracy')\n\n# Add task names as labels\nfor i, v in enumerate(accuracies):\n    ax.text(v + 1, i, str(v), color='black', va='center')\n\n# Set the y-axis to be tasks\nax.set_yticks(range(len(tasks)))\nax.set_yticklabels(tasks)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_18.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Set the x-axis limits\nax.set_xlim(35, 75)\n\n# Set the y-axis limits\nax.set_ylim(40, 70)\n\n# Set the x-axis ticks\nax.set_xticks([35, 40, 45, 50, 55, 60, 65, 70, 75])\n\n# Set the y-axis ticks\nax.set_yticks([45, 50, 55, 60, 65, 70])\n\n# Set the x-axis label\nax.set_xlabel('Time (s)')\n\n# Set the y-axis label\nax.set_ylabel('Speed (mph)')\n\n# Set the title of the plot\nax.set_title('Car Performance Comparison')\n\n# Create a list of car names\ncar_names = ['GSM8K', 'MNLI', 'race@High']\n\n# Create a list of car colors\ncar_colors = ['blue', 'cyan', 'darkblue']\n\n# Create a list of car performance data\ncar_performance = [\n    [35, 40, 45, 50, 55, 60, 65, 70, 75],\n    [45, 50, 55, 60, 65, 70, 75, 80, 85],\n    [55, 60, 65, 70, 75, 80, 85, 90, 95]\n]\n\n# Plot each car's performance data\nfor i in range(len(car_names)):\n    ax.plot(car_performance[i], color=car_colors[i], label=car_names[i])\n\n# Add a legend to the plot\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_19.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the bar chart\nlabels = ['DLMA-7B VS. LLAMA-7B', 'DLMA-7B VS. CD-7B', 'DLMA-7B VS. RLAIF-7B', 'DLMA-7B VS. RLCD-7B', 'DLMA-13B VS. LLAMA-13B', 'DLMA-13B VS. CD-13B', 'DLMA-13B VS. RLAIF-13B', 'DLMA-13B VS. RLCD-13B']\nvalues = [60.2, 60.2, 46.8, 34.7, 62.5, 62.5, 49.2, 30.9]\ncolors = ['green', 'blue', 'red']\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Create a bar chart\nax.bar(labels, values, color=colors)\n\n# Set the title of the chart\nax.set_title('DLMA VS. Baseline Methods On HHH (Evaluated by GPT4)')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_2.pdf", "response": "import matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 3.0))\n\n# Set the x-axis limits\nax.set_xlim(0, 40)\n\n# Set the y-axis limits\nax.set_ylim(0, 10)\n\n# Set the x-axis ticks\nax.set_xticks([0, 10, 20, 30, 40])\n\n# Set the y-axis ticks\nax.set_yticks([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n\n# Set the x-axis labels\nax.set_xticklabels(['0', '10', '20', '30', '40'])\n\n# Set the y-axis labels\nax.set_yticklabels(['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10'])\n\n# Set the title of the plot\nax.set_title('Gait Distribution Over Time: Policy ORC=111')\n\n# Set the color of the gait distribution bars\ngait_distribution_colors = ['green', 'red', 'blue', 'purple', 'brown', 'orange', 'gray']\n\n# Set the width of the gait distribution bars\ngait_distribution_width = 0.5\n\n# Set the position of the gait distribution bars\ngait_distribution_positions = [0.25, 1.25, 2.25, 3.25, 4.25, 5.25, 6.25]\n\n# Set the height of the gait distribution bars\ngait_distribution_heights = [0.5, 0.7, 0.9, 1.1, 1.3, 1.5, 1.7]\n\n# Plot the gait distribution bars\nfor i in range(len(gait_distribution_colors)):\n    ax.bar(gait_distribution_positions[i], gait_distribution_heights[i], gait_distribution_width, color=gait_distribution_colors[i])\n\n# Set the color of the policy bars\npolicy_colors = ['green', 'red', 'blue', 'purple', 'brown', 'orange', 'gray']\n\n# Set the width of the policy bars\npolicy_width = 0.5\n\n# Set the position of the policy bars\npolicy_positions = [0.25, 1.25, 2.25, 3.25, 4.25, 5.25, 6.25]\n\n# Set the height of the policy bars\npolicy_heights = [0.5, 0.7, 0.9, 1.1, 1.3, 1.5, 1.7]\n\n# Plot the policy bars\nfor i in range(len(policy_colors)):\n    ax.bar(policy_positions[i], policy_heights[i], policy_width, color=policy_colors[i])\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/bar_20.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nbrands = ['LIMA', 'Vicuna', 'Koala', 'WizarDm', 'Self-Instruct']\nsales = [68, 82, 68, 72, 68]\nratings = [24, 15, 22, 19, 23]\nreviews = [8, 3, 10, 9, 9]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Plot bars\nax.barh(brands, sales, color='navy')\n\n# Add labels\nfor i, v in enumerate(sales):\n    ax.text(v + 1, i, str(v), va='center')\n\n# Add ratings and reviews\nfor i, v in enumerate(ratings):\n    ax.text(v - 1, i, str(v), va='center', ha='right')\nfor i, v in enumerate(reviews):\n    ax.text(v + 1, i, str(v), va='center', ha='left')\n\n# Set title and labels\nax.set_title('Brand Sales, Ratings, and Reviews')\nax.set_xlabel('Sales')\nax.set_ylabel('Brands')\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_21.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the charts\nbenefits_data = [14.8, 29.6, 29.6, 18.5, 8.4, 9.0]\nreliability_data = [9.4, 24.1, 24.1, 40.7, 27.8, 9.3]\nsecurity_data = [8.3, 14.8, 14.8, 40.7, 33.3, 9.3]\nprivacy_data = [24.1, 29.6, 29.6, 20.4, 16.7, 9.3]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot the data\nax.bar(range(len(benefits_data)), benefits_data, color='red')\nax.bar(range(len(reliability_data)), reliability_data, color='orange')\nax.bar(range(len(security_data)), security_data, color='grey')\nax.bar(range(len(privacy_data)), privacy_data, color='blue')\n\n# Set the x-axis labels\nax.set_xticks(range(len(benefits_data)))\nax.set_xticklabels(['Benefits', 'Reliability', 'Security', 'Privacy'])\n\n# Set the y-axis label\nax.set_ylabel('Percentage')\n\n# Set the title\nax.set_title('Eye Movement')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_22.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\ntime = [0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3, 1.4, 1.5]\nbrightness = [10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30]\nrate_of_change = [5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25]\nrotation_angle = [-150, -120, -90, -60, -30, 0, 30, 60, 90, 120, 150]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 10.0))\n\n# Plot the data\nax.plot(time, brightness, 'b-', label='Brightness')\nax.plot(time, rate_of_change, 'g-', label='Rate of Change')\nax.plot(time, rotation_angle, 'r-', label='Rotation Angle')\n\n# Set the limits of the axes\nax.set_xlim(0.5, 1.5)\nax.set_ylim(-30, 30)\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_23.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nmodels = ['GPT4', 'GPT-few-shot', 'GPT3.5', 'StarCoder', 'Code Llama', 'NCL']\naccuracy = [3.2, 2.8, 2.5, 3.1, 2.9, 2.7]\ncompleteness = [3.1, 2.6, 2.4, 3.0, 2.8, 2.6]\nconciseness = [3.0, 2.5, 2.3, 2.9, 2.7, 2.5]\nreadability = [3.3, 2.9, 2.7, 3.1, 2.9, 2.7]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(9.0, 5.0))\n\n# Plot the data\nax.bar(models, accuracy, color='blue', label='Accuracy')\nax.bar(models, completeness, bottom=accuracy, color='orange', label='Completeness')\nax.bar(models, conciseness, bottom=[a+c for a,c in zip(accuracy, completeness)], color='red', label='Conciseness')\nax.bar(models, readability, bottom=[a+c+r for a,c,r in zip(accuracy, completeness, conciseness)], color='teal', label='Readability')\n\n# Set the title and labels\nax.set_title('Ratings of Language Models on a Scale from 1-4')\nax.set_xlabel('Language Models')\nax.set_ylabel('Rating')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_24.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nmodels = ['Majority', 'Flan-T5', 'GPT-3.5', 'GPT-4', 'Wizard13b', 'Vicuna13b', 'Mistral17b']\naccuracies = [0.302, 0.601, 0.468, 0.653, 0.384, 0.379, 0.364]\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(8.0, 4.0))\nax.bar(models, accuracies, color='blue')\n\n# Set the title and labels\nax.set_title('Model Accuracy')\nax.set_xlabel('Models')\nax.set_ylabel('Accuracy')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_25.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\nproducts = ['Alpaca-52k+', 'AlpaGasus-1k+', 'LIMa-1k+', 'LIMa-1k*']\nsales = [78.8, 67.4, 44.2, 59.8]\nprofit = [11.7, 18.1, 33.9, 21.0]\nlosses = [9.5, 14.5, 19.2, 19.2]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 4.0))\n\n# Plot the data\nax.barh(products, sales, color='blue', label='Sales')\nax.barh(products, profit, left=sales, color='cyan', label='Profit')\nax.barh(products, losses, left=[s+p for s,p in zip(sales, profit)], color='orange', label='Losses')\n\n# Set the labels and title\nax.set_xlabel('Amount')\nax.set_title('GPT4-as-a-judge')\n\n# Show the legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_26.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nemotions = ['Ang', 'Ct', 'Dis', 'Fea', 'Joy', 'Ntr', 'Sad', 'Sur']\nsentiments = ['negative', 'positive', 'none', 'mixed']\nsentiment_values = [300, 250, 150, 100]\nsentiment_colors = ['red', 'green', 'gray', 'orange']\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\nax.bar(emotions, sentiment_values, color=sentiment_colors)\n\n# Add labels and title\nax.set_xlabel('Emotions')\nax.set_ylabel('Sentiment Values')\nax.set_title('Sentiment Analysis of Emotions')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_27.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nbrands = ['GPT-4V', 'RoboCodeX']\nsuccess_rates = [0.95, 0.85]\noccupancy_errors = [0.02, 0.03]\ngrounding_errors = [0.01, 0.02]\ngripper_collision_errors = [0.01, 0.01]\ntrajectory_optimization_errors = [0.01, 0.01]\ngrasping_failed = [0.01, 0.01]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 3.0))\n\n# Plot bars\nax.barh(brands, success_rates, color='green', label='Success')\nax.barh(brands, occupancy_errors, left=success_rates, color='orange', label='Occupancy Error')\nax.barh(brands, grounding_errors, left=[i+j for i,j in zip(success_rates, occupancy_errors)], color='gray', label='Grounding Error')\nax.barh(brands, gripper_collision_errors, left=[i+j+k for i,j,k in zip(success_rates, occupancy_errors, grounding_errors)], color='yellow', label='Gripper collision')\nax.barh(brands, trajectory_optimization_errors, left=[i+j+k+l for i,j,k,l in zip(success_rates, occupancy_errors, grounding_errors, gripper_collision_errors)], color='blue', label='Trajectory optimization Error')\nax.barh(brands, grasping_failed, left=[i+j+k+l+m for i,j,k,l,m in zip(success_rates, occupancy_errors, grounding_errors, gripper_collision_errors, trajectory_optimization_errors)], color='purple', label='Grasping failed')\n\n# Set labels and title\nax.set_xlabel('Percentage of total trials')\nax.set_title('Robotics System Performance Metrics')\nax.legend()\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_28.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 5.0))\n\n# Set the title of the plot\nax.set_title('Transmission Delay (ms)')\n\n# Set the x-axis label\nax.set_xlabel('Datasets')\n\n# Set the y-axis label\nax.set_ylabel('Transmission Delay (ms)')\n\n# Define the data for the plot\nx = ['VOC 2012', 'COCO 2017']\ny = [3.5, 2.5]\n\n# Plot the data\nax.plot(x, y, 'ro-')\n\n# Add a legend\nax.legend(['JPEG', 'DEEPJSCC w/ ofdm', 'OURS'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_29.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Product Reviews')\n\n# Set the x-axis label\nax.set_xlabel('PDEs')\n\n# Set the y-axis label\nax.set_ylabel('Log L2')\n\n# Set the tick labels for the x-axis\nax.set_xticks([1, 2, 3, 4, 5])\nax.set_xticklabels(['Wave', 'Diffusion', 'Heat', 'Poison', 'Burgers'])\n\n# Set the tick labels for the y-axis\nax.set_yticks([1.0, 1.5, 2.0, 2.5, 3.0, 3.5, 4.0])\nax.set_yticklabels(['1e-1', '1e-2', '1e-3', '1e-4', '1e-5', '1e-6', '1e-7'])\n\n# Set the color of the tick labels\nax.tick_params(axis='x', colors='blue')\nax.tick_params(axis='y', colors='red')\n\n# Set the color of the grid lines\nax.grid(color='green', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('yellow')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'RBF-INT', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, color='blue')\nax.text(0.5, 0.5, 'RBF-POL', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, color='red')\nax.text(0.5, 0.5, 'RBF-COM', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, color='orange')\n\n# Set the color of the bars\nax.bar([1, 2, 3, 4, 5], [1.0, 1.5, 2.0, 2.5, 3.0], color='blue')\nax.bar([1, 2, 3, 4, 5], [1.1, 1.6, 2.1, 2.6, 3.1], color='red')\nax.bar([1, 2, 3, 4, 5], [1.2, 1.7, 2.2, 2.7, 3.2], color='green')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\nmodels = ['w/o DaQNR', 'w/o CPRN', 'w/o QCN', 'Full model']\nlive_values = [0.975, 0.985, 0.995, 0.965]\nsroi_values = [0.975, 0.985, 0.995, 0.965]\nt2d_values = [0.975, 0.985, 0.995, 0.965]\nlive_m_values = [0.975, 0.985, 0.995, 0.965]\nsrocc_values = [0.975, 0.985, 0.995, 0.965]\n\n# Create a figure and a set of subplots\nfig, axs = plt.subplots(2, 2, figsize=(10, 3))\n\n# Plot the live values\naxs[0, 0].bar(models, live_values, color='blue')\naxs[0, 0].set_title('LIVE')\n\n# Plot the SROI values\naxs[0, 1].bar(models, sroi_values, color='orange')\naxs[0, 1].set_title('CSIQ')\n\n# Plot the TID2013 values\naxs[1, 0].bar(models, t2d_values, color='green')\naxs[1, 0].set_title('TID2013')\n\n# Plot the LIVE-M values\naxs[1, 1].bar(models, live_m_values, color='cyan')\naxs[1, 1].set_title('LIVE-M')\n\n# Plot the SROCC values\naxs[0, 0].bar(models, srocc_values, color='brown')\naxs[0, 0].set_title('SROCC')\n\n# Set the title of the entire figure\nfig.suptitle('Models')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_30.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\nx = ['Mixtral-8x7b-Instruct', 'GPT-3.5', 'GPT-4']\ny = [6.11, 28.33, 31.11]\nz = [85.0, 56.11, 60.56]\na = [99.44, 44.44, 42.78]\nb = [85.0, 56.11, 60.56]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Plot the data\nax.bar(x, y, color='pink')\nax.bar(x, z, bottom=y, color='skyblue')\nax.bar(x, a, bottom=[i+j for i,j in zip(y,z)], color='pink')\nax.bar(x, b, bottom=[i+j+k for i,j,k in zip(y,z,a)], color='skyblue')\n\n# Set the title and labels\nax.set_title('One-Pass Rate (%)')\nax.set_xlabel('Model')\nax.set_ylabel('One-Pass Rate (%)')\n\n# Add a legend\nax.legend(['Zero-shot', 'One-shot', 'DS-Agent'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_31.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nlabels = ['LMM-based vs. TPLM-based', 'LMM-based vs. Template', 'LMM-based vs. Markdown', 'TPLM-based vs. Template', 'TPLM-based vs. Markdown', 'Markdown vs. Template']\nwin_rates = [17.0, 20.0, 25.0, 30.5, 31.5, 19.5]\ntie_rates = [54.0, 67.5, 56.5, 57.5, 54.5, 61.0]\nloss_rates = [29.0, 12.5, 18.5, 12.0, 14.0, 19.5]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot the data\nax.barh(labels, win_rates, color='skyblue', label='Win')\nax.barh(labels, tie_rates, left=win_rates, color='lightgreen', label='Tie')\nax.barh(labels, loss_rates, left=[x+y for x,y in zip(win_rates, tie_rates)], color='pink', label='Loss')\n\n# Set the labels and title\nax.set_xlabel('Percentage')\nax.set_title('Comparison of LMM-based vs. TPLM-based, LMM-based vs. Template, LMM-based vs. Markdown, TPLM-based vs. Template, TPLM-based vs. Markdown, and Markdown vs. Template')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_32.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nspecies = ['Combat Spider', 'Milky Cow', 'Shear Sheep']\nprobabilities = [0.72, 0.74, 0.56]\n\n# Create bar chart\nfig, ax = plt.subplots(figsize=(6.0, 2.0))\nax.bar(species, probabilities, color='blue')\n\n# Set title and labels\nax.set_title('Probability of Improvement over VLM Image Encoder Baseline Returns')\nax.set_xlabel('Species')\nax.set_ylabel('Probability of Improvement')\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_33.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nx = [0, 1, 2, 3, 4]\ny = [100, 60, 48.1, 100, 91.7]\nerr = [10, 10, 10, 10, 10]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Plot the data\nax.bar(x, y, yerr=err, capsize=5)\n\n# Set the title and labels\nax.set_title('Instruction Following Results In Different Steps (gpt-3.5-turbo)')\nax.set_xlabel('Steps')\nax.set_ylabel('Scores')\n\n# Set the x-axis tick labels\nax.set_xticks(x)\nax.set_xticklabels(['0', '1', '2', '3', '4'])\n\n# Set the y-axis limits\nax.set_ylim(0, 12)\n\n# Set the color of the bars\nax.bar(x, y, color='blue')\n\n# Set the color of the error bars\nax.errorbar(x, y, yerr=err, fmt='o', ecolor='black', elinewidth=3, capsize=0)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_34.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 4.0))\n\n# Set the title of the plot\nax.set_title('Product Performance')\n\n# Set the x-axis label\nax.set_xlabel('Products')\n\n# Set the y-axis label\nax.set_ylabel('Performance (%)')\n\n# Set the x-ticks\nax.set_xticks(range(len(products)))\nax.set_xticklabels(products)\n\n# Set the y-limits\nax.set_ylim(0, 100)\n\n# Set the grid lines\nax.grid(True)\n\n# Set the background color\nax.set_facecolor('#F5F5DC')\n\n# Set the border color\nax.spines['bottom'].set_color('#8B4513')\nax.spines['top'].set_color('#8B4513')\nax.spines['right'].set_color('#8B4513')\nax.spines['left'].set_color('#8B4513')\n\n# Set the tick colors\nax.tick_params(axis='x', colors='#8B4513')\nax.tick_params(axis='y', colors='#8B4513')\n\n# Set the tick labels\nax.tick_params(axis='x', labelsize=12)\nax.tick_params(axis='y', labelsize=12)\n\n# Set the tick marks\nax.tick_params(axis='x', length=10)\nax.tick_params(axis='y', length=10)\n\n# Set the tick width\nax.tick_params(axis='x', width=2)\nax.tick_params(axis='y', width=2)\n\n# Set the tick direction\nax.tick_params(axis='x', direction='inout')\nax.tick_params(axis='y', direction='inout')\n\n# Set the tick rotation\nax.tick_params(axis='x', rotation=45)\nax.tick_params(axis='y', rotation=0)\n\n# Set the tick color\nax.tick_params(axis='x', colors='#8B4513')\nax.tick_params(axis='y', colors='#8B4513')\n\n# Set the tick label color\nax.tick_params(axis='x', labelcolor='#8B4513')\nax.tick_params(axis='y', labelcolor='#8B4513')\n\n# Set the tick label font size\nax.tick_params(axis='x', labelsize=12)\nax.tick_params(axis='y', labelsize=12)\n\n# Set the tick label font weight\nax.tick_params(axis='x', labelweight='bold')\nax.tick_params(axis='y', labelweight='bold')\n\n# Set the tick label font style\nax.tick_params(axis='x', labelstyle='italic')\nax.tick_params(axis='y', labelstyle='normal')\n\n# Set the tick label font family\nax.tick_params(axis='x', labelfamily='serif')\nax.tick_params(axis='y', labelfamily='sans-serif')\n\n# Set the tick label font variant\nax.tick_params(axis='x', labelvariant='small-caps')\nax.tick_params(axis='y', labelvariant='normal')\n\n# Set the tick label font stretch\nax.tick_params(axis='x', labelstretch='ultra-condensed')\nax.tick_params(axis='y', labelstretch='condensed')\n\n# Set the tick label font size\nax.tick_params(axis='x', labelsize=12)\nax.tick_params(axis='y', labelsize=12)\n\n# Set the tick label font weight\nax.tick_params(axis='x', labelweight='bold')\nax.tick_params(axis='y', labelweight='bold')\n\n# Set the tick label font style\nax.tick_params(axis='x', labelstyle='italic')\nax.tick_params(axis='y', labelstyle='normal')\n\n# Set the tick label font family\nax.tick_params(axis='x', labelfamily='serif')\nax.tick_params(axis='y', labelfamily='sans-serif')\n\n# Set the tick label font variant\nax.tick_params(axis='x', labelvariant='small-caps')\nax.tick_params(axis='y', labelvariant='normal')\n\n# Set the tick label font stretch\nax.tick_params(axis='x', labelstretch='ultra-condensed')\nax.tick_params(axis='y', labelstretch='condensed')\n\n# Set the tick label font size\nax.tick_params(axis='x', labelsize=12)\nax.tick_params(axis='y', labelsize=12)\n\n# Set the tick label font weight\nax.tick_params(axis='x', labelweight='bold')\nax.tick_params(axis='y', labelweight='bold')\n\n# Set the tick label font style\nax.tick_params(axis='x', labelstyle='italic')\nax.tick_params(axis='y', labelstyle='normal')\n\n# Set the tick label font family\nax.tick_params(axis='x', labelfamily='serif')\nax.tick_params(axis='y', labelfamily='sans-serif')\n\n# Set the tick label font variant\nax.tick_params(axis='x', labelvariant='small-caps')\nax.tick_params(axis='y', labelvariant='normal')\n\n# Set the tick label font stretch\nax.tick_params(axis='x', labelstretch='ultra-condensed')\nax.tick_params(axis='y', labelstretch='condensed')\n\n# Set the tick label font size\nax.tick_params(axis='x', labelsize=12)\nax.tick_params(axis='y', labelsize=12)\n\n# Set the tick label font weight\nax.tick_params(axis='x', labelweight='bold')\nax.tick_params(axis='y', labelweight='bold')\n\n# Set the tick label font style\nax.tick_params(axis='x', labelstyle='italic')\nax.tick_params(axis='y', labelstyle='normal')\n\n# Set the tick label font family\nax.tick_params(axis='x', labelfamily='serif')\nax.tick_params(axis='y', labelfamily='sans-serif')\n\n# Set the tick label font variant\nax.tick_params(axis='x', labelvariant='small-caps')\nax.tick_params(axis='y', labelvariant='normal')\n\n# Set the tick label font stretch\nax.tick_params(axis='x', labelstretch='ultra-condensed')\nax.tick_params(axis='y', labelstretch='condensed')\n\n# Set the tick label font size\nax.tick_params(axis='x', labelsize=12)\nax.tick_params(axis='y', labelsize=12)\n\n# Set the tick label font weight\nax.tick_params(axis='x', labelweight='bold')\nax.tick_params(axis='y', labelweight='bold')\n\n# Set the tick label font style\nax.tick_params(axis='x', labelstyle='italic')\nax.tick_params(axis='y', labelstyle='normal')\n\n# Set the tick label font family\nax.tick_params(axis='x', labelfamily='serif')\nax.tick_params(axis='y', labelfamily='sans-serif')\n\n# Set the tick label font variant\nax.tick_params(axis='x', labelvariant='small-caps')\nax.tick_params(axis='y', labelvariant='normal')\n\n# Set the tick label font stretch\nax.tick_params(axis='x', labelstretch='ultra-condensed')\nax.tick_params(axis='y', labelstretch='condensed')\n\n# Set the tick label font size\nax.tick_params(axis='x', labelsize=12)\nax.tick_params(axis='y', labelsize=12)\n\n# Set the tick label font weight\nax.tick_params(axis='x', labelweight='bold')\nax.tick_params(axis='y', labelweight='bold')\n\n# Set the tick label font style\nax.tick_params(axis='x', labelstyle='italic')\nax.tick_params(axis='y', labelstyle='normal')\n\n# Set the tick label font family\nax.tick_params(axis='x', labelfamily='serif')\nax.tick_params(axis='y', labelfamily='sans-serif')\n\n# Set the tick label font variant\nax.tick_params(axis='x', labelvariant='small-caps')\nax.tick_params(axis='y', labelvariant='normal')\n\n# Set the tick label font stretch\nax.tick_params(axis='x', labelstretch='ultra-condensed')\nax.tick_params(axis='y', labelstretch='condensed')\n\n# Set the tick label font size\nax.tick_params(axis='x', labelsize=12)\nax.tick_params(axis='y', labelsize=12)\n\n# Set the tick label font weight\nax.tick_params(axis='x', labelweight='bold')\nax.tick_params(axis='y', labelweight='bold')\n\n# Set the tick label font style\nax.tick_params(axis='x', labelstyle='italic')\nax.tick_params(axis='y', labelstyle='normal')\n\n# Set the tick label font family\nax.tick_params(axis='x', labelfamily='serif')\nax.tick_params(axis='y', labelfamily='sans-serif')\n\n# Set the tick label font variant\nax.tick_params(axis='x', labelvariant='small-caps')\nax.tick_params(axis='y', labelvariant='normal')\n\n# Set the tick label font stretch\nax.tick_params(axis='x', labelstretch='ultra-condensed')\nax.tick_params(axis='y', labelstretch='condensed')\n\n# Set the tick label font size\nax.tick_params(axis='x', labelsize=12)\nax.tick_params(axis='y', labelsize=12)\n\n# Set the tick label font weight\nax.tick_params(axis='x', labelweight='bold')\nax.tick_params(axis='y', labelweight='bold')\n\n# Set the tick label font style\nax.tick_params(axis='x', labelstyle='italic')\nax.tick_params(axis='y', labelstyle='normal')\n\n# Set the tick label font family\nax.tick_params(axis='x', labelfamily='serif')\nax.tick_params(axis='y', labelfamily='sans-serif')\n\n# Set the tick label font variant\nax.tick_params(axis='x', labelvariant='small-caps')\nax.tick_params(axis='y', labelvariant='normal')\n\n# Set the tick label font stretch\nax.tick_params(axis='x', labelstretch='ultra-condensed')\nax.tick_params(axis='y', labelstretch='condensed')\n\n# Set the tick label font size\nax.tick_params(axis='x', labelsize=12)\nax.tick_params(axis='y', labelsize=12)\n\n# Set the tick label font weight\nax.tick_params(axis='x', labelweight='bold')\nax.tick_params(axis='y', labelweight='bold')\n\n# Set the tick label font style\nax.tick_params(axis='x', labelstyle='italic')\nax.tick_params(axis='y', labelstyle='normal')\n\n# Set the tick label font family\nax.tick_params(axis='x', labelfamily='serif')\nax.tick_params(axis='y', labelfamily='sans-serif')\n\n# Set the tick label font variant\nax.tick_params(axis='x', labelvariant='small-caps')\nax.tick_params(axis='y', labelvariant='normal')\n\n# Set the tick label font stretch\nax.tick_params(axis='x', labelstretch='ultra-condensed')\nax.tick_params(axis='y', labelstretch='condensed')\n\n# Set the tick label font size\nax.tick_params(axis='x', labelsize=12)\nax.tick_params(axis='y', labelsize=12)\n\n# Set the tick label font weight\nax.tick_params(axis='x', labelweight='bold')\nax.tick_params(axis='y', labelweight='bold')\n\n# Set the tick label font style\nax.tick_params(axis='x', labelstyle='italic')\nax.tick_params(axis='y', labelstyle='normal')\n\n# Set the tick label font family\nax.tick_params(axis='x', labelfamily='serif')\nax.tick_params(axis='y', labelfamily='sans-serif')\n\n# Set the tick label font variant\nax.tick_params(axis='x', labelvariant='small-caps')\nax.tick_params(axis='y', labelvariant='normal')\n\n# Set the tick label font stretch\nax.tick_params(axis='x', labelstretch='ultra-condensed')\nax.tick_params(axis='y', labelstretch='condensed')\n\n# Set the tick label font size\nax.tick_params(axis='x', labelsize=12)\nax.tick_params(axis='y', labelsize=12)\n\n# Set the tick label font weight\nax.tick_params(axis='x', labelweight='bold')\nax.tick_params(axis='y', labelweight='bold')\n\n# Set the tick label font style\nax.tick_params(axis='x', labelstyle='italic')\nax.tick_params(axis='y', labelstyle='normal')\n\n# Set the tick label font family\nax.tick_params(axis='x', labelfamily='serif')\nax.tick_params(axis='y', labelfamily='sans-serif')\n\n# Set the tick label font variant\nax.tick_params(axis='x', labelvariant='small-caps')\nax.tick_params(axis='y', labelvariant='normal')\n\n# Set the tick label font stretch\nax.tick_params(axis='x', labelstretch='ultra-condensed')\nax.tick_params(axis='y', labelstretch='condensed')\n\n# Set the tick label font size\nax.tick_params(axis='x', labelsize=12)\nax.tick_params(axis='y', labelsize=12)\n\n# Set the tick label font weight\nax.tick_params(axis='x', labelweight='bold')\nax.tick_params(axis='y', labelweight='bold')\n\n# Set the tick label font style\nax.tick_params(axis='x', labelstyle='italic')\nax.tick_params(axis='y', labelstyle='normal')\n\n# Set the tick label font family\nax.tick_params(axis='x', labelfamily='serif')\nax.tick_params(axis='y', labelfamily='sans-serif')\n\n# Set the tick label font variant\nax.tick_params(axis='x', labelvariant='small-caps')\nax.tick_params(axis='y', labelvariant='normal')\n\n# Set the tick label font stretch\nax.tick_params(axis='x', labelstretch='ultra-condensed')\nax.tick_params(axis='y', labelstretch='condensed')\n\n# Set the tick label font size\nax.tick_params(axis='x', labelsize=12)\nax.tick_params(axis='y', labelsize=12)\n\n# Set the tick label font weight\nax.tick_params(axis='x', labelweight='bold')\nax.tick_params(axis='y', labelweight='bold')\n\n# Set the tick label font style\nax.tick_params(axis='x', labelstyle='italic')\nax.tick_params(axis='y', labelstyle='normal')\n\n# Set the tick label font family\nax.tick_params(axis='x', labelfamily='serif')\nax.tick_params(axis='y', labelfamily='sans-serif')\n\n# Set the tick label font variant\nax.tick_params(axis='x', labelvariant='small-caps')\nax.tick_params(axis='y', labelvariant='normal')\n\n# Set the tick label font stretch\nax.tick_params(axis='x', labelstretch='ultra-condensed')\nax.tick_params(axis='y', labelstretch='condensed')\n\n# Set the tick label font size\nax.tick_params(axis='x', labelsize=12)\nax.tick_params(axis='y', labelsize=12)\n\n# Set the tick label font weight\nax.tick_params(axis='x', labelweight='bold')\nax.tick_params(axis='y', labelweight='bold')\n\n# Set the tick label font style\nax.tick_params(axis='x', labelstyle='italic')\nax.tick_params(axis='y', labelstyle='normal')\n\n# Set the tick label font family\nax.tick_params(axis='x', labelfamily='serif')\nax.tick_params(axis='y', labelfamily='sans-serif')\n\n# Set the tick label font variant\nax.tick_params(axis='x', labelvariant='small-caps')\nax.tick_params(axis='y', labelvariant='normal')\n\n# Set the tick label font stretch\nax.tick_params(axis='x', labelstretch='ultra-condensed')\nax.tick_params(axis='y', labelstretch='condensed')\n\n# Set the tick label font size\nax.tick_params(axis='x', labelsize=12)\nax.tick_params(axis='y', labelsize=12)\n\n# Set the tick label font weight\nax.tick_params(axis='x', labelweight='bold')\nax.tick_params(axis='y', labelweight='bold')\n\n# Set the tick label font style\nax.tick_params(axis='x', labelstyle='italic')\nax.tick_params(axis='y', labelstyle='normal')\n\n# Set the tick label font family\nax.tick_params(axis='x', labelfamily='serif')\nax.tick_params(axis='y', labelfamily='sans-serif')\n\n# Set the tick label font variant\nax.tick_params(axis='x', labelvariant='small-caps')\nax.tick_params(axis='y', labelvariant='normal')\n\n# Set the tick label font stretch\nax.tick_params(axis='x', labelstretch='ultra-condensed')\nax.tick_params(axis='y', labelstretch='condensed')\n\n# Set the tick label font size\nax.tick_params(axis='x', labelsize=12)\nax.tick_params(axis='y', labelsize=12)\n\n# Set the tick label font weight\nax.tick_params(axis='x', labelweight='bold')\nax.tick_params(axis='y', labelweight='bold')\n\n# Set the tick label font style\nax.tick_params(axis='x', labelstyle='italic')\nax.tick_params(axis='y', labelstyle='normal')\n\n# Set the tick label font family\nax.tick_params(axis='x', labelfamily='serif')\nax.tick_params(axis='y', labelfamily='sans-serif')\n\n# Set the tick label font variant\nax.tick_params(axis='x', labelvariant='small-caps')\nax.tick_params(axis='y', labelvariant='normal')\n\n# Set the tick label font stretch\nax.tick_params(axis='x', labelstretch='ultra-condensed')\nax.tick_params(axis='y', labelstretch='condensed')\n\n# Set the tick label font size\nax.tick_params(axis='x', labelsize=12)\nax.tick_params(axis='y', labelsize=12)\n\n# Set the tick label font weight\nax.tick_params(axis='x', labelweight='bold')\nax.tick_params(axis='y', labelweight='bold')\n\n# Set the tick label font style\nax.tick_params(axis='x', labelstyle='italic')\nax.tick_params(axis='y', labelstyle='normal')\n\n# Set the tick label font family\nax.tick_params(axis='x', labelfamily='serif')\nax.tick_params(axis='y', labelfamily='sans-serif')\n\n# Set the tick label font variant\nax.tick_params(axis='x', labelvariant='small-caps')\nax.tick_params(axis='y', labelvariant='normal')\n\n# Set the tick label font stretch\nax.tick_params(axis='x', labelstretch='ultra-condensed')\nax.tick_params(axis='y', labelstretch='condensed')\n\n# Set the tick label font size\nax.tick_params(axis='x', labelsize=12)\nax.tick_params(axis='y', labelsize=12)\n\n# Set the tick label font weight\nax.tick_params(axis='x', labelweight='bold')\nax.tick_params(axis='y', labelweight='bold')\n\n# Set the tick label font style\nax.tick_params(axis='x', labelstyle='italic')\nax.tick_params(axis='y', labelstyle='normal')\n\n# Set the tick label font family\nax.tick_params(axis='x', labelfamily='serif')\nax.tick_params(axis='y', labelfamily='sans-serif')\n\n# Set the tick label font variant\nax.tick_params(axis='x', labelvariant='small-caps')\nax.tick_params(axis='y', labelvariant='normal')\n\n# Set the tick label font stretch\nax.tick_params(axis='x', labelstretch='"}
{"file": "dataset/ori_500/bar_35.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nbrands = ['Random', 'Llama2', 'Mistral']\nscores = [5.52, 5.53, 5.83]\nmt_bench_scores = [6.57, 6.75, 6.84]\nm2_bench_scores = [6.9, 7.08, 7.1]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Plot the data\nax.bar(brands, scores, color='purple')\nax.bar(brands, mt_bench_scores, bottom=scores, color='blue')\nax.bar(brands, m2_bench_scores, bottom=[x+y for x,y in zip(scores, mt_bench_scores)], color='brown')\n\n# Set the title and labels\nax.set_title('MT-Bench Score vs Mistral2 Score')\nax.set_xlabel('Brands')\nax.set_ylabel('Scores')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_36.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nx = [100, 1000]\ny = [49.98, 49.63]\nyerr = [1.05, 0.74]\n\n# Plot\nfig, ax = plt.subplots(figsize=(6.61, 5.23))\nax.errorbar(x, y, yerr=yerr, fmt='o', capsize=5)\nax.set_xlabel('Number of Clusters')\nax.set_ylabel('MMSE Score')\n\n# Colored rectangles\nax.add_patch(plt.Rectangle((0, 47), 100, 2, color='brown'))\nax.add_patch(plt.Rectangle((100, 47), 900, 2, color='brown'))\n\n# Colored rectangles\nax.add_patch(plt.Rectangle((0, 49), 100, 2, color='blue'))\nax.add_patch(plt.Rectangle((100, 49), 900, 2, color='blue'))\n\n# Colored rectangles\nax.add_patch(plt.Rectangle((0, 51), 100, 2, color='orange'))\nax.add_patch(plt.Rectangle((100, 51), 900, 2, color='orange'))\n\n# Colored rectangles\nax.add_patch(plt.Rectangle((0, 53), 100, 2, color='green'))\nax.add_patch(plt.Rectangle((100, 53), 900, 2, color='green'))\n\n# Colored rectangles\nax.add_patch(plt.Rectangle((0, 55), 100, 2, color='red'))\nax.add_patch(plt.Rectangle((100, 55), 900, 2, color='red'))\n\n# Colored rectangles\nax.add_patch(plt.Rectangle((0, 57), 100, 2, color='purple'))\nax.add_patch(plt.Rectangle((100, 57), 900, 2, color='purple'))\n\n# Colored rectangles\nax.add_patch(plt.Rectangle((0, 59), 100, 2, color='pink'))\nax.add_patch(plt.Rectangle((100, 59), 900, 2, color='pink'))\n\n# Colored rectangles\nax.add_patch(plt.Rectangle((0, 61), 100, 2, color='cyan'))\nax.add_patch(plt.Rectangle((100, 61), 900, 2, color='cyan'))\n\n# Colored rectangles\nax.add_patch(plt.Rectangle((0, 63), 100, 2, color='magenta'))\nax.add_patch(plt.Rectangle((100, 63), 900, 2, color='magenta'))\n\n# Colored rectangles\nax.add_patch(plt.Rectangle((0, 65), 100, 2, color='yellow'))\nax.add_patch(plt.Rectangle((100, 65), 900, 2, color='yellow'))\n\n# Colored rectangles\nax.add_patch(plt.Rectangle((0, 67), 100, 2, color='black'))\nax.add_patch(plt.Rectangle((100, 67), 900, 2, color='black'))\n\n# Colored rectangles\nax.add_patch(plt.Rectangle((0, 69), 100, 2, color='white'))\nax.add_patch(plt.Rectangle((100, 69), 900, 2, color='white'))\n\n# Colored rectangles\nax.add_patch(plt.Rectangle((0, 71), 100, 2, color='gray'))\nax.add_patch(plt.Rectangle((100, 71), 900, 2, color='gray'))\n\n# Colored rectangles\nax.add_patch(plt.Rectangle((0, 73), 100, 2, color='silver'))\nax.add_patch(plt.Rectangle((100, 73), 900, 2, color='silver'))\n\n# Colored rectangles\nax.add_patch(plt.Rectangle((0, 75), 100, 2, color='gold'))\nax.add_patch(plt.Rectangle((100, 75), 900, 2, color='gold'))\n\n# Colored rectangles\nax.add_patch(plt.Rectangle((0, 77), 100, 2, color='brown'))\nax.add_patch(plt.Rectangle((100, 77), 900, 2, color='brown'))\n\n# Colored rectangles\nax.add_patch(plt.Rectangle((0, 79), 100, 2, color='blue'))\nax.add_patch(plt.Rectangle((100, 79), 900, 2, color='blue'))\n\n# Colored rectangles\nax.add_patch(plt.Rectangle((0, 81), 100, 2, color='orange'))\nax.add_patch(plt.Rectangle((100, 81), 900, 2, color='orange'))\n\n# Colored rectangles\nax.add_patch(plt.Rectangle((0, 83), 100, 2, color='green'))\nax.add_patch(plt.Rectangle((100, 83), 900, 2, color='green'))\n\n# Colored rectangles\nax.add_patch(plt.Rectangle((0, 85), 100, 2, color='red'))\nax.add_patch(plt.Rectangle((100, 85), 900, 2, color='red'))\n\n# Colored rectangles\nax.add_patch(plt.Rectangle((0, 87), 100, 2, color='purple'))\nax.add_patch(plt.Rectangle((100, 87), 900, 2, color='purple'))\n\n# Colored rectangles\nax.add_patch(plt.Rectangle((0, 89), 100, 2, color='pink'))\nax.add_patch(plt.Rectangle((100, 89), 900, 2, color='pink'))\n\n# Colored rectangles\nax.add_patch(plt.Rectangle((0, 91), 100, 2, color='cyan'))\nax.add_patch(plt.Rectangle((100, 91), 900, 2, color='cyan'))\n\n# Colored rectangles\nax.add_patch(plt.Rectangle((0, 93), 100, 2, color='magenta'))\nax.add_patch(plt.Rectangle((100, 93), 900, 2, color='magenta'))\n\n# Colored rectangles\nax.add_patch(plt.Rectangle((0, 95), 100, 2, color='yellow'))\nax.add_patch(plt.Rectangle((100, 95), 900, 2, color='yellow'))\n\n# Colored rectangles\nax.add_patch(plt.Rectangle((0, 97), 100, 2, color='black'))\nax.add_patch(plt.Rectangle((100, 97), 900, 2, color='black'))\n\n# Colored rectangles\nax.add_patch(plt.Rectangle((0, 99), 100, 2, color='white'))\nax.add_patch(plt.Rectangle((100, 99), 900, 2, color='white'))\n\n# Colored rectangles\nax.add_patch(plt.Rectangle((0, 101), 100, 2, color='gray'))\nax.add_patch(plt.Rectangle((100, 101), 900, 2, color='gray'))\n\n# Colored rectangles\nax.add_patch(plt.Rectangle((0, 103), 100, 2, color='silver'))\nax.add_patch(plt.Rectangle((100, 103), 900, 2, color='silver'))\n\n# Colored rectangles\nax.add_patch(plt.Rectangle((0, 105), 100, 2, color='gold'))\nax.add_patch(plt.Rectangle((100, 105), 900, 2, color='gold'))\n\n# Colored rectangles\nax.add_patch(plt.Rectangle((0, 107), 100, 2, color='brown'))\nax.add_patch(plt.Rectangle((100, 107), 900, 2, color='brown'))\n\n# Colored rectangles\nax.add_patch(plt.Rectangle((0, 109), 100, 2, color='blue'))\nax.add_patch(plt.Rectangle((100, 109), 900, 2, color='blue'))\n\n# Colored rectangles\nax.add_patch(plt.Rectangle((0, 111), 100, 2, color='orange'))\nax.add_patch(plt.Rectangle((100, 111), 900, 2, color='orange'))\n\n# Colored rectangles\nax.add_patch(plt.Rectangle((0, 113), 100, 2, color='green'))\nax.add_patch(plt.Rectangle((100, 113), 900, 2, color='green'))\n\n# Colored rectangles\nax.add_patch(plt.Rectangle((0, 115), 100, 2, color='red'))\nax.add_patch(plt.Rectangle((100, 115), 900, 2, color='red'))\n\n# Colored rectangles\nax.add_patch(plt.Rectangle((0, 117), 100, 2, color='purple'))\nax.add_patch(plt.Rectangle((100, 117), 900, 2, color='purple'))\n\n# Colored rectangles\nax.add_patch(plt.Rectangle((0, 119), 100, 2, color='pink'))\nax.add_patch(plt.Rectangle((100, 119), 900, 2, color='pink'))\n\n# Colored rectangles\nax.add_patch(plt.Rectangle((0, 121), 100, 2, color='cyan'))\nax.add_patch(plt.Rectangle((100, 121), 900, 2, color='cyan'))\n\n# Colored rectangles\nax.add_patch(plt.Rectangle((0, 123), 100, 2, color='magenta'))\nax.add_patch(plt.Rectangle((100, 123), 900, 2, color='magenta'))\n\n# Colored rectangles\nax.add_patch(plt.Rectangle((0, 125), 100, 2, color='yellow'))\nax.add_patch(plt.Rectangle((100, 125), 900, 2, color='yellow'))\n\n# Colored rectangles\nax.add_patch(plt.Rectangle((0, 127), 100, 2, color='black'))\nax.add_patch(plt.Rectangle((100, 127), 900, 2, color='black'))\n\n# Colored rectangles\nax.add_patch(plt.Rectangle((0, 129), 100, 2, color='white'))\nax.add_patch(plt.Rectangle((100, 129), 900, 2, color='white'))\n\n# Colored rectangles\nax.add_patch(plt.Rectangle((0, 131), 100, 2, color='gray'))\nax.add_patch(plt.Rectangle((100, 131), 900, 2, color='gray'))\n\n# Colored rectangles\nax.add_patch(plt.Rectangle((0, 133), 100, 2, color='silver'))\nax.add_patch(plt.Rectangle((100, 133), 900, 2, color='silver'))\n\n# Colored rectangles\nax.add_patch(plt.Rectangle((0, 135), 100, 2, color='gold'))\nax.add_patch(plt.Rectangle((100, 135), 900, 2, color='gold'))\n\n# Colored rectangles\nax.add_patch(plt.Rectangle((0, 137), 100, 2, color='brown'))\nax.add_patch(plt.Rectangle((100, 137), 900, 2, color='brown'))\n\n# Colored rectangles\nax.add_patch(plt.Rectangle((0, 139), 100, 2, color='blue'))\nax.add_patch(plt.Rectangle((100, 139), 900, 2, color='blue'))\n\n# Colored rectangles\nax.add_patch(plt.Rectangle((0, 141), 100, 2, color='orange'))\nax.add_patch(plt.Rectangle((100, 141), 900, 2, color='orange'))\n\n# Colored rectangles\nax.add_patch(plt.Rectangle((0, 143), 100, 2, color='green'))\nax.add_patch(plt.Rectangle((100, 143), 900, 2, color='green'))\n\n# Colored rectangles\nax.add_patch(plt.Rectangle((0, 145), 100, 2, color='red'))\nax.add_patch(plt.Rectangle((100, 145), 900, 2, color='red'))\n\n# Colored rectangles\nax.add_patch(plt.Rectangle((0, 147), 100, 2, color='purple'))\nax.add_patch(plt.Rectangle((100, 147), 900, 2, color='purple'))\n\n# Colored rectangles\nax.add_patch(plt.Rectangle((0, 149), 100, 2, color='pink'))\nax.add_patch(plt.Rectangle((100, 149), 900, 2, color='pink'))\n\n# Colored rectangles\nax.add_patch(plt.Rectangle((0, 151), 100, 2, color='cyan'))\nax.add_patch(plt.Rectangle((100, 151), 900, 2, color='cyan'))\n\n# Colored rectangles\nax.add_patch(plt.Rectangle((0, 153), 100, 2, color='magenta'))\nax.add_patch(plt.Rectangle((100, 153), 900, 2, color='magenta'))\n\n# Colored rectangles\nax.add_patch(plt.Rectangle((0, 155), 100, 2, color='yellow'))\nax.add_patch(plt.Rectangle((100, 155), 900, 2, color='yellow'))\n\n# Colored rectangles\nax.add_patch(plt.Rectangle((0, 157), 100, 2, color='black'))\nax.add_patch(plt.Rectangle((100, 157), 900, 2, color='black'))\n\n# Colored rectangles\nax.add_patch(plt.Rectangle((0, 159), 100, 2, color='white'))\nax.add_patch(plt.Rectangle((100, 159), 900, 2, color='white'))\n\n# Colored rectangles\nax.add_patch(plt.Rectangle((0, 161), 100, 2, color='gray'))\nax.add_patch(plt.Rectangle((100, 161), 900, 2, color='gray'))\n\n# Colored rectangles\nax.add_patch(plt.Rectangle((0, 163), 100, 2, color='silver'))\nax.add_patch(plt.Rectangle((100, 163), 900, 2, color='silver'))\n\n# Colored rectangles\nax.add_patch(plt.Rectangle((0, 165), 100, 2, color='gold'))\nax.add_patch(plt.Rectangle((100, 165), 900, 2, color='gold'))\n\n# Colored rectangles\nax.add_patch(plt.Rectangle((0, 167), 100, 2, color='brown'))\nax.add_patch(plt.Rectangle((100, 167), 900, 2, color='brown'))\n\n# Colored rectangles\nax.add_patch(plt.Rectangle((0, 169), 100, 2, color='blue'))\nax.add_patch(plt.Rectangle((100, 169), 900, 2, color='blue'))\n\n# Colored rectangles\nax.add_patch(plt.Rectangle((0, 171), 100, 2, color='orange'))\nax.add_patch(plt.Rectangle((100, 171), 900, 2, color='orange'))\n\n# Colored rectangles\nax.add_patch(plt.Rectangle((0, 173), 100, 2, color='green'))\nax.add_patch(plt.Rectangle((100, 173), 900, 2, color='green'))\n\n# Colored rectangles\nax.add_patch(plt.Rectangle((0, 175), 100, 2, color='red'))\nax.add_patch(plt.Rectangle((100, 175), 900, 2, color='red'))\n\n# Colored rectangles\nax.add_patch(plt.Rectangle((0, 177), 100, 2, color='purple'))\nax.add_patch(plt.Rectangle((100, 177), 900, 2, color='purple'))\n\n# Colored rectangles\nax.add_patch(plt.Rectangle((0, 179), 100, 2, color='pink'))\nax.add_patch(plt.Rectangle((100, 179), 900, 2, color='pink'))\n\n# Colored rectangles\nax.add_patch(plt.Rectangle((0, 181), 100, 2, color='cyan'))\nax.add_patch(plt.Rectangle((100, 181), 900, 2, color='cyan'))\n\n# Colored rectangles\nax.add_patch(plt.Rectangle((0,"}
{"file": "dataset/ori_500/bar_37.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the bar chart\nbrands = ['ResNet18', 'AlexNet', 'ResNet50']\nspeedups = [7.4, 6.1, 4.3]\nperturbations = [0, 4.8, 7.8]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(12, 4))\n\n# Plot the bar chart\nax.bar(brands, speedups, color='blue')\n\n# Set the title and labels\nax.set_title('Speedup')\nax.set_xlabel('Brands')\nax.set_ylabel('Speedup')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_38.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for each column\ndata = {\n    'CL-7b': [20, 40, 60, 80, 100],\n    'CL-13b': [20, 40, 60, 80, 100],\n    'CL-34b': [20, 40, 60, 80, 100],\n    'DS-6.7b': [20, 40, 60, 80, 100],\n    'DS-33b': [20, 40, 60, 80, 100],\n    'SC': [20, 40, 60, 80, 100]\n}\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(7.0, 5.0))\n\n# Set the title of the plot\nax.set_title('LeetCode, DS-6.7b')\n\n# Set the x-axis label\nax.set_xlabel('Time')\n\n# Set the y-axis label\nax.set_ylabel('Accuracy')\n\n# Plot the data\nfor key, value in data.items():\n    ax.plot(value, label=key)\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_39.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nproducts = ['Vicuna', 'Koala', 'WizardLM', 'SInstruct', 'LIMA']\nrecoast = [53, 80, 116, 99, 179]\ntie = [6, 33, 49, 50, 23]\nalpacawins = [21, 67, 103, 103, 98]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Plot the data\nax.barh(products, recoast, color='orangered')\nax.barh(products, tie, left=recoast, color='yellow')\nax.barh(products, alpacawins, left=[i+j for i,j in zip(recoast,tie)], color='cornflowerblue')\n\n# Set the labels and title\nax.set_xlabel('Wins')\nax.set_title('Product Wins by Recost (1%)')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nbrands = ['CometKiwi', 'LaBSE', 'IF', 'Max', 'Ppl', 'STARE', 'Wass Combo', 'ALTI+']\nfpr_values = [35.15, 26.86, 19.08, 22.09, 20.67, 30.67, 58.99, 66.19]\nnon_agg_values = [38.38, 42.5, 48.83, 62.94, 36.63, 23.9, 26.38, 17.06]\nagg_values = [58.99, 66.19, 58.99, 62.94, 48.83, 42.5, 36.63, 23.9]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Plot the data\nax.plot(brands, fpr_values, label='FPR@90TPR')\nax.plot(brands, non_agg_values, label='Non-Aggregation')\nax.plot(brands, agg_values, label='Aggregation')\n\n# Add a legend\nax.legend()\n\n# Set the title\nax.set_title('FPR@90TPR on Guerreiro et al. 2022')\n\n# Set the x-axis label\nax.set_xlabel('Brands')\n\n# Set the y-axis label\nax.set_ylabel('Values')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_40.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ncategories = ['Literal', 'Assignment', 'Operator', 'Comment', 'Operation', 'Exception Handling', 'Method Call', 'External Variable/Method', 'Return', 'Variable', 'External Class', 'Argument', 'Conditional Block', 'Loop', 'Conditional Statement', 'Variable Declaration', 'Method Declaration', 'Parameter']\nvalues = [120, 110, 100, 90, 80, 70, 60, 50, 40, 30, 20, 10, 5, 2, 1, 0.5, 0.2, 0.1]\n\n# Create bar chart\nfig, ax = plt.subplots(figsize=(10, 5))\nax.bar(categories, values, color='blue')\n\n# Set title and labels\nax.set_title('Relative Difference in Machine vs. Human Focus on Semantic Categories')\nax.set_xlabel('Semantic Category')\nax.set_ylabel('Difference (%)')\n\n# Rotate x-axis labels for better visibility\nplt.xticks(rotation=90)\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_41.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\nx = [5, 10, 15, 20]\ny1 = [66.3, 61.9, 53.8, 53.7]\ny2 = [10.1, 13.6, 13.7, 13.7]\ny3 = [49.3, 45.7, 41.6, 31.5]\ny4 = [36.3, 36.0, 36.0, 36.0]\ny5 = [48.0, 42.6, 36.5, 36.5]\ny6 = [43.8, 40.2, 30.6, 22.5]\ny7 = [49.5, 42.8, 40.2, 36.5]\ny8 = [40.5, 40.5, 36.5, 36.5]\ny9 = [43.8, 40.2, 30.6, 22.5]\ny10 = [49.5, 42.8, 40.2, 36.5]\ny11 = [40.5, 40.5, 36.5, 36.5]\ny12 = [43.8, 40.2, 30.6, 22.5]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(14.0, 4.0))\n\n# Plot the data\nax.plot(x, y1, label='Truthful: Misleading = 2:0')\nax.plot(x, y2, label='Truthful: Misleading = 2:1')\nax.plot(x, y3, label='Truthful: Misleading = 2:2')\nax.plot(x, y4, label='Misleading: Misleading = 2:0')\nax.plot(x, y5, label='Misleading: Misleading = 2:1')\nax.plot(x, y6, label='Misleading: Misleading = 2:2')\nax.plot(x, y7, label='Misleading: Misleading = 1:2')\nax.plot(x, y8, label='Misleading: Misleading = 0:2')\nax.plot(x, y9, label='Misleading: Misleading = 2:0')\nax.plot(x, y10, label='Misleading: Misleading = 2:1')\nax.plot(x, y11, label='Misleading: Misleading = 2:2')\nax.plot(x, y12, label='Misleading: Misleading = 0:2')\n\n# Set the color of the lines\nax.set_prop_cycle(color=['blue', 'red'])\n\n# Add a legend\nax.legend()\n\n# Set the title and labels\nax.set_title('Sentiment Analysis of News Articles')\nax.set_xlabel('Time (in days)')\nax.set_ylabel('Sentiment Score')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_42.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the bar chart\nbrands = ['PROST', 'ARC-easy', 'COMVE', 'OpenBookQA', 'SCIQ', 'NumSense', 'CoQA', 'ComQA2.0', 'ComTz', 'CyC', 'Winogventi', 'Com2Sense', 'CODAH', 'WSC', 'ARC-challenge', 'SocialIQA', 'HellaSWAG-wikiHow', 'Al2Sci-elem', 'Winogrande', 'PIQA', 'QuaRel', 'QuaC', 'SC', 'ST', 'alphaNLI', 'SWAG']\ndaac_values = [3.4, 3.1, 2.9, 2.7, 2.6, 2.5, 2.4, 2.3, 2.2, 2.1, 2.0, 1.9, 1.8, 1.7, 1.6, 1.5, 1.4, 1.3, 1.2, 1.1, 1.0, 0.9, 0.8, 0.7, 0.6, 0.5]\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Plot the bar chart\nax.bar(brands, daac_values, color='blue')\n\n# Set the title of the plot\nax.set_title('Model = Vicuna')\n\n# Set the x-axis label\nax.set_xlabel('Brands')\n\n# Set the y-axis label\nax.set_ylabel('\u0394Acc (with Styles) - \u0394Acc')\n\n# Set the y-axis limits\nax.set_ylim(-8, 6)\n\n# Add a legend\nax.legend(['\u0394Acc < -1', '-1 <= \u0394Acc <= 1', '\u0394Acc > 1'], loc='upper right')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_43.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\ndata = {\n    'MedMCQA': [48.1, 57.2, 75.2, 64.9, 72.3, 54.3],\n    'MedQA (USMLE)': [56.0, 62.2, 79.2, 64.4, 66.4, 58.0],\n    'PubMed QA': [74.4, 75.8, 79.0, 76.8, 79.0, 78.0],\n    'GEMM Pro': [70.7, 74.4, 79.2, 76.8, 79.0, 78.0]\n}\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Plot the data\nax.plot(data['MedMCQA'], label='MedMCQA')\nax.plot(data['MedQA (USMLE)'], label='MedQA (USMLE)')\nax.plot(data['PubMed QA'], label='PubMed QA')\nax.plot(data['GEMM Pro'], label='GEMM Pro')\n\n# Set the title and labels\nax.set_title('Performance Score (%)')\nax.set_xlabel('Question Number')\nax.set_ylabel('Score (%)')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_44.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the bar chart\ncategories = ['AFAN', 'AFBE', 'AFCE', 'AFAO', 'AFEX', 'AFEP', 'AFPK', 'AFPO', 'AFPP', 'AFPR', 'AFSL', 'AFSC', 'AFSF', 'AFTH', 'AFVT', 'AFWS', 'AFWT', 'DAH', 'IC', 'SS']\nnla_values = [25, 30, 40, 15, 25, 35, 45, 20, 30, 40, 25, 35, 45, 20, 30, 40, 25, 35, 45]\ngpt_values = [45, 40, 50, 35, 45, 50, 40, 35, 45, 50, 40, 50, 40, 35, 45, 50, 40, 50, 40]\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the bar chart\nax.bar(categories, nla_values, color='blue')\nax.bar(categories, gpt_values, bottom=nla_values, color='orange')\n\n# Set the title and labels\nax.set_title('NLA vs GPT Values')\nax.set_xlabel('Categories')\nax.set_ylabel('Values')\n\n# Rotate the x-axis labels for better visibility\nplt.xticks(rotation=90)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_45.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(10.0, 7.0))\n\n# Set the x-axis values\nx = [3, 5, 7, 9, 11]\n\n# Set the y-axis values\ny = [2.5, 4.5, 6.5, 8.5, 10.5]\n\n# Plot the data\nax.plot(x, y)\n\n# Set the title of the plot\nax.set_title('Taboo')\n\n# Set the labels for the x and y axes\nax.set_xlabel('Num of Constraint Words')\nax.set_ylabel('Score')\n\n# Set the color of the bars\nbar_colors = ['pink', 'coral', 'skyblue', 'lightblue', 'lavender']\n\n# Set the width of the bars\nbar_width = 0.5\n\n# Create a bar chart\nfor i in range(len(x)):\n    ax.bar(x[i], y[i], width=bar_width, color=bar_colors[i])\n\n# Set the legend\nlegend_labels = ['LLAMA-Default', 'LLAMA-HAG', 'Vicuna-Default', 'Vicuna-HAG']\nax.legend(legend_labels, loc='upper right')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_46.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nbrands = ['Lavila', 'Video-LLaMA', 'BLIP1', 'BLIP2 Model', 'LLaVA', 'OSCaR', 'GPT4V']\nsales = [82.5, 73.93, 70.5, 65.4, 60.3, 55.2, 50.1]\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(10, 6))\nax.bar(brands, sales, color='skyblue')\n\n# Set the title and labels\nax.set_title('Human Study')\nax.set_xlabel('Brands')\nax.set_ylabel('Sales (%)')\n\n# Rotate the x-axis labels for better visibility\nplt.xticks(rotation=45)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_47.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\ndata = {\n    'HH': [22, 50, 28],\n    'Reddit': [25, 40, 30],\n    'IMDB': [30, 60, 10],\n    'AVG': [26, 50, 24]\n}\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(13, 6))\n\n# Plot the data\nfor key, value in data.items():\n    ax.bar(key, value[0], color='red')\n    ax.bar(key, value[1], bottom=value[0], color='orange')\n    ax.bar(key, value[2], bottom=[value[0] + value[1]] * len(value), color='pink')\n\n# Set the x-axis limits\nax.set_xlim(0, 100)\n\n# Set the y-axis limits\nax.set_ylim(0, 100)\n\n# Set the title of the plot\nax.set_title('COPR v.s. Golden (Human Eval)')\n\n# Set the labels of the x-axis\nax.set_xlabel('COPR vs. Golden (GPT-4 Eval)')\n\n# Set the labels of the y-axis\nax.set_ylabel('COPR vs. Golden (Human Eval)')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_48.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(5.0, 6.0))\n\n# Set the title of the plot\nax.set_title('a')\n\n# Create a bar chart with the data\nax.bar(['Accuracy', 'Unfairness'], [0.35, 0.10], color='blue')\nax.bar(['Accuracy', 'Unfairness'], [0.25, 0.05], color='yellow')\n\n# Set the y-axis limits\nax.set_ylim(0, 0.4)\n\n# Create a second subplot\nax2 = fig.add_subplot(212)\nax2.set_title('b')\n\n# Create a bar chart with the data\nax2.bar(['Accuracy', 'Unfairness'], [0.38, 0.12], color='purple')\nax2.bar(['Accuracy', 'Unfairness'], [0.16, 0.08], color='orange')\n\n# Set the y-axis limits\nax2.set_ylim(0, 0.2)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_49.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nresolutions = [224, 128, 64, 32]\naccuracies = [75, 60, 50, 40]\ncolors = ['blue', 'orange', 'pink', 'cyan']\nlabels = ['ImageNet-1k', 'ImageNet (F)', 'PAC-FNO', 'PAC-FNO']\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the bar chart\nax.bar(resolutions, accuracies, color=colors)\n\n# Add labels and title\nax.set_xlabel('Resolutions')\nax.set_ylabel('Top-1 Acc (%)')\nax.set_title('Top-1 Accuracy by Resolution and Method')\n\n# Add a horizontal line at the top of the chart\nax.axhline(y=80, color='b', linestyle='-')\n\n# Add a vertical line at the bottom of the chart\nax.axvline(x=224, color='r', linestyle='-')\n\n# Add a rectangle for the legend\nfor i, label in enumerate(labels):\n    ax.text(224, 80 - i*10, label, color=colors[i], fontsize=12)\n\n# Add a red arrow pointing down\nax.annotate('', xy=(224, 80), xytext=(224, 70),\n            arrowprops=dict(facecolor='red', shrink=0.05))\n\n# Add a blue rectangle for the accuracy\nax.add_patch(plt.Rectangle((224, 70), 10, 10, color='blue'))\n\n# Add a pink rectangle for the resolution\nax.add_patch(plt.Rectangle((224, 60), 10, 10, color='pink'))\n\n# Add a cyan rectangle for the method\nax.add_patch(plt.Rectangle((224, 50), 10, 10, color='cyan'))\n\n# Add a red rectangle for the accuracy\nax.add_patch(plt.Rectangle((224, 40), 10, 10, color='red'))\n\n# Add a pink rectangle for the resolution\nax.add_patch(plt.Rectangle((224, 30), 10, 10, color='pink'))\n\n# Add a cyan rectangle for the method\nax.add_patch(plt.Rectangle((224, 20), 10, 10, color='cyan'))\n\n# Add a red rectangle for the accuracy\nax.add_patch(plt.Rectangle((224, 10), 10, 10, color='red'))\n\n# Add a pink rectangle for the resolution\nax.add_patch(plt.Rectangle((224, 0), 10, 10, color='pink'))\n\n# Add a cyan rectangle for the method\nax.add_patch(plt.Rectangle((224, -10), 10, 10, color='cyan'))\n\n# Add a red rectangle for the accuracy\nax.add_patch(plt.Rectangle((224, -20), 10, 10, color='red'))\n\n# Add a pink rectangle for the resolution\nax.add_patch(plt.Rectangle((224, -30), 10, 10, color='pink'))\n\n# Add a cyan rectangle for the method\nax.add_patch(plt.Rectangle((224, -40), 10, 10, color='cyan'))\n\n# Add a red rectangle for the accuracy\nax.add_patch(plt.Rectangle((224, -50), 10, 10, color='red'))\n\n# Add a pink rectangle for the resolution\nax.add_patch(plt.Rectangle((224, -60), 10, 10, color='pink'))\n\n# Add a cyan rectangle for the method\nax.add_patch(plt.Rectangle((224, -70), 10, 10, color='cyan'))\n\n# Add a red rectangle for the accuracy\nax.add_patch(plt.Rectangle((224, -80), 10, 10, color='red'))\n\n# Add a pink rectangle for the resolution\nax.add_patch(plt.Rectangle((224, -90), 10, 10, color='pink'))\n\n# Add a cyan rectangle for the method\nax.add_patch(plt.Rectangle((224, -100), 10, 10, color='cyan'))\n\n# Add a red rectangle for the accuracy\nax.add_patch(plt.Rectangle((224, -110), 10, 10, color='red'))\n\n# Add a pink rectangle for the resolution\nax.add_patch(plt.Rectangle((224, -120), 10, 10, color='pink'))\n\n# Add a cyan rectangle for the method\nax.add_patch(plt.Rectangle((224, -130), 10, 10, color='cyan'))\n\n# Add a red rectangle for the accuracy\nax.add_patch(plt.Rectangle((224, -140), 10, 10, color='red'))\n\n# Add a pink rectangle for the resolution\nax.add_patch(plt.Rectangle((224, -150), 10, 10, color='pink'))\n\n# Add a cyan rectangle for the method\nax.add_patch(plt.Rectangle((224, -160), 10, 10, color='cyan'))\n\n# Add a red rectangle for the accuracy\nax.add_patch(plt.Rectangle((224, -170), 10, 10, color='red'))\n\n# Add a pink rectangle for the resolution\nax.add_patch(plt.Rectangle((224, -180), 10, 10, color='pink'))\n\n# Add a cyan rectangle for the method\nax.add_patch(plt.Rectangle((224, -190), 10, 10, color='cyan'))\n\n# Add a red rectangle for the accuracy\nax.add_patch(plt.Rectangle((224, -200), 10, 10, color='red'))\n\n# Add a pink rectangle for the resolution\nax.add_patch(plt.Rectangle((224, -210), 10, 10, color='pink'))\n\n# Add a cyan rectangle for the method\nax.add_patch(plt.Rectangle((224, -220), 10, 10, color='cyan'))\n\n# Add a red rectangle for the accuracy\nax.add_patch(plt.Rectangle((224, -230), 10, 10, color='red'))\n\n# Add a pink rectangle for the resolution\nax.add_patch(plt.Rectangle((224, -240), 10, 10, color='pink'))\n\n# Add a cyan rectangle for the method\nax.add_patch(plt.Rectangle((224, -250), 10, 10, color='cyan'))\n\n# Add a red rectangle for the accuracy\nax.add_patch(plt.Rectangle((224, -260), 10, 10, color='red'))\n\n# Add a pink rectangle for the resolution\nax.add_patch(plt.Rectangle((224, -270), 10, 10, color='pink'))\n\n# Add a cyan rectangle for the method\nax.add_patch(plt.Rectangle((224, -280), 10, 10, color='cyan'))\n\n# Add a red rectangle for the accuracy\nax.add_patch(plt.Rectangle((224, -290), 10, 10, color='red'))\n\n# Add a pink rectangle for the resolution\nax.add_patch(plt.Rectangle((224, -300), 10, 10, color='pink'))\n\n# Add a cyan rectangle for the method\nax.add_patch(plt.Rectangle((224, -310), 10, 10, color='cyan'))\n\n# Add a red rectangle for the accuracy\nax.add_patch(plt.Rectangle((224, -320), 10, 10, color='red'))\n\n# Add a pink rectangle for the resolution\nax.add_patch(plt.Rectangle((224, -330), 10, 10, color='pink'))\n\n# Add a cyan rectangle for the method\nax.add_patch(plt.Rectangle((224, -340), 10, 10, color='cyan'))\n\n# Add a red rectangle for the accuracy\nax.add_patch(plt.Rectangle((224, -350), 10, 10, color='red'))\n\n# Add a pink rectangle for the resolution\nax.add_patch(plt.Rectangle((224, -360), 10, 10, color='pink'))\n\n# Add a cyan rectangle for the method\nax.add_patch(plt.Rectangle((224, -370), 10, 10, color='cyan'))\n\n# Add a red rectangle for the accuracy\nax.add_patch(plt.Rectangle((224, -380), 10, 10, color='red'))\n\n# Add a pink rectangle for the resolution\nax.add_patch(plt.Rectangle((224, -390), 10, 10, color='pink'))\n\n# Add a cyan rectangle for the method\nax.add_patch(plt.Rectangle((224, -400), 10, 10, color='cyan'))\n\n# Add a red rectangle for the accuracy\nax.add_patch(plt.Rectangle((224, -410), 10, 10, color='red'))\n\n# Add a pink rectangle for the resolution\nax.add_patch(plt.Rectangle((224, -420), 10, 10, color='pink'))\n\n# Add a cyan rectangle for the method\nax.add_patch(plt.Rectangle((224, -430), 10, 10, color='cyan'))\n\n# Add a red rectangle for the accuracy\nax.add_patch(plt.Rectangle((224, -440), 10, 10, color='red'))\n\n# Add a pink rectangle for the resolution\nax.add_patch(plt.Rectangle((224, -450), 10, 10, color='pink'))\n\n# Add a cyan rectangle for the method\nax.add_patch(plt.Rectangle((224, -460), 10, 10, color='cyan'))\n\n# Add a red rectangle for the accuracy\nax.add_patch(plt.Rectangle((224, -470), 10, 10, color='red'))\n\n# Add a pink rectangle for the resolution\nax.add_patch(plt.Rectangle((224, -480), 10, 10, color='pink'))\n\n# Add a cyan rectangle for the method\nax.add_patch(plt.Rectangle((224, -490), 10, 10, color='cyan'))\n\n# Add a red rectangle for the accuracy\nax.add_patch(plt.Rectangle((224, -500), 10, 10, color='red'))\n\n# Add a pink rectangle for the resolution\nax.add_patch(plt.Rectangle((224, -510), 10, 10, color='pink'))\n\n# Add a cyan rectangle for the method\nax.add_patch(plt.Rectangle((224, -520), 10, 10, color='cyan'))\n\n# Add a red rectangle for the accuracy\nax.add_patch(plt.Rectangle((224, -530), 10, 10, color='red'))\n\n# Add a pink rectangle for the resolution\nax.add_patch(plt.Rectangle((224, -540), 10, 10, color='pink'))\n\n# Add a cyan rectangle for the method\nax.add_patch(plt.Rectangle((224, -550), 10, 10, color='cyan'))\n\n# Add a red rectangle for the accuracy\nax.add_patch(plt.Rectangle((224, -560), 10, 10, color='red'))\n\n# Add a pink rectangle for the resolution\nax.add_patch(plt.Rectangle((224, -570), 10, 10, color='pink'))\n\n# Add a cyan rectangle for the method\nax.add_patch(plt.Rectangle((224, -580), 10, 10, color='cyan'))\n\n# Add a red rectangle for the accuracy\nax.add_patch(plt.Rectangle((224, -590), 10, 10, color='red'))\n\n# Add a pink rectangle for the resolution\nax.add_patch(plt.Rectangle((224, -600), 10, 10, color='pink'))\n\n# Add a cyan rectangle for the method\nax.add_patch(plt.Rectangle((224, -610), 10, 10, color='cyan'))\n\n# Add a red rectangle for the accuracy\nax.add_patch(plt.Rectangle((224, -620), 10, 10, color='red'))\n\n# Add a pink rectangle for the resolution\nax.add_patch(plt.Rectangle((224, -630), 10, 10, color='pink'))\n\n# Add a cyan rectangle for the method\nax.add_patch(plt.Rectangle((224, -640), 10, 10, color='cyan'))\n\n# Add a red rectangle for the accuracy\nax.add_patch(plt.Rectangle((224, -650), 10, 10, color='red'))\n\n# Add a pink rectangle for the resolution\nax.add_patch(plt.Rectangle((224, -660), 10, 10, color='pink'))\n\n# Add a cyan rectangle for the method\nax.add_patch(plt.Rectangle((224, -670), 10, 10, color='cyan'))\n\n# Add a red rectangle for the accuracy\nax.add_patch(plt.Rectangle((224, -680), 10, 10, color='red'))\n\n# Add a pink rectangle for the resolution\nax.add_patch(plt.Rectangle((224, -690), 10, 10, color='pink'))\n\n# Add a cyan rectangle for the method\nax.add_patch(plt.Rectangle((224, -700), 10, 10, color='cyan'))\n\n# Add a red rectangle for the accuracy\nax.add_patch(plt.Rectangle((224, -710), 10, 10, color='red'))\n\n# Add a pink rectangle for the resolution\nax.add_patch(plt.Rectangle((224, -720), 10, 10, color='pink'))\n\n# Add a cyan rectangle for the method\nax.add_patch(plt.Rectangle((224, -730), 10, 10, color='cyan'))\n\n# Add a red rectangle for the accuracy\nax.add_patch(plt.Rectangle((224, -740), 10, 10, color='red'))\n\n# Add a pink rectangle for the resolution\nax.add_patch(plt.Rectangle((224, -750), 10, 10, color='pink'))\n\n# Add a cyan rectangle for the method\nax.add_patch(plt.Rectangle((224, -760), 10, 10, color='cyan'))\n\n# Add a red rectangle for the accuracy\nax.add_patch(plt.Rectangle((224, -770), 10, 10, color='red'))\n\n# Add a pink rectangle for the resolution\nax.add_patch(plt.Rectangle((224, -780), 10, 10, color='pink'))\n\n# Add a cyan rectangle for the method\nax.add_patch(plt.Rectangle((224, -790), 10, 10, color='cyan'))\n\n# Add a red rectangle for the accuracy\nax.add_patch(plt.Rectangle((224, -800), 10, 10, color='red'))\n\n# Add a pink rectangle for the resolution\nax.add_patch(plt.Rectangle((224, -810), 10, 10, color='pink'))\n\n# Add a cyan rectangle for the method\nax.add_patch(plt.Rectangle((224, -820), 10, 10, color='cyan'))\n\n# Add a red rectangle for the accuracy\nax.add_patch(plt.Rectangle((224, -830), 10, 10, color='red'))\n\n# Add a pink rectangle for the resolution\nax.add_patch(plt.Rectangle((224, -840), 10, 10, color='pink'))\n\n# Add a cyan rectangle for the method\nax.add_patch(plt.Rectangle((224, -850), 10, 10, color='cyan'))\n\n# Add a red rectangle for the accuracy\nax.add_patch(plt.Rectangle((224, -860), 10, 10, color='red'))\n\n# Add a pink rectangle for the resolution\nax.add_patch(plt.Rectangle((224, -870), 10, 10, color='pink'))\n\n# Add a cyan rectangle for the method\nax.add_patch(plt.Rectangle((224, -880), 10, 10, color='cyan'))\n\n# Add a red rectangle for the accuracy\nax.add_patch(plt.Rectangle((224, -890), 10, 10, color='red'))\n\n# Add a pink rectangle for the resolution\nax.add_patch(plt.Rectangle((224, -900), 10, 10, color='pink'))\n\n# Add a cyan rectangle for the method\nax.add_patch(plt.Rectangle((224, -910), 10, 10, color='cyan'))\n\n# Add a red rectangle for the accuracy\nax.add_patch(plt.Rectangle((224, -920), 10, 10, color='red'))\n\n# Add a pink rectangle for the resolution\nax.add_patch(plt.Rectangle((224, -930), 10, 10, color='pink'))\n\n# Add a cyan rectangle for the method\nax.add_patch(plt.Rectangle((224, -940), 10, 10, color='cyan'))\n\n# Add a red rectangle for the accuracy\nax.add_patch(plt.Rectangle((2"}
{"file": "dataset/ori_500/bar_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nx = ['Level 1', 'Level 2', 'Level 3', 'Level 4']\ny = [50, 50, 50, 50]\ncolors = ['yellow', 'blue', 'red', 'pink']\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(8.0, 3.0))\nax.bar(x, y, color=colors)\n\n# Set the title and labels\nax.set_title('Average Uploads per Level')\nax.set_xlabel('Levels')\nax.set_ylabel('Uploads')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_50.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\nx = [17, 9, 20, 0, 19, 11, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40]\ny = [39.4, 32.84, 19.66, 0, 35.18, 26.82, 22.66, 0, 28.0, 20.84, 22, 24.27, 34.06, 30.84, 22, 14, 16, 18, 20, 22, 35]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 5.0))\n\n# Plot the data\nax.plot(x, y)\n\n# Set the title and labels\nax.set_title('Rewards by Category')\nax.set_xlabel('Categories')\nax.set_ylabel('Rewards')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_51.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\ncategories = ['Cleaning / laundry', 'Crafting/knitting', 'Baking', 'Carpenter', 'Making Bricks', 'Gardening', 'Construction/renovation', 'Home management', 'Scooter mechanic', 'Farmer']\nviews = [5375, 4190, 3543, 3216, 2915, 2548, 2343, 2158, 2060, 2008]\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(12.0, 8.0))\nax.bar(categories, views, color='blue')\n\n# Set the title and labels\nax.set_title('Number of Videos by Profession')\nax.set_xlabel('Profession')\nax.set_ylabel('Number of Videos')\n\n# Rotate the x-axis labels for better visibility\nplt.xticks(rotation=45)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_52.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for each category\ncategories = ['greeting', 'request', 'criticism', 'apology', 'persuasion', 'thanking', 'leave-taking']\nsentiments = ['synthetic data', 'human-authored data']\ngreeting_sentiment = [8, 16]\nrequest_sentiment = [31, 28]\ncriticism_sentiment = [24, 11]\napology_sentiment = [7, 5]\npersuasion_sentiment = [10, 15]\nthanking_sentiment = [10, 16]\nleave_taking_sentiment = [10, 9]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Plot the data\nax.bar(categories, greeting_sentiment, color='purple')\nax.bar(categories, request_sentiment, bottom=greeting_sentiment, color='blue')\nax.bar(categories, criticism_sentiment, bottom=[i+j for i,j in zip(greeting_sentiment, request_sentiment)], color='teal')\nax.bar(categories, apology_sentiment, bottom=[i+j+k for i,j,k in zip(greeting_sentiment, request_sentiment, criticism_sentiment)], color='green')\nax.bar(categories, persuasion_sentiment, bottom=[i+j+k+l for i,j,k,l in zip(greeting_sentiment, request_sentiment, criticism_sentiment, apology_sentiment)], color='brown')\nax.bar(categories, thanking_sentiment, bottom=[i+j+k+l+m for i,j,k,l,m in zip(greeting_sentiment, request_sentiment, criticism_sentiment, apology_sentiment, persuasion_sentiment)], color='orange')\nax.bar(categories, leave_taking_sentiment, bottom=[i+j+k+l+m+n for i,j,k,l,m,n in zip(greeting_sentiment, request_sentiment, criticism_sentiment, apology_sentiment, persuasion_sentiment, thanking_sentiment)], color='red')\n\n# Set the labels and title\nax.set_xlabel('Sentiment')\nax.set_ylabel('Percentage')\nax.set_title('Sentiment Analysis of Social Media Posts')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_53.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Set the title of the plot\nax.set_title('Context: The human body can tolerate only a')\n\n# Set the x-axis label\nax.set_xlabel('Word')\n\n# Set the y-axis label\nax.set_ylabel('Probability')\n\n# Set the x-ticks\nax.set_xticks(range(len(words)))\nax.set_xticklabels(words)\n\n# Set the y-limits\nax.set_ylim([0, 0.3])\n\n# Set the y-ticks\nax.set_yticks([0, 0.1, 0.2, 0.3])\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the text\nax.set_color_cycle(['red', 'blue'])\n\n# Set the color of the lines\nax.plot(probabilities, color='red')\n\n# Set the color of the markers\nax.plot(probabilities, 'o', color='blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the text\nax.set_color_cycle(['red', 'blue'])\n\n# Set the color of the lines\nax.plot(probabilities, color='red')\n\n# Set the color of the markers\nax.plot(probabilities, 'o', color='blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the text\nax.set_color_cycle(['red', 'blue'])\n\n# Set the color of the lines\nax.plot(probabilities, color='red')\n\n# Set the color of the markers\nax.plot(probabilities, 'o', color='blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the text\nax.set_color_cycle(['red', 'blue'])\n\n# Set the color of the lines\nax.plot(probabilities, color='red')\n\n# Set the color of the markers\nax.plot(probabilities, 'o', color='blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the text\nax.set_color_cycle(['red', 'blue'])\n\n# Set the color of the lines\nax.plot(probabilities, color='red')\n\n# Set the color of the markers\nax.plot(probabilities, 'o', color='blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the text\nax.set_color_cycle(['red', 'blue'])\n\n# Set the color of the lines\nax.plot(probabilities, color='red')\n\n# Set the color of the markers\nax.plot(probabilities, 'o', color='blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the text\nax.set_color_cycle(['red', 'blue'])\n\n# Set the color of the lines\nax.plot(probabilities, color='red')\n\n# Set the color of the markers\nax.plot(probabilities, 'o', color='blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the text\nax.set_color_cycle(['red', 'blue'])\n\n# Set the color of the lines\nax.plot(probabilities, color='red')\n\n# Set the color of the markers\nax.plot(probabilities, 'o', color='blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the text\nax.set_color_cycle(['red', 'blue'])\n\n# Set the color of the lines\nax.plot(probabilities, color='red')\n\n# Set the color of the markers\nax.plot(probabilities, 'o', color='blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the text\nax.set_color_cycle(['red', 'blue'])\n\n# Set the color of the lines\nax.plot(probabilities, color='red')\n\n# Set the color of the markers\nax.plot(probabilities, 'o', color='blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the text\nax.set_color_cycle(['red', 'blue'])\n\n# Set the color of the lines\nax.plot(probabilities, color='red')\n\n# Set the color of the markers\nax.plot(probabilities, 'o', color='blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the text\nax.set_color_cycle(['red', 'blue'])\n\n# Set the color of the lines\nax.plot(probabilities, color='red')\n\n# Set the color of the markers\nax.plot(probabilities, 'o', color='blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the text\nax.set_color_cycle(['red', 'blue'])\n\n# Set the color of the lines\nax.plot(probabilities, color='red')\n\n# Set the color of the markers\nax.plot(probabilities, 'o', color='blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the text\nax.set_color_cycle(['red', 'blue'])\n\n# Set the color of the lines\nax.plot(probabilities, color='red')\n\n# Set the color of the markers\nax.plot(probabilities, 'o', color='blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the text\nax.set_color_cycle(['red', 'blue'])\n\n# Set the color of the lines\nax.plot(probabilities, color='red')\n\n# Set the color of the markers\nax.plot(probabilities, 'o', color='blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the text\nax.set_color_cycle(['red', 'blue'])\n\n# Set the color of the lines\nax.plot(probabilities, color='red')\n\n# Set the color of the markers\nax.plot(probabilities, 'o', color='blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the text\nax.set_color_cycle(['red', 'blue'])\n\n# Set the color of the lines\nax.plot(probabilities, color='red')\n\n# Set the color of the markers\nax.plot(probabilities, 'o', color='blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the text\nax.set_color_cycle(['red', 'blue'])\n\n# Set the color of the lines\nax.plot(probabilities, color='red')\n\n# Set the color of the markers\nax.plot(probabilities, 'o', color='blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the text\nax.set_color_cycle(['red', 'blue'])\n\n# Set the color of the lines\nax.plot(probabilities, color='red')\n\n# Set the color of the markers\nax.plot(probabilities, 'o', color='blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the text\nax.set_color_cycle(['red', 'blue'])\n\n# Set the color of the lines\nax.plot(probabilities, color='red')\n\n# Set the color of the markers\nax.plot(probabilities, 'o', color='blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the text\nax.set_color_cycle(['red', 'blue'])\n\n# Set the color of the lines\nax.plot(probabilities, color='red')\n\n# Set the color of the markers\nax.plot(probabilities, 'o', color='blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the text\nax.set_color_cycle(['red', 'blue'])\n\n# Set the color of the lines\nax.plot(probabilities, color='red')\n\n# Set the color of the markers\nax.plot(probabilities, 'o', color='blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the text\nax.set_color_cycle(['red', 'blue'])\n\n# Set the color of the lines\nax.plot(probabilities, color='red')\n\n# Set the color of the markers\nax.plot(probabilities, 'o', color='blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the text\nax.set_color_cycle(['red', 'blue'])\n\n# Set the color of the lines\nax.plot(probabilities, color='red')\n\n# Set the color of the markers\nax.plot(probabilities, 'o', color='blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the text\nax.set_color_cycle(['red', 'blue'])\n\n# Set the color of the lines\nax.plot(probabilities, color='red')\n\n# Set the color of the markers\nax.plot(probabilities, 'o', color='blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the text\nax.set_color_cycle(['red', 'blue'])\n\n# Set the color of the lines\nax.plot(probabilities, color='red')\n\n# Set the color of the markers\nax.plot(probabilities, 'o', color='blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the text\nax.set_color_cycle(['red', 'blue'])\n\n# Set the color of the lines\nax.plot(probabilities, color='red')\n\n# Set the color of the markers\nax.plot(probabilities, 'o', color='blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the text\nax.set_color_cycle(['red', 'blue'])\n\n# Set the color of the lines\nax.plot(probabilities, color='red')\n\n# Set the color of the markers\nax.plot(probabilities, 'o', color='blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the text\nax.set_color_cycle(['red', 'blue'])\n\n# Set the color of the lines\nax.plot(probabilities, color='red')\n\n# Set the color of the markers\nax.plot(probabilities, 'o', color='blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the text\nax.set_color_cycle(['red', 'blue'])\n\n# Set the color of the lines\nax.plot(probabilities, color='red')\n\n# Set the color of the markers\nax.plot(probabilities, 'o', color='blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the text\nax.set_color_cycle(['red', 'blue'])\n\n# Set the color of the lines\nax.plot(probabilities, color='red')\n\n# Set the color of the markers\nax.plot(probabilities, 'o', color='blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the text\nax.set_color_cycle(['red', 'blue'])\n\n# Set the color of the lines\nax.plot(probabilities, color='red')\n\n# Set the color of the markers\nax.plot(probabilities, 'o', color='blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the text\nax.set_color_cycle(['red', 'blue'])\n\n# Set the color of the lines\nax.plot(probabilities, color='red')\n\n# Set the color of the markers\nax.plot(probabilities, 'o', color='blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the text\nax.set_color_cycle(['red', 'blue'])\n\n# Set the color of the lines\nax.plot(probabilities, color='red')\n\n# Set the color of the markers\nax.plot(probabilities, 'o', color='blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the text\nax.set_color_cycle(['red', 'blue'])\n\n# Set the color of the lines\nax.plot(probabilities, color='red')\n\n# Set the color of the markers\nax.plot(probabilities, 'o', color='blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the text\nax.set_color_cycle(['red', 'blue'])\n\n# Set the color of the lines\nax.plot(probabilities, color='red')\n\n# Set the color of the markers\nax.plot(probabilities, 'o', color='blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the text\nax.set_color_cycle(['red', 'blue'])\n\n# Set the color of the lines\nax.plot(probabilities, color='red')\n\n# Set the color of the markers\nax.plot(probabilities, 'o', color='blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the text\nax.set_color_cycle(['red', 'blue'])\n\n# Set the color of the lines\nax.plot(probabilities, color='red')\n\n# Set the color of the markers\nax.plot(probabilities, 'o', color='blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the text\nax.set_color_cycle(['red', 'blue'])\n\n# Set the color of the lines\nax.plot(probabilities, color='red')\n\n# Set the color of the markers\nax.plot(probabilities, 'o', color='blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('#f0f0f0"}
{"file": "dataset/ori_500/bar_54.pdf", "response": "import matplotlib.pyplot as plt\n\n# Data\nmodels = ['Convertible', 'Coupe', 'Truck', 'SUV', 'Sedan']\nprobabilities = [0.75, 0.85, 0.90, 0.95, 0.80]\n\n# Create bar chart\nfig, ax = plt.subplots(figsize=(6.0, 2.0))\nax.bar(models, probabilities, color='blue')\n\n# Add title and labels\nax.set_title('Probability of Improvement over VLM Image Encoder Baseline Returns')\nax.set_xlabel('Car Models')\nax.set_ylabel('Probability of Improvement')\n\n# Show plot\nplt.show()"}
{"file": "dataset/ori_500/bar_55.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nemotions = ['Disapproval', 'Joy', 'Relief', 'Gratitude', 'Annoyance', 'Nervousness', 'Pride', 'Sadness', 'Unboredom', 'Amusement']\nfrequencies = [2.1, 3.0, 3.5, 3.5, 6.0, 6.0, 6.6, 6.7, 7.0, 7.6]\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\nax.bar(emotions, frequencies, color='coral')\n\n# Set the title and labels\nax.set_title('Emotion Frequency')\nax.set_xlabel('Emotion')\nax.set_ylabel('Frequency (%)')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_56.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\nfig, ax = plt.subplots(figsize=(12.0, 8.0))\nax.set_title('Number of Videos by Profession')\nax.set_xlabel('Profession')\nax.set_ylabel('Number of Videos')\n\n# Define the data\nprofessions = ['Making Bricks', 'Carpenter', 'Baker', 'Crafting/Knitting', 'Cleaning/Laundry', 'Gardening']\nvideos = [450, 600, 500, 700, 800, 900]\n\n# Create a bar chart\nax.bar(professions, videos, color='blue')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_57.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Set the title of the graph\nax.set_title('Global Economy')\n\n# Set the x-axis label\nax.set_xlabel('Time')\n\n# Set the y-axis label\nax.set_ylabel('Value')\n\n# Set the x-axis ticks\nax.set_xticks([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49])\n\n# Set the y-axis ticks\nax.set_yticks([0, 10, 20, 30, 40, 50])\n\n# Set the x-axis tick labels\nax.set_xticklabels(['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec', 'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec', 'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec', 'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun'])\n\n# Set the y-axis tick labels\nax.set_yticklabels(['0', '10', '20', '30', '40', '50'])\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params"}
{"file": "dataset/ori_500/bar_58.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Set the title of the graph\nax.set_title('Real Estate Prices by Location')\n\n# Set the x-axis label\nax.set_xlabel('Location')\n\n# Set the y-axis label\nax.set_ylabel('Price')\n\n# Define the locations\nlocations = ['New York', 'Los Angeles', 'Chicago', 'Houston', 'Phoenix', 'Philadelphia']\n\n# Define the prices\nprices = [50, 45, 35, 40, 55, 60]\n\n# Define the colors\ncolors = ['red', 'pink', 'orange', 'yellow', 'lightblue', 'darkblue']\n\n# Plot the data\nax.bar(locations, prices, color=colors)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_59.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the bar chart\ncategories = ['External Class', 'Argument', 'Loop', 'Conditional Statement', 'Variable Declaration', 'Method Declaration', 'Parameter']\ndifferences = [80, 70, 60, 50, 40, 30, 20]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Create a bar chart\nax.bar(categories, differences, color='blue')\n\n# Set the title of the chart\nax.set_title('Relative Difference in Machine vs. Human Focus on Semantic Categories')\n\n# Set the x-axis label\nax.set_xlabel('Semantic Category')\n\n# Set the y-axis label\nax.set_ylabel('Difference (%)')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\nemotions = ['Disappointment', 'Embarrassment', 'Oblivious', 'Delight', 'Excitement', 'Disapproval', 'Joy', 'Relief', 'Gratitude', 'Annoyance', 'Nervousness', 'Pride', 'Sadness', 'Unboredom', 'Amusement']\nvalues = [7, 6, 5, 4, 3, 2, 1, 0.5, 0.3, 0.2, 0.1, 0.05, 0.03, 0.01]\n\nplt.figure(figsize=(8.0, 8.0))\nplt.barh(emotions, values, color='skyblue')\nplt.xlabel('Frequency (%)')\nplt.ylabel('Emotion')\nplt.title('Emotion Frequency Distribution')\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_60.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Set the title of the graph\nax.set_title('Yelp')\n\n# Set the x-axis label\nax.set_xlabel('Sentiment')\n\n# Set the y-axis label\nax.set_ylabel('Percentage')\n\n# Define the data for the bars\nbars = ['FMLP-Rec', 'BERT4Rec', 'SASRec', 'Case', 'GRU4Rec']\nsentiments = [-0.7, -8.5, -15.9, -10.2, -19.7]\npercentages = [4.8, 4.8, 4.8, 4.8, 4.8]\n\n# Create the bar chart\nax.bar(bars, percentages, color='red')\n\n# Add the sentiment values on top of each bar\nfor i, v in enumerate(sentiments):\n    ax.text(i, v + 0.5, str(v), ha='center', va='bottom')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_61.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Set the title of the graph\nax.set_title('Tech Company Performance')\n\n# Set the x-axis label\nax.set_xlabel('Year')\n\n# Set the y-axis label\nax.set_ylabel('Performance (%)')\n\n# Set the x-axis limits\nax.set_xlim(0, 3250)\n\n# Set the y-axis limits\nax.set_ylim(0, 100)\n\n# Set the x-axis ticks\nax.set_xticks(range(0, 3251, 500))\n\n# Set the y-axis ticks\nax.set_yticks(range(0, 101, 10))\n\n# Set the x-axis tick labels\nax.set_xticklabels(['2017', '2018', '2019', '2020', '2021', '2022', '2023'])\n\n# Set the y-axis tick labels\nax.set_yticklabels(['0%', '10%', '20%', '30%', '40%', '50%', '60%', '70%', '80%', '90%', '100%'])\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('red')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('green')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the title\nax.title.set_color('purple')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('orange')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('cyan')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['2017', '2018', '2019', '2020', '2021', '2022', '2023'], color='magenta')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0%', '10%', '20%', '30%', '40%', '50%', '60%', '70%', '80%', '90%', '100%'], color='yellow')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('red')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('green')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the title\nax.title.set_color('purple')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('orange')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('cyan')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['2017', '2018', '2019', '2020', '2021', '2022', '2023'], color='magenta')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0%', '10%', '20%', '30%', '40%', '50%', '60%', '70%', '80%', '90%', '100%'], color='yellow')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('red')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('green')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the title\nax.title.set_color('purple')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('orange')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('cyan')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['2017', '2018', '2019', '2020', '2021', '2022', '2023'], color='magenta')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0%', '10%', '20%', '30%', '40%', '50%', '60%', '70%', '80%', '90%', '100%'], color='yellow')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('red')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('green')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the title\nax.title.set_color('purple')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('orange')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('cyan')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['2017', '2018', '2019', '2020', '2021', '2022', '2023'], color='magenta')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0%', '10%', '20%', '30%', '40%', '50%', '60%', '70%', '80%', '90%', '100%'], color='yellow')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('red')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('green')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the title\nax.title.set_color('purple')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('orange')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('cyan')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['2017', '2018', '2019', '2020', '2021', '2022', '2023'], color='magenta')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0%', '10%', '20%', '30%', '40%', '50%', '60%', '70%', '80%', '90%', '100%'], color='yellow')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('red')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('green')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the title\nax.title.set_color('purple')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('orange')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('cyan')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['2017', '2018', '2019', '2020', '2021', '2022', '2023'], color='magenta')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0%', '10%', '20%', '30%', '40%', '50%', '60%', '70%', '80%', '90%', '100%'], color='yellow')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('red')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('green')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the title\nax.title.set_color('purple')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('orange')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('cyan')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['2017', '2018', '2019', '2020', '2021', '2022', '2023'], color='magenta')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0%', '10%', '20%', '30%', '40%', '50%', '60%', '70%', '80%', '90%', '100%'], color='yellow')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('red')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('green')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the title\nax.title.set_color('purple')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('orange')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('cyan')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['2017', '2018', '2019', '2020', '2021', '2022', '2023'], color='magenta')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0%', '10%', '20%', '30%', '40%', '50%', '60%', '70%', '80%', '90%', '100%'], color='yellow')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('red')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('green')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the title\nax.title.set_color('purple')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('orange')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('cyan')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['2017', '2018', '2019', '2020', '2021', '2022', '2023'], color='magenta')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0%', '10%', '20%', '30%', '40%', '50%', '60%', '70%', '80%', '90%', '100%'], color='yellow')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('red')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('green')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the title\nax.title.set_color('purple')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('orange')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('cyan')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['2017', '2018', '2019', '2020', '2021', '2022', '2023'], color='magenta')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0%', '10%', '20%', '30%', '40%', '50%', '60%', '70%', '80%', '90%', '100%'], color='yellow')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('red')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('green')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the title\nax.title.set_color('purple')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('orange')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('cyan')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['2017', '2018', '2019', '2020', '2021', '2022', '2023'], color='magenta')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0%', '10%', '20%', '30%', '40%', '50%', '60%', '70%', '80%', '90%', '100%'], color='yellow')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('red')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('green')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the title\nax.title.set_color('purple')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('orange')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('cyan')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['2017', '2018', '2019', '2020', '2021', '2022', '2023'], color='magenta')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0%', '10%', '20%', '30%', '40%', '50%', '60%', '70%', '80%', '90%', '100%'], color='yellow')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('red')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('green')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the title\nax.title.set_color('purple')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('orange')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('cyan')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['2017', '2018', '2019', '2020', '2021', '2022', '2023'], color='m"}
{"file": "dataset/ori_500/bar_62.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for each category\ncategories = ['greeting', 'request', 'criticism', 'apology', 'persuasion', 'thanking', 'leave-taking']\nsynthetic_data = [12, 35, 28, 15, 18, 14, 16]\nhuman_authored_data = [18, 32, 15, 8, 20, 22, 12]\n\n# Create a bar chart for synthetic data\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\nbars = ax.bar(categories, synthetic_data, color='blue')\n\n# Add labels and title\nax.set_xlabel('Category')\nax.set_ylabel('Percentage')\nax.set_title('Sentiment Analysis of Synthetic Data')\n\n# Display the plot\nplt.show()\n\n# Create a bar chart for human-authored data\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\nbars = ax.bar(categories, human_authored_data, color='orange')\n\n# Add labels and title\nax.set_xlabel('Category')\nax.set_ylabel('Percentage')\nax.set_title('Sentiment Analysis of Human-Authored Data')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_63.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Set the title of the plot\nax.set_title('Scores by Category Over Time')\n\n# Define the categories and their scores\ncategories = ['Time 0', 'Time 20', 'Time 40', 'Time 60']\nscores = [0.5, 0.7, 0.3, 0.9]\n\n# Create a bar chart with the scores\nax.bar(categories, scores, color='blue')\n\n# Set the x-axis label\nax.set_xlabel('Categories')\n\n# Set the y-axis label\nax.set_ylabel('Scores')\n\n# Set the x-axis tick labels\nax.set_xticks(categories)\n\n# Set the y-axis tick labels\nax.set_yticks([0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7])\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_64.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(10.0, 7.0))\n\n# Set the title of the plot\nax.set_title('Air Quality Metrics by Region')\n\n# Define the regions and their corresponding air quality metrics\nregions = ['East', 'West', 'North', 'South']\nmetrics = [54.46, 56.03, 65.49, 92.15]\n\n# Create a bar chart with the regions and their air quality metrics\nax.bar(regions, metrics, color='skyblue')\n\n# Set the x-axis label\nax.set_xlabel('Region')\n\n# Set the y-axis label\nax.set_ylabel('Air Quality Metrics (ppm)')\n\n# Set the x-axis tick labels\nax.set_xticks(range(len(regions)))\nax.set_xticklabels(regions)\n\n# Set the y-axis tick labels\nax.set_yticks(range(0, 101, 10))\nax.set_yticklabels([str(i) for i in range(0, 101, 10)])\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_65.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nbrands = ['LLAMA-Default', 'LLAMA-HAG', 'Vicuna-Default', 'Vicuna-HAG']\nscores = [-2.2, -2.3, -3.3, -3.2]\nconstraint_words = [3, 5, 7, 10]\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\nbars = ax.bar(brands, scores, color='blue')\n\n# Add constraint words as labels\nfor bar, constraint_word in zip(bars, constraint_words):\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + .2, constraint_word, ha='center', va='bottom')\n\n# Set the title and labels\nax.set_title('Scores by group and constraint word count')\nax.set_xlabel('Brands')\nax.set_ylabel('Score')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_66.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Negative GDP Growth Rates by Country and Year')\n\n# Set the x-axis label\nax.set_xlabel('GDP Growth Rate (%)')\n\n# Set the y-axis label\nax.set_ylabel('Country')\n\n# Set the x-axis limits\nax.set_xlim(-10, 0)\n\n# Set the y-axis limits\nax.set_ylim(0, 5)\n\n# Set the x-axis ticks\nax.set_xticks([-10, -8, -6, -4, -2, 0])\n\n# Set the y-axis ticks\nax.set_yticks([0, 1, 2, 3, 4, 5])\n\n# Set the y-axis tick labels\nax.set_yticklabels(['USA', 'China', 'Germany', 'Brazil'])\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Negative GDP Growth Rates by Country and Year', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=14, fontweight='bold', color='red')\n\n# Set the color of the text\nax.text(0.5, 0.45, 'This chart shows the negative GDP growth rates for different countries over the years.', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=12, color='blue')\n\n# Set the color of the text\nax.text(0.5, 0.4, 'The data is represented as colored rectangles.', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=12, color='green')\n\n# Set the color of the text\nax.text(0.5, 0.35, 'The x-axis represents the GDP growth rate in percentage.', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=12, color='purple')\n\n# Set the color of the text\nax.text(0.5, 0.3, 'The y-axis represents the country.', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=12, color='orange')\n\n# Set the color of the text\nax.text(0.5, 0.25, 'The rectangles represent the GDP growth rates.', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=12, color='pink')\n\n# Set the color of the text\nax.text(0.5, 0.2, 'The color of the rectangle represents the year.', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=12, color='brown')\n\n# Set the color of the text\nax.text(0.5, 0.15, 'The width of the rectangle represents the GDP growth rate.', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=12, color='cyan')\n\n# Set the color of the text\nax.text(0.5, 0.1, 'The height of the rectangle represents the country.', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=12, color='magenta')\n\n# Set the color of the text\nax.text(0.5, 0.05, 'The color of the rectangle represents the year.', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=12, color='yellow')\n\n# Set the color of the text\nax.text(0.5, 0.0, 'The width of the rectangle represents the GDP growth rate.', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=12, color='black')\n\n# Set the color of the text\nax.text(0.5, -0.05, 'The height of the rectangle represents the country.', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=12, color='white')\n\n# Set the color of the text\nax.text(0.5, -0.1, 'The color of the rectangle represents the year.', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=12, color='grey')\n\n# Set the color of the text\nax.text(0.5, -0.15, 'The width of the rectangle represents the GDP growth rate.', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=12, color='silver')\n\n# Set the color of the text\nax.text(0.5, -0.2, 'The height of the rectangle represents the country.', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=12, color='gold')\n\n# Set the color of the text\nax.text(0.5, -0.25, 'The color of the rectangle represents the year.', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=12, color='brown')\n\n# Set the color of the text\nax.text(0.5, -0.3, 'The width of the rectangle represents the GDP growth rate.', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=12, color='cyan')\n\n# Set the color of the text\nax.text(0.5, -0.35, 'The height of the rectangle represents the country.', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=12, color='magenta')\n\n# Set the color of the text\nax.text(0.5, -0.4, 'The color of the rectangle represents the year.', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=12, color='yellow')\n\n# Set the color of the text\nax.text(0.5, -0.45, 'The width of the rectangle represents the GDP growth rate.', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=12, color='black')\n\n# Set the color of the text\nax.text(0.5, -0.5, 'The height of the rectangle represents the country.', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=12, color='white')\n\n# Set the color of the text\nax.text(0.5, -0.55, 'The color of the rectangle represents the year.', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=12, color='grey')\n\n# Set the color of the text\nax.text(0.5, -0.6, 'The width of the rectangle represents the GDP growth rate.', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=12, color='silver')\n\n# Set the color of the text\nax.text(0.5, -0.65, 'The height of the rectangle represents the country.', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=12, color='gold')\n\n# Set the color of the text\nax.text(0.5, -0.7, 'The color of the rectangle represents the year.', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=12, color='brown')\n\n# Set the color of the text\nax.text(0.5, -0.75, 'The width of the rectangle represents the GDP growth rate.', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=12, color='cyan')\n\n# Set the color of the text\nax.text(0.5, -0.8, 'The height of the rectangle represents the country.', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=12, color='magenta')\n\n# Set the color of the text\nax.text(0.5, -0.85, 'The color of the rectangle represents the year.', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=12, color='yellow')\n\n# Set the color of the text\nax.text(0.5, -0.9, 'The width of the rectangle represents the GDP growth rate.', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=12, color='black')\n\n# Set the color of the text\nax.text(0.5, -0.95, 'The height of the rectangle represents the country.', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=12, color='white')\n\n# Set the color of the text\nax.text(0.5, -1.0, 'The color of the rectangle represents the year.', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=12, color='grey')\n\n# Set the color of the text\nax.text(0.5, -1.05, 'The width of the rectangle represents the GDP growth rate.', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=12, color='silver')\n\n# Set the color of the text\nax.text(0.5, -1.1, 'The height of the rectangle represents the country.', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=12, color='gold')\n\n# Set the color of the text\nax.text(0.5, -1.15, 'The color of the rectangle represents the year.', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=12, color='brown')\n\n# Set the color of the text\nax.text(0.5, -1.2, 'The width of the rectangle represents the GDP growth rate.', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=12, color='cyan')\n\n# Set the color of the text\nax.text(0.5, -1.25, 'The height of the rectangle represents the country.', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=12, color='magenta')\n\n# Set the color of the text\nax.text(0.5, -1.3, 'The color of the rectangle represents the year.', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=12, color='yellow')\n\n# Set the color of the text\nax.text(0.5, -1.35, 'The width of the rectangle represents the GDP growth rate.', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=12, color='black')\n\n# Set the color of the text\nax.text(0.5, -1.4, 'The height of the rectangle represents the country.', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=12, color='white')\n\n# Set the color of the text\nax.text(0.5, -1.45, 'The color of the rectangle represents the year.', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=12, color='grey')\n\n# Set the color of the text\nax.text(0.5, -1.5, 'The width of the rectangle represents the GDP growth rate.', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=12, color='silver')\n\n# Set the color of the text\nax.text(0.5, -1.55, 'The height of the rectangle represents the country.', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=12, color='gold')\n\n# Set the color of the text\nax.text(0.5, -1.6, 'The color of the rectangle represents the year.', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=12, color='brown')\n\n# Set the color of the text\nax.text(0.5, -1.65, 'The width of the rectangle represents the GDP growth rate.', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=12, color='cyan')\n\n# Set the color of the text\nax.text(0.5, -1.7, 'The height of the rectangle represents the country.', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=12, color='magenta')\n\n# Set the color of the text\nax.text(0.5, -1.75, 'The color of the rectangle represents the year.', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=12, color='yellow')\n\n# Set the color of the text\nax.text(0.5, -1.8, 'The width of the rectangle represents the GDP growth rate.', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=12, color='black')\n\n# Set the color of the text\nax.text(0.5, -1.85, 'The height of the rectangle represents the country.', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=12, color='white')\n\n# Set the color of the text\nax.text(0.5, -1.9, 'The color of the rectangle represents the year.', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=12, color='grey')\n\n# Set the color of the text\nax.text(0.5, -1.95, 'The width of the rectangle represents the GDP growth rate.', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=12, color='silver')\n\n# Set the color of the text\nax.text(0.5, -2.0, 'The height of the rectangle represents the country.', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=12, color='gold')\n\n# Set the color of the text\nax.text(0.5, -2.05, 'The color of the rectangle represents the year.', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=12, color='brown')\n\n# Set the color of the text\nax.text(0.5, -2.1, 'The width of the rectangle represents the GDP growth rate.', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=12, color='cyan')\n\n# Set the color of the text\nax.text(0.5, -2.15, 'The height of the rectangle represents the country.', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=12, color='magenta')\n\n# Set the color of the text\nax.text(0.5, -2.2, 'The color of the rectangle represents the year.', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=12, color='yellow')\n\n# Set the color of the text\nax.text(0.5, -2.25, 'The width of the rectangle represents the GDP growth rate.', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=12, color='black')\n\n# Set the color of the text\nax.text(0.5, -2.3, 'The height of the rectangle represents the country.', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=12, color='white')\n\n# Set the color of the text\nax.text(0.5, -2.35, 'The color of the rectangle represents the year.', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=12, color='grey')\n\n# Set the color of the text\nax.text(0.5, -2.4, 'The width of the rectangle represents the GDP growth rate.', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=12, color='silver')\n\n# Set the color of the text\nax.text(0.5, -2.45, 'The height of the rectangle represents the country.', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=12, color='gold')\n\n# Set the color of the text\nax.text(0.5, -2.5, 'The color of the rectangle represents the year.', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=12, color='brown')\n\n# Set the color of the text\nax.text(0.5, -2.55, 'The width of the rectangle represents the GDP growth rate.', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=12, color='cyan')\n\n# Set the color of the text\nax.text(0.5, -2.6, 'The height of the rectangle represents the country.', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=12, color='magenta')\n\n# Set the color of the text\nax.text(0.5, -2.65, 'The color of the rectangle represents the year.', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=12, color='yellow')\n\n# Set the color of the text\nax.text(0.5, -2.7, 'The width of the rectangle represents the GDP growth rate.', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=12, color='black')\n\n# Set the color of the text\nax.text(0.5, -2.75, 'The height of the rectangle represents the country.', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=12, color='white')\n\n# Set the color of the text\nax.text(0.5, -2.8, 'The color of the rectangle represents the year.', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=12, color='grey')\n\n# Set the color of the text\nax.text(0.5, -2.85, 'The width of the rectangle represents the GDP growth rate.', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=12, color='silver')\n\n# Set the color of the text\nax.text(0.5, -2.9, 'The height of the rectangle represents the country.',"}
{"file": "dataset/ori_500/bar_67.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nmodels = ['GPT4V', 'OSCAR', 'LLaMA', 'BLIP2', 'BLIP1', 'Video-LLaMA', 'LaVIA']\nperformance = [82.5, 73.93, 31.79, 4.64, 4.64, 0.71, 0.0]\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(12.0, 8.0))\nax.bar(models, performance, color='blue')\n\n# Set the title and labels\nax.set_title('Human Study')\nax.set_xlabel('Model')\nax.set_ylabel('Performance (%)')\n\n# Add a horizontal line at y=50\nax.axhline(y=50, color='gray', linestyle='-')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_68.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ncategories = ['Traffic Flow', 'Accident Rate', 'Public Transport Usage', 'Road Condition']\nvalues = [50, 20, 40, 80]\ncolors = ['blue', 'cyan', 'green', 'purple']\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(10, 6))\nax.bar(categories, values, color=colors)\n\n# Set the title and labels\nax.set_title('Stacked Bar Chart of Transportation Data')\nax.set_xlabel('Categories')\nax.set_ylabel('Values')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_69.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 7.0))\n\n# Set the title of the chart\nax.set_title('Enhanced Stacked Bar Chart with Textures and Annotated Values')\n\n# Set the x-axis label\nax.set_xlabel('Product Categories')\n\n# Set the y-axis label\nax.set_ylabel('Sales Units')\n\n# Define the categories and their sales data\ncategories = ['Category A', 'Category B', 'Category C', 'Category D', 'Category E', 'Category F', 'Category G']\nsales_data = [80, 60, 40, 20, 0, 20, 40]\n\n# Define the colors for each category\ncolors = ['red', 'orange', 'pink', 'yellow', 'lightblue', 'orange', 'pink']\n\n# Create a bar chart with the sales data\nbars = ax.bar(categories, sales_data, color=colors)\n\n# Add annotations to each bar\nfor bar in bars:\n    height = bar.get_height()\n    ax.annotate(f'{height}',\n                xy=(bar.get_x() + bar.get_width() / 2, height),\n                xytext=(0, 3),  # 3 points vertical offset\n                textcoords=\"offset points\",\n                ha='center', va='bottom')\n\n# Set the limits of the y-axis\nax.set_ylim(0, 80)\n\n# Set the grid lines\nax.grid(True)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ncategories = ['SEQ', 'REPLAY', 'MTL']\naccuracies = [0.83, 0.6, 0.11]\nembeddings = [0.94, 0.12, 0.67]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data\nax.bar(categories, accuracies, color='lightgrey')\nax.plot(categories, embeddings, marker='o', linestyle='--', color='green')\n\n# Set the title and labels\nax.set_title('Feature Embedding Distance')\nax.set_xlabel('Categories')\nax.set_ylabel('Feature Embedding Distance (%)')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_70.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Set the title of the plot\nax.set_title('Human Labeling and Agreement Bias Checking')\n\n# Set the x-axis label\nax.set_xlabel('Human Annotator')\n\n# Set the y-axis label\nax.set_ylabel('Scores')\n\n# Set the x-ticks\nax.set_xticks([1, 2, 3, 4, 5, 6])\n\n# Set the x-tick labels\nax.set_xticklabels(['Score 1', 'Score 2', 'Score 3', 'Score 4', 'Score 5', 'Score 6'])\n\n# Set the y-ticks\nax.set_yticks(range(0, 51, 10))\n\n# Set the y-tick labels\nax.set_yticklabels(['0', '10', '20', '30', '40', '50'])\n\n# Draw a rectangle around the plot\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\nax.spines['bottom'].set_visible(True)\nax.spines['left'].set_visible(True)\n\n# Add a legend\nax.legend(['Score 1', 'Score 2', 'Score 3', 'Score 4', 'Score 5', 'Score 6'], loc='upper right')\n\n# Add rectangles for each annotator's scores\nax.add_patch(plt.Rectangle((0, 0), 1, 10, color='lightblue'))\nax.add_patch(plt.Rectangle((1, 0), 1, 8, color='lightgreen'))\nax.add_patch(plt.Rectangle((2, 0), 1, 12, color='lightseagreen'))\nax.add_patch(plt.Rectangle((3, 0), 1, 10, color='lightskyblue'))\nax.add_patch(plt.Rectangle((4, 0), 1, 15, color='lightcoral'))\nax.add_patch(plt.Rectangle((5, 0), 1, 12, color='lightgreen'))\n\n# Add rectangles for each annotator's scores\nax.add_patch(plt.Rectangle((0, 10), 1, 10, color='lightblue'))\nax.add_patch(plt.Rectangle((1, 10), 1, 8, color='lightgreen'))\nax.add_patch(plt.Rectangle((2, 10), 1, 12, color='lightseagreen'))\nax.add_patch(plt.Rectangle((3, 10), 1, 10, color='lightskyblue'))\nax.add_patch(plt.Rectangle((4, 10), 1, 15, color='lightcoral'))\nax.add_patch(plt.Rectangle((5, 10), 1, 12, color='lightgreen'))\n\n# Add rectangles for each annotator's scores\nax.add_patch(plt.Rectangle((0, 20), 1, 10, color='lightblue'))\nax.add_patch(plt.Rectangle((1, 20), 1, 8, color='lightgreen'))\nax.add_patch(plt.Rectangle((2, 20), 1, 12, color='lightseagreen'))\nax.add_patch(plt.Rectangle((3, 20), 1, 10, color='lightskyblue'))\nax.add_patch(plt.Rectangle((4, 20), 1, 15, color='lightcoral'))\nax.add_patch(plt.Rectangle((5, 20), 1, 12, color='lightgreen'))\n\n# Add rectangles for each annotator's scores\nax.add_patch(plt.Rectangle((0, 30), 1, 10, color='lightblue'))\nax.add_patch(plt.Rectangle((1, 30), 1, 8, color='lightgreen'))\nax.add_patch(plt.Rectangle((2, 30), 1, 12, color='lightseagreen'))\nax.add_patch(plt.Rectangle((3, 30), 1, 10, color='lightskyblue'))\nax.add_patch(plt.Rectangle((4, 30), 1, 15, color='lightcoral'))\nax.add_patch(plt.Rectangle((5, 30), 1, 12, color='lightgreen'))\n\n# Add rectangles for each annotator's scores\nax.add_patch(plt.Rectangle((0, 40), 1, 10, color='lightblue'))\nax.add_patch(plt.Rectangle((1, 40), 1, 8, color='lightgreen'))\nax.add_patch(plt.Rectangle((2, 40), 1, 12, color='lightseagreen'))\nax.add_patch(plt.Rectangle((3, 40), 1, 10, color='lightskyblue'))\nax.add_patch(plt.Rectangle((4, 40), 1, 15, color='lightcoral'))\nax.add_patch(plt.Rectangle((5, 40), 1, 12, color='lightgreen'))\n\n# Add rectangles for each annotator's scores\nax.add_patch(plt.Rectangle((0, 50), 1, 10, color='lightblue'))\nax.add_patch(plt.Rectangle((1, 50), 1, 8, color='lightgreen'))\nax.add_patch(plt.Rectangle((2, 50), 1, 12, color='lightseagreen'))\nax.add_patch(plt.Rectangle((3, 50), 1, 10, color='lightskyblue'))\nax.add_patch(plt.Rectangle((4, 50), 1, 15, color='lightcoral'))\nax.add_patch(plt.Rectangle((5, 50), 1, 12, color='lightgreen'))\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_71.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 4.0))\n\n# Set the title of the plot\nax.set_title('Product Sales Data')\n\n# Set the x-axis label\nax.set_xlabel('Products')\n\n# Set the y-axis label\nax.set_ylabel('Sales')\n\n# Set the tick labels for the x-axis\nax.set_xticks([0, 1, 2, 3, 4, 5, 6, 7])\nax.set_xticklabels(['coreutils', 'gzip', 'scp', 'libq', 'mcf', 'omnet.', 'perl.', 'other'])\n\n# Set the tick labels for the y-axis\nax.set_yticks([0, 20, 40, 60, 80, 100])\n\n# Set the grid lines\nax.grid(True)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the title and labels\nax.title.set_color('green')\nax.xaxis.label.set_color('green')\nax.yaxis.label.set_color('green')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the title and labels\nax.title.set_color('green')\nax.xaxis.label.set_color('green')\nax.yaxis.label.set_color('green')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the title and labels\nax.title.set_color('green')\nax.xaxis.label.set_color('green')\nax.yaxis.label.set_color('green')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the title and labels\nax.title.set_color('green')\nax.xaxis.label.set_color('green')\nax.yaxis.label.set_color('green')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the title and labels\nax.title.set_color('green')\nax.xaxis.label.set_color('green')\nax.yaxis.label.set_color('green')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the title and labels\nax.title.set_color('green')\nax.xaxis.label.set_color('green')\nax.yaxis.label.set_color('green')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the title and labels\nax.title.set_color('green')\nax.xaxis.label.set_color('green')\nax.yaxis.label.set_color('green')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the title and labels\nax.title.set_color('green')\nax.xaxis.label.set_color('green')\nax.yaxis.label.set_color('green')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the title and labels\nax.title.set_color('green')\nax.xaxis.label.set_color('green')\nax.yaxis.label.set_color('green')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the title and labels\nax.title.set_color('green')\nax.xaxis.label.set_color('green')\nax.yaxis.label.set_color('green')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the title and labels\nax.title.set_color('green')\nax.xaxis.label.set_color('green')\nax.yaxis.label.set_color('green')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the title and labels\nax.title.set_color('green')\nax.xaxis.label.set_color('green')\nax.yaxis.label.set_color('green')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the title and labels\nax.title.set_color('green')\nax.xaxis.label.set_color('green')\nax.yaxis.label.set_color('green')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the title and labels\nax.title.set_color('green')\nax.xaxis.label.set_color('green')\nax.yaxis.label.set_color('green')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the title and labels\nax.title.set_color('green')\nax.xaxis.label.set_color('green')\nax.yaxis.label.set_color('green')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the title and labels\nax.title.set_color('green')\nax.xaxis.label.set_color('green')\nax.yaxis.label.set_color('green')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the title and labels\nax.title.set_color('green')\nax.xaxis.label.set_color('green')\nax.yaxis.label.set_color('green')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the title and labels\nax.title.set_color('green')\nax.xaxis.label.set_color('green')\nax.yaxis.label.set_color('green')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the title and labels\nax.title.set_color('green')\nax.xaxis.label.set_color('green')\nax.yaxis.label.set_color('green')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the title and labels\nax.title.set_color('green')\nax.xaxis.label.set_color('green')\nax.yaxis.label.set_color('green')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the title and labels\nax.title.set_color('green')\nax.xaxis.label.set_color('green')\nax.yaxis.label.set_color('green')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the title and labels\nax.title.set_color('green')\nax.xaxis.label.set_color('green')\nax.yaxis.label.set_color('green')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the title and labels\nax.title.set_color('green')\nax.xaxis.label.set_color('green')\nax.yaxis.label.set_color('green')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the title and labels\nax.title.set_color('green')\nax.xaxis.label.set_color('green')\nax.yaxis.label.set_color('green')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the title and labels\nax.title.set_color('green')\nax.xaxis.label.set_color('green')\nax.yaxis.label.set_color('green')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the title and labels\nax.title.set_color('green')\nax.xaxis.label.set_color('green')\nax.yaxis.label.set_color('green')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the title and labels\nax.title.set_color('green')\nax.xaxis.label.set_color('green')\nax.yaxis.label.set_color('green')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the title and labels\nax.title.set_color('green')\nax.xaxis.label.set_color('green')\nax.yaxis.label.set_color('green')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the title and labels\nax.title.set_color('green')\nax.xaxis.label.set_color('green')\nax.yaxis.label.set_color('green')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the title and labels\nax.title.set_color('green')\nax.xaxis.label.set_color('green')\nax.yaxis.label.set_color('green')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the title and labels\nax.title.set_color('green')\nax.xaxis.label.set_color('green')\nax.yaxis.label.set_color('green')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the title and labels\nax.title.set_color('green')\nax.xaxis.label.set_color('green')\nax.yaxis.label.set_color('green')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the title and labels\nax.title.set_color('green')\nax.xaxis.label.set_color('green')\nax.yaxis.label.set_color('green')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the title and labels\nax.title.set_color('green')\nax.xaxis.label.set_color('green')\nax.yaxis.label.set_color('green')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the title and labels\nax.title.set_color('green')\nax.xaxis.label.set_color('green')\nax.yaxis.label.set_color('green')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the title and labels\nax.title.set_color('green')\nax.xaxis.label.set_color('green')\nax.yaxis.label.set_color('green')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the title and labels\nax.title.set_color('green')\nax.xaxis.label.set_color('green')\nax.yaxis.label.set_color('green')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the title and labels\nax.title.set_color('green')\nax.xaxis.label.set_color('green')\nax.yaxis.label.set_color('green')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the title and labels\nax.title.set_color('green')\nax.xaxis.label.set_color('green')\nax.yaxis.label.set_color('green')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the title and labels\nax.title.set_color('green')\nax.xaxis.label.set_color('green')\nax.yaxis.label.set_color('green')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the title and labels\nax.title.set_color('green')\nax.xaxis.label.set_color('green')\nax.yaxis.label.set_color('green')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the title and labels\nax.title.set_color('green')\nax.xaxis.label.set_color('green')\nax.yaxis.label.set_color('green')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the title and labels\nax.title.set_color('green')\nax.xaxis.label.set_color('green')\nax.yaxis.label.set_color('green')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the title and labels\nax.title.set_color('green')\nax.xaxis.label.set_color('green')\nax.yaxis.label.set_color('green')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the title and labels\nax.title.set_color('green')\nax.xaxis.label.set_color('green')\nax.yaxis.label.set_color('green')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the title and labels\nax.title.set_color('green')\nax.xaxis.label.set_color('green')\nax.yaxis.label.set_color('green')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the title and labels\nax.title.set_color('green')\nax.xaxis.label.set_color('green')\nax.yaxis.label.set_color('green')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the title and labels\nax.title.set_color('green')\nax.xaxis.label.set_color('green')\nax.yaxis.label.set_color('green')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the title and labels\nax.title.set_color('green')\nax.xaxis.label.set_color('green')\nax.yaxis.label.set_color('green')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the title and labels\nax.title.set_color('green')\nax.xaxis.label.set_color('green')\nax.yaxis.label.set_color('green')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the title and labels\nax.title.set_color('green')\nax.xaxis.label.set_color('green')\nax.yaxis.label.set_color('green')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the title and labels\nax.title.set_color('green')\nax.xaxis.label.set_color('green')\nax.yaxis.label.set_color('green')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the title and labels\nax.title.set_color('green')\nax.xaxis.label.set_color('green')\nax.yaxis.label.set_color('green')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the title and labels\nax.title"}
{"file": "dataset/ori_500/bar_72.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nbrands = ['Bactrian-X EN', 'Lima-X DE', 'Bactrian-X FR', 'Lima-X IT', 'Bactrian-X ES']\nperformance = [3.5, 2.3, 4.4, 1.3, 0.7]\nlanguages = ['EN', 'DE', 'FR', 'IT', 'ES']\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Plot the data\nax.barh(brands, performance, color='blue')\nax.set_xlabel('Performance [%]')\nax.set_title('Model Performance Improvement by Language')\n\n# Add a vertical line for each language\nfor i, lang in enumerate(languages):\n    ax.axvline(x=performance[i], color='red', linestyle='--')\n\n# Add a legend\nax.legend(['Language'], loc='upper right')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_73.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Set the title of the graph\nax.set_title('Dow Jones Index vs Nasdaq Index')\n\n# Set the x-axis label\nax.set_xlabel('Fiscal Quarter')\n\n# Set the y-axis label\nax.set_ylabel('Index Change (%)')\n\n# Set the x-ticks\nax.set_xticks([1, 2, 3, 4, 5])\n\n# Set the x-tick labels\nax.set_xticklabels(['Q1', 'Q2', 'Q3', 'Q4', 'Q5'])\n\n# Set the y-limits\nax.set_ylim(-5, 5)\n\n# Set the y-ticks\nax.set_yticks([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5])\n\n# Set the y-tick labels\nax.set_yticklabels(['-5', '-4', '-3', '-2', '-1', '0', '1', '2', '3', '4', '5'])\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the title\nax.set_title('Dow Jones Index vs Nasdaq Index', color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('Fiscal Quarter', color='black')\n\n# Set the color of the y-axis label\nax.set_ylabel('Index Change (%)', color='black')\n\n# Set the color of the x-tick labels\nax.set_xticklabels(['Q1', 'Q2', 'Q3', 'Q4', 'Q5'], color='black')\n\n# Set the color of the y-tick labels\nax.set_yticklabels(['-5', '-4', '-3', '-2', '-1', '0', '1', '2', '3', '4', '5'], color='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the title\nax.set_title('Dow Jones Index vs Nasdaq Index', color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('Fiscal Quarter', color='black')\n\n# Set the color of the y-axis label\nax.set_ylabel('Index Change (%)', color='black')\n\n# Set the color of the x-tick labels\nax.set_xticklabels(['Q1', 'Q2', 'Q3', 'Q4', 'Q5'], color='black')\n\n# Set the color of the y-tick labels\nax.set_yticklabels(['-5', '-4', '-3', '-2', '-1', '0', '1', '2', '3', '4', '5'], color='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the title\nax.set_title('Dow Jones Index vs Nasdaq Index', color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('Fiscal Quarter', color='black')\n\n# Set the color of the y-axis label\nax.set_ylabel('Index Change (%)', color='black')\n\n# Set the color of the x-tick labels\nax.set_xticklabels(['Q1', 'Q2', 'Q3', 'Q4', 'Q5'], color='black')\n\n# Set the color of the y-tick labels\nax.set_yticklabels(['-5', '-4', '-3', '-2', '-1', '0', '1', '2', '3', '4', '5'], color='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the title\nax.set_title('Dow Jones Index vs Nasdaq Index', color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('Fiscal Quarter', color='black')\n\n# Set the color of the y-axis label\nax.set_ylabel('Index Change (%)', color='black')\n\n# Set the color of the x-tick labels\nax.set_xticklabels(['Q1', 'Q2', 'Q3', 'Q4', 'Q5'], color='black')\n\n# Set the color of the y-tick labels\nax.set_yticklabels(['-5', '-4', '-3', '-2', '-1', '0', '1', '2', '3', '4', '5'], color='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the title\nax.set_title('Dow Jones Index vs Nasdaq Index', color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('Fiscal Quarter', color='black')\n\n# Set the color of the y-axis label\nax.set_ylabel('Index Change (%)', color='black')\n\n# Set the color of the x-tick labels\nax.set_xticklabels(['Q1', 'Q2', 'Q3', 'Q4', 'Q5'], color='black')\n\n# Set the color of the y-tick labels\nax.set_yticklabels(['-5', '-4', '-3', '-2', '-1', '0', '1', '2', '3', '4', '5'], color='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the title\nax.set_title('Dow Jones Index vs Nasdaq Index', color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('Fiscal Quarter', color='black')\n\n# Set the color of the y-axis label\nax.set_ylabel('Index Change (%)', color='black')\n\n# Set the color of the x-tick labels\nax.set_xticklabels(['Q1', 'Q2', 'Q3', 'Q4', 'Q5'], color='black')\n\n# Set the color of the y-tick labels\nax.set_yticklabels(['-5', '-4', '-3', '-2', '-1', '0', '1', '2', '3', '4', '5'], color='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the title\nax.set_title('Dow Jones Index vs Nasdaq Index', color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('Fiscal Quarter', color='black')\n\n# Set the color of the y-axis label\nax.set_ylabel('Index Change (%)', color='black')\n\n# Set the color of the x-tick labels\nax.set_xticklabels(['Q1', 'Q2', 'Q3', 'Q4', 'Q5'], color='black')\n\n# Set the color of the y-tick labels\nax.set_yticklabels(['-5', '-4', '-3', '-2', '-1', '0', '1', '2', '3', '4', '5'], color='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the title\nax.set_title('Dow Jones Index vs Nasdaq Index', color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('Fiscal Quarter', color='black')\n\n# Set the color of the y-axis label\nax.set_ylabel('Index Change (%)', color='black')\n\n# Set the color of the x-tick labels\nax.set_xticklabels(['Q1', 'Q2', 'Q3', 'Q4', 'Q5'], color='black')\n\n# Set the color of the y-tick labels\nax.set_yticklabels(['-5', '-4', '-3', '-2', '-1', '0', '1', '2', '3', '4', '5'], color='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the title\nax.set_title('Dow Jones Index vs Nasdaq Index', color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('Fiscal Quarter', color='black')\n\n# Set the color of the y-axis label\nax.set_ylabel('Index Change (%)', color='black')\n\n# Set the color of the x-tick labels\nax.set_xticklabels(['Q1', 'Q2', 'Q3', 'Q4', 'Q5'], color='black')\n\n# Set the color of the y-tick labels\nax.set_yticklabels(['-5', '-4', '-3', '-2', '-1', '0', '1', '2', '3', '4', '5'], color='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the title\nax.set_title('Dow Jones Index vs Nasdaq Index', color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('Fiscal Quarter', color='black')\n\n# Set the color of the y-axis label\nax.set_ylabel('Index Change (%)', color='black')\n\n# Set the color of the x-tick labels\nax.set_xticklabels(['Q1', 'Q2', 'Q3', 'Q4', 'Q5'], color='black')\n\n# Set the color of the y-tick labels\nax.set_yticklabels(['-5', '-4', '-3', '-2', '-1', '0', '1', '2', '3', '4', '5'], color='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the title\nax.set_title('Dow Jones Index vs Nasdaq Index', color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('Fiscal Quarter', color='black')\n\n# Set the color of the y-axis label\nax.set_ylabel('Index Change (%)', color='black')\n\n# Set the color of the x-tick labels\nax.set_xticklabels(['Q1', 'Q2', 'Q3', 'Q4', 'Q5'], color='black')\n\n# Set the color of the y-tick labels\nax.set_yticklabels(['-5', '-4', '-3', '-2', '-1', '0', '1', '2', '3', '4', '5'], color='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the title\nax.set_title('Dow Jones Index vs Nasdaq Index', color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('Fiscal Quarter', color='black')\n\n# Set the color of the y-axis label\nax.set_ylabel('Index Change (%)', color='black')\n\n# Set the color of the x-tick labels\nax.set_xticklabels(['Q1', 'Q2', 'Q3', 'Q4', 'Q5'], color='black')\n\n# Set the color of the y-tick labels\nax.set_yticklabels(['-5', '-4', '-3', '-2', '-1', '0', '1', '2', '3', '4', '5'], color='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the title\nax.set_title('Dow Jones Index vs Nasdaq Index', color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('Fiscal Quarter', color='black')\n\n# Set the color of the y-axis label\nax.set_ylabel('Index Change (%)', color='black')\n\n# Set the color of the x-tick labels\nax.set_xticklabels(['Q1', 'Q2', 'Q3', 'Q4', 'Q5'], color='black')\n\n# Set the color of the y-tick labels\nax.set_yticklabels(['-5', '-4', '-3', '-2', '-1', '0', '1', '2', '3', '4', '5'], color='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the title\nax.set_title('Dow Jones Index vs Nasdaq Index', color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('Fiscal Quarter', color='black')\n\n# Set the color of the y-axis label\nax.set_ylabel('Index Change (%)', color='black')\n\n# Set the color of the x-tick labels\nax.set_xticklabels(['Q1', 'Q2', 'Q3', 'Q4', 'Q5'], color='black')\n\n# Set the color of the y-tick labels\nax.set_yticklabels(['-5', '-4', '-3', '-2', '-1', '0', '1', '2', '3', '4', '5'], color='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the title\nax.set_title('Dow Jones Index vs Nasdaq Index', color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('Fiscal Quarter', color='black')\n\n# Set the color of the y-axis label\nax.set_ylabel('Index Change (%)', color='black')\n\n# Set the color of the x-tick labels\nax.set_xticklabels(['Q1', 'Q2', 'Q3', 'Q4', 'Q5'], color='black')\n\n# Set the color of the y-tick labels\nax.set_yticklabels(['-5', '-4', '-3', '-2', '-1', '0', '1', '2', '3', '4', '5'], color='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the background"}
{"file": "dataset/ori_500/bar_74.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\nx = ['E16.6', 'L26.8', 'D19.7', 'L22.2']\ny = [39.4, 35.18, 30.84, 34.06]\ny2 = [35.1, 34.06, 33.0, 32.0, 30.0, 28.0, 26.82, 24.27, 22.2, 20.0, 18.84, 16.96, 14.66, 12.0, 9.0, 7.0]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Plot the data\nax.plot(x, y, label='Series 1')\nax.plot(x, y2, label='Series 2')\n\n# Set the title and labels\nax.set_title('Series Labels')\nax.set_xlabel('X-axis Label')\nax.set_ylabel('Y-axis Label')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_75.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ntruthful = [46.3, 57.9, 53.8, 43.7]\nmisleading = [30.1, 34, 20, 20]\nlabels = ['Truthful Recall', 'Misleading Recall']\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Plot the data\nax.bar(labels, truthful, color='black')\nax.bar(labels, misleading, bottom=truthful, color='#FFC0CB')\n\n# Set the title and labels\nax.set_title('Truthful:Misleading = 2:1')\nax.set_xlabel('Recall')\nax.set_ylabel('Percentage')\n\n# Set the y-axis limits\nax.set_ylim(0, 60)\n\n# Add a horizontal line at y=0\nax.axhline(y=0, color='black', linestyle='-')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_76.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Set the title of the plot\nax.set_title('Environmental Impact by Sector')\n\n# Set the x-axis label\nax.set_xlabel('Industry Sectors')\n\n# Set the y-axis label\nax.set_ylabel('Pollution Emissions (thousands of metric tons)')\n\n# Set the x-ticks\nax.set_xticks([0, 1, 2, 3, 4])\nax.set_xticklabels(['Light Industry', 'Heavy Industry', 'Transportation', 'Residential'])\n\n# Set the y-ticks\nax.set_yticks(range(-1600, 1000, 200))\nax.set_yticklabels(['-1600', '-1400', '-1200', '-1000', '-800', '-600', '-400', '-200', '0', '200', '400', '600', '800', '1000'])\n\n# Set the grid lines\nax.grid(True)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', colors='blue')\nax.tick_params(axis='y', colors='orange')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('orange')\n\n# Set the color of the tick labels\nax.xaxis.label.set_color('blue')\nax.yaxis.label.set_color('orange')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('orange')\n\n# Set the color of the tick labels\nax.xaxis.label.set_color('blue')\nax.yaxis.label.set_color('orange')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('orange')\n\n# Set the color of the tick labels\nax.xaxis.label.set_color('blue')\nax.yaxis.label.set_color('orange')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('orange')\n\n# Set the color of the tick labels\nax.xaxis.label.set_color('blue')\nax.yaxis.label.set_color('orange')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('orange')\n\n# Set the color of the tick labels\nax.xaxis.label.set_color('blue')\nax.yaxis.label.set_color('orange')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('orange')\n\n# Set the color of the tick labels\nax.xaxis.label.set_color('blue')\nax.yaxis.label.set_color('orange')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('orange')\n\n# Set the color of the tick labels\nax.xaxis.label.set_color('blue')\nax.yaxis.label.set_color('orange')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('orange')\n\n# Set the color of the tick labels\nax.xaxis.label.set_color('blue')\nax.yaxis.label.set_color('orange')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('orange')\n\n# Set the color of the tick labels\nax.xaxis.label.set_color('blue')\nax.yaxis.label.set_color('orange')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('orange')\n\n# Set the color of the tick labels\nax.xaxis.label.set_color('blue')\nax.yaxis.label.set_color('orange')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('orange')\n\n# Set the color of the tick labels\nax.xaxis.label.set_color('blue')\nax.yaxis.label.set_color('orange')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('orange')\n\n# Set the color of the tick labels\nax.xaxis.label.set_color('blue')\nax.yaxis.label.set_color('orange')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('orange')\n\n# Set the color of the tick labels\nax.xaxis.label.set_color('blue')\nax.yaxis.label.set_color('orange')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('orange')\n\n# Set the color of the tick labels\nax.xaxis.label.set_color('blue')\nax.yaxis.label.set_color('orange')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('orange')\n\n# Set the color of the tick labels\nax.xaxis.label.set_color('blue')\nax.yaxis.label.set_color('orange')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('orange')\n\n# Set the color of the tick labels\nax.xaxis.label.set_color('blue')\nax.yaxis.label.set_color('orange')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('orange')\n\n# Set the color of the tick labels\nax.xaxis.label.set_color('blue')\nax.yaxis.label.set_color('orange')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('orange')\n\n# Set the color of the tick labels\nax.xaxis.label.set_color('blue')\nax.yaxis.label.set_color('orange')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('orange')\n\n# Set the color of the tick labels\nax.xaxis.label.set_color('blue')\nax.yaxis.label.set_color('orange')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('orange')\n\n# Set the color of the tick labels\nax.xaxis.label.set_color('blue')\nax.yaxis.label.set_color('orange')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('orange')\n\n# Set the color of the tick labels\nax.xaxis.label.set_color('blue')\nax.yaxis.label.set_color('orange')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('orange')\n\n# Set the color of the tick labels\nax.xaxis.label.set_color('blue')\nax.yaxis.label.set_color('orange')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('orange')\n\n# Set the color of the tick labels\nax.xaxis.label.set_color('blue')\nax.yaxis.label.set_color('orange')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('orange')\n\n# Set the color of the tick labels\nax.xaxis.label.set_color('blue')\nax.yaxis.label.set_color('orange')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('orange')\n\n# Set the color of the tick labels\nax.xaxis.label.set_color('blue')\nax.yaxis.label.set_color('orange')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('orange')\n\n# Set the color of the tick labels\nax.xaxis.label.set_color('blue')\nax.yaxis.label.set_color('orange')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('orange')\n\n# Set the color of the tick labels\nax.xaxis.label.set_color('blue')\nax.yaxis.label.set_color('orange')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('orange')\n\n# Set the color of the tick labels\nax.xaxis.label.set_color('blue')\nax.yaxis.label.set_color('orange')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('orange')\n\n# Set the color of the tick labels\nax.xaxis.label.set_color('blue')\nax.yaxis.label.set_color('orange')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('orange')\n\n# Set the color of the tick labels\nax.xaxis.label.set_color('blue')\nax.yaxis.label.set_color('orange')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('orange')\n\n# Set the color of the tick labels\nax.xaxis.label.set_color('blue')\nax.yaxis.label.set_color('orange')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('orange')\n\n# Set the color of the tick labels\nax.xaxis.label.set_color('blue')\nax.yaxis.label.set_color('orange')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('orange')\n\n# Set the color of the tick labels\nax.xaxis.label.set_color('blue')\nax.yaxis.label.set_color('orange')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('orange')\n\n# Set the color of the tick labels\nax.xaxis.label.set_color('blue')\nax.yaxis.label.set_color('orange')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('orange')\n\n# Set the color of the tick labels\nax.xaxis.label.set_color('blue')\nax.yaxis.label.set_color('orange')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('orange')\n\n# Set the color of the tick labels\nax.xaxis.label.set_color('blue')\nax.yaxis.label.set_color('orange')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('orange')\n\n# Set the color of the tick labels\nax.xaxis.label.set_color('blue')\nax.yaxis.label.set_color('orange')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('orange')\n\n# Set the color of the tick labels\nax.xaxis.label.set_color('blue')\nax.yaxis.label.set_color('orange')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('orange')\n\n# Set the color of the tick labels\nax.xaxis.label.set_color('blue')\nax.yaxis.label.set_color('orange')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('orange')\n\n# Set the color of the tick labels\nax.xaxis.label.set_color('blue')\nax.yaxis.label.set_color('orange')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('orange')\n\n# Set the color of the tick labels\nax.xaxis.label.set_color('blue')\nax.yaxis.label.set_color('orange')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('orange')\n\n# Set the color of the tick labels\nax.xaxis.label.set_color('blue')\nax.yaxis.label.set_color('orange')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('orange')\n\n# Set the color of the tick labels\nax.xaxis.label.set_color('blue')\nax.yaxis.label.set_color('orange')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('orange')\n\n# Set the color of the tick labels\nax.xaxis.label.set_color('blue')\nax.yaxis.label.set_color('orange')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('orange')\n\n# Set the color of the tick labels\nax.xaxis.label.set_color('blue')\nax.yaxis.label.set_color('orange')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('orange')\n\n# Set the color of the tick labels\nax.xaxis.label.set_color('blue')\nax.yaxis.label.set_color('orange')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('orange')\n\n# Set the color of the tick labels\nax.xaxis.label.set_color('blue')\nax.yaxis.label.set_color('orange')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('orange')\n\n# Set the color of the tick labels\nax.xaxis.label.set_color('blue')\nax.yaxis.label.set_color('orange')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('orange')\n\n# Set the color of the tick labels\nax.xaxis.label.set_color('blue')\nax.yaxis.label.set_color('orange')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('orange')\n\n# Set the color of the tick labels\nax.xaxis.label.set_color('blue')\nax.yaxis.label.set_color('orange')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('orange')\n\n# Set the color of the tick labels\nax.xaxis.label.set_color('blue')\nax.yaxis.label.set_color('orange')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('orange')\n\n# Set the color of the tick labels\nax.xaxis.label.set_color('blue')\nax.yaxis.label.set_color('orange')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('orange')\n\n# Set the color of the tick labels\nax.xaxis.label.set_color('blue')\nax.yaxis.label.set_color('orange')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('orange')\n\n# Set the color of the tick labels\nax.xaxis.label.set_color('blue')\nax.yaxis.label.set_color('orange')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('orange')\n\n# Set the color of the tick labels\nax.xaxis.label.set_color('blue')\nax.yaxis.label.set_color('orange')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('orange')\n\n# Set the color of the tick labels\nax.xaxis.label.set_color('blue')\nax.yaxis.label.set_color('orange')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('orange')\n\n# Set the color of the tick labels\nax.xaxis.label.set_color('blue')\nax.yaxis.label.set_color('orange')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('orange')\n\n# Set the color of the tick labels\nax.xaxis.label.set_color('blue')\nax.yaxis.label.set_color('orange')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('orange')\n\n# Set the color of the tick labels\nax.xaxis.label.set_color('blue')\nax.yaxis.label.set_color('orange')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('orange')\n\n# Set the color of the tick labels\nax.xaxis.label.set_color('blue')\nax.yaxis.label.set_color('orange')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('orange')\n\n# Set the color of the tick labels\nax.xaxis.label.set_color('blue')\nax.yaxis.label.set_color('orange')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('orange')\n\n# Set the color of the tick labels\nax.xaxis.label.set_color('blue')\nax.yaxis.label.set_color('orange')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('orange')\n\n# Set the color of the tick labels\nax.xaxis.label.set_color('blue')\nax.yaxis.label.set_color('orange')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('orange')\n\n# Set the color of the tick labels\nax.xaxis.label.set_color('blue')\nax.yaxis.label.set_color('orange')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('orange')\n\n# Set the color of the tick labels\nax.xaxis.label.set_color('blue')\nax.yaxis.label.set_color('orange')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('orange')\n\n# Set the color of the tick labels\nax.xaxis.label.set_color('blue')\nax.yaxis.label.set_color('orange')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('orange')\n\n# Set"}
{"file": "dataset/ori_500/bar_77.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ncities = ['Beijing', 'Shanghai', 'Guangzhou', 'Shenzhen', 'Chengdu']\ntemperatures = [12, 15, 18, 22, 17]\n\n# Create a bar chart\nplt.figure(figsize=(8, 4))\nplt.bar(cities, temperatures, color='skyblue')\nplt.title('Average City Temperatures')\nplt.xlabel('Cities')\nplt.ylabel('Temperature (\u00b0C)')\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_78.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Set the title of the plot\nax.set_title('Annual Pollution Emission Reductions')\n\n# Set the x-axis label\nax.set_xlabel('Regions')\n\n# Set the y-axis label\nax.set_ylabel('Emissions (in tons)')\n\n# Define the data for the plot\nregions = ['Region 1', 'Region 2', 'Region 3', 'Region 4']\nemissions_2020 = [180, 190, 200, 210]\nemissions_2021 = [170, 180, 190, 200]\n\n# Plot the data\nax.plot(regions, emissions_2020, color='red', label='2020 Emissions')\nax.plot(regions, emissions_2021, color='blue', label='2021 Emissions')\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_79.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the bar charts\ndata = {\n    'Question 1': [26, 32, 17, 15, 10, 26],\n    'Question 2': [13, 10, 29, 15, 10, 22],\n    'Question 3': [37, 35, 15, 11, 9, 32],\n    'Question 4': [33, 15, 14, 13, 11, 29],\n    'Question 5': [40, 14, 13, 12, 10, 21]\n}\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Plot the bar charts\nfor i, (question, values) in enumerate(data.items()):\n    ax.barh(range(len(values)), values, color=plt.cm.tab20(i), label=question)\n\n# Set the title and labels\nax.set_title('Survey Results')\nax.set_xlabel('Percentage')\nax.set_ylabel('Questions')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Set the x-axis limits\nax.set_xlim(1, 10)\n\n# Set the y-axis limits\nax.set_ylim(0, 10)\n\n# Set the x-axis ticks\nax.set_xticks(range(1, 11))\n\n# Set the y-axis ticks\nax.set_yticks(range(0, 11, 2))\n\n# Draw a horizontal line at y=5\nax.axhline(y=5, color='r', linestyle='-')\n\n# Draw a rectangle with a red border\nrect = plt.Rectangle((1, 0), 10, 10, fill=False, edgecolor='red')\nax.add_patch(rect)\n\n# Draw a rectangle with a blue border\nrect = plt.Rectangle((1, 0), 10, 10, fill=False, edgecolor='blue')\nax.add_patch(rect)\n\n# Draw a rectangle with a green border\nrect = plt.Rectangle((1, 0), 10, 10, fill=False, edgecolor='green')\nax.add_patch(rect)\n\n# Draw a rectangle with a yellow border\nrect = plt.Rectangle((1, 0), 10, 10, fill=False, edgecolor='yellow')\nax.add_patch(rect)\n\n# Draw a rectangle with a cyan border\nrect = plt.Rectangle((1, 0), 10, 10, fill=False, edgecolor='cyan')\nax.add_patch(rect)\n\n# Draw a rectangle with a magenta border\nrect = plt.Rectangle((1, 0), 10, 10, fill=False, edgecolor='magenta')\nax.add_patch(rect)\n\n# Draw a rectangle with a black border\nrect = plt.Rectangle((1, 0), 10, 10, fill=False, edgecolor='black')\nax.add_patch(rect)\n\n# Draw a rectangle with a white border\nrect = plt.Rectangle((1, 0), 10, 10, fill=False, edgecolor='white')\nax.add_patch(rect)\n\n# Draw a rectangle with a gray border\nrect = plt.Rectangle((1, 0), 10, 10, fill=False, edgecolor='gray')\nax.add_patch(rect)\n\n# Draw a rectangle with a brown border\nrect = plt.Rectangle((1, 0), 10, 10, fill=False, edgecolor='brown')\nax.add_patch(rect)\n\n# Draw a rectangle with a pink border\nrect = plt.Rectangle((1, 0), 10, 10, fill=False, edgecolor='pink')\nax.add_patch(rect)\n\n# Draw a rectangle with a purple border\nrect = plt.Rectangle((1, 0), 10, 10, fill=False, edgecolor='purple')\nax.add_patch(rect)\n\n# Draw a rectangle with a orange border\nrect = plt.Rectangle((1, 0), 10, 10, fill=False, edgecolor='orange')\nax.add_patch(rect)\n\n# Draw a rectangle with a navy border\nrect = plt.Rectangle((1, 0), 10, 10, fill=False, edgecolor='navy')\nax.add_patch(rect)\n\n# Draw a rectangle with a olive border\nrect = plt.Rectangle((1, 0), 10, 10, fill=False, edgecolor='olive')\nax.add_patch(rect)\n\n# Draw a rectangle with a silver border\nrect = plt.Rectangle((1, 0), 10, 10, fill=False, edgecolor='silver')\nax.add_patch(rect)\n\n# Draw a rectangle with a gold border\nrect = plt.Rectangle((1, 0), 10, 10, fill=False, edgecolor='gold')\nax.add_patch(rect)\n\n# Draw a rectangle with a maroon border\nrect = plt.Rectangle((1, 0), 10, 10, fill=False, edgecolor='maroon')\nax.add_patch(rect)\n\n# Draw a rectangle with a teal border\nrect = plt.Rectangle((1, 0), 10, 10, fill=False, edgecolor='teal')\nax.add_patch(rect)\n\n# Draw a rectangle with a lime border\nrect = plt.Rectangle((1, 0), 10, 10, fill=False, edgecolor='lime')\nax.add_patch(rect)\n\n# Draw a rectangle with a aqua border\nrect = plt.Rectangle((1, 0), 10, 10, fill=False, edgecolor='aqua')\nax.add_patch(rect)\n\n# Draw a rectangle with a fuchsia border\nrect = plt.Rectangle((1, 0), 10, 10, fill=False, edgecolor='fuchsia')\nax.add_patch(rect)\n\n# Draw a rectangle with a white smoke border\nrect = plt.Rectangle((1, 0), 10, 10, fill=False, edgecolor='whitesmoke')\nax.add_patch(rect)\n\n# Draw a rectangle with a ghost white border\nrect = plt.Rectangle((1, 0), 10, 10, fill=False, edgecolor='ghostwhite')\nax.add_patch(rect)\n\n# Draw a rectangle with a honeydew border\nrect = plt.Rectangle((1, 0), 10, 10, fill=False, edgecolor='honeydew')\nax.add_patch(rect)\n\n# Draw a rectangle with a blanched almond border\nrect = plt.Rectangle((1, 0), 10, 10, fill=False, edgecolor='blanchedalmond')\nax.add_patch(rect)\n\n# Draw a rectangle with a antique white border\nrect = plt.Rectangle((1, 0), 10, 10, fill=False, edgecolor='antiquewhite')\nax.add_patch(rect)\n\n# Draw a rectangle with a linen border\nrect = plt.Rectangle((1, 0), 10, 10, fill=False, edgecolor='linen')\nax.add_patch(rect)\n\n# Draw a rectangle with a light golden rod yellow border\nrect = plt.Rectangle((1, 0), 10, 10, fill=False, edgecolor='lightgoldenrodyellow')\nax.add_patch(rect)\n\n# Draw a rectangle with a papaya whip border\nrect = plt.Rectangle((1, 0), 10, 10, fill=False, edgecolor='papayawhip')\nax.add_patch(rect)\n\n# Draw a rectangle with a blanched almond border\nrect = plt.Rectangle((1, 0), 10, 10, fill=False, edgecolor='blanchedalmond')\nax.add_patch(rect)\n\n# Draw a rectangle with a bisque border\nrect = plt.Rectangle((1, 0), 10, 10, fill=False, edgecolor='bisque')\nax.add_patch(rect)\n\n# Draw a rectangle with a peach puff border\nrect = plt.Rectangle((1, 0), 10, 10, fill=False, edgecolor='peachpuff')\nax.add_patch(rect)\n\n# Draw a rectangle with a navajo white border\nrect = plt.Rectangle((1, 0), 10, 10, fill=False, edgecolor='navajowhite')\nax.add_patch(rect)\n\n# Draw a rectangle with a moccasin border\nrect = plt.Rectangle((1, 0), 10, 10, fill=False, edgecolor='moccasin')\nax.add_patch(rect)\n\n# Draw a rectangle with a cornsilk border\nrect = plt.Rectangle((1, 0), 10, 10, fill=False, edgecolor='cornsilk')\nax.add_patch(rect)\n\n# Draw a rectangle with a ivory border\nrect = plt.Rectangle((1, 0), 10, 10, fill=False, edgecolor='ivory')\nax.add_patch(rect)\n\n# Draw a rectangle with a lemon chiffon border\nrect = plt.Rectangle((1, 0), 10, 10, fill=False, edgecolor='lemonchiffon')\nax.add_patch(rect)\n\n# Draw a rectangle with a seashell border\nrect = plt.Rectangle((1, 0), 10, 10, fill=False, edgecolor='seashell')\nax.add_patch(rect)\n\n# Draw a rectangle with a honeydew border\nrect = plt.Rectangle((1, 0), 10, 10, fill=False, edgecolor='honeydew')\nax.add_patch(rect)\n\n# Draw a rectangle with a mint cream border\nrect = plt.Rectangle((1, 0), 10, 10, fill=False, edgecolor='mintcream')\nax.add_patch(rect)\n\n# Draw a rectangle with a azure border\nrect = plt.Rectangle((1, 0), 10, 10, fill=False, edgecolor='azure')\nax.add_patch(rect)\n\n# Draw a rectangle with a alice blue border\nrect = plt.Rectangle((1, 0), 10, 10, fill=False, edgecolor='aliceblue')\nax.add_patch(rect)\n\n# Draw a rectangle with a lavender border\nrect = plt.Rectangle((1, 0), 10, 10, fill=False, edgecolor='lavender')\nax.add_patch(rect)\n\n# Draw a rectangle with a lavender blush border\nrect = plt.Rectangle((1, 0), 10, 10, fill=False, edgecolor='lavenderblush')\nax.add_patch(rect)\n\n# Draw a rectangle with a misty rose border\nrect = plt.Rectangle((1, 0), 10, 10, fill=False, edgecolor='mistyrose')\nax.add_patch(rect)\n\n# Draw a rectangle with a snow border\nrect = plt.Rectangle((1, 0), 10, 10, fill=False, edgecolor='snow')\nax.add_patch(rect)\n\n# Draw a rectangle with a floral white border\nrect = plt.Rectangle((1, 0), 10, 10, fill=False, edgecolor='floralwhite')\nax.add_patch(rect)\n\n# Draw a rectangle with a old lace border\nrect = plt.Rectangle((1, 0), 10, 10, fill=False, edgecolor='oldlace')\nax.add_patch(rect)\n\n# Draw a rectangle with a linen border\nrect = plt.Rectangle((1, 0), 10, 10, fill=False, edgecolor='linen')\nax.add_patch(rect)\n\n# Draw a rectangle with a antique white border\nrect = plt.Rectangle((1, 0), 10, 10, fill=False, edgecolor='antiquewhite')\nax.add_patch(rect)\n\n# Draw a rectangle with a beige border\nrect = plt.Rectangle((1, 0), 10, 10, fill=False, edgecolor='beige')\nax.add_patch(rect)\n\n# Draw a rectangle with a wheat border\nrect = plt.Rectangle((1, 0), 10, 10, fill=False, edgecolor='wheat')\nax.add_patch(rect)\n\n# Draw a rectangle with a sandy brown border\nrect = plt.Rectangle((1, 0), 10, 10, fill=False, edgecolor='sandybrown')\nax.add_patch(rect)\n\n# Draw a rectangle with a tan border\nrect = plt.Rectangle((1, 0), 10, 10, fill=False, edgecolor='tan')\nax.add_patch(rect)\n\n# Draw a rectangle with a chocolate border\nrect = plt.Rectangle((1, 0), 10, 10, fill=False, edgecolor='chocolate')\nax.add_patch(rect)\n\n# Draw a rectangle with a saddle brown border\nrect = plt.Rectangle((1, 0), 10, 10, fill=False, edgecolor='saddlebrown')\nax.add_patch(rect)\n\n# Draw a rectangle with a sienna border\nrect = plt.Rectangle((1, 0), 10, 10, fill=False, edgecolor='sienna')\nax.add_patch(rect)\n\n# Draw a rectangle with a peru border\nrect = plt.Rectangle((1, 0), 10, 10, fill=False, edgecolor='peru')\nax.add_patch(rect)\n\n# Draw a rectangle with a burlywood border\nrect = plt.Rectangle((1, 0), 10, 10, fill=False, edgecolor='burlywood')\nax.add_patch(rect)\n\n# Draw a rectangle with a beige border\nrect = plt.Rectangle((1, 0), 10, 10, fill=False, edgecolor='beige')\nax.add_patch(rect)\n\n# Draw a rectangle with a wheat border\nrect = plt.Rectangle((1, 0), 10, 10, fill=False, edgecolor='wheat')\nax.add_patch(rect)\n\n# Draw a rectangle with a sandy brown border\nrect = plt.Rectangle((1, 0), 10, 10, fill=False, edgecolor='sandybrown')\nax.add_patch(rect)\n\n# Draw a rectangle with a tan border\nrect = plt.Rectangle((1, 0), 10, 10, fill=False, edgecolor='tan')\nax.add_patch(rect)\n\n# Draw a rectangle with a chocolate border\nrect = plt.Rectangle((1, 0), 10, 10, fill=False, edgecolor='chocolate')\nax.add_patch(rect)\n\n# Draw a rectangle with a saddle brown border\nrect = plt.Rectangle((1, 0), 10, 10, fill=False, edgecolor='saddlebrown')\nax.add_patch(rect)\n\n# Draw a rectangle with a sienna border\nrect = plt.Rectangle((1, 0), 10, 10, fill=False, edgecolor='sienna')\nax.add_patch(rect)\n\n# Draw a rectangle with a peru border\nrect = plt.Rectangle((1, 0), 10, 10, fill=False, edgecolor='peru')\nax.add_patch(rect)\n\n# Draw a rectangle with a burlywood border\nrect = plt.Rectangle((1, 0), 10, 10, fill=False, edgecolor='burlywood')\nax.add_patch(rect)\n\n# Draw a rectangle with a beige border\nrect = plt.Rectangle((1, 0), 10, 10, fill=False, edgecolor='beige')\nax.add_patch(rect)\n\n# Draw a rectangle with a wheat border\nrect = plt.Rectangle((1, 0), 10, 10, fill=False, edgecolor='wheat')\nax.add_patch(rect)\n\n# Draw a rectangle with a sandy brown border\nrect = plt.Rectangle((1, 0), 10, 10, fill=False, edgecolor='sandybrown')\nax.add_patch(rect)\n\n# Draw a rectangle with a tan border\nrect = plt.Rectangle((1, 0), 10, 10, fill=False, edgecolor='tan')\nax.add_patch(rect)\n\n# Draw a rectangle with a chocolate border\nrect = plt.Rectangle((1, 0), 10, 10, fill=False, edgecolor='chocolate')\nax.add_patch(rect)\n\n# Draw a rectangle with a saddle brown border\nrect = plt.Rectangle((1, 0), 10, 10, fill=False, edgecolor='saddlebrown')\nax.add_patch(rect)\n\n# Draw a rectangle with a sienna border\nrect = plt.Rectangle((1, 0), 10, 10, fill=False, edgecolor='sienna')\nax.add_patch(rect)\n\n# Draw a rectangle with a peru border\nrect = plt.Rectangle((1, 0), 10, 10, fill=False, edgecolor='peru')\nax.add_patch(rect)\n\n# Draw a rectangle with a burlywood border\nrect = plt.Rectangle((1, 0), 10, 10, fill=False, edgecolor='burlywood')\nax.add_patch(rect)\n\n# Draw a rectangle with a beige border\nrect = plt.Rectangle((1, 0), 10, 10, fill=False, edgecolor='beige')\nax.add_patch(rect)\n\n# Draw a rectangle with a wheat border\nrect = plt.Rectangle((1, 0), 10, 10, fill=False, edgecolor='wheat')\nax.add_patch(rect)\n\n# Draw a rectangle with a sandy brown border\nrect = plt.Rectangle((1, 0), 10, 10, fill=False, edgecolor='sandybrown')\nax.add_patch(rect)\n\n# Draw a rectangle with a tan border\nrect = plt.Rectangle((1, 0), 10, 10, fill=False, edgecolor='tan')\nax.add_patch(rect)\n\n# Draw a rectangle with a chocolate border\nrect = plt.Rectangle((1, 0), 10, 10, fill=False, edgecolor='chocolate')\nax.add_patch(rect)\n\n# Draw a rectangle with a saddle brown border\nrect = plt.Rectangle((1, 0), 10, 10, fill=False, edgecolor='saddlebrown')\nax.add_patch(rect)\n\n# Draw a rectangle with a sienna border\nrect = plt.Rectangle((1, 0), 10, 10, fill=False, edgecolor='sienna')\nax.add_patch(rect)\n\n# Draw a rectangle with a peru border\nrect = plt.Rectangle((1, 0), 10, 10, fill=False, edgecolor='peru')\nax.add_patch(rect)\n\n# Draw a rectangle with a burlywood border\nrect = plt.Rectangle((1, 0), 10, 10, fill=False, edgecolor='burlywood')\nax.add_patch(rect)\n\n# Draw a rectangle with a beige border\nrect = plt.Rectangle((1, 0), 10, 10, fill=False, edgecolor='beige')\nax.add_patch(rect)\n\n# Draw a rectangle with a wheat border\nrect = plt.Rectangle((1, 0), 10, 10, fill=False, edgecolor='wheat')\nax.add_patch(rect)\n\n# Draw a rectangle with a sandy brown border\nrect = plt.Rectangle((1, 0), 10, 10, fill=False, edgecolor='sandybrown')\nax.add_patch(rect)\n\n# Draw a rectangle with a tan border\nrect = plt.Rectangle((1, 0), 10, 10, fill=False, edgecolor='tan')\nax.add_patch(rect)\n\n# Draw a rectangle with a chocolate border\nrect = plt.Rectangle((1, 0), 10, 10, fill=False, edgecolor='chocolate')\nax.add_patch(rect)\n\n# Draw a rectangle with a saddle brown border\nrect = plt.Rectangle((1, 0), 10, 10, fill=False, edgecolor='saddlebrown')\nax.add_patch(rect)\n\n# Draw a rectangle with a sienna border\nrect = plt.Rectangle((1, 0), 10, 10, fill=False, edgecolor='sienna')\nax.add_patch(rect)\n\n# Draw a rectangle with a peru border\nrect = plt.Rectangle((1, 0),"}
{"file": "dataset/ori_500/bar_80.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Set the title of the plot\nax.set_title('Taboo')\n\n# Set the x-axis label\nax.set_xlabel('Num of Constraint Words')\n\n# Set the y-axis label\nax.set_ylabel('Score')\n\n# Define the data for the plot\nx = [3, 4, 5, 6, 7, 8, 9, 10]\ny = [1.2, 1.5, 1.8, 2.1, 2.4, 2.7, 3.0, 3.3]\n\n# Plot the data\nax.plot(x, y)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_81.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nbrands = ['LLaMA', 'Vicuna', 'Alpaca', 'WizardLM']\nrewards = [46.3, 56.9, 53.8, 43.7]\nmisleading = [30.1, 34, 40, 20]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 4.0))\n\n# Plot the data\nax.bar(brands, rewards, color='blue')\nax.bar(brands, misleading, bottom=rewards, color='pink')\n\n# Set the title and labels\nax.set_title('Truthful: Misleading = 2:0')\nax.set_xlabel('Brands')\nax.set_ylabel('Misleading Recall')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_82.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the bar chart\nbrands = ['Toyota', 'Honda', 'Ford', 'Chevrolet', 'Dodge', 'BMW', 'Audi', 'Mercedes-Benz', 'Lexus', 'Jaguar']\nprobabilities = [25, 30, 18, 22, 24, 29, 27, 26, 21, 23]\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\nax.bar(brands, probabilities, color='blue')\n\n# Set the title and labels\nax.set_title('Probability of Improvement over VLM Image Encoder Baseline Returns')\nax.set_xlabel('Car Brands')\nax.set_ylabel('Probability of Improvement')\n\n# Rotate the x-axis labels for better visibility\nplt.xticks(rotation=45)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_83.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the first chart\nemotions = ['Disapproval', 'Joy', 'Relief', 'Gratitude', 'Annoyance', 'Nervousness', 'Pride', 'Sadness', 'Unboredom', 'Amusement']\nmetrics = [2.1, 3.0, 3.5, 3.5, 6.0, 6.0, 6.7, 7.0, 7.0, 7.6]\ncolors = ['red', 'orange', 'yellow', 'green', 'blue', 'indigo', 'violet', 'pink', 'brown', 'grey']\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(10.0, 4.0))\n\n# Plot the bar chart\nax.bar(emotions, metrics, color=colors)\n\n# Set the title and labels\nax.set_title('Emotion Metrics')\nax.set_xlabel('Emotions')\nax.set_ylabel('Frequency Metric 1 (%)')\n\n# Show the plot\nplt.show()\n\n# Data for the second chart\nmetrics2 = [7.1, 7.0, 6.5, 6.5, 5.5, 5.0, 5.0, 4.6, 4.6, 3.7, 3.0, 2.6]\n\n# Create a new figure and axis object\nfig, ax = plt.subplots(figsize=(10.0, 4.0))\n\n# Plot the bar chart\nax.bar(emotions, metrics2, color=colors)\n\n# Set the title and labels\nax.set_title('Emotion Metrics')\nax.set_xlabel('Emotions')\nax.set_ylabel('Frequency Metric 2 (%)')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_84.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Set the background color of the plot\nax.set_facecolor('lightgrey')\n\n# Set the title of the plot\nax.set_title('Top 3 Video Games by Player Rating')\n\n# Set the x-axis label\nax.set_xlabel('Player Rating')\n\n# Set the y-axis label\nax.set_ylabel('Game Title')\n\n# Set the tick labels for the x-axis\nax.set_xticks([0.25, 0.5, 0.75])\n\n# Set the tick labels for the y-axis\nax.set_yticks([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7])\n\n# Set the tick labels for the x-axis\nax.set_xticklabels(['Score at Time 0', 'Score at Time 20', 'Score at Time 40'])\n\n# Set the tick labels for the y-axis\nax.set_yticklabels(['Attack on Titan', 'Game of Thrones', 'The Count of Monte Cristo', 'Demi-Gods and Semi-Devils', 'Notre-Dame de Paris', 'The Count of Monte Cristo', 'Demi-Gods and Semi-Devils', 'Notre-Dame de Paris'])\n\n# Set the tick labels for the x-axis\nax.set_xticklabels(['0.0', '0.1', '0.2', '0.3', '0.4', '0.5', '0.6', '0.7'])\n\n# Set the tick labels for the y-axis\nax.set_yticklabels(['0.0', '0.1', '0.2', '0.3', '0.4', '0.5', '0.6', '0.7'])\n\n# Set the tick labels for the x-axis\nax.set_xticklabels(['0.0', '0.1', '0.2', '0.3', '0.4', '0.5', '0.6', '0.7'])\n\n# Set the tick labels for the y-axis\nax.set_yticklabels(['0.0', '0.1', '0.2', '0.3', '0.4', '0.5', '0.6', '0.7'])\n\n# Set the tick labels for the x-axis\nax.set_xticklabels(['0.0', '0.1', '0.2', '0.3', '0.4', '0.5', '0.6', '0.7'])\n\n# Set the tick labels for the y-axis\nax.set_yticklabels(['0.0', '0.1', '0.2', '0.3', '0.4', '0.5', '0.6', '0.7'])\n\n# Set the tick labels for the x-axis\nax.set_xticklabels(['0.0', '0.1', '0.2', '0.3', '0.4', '0.5', '0.6', '0.7'])\n\n# Set the tick labels for the y-axis\nax.set_yticklabels(['0.0', '0.1', '0.2', '0.3', '0.4', '0.5', '0.6', '0.7'])\n\n# Set the tick labels for the x-axis\nax.set_xticklabels(['0.0', '0.1', '0.2', '0.3', '0.4', '0.5', '0.6', '0.7'])\n\n# Set the tick labels for the y-axis\nax.set_yticklabels(['0.0', '0.1', '0.2', '0.3', '0.4', '0.5', '0.6', '0.7'])\n\n# Set the tick labels for the x-axis\nax.set_xticklabels(['0.0', '0.1', '0.2', '0.3', '0.4', '0.5', '0.6', '0.7'])\n\n# Set the tick labels for the y-axis\nax.set_yticklabels(['0.0', '0.1', '0.2', '0.3', '0.4', '0.5', '0.6', '0.7'])\n\n# Set the tick labels for the x-axis\nax.set_xticklabels(['0.0', '0.1', '0.2', '0.3', '0.4', '0.5', '0.6', '0.7'])\n\n# Set the tick labels for the y-axis\nax.set_yticklabels(['0.0', '0.1', '0.2', '0.3', '0.4', '0.5', '0.6', '0.7'])\n\n# Set the tick labels for the x-axis\nax.set_xticklabels(['0.0', '0.1', '0.2', '0.3', '0.4', '0.5', '0.6', '0.7'])\n\n# Set the tick labels for the y-axis\nax.set_yticklabels(['0.0', '0.1', '0.2', '0.3', '0.4', '0.5', '0.6', '0.7'])\n\n# Set the tick labels for the x-axis\nax.set_xticklabels(['0.0', '0.1', '0.2', '0.3', '0.4', '0.5', '0.6', '0.7'])\n\n# Set the tick labels for the y-axis\nax.set_yticklabels(['0.0', '0.1', '0.2', '0.3', '0.4', '0.5', '0.6', '0.7'])\n\n# Set the tick labels for the x-axis\nax.set_xticklabels(['0.0', '0.1', '0.2', '0.3', '0.4', '0.5', '0.6', '0.7'])\n\n# Set the tick labels for the y-axis\nax.set_yticklabels(['0.0', '0.1', '0.2', '0.3', '0.4', '0.5', '0.6', '0.7'])\n\n# Set the tick labels for the x-axis\nax.set_xticklabels(['0.0', '0.1', '0.2', '0.3', '0.4', '0.5', '0.6', '0.7'])\n\n# Set the tick labels for the y-axis\nax.set_yticklabels(['0.0', '0.1', '0.2', '0.3', '0.4', '0.5', '0.6', '0.7'])\n\n# Set the tick labels for the x-axis\nax.set_xticklabels(['0.0', '0.1', '0.2', '0.3', '0.4', '0.5', '0.6', '0.7'])\n\n# Set the tick labels for the y-axis\nax.set_yticklabels(['0.0', '0.1', '0.2', '0.3', '0.4', '0.5', '0.6', '0.7'])\n\n# Set the tick labels for the x-axis\nax.set_xticklabels(['0.0', '0.1', '0.2', '0.3', '0.4', '0.5', '0.6', '0.7'])\n\n# Set the tick labels for the y-axis\nax.set_yticklabels(['0.0', '0.1', '0.2', '0.3', '0.4', '0.5', '0.6', '0.7'])\n\n# Set the tick labels for the x-axis\nax.set_xticklabels(['0.0', '0.1', '0.2', '0.3', '0.4', '0.5', '0.6', '0.7'])\n\n# Set the tick labels for the y-axis\nax.set_yticklabels(['0.0', '0.1', '0.2', '0.3', '0.4', '0.5', '0.6', '0.7'])\n\n# Set the tick labels for the x-axis\nax.set_xticklabels(['0.0', '0.1', '0.2', '0.3', '0.4', '0.5', '0.6', '0.7'])\n\n# Set the tick labels for the y-axis\nax.set_yticklabels(['0.0', '0.1', '0.2', '0.3', '0.4', '0.5', '0.6', '0.7'])\n\n# Set the tick labels for the x-axis\nax.set_xticklabels(['0.0', '0.1', '0.2', '0.3', '0.4', '0.5', '0.6', '0.7'])\n\n# Set the tick labels for the y-axis\nax.set_yticklabels(['0.0', '0.1', '0.2', '0.3', '0.4', '0.5', '0.6', '0.7'])\n\n# Set the tick labels for the x-axis\nax.set_xticklabels(['0.0', '0.1', '0.2', '0.3', '0.4', '0.5', '0.6', '0.7'])\n\n# Set the tick labels for the y-axis\nax.set_yticklabels(['0.0', '0.1', '0.2', '0.3', '0.4', '0.5', '0.6', '0.7'])\n\n# Set the tick labels for the x-axis\nax.set_xticklabels(['0.0', '0.1', '0.2', '0.3', '0.4', '0.5', '0.6', '0.7'])\n\n# Set the tick labels for the y-axis\nax.set_yticklabels(['0.0', '0.1', '0.2', '0.3', '0.4', '0.5', '0.6', '0.7'])\n\n# Set the tick labels for the x-axis\nax.set_xticklabels(['0.0', '0.1', '0.2', '0.3', '0.4', '0.5', '0.6', '0.7'])\n\n# Set the tick labels for the y-axis\nax.set_yticklabels(['0.0', '0.1', '0.2', '0.3', '0.4', '0.5', '0.6', '0.7'])\n\n# Set the tick labels for the x-axis\nax.set_xticklabels(['0.0', '0.1', '0.2', '0.3', '0.4', '0.5', '0.6', '0.7'])\n\n# Set the tick labels for the y-axis\nax.set_yticklabels(['0.0', '0.1', '0.2', '0.3', '0.4', '0.5', '0.6', '0.7'])\n\n# Set the tick labels for the x-axis\nax.set_xticklabels(['0.0', '0.1', '0.2', '0.3', '0.4', '0.5', '0.6', '0.7'])\n\n# Set the tick labels for the y-axis\nax.set_yticklabels(['0.0', '0.1', '0.2', '0.3', '0.4', '0.5', '0.6', '0.7'])\n\n# Set the tick labels for the x-axis\nax.set_xticklabels(['0.0', '0.1', '0.2', '0.3', '0.4', '0.5', '0.6', '0.7'])\n\n# Set the tick labels for the y-axis\nax.set_yticklabels(['0.0', '0.1', '0.2', '0.3', '0.4', '0.5', '0.6', '0.7'])\n\n# Set the tick labels for the x-axis\nax.set_xticklabels(['0.0', '0.1', '0.2', '0.3', '0.4', '0.5', '0.6', '0.7'])\n\n# Set the tick labels for the y-axis\nax.set_yticklabels(['0.0', '0.1', '0.2', '0.3', '0.4', '0.5', '0.6', '0.7'])\n\n# Set the tick labels for the x-axis\nax.set_xticklabels(['0.0', '0.1', '0.2', '0.3', '0.4', '0.5', '0.6', '0.7'])\n\n# Set the tick labels for the y-axis\nax.set_yticklabels(['0.0', '0.1', '0.2', '0.3', '0.4', '0.5', '0.6', '0.7'])\n\n# Set the tick labels for the x-axis\nax.set_xticklabels(['0.0', '0.1', '0.2', '0.3', '0.4', '0.5', '0.6', '0.7'])\n\n# Set the tick labels for the y-axis\nax.set_yticklabels(['0.0', '0.1', '0.2', '0.3', '0.4', '0.5', '0.6', '0.7'])\n\n# Set the tick labels for the x-axis\nax.set_xticklabels(['0.0', '0.1', '0.2', '0.3', '0.4', '0.5', '0.6', '0.7'])\n\n# Set the tick labels for the y-axis\nax.set_yticklabels(['0.0', '0.1', '0.2', '0.3', '0.4', '0.5', '0.6', '0.7'])\n\n# Set the tick labels for the x-axis\nax.set_xticklabels(['0.0', '0.1', '0.2', '0.3', '0.4', '0.5', '0.6', '0.7'])\n\n# Set the tick labels for the y-axis\nax.set_yticklabels(['0.0', '0.1', '0.2', '0.3', '0.4', '0.5', '0.6', '0.7'])\n\n# Set the tick labels for the x-axis\nax.set_xticklabels(['0.0', '0.1', '0.2', '0.3', '0.4', '0.5', '0.6', '0.7'])\n\n# Set the tick labels for the y-axis\nax.set_yticklabels(['0.0', '0.1', '0.2', '0.3', '0.4', '0.5', '0.6', '0.7'])\n\n# Set the tick labels for the x-axis\nax.set_xticklabels(['0.0', '0.1', '0.2', '0.3', '0.4', '0.5', '0.6', '0.7'])\n\n# Set the tick labels for the y-axis\nax.set_yticklabels(['0.0', '0.1', '0.2', '0.3', '0.4', '0.5', '0.6', '0.7'])\n\n# Set the tick labels for the x-axis\nax.set_xticklabels(['0.0', '0.1', '0.2', '0.3', '0.4', '0.5', '0.6', '0.7'])\n\n# Set the tick labels for the y-axis\nax.set_yticklabels(['0.0', '0.1', '0.2', '0.3', '0.4', '0.5', '0.6', '0.7'])\n\n# Set the tick labels for the x-axis\nax.set_xticklabels(['0.0', '0.1', '0.2', '0.3', '0.4', '0.5', '0.6', '0.7'])\n\n# Set the tick labels for the y-axis\nax.set_yticklabels(['0.0', '0.1', '0.2', '0.3', '0.4', '0.5', '0.6', '0.7'])\n\n# Set the tick labels for the x-axis\nax.set_xticklabels(['0.0', '0.1', '0.2', '0.3', '0.4', '0.5', '0.6', '0.7'])\n\n# Set the tick labels for the y-axis\nax.set_yticklabels(['0.0', '0.1', '0.2', '0.3', '0.4', '0.5', '0.6', '0.7'])\n\n# Set the tick labels for the x-axis\nax.set_xticklabels(['0.0', '0.1', '0.2', '0.3', '0.4', '0.5', '0.6', '0.7'])\n\n# Set the tick labels for the y-axis\nax.set_yticklabels(['0.0', '0.1', '0.2', '0.3', '0.4', '0.5', '0.6', '0.7'])\n\n# Set the tick labels for the x-axis\nax.set_xticklabels(['0.0', '0.1', '0.2', '0.3', '0.4', '0.5', '0.6', '0.7'])\n\n# Set the tick labels for the y-axis\nax.set_yticklabels(['0.0', '0.1', '0.2', '0.3', '0.4', '0.5', '0.6', '0.7'])\n\n# Set the tick labels for the x-axis\nax.set_xticklabels(['0.0', '0.1', '0.2', '0.3', '0.4', '0.5', '0.6', '0.7'])\n\n# Set the tick"}
{"file": "dataset/ori_500/bar_85.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Set the title of the graph\nax.set_title('Energy Consumption and Production')\n\n# Set the x-axis label\nax.set_xlabel('Year')\n\n# Set the y-axis label\nax.set_ylabel('Energy Consumption (TWh)')\n\n# Set the x-axis limits\nax.set_xlim(0, 2000)\n\n# Set the y-axis limits\nax.set_ylim(0, 1600)\n\n# Set the x-axis ticks\nax.set_xticks([0, 500, 1000, 1500, 2000])\n\n# Set the y-axis ticks\nax.set_yticks([0, 400, 800, 1200, 1600])\n\n# Set the grid lines\nax.grid(True)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the width of the border\nax.spines['bottom'].set_linewidth(1)\nax.spines['top'].set_linewidth(1)\nax.spines['right'].set_linewidth(1)\nax.spines['left'].set_linewidth(1)\n\n# Set the color of the text\nax.xaxis.label.set_color('black')\nax.yaxis.label.set_color('black')\nax.title.set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', colors='black')\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='x', colors='black')\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the width of the border\nax.spines['bottom'].set_linewidth(1)\nax.spines['top'].set_linewidth(1)\nax.spines['right'].set_linewidth(1)\nax.spines['left'].set_linewidth(1)\n\n# Set the color of the text\nax.xaxis.label.set_color('black')\nax.yaxis.label.set_color('black')\nax.title.set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', colors='black')\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='x', colors='black')\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the width of the border\nax.spines['bottom'].set_linewidth(1)\nax.spines['top'].set_linewidth(1)\nax.spines['right'].set_linewidth(1)\nax.spines['left'].set_linewidth(1)\n\n# Set the color of the text\nax.xaxis.label.set_color('black')\nax.yaxis.label.set_color('black')\nax.title.set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', colors='black')\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='x', colors='black')\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the width of the border\nax.spines['bottom'].set_linewidth(1)\nax.spines['top'].set_linewidth(1)\nax.spines['right'].set_linewidth(1)\nax.spines['left'].set_linewidth(1)\n\n# Set the color of the text\nax.xaxis.label.set_color('black')\nax.yaxis.label.set_color('black')\nax.title.set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', colors='black')\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='x', colors='black')\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the width of the border\nax.spines['bottom'].set_linewidth(1)\nax.spines['top'].set_linewidth(1)\nax.spines['right'].set_linewidth(1)\nax.spines['left'].set_linewidth(1)\n\n# Set the color of the text\nax.xaxis.label.set_color('black')\nax.yaxis.label.set_color('black')\nax.title.set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', colors='black')\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='x', colors='black')\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the width of the border\nax.spines['bottom'].set_linewidth(1)\nax.spines['top'].set_linewidth(1)\nax.spines['right'].set_linewidth(1)\nax.spines['left'].set_linewidth(1)\n\n# Set the color of the text\nax.xaxis.label.set_color('black')\nax.yaxis.label.set_color('black')\nax.title.set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', colors='black')\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='x', colors='black')\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the width of the border\nax.spines['bottom'].set_linewidth(1)\nax.spines['top'].set_linewidth(1)\nax.spines['right'].set_linewidth(1)\nax.spines['left'].set_linewidth(1)\n\n# Set the color of the text\nax.xaxis.label.set_color('black')\nax.yaxis.label.set_color('black')\nax.title.set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', colors='black')\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='x', colors='black')\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the width of the border\nax.spines['bottom'].set_linewidth(1)\nax.spines['top'].set_linewidth(1)\nax.spines['right'].set_linewidth(1)\nax.spines['left'].set_linewidth(1)\n\n# Set the color of the text\nax.xaxis.label.set_color('black')\nax.yaxis.label.set_color('black')\nax.title.set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', colors='black')\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='x', colors='black')\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the width of the border\nax.spines['bottom'].set_linewidth(1)\nax.spines['top'].set_linewidth(1)\nax.spines['right'].set_linewidth(1)\nax.spines['left'].set_linewidth(1)\n\n# Set the color of the text\nax.xaxis.label.set_color('black')\nax.yaxis.label.set_color('black')\nax.title.set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', colors='black')\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='x', colors='black')\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the width of the border\nax.spines['bottom'].set_linewidth(1)\nax.spines['top'].set_linewidth(1)\nax.spines['right'].set_linewidth(1)\nax.spines['left'].set_linewidth(1)\n\n# Set the color of the text\nax.xaxis.label.set_color('black')\nax.yaxis.label.set_color('black')\nax.title.set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', colors='black')\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='x', colors='black')\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the width of the border\nax.spines['bottom'].set_linewidth(1)\nax.spines['top'].set_linewidth(1)\nax.spines['right'].set_linewidth(1)\nax.spines['left'].set_linewidth(1)\n\n# Set the color of the text\nax.xaxis.label.set_color('black')\nax.yaxis.label.set_color('black')\nax.title.set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', colors='black')\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='x', colors='black')\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the width of the border\nax.spines['bottom'].set_linewidth(1)\nax.spines['top'].set_linewidth(1)\nax.spines['right'].set_linewidth(1)\nax.spines['left'].set_linewidth(1)\n\n# Set the color of the text\nax.xaxis.label.set_color('black')\nax.yaxis.label.set_color('black')\nax.title.set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', colors='black')\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='x', colors='black')\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the width of the border\nax.spines['bottom'].set_linewidth(1)\nax.spines['top'].set_linewidth(1)\nax.spines['right'].set_linewidth(1)\nax.spines['left'].set_linewidth(1)\n\n# Set the color of the text\nax.xaxis.label.set_color('black')\nax.yaxis.label.set_color('black')\nax.title.set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', colors='black')\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='x', colors='black')\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the width of the border\nax.spines['bottom'].set_linewidth(1)\nax.spines['top'].set_linewidth(1)\nax.spines['right'].set_linewidth(1)\nax.spines['left'].set_linewidth(1)\n\n# Set the color of the text\nax.xaxis.label.set_color('black')\nax.yaxis.label.set_color('black')\nax.title.set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', colors='black')\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='x', colors='black')\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the width of the border\nax.spines['bottom'].set_linewidth(1)\nax.spines['top'].set_linewidth(1)\nax.spines['right'].set_linewidth(1)\nax.spines['left'].set_linewidth(1)\n\n# Set the color of the text\nax.xaxis.label.set_color('black')\nax.yaxis.label.set_color('black')\nax.title.set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', colors='black')\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='x', colors='black')\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the width of the border\nax.spines['bottom'].set_linewidth(1)\nax.spines['top'].set_linewidth(1)\nax.spines['right'].set_linewidth(1)\nax.spines['left'].set_linewidth(1)\n\n# Set the color of the text\nax.xaxis.label.set_color('black')\nax.yaxis.label.set_color('black')\nax.title.set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', colors='black')\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='x', colors='black')\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth="}
{"file": "dataset/ori_500/bar_86.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\nsynthetic_data = [10, 10, 7, 24, 31, 8]\nhuman_authored_data = [9, 16, 5, 11, 16, 16]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Plot the data\nax.bar(range(len(synthetic_data)), synthetic_data, color='blue', label='Synthetic Data')\nax.bar(range(len(human_authored_data)), human_authored_data, color='red', label='Human-Authored Data')\n\n# Set the title and labels\nax.set_title('Comparison of Synthetic and Human-Authored Data')\nax.set_xlabel('Data Type')\nax.set_ylabel('Percentage')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_87.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the plots\nbeauty_data = [-5, -5, -5, -5, -5, -5, -5, -5, -5, -5]\nyelp_data = [-7, -6, -5, -4, -3, -2, -1, 0, 1, 2]\nmore_data = [-10, -9, -8, -7, -6, -5, -4, -3, -2, -1]\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Plot the data\nax.plot(beauty_data, label='Beauty')\nax.plot(yelp_data, label='Yelp')\nax.plot(more_data, label='More')\n\n# Add a legend\nax.legend()\n\n# Set the x-axis limits\nax.set_xlim(-10, 10)\n\n# Set the y-axis limits\nax.set_ylim(-10, 10)\n\n# Set the x-axis ticks\nax.set_xticks(range(-10, 11, 2))\n\n# Set the y-axis ticks\nax.set_yticks(range(-10, 11, 2))\n\n# Set the x-axis labels\nax.set_xlabel('Time (in hours)')\n\n# Set the y-axis labels\nax.set_ylabel('Sentiment Score')\n\n# Set the title of the plot\nax.set_title('Sentiment Analysis of Beauty, Yelp, and More')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_88.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Set the title of the plot\nax.set_title('Scores by group and constraint word count')\n\n# Create a bar chart with the data\nax.bar(['3 Constraint Words', '5 Constraint Words', '7 Constraint Words', '10 Constraint Words'], [3.2, 3.3, 3.3, 3.2], color='pink')\nax.bar(['3 Constraint Words', '5 Constraint Words', '7 Constraint Words', '10 Constraint Words'], [3.2, 3.3, 3.3, 3.2], color='lightblue')\n\n# Set the x-axis label\nax.set_xlabel('Constraint Words')\n\n# Set the y-axis label\nax.set_ylabel('Score')\n\n# Set the x-axis tick labels\nax.set_xticks([0, 1, 2, 3])\nax.set_xticklabels(['3 Constraint Words', '5 Constraint Words', '7 Constraint Words', '10 Constraint Words'])\n\n# Set the y-axis tick labels\nax.set_yticks([-3.5, -3, -2.5, -2, -1.5, -1, 0, 0.5, 1, 1.5, 2, 2.5, 3])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_89.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Set the title of the plot\nax.set_title('Model Performance')\n\n# Set the x-axis label\nax.set_xlabel('Top-10 super families in training dataset')\n\n# Set the y-axis label\nax.set_ylabel('Model accuracy')\n\n# Set the x-ticks\nax.set_xticks([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n\n# Set the x-tick labels\nax.set_xticklabels(['1', '2', '3', '4', '5', '6', '7', '8', '9', '10'])\n\n# Set the y-ticks\nax.set_yticks([0.2, 0.4, 0.6, 0.8, 1.0])\n\n# Set the y-tick labels\nax.set_yticklabels(['0.2', '0.4', '0.6', '0.8', '1.0'])\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('red')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('blue')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='green')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='purple')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('red')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('blue')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='green')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='purple')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('red')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('blue')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='green')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='purple')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('red')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('blue')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='green')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='purple')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('red')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('blue')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='green')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='purple')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('red')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('blue')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='green')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='purple')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('red')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('blue')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='green')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='purple')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('red')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('blue')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='green')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='purple')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('red')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('blue')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='green')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='purple')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('red')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('blue')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='green')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='purple')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('red')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('blue')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='green')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='purple')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('red')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('blue')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='green')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='purple')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('red')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('blue')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='green')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='purple')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('red')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('blue')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='green')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='purple')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('red')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('blue')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='green')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='purple')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('red')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('blue')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='green')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='purple')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('red')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('blue')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='green')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='purple')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('red')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('blue')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='green')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='purple')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('red')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('blue')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='green')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='purple')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('red')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('blue')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='green')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='purple')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('red')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('blue')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='green')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='purple')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('red')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('blue')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='green')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='purple')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('red')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('blue')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='green')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='purple')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('red')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('blue')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='green')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='purple')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('red')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('blue')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='green')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='purple')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('red')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('blue')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='green')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='purple')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('red')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('blue')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='green')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='purple')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('red')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('blue')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='green')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='purple')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('red')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('blue')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='green')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='purple"}
{"file": "dataset/ori_500/bar_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(9.0, 6.0))\n\n# Set the title of the plot\nax.set_title('GENIA')\n\n# Set the x-axis label\nax.set_xlabel('Error Correction Rate (%)')\n\n# Set the y-axis label\nax.set_ylabel('Time (ms)')\n\n# Create a bar chart\nax.bar(['Type', 'Span', 'T&S', 'Spurious', 'Total'], [50, 40, 30, 20, 10], color='blue')\n\n# Create a second bar chart\nax.bar(['Type', 'Span', 'T&S', 'Spurious', 'Total'], [70, 60, 50, 40, 30], color='green')\n\n# Create a third bar chart\nax.bar(['Type', 'Span', 'T&S', 'Spurious', 'Total'], [80, 70, 60, 50, 40], color='red')\n\n# Create a fourth bar chart\nax.bar(['Type', 'Span', 'T&S', 'Spurious', 'Total'], [90, 80, 70, 60, 50], color='yellow')\n\n# Create a fifth bar chart\nax.bar(['Type', 'Span', 'T&S', 'Spurious', 'Total'], [100, 90, 80, 70, 60], color='pink')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_90.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nmodels = ['GPT4V', 'OSCAR', 'LLaMA', 'BLIP2', 'BLIP1', 'Video-LLaMA', 'Lavila']\nscores_a = [82.5, 73.93, 31.79, 46.4, 4.64, 0.71, 0.0]\nscores_b = [20, 25, 30, 35, 40, 45, 50]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(12, 8))\n\n# Plot the scores\nax.bar(models, scores_a, color='red')\nax.bar(models, scores_b, bottom=scores_a, color='blue')\n\n# Set the title and labels\nax.set_title('Human Study')\nax.set_xlabel('Model')\nax.set_ylabel('Score A (%)')\n\n# Add a horizontal line for each model\nfor i, model in enumerate(models):\n    ax.axhline(y=scores_a[i], color='black', linestyle='-')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_91.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nparties = ['Democratic', 'Mixed', 'Republican']\nscores = [85, 80, 75]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Plot the data\nax.barh(parties, scores, color='orange')\n\n# Set the title and labels\nax.set_title('Party Scores')\nax.set_xlabel('Score')\nax.set_ylabel('Party')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_92.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\nax.set_title('Resonance Preference Plot for rich-context')\n\n# Data for the first plot\nx = [0, 100, 200, 300, 400, 500, 600, 700, 800]\ny = [100, 200, 300, 400, 500, 600, 700, 800, 900]\nax.plot(x, y, 'b-')\nax.fill_between(x, y, color='blue', alpha=0.2)\n\n# Data for the second plot\nx = [0, 100, 200, 300, 400, 500, 600, 700, 800]\ny = [100, 200, 300, 400, 500, 600, 700, 800, 900]\nax.plot(x, y, 'g-')\nax.fill_between(x, y, color='green', alpha=0.2)\n\n# Data for the third plot\nx = [0, 100, 200, 300, 400, 500, 600, 700, 800]\ny = [100, 200, 300, 400, 500, 600, 700, 800, 900]\nax.plot(x, y, 'r-')\nax.fill_between(x, y, color='red', alpha=0.2)\n\n# Data for the fourth plot\nx = [0, 100, 200, 300, 400, 500, 600, 700, 800]\ny = [100, 200, 300, 400, 500, 600, 700, 800, 900]\nax.plot(x, y, 'c-')\nax.fill_between(x, y, color='cyan', alpha=0.2)\n\n# Data for the fifth plot\nx = [0, 100, 200, 300, 400, 500, 600, 700, 800]\ny = [100, 200, 300, 400, 500, 600, 700, 800, 900]\nax.plot(x, y, 'm-')\nax.fill_between(x, y, color='magenta', alpha=0.2)\n\n# Data for the sixth plot\nx = [0, 100, 200, 300, 400, 500, 600, 700, 800]\ny = [100, 200, 300, 400, 500, 600, 700, 800, 900]\nax.plot(x, y, 'y-')\nax.fill_between(x, y, color='yellow', alpha=0.2)\n\n# Data for the seventh plot\nx = [0, 100, 200, 300, 400, 500, 600, 700, 800]\ny = [100, 200, 300, 400, 500, 600, 700, 800, 900]\nax.plot(x, y, 'k-')\nax.fill_between(x, y, color='black', alpha=0.2)\n\n# Data for the eighth plot\nx = [0, 100, 200, 300, 400, 500, 600, 700, 800]\ny = [100, 200, 300, 400, 500, 600, 700, 800, 900]\nax.plot(x, y, 'w-')\nax.fill_between(x, y, color='white', alpha=0.2)\n\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_93.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for Effort\neffort_data = [20.4, 29.6, 20.4, 14.3, 16.7, 20.4, 9.3]\neffort_labels = ['Very Low', 'Low', 'Neutral', 'High', 'Very High']\n\n# Data for Brainwave\nbrainwave_data = [23.8, 20.4, 14.3, 16.7, 20.4, 38.1, 7.1]\nbrainwave_labels = ['Very Low', 'Low', 'Neutral', 'High', 'Very High']\n\nfig, axs = plt.subplots(2, 1, figsize=(6, 3))\n\n# Plot Effort\naxs[0].bar(effort_labels, effort_data, color='red')\naxs[0].set_title('Effort')\n\n# Plot Brainwave\naxs[1].bar(brainwave_labels, brainwave_data, color='green')\naxs[1].set_title('Brainwave')\n\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_94.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Set the title of the plot\nax.set_title('Stock Market Analysis')\n\n# Set the x-axis label\nax.set_xlabel('Time')\n\n# Set the y-axis label\nax.set_ylabel('Rate of Gain Change[%]')\n\n# Create a bar chart\nbars = ax.bar(range(10), [50, 40, 30, 20, 10, 0, -10, -20, -30, -40], color='blue')\n\n# Add labels to the bars\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 2), ha='center', va='bottom')\n\n# Create a scatter plot\nscatters = ax.scatter(range(10), [50, 40, 30, 20, 10, 0, -10, -20, -30, -40], color='red')\n\n# Add labels to the scatter points\nfor scatter in scatters:\n    yval = scatter.get_y()\n    ax.text(scatter.get_x(), yval, round(yval, 2), ha='center', va='bottom')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_95.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nbrands = ['Bactrian-X EN', 'Lima-X DE', 'Bactrian-X FR', 'Lima-X IT', 'Bactrian-X ES']\nperformance = [3.5, 2.3, 4.4, 1.3, -0.7]\nimprovement = [-1.0, 0.3, 3.4, -3.3, -2.7]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Plot the data\nax.plot(performance, label='Performance')\nax.plot(improvement, label='Improvement')\n\n# Set the title and labels\nax.set_title('Model Performance Improvement by Language')\nax.set_xlabel('Language')\nax.set_ylabel('Performance [mW]')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_96.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Set the title of the plot\nax.set_title('Truthful: Misleading = 2:0')\n\n# Create a bar chart with the data\nax.bar(['Random', 'Ours', 'SOTA'], [66.3, 61.9, 53.8], color='blue')\nax.bar(['Random', 'Ours', 'SOTA'], [10.1, 13.6, 13.7], color='red')\n\n# Set the y-axis limits\nax.set_ylim(-80, 80)\n\n# Add a horizontal line at y=0\nax.axhline(0, color='black', linewidth=0.5)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_97.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Set the title of the plot\nax.set_title('Human Labeling and Agreement Bias Checking 1')\n\n# Create a bar chart with the data\nax.bar(range(1, 7), [55, 45, 35, 25, 15, 5], color='pink')\n\n# Set the x-axis labels\nax.set_xticks(range(1, 7))\nax.set_xticklabels(['1', '2', '3', '4', '5', '6'])\n\n# Set the y-axis label\nax.set_ylabel('Scores')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_98.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nmodels = ['Model A', 'Model B', 'Model C', 'Model D', 'Model E', 'Model F', 'Model G', 'Model H', 'Model I']\nscores = [54.9, 71.5, 79.2, 60.3, 54.5, 56.8, 92.6, 89.2, 83.3]\nsearch_methods = ['Contrastive Search', 'Beam Search']\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot the scores\nax.bar(models, scores, color='darkgreen')\n\n# Add search methods as a legend\nfor i, method in enumerate(search_methods):\n    ax.text(i, 100, method, rotation=90, verticalalignment='center', horizontalalignment='center')\n\n# Set the title\nax.set_title('Performance Comparison by Model')\n\n# Set the x-axis label\nax.set_xlabel('Models')\n\n# Set the y-axis label\nax.set_ylabel('Scores')\n\n# Set the y-axis limits\nax.set_ylim(0, 100)\n\n# Set the x-axis limits\nax.set_xlim(-1, len(models))\n\n# Set the grid\nax.grid(True)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_99.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the first graph\nx = ['Traffic Flow', 'Accident Rate', 'Public Transport Usage', 'Road Conditions', 'Public Satisfaction']\ny = [150.0, 180.0, 75.0, 90.0, 80.0]\ncolors = ['orange', 'orange', 'orange', 'orange', 'orange']\n\n# Data for the second graph\nx2 = ['Traffic Flow', 'Accident Rate', 'Public Transport Usage', 'Road Conditions', 'Public Satisfaction']\ny2 = [2.5, 2.0, 1.5, 2.0, 1.0]\ncolors2 = ['blue', 'blue', 'blue', 'blue', 'blue']\n\n# Data for the third graph\nx3 = ['Traffic Flow', 'Accident Rate', 'Public Transport Usage', 'Road Conditions', 'Public Satisfaction']\ny3 = [60.0, 55.0, 70.0, 65.0, 72.0]\ncolors3 = ['lightgreen', 'lightgreen', 'lightgreen', 'lightgreen', 'lightgreen']\n\n# Data for the fourth graph\nx4 = ['Traffic Flow', 'Accident Rate', 'Public Transport Usage', 'Road Conditions', 'Public Satisfaction']\ny4 = [80.0, 75.0, 90.0, 85.0, 88.0]\ncolors4 = ['yellow', 'yellow', 'yellow', 'yellow', 'yellow']\n\nfig, axs = plt.subplots(2, 2, figsize=(10.0, 8.0))\n\naxs[0, 0].bar(x, y, color=colors)\naxs[0, 0].set_title('Dataset 1')\naxs[0, 0].set_xlabel('Metrics')\naxs[0, 0].set_ylabel('Values')\n\naxs[0, 1].bar(x2, y2, color=colors2)\naxs[0, 1].set_title('Dataset 2')\naxs[0, 1].set_xlabel('Metrics')\naxs[0, 1].set_ylabel('Values')\n\naxs[1, 0].bar(x3, y3, color=colors3)\naxs[1, 0].set_title('Dataset 3')\naxs[1, 0].set_xlabel('Metrics')\naxs[1, 0].set_ylabel('Values')\n\naxs[1, 1].bar(x4, y4, color=colors4)\naxs[1, 1].set_title('Dataset 4')\naxs[1, 1].set_xlabel('Metrics')\naxs[1, 1].set_ylabel('Values')\n\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/box_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\nax.set_title('Dominance')\nax.set_xlabel('SAM Rating')\nax.set_ylabel('Color')\n\n# Define the data for each color\ncolors = ['neutral', 'yellow high', 'green high', 'blue high', 'red high']\nsam_ratings = [5, 6, 7, 8, 9]\ndominance = [0.2, 0.3, 0.4, 0.5, 0.6]\n\n# Create a bar chart for each color\nfor i, color in enumerate(colors):\n    ax.bar(color, dominance[i], width=0.5, bottom=sam_ratings[i])\n\n# Set the x-axis limits\nax.set_xlim(0, len(colors))\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(9.0, 5.0))\n\n# Set the title of the plot\nax.set_title('Daily Activity Durations')\n\n# Create a bar chart for gaming duration\ngaming_duration = [20, 30, 40, 50, 60]\ngaming_duration_labels = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday']\nax.bar(gaming_duration_labels, gaming_duration, color='blue')\n\n# Create a bar chart for exercise duration\nexercise_duration = [10, 20, 30, 40, 50]\nexercise_duration_labels = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday']\nax.bar(exercise_duration_labels, exercise_duration, color='green')\n\n# Create a bar chart for reading duration\nreading_duration = [15, 25, 35, 45, 55]\nreading_duration_labels = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday']\nax.bar(reading_duration_labels, reading_duration, color='yellow')\n\n# Create a bar chart for music playtime\nmusic_playtime = [5, 15, 25, 35, 45]\nmusic_playtime_labels = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday']\nax.bar(music_playtime_labels, music_playtime, color='purple')\n\n# Set the x-axis label\nax.set_xlabel('Day of the Week')\n\n# Set the y-axis label\nax.set_ylabel('Duration (minutes)')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Set the title of the plot\nax.set_title('Llama-70b (T2TT) vs Llama-70b (S2TT)')\n\n# Set the x-axis label\nax.set_xlabel('Llama-70b (T2TT)')\n\n# Set the y-axis label\nax.set_ylabel('Llama-70b (S2TT)')\n\n# Set the x-axis limits\nax.set_xlim(15, 25)\n\n# Set the y-axis limits\nax.set_ylim(15, 25)\n\n# Set the x-axis ticks\nax.set_xticks([15, 20, 25])\n\n# Set the y-axis ticks\nax.set_yticks([15, 20, 25])\n\n# Set the x-axis tick labels\nax.set_xticklabels(['15', '20', '25'])\n\n# Set the y-axis tick labels\nax.set_yticklabels(['15', '20', '25'])\n\n# Set the x-axis grid lines\nax.grid(True)\n\n# Set the y-axis grid lines\nax.grid(True)\n\n# Set the x-axis line color\nax.spines['left'].set_color('orange')\n\n# Set the y-axis line color\nax.spines['bottom'].set_color('orange')\n\n# Set the x-axis line width\nax.spines['left'].set_linewidth(2)\n\n# Set the y-axis line width\nax.spines['bottom'].set_linewidth(2)\n\n# Set the x-axis line style\nax.spines['left'].set_linestyle('-')\n\n# Set the y-axis line style\nax.spines['bottom'].set_linestyle('-')\n\n# Set the x-axis line capstyle\nax.spines['left'].set_capstyle('round')\n\n# Set the y-axis line capstyle\nax.spines['bottom'].set_capstyle('round')\n\n# Set the x-axis line joinstyle\nax.spines['left'].set_joinstyle('round')\n\n# Set the y-axis line joinstyle\nax.spines['bottom'].set_joinstyle('round')\n\n# Set the x-axis line dashcap\nax.spines['left'].set_dashcapstyle('round')\n\n# Set the y-axis line dashcap\nax.spines['bottom'].set_dashcapstyle('round')\n\n# Set the x-axis line dashjoin\nax.spines['left'].set_dashjoinstyle('round')\n\n# Set the y-axis line dashjoin\nax.spines['bottom'].set_dashjoinstyle('round')\n\n# Set the x-axis line dashoffset\nax.spines['left'].set_dashoffset(0.0)\n\n# Set the y-axis line dashoffset\nax.spines['bottom'].set_dashoffset(0.0)\n\n# Set the x-axis line dashes\nax.spines['left'].set_dashes((1, 1))\n\n# Set the y-axis line dashes\nax.spines['bottom'].set_dashes((1, 1))\n\n# Set the x-axis line solidcap\nax.spines['left'].set_solidcapstyle('round')\n\n# Set the y-axis line solidcap\nax.spines['bottom'].set_solidcapstyle('round')\n\n# Set the x-axis line solidjoin\nax.spines['left'].set_solidjoinstyle('round')\n\n# Set the y-axis line solidjoin\nax.spines['bottom'].set_solidjoinstyle('round')\n\n# Set the x-axis line solidoffset\nax.spines['left'].set_solidoffset(0.0)\n\n# Set the y-axis line solidoffset\nax.spines['bottom'].set_solidoffset(0.0)\n\n# Set the x-axis line soliddashes\nax.spines['left'].set_soliddashes((1, 1))\n\n# Set the y-axis line soliddashes\nax.spines['bottom'].set_soliddashes((1, 1))\n\n# Set the x-axis line soliddashcap\nax.spines['left'].set_soliddashcapstyle('round')\n\n# Set the y-axis line soliddashcap\nax.spines['bottom'].set_soliddashcapstyle('round')\n\n# Set the x-axis line soliddashjoin\nax.spines['left'].set_soliddashjoinstyle('round')\n\n# Set the y-axis line soliddashjoin\nax.spines['bottom'].set_soliddashjoinstyle('round')\n\n# Set the x-axis line soliddashoffset\nax.spines['left'].set_soliddashoffset(0.0)\n\n# Set the y-axis line soliddashoffset\nax.spines['bottom'].set_soliddashoffset(0.0)\n\n# Set the x-axis line soliddashed\nax.spines['left'].set_soliddashed((1, 1))\n\n# Set the y-axis line soliddashed\nax.spines['bottom'].set_soliddashed((1, 1))\n\n# Set the x-axis line soliddashcap\nax.spines['left'].set_soliddashcapstyle('round')\n\n# Set the y-axis line soliddashcap\nax.spines['bottom'].set_soliddashcapstyle('round')\n\n# Set the x-axis line soliddashjoin\nax.spines['left'].set_soliddashjoinstyle('round')\n\n# Set the y-axis line soliddashjoin\nax.spines['bottom'].set_soliddashjoinstyle('round')\n\n# Set the x-axis line soliddashoffset\nax.spines['left'].set_soliddashoffset(0.0)\n\n# Set the y-axis line soliddashoffset\nax.spines['bottom'].set_soliddashoffset(0.0)\n\n# Set the x-axis line soliddashed\nax.spines['left'].set_soliddashed((1, 1))\n\n# Set the y-axis line soliddashed\nax.spines['bottom'].set_soliddashed((1, 1))\n\n# Set the x-axis line soliddashcap\nax.spines['left'].set_soliddashcapstyle('round')\n\n# Set the y-axis line soliddashcap\nax.spines['bottom'].set_soliddashcapstyle('round')\n\n# Set the x-axis line soliddashjoin\nax.spines['left'].set_soliddashjoinstyle('round')\n\n# Set the y-axis line soliddashjoin\nax.spines['bottom'].set_soliddashjoinstyle('round')\n\n# Set the x-axis line soliddashoffset\nax.spines['left'].set_soliddashoffset(0.0)\n\n# Set the y-axis line soliddashoffset\nax.spines['bottom'].set_soliddashoffset(0.0)\n\n# Set the x-axis line soliddashed\nax.spines['left'].set_soliddashed((1, 1))\n\n# Set the y-axis line soliddashed\nax.spines['bottom'].set_soliddashed((1, 1))\n\n# Set the x-axis line soliddashcap\nax.spines['left'].set_soliddashcapstyle('round')\n\n# Set the y-axis line soliddashcap\nax.spines['bottom'].set_soliddashcapstyle('round')\n\n# Set the x-axis line soliddashjoin\nax.spines['left'].set_soliddashjoinstyle('round')\n\n# Set the y-axis line soliddashjoin\nax.spines['bottom'].set_soliddashjoinstyle('round')\n\n# Set the x-axis line soliddashoffset\nax.spines['left'].set_soliddashoffset(0.0)\n\n# Set the y-axis line soliddashoffset\nax.spines['bottom'].set_soliddashoffset(0.0)\n\n# Set the x-axis line soliddashed\nax.spines['left'].set_soliddashed((1, 1))\n\n# Set the y-axis line soliddashed\nax.spines['bottom'].set_soliddashed((1, 1))\n\n# Set the x-axis line soliddashcap\nax.spines['left'].set_soliddashcapstyle('round')\n\n# Set the y-axis line soliddashcap\nax.spines['bottom'].set_soliddashcapstyle('round')\n\n# Set the x-axis line soliddashjoin\nax.spines['left'].set_soliddashjoinstyle('round')\n\n# Set the y-axis line soliddashjoin\nax.spines['bottom'].set_soliddashjoinstyle('round')\n\n# Set the x-axis line soliddashoffset\nax.spines['left'].set_soliddashoffset(0.0)\n\n# Set the y-axis line soliddashoffset\nax.spines['bottom'].set_soliddashoffset(0.0)\n\n# Set the x-axis line soliddashed\nax.spines['left'].set_soliddashed((1, 1))\n\n# Set the y-axis line soliddashed\nax.spines['bottom'].set_soliddashed((1, 1))\n\n# Set the x-axis line soliddashcap\nax.spines['left'].set_soliddashcapstyle('round')\n\n# Set the y-axis line soliddashcap\nax.spines['bottom'].set_soliddashcapstyle('round')\n\n# Set the x-axis line soliddashjoin\nax.spines['left'].set_soliddashjoinstyle('round')\n\n# Set the y-axis line soliddashjoin\nax.spines['bottom'].set_soliddashjoinstyle('round')\n\n# Set the x-axis line soliddashoffset\nax.spines['left'].set_soliddashoffset(0.0)\n\n# Set the y-axis line soliddashoffset\nax.spines['bottom'].set_soliddashoffset(0.0)\n\n# Set the x-axis line soliddashed\nax.spines['left'].set_soliddashed((1, 1))\n\n# Set the y-axis line soliddashed\nax.spines['bottom'].set_soliddashed((1, 1))\n\n# Set the x-axis line soliddashcap\nax.spines['left'].set_soliddashcapstyle('round')\n\n# Set the y-axis line soliddashcap\nax.spines['bottom'].set_soliddashcapstyle('round')\n\n# Set the x-axis line soliddashjoin\nax.spines['left'].set_soliddashjoinstyle('round')\n\n# Set the y-axis line soliddashjoin\nax.spines['bottom'].set_soliddashjoinstyle('round')\n\n# Set the x-axis line soliddashoffset\nax.spines['left'].set_soliddashoffset(0.0)\n\n# Set the y-axis line soliddashoffset\nax.spines['bottom'].set_soliddashoffset(0.0)\n\n# Set the x-axis line soliddashed\nax.spines['left'].set_soliddashed((1, 1))\n\n# Set the y-axis line soliddashed\nax.spines['bottom'].set_soliddashed((1, 1))\n\n# Set the x-axis line soliddashcap\nax.spines['left'].set_soliddashcapstyle('round')\n\n# Set the y-axis line soliddashcap\nax.spines['bottom'].set_soliddashcapstyle('round')\n\n# Set the x-axis line soliddashjoin\nax.spines['left'].set_soliddashjoinstyle('round')\n\n# Set the y-axis line soliddashjoin\nax.spines['bottom'].set_soliddashjoinstyle('round')\n\n# Set the x-axis line soliddashoffset\nax.spines['left'].set_soliddashoffset(0.0)\n\n# Set the y-axis line soliddashoffset\nax.spines['bottom'].set_soliddashoffset(0.0)\n\n# Set the x-axis line soliddashed\nax.spines['left'].set_soliddashed((1, 1))\n\n# Set the y-axis line soliddashed\nax.spines['bottom'].set_soliddashed((1, 1))\n\n# Set the x-axis line soliddashcap\nax.spines['left'].set_soliddashcapstyle('round')\n\n# Set the y-axis line soliddashcap\nax.spines['bottom'].set_soliddashcapstyle('round')\n\n# Set the x-axis line soliddashjoin\nax.spines['left'].set_soliddashjoinstyle('round')\n\n# Set the y-axis line soliddashjoin\nax.spines['bottom'].set_soliddashjoinstyle('round')\n\n# Set the x-axis line soliddashoffset\nax.spines['left'].set_soliddashoffset(0.0)\n\n# Set the y-axis line soliddashoffset\nax.spines['bottom'].set_soliddashoffset(0.0)\n\n# Set the x-axis line soliddashed\nax.spines['left'].set_soliddashed((1, 1))\n\n# Set the y-axis line soliddashed\nax.spines['bottom'].set_soliddashed((1, 1))\n\n# Set the x-axis line soliddashcap\nax.spines['left'].set_soliddashcapstyle('round')\n\n# Set the y-axis line soliddashcap\nax.spines['bottom'].set_soliddashcapstyle('round')\n\n# Set the x-axis line soliddashjoin\nax.spines['left'].set_soliddashjoinstyle('round')\n\n# Set the y-axis line soliddashjoin\nax.spines['bottom'].set_soliddashjoinstyle('round')\n\n# Set the x-axis line soliddashoffset\nax.spines['left'].set_soliddashoffset(0.0)\n\n# Set the y-axis line soliddashoffset\nax.spines['bottom'].set_soliddashoffset(0.0)\n\n# Set the x-axis line soliddashed\nax.spines['left'].set_soliddashed((1, 1))\n\n# Set the y-axis line soliddashed\nax.spines['bottom'].set_soliddashed((1, 1))\n\n# Set the x-axis line soliddashcap\nax.spines['left'].set_soliddashcapstyle('round')\n\n# Set the y-axis line soliddashcap\nax.spines['bottom'].set_soliddashcapstyle('round')\n\n# Set the x-axis line soliddashjoin\nax.spines['left'].set_soliddashjoinstyle('round')\n\n# Set the y-axis line soliddashjoin\nax.spines['bottom'].set_soliddashjoinstyle('round')\n\n# Set the x-axis line soliddashoffset\nax.spines['left'].set_soliddashoffset(0.0)\n\n# Set the y-axis line soliddashoffset\nax.spines['bottom'].set_soliddashoffset(0.0)\n\n# Set the x-axis line soliddashed\nax.spines['left'].set_soliddashed((1, 1))\n\n# Set the y-axis line soliddashed\nax.spines['bottom'].set_soliddashed((1, 1))\n\n# Set the x-axis line soliddashcap\nax.spines['left'].set_soliddashcapstyle('round')\n\n# Set the y-axis line soliddashcap\nax.spines['bottom'].set_soliddashcapstyle('round')\n\n# Set the x-axis line soliddashjoin\nax.spines['left'].set_soliddashjoinstyle('round')\n\n# Set the y-axis line soliddashjoin\nax.spines['bottom'].set_soliddashjoinstyle('round')\n\n# Set the x-axis line soliddashoffset\nax.spines['left'].set_soliddashoffset(0.0)\n\n# Set the y-axis line soliddashoffset\nax.spines['bottom'].set_soliddashoffset(0.0)\n\n# Set the x-axis line soliddashed\nax.spines['left'].set_soliddashed((1, 1))\n\n# Set the y-axis line soliddashed\nax.spines['bottom'].set_soliddashed((1, 1))\n\n# Set the x-axis line soliddashcap\nax.spines['left'].set_soliddashcapstyle('round')\n\n# Set the y-axis line soliddashcap\nax.spines['bottom'].set_soliddashcapstyle('round')\n\n# Set the x-axis line soliddashjoin\nax.spines['left'].set_soliddashjoinstyle('round')\n\n# Set the y-axis line soliddashjoin\nax.spines['bottom'].set_soliddashjoinstyle('round')\n\n# Set the x-axis line soliddashoffset\nax.spines['left'].set_soliddashoffset(0.0)\n\n# Set the y-axis line soliddashoffset\nax.spines['bottom'].set_soliddashoffset(0.0)\n\n# Set the x-axis line soliddashed\nax.spines['left'].set_soliddashed((1, 1))\n\n# Set the y-axis line soliddashed\nax.spines['bottom'].set_soliddashed((1, 1))\n\n# Set the x-axis line soliddashcap\nax.spines['left'].set_soliddashcapstyle('round')\n\n# Set the y-axis line soliddashcap\nax.spines['bottom'].set_soliddashcapstyle('round')\n\n# Set the x-axis line soliddashjoin\nax.spines['left'].set_soliddashjoinstyle('round')\n\n# Set the y-axis line soliddashjoin\nax.spines['bottom'].set_soliddashjoinstyle('round')\n\n# Set the x-axis line soliddashoffset\nax.spines['left'].set_soliddashoffset(0.0)\n\n# Set the y-axis line soliddashoffset\nax.spines['bottom'].set_soliddashoffset(0.0)\n\n# Set the x-axis line soliddashed\nax.spines['left'].set_soliddashed((1, 1))\n\n# Set the y-axis line soliddashed\nax.spines['bottom'].set_soliddashed((1, 1))\n\n# Set the x-axis line soliddashcap\nax.spines['left'].set_soliddashcapstyle('round')\n\n# Set the y-axis line soliddashcap\nax.spines['bottom'].set_soliddashcapstyle('round')\n\n# Set the x-axis line soliddashjoin\nax.spines['left'].set_soliddashjoinstyle('round')\n\n# Set the y-axis line soliddashjoin\nax.spines['bottom'].set_soliddashjoinstyle('round')\n\n# Set the x-axis line soliddashoffset\nax.spines['left'].set_soliddashoffset(0.0)\n\n# Set the y-axis line soliddashoffset\nax.spines['bottom'].set_soliddashoffset(0.0)\n\n# Set the x-axis line soliddashed\nax.spines['left'].set_soliddashed((1, 1))\n\n# Set the y-axis line soliddashed\nax.spines['bottom'].set_soliddashed((1, 1))\n\n# Set the x-axis line soliddashcap\nax.spines['left'].set_soliddashcapstyle('round')\n\n# Set the y-axis line soliddashcap\nax.spines['bottom'].set_soliddashcapstyle('round')\n\n# Set the x-axis line soliddashjoin\nax.spines['left'].set_soliddashjoinstyle('round')\n\n# Set the y-axis line soliddashjoin\nax.spines['bottom'].set_soliddashjoinstyle('round')\n\n# Set the x-axis line soliddashoffset\nax.spines['left'].set_soliddashoffset(0.0)\n\n# Set the y-axis line soliddashoffset\nax.spines['bottom'].set_soliddashoffset(0.0)\n\n# Set the x-axis line soliddashed"}
{"file": "dataset/ori_500/box_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the x-axis labels\nax.set_xticks([1, 2, 3, 4, 5])\nax.set_xticklabels(['AlphaBeta', 'z^', 'Gamma(\u03b3 = 0.05)', 'Gamma(\u03b3 = 0.1)', 'Gamma(\u03b3 = 0.25)'])\n\n# Set the y-axis limits\nax.set_ylim([2.5, 6.0])\n\n# Draw rectangles for each data point\nfor i in range(5):\n    ax.add_patch(plt.Rectangle((i, 5), 1, 1, fill=False, edgecolor='black'))\n    ax.add_patch(plt.Rectangle((i, 4), 1, 1, fill=False, edgecolor='orange'))\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 5.0))\n\n# Set the title of the plot\nax.set_title('Execution Accuracy')\n\n# Set the x-axis label\nax.set_xlabel('Algorithm')\n\n# Set the y-axis label\nax.set_ylabel('Accuracy')\n\n# Define the data for the plot\nalgorithms = ['SQL-Only', 'PoT', 'IC-LP', 'DAIL', 'IC-LP+PoT']\naccuracies = [0.875, 0.875, 0.85, 0.9, 0.875]\n\n# Create a bar chart\nax.bar(algorithms, accuracies, color='lightblue')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis for the left plot\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Create a bar chart for the left plot\nax.bar(['DENSE (ref)', 'Joint Multimodal Framework (ours)', 'Cine'], [0.88, 0.87, 0.83], color='blue')\nax.set_title('LMA Region Classification Accuracy')\n\n# Create a scatter plot for the right plot\nx = np.random.rand(10)\ny = np.random.rand(10)\ncolors = np.random.rand(10)\narea = np.pi * (15 * np.random.rand(10))**2  # 0 to 15 point radiuses\n\nplt.figure(figsize=(10, 5))\nplt.scatter(x, y, s=area, c=colors, alpha=0.5)\nplt.title('Slice Mean Error (ms)')\nplt.xlabel('Slice Number')\nplt.ylabel('Mean Error')\n\n# Display the plots\nplt.show()\n```"}
{"file": "dataset/ori_500/box_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Set the title of the plot\nax.set_title('Z-Score')\n\n# Set the x-axis label\nax.set_xlabel('Time')\n\n# Set the y-axis label\nax.set_ylabel('Z-Score')\n\n# Set the x-ticks\nax.set_xticks([1, 2, 3, 4, 5])\n\n# Set the x-tick labels\nax.set_xticklabels(['w/o att', 'w/o DP', '1xQ', '20xQ', '200xQ'])\n\n# Set the y-ticks\nax.set_yticks([0, 5, 10, 15, 20])\n\n# Set the y-tick labels\nax.set_yticklabels(['0', '5', '10', '15', '20'])\n\n# Draw a horizontal line at y=5\nax.axhline(y=5, color='r', linestyle='-')\n\n# Draw a vertical line at x=3\nax.axvline(x=3, color='r', linestyle='-')\n\n# Draw a rectangle with width 2 and height 10\nrect = plt.Rectangle((1, 10), 2, 10, linewidth=1, edgecolor='r', facecolor='none')\nax.add_patch(rect)\n\n# Draw a circle with radius 1\ncircle = plt.Circle((3, 15), 1, color='b')\nax.add_artist(circle)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_16.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(5.0, 5.0))\n\n# Set the title of the plot\nax.set_title('Mean')\n\n# Set the x-axis label\nax.set_xlabel('Time')\n\n# Set the y-axis label\nax.set_ylabel('Value')\n\n# Set the x-axis limits\nax.set_xlim(1, 3)\n\n# Set the y-axis limits\nax.set_ylim(0, 3)\n\n# Add rectangles to the plot\nrect1 = plt.Rectangle((1, 2), 1, 1, color='blue')\nrect2 = plt.Rectangle((1, 1), 1, 1, color='green')\nrect3 = plt.Rectangle((1, 0), 1, 1, color='orange')\nrect4 = plt.Rectangle((2, 2), 1, 1, color='brown')\nrect5 = plt.Rectangle((2, 1), 1, 1, color='purple')\nrect6 = plt.Rectangle((2, 0), 1, 1, color='pink')\n\n# Add the rectangles to the plot\nax.add_patch(rect1)\nax.add_patch(rect2)\nax.add_patch(rect3)\nax.add_patch(rect4)\nax.add_patch(rect5)\nax.add_patch(rect6)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_17.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 4.0))\n\n# Set the title of the plot\nax.set_title('Run Performance')\n\n# Set the x-axis label\nax.set_xlabel('Run Number')\n\n# Set the y-axis label\nax.set_ylabel('Performance Value')\n\n# Create a scatter plot with random data\nx = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ny = [50, 60, 70, 80, 90, 100, 90, 80, 70, 60]\nax.scatter(x, y)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_18.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Set the background color of the plot\nax.set_facecolor('lightyellow')\n\n# Create a rectangle for the first subplot\nrect1 = plt.Rectangle((0.1, 0.8), 0.8, 0.2, facecolor='pink', edgecolor='black')\nax.add_patch(rect1)\n\n# Create a rectangle for the second subplot\nrect2 = plt.Rectangle((0.1, 0.6), 0.8, 0.2, facecolor='orange', edgecolor='black')\nax.add_patch(rect2)\n\n# Create a rectangle for the third subplot\nrect3 = plt.Rectangle((0.1, 0.4), 0.8, 0.2, facecolor='lightblue', edgecolor='black')\nax.add_patch(rect3)\n\n# Create a rectangle for the fourth subplot\nrect4 = plt.Rectangle((0.1, 0.2), 0.8, 0.2, facecolor='lightgreen', edgecolor='black')\nax.add_patch(rect4)\n\n# Create a rectangle for the fifth subplot\nrect5 = plt.Rectangle((0.1, 0.0), 0.8, 0.2, facecolor='lightgrey', edgecolor='black')\nax.add_patch(rect5)\n\n# Set the x-axis limits\nax.set_xlim(0, 1)\n\n# Set the y-axis limits\nax.set_ylim(0, 1)\n\n# Set the x-axis ticks\nax.set_xticks(np.arange(0, 1.1, 0.2))\n\n# Set the y-axis ticks\nax.set_yticks(np.arange(0, 1.1, 0.2))\n\n# Set the x-axis label\nax.set_xlabel('one by one')\n\n# Set the y-axis label\nax.set_ylabel('all in one')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_19.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 4.0))\n\n# Create a scatter plot\nax.scatter(np.random.rand(50), np.random.rand(50), color='blue')\n\n# Set the title of the plot\nax.set_title('BERT Base')\n\n# Set the x and y labels\nax.set_xlabel('X-axis')\nax.set_ylabel('Y-axis')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Ratings')\n\n# Create a bar chart with the data\nax.bar(['Our Model', 'NTM+CL'], [2.5, 2.4], color='pink')\n\n# Set the x-axis label\nax.set_xlabel('Model')\n\n# Set the y-axis label\nax.set_ylabel('Rating')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_20.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and a set of subplots\nfig, axs = plt.subplots(2, 3, figsize=(10, 5))\n\n# Set the title for each subplot\naxs[0, 0].set_title('Digit span')\naxs[0, 1].set_title('Lexical decision')\naxs[0, 2].set_title('Lexical decision')\naxs[1, 0].set_title('Reaction time')\naxs[1, 1].set_title('Trail making')\naxs[1, 2].set_title('Trail making')\n\n# Create a scatter plot for each subplot\naxs[0, 0].scatter([1, 2], [1.5, 1.8], color='blue')\naxs[0, 1].scatter([1, 2], [1.6, 1.8], color='orange')\naxs[0, 2].scatter([1, 2], [1.4, 1.8], color='orange')\naxs[1, 0].scatter([1, 2], [1.0, 1.0], color='blue')\naxs[1, 1].scatter([1, 2], [1.7, 1.9], color='orange')\naxs[1, 2].scatter([1, 2], [1.5, 1.7], color='orange')\n\n# Add a legend to each subplot\naxs[0, 0].legend(['target', 'control'], loc='upper left')\naxs[0, 1].legend(['target', 'control'], loc='upper left')\naxs[0, 2].legend(['target', 'control'], loc='upper left')\naxs[1, 0].legend(['target', 'control'], loc='upper left')\naxs[1, 1].legend(['target', 'control'], loc='upper left')\naxs[1, 2].legend(['target', 'control'], loc='upper left')\n\n# Set the x-axis labels for each subplot\naxs[0, 0].set_xlabel('Group')\naxs[0, 1].set_xlabel('Group')\naxs[0, 2].set_xlabel('Group')\naxs[1, 0].set_xlabel('Group')\naxs[1, 1].set_xlabel('Group')\naxs[1, 2].set_xlabel('Group')\n\n# Set the y-axis labels for each subplot\naxs[0, 0].set_ylabel('Correct word reaction time')\naxs[0, 1].set_ylabel('Correct response ratio')\naxs[0, 2].set_ylabel('Correct response ratio')\naxs[1, 0].set_ylabel('Reaction time (s)')\naxs[1, 1].set_ylabel('Time per tap (s)')\naxs[1, 2].set_ylabel('Reaction time (s)')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_21.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(9.0, 5.0))\n\n# Set the title of the plot\nax.set_title('Methods')\n\n# Create a bar chart with the data\nax.bar(['BG', 'IBP', 'SSP', 'NBP'], [70, 60, 80, 90], color='blue')\n\n# Set the x-axis label\nax.set_xlabel('Prediction Accuracy v_{D1}')\n\n# Set the y-axis label\nax.set_ylabel('Methods')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_22.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 5.0))\n\n# Set the x-axis limits\nax.set_xlim(0, 400)\n\n# Set the y-axis limits\nax.set_ylim(-1, 1)\n\n# Set the x-axis label\nax.set_xlabel('Search depth')\n\n# Set the y-axis label\nax.set_ylabel('Reward')\n\n# Create a bar chart\nax.bar([50, 100, 150, 200, 300, 350], [0.02, 0.04, 0.06, 0.08, 0.1, 0.12], color='blue')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_23.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(9, 5))\n\n# Set the title of the plot\nax.set_title('Daily Activity Durations')\n\n# Create a bar chart with the data\nax.bar(['Music Playtime', 'Reading Duration', 'Exercise Duration', 'Gaming Duration'], [65.1, 55.7, 50.3, 29.5], color='blue')\n\n# Set the x-axis label\nax.set_xlabel('Activity')\n\n# Set the y-axis label\nax.set_ylabel('Duration (minutes)')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_24.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Set the title of the plot\nax.set_title('Mean Value')\n\n# Create a bar chart with the data\nax.bar(['No Intervention', 'Low Intensity', 'High Intensity', 'Recovery', 'Environment'], [2.5, 2.6, 2.7, 2.8, 2.9], color='blue')\n\n# Set the x-axis label\nax.set_xlabel('Intervention Type')\n\n# Set the y-axis label\nax.set_ylabel('Mean Value')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_25.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Set the x-axis limits\nax.set_xlim(-40, 40)\n\n# Set the y-axis limits\nax.set_ylim(-0.5, 7.5)\n\n# Set the x-axis ticks\nax.set_xticks(range(-40, 50, 20))\n\n# Set the y-axis ticks\nax.set_yticks(range(0, 8, 2))\n\n# Set the x-axis label\nax.set_xlabel('Angular Frequency [rad/s]')\n\n# Set the y-axis label\nax.set_ylabel('Thrust [N]')\n\n# Add a vertical line at x=0\nax.axvline(x=0, color='k', linestyle='-')\n\n# Add a horizontal line at y=0\nax.axhline(y=0, color='k', linestyle='-')\n\n# Add a rectangle representing the engine\nengine = plt.Rectangle((-30, -0.5), 60, 1, color='blue')\nax.add_patch(engine)\n\n# Add a rectangle representing the propeller\npropeller = plt.Rectangle((-20, -0.5), 40, 1, color='green')\nax.add_patch(propeller)\n\n# Add a rectangle representing the wing\nwing = plt.Rectangle((-10, -0.5), 20, 1, color='red')\nax.add_patch(wing)\n\n# Add a rectangle representing the fuselage\nfuselage = plt.Rectangle((0, -0.5), 10, 1, color='yellow')\nax.add_patch(fuselage)\n\n# Add a rectangle representing the tail\ntail = plt.Rectangle((10, -0.5), 10, 1, color='purple')\nax.add_patch(tail)\n\n# Add a rectangle representing the rudder\nrudder = plt.Rectangle((20, -0.5), 10, 1, color='orange')\nax.add_patch(rudder)\n\n# Add a rectangle representing the elevator\nelevator = plt.Rectangle((30, -0.5), 10, 1, color='cyan')\nax.add_patch(elevator)\n\n# Add a rectangle representing the throttle\nthrottle = plt.Rectangle((40, -0.5), 10, 1, color='pink')\nax.add_patch(throttle)\n\n# Add a rectangle representing the fuel tank\nfuel_tank = plt.Rectangle((-30, 1.5), 60, 1, color='brown')\nax.add_patch(fuel_tank)\n\n# Add a rectangle representing the battery\nbattery = plt.Rectangle((-20, 1.5), 40, 1, color='grey')\nax.add_patch(battery)\n\n# Add a rectangle representing the control surfaces\ncontrol_surfaces = plt.Rectangle((-10, 1.5), 20, 1, color='black')\nax.add_patch(control_surfaces)\n\n# Add a rectangle representing the landing gear\nlanding_gear = plt.Rectangle((0, 1.5), 10, 1, color='white')\nax.add_patch(landing_gear)\n\n# Add a rectangle representing the navigation system\nnavigation_system = plt.Rectangle((10, 1.5), 10, 1, color='silver')\nax.add_patch(navigation_system)\n\n# Add a rectangle representing the communication system\ncommunication_system = plt.Rectangle((20, 1.5), 10, 1, color='gold')\nax.add_patch(communication_system)\n\n# Add a rectangle representing the power supply\npower_supply = plt.Rectangle((30, 1.5), 10, 1, color='bronze')\nax.add_patch(power_supply)\n\n# Add a rectangle representing the propulsion system\npropulsion_system = plt.Rectangle((40, 1.5), 10, 1, color='silver')\nax.add_patch(propulsion_system)\n\n# Add a rectangle representing the navigation system\nnavigation_system = plt.Rectangle((-30, 2.5), 60, 1, color='silver')\nax.add_patch(navigation_system)\n\n# Add a rectangle representing the communication system\ncommunication_system = plt.Rectangle((-20, 2.5), 40, 1, color='gold')\nax.add_patch(communication_system)\n\n# Add a rectangle representing the power supply\npower_supply = plt.Rectangle((-10, 2.5), 20, 1, color='bronze')\nax.add_patch(power_supply)\n\n# Add a rectangle representing the propulsion system\npropulsion_system = plt.Rectangle((0, 2.5), 10, 1, color='silver')\nax.add_patch(propulsion_system)\n\n# Add a rectangle representing the navigation system\nnavigation_system = plt.Rectangle((10, 2.5), 10, 1, color='silver')\nax.add_patch(navigation_system)\n\n# Add a rectangle representing the communication system\ncommunication_system = plt.Rectangle((20, 2.5), 10, 1, color='gold')\nax.add_patch(communication_system)\n\n# Add a rectangle representing the power supply\npower_supply = plt.Rectangle((30, 2.5), 10, 1, color='bronze')\nax.add_patch(power_supply)\n\n# Add a rectangle representing the propulsion system\npropulsion_system = plt.Rectangle((40, 2.5), 10, 1, color='silver')\nax.add_patch(propulsion_system)\n\n# Add a rectangle representing the navigation system\nnavigation_system = plt.Rectangle((-30, 3.5), 60, 1, color='silver')\nax.add_patch(navigation_system)\n\n# Add a rectangle representing the communication system\ncommunication_system = plt.Rectangle((-20, 3.5), 40, 1, color='gold')\nax.add_patch(communication_system)\n\n# Add a rectangle representing the power supply\npower_supply = plt.Rectangle((-10, 3.5), 20, 1, color='bronze')\nax.add_patch(power_supply)\n\n# Add a rectangle representing the propulsion system\npropulsion_system = plt.Rectangle((0, 3.5), 10, 1, color='silver')\nax.add_patch(propulsion_system)\n\n# Add a rectangle representing the navigation system\nnavigation_system = plt.Rectangle((10, 3.5), 10, 1, color='silver')\nax.add_patch(navigation_system)\n\n# Add a rectangle representing the communication system\ncommunication_system = plt.Rectangle((20, 3.5), 10, 1, color='gold')\nax.add_patch(communication_system)\n\n# Add a rectangle representing the power supply\npower_supply = plt.Rectangle((30, 3.5), 10, 1, color='bronze')\nax.add_patch(power_supply)\n\n# Add a rectangle representing the propulsion system\npropulsion_system = plt.Rectangle((40, 3.5), 10, 1, color='silver')\nax.add_patch(propulsion_system)\n\n# Add a rectangle representing the navigation system\nnavigation_system = plt.Rectangle((-30, 4.5), 60, 1, color='silver')\nax.add_patch(navigation_system)\n\n# Add a rectangle representing the communication system\ncommunication_system = plt.Rectangle((-20, 4.5), 40, 1, color='gold')\nax.add_patch(communication_system)\n\n# Add a rectangle representing the power supply\npower_supply = plt.Rectangle((-10, 4.5), 20, 1, color='bronze')\nax.add_patch(power_supply)\n\n# Add a rectangle representing the propulsion system\npropulsion_system = plt.Rectangle((0, 4.5), 10, 1, color='silver')\nax.add_patch(propulsion_system)\n\n# Add a rectangle representing the navigation system\nnavigation_system = plt.Rectangle((10, 4.5), 10, 1, color='silver')\nax.add_patch(navigation_system)\n\n# Add a rectangle representing the communication system\ncommunication_system = plt.Rectangle((20, 4.5), 10, 1, color='gold')\nax.add_patch(communication_system)\n\n# Add a rectangle representing the power supply\npower_supply = plt.Rectangle((30, 4.5), 10, 1, color='bronze')\nax.add_patch(power_supply)\n\n# Add a rectangle representing the propulsion system\npropulsion_system = plt.Rectangle((40, 4.5), 10, 1, color='silver')\nax.add_patch(propulsion_system)\n\n# Add a rectangle representing the navigation system\nnavigation_system = plt.Rectangle((-30, 5.5), 60, 1, color='silver')\nax.add_patch(navigation_system)\n\n# Add a rectangle representing the communication system\ncommunication_system = plt.Rectangle((-20, 5.5), 40, 1, color='gold')\nax.add_patch(communication_system)\n\n# Add a rectangle representing the power supply\npower_supply = plt.Rectangle((-10, 5.5), 20, 1, color='bronze')\nax.add_patch(power_supply)\n\n# Add a rectangle representing the propulsion system\npropulsion_system = plt.Rectangle((0, 5.5), 10, 1, color='silver')\nax.add_patch(propulsion_system)\n\n# Add a rectangle representing the navigation system\nnavigation_system = plt.Rectangle((10, 5.5), 10, 1, color='silver')\nax.add_patch(navigation_system)\n\n# Add a rectangle representing the communication system\ncommunication_system = plt.Rectangle((20, 5.5), 10, 1, color='gold')\nax.add_patch(communication_system)\n\n# Add a rectangle representing the power supply\npower_supply = plt.Rectangle((30, 5.5), 10, 1, color='bronze')\nax.add_patch(power_supply)\n\n# Add a rectangle representing the propulsion system\npropulsion_system = plt.Rectangle((40, 5.5), 10, 1, color='silver')\nax.add_patch(propulsion_system)\n\n# Add a rectangle representing the navigation system\nnavigation_system = plt.Rectangle((-30, 6.5), 60, 1, color='silver')\nax.add_patch(navigation_system)\n\n# Add a rectangle representing the communication system\ncommunication_system = plt.Rectangle((-20, 6.5), 40, 1, color='gold')\nax.add_patch(communication_system)\n\n# Add a rectangle representing the power supply\npower_supply = plt.Rectangle((-10, 6.5), 20, 1, color='bronze')\nax.add_patch(power_supply)\n\n# Add a rectangle representing the propulsion system\npropulsion_system = plt.Rectangle((0, 6.5), 10, 1, color='silver')\nax.add_patch(propulsion_system)\n\n# Add a rectangle representing the navigation system\nnavigation_system = plt.Rectangle((10, 6.5), 10, 1, color='silver')\nax.add_patch(navigation_system)\n\n# Add a rectangle representing the communication system\ncommunication_system = plt.Rectangle((20, 6.5), 10, 1, color='gold')\nax.add_patch(communication_system)\n\n# Add a rectangle representing the power supply\npower_supply = plt.Rectangle((30, 6.5), 10, 1, color='bronze')\nax.add_patch(power_supply)\n\n# Add a rectangle representing the propulsion system\npropulsion_system = plt.Rectangle((40, 6.5), 10, 1, color='silver')\nax.add_patch(propulsion_system)\n\n# Add a rectangle representing the navigation system\nnavigation_system = plt.Rectangle((-30, 7.5), 60, 1, color='silver')\nax.add_patch(navigation_system)\n\n# Add a rectangle representing the communication system\ncommunication_system = plt.Rectangle((-20, 7.5), 40, 1, color='gold')\nax.add_patch(communication_system)\n\n# Add a rectangle representing the power supply\npower_supply = plt.Rectangle((-10, 7.5), 20, 1, color='bronze')\nax.add_patch(power_supply)\n\n# Add a rectangle representing the propulsion system\npropulsion_system = plt.Rectangle((0, 7.5), 10, 1, color='silver')\nax.add_patch(propulsion_system)\n\n# Add a rectangle representing the navigation system\nnavigation_system = plt.Rectangle((10, 7.5), 10, 1, color='silver')\nax.add_patch(navigation_system)\n\n# Add a rectangle representing the communication system\ncommunication_system = plt.Rectangle((20, 7.5), 10, 1, color='gold')\nax.add_patch(communication_system)\n\n# Add a rectangle representing the power supply\npower_supply = plt.Rectangle((30, 7.5), 10, 1, color='bronze')\nax.add_patch(power_supply)\n\n# Add a rectangle representing the propulsion system\npropulsion_system = plt.Rectangle((40, 7.5), 10, 1, color='silver')\nax.add_patch(propulsion_system)\n\n# Add a rectangle representing the navigation system\nnavigation_system = plt.Rectangle((-30, 8.5), 60, 1, color='silver')\nax.add_patch(navigation_system)\n\n# Add a rectangle representing the communication system\ncommunication_system = plt.Rectangle((-20, 8.5), 40, 1, color='gold')\nax.add_patch(communication_system)\n\n# Add a rectangle representing the power supply\npower_supply = plt.Rectangle((-10, 8.5), 20, 1, color='bronze')\nax.add_patch(power_supply)\n\n# Add a rectangle representing the propulsion system\npropulsion_system = plt.Rectangle((0, 8.5), 10, 1, color='silver')\nax.add_patch(propulsion_system)\n\n# Add a rectangle representing the navigation system\nnavigation_system = plt.Rectangle((10, 8.5), 10, 1, color='silver')\nax.add_patch(navigation_system)\n\n# Add a rectangle representing the communication system\ncommunication_system = plt.Rectangle((20, 8.5), 10, 1, color='gold')\nax.add_patch(communication_system)\n\n# Add a rectangle representing the power supply\npower_supply = plt.Rectangle((30, 8.5), 10, 1, color='bronze')\nax.add_patch(power_supply)\n\n# Add a rectangle representing the propulsion system\npropulsion_system = plt.Rectangle((40, 8.5), 10, 1, color='silver')\nax.add_patch(propulsion_system)\n\n# Add a rectangle representing the navigation system\nnavigation_system = plt.Rectangle((-30, 9.5), 60, 1, color='silver')\nax.add_patch(navigation_system)\n\n# Add a rectangle representing the communication system\ncommunication_system = plt.Rectangle((-20, 9.5), 40, 1, color='gold')\nax.add_patch(communication_system)\n\n# Add a rectangle representing the power supply\npower_supply = plt.Rectangle((-10, 9.5), 20, 1, color='bronze')\nax.add_patch(power_supply)\n\n# Add a rectangle representing the propulsion system\npropulsion_system = plt.Rectangle((0, 9.5), 10, 1, color='silver')\nax.add_patch(propulsion_system)\n\n# Add a rectangle representing the navigation system\nnavigation_system = plt.Rectangle((10, 9.5), 10, 1, color='silver')\nax.add_patch(navigation_system)\n\n# Add a rectangle representing the communication system\ncommunication_system = plt.Rectangle((20, 9.5), 10, 1, color='gold')\nax.add_patch(communication_system)\n\n# Add a rectangle representing the power supply\npower_supply = plt.Rectangle((30, 9.5), 10, 1, color='bronze')\nax.add_patch(power_supply)\n\n# Add a rectangle representing the propulsion system\npropulsion_system = plt.Rectangle((40, 9.5), 10, 1, color='silver')\nax.add_patch(propulsion_system)\n\n# Add a rectangle representing the navigation system\nnavigation_system = plt.Rectangle((-30, 10.5), 60, 1, color='silver')\nax.add_patch(navigation_system)\n\n# Add a rectangle representing the communication system\ncommunication_system = plt.Rectangle((-20, 10.5), 40, 1, color='gold')\nax.add_patch(communication_system)\n\n# Add a rectangle representing the power supply\npower_supply = plt.Rectangle((-10, 10.5), 20, 1, color='bronze')\nax.add_patch(power_supply)\n\n# Add a rectangle representing the propulsion system\npropulsion_system = plt.Rectangle((0, 10.5), 10, 1, color='silver')\nax.add_patch(propulsion_system)\n\n# Add a rectangle representing the navigation system\nnavigation_system = plt.Rectangle((10, 10.5), 10, 1, color='silver')\nax.add_patch(navigation_system)\n\n# Add a rectangle representing the communication system\ncommunication_system = plt.Rectangle((20, 10.5), 10, 1, color='gold')\nax.add_patch(communication_system)\n\n# Add a rectangle representing the power supply\npower_supply = plt.Rectangle((30, 10.5), 10, 1, color='bronze')\nax.add_patch(power_supply)\n\n# Add a rectangle representing the propulsion system\npropulsion_system = plt.Rectangle((40, 10.5), 10, 1, color='silver')\nax.add_patch(propulsion_system)\n\n# Add a rectangle representing the navigation system\nnavigation_system = plt.Rectangle((-30, 11.5), 60, 1, color='silver')\nax.add_patch(navigation_system)\n\n# Add a rectangle representing the communication system\ncommunication_system = plt.Rectangle((-20, 11.5), 40, 1, color='gold')\nax.add_patch(communication_system)\n\n# Add a rectangle representing the power supply\npower_supply = plt.Rectangle((-10, 11.5), 20, 1, color='bronze')\nax.add_patch(power_supply)\n\n# Add a rectangle representing the propulsion system\npropulsion_system = plt.Rectangle((0, 11.5), 10, 1, color='silver')\nax.add_patch(propulsion_system)\n\n# Add a rectangle representing the navigation system\nnavigation_system = plt.Rectangle((10, 11.5), 10, 1, color='silver')\nax.add_patch(navigation_system)\n\n# Add a rectangle representing the communication system\ncommunication_system = plt.Rectangle((20, 11.5), 10, 1, color='gold')\nax.add_patch(communication_system)\n\n# Add a rectangle representing the power supply\npower_supply = plt.Rectangle((30, 11.5), 10, "}
{"file": "dataset/ori_500/box_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Performance Metrics')\n\n# Set the x-axis label\nax.set_xlabel('Players')\n\n# Set the y-axis label\nax.set_ylabel('Performance (%)')\n\n# Set the tick labels for the x-axis\nax.set_xticks([1, 2, 3, 4])\nax.set_xticklabels(['ST_CVRP', 'ST_VRPTW', 'ST_All', 'Ours'])\n\n# Set the tick labels for the y-axis\nax.set_yticks(range(0, 70, 10))\n\n# Draw a rectangle for each player's performance\nrect1 = plt.Rectangle((1, 50), 1, 10, color='blue')\nrect2 = plt.Rectangle((2, 40), 1, 10, color='purple')\nrect3 = plt.Rectangle((3, 30), 1, 10, color='orange')\nrect4 = plt.Rectangle((4, 20), 1, 10, color='red')\n\n# Add the rectangles to the plot\nax.add_patch(rect1)\nax.add_patch(rect2)\nax.add_patch(rect3)\nax.add_patch(rect4)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(12, 3))\n\n# Set the title of the plot\nax.set_title('Human Normalized Score')\n\n# Create a bar chart\nax.bar([0.2, 0.4, 0.6, 0.8], [0.1, 0.2, 0.3, 0.4], color='blue')\n\n# Set the x-axis label\nax.set_xlabel('Human Normalized Score')\n\n# Set the y-axis label\nax.set_ylabel('REM (\u2191)')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Thrust Angle vs Angular Frequency')\n\n# Set the x-axis label\nax.set_xlabel('Angular Frequency [rad/s]')\n\n# Set the y-axis label\nax.set_ylabel('Thrust Angle [\u00b0]')\n\n# Set the x-axis limits\nax.set_xlim(2.0, 5.0)\n\n# Set the y-axis limits\nax.set_ylim(-60, 60)\n\n# Set the grid\nax.grid(True)\n\n# Set the tick labels\nax.set_xticks([2.0, 2.5, 3.0, 3.5, 4.0, 4.5, 5.0])\nax.set_yticks([-60, -40, -20, 0, 20, 40, 60])\n\n# Set the tick labels\nax.set_xticklabels(['2.0', '2.5', '3.0', '3.5', '4.0', '4.5', '5.0'])\nax.set_yticklabels(['-60', '-40', '-20', '0', '20', '40', '60'])\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=1)\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', length=10, width=2, colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12, colors='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=1)\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', length=10, width=2, colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12, colors='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=1)\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', length=10, width=2, colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12, colors='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=1)\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', length=10, width=2, colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12, colors='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=1)\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', length=10, width=2, colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12, colors='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=1)\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', length=10, width=2, colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12, colors='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=1)\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', length=10, width=2, colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12, colors='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=1)\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', length=10, width=2, colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12, colors='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=1)\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', length=10, width=2, colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12, colors='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=1)\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', length=10, width=2, colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12, colors='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=1)\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', length=10, width=2, colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12, colors='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=1)\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', length=10, width=2, colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12, colors='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=1)\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', length=10, width=2, colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12, colors='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=1)\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', length=10, width=2, colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12, colors='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=1)\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', length=10, width=2, colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12, colors='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=1)\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', length=10, width=2, colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12, colors='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=1)\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', length=10, width=2, colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12, colors='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=1)\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', length=10, width=2, colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12, colors='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=1)\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', length=10, width=2, colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12, colors='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=1)\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', length=10, width=2, colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12, colors='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=1)\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', length=10, width=2, colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12, colors='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=1)\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', length=10, width=2, colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12, colors='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=1)\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', length=10, width=2, colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12, colors='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=1)\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', length=10, width=2, colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12, colors='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=1)\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', length=10, width=2, colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12, colors='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=1)\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', length=10, width=2, colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12, colors='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=1)\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', length=10, width=2, colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12, colors='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=1)\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.sp"}
{"file": "dataset/ori_500/box_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the background color of the plot\nax.set_facecolor('lightgrey')\n\n# Set the title of the plot\nax.set_title('Stock Market Analysis')\n\n# Set the x-axis label\nax.set_xlabel('CEE (dB)')\n\n# Set the y-axis label\nax.set_ylabel('SE (bps)')\n\n# Set the x-axis limits\nax.set_xlim(-10, 0)\n\n# Set the y-axis limits\nax.set_ylim(4, 12)\n\n# Set the grid lines\nax.grid(True)\n\n# Add rectangles for each stock\nrectangles = [\n    plt.Rectangle((0, 5), 1, 3, color='red'),\n    plt.Rectangle((1, 7), 1, 2, color='blue'),\n    plt.Rectangle((2, 9), 1, 1, color='green')\n]\n\nfor rectangle in rectangles:\n    ax.add_patch(rectangle)\n\n# Add text for each stock\ntext = [\n    'Perfect',\n    'GMM (25%-75%)',\n    'GML (25%-75%)',\n    'AO (25%-75%)'\n]\n\nfor i, t in enumerate(text):\n    ax.text(i, 12, t, ha='center', va='bottom')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and a set of subplots\nfig, axs = plt.subplots(1, 3, figsize=(25, 8))\n\n# Set the title for each subplot\naxs[0].set_title('Linear travel times')\naxs[1].set_title('Exponential travel times')\naxs[2].set_title('Sigmoidal travel times')\n\n# Create a list of travel times\ntravel_times = ['D-avg', 'PTO-KNN', 'PTO-OLS', 'P-TF', 'SAA', 'P-NN']\n\n# Create a list of travel times values\ntravel_times_values = [10, 20, 30, 40, 50, 60]\n\n# Create a list of travel times values\ntravel_times_values_2 = [100, 150, 200, 250, 300, 350]\n\n# Create a list of travel times values\ntravel_times_values_3 = [100, 150, 200, 250, 300, 350]\n\n# Create a list of travel times values\ntravel_times_values_4 = [100, 150, 200, 250, 300, 350]\n\n# Create a list of travel times values\ntravel_times_values_5 = [100, 150, 200, 250, 300, 350]\n\n# Create a list of travel times values\ntravel_times_values_6 = [100, 150, 200, 250, 300, 350]\n\n# Create a list of travel times values\ntravel_times_values_7 = [100, 150, 200, 250, 300, 350]\n\n# Create a list of travel times values\ntravel_times_values_8 = [100, 150, 200, 250, 300, 350]\n\n# Create a list of travel times values\ntravel_times_values_9 = [100, 150, 200, 250, 300, 350]\n\n# Create a list of travel times values\ntravel_times_values_10 = [100, 150, 200, 250, 300, 350]\n\n# Create a list of travel times values\ntravel_times_values_11 = [100, 150, 200, 250, 300, 350]\n\n# Create a list of travel times values\ntravel_times_values_12 = [100, 150, 200, 250, 300, 350]\n\n# Create a list of travel times values\ntravel_times_values_13 = [100, 150, 200, 250, 300, 350]\n\n# Create a list of travel times values\ntravel_times_values_14 = [100, 150, 200, 250, 300, 350]\n\n# Create a list of travel times values\ntravel_times_values_15 = [100, 150, 200, 250, 300, 350]\n\n# Create a list of travel times values\ntravel_times_values_16 = [100, 150, 200, 250, 300, 350]\n\n# Create a list of travel times values\ntravel_times_values_17 = [100, 150, 200, 250, 300, 350]\n\n# Create a list of travel times values\ntravel_times_values_18 = [100, 150, 200, 250, 300, 350]\n\n# Create a list of travel times values\ntravel_times_values_19 = [100, 150, 200, 250, 300, 350]\n\n# Create a list of travel times values\ntravel_times_values_20 = [100, 150, 200, 250, 300, 350]\n\n# Create a list of travel times values\ntravel_times_values_21 = [100, 150, 200, 250, 300, 350]\n\n# Create a list of travel times values\ntravel_times_values_22 = [100, 150, 200, 250, 300, 350]\n\n# Create a list of travel times values\ntravel_times_values_23 = [100, 150, 200, 250, 300, 350]\n\n# Create a list of travel times values\ntravel_times_values_24 = [100, 150, 200, 250, 300, 350]\n\n# Create a list of travel times values\ntravel_times_values_25 = [100, 150, 200, 250, 300, 350]\n\n# Create a list of travel times values\ntravel_times_values_26 = [100, 150, 200, 250, 300, 350]\n\n# Create a list of travel times values\ntravel_times_values_27 = [100, 150, 200, 250, 300, 350]\n\n# Create a list of travel times values\ntravel_times_values_28 = [100, 150, 200, 250, 300, 350]\n\n# Create a list of travel times values\ntravel_times_values_29 = [100, 150, 200, 250, 300, 350]\n\n# Create a list of travel times values\ntravel_times_values_30 = [100, 150, 200, 250, 300, 350]\n\n# Create a list of travel times values\ntravel_times_values_31 = [100, 150, 200, 250, 300, 350]\n\n# Create a list of travel times values\ntravel_times_values_32 = [100, 150, 200, 250, 300, 350]\n\n# Create a list of travel times values\ntravel_times_values_33 = [100, 150, 200, 250, 300, 350]\n\n# Create a list of travel times values\ntravel_times_values_34 = [100, 150, 200, 250, 300, 350]\n\n# Create a list of travel times values\ntravel_times_values_35 = [100, 150, 200, 250, 300, 350]\n\n# Create a list of travel times values\ntravel_times_values_36 = [100, 150, 200, 250, 300, 350]\n\n# Create a list of travel times values\ntravel_times_values_37 = [100, 150, 200, 250, 300, 350]\n\n# Create a list of travel times values\ntravel_times_values_38 = [100, 150, 200, 250, 300, 350]\n\n# Create a list of travel times values\ntravel_times_values_39 = [100, 150, 200, 250, 300, 350]\n\n# Create a list of travel times values\ntravel_times_values_40 = [100, 150, 200, 250, 300, 350]\n\n# Create a list of travel times values\ntravel_times_values_41 = [100, 150, 200, 250, 300, 350]\n\n# Create a list of travel times values\ntravel_times_values_42 = [100, 150, 200, 250, 300, 350]\n\n# Create a list of travel times values\ntravel_times_values_43 = [100, 150, 200, 250, 300, 350]\n\n# Create a list of travel times values\ntravel_times_values_44 = [100, 150, 200, 250, 300, 350]\n\n# Create a list of travel times values\ntravel_times_values_45 = [100, 150, 200, 250, 300, 350]\n\n# Create a list of travel times values\ntravel_times_values_46 = [100, 150, 200, 250, 300, 350]\n\n# Create a list of travel times values\ntravel_times_values_47 = [100, 150, 200, 250, 300, 350]\n\n# Create a list of travel times values\ntravel_times_values_48 = [100, 150, 200, 250, 300, 350]\n\n# Create a list of travel times values\ntravel_times_values_49 = [100, 150, 200, 250, 300, 350]\n\n# Create a list of travel times values\ntravel_times_values_50 = [100, 150, 200, 250, 300, 350]\n\n# Create a list of travel times values\ntravel_times_values_51 = [100, 150, 200, 250, 300, 350]\n\n# Create a list of travel times values\ntravel_times_values_52 = [100, 150, 200, 250, 300, 350]\n\n# Create a list of travel times values\ntravel_times_values_53 = [100, 150, 200, 250, 300, 350]\n\n# Create a list of travel times values\ntravel_times_values_54 = [100, 150, 200, 250, 300, 350]\n\n# Create a list of travel times values\ntravel_times_values_55 = [100, 150, 200, 250, 300, 350]\n\n# Create a list of travel times values\ntravel_times_values_56 = [100, 150, 200, 250, 300, 350]\n\n# Create a list of travel times values\ntravel_times_values_57 = [100, 150, 200, 250, 300, 350]\n\n# Create a list of travel times values\ntravel_times_values_58 = [100, 150, 200, 250, 300, 350]\n\n# Create a list of travel times values\ntravel_times_values_59 = [100, 150, 200, 250, 300, 350]\n\n# Create a list of travel times values\ntravel_times_values_60 = [100, 150, 200, 250, 300, 350]\n\n# Create a list of travel times values\ntravel_times_values_61 = [100, 150, 200, 250, 300, 350]\n\n# Create a list of travel times values\ntravel_times_values_62 = [100, 150, 200, 250, 300, 350]\n\n# Create a list of travel times values\ntravel_times_values_63 = [100, 150, 200, 250, 300, 350]\n\n# Create a list of travel times values\ntravel_times_values_64 = [100, 150, 200, 250, 300, 350]\n\n# Create a list of travel times values\ntravel_times_values_65 = [100, 150, 200, 250, 300, 350]\n\n# Create a list of travel times values\ntravel_times_values_66 = [100, 150, 200, 250, 300, 350]\n\n# Create a list of travel times values\ntravel_times_values_67 = [100, 150, 200, 250, 300, 350]\n\n# Create a list of travel times values\ntravel_times_values_68 = [100, 150, 200, 250, 300, 350]\n\n# Create a list of travel times values\ntravel_times_values_69 = [100, 150, 200, 250, 300, 350]\n\n# Create a list of travel times values\ntravel_times_values_70 = [100, 150, 200, 250, 300, 350]\n\n# Create a list of travel times values\ntravel_times_values_71 = [100, 150, 200, 250, 300, 350]\n\n# Create a list of travel times values\ntravel_times_values_72 = [100, 150, 200, 250, 300, 350]\n\n# Create a list of travel times values\ntravel_times_values_73 = [100, 150, 200, 250, 300, 350]\n\n# Create a list of travel times values\ntravel_times_values_74 = [100, 150, 200, 250, 300, 350]\n\n# Create a list of travel times values\ntravel_times_values_75 = [100, 150, 200, 250, 300, 350]\n\n# Create a list of travel times values\ntravel_times_values_76 = [100, 150, 200, 250, 300, 350]\n\n# Create a list of travel times values\ntravel_times_values_77 = [100, 150, 200, 250, 300, 350]\n\n# Create a list of travel times values\ntravel_times_values_78 = [100, 150, 200, 250, 300, 350]\n\n# Create a list of travel times values\ntravel_times_values_79 = [100, 150, 200, 250, 300, 350]\n\n# Create a list of travel times values\ntravel_times_values_80 = [100, 150, 200, 250, 300, 350]\n\n# Create a list of travel times values\ntravel_times_values_81 = [100, 150, 200, 250, 300, 350]\n\n# Create a list of travel times values\ntravel_times_values_82 = [100, 150, 200, 250, 300, 350]\n\n# Create a list of travel times values\ntravel_times_values_83 = [100, 150, 200, 250, 300, 350]\n\n# Create a list of travel times values\ntravel_times_values_84 = [100, 150, 200, 250, 300, 350]\n\n# Create a list of travel times values\ntravel_times_values_85 = [100, 150, 200, 250, 300, 350]\n\n# Create a list of travel times values\ntravel_times_values_86 = [100, 150, 200, 250, 300, 350]\n\n# Create a list of travel times values\ntravel_times_values_87 = [100, 1"}
{"file": "dataset/ori_500/box_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Define the data\nx = np.linspace(0, 10, 100)\ny1 = np.sin(x)\ny2 = np.cos(x)\ny3 = np.tan(x)\n\n# Plot the data\nax.plot(x, y1, label='Only WSI Modality')\nax.plot(x, y2, label='Only CNV Modality')\nax.plot(x, y3, label='WSI+CNV Modality')\n\n# Add a legend\nax.legend()\n\n# Set the title and labels\nax.set_title('Modality Performance Comparison')\nax.set_xlabel('Time (s)')\nax.set_ylabel('Performance (%)')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Set the title of the plot\nax.set_title('0.25 HIAR')\n\n# Create a rectangle for the logo\nlogo = plt.Rectangle((0.45, 0.8), 0.1, 0.1, color='orange')\nax.add_patch(logo)\n\n# Create a scatter plot\nx = [1, 2, 3, 4, 5]\ny = [23.2, 23.0, 22.8, 22.6, 22.4]\nax.scatter(x, y, color='blue')\n\n# Set the x-axis label\nax.set_xlabel('PSNR (dB)')\n\n# Set the y-axis label\nax.set_ylabel('SNR (dB)')\n\n# Create a second subplot\nax2 = fig.add_subplot(122)\n\n# Set the title of the second plot\nax2.set_title('0.1 HIAR')\n\n# Create a rectangle for the logo\nlogo2 = plt.Rectangle((0.45, 0.8), 0.1, 0.1, color='orange')\nax2.add_patch(logo2)\n\n# Create a scatter plot\nx2 = [1, 2, 3, 4, 5]\ny2 = [19.8, 19.6, 19.4, 19.2, 19.0]\nax2.scatter(x2, y2, color='blue')\n\n# Set the x-axis label\nax2.set_xlabel('PSNR (dB)')\n\n# Set the y-axis label\nax2.set_ylabel('SNR (dB)')\n```"}
{"file": "dataset/ori_500/contour_1.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Set the title of the plot\nax.set_title('T-SNE plot for the output variable Y3')\n\n# Create a scatter plot with random data\nx = np.random.rand(50)\ny = np.random.rand(50)\ncolors = np.random.rand(50)\narea = (30 * np.random.rand(50))**2  # 0 to 15 point radii\nscatter = ax.scatter(x, y, s=area, c=colors, alpha=0.5)\n\n# Add a legend\nlegend_elements = [Line2D([0], [0], marker='o', color='w', label='Ground Truth',\n                          markerfacecolor='b', markersize=10),\n                    Line2D([0], [0], marker='o', color='w', label='Generated',\n                          markerfacecolor='r', markersize=10)]\nax.legend(handles=legend_elements, loc='upper right')\n\n# Set the limits of the x and y axes\nax.set_xlim(-80, 80)\nax.set_ylim(-80, 80)\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/contour_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('\u03bb(x, z)')\n\n# Create a color map for the plot\ncmap = plt.get_cmap('coolwarm')\n\n# Create a grid of points\nx = np.linspace(0, 1, 100)\ny = np.linspace(0, 1, 100)\nX, Y = np.meshgrid(x, y)\n\n# Calculate the values of \u03bb(x, z)\nZ = np.sin(X**2 + Y**2)\n\n# Plot the values using a contour plot\ncontour = ax.contourf(X, Y, Z, cmap=cmap)\n\n# Add a color bar to the plot\nfig.colorbar(contour)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/contour_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Set the background color of the plot\nax.set_facecolor('lightgrey')\n\n# Set the x-axis and y-axis limits\nax.set_xlim(50, 160)\nax.set_ylim(50, 100)\n\n# Set the x-axis and y-axis labels\nax.set_xlabel('SBP (mmHg)')\nax.set_ylabel('DBP (mmHg)')\n\n# Set the title of the plot\nax.set_title('Blood Pressure Data')\n\n# Create a scatter plot with random data points\nx = [100, 110, 120, 130, 140, 150, 160]\ny = [90, 80, 70, 60, 50, 40, 30]\nax.scatter(x, y, c='blue')\n\n# Create a scatter plot with random data points\nx = [100, 110, 120, 130, 140, 150, 160]\ny = [90, 80, 70, 60, 50, 40, 30]\nax.scatter(x, y, c='red')\n\n# Add a legend\nax.legend(['Female', 'Male'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/contour_4.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Set the limits of the plot\nax.set_xlim(-10, 10)\nax.set_ylim(-10, 10)\n\n# Draw a circle with radius 10\ncircle1 = plt.Circle((0, 0), 10, color='blue', fill=False)\nax.add_artist(circle1)\n\n# Draw a circle with radius 8\ncircle2 = plt.Circle((0, 0), 8, color='green', fill=False)\nax.add_artist(circle2)\n\n# Draw a circle with radius 6\ncircle3 = plt.Circle((0, 0), 6, color='cyan', fill=False)\nax.add_artist(circle3)\n\n# Draw a circle with radius 4\ncircle4 = plt.Circle((0, 0), 4, color='magenta', fill=False)\nax.add_artist(circle4)\n\n# Draw a circle with radius 2\ncircle5 = plt.Circle((0, 0), 2, color='yellow', fill=False)\nax.add_artist(circle5)\n\n# Draw a circle with radius 0\ncircle6 = plt.Circle((0, 0), 0, color='red', fill=True)\nax.add_artist(circle6)\n\n# Draw a line from -10 to 10\nline1 = plt.Line2D([-10, 10], [0, 0], color='blue')\nax.add_line(line1)\n\n# Draw a line from -10 to 10\nline2 = plt.Line2D([0, 0], [-10, 10], color='green')\nax.add_line(line2)\n\n# Draw a line from -10 to 10\nline3 = plt.Line2D([0, 0], [10, -10], color='cyan')\nax.add_line(line3)\n\n# Draw a line from -10 to 10\nline4 = plt.Line2D([10, -10], [0, 0], color='magenta')\nax.add_line(line4)\n\n# Draw a line from -10 to 10\nline5 = plt.Line2D([-10, 10], [0, 0], color='yellow')\nax.add_line(line5)\n\n# Draw a line from -10 to 10\nline6 = plt.Line2D([0, 0], [-10, 10], color='red')\nax.add_line(line6)\n\n# Draw a line from -10 to 10\nline7 = plt.Line2D([0, 0], [10, -10], color='blue')\nax.add_line(line7)\n\n# Draw a line from -10 to 10\nline8 = plt.Line2D([10, -10], [0, 0], color='green')\nax.add_line(line8)\n\n# Draw a line from -10 to 10\nline9 = plt.Line2D([-10, 10], [0, 0], color='cyan')\nax.add_line(line9)\n\n# Draw a line from -10 to 10\nline10 = plt.Line2D([0, 0], [-10, 10], color='magenta')\nax.add_line(line10)\n\n# Draw a line from -10 to 10\nline11 = plt.Line2D([0, 0], [10, -10], color='yellow')\nax.add_line(line11)\n\n# Draw a line from -10 to 10\nline12 = plt.Line2D([10, -10], [0, 0], color='red')\nax.add_line(line12)\n\n# Draw a line from -10 to 10\nline13 = plt.Line2D([-10, 10], [0, 0], color='blue')\nax.add_line(line13)\n\n# Draw a line from -10 to 10\nline14 = plt.Line2D([0, 0], [-10, 10], color='green')\nax.add_line(line14)\n\n# Draw a line from -10 to 10\nline15 = plt.Line2D([0, 0], [10, -10], color='cyan')\nax.add_line(line15)\n\n# Draw a line from -10 to 10\nline16 = plt.Line2D([10, -10], [0, 0], color='magenta')\nax.add_line(line16)\n\n# Draw a line from -10 to 10\nline17 = plt.Line2D([-10, 10], [0, 0], color='yellow')\nax.add_line(line17)\n\n# Draw a line from -10 to 10\nline18 = plt.Line2D([0, 0], [-10, 10], color='red')\nax.add_line(line18)\n\n# Draw a line from -10 to 10\nline19 = plt.Line2D([0, 0], [10, -10], color='blue')\nax.add_line(line19)\n\n# Draw a line from -10 to 10\nline20 = plt.Line2D([10, -10], [0, 0], color='green')\nax.add_line(line20)\n\n# Draw a line from -10 to 10\nline21 = plt.Line2D([-10, 10], [0, 0], color='cyan')\nax.add_line(line21)\n\n# Draw a line from -10 to 10\nline22 = plt.Line2D([0, 0], [-10, 10], color='magenta')\nax.add_line(line22)\n\n# Draw a line from -10 to 10\nline23 = plt.Line2D([0, 0], [10, -10], color='yellow')\nax.add_line(line23)\n\n# Draw a line from -10 to 10\nline24 = plt.Line2D([10, -10], [0, 0], color='red')\nax.add_line(line24)\n\n# Draw a line from -10 to 10\nline25 = plt.Line2D([-10, 10], [0, 0], color='blue')\nax.add_line(line25)\n\n# Draw a line from -10 to 10\nline26 = plt.Line2D([0, 0], [-10, 10], color='green')\nax.add_line(line26)\n\n# Draw a line from -10 to 10\nline27 = plt.Line2D([0, 0], [10, -10], color='cyan')\nax.add_line(line27)\n\n# Draw a line from -10 to 10\nline28 = plt.Line2D([10, -10], [0, 0], color='magenta')\nax.add_line(line28)\n\n# Draw a line from -10 to 10\nline29 = plt.Line2D([-10, 10], [0, 0], color='yellow')\nax.add_line(line29)\n\n# Draw a line from -10 to 10\nline30 = plt.Line2D([0, 0], [-10, 10], color='red')\nax.add_line(line30)\n\n# Draw a line from -10 to 10\nline31 = plt.Line2D([0, 0], [10, -10], color='blue')\nax.add_line(line31)\n\n# Draw a line from -10 to 10\nline32 = plt.Line2D([10, -10], [0, 0], color='green')\nax.add_line(line32)\n\n# Draw a line from -10 to 10\nline33 = plt.Line2D([-10, 10], [0, 0], color='cyan')\nax.add_line(line33)\n\n# Draw a line from -10 to 10\nline34 = plt.Line2D([0, 0], [-10, 10], color='magenta')\nax.add_line(line34)\n\n# Draw a line from -10 to 10\nline35 = plt.Line2D([0, 0], [10, -10], color='yellow')\nax.add_line(line35)\n\n# Draw a line from -10 to 10\nline36 = plt.Line2D([10, -10], [0, 0], color='red')\nax.add_line(line36)\n\n# Draw a line from -10 to 10\nline37 = plt.Line2D([-10, 10], [0, 0], color='blue')\nax.add_line(line37)\n\n# Draw a line from -10 to 10\nline38 = plt.Line2D([0, 0], [-10, 10], color='green')\nax.add_line(line38)\n\n# Draw a line from -10 to 10\nline39 = plt.Line2D([0, 0], [10, -10], color='cyan')\nax.add_line(line39)\n\n# Draw a line from -10 to 10\nline40 = plt.Line2D([10, -10], [0, 0], color='magenta')\nax.add_line(line40)\n\n# Draw a line from -10 to 10\nline41 = plt.Line2D([-10, 10], [0, 0], color='yellow')\nax.add_line(line41)\n\n# Draw a line from -10 to 10\nline42 = plt.Line2D([0, 0], [-10, 10], color='red')\nax.add_line(line42)\n\n# Draw a line from -10 to 10\nline43 = plt.Line2D([0, 0], [10, -10], color='blue')\nax.add_line(line43)\n\n# Draw a line from -10 to 10\nline44 = plt.Line2D([10, -10], [0, 0], color='green')\nax.add_line(line44)\n\n# Draw a line from -10 to 10\nline45 = plt.Line2D([-10, 10], [0, 0], color='cyan')\nax.add_line(line45)\n\n# Draw a line from -10 to 10\nline46 = plt.Line2D([0, 0], [-10, 10], color='magenta')\nax.add_line(line46)\n\n# Draw a line from -10 to 10\nline47 = plt.Line2D([0, 0], [10, -10], color='yellow')\nax.add_line(line47)\n\n# Draw a line from -10 to 10\nline48 = plt.Line2D([10, -10], [0, 0], color='red')\nax.add_line(line48)\n\n# Draw a line from -10 to 10\nline49 = plt.Line2D([-10, 10], [0, 0], color='blue')\nax.add_line(line49)\n\n# Draw a line from -10 to 10\nline50 = plt.Line2D([0, 0], [-10, 10], color='green')\nax.add_line(line50)\n\n# Draw a line from -10 to 10\nline51 = plt.Line2D([0, 0], [10, -10], color='cyan')\nax.add_line(line51)\n\n# Draw a line from -10 to 10\nline52 = plt.Line2D([10, -10], [0, 0], color='magenta')\nax.add_line(line52)\n\n# Draw a line from -10 to 10\nline53 = plt.Line2D([-10, 10], [0, 0], color='yellow')\nax.add_line(line53)\n\n# Draw a line from -10 to 10\nline54 = plt.Line2D([0, 0], [-10, 10], color='red')\nax.add_line(line54)\n\n# Draw a line from -10 to 10\nline55 = plt.Line2D([0, 0], [10, -10], color='blue')\nax.add_line(line55)\n\n# Draw a line from -10 to 10\nline56 = plt.Line2D([10, -10], [0, 0], color='green')\nax.add_line(line56)\n\n# Draw a line from -10 to 10\nline57 = plt.Line2D([-10, 10], [0, 0], color='cyan')\nax.add_line(line57)\n\n# Draw a line from -10 to 10\nline58 = plt.Line2D([0, 0], [-10, 10], color='magenta')\nax.add_line(line58)\n\n# Draw a line from -10 to 10\nline59 = plt.Line2D([0, 0], [10, -10], color='yellow')\nax.add_line(line59)\n\n# Draw a line from -10 to 10\nline60 = plt.Line2D([10, -10], [0, 0], color='red')\nax.add_line(line60)\n\n# Draw a line from -10 to 10\nline61 = plt.Line2D([-10, 10], [0, 0], color='blue')\nax.add_line(line61)\n\n# Draw a line from -10 to 10\nline62 = plt.Line2D([0, 0], [-10, 10], color='green')\nax.add_line(line62)\n\n# Draw a line from -10 to 10\nline63 = plt.Line2D([0, 0], [10, -10], color='cyan')\nax.add_line(line63)\n\n# Draw a line from -10 to 10\nline64 = plt.Line2D([10, -10], [0, 0], color='magenta')\nax.add_line(line64)\n\n# Draw a line from -10 to 10\nline65 = plt.Line2D([-10, 10], [0, 0], color='yellow')\nax.add_line(line65)\n\n# Draw a line from -10 to 10\nline66 = plt.Line2D([0, 0], [-10, 10], color='red')\nax.add_line(line66)\n\n# Draw a line from -10 to 10\nline67 = plt.Line2D([0, 0], [10, -10], color='blue')\nax.add_line(line67)\n\n# Draw a line from -10 to 10\nline68 = plt.Line2D([10, -10], [0, 0], color='green')\nax.add_line(line68)\n\n# Draw a line from -10 to 10\nline69 = plt.Line2D([-10, 10], [0, 0], color='cyan')\nax.add_line(line69)\n\n# Draw a line from -10 to 10\nline70 = plt.Line2D([0, 0], [-10, 10], color='magenta')\nax.add_line(line70)\n\n# Draw a line from -10 to 10\nline71 = plt.Line2D([0, 0], [10, -10], color='yellow')\nax.add_line(line71)\n\n# Draw a line from -10 to 10\nline72 = plt.Line2D([10, -10], [0, 0], color='red')\nax.add_line(line72)\n\n# Draw a line from -10 to 10\nline73 = plt.Line2D([-10, 10], [0, 0], color='blue')\nax.add_line(line73)\n\n# Draw a line from -10 to 10\nline74 = plt.Line2D([0, 0], [-10, 10], color='green')\nax.add_line(line74)\n\n# Draw a line from -10 to 10\nline75 = plt.Line2D([0, 0], [10, -10], color='cyan')\nax.add_line(line75)\n\n# Draw a line from -10 to 10\nline76 = plt.Line2D([10, -10], [0, 0], color='magenta')\nax.add_line(line76)\n\n# Draw a line from -10 to 10\nline77 = plt.Line2D([-10, 10], [0, 0], color='yellow')\nax.add_line(line77)\n\n# Draw a line from -10 to 10\nline78 = plt.Line2D([0, 0], [-10, 10], color='red')\nax.add_line(line78)\n\n# Draw a line from -10 to 10\nline79 = plt.Line2D([0, 0], [10, -10], color='blue')\nax.add_line(line79)\n\n# Draw a line from -10 to 10\nline80 = plt.Line2D([10, -10], [0, 0], color='green')\nax.add_line(line80)\n\n# Draw a line from -10 to 10\nline81 = plt.Line2D([-10, 10], [0, 0], color='cyan')\nax.add_line(line81)\n\n# Draw a line from -10 to 10\nline82 = plt.Line2D([0, 0], [-10, 10], color='magenta')\nax.add_line(line82)\n\n# Draw a line from -10 to 10\nline83 = plt.Line2D([0, 0], [10, -10], color='yellow')\nax.add_line(line8"}
{"file": "dataset/ori_500/contour_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Set the color of the rectangle\nax.set_facecolor('blue')\n\n# Draw a circle with radius 10\ncircle = plt.Circle((5, 5), 10, color='red')\nax.add_artist(circle)\n\n# Draw a circle with radius 8\ncircle = plt.Circle((5, 5), 8, color='orange')\nax.add_artist(circle)\n\n# Draw a circle with radius 6\ncircle = plt.Circle((5, 5), 6, color='green')\nax.add_artist(circle)\n\n# Draw a circle with radius 4\ncircle = plt.Circle((5, 5), 4, color='yellow')\nax.add_artist(circle)\n\n# Draw a circle with radius 2\ncircle = plt.Circle((5, 5), 2, color='cyan')\nax.add_artist(circle)\n\n# Draw a circle with radius 0\ncircle = plt.Circle((5, 5), 0, color='magenta')\nax.add_artist(circle)\n\n# Set the limits of the plot\nax.set_xlim(0, 10)\nax.set_ylim(0, 10)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/density_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 3.0))\n\n# Define the data\nx = np.linspace(8, 15, 100)\ny = np.sin(x)\n\n# Plot the data\nax.plot(x, y, color='blue')\n\n# Set the title and labels\nax.set_title('Temperature over Time')\nax.set_xlabel('Time (hours)')\nax.set_ylabel('Temperature (Celsius)')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/density_2.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 4.0))\n\n# Create a rectangle\nrectangle = plt.Rectangle((0.25, 0.25), 0.5, 0.5, color='pink')\nax.add_patch(rectangle)\n\n# Create a triangle\ntriangle = plt.Polygon([[0.25, 0.75], [0.75, 0.75], [0.5, 0.25]], color='pink')\nax.add_patch(triangle)\n\n# Set the limits of the plot\nax.set_xlim(0, 1)\nax.set_ylim(0, 1)\n\n# Display the plot\nplt.show()"}
{"file": "dataset/ori_500/density_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 4.0))\n\n# Define the data\nx = np.linspace(-1.0, 1.0, 100)\ny = np.sin(x)\n\n# Plot the data\nax.plot(x, y, color='blue')\n\n# Set the title\nax.set_title('KDE Plot of Spearman Coefficient Distribution')\n\n# Set the x-axis label\nax.set_xlabel('Spearman Coefficient')\n\n# Set the y-axis label\nax.set_ylabel('Density')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/density_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(9.0, 6.0))\n\n# Set the x-axis limits\nax.set_xlim(7, 15)\n\n# Set the y-axis limits\nax.set_ylim(0, 0.7)\n\n# Set the grid lines\nax.grid(True)\n\n# Set the tick marks\nax.set_xticks(np.arange(7, 16, 1))\nax.set_yticks(np.arange(0, 0.8, 0.1))\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the title of the plot\nax.set_title('Price Distribution')\n\n# Set the labels for the x and y axes\nax.set_xlabel('Time (p)')\nax.set_ylabel('Price (p_i)')\n\n# Create a rectangle patch\nrect = plt.Rectangle((7, 0), 2, 0.7, color='red')\nax.add_patch(rect)\n\n# Create a line plot\nx = np.linspace(7, 15, 100)\ny = np.sin(x)\nax.plot(x, y, 'b-')\n\n# Create a scatter plot\nx = np.random.rand(50)\ny = np.random.rand(50)\nax.scatter(x, y, c='r')\n\n# Create a bar chart\nx = np.arange(7, 15, 1)\ny = np.random.rand(9)\nax.bar(x, y, color='g')\n\n# Create a histogram\nx = np.random.randn(1000)\nax.hist(x, bins=30, color='purple')\n\n# Create a pie chart\nx = [0.2, 0.3, 0.5]\nlabels = ['Red', 'Green', 'Blue']\nax.pie(x, labels=labels, colors=['r', 'g', 'b'])\n\n# Create a heatmap\nx = np.random.rand(10, 10)\nax.imshow(x, cmap='hot', interpolation='nearest')\n\n# Create a contour plot\nx = np.linspace(7, 15, 100)\ny = np.linspace(0, 0.7, 100)\nX, Y = np.meshgrid(x, y)\nZ = np.sin(X) + np.cos(Y)\nCS = ax.contourf(X, Y, Z, cmap='coolwarm')\n\n# Create a polar plot\ntheta = np.linspace(0, 2*np.pi, 100)\nr = np.linspace(0, 1, 100)\ntheta, r = np.meshgrid(theta, r)\nax.polar(theta, r, 'b.')\n\n# Create a 3D plot\nfrom mpl_toolkits.mplot3d import Axes3D\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nx = np.linspace(7, 15, 100)\ny = np.linspace(0, 0.7, 100)\nX, Y = np.meshgrid(x, y)\nZ = np.sin(X) + np.cos(Y)\nax.plot_surface(X, Y, Z, cmap='viridis')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/density_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(9.0, 6.0))\n\n# Set the color of the background\nax.set_facecolor('lightgrey')\n\n# Set the grid lines\nax.grid(True)\n\n# Set the x-axis and y-axis labels\nax.set_xlabel('Density')\nax.set_ylabel('Value')\n\n# Set the x-axis and y-axis limits\nax.set_xlim(0, 1)\nax.set_ylim(0, 15)\n\n# Set the x-axis and y-axis ticks\nax.set_xticks([0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1])\nax.set_yticks([0, 2, 4, 6, 8, 10, 12, 14])\n\n# Set the x-axis and y-axis tick labels\nax.set_xticklabels(['0.0', '0.1', '0.2', '0.3', '0.4', '0.5', '0.6', '0.7', '0.8', '0.9', '1.0'])\nax.set_yticklabels(['0', '2', '4', '6', '8', '10', '12', '14'])\n\n# Set the title of the plot\nax.set_title('Price vs Density')\n\n# Set the color of the plot\nax.plot([0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1], [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20], color='blue')\n\n# Set the color of the legend\nax.legend(['Gucci', 'Chanel'], loc='upper left')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Set the x-axis limits\nax.set_xlim(-0.8, 0.8)\n\n# Set the y-axis limits\nax.set_ylim(-1.75, 0.25)\n\n# Set the x-axis ticks\nax.set_xticks([-0.8, -0.6, -0.4, -0.2, 0, 0.2, 0.4, 0.6, 0.8])\n\n# Set the y-axis ticks\nax.set_yticks([-1.75, -1.5, -1.25, -1, -0.75, -0.5, -0.25, 0])\n\n# Set the x-axis tick labels\nax.set_xticklabels(['Deep Ens.', 'Dropout', 'Laplace', 'SNPG', 'HET-XL', 'Baseline', 'GP', 'Shallow Ens.', 'DUQ'])\n\n# Set the y-axis tick labels\nax.set_yticklabels(['-1.75', '-1.5', '-1.25', '-1', '-0.75', '-0.5', '-0.25', '0'])\n\n# Set the x-axis label\nax.set_xlabel('Log Probability')\n\n# Set the y-axis label\nax.set_ylabel('Log Loss')\n\n# Set the title of the plot\nax.set_title('Log Loss vs Log Probability')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Corr. Pred.', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=12, color='blue')\n\n# Set the color of the legend\nax.legend(['Distributional', 'Deterministic'], loc='upper left', bbox_to_anchor=(1,1), fancybox=True, shadow=True)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Expert dimension')\n\n# Define the data for the plot\nx = [1, 2, 3, 4, 5, 6, 7, 8]\ny = [5, 6, 5, 7, 6, 5, 6, 5]\n\n# Plot the data\nax.plot(x, y)\n\n# Set the x-axis label\nax.set_xlabel('Number of experts')\n\n# Set the y-axis label\nax.set_ylabel('IQM Human normalized score')\n\n# Set the color of the line\nax.plot(x, y, color='blue')\n\n# Set the color of the markers\nax.plot(x, y, 'o', color='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the background\nax.set_facecolor('lightgray')\n\n# Set the color of the text\nax.set_color_cycle(['red', 'green', 'blue'])\n\n# Set the color of the legend\nax.legend(['Baseline', 'SoftMoE (unchanged)', 'SoftMoE (\u2202 NumExperts)'])\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the background\nax.set_facecolor('lightgray')\n\n# Set the color of the text\nax.set_color_cycle(['red', 'green', 'blue'])\n\n# Set the color of the legend\nax.legend(['Baseline', 'SoftMoE (unchanged)', 'SoftMoE (\u2202 NumExperts)'])\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the background\nax.set_facecolor('lightgray')\n\n# Set the color of the text\nax.set_color_cycle(['red', 'green', 'blue'])\n\n# Set the color of the legend\nax.legend(['Baseline', 'SoftMoE (unchanged)', 'SoftMoE (\u2202 NumExperts)'])\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the background\nax.set_facecolor('lightgray')\n\n# Set the color of the text\nax.set_color_cycle(['red', 'green', 'blue'])\n\n# Set the color of the legend\nax.legend(['Baseline', 'SoftMoE (unchanged)', 'SoftMoE (\u2202 NumExperts)'])\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the background\nax.set_facecolor('lightgray')\n\n# Set the color of the text\nax.set_color_cycle(['red', 'green', 'blue'])\n\n# Set the color of the legend\nax.legend(['Baseline', 'SoftMoE (unchanged)', 'SoftMoE (\u2202 NumExperts)'])\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the background\nax.set_facecolor('lightgray')\n\n# Set the color of the text\nax.set_color_cycle(['red', 'green', 'blue'])\n\n# Set the color of the legend\nax.legend(['Baseline', 'SoftMoE (unchanged)', 'SoftMoE (\u2202 NumExperts)'])\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the background\nax.set_facecolor('lightgray')\n\n# Set the color of the text\nax.set_color_cycle(['red', 'green', 'blue'])\n\n# Set the color of the legend\nax.legend(['Baseline', 'SoftMoE (unchanged)', 'SoftMoE (\u2202 NumExperts)'])\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the background\nax.set_facecolor('lightgray')\n\n# Set the color of the text\nax.set_color_cycle(['red', 'green', 'blue'])\n\n# Set the color of the legend\nax.legend(['Baseline', 'SoftMoE (unchanged)', 'SoftMoE (\u2202 NumExperts)'])\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the background\nax.set_facecolor('lightgray')\n\n# Set the color of the text\nax.set_color_cycle(['red', 'green', 'blue'])\n\n# Set the color of the legend\nax.legend(['Baseline', 'SoftMoE (unchanged)', 'SoftMoE (\u2202 NumExperts)'])\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the background\nax.set_facecolor('lightgray')\n\n# Set the color of the text\nax.set_color_cycle(['red', 'green', 'blue'])\n\n# Set the color of the legend\nax.legend(['Baseline', 'SoftMoE (unchanged)', 'SoftMoE (\u2202 NumExperts)'])\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the background\nax.set_facecolor('lightgray')\n\n# Set the color of the text\nax.set_color_cycle(['red', 'green', 'blue'])\n\n# Set the color of the legend\nax.legend(['Baseline', 'SoftMoE (unchanged)', 'SoftMoE (\u2202 NumExperts)'])\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the background\nax.set_facecolor('lightgray')\n\n# Set the color of the text\nax.set_color_cycle(['red', 'green', 'blue'])\n\n# Set the color of the legend\nax.legend(['Baseline', 'SoftMoE (unchanged)', 'SoftMoE (\u2202 NumExperts)'])\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the background\nax.set_facecolor('lightgray')\n\n# Set the color of the text\nax.set_color_cycle(['red', 'green', 'blue'])\n\n# Set the color of the legend\nax.legend(['Baseline', 'SoftMoE (unchanged)', 'SoftMoE (\u2202 NumExperts)'])\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the background\nax.set_facecolor('lightgray')\n\n# Set the color of the text\nax.set_color_cycle(['red', 'green', 'blue'])\n\n# Set the color of the legend\nax.legend(['Baseline', 'SoftMoE (unchanged)', 'SoftMoE (\u2202 NumExperts)'])\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the background\nax.set_facecolor('lightgray')\n\n# Set the color of the text\nax.set_color_cycle(['red', 'green', 'blue'])\n\n# Set the color of the legend\nax.legend(['Baseline', 'SoftMoE (unchanged)', 'SoftMoE (\u2202 NumExperts)'])\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the background\nax.set_facecolor('lightgray')\n\n# Set the color of the text\nax.set_color_cycle(['red', 'green', 'blue'])\n\n# Set the color of the legend\nax.legend(['Baseline', 'SoftMoE (unchanged)', 'SoftMoE (\u2202 NumExperts)'])\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the background\nax.set_facecolor('lightgray')\n\n# Set the color of the text\nax.set_color_cycle(['red', 'green', 'blue'])\n\n# Set the color of the legend\nax.legend(['Baseline', 'SoftMoE (unchanged)', 'SoftMoE (\u2202 NumExperts)'])\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the background\nax.set_facecolor('lightgray')\n\n# Set the color of the text\nax.set_color_cycle(['red', 'green', 'blue'])\n\n# Set the color of the legend\nax.legend(['Baseline', 'SoftMoE (unchanged)', 'SoftMoE (\u2202 NumExperts)'])\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the background\nax.set_facecolor('lightgray')\n\n# Set the color of the text\nax.set_color_cycle(['red', 'green', 'blue'])\n\n# Set the color of the legend\nax.legend(['Baseline', 'SoftMoE (unchanged)', 'SoftMoE (\u2202 NumExperts)'])\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the background\nax.set_facecolor('lightgray')\n\n# Set the color of the text\nax.set_color_cycle(['red', 'green', 'blue'])\n\n# Set the color of the legend\nax.legend(['Baseline', 'SoftMoE (unchanged)', 'SoftMoE (\u2202 NumExperts)'])\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the background\nax.set_facecolor('lightgray')\n\n# Set the color of the text\nax.set_color_cycle(['red', 'green', 'blue'])\n\n# Set the color of the legend\nax.legend(['Baseline', 'SoftMoE (unchanged)', 'SoftMoE (\u2202 NumExperts)'])\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the background\nax.set_facecolor('lightgray')\n\n# Set the color of the text\nax.set_color_cycle(['red', 'green', 'blue'])\n\n# Set the color of the legend\nax.legend(['Baseline', 'SoftMoE (unchanged)', 'SoftMoE (\u2202 NumExperts)'])\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the background\nax.set_facecolor('lightgray')\n\n# Set the color of the text\nax.set_color_cycle(['red', 'green', 'blue'])\n\n# Set the color of the legend\nax.legend(['Baseline', 'SoftMoE (unchanged)', 'SoftMoE (\u2202 NumExperts)'])\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the background\nax.set_facecolor('lightgray')\n\n# Set the color of the text\nax.set_color_cycle(['red', 'green', 'blue'])\n\n# Set the color of the legend\nax.legend(['Baseline', 'SoftMoE (unchanged)', 'SoftMoE (\u2202 NumExperts)'])\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the background\nax.set_facecolor('lightgray')\n\n# Set the color of the text\nax.set_color_cycle(['red', 'green', 'blue'])\n\n# Set the color of the legend\nax.legend"}
{"file": "dataset/ori_500/errorbar_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Set the title of the plot\nax.set_title('Accuracy by hospital and method')\n\n# Create a bar chart with the data\nax.bar(['Hospital 1', 'Hospital 2', 'Hospital 3'], [0.748, 0.762, 0.709], color='blue')\nax.bar(['Hospital 1', 'Hospital 2', 'Hospital 3'], [0.759, 0.748, 0.713], color='green')\nax.bar(['Hospital 1', 'Hospital 2', 'Hospital 3'], [0.762, 0.78, 0.687], color='orange')\n\n# Add a legend\nax.legend(['Baseline 1', 'Baseline 2', 'FedMM'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Set the background color of the plot\nax.set_facecolor('#F0F0F0')\n\n# Set the title of the plot\nax.set_title('Car Prices (valuation 40)')\n\n# Set the x-axis label\nax.set_xlabel('Car Models')\n\n# Set the y-axis label\nax.set_ylabel('Price')\n\n# Set the x-axis tick labels\nax.set_xticks([0, 1, 2, 3])\nax.set_xticklabels(['GPT-4 Buyer', 'Claude-2.1 Buyer', 'Claude-3 Buyer', 'GPT-3.5 Buyer'])\n\n# Set the y-axis tick labels\nax.set_yticks([-20, -10, 0, 10, 20])\n\n# Set the y-axis tick labels\nax.set_yticklabels(['-20', '-10', '0', '10', '20'])\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle"}
{"file": "dataset/ori_500/errorbar_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Set the title of the plot\nax.set_title('DNN Performance')\n\n# Set the x-axis label\nax.set_xlabel('Number of Layers')\n\n# Set the y-axis label\nax.set_ylabel('Accuracy')\n\n# Set the x-axis limits\nax.set_xlim(0.5, 1.5)\n\n# Set the y-axis limits\nax.set_ylim(0.5, 0.9)\n\n# Set the x-ticks\nax.set_xticks([0.5, 1.0, 1.5])\n\n# Set the x-tick labels\nax.set_xticklabels(['[m]', '[\u0394R]', '[none]'])\n\n# Set the y-ticks\nax.set_yticks([0.5, 0.6, 0.7, 0.8, 0.9])\n\n# Set the y-tick labels\nax.set_yticklabels(['[m]', '[\u0394R]', '[\u0394R^-1]', '[none]', ''])\n\n# Set the grid lines\nax.grid(True)\n\n# Set the background color\nax.set_facecolor('#f0f0f0')\n\n# Set the border color\nax.spines['bottom'].set_color('#000000')\nax.spines['top'].set_color('#000000')\nax.spines['right'].set_color('#000000')\nax.spines['left'].set_color('#000000')\n\n# Set the tick colors\nax.tick_params(axis='x', colors='#000000')\nax.tick_params(axis='y', colors='#000000')\n\n# Set the tick width\nax.tick_params(width=2)\n\n# Set the tick length\nax.tick_params(length=10)\n\n# Set the tick direction\nax.tick_params(direction='in')\n\n# Set the tick rotation\nax.tick_params(rotation=45)\n\n# Set the tick label rotation\nax.tick_params(labelrotation=45)\n\n# Set the tick label color\nax.tick_params(labelcolor='#000000')\n\n# Set the tick label font size\nax.tick_params(labelsize=12)\n\n# Set the tick label font weight\nax.tick_params(labelweight='bold')\n\n# Set the tick label font style\nax.tick_params(labelstyle='italic')\n\n# Set the tick label font family\nax.tick_params(labelfamily='serif')\n\n# Set the tick label font variant\nax.tick_params(labelvariant='normal')\n\n# Set the tick label font stretch\nax.tick_params(labelstretch='normal')\n\n# Set the tick label font size\nax.tick_params(labelsize=12)\n\n# Set the tick label font weight\nax.tick_params(labelweight='bold')\n\n# Set the tick label font style\nax.tick_params(labelstyle='italic')\n\n# Set the tick label font family\nax.tick_params(labelfamily='serif')\n\n# Set the tick label font variant\nax.tick_params(labelvariant='normal')\n\n# Set the tick label font stretch\nax.tick_params(labelstretch='normal')\n\n# Set the tick label font size\nax.tick_params(labelsize=12)\n\n# Set the tick label font weight\nax.tick_params(labelweight='bold')\n\n# Set the tick label font style\nax.tick_params(labelstyle='italic')\n\n# Set the tick label font family\nax.tick_params(labelfamily='serif')\n\n# Set the tick label font variant\nax.tick_params(labelvariant='normal')\n\n# Set the tick label font stretch\nax.tick_params(labelstretch='normal')\n\n# Set the tick label font size\nax.tick_params(labelsize=12)\n\n# Set the tick label font weight\nax.tick_params(labelweight='bold')\n\n# Set the tick label font style\nax.tick_params(labelstyle='italic')\n\n# Set the tick label font family\nax.tick_params(labelfamily='serif')\n\n# Set the tick label font variant\nax.tick_params(labelvariant='normal')\n\n# Set the tick label font stretch\nax.tick_params(labelstretch='normal')\n\n# Set the tick label font size\nax.tick_params(labelsize=12)\n\n# Set the tick label font weight\nax.tick_params(labelweight='bold')\n\n# Set the tick label font style\nax.tick_params(labelstyle='italic')\n\n# Set the tick label font family\nax.tick_params(labelfamily='serif')\n\n# Set the tick label font variant\nax.tick_params(labelvariant='normal')\n\n# Set the tick label font stretch\nax.tick_params(labelstretch='normal')\n\n# Set the tick label font size\nax.tick_params(labelsize=12)\n\n# Set the tick label font weight\nax.tick_params(labelweight='bold')\n\n# Set the tick label font style\nax.tick_params(labelstyle='italic')\n\n# Set the tick label font family\nax.tick_params(labelfamily='serif')\n\n# Set the tick label font variant\nax.tick_params(labelvariant='normal')\n\n# Set the tick label font stretch\nax.tick_params(labelstretch='normal')\n\n# Set the tick label font size\nax.tick_params(labelsize=12)\n\n# Set the tick label font weight\nax.tick_params(labelweight='bold')\n\n# Set the tick label font style\nax.tick_params(labelstyle='italic')\n\n# Set the tick label font family\nax.tick_params(labelfamily='serif')\n\n# Set the tick label font variant\nax.tick_params(labelvariant='normal')\n\n# Set the tick label font stretch\nax.tick_params(labelstretch='normal')\n\n# Set the tick label font size\nax.tick_params(labelsize=12)\n\n# Set the tick label font weight\nax.tick_params(labelweight='bold')\n\n# Set the tick label font style\nax.tick_params(labelstyle='italic')\n\n# Set the tick label font family\nax.tick_params(labelfamily='serif')\n\n# Set the tick label font variant\nax.tick_params(labelvariant='normal')\n\n# Set the tick label font stretch\nax.tick_params(labelstretch='normal')\n\n# Set the tick label font size\nax.tick_params(labelsize=12)\n\n# Set the tick label font weight\nax.tick_params(labelweight='bold')\n\n# Set the tick label font style\nax.tick_params(labelstyle='italic')\n\n# Set the tick label font family\nax.tick_params(labelfamily='serif')\n\n# Set the tick label font variant\nax.tick_params(labelvariant='normal')\n\n# Set the tick label font stretch\nax.tick_params(labelstretch='normal')\n\n# Set the tick label font size\nax.tick_params(labelsize=12)\n\n# Set the tick label font weight\nax.tick_params(labelweight='bold')\n\n# Set the tick label font style\nax.tick_params(labelstyle='italic')\n\n# Set the tick label font family\nax.tick_params(labelfamily='serif')\n\n# Set the tick label font variant\nax.tick_params(labelvariant='normal')\n\n# Set the tick label font stretch\nax.tick_params(labelstretch='normal')\n\n# Set the tick label font size\nax.tick_params(labelsize=12)\n\n# Set the tick label font weight\nax.tick_params(labelweight='bold')\n\n# Set the tick label font style\nax.tick_params(labelstyle='italic')\n\n# Set the tick label font family\nax.tick_params(labelfamily='serif')\n\n# Set the tick label font variant\nax.tick_params(labelvariant='normal')\n\n# Set the tick label font stretch\nax.tick_params(labelstretch='normal')\n\n# Set the tick label font size\nax.tick_params(labelsize=12)\n\n# Set the tick label font weight\nax.tick_params(labelweight='bold')\n\n# Set the tick label font style\nax.tick_params(labelstyle='italic')\n\n# Set the tick label font family\nax.tick_params(labelfamily='serif')\n\n# Set the tick label font variant\nax.tick_params(labelvariant='normal')\n\n# Set the tick label font stretch\nax.tick_params(labelstretch='normal')\n\n# Set the tick label font size\nax.tick_params(labelsize=12)\n\n# Set the tick label font weight\nax.tick_params(labelweight='bold')\n\n# Set the tick label font style\nax.tick_params(labelstyle='italic')\n\n# Set the tick label font family\nax.tick_params(labelfamily='serif')\n\n# Set the tick label font variant\nax.tick_params(labelvariant='normal')\n\n# Set the tick label font stretch\nax.tick_params(labelstretch='normal')\n\n# Set the tick label font size\nax.tick_params(labelsize=12)\n\n# Set the tick label font weight\nax.tick_params(labelweight='bold')\n\n# Set the tick label font style\nax.tick_params(labelstyle='italic')\n\n# Set the tick label font family\nax.tick_params(labelfamily='serif')\n\n# Set the tick label font variant\nax.tick_params(labelvariant='normal')\n\n# Set the tick label font stretch\nax.tick_params(labelstretch='normal')\n\n# Set the tick label font size\nax.tick_params(labelsize=12)\n\n# Set the tick label font weight\nax.tick_params(labelweight='bold')\n\n# Set the tick label font style\nax.tick_params(labelstyle='italic')\n\n# Set the tick label font family\nax.tick_params(labelfamily='serif')\n\n# Set the tick label font variant\nax.tick_params(labelvariant='normal')\n\n# Set the tick label font stretch\nax.tick_params(labelstretch='normal')\n\n# Set the tick label font size\nax.tick_params(labelsize=12)\n\n# Set the tick label font weight\nax.tick_params(labelweight='bold')\n\n# Set the tick label font style\nax.tick_params(labelstyle='italic')\n\n# Set the tick label font family\nax.tick_params(labelfamily='serif')\n\n# Set the tick label font variant\nax.tick_params(labelvariant='normal')\n\n# Set the tick label font stretch\nax.tick_params(labelstretch='normal')\n\n# Set the tick label font size\nax.tick_params(labelsize=12)\n\n# Set the tick label font weight\nax.tick_params(labelweight='bold')\n\n# Set the tick label font style\nax.tick_params(labelstyle='italic')\n\n# Set the tick label font family\nax.tick_params(labelfamily='serif')\n\n# Set the tick label font variant\nax.tick_params(labelvariant='normal')\n\n# Set the tick label font stretch\nax.tick_params(labelstretch='normal')\n\n# Set the tick label font size\nax.tick_params(labelsize=12)\n\n# Set the tick label font weight\nax.tick_params(labelweight='bold')\n\n# Set the tick label font style\nax.tick_params(labelstyle='italic')\n\n# Set the tick label font family\nax.tick_params(labelfamily='serif')\n\n# Set the tick label font variant\nax.tick_params(labelvariant='normal')\n\n# Set the tick label font stretch\nax.tick_params(labelstretch='normal')\n\n# Set the tick label font size\nax.tick_params(labelsize=12)\n\n# Set the tick label font weight\nax.tick_params(labelweight='bold')\n\n# Set the tick label font style\nax.tick_params(labelstyle='italic')\n\n# Set the tick label font family\nax.tick_params(labelfamily='serif')\n\n# Set the tick label font variant\nax.tick_params(labelvariant='normal')\n\n# Set the tick label font stretch\nax.tick_params(labelstretch='normal')\n\n# Set the tick label font size\nax.tick_params(labelsize=12)\n\n# Set the tick label font weight\nax.tick_params(labelweight='bold')\n\n# Set the tick label font style\nax.tick_params(labelstyle='italic')\n\n# Set the tick label font family\nax.tick_params(labelfamily='serif')\n\n# Set the tick label font variant\nax.tick_params(labelvariant='normal')\n\n# Set the tick label font stretch\nax.tick_params(labelstretch='normal')\n\n# Set the tick label font size\nax.tick_params(labelsize=12)\n\n# Set the tick label font weight\nax.tick_params(labelweight='bold')\n\n# Set the tick label font style\nax.tick_params(labelstyle='italic')\n\n# Set the tick label font family\nax.tick_params(labelfamily='serif')\n\n# Set the tick label font variant\nax.tick_params(labelvariant='normal')\n\n# Set the tick label font stretch\nax.tick_params(labelstretch='normal')\n\n# Set the tick label font size\nax.tick_params(labelsize=12)\n\n# Set the tick label font weight\nax.tick_params(labelweight='bold')\n\n# Set the tick label font style\nax.tick_params(labelstyle='italic')\n\n# Set the tick label font family\nax.tick_params(labelfamily='serif')\n\n# Set the tick label font variant\nax.tick_params(labelvariant='normal')\n\n# Set the tick label font stretch\nax.tick_params(labelstretch='normal')\n\n# Set the tick label font size\nax.tick_params(labelsize=12)\n\n# Set the tick label font weight\nax.tick_params(labelweight='bold')\n\n# Set the tick label font style\nax.tick_params(labelstyle='italic')\n\n# Set the tick label font family\nax.tick_params(labelfamily='serif')\n\n# Set the tick label font variant\nax.tick_params(labelvariant='normal')\n\n# Set the tick label font stretch\nax.tick_params(labelstretch='normal')\n\n# Set the tick label font size\nax.tick_params(labelsize=12)\n\n# Set the tick label font weight\nax.tick_params(labelweight='bold')\n\n# Set the tick label font style\nax.tick_params(labelstyle='italic')\n\n# Set the tick label font family\nax.tick_params(labelfamily='serif')\n\n# Set the tick label font variant\nax.tick_params(labelvariant='normal')\n\n# Set the tick label font stretch\nax.tick_params(labelstretch='normal')\n\n# Set the tick label font size\nax.tick_params(labelsize=12)\n\n# Set the tick label font weight\nax.tick_params(labelweight='bold')\n\n# Set the tick label font style\nax.tick_params(labelstyle='italic')\n\n# Set the tick label font family\nax.tick_params(labelfamily='serif')\n\n# Set the tick label font variant\nax.tick_params(labelvariant='normal')\n\n# Set the tick label font stretch\nax.tick_params(labelstretch='normal')\n\n# Set the tick label font size\nax.tick_params(labelsize=12)\n\n# Set the tick label font weight\nax.tick_params(labelweight='bold')\n\n# Set the tick label font style\nax.tick_params(labelstyle='italic')\n\n# Set the tick label font family\nax.tick_params(labelfamily='serif')\n\n# Set the tick label font variant\nax.tick_params(labelvariant='normal')\n\n# Set the tick label font stretch\nax.tick_params(labelstretch='normal')\n\n# Set the tick label font size\nax.tick_params(labelsize=12)\n\n# Set the tick label font weight\nax.tick_params(labelweight='bold')\n\n# Set the tick label font style\nax.tick_params(labelstyle='italic')\n\n# Set the tick label font family\nax.tick_params(labelfamily='serif')\n\n# Set the tick label font variant\nax.tick_params(labelvariant='normal')\n\n# Set the tick label font stretch\nax.tick_params(labelstretch='normal')\n\n# Set the tick label font size\nax.tick_params(labelsize=12)\n\n# Set the tick label font weight\nax.tick_params(labelweight='bold')\n\n# Set the tick label font style\nax.tick_params(labelstyle='italic')\n\n# Set the tick label font family\nax.tick_params(labelfamily='serif')\n\n# Set the tick label font variant\nax.tick_params(labelvariant='normal')\n\n# Set the tick label font stretch\nax.tick_params(labelstretch='normal')\n\n# Set the tick label font size\nax.tick_params(labelsize=12)\n\n# Set the tick label font weight\nax.tick_params(labelweight='bold')\n\n# Set the tick label font style\nax.tick_params(labelstyle='italic')\n\n# Set the tick label font family\nax.tick_params(labelfamily='serif')\n\n# Set the tick label font variant\nax.tick_params(labelvariant='normal')\n\n# Set the tick label font stretch\nax.tick_params(labelstretch='normal')\n\n# Set the tick label font size\nax.tick_params(labelsize=12)\n\n# Set the tick label font weight\nax.tick_params(labelweight='bold')\n\n# Set the tick label font style\nax.tick_params(labelstyle='italic')\n\n# Set the tick label font family\nax.tick_params(labelfamily='serif')\n\n# Set the tick label font variant\nax.tick_params(labelvariant='normal')\n\n# Set the tick label font stretch\nax.tick_params(labelstretch='normal')\n\n# Set the tick label font size\nax.tick_params(labelsize=12)\n\n# Set the tick label font weight\nax.tick_params(labelweight='bold')\n\n# Set the tick label font style\nax.tick_params(labelstyle='italic')\n\n# Set the tick label font family\nax.tick_params(labelfamily='serif')\n\n# Set the tick label font variant\nax.tick_params(labelvariant='normal')\n\n# Set the tick label font stretch\nax.tick_params(labelstretch='normal')\n\n# Set the tick label font size\nax.tick_params(labelsize=12)\n\n# Set the tick label font weight\nax.tick_params(labelweight='bold')\n\n# Set the tick label font style\nax.tick_params(labelstyle='italic')\n\n# Set the tick label font family\nax.tick_params(labelfamily='serif')\n\n# Set the tick label font variant\nax.tick_params(labelvariant='normal')\n\n# Set the tick label font stretch\nax.tick_params(labelstretch='normal')\n\n# Set the tick label font size\nax.tick_params(labelsize=12)\n\n# Set the tick label font weight\nax.tick_params(labelweight='bold')\n\n# Set the tick label font style\nax.tick_params(labelstyle='italic')\n\n# Set the tick label font family\nax.tick_params(labelfamily='serif')\n\n# Set the tick label font variant\nax.tick_params(labelvariant='normal')\n\n# Set the tick label font stretch\nax.tick_params(labelstretch='normal')\n\n# Set the tick label font size\nax.tick_params(labelsize=12)\n\n# Set the tick label font weight\nax.tick_params(labelweight='bold')\n\n# Set the tick label font style\nax.tick_params(labelstyle='italic')\n\n# Set the tick label font family\nax.tick_params(labelfamily='serif')\n\n# Set the tick label font variant\nax.tick_params(labelvariant='normal')\n\n# Set the tick label font stretch\nax.tick_params(labelstretch='normal')\n\n# Set the tick label font size\nax.tick_params(labelsize=12)\n\n# Set the tick label font weight\nax.tick_params(labelweight='bold')\n\n# Set the tick label font style\nax.tick_params(labelstyle='italic')\n\n# Set the tick label font family\nax.tick_params(labelfamily='serif')\n\n# Set the tick label font variant\nax.tick_params(labelvariant='normal')\n\n# Set the tick label font stretch\nax.tick_params(labelstretch='normal')\n\n# Set the tick label font size\nax.tick_params(labelsize=12)\n\n# Set the tick label font weight\nax.tick_params(labelweight='bold')\n\n# Set the tick label font style\nax.tick_params(labelstyle='italic')\n\n# Set the tick label font family\nax.tick_params(labelfamily='serif')\n\n# Set the tick label font variant\nax.tick_params(labelvariant='normal')\n\n# Set the tick label font stretch\nax.tick_params(labelstretch='normal')\n\n# Set the tick label font size\nax.tick_params(labelsize=12)\n\n# Set the tick label font weight\nax.tick_params(labelweight='bold')\n\n# Set the tick label font style\nax.tick_params(labelstyle='italic')\n\n# Set the tick label font family\nax.tick_params(labelfamily='serif')\n\n# Set the tick label font variant\nax.tick_params(labelvariant='normal')\n\n# Set the tick label font stretch\nax.tick_params(labelstretch='normal')\n\n# Set the tick label font size"}
{"file": "dataset/ori_500/errorbar_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the x-axis limits\nax.set_xlim(-1, 5)\n\n# Set the y-axis limits\nax.set_ylim(0, 2)\n\n# Set the x-axis label\nax.set_xlabel('Time (s)')\n\n# Set the y-axis label\nax.set_ylabel('Posterior Accuracy (\u0394 to no prompting)')\n\n# Set the title of the plot\nax.set_title('Posterior Accuracy over Time')\n\n# Create a bar chart with the data\nax.bar([0, 1, 2, 3, 4], [0.15, 0.15, 0.15, 0.15, 0.15], color='blue')\nax.bar([0, 1, 2, 3, 4], [0.15, 0.15, 0.15, 0.15, 0.15], color='orange')\nax.bar([0, 1, 2, 3, 4], [0.15, 0.15, 0.15, 0.15, 0.15], color='green')\nax.bar([0, 1, 2, 3, 4], [0.15, 0.15, 0.15, 0.15, 0.15], color='red')\nax.bar([0, 1, 2, 3, 4], [0.15, 0.15, 0.15, 0.15, 0.15], color='purple')\nax.bar([0, 1, 2, 3, 4], [0.15, 0.15, 0.15, 0.15, 0.15], color='brown')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 3))\n\n# Set the title of the graph\nax.set_title('Performance Metrics')\n\n# Set the x-axis labels\nax.set_xlabel('Time')\nax.set_ylabel('Performance')\n\n# Set the y-axis limits\nax.set_ylim(40, 90)\n\n# Set the x-axis ticks\nax.set_xticks([0, 1, 2, 3, 4])\n\n# Set the x-axis tick labels\nax.set_xticklabels(['a', 'b', 'c', 'd', 'e'])\n\n# Set the y-axis ticks\nax.set_yticks([50, 60, 70, 80, 90])\n\n# Set the y-axis tick labels\nax.set_yticklabels(['50', '60', '70', '80', '90'])\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the text\nax.text(0.5, 0.5, 'AUG', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='orange', rotation=0)\nax.text(0.5, 0.5, 'T-Estimation', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='yellow', rotation=0)\nax.text(0.5, 0.5, 'Qualification', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='blue', rotation=0)\nax.text(0.5, 0.5, 'Diff-Stitch', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='navy', rotation=0)\n\n# Set the color of the bars\nax.bar([0, 1, 2, 3, 4], [70, 80, 90, 80, 70], color='orange')\nax.bar([0, 1, 2, 3, 4], [60, 70, 80, 70, 60], color='yellow')\nax.bar([0, 1, 2, 3, 4], [50, 60, 70, 60, 50], color='blue')\nax.bar([0, 1, 2, 3, 4], [40, 50, 60, 50, 40], color='navy')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_16.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\nax.set_title('FashionMNIST (NEURAL)')\nax.set_xlabel('Hyperparameters')\nax.set_ylabel('Metric')\n\n# Define the data for the plots\nx = ['128/0.5/0.0001', '128/0.1/0.0001', '256/0.1/0.0001', '256/0.3/0.0001', '256/0.5/0.0001', '64/0.1/0.0001', '64/0.3/0.0001', '64/0.5/0.0001']\ny = [0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2]\n\n# Create the plots\nfor i in range(len(x)):\n    ax.plot([x[i], x[i]], [y[i], y[i]], color='black')\n    ax.text(x[i], y[i], str(y[i]), ha='center', va='bottom')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_17.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the first graph\ncountries = ['Japan', 'Brazil', 'India', 'Germany', 'United States']\nenrollment_rates = [0.25, 0.35, 0.45, 0.6, 0.8]\n\n# Data for the second graph\ntt_ratios = [0.15, 0.25, 0.35, 0.45, 0.55]\n\nfig, axs = plt.subplots(2, 1, figsize=(6.0, 6.0))\n\n# First graph\naxs[0].bar(countries, enrollment_rates, color='purple')\naxs[0].set_title('Higher Education Enrollment Rate')\naxs[0].set_xlabel('Countries')\naxs[0].set_ylabel('Enrollment Rate')\n\n# Second graph\naxs[1].bar(countries, tt_ratios, color='green')\naxs[1].set_title('Student-Teacher Ratio')\naxs[1].set_xlabel('Countries')\naxs[1].set_ylabel('Ratio')\n\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_18.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the first graph\nregions = ['Africa', 'South America', 'North America', 'Asia', 'Europe']\nemissions = [1200, 1800, 5000, 3200, 10400]\nforest_coverage = [21, 34, 25, 28, 38]\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(6.0, 9.0))\n\n# Plot the data\nax.barh(regions, emissions, color='lightblue')\nax.barh(regions, forest_coverage, color='green')\n\n# Set the title and labels\nax.set_title('Annual Carbon Dioxide Emissions')\nax.set_xlabel('Emissions (in millions of metric tons)')\nax.set_ylabel('Regions')\n\n# Display the plot\nplt.show()\n\n# Data for the second graph\nregions = ['Africa', 'South America', 'North America', 'Asia', 'Europe']\nland_area = [1000, 2000, 3000, 4000, 5000]\nrenewable_energy_usage = [18, 20, 22, 24, 26]\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(6.0, 9.0))\n\n# Plot the data\nax.barh(regions, land_area, color='lightgreen')\nax.barh(regions, renewable_energy_usage, color='orange')\n\n# Set the title and labels\nax.set_title('Forest Coverage Rate')\nax.set_xlabel('Land Area (in millions of square kilometers)')\nax.set_ylabel('Regions')\n\n# Display the plot\nplt.show()\n\n# Data for the third graph\nregions = ['Africa', 'South America', 'North America', 'Asia', 'Europe']\ntotal_energy_consumption = [45, 47, 49, 51, 53]\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(6.0, 9.0))\n\n# Plot the data\nax.barh(regions, total_energy_consumption, color='lightgrey')\n\n# Set the title and labels\nax.set_title('Renewable Energy Usage')\nax.set_xlabel('Total Energy Consumption (in millions of kWh)')\nax.set_ylabel('Regions')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_19.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(10.0, 9.0))\n\n# Set the title of the graph\nax.set_title('a')\n\n# Create a bar chart with the data\nax.bar(['Crime Rate', 'Happiness Index', 'Social Security Coverage', 'Political Participation'], [75, 85, 65, 95], color='red')\n\n# Set the x-axis label\nax.set_xlabel('X Axis Label')\n\n# Set the y-axis label\nax.set_ylabel('Y Axis Label')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Set the title of the plot\nax.set_title('Protocol')\n\n# Create a rectangle for the logo\nlogo = plt.Rectangle((0.45, 0.9), 0.1, 0.1, color='white', fill=False)\nax.add_patch(logo)\n\n# Add text to the logo\nax.text(0.5, 0.95, 'Expert', ha='center', va='center')\nax.text(0.5, 0.85, 'Blind', ha='center', va='center')\nax.text(0.5, 0.75, 'Consultancy', ha='center', va='center')\nax.text(0.5, 0.65, 'Debate', ha='center', va='center')\nax.text(0.5, 0.55, 'Interactive Consultancy', ha='center', va='center')\nax.text(0.5, 0.45, 'Interactive Debate', ha='center', va='center')\n\n# Create a bar chart\nax.bar(['GPT-3.5-Turbo', 'Claude 2.1', 'GPT-4-Turbo', 'Human'], [80, 60, 70, 90], color='blue')\n\n# Set the y-axis label\nax.set_ylabel('Judge Accuracy (%)')\n\n# Set the x-axis label\nax.set_xlabel('Judge')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_20.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Set the title of the graph\nax.set_title('Annual Average Temperature')\n\n# Create a bar chart with the data\nax.bar(['New York', 'London', 'Beijing', 'Tokyo'], [12, 14, 16, 18], color='blue')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_21.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the bar chart\ncountries = ['Germany', 'China', 'USA', 'India', 'Brazil']\nenergy_consumption = [2000, 3000, 4000, 5000, 6000]\nrenewable_energy_usage = [10, 15, 20, 25, 30]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Plot the bar chart\nax.bar(countries, energy_consumption, color='purple')\nax.set_xlabel('Country')\nax.set_ylabel('Energy Consumption (Petajoules)')\nax.set_title('Total Energy Consumption by Country')\n\n# Add a horizontal line at y=0\nax.axhline(y=0, color='black', linestyle='-')\n\n# Display the plot\nplt.show()\n\n# Create a second subplot for Renewable Energy Usage\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Plot the bar chart\nax.bar(countries, renewable_energy_usage, color='cyan')\nax.set_xlabel('Country')\nax.set_ylabel('Renewable Energy Usage (%)')\nax.set_title('Renewable Energy Usage by Country')\n\n# Add a horizontal line at y=0\nax.axhline(y=0, color='black', linestyle='-')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_22.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nmodels = ['Standard Model', 'Advanced Model', 'Optimal Model']\nratings = [0.30, 0.25, 0.20]\ncolors = ['red', 'green', 'blue']\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Plot the data\nax.bar(models, ratings, color=colors)\n\n# Set the title and labels\nax.set_title('Energy Efficiency Ratings by Appliance Model')\nax.set_xlabel('Appliance Model')\nax.set_ylabel('Energy Efficiency Rating')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_23.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Set the title of the plot\nax.set_title('Energy Assessment Entity')\n\n# Create a bar chart with the data\nax.bar(['Wind', 'Solar', 'Hydro', 'Nuclear'], [90, 80, 70, 60], color='blue')\nax.bar(['Wind', 'Solar', 'Hydro', 'Nuclear'], [80, 70, 60, 50], color='green')\nax.bar(['Wind', 'Solar', 'Hydro', 'Nuclear'], [70, 60, 50, 40], color='purple')\nax.bar(['Wind', 'Solar', 'Hydro', 'Nuclear'], [60, 50, 40, 30], color='orange')\n\n# Add a legend\nax.legend(['Efficiency', 'Costs'])\n\n# Add a grid\nax.grid(True)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_24.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Set the title of the plot\nax.set_title('Educational Metrics by Region')\n\n# Define the regions and their metrics\nregions = ['North America', 'Europe', 'Asia', 'South America', 'Africa', 'Australia', 'Central America', 'Middle East', 'Southeast Asia', 'Scandinavia']\nmetrics = [95, 85, 75, 65, 55, 45, 35, 25, 15, 5]\n\n# Create a bar chart with the metrics\nax.bar(regions, metrics, color='lightgreen')\n\n# Add a horizontal line for the average metric\nax.axhline(y=60, color='black', linestyle='-')\n\n# Add a legend for the metrics\nax.legend(['High School Graduation', 'Higher Education Enrollment'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_25.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nbrands = ['iPhone 13', 'Samsung S21', 'Google Pixel 6', 'OnePlus 9']\nrecalls = [46.3, 30.1, 57.9, 34.0, 53.8, 55.7, 43.7, 19.4, 20.0]\nmisleading = [34.0, 57.9, 53.8, 20.0]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Plot the data\nax.bar(brands, recalls, color='blue')\nax.bar(brands, misleading, bottom=recalls, color='orange')\n\n# Set the title and labels\nax.set_title('Comparison of Recall Rates Across Products')\nax.set_xlabel('Product')\nax.set_ylabel('Recall Rate (%)')\n\n# Add a legend\nax.legend(['Truthful Recall', 'Misleading Recall'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_26.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the bar chart\ncategories = ['Support', 'Delivery', 'Product Quality', 'Returns', 'Pricing', 'Website Usability', 'Checkout Process']\nsatisfaction_scores = [15, 18, 20, 12, 17, 10, 8]\ncomplaint_rates = [75, 82, 78, 85, 80, 88, 90]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the bar chart\nax.bar(categories, satisfaction_scores, color='blue')\n\n# Add a horizontal line at the bottom of the bar chart\nax.axhline(y=0, color='black', linewidth=0.5)\n\n# Set the title and labels\nax.set_title('Customer Satisfaction Scores')\nax.set_xlabel('Categories')\nax.set_ylabel('Satisfaction Scores')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_27.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the bar chart\ncategories = ['Support', 'Delivery', 'Product Quality', 'Returns', 'Pricing', 'Website Usability', 'Checkout Process']\nvalues = [75, 82, 78, 85, 80, 88, 90]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Create a bar chart\nax.bar(categories, values, color='blue')\n\n# Add labels and title\nax.set_xlabel('Categories')\nax.set_ylabel('Values')\nax.set_title('Bar Chart of Categories and Values')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_28.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Set the x-axis limits\nax.set_xlim(-0.15, 0.25)\n\n# Set the y-axis limits\nax.set_ylim(0, 0.25)\n\n# Set the x-axis ticks\nax.set_xticks([0, 0.05, 0.1, 0.15, 0.2])\n\n# Set the y-axis ticks\nax.set_yticks([0, 0.05, 0.1, 0.15, 0.2])\n\n# Set the x-axis labels\nax.set_xticklabels(['Watering Frequency', 'Planting Density', 'Plant Variety', 'CO2 Levels', 'Pesticides', 'Temperature', 'Fertilizer', 'Soil pH', 'Water Quality', 'Sunlight'])\n\n# Set the y-axis labels\nax.set_yticklabels(['0.00', '0.05', '0.10', '0.15', '0.20'])\n\n# Set the title of the plot\nax.set_title('Impact on Plant Growth (\u0394 to control)')\n\n# Set the color of the grid lines\nax.grid(color='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the text\nax.text(0.5, 0.5, '0.15', ha='center', va='center', fontsize=14, color='black')\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.1, 0.1), 0.1, 0.1, color='green'))\n\n# Set the color of the line\nax.plot([0.1, 0.2], [0.1, 0.1], color='black')\n\n# Set the color of the text\nax.text(0.15, 0.15, '0.10', ha='center', va='center', fontsize=14, color='black')\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.15, 0.15), 0.1, 0.1, color='green'))\n\n# Set the color of the line\nax.plot([0.15, 0.2], [0.15, 0.15], color='black')\n\n# Set the color of the text\nax.text(0.2, 0.2, '0.05', ha='center', va='center', fontsize=14, color='black')\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.2, 0.2), 0.1, 0.1, color='green'))\n\n# Set the color of the line\nax.plot([0.2, 0.2], [0.2, 0.2], color='black')\n\n# Set the color of the text\nax.text(0.25, 0.25, '0.00', ha='center', va='center', fontsize=14, color='black')\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.25, 0.25), 0.1, 0.1, color='green'))\n\n# Set the color of the line\nax.plot([0.25, 0.25], [0.25, 0.25], color='black')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_29.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the bar chart\ncities = ['New York', 'Los Angeles', 'Chicago']\nmetrics = [230, 215, 220]\ncolors = ['green', 'blue', 'red']\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 4))\n\n# Plot the bar chart\nax.bar(cities, metrics, color=colors)\n\n# Set the title and labels\nax.set_title('Traffic Metrics')\nax.set_xlabel('Cities')\nax.set_ylabel('Metric Values')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(10.0, 10.0))\n\n# Set the title of the plot\nax.set_title('FashionMNIST (NEURAL)')\n\n# Set the x-axis label\nax.set_xlabel('Metric')\n\n# Set the y-axis label\nax.set_ylabel('Value')\n\n# Set the x-axis limits\nax.set_xlim(0, 1)\n\n# Set the y-axis limits\nax.set_ylim(0, 1)\n\n# Set the x-axis ticks\nax.set_xticks([0, 0.2, 0.4, 0.6, 0.8, 1])\n\n# Set the y-axis ticks\nax.set_yticks([0, 0.2, 0.4, 0.6, 0.8, 1])\n\n# Set the x-axis tick labels\nax.set_xticklabels(['0.0', '0.2', '0.4', '0.6', '0.8', '1.0'])\n\n# Set the y-axis tick labels\nax.set_yticklabels(['0.0', '0.2', '0.4', '0.6', '0.8', '1.0'])\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top x-axis line\nax.spines['top'].set_color('black')\n\n# Set the color of the right y-axis line\nax.spines['right'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', width=1)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='minor', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='minor', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='minor', width=1)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick labels\nax.tick_params(axis='"}
{"file": "dataset/ori_500/errorbar_30.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Set the title of the plot\nax.set_title('Environmental Impact Scores Across Cities')\n\n# Set the x-axis label\nax.set_xlabel('Cities')\n\n# Set the y-axis label\nax.set_ylabel('Environmental Impact Score')\n\n# Define the data for the bar chart\ncities = ['City A', 'City B', 'City C', 'City D']\nscores = [2.3, 1.7, 3.4, 2.9]\n\n# Create a bar chart with the data\nbars = ax.bar(cities, scores, color='red')\n\n# Add labels to each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 1), ha='center', va='bottom')\n\n# Set the limits of the y-axis\nax.set_ylim(-3, 3)\n\n# Set the ticks on the y-axis\nax.set_yticks([-3, -2, -1, 0, 1, 2, 3])\n\n# Set the limits of the x-axis\nax.set_xlim(-0.5, 3.5)\n\n# Set the ticks on the x-axis\nax.set_xticks([0, 1, 2, 3])\n\n# Add a legend\nax.legend(['Air Quality Score', 'Water Quality Score'], loc='upper right')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\nroles = ['Wererewolf', 'Seer', 'Witch', 'Hunter', 'Villager']\ndurations = [84.97, 102.67, 78.22, 85.17, 90]\ntokens = [449.33, 780.67, 547.39, 612.99, 618.52]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 4))\n\n# Plot the durations\nax.bar(roles, durations, color='blue')\nax.set_title('a) Speak duration of roles')\n\n# Plot the tokens\nax2 = ax.twinx()\nax2.bar(roles, tokens, color='green')\nax2.set_title('b) Speak tokens of roles')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nx = [5, 10, 20, 30, 40, 50]\ny = [63.77, 64.17, 64.31, 64.98, 65.82, 65.78]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 7.0))\n\n# Plot the data\nax.plot(x, y, 'o-')\n\n# Set the title and labels\nax.set_title('Size of Data for Training and Validation')\nax.set_xlabel('Size of Data (in samples)')\nax.set_ylabel('True+ info (%)')\n\n# Add vertical lines at each data point\nfor xi, yi in zip(x, y):\n    ax.axvline(xi, color='black', linestyle='-')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Set the title of the plot\nax.set_title('Out-of-domain accuracy')\n\n# Create a bar chart with the data\nax.bar(['all', 'arg.causal', 'test.0', 'test.1', 'test.2', 'test.3', 'test.4', 'test.5', 'test.6', 'const'], [0.834, 0.832, 0.830, 0.828, 0.826, 0.824, 0.822, 0.820, 0.818, 0.816])\n\n# Add a vertical line at the mean value\nax.axvline(x=4.5, color='r', linestyle='-')\n\n# Add a horizontal line at the mean value\nax.axhline(y=0.824, color='b', linestyle='-')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Mini Crosswords Performance')\n\n# Set the x-axis label\nax.set_xlabel('Objective Value')\n\n# Set the y-axis label\nax.set_ylabel('Crossword Difficulty')\n\n# Create a bar chart with the data\nax.bar(['Final Distribution with GPT-4-Turbo', 'Final Distribution with GPT-3.5-Turbo', '0.125 Parameter-Valued Distribution', 'Initial Distribution', 'Best-of-Three'], [0.7, 0.8, 0.6, 0.5, 0.4], color='skyblue')\n\n# Add a vertical line at the mean value\nax.axvline(x=0.5, color='black')\n\n# Add a horizontal line at the median value\nax.axhline(y=0.6, color='red')\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0.4, 0.5), 0.2, 0.1, color='red')\nax.add_patch(rect)\n\n# Add a text box to the plot\ntextstr = \"ToT (0.675)\"\nprops = dict(boxstyle='round', facecolor='wheat', alpha=0.5)\nax.text(0.9, 0.9, textstr, transform=ax.transAxes, fontsize=14,\n        verticalalignment='top', bbox=props)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\nlabels = ['BERT', 'RoBERTa', 'DistilBERT', 'XLNet', 'Electra', 'Albert', 'BART', 'DeBERTa', 'DeBERTaV2', 'Llama2']\naccuracies = [55, 60, 58, 62, 57, 59, 64, 61, 56, 53]\ncolors = ['pink', 'skyblue']\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 3.0))\n\n# Plot the data\nfor i in range(len(labels)):\n    ax.barh(labels[i], accuracies[i], color=colors[i % len(colors)])\n\n# Set the title and labels\nax.set_title('Model Accuracy')\nax.set_xlabel('Accuracy (%)')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Set the title of the chart\nax.set_title('Your Chart Title Here')\n\n# Set the x-axis label\nax.set_xlabel('A')\n\n# Set the y-axis label\nax.set_ylabel('B')\n\n# Set the x-axis limits\nax.set_xlim(-3.5, -1.5)\n\n# Set the y-axis limits\nax.set_ylim(0, 2.5)\n\n# Set the x-axis ticks\nax.set_xticks([-3.5, -3.25, -3.0, -2.75, -2.5, -2.25, -2.0, -1.75, -1.5])\n\n# Set the y-axis ticks\nax.set_yticks([0, 0.5, 1, 1.5, 2, 2.5])\n\n# Set the x-axis tick labels\nax.set_xticklabels(['-3.5', '-3.25', '-3.0', '-2.75', '-2.5', '-2.25', '-2.0', '-1.75', '-1.5'])\n\n# Set the y-axis tick labels\nax.set_yticklabels(['0', '0.5', '1', '1.5', '2', '2.5'])\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the background\nax.set_facecolor('lavender')\n\n# Set the color of the text\nax.text(-3.5, 2.5, 'Computational Social Science and Social Media', fontsize=12, color='black')\nax.text(-3.5, 2.25, 'Phonology, Morphology and Word Segmentation', fontsize=12, color='black')\nax.text(-3.5, 2.0, 'Information Retrieval and Text Mining', fontsize=12, color='black')\nax.text(-3.5, 1.75, 'Machine Learning for NLP', fontsize=12, color='black')\nax.text(-3.5, 1.5, 'Information Extraction', fontsize=12, color='black')\nax.text(-3.5, 1.25, 'Discourse and Pragmatics', fontsize=12, color='black')\nax.text(-3.5, 1.0, 'Syntax: Tagging, Chunking and Parsing', fontsize=12, color='black')\n\n# Set the color of the bars\nax.bar([-3.25, -3.0, -2.75, -2.5, -2.25, -2.0, -1.75, -1.5], [1.2, 1.4, 1.6, 1.8, 2.0, 2.2, 2.4, 2.6], color='lavender')\n\n# Set the color of the bar edges\nax.bar([-3.25, -3.0, -2.75, -2.5, -2.25, -2.0, -1.75, -1.5], [1.2, 1.4, 1.6, 1.8, 2.0, 2.2, 2.4, 2.6], edgecolor='black')\n\n# Set the color of the bar labels\nax.bar([-3.25, -3.0, -2.75, -2.5, -2.25, -2.0, -1.75, -1.5], [1.2, 1.4, 1.6, 1.8, 2.0, 2.2, 2.4, 2.6], label='Bar Label')\n\n# Set the color of the legend\nax.legend(loc='upper left', bbox_to_anchor=(1,1), fancybox=True, shadow=True, ncol=1)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorpoint_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Set the x-axis labels\nx_labels = ['Kashmir', 'Religion', 'Crime and Justice', 'CAA', 'Pulwama-Balakot', 'Politics']\n\n# Set the y-axis values\ny_values = [0.12, 0.14, 0.16, 0.18, 0.20, 0.22]\n\n# Plot the data\nax.plot(x_labels, y_values, marker='o')\n\n# Set the title and labels\nax.set_title('Shouting Fraction (Fraction of videos)')\nax.set_xlabel('Region')\nax.set_ylabel('Fraction')\n\n# Add a legend\nax.legend(['Dataset mean', 'Mean'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorpoint_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(6.0, 9.0))\n\n# Set the title of the plot\nax.set_title('Variable, Symmetric Error')\n\n# Create a scatter plot with random data\nax.scatter([1, 2, 3, 4, 5], [10, 15, 12, 18, 17])\n\n# Set the x-axis label\nax.set_xlabel('X Axis Label')\n\n# Set the y-axis label\nax.set_ylabel('Y Axis Label')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorpoint_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Incivility by Topic')\n\n# Set the x-axis label\nax.set_xlabel('Incivility (Fraction of Videos)')\n\n# Set the y-axis label\nax.set_ylabel('Topic')\n\n# Define the data for the plot\ntopics = ['Politics', 'Religion', 'Kashmir', 'CAA', 'Pulwama-Balakot']\nincivilities = [0.16, 0.18, 0.20, 0.22, 0.24]\n\n# Plot the data\nfor topic, incivility in zip(topics, incivilities):\n    ax.plot([incivility], [topic], 'ro')  # 'ro' means red circle marker\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorpoint_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the plots\nx = [-19.6, -19.5, -19.4, -19.3]\ny1 = [-19.353+0.073, -19.257+0.028, -19.257+0.028, -19.257+0.028]\ny2 = [-19.394+0.018, -19.257+0.028, -19.257+0.028, -19.257+0.028]\ny3 = [-19.404+0.099, -19.257+0.028, -19.257+0.028, -19.257+0.028]\ny4 = [-19.314+0.050, -19.257+0.028, -19.257+0.028, -19.257+0.028]\ny5 = [-19.362+0.066, -19.257+0.028, -19.257+0.028, -19.257+0.028]\ny6 = [-19.374+0.080, -19.257+0.028, -19.257+0.028, -19.257+0.028]\ny7 = [-19.380+0.200, -19.257+0.028, -19.257+0.028, -19.257+0.028]\ny8 = [-19.220+0.200, -19.257+0.028, -19.257+0.028, -19.257+0.028]\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Plot the data\nax.plot(x, y1, label='CC+Pantheon+')\nax.plot(x, y2, label='\u03b8BAO+rCMB+dPantheon')\nax.plot(x, y3, label='\u03b1BAO+rCMB+dPantheon')\nax.plot(x, y4, label='CC+BAO+Pantheon+')\nax.plot(x, y5, label='CC+BAO+Pantheon+')\nax.plot(x, y6, label='CC+BAO+Pantheon+')\nax.plot(x, y7, label='CC+BAO+Pantheon+')\nax.plot(x, y8, label='\u03b1BAO+rSHOE+Pantheon')\n\n# Add a legend\nax.legend()\n\n# Set the x-axis limits\nax.set_xlim(-19.6, -19.0)\n\n# Set the y-axis limits\nax.set_ylim(-19.6, -19.0)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorpoint_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Set the title of the plot\nax.set_title('Dataset unique shouter count mean')\n\n# Set the x-axis label\nax.set_xlabel('Number of speakers')\n\n# Set the y-axis label\nax.set_ylabel('Unique speaker count mean')\n\n# Create a scatter plot\nax.scatter([5, 10, 15], [12, 14, 16], color='blue')\n\n# Create a line plot\nax.plot([3, 8, 13], [10, 12, 14], color='red')\n\n# Create a bar chart\nax.bar([1, 6, 11], [8, 10, 12], color='green')\n\n# Create a histogram\nax.hist([2, 7, 12], bins=3, color='purple')\n\n# Create a pie chart\nax.pie([4, 9, 14], labels=['Education', 'Religion', 'Bollywood'], colors=['blue', 'red', 'green'])\n\n# Create a box plot\nax.boxplot([1, 6, 11], vert=False, patch_artist=True, labels=['Crime and Justice'])\n\n# Create a violin plot\nax.violinplot([2, 7, 12], showmeans=True, showmedians=True)\n\n# Create a heatmap\nax.imshow([[1, 2, 3], [4, 5, 6], [7, 8, 9]], cmap='hot', interpolation='nearest')\n\n# Create a contour plot\nx = [1, 2, 3]\ny = [4, 5, 6]\nz = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nax.contourf(x, y, z, cmap='coolwarm')\n\n# Create a scatter plot with a legend\nax.scatter([1, 2, 3], [4, 5, 6], color='blue', label='Unique speaker count mean')\nax.legend()\n\n# Create a line plot with a legend\nax.plot([1, 2, 3], [4, 5, 6], color='red', label='Unique shouter count mean')\nax.legend()\n\n# Create a bar chart with a legend\nax.bar([1, 2, 3], [4, 5, 6], color='green', label='Number of speakers')\nax.legend()\n\n# Create a histogram with a legend\nax.hist([1, 2, 3], bins=3, color='purple', label='Unique speaker count mean')\nax.legend()\n\n# Create a pie chart with a legend\nax.pie([1, 2, 3], labels=['Education', 'Religion', 'Bollywood'], colors=['blue', 'red', 'green'], labeldistance=None)\nax.legend()\n\n# Create a box plot with a legend\nax.boxplot([1, 2, 3], vert=False, patch_artist=True, labels=['Crime and Justice'], labeldistance=None)\nax.legend()\n\n# Create a violin plot with a legend\nax.violinplot([1, 2, 3], showmeans=True, showmedians=True, labeldistance=None)\nax.legend()\n\n# Create a heatmap with a legend\nax.imshow([[1, 2, 3], [4, 5, 6], [7, 8, 9]], cmap='hot', interpolation='nearest', labeldistance=None)\nax.legend()\n\n# Create a contour plot with a legend\nax.contourf(x, y, z, cmap='coolwarm', labeldistance=None)\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorpoint_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Global News Sentiment Analysis')\n\n# Set the x-axis label\nax.set_xlabel('Date')\n\n# Set the y-axis label\nax.set_ylabel('Sentiment Score')\n\n# Set the y-axis limits\nax.set_ylim(0, 25)\n\n# Set the x-axis ticks\nax.set_xticks([1, 2, 3, 4, 5])\n\n# Set the x-axis tick labels\nax.set_xticklabels(['KASHMIR', 'COVID/LOCKDOWN', 'SPORTS', 'CHINA', 'PULWAMA-BALAKOT'])\n\n# Set the y-axis ticks\nax.set_yticks([0.5, 1, 1.5, 2, 2.5, 3, 3.5, 4, 4.5, 5])\n\n# Set the y-axis tick labels\nax.set_yticklabels(['0.5', '1', '1.5', '2', '2.5', '3', '3.5', '4', '4.5', '5'])\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the border\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', colors='blue')\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the title\nax.title.set_color('blue')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('blue')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the border\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', colors='blue')\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the title\nax.title.set_color('blue')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('blue')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the border\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', colors='blue')\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the title\nax.title.set_color('blue')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('blue')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the border\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', colors='blue')\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the title\nax.title.set_color('blue')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('blue')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the border\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', colors='blue')\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the title\nax.title.set_color('blue')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('blue')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the border\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', colors='blue')\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the title\nax.title.set_color('blue')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('blue')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the border\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', colors='blue')\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the title\nax.title.set_color('blue')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('blue')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the border\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', colors='blue')\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the title\nax.title.set_color('blue')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('blue')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the border\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', colors='blue')\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the title\nax.title.set_color('blue')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('blue')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the border\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', colors='blue')\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the title\nax.title.set_color('blue')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('blue')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the border\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', colors='blue')\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the title\nax.title.set_color('blue')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('blue')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the border\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', colors='blue')\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the title\nax.title.set_color('blue')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('blue')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the border\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', colors='blue')\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the title\nax.title.set_color('blue')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('blue')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the border\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', colors='blue')\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the title\nax.title.set_color('blue')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('blue')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the border\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', colors='blue')\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the title\nax.title.set_color('blue')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('blue')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the border\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', colors='blue')\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the title\nax.title.set_color('blue')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('blue')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the border\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', colors='blue')\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the title\nax.title.set_color('blue')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('blue')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the border\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', colors='blue')\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the title\nax.title.set_color('blue')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('blue')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the border\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', colors='blue')\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the title\nax.title.set_color('blue')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('blue')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the border\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', colors='blue')\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the title\nax.title.set_color('blue')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('blue')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the border\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', colors='blue')\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the title\nax.title.set_color('blue')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('blue')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the border\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', colors='blue')\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the title\nax.title.set_color('blue')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('blue')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the border\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', colors='blue')\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the title\nax.title.set_color('blue')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('blue')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the border\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', colors='blue')\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the title\nax.title.set_color('blue')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('blue')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the border\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', colors='blue')\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the title\nax.title.set_color('blue')\n\n# Set the color of the x-axis label\nax.xaxis.label.set"}
{"file": "dataset/ori_500/errorpoint_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(9.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Errorbar upper and lower limits')\n\n# Create a scatter plot with error bars\nx = [1, 2, 3, 4, 5]\ny = [1.5, 2.5, 3.5, 4.5, 5.5]\nyerr = [0.5, 0.5, 0.5, 0.5, 0.5]\nax.errorbar(x, y, yerr=yerr, fmt='o', ecolor='r', capsize=5)\n\n# Set the x-axis and y-axis labels\nax.set_xlabel('X-axis')\nax.set_ylabel('Y-axis')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorpoint_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 4))\n\n# Set the title of the plot\nax.set_title('variable, symmetric error')\n\n# Create a scatter plot\nax.scatter([0.5, 1.5, 2.5, 3.5], [1.5, 1.5, 1.5, 1.5], color='purple')\n\n# Create a line plot\nax.plot([0.5, 1.5, 2.5, 3.5], [1.5, 1.5, 1.5, 1.5], color='purple')\n\n# Set the x-axis label\nax.set_xlabel('x')\n\n# Set the y-axis label\nax.set_ylabel('y')\n\n# Create a second subplot\nax2 = fig.add_subplot(122)\n\n# Set the title of the second plot\nax2.set_title('variable, symmetric error')\n\n# Create a scatter plot for the second subplot\nax2.scatter([0.5, 1.5, 2.5, 3.5], [1.5, 1.5, 1.5, 1.5], color='green')\n\n# Create a line plot for the second subplot\nax2.plot([0.5, 1.5, 2.5, 3.5], [1.5, 1.5, 1.5, 1.5], color='green')\n\n# Set the x-axis label for the second subplot\nax2.set_xlabel('x')\n\n# Set the y-axis label for the second subplot\nax2.set_ylabel('y')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorpoint_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(10.0, 7.0))\n\n# Set the title of the plot\nax.set_title('variable, asymmetric error')\n\n# Set the x-axis label\nax.set_xlabel('time')\n\n# Set the y-axis label\nax.set_ylabel('value')\n\n# Set the x-axis limits\nax.set_xlim(0, 10)\n\n# Set the y-axis limits\nax.set_ylim(15, 35)\n\n# Set the x-axis ticks\nax.set_xticks([0, 2, 4, 6, 8, 10])\n\n# Set the y-axis ticks\nax.set_yticks([15, 20, 25, 30, 35])\n\n# Set the x-axis tick labels\nax.set_xticklabels(['0', '2', '4', '6', '8', '10'])\n\n# Set the y-axis tick labels\nax.set_yticklabels(['15', '20', '25', '30', '35'])\n\n# Set the x-axis grid lines\nax.xaxis.grid(True)\n\n# Set the y-axis grid lines\nax.yaxis.grid(True)\n\n# Set the x-axis line color\nax.spines['bottom'].set_color('green')\n\n# Set the y-axis line color\nax.spines['left'].set_color('green')\n\n# Set the x-axis line width\nax.spines['bottom'].set_linewidth(2)\n\n# Set the y-axis line width\nax.spines['left'].set_linewidth(2)\n\n# Set the x-axis line style\nax.spines['bottom'].set_linestyle('-')\n\n# Set the y-axis line style\nax.spines['left'].set_linestyle('-')\n\n# Set the x-axis line alpha\nax.spines['bottom'].set_alpha(0.5)\n\n# Set the y-axis line alpha\nax.spines['left'].set_alpha(0.5)\n\n# Set the x-axis line capstyle\nax.spines['bottom'].set_capstyle('round')\n\n# Set the y-axis line capstyle\nax.spines['left'].set_capstyle('round')\n\n# Set the x-axis line joinstyle\nax.spines['bottom'].set_joinstyle('round')\n\n# Set the y-axis line joinstyle\nax.spines['left'].set_joinstyle('round')\n\n# Set the x-axis line hatch\nax.spines['bottom'].set_hatch('/')\n\n# Set the y-axis line hatch\nax.spines['left'].set_hatch('/')\n\n# Set the x-axis line linestyle\nax.spines['bottom'].set_linestyle('-')\n\n# Set the y-axis line linestyle\nax.spines['left'].set_linestyle('-')\n\n# Set the x-axis line linewidth\nax.spines['bottom'].set_linewidth(2)\n\n# Set the y-axis line linewidth\nax.spines['left'].set_linewidth(2)\n\n# Set the x-axis line color\nax.spines['bottom'].set_color('green')\n\n# Set the y-axis line color\nax.spines['left'].set_color('green')\n\n# Set the x-axis line alpha\nax.spines['bottom'].set_alpha(0.5)\n\n# Set the y-axis line alpha\nax.spines['left'].set_alpha(0.5)\n\n# Set the x-axis line capstyle\nax.spines['bottom'].set_capstyle('round')\n\n# Set the y-axis line capstyle\nax.spines['left'].set_capstyle('round')\n\n# Set the x-axis line joinstyle\nax.spines['bottom'].set_joinstyle('round')\n\n# Set the y-axis line joinstyle\nax.spines['left'].set_joinstyle('round')\n\n# Set the x-axis line hatch\nax.spines['bottom'].set_hatch('/')\n\n# Set the y-axis line hatch\nax.spines['left'].set_hatch('/')\n\n# Set the x-axis line linestyle\nax.spines['bottom'].set_linestyle('-')\n\n# Set the y-axis line linestyle\nax.spines['left'].set_linestyle('-')\n\n# Set the x-axis line linewidth\nax.spines['bottom'].set_linewidth(2)\n\n# Set the y-axis line linewidth\nax.spines['left'].set_linewidth(2)\n\n# Set the x-axis line color\nax.spines['bottom'].set_color('green')\n\n# Set the y-axis line color\nax.spines['left'].set_color('green')\n\n# Set the x-axis line alpha\nax.spines['bottom'].set_alpha(0.5)\n\n# Set the y-axis line alpha\nax.spines['left'].set_alpha(0.5)\n\n# Set the x-axis line capstyle\nax.spines['bottom'].set_capstyle('round')\n\n# Set the y-axis line capstyle\nax.spines['left'].set_capstyle('round')\n\n# Set the x-axis line joinstyle\nax.spines['bottom'].set_joinstyle('round')\n\n# Set the y-axis line joinstyle\nax.spines['left'].set_joinstyle('round')\n\n# Set the x-axis line hatch\nax.spines['bottom'].set_hatch('/')\n\n# Set the y-axis line hatch\nax.spines['left'].set_hatch('/')\n\n# Set the x-axis line linestyle\nax.spines['bottom'].set_linestyle('-')\n\n# Set the y-axis line linestyle\nax.spines['left'].set_linestyle('-')\n\n# Set the x-axis line linewidth\nax.spines['bottom'].set_linewidth(2)\n\n# Set the y-axis line linewidth\nax.spines['left'].set_linewidth(2)\n\n# Set the x-axis line color\nax.spines['bottom'].set_color('green')\n\n# Set the y-axis line color\nax.spines['left'].set_color('green')\n\n# Set the x-axis line alpha\nax.spines['bottom'].set_alpha(0.5)\n\n# Set the y-axis line alpha\nax.spines['left'].set_alpha(0.5)\n\n# Set the x-axis line capstyle\nax.spines['bottom'].set_capstyle('round')\n\n# Set the y-axis line capstyle\nax.spines['left'].set_capstyle('round')\n\n# Set the x-axis line joinstyle\nax.spines['bottom'].set_joinstyle('round')\n\n# Set the y-axis line joinstyle\nax.spines['left'].set_joinstyle('round')\n\n# Set the x-axis line hatch\nax.spines['bottom'].set_hatch('/')\n\n# Set the y-axis line hatch\nax.spines['left'].set_hatch('/')\n\n# Set the x-axis line linestyle\nax.spines['bottom'].set_linestyle('-')\n\n# Set the y-axis line linestyle\nax.spines['left'].set_linestyle('-')\n\n# Set the x-axis line linewidth\nax.spines['bottom'].set_linewidth(2)\n\n# Set the y-axis line linewidth\nax.spines['left'].set_linewidth(2)\n\n# Set the x-axis line color\nax.spines['bottom'].set_color('green')\n\n# Set the y-axis line color\nax.spines['left'].set_color('green')\n\n# Set the x-axis line alpha\nax.spines['bottom'].set_alpha(0.5)\n\n# Set the y-axis line alpha\nax.spines['left'].set_alpha(0.5)\n\n# Set the x-axis line capstyle\nax.spines['bottom'].set_capstyle('round')\n\n# Set the y-axis line capstyle\nax.spines['left'].set_capstyle('round')\n\n# Set the x-axis line joinstyle\nax.spines['bottom'].set_joinstyle('round')\n\n# Set the y-axis line joinstyle\nax.spines['left'].set_joinstyle('round')\n\n# Set the x-axis line hatch\nax.spines['bottom'].set_hatch('/')\n\n# Set the y-axis line hatch\nax.spines['left'].set_hatch('/')\n\n# Set the x-axis line linestyle\nax.spines['bottom'].set_linestyle('-')\n\n# Set the y-axis line linestyle\nax.spines['left'].set_linestyle('-')\n\n# Set the x-axis line linewidth\nax.spines['bottom'].set_linewidth(2)\n\n# Set the y-axis line linewidth\nax.spines['left'].set_linewidth(2)\n\n# Set the x-axis line color\nax.spines['bottom'].set_color('green')\n\n# Set the y-axis line color\nax.spines['left'].set_color('green')\n\n# Set the x-axis line alpha\nax.spines['bottom'].set_alpha(0.5)\n\n# Set the y-axis line alpha\nax.spines['left'].set_alpha(0.5)\n\n# Set the x-axis line capstyle\nax.spines['bottom'].set_capstyle('round')\n\n# Set the y-axis line capstyle\nax.spines['left'].set_capstyle('round')\n\n# Set the x-axis line joinstyle\nax.spines['bottom'].set_joinstyle('round')\n\n# Set the y-axis line joinstyle\nax.spines['left'].set_joinstyle('round')\n\n# Set the x-axis line hatch\nax.spines['bottom'].set_hatch('/')\n\n# Set the y-axis line hatch\nax.spines['left'].set_hatch('/')\n\n# Set the x-axis line linestyle\nax.spines['bottom'].set_linestyle('-')\n\n# Set the y-axis line linestyle\nax.spines['left'].set_linestyle('-')\n\n# Set the x-axis line linewidth\nax.spines['bottom'].set_linewidth(2)\n\n# Set the y-axis line linewidth\nax.spines['left'].set_linewidth(2)\n\n# Set the x-axis line color\nax.spines['bottom'].set_color('green')\n\n# Set the y-axis line color\nax.spines['left'].set_color('green')\n\n# Set the x-axis line alpha\nax.spines['bottom'].set_alpha(0.5)\n\n# Set the y-axis line alpha\nax.spines['left'].set_alpha(0.5)\n\n# Set the x-axis line capstyle\nax.spines['bottom'].set_capstyle('round')\n\n# Set the y-axis line capstyle\nax.spines['left'].set_capstyle('round')\n\n# Set the x-axis line joinstyle\nax.spines['bottom'].set_joinstyle('round')\n\n# Set the y-axis line joinstyle\nax.spines['left'].set_joinstyle('round')\n\n# Set the x-axis line hatch\nax.spines['bottom'].set_hatch('/')\n\n# Set the y-axis line hatch\nax.spines['left'].set_hatch('/')\n\n# Set the x-axis line linestyle\nax.spines['bottom'].set_linestyle('-')\n\n# Set the y-axis line linestyle\nax.spines['left'].set_linestyle('-')\n\n# Set the x-axis line linewidth\nax.spines['bottom'].set_linewidth(2)\n\n# Set the y-axis line linewidth\nax.spines['left'].set_linewidth(2)\n\n# Set the x-axis line color\nax.spines['bottom'].set_color('green')\n\n# Set the y-axis line color\nax.spines['left'].set_color('green')\n\n# Set the x-axis line alpha\nax.spines['bottom'].set_alpha(0.5)\n\n# Set the y-axis line alpha\nax.spines['left'].set_alpha(0.5)\n\n# Set the x-axis line capstyle\nax.spines['bottom'].set_capstyle('round')\n\n# Set the y-axis line capstyle\nax.spines['left'].set_capstyle('round')\n\n# Set the x-axis line joinstyle\nax.spines['bottom'].set_joinstyle('round')\n\n# Set the y-axis line joinstyle\nax.spines['left'].set_joinstyle('round')\n\n# Set the x-axis line hatch\nax.spines['bottom'].set_hatch('/')\n\n# Set the y-axis line hatch\nax.spines['left'].set_hatch('/')\n\n# Set the x-axis line linestyle\nax.spines['bottom'].set_linestyle('-')\n\n# Set the y-axis line linestyle\nax.spines['left'].set_linestyle('-')\n\n# Set the x-axis line linewidth\nax.spines['bottom'].set_linewidth(2)\n\n# Set the y-axis line linewidth\nax.spines['left'].set_linewidth(2)\n\n# Set the x-axis line color\nax.spines['bottom'].set_color('green')\n\n# Set the y-axis line color\nax.spines['left'].set_color('green')\n\n# Set the x-axis line alpha\nax.spines['bottom'].set_alpha(0.5)\n\n# Set the y-axis line alpha\nax.spines['left'].set_alpha(0.5)\n\n# Set the x-axis line capstyle\nax.spines['bottom'].set_capstyle('round')\n\n# Set the y-axis line capstyle\nax.spines['left'].set_capstyle('round')\n\n# Set the x-axis line joinstyle\nax.spines['bottom'].set_joinstyle('round')\n\n# Set the y-axis line joinstyle\nax.spines['left'].set_joinstyle('round')\n\n# Set the x-axis line hatch\nax.spines['bottom'].set_hatch('/')\n\n# Set the y-axis line hatch\nax.spines['left'].set_hatch('/')\n\n# Set the x-axis line linestyle\nax.spines['bottom'].set_linestyle('-')\n\n# Set the y-axis line linestyle\nax.spines['left'].set_linestyle('-')\n\n# Set the x-axis line linewidth\nax.spines['bottom'].set_linewidth(2)\n\n# Set the y-axis line linewidth\nax.spines['left'].set_linewidth(2)\n\n# Set the x-axis line color\nax.spines['bottom'].set_color('green')\n\n# Set the y-axis line color\nax.spines['left'].set_color('green')\n\n# Set the x-axis line alpha\nax.spines['bottom'].set_alpha(0.5)\n\n# Set the y-axis line alpha\nax.spines['left'].set_alpha(0.5)\n\n# Set the x-axis line capstyle\nax.spines['bottom'].set_capstyle('round')\n\n# Set the y-axis line capstyle\nax.spines['left'].set_capstyle('round')\n\n# Set the x-axis line joinstyle\nax.spines['bottom'].set_joinstyle('round')\n\n# Set the y-axis line joinstyle\nax.spines['left'].set_joinstyle('round')\n\n# Set the x-axis line hatch\nax.spines['bottom'].set_hatch('/')\n\n# Set the y-axis line hatch\nax.spines['left'].set_hatch('/')\n\n# Set the x-axis line linestyle\nax.spines['bottom'].set_linestyle('-')\n\n# Set the y-axis line linestyle\nax.spines['left'].set_linestyle('-')\n\n# Set the x-axis line linewidth\nax.spines['bottom'].set_linewidth(2)\n\n# Set the y-axis line linewidth\nax.spines['left'].set_linewidth(2)\n\n# Set the x-axis line color\nax.spines['bottom'].set_color('green')\n\n# Set the y-axis line color\nax.spines['left'].set_color('green')\n\n# Set the x-axis line alpha\nax.spines['bottom'].set_alpha(0.5)\n\n# Set the y-axis line alpha\nax.spines['left'].set_alpha(0.5)\n\n# Set the x-axis line capstyle\nax.spines['bottom'].set_capstyle('round')\n\n# Set the y-axis line capstyle\nax.spines['left'].set_capstyle('round')\n\n# Set the x-axis line joinstyle\nax.spines['bottom'].set_joinstyle('round')\n\n# Set the y-axis line joinstyle\nax.spines['left'].set_joinstyle('round')\n\n# Set the x-axis line hatch\nax.spines['bottom'].set_hatch('/')\n\n# Set the y-axis line hatch\nax.spines['left'].set_hatch('/')\n\n# Set the x-axis line linestyle\nax.spines['bottom'].set_linestyle('-')\n\n# Set the y-axis line linestyle\nax.spines['left'].set_linestyle('-')\n\n# Set the x-axis line linewidth\nax.spines['bottom'].set_linewidth(2)\n\n# Set the y-axis line linewidth\nax.spines['left'].set_linewidth(2)\n\n# Set the x-axis line color\nax.spines['bottom'].set_color('green')\n\n# Set the y-axis line color\nax.spines['left'].set_color('green')\n\n# Set the x-axis line alpha\nax.spines['bottom'].set_alpha(0.5)\n\n# Set the y-axis line alpha\nax.spines['left'].set_alpha(0.5)\n\n# Set the x-axis line capstyle\nax.spines['bottom'].set_capstyle('round')\n\n# Set the y-axis line capstyle\nax.spines['left'].set_capstyle('round')\n\n# Set the x-axis line joinstyle\nax.spines['bottom'].set_joinstyle('round')\n\n# Set the y-axis line joinstyle\nax.spines['left'].set_joinstyle('round')\n\n# Set the x-axis line hatch\nax.spines['bottom'].set_hatch('/')\n\n# Set the y-axis line hatch\nax.spines['left'].set_hatch('/')\n\n# Set the x-axis line linestyle\nax.spines['bottom'].set_linestyle('-')\n\n# Set the y-axis line linestyle\nax.spines['left'].set_linestyle('-')\n\n# Set the x-axis line linewidth\nax.spines['bottom'].set_linewidth(2)\n\n# Set the y-axis line linewidth\nax.spines['left'].set_linewidth(2)\n\n# Set the x-axis line color\nax.spines['bottom'].set_color('green')\n\n# Set the y-axis line color\nax.spines['left'].set_color('green')\n\n# Set the x-axis line alpha\nax.spines['bottom'].set_alpha(0.5)\n\n# Set the y-axis line alpha\nax.spines['left'].set_alpha(0.5)\n\n# Set the x-axis line capstyle\nax.spines['bottom'].set_capstyle('round')\n\n# Set the y-axis line capstyle\nax.spines['left'].set_capstyle('round')\n\n# Set the x-axis line joinstyle\nax.spines['bottom'].set_joinstyle('round')\n\n# Set the y-axis line joinstyle\nax.spines['left'].set_joinstyle('round')\n\n# Set the x-axis line hatch\nax.spines['bottom'].set_hatch('/')\n\n# Set the y-axis line hatch\nax.spines['left'].set_hatch('/')\n\n# Set the x-axis line linestyle\nax.spines['bottom'].set_linestyle('-')\n\n# Set the y-axis line linestyle\nax.spines['left'].set_linestyle('-')\n\n# Set the x-axis line linewidth\nax.spines['bottom'].set_linewidth(2)\n\n# Set the y-axis line linewidth\nax.spines['left'].set_linewidth(2)\n\n# Set the x-axis line color\nax.spines['bottom'].set_color('green')\n\n# Set the y-axis line color\nax.spines['left'].set_color('green')\n\n# Set the x-axis line alpha\nax.spines['bottom'].set_alpha(0.5)\n\n# Set the y-axis line alpha\nax.spines['left'].set_alpha(0.5)\n\n# Set the x-axis line capstyle\nax.spines['bottom'].set_capstyle('round')\n\n# Set the y-axis line capstyle\nax.sp"}
{"file": "dataset/ori_500/errorpoint_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(10.0, 7.0))\n\n# Set the title of the plot\nax.set_title('variable, asymmetric error')\n\n# Create a rectangle for the errorbar\nerrorbar = plt.Rectangle((0, 0), 1, 1, color='purple')\nax.add_patch(errorbar)\n\n# Create a scatter plot with the data points\nx = [0, 5, 10, 15, 20]\ny = [-2.1, -2.6, -2.9, -1.2, -1.0]\nax.scatter(x, y, color='purple')\n\n# Create a line plot with the error bars\nax.errorbar(x, y, yerr=0.5, fmt='-o', ecolor='purple', capsize=5)\n\n# Set the limits of the x-axis\nax.set_xlim(0, 20)\n\n# Set the limits of the y-axis\nax.set_ylim(14, 19)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/graph_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Define the coordinates of the vertices of the hexagon\nvertices = [(0, 0), (1, 0), (1.5, 1), (1, 2), (0, 2), (-0.5, 1)]\n\n# Plot the hexagon\nax.plot(*zip(*vertices), 'k-')\n\n# Add circles at each vertex\nfor vertex in vertices:\n    circle = plt.Circle(vertex, 0.1, color='blue')\n    ax.add_artist(circle)\n\n# Set the aspect ratio to be equal so that the circle is not distorted\nax.set_aspect('equal')\n\n# Remove the axes\nax.axis('off')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/graph_2.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Define the coordinates of the nodes\nnodes = np.array([[0, 0], [1, 1], [2, 2], [3, 3], [4, 4]])\n\n# Draw the nodes as circles\nfor node in nodes:\n    circle = plt.Circle(node, 0.1, color='pink')\n    ax.add_artist(circle)\n\n# Draw the edges as lines\nedges = [[nodes[0], nodes[1]], [nodes[1], nodes[2]], [nodes[2], nodes[3]], [nodes[3], nodes[4]], [nodes[4], nodes[0]]]\nfor edge in edges:\n    line = plt.Line2D([edge[0][0], edge[1][0]], [edge[0][1], edge[1][1]], color='gray')\n    ax.add_artist(line)\n\n# Set the limits of the plot\nax.set_xlim(-1, 5)\nax.set_ylim(-1, 5)\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/graph_3.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Define the data for the plot\nx = np.linspace(0, 2*np.pi, 100)\ny = np.sin(x)\n\n# Plot the data\nax.plot(x, y)\n\n# Set the title and labels\nax.set_title('Sine Wave')\nax.set_xlabel('Time (s)')\nax.set_ylabel('Amplitude')\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/graph_4.pdf", "response": "```\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Set the background color of the plot\nax.set_facecolor('white')\n\n# Create a circle for the central element\ncircle = plt.Circle((5, 5), 2, color='blue')\nax.add_artist(circle)\n\n# Create a rectangle for the outer elements\nrectangle = plt.Rectangle((2, 2), 6, 6, color='gray', fill=False)\nax.add_artist(rectangle)\n\n# Create circles for the outer elements\ncircles = [plt.Circle((2, 2), 1, color='pink'), \n           plt.Circle((8, 2), 1, color='pink'), \n           plt.Circle((2, 8), 1, color='pink'), \n           plt.Circle((8, 8), 1, color='pink')]\nfor c in circles:\n    ax.add_artist(c)\n\n# Set the limits of the plot\nax.set_xlim(0, 10)\nax.set_ylim(0, 10)\n\n# Remove the axes\nax.axis('off')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/graph_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Define the triangle vertices\ntriangle_vertices = np.array([[0, 0], [1, 0], [0.5, np.sqrt(3)/2]])\n\n# Plot the triangle\nax.plot(triangle_vertices[:, 0], triangle_vertices[:, 1], 'k-')\n\n# Define the circle center and radius\ncircle_center = np.array([0.5, 0.5])\ncircle_radius = 0.2\n\n# Plot the circle\ncircle = plt.Circle(circle_center, circle_radius, color='orange')\nax.add_artist(circle)\n\n# Set the aspect ratio to be equal so that the circle is not distorted\nax.set_aspect('equal')\n\n# Set the limits of the plot\nax.set_xlim(-0.5, 1.5)\nax.set_ylim(-0.5, 1.5)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Set the title of the plot\nax.set_title('CoreNLP')\n\n# Create a rectangle for the CoreNLP section\nrect1 = plt.Rectangle((0.1, 0.7), 0.2, 0.3, color='pink')\nax.add_patch(rect1)\n\n# Create a rectangle for the Stanza section\nrect2 = plt.Rectangle((0.4, 0.7), 0.2, 0.3, color='orange')\nax.add_patch(rect2)\n\n# Create a rectangle for the Biaffine section\nrect3 = plt.Rectangle((0.7, 0.7), 0.2, 0.3, color='red')\nax.add_patch(rect3)\n\n# Create a rectangle for the StackPointer section\nrect4 = plt.Rectangle((0.1, 0.4), 0.2, 0.3, color='pink')\nax.add_patch(rect4)\n\n# Create a rectangle for the TowerParse section\nrect5 = plt.Rectangle((0.4, 0.4), 0.2, 0.3, color='orange')\nax.add_patch(rect5)\n\n# Create a rectangle for the AVG section\nrect6 = plt.Rectangle((0.7, 0.4), 0.2, 0.3, color='red')\nax.add_patch(rect6)\n\n# Create a rectangle for the CoreNLP section\nrect7 = plt.Rectangle((0.1, 0.1), 0.2, 0.3, color='pink')\nax.add_patch(rect7)\n\n# Create a rectangle for the Stanza section\nrect8 = plt.Rectangle((0.4, 0.1), 0.2, 0.3, color='orange')\nax.add_patch(rect8)\n\n# Create a rectangle for the Biaffine section\nrect9 = plt.Rectangle((0.7, 0.1), 0.2, 0.3, color='red')\nax.add_patch(rect9)\n\n# Create a rectangle for the StackPointer section\nrect10 = plt.Rectangle((0.1, 0.1), 0.2, 0.3, color='pink')\nax.add_patch(rect10)\n\n# Create a rectangle for the TowerParse section\nrect11 = plt.Rectangle((0.4, 0.1), 0.2, 0.3, color='orange')\nax.add_patch(rect11)\n\n# Create a rectangle for the AVG section\nrect12 = plt.Rectangle((0.7, 0.1), 0.2, 0.3, color='red')\nax.add_patch(rect12)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Set the color map\ncmap = plt.get_cmap('coolwarm')\n\n# Create a color bar\ncbar = fig.colorbar(cmap(np.linspace(0, 1, 256)), ax=ax)\n\n# Set the color bar label\ncbar.set_label('Voting Percentage')\n\n# Set the title of the plot\nax.set_title('Voting Results')\n\n# Set the x-axis label\nax.set_xlabel('Voter')\n\n# Set the y-axis label\nax.set_ylabel('Character')\n\n# Set the tick labels for the x-axis\nax.set_xticks(range(len(['Wererwolf', 'Seer', 'Witch', 'Seer', 'Abstain'])))\nax.set_xticklabels(['Wererwolf', 'Seer', 'Witch', 'Seer', 'Abstain'])\n\n# Set the tick labels for the y-axis\nax.set_yticks(range(len(['Villager', 'Hunter', 'Witch', 'Seer', 'Wererwolf'])))\nax.set_yticklabels(['Villager', 'Hunter', 'Witch', 'Seer', 'Wererwolf'])\n\n# Create a grid of circles with different colors\nfor i in range(len(['Villager', 'Hunter', 'Witch', 'Seer', 'Wererwolf'])):\n    for j in range(len(['Wererwolf', 'Seer', 'Witch', 'Seer', 'Abstain'])):\n        ax.add_artist(plt.Circle((j, i), 0.4, color=cmap(np.random.rand())))\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the color map\ncmap = plt.get_cmap('hot')\n\n# Create a color bar\ncbar = fig.colorbar(cmap, ax=ax)\n\n# Set the color bar label\ncbar.set_label('Player Rating')\n\n# Set the title of the plot\nax.set_title('Player Ratings')\n\n# Set the x-axis label\nax.set_xlabel('Players')\n\n# Set the y-axis label\nax.set_ylabel('Ratings')\n\n# Set the tick labels for the x-axis\nax.set_xticks([0, 1, 2, 3, 4, 5])\nax.set_xticklabels(['D. Fox', 'T. Haliburton', 'M. Harkless', 'H. Barnes', 'C. Metu'])\n\n# Set the tick labels for the y-axis\nax.set_yticks([0, 1, 2, 3, 4, 5])\nax.set_yticklabels(['0.2', '0.4', '0.6', '0.8', '1.0', '1.2'])\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Player Ratings', horizontalalignment='center', verticalalignment='center', fontsize=16, color='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Player Ratings', horizontalalignment='center', verticalalignment='center', fontsize=16, color='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Player Ratings', horizontalalignment='center', verticalalignment='center', fontsize=16, color='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Player Ratings', horizontalalignment='center', verticalalignment='center', fontsize=16, color='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Player Ratings', horizontalalignment='center', verticalalignment='center', fontsize=16, color='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Player Ratings', horizontalalignment='center', verticalalignment='center', fontsize=16, color='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Player Ratings', horizontalalignment='center', verticalalignment='center', fontsize=16, color='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Player Ratings', horizontalalignment='center', verticalalignment='center', fontsize=16, color='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Player Ratings', horizontalalignment='center', verticalalignment='center', fontsize=16, color='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Player Ratings', horizontalalignment='center', verticalalignment='center', fontsize=16, color='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Player Ratings', horizontalalignment='center', verticalalignment='center', fontsize=16, color='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Player Ratings', horizontalalignment='center', verticalalignment='center', fontsize=16, color='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Player Ratings', horizontalalignment='center', verticalalignment='center', fontsize=16, color='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Player Ratings', horizontalalignment='center', verticalalignment='center', fontsize=16, color='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Player Ratings', horizontalalignment='center', verticalalignment='center', fontsize=16, color='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Player Ratings', horizontalalignment='center', verticalalignment='center', fontsize=16, color='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Player Ratings', horizontalalignment='center', verticalalignment='center', fontsize=16, color='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Player Ratings', horizontalalignment='center', verticalalignment='center', fontsize=16, color='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Player Ratings', horizontalalignment='center', verticalalignment='center', fontsize=16, color='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Player Ratings', horizontalalignment='center', verticalalignment='center', fontsize=16, color='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the axis lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the text\nax.text(0.5, 0."}
{"file": "dataset/ori_500/heatmap_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 5.0))\n\n# Set the background color of the plot\nax.set_facecolor('white')\n\n# Set the title of the plot\nax.set_title('Live vs Predicted Category Similarity')\n\n# Set the x-axis label\nax.set_xlabel('Category')\n\n# Set the y-axis label\nax.set_ylabel('Similarity')\n\n# Set the x-axis limits\nax.set_xlim(0, 50)\n\n# Set the y-axis limits\nax.set_ylim(0, 100)\n\n# Set the x-axis ticks\nax.set_xticks(np.arange(0, 51, 10))\n\n# Set the y-axis ticks\nax.set_yticks(np.arange(0, 101, 10))\n\n# Set the x-axis tick labels\nax.set_xticklabels(['0', '10', '20', '30', '40', '50'])\n\n# Set the y-axis tick labels\nax.set_yticklabels(['0%', '10%', '20%', '30%', '40%', '50%', '60%', '70%', '80%', '90%', '100%'])\n\n# Set the grid lines\nax.grid(True)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot title\nax.set_title('Live vs Predicted Category Similarity', color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('Category', color='black')\n\n# Set the color of the y-axis label\nax.set_ylabel('Similarity', color='black')\n\n# Set the color of the x-axis ticks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis ticks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['0', '10', '20', '30', '40', '50'], color='black')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0%', '10%', '20%', '30%', '40%', '50%', '60%', '70%', '80%', '90%', '100%'], color='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot title\nax.set_title('Live vs Predicted Category Similarity', color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('Category', color='black')\n\n# Set the color of the y-axis label\nax.set_ylabel('Similarity', color='black')\n\n# Set the color of the x-axis ticks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis ticks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['0', '10', '20', '30', '40', '50'], color='black')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0%', '10%', '20%', '30%', '40%', '50%', '60%', '70%', '80%', '90%', '100%'], color='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot title\nax.set_title('Live vs Predicted Category Similarity', color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('Category', color='black')\n\n# Set the color of the y-axis label\nax.set_ylabel('Similarity', color='black')\n\n# Set the color of the x-axis ticks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis ticks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['0', '10', '20', '30', '40', '50'], color='black')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0%', '10%', '20%', '30%', '40%', '50%', '60%', '70%', '80%', '90%', '100%'], color='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot title\nax.set_title('Live vs Predicted Category Similarity', color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('Category', color='black')\n\n# Set the color of the y-axis label\nax.set_ylabel('Similarity', color='black')\n\n# Set the color of the x-axis ticks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis ticks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['0', '10', '20', '30', '40', '50'], color='black')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0%', '10%', '20%', '30%', '40%', '50%', '60%', '70%', '80%', '90%', '100%'], color='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot title\nax.set_title('Live vs Predicted Category Similarity', color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('Category', color='black')\n\n# Set the color of the y-axis label\nax.set_ylabel('Similarity', color='black')\n\n# Set the color of the x-axis ticks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis ticks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['0', '10', '20', '30', '40', '50'], color='black')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0%', '10%', '20%', '30%', '40%', '50%', '60%', '70%', '80%', '90%', '100%'], color='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot title\nax.set_title('Live vs Predicted Category Similarity', color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('Category', color='black')\n\n# Set the color of the y-axis label\nax.set_ylabel('Similarity', color='black')\n\n# Set the color of the x-axis ticks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis ticks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['0', '10', '20', '30', '40', '50'], color='black')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0%', '10%', '20%', '30%', '40%', '50%', '60%', '70%', '80%', '90%', '100%'], color='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot title\nax.set_title('Live vs Predicted Category Similarity', color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('Category', color='black')\n\n# Set the color of the y-axis label\nax.set_ylabel('Similarity', color='black')\n\n# Set the color of the x-axis ticks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis ticks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['0', '10', '20', '30', '40', '50'], color='black')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0%', '10%', '20%', '30%', '40%', '50%', '60%', '70%', '80%', '90%', '100%'], color='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot title\nax.set_title('Live vs Predicted Category Similarity', color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('Category', color='black')\n\n# Set the color of the y-axis label\nax.set_ylabel('Similarity', color='black')\n\n# Set the color of the x-axis ticks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis ticks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['0', '10', '20', '30', '40', '50'], color='black')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0%', '10%', '20%', '30%', '40%', '50%', '60%', '70%', '80%', '90%', '100%'], color='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot title\nax.set_title('Live vs Predicted Category Similarity', color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('Category', color='black')\n\n# Set the color of the y-axis label\nax.set_ylabel('Similarity', color='black')\n\n# Set the color of the x-axis ticks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis ticks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['0', '10', '20', '30', '40', '50'], color='black')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0%', '10%', '20%', '30%', '40%', '50%', '60%', '70%', '80%', '90%', '100%'], color='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot title\nax.set_title('Live vs Predicted Category Similarity', color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('Category', color='black')\n\n# Set the color of the y-axis label\nax.set_ylabel('Similarity', color='black')\n\n# Set the color of the x-axis ticks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis ticks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['0', '10', '20', '30', '40', '50'], color='black')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0%', '10%', '20%', '30%', '40%', '50%', '60%', '70%', '80%', '90%', '100%'], color='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot title\nax.set_title('Live vs Predicted Category Similarity', color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('Category', color='black')\n\n# Set the color of the y-axis label\nax.set_ylabel('Similarity', color='black')\n\n# Set the color of the x-axis ticks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis ticks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['0', '10', '20', '30', '40', '50'], color='black')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0%', '10%', '20%', '30%', '40%', '50%', '60%', '70%', '80%', '90%', '100%'], color='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot title\nax.set_title('Live vs Predicted Category Similarity', color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('Category', color='black')\n\n# Set the color of the y-axis label\nax.set_ylabel('Similarity', color='black')\n\n# Set the color of the x-axis ticks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis ticks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['0', '10', '20', '30', '40', '50'], color='black')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0%', '10%', '20%', '30%', '40%', '50%', '60%', '70%', '80%', '90%', '100%'], color='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.sp"}
{"file": "dataset/ori_500/heatmap_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Set the title of the plot\nax.set_title('LOH0')\n\n# Create a rectangle for the first column\nrect1 = plt.Rectangle((0, 0), 1, 1, color='grey')\nax.add_patch(rect1)\n\n# Create a rectangle for the second column\nrect2 = plt.Rectangle((1, 0), 1, 1, color='green')\nax.add_patch(rect2)\n\n# Create a rectangle for the third column\nrect3 = plt.Rectangle((2, 0), 1, 1, color='blue')\nax.add_patch(rect3)\n\n# Create a rectangle for the fourth column\nrect4 = plt.Rectangle((3, 0), 1, 1, color='red')\nax.add_patch(rect4)\n\n# Create a rectangle for the fifth column\nrect5 = plt.Rectangle((4, 0), 1, 1, color='yellow')\nax.add_patch(rect5)\n\n# Create a rectangle for the sixth column\nrect6 = plt.Rectangle((5, 0), 1, 1, color='orange')\nax.add_patch(rect6)\n\n# Create a rectangle for the seventh column\nrect7 = plt.Rectangle((6, 0), 1, 1, color='brown')\nax.add_patch(rect7)\n\n# Create a rectangle for the eighth column\nrect8 = plt.Rectangle((7, 0), 1, 1, color='purple')\nax.add_patch(rect8)\n\n# Create a rectangle for the ninth column\nrect9 = plt.Rectangle((8, 0), 1, 1, color='pink')\nax.add_patch(rect9)\n\n# Create a rectangle for the tenth column\nrect10 = plt.Rectangle((9, 0), 1, 1, color='cyan')\nax.add_patch(rect10)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 10.0))\n\n# Set the title of the plot\nax.set_title('Global Economy')\n\n# Set the x-axis label\nax.set_xlabel('Countries')\n\n# Set the y-axis label\nax.set_ylabel('GDP (trillions of USD)')\n\n# Set the x-ticks\nax.set_xticks([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\n\n# Set the x-tick labels\nax.set_xticklabels(['LLVA', 'BakLiva', 'GeminiProVision', 'GPT4', 'CODI', 'Academia', 'Agriculture', 'Construction and Real Estate', 'Corporate', 'Entertainment'])\n\n# Set the y-ticks\nax.set_yticks(np.arange(-1, 1.1, 0.1))\n\n# Set the y-tick labels\nax.set_yticklabels(['-1.00', '-0.90', '-0.80', '-0.70', '-0.60', '-0.50', '-0.40', '-0.30', '-0.20', '-0.10', '0.00', '0.10', '0.20', '0.30', '0.40', '0.50', '0.60', '0.70', '0.80', '0.90', '1.00'])\n\n# Set the color map\ncmap = plt.get_cmap('coolwarm')\n\n# Set the color bar\ncbar = fig.colorbar(cmap)\n\n# Set the color bar label\ncbar.set_label('Inflation Rate (%)')\n\n# Set the color bar ticks\ncbar.set_ticks([-0.5, 0, 0.5, 1])\n\n# Set the color bar tick labels\ncbar.set_ticklabels(['-50%', '0%', '50%', '100%'])\n\n# Set the color bar orientation\ncbar.ax.set_aspect(10)\n\n# Set the color bar position\ncbar.ax.set_position([0.8, 0.1, 0.05, 0.8])\n\n# Set the color bar label rotation\ncbar.ax.yaxis.set_label_position('left')\n\n# Set the color bar label rotation\ncbar.ax.yaxis.set_tick_params(labelrotation=90)\n\n# Set the color bar label rotation\ncbar.ax.xaxis.set_tick_params(labelrotation=90)\n\n# Set the color bar label rotation\ncbar.ax.yaxis.set_tick_params(labelrotation=90)\n\n# Set the color bar label rotation\ncbar.ax.xaxis.set_tick_params(labelrotation=90)\n\n# Set the color bar label rotation\ncbar.ax.yaxis.set_tick_params(labelrotation=90)\n\n# Set the color bar label rotation\ncbar.ax.xaxis.set_tick_params(labelrotation=90)\n\n# Set the color bar label rotation\ncbar.ax.yaxis.set_tick_params(labelrotation=90)\n\n# Set the color bar label rotation\ncbar.ax.xaxis.set_tick_params(labelrotation=90)\n\n# Set the color bar label rotation\ncbar.ax.yaxis.set_tick_params(labelrotation=90)\n\n# Set the color bar label rotation\ncbar.ax.xaxis.set_tick_params(labelrotation=90)\n\n# Set the color bar label rotation\ncbar.ax.yaxis.set_tick_params(labelrotation=90)\n\n# Set the color bar label rotation\ncbar.ax.xaxis.set_tick_params(labelrotation=90)\n\n# Set the color bar label rotation\ncbar.ax.yaxis.set_tick_params(labelrotation=90)\n\n# Set the color bar label rotation\ncbar.ax.xaxis.set_tick_params(labelrotation=90)\n\n# Set the color bar label rotation\ncbar.ax.yaxis.set_tick_params(labelrotation=90)\n\n# Set the color bar label rotation\ncbar.ax.xaxis.set_tick_params(labelrotation=90)\n\n# Set the color bar label rotation\ncbar.ax.yaxis.set_tick_params(labelrotation=90)\n\n# Set the color bar label rotation\ncbar.ax.xaxis.set_tick_params(labelrotation=90)\n\n# Set the color bar label rotation\ncbar.ax.yaxis.set_tick_params(labelrotation=90)\n\n# Set the color bar label rotation\ncbar.ax.xaxis.set_tick_params(labelrotation=90)\n\n# Set the color bar label rotation\ncbar.ax.yaxis.set_tick_params(labelrotation=90)\n\n# Set the color bar label rotation\ncbar.ax.xaxis.set_tick_params(labelrotation=90)\n\n# Set the color bar label rotation\ncbar.ax.yaxis.set_tick_params(labelrotation=90)\n\n# Set the color bar label rotation\ncbar.ax.xaxis.set_tick_params(labelrotation=90)\n\n# Set the color bar label rotation\ncbar.ax.yaxis.set_tick_params(labelrotation=90)\n\n# Set the color bar label rotation\ncbar.ax.xaxis.set_tick_params(labelrotation=90)\n\n# Set the color bar label rotation\ncbar.ax.yaxis.set_tick_params(labelrotation=90)\n\n# Set the color bar label rotation\ncbar.ax.xaxis.set_tick_params(labelrotation=90)\n\n# Set the color bar label rotation\ncbar.ax.yaxis.set_tick_params(labelrotation=90)\n\n# Set the color bar label rotation\ncbar.ax.xaxis.set_tick_params(labelrotation=90)\n\n# Set the color bar label rotation\ncbar.ax.yaxis.set_tick_params(labelrotation=90)\n\n# Set the color bar label rotation\ncbar.ax.xaxis.set_tick_params(labelrotation=90)\n\n# Set the color bar label rotation\ncbar.ax.yaxis.set_tick_params(labelrotation=90)\n\n# Set the color bar label rotation\ncbar.ax.xaxis.set_tick_params(labelrotation=90)\n\n# Set the color bar label rotation\ncbar.ax.yaxis.set_tick_params(labelrotation=90)\n\n# Set the color bar label rotation\ncbar.ax.xaxis.set_tick_params(labelrotation=90)\n\n# Set the color bar label rotation\ncbar.ax.yaxis.set_tick_params(labelrotation=90)\n\n# Set the color bar label rotation\ncbar.ax.xaxis.set_tick_params(labelrotation=90)\n\n# Set the color bar label rotation\ncbar.ax.yaxis.set_tick_params(labelrotation=90)\n\n# Set the color bar label rotation\ncbar.ax.xaxis.set_tick_params(labelrotation=90)\n\n# Set the color bar label rotation\ncbar.ax.yaxis.set_tick_params(labelrotation=90)\n\n# Set the color bar label rotation\ncbar.ax.xaxis.set_tick_params(labelrotation=90)\n\n# Set the color bar label rotation\ncbar.ax.yaxis.set_tick_params(labelrotation=90)\n\n# Set the color bar label rotation\ncbar.ax.xaxis.set_tick_params(labelrotation=90)\n\n# Set the color bar label rotation\ncbar.ax.yaxis.set_tick_params(labelrotation=90)\n\n# Set the color bar label rotation\ncbar.ax.xaxis.set_tick_params(labelrotation=90)\n\n# Set the color bar label rotation\ncbar.ax.yaxis.set_tick_params(labelrotation=90)\n\n# Set the color bar label rotation\ncbar.ax.xaxis.set_tick_params(labelrotation=90)\n\n# Set the color bar label rotation\ncbar.ax.yaxis.set_tick_params(labelrotation=90)\n\n# Set the color bar label rotation\ncbar.ax.xaxis.set_tick_params(labelrotation=90)\n\n# Set the color bar label rotation\ncbar.ax.yaxis.set_tick_params(labelrotation=90)\n\n# Set the color bar label rotation\ncbar.ax.xaxis.set_tick_params(labelrotation=90)\n\n# Set the color bar label rotation\ncbar.ax.yaxis.set_tick_params(labelrotation=90)\n\n# Set the color bar label rotation\ncbar.ax.xaxis.set_tick_params(labelrotation=90)\n\n# Set the color bar label rotation\ncbar.ax.yaxis.set_tick_params(labelrotation=90)\n\n# Set the color bar label rotation\ncbar.ax.xaxis.set_tick_params(labelrotation=90)\n\n# Set the color bar label rotation\ncbar.ax.yaxis.set_tick_params(labelrotation=90)\n\n# Set the color bar label rotation\ncbar.ax.xaxis.set_tick_params(labelrotation=90)\n\n# Set the color bar label rotation\ncbar.ax.yaxis.set_tick_params(labelrotation=90)\n\n# Set the color bar label rotation\ncbar.ax.xaxis.set_tick_params(labelrotation=90)\n\n# Set the color bar label rotation\ncbar.ax.yaxis.set_tick_params(labelrotation=90)\n\n# Set the color bar label rotation\ncbar.ax.xaxis.set_tick_params(labelrotation=90)\n\n# Set the color bar label rotation\ncbar.ax.yaxis.set_tick_params(labelrotation=90)\n\n# Set the color bar label rotation\ncbar.ax.xaxis.set_tick_params(labelrotation=90)\n\n# Set the color bar label rotation\ncbar.ax.yaxis.set_tick_params(labelrotation=90)\n\n# Set the color bar label rotation\ncbar.ax.xaxis.set_tick_params(labelrotation=90)\n\n# Set the color bar label rotation\ncbar.ax.yaxis.set_tick_params(labelrotation=90)\n\n# Set the color bar label rotation\ncbar.ax.xaxis.set_tick_params(labelrotation=90)\n\n# Set the color bar label rotation\ncbar.ax.yaxis.set_tick_params(labelrotation=90)\n\n# Set the color bar label rotation\ncbar.ax.xaxis.set_tick_params(labelrotation=90)\n\n# Set the color bar label rotation\ncbar.ax.yaxis.set_tick_params(labelrotation=90)\n\n# Set the color bar label rotation\ncbar.ax.xaxis.set_tick_params(labelrotation=90)\n\n# Set the color bar label rotation\ncbar.ax.yaxis.set_tick_params(labelrotation=90)\n\n# Set the color bar label rotation\ncbar.ax.xaxis.set_tick_params(labelrotation=90)\n\n# Set the color bar label rotation\ncbar.ax.yaxis.set_tick_params(labelrotation=90)\n\n# Set the color bar label rotation\ncbar.ax.xaxis.set_tick_params(labelrotation=90)\n\n# Set the color bar label rotation\ncbar.ax.yaxis.set_tick_params(labelrotation=90)\n\n# Set the color bar label rotation\ncbar.ax.xaxis.set_tick_params(labelrotation=90)\n\n# Set the color bar label rotation\ncbar.ax.yaxis.set_tick_params(labelrotation=90)\n\n# Set the color bar label rotation\ncbar.ax.xaxis.set_tick_params(labelrotation=90)\n\n# Set the color bar label rotation\ncbar.ax.yaxis.set_tick_params(labelrotation=90)\n\n# Set the color bar label rotation\ncbar.ax.xaxis.set_tick_params(labelrotation=90)\n\n# Set the color bar label rotation\ncbar.ax.yaxis.set_tick_params(labelrotation=90)\n\n# Set the color bar label rotation\ncbar.ax.xaxis.set_tick_params(labelrotation=90)\n\n# Set the color bar label rotation\ncbar.ax.yaxis.set_tick_params(labelrotation=90)\n\n# Set the color bar label rotation\ncbar.ax.xaxis.set_tick_params(labelrotation=90)\n\n# Set the color bar label rotation\ncbar.ax.yaxis.set_tick_params(labelrotation=90)\n\n# Set the color bar label rotation\ncbar.ax.xaxis.set_tick_params(labelrotation=90)\n\n# Set the color bar label rotation\ncbar.ax.yaxis.set_tick_params(labelrotation=90)\n\n# Set the color bar label rotation\ncbar.ax.xaxis.set_tick_params(labelrotation=90)\n\n# Set the color bar label rotation\ncbar.ax.yaxis.set_tick_params(labelrotation=90)\n\n# Set the color bar label rotation\ncbar.ax.xaxis.set_tick_params(labelrotation=90)\n\n# Set the color bar label rotation\ncbar.ax.yaxis.set_tick_params(labelrotation=90)\n\n# Set the color bar label rotation\ncbar.ax.xaxis.set_tick_params(labelrotation=90)\n\n# Set the color bar label rotation\ncbar.ax.yaxis.set_tick_params(labelrotation=90)\n\n# Set the color bar label rotation\ncbar.ax.xaxis.set_tick_params(labelrotation=90)\n\n# Set the color bar label rotation\ncbar.ax.yaxis.set_tick_params(labelrotation=90)\n\n# Set the color bar label rotation\ncbar.ax.xaxis.set_tick_params(labelrotation=90)\n\n# Set the color bar label rotation\ncbar.ax.yaxis.set_tick_params(labelrotation=90)\n\n# Set the color bar label rotation\ncbar.ax.xaxis.set_tick_params(labelrotation=90)\n\n# Set the color bar label rotation\ncbar.ax.yaxis.set_tick_params(labelrotation=90)\n\n# Set the color bar label rotation\ncbar.ax.xaxis.set_tick_params(labelrotation=90)\n\n# Set the color bar label rotation\ncbar.ax.yaxis.set_tick_params(labelrotation=90)\n\n# Set the color bar label rotation\ncbar.ax.xaxis.set_tick_params(labelrotation=90)\n\n# Set the color bar label rotation\ncbar.ax.yaxis.set_tick_params(labelrotation=90)\n\n# Set the color bar label rotation\ncbar.ax.xaxis.set_tick_params(labelrotation=90)\n\n# Set the color bar label rotation\ncbar.ax.yaxis.set_tick_params(labelrotation=90)\n\n# Set the color bar label rotation\ncbar.ax.xaxis.set_tick_params(labelrotation=90)\n\n# Set the color bar label rotation\ncbar.ax.yaxis.set_tick_params(labelrotation=90)\n\n# Set the color bar label rotation\ncbar.ax.xaxis.set_tick_params(labelrotation=90)\n\n# Set the color bar label rotation\ncbar.ax.yaxis.set_tick_params(labelrotation=90)\n\n# Set the color bar label rotation\ncbar.ax.xaxis.set_tick_params(labelrotation=90)\n\n# Set the color bar label rotation\ncbar.ax.yaxis.set_tick_params(labelrotation=90)\n\n# Set the color bar label rotation\ncbar.ax.xaxis.set_tick_params(labelrotation=90)\n\n# Set the color bar label rotation\ncbar.ax.yaxis.set_tick_params(labelrotation=90)\n\n# Set the color bar label rotation\ncbar.ax.xaxis.set_tick_params(labelrotation=90)\n\n# Set the color bar label rotation\ncbar.ax.yaxis.set_tick_params(labelrotation=90)\n\n# Set the color bar label rotation\ncbar.ax.xaxis.set_tick_params(labelrotation=90)\n\n# Set the color bar label rotation\ncbar.ax.yaxis.set_tick_params(labelrotation=90)\n\n# Set the color bar label rotation\ncbar.ax.xaxis.set_tick_params(labelrotation=90)\n\n# Set the color bar label rotation\ncbar.ax.yaxis.set_tick_params(labelrotation=90)\n\n# Set the color bar label rotation\ncbar.ax.xaxis.set_tick_params(labelrotation=90)\n\n# Set the color bar label rotation\ncbar.ax.yaxis.set_tick_params(labelrotation=90)\n\n# Set the color bar label rotation\ncbar.ax.xaxis.set_tick_params(labelrotation=90)\n\n# Set the color bar label rotation\ncbar.ax.yaxis.set_tick_params(labelrotation=90)\n\n# Set the color bar label rotation\ncbar.ax.xaxis.set_tick_params(labelrotation=90)\n\n# Set the color bar label rotation\ncbar.ax.yaxis.set_tick_params(labelrotation=90)\n\n# Set the color bar label rotation\ncbar.ax.xaxis.set_tick_params(labelrotation=90)\n\n# Set the color bar label rotation\ncbar.ax.yaxis.set_tick_params(labelrotation=90)\n\n# Set the color bar label rotation\ncbar.ax.xaxis.set_tick_params(labelrotation=90)\n\n# Set the color bar label rotation\ncbar.ax.yaxis.set_tick_params(labelrotation=90)\n\n# Set the color bar label rotation\ncbar.ax.xaxis.set_tick_params(labelrotation=90)\n\n# Set the color bar label rotation\ncbar.ax.yaxis.set_tick_params(labelrotation=90)\n\n# Set the color bar label rotation\ncbar.ax.xaxis.set_tick_params(labelrotation=90)\n\n# Set the color bar label rotation\ncbar.ax.yaxis.set_tick_params(labelrotation=90)\n\n# Set the color bar label rotation\ncbar.ax.xaxis.set_tick_params(labelrotation=90)\n\n# Set the color bar label rotation\ncbar.ax.yaxis.set_tick_params(labelrotation=90)\n\n# Set the color bar label rotation\ncbar.ax.xaxis.set_tick_params(labelrotation=90)\n\n# Set the color bar label rotation\ncbar.ax.yaxis.set_tick_params(labelrotation=90)\n\n# Set the color bar label rotation\ncbar.ax.xaxis.set_tick_params(labelrotation=90)\n\n# Set the color bar label rotation\ncbar.ax.yaxis.set_tick_params(labelrotation=90)\n\n# Set the color bar label rotation\ncbar.ax.xaxis.set_tick_params(labelrotation=90)\n\n# Set the color bar label rotation\ncbar.ax.yaxis.set_tick_params(labelrotation=90)\n\n# Set the color bar label rotation\ncbar.ax.xaxis.set_tick_params(labelrotation=90)\n\n# Set the color bar label rotation\ncbar.ax.yaxis.set_tick_params(labelrotation=90)\n\n# Set the color bar label rotation\ncbar.ax.xaxis.set_tick_params(labelrotation=90)\n\n# Set the color bar label rotation\ncbar.ax.yaxis.set_tick_params(labelrotation=90)\n\n# Set the color bar label rotation\ncbar.ax.xaxis.set_tick_params(labelrotation=90)\n\n# Set the color bar label rotation\ncbar.ax.yaxis.set_tick_params(labelrotation=90)\n\n# Set the color bar label rotation\ncbar.ax.xaxis.set_tick_params(labelrotation=90)\n\n# Set the color bar label rotation\ncbar.ax.yaxis.set_tick_params(labelrotation=90)\n\n# Set the color bar label rotation\ncbar.ax.xaxis.set_tick_params(labelrotation=90)\n\n# Set the color bar label rotation\ncbar.ax.yaxis.set_tick_params(labelrotation=90)\n\n# Set the color bar label rotation\ncbar.ax.xaxis.set_tick_params(labelrotation=90)\n\n# Set the color bar label rotation\ncbar.ax.yaxis.set_tick_params(labelrotation=90)\n\n# Set the color bar label rotation\ncbar.ax.xaxis.set_tick_params(labelrotation=90)\n\n# Set the color bar label rotation\ncbar.ax.yaxis.set_tick_params(labelrotation=90)\n\n# Set the color bar label rotation\ncbar.ax.xaxis.set_tick_params(labelrotation=90)\n\n# Set the color bar label rotation\ncbar.ax.yaxis.set_tick_params(labelrotation=90)\n\n# Set the color bar label rotation\ncbar.ax.xaxis.set_tick_params(labelrotation=90)\n\n# Set the color bar label rotation\ncbar.ax.yaxis.set_tick_params(labelrotation=90)\n\n# Set the color bar label rotation\ncbar.ax.xaxis.set_tick_params(labelrotation=90)\n\n# Set the color bar label rotation\ncbar.ax.yaxis.set_tick_params(labelrotation=90)\n\n# Set the color bar label rotation\ncbar.ax.xaxis.set_tick_params(labelrotation=90)\n\n# Set the color bar label rotation\ncbar.ax.yaxis.set_tick_params(labelrotation=90)\n\n# Set the color bar label rotation\ncbar.ax.xaxis.set_tick_params(labelrotation=9"}
{"file": "dataset/ori_500/heatmap_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 8.0))\n\n# Set the background color of the plot\nax.set_facecolor('lightblue')\n\n# Create a rectangle for the logo\nlogo = plt.Rectangle((0.1, 0.9), 0.2, 0.1, color='black')\nax.add_patch(logo)\n\n# Create a rectangle for the title\ntitle = plt.Rectangle((0.4, 0.9), 0.2, 0.1, color='purple')\nax.add_patch(title)\n\n# Create a rectangle for the subtitle\nsubtitle = plt.Rectangle((0.4, 0.85), 0.2, 0.1, color='purple')\nax.add_patch(subtitle)\n\n# Create a rectangle for the content\ncontent = plt.Rectangle((0.1, 0.7), 0.8, 0.3, color='purple')\nax.add_patch(content)\n\n# Create a rectangle for the footer\nfooter = plt.Rectangle((0.1, 0.1), 0.8, 0.1, color='purple')\nax.add_patch(footer)\n\n# Set the limits of the plot\nax.set_xlim([0, 1])\nax.set_ylim([0, 1])\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_16.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(4.0, 8.0))\n\n# Set the title of the plot\nax.set_title('Sales Performance Heatmap')\n\n# Create a color map for the heatmap\ncmap = plt.cm.RdYlGn\n\n# Create a heatmap with the sales data\nheatmap = ax.imshow(sales_data, cmap=cmap)\n\n# Add a color bar to the plot\ncbar = fig.colorbar(heatmap)\n\n# Set the tick labels for the x-axis\nax.set_xticks(range(len(products)))\nax.set_xticklabels(products)\n\n# Set the tick labels for the y-axis\nax.set_yticks(range(len(quarters)))\nax.set_yticklabels(quarters)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_17.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 3))\n\n# Set the background color of the plot\nax.set_facecolor('white')\n\n# Create a colormap\ncmap = plt.get_cmap('coolwarm')\n\n# Create a grid of rectangles\nfor i in range(10):\n    for j in range(10):\n        rect = plt.Rectangle((i*2, j*2), 2, 2, color=cmap(np.random.rand()))\n        ax.add_patch(rect)\n\n# Set the limits of the plot\nax.set_xlim(0, 20)\nax.set_ylim(0, 20)\n\n# Set the title of the plot\nax.set_title('Product Recommendations')\n\n# Set the labels of the axes\nax.set_xlabel('Time')\nax.set_ylabel('Value')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_18.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(7.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Weather')\n\n# Create a color map for the rectangles\ncmap = plt.cm.RdYlGn\n\n# Create a grid of rectangles\nfor i in range(10):\n    for j in range(10):\n        # Create a rectangle with a random color\n        rect = plt.Rectangle((i, j), 1, 1, color=cmap(np.random.rand()))\n        ax.add_patch(rect)\n\n# Set the limits of the x and y axes\nax.set_xlim(0, 10)\nax.set_ylim(0, 10)\n\n# Set the labels of the x and y axes\nax.set_xlabel('Time')\nax.set_ylabel('Temperature')\n\n# Set the tick marks of the x and y axes\nax.set_xticks(np.arange(0, 11, 1))\nax.set_yticks(np.arange(0, 11, 1))\n\n# Set the tick labels of the x and y axes\nax.set_xticklabels(['96', '97', '98', '99', '100', '101', '102', '103', '104', '105'])\nax.set_yticklabels(['96', '97', '98', '99', '100', '101', '102', '103', '104', '105'])\n\n# Set the color bar\ncbar = fig.colorbar(ax.images[0])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_19.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(20.0, 8.0))\n\n# Set the title of the plot\nax.set_title('a) Role voting in the Werewolf game')\n\n# Create a bar chart\nax.bar(['Villager', 'Hunter', 'Witch', 'Seer', 'Werewolf'], [15.7, 28.1, 26.0, 14.5, 13.9], color='blue')\nax.bar(['Villager', 'Hunter', 'Witch', 'Seer', 'Werewolf'], [28.6, 10.5, 9.2, 15.5, 16.3], color='lightblue')\nax.bar(['Villager', 'Hunter', 'Witch', 'Seer', 'Werewolf'], [76.0, 7.0, 12.3, 11.2, 50.3], color='darkblue')\nax.bar(['Villager', 'Hunter', 'Witch', 'Seer', 'Werewolf'], [0.5, 0.9, 0.6, 0.9, 0.3], color='skyblue')\nax.bar(['Villager', 'Hunter', 'Witch', 'Seer', 'Werewolf'], [8.1, 17.4, 2.2, 7.8, 12.0], color='lightgreen')\nax.bar(['Villager', 'Hunter', 'Witch', 'Seer', 'Werewolf'], [25.5, 26.0, 32.5, 22.9, 14.9], color='orange')\nax.bar(['Villager', 'Hunter', 'Witch', 'Seer', 'Werewolf'], [31.5, 27.1, 35.3, 32.5, 17.3], color='purple')\nax.bar(['Villager', 'Hunter', 'Witch', 'Seer', 'Werewolf'], [4.3, 2.5, 4.0, 20.0, 10.0], color='cyan')\nax.bar(['Villager', 'Hunter', 'Witch', 'Seer', 'Werewolf'], [2.2, 0.8, 0.0, 1.0, 0.0], color='pink')\nax.bar(['Villager', 'Hunter', 'Witch', 'Seer', 'Werewolf'], [38.6, 35.3, 22.2, 25.5, 44.4], color='brown')\nax.bar(['Villager', 'Hunter', 'Witch', 'Seer', 'Werewolf'], [10.0, 2.0, 0.8, 1.0, 2.0], color='grey')\nax.bar(['Villager', 'Hunter', 'Witch', 'Seer', 'Werewolf'], [8.7, 8.8, 7.8, 13.0, 13.0], color='yellow')\nax.bar(['Villager', 'Hunter', 'Witch', 'Seer', 'Werewolf'], [14.9, 14.9, 14.9, 14.9, 14.9], color='red')\nax.bar(['Villager', 'Hunter', 'Witch', 'Seer', 'Werewolf'], [10.0, 10.0, 10.0, 10.0, 10.0], color='green')\nax.bar(['Villager', 'Hunter', 'Witch', 'Seer', 'Werewolf'], [10.0, 10.0, 10.0, 10.0, 10.0], color='black')\n\n# Set the x-axis labels\nax.set_xticks(range(len(['Villager', 'Hunter', 'Witch', 'Seer', 'Werewolf'])))\nax.set_xticklabels(['Villager', 'Hunter', 'Witch', 'Seer', 'Werewolf'])\n\n# Set the y-axis label\nax.set_ylabel('Percentage')\n\n# Set the y-axis limits\nax.set_ylim(0, 100)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(9.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Question Type: All three types of questions')\n\n# Set the x-axis label\nax.set_xlabel('Response Action Category')\n\n# Set the y-axis label\nax.set_ylabel('Number of Responses')\n\n# Create a bar chart with the data\nax.bar(['Qwen', 'ChatGLM3', 'Baichuan2', 'LLaMA-2', 'Xverse'], [169, 547, 662, 271, 145], color='blue')\nax.bar(['Qwen', 'ChatGLM3', 'Baichuan2', 'LLaMA-2', 'Xverse'], [547, 439, 753, 239, 1355], color='red')\nax.bar(['Qwen', 'ChatGLM3', 'Baichuan2', 'LLaMA-2', 'Xverse'], [662, 753, 557, 259, 1269], color='green')\nax.bar(['Qwen', 'ChatGLM3', 'Baichuan2', 'LLaMA-2', 'Xverse'], [271, 239, 259, 153, 732], color='orange')\nax.bar(['Qwen', 'ChatGLM3', 'Baichuan2', 'LLaMA-2', 'Xverse'], [145, 1355, 1269, 162, 1246], color='yellow')\n\n# Set the x-ticks\nax.set_xticks([0, 1, 2, 3, 4])\nax.set_xticklabels(['Qwen', 'ChatGLM3', 'Baichuan2', 'LLaMA-2', 'Xverse'])\n\n# Set the y-limits\nax.set_ylim(0, 1200)\n\n# Set the colorbar\ncmap = plt.get_cmap('hot')\nnorm = plt.Normalize(vmin=0, vmax=1200)\nsm = plt.cm.ScalarMappable(cmap=cmap, norm=norm)\nsm.set_array([])\nfig.colorbar(sm)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_20.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nemotion = ['angry', 'sad', 'disgust', 'contempt', 'fear', 'neutral', 'surprise', 'happy']\nscore_original = [0.10, 0.00, 0.30, 0.00, 0.00, 0.50, 0.00, 0.10]\nscore_adjusted = [0.12, 0.00, 0.44, 0.00, 0.00, 0.44, 0.00, 0.00]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 8))\n\n# Plot the data\nax.bar(emotion, score_original, color='blue', label='Original')\nax.bar(emotion, score_adjusted, color='red', label='Adjusted')\n\n# Set the title and labels\nax.set_title('Emotion Recognition Scores')\nax.set_xlabel('Emotion')\nax.set_ylabel('Score')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_21.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 8))\n\n# Set the title of the plot\nax.set_title('Voting Results')\n\n# Define the categories and their corresponding percentages\ncategories = ['Villager', 'Hunter', 'Witch', 'Seer', 'Wererewolf']\npercentages = [15.7, 28.1, 26, 4.5, 10.5]\n\n# Create a bar chart\nax.bar(categories, percentages, color='blue')\n\n# Add a vertical line at the mean percentage\nmean_percentage = np.mean(percentages)\nax.axvline(x=mean_percentage, color='red', linestyle='--')\n\n# Set the x-axis label\nax.set_xlabel('Categories')\n\n# Set the y-axis label\nax.set_ylabel('Percentage')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_22.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(12, 6))\n\n# Create a color map for the bars\ncmap = plt.get_cmap('Oranges')\n\n# Create a bar chart\nbars = ax.bar(range(5), [17, 8, 3, 10, 5], color=cmap(np.linspace(0, 1, 5)))\n\n# Add labels to the bars\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 2), ha='center', va='bottom')\n\n# Set the title of the chart\nax.set_title('LLaMA')\n\n# Set the x-axis labels\nax.set_xticks(range(5))\nax.set_xticklabels(['#17', '#24', '#23', '#10', '#5'])\n\n# Set the y-axis label\nax.set_ylabel('Rank')\n\n# Set the y-axis limits\nax.set_ylim([0, 3])\n\n# Create a second subplot\nax2 = fig.add_subplot(122)\n\n# Create a color map for the bars\ncmap = plt.get_cmap('Blues')\n\n# Create a bar chart\nbars = ax2.bar(range(5), [5, 17, 1, 9, 15], color=cmap(np.linspace(0, 1, 5)))\n\n# Add labels to the bars\nfor bar in bars:\n    yval = bar.get_height()\n    ax2.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 2), ha='center', va='bottom')\n\n# Set the title of the chart\nax2.set_title('GPT')\n\n# Set the x-axis labels\nax2.set_xticks(range(5))\nax2.set_xticklabels(['Baseline', 'Reversed Order', 'Reversed IDs', 'Baseline', 'Reversed IDs'])\n\n# Set the y-axis label\nax2.set_ylabel('Rank')\n\n# Set the y-axis limits\nax2.set_ylim([0, 3])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_23.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Set the background color of the plot\nax.set_facecolor('white')\n\n# Set the title of the plot\nax.set_title('Stock Prices')\n\n# Set the x-axis label\nax.set_xlabel('Time')\n\n# Set the y-axis label\nax.set_ylabel('Price')\n\n# Set the tick labels for the x-axis\nax.set_xticks([0, 1, 2, 3, 4, 5])\nax.set_xticklabels(['08:00', '09:00', '10:00', '11:00', '12:00', '13:00'])\n\n# Set the tick labels for the y-axis\nax.set_yticks([0.10, 0.20, 0.30, 0.40, 0.50, 0.60, 0.70])\nax.set_yticklabels(['0.10', '0.20', '0.30', '0.40', '0.50', '0.60', '0.70'])\n\n# Set the grid lines\nax.grid(True)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the plot area\nax.set_facecolor('white')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot title\nax.set_title('Stock Prices', color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('Time', color='black')\n\n# Set the color of the y-axis label\nax.set_ylabel('Price', color='black')\n\n# Set the color of the tick labels\nax.set_xticklabels(['08:00', '09:00', '10:00', '11:00', '12:00', '13:00'], color='black')\nax.set_yticklabels(['0.10', '0.20', '0.30', '0.40', '0.50', '0.60', '0.70'], color='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the plot area\nax.set_facecolor('white')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot title\nax.set_title('Stock Prices', color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('Time', color='black')\n\n# Set the color of the y-axis label\nax.set_ylabel('Price', color='black')\n\n# Set the color of the tick labels\nax.set_xticklabels(['08:00', '09:00', '10:00', '11:00', '12:00', '13:00'], color='black')\nax.set_yticklabels(['0.10', '0.20', '0.30', '0.40', '0.50', '0.60', '0.70'], color='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the plot area\nax.set_facecolor('white')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot title\nax.set_title('Stock Prices', color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('Time', color='black')\n\n# Set the color of the y-axis label\nax.set_ylabel('Price', color='black')\n\n# Set the color of the tick labels\nax.set_xticklabels(['08:00', '09:00', '10:00', '11:00', '12:00', '13:00'], color='black')\nax.set_yticklabels(['0.10', '0.20', '0.30', '0.40', '0.50', '0.60', '0.70'], color='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the plot area\nax.set_facecolor('white')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot title\nax.set_title('Stock Prices', color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('Time', color='black')\n\n# Set the color of the y-axis label\nax.set_ylabel('Price', color='black')\n\n# Set the color of the tick labels\nax.set_xticklabels(['08:00', '09:00', '10:00', '11:00', '12:00', '13:00'], color='black')\nax.set_yticklabels(['0.10', '0.20', '0.30', '0.40', '0.50', '0.60', '0.70'], color='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the plot area\nax.set_facecolor('white')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot title\nax.set_title('Stock Prices', color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('Time', color='black')\n\n# Set the color of the y-axis label\nax.set_ylabel('Price', color='black')\n\n# Set the color of the tick labels\nax.set_xticklabels(['08:00', '09:00', '10:00', '11:00', '12:00', '13:00'], color='black')\nax.set_yticklabels(['0.10', '0.20', '0.30', '0.40', '0.50', '0.60', '0.70'], color='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the plot area\nax.set_facecolor('white')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot title\nax.set_title('Stock Prices', color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('Time', color='black')\n\n# Set the color of the y-axis label\nax.set_ylabel('Price', color='black')\n\n# Set the color of the tick labels\nax.set_xticklabels(['08:00', '09:00', '10:00', '11:00', '12:00', '13:00'], color='black')\nax.set_yticklabels(['0.10', '0.20', '0.30', '0.40', '0.50', '0.60', '0.70'], color='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the plot area\nax.set_facecolor('white')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot title\nax.set_title('Stock Prices', color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('Time', color='black')\n\n# Set the color of the y-axis label\nax.set_ylabel('Price', color='black')\n\n# Set the color of the tick labels\nax.set_xticklabels(['08:00', '09:00', '10:00', '11:00', '12:00', '13:00'], color='black')\nax.set_yticklabels(['0.10', '0.20', '0.30', '0.40', '0.50', '0.60', '0.70'], color='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the plot area\nax.set_facecolor('white')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot title\nax.set_title('Stock Prices', color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('Time', color='black')\n\n# Set the color of the y-axis label\nax.set_ylabel('Price', color='black')\n\n# Set the color of the tick labels\nax.set_xticklabels(['08:00', '09:00', '10:00', '11:00', '12:00', '13:00'], color='black')\nax.set_yticklabels(['0.10', '0.20', '0.30', '0.40', '0.50', '0.60', '0.70'], color='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the plot area\nax.set_facecolor('white')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot title\nax.set_title('Stock Prices', color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('Time', color='black')\n\n# Set the color of the y-axis label\nax.set_ylabel('Price', color='black')\n\n# Set the color of the tick labels\nax.set_xticklabels(['08:00', '09:00', '10:00', '11:00', '12:00', '13:00'], color='black')\nax.set_yticklabels(['0.10', '0.20', '0.30', '0.40', '0.50', '0.60', '0.70'], color='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the plot area\nax.set_facecolor('white')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot title\nax.set_title('Stock Prices', color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('Time', color='black')\n\n# Set the color of the y-axis label\nax.set_ylabel('Price', color='black')\n\n# Set the color of the tick labels\nax.set_xticklabels(['08:00', '09:00', '10:00', '11:00', '12:00', '13:00'], color='black')\nax.set_yticklabels(['0.10', '0.20', '0.30', '0.40', '0.50', '0.60', '0.70'], color='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the plot area\nax.set_facecolor('white')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot title\nax.set_title('Stock Prices', color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('Time', color='black')\n\n# Set the color of the y-axis label\nax.set_ylabel('Price', color='black')\n\n# Set the color of the tick labels\nax.set_xticklabels(['08:00', '09:00', '10:00', '11:00', '12:00', '13:00'], color='black')\nax.set_yticklabels(['0.10', '0.20', '0.30', '0.40', '0.50', '0.60', '0.70'], color='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the plot area\nax.set_facecolor('white')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot title\nax.set_title('Stock Prices', color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('Time', color='black')\n\n# Set the color of the y-axis label\nax.set_ylabel('Price', color='black')\n\n# Set the color of the tick labels\nax.set_xticklabels(['08:00', '09:00', '10:00', '11:00', '12:00', '13:00'], color='black')\nax.set_yticklabels(['0.10', '0.20', '0.30', '0.40', '0.50', '0.60', '0.70'], color='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the plot area\nax.set_facecolor('white')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot title\nax.set_title('Stock Prices', color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('Time', color='black')\n\n# Set the color of the y-axis label\nax.set_ylabel('Price', color='black')\n\n# Set the color of the tick labels\nax.set_xticklabels(['08:00', '09:00', '10:00', '11:00', '12:00', '13:00'], color='black')\nax.set_yticklabels(['0.10', '0.20', '0.30', '0.40', '0.50', '0.60', '0.70'], color='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of"}
{"file": "dataset/ori_500/heatmap_24.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Set the color map\ncmap = plt.get_cmap('YlGnBu')\n\n# Create a bar chart\nbars = ax.bar(range(10), np.random.rand(10), color=cmap(np.linspace(0, 1, 10)))\n\n# Set the title and labels\nax.set_title('Harvest [t/year]')\nax.set_xlabel('Farms')\nax.set_ylabel('Harvest [t/year]')\n\n# Set the tick labels\nax.set_xticks(range(10))\nax.set_xticklabels(['Farmer Joe', 'Upland Bros.', 'Smith Gardening', 'Agrifun', 'Organicure', 'BioGoods Ltd.', 'Cornley Corp.', 'Cucumber', 'Tomato', 'Lettuce'])\n\n# Set the y-axis limits\nax.set_ylim([0, 6])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_25.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Crops')\n\n# Set the x-axis label\nax.set_xlabel('Time')\n\n# Set the y-axis label\nax.set_ylabel('Harvest')\n\n# Set the x-axis limits\nax.set_xlim(0, 10)\n\n# Set the y-axis limits\nax.set_ylim(0, 7)\n\n# Set the x-axis ticks\nax.set_xticks(np.arange(0, 11, 1))\n\n# Set the y-axis ticks\nax.set_yticks(np.arange(0, 8, 1))\n\n# Set the x-axis tick labels\nax.set_xticklabels(['Cycle 1', 'Cycle 2', 'Cycle 3', 'Cycle 4', 'Cycle 5', 'Cycle 6'])\n\n# Set the y-axis tick labels\nax.set_yticklabels(['0', '1', '2', '3', '4', '5', '6', '7'])\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('lightblue')\n\n# Set the color of the text\nax.set_color_cycle(['red', 'green', 'blue', 'yellow', 'orange', 'purple', 'pink', 'brown', 'gray', 'cyan', 'magenta', 'lime', 'silver', 'gold', 'navy', 'teal', 'olive', 'coral', 'maroon', 'silver', 'azure', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver',"}
{"file": "dataset/ori_500/heatmap_26.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(9.0, 6.0))\n\n# Create a grid of subplots\ngs = fig.add_gridspec(4, 4)\n\n# Add a color bar to the first subplot\nax1 = fig.add_subplot(gs[0, :2])\ncax1 = ax1.imshow(np.random.rand(10, 10), cmap='coolwarm')\nfig.colorbar(cax1, ax=ax1)\n\n# Add a color bar to the second subplot\nax2 = fig.add_subplot(gs[1, :2])\ncax2 = ax2.imshow(np.random.rand(10, 10), cmap='coolwarm')\nfig.colorbar(cax2, ax=ax2)\n\n# Add a color bar to the third subplot\nax3 = fig.add_subplot(gs[2, :2])\ncax3 = ax3.imshow(np.random.rand(10, 10), cmap='coolwarm')\nfig.colorbar(cax3, ax=ax3)\n\n# Add a color bar to the fourth subplot\nax4 = fig.add_subplot(gs[3, :2])\ncax4 = ax4.imshow(np.random.rand(10, 10), cmap='coolwarm')\nfig.colorbar(cax4, ax=ax4)\n\n# Add a color bar to the fifth subplot\nax5 = fig.add_subplot(gs[:, 2:])\ncax5 = ax5.imshow(np.random.rand(10, 10), cmap='coolwarm')\nfig.colorbar(cax5, ax=ax5)\n\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_27.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6, 4))\n\n# Set the title of the plot\nax.set_title('default: no edges')\n\n# Create a grid of subplots\ngs = ax.grid(True)\n\n# Create a color bar\ncbar = fig.colorbar(ax.imshow([[1, 2], [3, 4]]), ax=ax)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_28.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Create a grid of subplots\ngrid = ax.grid(True)\n\n# Set the title of the plot\nax.set_title('Sales of vendors (in tons/year)')\n\n# Set the labels for the x-axis and y-axis\nax.set_xlabel('Vendors')\nax.set_ylabel('Sales')\n\n# Create a list of vendors\nvendors = ['Vendor A', 'Vendor B', 'Vendor C', 'Vendor D', 'Vendor E', 'Vendor F', 'Vendor G']\n\n# Create a list of sales data\nsales = [1.5, 2.2, 1.8, 3.2, 0.5, 2.2, 0.3]\n\n# Create a list of colors for each vendor\ncolors = ['orange', 'red', 'green', 'blue', 'purple', 'pink', 'brown']\n\n# Create a bar chart\nax.bar(vendors, sales, color=colors)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_29.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(5.0, 4.0))\n\n# Set the title of the plot\nax.set_title('Degree of acceptance of a product')\n\n# Create a bar chart\nax.bar(['High', 'Medium', 'Low'], [42, 38, 55], color='green')\n\n# Set the x-axis label\nax.set_xlabel('Product Quality')\n\n# Set the y-axis label\nax.set_ylabel('Degree of Acceptance')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the background color of the plot\nax.set_facecolor('lightblue')\n\n# Create a color bar\ncmap = plt.get_cmap('Blues')\nnorm = plt.Normalize(vmin=0.1, vmax=0.9)\nsm = plt.cm.ScalarMappable(cmap=cmap, norm=norm)\nsm.set_array([])\ncbar = fig.colorbar(sm)\n\n# Add a title to the color bar\ncbar.set_label('Bottlebeck Distance')\n\n# Add a second color bar for Wasserstein distance\ncmap2 = plt.get_cmap('Greens')\nnorm2 = plt.Normalize(vmin=0.1, vmax=0.9)\nsm2 = plt.cm.ScalarMappable(cmap=cmap2, norm=norm2)\nsm2.set_array([])\ncbar2 = fig.colorbar(sm2, ax=ax, orientation='vertical', fraction=0.046, pad=0.04)\ncbar2.set_label('Wasserstein Distance')\n\n# Add a rectangle to represent the image\nrect = plt.Rectangle((0.5, 0.5), 0.5, 0.5, color='green')\nax.add_patch(rect)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_30.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\nax.set_title('ROC\\'s AUC')\n\n# Create a grid of rectangles\nfor i in range(1, 13):\n    for j in range(1, 13):\n        ax.add_patch(plt.Rectangle((i-1, j-1), 1, 1, color=np.random.rand(3)))\n\n# Add a color bar\ncbar = fig.colorbar(ax.images[0])\ncbar.set_label('AUC')\n\n# Set the x and y axis limits\nax.set_xlim(0, 12)\nax.set_ylim(0, 12)\n\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 3.0))\n\n# Create a color map\ncmap = plt.get_cmap('Greens')\n\n# Create a grid of rectangles\nfor i in range(10):\n    for j in range(10):\n        ax.add_patch(plt.Rectangle((i*2, j*2), 2, 2, color=cmap(np.random.rand())))\n\n# Set the x and y limits\nax.set_xlim(0, 20)\nax.set_ylim(0, 20)\n\n# Set the x and y ticks\nax.set_xticks(range(0, 21, 2))\nax.set_yticks(range(0, 21, 2))\n\n# Set the x and y labels\nax.set_xlabel('Count')\nax.set_ylabel('Category')\n\n# Set the title\nax.set_title('Category Count Distribution')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(12.0, 6.0))\n\n# Set the background color of the plot\nax.set_facecolor('purple')\n\n# Create a bar chart with the data\nbars = ax.bar(range(10), np.random.randint(0, 100, 10), color='blue')\n\n# Add labels to the bars\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 2), ha='center', va='bottom')\n\n# Set the title of the plot\nax.set_title('Live Score')\n\n# Set the x-axis label\nax.set_xlabel('Game')\n\n# Set the y-axis label\nax.set_ylabel('Score')\n\n# Set the y-axis limits\nax.set_ylim(0, 100)\n\n# Set the x-axis limits\nax.set_xlim(0, 10)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Set the title of the plot\nax.set_title('BabelStream triad Average Memory Bandwidth (GB/s)')\n\n# Create a color bar\ncmap = plt.get_cmap('hot')\nnorm = plt.Normalize(vmin=200, vmax=1600)\nsm = plt.cm.ScalarMappable(cmap=cmap, norm=norm)\nsm.set_array([])\n\n# Add the color bar to the plot\nfig.colorbar(sm, ax=ax)\n\n# Create a grid of subplots\ngs = fig.add_gridspec(3, 4)\n\n# Create a subplot for the 'Programming Model' column\nax1 = fig.add_subplot(gs[:, 0])\nax1.set_title('Programming Model')\n\n# Create a subplot for the 'Memory Bandwidth' column\nax2 = fig.add_subplot(gs[:, 1:])\nax2.set_title('Memory Bandwidth (GB/s)')\n\n# Create a list of programming models\nmodels = ['Kokkos', 'RAJA', 'OMP', 'OACC', 'SYCL', 'Native Port']\n\n# Create a list of memory bandwidths\nbandwidths = [876, 136, 435, 534, 322, 804]\n\n# Create a list of colors for the rectangles\ncolors = ['pink', 'orange', 'red', 'green', 'blue', 'purple']\n\n# Create a list of labels for the rectangles\nlabels = ['Summit', 'Perlmutter', 'Corona', 'Frontier']\n\n# Create a list of memory bandwidths for each model\nmodel_bandwidths = [[876, 136, 435, 534, 322, 804],\n                   [750, 1737, 742, 375, 750, 1825],\n                   [764, 676, 782, 421, 925, 911],\n                   [482, 120, 843, 1170, 925, 911]]\n\n# Create a list of colors for the rectangles\nmodel_colors = [['pink', 'orange', 'red', 'green', 'blue', 'purple'],\n               ['pink', 'orange', 'red', 'green', 'blue', 'purple'],\n               ['pink', 'orange', 'red', 'green', 'blue', 'purple'],\n               ['pink', 'orange', 'red', 'green', 'blue', 'purple']]\n\n# Create a list of labels for the rectangles\nmodel_labels = [['Summit', 'Perlmutter', 'Corona', 'Frontier'],\n                ['Summit', 'Perlmutter', 'Corona', 'Frontier'],\n                ['Summit', 'Perlmutter', 'Corona', 'Frontier'],\n                ['Summit', 'Perlmutter', 'Corona', 'Frontier']]\n\n# Create a list of memory bandwidths for each model\nmodel_bandwidths = [[876, 136, 435, 534, 322, 804],\n                   [750, 1737, 742, 375, 750, 1825],\n                   [764, 676, 782, 421, 925, 911],\n                   [482, 120, 843, 1170, 925, 911]]\n\n# Create a list of colors for the rectangles\nmodel_colors = [['pink', 'orange', 'red', 'green', 'blue', 'purple'],\n               ['pink', 'orange', 'red', 'green', 'blue', 'purple'],\n               ['pink', 'orange', 'red', 'green', 'blue', 'purple'],\n               ['pink', 'orange', 'red', 'green', 'blue', 'purple']]\n\n# Create a list of labels for the rectangles\nmodel_labels = [['Summit', 'Perlmutter', 'Corona', 'Frontier'],\n                ['Summit', 'Perlmutter', 'Corona', 'Frontier'],\n                ['Summit', 'Perlmutter', 'Corona', 'Frontier'],\n                ['Summit', 'Perlmutter', 'Corona', 'Frontier']]\n\n# Create a list of memory bandwidths for each model\nmodel_bandwidths = [[876, 136, 435, 534, 322, 804],\n                   [750, 1737, 742, 375, 750, 1825],\n                   [764, 676, 782, 421, 925, 911],\n                   [482, 120, 843, 1170, 925, 911]]\n\n# Create a list of colors for the rectangles\nmodel_colors = [['pink', 'orange', 'red', 'green', 'blue', 'purple'],\n               ['pink', 'orange', 'red', 'green', 'blue', 'purple'],\n               ['pink', 'orange', 'red', 'green', 'blue', 'purple'],\n               ['pink', 'orange', 'red', 'green', 'blue', 'purple']]\n\n# Create a list of labels for the rectangles\nmodel_labels = [['Summit', 'Perlmutter', 'Corona', 'Frontier'],\n                ['Summit', 'Perlmutter', 'Corona', 'Frontier'],\n                ['Summit', 'Perlmutter', 'Corona', 'Frontier'],\n                ['Summit', 'Perlmutter', 'Corona', 'Frontier']]\n\n# Create a list of memory bandwidths for each model\nmodel_bandwidths = [[876, 136, 435, 534, 322, 804],\n                   [750, 1737, 742, 375, 750, 1825],\n                   [764, 676, 782, 421, 925, 911],\n                   [482, 120, 843, 1170, 925, 911]]\n\n# Create a list of colors for the rectangles\nmodel_colors = [['pink', 'orange', 'red', 'green', 'blue', 'purple'],\n               ['pink', 'orange', 'red', 'green', 'blue', 'purple'],\n               ['pink', 'orange', 'red', 'green', 'blue', 'purple'],\n               ['pink', 'orange', 'red', 'green', 'blue', 'purple']]\n\n# Create a list of labels for the rectangles\nmodel_labels = [['Summit', 'Perlmutter', 'Corona', 'Frontier'],\n                ['Summit', 'Perlmutter', 'Corona', 'Frontier'],\n                ['Summit', 'Perlmutter', 'Corona', 'Frontier'],\n                ['Summit', 'Perlmutter', 'Corona', 'Frontier']]\n\n# Create a list of memory bandwidths for each model\nmodel_bandwidths = [[876, 136, 435, 534, 322, 804],\n                   [750, 1737, 742, 375, 750, 1825],\n                   [764, 676, 782, 421, 925, 911],\n                   [482, 120, 843, 1170, 925, 911]]\n\n# Create a list of colors for the rectangles\nmodel_colors = [['pink', 'orange', 'red', 'green', 'blue', 'purple'],\n               ['pink', 'orange', 'red', 'green', 'blue', 'purple'],\n               ['pink', 'orange', 'red', 'green', 'blue', 'purple'],\n               ['pink', 'orange', 'red', 'green', 'blue', 'purple']]\n\n# Create a list of labels for the rectangles\nmodel_labels = [['Summit', 'Perlmutter', 'Corona', 'Frontier'],\n                ['Summit', 'Perlmutter', 'Corona', 'Frontier'],\n                ['Summit', 'Perlmutter', 'Corona', 'Frontier'],\n                ['Summit', 'Perlmutter', 'Corona', 'Frontier']]\n\n# Create a list of memory bandwidths for each model\nmodel_bandwidths = [[876, 136, 435, 534, 322, 804],\n                   [750, 1737, 742, 375, 750, 1825],\n                   [764, 676, 782, 421, 925, 911],\n                   [482, 120, 843, 1170, 925, 911]]\n\n# Create a list of colors for the rectangles\nmodel_colors = [['pink', 'orange', 'red', 'green', 'blue', 'purple'],\n               ['pink', 'orange', 'red', 'green', 'blue', 'purple'],\n               ['pink', 'orange', 'red', 'green', 'blue', 'purple'],\n               ['pink', 'orange', 'red', 'green', 'blue', 'purple']]\n\n# Create a list of labels for the rectangles\nmodel_labels = [['Summit', 'Perlmutter', 'Corona', 'Frontier'],\n                ['Summit', 'Perlmutter', 'Corona', 'Frontier'],\n                ['Summit', 'Perlmutter', 'Corona', 'Frontier'],\n                ['Summit', 'Perlmutter', 'Corona', 'Frontier']]\n\n# Create a list of memory bandwidths for each model\nmodel_bandwidths = [[876, 136, 435, 534, 322, 804],\n                   [750, 1737, 742, 375, 750, 1825],\n                   [764, 676, 782, 421, 925, 911],\n                   [482, 120, 843, 1170, 925, 911]]\n\n# Create a list of colors for the rectangles\nmodel_colors = [['pink', 'orange', 'red', 'green', 'blue', 'purple'],\n               ['pink', 'orange', 'red', 'green', 'blue', 'purple'],\n               ['pink', 'orange', 'red', 'green', 'blue', 'purple'],\n               ['pink', 'orange', 'red', 'green', 'blue', 'purple']]\n\n# Create a list of labels for the rectangles\nmodel_labels = [['Summit', 'Perlmutter', 'Corona', 'Frontier'],\n                ['Summit', 'Perlmutter', 'Corona', 'Frontier'],\n                ['Summit', 'Perlmutter', 'Corona', 'Frontier'],\n                ['Summit', 'Perlmutter', 'Corona', 'Frontier']]\n\n# Create a list of memory bandwidths for each model\nmodel_bandwidths = [[876, 136, 435, 534, 322, 804],\n                   [750, 1737, 742, 375, 750, 1825],\n                   [764, 676, 782, 421, 925, 911],\n                   [482, 120, 843, 1170, 925, 911]]\n\n# Create a list of colors for the rectangles\nmodel_colors = [['pink', 'orange', 'red', 'green', 'blue', 'purple'],\n               ['pink', 'orange', 'red', 'green', 'blue', 'purple'],\n               ['pink', 'orange', 'red', 'green', 'blue', 'purple'],\n               ['pink', 'orange', 'red', 'green', 'blue', 'purple']]\n\n# Create a list of labels for the rectangles\nmodel_labels = [['Summit', 'Perlmutter', 'Corona', 'Frontier'],\n                ['Summit', 'Perlmutter', 'Corona', 'Frontier'],\n                ['Summit', 'Perlmutter', 'Corona', 'Frontier'],\n                ['Summit', 'Perlmutter', 'Corona', 'Frontier']]\n\n# Create a list of memory bandwidths for each model\nmodel_bandwidths = [[876, 136, 435, 534, 322, 804],\n                   [750, 1737, 742, 375, 750, 1825],\n                   [764, 676, 782, 421, 925, 911],\n                   [482, 120, 843, 1170, 925, 911]]\n\n# Create a list of colors for the rectangles\nmodel_colors = [['pink', 'orange', 'red', 'green', 'blue', 'purple'],\n               ['pink', 'orange', 'red', 'green', 'blue', 'purple'],\n               ['pink', 'orange', 'red', 'green', 'blue', 'purple'],\n               ['pink', 'orange', 'red', 'green', 'blue', 'purple']]\n\n# Create a list of labels for the rectangles\nmodel_labels = [['Summit', 'Perlmutter', 'Corona', 'Frontier'],\n                ['Summit', 'Perlmutter', 'Corona', 'Frontier'],\n                ['Summit', 'Perlmutter', 'Corona', 'Frontier'],\n                ['Summit', 'Perlmutter', 'Corona', 'Frontier']]\n\n# Create a list of memory bandwidths for each model\nmodel_bandwidths = [[876, 136, 435, 534, 322, 804],\n                   [750, 1737, 742, 375, 750, 1825],\n                   [764, 676, 782, 421, 925, 911],\n                   [482, 120, 843, 1170, 925, 911]]\n\n# Create a list of colors for the rectangles\nmodel_colors = [['pink', 'orange', 'red', 'green', 'blue', 'purple'],\n               ['pink', 'orange', 'red', 'green', 'blue', 'purple'],\n               ['pink', 'orange', 'red', 'green', 'blue', 'purple'],\n               ['pink', 'orange', 'red', 'green', 'blue', 'purple']]\n\n# Create a list of labels for the rectangles\nmodel_labels = [['Summit', 'Perlmutter', 'Corona', 'Frontier'],\n                ['Summit', 'Perlmutter', 'Corona', 'Frontier'],\n                ['Summit', 'Perlmutter', 'Corona', 'Frontier'],\n                ['Summit', 'Perlmutter', 'Corona', 'Frontier']]\n\n# Create a list of memory bandwidths for each model\nmodel_bandwidths = [[876, 136, 435, 534, 322, 804],\n                   [750, 1737, 742, 375, 750, 1825],\n                   [764, 676, 782, 421, 925, 911],\n                   [482, 120, 843, 1170, 925, 911]]\n\n# Create a list of colors for the rectangles\nmodel_colors = [['pink', 'orange', 'red', 'green', 'blue', 'purple'],\n               ['pink', 'orange', 'red', 'green', 'blue', 'purple'],\n               ['pink', 'orange', 'red', 'green', 'blue', 'purple'],\n               ['pink', 'orange', 'red', 'green', 'blue', 'purple']]\n\n# Create a list of labels for the rectangles\nmodel_labels = [['Summit', 'Perlmutter', 'Corona', 'Frontier'],\n                ['Summit', 'Perlmutter', 'Corona', 'Frontier'],\n                ['Summit', 'Perlmutter', 'Corona', 'Frontier'],\n                ['Summit', 'Perlmutter', 'Corona', 'Frontier']]\n\n# Create a list of memory bandwidths for each model\nmodel_bandwidths = [[876, 136, 435, 534, 322, 804],\n                   [750, 1737, 742, 375, 750, 1825],\n                   [764, 676, 782, 421, 925, 911],\n                   [482, 120, 843, 1170, 925, 911]]\n\n# Create a list of colors for the rectangles\nmodel_colors = [['pink', 'orange', 'red', 'green', 'blue', 'purple'],\n               ['pink', 'orange', 'red', 'green', 'blue', 'purple'],\n               ['pink', 'orange', 'red', 'green', 'blue', 'purple'],\n               ['pink', 'orange', 'red', 'green', 'blue', 'purple']]\n\n# Create a list of labels for the rectangles\nmodel_labels = [['Summit', 'Perlm"}
{"file": "dataset/ori_500/heatmap_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Set the color map\ncmap = plt.get_cmap('hot')\n\n# Create a grid of subplots\ngs = ax.grid(True)\n\n# Create a color bar\ncbar = fig.colorbar(cmap, ax=ax)\n\n# Set the title of the plot\nax.set_title('Correlation Coefficients')\n\n# Set the x-axis labels\nax.set_xlabel('X-axis')\n\n# Set the y-axis labels\nax.set_ylabel('Y-axis')\n\n# Set the color bar label\ncbar.set_label('Correlation Coefficient')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the bar chart\nbrands = ['LexRank', 'ROUGE', 'BERTScore', 'SimCSE', 'PMI', 'GPT-3.5', 'CrossAtt', 'PPL']\nscores = [0.19, 0.62, 0.53, 0.52, 0.50, 0.39, 0.20, 0.06]\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\nax.bar(brands, scores, color='blue')\n\n# Set the title and labels\nax.set_title('BERTScore Comparison')\nax.set_xlabel('Brands')\nax.set_ylabel('Scores')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(5.0, 6.0))\n\n# Set the background color of the plot\nax.set_facecolor('purple')\n\n# Set the x-axis limits\nax.set_xlim(0, 15)\n\n# Set the y-axis limits\nax.set_ylim(0, 15)\n\n# Set the x-axis ticks\nax.set_xticks(np.arange(0, 16, 2))\n\n# Set the y-axis ticks\nax.set_yticks(np.arange(0, 16, 2))\n\n# Set the x-axis label\nax.set_xlabel('Layers')\n\n# Set the y-axis label\nax.set_ylabel('Colors')\n\n# Set the title of the plot\nax.set_title('pythia-1b')\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0, 0), 15, 15, facecolor='blue', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0, 0), 15, 15, facecolor='green', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0, 0), 15, 15, facecolor='red', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0, 0), 15, 15, facecolor='yellow', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0, 0), 15, 15, facecolor='cyan', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0, 0), 15, 15, facecolor='magenta', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0, 0), 15, 15, facecolor='white', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0, 0), 15, 15, facecolor='black', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0, 0), 15, 15, facecolor='gray', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0, 0), 15, 15, facecolor='brown', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0, 0), 15, 15, facecolor='pink', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0, 0), 15, 15, facecolor='orange', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0, 0), 15, 15, facecolor='purple', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0, 0), 15, 15, facecolor='cyan', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0, 0), 15, 15, facecolor='magenta', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0, 0), 15, 15, facecolor='white', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0, 0), 15, 15, facecolor='black', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0, 0), 15, 15, facecolor='gray', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0, 0), 15, 15, facecolor='brown', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0, 0), 15, 15, facecolor='pink', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0, 0), 15, 15, facecolor='orange', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0, 0), 15, 15, facecolor='purple', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0, 0), 15, 15, facecolor='cyan', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0, 0), 15, 15, facecolor='magenta', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0, 0), 15, 15, facecolor='white', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0, 0), 15, 15, facecolor='black', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0, 0), 15, 15, facecolor='gray', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0, 0), 15, 15, facecolor='brown', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0, 0), 15, 15, facecolor='pink', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0, 0), 15, 15, facecolor='orange', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0, 0), 15, 15, facecolor='purple', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0, 0), 15, 15, facecolor='cyan', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0, 0), 15, 15, facecolor='magenta', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0, 0), 15, 15, facecolor='white', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0, 0), 15, 15, facecolor='black', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0, 0), 15, 15, facecolor='gray', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0, 0), 15, 15, facecolor='brown', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0, 0), 15, 15, facecolor='pink', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0, 0), 15, 15, facecolor='orange', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0, 0), 15, 15, facecolor='purple', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0, 0), 15, 15, facecolor='cyan', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0, 0), 15, 15, facecolor='magenta', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0, 0), 15, 15, facecolor='white', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0, 0), 15, 15, facecolor='black', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0, 0), 15, 15, facecolor='gray', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0, 0), 15, 15, facecolor='brown', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0, 0), 15, 15, facecolor='pink', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0, 0), 15, 15, facecolor='orange', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0, 0), 15, 15, facecolor='purple', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0, 0), 15, 15, facecolor='cyan', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0, 0), 15, 15, facecolor='magenta', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0, 0), 15, 15, facecolor='white', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0, 0), 15, 15, facecolor='black', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0, 0), 15, 15, facecolor='gray', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0, 0), 15, 15, facecolor='brown', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0, 0), 15, 15, facecolor='pink', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0, 0), 15, 15, facecolor='orange', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0, 0), 15, 15, facecolor='purple', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0, 0), 15, 15, facecolor='cyan', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0, 0), 15, 15, facecolor='magenta', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0, 0), 15, 15, facecolor='white', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0, 0), 15, 15, facecolor='black', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0, 0), 15, 15, facecolor='gray', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0, 0), 15, 15, facecolor='brown', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0, 0), 15, 15, facecolor='pink', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0, 0), 15, 15, facecolor='orange', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0, 0), 15, 15, facecolor='purple', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0, 0), 15, 15, facecolor='cyan', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0, 0), 15, 15, facecolor='magenta', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0, 0), 15, 15, facecolor='white', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0, 0), 15, 15, facecolor='black', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0, 0), 15, 15, facecolor='gray', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0, 0), 15, 15, facecolor='brown', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0, 0), 15, 15, facecolor='pink', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0, 0), 15, 15, facecolor='orange', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0, 0), 15, 15, facecolor='purple', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0, 0), 15, 15, facecolor='cyan', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0, 0), 15, 15, facecolor='magenta', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0, 0), 15, 15, facecolor='white', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0, 0), 15, 15, facecolor='black', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0, 0), 15, 15, facecolor='gray', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0, 0), 15, 15, facecolor='brown', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0, 0), 15, 15, facecolor='pink', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0, 0), 15, 15, facecolor='orange', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0, 0), 15, 15, facecolor='purple', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0, 0), 15, 15, facecolor='cyan', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0, 0), 15, 15, facecolor='magenta', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0, 0), 15, 15, facecolor='white', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0, 0), 15, 15, facecolor='black', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0, 0), 15, 15, facecolor='gray', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0, 0), 15, 15, facecolor='brown', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0, 0), 15, 15, facecolor='pink', alpha=0.5)\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0, 0), 15, 15, facecolor='orange', alpha=0.5)\nax.add_patch(rect)\n\n#"}
{"file": "dataset/ori_500/hist_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 7.0))\n\n# Set the x-axis limits\nax.set_xlim(0, 1)\n\n# Set the y-axis limits\nax.set_ylim(0, 100)\n\n# Set the x-axis label\nax.set_xlabel('Test Winning Distance')\n\n# Set the y-axis label\nax.set_ylabel('Number of Pairs')\n\n# Set the title\nax.set_title('Pairing Results')\n\n# Create a bar chart\nax.bar([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8], [20, 40, 60, 80, 100, 80, 60, 40], color='blue')\n\n# Create a scatter plot\nax.scatter([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8], [20, 40, 60, 80, 100, 80, 60, 40], color='red')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and a set of subplots\nfig, axs = plt.subplots(1, 2, figsize=(10.0, 3.0))\n\n# Define the data for the plots\nx = np.linspace(-1, 1, 100)\ny1 = np.sin(x)\ny2 = np.cos(x)\n\n# Plot the data\naxs[0].plot(x, y1, color='blue')\naxs[0].set_title('Inter Class')\naxs[0].set_xlabel('Cosine Similarity')\naxs[0].set_ylabel('Frequency')\n\naxs[1].plot(x, y2, color='green')\naxs[1].set_title('Intra Class')\naxs[1].set_xlabel('Cosine Similarity')\naxs[1].set_ylabel('Frequency')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis for the plot\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Set the title of the plot\nax.set_title('Baseline')\n\n# Create a scatter plot with random data\nx = np.random.rand(50)\ny = np.random.rand(50)\nax.scatter(x, y, color='blue')\n\n# Set the x-axis label\nax.set_xlabel('Euclidean Distance')\n\n# Set the y-axis label\nax.set_ylabel('Density')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis for the plot\nfig, ax = plt.subplots(figsize=(7.0, 8.0))\n\n# Set the title of the plot\nax.set_title('MATHWELL')\n\n# Create a histogram with 10 bins\nax.hist(np.random.normal(5, 1, 100), bins=10)\n\n# Set the x-axis label\nax.set_xlabel('FKGL')\n\n# Set the y-axis label\nax.set_ylabel('Density')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(5.0, 5.0))\n\n# Set the title of the plot\nax.set_title('Desert Animals in the Wild')\n\n# Set the x-axis label\nax.set_xlabel('Animal Weight (Tons)')\n\n# Set the y-axis label\nax.set_ylabel('Frequency')\n\n# Set the x-axis limits\nax.set_xlim(0, 1)\n\n# Set the y-axis limits\nax.set_ylim(0, 1000)\n\n# Set the x-ticks\nax.set_xticks([0.02, 0.04, 0.06, 0.08])\n\n# Set the y-ticks\nax.set_yticks([100, 200, 300, 400, 500, 600, 700, 800, 900, 1000])\n\n# Set the x-tick labels\nax.set_xticklabels(['0.02', '0.04', '0.06', '0.08'])\n\n# Set the y-tick labels\nax.set_yticklabels(['100', '200', '300', '400', '500', '600', '700', '800', '900', '1000'])\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('orange')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('orange')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', length=5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='minor', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='minor', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='minor', length=2)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', length=5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', length=5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', length=5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', length=5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', length=5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', length=5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', length=5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', length=5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', length=5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', length=5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', length=5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', length=5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', length=5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', length=5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', length=5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', length=5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', length=5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', length=5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', length=5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', length=5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', length=5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', length=5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', length=5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', length=5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', length=5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', length=5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', length=5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', length=5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', length=5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', length=5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', length=5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', length=5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', length=5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', length=5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', length=5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', length=5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', length=5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', length=5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', length=5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', length=5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', length=5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', length=5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', length=5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', length=5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', length=5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', length=5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', length=5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick"}
{"file": "dataset/ori_500/hist_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Set the title of the plot\nax.set_title('Comparison of Uniform and Normal Distributions')\n\n# Set the x-axis label\nax.set_xlabel('Time (s)')\n\n# Set the y-axis label\nax.set_ylabel('Frequency')\n\n# Create a bar chart with the data\nax.bar([0, 2, 4, 6, 8], [10, 20, 30, 40, 50], color='blue')\nax.bar([1, 3, 5, 7, 9], [15, 25, 35, 45, 55], color='red')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Histogram of Wind Speed Measurements')\n\n# Set the x-axis label\nax.set_xlabel('Wind Speed (km/h)')\n\n# Set the y-axis label\nax.set_ylabel('Number of Measurements')\n\n# Create a histogram with 10 bins\nax.hist([2, 3, 4, 5, 6, 7, 8, 9, 10, 11], bins=10, color='blue')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_16.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nx = [0.0, 0.5, 1.0, 1.5, 2.0, 2.5, 3.0]\ny = [100, 90, 80, 70, 60, 50, 40]\ncolors = ['blue', 'orange']\nlabels = ['Baguette', 'Youtiao']\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(5.0, 4.0))\n\n# Plot the data\nax.plot(x, y, color='blue')\n\n# Set the title and labels\nax.set_title('Baking Accuracy Analysis')\nax.set_xlabel('Distance to Threshold')\nax.set_ylabel('Accuracy')\n\n# Add a legend\nax.legend(labels, loc='upper right')\n\n# Set the grid\nax.grid(True)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_17.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(16.0, 7.0))\n\n# Set the x-axis limits\nax.set_xlim(0, 1)\n\n# Set the y-axis limits\nax.set_ylim(0, 140)\n\n# Set the x-axis label\nax.set_xlabel('Test Winning Distance')\n\n# Set the y-axis label\nax.set_ylabel('Number of Pairs')\n\n# Set the title\nax.set_title('Tennis Player Performance')\n\n# Create a bar chart\nax.bar([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9], [100, 110, 120, 130, 140, 150, 160, 170, 180], color='blue')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_18.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(12.0, 8.0))\n\n# Set the x-axis limits\nax.set_xlim([0, 300])\n\n# Set the y-axis limits\nax.set_ylim([0, 25])\n\n# Set the x-axis label\nax.set_xlabel('Number of Nominations')\n\n# Set the y-axis label\nax.set_ylabel('Year')\n\n# Set the title of the plot\nax.set_title('Histogram of Grammy Nominations Across Expanded Categories 2019-2023')\n\n# Define the categories and their corresponding colors\ncategories = ['Record of the Year', 'Album of the Year', 'Song of the Year', 'Best New Artist', 'Best Pop Solo Performance']\ncolors = ['#FF6347', '#FFA500', '#FFD700', '#FFC0CB', '#FFFF00']\n\n# Define the number of nominations for each category\nnominations = [10, 15, 20, 25, 30]\n\n# Define the years for each nomination\nyears = [2019, 2020, 2021, 2022, 2023]\n\n# Plot the histogram\nfor i in range(len(categories)):\n    ax.barh(years[i], nominations[i], color=colors[i], label=categories[i])\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_19.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 7))\n\n# Set the title of the plot\nax.set_title('MNIST - Defect Detection')\n\n# Create a color bar for the plot\ncbar = fig.colorbar(ax.imshow(np.random.rand(10, 10), cmap='viridis'))\n\n# Set the tick labels for the x-axis\nax.set_xticks(np.arange(0, 10, 1))\nax.set_yticks(np.arange(0, 10, 1))\n\n# Set the tick labels for the y-axis\nax.set_yticklabels(['0.00', '0.05', '0.10', '0.15', '0.20', '0.25', '0.30', '0.35', '0.40', '0.45'])\n\n# Set the tick labels for the x-axis\nax.set_xticklabels(['0.00', '0.05', '0.10', '0.15', '0.20', '0.25', '0.30', '0.35', '0.40', '0.45'])\n\n# Set the limits for the x-axis\nax.set_xlim([0, 10])\n\n# Set the limits for the y-axis\nax.set_ylim([0, 10])\n\n# Set the color map for the plot\ncbar.set_label('Defect Count')\n\n# Set the color bar orientation\ncbar.ax.set_aspect('auto')\n\n# Set the color bar label\ncbar.set_label('Defect Count')\n\n# Set the color bar ticks\ncbar.set_ticks([0, 100, 200, 300, 400])\n\n# Set the color bar tick labels\ncbar.set_ticklabels(['0', '100', '200', '300', '400'])\n\n# Set the color bar tick label rotation\ncbar.ax.set_yticklabels(cbar.get_ticklabels(), rotation=90)\n\n# Set the color bar tick label color\ncbar.ax.set_yticklabels(cbar.get_ticklabels(), color='red')\n\n# Set the color bar tick label font size\ncbar.ax.set_yticklabels(cbar.get_ticklabels(), fontsize=12)\n\n# Set the color bar tick label font weight\ncbar.ax.set_yticklabels(cbar.get_ticklabels(), fontweight='bold')\n\n# Set the color bar tick label font style\ncbar.ax.set_yticklabels(cbar.get_ticklabels(), fontstyle='italic')\n\n# Set the color bar tick label font family\ncbar.ax.set_yticklabels(cbar.get_ticklabels(), fontfamily='serif')\n\n# Set the color bar tick label font variant\ncbar.ax.set_yticklabels(cbar.get_ticklabels(), fontvariant='small-caps')\n\n# Set the color bar tick label font stretch\ncbar.ax.set_yticklabels(cbar.get_ticklabels(), fontstretch='ultra-condensed')\n\n# Set the color bar tick label font size\ncbar.ax.set_yticklabels(cbar.get_ticklabels(), fontsize=12)\n\n# Set the color bar tick label font weight\ncbar.ax.set_yticklabels(cbar.get_ticklabels(), fontweight='bold')\n\n# Set the color bar tick label font style\ncbar.ax.set_yticklabels(cbar.get_ticklabels(), fontstyle='italic')\n\n# Set the color bar tick label font family\ncbar.ax.set_yticklabels(cbar.get_ticklabels(), fontfamily='serif')\n\n# Set the color bar tick label font variant\ncbar.ax.set_yticklabels(cbar.get_ticklabels(), fontvariant='small-caps')\n\n# Set the color bar tick label font stretch\ncbar.ax.set_yticklabels(cbar.get_ticklabels(), fontstretch='ultra-condensed')\n\n# Set the color bar tick label font size\ncbar.ax.set_yticklabels(cbar.get_ticklabels(), fontsize=12)\n\n# Set the color bar tick label font weight\ncbar.ax.set_yticklabels(cbar.get_ticklabels(), fontweight='bold')\n\n# Set the color bar tick label font style\ncbar.ax.set_yticklabels(cbar.get_ticklabels(), fontstyle='italic')\n\n# Set the color bar tick label font family\ncbar.ax.set_yticklabels(cbar.get_ticklabels(), fontfamily='serif')\n\n# Set the color bar tick label font variant\ncbar.ax.set_yticklabels(cbar.get_ticklabels(), fontvariant='small-caps')\n\n# Set the color bar tick label font stretch\ncbar.ax.set_yticklabels(cbar.get_ticklabels(), fontstretch='ultra-condensed')\n\n# Set the color bar tick label font size\ncbar.ax.set_yticklabels(cbar.get_ticklabels(), fontsize=12)\n\n# Set the color bar tick label font weight\ncbar.ax.set_yticklabels(cbar.get_ticklabels(), fontweight='bold')\n\n# Set the color bar tick label font style\ncbar.ax.set_yticklabels(cbar.get_ticklabels(), fontstyle='italic')\n\n# Set the color bar tick label font family\ncbar.ax.set_yticklabels(cbar.get_ticklabels(), fontfamily='serif')\n\n# Set the color bar tick label font variant\ncbar.ax.set_yticklabels(cbar.get_ticklabels(), fontvariant='small-caps')\n\n# Set the color bar tick label font stretch\ncbar.ax.set_yticklabels(cbar.get_ticklabels(), fontstretch='ultra-condensed')\n\n# Set the color bar tick label font size\ncbar.ax.set_yticklabels(cbar.get_ticklabels(), fontsize=12)\n\n# Set the color bar tick label font weight\ncbar.ax.set_yticklabels(cbar.get_ticklabels(), fontweight='bold')\n\n# Set the color bar tick label font style\ncbar.ax.set_yticklabels(cbar.get_ticklabels(), fontstyle='italic')\n\n# Set the color bar tick label font family\ncbar.ax.set_yticklabels(cbar.get_ticklabels(), fontfamily='serif')\n\n# Set the color bar tick label font variant\ncbar.ax.set_yticklabels(cbar.get_ticklabels(), fontvariant='small-caps')\n\n# Set the color bar tick label font stretch\ncbar.ax.set_yticklabels(cbar.get_ticklabels(), fontstretch='ultra-condensed')\n\n# Set the color bar tick label font size\ncbar.ax.set_yticklabels(cbar.get_ticklabels(), fontsize=12)\n\n# Set the color bar tick label font weight\ncbar.ax.set_yticklabels(cbar.get_ticklabels(), fontweight='bold')\n\n# Set the color bar tick label font style\ncbar.ax.set_yticklabels(cbar.get_ticklabels(), fontstyle='italic')\n\n# Set the color bar tick label font family\ncbar.ax.set_yticklabels(cbar.get_ticklabels(), fontfamily='serif')\n\n# Set the color bar tick label font variant\ncbar.ax.set_yticklabels(cbar.get_ticklabels(), fontvariant='small-caps')\n\n# Set the color bar tick label font stretch\ncbar.ax.set_yticklabels(cbar.get_ticklabels(), fontstretch='ultra-condensed')\n\n# Set the color bar tick label font size\ncbar.ax.set_yticklabels(cbar.get_ticklabels(), fontsize=12)\n\n# Set the color bar tick label font weight\ncbar.ax.set_yticklabels(cbar.get_ticklabels(), fontweight='bold')\n\n# Set the color bar tick label font style\ncbar.ax.set_yticklabels(cbar.get_ticklabels(), fontstyle='italic')\n\n# Set the color bar tick label font family\ncbar.ax.set_yticklabels(cbar.get_ticklabels(), fontfamily='serif')\n\n# Set the color bar tick label font variant\ncbar.ax.set_yticklabels(cbar.get_ticklabels(), fontvariant='small-caps')\n\n# Set the color bar tick label font stretch\ncbar.ax.set_yticklabels(cbar.get_ticklabels(), fontstretch='ultra-condensed')\n\n# Set the color bar tick label font size\ncbar.ax.set_yticklabels(cbar.get_ticklabels(), fontsize=12)\n\n# Set the color bar tick label font weight\ncbar.ax.set_yticklabels(cbar.get_ticklabels(), fontweight='bold')\n\n# Set the color bar tick label font style\ncbar.ax.set_yticklabels(cbar.get_ticklabels(), fontstyle='italic')\n\n# Set the color bar tick label font family\ncbar.ax.set_yticklabels(cbar.get_ticklabels(), fontfamily='serif')\n\n# Set the color bar tick label font variant\ncbar.ax.set_yticklabels(cbar.get_ticklabels(), fontvariant='small-caps')\n\n# Set the color bar tick label font stretch\ncbar.ax.set_yticklabels(cbar.get_ticklabels(), fontstretch='ultra-condensed')\n\n# Set the color bar tick label font size\ncbar.ax.set_yticklabels(cbar.get_ticklabels(), fontsize=12)\n\n# Set the color bar tick label font weight\ncbar.ax.set_yticklabels(cbar.get_ticklabels(), fontweight='bold')\n\n# Set the color bar tick label font style\ncbar.ax.set_yticklabels(cbar.get_ticklabels(), fontstyle='italic')\n\n# Set the color bar tick label font family\ncbar.ax.set_yticklabels(cbar.get_ticklabels(), fontfamily='serif')\n\n# Set the color bar tick label font variant\ncbar.ax.set_yticklabels(cbar.get_ticklabels(), fontvariant='small-caps')\n\n# Set the color bar tick label font stretch\ncbar.ax.set_yticklabels(cbar.get_ticklabels(), fontstretch='ultra-condensed')\n\n# Set the color bar tick label font size\ncbar.ax.set_yticklabels(cbar.get_ticklabels(), fontsize=12)\n\n# Set the color bar tick label font weight\ncbar.ax.set_yticklabels(cbar.get_ticklabels(), fontweight='bold')\n\n# Set the color bar tick label font style\ncbar.ax.set_yticklabels(cbar.get_ticklabels(), fontstyle='italic')\n\n# Set the color bar tick label font family\ncbar.ax.set_yticklabels(cbar.get_ticklabels(), fontfamily='serif')\n\n# Set the color bar tick label font variant\ncbar.ax.set_yticklabels(cbar.get_ticklabels(), fontvariant='small-caps')\n\n# Set the color bar tick label font stretch\ncbar.ax.set_yticklabels(cbar.get_ticklabels(), fontstretch='ultra-condensed')\n\n# Set the color bar tick label font size\ncbar.ax.set_yticklabels(cbar.get_ticklabels(), fontsize=12)\n\n# Set the color bar tick label font weight\ncbar.ax.set_yticklabels(cbar.get_ticklabels(), fontweight='bold')\n\n# Set the color bar tick label font style\ncbar.ax.set_yticklabels(cbar.get_ticklabels(), fontstyle='italic')\n\n# Set the color bar tick label font family\ncbar.ax.set_yticklabels(cbar.get_ticklabels(), fontfamily='serif')\n\n# Set the color bar tick label font variant\ncbar.ax.set_yticklabels(cbar.get_ticklabels(), fontvariant='small-caps')\n\n# Set the color bar tick label font stretch\ncbar.ax.set_yticklabels(cbar.get_ticklabels(), fontstretch='ultra-condensed')\n\n# Set the color bar tick label font size\ncbar.ax.set_yticklabels(cbar.get_ticklabels(), fontsize=12)\n\n# Set the color bar tick label font weight\ncbar.ax.set_yticklabels(cbar.get_ticklabels(), fontweight='bold')\n\n# Set the color bar tick label font style\ncbar.ax.set_yticklabels(cbar.get_ticklabels(), fontstyle='italic')\n\n# Set the color bar tick label font family\ncbar.ax.set_yticklabels(cbar.get_ticklabels(), fontfamily='serif')\n\n# Set the color bar tick label font variant\ncbar.ax.set_yticklabels(cbar.get_ticklabels(), fontvariant='small-caps')\n\n# Set the color bar tick label font stretch\ncbar.ax.set_yticklabels(cbar.get_ticklabels(), fontstretch='ultra-condensed')\n\n# Set the color bar tick label font size\ncbar.ax.set_yticklabels(cbar.get_ticklabels(), fontsize=12)\n\n# Set the color bar tick label font weight\ncbar.ax.set_yticklabels(cbar.get_ticklabels(), fontweight='bold')\n\n# Set the color bar tick label font style\ncbar.ax.set_yticklabels(cbar.get_ticklabels(), fontstyle='italic')\n\n# Set the color bar tick label font family\ncbar.ax.set_yticklabels(cbar.get_ticklabels(), fontfamily='serif')\n\n# Set the color bar tick label font variant\ncbar.ax.set_yticklabels(cbar.get_ticklabels(), fontvariant='small-caps')\n\n# Set the color bar tick label font stretch\ncbar.ax.set_yticklabels(cbar.get_ticklabels(), fontstretch='ultra-condensed')\n\n# Set the color bar tick label font size\ncbar.ax.set_yticklabels(cbar.get_ticklabels(), fontsize=12)\n\n# Set the color bar tick label font weight\ncbar.ax.set_yticklabels(cbar.get_ticklabels(), fontweight='bold')\n\n# Set the color bar tick label font style\ncbar.ax.set_yticklabels(cbar.get_ticklabels(), fontstyle='italic')\n\n# Set the color bar tick label font family\ncbar.ax.set_yticklabels(cbar.get_ticklabels(), fontfamily='serif')\n\n# Set the color bar tick label font variant\ncbar.ax.set_yticklabels(cbar.get_ticklabels(), fontvariant='small-caps')\n\n# Set the color bar tick label font stretch\ncbar.ax.set_yticklabels(cbar.get_ticklabels(), fontstretch='ultra-condensed')\n\n# Set the color bar tick label font size\ncbar.ax.set_yticklabels(cbar.get_ticklabels(), fontsize=12)\n\n# Set the color bar tick label font weight\ncbar.ax.set_yticklabels(cbar.get_ticklabels(), fontweight='bold')\n\n# Set the color bar tick label font style\ncbar.ax.set_yticklabels(cbar.get_ticklabels(), fontstyle='italic')\n\n# Set the color bar tick label font family\ncbar.ax.set_yticklabels(cbar.get_ticklabels(), fontfamily='serif')\n\n# Set the color bar tick label font variant\ncbar.ax.set_yticklabels(cbar.get_ticklabels(), fontvariant='small-caps')\n\n# Set the color bar tick label font stretch\ncbar.ax.set_yticklabels(cbar.get_ticklabels(), fontstretch='ultra-condensed')\n\n# Set the color bar tick label font size\ncbar.ax.set_yticklabels(cbar.get_ticklabels(), fontsize=12)\n\n# Set the color bar tick label font weight\ncbar.ax.set_yticklabels(cbar.get_ticklabels(), fontweight='bold')\n\n# Set the color bar tick label font style\ncbar.ax.set_yticklabels(cbar.get_ticklabels(), fontstyle='italic')\n\n# Set the color bar tick label font family\ncbar.ax.set_yticklabels(cbar.get_ticklabels(), fontfamily='serif')\n\n# Set the color bar tick label font variant\ncbar.ax.set_yticklabels(cbar.get_ticklabels(), fontvariant='small-caps')\n\n# Set the color bar tick label font stretch\ncbar.ax.set_yticklabels(cbar.get_ticklabels(), fontstretch='ultra-condensed')\n\n# Set the color bar tick label font size\ncbar.ax.set_yticklabels(cbar.get_ticklabels(), fontsize=12)\n\n# Set the color bar tick label font weight\ncbar.ax.set_yticklabels(cbar.get_ticklabels(), fontweight='bold')\n\n# Set the color bar tick label font style\ncbar.ax.set_yticklabels(cbar.get_ticklabels(), fontstyle='italic')\n\n# Set the color bar tick label font family\ncbar.ax.set_yticklabels(cbar.get_ticklabels(), fontfamily='serif')\n\n# Set the color bar tick label font variant\ncbar.ax.set_yticklabels(cbar.get_ticklabels(), fontvariant='small-caps')\n\n# Set the color bar tick label font stretch\ncbar.ax.set_yticklabels(cbar.get_ticklabels(), fontstretch='ultra-condensed')\n\n# Set the color bar tick label font size\ncbar.ax.set_yticklabels(cbar.get_ticklabels(), fontsize=12)\n\n# Set the color bar tick label font weight\ncbar.ax.set_yticklabels(cbar.get_ticklabels(), fontweight='bold')\n\n# Set the color bar tick label font style\ncbar.ax.set_yticklabels(cbar.get_ticklabels(), fontstyle='italic')\n\n# Set the color bar tick label font family\ncbar.ax.set_yticklabels(cbar.get_ticklabels(), fontfamily='serif')\n\n# Set the color bar tick label font variant\ncbar.ax.set_yticklabels(cbar.get_ticklabels(), fontvariant='small-caps')\n\n# Set the color bar tick label font stretch\ncbar.ax.set_yticklabels(cbar.get_ticklabels(), fontstretch='ultra-condensed')\n\n# Set the color bar tick label font size\ncbar.ax.set_yticklabels(cbar.get_ticklabels(), fontsize=12)\n\n# Set the color bar tick label font weight\ncbar.ax.set_yticklabels(cbar.get_ticklabels(), fontweight='bold')\n\n# Set the color bar tick label font style\ncbar.ax.set_yticklabels(cbar.get_ticklabels(), fontstyle='italic')\n\n# Set the color bar tick label font family\ncbar.ax.set_yticklabels(cbar.get_ticklabels(), fontfamily='serif')\n\n# Set the color bar tick label font variant\ncbar.ax.set_yticklabels(cbar.get_ticklabels(), fontvariant='small-caps')\n\n# Set the color bar tick label font stretch\ncbar.ax.set_yticklabels(cbar.get_ticklabels(), fontstretch='ultra-condensed')\n\n# Set the color bar tick label font size\ncbar.ax.set_yticklabels(cbar.get_ticklabels(), fontsize=12)\n\n# Set the color bar tick label font weight\ncbar.ax.set_yticklabels(cbar.get_ticklabels(), fontweight='bold')\n\n# Set the color bar tick label font style\ncbar.ax.set_yticklabels(cbar.get_ticklabels(), fontstyle='italic')\n\n# Set the color bar tick label font family\ncbar.ax.set_yticklabels(cbar.get_ticklabels(), fontfamily='serif')\n\n# Set the color bar tick label font variant\ncbar.ax.set_yticklabels(cbar.get_ticklabels(), fontvariant='small-caps')\n\n# Set the color bar tick label font stretch\ncbar.ax.set_yticklabels(cbar.get_ticklabels(), fontstretch='ultra-condensed')\n\n# Set the color bar tick label font size\ncbar.ax.set_yticklabels(cbar.get_ticklabels(), fontsize=12)\n\n# Set the color bar tick label font weight\ncbar.ax.set_yticklabels(cbar.get_ticklabels(), fontweight='bold')\n\n# Set the color bar tick label font style\ncbar.ax.set_yticklabels(cbar.get_ticklabels(), fontstyle='italic')\n\n# Set the color bar tick label font family\ncbar.ax.set_yticklabels(cbar.get_ticklabels(), fontfamily='serif')\n\n# Set the color bar tick label font variant\ncbar.ax.set_y"}
{"file": "dataset/ori_500/hist_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(9.0, 6.0))\n\n# Set the x-axis limits\nax.set_xlim(0.4, 1.0)\n\n# Set the y-axis limits\nax.set_ylim(0, 70)\n\n# Set the x-axis ticks\nax.set_xticks([0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0])\n\n# Set the y-axis ticks\nax.set_yticks([0, 10, 20, 30, 40, 50, 60, 70])\n\n# Set the x-axis labels\nax.set_xticklabels(['0.4', '0.5', '0.6', '0.7', '0.8', '0.9', '1.0'])\n\n# Set the y-axis labels\nax.set_yticklabels(['0', '10', '20', '30', '40', '50', '60', '70'])\n\n# Set the title of the plot\nax.set_title('TM-score')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='blue')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='blue')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('blue')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='blue')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='blue')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('blue')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='blue')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='blue')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('blue')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='blue')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='blue')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('blue')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='blue')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='blue')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('blue')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='blue')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='blue')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('blue')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='blue')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='blue')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('blue')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='blue')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='blue')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('blue')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='blue')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='blue')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('blue')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='blue')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='blue')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('blue')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='blue')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='blue')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('blue')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='blue')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='blue')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('blue')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='blue')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='blue')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('blue')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='blue')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='blue')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('blue')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='blue')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='blue')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('blue')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='blue')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='blue')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('blue')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='blue')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='blue')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('blue')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='blue')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='blue')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('blue')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='blue')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='blue')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('blue')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='blue')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='blue')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('blue')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='blue')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='blue')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('blue')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='blue')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='blue')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('blue')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='blue')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='blue')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('blue')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='blue')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='blue')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('blue')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='blue')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='blue')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('blue')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='blue')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='blue')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('blue')\n\n# Set the color of the top and right axis lines\nax.spines['top"}
{"file": "dataset/ori_500/hist_20.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis for the plot\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Create a scatter plot with random data\nx = np.random.rand(50)\ny = np.random.rand(50)\nax.scatter(x, y)\n\n# Set the title of the plot\nax.set_title('Scatter Plot')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(5.0, 4.0))\n\n# Set the title of the plot\nax.set_title('CIFAR100 \\'Desert\\' Concept')\n\n# Set the x-axis label\nax.set_xlabel('Concept Weight')\n\n# Set the y-axis label\nax.set_ylabel('Count')\n\n# Define the data for the bar chart\nx = [0.00, 0.05, 0.10, 0.15]\ny = [1000, 2000, 3000, 4000]\n\n# Create a bar chart with the data\nax.bar(x, y, color='brown')\n\n# Add a legend to the plot\nax.legend(['Class', 'Camel', 'Kangaroo'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_4.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(5.0, 3.0))\n\n# Create a bar chart\nax.bar(range(1, 11), [20, 40, 60, 80, 100, 90, 70, 50, 30, 10], color='blue')\nax.set_xlabel('Distance Difference (Random vs Center)')\nax.set_ylabel('Number of Examples')\n\n# Add a title\nax.set_title('Number of Examples by Distance Difference')\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/hist_5.pdf", "response": "import matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(4.0, 3.0))\n\n# Set the background color of the plot\nax.set_facecolor('black')\n\n# Create a bar chart with the data\nax.bar(range(12), [1500, 1400, 1300, 1200, 1100, 1000, 900, 800, 700, 600, 500, 400], color='orange')\n\n# Set the title and labels\nax.set_title('Number of Clusters')\nax.set_xlabel('Number of Repetition')\nax.set_ylabel('Number of Clusters')\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/hist_6.pdf", "response": "import matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(5.0, 3.0))\n\n# Set the title of the plot\nax.set_title('Classification Accuracy by Distance')\n\n# Set the x-axis label\nax.set_xlabel('Distance to threshold')\n\n# Set the y-axis label\nax.set_ylabel('Accuracy')\n\n# Create a bar chart\nax.bar([0, 1, 2, 3, 4], [0.9, 0.8, 0.7, 0.6, 0.5], color='blue', label='Correctly classified')\nax.bar([0, 1, 2, 3, 4], [0.7, 0.6, 0.5, 0.4, 0.3], color='orange', label='Misclassified')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/hist_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Set the title of the plot\nax.set_title('Calibration Error: 0.31')\n\n# Set the x-axis label\nax.set_xlabel('Confidence in bin')\n\n# Set the y-axis label\nax.set_ylabel('Accuracy in bin')\n\n# Create a line graph with a diagonal line\nax.plot([0, 10], [0, 10], 'r-')\n\n# Create a scatter plot with a diagonal line\nax.scatter([0, 10], [0, 10], c='b', marker='o')\n\n# Create a bar chart with a diagonal line\nax.bar([0, 1, 2, 3, 4, 5, 6, 7, 8, 9], [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0], color='orange')\n\n# Create a histogram with a diagonal line\nax.hist([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0], bins=10, color='green')\n\n# Create a pie chart with a diagonal line\nax.pie([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0], labels=['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J'], colors=['red', 'blue', 'green', 'yellow', 'purple', 'orange', 'pink', 'brown', 'gray', 'black'])\n\n# Create a box plot with a diagonal line\nax.boxplot([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0])\n\n# Create a violin plot with a diagonal line\nax.violinplot([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0])\n\n# Create a heatmap with a diagonal line\nax.imshow([[0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0], [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0]], cmap='hot', interpolation='nearest')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 5.0))\n\n# Set the title of the plot\nax.set_title('Number of Queries Overlap')\n\n# Set the x-axis label\nax.set_xlabel('% images overlap')\n\n# Set the y-axis label\nax.set_ylabel('Number of queries')\n\n# Set the x-axis limits\nax.set_xlim(0, 1)\n\n# Set the y-axis limits\nax.set_ylim(0, 6000)\n\n# Set the x-axis ticks\nax.set_xticks([0, 0.2, 0.4, 0.6, 0.8, 1])\n\n# Set the y-axis ticks\nax.set_yticks([0, 1000, 2000, 3000, 4000, 5000, 6000])\n\n# Set the x-axis tick labels\nax.set_xticklabels(['0%', '20%', '40%', '60%', '80%', '100%'])\n\n# Set the y-axis tick labels\nax.set_yticklabels(['0', '1000', '2000', '3000', '4000', '5000', '6000'])\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('blue')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the background\nax.set_facecolor('lightblue')\n\n# Set the color of the text\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the plot area\nax.patch.set_facecolor('white')\n\n# Set the color of the legend\nax.legend(facecolor='white', edgecolor='black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the labels\nax.xaxis.label.set_color('black')\nax.yaxis.label.set_color('black')\n\n# Set the color of the ticks\nax.tick_params(axis='x', colors='black')\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the background\nax.set_facecolor('lightblue')\n\n# Set the color of the text\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the plot area\nax.patch.set_facecolor('white')\n\n# Set the color of the legend\nax.legend(facecolor='white', edgecolor='black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the labels\nax.xaxis.label.set_color('black')\nax.yaxis.label.set_color('black')\n\n# Set the color of the ticks\nax.tick_params(axis='x', colors='black')\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the background\nax.set_facecolor('lightblue')\n\n# Set the color of the text\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the plot area\nax.patch.set_facecolor('white')\n\n# Set the color of the legend\nax.legend(facecolor='white', edgecolor='black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the labels\nax.xaxis.label.set_color('black')\nax.yaxis.label.set_color('black')\n\n# Set the color of the ticks\nax.tick_params(axis='x', colors='black')\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the background\nax.set_facecolor('lightblue')\n\n# Set the color of the text\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the plot area\nax.patch.set_facecolor('white')\n\n# Set the color of the legend\nax.legend(facecolor='white', edgecolor='black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the labels\nax.xaxis.label.set_color('black')\nax.yaxis.label.set_color('black')\n\n# Set the color of the ticks\nax.tick_params(axis='x', colors='black')\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the background\nax.set_facecolor('lightblue')\n\n# Set the color of the text\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the plot area\nax.patch.set_facecolor('white')\n\n# Set the color of the legend\nax.legend(facecolor='white', edgecolor='black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the labels\nax.xaxis.label.set_color('black')\nax.yaxis.label.set_color('black')\n\n# Set the color of the ticks\nax.tick_params(axis='x', colors='black')\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the background\nax.set_facecolor('lightblue')\n\n# Set the color of the text\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the plot area\nax.patch.set_facecolor('white')\n\n# Set the color of the legend\nax.legend(facecolor='white', edgecolor='black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the labels\nax.xaxis.label.set_color('black')\nax.yaxis.label.set_color('black')\n\n# Set the color of the ticks\nax.tick_params(axis='x', colors='black')\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the background\nax.set_facecolor('lightblue')\n\n# Set the color of the text\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the plot area\nax.patch.set_facecolor('white')\n\n# Set the color of the legend\nax.legend(facecolor='white', edgecolor='black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the labels\nax.xaxis.label.set_color('black')\nax.yaxis.label.set_color('black')\n\n# Set the color of the ticks\nax.tick_params(axis='x', colors='black')\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the background\nax.set_facecolor('lightblue')\n\n# Set the color of the text\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the plot area\nax.patch.set_facecolor('white')\n\n# Set the color of the legend\nax.legend(facecolor='white', edgecolor='black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the labels\nax.xaxis.label.set_color('black')\nax.yaxis.label.set_color('black')\n\n# Set the color of the ticks\nax.tick_params(axis='x', colors='black')\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the background\nax.set_facecolor('lightblue')\n\n# Set the color of the text\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the plot area\nax.patch.set_facecolor('white')\n\n# Set the color of the legend\nax.legend(facecolor='white', edgecolor='black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the labels\nax.xaxis.label.set_color('black')\nax.yaxis.label.set_color('black')\n\n# Set the color of the ticks\nax.tick_params(axis='x', colors='black')\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the background\nax.set_facecolor('lightblue')\n\n# Set the color of the text\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the plot area\nax.patch.set_facecolor('white')\n\n# Set the color of the legend\nax.legend(facecolor='white', edgecolor='black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the labels\nax.xaxis.label.set_color('black')\nax.yaxis.label.set_color('black')\n\n# Set the color of the ticks\nax.tick_params(axis='x', colors='black')\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the background\nax.set_facecolor('lightblue')\n\n# Set the color of the text\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the plot area\nax.patch.set_facecolor('white')\n\n# Set the color of the legend\nax.legend(facecolor='white', edgecolor='black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the labels\nax.xaxis.label.set_color('black')\nax.yaxis.label.set_color('black')\n\n# Set the color of the ticks\nax.tick_params(axis='x', colors='black')\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the background\nax.set_facecolor('lightblue')\n\n# Set the color of the text\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the plot area\nax.patch.set_facecolor('white')\n\n# Set the color of the legend\nax.legend(facecolor='white', edgecolor='black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the labels\nax.xaxis.label.set_color('black')\nax.yaxis.label.set_color('black')\n\n# Set the color of the ticks\nax.tick_params(axis='x', colors='black')\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the background\nax.set_facecolor('lightblue')\n\n# Set the color of the text\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the plot area\nax.patch.set_facecolor('white')\n\n# Set the color of the legend\nax.legend(facecolor='white', edgecolor='black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the labels\nax.xaxis.label.set_color('black')\nax.yaxis.label.set_color('black')\n\n# Set the color of the ticks\nax.tick_params(axis='x', colors='black')\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the background\nax.set_facecolor('lightblue')\n\n# Set the color of the text\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the plot area\nax.patch.set_facecolor('white')\n\n# Set the color of the legend\nax.legend(facecolor='white', edgecolor='black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the labels\nax.xaxis.label.set_color('black')\nax.yaxis.label.set_color('black')\n\n# Set the color of the ticks\nax.tick_params(axis='x', colors='black')\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the background\nax.set_facecolor('lightblue')\n\n# Set the color of the text\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the plot area\nax.patch.set_facecolor('white')\n\n# Set the color of the legend\nax.legend(facecolor='white', edgecolor='black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the labels\nax.xaxis.label.set_color('black')\nax.yaxis.label.set_color('black')\n\n# Set the color of the ticks\nax.tick_params(axis='x', colors='black')\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the background\nax.set_facecolor('lightblue')\n\n# Set the color of the text\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the plot area\nax.patch.set_facecolor('white')\n\n# Set the color of the legend\nax.legend(facecolor='white', edgecolor='black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the labels\nax.xaxis.label.set_color('black')\nax.yaxis.label.set_color('black')\n\n# Set the color of the ticks\nax.tick_params(axis='x', colors='black')\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the background\nax.set_facecolor('lightblue')\n\n# Set the color of the text\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the plot area\nax.patch.set_facecolor('white')\n\n# Set the color of the legend\nax.legend(facecolor='white', edgecolor='black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the labels\nax.xaxis.label.set_color('black')\nax.yaxis.label.set_color('black')\n\n# Set the color of the ticks\nax.tick_params(axis='x', colors='black')\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the background\nax.set_facecolor('lightblue')\n\n# Set the color of the text\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the plot area\nax.patch.set_facecolor('white')\n\n# Set the color of the legend\nax.legend(facecolor='white', edgecolor='black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the labels\nax.xaxis.label.set_color('black')\nax.yaxis.label.set_color('black')\n\n# Set the color of the ticks\nax.tick_params(axis='x', colors='black')\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the background\nax.set_facecolor('lightblue')\n\n# Set the color of the text\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the plot area\nax.patch.set_facecolor('white')\n\n# Set the color of the legend\nax.legend(facecolor='white', edgecolor='black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the labels\nax.xaxis.label.set_color('black')\nax.yaxis.label.set_color('black')\n\n# Set the color of the ticks\nax.tick_params(axis='x', colors='black')\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the background\nax.set_facecolor('lightblue')\n\n# Set the color of the text\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the plot area\nax.patch.set_facecolor('white')\n\n# Set the color of the legend\nax.legend(facecolor='white', edgecolor='black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the labels\nax.xaxis.label.set_color('black')\nax.yaxis.label.set_color('black')\n\n# Set the color of the ticks\nax.tick_params(axis='x', colors='black')\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the background\nax.set_facecolor('lightblue')\n\n# Set the color of the text\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the plot area\nax.patch.set_facecolor('white')\n\n# Set the color of the legend\nax.legend(facecolor='white', edgecolor='black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the labels\nax.xaxis.label.set_color('black')\nax.yaxis.label.set_color('black')\n\n# Set the color of the ticks\nax.tick_params(axis='x', colors='black')\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the background\nax.set_facecolor('lightblue')\n\n# Set the color of the text\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the plot area\nax.patch.set_facecolor('white')\n\n# Set the color of the legend\nax.legend(facecolor='white', edgecolor='black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the labels\nax.xaxis.label.set_color('black')\nax.yaxis.label.set_color('black')\n\n# Set the color of the ticks\nax.tick_params(axis='x', colors='black')\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the background\nax.set_facecolor('lightblue')\n\n# Set the color of the text\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the plot area\nax.patch.set_facecolor('white')\n\n# Set the color of the legend\nax.legend(facecolor='white', edgecolor='black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the labels\nax.xaxis.label.set_color('black')\nax.yaxis.label.set_color('black')\n\n# Set the color of the ticks\nax.tick_params(axis='x', colors='black')\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the background\n"}
{"file": "dataset/ori_500/hist_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 7))\n\n# Set the title of the plot\nax.set_title('MNIST')\n\n# Create a histogram\nax.hist(np.random.normal(0, 1, 1000), bins=30, color='blue')\n\n# Set the x-axis label\nax.set_xlabel('Value')\n\n# Set the y-axis label\nax.set_ylabel('Frequency')\n\n# Set the x-axis limits\nax.set_xlim([0, 0.25])\n\n# Set the y-axis limits\nax.set_ylim([0, 500])\n\n# Show the plot\nplt.show()\n\n# Create a second subplot\nfig, ax = plt.subplots(figsize=(10, 7))\n\n# Set the title of the plot\nax.set_title('FashionMNIST')\n\n# Create a histogram\nax.hist(np.random.normal(0, 1, 1000), bins=30, color='blue')\n\n# Set the x-axis label\nax.set_xlabel('Value')\n\n# Set the y-axis label\nax.set_ylabel('Frequency')\n\n# Set the x-axis limits\nax.set_xlim([0, 0.25])\n\n# Set the y-axis limits\nax.set_ylim([0, 500])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the x-axis limits\nax.set_xlim(5, 20)\n\n# Set the y-axis limits\nax.set_ylim(0, 100)\n\n# Set the x-axis label\nax.set_xlabel('SNR')\n\n# Set the y-axis label\nax.set_ylabel('Classification Accuracy (%)')\n\n# Plot the data\nax.plot([5, 10, 15, 20], [90, 80, 70, 60], 'r-')\nax.plot([5, 10, 15, 20], [80, 70, 60, 50], 'g-')\nax.plot([5, 10, 15, 20], [70, 60, 50, 40], 'b-')\nax.plot([5, 10, 15, 20], [60, 50, 40, 30], 'y-')\nax.plot([5, 10, 15, 20], [50, 40, 30, 20], 'm-')\nax.plot([5, 10, 15, 20], [40, 30, 20, 10], 'c-')\n\n# Add markers at the data points\nax.plot([5, 10, 15, 20], [90, 80, 70, 60], 'ro')\nax.plot([5, 10, 15, 20], [80, 70, 60, 50], 'go')\nax.plot([5, 10, 15, 20], [70, 60, 50, 40], 'bo')\nax.plot([5, 10, 15, 20], [60, 50, 40, 30], 'yo')\nax.plot([5, 10, 15, 20], [50, 40, 30, 20], 'mo')\nax.plot([5, 10, 15, 20], [40, 30, 20, 10], 'co')\n\n# Add a legend\nax.legend(['JPEG+LDPC', 'DEEPJSCC w/o ofdm', 'DEEPJSCC w/ ofdm', 'OURS'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Performance Metrics')\n\n# Set the x-axis label\nax.set_xlabel('n')\n\n# Set the y-axis label\nax.set_ylabel('Performance Gain (%)')\n\n# Set the x-ticks\nax.set_xticks([0, 1, 2, 3, 4, 5])\n\n# Set the y-ticks\nax.set_yticks([0, 1, 2, 3, 4, 5, 6, 7])\n\n# Draw a rectangle for each performance metric\nax.add_patch(plt.Rectangle((0, 0), 1, 5, color='blue'))\nax.add_patch(plt.Rectangle((1, 0), 1, 3, color='orange'))\nax.add_patch(plt.Rectangle((2, 0), 1, 4, color='green'))\nax.add_patch(plt.Rectangle((3, 0), 1, 2, color='cyan'))\nax.add_patch(plt.Rectangle((4, 0), 1, 6, color='magenta'))\n\n# Draw a line for each performance metric\nax.plot([0, 1, 2, 3, 4, 5], [0, 1, 2, 3, 4, 5], color='blue')\nax.plot([0, 1, 2, 3, 4, 5], [5, 4, 3, 2, 1, 0], color='orange')\nax.plot([0, 1, 2, 3, 4, 5], [0, 2, 4, 6, 8, 10], color='green')\nax.plot([0, 1, 2, 3, 4, 5], [5, 3, 1, -1, -3, -5], color='cyan')\nax.plot([0, 1, 2, 3, 4, 5], [0, 1, 2, 3, 4, 5], color='magenta')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Effect of Vocab on Zero Shot Accuracy')\n\n# Set the x-axis label\nax.set_xlabel('Deposition IO Norm')\n\n# Set the y-axis label\nax.set_ylabel('Accuracy')\n\n# Set the x-axis limits\nax.set_xlim(0, 80)\n\n# Set the y-axis limits\nax.set_ylim(0.55, 0.75)\n\n# Set the x-axis ticks\nax.set_xticks([0, 20, 40, 60, 80])\n\n# Set the y-axis ticks\nax.set_yticks([0.55, 0.60, 0.65, 0.70, 0.75])\n\n# Set the x-axis tick labels\nax.set_xticklabels(['0', '20', '40', '60', '80'])\n\n# Set the y-axis tick labels\nax.set_yticklabels(['0.55', '0.60', '0.65', '0.70', '0.75'])\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the text\nax.text(0.5, 0.95, 'Dictionary', transform=ax.transAxes, fontsize=12, verticalalignment='top')\n\n# Set the color of the text\nax.text(0.5, 0.90, 'coco (10k)', transform=ax.transAxes, fontsize=10, verticalalignment='top', color='red')\n\n# Set the color of the text\nax.text(0.5, 0.85, 'laion (10k)', transform=ax.transAxes, fontsize=10, verticalalignment='top', color='green')\n\n# Set the color of the text\nax.text(0.5, 0.80, 'coco (5k)', transform=ax.transAxes, fontsize=10, verticalalignment='top', color='blue')\n\n# Set the color of the text\nax.text(0.5, 0.75, 'laion (5k)', transform=ax.transAxes, fontsize=10, verticalalignment='top', color='orange')\n\n# Set the color of the text\nax.text(0.5, 0.70, 'CLIP', transform=ax.transAxes, fontsize=10, verticalalignment='top', color='black')\n\n# Plot the data\nax.plot([0, 20, 40, 60, 80], [0.55, 0.60, 0.65, 0.70, 0.75], 'ro-', label='coco (10k)')\nax.plot([0, 20, 40, 60, 80], [0.55, 0.60, 0.65, 0.70, 0.75], 'go-', label='laion (10k)')\nax.plot([0, 20, 40, 60, 80], [0.55, 0.60, 0.65, 0.70, 0.75], 'bo-', label='coco (5k)')\nax.plot([0, 20, 40, 60, 80], [0.55, 0.60, 0.65, 0.70, 0.75], 'yo-', label='laion (5k)')\nax.plot([0, 20, 40, 60, 80], [0.55, 0.60, 0.65, 0.70, 0.75], 'ko-', label='CLIP')\n\n# Show the legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Stock Price Prediction')\n\n# Set the x-axis label\nax.set_xlabel('Sample Ratio')\n\n# Set the y-axis label\nax.set_ylabel('Stock Price')\n\n# Create a scatter plot for each company\nax.scatter([0.25, 0.5, 0.75, 1], [0.03, 0.04, 0.05, 0.06], color='red', label='Company A')\nax.scatter([0.25, 0.5, 0.75, 1], [0.02, 0.03, 0.04, 0.05], color='blue', label='Company B')\nax.scatter([0.25, 0.5, 0.75, 1], [0.01, 0.02, 0.03, 0.04], color='green', label='Company C')\n\n# Create a line plot for each company\nax.plot([0.25, 0.5, 0.75, 1], [0.03, 0.04, 0.05, 0.06], color='red', label='Company A')\nax.plot([0.25, 0.5, 0.75, 1], [0.02, 0.03, 0.04, 0.05], color='blue', label='Company B')\nax.plot([0.25, 0.5, 0.75, 1], [0.01, 0.02, 0.03, 0.04], color='green', label='Company C')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 10.0))\n\n# Set the x-axis limits\nax.set_xlim(0, 200)\n\n# Set the y-axis limits\nax.set_ylim(0.1, 0.6)\n\n# Set the x-axis label\nax.set_xlabel('Training iterations')\n\n# Set the y-axis label\nax.set_ylabel('Fitness')\n\n# Plot the data\nax.plot([0, 50, 100, 150, 200], [0.5, 0.4, 0.3, 0.2, 0.1], 'b-', label='base')\nax.plot([0, 50, 100, 150, 200], [0.5, 0.4, 0.3, 0.2, 0.1], 'y-', label='ours')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Set the x-axis values\nx = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28]\n\n# Set the y-axis values for each product\ny1 = [0.25, 0.3, 0.35, 0.4, 0.45, 0.5, 0.55, 0.6, 0.65, 0.7, 0.75, 0.8, 0.85, 0.9, 0.95, 1.0, 0.95, 0.9, 0.85, 0.8, 0.75, 0.7, 0.65, 0.6, 0.55, 0.5, 0.45, 0.4]\ny2 = [0.2, 0.25, 0.3, 0.35, 0.4, 0.45, 0.5, 0.55, 0.6, 0.65, 0.7, 0.75, 0.8, 0.85, 0.9, 0.95, 1.0, 0.95, 0.9, 0.85, 0.8, 0.75, 0.7, 0.65, 0.6, 0.55, 0.5, 0.45, 0.4]\ny3 = [0.15, 0.2, 0.25, 0.3, 0.35, 0.4, 0.45, 0.5, 0.55, 0.6, 0.65, 0.7, 0.75, 0.8, 0.85, 0.9, 0.95, 1.0, 0.95, 0.9, 0.85, 0.8, 0.75, 0.7, 0.65, 0.6, 0.55, 0.5, 0.45, 0.4]\ny4 = [0.1, 0.15, 0.2, 0.25, 0.3, 0.35, 0.4, 0.45, 0.5, 0.55, 0.6, 0.65, 0.7, 0.75, 0.8, 0.85, 0.9, 0.95, 1.0, 0.95, 0.9, 0.85, 0.8, 0.75, 0.7, 0.65, 0.6, 0.55, 0.5, 0.45, 0.4]\ny5 = [0.05, 0.1, 0.15, 0.2, 0.25, 0.3, 0.35, 0.4, 0.45, 0.5, 0.55, 0.6, 0.65, 0.7, 0.75, 0.8, 0.85, 0.9, 0.95, 1.0, 0.95, 0.9, 0.85, 0.8, 0.75, 0.7, 0.65, 0.6, 0.55, 0.5, 0.45, 0.4]\n\n# Plot the data\nax.plot(x, y1, 'r-')\nax.plot(x, y2, 'b-')\nax.plot(x, y3, 'g-')\nax.plot(x, y4, 'c-')\nax.plot(x, y5, 'm-')\n\n# Add labels and title\nax.set_xlabel('Week')\nax.set_ylabel('Normalized Value')\nax.set_title('Product Performance Over Time')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nx = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\ny1 = [85, 80, 75, 70, 65, 60, 55, 50, 45, 40, 35, 30, 25, 20, 15, 10, 5, 0, 5, 10]\ny2 = [90, 85, 80, 75, 70, 65, 60, 55, 50, 45, 40, 35, 30, 25, 20, 15, 10, 5, 0, 5]\ny3 = [95, 90, 85, 80, 75, 70, 65, 60, 55, 50, 45, 40, 35, 30, 25, 20, 15, 10, 5, 0]\ny4 = [80, 75, 70, 65, 60, 55, 50, 45, 40, 35, 30, 25, 20, 15, 10, 5, 0, 5, 10, 15]\ny5 = [75, 70, 65, 60, 55, 50, 45, 40, 35, 30, 25, 20, 15, 10, 5, 0, 5, 10, 15, 20]\n\n# Plot\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\nax.plot(x, y1, 'b-', label='BaCE')\nax.plot(x, y2, 'r-', label='LWF')\nax.plot(x, y3, 'm-', label='EWC')\nax.plot(x, y4, 'p-', label='SEQ')\nax.plot(x, y5, 'y-', label='Average Accuracy')\n\n# Legend\nax.legend()\n\n# X-axis\nax.set_xlabel('Task')\nax.set_xticks([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\nax.set_xticklabels(['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20'])\n\n# Y-axis\nax.set_ylabel('Accuracy (%)')\nax.set_yticks([0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100])\nax.set_yticklabels(['0', '10', '20', '30', '40', '50', '60', '70', '80', '90', '100'])\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_16.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Model Performance')\n\n# Set the x-axis label\nax.set_xlabel('Uncertainty threshold')\n\n# Set the y-axis label\nax.set_ylabel('Accuracy')\n\n# Define the data for the plots\nx = [0.0, 0.2, 0.4, 0.6, 0.8, 1.0]\ny1 = [0.99, 0.98, 0.97, 0.96, 0.95, 0.94]\ny2 = [0.99, 0.98, 0.97, 0.96, 0.95, 0.94]\ny3 = [0.99, 0.98, 0.97, 0.96, 0.95, 0.94]\n\n# Plot the data\nax.plot(x, y1, 'b-', label='Oesense')\nax.plot(x, y2, 'r-', label='KWS')\nax.plot(x, y3, 'g-', label='ECG5000')\n\n# Add legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_17.pdf", "response": "import matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Set the x-axis and y-axis limits\nax.set_xlim(0, 120)\nax.set_ylim(10**-5, 10**-3)\n\n# Set the x-axis and y-axis labels\nax.set_xlabel('Number of Parameters')\nax.set_ylabel('Log KL Divergence')\n\n# Plot the data\nax.plot([0, 20, 40, 60, 80, 100, 120], [10**-3, 10**-3, 10**-3, 10**-3, 10**-3, 10**-3, 10**-3], 'bo-')\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/line_18.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(9, 4))\n\n# Set the title of the graph\nax.set_title('GPT-4 Evaluation')\n\n# Set the x-axis label\nax.set_xlabel('Iterations')\n\n# Set the y-axis label\nax.set_ylabel('Attack Success Rate')\n\n# Create a line plot\nax.plot([0, 500, 1000, 1500, 2000], [0.8, 0.7, 0.6, 0.5, 0.4], color='blue', label='7B')\nax.plot([0, 500, 1000, 1500, 2000], [0.9, 0.8, 0.7, 0.6, 0.5], color='pink', label='7B (Fine-tuned)')\n\n# Add a legend\nax.legend()\n\n# Create a second subplot\nax2 = fig.add_subplot(122)\n\n# Set the title of the graph\nax2.set_title('Llama Guard Evaluation')\n\n# Set the x-axis label\nax2.set_xlabel('Iterations')\n\n# Set the y-axis label\nax2.set_ylabel('Attack Success Rate')\n\n# Create a line plot\nax2.plot([0, 500, 1000, 1500, 2000], [0.8, 0.7, 0.6, 0.5, 0.4], color='blue', label='7B')\nax2.plot([0, 500, 1000, 1500, 2000], [0.9, 0.8, 0.7, 0.6, 0.5], color='pink', label='7B (Fine-tuned)')\n\n# Add a legend\nax2.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_19.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(5.0, 4.0))\n\n# Plot the data\nax.plot([1, 2, 3, 4, 5], [60, 70, 80, 90, 100], 'g-')\nax.plot([1, 2, 3, 4, 5], [50, 60, 70, 80, 90], 'r-')\nax.plot([1, 2, 3, 4, 5], [40, 50, 60, 70, 80], 'b-')\n\n# Add labels and title\nax.set_xlabel('Fraction of training data (log scale)')\nax.set_ylabel('Test accuracy (%)')\nax.set_title('Comparison of different models')\n\n# Add legend\nlegend_elements = [Line2D([0], [0], marker='o', color='w', label='Full', markerfacecolor='g', markersize=10),\n                    Line2D([0], [0], marker='o', color='w', label='SPT', markerfacecolor='r', markersize=10),\n                    Line2D([0], [0], marker='o', color='w', label='VPT', markerfacecolor='b', markersize=10)]\nax.legend(handles=legend_elements)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_2.pdf", "response": "import matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(4.0, 3.0))\n\n# Set the title and labels\nax.set_title('Temperature vs Gradient Steps')\nax.set_xlabel('Gradient Steps (x 62.5K)')\nax.set_ylabel('Temperature')\n\n# Plot the data\nax.plot([0, 50, 100, 150, 200], [0, 1, 2, 1, 0], 'b-', label='Step 1')\nax.plot([0, 50, 100, 150, 200], [0, 1.5, 1.8, 1.5, 0], 'g-', label='Step 2')\nax.plot([0, 50, 100, 150, 200], [0, 1, 1.5, 1, 0], 'r-', label='Step 3')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/line_20.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(16.0, 8.0))\n\n# Set the title of the graph\nax.set_title('Performance')\n\n# Set the x-axis label\nax.set_xlabel('Ratio r')\n\n# Set the y-axis label\nax.set_ylabel('Performance')\n\n# Create a scatter plot\nax.scatter([0.2, 0.4, 0.6, 0.8, 1.0], [0.78, 0.76, 0.74, 0.72, 0.70], color='red')\n\n# Create a line plot\nax.plot([0.2, 0.4, 0.6, 0.8, 1.0], [0.78, 0.76, 0.74, 0.72, 0.70], color='blue')\n\n# Add a legend\nax.legend(['PNA + ours', 'GIN + ours', 'PNA + GSAT', 'GIN + GSAT'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_21.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nx = [120, 90, 60, 30, 1]\ny1 = [85, 87, 88, 89, 90]\ny2 = [80, 82, 83, 84, 85]\n\n# Plot\nfig, ax = plt.subplots(figsize=(9.0, 6.0))\nax.plot(x, y1, 'b-', label='Ours')\nax.plot(x, y2, 'g-', label='ACR')\n\n# Markers\nfor i in range(len(x)):\n    ax.plot(x[i], y1[i], 'bo')\n    ax.plot(x[i], y2[i], 'go')\n\n# Legend\nax.legend()\n\n# Labels\nax.set_xlabel('Imbalance Ratio of Unlabeled Data (%)')\nax.set_ylabel('Top-1 Acc (%)')\n\n# Title\nax.set_title('Comparison of Top-1 Accuracy')\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_22.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the graph\nx = [40, 50, 60, 70, 80, 90, 100]\ny = [2.91, 3.11, 3.32, 3.53, 3.63, 3.74, 3.94]\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(5.0, 4.0))\n\n# Plot the data\nax.plot(x, y)\n\n# Set the title and labels\nax.set_title('Perplexity vs. Ratio of 4-bit Utilization')\nax.set_xlabel('Ratio of 4-bit Utilization (%)')\nax.set_ylabel('Perplexity (PPL)')\n\n# Add a legend\nax.legend(['APTQ', 'LLaMA-7B (FP16): 5.22', 'OWQ-4bit: 5.56', 'GPTQ-4bit: 5.62', 'LLM-QAT-4bit: 7.4', 'LMM-QAT-4bit: 7.4'], loc='upper right')\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0, 0), 1, 1, fc='w', ec='k', alpha=0.5)\nax.add_patch(rect)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_23.pdf", "response": "import matplotlib.pyplot as plt\n\n# Data for the graph\nx = [2**1, 2**2, 2**3, 2**4, 2**5, 2**6, 2**7]\ny = [67.32, 82.98, 89.53, 90.47, 92.47, 93.7, 96.75]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(5.0, 2.0))\n\n# Plot the data\nax.plot(x, y, 'b-')\n\n# Set the title and labels\nax.set_title('Coverage Ratio')\nax.set_xlabel('Number of Training Objects')\nax.set_ylabel('Coverage Ratio (%)')\n\n# Add markers at each point\nfor i, j in zip(x, y):\n    ax.annotate(f'({i},{j})', xy=(i, j), textcoords=\"offset points\", xytext=(0,10), ha='center')\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/line_24.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Set the x-axis limits\nax.set_xlim(0, 10)\n\n# Set the y-axis limits\nax.set_ylim(600, 800)\n\n# Create a rectangle for the background\nrect = plt.Rectangle((0, 600), 10, 200, color='lightblue', alpha=0.5)\nax.add_patch(rect)\n\n# Create a rectangle for the background\nrect = plt.Rectangle((0, 600), 10, 200, color='lightgrey', alpha=0.5)\nax.add_patch(rect)\n\n# Create a line plot\nx = np.linspace(0, 10, 100)\ny = 700 - 50 * np.sin(x / 2)\nax.plot(x, y, 'b-')\n\n# Add a legend\nax.legend(['Average', 'Standard Deviation'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_25.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the x-axis limits\nax.set_xlim(1, 8)\n\n# Set the y-axis limits\nax.set_ylim(2.5, 7.5)\n\n# Set the x-axis ticks\nax.set_xticks([1, 2, 3, 4, 5, 6, 7, 8])\n\n# Set the y-axis ticks\nax.set_yticks([2.5, 3.0, 3.5, 4.0, 4.5, 5.0, 5.5, 6.0, 6.5, 7.0, 7.5])\n\n# Set the x-axis labels\nax.set_xlabel('Number of experts')\n\n# Set the y-axis labels\nax.set_ylabel('DoN')\n\n# Set the title\nax.set_title('IQM Human Normalized Score')\n\n# Plot the data\nax.plot([1, 2, 3, 4, 5, 6, 7, 8], [2.5, 2.8, 3.0, 3.2, 3.4, 3.6, 3.8, 4.0], 'o-', color='blue')\nax.plot([1, 2, 3, 4, 5, 6, 7, 8], [2.5, 2.7, 2.9, 3.1, 3.3, 3.5, 3.7, 3.9], 'o-', color='green')\nax.plot([1, 2, 3, 4, 5, 6, 7, 8], [2.5, 2.7, 2.9, 3.1, 3.3, 3.5, 3.7, 3.9], 'o-', color='pink')\n\n# Add a legend\nax.legend(['Baseline', 'SoftMoE', 'Top1-MoE'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_26.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Test set TPR | FPR = 10^-4')\n\n# Set the x-axis label\nax.set_xlabel('Vocabulary size')\n\n# Set the y-axis label\nax.set_ylabel('TPR')\n\n# Define the data points\nx = [256, 512, 1024, 2048, 4096, 8192, 16384]\ny = [0.2, 0.4, 0.6, 0.8, 0.9, 0.95, 0.98]\n\n# Plot the data points\nax.plot(x, y, 'b-')\n\n# Add a legend\nax.legend(['BPE', 'Wordpunct', 'Whitespace'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_27.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for CNN\nx = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ny = [26.0, 28.2, 30.4, 32.6, 34.8, 36.0, 38.2, 40.4, 42.6, 44.8]\n\n# Data for CIF\nx2 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ny2 = [24.7, 26.9, 29.1, 31.3, 33.5, 35.7, 37.9, 40.1, 42.3, 44.5]\n\n# Data for STAR\nx3 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ny3 = [22.6, 24.8, 27.0, 29.2, 31.4, 33.6, 35.8, 38.0, 40.2, 42.4]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Plot the data\nax.plot(x, y, label='CNN', color='#F5F5DC')\nax.plot(x2, y2, label='CIF', color='#800080')\nax.plot(x3, y3, label='STAR', color='#000000')\n\n# Set the title and labels\nax.set_title('Word Error Rate vs Compression Rate')\nax.set_xlabel('Compression Rate (%)')\nax.set_ylabel('Word Error Rate (%)')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_28.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nx = [25, 50, 75, 100, 125, 150, 175, 200]\ny1 = [0.92, 0.93, 0.94, 0.95, 0.96, 0.97, 0.98, 0.99]\ny2 = [0.85, 0.86, 0.87, 0.88, 0.89, 0.90, 0.91, 0.92]\ny3 = [0.75, 0.76, 0.77, 0.78, 0.79, 0.80, 0.81, 0.82]\n\n# Plot\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\nax.plot(x, y1, 'r-', label='PILOTE')\nax.plot(x, y2, 'b-', label='Re-trained model')\nax.plot(x, y3, 'g-', label='Pre-trained model accuracy')\n\n# Markers\nfor i in range(len(x)):\n    ax.plot(x[i], y1[i], 'ro')\n    ax.plot(x[i], y2[i], 'bo')\n    ax.plot(x[i], y3[i], 'go')\n\n# Legend\nax.legend()\n\n# Title and labels\nax.set_title('Model Accuracy over Number of Exemplars')\nax.set_xlabel('Number of exemplars in class \\'Run\\'')\nax.set_ylabel('Avg. accuracy of five rounds')\n\n# Grid\nax.grid(True)\n\n# Save figure\nplt.savefig('model_accuracy.png')\nplt.show()\n```"}
{"file": "dataset/ori_500/line_29.pdf", "response": "import matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(4.0, 3.0))\n\n# Set the title of the plot\nax.set_title('Average Fidelity Over Time')\n\n# Set the x-axis label\nax.set_xlabel('# of Steps')\n\n# Set the y-axis label\nax.set_ylabel('Avg Fidelity')\n\n# Create a line plot with the data\nax.plot([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], [0.1, 0.15, 0.2, 0.25, 0.3, 0.35, 0.4, 0.45, 0.5, 0.55, 0.6, 0.65, 0.7, 0.75, 0.8, 0.85, 0.9, 0.95, 1.0, 1.05, 1.1], color='blue')\n\n# Add a legend to the plot\nax.legend(['xLLM', 'Single-Pass LLM'], loc='upper left')\n\n# Set the y-axis limits\nax.set_ylim(0.1, 1.1)\n\n# Set the x-axis limits\nax.set_xlim(0, 20)\n\n# Set the y-axis ticks\nax.set_yticks([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0])\n\n# Set the x-axis ticks\nax.set_xticks([0, 5, 10, 15, 20])\n\n# Set the y-axis tick labels\nax.set_yticklabels(['0.1', '0.2', '0.3', '0.4', '0.5', '0.6', '0.7', '0.8', '0.9', '1.0'])\n\n# Set the x-axis tick labels\nax.set_xticklabels(['0', '5', '10', '15', '20'])\n\n# Set the y-axis grid lines\nax.grid(axis='y')\n\n# Set the x-axis grid lines\nax.grid(axis='x')\n\n# Set the y-axis tick color\nax.tick_params(axis='y', colors='red')\n\n# Set the x-axis tick color\nax.tick_params(axis='x', colors='green')\n\n# Set the y-axis tick label color\nax.tick_params(axis='y', labelcolor='blue')\n\n# Set the x-axis tick label color\nax.tick_params(axis='x', labelcolor='purple')\n\n# Set the y-axis tick label font size\nax.tick_params(axis='y', labelsize=12)\n\n# Set the x-axis tick label font size\nax.tick_params(axis='x', labelsize=12)\n\n# Set the y-axis tick label font weight\nax.tick_params(axis='y', labelweight='bold')\n\n# Set the x-axis tick label font weight\nax.tick_params(axis='x', labelweight='bold')\n\n# Set the y-axis tick label font style\nax.tick_params(axis='y', labelstyle='italic')\n\n# Set the x-axis tick label font style\nax.tick_params(axis='x', labelstyle='italic')\n\n# Set the y-axis tick label rotation\nax.tick_params(axis='y', labelrotation=45)\n\n# Set the x-axis tick label rotation\nax.tick_params(axis='x', labelrotation=45)\n\n# Set the y-axis tick label horizontal alignment\nax.tick_params(axis='y', labelha='right')\n\n# Set the x-axis tick label horizontal alignment\nax.tick_params(axis='x', labelha='left')\n\n# Set the y-axis tick label vertical alignment\nax.tick_params(axis='y', labelva='top')\n\n# Set the x-axis tick label vertical alignment\nax.tick_params(axis='x', labelva='bottom')\n\n# Set the y-axis tick label background color\nax.tick_params(axis='y', labelbackgroundcolor='yellow')\n\n# Set the x-axis tick label background color\nax.tick_params(axis='x', labelbackgroundcolor='cyan')\n\n# Set the y-axis tick label border color\nax.tick_params(axis='y', labelbordercolor='magenta')\n\n# Set the x-axis tick label border color\nax.tick_params(axis='x', labelbordercolor='black')\n\n# Set the y-axis tick label border width\nax.tick_params(axis='y', labelborderwidth=2)\n\n# Set the x-axis tick label border width\nax.tick_params(axis='x', labelborderwidth=2)\n\n# Set the y-axis tick label border style\nax.tick_params(axis='y', labelborderstyle='dashed')\n\n# Set the x-axis tick label border style\nax.tick_params(axis='x', labelborderstyle='dotted')\n\n# Set the y-axis tick label border capstyle\nax.tick_params(axis='y', labelbordercapstyle='round')\n\n# Set the x-axis tick label border capstyle\nax.tick_params(axis='x', labelbordercapstyle='butt')\n\n# Set the y-axis tick label border joinstyle\nax.tick_params(axis='y', labelborderjoinstyle='round')\n\n# Set the x-axis tick label border joinstyle\nax.tick_params(axis='x', labelborderjoinstyle='bevel')\n\n# Set the y-axis tick label border miterlimit\nax.tick_params(axis='y', labelbordermiterlimit=5)\n\n# Set the x-axis tick label border miterlimit\nax.tick_params(axis='x', labelbordermiterlimit=5)\n\n# Set the y-axis tick label border antialiased\nax.tick_params(axis='y', labelantialiased=True)\n\n# Set the x-axis tick label border antialiased\nax.tick_params(axis='x', labelantialiased=True)\n\n# Set the y-axis tick label border zorder\nax.tick_params(axis='y', labelzorder=10)\n\n# Set the x-axis tick label border zorder\nax.tick_params(axis='x', labelzorder=10)\n\n# Set the y-axis tick label border transform\nax.tick_params(axis='y', labeltransform=ax.transAxes)\n\n# Set the x-axis tick label border transform\nax.tick_params(axis='x', labeltransform=ax.transAxes)\n\n# Set the y-axis tick label border path\nax.tick_params(axis='y', labelpath=ax.transAxes)\n\n# Set the x-axis tick label border path\nax.tick_params(axis='x', labelpath=ax.transAxes)\n\n# Set the y-axis tick label border path vertices\nax.tick_params(axis='y', labelpathvertices=[0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0])\n\n# Set the x-axis tick label border path vertices\nax.tick_params(axis='x', labelpathvertices=[0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0])\n\n# Set the y-axis tick label border path codes\nax.tick_params(axis='y', labelpathcodes=[Path.MOVETO, Path.LINETO, Path.LINETO, Path.LINETO, Path.LINETO, Path.LINETO, Path.LINETO, Path.LINETO, Path.LINETO, Path.CLOSEPOLY])\n\n# Set the x-axis tick label border path codes\nax.tick_params(axis='x', labelpathcodes=[Path.MOVETO, Path.LINETO, Path.LINETO, Path.LINETO, Path.LINETO, Path.LINETO, Path.LINETO, Path.LINETO, Path.LINETO, Path.CLOSEPOLY])\n\n# Set the y-axis tick label border path closed\nax.tick_params(axis='y', labelpathclosed=True)\n\n# Set the x-axis tick label border path closed\nax.tick_params(axis='x', labelpathclosed=True)\n\n# Set the y-axis tick label border path fill\nax.tick_params(axis='y', labelpathfill='blue')\n\n# Set the x-axis tick label border path fill\nax.tick_params(axis='x', labelpathfill='red')\n\n# Set the y-axis tick label border path hatch\nax.tick_params(axis='y', labelpathhatch='*')\n\n# Set the x-axis tick label border path hatch\nax.tick_params(axis='x', labelpathhatch='o')\n\n# Set the y-axis tick label border path antialiased\nax.tick_params(axis='y', labelpathantialiased=True)\n\n# Set the x-axis tick label border path antialiased\nax.tick_params(axis='x', labelpathantialiased=True)\n\n# Set the y-axis tick label border path zorder\nax.tick_params(axis='y', labelpathzorder=10)\n\n# Set the x-axis tick label border path zorder\nax.tick_params(axis='x', labelpathzorder=10)\n\n# Set the y-axis tick label border path transform\nax.tick_params(axis='y', labelpathtransform=ax.transAxes)\n\n# Set the x-axis tick label border path transform\nax.tick_params(axis='x', labelpathtransform=ax.transAxes)\n\n# Set the y-axis tick label border path path\nax.tick_params(axis='y', labelpathpath=ax.transAxes)\n\n# Set the x-axis tick label border path path\nax.tick_params(axis='x', labelpathpath=ax.transAxes)\n\n# Set the y-axis tick label border path path vertices\nax.tick_params(axis='y', labelpathpathvertices=[0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0])\n\n# Set the x-axis tick label border path path vertices\nax.tick_params(axis='x', labelpathpathvertices=[0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0])\n\n# Set the y-axis tick label border path path codes\nax.tick_params(axis='y', labelpathpathcodes=[Path.MOVETO, Path.LINETO, Path.LINETO, Path.LINETO, Path.LINETO, Path.LINETO, Path.LINETO, Path.LINETO, Path.LINETO, Path.CLOSEPOLY])\n\n# Set the x-axis tick label border path path codes\nax.tick_params(axis='x', labelpathpathcodes=[Path.MOVETO, Path.LINETO, Path.LINETO, Path.LINETO, Path.LINETO, Path.LINETO, Path.LINETO, Path.LINETO, Path.LINETO, Path.CLOSEPOLY])\n\n# Set the y-axis tick label border path path closed\nax.tick_params(axis='y', labelpathpathclosed=True)\n\n# Set the x-axis tick label border path path closed\nax.tick_params(axis='x', labelpathpathclosed=True)\n\n# Set the y-axis tick label border path path fill\nax.tick_params(axis='y', labelpathpathfill='blue')\n\n# Set the x-axis tick label border path path fill\nax.tick_params(axis='x', labelpathpathfill='red')\n\n# Set the y-axis tick label border path path hatch\nax.tick_params(axis='y', labelpathpathhatch='*')\n\n# Set the x-axis tick label border path path hatch\nax.tick_params(axis='x', labelpathpathhatch='o')\n\n# Set the y-axis tick label border path path antialiased\nax.tick_params(axis='y', labelpathpathantialiased=True)\n\n# Set the x-axis tick label border path path antialiased\nax.tick_params(axis='x', labelpathpathantialiased=True)\n\n# Set the y-axis tick label border path path zorder\nax.tick_params(axis='y', labelpathpathzorder=10)\n\n# Set the x-axis tick label border path path zorder\nax.tick_params(axis='x', labelpathpathzorder=10)\n\n# Set the y-axis tick label border path path transform\nax.tick_params(axis='y', labelpathpathtransform=ax.transAxes)\n\n# Set the x-axis tick label border path path transform\nax.tick_params(axis='x', labelpathpathtransform=ax.transAxes)\n\n# Set the y-axis tick label border path path path\nax.tick_params(axis='y', labelpathpathpath=ax.transAxes)\n\n# Set the x-axis tick label border path path path\nax.tick_params(axis='x', labelpathpathpath=ax.transAxes)\n\n# Set the y-axis tick label border path path path vertices\nax.tick_params(axis='y', labelpathpathpathvertices=[0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0])\n\n# Set the x-axis tick label border path path path vertices\nax.tick_params(axis='x', labelpathpathpathvertices=[0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0])\n\n# Set the y-axis tick label border path path path codes\nax.tick_params(axis='y', labelpathpathpathcodes=[Path.MOVETO, Path.LINETO, Path.LINETO, Path.LINETO, Path.LINETO, Path.LINETO, Path.LINETO, Path.LINETO, Path.LINETO, Path.CLOSEPOLY])\n\n# Set the x-axis tick label border path path path codes\nax.tick_params(axis='x', labelpathpathpathcodes=[Path.MOVETO, Path.LINETO, Path.LINETO, Path.LINETO, Path.LINETO, Path.LINETO, Path.LINETO, Path.LINETO, Path.LINETO, Path.CLOSEPOLY])\n\n# Set the y-axis tick label border path path path closed\nax.tick_params(axis='y', labelpathpathpathclosed=True)\n\n# Set the x-axis tick label border path path path closed\nax.tick_params(axis='x', labelpathpathpathclosed=True)\n\n# Set the y-axis tick label border path path path fill\nax.tick_params(axis='y', labelpathpathpathfill='blue')\n\n# Set the x-axis tick label border path path path fill\nax.tick_params(axis='x', labelpathpathpathfill='red')\n\n# Set the y-axis tick label border path path path hatch\nax.tick_params(axis='y', labelpathpathpathhatch='*')\n\n# Set the x-axis tick label border path path path hatch\nax.tick_params(axis='x', labelpathpathpathhatch='o')\n\n# Set the y-axis tick label border path path path antialiased\nax.tick_params(axis='y', labelpathpathpathantialiased=True)\n\n# Set the x-axis tick label border path path path antialiased\nax.tick_params(axis='x', labelpathpathpathantialiased=True)\n\n# Set the y-axis tick label border path path path zorder\nax.tick_params(axis='y', labelpathpathpathzorder=10)\n\n# Set the x-axis tick label border path path path zorder\nax.tick_params(axis='x', labelpathpathpathzorder=10)\n\n# Set the y-axis tick label border path path path transform\nax.tick_params(axis='y', labelpathpathpathtransform=ax.transAxes)\n\n# Set the x-axis tick label border path path path transform\nax.tick_params(axis='x', labelpathpathpathtransform=ax.transAxes)\n\n# Set the y-axis tick label border path path path path\nax.tick_params(axis='y', labelpathpathpathpath=ax.transAxes)\n\n# Set the x-axis tick label border path path path path\nax.tick_params(axis='x', labelpathpathpathpath=ax.transAxes)\n\n# Set the y-axis tick label border path path path path vertices\nax.tick_params(axis='y', labelpathpathpathpathvertices=[0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0])\n\n# Set the x-axis tick label border path path path path vertices\nax.tick_params(axis='x', labelpathpathpathpathvertices=[0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0])\n\n# Set the y-axis tick label border path path path path codes\nax.tick_params(axis='y', labelpathpathpathpathcodes=[Path.MOVETO, Path.LINETO, Path.LINETO, Path.LINETO, Path.LINETO, Path.LINETO, Path.LINETO, Path.LINETO, Path.LINETO, Path.CLOSEPOLY])\n\n# Set the x-axis tick label border path path path path codes\nax.tick_params(axis='x', labelpathpathpathpathcodes=[Path.MOVETO, Path.LINETO, Path.LINETO, Path.LINETO, Path.LINETO, Path.LINETO, Path.LINETO, Path.LINETO, Path.LINETO, Path.CLOSEPOLY])\n\n# Set the y-axis tick label border path path path path closed\nax.tick_params(axis='y', labelpathpathpathpathclosed=True)\n\n# Set the x-axis tick label border path path path path closed\nax.tick_params(axis='x', labelpathpathpathpathclosed=True)\n\n# Set the y-axis tick label border path path path path fill\nax.tick_params(axis='y', labelpathpathpathpathfill='blue')\n\n# Set the x-axis tick label border path path path path fill\nax.tick_params(axis='x', labelpathpathpathpathfill='red')\n\n# Set the y-axis tick label border path path path path hatch\nax.tick_params(axis='y', labelpathpathpathpathhatch='*')\n\n# Set the x-axis tick label border path path path path hatch\nax.tick_params(axis='x', labelpathpathpathpathhatch='o')\n\n# Set the y-axis tick label border path path path path antialiased\nax.tick_params(axis='y', labelpathpathpathpathantialiased=True)\n\n# Set the x-axis tick label border path path path path antialiased\nax.tick_params(axis='x', labelpathpathpathpathantialiased=True)\n\n# Set the y-axis tick label border path path path path zorder\nax.tick_params(axis='y', labelpathpathpathpathzorder=10)\n\n# Set the x-axis tick label border path path path path zorder\nax.tick_params(axis='x', labelpathpathpathpath"}
{"file": "dataset/ori_500/line_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nteams = ['All', 'MLP', 'GCN', 'NCN', 'NEC', 'SEAL', 'Node2Vec']\nhits = [80, 75, 70, 65, 60, 55, 50]\ngoals = [85, 80, 75, 70, 65, 60, 55]\n\n# Plot\nfig, ax = plt.subplots(figsize=(10, 5))\nax.plot(teams, hits, label='Hits')\nax.plot(teams, goals, label='Goals')\n\n# Legend\nlegend = ax.legend(loc='upper center', shadow=True, fontsize='x-large')\n\n# Teams\nfor i, team in enumerate(teams):\n    ax.text(i, hits[i], team, ha='center', va='bottom')\n\n# Annotations\nfor i, hit in enumerate(hits):\n    ax.annotate(hit, (i, hit), textcoords=\"offset points\", xytext=(0,10), ha='center')\n\n# Colors\nax.set_facecolor('#f0f0f0')\nax.spines['top'].set_color('none')\nax.spines['right'].set_color('none')\nax.xaxis.set_ticks_position('bottom')\nax.yaxis.set_ticks_position('left')\n\n# Labels\nax.set_xlabel('Teams')\nax.set_ylabel('Hits@50')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/line_30.pdf", "response": "import matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Set the title of the plot\nax.set_title('Android')\n\n# Create a line plot with the data\nax.plot([2, 4, 6, 8, 10, 12], [0.05, 0.05, 0.05, 0.05, 0.05, 0.05], 'bo-')\nax.plot([2, 4, 6, 8, 10, 12], [0.045, 0.045, 0.045, 0.045, 0.045, 0.045], 'ro-')\nax.plot([2, 4, 6, 8, 10, 12], [0.04, 0.04, 0.04, 0.04, 0.04, 0.04], 'go-')\nax.plot([2, 4, 6, 8, 10, 12], [0.035, 0.035, 0.035, 0.035, 0.035, 0.035], 'yo-')\nax.plot([2, 4, 6, 8, 10, 12], [0.03, 0.03, 0.03, 0.03, 0.03, 0.03], 'co-')\nax.plot([2, 4, 6, 8, 10, 12], [0.025, 0.025, 0.025, 0.025, 0.025, 0.025], 'mo-')\n\n# Set the x-axis label\nax.set_xlabel('Layer')\n\n# Set the y-axis label\nax.set_ylabel('Value')\n\n# Set the x-ticks\nax.set_xticks([2, 4, 6, 8, 10, 12])\n\n# Set the y-ticks\nax.set_yticks([0.025, 0.03, 0.035, 0.04, 0.045, 0.05])\n\n# Set the legend\nax.legend(['outside-code-diff', 'inside-code-diff'])\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/line_31.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the x-axis limits\nax.set_xlim(6, 9)\n\n# Set the y-axis limits\nax.set_ylim(0.3, 10)\n\n# Set the x-axis label\nax.set_xlabel('Digit Length')\n\n# Set the y-axis label\nax.set_ylabel('Digit Accuracy')\n\n# Plot the data\nax.plot([6, 7, 8, 9], [0.5, 0.7, 0.8, 0.9], 'b-')\nax.plot([6, 7, 8, 9], [0.4, 0.6, 0.7, 0.8], 'g-')\nax.plot([6, 7, 8, 9], [0.3, 0.5, 0.6, 0.7], 'r-')\nax.plot([6, 7, 8, 9], [0.2, 0.4, 0.5, 0.6], 'y-')\nax.plot([6, 7, 8, 9], [0.1, 0.3, 0.4, 0.5], 'm-')\nax.plot([6, 7, 8, 9], [0.0, 0.2, 0.3, 0.4], 'c-')\n\n# Add a legend\nax.legend(['Direct (100 samples)', 'RFFT (100 samples)', 'Scratchpad (100 samples)', 'Red (5000 samples)', 'Orange (50000 samples)', 'Yellow (500000 samples)'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_32.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('CIFAR100 States Zero Shot Accuracy')\n\n# Set the x-axis label\nax.set_xlabel('Decomposition IO Norm')\n\n# Set the y-axis label\nax.set_ylabel('Accuracy')\n\n# Set the x-axis limits\nax.set_xlim(0, 80)\n\n# Set the y-axis limits\nax.set_ylim(0.2, 0.4)\n\n# Set the x-axis ticks\nax.set_xticks([0, 20, 40, 60, 80])\n\n# Set the y-axis ticks\nax.set_yticks([0.2, 0.3, 0.4])\n\n# Draw a horizontal line at y=0.35\nax.axhline(y=0.35, color='black', linestyle='-')\n\n# Draw a vertical line at x=40\nax.axvline(x=40, color='black', linestyle='-')\n\n# Draw a rectangle\nrect = plt.Rectangle((0, 0), 10, 10, color='orange')\nax.add_patch(rect)\n\n# Draw a circle\ncircle = plt.Circle((50, 50), 10, color='red')\nax.add_artist(circle)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_33.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nx = [20, 40, 60, 80, 100]\ny1 = [0.55, 0.65, 0.75, 0.85, 0.95]\ny2 = [0.50, 0.60, 0.70, 0.80, 0.90]\ny3 = [0.45, 0.55, 0.65, 0.75, 0.85]\ny4 = [0.40, 0.50, 0.60, 0.70, 0.80]\ny5 = [0.35, 0.45, 0.55, 0.65, 0.75]\ny6 = [0.30, 0.40, 0.50, 0.60, 0.70]\n\n# Create the plot\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\nax.plot(x, y1, 'r-', label='CNN')\nax.plot(x, y2, 'g-', label='CNN+HMM')\nax.plot(x, y3, 'b-', label='RF')\nax.plot(x, y4, 'c-', label='RF+HMM')\nax.plot(x, y5, 'm-', label='CNN+HMM')\nax.plot(x, y6, 'k-', label='RF+HMM')\n\n# Add markers for each point\nfor i in range(len(x)):\n    ax.plot(x[i], y1[i], 'ro')\n    ax.plot(x[i], y2[i], 'go')\n    ax.plot(x[i], y3[i], 'bo')\n    ax.plot(x[i], y4[i], 'co')\n    ax.plot(x[i], y5[i], 'mo')\n    ax.plot(x[i], y6[i], 'ko')\n\n# Add labels and title\nax.set_xlabel('No. of Users in Development Set')\nax.set_ylabel('F1')\nax.set_title('Performance of Different Models')\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_34.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nx = [2, 3, 4, 5, 6, 7, 8]\ny1 = [27.44, 24.75, 23.38, 22.77, 22.32, 21.47, 21.51]\ny2 = [6.74, 4.54, 3.96, 3.71, 3.49, 3.34, 3.14]\n\n# Plot\nfig, ax = plt.subplots(figsize=(8.0, 7.0))\nax.plot(x, y1, 'r-', label='WER (%)')\nax.plot(x, y2, 'b-', label='AMR WER (%)')\n\n# Markers\nfor i, j in zip(x, y1):\n    ax.annotate('\u25b3', xy=(i, j), xytext=(i+0.5, j-0.5),\n                arrowprops=dict(facecolor='black', shrink=0.05))\n\nfor i, j in zip(x, y2):\n    ax.annotate('\u25cf', xy=(i, j), xytext=(i+0.5, j-0.5),\n                arrowprops=dict(facecolor='black', shrink=0.05))\n\n# Legend\nax.legend()\n\n# Title and labels\nax.set_title('WER and AMR WER over time')\nax.set_xlabel('Number of microphones')\nax.set_ylabel('WER (%)')\n\n# Grid\nax.grid(True)\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_35.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the plot\nx = [10**-7, 10**-6, 10**-5, 10**-4, 10**-3, 10**-2, 10**-1, 1]\ny = [1, 1.5, 2, 2.5, 3, 3.5, 4, 4.5]\n\n# Create the plot\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\nax.plot(x, y, 'b-')\n\n# Add the title and labels\nax.set_title('Quantization error')\nax.set_xlabel('Time (s)')\nax.set_ylabel('Error')\n\n# Add the rectangles\nrectangles = [\n    plt.Rectangle((10**-7, 1), 10**-6, 1, color='orange'),\n    plt.Rectangle((10**-6, 1), 10**-5, 1, color='green'),\n    plt.Rectangle((10**-5, 1), 10**-4, 1, color='purple'),\n    plt.Rectangle((10**-4, 1), 10**-3, 1, color='blue'),\n    plt.Rectangle((10**-3, 1), 10**-2, 1, color='red'),\n    plt.Rectangle((10**-2, 1), 10**-1, 1, color='pink'),\n    plt.Rectangle((10**-1, 1), 1, 1, color='cyan'),\n    plt.Rectangle((1, 1), 10**-1, 1, color='magenta')\n]\nfor rect in rectangles:\n    ax.add_patch(rect)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_36.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(15, 5))\n\n# Create a rectangle for the logo\nlogo = plt.Rectangle((0.05, 0.8), 0.1, 0.1, color='blue')\nax.add_patch(logo)\n\n# Create a rectangle for the performance graph\nperformance_graph = plt.Rectangle((0.05, 0.2), 0.9, 0.6, color='orange', alpha=0.3)\nax.add_patch(performance_graph)\n\n# Create a rectangle for the ratio graph\nratio_graph = plt.Rectangle((0.05, 0.2), 0.9, 0.6, color='purple', alpha=0.3)\nax.add_patch(ratio_graph)\n\n# Create a rectangle for the PNA + ours graph\npna_ours_graph = plt.Rectangle((0.05, 0.2), 0.9, 0.6, color='red', alpha=0.3)\nax.add_patch(pna_ours_graph)\n\n# Create a rectangle for the GIN + ours graph\ngin_ours_graph = plt.Rectangle((0.05, 0.2), 0.9, 0.6, color='green', alpha=0.3)\nax.add_patch(gin_ours_graph)\n\n# Set the x-axis and y-axis limits\nax.set_xlim([0.1, 1.0])\nax.set_ylim([0.4, 1.0])\n\n# Set the x-axis and y-axis labels\nax.set_xlabel('Ratio r')\nax.set_ylabel('Performance')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_37.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 5.0))\n\n# Set the x-axis limits\nax.set_xlim(6, 30)\n\n# Set the y-axis limits\nax.set_ylim(74.5, 78.0)\n\n# Set the x-axis label\nax.set_xlabel('Ensemble Size')\n\n# Set the y-axis label\nax.set_ylabel('Accuracy')\n\n# Set the title of the plot\nax.set_title('Model Accuracy vs Ensemble Size')\n\n# Plot the data\nax.plot([6, 9, 12, 15, 18, 21, 24, 27, 30], [74.5, 75.0, 75.5, 76.0, 76.5, 77.0, 77.5, 77.5, 78.0], color='blue')\nax.fill_between([6, 9, 12, 15, 18, 21, 24, 27, 30], [74.5, 75.0, 75.5, 76.0, 76.5, 77.0, 77.5, 77.5, 78.0], color='lightblue')\nax.fill_between([6, 9, 12, 15, 18, 21, 24, 27, 30], [74.5, 75.0, 75.5, 76.0, 76.5, 77.0, 77.5, 77.5, 78.0], color='lightgreen')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_38.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nepochs = [3, 5, 10, 30, 70, 100]\ngpt_neo = [0.8, 0.7, 0.6, 0.5, 0.4, 0.3]\ngpt_3 = [0.7, 0.6, 0.5, 0.4, 0.3, 0.2]\ngpt_10 = [0.9, 0.8, 0.7, 0.6, 0.5, 0.4]\ngpt_30 = [0.8, 0.7, 0.6, 0.5, 0.4, 0.3]\n\n# Plot\nfig, ax = plt.subplots(figsize=(6.0, 3.0))\nax.plot(epochs, gpt_neo, 'r-', label='GPT-Neo')\nax.plot(epochs, gpt_3, 'b-', label='GPT-3')\nax.plot(epochs, gpt_10, 'g-', label='GPT-10')\nax.plot(epochs, gpt_30, 'y-', label='GPT-30')\n\n# Legend\nax.legend()\n\n# X-axis\nax.set_xlabel('Number of Epochs')\n\n# Y-axis\nax.set_ylabel('Loss')\n\n# Title\nax.set_title('Training Loss over Epochs')\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_39.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\nx = [96, 192, 336, 512, 720]\ny1 = [0.12, 0.14, 0.16, 0.18, 0.20]\ny2 = [0.10, 0.12, 0.14, 0.16, 0.18]\ny3 = [0.08, 0.10, 0.12, 0.14, 0.16]\ny4 = [0.06, 0.08, 0.10, 0.12, 0.14]\ny5 = [0.04, 0.06, 0.08, 0.10, 0.12]\ny6 = [0.02, 0.04, 0.06, 0.08, 0.10]\n\n# Create a figure and a set of subplots\nfig, axs = plt.subplots(3, 2, figsize=(15.0, 4.0))\n\n# Plot the data\naxs[0, 0].plot(x, y1, 'r-')\naxs[0, 0].set_title('Traffic')\naxs[0, 0].scatter(x, y1, c='r', marker='*')\n\naxs[0, 1].plot(x, y2, 'o-')\naxs[0, 1].set_title('ETMm2')\naxs[0, 1].scatter(x, y2, c='o', marker='*')\n\naxs[1, 0].plot(x, y3, 'g-')\naxs[1, 0].set_title('MSF')\naxs[1, 0].scatter(x, y3, c='g', marker='*')\n\naxs[1, 1].plot(x, y4, 'b-')\naxs[1, 1].set_title('ETTh2')\naxs[1, 1].scatter(x, y4, c='b', marker='*')\n\naxs[2, 0].plot(x, y5, 'c-')\naxs[2, 0].set_title('ECL')\naxs[2, 0].scatter(x, y5, c='c', marker='*')\n\naxs[2, 1].plot(x, y6, 'm-')\naxs[2, 1].set_title('MSE')\naxs[2, 1].scatter(x, y6, c='m', marker='*')\n\n# Set the x-axis labels\nfor ax in axs.flat:\n    ax.set_xlabel('pred_length')\n    ax.set_ylabel('value')\n\n# Adjust the layout\nfig.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for Serial (n=8, m=1)\nserial_data = [75, 65, 55, 45, 35, 25, 15]\nserial_dates = ['224', '232', '240', '248', '256', '264', '272']\n\n# Data for Parallel (n=2, m=4)\nparallel_data = [85, 75, 65, 55, 45, 35, 25]\nparallel_dates = ['224', '232', '240', '248', '256', '264', '272']\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(9.0, 4.0))\n\n# Plot the data\nax.plot(serial_dates, serial_data, color='orange')\nax.plot(parallel_dates, parallel_data, color='blue')\n\n# Add labels and title\nax.set_xlabel('Date')\nax.set_ylabel('Top-1 Acc.')\nax.set_title('Serial (n=8, m=1) vs Parallel (n=2, m=4)')\n\n# Add rectangles for images\nax.add_patch(plt.Rectangle((224, 70), 10, 10, color='orange'))\nax.add_patch(plt.Rectangle((232, 60), 10, 10, color='orange'))\nax.add_patch(plt.Rectangle((240, 50), 10, 10, color='orange'))\nax.add_patch(plt.Rectangle((248, 40), 10, 10, color='orange'))\nax.add_patch(plt.Rectangle((256, 30), 10, 10, color='orange'))\nax.add_patch(plt.Rectangle((264, 20), 10, 10, color='orange'))\nax.add_patch(plt.Rectangle((272, 10), 10, 10, color='orange'))\n\n# Add text for images\nax.text(224, 75, 'ImageNet-1k', color='white')\nax.text(232, 65, 'ImageNet-C/P (Fog)', color='white')\n\n# Add rectangles for images\nax.add_patch(plt.Rectangle((224, 80), 10, 10, color='blue'))\nax.add_patch(plt.Rectangle((232, 70), 10, 10, color='blue'))\nax.add_patch(plt.Rectangle((240, 60), 10, 10, color='blue'))\nax.add_patch(plt.Rectangle((248, 50), 10, 10, color='blue'))\nax.add_patch(plt.Rectangle((256, 40), 10, 10, color='blue'))\nax.add_patch(plt.Rectangle((264, 30), 10, 10, color='blue'))\nax.add_patch(plt.Rectangle((272, 20), 10, 10, color='blue'))\n\n# Add text for images\nax.text(224, 85, 'ImageNet-1k', color='white')\nax.text(232, 75, 'ImageNet-C/P (Fog)', color='white')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_40.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the x-axis limits\nax.set_xlim(5.0, 25.0)\n\n# Set the y-axis limits\nax.set_ylim(0.0, 100.0)\n\n# Set the x-axis ticks\nax.set_xticks([5.0, 7.5, 10.0, 12.5, 15.0, 17.5, 20.0, 22.5, 25.0])\n\n# Set the y-axis ticks\nax.set_yticks([0.0, 20.0, 40.0, 60.0, 80.0, 100.0])\n\n# Set the x-axis label\nax.set_xlabel('SNR')\n\n# Set the y-axis label\nax.set_ylabel('Classification Accuracy (%)')\n\n# Add a rectangle for the logo\nlogo = plt.Rectangle((23.0, 95.0), 2.0, 5.0, color='red')\nax.add_patch(logo)\n\n# Add a rectangle for the model name\nmodel_name = plt.Rectangle((23.0, 90.0), 2.0, 5.0, color='blue')\nax.add_patch(model_name)\n\n# Add a rectangle for the model description\nmodel_description = plt.Rectangle((23.0, 85.0), 2.0, 5.0, color='green')\nax.add_patch(model_description)\n\n# Add a rectangle for the model performance\nmodel_performance = plt.Rectangle((23.0, 80.0), 2.0, 5.0, color='orange')\nax.add_patch(model_performance)\n\n# Add a rectangle for the model accuracy\nmodel_accuracy = plt.Rectangle((23.0, 75.0), 2.0, 5.0, color='yellow')\nax.add_patch(model_accuracy)\n\n# Add a rectangle for the model precision\nmodel_precision = plt.Rectangle((23.0, 70.0), 2.0, 5.0, color='pink')\nax.add_patch(model_precision)\n\n# Add a rectangle for the model recall\nmodel_recall = plt.Rectangle((23.0, 65.0), 2.0, 5.0, color='cyan')\nax.add_patch(model_recall)\n\n# Add a rectangle for the model f1-score\nmodel_f1_score = plt.Rectangle((23.0, 60.0), 2.0, 5.0, color='magenta')\nax.add_patch(model_f1_score)\n\n# Add a rectangle for the model auc-roc\nmodel_auc_roc = plt.Rectangle((23.0, 55.0), 2.0, 5.0, color='brown')\nax.add_patch(model_auc_roc)\n\n# Add a rectangle for the model log-loss\nmodel_log_loss = plt.Rectangle((23.0, 50.0), 2.0, 5.0, color='gray')\nax.add_patch(model_log_loss)\n\n# Add a rectangle for the model r-squared\nmodel_r_squared = plt.Rectangle((23.0, 45.0), 2.0, 5.0, color='silver')\nax.add_patch(model_r_squared)\n\n# Add a rectangle for the model mean absolute error\nmodel_mean_absolute_error = plt.Rectangle((23.0, 40.0), 2.0, 5.0, color='gold')\nax.add_patch(model_mean_absolute_error)\n\n# Add a rectangle for the model mean squared error\nmodel_mean_squared_error = plt.Rectangle((23.0, 35.0), 2.0, 5.0, color='lime')\nax.add_patch(model_mean_squared_error)\n\n# Add a rectangle for the model mean squared log error\nmodel_mean_squared_log_error = plt.Rectangle((23.0, 30.0), 2.0, 5.0, color='purple')\nax.add_patch(model_mean_squared_log_error)\n\n# Add a rectangle for the model median absolute error\nmodel_median_absolute_error = plt.Rectangle((23.0, 25.0), 2.0, 5.0, color='black')\nax.add_patch(model_median_absolute_error)\n\n# Add a rectangle for the model max error\nmodel_max_error = plt.Rectangle((23.0, 20.0), 2.0, 5.0, color='white')\nax.add_patch(model_max_error)\n\n# Add a rectangle for the model explained variance score\nmodel_explained_variance_score = plt.Rectangle((23.0, 15.0), 2.0, 5.0, color='navy')\nax.add_patch(model_explained_variance_score)\n\n# Add a rectangle for the model mean poisson deviance\nmodel_mean_poisson_deviance = plt.Rectangle((23.0, 10.0), 2.0, 5.0, color='maroon')\nax.add_patch(model_mean_poisson_deviance)\n\n# Add a rectangle for the model mean gamma deviance\nmodel_mean_gamma_deviance = plt.Rectangle((23.0, 5.0), 2.0, 5.0, color='olive')\nax.add_patch(model_mean_gamma_deviance)\n\n# Add a rectangle for the model mean tie break\nmodel_mean_tie_break = plt.Rectangle((23.0, 0.0), 2.0, 5.0, color='silver')\nax.add_patch(model_mean_tie_break)\n\n# Add a rectangle for the model mean tie break\nmodel_mean_tie_break = plt.Rectangle((23.0, 0.0), 2.0, 5.0, color='silver')\nax.add_patch(model_mean_tie_break)\n\n# Add a rectangle for the model mean tie break\nmodel_mean_tie_break = plt.Rectangle((23.0, 0.0), 2.0, 5.0, color='silver')\nax.add_patch(model_mean_tie_break)\n\n# Add a rectangle for the model mean tie break\nmodel_mean_tie_break = plt.Rectangle((23.0, 0.0), 2.0, 5.0, color='silver')\nax.add_patch(model_mean_tie_break)\n\n# Add a rectangle for the model mean tie break\nmodel_mean_tie_break = plt.Rectangle((23.0, 0.0), 2.0, 5.0, color='silver')\nax.add_patch(model_mean_tie_break)\n\n# Add a rectangle for the model mean tie break\nmodel_mean_tie_break = plt.Rectangle((23.0, 0.0), 2.0, 5.0, color='silver')\nax.add_patch(model_mean_tie_break)\n\n# Add a rectangle for the model mean tie break\nmodel_mean_tie_break = plt.Rectangle((23.0, 0.0), 2.0, 5.0, color='silver')\nax.add_patch(model_mean_tie_break)\n\n# Add a rectangle for the model mean tie break\nmodel_mean_tie_break = plt.Rectangle((23.0, 0.0), 2.0, 5.0, color='silver')\nax.add_patch(model_mean_tie_break)\n\n# Add a rectangle for the model mean tie break\nmodel_mean_tie_break = plt.Rectangle((23.0, 0.0), 2.0, 5.0, color='silver')\nax.add_patch(model_mean_tie_break)\n\n# Add a rectangle for the model mean tie break\nmodel_mean_tie_break = plt.Rectangle((23.0, 0.0), 2.0, 5.0, color='silver')\nax.add_patch(model_mean_tie_break)\n\n# Add a rectangle for the model mean tie break\nmodel_mean_tie_break = plt.Rectangle((23.0, 0.0), 2.0, 5.0, color='silver')\nax.add_patch(model_mean_tie_break)\n\n# Add a rectangle for the model mean tie break\nmodel_mean_tie_break = plt.Rectangle((23.0, 0.0), 2.0, 5.0, color='silver')\nax.add_patch(model_mean_tie_break)\n\n# Add a rectangle for the model mean tie break\nmodel_mean_tie_break = plt.Rectangle((23.0, 0.0), 2.0, 5.0, color='silver')\nax.add_patch(model_mean_tie_break)\n\n# Add a rectangle for the model mean tie break\nmodel_mean_tie_break = plt.Rectangle((23.0, 0.0), 2.0, 5.0, color='silver')\nax.add_patch(model_mean_tie_break)\n\n# Add a rectangle for the model mean tie break\nmodel_mean_tie_break = plt.Rectangle((23.0, 0.0), 2.0, 5.0, color='silver')\nax.add_patch(model_mean_tie_break)\n\n# Add a rectangle for the model mean tie break\nmodel_mean_tie_break = plt.Rectangle((23.0, 0.0), 2.0, 5.0, color='silver')\nax.add_patch(model_mean_tie_break)\n\n# Add a rectangle for the model mean tie break\nmodel_mean_tie_break = plt.Rectangle((23.0, 0.0), 2.0, 5.0, color='silver')\nax.add_patch(model_mean_tie_break)\n\n# Add a rectangle for the model mean tie break\nmodel_mean_tie_break = plt.Rectangle((23.0, 0.0), 2.0, 5.0, color='silver')\nax.add_patch(model_mean_tie_break)\n\n# Add a rectangle for the model mean tie break\nmodel_mean_tie_break = plt.Rectangle((23.0, 0.0), 2.0, 5.0, color='silver')\nax.add_patch(model_mean_tie_break)\n\n# Add a rectangle for the model mean tie break\nmodel_mean_tie_break = plt.Rectangle((23.0, 0.0), 2.0, 5.0, color='silver')\nax.add_patch(model_mean_tie_break)\n\n# Add a rectangle for the model mean tie break\nmodel_mean_tie_break = plt.Rectangle((23.0, 0.0), 2.0, 5.0, color='silver')\nax.add_patch(model_mean_tie_break)\n\n# Add a rectangle for the model mean tie break\nmodel_mean_tie_break = plt.Rectangle((23.0, 0.0), 2.0, 5.0, color='silver')\nax.add_patch(model_mean_tie_break)\n\n# Add a rectangle for the model mean tie break\nmodel_mean_tie_break = plt.Rectangle((23.0, 0.0), 2.0, 5.0, color='silver')\nax.add_patch(model_mean_tie_break)\n\n# Add a rectangle for the model mean tie break\nmodel_mean_tie_break = plt.Rectangle((23.0, 0.0), 2.0, 5.0, color='silver')\nax.add_patch(model_mean_tie_break)\n\n# Add a rectangle for the model mean tie break\nmodel_mean_tie_break = plt.Rectangle((23.0, 0.0), 2.0, 5.0, color='silver')\nax.add_patch(model_mean_tie_break)\n\n# Add a rectangle for the model mean tie break\nmodel_mean_tie_break = plt.Rectangle((23.0, 0.0), 2.0, 5.0, color='silver')\nax.add_patch(model_mean_tie_break)\n\n# Add a rectangle for the model mean tie break\nmodel_mean_tie_break = plt.Rectangle((23.0, 0.0), 2.0, 5.0, color='silver')\nax.add_patch(model_mean_tie_break)\n\n# Add a rectangle for the model mean tie break\nmodel_mean_tie_break = plt.Rectangle((23.0, 0.0), 2.0, 5.0, color='silver')\nax.add_patch(model_mean_tie_break)\n\n# Add a rectangle for the model mean tie break\nmodel_mean_tie_break = plt.Rectangle((23.0, 0.0), 2.0, 5.0, color='silver')\nax.add_patch(model_mean_tie_break)\n\n# Add a rectangle for the model mean tie break\nmodel_mean_tie_break = plt.Rectangle((23.0, 0.0), 2.0, 5.0, color='silver')\nax.add_patch(model_mean_tie_break)\n\n# Add a rectangle for the model mean tie break\nmodel_mean_tie_break = plt.Rectangle((23.0, 0.0), 2.0, 5.0, color='silver')\nax.add_patch(model_mean_tie_break)\n\n# Add a rectangle for the model mean tie break\nmodel_mean_tie_break = plt.Rectangle((23.0, 0.0), 2.0, 5.0, color='silver')\nax.add_patch(model_mean_tie_break)\n\n# Add a rectangle for the model mean tie break\nmodel_mean_tie_break = plt.Rectangle((23.0, 0.0), 2.0, 5.0, color='silver')\nax.add_patch(model_mean_tie_break)\n\n# Add a rectangle for the model mean tie break\nmodel_mean_tie_break = plt.Rectangle((23.0, 0.0), 2.0, 5.0, color='silver')\nax.add_patch(model_mean_tie_break)\n\n# Add a rectangle for the model mean tie break\nmodel_mean_tie_break = plt.Rectangle((23.0, 0.0), 2.0, 5.0, color='silver')\nax.add_patch(model_mean_tie_break)\n\n# Add a rectangle for the model mean tie break\nmodel_mean_tie_break = plt.Rectangle((23.0, 0.0), 2.0, 5.0, color='silver')\nax.add_patch(model_mean_tie_break)\n\n# Add a rectangle for the model mean tie break\nmodel_mean_tie_break = plt.Rectangle((23.0, 0.0), 2.0, 5.0, color='silver')\nax.add_patch(model_mean_tie_break)\n\n# Add a rectangle for the model mean tie break\nmodel_mean_tie_break = plt.Rectangle((23.0, 0.0), 2.0, 5.0, color='silver')\nax.add_patch(model_mean_tie_break)\n\n# Add a rectangle for the model mean tie break\nmodel_mean_tie_break = plt.Rectangle((23.0, 0.0), 2.0, 5.0, color='silver')\nax.add_patch(model_mean_tie_break)\n\n# Add a rectangle for the model mean tie break\nmodel_mean_tie_break = plt.Rectangle((23.0, 0.0), 2.0, 5.0, color='silver')\nax.add_patch(model_mean_tie_break)\n\n# Add a rectangle for the model mean tie break\nmodel_mean_tie_break = plt.Rectangle((23.0, 0.0), 2.0, 5.0, color='silver')\nax.add_patch(model_mean_tie_break)\n\n# Add a rectangle for the model mean tie break\nmodel_mean_tie_break = plt.Rectangle((23.0, 0.0), 2.0, 5.0, color='silver')\nax.add_patch(model_mean_tie_break)\n\n# Add a rectangle for the model mean tie break\nmodel_mean_tie_break = plt.Rectangle((23.0, 0.0), 2.0, 5.0, color='silver')\nax.add_patch(model_mean_tie_break)\n\n# Add a rectangle for the model mean tie break\nmodel_mean_tie_break = plt.Rectangle((23.0, 0.0), 2.0, 5.0, color='silver')\nax.add_patch(model_mean_tie_break)\n\n# Add a rectangle for the model mean tie break\nmodel_mean_tie_break = plt.Rectangle((23.0, 0.0), 2.0, 5.0, color='silver')\nax.add_patch(model_mean_tie_break)\n\n# Add a rectangle for the model mean tie break\nmodel_mean_tie_break = plt.Rectangle((23.0, 0.0), 2.0, 5.0, color='silver')\nax.add_patch(model_mean_tie_break)\n\n# Add a rectangle for the model mean tie break\nmodel_mean_tie_break = plt.Rectangle((23.0, 0.0), 2.0, 5.0, color='silver')\nax.add_patch(model_mean_tie_break)\n\n# Add a rectangle for the model mean tie break\nmodel_mean_tie_break = plt.Rectangle((23.0, 0.0), 2.0, 5.0, color='silver')\nax.add_patch(model_mean_tie_break)\n\n# Add a rectangle for the model mean tie break\nmodel_mean_tie_break = plt.Rectangle((23.0, 0.0), 2.0, 5.0, color='silver')\nax.add_patch(model_mean_tie_break)\n\n# Add a rectangle for the model mean tie break\nmodel_mean_tie_break = plt.Rectangle((23.0, 0.0), 2.0, 5.0, color='silver')\nax.add_patch(model_mean_tie_break)\n\n# Add a rectangle for the model mean tie break\nmodel_mean_tie_break = plt.Rectangle((23.0, 0.0), 2.0, 5.0, color='silver')\nax.add_patch(model_mean_tie_break)\n\n# Add a rectangle for the model mean tie break\nmodel_mean_tie_break = plt.Rectangle((23.0, 0.0), 2.0, 5.0, color='silver')\nax.add_patch(model_mean_tie_break)\n\n# Add a rectangle for the model mean tie break\nmodel_mean_tie_break = plt.Rectangle((23.0, 0.0), 2.0, 5.0, color='silver')\nax.add_patch(model_mean_tie_break)\n\n# Add a rectangle for the model mean tie break\nmodel_mean_tie_break = plt.Rectangle((23.0, 0.0), 2.0, 5.0, color='silver')\nax.add_patch(model_mean_tie_break)\n\n# Add a rectangle for the model mean tie break\nmodel_mean_tie_break = plt.Rectangle((23.0, 0.0), 2.0, 5.0, color='silver')\nax.add_patch(model_mean_tie_break)\n\n# Add a rectangle for the model mean"}
{"file": "dataset/ori_500/line_41.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(6.0, 8.0))\n\n# Set the title of the plot\nax.set_title('Performance Metrics')\n\n# Set the x-axis label\nax.set_xlabel('Gradient Steps (x62.5K)')\n\n# Set the y-axis label\nax.set_ylabel('Performance Value')\n\n# Set the x-axis limits\nax.set_xlim(0, 200)\n\n# Set the y-axis limits\nax.set_ylim(0, 7)\n\n# Plot the data\nax.plot([0, 100, 200], [1, 2, 3], 'r-')\nax.plot([0, 50, 100, 150, 200], [1, 2, 3, 4, 5], 'g-')\nax.plot([0, 25, 50, 75, 100, 125, 150, 175, 200], [1, 2, 3, 4, 5, 6, 7, 8, 9], 'b-')\nax.plot([0, 25, 50, 75, 100, 125, 150, 175, 200], [1, 2, 3, 4, 5, 6, 7, 8, 9], 'm-')\n\n# Add grid lines\nax.grid(True)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_42.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Define the data\nx = np.linspace(0, 200, 100)\ny1 = np.sin(x / 10)\ny2 = np.cos(x / 10)\ny3 = np.tan(x / 10)\n\n# Plot the data\nax.plot(x, y1, 'o-', label='Line 1')\nax.plot(x, y2, 's-', label='Line 2')\nax.plot(x, y3, '^-', label='Line 3')\n\n# Add labels and title\nax.set_xlabel('Gradient Steps (x 62.5K)')\nax.set_ylabel('Polynomial Value')\nax.set_title('Polynomial Trend Analysis')\n\n# Add legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_43.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(12, 5))\n\n# Set the title of the graph\nax.set_title('ogbl-collab Results')\n\n# Create a list of labels for the x-axis\nx_labels = ['All', 'MLP', 'GCN', 'NCN', 'Node2Vec']\n\n# Create a list of y-values for the graph\ny_values = [75, 70, 65, 60, 55]\n\n# Create a bar chart with the data\nax.bar(x_labels, y_values, color='blue')\n\n# Add a legend to the graph\nax.legend(['ogbl-collab 2022', 'ogbl-collab 2023'])\n\n# Display the graph\nplt.show()\n```"}
{"file": "dataset/ori_500/line_44.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Set the grid lines\nax.grid(True)\n\n# Set the x-axis and y-axis limits\nax.set_xlim(10, 60)\nax.set_ylim(10**-14, 10**-12)\n\n# Set the x-axis and y-axis labels\nax.set_xlabel('N')\nax.set_ylabel('Precision')\n\n# Plot the data\nax.plot([10, 20, 30, 40, 50, 60], [10**-12, 10**-12, 10**-12, 10**-12, 10**-12, 10**-12], 'b-')\nax.plot([10, 20, 30, 40, 50, 60], [10**-12, 10**-12, 10**-12, 10**-12, 10**-12, 10**-12], 'r-')\nax.plot([10, 20, 30, 40, 50, 60], [10**-12, 10**-12, 10**-12, 10**-12, 10**-12, 10**-12], 'g-')\nax.plot([10, 20, 30, 40, 50, 60], [10**-12, 10**-12, 10**-12, 10**-12, 10**-12, 10**-12], 'm-')\n\n# Add a legend\nax.legend(['Standard', 'Constrained', 'Experimental', 'Hypothetical'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_45.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis for the first graph\nfig1, ax1 = plt.subplots(figsize=(12, 8))\nax1.plot([1, 2, 3, 4, 5], [1, 2, 3, 4, 5], 'b-')\nax1.set_title('Graph Variation 1')\nax1.set_xlabel('N')\nax1.set_ylabel('Peak Performance')\n\n# Create a figure and axis for the second graph\nfig2, ax2 = plt.subplots(figsize=(12, 8))\nax2.plot([1, 2, 3, 4, 5], [1, 2, 3, 4, 5], 'r-')\nax2.set_title('Graph Variation 2')\nax2.set_xlabel('N')\nax2.set_ylabel('Peak Performance')\n\n# Create a figure and axis for the third graph\nfig3, ax3 = plt.subplots(figsize=(12, 8))\nax3.plot([1, 2, 3, 4, 5], [1, 2, 3, 4, 5], 'g-')\nax3.set_title('Graph Variation 3')\nax3.set_xlabel('N')\nax3.set_ylabel('Peak Performance')\n\n# Create a figure and axis for the fourth graph\nfig4, ax4 = plt.subplots(figsize=(12, 8))\nax4.plot([1, 2, 3, 4, 5], [1, 2, 3, 4, 5], 'y-')\nax4.set_title('Graph Variation 4')\nax4.set_xlabel('N')\nax4.set_ylabel('Peak Performance')\n\n# Display the plots\nplt.show()\n```"}
{"file": "dataset/ori_500/line_46.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfig, ax = plt.subplots(figsize=(6.0, 10.0))\nax.plot([0, 5, 10, 15, 20, 25], [1.5, 1.0, 0.5, 0.0, -0.5, -1.0], 'b-')\nax.set_title('Daytime Activity Monitoring')\nax.set_xlabel('Time (Hours)')\nax.set_ylabel('Activity Level')\n\nfig, ax = plt.subplots(figsize=(6.0, 10.0))\nax.plot([0, 5, 10, 15, 20, 25], [1.5, 1.0, 0.5, 0.0, -0.5, -1.0], 'r-')\nax.set_title('Nighttime Activity Monitoring')\nax.set_xlabel('Time (Hours)')\nax.set_ylabel('Activity Level')\nplt.show()\n```"}
{"file": "dataset/ori_500/line_47.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Comparative Performance Analysis Over Time')\n\n# Create a color bar for the legend\ncbar = fig.colorbar(ax.imshow(np.random.rand(10, 10), cmap='Blues'))\n\n# Set the x-axis label\nax.set_xlabel('Time (Months)')\n\n# Set the y-axis label\nax.set_ylabel('Performance Index')\n\n# Set the x-ticks\nax.set_xticks([0, 2, 4, 6, 8, 10, 12])\n\n# Set the y-ticks\nax.set_yticks([0, 2, 4, 6, 8, 10])\n\n# Set the x-tick labels\nax.set_xticklabels(['0', '2', '4', '6', '8', '10', '12'])\n\n# Set the y-tick labels\nax.set_yticklabels(['0', '2', '4', '6', '8', '10'])\n\n# Set the color map\ncmap = plt.get_cmap('Blues')\n\n# Create a rectangle patch for the legend\nrect = plt.Rectangle((0, 0), 1, 1, color=cmap(0.5))\n\n# Add the rectangle to the legend\nax.legend([rect], ['Standard Performance'], loc='upper right')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_48.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Set the title of the plot\nax.set_title('Sales and Temperature Correlation Over a Year')\n\n# Create a line graph with two lines\nax.plot([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [1000, 1100, 1200, 1300, 1400, 1500, 1600, 1700, 1800, 1900, 2000, 2100], color='blue')\nax.plot([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [1200, 1300, 1400, 1500, 1600, 1700, 1800, 1900, 2000, 2100, 2200, 2300], color='red')\n\n# Add markers for each month\nfor i in range(1, 13):\n    ax.plot(i, 1000 + 100 * i, 'ro')  # red circle marker\n\n# Set the x-axis label\nax.set_xlabel('Month')\n\n# Set the y-axis label\nax.set_ylabel('Sales')\n\n# Set the y-axis limits\nax.set_ylim(800, 2400)\n\n# Set the x-axis limits\nax.set_xlim(0, 13)\n\n# Set the tick labels\nax.set_xticks(range(1, 13))\nax.set_yticks(range(800, 2500, 200))\n\n# Set the tick label rotation\nax.set_xticklabels(['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'], rotation=45)\n\n# Set the grid\nax.grid(True)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_49.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for each graph\ngrowth_data = [1.3, 1.2, 1.1, 1.0, 0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1]\ndecay_data = [1.3, 1.2, 1.1, 1.0, 0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1]\noscillation_data = [1.3, 1.2, 1.1, 1.0, 0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1]\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(6.0, 9.0))\n\n# Plot the data\nax.plot(growth_data, label='Growth')\nax.plot(decay_data, label='Decay', color='red')\nax.plot(oscillation_data, label='Oscillation', color='blue')\n\n# Set the title and labels\nax.set_title('Exponential Growth Over Time')\nax.set_xlabel('Time')\nax.set_ylabel('Value')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Define the data\nx = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ny1 = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0]\ny2 = [0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1]\ny3 = [0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2]\ny4 = [0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3]\ny5 = [0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3, 1.4]\ny6 = [0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3, 1.4, 1.5]\n\n# Plot the data\nax.plot(x, y1, 'b-', label='5-shot direct')\nax.plot(x, y2, 'o-', label='5-shot scratchpad')\nax.plot(x, y3, 'g-', label='5-shot rule-following')\n\n# Set the labels and title\nax.set_xlabel('Digit Length')\nax.set_ylabel('Accuracy')\nax.set_title('Shot Accuracy by Digit Length')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_50.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(5.0, 10.0))\n\n# Set the title of the plot\nax.set_title('Smoothed Representation')\n\n# Create a line plot with the data\nax.plot([2, 4, 6, 8, 10, 12, 14, 16, 18], [0.3, 0.2, 0.1, 0.2, 0.3, 0.2, 0.1, 0.2, 0.3], 'p-', color='purple', label='Smoothed Data')\n\n# Add a legend to the plot\nax.legend()\n\n# Set the x-axis and y-axis limits\nax.set_xlim(0, 20)\nax.set_ylim(-1, 1)\n\n# Create a second subplot\nax2 = fig.add_subplot(212)\n\n# Set the title of the second subplot\nax2.set_title('First Difference of Data')\n\n# Create a line plot with the data\nax2.plot([2, 4, 6, 8, 10, 12, 14, 16, 18], [100, 90, 80, 70, 60, 50, 40, 30, 20], 'x-', color='orange', label='Difference Data')\n\n# Add a legend to the second subplot\nax2.legend()\n\n# Set the x-axis and y-axis limits for the second subplot\nax2.set_xlim(0, 20)\nax2.set_ylim(-10, 110)\n\n# Create a third subplot\nax3 = fig.add_subplot(213)\n\n# Set the title of the third subplot\nax3.set_title('Cumulative Sum Over Time')\n\n# Create a line plot with the data\nax3.plot([2, 4, 6, 8, 10, 12, 14, 16, 18], [2.5, 2.0, 1.5, 1.0, 0.5, 0.0, -0.5, -1.0, -1.5], 'o-', color='green', label='Cumulative Sum')\n\n# Add a legend to the third subplot\nax3.legend()\n\n# Set the x-axis and y-axis limits for the third subplot\nax3.set_xlim(0, 20)\nax3.set_ylim(-2, 3)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_51.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Time data\ntime = np.linspace(0, 10, 100)\n\n# Sin Wave\nsin_wave = np.sin(time)\nplt.figure(figsize=(6, 3))\nplt.plot(time, sin_wave, 'm-', label='Sin Wave')\nplt.title('Sinoidal Pattern')\nplt.xlabel('Time')\nplt.ylabel('Amplitude')\nplt.legend()\nplt.show()\n\n# Cos Wave\ncos_wave = np.cos(time)\nplt.figure(figsize=(6, 3))\nplt.plot(time, cos_wave, 'g-', label='Cos Wave')\nplt.title('Cosine Pattern')\nplt.xlabel('Time')\nplt.ylabel('Amplitude')\nplt.legend()\nplt.show()\n\n# Exp Decay\nexp_decay = np.exp(-time/5)\nplt.figure(figsize=(6, 3))\nplt.plot(time, exp_decay, 'b-', label='Exp Decay')\nplt.title('Exponential Decay')\nplt.xlabel('Time')\nplt.ylabel('Value')\nplt.legend()\nplt.show()\n\n# Log Growth\nlog_growth = np.log(time + 1)\nplt.figure(figsize=(6, 3))\nplt.plot(time, log_growth, 'r-', label='Log Growth')\nplt.title('Logarithmic Growth')\nplt.xlabel('Time')\nplt.ylabel('Value')\nplt.legend()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_52.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(9.0, 6.0))\n\n# Plot the data\nax.plot([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0], [75, 76, 77, 78, 79, 80, 81, 82, 83, 84], 'b-')\nax.plot([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0], [75, 76, 77, 78, 79, 80, 81, 82, 83, 84], 'ro')\n\n# Set the title and labels\nax.set_title('Positive bound')\nax.set_xlabel('Time (s)')\nax.set_ylabel('Weight (kg)')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_53.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(12, 8))\n\n# Plot the data\nax.plot([0.1, 0.2, 0.3, 0.4], [75, 76, 79, 80], 'r-', label='Positive Bound')\nax.plot([0.1, 0.2, 0.3, 0.4], [78, 79, 82, 83], 'g-', label='Negative Bound')\nax.plot([0.1, 0.2, 0.3, 0.4], [75, 76, 79, 80], 'b-', label='Contrastive Loss Weight')\n\n# Add labels and title\nax.set_xlabel('Time (s)')\nax.set_ylabel('Score')\nax.set_title('Performance Metrics')\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_54.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(12, 4))\n\n# Create a list of styles\nstyles = ['Passive', 'Rail', 'Replay', 'Sportive']\n\n# Create a list of temperatures\ntemps = [1.2, 1.4, 1.6, 1.8]\n\n# Create a list of relaxation levels\nrelaxation_levels = [0.5, 0.7, 0.9, 1.1]\n\n# Create a list of colors\ncolors = ['red', 'blue', 'green', 'black']\n\n# Create a list of markers\nmarkers = ['o', 's', '^', 'D']\n\n# Create a list of labels\nlabels = ['Dry', 'Rain', 'Snow', 'Fog']\n\n# Create a list of images\nimages = ['dry.png', 'rain.png', 'snow.png', 'fog.png']\n\n# Create a list of sizes\nsizes = [100, 150, 200, 250]\n\n# Create a list of alphas\nalphas = [0.5, 0.7, 0.9, 1.1]\n\n# Create a list of line styles\nlinestyles = ['-', '--', '-.', ':']\n\n# Create a list of line widths\nlinewidths = [1, 2, 3, 4]\n\n# Create a list of line markers\nlinemarkers = ['o', 's', '^', 'D']\n\n# Create a list of line marker sizes\nlinemarkersizes = [10, 15, 20, 25]\n\n# Create a list of line marker edge colors\nlinemarkeredgecolors = ['r', 'g', 'b', 'k']\n\n# Create a list of line marker face colors\nlinemarkerfacecolors = ['w', 'w', 'w', 'w']\n\n# Create a list of line marker hatch patterns\nlinehatch = ['/', '\\\\', '|', '-']\n\n# Create a list of line marker antialiased values\nlineantialiased = [True, True, True, True]\n\n# Create a list of line marker join styles\nlinejoinstyle = ['miter', 'round', 'bevel', 'miter']\n\n# Create a list of line marker cap styles\nlinecapstyle = ['butt', 'round', 'projecting', 'butt']\n\n# Create a list of line marker solid cap styles\nlinesolidcapstyle = ['butt', 'round', 'projecting', 'butt']\n\n# Create a list of line marker dash cap styles\nlinedashcapstyle = ['butt', 'round', 'projecting', 'butt']\n\n# Create a list of line marker dash join styles\nlinedashjoinstyle = ['miter', 'round', 'bevel', 'miter']\n\n# Create a list of line marker dash cap styles\nlinedashcapstyle = ['butt', 'round', 'projecting', 'butt']\n\n# Create a list of line marker dash join styles\nlinedashjoinstyle = ['miter', 'round', 'bevel', 'miter']\n\n# Create a list of line marker dash cap styles\nlinedashcapstyle = ['butt', 'round', 'projecting', 'butt']\n\n# Create a list of line marker dash join styles\nlinedashjoinstyle = ['miter', 'round', 'bevel', 'miter']\n\n# Create a list of line marker dash cap styles\nlinedashcapstyle = ['butt', 'round', 'projecting', 'butt']\n\n# Create a list of line marker dash join styles\nlinedashjoinstyle = ['miter', 'round', 'bevel', 'miter']\n\n# Create a list of line marker dash cap styles\nlinedashcapstyle = ['butt', 'round', 'projecting', 'butt']\n\n# Create a list of line marker dash join styles\nlinedashjoinstyle = ['miter', 'round', 'bevel', 'miter']\n\n# Create a list of line marker dash cap styles\nlinedashcapstyle = ['butt', 'round', 'projecting', 'butt']\n\n# Create a list of line marker dash join styles\nlinedashjoinstyle = ['miter', 'round', 'bevel', 'miter']\n\n# Create a list of line marker dash cap styles\nlinedashcapstyle = ['butt', 'round', 'projecting', 'butt']\n\n# Create a list of line marker dash join styles\nlinedashjoinstyle = ['miter', 'round', 'bevel', 'miter']\n\n# Create a list of line marker dash cap styles\nlinedashcapstyle = ['butt', 'round', 'projecting', 'butt']\n\n# Create a list of line marker dash join styles\nlinedashjoinstyle = ['miter', 'round', 'bevel', 'miter']\n\n# Create a list of line marker dash cap styles\nlinedashcapstyle = ['butt', 'round', 'projecting', 'butt']\n\n# Create a list of line marker dash join styles\nlinedashjoinstyle = ['miter', 'round', 'bevel', 'miter']\n\n# Create a list of line marker dash cap styles\nlinedashcapstyle = ['butt', 'round', 'projecting', 'butt']\n\n# Create a list of line marker dash join styles\nlinedashjoinstyle = ['miter', 'round', 'bevel', 'miter']\n\n# Create a list of line marker dash cap styles\nlinedashcapstyle = ['butt', 'round', 'projecting', 'butt']\n\n# Create a list of line marker dash join styles\nlinedashjoinstyle = ['miter', 'round', 'bevel', 'miter']\n\n# Create a list of line marker dash cap styles\nlinedashcapstyle = ['butt', 'round', 'projecting', 'butt']\n\n# Create a list of line marker dash join styles\nlinedashjoinstyle = ['miter', 'round', 'bevel', 'miter']\n\n# Create a list of line marker dash cap styles\nlinedashcapstyle = ['butt', 'round', 'projecting', 'butt']\n\n# Create a list of line marker dash join styles\nlinedashjoinstyle = ['miter', 'round', 'bevel', 'miter']\n\n# Create a list of line marker dash cap styles\nlinedashcapstyle = ['butt', 'round', 'projecting', 'butt']\n\n# Create a list of line marker dash join styles\nlinedashjoinstyle = ['miter', 'round', 'bevel', 'miter']\n\n# Create a list of line marker dash cap styles\nlinedashcapstyle = ['butt', 'round', 'projecting', 'butt']\n\n# Create a list of line marker dash join styles\nlinedashjoinstyle = ['miter', 'round', 'bevel', 'miter']\n\n# Create a list of line marker dash cap styles\nlinedashcapstyle = ['butt', 'round', 'projecting', 'butt']\n\n# Create a list of line marker dash join styles\nlinedashjoinstyle = ['miter', 'round', 'bevel', 'miter']\n\n# Create a list of line marker dash cap styles\nlinedashcapstyle = ['butt', 'round', 'projecting', 'butt']\n\n# Create a list of line marker dash join styles\nlinedashjoinstyle = ['miter', 'round', 'bevel', 'miter']\n\n# Create a list of line marker dash cap styles\nlinedashcapstyle = ['butt', 'round', 'projecting', 'butt']\n\n# Create a list of line marker dash join styles\nlinedashjoinstyle = ['miter', 'round', 'bevel', 'miter']\n\n# Create a list of line marker dash cap styles\nlinedashcapstyle = ['butt', 'round', 'projecting', 'butt']\n\n# Create a list of line marker dash join styles\nlinedashjoinstyle = ['miter', 'round', 'bevel', 'miter']\n\n# Create a list of line marker dash cap styles\nlinedashcapstyle = ['butt', 'round', 'projecting', 'butt']\n\n# Create a list of line marker dash join styles\nlinedashjoinstyle = ['miter', 'round', 'bevel', 'miter']\n\n# Create a list of line marker dash cap styles\nlinedashcapstyle = ['butt', 'round', 'projecting', 'butt']\n\n# Create a list of line marker dash join styles\nlinedashjoinstyle = ['miter', 'round', 'bevel', 'miter']\n\n# Create a list of line marker dash cap styles\nlinedashcapstyle = ['butt', 'round', 'projecting', 'butt']\n\n# Create a list of line marker dash join styles\nlinedashjoinstyle = ['miter', 'round', 'bevel', 'miter']\n\n# Create a list of line marker dash cap styles\nlinedashcapstyle = ['butt', 'round', 'projecting', 'butt']\n\n# Create a list of line marker dash join styles\nlinedashjoinstyle = ['miter', 'round', 'bevel', 'miter']\n\n# Create a list of line marker dash cap styles\nlinedashcapstyle = ['butt', 'round', 'projecting', 'butt']\n\n# Create a list of line marker dash join styles\nlinedashjoinstyle = ['miter', 'round', 'bevel', 'miter']\n\n# Create a list of line marker dash cap styles\nlinedashcapstyle = ['butt', 'round', 'projecting', 'butt']\n\n# Create a list of line marker dash join styles\nlinedashjoinstyle = ['miter', 'round', 'bevel', 'miter']\n\n# Create a list of line marker dash cap styles\nlinedashcapstyle = ['butt', 'round', 'projecting', 'butt']\n\n# Create a list of line marker dash join styles\nlinedashjoinstyle = ['miter', 'round', 'bevel', 'miter']\n\n# Create a list of line marker dash cap styles\nlinedashcapstyle = ['butt', 'round', 'projecting', 'butt']\n\n# Create a list of line marker dash join styles\nlinedashjoinstyle = ['miter', 'round', 'bevel', 'miter']\n\n# Create a list of line marker dash cap styles\nlinedashcapstyle = ['butt', 'round', 'projecting', 'butt']\n\n# Create a list of line marker dash join styles\nlinedashjoinstyle = ['miter', 'round', 'bevel', 'miter']\n\n# Create a list of line marker dash cap styles\nlinedashcapstyle = ['butt', 'round', 'projecting', 'butt']\n\n# Create a list of line marker dash join styles\nlinedashjoinstyle = ['miter', 'round', 'bevel', 'miter']\n\n# Create a list of line marker dash cap styles\nlinedashcapstyle = ['butt', 'round', 'projecting', 'butt']\n\n# Create a list of line marker dash join styles\nlinedashjoinstyle = ['miter', 'round', 'bevel', 'miter']\n\n# Create a list of line marker dash cap styles\nlinedashcapstyle = ['butt', 'round', 'projecting', 'butt']\n\n# Create a list of line marker dash join styles\nlinedashjoinstyle = ['miter', 'round', 'bevel', 'miter']\n\n# Create a list of line marker dash cap styles\nlinedashcapstyle = ['butt', 'round', 'projecting', 'butt']\n\n# Create a list of line marker dash join styles\nlinedashjoinstyle = ['miter', 'round', 'bevel', 'miter']\n\n# Create a list of line marker dash cap styles\nlinedashcapstyle = ['butt', 'round', 'projecting', 'butt']\n\n# Create a list of line marker dash join styles\nlinedashjoinstyle = ['miter', 'round', 'bevel', 'miter']\n\n# Create a list of line marker dash cap styles\nlinedashcapstyle = ['butt', 'round', 'projecting', 'butt']\n\n# Create a list of line marker dash join styles\nlinedashjoinstyle = ['miter', 'round', 'bevel', 'miter']\n\n# Create a list of line marker dash cap styles\nlinedashcapstyle = ['butt', 'round', 'projecting', 'butt']\n\n# Create a list of line marker dash join styles\nlinedashjoinstyle = ['miter', 'round', 'bevel', 'miter']\n\n# Create a list of line marker dash cap styles\nlinedashcapstyle = ['butt', 'round', 'projecting', 'butt']\n\n# Create a list of line marker dash join styles\nlinedashjoinstyle = ['miter', 'round', 'bevel', 'miter']\n\n# Create a list of line marker dash cap styles\nlinedashcapstyle = ['butt', 'round', 'projecting', 'butt']\n\n# Create a list of line marker dash join styles\nlinedashjoinstyle = ['miter', 'round', 'bevel', 'miter']\n\n# Create a list of line marker dash cap styles\nlinedashcapstyle = ['butt', 'round', 'projecting', 'butt']\n\n# Create a list of line marker dash join styles\nlinedashjoinstyle = ['miter', 'round', 'bevel', 'miter']\n\n# Create a list of line marker dash cap styles\nlinedashcapstyle = ['butt', 'round', 'projecting', 'butt']\n\n# Create a list of line marker dash join styles\nlinedashjoinstyle = ['miter', 'round', 'bevel', 'miter']\n\n# Create a list of line marker dash cap styles\nlinedashcapstyle = ['butt', 'round', 'projecting', 'butt']\n\n# Create a list of line marker dash join styles\nlinedashjoinstyle = ['miter', 'round', 'bevel', 'miter']\n\n# Create a list of line marker dash cap styles\nlinedashcapstyle = ['butt', 'round', 'projecting', 'butt']\n\n# Create a list of line marker dash join styles\nlinedashjoinstyle = ['miter', 'round', 'bevel', 'miter']\n\n# Create a list of line marker dash cap styles\nlinedashcapstyle = ['butt', 'round', 'projecting', 'butt']\n\n# Create a list of line marker dash join styles\nlinedashjoinstyle = ['miter', 'round', 'bevel', 'miter']\n\n# Create a list of line marker dash cap styles\nlinedashcapstyle = ['butt', 'round', 'projecting', 'butt']\n\n# Create a list of line marker dash join styles\nlinedashjoinstyle = ['miter', 'round', 'bevel', 'miter']\n\n# Create a list of line marker dash cap styles\nlinedashcapstyle = ['butt', 'round', 'projecting', 'butt']\n\n# Create a list of line marker dash join styles\nlinedashjoinstyle = ['miter', 'round', 'bevel', 'miter']\n\n# Create a list of line marker dash cap styles\nlinedashcapstyle = ['butt', 'round', 'projecting', 'butt']\n\n# Create a list of line marker dash join styles\nlinedashjoinstyle = ['miter', 'round', 'bevel', 'miter']\n\n# Create a list of line marker dash cap styles\nlinedashcapstyle = ['butt', 'round', 'projecting', 'butt']\n\n# Create a list of line marker dash join styles\nlinedashjoinstyle = ['miter', 'round', 'bevel', 'miter']\n\n# Create a list of line marker dash cap styles\nlinedashcapstyle = ['butt', 'round', 'projecting', 'butt']\n\n# Create a list of line marker dash join styles\nlinedashjoinstyle = ['miter', 'round', 'bevel', 'miter']\n\n# Create a list of line marker dash cap styles\nlinedashcapstyle = ['butt', 'round', 'projecting', 'butt']\n\n# Create a list of line marker dash join styles\nlinedashjoinstyle = ['miter', 'round', 'bevel', 'miter']\n\n# Create a list of line marker dash cap styles\nlinedashcapstyle = ['butt', 'round', 'projecting', 'butt']\n\n# Create a list of line marker dash join styles\nlinedashjoinstyle = ['miter', 'round', 'bevel', 'miter']\n\n# Create a list of line marker dash cap styles\nlinedashcapstyle = ['butt', 'round', 'projecting', 'butt']\n\n# Create a list of line marker dash join styles\nlinedashjoinstyle = ['miter', 'round', 'bevel', 'miter']\n\n# Create a list of line marker dash cap styles\nlinedashcapstyle = ['butt', 'round', 'projecting', 'butt']\n\n# Create a list of line marker dash join styles\nlinedashjoinstyle = ['miter', 'round', 'bevel', 'miter']\n\n# Create a list of line marker dash cap styles\nlinedashcapstyle = ['butt', 'round', 'projecting', 'butt']\n\n# Create a list of line marker dash join styles\nlinedashjoinstyle = ['miter', 'round', 'bevel', 'miter']\n\n# Create a list of line marker dash cap styles\nlinedashcapstyle = ['butt', 'round', 'projecting', 'butt']\n\n# Create a list of line marker dash join styles\nlinedashjoinstyle = ['miter', 'round', 'bevel', 'miter']\n\n# Create a list of line marker dash cap styles\nlinedashcapstyle = ['butt', 'round', 'projecting', 'butt']\n\n# Create a list of line marker dash join styles\nlinedashjoinstyle = ['miter', 'round', 'bevel', 'miter']\n\n# Create a list of line marker dash cap styles\nlinedashcapstyle = ['butt', 'round', 'projecting', 'butt']\n\n# Create a list of line marker dash join styles\nlinedashjoinstyle = ['miter', 'round', 'bevel', 'miter']\n\n# Create a list of line marker dash cap styles\nlinedashcapstyle = ['butt', 'round', 'projecting', 'butt']\n\n# Create a list of line marker dash join styles\nlinedashjoinstyle = ['miter', 'round', 'bevel', 'miter']\n\n# Create a list of line marker dash cap styles\nlinedashcapstyle = ['butt', 'round', 'projecting', 'butt']\n\n# Create a list of line marker dash join styles\nlinedashjoinstyle = ['miter', 'round', 'bevel', 'miter']\n\n# Create a list of line marker dash cap styles\nlinedashcapstyle = ['butt', 'round', 'projecting', 'butt']\n\n# Create a list of line marker dash join styles\nlinedashjoinstyle = ['miter', 'round', 'bevel', 'miter']\n\n# Create a list of line marker dash cap styles\nlinedashcapstyle = ['butt', 'round', 'projecting', 'butt']\n\n# Create a list of line marker dash join styles\nlinedashjoinstyle = ['miter', 'round', 'bevel', 'miter']\n\n#"}
{"file": "dataset/ori_500/line_55.pdf", "response": "import matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 3.0))\n\n# Set the title of the plot\nax.set_title('Dynamic Performance Gain Across Different n_aug Levels')\n\n# Set the x-axis label\nax.set_xlabel('n_aug')\n\n# Set the y-axis label\nax.set_ylabel('Performance Gain (%)')\n\n# Create a list of dates\ndates = ['0', '1', '2', '3', '4', '5', '6', '7', '8']\n\n# Create a list of performance gain values\nperformance_gain = [2, 4, 6, 8, 7, 5, 3, 1, 0]\n\n# Create a list of content values\ncontent = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n# Create a list of organization values\norganization = [2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n# Create a list of language values\nlanguage = [3, 4, 5, 6, 7, 8, 9, 10, 11]\n\n# Plot the data\nax.plot(dates, performance_gain, color='blue')\nax.plot(dates, content, color='red')\nax.plot(dates, organization, color='green')\nax.plot(dates, language, color='purple')\n\n# Add markers to the plot\nfor i, j in enumerate(performance_gain):\n    ax.annotate(j, (i, j), textcoords=\"offset points\", xytext=(0,10), ha='center')\n\n# Add rectangles to the plot\nrects = ax.bar(range(len(content)), content, color='blue')\nfor rect in rects:\n    height = rect.get_height()\n    ax.annotate('Content', xy=(rect.get_x() + rect.get_width() / 2, height),\n                xytext=(0, 3),  # 3 points vertical offset\n                textcoords=\"offset points\",\n                ha='center', va='bottom')\n\n# Add rectangles to the plot\nrects = ax.bar(range(len(organization)), organization, color='red')\nfor rect in rects:\n    height = rect.get_height()\n    ax.annotate('Organization', xy=(rect.get_x() + rect.get_width() / 2, height),\n                xytext=(0, 3),  # 3 points vertical offset\n                textcoords=\"offset points\",\n                ha='center', va='bottom')\n\n# Add rectangles to the plot\nrects = ax.bar(range(len(language)), language, color='green')\nfor rect in rects:\n    height = rect.get_height()\n    ax.annotate('Language', xy=(rect.get_x() + rect.get_width() / 2, height),\n                xytext=(0, 3),  # 3 points vertical offset\n                textcoords=\"offset points\",\n                ha='center', va='bottom')\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/line_56.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and a set of subplots\nfig, axs = plt.subplots(1, 3, figsize=(9.0, 3.0))\n\n# Plot the first subplot\naxs[0].plot([0, 20, 40, 60, 80], [0.75, 0.75, 0.75, 0.75, 0.75], 'r-')\naxs[0].set_title('COCO 10K')\naxs[0].set_xlabel('Decomposition IO Norm')\naxs[0].set_ylabel('Accuracy')\naxs[0].text(0, 0.75, 'COCO (10k)', color='red')\n\n# Plot the second subplot\naxs[1].plot([0, 20, 40, 60, 80], [0.70, 0.70, 0.70, 0.70, 0.70], 'b-')\naxs[1].set_title('LAION 10K')\naxs[1].set_xlabel('Decomposition IO Norm')\naxs[1].set_ylabel('Accuracy')\naxs[1].text(0, 0.70, 'LAION (10k)', color='blue')\n\n# Plot the third subplot\naxs[2].plot([0, 20, 40, 60, 80], [0.75, 0.75, 0.75, 0.75, 0.75], 'g-')\naxs[2].set_title('COCO & LAION 5K')\naxs[2].set_xlabel('Decomposition IO Norm')\naxs[2].set_ylabel('Accuracy')\naxs[2].text(0, 0.75, 'COCO (5k)', color='green')\naxs[2].text(0, 0.70, 'LAION (5k)', color='orange')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_57.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(12.0, 9.0))\n\n# Set the x-axis limits\nax.set_xlim(0.025, 0.3)\n\n# Set the y-axis limits\nax.set_ylim(0.08, 0.9)\n\n# Set the x-axis ticks\nax.set_xticks([0.025, 0.05, 0.075, 0.1, 0.125, 0.15, 0.175, 0.2, 0.225, 0.25, 0.275, 0.3])\n\n# Set the y-axis ticks\nax.set_yticks([0.08, 0.1, 0.12, 0.14, 0.16, 0.18, 0.2, 0.22, 0.24, 0.26, 0.28, 0.3, 0.32, 0.34, 0.36, 0.38, 0.4, 0.42, 0.44, 0.46, 0.48, 0.5, 0.52, 0.54, 0.56, 0.58, 0.6, 0.62, 0.64, 0.66, 0.68, 0.7, 0.72, 0.74, 0.76, 0.78, 0.8, 0.82, 0.84, 0.86, 0.88, 0.9, 0.92, 0.94, 0.96, 0.98, 1.0])\n\n# Set the x-axis label\nax.set_xlabel('Parameter Rate')\n\n# Set the y-axis label\nax.set_ylabel('Metric Rate')\n\n# Set the title of the plot\nax.set_title('Error Rate vs. Learning Rate')\n\n# Plot the data\nax.plot([0.025, 0.05, 0.075, 0.1, 0.125, 0.15, 0.175, 0.2, 0.225, 0.25, 0.275, 0.3], [0.08, 0.1, 0.12, 0.14, 0.16, 0.18, 0.2, 0.22, 0.24, 0.26, 0.28, 0.3], 'b-')\nax.plot([0.025, 0.05, 0.075, 0.1, 0.125, 0.15, 0.175, 0.2, 0.225, 0.25, 0.275, 0.3], [0.08, 0.1, 0.12, 0.14, 0.16, 0.18, 0.2, 0.22, 0.24, 0.26, 0.28, 0.3], 'r-')\nax.plot([0.025, 0.05, 0.075, 0.1, 0.125, 0.15, 0.175, 0.2, 0.225, 0.25, 0.275, 0.3], [0.08, 0.1, 0.12, 0.14, 0.16, 0.18, 0.2, 0.22, 0.24, 0.26, 0.28, 0.3], 'g-')\nax.plot([0.025, 0.05, 0.075, 0.1, 0.125, 0.15, 0.175, 0.2, 0.225, 0.25, 0.275, 0.3], [0.08, 0.1, 0.12, 0.14, 0.16, 0.18, 0.2, 0.22, 0.24, 0.26, 0.28, 0.3], 'y-')\n\n# Add a legend\nax.legend(['Error Rate vs. Learning Rate (Batch Size=64)', 'Error Rate vs. Learning Rate (Batch Size=128)'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_58.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 4))\n\n# Plot the data\nax.plot([0, 25, 50, 75, 100, 125, 150, 175, 200], [0.6, 0.5, 0.4, 0.3, 0.2, 0.1, 0.05, 0.02, 0.01], 'b-')\nax.plot([0, 25, 50, 75, 100, 125, 150, 175, 200], [0.6, 0.5, 0.4, 0.3, 0.2, 0.1, 0.05, 0.02, 0.01], 'ro')\n\n# Set the title and labels\nax.set_title('Metric 1')\nax.set_xlabel('Training Iterations')\nax.set_ylabel('Metric Value')\n\n# Add a legend\nax.legend(['Base Model', 'Our Model'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_59.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(5.0, 3.0))\n\n# Set the title of the plot\nax.set_title('Accuracy')\n\n# Create a list of colors for the lines\ncolors = ['blue', 'cyan']\n\n# Create a list of labels for the lines\nlabels = ['Base Model', 'Our Model']\n\n# Create a list of x values\nx = [0, 25, 50, 75, 100, 125, 150, 175, 200]\n\n# Create a list of y values for each line\ny1 = [0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1, 0]\ny2 = [0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1, 0.05, 0.02]\n\n# Plot the lines\nax.plot(x, y1, color=colors[0], label=labels[0])\nax.plot(x, y2, color=colors[1], label=labels[1])\n\n# Add a legend to the plot\nax.legend()\n\n# Set the x-axis label\nax.set_xlabel('Training Iterations')\n\n# Set the y-axis label\nax.set_ylabel('Metric Value')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(9, 6))\n\n# Set the x-axis limits\nax.set_xlim(10**1, 10**10)\n\n# Set the y-axis limits\nax.set_ylim(10**-10, 10**-1)\n\n# Set the x-axis ticks\nax.set_xticks([10**1, 2*10**1, 3*10**1, 4*10**1, 5*10**1, 6*10**1])\n\n# Set the y-axis ticks\nax.set_yticks([10**-10, 10**-7, 10**-4, 10**-1])\n\n# Set the x-axis tick labels\nax.set_xticklabels(['10^1', '2*10^1', '3*10^1', '4*10^1', '5*10^1', '6*10^1'])\n\n# Set the y-axis tick labels\nax.set_yticklabels(['10^-10', '10^-7', '10^-4', '10^-1'])\n\n# Set the title of the plot\nax.set_title('Plot of f(x)')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('orange')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the plot line\nax.plot([10**1, 2*10**1, 3*10**1, 4*10**1, 5*10**1, 6*10**1], [10**-10, 10**-7, 10**-4, 10**-1, 10**-1, 10**-1], color='blue')\n\n# Set the color of the legend\nax.legend(['Standard', 'Constrained'], loc='upper left', bbox_to_anchor=(1,1), fancybox=True, shadow=True)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_60.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Performance and Efficiency Over Weeks')\n\n# Set the x-axis label\nax.set_xlabel('Weeks')\n\n# Set the y-axis label\nax.set_ylabel('Efficiency')\n\n# Set the x-axis limits\nax.set_xlim(0, 25)\n\n# Set the y-axis limits\nax.set_ylim(-1.5, 1.5)\n\n# Create a scatter plot with blue dots for performance\nax.scatter([0, 5, 10, 15, 20, 25], [1.2, 1.4, 1.3, 1.1, 1.0, 0.9], color='blue', label='Performance')\n\n# Create a scatter plot with red dots for efficiency\nax.scatter([0, 5, 10, 15, 20, 25], [0.8, 0.7, 0.6, 0.5, 0.4, 0.3], color='red', label='Efficiency')\n\n# Add a legend to the plot\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_61.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Set the title of the plot\nax.set_title('Performance and Efficiency Analysis')\n\n# Set the x-axis label\nax.set_xlabel('Weeks')\n\n# Set the y-axis label\nax.set_ylabel('Values')\n\n# Create a list of weeks\nweeks = np.arange(0, 30, 5)\n\n# Create a list of values for performance\nperformance_values = [0.2, 0.8, 1.2, 1.5, 1.7, 1.9, 2.1, 2.3, 2.5, 2.7, 2.9]\n\n# Create a list of values for efficiency\nefficiency_values = [0.1, 0.3, 0.5, 0.7, 0.9, 1.1, 1.3, 1.5, 1.7, 1.9, 2.1]\n\n# Plot the performance data\nax.plot(weeks, performance_values, 'b-', label='Performance')\n\n# Plot the efficiency data\nax.plot(weeks, efficiency_values, 'r-', label='Efficiency')\n\n# Add a legend to the plot\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_62.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Detailed Performance and Efficiency Analysis Over Weeks')\n\n# Set the x-axis label\nax.set_xlabel('Weeks')\n\n# Set the y-axis label\nax.set_ylabel('Efficiency')\n\n# Set the x-axis ticks\nax.set_xticks([0, 5, 10, 15, 20, 25, 30])\n\n# Set the y-axis ticks\nax.set_yticks([0, 0.2, 0.4, 0.6, 0.8, 1.0, 1.2])\n\n# Set the y-axis tick labels\nax.set_yticklabels(['0.0', '0.2', '0.4', '0.6', '0.8', '1.0', '1.2'])\n\n# Set the x-axis tick labels\nax.set_xticklabels(['0', '5', '10', '15', '20', '25', '30'])\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the background\nax.set_facecolor('#ADD8E6')\n\n# Set the color of the text\nax.set_color_cycle(['blue', 'red', 'green', 'yellow'])\n\n# Plot the data\nax.plot([0, 5, 10, 15, 20, 25, 30], [0.0, 0.2, 0.4, 0.6, 0.8, 1.0, 1.2], 'o-')\nax.plot([0, 5, 10, 15, 20, 25, 30], [0.0, 0.2, 0.4, 0.6, 0.8, 1.0, 1.2], 'x-')\nax.plot([0, 5, 10, 15, 20, 25, 30], [0.0, 0.2, 0.4, 0.6, 0.8, 1.0, 1.2], 'o-')\nax.plot([0, 5, 10, 15, 20, 25, 30], [0.0, 0.2, 0.4, 0.6, 0.8, 1.0, 1.2], 'x-')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_63.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(12.0, 8.0))\n\n# Set the background color of the plot\nax.set_facecolor('floralwhite')\n\n# Set the title of the plot\nax.set_title('Dynamic Data Presentation Across Weeks')\n\n# Set the x-axis label\nax.set_xlabel('Weeks')\n\n# Set the y-axis label\nax.set_ylabel('Normalized Value')\n\n# Set the x-axis ticks\nax.set_xticks([0, 5, 10, 15, 20, 25])\n\n# Set the y-axis ticks\nax.set_yticks([0, 0.2, 0.4, 0.6, 0.8, 1.0])\n\n# Set the grid lines\nax.grid(True)\n\n# Plot the data series\nax.plot([0, 5, 10, 15, 20, 25], [1.0, 0.8, 0.6, 0.4, 0.2, 0.0], 'b-')\nax.plot([0, 5, 10, 15, 20, 25], [0.8, 0.6, 0.4, 0.2, 0.0, 0.2], 'g-')\nax.plot([0, 5, 10, 15, 20, 25], [0.6, 0.4, 0.2, 0.0, 0.2, 0.4], 'r-')\nax.plot([0, 5, 10, 15, 20, 25], [0.4, 0.2, 0.0, 0.2, 0.4, 0.6], 'm-')\nax.plot([0, 5, 10, 15, 20, 25], [0.2, 0.0, 0.2, 0.4, 0.6, 0.8], 'c-')\nax.plot([0, 5, 10, 15, 20, 25], [0.0, 0.2, 0.4, 0.6, 0.8, 1.0], 'y-')\n\n# Add a legend\nax.legend(['Data Series 1', 'Data Series 2 with Gradient', 'Data Series 3'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_64.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nx = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ny1 = [90, 85, 80, 75, 70, 65, 60, 55, 50, 45]\ny2 = [85, 80, 75, 70, 65, 60, 55, 50, 45, 40]\ny3 = [80, 75, 70, 65, 60, 55, 50, 45, 40, 35]\ny4 = [75, 70, 65, 60, 55, 50, 45, 40, 35, 30]\ny5 = [70, 65, 60, 55, 50, 45, 40, 35, 30, 25]\ny6 = [65, 60, 55, 50, 45, 40, 35, 30, 25, 20]\n\n# Plot\nfig, ax = plt.subplots(figsize=(12.0, 6.0))\nax.plot(x, y1, 'b-', label='BaCE')\nax.plot(x, y2, 'c-', label='LWF')\nax.plot(x, y3, 'g-', label='EWC')\nax.plot(x, y4, 'm-', label='SEQ')\nax.plot(x, y5, 'y-', label='SEW')\nax.plot(x, y6, 'k-', label='SWE')\n\n# Legend\nax.legend()\n\n# Title and labels\nax.set_title('Average Accuracy (%)')\nax.set_xlabel('Task')\nax.set_ylabel('Accuracy')\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_65.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\nx = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ny1 = [80, 85, 90, 95, 92, 88, 85, 82, 79, 76]\ny2 = [70, 75, 80, 85, 82, 78, 75, 72, 69, 66]\ny3 = [60, 65, 70, 75, 72, 68, 65, 62, 59, 56]\ny4 = [50, 55, 60, 65, 62, 58, 55, 52, 49, 46]\n\n# Create a figure and a set of subplots\nfig, axs = plt.subplots(1, 2, figsize=(8.0, 3.0))\n\n# Plot the data on the first subplot\naxs[0].plot(x, y1, label='BaCE')\naxs[0].plot(x, y2, label='EWC')\naxs[0].set_title('Performance Comparison: BaCE vs EWC')\naxs[0].set_xlabel('Task')\naxs[0].set_ylabel('Performance (%)')\naxs[0].legend()\naxs[0].grid(True)\n\n# Plot the data on the second subplot\naxs[1].plot(x, y3, label='LWF', color='red')\naxs[1].plot(x, y4, label='SEQ', color='pink')\naxs[1].set_title('Performance Comparison: LWF vs SEQ')\naxs[1].set_xlabel('Task')\naxs[1].set_ylabel('Performance (%)')\naxs[1].legend()\naxs[1].grid(True)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_66.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(9.0, 7.0))\n\n# Set the title of the plot\nax.set_title('model1 Performance')\n\n# Set the x-axis label\nax.set_xlabel('Iterations')\n\n# Set the y-axis label\nax.set_ylabel('Success Rate')\n\n# Create a scatter plot with the data\nax.scatter([0, 250, 500, 750, 1000, 1250, 1500, 1750, 2000], [0.8, 0.6, 0.4, 0.2, 0.1, 0.3, 0.5, 0.7, 0.9])\n\n# Add a legend to the plot\nax.legend(['model1 Series 1', 'model1 Series 2'])\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_67.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(6.0, 5.0))\n\n# Set the title of the plot\nax.set_title('Microphone Sales Data')\n\n# Set the x-axis label\nax.set_xlabel('Number of microphones')\n\n# Set the y-axis label\nax.set_ylabel('Sales (in millions)')\n\n# Create a list of dates\ndates = ['2', '3', '4', '5', '6', '7', '8']\n\n# Create a list of sales data\nsales = [2.1, 2.9, 3.5, 4.2, 4.8, 5.3, 5.8]\n\n# Create a scatter plot\nax.scatter(dates, sales, color='blue')\n\n# Create a line plot\nax.plot(dates, sales, color='orange')\n\n# Add a watermark\nax.text(0.5, 0.5, 'Watermark', transform=ax.transAxes, fontsize=15,\n        verticalalignment='center', horizontalalignment='center',\n        color='red', alpha=0.5)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_68.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 7.0))\n\n# Set the title of the plot\nax.set_title('Trend Analysis')\n\n# Set the x-axis label\nax.set_xlabel('Number of microphones')\n\n# Set the y-axis label\nax.set_ylabel('WER (%)')\n\n# Plot the data\nax.plot([2, 3, 4, 5, 6, 7, 8], [22, 24, 26, 28, 29, 30, 31], 'o-', color='orange', label='AMR (dev)')\nax.plot([2, 3, 4, 5, 6, 7, 8], [20, 22, 24, 26, 28, 30, 32], 'o-', color='blue', label='LibriCSS (test)')\nax.plot([2, 3, 4, 5, 6, 7, 8], [18, 20, 22, 24, 26, 28, 30], 'o-', color='green', label='IHM Trend')\nax.plot([2, 3, 4, 5, 6, 7, 8], [16, 18, 20, 22, 24, 26, 28], 'o-', color='purple', label='SDM Trend')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_69.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nx = [2, 3, 4, 5, 6, 7, 8]\ny = [0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8]\n\n# Plot\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\nax.plot(x, y, 'b-')\nax.set_xlabel('Number of Microphones')\nax.set_ylabel('WER (%)')\n\n# Highlight 1\nplt.scatter(2, 0.2, color='orange', label='Highlight 1')\nplt.text(2, 0.2, 'Highlight 1', color='orange')\n\n# Highlight 2\nplt.scatter(3, 0.3, color='blue', label='Highlight 2')\nplt.text(3, 0.3, 'Highlight 2', color='blue')\n\n# Highlight 3\nplt.scatter(4, 0.4, color='orange', label='Highlight 3')\nplt.text(4, 0.4, 'Highlight 3', color='orange')\n\n# Highlight 4\nplt.scatter(5, 0.5, color='blue', label='Highlight 4')\nplt.text(5, 0.5, 'Highlight 4', color='blue')\n\n# Highlight 5\nplt.scatter(6, 0.6, color='orange', label='Highlight 5')\nplt.text(6, 0.6, 'Highlight 5', color='orange')\n\n# Highlight 6\nplt.scatter(7, 0.7, color='blue', label='Highlight 6')\nplt.text(7, 0.7, 'Highlight 6', color='blue')\n\n# Highlight 7\nplt.scatter(8, 0.8, color='orange', label='Highlight 7')\nplt.text(8, 0.8, 'Highlight 7', color='orange')\n\n# Legend\nplt.legend()\n\n# Title\nplt.title('WER vs Number of Microphones')\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(12, 4))\n\n# Plot the data\nax.plot([0.1, 0.2, 0.3, 0.4], [78, 76, 74, 72], 'b-')\nax.plot([0.5, 0.6, 0.7, 0.8, 0.9], [75, 73, 71, 69, 67], 'g-')\nax.plot([0.1, 0.2, 0.3, 0.4], [78, 76, 74, 72], 'r-')\n\n# Add labels and title\nax.set_xlabel('Time (s)')\nax.set_ylabel('Temperature (Celsius)')\nax.set_title('Temperature vs Time')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_70.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(12, 5))\n\n# Set the background color of the plot\nax.set_facecolor('lightgrey')\n\n# Set the x-axis label\nax.set_xlabel('Number of Microphones')\n\n# Set the y-axis label\nax.set_ylabel('WER (%)')\n\n# Set the title of the plot\nax.set_title('Microphone Performance')\n\n# Create a list of microphone models\nmicrophones = ['LibriCSS WER', 'Threshold']\n\n# Create a list of WER values for each microphone model\nwer_values = [0.3, 0.4]\n\n# Create a scatter plot of the WER values\nax.scatter(microphones, wer_values, color='red')\n\n# Create a line plot of the WER values\nax.plot(microphones, wer_values, color='blue')\n\n# Add a legend to the plot\nax.legend(['Microphone Model', 'WER'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_71.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(6.0, 12.0))\n\n# Set the title of the plot\nax.set_title('SPMotif-0.5')\n\n# Create a rectangle for the logo\nlogo = plt.Rectangle((0.4, 0.9), 0.2, 0.1, color='blue')\nax.add_patch(logo)\n\n# Create a rectangle for the PNA and GIN logos\npna_logo = plt.Rectangle((0.1, 0.8), 0.1, 0.1, color='blue')\ngin_logo = plt.Rectangle((0.3, 0.8), 0.1, 0.1, color='green')\nax.add_patch(pna_logo)\nax.add_patch(gin_logo)\n\n# Create a rectangle for the performance graph\nperformance_graph = plt.Rectangle((0.1, 0.7), 0.8, 0.1, color='green')\nax.add_patch(performance_graph)\n\n# Create a rectangle for the ratio r graph\nratio_r_graph = plt.Rectangle((0.1, 0.6), 0.8, 0.1, color='blue')\nax.add_patch(ratio_r_graph)\n\n# Create a rectangle for the PNA and GIN logos\npna_logo = plt.Rectangle((0.1, 0.5), 0.1, 0.1, color='blue')\ngin_logo = plt.Rectangle((0.3, 0.5), 0.1, 0.1, color='green')\nax.add_patch(pna_logo)\nax.add_patch(gin_logo)\n\n# Create a rectangle for the performance graph\nperformance_graph = plt.Rectangle((0.1, 0.4), 0.8, 0.1, color='green')\nax.add_patch(performance_graph)\n\n# Create a rectangle for the ratio r graph\nratio_r_graph = plt.Rectangle((0.1, 0.3), 0.8, 0.1, color='blue')\nax.add_patch(ratio_r_graph)\n\n# Create a rectangle for the PNA and GIN logos\npna_logo = plt.Rectangle((0.1, 0.2), 0.1, 0.1, color='blue')\ngin_logo = plt.Rectangle((0.3, 0.2), 0.1, 0.1, color='green')\nax.add_patch(pna_logo)\nax.add_patch(gin_logo)\n\n# Create a rectangle for the performance graph\nperformance_graph = plt.Rectangle((0.1, 0.1), 0.8, 0.1, color='green')\nax.add_patch(performance_graph)\n\n# Create a rectangle for the ratio r graph\nratio_r_graph = plt.Rectangle((0.1, 0.0), 0.8, 0.1, color='blue')\nax.add_patch(ratio_r_graph)\n\n# Set the x-axis and y-axis limits\nax.set_xlim(0.1, 1.0)\nax.set_ylim(0.1, 1.0)\n\n# Set the x-axis and y-axis labels\nax.set_xlabel('Ratio r')\nax.set_ylabel('Performance')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_72.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Set the title of the plot\nax.set_title('Dynamic Performance Trends')\n\n# Set the x-axis label\nax.set_xlabel('Ratio r')\n\n# Set the y-axis label\nax.set_ylabel('Performance')\n\n# Set the x-axis limits\nax.set_xlim(0.1, 1)\n\n# Set the y-axis limits\nax.set_ylim(-80, 20)\n\n# Set the grid lines\nax.grid(True)\n\n# Set the tick marks\nax.set_xticks([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1])\nax.set_yticks([-80, -60, -40, -20, 0, 20])\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the labels\nax.label_outer()\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('black')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the labels\nax.label_outer()\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('black')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the labels\nax.label_outer()\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('black')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the labels\nax.label_outer()\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('black')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the labels\nax.label_outer()\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('black')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the labels\nax.label_outer()\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('black')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the labels\nax.label_outer()\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('black')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the labels\nax.label_outer()\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('black')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the labels\nax.label_outer()\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('black')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the labels\nax.label_outer()\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('black')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the labels\nax.label_outer()\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('black')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the labels\nax.label_outer()\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('black')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the labels\nax.label_outer()\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('black')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the labels\nax.label_outer()\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('black')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the labels\nax.label_outer()\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('black')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the labels\nax.label_outer()\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('black')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the labels\nax.label_outer()\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('black')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the labels\nax.label_outer()\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('black')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the labels\nax.label_outer()\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('black')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the labels\nax.label_outer()\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('black')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the labels\nax.label_outer()\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('black')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the labels\nax.label_outer()\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('black')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the labels\nax.label_outer()\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('black')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the labels\nax.label_outer()\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('black')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the labels\nax.label_outer()\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('black')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the labels\nax.label_outer()\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('black')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the labels\nax.label_outer()\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('black')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the labels\nax.label_outer()\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('black')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the labels\nax.label_outer()\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('black')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the labels\nax.label_outer()\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('black')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the labels\nax.label_outer()\n\n#"}
{"file": "dataset/ori_500/line_73.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Modern Linear Performance Evaluation')\n\n# Set the x-axis label\nax.set_xlabel('Ratio r')\n\n# Set the y-axis label\nax.set_ylabel('Performance')\n\n# Create a list of ratios\nratios = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0]\n\n# Create a list of performance values\nperformance_values = [0.9, 0.95, 1.0, 1.05, 1.1, 1.15, 1.2, 1.25, 1.3, 1.35]\n\n# Plot the data\nax.plot(ratios, performance_values, 'o-')\n\n# Add a legend\nax.legend(['PNAs + ours', 'Gin + ours'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_74.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Dynamic Model Performance')\n\n# Set the x-axis label\nax.set_xlabel('Ratio r')\n\n# Set the y-axis label\nax.set_ylabel('Performance')\n\n# Create a list of colors for the lines\ncolors = ['blue', 'red']\n\n# Create a list of labels for the lines\nlabels = ['PN', 'GI']\n\n# Create a list of line styles\nlinestyles = ['-', '--']\n\n# Create a list of markers\nmarkers = ['o', 's']\n\n# Create a list of marker sizes\nmarkersizes = [10, 15]\n\n# Create a list of marker edge colors\nmarkeredgecolors = ['black', 'black']\n\n# Create a list of marker face colors\nmarkerfacecolors = ['blue', 'red']\n\n# Create a list of line widths\nlinewidths = [2, 2]\n\n# Create a list of line offsets\nlineoffsets = [0, 0]\n\n# Create a list of line cap styles\nlinecapstyles = ['butt', 'round']\n\n# Create a list of line join styles\nlinejoinstyles = ['miter', 'round']\n\n# Create a list of line dash cap styles\nlinedashcapstyles = ['butt', 'round']\n\n# Create a list of line dash join styles\nlinedashjoinstyles = ['miter', 'round']\n\n# Create a list of line dash patterns\nlinedashpatterns = ['-', '--']\n\n# Create a list of line dash lengths\nlinedashlengths = [2, 2]\n\n# Create a list of line dash phase shifts\nlinedashphaseshifts = [0, 0]\n\n# Create a list of line dash cap lengths\nlinedashcaplengths = [0, 0]\n\n# Create a list of line dash join lengths\nlinedashjoinlengths = [0, 0]\n\n# Create a list of line dash cap angles\nlinedashcapangles = [0, 0]\n\n# Create a list of line dash join angles\nlinedashjoinangles = [0, 0]\n\n# Create a list of line dash cap radii\nlinedashcapradii = [0, 0]\n\n# Create a list of line dash join radii\nlinedashjoinradii = [0, 0]\n\n# Create a list of line dash cap offsets\nlinedashcapoffsets = [0, 0]\n\n# Create a list of line dash join offsets\nlinedashjoinoffsets = [0, 0]\n\n# Create a list of line dash cap lengths\nlinedashcaplengths = [0, 0]\n\n# Create a list of line dash join lengths\nlinedashjoinlengths = [0, 0]\n\n# Create a list of line dash cap angles\nlinedashcapangles = [0, 0]\n\n# Create a list of line dash join angles\nlinedashjoinangles = [0, 0]\n\n# Create a list of line dash cap radii\nlinedashcapradii = [0, 0]\n\n# Create a list of line dash join radii\nlinedashjoinradii = [0, 0]\n\n# Create a list of line dash cap offsets\nlinedashcapoffsets = [0, 0]\n\n# Create a list of line dash join offsets\nlinedashjoinoffsets = [0, 0]\n\n# Create a list of line dash cap lengths\nlinedashcaplengths = [0, 0]\n\n# Create a list of line dash join lengths\nlinedashjoinlengths = [0, 0]\n\n# Create a list of line dash cap angles\nlinedashcapangles = [0, 0]\n\n# Create a list of line dash join angles\nlinedashjoinangles = [0, 0]\n\n# Create a list of line dash cap radii\nlinedashcapradii = [0, 0]\n\n# Create a list of line dash join radii\nlinedashjoinradii = [0, 0]\n\n# Create a list of line dash cap offsets\nlinedashcapoffsets = [0, 0]\n\n# Create a list of line dash join offsets\nlinedashjoinoffsets = [0, 0]\n\n# Create a list of line dash cap lengths\nlinedashcaplengths = [0, 0]\n\n# Create a list of line dash join lengths\nlinedashjoinlengths = [0, 0]\n\n# Create a list of line dash cap angles\nlinedashcapangles = [0, 0]\n\n# Create a list of line dash join angles\nlinedashjoinangles = [0, 0]\n\n# Create a list of line dash cap radii\nlinedashcapradii = [0, 0]\n\n# Create a list of line dash join radii\nlinedashjoinradii = [0, 0]\n\n# Create a list of line dash cap offsets\nlinedashcapoffsets = [0, 0]\n\n# Create a list of line dash join offsets\nlinedashjoinoffsets = [0, 0]\n\n# Create a list of line dash cap lengths\nlinedashcaplengths = [0, 0]\n\n# Create a list of line dash join lengths\nlinedashjoinlengths = [0, 0]\n\n# Create a list of line dash cap angles\nlinedashcapangles = [0, 0]\n\n# Create a list of line dash join angles\nlinedashjoinangles = [0, 0]\n\n# Create a list of line dash cap radii\nlinedashcapradii = [0, 0]\n\n# Create a list of line dash join radii\nlinedashjoinradii = [0, 0]\n\n# Create a list of line dash cap offsets\nlinedashcapoffsets = [0, 0]\n\n# Create a list of line dash join offsets\nlinedashjoinoffsets = [0, 0]\n\n# Create a list of line dash cap lengths\nlinedashcaplengths = [0, 0]\n\n# Create a list of line dash join lengths\nlinedashjoinlengths = [0, 0]\n\n# Create a list of line dash cap angles\nlinedashcapangles = [0, 0]\n\n# Create a list of line dash join angles\nlinedashjoinangles = [0, 0]\n\n# Create a list of line dash cap radii\nlinedashcapradii = [0, 0]\n\n# Create a list of line dash join radii\nlinedashjoinradii = [0, 0]\n\n# Create a list of line dash cap offsets\nlinedashcapoffsets = [0, 0]\n\n# Create a list of line dash join offsets\nlinedashjoinoffsets = [0, 0]\n\n# Create a list of line dash cap lengths\nlinedashcaplengths = [0, 0]\n\n# Create a list of line dash join lengths\nlinedashjoinlengths = [0, 0]\n\n# Create a list of line dash cap angles\nlinedashcapangles = [0, 0]\n\n# Create a list of line dash join angles\nlinedashjoinangles = [0, 0]\n\n# Create a list of line dash cap radii\nlinedashcapradii = [0, 0]\n\n# Create a list of line dash join radii\nlinedashjoinradii = [0, 0]\n\n# Create a list of line dash cap offsets\nlinedashcapoffsets = [0, 0]\n\n# Create a list of line dash join offsets\nlinedashjoinoffsets = [0, 0]\n\n# Create a list of line dash cap lengths\nlinedashcaplengths = [0, 0]\n\n# Create a list of line dash join lengths\nlinedashjoinlengths = [0, 0]\n\n# Create a list of line dash cap angles\nlinedashcapangles = [0, 0]\n\n# Create a list of line dash join angles\nlinedashjoinangles = [0, 0]\n\n# Create a list of line dash cap radii\nlinedashcapradii = [0, 0]\n\n# Create a list of line dash join radii\nlinedashjoinradii = [0, 0]\n\n# Create a list of line dash cap offsets\nlinedashcapoffsets = [0, 0]\n\n# Create a list of line dash join offsets\nlinedashjoinoffsets = [0, 0]\n\n# Create a list of line dash cap lengths\nlinedashcaplengths = [0, 0]\n\n# Create a list of line dash join lengths\nlinedashjoinlengths = [0, 0]\n\n# Create a list of line dash cap angles\nlinedashcapangles = [0, 0]\n\n# Create a list of line dash join angles\nlinedashjoinangles = [0, 0]\n\n# Create a list of line dash cap radii\nlinedashcapradii = [0, 0]\n\n# Create a list of line dash join radii\nlinedashjoinradii = [0, 0]\n\n# Create a list of line dash cap offsets\nlinedashcapoffsets = [0, 0]\n\n# Create a list of line dash join offsets\nlinedashjoinoffsets = [0, 0]\n\n# Create a list of line dash cap lengths\nlinedashcaplengths = [0, 0]\n\n# Create a list of line dash join lengths\nlinedashjoinlengths = [0, 0]\n\n# Create a list of line dash cap angles\nlinedashcapangles = [0, 0]\n\n# Create a list of line dash join angles\nlinedashjoinangles = [0, 0]\n\n# Create a list of line dash cap radii\nlinedashcapradii = [0, 0]\n\n# Create a list of line dash join radii\nlinedashjoinradii = [0, 0]\n\n# Create a list of line dash cap offsets\nlinedashcapoffsets = [0, 0]\n\n# Create a list of line dash join offsets\nlinedashjoinoffsets = [0, 0]\n\n# Create a list of line dash cap lengths\nlinedashcaplengths = [0, 0]\n\n# Create a list of line dash join lengths\nlinedashjoinlengths = [0, 0]\n\n# Create a list of line dash cap angles\nlinedashcapangles = [0, 0]\n\n# Create a list of line dash join angles\nlinedashjoinangles = [0, 0]\n\n# Create a list of line dash cap radii\nlinedashcapradii = [0, 0]\n\n# Create a list of line dash join radii\nlinedashjoinradii = [0, 0]\n\n# Create a list of line dash cap offsets\nlinedashcapoffsets = [0, 0]\n\n# Create a list of line dash join offsets\nlinedashjoinoffsets = [0, 0]\n\n# Create a list of line dash cap lengths\nlinedashcaplengths = [0, 0]\n\n# Create a list of line dash join lengths\nlinedashjoinlengths = [0, 0]\n\n# Create a list of line dash cap angles\nlinedashcapangles = [0, 0]\n\n# Create a list of line dash join angles\nlinedashjoinangles = [0, 0]\n\n# Create a list of line dash cap radii\nlinedashcapradii = [0, 0]\n\n# Create a list of line dash join radii\nlinedashjoinradii = [0, 0]\n\n# Create a list of line dash cap offsets\nlinedashcapoffsets = [0, 0]\n\n# Create a list of line dash join offsets\nlinedashjoinoffsets = [0, 0]\n\n# Create a list of line dash cap lengths\nlinedashcaplengths = [0, 0]\n\n# Create a list of line dash join lengths\nlinedashjoinlengths = [0, 0]\n\n# Create a list of line dash cap angles\nlinedashcapangles = [0, 0]\n\n# Create a list of line dash join angles\nlinedashjoinangles = [0, 0]\n\n# Create a list of line dash cap radii\nlinedashcapradii = [0, 0]\n\n# Create a list of line dash join radii\nlinedashjoinradii = [0, 0]\n\n# Create a list of line dash cap offsets\nlinedashcapoffsets = [0, 0]\n\n# Create a list of line dash join offsets\nlinedashjoinoffsets = [0, 0]\n\n# Create a list of line dash cap lengths\nlinedashcaplengths = [0, 0]\n\n# Create a list of line dash join lengths\nlinedashjoinlengths = [0, 0]\n\n# Create a list of line dash cap angles\nlinedashcapangles = [0, 0]\n\n# Create a list of line dash join angles\nlinedashjoinangles = [0, 0]\n\n# Create a list of line dash cap radii\nlinedashcapradii = [0, 0]\n\n# Create a list of line dash join radii\nlinedashjoinradii = [0, 0]\n\n# Create a list of line dash cap offsets\nlinedashcapoffsets = [0, 0]\n\n# Create a list of line dash join offsets\nlinedashjoinoffsets = [0, 0]\n\n# Create a list of line dash cap lengths\nlinedashcaplengths = [0, 0]\n\n# Create a list of line dash join lengths\nlinedashjoinlengths = [0, 0]\n\n# Create a list of line dash cap angles\nlinedashcapangles = [0, 0]\n\n# Create a list of line dash join angles\nlinedashjoinangles = [0, 0]\n\n# Create a list of line dash cap radii\nlinedashcapradii = [0, 0]\n\n# Create a list of line dash join radii\nlinedashjoinradii = [0, 0]\n\n# Create a list of line dash cap offsets\nlinedashcapoffsets = [0, 0]\n\n# Create a list of line dash join offsets\nlinedashjoinoffsets = [0, 0]\n\n# Create a list of line dash cap lengths\nlinedashcaplengths = [0, 0]\n\n# Create a list of line dash join lengths\nlinedashjoinlengths = [0, 0]\n\n# Create a list of line dash cap angles\nlinedashcapangles = [0, 0]\n\n# Create a list of line dash join angles\nlinedashjoinangles = [0, 0]\n\n# Create a list of line dash cap radii\nlinedashcapradii = [0, 0]\n\n# Create a list of line dash join radii\nlinedashjoinradii = [0, 0]\n\n# Create a list of line dash cap offsets\nlinedashcapoffsets = [0, 0]\n\n# Create a list of line dash join offsets\nlinedashjoinoffsets = [0, 0]\n\n# Create a list of line dash cap lengths\nlinedashcaplengths = [0, 0]\n\n# Create a list of line dash join lengths\nlinedashjoinlengths = [0, 0]\n\n# Create a list of line dash cap angles\nlinedashcapangles = [0, 0]\n\n# Create a list of line dash join angles\nlinedashjoinangles = [0, 0]\n\n# Create a list of line dash cap radii\nlinedashcapradii = [0, 0]\n\n# Create a list of line dash join radii\nlinedashjoinradii = [0, 0]\n\n# Create a list of line dash cap offsets\nlinedashcapoffsets = [0, 0]\n\n# Create a list of line dash join offsets\nlinedashjoinoffsets = [0, 0]\n\n# Create a list of line dash cap lengths\nlinedashcaplengths = [0, 0]\n\n# Create a list of line dash join lengths\nlinedashjoinlengths = [0, 0]\n\n# Create a list of line dash cap angles\nlinedashcapangles = [0, 0]\n\n# Create a list of line dash join angles\nlinedashjoinangles = [0, 0]\n\n# Create a list of line dash cap radii\nlinedashcapradii = [0, 0]\n\n# Create a list of line dash join radii\nlinedashjoinradii = [0, 0]\n\n# Create a list of line dash cap offsets\nlinedashcapoffsets = [0, 0]\n\n# Create a list of line dash join offsets\nlinedashjoinoffsets = [0, 0]\n\n# Create a list of line dash cap lengths\nlinedashcaplengths = [0, 0]\n\n# Create a list of line dash join lengths\nlinedashjoinlengths = [0, 0]\n\n# Create a list of line dash cap angles\nlinedashcapangles = [0, 0]\n\n# Create a list of line dash join angles\nlinedashjoinangles = [0, 0]\n\n# Create a list of line dash cap radii\nlinedashcapradii = [0, 0]\n\n# Create a list of line dash join radii\nlinedashjoinradii = [0, 0]\n\n# Create a list of line dash cap offsets\nlinedashcapoffsets = [0, 0]\n\n# Create a list of line dash join offsets\nlinedashjoinoffsets = [0, 0]\n\n# Create a list of line dash cap lengths\nlinedashcaplengths = [0, 0]\n\n# Create a list of line dash join lengths\nlinedashjoinlengths = [0, 0]\n\n# Create a list of line dash cap angles\nlinedashcapangles = [0, 0]\n\n# Create a list of line dash join angles\nlinedashjoinangles = [0, 0]\n\n# Create a list of line dash cap radii\nlinedashcapradii = [0, 0]\n\n# Create a list of line dash join radii\nlinedashjoinradii = [0, 0]\n\n# Create a list of line dash cap offsets\nlinedashcapoffsets = [0, 0]\n\n# Create a list of line dash join offsets\nlinedashjoinoffsets = [0, 0]\n\n# Create a list of line dash cap lengths\nlinedashcaplengths = [0, 0]\n\n# Create a list of line dash join lengths\nlinedashjoinlengths = [0, 0]\n\n# Create a list of line dash cap angles\nlinedashcapangles = [0, 0]\n\n# Create a list of line dash join angles\nlinedashjoinangles = [0, 0]\n\n# Create a list of line dash cap radii\nlinedashcapradii = [0, 0]\n\n# Create a list of line dash join radii\nlinedashjoinradii = [0, 0]\n\n# Create a list of line dash cap offsets\nlinedashcapoffsets = [0, 0]\n\n# Create a list of line dash join offsets\nlinedashjoinoffsets = [0, 0]\n\n# Create a list of line dash cap lengths\nlinedashcaplengths = [0, 0"}
{"file": "dataset/ori_500/line_75.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Set the title of the plot\nax.set_title('Comparison of Model Accuracies')\n\n# Set the x-axis label\nax.set_xlabel('Ensemble Size')\n\n# Set the y-axis label\nax.set_ylabel('Model Accuracy')\n\n# Create a grid\nax.grid(True)\n\n# Create a list of ensemble sizes\nensemble_sizes = [5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]\n\n# Create a list of model accuracies for each ensemble size\nmodel_1_accuracies = [80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 99, 99.5, 100]\nmodel_2_accuracies = [75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 98]\n\n# Create a scatter plot for model 1\nax.scatter(ensemble_sizes, model_1_accuracies, color='blue', label='Model 1 Mean Accuracy')\n\n# Create a scatter plot for model 2\nax.scatter(ensemble_sizes, model_2_accuracies, color='red', label='Model 2 Mean Accuracy')\n\n# Create a line plot for model 1\nax.plot(ensemble_sizes, model_1_accuracies, color='blue')\n\n# Create a line plot for model 2\nax.plot(ensemble_sizes, model_2_accuracies, color='red')\n\n# Show the legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_76.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 12.0))\n\n# Set the title of the plot\nax.set_title('Performance of Model X')\n\n# Create a scatter plot with red circles for the data points\nax.scatter([1, 2, 3, 4, 5, 6, 7, 8, 9], [90, 85, 80, 75, 70, 65, 60, 55, 50], color='red', marker='o')\n\n# Create a line plot with blue lines for the trend\nax.plot([1, 2, 3, 4, 5, 6, 7, 8, 9], [90, 85, 80, 75, 70, 65, 60, 55, 50], color='blue')\n\n# Set the x-axis label\nax.set_xlabel('Iteration')\n\n# Set the y-axis label\nax.set_ylabel('Score')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_77.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 12.0))\n\n# Set the title of the plot\nax.set_title('Performance of Llama')\n\n# Create a list of colors for the lines\ncolors = ['pink', 'lightgreen', 'skyblue']\n\n# Create a list of labels for the lines\nlabels = ['Config A - Llama', 'Config B - Llama', 'Config C - Llama']\n\n# Create a list of x values for the lines\nx_values = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n# Create a list of y values for the lines\ny_values = [\n    [90, 92, 93, 94, 95, 94, 93, 92, 91, 90],\n    [88, 89, 90, 91, 92, 91, 90, 89, 88, 87],\n    [86, 87, 88, 89, 90, 89, 88, 87, 86, 85]\n]\n\n# Plot the lines\nfor i in range(len(colors)):\n    ax.plot(x_values, y_values[i], color=colors[i], label=labels[i])\n\n# Add a legend to the plot\nax.legend()\n\n# Set the x-axis and y-axis limits\nax.set_xlim(1, 10)\nax.set_ylim(70, 95)\n\n# Set the x-axis and y-axis labels\nax.set_xlabel('Iteration')\nax.set_ylabel('Score')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_78.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(10.0, 10.0))\n\n# Set the background color of the plot\nax.set_facecolor('lightgrey')\n\n# Set the title of the plot\nax.set_title('Brand A Sales Growth')\n\n# Set the x-axis label\nax.set_xlabel('Quarter')\n\n# Set the y-axis label\nax.set_ylabel('Sales Growth')\n\n# Create a scatter plot with red dots\nax.scatter([1, 2, 3, 4], [1.5, 1.8, 2.2, 2.5], color='red')\n\n# Create a line plot with a red line\nax.plot([1, 2, 3, 4], [1.5, 1.8, 2.2, 2.5], color='red')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_79.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(18.0, 4.0))\n\n# Set the background color of the plot\nax.set_facecolor('lightgrey')\n\n# Set the grid lines\nax.grid(True)\n\n# Set the x-axis and y-axis labels\nax.set_xlabel('Time (s)')\nax.set_ylabel('Metric Value')\n\n# Set the title of the plot\nax.set_title('Traffic Performance')\n\n# Create a scatter plot\nx = np.linspace(0, 700, 100)\ny = np.sin(x/50)\nax.plot(x, y, 'o-')\n\n# Add a rectangle marker at the end of the line\nax.plot(x[-1], y[-1], 'ro')\n\n# Add a blue rectangle for the car icon\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='blue'))\n\n# Add a red rectangle for the traffic light icon\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='red'))\n\n# Add a text label for the car icon\nax.text(0.5, 0.5, 'Car', ha='center', va='center', transform=ax.transAxes)\n\n# Add a text label for the traffic light icon\nax.text(0.5, 0.5, 'Traffic Light', ha='center', va='center', transform=ax.transAxes)\n\n# Save the plot as a PNG file\nplt.savefig('traffic_performance.png')\n```"}
{"file": "dataset/ori_500/line_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Set the x-axis labels\nax.set_xticks([1, 2, 3, 4, 5])\nax.set_xticklabels(['Passive', 'Ride', 'Replay', 'Sport', 'Workout'])\n\n# Set the y-axis label\nax.set_ylabel('Relaxation Level')\n\n# Set the title of the graph\nax.set_title('Relaxation Level by Driving Style')\n\n# Plot the data\nax.plot([1, 2, 3, 4, 5], [1.4, 1.2, 1.0, 0.8, 0.6], color='red')\nax.plot([1, 2, 3, 4, 5], [1.2, 1.0, 0.8, 0.6, 0.4], color='blue')\nax.plot([1, 2, 3, 4, 5], [1.0, 0.8, 0.6, 0.4, 0.2], color='green')\n\n# Add a legend\nax.legend(['Weather', 'Dry', 'Rain'])\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_80.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\nx = ['Phase 1', 'Phase 2', 'Phase 3', 'Phase 4', 'Phase 5']\ny1 = [20, 25, 30, 35, 40]\ny2 = [40, 45, 50, 55, 60]\n\n# Create a figure and a set of subplots\nfig, axs = plt.subplots(3, 2, figsize=(9.0, 6.0))\n\n# Plot the data\naxs[0, 0].plot(x, y1, color='purple')\naxs[0, 0].set_title('Category A Growth')\naxs[0, 0].fill_between(x, y1, color='lavender')\n\naxs[0, 1].plot(x, y2, color='red')\naxs[0, 1].set_title('Category B Growth')\naxs[0, 1].fill_between(x, y2, color='pink')\n\naxs[1, 0].plot(x, y1, color='blue')\naxs[1, 0].set_title('Category C Growth')\naxs[1, 0].fill_between(x, y1, color='lightblue')\n\naxs[1, 1].plot(x, y2, color='orange')\naxs[1, 1].set_title('Category D Growth')\naxs[1, 1].fill_between(x, y2, color='salmon')\n\naxs[2, 0].plot(x, y1, color='green')\naxs[2, 0].set_title('Category E Growth')\naxs[2, 0].fill_between(x, y1, color='lightgreen')\n\naxs[2, 1].plot(x, y2, color='brown')\naxs[2, 1].set_title('Category F Growth')\naxs[2, 1].fill_between(x, y2, color='burlywood')\n\n# Set the layout of the subplots\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(9.0, 6.0))\n\n# Set the x-axis limits\nax.set_xlim(4, 30)\n\n# Set the y-axis limits\nax.set_ylim(10, 15)\n\n# Set the x-axis ticks\nax.set_xticks([4, 6, 10, 20, 30])\n\n# Set the y-axis ticks\nax.set_yticks([10, 12, 14, 15])\n\n# Draw a rectangle\nrectangle = plt.Rectangle((10, 10), 10, 5, color='blue')\nax.add_patch(rectangle)\n\n# Draw a circle\ncircle = plt.Circle((15, 12), 2, color='orange')\nax.add_patch(circle)\n\n# Draw a line\nline = plt.Line2D([10, 20], [10, 15], color='red')\nax.add_line(line)\n\n# Draw a scatter plot\nscatter = plt.scatter([10, 20], [12, 14], color='green')\nax.add_collection(scatter)\n\n# Draw a bar chart\nbar = plt.bar([10, 20], [12, 14], color='purple')\nax.add_collection(bar)\n\n# Draw a pie chart\npie = plt.pie([10, 20], colors=['cyan', 'magenta'])\nax.add_collection(pie)\n\n# Draw a histogram\nhist = plt.hist([10, 20], bins=5, color='yellow')\nax.add_collection(hist)\n\n# Draw a box plot\nbox = plt.boxplot([10, 20], vert=False, patch_artist=True)\nax.add_collection(box)\n\n# Draw a violin plot\nviolin = plt.violinplot([10, 20], showmeans=True)\nax.add_collection(violin)\n\n# Draw a heatmap\nheatmap = plt.imshow([[10, 20], [12, 14]], cmap='hot', interpolation='nearest')\nax.add_collection(heatmap)\n\n# Draw a contour plot\ncontour = plt.contourf([10, 20], [12, 14], [[10, 20], [12, 14]])\nax.add_collection(contour)\n\n# Draw a stream plot\nstream = plt.streamplot([10, 20], [12, 14], [[10, 20], [12, 14]])\nax.add_collection(stream)\n\n# Draw a polar plot\npolar = plt.polar([10, 20], [12, 14])\nax.add_collection(polar)\n\n# Draw a 3D plot\nfrom mpl_toolkits.mplot3d import Axes3D\nax3d = fig.add_subplot(111, projection='3d')\nax3d.plot([10, 20], [12, 14], [10, 15], 'r-')\n\n# Draw a 3D scatter plot\nax3d.scatter([10, 20], [12, 14], [10, 15], c='b')\n\n# Draw a 3D bar chart\nax3d.bar3d([10, 20], [12, 14], [10, 15], [1, 1], [1, 1], [1, 1], color='g')\n\n# Draw a 3D pie chart\nax3d.pie([10, 20], colors=['c', 'm'])\n\n# Draw a 3D histogram\nax3d.hist3d([10, 20], [12, 14], [10, 15], bins=5, color='y')\n\n# Draw a 3D contour plot\nax3d.contour3D([10, 20], [12, 14], [10, 15], 50, cmap='hot')\n\n# Draw a 3D stream plot\nax3d.streamplot([10, 20], [12, 14], [[10, 20], [12, 14]])\n\n# Draw a 3D polar plot\nax3d.polar([10, 20], [12, 14])\n\n# Draw a 3D scatter plot with color map\nax3d.scatter([10, 20], [12, 14], [10, 15], c=[10, 20], cmap='coolwarm')\n\n# Draw a 3D bar chart with color map\nax3d.bar3d([10, 20], [12, 14], [10, 15], [1, 1], [1, 1], [1, 1], color=[10, 20], cmap='spring')\n\n# Draw a 3D pie chart with color map\nax3d.pie([10, 20], colors=['c', 'm'], cmap='summer')\n\n# Draw a 3D histogram with color map\nax3d.hist3d([10, 20], [12, 14], [10, 15], bins=5, color=[10, 20], cmap='autumn')\n\n# Draw a 3D contour plot with color map\nax3d.contour3D([10, 20], [12, 14], [10, 15], 50, cmap='winter')\n\n# Draw a 3D stream plot with color map\nax3d.streamplot([10, 20], [12, 14], [[10, 20], [12, 14]], color=[10, 20], cmap='cool')\n\n# Draw a 3D polar plot with color map\nax3d.polar([10, 20], [12, 14], color=[10, 20], cmap='hot')\n\n# Draw a 3D scatter plot with color map and marker size\nax3d.scatter([10, 20], [12, 14], [10, 15], c=[10, 20], cmap='coolwarm', s=[100, 200])\n\n# Draw a 3D bar chart with color map and marker size\nax3d.bar3d([10, 20], [12, 14], [10, 15], [1, 1], [1, 1], [1, 1], color=[10, 20], cmap='spring', s=[100, 200])\n\n# Draw a 3D pie chart with color map and marker size\nax3d.pie([10, 20], colors=['c', 'm'], cmap='summer', s=[100, 200])\n\n# Draw a 3D histogram with color map and marker size\nax3d.hist3d([10, 20], [12, 14], [10, 15], bins=5, color=[10, 20], cmap='autumn', s=[100, 200])\n\n# Draw a 3D contour plot with color map and marker size\nax3d.contour3D([10, 20], [12, 14], [10, 15], 50, cmap='winter', s=[100, 200])\n\n# Draw a 3D stream plot with color map and marker size\nax3d.streamplot([10, 20], [12, 14], [[10, 20], [12, 14]], color=[10, 20], cmap='cool', s=[100, 200])\n\n# Draw a 3D polar plot with color map and marker size\nax3d.polar([10, 20], [12, 14], color=[10, 20], cmap='hot', s=[100, 200])\n\n# Draw a 3D scatter plot with color map, marker size, and marker edge color\nax3d.scatter([10, 20], [12, 14], [10, 15], c=[10, 20], cmap='coolwarm', s=[100, 200], edgecolor='k')\n\n# Draw a 3D bar chart with color map, marker size, and marker edge color\nax3d.bar3d([10, 20], [12, 14], [10, 15], [1, 1], [1, 1], [1, 1], color=[10, 20], cmap='spring', s=[100, 200], edgecolor='k')\n\n# Draw a 3D pie chart with color map, marker size, and marker edge color\nax3d.pie([10, 20], colors=['c', 'm'], cmap='summer', s=[100, 200], edgecolor='k')\n\n# Draw a 3D histogram with color map, marker size, and marker edge color\nax3d.hist3d([10, 20], [12, 14], [10, 15], bins=5, color=[10, 20], cmap='autumn', s=[100, 200], edgecolor='k')\n\n# Draw a 3D contour plot with color map, marker size, and marker edge color\nax3d.contour3D([10, 20], [12, 14], [10, 15], 50, cmap='winter', s=[100, 200], edgecolor='k')\n\n# Draw a 3D stream plot with color map, marker size, and marker edge color\nax3d.streamplot([10, 20], [12, 14], [[10, 20], [12, 14]], color=[10, 20], cmap='cool', s=[100, 200], edgecolor='k')\n\n# Draw a 3D polar plot with color map, marker size, and marker edge color\nax3d.polar([10, 20], [12, 14], color=[10, 20], cmap='hot', s=[100, 200], edgecolor='k')\n\n# Draw a 3D scatter plot with color map, marker size, marker edge color, and marker face color\nax3d.scatter([10, 20], [12, 14], [10, 15], c=[10, 20], cmap='coolwarm', s=[100, 200], edgecolor='k', facecolor='w')\n\n# Draw a 3D bar chart with color map, marker size, marker edge color, and marker face color\nax3d.bar3d([10, 20], [12, 14], [10, 15], [1, 1], [1, 1], [1, 1], color=[10, 20], cmap='spring', s=[100, 200], edgecolor='k', facecolor='w')\n\n# Draw a 3D pie chart with color map, marker size, marker edge color, and marker face color\nax3d.pie([10, 20], colors=['c', 'm'], cmap='summer', s=[100, 200], edgecolor='k', facecolor='w')\n\n# Draw a 3D histogram with color map, marker size, marker edge color, and marker face color\nax3d.hist3d([10, 20], [12, 14], [10, 15], bins=5, color=[10, 20], cmap='autumn', s=[100, 200], edgecolor='k', facecolor='w')\n\n# Draw a 3D contour plot with color map, marker size, marker edge color, and marker face color\nax3d.contour3D([10, 20], [12, 14], [10, 15], 50, cmap='winter', s=[100, 200], edgecolor='k', facecolor='w')\n\n# Draw a 3D stream plot with color map, marker size, marker edge color, and marker face color\nax3d.streamplot([10, 20], [12, 14], [[10, 20], [12, 14]], color=[10, 20], cmap='cool', s=[100, 200], edgecolor='k', facecolor='w')\n\n# Draw a 3D polar plot with color map, marker size, marker edge color, and marker face color\nax3d.polar([10, 20], [12, 14], color=[10, 20], cmap='hot', s=[100, 200], edgecolor='k', facecolor='w')\n\n# Draw a 3D scatter plot with color map, marker size, marker edge color, marker face color, and marker alpha\nax3d.scatter([10, 20], [12, 14], [10, 15], c=[10, 20], cmap='coolwarm', s=[100, 200], edgecolor='k', facecolor='w', alpha=0.5)\n\n# Draw a 3D bar chart with color map, marker size, marker edge color, marker face color, and marker alpha\nax3d.bar3d([10, 20], [12, 14], [10, 15], [1, 1], [1, 1], [1, 1], color=[10, 20], cmap='spring', s=[100, 200], edgecolor='k', facecolor='w', alpha=0.5)\n\n# Draw a 3D pie chart with color map, marker size, marker edge color, marker face color, and marker alpha\nax3d.pie([10, 20], colors=['c', 'm'], cmap='summer', s=[100, 200], edgecolor='k', facecolor='w', alpha=0.5)\n\n# Draw a 3D histogram with color map, marker size, marker edge color, marker face color, and marker alpha\nax3d.hist3d([10, 20], [12, 14], [10, 15], bins=5, color=[10, 20], cmap='autumn', s=[100, 200], edgecolor='k', facecolor='w', alpha=0.5)\n\n# Draw a 3D contour plot with color map, marker size, marker edge color, marker face color, and marker alpha\nax3d.contour3D([10, 20], [12, 14], [10, 15], 50, cmap='winter', s=[100, 200], edgecolor='k', facecolor='w', alpha=0.5)\n\n# Draw a 3D stream plot with color map, marker size, marker edge color, marker face color, and marker alpha\nax3d.streamplot([10, 20], [12, 14], [[10, 20], [12, 14]], color=[10, 20], cmap='cool', s=[100, 200], edgecolor='k', facecolor='w', alpha=0.5)\n\n# Draw a 3D polar plot with color map, marker size, marker edge color, marker face color, and marker alpha\nax3d.polar([10, 20], [12, 14], color=[10, 20], cmap='hot', s=[100, 200], edgecolor='k', facecolor='w', alpha=0.5)\n\n# Draw a 3D scatter plot with color map, marker size, marker edge color, marker face color, marker alpha, and marker linewidth\nax3d.scatter([10, 20], [12, 14], [10, 15], c=[10, 20], cmap='coolwarm', s=[100, 200], edgecolor='k', facecolor='w', alpha=0.5, linewidth=2)\n\n# Draw a 3D bar chart with color map, marker size, marker edge color, marker face color, marker alpha, and marker linewidth\nax3d.bar3d([10, 20], [12, 14], [10, 15], [1, 1], [1, 1], [1, 1], color=[10, 20], cmap='spring', s=[100, 200], edgecolor='k', facecolor='w', alpha=0.5, linewidth=2)\n\n# Draw a 3D pie chart with color map, marker size, marker edge color, marker face color, marker alpha, and marker linewidth\nax3d.pie([10, 20], colors=['c', 'm'], cmap='summer', s=[100, 200], edgecolor='k', facecolor='w', alpha=0.5, linewidth=2)\n\n# Draw a 3D histogram with color map, marker size, marker edge color, marker face color, marker alpha, and marker linewidth\nax3d.hist3d([10, 20], [12, 14], [10, 15], bins=5, color=[10, 20], cmap='autumn', s=[100, 200], edgecolor='k', facecolor='w', alpha=0.5, linewidth=2)\n\n# Draw a 3D contour plot with color map, marker size, marker edge color"}
{"file": "dataset/ori_500/multidiff_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis for the map\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Create a rectangle for the map\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lightblue'))\n\n# Add text to the map\nax.text(0.5, 0.5, 'Central', ha='center', va='center')\n\n# Create a pie chart for the literacy rate by region\nregions = ['North', 'East', 'South', 'West']\nrates = [35, 25, 20, 15]\ncolors = ['skyblue', 'lightgreen', 'salmon', 'lightcoral']\n\n# Create a pie chart\nwedges, texts, autotexts = ax.pie(rates, labels=regions, colors=colors, autopct='%1.1f%%', startangle=90)\n\n# Set the title of the pie chart\nax.set_title('Literacy Rate by Region')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 2.0))\n\n# Set the colorbar\ncmap = plt.get_cmap('coolwarm')\nnorm = plt.Normalize(vmin=-1.0, vmax=1.5)\nsm = plt.cm.ScalarMappable(cmap=cmap, norm=norm)\nsm.set_array([])\ncbar = fig.colorbar(sm)\n\n# Create a grid of subplots\ngs = fig.add_gridspec(1, 3)\nax1 = fig.add_subplot(gs[0, 0])\nax2 = fig.add_subplot(gs[0, 1])\nax3 = fig.add_subplot(gs[0, 2])\n\n# Add images to the subplots\nax1.imshow(np.random.rand(10, 10), cmap='Blues')\nax2.imshow(np.random.rand(10, 10), cmap='Greens')\nax3.imshow(np.random.rand(10, 10), cmap='Reds')\n\n# Add text to the subplots\nax1.text(0.5, 0.5, 'PaleSkin', ha='center', va='center', transform=ax1.transAxes)\nax2.text(0.5, 0.5, 'OvalFace', ha='center', va='center', transform=ax2.transAxes)\nax3.text(0.5, 0.5, 'Smiling', ha='center', va='center', transform=ax3.transAxes)\n\n# Add a vertical line to the colorbar\ncbar.ax.axvline(x=0.5, color='k')\n\n# Add a horizontal line to the colorbar\ncbar.ax.axhline(y=0.5, color='k')\n\n# Add a rectangle to the colorbar\ncbar.ax.add_patch(plt.Rectangle((0.5, 0.5), 0.1, 0.1, color='blue'))\n\n# Add a circle to the colorbar\ncbar.ax.add_patch(plt.Circle((0.5, 0.5), 0.1, color='red'))\n\n# Add a triangle to the colorbar\ncbar.ax.add_patch(plt.Polygon([[0.5, 0.5], [0.4, 0.6], [0.6, 0.6]], color='green'))\n\n# Add a star to the colorbar\ncbar.ax.add_patch(plt.Polygon([[0.5, 0.5], [0.4, 0.6], [0.6, 0.6], [0.5, 0.7], [0.4, 0.6], [0.6, 0.6]], color='yellow'))\n\n# Add a heart to the colorbar\ncbar.ax.add_patch(plt.Polygon([[0.5, 0.5], [0.4, 0.6], [0.6, 0.6], [0.5, 0.7], [0.4, 0.6], [0.6, 0.6]], color='pink'))\n\n# Add a diamond to the colorbar\ncbar.ax.add_patch(plt.Polygon([[0.5, 0.5], [0.4, 0.6], [0.6, 0.6], [0.5, 0.7], [0.4, 0.6], [0.6, 0.6]], color='orange'))\n\n# Add a square to the colorbar\ncbar.ax.add_patch(plt.Polygon([[0.5, 0.5], [0.4, 0.6], [0.6, 0.6], [0.5, 0.7], [0.4, 0.6], [0.6, 0.6]], color='purple'))\n\n# Add a pentagon to the colorbar\ncbar.ax.add_patch(plt.Polygon([[0.5, 0.5], [0.4, 0.6], [0.6, 0.6], [0.5, 0.7], [0.4, 0.6], [0.6, 0.6]], color='brown'))\n\n# Add a hexagon to the colorbar\ncbar.ax.add_patch(plt.Polygon([[0.5, 0.5], [0.4, 0.6], [0.6, 0.6], [0.5, 0.7], [0.4, 0.6], [0.6, 0.6]], color='gray'))\n\n# Add a heptagon to the colorbar\ncbar.ax.add_patch(plt.Polygon([[0.5, 0.5], [0.4, 0.6], [0.6, 0.6], [0.5, 0.7], [0.4, 0.6], [0.6, 0.6]], color='cyan'))\n\n# Add an octagon to the colorbar\ncbar.ax.add_patch(plt.Polygon([[0.5, 0.5], [0.4, 0.6], [0.6, 0.6], [0.5, 0.7], [0.4, 0.6], [0.6, 0.6]], color='magenta'))\n\n# Add a nonagon to the colorbar\ncbar.ax.add_patch(plt.Polygon([[0.5, 0.5], [0.4, 0.6], [0.6, 0.6], [0.5, 0.7], [0.4, 0.6], [0.6, 0.6]], color='lime'))\n\n# Add a decagon to the colorbar\ncbar.ax.add_patch(plt.Polygon([[0.5, 0.5], [0.4, 0.6], [0.6, 0.6], [0.5, 0.7], [0.4, 0.6], [0.6, 0.6]], color='silver'))\n\n# Add a dodecagon to the colorbar\ncbar.ax.add_patch(plt.Polygon([[0.5, 0.5], [0.4, 0.6], [0.6, 0.6], [0.5, 0.7], [0.4, 0.6], [0.6, 0.6]], color='gold'))\n\n# Add a trapezoid to the colorbar\ncbar.ax.add_patch(plt.Polygon([[0.5, 0.5], [0.4, 0.6], [0.6, 0.6], [0.5, 0.7], [0.4, 0.6], [0.6, 0.6]], color='navy'))\n\n# Add a parallelogram to the colorbar\ncbar.ax.add_patch(plt.Polygon([[0.5, 0.5], [0.4, 0.6], [0.6, 0.6], [0.5, 0.7], [0.4, 0.6], [0.6, 0.6]], color='maroon'))\n\n# Add a rhombus to the colorbar\ncbar.ax.add_patch(plt.Polygon([[0.5, 0.5], [0.4, 0.6], [0.6, 0.6], [0.5, 0.7], [0.4, 0.6], [0.6, 0.6]], color='olive'))\n\n# Add a kite to the colorbar\ncbar.ax.add_patch(plt.Polygon([[0.5, 0.5], [0.4, 0.6], [0.6, 0.6], [0.5, 0.7], [0.4, 0.6], [0.6, 0.6]], color='indigo'))\n\n# Add a trapezoid to the colorbar\ncbar.ax.add_patch(plt.Polygon([[0.5, 0.5], [0.4, 0.6], [0.6, 0.6], [0.5, 0.7], [0.4, 0.6], [0.6, 0.6]], color='violet'))\n\n# Add a parallelogram to the colorbar\ncbar.ax.add_patch(plt.Polygon([[0.5, 0.5], [0.4, 0.6], [0.6, 0.6], [0.5, 0.7], [0.4, 0.6], [0.6, 0.6]], color='silver'))\n\n# Add a rhombus to the colorbar\ncbar.ax.add_patch(plt.Polygon([[0.5, 0.5], [0.4, 0.6], [0.6, 0.6], [0.5, 0.7], [0.4, 0.6], [0.6, 0.6]], color='gold'))\n\n# Add a kite to the colorbar\ncbar.ax.add_patch(plt.Polygon([[0.5, 0.5], [0.4, 0.6], [0.6, 0.6], [0.5, 0.7], [0.4, 0.6], [0.6, 0.6]], color='navy'))\n\n# Add a trapezoid to the colorbar\ncbar.ax.add_patch(plt.Polygon([[0.5, 0.5], [0.4, 0.6], [0.6, 0.6], [0.5, 0.7], [0.4, 0.6], [0.6, 0.6]], color='maroon'))\n\n# Add a parallelogram to the colorbar\ncbar.ax.add_patch(plt.Polygon([[0.5, 0.5], [0.4, 0.6], [0.6, 0.6], [0.5, 0.7], [0.4, 0.6], [0.6, 0.6]], color='olive'))\n\n# Add a rhombus to the colorbar\ncbar.ax.add_patch(plt.Polygon([[0.5, 0.5], [0.4, 0.6], [0.6, 0.6], [0.5, 0.7], [0.4, 0.6], [0.6, 0.6]], color='indigo'))\n\n# Add a kite to the colorbar\ncbar.ax.add_patch(plt.Polygon([[0.5, 0.5], [0.4, 0.6], [0.6, 0.6], [0.5, 0.7], [0.4, 0.6], [0.6, 0.6]], color='violet'))\n\n# Add a trapezoid to the colorbar\ncbar.ax.add_patch(plt.Polygon([[0.5, 0.5], [0.4, 0.6], [0.6, 0.6], [0.5, 0.7], [0.4, 0.6], [0.6, 0.6]], color='silver'))\n\n# Add a parallelogram to the colorbar\ncbar.ax.add_patch(plt.Polygon([[0.5, 0.5], [0.4, 0.6], [0.6, 0.6], [0.5, 0.7], [0.4, 0.6], [0.6, 0.6]], color='gold'))\n\n# Add a rhombus to the colorbar\ncbar.ax.add_patch(plt.Polygon([[0.5, 0.5], [0.4, 0.6], [0.6, 0.6], [0.5, 0.7], [0.4, 0.6], [0.6, 0.6]], color='navy'))\n\n# Add a kite to the colorbar\ncbar.ax.add_patch(plt.Polygon([[0.5, 0.5], [0.4, 0.6], [0.6, 0.6], [0.5, 0.7], [0.4, 0.6], [0.6, 0.6]], color='maroon'))\n\n# Add a trapezoid to the colorbar\ncbar.ax.add_patch(plt.Polygon([[0.5, 0.5], [0.4, 0.6], [0.6, 0.6], [0.5, 0.7], [0.4, 0.6], [0.6, 0.6]], color='olive'))\n\n# Add a parallelogram to the colorbar\ncbar.ax.add_patch(plt.Polygon([[0.5, 0.5], [0.4, 0.6], [0.6, 0.6], [0.5, 0.7], [0.4, 0.6], [0.6, 0.6]], color='indigo'))\n\n# Add a rhombus to the colorbar\ncbar.ax.add_patch(plt.Polygon([[0.5, 0.5], [0.4, 0.6], [0.6, 0.6], [0.5, 0.7], [0.4, 0.6], [0.6, 0.6]], color='violet'))\n\n# Add a trapezoid to the colorbar\ncbar.ax.add_patch(plt.Polygon([[0.5, 0.5], [0.4, 0.6], [0.6, 0.6], [0.5, 0.7], [0.4, 0.6], [0.6, 0.6]], color='silver'))\n\n# Add a parallelogram to the colorbar\ncbar.ax.add_patch(plt.Polygon([[0.5, 0.5], [0.4, 0.6], [0.6, 0.6], [0.5, 0.7], [0.4, 0.6], [0.6, 0.6]], color='gold'))\n\n# Add a rhombus to the colorbar\ncbar.ax.add_patch(plt.Polygon([[0.5, 0.5], [0.4, 0.6], [0.6, 0.6], [0.5, 0.7], [0.4, 0.6], [0.6, 0.6]], color='navy'))\n\n# Add a kite to the colorbar\ncbar.ax.add_patch(plt.Polygon([[0.5, 0.5], [0.4, 0.6], [0.6, 0.6], [0.5, 0.7], [0.4, 0.6], [0.6, 0.6]], color='maroon'))\n\n# Add a trapezoid to the colorbar\ncbar.ax.add_patch(plt.Polygon([[0.5, 0.5], [0.4, 0.6], [0.6, 0.6], [0.5, 0.7], [0.4, 0.6], [0.6, 0.6]], color='olive'))\n\n# Add a parallelogram to the colorbar\ncbar.ax.add_patch(plt.Polygon([[0.5, 0.5], [0.4, 0.6], [0.6, 0.6], [0.5, 0.7], [0.4, 0.6], [0.6, 0.6]], color='indigo'))\n\n# Add a rhombus to the colorbar\ncbar.ax.add_patch(plt.Polygon([[0.5, 0.5], [0.4, 0.6], [0.6, 0.6], [0.5, 0.7], [0.4, 0.6], [0.6, 0.6]], color='violet'))\n\n# Add a trapezoid to the colorbar\ncbar.ax.add_patch(plt.Polygon([[0.5, 0.5], [0.4, 0.6], [0.6, 0.6], [0.5, 0.7], [0.4, 0.6], [0.6, 0.6]], color='silver'))\n\n# Add a parallelogram to the colorbar\ncbar.ax.add_patch(plt.Polygon([[0.5, 0.5], [0.4, 0.6], [0.6, 0.6], [0.5, 0.7], [0.4, 0.6], [0.6, 0.6]], color='gold'))\n\n# Add a rhombus to the colorbar\ncbar.ax.add_patch(plt.Polygon([[0.5, 0.5], [0.4, 0.6], [0.6, 0.6], [0.5, 0.7], [0.4, 0.6], [0.6, 0.6]], color='navy'))\n\n# Add a kite to the colorbar\ncbar.ax.add_patch(plt.Polygon([[0.5, 0.5], [0.4, 0.6], [0.6, 0.6], [0.5, 0.7], [0.4, 0.6], [0.6, 0.6]], color='maroon'))\n\n# Add a trapezoid to the colorbar\ncbar.ax.add_patch(plt.Polygon([[0.5, 0.5], [0.4, 0.6], [0.6, 0.6], [0.5, 0.7], [0.4, 0.6], [0.6, 0.6]], color='olive'))\n\n# Add a parallelogram to the colorbar\ncbar.ax.add_patch(plt.Polygon([[0.5, 0.5], [0.4, 0.6], [0.6, 0.6], ["}
{"file": "dataset/ori_500/multidiff_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the left column\nleft_data = [44.15, 44.05, 41.55, 40.90, 40.65, 39.45, 36.70]\nleft_labels = ['Engstrom (M1)', 'Zhang (M2)', 'Rice (M3)', 'Rade (M4)', 'Hendryks (M5)', 'Addep. (M6)', 'Carmon (M7)']\n\n# Data for the right column\nright_data = [\n    [0.00, 6.20, 4.90, 4.25, 3.65, 2.50],\n    [0.00, 5.15, 2.80, 5.25, 2.95, 2.50],\n    [0.00, 5.35, 6.30, 5.45, 3.85, 2.95],\n    [0.00, 6.25, 6.45, 7.15, 8.95, 6.85],\n    [0.00, 7.25, 7.50, 8.75, 9.15, 7.15],\n    [0.00, 8.75, 9.00, 9.15, 9.90, 9.90],\n    [0.00, 10.90, 9.90, 9.15, 9.90, 9.90]\n]\nright_labels = ['Engstrom (M1)', 'Zhang (M2)', 'Rice (M3)', 'Rade (M4)', 'Hendryks (M5)', 'Addep. (M6)', 'Carmon (M7)']\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot the left column\nax.barh(left_labels, left_data, color='green')\n\n# Plot the right column\nfor i, row in enumerate(right_data):\n    ax.barh(right_labels[i], row, color=plt.cm.Greens(i/len(right_data)))\n\n# Set the title of the plot\nax.set_title('Robust Error (%)')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\ndata = {\n    'VGG16': [0.551, 0.538, 0.744, 0.762],\n    'Resnet101': [0.394, 0.477, 0.62, 0.65],\n    'Rotation Invariance': [0.8, 0.85, 0.9, 0.95]\n}\n\n# Create a figure and a set of subplots\nfig, axs = plt.subplots(1, 3, figsize=(10, 4))\n\n# Plot the data\nfor i, (key, value) in enumerate(data.items()):\n    axs[i].plot(value, label=key)\n    axs[i].set_xlabel('Time')\n    axs[i].set_ylabel('Accuracy')\n    axs[i].legend()\n\n# Set the title of the first subplot\naxs[0].set_title('A VGG16')\n\n# Set the title of the second subplot\naxs[1].set_title('B Resnet101')\n\n# Set the title of the third subplot\naxs[2].set_title('C Rotation invariance')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Set the title of the plot\nax.set_title('Cosmetics')\n\n# Create a bar chart\nax.bar(['PaleSkin', 'OvalFace', 'Smiling', 'Attractive', 'Male', 'BigLips', 'PointyNose', 'White', 'BigNose', 'NoBeard', 'HeavyMakeup'], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], color='blue')\n\n# Set the x-axis label\nax.set_xlabel('Cosmetic Attributes')\n\n# Set the y-axis label\nax.set_ylabel('Price')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(5.0, 6.0))\n\n# Set the title of the plot\nax.set_title('a')\n\n# Create a scatter plot with random data\nx = np.random.rand(10)\ny = np.random.rand(10)\nax.scatter(x, y)\n\n# Create a line plot with random data\nx = np.linspace(0, 50, 100)\ny = np.sin(x)\nax.plot(x, y)\n\n# Create a bar chart with random data\nx = ['0', '10k', '20k', '30k', '40k']\ny = [8, 7, 6, 5, 4]\nax.bar(x, y)\n\n# Create a histogram with random data\nx = np.random.normal(0, 1, 1000)\nax.hist(x, bins=10)\n\n# Create a pie chart with random data\nx = [1, 2, 3, 4, 5]\ny = [10, 20, 30, 40, 50]\nax.pie(y, labels=x)\n\n# Create a heatmap with random data\nx = np.random.rand(10, 10)\nax.imshow(x, cmap='hot', interpolation='nearest')\n\n# Create a contour plot with random data\nx = np.linspace(-10, 10, 100)\ny = np.linspace(-10, 10, 100)\nX, Y = np.meshgrid(x, y)\nZ = np.sin(X) + np.cos(Y)\nax.contourf(X, Y, Z)\n\n# Create a scatter plot with random data\nx = np.random.rand(10)\ny = np.random.rand(10)\nax.scatter(x, y)\n\n# Create a line plot with random data\nx = np.linspace(0, 50, 100)\ny = np.sin(x)\nax.plot(x, y)\n\n# Create a bar chart with random data\nx = ['0', '10k', '20k', '30k', '40k']\ny = [8, 7, 6, 5, 4]\nax.bar(x, y)\n\n# Create a histogram with random data\nx = np.random.normal(0, 1, 1000)\nax.hist(x, bins=10)\n\n# Create a pie chart with random data\nx = [1, 2, 3, 4, 5]\ny = [10, 20, 30, 40, 50]\nax.pie(y, labels=x)\n\n# Create a heatmap with random data\nx = np.random.rand(10, 10)\nax.imshow(x, cmap='hot', interpolation='nearest')\n\n# Create a contour plot with random data\nx = np.linspace(-10, 10, 100)\ny = np.linspace(-10, 10, 100)\nX, Y = np.meshgrid(x, y)\nZ = np.sin(X) + np.cos(Y)\nax.contourf(X, Y, Z)\n\n# Create a scatter plot with random data\nx = np.random.rand(10)\ny = np.random.rand(10)\nax.scatter(x, y)\n\n# Create a line plot with random data\nx = np.linspace(0, 50, 100)\ny = np.sin(x)\nax.plot(x, y)\n\n# Create a bar chart with random data\nx = ['0', '10k', '20k', '30k', '40k']\ny = [8, 7, 6, 5, 4]\nax.bar(x, y)\n\n# Create a histogram with random data\nx = np.random.normal(0, 1, 1000)\nax.hist(x, bins=10)\n\n# Create a pie chart with random data\nx = [1, 2, 3, 4, 5]\ny = [10, 20, 30, 40, 50]\nax.pie(y, labels=x)\n\n# Create a heatmap with random data\nx = np.random.rand(10, 10)\nax.imshow(x, cmap='hot', interpolation='nearest')\n\n# Create a contour plot with random data\nx = np.linspace(-10, 10, 100)\ny = np.linspace(-10, 10, 100)\nX, Y = np.meshgrid(x, y)\nZ = np.sin(X) + np.cos(Y)\nax.contourf(X, Y, Z)\n\n# Create a scatter plot with random data\nx = np.random.rand(10)\ny = np.random.rand(10)\nax.scatter(x, y)\n\n# Create a line plot with random data\nx = np.linspace(0, 50, 100)\ny = np.sin(x)\nax.plot(x, y)\n\n# Create a bar chart with random data\nx = ['0', '10k', '20k', '30k', '40k']\ny = [8, 7, 6, 5, 4]\nax.bar(x, y)\n\n# Create a histogram with random data\nx = np.random.normal(0, 1, 1000)\nax.hist(x, bins=10)\n\n# Create a pie chart with random data\nx = [1, 2, 3, 4, 5]\ny = [10, 20, 30, 40, 50]\nax.pie(y, labels=x)\n\n# Create a heatmap with random data\nx = np.random.rand(10, 10)\nax.imshow(x, cmap='hot', interpolation='nearest')\n\n# Create a contour plot with random data\nx = np.linspace(-10, 10, 100)\ny = np.linspace(-10, 10, 100)\nX, Y = np.meshgrid(x, y)\nZ = np.sin(X) + np.cos(Y)\nax.contourf(X, Y, Z)\n\n# Create a scatter plot with random data\nx = np.random.rand(10)\ny = np.random.rand(10)\nax.scatter(x, y)\n\n# Create a line plot with random data\nx = np.linspace(0, 50, 100)\ny = np.sin(x)\nax.plot(x, y)\n\n# Create a bar chart with random data\nx = ['0', '10k', '20k', '30k', '40k']\ny = [8, 7, 6, 5, 4]\nax.bar(x, y)\n\n# Create a histogram with random data\nx = np.random.normal(0, 1, 1000)\nax.hist(x, bins=10)\n\n# Create a pie chart with random data\nx = [1, 2, 3, 4, 5]\ny = [10, 20, 30, 40, 50]\nax.pie(y, labels=x)\n\n# Create a heatmap with random data\nx = np.random.rand(10, 10)\nax.imshow(x, cmap='hot', interpolation='nearest')\n\n# Create a contour plot with random data\nx = np.linspace(-10, 10, 100)\ny = np.linspace(-10, 10, 100)\nX, Y = np.meshgrid(x, y)\nZ = np.sin(X) + np.cos(Y)\nax.contourf(X, Y, Z)\n\n# Create a scatter plot with random data\nx = np.random.rand(10)\ny = np.random.rand(10)\nax.scatter(x, y)\n\n# Create a line plot with random data\nx = np.linspace(0, 50, 100)\ny = np.sin(x)\nax.plot(x, y)\n\n# Create a bar chart with random data\nx = ['0', '10k', '20k', '30k', '40k']\ny = [8, 7, 6, 5, 4]\nax.bar(x, y)\n\n# Create a histogram with random data\nx = np.random.normal(0, 1, 1000)\nax.hist(x, bins=10)\n\n# Create a pie chart with random data\nx = [1, 2, 3, 4, 5]\ny = [10, 20, 30, 40, 50]\nax.pie(y, labels=x)\n\n# Create a heatmap with random data\nx = np.random.rand(10, 10)\nax.imshow(x, cmap='hot', interpolation='nearest')\n\n# Create a contour plot with random data\nx = np.linspace(-10, 10, 100)\ny = np.linspace(-10, 10, 100)\nX, Y = np.meshgrid(x, y)\nZ = np.sin(X) + np.cos(Y)\nax.contourf(X, Y, Z)\n\n# Create a scatter plot with random data\nx = np.random.rand(10)\ny = np.random.rand(10)\nax.scatter(x, y)\n\n# Create a line plot with random data\nx = np.linspace(0, 50, 100)\ny = np.sin(x)\nax.plot(x, y)\n\n# Create a bar chart with random data\nx = ['0', '10k', '20k', '30k', '40k']\ny = [8, 7, 6, 5, 4]\nax.bar(x, y)\n\n# Create a histogram with random data\nx = np.random.normal(0, 1, 1000)\nax.hist(x, bins=10)\n\n# Create a pie chart with random data\nx = [1, 2, 3, 4, 5]\ny = [10, 20, 30, 40, 50]\nax.pie(y, labels=x)\n\n# Create a heatmap with random data\nx = np.random.rand(10, 10)\nax.imshow(x, cmap='hot', interpolation='nearest')\n\n# Create a contour plot with random data\nx = np.linspace(-10, 10, 100)\ny = np.linspace(-10, 10, 100)\nX, Y = np.meshgrid(x, y)\nZ = np.sin(X) + np.cos(Y)\nax.contourf(X, Y, Z)\n\n# Create a scatter plot with random data\nx = np.random.rand(10)\ny = np.random.rand(10)\nax.scatter(x, y)\n\n# Create a line plot with random data\nx = np.linspace(0, 50, 100)\ny = np.sin(x)\nax.plot(x, y)\n\n# Create a bar chart with random data\nx = ['0', '10k', '20k', '30k', '40k']\ny = [8, 7, 6, 5, 4]\nax.bar(x, y)\n\n# Create a histogram with random data\nx = np.random.normal(0, 1, 1000)\nax.hist(x, bins=10)\n\n# Create a pie chart with random data\nx = [1, 2, 3, 4, 5]\ny = [10, 20, 30, 40, 50]\nax.pie(y, labels=x)\n\n# Create a heatmap with random data\nx = np.random.rand(10, 10)\nax.imshow(x, cmap='hot', interpolation='nearest')\n\n# Create a contour plot with random data\nx = np.linspace(-10, 10, 100)\ny = np.linspace(-10, 10, 100)\nX, Y = np.meshgrid(x, y)\nZ = np.sin(X) + np.cos(Y)\nax.contourf(X, Y, Z)\n\n# Create a scatter plot with random data\nx = np.random.rand(10)\ny = np.random.rand(10)\nax.scatter(x, y)\n\n# Create a line plot with random data\nx = np.linspace(0, 50, 100)\ny = np.sin(x)\nax.plot(x, y)\n\n# Create a bar chart with random data\nx = ['0', '10k', '20k', '30k', '40k']\ny = [8, 7, 6, 5, 4]\nax.bar(x, y)\n\n# Create a histogram with random data\nx = np.random.normal(0, 1, 1000)\nax.hist(x, bins=10)\n\n# Create a pie chart with random data\nx = [1, 2, 3, 4, 5]\ny = [10, 20, 30, 40, 50]\nax.pie(y, labels=x)\n\n# Create a heatmap with random data\nx = np.random.rand(10, 10)\nax.imshow(x, cmap='hot', interpolation='nearest')\n\n# Create a contour plot with random data\nx = np.linspace(-10, 10, 100)\ny = np.linspace(-10, 10, 100)\nX, Y = np.meshgrid(x, y)\nZ = np.sin(X) + np.cos(Y)\nax.contourf(X, Y, Z)\n\n# Create a scatter plot with random data\nx = np.random.rand(10)\ny = np.random.rand(10)\nax.scatter(x, y)\n\n# Create a line plot with random data\nx = np.linspace(0, 50, 100)\ny = np.sin(x)\nax.plot(x, y)\n\n# Create a bar chart with random data\nx = ['0', '10k', '20k', '30k', '40k']\ny = [8, 7, 6, 5, 4]\nax.bar(x, y)\n\n# Create a histogram with random data\nx = np.random.normal(0, 1, 1000)\nax.hist(x, bins=10)\n\n# Create a pie chart with random data\nx = [1, 2, 3, 4, 5]\ny = [10, 20, 30, 40, 50]\nax.pie(y, labels=x)\n\n# Create a heatmap with random data\nx = np.random.rand(10, 10)\nax.imshow(x, cmap='hot', interpolation='nearest')\n\n# Create a contour plot with random data\nx = np.linspace(-10, 10, 100)\ny = np.linspace(-10, 10, 100)\nX, Y = np.meshgrid(x, y)\nZ = np.sin(X) + np.cos(Y)\nax.contourf(X, Y, Z)\n\n# Create a scatter plot with random data\nx = np.random.rand(10)\ny = np.random.rand(10)\nax.scatter(x, y)\n\n# Create a line plot with random data\nx = np.linspace(0, 50, 100)\ny = np.sin(x)\nax.plot(x, y)\n\n# Create a bar chart with random data\nx = ['0', '10k', '20k', '30k', '40k']\ny = [8, 7, 6, 5, 4]\nax.bar(x, y)\n\n# Create a histogram with random data\nx = np.random.normal(0, 1, 1000)\nax.hist(x, bins=10)\n\n# Create a pie chart with random data\nx = [1, 2, 3, 4, 5]\ny = [10, 20, 30, 40, 50]\nax.pie(y, labels=x)\n\n# Create a heatmap with random data\nx = np.random.rand(10, 10)\nax.imshow(x, cmap='hot', interpolation='nearest')\n\n# Create a contour plot with random data\nx = np.linspace(-10, 10, 100)\ny = np.linspace(-10, 10, 100)\nX, Y = np.meshgrid(x, y)\nZ = np.sin(X) + np.cos(Y)\nax.contourf(X, Y, Z)\n\n# Create a scatter plot with random data\nx = np.random.rand(10)\ny = np.random.rand(10)\nax.scatter(x, y)\n\n# Create a line plot with random data\nx = np.linspace(0, 50, 100)\ny = np.sin(x)\nax.plot(x, y)\n\n# Create a bar chart with random data\nx = ['0', '10k', '20k', '30k', '40k']\ny = [8, 7, 6, 5, 4]\nax.bar(x, y)\n\n# Create a histogram with random data\nx = np.random.normal(0, 1, 1000)\nax.hist(x, bins=10)\n\n# Create a pie chart with random data\nx = [1, 2, 3, 4, 5]\ny = [10, 20, 30, 40, 50]\nax.pie(y, labels=x)\n\n# Create a heatmap with random data\nx = np.random.rand(10, 10)\nax.imshow(x, cmap='hot', interpolation='nearest')\n\n# Create a contour plot with random data\nx = np.linspace(-10, 10, 100)\ny = np.linspace(-10, 10, 100)\nX, Y = np.meshgrid(x, y)\nZ = np.sin(X) + np.cos(Y)\nax.contourf(X, Y, Z)\n\n# Create a scatter plot with random data\nx = np.random.rand(10)\ny = np.random.rand(10)\nax.scatter(x, y)\n\n# Create a line plot with random data\nx = np.linspace(0, 50, 100)\ny = np.sin(x)\nax.plot(x, y)\n\n# Create a bar chart with random data\nx = ['0', '10k', '20k', '30k', '40k']\ny = [8, 7, 6, 5, 4]\nax.bar(x, y)\n\n# Create a histogram with random data\nx = np.random.normal(0, "}
{"file": "dataset/ori_500/multidiff_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 4.0))\n\n# Set the background color of the plot\nax.set_facecolor('lightblue')\n\n# Create a bar chart with the data\nbars = ax.bar(['Sentiment', 'Toxicity', 'News'], [0.35, 0.25, 0.25], color='darkblue')\n\n# Add labels to the bars\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 2), ha='center', va='bottom')\n\n# Set the title of the plot\nax.set_title('Sentiment Analysis of News Articles')\n\n# Set the x-axis label\nax.set_xlabel('News Article Categories')\n\n# Set the y-axis label\nax.set_ylabel('Sentiment Score')\n\n# Set the y-axis limits\nax.set_ylim(0, 0.4)\n\n# Set the y-axis ticks\nax.set_yticks([0.1, 0.2, 0.3, 0.4])\n\n# Set the y-axis tick labels\nax.set_yticklabels(['-0.10', '-0.20', '-0.30', '-0.40'])\n\n# Set the color of the y-axis ticks\nax.tick_params(axis='y', colors='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='"}
{"file": "dataset/ori_500/multidiff_16.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Success Rate by Year')\n\n# Set the x-axis label\nax.set_xlabel('Year')\n\n# Set the y-axis label\nax.set_ylabel('# Successful adv. circuits')\n\n# Set the x-ticks\nax.set_xticks([1, 2, 3, 4])\n\n# Set the x-tick labels\nax.set_xticklabels(['c1355', 'c1908', 'c2670', 'c3540'])\n\n# Set the y-ticks\nax.set_yticks([0, 10, 20, 30, 40, 50, 60])\n\n# Set the y-tick labels\nax.set_yticklabels(['0', '10', '20', '30', '40', '50', '60'])\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the success rate line\nax.plot([1, 2, 3, 4], [50, 55, 60, 55], color='red')\n\n# Set the color of the upper success threshold line\nax.axhline(y=60, color='red', linestyle='-')\n\n# Set the color of the lower success threshold line\nax.axhline(y=50, color='red', linestyle='-')\n\n# Set the color of the OMAA KPA line\nax.axhline(y=0.5, color='red', linestyle='-')\n\n# Set the color of the OMAA KPA line\nax.axhline(y=0.35, color='red', linestyle='-')\n\n# Set the color of the OMAA KPA line\nax.axhline(y=0.45, color='red', linestyle='-')\n\n# Set the color of the OMAA KPA line\nax.axhline(y=0.4, color='red', linestyle='-')\n\n# Set the color of the OMAA KPA line\nax.axhline(y=0.55, color='red', linestyle='-')\n\n# Set the color of the OMAA KPA line\nax.axhline(y=0.6, color='red', linestyle='-')\n\n# Set the color of the OMAA KPA line\nax.axhline(y=0.65, color='red', linestyle='-')\n\n# Set the color of the OMAA KPA line\nax.axhline(y=0.7, color='red', linestyle='-')\n\n# Set the color of the OMAA KPA line\nax.axhline(y=0.75, color='red', linestyle='-')\n\n# Set the color of the OMAA KPA line\nax.axhline(y=0.8, color='red', linestyle='-')\n\n# Set the color of the OMAA KPA line\nax.axhline(y=0.85, color='red', linestyle='-')\n\n# Set the color of the OMAA KPA line\nax.axhline(y=0.9, color='red', linestyle='-')\n\n# Set the color of the OMAA KPA line\nax.axhline(y=0.95, color='red', linestyle='-')\n\n# Set the color of the OMAA KPA line\nax.axhline(y=1.0, color='red', linestyle='-')\n\n# Set the color of the OMAA KPA line\nax.axhline(y=1.05, color='red', linestyle='-')\n\n# Set the color of the OMAA KPA line\nax.axhline(y=1.1, color='red', linestyle='-')\n\n# Set the color of the OMAA KPA line\nax.axhline(y=1.15, color='red', linestyle='-')\n\n# Set the color of the OMAA KPA line\nax.axhline(y=1.2, color='red', linestyle='-')\n\n# Set the color of the OMAA KPA line\nax.axhline(y=1.25, color='red', linestyle='-')\n\n# Set the color of the OMAA KPA line\nax.axhline(y=1.3, color='red', linestyle='-')\n\n# Set the color of the OMAA KPA line\nax.axhline(y=1.35, color='red', linestyle='-')\n\n# Set the color of the OMAA KPA line\nax.axhline(y=1.4, color='red', linestyle='-')\n\n# Set the color of the OMAA KPA line\nax.axhline(y=1.45, color='red', linestyle='-')\n\n# Set the color of the OMAA KPA line\nax.axhline(y=1.5, color='red', linestyle='-')\n\n# Set the color of the OMAA KPA line\nax.axhline(y=1.55, color='red', linestyle='-')\n\n# Set the color of the OMAA KPA line\nax.axhline(y=1.6, color='red', linestyle='-')\n\n# Set the color of the OMAA KPA line\nax.axhline(y=1.65, color='red', linestyle='-')\n\n# Set the color of the OMAA KPA line\nax.axhline(y=1.7, color='red', linestyle='-')\n\n# Set the color of the OMAA KPA line\nax.axhline(y=1.75, color='red', linestyle='-')\n\n# Set the color of the OMAA KPA line\nax.axhline(y=1.8, color='red', linestyle='-')\n\n# Set the color of the OMAA KPA line\nax.axhline(y=1.85, color='red', linestyle='-')\n\n# Set the color of the OMAA KPA line\nax.axhline(y=1.9, color='red', linestyle='-')\n\n# Set the color of the OMAA KPA line\nax.axhline(y=1.95, color='red', linestyle='-')\n\n# Set the color of the OMAA KPA line\nax.axhline(y=2.0, color='red', linestyle='-')\n\n# Set the color of the OMAA KPA line\nax.axhline(y=2.05, color='red', linestyle='-')\n\n# Set the color of the OMAA KPA line\nax.axhline(y=2.1, color='red', linestyle='-')\n\n# Set the color of the OMAA KPA line\nax.axhline(y=2.15, color='red', linestyle='-')\n\n# Set the color of the OMAA KPA line\nax.axhline(y=2.2, color='red', linestyle='-')\n\n# Set the color of the OMAA KPA line\nax.axhline(y=2.25, color='red', linestyle='-')\n\n# Set the color of the OMAA KPA line\nax.axhline(y=2.3, color='red', linestyle='-')\n\n# Set the color of the OMAA KPA line\nax.axhline(y=2.35, color='red', linestyle='-')\n\n# Set the color of the OMAA KPA line\nax.axhline(y=2.4, color='red', linestyle='-')\n\n# Set the color of the OMAA KPA line\nax.axhline(y=2.45, color='red', linestyle='-')\n\n# Set the color of the OMAA KPA line\nax.axhline(y=2.5, color='red', linestyle='-')\n\n# Set the color of the OMAA KPA line\nax.axhline(y=2.55, color='red', linestyle='-')\n\n# Set the color of the OMAA KPA line\nax.axhline(y=2.6, color='red', linestyle='-')\n\n# Set the color of the OMAA KPA line\nax.axhline(y=2.65, color='red', linestyle='-')\n\n# Set the color of the OMAA KPA line\nax.axhline(y=2.7, color='red', linestyle='-')\n\n# Set the color of the OMAA KPA line\nax.axhline(y=2.75, color='red', linestyle='-')\n\n# Set the color of the OMAA KPA line\nax.axhline(y=2.8, color='red', linestyle='-')\n\n# Set the color of the OMAA KPA line\nax.axhline(y=2.85, color='red', linestyle='-')\n\n# Set the color of the OMAA KPA line\nax.axhline(y=2.9, color='red', linestyle='-')\n\n# Set the color of the OMAA KPA line\nax.axhline(y=2.95, color='red', linestyle='-')\n\n# Set the color of the OMAA KPA line\nax.axhline(y=3.0, color='red', linestyle='-')\n\n# Set the color of the OMAA KPA line\nax.axhline(y=3.05, color='red', linestyle='-')\n\n# Set the color of the OMAA KPA line\nax.axhline(y=3.1, color='red', linestyle='-')\n\n# Set the color of the OMAA KPA line\nax.axhline(y=3.15, color='red', linestyle='-')\n\n# Set the color of the OMAA KPA line\nax.axhline(y=3.2, color='red', linestyle='-')\n\n# Set the color of the OMAA KPA line\nax.axhline(y=3.25, color='red', linestyle='-')\n\n# Set the color of the OMAA KPA line\nax.axhline(y=3.3, color='red', linestyle='-')\n\n# Set the color of the OMAA KPA line\nax.axhline(y=3.35, color='red', linestyle='-')\n\n# Set the color of the OMAA KPA line\nax.axhline(y=3.4, color='red', linestyle='-')\n\n# Set the color of the OMAA KPA line\nax.axhline(y=3.45, color='red', linestyle='-')\n\n# Set the color of the OMAA KPA line\nax.axhline(y=3.5, color='red', linestyle='-')\n\n# Set the color of the OMAA KPA line\nax.axhline(y=3.55, color='red', linestyle='-')\n\n# Set the color of the OMAA KPA line\nax.axhline(y=3.6, color='red', linestyle='-')\n\n# Set the color of the OMAA KPA line\nax.axhline(y=3.65, color='red', linestyle='-')\n\n# Set the color of the OMAA KPA line\nax.axhline(y=3.7, color='red', linestyle='-')\n\n# Set the color of the OMAA KPA line\nax.axhline(y=3.75, color='red', linestyle='-')\n\n# Set the color of the OMAA KPA line\nax.axhline(y=3.8, color='red', linestyle='-')\n\n# Set the color of the OMAA KPA line\nax.axhline(y=3.85, color='red', linestyle='-')\n\n# Set the color of the OMAA KPA line\nax.axhline(y=3.9, color='red', linestyle='-')\n\n# Set the color of the OMAA KPA line\nax.axhline(y=3.95, color='red', linestyle='-')\n\n# Set the color of the OMAA KPA line\nax.axhline(y=4.0, color='red', linestyle='-')\n\n# Set the color of the OMAA KPA line\nax.axhline(y=4.05, color='red', linestyle='-')\n\n# Set the color of the OMAA KPA line\nax.axhline(y=4.1, color='red', linestyle='-')\n\n# Set the color of the OMAA KPA line\nax.axhline(y=4.15, color='red', linestyle='-')\n\n# Set the color of the OMAA KPA line\nax.axhline(y=4.2, color='red', linestyle='-')\n\n# Set the color of the OMAA KPA line\nax.axhline(y=4.25, color='red', linestyle='-')\n\n# Set the color of the OMAA KPA line\nax.axhline(y=4.3, color='red', linestyle='-')\n\n# Set the color of the OMAA KPA line\nax.axhline(y=4.35, color='red', linestyle='-')\n\n# Set the color of the OMAA KPA line\nax.axhline(y=4.4, color='red', linestyle='-')\n\n# Set the color of the OMAA KPA line\nax.axhline(y=4.45, color='red', linestyle='-')\n\n# Set the color of the OMAA KPA line\nax.axhline(y=4.5, color='red', linestyle='-')\n\n# Set the color of the OMAA KPA line\nax.axhline(y=4.55, color='red', linestyle='-')\n\n# Set the color of the OMAA KPA line\nax.axhline(y=4.6, color='red', linestyle='-')\n\n# Set the color of the OMAA KPA line\nax.axhline(y=4.65, color='red', linestyle='-')\n\n# Set the color of the OMAA KPA line\nax.axhline(y=4.7, color='red', linestyle='-')\n\n# Set the color of the OMAA KPA line\nax.axhline(y=4.75, color='red', linestyle='-')\n\n# Set the color of the OMAA KPA line\nax.axhline(y=4.8, color='red', linestyle='-')\n\n# Set the color of the OMAA KPA line\nax.axhline(y=4.85, color='red', linestyle='-')\n\n# Set the color of the OMAA KPA line\nax.axhline(y=4.9, color='red', linestyle='-')\n\n# Set the color of the OMAA KPA line\nax.axhline(y=4.95, color='red', linestyle='-')\n\n# Set the color of the OMAA KPA line\nax.axhline(y=5.0, color='red', linestyle='-')\n\n# Set the color of the OMAA KPA line\nax.axhline(y=5.05, color='red', linestyle='-')\n\n# Set the color of the OMAA KPA line\nax.axhline(y=5.1, color='red', linestyle='-')\n\n# Set the color of the OMAA KPA line\nax.axhline(y=5.15, color='red', linestyle='-')\n\n# Set the color of the OMAA KPA line\nax.axhline(y=5.2, color='red', linestyle='-')\n\n# Set the color of the OMAA KPA line\nax.axhline(y=5.25, color='red', linestyle='-')\n\n# Set the color of the OMAA KPA line\nax.axhline(y=5.3, color='red', linestyle='-')\n\n# Set the color of the OMAA KPA line\nax.axhline(y=5.35, color='red', linestyle='-')\n\n# Set the color of the OMAA KPA line\nax.axhline(y=5.4, color='red', linestyle='-')\n\n# Set the color of the OMAA KPA line\nax.axhline(y=5.45, color='red', linestyle='-')\n\n# Set the color of the OMAA KPA line\nax.axhline(y=5.5, color='red', linestyle='-')\n\n# Set the color of the OMAA KPA line\nax.axhline(y=5.55, color='red', linestyle='-')\n\n# Set the color of the OMAA KPA line\nax.axhline(y=5.6, color='red', linestyle='-')\n\n# Set the color of the OMAA KPA line\nax.axhline(y=5.65, color='red', linestyle='-')\n\n# Set the color of the OMAA KPA line\nax.axhline(y=5.7, color='red', linestyle='-')\n\n# Set the color of the OMAA KPA line\nax.axhline(y=5.75, color='red', linestyle='-')\n\n# Set the color of the OMAA KPA line\nax.axhline(y=5.8, color='red', linestyle='-')\n\n# Set the color of the OMAA KPA line\nax.axhline(y=5.85, color='red', linestyle='-')\n\n# Set the color of the OMAA KPA line\nax.axhline(y=5.9, color='red', linestyle='-')\n\n# Set the color of the OMAA KPA line\nax.axhline(y=5.95, color='red', linestyle='-')\n\n# Set the color of the OMAA KPA line\nax.axhline(y=6.0, color='red', linestyle='-')\n\n# Set the color of the OMAA KPA line\nax.axhline(y=6.05, color='red', linestyle='-')\n\n# Set the color of the OMAA KPA line\nax.axhline(y=6.1, color='red', linestyle='-')\n\n# Set the color of the OMAA KPA line\nax.axhline(y=6.15, color='red', linestyle='-')\n\n# Set the color of the OMAA KPA line\nax.axhline(y=6.2, color='red', linestyle='-')\n\n# Set the color of the OMAA KPA line\nax.axhline(y=6.25, color='red', linestyle='-')\n\n# Set the color of the OMAA KPA line\nax.axhline(y=6.3, color='red', linestyle='-')\n\n# Set the color of the OMAA KPA line\nax.axhline(y=6.35, color='red', linestyle='-')\n\n# Set the color of the OMAA KPA line\nax.axhline(y=6.4, color='red', linestyle='-')\n\n# Set the color of the OMAA KPA line\nax.axhline(y=6.45, color='red', linestyle='-')\n\n# Set the color of the"}
{"file": "dataset/ori_500/multidiff_17.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis for the first plot\nfig, ax = plt.subplots(figsize=(10, 4))\n\n# Create a bar chart\nax.bar(['Education', 'Law', 'Technology', 'History', 'Geography', 'Humanities', 'Finance'], [250, 180, 300, 120, 150, 170, 220], color='blue')\n\n# Set the title of the plot\nax.set_title('Number of Publications by Domain')\n\n# Create a second figure and axis for the second plot\nfig, ax = plt.subplots(figsize=(10, 4))\n\n# Create a line chart\nax.plot([0, 1, 2, 3, 4, 5, 6], [20, 40, 60, 80, 100, 120, 140], color='orange')\nax.plot([0, 1, 2, 3, 4, 5, 6], [10, 30, 50, 70, 90, 110, 130], color='yellow')\nax.plot([0, 1, 2, 3, 4, 5, 6], [20, 40, 60, 80, 100, 120, 140], color='pink')\nax.plot([0, 1, 2, 3, 4, 5, 6], [10, 30, 50, 70, 90, 110, 130], color='cyan')\n\n# Set the title of the plot\nax.set_title('Knowledge Increase by Subject Area')\n\n# Display the plots\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_18.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the graph\nyears = ['2015', '2016', '2017', '2018', '2019', '2020', '2021', '2022']\nhardware_progress = [10, 20, 30, 40, 50, 60, 70, 80]\nsoftware_progress = [20, 30, 40, 50, 60, 70, 80, 90]\nai_progress = [30, 40, 50, 60, 70, 80, 90, 100]\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 10.0))\n\n# Plot the progress of each technology\nax.plot(years, hardware_progress, label='Hardware')\nax.plot(years, software_progress, label='Software')\nax.plot(years, ai_progress, label='AI')\n\n# Set the title and labels\nax.set_title('Technological Advancements')\nax.set_xlabel('Year')\nax.set_ylabel('Progress (%)')\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_19.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 10.0))\n\n# Set the title of the plot\nax.set_title('Average Legal Crime Rates by Country')\n\n# Create a bar chart with the data\nax.bar(['USA', 'UK', 'Germany', 'France', 'Italy', 'Spain'], [3.2, 2.9, 2.5, 2.7, 2.8, 2.6], color='orange')\n\n# Set the x-axis label\nax.set_xlabel('Country')\n\n# Set the y-axis label\nax.set_ylabel('Crime Rate per 100,000 Inhabitants')\n\n# Create a second subplot\nax2 = fig.add_subplot(212)\n\n# Set the title of the second plot\nax2.set_title('Average Legal Crime Rates by Country')\n\n# Create a scatter plot with the data\nax2.scatter(['Theft', 'Assault', 'Fraud', 'Drug Trafficking', 'Vandalism'], [140, 130, 120, 110, 100], color='blue')\n\n# Set the x-axis label\nax2.set_xlabel('Crime Type')\n\n# Set the y-axis label\nax2.set_ylabel('Crime Rate per 100,000 Inhabitants')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis for the bar chart\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Define the data for the bar chart\ncategories = ['Public School', 'Private School']\nvalues = [80, 20]\n\n# Create a bar chart\nax.bar(categories, values, color='orange')\n\n# Set the title of the chart\nax.set_title('Student Performance in Schools')\n\n# Set the x-axis label\nax.set_xlabel('School Type')\n\n# Set the y-axis label\nax.set_ylabel('Score')\n\n# Display the plot\nplt.show()\n\n# Create a figure and axis for the pie chart\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Define the data for the pie chart\nlabels = ['Books', 'Staff', 'Extracurricular', 'Facilities', 'Technology']\nsizes = [40, 30, 20, 10, 10]\ncolors = ['blue', 'green', 'orange', 'gray', 'purple']\n\n# Create a pie chart\nax.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%', startangle=90)\n\n# Set the title of the chart\nax.set_title('Resource Allocation in Schools')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_20.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis for the first plot\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Create a second figure and axis for the second plot\nfig2, ax2 = plt.subplots(figsize=(10, 5))\n\n# Create a color map for the first plot\ncmap = plt.get_cmap('Blues')\n\n# Create a color map for the second plot\ncmap2 = plt.get_cmap('Reds')\n\n# Create a scatter plot for the first plot\nax.scatter(np.random.rand(10), np.random.rand(10), c=np.random.rand(10), cmap=cmap)\n\n# Create a scatter plot for the second plot\nax2.scatter(np.random.rand(10), np.random.rand(10), c=np.random.rand(10), cmap=cmap2)\n\n# Set the title of the first plot\nax.set_title('Average Annual Temperature')\n\n# Set the title of the second plot\nax2.set_title('Geographical Elevation Distribution')\n\n# Show the plots\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_21.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the graph\nyears = ['2019', '2020', '2021', '2022']\ntotal_investment = [400, 350, 300, 250]\nproduct_types = ['Savings', 'CDs', 'Stocks', 'Bonds', 'REITs', 'Mutual Funds']\nnumber_of_accounts = [200, 175, 150, 125, 100, 75]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Plot the total investment over time\nax.plot(years, total_investment, color='orange')\nax.fill_between(years, total_investment, color='yellow')\n\n# Plot the number of accounts per product type\nfor i in range(len(product_types)):\n    ax.barh(product_types[i], number_of_accounts[i], color='blue')\n\n# Set the title and labels\nax.set_title('Investment Growth Over Time')\nax.set_xlabel('Total Investment ($)')\nax.set_ylabel('Product Type')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_22.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis for the first plot\nfig1, ax1 = plt.subplots(figsize=(10, 10))\nax1.set_title('AI Task Success Rates')\nax1.set_xlabel('Algorithm')\nax1.set_ylabel('Success Rate (%)')\n\n# Create a bar chart for the first plot\nax1.bar(['Image Recog.', 'Speech Recog.', 'Language Proc.', 'Game AI'], [85, 90, 95, 92], color='skyblue')\n\n# Create a figure and axis for the second plot\nfig2, ax2 = plt.subplots(figsize=(10, 10))\nax2.set_title('Algorithm Efficiency Scores')\nax2.set_xlabel('Algorithm')\nax2.set_ylabel('Efficiency (%)')\n\n# Create a bar chart for the second plot\nax2.bar(['Image Recog.', 'Speech Recog.', 'Language Proc.', 'Game AI'], [90, 85, 95, 90], color='lightgreen')\n\n# Create a figure and axis for the third plot\nfig3, ax3 = plt.subplots(figsize=(10, 10))\nax3.set_title('AI Model Adaptability')\nax3.set_xlabel('Model')\nax3.set_ylabel('Adaptability Score (%)')\n\n# Create a line chart for the third plot\nax3.plot(['Model A', 'Model B', 'Model C', 'Model D'], [95, 90, 85, 80], color='green')\n\n# Create a figure and axis for the fourth plot\nfig4, ax4 = plt.subplots(figsize=(10, 10))\nax4.set_title('AI Model Adaptability')\nax4.set_xlabel('Model')\nax4.set_ylabel('Adaptability Score (%)')\n\n# Create a line chart for the fourth plot\nax4.plot(['Model A', 'Model B', 'Model C', 'Model D'], [95, 90, 85, 80], color='blue')\n\n# Create a figure and axis for the fifth plot\nfig5, ax5 = plt.subplots(figsize=(10, 10))\nax5.set_title('AI Model Adaptability')\nax5.set_xlabel('Model')\nax5.set_ylabel('Adaptability Score (%)')\n\n# Create a line chart for the fifth plot\nax5.plot(['Model A', 'Model B', 'Model C', 'Model D'], [95, 90, 85, 80], color='red')\n\n# Create a figure and axis for the sixth plot\nfig6, ax6 = plt.subplots(figsize=(10, 10))\nax6.set_title('AI Model Adaptability')\nax6.set_xlabel('Model')\nax6.set_ylabel('Adaptability Score (%)')\n\n# Create a line chart for the sixth plot\nax6.plot(['Model A', 'Model B', 'Model C', 'Model D'], [95, 90, 85, 80], color='purple')\n\n# Create a figure and axis for the seventh plot\nfig7, ax7 = plt.subplots(figsize=(10, 10))\nax7.set_title('AI Model Adaptability')\nax7.set_xlabel('Model')\nax7.set_ylabel('Adaptability Score (%)')\n\n# Create a line chart for the seventh plot\nax7.plot(['Model A', 'Model B', 'Model C', 'Model D'], [95, 90, 85, 80], color='orange')\n\n# Create a figure and axis for the eighth plot\nfig8, ax8 = plt.subplots(figsize=(10, 10))\nax8.set_title('AI Model Adaptability')\nax8.set_xlabel('Model')\nax8.set_ylabel('Adaptability Score (%)')\n\n# Create a line chart for the eighth plot\nax8.plot(['Model A', 'Model B', 'Model C', 'Model D'], [95, 90, 85, 80], color='pink')\n\n# Create a figure and axis for the ninth plot\nfig9, ax9 = plt.subplots(figsize=(10, 10))\nax9.set_title('AI Model Adaptability')\nax9.set_xlabel('Model')\nax9.set_ylabel('Adaptability Score (%)')\n\n# Create a line chart for the ninth plot\nax9.plot(['Model A', 'Model B', 'Model C', 'Model D'], [95, 90, 85, 80], color='brown')\n\n# Create a figure and axis for the tenth plot\nfig10, ax10 = plt.subplots(figsize=(10, 10))\nax10.set_title('AI Model Adaptability')\nax10.set_xlabel('Model')\nax10.set_ylabel('Adaptability Score (%)')\n\n# Create a line chart for the tenth plot\nax10.plot(['Model A', 'Model B', 'Model C', 'Model D'], [95, 90, 85, 80], color='grey')\n\n# Create a figure and axis for the eleventh plot\nfig11, ax11 = plt.subplots(figsize=(10, 10))\nax11.set_title('AI Model Adaptability')\nax11.set_xlabel('Model')\nax11.set_ylabel('Adaptability Score (%)')\n\n# Create a line chart for the eleventh plot\nax11.plot(['Model A', 'Model B', 'Model C', 'Model D'], [95, 90, 85, 80], color='cyan')\n\n# Create a figure and axis for the twelfth plot\nfig12, ax12 = plt.subplots(figsize=(10, 10))\nax12.set_title('AI Model Adaptability')\nax12.set_xlabel('Model')\nax12.set_ylabel('Adaptability Score (%)')\n\n# Create a line chart for the twelfth plot\nax12.plot(['Model A', 'Model B', 'Model C', 'Model D'], [95, 90, 85, 80], color='magenta')\n\n# Create a figure and axis for the thirteenth plot\nfig13, ax13 = plt.subplots(figsize=(10, 10))\nax13.set_title('AI Model Adaptability')\nax13.set_xlabel('Model')\nax13.set_ylabel('Adaptability Score (%)')\n\n# Create a line chart for the thirteenth plot\nax13.plot(['Model A', 'Model B', 'Model C', 'Model D'], [95, 90, 85, 80], color='yellow')\n\n# Create a figure and axis for the fourteenth plot\nfig14, ax14 = plt.subplots(figsize=(10, 10))\nax14.set_title('AI Model Adaptability')\nax14.set_xlabel('Model')\nax14.set_ylabel('Adaptability Score (%)')\n\n# Create a line chart for the fourteenth plot\nax14.plot(['Model A', 'Model B', 'Model C', 'Model D'], [95, 90, 85, 80], color='black')\n\n# Create a figure and axis for the fifteenth plot\nfig15, ax15 = plt.subplots(figsize=(10, 10))\nax15.set_title('AI Model Adaptability')\nax15.set_xlabel('Model')\nax15.set_ylabel('Adaptability Score (%)')\n\n# Create a line chart for the fifteenth plot\nax15.plot(['Model A', 'Model B', 'Model C', 'Model D'], [95, 90, 85, 80], color='white')\n\n# Create a figure and axis for the sixteenth plot\nfig16, ax16 = plt.subplots(figsize=(10, 10))\nax16.set_title('AI Model Adaptability')\nax16.set_xlabel('Model')\nax16.set_ylabel('Adaptability Score (%)')\n\n# Create a line chart for the sixteenth plot\nax16.plot(['Model A', 'Model B', 'Model C', 'Model D'], [95, 90, 85, 80], color='silver')\n\n# Create a figure and axis for the seventeenth plot\nfig17, ax17 = plt.subplots(figsize=(10, 10))\nax17.set_title('AI Model Adaptability')\nax17.set_xlabel('Model')\nax17.set_ylabel('Adaptability Score (%)')\n\n# Create a line chart for the seventeenth plot\nax17.plot(['Model A', 'Model B', 'Model C', 'Model D'], [95, 90, 85, 80], color='gold')\n\n# Create a figure and axis for the eighteenth plot\nfig18, ax18 = plt.subplots(figsize=(10, 10))\nax18.set_title('AI Model Adaptability')\nax18.set_xlabel('Model')\nax18.set_ylabel('Adaptability Score (%)')\n\n# Create a line chart for the eighteenth plot\nax18.plot(['Model A', 'Model B', 'Model C', 'Model D'], [95, 90, 85, 80], color='lime')\n\n# Create a figure and axis for the nineteenth plot\nfig19, ax19 = plt.subplots(figsize=(10, 10))\nax19.set_title('AI Model Adaptability')\nax19.set_xlabel('Model')\nax19.set_ylabel('Adaptability Score (%)')\n\n# Create a line chart for the nineteenth plot\nax19.plot(['Model A', 'Model B', 'Model C', 'Model D'], [95, 90, 85, 80], color='teal')\n\n# Create a figure and axis for the twentieth plot\nfig20, ax20 = plt.subplots(figsize=(10, 10))\nax20.set_title('AI Model Adaptability')\nax20.set_xlabel('Model')\nax20.set_ylabel('Adaptability Score (%)')\n\n# Create a line chart for the twentieth plot\nax20.plot(['Model A', 'Model B', 'Model C', 'Model D'], [95, 90, 85, 80], color='navy')\n\n# Create a figure and axis for the twenty-first plot\nfig21, ax21 = plt.subplots(figsize=(10, 10))\nax21.set_title('AI Model Adaptability')\nax21.set_xlabel('Model')\nax21.set_ylabel('Adaptability Score (%)')\n\n# Create a line chart for the twenty-first plot\nax21.plot(['Model A', 'Model B', 'Model C', 'Model D'], [95, 90, 85, 80], color='maroon')\n\n# Create a figure and axis for the twenty-second plot\nfig22, ax22 = plt.subplots(figsize=(10, 10))\nax22.set_title('AI Model Adaptability')\nax22.set_xlabel('Model')\nax22.set_ylabel('Adaptability Score (%)')\n\n# Create a line chart for the twenty-second plot\nax22.plot(['Model A', 'Model B', 'Model C', 'Model D'], [95, 90, 85, 80], color='olive')\n\n# Create a figure and axis for the twenty-third plot\nfig23, ax23 = plt.subplots(figsize=(10, 10))\nax23.set_title('AI Model Adaptability')\nax23.set_xlabel('Model')\nax23.set_ylabel('Adaptability Score (%)')\n\n# Create a line chart for the twenty-third plot\nax23.plot(['Model A', 'Model B', 'Model C', 'Model D'], [95, 90, 85, 80], color='aqua')\n\n# Create a figure and axis for the twenty-fourth plot\nfig24, ax24 = plt.subplots(figsize=(10, 10))\nax24.set_title('AI Model Adaptability')\nax24.set_xlabel('Model')\nax24.set_ylabel('Adaptability Score (%)')\n\n# Create a line chart for the twenty-fourth plot\nax24.plot(['Model A', 'Model B', 'Model C', 'Model D'], [95, 90, 85, 80], color='fuchsia')\n\n# Create a figure and axis for the twenty-fifth plot\nfig25, ax25 = plt.subplots(figsize=(10, 10))\nax25.set_title('AI Model Adaptability')\nax25.set_xlabel('Model')\nax25.set_ylabel('Adaptability Score (%)')\n\n# Create a line chart for the twenty-fifth plot\nax25.plot(['Model A', 'Model B', 'Model C', 'Model D'], [95, 90, 85, 80], color='indigo')\n\n# Create a figure and axis for the twenty-sixth plot\nfig26, ax26 = plt.subplots(figsize=(10, 10))\nax26.set_title('AI Model Adaptability')\nax26.set_xlabel('Model')\nax26.set_ylabel('Adaptability Score (%)')\n\n# Create a line chart for the twenty-sixth plot\nax26.plot(['Model A', 'Model B', 'Model C', 'Model D'], [95, 90, 85, 80], color='violet')\n\n# Create a figure and axis for the twenty-seventh plot\nfig27, ax27 = plt.subplots(figsize=(10, 10))\nax27.set_title('AI Model Adaptability')\nax27.set_xlabel('Model')\nax27.set_ylabel('Adaptability Score (%)')\n\n# Create a line chart for the twenty-seventh plot\nax27.plot(['Model A', 'Model B', 'Model C', 'Model D'], [95, 90, 85, 80], color='chartreuse')\n\n# Create a figure and axis for the twenty-eighth plot\nfig28, ax28 = plt.subplots(figsize=(10, 10))\nax28.set_title('AI Model Adaptability')\nax28.set_xlabel('Model')\nax28.set_ylabel('Adaptability Score (%)')\n\n# Create a line chart for the twenty-eighth plot\nax28.plot(['Model A', 'Model B', 'Model C', 'Model D'], [95, 90, 85, 80], color='saddlebrown')\n\n# Create a figure and axis for the twenty-ninth plot\nfig29, ax29 = plt.subplots(figsize=(10, 10))\nax29.set_title('AI Model Adaptability')\nax29.set_xlabel('Model')\nax29.set_ylabel('Adaptability Score (%)')\n\n# Create a line chart for the twenty-ninth plot\nax29.plot(['Model A', 'Model B', 'Model C', 'Model D'], [95, 90, 85, 80], color='sienna')\n\n# Create a figure and axis for the thirtieth plot\nfig30, ax30 = plt.subplots(figsize=(10, 10))\nax30.set_title('AI Model Adaptability')\nax30.set_xlabel('Model')\nax30.set_ylabel('Adaptability Score (%)')\n\n# Create a line chart for the thirtieth plot\nax30.plot(['Model A', 'Model B', 'Model C', 'Model D'], [95, 90, 85, 80], color='seashell')\n\n# Create a figure and axis for the thirtieth-first plot\nfig31, ax31 = plt.subplots(figsize=(10, 10))\nax31.set_title('AI Model Adaptability')\nax31.set_xlabel('Model')\nax31.set_ylabel('Adaptability Score (%)')\n\n# Create a line chart for the thirtieth-first plot\nax31.plot(['Model A', 'Model B', 'Model C', 'Model D'], [95, 90, 85, 80], color='snow')\n\n# Create a figure and axis for the thirtieth-second plot\nfig32, ax32 = plt.subplots(figsize=(10, 10))\nax32.set_title('AI Model Adaptability')\nax32.set_xlabel('Model')\nax32.set_ylabel('Adaptability Score (%)')\n\n# Create a line chart for the thirtieth-second plot\nax32.plot(['Model A', 'Model B', 'Model C', 'Model D'], [95, 90, 85, 80], color='tan')\n\n# Create a figure and axis for the thirtieth-third plot\nfig33, ax33 = plt.subplots(figsize=(10, 10))\nax33.set_title('AI Model Adaptability')\nax33.set_xlabel('Model')\nax33.set_ylabel('Adaptability Score (%)')\n\n# Create a line chart for the thirtieth-third plot\nax33.plot(['Model A', 'Model B', 'Model C', 'Model D'], [95, 90, 85, 80], color='tomato')\n\n# Create a figure and axis for the thirtieth-fourth plot\nfig34, ax34 = plt.subplots(figsize=(10, 10))\nax34.set_title('AI Model Adaptability')\nax34.set_xlabel('Model')\nax34.set_ylabel('Adaptability Score (%)')\n\n# Create a line chart for the thirtieth-fourth plot\nax34.plot(['Model A', 'Model B', 'Model C', 'Model D'], [95, 90, 85, 80], color='turquoise')\n\n# Create a figure and axis for the thirtieth-fifth plot\nfig35, ax35 = plt.subplots(figsize=(10, 10))\nax35.set_title('AI Model Adaptability')\nax35.set_xlabel('Model')\nax35.set_ylabel('Adaptability Score (%)')\n\n# Create a line chart for the thirtieth-fifth plot\nax35.plot(['Model A', 'Model B', 'Model C', 'Model D'], [95, 90, 85, 80], color='violet')\n\n# Create a figure and axis for the thirtieth-sixth plot\nfig36, ax36 = plt.subplots(figsize=(10, 10))\nax36.set_title('AI Model Adaptability')\nax36.set_xlabel('Model')\nax36.set_ylabel('Adaptability Score (%)')\n\n# Create a line chart for the thirtieth-sixth plot\nax36.plot(['Model A', 'Model B', 'Model C', 'Model D'], [95, 90, 85, 80], color='wheat')\n\n# Create a figure and axis for the thirtieth-seventh plot\nfig"}
{"file": "dataset/ori_500/multidiff_23.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis for the first plot\nfig, ax = plt.subplots(figsize=(10, 10))\nax.set_title('Traffic Volume by Time of Day')\nax.set_xlabel('Number of Vehicles')\nax.set_ylabel('Time of Day')\n\n# Create a bar chart with the data\nax.bar([100, 200, 300, 400, 500, 600, 700], [100, 150, 120, 180, 160, 190, 200], color='orange')\nax.bar([100, 200, 300, 400, 500, 600, 700], [120, 170, 140, 200, 180, 210, 220], color='green')\n\n# Create a second plot\nfig, ax = plt.subplots(figsize=(10, 10))\nax.set_title('Speed Distribution by Location')\nax.set_xlabel('Location')\nax.set_ylabel('Speed (km/h)')\n\n# Create a bar chart with the data\nax.bar(['Urban', 'Highway'], [80, 120], color='lightblue')\nax.bar(['Urban', 'Highway'], [100, 140], color='darkblue')\n\n# Create a third plot\nfig, ax = plt.subplots(figsize=(10, 10))\nax.set_title('Elevation Changes Along a Route')\nax.set_xlabel('Distance (km)')\nax.set_ylabel('Elevation (m)')\n\n# Create a line chart with the data\nax.plot([0, 200, 400, 600, 800, 1000], [0, 100, 200, 300, 400, 500], color='purple')\nax.plot([0, 200, 400, 600, 800, 1000], [0, 150, 250, 350, 450, 550], color='lightblue')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_24.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis for the first plot\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Create a pie chart with the data\narts = ['Literature', 'Performing Arts', 'Visual Arts', 'Dance']\nvalues = [10, 30, 25, 15]\ncolors = ['#FF6347', '#4682B4', '#90EE90', '#FFA500']\nexplode = (0.1, 0, 0, 0)  # explode 1st slice\n\nax.pie(values, explode=explode, labels=arts, colors=colors,\nautopct='%1.1f%%', shadow=True, startangle=140)\n\n# Equal aspect ratio ensures that pie is drawn as a circle.\nax.axis('equal')  \n\n# Create a second subplot\nax2 = fig.add_subplot(122)\nax2.set_title('Student Performance in Arts Education')\n\n# Create a radar chart\ncategories = ['Creativity', 'Expression', 'Collaboration', 'Dedication', 'Technique']\nN = len(categories)\nangles = [n / float(N) * 2 * pi for n in range(N)]\nangles += angles[:1]  # repeat the first value to close the circular graph\n\n# Create a color palette:\nmy_palette = plt.cm.get_cmap(\"plasma\", N)\n\n# Plot each individual's performance\nfor i in range(len(categories)):\n    values = [0.2, 0.4, 0.6, 0.8, 0.1]\n    values += values[:1]  # repeat the first value to close the circular graph\n    ax2.plot(angles, values, linewidth=1, linestyle='solid', label=categories[i])\n    ax2.fill(angles, values, my_palette(i), alpha=0.25)\n\n# Draw ylabels\nax2.set_yticks([0.2, 0.4, 0.6, 0.8, 0.1])\nax2.set_yticklabels(['0.2', '0.4', '0.6', '0.8', '0.1'])\n\n# Show all labels at once\nax2.legend(loc='upper right', bbox_to_anchor=(0.1, 0.1))\n\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_25.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Set the title of the plot\nax.set_title('Sales Data')\n\n# Create a bar chart\nax.bar(['Product A', 'Product B', 'Product C', 'Product D', 'Product E', 'Product F'], [25000, 20000, 15000, 10000, 5000, 0], color='blue')\n\n# Set the x-axis label\nax.set_xlabel('Products')\n\n# Set the y-axis label\nax.set_ylabel('Sales')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Set the title of the plot\nax.set_title('Histogram of Stock Returns')\n\n# Create a histogram with random data\nax.hist([0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0], bins=10, color='green')\nax.hist([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9], bins=10, color='red')\n\n# Create a scatter plot with random data\nax.scatter([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9], [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9], color='yellow')\n\n# Create a bar chart with random data\nax.bar([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9], [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9], color='blue')\n\n# Create a pie chart with random data\nax.pie([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9], labels=['Tech Stocks', 'Energy Stocks'], colors=['yellow', 'blue'])\n\n# Create a line chart with random data\nax.plot([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9], [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9], color='cyan')\n\n# Create a scatter plot with random data\nax.scatter([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9], [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9], color='cyan')\n\n# Create a bar chart with random data\nax.bar([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9], [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9], color='cyan')\n\n# Create a pie chart with random data\nax.pie([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9], labels=['Tech Stocks', 'Energy Stocks'], colors=['cyan', 'cyan'])\n\n# Create a line chart with random data\nax.plot([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9], [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9], color='cyan')\n\n# Create a scatter plot with random data\nax.scatter([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9], [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9], color='cyan')\n\n# Create a bar chart with random data\nax.bar([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9], [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9], color='cyan')\n\n# Create a pie chart with random data\nax.pie([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9], labels=['Tech Stocks', 'Energy Stocks'], colors=['cyan', 'cyan'])\n\n# Create a line chart with random data\nax.plot([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9], [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9], color='cyan')\n\n# Create a scatter plot with random data\nax.scatter([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9], [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9], color='cyan')\n\n# Create a bar chart with random data\nax.bar([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9], [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9], color='cyan')\n\n# Create a pie chart with random data\nax.pie([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9], labels=['Tech Stocks', 'Energy Stocks'], colors=['cyan', 'cyan'])\n\n# Create a line chart with random data\nax.plot([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9], [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9], color='cyan')\n\n# Create a scatter plot with random data\nax.scatter([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9], [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9], color='cyan')\n\n# Create a bar chart with random data\nax.bar([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9], [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9], color='cyan')\n\n# Create a pie chart with random data\nax.pie([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9], labels=['Tech Stocks', 'Energy Stocks'], colors=['cyan', 'cyan'])\n\n# Create a line chart with random data\nax.plot([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9], [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9], color='cyan')\n\n# Create a scatter plot with random data\nax.scatter([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9], [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9], color='cyan')\n\n# Create a bar chart with random data\nax.bar([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9], [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9], color='cyan')\n\n# Create a pie chart with random data\nax.pie([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9], labels=['Tech Stocks', 'Energy Stocks'], colors=['cyan', 'cyan'])\n\n# Create a line chart with random data\nax.plot([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9], [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9], color='cyan')\n\n# Create a scatter plot with random data\nax.scatter([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9], [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9], color='cyan')\n\n# Create a bar chart with random data\nax.bar([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9], [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9], color='cyan')\n\n# Create a pie chart with random data\nax.pie([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9], labels=['Tech Stocks', 'Energy Stocks'], colors=['cyan', 'cyan'])\n\n# Create a line chart with random data\nax.plot([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9], [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9], color='cyan')\n\n# Create a scatter plot with random data\nax.scatter([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9], [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9], color='cyan')\n\n# Create a bar chart with random data\nax.bar([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9], [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9], color='cyan')\n\n# Create a pie chart with random data\nax.pie([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9], labels=['Tech Stocks', 'Energy Stocks'], colors=['cyan', 'cyan'])\n\n# Create a line chart with random data\nax.plot([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9], [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9], color='cyan')\n\n# Create a scatter plot with random data\nax.scatter([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9], [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9], color='cyan')\n\n# Create a bar chart with random data\nax.bar([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9], [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9], color='cyan')\n\n# Create a pie chart with random data\nax.pie([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9], labels=['Tech Stocks', 'Energy Stocks'], colors=['cyan', 'cyan'])\n\n# Create a line chart with random data\nax.plot([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9], [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9], color='cyan')\n\n# Create a scatter plot with random data\nax.scatter([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9], [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9], color='cyan')\n\n# Create a bar chart with random data\nax.bar([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9], [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9], color='cyan')\n\n# Create a pie chart with random data\nax.pie([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9], labels=['Tech Stocks', 'Energy Stocks'], colors=['cyan', 'cyan'])\n\n# Create a line chart with random data\nax.plot([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9], [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9], color='cyan')\n\n# Create a scatter plot with random data\nax.scatter([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7"}
{"file": "dataset/ori_500/multidiff_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis for the first plot\nfig1, ax1 = plt.subplots(figsize=(8, 6))\nax1.plot([0, 1, 2, 3, 4], [10, 8, 6, 4, 2], 'b-')\nax1.set_xlabel('Relative Year')\nax1.set_ylabel('Energy Consumption (GWh)')\nax1.set_title('Energy Consumption Over Time')\n\n# Create a figure and axis for the second plot\nfig2, ax2 = plt.subplots(figsize=(8, 6), projection='3d')\nx = np.linspace(-4, 4, 100)\ny = np.linspace(-4, 4, 100)\nx, y = np.meshgrid(x, y)\nz = np.sin(np.sqrt(x**2 + y**2))\nax2.plot_surface(x, y, z, cmap='Blues')\nax2.set_xlabel('Relative Year')\nax2.set_ylabel('Relative Month')\nax2.set_zlabel('Renewable Energy Ratio (%)')\nax2.set_title('Renewable Energy Ratio Over Time')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis for the pie chart\nfig, ax = plt.subplots(figsize=(8, 8))\n\n# Data for the pie chart\nlabels = ['Ancient Scripts', 'Modern Records', 'Medieval Texts', 'Renaissance Literature']\nsizes = [15, 35, 30, 20]\ncolors = ['#ff9999','#66b3ff','#99ff99','#ffcc99']\n\n# Create a pie chart\nax.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%', startangle=140)\n\n# Equal aspect ratio ensures that pie is drawn as a circle.\nax.axis('equal')  \n\n# Create a scatter plot\nfig, ax = plt.subplots(figsize=(10, 5))\nx = np.array([1400, 1600, 1800, 2000])\ny = np.array([350, 300, 250, 200])\ncolors = np.array([\"purple\", \"purple\", \"purple\", \"purple\"])\nax.scatter(x, y, c=colors)\nax.set_xlabel('Year')\nax.set_ylabel('Number of Documents')\nax.set_title('Document Count Over Historical Periods')\n\n# Display the plots\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the scatter plot\nx = [2000, 2005, 2010, 2015, 2020]\ny = [9.25, 9.00, 8.75, 8.50, 8.25]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Scatter plot\nax.scatter(x, y)\n\n# Set the title and labels\nax.set_title('Luxury Brand Popularity vs Price')\nax.set_xlabel('Average Price ($)')\nax.set_ylabel('Popularity Index')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the first graph\naccuracy = [75.32, 77.11, 77.03, 76.86, 75.34, 74.52]\nyears = ['Zhang2020', 'Addelpalli2021', 'Rice2020', 'Rade2021', 'Engstrom2019', 'Hendrycks2019']\ncolors = ['green', 'green', 'green', 'green', 'green', 'green']\n\n# Data for the second graph\nrobustness = [60.5, 59.3, 58.35, 55.95, 55.5, 55.5]\ncolors_robustness = ['red', 'red', 'red', 'red', 'red', 'red']\n\n# Data for the third graph\naccuracy_diff = [0.02, -0.08, -0.25, -0.23, -0.26, 0.0]\ncolors_accuracy_diff = ['pink', 'pink', 'pink', 'pink', 'pink', 'pink']\n\n# Data for the fourth graph\nrobustness_diff = [-0.25, -0.25, -0.25, -0.25, -0.25, 0.0]\ncolors_robustness_diff = ['purple', 'purple', 'purple', 'purple', 'purple', 'purple']\n\nfig, axs = plt.subplots(2, 3, figsize=(10.0, 7.0))\n\n# First graph\naxs[0, 0].barh(years, accuracy, color=colors)\naxs[0, 0].set_title('Accuracy (%)')\naxs[0, 0].set_xlabel('Accuracy (%)')\naxs[0, 0].set_ylabel('Year')\n\n# Second graph\naxs[0, 1].barh(years, robustness, color=colors_robustness)\naxs[0, 1].set_title('Robustness (%)')\naxs[0, 1].set_xlabel('Robustness (%)')\naxs[0, 1].set_ylabel('Year')\n\n# Third graph\naxs[0, 2].barh(years, accuracy_diff, color=colors_accuracy_diff)\naxs[0, 2].set_title('Accuracy Diff. (%)')\naxs[0, 2].set_xlabel('Accuracy Diff. (%)')\naxs[0, 2].set_ylabel('Year')\n\n# Fourth graph\naxs[1, 0].barh(years, robustness_diff, color=colors_robustness_diff)\naxs[1, 0].set_title('Robust NFR (%)')\naxs[1, 0].set_xlabel('Robust NFR (%)')\naxs[1, 0].set_ylabel('Year')\n\n# Fifth graph\naxs[1, 1].barh([0.0, -0.08, -0.25, -0.23, -0.26, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0], color=['pink', 'pink', 'pink', 'pink', 'pink', 'pink'])\naxs[1, 1].set_title('Robust Accuracy Diff. (%)')\naxs[1, 1].set_xlabel('Robust Accuracy Diff. (%)')\naxs[1, 1].set_ylabel('Year')\n\n# Sixth graph\naxs[1, 2].barh([0.0, -0.08, -0.25, -0.23, -0.26, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0], color=['purple', 'purple', 'purple', 'purple', 'purple', 'purple'])\naxs[1, 2].set_title('Robust NFR (%)')\naxs[1, 2].set_xlabel('Robust NFR (%)')\naxs[1, 2].set_ylabel('Year')\n\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the bar chart\nbrands = ['Full Context', 'Partial Context', 'No Context', 'HCube', 'Sobol', 'Random']\nvariances = [0.5, 0.4, 0.3, 0.6, 0.8, 0.9]\n\n# Create a bar chart\nfig, ax1 = plt.subplots(figsize=(7.0, 9.0))\nax1.bar(brands, variances, color='skyblue')\nax1.set_xlabel('Brands')\nax1.set_ylabel('General Variance')\n\n# Data for the line chart\ntrials = range(1, 26)\naverages = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2.0, 2.1, 2.2, 2.3, 2.4, 2.5, 2.6]\naverages = averages[::-1]  # Reverse the list to create a descending graph\ncolors = ['blue', 'green', 'orange', 'purple', 'pink']\n\n# Create a line chart\nax2 = ax1.twinx()\nfor i, color in enumerate(colors):\n    ax2.plot(trials, averages[i::len(colors)], color=color)\n\n# Set the labels and title\nax2.set_xlabel('Trials')\nax2.set_ylabel('Average Regret')\nax2.set_title('Average Regret over Trials')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and a set of subplots\nfig, axs = plt.subplots(1, 3, figsize=(10, 4))\n\n# Debater section\ndebaters = ['GPT-3.5-Turbo', 'Claude 1.3', 'Claude 2.1', 'GPT-4-Turbo']\naxs[0].bar(debaters, [100, 80, 90, 70], color='blue')\naxs[0].set_title('Debaters')\n\n# Correct Rating section\ncorrect_ratings = [150, 160, 170, 180]\naxs[1].bar(correct_ratings, [100, 110, 120, 130], color='green')\naxs[1].set_title('Correct Rating - Incorrect Rating')\n\n# Judge Accuracy section\njudge_accuracy = [80, 90, 70, 60]\naxs[2].plot(judge_accuracy, [100, 110, 120, 130], color='red')\naxs[2].set_title('Judge Accuracy (%)')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the pie chart\nsizes = [4.6, 10.6, 11.3, 13.2, 29.8]\nlabels = ['Red', 'Blue', 'Green', 'Yellow', 'Purple']\ncolors = ['#FF0000', '#0000FF', '#00FF00', '#FFFF00', '#800080']\n\n# Create a pie chart\nfig, ax = plt.subplots(figsize=(5.0, 5.0))\nwedges, texts, autotexts = ax.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%', startangle=90)\n\n# Equal aspect ratio ensures that pie is drawn as a circle.\nax.axis('equal')  \n\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Create a circle for the donut chart\ncircle = plt.Circle((0.5, 0.5), 0.4, color='white')\nax.add_artist(circle)\n\n# Create a rectangle for the doughnut chart\nrect = plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='blue')\nax.add_artist(rect)\n\n# Create a rectangle for the doughnut chart\nrect = plt.Rectangle((0.3, 0.3), 0.4, 0.4, color='orange')\nax.add_artist(rect)\n\n# Create a rectangle for the doughnut chart\nrect = plt.Rectangle((0.4, 0.4), 0.2, 0.2, color='green')\nax.add_artist(rect)\n\n# Create a rectangle for the doughnut chart\nrect = plt.Rectangle((0.5, 0.5), 0.2, 0.2, color='red')\nax.add_artist(rect)\n\n# Create a rectangle for the doughnut chart\nrect = plt.Rectangle((0.6, 0.6), 0.2, 0.2, color='purple')\nax.add_artist(rect)\n\n# Create a rectangle for the doughnut chart\nrect = plt.Rectangle((0.7, 0.7), 0.2, 0.2, color='brown')\nax.add_artist(rect)\n\n# Set the title of the plot\nax.set_title('Matplotlib bakery: A donut')\n\n# Set the x and y limits\nax.set_xlim(0, 1)\nax.set_ylim(0, 1)\n\n# Set the aspect ratio to be equal\nax.set_aspect('equal')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the pie chart\nlabels = ['Entertainment', 'Utilities', 'Transport', 'Food', 'Others']\nsizes = [16.7, 20.0, 37.5, 29.2, 10.0]\ncolors = ['#FFC0CB', '#ADD8E6', '#87CEEB', '#90EE90', '#FFD700']\nexplode = (0.1, 0, 0, 0, 0)  # explode 1st slice\n\n# Plotting the pie chart\nfig1, ax1 = plt.subplots()\nax1.pie(sizes, explode=explode, labels=labels, colors=colors,\nautopct='%1.1f%%', shadow=True, startangle=140)\nax1.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\n\n# Displaying the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for LoRA\nlora_data = [31.4, 15.7, 19.9, 33.0]\nlora_labels = ['Unused', 'Model', 'Optimizer', 'Gradient']\nlora_colors = ['#f2a36d', '#f2c980', '#66b2ff', '#a8e063']\n\n# Data for QLoRA\nqlora_data = [54.8, 10.5, 6.3, 28.4]\nqlora_labels = ['Unused', 'Model', 'Optimizer', 'Gradient']\nqlora_colors = ['#f2a36d', '#f2c980', '#66b2ff', '#a8e063']\n\nfig, axs = plt.subplots(1, 2, figsize=(10.0, 4.0))\n\n# Plotting LoRA\naxs[0].pie(lora_data, labels=lora_labels, colors=lora_colors, autopct='%1.1f%%')\naxs[0].set_title('LoRA')\n\n# Plotting QLoRA\naxs[1].pie(qlora_data, labels=qlora_labels, colors=qlora_colors, autopct='%1.1f%%')\naxs[1].set_title('QLoRA')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the first chart\ndata1 = [25.1, 26.4, 12.6, 15.9]\ncolors1 = ['yellow', 'green', 'gray', 'orange']\nlabels1 = ['Model', 'Optimizer', 'Gradient+Activations+Other', 'Unused']\n\n# Data for the second chart\ndata2 = [46.2, 4.6, 5.3, 23.9]\ncolors2 = ['yellow', 'green', 'gray', 'orange']\nlabels2 = ['Model', 'Optimizer', 'Gradient+Activations+Other', 'Unused']\n\nfig, axs = plt.subplots(2, 1, figsize=(5.0, 8.0))\n\n# Create the first chart\naxs[0].pie(data1, colors=colors1, labels=labels1, autopct='%1.1f%%')\naxs[0].set_title('Full Finetuning')\n\n# Create the second chart\naxs[1].pie(data2, colors=colors2, labels=labels2, autopct='%1.1f%%')\naxs[1].set_title('QLoRA')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Create a pie chart with the data\nax.pie([25, 10, 10, 35, 20], labels=[\"Fruits\", \"Dairy\", \"Grains\", \"Proteins\", \"Vegetables\"], autopct='%1.1f%%', startangle=90)\n\n# Set the title of the chart\nax.set_title('Nutritional Distribution')\n\n# Display the chart\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the chart\nax.set_title('Market Share by Sector - External vs. Internal')\n\n# Define the data for the chart\ndata = [31.2, 28.6, 27.5, 35.7, 37.5, 18.8, 14.3, 12.5, 21.4, 12.5, 35.7, 37.5]\nlabels = ['E-commerce', 'Education', 'Entertainment', 'Technology', 'Healthcare', 'Finance', 'Retail', 'Manufacturing', 'Agriculture', 'Energy', 'Real Estate', 'Utilities']\n\n# Create a pie chart with the data\nwedges, texts, autotexts = ax.pie(data, labels=labels, autopct='%1.1f%%', startangle=90)\n\n# Set the colors of the wedges\ncolors = ['#FFD700', '#FFA500', '#FF6347', '#4682B4', '#F0E68C', '#ADD8E6', '#90EE90', '#FFD700', '#FFA500', '#FF6347', '#4682B4', '#F0E68C']\nfor wedge, color in zip(wedges, colors):\n    wedge.set_facecolor(color)\n\n# Display the chart\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the pie chart\nsizes = [20, 10, 30, 40]\nlabels = ['Dogs', 'Logs', 'Frogs', 'Hogs']\ncolors = ['#FF6347', '#4682B4', '#90EE90', '#ADD8E6']\n\n# Create a pie chart\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\nwedges, texts, autotexts = ax.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%', startangle=90)\n\n# Equal aspect ratio ensures that pie is drawn as a circle.\nax.axis('equal')  \n\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nlabels = ['David', 'John', 'Marry', 'Peter']\nsizes = [11.0, 29.0, 40.0, 20.0]\ncolors = ['blue', 'orange', 'green', 'red']\n\n# Create a pie chart\nfig, ax = plt.subplots(figsize=(5.0, 5.0))\nwedges, texts, autotexts = ax.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%', startangle=90)\n\n# Set the aspect ratio of the pie chart to be equal so that pie is drawn as a circle.\nax.axis('equal')  \n\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(5.0, 5.0))\n\n# Create a pie chart with a color map\ncmap = plt.get_cmap('tab20')\ncolors = cmap(range(10))\nax.pie([18, 12, 28], colors=colors, startangle=90)\n\n# Add a title\nax.set_title('Countries in Europe')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the pie chart\nsizes = [26.2, 13.3, 21.4, 19.0, 14.3, 5.7]\ncolors = ['red', 'orange', 'yellow', 'green', 'cyan', 'blue']\nlabels = ['Red', 'Orange', 'Yellow', 'Green', 'Cyan', 'Blue']\n\n# Create a pie chart\nfig, ax = plt.subplots(figsize=(5.0, 5.0))\nax.pie(sizes, colors=colors, labels=labels, autopct='%1.1f%%')\n\n# Set the title of the chart\nax.set_title('Slice of a pie chart')\n\n# Display the chart\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the pie chart\nlabels = ['Psychological', 'Others', 'Market', 'Satisfactory', 'Social']\nsizes = [12.4, 35.4, 17.2, 24.7, 10.3]\ncolors = ['blue', 'green', 'lightblue', 'orange', 'pink']\n\n# Create a pie chart\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\nax.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%', startangle=90)\n\n# Equal aspect ratio ensures that pie is drawn as a circle.\nax.axis('equal')  \n\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nlabels = ['Youtube', 'Facebook', 'Instagram', 'Twitter', 'LinkedIn']\nsizes = [25, 10, 10, 10, 35]\ncolors = ['lightblue', 'skyblue', 'lightskyblue', 'darkblue', 'navy']\n\n# Create a pie chart\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\nwedges, texts, autotexts = ax.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%', startangle=90)\n\n# Set the title\nax.set_title('Social Media Usage')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the pie chart\nlabels = ['COLING', 'EACL', 'NAACL', 'EMNLP']\nsizes = [25.4, 7.4, 20.3, 12.2]\ncolors = ['#87CEEB', '#FFD700', '#90EE90', '#800080']\n\n# Create a pie chart\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\nwedges, texts, autotexts = ax.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%', startangle=90)\n\n# Add a title\nax.set_title('NLP Conference Influence')\n\n# Add a rectangle around the chart\nfor wedge in wedges:\n    wedge.set_edgecolor('black')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the pie chart\nlabels = ['Coal', 'Hydro', 'Wind', 'Solar']\nsizes = [25.0, 15.0, 12.5, 30.0]\ncolors = ['#FFA500', '#00008B', '#00FFFF', '#008000']\n\n# Create a pie chart\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\nax.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%', startangle=90)\nax.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\n\nplt.show()\n```"}
{"file": "dataset/ori_500/quiver_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 4.0))\n\n# Create a bar chart\nax.bar(range(10), np.random.rand(10), color='blue')\n\n# Add a title\nax.set_title('English')\n\n# Add labels\nax.set_xlabel('Time')\nax.set_ylabel('Price')\n\n# Add a legend\nax.legend(['Out-group bias (Collectivism)', 'In-group bias (Individualism)'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/quiver_2.pdf", "response": "import matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(5.0, 4.0))\n\n# Set the x-axis limits\nax.set_xlim(0, 10)\n\n# Set the y-axis limits\nax.set_ylim(-5, 5)\n\n# Set the x-axis ticks\nax.set_xticks(range(0, 11, 2))\n\n# Set the y-axis ticks\nax.set_yticks(range(-5, 6, 2))\n\n# Set the x-axis labels\nax.set_xticklabels(['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10'])\n\n# Set the y-axis labels\nax.set_yticklabels(['-5', '-4', '-3', '-2', '-1', '0', '1', '2', '3', '4', '5'])\n\n# Set the title of the plot\nax.set_title('Language Sentiment Analysis')\n\n# Set the color of the plot\nax.set_facecolor('white')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Out-group bias (Collectivism)', fontsize=12, ha='center', va='center', transform=ax.transAxes, color='red')\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/quiver_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the x-axis limits\nax.set_xlim(0, 1)\n\n# Set the y-axis limits\nax.set_ylim(0, 1)\n\n# Create a scatter plot of the data points\nax.scatter(np.random.rand(50), np.random.rand(50), color='purple')\n\n# Create a line plot of the model predictions\nax.plot([0.1, 0.2, 0.3, 0.4, 0.5], [0.2, 0.3, 0.4, 0.5, 0.6], color='blue')\n\n# Add a legend\nax.legend(['True Field', 'SINDy Learned Field', 'Train Sample', 'Test Sample', 'SINDy Train', 'SINDy Test'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/quiver_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(5.0, 4.0))\n\n# Set the title of the plot\nax.set_title('Vector Field: -F + \u03c1\u2207VF (Small \u03c1)')\n\n# Create a grid of points\nx = np.linspace(-1, 1, 100)\ny = np.linspace(-1, 1, 100)\nX, Y = np.meshgrid(x, y)\n\n# Define the vector field\nU = -X\nV = Y\n\n# Plot the vector field\nQ = ax.quiver(X, Y, U, V, color='b')\n\n# Set the limits of the plot\nax.set_xlim(-1, 1)\nax.set_ylim(-1, 1)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/quiver_5.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(6.0, 5.0))\n\n# Set the title of the plot\nax.set_title('Magnetic Field B in Tesla units')\n\n# Set the x and y limits\nax.set_xlim(-2.0, 2.0)\nax.set_ylim(-2.0, 2.0)\n\n# Create a grid of points\nx = np.linspace(-2.0, 2.0, 100)\ny = np.linspace(-2.0, 2.0, 100)\nX, Y = np.meshgrid(x, y)\n\n# Calculate the magnetic field B\nB = np.sqrt(X**2 + Y**2)\n\n# Plot the magnetic field B\nCS = ax.contourf(X, Y, B, locator=plt.LogLocator(), cmap='viridis')\n\n# Add a colorbar to the plot\ncbar = fig.colorbar(CS)\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/radar_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 7.0))\n\n# Set the title of the plot\nax.set_title('GQA')\n\n# Create a circle patch\ncircle = plt.Circle((0.5, 0.5), 0.4, color='black')\nax.add_artist(circle)\n\n# Create a rectangle patch\nrectangle = plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='blue')\nax.add_patch(rectangle)\n\n# Create a polygon patch\npolygon = plt.Polygon([[0.1, 0.1], [0.3, 0.9], [0.9, 0.9], [0.7, 0.1]], color='red')\nax.add_patch(polygon)\n\n# Create a text annotation\ntext = ax.text(0.5, 0.5, 'TextVQA', ha='center', va='center', fontsize=12)\ntext.set_path_effects([PathPatchEffect(path=polygon.get_path(), facecolor='none', edgecolor='red')])\n\n# Set the aspect ratio of the plot\nax.set_aspect('equal')\n\n# Set the limits of the plot\nax.set_xlim(0, 1)\nax.set_ylim(0, 1)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(5.0, 5.0))\n\n# Set the title of the plot\nax.set_title('XNLI (speed-up ratio: 4)')\n\n# Define the colors for each direction\ncolors = ['pink', 'green', 'blue', 'cyan']\n\n# Define the directions\ndirections = ['fr', 'es', 'en', 'el', 'de', 'bg', 'sw', 'ar', 'ur', 'th', 'ru', 'tr', 'vi', 'zh']\n\n# Draw the radar chart\nax.pie([1]*len(directions), labels=directions, colors=colors, startangle=90, counterclock=False)\n\n# Draw the speed-up ratio\nax.text(0, 0, '20\\n40\\n60\\n80', ha='center', va='center', fontsize=12)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(4.0, 4.0))\n\n# Draw a circle\ncircle = plt.Circle((0.5, 0.5), 0.4, color='lightgrey')\nax.add_artist(circle)\n\n# Draw a polygon\npolygon = plt.Polygon([[0.2, 0.2], [0.8, 0.2], [0.5, 0.8]], color='lightgreen')\nax.add_patch(polygon)\n\n# Draw a rectangle\nrectangle = plt.Rectangle([0.1, 0.6], 0.8, 0.2, color='lightblue')\nax.add_patch(rectangle)\n\n# Draw a line\nline = plt.Line2D([0.1, 0.9], [0.1, 0.9], color='lightyellow')\nax.add_line(line)\n\n# Set the limits of the plot\nax.set_xlim(0, 1)\nax.set_ylim(0, 1)\n\n# Set the aspect ratio of the plot\nax.set_aspect('equal')\n\n# Set the title of the plot\nax.set_title('Reflection')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the background color of the plot\nax.set_facecolor('black')\n\n# Set the title of the plot\nax.set_title('Global News Sentiment Analysis', color='white')\n\n# Set the x-axis label\nax.set_xlabel('Time', color='white')\n\n# Set the y-axis label\nax.set_ylabel('Sentiment Score', color='white')\n\n# Set the grid lines\nax.grid(True)\n\n# Set the tick labels\nax.set_xticks(np.arange(0, 10, 1))\nax.set_yticks(np.arange(-1, 1, 0.2))\n\n# Set the tick colors\nax.tick_params(axis='x', colors='white')\nax.tick_params(axis='y', colors='white')\n\n# Set the tick label rotation\nax.tick_params(axis='x', rotation=45)\nax.tick_params(axis='y', rotation=45)\n\n# Set the tick label font size\nax.tick_params(axis='x', labelsize=10)\nax.tick_params(axis='y', labelsize=10)\n\n# Set the tick label font weight\nax.tick_params(axis='x', labelweight='bold')\nax.tick_params(axis='y', labelweight='bold')\n\n# Set the tick label font style\nax.tick_params(axis='x', labelstyle='italic')\nax.tick_params(axis='y', labelstyle='italic')\n\n# Set the tick label font family\nax.tick_params(axis='x', labelfamily='serif')\nax.tick_params(axis='y', labelfamily='sans-serif')\n\n# Set the tick label font variant\nax.tick_params(axis='x', labelvariant='small-caps')\nax.tick_params(axis='y', labelvariant='normal')\n\n# Set the tick label font stretch\nax.tick_params(axis='x', labelstretch='ultra-condensed')\nax.tick_params(axis='y', labelstretch='condensed')\n\n# Set the tick label font size\nax.tick_params(axis='x', labelsize=10)\nax.tick_params(axis='y', labelsize=10)\n\n# Set the tick label font weight\nax.tick_params(axis='x', labelweight='bold')\nax.tick_params(axis='y', labelweight='bold')\n\n# Set the tick label font style\nax.tick_params(axis='x', labelstyle='italic')\nax.tick_params(axis='y', labelstyle='italic')\n\n# Set the tick label font family\nax.tick_params(axis='x', labelfamily='serif')\nax.tick_params(axis='y', labelfamily='sans-serif')\n\n# Set the tick label font variant\nax.tick_params(axis='x', labelvariant='small-caps')\nax.tick_params(axis='y', labelvariant='normal')\n\n# Set the tick label font stretch\nax.tick_params(axis='x', labelstretch='ultra-condensed')\nax.tick_params(axis='y', labelstretch='condensed')\n\n# Set the tick label font size\nax.tick_params(axis='x', labelsize=10)\nax.tick_params(axis='y', labelsize=10)\n\n# Set the tick label font weight\nax.tick_params(axis='x', labelweight='bold')\nax.tick_params(axis='y', labelweight='bold')\n\n# Set the tick label font style\nax.tick_params(axis='x', labelstyle='italic')\nax.tick_params(axis='y', labelstyle='italic')\n\n# Set the tick label font family\nax.tick_params(axis='x', labelfamily='serif')\nax.tick_params(axis='y', labelfamily='sans-serif')\n\n# Set the tick label font variant\nax.tick_params(axis='x', labelvariant='small-caps')\nax.tick_params(axis='y', labelvariant='normal')\n\n# Set the tick label font stretch\nax.tick_params(axis='x', labelstretch='ultra-condensed')\nax.tick_params(axis='y', labelstretch='condensed')\n\n# Set the tick label font size\nax.tick_params(axis='x', labelsize=10)\nax.tick_params(axis='y', labelsize=10)\n\n# Set the tick label font weight\nax.tick_params(axis='x', labelweight='bold')\nax.tick_params(axis='y', labelweight='bold')\n\n# Set the tick label font style\nax.tick_params(axis='x', labelstyle='italic')\nax.tick_params(axis='y', labelstyle='italic')\n\n# Set the tick label font family\nax.tick_params(axis='x', labelfamily='serif')\nax.tick_params(axis='y', labelfamily='sans-serif')\n\n# Set the tick label font variant\nax.tick_params(axis='x', labelvariant='small-caps')\nax.tick_params(axis='y', labelvariant='normal')\n\n# Set the tick label font stretch\nax.tick_params(axis='x', labelstretch='ultra-condensed')\nax.tick_params(axis='y', labelstretch='condensed')\n\n# Set the tick label font size\nax.tick_params(axis='x', labelsize=10)\nax.tick_params(axis='y', labelsize=10)\n\n# Set the tick label font weight\nax.tick_params(axis='x', labelweight='bold')\nax.tick_params(axis='y', labelweight='bold')\n\n# Set the tick label font style\nax.tick_params(axis='x', labelstyle='italic')\nax.tick_params(axis='y', labelstyle='italic')\n\n# Set the tick label font family\nax.tick_params(axis='x', labelfamily='serif')\nax.tick_params(axis='y', labelfamily='sans-serif')\n\n# Set the tick label font variant\nax.tick_params(axis='x', labelvariant='small-caps')\nax.tick_params(axis='y', labelvariant='normal')\n\n# Set the tick label font stretch\nax.tick_params(axis='x', labelstretch='ultra-condensed')\nax.tick_params(axis='y', labelstretch='condensed')\n\n# Set the tick label font size\nax.tick_params(axis='x', labelsize=10)\nax.tick_params(axis='y', labelsize=10)\n\n# Set the tick label font weight\nax.tick_params(axis='x', labelweight='bold')\nax.tick_params(axis='y', labelweight='bold')\n\n# Set the tick label font style\nax.tick_params(axis='x', labelstyle='italic')\nax.tick_params(axis='y', labelstyle='italic')\n\n# Set the tick label font family\nax.tick_params(axis='x', labelfamily='serif')\nax.tick_params(axis='y', labelfamily='sans-serif')\n\n# Set the tick label font variant\nax.tick_params(axis='x', labelvariant='small-caps')\nax.tick_params(axis='y', labelvariant='normal')\n\n# Set the tick label font stretch\nax.tick_params(axis='x', labelstretch='ultra-condensed')\nax.tick_params(axis='y', labelstretch='condensed')\n\n# Set the tick label font size\nax.tick_params(axis='x', labelsize=10)\nax.tick_params(axis='y', labelsize=10)\n\n# Set the tick label font weight\nax.tick_params(axis='x', labelweight='bold')\nax.tick_params(axis='y', labelweight='bold')\n\n# Set the tick label font style\nax.tick_params(axis='x', labelstyle='italic')\nax.tick_params(axis='y', labelstyle='italic')\n\n# Set the tick label font family\nax.tick_params(axis='x', labelfamily='serif')\nax.tick_params(axis='y', labelfamily='sans-serif')\n\n# Set the tick label font variant\nax.tick_params(axis='x', labelvariant='small-caps')\nax.tick_params(axis='y', labelvariant='normal')\n\n# Set the tick label font stretch\nax.tick_params(axis='x', labelstretch='ultra-condensed')\nax.tick_params(axis='y', labelstretch='condensed')\n\n# Set the tick label font size\nax.tick_params(axis='x', labelsize=10)\nax.tick_params(axis='y', labelsize=10)\n\n# Set the tick label font weight\nax.tick_params(axis='x', labelweight='bold')\nax.tick_params(axis='y', labelweight='bold')\n\n# Set the tick label font style\nax.tick_params(axis='x', labelstyle='italic')\nax.tick_params(axis='y', labelstyle='italic')\n\n# Set the tick label font family\nax.tick_params(axis='x', labelfamily='serif')\nax.tick_params(axis='y', labelfamily='sans-serif')\n\n# Set the tick label font variant\nax.tick_params(axis='x', labelvariant='small-caps')\nax.tick_params(axis='y', labelvariant='normal')\n\n# Set the tick label font stretch\nax.tick_params(axis='x', labelstretch='ultra-condensed')\nax.tick_params(axis='y', labelstretch='condensed')\n\n# Set the tick label font size\nax.tick_params(axis='x', labelsize=10)\nax.tick_params(axis='y', labelsize=10)\n\n# Set the tick label font weight\nax.tick_params(axis='x', labelweight='bold')\nax.tick_params(axis='y', labelweight='bold')\n\n# Set the tick label font style\nax.tick_params(axis='x', labelstyle='italic')\nax.tick_params(axis='y', labelstyle='italic')\n\n# Set the tick label font family\nax.tick_params(axis='x', labelfamily='serif')\nax.tick_params(axis='y', labelfamily='sans-serif')\n\n# Set the tick label font variant\nax.tick_params(axis='x', labelvariant='small-caps')\nax.tick_params(axis='y', labelvariant='normal')\n\n# Set the tick label font stretch\nax.tick_params(axis='x', labelstretch='ultra-condensed')\nax.tick_params(axis='y', labelstretch='condensed')\n\n# Set the tick label font size\nax.tick_params(axis='x', labelsize=10)\nax.tick_params(axis='y', labelsize=10)\n\n# Set the tick label font weight\nax.tick_params(axis='x', labelweight='bold')\nax.tick_params(axis='y', labelweight='bold')\n\n# Set the tick label font style\nax.tick_params(axis='x', labelstyle='italic')\nax.tick_params(axis='y', labelstyle='italic')\n\n# Set the tick label font family\nax.tick_params(axis='x', labelfamily='serif')\nax.tick_params(axis='y', labelfamily='sans-serif')\n\n# Set the tick label font variant\nax.tick_params(axis='x', labelvariant='small-caps')\nax.tick_params(axis='y', labelvariant='normal')\n\n# Set the tick label font stretch\nax.tick_params(axis='x', labelstretch='ultra-condensed')\nax.tick_params(axis='y', labelstretch='condensed')\n\n# Set the tick label font size\nax.tick_params(axis='x', labelsize=10)\nax.tick_params(axis='y', labelsize=10)\n\n# Set the tick label font weight\nax.tick_params(axis='x', labelweight='bold')\nax.tick_params(axis='y', labelweight='bold')\n\n# Set the tick label font style\nax.tick_params(axis='x', labelstyle='italic')\nax.tick_params(axis='y', labelstyle='italic')\n\n# Set the tick label font family\nax.tick_params(axis='x', labelfamily='serif')\nax.tick_params(axis='y', labelfamily='sans-serif')\n\n# Set the tick label font variant\nax.tick_params(axis='x', labelvariant='small-caps')\nax.tick_params(axis='y', labelvariant='normal')\n\n# Set the tick label font stretch\nax.tick_params(axis='x', labelstretch='ultra-condensed')\nax.tick_params(axis='y', labelstretch='condensed')\n\n# Set the tick label font size\nax.tick_params(axis='x', labelsize=10)\nax.tick_params(axis='y', labelsize=10)\n\n# Set the tick label font weight\nax.tick_params(axis='x', labelweight='bold')\nax.tick_params(axis='y', labelweight='bold')\n\n# Set the tick label font style\nax.tick_params(axis='x', labelstyle='italic')\nax.tick_params(axis='y', labelstyle='italic')\n\n# Set the tick label font family\nax.tick_params(axis='x', labelfamily='serif')\nax.tick_params(axis='y', labelfamily='sans-serif')\n\n# Set the tick label font variant\nax.tick_params(axis='x', labelvariant='small-caps')\nax.tick_params(axis='y', labelvariant='normal')\n\n# Set the tick label font stretch\nax.tick_params(axis='x', labelstretch='ultra-condensed')\nax.tick_params(axis='y', labelstretch='condensed')\n\n# Set the tick label font size\nax.tick_params(axis='x', labelsize=10)\nax.tick_params(axis='y', labelsize=10)\n\n# Set the tick label font weight\nax.tick_params(axis='x', labelweight='bold')\nax.tick_params(axis='y', labelweight='bold')\n\n# Set the tick label font style\nax.tick_params(axis='x', labelstyle='italic')\nax.tick_params(axis='y', labelstyle='italic')\n\n# Set the tick label font family\nax.tick_params(axis='x', labelfamily='serif')\nax.tick_params(axis='y', labelfamily='sans-serif')\n\n# Set the tick label font variant\nax.tick_params(axis='x', labelvariant='small-caps')\nax.tick_params(axis='y', labelvariant='normal')\n\n# Set the tick label font stretch\nax.tick_params(axis='x', labelstretch='ultra-condensed')\nax.tick_params(axis='y', labelstretch='condensed')\n\n# Set the tick label font size\nax.tick_params(axis='x', labelsize=10)\nax.tick_params(axis='y', labelsize=10)\n\n# Set the tick label font weight\nax.tick_params(axis='x', labelweight='bold')\nax.tick_params(axis='y', labelweight='bold')\n\n# Set the tick label font style\nax.tick_params(axis='x', labelstyle='italic')\nax.tick_params(axis='y', labelstyle='italic')\n\n# Set the tick label font family\nax.tick_params(axis='x', labelfamily='serif')\nax.tick_params(axis='y', labelfamily='sans-serif')\n\n# Set the tick label font variant\nax.tick_params(axis='x', labelvariant='small-caps')\nax.tick_params(axis='y', labelvariant='normal')\n\n# Set the tick label font stretch\nax.tick_params(axis='x', labelstretch='ultra-condensed')\nax.tick_params(axis='y', labelstretch='condensed')\n\n# Set the tick label font size\nax.tick_params(axis='x', labelsize=10)\nax.tick_params(axis='y', labelsize=10)\n\n# Set the tick label font weight\nax.tick_params(axis='x', labelweight='bold')\nax.tick_params(axis='y', labelweight='bold')\n\n# Set the tick label font style\nax.tick_params(axis='x', labelstyle='italic')\nax.tick_params(axis='y', labelstyle='italic')\n\n# Set the tick label font family\nax.tick_params(axis='x', labelfamily='serif')\nax.tick_params(axis='y', labelfamily='sans-serif')\n\n# Set the tick label font variant\nax.tick_params(axis='x', labelvariant='small-caps')\nax.tick_params(axis='y', labelvariant='normal')\n\n# Set the tick label font stretch\nax.tick_params(axis='x', labelstretch='ultra-condensed')\nax.tick_params(axis='y', labelstretch='condensed')\n\n# Set the tick label font size\nax.tick_params(axis='x', labelsize=10)\nax.tick_params(axis='y', labelsize=10)\n\n# Set the tick label font weight\nax.tick_params(axis='x', labelweight='bold')\nax.tick_params(axis='y', labelweight='bold')\n\n# Set the tick label font style\nax.tick_params(axis='x', labelstyle='italic')\nax.tick_params(axis='y', labelstyle='italic')\n\n# Set the tick label font family\nax.tick_params(axis='x', labelfamily='serif')\nax.tick_params(axis='y', labelfamily='sans-serif')\n\n# Set the tick label font variant\nax.tick_params(axis='x', labelvariant='small-caps')\nax.tick_params(axis='y', labelvariant='normal')\n\n# Set the tick label font stretch\nax.tick_params(axis='x', labelstretch='ultra-condensed')\nax.tick_params(axis='y', labelstretch='condensed')\n\n# Set the tick label font size\nax.tick_params(axis='x', labelsize=10)\nax.tick_params(axis='y', labelsize=10)\n\n# Set the tick label font weight\nax.tick_params(axis='x', labelweight='bold')\nax.tick_params(axis='y', labelweight='bold')\n\n# Set the tick label font style\nax.tick_params(axis='x', labelstyle='italic')\nax.tick_params(axis='y', labelstyle='italic')\n\n# Set the tick label font family\nax.tick_params(axis='x', labelfamily='serif')\nax.tick_params(axis='y', labelfamily='sans-serif')\n\n# Set the tick label font variant\nax.tick_params(axis='x', labelvariant='small-caps')\nax.tick_params(axis='y', labelvariant='normal')\n\n# Set the tick label font stretch\nax.tick_params(axis='x', labelstretch='ultra-condensed')\nax.tick_params(axis='y', labelstretch='condensed')\n\n# Set the tick label font size\nax.tick_params(axis='x', labelsize=10)\nax.tick_params(axis='y', labelsize=10)\n\n# Set the tick label font weight\nax.tick_params(axis='x', labelweight='bold')\nax.tick_params(axis='y', labelweight='bold')\n\n# Set the tick label font style\nax.tick_params(axis='x', labelstyle='italic')\nax.tick_params(axis='y', labelstyle='italic')\n\n# Set the tick label font family\nax.tick_params(axis='x', labelfamily='serif')\nax.tick_params(axis='y', labelfamily='sans-serif')\n\n# Set the tick label font variant\nax.tick_params(axis='x', labelvariant='small-caps')\nax.tick_params(axis='y', labelvariant='normal')\n\n# Set the tick label font stretch\nax.tick_params(axis='x', labelstretch='ultra-condensed')\nax.tick_params(axis='y', labelstretch='condensed')\n\n# Set the tick label font size\nax.tick_params(axis='x', labelsize=10)\nax.tick_params(axis='y', labelsize=10)\n\n# Set the tick label font weight\nax.tick_params(axis='x', labelweight='bold')\nax.tick_params(axis='y', labelweight='bold')\n\n# Set the tick label font style\nax.tick_params(axis='x', labelstyle='italic')\nax.tick_params(axis='y', labelstyle='italic')\n\n# Set the tick label font family\nax.tick_params(axis='x', labelfamily='serif')\nax.tick_params(axis='y', labelfamily='sans-serif')\n\n# Set the tick label font variant\nax.tick_params(axis='x', labelvariant='small-caps')\nax.tick_params(axis='y', labelvariant='normal')\n\n# Set the tick label font stretch\nax.tick_params(axis='x', labelstretch='ultra-condensed')\nax.tick_params(axis='y', labelstretch='condensed')\n\n# Set the tick label font size\nax.tick_params(axis='x', labelsize=10)\nax.tick_params(axis='y', labelsize=10)\n\n# Set the tick"}
{"file": "dataset/ori_500/radar_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Set the title of the plot\nax.set_title('My Bookstore')\n\n# Create a circle for the bookstore logo\ncircle = plt.Circle((0.5, 0.5), 0.4, color='lightgrey')\nax.add_artist(circle)\n\n# Create a rectangle for the bookstore name\nrect = plt.Rectangle((0.3, 0.7), 0.4, 0.1, color='blue')\nax.add_artist(rect)\n\n# Create a rectangle for the bookstore slogan\nslogan = plt.Rectangle((0.3, 0.6), 0.4, 0.1, color='blue')\nax.add_artist(slogan)\n\n# Create a rectangle for the bookstore location\nlocation = plt.Rectangle((0.3, 0.5), 0.4, 0.1, color='blue')\nax.add_artist(location)\n\n# Create a rectangle for the bookstore hours\nhours = plt.Rectangle((0.3, 0.4), 0.4, 0.1, color='blue')\nax.add_artist(hours)\n\n# Create a rectangle for the bookstore website\nwebsite = plt.Rectangle((0.3, 0.3), 0.4, 0.1, color='blue')\nax.add_artist(website)\n\n# Create a rectangle for the bookstore social media\nsocial_media = plt.Rectangle((0.3, 0.2), 0.4, 0.1, color='blue')\nax.add_artist(social_media)\n\n# Create a rectangle for the bookstore events\nevents = plt.Rectangle((0.3, 0.1), 0.4, 0.1, color='blue')\nax.add_artist(events)\n\n# Set the aspect ratio of the plot to be equal\nax.set_aspect('equal')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Roleplay')\n\n# Create a circle for the center of the plot\ncircle = plt.Circle((0.5, 0.5), 0.4, color='white')\nax.add_artist(circle)\n\n# Create a list of subjects\nsubjects = ['Reasoning', 'Writing', 'Math', 'Coding', 'Extraction', 'Humanities', 'STEM']\n\n# Create a list of colors for each subject\ncolors = ['blue', 'orange', 'green', 'red', 'purple', 'brown', 'pink']\n\n# Create a list of scores for each subject\nscores = [85, 90, 78, 82, 95, 88, 92]\n\n# Create a list of labels for each subject\nlabels = ['GPT-J-6B', 'TinyLLaMA-1.1B', 'OpenLLaMA-3B', 'OpenMoE-8B/32E']\n\n# Create a list of colors for each label\nlabel_colors = ['blue', 'orange', 'green', 'red']\n\n# Create a list of sizes for each label\nlabel_sizes = [10, 15, 20, 25]\n\n# Create a list of positions for each label\nlabel_positions = [(0.4, 0.6), (0.6, 0.4), (0.4, 0.2), (0.2, 0.4)]\n\n# Create a list of shapes for each subject\nshapes = ['rectangle', 'rectangle', 'rectangle', 'rectangle', 'rectangle', 'rectangle', 'rectangle']\n\n# Create a list of sizes for each shape\nshape_sizes = [0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1]\n\n# Create a list of positions for each shape\nshape_positions = [(0.4, 0.6), (0.6, 0.4), (0.4, 0.2), (0.2, 0.4), (0.4, 0.6), (0.6, 0.4), (0.4, 0.2)]\n\n# Create a list of colors for each shape\nshape_colors = ['blue', 'orange', 'green', 'red', 'purple', 'brown', 'pink']\n\n# Create a list of labels for each shape\nshape_labels = ['GPT-J-6B', 'TinyLLaMA-1.1B', 'OpenLLaMA-3B', 'OpenMoE-8B/32E']\n\n# Create a list of sizes for each label\nshape_label_sizes = [10, 15, 20, 25]\n\n# Create a list of positions for each label\nshape_label_positions = [(0.4, 0.6), (0.6, 0.4), (0.4, 0.2), (0.2, 0.4)]\n\n# Create a list of shapes for each subject\nshapes = ['rectangle', 'rectangle', 'rectangle', 'rectangle', 'rectangle', 'rectangle', 'rectangle']\n\n# Create a list of sizes for each shape\nshape_sizes = [0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1]\n\n# Create a list of positions for each shape\nshape_positions = [(0.4, 0.6), (0.6, 0.4), (0.4, 0.2), (0.2, 0.4), (0.4, 0.6), (0.6, 0.4), (0.4, 0.2)]\n\n# Create a list of colors for each shape\nshape_colors = ['blue', 'orange', 'green', 'red', 'purple', 'brown', 'pink']\n\n# Create a list of labels for each shape\nshape_labels = ['GPT-J-6B', 'TinyLLaMA-1.1B', 'OpenLLaMA-3B', 'OpenMoE-8B/32E']\n\n# Create a list of sizes for each label\nshape_label_sizes = [10, 15, 20, 25]\n\n# Create a list of positions for each label\nshape_label_positions = [(0.4, 0.6), (0.6, 0.4), (0.4, 0.2), (0.2, 0.4)]\n\n# Create a list of shapes for each subject\nshapes = ['rectangle', 'rectangle', 'rectangle', 'rectangle', 'rectangle', 'rectangle', 'rectangle']\n\n# Create a list of sizes for each shape\nshape_sizes = [0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1]\n\n# Create a list of positions for each shape\nshape_positions = [(0.4, 0.6), (0.6, 0.4), (0.4, 0.2), (0.2, 0.4), (0.4, 0.6), (0.6, 0.4), (0.4, 0.2)]\n\n# Create a list of colors for each shape\nshape_colors = ['blue', 'orange', 'green', 'red', 'purple', 'brown', 'pink']\n\n# Create a list of labels for each shape\nshape_labels = ['GPT-J-6B', 'TinyLLaMA-1.1B', 'OpenLLaMA-3B', 'OpenMoE-8B/32E']\n\n# Create a list of sizes for each label\nshape_label_sizes = [10, 15, 20, 25]\n\n# Create a list of positions for each label\nshape_label_positions = [(0.4, 0.6), (0.6, 0.4), (0.4, 0.2), (0.2, 0.4)]\n\n# Create a list of shapes for each subject\nshapes = ['rectangle', 'rectangle', 'rectangle', 'rectangle', 'rectangle', 'rectangle', 'rectangle']\n\n# Create a list of sizes for each shape\nshape_sizes = [0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1]\n\n# Create a list of positions for each shape\nshape_positions = [(0.4, 0.6), (0.6, 0.4), (0.4, 0.2), (0.2, 0.4), (0.4, 0.6), (0.6, 0.4), (0.4, 0.2)]\n\n# Create a list of colors for each shape\nshape_colors = ['blue', 'orange', 'green', 'red', 'purple', 'brown', 'pink']\n\n# Create a list of labels for each shape\nshape_labels = ['GPT-J-6B', 'TinyLLaMA-1.1B', 'OpenLLaMA-3B', 'OpenMoE-8B/32E']\n\n# Create a list of sizes for each label\nshape_label_sizes = [10, 15, 20, 25]\n\n# Create a list of positions for each label\nshape_label_positions = [(0.4, 0.6), (0.6, 0.4), (0.4, 0.2), (0.2, 0.4)]\n\n# Create a list of shapes for each subject\nshapes = ['rectangle', 'rectangle', 'rectangle', 'rectangle', 'rectangle', 'rectangle', 'rectangle']\n\n# Create a list of sizes for each shape\nshape_sizes = [0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1]\n\n# Create a list of positions for each shape\nshape_positions = [(0.4, 0.6), (0.6, 0.4), (0.4, 0.2), (0.2, 0.4), (0.4, 0.6), (0.6, 0.4), (0.4, 0.2)]\n\n# Create a list of colors for each shape\nshape_colors = ['blue', 'orange', 'green', 'red', 'purple', 'brown', 'pink']\n\n# Create a list of labels for each shape\nshape_labels = ['GPT-J-6B', 'TinyLLaMA-1.1B', 'OpenLLaMA-3B', 'OpenMoE-8B/32E']\n\n# Create a list of sizes for each label\nshape_label_sizes = [10, 15, 20, 25]\n\n# Create a list of positions for each label\nshape_label_positions = [(0.4, 0.6), (0.6, 0.4), (0.4, 0.2), (0.2, 0.4)]\n\n# Create a list of shapes for each subject\nshapes = ['rectangle', 'rectangle', 'rectangle', 'rectangle', 'rectangle', 'rectangle', 'rectangle']\n\n# Create a list of sizes for each shape\nshape_sizes = [0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1]\n\n# Create a list of positions for each shape\nshape_positions = [(0.4, 0.6), (0.6, 0.4), (0.4, 0.2), (0.2, 0.4), (0.4, 0.6), (0.6, 0.4), (0.4, 0.2)]\n\n# Create a list of colors for each shape\nshape_colors = ['blue', 'orange', 'green', 'red', 'purple', 'brown', 'pink']\n\n# Create a list of labels for each shape\nshape_labels = ['GPT-J-6B', 'TinyLLaMA-1.1B', 'OpenLLaMA-3B', 'OpenMoE-8B/32E']\n\n# Create a list of sizes for each label\nshape_label_sizes = [10, 15, 20, 25]\n\n# Create a list of positions for each label\nshape_label_positions = [(0.4, 0.6), (0.6, 0.4), (0.4, 0.2), (0.2, 0.4)]\n\n# Create a list of shapes for each subject\nshapes = ['rectangle', 'rectangle', 'rectangle', 'rectangle', 'rectangle', 'rectangle', 'rectangle']\n\n# Create a list of sizes for each shape\nshape_sizes = [0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1]\n\n# Create a list of positions for each shape\nshape_positions = [(0.4, 0.6), (0.6, 0.4), (0.4, 0.2), (0.2, 0.4), (0.4, 0.6), (0.6, 0.4), (0.4, 0.2)]\n\n# Create a list of colors for each shape\nshape_colors = ['blue', 'orange', 'green', 'red', 'purple', 'brown', 'pink']\n\n# Create a list of labels for each shape\nshape_labels = ['GPT-J-6B', 'TinyLLaMA-1.1B', 'OpenLLaMA-3B', 'OpenMoE-8B/32E']\n\n# Create a list of sizes for each label\nshape_label_sizes = [10, 15, 20, 25]\n\n# Create a list of positions for each label\nshape_label_positions = [(0.4, 0.6), (0.6, 0.4), (0.4, 0.2), (0.2, 0.4)]\n\n# Create a list of shapes for each subject\nshapes = ['rectangle', 'rectangle', 'rectangle', 'rectangle', 'rectangle', 'rectangle', 'rectangle']\n\n# Create a list of sizes for each shape\nshape_sizes = [0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1]\n\n# Create a list of positions for each shape\nshape_positions = [(0.4, 0.6), (0.6, 0.4), (0.4, 0.2), (0.2, 0.4), (0.4, 0.6), (0.6, 0.4), (0.4, 0.2)]\n\n# Create a list of colors for each shape\nshape_colors = ['blue', 'orange', 'green', 'red', 'purple', 'brown', 'pink']\n\n# Create a list of labels for each shape\nshape_labels = ['GPT-J-6B', 'TinyLLaMA-1.1B', 'OpenLLaMA-3B', 'OpenMoE-8B/32E']\n\n# Create a list of sizes for each label\nshape_label_sizes = [10, 15, 20, 25]\n\n# Create a list of positions for each label\nshape_label_positions = [(0.4, 0.6), (0.6, 0.4), (0.4, 0.2), (0.2, 0.4)]\n\n# Create a list of shapes for each subject\nshapes = ['rectangle', 'rectangle', 'rectangle', 'rectangle', 'rectangle', 'rectangle', 'rectangle']\n\n# Create a list of sizes for each shape\nshape_sizes = [0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1]\n\n# Create a list of positions for each shape\nshape_positions = [(0.4, 0.6), (0.6, 0.4), (0.4, 0.2), (0.2, 0.4), (0.4, 0.6), (0.6, 0.4), (0.4, 0.2)]\n\n# Create a list of colors for each shape\nshape_colors = ['blue', 'orange', 'green', 'red', 'purple', 'brown', 'pink']\n\n# Create a list of labels for each shape\nshape_labels = ['GPT-J-6B', 'TinyLLaMA-1.1B', 'OpenLLaMA-3B', 'OpenMoE-8B/32E']\n\n# Create a list of sizes for each label\nshape_label_sizes = [10, 15, 20, 25]\n\n# Create a list of positions for each label\nshape_label_positions = [(0.4, 0.6), (0.6, 0.4), (0.4, 0.2), (0.2, 0.4)]\n\n# Create a list of shapes for each subject\nshapes = ['rectangle', 'rectangle', 'rectangle', 'rectangle', 'rectangle', 'rectangle', 'rectangle']\n\n# Create a list of sizes for each shape\nshape_sizes = [0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1]\n\n# Create a list of positions for each shape\nshape_positions = [(0.4, 0.6), (0.6, 0.4), (0.4, 0.2), (0.2, 0.4), (0.4, 0.6), (0.6, 0.4), (0.4, 0.2)]\n\n# Create a list of colors for each shape\nshape_colors = ['blue', 'orange', 'green', 'red', 'purple', 'brown', 'pink']\n\n# Create a list of labels for each shape\nshape_labels = ['GPT-J-6B', 'TinyLLaMA-1.1B', 'OpenLLaMA-3B', 'OpenMoE-8B/32E']\n\n# Create a list of sizes for each label\nshape_label_sizes = [10, 15, 20, 25]\n\n# Create a list of positions for each label\nshape_label_positions = [(0.4, 0.6), (0.6, 0.4), (0.4, 0.2), (0.2, 0.4)]\n\n# Create a list of shapes for each subject\nshapes = ['rectangle', 'rectangle', 'rectangle', 'rectangle', 'rectangle', 'rectangle', 'rectangle']\n\n# Create a list of sizes for each shape\nshape_sizes = [0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1]\n\n# Create a list of positions for each shape\nshape_positions = [(0.4, 0.6), (0.6, 0.4), (0.4, 0.2), (0.2, 0.4), (0.4, 0.6), (0.6, 0.4), (0.4, 0.2)]\n\n# Create a list of colors for each shape\nshape_colors = ['blue', 'orange', 'green', 'red', 'purple', 'brown', 'pink']\n\n# Create a list of labels for each shape\nshape_labels = ['GPT-J-6B', 'TinyLLaMA-1.1B', 'OpenLLaMA-3B', 'OpenMoE-8B/32E']\n\n# Create a list of sizes for each label\nshape_label_sizes = [10, 15, 20, 25]\n\n# Create a list of positions for each label\nshape_label_positions = [(0.4, 0.6), (0.6, 0.4), (0.4, 0.2), (0.2, 0.4)]\n\n# Create a list of shapes for each subject\nshapes = ['rectangle', 'rectangle', 'rectangle', 'rectangle', 'rectangle', 'rectangle', 'rectangle']\n\n# Create a list of sizes for each shape\nshape_sizes = [0.1, 0."}
{"file": "dataset/ori_500/radar_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Set the title of the plot\nax.set_title('MUJI vs Nestle in Food Safety')\n\n# Draw a circle for the center of the plot\ncircle = plt.Circle((0.5, 0.5), 0.4, color='gray')\nax.add_artist(circle)\n\n# Draw a rectangle for the outer ring\nrectangle = plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='orange')\nax.add_artist(rectangle)\n\n# Draw a polygon for the inner ring\npolygon = plt.Polygon([[0.3, 0.3], [0.7, 0.3], [0.5, 0.7]], color='pink')\nax.add_artist(polygon)\n\n# Draw a circle for the center of the plot\ncircle = plt.Circle((0.5, 0.5), 0.1, color='red')\nax.add_artist(circle)\n\n# Draw a rectangle for the outer ring\nrectangle = plt.Rectangle((0.4, 0.4), 0.2, 0.2, color='green')\nax.add_artist(rectangle)\n\n# Draw a polygon for the inner ring\npolygon = plt.Polygon([[0.45, 0.45], [0.55, 0.45], [0.5, 0.55]], color='blue')\nax.add_artist(polygon)\n\n# Draw a circle for the center of the plot\ncircle = plt.Circle((0.5, 0.5), 0.05, color='black')\nax.add_artist(circle)\n\n# Draw a rectangle for the outer ring\nrectangle = plt.Rectangle((0.48, 0.48), 0.04, 0.04, color='yellow')\nax.add_artist(rectangle)\n\n# Draw a polygon for the inner ring\npolygon = plt.Polygon([[0.49, 0.49], [0.51, 0.49], [0.5, 0.51]], color='purple')\nax.add_artist(polygon)\n\n# Draw a circle for the center of the plot\ncircle = plt.Circle((0.5, 0.5), 0.025, color='brown')\nax.add_artist(circle)\n\n# Draw a rectangle for the outer ring\nrectangle = plt.Rectangle((0.495, 0.495), 0.01, 0.01, color='cyan')\nax.add_artist(rectangle)\n\n# Draw a polygon for the inner ring\npolygon = plt.Polygon([[0.4975, 0.4975], [0.5025, 0.4975], [0.5, 0.5025]], color='magenta')\nax.add_artist(polygon)\n\n# Draw a circle for the center of the plot\ncircle = plt.Circle((0.5, 0.5), 0.0125, color='grey')\nax.add_artist(circle)\n\n# Draw a rectangle for the outer ring\nrectangle = plt.Rectangle((0.4975, 0.4975), 0.005, 0.005, color='white')\nax.add_artist(rectangle)\n\n# Draw a polygon for the inner ring\npolygon = plt.Polygon([[0.49875, 0.49875], [0.50125, 0.49875], [0.5, 0.50125]], color='silver')\nax.add_artist(polygon)\n\n# Draw a circle for the center of the plot\ncircle = plt.Circle((0.5, 0.5), 0.00625, color='gold')\nax.add_artist(circle)\n\n# Draw a rectangle for the outer ring\nrectangle = plt.Rectangle((0.49875, 0.49875), 0.0025, 0.0025, color='black')\nax.add_artist(rectangle)\n\n# Draw a polygon for the inner ring\npolygon = plt.Polygon([[0.499375, 0.499375], [0.500625, 0.499375], [0.5, 0.500625]], color='silver')\nax.add_artist(polygon)\n\n# Draw a circle for the center of the plot\ncircle = plt.Circle((0.5, 0.5), 0.003125, color='gold')\nax.add_artist(circle)\n\n# Draw a rectangle for the outer ring\nrectangle = plt.Rectangle((0.499375, 0.499375), 0.00125, 0.00125, color='black')\nax.add_artist(rectangle)\n\n# Draw a polygon for the inner ring\npolygon = plt.Polygon([[0.4996875, 0.4996875], [0.5003125, 0.4996875], [0.5, 0.5003125]], color='silver')\nax.add_artist(polygon)\n\n# Draw a circle for the center of the plot\ncircle = plt.Circle((0.5, 0.5), 0.0015625, color='gold')\nax.add_artist(circle)\n\n# Draw a rectangle for the outer ring\nrectangle = plt.Rectangle((0.4996875, 0.4996875), 0.000625, 0.000625, color='black')\nax.add_artist(rectangle)\n\n# Draw a polygon for the inner ring\npolygon = plt.Polygon([[0.49984375, 0.49984375], [0.50015625, 0.49984375], [0.5, 0.50015625]], color='silver')\nax.add_artist(polygon)\n\n# Draw a circle for the center of the plot\ncircle = plt.Circle((0.5, 0.5), 0.00078125, color='gold')\nax.add_artist(circle)\n\n# Draw a rectangle for the outer ring\nrectangle = plt.Rectangle((0.49984375, 0.49984375), 0.0003125, 0.0003125, color='black')\nax.add_artist(rectangle)\n\n# Draw a polygon for the inner ring\npolygon = plt.Polygon([[0.499921875, 0.499921875], [0.500078125, 0.499921875], [0.5, 0.500078125]], color='silver')\nax.add_artist(polygon)\n\n# Draw a circle for the center of the plot\ncircle = plt.Circle((0.5, 0.5), 0.000390625, color='gold')\nax.add_artist(circle)\n\n# Draw a rectangle for the outer ring\nrectangle = plt.Rectangle((0.499921875, 0.499921875), 0.00015625, 0.00015625, color='black')\nax.add_artist(rectangle)\n\n# Draw a polygon for the inner ring\npolygon = plt.Polygon([[0.4999609375, 0.4999609375], [0.5000390625, 0.4999609375], [0.5, 0.5000390625]], color='silver')\nax.add_artist(polygon)\n\n# Draw a circle for the center of the plot\ncircle = plt.Circle((0.5, 0.5), 0.0001953125, color='gold')\nax.add_artist(circle)\n\n# Draw a rectangle for the outer ring\nrectangle = plt.Rectangle((0.4999609375, 0.4999609375), 0.000078125, 0.000078125, color='black')\nax.add_artist(rectangle)\n\n# Draw a polygon for the inner ring\npolygon = plt.Polygon([[0.49998046875, 0.49998046875], [0.50001953125, 0.49998046875], [0.5, 0.50001953125]], color='silver')\nax.add_artist(polygon)\n\n# Draw a circle for the center of the plot\ncircle = plt.Circle((0.5, 0.5), 0.00009765625, color='gold')\nax.add_artist(circle)\n\n# Draw a rectangle for the outer ring\nrectangle = plt.Rectangle((0.49998046875, 0.49998046875), 0.0000390625, 0.0000390625, color='black')\nax.add_artist(rectangle)\n\n# Draw a polygon for the inner ring\npolygon = plt.Polygon([[0.499990234375, 0.499990234375], [0.500009765625, 0.499990234375], [0.5, 0.500009765625]], color='silver')\nax.add_artist(polygon)\n\n# Draw a circle for the center of the plot\ncircle = plt.Circle((0.5, 0.5), 0.000048828125, color='gold')\nax.add_artist(circle)\n\n# Draw a rectangle for the outer ring\nrectangle = plt.Rectangle((0.499990234375, 0.499990234375), 0.000015625, 0.000015625, color='black')\nax.add_artist(rectangle)\n\n# Draw a polygon for the inner ring\npolygon = plt.Polygon([[0.4999951171875, 0.4999951171875], [0.5000048828125, 0.4999951171875], [0.5, 0.5000048828125]], color='silver')\nax.add_artist(polygon)\n\n# Draw a circle for the center of the plot\ncircle = plt.Circle((0.5, 0.5), 0.0000244140625, color='gold')\nax.add_artist(circle)\n\n# Draw a rectangle for the outer ring\nrectangle = plt.Rectangle((0.4999951171875, 0.4999951171875), 0.0000078125, 0.0000078125, color='black')\nax.add_artist(rectangle)\n\n# Draw a polygon for the inner ring\npolygon = plt.Polygon([[0.4999975537109375, 0.4999975537109375], [0.5000024462890625, 0.4999975537109375], [0.5, 0.5000024462890625]], color='silver')\nax.add_artist(polygon)\n\n# Draw a circle for the center of the plot\ncircle = plt.Circle((0.5, 0.5), 0.00001220703125, color='gold')\nax.add_artist(circle)\n\n# Draw a rectangle for the outer ring\nrectangle = plt.Rectangle((0.4999975537109375, 0.4999975537109375), 0.00000390625, 0.00000390625, color='black')\nax.add_artist(rectangle)\n\n# Draw a polygon for the inner ring\npolygon = plt.Polygon([[0.49999877685546875, 0.49999877685546875], [0.50000122314453125, 0.49999877685546875], [0.5, 0.50000122314453125]], color='silver')\nax.add_artist(polygon)\n\n# Draw a circle for the center of the plot\ncircle = plt.Circle((0.5, 0.5), 0.000006103515625, color='gold')\nax.add_artist(circle)\n\n# Draw a rectangle for the outer ring\nrectangle = plt.Rectangle((0.49999877685546875, 0.49999877685546875), 0.0000015625, 0.0000015625, color='black')\nax.add_artist(rectangle)\n\n# Draw a polygon for the inner ring\npolygon = plt.Polygon([[0.4999993884296875, 0.4999993884296875], [0.5000006115703125, 0.4999993884296875], [0.5, 0.5000006115703125]], color='silver')\nax.add_artist(polygon)\n\n# Draw a circle for the center of the plot\ncircle = plt.Circle((0.5, 0.5), 0.0000030517578125, color='gold')\nax.add_artist(circle)\n\n# Draw a rectangle for the outer ring\nrectangle = plt.Rectangle((0.4999993884296875, 0.4999993884296875), 0.00000078125, 0.00000078125, color='black')\nax.add_artist(rectangle)\n\n# Draw a polygon for the inner ring\npolygon = plt.Polygon([[0.49999969421484375, 0.49999969421484375], [0.50000030578515625, 0.49999969421484375], [0.5, 0.50000030578515625]], color='silver')\nax.add_artist(polygon)\n\n# Draw a circle for the center of the plot\ncircle = plt.Circle((0.5, 0.5), 0.00000152587890625, color='gold')\nax.add_artist(circle)\n\n# Draw a rectangle for the outer ring\nrectangle = plt.Rectangle((0.49999969421484375, 0.49999969421484375), 0.000000390625, 0.000000390625, color='black')\nax.add_artist(rectangle)\n\n# Draw a polygon for the inner ring\npolygon = plt.Polygon([[0.499999847109375, 0.499999847109375], [0.500000152890625, 0.499999847109375], [0.5, 0.500000152890625]], color='silver')\nax.add_artist(polygon)\n\n# Draw a circle for the center of the plot\ncircle = plt.Circle((0.5, 0.5), 0.000000762939453125, color='gold')\nax.add_artist(circle)\n\n# Draw a rectangle for the outer ring\nrectangle = plt.Rectangle((0.499999847109375, 0.499999847109375), 0.00000015625, 0.00000015625, color='black')\nax.add_artist(rectangle)\n\n# Draw a polygon for the inner ring\npolygon = plt.Polygon([[0.4999999235546875, 0.4999999235546875],"}
{"file": "dataset/ori_500/radar_16.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 7.0))\n\n# Set the title of the plot\nax.set_title('Global Stock Market')\n\n# Create a circle for the world map\ncircle = plt.Circle((0.5, 0.5), 0.4, color='black')\nax.add_artist(circle)\n\n# Create a rectangle for the US\nrectangle = plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='blue')\nax.add_artist(rectangle)\n\n# Create a hexagon for Europe\nhexagon = plt.Polygon([[0.3, 0.7], [0.4, 0.9], [0.5, 0.7], [0.6, 0.9], [0.7, 0.7], [0.6, 0.5], [0.5, 0.3], [0.4, 0.5]], color='green')\nax.add_artist(hexagon)\n\n# Create a pentagon for China\npentagon = plt.Polygon([[0.1, 0.1], [0.2, 0.3], [0.3, 0.1], [0.4, 0.3], [0.5, 0.1]], color='orange')\nax.add_artist(pentagon)\n\n# Create a triangle for India\ntriangle = plt.Polygon([[0.7, 0.1], [0.8, 0.3], [0.9, 0.1]], color='red')\nax.add_artist(triangle)\n\n# Create a rectangle for Brazil\nrectangle = plt.Rectangle((0.7, 0.7), 0.2, 0.2, color='yellow')\nax.add_artist(rectangle)\n\n# Set the limits of the plot\nax.set_xlim(0, 1)\nax.set_ylim(0, 1)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_17.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Create a circle for the radar chart\ncircle = plt.Circle((0.5, 0.5), 0.4, color='black')\nax.add_artist(circle)\n\n# Set the limits of the plot\nax.set_xlim(0, 1)\nax.set_ylim(0, 1)\n\n# Set the aspect ratio to be equal\nax.set_aspect('equal')\n\n# Set the tick labels\nax.set_xticks([0.25, 0.75])\nax.set_yticks([0.25, 0.75])\n\n# Set the tick labels\nax.set_xticklabels(['Injection', 'Extrusion'])\nax.set_yticklabels(['Blow Molding', 'Compression'])\n\n# Set the title\nax.set_title('Radar Chart')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params"}
{"file": "dataset/ori_500/radar_18.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Set the title of the plot\nax.set_title('Amusement Park Comparison: Disney vs Universal Studios')\n\n# Create a circle for the park map\ncircle = plt.Circle((0.5, 0.5), 0.4, color='orange')\nax.add_artist(circle)\n\n# Add labels for the different areas\nax.text(0.5, 0.6, 'Food Quality', ha='center', va='center')\nax.text(0.5, 0.4, 'Shows', ha='center', va='center')\nax.text(0.5, 0.2, 'Staff', ha='center', va='center')\nax.text(0.5, 0.8, 'Cleanliness', ha='center', va='center')\nax.text(0.5, 0.1, 'Wait Times', ha='center', va='center')\nax.text(0.5, 0.9, 'Ticket Price', ha='center', va='center')\nax.text(0.3, 0.5, 'Family Rides', ha='center', va='center')\nax.text(0.7, 0.5, 'Thrill Rides', ha='center', va='center')\nax.text(0.1, 0.5, 'Parking', ha='center', va='center')\nax.text(0.9, 0.5, 'Souvenirs', ha='center', va='center')\n\n# Add a legend for the different parks\nlegend_elements = [plt.Line2D([0], [0], marker='o', color='w', label='Disney', markerfacecolor='orange', markersize=10),\n                    plt.Line2D([0], [0], marker='o', color='w', label='Universal Studios', markerfacecolor='purple', markersize=10)]\nax.legend(handles=legend_elements, loc='upper right')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_19.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Creative Process')\n\n# Create a circle for the center of the plot\ncircle = plt.Circle((0.5, 0.5), 0.4, color='white')\nax.add_artist(circle)\n\n# Create a rectangle for the outer layer of the plot\nrectangle = plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='blue')\nax.add_artist(rectangle)\n\n# Create a polygon for the middle layer of the plot\npolygon = plt.Polygon([[0.3, 0.3], [0.7, 0.3], [0.5, 0.7]], color='green')\nax.add_artist(polygon)\n\n# Create a scatter plot for the inner layer of the plot\nscatter = plt.scatter([0.5], [0.5], s=100, c='red')\nax.add_artist(scatter)\n\n# Set the aspect ratio of the plot to be equal\nax.set_aspect('equal')\n\n# Set the limits of the plot\nax.set_xlim(0, 1)\nax.set_ylim(0, 1)\n\n# Set the labels of the plot\nax.set_xlabel('Creativity')\nax.set_ylabel('Popularity')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 7.0))\n\n# Set the title of the plot\nax.set_title('POPE')\n\n# Create a circle patch\ncircle = plt.Circle((0.5, 0.5), 0.4, color='lightblue')\nax.add_artist(circle)\n\n# Create a rectangle patch\nrectangle = plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='lightgreen')\nax.add_artist(rectangle)\n\n# Create a polygon patch\npolygon = plt.Polygon([[0.1, 0.1], [0.3, 0.9], [0.9, 0.9], [0.7, 0.1]], color='lightcoral')\nax.add_artist(polygon)\n\n# Create a scatter plot\nx = np.random.rand(10)\ny = np.random.rand(10)\nax.scatter(x, y, color='lightgrey')\n\n# Create a bar chart\nheights = [78.7, 76.1, 75.9, 74.1, 73.9, 72.9, 71.9, 70.9, 69.9, 68.9]\nbars = ax.bar(range(len(heights)), heights, color='lightpink')\n\n# Create a pie chart\nsizes = [85.7, 83.9, 82.9, 81.9, 80.9, 79.9, 78.9, 77.9, 76.9, 75.9]\nax.pie(sizes, colors=['red', 'blue', 'green'])\n\n# Create a histogram\ndata = np.random.randn(1000)\nax.hist(data, bins=10, color='lightyellow')\n\n# Create a line plot\nx = np.linspace(0, 10, 100)\ny = np.sin(x)\nax.plot(x, y, color='lightcyan')\n\n# Create a heatmap\ndata = np.random.rand(10, 10)\nax.imshow(data, cmap='hot', interpolation='nearest')\n\n# Create a contour plot\nx = np.linspace(-5, 5, 100)\ny = np.linspace(-5, 5, 100)\nX, Y = np.meshgrid(x, y)\nZ = np.sin(np.sqrt(X**2 + Y**2))\nCS = ax.contourf(X, Y, Z, cmap='coolwarm')\n\n# Create a streamplot\nx = np.linspace(-5, 5, 100)\ny = np.linspace(-5, 5, 100)\nX, Y = np.meshgrid(x, y)\nU = np.cos(np.sqrt(X**2 + Y**2))\nV = np.sin(np.sqrt(X**2 + Y**2))\nax.streamplot(X, Y, U, V, color='lightblue')\n\n# Create a polar plot\ntheta = np.linspace(0, 2*np.pi, 100)\nr = np.linspace(0, 1, 100)\ntheta, r = np.meshgrid(theta, r)\nax.polar(theta, r, color='lightgreen')\n\n# Create a 3D plot\nfrom mpl_toolkits.mplot3d import Axes3D\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nx = np.linspace(-5, 5, 100)\ny = np.linspace(-5, 5, 100)\nX, Y = np.meshgrid(x, y)\nZ = np.sin(np.sqrt(X**2 + Y**2))\nax.plot_surface(X, Y, Z, color='lightcoral')\n\n# Create a 3D scatter plot\nx = np.random.rand(100)\ny = np.random.rand(100)\nz = np.random.rand(100)\nax.scatter(x, y, z, color='lightgrey')\n\n# Create a 3D bar chart\nx = np.linspace(-5, 5, 10)\ny = np.linspace(-5, 5, 10)\nX, Y = np.meshgrid(x, y)\nZ = np.sin(np.sqrt(X**2 + Y**2))\nax.bar3d(X, Y, np.zeros_like(Z), 1, 1, Z, color='lightpink')\n\n# Create a 3D contour plot\nx = np.linspace(-5, 5, 100)\ny = np.linspace(-5, 5, 100)\nX, Y = np.meshgrid(x, y)\nZ = np.sin(np.sqrt(X**2 + Y**2))\nax.contour3D(X, Y, Z, 50, cmap='coolwarm')\n\n# Create a 3D streamplot\nx = np.linspace(-5, 5, 100)\ny = np.linspace(-5, 5, 100)\nX, Y = np.meshgrid(x, y)\nU = np.cos(np.sqrt(X**2 + Y**2))\nV = np.sin(np.sqrt(X**2 + Y**2))\nax.streamplot3D(X, Y, U, V, color='lightblue')\n\n# Create a 3D polar plot\ntheta = np.linspace(0, 2*np.pi, 100)\nr = np.linspace(0, 1, 100)\ntheta, r = np.meshgrid(theta, r)\nax.plot3D(theta, r, np.zeros_like(r), color='lightgreen')\n\n# Create a 3D heatmap\ndata = np.random.rand(10, 10, 10)\nax.imshow(data, cmap='hot', interpolation='nearest')\n\n# Create a 3D contour plot\nx = np.linspace(-5, 5, 100)\ny = np.linspace(-5, 5, 100)\nX, Y = np.meshgrid(x, y)\nZ = np.sin(np.sqrt(X**2 + Y**2))\nax.contour3D(X, Y, Z, 50, cmap='coolwarm')\n\n# Create a 3D streamplot\nx = np.linspace(-5, 5, 100)\ny = np.linspace(-5, 5, 100)\nX, Y = np.meshgrid(x, y)\nU = np.cos(np.sqrt(X**2 + Y**2))\nV = np.sin(np.sqrt(X**2 + Y**2))\nax.streamplot3D(X, Y, U, V, color='lightblue')\n\n# Create a 3D polar plot\ntheta = np.linspace(0, 2*np.pi, 100)\nr = np.linspace(0, 1, 100)\ntheta, r = np.meshgrid(theta, r)\nax.plot3D(theta, r, np.zeros_like(r), color='lightgreen')\n\n# Create a 3D heatmap\ndata = np.random.rand(10, 10, 10)\nax.imshow(data, cmap='hot', interpolation='nearest')\n\n# Create a 3D contour plot\nx = np.linspace(-5, 5, 100)\ny = np.linspace(-5, 5, 100)\nX, Y = np.meshgrid(x, y)\nZ = np.sin(np.sqrt(X**2 + Y**2))\nax.contour3D(X, Y, Z, 50, cmap='coolwarm')\n\n# Create a 3D streamplot\nx = np.linspace(-5, 5, 100)\ny = np.linspace(-5, 5, 100)\nX, Y = np.meshgrid(x, y)\nU = np.cos(np.sqrt(X**2 + Y**2))\nV = np.sin(np.sqrt(X**2 + Y**2))\nax.streamplot3D(X, Y, U, V, color='lightblue')\n\n# Create a 3D polar plot\ntheta = np.linspace(0, 2*np.pi, 100)\nr = np.linspace(0, 1, 100)\ntheta, r = np.meshgrid(theta, r)\nax.plot3D(theta, r, np.zeros_like(r), color='lightgreen')\n\n# Create a 3D heatmap\ndata = np.random.rand(10, 10, 10)\nax.imshow(data, cmap='hot', interpolation='nearest')\n\n# Create a 3D contour plot\nx = np.linspace(-5, 5, 100)\ny = np.linspace(-5, 5, 100)\nX, Y = np.meshgrid(x, y)\nZ = np.sin(np.sqrt(X**2 + Y**2))\nax.contour3D(X, Y, Z, 50, cmap='coolwarm')\n\n# Create a 3D streamplot\nx = np.linspace(-5, 5, 100)\ny = np.linspace(-5, 5, 100)\nX, Y = np.meshgrid(x, y)\nU = np.cos(np.sqrt(X**2 + Y**2))\nV = np.sin(np.sqrt(X**2 + Y**2))\nax.streamplot3D(X, Y, U, V, color='lightblue')\n\n# Create a 3D polar plot\ntheta = np.linspace(0, 2*np.pi, 100)\nr = np.linspace(0, 1, 100)\ntheta, r = np.meshgrid(theta, r)\nax.plot3D(theta, r, np.zeros_like(r), color='lightgreen')\n\n# Create a 3D heatmap\ndata = np.random.rand(10, 10, 10)\nax.imshow(data, cmap='hot', interpolation='nearest')\n\n# Create a 3D contour plot\nx = np.linspace(-5, 5, 100)\ny = np.linspace(-5, 5, 100)\nX, Y = np.meshgrid(x, y)\nZ = np.sin(np.sqrt(X**2 + Y**2))\nax.contour3D(X, Y, Z, 50, cmap='coolwarm')\n\n# Create a 3D streamplot\nx = np.linspace(-5, 5, 100)\ny = np.linspace(-5, 5, 100)\nX, Y = np.meshgrid(x, y)\nU = np.cos(np.sqrt(X**2 + Y**2))\nV = np.sin(np.sqrt(X**2 + Y**2))\nax.streamplot3D(X, Y, U, V, color='lightblue')\n\n# Create a 3D polar plot\ntheta = np.linspace(0, 2*np.pi, 100)\nr = np.linspace(0, 1, 100)\ntheta, r = np.meshgrid(theta, r)\nax.plot3D(theta, r, np.zeros_like(r), color='lightgreen')\n\n# Create a 3D heatmap\ndata = np.random.rand(10, 10, 10)\nax.imshow(data, cmap='hot', interpolation='nearest')\n\n# Create a 3D contour plot\nx = np.linspace(-5, 5, 100)\ny = np.linspace(-5, 5, 100)\nX, Y = np.meshgrid(x, y)\nZ = np.sin(np.sqrt(X**2 + Y**2))\nax.contour3D(X, Y, Z, 50, cmap='coolwarm')\n\n# Create a 3D streamplot\nx = np.linspace(-5, 5, 100)\ny = np.linspace(-5, 5, 100)\nX, Y = np.meshgrid(x, y)\nU = np.cos(np.sqrt(X**2 + Y**2))\nV = np.sin(np.sqrt(X**2 + Y**2))\nax.streamplot3D(X, Y, U, V, color='lightblue')\n\n# Create a 3D polar plot\ntheta = np.linspace(0, 2*np.pi, 100)\nr = np.linspace(0, 1, 100)\ntheta, r = np.meshgrid(theta, r)\nax.plot3D(theta, r, np.zeros_like(r), color='lightgreen')\n\n# Create a 3D heatmap\ndata = np.random.rand(10, 10, 10)\nax.imshow(data, cmap='hot', interpolation='nearest')\n\n# Create a 3D contour plot\nx = np.linspace(-5, 5, 100)\ny = np.linspace(-5, 5, 100)\nX, Y = np.meshgrid(x, y)\nZ = np.sin(np.sqrt(X**2 + Y**2))\nax.contour3D(X, Y, Z, 50, cmap='coolwarm')\n\n# Create a 3D streamplot\nx = np.linspace(-5, 5, 100)\ny = np.linspace(-5, 5, 100)\nX, Y = np.meshgrid(x, y)\nU = np.cos(np.sqrt(X**2 + Y**2))\nV = np.sin(np.sqrt(X**2 + Y**2))\nax.streamplot3D(X, Y, U, V, color='lightblue')\n\n# Create a 3D polar plot\ntheta = np.linspace(0, 2*np.pi, 100)\nr = np.linspace(0, 1, 100)\ntheta, r = np.meshgrid(theta, r)\nax.plot3D(theta, r, np.zeros_like(r), color='lightgreen')\n\n# Create a 3D heatmap\ndata = np.random.rand(10, 10, 10)\nax.imshow(data, cmap='hot', interpolation='nearest')\n\n# Create a 3D contour plot\nx = np.linspace(-5, 5, 100)\ny = np.linspace(-5, 5, 100)\nX, Y = np.meshgrid(x, y)\nZ = np.sin(np.sqrt(X**2 + Y**2))\nax.contour3D(X, Y, Z, 50, cmap='coolwarm')\n\n# Create a 3D streamplot\nx = np.linspace(-5, 5, 100)\ny = np.linspace(-5, 5, 100)\nX, Y = np.meshgrid(x, y)\nU = np.cos(np.sqrt(X**2 + Y**2))\nV = np.sin(np.sqrt(X**2 + Y**2))\nax.streamplot3D(X, Y, U, V, color='lightblue')\n\n# Create a 3D polar plot\ntheta = np.linspace(0, 2*np.pi, 100)\nr = np.linspace(0, 1, 100)\ntheta, r = np.meshgrid(theta, r)\nax.plot3D(theta, r, np.zeros_like(r), color='lightgreen')\n\n# Create a 3D heatmap\ndata = np.random.rand(10, 10, 10)\nax.imshow(data, cmap='hot', interpolation='nearest')\n\n# Create a 3D contour plot\nx = np.linspace(-5, 5, 100)\ny = np.linspace(-5, 5, 100)\nX, Y = np.meshgrid(x, y)\nZ = np.sin(np.sqrt(X**2 + Y**2))\nax.contour3D(X, Y, Z, 50, cmap='coolwarm')\n\n# Create a 3D streamplot\nx = np.linspace(-5, 5, 100)\ny = np.linspace(-5, 5, 100)\nX, Y = np.meshgrid(x, y)\nU = np.cos(np.sqrt(X**2 + Y**2))\nV = np.sin(np.sqrt(X**2 + Y**2))\nax.streamplot3D(X, Y, U, V, color='lightblue')\n\n# Create a 3D polar plot\ntheta = np.linspace(0, 2*np.pi, 100)\nr = np.linspace(0, 1, 100)\ntheta, r = np.meshgrid(theta, r)\nax.plot3D(theta, r, np.zeros_like(r), color='lightgreen')\n\n# Create a 3D heatmap\ndata = np.random.rand(10, 10, 10)\nax.imshow(data, cmap='hot', interpolation='nearest')\n\n# Create a 3D contour plot\nx = np.linspace(-5, 5, 100)\ny = np.linspace(-5, 5, 100)\nX, Y = np.meshgrid(x, y)\nZ = np.sin(np.sqrt(X**2 + Y**2))\nax.contour3D(X, Y, Z, 50, cmap='coolwarm')\n\n# Create a 3D streamplot\nx = np.linspace(-5, 5, 100)\ny = np.linspace(-5, 5, 100)\nX, Y = np.meshgrid(x, y)\nU = np.cos(np.sqrt(X**2 + Y**2))\nV = np.sin(np.sqrt(X**2 + Y**2))\nax.streamplot3D(X, Y, U, V, color='lightblue')\n\n# Create a 3D polar plot\ntheta = np.linspace(0, 2*np.pi, 100)\nr = np.linspace(0, 1, 100)\ntheta, r = np.meshgrid(theta, r)\nax.plot3D(theta, r, np.zeros_like(r), color='lightgreen')\n\n# Create a 3D heatmap\ndata = np.random.rand(10, 10, 10)\nax.imshow(data, cmap='hot', interpolation='nearest')\n\n# Create a 3D contour plot\nx = np.linspace(-5, 5, 100)\ny = np.linspace(-5, 5, 100)\nX, Y = np.meshgrid(x, y)\nZ = np.sin(np.sqrt(X**2 + Y**2))\nax.contour3D(X, Y, Z, 50, cmap='coolwarm')\n\n# Create a 3D streamplot\nx = np.linspace(-5, 5, 100)\ny = np.linspace(-5, 5, 100)\nX, Y = np.meshgrid(x, y)\nU = np.cos(np.sqrt(X**2 + Y**2))\nV = np.sin(np.sqrt(X**2 + Y**2))\nax.streamplot3D(X, Y, U, V, color='lightblue')\n\n# Create a 3D polar plot\ntheta = np.linspace(0, 2*np.pi, 100)\nr = np.linspace(0, 1, 100)\ntheta, r = np.meshgrid(theta, r)\nax.plot3D(theta, r, np.zeros_like(r), color='lightgreen')\n\n"}
{"file": "dataset/ori_500/radar_20.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis for the first subplot\nfig, ax = plt.subplots(figsize=(18.0, 6.0))\nax.set_title('Perfume Brand Comparison')\nax.axis('off')\n\n# Create a second subplot\nax2 = fig.add_subplot(132)\nax2.set_title('Creativity')\nax2.axis('off')\n\n# Create a third subplot\nax3 = fig.add_subplot(133)\nax3.set_title('Creativity')\nax3.axis('off')\n\n# Create a fourth subplot\nax4 = fig.add_subplot(134)\nax4.set_title('Creativity')\nax4.axis('off')\n\n# Create a fifth subplot\nax5 = fig.add_subplot(135)\nax5.set_title('Creativity')\nax5.axis('off')\n\n# Create a sixth subplot\nax6 = fig.add_subplot(136)\nax6.set_title('Creativity')\nax6.axis('off')\n\n# Create a seventh subplot\nax7 = fig.add_subplot(137)\nax7.set_title('Creativity')\nax7.axis('off')\n\n# Create a eighth subplot\nax8 = fig.add_subplot(138)\nax8.set_title('Creativity')\nax8.axis('off')\n\n# Create a ninth subplot\nax9 = fig.add_subplot(139)\nax9.set_title('Creativity')\nax9.axis('off')\n\n# Create a tenth subplot\nax10 = fig.add_subplot(1310)\nax10.set_title('Creativity')\nax10.axis('off')\n\n# Create a eleventh subplot\nax11 = fig.add_subplot(1311)\nax11.set_title('Creativity')\nax11.axis('off')\n\n# Create a twelfth subplot\nax12 = fig.add_subplot(1312)\nax12.set_title('Creativity')\nax12.axis('off')\n\n# Create a thirteenth subplot\nax13 = fig.add_subplot(1313)\nax13.set_title('Creativity')\nax13.axis('off')\n\n# Create a fourteenth subplot\nax14 = fig.add_subplot(1314)\nax14.set_title('Creativity')\nax14.axis('off')\n\n# Create a fifteenth subplot\nax15 = fig.add_subplot(1315)\nax15.set_title('Creativity')\nax15.axis('off')\n\n# Create a sixteenth subplot\nax16 = fig.add_subplot(1316)\nax16.set_title('Creativity')\nax16.axis('off')\n\n# Create a seventeenth subplot\nax17 = fig.add_subplot(1317)\nax17.set_title('Creativity')\nax17.axis('off')\n\n# Create a eighteenth subplot\nax18 = fig.add_subplot(1318)\nax18.set_title('Creativity')\nax18.axis('off')\n\n# Create a nineteenth subplot\nax19 = fig.add_subplot(1319)\nax19.set_title('Creativity')\nax19.axis('off')\n\n# Create a twentieth subplot\nax20 = fig.add_subplot(1320)\nax20.set_title('Creativity')\nax20.axis('off')\n\n# Create a twenty-first subplot\nax21 = fig.add_subplot(1321)\nax21.set_title('Creativity')\nax21.axis('off')\n\n# Create a twenty-second subplot\nax22 = fig.add_subplot(1322)\nax22.set_title('Creativity')\nax22.axis('off')\n\n# Create a twenty-third subplot\nax23 = fig.add_subplot(1323)\nax23.set_title('Creativity')\nax23.axis('off')\n\n# Create a twenty-fourth subplot\nax24 = fig.add_subplot(1324)\nax24.set_title('Creativity')\nax24.axis('off')\n\n# Create a twenty-fifth subplot\nax25 = fig.add_subplot(1325)\nax25.set_title('Creativity')\nax25.axis('off')\n\n# Create a twenty-sixth subplot\nax26 = fig.add_subplot(1326)\nax26.set_title('Creativity')\nax26.axis('off')\n\n# Create a twenty-seventh subplot\nax27 = fig.add_subplot(1327)\nax27.set_title('Creativity')\nax27.axis('off')\n\n# Create a twenty-eighth subplot\nax28 = fig.add_subplot(1328)\nax28.set_title('Creativity')\nax28.axis('off')\n\n# Create a twenty-ninth subplot\nax29 = fig.add_subplot(1329)\nax29.set_title('Creativity')\nax29.axis('off')\n\n# Create a thirtieth subplot\nax30 = fig.add_subplot(1330)\nax30.set_title('Creativity')\nax30.axis('off')\n\n# Create a thirtieth-first subplot\nax31 = fig.add_subplot(1331)\nax31.set_title('Creativity')\nax31.axis('off')\n\n# Create a thirtieth-second subplot\nax32 = fig.add_subplot(1332)\nax32.set_title('Creativity')\nax32.axis('off')\n\n# Create a thirtieth-third subplot\nax33 = fig.add_subplot(1333)\nax33.set_title('Creativity')\nax33.axis('off')\n\n# Create a thirtieth-fourth subplot\nax34 = fig.add_subplot(1334)\nax34.set_title('Creativity')\nax34.axis('off')\n\n# Create a thirtieth-fifth subplot\nax35 = fig.add_subplot(1335)\nax35.set_title('Creativity')\nax35.axis('off')\n\n# Create a thirtieth-sixth subplot\nax36 = fig.add_subplot(1336)\nax36.set_title('Creativity')\nax36.axis('off')\n\n# Create a thirtieth-seventh subplot\nax37 = fig.add_subplot(1337)\nax37.set_title('Creativity')\nax37.axis('off')\n\n# Create a thirtieth-eighth subplot\nax38 = fig.add_subplot(1338)\nax38.set_title('Creativity')\nax38.axis('off')\n\n# Create a thirtieth-ninth subplot\nax39 = fig.add_subplot(1339)\nax39.set_title('Creativity')\nax39.axis('off')\n\n# Create a thirtieth-tenth subplot\nax40 = fig.add_subplot(1340)\nax40.set_title('Creativity')\nax40.axis('off')\n\n# Create a thirtieth-eleventh subplot\nax41 = fig.add_subplot(1341)\nax41.set_title('Creativity')\nax41.axis('off')\n\n# Create a thirtieth-twelfth subplot\nax42 = fig.add_subplot(1342)\nax42.set_title('Creativity')\nax42.axis('off')\n\n# Create a thirtieth-thirteenth subplot\nax43 = fig.add_subplot(1343)\nax43.set_title('Creativity')\nax43.axis('off')\n\n# Create a thirtieth-fourteenth subplot\nax44 = fig.add_subplot(1344)\nax44.set_title('Creativity')\nax44.axis('off')\n\n# Create a thirtieth-fifteenth subplot\nax45 = fig.add_subplot(1345)\nax45.set_title('Creativity')\nax45.axis('off')\n\n# Create a thirtieth-sixteenth subplot\nax46 = fig.add_subplot(1346)\nax46.set_title('Creativity')\nax46.axis('off')\n\n# Create a thirtieth-seventeenth subplot\nax47 = fig.add_subplot(1347)\nax47.set_title('Creativity')\nax47.axis('off')\n\n# Create a thirtieth-eighteenth subplot\nax48 = fig.add_subplot(1348)\nax48.set_title('Creativity')\nax48.axis('off')\n\n# Create a thirtieth-nineteenth subplot\nax49 = fig.add_subplot(1349)\nax49.set_title('Creativity')\nax49.axis('off')\n\n# Create a thirtieth-twentieth subplot\nax50 = fig.add_subplot(1350)\nax50.set_title('Creativity')\nax50.axis('off')\n\n# Create a thirtieth-twenty-first subplot\nax51 = fig.add_subplot(1351)\nax51.set_title('Creativity')\nax51.axis('off')\n\n# Create a thirtieth-twenty-second subplot\nax52 = fig.add_subplot(1352)\nax52.set_title('Creativity')\nax52.axis('off')\n\n# Create a thirtieth-twenty-third subplot\nax53 = fig.add_subplot(1353)\nax53.set_title('Creativity')\nax53.axis('off')\n\n# Create a thirtieth-twenty-fourth subplot\nax54 = fig.add_subplot(1354)\nax54.set_title('Creativity')\nax54.axis('off')\n\n# Create a thirtieth-twenty-fifth subplot\nax55 = fig.add_subplot(1355)\nax55.set_title('Creativity')\nax55.axis('off')\n\n# Create a thirtieth-twenty-sixth subplot\nax56 = fig.add_subplot(1356)\nax56.set_title('Creativity')\nax56.axis('off')\n\n# Create a thirtieth-twenty-seventh subplot\nax57 = fig.add_subplot(1357)\nax57.set_title('Creativity')\nax57.axis('off')\n\n# Create a thirtieth-twenty-eighth subplot\nax58 = fig.add_subplot(1358)\nax58.set_title('Creativity')\nax58.axis('off')\n\n# Create a thirtieth-twenty-ninth subplot\nax59 = fig.add_subplot(1359)\nax59.set_title('Creativity')\nax59.axis('off')\n\n# Create a thirtieth-thirtieth subplot\nax60 = fig.add_subplot(1360)\nax60.set_title('Creativity')\nax60.axis('off')\n\n# Create a thirtieth-thirtieth-first subplot\nax61 = fig.add_subplot(1361)\nax61.set_title('Creativity')\nax61.axis('off')\n\n# Create a thirtieth-thirtieth-second subplot\nax62 = fig.add_subplot(1362)\nax62.set_title('Creativity')\nax62.axis('off')\n\n# Create a thirtieth-thirtieth-third subplot\nax63 = fig.add_subplot(1363)\nax63.set_title('Creativity')\nax63.axis('off')\n\n# Create a thirtieth-thirtieth-fourth subplot\nax64 = fig.add_subplot(1364)\nax64.set_title('Creativity')\nax64.axis('off')\n\n# Create a thirtieth-thirtieth-fifth subplot\nax65 = fig.add_subplot(1365)\nax65.set_title('Creativity')\nax65.axis('off')\n\n# Create a thirtieth-thirtieth-sixth subplot\nax66 = fig.add_subplot(1366)\nax66.set_title('Creativity')\nax66.axis('off')\n\n# Create a thirtieth-thirtieth-seventh subplot\nax67 = fig.add_subplot(1367)\nax67.set_title('Creativity')\nax67.axis('off')\n\n# Create a thirtieth-thirtieth-eighth subplot\nax68 = fig.add_subplot(1368)\nax68.set_title('Creativity')\nax68.axis('off')\n\n# Create a thirtieth-thirtieth-ninth subplot\nax69 = fig.add_subplot(1369)\nax69.set_title('Creativity')\nax69.axis('off')\n\n# Create a thirtieth-thirtieth-tenth subplot\nax70 = fig.add_subplot(1370)\nax70.set_title('Creativity')\nax70.axis('off')\n\n# Create a thirtieth-thirtieth-eleventh subplot\nax71 = fig.add_subplot(1371)\nax71.set_title('Creativity')\nax71.axis('off')\n\n# Create a thirtieth-thirtieth-twelfth subplot\nax72 = fig.add_subplot(1372)\nax72.set_title('Creativity')\nax72.axis('off')\n\n# Create a thirtieth-thirtieth-thirteenth subplot\nax73 = fig.add_subplot(1373)\nax73.set_title('Creativity')\nax73.axis('off')\n\n# Create a thirtieth-thirtieth-fourteenth subplot\nax74 = fig.add_subplot(1374)\nax74.set_title('Creativity')\nax74.axis('off')\n\n# Create a thirtieth-thirtieth-fifteenth subplot\nax75 = fig.add_subplot(1375)\nax75.set_title('Creativity')\nax75.axis('off')\n\n# Create a thirtieth-thirtieth-sixteenth subplot\nax76 = fig.add_subplot(1376)\nax76.set_title('Creativity')\nax76.axis('off')\n\n# Create a thirtieth-thirtieth-seventeenth subplot\nax77 = fig.add_subplot(1377)\nax77.set_title('Creativity')\nax77.axis('off')\n\n# Create a thirtieth-thirtieth-eighteenth subplot\nax78 = fig.add_subplot(1378)\nax78.set_title('Creativity')\nax78.axis('off')\n\n# Create a thirtieth-thirtieth-nineteenth subplot\nax79 = fig.add_subplot(1379)\nax79.set_title('Creativity')\nax79.axis('off')\n\n# Create a thirtieth-thirtieth-twentieth subplot\nax80 = fig.add_subplot(1380)\nax80.set_title('Creativity')\nax80.axis('off')\n\n# Create a thirtieth-thirtieth-twenty-first subplot\nax81 = fig.add_subplot(1381)\nax81.set_title('Creativity')\nax81.axis('off')\n\n# Create a thirtieth-thirtieth-twenty-second subplot\nax82 = fig.add_subplot(1382)\nax82.set_title('Creativity')\nax82.axis('off')\n\n# Create a thirtieth-thirtieth-twenty-third subplot\nax83 = fig.add_subplot(1383)\nax83.set_title('Creativity')\nax83.axis('off')\n\n# Create a thirtieth-thirtieth-twenty-fourth subplot\nax84 = fig.add_subplot(1384)\nax84.set_title('Creativity')\nax84.axis('off')\n\n# Create a thirtieth-thirtieth-twenty-fifth subplot\nax85 = fig.add_subplot(1385)\nax85.set_title('Creativity')\nax85.axis('off')\n\n# Create a thirtieth-thirtieth-twenty-sixth subplot\nax86 = fig.add_subplot(1386)\nax86.set_title('Creativity')\nax86.axis('off')\n\n# Create a thirtieth-thirtieth-twenty-seventh subplot\nax87 = fig.add_subplot(1387)\nax87.set_title('Creativity')\nax87.axis('off')\n\n# Create a thirtieth-thirtieth-twenty-eighth subplot\nax88 = fig.add_subplot(1388)\nax88.set_title('Creativity')\nax88.axis('off')\n\n# Create a thirtieth-thirtieth-twenty-ninth subplot\nax89 = fig.add_subplot(1389)\nax89.set_title('Creativity')\nax89.axis('off')\n\n# Create a thirtieth-thirtieth-thirtieth subplot\nax90 = fig.add_subplot(1390)\nax90.set_title('Creativity')\nax90.axis('off')\n\n# Create a thirtieth-thirtieth-thirtieth-first subplot\nax91 = fig.add_subplot(1391)\nax91.set_title('Creativity')\nax91.axis('off')\n\n# Create a thirtieth-thirtieth-thirtieth-second subplot\nax92 = fig.add_subplot(1392)\nax92.set_title('Creativity')\nax92.axis('off')\n\n# Create a thirtieth-thirtieth-thirtieth-third subplot\nax93 = fig.add_subplot(1393)\nax93.set_title('Creativity')\nax93.axis('off')\n\n# Create a thirtieth-thirtieth-thirtieth-fourth subplot\nax94 = fig.add_subplot(1394)\nax94.set_title('Creativity')\nax94.axis('off')\n\n# Create a thirtieth-thirtieth-thirtieth-fifth subplot\nax95 = fig.add_subplot(1395)\nax95.set_title('Creativity')\nax95.axis('off')\n\n# Create a thirtieth-thirtieth-thirtieth-sixth subplot\nax96 = fig.add_subplot(1396)\nax96.set_title('Creativity')\nax96.axis('off')\n\n# Create a thirtieth-thirtieth-thirtieth-seventh subplot\nax97 = fig.add_subplot(1397)\nax97.set_title('Creativity')\nax97.axis('off')\n\n# Create a thirtieth-thirtieth-thirtieth-eighth subplot\nax98 = fig.add_subplot(1398)\nax98.set_title('Creativity')\nax98.axis('off')\n\n# Create a thirtieth-thirtieth-thirtieth-ninth subplot\nax99 = fig.add_subplot(1399)\nax99.set_title('Creativity')\nax99.axis('off')\n\n# Create a thirtieth-thirtieth-thirtieth-tenth subplot\nax100 = fig.add_subplot(13100)\nax100.set"}
{"file": "dataset/ori_500/radar_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Set the aspect ratio of the plot to be equal\nax.set_aspect('equal')\n\n# Draw a circle with a radius of 100\ncircle = plt.Circle((0, 0), 100, color='lightgrey')\nax.add_artist(circle)\n\n# Draw a rectangle with a width of 200 and a height of 150\nrectangle = plt.Rectangle((-100, -75), 200, 150, color='red')\nax.add_artist(rectangle)\n\n# Draw a polygon with 6 sides\npolygon = plt.Polygon([[0, 0], [50, 50], [100, 0], [50, -50], [0, 0]], color='blue')\nax.add_artist(polygon)\n\n# Draw a star with 5 points\nstar = plt.Polygon([[0, 0], [50, 50], [100, 0], [50, -50], [0, 0]], color='green')\nax.add_artist(star)\n\n# Draw a circle with a radius of 50\ncircle = plt.Circle((0, 0), 50, color='yellow')\nax.add_artist(circle)\n\n# Draw a rectangle with a width of 100 and a height of 75\nrectangle = plt.Rectangle((-50, -37.5), 100, 75, color='orange')\nax.add_artist(rectangle)\n\n# Draw a polygon with 4 sides\npolygon = plt.Polygon([[0, 0], [50, 50], [100, 0], [50, -50], [0, 0]], color='purple')\nax.add_artist(polygon)\n\n# Draw a star with 5 points\nstar = plt.Polygon([[0, 0], [50, 50], [100, 0], [50, -50], [0, 0]], color='pink')\nax.add_artist(star)\n\n# Draw a circle with a radius of 25\ncircle = plt.Circle((0, 0), 25, color='brown')\nax.add_artist(circle)\n\n# Draw a rectangle with a width of 50 and a height of 37.5\nrectangle = plt.Rectangle((-25, -18.75), 50, 37.5, color='cyan')\nax.add_artist(rectangle)\n\n# Draw a polygon with 3 sides\npolygon = plt.Polygon([[0, 0], [50, 50], [100, 0], [50, -50], [0, 0]], color='magenta')\nax.add_artist(polygon)\n\n# Draw a star with 5 points\nstar = plt.Polygon([[0, 0], [50, 50], [100, 0], [50, -50], [0, 0]], color='lime')\nax.add_artist(star)\n\n# Draw a circle with a radius of 12.5\ncircle = plt.Circle((0, 0), 12.5, color='silver')\nax.add_artist(circle)\n\n# Draw a rectangle with a width of 25 and a height of 18.75\nrectangle = plt.Rectangle((-12.5, -9.375), 25, 18.75, color='gold')\nax.add_artist(rectangle)\n\n# Draw a polygon with 2 sides\npolygon = plt.Polygon([[0, 0], [50, 50], [100, 0], [50, -50], [0, 0]], color='navy')\nax.add_artist(polygon)\n\n# Draw a star with 5 points\nstar = plt.Polygon([[0, 0], [50, 50], [100, 0], [50, -50], [0, 0]], color='white')\nax.add_artist(star)\n\n# Draw a circle with a radius of 6.25\ncircle = plt.Circle((0, 0), 6.25, color='black')\nax.add_artist(circle)\n\n# Draw a rectangle with a width of 12.5 and a height of 9.375\nrectangle = plt.Rectangle((-6.25, -4.6875), 12.5, 9.375, color='gray')\nax.add_artist(rectangle)\n\n# Draw a polygon with 1 side\npolygon = plt.Polygon([[0, 0], [50, 50], [100, 0], [50, -50], [0, 0]], color='silver')\nax.add_artist(polygon)\n\n# Draw a star with 5 points\nstar = plt.Polygon([[0, 0], [50, 50], [100, 0], [50, -50], [0, 0]], color='gold')\nax.add_artist(star)\n\n# Draw a circle with a radius of 3.125\ncircle = plt.Circle((0, 0), 3.125, color='navy')\nax.add_artist(circle)\n\n# Draw a rectangle with a width of 6.25 and a height of 4.6875\nrectangle = plt.Rectangle((-3.125, -2.34375), 6.25, 4.6875, color='white')\nax.add_artist(rectangle)\n\n# Draw a polygon with 0 sides\npolygon = plt.Polygon([[0, 0], [50, 50], [100, 0], [50, -50], [0, 0]], color='black')\nax.add_artist(polygon)\n\n# Draw a star with 5 points\nstar = plt.Polygon([[0, 0], [50, 50], [100, 0], [50, -50], [0, 0]], color='gray')\nax.add_artist(star)\n\n# Draw a circle with a radius of 1.5625\ncircle = plt.Circle((0, 0), 1.5625, color='silver')\nax.add_artist(circle)\n\n# Draw a rectangle with a width of 3.125 and a height of 2.34375\nrectangle = plt.Rectangle((-1.5625, -1.171875), 3.125, 2.34375, color='navy')\nax.add_artist(rectangle)\n\n# Draw a polygon with -1 sides\npolygon = plt.Polygon([[0, 0], [50, 50], [100, 0], [50, -50], [0, 0]], color='white')\nax.add_artist(polygon)\n\n# Draw a star with 5 points\nstar = plt.Polygon([[0, 0], [50, 50], [100, 0], [50, -50], [0, 0]], color='black')\nax.add_artist(star)\n\n# Draw a circle with a radius of 0.78125\ncircle = plt.Circle((0, 0), 0.78125, color='gray')\nax.add_artist(circle)\n\n# Draw a rectangle with a width of 1.5625 and a height of 1.171875\nrectangle = plt.Rectangle((-0.78125, -0.5859375), 1.5625, 1.171875, color='silver')\nax.add_artist(rectangle)\n\n# Draw a polygon with -2 sides\npolygon = plt.Polygon([[0, 0], [50, 50], [100, 0], [50, -50], [0, 0]], color='navy')\nax.add_artist(polygon)\n\n# Draw a star with 5 points\nstar = plt.Polygon([[0, 0], [50, 50], [100, 0], [50, -50], [0, 0]], color='white')\nax.add_artist(star)\n\n# Draw a circle with a radius of 0.390625\ncircle = plt.Circle((0, 0), 0.390625, color='black')\nax.add_artist(circle)\n\n# Draw a rectangle with a width of 0.78125 and a height of 0.5859375\nrectangle = plt.Rectangle((-0.390625, -0.29296875), 0.78125, 0.5859375, color='gray')\nax.add_artist(rectangle)\n\n# Draw a polygon with -3 sides\npolygon = plt.Polygon([[0, 0], [50, 50], [100, 0], [50, -50], [0, 0]], color='silver')\nax.add_artist(polygon)\n\n# Draw a star with 5 points\nstar = plt.Polygon([[0, 0], [50, 50], [100, 0], [50, -50], [0, 0]], color='navy')\nax.add_artist(star)\n\n# Draw a circle with a radius of 0.1953125\ncircle = plt.Circle((0, 0), 0.1953125, color='white')\nax.add_artist(circle)\n\n# Draw a rectangle with a width of 0.390625 and a height of 0.29296875\nrectangle = plt.Rectangle((-0.1953125, -0.146484375), 0.390625, 0.29296875, color='black')\nax.add_artist(rectangle)\n\n# Draw a polygon with -4 sides\npolygon = plt.Polygon([[0, 0], [50, 50], [100, 0], [50, -50], [0, 0]], color='gray')\nax.add_artist(polygon)\n\n# Draw a star with 5 points\nstar = plt.Polygon([[0, 0], [50, 50], [100, 0], [50, -50], [0, 0]], color='silver')\nax.add_artist(star)\n\n# Draw a circle with a radius of 0.09765625\ncircle = plt.Circle((0, 0), 0.09765625, color='navy')\nax.add_artist(circle)\n\n# Draw a rectangle with a width of 0.1953125 and a height of 0.146484375\nrectangle = plt.Rectangle((-0.09765625, -0.0732421875), 0.1953125, 0.146484375, color='white')\nax.add_artist(rectangle)\n\n# Draw a polygon with -5 sides\npolygon = plt.Polygon([[0, 0], [50, 50], [100, 0], [50, -50], [0, 0]], color='black')\nax.add_artist(polygon)\n\n# Draw a star with 5 points\nstar = plt.Polygon([[0, 0], [50, 50], [100, 0], [50, -50], [0, 0]], color='gray')\nax.add_artist(star)\n\n# Draw a circle with a radius of 0.048828125\ncircle = plt.Circle((0, 0), 0.048828125, color='silver')\nax.add_artist(circle)\n\n# Draw a rectangle with a width of 0.09765625 and a height of 0.0732421875\nrectangle = plt.Rectangle((-0.048828125, -0.03662109375), 0.09765625, 0.0732421875, color='navy')\nax.add_artist(rectangle)\n\n# Draw a polygon with -6 sides\npolygon = plt.Polygon([[0, 0], [50, 50], [100, 0], [50, -50], [0, 0]], color='white')\nax.add_artist(polygon)\n\n# Draw a star with 5 points\nstar = plt.Polygon([[0, 0], [50, 50], [100, 0], [50, -50], [0, 0]], color='black')\nax.add_artist(star)\n\n# Draw a circle with a radius of 0.0244140625\ncircle = plt.Circle((0, 0), 0.0244140625, color='gray')\nax.add_artist(circle)\n\n# Draw a rectangle with a width of 0.048828125 and a height of 0.03662109375\nrectangle = plt.Rectangle((-0.0244140625, -0.018310546875), 0.048828125, 0.03662109375, color='silver')\nax.add_artist(rectangle)\n\n# Draw a polygon with -7 sides\npolygon = plt.Polygon([[0, 0], [50, 50], [100, 0], [50, -50], [0, 0]], color='navy')\nax.add_artist(polygon)\n\n# Draw a star with 5 points\nstar = plt.Polygon([[0, 0], [50, 50], [100, 0], [50, -50], [0, 0]], color='white')\nax.add_artist(star)\n\n# Draw a circle with a radius of 0.01220703125\ncircle = plt.Circle((0, 0), 0.01220703125, color='black')\nax.add_artist(circle)\n\n# Draw a rectangle with a width of 0.0244140625 and a height of 0.018310546875\nrectangle = plt.Rectangle((-0.01220703125, -0.0091552734375), 0.0244140625, 0.018310546875, color='gray')\nax.add_artist(rectangle)\n\n# Draw a polygon with -8 sides\npolygon = plt.Polygon([[0, 0], [50, 50], [100, 0], [50, -50], [0, 0]], color='silver')\nax.add_artist(polygon)\n\n# Draw a star with 5 points\nstar = plt.Polygon([[0, 0], [50, 50], [100, 0], [50, -50], [0, 0]], color='navy')\nax.add_artist(star)\n\n# Draw a circle with a radius of 0.006103515625\ncircle = plt.Circle((0, 0), 0.006103515625, color='white')\nax.add_artist(circle)\n\n# Draw a rectangle with a width of 0.01220703125 and a height of 0.0091552734375\nrectangle = plt.Rectangle((-0.006103515625, -0.00457763671875), 0.01220703125, 0.0091552734375, color='black')\nax.add_artist(rectangle)\n\n# Draw a polygon with -9 sides\npolygon = plt.Polygon([[0, 0], [50, 50], [100, 0], [50, -50], [0, 0]], color='gray')\nax.add_artist(polygon)\n\n# Draw a star with 5 points\nstar = plt.Polygon([[0, 0], [50, 50], [100, 0], [50, -50], [0, 0]], color='silver')\nax.add_artist(star)\n\n# Draw a circle with a radius of 0.0030517578125\ncircle = plt.Circle((0, 0), 0.0030517578125, color='navy')\nax.add_artist(circle)\n\n# Draw a rectangle with a width of 0.006103515625 and a height of 0.00457763671875\nrectangle = plt.Rectangle((-0.0030517578125, -0.002288818359375), 0.006103515625, 0.00457763671875, color='white')\nax.add_artist(rectangle)\n\n# Draw a polygon with -10 sides\npolygon = plt.Polygon([[0, 0], [50, 50], [100, 0], [50, -50], [0, 0]], color='black')\nax.add_artist(polygon)\n\n# Draw a star with 5 points\nstar = plt.Polygon([[0, 0], [50, 50], [100, 0], [50, -50],"}
{"file": "dataset/ori_500/radar_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Create a circle patch\ncircle = plt.Circle((0.5, 0.5), 0.4, color='blue')\nax.add_artist(circle)\n\n# Add text to the circle\nax.text(0.5, 0.5, 'Fidelity(D-test)', horizontalalignment='center', verticalalignment='center')\n\n# Set the aspect ratio of the plot to be equal\nax.set_aspect('equal')\n\n# Remove the axes\nax.axis('off')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Set the title of the plot\nax.set_title('Heterocycle formation')\n\n# Create a circle for the plot\ncircle = plt.Circle((0.5, 0.5), 0.4, color='blue')\nax.add_artist(circle)\n\n# Create a rectangle for the plot\nrectangle = plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='orange')\nax.add_artist(rectangle)\n\n# Create a polygon for the plot\npolygon = plt.Polygon([[0.1, 0.1], [0.3, 0.3], [0.5, 0.1]], color='green')\nax.add_artist(polygon)\n\n# Create a line for the plot\nline = plt.Line2D([0.1, 0.9], [0.1, 0.9], color='red')\nax.add_artist(line)\n\n# Create a scatter plot for the plot\nscatter = plt.scatter([0.1, 0.3, 0.5], [0.1, 0.3, 0.5], color='purple')\nax.add_artist(scatter)\n\n# Create a bar chart for the plot\nbar = plt.bar([0.1, 0.3, 0.5], [0.1, 0.3, 0.5], color='yellow')\nax.add_artist(bar)\n\n# Create a pie chart for the plot\npie = plt.pie([0.1, 0.3, 0.5], colors=['cyan', 'magenta', 'yellow'])\nax.add_artist(pie)\n\n# Create a histogram for the plot\nhist = plt.hist([0.1, 0.3, 0.5], bins=3, color='black')\nax.add_artist(hist)\n\n# Create a heatmap for the plot\nheatmap = plt.imshow(np.random.rand(10, 10), cmap='hot', interpolation='nearest')\nax.add_artist(heatmap)\n\n# Create a contour plot for the plot\ncontour = plt.contourf(np.random.rand(10, 10), cmap='coolwarm')\nax.add_artist(contour)\n\n# Create a streamplot for the plot\nstream = plt.streamplot(np.random.rand(10, 10), np.random.rand(10, 10), color='grey')\nax.add_artist(stream)\n\n# Create a quiver plot for the plot\nquiver = plt.quiver(np.random.rand(10, 10), np.random.rand(10, 10), color='brown')\nax.add_artist(quiver)\n\n# Create a polar plot for the plot\npolar = plt.polar(np.linspace(0, 2*np.pi, 100), np.random.rand(100), color='pink')\nax.add_artist(polar)\n\n# Create a 3D plot for the plot\nfrom mpl_toolkits.mplot3d import Axes3D\nax3d = fig.add_subplot(111, projection='3d')\nax3d.plot_surface(np.random.rand(10, 10), np.random.rand(10, 10), np.random.rand(10, 10), color='grey')\n\n# Set the limits of the plot\nax.set_xlim(0, 1)\nax.set_ylim(0, 1)\nax.set_zlim(0, 1)\n\n# Set the labels of the plot\nax.set_xlabel('X Label')\nax.set_ylabel('Y Label')\nax.set_zlabel('Z Label')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Set the aspect ratio of the plot to be equal\nax.set_aspect('equal')\n\n# Draw a circle at the center of the plot\ncircle = plt.Circle((0.5, 0.5), 0.4, color='lightgrey')\nax.add_artist(circle)\n\n# Define the data for the radar chart\ndata = [\n    [0.07, 0.03, 0.03, 0.07],\n    [0.07, 0.03, 0.03, 0.07],\n    [0.07, 0.03, 0.03, 0.07],\n    [0.07, 0.03, 0.03, 0.07],\n    [0.07, 0.03, 0.03, 0.07],\n    [0.07, 0.03, 0.03, 0.07]\n]\n\n# Define the labels for the radar chart\nlabels = ['Model A', 'Model B', 'Model C', 'Model D', 'Model E', 'Model F']\n\n# Define the colors for the radar chart\ncolors = ['red', 'green', 'blue', 'orange', 'purple', 'cyan']\n\n# Plot the radar chart\nfor i in range(len(data)):\n    ax.plot([0.5, data[i][0]], [0.5, data[i][1]], color=colors[i])\n    ax.plot([0.5, data[i][2]], [0.5, data[i][3]], color=colors[i])\n\n# Add the labels to the radar chart\nfor i, label in enumerate(labels):\n    ax.text(data[i][0], data[i][1], label, color=colors[i])\n\n# Add the legend to the plot\nlegend_labels = ['predicted_score', 'helpful_score', 'result_score', 'rating_score']\nlegend_colors = ['green', 'orange', 'blue', 'red']\nfor i, label in enumerate(legend_labels):\n    ax.plot([], [], color=legend_colors[i], label=label)\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Set the title of the plot\nax.set_title('3D-bar')\n\n# Create a circle for the radar chart\ncircle = plt.Circle((0.5, 0.5), 0.4, color='lightgrey')\nax.add_artist(circle)\n\n# Add a rectangle for the histogram\nax.add_patch(plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='red'))\n\n# Add a line for the line chart\nax.plot([0.1, 0.9], [0.1, 0.9], 'b-')\n\n# Add a scatter plot for the scatter plot\nax.scatter(np.random.rand(10), np.random.rand(10), color='blue')\n\n# Add a pie chart for the pie chart\nax.pie([1, 2, 3, 4], colors=['green', 'yellow', 'orange', 'purple'])\n\n# Add a bar chart for the bar chart\nax.bar(['A', 'B', 'C'], [1, 2, 3], color='pink')\n\n# Add a heatmap for the heatmap\nax.imshow(np.random.rand(10, 10), cmap='hot', interpolation='nearest')\n\n# Add a treemap for the treemap\nax.add_patch(plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='orange'))\n\n# Add a bubble chart for the bubble chart\nax.scatter(np.random.rand(10), np.random.rand(10), s=np.random.rand(10)*1000, c='yellow')\n\n# Add a radar chart for the radar chart\nax.add_patch(plt.Polygon([[0.1, 0.1], [0.9, 0.1], [0.9, 0.9], [0.1, 0.9]], color='cyan'))\n\n# Add a sunburst chart for the sunburst chart\nax.add_patch(plt.Circle((0.5, 0.5), 0.4, color='gold'))\n\n# Add a rose chart for the rose chart\nax.add_patch(plt.Circle((0.5, 0.5), 0.4, color='brown'))\n\n# Add a donut chart for the donut chart\nax.add_patch(plt.Circle((0.5, 0.5), 0.2, color='white'))\n\n# Add a polar chart for the polar chart\nax.add_patch(plt.Circle((0.5, 0.5), 0.4, color='grey'))\n\n# Add a scatter plot for the scatter plot\nax.scatter(np.random.rand(10), np.random.rand(10), color='orange')\n\n# Add a scatter plot for the scatter plot\nax.scatter(np.random.rand(10), np.random.rand(10), color='orange')\n\n# Add a scatter plot for the scatter plot\nax.scatter(np.random.rand(10), np.random.rand(10), color='orange')\n\n# Add a scatter plot for the scatter plot\nax.scatter(np.random.rand(10), np.random.rand(10), color='orange')\n\n# Add a scatter plot for the scatter plot\nax.scatter(np.random.rand(10), np.random.rand(10), color='orange')\n\n# Add a scatter plot for the scatter plot\nax.scatter(np.random.rand(10), np.random.rand(10), color='orange')\n\n# Add a scatter plot for the scatter plot\nax.scatter(np.random.rand(10), np.random.rand(10), color='orange')\n\n# Add a scatter plot for the scatter plot\nax.scatter(np.random.rand(10), np.random.rand(10), color='orange')\n\n# Add a scatter plot for the scatter plot\nax.scatter(np.random.rand(10), np.random.rand(10), color='orange')\n\n# Add a scatter plot for the scatter plot\nax.scatter(np.random.rand(10), np.random.rand(10), color='orange')\n\n# Add a scatter plot for the scatter plot\nax.scatter(np.random.rand(10), np.random.rand(10), color='orange')\n\n# Add a scatter plot for the scatter plot\nax.scatter(np.random.rand(10), np.random.rand(10), color='orange')\n\n# Add a scatter plot for the scatter plot\nax.scatter(np.random.rand(10), np.random.rand(10), color='orange')\n\n# Add a scatter plot for the scatter plot\nax.scatter(np.random.rand(10), np.random.rand(10), color='orange')\n\n# Add a scatter plot for the scatter plot\nax.scatter(np.random.rand(10), np.random.rand(10), color='orange')\n\n# Add a scatter plot for the scatter plot\nax.scatter(np.random.rand(10), np.random.rand(10), color='orange')\n\n# Add a scatter plot for the scatter plot\nax.scatter(np.random.rand(10), np.random.rand(10), color='orange')\n\n# Add a scatter plot for the scatter plot\nax.scatter(np.random.rand(10), np.random.rand(10), color='orange')\n\n# Add a scatter plot for the scatter plot\nax.scatter(np.random.rand(10), np.random.rand(10), color='orange')\n\n# Add a scatter plot for the scatter plot\nax.scatter(np.random.rand(10), np.random.rand(10), color='orange')\n\n# Add a scatter plot for the scatter plot\nax.scatter(np.random.rand(10), np.random.rand(10), color='orange')\n\n# Add a scatter plot for the scatter plot\nax.scatter(np.random.rand(10), np.random.rand(10), color='orange')\n\n# Add a scatter plot for the scatter plot\nax.scatter(np.random.rand(10), np.random.rand(10), color='orange')\n\n# Add a scatter plot for the scatter plot\nax.scatter(np.random.rand(10), np.random.rand(10), color='orange')\n\n# Add a scatter plot for the scatter plot\nax.scatter(np.random.rand(10), np.random.rand(10), color='orange')\n\n# Add a scatter plot for the scatter plot\nax.scatter(np.random.rand(10), np.random.rand(10), color='orange')\n\n# Add a scatter plot for the scatter plot\nax.scatter(np.random.rand(10), np.random.rand(10), color='orange')\n\n# Add a scatter plot for the scatter plot\nax.scatter(np.random.rand(10), np.random.rand(10), color='orange')\n\n# Add a scatter plot for the scatter plot\nax.scatter(np.random.rand(10), np.random.rand(10), color='orange')\n\n# Add a scatter plot for the scatter plot\nax.scatter(np.random.rand(10), np.random.rand(10), color='orange')\n\n# Add a scatter plot for the scatter plot\nax.scatter(np.random.rand(10), np.random.rand(10), color='orange')\n\n# Add a scatter plot for the scatter plot\nax.scatter(np.random.rand(10), np.random.rand(10), color='orange')\n\n# Add a scatter plot for the scatter plot\nax.scatter(np.random.rand(10), np.random.rand(10), color='orange')\n\n# Add a scatter plot for the scatter plot\nax.scatter(np.random.rand(10), np.random.rand(10), color='orange')\n\n# Add a scatter plot for the scatter plot\nax.scatter(np.random.rand(10), np.random.rand(10), color='orange')\n\n# Add a scatter plot for the scatter plot\nax.scatter(np.random.rand(10), np.random.rand(10), color='orange')\n\n# Add a scatter plot for the scatter plot\nax.scatter(np.random.rand(10), np.random.rand(10), color='orange')\n\n# Add a scatter plot for the scatter plot\nax.scatter(np.random.rand(10), np.random.rand(10), color='orange')\n\n# Add a scatter plot for the scatter plot\nax.scatter(np.random.rand(10), np.random.rand(10), color='orange')\n\n# Add a scatter plot for the scatter plot\nax.scatter(np.random.rand(10), np.random.rand(10), color='orange')\n\n# Add a scatter plot for the scatter plot\nax.scatter(np.random.rand(10), np.random.rand(10), color='orange')\n\n# Add a scatter plot for the scatter plot\nax.scatter(np.random.rand(10), np.random.rand(10), color='orange')\n\n# Add a scatter plot for the scatter plot\nax.scatter(np.random.rand(10), np.random.rand(10), color='orange')\n\n# Add a scatter plot for the scatter plot\nax.scatter(np.random.rand(10), np.random.rand(10), color='orange')\n\n# Add a scatter plot for the scatter plot\nax.scatter(np.random.rand(10), np.random.rand(10), color='orange')\n\n# Add a scatter plot for the scatter plot\nax.scatter(np.random.rand(10), np.random.rand(10), color='orange')\n\n# Add a scatter plot for the scatter plot\nax.scatter(np.random.rand(10), np.random.rand(10), color='orange')\n\n# Add a scatter plot for the scatter plot\nax.scatter(np.random.rand(10), np.random.rand(10), color='orange')\n\n# Add a scatter plot for the scatter plot\nax.scatter(np.random.rand(10), np.random.rand(10), color='orange')\n\n# Add a scatter plot for the scatter plot\nax.scatter(np.random.rand(10), np.random.rand(10), color='orange')\n\n# Add a scatter plot for the scatter plot\nax.scatter(np.random.rand(10), np.random.rand(10), color='orange')\n\n# Add a scatter plot for the scatter plot\nax.scatter(np.random.rand(10), np.random.rand(10), color='orange')\n\n# Add a scatter plot for the scatter plot\nax.scatter(np.random.rand(10), np.random.rand(10), color='orange')\n\n# Add a scatter plot for the scatter plot\nax.scatter(np.random.rand(10), np.random.rand(10), color='orange')\n\n# Add a scatter plot for the scatter plot\nax.scatter(np.random.rand(10), np.random.rand(10), color='orange')\n\n# Add a scatter plot for the scatter plot\nax.scatter(np.random.rand(10), np.random.rand(10), color='orange')\n\n# Add a scatter plot for the scatter plot\nax.scatter(np.random.rand(10), np.random.rand(10), color='orange')\n\n# Add a scatter plot for the scatter plot\nax.scatter(np.random.rand(10), np.random.rand(10), color='orange')\n\n# Add a scatter plot for the scatter plot\nax.scatter(np.random.rand(10), np.random.rand(10), color='orange')\n\n# Add a scatter plot for the scatter plot\nax.scatter(np.random.rand(10), np.random.rand(10), color='orange')\n\n# Add a scatter plot for the scatter plot\nax.scatter(np.random.rand(10), np.random.rand(10), color='orange')\n\n# Add a scatter plot for the scatter plot\nax.scatter(np.random.rand(10), np.random.rand(10), color='orange')\n\n# Add a scatter plot for the scatter plot\nax.scatter(np.random.rand(10), np.random.rand(10), color='orange')\n\n# Add a scatter plot for the scatter plot\nax.scatter(np.random.rand(10), np.random.rand(10), color='orange')\n\n# Add a scatter plot for the scatter plot\nax.scatter(np.random.rand(10), np.random.rand(10), color='orange')\n\n# Add a scatter plot for the scatter plot\nax.scatter(np.random.rand(10), np.random.rand(10), color='orange')\n\n# Add a scatter plot for the scatter plot\nax.scatter(np.random.rand(10), np.random.rand(10), color='orange')\n\n# Add a scatter plot for the scatter plot\nax.scatter(np.random.rand(10), np.random.rand(10), color='orange')\n\n# Add a scatter plot for the scatter plot\nax.scatter(np.random.rand(10), np.random.rand(10), color='orange')\n\n# Add a scatter plot for the scatter plot\nax.scatter(np.random.rand(10), np.random.rand(10), color='orange')\n\n# Add a scatter plot for the scatter plot\nax.scatter(np.random.rand(10), np.random.rand(10), color='orange')\n\n# Add a scatter plot for the scatter plot\nax.scatter(np.random.rand(10), np.random.rand(10), color='orange')\n\n# Add a scatter plot for the scatter plot\nax.scatter(np.random.rand(10), np.random.rand(10), color='orange')\n\n# Add a scatter plot for the scatter plot\nax.scatter(np.random.rand(10), np.random.rand(10), color='orange')\n\n# Add a scatter plot for the scatter plot\nax.scatter(np.random.rand(10), np.random.rand(10), color='orange')\n\n# Add a scatter plot for the scatter plot\nax.scatter(np.random.rand(10), np.random.rand(10), color='orange')\n\n# Add a scatter plot for the scatter plot\nax.scatter(np.random.rand(10), np.random.rand(10), color='orange')\n\n# Add a scatter plot for the scatter plot\nax.scatter(np.random.rand(10), np.random.rand(10), color='orange')\n\n# Add a scatter plot for the scatter plot\nax.scatter(np.random.rand(10), np.random.rand(10), color='orange')\n\n# Add a scatter plot for the scatter plot\nax.scatter(np.random.rand(10), np.random.rand(10), color='orange')\n\n# Add a scatter plot for the scatter plot\nax.scatter(np.random.rand(10), np.random.rand(10), color='orange')\n\n# Add a scatter plot for the scatter plot\nax.scatter(np.random.rand(10), np.random.rand(10), color='orange')\n\n# Add a scatter plot for the scatter plot\nax.scatter(np.random.rand(10), np.random.rand(10), color='orange')\n\n# Add a scatter plot for the scatter plot\nax.scatter(np.random.rand(10), np.random.rand(10), color='orange')\n\n# Add a scatter plot for the scatter plot\nax.scatter(np.random.rand(10), np.random.rand(10), color='orange')\n\n# Add a scatter plot for the scatter plot\nax.scatter(np.random.rand(10), np.random.rand(10), color='orange')\n\n# Add a scatter plot for the scatter plot\nax.scatter(np.random.rand(10), np.random.rand(10), color='orange')\n\n# Add a scatter plot for the scatter plot\nax.scatter(np.random.rand(10), np.random.rand(10), color='orange')\n\n# Add a scatter plot for the scatter plot\nax.scatter(np.random.rand(10), np.random.rand(10), color='orange')\n\n# Add a scatter plot for the scatter plot\nax.scatter(np.random.rand(10), np.random.rand(10), color='orange')\n\n# Add a scatter plot for the scatter plot\nax.scatter(np.random.rand(10), np.random.rand(10), color='orange')\n\n# Add a scatter plot for the scatter plot\nax.scatter(np.random.rand(10), np.random.rand(10), color='orange')\n\n# Add a scatter plot for the scatter plot\nax.scatter(np.random.rand(10), np.random.rand(10), color='orange')\n\n# Add a scatter plot for the scatter plot\nax.scatter(np.random.rand(10), np.random.rand(10), color='orange')\n\n# Add a scatter plot for the scatter plot\nax.scatter(np.random.rand(10), np.random.rand(10), color='orange')\n\n# Add a scatter plot for the scatter plot\nax.scatter(np.random.rand(10), np.random.rand(10), color='orange')\n\n# Add a scatter plot for the scatter plot\nax.scatter(np.random.rand(10), np.random.rand(10), color='orange')\n\n# Add a scatter plot for the scatter plot\nax.scatter(np.random.rand(10), np.random.rand(10), color='orange')\n\n# Add a scatter plot for the scatter plot\nax.scatter(np.random.rand(10), np.random.rand(10), color='orange')\n\n# Add a scatter plot for the scatter plot\nax.scatter(np.random.rand(10), np.random.rand(10), color='orange')\n\n# Add a scatter plot for the scatter plot\nax.scatter(np.random.rand(10), np.random.rand(10), color='orange')\n\n# Add a scatter plot for the scatter plot\nax.scatter(np.random.rand(10), np.random.rand(10), color='orange')\n\n# Add a scatter plot for the scatter plot\nax.scatter(np.random.rand(10), np.random.rand(10), color='orange')\n\n# Add a scatter plot for the scatter plot\nax.scatter(np.random.rand(10), np.random.rand(10), color='orange')\n\n# Add a scatter plot for the scatter plot\nax.scatter(np.random.rand(10), np.random.rand(10), color='orange')\n\n# Add a scatter plot for the scatter plot\nax.scatter(np.random.rand(10), np.random.rand(10), color='orange')\n\n# Add a scatter plot for the scatter plot\nax.scatter(np.random.rand(10), np.random.rand(10), color='orange')\n\n# Add a scatter plot for the scatter plot\nax.scatter(np.random.rand(10), np.random.rand(10), color='orange')\n\n# Add a scatter plot for the scatter plot\nax.scatter(np.random.rand(10), np.random.rand(10), color='orange')\n\n# Add a scatter plot for the scatter plot\nax.scatter(np.random.rand(10), np.random.rand(10), color='orange')\n\n# Add a scatter plot for the scatter plot\nax.scatter(np.random.rand(10), np.random.rand(10), color='orange')\n\n# Add a scatter plot for the scatter plot\nax.scatter(np.random.rand(10), np.random.rand(10), color='orange')\n\n# Add a scatter plot for the scatter plot\nax.scatter(np.random.rand(10), np.random.rand(10), color='orange')\n\n# Add a scatter plot for the scatter plot\nax.scatter(np.random.rand(10), np.random.rand(10), color='orange')\n\n# Add a scatter plot for the scatter plot\nax.scatter(np.random.rand(10), np.random.rand(10), color='orange')\n\n# Add a scatter plot for the scatter plot\nax.scatter(np.random.rand(10), np.random.rand(10), color='orange')\n\n# Add a scatter plot for the scatter plot\nax.scatter(np.random.rand(10), np.random.rand(10), color='orange')\n\n# Add"}
{"file": "dataset/ori_500/radar_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(5.0, 5.0))\n\n# Set the title of the plot\nax.set_title('Imputation')\n\n# Create a circle for the center of the plot\ncircle = plt.Circle((0.5, 0.5), 0.4, color='black')\nax.add_artist(circle)\n\n# Create a rectangle for the left side of the plot\nrect = plt.Rectangle((0.1, 0.1), 0.2, 0.8, color='blue')\nax.add_patch(rect)\n\n# Create a rectangle for the right side of the plot\nrect = plt.Rectangle((0.7, 0.1), 0.2, 0.8, color='red')\nax.add_patch(rect)\n\n# Create a rectangle for the top of the plot\nrect = plt.Rectangle((0.3, 0.9), 0.4, 0.1, color='green')\nax.add_patch(rect)\n\n# Create a rectangle for the bottom of the plot\nrect = plt.Rectangle((0.3, 0.1), 0.4, 0.1, color='yellow')\nax.add_patch(rect)\n\n# Create a rectangle for the middle of the plot\nrect = plt.Rectangle((0.3, 0.4), 0.4, 0.2, color='purple')\nax.add_patch(rect)\n\n# Create a rectangle for the left side of the plot\nrect = plt.Rectangle((0.1, 0.4), 0.2, 0.2, color='orange')\nax.add_patch(rect)\n\n# Create a rectangle for the right side of the plot\nrect = plt.Rectangle((0.7, 0.4), 0.2, 0.2, color='brown')\nax.add_patch(rect)\n\n# Create a rectangle for the top of the plot\nrect = plt.Rectangle((0.3, 0.6), 0.4, 0.2, color='cyan')\nax.add_patch(rect)\n\n# Create a rectangle for the bottom of the plot\nrect = plt.Rectangle((0.3, 0.2), 0.4, 0.2, color='magenta')\nax.add_patch(rect)\n\n# Create a rectangle for the middle of the plot\nrect = plt.Rectangle((0.3, 0.5), 0.4, 0.2, color='grey')\nax.add_patch(rect)\n\n# Create a rectangle for the left side of the plot\nrect = plt.Rectangle((0.1, 0.5), 0.2, 0.2, color='pink')\nax.add_patch(rect)\n\n# Create a rectangle for the right side of the plot\nrect = plt.Rectangle((0.7, 0.5), 0.2, 0.2, color='lime')\nax.add_patch(rect)\n\n# Create a rectangle for the top of the plot\nrect = plt.Rectangle((0.3, 0.7), 0.4, 0.2, color='silver')\nax.add_patch(rect)\n\n# Create a rectangle for the bottom of the plot\nrect = plt.Rectangle((0.3, 0.3), 0.4, 0.2, color='gold')\nax.add_patch(rect)\n\n# Create a rectangle for the middle of the plot\nrect = plt.Rectangle((0.3, 0.6), 0.4, 0.2, color='navy')\nax.add_patch(rect)\n\n# Create a rectangle for the left side of the plot\nrect = plt.Rectangle((0.1, 0.6), 0.2, 0.2, color='olive')\nax.add_patch(rect)\n\n# Create a rectangle for the right side of the plot\nrect = plt.Rectangle((0.7, 0.6), 0.2, 0.2, color='coral')\nax.add_patch(rect)\n\n# Create a rectangle for the top of the plot\nrect = plt.Rectangle((0.3, 0.8), 0.4, 0.2, color='azure')\nax.add_patch(rect)\n\n# Create a rectangle for the bottom of the plot\nrect = plt.Rectangle((0.3, 0.4), 0.4, 0.2, color='tan')\nax.add_patch(rect)\n\n# Create a rectangle for the middle of the plot\nrect = plt.Rectangle((0.3, 0.7), 0.4, 0.2, color='lavender')\nax.add_patch(rect)\n\n# Create a rectangle for the left side of the plot\nrect = plt.Rectangle((0.1, 0.7), 0.2, 0.2, color='salmon')\nax.add_patch(rect)\n\n# Create a rectangle for the right side of the plot\nrect = plt.Rectangle((0.7, 0.7), 0.2, 0.2, color='wheat')\nax.add_patch(rect)\n\n# Create a rectangle for the top of the plot\nrect = plt.Rectangle((0.3, 0.9), 0.4, 0.2, color='beige')\nax.add_patch(rect)\n\n# Create a rectangle for the bottom of the plot\nrect = plt.Rectangle((0.3, 0.5), 0.4, 0.2, color='ivory')\nax.add_patch(rect)\n\n# Create a rectangle for the middle of the plot\nrect = plt.Rectangle((0.3, 0.8), 0.4, 0.2, color='seashell')\nax.add_patch(rect)\n\n# Create a rectangle for the left side of the plot\nrect = plt.Rectangle((0.1, 0.8), 0.2, 0.2, color='cornsilk')\nax.add_patch(rect)\n\n# Create a rectangle for the right side of the plot\nrect = plt.Rectangle((0.7, 0.8), 0.2, 0.2, color='blanchedalmond')\nax.add_patch(rect)\n\n# Create a rectangle for the top of the plot\nrect = plt.Rectangle((0.3, 0.1), 0.4, 0.2, color='bisque')\nax.add_patch(rect)\n\n# Create a rectangle for the bottom of the plot\nrect = plt.Rectangle((0.3, 0.7), 0.4, 0.2, color='antiquewhite')\nax.add_patch(rect)\n\n# Create a rectangle for the middle of the plot\nrect = plt.Rectangle((0.3, 0.2), 0.4, 0.2, color='papayawhip')\nax.add_patch(rect)\n\n# Create a rectangle for the left side of the plot\nrect = plt.Rectangle((0.1, 0.2), 0.2, 0.2, color='lavenderblush')\nax.add_patch(rect)\n\n# Create a rectangle for the right side of the plot\nrect = plt.Rectangle((0.7, 0.2), 0.2, 0.2, color='mistyrose')\nax.add_patch(rect)\n\n# Create a rectangle for the top of the plot\nrect = plt.Rectangle((0.3, 0.3), 0.4, 0.2, color='floralwhite')\nax.add_patch(rect)\n\n# Create a rectangle for the bottom of the plot\nrect = plt.Rectangle((0.3, 0.9), 0.4, 0.2, color='oldlace')\nax.add_patch(rect)\n\n# Create a rectangle for the middle of the plot\nrect = plt.Rectangle((0.3, 0.4), 0.4, 0.2, color='linen')\nax.add_patch(rect)\n\n# Create a rectangle for the left side of the plot\nrect = plt.Rectangle((0.1, 0.4), 0.2, 0.2, color='seashell')\nax.add_patch(rect)\n\n# Create a rectangle for the right side of the plot\nrect = plt.Rectangle((0.7, 0.4), 0.2, 0.2, color='snow')\nax.add_patch(rect)\n\n# Create a rectangle for the top of the plot\nrect = plt.Rectangle((0.3, 0.5), 0.4, 0.2, color='honeydew')\nax.add_patch(rect)\n\n# Create a rectangle for the bottom of the plot\nrect = plt.Rectangle((0.3, 0.1), 0.4, 0.2, color='mintcream')\nax.add_patch(rect)\n\n# Create a rectangle for the middle of the plot\nrect = plt.Rectangle((0.3, 0.6), 0.4, 0.2, color='azure')\nax.add_patch(rect)\n\n# Create a rectangle for the left side of the plot\nrect = plt.Rectangle((0.1, 0.6), 0.2, 0.2, color='aliceblue')\nax.add_patch(rect)\n\n# Create a rectangle for the right side of the plot\nrect = plt.Rectangle((0.7, 0.6), 0.2, 0.2, color='lavender')\nax.add_patch(rect)\n\n# Create a rectangle for the top of the plot\nrect = plt.Rectangle((0.3, 0.7), 0.4, 0.2, color='lavenderblush')\nax.add_patch(rect)\n\n# Create a rectangle for the bottom of the plot\nrect = plt.Rectangle((0.3, 0.3), 0.4, 0.2, color='ghostwhite')\nax.add_patch(rect)\n\n# Create a rectangle for the middle of the plot\nrect = plt.Rectangle((0.3, 0.8), 0.4, 0.2, color='whitesmoke')\nax.add_patch(rect)\n\n# Create a rectangle for the left side of the plot\nrect = plt.Rectangle((0.1, 0.8), 0.2, 0.2, color='ivory')\nax.add_patch(rect)\n\n# Create a rectangle for the right side of the plot\nrect = plt.Rectangle((0.7, 0.8), 0.2, 0.2, color='beige')\nax.add_patch(rect)\n\n# Create a rectangle for the top of the plot\nrect = plt.Rectangle((0.3, 0.9), 0.4, 0.2, color='floralwhite')\nax.add_patch(rect)\n\n# Create a rectangle for the bottom of the plot\nrect = plt.Rectangle((0.3, 0.5), 0.4, 0.2, color='cornsilk')\nax.add_patch(rect)\n\n# Create a rectangle for the middle of the plot\nrect = plt.Rectangle((0.3, 0.1), 0.4, 0.2, color='antiquewhite')\nax.add_patch(rect)\n\n# Create a rectangle for the left side of the plot\nrect = plt.Rectangle((0.1, 0.1), 0.2, 0.2, color='papayawhip')\nax.add_patch(rect)\n\n# Create a rectangle for the right side of the plot\nrect = plt.Rectangle((0.7, 0.1), 0.2, 0.2, color='blanchedalmond')\nax.add_patch(rect)\n\n# Create a rectangle for the top of the plot\nrect = plt.Rectangle((0.3, 0.2), 0.4, 0.2, color='bisque')\nax.add_patch(rect)\n\n# Create a rectangle for the bottom of the plot\nrect = plt.Rectangle((0.3, 0.8), 0.4, 0.2, color='lavenderblush')\nax.add_patch(rect)\n\n# Create a rectangle for the middle of the plot\nrect = plt.Rectangle((0.3, 0.3), 0.4, 0.2, color='lavender')\nax.add_patch(rect)\n\n# Create a rectangle for the left side of the plot\nrect = plt.Rectangle((0.1, 0.3), 0.2, 0.2, color='mistyrose')\nax.add_patch(rect)\n\n# Create a rectangle for the right side of the plot\nrect = plt.Rectangle((0.7, 0.3), 0.2, 0.2, color='floralwhite')\nax.add_patch(rect)\n\n# Create a rectangle for the top of the plot\nrect = plt.Rectangle((0.3, 0.4), 0.4, 0.2, color='cornsilk')\nax.add_patch(rect)\n\n# Create a rectangle for the bottom of the plot\nrect = plt.Rectangle((0.3, 0.1), 0.4, 0.2, color='antiquewhite')\nax.add_patch(rect)\n\n# Create a rectangle for the middle of the plot\nrect = plt.Rectangle((0.3, 0.5), 0.4, 0.2, color='papayawhip')\nax.add_patch(rect)\n\n# Create a rectangle for the left side of the plot\nrect = plt.Rectangle((0.1, 0.5), 0.2, 0.2, color='blanchedalmond')\nax.add_patch(rect)\n\n# Create a rectangle for the right side of the plot\nrect = plt.Rectangle((0.7, 0.5), 0.2, 0.2, color='bisque')\nax.add_patch(rect)\n\n# Create a rectangle for the top of the plot\nrect = plt.Rectangle((0.3, 0.6), 0.4, 0.2, color='lavenderblush')\nax.add_patch(rect)\n\n# Create a rectangle for the bottom of the plot\nrect = plt.Rectangle((0.3, 0.2), 0.4, 0.2, color='lavender')\nax.add_patch(rect)\n\n# Create a rectangle for the middle of the plot\nrect = plt.Rectangle((0.3, 0.7), 0.4, 0.2, color='mistyrose')\nax.add_patch(rect)\n\n# Create a rectangle for the left side of the plot\nrect = plt.Rectangle((0.1, 0.7), 0.2, 0.2, color='floralwhite')\nax.add_patch(rect)\n\n# Create a rectangle for the right side of the plot\nrect = plt.Rectangle((0.7, 0.7), 0.2, 0.2, color='cornsilk')\nax.add_patch(rect)\n\n# Create a rectangle for the top of the plot\nrect = plt.Rectangle((0.3, 0.8), 0.4, 0.2, color='antiquewhite')\nax.add_patch(rect)\n\n# Create a rectangle for the bottom of the plot\nrect = plt.Rectangle((0.3, 0.4), 0.4, 0.2, color='papayawhip')\nax.add_patch(rect)\n\n# Create a rectangle for the middle of the plot\nrect = plt.Rectangle((0.3, 0.9), 0.4, 0.2, color='blanchedalmond')\nax.add_patch(rect)\n\n# Create a rectangle for the left side of the plot\nrect = plt.Rectangle((0.1, 0.9), 0.2, 0.2, color='bisque')\nax.add_patch(rect)\n\n# Create a rectangle for the right side of the plot\nrect = plt.Rectangle((0.7, 0.9), 0.2, 0.2, color='lavenderblush')\nax.add_patch(rect)\n\n# Create a rectangle for the top of the plot\nrect = plt.Rectangle((0.3, 0.1), 0.4, 0.2, color='lavender')\nax.add_patch(rect)\n\n# Create a rectangle for the bottom of the plot\nrect = plt.Rectangle((0.3, 0.7), 0.4, 0.2, color='mistyrose')\nax.add_patch(rect)\n\n# Create a rectangle for the middle of the plot\nrect = plt.Rectangle((0.3, 0.2), 0.4, 0.2, color='floralwhite')\nax.add_patch(rect)\n\n# Create a rectangle for the left side of the plot\nrect = plt.Rectangle((0.1, 0.2), 0.2, 0.2, color='cornsilk')\nax.add_patch(rect)\n\n# Create a rectangle for the right side of the plot\nrect = plt.Rectangle((0.7, 0.2), 0.2, 0.2, color='antiquewhite')\nax.add_patch(rect)\n\n# Create a rectangle for the top of the plot\nrect = plt.Rectangle((0.3, 0.3), 0.4, 0.2, color='papayawhip')\nax.add_patch(rect)\n\n# Create a rectangle for the bottom of the plot\nrect = plt.Rectangle((0.3, 0.9), 0.4, 0.2, color='blanchedalmond')\nax.add_patch(rect)\n\n# Create a rectangle for the middle of the plot\nrect = plt.Rectangle((0.3, 0.4), 0.4, 0.2, color='bisque')\nax.add_patch(rect)\n\n# Create a rectangle for the left side of the plot\nrect = plt.Rectangle((0.1, 0.4), 0.2, 0.2, color='lavenderblush')\nax.add_patch(rect)\n\n# Create a rectangle for the right side of the plot\nrect = plt.Rectangle((0.7, 0.4), 0.2, 0.2, color='lavender')\nax.add_patch(rect)\n\n# Create a rectangle for the top of the plot\nrect = plt.Rectangle((0.3, 0.5), 0.4, 0.2, color='mistyrose')\nax.add_patch(rect)\n\n# Create a rectangle for the bottom of the plot\nrect = plt.Rectangle((0.3, 0.1), 0.4, 0.2, color='floralwhite')\nax.add_patch(rect)\n\n# Create a rectangle for the middle of the plot\nrect = plt.Rectangle((0.3, 0.6), 0.4, 0.2, color='cornsilk')\nax.add_patch(rect)\n\n# Create a rectangle for the left side of the plot\nrect = plt.Rectangle((0.1, 0.6), 0.2, 0.2, color='antiquewhite')\nax.add_patch(rect)\n\n# Create a rectangle for the right side of the plot\nrect = plt.Rectangle((0.7, 0.6), 0.2, 0.2, color='papayawhip')\nax"}
{"file": "dataset/ori_500/radar_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 7.0))\n\n# Set the background color of the plot\nax.set_facecolor('white')\n\n# Set the title of the plot\nax.set_title('Stock Market Analysis', fontsize=16)\n\n# Set the labels for the x-axis and y-axis\nax.set_xlabel('Time')\nax.set_ylabel('Price')\n\n# Set the tick labels for the x-axis and y-axis\nax.set_xticks(np.arange(0, 100, 10))\nax.set_yticks(np.arange(0, 100, 10))\n\n# Set the grid lines\nax.grid(True)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot ticks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the plot text\nax.text(0.5, 0.5, 'TinyLLaVA-3.1B', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=12, color='red')\nax.text(0.5, 0.4, 'TinyLLaVA-3.1A', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=12, color='blue')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(12, 4))\n\n# Set the x-axis limits\nax.set_xlim(0, 2)\n\n# Set the y-axis limits\nax.set_ylim(0, 2)\n\n# Set the x-axis label\nax.set_xlabel('Value')\n\n# Set the y-axis label\nax.set_ylabel('Time')\n\n# Set the title of the plot\nax.set_title('Model-Basedness')\n\n# Create a scatter plot\nax.scatter([0, 1], [0, 1], color='blue')\n\n# Create a bar chart\nax.bar([0, 1], [1, 1], color='orange')\n\n# Create a line graph\nx = np.linspace(0, 2, 100)\ny = np.sin(x)\nax.plot(x, y, color='green')\n\n# Create a histogram\nax.hist(np.random.normal(0, 1, 100), bins=10, color='red')\n\n# Create a pie chart\nax.pie([1, 1], colors=['purple', 'pink'], startangle=90)\n\n# Create a box plot\nax.boxplot([np.random.normal(0, 1, 100), np.random.normal(0, 1, 100)], patch_artist=True, boxprops=dict(facecolor='brown'))\n\n# Create a violin plot\nax.violinplot([np.random.normal(0, 1, 100), np.random.normal(0, 1, 100)], showmeans=True, showmedians=False, showextrema=False)\n\n# Create a heatmap\nax.imshow([[1, 2], [3, 4]], cmap='gray')\n\n# Create a contour plot\nX, Y = np.meshgrid(np.linspace(-1, 1, 100), np.linspace(-1, 1, 100))\nZ = X**2 + Y**2\nCS = ax.contour(X, Y, Z, levels=[0.5, 1, 2], colors='black')\n\n# Create a stream plot\nax.streamplot(X, Y, Z, Z, color='blue')\n\n# Create a quiver plot\nU, V = np.meshgrid(np.linspace(-1, 1, 10), np.linspace(-1, 1, 10))\nax.quiver(U, V, U, V, color='green')\n\n# Create a polar plot\nax.polar([0, np.pi/2, np.pi], [1, 1, 1], color='red')\n\n# Create a 3D plot\nfrom mpl_toolkits.mplot3d import Axes3D\nax3d = fig.add_subplot(111, projection='3d')\nax3d.plot_surface(X, Y, Z, color='blue')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Set the title of the plot\nax.set_title('ImageNet-1K Linear Probing')\n\n# Set the x-axis label\nax.set_xlabel('Pre-training GPU Hours')\n\n# Set the y-axis label\nax.set_ylabel('Accuracy [%]')\n\n# Set the x-axis limits\nax.set_xlim(0, 4000)\n\n# Set the y-axis limits\nax.set_ylim(75, 90)\n\n# Create a scatter plot for each model\nax.scatter([100, 2000, 3000], [85, 83, 81], color='black')\nax.plot([100, 2000, 3000], [85, 83, 81], color='green')\n\n# Create a scatter plot for each model\nax.scatter([100, 2000, 3000], [85, 83, 81], color='black')\nax.plot([100, 2000, 3000], [85, 83, 81], color='green')\n\n# Create a scatter plot for each model\nax.scatter([100, 2000, 3000], [85, 83, 81], color='black')\nax.plot([100, 2000, 3000], [85, 83, 81], color='green')\n\n# Create a scatter plot for each model\nax.scatter([100, 2000, 3000], [85, 83, 81], color='black')\nax.plot([100, 2000, 3000], [85, 83, 81], color='green')\n\n# Create a scatter plot for each model\nax.scatter([100, 2000, 3000], [85, 83, 81], color='black')\nax.plot([100, 2000, 3000], [85, 83, 81], color='green')\n\n# Create a scatter plot for each model\nax.scatter([100, 2000, 3000], [85, 83, 81], color='black')\nax.plot([100, 2000, 3000], [85, 83, 81], color='green')\n\n# Create a scatter plot for each model\nax.scatter([100, 2000, 3000], [85, 83, 81], color='black')\nax.plot([100, 2000, 3000], [85, 83, 81], color='green')\n\n# Create a scatter plot for each model\nax.scatter([100, 2000, 3000], [85, 83, 81], color='black')\nax.plot([100, 2000, 3000], [85, 83, 81], color='green')\n\n# Create a scatter plot for each model\nax.scatter([100, 2000, 3000], [85, 83, 81], color='black')\nax.plot([100, 2000, 3000], [85, 83, 81], color='green')\n\n# Create a scatter plot for each model\nax.scatter([100, 2000, 3000], [85, 83, 81], color='black')\nax.plot([100, 2000, 3000], [85, 83, 81], color='green')\n\n# Create a scatter plot for each model\nax.scatter([100, 2000, 3000], [85, 83, 81], color='black')\nax.plot([100, 2000, 3000], [85, 83, 81], color='green')\n\n# Create a scatter plot for each model\nax.scatter([100, 2000, 3000], [85, 83, 81], color='black')\nax.plot([100, 2000, 3000], [85, 83, 81], color='green')\n\n# Create a scatter plot for each model\nax.scatter([100, 2000, 3000], [85, 83, 81], color='black')\nax.plot([100, 2000, 3000], [85, 83, 81], color='green')\n\n# Create a scatter plot for each model\nax.scatter([100, 2000, 3000], [85, 83, 81], color='black')\nax.plot([100, 2000, 3000], [85, 83, 81], color='green')\n\n# Create a scatter plot for each model\nax.scatter([100, 2000, 3000], [85, 83, 81], color='black')\nax.plot([100, 2000, 3000], [85, 83, 81], color='green')\n\n# Create a scatter plot for each model\nax.scatter([100, 2000, 3000], [85, 83, 81], color='black')\nax.plot([100, 2000, 3000], [85, 83, 81], color='green')\n\n# Create a scatter plot for each model\nax.scatter([100, 2000, 3000], [85, 83, 81], color='black')\nax.plot([100, 2000, 3000], [85, 83, 81], color='green')\n\n# Create a scatter plot for each model\nax.scatter([100, 2000, 3000], [85, 83, 81], color='black')\nax.plot([100, 2000, 3000], [85, 83, 81], color='green')\n\n# Create a scatter plot for each model\nax.scatter([100, 2000, 3000], [85, 83, 81], color='black')\nax.plot([100, 2000, 3000], [85, 83, 81], color='green')\n\n# Create a scatter plot for each model\nax.scatter([100, 2000, 3000], [85, 83, 81], color='black')\nax.plot([100, 2000, 3000], [85, 83, 81], color='green')\n\n# Create a scatter plot for each model\nax.scatter([100, 2000, 3000], [85, 83, 81], color='black')\nax.plot([100, 2000, 3000], [85, 83, 81], color='green')\n\n# Create a scatter plot for each model\nax.scatter([100, 2000, 3000], [85, 83, 81], color='black')\nax.plot([100, 2000, 3000], [85, 83, 81], color='green')\n\n# Create a scatter plot for each model\nax.scatter([100, 2000, 3000], [85, 83, 81], color='black')\nax.plot([100, 2000, 3000], [85, 83, 81], color='green')\n\n# Create a scatter plot for each model\nax.scatter([100, 2000, 3000], [85, 83, 81], color='black')\nax.plot([100, 2000, 3000], [85, 83, 81], color='green')\n\n# Create a scatter plot for each model\nax.scatter([100, 2000, 3000], [85, 83, 81], color='black')\nax.plot([100, 2000, 3000], [85, 83, 81], color='green')\n\n# Create a scatter plot for each model\nax.scatter([100, 2000, 3000], [85, 83, 81], color='black')\nax.plot([100, 2000, 3000], [85, 83, 81], color='green')\n\n# Create a scatter plot for each model\nax.scatter([100, 2000, 3000], [85, 83, 81], color='black')\nax.plot([100, 2000, 3000], [85, 83, 81], color='green')\n\n# Create a scatter plot for each model\nax.scatter([100, 2000, 3000], [85, 83, 81], color='black')\nax.plot([100, 2000, 3000], [85, 83, 81], color='green')\n\n# Create a scatter plot for each model\nax.scatter([100, 2000, 3000], [85, 83, 81], color='black')\nax.plot([100, 2000, 3000], [85, 83, 81], color='green')\n\n# Create a scatter plot for each model\nax.scatter([100, 2000, 3000], [85, 83, 81], color='black')\nax.plot([100, 2000, 3000], [85, 83, 81], color='green')\n\n# Create a scatter plot for each model\nax.scatter([100, 2000, 3000], [85, 83, 81], color='black')\nax.plot([100, 2000, 3000], [85, 83, 81], color='green')\n\n# Create a scatter plot for each model\nax.scatter([100, 2000, 3000], [85, 83, 81], color='black')\nax.plot([100, 2000, 3000], [85, 83, 81], color='green')\n\n# Create a scatter plot for each model\nax.scatter([100, 2000, 3000], [85, 83, 81], color='black')\nax.plot([100, 2000, 3000], [85, 83, 81], color='green')\n\n# Create a scatter plot for each model\nax.scatter([100, 2000, 3000], [85, 83, 81], color='black')\nax.plot([100, 2000, 3000], [85, 83, 81], color='green')\n\n# Create a scatter plot for each model\nax.scatter([100, 2000, 3000], [85, 83, 81], color='black')\nax.plot([100, 2000, 3000], [85, 83, 81], color='green')\n\n# Create a scatter plot for each model\nax.scatter([100, 2000, 3000], [85, 83, 81], color='black')\nax.plot([100, 2000, 3000], [85, 83, 81], color='green')\n\n# Create a scatter plot for each model\nax.scatter([100, 2000, 3000], [85, 83, 81], color='black')\nax.plot([100, 2000, 3000], [85, 83, 81], color='green')\n\n# Create a scatter plot for each model\nax.scatter([100, 2000, 3000], [85, 83, 81], color='black')\nax.plot([100, 2000, 3000], [85, 83, 81], color='green')\n\n# Create a scatter plot for each model\nax.scatter([100, 2000, 3000], [85, 83, 81], color='black')\nax.plot([100, 2000, 3000], [85, 83, 81], color='green')\n\n# Create a scatter plot for each model\nax.scatter([100, 2000, 3000], [85, 83, 81], color='black')\nax.plot([100, 2000, 3000], [85, 83, 81], color='green')\n\n# Create a scatter plot for each model\nax.scatter([100, 2000, 3000], [85, 83, 81], color='black')\nax.plot([100, 2000, 3000], [85, 83, 81], color='green')\n\n# Create a scatter plot for each model\nax.scatter([100, 2000, 3000], [85, 83, 81], color='black')\nax.plot([100, 2000, 3000], [85, 83, 81], color='green')\n\n# Create a scatter plot for each model\nax.scatter([100, 2000, 3000], [85, 83, 81], color='black')\nax.plot([100, 2000, 3000], [85, 83, 81], color='green')\n\n# Create a scatter plot for each model\nax.scatter([100, 2000, 3000], [85, 83, 81], color='black')\nax.plot([100, 2000, 3000], [85, 83, 81], color='green')\n\n# Create a scatter plot for each model\nax.scatter([100, 2000, 3000], [85, 83, 81], color='black')\nax.plot([100, 2000, 3000], [85, 83, 81], color='green')\n\n# Create a scatter plot for each model\nax.scatter([100, 2000, 3000], [85, 83, 81], color='black')\nax.plot([100, 2000, 3000], [85, 83, 81], color='green')\n\n# Create a scatter plot for each model\nax.scatter([100, 2000, 3000], [85, 83, 81], color='black')\nax.plot([100, 2000, 3000], [85, 83, 81], color='green')\n\n# Create a scatter plot for each model\nax.scatter([100, 2000, 3000], [85, 83, 81], color='black')\nax.plot([100, 2000, 3000], [85, 83, 81], color='green')\n\n# Create a scatter plot for each model\nax.scatter([100, 2000, 3000], [85, 83, 81], color='black')\nax.plot([100, 2000, 3000], [85, 83, 81], color='green')\n\n# Create a scatter plot for each model\nax.scatter([100, 2000, 3000], [85, 83, 81], color='black')\nax.plot([100, 2000, 3000], [85, 83, 81], color='green')\n\n# Create a scatter plot for each model\nax.scatter([100, 2000, 3"}
{"file": "dataset/ori_500/scatter_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Bubble Size: Number of Anomalies Detected')\n\n# Set the x-axis label\nax.set_xlabel('Infernece Time (seconds)')\n\n# Set the y-axis label\nax.set_ylabel('Average Score')\n\n# Set the tick labels for the x-axis\nax.set_xticks([10, 20, 30, 40, 50, 60])\n\n# Set the tick labels for the y-axis\nax.set_yticks([0.5, 0.6, 0.7, 0.8, 0.9])\n\n# Draw a rectangle at the bottom left corner\nrect = plt.Rectangle((0, 0), 1, 1, color='red')\nax.add_patch(rect)\n\n# Draw a circle at the top right corner\ncircle = plt.Circle((1, 1), 0.5, color='blue')\nax.add_patch(circle)\n\n# Draw a triangle at the bottom right corner\ntriangle = plt.Polygon([[0.5, 0], [1, 0.5], [0.5, 1]], color='green')\nax.add_patch(triangle)\n\n# Draw a square at the top left corner\nsquare = plt.Rectangle((0, 1), 1, 1, color='yellow')\nax.add_patch(square)\n\n# Draw a pentagon at the bottom center\npentagon = plt.Polygon([[0.25, 0], [0.5, 0.5], [0.75, 0], [0.5, -0.5], [0.25, 0]], color='orange')\nax.add_patch(pentagon)\n\n# Draw a hexagon at the top center\nhexagon = plt.Polygon([[0.25, 1], [0.5, 1.5], [0.75, 1], [1, 1.5], [1, 1], [0.75, 0.5], [0.5, 0.5], [0.25, 1]], color='purple')\nax.add_patch(hexagon)\n\n# Draw a heptagon at the bottom right corner\nheptagon = plt.Polygon([[0.5, 0], [0.75, 0.5], [1, 0.5], [1, 1], [0.75, 1], [0.5, 0.5], [0.25, 0.5], [0.25, 0]], color='pink')\nax.add_patch(heptagon)\n\n# Draw an octagon at the top left corner\noctagon = plt.Polygon([[0.25, 0], [0.5, 0.5], [0.75, 0.5], [1, 0], [1, 1], [0.75, 1], [0.5, 0.5], [0.25, 0]], color='brown')\nax.add_patch(octagon)\n\n# Draw a nonagon at the bottom center\nnonagon = plt.Polygon([[0.25, 0], [0.5, 0.5], [0.75, 0.5], [1, 0], [1, 1], [0.75, 1], [0.5, 0.5], [0.25, 0.5], [0.25, 0], [0.5, 0]], color='cyan')\nax.add_patch(nonagon)\n\n# Draw a decagon at the top right corner\ndecagon = plt.Polygon([[0.25, 1], [0.5, 1.5], [0.75, 1], [1, 1.5], [1, 1], [0.75, 0.5], [0.5, 0.5], [0.25, 1], [0.25, 0], [0.5, 0]], color='magenta')\nax.add_patch(decagon)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Number of parameters')\n\n# Create a scatter plot with random data\nax.scatter([203, 424, 1, 4, 40], [50, 55, 55, 55, 55], s=100, c='gray', alpha=0.5)\n\n# Create a scatter plot with random data\nax.scatter([203, 424, 1, 4, 40], [50, 55, 55, 55, 55], s=100, c='gray', alpha=0.5)\n\n# Create a scatter plot with random data\nax.scatter([203, 424, 1, 4, 40], [50, 55, 55, 55, 55], s=100, c='gray', alpha=0.5)\n\n# Create a scatter plot with random data\nax.scatter([203, 424, 1, 4, 40], [50, 55, 55, 55, 55], s=100, c='gray', alpha=0.5)\n\n# Create a scatter plot with random data\nax.scatter([203, 424, 1, 4, 40], [50, 55, 55, 55, 55], s=100, c='gray', alpha=0.5)\n\n# Create a scatter plot with random data\nax.scatter([203, 424, 1, 4, 40], [50, 55, 55, 55, 55], s=100, c='gray', alpha=0.5)\n\n# Create a scatter plot with random data\nax.scatter([203, 424, 1, 4, 40], [50, 55, 55, 55, 55], s=100, c='gray', alpha=0.5)\n\n# Create a scatter plot with random data\nax.scatter([203, 424, 1, 4, 40], [50, 55, 55, 55, 55], s=100, c='gray', alpha=0.5)\n\n# Create a scatter plot with random data\nax.scatter([203, 424, 1, 4, 40], [50, 55, 55, 55, 55], s=100, c='gray', alpha=0.5)\n\n# Create a scatter plot with random data\nax.scatter([203, 424, 1, 4, 40], [50, 55, 55, 55, 55], s=100, c='gray', alpha=0.5)\n\n# Create a scatter plot with random data\nax.scatter([203, 424, 1, 4, 40], [50, 55, 55, 55, 55], s=100, c='gray', alpha=0.5)\n\n# Create a scatter plot with random data\nax.scatter([203, 424, 1, 4, 40], [50, 55, 55, 55, 55], s=100, c='gray', alpha=0.5)\n\n# Create a scatter plot with random data\nax.scatter([203, 424, 1, 4, 40], [50, 55, 55, 55, 55], s=100, c='gray', alpha=0.5)\n\n# Create a scatter plot with random data\nax.scatter([203, 424, 1, 4, 40], [50, 55, 55, 55, 55], s=100, c='gray', alpha=0.5)\n\n# Create a scatter plot with random data\nax.scatter([203, 424, 1, 4, 40], [50, 55, 55, 55, 55], s=100, c='gray', alpha=0.5)\n\n# Create a scatter plot with random data\nax.scatter([203, 424, 1, 4, 40], [50, 55, 55, 55, 55], s=100, c='gray', alpha=0.5)\n\n# Create a scatter plot with random data\nax.scatter([203, 424, 1, 4, 40], [50, 55, 55, 55, 55], s=100, c='gray', alpha=0.5)\n\n# Create a scatter plot with random data\nax.scatter([203, 424, 1, 4, 40], [50, 55, 55, 55, 55], s=100, c='gray', alpha=0.5)\n\n# Create a scatter plot with random data\nax.scatter([203, 424, 1, 4, 40], [50, 55, 55, 55, 55], s=100, c='gray', alpha=0.5)\n\n# Create a scatter plot with random data\nax.scatter([203, 424, 1, 4, 40], [50, 55, 55, 55, 55], s=100, c='gray', alpha=0.5)\n\n# Create a scatter plot with random data\nax.scatter([203, 424, 1, 4, 40], [50, 55, 55, 55, 55], s=100, c='gray', alpha=0.5)\n\n# Create a scatter plot with random data\nax.scatter([203, 424, 1, 4, 40], [50, 55, 55, 55, 55], s=100, c='gray', alpha=0.5)\n\n# Create a scatter plot with random data\nax.scatter([203, 424, 1, 4, 40], [50, 55, 55, 55, 55], s=100, c='gray', alpha=0.5)\n\n# Create a scatter plot with random data\nax.scatter([203, 424, 1, 4, 40], [50, 55, 55, 55, 55], s=100, c='gray', alpha=0.5)\n\n# Create a scatter plot with random data\nax.scatter([203, 424, 1, 4, 40], [50, 55, 55, 55, 55], s=100, c='gray', alpha=0.5)\n\n# Create a scatter plot with random data\nax.scatter([203, 424, 1, 4, 40], [50, 55, 55, 55, 55], s=100, c='gray', alpha=0.5)\n\n# Create a scatter plot with random data\nax.scatter([203, 424, 1, 4, 40], [50, 55, 55, 55, 55], s=100, c='gray', alpha=0.5)\n\n# Create a scatter plot with random data\nax.scatter([203, 424, 1, 4, 40], [50, 55, 55, 55, 55], s=100, c='gray', alpha=0.5)\n\n# Create a scatter plot with random data\nax.scatter([203, 424, 1, 4, 40], [50, 55, 55, 55, 55], s=100, c='gray', alpha=0.5)\n\n# Create a scatter plot with random data\nax.scatter([203, 424, 1, 4, 40], [50, 55, 55, 55, 55], s=100, c='gray', alpha=0.5)\n\n# Create a scatter plot with random data\nax.scatter([203, 424, 1, 4, 40], [50, 55, 55, 55, 55], s=100, c='gray', alpha=0.5)\n\n# Create a scatter plot with random data\nax.scatter([203, 424, 1, 4, 40], [50, 55, 55, 55, 55], s=100, c='gray', alpha=0.5)\n\n# Create a scatter plot with random data\nax.scatter([203, 424, 1, 4, 40], [50, 55, 55, 55, 55], s=100, c='gray', alpha=0.5)\n\n# Create a scatter plot with random data\nax.scatter([203, 424, 1, 4, 40], [50, 55, 55, 55, 55], s=100, c='gray', alpha=0.5)\n\n# Create a scatter plot with random data\nax.scatter([203, 424, 1, 4, 40], [50, 55, 55, 55, 55], s=100, c='gray', alpha=0.5)\n\n# Create a scatter plot with random data\nax.scatter([203, 424, 1, 4, 40], [50, 55, 55, 55, 55], s=100, c='gray', alpha=0.5)\n\n# Create a scatter plot with random data\nax.scatter([203, 424, 1, 4, 40], [50, 55, 55, 55, 55], s=100, c='gray', alpha=0.5)\n\n# Create a scatter plot with random data\nax.scatter([203, 424, 1, 4, 40], [50, 55, 55, 55, 55], s=100, c='gray', alpha=0.5)\n\n# Create a scatter plot with random data\nax.scatter([203, 424, 1, 4, 40], [50, 55, 55, 55, 55], s=100, c='gray', alpha=0.5)\n\n# Create a scatter plot with random data\nax.scatter([203, 424, 1, 4, 40], [50, 55, 55, 55, 55], s=100, c='gray', alpha=0.5)\n\n# Create a scatter plot with random data\nax.scatter([203, 424, 1, 4, 40], [50, 55, 55, 55, 55], s=100, c='gray', alpha=0.5)\n\n# Create a scatter plot with random data\nax.scatter([203, 424, 1, 4, 40], [50, 55, 55, 55, 55], s=100, c='gray', alpha=0.5)\n\n# Create a scatter plot with random data\nax.scatter([203, 424, 1, 4, 40], [50, 55, 55, 55, 55], s=100, c='gray', alpha=0.5)\n\n# Create a scatter plot with random data\nax.scatter([203, 424, 1, 4, 40], [50, 55, 55, 55, 55], s=100, c='gray', alpha=0.5)\n\n# Create a scatter plot with random data\nax.scatter([203, 424, 1, 4, 40], [50, 55, 55, 55, 55], s=100, c='gray', alpha=0.5)\n\n# Create a scatter plot with random data\nax.scatter([203, 424, 1, 4, 40], [50, 55, 55, 55, 55], s=100, c='gray', alpha=0.5)\n\n# Create a scatter plot with random data\nax.scatter([203, 424, 1, 4, 40], [50, 55, 55, 55, 55], s=100, c='gray', alpha=0.5)\n\n# Create a scatter plot with random data\nax.scatter([203, 424, 1, 4, 40], [50, 55, 55, 55, 55], s=100, c='gray', alpha=0.5)\n\n# Create a scatter plot with random data\nax.scatter([203, 424, 1, 4, 40], [50, 55, 55, 55, 55], s=100, c='gray', alpha=0.5)\n\n# Create a scatter plot with random data\nax.scatter([203, 424, 1, 4, 40], [50, 55, 55, 55, 55], s=100, c='gray', alpha=0.5)\n\n# Create a scatter plot with random data\nax.scatter([203, 424, 1, 4, 40], [50, 55, 55, 55, 55], s=100, c='gray', alpha=0.5)\n\n# Create a scatter plot with random data\nax.scatter([203, 424, 1, 4, 40], [50, 55, 55, 55, 55], s=100, c='gray', alpha=0.5)\n\n# Create a scatter plot with random data\nax.scatter([203, 424, 1, 4, 40], [50, 55, 55, 55, 55], s=100, c='gray', alpha=0.5)\n\n# Create a scatter plot with random data\nax.scatter([203, 424, 1, 4, 40], [50, 55, 55, 55, 55], s=100, c='gray', alpha=0.5)\n\n# Create a scatter plot with random data\nax.scatter([203, 424, 1, 4, 40], [50, 55, 55, 55, 55], s=100, c='gray', alpha=0.5)\n\n# Create a scatter plot with random data\nax.scatter([203, 424, 1, 4, 40], [50, 55, 55, 55, 55], s=100, c='gray', alpha=0.5)\n\n# Create a scatter plot with random data\nax.scatter([203, 424, 1, 4, 40], [50, 55, 55, 55, 55], s=100, c='gray', alpha=0.5)\n\n# Create a scatter plot with random data\nax.scatter([203, 424, 1, 4, 40], [50, 55, 55, 55, 55], s=100, c='gray', alpha=0.5)\n\n# Create a scatter plot with random data\nax.scatter([203, 424, 1, 4, 40], [50, 55, 55, 55, 55], s=100, c='gray', alpha=0.5)\n\n# Create a scatter plot with random data\nax.scatter([203, 424, 1, 4, 40], [50, 55, 55, 55, 55], s=100, c='gray', alpha=0.5)\n\n# Create a scatter plot with random data\nax.scatter([203, 424, 1, 4,"}
{"file": "dataset/ori_500/scatter_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Average Relative Error, u')\n\n# Set the x-axis label\nax.set_xlabel('Test Case Index')\n\n# Set the y-axis label\nax.set_ylabel('Average Relative Error, u')\n\n# Create a scatter plot with the data\nax.scatter([1, 2, 3, 4, 5], [0.01, 0.02, 0.03, 0.04, 0.05], color='blue')\nax.scatter([1, 2, 3, 4, 5], [0.01, 0.02, 0.03, 0.04, 0.05], color='green')\nax.scatter([1, 2, 3, 4, 5], [0.01, 0.02, 0.03, 0.04, 0.05], color='red')\n\n# Set the x-axis limits\nax.set_xlim(1, 5)\n\n# Set the y-axis limits\nax.set_ylim(0.01, 0.05)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nclasses = ['spotlight', 'sliding', 'wool', 'weasel', 'space', 'partridge', 'mushroom', 'bighorn']\naccuracies = [1.2, 1.1, 1.0, 0.9, 0.8, 0.7, 0.6, 0.5]\nmajority_minority = ['majority', 'minority', 'majority', 'minority', 'majority', 'minority', 'majority', 'minority']\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 3.0))\n\n# Plot the data\nax.plot(classes, accuracies, 'ro-')\n\n# Add labels and title\nax.set_xlabel('Classes')\nax.set_ylabel('Accuracies')\nax.set_title('Accuracies for the ImageNet Classes (ClarifAI)')\n\n# Add legend\nlegend_elements = [plt.Line2D([0], [0], marker='o', color='w', label=majority_minority[i], markerfacecolor='blue' if majority_minority[i] == 'majority' else 'red') for i in range(len(classes))]\nax.legend(handles=legend_elements)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the plots\nx = [50, 40, 30, 20, 10, 0]\ny1 = [68, 66, 64, 62, 60, 58]\ny2 = [68, 66, 64, 62, 60, 58]\n\n# Create the figure and axes objects\nfig, ax = plt.subplots(figsize=(10, 4))\n\n# Plot the data\nax.plot(x, y1, 'ro-')\nax.plot(x, y2, 'bo-')\n\n# Set the labels and title\nax.set_xlabel('Token cost ($)')\nax.set_ylabel('Accuracy (%)')\nax.set_title('Logic Grid Puzzle(Accuracy versus token cost)')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_16.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 4.0))\n\n# Set the title of the plot\nax.set_title('Energy Efficiency')\n\n# Set the x-axis label\nax.set_xlabel('Efficiency (%)')\n\n# Set the y-axis label\nax.set_ylabel('Carbon Reduction (%)')\n\n# Define the data points\nx = [15, 20, 25, 30, 35, 40, 45, 50]\ny = [10, 15, 20, 25, 30, 35, 40, 45]\n\n# Plot the data points\nax.plot(x, y, 'ro-')\n\n# Add a legend\nax.legend(['Data'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_17.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(9.0, 6.0))\n\n# Set the x-axis and y-axis limits\nax.set_xlim(-30, 10)\nax.set_ylim(-10, 30)\n\n# Set the x-axis and y-axis labels\nax.set_xlabel('\u0394 Robust Accuracy (%)')\nax.set_ylabel('\u0394 RNFR (%)')\n\n# Create a scatter plot with random data\nax.scatter([1, 2, 3], [4, 5, 6], color='red')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_18.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Set the x-axis limits\nax.set_xlim(2, 16)\n\n# Set the y-axis limits\nax.set_ylim(80, 110)\n\n# Set the x-axis ticks\nax.set_xticks(np.arange(2, 17, 2))\n\n# Set the y-axis ticks\nax.set_yticks(np.arange(80, 111, 5))\n\n# Draw grid lines\nax.grid(True)\n\n# Add a legend\nax.legend()\n\n# Add a title\nax.set_title('Temperature Data')\n\n# Add a subtitle\nax.set_xlabel('Time (hours)')\nax.set_ylabel('Temperature (\u00b0C)')\n\n# Add a color bar\ncbar = fig.colorbar(ax.collections[0])\n\n# Add a color bar label\ncbar.set_label('Day')\n\n# Add a color bar tick labels\ncbar.set_ticklabels(['Day 1', 'Day 2'])\n\n# Add a color bar tick locations\ncbar.set_ticks([0, 1])\n\n# Add a color bar tick colors\ncbar.set_tick_params(labelcolor='red')\n\n# Add a color bar tick labels\ncbar.set_ticklabels(['Day 1', 'Day 2'])\n\n# Add a color bar tick locations\ncbar.set_ticks([0, 1])\n\n# Add a color bar tick colors\ncbar.set_tick_params(labelcolor='red')\n\n# Add a color bar tick labels\ncbar.set_ticklabels(['Day 1', 'Day 2'])\n\n# Add a color bar tick locations\ncbar.set_ticks([0, 1])\n\n# Add a color bar tick colors\ncbar.set_tick_params(labelcolor='red')\n\n# Add a color bar tick labels\ncbar.set_ticklabels(['Day 1', 'Day 2'])\n\n# Add a color bar tick locations\ncbar.set_ticks([0, 1])\n\n# Add a color bar tick colors\ncbar.set_tick_params(labelcolor='red')\n\n# Add a color bar tick labels\ncbar.set_ticklabels(['Day 1', 'Day 2'])\n\n# Add a color bar tick locations\ncbar.set_ticks([0, 1])\n\n# Add a color bar tick colors\ncbar.set_tick_params(labelcolor='red')\n\n# Add a color bar tick labels\ncbar.set_ticklabels(['Day 1', 'Day 2'])\n\n# Add a color bar tick locations\ncbar.set_ticks([0, 1])\n\n# Add a color bar tick colors\ncbar.set_tick_params(labelcolor='red')\n\n# Add a color bar tick labels\ncbar.set_ticklabels(['Day 1', 'Day 2'])\n\n# Add a color bar tick locations\ncbar.set_ticks([0, 1])\n\n# Add a color bar tick colors\ncbar.set_tick_params(labelcolor='red')\n\n# Add a color bar tick labels\ncbar.set_ticklabels(['Day 1', 'Day 2'])\n\n# Add a color bar tick locations\ncbar.set_ticks([0, 1])\n\n# Add a color bar tick colors\ncbar.set_tick_params(labelcolor='red')\n\n# Add a color bar tick labels\ncbar.set_ticklabels(['Day 1', 'Day 2'])\n\n# Add a color bar tick locations\ncbar.set_ticks([0, 1])\n\n# Add a color bar tick colors\ncbar.set_tick_params(labelcolor='red')\n\n# Add a color bar tick labels\ncbar.set_ticklabels(['Day 1', 'Day 2'])\n\n# Add a color bar tick locations\ncbar.set_ticks([0, 1])\n\n# Add a color bar tick colors\ncbar.set_tick_params(labelcolor='red')\n\n# Add a color bar tick labels\ncbar.set_ticklabels(['Day 1', 'Day 2'])\n\n# Add a color bar tick locations\ncbar.set_ticks([0, 1])\n\n# Add a color bar tick colors\ncbar.set_tick_params(labelcolor='red')\n\n# Add a color bar tick labels\ncbar.set_ticklabels(['Day 1', 'Day 2'])\n\n# Add a color bar tick locations\ncbar.set_ticks([0, 1])\n\n# Add a color bar tick colors\ncbar.set_tick_params(labelcolor='red')\n\n# Add a color bar tick labels\ncbar.set_ticklabels(['Day 1', 'Day 2'])\n\n# Add a color bar tick locations\ncbar.set_ticks([0, 1])\n\n# Add a color bar tick colors\ncbar.set_tick_params(labelcolor='red')\n\n# Add a color bar tick labels\ncbar.set_ticklabels(['Day 1', 'Day 2'])\n\n# Add a color bar tick locations\ncbar.set_ticks([0, 1])\n\n# Add a color bar tick colors\ncbar.set_tick_params(labelcolor='red')\n\n# Add a color bar tick labels\ncbar.set_ticklabels(['Day 1', 'Day 2'])\n\n# Add a color bar tick locations\ncbar.set_ticks([0, 1])\n\n# Add a color bar tick colors\ncbar.set_tick_params(labelcolor='red')\n\n# Add a color bar tick labels\ncbar.set_ticklabels(['Day 1', 'Day 2'])\n\n# Add a color bar tick locations\ncbar.set_ticks([0, 1])\n\n# Add a color bar tick colors\ncbar.set_tick_params(labelcolor='red')\n\n# Add a color bar tick labels\ncbar.set_ticklabels(['Day 1', 'Day 2'])\n\n# Add a color bar tick locations\ncbar.set_ticks([0, 1])\n\n# Add a color bar tick colors\ncbar.set_tick_params(labelcolor='red')\n\n# Add a color bar tick labels\ncbar.set_ticklabels(['Day 1', 'Day 2'])\n\n# Add a color bar tick locations\ncbar.set_ticks([0, 1])\n\n# Add a color bar tick colors\ncbar.set_tick_params(labelcolor='red')\n\n# Add a color bar tick labels\ncbar.set_ticklabels(['Day 1', 'Day 2'])\n\n# Add a color bar tick locations\ncbar.set_ticks([0, 1])\n\n# Add a color bar tick colors\ncbar.set_tick_params(labelcolor='red')\n\n# Add a color bar tick labels\ncbar.set_ticklabels(['Day 1', 'Day 2'])\n\n# Add a color bar tick locations\ncbar.set_ticks([0, 1])\n\n# Add a color bar tick colors\ncbar.set_tick_params(labelcolor='red')\n\n# Add a color bar tick labels\ncbar.set_ticklabels(['Day 1', 'Day 2'])\n\n# Add a color bar tick locations\ncbar.set_ticks([0, 1])\n\n# Add a color bar tick colors\ncbar.set_tick_params(labelcolor='red')\n\n# Add a color bar tick labels\ncbar.set_ticklabels(['Day 1', 'Day 2'])\n\n# Add a color bar tick locations\ncbar.set_ticks([0, 1])\n\n# Add a color bar tick colors\ncbar.set_tick_params(labelcolor='red')\n\n# Add a color bar tick labels\ncbar.set_ticklabels(['Day 1', 'Day 2'])\n\n# Add a color bar tick locations\ncbar.set_ticks([0, 1])\n\n# Add a color bar tick colors\ncbar.set_tick_params(labelcolor='red')\n\n# Add a color bar tick labels\ncbar.set_ticklabels(['Day 1', 'Day 2'])\n\n# Add a color bar tick locations\ncbar.set_ticks([0, 1])\n\n# Add a color bar tick colors\ncbar.set_tick_params(labelcolor='red')\n\n# Add a color bar tick labels\ncbar.set_ticklabels(['Day 1', 'Day 2'])\n\n# Add a color bar tick locations\ncbar.set_ticks([0, 1])\n\n# Add a color bar tick colors\ncbar.set_tick_params(labelcolor='red')\n\n# Add a color bar tick labels\ncbar.set_ticklabels(['Day 1', 'Day 2'])\n\n# Add a color bar tick locations\ncbar.set_ticks([0, 1])\n\n# Add a color bar tick colors\ncbar.set_tick_params(labelcolor='red')\n\n# Add a color bar tick labels\ncbar.set_ticklabels(['Day 1', 'Day 2'])\n\n# Add a color bar tick locations\ncbar.set_ticks([0, 1])\n\n# Add a color bar tick colors\ncbar.set_tick_params(labelcolor='red')\n\n# Add a color bar tick labels\ncbar.set_ticklabels(['Day 1', 'Day 2'])\n\n# Add a color bar tick locations\ncbar.set_ticks([0, 1])\n\n# Add a color bar tick colors\ncbar.set_tick_params(labelcolor='red')\n\n# Add a color bar tick labels\ncbar.set_ticklabels(['Day 1', 'Day 2'])\n\n# Add a color bar tick locations\ncbar.set_ticks([0, 1])\n\n# Add a color bar tick colors\ncbar.set_tick_params(labelcolor='red')\n\n# Add a color bar tick labels\ncbar.set_ticklabels(['Day 1', 'Day 2'])\n\n# Add a color bar tick locations\ncbar.set_ticks([0, 1])\n\n# Add a color bar tick colors\ncbar.set_tick_params(labelcolor='red')\n\n# Add a color bar tick labels\ncbar.set_ticklabels(['Day 1', 'Day 2'])\n\n# Add a color bar tick locations\ncbar.set_ticks([0, 1])\n\n# Add a color bar tick colors\ncbar.set_tick_params(labelcolor='red')\n\n# Add a color bar tick labels\ncbar.set_ticklabels(['Day 1', 'Day 2'])\n\n# Add a color bar tick locations\ncbar.set_ticks([0, 1])\n\n# Add a color bar tick colors\ncbar.set_tick_params(labelcolor='red')\n\n# Add a color bar tick labels\ncbar.set_ticklabels(['Day 1', 'Day 2'])\n\n# Add a color bar tick locations\ncbar.set_ticks([0, 1])\n\n# Add a color bar tick colors\ncbar.set_tick_params(labelcolor='red')\n\n# Add a color bar tick labels\ncbar.set_ticklabels(['Day 1', 'Day 2'])\n\n# Add a color bar tick locations\ncbar.set_ticks([0, 1])\n\n# Add a color bar tick colors\ncbar.set_tick_params(labelcolor='red')\n\n# Add a color bar tick labels\ncbar.set_ticklabels(['Day 1', 'Day 2'])\n\n# Add a color bar tick locations\ncbar.set_ticks([0, 1])\n\n# Add a color bar tick colors\ncbar.set_tick_params(labelcolor='red')\n\n# Add a color bar tick labels\ncbar.set_ticklabels(['Day 1', 'Day 2'])\n\n# Add a color bar tick locations\ncbar.set_ticks([0, 1])\n\n# Add a color bar tick colors\ncbar.set_tick_params(labelcolor='red')\n\n# Add a color bar tick labels\ncbar.set_ticklabels(['Day 1', 'Day 2'])\n\n# Add a color bar tick locations\ncbar.set_ticks([0, 1])\n\n# Add a color bar tick colors\ncbar.set_tick_params(labelcolor='red')\n\n# Add a color bar tick labels\ncbar.set_ticklabels(['Day 1', 'Day 2'])\n\n# Add a color bar tick locations\ncbar.set_ticks([0, 1])\n\n# Add a color bar tick colors\ncbar.set_tick_params(labelcolor='red')\n\n# Add a color bar tick labels\ncbar.set_ticklabels(['Day 1', 'Day 2'])\n\n# Add a color bar tick locations\ncbar.set_ticks([0, 1])\n\n# Add a color bar tick colors\ncbar.set_tick_params(labelcolor='red')\n\n# Add a color bar tick labels\ncbar.set_ticklabels(['Day 1', 'Day 2'])\n\n# Add a color bar tick locations\ncbar.set_ticks([0, 1])\n\n# Add a color bar tick colors\ncbar.set_tick_params(labelcolor='red')\n\n# Add a color bar tick labels\ncbar.set_ticklabels(['Day 1', 'Day 2'])\n\n# Add a color bar tick locations\ncbar.set_ticks([0, 1])\n\n# Add a color bar tick colors\ncbar.set_tick_params(labelcolor='red')\n\n# Add a color bar tick labels\ncbar.set_ticklabels(['Day 1', 'Day 2'])\n\n# Add a color bar tick locations\ncbar.set_ticks([0, 1])\n\n# Add a color bar tick colors\ncbar.set_tick_params(labelcolor='red')\n\n# Add a color bar tick labels\ncbar.set_ticklabels(['Day 1', 'Day 2'])\n\n# Add a color bar tick locations\ncbar.set_ticks([0, 1])\n\n# Add a color bar tick colors\ncbar.set_tick_params(labelcolor='red')\n\n# Add a color bar tick labels\ncbar.set_ticklabels(['Day 1', 'Day 2'])\n\n# Add a color bar tick locations\ncbar.set_ticks([0, 1])\n\n# Add a color bar tick colors\ncbar.set_tick_params(labelcolor='red')\n\n# Add a color bar tick labels\ncbar.set_ticklabels(['Day 1', 'Day 2'])\n\n# Add a color bar tick locations\ncbar.set_ticks([0, 1])\n\n# Add a color bar tick colors\ncbar.set_tick_params(labelcolor='red')\n\n# Add a color bar tick labels\ncbar.set_ticklabels(['Day 1', 'Day 2'])\n\n# Add a color bar tick locations\ncbar.set_ticks([0, 1])\n\n# Add a color bar tick colors\ncbar.set_tick_params(labelcolor='red')\n\n# Add a color bar tick labels\ncbar.set_ticklabels(['Day 1', 'Day 2'])\n\n# Add a color bar tick locations\ncbar.set_ticks([0, 1])\n\n# Add a color bar tick colors\ncbar.set_tick_params(labelcolor='red')\n\n# Add a color bar tick labels\ncbar.set_ticklabels(['Day 1', 'Day 2'])\n\n# Add a color bar tick locations\ncbar.set_ticks([0, 1])\n\n# Add a color bar tick colors\ncbar.set_tick_params(labelcolor='red')\n\n# Add a color bar tick labels\ncbar.set_ticklabels(['Day 1', 'Day 2'])\n\n# Add a color bar tick locations\ncbar.set_ticks([0, 1])\n\n# Add a color bar tick colors\ncbar.set_tick_params(labelcolor='red')\n\n# Add a color bar tick labels\ncbar.set_ticklabels(['Day 1', 'Day 2'])\n\n# Add a color bar tick locations\ncbar.set_ticks([0, 1])\n\n# Add a color bar tick colors\ncbar.set_tick_params(labelcolor='red')\n\n# Add a color bar tick labels\ncbar.set_ticklabels(['Day 1', 'Day 2'])\n\n# Add a color bar tick locations\ncbar.set_ticks([0, 1])\n\n# Add a color bar tick colors\ncbar.set_tick_params(labelcolor='red')\n\n# Add a color bar tick labels\ncbar.set_ticklabels(['Day 1', 'Day 2'])\n\n# Add a color bar tick locations\ncbar.set_ticks([0, 1])\n\n# Add a color bar tick colors\ncbar.set_tick_params(labelcolor='red')\n\n# Add a color bar tick labels\ncbar.set_ticklabels(['Day 1', 'Day 2'])\n\n# Add a color bar tick locations\ncbar.set_ticks([0, 1])\n\n# Add a color bar tick colors\ncbar.set_tick_params(labelcolor='red')\n\n# Add a color bar tick labels\ncbar.set_ticklabels(['Day 1', 'Day 2'])\n\n# Add a color bar tick locations\ncbar.set_ticks([0, 1])\n\n# Add a color bar tick colors\ncbar.set_tick_params(labelcolor='red')\n\n# Add a color bar tick labels\ncbar.set_ticklabels(['Day 1', 'Day 2'])\n\n# Add a color bar tick locations\ncbar.set_ticks([0, 1])\n\n# Add a color bar tick colors\ncbar.set_tick_params(labelcolor='red')\n\n# Add a color bar tick labels\ncbar.set_ticklabels(['Day 1', 'Day 2'])\n\n# Add a color bar tick locations\ncbar.set_ticks([0, 1])\n\n# Add a color bar tick colors\ncbar.set_tick_params(labelcolor='red')\n\n# Add a color bar tick labels\ncbar.set_ticklabels(['Day 1', 'Day 2'])\n\n# Add a color bar tick locations\ncbar.set_ticks([0, 1])\n\n# Add a color bar tick colors\ncbar.set_tick_params(labelcolor='red')\n\n# Add a color bar tick labels\ncbar.set_ticklabels(['Day 1', 'Day 2'])\n\n# Add a color bar tick locations\ncbar.set_ticks([0, 1])\n\n# Add a color bar tick colors\ncbar.set_tick_params(labelcolor='red')\n\n# Add a color bar tick labels\ncbar.set_ticklabels(['Day 1', 'Day 2'])\n\n# Add a color bar tick locations\ncbar.set_ticks([0, 1])\n\n# Add a color bar tick colors\ncbar.set_tick_params(labelcolor='red')\n\n# Add a color bar tick labels\ncbar.set_ticklabels(['Day 1', 'Day 2'])\n\n# Add a color bar tick locations\ncbar.set_ticks([0, 1])\n\n# Add a color bar tick colors\ncbar.set_tick_params(labelcolor='red')\n\n# Add a color bar tick labels\ncbar.set_ticklabels(['Day 1', 'Day 2'])\n\n# Add a color bar tick locations\ncbar.set_ticks([0, 1])\n\n# Add a color bar tick colors\ncbar.set_tick_params(labelcolor='red')\n\n# Add a color bar tick labels\ncbar.set_ticklabels(['Day 1', 'Day 2'])\n\n# Add a color bar tick locations\ncbar.set_ticks([0, 1])\n\n# Add a color bar tick colors\ncbar.set_tick_params(labelcolor='red')\n\n# Add a color bar tick labels\ncbar.set_ticklabels(['Day 1', 'Day 2'])\n\n# Add a color bar tick locations\ncbar.set_ticks([0, 1])\n\n# Add a color bar tick colors\ncbar.set_tick_params(labelcolor='red')\n\n# Add a color bar tick labels\ncbar.set_ticklabels(['Day 1', 'Day 2'])\n\n# Add a color bar tick locations\ncbar.set_ticks([0, 1])\n\n# Add a color bar tick colors\ncbar.set_tick_params(labelcolor='red')\n\n# Add a color bar tick labels\ncbar.set_ticklabels(['Day 1', 'Day 2'])\n\n# Add a color bar tick locations\ncbar.set_ticks([0, 1])\n\n# Add a color bar tick colors\ncbar.set_tick_params(labelcolor='red')\n\n# Add a color bar tick labels\ncbar.set_ticklabels(['Day 1', 'Day 2'])\n\n# Add a color bar tick locations\ncbar.set_ticks([0, 1])\n\n# Add a color bar tick colors\ncbar.set_tick_params(labelcolor='"}
{"file": "dataset/ori_500/scatter_19.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Set the x-axis and y-axis limits\nax.set_xlim(2, 16)\nax.set_ylim(80, 110)\n\n# Draw a rectangle for each data point\nax.add_patch(plt.Rectangle((2, 95), 4, 5, color='blue'))\nax.add_patch(plt.Rectangle((6, 90), 4, 5, color='green'))\nax.add_patch(plt.Rectangle((10, 85), 4, 5, color='red'))\nax.add_patch(plt.Rectangle((14, 80), 4, 5, color='yellow'))\n\n# Draw a line graph for each data point\nax.plot([2, 6, 10, 14], [95, 90, 85, 80], 'bo-')\nax.plot([2, 6, 10, 14], [95, 90, 85, 80], 'ro-')\n\n# Add a color bar\ncbar = fig.colorbar(ax.images[0])\ncbar.set_label('Color Bar Label')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(4.0, 8.0))\n\n# Set the title of the graph\nax.set_title('Energy Production Trends')\n\n# Create a list of energy sources\nenergy_sources = ['Solar Energy', 'Wind Energy', 'Hydropower']\n\n# Create a list of colors for each energy source\ncolors = ['cyan', 'red', 'gray']\n\n# Create a list of installed capacities\ninstalled_capacities = [175, 200, 225, 250, 275, 300]\n\n# Create a list of energy outputs\nenergy_outputs = [140, 160, 180, 200, 220, 240]\n\n# Plot the data\nfor i in range(len(energy_sources)):\n    ax.plot(installed_capacities, energy_outputs, color=colors[i], label=energy_sources[i])\n\n# Add a legend\nax.legend()\n\n# Set the x-axis label\nax.set_xlabel('Installed Capacity (GW)')\n\n# Set the y-axis label\nax.set_ylabel('Energy Output (TWh)')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_20.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Scatter plot with colorbar')\n\n# Create a scatter plot\nscatter = ax.scatter([10, 20, 30, 40, 50, 60, 70, 80, 90], [10, 20, 30, 40, 50, 60, 70, 80, 90], c=[10, 20, 30, 40, 50, 60, 70, 80, 90])\n\n# Add a color bar which maps values to colors\ncbar = fig.colorbar(scatter)\n\n# Set the limits of the color bar\ncbar.set_clim(0, 100)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_21.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Set the title of the plot\nax.set_title('LibriCSS vs Additional Data 1')\n\n# Create a scatter plot with the data\nax.scatter([2, 3, 4, 5, 6, 7, 8], [0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3], color='blue')\n\n# Set the x-axis label\nax.set_xlabel('Number of Microphones')\n\n# Set the y-axis label\nax.set_ylabel('WER (%)')\n\n# Create a second subplot\nax2 = fig.add_subplot(122)\n\n# Set the title of the second plot\nax2.set_title('AMI vs Additional Data 2')\n\n# Create a scatter plot with the data\nax2.scatter([2, 3, 4, 5, 6, 7, 8], [0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3], color='red')\n\n# Set the x-axis label\nax2.set_xlabel('Number of Microphones')\n\n# Set the y-axis label\nax2.set_ylabel('WER (%)')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_22.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(12.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Performance Comparison')\n\n# Create a scatter plot\nax.scatter([0.5, 0.7, 0.9], [0.3, 0.4, 0.5], color='blue', label='Model-Basedness')\nax.scatter([0.5, 0.7, 0.9], [0.3, 0.4, 0.5], color='orange', label='Meta-Cognition')\n\n# Add labels to the axes\nax.set_xlabel('Value')\nax.set_ylabel('Performance')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_23.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Set the title of the plot\nax.set_title('Model-Basedness')\n\n# Create a scatter plot with blue dots\nax.scatter([1, 2, 3, 4, 5], [1.5, 1.6, 1.7, 1.8, 1.9], color='blue')\n\n# Set the x-axis label\nax.set_xlabel('Models')\n\n# Set the y-axis label\nax.set_ylabel('Score')\n\n# Add a rectangle annotation\nrect = plt.Rectangle((0.5, 0.5), 0.2, 0.2, color='blue')\nax.add_patch(rect)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_24.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(15, 5))\n\n# Set the color scale for the scatter plot\ncmap = plt.cm.RdYlGn\n\n# Create a scatter plot with the data\nscatter = ax.scatter(x, y, c=z, cmap=cmap)\n\n# Add a color bar which maps values to colors\ncbar = fig.colorbar(scatter)\ncbar.set_label('Color scale for X')\n\n# Set the title of the plot\nax.set_title('Scatter Plot - deepskyblue')\n\n# Set the x and y labels\nax.set_xlabel('X Values')\nax.set_ylabel('Y Values')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_25.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\nx = [70, 72, 74, 76, 78, 80, 82, 84, 86, 88]\ny1 = [50, 45, 40, 35, 30, 25, 20, 15, 10, 5]\ny2 = [50, 45, 40, 35, 30, 25, 20, 15, 10, 5]\ny3 = [50, 45, 40, 35, 30, 25, 20, 15, 10, 5]\n\n# Create a figure and a set of subplots\nfig, axs = plt.subplots(1, 3, figsize=(15, 5))\n\n# Plot the data\naxs[0].plot(x, y1, 'b-')\naxs[1].plot(x, y2, 'r-')\naxs[2].plot(x, y3, 'g-')\n\n# Add a title to each subplot\naxs[0].set_title('ViTPose (sc) Performance')\naxs[1].set_title('ViTPose (ft) Performance')\naxs[2].set_title('VLPose Performance')\n\n# Add a legend to each subplot\naxs[0].legend(['Performance'])\naxs[1].legend(['Performance'])\naxs[2].legend(['Performance'])\n\n# Set the x-axis label for each subplot\naxs[0].set_xlabel('Average Precision on HumanArt (%)')\naxs[1].set_xlabel('Average Precision on HumanArt (%)')\naxs[2].set_xlabel('Average Precision on HumanArt (%)')\n\n# Set the y-axis label for each subplot\naxs[0].set_ylabel('Average Precision on MSCOCO (%)')\naxs[1].set_ylabel('Average Precision on MSCOCO (%)')\naxs[2].set_ylabel('Average Precision on MSCOCO (%)')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Token cost ($)')\n\n# Set the x-axis label\nax.set_xlabel('Diversity (%)')\n\n# Set the y-axis label\nax.set_ylabel('Accuracy (%)')\n\n# Create a scatter plot with the data\nax.scatter([12, 14, 16, 18, 20, 22, 24], [75, 65, 55, 45, 35, 25, 15], color='blue')\n\n# Add a legend to the plot\nax.legend(['DefInt', 'CoT', 'SPP', 'Self-refine', 'ToT', 'MAD+judge', 'TFLOPS'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_4.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(5.0, 5.0))\n\n# Set the background color of the plot\nax.set_facecolor('white')\n\n# Create a grid of points\nx = np.linspace(-1, 1, 100)\ny = np.linspace(-1, 1, 100)\nX, Y = np.meshgrid(x, y)\n\n# Create a colormap\ncmap = plt.get_cmap('tab20')\n\n# Plot the points with different colors\nfor i in range(10):\n    ax.scatter(X + i*0.1, Y + i*0.1, c=np.random.rand(100), cmap=cmap)\n\n# Set the limits of the plot\nax.set_xlim(-1, 1)\nax.set_ylim(-1, 1)\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/scatter_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Scatter Plot of WRMSE vs BPP')\n\n# Set the x-axis label\nax.set_xlabel('Bit per pixel (BPP)')\n\n# Set the y-axis label\nax.set_ylabel('WRMSE')\n\n# Define the data points\nx = [0.06, 0.08, 0.1, 0.12, 0.14, 0.16, 0.18, 0.2]\ny = [800, 700, 600, 500, 400, 300, 200, 100]\n\n# Define the colors for the scatter plot\ncolors = ['blue', 'cyan', 'red', 'green', 'purple', 'pink', 'orange', 'yellow']\n\n# Create a scatter plot with the defined data points and colors\nscatter = ax.scatter(x, y, c=colors)\n\n# Add a legend to the plot\nlegend = ax.legend(*scatter.legend_elements(), title=\"Legend\")\nax.add_artist(legend)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Create a scatter plot with orange dots\nax.scatter([1,2,3,4,5], [1,2,3,4,5], color='orange')\n\n# Create a scatter plot with blue dots\nax.scatter([1,2,3,4,5], [1,2,3,4,5], color='blue')\n\n# Create a scatter plot with green dots\nax.scatter([1,2,3,4,5], [1,2,3,4,5], color='green')\n\n# Create a scatter plot with red dots\nax.scatter([1,2,3,4,5], [1,2,3,4,5], color='red')\n\n# Create a scatter plot with black dots\nax.scatter([1,2,3,4,5], [1,2,3,4,5], color='black')\n\n# Create a scatter plot with yellow dots\nax.scatter([1,2,3,4,5], [1,2,3,4,5], color='yellow')\n\n# Create a scatter plot with purple dots\nax.scatter([1,2,3,4,5], [1,2,3,4,5], color='purple')\n\n# Create a scatter plot with pink dots\nax.scatter([1,2,3,4,5], [1,2,3,4,5], color='pink')\n\n# Create a scatter plot with brown dots\nax.scatter([1,2,3,4,5], [1,2,3,4,5], color='brown')\n\n# Create a scatter plot with gray dots\nax.scatter([1,2,3,4,5], [1,2,3,4,5], color='gray')\n\n# Create a scatter plot with white dots\nax.scatter([1,2,3,4,5], [1,2,3,4,5], color='white')\n\n# Create a scatter plot with cyan dots\nax.scatter([1,2,3,4,5], [1,2,3,4,5], color='cyan')\n\n# Create a scatter plot with magenta dots\nax.scatter([1,2,3,4,5], [1,2,3,4,5], color='magenta')\n\n# Create a scatter plot with lime dots\nax.scatter([1,2,3,4,5], [1,2,3,4,5], color='lime')\n\n# Create a scatter plot with olive dots\nax.scatter([1,2,3,4,5], [1,2,3,4,5], color='olive')\n\n# Create a scatter plot with silver dots\nax.scatter([1,2,3,4,5], [1,2,3,4,5], color='silver')\n\n# Create a scatter plot with gold dots\nax.scatter([1,2,3,4,5], [1,2,3,4,5], color='gold')\n\n# Create a scatter plot with maroon dots\nax.scatter([1,2,3,4,5], [1,2,3,4,5], color='maroon')\n\n# Create a scatter plot with navy dots\nax.scatter([1,2,3,4,5], [1,2,3,4,5], color='navy')\n\n# Create a scatter plot with teal dots\nax.scatter([1,2,3,4,5], [1,2,3,4,5], color='teal')\n\n# Create a scatter plot with violet dots\nax.scatter([1,2,3,4,5], [1,2,3,4,5], color='violet')\n\n# Create a scatter plot with indigo dots\nax.scatter([1,2,3,4,5], [1,2,3,4,5], color='indigo')\n\n# Create a scatter plot with chartreuse dots\nax.scatter([1,2,3,4,5], [1,2,3,4,5], color='chartreuse')\n\n# Create a scatter plot with aqua dots\nax.scatter([1,2,3,4,5], [1,2,3,4,5], color='aqua')\n\n# Create a scatter plot with fuchsia dots\nax.scatter([1,2,3,4,5], [1,2,3,4,5], color='fuchsia')\n\n# Create a scatter plot with seagreen dots\nax.scatter([1,2,3,4,5], [1,2,3,4,5], color='seagreen')\n\n# Create a scatter plot with sienna dots\nax.scatter([1,2,3,4,5], [1,2,3,4,5], color='sienna')\n\n# Create a scatter plot with peru dots\nax.scatter([1,2,3,4,5], [1,2,3,4,5], color='peru')\n\n# Create a scatter plot with tan dots\nax.scatter([1,2,3,4,5], [1,2,3,4,5], color='tan')\n\n# Create a scatter plot with chocolate dots\nax.scatter([1,2,3,4,5], [1,2,3,4,5], color='chocolate')\n\n# Create a scatter plot with coral dots\nax.scatter([1,2,3,4,5], [1,2,3,4,5], color='coral')\n\n# Create a scatter plot with tomato dots\nax.scatter([1,2,3,4,5], [1,2,3,4,5], color='tomato')\n\n# Create a scatter plot with salmon dots\nax.scatter([1,2,3,4,5], [1,2,3,4,5], color='salmon')\n\n# Create a scatter plot with peachpuff dots\nax.scatter([1,2,3,4,5], [1,2,3,4,5], color='peachpuff')\n\n# Create a scatter plot with bisque dots\nax.scatter([1,2,3,4,5], [1,2,3,4,5], color='bisque')\n\n# Create a scatter plot with navajowhite dots\nax.scatter([1,2,3,4,5], [1,2,3,4,5], color='navajowhite')\n\n# Create a scatter plot with lavenderblush dots\nax.scatter([1,2,3,4,5], [1,2,3,4,5], color='lavenderblush')\n\n# Create a scatter plot with mistyrose dots\nax.scatter([1,2,3,4,5], [1,2,3,4,5], color='mistyrose')\n\n# Create a scatter plot with antiquewhite dots\nax.scatter([1,2,3,4,5], [1,2,3,4,5], color='antiquewhite')\n\n# Create a scatter plot with linen dots\nax.scatter([1,2,3,4,5], [1,2,3,4,5], color='linen')\n\n# Create a scatter plot with oldlace dots\nax.scatter([1,2,3,4,5], [1,2,3,4,5], color='oldlace')\n\n# Create a scatter plot with papayawhip dots\nax.scatter([1,2,3,4,5], [1,2,3,4,5], color='papayawhip')\n\n# Create a scatter plot with blanchedalmond dots\nax.scatter([1,2,3,4,5], [1,2,3,4,5], color='blanchedalmond')\n\n# Create a scatter plot with bisque dots\nax.scatter([1,2,3,4,5], [1,2,3,4,5], color='bisque')\n\n# Create a scatter plot with cornsilk dots\nax.scatter([1,2,3,4,5], [1,2,3,4,5], color='cornsilk')\n\n# Create a scatter plot with ivory dots\nax.scatter([1,2,3,4,5], [1,2,3,4,5], color='ivory')\n\n# Create a scatter plot with seashell dots\nax.scatter([1,2,3,4,5], [1,2,3,4,5], color='seashell')\n\n# Create a scatter plot with honeydew dots\nax.scatter([1,2,3,4,5], [1,2,3,4,5], color='honeydew')\n\n# Create a scatter plot with mintcream dots\nax.scatter([1,2,3,4,5], [1,2,3,4,5], color='mintcream')\n\n# Create a scatter plot with azure dots\nax.scatter([1,2,3,4,5], [1,2,3,4,5], color='azure')\n\n# Create a scatter plot with aliceblue dots\nax.scatter([1,2,3,4,5], [1,2,3,4,5], color='aliceblue')\n\n# Create a scatter plot with lavender dots\nax.scatter([1,2,3,4,5], [1,2,3,4,5], color='lavender')\n\n# Create a scatter plot with thistle dots\nax.scatter([1,2,3,4,5], [1,2,3,4,5], color='thistle')\n\n# Create a scatter plot with plum dots\nax.scatter([1,2,3,4,5], [1,2,3,4,5], color='plum')\n\n# Create a scatter plot with violet dots\nax.scatter([1,2,3,4,5], [1,2,3,4,5], color='violet')\n\n# Create a scatter plot with orchid dots\nax.scatter([1,2,3,4,5], [1,2,3,4,5], color='orchid')\n\n# Create a scatter plot with fuchsia dots\nax.scatter([1,2,3,4,5], [1,2,3,4,5], color='fuchsia')\n\n# Create a scatter plot with darkorchid dots\nax.scatter([1,2,3,4,5], [1,2,3,4,5], color='darkorchid')\n\n# Create a scatter plot with purple dots\nax.scatter([1,2,3,4,5], [1,2,3,4,5], color='purple')\n\n# Create a scatter plot with rebeccapurple dots\nax.scatter([1,2,3,4,5], [1,2,3,4,5], color='rebeccapurple')\n\n# Create a scatter plot with mediumvioletred dots\nax.scatter([1,2,3,4,5], [1,2,3,4,5], color='mediumvioletred')\n\n# Create a scatter plot with darkviolet dots\nax.scatter([1,2,3,4,5], [1,2,3,4,5], color='darkviolet')\n\n# Create a scatter plot with blueviolet dots\nax.scatter([1,2,3,4,5], [1,2,3,4,5], color='blueviolet')\n\n# Create a scatter plot with darkslateblue dots\nax.scatter([1,2,3,4,5], [1,2,3,4,5], color='darkslateblue')\n\n# Create a scatter plot with slateblue dots\nax.scatter([1,2,3,4,5], [1,2,3,4,5], color='slateblue')\n\n# Create a scatter plot with royalblue dots\nax.scatter([1,2,3,4,5], [1,2,3,4,5], color='royalblue')\n\n# Create a scatter plot with cornflowerblue dots\nax.scatter([1,2,3,4,5], [1,2,3,4,5], color='cornflowerblue')\n\n# Create a scatter plot with dodgerblue dots\nax.scatter([1,2,3,4,5], [1,2,3,4,5], color='dodgerblue')\n\n# Create a scatter plot with deepskyblue dots\nax.scatter([1,2,3,4,5], [1,2,3,4,5], color='deepskyblue')\n\n# Create a scatter plot with lightskyblue dots\nax.scatter([1,2,3,4,5], [1,2,3,4,5], color='lightskyblue')\n\n# Create a scatter plot with skyblue dots\nax.scatter([1,2,3,4,5], [1,2,3,4,5], color='skyblue')\n\n# Create a scatter plot with lightblue dots\nax.scatter([1,2,3,4,5], [1,2,3,4,5], color='lightblue')\n\n# Create a scatter plot with powderblue dots\nax.scatter([1,2,3,4,5], [1,2,3,4,5], color='powderblue')\n\n# Create a scatter plot with paleturquoise dots\nax.scatter([1,2,3,4,5], [1,2,3,4,5], color='paleturquoise')\n\n# Create a scatter plot with aquamarine dots\nax.scatter([1,2,3,4,5], [1,2,3,4,5], color='aquamarine')\n\n# Create a scatter plot with turquoise dots\nax.scatter([1,2,3,4,5], [1,2,3,4,5], color='turquoise')\n\n# Create a scatter plot with cadetblue dots\nax.scatter([1,2,3,4,5], [1,2,3,4,5], color='cadetblue')\n\n# Create a scatter plot with steelblue dots\nax.scatter([1,2,3,4,5], [1,2,3,4,5], color='steelblue')\n\n# Create a scatter plot with lightsteelblue dots\nax.scatter([1,2,3,4,5], [1,2,3,4,5], color='lightsteelblue')\n\n# Create a scatter plot with skyblue dots\nax.scatter([1,2,3,4,5], [1,2,3,4,5], color='skyblue')\n\n# Create a scatter plot with lightskyblue dots\nax.scatter([1,2,3,4,5], [1,2,3,4,5], color='lightskyblue')\n\n# Create a scatter plot with deepskyblue dots\nax.scatter([1,2,3,4,5], [1,2,3,4,5], color='deepskyblue')\n\n# Create a scatter plot with dodgerblue dots\nax.scatter([1,2,3,4,5], [1,2,3,4,5], color='dodgerblue')\n\n# Create a scatter plot with cornflowerblue dots\nax.scatter([1,2,3,4,5], [1,2,3,4,5], color='cornflowerblue')\n\n# Create a scatter plot with royalblue dots\nax.scatter([1,2,3,4,5], [1,2,3,4,5], color='royalblue')\n\n# Create a scatter plot with slateblue dots\nax.scatter([1,2,3,4,5], [1,2,3,4,5], color='slateblue')\n\n# Create a scatter plot with darkslateblue dots\nax.scatter([1,2,3,4,5], [1,2,3,4,5], color='darkslateblue')\n\n# Create a scatter plot with blueviolet dots\nax.scatter([1,2,3,4,5], [1,2,3,4,5], color='blueviolet')\n\n# Create a scatter plot with darkviolet dots\nax.scatter([1,2,3,4,5], [1,2,3,4,5], color='darkviolet')\n\n# Create a scatter plot with purple dots\nax.scatter([1,2,3,4,5], [1,2,3,4,5], color='purple')\n\n# Create a scatter plot with rebeccapurple dots\nax.scatter([1,2,3,4,5], [1,2,3,4,5], color='rebeccapurple')\n\n# Create a scatter plot with mediumvioletred dots\nax.scatter([1,2,3,4,5], [1,2,3,4,5], color='mediumvioletred')\n\n# Create a scatter plot with darkviolet dots\nax.scatter([1,2,3,4,5], [1,2,3,4,5], color='darkviolet')\n\n# Create a scatter plot with blueviolet dots\nax.scatter([1,2,3,4,5], [1,2,3,4,5], color='blueviolet')\n\n# Create a scatter plot with darkslateblue dots\nax.scatter([1,2,3,4,5], [1,2,3,4,5], color='darkslateblue')\n\n# Create a scatter plot with slateblue dots\nax.scatter([1,2,3,4,5], [1,2,3,4,5], color='slateblue')\n\n# Create a scatter plot with royalblue dots\nax.scatter([1,2,3,4,5], [1,2,3,4,5], color='royalblue')\n\n# Create a scatter plot with cornflowerblue dots\nax.scatter([1,2,3,4,5], [1,2,3,4,5], color='cornflowerblue')\n\n# Create a scatter plot with dodgerblue dots\nax.scatter([1,2,3,4,5], [1,2,3,4,5], color='dodgerblue')\n\n# Create a scatter plot with deepskyblue dots\nax.scatter([1,2,3,4,5], [1,2,3,4,5], color='deepskyblue')\n\n# Create a scatter plot with lightskyblue dots\nax.scatter([1,2,3,4,5], [1,2,3,4,5], color='lightskyblue')\n\n# Create a scatter plot with skyblue dots\nax.scatter([1,2,3,4,5], [1,2,3,4,5], color='skyblue')\n\n# Create a scatter plot with lightblue dots\nax.scatter(["}
{"file": "dataset/ori_500/scatter_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 3.0))\n\n# Set the title of the plot\nax.set_title('Number of params. vs. NMAE on QM9')\n\n# Set the x-axis label\nax.set_xlabel('Number of parameters (M)')\n\n# Set the y-axis label\nax.set_ylabel('NMAE')\n\n# Create a scatter plot with the data\nax.scatter([1, 2, 3, 4, 5, 6], [10, 15, 20, 25, 30, 35], color='blue')\n\n# Add a vertical line at x=3\nax.axvline(x=3, color='black', linestyle='--')\n\n# Add a horizontal line at y=20\nax.axhline(y=20, color='black', linestyle='--')\n\n# Add a rectangle at the bottom left corner\nax.add_patch(plt.Rectangle((0.1, 0.1), 0.2, 0.2, color='red'))\n\n# Add a circle at the top right corner\ncircle = plt.Circle((0.9, 0.9), 0.1, color='green')\nax.add_artist(circle)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Set the title of the plot\nax.set_title('Legend')\n\n# Set the x-axis label\nax.set_xlabel('PC1')\n\n# Set the y-axis label\nax.set_ylabel('PC2')\n\n# Set the x-axis limits\nax.set_xlim(-0.4, 0.4)\n\n# Set the y-axis limits\nax.set_ylim(-0.2, 0.4)\n\n# Create a scatter plot with random data\nax.scatter([0.1, 0.2, 0.3], [0.1, 0.2, 0.3], color='blue', label='ar')\nax.scatter([0.1, 0.2, 0.3], [0.1, 0.2, 0.3], color='pink', label='de')\nax.scatter([0.1, 0.2, 0.3], [0.1, 0.2, 0.3], color='yellow', label='fr')\nax.scatter([0.1, 0.2, 0.3], [0.1, 0.2, 0.3], color='green', label='he')\n\n# Show the legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(7.0, 10.0))\n\n# Set the title of the plot\nax.set_title('DE')\n\n# Set the x-axis label\nax.set_xlabel('CFA Similarity')\n\n# Set the y-axis label\nax.set_ylabel('MSE')\n\n# Create a scatter plot with random data\nax.scatter([0.5, 0.6, 0.7, 0.8, 0.9], [0.1, 0.2, 0.3, 0.4, 0.5], color='red')\n\n# Create a legend\nax.legend(['iTrm-All', 'iTrm-En', 'PatchTST', 'TiDE', 'TimeXer'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/tree_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(12.0, 8.0))\n\n# Set the background color of the plot\nax.set_facecolor('lightblue')\n\n# Create a rectangle for the first website\nrect1 = plt.Rectangle((0.1, 0.7), 0.3, 0.2, color='lightgreen')\nax.add_patch(rect1)\n\n# Create a rectangle for the second website\nrect2 = plt.Rectangle((0.5, 0.7), 0.3, 0.2, color='lightsalmon')\nax.add_patch(rect2)\n\n# Create a rectangle for the third website\nrect3 = plt.Rectangle((0.1, 0.4), 0.3, 0.2, color='lightyellow')\nax.add_patch(rect3)\n\n# Create a rectangle for the fourth website\nrect4 = plt.Rectangle((0.5, 0.4), 0.3, 0.2, color='lightblue')\nax.add_patch(rect4)\n\n# Create a rectangle for the fifth website\nrect5 = plt.Rectangle((0.1, 0.1), 0.3, 0.2, color='lightcoral')\nax.add_patch(rect5)\n\n# Create a rectangle for the sixth website\nrect6 = plt.Rectangle((0.5, 0.1), 0.3, 0.2, color='lightgrey')\nax.add_patch(rect6)\n\n# Add text to each rectangle\nax.text(0.2, 0.8, 'physicsforums.com\\n18.42%', fontsize=12)\nax.text(0.6, 0.8, 'gmatclub.com\\n6.26%', fontsize=12)\nax.text(0.2, 0.5, 'stackexchange.com\\n30.6%', fontsize=12)\nax.text(0.6, 0.5, 'mathoverflow.net\\n10.91%', fontsize=12)\nax.text(0.2, 0.2, 'mathhelpboards.com\\n6.15%', fontsize=12)\nax.text(0.6, 0.2, 'proofwiki.org\\n8.54%', fontsize=12)\n\n# Set the limits of the plot\nax.set_xlim([0, 1])\nax.set_ylim([0, 1])\n\n# Remove the axes\nax.axis('off')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/tree_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(12.0, 8.0))\n\n# Set the background color of the plot\nax.set_facecolor('#f5f5f5')\n\n# Create a bar chart with the data\nax.bar(['Java', 'Python', 'JavaScript', 'C++'], [10, 20, 27, 23], color='#9c27b0')\n\n# Add labels to the bars\nfor i, v in enumerate([10, 20, 27, 23]):\n    ax.text(i, v + 1, str(v) + '%', ha='center', va='bottom')\n\n# Set the title of the plot\nax.set_title('Programming Language Popularity')\n\n# Set the x-axis label\nax.set_xlabel('Programming Languages')\n\n# Set the y-axis label\nax.set_ylabel('Popularity (%)')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/tree_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(12.0, 8.0))\n\n# Create a rectangle for the first product\nrect1 = plt.Rectangle((0.1, 0.7), 0.3, 0.2, color='cyan')\nax.add_patch(rect1)\nax.text(0.2, 0.8, 'Adidas\\n13.42%', ha='center', va='center')\n\n# Create a rectangle for the second product\nrect2 = plt.Rectangle((0.5, 0.7), 0.3, 0.2, color='orange')\nax.add_patch(rect2)\nax.text(0.6, 0.8, 'Under Armour\\n8.54%', ha='center', va='center')\n\n# Create a rectangle for the third product\nrect3 = plt.Rectangle((0.9, 0.7), 0.3, 0.2, color='pink')\nax.add_patch(rect3)\nax.text(1.0, 0.8, 'New Balance\\n6.26%', ha='center', va='center')\n\n# Create a rectangle for the fourth product\nrect4 = plt.Rectangle((0.1, 0.3), 0.3, 0.2, color='lightblue')\nax.add_patch(rect4)\nax.text(0.2, 0.4, 'Nike\\n30.6%', ha='center', va='center')\n\n# Create a rectangle for the fifth product\nrect5 = plt.Rectangle((0.5, 0.3), 0.3, 0.2, color='yellow')\nax.add_patch(rect5)\nax.text(0.6, 0.4, 'Reebok\\n10.91%', ha='center', va='center')\n\n# Create a rectangle for the sixth product\nrect6 = plt.Rectangle((0.9, 0.3), 0.3, 0.2, color='lightgreen')\nax.add_patch(rect6)\nax.text(1.0, 0.4, 'Puma\\n14.21%', ha='center', va='center')\n\n# Set the limits of the plot\nax.set_xlim(0, 1)\nax.set_ylim(0, 1)\n\n# Remove the axes\nax.axis('off')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/tree_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(4.0, 6.0))\n\n# Set the background color of the plot\nax.set_facecolor('#FFDAB9')\n\n# Create a bar chart with the data\nax.bar(['A', 'B', 'C'], [50, 15, 20], color='blue')\n\n# Set the title of the plot\nax.set_title('Bar Chart')\n\n# Set the x-axis label\nax.set_xlabel('Categories')\n\n# Set the y-axis label\nax.set_ylabel('Values')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/tree_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Set the background color of the plot\nax.set_facecolor('white')\n\n# Create a rectangle for the first bar chart\nrect1 = plt.Rectangle((0.1, 0.7), 0.8, 0.2, color='yellow')\nax.add_patch(rect1)\n\n# Create a rectangle for the second bar chart\nrect2 = plt.Rectangle((0.1, 0.4), 0.8, 0.2, color='purple')\nax.add_patch(rect2)\n\n# Create a rectangle for the third bar chart\nrect3 = plt.Rectangle((0.1, 0.1), 0.8, 0.2, color='pink')\nax.add_patch(rect3)\n\n# Create a rectangle for the fourth bar chart\nrect4 = plt.Rectangle((0.5, 0.7), 0.4, 0.2, color='cyan')\nax.add_patch(rect4)\n\n# Create a rectangle for the fifth bar chart\nrect5 = plt.Rectangle((0.5, 0.4), 0.4, 0.2, color='lightblue')\nax.add_patch(rect5)\n\n# Create a rectangle for the sixth bar chart\nrect6 = plt.Rectangle((0.5, 0.1), 0.4, 0.2, color='lightgreen')\nax.add_patch(rect6)\n\n# Add text labels to each rectangle\nax.text(0.1, 0.85, 'European 15%', fontsize=12)\nax.text(0.1, 0.55, 'Australian 18%', fontsize=12)\nax.text(0.1, 0.25, 'Asian 25%', fontsize=12)\nax.text(0.6, 0.85, 'South American 10%', fontsize=12)\nax.text(0.6, 0.55, 'African 12%', fontsize=12)\nax.text(0.6, 0.25, 'North American 20%', fontsize=12)\n\n# Set the limits of the x and y axes\nax.set_xlim(0, 1)\nax.set_ylim(0, 1)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/violin_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 7.0))\n\n# Set the title of the plot\nax.set_title('Llama2 Performance')\n\n# Set the x-axis label\nax.set_xlabel('Number of examples')\n\n# Set the y-axis label\nax.set_ylabel('logP(CL)')\n\n# Create a scatter plot\nx = np.arange(1, 6)\ny = np.random.rand(5) * 6 + 1\nax.scatter(x, y)\n\n# Add a legend\nax.legend(['Llama2', 'Llama2 (In-Chat)'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/violin_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Comparison of Scores with and without Memory')\n\n# Create a bar chart\nax.bar(['Efficiency', 'Comfort', 'Safety'], [0.8, 0.7, 0.9], color='orange')\nax.bar(['Efficiency', 'Comfort', 'Safety'], [0.5, 0.4, 0.6], color='blue')\n\n# Add stars to the bars\nfor i in range(3):\n    ax.text(i, 0.8, '*', ha='center', va='bottom')\n    ax.text(i, 0.7, '*', ha='center', va='bottom')\n    ax.text(i, 0.6, '*', ha='center', va='bottom')\n    ax.text(i, 0.5, '*', ha='center', va='bottom')\n    ax.text(i, 0.4, '*', ha='center', va='bottom')\n    ax.text(i, 0.3, '*', ha='center', va='bottom')\n\n# Add a legend\nax.legend(['Without Memory', 'With Memory'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/violin_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Define the data for the bar chart\ncategories = ['Efficiency', 'Comfort', 'Safety']\nvalues = [0.5, 0.7, 0.8]\ncolors = ['pink', 'lightblue']\n\n# Create a bar chart\nax.bar(categories, values, color=colors)\n\n# Add labels and title\nax.set_xlabel('Categories')\nax.set_ylabel('Score')\nax.set_title('Car Comparison')\n\n# Add a legend\nax.legend(['Without Memory', 'With Memory'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/violin_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 4.0))\n\n# Set the title of the plot\nax.set_title('Scoring Evaluation')\n\n# Create a bar chart\nax.bar([1, 2, 3, 4, 5], [0.9, 0.8, 0.7, 0.6, 0.5], color='green')\n\n# Set the x-axis label\nax.set_xlabel('Player')\n\n# Set the y-axis label\nax.set_ylabel('Score')\n\n# Create a second subplot\nax2 = fig.add_subplot(122)\n\n# Set the title of the plot\nax2.set_title('Pair Comparison')\n\n# Create a bar chart\nax2.bar(['Winner', 'Losser Preference', 'Tie'], [0.95, 0.85, 0.75], color='orange')\n\n# Set the x-axis label\nax2.set_xlabel('Pair')\n\n# Set the y-axis label\nax2.set_ylabel('Score')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/violin_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Define the data for the plots\ndata = {\n    'jTrans': [0.7, 0.8, 0.9, 0.7, 0.6],\n    'PalmTree': [0.8, 0.9, 0.8, 0.7, 0.6],\n    'CLAP': [0.9, 0.8, 0.7, 0.6, 0.5]\n}\n\n# Plot the data\nfor key, value in data.items():\n    ax.plot(value, label=key)\n\n# Set the title and labels\nax.set_title('Accuracy of Different Models')\nax.set_xlabel('Time')\nax.set_ylabel('Accuracy')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/violin_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Define the data for the plots\nx = np.linspace(0, 10, 100)\ny1 = np.sin(x)\ny2 = np.cos(x)\ny3 = np.tan(x)\n\n# Plot the data\nax.plot(x, y1, 'b-', label='Teacher-Style')\nax.plot(x, y2, 'o-', label='Standardize')\n\n# Add stars at specific points\nax.plot([2, 4, 6], [0.5, 0.7, 0.9], 'y*', markersize=10)\n\n# Set the title and labels\nax.set_title('Student Performance Comparison')\nax.set_xlabel('Time (hours)')\nax.set_ylabel('Performance Score')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/violin_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Create a rectangle for the first product\nrect1 = plt.Rectangle((0.25, 0.25), 0.5, 0.5, color='pink', edgecolor='black')\nax.add_patch(rect1)\n\n# Create a rectangle for the second product\nrect2 = plt.Rectangle((0.75, 0.25), 0.5, 0.5, color='blue', edgecolor='black')\nax.add_patch(rect2)\n\n# Add text labels\nax.text(0.35, 0.85, 'Vanilla', fontsize=12)\nax.text(0.85, 0.85, 'CoT', fontsize=12)\n\n# Set the limits of the plot\nax.set_xlim(0, 1)\nax.set_ylim(0, 1)\n\n# Set the aspect ratio of the plot\nax.set_aspect('equal')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/violin_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Set the title of the plot\nax.set_title('% Decrease in Test MSE vs. FLAM-GL')\n\n# Create a bar chart with the data\nax.bar([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [163, 201, 176, 176, 159, 159, 159, 159, 159, 159], color='skyblue')\nax.bar([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [97, 97, 95, 95, 95, 95, 95, 95, 95, 95], color='orange')\n\n# Set the x-axis label\nax.set_xlabel('Number of Features')\n\n# Set the y-axis label\nax.set_ylabel('% Decrease')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/violin_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Define the data\nx = np.array([0.88, 0.85, 0.79, 0.67, 0.57])\ny = np.array([0.18, 0.19, 0.19, 0.18, 0.16])\n\n# Plot the data\nax.plot(x, y, 'ro-')\n\n# Set the title and labels\nax.set_title('Decimated Sampling Rate')\nax.set_xlabel('KCC')\nax.set_ylabel('Pearson R')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/violin_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis for the first subplot\nfig, ax = plt.subplots(figsize=(12, 8))\nax.set_title('Distribution of Grades: Class 1')\nax.set_xlabel('Grades')\nax.set_ylabel('Number of Students')\n\n# Create a bar chart with random data\ngrades = ['A', 'B', 'C', 'D', 'F']\nnum_students = [np.random.randint(50, 100) for _ in range(len(grades))]\nax.bar(grades, num_students, color='blue')\n\n# Add a legend\nax.legend(['Boys', 'Girls'])\n\n# Create a second subplot\nfig, ax = plt.subplots(figsize=(12, 8))\nax.set_title('Distribution of Grades: Class 2')\nax.set_xlabel('Grades')\nax.set_ylabel('Number of Students')\n\n# Create a pie chart with random data\nnum_boys = np.random.randint(40, 90)\nnum_girls = np.random.randint(60, 110)\nax.pie([num_boys, num_girls], labels=['Boys', 'Girls'], colors=['blue', 'pink'])\n\n# Add a legend\nax.legend(['Boys', 'Girls'])\n\n# Create a third subplot\nfig, ax = plt.subplots(figsize=(12, 8))\nax.set_title('Distribution of Grades: Class 3')\nax.set_xlabel('Grades')\nax.set_ylabel('Number of Students')\n\n# Create a scatter plot with random data\nx = np.random.randint(40, 90, 10)\ny = np.random.randint(60, 110, 10)\nax.scatter(x, y, color='blue')\n\n# Add a legend\nax.legend(['Boys', 'Girls'])\n\n# Create a fourth subplot\nfig, ax = plt.subplots(figsize=(12, 8))\nax.set_title('Distribution of Grades: Class 4')\nax.set_xlabel('Grades')\nax.set_ylabel('Number of Students')\n\n# Create a histogram with random data\ngrades = np.random.randint(40, 90, 100)\nax.hist(grades, bins=10, color='blue')\n\n# Add a legend\nax.legend(['Boys', 'Girls'])\nplt.show()\n```"}
