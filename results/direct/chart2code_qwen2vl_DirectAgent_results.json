{"file": "dataset/ori_500/3d_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfrom matplotlib import cm\nfrom matplotlib.ticker import LinearLocator\n\nfrom mpl_toolkits.mplot3d import Axes3D\n\n# Fixing random state for reproducibility\nnp.random.seed(19680801)\n\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\n\n# Make data.\nX = np.arange(-5, 5, 0.25)\nY = np.arange(-5, 5, 0.2)\nX, Y = np.meshgrid(X, Y)\nR = np.sqrt(X**2 + Y**2)\nZ = np.sin(R)\n\n# Plot the surface.\nsurf = ax.plot_surface(X, Y, Z, cmap=cm.coolwarm,\n                       linewidth=0, antialiased=False)\n\n# Customize the z axis.\nax.set_zlim3d(-1.01, 1.01)\nax.zaxis.set_major_locator(LinearLocator(10))\n# A StrMethodFormatter is used automatically\nax.zaxis.set_major_formatter('{x:.02f}')\n\n# Add a color bar which maps values to colors.\nfig.colorbar(surf, shrink=0.5, aspect=5)\n\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nnp.random.seed(19680801)\n\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\n\nx = np.arange(-5, 5, 1)\ny = x\nz = np.sqrt(x**2 + y**2)\n\nax.plot_surface(x, y, z)\nax.set_xlabel('Height')\nax.set_ylabel('Width')\nax.set_zlabel('Count')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nimport numpy as np\n\n# Fixing random state for reproducibility\nnp.random.seed(19680801)\n\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\n\n# Make up some data in the shape of the desired manifold\nt = np.linspace(0, 2 * np.pi, 100)\nx = np.cos(t)\ny = np.sin(t)\nz = np.random.normal(size=len(t))\n\n# Plot the data using wireframe\nax.plot_wireframe(x, y, z, color=\"b\")\n\n# Plot the data using surf\nax.plot_surface(x, y, z, alpha=.5, color=\"r\")\n\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\n\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\n\n# Fixing random state for reproducibility\nnp.random.seed(19680801)\n\nx = np.random.rand(10)\ny = np.random.rand(10)\nz = np.random.rand(10)\n\nax.scatter(x, y, z, c='r', marker='o')\n\nax.set_xlabel('Temperature (\u00b0C)')\nax.set_ylabel('Pressure (kPa)')\nax.set_zlabel('Volume (L)')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\n\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\n\nx = [2010, 2012, 2014, 2016, 2018]\ny = ['Private Schools', 'Public Schools']\nz = [0.5, 0.3, 0.1, 0.4, 0.7]\n\nax.bar(x, z, y, zdir='y', align='edge')\n\nax.set_xlabel('Year')\nax.set_ylabel('Type')\nax.set_zlabel('Student to Teacher Ratio')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfrom matplotlib import cm\nfrom mpl_toolkits.mplot3d import Axes3D\n\n# Fixing random state for reproducibility\nnp.random.seed(19680801)\n\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\n\nn = 100\nx = np.linspace(0, 2, n)\ny = np.linspace(0, 1, n)\nX, Y = np.meshgrid(x, y)\nZ1 = np.exp(-4 * (X - 1)**2 - 4 * Y)\nZ2 = np.exp(-(X - 2)**2 - (Y - 2)**2)\nB = np.minimum(Z1, Z2)\n\nax.plot_surface(X, Y, B, rstride=1, cstride=1,\n                cmap=cm.viridis, edgecolor='none')\nax.set_zlim(0, 0.125)\n\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\ndata = np.random.rand(3, 4)\n\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\n\nx = np.arange(-5, 5, 1)\ny = np.arange(-5, 5, 1)\nx, y = np.meshgrid(x, y)\nz = x**2 + y**2\n\nax.plot_surface(x, y, z, rstride=1, cstride=1, cmap='viridis', edgecolor='none')\nax.set_title('An example surface plot')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfrom matplotlib import cm\n\n# Fixing random state for reproducibility\nnp.random.seed(19680801)\n\n# Compute some 3D data that depends on two parameters, x and y\nx = np.linspace(-3, 3, 25)\ny = np.linspace(-3, 3, 25)\nX, Y = np.meshgrid(x, y)\nZ1 = np.exp(-X**2 - Y**2)\nZ2 = np.exp(-(X - 1)**2 - (Y - 1)**2)\nZ = (Z1 - Z2) * 2\n\n# This is just an example; in your code, create the colormap once,\n# then use it every time you need a new colormap.\ncmap = cm.get_cmap('viridis')\n\n# Create a figure with 2 subplots\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(9, 5))\n\n# Plot the surface in both axes\nsurf1 = ax1.plot_surface(X, Y, Z, cmap=cmap, linewidth=0, antialiased=False)\nsurf2 = ax2.plot_surface(X, Y, Z, rstride=8, cstride=8, cmap=cmap,\n                         linewidth=0, antialiased=False)\n\n# Add a color bar which maps values to colors.\nfig.colorbar(surf1, shrink=0.5, aspect=5)\nfig.colorbar(surf2, shrink=0.5, aspect=5)\n\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\n\n# Make data.\nX = np.arange(1, 7)\nY = np.arange(1, 4)\nX, Y = np.meshgrid(X, Y)\nZ = np.sin(X) + np.cos(Y)\n\n# Plot the surface.\nsurf = ax.plot_surface(X, Y, Z, cmap='viridis', edgecolor='none')\n\n# Add a color bar which maps values to colors.\nfig.colorbar(surf, shrink=0.5, aspect=5)\n\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfrom matplotlib import cm\n\n# Fixing random state for reproducibility\nnp.random.seed(19680801)\n\nfig = plt.figure()\nax = fig.add_subplot(projection='3d')\n\nX = np.arange(-50, 150, 1)\nY = np.arange(-50, 150, 1)\nX, Y = np.meshgrid(X, Y)\nZ1 = np.sqrt(X**2 + Y**2)\nZ2 = np.sqrt((X - 75)**2 + (Y - 75)**2)\nZ = np.where(Z1 < Z2, Z1, Z2)\n\nsurf = ax.plot_surface(X, Y, Z, cmap=cm.coolwarm,\n                       linewidth=0, antialiased=False)\n\nax.set_title('Origin')\nax.set_xlabel('m')\nax.set_ylabel('n')\nax.set_zlabel('FREEDOM')\n\nplt.show()\n\nfig = plt.figure()\nax = fig.add_subplot(projection='3d')\n\nX = np.arange(-50, 150, 1)\nY = np.arange(-50, 150, 1)\nX, Y = np.meshgrid(X, Y)\nZ1 = np.sqrt(X**2 + Y**2)\nZ2 = np.sqrt((X - 100)**2 + (Y - 100)**2)\nZ = np.where(Z1 < Z2, Z1, Z2)\n\nsurf = ax.plot_surface(X, Y, Z, cmap=cm.coolwarm,\n                       linewidth=0, antialiased=False)\n\nax.set_title('MG (ours)')\nax.set_xlabel('m')\nax.set_ylabel('n')\nax.set_zlabel('FREEDOM')\n\nplt.show()\n\nfig = plt.figure()\nax = fig.add_subplot(projection='3d')\n\nX = np.arange(-50, 150, 1)\nY = np.arange(-50, 150, 1)\nX, Y = np.meshgrid(X, Y)\nZ1 = np.sqrt(X**2 + Y**2)\nZ2 = np.sqrt((X - 100)**2 + (Y - 100)**2)\nZ = np.where(Z1 < Z2, Z1, Z2)\n\nsurf = ax.plot_surface(X, Y, Z, cmap=cm.coolwarm,\n                       linewidth=0, antialiased=False)\n\nax.set_title('Origin')\nax.set_xlabel('m')\nax.set_ylabel('n')\nax.set_zlabel('BM3')\n\nplt.show()\n\nfig = plt.figure()\nax = fig.add_subplot(projection='3d')\n\nX = np.arange(-50, 150, 1)\nY = np.arange(-50, 150, 1)\nX, Y = np.meshgrid(X, Y)\nZ1 = np.sqrt(X**2 + Y**2)\nZ2 = np.sqrt((X - 100)**2 + (Y - 100)**2)\nZ = np.where(Z1 < Z2, Z1, Z2)\n\nsurf = ax.plot_surface(X, Y, Z, cmap=cm.coolwarm,\n                       linewidth=0, antialiased=False)\n\nax.set_title('MG (ours)')\nax.set_xlabel('m')\nax.set_ylabel('n')\nax.set_zlabel('BM3')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfrom matplotlib import cm\nfrom mpl_toolkits.mplot3d import Axes3D\n\n# Fixing random state for reproducibility\nnp.random.seed(19680801)\n\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\n\nn_angles = 36\nn_radii = 8\nmin_radius = 0.7\nradii = np.linspace(min_radius, 1.0, n_radii)\n\n# Compute corresponding radius and angle values\nangles = np.linspace(0, 2 * np.pi, n_angles, endpoint=False)\nangles = np.repeat(angles[..., np.newaxis], n_radii, axis=1)\nangles[:, 1::2] += np.pi / n_angles\n\nx = (1 + radii * np.cos(angles)) * np.cos(2 * angles)\ny = (1 + radii * np.cos(angles)) * np.sin(2 * angles)\nz = radii * np.sin(angles)\n\nsc = ax.scatter(x, y, z, c=z, cmap=cm.coolwarm)\nax.set_zlim(0, 1)\n\nfig.colorbar(sc, ax=ax)\n\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfrom matplotlib import cm\n\n# Fixing random state for reproducibility\nnp.random.seed(19680801)\n\nn = 12\nX = np.linspace(-4, 4, n)\nY = np.linspace(-4, 4, n * 2)\nX, Y = np.meshgrid(X, Y)\n\nZ1 = np.exp(-X**2 - Y**2)\nZ2 = np.exp(-(X - 1)**2 - (Y - 1)**2)\nQx = np.exp(-(X + 1)**2 - Y**2)\nQz = np.exp(-(X - 2)**2 - (Y - 2)**2)\nZ = (Z1 + Z2 + Qx + Qz) / 4.\n\nfig, ax = plt.subplots(subplot_kw={\"projection\": \"3d\"})\n\nsurf = ax.plot_surface(X, Y, Z, cmap=cm.coolwarm,\n                       linewidth=0, antialiased=False)\n\nfig.colorbar(surf, shrink=0.5, aspect=5)\n\nax.set_xlabel(\"Time\")\nax.set_ylabel(\"Bus\")\nax.set_zlabel(\"\")\n\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfrom matplotlib import cm\n\n# Fixing random state for reproducibility\nnp.random.seed(19680801)\n\nN = 12\ndata2d = np.random.rand(N, N)\ndata2d[3, 3] = 12\ndata2d[7, 5] = 12\ncmap = cm.get_cmap('PRGn', 13)\n\nfig, ax = plt.subplots()\nim = ax.imshow(data2d, cmap=cmap)\n\nax.set_title(\"Colorbar with a discrete colormap\")\n\nfig.colorbar(im, ax=ax)\n\n# We can access any property of the colorbar by name or by its label\ncbar = fig.colorbar(im, ax=ax, label=\"Colorbar Label\")\ncbar.ax.set_ylabel('Colorbar Label', rotation=-90, va=\"bottom\")\n\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfrom mpl_toolkits.mplot3d import Axes3D\n\n# Fixing random state for reproducibility\nnp.random.seed(19680801)\n\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\n\nn = 100\nr = 2 * np.pi * np.random.rand(n)\ntheta = 2 * np.pi * np.random.rand(n)\nz = np.sqrt(r) * np.cos(theta)\nx = np.sqrt(r) * np.sin(theta)\ny = z / 5.\n\nax.scatter(x, y, z, c='red', marker='o')\n\nr = 2 * np.pi * np.random.rand(n)\ntheta = 2 * np.pi * np.random.rand(n)\nz = -np.sqrt(r) * np.cos(theta)\nx = np.sqrt(r) * np.sin(theta)\ny = z / 5.\n\nax.scatter(x, y, z, c='blue', marker='^')\n\nax.set_xlabel('Income')\nax.set_ylabel('Age')\nax.set_zlabel('Debt')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\n\nt = np.arange(0.01, 10.0, 0.01)\ns = np.exp(-t)\nx, y = np.meshgrid(t, s)\n\nax.plot(x, y, zs=0, zdir='zaxis', label=' zs=0 ')\nax.plot(x, y, zs=1, zdir='zdir', label=' zs=1 ')\nax.legend()\n\nax.set_xlabel('Temperature (\u00b0C)')\nax.set_ylabel('Time (s)')\nax.set_zlabel('Depth (m)')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfrom scipy.stats import norm\n\n# example data\nmu = 200\nsigma = 25\nx = mu + sigma * np.random.randn(10000)\nx = x[(x > 100) & (x < 300)]\n\n# fit to distribution\nf, ax = plt.subplots(2, 1, layout='constrained')\nax[0].hist(x, bins=75, density=True)\nax[0].set_title('Histogram of data')\nax[0].set_xlabel('LR Test')\nax[0].set_ylabel('Density')\n\n# fit to normal and plot\nmu_est, sigma_est = norm.fit(x)\npdf = norm.pdf(x, mu_est, sigma_est)\nax[1].plot(x, pdf, 'r', label=f'Normal fit: $\\mu$={mu_est:.2f}, $\\sigma$={sigma_est:.2f}')\nax[1].legend()\nax[1].set_title('Fitted Normal Distribution')\nax[1].set_xlabel('LR Test')\nax[1].set_ylabel('Density')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nx = np.random.uniform(150, 400, 20)\ny = np.random.uniform(-6, -2, 20)\ns = np.random.uniform(10, 100, 20)\n\nfig, ax = plt.subplots()\nax.scatter(x, y, s, c='C0', alpha=0.5, label='Low')\nax.scatter(x, y + 1, s, c='C1', alpha=0.5, label='Middle')\nax.scatter(x, y + 2, s, c='C2', alpha=0.5, label='High')\n\nax.set_xscale('log')\nax.set_yscale('log')\nax.set_xlim(150, 400)\nax.set_ylim(-6, -2)\nax.set_xlabel('Average Tracked ORB Feature Number')\nax.set_ylabel('Log (ATE RMSE)')\nax.legend()\n\n# add correlation line\nslope, intercept, r_value, p_value, std_err = np.polyfit(np.log(x), np.log(y), 1)\nax.plot(np.log(x), slope*np.log(x)+intercept, 'k-')\nax.text(350, -3.5, f'Correlation: {r_value:.2f}')\n\n# add shaded area\nax.fill_between(np.log(x), (slope+std_err)*np.log(x)+intercept, (slope-std_err)*np.log(x)+intercept, color='gray', alpha=0.5)\n\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nx = np.logspace(-3, 0.5, 10)\ny = np.random.normal(size=len(x))\n\n# plot with log scaling on both axes\nplt.xscale('log')\nplt.yscale('log')\n\n# plot with linear scaling\nplt.xscale('linear')\nplt.yscale('linear')\n\n# plot with log scaling on the x axis and linear scaling on the y axis\nplt.xscale('log')\nplt.yscale('linear')\n\n# plot with linear scaling on the x axis and log scaling on the y axis\nplt.xscale('linear')\nplt.yscale('log')\n\n# plot with log scaling on both axes\nplt.xscale('log')\nplt.yscale('log')\n\n# plot with log scaling on the x axis and linear scaling on the y axis\nplt.xscale('log')\nplt.yscale('linear')\n\n# plot with linear scaling on the x axis and log scaling on the y axis\nplt.xscale('linear')\nplt.yscale('log')\n\n# plot with log scaling on both axes\nplt.xscale('log')\nplt.yscale('log')\n\n# plot with log scaling on the x axis and linear scaling on the y axis\nplt.xscale('log')\nplt.yscale('linear')\n\n# plot with linear scaling on the x axis and log scaling on the y axis\nplt.xscale('linear')\nplt.yscale('log')\n\n# plot with log scaling on both axes\nplt.xscale('log')\nplt.yscale('log')\n\n# plot with log scaling on the x axis and linear scaling on the y axis\nplt.xscale('log')\nplt.yscale('linear')\n\n# plot with linear scaling on the x axis and log scaling on the y axis\nplt.xscale('linear')\nplt.yscale('log')\n\n# plot with log scaling on both axes\nplt.xscale('log')\nplt.yscale('log')\n\n# plot with log scaling on the x axis and linear scaling on the y axis\nplt.xscale('log')\nplt.yscale('linear')\n\n# plot with linear scaling on the x axis and log scaling on the y axis\nplt.xscale('linear')\nplt.yscale('log')\n\n# plot with log scaling on both axes\nplt.xscale('log')\nplt.yscale('log')\n\n# plot with log scaling on the x axis and linear scaling on the y axis\nplt.xscale('log')\nplt.yscale('linear')\n\n# plot with linear scaling on the x axis and log scaling on the y axis\nplt.xscale('linear')\nplt.yscale('log')\n\n# plot with log scaling on both axes\nplt.xscale('log')\nplt.yscale('log')\n\n# plot with log scaling on the x axis and linear scaling on the y axis\nplt.xscale('log')\nplt.yscale('linear')\n\n# plot with linear scaling on the x axis and log scaling on the y axis\nplt.xscale('linear')\nplt.yscale('log')\n\n# plot with log scaling on both axes\nplt.xscale('log')\nplt.yscale('log')\n\n# plot with log scaling on the x axis and linear scaling on the y axis\nplt.xscale('log')\nplt.yscale('linear')\n\n# plot with linear scaling on the x axis and log scaling on the y axis\nplt.xscale('linear')\nplt.yscale('log')\n\n# plot with log scaling on both axes\nplt.xscale('log')\nplt.yscale('log')\n\n# plot with log scaling on the x axis and linear scaling on the y axis\nplt.xscale('log')\nplt.yscale('linear')\n\n# plot with linear scaling on the x axis and log scaling on the y axis\nplt.xscale('linear')\nplt.yscale('log')\n\n# plot with log scaling on both axes\nplt.xscale('log')\nplt.yscale('log')\n\n# plot with log scaling on the x axis and linear scaling on the y axis\nplt.xscale('log')\nplt.yscale('linear')\n\n# plot with linear scaling on the x axis and log scaling on the y axis\nplt.xscale('linear')\nplt.yscale('log')\n\n# plot with log scaling on both axes\nplt.xscale('log')\nplt.yscale('log')\n\n# plot with log scaling on the x axis and linear scaling on the y axis\nplt.xscale('log')\nplt.yscale('linear')\n\n# plot with linear scaling on the x axis and log scaling on the y axis\nplt.xscale('linear')\nplt.yscale('log')\n\n# plot with log scaling on both axes\nplt.xscale('log')\nplt.yscale('log')\n\n# plot with log scaling on the x axis and linear scaling on the y axis\nplt.xscale('log')\nplt.yscale('linear')\n\n# plot with linear scaling on the x axis and log scaling on the y axis\nplt.xscale('linear')\nplt.yscale('log')\n\n# plot with log scaling on both axes\nplt.xscale('log')\nplt.yscale('log')\n\n# plot with log scaling on the x axis and linear scaling on the y axis\nplt.xscale('log')\nplt.yscale('linear')\n\n# plot with linear scaling on the x axis and log scaling on the y axis\nplt.xscale('linear')\nplt.yscale('log')\n\n# plot with log scaling on both axes\nplt.xscale('log')\nplt.yscale('log')\n\n# plot with log scaling on the x axis and linear scaling on the y axis\nplt.xscale('log')\nplt.yscale('linear')\n\n# plot with linear scaling on the x axis and log scaling on the y axis\nplt.xscale('linear')\nplt.yscale('log')\n\n# plot with log scaling on both axes\nplt.xscale('log')\nplt.yscale('log')\n\n# plot with log scaling on the x axis and linear scaling on the y axis\nplt.xscale('log')\nplt.yscale('linear')\n\n# plot with linear scaling on the x axis and log scaling on the y axis\nplt.xscale('linear')\nplt.yscale('log')\n\n# plot with log scaling on both axes\nplt.xscale('log')\nplt.yscale('log')\n\n# plot with log scaling on the x axis and linear scaling on the y axis\nplt.xscale('log')\nplt.yscale('linear')\n\n# plot with linear scaling on the x axis and log scaling on the y axis\nplt.xscale('linear')\nplt.yscale('log')\n\n# plot with log scaling on both axes\nplt.xscale('log')\nplt.yscale('log')\n\n# plot with log scaling on the x axis and linear scaling on the y axis\nplt.xscale('log')\nplt.yscale('linear')\n\n# plot with linear scaling on the x axis and log scaling on the y axis\nplt.xscale('linear')\nplt.yscale('log')\n\n# plot with log scaling on both axes\nplt.xscale('log')\nplt.yscale('log')\n\n# plot with log scaling on the x axis and linear scaling on the y axis\nplt.xscale('log')\nplt.yscale('linear')\n\n# plot with linear scaling on the x axis and log scaling on the y axis\nplt.xscale('linear')\nplt.yscale('log')\n\n# plot with log scaling on both axes\nplt.xscale('log')\nplt.yscale('log')\n\n# plot with log scaling on the x axis and linear scaling on the y axis\nplt.xscale('log')\nplt.yscale('linear')\n\n# plot with linear scaling on the x axis and log scaling on the y axis\nplt.xscale('linear')\nplt.yscale('log')\n\n# plot with log scaling on both axes\nplt.xscale('log')\nplt.yscale('log')\n\n# plot with log scaling on the x axis and linear scaling on the y axis\nplt.xscale('log')\nplt.yscale('linear')\n\n# plot with linear scaling on the x axis and log scaling on the y axis\nplt.xscale('linear')\nplt.yscale('log')\n\n# plot with log scaling on both axes\nplt.xscale('log')\nplt.yscale('log')\n\n# plot with log scaling on the x axis and linear scaling on the y axis\nplt.xscale('log')\nplt.yscale('linear')\n\n# plot with linear scaling on the x axis and log scaling on the y axis\nplt.xscale('linear')\nplt.yscale('log')\n\n# plot with log scaling on both axes\nplt.xscale('log')\nplt.yscale('log')\n\n# plot with log scaling on the x axis and linear scaling on the y axis\nplt.xscale('log')\nplt.yscale('linear')\n\n# plot with linear scaling on the x axis and log scaling on the y axis\nplt.xscale('linear')\nplt.yscale('log')\n\n# plot with log scaling on both axes\nplt.xscale('log')\nplt.yscale('log')\n\n# plot with log scaling on the x axis and linear scaling on the y axis\nplt.xscale('log')\nplt.yscale('linear')\n\n# plot with linear scaling on the x axis and log scaling on the y axis\nplt.xscale('linear')\nplt.yscale('log')\n\n# plot with log scaling on both axes\nplt.xscale('log')\nplt.yscale('log')\n\n# plot with log scaling on the x axis and linear scaling on the y axis\nplt.xscale('log')\nplt.yscale('linear')\n\n# plot with linear scaling on the x axis and log scaling on the y axis\nplt.xscale('linear')\nplt.yscale('log')\n\n# plot with log scaling on both axes\nplt.xscale('log')\nplt.yscale('log')\n\n# plot with log scaling on the x axis and linear scaling on the y axis\nplt.xscale('log')\nplt.yscale('linear')\n\n# plot with linear scaling on the x axis and log scaling on the y axis\nplt.xscale('linear')\nplt.yscale('log')\n\n# plot with log scaling on both axes\nplt.xscale('log')\nplt.yscale('log')\n\n# plot with log scaling on the x axis and linear scaling on the y axis\nplt.xscale('log')\nplt.yscale('linear')\n\n# plot with linear scaling on the x axis and log scaling on the y axis\nplt.xscale('linear')\nplt.yscale('log')\n\n# plot with log scaling on both axes\nplt.xscale('log')\nplt.yscale('log')\n\n# plot with log scaling on the x axis and linear scaling on the y axis\nplt.xscale('log')\nplt.yscale('linear')\n\n# plot with linear scaling on the x axis and log scaling on the y axis\nplt.xscale('linear')\nplt.yscale('log')\n\n# plot with log scaling on both axes\nplt.xscale('log')\nplt.yscale('log')\n\n# plot with log scaling on the x axis and linear scaling on the y axis\nplt.xscale('log')\nplt.yscale('linear')\n\n# plot with linear scaling on the x axis and log scaling on the y axis\nplt.xscale('linear')\nplt.yscale('log')\n\n# plot with log scaling on both axes\nplt.xscale('log')\nplt.yscale('log')\n\n# plot with log scaling on the x axis and linear scaling on the y axis\nplt.xscale('log')\nplt.yscale('linear')\n\n# plot with linear scaling on the x axis and log scaling on the y axis\nplt.xscale('linear')\nplt.yscale('log')\n\n# plot with log scaling on both axes\nplt.xscale('log')\nplt.yscale('log')\n\n# plot with log scaling on the x axis and linear scaling on the y axis\nplt.xscale('log')\nplt.yscale('linear')\n\n# plot with linear scaling on the x axis and log scaling on the y axis\nplt.xscale('linear')\nplt.yscale('log')\n\n# plot with log scaling on both axes\nplt.xscale('log')\nplt.yscale('log')\n\n# plot with log scaling on the x axis and linear scaling on the y axis\nplt.xscale('log')\nplt.yscale('linear')\n\n# plot with linear scaling on the x axis and log scaling on the y axis\nplt.xscale('linear')\nplt.yscale('log')\n\n# plot with log scaling on both axes\nplt.xscale('log')\nplt.yscale('log')\n\n# plot with log scaling on the x axis and linear scaling on the y axis\nplt.xscale('log')\nplt.yscale('linear')\n\n# plot with linear scaling on the x axis and log scaling on the y axis\nplt.xscale('linear')\nplt.yscale('log')\n\n# plot with log scaling on both axes\nplt.xscale('log')\nplt.yscale('log')\n\n# plot with log scaling on the x axis and linear scaling on the y axis\nplt.xscale('log')\nplt.yscale('linear')\n\n# plot with linear scaling on the x axis and log scaling on the y axis\nplt.xscale('linear')\nplt.yscale('log')\n\n# plot with log scaling on both axes\nplt.xscale('log')\nplt.yscale('log')\n\n# plot with log scaling on the x axis and linear scaling on the y axis\nplt.xscale('log')\nplt.yscale('linear')\n\n# plot with linear scaling on the x axis and log scaling on the y axis\nplt.xscale('linear')\nplt.yscale('log')\n\n# plot with log scaling on both axes\nplt.xscale('log')\nplt.yscale('log')\n\n# plot with log scaling on the x axis and linear scaling on the y axis\nplt.xscale('log')\nplt.yscale('linear')\n\n# plot with linear scaling on the x axis and log scaling on the y axis\nplt.xscale('linear')\nplt.yscale('log')\n\n# plot with log scaling on both axes\nplt.xscale('log')\nplt.yscale('log')\n\n# plot with log scaling on the x axis and linear scaling on the y axis\nplt.xscale('log')\nplt.yscale('linear')\n\n# plot with linear scaling on the x axis and log scaling on the y axis\nplt.xscale('linear')\nplt.yscale('log')\n\n# plot with log scaling on both axes\nplt.xscale('log')\nplt.yscale('log')\n\n# plot with log scaling on the x axis and linear scaling on the y axis\nplt.xscale('log')\nplt.yscale('linear')\n\n# plot with linear scaling on the x axis and log scaling on the y axis\nplt.xscale('linear')\nplt.yscale('log')\n\n# plot with log scaling on both axes\nplt.xscale('log')\nplt.yscale('log')\n\n# plot with log scaling on the x axis and linear scaling on the y axis\nplt.xscale('log')\nplt.yscale('linear')\n\n# plot with linear scaling on the x axis and log scaling on the y axis\nplt.xscale('linear')\nplt.yscale('log')\n\n# plot with log scaling on both axes\nplt.xscale('log')\nplt.yscale('log')\n\n# plot with log scaling on the x axis and linear scaling on the y axis\nplt.xscale('log')\nplt.yscale('linear')\n\n# plot with linear scaling on the x axis and log scaling on the y axis\nplt.xscale('linear')\nplt.yscale('log')\n\n# plot with log scaling on both axes\nplt.xscale('log')\nplt.yscale('log')\n\n# plot with log scaling on the x axis and linear scaling on the y axis\nplt.xscale('log')\nplt.yscale('linear')\n\n# plot with linear scaling on the x axis and log scaling on the y axis\nplt.xscale('linear')\nplt.yscale('log')\n\n# plot with log scaling on both axes\nplt.xscale('log')\nplt.yscale('log')\n\n# plot with log scaling on the x axis and linear scaling on the y axis\nplt.xscale('log')\nplt.yscale('linear')\n\n# plot with linear scaling on the x axis and log scaling on the y axis\nplt.xscale('linear')\nplt.yscale('log')\n\n# plot with log scaling on both axes\nplt.xscale('log')\nplt.yscale('log')\n\n# plot with log scaling on the x axis and linear scaling on the y axis\nplt.xscale('log')\nplt.yscale('linear')\n\n# plot with linear scaling on the x axis and log scaling on the y axis\nplt.xscale('linear')\nplt.yscale('log')\n\n# plot with log scaling on both axes\nplt.xscale('log')\nplt.yscale('log')\n\n# plot with log scaling on the x axis and linear scaling on the y axis\nplt.xscale('log')\nplt.yscale('linear')\n\n# plot with linear scaling on the x axis and log scaling on the y axis\nplt.xscale('linear')\nplt.yscale('log')\n\n# plot with log scaling on both axes\nplt.xscale('log')\nplt.yscale('log')\n\n# plot with log scaling on the x axis and linear scaling on the y axis\nplt.xscale('log')\nplt.yscale('linear')\n\n# plot with linear scaling on the x axis and log scaling on the y axis\nplt.xscale('linear')\nplt.yscale('log')\n\n# plot with log scaling on both axes\nplt.xscale('log')\nplt.yscale('log')\n\n# plot with log scaling on the x axis and linear scaling on the y axis\nplt.xscale('log')\nplt.yscale('linear')\n\n# plot with linear scaling on the x axis and log scaling on the y axis\nplt.xscale('linear')\nplt.yscale('log')\n\n# plot with log scaling on both axes\nplt.xscale('log')\nplt.yscale('log')\n\n# plot with log scaling on the x axis and linear scaling on the y axis\nplt.xscale('log')\nplt.yscale('linear')\n\n# plot with linear scaling on the x axis and log scaling on the y axis\nplt.xscale('linear')\nplt.yscale('log')\n\n# plot with log scaling on both axes\nplt.xscale('log')\nplt.yscale('log')\n\n# plot with log scaling on the x axis and linear scaling on the y axis\nplt.xscale('log')\nplt.yscale('linear')\n\n# plot with linear scaling on the x axis and log scaling on the y axis\nplt.xscale('linear')\nplt.yscale('log')\n\n# plot with log scaling on both axes\nplt.xscale('log')\nplt.yscale('log')\n\n# plot with log scaling on the x axis and linear scaling on the y axis\nplt.xscale('log')\nplt.yscale('linear')\n\n# plot with linear scaling on the x axis and log scaling on the y axis\nplt.xscale('linear')\nplt.yscale('log')\n\n# plot with log scaling on both axes\nplt.xscale('log')\nplt.yscale('log')\n\n# plot with log scaling on the x axis and linear scaling on the y axis\nplt.xscale('log')\nplt.yscale('linear')\n\n# plot with linear scaling on the x axis and log scaling on the y axis\nplt.xscale('linear')\nplt.yscale('log')\n\n# plot with log scaling on both axes\nplt.xscale('log')\nplt.yscale('log')\n\n# plot with log scaling on the x axis and linear scaling on the y axis\nplt.xscale('log')\nplt.yscale('linear')\n\n# plot with linear scaling on the x axis and log scaling on the y axis\nplt.xscale('linear')\nplt.yscale('log')\n\n# plot with log scaling on both axes\nplt.xscale('log')\nplt.yscale('log')\n\n# plot with log scaling on the x axis and linear scaling on the y axis\nplt.xscale('log')\nplt.yscale('linear')\n\n# plot with linear scaling on the x axis and log scaling on the y axis\nplt.xscale('linear')\nplt.yscale('log')\n\n# plot with log scaling"}
{"file": "dataset/ori_500/CB_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfrom scipy.stats import ttest_ind\nfrom scipy.stats import gaussian_kde\n\n# example data\nx1 = np.random.normal(0.5, 0.3, 100)\ny1 = np.random.normal(0.5, 0.3, 100)\nx2 = np.random.normal(2.0, 0.5, 100)\ny2 = np.random.normal(2.0, 0.5, 100)\n\n# Compute the kernel density estimate of the two samples\nkde = gaussian_kde([x1, y1])\nkde2 = gaussian_kde([x2, y2])\n\n# Evaluate it on a grid over the same range\nxgrid = np.linspace(-1, 4, 100)\nygrid = np.linspace(-1, 4, 100)\nX, Y = np.meshgrid(xgrid, ygrid)\npos = np.dstack((X.ravel(), Y.ravel()))\nZ = kde.evaluate(pos)\nZ2 = kde2.evaluate(pos)\n\n# Plot the result\nfig, ax = plt.subplots()\nax.set_title('T-test p-value = %.4f' % ttest_ind(x1, x2).pvalue)\nax.contourf(X, Y, Z.reshape(X.shape), cmap='Blues')\nax.contourf(X, Y, Z2.reshape(X.shape), cmap='Reds', alpha=0.5)\nax.plot(x1, y1, 'o', color='w', zorder=5)\nax.plot(x2, y2, 'o', color='w', zorder=5)\nax.legend(['Benign', 'BadNets'])\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nnp.random.seed(19680801)\nN = 5\nind = np.arange(N)  # the x locations for the groups\nwidth = 0.35       # the width of the bars: can also be len(x) sequence\n\nfig, ax = plt.subplots()\n\n# the bar with errorbars\np1 = ax.bar(ind, [1, 2, 3, 4, 5], width, yerr=[0.1, 0.3, 0.5, 0.7, 0.9])\n\n# the bar without errorbars\np2 = ax.bar(ind + width, [2, 3, 5, 7, 11], width)\n\n# the bar with errorbars and a different color\np3 = ax.bar(ind, [1, 2, 3, 4, 5], width, yerr=[0.1, 0.3, 0.5, 0.7, 0.9], color='r')\n\n# the bar with errorbars and a different color\np4 = ax.bar(ind - width, [1, 2, 3, 4, 5], width, yerr=[0.1, 0.3, 0.5, 0.7, 0.9], color='g')\n\n# add some text for labels, title and custom x-axis tick labels, etc.\nax.set_ylabel('Scores')\nax.set_title('Comparison of APO & APO-APEs (GPT-3 5-Turbo)')\nax.set_xticks(ind)\nax.set_xticklabels(('snarks', 'navigate', 'question_selection', 'object_counting'))\nax.legend((p1[0], p2[0], p3[0], p4[0]), ('APO-trend', 'APO-step1-APE', 'APO-step2-APE', 'APO-best'))\n\ndef autolabel(rects):\n    \"\"\"Attach a text label above each bar in *rects*, displaying its height.\"\"\"\n    for rect in rects:\n        height = rect.get_height()\n        ax.annotate('{}'.format(height),\n                    xy=(rect.get_x() + rect.get_width() / 2, height),\n                    xytext=(0, 3),  # 3 points vertical offset\n                    textcoords=\"offset points\",\n                    ha='center', va='bottom')\n\nautolabel(p1)\nautolabel(p2)\nautolabel(p3)\nautolabel(p4)\n\nfig.tight_layout()\n\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfrom matplotlib import colors as mcolors\n\n# Fixing random state for reproducibility\nnp.random.seed(19680801)\n\nfig, ax = plt.subplots()\n\n# Make a histogram of random data with a color map\nnorm_size = np.random.uniform(0.0, 1.4, 1000)\nselector = np.random.randint(2, size=1000)\ncolors = [mcolors.to_rgba('pink', alpha=0.5), mcolors.to_rgba('blue', alpha=0.5)]\ncmap = mcolors.LinearSegmentedColormap.from_list('my_colormap', colors)\n\nax.hist(norm_size[selector == 0], bins=30, density=True,\n        facecolor=cmap(0.5), alpha=0.5, label='H-ward - centers-cos')\nax.hist(norm_size[selector == 1], bins=30, density=True,\n        facecolor=cmap(0.75), alpha=0.5, label='random')\n\nax.set_title('summarization_xsum:temperature=0.3,device=cuda')\nax.legend()\n\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Fixing random state for reproducibility\nnp.random.seed(19680801)\n\n# Compute pie slices\nn_incomparable = 99\nn_same = 32\nn_different = 4\nn_incomparable_english = 11.1\nn_incomparable_german = 44.4\nn_incomparable_both = 44.4\n\nsizes = [n_incomparable, n_same, n_different]\nlabels = ['Incomparable', 'Same', 'Different']\ncolours = ['green', 'blue', 'yellow']\n\nfig, ax = plt.subplots()\nax.pie(sizes, labels=labels, colors=colours,\n       autopct='%1.1f%%', startangle=90)\nax.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_16.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nnp.random.seed(19680801)\nseac = np.random.lognormal(size=(3, 2), mean=3.5, sigma=1.5)\nsac = np.random.lognormal(size=(3, 2), mean=4.1, sigma=1.5)\n\nfig, ax = plt.subplots()\nax.boxplot([seac, sac])\nax.set_xticklabels(['SEAC', 'SAC(20Hz)'])\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_17.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nmethod = ['CodeBERT', 'ChatGPT-3.5', 'ChatGPT-4.0', 'CodeAgent']\nrecall_scores = [63.64, 80.08, 84.27, 90.11]\nf1_scores = [75.00, 87.20, 90.12, 93.89]\n\n# plot recall scores\nfig, ax1 = plt.subplots()\n\ncolor = 'tab:blue'\nax1.set_xlabel('Method')\nax1.set_ylabel('Scores', color=color)\nax1.bar(method, recall_scores, color=color)\nax1.tick_params(axis='y', labelcolor=color)\n\n# plot f1 scores on the same plot\nax2 = ax1.twinx()  \ncolor = 'tab:red'\nax2.set_ylabel('Scores', color=color)  \nax2.plot(method, f1_scores, color=color)\nax2.tick_params(axis='y', labelcolor=color)\n\nfig.tight_layout()  \nplt.show()\n```"}
{"file": "dataset/ori_500/CB_18.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nx = [4, 8, 12, 16, 20, 24, 28, 32]\ny1 = [82.5, 87.5, 90.0, 92.0, 93.0, 94.0, 94.0, 94.5]\ny2 = [89.0, 91.0, 92.0, 93.0, 94.0, 94.0, 94.0, 94.5]\n\nfig, ax = plt.subplots()\nax.plot(x, y1, 'o-', label='Trained w Few-Shot Ex')\nax.fill_between(x, y1 - 1.0, y1 + 1.0, color='b', alpha=.1)\nax.plot(x, y2, 'o-', label='Def Deduce+Ex Gen')\nax.fill_between(x, y2 - 1.0, y2 + 1.0, color='r', alpha=.1)\n\nax.set_xlabel('Few-Shot K')\nax.set_ylabel('Micro F1')\nax.legend()\n\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_19.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nx = np.arange(1, 50)\ny = x * 2 + 3\n\nfig, ax = plt.subplots()\nax.plot(x, y, 'r', label='Cars')\nax.plot(80, 80, 'b*', label='Trucks')\n\nax.set_xlabel('Vehicle Parameter Size (units)')\nax.set_ylabel('Efficiency (%)')\nax.legend()\n\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nmodels = ['GPT-2', 'Llama 2 7B', 'Llama 2 70B', 'Mixtral 8x7B', 'GPT-3.5', 'GPT-4']\nsuccess_rates = [0, 6, 8, 12, 12, 56]\ntrends = [0, 0, 4, 10, 12, 22]\n\n# plot\nfig, ax = plt.subplots()\nax.bar(models, success_rates, label='Simple Trend')\nax.plot(models, trends, marker='o', color='purple', label='Simple')\n\n# add labels and title\nax.set_xlabel('Model')\nax.set_ylabel('Success Rate (%)')\nax.set_title('Encoding/Decoding Schelling Points by Model')\n\n# add legend\nax.legend()\n\n# show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_20.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nx = np.random.normal(size=100)\ny = np.random.normal(size=100)\n\n# histogram of x\nhist, bin_edges = np.histogram(x, bins=10)\n\n# calibration curve\nfpr, tpr, thresholds = plt.histcalib(x, y, bins=10)\n\n# plot\nfig, ax = plt.subplots(2, 1, sharex=True, figsize=(4.5, 7))\nax[0].bar(bin_edges[:-1], hist, width=bin_edges[1] - bin_edges[0])\nax[1].scatter(x, y, s=10, alpha=0.5)\nax[1].plot([0, 1], [0, 1], 'k--', lw=2)\nax[1].set_xlabel('predicted probability')\nax[1].set_ylabel('fraction of positives')\n```"}
{"file": "dataset/ori_500/CB_21.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nmu = 100300\nsigma = 5000\nx = mu + sigma * np.random.randn(10000)\n\n# the histogram of the data\nn, bins, patches = plt.hist(x, 50, density=1, facecolor='g', alpha=0.75)\n\n# add a 'best fit' line\ny = mlab.normpdf(bins, mu, sigma)\nplt.plot(bins, y, '--')\nplt.xlabel('Smarts')\nplt.ylabel('Probability')\nplt.title('Histogram of IQ')\nplt.grid(True)\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_22.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfrom scipy.stats import norm\n\n# example data\nmu = 1659.02\nsigma = 23.47\nx = np.linspace(mu - 3*sigma, mu + 3*sigma, 100)\ny = norm.pdf(x, mu, sigma)\n\nmu = 211.46\nsigma = 2.55\nx = np.linspace(mu - 3*sigma, mu + 3*sigma, 100)\ny = norm.pdf(x, mu, sigma)\n\nmu = 1397.72\nsigma = 19.74\nx = np.linspace(mu - 3*sigma, mu + 3*sigma, 100)\ny = norm.pdf(x, mu, sigma)\n\nmu = 49.89\nsigma = 0.63\nx = np.linspace(mu - 3*sigma, mu + 3*sigma, 100)\ny = norm.pdf(x, mu, sigma)\n\nfig, (ax1, ax2, ax3, ax4) = plt.subplots(2, 2, sharex=True, sharey=True)\nax1.hist(x, bins=20, density=True)\nax1.plot(x, y, 'k')\nax1.set_title('Total')\n\nax2.hist(x, bins=20, density=True)\nax2.plot(x, y, 'k')\nax2.set_title('Proposer')\n\nax3.hist(x, bins=20, density=True)\nax3.plot(x, y, 'k')\nax3.set_title('Attestor')\n\nax4.hist(x, bins=20, density=True)\nax4.plot(x, y, 'k')\nax4.set_title('Sync committee member')\n\nfig.suptitle('Daily reward (Ether)')\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_23.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfig, ax = plt.subplots()\n\n# example data\nx = np.arange(1, 150)\ny = np.sin(x / 20) * x + np.random.normal(0, 0.1, size=x.shape)\n\n# plot with error bars in both x and y\nax.errorbar(x, y, xerr=5, yerr=0.3, fmt='o', c='red')\n\n# plot with error bars in y only\nax.errorbar(x, y, yerr=0.3, fmt='o', c='blue')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_24.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nmu = 100\nsigma = 15\nx = mu + sigma * np.random.randn(10000)\n\nnum_bins = 50\n\nfig, ax = plt.subplots()\n\n# the histogram of the data\nn, bins, patches = ax.hist(x, num_bins, density=True)\n\n# add a 'best fit' line\ny = ((1 / (np.sqrt(2 * np.pi) * sigma)) *\n     np.exp(-0.5 * (1 / sigma * (bins - mu))**2))\nax.plot(bins, y, '--')\nax.set_xlabel('Execution Duration(clock)')\nax.set_ylabel('Distribution')\nax.set_title(r'Histogram of IQ: $\\mu=100$, $\\sigma=15$')\n\n# Tweak spacing to prevent clipping of ylabel\nfig.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_25.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nN = 4\nmenMeans = (20, 35, 30, 35, 27)\nmenStd = (2, 3, 4, 1, 2)\nind = np.arange(N)    # the x locations for the groups\nwidth = 0.35       # the width of the bars: can also be len(x) sequence\n\nfig, ax = plt.subplots()\nrects1 = ax.bar(ind, menMeans, width, yerr=menStd)\n\n# add some text for labels, title and custom x-axis tick labels, etc.\nax.set_ylabel('Scores')\nax.set_title('Scores by group and gender')\nax.set_xticks(ind)\nax.set_xticklabels(('G1', 'G2', 'G3', 'G4', 'G5'))\nax.legend((rects1[0]), ('Men'))\n\nfig.tight_layout()\n\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_26.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nnp.random.seed(19680801)\nx = np.random.randn(1000, 2)\ny1 = np.random.lognormal(size=(1000, 1))\ny2 = y1.copy()\n\nfig, ax = plt.subplots()\nax.set_title('CTCO')\nax.set_xlabel('Algorithms')\nax.set_ylabel('Time Cost (Seconds)')\nax.set_xlim(-1, 4)\nax.set_ylim(-1, 4)\n\nax.scatter(x[:, 0], y1, color='tab:orange', alpha=0.3)\nax.errorbar(x[:, 0], y1, xerr=x[:, 1], fmt='o', ecolor='k', capsize=5,\n            color='tab:orange')\n\nax.scatter(x[:, 0], y2, color='tab:green', alpha=0.3)\nax.errorbar(x[:, 0], y2, xerr=x[:, 1], fmt='o', ecolor='k', capsize=5,\n            color='tab:green')\n\nax.set_xlim(-1, 4)\nax.set_ylim(-1, 4)\nax.set_title('SEAC')\n```"}
{"file": "dataset/ori_500/CB_27.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\ndata = [np.random.normal(200, 25, 200), np.random.normal(200, 25, 200),\n        np.random.normal(210, 25, 200), np.random.normal(210, 25, 200)]\n\nfig, ax = plt.subplots()\nax.boxplot(data)\nax.set_xticklabels(['Adidas', 'Nike', 'New Balance', 'Our Brand'])\n\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_28.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nnp.random.seed(196834)\nages = [80, 82, 85, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]\nx = np.arange(len(ages))\n\nfig, (ax1, ax2) = plt.subplots(nrows=2)\n\nax1.set_title('Early 20th Century')\nax1.set_ylabel('Density')\nax1.set_xlabel('Year')\nax1.set_xlim(1850, 2050)\nax1.set_ylim(0, 0.04)\nax1.set_xticks(x)\nax1.set_yticks(np.arange(0, 0.04, 0.01))\nax1.errorbar(x, ages, fmt='o', yerr=3, color='blue')\n\nax2.set_title('Mid 20th Century')\nax2.set_ylabel('Year')\nax2.set_xlabel('Era')\nax2.set_xlim(-0.5, 1.5)\nax2.set_ylim(1850, 2050)\nax2.set_xticks([0, 1])\nax2.set_xticklabels(['Early 20th Century', 'Turn of the Century'])\nax2.boxplot(ages, vert=False, showmeans=True)\n\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_29.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(9, 4), sharey=True)\n\nN = 10\nmen_means = (20, 35, 30, 35, 27)\nwomen_means = (25, 32, 34, 20, 25)\nmen_std = (2, 3, 4, 1, 2)\nwomen_std = (3, 5, 2, 3, 3)\nx = np.arange(N)\nwidth = 0.35\n\np1 = ax1.bar(x - men_std/2, men_means, yerr=men_std, width=width,\n             capsize=7, label='Men')\np2 = ax1.bar(x + women_std/2, women_means, yerr=women_std, width=width,\n             capsize=7, label='Women')\n\nax1.set_ylabel('Scores')\nax1.set_title('Scores by group and gender')\nax1.set_xticks(x)\nax1.set_xticklabels(('G1', 'G2', 'G3', 'G4', 'G5'))\nax1.legend()\n\n# plot 2\nN = 10\nmen_means = (20, 35, 30, 35, 27)\nwomen_means = (25, 32, 34, 20, 25)\nmen_std = (2, 3, 4, 1, 2)\nwomen_std = (3, 5, 2, 3, 3)\nx = np.arange(N)\nwidth = 0.35\n\np1 = ax2.bar(x - men_std/2, men_means, yerr=men_std, width=width,\n             capsize=7, label='Men')\np2 = ax2.bar(x + women_std/2, women_means, yerr=women_std, width=width,\n             capsize=7, label='Women')\n\nax2.set_ylabel('Scores')\nax2.set_title('Scores by group and gender')\nax2.set_xticks(x)\nax2.set_xticklabels(('G1', 'G2', 'G3', 'G4', 'G5'))\nax2.legend()\n\nfig.suptitle('An example of error bars')\nfig.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Fixing random state for reproducibility\nnp.random.seed(19680801)\n\nn_bins = 10\nx = np.random.randn(10_000)\ny = np.random.randn(10_000)\nz = np.sqrt(x**2 + y**2) / 5\nc = z / z.max()\n\nfig, ax = plt.subplots()\nax.hexbin(x, y, C=c, gridsize=n_bins, cmap='inferno', bins=10)\nax.set_title('Hexagon binning')\nax.set_xlabel('X axis')\nax.set_ylabel('Y axis')\n\n# Add a colorbar representing z\ncb = fig.colorbar(ax.pcolormesh(*ax.get_bincenter(), np.diff(ax.get_binedges(), axis=1)[0], cmap='inferno'))\ncb.set_label('Fraction of positives')\n\n# Add a dashed line for the bin edges\nax.plot(ax.get_bincenter(0), ax.get_bincenter(1), 'k--', alpha=.5)\nax.plot(ax.get_bincenter(-1), ax.get_bincenter(1), 'k--', alpha=.5)\nax.plot(ax.get_bincenter(0), ax.get_bincenter(-1), 'k--', alpha=.5)\nax.plot(ax.get_bincenter(1), ax.get_bincenter(-1), 'k--', alpha=.5)\n\n# Add a calibration curve\nax.plot([0, 1], [0, 1], 'k-', label='Calibration curve')\n\n# Add data points\nax.scatter(x, y, s=2, c=c, alpha=.5, label='Data points')\n\n# Add legend\nax.legend()\n\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_30.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfig, ax = plt.subplots()\n\nN = 4\nwidth = 0.25\n\np1 = ax.bar(np.arange(N), [10, 15, 20, 25], width, label='Tesla')\np2 = ax.bar(np.arange(N) + width, [30, 35, 40, 45], width, label='Benz')\np3 = ax.bar(np.arange(N) + width * 2, [50, 55, 60, 65], width, label='BYD')\np4 = ax.bar(np.arange(N) + width * 2, [70, 75, 80, 85], width, label='Porsche')\n\nax.set_ylabel('Earnings ($1000s)')\nax.set_title('Earnings of four companies over four quarters')\nax.set_xticks(np.arange(N) + width * 1.5)\nax.set_xticklabels(('Q1', 'Q2', 'Q3', 'Q4'))\nax.legend(loc='upper left')\n\n# plot growth\ngrowth = np.array([100, 200, 300, 400])\ngrowth_error = np.array([10, 20, 30, 40]) / 100\nax.errorbar(np.arange(N), growth, yerr=growth_error, fmt='o', color='red',\n            ecolor='red', capsize=5, label='Growth')\n\nplt.suptitle('Growth %')\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# example data\nx = np.arange(6)\ny1 = x + 3\ny2 = x**2\ny3 = x**3\n\nfig, ax = plt.subplots()\n\nax.plot(x, y1, color='tab:blue', lw=4, label='Train sec / img')\nax.plot(x, y2, color='tab:orange', ls='--', label='Inference GFLOPs')\nax.plot(x, y3, color='tab:green', ls=':', label='Param, log10')\nax.plot(x, y1 + y2 + y3, color='k', marker='o', linestyle='')\n\nax.set_title('Accuracy, iNaturalist 2021')\nax.set_xlabel('Methods')\nax.set_ylabel('Normalized Requirements (lower is better)')\nax.legend()\n\nplt.show()\n```"}
