{"file": "dataset/ori_500/3d_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfig = plt.figure(figsize=(7.0, 7.0))\nax = fig.add_subplot(111, projection='3d')\n\n# Data for plotting\nx = np.linspace(0, 10, 100)\ny = np.sin(x)\nz = np.cos(x)\n\n# Plotting\nax.plot(x, y, z, 'b-')\nax.scatter(x, y, z, c='r', marker='o')\n\n# Setting labels\nax.set_xlabel('Time (s)')\nax.set_ylabel('Amplitude')\nax.set_zlabel('Phase')\n\n# Displaying the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_10.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a 3D plot\nfig = plt.figure(figsize=(8.0, 6.0))\nax = fig.add_subplot(111, projection='3d')\n\n# Define the data points\nx = [0.5, 1.5, 2.5, 3.5]\ny = [0.5, 1.5, 2.5, 3.5]\nz = [0.5, 1.5, 2.5, 3.5]\n\n# Plot the data points\nax.scatter(x, y, z, c='r', marker='o')\n\n# Set the labels for the axes\nax.set_xlabel('Height')\nax.set_ylabel('Width')\nax.set_zlabel('Count')\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/3d_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig = plt.figure(figsize=(8.0, 6.0))\nax = fig.add_subplot(111, projection='3d')\n\n# Define the data for the sphere\nu = np.linspace(0, 2 * np.pi, 100)\nv = np.linspace(0, np.pi, 100)\nx = 10 * np.outer(np.cos(u), np.sin(v))\ny = 10 * np.outer(np.sin(u), np.sin(v))\nz = 10 * np.outer(np.ones(np.size(u)), np.cos(v))\n\n# Plot the surface\nax.plot_surface(x, y, z, color='magenta')\n\n# Set the limits of the axes\nax.set_xlim(-15, 15)\nax.set_ylim(-15, 15)\nax.set_zlim(-15, 15)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nimport numpy as np\n\nfig = plt.figure(figsize=(8.0, 6.0))\nax = fig.add_subplot(111, projection='3d')\n\n# Data for plotting\nx = np.linspace(-4, 4, 100)\ny = np.linspace(-2, 2, 100)\nx, y = np.meshgrid(x, y)\nz = x**2 + y**2\n\n# Plot the surface\nsurf = ax.plot_surface(x, y, z, cmap='viridis')\n\n# Add some text for labels, title and custom x-axis tick labels, etc.\nax.set_xlabel('Temperature (\u00b0C)')\nax.set_ylabel('Pressure (kPa)')\nax.set_zlabel('Volume (L)')\n\n# Scatter plot of data points\nax.scatter([0, 1, 2], [0, 1, 2], [0, 1, 2], c='r', marker='o')\n\n# Line plot of data points\nax.plot([0, 1, 2], [0, 1, 2], [0, 1, 2], c='b', linestyle='-')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\nyears = [2010, 2012, 2014, 2016, 2018]\nprivate_schools = [0.3, 0.5, 0.7, 0.9, 0.8]\npublic_schools = [0.4, 0.6, 0.8, 0.9, 0.7]\n\n# Create a 3D plot\nfig = plt.figure(figsize=(8.0, 6.0))\nax = fig.add_subplot(111, projection='3d')\n\n# Plot the data\nfor i in range(len(years)):\n    ax.bar([years[i]], [private_schools[i]], zs=0, zdir='y', color='orange', alpha=0.5)\n    ax.bar([years[i]], [public_schools[i]], zs=1, zdir='y', color='blue', alpha=0.5)\n\n# Set labels and title\nax.set_xlabel('Year')\nax.set_ylabel('Type')\nax.set_zlabel('Student to Teacher Ratio')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_14.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the background color of the plot\nax.set_facecolor('lightgrey')\n\n# Set the title of the plot\nax.set_title('COVID-19 Incidence Rate by Age and Vaccination Status')\n\n# Set the x-axis label\nax.set_xlabel('Vaccination Number')\n\n# Set the y-axis label\nax.set_ylabel('Incidence Rate')\n\n# Create a scatter plot with random data\nx = np.random.rand(50)\ny = np.random.rand(50)\ncolors = np.random.rand(50)\narea = np.pi * (15 * np.random.rand(50))**2  # 0 to 15 point radiuses\nax.scatter(x, y, s=area, c=colors, alpha=0.5)\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/3d_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis for the first subplot\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\nax.set_title('Global AI Investment')\nax.set_xlabel('Year')\nax.set_ylabel('Investment (Billion USD)')\nx = np.arange(2010, 2020)\ny = np.random.randint(1, 10, size=10)\nax.plot(x, y, 'o-')\n\n# Create a figure and axis for the second subplot\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\nax.set_title('AI Adoption Rate')\nax.set_xlabel('Time Since Introduction (Years)')\nax.set_ylabel('Adoption Rate (%)')\nx = np.arange(0, 10, 1)\ny = np.random.randint(1, 10, size=10)\nax.plot(x, y, 'o-')\n\n# Display the plots\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_2.pdf", "response": "```python\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\n\n# Create a figure and a 3D subplot\nfig = plt.figure(figsize=(10.0, 7.0))\nax1 = fig.add_subplot(121, projection='3d')\nax2 = fig.add_subplot(122, projection='3d')\n\n# Define the grid of points\nx = np.linspace(-1, 1, 50)\ny = np.linspace(-1, 1, 50)\nx, y = np.meshgrid(x, y)\n\n# Define the function f(x,y)\nz = np.sin(np.sqrt(x**2 + y**2))\n\n# Plot the function f(x,y)\nsurf1 = ax1.plot_surface(x, y, z, cmap='viridis', linewidth=0, antialiased=False)\nfig.colorbar(surf1, shrink=0.5, aspect=5)\n\n# Define the solution g(x,y)\ng = np.sin(np.sqrt(x**2 + y**2)) * np.exp(-x**2 - y**2)\n\n# Plot the solution g(x,y)\nsurf2 = ax2.plot_surface(x, y, g, cmap='plasma', linewidth=0, antialiased=False)\nfig.colorbar(surf2, shrink=0.5, aspect=5)\n\n# Set the labels for the axes\nax1.set_xlabel('X Label')\nax1.set_ylabel('Y Label')\nax1.set_zlabel('Z Label')\nax2.set_xlabel('X Label')\nax2.set_ylabel('Y Label')\nax2.set_zlabel('Z Label')\n\n# Set the title of the plots\nax1.set_title('f(x)')\nax2.set_title('solution')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_3.pdf", "response": "```\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Set the title of the plot\nax.set_title('CIFAR10 Spiking ResNet18 T=6')\n\n# Set the x-axis label\nax.set_xlabel('tau')\n\n# Set the y-axis label\nax.set_ylabel('accuracy (%)')\n\n# Define the data for the plot\nx = np.linspace(0, 10, 100)\ny = np.sin(x)\n\n# Plot the data\nax.plot(x, y)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nimport numpy as np\n\nfig = plt.figure(figsize=(15, 10))\nax = fig.add_subplot(111, projection='3d')\n\n# Define the data for the plots\nx = np.linspace(-100, 100, 100)\ny = np.linspace(-100, 100, 100)\nx, y = np.meshgrid(x, y)\nz1 = np.sin(np.sqrt(x**2 + y**2))\nz2 = np.cos(np.sqrt(x**2 + y**2))\nz3 = np.tan(np.sqrt(x**2 + y**2))\n\n# Plot the data\nax.plot_surface(x, y, z1, color='blue')\nax.plot_surface(x, y, z2, color='green')\nax.plot_surface(x, y, z3, color='red')\n\n# Set the labels\nax.set_xlabel('m')\nax.set_ylabel('n')\nax.set_zlabel('Freedom')\n\n# Add a title\nax.set_title('Freedom')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfig = plt.figure(figsize=(7,7))\nax = fig.add_subplot(111, projection='3d')\n\n# Create a grid of points\nx = np.linspace(-1, 1, 10)\ny = np.linspace(-1, 1, 10)\nx, y = np.meshgrid(x, y)\nz = np.sin(np.sqrt(x**2 + y**2))\n\n# Plot the surface\nsurf = ax.plot_surface(x, y, z, cmap='viridis')\n\n# Add some targets\ntargets = [(0.5, 0.5, 0.5), (0.8, 0.8, 0.8)]\nfor target in targets:\n    ax.scatter(target[0], target[1], target[2], color='orange')\n\n# Add a legend\nfig.legend(['Targets'])\n\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Set the background color of the plot\nax.set_facecolor('lightgrey')\n\n# Create a 3D scatter plot\nx = np.linspace(-4, 4, 100)\ny = np.linspace(-4, 4, 100)\nX, Y = np.meshgrid(x, y)\nZ = np.sin(np.sqrt(X**2 + Y**2))\nax.plot_surface(X, Y, Z, cmap='coolwarm', alpha=0.7)\n\n# Add a color bar which maps values to colors\ncbar = fig.colorbar(ax.collections[0])\ncbar.set_label('Intensity')\n\n# Set the title of the plot\nax.set_title('3D Scatter Plot with Colorbar')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Set the background color of the plot\nax.set_facecolor('lightblue')\n\n# Create a grid of subplots\ngs = fig.add_gridspec(3, 3)\n\n# Add a subplot for the main image\nmain_ax = fig.add_subplot(gs[0, :])\n\n# Add a subplot for the left column\nleft_ax = fig.add_subplot(gs[1:, 0])\n\n# Add a subplot for the right column\nright_ax = fig.add_subplot(gs[1:, 2])\n\n# Add a subplot for the bottom row\nbottom_ax = fig.add_subplot(gs[2, 1])\n\n# Set the title of the main image\nmain_ax.set_title('Main Image')\n\n# Set the title of the left column\nleft_ax.set_title('Left Column')\n\n# Set the title of the right column\nright_ax.set_title('Right Column')\n\n# Set the title of the bottom row\nbottom_ax.set_title('Bottom Row')\n\n# Set the x and y limits of the main image\nmain_ax.set_xlim([0, 10])\nmain_ax.set_ylim([0, 10])\n\n# Set the x and y limits of the left column\nleft_ax.set_xlim([0, 10])\nleft_ax.set_ylim([0, 10])\n\n# Set the x and y limits of the right column\nright_ax.set_xlim([0, 10])\nright_ax.set_ylim([0, 10])\n\n# Set the x and y limits of the bottom row\nbottom_ax.set_xlim([0, 10])\nbottom_ax.set_ylim([0, 10])\n\n# Set the aspect ratio of the main image\nmain_ax.set_aspect('equal')\n\n# Set the aspect ratio of the left column\nleft_ax.set_aspect('equal')\n\n# Set the aspect ratio of the right column\nright_ax.set_aspect('equal')\n\n# Set the aspect ratio of the bottom row\nbottom_ax.set_aspect('equal')\n\n# Set the color of the main image\nmain_ax.set_facecolor('red')\n\n# Set the color of the left column\nleft_ax.set_facecolor('green')\n\n# Set the color of the right column\nright_ax.set_facecolor('blue')\n\n# Set the color of the bottom row\nbottom_ax.set_facecolor('yellow')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_8.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the background color of the plot\nax.set_facecolor('lightgrey')\n\n# Set the limits of the x and y axes\nax.set_xlim(-10, 100)\nax.set_ylim(-50, 50)\n\n# Set the labels for the x and y axes\nax.set_xlabel('Income')\nax.set_ylabel('Debt')\n\n# Create a scatter plot with random data points\nx = np.random.randint(0, 100, 20)\ny = np.random.randint(-50, 50, 20)\nax.scatter(x, y, c='red', marker='o')\n\n# Create a line plot with random data points\nx = np.linspace(0, 100, 100)\ny = np.sin(x/10)\nax.plot(x, y, c='blue')\n\n# Create a bar chart with random data points\nx = np.arange(1, 11)\ny = np.random.randint(0, 100, 10)\nax.bar(x, y, color='green')\n\n# Create a pie chart with random data points\nlabels = ['Debt', 'Income']\nsizes = [np.random.randint(30, 70), np.random.randint(30, 70)]\ncolors = ['orange', 'yellow']\nax.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%')\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/3d_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the background color of the plot\nax.set_facecolor('lightgrey')\n\n# Set the x and y limits\nax.set_xlim(-10, 100)\nax.set_ylim(-30, 50)\n\n# Set the x and y labels\nax.set_xlabel('Time (s)')\nax.set_ylabel('Depth (m)')\n\n# Set the x and y ticks\nax.set_xticks(np.arange(0, 101, 10))\nax.set_yticks(np.arange(-30, 51, 10))\n\n# Set the x and y grid lines\nax.grid(True)\n\n# Plot the data\nax.plot([0, 10, 20, 30, 40, 50, 60, 70, 80, 90], [0, 10, 20, 30, 40, 50, 60, 70, 80, 90], 'r-')\nax.plot([0, 10, 20, 30, 40, 50, 60, 70, 80, 90], [0, -10, -20, -30, -40, -50, -60, -70, -80, -90], 'b-')\nax.plot([0, 10, 20, 30, 40, 50, 60, 70, 80, 90], [0, 10, 20, 30, 40, 50, 60, 70, 80, 90], 'g-')\nax.plot([0, 10, 20, 30, 40, 50, 60, 70, 80, 90], [0, -10, -20, -30, -40, -50, -60, -70, -80, -90], 'y-')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Set the x-axis limits\nax.set_xlim(-20, 20)\n\n# Set the y-axis limits\nax.set_ylim(0, 12)\n\n# Set the x-axis label\nax.set_xlabel('LR Test')\n\n# Set the y-axis label\nax.set_ylabel('Density')\n\n# Set the title of the plot\nax.set_title('Density vs LR Test')\n\n# Create a scatter plot\nx = np.linspace(-20, 20, 100)\ny = np.sin(x)\nax.scatter(x, y, color='blue')\n\n# Create a line plot\nx = np.linspace(-20, 20, 100)\ny = np.cos(x)\nax.plot(x, y, color='red')\n\n# Create a bar chart\nx = np.linspace(-20, 20, 100)\ny = np.tan(x)\nax.bar(x, y, color='green')\n\n# Create a histogram\nx = np.random.normal(0, 1, 1000)\nax.hist(x, bins=30, color='orange')\n\n# Create a pie chart\nx = [1, 2, 3, 4, 5]\ny = [10, 20, 30, 40, 50]\nax.pie(y, labels=x, colors=['purple', 'pink', 'cyan', 'magenta', 'yellow'])\n\n# Create a box plot\nx = np.random.normal(0, 1, 1000)\nax.boxplot(x, vert=False)\n\n# Create a violin plot\nx = np.random.normal(0, 1, 1000)\nax.violinplot(x)\n\n# Create a heatmap\nx = np.random.normal(0, 1, (10, 10))\nax.imshow(x, cmap='hot', interpolation='nearest')\n\n# Create a contour plot\nx = np.linspace(-20, 20, 100)\ny = np.linspace(-20, 20, 100)\nX, Y = np.meshgrid(x, y)\nZ = np.sin(X) + np.cos(Y)\nCS = ax.contourf(X, Y, Z, locator=plt.LogLocator(), cmap='coolwarm')\n\n# Create a stream plot\nx = np.linspace(-20, 20, 100)\ny = np.linspace(-20, 20, 100)\nX, Y = np.meshgrid(x, y)\nU = np.sin(X) + np.cos(Y)\nV = np.cos(X) - np.sin(Y)\nax.streamplot(X, Y, U, V, color='black')\n\n# Create a polar plot\ntheta = np.linspace(0, 2*np.pi, 100)\nr = np.sin(theta)\nax.polar(theta, r, color='green')\n\n# Create a 3D plot\nfrom mpl_toolkits.mplot3d import Axes3D\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nx = np.linspace(-20, 20, 100)\ny = np.linspace(-20, 20, 100)\nX, Y = np.meshgrid(x, y)\nZ = np.sin(X) + np.cos(Y)\nax.plot_surface(X, Y, Z, cmap='coolwarm')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(7.0, 5.0))\n\n# Set the title of the plot\nax.set_title('Average Tracked ORB Feature Number')\n\n# Set the x-axis label\nax.set_xlabel('Average Tracked ORB Feature Number')\n\n# Set the y-axis label\nax.set_ylabel('Log (ATE RMSE)')\n\n# Create a scatter plot with random data\nx = np.random.randint(150, 400, 20)\ny = np.random.randint(-6, 0, 20)\nax.scatter(x, y, color='green')\n\n# Create a line plot with random data\nx = np.linspace(150, 400, 100)\ny = -0.47 * x + 150\nax.plot(x, y, color='black')\n\n# Create a rectangle with random data\nx = np.array([150, 400, 400, 150])\ny = np.array([-6, -6, 0, 0])\nax.fill(x, y, color='silver')\n\n# Create a rectangle with random data\nx = np.array([150, 400, 400, 150])\ny = np.array([-6, -6, -2, -2])\nax.fill(x, y, color='silver')\n\n# Create a rectangle with random data\nx = np.array([150, 400, 400, 150])\ny = np.array([-6, -6, -4, -4])\nax.fill(x, y, color='silver')\n\n# Create a rectangle with random data\nx = np.array([150, 400, 400, 150])\ny = np.array([-6, -6, -6, -6])\nax.fill(x, y, color='silver')\n\n# Create a rectangle with random data\nx = np.array([150, 400, 400, 150])\ny = np.array([-6, -6, -8, -8])\nax.fill(x, y, color='silver')\n\n# Create a rectangle with random data\nx = np.array([150, 400, 400, 150])\ny = np.array([-6, -6, -10, -10])\nax.fill(x, y, color='silver')\n\n# Create a rectangle with random data\nx = np.array([150, 400, 400, 150])\ny = np.array([-6, -6, -12, -12])\nax.fill(x, y, color='silver')\n\n# Create a rectangle with random data\nx = np.array([150, 400, 400, 150])\ny = np.array([-6, -6, -14, -14])\nax.fill(x, y, color='silver')\n\n# Create a rectangle with random data\nx = np.array([150, 400, 400, 150])\ny = np.array([-6, -6, -16, -16])\nax.fill(x, y, color='silver')\n\n# Create a rectangle with random data\nx = np.array([150, 400, 400, 150])\ny = np.array([-6, -6, -18, -18])\nax.fill(x, y, color='silver')\n\n# Create a rectangle with random data\nx = np.array([150, 400, 400, 150])\ny = np.array([-6, -6, -20, -20])\nax.fill(x, y, color='silver')\n\n# Create a rectangle with random data\nx = np.array([150, 400, 400, 150])\ny = np.array([-6, -6, -22, -22])\nax.fill(x, y, color='silver')\n\n# Create a rectangle with random data\nx = np.array([150, 400, 400, 150])\ny = np.array([-6, -6, -24, -24])\nax.fill(x, y, color='silver')\n\n# Create a rectangle with random data\nx = np.array([150, 400, 400, 150])\ny = np.array([-6, -6, -26, -26])\nax.fill(x, y, color='silver')\n\n# Create a rectangle with random data\nx = np.array([150, 400, 400, 150])\ny = np.array([-6, -6, -28, -28])\nax.fill(x, y, color='silver')\n\n# Create a rectangle with random data\nx = np.array([150, 400, 400, 150])\ny = np.array([-6, -6, -30, -30])\nax.fill(x, y, color='silver')\n\n# Create a rectangle with random data\nx = np.array([150, 400, 400, 150])\ny = np.array([-6, -6, -32, -32])\nax.fill(x, y, color='silver')\n\n# Create a rectangle with random data\nx = np.array([150, 400, 400, 150])\ny = np.array([-6, -6, -34, -34])\nax.fill(x, y, color='silver')\n\n# Create a rectangle with random data\nx = np.array([150, 400, 400, 150])\ny = np.array([-6, -6, -36, -36])\nax.fill(x, y, color='silver')\n\n# Create a rectangle with random data\nx = np.array([150, 400, 400, 150])\ny = np.array([-6, -6, -38, -38])\nax.fill(x, y, color='silver')\n\n# Create a rectangle with random data\nx = np.array([150, 400, 400, 150])\ny = np.array([-6, -6, -40, -40])\nax.fill(x, y, color='silver')\n\n# Create a rectangle with random data\nx = np.array([150, 400, 400, 150])\ny = np.array([-6, -6, -42, -42])\nax.fill(x, y, color='silver')\n\n# Create a rectangle with random data\nx = np.array([150, 400, 400, 150])\ny = np.array([-6, -6, -44, -44])\nax.fill(x, y, color='silver')\n\n# Create a rectangle with random data\nx = np.array([150, 400, 400, 150])\ny = np.array([-6, -6, -46, -46])\nax.fill(x, y, color='silver')\n\n# Create a rectangle with random data\nx = np.array([150, 400, 400, 150])\ny = np.array([-6, -6, -48, -48])\nax.fill(x, y, color='silver')\n\n# Create a rectangle with random data\nx = np.array([150, 400, 400, 150])\ny = np.array([-6, -6, -50, -50])\nax.fill(x, y, color='silver')\n\n# Create a rectangle with random data\nx = np.array([150, 400, 400, 150])\ny = np.array([-6, -6, -52, -52])\nax.fill(x, y, color='silver')\n\n# Create a rectangle with random data\nx = np.array([150, 400, 400, 150])\ny = np.array([-6, -6, -54, -54])\nax.fill(x, y, color='silver')\n\n# Create a rectangle with random data\nx = np.array([150, 400, 400, 150])\ny = np.array([-6, -6, -56, -56])\nax.fill(x, y, color='silver')\n\n# Create a rectangle with random data\nx = np.array([150, 400, 400, 150])\ny = np.array([-6, -6, -58, -58])\nax.fill(x, y, color='silver')\n\n# Create a rectangle with random data\nx = np.array([150, 400, 400, 150])\ny = np.array([-6, -6, -60, -60])\nax.fill(x, y, color='silver')\n\n# Create a rectangle with random data\nx = np.array([150, 400, 400, 150])\ny = np.array([-6, -6, -62, -62])\nax.fill(x, y, color='silver')\n\n# Create a rectangle with random data\nx = np.array([150, 400, 400, 150])\ny = np.array([-6, -6, -64, -64])\nax.fill(x, y, color='silver')\n\n# Create a rectangle with random data\nx = np.array([150, 400, 400, 150])\ny = np.array([-6, -6, -66, -66])\nax.fill(x, y, color='silver')\n\n# Create a rectangle with random data\nx = np.array([150, 400, 400, 150])\ny = np.array([-6, -6, -68, -68])\nax.fill(x, y, color='silver')\n\n# Create a rectangle with random data\nx = np.array([150, 400, 400, 150])\ny = np.array([-6, -6, -70, -70])\nax.fill(x, y, color='silver')\n\n# Create a rectangle with random data\nx = np.array([150, 400, 400, 150])\ny = np.array([-6, -6, -72, -72])\nax.fill(x, y, color='silver')\n\n# Create a rectangle with random data\nx = np.array([150, 400, 400, 150])\ny = np.array([-6, -6, -74, -74])\nax.fill(x, y, color='silver')\n\n# Create a rectangle with random data\nx = np.array([150, 400, 400, 150])\ny = np.array([-6, -6, -76, -76])\nax.fill(x, y, color='silver')\n\n# Create a rectangle with random data\nx = np.array([150, 400, 400, 150])\ny = np.array([-6, -6, -78, -78])\nax.fill(x, y, color='silver')\n\n# Create a rectangle with random data\nx = np.array([150, 400, 400, 150])\ny = np.array([-6, -6, -80, -80])\nax.fill(x, y, color='silver')\n\n# Create a rectangle with random data\nx = np.array([150, 400, 400, 150])\ny = np.array([-6, -6, -82, -82])\nax.fill(x, y, color='silver')\n\n# Create a rectangle with random data\nx = np.array([150, 400, 400, 150])\ny = np.array([-6, -6, -84, -84])\nax.fill(x, y, color='silver')\n\n# Create a rectangle with random data\nx = np.array([150, 400, 400, 150])\ny = np.array([-6, -6, -86, -86])\nax.fill(x, y, color='silver')\n\n# Create a rectangle with random data\nx = np.array([150, 400, 400, 150])\ny = np.array([-6, -6, -88, -88])\nax.fill(x, y, color='silver')\n\n# Create a rectangle with random data\nx = np.array([150, 400, 400, 150])\ny = np.array([-6, -6, -90, -90])\nax.fill(x, y, color='silver')\n\n# Create a rectangle with random data\nx = np.array([150, 400, 400, 150])\ny = np.array([-6, -6, -92, -92])\nax.fill(x, y, color='silver')\n\n# Create a rectangle with random data\nx = np.array([150, 400, 400, 150])\ny = np.array([-6, -6, -94, -94])\nax.fill(x, y, color='silver')\n\n# Create a rectangle with random data\nx = np.array([150, 400, 400, 150])\ny = np.array([-6, -6, -96, -96])\nax.fill(x, y, color='silver')\n\n# Create a rectangle with random data\nx = np.array([150, 400, 400, 150])\ny = np.array([-6, -6, -98, -98])\nax.fill(x, y, color='silver')\n\n# Create a rectangle with random data\nx = np.array([150, 400, 400, 150])\ny = np.array([-6, -6, -100, -100])\nax.fill(x, y, color='silver')\n\n# Create a rectangle with random data\nx = np.array([150, 400, 400, 150])\ny = np.array([-6, -6, -102, -102])\nax.fill(x, y, color='silver')\n\n# Create a rectangle with random data\nx = np.array([150, 400, 400, 150])\ny = np.array([-6, -6, -104, -104])\nax.fill(x, y, color='silver')\n\n# Create a rectangle with random data\nx = np.array([150, 400, 400, 150])\ny = np.array([-6, -6, -106, -106])\nax.fill(x, y, color='silver')\n\n# Create a rectangle with random data\nx = np.array([150, 400, 400, 150])\ny = np.array([-6, -6, -108, -108])\nax.fill(x, y, color='silver')\n\n# Create a rectangle with random data\nx = np.array([150, 400, 400, 150])\ny = np.array([-6, -6, -110, -110])\nax.fill(x, y, color='silver')\n\n# Create a rectangle with random data\nx = np.array([150, 400, 400, 150])\ny = np.array([-6, -6, -112, -112])\nax.fill(x, y, color='silver')\n\n# Create a rectangle with random data\nx = np.array([150, 400, 400, 150])\ny = np.array([-6, -6, -114, -114])\nax.fill(x, y, color='silver')\n\n# Create a rectangle with random data\nx = np.array([150, 400, 400, 150])\ny = np.array([-6, -6, -116, -116])\nax.fill(x, y, color='silver')\n\n# Create a rectangle with random data\nx = np.array([150, 400, 400, 150])\ny = np.array([-6, -6, -118, -118])\nax.fill(x, y, color='silver')\n\n# Create a rectangle with random data\nx = np.array([150, 400, 400, 150])\ny = np.array([-6, -6, -120, -120])\nax.fill(x, y, color='silver')\n\n# Create a rectangle with random data\nx = np.array([150, 400, 400, 150])\ny = np.array([-6, -6, -122, -122])\nax.fill(x, y, color='silver')\n\n# Create a rectangle with random data\nx = np.array([150, 400, 400, 150])\ny = np.array([-6, -6, -124, -124])\nax.fill(x, y, color='silver')\n\n# Create a rectangle with random data\nx = np.array([150, 400, 400, 150])\ny = np.array([-6, -6, -126, -126])\nax.fill(x, y, color='silver')\n\n# Create a rectangle with random data\nx = np.array([150, 400, 400, 150])\ny = np.array([-"}
{"file": "dataset/ori_500/CB_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(7.0, 5.0))\n\n# Set the background color of the plot\nax.set_facecolor('lightgrey')\n\n# Create a scatter plot with random data\nx = np.random.rand(10)\ny = np.random.rand(10)\nax.scatter(x, y, c='blue', s=100)\n\n# Create a line plot with random data\nx = np.linspace(-3, 3, 100)\ny = np.sin(x)\nax.plot(x, y, c='red')\n\n# Add a title to the plot\nax.set_title('My Plot')\n\n# Add labels to the axes\nax.set_xlabel('Log (Depth L1)')\nax.set_ylabel('Log (ATE RMSE)')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the background color of the plot\nax.set_facecolor('lightblue')\n\n# Set the title of the plot\nax.set_title('T-test p-value = 0.0000', fontsize=14, fontweight='bold')\n\n# Set the x-axis label\nax.set_xlabel('Average Top-5 Perversion of 1D Image', fontsize=12)\n\n# Set the y-axis label\nax.set_ylabel('Density', fontsize=12)\n\n# Set the x-axis limits\nax.set_xlim(0, 1)\n\n# Set the y-axis limits\nax.set_ylim(0, 5)\n\n# Set the x-axis ticks\nax.set_xticks(np.arange(0, 1.1, 0.1))\n\n# Set the y-axis ticks\nax.set_yticks(np.arange(0, 6, 1))\n\n# Set the x-axis tick labels\nax.set_xticklabels(['0.0', '0.1', '0.2', '0.3', '0.4', '0.5', '0.6', '0.7', '0.8', '0.9', '1.0'])\n\n# Set the y-axis tick labels\nax.set_yticklabels(['0', '1', '2', '3', '4', '5'])\n\n# Set the x-axis grid lines\nax.xaxis.grid(True)\n\n# Set the y-axis grid lines\nax.yaxis.grid(True)\n\n# Set the x-axis grid line style\nax.xaxis.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the y-axis grid line style\nax.yaxis.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the x-axis grid line color\nax.xaxis.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the y-axis grid line color\nax.yaxis.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the x-axis grid line width\nax.xaxis.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the y-axis grid line width\nax.yaxis.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the x-axis grid line alpha\nax.xaxis.grid(color='gray', linestyle='-', linewidth=0.5, alpha=0.5)\n\n# Set the y-axis grid line alpha\nax.yaxis.grid(color='gray', linestyle='-', linewidth=0.5, alpha=0.5)\n\n# Set the x-axis grid line zorder\nax.xaxis.grid(color='gray', linestyle='-', linewidth=0.5, zorder=0)\n\n# Set the y-axis grid line zorder\nax.yaxis.grid(color='gray', linestyle='-', linewidth=0.5, zorder=0)\n\n# Set the x-axis grid line hatch\nax.xaxis.grid(color='gray', linestyle='-', linewidth=0.5, hatch='///')\n\n# Set the y-axis grid line hatch\nax.yaxis.grid(color='gray', linestyle='-', linewidth=0.5, hatch='///')\n\n# Set the x-axis grid line antialiased\nax.xaxis.grid(color='gray', linestyle='-', linewidth=0.5, antialiased=True)\n\n# Set the y-axis grid line antialiased\nax.yaxis.grid(color='gray', linestyle='-', linewidth=0.5, antialiased=True)\n\n# Set the x-axis grid line visible\nax.xaxis.grid(color='gray', linestyle='-', linewidth=0.5, visible=True)\n\n# Set the y-axis grid line visible\nax.yaxis.grid(color='gray', linestyle='-', linewidth=0.5, visible=True)\n\n# Set the x-axis grid line which\nax.xaxis.grid(color='gray', linestyle='-', linewidth=0.5, which='major')\n\n# Set the y-axis grid line which\nax.yaxis.grid(color='gray', linestyle='-', linewidth=0.5, which='major')\n\n# Set the x-axis grid line path\nax.xaxis.grid(color='gray', linestyle='-', linewidth=0.5, path=None)\n\n# Set the y-axis grid line path\nax.yaxis.grid(color='gray', linestyle='-', linewidth=0.5, path=None)\n\n# Set the x-axis grid line transform\nax.xaxis.grid(color='gray', linestyle='-', linewidth=0.5, transform=None)\n\n# Set the y-axis grid line transform\nax.yaxis.grid(color='gray', linestyle='-', linewidth=0.5, transform=None)\n\n# Set the x-axis grid line data\nax.xaxis.grid(color='gray', linestyle='-', linewidth=0.5, data=None)\n\n# Set the y-axis grid line data\nax.yaxis.grid(color='gray', linestyle='-', linewidth=0.5, data=None)\n\n# Set the x-axis grid line clip_on\nax.xaxis.grid(color='gray', linestyle='-', linewidth=0.5, clip_on=True)\n\n# Set the y-axis grid line clip_on\nax.yaxis.grid(color='gray', linestyle='-', linewidth=0.5, clip_on=True)\n\n# Set the x-axis grid line picker\nax.xaxis.grid(color='gray', linestyle='-', linewidth=0.5, picker=None)\n\n# Set the y-axis grid line picker\nax.yaxis.grid(color='gray', linestyle='-', linewidth=0.5, picker=None)\n\n# Set the x-axis grid line snap\nax.xaxis.grid(color='gray', linestyle='-', linewidth=0.5, snap=False)\n\n# Set the y-axis grid line snap\nax.yaxis.grid(color='gray', linestyle='-', linewidth=0.5, snap=False)\n\n# Set the x-axis grid line mouseover\nax.xaxis.grid(color='gray', linestyle='-', linewidth=0.5, mouseover=False)\n\n# Set the y-axis grid line mouseover\nax.yaxis.grid(color='gray', linestyle='-', linewidth=0.5, mouseover=False)\n\n# Set the x-axis grid line interactive\nax.xaxis.grid(color='gray', linestyle='-', linewidth=0.5, interactive=False)\n\n# Set the y-axis grid line interactive\nax.yaxis.grid(color='gray', linestyle='-', linewidth=0.5, interactive=False)\n\n# Set the x-axis grid line animated\nax.xaxis.grid(color='gray', linestyle='-', linewidth=0.5, animated=False)\n\n# Set the y-axis grid line animated\nax.yaxis.grid(color='gray', linestyle='-', linewidth=0.5, animated=False)\n\n# Set the x-axis grid line visible\nax.xaxis.grid(color='gray', linestyle='-', linewidth=0.5, visible=True)\n\n# Set the y-axis grid line visible\nax.yaxis.grid(color='gray', linestyle='-', linewidth=0.5, visible=True)\n\n# Set the x-axis grid line which\nax.xaxis.grid(color='gray', linestyle='-', linewidth=0.5, which='major')\n\n# Set the y-axis grid line which\nax.yaxis.grid(color='gray', linestyle='-', linewidth=0.5, which='major')\n\n# Set the x-axis grid line path\nax.xaxis.grid(color='gray', linestyle='-', linewidth=0.5, path=None)\n\n# Set the y-axis grid line path\nax.yaxis.grid(color='gray', linestyle='-', linewidth=0.5, path=None)\n\n# Set the x-axis grid line transform\nax.xaxis.grid(color='gray', linestyle='-', linewidth=0.5, transform=None)\n\n# Set the y-axis grid line transform\nax.yaxis.grid(color='gray', linestyle='-', linewidth=0.5, transform=None)\n\n# Set the x-axis grid line data\nax.xaxis.grid(color='gray', linestyle='-', linewidth=0.5, data=None)\n\n# Set the y-axis grid line data\nax.yaxis.grid(color='gray', linestyle='-', linewidth=0.5, data=None)\n\n# Set the x-axis grid line clip_on\nax.xaxis.grid(color='gray', linestyle='-', linewidth=0.5, clip_on=True)\n\n# Set the y-axis grid line clip_on\nax.yaxis.grid(color='gray', linestyle='-', linewidth=0.5, clip_on=True)\n\n# Set the x-axis grid line picker\nax.xaxis.grid(color='gray', linestyle='-', linewidth=0.5, picker=None)\n\n# Set the y-axis grid line picker\nax.yaxis.grid(color='gray', linestyle='-', linewidth=0.5, picker=None)\n\n# Set the x-axis grid line snap\nax.xaxis.grid(color='gray', linestyle='-', linewidth=0.5, snap=False)\n\n# Set the y-axis grid line snap\nax.yaxis.grid(color='gray', linestyle='-', linewidth=0.5, snap=False)\n\n# Set the x-axis grid line mouseover\nax.xaxis.grid(color='gray', linestyle='-', linewidth=0.5, mouseover=False)\n\n# Set the y-axis grid line mouseover\nax.yaxis.grid(color='gray', linestyle='-', linewidth=0.5, mouseover=False)\n\n# Set the x-axis grid line interactive\nax.xaxis.grid(color='gray', linestyle='-', linewidth=0.5, interactive=False)\n\n# Set the y-axis grid line interactive\nax.yaxis.grid(color='gray', linestyle='-', linewidth=0.5, interactive=False)\n\n# Set the x-axis grid line animated\nax.xaxis.grid(color='gray', linestyle='-', linewidth=0.5, animated=False)\n\n# Set the y-axis grid line animated\nax.yaxis.grid(color='gray', linestyle='-', linewidth=0.5, animated=False)\n\n# Set the x-axis grid line visible\nax.xaxis.grid(color='gray', linestyle='-', linewidth=0.5, visible=True)\n\n# Set the y-axis grid line visible\nax.yaxis.grid(color='gray', linestyle='-', linewidth=0.5, visible=True)\n\n# Set the x-axis grid line which\nax.xaxis.grid(color='gray', linestyle='-', linewidth=0.5, which='major')\n\n# Set the y-axis grid line which\nax.yaxis.grid(color='gray', linestyle='-', linewidth=0.5, which='major')\n\n# Set the x-axis grid line path\nax.xaxis.grid(color='gray', linestyle='-', linewidth=0.5, path=None)\n\n# Set the y-axis grid line path\nax.yaxis.grid(color='gray', linestyle='-', linewidth=0.5, path=None)\n\n# Set the x-axis grid line transform\nax.xaxis.grid(color='gray', linestyle='-', linewidth=0.5, transform=None)\n\n# Set the y-axis grid line transform\nax.yaxis.grid(color='gray', linestyle='-', linewidth=0.5, transform=None)\n\n# Set the x-axis grid line data\nax.xaxis.grid(color='gray', linestyle='-', linewidth=0.5, data=None)\n\n# Set the y-axis grid line data\nax.yaxis.grid(color='gray', linestyle='-', linewidth=0.5, data=None)\n\n# Set the x-axis grid line clip_on\nax.xaxis.grid(color='gray', linestyle='-', linewidth=0.5, clip_on=True)\n\n# Set the y-axis grid line clip_on\nax.yaxis.grid(color='gray', linestyle='-', linewidth=0.5, clip_on=True)\n\n# Set the x-axis grid line picker\nax.xaxis.grid(color='gray', linestyle='-', linewidth=0.5, picker=None)\n\n# Set the y-axis grid line picker\nax.yaxis.grid(color='gray', linestyle='-', linewidth=0.5, picker=None)\n\n# Set the x-axis grid line snap\nax.xaxis.grid(color='gray', linestyle='-', linewidth=0.5, snap=False)\n\n# Set the y-axis grid line snap\nax.yaxis.grid(color='gray', linestyle='-', linewidth=0.5, snap=False)\n\n# Set the x-axis grid line mouseover\nax.xaxis.grid(color='gray', linestyle='-', linewidth=0.5, mouseover=False)\n\n# Set the y-axis grid line mouseover\nax.yaxis.grid(color='gray', linestyle='-', linewidth=0.5, mouseover=False)\n\n# Set the x-axis grid line interactive\nax.xaxis.grid(color='gray', linestyle='-', linewidth=0.5, interactive=False)\n\n# Set the y-axis grid line interactive\nax.yaxis.grid(color='gray', linestyle='-', linewidth=0.5, interactive=False)\n\n# Set the x-axis grid line animated\nax.xaxis.grid(color='gray', linestyle='-', linewidth=0.5, animated=False)\n\n# Set the y-axis grid line animated\nax.yaxis.grid(color='gray', linestyle='-', linewidth=0.5, animated=False)\n\n# Set the x-axis grid line visible\nax.xaxis.grid(color='gray', linestyle='-', linewidth=0.5, visible=True)\n\n# Set the y-axis grid line visible\nax.yaxis.grid(color='gray', linestyle='-', linewidth=0.5, visible=True)\n\n# Set the x-axis grid line which\nax.xaxis.grid(color='gray', linestyle='-', linewidth=0.5, which='major')\n\n# Set the y-axis grid line which\nax.yaxis.grid(color='gray', linestyle='-', linewidth=0.5, which='major')\n\n# Set the x-axis grid line path\nax.xaxis.grid(color='gray', linestyle='-', linewidth=0.5, path=None)\n\n# Set the y-axis grid line path\nax.yaxis.grid(color='gray', linestyle='-', linewidth=0.5, path=None)\n\n# Set the x-axis grid line transform\nax.xaxis.grid(color='gray', linestyle='-', linewidth=0.5, transform=None)\n\n# Set the y-axis grid line transform\nax.yaxis.grid(color='gray', linestyle='-', linewidth=0.5, transform=None)\n\n# Set the x-axis grid line data\nax.xaxis.grid(color='gray', linestyle='-', linewidth=0.5, data=None)\n\n# Set the y-axis grid line data\nax.yaxis.grid(color='gray', linestyle='-', linewidth=0.5, data=None)\n\n# Set the x-axis grid line clip_on\nax.xaxis.grid(color='gray', linestyle='-', linewidth=0.5, clip_on=True)\n\n# Set the y-axis grid line clip_on\nax.yaxis.grid(color='gray', linestyle='-', linewidth=0.5, clip_on=True)\n\n# Set the x-axis grid line picker\nax.xaxis.grid(color='gray', linestyle='-', linewidth=0.5, picker=None)\n\n# Set the y-axis grid line picker\nax.yaxis.grid(color='gray', linestyle='-', linewidth=0.5, picker=None)\n\n# Set the x-axis grid line snap\nax.xaxis.grid(color='gray', linestyle='-', linewidth=0.5, snap=False)\n\n# Set the y-axis grid line snap\nax.yaxis.grid(color='gray', linestyle='-', linewidth=0.5, snap=False)\n\n# Set the x-axis grid line mouseover\nax.xaxis.grid(color='gray', linestyle='-', linewidth=0.5, mouseover=False)\n\n# Set the y-axis grid line mouseover\nax.yaxis.grid(color='gray', linestyle='-', linewidth=0.5, mouseover=False)\n\n# Set the x-axis grid line interactive\nax.xaxis.grid(color='gray', linestyle='-', linewidth=0.5, interactive=False)\n\n# Set the y-axis grid line interactive\nax.yaxis.grid(color='gray', linestyle='-', linewidth=0.5, interactive=False)\n\n# Set the x-axis grid line animated\nax.xaxis.grid(color='gray', linestyle='-', linewidth=0.5, animated=False)\n\n# Set the y-axis grid line animated\nax.yaxis.grid(color='gray', linestyle='-', linewidth=0.5, animated=False)\n\n# Set the x-axis grid line visible\nax.xaxis.grid(color='gray', linestyle='-', linewidth=0.5, visible=True)\n\n# Set the y-axis grid line visible\nax.yaxis.grid(color='gray', linestyle='-', linewidth=0.5, visible=True)\n\n# Set the x-axis grid line which\nax.xaxis.grid(color='gray', linestyle='-', linewidth=0.5, which='major')\n\n# Set the y-axis grid line which\nax.yaxis.grid(color='gray', linestyle='-', linewidth=0.5, which='major')\n\n# Set the x-axis grid line path\nax.xaxis.grid(color='gray', linestyle='-', linewidth=0.5, path=None)\n\n# Set the y-axis grid line path\nax.yaxis.grid(color='gray', linestyle='-', linewidth=0.5, path=None)\n\n# Set the x-axis grid line transform\nax.xaxis.grid(color='gray', linestyle='-', linewidth=0.5, transform=None)\n\n# Set the y-axis grid line transform\nax.yaxis.grid(color='gray', linestyle='-', linewidth=0.5, transform=None)\n\n# Set the x-axis grid line data\nax.xaxis.grid(color='gray', linestyle='-', linewidth=0.5, data=None)\n\n# Set the y-axis grid line data\nax.yaxis.grid(color='gray', linestyle='-', linewidth=0.5, data=None)\n\n# Set the x-axis grid line clip_on\nax.xaxis.grid(color='gray', linestyle='-', linewidth=0.5, clip_on=True)\n\n# Set the y-axis grid line clip_on\nax.yaxis.grid(color='gray', linestyle='-', linewidth=0.5, clip_on=True)\n\n# Set the x-axis grid line picker\nax.xaxis.grid(color='gray', linestyle='-', linewidth=0.5, picker=None)\n\n# Set the y-axis grid line picker\nax.yaxis.grid(color='gray', linestyle='-', linewidth=0.5, picker=None)\n\n# Set the x-axis grid line snap\nax.xaxis.grid(color='gray', linestyle='-', linewidth=0.5, snap=False)\n\n# Set the y-axis grid line snap\nax.yaxis.grid(color='gray', linestyle='-', linewidth=0.5, snap=False)\n\n# Set the x-axis grid line mouseover\nax.xaxis.grid(color='gray', linestyle='-', linewidth=0.5, mouseover=False)\n\n# Set the y-axis grid line mouseover\nax.yaxis.grid(color='gray', linestyle='-', linewidth=0.5, mouseover=False)\n\n# Set the x-axis grid line interactive\nax.xaxis.grid(color='gray', linestyle='-', linewidth=0.5, interactive=False)\n\n# Set the y-axis grid line interactive\nax.yaxis.grid(color='gray', linestyle='-', linewidth=0.5, interactive=False)\n\n# Set the x-axis grid line animated\nax.xaxis.grid(color='gray', linestyle='-', linewidth=0.5, animated=False)\n\n# Set the y-axis grid line animated\nax.yaxis.grid(color='gray', linestyle='-', linewidth=0.5, animated=False)\n\n# Set the x-axis grid line visible\nax.xaxis.grid(color='gray', linestyle='-', linewidth=0.5, visible=True)\n\n# Set the y-axis grid line visible\nax.yaxis.grid(color='gray', linestyle='-', linewidth=0.5, visible=True)\n\n# Set the x-axis grid line which\nax.xaxis.grid(color='gray', linestyle='-', linewidth=0.5, which='major')\n\n# Set the y-axis grid line which\nax.yaxis.grid(color='gray', linestyle='-', linewidth=0.5, which='major')\n\n# Set the x-axis grid line path\nax.xaxis.grid(color='gray', linestyle='-', linewidth=0.5, path=None)\n\n# Set the y-axis grid line path\nax.yaxis.grid(color='gray', linestyle='-', linewidth"}
{"file": "dataset/ori_500/CB_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 4.0))\n\n# Set the title of the graph\nax.set_title('Comparison of APO & APO-APEs (GPT-3 5-Turbo)')\n\n# Set the x-axis label\nax.set_xlabel('Tasks')\n\n# Set the y-axis label\nax.set_ylabel('Scores')\n\n# Set the x-ticks\nax.set_xticks([0, 1, 2, 3, 4])\nax.set_xticklabels(['snarks', 'navigate', 'question_selection', 'object_counting'])\n\n# Set the y-limits\nax.set_ylim(0.4, 0.9)\n\n# Set the y-ticks\nax.set_yticks([0.4, 0.5, 0.6, 0.7, 0.8, 0.9])\n\n# Set the y-tick labels\nax.set_yticklabels(['0.4', '0.5', '0.6', '0.7', '0.8', '0.9'])\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the text\nax.set_color_cycle(['blue', 'green', 'red', 'cyan', 'magenta', 'yellow', 'black'])\n\n# Set the color of the line\nax.plot([0, 1, 2, 3, 4], [0.7, 0.8, 0.9, 0.7, 0.6], 'o-')\n\n# Set the color of the scatter plot\nax.scatter([0, 1, 2, 3, 4], [0.7, 0.8, 0.9, 0.7, 0.6], s=100, c='gray')\n\n# Set the color of the bars\nax.bar([0, 1, 2, 3, 4], [0.7, 0.8, 0.9, 0.7, 0.6], color='blue')\n\n# Set the color of the rectangles\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='blue'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='green'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='red'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='cyan'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='magenta'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='yellow'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='black'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='gray'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='silver'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='gold'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='brown'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='purple'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='orange'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='pink'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lime'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='cyan'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='magenta'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='yellow'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='black'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='gray'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='silver'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='gold'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='brown'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='purple'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='orange'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='pink'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lime'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='cyan'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='magenta'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='yellow'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='black'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='gray'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='silver'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='gold'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='brown'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='purple'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='orange'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='pink'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lime'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='cyan'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='magenta'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='yellow'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='black'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='gray'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='silver'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='gold'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='brown'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='purple'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='orange'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='pink'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lime'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='cyan'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='magenta'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='yellow'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='black'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='gray'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='silver'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='gold'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='brown'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='purple'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='orange'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='pink'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lime'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='cyan'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='magenta'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='yellow'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='black'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='gray'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='silver'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='gold'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='brown'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='purple'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='orange'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='pink'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lime'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='cyan'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='magenta'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='yellow'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='black'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='gray'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='silver'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='gold'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='brown'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='purple'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='orange'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='pink'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lime'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='cyan'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='magenta'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='yellow'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='black'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='gray'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='silver'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='gold'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='brown'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='purple'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='orange'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='pink'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lime'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='cyan'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='magenta'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='yellow'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='black'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='gray'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='silver'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='gold'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='brown'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='purple'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='orange'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='pink'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lime'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='cyan'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='magenta'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='yellow'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='black'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='gray'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='silver'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='gold'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='brown'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0, 0), 1, "}
{"file": "dataset/ori_500/CB_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Set the title of the graph\nax.set_title('summarization_xsum:temperature=0.3,device=cuda')\n\n# Create a rectangle for the background\nrect = plt.Rectangle((0, 0), 100, 100, color='lightpink')\nax.add_patch(rect)\n\n# Create a rectangle for the temperature\nrect = plt.Rectangle((0, 0), 100, 100, color='lightblue')\nax.add_patch(rect)\n\n# Create a rectangle for the device\nrect = plt.Rectangle((0, 0), 100, 100, color='lightgreen')\nax.add_patch(rect)\n\n# Create a rectangle for the time\nrect = plt.Rectangle((0, 0), 100, 100, color='lightyellow')\nax.add_patch(rect)\n\n# Create a rectangle for the count\nrect = plt.Rectangle((0, 0), 100, 100, color='lightcyan')\nax.add_patch(rect)\n\n# Create a rectangle for the temperature\nrect = plt.Rectangle((0, 0), 100, 100, color='lightcoral')\nax.add_patch(rect)\n\n# Create a rectangle for the device\nrect = plt.Rectangle((0, 0), 100, 100, color='lightseagreen')\nax.add_patch(rect)\n\n# Create a rectangle for the time\nrect = plt.Rectangle((0, 0), 100, 100, color='lightskyblue')\nax.add_patch(rect)\n\n# Create a rectangle for the count\nrect = plt.Rectangle((0, 0), 100, 100, color='lightsteelblue')\nax.add_patch(rect)\n\n# Create a rectangle for the temperature\nrect = plt.Rectangle((0, 0), 100, 100, color='lightyellow')\nax.add_patch(rect)\n\n# Create a rectangle for the device\nrect = plt.Rectangle((0, 0), 100, 100, color='lightgreen')\nax.add_patch(rect)\n\n# Create a rectangle for the time\nrect = plt.Rectangle((0, 0), 100, 100, color='lightcoral')\nax.add_patch(rect)\n\n# Create a rectangle for the count\nrect = plt.Rectangle((0, 0), 100, 100, color='lightcyan')\nax.add_patch(rect)\n\n# Create a rectangle for the temperature\nrect = plt.Rectangle((0, 0), 100, 100, color='lightseagreen')\nax.add_patch(rect)\n\n# Create a rectangle for the device\nrect = plt.Rectangle((0, 0), 100, 100, color='lightskyblue')\nax.add_patch(rect)\n\n# Create a rectangle for the time\nrect = plt.Rectangle((0, 0), 100, 100, color='lightsteelblue')\nax.add_patch(rect)\n\n# Create a rectangle for the count\nrect = plt.Rectangle((0, 0), 100, 100, color='lightyellow')\nax.add_patch(rect)\n\n# Create a rectangle for the temperature\nrect = plt.Rectangle((0, 0), 100, 100, color='lightgreen')\nax.add_patch(rect)\n\n# Create a rectangle for the device\nrect = plt.Rectangle((0, 0), 100, 100, color='lightcoral')\nax.add_patch(rect)\n\n# Create a rectangle for the time\nrect = plt.Rectangle((0, 0), 100, 100, color='lightcyan')\nax.add_patch(rect)\n\n# Create a rectangle for the count\nrect = plt.Rectangle((0, 0), 100, 100, color='lightseagreen')\nax.add_patch(rect)\n\n# Create a rectangle for the temperature\nrect = plt.Rectangle((0, 0), 100, 100, color='lightskyblue')\nax.add_patch(rect)\n\n# Create a rectangle for the device\nrect = plt.Rectangle((0, 0), 100, 100, color='lightsteelblue')\nax.add_patch(rect)\n\n# Create a rectangle for the time\nrect = plt.Rectangle((0, 0), 100, 100, color='lightyellow')\nax.add_patch(rect)\n\n# Create a rectangle for the count\nrect = plt.Rectangle((0, 0), 100, 100, color='lightgreen')\nax.add_patch(rect)\n\n# Create a rectangle for the temperature\nrect = plt.Rectangle((0, 0), 100, 100, color='lightcoral')\nax.add_patch(rect)\n\n# Create a rectangle for the device\nrect = plt.Rectangle((0, 0), 100, 100, color='lightcyan')\nax.add_patch(rect)\n\n# Create a rectangle for the time\nrect = plt.Rectangle((0, 0), 100, 100, color='lightseagreen')\nax.add_patch(rect)\n\n# Create a rectangle for the count\nrect = plt.Rectangle((0, 0), 100, 100, color='lightskyblue')\nax.add_patch(rect)\n\n# Create a rectangle for the temperature\nrect = plt.Rectangle((0, 0), 100, 100, color='lightsteelblue')\nax.add_patch(rect)\n\n# Create a rectangle for the device\nrect = plt.Rectangle((0, 0), 100, 100, color='lightyellow')\nax.add_patch(rect)\n\n# Create a rectangle for the time\nrect = plt.Rectangle((0, 0), 100, 100, color='lightgreen')\nax.add_patch(rect)\n\n# Create a rectangle for the count\nrect = plt.Rectangle((0, 0), 100, 100, color='lightcoral')\nax.add_patch(rect)\n\n# Create a rectangle for the temperature\nrect = plt.Rectangle((0, 0), 100, 100, color='lightcyan')\nax.add_patch(rect)\n\n# Create a rectangle for the device\nrect = plt.Rectangle((0, 0), 100, 100, color='lightseagreen')\nax.add_patch(rect)\n\n# Create a rectangle for the time\nrect = plt.Rectangle((0, 0), 100, 100, color='lightskyblue')\nax.add_patch(rect)\n\n# Create a rectangle for the count\nrect = plt.Rectangle((0, 0), 100, 100, color='lightsteelblue')\nax.add_patch(rect)\n\n# Create a rectangle for the temperature\nrect = plt.Rectangle((0, 0), 100, 100, color='lightyellow')\nax.add_patch(rect)\n\n# Create a rectangle for the device\nrect = plt.Rectangle((0, 0), 100, 100, color='lightgreen')\nax.add_patch(rect)\n\n# Create a rectangle for the time\nrect = plt.Rectangle((0, 0), 100, 100, color='lightcoral')\nax.add_patch(rect)\n\n# Create a rectangle for the count\nrect = plt.Rectangle((0, 0), 100, 100, color='lightcyan')\nax.add_patch(rect)\n\n# Create a rectangle for the temperature\nrect = plt.Rectangle((0, 0), 100, 100, color='lightseagreen')\nax.add_patch(rect)\n\n# Create a rectangle for the device\nrect = plt.Rectangle((0, 0), 100, 100, color='lightskyblue')\nax.add_patch(rect)\n\n# Create a rectangle for the time\nrect = plt.Rectangle((0, 0), 100, 100, color='lightsteelblue')\nax.add_patch(rect)\n\n# Create a rectangle for the count\nrect = plt.Rectangle((0, 0), 100, 100, color='lightyellow')\nax.add_patch(rect)\n\n# Create a rectangle for the temperature\nrect = plt.Rectangle((0, 0), 100, 100, color='lightgreen')\nax.add_patch(rect)\n\n# Create a rectangle for the device\nrect = plt.Rectangle((0, 0), 100, 100, color='lightcoral')\nax.add_patch(rect)\n\n# Create a rectangle for the time\nrect = plt.Rectangle((0, 0), 100, 100, color='lightcyan')\nax.add_patch(rect)\n\n# Create a rectangle for the count\nrect = plt.Rectangle((0, 0), 100, 100, color='lightseagreen')\nax.add_patch(rect)\n\n# Create a rectangle for the temperature\nrect = plt.Rectangle((0, 0), 100, 100, color='lightskyblue')\nax.add_patch(rect)\n\n# Create a rectangle for the device\nrect = plt.Rectangle((0, 0), 100, 100, color='lightsteelblue')\nax.add_patch(rect)\n\n# Create a rectangle for the time\nrect = plt.Rectangle((0, 0), 100, 100, color='lightyellow')\nax.add_patch(rect)\n\n# Create a rectangle for the count\nrect = plt.Rectangle((0, 0), 100, 100, color='lightgreen')\nax.add_patch(rect)\n\n# Create a rectangle for the temperature\nrect = plt.Rectangle((0, 0), 100, 100, color='lightcoral')\nax.add_patch(rect)\n\n# Create a rectangle for the device\nrect = plt.Rectangle((0, 0), 100, 100, color='lightcyan')\nax.add_patch(rect)\n\n# Create a rectangle for the time\nrect = plt.Rectangle((0, 0), 100, 100, color='lightseagreen')\nax.add_patch(rect)\n\n# Create a rectangle for the count\nrect = plt.Rectangle((0, 0), 100, 100, color='lightskyblue')\nax.add_patch(rect)\n\n# Create a rectangle for the temperature\nrect = plt.Rectangle((0, 0), 100, 100, color='lightsteelblue')\nax.add_patch(rect)\n\n# Create a rectangle for the device\nrect = plt.Rectangle((0, 0), 100, 100, color='lightyellow')\nax.add_patch(rect)\n\n# Create a rectangle for the time\nrect = plt.Rectangle((0, 0), 100, 100, color='lightgreen')\nax.add_patch(rect)\n\n# Create a rectangle for the count\nrect = plt.Rectangle((0, 0), 100, 100, color='lightcoral')\nax.add_patch(rect)\n\n# Create a rectangle for the temperature\nrect = plt.Rectangle((0, 0), 100, 100, color='lightcyan')\nax.add_patch(rect)\n\n# Create a rectangle for the device\nrect = plt.Rectangle((0, 0), 100, 100, color='lightseagreen')\nax.add_patch(rect)\n\n# Create a rectangle for the time\nrect = plt.Rectangle((0, 0), 100, 100, color='lightskyblue')\nax.add_patch(rect)\n\n# Create a rectangle for the count\nrect = plt.Rectangle((0, 0), 100, 100, color='lightsteelblue')\nax.add_patch(rect)\n\n# Create a rectangle for the temperature\nrect = plt.Rectangle((0, 0), 100, 100, color='lightyellow')\nax.add_patch(rect)\n\n# Create a rectangle for the device\nrect = plt.Rectangle((0, 0), 100, 100, color='lightgreen')\nax.add_patch(rect)\n\n# Create a rectangle for the time\nrect = plt.Rectangle((0, 0), 100, 100, color='lightcoral')\nax.add_patch(rect)\n\n# Create a rectangle for the count\nrect = plt.Rectangle((0, 0), 100, 100, color='lightcyan')\nax.add_patch(rect)\n\n# Create a rectangle for the temperature\nrect = plt.Rectangle((0, 0), 100, 100, color='lightseagreen')\nax.add_patch(rect)\n\n# Create a rectangle for the device\nrect = plt.Rectangle((0, 0), 100, 100, color='lightskyblue')\nax.add_patch(rect)\n\n# Create a rectangle for the time\nrect = plt.Rectangle((0, 0), 100, 100, color='lightsteelblue')\nax.add_patch(rect)\n\n# Create a rectangle for the count\nrect = plt.Rectangle((0, 0), 100, 100, color='lightyellow')\nax.add_patch(rect)\n\n# Create a rectangle for the temperature\nrect = plt.Rectangle((0, 0), 100, 100, color='lightgreen')\nax.add_patch(rect)\n\n# Create a rectangle for the device\nrect = plt.Rectangle((0, 0), 100, 100, color='lightcoral')\nax.add_patch(rect)\n\n# Create a rectangle for the time\nrect = plt.Rectangle((0, 0), 100, 100, color='lightcyan')\nax.add_patch(rect)\n\n# Create a rectangle for the count\nrect = plt.Rectangle((0, 0), 100, 100, color='lightseagreen')\nax.add_patch(rect)\n\n# Create a rectangle for the temperature\nrect = plt.Rectangle((0, 0), 100, 100, color='lightskyblue')\nax.add_patch(rect)\n\n# Create a rectangle for the device\nrect = plt.Rectangle((0, 0), 100, 100, color='lightsteelblue')\nax.add_patch(rect)\n\n# Create a rectangle for the time\nrect = plt.Rectangle((0, 0), 100, 100, color='lightyellow')\nax.add_patch(rect)\n\n# Create a rectangle for the count\nrect = plt.Rectangle((0, 0), 100, 100, color='lightgreen')\nax.add_patch(rect)\n\n# Create a rectangle for the temperature\nrect = plt.Rectangle((0, 0), 100, 100, color='lightcoral')\nax.add_patch(rect)\n\n# Create a rectangle for the device\nrect = plt.Rectangle((0, 0), 100, 100, color='lightcyan')\nax.add_patch(rect)\n\n# Create a rectangle for the time\nrect = plt.Rectangle((0, 0), 100, 100, color='lightseagreen')\nax.add_patch(rect)\n\n# Create a rectangle for the count\nrect = plt.Rectangle((0, 0), 100, 100, color='lightskyblue')\nax.add_patch(rect)\n\n# Create a rectangle for the temperature\nrect = plt.Rectangle((0, 0), 100, 100, color='lightsteelblue')\nax.add_patch(rect)\n\n# Create a rectangle for the device\nrect = plt.Rectangle((0, 0), 100, 100, color='lightyellow')\nax.add_patch(rect)\n\n# Create a rectangle for the time\nrect = plt.Rectangle((0, 0), 100, 100, color='lightgreen')\nax.add_patch(rect)\n\n# Create a rectangle for the count\nrect = plt.Rectangle((0, 0), 100, 100, color='lightcoral')\nax.add_patch(rect)\n\n# Create a rectangle for the temperature\nrect = plt.Rectangle((0, 0), 100, 100, color='lightcyan')\nax.add_patch(rect)\n\n# Create a rectangle for the device\nrect = plt.Rectangle((0, 0), 100, 100, color='lightseagreen')\nax.add_patch(rect)\n\n# Create a rectangle for the time\nrect = plt.Rectangle((0, 0), 100, 100, color='lightskyblue')\nax.add_patch(rect)\n\n# Create a rectangle for the count\nrect = plt.Rectangle((0, 0), 100, 100, color='lightsteelblue')\nax.add_patch(rect)\n\n# Create a rectangle for the temperature\nrect = plt.Rectangle((0, 0), 100, 100, color='lightyellow')\nax.add_patch(rect)\n\n# Create a rectangle for the device\nrect = plt.Rectangle((0, 0), 100, 100, color='lightgreen')\nax.add_patch(rect)\n\n# Create a rectangle for the time\nrect = plt.Rectangle((0, 0), 100, 100, color='lightcoral')\nax.add_patch(rect)\n\n# Create a rectangle for the count\nrect = plt.Rectangle((0, 0), 100, 100, color='lightcyan')\nax.add_patch(rect)\n\n# Create a rectangle for the temperature\nrect = plt.Rectangle((0, 0), 100, 100, color='lightseagreen')\nax.add_patch(rect)\n\n# Create a rectangle for the device\nrect = plt.Rectangle((0, 0), 100, 100, color='lightskyblue')\nax.add_patch(rect)\n\n# Create a rectangle for the time\nrect = plt.Rectangle((0, 0), 100, 100, color='lightsteelblue')\nax.add_patch(rect)\n\n# Create a rectangle for the count\nrect = plt.Rectangle((0, 0), 100, 100, color='lightyellow')\nax.add_patch(rect)\n\n# Create a rectangle for the temperature\nrect = plt.Rectangle((0, 0), 100, 100, color='lightgreen')\nax.add_patch(rect)\n\n# Create a rectangle for the device\nrect = plt.Rectangle((0, 0), 100, 100, color='lightcoral')\nax.add_patch(rect)\n\n# Create a rectangle for the time\nrect = plt.Rectangle((0, 0), 100, 100, color='lightcyan')\nax.add_patch(rect)\n\n# Create a rectangle for the"}
{"file": "dataset/ori_500/CB_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 4.0))\n\n# Create a pie chart\nax.pie([23.7, 3.0, 1.0, 73.3], labels=[\"Same\", \"Different\", \"Incomparable\", \"English\"], autopct='%1.1f%%', startangle=90)\n\n# Set the title of the pie chart\nax.set_title('Pie Chart')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_16.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(7, 5))\n\n# Set the title of the plot\nax.set_title('Algorithm Performance')\n\n# Set the x-axis label\nax.set_xlabel('Algorithms')\n\n# Set the y-axis label\nax.set_ylabel('Performance (Seconds)')\n\n# Create a scatter plot\nax.scatter(['SEAC', 'SAC(20Hz)'], [49, 48], color='red')\n\n# Create a bar chart\nax.bar(['SEAC', 'SAC(20Hz)'], [47, 46], color='blue')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_17.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the first graph\nx = [2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015]\ny = [63.64, 80.08, 84.27, 88.27, 90.11, 92.00, 93.89, 95.00, 96.00, 97.00, 98.00]\n\n# Data for the second graph\nx1 = [2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015]\ny1 = [75.00, 87.20, 89.12, 90.12, 91.20, 92.00, 93.89, 94.50, 95.00, 96.00, 97.00]\n\nfig, ax = plt.subplots(figsize=(10.0, 4.0))\n\n# Plot the first graph\nax.plot(x, y, 'b-')\nax.set_title('Average Recall Scores by Method')\nax.set_xlabel('Year')\nax.set_ylabel('Scores')\n\n# Plot the second graph\nax1 = fig.add_subplot(122)\nax1.plot(x1, y1, 'r-')\nax1.set_title('Average F1 Scores by Method')\nax1.set_xlabel('Year')\nax1.set_ylabel('Scores')\n\n# Add rectangles for each bar chart\nrects = ax.bar(range(len(y)), y, color='skyblue')\nfor rect in rects:\n    height = rect.get_height()\n    ax.annotate('{}'.format(height),\n                xy=(rect.get_x() + rect.get_width() / 2, height),\n                xytext=(0, 3),  # 3 points vertical offset\n                textcoords=\"offset points\",\n                ha='center', va='bottom')\n\nrects1 = ax1.bar(range(len(y1)), y1, color='lightblue')\nfor rect in rects1:\n    height = rect.get_height()\n    ax1.annotate('{}'.format(height),\n                 xy=(rect.get_x() + rect.get_width() / 2, height),\n                 xytext=(0, 3),  # 3 points vertical offset\n                 textcoords=\"offset points\",\n                 ha='center', va='bottom')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_18.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Set the title of the plot\nax.set_title('Micro F1')\n\n# Set the x-axis label\nax.set_xlabel('Few-Shot K')\n\n# Set the y-axis label\nax.set_ylabel('Micro F1')\n\n# Create a scatter plot with a blue color for the first data point\nax.scatter(4, 92, c='blue', s=50)\n\n# Create a scatter plot with a red color for the second data point\nax.scatter(8, 90, c='red', s=50)\n\n# Create a scatter plot with a blue color for the third data point\nax.scatter(12, 90, c='blue', s=50)\n\n# Create a scatter plot with a red color for the fourth data point\nax.scatter(16, 90, c='red', s=50)\n\n# Create a scatter plot with a blue color for the fifth data point\nax.scatter(20, 90, c='blue', s=50)\n\n# Create a scatter plot with a red color for the sixth data point\nax.scatter(24, 90, c='red', s=50)\n\n# Create a scatter plot with a blue color for the seventh data point\nax.scatter(28, 90, c='blue', s=50)\n\n# Create a scatter plot with a red color for the eighth data point\nax.scatter(32, 90, c='red', s=50)\n\n# Create a line plot with a blue color for the first data point\nax.plot([4, 8, 12, 16, 20, 24, 28, 32], [92, 90, 90, 90, 90, 90, 90, 90], c='blue')\n\n# Create a line plot with a red color for the second data point\nax.plot([4, 8, 12, 16, 20, 24, 28, 32], [94, 92, 92, 92, 92, 92, 92, 92], c='red')\n\n# Create a line plot with a blue color for the third data point\nax.plot([4, 8, 12, 16, 20, 24, 28, 32], [96, 94, 94, 94, 94, 94, 94, 94], c='blue')\n\n# Create a line plot with a red color for the fourth data point\nax.plot([4, 8, 12, 16, 20, 24, 28, 32], [98, 96, 96, 96, 96, 96, 96, 96], c='red')\n\n# Create a line plot with a blue color for the fifth data point\nax.plot([4, 8, 12, 16, 20, 24, 28, 32], [100, 98, 98, 98, 98, 98, 98, 98], c='blue')\n\n# Create a line plot with a red color for the sixth data point\nax.plot([4, 8, 12, 16, 20, 24, 28, 32], [102, 100, 100, 100, 100, 100, 100, 100], c='red')\n\n# Create a line plot with a blue color for the seventh data point\nax.plot([4, 8, 12, 16, 20, 24, 28, 32], [104, 102, 102, 102, 102, 102, 102, 102], c='blue')\n\n# Create a line plot with a red color for the eighth data point\nax.plot([4, 8, 12, 16, 20, 24, 28, 32], [106, 104, 104, 104, 104, 104, 104, 104], c='red')\n\n# Create a line plot with a blue color for the ninth data point\nax.plot([4, 8, 12, 16, 20, 24, 28, 32], [108, 106, 106, 106, 106, 106, 106, 106], c='blue')\n\n# Create a line plot with a red color for the tenth data point\nax.plot([4, 8, 12, 16, 20, 24, 28, 32], [110, 108, 108, 108, 108, 108, 108, 108], c='red')\n\n# Create a line plot with a blue color for the eleventh data point\nax.plot([4, 8, 12, 16, 20, 24, 28, 32], [112, 110, 110, 110, 110, 110, 110, 110], c='blue')\n\n# Create a line plot with a red color for the twelfth data point\nax.plot([4, 8, 12, 16, 20, 24, 28, 32], [114, 112, 112, 112, 112, 112, 112, 112], c='red')\n\n# Create a line plot with a blue color for the thirteenth data point\nax.plot([4, 8, 12, 16, 20, 24, 28, 32], [116, 114, 114, 114, 114, 114, 114, 114], c='blue')\n\n# Create a line plot with a red color for the fourteenth data point\nax.plot([4, 8, 12, 16, 20, 24, 28, 32], [118, 116, 116, 116, 116, 116, 116, 116], c='red')\n\n# Create a line plot with a blue color for the fifteenth data point\nax.plot([4, 8, 12, 16, 20, 24, 28, 32], [120, 118, 118, 118, 118, 118, 118, 118], c='blue')\n\n# Create a line plot with a red color for the sixteenth data point\nax.plot([4, 8, 12, 16, 20, 24, 28, 32], [122, 120, 120, 120, 120, 120, 120, 120], c='red')\n\n# Create a line plot with a blue color for the seventeenth data point\nax.plot([4, 8, 12, 16, 20, 24, 28, 32], [124, 122, 122, 122, 122, 122, 122, 122], c='blue')\n\n# Create a line plot with a red color for the eighteenth data point\nax.plot([4, 8, 12, 16, 20, 24, 28, 32], [126, 124, 124, 124, 124, 124, 124, 124], c='red')\n\n# Create a line plot with a blue color for the nineteenth data point\nax.plot([4, 8, 12, 16, 20, 24, 28, 32], [128, 126, 126, 126, 126, 126, 126, 126], c='blue')\n\n# Create a line plot with a red color for the twentieth data point\nax.plot([4, 8, 12, 16, 20, 24, 28, 32], [130, 128, 128, 128, 128, 128, 128, 128], c='red')\n\n# Create a line plot with a blue color for the twenty-first data point\nax.plot([4, 8, 12, 16, 20, 24, 28, 32], [132, 130, 130, 130, 130, 130, 130, 130], c='blue')\n\n# Create a line plot with a red color for the twenty-second data point\nax.plot([4, 8, 12, 16, 20, 24, 28, 32], [134, 132, 132, 132, 132, 132, 132, 132], c='red')\n\n# Create a line plot with a blue color for the twenty-third data point\nax.plot([4, 8, 12, 16, 20, 24, 28, 32], [136, 134, 134, 134, 134, 134, 134, 134], c='blue')\n\n# Create a line plot with a red color for the twenty-fourth data point\nax.plot([4, 8, 12, 16, 20, 24, 28, 32], [138, 136, 136, 136, 136, 136, 136, 136], c='red')\n\n# Create a line plot with a blue color for the twenty-fifth data point\nax.plot([4, 8, 12, 16, 20, 24, 28, 32], [140, 138, 138, 138, 138, 138, 138, 138], c='blue')\n\n# Create a line plot with a red color for the twenty-sixth data point\nax.plot([4, 8, 12, 16, 20, 24, 28, 32], [142, 140, 140, 140, 140, 140, 140, 140], c='red')\n\n# Create a line plot with a blue color for the twenty-seventh data point\nax.plot([4, 8, 12, 16, 20, 24, 28, 32], [144, 142, 142, 142, 142, 142, 142, 142], c='blue')\n\n# Create a line plot with a red color for the twenty-eighth data point\nax.plot([4, 8, 12, 16, 20, 24, 28, 32], [146, 144, 144, 144, 144, 144, 144, 144], c='red')\n\n# Create a line plot with a blue color for the twenty-ninth data point\nax.plot([4, 8, 12, 16, 20, 24, 28, 32], [148, 146, 146, 146, 146, 146, 146, 146], c='blue')\n\n# Create a line plot with a red color for the thirtieth data point\nax.plot([4, 8, 12, 16, 20, 24, 28, 32], [150, 148, 148, 148, 148, 148, 148, 148], c='red')\n\n# Create a line plot with a blue color for the thirty-first data point\nax.plot([4, 8, 12, 16, 20, 24, 28, 32], [152, 150, 150, 150, 150, 150, 150, 150], c='blue')\n\n# Create a line plot with a red color for the thirty-second data point\nax.plot([4, 8, 12, 16, 20, 24, 28, 32], [154, 152, 152, 152, 152, 152, 152, 152], c='red')\n\n# Create a line plot with a blue color for the thirty-third data point\nax.plot([4, 8, 12, 16, 20, 24, 28, 32], [156, 154, 154, 154, 154, 154, 154, 154], c='blue')\n\n# Create a line plot with a red color for the thirty-fourth data point\nax.plot([4, 8, 12, 16, 20, 24, 28, 32], [158, 156, 156, 156, 156, 156, 156, 156], c='red')\n\n# Create a line plot with a blue color for the thirty-fifth data point\nax.plot([4, 8, 12, 16, 20, 24, 28, 32], [160, 158, 158, 158, 158, 158, 158, 158], c='blue')\n\n# Create a line plot with a red color for the thirty-sixth data point\nax.plot([4, 8, 12, 16, 20, 24, 28, 32], [162, 160, 160, 160, 160, 160, 160, 160], c='red')\n\n# Create a line plot with a blue color for the thirty-seventh data point\nax.plot([4, 8, 12, 16, 20, 24, 28, 32], [164, 162, 162, 162, 162, 162, 162, 162], c='blue')\n\n# Create a line plot with a red color for the thirty-eighth data point\nax.plot([4, 8, 12, 16, 20, 24, 28, 32], [166, 164, 164, 164, 164, 164, 164, 164], c='red')\n\n# Create a line plot with a blue color for the thirty-ninth data point\nax.plot([4, 8, 12, 16, 20, 24, 28, 32], [168, 166, 166, 166, 166, 166, 166, 166], c='blue')\n\n# Create a line plot with a red color for the fortyth data point\nax.plot([4, 8, 12, 16, 20, 24, 28, 32], [170, 168, 168, 168, 168, 168, 168, 168], c='red')\n\n# Create a line plot with a blue color for the forty-first data point\nax.plot([4, 8, 12, 16, 20, 24, 28, 32], [172, 170, 170, 170, 170, 170, 170, 170], c='blue')\n\n# Create a line plot with a red"}
{"file": "dataset/ori_500/CB_19.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(7.0, 7.0))\n\n# Set the title of the plot\nax.set_title('Car Efficiency vs Vehicle Parameter Size')\n\n# Set the x-axis label\nax.set_xlabel('Vehicle Parameter Size (units)')\n\n# Set the y-axis label\nax.set_ylabel('Efficiency (%)')\n\n# Set the x-axis limits\nax.set_xlim(0, 50)\n\n# Set the y-axis limits\nax.set_ylim(50, 85)\n\n# Plot the data\nax.plot([10, 20, 30, 40, 50], [60, 62, 65, 70, 75], 'ro-')\nax.plot([10, 20, 30, 40, 50], [70, 72, 75, 75, 80], 'bo-')\n\n# Add a legend\nax.legend(['Car A', 'Car B', 'Car C', 'Car D', 'Car E'])\n\n# Add a scatter plot for each car\nax.scatter([10, 20, 30, 40, 50], [60, 62, 65, 70, 75], color='red')\nax.scatter([10, 20, 30, 40, 50], [70, 72, 75, 75, 80], color='blue')\n\n# Add a text annotation for each car\nax.annotate('Car A', (10, 60))\nax.annotate('Car B', (20, 62))\nax.annotate('Car C', (30, 65))\nax.annotate('Car D', (40, 70))\nax.annotate('Car E', (50, 75))\n\n# Add a rectangle for the car model\nrect = plt.Rectangle((10, 60), 10, 10, color='red')\nax.add_patch(rect)\n\n# Add a circle for the car model\ncircle = plt.Circle((20, 62), 5, color='blue')\nax.add_patch(circle)\n\n# Add a star for the car model\nstar = plt.Polygon([[30, 65], [35, 70], [40, 65], [35, 60], [30, 65]], color='green')\nax.add_patch(star)\n\n# Add a triangle for the car model\ntriangle = plt.Polygon([[40, 70], [45, 75], [50, 70]], color='yellow')\nax.add_patch(triangle)\n\n# Add a rectangle for the car model\nrect = plt.Rectangle((50, 75), 10, 10, color='purple')\nax.add_patch(rect)\n\n# Add a circle for the car model\ncircle = plt.Circle((60, 77), 5, color='orange')\nax.add_patch(circle)\n\n# Add a star for the car model\nstar = plt.Polygon([[70, 80], [75, 85], [80, 80], [75, 75], [70, 80]], color='pink')\nax.add_patch(star)\n\n# Add a triangle for the car model\ntriangle = plt.Polygon([[80, 85], [85, 90], [90, 85]], color='brown')\nax.add_patch(triangle)\n\n# Add a rectangle for the car model\nrect = plt.Rectangle((90, 90), 10, 10, color='cyan')\nax.add_patch(rect)\n\n# Add a circle for the car model\ncircle = plt.Circle((100, 92), 5, color='gray')\nax.add_patch(circle)\n\n# Add a star for the car model\nstar = plt.Polygon([[110, 95], [115, 100], [120, 95], [115, 90], [110, 95]], color='magenta')\nax.add_patch(star)\n\n# Add a triangle for the car model\ntriangle = plt.Polygon([[120, 100], [125, 105], [130, 100]], color='lime')\nax.add_patch(triangle)\n\n# Add a rectangle for the car model\nrect = plt.Rectangle((130, 105), 10, 10, color='silver')\nax.add_patch(rect)\n\n# Add a circle for the car model\ncircle = plt.Circle((140, 107), 5, color='white')\nax.add_patch(circle)\n\n# Add a star for the car model\nstar = plt.Polygon([[150, 110], [155, 115], [160, 110], [155, 105], [150, 110]], color='black')\nax.add_patch(star)\n\n# Add a triangle for the car model\ntriangle = plt.Polygon([[160, 115], [165, 120], [170, 115]], color='gold')\nax.add_patch(triangle)\n\n# Add a rectangle for the car model\nrect = plt.Rectangle((170, 120), 10, 10, color='navy')\nax.add_patch(rect)\n\n# Add a circle for the car model\ncircle = plt.Circle((180, 122), 5, color='maroon')\nax.add_patch(circle)\n\n# Add a star for the car model\nstar = plt.Polygon([[190, 125], [195, 130], [200, 125], [195, 120], [190, 125]], color='olive')\nax.add_patch(star)\n\n# Add a triangle for the car model\ntriangle = plt.Polygon([[200, 130], [205, 135], [210, 130]], color='silver')\nax.add_patch(triangle)\n\n# Add a rectangle for the car model\nrect = plt.Rectangle((210, 135), 10, 10, color='white')\nax.add_patch(rect)\n\n# Add a circle for the car model\ncircle = plt.Circle((220, 137), 5, color='black')\nax.add_patch(circle)\n\n# Add a star for the car model\nstar = plt.Polygon([[230, 140], [235, 145], [240, 140], [235, 135], [230, 140]], color='gold')\nax.add_patch(star)\n\n# Add a triangle for the car model\ntriangle = plt.Polygon([[240, 145], [245, 150], [250, 145]], color='navy')\nax.add_patch(triangle)\n\n# Add a rectangle for the car model\nrect = plt.Rectangle((250, 150), 10, 10, color='maroon')\nax.add_patch(rect)\n\n# Add a circle for the car model\ncircle = plt.Circle((260, 152), 5, color='olive')\nax.add_patch(circle)\n\n# Add a star for the car model\nstar = plt.Polygon([[270, 155], [275, 160], [280, 155], [275, 150], [270, 155]], color='silver')\nax.add_patch(star)\n\n# Add a triangle for the car model\ntriangle = plt.Polygon([[280, 160], [285, 165], [290, 160]], color='white')\nax.add_patch(triangle)\n\n# Add a rectangle for the car model\nrect = plt.Rectangle((290, 165), 10, 10, color='black')\nax.add_patch(rect)\n\n# Add a circle for the car model\ncircle = plt.Circle((300, 167), 5, color='gold')\nax.add_patch(circle)\n\n# Add a star for the car model\nstar = plt.Polygon([[310, 170], [315, 175], [320, 170], [315, 165], [310, 170]], color='navy')\nax.add_patch(star)\n\n# Add a triangle for the car model\ntriangle = plt.Polygon([[320, 175], [325, 180], [330, 175]], color='maroon')\nax.add_patch(triangle)\n\n# Add a rectangle for the car model\nrect = plt.Rectangle((330, 180), 10, 10, color='olive')\nax.add_patch(rect)\n\n# Add a circle for the car model\ncircle = plt.Circle((340, 182), 5, color='silver')\nax.add_patch(circle)\n\n# Add a star for the car model\nstar = plt.Polygon([[350, 185], [355, 190], [360, 185], [355, 180], [350, 185]], color='white')\nax.add_patch(star)\n\n# Add a triangle for the car model\ntriangle = plt.Polygon([[360, 190], [365, 195], [370, 190]], color='black')\nax.add_patch(triangle)\n\n# Add a rectangle for the car model\nrect = plt.Rectangle((370, 195), 10, 10, color='gold')\nax.add_patch(rect)\n\n# Add a circle for the car model\ncircle = plt.Circle((380, 197), 5, color='navy')\nax.add_patch(circle)\n\n# Add a star for the car model\nstar = plt.Polygon([[390, 200], [395, 205], [400, 200], [395, 195], [390, 200]], color='maroon')\nax.add_patch(star)\n\n# Add a triangle for the car model\ntriangle = plt.Polygon([[400, 205], [405, 210], [410, 205]], color='olive')\nax.add_patch(triangle)\n\n# Add a rectangle for the car model\nrect = plt.Rectangle((410, 210), 10, 10, color='silver')\nax.add_patch(rect)\n\n# Add a circle for the car model\ncircle = plt.Circle((420, 212), 5, color='white')\nax.add_patch(circle)\n\n# Add a star for the car model\nstar = plt.Polygon([[430, 215], [435, 220], [440, 215], [435, 210], [430, 215]], color='black')\nax.add_patch(star)\n\n# Add a triangle for the car model\ntriangle = plt.Polygon([[440, 220], [445, 225], [450, 220]], color='gold')\nax.add_patch(triangle)\n\n# Add a rectangle for the car model\nrect = plt.Rectangle((450, 225), 10, 10, color='navy')\nax.add_patch(rect)\n\n# Add a circle for the car model\ncircle = plt.Circle((460, 227), 5, color='maroon')\nax.add_patch(circle)\n\n# Add a star for the car model\nstar = plt.Polygon([[470, 230], [475, 235], [480, 230], [475, 225], [470, 230]], color='olive')\nax.add_patch(star)\n\n# Add a triangle for the car model\ntriangle = plt.Polygon([[480, 235], [485, 240], [490, 235]], color='silver')\nax.add_patch(triangle)\n\n# Add a rectangle for the car model\nrect = plt.Rectangle((490, 240), 10, 10, color='white')\nax.add_patch(rect)\n\n# Add a circle for the car model\ncircle = plt.Circle((500, 242), 5, color='black')\nax.add_patch(circle)\n\n# Add a star for the car model\nstar = plt.Polygon([[510, 245], [515, 250], [520, 245], [515, 240], [510, 245]], color='gold')\nax.add_patch(star)\n\n# Add a triangle for the car model\ntriangle = plt.Polygon([[520, 250], [525, 255], [530, 250]], color='navy')\nax.add_patch(triangle)\n\n# Add a rectangle for the car model\nrect = plt.Rectangle((530, 255), 10, 10, color='maroon')\nax.add_patch(rect)\n\n# Add a circle for the car model\ncircle = plt.Circle((540, 257), 5, color='olive')\nax.add_patch(circle)\n\n# Add a star for the car model\nstar = plt.Polygon([[550, 260], [555, 265], [560, 260], [555, 255], [550, 260]], color='silver')\nax.add_patch(star)\n\n# Add a triangle for the car model\ntriangle = plt.Polygon([[560, 265], [565, 270], [570, 265]], color='white')\nax.add_patch(triangle)\n\n# Add a rectangle for the car model\nrect = plt.Rectangle((570, 270), 10, 10, color='black')\nax.add_patch(rect)\n\n# Add a circle for the car model\ncircle = plt.Circle((580, 272), 5, color='gold')\nax.add_patch(circle)\n\n# Add a star for the car model\nstar = plt.Polygon([[590, 275], [595, 280], [600, 275], [595, 270], [590, 275]], color='navy')\nax.add_patch(star)\n\n# Add a triangle for the car model\ntriangle = plt.Polygon([[600, 280], [605, 285], [610, 280]], color='maroon')\nax.add_patch(triangle)\n\n# Add a rectangle for the car model\nrect = plt.Rectangle((610, 285), 10, 10, color='olive')\nax.add_patch(rect)\n\n# Add a circle for the car model\ncircle = plt.Circle((620, 287), 5, color='silver')\nax.add_patch(circle)\n\n# Add a star for the car model\nstar = plt.Polygon([[630, 290], [635, 295], [640, 290], [635, 285], [630, 290]], color='white')\nax.add_patch(star)\n\n# Add a triangle for the car model\ntriangle = plt.Polygon([[640, 295], [645, 300], [650, 295]], color='black')\nax.add_patch(triangle)\n\n# Add a rectangle for the car model\nrect = plt.Rectangle((650, 300), 10, 10, color='gold')\nax.add_patch(rect)\n\n# Add a circle for the car model\ncircle = plt.Circle((660, 302), 5, color='navy')\nax.add_patch(circle)\n\n# Add a star for the car model\nstar = plt.Polygon([[670, 305], [675, 310], [680, 305], [675, 300], [670, 305]], color='maroon')\nax.add_patch(star)\n\n# Add a triangle for the car model\ntriangle = plt.Polygon([[680, 310], [685, 315], [690, 310]], color='olive')\nax.add_patch(triangle)\n\n# Add a rectangle for the car model\nrect = plt.Rectangle((690, 315), 10, 10, color='silver')\nax.add_patch(rect)\n\n# Add a circle for the car model\ncircle = plt.Circle((700, 317), 5, color='white')\nax.add_patch(circle)\n\n# Add a star for the car model\nstar = plt.Polygon([[710, 320], [715, 325], [720, 320], [715, 315], [710, 320]], color='black')\nax.add_patch(star)\n\n# Add a triangle for the car model\ntriangle = plt.Polygon([[720, 325], [725, 330], [730, 325]], color='gold')\nax.add_patch(triangle)\n\n# Add a rectangle for the car model\nrect = plt.Rectangle((730, 330), 10, 10, color='navy')\nax.add_patch"}
{"file": "dataset/ori_500/CB_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\nmodels = ['GPT-2', 'Llama 2 7B', 'Llama 2 70B', 'Mixtral 8x7B', 'GPT-3.5', 'GPT-4']\nsuccess_rates = [16, 12, 12, 20, 12, 10]\ntrends = ['Simple Trend', 'Simple', 'Complex', 'Code']\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Plot the success rates\nax.plot(models, success_rates, marker='o', linestyle='-', color='blue')\n\n# Add trend labels\nfor i, model in enumerate(models):\n    ax.text(i, success_rates[i], trends[i], ha='center', va='bottom')\n\n# Set the title and labels\nax.set_title('Encoding/Decoding Schelling Points by Model')\nax.set_xlabel('Model')\nax.set_ylabel('Success Rate (%)')\n\n# Set the y-axis limits\nax.set_ylim(0, 60)\n\n# Set the x-axis limits\nax.set_xlim(-1, len(models))\n\n# Set the x-axis tick labels\nax.set_xticks(range(len(models)))\nax.set_xticklabels(models)\n\n# Set the y-axis tick labels\nax.set_yticks(np.arange(0, 61, 10))\n\n# Set the y-axis tick labels\nax.set_yticklabels([str(i) + '%' for i in range(0, 61, 10)])\n\n# Set the y-axis tick labels\nax.set_yticklabels([str(i) + '%' for i in range(0, 61, 10)])\n\n# Set the y-axis tick labels\nax.set_yticklabels([str(i) + '%' for i in range(0, 61, 10)])\n\n# Set the y-axis tick labels\nax.set_yticklabels([str(i) + '%' for i in range(0, 61, 10)])\n\n# Set the y-axis tick labels\nax.set_yticklabels([str(i) + '%' for i in range(0, 61, 10)])\n\n# Set the y-axis tick labels\nax.set_yticklabels([str(i) + '%' for i in range(0, 61, 10)])\n\n# Set the y-axis tick labels\nax.set_yticklabels([str(i) + '%' for i in range(0, 61, 10)])\n\n# Set the y-axis tick labels\nax.set_yticklabels([str(i) + '%' for i in range(0, 61, 10)])\n\n# Set the y-axis tick labels\nax.set_yticklabels([str(i) + '%' for i in range(0, 61, 10)])\n\n# Set the y-axis tick labels\nax.set_yticklabels([str(i) + '%' for i in range(0, 61, 10)])\n\n# Set the y-axis tick labels\nax.set_yticklabels([str(i) + '%' for i in range(0, 61, 10)])\n\n# Set the y-axis tick labels\nax.set_yticklabels([str(i) + '%' for i in range(0, 61, 10)])\n\n# Set the y-axis tick labels\nax.set_yticklabels([str(i) + '%' for i in range(0, 61, 10)])\n\n# Set the y-axis tick labels\nax.set_yticklabels([str(i) + '%' for i in range(0, 61, 10)])\n\n# Set the y-axis tick labels\nax.set_yticklabels([str(i) + '%' for i in range(0, 61, 10)])\n\n# Set the y-axis tick labels\nax.set_yticklabels([str(i) + '%' for i in range(0, 61, 10)])\n\n# Set the y-axis tick labels\nax.set_yticklabels([str(i) + '%' for i in range(0, 61, 10)])\n\n# Set the y-axis tick labels\nax.set_yticklabels([str(i) + '%' for i in range(0, 61, 10)])\n\n# Set the y-axis tick labels\nax.set_yticklabels([str(i) + '%' for i in range(0, 61, 10)])\n\n# Set the y-axis tick labels\nax.set_yticklabels([str(i) + '%' for i in range(0, 61, 10)])\n\n# Set the y-axis tick labels\nax.set_yticklabels([str(i) + '%' for i in range(0, 61, 10)])\n\n# Set the y-axis tick labels\nax.set_yticklabels([str(i) + '%' for i in range(0, 61, 10)])\n\n# Set the y-axis tick labels\nax.set_yticklabels([str(i) + '%' for i in range(0, 61, 10)])\n\n# Set the y-axis tick labels\nax.set_yticklabels([str(i) + '%' for i in range(0, 61, 10)])\n\n# Set the y-axis tick labels\nax.set_yticklabels([str(i) + '%' for i in range(0, 61, 10)])\n\n# Set the y-axis tick labels\nax.set_yticklabels([str(i) + '%' for i in range(0, 61, 10)])\n\n# Set the y-axis tick labels\nax.set_yticklabels([str(i) + '%' for i in range(0, 61, 10)])\n\n# Set the y-axis tick labels\nax.set_yticklabels([str(i) + '%' for i in range(0, 61, 10)])\n\n# Set the y-axis tick labels\nax.set_yticklabels([str(i) + '%' for i in range(0, 61, 10)])\n\n# Set the y-axis tick labels\nax.set_yticklabels([str(i) + '%' for i in range(0, 61, 10)])\n\n# Set the y-axis tick labels\nax.set_yticklabels([str(i) + '%' for i in range(0, 61, 10)])\n\n# Set the y-axis tick labels\nax.set_yticklabels([str(i) + '%' for i in range(0, 61, 10)])\n\n# Set the y-axis tick labels\nax.set_yticklabels([str(i) + '%' for i in range(0, 61, 10)])\n\n# Set the y-axis tick labels\nax.set_yticklabels([str(i) + '%' for i in range(0, 61, 10)])\n\n# Set the y-axis tick labels\nax.set_yticklabels([str(i) + '%' for i in range(0, 61, 10)])\n\n# Set the y-axis tick labels\nax.set_yticklabels([str(i) + '%' for i in range(0, 61, 10)])\n\n# Set the y-axis tick labels\nax.set_yticklabels([str(i) + '%' for i in range(0, 61, 10)])\n\n# Set the y-axis tick labels\nax.set_yticklabels([str(i) + '%' for i in range(0, 61, 10)])\n\n# Set the y-axis tick labels\nax.set_yticklabels([str(i) + '%' for i in range(0, 61, 10)])\n\n# Set the y-axis tick labels\nax.set_yticklabels([str(i) + '%' for i in range(0, 61, 10)])\n\n# Set the y-axis tick labels\nax.set_yticklabels([str(i) + '%' for i in range(0, 61, 10)])\n\n# Set the y-axis tick labels\nax.set_yticklabels([str(i) + '%' for i in range(0, 61, 10)])\n\n# Set the y-axis tick labels\nax.set_yticklabels([str(i) + '%' for i in range(0, 61, 10)])\n\n# Set the y-axis tick labels\nax.set_yticklabels([str(i) + '%' for i in range(0, 61, 10)])\n\n# Set the y-axis tick labels\nax.set_yticklabels([str(i) + '%' for i in range(0, 61, 10)])\n\n# Set the y-axis tick labels\nax.set_yticklabels([str(i) + '%' for i in range(0, 61, 10)])\n\n# Set the y-axis tick labels\nax.set_yticklabels([str(i) + '%' for i in range(0, 61, 10)])\n\n# Set the y-axis tick labels\nax.set_yticklabels([str(i) + '%' for i in range(0, 61, 10)])\n\n# Set the y-axis tick labels\nax.set_yticklabels([str(i) + '%' for i in range(0, 61, 10)])\n\n# Set the y-axis tick labels\nax.set_yticklabels([str(i) + '%' for i in range(0, 61, 10)])\n\n# Set the y-axis tick labels\nax.set_yticklabels([str(i) + '%' for i in range(0, 61, 10)])\n\n# Set the y-axis tick labels\nax.set_yticklabels([str(i) + '%' for i in range(0, 61, 10)])\n\n# Set the y-axis tick labels\nax.set_yticklabels([str(i) + '%' for i in range(0, 61, 10)])\n\n# Set the y-axis tick labels\nax.set_yticklabels([str(i) + '%' for i in range(0, 61, 10)])\n\n# Set the y-axis tick labels\nax.set_yticklabels([str(i) + '%' for i in range(0, 61, 10)])\n\n# Set the y-axis tick labels\nax.set_yticklabels([str(i) + '%' for i in range(0, 61, 10)])\n\n# Set the y-axis tick labels\nax.set_yticklabels([str(i) + '%' for i in range(0, 61, 10)])\n\n# Set the y-axis tick labels\nax.set_yticklabels([str(i) + '%' for i in range(0, 61, 10)])\n\n# Set the y-axis tick labels\nax.set_yticklabels([str(i) + '%' for i in range(0, 61, 10)])\n\n# Set the y-axis tick labels\nax.set_yticklabels([str(i) + '%' for i in range(0, 61, 10)])\n\n# Set the y-axis tick labels\nax.set_yticklabels([str(i) + '%' for i in range(0, 61, 10)])\n\n# Set the y-axis tick labels\nax.set_yticklabels([str(i) + '%' for i in range(0, 61, 10)])\n\n# Set the y-axis tick labels\nax.set_yticklabels([str(i) + '%' for i in range(0, 61, 10)])\n\n# Set the y-axis tick labels\nax.set_yticklabels([str(i) + '%' for i in range(0, 61, 10)])\n\n# Set the y-axis tick labels\nax.set_yticklabels([str(i) + '%' for i in range(0, 61, 10)])\n\n# Set the y-axis tick labels\nax.set_yticklabels([str(i) + '%' for i in range(0, 61, 10)])\n\n# Set the y-axis tick labels\nax.set_yticklabels([str(i) + '%' for i in range(0, 61, 10)])\n\n# Set the y-axis tick labels\nax.set_yticklabels([str(i) + '%' for i in range(0, 61, 10)])\n\n# Set the y-axis tick labels\nax.set_yticklabels([str(i) + '%' for i in range(0, 61, 10)])\n\n# Set the y-axis tick labels\nax.set_yticklabels([str(i) + '%' for i in range(0, 61, 10)])\n\n# Set the y-axis tick labels\nax.set_yticklabels([str(i) + '%' for i in range(0, 61, 10)])\n\n# Set the y-axis tick labels\nax.set_yticklabels([str(i) + '%' for i in range(0, 61, 10)])\n\n# Set the y-axis tick labels\nax.set_yticklabels([str(i) + '%' for i in range(0, 61, 10)])\n\n# Set the y-axis tick labels\nax.set_yticklabels([str(i) + '%' for i in range(0, 61, 10)])\n\n# Set the y-axis tick labels\nax.set_yticklabels([str(i) + '%' for i in range(0, 61, 10)])\n\n# Set the y-axis tick labels\nax.set_yticklabels([str(i) + '%' for i in range(0, 61, 10)])\n\n# Set the y-axis tick labels\nax.set_yticklabels([str(i) + '%' for i in range(0, 61, 10)])\n\n# Set the y-axis tick labels\nax.set_yticklabels([str(i) + '%' for i in range(0, 61, 10)])\n\n# Set the y-axis tick labels\nax.set_yticklabels([str(i) + '%' for i in range(0, 61, 10)])\n\n# Set the y-axis tick labels\nax.set_yticklabels([str(i) + '%' for i in range(0, 61, 10)])\n\n# Set the y-axis tick labels\nax.set_yticklabels([str(i) + '%' for i in range(0, 61, 10)])\n\n# Set the y-axis tick labels\nax.set_yticklabels([str(i) + '%' for i in range(0, 61, 10)])\n\n# Set the y-axis tick labels\nax.set_yticklabels([str(i) + '%' for i in range(0, 61, 10)])\n\n# Set the y-axis tick labels\nax.set_yticklabels([str(i) + '%' for i in range(0, 61, 10)])\n\n# Set the y-axis tick labels\nax.set_yticklabels([str(i) + '%' for i in range(0, 61, 10)])\n\n# Set the y-axis tick labels\nax.set_yticklabels([str(i) + '%' for i in range(0, 61, 10)])\n\n# Set the y-axis tick labels\nax.set_yticklabels([str(i) + '%' for i in range(0, 61, 10)])\n\n# Set the y-axis tick labels\nax.set_yticklabels([str(i) + '%' for i in range(0, 61, 10)])\n\n# Set the y-axis tick labels\nax.set_yticklabels([str(i) + '%' for i in range(0, 61, 10)])\n\n# Set the y-axis tick labels\nax.set_yticklabels([str(i) + '%' for i in range(0, 61, 10)])\n\n# Set the y-axis tick labels\nax.set_yticklabels([str(i) + '%' for i in range(0, 61, 10)])\n\n# Set the y-axis tick labels\nax.set_yticklabels([str(i) + '%' for i in range(0, 61, 10)])\n\n# Set the y-axis tick labels\nax.set_yticklabels([str(i) + '%' for i in range(0, 61, 10)])\n\n# Set the y-axis tick labels\nax.set_yticklabels([str(i) + '%' for i in range(0, 61, 10)])\n\n# Set the y-axis tick labels\nax.set_yticklabels([str(i) + '%' for i in range(0, 61, 10)])\n\n# Set the y-axis tick labels\nax.set_yticklabels([str(i) + '%' for i in range(0, 61, 10)])\n\n# Set the y-axis tick labels\nax.set_yticklabels([str(i) + '%' for i in range(0, 61, 10)])\n\n# Set the y-axis tick labels\nax.set_yticklabels([str(i) + '%' for i in range(0, 61, 10)])\n\n# Set the y-axis tick labels\nax.set_yticklabels([str(i) + '%' for i in range(0, 61, 10)])\n\n# Set the y-axis tick labels\nax.set_yticklabels([str(i) + '%' for i in range(0, 61, 10)])\n\n# Set the y-axis tick labels\nax.set_yticklabels([str(i) + '%' for i in range(0, 61, 10)])\n\n# Set the y-axis tick labels\nax.set_yticklabels([str(i) + '%' for i in range(0, 61, 10)])\n\n# Set the y-axis tick labels\nax.set_yticklabels([str(i) + '%' for i in range(0, 61, 10)])\n\n# Set the y-axis tick labels\nax.set_yticklabels([str(i) + '%' for i in range(0, 61, 10)])\n\n# Set the y-axis tick labels\nax.set_yticklabels([str(i) + '%' for i in range(0, 61, 10)])\n\n# Set the y-axis tick labels\nax.set_yticklabels([str(i) + '%' for i in range(0, 61, 10)])\n\n# Set the y-axis tick labels\nax.set_yticklabels([str(i) + '%' for i in range(0, 61, 10)])\n\n# Set the y-axis tick labels\nax.set_yticklabels([str(i) + '%' for i in range(0, 61, 10)])\n\n# Set the y-axis tick labels\nax.set_yticklabels([str(i) + '%' for i in range(0, 61, 10)])\n\n# Set the y-axis tick labels\nax.set_yticklabels([str(i) + '%' for i in range(0, 61, 10)])\n\n# Set the y-axis tick labels\nax.set_yticklabels([str(i) + '%' for i in range(0, 61, 10)])\n\n# Set the y-axis tick labels\nax.set_yticklabels(["}
{"file": "dataset/ori_500/CB_20.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Calibration Curve')\n\n# Set the x-axis label\nax.set_xlabel('Reduced Probability')\n\n# Set the y-axis label\nax.set_ylabel('Fraction of Positives')\n\n# Set the x-axis limits\nax.set_xlim(0, 1)\n\n# Set the y-axis limits\nax.set_ylim(0, 1)\n\n# Set the x-axis ticks\nax.set_xticks(np.arange(0, 1.1, 0.1))\n\n# Set the y-axis ticks\nax.set_yticks(np.arange(0, 1.1, 0.1))\n\n# Draw a line graph\nx = np.linspace(0, 1, 100)\ny = np.sin(x * np.pi / 2)\nax.plot(x, y, 'k-')\n\n# Draw a scatter plot\nx = np.random.rand(50)\ny = np.random.rand(50)\nax.scatter(x, y, c='orange', s=50)\n\n# Draw a rectangle\nrect = plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='pink')\nax.add_patch(rect)\n\n# Draw a circle\ncircle = plt.Circle((0.5, 0.5), 0.1, color='blue')\nax.add_artist(circle)\n\n# Draw a polygon\npolygon = plt.Polygon([[0.1, 0.1], [0.3, 0.9], [0.9, 0.3]], color='green')\nax.add_patch(polygon)\n\n# Draw a text box\ntext_box = plt.text(0.1, 0.9, 'Subgroups', fontsize=12, color='red')\nax.add_artist(text_box)\n\n# Draw a calibration curve\ncalibration_curve = plt.plot([0, 1], [0, 1], 'r--')\nax.add_artist(calibration_curve)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_21.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 4.0))\n\n# Set the background color of the plot\nax.set_facecolor('saddlebrown')\n\n# Create a circle for the logo\ncircle = plt.Circle((3, 3), 1, color='gold')\nax.add_artist(circle)\n\n# Create a rectangle for the model name\nrect = plt.Rectangle((2, 2), 2, 1, color='darkgreen')\nax.add_patch(rect)\n\n# Create a rectangle for the model description\nrect = plt.Rectangle((2, 1), 2, 1, color='skyblue')\nax.add_patch(rect)\n\n# Create a rectangle for the model price\nrect = plt.Rectangle((2, 0), 2, 1, color='orange')\nax.add_patch(rect)\n\n# Create a rectangle for the model rating\nrect = plt.Rectangle((2, -1), 2, 1, color='lightblue')\nax.add_patch(rect)\n\n# Create a rectangle for the model reviews\nrect = plt.Rectangle((2, -2), 2, 1, color='lightgreen')\nax.add_patch(rect)\n\n# Create a rectangle for the model specifications\nrect = plt.Rectangle((2, -3), 2, 1, color='lightcoral')\nax.add_patch(rect)\n\n# Create a rectangle for the model images\nrect = plt.Rectangle((2, -4), 2, 1, color='lightyellow')\nax.add_patch(rect)\n\n# Create a rectangle for the model videos\nrect = plt.Rectangle((2, -5), 2, 1, color='lightpink')\nax.add_patch(rect)\n\n# Create a rectangle for the model customer support\nrect = plt.Rectangle((2, -6), 2, 1, color='lightgrey')\nax.add_patch(rect)\n\n# Create a rectangle for the model warranty\nrect = plt.Rectangle((2, -7), 2, 1, color='lightcyan')\nax.add_patch(rect)\n\n# Create a rectangle for the model return policy\nrect = plt.Rectangle((2, -8), 2, 1, color='lightmagenta')\nax.add_patch(rect)\n\n# Create a rectangle for the model shipping options\nrect = plt.Rectangle((2, -9), 2, 1, color='lightblue')\nax.add_patch(rect)\n\n# Create a rectangle for the model payment options\nrect = plt.Rectangle((2, -10), 2, 1, color='lightgreen')\nax.add_patch(rect)\n\n# Create a rectangle for the model delivery time\nrect = plt.Rectangle((2, -11), 2, 1, color='lightcoral')\nax.add_patch(rect)\n\n# Create a rectangle for the model delivery location\nrect = plt.Rectangle((2, -12), 2, 1, color='lightyellow')\nax.add_patch(rect)\n\n# Create a rectangle for the model delivery cost\nrect = plt.Rectangle((2, -13), 2, 1, color='lightpink')\nax.add_patch(rect)\n\n# Create a rectangle for the model delivery tracking\nrect = plt.Rectangle((2, -14), 2, 1, color='lightgrey')\nax.add_patch(rect)\n\n# Create a rectangle for the model delivery confirmation\nrect = plt.Rectangle((2, -15), 2, 1, color='lightcyan')\nax.add_patch(rect)\n\n# Create a rectangle for the model delivery receipt\nrect = plt.Rectangle((2, -16), 2, 1, color='lightmagenta')\nax.add_patch(rect)\n\n# Create a rectangle for the model delivery refund\nrect = plt.Rectangle((2, -17), 2, 1, color='lightblue')\nax.add_patch(rect)\n\n# Create a rectangle for the model delivery return\nrect = plt.Rectangle((2, -18), 2, 1, color='lightgreen')\nax.add_patch(rect)\n\n# Create a rectangle for the model delivery exchange\nrect = plt.Rectangle((2, -19), 2, 1, color='lightcoral')\nax.add_patch(rect)\n\n# Create a rectangle for the model delivery warranty\nrect = plt.Rectangle((2, -20), 2, 1, color='lightyellow')\nax.add_patch(rect)\n\n# Create a rectangle for the model delivery return policy\nrect = plt.Rectangle((2, -21), 2, 1, color='lightpink')\nax.add_patch(rect)\n\n# Create a rectangle for the model delivery shipping options\nrect = plt.Rectangle((2, -22), 2, 1, color='lightgrey')\nax.add_patch(rect)\n\n# Create a rectangle for the model delivery payment options\nrect = plt.Rectangle((2, -23), 2, 1, color='lightcyan')\nax.add_patch(rect)\n\n# Create a rectangle for the model delivery delivery time\nrect = plt.Rectangle((2, -24), 2, 1, color='lightmagenta')\nax.add_patch(rect)\n\n# Create a rectangle for the model delivery delivery location\nrect = plt.Rectangle((2, -25), 2, 1, color='lightblue')\nax.add_patch(rect)\n\n# Create a rectangle for the model delivery delivery cost\nrect = plt.Rectangle((2, -26), 2, 1, color='lightgreen')\nax.add_patch(rect)\n\n# Create a rectangle for the model delivery delivery tracking\nrect = plt.Rectangle((2, -27), 2, 1, color='lightcoral')\nax.add_patch(rect)\n\n# Create a rectangle for the model delivery delivery confirmation\nrect = plt.Rectangle((2, -28), 2, 1, color='lightyellow')\nax.add_patch(rect)\n\n# Create a rectangle for the model delivery delivery receipt\nrect = plt.Rectangle((2, -29), 2, 1, color='lightpink')\nax.add_patch(rect)\n\n# Create a rectangle for the model delivery delivery refund\nrect = plt.Rectangle((2, -30), 2, 1, color='lightgrey')\nax.add_patch(rect)\n\n# Create a rectangle for the model delivery delivery return\nrect = plt.Rectangle((2, -31), 2, 1, color='lightcyan')\nax.add_patch(rect)\n\n# Create a rectangle for the model delivery delivery exchange\nrect = plt.Rectangle((2, -32), 2, 1, color='lightmagenta')\nax.add_patch(rect)\n\n# Create a rectangle for the model delivery delivery warranty\nrect = plt.Rectangle((2, -33), 2, 1, color='lightblue')\nax.add_patch(rect)\n\n# Create a rectangle for the model delivery delivery return policy\nrect = plt.Rectangle((2, -34), 2, 1, color='lightgreen')\nax.add_patch(rect)\n\n# Create a rectangle for the model delivery delivery shipping options\nrect = plt.Rectangle((2, -35), 2, 1, color='lightcoral')\nax.add_patch(rect)\n\n# Create a rectangle for the model delivery delivery payment options\nrect = plt.Rectangle((2, -36), 2, 1, color='lightyellow')\nax.add_patch(rect)\n\n# Create a rectangle for the model delivery delivery delivery time\nrect = plt.Rectangle((2, -37), 2, 1, color='lightpink')\nax.add_patch(rect)\n\n# Create a rectangle for the model delivery delivery delivery location\nrect = plt.Rectangle((2, -38), 2, 1, color='lightgrey')\nax.add_patch(rect)\n\n# Create a rectangle for the model delivery delivery delivery cost\nrect = plt.Rectangle((2, -39), 2, 1, color='lightcyan')\nax.add_patch(rect)\n\n# Create a rectangle for the model delivery delivery delivery tracking\nrect = plt.Rectangle((2, -40), 2, 1, color='lightmagenta')\nax.add_patch(rect)\n\n# Create a rectangle for the model delivery delivery delivery confirmation\nrect = plt.Rectangle((2, -41), 2, 1, color='lightblue')\nax.add_patch(rect)\n\n# Create a rectangle for the model delivery delivery delivery receipt\nrect = plt.Rectangle((2, -42), 2, 1, color='lightgreen')\nax.add_patch(rect)\n\n# Create a rectangle for the model delivery delivery delivery refund\nrect = plt.Rectangle((2, -43), 2, 1, color='lightcoral')\nax.add_patch(rect)\n\n# Create a rectangle for the model delivery delivery delivery return\nrect = plt.Rectangle((2, -44), 2, 1, color='lightyellow')\nax.add_patch(rect)\n\n# Create a rectangle for the model delivery delivery delivery exchange\nrect = plt.Rectangle((2, -45), 2, 1, color='lightpink')\nax.add_patch(rect)\n\n# Create a rectangle for the model delivery delivery delivery warranty\nrect = plt.Rectangle((2, -46), 2, 1, color='lightgrey')\nax.add_patch(rect)\n\n# Create a rectangle for the model delivery delivery delivery return policy\nrect = plt.Rectangle((2, -47), 2, 1, color='lightcyan')\nax.add_patch(rect)\n\n# Create a rectangle for the model delivery delivery delivery shipping options\nrect = plt.Rectangle((2, -48), 2, 1, color='lightmagenta')\nax.add_patch(rect)\n\n# Create a rectangle for the model delivery delivery delivery payment options\nrect = plt.Rectangle((2, -49), 2, 1, color='lightblue')\nax.add_patch(rect)\n\n# Create a rectangle for the model delivery delivery delivery delivery time\nrect = plt.Rectangle((2, -50), 2, 1, color='lightgreen')\nax.add_patch(rect)\n\n# Create a rectangle for the model delivery delivery delivery delivery location\nrect = plt.Rectangle((2, -51), 2, 1, color='lightcoral')\nax.add_patch(rect)\n\n# Create a rectangle for the model delivery delivery delivery delivery cost\nrect = plt.Rectangle((2, -52), 2, 1, color='lightyellow')\nax.add_patch(rect)\n\n# Create a rectangle for the model delivery delivery delivery delivery tracking\nrect = plt.Rectangle((2, -53), 2, 1, color='lightpink')\nax.add_patch(rect)\n\n# Create a rectangle for the model delivery delivery delivery delivery confirmation\nrect = plt.Rectangle((2, -54), 2, 1, color='lightgrey')\nax.add_patch(rect)\n\n# Create a rectangle for the model delivery delivery delivery delivery receipt\nrect = plt.Rectangle((2, -55), 2, 1, color='lightcyan')\nax.add_patch(rect)\n\n# Create a rectangle for the model delivery delivery delivery delivery refund\nrect = plt.Rectangle((2, -56), 2, 1, color='lightmagenta')\nax.add_patch(rect)\n\n# Create a rectangle for the model delivery delivery delivery delivery return\nrect = plt.Rectangle((2, -57), 2, 1, color='lightblue')\nax.add_patch(rect)\n\n# Create a rectangle for the model delivery delivery delivery delivery exchange\nrect = plt.Rectangle((2, -58), 2, 1, color='lightgreen')\nax.add_patch(rect)\n\n# Create a rectangle for the model delivery delivery delivery delivery warranty\nrect = plt.Rectangle((2, -59), 2, 1, color='lightcoral')\nax.add_patch(rect)\n\n# Create a rectangle for the model delivery delivery delivery delivery return policy\nrect = plt.Rectangle((2, -60), 2, 1, color='lightyellow')\nax.add_patch(rect)\n\n# Create a rectangle for the model delivery delivery delivery delivery shipping options\nrect = plt.Rectangle((2, -61), 2, 1, color='lightpink')\nax.add_patch(rect)\n\n# Create a rectangle for the model delivery delivery delivery delivery payment options\nrect = plt.Rectangle((2, -62), 2, 1, color='lightgrey')\nax.add_patch(rect)\n\n# Create a rectangle for the model delivery delivery delivery delivery delivery time\nrect = plt.Rectangle((2, -63), 2, 1, color='lightcyan')\nax.add_patch(rect)\n\n# Create a rectangle for the model delivery delivery delivery delivery delivery location\nrect = plt.Rectangle((2, -64), 2, 1, color='lightmagenta')\nax.add_patch(rect)\n\n# Create a rectangle for the model delivery delivery delivery delivery delivery cost\nrect = plt.Rectangle((2, -65), 2, 1, color='lightblue')\nax.add_patch(rect)\n\n# Create a rectangle for the model delivery delivery delivery delivery delivery tracking\nrect = plt.Rectangle((2, -66), 2, 1, color='lightgreen')\nax.add_patch(rect)\n\n# Create a rectangle for the model delivery delivery delivery delivery delivery confirmation\nrect = plt.Rectangle((2, -67), 2, 1, color='lightcoral')\nax.add_patch(rect)\n\n# Create a rectangle for the model delivery delivery delivery delivery delivery receipt\nrect = plt.Rectangle((2, -68), 2, 1, color='lightyellow')\nax.add_patch(rect)\n\n# Create a rectangle for the model delivery delivery delivery delivery delivery refund\nrect = plt.Rectangle((2, -69), 2, 1, color='lightpink')\nax.add_patch(rect)\n\n# Create a rectangle for the model delivery delivery delivery delivery delivery return\nrect = plt.Rectangle((2, -70), 2, 1, color='lightgrey')\nax.add_patch(rect)\n\n# Create a rectangle for the model delivery delivery delivery delivery delivery exchange\nrect = plt.Rectangle((2, -71), 2, 1, color='lightcyan')\nax.add_patch(rect)\n\n# Create a rectangle for the model delivery delivery delivery delivery delivery warranty\nrect = plt.Rectangle((2, -72), 2, 1, color='lightmagenta')\nax.add_patch(rect)\n\n# Create a rectangle for the model delivery delivery delivery delivery delivery return policy\nrect = plt.Rectangle((2, -73), 2, 1, color='lightblue')\nax.add_patch(rect)\n\n# Create a rectangle for the model delivery delivery delivery delivery delivery shipping options\nrect = plt.Rectangle((2, -74), 2, 1, color='lightgreen')\nax.add_patch(rect)\n\n# Create a rectangle for the model delivery delivery delivery delivery delivery payment options\nrect = plt.Rectangle((2, -75), 2, 1, color='lightcoral')\nax.add_patch(rect)\n\n# Create a rectangle for the model delivery delivery delivery delivery delivery delivery time\nrect = plt.Rectangle((2, -76), 2, 1, color='lightyellow')\nax.add_patch(rect)\n\n# Create a rectangle for the model delivery delivery delivery delivery delivery delivery location\nrect = plt.Rectangle((2, -77), 2, 1, color='lightpink')\nax.add_patch(rect)\n\n# Create a rectangle for the model delivery delivery delivery delivery delivery delivery cost\nrect = plt.Rectangle((2, -78), 2, 1, color='lightgrey')\nax.add_patch(rect)\n\n# Create a rectangle for the model delivery delivery delivery delivery delivery delivery tracking\nrect = plt.Rectangle((2, -79), 2, 1, color='lightcyan')\nax.add_patch(rect)\n\n# Create a rectangle for the model delivery delivery delivery delivery delivery delivery confirmation\nrect = plt.Rectangle((2, -80), 2, 1, color='lightmagenta')\nax.add_patch(rect)\n\n# Create a rectangle for the model delivery delivery delivery delivery delivery delivery receipt\nrect = plt.Rectangle((2, -81), 2, 1, color='lightblue')\nax.add_patch(rect)\n\n# Create a rectangle for the model delivery delivery delivery delivery delivery delivery refund\nrect = plt.Rectangle((2, -82), 2, 1, color='lightgreen')\nax.add_patch(rect)\n\n# Create a rectangle for the model delivery delivery delivery delivery delivery delivery return\nrect = plt.Rectangle((2, -83), 2, 1, color='lightcoral')\nax.add_patch(rect)\n\n# Create a rectangle for the model delivery delivery delivery delivery delivery delivery exchange\nrect = plt.Rectangle((2, -84), 2, 1, color='lightyellow')\nax.add_patch(rect)\n\n# Create a rectangle for the model delivery delivery delivery delivery delivery delivery warranty\nrect = plt.Rectangle((2, -85), 2, 1, color='lightpink')\nax.add_patch(rect)\n\n# Create a rectangle for the model delivery delivery delivery delivery delivery delivery return policy\nrect = plt.Rectangle((2, -86), 2, 1, color='lightgrey')\nax.add_patch(rect)\n\n# Create a rectangle for the model delivery delivery delivery delivery delivery delivery shipping options\nrect = plt.Rectangle((2, -87), 2, 1, color='lightcyan')\nax.add_patch(rect)\n\n# Create a rectangle for the model delivery delivery delivery delivery delivery delivery payment options\nrect = plt.Rectangle((2, -88), 2, 1, color='lightmagenta')\nax.add_patch(rect)\n\n# Create a rectangle for the model delivery delivery delivery delivery delivery delivery delivery time\nrect = plt.Rectangle((2, -89), 2, 1, color='lightblue')\nax.add_patch(rect)\n\n# Create a rectangle for the model delivery delivery delivery delivery delivery delivery delivery location\nrect = plt.Rectangle((2, -90), 2, 1, color='lightgreen')\nax.add_patch(rect)\n\n# Create a rectangle for the model delivery delivery delivery delivery delivery delivery delivery cost\nrect = plt.Rectangle((2, -91), 2, 1, color='lightcoral')\nax.add_patch(rect)\n\n# Create a rectangle for the model delivery delivery delivery delivery delivery delivery delivery tracking\nrect = plt.Rectangle((2, -92), 2, 1, color='lightyellow')\nax.add_patch(rect)\n\n# Create a rectangle for the model delivery delivery delivery delivery delivery delivery delivery confirmation\nrect = plt.Rectangle((2, -93), 2, 1, color='lightpink')\nax.add_patch(rect)\n\n# Create a rectangle for the model delivery delivery delivery delivery delivery delivery delivery receipt\nrect = plt.Rectangle((2, -94), 2, 1, color='lightgrey')\nax.add_patch(rect)\n\n# Create a rectangle for the model delivery delivery delivery delivery delivery delivery delivery refund\nrect = plt.Rectangle((2, -95), 2, 1, color='lightcyan')\nax.add_patch(rect)\n\n# Create a rectangle for the model delivery delivery delivery delivery delivery delivery delivery return\nrect = plt.Rectangle((2, -96), 2, 1, color='lightmagenta')\nax.add_patch(rect)\n\n# Create a rectangle for the model delivery delivery delivery delivery delivery delivery delivery exchange\nrect = plt.Rectangle((2, -97), 2, 1, color='lightblue')\nax.add_patch(rect)\n\n# Create a rectangle for the model delivery delivery delivery delivery delivery delivery delivery warranty\nrect = plt.Rectangle((2, -98), 2, 1, color='lightgreen')\nax.add_patch"}
{"file": "dataset/ori_500/CB_22.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis for the first subplot\nfig, ax = plt.subplots(figsize=(10, 8))\nax.plot([1600, 1625, 1650, 1675, 1700, 1725], [0.005, 0.015, 0.025, 0.035, 0.045, 0.055], 'b-')\nax.set_title('Total')\nax.set_xlabel('Daily reward (Ether)')\nax.set_ylabel('Probability')\n\n# Create a figure and axis for the second subplot\nfig, ax = plt.subplots(figsize=(10, 8))\nax.plot([1600, 1625, 1650, 1675, 1700, 1725], [0.005, 0.015, 0.025, 0.035, 0.045, 0.055], 'g-')\nax.set_title('Proposer')\nax.set_xlabel('Daily reward (Ether)')\nax.set_ylabel('Probability')\n\n# Create a figure and axis for the third subplot\nfig, ax = plt.subplots(figsize=(10, 8))\nax.plot([1600, 1625, 1650, 1675, 1700, 1725], [0.005, 0.015, 0.025, 0.035, 0.045, 0.055], 'r-')\nax.set_title('Sync committee member')\nax.set_xlabel('Daily reward (Ether)')\nax.set_ylabel('Probability')\n\n# Create a figure and axis for the fourth subplot\nfig, ax = plt.subplots(figsize=(10, 8))\nax.plot([1600, 1625, 1650, 1675, 1700, 1725], [0.005, 0.015, 0.025, 0.035, 0.045, 0.055], 'c-')\nax.set_title('Attestor')\nax.set_xlabel('Daily reward (Ether)')\nax.set_ylabel('Probability')\n\n# Display the plots\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_23.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(6.0, 8.0))\n\n# Set the title of the plot\nax.set_title('LlaSMol vs Trainable Parameter Size')\n\n# Set the x-axis label\nax.set_xlabel('Trainable Parameter Size (M)')\n\n# Set the y-axis label\nax.set_ylabel('RMSE')\n\n# Set the x-axis limits\nax.set_xlim(0, 150)\n\n# Set the y-axis limits\nax.set_ylim(1.15, 1.35)\n\n# Set the x-axis ticks\nax.set_xticks([0, 50, 100, 150])\n\n# Set the y-axis ticks\nax.set_yticks([1.15, 1.25, 1.35])\n\n# Add a legend\nax.legend()\n\n# Add a scatter plot\nax.scatter([10, 20, 30, 40, 50], [1.15, 1.25, 1.35, 1.15, 1.25], color='red', label='LlaSMol Lite')\n\n# Add a line plot\nax.plot([10, 20, 30, 40, 50], [1.15, 1.25, 1.35, 1.15, 1.25], color='blue', label='LlaSMol FNN')\n\n# Add a scatter plot\nax.scatter([60, 70, 80, 90, 100], [1.15, 1.25, 1.35, 1.15, 1.25], color='green', label='LlaSMol Attn')\n\n# Add a line plot\nax.plot([60, 70, 80, 90, 100], [1.15, 1.25, 1.35, 1.15, 1.25], color='orange', label='LlaSMol FFN')\n\n# Add a scatter plot\nax.scatter([110, 120, 130, 140, 150], [1.15, 1.25, 1.35, 1.15, 1.25], color='purple', label='LlaSMol Large')\n\n# Add a line plot\nax.plot([110, 120, 130, 140, 150], [1.15, 1.25, 1.35, 1.15, 1.25], color='pink', label='LlaSMol Plus')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_24.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Car Performance')\n\n# Set the x-axis label\nax.set_xlabel('Exection Duration (clock)')\n\n# Set the y-axis label\nax.set_ylabel('Distribution')\n\n# Set the x-axis limits\nax.set_xlim(40, 160)\n\n# Set the y-axis limits\nax.set_ylim(0, 0.1)\n\n# Create a scatter plot\nx = np.linspace(40, 160, 100)\ny = np.sin(x/20)\nax.scatter(x, y, color='blue')\n\n# Create a line plot\nx = np.linspace(40, 160, 100)\ny = np.cos(x/20)\nax.plot(x, y, color='red')\n\n# Create a bar chart\nx = np.linspace(40, 160, 100)\ny = np.tan(x/20)\nax.bar(x, y, color='green')\n\n# Create a histogram\nx = np.random.normal(100, 10, 1000)\nax.hist(x, bins=30, color='orange')\n\n# Create a pie chart\nx = [10, 20, 30, 40]\ny = ['A', 'B', 'C', 'D']\nax.pie(x, labels=y, colors=['pink', 'purple', 'cyan', 'yellow'])\n\n# Create a box plot\nx = np.random.normal(100, 10, 1000)\nax.boxplot(x, vert=False, patch_artist=True, boxprops=dict(facecolor=\"blue\", alpha=0.5))\n\n# Create a violin plot\nx = np.random.normal(100, 10, 1000)\nax.violinplot(x, showmeans=True)\n\n# Create a heatmap\nx = np.random.normal(100, 10, 1000)\nax.imshow(x, cmap='hot', interpolation='nearest')\n\n# Create a contour plot\nx = np.random.normal(100, 10, 1000)\nax.contourf(x, x, x, cmap='coolwarm')\n\n# Create a stream plot\nx = np.random.normal(100, 10, 1000)\nax.streamplot(x, x, x, x, color=x, linewidth=1, cmap='autumn')\n\n# Create a polar plot\ntheta = np.linspace(0, 2*np.pi, 100)\nr = np.linspace(0, 1, 100)\nax.polar(theta, r, color='blue')\n\n# Create a 3D plot\nfrom mpl_toolkits.mplot3d import Axes3D\nax = fig.add_subplot(111, projection='3d')\nx = np.linspace(40, 160, 100)\ny = np.linspace(40, 160, 100)\nz = np.sin(x/20)\nax.plot_surface(x, y, z, color='red')\n\n# Create a 3D scatter plot\nx = np.random.normal(100, 10, 1000)\ny = np.random.normal(100, 10, 1000)\nz = np.random.normal(100, 10, 1000)\nax.scatter(x, y, z, color='green')\n\n# Create a 3D bar chart\nx = np.random.normal(100, 10, 1000)\ny = np.random.normal(100, 10, 1000)\nz = np.random.normal(100, 10, 1000)\nax.bar3d(x, y, z, 1, 1, 1, color='blue')\n\n# Create a 3D histogram\nx = np.random.normal(100, 10, 1000)\ny = np.random.normal(100, 10, 1000)\nz = np.random.normal(100, 10, 1000)\nax.hist3d(x, y, z, bins=30, color='orange')\n\n# Create a 3D pie chart\nx = [10, 20, 30, 40]\ny = ['A', 'B', 'C', 'D']\nax.pie3d(x, labels=y, colors=['pink', 'purple', 'cyan', 'yellow'])\n\n# Create a 3D scatter plot with colorbar\nx = np.random.normal(100, 10, 1000)\ny = np.random.normal(100, 10, 1000)\nz = np.random.normal(100, 10, 1000)\nc = np.random.normal(100, 10, 1000)\nsc = ax.scatter(x, y, z, c=c, cmap='coolwarm')\nfig.colorbar(sc)\n\n# Create a 3D surface plot\nx = np.linspace(40, 160, 100)\ny = np.linspace(40, 160, 100)\nz = np.sin(x/20)\nax.plot_surface(x, y, z, color='red')\n\n# Create a 3D contour plot\nx = np.linspace(40, 160, 100)\ny = np.linspace(40, 160, 100)\nz = np.sin(x/20)\nax.contourf(x, y, z, color='blue')\n\n# Create a 3D stream plot\nx = np.linspace(40, 160, 100)\ny = np.linspace(40, 160, 100)\nz = np.sin(x/20)\nax.streamplot(x, y, z, color=z, linewidth=1, cmap='autumn')\n\n# Create a 3D polar plot\ntheta = np.linspace(0, 2*np.pi, 100)\nr = np.linspace(0, 1, 100)\nax.polar(theta, r, color='blue')\n\n# Create a 3D scatter plot with colorbar\nx = np.random.normal(100, 10, 1000)\ny = np.random.normal(100, 10, 1000)\nz = np.random.normal(100, 10, 1000)\nc = np.random.normal(100, 10, 1000)\nsc = ax.scatter(x, y, z, c=c, cmap='coolwarm')\nfig.colorbar(sc)\n\n# Create a 3D surface plot\nx = np.linspace(40, 160, 100)\ny = np.linspace(40, 160, 100)\nz = np.sin(x/20)\nax.plot_surface(x, y, z, color='red')\n\n# Create a 3D contour plot\nx = np.linspace(40, 160, 100)\ny = np.linspace(40, 160, 100)\nz = np.sin(x/20)\nax.contourf(x, y, z, color='blue')\n\n# Create a 3D stream plot\nx = np.linspace(40, 160, 100)\ny = np.linspace(40, 160, 100)\nz = np.sin(x/20)\nax.streamplot(x, y, z, color=z, linewidth=1, cmap='autumn')\n\n# Create a 3D polar plot\ntheta = np.linspace(0, 2*np.pi, 100)\nr = np.linspace(0, 1, 100)\nax.polar(theta, r, color='blue')\n\n# Create a 3D scatter plot with colorbar\nx = np.random.normal(100, 10, 1000)\ny = np.random.normal(100, 10, 1000)\nz = np.random.normal(100, 10, 1000)\nc = np.random.normal(100, 10, 1000)\nsc = ax.scatter(x, y, z, c=c, cmap='coolwarm')\nfig.colorbar(sc)\n\n# Create a 3D surface plot\nx = np.linspace(40, 160, 100)\ny = np.linspace(40, 160, 100)\nz = np.sin(x/20)\nax.plot_surface(x, y, z, color='red')\n\n# Create a 3D contour plot\nx = np.linspace(40, 160, 100)\ny = np.linspace(40, 160, 100)\nz = np.sin(x/20)\nax.contourf(x, y, z, color='blue')\n\n# Create a 3D stream plot\nx = np.linspace(40, 160, 100)\ny = np.linspace(40, 160, 100)\nz = np.sin(x/20)\nax.streamplot(x, y, z, color=z, linewidth=1, cmap='autumn')\n\n# Create a 3D polar plot\ntheta = np.linspace(0, 2*np.pi, 100)\nr = np.linspace(0, 1, 100)\nax.polar(theta, r, color='blue')\n\n# Create a 3D scatter plot with colorbar\nx = np.random.normal(100, 10, 1000)\ny = np.random.normal(100, 10, 1000)\nz = np.random.normal(100, 10, 1000)\nc = np.random.normal(100, 10, 1000)\nsc = ax.scatter(x, y, z, c=c, cmap='coolwarm')\nfig.colorbar(sc)\n\n# Create a 3D surface plot\nx = np.linspace(40, 160, 100)\ny = np.linspace(40, 160, 100)\nz = np.sin(x/20)\nax.plot_surface(x, y, z, color='red')\n\n# Create a 3D contour plot\nx = np.linspace(40, 160, 100)\ny = np.linspace(40, 160, 100)\nz = np.sin(x/20)\nax.contourf(x, y, z, color='blue')\n\n# Create a 3D stream plot\nx = np.linspace(40, 160, 100)\ny = np.linspace(40, 160, 100)\nz = np.sin(x/20)\nax.streamplot(x, y, z, color=z, linewidth=1, cmap='autumn')\n\n# Create a 3D polar plot\ntheta = np.linspace(0, 2*np.pi, 100)\nr = np.linspace(0, 1, 100)\nax.polar(theta, r, color='blue')\n\n# Create a 3D scatter plot with colorbar\nx = np.random.normal(100, 10, 1000)\ny = np.random.normal(100, 10, 1000)\nz = np.random.normal(100, 10, 1000)\nc = np.random.normal(100, 10, 1000)\nsc = ax.scatter(x, y, z, c=c, cmap='coolwarm')\nfig.colorbar(sc)\n\n# Create a 3D surface plot\nx = np.linspace(40, 160, 100)\ny = np.linspace(40, 160, 100)\nz = np.sin(x/20)\nax.plot_surface(x, y, z, color='red')\n\n# Create a 3D contour plot\nx = np.linspace(40, 160, 100)\ny = np.linspace(40, 160, 100)\nz = np.sin(x/20)\nax.contourf(x, y, z, color='blue')\n\n# Create a 3D stream plot\nx = np.linspace(40, 160, 100)\ny = np.linspace(40, 160, 100)\nz = np.sin(x/20)\nax.streamplot(x, y, z, color=z, linewidth=1, cmap='autumn')\n\n# Create a 3D polar plot\ntheta = np.linspace(0, 2*np.pi, 100)\nr = np.linspace(0, 1, 100)\nax.polar(theta, r, color='blue')\n\n# Create a 3D scatter plot with colorbar\nx = np.random.normal(100, 10, 1000)\ny = np.random.normal(100, 10, 1000)\nz = np.random.normal(100, 10, 1000)\nc = np.random.normal(100, 10, 1000)\nsc = ax.scatter(x, y, z, c=c, cmap='coolwarm')\nfig.colorbar(sc)\n\n# Create a 3D surface plot\nx = np.linspace(40, 160, 100)\ny = np.linspace(40, 160, 100)\nz = np.sin(x/20)\nax.plot_surface(x, y, z, color='red')\n\n# Create a 3D contour plot\nx = np.linspace(40, 160, 100)\ny = np.linspace(40, 160, 100)\nz = np.sin(x/20)\nax.contourf(x, y, z, color='blue')\n\n# Create a 3D stream plot\nx = np.linspace(40, 160, 100)\ny = np.linspace(40, 160, 100)\nz = np.sin(x/20)\nax.streamplot(x, y, z, color=z, linewidth=1, cmap='autumn')\n\n# Create a 3D polar plot\ntheta = np.linspace(0, 2*np.pi, 100)\nr = np.linspace(0, 1, 100)\nax.polar(theta, r, color='blue')\n\n# Create a 3D scatter plot with colorbar\nx = np.random.normal(100, 10, 1000)\ny = np.random.normal(100, 10, 1000)\nz = np.random.normal(100, 10, 1000)\nc = np.random.normal(100, 10, 1000)\nsc = ax.scatter(x, y, z, c=c, cmap='coolwarm')\nfig.colorbar(sc)\n\n# Create a 3D surface plot\nx = np.linspace(40, 160, 100)\ny = np.linspace(40, 160, 100)\nz = np.sin(x/20)\nax.plot_surface(x, y, z, color='red')\n\n# Create a 3D contour plot\nx = np.linspace(40, 160, 100)\ny = np.linspace(40, 160, 100)\nz = np.sin(x/20)\nax.contourf(x, y, z, color='blue')\n\n# Create a 3D stream plot\nx = np.linspace(40, 160, 100)\ny = np.linspace(40, 160, 100)\nz = np.sin(x/20)\nax.streamplot(x, y, z, color=z, linewidth=1, cmap='autumn')\n\n# Create a 3D polar plot\ntheta = np.linspace(0, 2*np.pi, 100)\nr = np.linspace(0, 1, 100)\nax.polar(theta, r, color='blue')\n\n# Create a 3D scatter plot with colorbar\nx = np.random.normal(100, 10, 1000)\ny = np.random.normal(100, 10, 1000)\nz = np.random.normal(100, 10, 1000)\nc = np.random.normal(100, 10, 1000)\nsc = ax.scatter(x, y, z, c=c, cmap='coolwarm')\nfig.colorbar(sc)\n\n# Create a 3D surface plot\nx = np.linspace(40, 160, 100)\ny = np.linspace(40, 160, 100)\nz = np.sin(x/20)\nax.plot_surface(x, y, z, color='red')\n\n# Create a 3D contour plot\nx = np.linspace(40, 160, 100)\ny = np.linspace(40, 160, 100)\nz = np.sin(x/20)\nax.contourf(x, y, z, color='blue')\n\n# Create a 3D stream plot\nx = np.linspace(40, 160, 100)\ny = np.linspace(40, 160, 100)\nz = np.sin(x/20)\nax.streamplot(x, y, z, color=z, linewidth=1, cmap='autumn')\n\n# Create a 3D polar plot\ntheta = np.linspace(0, 2*np.pi, 100)\nr = np.linspace(0, 1, 100)\nax.polar(theta, r, color='blue')\n\n# Create a 3D scatter plot with colorbar\nx = np.random.normal(100, 10, 1000)\ny = np.random.normal(100, 10, 1000)\nz = np.random.normal"}
{"file": "dataset/ori_500/CB_25.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the graph\nyears = ['15x15', '20x15', '20x20', '30x20', '40x20', '50x20', '60x20']\nsales = [18, 14, 13, 12, 9, 7, 5]\nprofit = [100, 90, 80, 70, 60, 50, 40]\nimprovement = [15, 10, 5, 0, -5, -10, -15]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Plot the data\nax.plot(years, sales, color='red')\nax.plot(years, profit, color='blue')\nax.plot(years, improvement, color='green')\n\n# Set the title and labels\nax.set_title('Car Sales and Profit Over Time')\nax.set_xlabel('Year')\nax.set_ylabel('Sales/Profit')\n\n# Add a legend\nax.legend(['Sales', 'Profit', 'Improvement'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_26.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(7, 5))\n\n# Set the title of the plot\nax.set_title('Algorithm Performance')\n\n# Set the x-axis label\nax.set_xlabel('Algorithms')\n\n# Set the y-axis label\nax.set_ylabel('Time Cost (Seconds)')\n\n# Create a scatter plot for SEAC\nx_seac = np.random.rand(10)\ny_seac = np.random.rand(10)\nax.scatter(x_seac, y_seac, color='green', label='SEAC')\n\n# Create a scatter plot for CTCO\nx_ctco = np.random.rand(10)\ny_ctco = np.random.rand(10)\nax.scatter(x_ctco, y_ctco, color='orange', label='CTCO')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_27.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Set the title of the graph\nax.set_title('Stock Price Prediction')\n\n# Set the x-axis label\nax.set_xlabel('Time to Market (Days)')\n\n# Set the y-axis label\nax.set_ylabel('Stock Price ($)')\n\n# Set the x-axis limits\nax.set_xlim(0, 120)\n\n# Set the y-axis limits\nax.set_ylim(40, 120)\n\n# Set the grid lines\nax.grid(True)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('lightblue')\n\n# Set the color of the text\nax.set_color_cycle(['green', 'orange', 'pink', 'cyan', 'purple'])\n\n# Set the color of the line\nax.plot([0, 120], [100, 80], 'k-')\n\n# Set the color of the markers\nax.plot([0, 120], [90, 70], 'ro')\n\n# Set the color of the rectangles\nax.add_patch(plt.Rectangle((0, 0), 10, 10, color='green'))\nax.add_patch(plt.Rectangle((10, 10), 10, 10, color='orange'))\nax.add_patch(plt.Rectangle((20, 20), 10, 10, color='pink'))\nax.add_patch(plt.Rectangle((30, 30), 10, 10, color='cyan'))\nax.add_patch(plt.Rectangle((40, 40), 10, 10, color='purple'))\n\n# Set the color of the stars\nax.add_patch(plt.Circle((50, 50), 5, color='red'))\nax.add_patch(plt.Circle((60, 60), 5, color='red'))\n\n# Set the color of the text\nax.text(0, 100, 'Adidas', fontsize=12)\nax.text(10, 90, 'Nike', fontsize=12)\nax.text(20, 80, 'New Balance', fontsize=12)\nax.text(30, 70, 'Our Brand', fontsize=12)\nax.text(40, 60, 'Medians Time to Market', fontsize=12)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_28.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Set the background color of the plot\nax.set_facecolor('lightblue')\n\n# Create a rectangle for the timeline\nrect = plt.Rectangle((0, 0), 1, 1, fc='blue')\nax.add_patch(rect)\n\n# Create a rectangle for the map\nrect = plt.Rectangle((0, 0), 1, 1, fc='green')\nax.add_patch(rect)\n\n# Create a rectangle for the timeline\nrect = plt.Rectangle((0, 0), 1, 1, fc='orange')\nax.add_patch(rect)\n\n# Create a rectangle for the map\nrect = plt.Rectangle((0, 0), 1, 1, fc='yellow')\nax.add_patch(rect)\n\n# Create a rectangle for the timeline\nrect = plt.Rectangle((0, 0), 1, 1, fc='brown')\nax.add_patch(rect)\n\n# Create a rectangle for the map\nrect = plt.Rectangle((0, 0), 1, 1, fc='grey')\nax.add_patch(rect)\n\n# Create a rectangle for the timeline\nrect = plt.Rectangle((0, 0), 1, 1, fc='red')\nax.add_patch(rect)\n\n# Create a rectangle for the map\nrect = plt.Rectangle((0, 0), 1, 1, fc='purple')\nax.add_patch(rect)\n\n# Create a rectangle for the timeline\nrect = plt.Rectangle((0, 0), 1, 1, fc='cyan')\nax.add_patch(rect)\n\n# Create a rectangle for the map\nrect = plt.Rectangle((0, 0), 1, 1, fc='magenta')\nax.add_patch(rect)\n\n# Create a rectangle for the timeline\nrect = plt.Rectangle((0, 0), 1, 1, fc='black')\nax.add_patch(rect)\n\n# Create a rectangle for the map\nrect = plt.Rectangle((0, 0), 1, 1, fc='white')\nax.add_patch(rect)\n\n# Create a rectangle for the timeline\nrect = plt.Rectangle((0, 0), 1, 1, fc='silver')\nax.add_patch(rect)\n\n# Create a rectangle for the map\nrect = plt.Rectangle((0, 0), 1, 1, fc='gold')\nax.add_patch(rect)\n\n# Create a rectangle for the timeline\nrect = plt.Rectangle((0, 0), 1, 1, fc='lime')\nax.add_patch(rect)\n\n# Create a rectangle for the map\nrect = plt.Rectangle((0, 0), 1, 1, fc='teal')\nax.add_patch(rect)\n\n# Create a rectangle for the timeline\nrect = plt.Rectangle((0, 0), 1, 1, fc='navy')\nax.add_patch(rect)\n\n# Create a rectangle for the map\nrect = plt.Rectangle((0, 0), 1, 1, fc='maroon')\nax.add_patch(rect)\n\n# Create a rectangle for the timeline\nrect = plt.Rectangle((0, 0), 1, 1, fc='olive')\nax.add_patch(rect)\n\n# Create a rectangle for the map\nrect = plt.Rectangle((0, 0), 1, 1, fc='aqua')\nax.add_patch(rect)\n\n# Create a rectangle for the timeline\nrect = plt.Rectangle((0, 0), 1, 1, fc='fuchsia')\nax.add_patch(rect)\n\n# Create a rectangle for the map\nrect = plt.Rectangle((0, 0), 1, 1, fc='silver')\nax.add_patch(rect)\n\n# Create a rectangle for the timeline\nrect = plt.Rectangle((0, 0), 1, 1, fc='gold')\nax.add_patch(rect)\n\n# Create a rectangle for the map\nrect = plt.Rectangle((0, 0), 1, 1, fc='lime')\nax.add_patch(rect)\n\n# Create a rectangle for the timeline\nrect = plt.Rectangle((0, 0), 1, 1, fc='teal')\nax.add_patch(rect)\n\n# Create a rectangle for the map\nrect = plt.Rectangle((0, 0), 1, 1, fc='navy')\nax.add_patch(rect)\n\n# Create a rectangle for the timeline\nrect = plt.Rectangle((0, 0), 1, 1, fc='maroon')\nax.add_patch(rect)\n\n# Create a rectangle for the map\nrect = plt.Rectangle((0, 0), 1, 1, fc='olive')\nax.add_patch(rect)\n\n# Create a rectangle for the timeline\nrect = plt.Rectangle((0, 0), 1, 1, fc='aqua')\nax.add_patch(rect)\n\n# Create a rectangle for the map\nrect = plt.Rectangle((0, 0), 1, 1, fc='fuchsia')\nax.add_patch(rect)\n\n# Create a rectangle for the timeline\nrect = plt.Rectangle((0, 0), 1, 1, fc='silver')\nax.add_patch(rect)\n\n# Create a rectangle for the map\nrect = plt.Rectangle((0, 0), 1, 1, fc='gold')\nax.add_patch(rect)\n\n# Create a rectangle for the timeline\nrect = plt.Rectangle((0, 0), 1, 1, fc='lime')\nax.add_patch(rect)\n\n# Create a rectangle for the map\nrect = plt.Rectangle((0, 0), 1, 1, fc='teal')\nax.add_patch(rect)\n\n# Create a rectangle for the timeline\nrect = plt.Rectangle((0, 0), 1, 1, fc='navy')\nax.add_patch(rect)\n\n# Create a rectangle for the map\nrect = plt.Rectangle((0, 0), 1, 1, fc='maroon')\nax.add_patch(rect)\n\n# Create a rectangle for the timeline\nrect = plt.Rectangle((0, 0), 1, 1, fc='olive')\nax.add_patch(rect)\n\n# Create a rectangle for the map\nrect = plt.Rectangle((0, 0), 1, 1, fc='aqua')\nax.add_patch(rect)\n\n# Create a rectangle for the timeline\nrect = plt.Rectangle((0, 0), 1, 1, fc='fuchsia')\nax.add_patch(rect)\n\n# Create a rectangle for the map\nrect = plt.Rectangle((0, 0), 1, 1, fc='silver')\nax.add_patch(rect)\n\n# Create a rectangle for the timeline\nrect = plt.Rectangle((0, 0), 1, 1, fc='gold')\nax.add_patch(rect)\n\n# Create a rectangle for the map\nrect = plt.Rectangle((0, 0), 1, 1, fc='lime')\nax.add_patch(rect)\n\n# Create a rectangle for the timeline\nrect = plt.Rectangle((0, 0), 1, 1, fc='teal')\nax.add_patch(rect)\n\n# Create a rectangle for the map\nrect = plt.Rectangle((0, 0), 1, 1, fc='navy')\nax.add_patch(rect)\n\n# Create a rectangle for the timeline\nrect = plt.Rectangle((0, 0), 1, 1, fc='maroon')\nax.add_patch(rect)\n\n# Create a rectangle for the map\nrect = plt.Rectangle((0, 0), 1, 1, fc='olive')\nax.add_patch(rect)\n\n# Create a rectangle for the timeline\nrect = plt.Rectangle((0, 0), 1, 1, fc='aqua')\nax.add_patch(rect)\n\n# Create a rectangle for the map\nrect = plt.Rectangle((0, 0), 1, 1, fc='fuchsia')\nax.add_patch(rect)\n\n# Create a rectangle for the timeline\nrect = plt.Rectangle((0, 0), 1, 1, fc='silver')\nax.add_patch(rect)\n\n# Create a rectangle for the map\nrect = plt.Rectangle((0, 0), 1, 1, fc='gold')\nax.add_patch(rect)\n\n# Create a rectangle for the timeline\nrect = plt.Rectangle((0, 0), 1, 1, fc='lime')\nax.add_patch(rect)\n\n# Create a rectangle for the map\nrect = plt.Rectangle((0, 0), 1, 1, fc='teal')\nax.add_patch(rect)\n\n# Create a rectangle for the timeline\nrect = plt.Rectangle((0, 0), 1, 1, fc='navy')\nax.add_patch(rect)\n\n# Create a rectangle for the map\nrect = plt.Rectangle((0, 0), 1, 1, fc='maroon')\nax.add_patch(rect)\n\n# Create a rectangle for the timeline\nrect = plt.Rectangle((0, 0), 1, 1, fc='olive')\nax.add_patch(rect)\n\n# Create a rectangle for the map\nrect = plt.Rectangle((0, 0), 1, 1, fc='aqua')\nax.add_patch(rect)\n\n# Create a rectangle for the timeline\nrect = plt.Rectangle((0, 0), 1, 1, fc='fuchsia')\nax.add_patch(rect)\n\n# Create a rectangle for the map\nrect = plt.Rectangle((0, 0), 1, 1, fc='silver')\nax.add_patch(rect)\n\n# Create a rectangle for the timeline\nrect = plt.Rectangle((0, 0), 1, 1, fc='gold')\nax.add_patch(rect)\n\n# Create a rectangle for the map\nrect = plt.Rectangle((0, 0), 1, 1, fc='lime')\nax.add_patch(rect)\n\n# Create a rectangle for the timeline\nrect = plt.Rectangle((0, 0), 1, 1, fc='teal')\nax.add_patch(rect)\n\n# Create a rectangle for the map\nrect = plt.Rectangle((0, 0), 1, 1, fc='navy')\nax.add_patch(rect)\n\n# Create a rectangle for the timeline\nrect = plt.Rectangle((0, 0), 1, 1, fc='maroon')\nax.add_patch(rect)\n\n# Create a rectangle for the map\nrect = plt.Rectangle((0, 0), 1, 1, fc='olive')\nax.add_patch(rect)\n\n# Create a rectangle for the timeline\nrect = plt.Rectangle((0, 0), 1, 1, fc='aqua')\nax.add_patch(rect)\n\n# Create a rectangle for the map\nrect = plt.Rectangle((0, 0), 1, 1, fc='fuchsia')\nax.add_patch(rect)\n\n# Create a rectangle for the timeline\nrect = plt.Rectangle((0, 0), 1, 1, fc='silver')\nax.add_patch(rect)\n\n# Create a rectangle for the map\nrect = plt.Rectangle((0, 0), 1, 1, fc='gold')\nax.add_patch(rect)\n\n# Create a rectangle for the timeline\nrect = plt.Rectangle((0, 0), 1, 1, fc='lime')\nax.add_patch(rect)\n\n# Create a rectangle for the map\nrect = plt.Rectangle((0, 0), 1, 1, fc='teal')\nax.add_patch(rect)\n\n# Create a rectangle for the timeline\nrect = plt.Rectangle((0, 0), 1, 1, fc='navy')\nax.add_patch(rect)\n\n# Create a rectangle for the map\nrect = plt.Rectangle((0, 0), 1, 1, fc='maroon')\nax.add_patch(rect)\n\n# Create a rectangle for the timeline\nrect = plt.Rectangle((0, 0), 1, 1, fc='olive')\nax.add_patch(rect)\n\n# Create a rectangle for the map\nrect = plt.Rectangle((0, 0), 1, 1, fc='aqua')\nax.add_patch(rect)\n\n# Create a rectangle for the timeline\nrect = plt.Rectangle((0, 0), 1, 1, fc='fuchsia')\nax.add_patch(rect)\n\n# Create a rectangle for the map\nrect = plt.Rectangle((0, 0), 1, 1, fc='silver')\nax.add_patch(rect)\n\n# Create a rectangle for the timeline\nrect = plt.Rectangle((0, 0), 1, 1, fc='gold')\nax.add_patch(rect)\n\n# Create a rectangle for the map\nrect = plt.Rectangle((0, 0), 1, 1, fc='lime')\nax.add_patch(rect)\n\n# Create a rectangle for the timeline\nrect = plt.Rectangle((0, 0), 1, 1, fc='teal')\nax.add_patch(rect)\n\n# Create a rectangle for the map\nrect = plt.Rectangle((0, 0), 1, 1, fc='navy')\nax.add_patch(rect)\n\n# Create a rectangle for the timeline\nrect = plt.Rectangle((0, 0), 1, 1, fc='maroon')\nax.add_patch(rect)\n\n# Create a rectangle for the map\nrect = plt.Rectangle((0, 0), 1, 1, fc='olive')\nax.add_patch(rect)\n\n# Create a rectangle for the timeline\nrect = plt.Rectangle((0, 0), 1, 1, fc='aqua')\nax.add_patch(rect)\n\n# Create a rectangle for the map\nrect = plt.Rectangle((0, 0), 1, 1, fc='fuchsia')\nax.add_patch(rect)\n\n# Create a rectangle for the timeline\nrect = plt.Rectangle((0, 0), 1, 1, fc='silver')\nax.add_patch(rect)\n\n# Create a rectangle for the map\nrect = plt.Rectangle((0, 0), 1, 1, fc='gold')\nax.add_patch(rect)\n\n# Create a rectangle for the timeline\nrect = plt.Rectangle((0, 0), 1, 1, fc='lime')\nax.add_patch(rect)\n\n# Create a rectangle for the map\nrect = plt.Rectangle((0, 0), 1, 1, fc='teal')\nax.add_patch(rect)\n\n# Create a rectangle for the timeline\nrect = plt.Rectangle((0, 0), 1, 1, fc='navy')\nax.add_patch(rect)\n\n# Create a rectangle for the map\nrect = plt.Rectangle((0, 0), 1, 1, fc='maroon')\nax.add_patch(rect)\n\n# Create a rectangle for the timeline\nrect = plt.Rectangle((0, 0), 1, 1, fc='olive')\nax.add_patch(rect)\n\n# Create a rectangle for the map\nrect = plt.Rectangle((0, 0), 1, 1, fc='aqua')\nax.add_patch(rect)\n\n# Create a rectangle for the timeline\nrect = plt.Rectangle((0, 0), 1, 1, fc='fuchsia')\nax.add_patch(rect)\n\n# Create a rectangle for the map\nrect = plt.Rectangle((0, 0), 1, 1, fc='silver')\nax.add_patch(rect)\n\n# Create a rectangle for the timeline\nrect = plt.Rectangle((0, 0), 1, 1, fc='gold')\nax.add_patch(rect)\n\n# Create a rectangle for the map\nrect = plt.Rectangle((0, 0), 1, 1, fc='lime')\nax.add_patch(rect)\n\n# Create a rectangle for the timeline\nrect = plt.Rectangle((0, 0), 1, 1, fc='teal')\nax.add_patch(rect)\n\n# Create a rectangle for the map\nrect = plt.Rectangle((0, 0), 1, 1, fc='navy')\nax.add_patch(rect)\n\n# Create a rectangle for the timeline\nrect = plt.Rectangle((0, 0), 1, 1, fc='maroon')\nax.add_patch(rect)\n\n# Create a rectangle for the map\nrect = plt.Rectangle((0, 0), 1, 1, fc='olive')\nax.add_patch(rect)\n\n# Create a rectangle for the timeline\nrect = plt.Rectangle((0, 0), 1, 1, fc='aqua')\nax.add_patch(rect)\n\n# Create a rectangle for the map\nrect = plt.Rectangle((0, 0), 1, 1, fc='fuchsia')\nax.add_patch(rect)\n\n# Create a rectangle for the timeline\nrect = plt.Rectangle((0, 0), 1, 1, fc='silver')\nax.add_patch(rect)\n\n# Create a rectangle for the map\nrect = plt.Rectangle((0, 0), 1, 1, fc='gold')\nax.add_patch(rect)\n\n# Create a rectangle for the timeline\nrect = plt.Rectangle((0, 0), 1, 1, fc='lime')\nax.add_patch(rect)\n\n# Create a rectangle for the map\nrect = plt.Rectangle((0, 0), 1, 1, fc='teal')\nax.add_patch(rect)\n\n# Create a rectangle for the timeline\nrect = plt.Rectangle((0, 0), 1, 1, fc='navy')\nax.add_patch(rect)\n\n# Create a rectangle for the map\nrect = plt.Rectangle((0, 0), 1, 1, fc='maroon')\nax.add_patch(rect)\n\n# Create a rectangle for the timeline\nrect = plt.Rectangle((0, 0), 1, 1, fc='olive')\nax.add_patch(rect)\n\n# Create a rectangle for the map\nrect = plt.Rectangle((0, 0), 1, 1, fc='aqua')\nax.add_patch(rect)\n\n# Create a rectangle for the timeline\nrect = plt.Rectangle((0, 0), 1, 1, fc='fuchsia')\nax.add_patch(rect)\n\n# Create a rectangle for the map\nrect = plt.Rectangle((0, 0), 1, 1, fc='silver')\nax.add_patch(rect)\n\n# Create a rectangle for the timeline\nrect = plt.Rectangle((0, 0), 1, 1, fc='gold')\nax.add_patch(rect)\n\n# Create a rectangle for the map\nrect = plt.Rectangle((0, 0), 1, 1, fc='lime')\nax.add_patch(rect)\n\n# Create a rectangle for the timeline\nrect = plt.Rectangle((0, 0), 1, 1, fc='teal')\nax.add_patch(rect)\n\n# Create a rectangle for the map\nrect = plt.Rectangle((0, 0), 1, 1, fc='navy')\nax.add_patch(rect)\n\n# Create a rectangle for the timeline\nrect = plt.Rectangle((0, 0), 1, 1, fc='maroon')\nax.add_patch(rect)\n\n# Create a rectangle for the map\nrect = plt.Rectangle((0, 0), 1, 1, fc='olive')\nax.add_patch(rect)\n\n# Create a rectangle for the timeline\nrect = plt.Rectangle((0, 0), 1, 1, fc='aqua')\nax.add_patch(rect)\n\n# Create a rectangle for the map\nrect = plt.Rectangle((0, 0), 1, 1, fc='fuchsia')\nax.add_patch(rect)\n\n# Create a rectangle for the timeline"}
{"file": "dataset/ori_500/CB_29.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Set the title of the graph\nax.set_title('Patent Filings in 2013')\n\n# Set the x-axis label\nax.set_xlabel('Number of Patents')\n\n# Set the y-axis label\nax.set_ylabel('Year')\n\n# Create a list of technology fields\ntech_fields = ['Nano Technology', 'Quantum Computing', 'Cybersecurity', 'VR', 'Biotech', 'Robotics', 'IoT', 'Cloud Computing', 'Blockchain', 'AI']\n\n# Create a list of years\nyears = [2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022]\n\n# Create a list of patent filings for each technology field\npatent_filings = [120, 100, 80, 60, 40, 20, 0, -20, -40, -60]\n\n# Create a list of colors for each technology field\ncolors = ['cyan', 'cyan', 'cyan', 'cyan', 'cyan', 'cyan', 'cyan', 'cyan', 'cyan', 'cyan']\n\n# Create a list of line styles for each technology field\nlinestyles = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-']\n\n# Create a list of marker styles for each technology field\nmarkers = ['o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o']\n\n# Create a list of marker sizes for each technology field\nmarkersizes = [10, 10, 10, 10, 10, 10, 10, 10, 10, 10]\n\n# Create a list of marker edge colors for each technology field\nmarkeredgecolors = ['black', 'black', 'black', 'black', 'black', 'black', 'black', 'black', 'black', 'black']\n\n# Create a list of marker face colors for each technology field\nmarkerfacecolors = ['white', 'white', 'white', 'white', 'white', 'white', 'white', 'white', 'white', 'white']\n\n# Create a list of line widths for each technology field\nlinewidths = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n\n# Create a list of line join styles for each technology field\njoinstyles = ['round', 'round', 'round', 'round', 'round', 'round', 'round', 'round', 'round', 'round']\n\n# Create a list of line cap styles for each technology field\ncapstyles = ['round', 'round', 'round', 'round', 'round', 'round', 'round', 'round', 'round', 'round']\n\n# Create a list of line dash patterns for each technology field\ndashpatterns = [(1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1)]\n\n# Create a list of line dash offsets for each technology field\ndashoffsets = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n\n# Create a list of line antialiased values for each technology field\nantialiaseds = [True, True, True, True, True, True, True, True, True, True]\n\n# Create a list of line solid cap styles for each technology field\nsolidcapstyles = ['round', 'round', 'round', 'round', 'round', 'round', 'round', 'round', 'round', 'round']\n\n# Create a list of line solid join styles for each technology field\nsolidjoinstyles = ['round', 'round', 'round', 'round', 'round', 'round', 'round', 'round', 'round', 'round']\n\n# Create a list of line solid dash patterns for each technology field\nsoliddashpatterns = [(1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1)]\n\n# Create a list of line solid dash offsets for each technology field\nsoliddashoffsets = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n\n# Create a list of line solid antialiased values for each technology field\nsolidantialiaseds = [True, True, True, True, True, True, True, True, True, True]\n\n# Create a list of line solid solid cap styles for each technology field\nsolidsolidcapstyles = ['round', 'round', 'round', 'round', 'round', 'round', 'round', 'round', 'round', 'round']\n\n# Create a list of line solid solid join styles for each technology field\nsolidsolidjoinstyles = ['round', 'round', 'round', 'round', 'round', 'round', 'round', 'round', 'round', 'round']\n\n# Create a list of line solid solid dash patterns for each technology field\nsolidsoliddashpatterns = [(1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1)]\n\n# Create a list of line solid solid dash offsets for each technology field\nsolidsoliddashoffsets = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n\n# Create a list of line solid solid antialiased values for each technology field\nsolidsolidantialiaseds = [True, True, True, True, True, True, True, True, True, True]\n\n# Create a list of line solid solid solid cap styles for each technology field\nsolidsolidsolidcapstyles = ['round', 'round', 'round', 'round', 'round', 'round', 'round', 'round', 'round', 'round']\n\n# Create a list of line solid solid solid join styles for each technology field\nsolidsolidsolidjoinstyles = ['round', 'round', 'round', 'round', 'round', 'round', 'round', 'round', 'round', 'round']\n\n# Create a list of line solid solid solid dash patterns for each technology field\nsolidsolidsoliddashpatterns = [(1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1)]\n\n# Create a list of line solid solid solid dash offsets for each technology field\nsolidsolidsoliddashoffsets = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n\n# Create a list of line solid solid solid antialiased values for each technology field\nsolidsolidsolidantialiaseds = [True, True, True, True, True, True, True, True, True, True]\n\n# Create a list of line solid solid solid solid cap styles for each technology field\nsolidsolidsolidsolidcapstyles = ['round', 'round', 'round', 'round', 'round', 'round', 'round', 'round', 'round', 'round']\n\n# Create a list of line solid solid solid solid join styles for each technology field\nsolidsolidsolidsolidjoinstyles = ['round', 'round', 'round', 'round', 'round', 'round', 'round', 'round', 'round', 'round']\n\n# Create a list of line solid solid solid solid dash patterns for each technology field\nsolidsolidsolidsoliddashpatterns = [(1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1)]\n\n# Create a list of line solid solid solid solid dash offsets for each technology field\nsolidsolidsolidsoliddashoffsets = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n\n# Create a list of line solid solid solid solid antialiased values for each technology field\nsolidsolidsolidsolidantialiaseds = [True, True, True, True, True, True, True, True, True, True]\n\n# Create a list of line solid solid solid solid solid cap styles for each technology field\nsolidsolidsolidsolidsolidcapstyles = ['round', 'round', 'round', 'round', 'round', 'round', 'round', 'round', 'round', 'round']\n\n# Create a list of line solid solid solid solid solid join styles for each technology field\nsolidsolidsolidsolidsolidjoinstyles = ['round', 'round', 'round', 'round', 'round', 'round', 'round', 'round', 'round', 'round']\n\n# Create a list of line solid solid solid solid solid dash patterns for each technology field\nsolidsolidsolidsolidsoliddashpatterns = [(1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1)]\n\n# Create a list of line solid solid solid solid solid dash offsets for each technology field\nsolidsolidsolidsolidsoliddashoffsets = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n\n# Create a list of line solid solid solid solid solid antialiased values for each technology field\nsolidsolidsolidsolidsolidantialiaseds = [True, True, True, True, True, True, True, True, True, True]\n\n# Create a list of line solid solid solid solid solid solid cap styles for each technology field\nsolidsolidsolidsolidsolidsolidcapstyles = ['round', 'round', 'round', 'round', 'round', 'round', 'round', 'round', 'round', 'round']\n\n# Create a list of line solid solid solid solid solid solid join styles for each technology field\nsolidsolidsolidsolidsolidsolidjoinstyles = ['round', 'round', 'round', 'round', 'round', 'round', 'round', 'round', 'round', 'round']\n\n# Create a list of line solid solid solid solid solid solid dash patterns for each technology field\nsolidsolidsolidsolidsolidsoliddashpatterns = [(1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1)]\n\n# Create a list of line solid solid solid solid solid solid dash offsets for each technology field\nsolidsolidsolidsolidsolidsoliddashoffsets = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n\n# Create a list of line solid solid solid solid solid solid antialiased values for each technology field\nsolidsolidsolidsolidsolidsolidantialiaseds = [True, True, True, True, True, True, True, True, True, True]\n\n# Create a list of line solid solid solid solid solid solid solid cap styles for each technology field\nsolidsolidsolidsolidsolidsolidsolidcapstyles = ['round', 'round', 'round', 'round', 'round', 'round', 'round', 'round', 'round', 'round']\n\n# Create a list of line solid solid solid solid solid solid solid join styles for each technology field\nsolidsolidsolidsolidsolidsolidsolidjoinstyles = ['round', 'round', 'round', 'round', 'round', 'round', 'round', 'round', 'round', 'round']\n\n# Create a list of line solid solid solid solid solid solid solid dash patterns for each technology field\nsolidsolidsolidsolidsolidsolidsoliddashpatterns = [(1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1)]\n\n# Create a list of line solid solid solid solid solid solid solid dash offsets for each technology field\nsolidsolidsolidsolidsolidsolidsoliddashoffsets = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n\n# Create a list of line solid solid solid solid solid solid solid antialiased values for each technology field\nsolidsolidsolidsolidsolidsolidsolidantialiaseds = [True, True, True, True, True, True, True, True, True, True]\n\n# Create a list of line solid solid solid solid solid solid solid solid cap styles for each technology field\nsolidsolidsolidsolidsolidsolidsolidsolidcapstyles = ['round', 'round', 'round', 'round', 'round', 'round', 'round', 'round', 'round', 'round']\n\n# Create a list of line solid solid solid solid solid solid solid solid join styles for each technology field\nsolidsolidsolidsolidsolidsolidsolidsolidjoinstyles = ['round', 'round', 'round', 'round', 'round', 'round', 'round', 'round', 'round', 'round']\n\n# Create a list of line solid solid solid solid solid solid solid solid dash patterns for each technology field\nsolidsolidsolidsolidsolidsolidsolidsoliddashpatterns = [(1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1)]\n\n# Create a list of line solid solid solid solid solid solid solid solid dash offsets for each technology field\nsolidsolidsolidsolidsolidsolidsolidsoliddashoffsets = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n\n# Create a list of line solid solid solid solid solid solid solid solid antialiased values for each technology field\nsolidsolidsolidsolidsolidsolidsolidsolidantialiaseds = [True, True, True, True, True, True, True, True, True, True]\n\n# Create a list of line solid solid solid solid solid solid solid solid solid cap styles for each technology field\nsolidsolidsolidsolidsolidsolidsolidsolidsolidcapstyles = ['round', 'round', 'round', 'round', 'round', 'round', 'round', 'round', 'round', 'round']\n\n# Create a list of line solid solid solid solid solid solid solid solid solid join styles for each technology field\nsolidsolidsolidsolidsolidsolidsolidsolidsolidjoinstyles = ['round', 'round', 'round', 'round', 'round', 'round', 'round', 'round', 'round', 'round']\n\n# Create a list of line solid solid solid solid solid solid solid solid solid dash patterns for each technology field\nsolidsolidsolidsolidsolidsolidsolidsolidsoliddashpatterns = [(1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1)]\n\n# Create a list of line solid solid solid solid solid solid solid solid solid dash offsets for each technology field\nsolidsolidsolidsolidsolidsolidsolidsolidsoliddashoffsets = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n\n# Create a list of line solid solid solid solid solid solid solid solid solid antialiased values for each technology field\nsolidsolidsolidsolidsolidsolidsolidsolidsolidantialiaseds = [True, True, True, True, True, True, True, True, True, True]\n\n# Create a list of line solid solid solid solid solid solid solid solid solid solid cap styles for each technology field\nsolidsolidsolidsolidsolidsolidsolidsolidsolidsolidcapstyles = ['round', 'round', 'round', 'round', 'round', 'round', 'round', 'round', 'round', 'round']\n\n# Create a list of line solid solid solid solid solid solid solid solid solid solid join styles for each technology field\nsolidsolidsolidsolidsolidsolidsolidsolidsolidsolidjoinstyles = ['round', 'round', 'round', 'round', 'round', 'round', 'round', 'round', 'round', 'round']\n\n# Create a list of line solid solid solid solid solid solid solid solid solid solid dash patterns for each technology field\nsolidsolidsolidsolidsolidsolidsolidsolidsolidsoliddashpatterns = [(1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1)]\n\n# Create a list of line solid solid solid solid solid solid solid solid solid solid dash offsets for each technology field\nsolidsolidsolidsolidsolidsolidsolidsolidsolidsoliddashoffsets = [0, 0, 0, 0, "}
{"file": "dataset/ori_500/CB_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Set the color of the background\nax.set_facecolor('lightpink')\n\n# Create a rectangle for the logo\nlogo = plt.Rectangle((0.1, 0.8), 0.2, 0.1, color='orange')\nax.add_patch(logo)\n\n# Create a rectangle for the data points\ndata_points = plt.Rectangle((0.3, 0.7), 0.4, 0.1, color='orange')\nax.add_patch(data_points)\n\n# Create a rectangle for the bin edges\nbin_edges = plt.Rectangle((0.3, 0.6), 0.4, 0.1, color='orange')\nax.add_patch(bin_edges)\n\n# Create a rectangle for the calibration curve\ncalibration_curve = plt.Rectangle((0.3, 0.5), 0.4, 0.1, color='black')\nax.add_patch(calibration_curve)\n\n# Create a line plot for the calibration curve\nx = np.linspace(0, 1, 100)\ny = np.sin(x)\nax.plot(x, y, 'k-')\n\n# Create a scatter plot for the data points\nx = np.random.rand(10)\ny = np.random.rand(10)\nax.scatter(x, y, c='orange', s=100)\n\n# Set the limits of the x-axis and y-axis\nax.set_xlim([0, 1])\nax.set_ylim([0, 1])\n\n# Set the labels of the x-axis and y-axis\nax.set_xlabel('Fraction of positives')\nax.set_ylabel('Predicted probability')\n\n# Set the title of the plot\nax.set_title('Calibration Curve')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_30.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the graph\nax.set_title('Earnings and Growth')\n\n# Set the x-axis label\nax.set_xlabel('Quarter')\n\n# Set the y-axis label\nax.set_ylabel('Earnings ($1000s)')\n\n# Set the x-ticks\nquarters = ['Q1', 'Q2', 'Q3', 'Q4']\nax.set_xticks(range(len(quarters)))\nax.set_xticklabels(quarters)\n\n# Set the y-ticks\nearnings = [250, 300, 350, 400]\nax.set_yticks(earnings)\n\n# Set the y-limits\nax.set_ylim(0, 500)\n\n# Set the y-labels\nax.set_yticklabels(['0', '100', '200', '300', '400', '500'])\n\n# Set the color of the line\nax.plot(quarters, earnings, 'r-')\n\n# Set the color of the bars\nbars = ax.bar(quarters, earnings, color='blue')\n\n# Set the color of the labels\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 2), ha='center', va='bottom')\n\n# Set the color of the legend\nlegend_elements = [plt.Line2D([0], [0], marker='o', color='w', label='Tesla', markerfacecolor='green', markersize=10),\n                    plt.Line2D([0], [0], marker='o', color='w', label='BMW', markerfacecolor='orange', markersize=10),\n                    plt.Line2D([0], [0], marker='o', color='w', label='BYD', markerfacecolor='blue', markersize=10),\n                    plt.Line2D([0], [0], marker='o', color='w', label='Porsche', markerfacecolor='purple', markersize=10)]\nax.legend(handles=legend_elements, loc='upper right')\n\n# Set the color of the grid\nax.grid(True)\n\n# Set the color of the background\nax.set_facecolor('lightgrey')\n\n# Set the color of the text\nax.set_facecolor('white')\n\n# Set the color of the border\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the ticks\nax.tick_params(axis='x', colors='black')\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the labels\nax.set_xlabel('Quarter', color='black')\nax.set_ylabel('Earnings ($1000s)', color='black')\n\n# Set the color of the title\nax.set_title('Earnings and Growth', color='black')\n\n# Set the color of the legend\nax.legend(handlelength=0, handletextpad=0, fancybox=True, shadow=True, loc='upper right')\n\n# Set the color of the grid\nax.grid(True)\n\n# Set the color of the background\nax.set_facecolor('lightgrey')\n\n# Set the color of the text\nax.set_facecolor('white')\n\n# Set the color of the border\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the ticks\nax.tick_params(axis='x', colors='black')\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the labels\nax.set_xlabel('Quarter', color='black')\nax.set_ylabel('Earnings ($1000s)', color='black')\n\n# Set the color of the title\nax.set_title('Earnings and Growth', color='black')\n\n# Set the color of the legend\nax.legend(handlelength=0, handletextpad=0, fancybox=True, shadow=True, loc='upper right')\n\n# Set the color of the grid\nax.grid(True)\n\n# Set the color of the background\nax.set_facecolor('lightgrey')\n\n# Set the color of the text\nax.set_facecolor('white')\n\n# Set the color of the border\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the ticks\nax.tick_params(axis='x', colors='black')\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the labels\nax.set_xlabel('Quarter', color='black')\nax.set_ylabel('Earnings ($1000s)', color='black')\n\n# Set the color of the title\nax.set_title('Earnings and Growth', color='black')\n\n# Set the color of the legend\nax.legend(handlelength=0, handletextpad=0, fancybox=True, shadow=True, loc='upper right')\n\n# Set the color of the grid\nax.grid(True)\n\n# Set the color of the background\nax.set_facecolor('lightgrey')\n\n# Set the color of the text\nax.set_facecolor('white')\n\n# Set the color of the border\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the ticks\nax.tick_params(axis='x', colors='black')\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the labels\nax.set_xlabel('Quarter', color='black')\nax.set_ylabel('Earnings ($1000s)', color='black')\n\n# Set the color of the title\nax.set_title('Earnings and Growth', color='black')\n\n# Set the color of the legend\nax.legend(handlelength=0, handletextpad=0, fancybox=True, shadow=True, loc='upper right')\n\n# Set the color of the grid\nax.grid(True)\n\n# Set the color of the background\nax.set_facecolor('lightgrey')\n\n# Set the color of the text\nax.set_facecolor('white')\n\n# Set the color of the border\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the ticks\nax.tick_params(axis='x', colors='black')\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the labels\nax.set_xlabel('Quarter', color='black')\nax.set_ylabel('Earnings ($1000s)', color='black')\n\n# Set the color of the title\nax.set_title('Earnings and Growth', color='black')\n\n# Set the color of the legend\nax.legend(handlelength=0, handletextpad=0, fancybox=True, shadow=True, loc='upper right')\n\n# Set the color of the grid\nax.grid(True)\n\n# Set the color of the background\nax.set_facecolor('lightgrey')\n\n# Set the color of the text\nax.set_facecolor('white')\n\n# Set the color of the border\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the ticks\nax.tick_params(axis='x', colors='black')\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the labels\nax.set_xlabel('Quarter', color='black')\nax.set_ylabel('Earnings ($1000s)', color='black')\n\n# Set the color of the title\nax.set_title('Earnings and Growth', color='black')\n\n# Set the color of the legend\nax.legend(handlelength=0, handletextpad=0, fancybox=True, shadow=True, loc='upper right')\n\n# Set the color of the grid\nax.grid(True)\n\n# Set the color of the background\nax.set_facecolor('lightgrey')\n\n# Set the color of the text\nax.set_facecolor('white')\n\n# Set the color of the border\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the ticks\nax.tick_params(axis='x', colors='black')\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the labels\nax.set_xlabel('Quarter', color='black')\nax.set_ylabel('Earnings ($1000s)', color='black')\n\n# Set the color of the title\nax.set_title('Earnings and Growth', color='black')\n\n# Set the color of the legend\nax.legend(handlelength=0, handletextpad=0, fancybox=True, shadow=True, loc='upper right')\n\n# Set the color of the grid\nax.grid(True)\n\n# Set the color of the background\nax.set_facecolor('lightgrey')\n\n# Set the color of the text\nax.set_facecolor('white')\n\n# Set the color of the border\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the ticks\nax.tick_params(axis='x', colors='black')\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the labels\nax.set_xlabel('Quarter', color='black')\nax.set_ylabel('Earnings ($1000s)', color='black')\n\n# Set the color of the title\nax.set_title('Earnings and Growth', color='black')\n\n# Set the color of the legend\nax.legend(handlelength=0, handletextpad=0, fancybox=True, shadow=True, loc='upper right')\n\n# Set the color of the grid\nax.grid(True)\n\n# Set the color of the background\nax.set_facecolor('lightgrey')\n\n# Set the color of the text\nax.set_facecolor('white')\n\n# Set the color of the border\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the ticks\nax.tick_params(axis='x', colors='black')\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the labels\nax.set_xlabel('Quarter', color='black')\nax.set_ylabel('Earnings ($1000s)', color='black')\n\n# Set the color of the title\nax.set_title('Earnings and Growth', color='black')\n\n# Set the color of the legend\nax.legend(handlelength=0, handletextpad=0, fancybox=True, shadow=True, loc='upper right')\n\n# Set the color of the grid\nax.grid(True)\n\n# Set the color of the background\nax.set_facecolor('lightgrey')\n\n# Set the color of the text\nax.set_facecolor('white')\n\n# Set the color of the border\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the ticks\nax.tick_params(axis='x', colors='black')\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the labels\nax.set_xlabel('Quarter', color='black')\nax.set_ylabel('Earnings ($1000s)', color='black')\n\n# Set the color of the title\nax.set_title('Earnings and Growth', color='black')\n\n# Set the color of the legend\nax.legend(handlelength=0, handletextpad=0, fancybox=True, shadow=True, loc='upper right')\n\n# Set the color of the grid\nax.grid(True)\n\n# Set the color of the background\nax.set_facecolor('lightgrey')\n\n# Set the color of the text\nax.set_facecolor('white')\n\n# Set the color of the border\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the ticks\nax.tick_params(axis='x', colors='black')\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the labels\nax.set_xlabel('Quarter', color='black')\nax.set_ylabel('Earnings ($1000s)', color='black')\n\n# Set the color of the title\nax.set_title('Earnings and Growth', color='black')\n\n# Set the color of the legend\nax.legend(handlelength=0, handletextpad=0, fancybox=True, shadow=True, loc='upper right')\n\n# Set the color of the grid\nax.grid(True)\n\n# Set the color of the background\nax.set_facecolor('lightgrey')\n\n# Set the color of the text\nax.set_facecolor('white')\n\n# Set the color of the border\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the ticks\nax.tick_params(axis='x', colors='black')\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the labels\nax.set_xlabel('Quarter', color='black')\nax.set_ylabel('Earnings ($1000s)', color='black')\n\n# Set the color of the title\nax.set_title('Earnings and Growth', color='black')\n\n# Set the color of the legend\nax.legend(handlelength=0, handletextpad=0, fancybox=True, shadow=True, loc='upper right')\n\n# Set the color of the grid\nax.grid(True)\n\n# Set the color of the background\nax.set_facecolor('lightgrey')\n\n# Set the color of the text\nax.set_facecolor('white')\n\n# Set the color of the border\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the ticks\nax.tick_params(axis='x', colors='black')\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the labels\nax.set_xlabel('Quarter', color='black')\nax.set_ylabel('Earnings ($1000s)', color='black')\n\n# Set the color of the title\nax.set_title('Earnings and Growth', color='black')\n\n# Set the color of the legend\nax.legend(handlelength=0, handletextpad=0, fancybox=True, shadow=True, loc='upper right')\n\n# Set the color of the grid\nax.grid(True)\n\n# Set the color of the background\nax.set_facecolor('lightgrey')\n\n# Set the color of the text\nax.set_facecolor('white')\n\n# Set the color of the border\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the ticks\nax.tick_params(axis='x', colors='black')\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the labels\nax.set_xlabel('Quarter', color='black')\nax.set_ylabel('Earnings ($1000s)', color='black')\n\n# Set the color of the title\nax.set_title('Earnings and Growth', color='black')\n\n# Set the color of the legend\nax.legend(handlelength=0, handletextpad=0, fancybox=True, shadow=True, loc='upper right')\n\n# Set the color of the grid\nax.grid(True)\n\n# Set the color of the background\nax.set_facecolor('lightgrey')\n\n# Set the color of the text\nax.set_facecolor('white')\n\n# Set the color of the border\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the ticks\nax.tick_params(axis='x', colors='black')\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the labels\nax.set_xlabel('Quarter', color='black')\nax.set_ylabel('Earnings ($1000s)', color='black')\n\n# Set the color of the title\nax.set_title('Earnings and Growth', color='black')\n\n# Set the color of the legend\nax.legend(handlelength=0, handletextpad=0, fancybox=True, shadow=True, loc='upper right')\n\n# Set the color of the grid\nax.grid(True)\n\n# Set the color of the background\nax.set_facecolor('lightgrey')\n\n# Set the color of the text\nax.set_facecolor('white')\n\n# Set the color of the border\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the ticks\nax.tick_params(axis='x', colors='black')\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the labels\nax.set_xlabel('Quarter', color='black')\nax.set_ylabel('Earnings ($1000s)', color='black')\n\n# Set the color of the title\nax.set_title('Earnings and Growth', color='black')\n\n# Set the color of the legend\nax.legend(handlelength=0, handletextpad=0, fancybox=True, shadow=True, loc='upper right')\n\n# Set the color of the grid\nax.grid(True)\n\n# Set the color of the background\nax.set_facecolor('lightgrey')\n\n# Set the color of the text\nax.set_facecolor('white')\n\n# Set the color of the border\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the ticks\nax.tick_params(axis='x', colors='black')\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the labels\nax.set_xlabel('Quarter', color='black')\nax.set_ylabel('Earnings ($1000s)', color='black')\n\n# Set the color of the title\nax.set_title('Earnings and Growth"}
{"file": "dataset/ori_500/CB_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Set the title of the plot\nax.set_title('AI Model Performance')\n\n# Set the x-axis label\nax.set_xlabel('Methods')\n\n# Set the y-axis label\nax.set_ylabel('Normalized Requirements (lower is better)')\n\n# Define the data for the plot\nx = ['Linear probing', 'BitFit', 'Prompt tuning', 'Full finetuning', 'LoRA', 'Ours (LoSA)']\ny = [72, 74, 76, 78, 80, 82]\n\n# Plot the data\nax.plot(x, y, marker='o', linestyle='-', color='black')\n\n# Add rectangles for the bars\nrects = []\nfor i, v in enumerate(y):\n    rects.append(ax.bar(x[i], v, width=0.5, bottom=0, color='orange'))\n\n# Add labels for the bars\nfor rect in rects:\n    height = rect.get_height()\n    ax.annotate('{}'.format(height),\n                xy=(rect.get_x() + rect.get_width() / 2, height),\n                xytext=(0, 3),  # 3 points vertical offset\n                textcoords=\"offset points\",\n                ha='center', va='bottom')\n\n# Add a legend\nax.legend(['Accuracy'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Team Performance')\n\n# Set the x-axis label\nax.set_xlabel('TM-score')\n\n# Set the y-axis label\nax.set_ylabel('Sequident')\n\n# Generate random data for the scatter plot\nx = np.random.rand(100)\ny = np.random.rand(100)\n\n# Plot the scatter plot\nax.scatter(x, y, color='blue')\n\n# Add a grid\nax.grid(True)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Set the title of the plot\nax.set_title('Average Norm of Difference Vectors')\n\n# Set the x-axis label\nax.set_xlabel('Relative Cluster Size')\n\n# Set the y-axis label\nax.set_ylabel('Average Norm of Difference Vectors')\n\n# Set the x-axis limits\nax.set_xlim([25, 45])\n\n# Set the y-axis limits\nax.set_ylim([-10, 35])\n\n# Create a scatter plot with random data\nx = np.random.rand(100)\ny = np.random.rand(100)\nax.scatter(x, y, color='red')\n\n# Create a second scatter plot with random data\nx = np.random.rand(100)\ny = np.random.rand(100)\nax.scatter(x, y, color='green')\n\n# Create a third scatter plot with random data\nx = np.random.rand(100)\ny = np.random.rand(100)\nax.scatter(x, y, color='blue')\n\n# Add a legend to the plot\nax.legend(['Species 1', 'Species 2', 'Species 3'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Heart Rate Change Over Time')\n\n# Set the x-axis label\nax.set_xlabel('Time (in hours)')\n\n# Set the y-axis label\nax.set_ylabel('Heart Rate (in BPM)')\n\n# Set the x-axis limits\nax.set_xlim(0, 12)\n\n# Set the y-axis limits\nax.set_ylim(0, 130)\n\n# Set the x-axis ticks\nax.set_xticks([0, 2, 4, 6, 8, 10, 12])\n\n# Set the y-axis ticks\nax.set_yticks([0, 20, 40, 60, 80, 100, 120])\n\n# Set the x-axis tick labels\nax.set_xticklabels(['0K', '2K', '4K', '6K', '8K', '10K', '12K'])\n\n# Set the y-axis tick labels\nax.set_yticklabels(['0', '20', '40', '60', '80', '100', '120'])\n\n# Plot the data\nax.plot([0, 2, 4, 6, 8, 10, 12], [99.6, 99.9, 99.9, 99.5, 92.3, 91.3, 90.9], 'b-')\n\n# Add a legend\nax.legend(['Heart Rate'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Set the background color of the plot\nax.set_facecolor('white')\n\n# Set the title of the plot\nax.set_title('TMS Score vs Sequence ID')\n\n# Set the x-axis label\nax.set_xlabel('Sequence ID')\n\n# Set the y-axis label\nax.set_ylabel('TMS Score')\n\n# Set the x-axis limits\nax.set_xlim(0, 10)\n\n# Set the y-axis limits\nax.set_ylim(0, 1)\n\n# Set the x-axis ticks\nax.set_xticks(np.arange(0, 11, 1))\n\n# Set the y-axis ticks\nax.set_yticks(np.arange(0, 1.1, 0.1))\n\n# Set the grid lines\nax.grid(True)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue"}
{"file": "dataset/ori_500/CB_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\nyears = [4211, 2411, 2141, 1124]\nvalues = [0.9628, 0.9604, 0.9624, 0.9592]\nsum_values = [0.9641, 0.9641, 0.9624, 0.9561]\n\n# Create figure and axis objects\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot data\nax.plot(years, values, 'b-o', label='SRCC')\nax.plot(years, sum_values, 'r-o', label='Sum (SRCC + PLCC)')\n\n# Set title and labels\nax.set_title('SRCC and PLCC values with their sum for different modes')\nax.set_xlabel('Modes')\nax.set_ylabel('Values')\n\n# Add legend\nax.legend()\n\n# Set grid\nax.grid(True)\n\n# Set y-axis limits\nax.set_ylim(0.9561, 0.9641)\n\n# Set x-axis limits\nax.set_xlim(4211, 1124)\n\n# Set color of the background\nax.set_facecolor('lightgrey')\n\n# Set color of the border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set color of the ticks\nax.tick_params(axis='x', colors='black')\nax.tick_params(axis='y', colors='black')\n\n# Set color of the labels\nax.xaxis.label.set_color('black')\nax.yaxis.label.set_color('black')\n\n# Set color of the title\nax.title.set_color('black')\n\n# Set color of the legend\nax.legend().get_frame().set_facecolor('white')\n\n# Set color of the grid\nax.grid(True, color='black')\n\n# Set color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set color of the spines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set color of the labels\nax.xaxis.label.set_color('black')\nax.yaxis.label.set_color('black')\n\n# Set color of the title\nax.title.set_color('black')\n\n# Set color of the legend\nax.legend().get_frame().set_facecolor('white')\n\n# Set color of the grid\nax.grid(True, color='black')\n\n# Set color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set color of the spines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set color of the labels\nax.xaxis.label.set_color('black')\nax.yaxis.label.set_color('black')\n\n# Set color of the title\nax.title.set_color('black')\n\n# Set color of the legend\nax.legend().get_frame().set_facecolor('white')\n\n# Set color of the grid\nax.grid(True, color='black')\n\n# Set color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set color of the spines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set color of the labels\nax.xaxis.label.set_color('black')\nax.yaxis.label.set_color('black')\n\n# Set color of the title\nax.title.set_color('black')\n\n# Set color of the legend\nax.legend().get_frame().set_facecolor('white')\n\n# Set color of the grid\nax.grid(True, color='black')\n\n# Set color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set color of the spines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set color of the labels\nax.xaxis.label.set_color('black')\nax.yaxis.label.set_color('black')\n\n# Set color of the title\nax.title.set_color('black')\n\n# Set color of the legend\nax.legend().get_frame().set_facecolor('white')\n\n# Set color of the grid\nax.grid(True, color='black')\n\n# Set color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set color of the spines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set color of the labels\nax.xaxis.label.set_color('black')\nax.yaxis.label.set_color('black')\n\n# Set color of the title\nax.title.set_color('black')\n\n# Set color of the legend\nax.legend().get_frame().set_facecolor('white')\n\n# Set color of the grid\nax.grid(True, color='black')\n\n# Set color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set color of the spines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set color of the labels\nax.xaxis.label.set_color('black')\nax.yaxis.label.set_color('black')\n\n# Set color of the title\nax.title.set_color('black')\n\n# Set color of the legend\nax.legend().get_frame().set_facecolor('white')\n\n# Set color of the grid\nax.grid(True, color='black')\n\n# Set color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set color of the spines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set color of the labels\nax.xaxis.label.set_color('black')\nax.yaxis.label.set_color('black')\n\n# Set color of the title\nax.title.set_color('black')\n\n# Set color of the legend\nax.legend().get_frame().set_facecolor('white')\n\n# Set color of the grid\nax.grid(True, color='black')\n\n# Set color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set color of the spines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set color of the labels\nax.xaxis.label.set_color('black')\nax.yaxis.label.set_color('black')\n\n# Set color of the title\nax.title.set_color('black')\n\n# Set color of the legend\nax.legend().get_frame().set_facecolor('white')\n\n# Set color of the grid\nax.grid(True, color='black')\n\n# Set color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set color of the spines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set color of the labels\nax.xaxis.label.set_color('black')\nax.yaxis.label.set_color('black')\n\n# Set color of the title\nax.title.set_color('black')\n\n# Set color of the legend\nax.legend().get_frame().set_facecolor('white')\n\n# Set color of the grid\nax.grid(True, color='black')\n\n# Set color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set color of the spines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set color of the labels\nax.xaxis.label.set_color('black')\nax.yaxis.label.set_color('black')\n\n# Set color of the title\nax.title.set_color('black')\n\n# Set color of the legend\nax.legend().get_frame().set_facecolor('white')\n\n# Set color of the grid\nax.grid(True, color='black')\n\n# Set color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set color of the spines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set color of the labels\nax.xaxis.label.set_color('black')\nax.yaxis.label.set_color('black')\n\n# Set color of the title\nax.title.set_color('black')\n\n# Set color of the legend\nax.legend().get_frame().set_facecolor('white')\n\n# Set color of the grid\nax.grid(True, color='black')\n\n# Set color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set color of the spines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set color of the labels\nax.xaxis.label.set_color('black')\nax.yaxis.label.set_color('black')\n\n# Set color of the title\nax.title.set_color('black')\n\n# Set color of the legend\nax.legend().get_frame().set_facecolor('white')\n\n# Set color of the grid\nax.grid(True, color='black')\n\n# Set color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set color of the spines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set color of the labels\nax.xaxis.label.set_color('black')\nax.yaxis.label.set_color('black')\n\n# Set color of the title\nax.title.set_color('black')\n\n# Set color of the legend\nax.legend().get_frame().set_facecolor('white')\n\n# Set color of the grid\nax.grid(True, color='black')\n\n# Set color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set color of the spines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set color of the labels\nax.xaxis.label.set_color('black')\nax.yaxis.label.set_color('black')\n\n# Set color of the title\nax.title.set_color('black')\n\n# Set color of the legend\nax.legend().get_frame().set_facecolor('white')\n\n# Set color of the grid\nax.grid(True, color='black')\n\n# Set color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set color of the spines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set color of the labels\nax.xaxis.label.set_color('black')\nax.yaxis.label.set_color('black')\n\n# Set color of the title\nax.title.set_color('black')\n\n# Set color of the legend\nax.legend().get_frame().set_facecolor('white')\n\n# Set color of the grid\nax.grid(True, color='black')\n\n# Set color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set color of the spines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set color of the labels\nax.xaxis.label.set_color('black')\nax.yaxis.label.set_color('black')\n\n# Set color of the title\nax.title.set_color('black')\n\n# Set color of the legend\nax.legend().get_frame().set_facecolor('white')\n\n# Set color of the grid\nax.grid(True, color='black')\n\n# Set color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set color of the spines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set color of the labels\nax.xaxis.label.set_color('black')\nax.yaxis.label.set_color('black')\n\n# Set color of the title\nax.title.set_color('black')\n\n# Set color of the legend\nax.legend().get_frame().set_facecolor('white')\n\n# Set color of the grid\nax.grid(True, color='black')\n\n# Set color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set color of the spines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set color of the labels\nax.xaxis.label.set_color('black')\nax.yaxis.label.set_color('black')\n\n# Set color of the title\nax.title.set_color('black')\n\n# Set color of the legend\nax.legend().get_frame().set_facecolor('white')\n\n# Set color of the grid\nax.grid(True, color='black')\n\n# Set color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set color of the spines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set color of the labels\nax.xaxis.label.set_color('black')\nax.yaxis.label.set_color('black')\n\n# Set color of the title\nax.title.set_color('black')\n\n# Set color of the legend\nax.legend().get_frame().set_facecolor('white')\n\n# Set color of the grid\nax.grid(True, color='black')\n\n# Set color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set color of the spines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set color of the labels\nax.xaxis.label.set_color('black')\nax.yaxis.label.set_color('black')\n\n# Set color of the title\nax.title.set_color('black')\n\n# Set color of the legend\nax.legend().get_frame().set_facecolor('white')\n\n# Set color of the grid\nax.grid(True, color='black')\n\n# Set color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set color of the spines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set color of the labels\nax.xaxis.label.set_color('black')\nax.yaxis.label.set_color('black')\n\n# Set color of the title\nax.title.set_color('black')\n\n# Set color of the legend\nax.legend().get_frame().set_facecolor('white')\n\n# Set color of the grid\nax.grid(True, color='black')\n\n# Set color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set color of the spines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set color of the labels\nax.xaxis.label.set_color('black')\nax.yaxis.label.set_color('black')\n\n# Set color of the title\nax.title.set_color('black')\n\n# Set color of the legend\nax.legend().get_frame().set_facecolor('white')\n\n# Set color of the grid\nax.grid(True, color='black')\n\n# Set color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set color of the spines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set color of the labels\nax.xaxis.label.set_color('black')\nax.yaxis.label.set_color('black')\n\n# Set color of the title\nax.title.set_color('black')\n\n# Set color of the legend\nax.legend().get_frame().set_facecolor('white')\n\n# Set color of the grid\nax.grid(True, color='black')\n\n# Set color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set color of the spines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set color of the labels\nax.xaxis.label.set_color('black')\nax.yaxis.label.set_color('black')\n\n# Set color of the title\nax.title.set_color('black')\n\n# Set color of the legend\nax.legend().get_frame().set_facecolor('white')\n\n# Set color of the grid\nax.grid(True, color='black')\n\n# Set color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set color of the spines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set color of the labels\nax.xaxis.label.set_color('black')\nax.yaxis.label.set_color('black')\n\n#"}
{"file": "dataset/ori_500/HR_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and a set of subplots\nfig, axs = plt.subplots(2, 2, figsize=(10.0, 3.0))\n\n# Set the title for each subplot\naxs[0, 0].set_title('IIID-1 SDMT')\naxs[0, 1].set_title('NIID-2 SDST')\naxs[1, 0].set_title('NIID-4 UBSDT')\naxs[1, 1].set_title('NIID-5 UBSDST')\n\n# Create a color map for the scatter plot\ncmap = plt.cm.get_cmap('viridis', 8)\n\n# Create a scatter plot for each subplot\nfor i in range(2):\n    for j in range(2):\n        axs[i, j].scatter(np.random.rand(10), np.random.rand(10), c=np.random.rand(10), cmap=cmap)\n        axs[i, j].set_xlim([0, 3])\n        axs[i, j].set_ylim([0, 3])\n\n# Add a legend to the figure\nfig.legend(['Depth', 'Edge', 'Normals', 'Semseg'], loc='upper right')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Set the title of the plot\nax.set_title('Compact Spiral with Elliptical Hollow Center')\n\n# Create a color bar\ncbar = fig.colorbar(ax)\n\n# Create a scatter plot\nscatter = ax.scatter([0], [0], c='blue', s=100)\n\n# Set the limits of the x and y axes\nax.set_xlim(-10, 10)\nax.set_ylim(-10, 10)\n\n# Set the labels for the x and y axes\nax.set_xlabel('X-axis')\nax.set_ylabel('Y-axis')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 7.0))\n\n# Set the title of the plot\nax.set_title('DAXPY memory bandwidth')\n\n# Set the x and y labels\nax.set_xlabel('Flops/s')\nax.set_ylabel('Flops/byte')\n\n# Set the x and y limits\nax.set_xlim(10**-1, 10**1)\nax.set_ylim(10**-1, 10**1)\n\n# Draw a rectangle\nrect = plt.Rectangle((10**-1, 10**-1), 10**0, 10**0, color='blue', alpha=0.5)\nax.add_patch(rect)\n\n# Draw a line\nline = plt.Line2D([10**-1, 10**1], [10**-1, 10**1], color='black')\nax.add_line(line)\n\n# Draw a scatter plot\nscatter = plt.scatter([10**-1, 10**0, 10**1], [10**-1, 10**0, 10**1], color=['red', 'green', 'blue'])\nax.add_collection(scatter)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('f(x) = 0.5x^2 + 0.1x + 0.01')\n\n# Set the x-axis label\nax.set_xlabel('x')\n\n# Set the y-axis label\nax.set_ylabel('f(x)')\n\n# Set the x-axis limits\nax.set_xlim(0, 1)\n\n# Set the y-axis limits\nax.set_ylim(0, 1)\n\n# Set the x-axis ticks\nax.set_xticks([0, 0.25, 0.5, 0.75, 1])\n\n# Set the y-axis ticks\nax.set_yticks([0, 0.25, 0.5, 0.75, 1])\n\n# Set the x-axis tick labels\nax.set_xticklabels(['0', '0.25', '0.5', '0.75', '1'])\n\n# Set the y-axis tick labels\nax.set_yticklabels(['0', '0.25', '0.5', '0.75', '1'])\n\n# Set the x-axis grid lines\nax.grid(True)\n\n# Set the y-axis grid lines\nax.grid(True)\n\n# Set the x-axis color\nax.spines['left'].set_color('red')\n\n# Set the y-axis color\nax.spines['bottom'].set_color('blue')\n\n# Set the x-axis line width\nax.spines['left'].set_linewidth(4.0)\n\n# Set the y-axis line width\nax.spines['bottom'].set_linewidth(4.0)\n\n# Set the x-axis line style\nax.spines['left'].set_linestyle('--')\n\n# Set the y-axis line style\nax.spines['bottom'].set_linestyle('--')\n\n# Set the x-axis line color\nax.spines['left'].set_color('green')\n\n# Set the y-axis line color\nax.spines['bottom'].set_color('yellow')\n\n# Set the x-axis line width\nax.spines['left'].set_linewidth(2.0)\n\n# Set the y-axis line width\nax.spines['bottom'].set_linewidth(2.0)\n\n# Set the x-axis line style\nax.spines['left'].set_linestyle('-.')\n\n# Set the y-axis line style\nax.spines['bottom'].set_linestyle('-.')\n\n# Set the x-axis line color\nax.spines['left'].set_color('purple')\n\n# Set the y-axis line color\nax.spines['bottom'].set_color('orange')\n\n# Set the x-axis line width\nax.spines['left'].set_linewidth(1.0)\n\n# Set the y-axis line width\nax.spines['bottom'].set_linewidth(1.0)\n\n# Set the x-axis line style\nax.spines['left'].set_linestyle(':')\n\n# Set the y-axis line style\nax.spines['bottom'].set_linestyle(':')\n\n# Set the x-axis line color\nax.spines['left'].set_color('pink')\n\n# Set the y-axis line color\nax.spines['bottom'].set_color('brown')\n\n# Set the x-axis line width\nax.spines['left'].set_linewidth(0.5)\n\n# Set the y-axis line width\nax.spines['bottom'].set_linewidth(0.5)\n\n# Set the x-axis line style\nax.spines['left'].set_linestyle('-')\n\n# Set the y-axis line style\nax.spines['bottom'].set_linestyle('-')\n\n# Set the x-axis line color\nax.spines['left'].set_color('grey')\n\n# Set the y-axis line color\nax.spines['bottom'].set_color('black')\n\n# Set the x-axis line width\nax.spines['left'].set_linewidth(0.25)\n\n# Set the y-axis line width\nax.spines['bottom'].set_linewidth(0.25)\n\n# Set the x-axis line style\nax.spines['left'].set_linestyle('-')\n\n# Set the y-axis line style\nax.spines['bottom'].set_linestyle('-')\n\n# Set the x-axis line color\nax.spines['left'].set_color('white')\n\n# Set the y-axis line color\nax.spines['bottom'].set_color('silver')\n\n# Set the x-axis line width\nax.spines['left'].set_linewidth(0.125)\n\n# Set the y-axis line width\nax.spines['bottom'].set_linewidth(0.125)\n\n# Set the x-axis line style\nax.spines['left'].set_linestyle('-')\n\n# Set the y-axis line style\nax.spines['bottom'].set_linestyle('-')\n\n# Set the x-axis line color\nax.spines['left'].set_color('gold')\n\n# Set the y-axis line color\nax.spines['bottom'].set_color('cyan')\n\n# Set the x-axis line width\nax.spines['left'].set_linewidth(0.0625)\n\n# Set the y-axis line width\nax.spines['bottom'].set_linewidth(0.0625)\n\n# Set the x-axis line style\nax.spines['left'].set_linestyle('-')\n\n# Set the y-axis line style\nax.spines['bottom'].set_linestyle('-')\n\n# Set the x-axis line color\nax.spines['left'].set_color('magenta')\n\n# Set the y-axis line color\nax.spines['bottom'].set_color('lime')\n\n# Set the x-axis line width\nax.spines['left'].set_linewidth(0.03125)\n\n# Set the y-axis line width\nax.spines['bottom'].set_linewidth(0.03125)\n\n# Set the x-axis line style\nax.spines['left'].set_linestyle('-')\n\n# Set the y-axis line style\nax.spines['bottom'].set_linestyle('-')\n\n# Set the x-axis line color\nax.spines['left'].set_color('aqua')\n\n# Set the y-axis line color\nax.spines['bottom'].set_color('navy')\n\n# Set the x-axis line width\nax.spines['left'].set_linewidth(0.015625)\n\n# Set the y-axis line width\nax.spines['bottom'].set_linewidth(0.015625)\n\n# Set the x-axis line style\nax.spines['left'].set_linestyle('-')\n\n# Set the y-axis line style\nax.spines['bottom'].set_linestyle('-')\n\n# Set the x-axis line color\nax.spines['left'].set_color('teal')\n\n# Set the y-axis line color\nax.spines['bottom'].set_color('brown')\n\n# Set the x-axis line width\nax.spines['left'].set_linewidth(0.0078125)\n\n# Set the y-axis line width\nax.spines['bottom'].set_linewidth(0.0078125)\n\n# Set the x-axis line style\nax.spines['left'].set_linestyle('-')\n\n# Set the y-axis line style\nax.spines['bottom'].set_linestyle('-')\n\n# Set the x-axis line color\nax.spines['left'].set_color('olive')\n\n# Set the y-axis line color\nax.spines['bottom'].set_color('silver')\n\n# Set the x-axis line width\nax.spines['left'].set_linewidth(0.00390625)\n\n# Set the y-axis line width\nax.spines['bottom'].set_linewidth(0.00390625)\n\n# Set the x-axis line style\nax.spines['left'].set_linestyle('-')\n\n# Set the y-axis line style\nax.spines['bottom'].set_linestyle('-')\n\n# Set the x-axis line color\nax.spines['left'].set_color('gray')\n\n# Set the y-axis line color\nax.spines['bottom'].set_color('black')\n\n# Set the x-axis line width\nax.spines['left'].set_linewidth(0.001953125)\n\n# Set the y-axis line width\nax.spines['bottom'].set_linewidth(0.001953125)\n\n# Set the x-axis line style\nax.spines['left'].set_linestyle('-')\n\n# Set the y-axis line style\nax.spines['bottom'].set_linestyle('-')\n\n# Set the x-axis line color\nax.spines['left'].set_color('white')\n\n# Set the y-axis line color\nax.spines['bottom'].set_color('silver')\n\n# Set the x-axis line width\nax.spines['left'].set_linewidth(0.0009765625)\n\n# Set the y-axis line width\nax.spines['bottom'].set_linewidth(0.0009765625)\n\n# Set the x-axis line style\nax.spines['left'].set_linestyle('-')\n\n# Set the y-axis line style\nax.spines['bottom'].set_linestyle('-')\n\n# Set the x-axis line color\nax.spines['left'].set_color('gold')\n\n# Set the y-axis line color\nax.spines['bottom'].set_color('cyan')\n\n# Set the x-axis line width\nax.spines['left'].set_linewidth(0.00048828125)\n\n# Set the y-axis line width\nax.spines['bottom'].set_linewidth(0.00048828125)\n\n# Set the x-axis line style\nax.spines['left'].set_linestyle('-')\n\n# Set the y-axis line style\nax.spines['bottom'].set_linestyle('-')\n\n# Set the x-axis line color\nax.spines['left'].set_color('magenta')\n\n# Set the y-axis line color\nax.spines['bottom'].set_color('lime')\n\n# Set the x-axis line width\nax.spines['left'].set_linewidth(0.000244140625)\n\n# Set the y-axis line width\nax.spines['bottom'].set_linewidth(0.000244140625)\n\n# Set the x-axis line style\nax.spines['left'].set_linestyle('-')\n\n# Set the y-axis line style\nax.spines['bottom'].set_linestyle('-')\n\n# Set the x-axis line color\nax.spines['left'].set_color('aqua')\n\n# Set the y-axis line color\nax.spines['bottom'].set_color('navy')\n\n# Set the x-axis line width\nax.spines['left'].set_linewidth(0.0001220703125)\n\n# Set the y-axis line width\nax.spines['bottom'].set_linewidth(0.0001220703125)\n\n# Set the x-axis line style\nax.spines['left'].set_linestyle('-')\n\n# Set the y-axis line style\nax.spines['bottom'].set_linestyle('-')\n\n# Set the x-axis line color\nax.spines['left'].set_color('teal')\n\n# Set the y-axis line color\nax.spines['bottom'].set_color('brown')\n\n# Set the x-axis line width\nax.spines['left'].set_linewidth(0.00006103515625)\n\n# Set the y-axis line width\nax.spines['bottom'].set_linewidth(0.00006103515625)\n\n# Set the x-axis line style\nax.spines['left'].set_linestyle('-')\n\n# Set the y-axis line style\nax.spines['bottom'].set_linestyle('-')\n\n# Set the x-axis line color\nax.spines['left'].set_color('olive')\n\n# Set the y-axis line color\nax.spines['bottom'].set_color('silver')\n\n# Set the x-axis line width\nax.spines['left'].set_linewidth(0.000030517578125)\n\n# Set the y-axis line width\nax.spines['bottom'].set_linewidth(0.000030517578125)\n\n# Set the x-axis line style\nax.spines['left'].set_linestyle('-')\n\n# Set the y-axis line style\nax.spines['bottom'].set_linestyle('-')\n\n# Set the x-axis line color\nax.spines['left'].set_color('gray')\n\n# Set the y-axis line color\nax.spines['bottom'].set_color('black')\n\n# Set the x-axis line width\nax.spines['left'].set_linewidth(0.0000152587890625)\n\n# Set the y-axis line width\nax.spines['bottom'].set_linewidth(0.0000152587890625)\n\n# Set the x-axis line style\nax.spines['left'].set_linestyle('-')\n\n# Set the y-axis line style\nax.spines['bottom'].set_linestyle('-')\n\n# Set the x-axis line color\nax.spines['left'].set_color('white')\n\n# Set the y-axis line color\nax.spines['bottom'].set_color('silver')\n\n# Set the x-axis line width\nax.spines['left'].set_linewidth(0.00000762939453125)\n\n# Set the y-axis line width\nax.spines['bottom'].set_linewidth(0.00000762939453125)\n\n# Set the x-axis line style\nax.spines['left'].set_linestyle('-')\n\n# Set the y-axis line style\nax.spines['bottom'].set_linestyle('-')\n\n# Set the x-axis line color\nax.spines['left'].set_color('gold')\n\n# Set the y-axis line color\nax.spines['bottom'].set_color('cyan')\n\n# Set the x-axis line width\nax.spines['left'].set_linewidth(0.000003814697265625)\n\n# Set the y-axis line width\nax.spines['bottom'].set_linewidth(0.000003814697265625)\n\n# Set the x-axis line style\nax.spines['left'].set_linestyle('-')\n\n# Set the y-axis line style\nax.spines['bottom'].set_linestyle('-')\n\n# Set the x-axis line color\nax.spines['left'].set_color('magenta')\n\n# Set the y-axis line color\nax.spines['bottom'].set_color('lime')\n\n# Set the x-axis line width\nax.spines['left'].set_linewidth(0.0000019073486328125)\n\n# Set the y-axis line width\nax.spines['bottom'].set_linewidth(0.0000019073486328125)\n\n# Set the x-axis line style\nax.spines['left'].set_linestyle('-')\n\n# Set the y-axis line style\nax.spines['bottom'].set_linestyle('-')\n\n# Set the x-axis line color\nax.spines['left'].set_color('aqua')\n\n# Set the y-axis line color\nax.spines['bottom'].set_color('navy')\n\n# Set the x-axis line width\nax.spines['left'].set_linewidth(0.00000095367431640625)\n\n# Set the y-axis line width\nax.spines['bottom'].set_linewidth(0.00000095367431640625)\n\n# Set the x-axis line style\nax.spines['left'].set_linestyle('-')\n\n# Set the y-axis line style\nax.spines['bottom'].set_linestyle('-')\n\n# Set the x-axis line color\nax.spines['left'].set_color('teal')\n\n# Set the y-axis line color\nax.spines['bottom'].set_color('brown')\n\n# Set the x-axis line width\nax.spines['left'].set_linewidth(0.000000476837158203125)\n\n# Set the y-axis line width\nax.spines['bottom'].set_linewidth(0.000000476837158203125)\n\n# Set the x-axis line style\nax.spines['left'].set_linestyle('-')\n\n# Set the y-axis line style\nax.spines['bottom'].set_linestyle('-')\n\n# Set the x-axis line color\nax.spines['left'].set_color('olive')\n\n# Set the y-axis line color\nax.spines['bottom'].set_color('silver')\n\n# Set the x-axis line width\nax.spines['left'].set_linewidth(0.0000002384185791015625)\n\n# Set the y-axis line width\nax.spines['bottom'].set_linewidth(0.0000002384185791015625)\n\n# Set the x-axis line style\nax.spines['left'].set_linestyle('-')\n\n# Set the y-axis line style\nax.spines['bottom'].set_linestyle('-')\n\n# Set the x-axis line color\nax.spines['left'].set_color('gray')\n\n# Set the y-axis line color\nax.spines['bottom'].set_color('black')\n\n# Set the x-axis line width\nax.spines['left'].set_linewidth(0.00000011920928955078125)\n\n# Set the y-axis line width\nax.spines['bottom'].set_linewidth(0.00000011920928955078125)\n\n# Set the x-axis line style\nax.spines['left'].set_linestyle('-')\n\n# Set the y-axis line style\nax.spines['bottom'].set_linestyle('-')\n\n# Set the x-axis line color\nax.spines['left'].set_color('white')\n\n# Set the y-axis line color\nax.spines['bottom'].set_color('silver')\n\n# Set the x-axis line width\nax.spines['left'].set_linewidth(0.000000059604644775390625)\n\n# Set the y-axis line width\nax.spines['bottom'].set_linewidth(0.000000059604644775390625)\n\n# Set the x-axis line style\nax.spines['left'].set_linestyle('-')\n\n# Set the y-axis line style\nax.spines['bottom'].set_lin"}
{"file": "dataset/ori_500/HR_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Define the data for the plot\nx = np.linspace(0, 10, 100)\ny = np.sin(x)\n\n# Plot the data\nax.plot(x, y)\n\n# Set the title of the plot\nax.set_title('Sine Wave')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Qwen-VL-Max')\n\n# Create a color map for the levels\ncmap = plt.get_cmap('tab20')\n\n# Create a scatter plot with the data\nscatter = ax.scatter(np.random.rand(10), np.random.rand(10), c=np.random.rand(10), cmap=cmap)\n\n# Add a color bar to the plot\ncbar = fig.colorbar(scatter)\ncbar.set_label('Level')\n\n# Set the limits of the x and y axes\nax.set_xlim([0, 1])\nax.set_ylim([0, 1])\n\n# Set the labels of the x and y axes\nax.set_xlabel('X-axis')\nax.set_ylabel('Y-axis')\n\n# Set the aspect ratio of the plot\nax.set_aspect('equal')\n\n# Set the grid lines\nax.grid(True)\n\n# Set the tick marks\nax.set_xticks(np.arange(0, 1.1, 0.1))\nax.set_yticks(np.arange(0, 1.1, 0.1))\n\n# Set the tick labels\nax.set_xticklabels(['Level 1', 'Level 2', 'Level 3', 'Level 4', 'Level 5'])\nax.set_yticklabels(['GPT4V-CoT', 'Gemini Pro-Cot', 'Gemini Pro'])\n\n# Set the font size of the tick labels\nax.tick_params(axis='both', which='major', labelsize=8)\n\n# Set the font size of the title\nax.set_title('Qwen-VL-Max', fontsize=12)\n\n# Set the font size of the labels\nax.set_xlabel('X-axis', fontsize=10)\nax.set_ylabel('Y-axis', fontsize=10)\n\n# Set the font size of the color bar label\ncbar.ax.set_ylabel('Level', fontsize=10)\n\n# Set the font size of the grid lines\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Set the font size of the tick marks\nax.set_xticks(np.arange(0, 1.1, 0.1))\nax.set_yticks(np.arange(0, 1.1, 0.1))\n\n# Set the font size of the tick labels\nax.set_xticklabels(['Level 1', 'Level 2', 'Level 3', 'Level 4', 'Level 5'], fontsize=8)\nax.set_yticklabels(['GPT4V-CoT', 'Gemini Pro-Cot', 'Gemini Pro'], fontsize=8)\n\n# Set the font size of the title\nax.set_title('Qwen-VL-Max', fontsize=12)\n\n# Set the font size of the labels\nax.set_xlabel('X-axis', fontsize=10)\nax.set_ylabel('Y-axis', fontsize=10)\n\n# Set the font size of the color bar label\ncbar.ax.set_ylabel('Level', fontsize=10)\n\n# Set the font size of the grid lines\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Set the font size of the tick marks\nax.set_xticks(np.arange(0, 1.1, 0.1))\nax.set_yticks(np.arange(0, 1.1, 0.1))\n\n# Set the font size of the tick labels\nax.set_xticklabels(['Level 1', 'Level 2', 'Level 3', 'Level 4', 'Level 5'], fontsize=8)\nax.set_yticklabels(['GPT4V-CoT', 'Gemini Pro-Cot', 'Gemini Pro'], fontsize=8)\n\n# Set the font size of the title\nax.set_title('Qwen-VL-Max', fontsize=12)\n\n# Set the font size of the labels\nax.set_xlabel('X-axis', fontsize=10)\nax.set_ylabel('Y-axis', fontsize=10)\n\n# Set the font size of the color bar label\ncbar.ax.set_ylabel('Level', fontsize=10)\n\n# Set the font size of the grid lines\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Set the font size of the tick marks\nax.set_xticks(np.arange(0, 1.1, 0.1))\nax.set_yticks(np.arange(0, 1.1, 0.1))\n\n# Set the font size of the tick labels\nax.set_xticklabels(['Level 1', 'Level 2', 'Level 3', 'Level 4', 'Level 5'], fontsize=8)\nax.set_yticklabels(['GPT4V-CoT', 'Gemini Pro-Cot', 'Gemini Pro'], fontsize=8)\n\n# Set the font size of the title\nax.set_title('Qwen-VL-Max', fontsize=12)\n\n# Set the font size of the labels\nax.set_xlabel('X-axis', fontsize=10)\nax.set_ylabel('Y-axis', fontsize=10)\n\n# Set the font size of the color bar label\ncbar.ax.set_ylabel('Level', fontsize=10)\n\n# Set the font size of the grid lines\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Set the font size of the tick marks\nax.set_xticks(np.arange(0, 1.1, 0.1))\nax.set_yticks(np.arange(0, 1.1, 0.1))\n\n# Set the font size of the tick labels\nax.set_xticklabels(['Level 1', 'Level 2', 'Level 3', 'Level 4', 'Level 5'], fontsize=8)\nax.set_yticklabels(['GPT4V-CoT', 'Gemini Pro-Cot', 'Gemini Pro'], fontsize=8)\n\n# Set the font size of the title\nax.set_title('Qwen-VL-Max', fontsize=12)\n\n# Set the font size of the labels\nax.set_xlabel('X-axis', fontsize=10)\nax.set_ylabel('Y-axis', fontsize=10)\n\n# Set the font size of the color bar label\ncbar.ax.set_ylabel('Level', fontsize=10)\n\n# Set the font size of the grid lines\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Set the font size of the tick marks\nax.set_xticks(np.arange(0, 1.1, 0.1))\nax.set_yticks(np.arange(0, 1.1, 0.1))\n\n# Set the font size of the tick labels\nax.set_xticklabels(['Level 1', 'Level 2', 'Level 3', 'Level 4', 'Level 5'], fontsize=8)\nax.set_yticklabels(['GPT4V-CoT', 'Gemini Pro-Cot', 'Gemini Pro'], fontsize=8)\n\n# Set the font size of the title\nax.set_title('Qwen-VL-Max', fontsize=12)\n\n# Set the font size of the labels\nax.set_xlabel('X-axis', fontsize=10)\nax.set_ylabel('Y-axis', fontsize=10)\n\n# Set the font size of the color bar label\ncbar.ax.set_ylabel('Level', fontsize=10)\n\n# Set the font size of the grid lines\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Set the font size of the tick marks\nax.set_xticks(np.arange(0, 1.1, 0.1))\nax.set_yticks(np.arange(0, 1.1, 0.1))\n\n# Set the font size of the tick labels\nax.set_xticklabels(['Level 1', 'Level 2', 'Level 3', 'Level 4', 'Level 5'], fontsize=8)\nax.set_yticklabels(['GPT4V-CoT', 'Gemini Pro-Cot', 'Gemini Pro'], fontsize=8)\n\n# Set the font size of the title\nax.set_title('Qwen-VL-Max', fontsize=12)\n\n# Set the font size of the labels\nax.set_xlabel('X-axis', fontsize=10)\nax.set_ylabel('Y-axis', fontsize=10)\n\n# Set the font size of the color bar label\ncbar.ax.set_ylabel('Level', fontsize=10)\n\n# Set the font size of the grid lines\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Set the font size of the tick marks\nax.set_xticks(np.arange(0, 1.1, 0.1))\nax.set_yticks(np.arange(0, 1.1, 0.1))\n\n# Set the font size of the tick labels\nax.set_xticklabels(['Level 1', 'Level 2', 'Level 3', 'Level 4', 'Level 5'], fontsize=8)\nax.set_yticklabels(['GPT4V-CoT', 'Gemini Pro-Cot', 'Gemini Pro'], fontsize=8)\n\n# Set the font size of the title\nax.set_title('Qwen-VL-Max', fontsize=12)\n\n# Set the font size of the labels\nax.set_xlabel('X-axis', fontsize=10)\nax.set_ylabel('Y-axis', fontsize=10)\n\n# Set the font size of the color bar label\ncbar.ax.set_ylabel('Level', fontsize=10)\n\n# Set the font size of the grid lines\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Set the font size of the tick marks\nax.set_xticks(np.arange(0, 1.1, 0.1))\nax.set_yticks(np.arange(0, 1.1, 0.1))\n\n# Set the font size of the tick labels\nax.set_xticklabels(['Level 1', 'Level 2', 'Level 3', 'Level 4', 'Level 5'], fontsize=8)\nax.set_yticklabels(['GPT4V-CoT', 'Gemini Pro-Cot', 'Gemini Pro'], fontsize=8)\n\n# Set the font size of the title\nax.set_title('Qwen-VL-Max', fontsize=12)\n\n# Set the font size of the labels\nax.set_xlabel('X-axis', fontsize=10)\nax.set_ylabel('Y-axis', fontsize=10)\n\n# Set the font size of the color bar label\ncbar.ax.set_ylabel('Level', fontsize=10)\n\n# Set the font size of the grid lines\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Set the font size of the tick marks\nax.set_xticks(np.arange(0, 1.1, 0.1))\nax.set_yticks(np.arange(0, 1.1, 0.1))\n\n# Set the font size of the tick labels\nax.set_xticklabels(['Level 1', 'Level 2', 'Level 3', 'Level 4', 'Level 5'], fontsize=8)\nax.set_yticklabels(['GPT4V-CoT', 'Gemini Pro-Cot', 'Gemini Pro'], fontsize=8)\n\n# Set the font size of the title\nax.set_title('Qwen-VL-Max', fontsize=12)\n\n# Set the font size of the labels\nax.set_xlabel('X-axis', fontsize=10)\nax.set_ylabel('Y-axis', fontsize=10)\n\n# Set the font size of the color bar label\ncbar.ax.set_ylabel('Level', fontsize=10)\n\n# Set the font size of the grid lines\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Set the font size of the tick marks\nax.set_xticks(np.arange(0, 1.1, 0.1))\nax.set_yticks(np.arange(0, 1.1, 0.1))\n\n# Set the font size of the tick labels\nax.set_xticklabels(['Level 1', 'Level 2', 'Level 3', 'Level 4', 'Level 5'], fontsize=8)\nax.set_yticklabels(['GPT4V-CoT', 'Gemini Pro-Cot', 'Gemini Pro'], fontsize=8)\n\n# Set the font size of the title\nax.set_title('Qwen-VL-Max', fontsize=12)\n\n# Set the font size of the labels\nax.set_xlabel('X-axis', fontsize=10)\nax.set_ylabel('Y-axis', fontsize=10)\n\n# Set the font size of the color bar label\ncbar.ax.set_ylabel('Level', fontsize=10)\n\n# Set the font size of the grid lines\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Set the font size of the tick marks\nax.set_xticks(np.arange(0, 1.1, 0.1))\nax.set_yticks(np.arange(0, 1.1, 0.1))\n\n# Set the font size of the tick labels\nax.set_xticklabels(['Level 1', 'Level 2', 'Level 3', 'Level 4', 'Level 5'], fontsize=8)\nax.set_yticklabels(['GPT4V-CoT', 'Gemini Pro-Cot', 'Gemini Pro'], fontsize=8)\n\n# Set the font size of the title\nax.set_title('Qwen-VL-Max', fontsize=12)\n\n# Set the font size of the labels\nax.set_xlabel('X-axis', fontsize=10)\nax.set_ylabel('Y-axis', fontsize=10)\n\n# Set the font size of the color bar label\ncbar.ax.set_ylabel('Level', fontsize=10)\n\n# Set the font size of the grid lines\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Set the font size of the tick marks\nax.set_xticks(np.arange(0, 1.1, 0.1))\nax.set_yticks(np.arange(0, 1.1, 0.1))\n\n# Set the font size of the tick labels\nax.set_xticklabels(['Level 1', 'Level 2', 'Level 3', 'Level 4', 'Level 5'], fontsize=8)\nax.set_yticklabels(['GPT4V-CoT', 'Gemini Pro-Cot', 'Gemini Pro'], fontsize=8)\n\n# Set the font size of the title\nax.set_title('Qwen-VL-Max', fontsize=12)\n\n# Set the font size of the labels\nax.set_xlabel('X-axis', fontsize=10)\nax.set_ylabel('Y-axis', fontsize=10)\n\n# Set the font size of the color bar label\ncbar.ax.set_ylabel('Level', fontsize=10)\n\n# Set the font size of the grid lines\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Set the font size of the tick marks\nax.set_xticks(np.arange(0, 1.1, 0.1))\nax.set_yticks(np.arange(0, 1.1, 0.1))\n\n# Set the font size of the tick labels\nax.set_xticklabels(['Level 1', 'Level 2', 'Level 3', 'Level 4', 'Level 5'], fontsize=8)\nax.set_yticklabels(['GPT4V-CoT', 'Gemini Pro-Cot', 'Gemini Pro'], fontsize=8)\n\n# Set the font size of the title\nax.set_title('Qwen-VL-Max', fontsize=12)\n\n# Set the font size of the labels\nax.set_xlabel('X-axis', fontsize=10)\nax.set_ylabel('Y-axis', fontsize=10)\n\n# Set the font size of the color bar label\ncbar.ax.set_ylabel('Level', fontsize=10)\n\n# Set the font size of the grid lines\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Set the font size of the tick marks\nax.set_xticks(np.arange(0, 1.1, 0.1))\nax.set_yticks(np.arange(0, 1.1, 0.1))\n\n# Set the font size of the tick labels\nax.set_xticklabels(['Level 1', 'Level 2', 'Level 3', 'Level 4', 'Level 5'], fontsize=8)\nax.set_yticklabels(['GPT4V-CoT', 'Gemini Pro-Cot', 'Gemini Pro'], fontsize=8)\n\n# Set the font size of the title\nax.set_title('Qwen-VL-Max', fontsize=12)\n\n# Set the font size of the labels\nax.set_xlabel('X-axis', fontsize=10)\nax.set_ylabel('Y-axis', fontsize=10)\n\n# Set the font size of the color bar label\ncbar.ax.set_ylabel('Level', fontsize=10)\n\n# Set the font size of the grid lines\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Set the font size of the tick marks\nax.set_xticks(np.arange(0, 1.1, 0.1))\nax.set_yticks(np.arange(0, 1.1, 0.1))\n\n# Set the font size of the tick labels\nax.set_xticklabels(['Level 1', 'Level 2', 'Level 3', 'Level 4', 'Level 5'], fontsize=8)\nax.set_yticklabels(['GPT4V-CoT', 'Gemini Pro-Cot', 'Gemini Pro'], fontsize=8)\n\n# Set the font size of the title\nax.set_title('Qwen-VL-Max', fontsize=12)\n\n# Set the font size of the labels\nax.set_xlabel('X-axis', fontsize=10)\nax.set_ylabel('Y-axis', fontsize=10)\n\n# Set the font size of the color bar label\ncbar.ax.set_ylabel('Level', fontsize=10)\n\n# Set the font size of the grid lines\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Set the font size of the tick marks\nax.set_xticks(np.arange(0, 1.1, 0.1))\nax.set_yticks(np.arange(0, 1.1, 0.1))\n\n# Set the font size of the tick labels\nax.set_xticklabels(['Level 1', 'Level 2', 'Level 3', 'Level 4', 'Level 5'], fontsize=8)\nax.set_yticklabels(['GPT4V-CoT', 'Gemini Pro-Cot', 'Gemini Pro'], fontsize=8)\n\n# Set the font size of the title\nax.set_title('Qwen-VL-Max', fontsize=12)\n\n# Set the font size of the labels\nax.set_xlabel('X-axis', fontsize=10)\nax.set_ylabel"}
{"file": "dataset/ori_500/HR_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and a set of subplots\nfig, axs = plt.subplots(1, 2, figsize=(10.0, 4.0))\n\n# Define the data for the plots\nx = np.logspace(1, 2, 100)\ny1 = 10**np.random.normal(3, 0.5, 100)\ny2 = 10**np.random.normal(4, 0.5, 100)\ny3 = 10**np.random.normal(5, 0.5, 100)\n\n# Plot the data\naxs[0].plot(x, y1, 'o-', color='purple')\naxs[0].plot(x, y2, 'o-', color='pink')\naxs[0].plot(x, y3, 'o-', color='orange')\naxs[0].set_xscale('log')\naxs[0].set_yscale('log')\naxs[0].set_xlabel('number of matvecs m')\naxs[0].set_ylabel('approximation error ||A - A\u0302||F')\naxs[0].set_title('Approximation Error')\n\n# Define the data for the second subplot\ny4 = 10**np.random.normal(6, 0.5, 100)\ny5 = 10**np.random.normal(7, 0.5, 100)\ny6 = 10**np.random.normal(8, 0.5, 100)\n\n# Plot the data\naxs[1].plot(x, y4, 'o-', color='blue')\naxs[1].plot(x, y5, 'o-', color='green')\naxs[1].plot(x, y6, 'o-', color='red')\naxs[1].set_xscale('log')\naxs[1].set_yscale('log')\naxs[1].set_xlabel('number of matvecs m')\naxs[1].set_ylabel('sparse recovery error ||S\u0302A \u2212 A\u0302||F')\naxs[1].set_title('Sparse Recovery Error')\n\n# Add legends\naxs[0].legend(['s = 19', 's = 50', 's = 76'], loc='upper left')\naxs[1].legend(['s = 142', 's = 232'], loc='upper right')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_16.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Draw a circle\ncircle = plt.Circle((0.5, 0.5), 0.4, color='black')\nax.add_artist(circle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='lightgreen')\nax.add_artist(rectangle)\n\n# Draw a triangle\ntriangle = plt.Polygon([[0.3, 0.7], [0.7, 0.7], [0.5, 0.9]], color='lightblue')\nax.add_artist(triangle)\n\n# Draw a star\nstar = plt.Polygon([[0.5, 0.1], [0.4, 0.3], [0.6, 0.3], [0.5, 0.5], [0.4, 0.7], [0.6, 0.7]], color='lightcoral')\nax.add_artist(star)\n\n# Draw a pentagon\npentagon = plt.Polygon([[0.2, 0.2], [0.4, 0.4], [0.6, 0.4], [0.5, 0.6], [0.3, 0.6]], color='lightsalmon')\nax.add_artist(pentagon)\n\n# Set the aspect ratio of the plot to be equal\nax.set_aspect('equal')\n\n# Set the limits of the plot\nax.set_xlim(0, 1)\nax.set_ylim(0, 1)\n\n# Remove the axes\nax.axis('off')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_17.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 5.0))\n\n# Define the data\nx = np.linspace(0, 100, 100)\ny1 = np.sin(x)\ny2 = np.cos(x)\ny3 = np.tan(x)\ny4 = np.exp(x)\ny5 = np.log(x)\n\n# Plot the data\nax.plot(x, y1, 'g-', label='Sine Wave')\nax.plot(x, y2, 'r-', label='Cosine Wave')\nax.plot(x, y3, 'b-', label='Tangent Wave')\nax.plot(x, y4, 'y-', label='Exponential Wave')\nax.plot(x, y5, 'm-', label='Logarithmic Wave')\n\n# Set the title and labels\nax.set_title('Trigonometric Functions')\nax.set_xlabel('X-axis')\nax.set_ylabel('Y-axis')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_18.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(7.0, 5.0))\n\n# Set the title of the plot\nax.set_title('Uncertainty in Thermal Conductivity Measurements')\n\n# Create a color map for the plots\ncmap = plt.get_cmap('Blues')\n\n# Create a scatter plot for each sample\nfor i in range(10):\n    x = np.random.rand(10)\n    y = np.random.rand(10)\n    ax.scatter(x, y, c=cmap(i/10), label=f'Sample {i}')\n\n# Add a legend to the plot\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_19.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(7.0, 5.0))\n\n# Set the title of the plot\nax.set_title('Scores by number of game and players')\n\n# Set the x-axis label\nax.set_xlabel('Games')\n\n# Set the y-axis label\nax.set_ylabel('Scores')\n\n# Define the data for the plot\ngames = ['I', 'II', 'III', 'IV', 'V']\nscores = [28, 20, 10, 20, 30]\nplayers = ['Player A', 'Player B']\n\n# Plot the data\nfor i in range(len(games)):\n    ax.plot([i, i], [0, scores[i]], color='blue')\n    ax.text(i, scores[i], str(scores[i]), ha='center', va='bottom')\n\n# Add rectangles for each player's score\nfor i in range(len(players)):\n    ax.add_patch(plt.Rectangle((i-0.2, 0), 0.4, scores[i], color='green'))\n\n# Set the limits of the x-axis\nax.set_xlim(-0.5, len(games)-0.5)\n\n# Set the limits of the y-axis\nax.set_ylim(0, 60)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_2.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Variable 1 vs Variable 2')\n\n# Create a scatter plot with random data\nx = np.random.rand(50)\ny = np.random.rand(50)\nax.scatter(x, y)\n\n# Create a line plot with random data\nz = np.random.rand(50)\nax.plot(z, 'r-')\n\n# Create a bar chart with random data\nw = np.random.rand(50)\nax.bar(w, w*2, color='g')\n\n# Create a pie chart with random data\nv = np.random.rand(50)\nax.pie(v, colors=['b', 'm', 'c'])\n\n# Create a histogram with random data\nu = np.random.rand(50)\nax.hist(u, bins=10, color='y')\n\n# Create a heatmap with random data\nt = np.random.rand(50, 50)\nax.imshow(t, cmap='hot', interpolation='nearest')\n\n# Create a contour plot with random data\ns = np.random.rand(50, 50)\nax.contour(s, colors='k')\n\n# Create a polar plot with random data\nr = np.linspace(0, 1, 50)\ntheta = np.linspace(0, 2*np.pi, 50)\nax.polar(theta, r)\n\n# Create a 3D scatter plot with random data\nfrom mpl_toolkits.mplot3d import Axes3D\nax = fig.add_subplot(111, projection='3d')\np = np.random.rand(50)\nq = np.random.rand(50)\nr = np.random.rand(50)\nax.scatter(p, q, r)\n\n# Create a 3D surface plot with random data\ns = np.random.rand(50, 50)\nax.plot_surface(s, s, s, cmap='coolwarm')\n\n# Create a 3D wireframe plot with random data\nt = np.random.rand(50, 50)\nax.plot_wireframe(t, t, t)\n\n# Create a 3D contour plot with random data\nu = np.random.rand(50, 50)\nax.contour3D(u, u, u, 50, cmap='Greens')\n\n# Create a 3D bar chart with random data\nv = np.random.rand(50, 50)\nax.bar3d(v, v, v, 0.5, 0.5, 0.5, shade=True)\n\n# Create a 3D scatter plot with random data\nw = np.random.rand(50)\nx = np.random.rand(50)\ny = np.random.rand(50)\nz = np.random.rand(50)\nax.scatter(w, x, y, z, c=z, cmap='Blues')\n\n# Create a 3D scatter plot with random data\nax.scatter(w, x, y, c='r', marker='o')\n\n# Create a 3D scatter plot with random data\nax.scatter(w, x, y, c='g', marker='^')\n\n# Create a 3D scatter plot with random data\nax.scatter(w, x, y, c='b', marker='s')\n\n# Create a 3D scatter plot with random data\nax.scatter(w, x, y, c='c', marker='p')\n\n# Create a 3D scatter plot with random data\nax.scatter(w, x, y, c='m', marker='h')\n\n# Create a 3D scatter plot with random data\nax.scatter(w, x, y, c='y', marker='H')\n\n# Create a 3D scatter plot with random data\nax.scatter(w, x, y, c='k', marker='|')\n\n# Create a 3D scatter plot with random data\nax.scatter(w, x, y, c='w', marker='_')\n\n# Create a 3D scatter plot with random data\nax.scatter(w, x, y, c='r', marker='o')\n\n# Create a 3D scatter plot with random data\nax.scatter(w, x, y, c='g', marker='^')\n\n# Create a 3D scatter plot with random data\nax.scatter(w, x, y, c='b', marker='s')\n\n# Create a 3D scatter plot with random data\nax.scatter(w, x, y, c='c', marker='p')\n\n# Create a 3D scatter plot with random data\nax.scatter(w, x, y, c='m', marker='h')\n\n# Create a 3D scatter plot with random data\nax.scatter(w, x, y, c='y', marker='H')\n\n# Create a 3D scatter plot with random data\nax.scatter(w, x, y, c='k', marker='|')\n\n# Create a 3D scatter plot with random data\nax.scatter(w, x, y, c='w', marker='_')\n\n# Create a 3D scatter plot with random data\nax.scatter(w, x, y, c='r', marker='o')\n\n# Create a 3D scatter plot with random data\nax.scatter(w, x, y, c='g', marker='^')\n\n# Create a 3D scatter plot with random data\nax.scatter(w, x, y, c='b', marker='s')\n\n# Create a 3D scatter plot with random data\nax.scatter(w, x, y, c='c', marker='p')\n\n# Create a 3D scatter plot with random data\nax.scatter(w, x, y, c='m', marker='h')\n\n# Create a 3D scatter plot with random data\nax.scatter(w, x, y, c='y', marker='H')\n\n# Create a 3D scatter plot with random data\nax.scatter(w, x, y, c='k', marker='|')\n\n# Create a 3D scatter plot with random data\nax.scatter(w, x, y, c='w', marker='_')\n\n# Create a 3D scatter plot with random data\nax.scatter(w, x, y, c='r', marker='o')\n\n# Create a 3D scatter plot with random data\nax.scatter(w, x, y, c='g', marker='^')\n\n# Create a 3D scatter plot with random data\nax.scatter(w, x, y, c='b', marker='s')\n\n# Create a 3D scatter plot with random data\nax.scatter(w, x, y, c='c', marker='p')\n\n# Create a 3D scatter plot with random data\nax.scatter(w, x, y, c='m', marker='h')\n\n# Create a 3D scatter plot with random data\nax.scatter(w, x, y, c='y', marker='H')\n\n# Create a 3D scatter plot with random data\nax.scatter(w, x, y, c='k', marker='|')\n\n# Create a 3D scatter plot with random data\nax.scatter(w, x, y, c='w', marker='_')\n\n# Create a 3D scatter plot with random data\nax.scatter(w, x, y, c='r', marker='o')\n\n# Create a 3D scatter plot with random data\nax.scatter(w, x, y, c='g', marker='^')\n\n# Create a 3D scatter plot with random data\nax.scatter(w, x, y, c='b', marker='s')\n\n# Create a 3D scatter plot with random data\nax.scatter(w, x, y, c='c', marker='p')\n\n# Create a 3D scatter plot with random data\nax.scatter(w, x, y, c='m', marker='h')\n\n# Create a 3D scatter plot with random data\nax.scatter(w, x, y, c='y', marker='H')\n\n# Create a 3D scatter plot with random data\nax.scatter(w, x, y, c='k', marker='|')\n\n# Create a 3D scatter plot with random data\nax.scatter(w, x, y, c='w', marker='_')\n\n# Create a 3D scatter plot with random data\nax.scatter(w, x, y, c='r', marker='o')\n\n# Create a 3D scatter plot with random data\nax.scatter(w, x, y, c='g', marker='^')\n\n# Create a 3D scatter plot with random data\nax.scatter(w, x, y, c='b', marker='s')\n\n# Create a 3D scatter plot with random data\nax.scatter(w, x, y, c='c', marker='p')\n\n# Create a 3D scatter plot with random data\nax.scatter(w, x, y, c='m', marker='h')\n\n# Create a 3D scatter plot with random data\nax.scatter(w, x, y, c='y', marker='H')\n\n# Create a 3D scatter plot with random data\nax.scatter(w, x, y, c='k', marker='|')\n\n# Create a 3D scatter plot with random data\nax.scatter(w, x, y, c='w', marker='_')\n\n# Create a 3D scatter plot with random data\nax.scatter(w, x, y, c='r', marker='o')\n\n# Create a 3D scatter plot with random data\nax.scatter(w, x, y, c='g', marker='^')\n\n# Create a 3D scatter plot with random data\nax.scatter(w, x, y, c='b', marker='s')\n\n# Create a 3D scatter plot with random data\nax.scatter(w, x, y, c='c', marker='p')\n\n# Create a 3D scatter plot with random data\nax.scatter(w, x, y, c='m', marker='h')\n\n# Create a 3D scatter plot with random data\nax.scatter(w, x, y, c='y', marker='H')\n\n# Create a 3D scatter plot with random data\nax.scatter(w, x, y, c='k', marker='|')\n\n# Create a 3D scatter plot with random data\nax.scatter(w, x, y, c='w', marker='_')\n\n# Create a 3D scatter plot with random data\nax.scatter(w, x, y, c='r', marker='o')\n\n# Create a 3D scatter plot with random data\nax.scatter(w, x, y, c='g', marker='^')\n\n# Create a 3D scatter plot with random data\nax.scatter(w, x, y, c='b', marker='s')\n\n# Create a 3D scatter plot with random data\nax.scatter(w, x, y, c='c', marker='p')\n\n# Create a 3D scatter plot with random data\nax.scatter(w, x, y, c='m', marker='h')\n\n# Create a 3D scatter plot with random data\nax.scatter(w, x, y, c='y', marker='H')\n\n# Create a 3D scatter plot with random data\nax.scatter(w, x, y, c='k', marker='|')\n\n# Create a 3D scatter plot with random data\nax.scatter(w, x, y, c='w', marker='_')\n\n# Create a 3D scatter plot with random data\nax.scatter(w, x, y, c='r', marker='o')\n\n# Create a 3D scatter plot with random data\nax.scatter(w, x, y, c='g', marker='^')\n\n# Create a 3D scatter plot with random data\nax.scatter(w, x, y, c='b', marker='s')\n\n# Create a 3D scatter plot with random data\nax.scatter(w, x, y, c='c', marker='p')\n\n# Create a 3D scatter plot with random data\nax.scatter(w, x, y, c='m', marker='h')\n\n# Create a 3D scatter plot with random data\nax.scatter(w, x, y, c='y', marker='H')\n\n# Create a 3D scatter plot with random data\nax.scatter(w, x, y, c='k', marker='|')\n\n# Create a 3D scatter plot with random data\nax.scatter(w, x, y, c='w', marker='_')\n\n# Create a 3D scatter plot with random data\nax.scatter(w, x, y, c='r', marker='o')\n\n# Create a 3D scatter plot with random data\nax.scatter(w, x, y, c='g', marker='^')\n\n# Create a 3D scatter plot with random data\nax.scatter(w, x, y, c='b', marker='s')\n\n# Create a 3D scatter plot with random data\nax.scatter(w, x, y, c='c', marker='p')\n\n# Create a 3D scatter plot with random data\nax.scatter(w, x, y, c='m', marker='h')\n\n# Create a 3D scatter plot with random data\nax.scatter(w, x, y, c='y', marker='H')\n\n# Create a 3D scatter plot with random data\nax.scatter(w, x, y, c='k', marker='|')\n\n# Create a 3D scatter plot with random data\nax.scatter(w, x, y, c='w', marker='_')\n\n# Create a 3D scatter plot with random data\nax.scatter(w, x, y, c='r', marker='o')\n\n# Create a 3D scatter plot with random data\nax.scatter(w, x, y, c='g', marker='^')\n\n# Create a 3D scatter plot with random data\nax.scatter(w, x, y, c='b', marker='s')\n\n# Create a 3D scatter plot with random data\nax.scatter(w, x, y, c='c', marker='p')\n\n# Create a 3D scatter plot with random data\nax.scatter(w, x, y, c='m', marker='h')\n\n# Create a 3D scatter plot with random data\nax.scatter(w, x, y, c='y', marker='H')\n\n# Create a 3D scatter plot with random data\nax.scatter(w, x, y, c='k', marker='|')\n\n# Create a 3D scatter plot with random data\nax.scatter(w, x, y, c='w', marker='_')\n\n# Create a 3D scatter plot with random data\nax.scatter(w, x, y, c='r', marker='o')\n\n# Create a 3D scatter plot with random data\nax.scatter(w, x, y, c='g', marker='^')\n\n# Create a 3D scatter plot with random data\nax.scatter(w, x, y, c='b', marker='s')\n\n# Create a 3D scatter plot with random data\nax.scatter(w, x, y, c='c', marker='p')\n\n# Create a 3D scatter plot with random data\nax.scatter(w, x, y, c='m', marker='h')\n\n# Create a 3D scatter plot with random data\nax.scatter(w, x, y, c='y', marker='H')\n\n# Create a 3D scatter plot with random data\nax.scatter(w, x, y, c='k', marker='|')\n\n# Create a 3D scatter plot with random data\nax.scatter(w, x, y, c='w', marker='_')\n\n# Create a 3D scatter plot with random data\nax.scatter(w, x, y, c='r', marker='o')\n\n# Create a 3D scatter plot with random data\nax.scatter(w, x, y, c='g', marker='^')\n\n# Create a 3D scatter plot with random data\nax.scatter(w, x, y, c='b', marker='s')\n\n# Create a 3D scatter plot with random data\nax.scatter(w, x, y, c='c', marker='p')\n\n# Create a 3D scatter plot with random data\nax.scatter(w, x, y, c='m', marker='h')\n\n# Create a 3D scatter plot with random data\nax.scatter(w, x, y, c='y', marker='H')\n\n# Create a 3D scatter plot with random data\nax.scatter(w, x, y, c='k', marker='|')\n\n# Create a 3D scatter plot with random data\nax.scatter(w, x, y, c='w', marker='_')\n\n# Create a 3D scatter plot with random data\nax.scatter(w, x, y, c='r', marker='o')\n\n# Create a 3D scatter plot with random data\nax.scatter(w, x, y, c='g', marker='^')\n\n# Create a 3D scatter plot with random data\nax.scatter(w, x, y, c='b', marker='s')\n\n# Create a 3D scatter plot with random data\nax.scatter(w, x, y, c='c', marker='p')\n\n# Create a 3D scatter plot with random data\nax.scatter(w, x, y, c='m', marker='h')\n\n# Create a 3D scatter plot with random data\nax.scatter(w, x, y, c='y', marker='H')\n\n# Create a 3D scatter plot with random data\nax.scatter(w, x, y, c='k', marker='|')\n\n# Create a 3D scatter plot with random data\nax.scatter(w, x, y, c='w', marker='_')\n\n# Create a 3D scatter plot with random data\nax.scatter(w, x, y, c='r', marker='o')\n\n# Create a 3D scatter plot with random data\nax.scatter(w, x, y, c='g', marker='^')\n\n# Create a 3D scatter plot with random data\nax.scatter(w, x, y, c='b', marker='s')\n\n# Create a 3D scatter plot with random data\nax.scatter(w, x, y, c='c', marker='p')\n\n# Create a 3D scatter plot with random data\nax.scatter(w, x, y, c='m', marker='h')\n\n# Create a 3D scatter plot with random data\nax.scatter(w, x, y, c='y', marker='H')\n\n# Create a 3D scatter plot with random data\nax.scatter(w, x, y, c='k', marker='|')\n\n# Create a 3D scatter plot with random data\nax.scatter(w, x, y, c='w', marker='_')\n\n# Create a 3D scatter plot with random data\nax.scatter(w, x, y, c='r', marker='o')\n\n# Create a 3D scatter plot with random data\nax.scatter(w, x, y, c='g', marker='^')\n\n# Create a 3D scatter plot with random data\nax.scatter(w, x, y, c='b', marker='s')\n\n# Create a 3D scatter plot with random data\nax.scatter(w, x, y, c='c', marker='p')\n\n# Create a 3D scatter"}
{"file": "dataset/ori_500/HR_20.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Set the title of the plot\nax.set_title('Player Performance')\n\n# Create a bar chart\nx = np.arange(4)\nwidth = 0.2\nrects1 = ax.bar(x - width, [5.7, 6.0, 5.1, 5.2], width, label='Female Player')\nrects2 = ax.bar(x, [6.2, 6.2, 5.2, 5.6], width, label='Male Player')\nrects3 = ax.bar(x + width, [7.8, 7.5, 4.9, 7.0], width, label='LLM Player')\nrects4 = ax.bar(x + 2*width, [7.4, 7.2, 6.9, 6.4], width, label='Person Player')\n\n# Add some text for labels, title, and custom x-axis tick labels, etc.\nax.set_ylabel('Average Amount Sent ($)')\nax.set_xlabel('Player Type')\nax.set_xticks(x)\nax.set_xticklabels(['gpt-3.5-turbo-0613', 'gpt-3.5-turbo-instruct', 'gpt-4', 'llama-2-13b', 'llama-2-70b'])\nax.legend()\n\n# Set the color of the bars\ncolors = ['pink', 'skyblue', 'lightgreen', 'salmon', 'lightcoral']\nfor i, rect in enumerate(rects1):\n    height = rect.get_height()\n    ax.annotate('{}'.format(height),\n                xy=(rect.get_x() + rect.get_width() / 2, height),\n                xytext=(0, 3),  # 3 points vertical offset\n                textcoords=\"offset points\",\n                ha='center', va='bottom', color=colors[i])\n\n# Set the color of the grid lines\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('lightyellow')\n\n# Set the color of the border\nax.spines['top'].set_color('red')\nax.spines['right'].set_color('red')\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the title\nax.set_title('Player Performance', color='purple')\n\n# Set the color of the labels\nax.set_xlabel('Player Type', color='purple')\nax.set_ylabel('Average Amount Sent ($)', color='purple')\n\n# Set the color of the legend\nax.legend(facecolor='lightblue')\n\n# Set the color of the grid lines\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('lightyellow')\n\n# Set the color of the border\nax.spines['top'].set_color('red')\nax.spines['right'].set_color('red')\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the title\nax.set_title('Player Performance', color='purple')\n\n# Set the color of the labels\nax.set_xlabel('Player Type', color='purple')\nax.set_ylabel('Average Amount Sent ($)', color='purple')\n\n# Set the color of the legend\nax.legend(facecolor='lightblue')\n\n# Set the color of the grid lines\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('lightyellow')\n\n# Set the color of the border\nax.spines['top'].set_color('red')\nax.spines['right'].set_color('red')\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the title\nax.set_title('Player Performance', color='purple')\n\n# Set the color of the labels\nax.set_xlabel('Player Type', color='purple')\nax.set_ylabel('Average Amount Sent ($)', color='purple')\n\n# Set the color of the legend\nax.legend(facecolor='lightblue')\n\n# Set the color of the grid lines\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('lightyellow')\n\n# Set the color of the border\nax.spines['top'].set_color('red')\nax.spines['right'].set_color('red')\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the title\nax.set_title('Player Performance', color='purple')\n\n# Set the color of the labels\nax.set_xlabel('Player Type', color='purple')\nax.set_ylabel('Average Amount Sent ($)', color='purple')\n\n# Set the color of the legend\nax.legend(facecolor='lightblue')\n\n# Set the color of the grid lines\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('lightyellow')\n\n# Set the color of the border\nax.spines['top'].set_color('red')\nax.spines['right'].set_color('red')\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the title\nax.set_title('Player Performance', color='purple')\n\n# Set the color of the labels\nax.set_xlabel('Player Type', color='purple')\nax.set_ylabel('Average Amount Sent ($)', color='purple')\n\n# Set the color of the legend\nax.legend(facecolor='lightblue')\n\n# Set the color of the grid lines\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('lightyellow')\n\n# Set the color of the border\nax.spines['top'].set_color('red')\nax.spines['right'].set_color('red')\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the title\nax.set_title('Player Performance', color='purple')\n\n# Set the color of the labels\nax.set_xlabel('Player Type', color='purple')\nax.set_ylabel('Average Amount Sent ($)', color='purple')\n\n# Set the color of the legend\nax.legend(facecolor='lightblue')\n\n# Set the color of the grid lines\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('lightyellow')\n\n# Set the color of the border\nax.spines['top'].set_color('red')\nax.spines['right'].set_color('red')\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the title\nax.set_title('Player Performance', color='purple')\n\n# Set the color of the labels\nax.set_xlabel('Player Type', color='purple')\nax.set_ylabel('Average Amount Sent ($)', color='purple')\n\n# Set the color of the legend\nax.legend(facecolor='lightblue')\n\n# Set the color of the grid lines\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('lightyellow')\n\n# Set the color of the border\nax.spines['top'].set_color('red')\nax.spines['right'].set_color('red')\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the title\nax.set_title('Player Performance', color='purple')\n\n# Set the color of the labels\nax.set_xlabel('Player Type', color='purple')\nax.set_ylabel('Average Amount Sent ($)', color='purple')\n\n# Set the color of the legend\nax.legend(facecolor='lightblue')\n\n# Set the color of the grid lines\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('lightyellow')\n\n# Set the color of the border\nax.spines['top'].set_color('red')\nax.spines['right'].set_color('red')\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the title\nax.set_title('Player Performance', color='purple')\n\n# Set the color of the labels\nax.set_xlabel('Player Type', color='purple')\nax.set_ylabel('Average Amount Sent ($)', color='purple')\n\n# Set the color of the legend\nax.legend(facecolor='lightblue')\n\n# Set the color of the grid lines\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('lightyellow')\n\n# Set the color of the border\nax.spines['top'].set_color('red')\nax.spines['right'].set_color('red')\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the title\nax.set_title('Player Performance', color='purple')\n\n# Set the color of the labels\nax.set_xlabel('Player Type', color='purple')\nax.set_ylabel('Average Amount Sent ($)', color='purple')\n\n# Set the color of the legend\nax.legend(facecolor='lightblue')\n\n# Set the color of the grid lines\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('lightyellow')\n\n# Set the color of the border\nax.spines['top'].set_color('red')\nax.spines['right'].set_color('red')\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the title\nax.set_title('Player Performance', color='purple')\n\n# Set the color of the labels\nax.set_xlabel('Player Type', color='purple')\nax.set_ylabel('Average Amount Sent ($)', color='purple')\n\n# Set the color of the legend\nax.legend(facecolor='lightblue')\n\n# Set the color of the grid lines\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('lightyellow')\n\n# Set the color of the border\nax.spines['top'].set_color('red')\nax.spines['right'].set_color('red')\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the title\nax.set_title('Player Performance', color='purple')\n\n# Set the color of the labels\nax.set_xlabel('Player Type', color='purple')\nax.set_ylabel('Average Amount Sent ($)', color='purple')\n\n# Set the color of the legend\nax.legend(facecolor='lightblue')\n\n# Set the color of the grid lines\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('lightyellow')\n\n# Set the color of the border\nax.spines['top'].set_color('red')\nax.spines['right'].set_color('red')\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the title\nax.set_title('Player Performance', color='purple')\n\n# Set the color of the labels\nax.set_xlabel('Player Type', color='purple')\nax.set_ylabel('Average Amount Sent ($)', color='purple')\n\n# Set the color of the legend\nax.legend(facecolor='lightblue')\n\n# Set the color of the grid lines\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('lightyellow')\n\n# Set the color of the border\nax.spines['top'].set_color('red')\nax.spines['right'].set_color('red')\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the title\nax.set_title('Player Performance', color='purple')\n\n# Set the color of the labels\nax.set_xlabel('Player Type', color='purple')\nax.set_ylabel('Average Amount Sent ($)', color='purple')\n\n# Set the color of the legend\nax.legend(facecolor='lightblue')\n\n# Set the color of the grid lines\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('lightyellow')\n\n# Set the color of the border\nax.spines['top'].set_color('red')\nax.spines['right'].set_color('red')\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the title\nax.set_title('Player Performance', color='purple')\n\n# Set the color of the labels\nax.set_xlabel('Player Type', color='purple')\nax.set_ylabel('Average Amount Sent ($)', color='purple')\n\n# Set the color of the legend\nax.legend(facecolor='lightblue')\n\n# Set the color of the grid lines\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('lightyellow')\n\n# Set the color of the border\nax.spines['top'].set_color('red')\nax.spines['right'].set_color('red')\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the title\nax.set_title('Player Performance', color='purple')\n\n# Set the color of the labels\nax.set_xlabel('Player Type', color='purple')\nax.set_ylabel('Average Amount Sent ($)', color='purple')\n\n# Set the color of the legend\nax.legend(facecolor='lightblue')\n\n# Set the color of the grid lines\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('lightyellow')\n\n# Set the color of the border\nax.spines['top'].set_color('red')\nax.spines['right'].set_color('red')\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the title\nax.set_title('Player Performance', color='purple')\n\n# Set the color of the labels\nax.set_xlabel('Player Type', color='purple')\nax.set_ylabel('Average Amount Sent ($)', color='purple')\n\n# Set the color of the legend\nax.legend(facecolor='lightblue')\n\n# Set the color of the grid lines\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('lightyellow')\n\n# Set the color of the border\nax.spines['top'].set_color('red')\nax.spines['right'].set_color('red')\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the title\nax.set_title('Player Performance', color='purple')\n\n# Set the color of the labels\nax.set_xlabel('Player Type', color='purple')\nax.set_ylabel('Average Amount Sent ($)', color='purple')\n\n# Set the color of the legend\nax.legend(facecolor='lightblue')\n\n# Set the color of the grid lines\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('lightyellow')\n\n# Set the color of the border\nax.spines['top'].set_color('red')\nax.spines['right'].set_color('red')\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the title\nax.set_title('Player Performance', color='purple')\n\n# Set the color of the labels\nax.set_xlabel('Player Type', color='purple')\nax.set_ylabel('Average Amount Sent ($)', color='purple')\n\n# Set the color of the legend\nax.legend(facecolor='lightblue')\n\n# Set the color of the grid lines\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('lightyellow')\n\n# Set the color of the border\nax.spines['top'].set_color('red')\nax.spines['right'].set_color('red')\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the title\nax.set_title('Player Performance', color='purple')\n\n# Set the color of the labels\nax.set_xlabel('Player Type', color='purple')\nax.set_ylabel('Average Amount Sent ($)', color='purple')\n\n# Set the color of the legend\nax.legend(facecolor='lightblue')\n\n# Set the color of the grid lines\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('lightyellow')\n\n# Set the color of the border\nax.spines['top'].set_color('red')\nax.spines['right'].set_color('red')\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the title\nax.set_title('Player Performance', color='purple')\n\n# Set the color of the labels\nax.set_xlabel('Player Type', color='purple')\nax.set_ylabel('Average Amount Sent ($)', color='purple')\n\n# Set the color of the legend\nax.legend(facecolor='lightblue')\n\n# Set the color of the grid lines\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('lightyellow')\n\n# Set the color of the border\nax.spines['top'].set_color('red')\nax.spines['right'].set_color('red')\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the title\nax.set_title('Player Performance', color='purple')\n\n# Set the color of the labels\nax.set_xlabel('Player Type', color='purple')\nax.set_ylabel('Average Amount Sent ($)', color='purple')\n\n# Set the color of the legend\nax.legend(facecolor='lightblue')\n\n# Set the color of the grid lines\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('lightyellow')\n\n# Set the color of the border\nax.spines['top'].set_color('red')\nax.spines['right'].set_color('red')\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color"}
{"file": "dataset/ori_500/HR_21.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfig, ax = plt.subplots(figsize=(7.0, 5.0))\nax.set_title('Endurance Race Performance Analysis')\n\n# Athlete Jim\nax.plot([0, 100], [100, 125], 'g-')\nax.text(50, 110, 'Athlete Jim', ha='center', va='center')\n\n# Athlete Bill\nax.plot([0, 100], [100, 150], 'b-')\nax.text(50, 125, 'Athlete Bill', ha='center', va='center')\n\n# Race interrupted due to weather\nax.plot([0, 100], [100, 175], 'r-')\nax.text(50, 140, 'Race interrupted due to weather', ha='center', va='center')\n\n# Legend\nlegend_elements = [\n    plt.Line2D([0], [0], marker='o', color='w', label='Running', markerfacecolor='green', markersize=10),\n    plt.Line2D([0], [0], marker='o', color='w', label='Interrupted', markerfacecolor='red', markersize=10),\n    plt.Line2D([0], [0], marker='o', color='w', label='Rest', markerfacecolor='orange', markersize=10),\n    plt.Line2D([0], [0], marker='o', color='w', label='Running2', markerfacecolor='green', markersize=10)\n]\nax.legend(handles=legend_elements, loc='upper right')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_22.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(7.0, 5.0))\n\n# Create a scatter plot\nx = np.random.rand(10)\ny = np.random.rand(10)\nax.scatter(x, y)\n\n# Set the title of the plot\nax.set_title('Comparative Distribution of Three Different Groups')\n\n# Set the x and y labels\nax.set_xlabel('Number of Observations')\nax.set_ylabel('Value Range')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_23.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Set the title of the chart\nax.set_title('Waterfall Chart')\n\n# Set the x-axis label\nax.set_xlabel('Time')\n\n# Set the y-axis label\nax.set_ylabel('Value')\n\n# Set the x-axis limits\nax.set_xlim(-150, 150)\n\n# Set the y-axis limits\nax.set_ylim(700, 1300)\n\n# Set the x-axis ticks\nax.set_xticks([-150, -100, -50, 0, 50, 100, 150])\n\n# Set the y-axis ticks\nax.set_yticks([700, 800, 900, 1000, 1100, 1200, 1300])\n\n# Set the x-axis tick labels\nax.set_xticklabels(['-150', '-100', '-50', '0', '50', '100', '150'])\n\n# Set the y-axis tick labels\nax.set_yticklabels(['$700', '$800', '$900', '$1000', '$1100', '$1200', '$1300'])\n\n# Set the x-axis grid lines\nax.grid(axis='x')\n\n# Set the y-axis grid lines\nax.grid(axis='y')\n\n# Set the x-axis grid line style\nax.xaxis.grid(True, linestyle='--', linewidth=0.5)\n\n# Set the y-axis grid line style\nax.yaxis.grid(True, linestyle='--', linewidth=0.5)\n\n# Set the x-axis grid line color\nax.xaxis.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the y-axis grid line color\nax.yaxis.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the x-axis grid line alpha\nax.xaxis.grid(alpha=0.7)\n\n# Set the y-axis grid line alpha\nax.yaxis.grid(alpha=0.7)\n\n# Set the x-axis grid line zorder\nax.xaxis.grid(zorder=0)\n\n# Set the y-axis grid line zorder\nax.yaxis.grid(zorder=0)\n\n# Set the x-axis grid line color\nax.xaxis.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the y-axis grid line color\nax.yaxis.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the x-axis grid line alpha\nax.xaxis.grid(alpha=0.7)\n\n# Set the y-axis grid line alpha\nax.yaxis.grid(alpha=0.7)\n\n# Set the x-axis grid line zorder\nax.xaxis.grid(zorder=0)\n\n# Set the y-axis grid line zorder\nax.yaxis.grid(zorder=0)\n\n# Set the x-axis grid line color\nax.xaxis.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the y-axis grid line color\nax.yaxis.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the x-axis grid line alpha\nax.xaxis.grid(alpha=0.7)\n\n# Set the y-axis grid line alpha\nax.yaxis.grid(alpha=0.7)\n\n# Set the x-axis grid line zorder\nax.xaxis.grid(zorder=0)\n\n# Set the y-axis grid line zorder\nax.yaxis.grid(zorder=0)\n\n# Set the x-axis grid line color\nax.xaxis.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the y-axis grid line color\nax.yaxis.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the x-axis grid line alpha\nax.xaxis.grid(alpha=0.7)\n\n# Set the y-axis grid line alpha\nax.yaxis.grid(alpha=0.7)\n\n# Set the x-axis grid line zorder\nax.xaxis.grid(zorder=0)\n\n# Set the y-axis grid line zorder\nax.yaxis.grid(zorder=0)\n\n# Set the x-axis grid line color\nax.xaxis.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the y-axis grid line color\nax.yaxis.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the x-axis grid line alpha\nax.xaxis.grid(alpha=0.7)\n\n# Set the y-axis grid line alpha\nax.yaxis.grid(alpha=0.7)\n\n# Set the x-axis grid line zorder\nax.xaxis.grid(zorder=0)\n\n# Set the y-axis grid line zorder\nax.yaxis.grid(zorder=0)\n\n# Set the x-axis grid line color\nax.xaxis.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the y-axis grid line color\nax.yaxis.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the x-axis grid line alpha\nax.xaxis.grid(alpha=0.7)\n\n# Set the y-axis grid line alpha\nax.yaxis.grid(alpha=0.7)\n\n# Set the x-axis grid line zorder\nax.xaxis.grid(zorder=0)\n\n# Set the y-axis grid line zorder\nax.yaxis.grid(zorder=0)\n\n# Set the x-axis grid line color\nax.xaxis.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the y-axis grid line color\nax.yaxis.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the x-axis grid line alpha\nax.xaxis.grid(alpha=0.7)\n\n# Set the y-axis grid line alpha\nax.yaxis.grid(alpha=0.7)\n\n# Set the x-axis grid line zorder\nax.xaxis.grid(zorder=0)\n\n# Set the y-axis grid line zorder\nax.yaxis.grid(zorder=0)\n\n# Set the x-axis grid line color\nax.xaxis.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the y-axis grid line color\nax.yaxis.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the x-axis grid line alpha\nax.xaxis.grid(alpha=0.7)\n\n# Set the y-axis grid line alpha\nax.yaxis.grid(alpha=0.7)\n\n# Set the x-axis grid line zorder\nax.xaxis.grid(zorder=0)\n\n# Set the y-axis grid line zorder\nax.yaxis.grid(zorder=0)\n\n# Set the x-axis grid line color\nax.xaxis.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the y-axis grid line color\nax.yaxis.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the x-axis grid line alpha\nax.xaxis.grid(alpha=0.7)\n\n# Set the y-axis grid line alpha\nax.yaxis.grid(alpha=0.7)\n\n# Set the x-axis grid line zorder\nax.xaxis.grid(zorder=0)\n\n# Set the y-axis grid line zorder\nax.yaxis.grid(zorder=0)\n\n# Set the x-axis grid line color\nax.xaxis.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the y-axis grid line color\nax.yaxis.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the x-axis grid line alpha\nax.xaxis.grid(alpha=0.7)\n\n# Set the y-axis grid line alpha\nax.yaxis.grid(alpha=0.7)\n\n# Set the x-axis grid line zorder\nax.xaxis.grid(zorder=0)\n\n# Set the y-axis grid line zorder\nax.yaxis.grid(zorder=0)\n\n# Set the x-axis grid line color\nax.xaxis.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the y-axis grid line color\nax.yaxis.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the x-axis grid line alpha\nax.xaxis.grid(alpha=0.7)\n\n# Set the y-axis grid line alpha\nax.yaxis.grid(alpha=0.7)\n\n# Set the x-axis grid line zorder\nax.xaxis.grid(zorder=0)\n\n# Set the y-axis grid line zorder\nax.yaxis.grid(zorder=0)\n\n# Set the x-axis grid line color\nax.xaxis.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the y-axis grid line color\nax.yaxis.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the x-axis grid line alpha\nax.xaxis.grid(alpha=0.7)\n\n# Set the y-axis grid line alpha\nax.yaxis.grid(alpha=0.7)\n\n# Set the x-axis grid line zorder\nax.xaxis.grid(zorder=0)\n\n# Set the y-axis grid line zorder\nax.yaxis.grid(zorder=0)\n\n# Set the x-axis grid line color\nax.xaxis.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the y-axis grid line color\nax.yaxis.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the x-axis grid line alpha\nax.xaxis.grid(alpha=0.7)\n\n# Set the y-axis grid line alpha\nax.yaxis.grid(alpha=0.7)\n\n# Set the x-axis grid line zorder\nax.xaxis.grid(zorder=0)\n\n# Set the y-axis grid line zorder\nax.yaxis.grid(zorder=0)\n\n# Set the x-axis grid line color\nax.xaxis.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the y-axis grid line color\nax.yaxis.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the x-axis grid line alpha\nax.xaxis.grid(alpha=0.7)\n\n# Set the y-axis grid line alpha\nax.yaxis.grid(alpha=0.7)\n\n# Set the x-axis grid line zorder\nax.xaxis.grid(zorder=0)\n\n# Set the y-axis grid line zorder\nax.yaxis.grid(zorder=0)\n\n# Set the x-axis grid line color\nax.xaxis.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the y-axis grid line color\nax.yaxis.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the x-axis grid line alpha\nax.xaxis.grid(alpha=0.7)\n\n# Set the y-axis grid line alpha\nax.yaxis.grid(alpha=0.7)\n\n# Set the x-axis grid line zorder\nax.xaxis.grid(zorder=0)\n\n# Set the y-axis grid line zorder\nax.yaxis.grid(zorder=0)\n\n# Set the x-axis grid line color\nax.xaxis.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the y-axis grid line color\nax.yaxis.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the x-axis grid line alpha\nax.xaxis.grid(alpha=0.7)\n\n# Set the y-axis grid line alpha\nax.yaxis.grid(alpha=0.7)\n\n# Set the x-axis grid line zorder\nax.xaxis.grid(zorder=0)\n\n# Set the y-axis grid line zorder\nax.yaxis.grid(zorder=0)\n\n# Set the x-axis grid line color\nax.xaxis.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the y-axis grid line color\nax.yaxis.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the x-axis grid line alpha\nax.xaxis.grid(alpha=0.7)\n\n# Set the y-axis grid line alpha\nax.yaxis.grid(alpha=0.7)\n\n# Set the x-axis grid line zorder\nax.xaxis.grid(zorder=0)\n\n# Set the y-axis grid line zorder\nax.yaxis.grid(zorder=0)\n\n# Set the x-axis grid line color\nax.xaxis.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the y-axis grid line color\nax.yaxis.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the x-axis grid line alpha\nax.xaxis.grid(alpha=0.7)\n\n# Set the y-axis grid line alpha\nax.yaxis.grid(alpha=0.7)\n\n# Set the x-axis grid line zorder\nax.xaxis.grid(zorder=0)\n\n# Set the y-axis grid line zorder\nax.yaxis.grid(zorder=0)\n\n# Set the x-axis grid line color\nax.xaxis.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the y-axis grid line color\nax.yaxis.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the x-axis grid line alpha\nax.xaxis.grid(alpha=0.7)\n\n# Set the y-axis grid line alpha\nax.yaxis.grid(alpha=0.7)\n\n# Set the x-axis grid line zorder\nax.xaxis.grid(zorder=0)\n\n# Set the y-axis grid line zorder\nax.yaxis.grid(zorder=0)\n\n# Set the x-axis grid line color\nax.xaxis.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the y-axis grid line color\nax.yaxis.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the x-axis grid line alpha\nax.xaxis.grid(alpha=0.7)\n\n# Set the y-axis grid line alpha\nax.yaxis.grid(alpha=0.7)\n\n# Set the x-axis grid line zorder\nax.xaxis.grid(zorder=0)\n\n# Set the y-axis grid line zorder\nax.yaxis.grid(zorder=0)\n\n# Set the x-axis grid line color\nax.xaxis.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the y-axis grid line color\nax.yaxis.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the x-axis grid line alpha\nax.xaxis.grid(alpha=0.7)\n\n# Set the y-axis grid line alpha\nax.yaxis.grid(alpha=0.7)\n\n# Set the x-axis grid line zorder\nax.xaxis.grid(zorder=0)\n\n# Set the y-axis grid line zorder\nax.yaxis.grid(zorder=0)\n\n# Set the x-axis grid line color\nax.xaxis.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the y-axis grid line color\nax.yaxis.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the x-axis grid line alpha\nax.xaxis.grid(alpha=0.7)\n\n# Set the y-axis grid line alpha\nax.yaxis.grid(alpha=0.7)\n\n# Set the x-axis grid line zorder\nax.xaxis.grid(zorder=0)\n\n# Set the y-axis grid line zorder\nax.yaxis.grid(zorder=0)\n\n# Set the x-axis grid line color\nax.xaxis.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the y-axis grid line color\nax.yaxis.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the x-axis grid line alpha\nax.xaxis.grid(alpha=0.7)\n\n# Set the y-axis grid line alpha\nax.yaxis.grid(alpha=0.7)\n\n# Set the x-axis grid line zorder\nax.xaxis.grid(zorder=0)\n\n# Set the y-axis grid line zorder\nax.yaxis.grid(zorder=0)\n\n# Set the x-axis grid line color\nax.xaxis.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the y-axis grid line color\nax.yaxis.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the x-axis grid line alpha\nax.xaxis.grid(alpha=0.7)\n\n# Set the y-axis grid line alpha\nax.yaxis.grid(alpha=0.7)\n\n# Set the x-axis grid line zorder\nax.xaxis.grid(zorder=0)\n\n# Set the y-axis grid line zorder\nax.yaxis.grid(zorder=0)\n\n# Set the x-axis grid line color\nax.xaxis.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the y-axis grid line color\nax.yaxis.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the x-axis grid line alpha\nax.xaxis.grid(alpha=0.7)\n\n# Set the y-axis grid line alpha\nax.yaxis.grid(alpha=0.7)\n\n# Set the x-axis grid line zorder\nax.xaxis.grid(zorder=0)\n\n# Set the y-axis grid line zorder\nax.yaxis.grid(zorder=0)\n\n# Set the x-axis grid line color\nax.xaxis.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the y-axis grid line color\nax.yaxis.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the x-axis grid line alpha\nax.xaxis.grid(alpha=0.7)\n\n# Set the y-axis grid line alpha\nax.yaxis.grid(alpha=0.7)\n\n# Set the x-axis grid line zorder\nax.xaxis.grid(zorder=0)\n\n# Set the y-axis grid line zorder\nax.yaxis.grid(zorder=0)\n\n# Set the x-axis grid line color\nax.xaxis.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the y-axis grid line color\nax.yaxis.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the x-axis grid line alpha\nax.xaxis.grid(alpha=0.7)\n\n# Set the y-axis grid line alpha\nax.yaxis.grid(alpha=0.7)\n\n# Set the x-axis grid line zorder\nax.xaxis.grid(zorder=0)\n\n# Set the y-axis grid line zorder\nax.yaxis.grid(zorder=0)\n\n# Set the x-axis grid line color\nax.xaxis.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the y-axis grid line color\nax.yaxis.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the x-axis grid line alpha\nax.xaxis.grid(alpha=0.7)\n\n# Set the y-axis grid line alpha\nax.yaxis.grid(alpha=0.7)\n\n# Set the x-axis grid line zorder\nax.xaxis.grid(zorder=0)\n\n# Set the y-axis grid line zorder\nax.yaxis.grid(zorder=0)\n\n# Set the x-axis grid line color\nax.xaxis.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the y-axis grid line color\nax.yaxis.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the x-axis grid line alpha\nax.xaxis.grid(alpha=0.7)\n\n# Set the y-axis grid line alpha\nax.yaxis.grid(alpha=0.7)\n\n# Set the x-axis grid line zorder\nax.xaxis.grid(zorder=0)\n\n# Set the y-axis grid line zorder\nax.yaxis.grid(zorder=0)\n\n# Set the x-axis grid line color\nax.xaxis.grid(color='gray', linestyle='--', linewidth=0.5"}
{"file": "dataset/ori_500/HR_24.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('tripcolor of Delaunay triangulation, flat shading')\n\n# Create a grid of points\nx = np.linspace(-1, 1, 100)\ny = np.linspace(-1, 1, 100)\nX, Y = np.meshgrid(x, y)\n\n# Create a random function for Z values\nZ = np.sin(X**2 + Y**2)\n\n# Create a color map\ncmap = plt.cm.viridis\n\n# Create a contour plot\ncontour = ax.contourf(X, Y, Z, cmap=cmap)\n\n# Add a color bar\nfig.colorbar(contour)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_25.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('NonUniformImage class')\n\n# Create a grid of subplots\ngs = fig.add_gridspec(2, 2)\n\n# Create a subplot for the first image\nax1 = fig.add_subplot(gs[0, 0])\nax1.imshow(np.random.rand(10, 10), cmap='Oranges')\nax1.set_title('nearest')\n\n# Create a subplot for the second image\nax2 = fig.add_subplot(gs[0, 1])\nax2.imshow(np.random.rand(10, 10), cmap='Purples')\nax2.set_title('nearest')\n\n# Create a subplot for the third image\nax3 = fig.add_subplot(gs[1, 0])\nax3.imshow(np.random.rand(10, 10), cmap='Blues')\nax3.set_title('bilinear')\n\n# Create a subplot for the fourth image\nax4 = fig.add_subplot(gs[1, 1])\nax4.imshow(np.random.rand(10, 10), cmap='Reds')\nax4.set_title('bilinear')\n\n# Set the x and y limits\nax.set_xlim(-4, 4)\nax.set_ylim(-4, 4)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the plots\nx = np.arange(0, 10)\ny1 = np.random.randint(200, 600, 10)\ny2 = np.random.randint(200, 600, 10)\ny3 = np.random.randint(200, 600, 10)\n\n# Create a figure and a set of subplots\nfig, axs = plt.subplots(1, 2, figsize=(10, 4))\n\n# Plot the data\naxs[0].plot(x, y1, 'b-')\naxs[0].set_title('Flickr30k')\naxs[0].set_xlabel('Number of bits')\naxs[0].set_ylabel('Recall sum')\n\naxs[1].plot(x, y2, 'r-')\naxs[1].set_title('MS-COCO')\naxs[1].set_xlabel('Number of bits')\naxs[1].set_ylabel('Recall sum')\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0, 0), 1, 1, fc='blue')\naxs[0].add_patch(rect)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Denser Points with Perfectly Circular Error Ellipses')\n\n# Set the x and y limits\nax.set_xlim(0, 25)\nax.set_ylim(0, 30)\n\n# Set the x and y labels\nax.set_xlabel('x (m)')\nax.set_ylabel('y (m)')\n\n# Create a scatter plot\nx = np.linspace(0, 25, 100)\ny = np.sin(x)\nax.plot(x, y, 'r-')\n\n# Add a legend\nax.legend(['Monte Carlo', '\u00b1 3-\u03c3 of Prediction', 'Mean-Taylor'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Create a circle\ncircle = plt.Circle((0.5, 0.5), 0.4, color='blue', fill=False)\nax.add_artist(circle)\n\n# Create a rectangle\nrectangle = plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='green', fill=False)\nax.add_artist(rectangle)\n\n# Create a triangle\ntriangle = plt.Polygon([[0.1, 0.1], [0.9, 0.1], [0.5, 0.9]], color='red', fill=False)\nax.add_artist(triangle)\n\n# Set the aspect ratio of the plot to be equal\nax.set_aspect('equal')\n\n# Set the limits of the plot\nax.set_xlim(0, 1)\nax.set_ylim(0, 1)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 7.0))\n\n# Set the color of the background\nax.set_facecolor('red')\n\n# Create a grid of subplots\ngs = fig.add_gridspec(3, 3)\n\n# Create a scatter plot\nax1 = fig.add_subplot(gs[0, :])\nax1.scatter(np.random.rand(50), np.random.rand(50), c='blue', s=100)\nax1.set_title('Scatter Plot')\n\n# Create a line plot\nax2 = fig.add_subplot(gs[1, :])\nax2.plot(np.linspace(0, 10, 100), np.sin(np.linspace(0, 10, 100)), 'g-')\nax2.set_title('Line Plot')\n\n# Create a histogram\nax3 = fig.add_subplot(gs[2, :])\nax3.hist(np.random.randn(1000), bins=30, color='purple')\nax3.set_title('Histogram')\n\n# Create a bar chart\nax4 = fig.add_subplot(gs[:, 0])\nax4.bar(['A', 'B', 'C'], [10, 20, 30], color='orange')\nax4.set_title('Bar Chart')\n\n# Create a pie chart\nax5 = fig.add_subplot(gs[:, 1])\nax5.pie([10, 20, 30], labels=['A', 'B', 'C'], colors=['cyan', 'magenta', 'yellow'])\nax5.set_title('Pie Chart')\n\n# Create a heatmap\nax6 = fig.add_subplot(gs[:, 2])\nax6.imshow(np.random.rand(10, 10), cmap='hot', interpolation='nearest')\nax6.set_title('Heatmap')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis for the first subplot\nfig, ax = plt.subplots(figsize=(8.0, 4.0))\n\n# Plot the data\nax.plot([0, 100], [0, 0], 'r-')\nax.plot([0, 50], [1, 1], 'g-')\nax.plot([50, 100], [-1, -1], 'b-')\nax.plot([0, 25], [2, 2], 'c-')\nax.plot([25, 75], [-2, -2], 'm-')\nax.plot([75, 100], [3, 3], 'y-')\n\n# Set the limits of the x and y axes\nax.set_xlim(0, 100)\nax.set_ylim(-3, 3)\n\n# Add labels to the x and y axes\nax.set_xlabel('Users (U)')\nax.set_ylabel('Utility (f)')\n\n# Add a title to the plot\nax.set_title('Utility distribution per topic')\n\n# Add colored rectangles to represent the topics\nax.add_patch(plt.Rectangle((0, 0), 50, 1, color='blue'))\nax.add_patch(plt.Rectangle((50, 0), 50, 1, color='green'))\nax.add_patch(plt.Rectangle((0, 1), 25, 1, color='red'))\nax.add_patch(plt.Rectangle((25, 1), 50, 1, color='black'))\nax.add_patch(plt.Rectangle((75, 1), 25, 1, color='orange'))\n\n# Create a second subplot\nfig, ax = plt.subplots(figsize=(8.0, 4.0))\n\n# Plot the data\nax.plot([0, 100], [0, 0], 'r-')\nax.plot([0, 50], [1, 1], 'g-')\nax.plot([50, 100], [-1, -1], 'b-')\nax.plot([0, 25], [2, 2], 'c-')\nax.plot([25, 75], [-2, -2], 'm-')\nax.plot([75, 100], [3, 3], 'y-')\n\n# Set the limits of the x and y axes\nax.set_xlim(0, 100)\nax.set_ylim(-3, 3)\n\n# Add labels to the x and y axes\nax.set_xlabel('Users (U)')\nax.set_ylabel('Utility (f)')\n\n# Add a title to the plot\nax.set_title('User preference matrix (M)')\n\n# Add colored rectangles to represent the topics\nax.add_patch(plt.Rectangle((0, 0), 50, 1, color='blue'))\nax.add_patch(plt.Rectangle((50, 0), 50, 1, color='green'))\nax.add_patch(plt.Rectangle((0, 1), 25, 1, color='red'))\nax.add_patch(plt.Rectangle((25, 1), 50, 1, color='black'))\nax.add_patch(plt.Rectangle((75, 1), 25, 1, color='orange'))\n\n# Add colored dots to represent the users\nax.scatter(np.random.rand(100)*100, np.random.rand(100)*3-1.5, c=np.random.rand(100), cmap='viridis')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 4))\n\n# Set the title of the plot\nax.set_title('Reactive-2 Payoff')\n\n# Set the x-axis label\nax.set_xlabel('Reactive-2 payoff')\n\n# Set the y-axis label\nax.set_ylabel('Memory-2 payoff')\n\n# Create a scatter plot\nx = np.linspace(-2, 2, 100)\ny = np.sin(x)\nax.scatter(x, y)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0, 0), 1, 1, color='red')\nax.add_patch(rect)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 4))\n\n# Set the title of the plot\nax.set_title('Model = Vicuna')\n\n# Create a scatter plot\nx = np.random.rand(50)\ny = np.random.rand(50)\nax.scatter(x, y)\n\n# Add a rectangle\nrect = plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='blue')\nax.add_patch(rect)\n\n# Add a line\nline = plt.Line2D([0.1, 0.9], [0.1, 0.9], color='red')\nax.add_line(line)\n\n# Add a circle\ncircle = plt.Circle((0.5, 0.5), 0.2, color='green')\nax.add_artist(circle)\n\n# Add a text\nax.text(0.5, 0.5, 'Hello', horizontalalignment='center', verticalalignment='center')\n\n# Set the limits of the x and y axes\nax.set_xlim(0, 1)\nax.set_ylim(0, 1)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/PIP_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Set the background color of the plot\nax.set_facecolor('pink')\n\n# Set the title of the plot\nax.set_title('Stock Market Analysis')\n\n# Set the x-axis label\nax.set_xlabel('\u0394 Robust Accuracy (%)')\n\n# Set the y-axis label\nax.set_ylabel('\u0394 RNFR (%)')\n\n# Create a scatter plot\nx = np.random.rand(10)\ny = np.random.rand(10)\nax.scatter(x, y, c='green', marker='^')\n\n# Create a line plot\nx = np.linspace(-40, 10, 100)\ny = np.sin(x)\nax.plot(x, y, c='blue')\n\n# Create a bar chart\nx = np.arange(1, 6)\ny = np.random.randint(1, 10, 5)\nax.bar(x, y, color='orange')\n\n# Create a histogram\nx = np.random.normal(0, 1, 1000)\nax.hist(x, bins=20, color='gray')\n\n# Create a pie chart\nx = [1, 2, 3, 4, 5]\ny = [10, 20, 30, 40, 50]\nax.pie(y, labels=x, colors=['red', 'green', 'blue', 'yellow', 'purple'])\n\n# Create a box plot\nx = np.random.randn(100)\nax.boxplot(x)\n\n# Create a violin plot\nx = np.random.randn(100)\nax.violinplot(x)\n\n# Create a heatmap\nx = np.random.rand(10, 10)\nax.imshow(x, cmap='hot', interpolation='nearest')\n\n# Create a contour plot\nx = np.linspace(-10, 10, 100)\ny = np.linspace(-10, 10, 100)\nX, Y = np.meshgrid(x, y)\nZ = np.sin(np.sqrt(X**2 + Y**2))\nax.contourf(X, Y, Z, levels=10, cmap='coolwarm')\n\n# Create a scatter plot with different colors\nx = np.random.rand(10)\ny = np.random.rand(10)\ncolors = ['red', 'green', 'blue', 'yellow', 'purple']\nax.scatter(x, y, c=colors)\n\n# Create a scatter plot with different sizes\nx = np.random.rand(10)\ny = np.random.rand(10)\nsizes = np.random.randint(10, 100, 10)\nax.scatter(x, y, s=sizes)\n\n# Create a scatter plot with different markers\nx = np.random.rand(10)\ny = np.random.rand(10)\nmarkers = ['o', '^', 's', 'p', '*']\nax.scatter(x, y, marker=markers)\n\n# Create a scatter plot with different edge colors\nx = np.random.rand(10)\ny = np.random.rand(10)\nedge_colors = ['black', 'white', 'gray', 'silver', 'gold']\nax.scatter(x, y, edgecolor=edge_colors)\n\n# Create a scatter plot with different face colors\nx = np.random.rand(10)\ny = np.random.rand(10)\nface_colors = ['red', 'green', 'blue', 'yellow', 'purple']\nax.scatter(x, y, facecolor=face_colors)\n\n# Create a scatter plot with different alpha values\nx = np.random.rand(10)\ny = np.random.rand(10)\nalpha_values = [0.1, 0.2, 0.3, 0.4, 0.5]\nax.scatter(x, y, alpha=alpha_values)\n\n# Create a scatter plot with different zorder values\nx = np.random.rand(10)\ny = np.random.rand(10)\nzorder_values = [1, 2, 3, 4, 5]\nax.scatter(x, y, zorder=zorder_values)\n\n# Create a scatter plot with different linewidth values\nx = np.random.rand(10)\ny = np.random.rand(10)\nlinewidth_values = [0.1, 0.2, 0.3, 0.4, 0.5]\nax.scatter(x, y, linewidth=linewidth_values)\n\n# Create a scatter plot with different linestyle values\nx = np.random.rand(10)\ny = np.random.rand(10)\nlinestyle_values = ['-', '--', '-.', ':']\nax.scatter(x, y, linestyle=linestyle_values)\n\n# Create a scatter plot with different hatch values\nx = np.random.rand(10)\ny = np.random.rand(10)\nhatch_values = ['/', '\\\\', '|', '-', '+', 'x', 'o', 'O', '.', '*']\nax.scatter(x, y, hatch=hatch_values)\n\n# Create a scatter plot with different antialiased values\nx = np.random.rand(10)\ny = np.random.rand(10)\nantialiased_values = [True, False, True, False, True]\nax.scatter(x, y, antialiased=antialiased_values)\n\n# Create a scatter plot with different capsize values\nx = np.random.rand(10)\ny = np.random.rand(10)\ncapsize_values = [0, 1, 2, 3, 4]\nax.scatter(x, y, capsize=capsize_values)\n\n# Create a scatter plot with different elinewidth values\nx = np.random.rand(10)\ny = np.random.rand(10)\nelinewidth_values = [0.1, 0.2, 0.3, 0.4, 0.5]\nax.scatter(x, y, elinewidth=elinewidth_values)\n\n# Create a scatter plot with different ecolor values\nx = np.random.rand(10)\ny = np.random.rand(10)\necolor_values = ['black', 'white', 'gray', 'silver', 'gold']\nax.scatter(x, y, ecolor=ecolor_values)\n\n# Create a scatter plot with different log values\nx = np.random.rand(10)\ny = np.random.rand(10)\nlog_values = ['x', 'y', 'xy']\nax.scatter(x, y, log=log_values)\n\n# Create a scatter plot with different s values\nx = np.random.rand(10)\ny = np.random.rand(10)\ns_values = [10, 20, 30, 40, 50]\nax.scatter(x, y, s=s_values)\n\n# Create a scatter plot with different c values\nx = np.random.rand(10)\ny = np.random.rand(10)\nc_values = ['red', 'green', 'blue', 'yellow', 'purple']\nax.scatter(x, y, c=c_values)\n\n# Create a scatter plot with different marker values\nx = np.random.rand(10)\ny = np.random.rand(10)\nmarker_values = ['o', '^', 's', 'p', '*']\nax.scatter(x, y, marker=marker_values)\n\n# Create a scatter plot with different edgecolor values\nx = np.random.rand(10)\ny = np.random.rand(10)\nedgecolor_values = ['black', 'white', 'gray', 'silver', 'gold']\nax.scatter(x, y, edgecolor=edgecolor_values)\n\n# Create a scatter plot with different facecolor values\nx = np.random.rand(10)\ny = np.random.rand(10)\nfacecolor_values = ['red', 'green', 'blue', 'yellow', 'purple']\nax.scatter(x, y, facecolor=facecolor_values)\n\n# Create a scatter plot with different alpha values\nx = np.random.rand(10)\ny = np.random.rand(10)\nalpha_values = [0.1, 0.2, 0.3, 0.4, 0.5]\nax.scatter(x, y, alpha=alpha_values)\n\n# Create a scatter plot with different zorder values\nx = np.random.rand(10)\ny = np.random.rand(10)\nzorder_values = [1, 2, 3, 4, 5]\nax.scatter(x, y, zorder=zorder_values)\n\n# Create a scatter plot with different linewidth values\nx = np.random.rand(10)\ny = np.random.rand(10)\nlinewidth_values = [0.1, 0.2, 0.3, 0.4, 0.5]\nax.scatter(x, y, linewidth=linewidth_values)\n\n# Create a scatter plot with different linestyle values\nx = np.random.rand(10)\ny = np.random.rand(10)\nlinestyle_values = ['-', '--', '-.', ':']\nax.scatter(x, y, linestyle=linestyle_values)\n\n# Create a scatter plot with different hatch values\nx = np.random.rand(10)\ny = np.random.rand(10)\nhatch_values = ['/', '\\\\', '|', '-', '+', 'x', 'o', 'O', '.', '*']\nax.scatter(x, y, hatch=hatch_values)\n\n# Create a scatter plot with different antialiased values\nx = np.random.rand(10)\ny = np.random.rand(10)\nantialiased_values = [True, False, True, False, True]\nax.scatter(x, y, antialiased=antialiased_values)\n\n# Create a scatter plot with different capsize values\nx = np.random.rand(10)\ny = np.random.rand(10)\ncapsize_values = [0, 1, 2, 3, 4]\nax.scatter(x, y, capsize=capsize_values)\n\n# Create a scatter plot with different elinewidth values\nx = np.random.rand(10)\ny = np.random.rand(10)\nelinewidth_values = [0.1, 0.2, 0.3, 0.4, 0.5]\nax.scatter(x, y, elinewidth=elinewidth_values)\n\n# Create a scatter plot with different ecolor values\nx = np.random.rand(10)\ny = np.random.rand(10)\necolor_values = ['black', 'white', 'gray', 'silver', 'gold']\nax.scatter(x, y, ecolor=ecolor_values)\n\n# Create a scatter plot with different log values\nx = np.random.rand(10)\ny = np.random.rand(10)\nlog_values = ['x', 'y', 'xy']\nax.scatter(x, y, log=log_values)\n\n# Create a scatter plot with different s values\nx = np.random.rand(10)\ny = np.random.rand(10)\ns_values = [10, 20, 30, 40, 50]\nax.scatter(x, y, s=s_values)\n\n# Create a scatter plot with different c values\nx = np.random.rand(10)\ny = np.random.rand(10)\nc_values = ['red', 'green', 'blue', 'yellow', 'purple']\nax.scatter(x, y, c=c_values)\n\n# Create a scatter plot with different marker values\nx = np.random.rand(10)\ny = np.random.rand(10)\nmarker_values = ['o', '^', 's', 'p', '*']\nax.scatter(x, y, marker=marker_values)\n\n# Create a scatter plot with different edgecolor values\nx = np.random.rand(10)\ny = np.random.rand(10)\nedgecolor_values = ['black', 'white', 'gray', 'silver', 'gold']\nax.scatter(x, y, edgecolor=edgecolor_values)\n\n# Create a scatter plot with different facecolor values\nx = np.random.rand(10)\ny = np.random.rand(10)\nfacecolor_values = ['red', 'green', 'blue', 'yellow', 'purple']\nax.scatter(x, y, facecolor=facecolor_values)\n\n# Create a scatter plot with different alpha values\nx = np.random.rand(10)\ny = np.random.rand(10)\nalpha_values = [0.1, 0.2, 0.3, 0.4, 0.5]\nax.scatter(x, y, alpha=alpha_values)\n\n# Create a scatter plot with different zorder values\nx = np.random.rand(10)\ny = np.random.rand(10)\nzorder_values = [1, 2, 3, 4, 5]\nax.scatter(x, y, zorder=zorder_values)\n\n# Create a scatter plot with different linewidth values\nx = np.random.rand(10)\ny = np.random.rand(10)\nlinewidth_values = [0.1, 0.2, 0.3, 0.4, 0.5]\nax.scatter(x, y, linewidth=linewidth_values)\n\n# Create a scatter plot with different linestyle values\nx = np.random.rand(10)\ny = np.random.rand(10)\nlinestyle_values = ['-', '--', '-.', ':']\nax.scatter(x, y, linestyle=linestyle_values)\n\n# Create a scatter plot with different hatch values\nx = np.random.rand(10)\ny = np.random.rand(10)\nhatch_values = ['/', '\\\\', '|', '-', '+', 'x', 'o', 'O', '.', '*']\nax.scatter(x, y, hatch=hatch_values)\n\n# Create a scatter plot with different antialiased values\nx = np.random.rand(10)\ny = np.random.rand(10)\nantialiased_values = [True, False, True, False, True]\nax.scatter(x, y, antialiased=antialiased_values)\n\n# Create a scatter plot with different capsize values\nx = np.random.rand(10)\ny = np.random.rand(10)\ncapsize_values = [0, 1, 2, 3, 4]\nax.scatter(x, y, capsize=capsize_values)\n\n# Create a scatter plot with different elinewidth values\nx = np.random.rand(10)\ny = np.random.rand(10)\nelinewidth_values = [0.1, 0.2, 0.3, 0.4, 0.5]\nax.scatter(x, y, elinewidth=elinewidth_values)\n\n# Create a scatter plot with different ecolor values\nx = np.random.rand(10)\ny = np.random.rand(10)\necolor_values = ['black', 'white', 'gray', 'silver', 'gold']\nax.scatter(x, y, ecolor=ecolor_values)\n\n# Create a scatter plot with different log values\nx = np.random.rand(10)\ny = np.random.rand(10)\nlog_values = ['x', 'y', 'xy']\nax.scatter(x, y, log=log_values)\n\n# Create a scatter plot with different s values\nx = np.random.rand(10)\ny = np.random.rand(10)\ns_values = [10, 20, 30, 40, 50]\nax.scatter(x, y, s=s_values)\n\n# Create a scatter plot with different c values\nx = np.random.rand(10)\ny = np.random.rand(10)\nc_values = ['red', 'green', 'blue', 'yellow', 'purple']\nax.scatter(x, y, c=c_values)\n\n# Create a scatter plot with different marker values\nx = np.random.rand(10)\ny = np.random.rand(10)\nmarker_values = ['o', '^', 's', 'p', '*']\nax.scatter(x, y, marker=marker_values)\n\n# Create a scatter plot with different edgecolor values\nx = np.random.rand(10)\ny = np.random.rand(10)\nedgecolor_values = ['black', 'white', 'gray', 'silver', 'gold']\nax.scatter(x, y, edgecolor=edgecolor_values)\n\n# Create a scatter plot with different facecolor values\nx = np.random.rand(10)\ny = np.random.rand(10)\nfacecolor_values = ['red', 'green', 'blue', 'yellow', 'purple']\nax.scatter(x, y, facecolor=facecolor_values)\n\n# Create a scatter plot with different alpha values\nx = np.random.rand(10)\ny = np.random.rand(10)\nalpha_values = [0.1, 0.2, 0.3, 0.4, 0.5]\nax.scatter(x, y, alpha=alpha_values)\n\n# Create a scatter plot with different zorder values\nx = np.random.rand(10)\ny = np.random.rand(10)\nzorder_values = [1, 2, 3, 4, 5]\nax.scatter(x, y, zorder=zorder_values)\n\n# Create a scatter plot with different linewidth values\nx = np.random.rand(10)\ny = np.random.rand(10)\nlinewidth_values = [0.1, 0.2, 0.3, 0.4, 0.5]\nax.scatter(x, y, linewidth=linewidth_values)\n\n# Create a scatter plot with different linestyle values\nx = np.random.rand(10)\ny = np.random.rand(10)\nlinestyle_values = ['-', '--', '-.', ':']\nax.scatter(x, y, linestyle=linestyle_values)\n\n# Create a scatter plot with different hatch values\nx = np.random.rand(10)\ny = np.random.rand(10)\nhatch_values = ['/', '\\\\', '|', '-', '+', 'x', 'o', 'O', '.', '*']\nax.scatter(x, y, hatch=hatch_values)\n\n# Create a scatter plot with different antialiased values\nx = np.random.rand(10)\ny = np.random.rand(10)\nantialiased_values = [True, False, True, False, True]\nax.scatter(x, y, antialiased=antialiased_values)\n\n# Create a scatter plot with different capsize values\nx = np.random.rand(10)\ny = np.random.rand(10)\ncapsize_values = [0, 1, 2, 3, 4]\nax.scatter(x, y, capsize=capsize_values)\n\n# Create a scatter plot with different elinewidth values\nx = np.random.rand(10)\ny = np.random.rand(10)\nelinewidth_values = [0.1, 0.2, 0.3, 0.4, 0.5]\nax.scatter(x, y, elinewidth=elinewidth_values)\n\n# Create a scatter plot with different ecolor values\nx = np.random.rand(10)\ny = np.random.rand(10)\necolor_values = ['black', 'white', 'gray', 'silver', 'gold']\nax.scatter(x, y, ecolor=ecolor_values)\n\n# Create a scatter plot with different log values\nx = np.random.rand(10)\ny = np.random.rand(10)\nlog_values = ['x', 'y', 'xy']\nax.scatter(x, y,"}
{"file": "dataset/ori_500/PIP_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Exponential Scale')\n\n# Set the x-axis label\nax.set_xlabel('Gradient Steps (x 62.5K)')\n\n# Set the y-axis label\nax.set_ylabel('Exponential Scale')\n\n# Create a scatter plot with random data\nx = np.random.rand(10)\ny = np.random.rand(10)\nax.scatter(x, y, color='green')\n\n# Create a line plot with random data\nx = np.linspace(0, 100, 100)\ny = np.exp(x/10)\nax.plot(x, y, color='red')\n\n# Create a bar chart with random data\nx = np.arange(1, 11)\ny = np.random.rand(10)\nax.bar(x, y, color='blue')\n\n# Create a pie chart with random data\nx = np.array([1, 2, 3, 4, 5])\ny = np.random.rand(5)\nax.pie(y, labels=x, colors=['green', 'red', 'blue', 'yellow', 'purple'])\n\n# Create a histogram with random data\nx = np.random.rand(100)\nax.hist(x, bins=10, color='orange')\n\n# Create a box plot with random data\nx = np.random.rand(100)\nax.boxplot(x, vert=False)\n\n# Create a violin plot with random data\nx = np.random.rand(100)\nax.violinplot(x)\n\n# Create a heatmap with random data\nx = np.random.rand(10, 10)\nax.imshow(x, cmap='hot', interpolation='nearest')\n\n# Create a contour plot with random data\nx = np.random.rand(10, 10)\ny = np.random.rand(10, 10)\nz = np.random.rand(10, 10)\nax.contourf(x, y, z, cmap='coolwarm')\n\n# Create a streamplot with random data\nx = np.random.rand(10, 10)\ny = np.random.rand(10, 10)\nu = np.random.rand(10, 10)\nv = np.random.rand(10, 10)\nax.streamplot(x, y, u, v)\n\n# Create a quiver plot with random data\nx = np.random.rand(10, 10)\ny = np.random.rand(10, 10)\nu = np.random.rand(10, 10)\nv = np.random.rand(10, 10)\nax.quiver(x, y, u, v)\n\n# Create a polar plot with random data\ntheta = np.linspace(0, 2*np.pi, 100)\nr = np.random.rand(100)\nax.polar(theta, r)\n\n# Create a 3D scatter plot with random data\nx = np.random.rand(10)\ny = np.random.rand(10)\nz = np.random.rand(10)\nax.scatter(x, y, z, color='green')\n\n# Create a 3D line plot with random data\nx = np.linspace(0, 100, 100)\ny = np.exp(x/10)\nz = np.sin(x)\nax.plot(x, y, z, color='red')\n\n# Create a 3D bar chart with random data\nx = np.arange(1, 11)\ny = np.arange(1, 11)\nz = np.random.rand(10, 10)\nax.bar3d(x, y, z, color='blue')\n\n# Create a 3D pie chart with random data\nx = np.array([1, 2, 3, 4, 5])\ny = np.random.rand(5)\nax.pie3d(y, labels=x, colors=['green', 'red', 'blue', 'yellow', 'purple'])\n\n# Create a 3D histogram with random data\nx = np.random.rand(100)\nax.hist3d(x, bins=10, color='orange')\n\n# Create a 3D box plot with random data\nx = np.random.rand(100)\nax.boxplot3d(x, vert=False)\n\n# Create a 3D violin plot with random data\nx = np.random.rand(100)\nax.violinplot3d(x)\n\n# Create a 3D heatmap with random data\nx = np.random.rand(10, 10)\ny = np.random.rand(10, 10)\nz = np.random.rand(10, 10)\nax.imshow3d(x, y, z, cmap='hot', interpolation='nearest')\n\n# Create a 3D contour plot with random data\nx = np.random.rand(10, 10)\ny = np.random.rand(10, 10)\nz = np.random.rand(10, 10)\nax.contourf3d(x, y, z, cmap='coolwarm')\n\n# Create a 3D streamplot with random data\nx = np.random.rand(10, 10)\ny = np.random.rand(10, 10)\nu = np.random.rand(10, 10)\nv = np.random.rand(10, 10)\nax.streamplot3d(x, y, u, v)\n\n# Create a 3D quiver plot with random data\nx = np.random.rand(10, 10)\ny = np.random.rand(10, 10)\nu = np.random.rand(10, 10)\nv = np.random.rand(10, 10)\nax.quiver3d(x, y, u, v)\n\n# Create a 3D polar plot with random data\ntheta = np.linspace(0, 2*np.pi, 100)\nr = np.random.rand(100)\nax.polar3d(theta, r)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/PIP_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Predicted vs Actual')\n\n# Set the x-axis label\nax.set_xlabel('Maximum Predicted Probability')\n\n# Set the y-axis label\nax.set_ylabel('Number of Examples')\n\n# Set the x-axis limits\nax.set_xlim(0, 1)\n\n# Set the y-axis limits\nax.set_ylim(0, 2000)\n\n# Set the x-axis ticks\nax.set_xticks([0.35, 0.4, 0.45, 0.5, 0.55, 0.6, 0.65, 0.7, 0.75, 0.8, 0.85, 0.9, 0.95, 1])\n\n# Set the y-axis ticks\nax.set_yticks([0, 500, 1000, 1500, 2000])\n\n# Set the grid lines\nax.grid(True)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('black')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('black')\n\n# Set the color of the x-axis ticks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis ticks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('black')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('black')\n\n# Set the color of the x-axis ticks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis ticks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('black')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('black')\n\n# Set the color of the x-axis ticks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis ticks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('black')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('black')\n\n# Set the color of the x-axis ticks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis ticks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('black')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('black')\n\n# Set the color of the x-axis ticks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis ticks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('black')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('black')\n\n# Set the color of the x-axis ticks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis ticks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('black')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('black')\n\n# Set the color of the x-axis ticks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis ticks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('black')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('black')\n\n# Set the color of the x-axis ticks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis ticks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('black')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('black')\n\n# Set the color of the x-axis ticks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis ticks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('black')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('black')\n\n# Set the color of the x-axis ticks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis ticks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('black')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('black')\n\n# Set the color of the x-axis ticks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis ticks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('black')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('black')\n\n# Set the color of the x-axis ticks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis ticks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('black')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('black')\n\n# Set the color of the x-axis ticks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis ticks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('black')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('black')\n\n# Set the color of the x-axis ticks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis ticks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('black')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('black')\n\n# Set the color of the x-axis ticks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis ticks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('black')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('black')\n\n# Set the color of the x-axis ticks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis ticks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('black')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('black')\n\n# Set the color of the x-axis ticks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis ticks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth="}
{"file": "dataset/ori_500/PIP_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Bias Score by Data Type and Model')\n\n# Set the x-axis label\nax.set_xlabel('Data Type')\n\n# Set the y-axis label\nax.set_ylabel('Bias Score')\n\n# Define the data points\nx = ['INT8', 'INT4', 'INT2']\ny = [9.3, 9.1, 9.0]\n\n# Plot the data points\nax.plot(x, y, 'ro-')\n\n# Add a legend\nax.legend(['Model1', 'Model2', 'Model3'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/PIP_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Set the title of the plot\nax.set_title('Predicted vs Actual')\n\n# Set the x-axis label\nax.set_xlabel('Maximum Predicted Probability')\n\n# Set the y-axis label\nax.set_ylabel('Number of Examples')\n\n# Create a scatter plot\nax.scatter([0.25, 0.3, 0.4, 0.45, 0.5], [1000, 1200, 1300, 1400, 1500], color='red')\n\n# Create a line graph\nx = np.linspace(0, 1, 100)\ny = 1000 * np.sin(x)\nax.plot(x, y, color='black')\n\n# Create a bar chart\nax.bar([0.0, 0.2, 0.4, 0.6], [500, 700, 900, 1100], color='blue')\n\n# Create a histogram\nax.hist([0.05, 0.1, 0.15, 0.2, 0.25, 0.3, 0.35, 0.4, 0.45, 0.5], bins=10, color='green')\n\n# Create a pie chart\nax.pie([100, 200, 300, 400, 500], labels=['Known', 'Unknown', 'Known', 'Unknown', 'Known'], colors=['orange', 'lightblue'])\n\n# Create a rectangle\nrect = plt.Rectangle((0.05, 0.05), 0.1, 0.1, color='red')\nax.add_patch(rect)\n\n# Create a circle\ncircle = plt.Circle((0.5, 0.5), 0.1, color='blue')\nax.add_artist(circle)\n\n# Create a triangle\ntriangle = plt.Polygon([[0.1, 0.1], [0.2, 0.2], [0.1, 0.2]], color='green')\nax.add_patch(triangle)\n\n# Create a star\nstar = plt.Polygon([[0.3, 0.3], [0.4, 0.4], [0.3, 0.5], [0.2, 0.4], [0.3, 0.3]], color='yellow')\nax.add_patch(star)\n\n# Create a rectangle with a border\nrect_with_border = plt.Rectangle((0.6, 0.6), 0.1, 0.1, color='red', edgecolor='black')\nax.add_patch(rect_with_border)\n\n# Create a circle with a border\ncircle_with_border = plt.Circle((0.7, 0.7), 0.1, color='blue', edgecolor='black')\nax.add_artist(circle_with_border)\n\n# Create a triangle with a border\ntriangle_with_border = plt.Polygon([[0.8, 0.8], [0.9, 0.9], [0.8, 0.9]], color='green', edgecolor='black')\nax.add_patch(triangle_with_border)\n\n# Create a star with a border\nstar_with_border = plt.Polygon([[0.9, 0.9], [1.0, 1.0], [0.9, 1.1], [0.8, 1.0], [0.9, 0.9]], color='yellow', edgecolor='black')\nax.add_patch(star_with_border)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/PIP_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Empirical Lipschitz Constant')\n\n# Set the x-axis label\nax.set_xlabel('Width of Layer')\n\n# Set the y-axis label\nax.set_ylabel('Empirical Lipschitz Constant')\n\n# Define the data points for the plots\nx = [2**i for i in range(6)]\ny1 = [10000 * i for i in range(6)]\ny2 = [5000 * i for i in range(6)]\ny3 = [2500 * i for i in range(6)]\ny4 = [1000 * i for i in range(6)]\n\n# Plot the data points\nax.plot(x, y1, 'g-', label='Cos | n0 = 200')\nax.plot(x, y2, 'g-', label='Cos | n0 = 400')\nax.plot(x, y3, 'b-', label='ReLU | n0 = 200')\nax.plot(x, y4, 'b-', label='ReLU | n0 = 400')\n\n# Add a legend to the plot\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/PIP_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data\nax.plot([0, 1000, 2000, 3000, 4000, 5000, 6000, 7000, 8000, 9000, 10000], [7000, 6500, 6000, 5500, 5000, 4500, 4000, 3500, 3000, 2500, 2000], 'r-')\nax.plot([0, 1000, 2000, 3000, 4000, 5000, 6000, 7000, 8000, 9000, 10000], [7000, 6500, 6000, 5500, 5000, 4500, 4000, 3500, 3000, 2500, 2000], 'g-')\nax.plot([0, 1000, 2000, 3000, 4000, 5000, 6000, 7000, 8000, 9000, 10000], [7000, 6500, 6000, 5500, 5000, 4500, 4000, 3500, 3000, 2500, 2000], 'b-')\n\n# Set the title and labels\nax.set_title('Stock Market Analysis')\nax.set_xlabel('Time Steps')\nax.set_ylabel('Discounted Cumulative Rewarded')\n\n# Add legends\nax.legend(['WI', 'ISQ', 'WIQL', 'Greedy'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/PIP_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Plot the data\nax.plot([0, 25, 50, 75, 100, 125, 150, 175, 200], [0.55, 0.50, 0.45, 0.40, 0.35, 0.30, 0.25, 0.20, 0.15], color='blue')\nax.plot([0, 25, 50, 75, 100, 125, 150, 175, 200], [0.50, 0.45, 0.40, 0.35, 0.30, 0.25, 0.20, 0.15, 0.10], color='orange')\n\n# Set the title and labels\nax.set_title('Discounted Cumulative Reward')\nax.set_xlabel('Time Steps')\nax.set_ylabel('Discounted Cumulative Reward')\n\n# Add a legend\nax.legend(['WI', 'ISQ'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/PIP_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Set the background color of the plot\nax.set_facecolor('lightblue')\n\n# Set the x-axis and y-axis limits\nax.set_xlim(-4, 4)\nax.set_ylim(-4, 4)\n\n# Set the x-axis and y-axis labels\nax.set_xlabel('X-axis')\nax.set_ylabel('Y-axis')\n\n# Set the title of the plot\nax.set_title('Weather Forecast')\n\n# Add a legend to the plot\nax.legend()\n\n# Add a grid to the plot\nax.grid(True)\n\n# Add a scatter plot to the plot\nax.scatter([1, 2, 3], [4, 5, 6], color='red', label='Daytime Sunny')\n\n# Add a line plot to the plot\nax.plot([-1, 0, 1], [0, 1, 0], color='green', label='Night Rainy')\n\n# Add a bar chart to the plot\nax.bar([-2, -1, 0], [2, 1, 0], color='orange', label='PGST')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/PIP_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Draw a rectangle\nrectangle = plt.Rectangle((-2, -1), 4, 2, fc='blue')\nax.add_patch(rectangle)\n\n# Draw a circle\ncircle = plt.Circle((0, 0), 1, fc='red')\nax.add_artist(circle)\n\n# Draw a scatter plot\nx = np.random.rand(50)\ny = np.random.rand(50)\nax.scatter(x, y, c='green')\n\n# Set the limits of the axes\nax.set_xlim(-8, 8)\nax.set_ylim(-8, 8)\n\n# Set the labels of the axes\nax.set_xlabel('X-axis')\nax.set_ylabel('Y-axis')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/area_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(9.0, 8.0))\n\n# Set the background color of the plot\nax.set_facecolor('#f2f2f2')\n\n# Set the title of the plot\nax.set_title('Fitness Tracker', fontsize=16)\n\n# Set the x-axis label\nax.set_xlabel('Time (in minutes)', fontsize=14)\n\n# Set the y-axis label\nax.set_ylabel('Calories Burned', fontsize=14)\n\n# Set the x-ticks\nax.set_xticks([0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60])\n\n# Set the y-ticks\nax.set_yticks([0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50])\n\n# Set the x-tick labels\nax.set_xticklabels(['0K', '5K', '10K', '15K', '20K', '25K', '30K', '35K', '40K', '45K', '50K', '55K', '60K'])\n\n# Set the y-tick labels\nax.set_yticklabels(['0', '5', '10', '15', '20', '25', '30', '35', '40', '45', '50'])\n\n# Set the grid lines\nax.grid(True)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='minor', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='minor', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n#"}
{"file": "dataset/ori_500/area_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 10))\n\n# Set the background color of the plot\nax.set_facecolor('lightblue')\n\n# Set the title of the plot\nax.set_title('Stock Market Analysis')\n\n# Set the x-axis label\nax.set_xlabel('Time Step')\n\n# Set the y-axis label\nax.set_ylabel('Stock Price')\n\n# Set the x-axis ticks\nax.set_xticks([0, 1, 2, 3])\n\n# Set the y-axis ticks\nax.set_yticks([0, 10, 20, 30, 40, 50])\n\n# Set the x-axis tick labels\nax.set_xticklabels(['0', '1', '2', '3'])\n\n# Set the y-axis tick labels\nax.set_yticklabels(['0', '10', '20', '30', '40', '50'])\n\n# Set the grid lines\nax.grid(True)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='green')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='purple')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='orange', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='pink', linestyle='--')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='brown')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='cyan')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='magenta')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='yellow')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='black', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='white', linestyle='--')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='silver')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='gold')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='lime')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='teal')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='navy', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='maroon', linestyle='--')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='crimson')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='olive')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='indigo')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='violet')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='silver', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='gold', linestyle='--')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='lime')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='teal')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='navy')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='maroon')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='crimson', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='olive', linestyle='--')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='indigo')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='violet')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='silver')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='gold')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='lime', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='teal', linestyle='--')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='navy')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='maroon')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='crimson')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='olive')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='indigo', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='violet', linestyle='--')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='silver')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='gold')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='lime')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='teal')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='navy', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='maroon', linestyle='--')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='crimson')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='olive')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='indigo')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='violet')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='silver', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='gold', linestyle='--')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='lime')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='teal')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='navy')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='maroon')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='crimson', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='olive', linestyle='--')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='indigo')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='violet')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='silver')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='gold')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='lime', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='teal', linestyle='--')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='navy')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='maroon')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='crimson')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='olive')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='indigo', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='violet', linestyle='--')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='silver')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='gold')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='lime')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='teal')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='navy', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='maroon', linestyle='--')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='crimson')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='olive')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='indigo')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='violet')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='silver', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='gold', linestyle='--')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='lime')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='teal')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='navy')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='maroon')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='crimson', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='olive', linestyle='--')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='indigo')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='violet')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='silver')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='gold')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='lime', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='teal', linestyle='--')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='navy')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='maroon')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='crimson')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='olive')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='indigo', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='violet', linestyle='--')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='silver')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='gold')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='lime')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='teal')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='navy', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='maroon', linestyle='--')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='crimson')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='olive')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='indigo')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='violet')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='silver', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='gold', linestyle='--')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='lime')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='teal')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='navy')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='maroon')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='crimson', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='olive', linestyle='--')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='indigo')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='violet')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='silver')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='gold')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='lime', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='teal', linestyle='--')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='navy')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='maroon')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='crimson')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='olive')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='indigo', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='violet', linestyle='--')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='silver')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='gold')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='lime')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='teal')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='navy', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='maroon', linestyle='--')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='crimson')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='olive')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='indigo')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='violet')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='silver', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='gold', linestyle='--')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='lime')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='teal')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='navy')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='maroon')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='crimson', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='olive', linestyle='--')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='indigo')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='violet')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='silver')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='gold')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='lime', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='teal', linestyle='--')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='navy')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='maroon')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='crimson')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='olive')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='indigo', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='violet', linestyle='--')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='silver')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='gold')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='lime')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='teal')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='navy', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='maroon', linestyle='--')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='crimson')\n\n#"}
{"file": "dataset/ori_500/area_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Dynamic Effect of Vocab on Zero Shot Accuracy')\n\n# Set the x-axis label\nax.set_xlabel('Decomposition IO Norm')\n\n# Set the y-axis label\nax.set_ylabel('Accuracy')\n\n# Create a list of data points for the x-axis\nx = [0, 20, 40, 60, 80]\n\n# Create a list of data points for the y-axis\ny = [0.53, 0.75, 0.70, 0.65, 0.55]\n\n# Create a scatter plot with the data points\nax.scatter(x, y)\n\n# Add a legend to the plot\nax.legend(['clip', 'laion (5k)', 'coco (5k)', 'laion (10k)', 'coco (10k)'])\n\n# Set the color of the lines\nax.plot(x, y, color='black')\n\n# Set the color of the markers\nax.plot(x, y, 'o', color='red')\n\n# Set the color of the background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the grid\nax.grid(color='#dcdcdc')\n\n# Set the color of the labels\nax.set_xlabel('Decomposition IO Norm', color='#555555')\nax.set_ylabel('Accuracy', color='#555555')\n\n# Set the color of the title\nax.set_title('Dynamic Effect of Vocab on Zero Shot Accuracy', color='#555555')\n\n# Set the color of the legend\nax.legend(facecolor='#f0f0f0', edgecolor='#dcdcdc')\n\n# Set the color of the grid lines\nax.grid(color='#dcdcdc')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='#555555')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('#555555')\nax.spines['top'].set_color('#555555')\nax.spines['right'].set_color('#555555')\nax.spines['left'].set_color('#555555')\n\n# Set the color of the background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the grid\nax.grid(color='#dcdcdc')\n\n# Set the color of the labels\nax.set_xlabel('Decomposition IO Norm', color='#555555')\nax.set_ylabel('Accuracy', color='#555555')\n\n# Set the color of the title\nax.set_title('Dynamic Effect of Vocab on Zero Shot Accuracy', color='#555555')\n\n# Set the color of the legend\nax.legend(facecolor='#f0f0f0', edgecolor='#dcdcdc')\n\n# Set the color of the grid lines\nax.grid(color='#dcdcdc')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='#555555')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('#555555')\nax.spines['top'].set_color('#555555')\nax.spines['right'].set_color('#555555')\nax.spines['left'].set_color('#555555')\n\n# Set the color of the background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the grid\nax.grid(color='#dcdcdc')\n\n# Set the color of the labels\nax.set_xlabel('Decomposition IO Norm', color='#555555')\nax.set_ylabel('Accuracy', color='#555555')\n\n# Set the color of the title\nax.set_title('Dynamic Effect of Vocab on Zero Shot Accuracy', color='#555555')\n\n# Set the color of the legend\nax.legend(facecolor='#f0f0f0', edgecolor='#dcdcdc')\n\n# Set the color of the grid lines\nax.grid(color='#dcdcdc')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='#555555')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('#555555')\nax.spines['top'].set_color('#555555')\nax.spines['right'].set_color('#555555')\nax.spines['left'].set_color('#555555')\n\n# Set the color of the background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the grid\nax.grid(color='#dcdcdc')\n\n# Set the color of the labels\nax.set_xlabel('Decomposition IO Norm', color='#555555')\nax.set_ylabel('Accuracy', color='#555555')\n\n# Set the color of the title\nax.set_title('Dynamic Effect of Vocab on Zero Shot Accuracy', color='#555555')\n\n# Set the color of the legend\nax.legend(facecolor='#f0f0f0', edgecolor='#dcdcdc')\n\n# Set the color of the grid lines\nax.grid(color='#dcdcdc')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='#555555')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('#555555')\nax.spines['top'].set_color('#555555')\nax.spines['right'].set_color('#555555')\nax.spines['left'].set_color('#555555')\n\n# Set the color of the background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the grid\nax.grid(color='#dcdcdc')\n\n# Set the color of the labels\nax.set_xlabel('Decomposition IO Norm', color='#555555')\nax.set_ylabel('Accuracy', color='#555555')\n\n# Set the color of the title\nax.set_title('Dynamic Effect of Vocab on Zero Shot Accuracy', color='#555555')\n\n# Set the color of the legend\nax.legend(facecolor='#f0f0f0', edgecolor='#dcdcdc')\n\n# Set the color of the grid lines\nax.grid(color='#dcdcdc')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='#555555')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('#555555')\nax.spines['top'].set_color('#555555')\nax.spines['right'].set_color('#555555')\nax.spines['left'].set_color('#555555')\n\n# Set the color of the background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the grid\nax.grid(color='#dcdcdc')\n\n# Set the color of the labels\nax.set_xlabel('Decomposition IO Norm', color='#555555')\nax.set_ylabel('Accuracy', color='#555555')\n\n# Set the color of the title\nax.set_title('Dynamic Effect of Vocab on Zero Shot Accuracy', color='#555555')\n\n# Set the color of the legend\nax.legend(facecolor='#f0f0f0', edgecolor='#dcdcdc')\n\n# Set the color of the grid lines\nax.grid(color='#dcdcdc')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='#555555')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('#555555')\nax.spines['top'].set_color('#555555')\nax.spines['right'].set_color('#555555')\nax.spines['left'].set_color('#555555')\n\n# Set the color of the background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the grid\nax.grid(color='#dcdcdc')\n\n# Set the color of the labels\nax.set_xlabel('Decomposition IO Norm', color='#555555')\nax.set_ylabel('Accuracy', color='#555555')\n\n# Set the color of the title\nax.set_title('Dynamic Effect of Vocab on Zero Shot Accuracy', color='#555555')\n\n# Set the color of the legend\nax.legend(facecolor='#f0f0f0', edgecolor='#dcdcdc')\n\n# Set the color of the grid lines\nax.grid(color='#dcdcdc')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='#555555')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('#555555')\nax.spines['top'].set_color('#555555')\nax.spines['right'].set_color('#555555')\nax.spines['left'].set_color('#555555')\n\n# Set the color of the background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the grid\nax.grid(color='#dcdcdc')\n\n# Set the color of the labels\nax.set_xlabel('Decomposition IO Norm', color='#555555')\nax.set_ylabel('Accuracy', color='#555555')\n\n# Set the color of the title\nax.set_title('Dynamic Effect of Vocab on Zero Shot Accuracy', color='#555555')\n\n# Set the color of the legend\nax.legend(facecolor='#f0f0f0', edgecolor='#dcdcdc')\n\n# Set the color of the grid lines\nax.grid(color='#dcdcdc')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='#555555')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('#555555')\nax.spines['top'].set_color('#555555')\nax.spines['right'].set_color('#555555')\nax.spines['left'].set_color('#555555')\n\n# Set the color of the background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the grid\nax.grid(color='#dcdcdc')\n\n# Set the color of the labels\nax.set_xlabel('Decomposition IO Norm', color='#555555')\nax.set_ylabel('Accuracy', color='#555555')\n\n# Set the color of the title\nax.set_title('Dynamic Effect of Vocab on Zero Shot Accuracy', color='#555555')\n\n# Set the color of the legend\nax.legend(facecolor='#f0f0f0', edgecolor='#dcdcdc')\n\n# Set the color of the grid lines\nax.grid(color='#dcdcdc')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='#555555')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('#555555')\nax.spines['top'].set_color('#555555')\nax.spines['right'].set_color('#555555')\nax.spines['left'].set_color('#555555')\n\n# Set the color of the background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the grid\nax.grid(color='#dcdcdc')\n\n# Set the color of the labels\nax.set_xlabel('Decomposition IO Norm', color='#555555')\nax.set_ylabel('Accuracy', color='#555555')\n\n# Set the color of the title\nax.set_title('Dynamic Effect of Vocab on Zero Shot Accuracy', color='#555555')\n\n# Set the color of the legend\nax.legend(facecolor='#f0f0f0', edgecolor='#dcdcdc')\n\n# Set the color of the grid lines\nax.grid(color='#dcdcdc')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='#555555')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('#555555')\nax.spines['top'].set_color('#555555')\nax.spines['right'].set_color('#555555')\nax.spines['left'].set_color('#555555')\n\n# Set the color of the background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the grid\nax.grid(color='#dcdcdc')\n\n# Set the color of the labels\nax.set_xlabel('Decomposition IO Norm', color='#555555')\nax.set_ylabel('Accuracy', color='#555555')\n\n# Set the color of the title\nax.set_title('Dynamic Effect of Vocab on Zero Shot Accuracy', color='#555555')\n\n# Set the color of the legend\nax.legend(facecolor='#f0f0f0', edgecolor='#dcdcdc')\n\n# Set the color of the grid lines\nax.grid(color='#dcdcdc')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='#555555')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('#555555')\nax.spines['top'].set_color('#555555')\nax.spines['right'].set_color('#555555')\nax.spines['left'].set_color('#555555')\n\n# Set the color of the background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the grid\nax.grid(color='#dcdcdc')\n\n# Set the color of the labels\nax.set_xlabel('Decomposition IO Norm', color='#555555')\nax.set_ylabel('Accuracy', color='#555555')\n\n# Set the color of the title\nax.set_title('Dynamic Effect of Vocab on Zero Shot Accuracy', color='#555555')\n\n# Set the color of the legend\nax.legend(facecolor='#f0f0f0', edgecolor='#dcdcdc')\n\n# Set the color of the grid lines\nax.grid(color='#dcdcdc')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='#555555')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('#555555')\nax.spines['top'].set_color('#555555')\nax.spines['right'].set_color('#555555')\nax.spines['left'].set_color('#555555')\n\n# Set the color of the background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the grid\nax.grid(color='#dcdcdc')\n\n# Set the color of the labels\nax.set_xlabel('Decomposition IO Norm', color='#555555')\nax.set_ylabel('Accuracy', color='#555555')\n\n# Set the color of the title\nax.set_title('Dynamic Effect of Vocab on Zero Shot Accuracy', color='#555555')\n\n# Set the color of the legend\nax.legend(facecolor='#f0f0f0', edgecolor='#dcdcdc')\n\n# Set the color of the grid lines\nax.grid(color='#dcdcdc')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='#555555')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('#555555')\nax.spines['top'].set_color('#555555')\nax.spines['right'].set_color('#555555')\nax.spines['left'].set_color('#555555')\n\n# Set the color of the background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the grid\nax.grid(color='#dcdcdc')\n\n# Set the color of the labels\nax.set_xlabel('Decomposition IO Norm', color='#555555')\nax.set_ylabel('Accuracy', color='#555555')\n\n# Set the color of the title\nax.set_title('Dynamic Effect of Vocab on Zero Shot Accuracy', color='#555555')\n\n# Set the color of the legend\nax.legend(facecolor='#f0f0f0', edgecolor='#dcdcdc')\n\n# Set the color of the grid lines\nax.grid(color='#dcdcdc')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='#555555')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('#555555')\nax.spines['top'].set_color('#555555')\nax.spines['right'].set_color('#555555')\nax.spines['left'].set_color('#555555')\n\n# Set the color of the background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the grid\nax.grid(color='#dcdcdc')\n\n# Set the color of the labels\nax.set_xlabel('Decomposition IO Norm', color='#555555')\nax.set_ylabel('Accuracy', color='#555555')\n\n# Set the color of the title\nax.set_title('Dynamic Effect of Vocab on Zero Shot Accuracy', color='#555555')\n\n# Set the color of the legend\nax.legend(facecolor='#f0f0f0', edgecolor='#dcdcdc')\n\n# Set the color of the grid lines\nax.grid(color='#dcdcdc')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='#555555')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('#555555')\nax.spines['top'].set_color('#555555')\nax.spines['right'].set_color('#555555')\nax.spines['left'].set_color('#555555')\n\n# Set the color of the background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the grid\nax.grid(color='#dcdcdc')\n\n# Set the color of the labels\nax.set_xlabel('Decomposition IO Norm', color='#555555')\nax.set_ylabel('Accuracy',"}
{"file": "dataset/ori_500/area_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the graph\nx = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ny_content = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10]\ny_organization = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10]\ny_language = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 4.0))\n\n# Plot the data\nax.plot(x, y_content, label='Content', color='blue')\nax.plot(x, y_organization, label='Organization', color='orange')\nax.plot(x, y_language, label='Language', color='green')\n\n# Set the title and labels\nax.set_title('Cumulative Performance Gain by Augmentation Level')\nax.set_xlabel('n')\nax.set_ylabel('Performance Gain (%)')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/area_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nyears = [1950, 1960, 1970, 1980, 1990, 2000, 2010]\npopulations = [1000, 1500, 2000, 3000, 4000, 5000, 6000]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data\nax.plot(years, populations, 'b-')\n\n# Set the title and labels\nax.set_title('World population')\nax.set_xlabel('Year')\nax.set_ylabel('Number of people (millions)')\n\n# Add a legend\nax.legend(['Africa', 'Americas', 'Asia', 'Europe', 'Oceania'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(7.0, 5.0))\n\n# Set the x-axis limits\nax.set_xlim([0, 60])\n\n# Set the y-axis limits\nax.set_ylim([0, 7])\n\n# Set the x-axis ticks\nax.set_xticks(range(0, 61, 10))\n\n# Set the y-axis ticks\nax.set_yticks(range(0, 8, 1))\n\n# Set the x-axis labels\nax.set_xticklabels(['0', '10', '20', '30', '40', '50', '60'])\n\n# Set the y-axis labels\nax.set_yticklabels(['0', '1', '2', '3', '4', '5', '6', '7'])\n\n# Set the title of the plot\nax.set_title('Player Performance')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', colors='black')\n\n# Set the color"}
{"file": "dataset/ori_500/bar_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Machine Learning Model Accuracy')\n\n# Set the x-axis label\nax.set_xlabel('Model')\n\n# Set the y-axis label\nax.set_ylabel('Accuracy (%)')\n\n# Define the data for the plot\nmodels = ['Which', 'What', 'How', 'Will', 'Are', 'Is', 'Choose', 'Select', 'Identify', 'Fill']\naccuracies = [55, 45, 35, 25, 15, 50, 40, 30, 20, 10]\n\n# Plot the data\nax.bar(models, accuracies, color='skyblue')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_100.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(15, 5))\n\n# Set the title of the plot\nax.set_title('Average Monthly Sales by Product Across Regions')\n\n# Create a bar chart with the sales data\nax.bar(['Product A', 'Product B', 'Product C', 'Product D', 'Product E'], [80, 60, 40, 20, 0], color='blue')\n\n# Add a horizontal line at y=50\nax.axhline(y=50, color='r', linestyle='-')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Set the background color of the plot\nax.set_facecolor('lavender')\n\n# Set the title of the plot\nax.set_title('Stock Price Prediction')\n\n# Set the x-axis label\nax.set_xlabel('length')\n\n# Set the y-axis label\nax.set_ylabel('price')\n\n# Set the x-axis limits\nax.set_xlim(0, 45)\n\n# Set the y-axis limits\nax.set_ylim(-1, 0.8)\n\n# Set the x-ticks\nax.set_xticks([0, 9, 19, 29, 39, 49])\n\n# Set the y-ticks\nax.set_yticks([-1, -0.75, -0.5, -0.25, 0, 0.25, 0.5, 0.75, 0.8])\n\n# Set the x-tick labels\nax.set_xticklabels(['0-9', '10-19', '20-29', '30-39', '40-49'])\n\n# Set the y-tick labels\nax.set_yticklabels(['-1.00', '-0.75', '-0.50', '-0.25', '0.00', '0.25', '0.50', '0.75', '0.80'])\n\n# Set the grid lines\nax.grid(True)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the plot area\nax.set_facecolor('lavender')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot title\nax.set_title('Stock Price Prediction', color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('length', color='black')\n\n# Set the color of the y-axis label\nax.set_ylabel('price', color='black')\n\n# Set the color of the x-tick labels\nax.set_xticklabels(['0-9', '10-19', '20-29', '30-39', '40-49'], color='black')\n\n# Set the color of the y-tick labels\nax.set_yticklabels(['-1.00', '-0.75', '-0.50', '-0.25', '0.00', '0.25', '0.50', '0.75', '0.80'], color='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the plot area\nax.set_facecolor('lavender')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot title\nax.set_title('Stock Price Prediction', color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('length', color='black')\n\n# Set the color of the y-axis label\nax.set_ylabel('price', color='black')\n\n# Set the color of the x-tick labels\nax.set_xticklabels(['0-9', '10-19', '20-29', '30-39', '40-49'], color='black')\n\n# Set the color of the y-tick labels\nax.set_yticklabels(['-1.00', '-0.75', '-0.50', '-0.25', '0.00', '0.25', '0.50', '0.75', '0.80'], color='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the plot area\nax.set_facecolor('lavender')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot title\nax.set_title('Stock Price Prediction', color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('length', color='black')\n\n# Set the color of the y-axis label\nax.set_ylabel('price', color='black')\n\n# Set the color of the x-tick labels\nax.set_xticklabels(['0-9', '10-19', '20-29', '30-39', '40-49'], color='black')\n\n# Set the color of the y-tick labels\nax.set_yticklabels(['-1.00', '-0.75', '-0.50', '-0.25', '0.00', '0.25', '0.50', '0.75', '0.80'], color='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the plot area\nax.set_facecolor('lavender')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot title\nax.set_title('Stock Price Prediction', color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('length', color='black')\n\n# Set the color of the y-axis label\nax.set_ylabel('price', color='black')\n\n# Set the color of the x-tick labels\nax.set_xticklabels(['0-9', '10-19', '20-29', '30-39', '40-49'], color='black')\n\n# Set the color of the y-tick labels\nax.set_yticklabels(['-1.00', '-0.75', '-0.50', '-0.25', '0.00', '0.25', '0.50', '0.75', '0.80'], color='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the plot area\nax.set_facecolor('lavender')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot title\nax.set_title('Stock Price Prediction', color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('length', color='black')\n\n# Set the color of the y-axis label\nax.set_ylabel('price', color='black')\n\n# Set the color of the x-tick labels\nax.set_xticklabels(['0-9', '10-19', '20-29', '30-39', '40-49'], color='black')\n\n# Set the color of the y-tick labels\nax.set_yticklabels(['-1.00', '-0.75', '-0.50', '-0.25', '0.00', '0.25', '0.50', '0.75', '0.80'], color='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the plot area\nax.set_facecolor('lavender')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot title\nax.set_title('Stock Price Prediction', color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('length', color='black')\n\n# Set the color of the y-axis label\nax.set_ylabel('price', color='black')\n\n# Set the color of the x-tick labels\nax.set_xticklabels(['0-9', '10-19', '20-29', '30-39', '40-49'], color='black')\n\n# Set the color of the y-tick labels\nax.set_yticklabels(['-1.00', '-0.75', '-0.50', '-0.25', '0.00', '0.25', '0.50', '0.75', '0.80'], color='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the plot area\nax.set_facecolor('lavender')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot title\nax.set_title('Stock Price Prediction', color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('length', color='black')\n\n# Set the color of the y-axis label\nax.set_ylabel('price', color='black')\n\n# Set the color of the x-tick labels\nax.set_xticklabels(['0-9', '10-19', '20-29', '30-39', '40-49'], color='black')\n\n# Set the color of the y-tick labels\nax.set_yticklabels(['-1.00', '-0.75', '-0.50', '-0.25', '0.00', '0.25', '0.50', '0.75', '0.80'], color='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the plot area\nax.set_facecolor('lavender')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot title\nax.set_title('Stock Price Prediction', color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('length', color='black')\n\n# Set the color of the y-axis label\nax.set_ylabel('price', color='black')\n\n# Set the color of the x-tick labels\nax.set_xticklabels(['0-9', '10-19', '20-29', '30-39', '40-49'], color='black')\n\n# Set the color of the y-tick labels\nax.set_yticklabels(['-1.00', '-0.75', '-0.50', '-0.25', '0.00', '0.25', '0.50', '0.75', '0.80'], color='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the plot area\nax.set_facecolor('lavender')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot title\nax.set_title('Stock Price Prediction', color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('length', color='black')\n\n# Set the color of the y-axis label\nax.set_ylabel('price', color='black')\n\n# Set the color of the x-tick labels\nax.set_xticklabels(['0-9', '10-19', '20-29', '30-39', '40-49'], color='black')\n\n# Set the color of the y-tick labels\nax.set_yticklabels(['-1.00', '-0.75', '-0.50', '-0.25', '0.00', '0.25', '0.50', '0.75', '0.80'], color='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the plot area\nax.set_facecolor('lavender')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot title\nax.set_title('Stock Price Prediction', color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('length', color='black')\n\n# Set the color of the y-axis label\nax.set_ylabel('price', color='black')\n\n# Set the color of the x-tick labels\nax.set_xticklabels(['0-9', '10-19', '20-29', '30-39', '40-49'], color='black')\n\n# Set the color of the y-tick labels\nax.set_yticklabels(['-1.00', '-0.75', '-0.50', '-0.25', '0.00', '0.25', '0.50', '0.75', '0.80'], color='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the plot area\nax.set_facecolor('lavender')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot title\nax.set_title('Stock Price Prediction', color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('length', color='black')\n\n# Set the color of the y-axis label\nax.set_ylabel('price', color='black')\n\n# Set the color of the x-tick labels\nax.set_xticklabels(['0-9', '10-19', '20-29', '30-39', '40-49'], color='black')\n\n# Set the color of the y-tick labels\nax.set_yticklabels(['-1.00', '-0.75', '-0.50', '-0.25', '0.00', '0.25', '0.50', '0.75', '0.80'], color='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the plot area\nax.set_facecolor('lavender')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot title\nax.set_title('Stock Price Prediction', color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('length', color='black')\n\n# Set the color of the y-axis label\nax.set_ylabel('price', color='black')\n\n# Set the color of the x-tick labels\nax.set_xticklabels(['0-9', '10-19', '20-29', '30-39', '40-49'], color='black')\n\n# Set the color of the y-tick labels\nax.set_yticklabels(['-1.00', '-0.75', '-0.50', '-0.25', '0.00', '0.25', '0.50', '0.75', '0.80'], color='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick marks\n"}
{"file": "dataset/ori_500/bar_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\nbeauty_data = [2.2, 11.2, 19.9]\nmovie_data = [3.0, 4.1, 5.1]\ntech_data = [-0.7, -0.5, -0.5]\nfinance_data = [19.7]\n\n# Create a figure and a set of subplots\nfig, axs = plt.subplots(1, 3, figsize=(10, 4))\n\n# Plot the data\naxs[0].bar(range(len(beauty_data)), beauty_data, color='blue')\naxs[1].bar(range(len(movie_data)), movie_data, color='red')\naxs[2].bar(range(len(tech_data)), tech_data, color='green')\n\n# Set the title of each subplot\naxs[0].set_title('Beauty')\naxs[1].set_title('MovieLens-1M')\naxs[2].set_title('Yelp')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nmodels = ['Bactrian-X', 'Lima-X', 'Bactrian-X', 'Lima-X']\nimprovement = [3.5, 2.3, 1.5, 0.8, 1.5, 1.3, -0.7, -0.9, -1.8, -3.9]\ncolors = ['blue', 'orange', 'green', 'brown', 'yellow']\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot the data\nax.bar(models, improvement, color=colors)\n\n# Set the title and labels\nax.set_title('ENDEFRRITES sampled')\nax.set_xlabel('Model')\nax.set_ylabel('Improvement [%]')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(7.0, 5.0))\n\n# Set the title of the plot\nax.set_title('Pheme F1-score')\n\n# Set the x-axis label\nax.set_xlabel('Pheme')\n\n# Set the y-axis label\nax.set_ylabel('F1-score')\n\n# Set the x-ticks\nax.set_xticks([0, 1, 2, 3, 4, 5, 6])\n\n# Set the x-tick labels\nax.set_xticklabels(['GCN', 'RvNN', 'Hyphen', 'GET', 'WSDMS', 'DELL'])\n\n# Set the y-ticks\nax.set_yticks(np.arange(0.75, 0.95, 0.05))\n\n# Set the y-tick labels\nax.set_yticklabels(['0.75', '0.80', '0.85', '0.90'])\n\n# Set the grid lines\nax.grid(True)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='minor', labelsize=8)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='minor', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='minor', labelsize=8)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='minor', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='minor', labelsize=8)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='minor', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='minor', labelsize=8)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='minor', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='minor', labelsize=8)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='minor', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='minor', labelsize=8)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='minor', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='minor', labelsize=8)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='minor', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='minor', labelsize=8)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='minor', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='minor', labelsize=8)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='minor', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='minor', labelsize=8)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='minor', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='minor', labelsize=8)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='minor', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='minor', labelsize=8)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='minor', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='minor', labelsize=8)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='minor', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='minor', labelsize=8)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='minor', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='minor', labelsize=8)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='minor', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='minor', labelsize=8)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='minor', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='minor', labelsize=8)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='minor', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='minor', labelsize=8)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='minor', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='minor', labelsize=8)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='minor', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='minor', labelsize=8)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='minor', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='minor', labelsize=8)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='minor', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='minor', labelsize=8)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='minor', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='minor', labelsize=8)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='minor', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='minor', labelsize=8)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='minor', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='minor', labelsize=8)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='minor', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='minor', labelsize=8)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='minor', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='minor', labelsize=8)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='minor', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='minor', labelsize=8)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='minor', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='minor', labelsize=8)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='minor', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='minor', labelsize=8)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='minor', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='minor', labelsize=8)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='minor', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n"}
{"file": "dataset/ori_500/bar_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Set the title of the plot\nax.set_title('Human Labeling and Agreement Bias Checking')\n\n# Define the data for the plots\nx = ['1', '2', '3', '4', '5', '6']\ny1 = [20, 30, 40, 50, 60, 70]\ny2 = [10, 20, 30, 40, 50, 60]\ny3 = [5, 10, 15, 20, 25, 30]\ny4 = [15, 25, 35, 45, 55, 65]\ny5 = [25, 35, 45, 55, 65, 75]\ny6 = [35, 45, 55, 65, 75, 85]\n\n# Create the plots\nax.plot(x, y1, label='Score 1')\nax.plot(x, y2, label='Score 2')\nax.plot(x, y3, label='Score 3')\nax.plot(x, y4, label='Score 4')\nax.plot(x, y5, label='Score 5')\nax.plot(x, y6, label='Score 6')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_16.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\nax.set_title('Resonance Preference Plot for rich-context')\n\n# Create a bar chart\nax.bar(['s1', 's2'], [700, 800], color='red')\nax.set_xlabel('Count')\nax.set_ylabel('Score')\n\n# Create a scatter plot\nax.scatter([1, 2, 3], [500, 600, 700], color='blue')\n\n# Create a line plot\nax.plot([1, 2, 3], [400, 500, 600], color='green')\n\n# Create a pie chart\nax.pie([100, 200, 300], labels=['O', 'T', 'P'], colors=['cyan', 'yellow', 'pink'])\n\n# Create a histogram\nax.hist([100, 200, 300, 400, 500, 600, 700, 800], bins=10, color='orange')\n\n# Create a box plot\nax.boxplot([100, 200, 300, 400, 500, 600, 700, 800])\n\n# Create a violin plot\nax.violinplot([100, 200, 300, 400, 500, 600, 700, 800])\n\n# Create a heatmap\nax.imshow([[100, 200, 300], [400, 500, 600], [700, 800, 900]], cmap='hot')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_17.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nbrands = ['LLaMA-2-7B', 'Evol-Instruct-70k', 'Evol-Instruct-AlpaGasus-1k', 'Evol-Instruct-1k-longest', 'LIMA-1k']\naccuracies = [53.0, 51.3, 56.4, 56.4, 56.4]\ntasks = ['ARC', 'MMLU', 'TruthfulQ&A', 'Winograde', 'Average']\nscores = [73.1, 70.4, 73.2, 72.8, 71.8]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 4.0))\n\n# Plot the data\nax.barh(brands, accuracies, color='skyblue')\nax.barh(tasks, scores, color='pink')\n\n# Set the title and labels\nax.set_title('AI Model Accuracy Comparison')\nax.set_xlabel('Accuracy (%)')\nax.set_ylabel('Brands')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_18.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Set the x-axis limits\nax.set_xlim(35, 75)\n\n# Set the y-axis limits\nax.set_ylim(35, 75)\n\n# Set the x-axis ticks\nax.set_xticks(range(35, 80, 5))\n\n# Set the y-axis ticks\nax.set_yticks(range(35, 80, 5))\n\n# Set the x-axis labels\nax.set_xlabel('Time (s)')\n\n# Set the y-axis labels\nax.set_ylabel('Speed (mph)')\n\n# Set the title of the plot\nax.set_title('Car Performance Comparison')\n\n# Create a bar chart for each car\nax.bar(['GSM8K', 'MNLI', 'race@High'], [45, 55, 65], color='blue')\nax.bar(['GSM8K', 'MNLI', 'race@High'], [40, 50, 60], color='cyan')\nax.bar(['GSM8K', 'MNLI', 'race@High'], [35, 45, 55], color='darkblue')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_19.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('DLMA VS. LLAMA - 2021')\n\n# Set the labels for the x-axis and y-axis\nax.set_xlabel('Match')\nax.set_ylabel('Win Percentage')\n\n# Define the data for the bar chart\nmatches = ['DLMA-7B VS. LLAMa-7B', 'DLMA-7B VS. CD-7B', 'DLMA-7B VS. RLAIF-7B', 'DLMA-7B VS. RLCD-7B', 'DLMA-13B VS. LLAMa-13B', 'DLMA-13B VS. CD-13B', 'DLMA-13B VS. RLAIF-13B', 'DLMA-13B VS. RLCD-13B']\nwin_percentages = [60.2, 60.2, 46.8, 34.7, 62.5, 62.5, 62.5, 49.2]\nloss_percentages = [28.8, 28.8, 39.1, 39.1, 27.7, 27.7, 27.7, 36.3]\n\n# Create a bar chart with the win percentages\nbars = ax.bar(matches, win_percentages, color='lightgreen')\n\n# Add the loss percentages as a second bar chart on top of the first one\nfor i, bar in enumerate(bars):\n    ax.text(bar.get_x() + bar.get_width()/2, bar.get_height(), str(loss_percentages[i])+'%', ha='center', va='bottom', color='red')\n\n# Set the color of the bars\nfor bar in bars:\n    bar.set_color('lightgreen')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'DLMA win', ha='center', va='center', color='green')\nax.text(0.5, 0.5, 'DLMA lose', ha='center', va='center', color='red')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'DLMA win', ha='center', va='center', color='blue')\nax.text(0.5, 0.5, 'DLMA lose', ha='center', va='center', color='red')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'DLMA win', ha='center', va='center', color='blue')\nax.text(0.5, 0.5, 'DLMA lose', ha='center', va='center', color='red')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'DLMA win', ha='center', va='center', color='blue')\nax.text(0.5, 0.5, 'DLMA lose', ha='center', va='center', color='red')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'DLMA win', ha='center', va='center', color='blue')\nax.text(0.5, 0.5, 'DLMA lose', ha='center', va='center', color='red')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'DLMA win', ha='center', va='center', color='blue')\nax.text(0.5, 0.5, 'DLMA lose', ha='center', va='center', color='red')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'DLMA win', ha='center', va='center', color='blue')\nax.text(0.5, 0.5, 'DLMA lose', ha='center', va='center', color='red')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'DLMA win', ha='center', va='center', color='blue')\nax.text(0.5, 0.5, 'DLMA lose', ha='center', va='center', color='red')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'DLMA win', ha='center', va='center', color='blue')\nax.text(0.5, 0.5, 'DLMA lose', ha='center', va='center', color='red')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'DLMA win', ha='center', va='center', color='blue')\nax.text(0.5, 0.5, 'DLMA lose', ha='center', va='center', color='red')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'DLMA win', ha='center', va='center', color='blue')\nax.text(0.5, 0.5, 'DLMA lose', ha='center', va='center', color='red')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'DLMA win', ha='center', va='center', color='blue')\nax.text(0.5, 0.5, 'DLMA lose', ha='center', va='center', color='red')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'DLMA win', ha='center', va='center', color='blue')\nax.text(0.5, 0.5, 'DLMA lose', ha='center', va='center', color='red')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'DLMA win', ha='center', va='center', color='blue')\nax.text(0.5, 0.5, 'DLMA lose', ha='center', va='center', color='red')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'DLMA win', ha='center', va='center', color='blue')\nax.text(0.5, 0.5, 'DLMA lose', ha='center', va='center', color='red')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'DLMA win', ha='center', va='center', color='blue')\nax.text(0.5, 0.5, 'DLMA lose', ha='center', va='center', color='red')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'DLMA win', ha='center', va='center', color='blue')\nax.text(0.5, 0.5, 'DLMA lose', ha='center', va='center', color='red')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'DLMA win', ha='center', va='center', color='blue')\nax.text(0.5, 0.5, 'DLMA lose', ha='center', va='center', color='red')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'DLMA win', ha='center', va='center', color='blue')\nax.text(0.5, 0.5, 'DLMA lose', ha='center', va='center', color='red')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'DLMA win', ha='center', va='center', color='blue')\nax.text(0.5, 0.5, 'DLMA lose', ha='center', va='center', color='red')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'DLMA win', ha='center', va='center', color='blue')\nax.text(0.5, 0.5, 'DLMA lose', ha='center', va='center', color='red')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'DLMA win', ha='center', va='center', color='blue')\nax.text(0.5, 0.5, 'DLMA lose', ha='center', va='center', color='red')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'DLMA win', ha='center', va='center', color='blue')\nax.text(0.5, 0.5, 'DLMA lose', ha='center', va='center', color='red')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'DLMA win', ha='center', va='center', color='blue')\nax.text(0.5, 0.5, 'DLMA lose', ha='center', va='center', color='red')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'DLMA win', ha='center', va='center', color='blue')\nax.text(0.5, 0.5, 'DLMA lose', ha='center', va='center', color='red')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'DLMA win', ha='center', va='center', color='blue')\nax.text(0.5, 0.5, 'DLMA lose', ha='center', va='center', color='red')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'DLMA win', ha='center', va='center', color='blue')\nax.text(0.5, 0.5, 'DLMA lose', ha='center', va='center', color='red')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'DLMA win', ha='center', va='center', color='blue')\nax.text(0.5, 0.5, 'DLMA lose', ha='center', va='center', color='red')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'DLMA win', ha='center', va='center', color='blue')\nax.text(0.5, 0.5, 'DLMA lose', ha='center', va='center', color='red')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'DLMA win', ha='center', va='center', color='blue')\nax.text(0.5, 0.5, 'DLMA lose', ha='center', va='center', color='red')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'DLMA win', ha='center', va='center', color='blue')\nax.text(0.5, 0.5, 'DLMA lose', ha='center', va='center', color='red')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'DLMA win', ha='center', va='center', color='blue')\nax.text(0.5, 0.5, 'DLMA lose', ha='center', va='center', color='red')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'DLMA win', ha='center', va='center', color='blue')\nax.text(0.5, 0.5, 'DLMA lose', ha='center', va='center', color='red')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'DLMA win', ha='center', va='center', color='blue')\nax.text(0.5, 0.5, 'DLMA lose', ha='center', va='center', color='red')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'DLMA win', ha='center', va='center', color='blue')\nax.text(0.5, 0.5, 'DLMA lose', ha='center', va='center', color='red')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'DLMA win', ha='center', va='center', color='blue')\nax.text(0.5, 0.5, 'DLMA lose', ha='center', va='center', color='red')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'DLMA win', ha='center', va='center', color='blue')\nax.text(0.5, 0.5, 'DLMA lose', ha='center', va='center', color='red')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'DLMA win', ha='center', va='center', color='blue')\nax.text(0.5, 0.5, 'DLMA lose', ha='center', va='center', color='red')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'DLMA win', ha='center', va='center', color='blue')\nax.text(0.5, 0.5, 'DLMA lose', ha='center', va='center', color='red')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'DLMA win', ha='center', va='center', color='blue')\nax.text(0.5, 0.5, 'DLMA lose', ha='center', va='center', color='red')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'DLMA win', ha='center', va='center', color='blue')\nax.text(0.5, 0.5, 'DLMA lose', ha='center', va='center', color='red')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'DLMA win', ha='center', va='center', color='blue')\nax.text(0.5, 0.5, 'DLMA lose', ha='center', va='center', color='red')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'DLMA win', ha='center', va='center', color='blue')\nax.text(0.5, 0.5, 'DLMA lose', ha='center', va='center', color='red')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'DLMA win', ha='center', va='center', color='blue')\nax.text(0.5, 0.5, 'DLMA lose', ha='center', va='center', color='red')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'DLMA win', ha='center', va='center', color='blue')\nax.text(0.5, 0.5, 'DLMA lose', ha='center', va='center', color='red')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'DLMA win', ha='center', va='center', color='blue')\nax.text(0.5, 0.5, 'DLMA lose', ha='center', va='center', color='red')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'DLMA win', ha='center', va='center', color='blue')\nax.text(0.5, 0.5, 'DLMA lose', ha='center', va='center', color='red')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'DLMA win', ha='center', va='center', color='blue')\nax.text(0.5, 0.5, 'DLMA lose', ha='center', va='center', color='red')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'DLMA win', ha='center', va='center', color='blue')\nax.text(0.5, 0.5, 'DLMA lose', ha='center', va='center', color='red')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'DLMA win', ha='center', va='center', color='blue')\nax.text(0.5, 0.5, 'DLMA lose', ha='center', va='center', color='red')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'DLMA win', ha='center', va='center', color='blue')\nax.text(0.5, 0.5, 'DLMA lose', ha='center', va='center', color='red')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'DLMA win', ha='center', va='center', color='blue')\nax.text(0.5, 0.5, 'DLMA lose', ha='center', va='center', color='red')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'DLMA win', ha='center', va='center', color='blue')\nax.text(0.5, 0.5, 'DLMA lose', ha='center', va='center', color='red')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'DLMA win', ha='center', va='center', color='blue')\nax.text(0.5, 0.5, 'DLMA lose', ha='center', va='center', color='red')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'DLMA win', ha='center', va='center', color='blue')\nax.text(0.5, 0.5, 'DLMA lose', ha='center', va='center', color='red')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'DLMA win', ha='center', va='center', color='"}
{"file": "dataset/ori_500/bar_2.pdf", "response": "import matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(6.0, 3.0))\n\n# Set the title of the plot\nax.set_title('Gait Distribution Over Time: Policy ORC=111')\n\n# Set the x-axis label\nax.set_xlabel('Time (s)')\n\n# Set the y-axis label\nax.set_ylabel('Percentage of Experiments')\n\n# Define the data for the plot\nx = [0, 10, 20, 30, 40]\ny = [0.5, 0.7, 0.8, 0.9, 0.95]\n\n# Plot the data\nax.plot(x, y, 'o-')\n\n# Add a legend\nax.legend(['trot', 'pace', 'bound', 'pronk', 'transition'], loc='upper left')\n\n# Set the color of the bars\nbar_colors = ['green', 'red', 'purple', 'brown', 'grey']\n\n# Add bars to the plot\nfor i in range(len(x)):\n    ax.barh(i, 0.1, color=bar_colors[i])\n\n# Set the limits of the y-axis\nax.set_ylim(-1, len(x))\n\n# Display the plot\nplt.show()"}
{"file": "dataset/ori_500/bar_20.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Set the title of the plot\nax.set_title('Top 100 Games by Player Count')\n\n# Set the labels for the x-axis\nax.set_xlabel('Player Count')\n\n# Set the labels for the y-axis\nax.set_ylabel('Game Name')\n\n# Set the data for the bars\nx = [68, 82, 68, 72, 68]\ny = ['LIMA', 'Vicuna', 'Koala', 'Wizardlm', 'Self-Instruct']\nwidth = 0.5\n\n# Create the bar chart\nbars = ax.barh(y, x, width, color='skyblue')\n\n# Add the player count values on top of each bar\nfor bar in bars:\n    width = bar.get_width()\n    ax.text(width, bar.get_y() + bar.get_height()/2, round(width, 2), va='center')\n\n# Set the color of the bars\ncolors = ['lightblue', 'lightblue', 'lightblue', 'lightblue', 'lightblue']\nfor bar, color in zip(bars, colors):\n    bar.set_color(color)\n\n# Set the color of the background\nax.set_facecolor('lightgrey')\n\n# Set the color of the grid lines\nax.grid(True, color='lightgrey')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the text\nax.text(0, 0, 'AP-1kL wins', color='blue')\nax.text(0, 1, 'Tie', color='purple')\nax.text(0, 2, 'AG-1k wins', color='silver')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_21.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the charts\nbenefits_data = [14.8, 29.6, 29.6, 18.5, 8.4, 9.0]\nreliability_data = [9.4, 24.1, 24.1, 40.7, 27.8, 9.3]\nsecurity_data = [8.3, 14.8, 14.8, 40.7, 16.7, 9.3]\nprivacy_data = [24.1, 29.6, 29.6, 20.4, 16.7, 9.3]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot the data\nax.bar(range(len(benefits_data)), benefits_data, color='red')\nax.bar(range(len(reliability_data)), reliability_data, color='orange')\nax.bar(range(len(security_data)), security_data, color='silver')\nax.bar(range(len(privacy_data)), privacy_data, color='blue')\n\n# Set the labels and title\nax.set_xlabel('Time (in seconds)')\nax.set_ylabel('Percentage')\nax.set_title('Eye Movement')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_22.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(6.0, 10.0))\n\n# Set the title of the plot\nax.set_title('Stock Market Analysis')\n\n# Set the x-axis label\nax.set_xlabel('Rotation Angle (\u00b0)')\n\n# Set the y-axis label\nax.set_ylabel('Rate of Gain Change (%)')\n\n# Set the x-ticks\nax.set_xticks(np.arange(-150, 151, 30))\n\n# Set the y-ticks\nax.set_yticks(np.arange(-20, 41, 10))\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\nax.spines['right'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\n"}
{"file": "dataset/ori_500/bar_23.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(9.0, 5.0))\n\n# Set the title of the plot\nax.set_title('Ratings of Language Models on a Scale from 1-4')\n\n# Set the x-axis label\nax.set_xlabel('Language Models')\n\n# Set the y-axis label\nax.set_ylabel('Ratings')\n\n# Define the data for the bar chart\nx = ['GPT4', 'GPT-few-shot', 'GPT3.5', 'StarCoder', 'Code Llama', 'NCL']\ny = [3.2, 2.8, 2.5, 2.2, 1.8, 1.5]\n\n# Create a bar chart\nax.bar(x, y, color='blue')\n\n# Add a horizontal line at y=3.5\nax.axhline(y=3.5, color='orange', linestyle='-')\n\n# Add a horizontal line at y=3.0\nax.axhline(y=3.0, color='orange', linestyle='-')\n\n# Add a horizontal line at y=2.5\nax.axhline(y=2.5, color='orange', linestyle='-')\n\n# Add a horizontal line at y=2.0\nax.axhline(y=2.0, color='orange', linestyle='-')\n\n# Add a horizontal line at y=1.5\nax.axhline(y=1.5, color='orange', linestyle='-')\n\n# Add a horizontal line at y=1.0\nax.axhline(y=1.0, color='orange', linestyle='-')\n\n# Add a horizontal line at y=0.5\nax.axhline(y=0.5, color='orange', linestyle='-')\n\n# Add a horizontal line at y=0.0\nax.axhline(y=0.0, color='orange', linestyle='-')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_24.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nmodels = ['Majority', 'Flan-T5', 'GPT-3.5', 'GPT-4', 'Wizard13b', 'Vicuna13b', 'Mistral17b']\naccuracies = [0.302, 0.601, 0.468, 0.653, 0.384, 0.379, 0.364]\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(8.0, 4.0))\nax.bar(models, accuracies, color='blue')\n\n# Set the title and labels\nax.set_title('Model Accuracy')\nax.set_xlabel('Models')\nax.set_ylabel('Accuracy')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_25.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 4.0))\n\n# Set the background color of the plot\nax.set_facecolor('white')\n\n# Set the title of the plot\nax.set_title('GPT4-as-a-judge')\n\n# Set the x-axis label\nax.set_xlabel('Time (s)')\n\n# Set the y-axis label\nax.set_ylabel('Voltage (V)')\n\n# Set the x-ticks\nax.set_xticks([0, 1, 2, 3, 4])\n\n# Set the y-ticks\nax.set_yticks([0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100])\n\n# Set the x-tick labels\nax.set_xticklabels(['0', '1', '2', '3', '4'])\n\n# Set the y-tick labels\nax.set_yticklabels(['0', '10', '20', '30', '40', '50', '60', '70', '80', '90', '100'])\n\n# Set the grid\nax.grid(True)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='minor', labelsize=8)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='minor', colors='gray')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', direction='inout')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', length=5)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', pad=5)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', rotation=0)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', zorder=1)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', bottom=True)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', top=False)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', left=True)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', right=False)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', labelleft=True)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', labelright=False)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', labelbottom=True)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', labeltop=False)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', direction='inout')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', length=5)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', pad=5)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', rotation=0)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', zorder=1)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', bottom=True)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', top=False)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', left=True)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', right=False)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', labelleft=True)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', labelright=False)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', labelbottom=True)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', labeltop=False)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', direction='inout')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', length=5)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', pad=5)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', rotation=0)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', zorder=1)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', bottom=True)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', top=False)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', left=True)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', right=False)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', labelleft=True)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', labelright=False)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', labelbottom=True)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', labeltop=False)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', direction='inout')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', length=5)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', pad=5)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', rotation=0)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', zorder=1)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', bottom=True)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', top=False)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', left=True)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', right=False)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', labelleft=True)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', labelright=False)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', labelbottom=True)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', labeltop=False)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', direction='inout')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', length=5)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', pad=5)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', rotation=0)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', zorder=1)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', bottom=True)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', top=False)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', left=True)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', right=False)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', labelleft=True)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', labelright=False)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', labelbottom=True)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', labeltop=False)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', direction='inout')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', length=5)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', pad=5)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', rotation=0)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', zorder=1)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', bottom=True)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', top=False)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', left=True)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', right=False)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', labelleft=True)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', labelright=False)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', labelbottom=True)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', labeltop=False)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', direction='inout')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', length=5)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', pad=5)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', rotation=0)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', zorder=1)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', bottom=True)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', top=False)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', left=True)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', right=False)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', labelleft=True)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', labelright=False)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', labelbottom=True)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', labeltop=False)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', direction='inout')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', length=5)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', pad=5)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', rotation=0)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', zorder=1)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', bottom=True)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', top=False)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', left=True)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', right=False)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', labelleft=True)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', labelright=False)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', labelbottom=True)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', labeltop=False)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', direction='inout')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', length=5)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', pad=5)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', rotation=0)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', zorder=1)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', bottom=True)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', top=False)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', left=True)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', right=False)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', labelleft=True)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', labelright=False)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', labelbottom=True)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', labeltop=False)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', direction='inout')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', length=5)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', pad=5)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', rotation=0)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', zorder=1)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', bottom=True)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', top=False)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', left=True)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both',"}
{"file": "dataset/ori_500/bar_26.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nemotions = ['Ang', 'Ct', 'Dis', 'Fea', 'Joy', 'Ntr', 'Sad', 'Sur']\nsentiments = [320, 150, 200, 180, 220, 370, 190, 100]\ncolors = ['red', 'green', 'gray', 'orange', 'yellow', 'blue', 'cyan', 'magenta']\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\nax.bar(emotions, sentiments, color=colors)\n\n# Set the title and labels\nax.set_title('Sentiment Analysis of Emotions')\nax.set_xlabel('Emotions')\nax.set_ylabel('Sentiment Score')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_27.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\nx = [0, 0.2, 0.4, 0.6, 0.8, 1]\ny1 = [0.5, 0.7, 0.9, 0.8, 0.7, 0.6]\ny2 = [0.3, 0.5, 0.7, 0.6, 0.5, 0.4]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 3.0))\n\n# Plot the data\nax.plot(x, y1, 'b-', label='Success')\nax.plot(x, y2, 'r-', label='Occupancy Error')\n\n# Add labels and title\nax.set_xlabel('Percentage of Total Trials')\nax.set_ylabel('Probability of Success')\nax.set_title('Success Probability vs Occupancy Error')\n\n# Add legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_28.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 5.0))\n\n# Set the title of the plot\nax.set_title('Transmission Delay (ms)')\n\n# Set the x-axis label\nax.set_xlabel('Datasets')\n\n# Set the y-axis label\nax.set_ylabel('Transmission Delay (ms)')\n\n# Set the x-ticks\nax.set_xticks([1, 2, 3, 4])\n\n# Set the x-tick labels\nax.set_xticklabels(['VOC 2012', 'DEEPJSCC w/ ofdm', 'OURS', 'COCO 2017'])\n\n# Set the y-ticks\nax.set_yticks([0, 1, 2, 3, 4, 5])\n\n# Set the y-tick labels\nax.set_yticklabels(['0', '1', '2', '3', '4', '5'])\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'JPEG', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, color='white')\nax.text(0.5, 0.5, 'DEEPJSCC w/ ofdm', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, color='white')\nax.text(0.5, 0.5, 'OURS', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, color='white')\n\n# Set the color of the bars\nax.bar([1, 2, 3, 4], [3.5, 2.5, 1.5, 0.5], color='blue')\n\n# Set the color of the scatter plots\nax.scatter([1, 2, 3, 4], [3.5, 2.5, 1.5, 0.5], color='red')\n\n# Set the color of the rectangles\nax.add_patch(plt.Rectangle((0.5, 0.5), 0.5, 0.5, color='green'))\n\n# Set the color of the lines\nax.plot([1, 2, 3, 4], [3.5, 2.5, 1.5, 0.5], color='purple')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'JPEG', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, color='white')\nax.text(0.5, 0.5, 'DEEPJSCC w/ ofdm', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, color='white')\nax.text(0.5, 0.5, 'OURS', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, color='white')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_29.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Restaurant Menu')\n\n# Set the x-axis label\nax.set_xlabel('PDEs')\n\n# Set the y-axis label\nax.set_ylabel('Log L2')\n\n# Define the data for the plot\nx = ['Waves', 'Diffusion', 'Heat', 'Poison', 'Burgers', 'N-S']\ny = [1.0, 1.5, 1.2, 1.3, 1.4, 1.6]\n\n# Define the colors for the bars\ncolors = ['blue', 'red', 'orange', 'green', 'purple', 'brown']\n\n# Plot the bars\nbars = ax.bar(x, y, color=colors)\n\n# Add labels to the bars\nfor bar in bars:\n    height = bar.get_height()\n    ax.annotate('{}'.format(height),\n                xy=(bar.get_x() + bar.get_width() / 2, height),\n                xytext=(0, 3),  # 3 points vertical offset\n                textcoords=\"offset points\",\n                ha='center', va='bottom')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 3.0))\n\n# Set the title of the plot\nax.set_title('Models')\n\n# Add a rectangle for each model\nmodels = ['w/o DaQNR', 'w/o CPRN', 'w/o QCN', 'Full model']\nfor i, model in enumerate(models):\n    ax.add_patch(plt.Rectangle((i*2, 0), 2, 1, color='gold'))\n\n# Add a rectangle for the live model\nax.add_patch(plt.Rectangle((8, 0), 2, 1, color='blue'))\n\n# Add a rectangle for the SROCC model\nax.add_patch(plt.Rectangle((10, 0), 2, 1, color='red'))\n\n# Add a rectangle for the CSIQ model\nax.add_patch(plt.Rectangle((12, 0), 2, 1, color='green'))\n\n# Add a rectangle for the TID2013 model\nax.add_patch(plt.Rectangle((14, 0), 2, 1, color='orange'))\n\n# Add a rectangle for the LIVE-M model\nax.add_patch(plt.Rectangle((16, 0), 2, 1, color='cyan'))\n\n# Add a rectangle for the LIVE model\nax.add_patch(plt.Rectangle((18, 0), 2, 1, color='purple'))\n\n# Add a rectangle for the SROCC model\nax.add_patch(plt.Rectangle((20, 0), 2, 1, color='brown'))\n\n# Add a rectangle for the CSIQ model\nax.add_patch(plt.Rectangle((22, 0), 2, 1, color='pink'))\n\n# Add a rectangle for the TID2013 model\nax.add_patch(plt.Rectangle((24, 0), 2, 1, color='yellow'))\n\n# Add a rectangle for the LIVE-M model\nax.add_patch(plt.Rectangle((26, 0), 2, 1, color='grey'))\n\n# Add a rectangle for the LIVE model\nax.add_patch(plt.Rectangle((28, 0), 2, 1, color='black'))\n\n# Add a rectangle for the SROCC model\nax.add_patch(plt.Rectangle((30, 0), 2, 1, color='white'))\n\n# Add a rectangle for the CSIQ model\nax.add_patch(plt.Rectangle((32, 0), 2, 1, color='silver'))\n\n# Add a rectangle for the TID2013 model\nax.add_patch(plt.Rectangle((34, 0), 2, 1, color='maroon'))\n\n# Add a rectangle for the LIVE-M model\nax.add_patch(plt.Rectangle((36, 0), 2, 1, color='navy'))\n\n# Add a rectangle for the LIVE model\nax.add_patch(plt.Rectangle((38, 0), 2, 1, color='olive'))\n\n# Add a rectangle for the SROCC model\nax.add_patch(plt.Rectangle((40, 0), 2, 1, color='lime'))\n\n# Add a rectangle for the CSIQ model\nax.add_patch(plt.Rectangle((42, 0), 2, 1, color='teal'))\n\n# Add a rectangle for the TID2013 model\nax.add_patch(plt.Rectangle((44, 0), 2, 1, color='aqua'))\n\n# Add a rectangle for the LIVE-M model\nax.add_patch(plt.Rectangle((46, 0), 2, 1, color='fuchsia'))\n\n# Add a rectangle for the LIVE model\nax.add_patch(plt.Rectangle((48, 0), 2, 1, color='silver'))\n\n# Add a rectangle for the SROCC model\nax.add_patch(plt.Rectangle((50, 0), 2, 1, color='maroon'))\n\n# Add a rectangle for the CSIQ model\nax.add_patch(plt.Rectangle((52, 0), 2, 1, color='navy'))\n\n# Add a rectangle for the TID2013 model\nax.add_patch(plt.Rectangle((54, 0), 2, 1, color='olive'))\n\n# Add a rectangle for the LIVE-M model\nax.add_patch(plt.Rectangle((56, 0), 2, 1, color='lime'))\n\n# Add a rectangle for the LIVE model\nax.add_patch(plt.Rectangle((58, 0), 2, 1, color='teal'))\n\n# Add a rectangle for the SROCC model\nax.add_patch(plt.Rectangle((60, 0), 2, 1, color='aqua'))\n\n# Add a rectangle for the CSIQ model\nax.add_patch(plt.Rectangle((62, 0), 2, 1, color='fuchsia'))\n\n# Add a rectangle for the TID2013 model\nax.add_patch(plt.Rectangle((64, 0), 2, 1, color='silver'))\n\n# Add a rectangle for the LIVE-M model\nax.add_patch(plt.Rectangle((66, 0), 2, 1, color='maroon'))\n\n# Add a rectangle for the LIVE model\nax.add_patch(plt.Rectangle((68, 0), 2, 1, color='navy'))\n\n# Add a rectangle for the SROCC model\nax.add_patch(plt.Rectangle((70, 0), 2, 1, color='olive'))\n\n# Add a rectangle for the CSIQ model\nax.add_patch(plt.Rectangle((72, 0), 2, 1, color='lime'))\n\n# Add a rectangle for the TID2013 model\nax.add_patch(plt.Rectangle((74, 0), 2, 1, color='teal'))\n\n# Add a rectangle for the LIVE-M model\nax.add_patch(plt.Rectangle((76, 0), 2, 1, color='aqua'))\n\n# Add a rectangle for the LIVE model\nax.add_patch(plt.Rectangle((78, 0), 2, 1, color='fuchsia'))\n\n# Add a rectangle for the SROCC model\nax.add_patch(plt.Rectangle((80, 0), 2, 1, color='silver'))\n\n# Add a rectangle for the CSIQ model\nax.add_patch(plt.Rectangle((82, 0), 2, 1, color='maroon'))\n\n# Add a rectangle for the TID2013 model\nax.add_patch(plt.Rectangle((84, 0), 2, 1, color='navy'))\n\n# Add a rectangle for the LIVE-M model\nax.add_patch(plt.Rectangle((86, 0), 2, 1, color='olive'))\n\n# Add a rectangle for the LIVE model\nax.add_patch(plt.Rectangle((88, 0), 2, 1, color='lime'))\n\n# Add a rectangle for the SROCC model\nax.add_patch(plt.Rectangle((90, 0), 2, 1, color='teal'))\n\n# Add a rectangle for the CSIQ model\nax.add_patch(plt.Rectangle((92, 0), 2, 1, color='aqua'))\n\n# Add a rectangle for the TID2013 model\nax.add_patch(plt.Rectangle((94, 0), 2, 1, color='fuchsia'))\n\n# Add a rectangle for the LIVE-M model\nax.add_patch(plt.Rectangle((96, 0), 2, 1, color='silver'))\n\n# Add a rectangle for the LIVE model\nax.add_patch(plt.Rectangle((98, 0), 2, 1, color='maroon'))\n\n# Add a rectangle for the SROCC model\nax.add_patch(plt.Rectangle((100, 0), 2, 1, color='navy'))\n\n# Add a rectangle for the CSIQ model\nax.add_patch(plt.Rectangle((102, 0), 2, 1, color='olive'))\n\n# Add a rectangle for the TID2013 model\nax.add_patch(plt.Rectangle((104, 0), 2, 1, color='lime'))\n\n# Add a rectangle for the LIVE-M model\nax.add_patch(plt.Rectangle((106, 0), 2, 1, color='teal'))\n\n# Add a rectangle for the LIVE model\nax.add_patch(plt.Rectangle((108, 0), 2, 1, color='aqua'))\n\n# Add a rectangle for the SROCC model\nax.add_patch(plt.Rectangle((110, 0), 2, 1, color='fuchsia'))\n\n# Add a rectangle for the CSIQ model\nax.add_patch(plt.Rectangle((112, 0), 2, 1, color='silver'))\n\n# Add a rectangle for the TID2013 model\nax.add_patch(plt.Rectangle((114, 0), 2, 1, color='maroon'))\n\n# Add a rectangle for the LIVE-M model\nax.add_patch(plt.Rectangle((116, 0), 2, 1, color='navy'))\n\n# Add a rectangle for the LIVE model\nax.add_patch(plt.Rectangle((118, 0), 2, 1, color='olive'))\n\n# Add a rectangle for the SROCC model\nax.add_patch(plt.Rectangle((120, 0), 2, 1, color='lime'))\n\n# Add a rectangle for the CSIQ model\nax.add_patch(plt.Rectangle((122, 0), 2, 1, color='teal'))\n\n# Add a rectangle for the TID2013 model\nax.add_patch(plt.Rectangle((124, 0), 2, 1, color='aqua'))\n\n# Add a rectangle for the LIVE-M model\nax.add_patch(plt.Rectangle((126, 0), 2, 1, color='fuchsia'))\n\n# Add a rectangle for the LIVE model\nax.add_patch(plt.Rectangle((128, 0), 2, 1, color='silver'))\n\n# Add a rectangle for the SROCC model\nax.add_patch(plt.Rectangle((130, 0), 2, 1, color='maroon'))\n\n# Add a rectangle for the CSIQ model\nax.add_patch(plt.Rectangle((132, 0), 2, 1, color='navy'))\n\n# Add a rectangle for the TID2013 model\nax.add_patch(plt.Rectangle((134, 0), 2, 1, color='olive'))\n\n# Add a rectangle for the LIVE-M model\nax.add_patch(plt.Rectangle((136, 0), 2, 1, color='lime'))\n\n# Add a rectangle for the LIVE model\nax.add_patch(plt.Rectangle((138, 0), 2, 1, color='teal'))\n\n# Add a rectangle for the SROCC model\nax.add_patch(plt.Rectangle((140, 0), 2, 1, color='aqua'))\n\n# Add a rectangle for the CSIQ model\nax.add_patch(plt.Rectangle((142, 0), 2, 1, color='fuchsia'))\n\n# Add a rectangle for the TID2013 model\nax.add_patch(plt.Rectangle((144, 0), 2, 1, color='silver'))\n\n# Add a rectangle for the LIVE-M model\nax.add_patch(plt.Rectangle((146, 0), 2, 1, color='maroon'))\n\n# Add a rectangle for the LIVE model\nax.add_patch(plt.Rectangle((148, 0), 2, 1, color='navy'))\n\n# Add a rectangle for the SROCC model\nax.add_patch(plt.Rectangle((150, 0), 2, 1, color='olive'))\n\n# Add a rectangle for the CSIQ model\nax.add_patch(plt.Rectangle((152, 0), 2, 1, color='lime'))\n\n# Add a rectangle for the TID2013 model\nax.add_patch(plt.Rectangle((154, 0), 2, 1, color='teal'))\n\n# Add a rectangle for the LIVE-M model\nax.add_patch(plt.Rectangle((156, 0), 2, 1, color='aqua'))\n\n# Add a rectangle for the LIVE model\nax.add_patch(plt.Rectangle((158, 0), 2, 1, color='fuchsia'))\n\n# Add a rectangle for the SROCC model\nax.add_patch(plt.Rectangle((160, 0), 2, 1, color='silver'))\n\n# Add a rectangle for the CSIQ model\nax.add_patch(plt.Rectangle((162, 0), 2, 1, color='maroon'))\n\n# Add a rectangle for the TID2013 model\nax.add_patch(plt.Rectangle((164, 0), 2, 1, color='navy'))\n\n# Add a rectangle for the LIVE-M model\nax.add_patch(plt.Rectangle((166, 0), 2, 1, color='olive'))\n\n# Add a rectangle for the LIVE model\nax.add_patch(plt.Rectangle((168, 0), 2, 1, color='lime'))\n\n# Add a rectangle for the SROCC model\nax.add_patch(plt.Rectangle((170, 0), 2, 1, color='teal'))\n\n# Add a rectangle for the CSIQ model\nax.add_patch(plt.Rectangle((172, 0), 2, 1, color='aqua'))\n\n# Add a rectangle for the TID2013 model\nax.add_patch(plt.Rectangle((174, 0), 2, 1, color='fuchsia'))\n\n# Add a rectangle for the LIVE-M model\nax.add_patch(plt.Rectangle((176, 0), 2, 1, color='silver'))\n\n# Add a rectangle for the LIVE model\nax.add_patch(plt.Rectangle((178, 0), 2, 1, color='maroon'))\n\n# Add a rectangle for the SROCC model\nax.add_patch(plt.Rectangle((180, 0), 2, 1, color='navy'))\n\n# Add a rectangle for the CSIQ model\nax.add_patch(plt.Rectangle((182, 0), 2, 1, color='olive'))\n\n# Add a rectangle for the TID2013 model\nax.add_patch(plt.Rectangle((184, 0), 2, 1, color='lime'))\n\n# Add a rectangle for the LIVE-M model\nax.add_patch(plt.Rectangle((186, 0), 2, 1, color='teal'))\n\n# Add a rectangle for the LIVE model\nax.add_patch(plt.Rectangle((188, 0), 2, 1, color='aqua'))\n\n# Add a rectangle for the SROCC model\nax.add_patch(plt.Rectangle((190, 0), 2, 1, color='fuchsia'))\n\n# Add a rectangle for the CSIQ model\nax.add_patch(plt.Rectangle((192, 0), 2, 1, color='silver'))\n\n# Add a rectangle for the TID2013 model\nax.add_patch(plt.Rectangle((194, 0), 2, 1, color='maroon'))\n\n# Add a rectangle for the LIVE-M model\nax.add_patch(plt.Rectangle((196, 0), 2, 1, color='navy'))\n\n# Add a rectangle for the LIVE model\nax.add_patch(plt.Rectangle((198, 0), 2, 1, color='olive'))\n\n# Add a rectangle for the SROCC model\nax.add_patch(plt.Rectangle((200, 0), 2, 1, color='lime'))\n\n# Add a rectangle for the CSIQ model\nax.add_patch(plt.Rectangle((202, 0), 2, 1, color='teal'))\n\n# Add a rectangle for the TID2013 model\nax.add_patch(plt.Rectangle((204, 0), 2, 1, color='aqua'))\n\n# Add a rectangle for the LIVE-M model\nax.add_patch(plt.Rectangle((206, 0), 2, 1, color='fuchsia'))\n\n# Add a rectangle for the LIVE model\nax.add_patch(plt.Rectangle((208, 0), 2, 1, color='silver'))\n\n# Add a rectangle for the SROCC model\nax.add_patch(plt.Rectangle((210, 0), 2, 1, color='maroon'))\n\n# Add a rectangle for the CSIQ model\nax.add_patch(plt.Rectangle((212, 0), 2, 1, color='navy'))\n\n# Add a rectangle for the TID2013 model\nax.add_patch(plt.Rectangle((214, 0), 2, 1, color='olive'))\n\n# Add a rectangle for the LIVE-M model\nax.add_patch(plt.Rectangle((216, 0), 2, 1, color='lime'))\n\n# Add a rectangle for the LIVE model\nax.add_patch(plt.Rectangle((218, 0), 2, 1, color='teal'))\n\n# Add a rectangle for the SROCC model\nax.add_patch(plt.Rectangle((220, 0), 2, 1, color='aqua'))\n\n# Add a rectangle for the CSIQ model\nax.add_patch(plt.Rectangle((222, 0), 2, 1, color='fuchsia'))\n\n# Add a rectangle for the TID2013 model\nax.add_patch(plt.Rectangle((224, 0), 2, 1, color='silver'))\n\n# Add a rectangle for the LIVE-M model\nax.add_patch(plt.Rectangle((226, 0), 2, 1, color='maroon'))\n\n# Add a rectangle for the LIVE model\nax.add_patch(plt.Rectangle((228, 0), 2, 1, color='navy'))\n\n# Add a rectangle for the SROCC model\nax.add_patch(plt.Rectangle((230, 0), 2, 1, color='olive'))\n\n# Add a rectangle for the CSIQ model\nax.add_patch(plt.Rectangle((232, 0), 2, 1, color='lime'))\n\n# Add a rectangle for the TID2013 model\nax.add_patch(plt"}
{"file": "dataset/ori_500/bar_30.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\nx = ['Mixtral-8x7b-Instruct', 'GPT-3.5', 'GPT-4']\ny = [6.11, 28.33, 31.11]\nz = [85.0, 56.11, 60.56]\nw = [44.44, 42.78, 42.78]\n\n# Create a figure and a set of subplots\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Plot the data\nax.plot(x, y, color='red')\nax.plot(x, z, color='blue')\nax.plot(x, w, color='purple')\n\n# Set the title and labels\nax.set_title('One-Pass Rate (%)')\nax.set_xlabel('Model')\nax.set_ylabel('One-Pass Rate (%)')\n\n# Add a legend\nax.legend(['Zero-shot', 'One-shot', 'DS-Agent'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_31.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\ndata = [\n    [17, 54, 29],\n    [20, 67, 12],\n    [25, 56, 18],\n    [30.5, 57.5, 14],\n    [31.5, 61, 19.5]\n]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Plot the data\nfor i, row in enumerate(data):\n    ax.barh(i, row[0], color='skyblue', label='LMM-based vs TPLM-based')\n    ax.barh(i, row[1], left=row[0], color='lightgreen', label='LMM-based vs Template')\n    ax.barh(i, row[2], left=row[0] + row[1], color='pink', label='TPLM-based vs Template')\n\n# Set the labels and title\nax.set_xlabel('Percentage')\nax.set_title('Comparison of LMM-based vs TPLM-based vs Template')\nax.legend()\n\n# Set the x-axis limits\nax.set_xlim(0, 100)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_32.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nmodels = ['Combat Spider', 'Milky Cow', 'Shear Sheep']\nprobabilities = [0.72, 0.74, 0.56]\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(6.0, 2.0))\nax.bar(models, probabilities, color='blue')\n\n# Set the title and labels\nax.set_title('Probability of Improvement over VLM Image Encoder Baseline Returns')\nax.set_xlabel('Model')\nax.set_ylabel('Probability of Improvement')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_33.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nx = [0, 1, 2, 3, 4]\ny = [100, 60, 83.3, 100, 91.7]\nerr = [10, 10, 10, 10, 10]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Plot the data\nax.plot(x, y, 'o-')\n\n# Set the title of the plot\nax.set_title('Instruction Following Results In Different Steps (gpt-3.5-turbo)')\n\n# Set the labels for the x and y axes\nax.set_xlabel('Steps')\nax.set_ylabel('Scores')\n\n# Set the limits for the x and y axes\nax.set_xlim(0, 4)\nax.set_ylim(0, 12)\n\n# Set the ticks for the x and y axes\nax.set_xticks(range(5))\nax.set_yticks(range(0, 13, 2))\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the error bars\nax.errorbar(x, y, yerr=err, fmt='o', ecolor='red', capsize=5)\n\n# Set the color of the bars\nbars = ax.bar(x, y, width=0.5, align='center', alpha=0.5, color='blue')\n\n# Set the color of the error bars\nfor bar in bars:\n    height = bar.get_height()\n    ax.annotate(f'{height:.1f}',\n                xy=(bar.get_x() + bar.get_width() / 2, height),\n                xytext=(0, 3),  # 3 points vertical offset\n                textcoords=\"offset points\",\n                ha='center', va='bottom')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_34.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 4.0))\n\n# Set the title of the plot\nax.set_title('Product Sales Data')\n\n# Set the x-axis label\nax.set_xlabel('Products')\n\n# Set the y-axis label\nax.set_ylabel('Sales')\n\n# Set the x-ticks\nax.set_xticks(range(len(products)))\nax.set_xticklabels(products)\n\n# Set the y-limits\nax.set_ylim(0, 100)\n\n# Set the y-ticks\nax.set_yticks(range(0, 101, 10))\n\n# Set the grid\nax.grid(True)\n\n# Set the background color\nax.set_facecolor('#F5F5DC')\n\n# Set the border color\nax.spines['bottom'].set_color('#000000')\nax.spines['top'].set_color('#000000')\nax.spines['right'].set_color('#000000')\nax.spines['left'].set_color('#000000')\n\n# Set the font size\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the bar colors\nbar_colors = ['blue', 'yellow', 'green', 'orange', 'red', 'purple', 'pink', 'brown', 'grey', 'cyan']\n\n# Set the bar width\nbar_width = 0.8\n\n# Set the bar positions\nbar_positions = range(len(products))\n\n# Set the bar heights\nbar_heights = [70, 60, 50, 40, 30, 20, 10, 0, 100, 90]\n\n# Set the bar labels\nbar_labels = ['RegOpt', 'BIOPt', 'LoopOpt', 'RegOpt', 'BIOPt', 'LoopOpt', 'RegOpt', 'BIOPt', 'LoopOpt', 'RegOpt']\n\n# Set the bar annotations\nfor i, v in enumerate(bar_heights):\n    ax.text(i, v + 1, str(v), ha='center', va='bottom')\n\n# Set the bar annotations\nfor i, v in enumerate(bar_labels):\n    ax.text(i, v - 1, v, ha='center', va='top')\n\n# Set the bar annotations\nfor i, v in enumerate(bar_positions):\n    ax.text(v, bar_heights[i], products[v], ha='center', va='bottom')\n\n# Set the bar annotations\nfor i, v in enumerate(bar_heights):\n    ax.text(i, v - 1, str(v), ha='center', va='top')\n\n# Set the bar annotations\nfor i, v in enumerate(bar_positions):\n    ax.text(v, bar_heights[i], products[v], ha='center', va='bottom')\n\n# Set the bar annotations\nfor i, v in enumerate(bar_heights):\n    ax.text(i, v - 1, str(v), ha='center', va='top')\n\n# Set the bar annotations\nfor i, v in enumerate(bar_positions):\n    ax.text(v, bar_heights[i], products[v], ha='center', va='bottom')\n\n# Set the bar annotations\nfor i, v in enumerate(bar_heights):\n    ax.text(i, v - 1, str(v), ha='center', va='top')\n\n# Set the bar annotations\nfor i, v in enumerate(bar_positions):\n    ax.text(v, bar_heights[i], products[v], ha='center', va='bottom')\n\n# Set the bar annotations\nfor i, v in enumerate(bar_heights):\n    ax.text(i, v - 1, str(v), ha='center', va='top')\n\n# Set the bar annotations\nfor i, v in enumerate(bar_positions):\n    ax.text(v, bar_heights[i], products[v], ha='center', va='bottom')\n\n# Set the bar annotations\nfor i, v in enumerate(bar_heights):\n    ax.text(i, v - 1, str(v), ha='center', va='top')\n\n# Set the bar annotations\nfor i, v in enumerate(bar_positions):\n    ax.text(v, bar_heights[i], products[v], ha='center', va='bottom')\n\n# Set the bar annotations\nfor i, v in enumerate(bar_heights):\n    ax.text(i, v - 1, str(v), ha='center', va='top')\n\n# Set the bar annotations\nfor i, v in enumerate(bar_positions):\n    ax.text(v, bar_heights[i], products[v], ha='center', va='bottom')\n\n# Set the bar annotations\nfor i, v in enumerate(bar_heights):\n    ax.text(i, v - 1, str(v), ha='center', va='top')\n\n# Set the bar annotations\nfor i, v in enumerate(bar_positions):\n    ax.text(v, bar_heights[i], products[v], ha='center', va='bottom')\n\n# Set the bar annotations\nfor i, v in enumerate(bar_heights):\n    ax.text(i, v - 1, str(v), ha='center', va='top')\n\n# Set the bar annotations\nfor i, v in enumerate(bar_positions):\n    ax.text(v, bar_heights[i], products[v], ha='center', va='bottom')\n\n# Set the bar annotations\nfor i, v in enumerate(bar_heights):\n    ax.text(i, v - 1, str(v), ha='center', va='top')\n\n# Set the bar annotations\nfor i, v in enumerate(bar_positions):\n    ax.text(v, bar_heights[i], products[v], ha='center', va='bottom')\n\n# Set the bar annotations\nfor i, v in enumerate(bar_heights):\n    ax.text(i, v - 1, str(v), ha='center', va='top')\n\n# Set the bar annotations\nfor i, v in enumerate(bar_positions):\n    ax.text(v, bar_heights[i], products[v], ha='center', va='bottom')\n\n# Set the bar annotations\nfor i, v in enumerate(bar_heights):\n    ax.text(i, v - 1, str(v), ha='center', va='top')\n\n# Set the bar annotations\nfor i, v in enumerate(bar_positions):\n    ax.text(v, bar_heights[i], products[v], ha='center', va='bottom')\n\n# Set the bar annotations\nfor i, v in enumerate(bar_heights):\n    ax.text(i, v - 1, str(v), ha='center', va='top')\n\n# Set the bar annotations\nfor i, v in enumerate(bar_positions):\n    ax.text(v, bar_heights[i], products[v], ha='center', va='bottom')\n\n# Set the bar annotations\nfor i, v in enumerate(bar_heights):\n    ax.text(i, v - 1, str(v), ha='center', va='top')\n\n# Set the bar annotations\nfor i, v in enumerate(bar_positions):\n    ax.text(v, bar_heights[i], products[v], ha='center', va='bottom')\n\n# Set the bar annotations\nfor i, v in enumerate(bar_heights):\n    ax.text(i, v - 1, str(v), ha='center', va='top')\n\n# Set the bar annotations\nfor i, v in enumerate(bar_positions):\n    ax.text(v, bar_heights[i], products[v], ha='center', va='bottom')\n\n# Set the bar annotations\nfor i, v in enumerate(bar_heights):\n    ax.text(i, v - 1, str(v), ha='center', va='top')\n\n# Set the bar annotations\nfor i, v in enumerate(bar_positions):\n    ax.text(v, bar_heights[i], products[v], ha='center', va='bottom')\n\n# Set the bar annotations\nfor i, v in enumerate(bar_heights):\n    ax.text(i, v - 1, str(v), ha='center', va='top')\n\n# Set the bar annotations\nfor i, v in enumerate(bar_positions):\n    ax.text(v, bar_heights[i], products[v], ha='center', va='bottom')\n\n# Set the bar annotations\nfor i, v in enumerate(bar_heights):\n    ax.text(i, v - 1, str(v), ha='center', va='top')\n\n# Set the bar annotations\nfor i, v in enumerate(bar_positions):\n    ax.text(v, bar_heights[i], products[v], ha='center', va='bottom')\n\n# Set the bar annotations\nfor i, v in enumerate(bar_heights):\n    ax.text(i, v - 1, str(v), ha='center', va='top')\n\n# Set the bar annotations\nfor i, v in enumerate(bar_positions):\n    ax.text(v, bar_heights[i], products[v], ha='center', va='bottom')\n\n# Set the bar annotations\nfor i, v in enumerate(bar_heights):\n    ax.text(i, v - 1, str(v), ha='center', va='top')\n\n# Set the bar annotations\nfor i, v in enumerate(bar_positions):\n    ax.text(v, bar_heights[i], products[v], ha='center', va='bottom')\n\n# Set the bar annotations\nfor i, v in enumerate(bar_heights):\n    ax.text(i, v - 1, str(v), ha='center', va='top')\n\n# Set the bar annotations\nfor i, v in enumerate(bar_positions):\n    ax.text(v, bar_heights[i], products[v], ha='center', va='bottom')\n\n# Set the bar annotations\nfor i, v in enumerate(bar_heights):\n    ax.text(i, v - 1, str(v), ha='center', va='top')\n\n# Set the bar annotations\nfor i, v in enumerate(bar_positions):\n    ax.text(v, bar_heights[i], products[v], ha='center', va='bottom')\n\n# Set the bar annotations\nfor i, v in enumerate(bar_heights):\n    ax.text(i, v - 1, str(v), ha='center', va='top')\n\n# Set the bar annotations\nfor i, v in enumerate(bar_positions):\n    ax.text(v, bar_heights[i], products[v], ha='center', va='bottom')\n\n# Set the bar annotations\nfor i, v in enumerate(bar_heights):\n    ax.text(i, v - 1, str(v), ha='center', va='top')\n\n# Set the bar annotations\nfor i, v in enumerate(bar_positions):\n    ax.text(v, bar_heights[i], products[v], ha='center', va='bottom')\n\n# Set the bar annotations\nfor i, v in enumerate(bar_heights):\n    ax.text(i, v - 1, str(v), ha='center', va='top')\n\n# Set the bar annotations\nfor i, v in enumerate(bar_positions):\n    ax.text(v, bar_heights[i], products[v], ha='center', va='bottom')\n\n# Set the bar annotations\nfor i, v in enumerate(bar_heights):\n    ax.text(i, v - 1, str(v), ha='center', va='top')\n\n# Set the bar annotations\nfor i, v in enumerate(bar_positions):\n    ax.text(v, bar_heights[i], products[v], ha='center', va='bottom')\n\n# Set the bar annotations\nfor i, v in enumerate(bar_heights):\n    ax.text(i, v - 1, str(v), ha='center', va='top')\n\n# Set the bar annotations\nfor i, v in enumerate(bar_positions):\n    ax.text(v, bar_heights[i], products[v], ha='center', va='bottom')\n\n# Set the bar annotations\nfor i, v in enumerate(bar_heights):\n    ax.text(i, v - 1, str(v), ha='center', va='top')\n\n# Set the bar annotations\nfor i, v in enumerate(bar_positions):\n    ax.text(v, bar_heights[i], products[v], ha='center', va='bottom')\n\n# Set the bar annotations\nfor i, v in enumerate(bar_heights):\n    ax.text(i, v - 1, str(v), ha='center', va='top')\n\n# Set the bar annotations\nfor i, v in enumerate(bar_positions):\n    ax.text(v, bar_heights[i], products[v], ha='center', va='bottom')\n\n# Set the bar annotations\nfor i, v in enumerate(bar_heights):\n    ax.text(i, v - 1, str(v), ha='center', va='top')\n\n# Set the bar annotations\nfor i, v in enumerate(bar_positions):\n    ax.text(v, bar_heights[i], products[v], ha='center', va='bottom')\n\n# Set the bar annotations\nfor i, v in enumerate(bar_heights):\n    ax.text(i, v - 1, str(v), ha='center', va='top')\n\n# Set the bar annotations\nfor i, v in enumerate(bar_positions):\n    ax.text(v, bar_heights[i], products[v], ha='center', va='bottom')\n\n# Set the bar annotations\nfor i, v in enumerate(bar_heights):\n    ax.text(i, v - 1, str(v), ha='center', va='top')\n\n# Set the bar annotations\nfor i, v in enumerate(bar_positions):\n    ax.text(v, bar_heights[i], products[v], ha='center', va='bottom')\n\n# Set the bar annotations\nfor i, v in enumerate(bar_heights):\n    ax.text(i, v - 1, str(v), ha='center', va='top')\n\n# Set the bar annotations\nfor i, v in enumerate(bar_positions):\n    ax.text(v, bar_heights[i], products[v], ha='center', va='bottom')\n\n# Set the bar annotations\nfor i, v in enumerate(bar_heights):\n    ax.text(i, v - 1, str(v), ha='center', va='top')\n\n# Set the bar annotations\nfor i, v in enumerate(bar_positions):\n    ax.text(v, bar_heights[i], products[v], ha='center', va='bottom')\n\n# Set the bar annotations\nfor i, v in enumerate(bar_heights):\n    ax.text(i, v - 1, str(v), ha='center', va='top')\n\n# Set the bar annotations\nfor i, v in enumerate(bar_positions):\n    ax.text(v, bar_heights[i], products[v], ha='center', va='bottom')\n\n# Set the bar annotations\nfor i, v in enumerate(bar_heights):\n    ax.text(i, v - 1, str(v), ha='center', va='top')\n\n# Set the bar annotations\nfor i, v in enumerate(bar_positions):\n    ax.text(v, bar_heights[i], products[v], ha='center', va='bottom')\n\n# Set the bar annotations\nfor i, v in enumerate(bar_heights):\n    ax.text(i, v - 1, str(v), ha='center', va='top')\n\n# Set the bar annotations\nfor i, v in enumerate(bar_positions):\n    ax.text(v, bar_heights[i], products[v], ha='center', va='bottom')\n\n# Set the bar annotations\nfor i, v in enumerate(bar_heights):\n    ax.text(i, v - 1, str(v), ha='center', va='top')\n\n# Set the bar annotations\nfor i, v in enumerate(bar_positions):\n    ax.text(v, bar_heights[i], products[v], ha='center', va='bottom')\n\n# Set the bar annotations\nfor i, v in enumerate(bar_heights):\n    ax.text(i, v - 1, str(v), ha='center', va='top')\n\n# Set the bar annotations\nfor i, v in enumerate(bar_positions):\n    ax.text(v, bar_heights[i], products[v], ha='center', va='bottom')\n\n# Set the bar annotations\nfor i, v in enumerate(bar_heights):\n    ax.text(i, v - 1, str(v), ha='center', va='top')\n\n# Set the bar annotations\nfor i, v in enumerate(bar_positions):\n    ax.text(v, bar_heights[i], products[v], ha='center', va='bottom')\n\n# Set the bar annotations\nfor i, v in enumerate(bar_heights):\n    ax.text(i, v - 1, str(v), ha='center', va='top')\n\n# Set the bar annotations\nfor i, v in enumerate(bar_positions):\n    ax.text(v, bar_heights[i], products[v], ha='center', va='bottom')\n\n# Set the bar annotations\nfor i, v in enumerate(bar_heights):\n    ax.text(i, v - 1, str(v), ha='center', va='top')\n\n# Set the bar annotations\nfor i, v in enumerate(bar_positions):\n    ax.text(v, bar_heights[i], products[v], ha='center', va='bottom')\n\n# Set the bar annotations\nfor i, v in enumerate(bar_heights):\n    ax.text(i, v - 1, str(v), ha='center', va='top')\n\n# Set the bar annotations\nfor i, v in enumerate(bar_positions):\n    ax.text(v, bar_heights[i], products[v], ha='center', va='bottom')\n\n# Set the bar annotations\nfor i, v in enumerate(bar_heights):\n    ax.text(i, v - 1, str(v), ha='center', va='top')\n\n# Set the bar annotations\nfor i, v in enumerate(bar_positions):\n    ax.text(v, bar_heights[i], products[v], ha='center', va='bottom')\n\n# Set the bar annotations\nfor i, v in enumerate(bar_heights):\n    ax.text(i, v - 1, str(v), ha='center', va='top')\n\n# Set the bar annotations\nfor i, v in enumerate(bar_positions):\n    ax.text(v, bar_heights[i], products[v], ha='center', va='bottom')\n\n# Set the bar annotations\nfor i, v in enumerate(bar_heights):\n    ax.text(i, v - 1, str(v), ha='center', va='top')\n\n# Set the bar annotations\nfor i, v in enumerate(bar_positions):\n    ax.text(v, bar_heights[i], products[v], ha='center', va='bottom')\n\n# Set the bar annotations\nfor i, v in enumerate(bar_heights):\n    ax.text(i, v - 1, str(v), ha='center', va='top')\n\n# Set the bar annotations\nfor i, v in enumerate(bar_positions):\n    ax.text(v, bar_heights[i], products[v], ha='center', va='bottom')\n\n# Set the bar annotations\nfor i, v in enumerate(bar_heights):\n    ax.text(i, v - 1, str(v), ha='center', va='top')\n\n# Set the bar annotations\nfor i, v in enumerate(bar_positions):\n    ax.text(v, bar_heights[i], products[v], ha='center', va='bottom')\n\n# Set the bar annotations\nfor i, v in enumerate(bar_heights):\n    ax.text(i, v - 1, str(v), ha='center', va='top')\n\n# Set the bar annotations\nfor i, v in enumerate(bar_positions):\n    ax.text(v, bar_heights[i], products[v], ha='center', va='bottom')\n\n# Set the bar annotations\nfor i, v in enumerate(bar_heights):\n    ax.text(i, v - 1, str(v), ha='center', va='top')\n\n# Set the bar annotations\nfor i, v in enumerate(bar_positions):\n    ax.text(v, bar"}
{"file": "dataset/ori_500/bar_35.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nbrands = ['Random', 'Llama2', 'Mistral']\nscores = [5.52, 5.53, 5.83]\ncolors = ['purple', 'brown', 'green', 'orange', 'blue', 'grey']\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Plot the data\nax.bar(brands, scores, color=colors)\n\n# Set the title and labels\nax.set_title('MT-Bench Score Comparison')\nax.set_xlabel('Brands')\nax.set_ylabel('MT-Bench Score')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_36.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nx = [100, 1000]\ny = [49.98, 49.63]\nyerr = [0.02, 0.02]\n\n# Create figure and axis objects\nfig, ax = plt.subplots(figsize=(6.61, 5.23))\n\n# Plot data\nax.errorbar(x, y, yerr=yerr, fmt='o', capsize=5)\n\n# Set title and labels\nax.set_title('Number of Clusters')\nax.set_xlabel('Number of Clusters')\nax.set_ylabel('MMSE')\n\n# Set x-axis limits\nax.set_xlim(0, 1000)\n\n# Set y-axis limits\nax.set_ylim(47, 53)\n\n# Set grid\nax.grid(True)\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_37.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\nyears = ['ResNet18', 'AlexNet', 'ResNet50']\nspeedups = [7.4, 6.1, 4.3]\nperturbations = [0, 50, 48, 75, 68, 87.5, 78]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(12, 4))\n\n# Plot the speedup data\nax.bar(years, speedups, color='skyblue')\n\n# Plot the perturbation data\nfor i, p in enumerate(perturbations):\n    ax.text(i, max(speedups)+0.5, str(p), ha='center', va='bottom')\n\n# Set the title and labels\nax.set_title('Perturbation')\nax.set_xlabel('Year')\nax.set_ylabel('Speedup')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_38.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(7.0, 5.0))\n\n# Set the title of the plot\nax.set_title('LeetCode, DS-6.7b')\n\n# Set the x-axis label\nax.set_xlabel('Time (ms)')\n\n# Set the y-axis label\nax.set_ylabel('Accuracy (%)')\n\n# Define the data for the plots\nx = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ny1 = [20, 30, 40, 50, 60, 70, 80, 90, 100, 100]\ny2 = [25, 35, 45, 55, 65, 75, 85, 95, 100, 100]\ny3 = [30, 40, 50, 60, 70, 80, 90, 100, 100, 100]\ny4 = [35, 45, 55, 65, 75, 85, 95, 100, 100, 100]\ny5 = [40, 50, 60, 70, 80, 90, 100, 100, 100, 100]\ny6 = [45, 55, 65, 75, 85, 95, 100, 100, 100, 100]\ny7 = [50, 60, 70, 80, 90, 100, 100, 100, 100, 100]\ny8 = [55, 65, 75, 85, 95, 100, 100, 100, 100, 100]\ny9 = [60, 70, 80, 90, 100, 100, 100, 100, 100, 100]\ny10 = [65, 75, 85, 95, 100, 100, 100, 100, 100, 100]\n\n# Plot the data\nax.plot(x, y1, color='green', label='Correct')\nax.plot(x, y2, color='blue', label='Counterfeit (Test-Passing)')\nax.plot(x, y3, color='red', label='Counterfeit (Test-Failing)')\nax.plot(x, y4, color='purple', label='Counterfeit (Test-Failing), Confused')\nax.plot(x, y5, color='cyan', label='DS-6.7b')\nax.plot(x, y6, color='magenta', label='CL-7b')\nax.plot(x, y7, color='yellow', label='CL-13b')\nax.plot(x, y8, color='orange', label='CL-34b')\nax.plot(x, y9, color='brown', label='SC')\nax.plot(x, y10, color='pink', label='DS-33b')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_39.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\ndata = {\n    'Vicuna': [53, 6, 21],\n    'Koala': [80, 33, 67],\n    'WizardLM': [116, 49, 53],\n    'SInstruct': [99, 50, 103],\n    'LIMA': [179, 23, 98]\n}\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Plot the data\nfor i, (key, value) in enumerate(data.items()):\n    ax.bar(key, value[0], color='coral', label='Recost (1% wins)')\n    ax.bar(key, value[1], bottom=value[0], color='yellow', label='Tie')\n    ax.bar(key, value[2], bottom=[value[0] + value[1]] * 2, color='skyblue', label='Alpacas wins')\n\n# Set the title and labels\nax.set_title('Top 5 AI models')\nax.set_xlabel('AI Models')\nax.set_ylabel('Wins')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\nbrands = ['CometKiwi', 'LaBSE', 'IF', 'Max', 'Ppl', 'ALTI+', 'Wass Combo', 'STARE']\nsales = [35.15, 26.86, 19.08, 22.09, 20.67, 58.99, 66.19, 60.64]\nnon_aggregations = [36.63, 23.9, 26.38, 17.06]\naggregations = [42.5, 48.38, 62.94, 56.19, 60.64, 66.19, 58.99, 50.67]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Plot the sales data\nax.bar(brands, sales, color='lightgreen')\n\n# Plot the non-aggregation data\nfor i, n in enumerate(non_aggregations):\n    ax.text(i, n, str(n), ha='center', va='bottom', color='red')\n\n# Plot the aggregation data\nfor i, a in enumerate(aggregations):\n    ax.text(i, a, str(a), ha='center', va='bottom', color='blue')\n\n# Add a title\nax.set_title('FPR@90TPR on Guerreiro et al. 2022')\n\n# Add a legend\nax.legend(['Aggregation', 'Non-Aggregation'], loc='upper left')\n\n# Add a horizontal line at the median of the sales data\nax.axhline(y=np.median(sales), color='gray', linestyle='-')\n\n# Add a horizontal line at the median of the non-aggregation data\nax.axhline(y=np.median(non_aggregations), color='red', linestyle='-')\n\n# Add a horizontal line at the median of the aggregation data\nax.axhline(y=np.median(aggregations), color='blue', linestyle='-')\n\n# Set the x-axis labels\nax.set_xticks(range(len(brands)))\nax.set_xticklabels(brands)\n\n# Set the y-axis limits\nax.set_ylim(0, 80)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_40.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ncategories = ['Literal', 'Assignment', 'Operator', 'Comment', 'Exception Handling', 'Method Call', 'Return', 'Variable', 'External Class', 'Argument', 'Conditional Block', 'Loop', 'Conditional Statement', 'Variable Declaration', 'Method Declaration', 'Parameter']\nvalues = [20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160]\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\nax.bar(categories, values, color='blue')\n\n# Set the title and labels\nax.set_title('Relative Difference in Machine vs. Human Focus on Semantic Categories')\nax.set_xlabel('Semantic Category')\nax.set_ylabel('Difference (%)')\n\n# Rotate the x-axis labels for better visibility\nplt.xticks(rotation=45)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_41.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(14.0, 4.0))\n\n# Set the x-axis values\nx = np.arange(5, 21, 5)\n\n# Set the y-axis values\ny = [66.3, 61.9, 53.8, 10.1, 13.6, 13.7, 49.3, 45.7, 41.6, 31.5, 36.3, 40.5, 42.6, 36.5, 48.0, 40.2, 30.6, 49.5, 56.8, 42.8, 30.6, 43.4, 22.3, 25.9, 22.5, 64.7, 59.6, 43.4]\n\n# Plot the data\nax.plot(x, y, 'o-')\n\n# Set the title of the plot\nax.set_title('Truthful: Misleading = 2:1')\n\n# Set the x-axis label\nax.set_xlabel('Time (in minutes)')\n\n# Set the y-axis label\nax.set_ylabel('Score')\n\n# Set the color of the line\nax.plot(x, y, color='blue')\n\n# Set the color of the markers\nax.plot(x, y, marker='o', color='red')\n\n# Set the color of the background\nax.set_facecolor('lightgrey')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the legend\nax.legend(['Truthful Recall', 'Misleading Recall'], loc='upper left')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_42.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the graph\nx = ['A12sci-middle', 'PROST', 'ARC-easy', 'COMVE', 'OpenBookQA', 'COPA', 'SCIQ', 'NumSense', 'CoQA', 'ComQA2.0', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'ComQC', 'Com"}
{"file": "dataset/ori_500/bar_43.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Set the title of the plot\nax.set_title('MedMCQA')\n\n# Set the x-axis label\nax.set_xlabel('Performance Score (%)')\n\n# Set the y-axis label\nax.set_ylabel('Success Rate (%)')\n\n# Create a bar chart with the data\nax.bar(['LSTM-2/3b', 'Zephyr-7b', 'MMLU Anatomy', 'MMLU Clinical knowledge', 'MMLU College medicine', 'MMLU Medical genetics', 'MMLU Professional medicine'], [48.1, 57.2, 75.6, 79.2, 84.2, 86.0, 89.0], color='brown')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_44.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\ncategories = ['AFAN', 'AFBE', 'AFCE', 'AFAO', 'AFEX', 'AFEP', 'AFPK', 'AFPO', 'AFPP', 'AFPR', 'AFPL', 'AFSC', 'AFSL', 'AFSI', 'AFTH', 'AFVT', 'AFWS', 'DAH', 'IC', 'SS']\nnla_values = [25, 30, 40, 15, 25, 35, 45, 20, 30, 40, 25, 35, 45, 20, 30, 40, 25, 35, 45, 20, 30]\ngpt_values = [45, 40, 50, 35, 45, 50, 40, 35, 45, 50, 40, 35, 45, 50, 40, 35, 45, 50, 40, 35, 45]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data\nax.bar(categories, nla_values, color='blue')\nax.bar(categories, gpt_values, bottom=nla_values, color='orange')\n\n# Set the title and labels\nax.set_title('NLA vs GPT Values')\nax.set_xlabel('Categories')\nax.set_ylabel('Values')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_45.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 7))\n\n# Set the title of the plot\nax.set_title('Taboo')\n\n# Set the x-axis label\nax.set_xlabel('Num of Constraint Words')\n\n# Set the y-axis label\nax.set_ylabel('Score')\n\n# Define the data for the plot\nx = [3, 5, 7, 9, 11]\ny = [2.5, 2.8, 3.2, 3.5, 4.0]\n\n# Plot the data\nax.plot(x, y)\n\n# Add rectangles to represent the teams\nrectangles = [\n    plt.Rectangle((3, 0), 2, 1, color='pink'),\n    plt.Rectangle((5, 0), 2, 1, color='pink'),\n    plt.Rectangle((7, 0), 2, 1, color='pink'),\n    plt.Rectangle((9, 0), 2, 1, color='pink'),\n    plt.Rectangle((11, 0), 2, 1, color='pink')\n]\n\n# Add the rectangles to the plot\nfor rectangle in rectangles:\n    ax.add_patch(rectangle)\n\n# Add a legend to the plot\nax.legend(['LLAMA-Default', 'LLAMA-HAG', 'Vicuna-Default', 'Vicuna-HAG'], loc='upper left')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_46.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nbrands = ['Lavila', 'Video-LLaMA', 'BLIP1', 'BLIP2 Model', 'LLaVA', 'OSCaR', 'GPT4V']\nsales = [85.93, 73.93, 70.56, 69.87, 68.76, 67.65, 66.54]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Plot the data\nax.bar(brands, sales, color='skyblue')\n\n# Set the title and labels\nax.set_title('Human Study')\nax.set_xlabel('Brands')\nax.set_ylabel('Sales (%)')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_47.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\ndata = {\n    'HH': [22, 50, 28],\n    'Reddit': [25, 40, 60],\n    'IMDB': [30, 50, 70],\n    'AVG': [26, 40, 60]\n}\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(13, 6))\n\n# Plot the data\nfor key, value in data.items():\n    ax.bar(key, value[0], color='red')\n    ax.bar(key, value[1], bottom=value[0], color='orange')\n    ax.bar(key, value[2], bottom=[value[0] + value[1]] * len(value), color='pink')\n\n# Set the title and labels\nax.set_title('COPR v.s. Golden (Human Eval)')\nax.set_xlabel('Company')\nax.set_ylabel('Percentage')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_48.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(5.0, 6.0))\n\n# Set the title of the plot\nax.set_title('a')\n\n# Create a bar chart with the data\nax.bar(['Accuracy', 'Unfairness'], [0.32, 0.12], color='blue')\n\n# Set the y-axis limits\nax.set_ylim(0, 0.4)\n\n# Set the x-axis limits\nax.set_xlim(-0.5, 2.5)\n\n# Set the y-axis label\nax.set_ylabel('Score')\n\n# Set the x-axis label\nax.set_xlabel('Metrics')\n\n# Create a second subplot\nfig, ax = plt.subplots(figsize=(5.0, 6.0))\n\n# Set the title of the plot\nax.set_title('b')\n\n# Create a bar chart with the data\nax.bar(['Accuracy', 'Unfairness'], [0.38, 0.18], color='blue')\n\n# Set the y-axis limits\nax.set_ylim(0, 0.4)\n\n# Set the x-axis limits\nax.set_xlim(-0.5, 2.5)\n\n# Set the y-axis label\nax.set_ylabel('Score')\n\n# Set the x-axis label\nax.set_xlabel('Metrics')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_49.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Top-1 Accuracy by Resolution and Method')\n\n# Set the x-axis label\nax.set_xlabel('Resolutions')\n\n# Set the y-axis label\nax.set_ylabel('Top-1 Accuracy (%)')\n\n# Define the data for the plots\nx = ['224', '128', '64', '32']\ny1 = [75, 70, 65, 60]\ny2 = [85, 80, 75, 70]\ny3 = [95, 90, 85, 80]\n\n# Create the bar plots\nax.bar(x, y1, color='blue')\nax.bar(x, y2, bottom=y1, color='orange')\nax.bar(x, y3, bottom=[sum(i) for i in zip(y1, y2)], color='pink')\n\n# Add text annotations to the bars\nfor i, v in enumerate(y1):\n    ax.text(i, v + 1, str(v) + '%', ha='center', va='bottom')\n\nfor i, v in enumerate(y2):\n    ax.text(i, sum([y1[i], v]) + 1, str(v) + '%', ha='center', va='bottom')\n\nfor i, v in enumerate(y3):\n    ax.text(i, sum([y1[i], y2[i], v]) + 1, str(v) + '%', ha='center', va='bottom')\n\n# Add a horizontal line at the top of the plot\nax.axhline(y=80, color='blue', linestyle='-')\n\n# Add a vertical line at the left of the plot\nax.axvline(x=0, color='blue', linestyle='-')\n\n# Add a vertical line at the right of the plot\nax.axvline(x=len(x), color='blue', linestyle='-')\n\n# Add a vertical line at the center of the plot\nax.axvline(x=len(x)/2, color='blue', linestyle='-')\n\n# Add a vertical line at the right of the plot\nax.axvline(x=len(x)-1, color='blue', linestyle='-')\n\n# Add a vertical line at the right of the plot\nax.axvline(x=len(x)-2, color='blue', linestyle='-')\n\n# Add a vertical line at the right of the plot\nax.axvline(x=len(x)-3, color='blue', linestyle='-')\n\n# Add a vertical line at the right of the plot\nax.axvline(x=len(x)-4, color='blue', linestyle='-')\n\n# Add a vertical line at the right of the plot\nax.axvline(x=len(x)-5, color='blue', linestyle='-')\n\n# Add a vertical line at the right of the plot\nax.axvline(x=len(x)-6, color='blue', linestyle='-')\n\n# Add a vertical line at the right of the plot\nax.axvline(x=len(x)-7, color='blue', linestyle='-')\n\n# Add a vertical line at the right of the plot\nax.axvline(x=len(x)-8, color='blue', linestyle='-')\n\n# Add a vertical line at the right of the plot\nax.axvline(x=len(x)-9, color='blue', linestyle='-')\n\n# Add a vertical line at the right of the plot\nax.axvline(x=len(x)-10, color='blue', linestyle='-')\n\n# Add a vertical line at the right of the plot\nax.axvline(x=len(x)-11, color='blue', linestyle='-')\n\n# Add a vertical line at the right of the plot\nax.axvline(x=len(x)-12, color='blue', linestyle='-')\n\n# Add a vertical line at the right of the plot\nax.axvline(x=len(x)-13, color='blue', linestyle='-')\n\n# Add a vertical line at the right of the plot\nax.axvline(x=len(x)-14, color='blue', linestyle='-')\n\n# Add a vertical line at the right of the plot\nax.axvline(x=len(x)-15, color='blue', linestyle='-')\n\n# Add a vertical line at the right of the plot\nax.axvline(x=len(x)-16, color='blue', linestyle='-')\n\n# Add a vertical line at the right of the plot\nax.axvline(x=len(x)-17, color='blue', linestyle='-')\n\n# Add a vertical line at the right of the plot\nax.axvline(x=len(x)-18, color='blue', linestyle='-')\n\n# Add a vertical line at the right of the plot\nax.axvline(x=len(x)-19, color='blue', linestyle='-')\n\n# Add a vertical line at the right of the plot\nax.axvline(x=len(x)-20, color='blue', linestyle='-')\n\n# Add a vertical line at the right of the plot\nax.axvline(x=len(x)-21, color='blue', linestyle='-')\n\n# Add a vertical line at the right of the plot\nax.axvline(x=len(x)-22, color='blue', linestyle='-')\n\n# Add a vertical line at the right of the plot\nax.axvline(x=len(x)-23, color='blue', linestyle='-')\n\n# Add a vertical line at the right of the plot\nax.axvline(x=len(x)-24, color='blue', linestyle='-')\n\n# Add a vertical line at the right of the plot\nax.axvline(x=len(x)-25, color='blue', linestyle='-')\n\n# Add a vertical line at the right of the plot\nax.axvline(x=len(x)-26, color='blue', linestyle='-')\n\n# Add a vertical line at the right of the plot\nax.axvline(x=len(x)-27, color='blue', linestyle='-')\n\n# Add a vertical line at the right of the plot\nax.axvline(x=len(x)-28, color='blue', linestyle='-')\n\n# Add a vertical line at the right of the plot\nax.axvline(x=len(x)-29, color='blue', linestyle='-')\n\n# Add a vertical line at the right of the plot\nax.axvline(x=len(x)-30, color='blue', linestyle='-')\n\n# Add a vertical line at the right of the plot\nax.axvline(x=len(x)-31, color='blue', linestyle='-')\n\n# Add a vertical line at the right of the plot\nax.axvline(x=len(x)-32, color='blue', linestyle='-')\n\n# Add a vertical line at the right of the plot\nax.axvline(x=len(x)-33, color='blue', linestyle='-')\n\n# Add a vertical line at the right of the plot\nax.axvline(x=len(x)-34, color='blue', linestyle='-')\n\n# Add a vertical line at the right of the plot\nax.axvline(x=len(x)-35, color='blue', linestyle='-')\n\n# Add a vertical line at the right of the plot\nax.axvline(x=len(x)-36, color='blue', linestyle='-')\n\n# Add a vertical line at the right of the plot\nax.axvline(x=len(x)-37, color='blue', linestyle='-')\n\n# Add a vertical line at the right of the plot\nax.axvline(x=len(x)-38, color='blue', linestyle='-')\n\n# Add a vertical line at the right of the plot\nax.axvline(x=len(x)-39, color='blue', linestyle='-')\n\n# Add a vertical line at the right of the plot\nax.axvline(x=len(x)-40, color='blue', linestyle='-')\n\n# Add a vertical line at the right of the plot\nax.axvline(x=len(x)-41, color='blue', linestyle='-')\n\n# Add a vertical line at the right of the plot\nax.axvline(x=len(x)-42, color='blue', linestyle='-')\n\n# Add a vertical line at the right of the plot\nax.axvline(x=len(x)-43, color='blue', linestyle='-')\n\n# Add a vertical line at the right of the plot\nax.axvline(x=len(x)-44, color='blue', linestyle='-')\n\n# Add a vertical line at the right of the plot\nax.axvline(x=len(x)-45, color='blue', linestyle='-')\n\n# Add a vertical line at the right of the plot\nax.axvline(x=len(x)-46, color='blue', linestyle='-')\n\n# Add a vertical line at the right of the plot\nax.axvline(x=len(x)-47, color='blue', linestyle='-')\n\n# Add a vertical line at the right of the plot\nax.axvline(x=len(x)-48, color='blue', linestyle='-')\n\n# Add a vertical line at the right of the plot\nax.axvline(x=len(x)-49, color='blue', linestyle='-')\n\n# Add a vertical line at the right of the plot\nax.axvline(x=len(x)-50, color='blue', linestyle='-')\n\n# Add a vertical line at the right of the plot\nax.axvline(x=len(x)-51, color='blue', linestyle='-')\n\n# Add a vertical line at the right of the plot\nax.axvline(x=len(x)-52, color='blue', linestyle='-')\n\n# Add a vertical line at the right of the plot\nax.axvline(x=len(x)-53, color='blue', linestyle='-')\n\n# Add a vertical line at the right of the plot\nax.axvline(x=len(x)-54, color='blue', linestyle='-')\n\n# Add a vertical line at the right of the plot\nax.axvline(x=len(x)-55, color='blue', linestyle='-')\n\n# Add a vertical line at the right of the plot\nax.axvline(x=len(x)-56, color='blue', linestyle='-')\n\n# Add a vertical line at the right of the plot\nax.axvline(x=len(x)-57, color='blue', linestyle='-')\n\n# Add a vertical line at the right of the plot\nax.axvline(x=len(x)-58, color='blue', linestyle='-')\n\n# Add a vertical line at the right of the plot\nax.axvline(x=len(x)-59, color='blue', linestyle='-')\n\n# Add a vertical line at the right of the plot\nax.axvline(x=len(x)-60, color='blue', linestyle='-')\n\n# Add a vertical line at the right of the plot\nax.axvline(x=len(x)-61, color='blue', linestyle='-')\n\n# Add a vertical line at the right of the plot\nax.axvline(x=len(x)-62, color='blue', linestyle='-')\n\n# Add a vertical line at the right of the plot\nax.axvline(x=len(x)-63, color='blue', linestyle='-')\n\n# Add a vertical line at the right of the plot\nax.axvline(x=len(x)-64, color='blue', linestyle='-')\n\n# Add a vertical line at the right of the plot\nax.axvline(x=len(x)-65, color='blue', linestyle='-')\n\n# Add a vertical line at the right of the plot\nax.axvline(x=len(x)-66, color='blue', linestyle='-')\n\n# Add a vertical line at the right of the plot\nax.axvline(x=len(x)-67, color='blue', linestyle='-')\n\n# Add a vertical line at the right of the plot\nax.axvline(x=len(x)-68, color='blue', linestyle='-')\n\n# Add a vertical line at the right of the plot\nax.axvline(x=len(x)-69, color='blue', linestyle='-')\n\n# Add a vertical line at the right of the plot\nax.axvline(x=len(x)-70, color='blue', linestyle='-')\n\n# Add a vertical line at the right of the plot\nax.axvline(x=len(x)-71, color='blue', linestyle='-')\n\n# Add a vertical line at the right of the plot\nax.axvline(x=len(x)-72, color='blue', linestyle='-')\n\n# Add a vertical line at the right of the plot\nax.axvline(x=len(x)-73, color='blue', linestyle='-')\n\n# Add a vertical line at the right of the plot\nax.axvline(x=len(x)-74, color='blue', linestyle='-')\n\n# Add a vertical line at the right of the plot\nax.axvline(x=len(x)-75, color='blue', linestyle='-')\n\n# Add a vertical line at the right of the plot\nax.axvline(x=len(x)-76, color='blue', linestyle='-')\n\n# Add a vertical line at the right of the plot\nax.axvline(x=len(x)-77, color='blue', linestyle='-')\n\n# Add a vertical line at the right of the plot\nax.axvline(x=len(x)-78, color='blue', linestyle='-')\n\n# Add a vertical line at the right of the plot\nax.axvline(x=len(x)-79, color='blue', linestyle='-')\n\n# Add a vertical line at the right of the plot\nax.axvline(x=len(x)-80, color='blue', linestyle='-')\n\n# Add a vertical line at the right of the plot\nax.axvline(x=len(x)-81, color='blue', linestyle='-')\n\n# Add a vertical line at the right of the plot\nax.axvline(x=len(x)-82, color='blue', linestyle='-')\n\n# Add a vertical line at the right of the plot\nax.axvline(x=len(x)-83, color='blue', linestyle='-')\n\n# Add a vertical line at the right of the plot\nax.axvline(x=len(x)-84, color='blue', linestyle='-')\n\n# Add a vertical line at the right of the plot\nax.axvline(x=len(x)-85, color='blue', linestyle='-')\n\n# Add a vertical line at the right of the plot\nax.axvline(x=len(x)-86, color='blue', linestyle='-')\n\n# Add a vertical line at the right of the plot\nax.axvline(x=len(x)-87, color='blue', linestyle='-')\n\n# Add a vertical line at the right of the plot\nax.axvline(x=len(x)-88, color='blue', linestyle='-')\n\n# Add a vertical line at the right of the plot\nax.axvline(x=len(x)-89, color='blue', linestyle='-')\n\n# Add a vertical line at the right of the plot\nax.axvline(x=len(x)-90, color='blue', linestyle='-')\n\n# Add a vertical line at the right of the plot\nax.axvline(x=len(x)-91, color='blue', linestyle='-')\n\n# Add a vertical line at the right of the plot\nax.axvline(x=len(x)-92, color='blue', linestyle='-')\n\n# Add a vertical line at the right of the plot\nax.axvline(x=len(x)-93, color='blue', linestyle='-')\n\n# Add a vertical line at the right of the plot\nax.axvline(x=len(x)-94, color='blue', linestyle='-')\n\n# Add a vertical line at the right of the plot\nax.axvline(x=len(x)-95, color='blue', linestyle='-')\n\n# Add a vertical line at the right of the plot\nax.axvline(x=len(x)-96, color='blue', linestyle='-')\n\n# Add a vertical line at the right of the plot\nax.axvline(x=len(x)-97, color='blue', linestyle='-')\n\n# Add a vertical line at the right of the plot\nax.axvline(x=len(x)-98, color='blue', linestyle='-')\n\n# Add a vertical line at the right of the plot\nax.axvline(x=len(x)-99, color='blue', linestyle='-')\n\n# Add a vertical line at the right of the plot\nax.axvline(x=len(x)-100, color='blue', linestyle='-')\n\n# Add a vertical line at the right of the plot\nax.axvline(x=len(x)-101, color='blue', linestyle='-')\n\n# Add a vertical line at the right of the plot\nax.axvline(x=len(x)-102, color='blue', linestyle='-')\n\n# Add a vertical line at the right of the plot\nax.axvline(x=len(x)-103, color='blue', linestyle='-')\n\n# Add a vertical line at the right of the plot\nax.axvline(x=len(x)-104, color='blue', linestyle='-')\n\n# Add a vertical line at the right of the plot\nax.axvline(x=len(x)-105, color='blue', linestyle='-')\n\n# Add a vertical line at the right of the plot\nax.axvline(x=len(x)-106, color='blue', linestyle='-')\n\n# Add a vertical line at the right of the plot\nax.axvline(x=len(x)-107, color='blue', linestyle='-')\n\n# Add a vertical line at the right of the plot\nax.axvline(x=len(x)-108, color='blue', linestyle='-')\n\n# Add a vertical line at the right of the plot\nax.axvline(x=len(x)-109, color='blue', linestyle='-')\n\n# Add a vertical line at the right of the plot\nax.axvline(x=len(x)-110, color='blue', linestyle='-')\n\n# Add a vertical line at the right of the plot\nax.axvline(x=len(x)-111, color='blue', linestyle='-')\n\n# Add a vertical line at the right of the plot\nax.axvline(x=len(x)-112, color='blue', linestyle='-')\n\n# Add a vertical line at the right of the plot\nax.axvline(x=len(x)-113, color='blue', linestyle='-')\n\n# Add a vertical line at the right of the plot\nax.axvline(x=len(x)-114, color='blue', linestyle='-')\n\n# Add a vertical line at the right of the plot\nax.axvline(x=len(x)-115, color='blue', linestyle='-')\n\n# Add a vertical line at the right of the plot\nax.axvline(x=len(x)-116, color='blue', linestyle='-')\n\n# Add a vertical line at the right of the plot\nax.axvline(x=len(x)-117, color='blue', linestyle='-')\n\n# Add a vertical line at the right of the plot\nax.axvline(x=len(x)-118, color='blue', linestyle='-')\n\n# Add a vertical line at the right of the plot\nax.axvline(x=len(x)-119, color='blue', linestyle='-')\n\n# Add a vertical line at the right of the plot\nax.axvline(x=len(x)-120, color='blue', linestyle='-')\n\n# Add a vertical line at the right of the plot\nax.axv"}
{"file": "dataset/ori_500/bar_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nx = ['Level 1', 'Level 2', 'Level 3', 'Level 4']\ny = [50, 50, 50, 50]\ncolors = ['yellow', 'blue', 'red', 'pink']\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 3.0))\n\n# Plot the data\nax.bar(x, y, color=colors)\n\n# Set the title and labels\nax.set_title('Player Performance')\nax.set_xlabel('Levels')\nax.set_ylabel('Average Uploads')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_50.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 5.0))\n\n# Set the x-axis labels\nx_labels = ['\u03bb=0.06', '\u03bb=0.08', '\u03bb=0.10', '\u03bb=0.12', '\u03bb=0.14', '\u03bb=0.16', '\u03bb=0.18', '\u03bb=0.20', '\u03bb=0.22', '\u03bb=0.24', '\u03bb=0.26', '\u03bb=0.28', '\u03bb=0.30', '\u03bb=0.32', '\u03bb=0.34', '\u03bb=0.36', '\u03bb=0.38', '\u03bb=0.40', '\u03bb=0.42', '\u03bb=0.44', '\u03bb=0.46', '\u03bb=0.48', '\u03bb=0.50', '\u03bb=0.52', '\u03bb=0.54', '\u03bb=0.56', '\u03bb=0.58', '\u03bb=0.60', '\u03bb=0.62', '\u03bb=0.64', '\u03bb=0.66', '\u03bb=0.68', '\u03bb=0.70', '\u03bb=0.72', '\u03bb=0.74', '\u03bb=0.76', '\u03bb=0.78', '\u03bb=0.80', '\u03bb=0.82', '\u03bb=0.84', '\u03bb=0.86', '\u03bb=0.88', '\u03bb=0.90', '\u03bb=0.92', '\u03bb=0.94', '\u03bb=0.96', '\u03bb=0.98', '\u03bb=1.00']\n\n# Set the y-axis values\ny_values = [39.4, 32.84, 19.66, 18.82, 22, 0, 9, 11, 20, 19, 12, 14, 30, 28, 20, 22, 24, 22, 20, 16, 14, 20, 34.06, 34.6, 34.0, 34.06, 34.6, 34.0, 34.06, 34.6, 34.0, 34.06, 34.6, 34.0, 34.06, 34.6, 34.0, 34.06, 34.6, 34.0, 34.06, 34.6, 34.0, 34.06, 34.6, 34.0, 34.06, 34.6, 34.0, 34.06, 34.6, 34.0, 34.06, 34.6, 34.0, 34.06, 34.6, 34.0, 34.06, 34.6, 34.0, 34.06, 34.6, 34.0, 34.06, 34.6, 34.0, 34.06, 34.6, 34.0, 34.06, 34.6, 34.0, 34.06, 34.6, 34.0, 34.06, 34.6, 34.0, 34.06, 34.6, 34.0, 34.06, 34.6, 34.0, 34.06, 34.6, 34.0, 34.06, 34.6, 34.0, 34.06, 34.6, 34.0, 34.06, 34.6, 34.0, 34.06, 34.6, 34.0, 34.06, 34.6, 34.0, 34.06, 34.6, 34.0, 34.06, 34.6, 34.0, 34.06, 34.6, 34.0, 34.06, 34.6, 34.0, 34.06, 34.6, 34.0, 34.06, 34.6, 34.0, 34.06, 34.6, 34.0, 34.06, 34.6, 34.0, 34.06, 34.6, 34.0, 34.06, 34.6, 34.0, 34.06, 34.6, 34.0, 34.06, 34.6, 34.0, 34.06, 34.6, 34.0, 34.06, 34.6, 34.0, 34.06, 34.6, 34.0, 34.06, 34.6, 34.0, 34.06, 34.6, 34.0, 34.06, 34.6, 34.0, 34.06, 34.6, 34.0, 34.06, 34.6, 34.0, 34.06, 34.6, 34.0, 34.06, 34.6, 34.0, 34.06, 34.6, 34.0, 34.06, 34.6, 34.0, 34.06, 34.6, 34.0, 34.06, 34.6, 34.0, 34.06, 34.6, 34.0, 34.06, 34.6, 34.0, 34.06, 34.6, 34.0, 34.06, 34.6, 34.0, 34.06, 34.6, 34.0, 34.06, 34.6, 34.0, 34.06, 34.6, 34.0, 34.06, 34.6, 34.0, 34.06, 34.6, 34.0, 34.06, 34.6, 34.0, 34.06, 34.6, 34.0, 34.06, 34.6, 34.0, 34.06, 34.6, 34.0, 34.06, 34.6, 34.0, 34.06, 34.6, 34.0, 34.06, 34.6, 34.0, 34.06, 34.6, 34.0, 34.06, 34.6, 34.0, 34.06, 34.6, 34.0, 34.06, 34.6, 34.0, 34.06, 34.6, 34.0, 34.06, 34.6, 34.0, 34.06, 34.6, 34.0, 34.06, 34.6, 34.0, 34.06, 34.6, 34.0, 34.06, 34.6, 34.0, 34.06, 34.6, 34.0, 34.06, 34.6, 34.0, 34.06, 34.6, 34.0, 34.06, 34.6, 34.0, 34.06, 34.6, 34.0, 34.06, 34.6, 34.0, 34.06, 34.6, 34.0, 34.06, 34.6, 34.0, 34.06, 34.6, 34.0, 34.06, 34.6, 34.0, 34.06, 34.6, 34.0, 34.06, 34.6, 34.0, 34.06, 34.6, 34.0, 34.06, 34.6, 34.0, 34.06, 34.6, 34.0, 34.06, 34.6, 34.0, 34.06, 34.6, 34.0, 34.06, 34.6, 34.0, 34.06, 34.6, 34.0, 34.06, 34.6, 34.0, 34.06, 34.6, 34.0, 34.06, 34.6, 34.0, 34.06, 34.6, 34.0, 34.06, 34.6, 34.0, 34.06, 34.6, 34.0, 34.06, 34.6, 34.0, 34.06, 34.6, 34.0, 34.06, 34.6, 34.0, 34.06, 34.6, 34.0, 34.06, 34.6, 34.0, 34.06, 34.6, 34.0, 34.06, 34.6, 34.0, 34.06, 34.6, 34.0, 34.06, 34.6, 34.0, 34.06, 34.6, 34.0, 34.06, 34.6, 34.0, 34.06, 34.6, 34.0, 34.06, 34.6, 34.0, 34.06, 34.6, 34.0, 34.06, 34.6, 34.0, 34.06, 34.6, 34.0, 34.06, 34.6, 34.0, 34.06, 34.6, 34.0, 34.06, 34.6, 34.0, 34.06, 34.6, 34.0, 34.06, 34.6, 34.0, 34.06, 34.6, 34.0, 34.06, 34.6, 34.0, 34.06, 34.6, 34.0, 34.06, 34.6, 34.0, 34.06, 34.6, 34.0, 34.06, 34.6, 34.0, 34.06, 34.6, 34.0, 34.06, 34.6, 34.0, 34.06, 34.6, 34.0, 34.06, 34.6, 34.0, 34.06, 34.6, 34.0, 34.06, 34.6, 34.0, 34.06, 34.6, 34.0, 34.06, 34.6, 34.0, 34.06, 34.6, 34.0, 34.06, 34.6, 34.0, 34.06, 34.6, 34.0, 34.06, 34.6, 34.0, 34.06, 34.6, 34.0, 34.06, 34.6, 34.0, 34.06, 34.6, 34.0, 34.06, 34.6, 34.0, 34.06, 34.6, 34.0, 34.06, 34.6, 34.0, 34.06, 34.6, 34.0, 34.06, 34.6, 34.0, 34.06, 34.6, 34.0, 34.06, 34.6, 34.0, 34.06, 34.6, 34.0, 34.06, 34.6, 34.0, 34.06, 34.6, 34.0, 34.06, 34.6, 34.0, 34.06, 34.6, 34.0, 34.06, 34.6, 34.0, 34.06, 34.6, 34.0, 34.06, 34.6, 34.0, 34.06, 34.6, 34.0, 34.06, 34.6, 34.0, 34.06, 34.6, 34.0, 34.06, 34.6, 34.0, 34.06, 34.6, 34.0, 34.06, 34.6, 34.0, 34.06, 34.6, 34.0, 34.06, 34.6, 34.0, 34.06, 34.6, 34.0, 34.06, 34.6, 34.0, 34.06, 34.6, 34.0, 34.06, 34.6, 34.0, 34.06, 34.6, 34.0, 34.06, 34.6, 34.0, 34.06, 34.6, 34.0, 34.06, 34.6, 34.0, 34.06, 34.6, 34.0, 34.06, 34.6, 34.0, 34.06, 34.6, 34.0, 34.06, 34.6, 34.0, 34.06, 34.6, 34.0, 34.06, 34.6, 34.0, 34.06, 34.6, 34.0, 34.06, 34.6, 34.0, 34.06, 34.6, 34.0, 34.06, 34.6, 34.0, 34."}
{"file": "dataset/ori_500/bar_51.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\ncategories = ['Cleaning / laundry', 'Casting/knitting', 'Baker', 'Carpenter', 'Making Bricks', 'Gardening', 'Construction/renovation', 'Household management', 'Scooter mechanic', 'Farmer']\nvideos = [5375, 4190, 3543, 3216, 2915, 2548, 2343, 2158, 2060, 2008]\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(12.0, 8.0))\nax.bar(categories, videos, color='blue')\n\n# Set the title and labels\nax.set_title('Number of Videos by Profession')\nax.set_xlabel('Profession')\nax.set_ylabel('Number of Videos')\n\n# Rotate the x-axis labels for better visibility\nplt.xticks(rotation=45)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_52.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Sentiment Analysis')\n\n# Set the x-axis label\nax.set_xlabel('synthetic data')\n\n# Set the y-axis label\nax.set_ylabel('human-authored data')\n\n# Create a bar chart with the data\nbars = ax.bar(['greeting', 'request', 'criticism', 'apology', 'persuasion', 'thanking', 'leave-taking'],\n             [8, 31, 24, 7, 10, 7, 10],\n             color='blue')\n\n# Add labels to the bars\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 2), va='bottom')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_53.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Set the title of the plot\nax.set_title('Context: The human body can tolerate only a')\n\n# Set the x-axis label\nax.set_xlabel('Word')\n\n# Set the y-axis label\nax.set_ylabel('Probability')\n\n# Set the x-ticks\nx_ticks = ['small', 'certain', 'little', 'fraction', 'limited', 'a', 'day', 'few', 'new', 'specific', 'substantial', 'tiny', 'very', 'slight', 'large', 'medium', 'tall', 'short', 'long', 'wide', 'high', 'low']\nax.set_xticks(range(len(x_ticks)))\nax.set_xticklabels(x_ticks)\n\n# Set the y-limits\nax.set_ylim([0, 30])\n\n# Set the y-ticks\ny_ticks = [0, 5, 10, 15, 20, 25, 30]\nax.set_yticks(y_ticks)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the text\nax.set_color_cycle(['red', 'blue', 'green', 'orange', 'purple', 'cyan', 'magenta', 'yellow'])\n\n# Set the color of the lines\nax.plot(range(len(x_ticks)), [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2.0, 2.1], 'o-')\nax.plot(range(len(x_ticks)), [0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2.0, 2.1, 2.2], 'o-')\nax.plot(range(len(x_ticks)), [0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2.0, 2.1, 2.2, 2.3], 'o-')\nax.plot(range(len(x_ticks)), [0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2.0, 2.1, 2.2, 2.3, 2.4], 'o-')\nax.plot(range(len(x_ticks)), [0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2.0, 2.1, 2.2, 2.3, 2.4, 2.5], 'o-')\nax.plot(range(len(x_ticks)), [0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2.0, 2.1, 2.2, 2.3, 2.4, 2.5, 2.6], 'o-')\nax.plot(range(len(x_ticks)), [0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2.0, 2.1, 2.2, 2.3, 2.4, 2.5, 2.6, 2.7], 'o-')\nax.plot(range(len(x_ticks)), [0.8, 0.9, 1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2.0, 2.1, 2.2, 2.3, 2.4, 2.5, 2.6, 2.7, 2.8], 'o-')\nax.plot(range(len(x_ticks)), [0.9, 1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2.0, 2.1, 2.2, 2.3, 2.4, 2.5, 2.6, 2.7, 2.8, 2.9], 'o-')\nax.plot(range(len(x_ticks)), [1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2.0, 2.1, 2.2, 2.3, 2.4, 2.5, 2.6, 2.7, 2.8, 2.9, 3.0], 'o-')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_54.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the bar chart\nbrands = ['Convertible', 'Coupe', 'Truck', 'SUV', 'Sedan']\nprobabilities = [0.75, 0.85, 0.90, 0.80, 0.70]\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(6.0, 2.0))\nax.bar(brands, probabilities, color='blue')\n\n# Add title and labels\nax.set_title('Probability of Improvement over VLM Image Encoder Baseline Returns')\nax.set_xlabel('Car Brands')\nax.set_ylabel('Probability')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_55.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nemotions = ['Disapproval', 'Joy', 'Relief', 'Gratitude', 'Annoyance', 'Nervousness', 'Pride', 'Sadness', 'Unboredom', 'Amusement']\nfrequencies = [2.1, 3.0, 3.5, 3.5, 6.0, 6.0, 6.6, 6.7, 7.0, 7.6]\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\nax.bar(emotions, frequencies, color='coral')\n\n# Set the title and labels\nax.set_title('Emotion Frequency')\nax.set_xlabel('Emotion')\nax.set_ylabel('Frequency (%)')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_56.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(12.0, 8.0))\n\n# Set the title of the plot\nax.set_title('Number of Videos by Profession')\n\n# Define the data for the bar chart\nprofessions = ['Making Bricks', 'Carpenter', 'Baker', 'Casting/Knitting', 'Cleaning/Laundry', 'Gardening']\nvideos = [4500, 6000, 7000, 5000, 6500, 8000]\n\n# Create a bar chart with the data\nax.bar(professions, videos)\n\n# Set the x-axis label\nax.set_xlabel('Profession')\n\n# Set the y-axis label\nax.set_ylabel('Number of Videos')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_57.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Set the title of the graph\nax.set_title('Global Economy')\n\n# Set the x-axis label\nax.set_xlabel('Time')\n\n# Set the y-axis label\nax.set_ylabel('Value')\n\n# Define the data for each country\nus_data = [10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50]\nchina_data = [9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49]\neurope_data = [8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48]\nindia_data = [7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47]\n\n# Plot the data for each country\nax.plot(us_data, label='US', color='red')\nax.plot(china_data, label='China', color='blue')\nax.plot(europe_data, label='EU', color='yellow')\nax.plot(india_data, label='India', color='green')\n\n# Add a legend to the plot\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_58.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Set the title of the graph\nax.set_title('Real Estate Prices in Different Cities')\n\n# Set the x-axis label\nax.set_xlabel('Price Range')\n\n# Set the y-axis label\nax.set_ylabel('City')\n\n# Define the data for the bar chart\ncities = ['New York', 'Los Angeles', 'Chicago', 'Houston', 'Phoenix', 'Philadelphia']\nprices = [50, 40, 30, 20, 10, 0]\n\n# Create a bar chart with the data\nbars = ax.barh(cities, prices, color='blue')\n\n# Add labels to each bar\nfor bar in bars:\n    width = bar.get_width()\n    ax.text(width, bar.get_y() + bar.get_height()/2, f'{width}%', ha='left', va='center')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_59.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Set the title of the plot\nax.set_title('Relative Difference in Machine vs. Human Focus on Semantic Categories')\n\n# Create a bar chart\ncategories = ['External Class', 'Argument', 'Loop', 'Conditional Statement', 'Variable Declaration', 'Method Declaration', 'Parameter']\nvalues = [80, 70, 60, 50, 40, 30, 20]\nax.bar(categories, values, color='blue')\n\n# Add a color bar\ncmap = plt.get_cmap('coolwarm')\nnorm = plt.Normalize(min(values), max(values))\nsm = plt.cm.ScalarMappable(cmap=cmap, norm=norm)\nsm.set_array([])\nfig.colorbar(sm)\n\n# Set the x-axis label\nax.set_xlabel('Semantic Category')\n\n# Set the y-axis label\nax.set_ylabel('Difference (%)')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nemotions = ['Disappointment', 'Embarrassment', 'Oblivious', 'Delight', 'Excitement', 'Disapproval', 'Joy', 'Relief', 'Gratitude', 'Annoyance', 'Nervousness', 'Pride', 'Sadness', 'Unboredom', 'Amusement']\nfrequencies = [7, 6, 5, 4, 3, 2, 1, 0.5, 0.3, 0.2, 0.1, 0.05, 0.03, 0.01]\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\nax.bar(emotions, frequencies, color='skyblue')\n\n# Set the title and labels\nax.set_title('Emotion Frequency')\nax.set_xlabel('Emotion')\nax.set_ylabel('Frequency (%)')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_60.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Set the title of the graph\nax.set_title('Yelp')\n\n# Set the x-axis label\nax.set_xlabel('Year')\n\n# Set the y-axis label\nax.set_ylabel('Sentiment Score')\n\n# Define the data for the graph\nx = [-20, -15, -10, -5, 0, 5, 10, 15, 20]\ny = [4.8, 4.6, 4.4, 4.2, 4.0, 3.8, 3.6, 3.4, 3.2]\n\n# Plot the data\nax.plot(x, y, 'ro-')\n\n# Display the graph\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_61.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Set the title of the graph\nax.set_title('Tech Industry Analysis')\n\n# Set the x-axis label\nax.set_xlabel('Year')\n\n# Set the y-axis label\nax.set_ylabel('Value')\n\n# Set the x-axis limits\nax.set_xlim([0, 3250])\n\n# Set the y-axis limits\nax.set_ylim([0, 3250])\n\n# Set the x-axis ticks\nax.set_xticks(np.arange(0, 3251, 500))\n\n# Set the y-axis ticks\nax.set_yticks(np.arange(0, 3251, 500))\n\n# Set the x-axis grid\nax.grid(True)\n\n# Set the y-axis grid\nax.grid(True)\n\n# Set the x-axis tick labels\nax.set_xticklabels(['2000', '2005', '2010', '2015', '2020', '2025', '2030'])\n\n# Set the y-axis tick labels\nax.set_yticklabels(['0', '500', '1000', '1500', '2000', '2500', '3000'])\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='major', labelsize=10)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='major', labelsize=10)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='minor', labelsize=8)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='minor', labelsize=8)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', bottom=True, top=False, labelbottom=True)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', left=True, right=False, labelleft=True)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='minor', length=4, color='r')\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='minor', length=4, color='r')\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='major', length=6, color='b')\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='major', length=6, color='b')\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', width=2, color='g')\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', width=2, color='g')\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', pad=5)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', pad=5)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', rotation=45)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', rotation=0)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', direction='inout')\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', direction='inout')\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', labelcolor='c')\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', labelcolor='m')\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', labelsize=12)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', labelsize=12)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', labelrotation=45)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', labelrotation=0)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', labelpad=5)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', labelpad=5)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', labelcolor='k')\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', labelcolor='k')\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', labelsize=14)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', labelsize=14)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', labelrotation=45)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', labelrotation=0)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', labelpad=5)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', labelpad=5)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', labelcolor='k')\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', labelcolor='k')\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', labelsize=16)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', labelsize=16)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', labelrotation=45)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', labelrotation=0)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', labelpad=5)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', labelpad=5)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', labelcolor='k')\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', labelcolor='k')\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', labelsize=18)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', labelsize=18)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', labelrotation=45)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', labelrotation=0)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', labelpad=5)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', labelpad=5)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', labelcolor='k')\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', labelcolor='k')\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', labelsize=20)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', labelsize=20)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', labelrotation=45)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', labelrotation=0)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', labelpad=5)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', labelpad=5)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', labelcolor='k')\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', labelcolor='k')\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', labelsize=22)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', labelsize=22)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', labelrotation=45)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', labelrotation=0)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', labelpad=5)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', labelpad=5)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', labelcolor='k')\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', labelcolor='k')\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', labelsize=24)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', labelsize=24)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', labelrotation=45)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', labelrotation=0)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', labelpad=5)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', labelpad=5)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', labelcolor='k')\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', labelcolor='k')\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', labelsize=26)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', labelsize=26)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', labelrotation=45)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', labelrotation=0)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', labelpad=5)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', labelpad=5)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', labelcolor='k')\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', labelcolor='k')\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', labelsize=28)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', labelsize=28)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', labelrotation=45)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', labelrotation=0)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', labelpad=5)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', labelpad=5)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', labelcolor='k')\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', labelcolor='k')\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', labelsize=30)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', labelsize=30)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', labelrotation=45)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', labelrotation=0)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', labelpad=5)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', labelpad=5)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', labelcolor='k')\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', labelcolor='k')\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', labelsize=32)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', labelsize=32)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', labelrotation=45)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', labelrotation=0)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', labelpad=5)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', labelpad=5)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', labelcolor='k')\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', labelcolor='k')\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', labelsize=34)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', labelsize=34)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', labelrotation=45)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', labelrotation=0)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', labelpad=5)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', labelpad=5)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', labelcolor='k')\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', labelcolor='k')\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', labelsize=36)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', labelsize=36)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', labelrotation=45)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', labelrotation=0)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', labelpad=5)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', labelpad=5)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', labelcolor='k')\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', labelcolor='k')\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', labelsize=38)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', labelsize=38)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', labelrotation=45)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', labelrotation=0)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', labelpad=5)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', labelpad=5)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', labelcolor='k')\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', labelcolor='k')\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', labelsize=40)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', labelsize=40)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', labelrotation=45)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', labelrotation=0)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', labelpad=5)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', labelpad=5)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', labelcolor='k')\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', labelcolor='k')\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', labelsize=42)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', labelsize=42)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', labelrotation=45)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', labelrotation=0)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', labelpad=5)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', labelpad=5)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', labelcolor='k')\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', labelcolor='k')\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', labelsize=44)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', labelsize=44)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', labelrotation=45)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', labelrotation=0)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', labelpad=5)\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', which='both', labelpad=5)\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', which='both', labelcolor"}
{"file": "dataset/ori_500/bar_62.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Sentiment Analysis')\n\n# Set the x-axis labels\nax.set_xlabel('Sentiment')\nax.set_ylabel('Percentage')\n\n# Set the data for the bar chart\nsentiments = ['greeting', 'request', 'criticism', 'apology', 'persuasion', 'thanking', 'leave-taking']\npercentages = [12, 35, 28, 15, 18, 14, 16]\n\n# Create a bar chart\nbars = ax.bar(sentiments, percentages, color='blue')\n\n# Add text annotations to each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 2), va='bottom')\n\n# Set the y-axis limits\nax.set_ylim(0, 40)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_63.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Set the title of the plot\nax.set_title('Scores by Category Over Time')\n\n# Define the categories and their scores\ncategories = ['Time 0', 'Time 20', 'Time 40', 'Time 60']\nscores = [0.7, 0.6, 0.5, 0.4]\n\n# Plot the data\nax.bar(categories, scores, color='blue')\n\n# Set the x-axis label\nax.set_xlabel('Time')\n\n# Set the y-axis label\nax.set_ylabel('Score')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_64.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(10.0, 7.0))\n\n# Set the title of the plot\nax.set_title('Air Quality Metrics by Region')\n\n# Define the regions and their corresponding air quality metrics\nregions = ['North', 'East', 'South', 'West']\nmetrics = [92.15, 84.32, 76.54, 68.76]\n\n# Create a bar chart with the regions and metrics\nbars = ax.bar(regions, metrics, color='skyblue')\n\n# Add labels to each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 2), ha='center', va='bottom')\n\n# Set the x-axis label\nax.set_xlabel('Regions')\n\n# Set the y-axis label\nax.set_ylabel('Air Quality Metrics (ppm)')\n\n# Set the y-axis limits\nax.set_ylim(0, 100)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_65.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Scores by group and constraint word count')\n\n# Define the data for the bar chart\nbar_width = 0.25\nindex = range(1, 7)\nconstraint_words = ['3 Constraint Words', '5 Constraint Words', '7 Constraint Words', '9 Constraint Words', '11 Constraint Words', '13 Constraint Words']\nscores = [-2.2, -2.0, -1.8, -1.6, -1.4, -1.2]\n\n# Create a bar chart with the scores\nbars = ax.bar(index, scores, bar_width, color='orange')\n\n# Add labels to the bars\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar_width / 2, yval, round(yval, 2), va='bottom')\n\n# Set the x-axis labels\nax.set_xticks([i + bar_width for i in index])\nax.set_xticklabels(constraint_words)\n\n# Set the y-axis label\nax.set_ylabel('Score')\n\n# Set the x-axis limits\nax.set_xlim([min(index)-bar_width, max(index)+bar_width])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_66.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Negative GDP Growth Rates by Country and Year')\n\n# Set the x-axis label\nax.set_xlabel('GDP Growth Rate (%)')\n\n# Set the y-axis label\nax.set_ylabel('Country')\n\n# Set the x-axis limits\nax.set_xlim(-10, 10)\n\n# Set the y-axis limits\nax.set_ylim(0, 10)\n\n# Set the x-axis ticks\nax.set_xticks(range(-10, 11, 2))\n\n# Set the y-axis ticks\nax.set_yticks(range(0, 11, 2))\n\n# Set the x-axis tick labels\nax.set_xticklabels(['-10', '-8', '-6', '-4', '-2', '0', '2', '4', '6', '8', '10'])\n\n# Set the y-axis tick labels\nax.set_yticklabels(['China', 'Germany', 'USA', 'Brazil'])\n\n# Set the color of the x-axis ticks\nax.tick_params(axis='x', colors='red')\n\n# Set the color of the y-axis ticks\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='black', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='black', linestyle='--')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='black', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='black', linestyle='--')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='black', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='black', linestyle='--')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='black', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='black', linestyle='--')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='black', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='black', linestyle='--')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='black', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='black', linestyle='--')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='black', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='black', linestyle='--')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='black', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='black', linestyle='--')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='black', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='black', linestyle='--')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='black', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='black', linestyle='--')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='black', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='black', linestyle='--')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='black', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='black', linestyle='--')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='black', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='black', linestyle='--')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='black', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='black', linestyle='--')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='black', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='black', linestyle='--')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='black', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='black', linestyle='--')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='black', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='black', linestyle='--')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='black', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='black', linestyle='--')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='black', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='black', linestyle='--')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='black', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='black', linestyle='--')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='black', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='black', linestyle='--')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='black', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='black', linestyle='--')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='black', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='black', linestyle='--')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='black', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='black', linestyle='--')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='black', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='black', linestyle='--')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='black', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='black', linestyle='--')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='black', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='black', linestyle='--')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='black', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='black', linestyle='--')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='black', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='black', linestyle='--')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='black', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='black', linestyle='--')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='black', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='black', linestyle='--')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='black', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='black', linestyle='--')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='black', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='black', linestyle='--')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='black', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='black', linestyle='--')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='black', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='black', linestyle='--')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='black', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='black', linestyle='--')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='black', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='black', linestyle='--')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='black', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='black', linestyle='--')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='black', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='black', linestyle='--')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='black', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='black', linestyle='--')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='black', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='black', linestyle='--')\n\n# Set the color"}
{"file": "dataset/ori_500/bar_67.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nmodels = ['GPT4V', 'OSCAR', 'LLaMA', 'BLIP2', 'BLIP1', 'Video-LLaMA', 'Lavila']\nperformance = [82.5, 73.93, 31.79, 4.64, 4.64, 0.71, 0.0]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(12.0, 8.0))\n\n# Plot the data\nax.bar(models, performance, color='blue')\n\n# Set the title of the plot\nax.set_title('Human Study')\n\n# Set the x-axis label\nax.set_xlabel('Model')\n\n# Set the y-axis label\nax.set_ylabel('Performance (%)')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_68.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ncategories = ['Traffic Flow', 'Accident Rate', 'Public Transport Usage', 'Road Condition']\nvalues = [50, 20, 40, 80]\ncolors = ['blue', 'cyan', 'green', 'purple']\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(10, 6))\nax.bar(categories, values, color=colors)\n\n# Set the title and labels\nax.set_title('Stacked Bar Chart of Transportation Data')\nax.set_xlabel('Categories')\nax.set_ylabel('Values')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_69.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(10, 7))\n\n# Set the title of the chart\nax.set_title('Enhanced Stacked Bar Chart with Textures and Annotated Values')\n\n# Define the categories and their sales data\ncategories = ['Category A', 'Category B', 'Category C', 'Category D', 'Category E', 'Category F', 'Category G']\nsales_data = [80, 60, 40, 20, 0, 0, 0]\n\n# Create a stacked bar chart\nbar_width = 0.5\nbar_positions = range(len(categories))\nbar_colors = ['red', 'orange', 'pink', 'yellow', 'lightblue', 'green', 'purple']\n\nfor i, color in enumerate(bar_colors):\n    ax.bar(bar_positions, sales_data, width=bar_width, bottom=[sum(sales_data[:j]) for j in range(i+1)], color=color)\n\n# Add text annotations to each bar\nfor i, v in enumerate(sales_data):\n    ax.text(i, v + 1, str(v), ha='center', va='bottom')\n\n# Set the x-axis labels\nax.set_xticks(bar_positions)\nax.set_xticklabels(categories)\n\n# Set the y-axis limits\nax.set_ylim(0, 100)\n\n# Add a horizontal line at the median value\nmedian_value = sum(sales_data) / len(sales_data)\nax.axhline(y=median_value, color='gray', linestyle='-')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ncategories = ['SEQ', 'REPLAY', 'MTL']\naccuracies = [0.83, 0.6, 0.11]\nembeddings = [0.25, 0.25, 0.00]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the background color of the plot\nax.set_facecolor('#E0E0E0')\n\n# Set the title of the plot\nax.set_title('Feature Embedding Distance')\n\n# Set the x-axis label\nax.set_xlabel('Categories')\n\n# Set the y-axis label\nax.set_ylabel('Feature Embedding Distance (%)')\n\n# Set the x-ticks\nax.set_xticks(range(len(categories)))\n\n# Set the x-tick labels\nax.set_xticklabels(categories)\n\n# Set the y-ticks\nax.set_yticks(range(0, 100, 10))\n\n# Set the y-tick labels\nax.set_yticklabels([str(i) for i in range(0, 100, 10)])\n\n# Set the color of the bars\nbar_colors = ['#7F7F7F', '#CFCFCF', '#F0F0F0']\n\n# Set the width of the bars\nbar_width = 0.5\n\n# Plot the bars\nfor i in range(len(categories)):\n    ax.bar(categories[i], accuracies[i], bar_width, color=bar_colors[i])\n\n# Add a legend\nax.legend(['Probing FGT', 'Observed FGT', 'Feature Embedding Distance'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_70.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Set the title of the plot\nax.set_title('Human Labeling and Agreement Bias Checking')\n\n# Set the x-axis label\nax.set_xlabel('Human Annotator')\n\n# Set the y-axis label\nax.set_ylabel('Scores')\n\n# Define the data for the plot\nx = ['1', '2', '3', '4', '5', '6']\ny = [10, 8, 12, 10, 6, 8]\ncolors = ['cyan', 'lightgreen', 'lightblue', 'lightgrey', 'lightyellow', 'lightpink']\n\n# Plot the data\nfor i in range(len(x)):\n    ax.barh(i, y[i], color=colors[i])\n\n# Add a legend\nax.legend(['Score 1', 'Score 2', 'Score 3', 'Score 4', 'Score 5'], loc='upper right')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_71.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 4.0))\n\n# Set the title of the plot\nax.set_title('Product Sales Data')\n\n# Set the x-axis label\nax.set_xlabel('Products')\n\n# Set the y-axis label\nax.set_ylabel('Sales')\n\n# Set the data for the plot\nproducts = ['coreutils', 'gzip', 'scp', 'libq', 'mcf', 'omnet.', 'perl.']\nsales = [100, 90, 80, 70, 60, 50, 40]\n\n# Plot the data\nax.plot(products, sales, marker='o')\n\n# Add a legend\nax.legend(['RegOpt', 'BIopt', 'LoopOpt'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_72.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nmodels = ['Bactrian-X EN', 'Lima-X DE', 'Bactrian-X FR', 'Lima-X IT', 'Bactrian-X ES']\nperformance = [3.5, 2.3, 4.4, 1.3, 0.7]\nlanguages = ['EN', 'DE', 'FR', 'IT', 'ES']\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Plot the performance data\nax.bar(models, performance, color='blue')\n\n# Add a title and labels\nax.set_title('Model Performance Improvement by Language')\nax.set_xlabel('Model with Language')\nax.set_ylabel('Performance [%]')\n\n# Add a color bar for the languages\ncbar = fig.colorbar(ax.images[0])\ncbar.set_label('Language')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_73.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Set the title of the graph\nax.set_title('Dow Jones Index vs Nasdaq Index')\n\n# Set the x-axis label\nax.set_xlabel('Fiscal Quarter')\n\n# Set the y-axis label\nax.set_ylabel('Index Change (%)')\n\n# Set the x-ticks\nax.set_xticks([1, 2, 3, 4, 5])\n\n# Set the x-tick labels\nax.set_xticklabels(['Q1', 'Q2', 'Q3', 'Q4', 'Q5'])\n\n# Set the y-limits\nax.set_ylim(-5, 5)\n\n# Set the y-ticks\nax.set_yticks([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5])\n\n# Set the y-tick labels\nax.set_yticklabels(['-5', '-4', '-3', '-2', '-1', '0', '1', '2', '3', '4', '5'])\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the"}
{"file": "dataset/ori_500/bar_74.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\nx = ['E16.6', 'L26.8', 'D19.7', 'L22.2']\ny = [39.4, 35.18, 30.84, 34.06]\ny2 = [35.1, 34.06, 33.0, 32.0, 30.0, 28.0, 26.82, 24.27, 22.2, 20.0, 18.84, 16.96, 14.84, 12.84, 10.84, 8.84, 6.84, 4.84, 2.84, 0.84]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Plot the data\nax.plot(x, y, label='Series 1')\nax.plot(x, y2, label='Series 2')\n\n# Set the title and labels\nax.set_title('Stock Prices')\nax.set_xlabel('Date')\nax.set_ylabel('Price')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_75.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ntruthful = [30.1, 34, 43.7]\nmisleading = [46.3, 57.9, 53.8, 20, 19.4]\nx = range(len(truthful))\n\n# Create figure and axis objects\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Plot data\nax.bar(x, truthful, color='pink', label='Truthful Recall')\nax.bar(x, misleading, bottom=truthful, color='black', label='Misleading Recall')\n\n# Set labels and title\nax.set_xlabel('Recall')\nax.set_ylabel('Percentage')\nax.set_title('Truthful:Misleading = 2:1')\nax.legend()\n\n# Set y-axis limits\nax.set_ylim([0, 60])\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_76.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Environmental Impact by Sector')\n\n# Set the x-axis label\nax.set_xlabel('Industry Sectors')\n\n# Set the y-axis label\nax.set_ylabel('Pollution Emissions (thousands of metric tons)')\n\n# Set the x-ticks\nax.set_xticks([0, 1, 2, 3, 4])\nax.set_xticklabels(['Light Industry', 'Heavy Industry', 'Transportation', 'Residential', 'Manufacturing'])\n\n# Set the y-ticks\nax.set_yticks(range(-1600, 1600, 200))\nax.set_yticklabels(['-1600', '-1400', '-1200', '-1000', '-800', '-600', '-400', '-200', '0', '200', '400', '600', '800', '1000', '1200', '1400', '1600'])\n\n# Set the grid lines\nax.grid(True)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the border\nax.spines['top'].set_color('gray')\nax.spines['bottom'].set_color('gray')\nax.spines['left'].set_color('gray')\nax.spines['right'].set_color('gray')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='gray')\n\n# Set the color of the title\nax.title.set_color('gray')\n\n# Set the color of the x-label\nax.xaxis.label.set_color('gray')\n\n# Set the color of the y-label\nax.yaxis.label.set_color('gray')\n\n# Set the color of the x-tick labels\nax.get_xticklabels()[0].set_color('blue')\nax.get_xticklabels()[1].set_color('orange')\n\n# Set the color of the y-tick labels\nax.get_yticklabels()[0].set_color('blue')\nax.get_yticklabels()[1].set_color('orange')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the border\nax.spines['top'].set_color('gray')\nax.spines['bottom'].set_color('gray')\nax.spines['left'].set_color('gray')\nax.spines['right'].set_color('gray')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='gray')\n\n# Set the color of the title\nax.title.set_color('gray')\n\n# Set the color of the x-label\nax.xaxis.label.set_color('gray')\n\n# Set the color of the y-label\nax.yaxis.label.set_color('gray')\n\n# Set the color of the x-tick labels\nax.get_xticklabels()[0].set_color('blue')\nax.get_xticklabels()[1].set_color('orange')\n\n# Set the color of the y-tick labels\nax.get_yticklabels()[0].set_color('blue')\nax.get_yticklabels()[1].set_color('orange')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the border\nax.spines['top'].set_color('gray')\nax.spines['bottom'].set_color('gray')\nax.spines['left'].set_color('gray')\nax.spines['right'].set_color('gray')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='gray')\n\n# Set the color of the title\nax.title.set_color('gray')\n\n# Set the color of the x-label\nax.xaxis.label.set_color('gray')\n\n# Set the color of the y-label\nax.yaxis.label.set_color('gray')\n\n# Set the color of the x-tick labels\nax.get_xticklabels()[0].set_color('blue')\nax.get_xticklabels()[1].set_color('orange')\n\n# Set the color of the y-tick labels\nax.get_yticklabels()[0].set_color('blue')\nax.get_yticklabels()[1].set_color('orange')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the border\nax.spines['top'].set_color('gray')\nax.spines['bottom'].set_color('gray')\nax.spines['left'].set_color('gray')\nax.spines['right'].set_color('gray')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='gray')\n\n# Set the color of the title\nax.title.set_color('gray')\n\n# Set the color of the x-label\nax.xaxis.label.set_color('gray')\n\n# Set the color of the y-label\nax.yaxis.label.set_color('gray')\n\n# Set the color of the x-tick labels\nax.get_xticklabels()[0].set_color('blue')\nax.get_xticklabels()[1].set_color('orange')\n\n# Set the color of the y-tick labels\nax.get_yticklabels()[0].set_color('blue')\nax.get_yticklabels()[1].set_color('orange')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the border\nax.spines['top'].set_color('gray')\nax.spines['bottom'].set_color('gray')\nax.spines['left'].set_color('gray')\nax.spines['right'].set_color('gray')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='gray')\n\n# Set the color of the title\nax.title.set_color('gray')\n\n# Set the color of the x-label\nax.xaxis.label.set_color('gray')\n\n# Set the color of the y-label\nax.yaxis.label.set_color('gray')\n\n# Set the color of the x-tick labels\nax.get_xticklabels()[0].set_color('blue')\nax.get_xticklabels()[1].set_color('orange')\n\n# Set the color of the y-tick labels\nax.get_yticklabels()[0].set_color('blue')\nax.get_yticklabels()[1].set_color('orange')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the border\nax.spines['top'].set_color('gray')\nax.spines['bottom'].set_color('gray')\nax.spines['left'].set_color('gray')\nax.spines['right'].set_color('gray')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='gray')\n\n# Set the color of the title\nax.title.set_color('gray')\n\n# Set the color of the x-label\nax.xaxis.label.set_color('gray')\n\n# Set the color of the y-label\nax.yaxis.label.set_color('gray')\n\n# Set the color of the x-tick labels\nax.get_xticklabels()[0].set_color('blue')\nax.get_xticklabels()[1].set_color('orange')\n\n# Set the color of the y-tick labels\nax.get_yticklabels()[0].set_color('blue')\nax.get_yticklabels()[1].set_color('orange')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the border\nax.spines['top'].set_color('gray')\nax.spines['bottom'].set_color('gray')\nax.spines['left'].set_color('gray')\nax.spines['right'].set_color('gray')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='gray')\n\n# Set the color of the title\nax.title.set_color('gray')\n\n# Set the color of the x-label\nax.xaxis.label.set_color('gray')\n\n# Set the color of the y-label\nax.yaxis.label.set_color('gray')\n\n# Set the color of the x-tick labels\nax.get_xticklabels()[0].set_color('blue')\nax.get_xticklabels()[1].set_color('orange')\n\n# Set the color of the y-tick labels\nax.get_yticklabels()[0].set_color('blue')\nax.get_yticklabels()[1].set_color('orange')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the border\nax.spines['top'].set_color('gray')\nax.spines['bottom'].set_color('gray')\nax.spines['left'].set_color('gray')\nax.spines['right'].set_color('gray')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='gray')\n\n# Set the color of the title\nax.title.set_color('gray')\n\n# Set the color of the x-label\nax.xaxis.label.set_color('gray')\n\n# Set the color of the y-label\nax.yaxis.label.set_color('gray')\n\n# Set the color of the x-tick labels\nax.get_xticklabels()[0].set_color('blue')\nax.get_xticklabels()[1].set_color('orange')\n\n# Set the color of the y-tick labels\nax.get_yticklabels()[0].set_color('blue')\nax.get_yticklabels()[1].set_color('orange')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the border\nax.spines['top'].set_color('gray')\nax.spines['bottom'].set_color('gray')\nax.spines['left'].set_color('gray')\nax.spines['right'].set_color('gray')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='gray')\n\n# Set the color of the title\nax.title.set_color('gray')\n\n# Set the color of the x-label\nax.xaxis.label.set_color('gray')\n\n# Set the color of the y-label\nax.yaxis.label.set_color('gray')\n\n# Set the color of the x-tick labels\nax.get_xticklabels()[0].set_color('blue')\nax.get_xticklabels()[1].set_color('orange')\n\n# Set the color of the y-tick labels\nax.get_yticklabels()[0].set_color('blue')\nax.get_yticklabels()[1].set_color('orange')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the border\nax.spines['top'].set_color('gray')\nax.spines['bottom'].set_color('gray')\nax.spines['left'].set_color('gray')\nax.spines['right'].set_color('gray')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='gray')\n\n# Set the color of the title\nax.title.set_color('gray')\n\n# Set the color of the x-label\nax.xaxis.label.set_color('gray')\n\n# Set the color of the y-label\nax.yaxis.label.set_color('gray')\n\n# Set the color of the x-tick labels\nax.get_xticklabels()[0].set_color('blue')\nax.get_xticklabels()[1].set_color('orange')\n\n# Set the color of the y-tick labels\nax.get_yticklabels()[0].set_color('blue')\nax.get_yticklabels()[1].set_color('orange')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the border\nax.spines['top'].set_color('gray')\nax.spines['bottom'].set_color('gray')\nax.spines['left'].set_color('gray')\nax.spines['right'].set_color('gray')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='gray')\n\n# Set the color of the title\nax.title.set_color('gray')\n\n# Set the color of the x-label\nax.xaxis.label.set_color('gray')\n\n# Set the color of the y-label\nax.yaxis.label.set_color('gray')\n\n# Set the color of the x-tick labels\nax.get_xticklabels()[0].set_color('blue')\nax.get_xticklabels()[1].set_color('orange')\n\n# Set the color of the y-tick labels\nax.get_yticklabels()[0].set_color('blue')\nax.get_yticklabels()[1].set_color('orange')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the border\nax.spines['top'].set_color('gray')\nax.spines['bottom'].set_color('gray')\nax.spines['left'].set_color('gray')\nax.spines['right'].set_color('gray')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='gray')\n\n# Set the color of the title\nax.title.set_color('gray')\n\n# Set the color of the x-label\nax.xaxis.label.set_color('gray')\n\n# Set the color of the y-label\nax.yaxis.label.set_color('gray')\n\n# Set the color of the x-tick labels\nax.get_xticklabels()[0].set_color('blue')\nax.get_xticklabels()[1].set_color('orange')\n\n# Set the color of the y-tick labels\nax.get_yticklabels()[0].set_color('blue')\nax.get_yticklabels()[1].set_color('orange')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the border\nax.spines['top'].set_color('gray')\nax.spines['bottom'].set_color('gray')\nax.spines['left'].set_color('gray')\nax.spines['right'].set_color('gray')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='gray')\n\n# Set the color of the title\nax.title.set_color('gray')\n\n# Set the color of the x-label\nax.xaxis.label.set_color('gray')\n\n# Set the color of the y-label\nax.yaxis.label.set_color('gray')\n\n# Set the color of the x-tick labels\nax.get_xticklabels()[0].set_color('blue')\nax.get_xticklabels()[1].set_color('orange')\n\n# Set the color of the y-tick labels\nax.get_yticklabels()[0].set_color('blue')\nax.get_yticklabels()[1].set_color('orange')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the border\nax.spines['top'].set_color('gray')\nax.spines['bottom'].set_color('gray')\nax.spines['left'].set_color('gray')\nax.spines['right'].set_color('gray')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='gray')\n\n# Set the color of the title\nax.title.set_color('gray')\n\n# Set the color of the x-label\nax.xaxis.label.set_color('gray')\n\n# Set the color of the y-label\nax.yaxis.label.set_color('gray')\n\n# Set the color of the x-tick labels\nax.get_xticklabels()[0].set_color('blue')\nax.get_xticklabels()[1].set_color('orange')\n\n# Set the color of the y-tick labels\nax.get_yticklabels()[0].set_color('blue')\nax.get_yticklabels()[1].set_color('orange')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the border\nax.spines['top'].set_color('gray')\nax.spines['bottom'].set_color('gray')\nax.spines['left'].set_color('gray')\nax.spines['right'].set_color('gray')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='gray')\n\n# Set the color of the title\nax.title.set_color('gray')\n\n# Set the color of the x-label\nax.xaxis.label.set_color('gray')\n\n# Set the color of the y-label\nax.yaxis.label.set_color('gray')\n\n# Set the color of the x-tick labels\nax.get_xticklabels()[0].set_color('blue')\nax.get_xticklabels()[1].set_color('orange')\n\n# Set the color of the y-tick labels\nax.get_yticklabels()[0].set_color('blue')\nax.get_yticklabels()[1].set_color('orange')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the border\nax.spines['top'].set_color('gray')\nax.spines['bottom'].set_color('gray')\nax.spines['left'].set_color('gray')\nax.spines['right'].set_color('gray')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='gray')\n\n# Set the color of the title\nax.title.set_color('gray')\n\n# Set the color of the x-label\nax.xaxis.label.set_color('gray')\n\n# Set the color of the y-label\nax.yaxis.label.set_color('gray')\n\n# Set the color of the x-tick labels\nax.get_xticklabels()[0].set_color('blue')\nax.get_xticklabels()[1].set_color('orange')\n\n# Set the color of the y-tick labels\nax.get_yticklabels"}
{"file": "dataset/ori_500/bar_77.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 4.0))\n\n# Set the title of the plot\nax.set_title('Average City Temperatures')\n\n# Create a bar chart with the data\nax.bar(['Beijing', 'Shanghai', 'Guangzhou', 'Shenzhen', 'Chengdu'], [12, 15, 18, 22, 17], color='skyblue')\n\n# Set the x-axis label\nax.set_xlabel('City')\n\n# Set the y-axis label\nax.set_ylabel('Average Temperature (\u00b0C)')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_78.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Set the title of the plot\nax.set_title('Annual Pollution Emission Reductions')\n\n# Set the x-axis label\nax.set_xlabel('Regions')\n\n# Set the y-axis label\nax.set_ylabel('Emissions (in tons)')\n\n# Define the data for the plot\nregions = ['Region 1', 'Region 2', 'Region 3', 'Region 4']\nemissions_2020 = [120, 150, 180, 210]\nemissions_2021 = [130, 160, 190, 220]\n\n# Plot the data\nax.plot(regions, emissions_2020, color='red', label='2020 Emissions')\nax.plot(regions, emissions_2021, color='blue', label='2021 Emissions')\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_79.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the pie charts\ndata = [26, 32, 13, 10, 29, 17, 15, 10, 22, 35, 37, 19, 11, 9, 14, 13, 12, 10, 8, 7, 6, 5, 4, 3, 2, 1]\nlabels = ['Question 1', 'Question 2', 'Question 3', 'Question 4', 'Question 5']\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Plot the pie chart\nax.pie(data, labels=labels, autopct='%1.1f%%')\n\n# Set the title of the plot\nax.set_title('Survey Results')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Set the title of the graph\nax.set_title('Top-10 superfamily accuracy')\n\n# Set the x-axis label\nax.set_xlabel('Top-10 superfamily')\n\n# Set the y-axis label\nax.set_ylabel('Accuracy')\n\n# Define the data for the graph\nx = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10']\ny = [0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1, 0.0]\n\n# Plot the data\nax.plot(x, y, color='blue')\n\n# Add a horizontal line at the mean accuracy\nmean_accuracy = sum(y) / len(y)\nax.axhline(mean_accuracy, color='red')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_80.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Set the title of the plot\nax.set_title('Taboo')\n\n# Create a color bar for the legend\ncbar = fig.colorbar(plt.cm.ScalarMappable(cmap='Blues'), ax=ax)\n\n# Create a scatter plot with random data\nx = np.random.rand(10)\ny = np.random.rand(10)\nax.scatter(x, y, c=y, cmap='Blues')\n\n# Set the x-axis label\nax.set_xlabel('Num of Constraint Words')\n\n# Set the y-axis label\nax.set_ylabel('Score')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_81.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nbrands = ['LLaMA', 'Vicuna', 'Alpaca', 'WizardLM']\nrewards = [46.3, 56.9, 53.8, 43.7]\nmisleading_rewards = [30.1, 34, 40, 20]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 4.0))\n\n# Plot the data\nax.bar(brands, rewards, color='blue')\nax.bar(brands, misleading_rewards, bottom=rewards, color='pink')\n\n# Add labels and title\nax.set_xlabel('Brands')\nax.set_ylabel('Misleading Recalls')\nax.set_title('Truthful: Misleading Recalls = 2:0')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_82.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the bar chart\nbrands = ['Toyota', 'Honda', 'Ford', 'Chevrolet', 'Dodge', 'BMW', 'Audi', 'Mercedes-Benz', 'Jaguar', 'Lexus']\nprobabilities = [25, 30, 15, 20, 25, 28, 22, 24, 26, 29]\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Set the title of the chart\nax.set_title('Probability of Improvement over VLM Image Encoder Baseline Returns')\n\n# Set the x-axis label\nax.set_xlabel('Brands')\n\n# Set the y-axis label\nax.set_ylabel('Probability of Improvement')\n\n# Create a bar chart\nax.bar(brands, probabilities, color='blue')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_83.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the bar chart\nemotions = ['Disapproval', 'Joy', 'Relief', 'Gratitude', 'Annoyance', 'Nervousness', 'Pride', 'Sadness', 'Unbothered', 'Amusement']\nmetrics = [7.6, 7.1, 7.0, 7.0, 6.5, 6.5, 6.0, 6.0, 5.5, 5.5, 5.0, 5.0, 4.6, 4.6, 4.0, 3.7, 3.0, 2.6]\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(10.0, 4.0))\n\n# Plot the bar chart\nax.bar(emotions, metrics, color='red')\n\n# Set the title and labels\nax.set_title('Emotion Frequency Metrics')\nax.set_xlabel('Emotions')\nax.set_ylabel('Frequency Metric 1 (%)')\n\n# Rotate the x-axis labels for better visibility\nplt.xticks(rotation=90)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_84.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Set the background color of the plot\nax.set_facecolor('lightgrey')\n\n# Set the title of the plot\nax.set_title('Top 3 Video Game Scores')\n\n# Set the x-axis label\nax.set_xlabel('Time (in minutes)')\n\n# Set the y-axis label\nax.set_ylabel('Score')\n\n# Set the x-axis limits\nax.set_xlim(0, 10)\n\n# Set the y-axis limits\nax.set_ylim(0, 10)\n\n# Set the x-axis ticks\nax.set_xticks([0, 2, 4, 6, 8, 10])\n\n# Set the y-axis ticks\nax.set_yticks([0, 2, 4, 6, 8, 10])\n\n# Set the x-axis tick labels\nax.set_xticklabels(['0', '2', '4', '6', '8', '10'])\n\n# Set the y-axis tick labels\nax.set_yticklabels(['0', '2', '4', '6', '8', '10'])\n\n# Set the x-axis grid lines\nax.grid(True)\n\n# Set the y-axis grid lines\nax.grid(True)\n\n# Set the x-axis grid line style\nax.xaxis.grid(True, linestyle='--', linewidth=0.5)\n\n# Set the y-axis grid line style\nax.yaxis.grid(True, linestyle='--', linewidth=0.5)\n\n# Set the x-axis grid line color\nax.xaxis.grid(True, color='grey')\n\n# Set the y-axis grid line color\nax.yaxis.grid(True, color='grey')\n\n# Set the x-axis grid line alpha\nax.xaxis.grid(True, alpha=0.7)\n\n# Set the y-axis grid line alpha\nax.yaxis.grid(True, alpha=0.7)\n\n# Set the x-axis grid line linestyle\nax.xaxis.grid(True, linestyle='--')\n\n# Set the y-axis grid line linestyle\nax.yaxis.grid(True, linestyle='--')\n\n# Set the x-axis grid line linewidth\nax.xaxis.grid(True, linewidth=0.5)\n\n# Set the y-axis grid line linewidth\nax.yaxis.grid(True, linewidth=0.5)\n\n# Set the x-axis grid line color\nax.xaxis.grid(True, color='grey')\n\n# Set the y-axis grid line color\nax.yaxis.grid(True, color='grey')\n\n# Set the x-axis grid line alpha\nax.xaxis.grid(True, alpha=0.7)\n\n# Set the y-axis grid line alpha\nax.yaxis.grid(True, alpha=0.7)\n\n# Set the x-axis grid line linestyle\nax.xaxis.grid(True, linestyle='--')\n\n# Set the y-axis grid line linestyle\nax.yaxis.grid(True, linestyle='--')\n\n# Set the x-axis grid line linewidth\nax.xaxis.grid(True, linewidth=0.5)\n\n# Set the y-axis grid line linewidth\nax.yaxis.grid(True, linewidth=0.5)\n\n# Set the x-axis grid line color\nax.xaxis.grid(True, color='grey')\n\n# Set the y-axis grid line color\nax.yaxis.grid(True, color='grey')\n\n# Set the x-axis grid line alpha\nax.xaxis.grid(True, alpha=0.7)\n\n# Set the y-axis grid line alpha\nax.yaxis.grid(True, alpha=0.7)\n\n# Set the x-axis grid line linestyle\nax.xaxis.grid(True, linestyle='--')\n\n# Set the y-axis grid line linestyle\nax.yaxis.grid(True, linestyle='--')\n\n# Set the x-axis grid line linewidth\nax.xaxis.grid(True, linewidth=0.5)\n\n# Set the y-axis grid line linewidth\nax.yaxis.grid(True, linewidth=0.5)\n\n# Set the x-axis grid line color\nax.xaxis.grid(True, color='grey')\n\n# Set the y-axis grid line color\nax.yaxis.grid(True, color='grey')\n\n# Set the x-axis grid line alpha\nax.xaxis.grid(True, alpha=0.7)\n\n# Set the y-axis grid line alpha\nax.yaxis.grid(True, alpha=0.7)\n\n# Set the x-axis grid line linestyle\nax.xaxis.grid(True, linestyle='--')\n\n# Set the y-axis grid line linestyle\nax.yaxis.grid(True, linestyle='--')\n\n# Set the x-axis grid line linewidth\nax.xaxis.grid(True, linewidth=0.5)\n\n# Set the y-axis grid line linewidth\nax.yaxis.grid(True, linewidth=0.5)\n\n# Set the x-axis grid line color\nax.xaxis.grid(True, color='grey')\n\n# Set the y-axis grid line color\nax.yaxis.grid(True, color='grey')\n\n# Set the x-axis grid line alpha\nax.xaxis.grid(True, alpha=0.7)\n\n# Set the y-axis grid line alpha\nax.yaxis.grid(True, alpha=0.7)\n\n# Set the x-axis grid line linestyle\nax.xaxis.grid(True, linestyle='--')\n\n# Set the y-axis grid line linestyle\nax.yaxis.grid(True, linestyle='--')\n\n# Set the x-axis grid line linewidth\nax.xaxis.grid(True, linewidth=0.5)\n\n# Set the y-axis grid line linewidth\nax.yaxis.grid(True, linewidth=0.5)\n\n# Set the x-axis grid line color\nax.xaxis.grid(True, color='grey')\n\n# Set the y-axis grid line color\nax.yaxis.grid(True, color='grey')\n\n# Set the x-axis grid line alpha\nax.xaxis.grid(True, alpha=0.7)\n\n# Set the y-axis grid line alpha\nax.yaxis.grid(True, alpha=0.7)\n\n# Set the x-axis grid line linestyle\nax.xaxis.grid(True, linestyle='--')\n\n# Set the y-axis grid line linestyle\nax.yaxis.grid(True, linestyle='--')\n\n# Set the x-axis grid line linewidth\nax.xaxis.grid(True, linewidth=0.5)\n\n# Set the y-axis grid line linewidth\nax.yaxis.grid(True, linewidth=0.5)\n\n# Set the x-axis grid line color\nax.xaxis.grid(True, color='grey')\n\n# Set the y-axis grid line color\nax.yaxis.grid(True, color='grey')\n\n# Set the x-axis grid line alpha\nax.xaxis.grid(True, alpha=0.7)\n\n# Set the y-axis grid line alpha\nax.yaxis.grid(True, alpha=0.7)\n\n# Set the x-axis grid line linestyle\nax.xaxis.grid(True, linestyle='--')\n\n# Set the y-axis grid line linestyle\nax.yaxis.grid(True, linestyle='--')\n\n# Set the x-axis grid line linewidth\nax.xaxis.grid(True, linewidth=0.5)\n\n# Set the y-axis grid line linewidth\nax.yaxis.grid(True, linewidth=0.5)\n\n# Set the x-axis grid line color\nax.xaxis.grid(True, color='grey')\n\n# Set the y-axis grid line color\nax.yaxis.grid(True, color='grey')\n\n# Set the x-axis grid line alpha\nax.xaxis.grid(True, alpha=0.7)\n\n# Set the y-axis grid line alpha\nax.yaxis.grid(True, alpha=0.7)\n\n# Set the x-axis grid line linestyle\nax.xaxis.grid(True, linestyle='--')\n\n# Set the y-axis grid line linestyle\nax.yaxis.grid(True, linestyle='--')\n\n# Set the x-axis grid line linewidth\nax.xaxis.grid(True, linewidth=0.5)\n\n# Set the y-axis grid line linewidth\nax.yaxis.grid(True, linewidth=0.5)\n\n# Set the x-axis grid line color\nax.xaxis.grid(True, color='grey')\n\n# Set the y-axis grid line color\nax.yaxis.grid(True, color='grey')\n\n# Set the x-axis grid line alpha\nax.xaxis.grid(True, alpha=0.7)\n\n# Set the y-axis grid line alpha\nax.yaxis.grid(True, alpha=0.7)\n\n# Set the x-axis grid line linestyle\nax.xaxis.grid(True, linestyle='--')\n\n# Set the y-axis grid line linestyle\nax.yaxis.grid(True, linestyle='--')\n\n# Set the x-axis grid line linewidth\nax.xaxis.grid(True, linewidth=0.5)\n\n# Set the y-axis grid line linewidth\nax.yaxis.grid(True, linewidth=0.5)\n\n# Set the x-axis grid line color\nax.xaxis.grid(True, color='grey')\n\n# Set the y-axis grid line color\nax.yaxis.grid(True, color='grey')\n\n# Set the x-axis grid line alpha\nax.xaxis.grid(True, alpha=0.7)\n\n# Set the y-axis grid line alpha\nax.yaxis.grid(True, alpha=0.7)\n\n# Set the x-axis grid line linestyle\nax.xaxis.grid(True, linestyle='--')\n\n# Set the y-axis grid line linestyle\nax.yaxis.grid(True, linestyle='--')\n\n# Set the x-axis grid line linewidth\nax.xaxis.grid(True, linewidth=0.5)\n\n# Set the y-axis grid line linewidth\nax.yaxis.grid(True, linewidth=0.5)\n\n# Set the x-axis grid line color\nax.xaxis.grid(True, color='grey')\n\n# Set the y-axis grid line color\nax.yaxis.grid(True, color='grey')\n\n# Set the x-axis grid line alpha\nax.xaxis.grid(True, alpha=0.7)\n\n# Set the y-axis grid line alpha\nax.yaxis.grid(True, alpha=0.7)\n\n# Set the x-axis grid line linestyle\nax.xaxis.grid(True, linestyle='--')\n\n# Set the y-axis grid line linestyle\nax.yaxis.grid(True, linestyle='--')\n\n# Set the x-axis grid line linewidth\nax.xaxis.grid(True, linewidth=0.5)\n\n# Set the y-axis grid line linewidth\nax.yaxis.grid(True, linewidth=0.5)\n\n# Set the x-axis grid line color\nax.xaxis.grid(True, color='grey')\n\n# Set the y-axis grid line color\nax.yaxis.grid(True, color='grey')\n\n# Set the x-axis grid line alpha\nax.xaxis.grid(True, alpha=0.7)\n\n# Set the y-axis grid line alpha\nax.yaxis.grid(True, alpha=0.7)\n\n# Set the x-axis grid line linestyle\nax.xaxis.grid(True, linestyle='--')\n\n# Set the y-axis grid line linestyle\nax.yaxis.grid(True, linestyle='--')\n\n# Set the x-axis grid line linewidth\nax.xaxis.grid(True, linewidth=0.5)\n\n# Set the y-axis grid line linewidth\nax.yaxis.grid(True, linewidth=0.5)\n\n# Set the x-axis grid line color\nax.xaxis.grid(True, color='grey')\n\n# Set the y-axis grid line color\nax.yaxis.grid(True, color='grey')\n\n# Set the x-axis grid line alpha\nax.xaxis.grid(True, alpha=0.7)\n\n# Set the y-axis grid line alpha\nax.yaxis.grid(True, alpha=0.7)\n\n# Set the x-axis grid line linestyle\nax.xaxis.grid(True, linestyle='--')\n\n# Set the y-axis grid line linestyle\nax.yaxis.grid(True, linestyle='--')\n\n# Set the x-axis grid line linewidth\nax.xaxis.grid(True, linewidth=0.5)\n\n# Set the y-axis grid line linewidth\nax.yaxis.grid(True, linewidth=0.5)\n\n# Set the x-axis grid line color\nax.xaxis.grid(True, color='grey')\n\n# Set the y-axis grid line color\nax.yaxis.grid(True, color='grey')\n\n# Set the x-axis grid line alpha\nax.xaxis.grid(True, alpha=0.7)\n\n# Set the y-axis grid line alpha\nax.yaxis.grid(True, alpha=0.7)\n\n# Set the x-axis grid line linestyle\nax.xaxis.grid(True, linestyle='--')\n\n# Set the y-axis grid line linestyle\nax.yaxis.grid(True, linestyle='--')\n\n# Set the x-axis grid line linewidth\nax.xaxis.grid(True, linewidth=0.5)\n\n# Set the y-axis grid line linewidth\nax.yaxis.grid(True, linewidth=0.5)\n\n# Set the x-axis grid line color\nax.xaxis.grid(True, color='grey')\n\n# Set the y-axis grid line color\nax.yaxis.grid(True, color='grey')\n\n# Set the x-axis grid line alpha\nax.xaxis.grid(True, alpha=0.7)\n\n# Set the y-axis grid line alpha\nax.yaxis.grid(True, alpha=0.7)\n\n# Set the x-axis grid line linestyle\nax.xaxis.grid(True, linestyle='--')\n\n# Set the y-axis grid line linestyle\nax.yaxis.grid(True, linestyle='--')\n\n# Set the x-axis grid line linewidth\nax.xaxis.grid(True, linewidth=0.5)\n\n# Set the y-axis grid line linewidth\nax.yaxis.grid(True, linewidth=0.5)\n\n# Set the x-axis grid line color\nax.xaxis.grid(True, color='grey')\n\n# Set the y-axis grid line color\nax.yaxis.grid(True, color='grey')\n\n# Set the x-axis grid line alpha\nax.xaxis.grid(True, alpha=0.7)\n\n# Set the y-axis grid line alpha\nax.yaxis.grid(True, alpha=0.7)\n\n# Set the x-axis grid line linestyle\nax.xaxis.grid(True, linestyle='--')\n\n# Set the y-axis grid line linestyle\nax.yaxis.grid(True, linestyle='--')\n\n# Set the x-axis grid line linewidth\nax.xaxis.grid(True, linewidth=0.5)\n\n# Set the y-axis grid line linewidth\nax.yaxis.grid(True, linewidth=0.5)\n\n# Set the x-axis grid line color\nax.xaxis.grid(True, color='grey')\n\n# Set the y-axis grid line color\nax.yaxis.grid(True, color='grey')\n\n# Set the x-axis grid line alpha\nax.xaxis.grid(True, alpha=0.7)\n\n# Set the y-axis grid line alpha\nax.yaxis.grid(True, alpha=0.7)\n\n# Set the x-axis grid line linestyle\nax.xaxis.grid(True, linestyle='--')\n\n# Set the y-axis grid line linestyle\nax.yaxis.grid(True, linestyle='--')\n\n# Set the x-axis grid line linewidth\nax.xaxis.grid(True, linewidth=0.5)\n\n# Set the y-axis grid line linewidth\nax.yaxis.grid(True, linewidth=0.5)\n\n# Set the x-axis grid line color\nax.xaxis.grid(True, color='grey')\n\n# Set the y-axis grid line color\nax.yaxis.grid(True, color='grey')\n\n# Set the x-axis grid line alpha\nax.xaxis.grid(True, alpha=0.7)\n\n# Set the y-axis grid line alpha\nax.yaxis.grid(True, alpha=0.7)\n\n# Set the x-axis grid line linestyle\nax.xaxis.grid(True, linestyle='--')\n\n# Set the y-axis grid line linestyle\nax.yaxis.grid(True, linestyle='--')\n\n# Set the x-axis grid line linewidth\nax.xaxis.grid(True, linewidth=0.5)\n\n# Set the y-axis grid line linewidth\nax.yaxis.grid(True, linewidth=0.5)\n\n# Set the x-axis grid line color\nax.xaxis.grid(True, color='grey')\n\n# Set the y-axis grid line color\nax.yaxis.grid(True, color='grey')\n\n# Set the x-axis grid line alpha\nax.xaxis.grid(True, alpha=0.7)\n\n# Set the y-axis grid line alpha\nax.yaxis.grid(True, alpha=0.7)\n\n# Set the x-axis grid line linestyle\nax.xaxis.grid(True, linestyle='--')\n\n# Set the y-axis grid line linestyle\nax.yaxis.grid(True, linestyle='--')\n\n# Set the x-axis grid line linewidth\nax.xaxis.grid(True, linewidth=0.5)\n\n# Set the y-axis grid line linewidth\nax.yaxis.grid(True, linewidth=0.5)\n\n# Set the x-axis grid line color\nax.xaxis.grid(True, color='grey')\n\n# Set the y-axis grid line color\nax.yaxis.grid(True, color='grey')\n\n# Set the x-axis grid line alpha\nax.xaxis.grid(True, alpha=0.7)\n\n# Set the y-axis grid line alpha\nax.yaxis.grid(True, alpha=0.7)\n\n# Set the x-axis grid line linestyle\nax.xaxis.grid(True, linestyle='--')\n\n# Set the y-axis grid line linestyle\nax.yaxis.grid(True, linestyle='--')\n\n# Set the x-axis grid line linewidth\nax.xaxis.grid(True, linewidth=0.5)\n\n# Set the y-axis grid line linewidth\nax.yaxis.grid(True, linewidth=0.5)\n\n# Set the x-axis grid line color\nax.xaxis.grid(True, color='grey')\n\n# Set the y-axis grid line color\nax.yaxis.grid(True, color='grey')\n\n# Set the x-axis grid line alpha\nax.xaxis.grid(True, alpha=0.7)\n\n# Set the y-axis grid line alpha\nax.yaxis.grid(True, alpha=0.7)\n\n# Set the x-axis grid line linestyle\nax.xaxis.grid(True, linestyle='--')\n\n# Set the y-axis grid line linestyle\nax.yaxis.grid(True, linestyle='--')\n\n# Set the x-axis grid line linewidth\nax.xaxis.grid(True, linewidth=0.5)\n\n# Set the y-axis grid line linewidth\nax.yaxis.grid(True, linewidth=0.5)\n\n# Set the x-axis grid line color\nax.xaxis.grid(True, color='grey')\n\n# Set the y-axis grid line color\nax.yaxis.grid(True, color='grey')\n\n# Set the x-axis grid line alpha\nax.xaxis.grid(True, alpha=0.7)\n\n# Set the y-axis grid line alpha\nax.yaxis.grid(True, alpha=0.7)\n\n# Set the x-axis grid line linestyle\nax.xaxis.grid(True, linestyle='--')\n\n# Set the y-axis grid line linestyle\nax.yaxis.grid(True, linestyle='--')\n\n# Set the x-axis grid line linewidth\nax.xaxis.grid(True, linewidth=0.5)\n\n# Set the y-axis grid line linewidth\nax.yaxis.grid(True, linewidth=0.5)\n\n# Set the x-axis grid line color\nax.xaxis.grid(True, color='grey')\n\n# Set the y-axis grid line color\nax.yaxis.grid(True, color='grey')\n\n# Set the x-axis grid line alpha\nax.xaxis.grid(True, alpha=0.7)\n\n# Set the y-axis grid line alpha\nax.yaxis.grid(True, alpha=0.7)\n\n# Set the x-axis grid line linestyle\nax.xaxis.grid(True, linestyle='--')\n\n# Set the y-axis grid line linestyle\nax.yaxis.grid(True, linestyle='--')\n\n# Set the x-axis grid line linewidth\nax.xaxis.grid(True, linewidth=0.5)\n\n# Set the y-axis grid line linewidth\nax.yaxis.grid(True, linewidth=0.5)\n\n# Set the x-axis grid line color\nax.xaxis.grid(True, color='grey')\n\n# Set the y-axis grid line color\nax.yaxis.grid(True, color='grey')\n\n# Set the x-axis grid line alpha\nax.xaxis.grid(True, alpha=0.7)\n\n# Set the y-axis grid line alpha\nax.yaxis.grid(True, alpha=0.7)\n\n# Set the x-axis grid line linestyle\nax.xaxis.grid(True, linestyle='--')\n\n# Set the y-axis grid line linestyle\nax.yaxis.grid(True, linestyle='--')\n\n# Set the x-axis grid line linewidth\nax.xaxis.grid(True, linewidth=0.5)\n\n# Set the y-axis grid line linewidth\nax.yaxis.grid(True, linewidth=0.5)\n\n# Set the x-axis grid line color\nax.xaxis.grid(True, color='grey')\n\n# Set the"}
{"file": "dataset/ori_500/bar_85.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Set the title of the plot\nax.set_title('Energy Consumption and Production')\n\n# Set the x-axis label\nax.set_xlabel('Year')\n\n# Set the y-axis label\nax.set_ylabel('Energy Consumption (TWh)')\n\n# Set the x-ticks\nax.set_xticks([0, 500, 1000, 1500, 2000])\n\n# Set the y-ticks\nax.set_yticks([0, 500, 1000, 1500, 2000])\n\n# Set the grid lines\nax.grid(True)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the border\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the width of the border\nax.spines['top'].set_linewidth(0.5)\nax.spines['bottom'].set_linewidth(0.5)\nax.spines['left'].set_linewidth(0.5)\nax.spines['right'].set_linewidth(0.5)\n\n# Set the color of the ticks\nax.tick_params(axis='both', colors='black')\n\n# Set the font size of the labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the font size of the title\nax.title.set_fontsize(14)\n\n# Set the font size of the x-label\nax.xaxis.label.set_fontsize(12)\n\n# Set the font size of the y-label\nax.yaxis.label.set_fontsize(12)\n\n# Set the color of the x-tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-tick labels\nax.tick_params(axis='x',"}
{"file": "dataset/ori_500/bar_86.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Sentiment Analysis')\n\n# Set the x-axis label\nax.set_xlabel('Sentiment')\n\n# Set the y-axis label\nax.set_ylabel('Percentage')\n\n# Set the x-axis limits\nax.set_xlim(-20, 20)\n\n# Set the y-axis limits\nax.set_ylim(0, 35)\n\n# Set the x-axis ticks\nax.set_xticks(range(-20, 21, 10))\n\n# Set the y-axis ticks\nax.set_yticks(range(0, 36, 5))\n\n# Set the x-axis grid lines\nax.grid(True)\n\n# Set the y-axis grid lines\nax.grid(True)\n\n# Set the x-axis tick labels\nax.set_xticklabels(['-20', '-10', '0', '10', '20'])\n\n# Set the y-axis tick labels\nax.set_yticklabels(['0%', '5%', '10%', '15%', '20%', '25%', '30%', '35%'])\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='gray', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='gray', linestyle='--')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='green', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='green', linestyle='--')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='purple')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='orange')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='yellow', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='yellow', linestyle='--')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='cyan')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='magenta')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='black', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='black', linestyle='--')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='white')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='silver')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='gold', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='silver', linestyle='--')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='brown')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='lime')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='navy', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='navy', linestyle='--')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='maroon')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='olive')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='silver', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='silver', linestyle='--')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='silver')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='silver')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='silver', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='silver', linestyle='--')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='silver')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='silver')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='silver', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='silver', linestyle='--')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='silver')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='silver')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='silver', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='silver', linestyle='--')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='silver')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='silver')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='silver', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='silver', linestyle='--')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='silver')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='silver')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='silver', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='silver', linestyle='--')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='silver')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='silver')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='silver', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='silver', linestyle='--')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='silver')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='silver')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='silver', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='silver', linestyle='--')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='silver')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='silver')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='silver', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='silver', linestyle='--')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='silver')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='silver')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='silver', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='silver', linestyle='--')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='silver')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='silver')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='silver', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='silver', linestyle='--')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='silver')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='silver')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='silver', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='silver', linestyle='--')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='silver')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='silver')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='silver', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='silver', linestyle='--')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='silver')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='silver')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='silver', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='silver', linestyle='--')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='silver')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='silver')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='silver', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='silver', linestyle='--')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='silver')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='silver')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='silver', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='silver', linestyle='--')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='silver')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='silver')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='silver', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='silver', linestyle='--')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='silver')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='silver')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='silver', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='silver', linestyle='--')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='silver')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='silver')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='silver', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='silver', linestyle='--')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='silver')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='silver')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='silver', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='silver', linestyle='--')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='silver')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='silver')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='silver', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='silver', linestyle='--')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='silver')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='silver')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='silver', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='silver', linestyle='--')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='silver')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='silver')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='silver', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='silver', linestyle='--')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='silver')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='silver')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='silver', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='silver', linestyle='--')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='silver')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='silver')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='silver', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='silver', linestyle='--')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='silver')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='silver')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='silver', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='silver', linestyle='--')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='silver')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='silver')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='silver', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='silver', linestyle='--')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='silver')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='silver')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='silver', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='silver', linestyle='--')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='silver')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='silver')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='silver', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='silver', linestyle='--')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='silver')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='silver')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='silver', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='silver', linestyle='--')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='silver')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='silver')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='silver', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='silver', linestyle='--')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='silver')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='silver')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='silver', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='silver', linestyle='--')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='silver')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='silver')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='silver', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='silver', linestyle='--')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='silver')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='silver')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='silver', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='silver', linestyle='--')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='silver')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='silver')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='silver', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='silver', linestyle='--')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='silver')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='silver')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='silver', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='silver', linestyle='--')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='silver')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='silver')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='silver', linestyle='--')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='silver', linestyle='--')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='silver')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='silver')\n\n# Set the color of"}
{"file": "dataset/ori_500/bar_87.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Set the title of the plot\nax.set_title('Stock Market Analysis')\n\n# Set the x-axis label\nax.set_xlabel('Time')\n\n# Set the y-axis label\nax.set_ylabel('Stock Price')\n\n# Set the x-axis limits\nax.set_xlim(-10, 10)\n\n# Set the y-axis limits\nax.set_ylim(-5, 20)\n\n# Set the x-axis ticks\nax.set_xticks(range(-10, 11, 2))\n\n# Set the y-axis ticks\nax.set_yticks(range(-5, 21, 2))\n\n# Set the x-axis tick labels\nax.set_xticklabels(['-10', '-8', '-6', '-4', '-2', '0', '2', '4', '6', '8', '10'])\n\n# Set the y-axis tick labels\nax.set_yticklabels(['-5', '-3', '-1', '1', '3', '5', '7', '9', '11', '13', '15', '17', '19', '21'])\n\n# Set the x-axis grid lines\nax.grid(axis='x')\n\n# Set the y-axis grid lines\nax.grid(axis='y')\n\n# Set the x-axis grid line color\nax.grid(axis='x', color='gray')\n\n# Set the y-axis grid line color\nax.grid(axis='y', color='gray')\n\n# Set the x-axis grid line style\nax.grid(axis='x', linestyle='--')\n\n# Set the y-axis grid line style\nax.grid(axis='y', linestyle='--')\n\n# Set the x-axis grid line width\nax.grid(axis='x', linewidth=0.5)\n\n# Set the y-axis grid line width\nax.grid(axis='y', linewidth=0.5)\n\n# Set the x-axis grid line alpha\nax.grid(axis='x', alpha=0.5)\n\n# Set the y-axis grid line alpha\nax.grid(axis='y', alpha=0.5)\n\n# Set the x-axis grid line color\nax.grid(axis='x', color='gray')\n\n# Set the y-axis grid line color\nax.grid(axis='y', color='gray')\n\n# Set the x-axis grid line style\nax.grid(axis='x', linestyle='--')\n\n# Set the y-axis grid line style\nax.grid(axis='y', linestyle='--')\n\n# Set the x-axis grid line width\nax.grid(axis='x', linewidth=0.5)\n\n# Set the y-axis grid line width\nax.grid(axis='y', linewidth=0.5)\n\n# Set the x-axis grid line alpha\nax.grid(axis='x', alpha=0.5)\n\n# Set the y-axis grid line alpha\nax.grid(axis='y', alpha=0.5)\n\n# Set the x-axis grid line color\nax.grid(axis='x', color='gray')\n\n# Set the y-axis grid line color\nax.grid(axis='y', color='gray')\n\n# Set the x-axis grid line style\nax.grid(axis='x', linestyle='--')\n\n# Set the y-axis grid line style\nax.grid(axis='y', linestyle='--')\n\n# Set the x-axis grid line width\nax.grid(axis='x', linewidth=0.5)\n\n# Set the y-axis grid line width\nax.grid(axis='y', linewidth=0.5)\n\n# Set the x-axis grid line alpha\nax.grid(axis='x', alpha=0.5)\n\n# Set the y-axis grid line alpha\nax.grid(axis='y', alpha=0.5)\n\n# Set the x-axis grid line color\nax.grid(axis='x', color='gray')\n\n# Set the y-axis grid line color\nax.grid(axis='y', color='gray')\n\n# Set the x-axis grid line style\nax.grid(axis='x', linestyle='--')\n\n# Set the y-axis grid line style\nax.grid(axis='y', linestyle='--')\n\n# Set the x-axis grid line width\nax.grid(axis='x', linewidth=0.5)\n\n# Set the y-axis grid line width\nax.grid(axis='y', linewidth=0.5)\n\n# Set the x-axis grid line alpha\nax.grid(axis='x', alpha=0.5)\n\n# Set the y-axis grid line alpha\nax.grid(axis='y', alpha=0.5)\n\n# Set the x-axis grid line color\nax.grid(axis='x', color='gray')\n\n# Set the y-axis grid line color\nax.grid(axis='y', color='gray')\n\n# Set the x-axis grid line style\nax.grid(axis='x', linestyle='--')\n\n# Set the y-axis grid line style\nax.grid(axis='y', linestyle='--')\n\n# Set the x-axis grid line width\nax.grid(axis='x', linewidth=0.5)\n\n# Set the y-axis grid line width\nax.grid(axis='y', linewidth=0.5)\n\n# Set the x-axis grid line alpha\nax.grid(axis='x', alpha=0.5)\n\n# Set the y-axis grid line alpha\nax.grid(axis='y', alpha=0.5)\n\n# Set the x-axis grid line color\nax.grid(axis='x', color='gray')\n\n# Set the y-axis grid line color\nax.grid(axis='y', color='gray')\n\n# Set the x-axis grid line style\nax.grid(axis='x', linestyle='--')\n\n# Set the y-axis grid line style\nax.grid(axis='y', linestyle='--')\n\n# Set the x-axis grid line width\nax.grid(axis='x', linewidth=0.5)\n\n# Set the y-axis grid line width\nax.grid(axis='y', linewidth=0.5)\n\n# Set the x-axis grid line alpha\nax.grid(axis='x', alpha=0.5)\n\n# Set the y-axis grid line alpha\nax.grid(axis='y', alpha=0.5)\n\n# Set the x-axis grid line color\nax.grid(axis='x', color='gray')\n\n# Set the y-axis grid line color\nax.grid(axis='y', color='gray')\n\n# Set the x-axis grid line style\nax.grid(axis='x', linestyle='--')\n\n# Set the y-axis grid line style\nax.grid(axis='y', linestyle='--')\n\n# Set the x-axis grid line width\nax.grid(axis='x', linewidth=0.5)\n\n# Set the y-axis grid line width\nax.grid(axis='y', linewidth=0.5)\n\n# Set the x-axis grid line alpha\nax.grid(axis='x', alpha=0.5)\n\n# Set the y-axis grid line alpha\nax.grid(axis='y', alpha=0.5)\n\n# Set the x-axis grid line color\nax.grid(axis='x', color='gray')\n\n# Set the y-axis grid line color\nax.grid(axis='y', color='gray')\n\n# Set the x-axis grid line style\nax.grid(axis='x', linestyle='--')\n\n# Set the y-axis grid line style\nax.grid(axis='y', linestyle='--')\n\n# Set the x-axis grid line width\nax.grid(axis='x', linewidth=0.5)\n\n# Set the y-axis grid line width\nax.grid(axis='y', linewidth=0.5)\n\n# Set the x-axis grid line alpha\nax.grid(axis='x', alpha=0.5)\n\n# Set the y-axis grid line alpha\nax.grid(axis='y', alpha=0.5)\n\n# Set the x-axis grid line color\nax.grid(axis='x', color='gray')\n\n# Set the y-axis grid line color\nax.grid(axis='y', color='gray')\n\n# Set the x-axis grid line style\nax.grid(axis='x', linestyle='--')\n\n# Set the y-axis grid line style\nax.grid(axis='y', linestyle='--')\n\n# Set the x-axis grid line width\nax.grid(axis='x', linewidth=0.5)\n\n# Set the y-axis grid line width\nax.grid(axis='y', linewidth=0.5)\n\n# Set the x-axis grid line alpha\nax.grid(axis='x', alpha=0.5)\n\n# Set the y-axis grid line alpha\nax.grid(axis='y', alpha=0.5)\n\n# Set the x-axis grid line color\nax.grid(axis='x', color='gray')\n\n# Set the y-axis grid line color\nax.grid(axis='y', color='gray')\n\n# Set the x-axis grid line style\nax.grid(axis='x', linestyle='--')\n\n# Set the y-axis grid line style\nax.grid(axis='y', linestyle='--')\n\n# Set the x-axis grid line width\nax.grid(axis='x', linewidth=0.5)\n\n# Set the y-axis grid line width\nax.grid(axis='y', linewidth=0.5)\n\n# Set the x-axis grid line alpha\nax.grid(axis='x', alpha=0.5)\n\n# Set the y-axis grid line alpha\nax.grid(axis='y', alpha=0.5)\n\n# Set the x-axis grid line color\nax.grid(axis='x', color='gray')\n\n# Set the y-axis grid line color\nax.grid(axis='y', color='gray')\n\n# Set the x-axis grid line style\nax.grid(axis='x', linestyle='--')\n\n# Set the y-axis grid line style\nax.grid(axis='y', linestyle='--')\n\n# Set the x-axis grid line width\nax.grid(axis='x', linewidth=0.5)\n\n# Set the y-axis grid line width\nax.grid(axis='y', linewidth=0.5)\n\n# Set the x-axis grid line alpha\nax.grid(axis='x', alpha=0.5)\n\n# Set the y-axis grid line alpha\nax.grid(axis='y', alpha=0.5)\n\n# Set the x-axis grid line color\nax.grid(axis='x', color='gray')\n\n# Set the y-axis grid line color\nax.grid(axis='y', color='gray')\n\n# Set the x-axis grid line style\nax.grid(axis='x', linestyle='--')\n\n# Set the y-axis grid line style\nax.grid(axis='y', linestyle='--')\n\n# Set the x-axis grid line width\nax.grid(axis='x', linewidth=0.5)\n\n# Set the y-axis grid line width\nax.grid(axis='y', linewidth=0.5)\n\n# Set the x-axis grid line alpha\nax.grid(axis='x', alpha=0.5)\n\n# Set the y-axis grid line alpha\nax.grid(axis='y', alpha=0.5)\n\n# Set the x-axis grid line color\nax.grid(axis='x', color='gray')\n\n# Set the y-axis grid line color\nax.grid(axis='y', color='gray')\n\n# Set the x-axis grid line style\nax.grid(axis='x', linestyle='--')\n\n# Set the y-axis grid line style\nax.grid(axis='y', linestyle='--')\n\n# Set the x-axis grid line width\nax.grid(axis='x', linewidth=0.5)\n\n# Set the y-axis grid line width\nax.grid(axis='y', linewidth=0.5)\n\n# Set the x-axis grid line alpha\nax.grid(axis='x', alpha=0.5)\n\n# Set the y-axis grid line alpha\nax.grid(axis='y', alpha=0.5)\n\n# Set the x-axis grid line color\nax.grid(axis='x', color='gray')\n\n# Set the y-axis grid line color\nax.grid(axis='y', color='gray')\n\n# Set the x-axis grid line style\nax.grid(axis='x', linestyle='--')\n\n# Set the y-axis grid line style\nax.grid(axis='y', linestyle='--')\n\n# Set the x-axis grid line width\nax.grid(axis='x', linewidth=0.5)\n\n# Set the y-axis grid line width\nax.grid(axis='y', linewidth=0.5)\n\n# Set the x-axis grid line alpha\nax.grid(axis='x', alpha=0.5)\n\n# Set the y-axis grid line alpha\nax.grid(axis='y', alpha=0.5)\n\n# Set the x-axis grid line color\nax.grid(axis='x', color='gray')\n\n# Set the y-axis grid line color\nax.grid(axis='y', color='gray')\n\n# Set the x-axis grid line style\nax.grid(axis='x', linestyle='--')\n\n# Set the y-axis grid line style\nax.grid(axis='y', linestyle='--')\n\n# Set the x-axis grid line width\nax.grid(axis='x', linewidth=0.5)\n\n# Set the y-axis grid line width\nax.grid(axis='y', linewidth=0.5)\n\n# Set the x-axis grid line alpha\nax.grid(axis='x', alpha=0.5)\n\n# Set the y-axis grid line alpha\nax.grid(axis='y', alpha=0.5)\n\n# Set the x-axis grid line color\nax.grid(axis='x', color='gray')\n\n# Set the y-axis grid line color\nax.grid(axis='y', color='gray')\n\n# Set the x-axis grid line style\nax.grid(axis='x', linestyle='--')\n\n# Set the y-axis grid line style\nax.grid(axis='y', linestyle='--')\n\n# Set the x-axis grid line width\nax.grid(axis='x', linewidth=0.5)\n\n# Set the y-axis grid line width\nax.grid(axis='y', linewidth=0.5)\n\n# Set the x-axis grid line alpha\nax.grid(axis='x', alpha=0.5)\n\n# Set the y-axis grid line alpha\nax.grid(axis='y', alpha=0.5)\n\n# Set the x-axis grid line color\nax.grid(axis='x', color='gray')\n\n# Set the y-axis grid line color\nax.grid(axis='y', color='gray')\n\n# Set the x-axis grid line style\nax.grid(axis='x', linestyle='--')\n\n# Set the y-axis grid line style\nax.grid(axis='y', linestyle='--')\n\n# Set the x-axis grid line width\nax.grid(axis='x', linewidth=0.5)\n\n# Set the y-axis grid line width\nax.grid(axis='y', linewidth=0.5)\n\n# Set the x-axis grid line alpha\nax.grid(axis='x', alpha=0.5)\n\n# Set the y-axis grid line alpha\nax.grid(axis='y', alpha=0.5)\n\n# Set the x-axis grid line color\nax.grid(axis='x', color='gray')\n\n# Set the y-axis grid line color\nax.grid(axis='y', color='gray')\n\n# Set the x-axis grid line style\nax.grid(axis='x', linestyle='--')\n\n# Set the y-axis grid line style\nax.grid(axis='y', linestyle='--')\n\n# Set the x-axis grid line width\nax.grid(axis='x', linewidth=0.5)\n\n# Set the y-axis grid line width\nax.grid(axis='y', linewidth=0.5)\n\n# Set the x-axis grid line alpha\nax.grid(axis='x', alpha=0.5)\n\n# Set the y-axis grid line alpha\nax.grid(axis='y', alpha=0.5)\n\n# Set the x-axis grid line color\nax.grid(axis='x', color='gray')\n\n# Set the y-axis grid line color\nax.grid(axis='y', color='gray')\n\n# Set the x-axis grid line style\nax.grid(axis='x', linestyle='--')\n\n# Set the y-axis grid line style\nax.grid(axis='y', linestyle='--')\n\n# Set the x-axis grid line width\nax.grid(axis='x', linewidth=0.5)\n\n# Set the y-axis grid line width\nax.grid(axis='y', linewidth=0.5)\n\n# Set the x-axis grid line alpha\nax.grid(axis='x', alpha=0.5)\n\n# Set the y-axis grid line alpha\nax.grid(axis='y', alpha=0.5)\n\n# Set the x-axis grid line color\nax.grid(axis='x', color='gray')\n\n# Set the y-axis grid line color\nax.grid(axis='y', color='gray')\n\n# Set the x-axis grid line style\nax.grid(axis='x', linestyle='--')\n\n# Set the y-axis grid line style\nax.grid(axis='y', linestyle='--')\n\n# Set the x-axis grid line width\nax.grid(axis='x', linewidth=0.5)\n\n# Set the y-axis grid line width\nax.grid(axis='y', linewidth=0.5)\n\n# Set the x-axis grid line alpha\nax.grid(axis='x', alpha=0.5)\n\n# Set the y-axis grid line alpha\nax.grid(axis='y', alpha=0.5)\n\n# Set the x-axis grid line color\nax.grid(axis='x', color='gray')\n\n# Set the y-axis grid line color\nax.grid(axis='y', color='gray')\n\n# Set the x-axis grid line style\nax.grid(axis='x', linestyle='--')\n\n# Set the y-axis grid line style\nax.grid(axis='y', linestyle='--')\n\n# Set the x-axis grid line width\nax.grid(axis='x', linewidth=0.5)\n\n# Set the y-axis grid line width\nax.grid(axis='y', linewidth=0.5)\n\n# Set the x-axis grid line alpha\nax.grid(axis='x', alpha=0.5)\n\n# Set the y-axis grid line alpha\nax.grid(axis='y', alpha=0.5)\n\n# Set the x-axis grid line color\nax.grid(axis='x', color='gray')\n\n# Set the y-axis grid line color\nax.grid(axis='y', color='gray')\n\n# Set the x-axis grid line style\nax.grid(axis='x', linestyle='--')\n\n# Set the y-axis grid line style\nax.grid(axis='y', linestyle='--')\n\n# Set the x-axis grid line width\nax.grid(axis='x', linewidth=0.5)\n\n# Set the y-axis grid line width\nax.grid(axis='y', linewidth=0.5)\n\n# Set the x-axis grid line alpha\nax.grid(axis='x', alpha=0.5)\n\n# Set the y-axis grid line alpha\nax.grid(axis='y', alpha=0.5)\n\n# Set the x-axis grid line color\nax.grid(axis='x', color='gray')\n\n# Set the y-axis grid line color\nax.grid(axis='y', color='gray')\n\n# Set the x-axis grid line style\nax.grid(axis='x', linestyle='--')\n\n# Set the y-axis grid line style\nax.grid(axis='y', linestyle='--')\n\n# Set the x-axis grid line width\nax.grid(axis='x', linewidth=0.5)\n\n# Set the y-axis grid line width\nax.grid(axis='y', linewidth=0.5)\n\n# Set the x-axis grid line alpha\nax.grid(axis='x', alpha=0.5)\n\n# Set the y-axis grid line alpha\nax.grid(axis='y', alpha=0.5)\n\n# Set the x-axis grid line color\nax.grid(axis='x', color='gray')\n\n# Set the y-axis grid line color\nax.grid(axis='y', color='gray')\n\n# Set the x-axis grid line style\nax.grid(axis='x', linestyle='--')\n\n# Set the y-axis grid line style\nax.grid(axis='y', linestyle='--')\n\n# Set the x-axis grid line width\nax.grid(axis='x', linewidth=0.5)\n\n# Set the y-axis grid line width\nax.grid(axis='y', linewidth=0.5)\n\n# Set"}
{"file": "dataset/ori_500/bar_88.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Set the title of the plot\nax.set_title('Scores by group and constraint word count')\n\n# Create a bar chart with the scores\nax.bar(['3 Constraint Words', '5 Constraint Words', '7 Constraint Words', '10 Constraint Words'], [0.2, 0.4, 0.6, 0.8], color='blue')\nax.bar(['3 Constraint Words', '5 Constraint Words', '7 Constraint Words', '10 Constraint Words'], [-0.2, -0.4, -0.6, -0.8], color='green')\nax.bar(['3 Constraint Words', '5 Constraint Words', '7 Constraint Words', '10 Constraint Words'], [-0.1, -0.3, -0.5, -0.7], color='purple')\nax.bar(['3 Constraint Words', '5 Constraint Words', '7 Constraint Words', '10 Constraint Words'], [-0.9, -1.1, -1.3, -1.5], color='orange')\nax.bar(['3 Constraint Words', '5 Constraint Words', '7 Constraint Words', '10 Constraint Words'], [-1.7, -1.9, -2.1, -2.3], color='cyan')\nax.bar(['3 Constraint Words', '5 Constraint Words', '7 Constraint Words', '10 Constraint Words'], [-2.5, -2.7, -2.9, -3.1], color='magenta')\nax.bar(['3 Constraint Words', '5 Constraint Words', '7 Constraint Words', '10 Constraint Words'], [-3.3, -3.5, -3.7, -3.9], color='red')\n\n# Set the x-axis label\nax.set_xlabel('Score')\n\n# Set the y-axis label\nax.set_ylabel('Constraint Word Count')\n\n# Set the x-axis limits\nax.set_xlim(-4, 0)\n\n# Set the y-axis limits\nax.set_ylim(-4, 1)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_89.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Set the title of the plot\nax.set_title('Car Performance Metrics')\n\n# Set the x-axis label\nax.set_xlabel('Top-10 supercar families in training dataset')\n\n# Set the y-axis label\nax.set_ylabel('Performance metrics')\n\n# Set the x-ticks\nax.set_xticks([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n\n# Set the x-tick labels\nax.set_xticklabels(['Lamborghini', 'Ferrari', 'Porsche', 'Audi', 'BMW', 'Mercedes-Benz', 'Jaguar', 'Lexus', 'Volvo', 'Tesla'])\n\n# Set the y-ticks\nax.set_yticks([0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1])\n\n# Set the y-tick labels\nax.set_yticklabels(['0', '0.1', '0.2', '0.3', '0.4', '0.5', '0.6', '0.7', '0.8', '0.9', '1'])\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the background\nax.set_facecolor('lightblue')\n\n# Set the color of the text\nax.set_color_cycle(['red', 'green', 'blue', 'cyan', 'magenta', 'yellow', 'black', 'white', 'grey', 'silver'])\n\n# Set the color of the line\nax.plot([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1], color='red')\n\n# Set the color of the markers\nax.plot([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1], marker='o', color='blue')\n\n# Set the color of the line\nax.plot([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1], color='green')\n\n# Set the color of the markers\nax.plot([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1], marker='o', color='purple')\n\n# Set the color of the line\nax.plot([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1], color='orange')\n\n# Set the color of the markers\nax.plot([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1], marker='o', color='pink')\n\n# Set the color of the line\nax.plot([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1], color='brown')\n\n# Set the color of the markers\nax.plot([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1], marker='o', color='cyan')\n\n# Set the color of the line\nax.plot([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1], color='magenta')\n\n# Set the color of the markers\nax.plot([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1], marker='o', color='yellow')\n\n# Set the color of the line\nax.plot([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1], color='black')\n\n# Set the color of the markers\nax.plot([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1], marker='o', color='white')\n\n# Set the color of the line\nax.plot([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1], color='grey')\n\n# Set the color of the markers\nax.plot([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1], marker='o', color='silver')\n\n# Set the color of the line\nax.plot([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1], color='gold')\n\n# Set the color of the markers\nax.plot([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1], marker='o', color='silver')\n\n# Set the color of the line\nax.plot([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1], color='silver')\n\n# Set the color of the markers\nax.plot([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1], marker='o', color='silver')\n\n# Set the color of the line\nax.plot([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1], color='silver')\n\n# Set the color of the markers\nax.plot([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1], marker='o', color='silver')\n\n# Set the color of the line\nax.plot([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1], color='silver')\n\n# Set the color of the markers\nax.plot([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1], marker='o', color='silver')\n\n# Set the color of the line\nax.plot([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1], color='silver')\n\n# Set the color of the markers\nax.plot([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1], marker='o', color='silver')\n\n# Set the color of the line\nax.plot([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1], color='silver')\n\n# Set the color of the markers\nax.plot([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1], marker='o', color='silver')\n\n# Set the color of the line\nax.plot([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1], color='silver')\n\n# Set the color of the markers\nax.plot([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1], marker='o', color='silver')\n\n# Set the color of the line\nax.plot([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1], color='silver')\n\n# Set the color of the markers\nax.plot([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1], marker='o', color='silver')\n\n# Set the color of the line\nax.plot([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1], color='silver')\n\n# Set the color of the markers\nax.plot([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1], marker='o', color='silver')\n\n# Set the color of the line\nax.plot([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1], color='silver')\n\n# Set the color of the markers\nax.plot([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1], marker='o', color='silver')\n\n# Set the color of the line\nax.plot([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1], color='silver')\n\n# Set the color of the markers\nax.plot([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1], marker='o', color='silver')\n\n# Set the color of the line\nax.plot([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1], color='silver')\n\n# Set the color of the markers\nax.plot([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1], marker='o', color='silver')\n\n# Set the color of the line\nax.plot([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1], color='silver')\n\n# Set the color of the markers\nax"}
{"file": "dataset/ori_500/bar_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(9.0, 6.0))\n\n# Set the title of the plot\nax.set_title('GENIA')\n\n# Set the x-axis label\nax.set_xlabel('Error Correction Rate (%)')\n\n# Set the y-axis label\nax.set_ylabel('Time (ms)')\n\n# Set the x-axis limits\nax.set_xlim(0, 100)\n\n# Set the y-axis limits\nax.set_ylim(0, 100)\n\n# Create a bar chart for the first row\nax.bar(['Type', 'Span', 'T&S', 'Spurious', 'Total'], [50, 40, 30, 20, 10], color='pink')\n\n# Create a bar chart for the second row\nax.bar(['Type', 'Span', 'T&S', 'Spurious', 'Total'], [80, 70, 60, 50, 40], color='orange')\n\n# Create a bar chart for the third row\nax.bar(['Type', 'Span', 'T&S', 'Spurious', 'Total'], [90, 80, 70, 60, 50], color='green')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_90.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nmodels = ['GPT4V', 'OSCAR', 'LLaMA', 'BLIP2', 'BLIP1', 'Video-LLaMA', 'Lavila']\nscores_a = [82.5, 73.93, 31.79, 4.64, 4.64, 0.71, 0.0]\nscores_b = [20, 25, 30, 35, 40, 45, 50]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(12, 8))\n\n# Plot the scores\nax.bar(models, scores_a, color='red')\nax.bar(models, scores_b, bottom=scores_a, color='blue')\n\n# Set the title and labels\nax.set_title('Human Study')\nax.set_xlabel('Model')\nax.set_ylabel('Score A (%)')\n\n# Add a horizontal line for each model\nfor i, model in enumerate(models):\n    ax.axhline(y=scores_a[i], color='black', linestyle='-')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_91.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Define the data\nphases = ['GCN', 'RvNN', 'Hyphen', 'GET']\nscores = [75, 80, 85, 90]\ncolors = ['blue', 'orange', 'red', 'pink']\n\n# Plot the data\nfor i in range(len(phases)):\n    ax.barh(phases[i], scores[i], color=colors[i])\n\n# Set the title and labels\nax.set_title('Phases of the Project')\nax.set_xlabel('Macro F1-score')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_92.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\nax.plot([0, 100, 200, 300, 400, 500, 600, 700, 800], [0, 100, 200, 300, 400, 500, 600, 700, 800], 'b-')\nax.set_title('Resonance Preference Plot for rich-context')\n\n# Add rectangles for each car model\nrects = []\nfor i, model in enumerate(['human', 'gpt4', 'gpt4-cot']):\n    rects.append(ax.barh(i, 100, left=0, height=0.5, color='blue'))\n    rects.append(ax.barh(i, 200, left=100, height=0.5, color='green'))\n    rects.append(ax.barh(i, 300, left=300, height=0.5, color='red'))\n\n# Add rectangles for each car model\nfor i, model in enumerate(['human', 'gpt4', 'gpt4-cot']):\n    rects.append(ax.barh(i+1, 400, left=0, height=0.5, color='purple'))\n    rects.append(ax.barh(i+1, 500, left=400, height=0.5, color='orange'))\n    rects.append(ax.barh(i+1, 600, left=900, height=0.5, color='yellow'))\n\n# Add rectangles for each car model\nfor i, model in enumerate(['human', 'gpt4', 'gpt4-cot']):\n    rects.append(ax.barh(i+2, 700, left=0, height=0.5, color='cyan'))\n    rects.append(ax.barh(i+2, 800, left=700, height=0.5, color='pink'))\n\n# Add rectangles for each car model\nfor i, model in enumerate(['human', 'gpt4', 'gpt4-cot']):\n    rects.append(ax.barh(i+3, 900, left=0, height=0.5, color='brown'))\n    rects.append(ax.barh(i+3, 1000, left=900, height=0.5, color='grey'))\n\n# Add rectangles for each car model\nfor i, model in enumerate(['human', 'gpt4', 'gpt4-cot']):\n    rects.append(ax.barh(i+4, 1100, left=0, height=0.5, color='black'))\n    rects.append(ax.barh(i+4, 1200, left=1100, height=0.5, color='white'))\n\n# Add rectangles for each car model\nfor i, model in enumerate(['human', 'gpt4', 'gpt4-cot']):\n    rects.append(ax.barh(i+5, 1300, left=0, height=0.5, color='silver'))\n    rects.append(ax.barh(i+5, 1400, left=1300, height=0.5, color='gold'))\n\n# Add rectangles for each car model\nfor i, model in enumerate(['human', 'gpt4', 'gpt4-cot']):\n    rects.append(ax.barh(i+6, 1500, left=0, height=0.5, color='navy'))\n    rects.append(ax.barh(i+6, 1600, left=1500, height=0.5, color='maroon'))\n\n# Add rectangles for each car model\nfor i, model in enumerate(['human', 'gpt4', 'gpt4-cot']):\n    rects.append(ax.barh(i+7, 1700, left=0, height=0.5, color='lime'))\n    rects.append(ax.barh(i+7, 1800, left=1700, height=0.5, color='olive'))\n\n# Add rectangles for each car model\nfor i, model in enumerate(['human', 'gpt4', 'gpt4-cot']):\n    rects.append(ax.barh(i+8, 1900, left=0, height=0.5, color='aqua'))\n    rects.append(ax.barh(i+8, 2000, left=1900, height=0.5, color='teal'))\n\n# Add rectangles for each car model\nfor i, model in enumerate(['human', 'gpt4', 'gpt4-cot']):\n    rects.append(ax.barh(i+9, 2100, left=0, height=0.5, color='fuchsia'))\n    rects.append(ax.barh(i+9, 2200, left=2100, height=0.5, color='indigo'))\n\n# Add rectangles for each car model\nfor i, model in enumerate(['human', 'gpt4', 'gpt4-cot']):\n    rects.append(ax.barh(i+10, 2300, left=0, height=0.5, color='white'))\n    rects.append(ax.barh(i+10, 2400, left=2300, height=0.5, color='black'))\n\n# Add rectangles for each car model\nfor i, model in enumerate(['human', 'gpt4', 'gpt4-cot']):\n    rects.append(ax.barh(i+11, 2500, left=0, height=0.5, color='silver'))\n    rects.append(ax.barh(i+11, 2600, left=2500, height=0.5, color='gold'))\n\n# Add rectangles for each car model\nfor i, model in enumerate(['human', 'gpt4', 'gpt4-cot']):\n    rects.append(ax.barh(i+12, 2700, left=0, height=0.5, color='navy'))\n    rects.append(ax.barh(i+12, 2800, left=2700, height=0.5, color='maroon'))\n\n# Add rectangles for each car model\nfor i, model in enumerate(['human', 'gpt4', 'gpt4-cot']):\n    rects.append(ax.barh(i+13, 2900, left=0, height=0.5, color='lime'))\n    rects.append(ax.barh(i+13, 3000, left=2900, height=0.5, color='olive'))\n\n# Add rectangles for each car model\nfor i, model in enumerate(['human', 'gpt4', 'gpt4-cot']):\n    rects.append(ax.barh(i+14, 3100, left=0, height=0.5, color='aqua'))\n    rects.append(ax.barh(i+14, 3200, left=3100, height=0.5, color='teal'))\n\n# Add rectangles for each car model\nfor i, model in enumerate(['human', 'gpt4', 'gpt4-cot']):\n    rects.append(ax.barh(i+15, 3300, left=0, height=0.5, color='fuchsia'))\n    rects.append(ax.barh(i+15, 3400, left=3300, height=0.5, color='indigo'))\n\n# Add rectangles for each car model\nfor i, model in enumerate(['human', 'gpt4', 'gpt4-cot']):\n    rects.append(ax.barh(i+16, 3500, left=0, height=0.5, color='white'))\n    rects.append(ax.barh(i+16, 3600, left=3500, height=0.5, color='black'))\n\n# Add rectangles for each car model\nfor i, model in enumerate(['human', 'gpt4', 'gpt4-cot']):\n    rects.append(ax.barh(i+17, 3700, left=0, height=0.5, color='silver'))\n    rects.append(ax.barh(i+17, 3800, left=3700, height=0.5, color='gold'))\n\n# Add rectangles for each car model\nfor i, model in enumerate(['human', 'gpt4', 'gpt4-cot']):\n    rects.append(ax.barh(i+18, 3900, left=0, height=0.5, color='navy'))\n    rects.append(ax.barh(i+18, 4000, left=3900, height=0.5, color='maroon'))\n\n# Add rectangles for each car model\nfor i, model in enumerate(['human', 'gpt4', 'gpt4-cot']):\n    rects.append(ax.barh(i+19, 4100, left=0, height=0.5, color='lime'))\n    rects.append(ax.barh(i+19, 4200, left=4100, height=0.5, color='olive'))\n\n# Add rectangles for each car model\nfor i, model in enumerate(['human', 'gpt4', 'gpt4-cot']):\n    rects.append(ax.barh(i+20, 4300, left=0, height=0.5, color='aqua'))\n    rects.append(ax.barh(i+20, 4400, left=4300, height=0.5, color='teal'))\n\n# Add rectangles for each car model\nfor i, model in enumerate(['human', 'gpt4', 'gpt4-cot']):\n    rects.append(ax.barh(i+21, 4500, left=0, height=0.5, color='fuchsia'))\n    rects.append(ax.barh(i+21, 4600, left=4500, height=0.5, color='indigo'))\n\n# Add rectangles for each car model\nfor i, model in enumerate(['human', 'gpt4', 'gpt4-cot']):\n    rects.append(ax.barh(i+22, 4700, left=0, height=0.5, color='white'))\n    rects.append(ax.barh(i+22, 4800, left=4700, height=0.5, color='black'))\n\n# Add rectangles for each car model\nfor i, model in enumerate(['human', 'gpt4', 'gpt4-cot']):\n    rects.append(ax.barh(i+23, 4900, left=0, height=0.5, color='silver'))\n    rects.append(ax.barh(i+23, 5000, left=4900, height=0.5, color='gold'))\n\n# Add rectangles for each car model\nfor i, model in enumerate(['human', 'gpt4', 'gpt4-cot']):\n    rects.append(ax.barh(i+24, 5100, left=0, height=0.5, color='navy'))\n    rects.append(ax.barh(i+24, 5200, left=5100, height=0.5, color='maroon'))\n\n# Add rectangles for each car model\nfor i, model in enumerate(['human', 'gpt4', 'gpt4-cot']):\n    rects.append(ax.barh(i+25, 5300, left=0, height=0.5, color='lime'))\n    rects.append(ax.barh(i+25, 5400, left=5300, height=0.5, color='olive'))\n\n# Add rectangles for each car model\nfor i, model in enumerate(['human', 'gpt4', 'gpt4-cot']):\n    rects.append(ax.barh(i+26, 5500, left=0, height=0.5, color='aqua'))\n    rects.append(ax.barh(i+26, 5600, left=5500, height=0.5, color='teal'))\n\n# Add rectangles for each car model\nfor i, model in enumerate(['human', 'gpt4', 'gpt4-cot']):\n    rects.append(ax.barh(i+27, 5700, left=0, height=0.5, color='fuchsia'))\n    rects.append(ax.barh(i+27, 5800, left=5700, height=0.5, color='indigo'))\n\n# Add rectangles for each car model\nfor i, model in enumerate(['human', 'gpt4', 'gpt4-cot']):\n    rects.append(ax.barh(i+28, 5900, left=0, height=0.5, color='white'))\n    rects.append(ax.barh(i+28, 6000, left=5900, height=0.5, color='black'))\n\n# Add rectangles for each car model\nfor i, model in enumerate(['human', 'gpt4', 'gpt4-cot']):\n    rects.append(ax.barh(i+29, 6100, left=0, height=0.5, color='silver'))\n    rects.append(ax.barh(i+29, 6200, left=6100, height=0.5, color='gold'))\n\n# Add rectangles for each car model\nfor i, model in enumerate(['human', 'gpt4', 'gpt4-cot']):\n    rects.append(ax.barh(i+30, 6300, left=0, height=0.5, color='navy'))\n    rects.append(ax.barh(i+30, 6400, left=6300, height=0.5, color='maroon'))\n\n# Add rectangles for each car model\nfor i, model in enumerate(['human', 'gpt4', 'gpt4-cot']):\n    rects.append(ax.barh(i+31, 6500, left=0, height=0.5, color='lime'))\n    rects.append(ax.barh(i+31, 6600, left=6500, height=0.5, color='olive'))\n\n# Add rectangles for each car model\nfor i, model in enumerate(['human', 'gpt4', 'gpt4-cot']):\n    rects.append(ax.barh(i+32, 6700, left=0, height=0.5, color='aqua'))\n    rects.append(ax.barh(i+32, 6800, left=6700, height=0.5, color='teal'))\n\n# Add rectangles for each car model\nfor i, model in enumerate(['human', 'gpt4', 'gpt4-cot']):\n    rects.append(ax.barh(i+33, 6900, left=0, height=0.5, color='fuchsia'))\n    rects.append(ax.barh(i+33, 7000, left=6900, height=0.5, color='indigo'))\n\n# Add rectangles for each car model\nfor i, model in enumerate(['human', 'gpt4', 'gpt4-cot']):\n    rects.append(ax.barh(i+34, 7100, left=0, height=0.5, color='white'))\n    rects.append(ax.barh(i+34, 7200, left=7100, height=0.5, color='black'))\n\n# Add rectangles for each car model\nfor i, model in enumerate(['human', 'gpt4', 'gpt4-cot']):\n    rects.append(ax.barh(i+35, 7300, left=0, height=0.5, color='silver'))\n    rects.append(ax.barh(i+35, 7400, left=7300, height=0.5, color='gold'))\n\n# Add rectangles for each car model\nfor i, model in enumerate(['human', 'gpt4', 'gpt4-cot']):\n    rects.append(ax.barh(i+36, 7500, left=0, height=0.5, color='navy'))\n    rects.append(ax.barh(i+36, 7600, left=7500, height=0.5, color='maroon'))\n\n# Add rectangles for each car model\nfor i, model in enumerate(['human', 'gpt4', 'gpt4-cot']):\n    rects.append(ax.barh(i+37, 7700, left=0, height=0.5, color='lime'))\n    rects.append(ax.barh(i+37, 7800, left=7700, height=0.5, color='olive'))\n\n# Add rectangles for each car model\nfor i, model in enumerate(['human', 'gpt4', 'gpt4-cot']):\n    rects.append(ax.barh(i+38, 7900, left=0, height=0.5, color='aqua'))\n    rects.append(ax.barh(i+38, 8000, left=7900, height=0.5, color='teal'))\n\n# Add rectangles for each car model\nfor i, model in enumerate(['human', 'gpt4', 'gpt4-cot']):\n    rects.append(ax.barh(i+39, 8100, left=0, height=0.5, color='fuchsia'))\n    rects.append(ax.barh(i+39, 8200, left=8100, height=0.5, color='indigo'))\n\n# Add rectangles for each car model\nfor i, model in enumerate(['human', 'gpt4', 'gpt4-cot']):\n    rects.append(ax.barh(i+40, 8300, left=0, height=0.5, color='white'))\n    rects.append(ax.barh(i+40, 8400, left=8300, height=0.5, color='black'))\n\n# Add rectangles for each car model\nfor i, model in enumerate(['human', 'gpt4', 'gpt4-cot']):\n    rects.append(ax.barh(i+41,"}
{"file": "dataset/ori_500/bar_93.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the first graph\neffort_data = [20.4, 29.6, 20.4, 20.4, 20.4, 9.3]\nbrainwave_data = [7.1, 38.1, 14.3, 16.7, 0, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20"}
{"file": "dataset/ori_500/bar_94.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis for the first subplot\nfig, ax = plt.subplots(figsize=(10, 6))\nax.set_title('Rate of Gain Change[%]')\nax.set_xlabel('Time')\nax.set_ylabel('Rate of Gain Change[%]')\nax.set_xlim(0.5, 1.2)\nax.set_ylim(-30, 30)\nax.plot([0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2.0], [10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100], 'r-')\n\n# Create a second subplot\nax2 = fig.add_subplot(122)\nax2.set_title('Rate of Gain Change[%]')\nax2.set_xlabel('Time')\nax2.set_ylabel('Rate of Gain Change[%]')\nax2.set_xlim(0.5, 1.2)\nax2.set_ylim(-30, 30)\nax2.plot([0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2.0], [10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100], 'b-')\n\n# Create a third subplot\nax3 = fig.add_subplot(122)\nax3.set_title('Rate of Gain Change[%]')\nax3.set_xlabel('Time')\nax3.set_ylabel('Rate of Gain Change[%]')\nax3.set_xlim(0.5, 1.2)\nax3.set_ylim(-30, 30)\nax3.plot([0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2.0], [10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100], 'g-')\n\n# Create a fourth subplot\nax4 = fig.add_subplot(122)\nax4.set_title('Rate of Gain Change[%]')\nax4.set_xlabel('Time')\nax4.set_ylabel('Rate of Gain Change[%]')\nax4.set_xlim(0.5, 1.2)\nax4.set_ylim(-30, 30)\nax4.plot([0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2.0], [10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100], 'y-')\n\n# Create a fifth subplot\nax5 = fig.add_subplot(122)\nax5.set_title('Rate of Gain Change[%]')\nax5.set_xlabel('Time')\nax5.set_ylabel('Rate of Gain Change[%]')\nax5.set_xlim(0.5, 1.2)\nax5.set_ylim(-30, 30)\nax5.plot([0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2.0], [10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100], 'c-')\n\n# Create a sixth subplot\nax6 = fig.add_subplot(122)\nax6.set_title('Rate of Gain Change[%]')\nax6.set_xlabel('Time')\nax6.set_ylabel('Rate of Gain Change[%]')\nax6.set_xlim(0.5, 1.2)\nax6.set_ylim(-30, 30)\nax6.plot([0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2.0], [10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100], 'm-')\n\n# Create a seventh subplot\nax7 = fig.add_subplot(122)\nax7.set_title('Rate of Gain Change[%]')\nax7.set_xlabel('Time')\nax7.set_ylabel('Rate of Gain Change[%]')\nax7.set_xlim(0.5, 1.2)\nax7.set_ylim(-30, 30)\nax7.plot([0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2.0], [10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100], 'k-')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_95.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nmodels = ['Bactrian-X EN', 'Lima-X DE', 'Bactrian-X FR', 'Lima-X IT', 'Bactrian-X ES']\nperformance = [3.5, 2.3, 4.4, 1.3, -0.7]\nlanguage = ['EN', 'DE', 'FR', 'IT', 'ES']\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Plot the data\nax.bar(models, performance, color='blue')\n\n# Add labels and title\nax.set_xlabel('Model')\nax.set_ylabel('Performance [m/s]')\nax.set_title('Model Performance Improvement by Language')\n\n# Add a legend\nax.legend(language)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_96.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Set the title of the plot\nax.set_title('Truthful:Misleading = 2:0')\n\n# Create a bar chart with random data\nx = np.arange(3)\ny = np.random.randint(10, 90, 3)\nax.bar(x, y, color='blue')\n\n# Add labels to the x-axis\nax.set_xticks(x)\nax.set_xticklabels(['Random', 'Ours', 'SOTA'])\n\n# Add a grid to the plot\nax.grid(True)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_97.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Set the title of the plot\nax.set_title('Human Labeling and Agreement Bias Checking 1')\n\n# Create a bar chart with the data\nax.bar(range(1, 7), [50, 40, 30, 20, 10, 0], color='pink')\n\n# Set the x-axis labels\nax.set_xticks(range(1, 7))\nax.set_xticklabels(['1', '2', '3', '4', '5', '6'])\n\n# Set the y-axis label\nax.set_ylabel('Scores')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_98.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nmodels = ['Model A', 'Model B', 'Model C', 'Model D', 'Model E', 'Model F', 'Model G', 'Model H', 'Model I']\nscores = [54.9, 38.3, 71.5, 79.2, 52.9, 60.3, 54.5, 42.4, 92.6, 89.2, 83.3, 96.4, 83.3, 71.1, 64.6, 43.8, 7.1, 8.7, 2.0, 1.2]\ncolors = ['green', 'orange', 'brown', 'red', 'blue', 'cyan', 'magenta', 'yellow', 'black']\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot the data\nfor i in range(len(models)):\n    ax.barh(models[i], scores[i], color=colors[i])\n\n# Set the title and labels\nax.set_title('Performance Comparison by Model')\nax.set_xlabel('Scores')\n\n# Add a legend\nax.legend(['Contrastive Search', 'Beam Search'], loc='upper right')\n\n# Add a grid\nax.grid(True)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_99.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the first dataset\nx = ['Traffic Flow', 'Accident Rate', 'Public Transport Usage', 'Road Conditions', 'Public Satisfaction']\ny = [150.0, 180.0, 75.0, 90.0, 80.0]\ncolors = ['orange', 'orange', 'orange', 'orange', 'orange']\n\n# Data for the second dataset\nx2 = ['Traffic Flow', 'Accident Rate', 'Public Transport Usage', 'Road Conditions', 'Public Satisfaction']\ny2 = [2.5, 2.0, 1.5, 2.0, 1.0]\ncolors2 = ['lightblue', 'lightblue', 'lightblue', 'lightblue', 'lightblue']\n\n# Data for the third dataset\nx3 = ['Traffic Flow', 'Accident Rate', 'Public Transport Usage', 'Road Conditions', 'Public Satisfaction']\ny3 = [60.0, 55.0, 70.0, 65.0, 72.0]\ncolors3 = ['lightgreen', 'lightgreen', 'lightgreen', 'lightgreen', 'lightgreen']\n\n# Data for the fourth dataset\nx4 = ['Traffic Flow', 'Accident Rate', 'Public Transport Usage', 'Road Conditions', 'Public Satisfaction']\ny4 = [80.0, 75.0, 90.0, 85.0, 88.0]\ncolors4 = ['yellow', 'yellow', 'yellow', 'yellow', 'yellow']\n\nfig, axs = plt.subplots(2, 2, figsize=(10, 8))\n\n# Plot the first dataset\naxs[0, 0].bar(x, y, color=colors)\naxs[0, 0].set_title('Dataset 1')\n\n# Plot the second dataset\naxs[0, 1].bar(x2, y2, color=colors2)\naxs[0, 1].set_title('Dataset 2')\n\n# Plot the third dataset\naxs[1, 0].bar(x3, y3, color=colors3)\naxs[1, 0].set_title('Dataset 3')\n\n# Plot the fourth dataset\naxs[1, 1].bar(x4, y4, color=colors4)\naxs[1, 1].set_title('Dataset 4')\n\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/box_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\nax.set_title('Dominance')\nax.set_xlabel('SAM Rating')\nax.set_ylabel('Color')\n\n# Define the data for the plot\nx = [1, 2, 3, 4, 5, 6, 7, 8, 9]\ny = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n# Plot the data\nax.plot(x, y)\n\n# Set the color of the plot\nax.set_facecolor('blue')\n\n# Set the color of the grid\nax.grid(color='red', linestyle='-', linewidth=0.5)\n\n# Set the color of the ticks\nax.tick_params(axis='both', colors='green')\n\n# Set the color of the labels\nax.xaxis.label.set_color('orange')\nax.yaxis.label.set_color('purple')\n\n# Set the color of the title\nax.title.set_color('yellow')\n\n# Set the color of the legend\nax.legend(facecolor='cyan')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Hello World', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='magenta')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/box_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(9.0, 5.0))\n\n# Set the title of the plot\nax.set_title('Daily Activity Durations')\n\n# Create a bar chart for gaming duration\ngaming_duration = [20, 30, 40, 50, 60]\ngaming_duration_labels = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday']\nax.bar(gaming_duration_labels, gaming_duration, color='blue')\n\n# Create a bar chart for exercise duration\nexercise_duration = [10, 20, 30, 40, 50]\nexercise_duration_labels = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday']\nax.bar(exercise_duration_labels, exercise_duration, color='green')\n\n# Create a bar chart for reading duration\nreading_duration = [5, 10, 15, 20, 25]\nreading_duration_labels = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday']\nax.bar(reading_duration_labels, reading_duration, color='yellow')\n\n# Create a bar chart for music playtime\nmusic_playtime = [10, 20, 30, 40, 50]\nmusic_playtime_labels = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday']\nax.bar(music_playtime_labels, music_playtime, color='purple')\n\n# Set the x-axis label\nax.set_xlabel('Day of the Week')\n\n# Set the y-axis label\nax.set_ylabel('Duration (minutes)')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Set the title of the plot\nax.set_title('Bleu vs. BLEU')\n\n# Set the x-axis label\nax.set_xlabel('Bleu')\n\n# Set the y-axis label\nax.set_ylabel('BLEU')\n\n# Set the x-axis limits\nax.set_xlim(15, 25)\n\n# Set the y-axis limits\nax.set_ylim(15, 25)\n\n# Set the x-axis ticks\nax.set_xticks([15, 20, 25])\n\n# Set the y-axis ticks\nax.set_yticks([15, 20, 25])\n\n# Set the x-axis tick labels\nax.set_xticklabels(['Llama-70b (T2TT)', 'Llama-70b (S2TT)'])\n\n# Set the y-axis tick labels\nax.set_yticklabels(['Llama-70b (T2TT)', 'Llama-70b (S2TT)'])\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('orange')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('orange')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('black')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('black')\n\n# Set the color of the x-axis tick labels\nax.get_xticklabels()[0].set_color('black')\nax.get_xticklabels()[1].set_color('black')\n\n# Set the color of the y-axis tick labels\nax.get_yticklabels()[0].set_color('black')\nax.get_yticklabels()[1].set_color('black')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(True, color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(True, color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(True, color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(True, color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(True, color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(True, color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(True, color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(True, color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(True, color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(True, color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(True, color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(True, color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(True, color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(True, color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(True, color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(True, color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(True, color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(True, color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(True, color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(True, color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(True, color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(True, color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(True, color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(True, color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(True, color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(True, color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(True, color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(True, color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(True, color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(True, color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(True, color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(True, color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(True, color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(True, color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(True, color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(True, color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(True, color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(True, color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(True, color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(True, color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(True, color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(True, color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(True, color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(True, color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(True, color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(True, color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(True, color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(True, color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(True, color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(True, color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(True, color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(True, color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(True, color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(True, color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(True, color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(True, color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(True, color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(True, color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(True, color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(True, color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(True, color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(True, color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(True, color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(True, color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(True, color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(True, color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(True, color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(True, color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(True, color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(True, color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x"}
{"file": "dataset/ori_500/box_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Stock Market Analysis')\n\n# Set the x-axis label\nax.set_xlabel('Time')\n\n# Set the y-axis label\nax.set_ylabel('Price')\n\n# Set the x-ticks\nax.set_xticks([1, 2, 3, 4, 5])\n\n# Set the x-tick labels\nax.set_xticklabels(['AlphaBeta', 'z^', 'Gamma(\u03b3 = 0.05)', 'Gamma(\u03b3 = 0.1)', 'Gamma(\u03b3 = 0.25)'])\n\n# Set the y-ticks\nax.set_yticks([2.5, 3.0, 3.5, 4.0, 4.5, 5.0, 5.5, 6.0])\n\n# Set the y-tick labels\nax.set_yticklabels(['2.5', '3.0', '3.5', '4.0', '4.5', '5.0', '5.5', '6.0'])\n\n# Draw a rectangle for each stock\nax.add_patch(plt.Rectangle((1, 2.5), 1, 1, color='blue'))\nax.add_patch(plt.Rectangle((2, 3.0), 1, 1, color='green'))\nax.add_patch(plt.Rectangle((3, 3.5), 1, 1, color='red'))\nax.add_patch(plt.Rectangle((4, 4.0), 1, 1, color='yellow'))\nax.add_patch(plt.Rectangle((5, 4.5), 1, 1, color='orange'))\n\n# Draw a line for each stock's price change\nax.plot([1, 2, 3, 4, 5], [2.5, 3.0, 3.5, 4.0, 4.5], color='black')\nax.plot([1, 2, 3, 4, 5], [3.0, 3.5, 4.0, 4.5, 5.0], color='black')\nax.plot([1, 2, 3, 4, 5], [3.5, 4.0, 4.5, 5.0, 5.5], color='black')\nax.plot([1, 2, 3, 4, 5], [4.0, 4.5, 5.0, 5.5, 6.0], color='black')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 5.0))\n\n# Set the title of the plot\nax.set_title('Execution Accuracy')\n\n# Set the x-axis label\nax.set_xlabel('Algorithm')\n\n# Set the y-axis label\nax.set_ylabel('Accuracy')\n\n# Define the data for the plot\nalgorithms = ['SQL-Only', 'PoT', 'IC-LP', 'DAIL', 'IC-LP+PoT']\naccuracies = [0.875, 0.85, 0.825, 0.81, 0.80]\n\n# Plot the data\nax.bar(algorithms, accuracies, color='lightblue')\n\n# Set the limits of the y-axis\nax.set_ylim(0.75, 0.9)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and a set of subplots\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10, 5))\n\n# Set the title for each subplot\nax1.set_title('Region Classification Accuracy')\nax2.set_title('Slice Mean Error (ms)')\n\n# Create a color map for the accuracy values\ncmap = plt.cm.Reds\n\n# Create a color bar for the accuracy values\ncbar = fig.colorbar(cmap(np.linspace(0, 1, 10)), ax=ax1)\n\n# Create a scatter plot for the accuracy values\naccuracy_values = [0.88, 0.87, 0.83]\naccuracy_colors = cmap(np.linspace(0, 1, len(accuracy_values)))\nax1.scatter(range(len(accuracy_values)), accuracy_values, c=accuracy_colors)\nax1.set_yticks([0.6, 0.7, 0.8, 0.9, 1.0])\n\n# Create a scatter plot for the slice mean error values\nerror_values = [10.0, 9.33, 9.00]\nerror_colors = cmap(np.linspace(0, 1, len(error_values)))\nax2.scatter(range(len(error_values)), error_values, c=error_colors)\nax2.set_yticks([2.5, 5.0, 7.5, 10.0, 12.5, 15.0, 17.5, 20.0, 22.5])\n\n# Add a legend to the accuracy plot\nlegend_elements = [plt.Line2D([0], [0], marker='o', color='w', label='Dense (ref)', markerfacecolor='blue', markersize=10),\n                  plt.Line2D([0], [0], marker='o', color='w', label='Joint Multimodal Framework (ours)', markerfacecolor='orange', markersize=10),\n                  plt.Line2D([0], [0], marker='o', color='w', label='Cine', markerfacecolor='green', markersize=10)]\nax1.legend(handles=legend_elements, loc='upper right')\n\n# Add a legend to the error plot\nlegend_elements = [plt.Line2D([0], [0], marker='o', color='w', label='Dense (ref)', markerfacecolor='blue', markersize=10),\n                  plt.Line2D([0], [0], marker='o', color='w', label='Joint Multimodal Framework (ours)', markerfacecolor='orange', markersize=10),\n                  plt.Line2D([0], [0], marker='o', color='w', label='Cine', markerfacecolor='green', markersize=10)]\nax2.legend(handles=legend_elements, loc='upper right')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Set the title of the plot\nax.set_title('Player Performance')\n\n# Set the x-axis label\nax.set_xlabel('Player')\n\n# Set the y-axis label\nax.set_ylabel('Z-Score')\n\n# Define the players and their z-scores\nplayers = ['w/o att', 'w/o DP', '1xQ', '20xQ']\nz_scores = [4.5, 3.5, 5.5, 6.5]\n\n# Plot the data\nax.plot(players, z_scores, 'ro-')\n\n# Add a horizontal line at the threshold\nax.axhline(y=5, color='r', linestyle='-')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_16.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(5.0, 5.0))\n\n# Set the title of the plot\nax.set_title('Mean')\n\n# Create a bar chart with the data\nbars = ax.bar(['REM', 'No POP', 'Separate M emb.', '4 x 4 tokenizer', 'No latent space C', 'C w/o action inputs'], [1.2, 1.5, 1.8, 2.1, 2.4, 2.7], color='blue')\n\n# Add labels to the bars\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 1), va='bottom')\n\n# Set the limits of the x-axis\nax.set_xlim(0, 6)\n\n# Set the limits of the y-axis\nax.set_ylim(0, 3)\n\n# Set the tick marks on the x-axis\nax.set_xticks(np.arange(0, 6, 1))\n\n# Set the tick marks on the y-axis\nax.set_yticks(np.arange(0, 3, 0.5))\n\n# Set the labels for the x-axis\nax.set_xlabel('Time (s)')\n\n# Set the labels for the y-axis\nax.set_ylabel('Amplitude (V)')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_17.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 4.0))\n\n# Set the title of the plot\nax.set_title('Player Performance')\n\n# Set the x-axis labels\nx_labels = ['Run 1', 'Run 2', 'Run 3', 'Run 4', 'Run 5', 'Run 6', 'Run 7', 'Run 8', 'Run 9', 'Run 10']\nax.set_xticks(np.arange(len(x_labels)))\nax.set_xticklabels(x_labels)\n\n# Set the y-axis label\nax.set_ylabel('Value')\n\n# Set the y-axis limits\nax.set_ylim(0, 100)\n\n# Set the y-axis ticks\nax.set_yticks(np.arange(0, 101, 10))\n\n# Set the y-axis grid\nax.grid(axis='y')\n\n# Set the y-axis color\nax.spines['left'].set_color('blue')\n\n# Set the x-axis color\nax.spines['bottom'].set_color('black')\n\n# Set the y-axis color\nax.spines['left'].set_color('blue')\n\n# Set the x-axis color\nax.spines['bottom'].set_color('black')\n\n# Set the y-axis color\nax.spines['left'].set_color('blue')\n\n# Set the x-axis color\nax.spines['bottom'].set_color('black')\n\n# Set the y-axis color\nax.spines['left'].set_color('blue')\n\n# Set the x-axis color\nax.spines['bottom'].set_color('black')\n\n# Set the y-axis color\nax.spines['left'].set_color('blue')\n\n# Set the x-axis color\nax.spines['bottom'].set_color('black')\n\n# Set the y-axis color\nax.spines['left'].set_color('blue')\n\n# Set the x-axis color\nax.spines['bottom'].set_color('black')\n\n# Set the y-axis color\nax.spines['left'].set_color('blue')\n\n# Set the x-axis color\nax.spines['bottom'].set_color('black')\n\n# Set the y-axis color\nax.spines['left'].set_color('blue')\n\n# Set the x-axis color\nax.spines['bottom'].set_color('black')\n\n# Set the y-axis color\nax.spines['left'].set_color('blue')\n\n# Set the x-axis color\nax.spines['bottom'].set_color('black')\n\n# Set the y-axis color\nax.spines['left'].set_color('blue')\n\n# Set the x-axis color\nax.spines['bottom'].set_color('black')\n\n# Set the y-axis color\nax.spines['left'].set_color('blue')\n\n# Set the x-axis color\nax.spines['bottom'].set_color('black')\n\n# Set the y-axis color\nax.spines['left'].set_color('blue')\n\n# Set the x-axis color\nax.spines['bottom'].set_color('black')\n\n# Set the y-axis color\nax.spines['left'].set_color('blue')\n\n# Set the x-axis color\nax.spines['bottom'].set_color('black')\n\n# Set the y-axis color\nax.spines['left'].set_color('blue')\n\n# Set the x-axis color\nax.spines['bottom'].set_color('black')\n\n# Set the y-axis color\nax.spines['left'].set_color('blue')\n\n# Set the x-axis color\nax.spines['bottom'].set_color('black')\n\n# Set the y-axis color\nax.spines['left'].set_color('blue')\n\n# Set the x-axis color\nax.spines['bottom'].set_color('black')\n\n# Set the y-axis color\nax.spines['left'].set_color('blue')\n\n# Set the x-axis color\nax.spines['bottom'].set_color('black')\n\n# Set the y-axis color\nax.spines['left'].set_color('blue')\n\n# Set the x-axis color\nax.spines['bottom'].set_color('black')\n\n# Set the y-axis color\nax.spines['left'].set_color('blue')\n\n# Set the x-axis color\nax.spines['bottom'].set_color('black')\n\n# Set the y-axis color\nax.spines['left'].set_color('blue')\n\n# Set the x-axis color\nax.spines['bottom'].set_color('black')\n\n# Set the y-axis color\nax.spines['left'].set_color('blue')\n\n# Set the x-axis color\nax.spines['bottom'].set_color('black')\n\n# Set the y-axis color\nax.spines['left'].set_color('blue')\n\n# Set the x-axis color\nax.spines['bottom'].set_color('black')\n\n# Set the y-axis color\nax.spines['left'].set_color('blue')\n\n# Set the x-axis color\nax.spines['bottom'].set_color('black')\n\n# Set the y-axis color\nax.spines['left'].set_color('blue')\n\n# Set the x-axis color\nax.spines['bottom'].set_color('black')\n\n# Set the y-axis color\nax.spines['left'].set_color('blue')\n\n# Set the x-axis color\nax.spines['bottom'].set_color('black')\n\n# Set the y-axis color\nax.spines['left'].set_color('blue')\n\n# Set the x-axis color\nax.spines['bottom'].set_color('black')\n\n# Set the y-axis color\nax.spines['left'].set_color('blue')\n\n# Set the x-axis color\nax.spines['bottom'].set_color('black')\n\n# Set the y-axis color\nax.spines['left'].set_color('blue')\n\n# Set the x-axis color\nax.spines['bottom'].set_color('black')\n\n# Set the y-axis color\nax.spines['left'].set_color('blue')\n\n# Set the x-axis color\nax.spines['bottom'].set_color('black')\n\n# Set the y-axis color\nax.spines['left'].set_color('blue')\n\n# Set the x-axis color\nax.spines['bottom'].set_color('black')\n\n# Set the y-axis color\nax.spines['left'].set_color('blue')\n\n# Set the x-axis color\nax.spines['bottom'].set_color('black')\n\n# Set the y-axis color\nax.spines['left'].set_color('blue')\n\n# Set the x-axis color\nax.spines['bottom'].set_color('black')\n\n# Set the y-axis color\nax.spines['left'].set_color('blue')\n\n# Set the x-axis color\nax.spines['bottom'].set_color('black')\n\n# Set the y-axis color\nax.spines['left'].set_color('blue')\n\n# Set the x-axis color\nax.spines['bottom'].set_color('black')\n\n# Set the y-axis color\nax.spines['left'].set_color('blue')\n\n# Set the x-axis color\nax.spines['bottom'].set_color('black')\n\n# Set the y-axis color\nax.spines['left'].set_color('blue')\n\n# Set the x-axis color\nax.spines['bottom'].set_color('black')\n\n# Set the y-axis color\nax.spines['left'].set_color('blue')\n\n# Set the x-axis color\nax.spines['bottom'].set_color('black')\n\n# Set the y-axis color\nax.spines['left'].set_color('blue')\n\n# Set the x-axis color\nax.spines['bottom'].set_color('black')\n\n# Set the y-axis color\nax.spines['left'].set_color('blue')\n\n# Set the x-axis color\nax.spines['bottom'].set_color('black')\n\n# Set the y-axis color\nax.spines['left'].set_color('blue')\n\n# Set the x-axis color\nax.spines['bottom'].set_color('black')\n\n# Set the y-axis color\nax.spines['left'].set_color('blue')\n\n# Set the x-axis color\nax.spines['bottom'].set_color('black')\n\n# Set the y-axis color\nax.spines['left'].set_color('blue')\n\n# Set the x-axis color\nax.spines['bottom'].set_color('black')\n\n# Set the y-axis color\nax.spines['left'].set_color('blue')\n\n# Set the x-axis color\nax.spines['bottom'].set_color('black')\n\n# Set the y-axis color\nax.spines['left'].set_color('blue')\n\n# Set the x-axis color\nax.spines['bottom'].set_color('black')\n\n# Set the y-axis color\nax.spines['left'].set_color('blue')\n\n# Set the x-axis color\nax.spines['bottom'].set_color('black')\n\n# Set the y-axis color\nax.spines['left'].set_color('blue')\n\n# Set the x-axis color\nax.spines['bottom'].set_color('black')\n\n# Set the y-axis color\nax.spines['left'].set_color('blue')\n\n# Set the x-axis color\nax.spines['bottom'].set_color('black')\n\n# Set the y-axis color\nax.spines['left'].set_color('blue')\n\n# Set the x-axis color\nax.spines['bottom'].set_color('black')\n\n# Set the y-axis color\nax.spines['left'].set_color('blue')\n\n# Set the x-axis color\nax.spines['bottom'].set_color('black')\n\n# Set the y-axis color\nax.spines['left'].set_color('blue')\n\n# Set the x-axis color\nax.spines['bottom'].set_color('black')\n\n# Set the y-axis color\nax.spines['left'].set_color('blue')\n\n# Set the x-axis color\nax.spines['bottom'].set_color('black')\n\n# Set the y-axis color\nax.spines['left'].set_color('blue')\n\n# Set the x-axis color\nax.spines['bottom'].set_color('black')\n\n# Set the y-axis color\nax.spines['left'].set_color('blue')\n\n# Set the x-axis color\nax.spines['bottom'].set_color('black')\n\n# Set the y-axis color\nax.spines['left'].set_color('blue')\n\n# Set the x-axis color\nax.spines['bottom'].set_color('black')\n\n# Set the y-axis color\nax.spines['left'].set_color('blue')\n\n# Set the x-axis color\nax.spines['bottom'].set_color('black')\n\n# Set the y-axis color\nax.spines['left'].set_color('blue')\n\n# Set the x-axis color\nax.spines['bottom'].set_color('black')\n\n# Set the y-axis color\nax.spines['left'].set_color('blue')\n\n# Set the x-axis color\nax.spines['bottom'].set_color('black')\n\n# Set the y-axis color\nax.spines['left'].set_color('blue')\n\n# Set the x-axis color\nax.spines['bottom'].set_color('black')\n\n# Set the y-axis color\nax.spines['left'].set_color('blue')\n\n# Set the x-axis color\nax.spines['bottom'].set_color('black')\n\n# Set the y-axis color\nax.spines['left'].set_color('blue')\n\n# Set the x-axis color\nax.spines['bottom'].set_color('black')\n\n# Set the y-axis color\nax.spines['left'].set_color('blue')\n\n# Set the x-axis color\nax.spines['bottom'].set_color('black')\n\n# Set the y-axis color\nax.spines['left'].set_color('blue')\n\n# Set the x-axis color\nax.spines['bottom'].set_color('black')\n\n# Set the y-axis color\nax.spines['left'].set_color('blue')\n\n# Set the x-axis color\nax.spines['bottom'].set_color('black')\n\n# Set the y-axis color\nax.spines['left'].set_color('blue')\n\n# Set the x-axis color\nax.spines['bottom'].set_color('black')\n\n# Set the y-axis color\nax.spines['left'].set_color('blue')\n\n# Set the x-axis color\nax.spines['bottom'].set_color('black')\n\n# Set the y-axis color\nax.spines['left'].set_color('blue')\n\n# Set the x-axis color\nax.spines['bottom'].set_color('black')\n\n# Set the y-axis color\nax.spines['left'].set_color('blue')\n\n# Set the x-axis color\nax.spines['bottom'].set_color('black')\n\n# Set the y-axis color\nax.spines['left'].set_color('blue')\n\n# Set the x-axis color\nax.spines['bottom'].set_color('black')\n\n# Set the y-axis color\nax.spines['left'].set_color('blue')\n\n# Set the x-axis color\nax.spines['bottom'].set_color('black')\n\n# Set the y-axis color\nax.spines['left'].set_color('blue')\n\n# Set the x-axis color\nax.spines['bottom'].set_color('black')\n\n# Set the y-axis color\nax.spines['left'].set_color('blue')\n\n# Set the x-axis color\nax.spines['bottom'].set_color('black')\n\n# Set the y-axis color\nax.spines['left'].set_color('blue')\n\n# Set the x-axis color\nax.spines['bottom'].set_color('black')\n\n# Set the y-axis color\nax.spines['left'].set_color('blue')\n\n# Set the x-axis color\nax.spines['bottom'].set_color('black')\n\n# Set the y-axis color\nax.spines['left'].set_color('blue')\n\n# Set the x-axis color\nax.spines['bottom'].set_color('black')\n\n# Set the y-axis color\nax.spines['left'].set_color('blue')\n\n# Set the x-axis color\nax.spines['bottom'].set_color('black')\n\n# Set the y-axis color\nax.spines['left'].set_color('blue')\n\n# Set the x-axis color\nax.spines['bottom'].set_color('black')\n\n# Set the y-axis color\nax.spines['left'].set_color('blue')\n\n# Set the x-axis color\nax.spines['bottom'].set_color('black')\n\n# Set the y-axis color\nax.spines['left'].set_color('blue')\n\n# Set the x-axis color\nax.spines['bottom'].set_color('black')\n\n# Set the y-axis color\nax.spines['left'].set_color('blue')\n\n# Set the x-axis color\nax.spines['bottom'].set_color('black')\n\n# Set the y-axis color\nax.spines['left'].set_color('blue')\n\n# Set the x-axis color\nax.spines['bottom'].set_color('black')\n\n# Set the y-axis color\nax.spines['left'].set_color('blue')\n\n# Set the x-axis color\nax.spines['bottom'].set_color('black')\n\n# Set the y-axis color\nax.spines['left'].set_color('blue')\n\n# Set the x-axis color\nax.spines['bottom'].set_color('black')\n\n# Set the y-axis color\nax.spines['left'].set_color('blue')\n\n# Set the x-axis color\nax.spines['bottom'].set_color('black')\n\n# Set the y-axis color\nax.spines['left'].set_color('blue')\n\n# Set the x-axis color\nax.spines['bottom'].set_color('black')\n\n# Set the y-axis color\nax.spines['left'].set_color('blue')\n\n# Set the x-axis color\nax.spines['bottom'].set_color('black')\n\n# Set the y-axis color\nax.spines['left'].set_color('blue')\n\n# Set the x-axis color\nax.spines['bottom'].set_color('black')\n\n# Set the y-axis color\nax.spines['left'].set_color('blue')\n\n# Set the x-axis color\nax.spines['bottom'].set_color('black')\n\n# Set the y-axis color\nax.spines['left'].set_color('blue')\n\n# Set the x-axis color\nax.spines['bottom'].set_color('black')\n\n# Set the y-axis color\nax.spines['left'].set_color('blue')\n\n# Set the x-axis color\nax.spines['bottom'].set_color('black')\n\n# Set the y-axis color\nax.spines['left'].set_color('blue')\n\n# Set the x-axis color\nax.spines['bottom'].set_color('black')\n\n# Set the y-axis color\nax.spines['left'].set_color('blue')\n\n# Set the x-axis color\nax.spines['bottom'].set_color('black')\n\n# Set the y-axis color\nax.spines['left'].set_color('blue')\n\n# Set the x-axis color\nax.spines['bottom'].set_color('black')\n\n# Set the y-axis color\nax.spines['left'].set_color('blue')\n\n# Set the x-axis color\nax.spines['bottom'].set_color('black')\n\n# Set the y-axis color\nax.spines['left'].set_color('blue')\n\n# Set the x-axis color\nax.spines['bottom'].set_color('black')\n\n# Set the y-axis color\nax.spines['left'].set_color('blue')\n\n# Set the x-axis color\nax.spines['bottom'].set_color('black')\n\n# Set the y-axis color\nax.spines['left'].set_color('blue')\n\n# Set the x-axis color\nax.spines['bottom'].set_color('black')\n\n# Set the y-axis color\nax.spines['left'].set_color('blue')\n\n# Set the x-axis color\nax.spines['bottom'].set_color('black')\n\n# Set the y-axis color\nax.spines['left'].set_color('blue')\n\n# Set the x-axis color\nax.spines['bottom'].set_color('black')\n\n# Set the y-axis color\nax.spines['left'].set_color('blue')\n\n# Set the x-axis color\nax.spines['bottom'].set_color('black')\n\n# Set the y-axis color\nax.spines['left'].set_color('blue')\n\n# Set the x-axis color\nax.spines['bottom'].set_color('black')\n\n# Set the y-axis color\nax.spines['left'].set_color('blue')\n\n# Set the x-axis color\nax.spines['bottom'].set_color('black')\n\n# Set the y-axis color\nax.spines['left'].set_color('blue')\n\n# Set the x-axis color\nax.spines['bottom'].set_color('black')\n\n# Set the y-axis color\nax.spines['left'].set_color('blue')\n\n# Set the x-axis color\nax.spines['bottom'].set_color('black')\n\n# Set the y-axis color\nax.spines['left'].set_color('blue')\n\n# Set the x-axis color\nax.spines['bottom'].set_color('black')\n\n# Set the y-axis color\nax.spines['left'].set_color('blue')\n\n# Set the x-axis color\nax.spines['bottom'].set_color('black')\n\n# Set the y-axis color\nax.spines['left'].set_color('blue')\n\n# Set the x-axis color\nax.spines['bottom'].set_color('black')\n\n# Set the y-axis color\nax.spines['left'].set_color('blue')\n\n# Set the x-axis color\nax.spines['bottom'].set_color('black')\n\n# Set the y-axis color\nax.spines['left'].set_color('blue')\n\n# Set the x-axis color\nax.spines['bottom'].set_color('black')\n\n# Set the y-axis color\n"}
{"file": "dataset/ori_500/box_18.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Set the background color of the plot\nax.set_facecolor('#F0E68C')\n\n# Create a rectangle for the logo\nlogo = plt.Rectangle((0.45, 0.9), 0.1, 0.1, fc='white', ec='black')\nax.add_patch(logo)\n\n# Create a rectangle for the title\ntitle = plt.Rectangle((0.2, 0.85), 0.6, 0.1, fc='#FFA07A', ec='black')\nax.add_patch(title)\n\n# Create a rectangle for the subtitle\nsubtitle = plt.Rectangle((0.3, 0.8), 0.4, 0.1, fc='#FFD700', ec='black')\nax.add_patch(subtitle)\n\n# Create a rectangle for the main content\nmain_content = plt.Rectangle((0.1, 0.6), 0.8, 0.2, fc='#ADD8E6', ec='black')\nax.add_patch(main_content)\n\n# Create a rectangle for the footer\nfooter = plt.Rectangle((0.1, 0.1), 0.8, 0.1, fc='#B0C4DE', ec='black')\nax.add_patch(footer)\n\n# Create a rectangle for the sidebar\nsidebar = plt.Rectangle((0.9, 0.1), 0.1, 0.8, fc='#B0C4DE', ec='black')\nax.add_patch(sidebar)\n\n# Create a rectangle for the logo in the sidebar\nlogo_sidebar = plt.Rectangle((0.9, 0.9), 0.1, 0.1, fc='white', ec='black')\nax.add_patch(logo_sidebar)\n\n# Create a rectangle for the title in the sidebar\ntitle_sidebar = plt.Rectangle((0.7, 0.85), 0.2, 0.1, fc='#FFA07A', ec='black')\nax.add_patch(title_sidebar)\n\n# Create a rectangle for the subtitle in the sidebar\nsubtitle_sidebar = plt.Rectangle((0.7, 0.8), 0.2, 0.1, fc='#FFD700', ec='black')\nax.add_patch(subtitle_sidebar)\n\n# Create a rectangle for the main content in the sidebar\nmain_content_sidebar = plt.Rectangle((0.5, 0.6), 0.4, 0.2, fc='#ADD8E6', ec='black')\nax.add_patch(main_content_sidebar)\n\n# Create a rectangle for the footer in the sidebar\nfooter_sidebar = plt.Rectangle((0.5, 0.1), 0.4, 0.1, fc='#B0C4DE', ec='black')\nax.add_patch(footer_sidebar)\n\n# Create a rectangle for the logo in the footer\nlogo_footer = plt.Rectangle((0.1, 0.1), 0.1, 0.1, fc='white', ec='black')\nax.add_patch(logo_footer)\n\n# Create a rectangle for the title in the footer\ntitle_footer = plt.Rectangle((0.2, 0.15), 0.6, 0.1, fc='#FFA07A', ec='black')\nax.add_patch(title_footer)\n\n# Create a rectangle for the subtitle in the footer\nsubtitle_footer = plt.Rectangle((0.2, 0.1), 0.6, 0.1, fc='#FFD700', ec='black')\nax.add_patch(subtitle_footer)\n\n# Create a rectangle for the main content in the footer\nmain_content_footer = plt.Rectangle((0.3, 0.2), 0.4, 0.1, fc='#ADD8E6', ec='black')\nax.add_patch(main_content_footer)\n\n# Create a rectangle for the footer in the footer\nfooter_footer = plt.Rectangle((0.3, 0.25), 0.4, 0.1, fc='#B0C4DE', ec='black')\nax.add_patch(footer_footer)\n\n# Create a rectangle for the logo in the sidebar\nlogo_sidebar = plt.Rectangle((0.9, 0.9), 0.1, 0.1, fc='white', ec='black')\nax.add_patch(logo_sidebar)\n\n# Create a rectangle for the title in the sidebar\ntitle_sidebar = plt.Rectangle((0.7, 0.85), 0.2, 0.1, fc='#FFA07A', ec='black')\nax.add_patch(title_sidebar)\n\n# Create a rectangle for the subtitle in the sidebar\nsubtitle_sidebar = plt.Rectangle((0.7, 0.8), 0.2, 0.1, fc='#FFD700', ec='black')\nax.add_patch(subtitle_sidebar)\n\n# Create a rectangle for the main content in the sidebar\nmain_content_sidebar = plt.Rectangle((0.5, 0.6), 0.4, 0.2, fc='#ADD8E6', ec='black')\nax.add_patch(main_content_sidebar)\n\n# Create a rectangle for the footer in the sidebar\nfooter_sidebar = plt.Rectangle((0.5, 0.1), 0.4, 0.1, fc='#B0C4DE', ec='black')\nax.add_patch(footer_sidebar)\n\n# Create a rectangle for the logo in the footer\nlogo_footer = plt.Rectangle((0.1, 0.1), 0.1, 0.1, fc='white', ec='black')\nax.add_patch(logo_footer)\n\n# Create a rectangle for the title in the footer\ntitle_footer = plt.Rectangle((0.2, 0.15), 0.6, 0.1, fc='#FFA07A', ec='black')\nax.add_patch(title_footer)\n\n# Create a rectangle for the subtitle in the footer\nsubtitle_footer = plt.Rectangle((0.2, 0.1), 0.6, 0.1, fc='#FFD700', ec='black')\nax.add_patch(subtitle_footer)\n\n# Create a rectangle for the main content in the footer\nmain_content_footer = plt.Rectangle((0.3, 0.2), 0.4, 0.1, fc='#ADD8E6', ec='black')\nax.add_patch(main_content_footer)\n\n# Create a rectangle for the footer in the footer\nfooter_footer = plt.Rectangle((0.3, 0.25), 0.4, 0.1, fc='#B0C4DE', ec='black')\nax.add_patch(footer_footer)\n\n# Create a rectangle for the logo in the sidebar\nlogo_sidebar = plt.Rectangle((0.9, 0.9), 0.1, 0.1, fc='white', ec='black')\nax.add_patch(logo_sidebar)\n\n# Create a rectangle for the title in the sidebar\ntitle_sidebar = plt.Rectangle((0.7, 0.85), 0.2, 0.1, fc='#FFA07A', ec='black')\nax.add_patch(title_sidebar)\n\n# Create a rectangle for the subtitle in the sidebar\nsubtitle_sidebar = plt.Rectangle((0.7, 0.8), 0.2, 0.1, fc='#FFD700', ec='black')\nax.add_patch(subtitle_sidebar)\n\n# Create a rectangle for the main content in the sidebar\nmain_content_sidebar = plt.Rectangle((0.5, 0.6), 0.4, 0.2, fc='#ADD8E6', ec='black')\nax.add_patch(main_content_sidebar)\n\n# Create a rectangle for the footer in the sidebar\nfooter_sidebar = plt.Rectangle((0.5, 0.1), 0.4, 0.1, fc='#B0C4DE', ec='black')\nax.add_patch(footer_sidebar)\n\n# Create a rectangle for the logo in the footer\nlogo_footer = plt.Rectangle((0.1, 0.1), 0.1, 0.1, fc='white', ec='black')\nax.add_patch(logo_footer)\n\n# Create a rectangle for the title in the footer\ntitle_footer = plt.Rectangle((0.2, 0.15), 0.6, 0.1, fc='#FFA07A', ec='black')\nax.add_patch(title_footer)\n\n# Create a rectangle for the subtitle in the footer\nsubtitle_footer = plt.Rectangle((0.2, 0.1), 0.6, 0.1, fc='#FFD700', ec='black')\nax.add_patch(subtitle_footer)\n\n# Create a rectangle for the main content in the footer\nmain_content_footer = plt.Rectangle((0.3, 0.2), 0.4, 0.1, fc='#ADD8E6', ec='black')\nax.add_patch(main_content_footer)\n\n# Create a rectangle for the footer in the footer\nfooter_footer = plt.Rectangle((0.3, 0.25), 0.4, 0.1, fc='#B0C4DE', ec='black')\nax.add_patch(footer_footer)\n\n# Create a rectangle for the logo in the sidebar\nlogo_sidebar = plt.Rectangle((0.9, 0.9), 0.1, 0.1, fc='white', ec='black')\nax.add_patch(logo_sidebar)\n\n# Create a rectangle for the title in the sidebar\ntitle_sidebar = plt.Rectangle((0.7, 0.85), 0.2, 0.1, fc='#FFA07A', ec='black')\nax.add_patch(title_sidebar)\n\n# Create a rectangle for the subtitle in the sidebar\nsubtitle_sidebar = plt.Rectangle((0.7, 0.8), 0.2, 0.1, fc='#FFD700', ec='black')\nax.add_patch(subtitle_sidebar)\n\n# Create a rectangle for the main content in the sidebar\nmain_content_sidebar = plt.Rectangle((0.5, 0.6), 0.4, 0.2, fc='#ADD8E6', ec='black')\nax.add_patch(main_content_sidebar)\n\n# Create a rectangle for the footer in the sidebar\nfooter_sidebar = plt.Rectangle((0.5, 0.1), 0.4, 0.1, fc='#B0C4DE', ec='black')\nax.add_patch(footer_sidebar)\n\n# Create a rectangle for the logo in the footer\nlogo_footer = plt.Rectangle((0.1, 0.1), 0.1, 0.1, fc='white', ec='black')\nax.add_patch(logo_footer)\n\n# Create a rectangle for the title in the footer\ntitle_footer = plt.Rectangle((0.2, 0.15), 0.6, 0.1, fc='#FFA07A', ec='black')\nax.add_patch(title_footer)\n\n# Create a rectangle for the subtitle in the footer\nsubtitle_footer = plt.Rectangle((0.2, 0.1), 0.6, 0.1, fc='#FFD700', ec='black')\nax.add_patch(subtitle_footer)\n\n# Create a rectangle for the main content in the footer\nmain_content_footer = plt.Rectangle((0.3, 0.2), 0.4, 0.1, fc='#ADD8E6', ec='black')\nax.add_patch(main_content_footer)\n\n# Create a rectangle for the footer in the footer\nfooter_footer = plt.Rectangle((0.3, 0.25), 0.4, 0.1, fc='#B0C4DE', ec='black')\nax.add_patch(footer_footer)\n\n# Create a rectangle for the logo in the sidebar\nlogo_sidebar = plt.Rectangle((0.9, 0.9), 0.1, 0.1, fc='white', ec='black')\nax.add_patch(logo_sidebar)\n\n# Create a rectangle for the title in the sidebar\ntitle_sidebar = plt.Rectangle((0.7, 0.85), 0.2, 0.1, fc='#FFA07A', ec='black')\nax.add_patch(title_sidebar)\n\n# Create a rectangle for the subtitle in the sidebar\nsubtitle_sidebar = plt.Rectangle((0.7, 0.8), 0.2, 0.1, fc='#FFD700', ec='black')\nax.add_patch(subtitle_sidebar)\n\n# Create a rectangle for the main content in the sidebar\nmain_content_sidebar = plt.Rectangle((0.5, 0.6), 0.4, 0.2, fc='#ADD8E6', ec='black')\nax.add_patch(main_content_sidebar)\n\n# Create a rectangle for the footer in the sidebar\nfooter_sidebar = plt.Rectangle((0.5, 0.1), 0.4, 0.1, fc='#B0C4DE', ec='black')\nax.add_patch(footer_sidebar)\n\n# Create a rectangle for the logo in the footer\nlogo_footer = plt.Rectangle((0.1, 0.1), 0.1, 0.1, fc='white', ec='black')\nax.add_patch(logo_footer)\n\n# Create a rectangle for the title in the footer\ntitle_footer = plt.Rectangle((0.2, 0.15), 0.6, 0.1, fc='#FFA07A', ec='black')\nax.add_patch(title_footer)\n\n# Create a rectangle for the subtitle in the footer\nsubtitle_footer = plt.Rectangle((0.2, 0.1), 0.6, 0.1, fc='#FFD700', ec='black')\nax.add_patch(subtitle_footer)\n\n# Create a rectangle for the main content in the footer\nmain_content_footer = plt.Rectangle((0.3, 0.2), 0.4, 0.1, fc='#ADD8E6', ec='black')\nax.add_patch(main_content_footer)\n\n# Create a rectangle for the footer in the footer\nfooter_footer = plt.Rectangle((0.3, 0.25), 0.4, 0.1, fc='#B0C4DE', ec='black')\nax.add_patch(footer_footer)\n\n# Create a rectangle for the logo in the sidebar\nlogo_sidebar = plt.Rectangle((0.9, 0.9), 0.1, 0.1, fc='white', ec='black')\nax.add_patch(logo_sidebar)\n\n# Create a rectangle for the title in the sidebar\ntitle_sidebar = plt.Rectangle((0.7, 0.85), 0.2, 0.1, fc='#FFA07A', ec='black')\nax.add_patch(title_sidebar)\n\n# Create a rectangle for the subtitle in the sidebar\nsubtitle_sidebar = plt.Rectangle((0.7, 0.8), 0.2, 0.1, fc='#FFD700', ec='black')\nax.add_patch(subtitle_sidebar)\n\n# Create a rectangle for the main content in the sidebar\nmain_content_sidebar = plt.Rectangle((0.5, 0.6), 0.4, 0.2, fc='#ADD8E6', ec='black')\nax.add_patch(main_content_sidebar)\n\n# Create a rectangle for the footer in the sidebar\nfooter_sidebar = plt.Rectangle((0.5, 0.1), 0.4, 0.1, fc='#B0C4DE', ec='black')\nax.add_patch(footer_sidebar)\n\n# Create a rectangle for the logo in the footer\nlogo_footer = plt.Rectangle((0.1, 0.1), 0.1, 0.1, fc='white', ec='black')\nax.add_patch(logo_footer)\n\n# Create a rectangle for the title in the footer\ntitle_footer = plt.Rectangle((0.2, 0.15), 0.6, 0.1, fc='#FFA07A', ec='black')\nax.add_patch(title_footer)\n\n# Create a rectangle for the subtitle in the footer\nsubtitle_footer = plt.Rectangle((0.2, 0.1), 0.6, 0.1, fc='#FFD700', ec='black')\nax.add_patch(subtitle_footer)\n\n# Create a rectangle for the main content in the footer\nmain_content_footer = plt.Rectangle((0.3, 0.2), 0.4, 0.1, fc='#ADD8E6', ec='black')\nax.add_patch(main_content_footer)\n\n# Create a rectangle for the footer in the footer\nfooter_footer = plt.Rectangle((0.3, 0.25), 0.4, 0.1, fc='#B0C4DE', ec='black')\nax.add_patch(footer_footer)\n\n# Create a rectangle for the logo in the sidebar\nlogo_sidebar = plt.Rectangle((0.9, 0.9), 0.1, 0.1, fc='white', ec='black')\nax.add_patch(logo_sidebar)\n\n# Create a rectangle for the title in the sidebar\ntitle_sidebar = plt.Rectangle((0.7, 0.85), 0.2, 0.1, fc='#FFA07A', ec='black')\nax.add_patch(title_sidebar)\n\n# Create a rectangle for the subtitle in the sidebar\nsubtitle_sidebar = plt.Rectangle((0.7, 0.8), 0.2, 0.1, fc='#FFD700', ec='black')\nax.add_patch(subtitle_sidebar)\n\n# Create a rectangle for the main content in the sidebar\nmain_content_sidebar = plt.Rectangle((0.5, 0.6), 0.4, 0.2, fc='#ADD8E6', ec='black')\nax.add_patch(main_content_sidebar)\n\n# Create a rectangle for the footer in the sidebar\nfooter_sidebar = plt.Rectangle((0.5, 0.1), 0.4, 0.1, fc='#B0C4DE', ec='black')\nax.add_patch(footer_sidebar)\n\n# Create a rectangle for the logo in the footer\nlogo_footer = plt.Rectangle((0.1, 0.1), 0.1, 0.1, fc='white', ec='black')\nax.add_patch(logo_footer)\n\n# Create a rectangle for the title in the footer\ntitle_footer = plt.Rectangle((0.2, 0.15), 0.6, 0.1, fc='#FFA07A', ec='black')\nax.add_patch(title_footer)\n\n# Create a rectangle for the subtitle in the footer\nsubtitle_footer = plt.Rectangle((0.2, 0.1), 0.6, 0.1, fc='#FFD700', ec='black')\nax.add_patch(subtitle_footer)\n\n# Create a rectangle for the main content in the footer\nmain_content_footer = plt.Rectangle((0.3, 0.2), 0.4, 0"}
{"file": "dataset/ori_500/box_19.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and a set of subplots\nfig, axs = plt.subplots(2, 3, figsize=(10, 4))\n\n# Set the title for each subplot\naxs[0, 0].set_title('EME sentences')\naxs[0, 1].set_title('Neutral sentences')\naxs[0, 2].set_title('ME sentences')\n\n# Create a scatter plot for each subplot\nfor i in range(3):\n    # Generate random data for each subplot\n    x = np.random.rand(50)\n    y = np.random.rand(50)\n    # Plot the data\n    axs[0, i].scatter(x, y)\n    # Add a legend\n    axs[0, i].legend(['Data'])\n\n# Create a bar chart for each subplot\nfor i in range(3):\n    # Generate random data for each subplot\n    x = np.random.rand(50)\n    y = np.random.rand(50)\n    # Plot the data\n    axs[1, i].bar(x, y)\n    # Add a legend\n    axs[1, i].legend(['Data'])\n\n# Set the x-axis labels for each subplot\naxs[0, 0].set_xlabel('BERT Base')\naxs[0, 1].set_xlabel('MacBERT')\naxs[0, 2].set_xlabel('English HLM')\naxs[1, 0].set_xlabel('BERT Base')\naxs[1, 1].set_xlabel('MacBERT')\naxs[1, 2].set_xlabel('English HLM')\n\n# Set the y-axis labels for each subplot\naxs[0, 0].set_ylabel('\u03b4 (m/s)')\naxs[0, 1].set_ylabel('\u03b4 (m/s)')\naxs[0, 2].set_ylabel('\u03b4 (m/s)')\naxs[1, 0].set_ylabel('\u03b4 (m/s)')\naxs[1, 1].set_ylabel('\u03b4 (m/s)')\naxs[1, 2].set_ylabel('\u03b4 (m/s)')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and a set of subplots\nfig, axs = plt.subplots(2, 2, figsize=(8.0, 6.0))\n\n# Set the title for each subplot\naxs[0, 0].set_title('Ratings')\naxs[0, 1].set_title('Intrustion')\naxs[1, 0].set_title('Ratings')\naxs[1, 1].set_title('Intrustion')\n\n# Create a color map for the ratings\ncmap = plt.get_cmap('Blues')\n\n# Create a scatter plot for the ratings\naxs[0, 0].scatter(np.random.rand(5), np.random.rand(5), c=np.random.rand(5), cmap=cmap)\naxs[0, 1].scatter(np.random.rand(5), np.random.rand(5), c=np.random.rand(5), cmap=cmap)\naxs[1, 0].scatter(np.random.rand(5), np.random.rand(5), c=np.random.rand(5), cmap=cmap)\naxs[1, 1].scatter(np.random.rand(5), np.random.rand(5), c=np.random.rand(5), cmap=cmap)\n\n# Add a color bar to the plot\nfig.colorbar(axs[0, 0].collections[0], ax=axs[0, 0])\nfig.colorbar(axs[0, 1].collections[0], ax=axs[0, 1])\nfig.colorbar(axs[1, 0].collections[0], ax=axs[1, 0])\nfig.colorbar(axs[1, 1].collections[0], ax=axs[1, 1])\n\n# Set the limits for the x and y axes\naxs[0, 0].set_xlim([0, 1])\naxs[0, 0].set_ylim([0, 1])\naxs[0, 1].set_xlim([0, 1])\naxs[0, 1].set_ylim([0, 1])\naxs[1, 0].set_xlim([0, 1])\naxs[1, 0].set_ylim([0, 1])\naxs[1, 1].set_xlim([0, 1])\naxs[1, 1].set_ylim([0, 1])\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_20.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and a set of subplots\nfig, axs = plt.subplots(2, 3, figsize=(10, 5))\n\n# Set the title for each subplot\naxs[0, 0].set_title('Digit span')\naxs[0, 1].set_title('Lexical decision')\naxs[0, 2].set_title('Lexical decision')\naxs[1, 0].set_title('Reaction time')\naxs[1, 1].set_title('Trail making')\naxs[1, 2].set_title('Trail making')\n\n# Create a scatter plot for each subplot\naxs[0, 0].scatter(np.random.rand(10), np.random.rand(10), color='blue')\naxs[0, 1].scatter(np.random.rand(10), np.random.rand(10), color='orange')\naxs[0, 2].scatter(np.random.rand(10), np.random.rand(10), color='red')\naxs[1, 0].scatter(np.random.rand(10), np.random.rand(10), color='blue')\naxs[1, 1].scatter(np.random.rand(10), np.random.rand(10), color='orange')\naxs[1, 2].scatter(np.random.rand(10), np.random.rand(10), color='red')\n\n# Add a legend to each subplot\naxs[0, 0].legend(['target', 'control'], loc='upper left')\naxs[0, 1].legend(['target', 'control'], loc='upper left')\naxs[0, 2].legend(['target', 'control'], loc='upper left')\naxs[1, 0].legend(['target', 'control'], loc='upper left')\naxs[1, 1].legend(['target', 'control'], loc='upper left')\naxs[1, 2].legend(['target', 'control'], loc='upper left')\n\n# Set the x and y limits for each subplot\naxs[0, 0].set_xlim([0, 1])\naxs[0, 0].set_ylim([0, 1])\naxs[0, 1].set_xlim([0, 1])\naxs[0, 1].set_ylim([0, 1])\naxs[0, 2].set_xlim([0, 1])\naxs[0, 2].set_ylim([0, 1])\naxs[1, 0].set_xlim([0, 1])\naxs[1, 0].set_ylim([0, 1])\naxs[1, 1].set_xlim([0, 1])\naxs[1, 1].set_ylim([0, 1])\naxs[1, 2].set_xlim([0, 1])\naxs[1, 2].set_ylim([0, 1])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_21.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(9.0, 5.0))\n\n# Set the title of the plot\nax.set_title('Methods')\n\n# Create a bar chart\nax.bar(['BG', 'IBP', 'SSP', 'NBP'], [10, 20, 30, 40], color='blue')\n\n# Set the x-axis label\nax.set_xlabel('Prediction Accuracy v_{D_1}')\n\n# Set the y-axis label\nax.set_ylabel('Percentage')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_22.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 5.0))\n\n# Set the x-axis limits\nax.set_xlim(0, 400)\n\n# Set the y-axis limits\nax.set_ylim(-1, 1)\n\n# Set the x-axis label\nax.set_xlabel('Search depth')\n\n# Set the y-axis label\nax.set_ylabel('Reward')\n\n# Set the title of the plot\nax.set_title('Deep Q-Learning Agent Performance')\n\n# Create a scatter plot\nax.scatter([50, 100, 150, 200, 300, 350], [0.02, 0.04, 0.06, 0.08, 0.1, 0.12], color='blue')\n\n# Create a bar chart\nax.bar([50, 100, 150, 200, 300, 350], [0.01, 0.02, 0.03, 0.04, 0.05, 0.06], color='green')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_23.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(9.0, 5.0))\n\n# Set the title of the plot\nax.set_title('Daily Activity Durations')\n\n# Create a bar chart with the data\nax.bar(['Music Playtime', 'Reading Duration', 'Exercise Duration', 'Gaming Duration'], [65.1, 55.7, 50.3, 29.5], color='blue')\n\n# Set the x-axis label\nax.set_xlabel('Activity')\n\n# Set the y-axis label\nax.set_ylabel('Duration (minutes)')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_24.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Set the title of the plot\nax.set_title('Mean Value')\n\n# Create a bar chart with random data\nx = np.arange(1, 9)\ny = np.random.rand(8)\nax.bar(x, y)\n\n# Set the x-axis labels\nax.set_xticks(x)\nax.set_xticklabels(['No Intervention', 'Low Intensity', 'High Intensity', 'Recovery', 'Nutrition', 'Environment', 'Sleep', 'Stress'])\n\n# Set the y-axis label\nax.set_ylabel('Value')\n\n# Set the y-axis limits\nax.set_ylim([0, 3])\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0.5, 0.5), 2, 2, color='blue')\nax.add_patch(rect)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_25.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Set the x-axis limits\nax.set_xlim(-40, 40)\n\n# Set the y-axis limits\nax.set_ylim(-0.5, 7.5)\n\n# Set the x-axis ticks\nax.set_xticks(np.arange(-40, 41, 20))\n\n# Set the y-axis ticks\nax.set_yticks(np.arange(0, 8, 1))\n\n# Set the x-axis label\nax.set_xlabel('Angular Frequency [rad/s]')\n\n# Set the y-axis label\nax.set_ylabel('Thrust [N]')\n\n# Set the title of the plot\nax.set_title('Rocket Thrust vs Angular Frequency')\n\n# Add a vertical line at x=0\nax.axvline(x=0, color='k', linestyle='-')\n\n# Add a horizontal line at y=0\nax.axhline(y=0, color='k', linestyle='-')\n\n# Add a rectangle representing the rocket\nrect = plt.Rectangle((-30, -0.5), 60, 7.5, fill=False, edgecolor='r')\nax.add_patch(rect)\n\n# Add a rectangle representing the rocket's engine\nrect = plt.Rectangle((-20, -0.5), 40, 7.5, fill=False, edgecolor='b')\nax.add_patch(rect)\n\n# Add a rectangle representing the rocket's fuel tank\nrect = plt.Rectangle((-10, -0.5), 20, 7.5, fill=False, edgecolor='g')\nax.add_patch(rect)\n\n# Add a rectangle representing the rocket's control surfaces\nrect = plt.Rectangle((0, -0.5), 10, 7.5, fill=False, edgecolor='y')\nax.add_patch(rect)\n\n# Add a rectangle representing the rocket's payload\nrect = plt.Rectangle((10, -0.5), 10, 7.5, fill=False, edgecolor='c')\nax.add_patch(rect)\n\n# Add a rectangle representing the rocket's guidance system\nrect = plt.Rectangle((20, -0.5), 10, 7.5, fill=False, edgecolor='m')\nax.add_patch(rect)\n\n# Add a rectangle representing the rocket's propulsion system\nrect = plt.Rectangle((30, -0.5), 10, 7.5, fill=False, edgecolor='k')\nax.add_patch(rect)\n\n# Add a rectangle representing the rocket's navigation system\nrect = plt.Rectangle((40, -0.5), 10, 7.5, fill=False, edgecolor='w')\nax.add_patch(rect)\n\n# Add a rectangle representing the rocket's communication system\nrect = plt.Rectangle((50, -0.5), 10, 7.5, fill=False, edgecolor='k')\nax.add_patch(rect)\n\n# Add a rectangle representing the rocket's power supply\nrect = plt.Rectangle((60, -0.5), 10, 7.5, fill=False, edgecolor='k')\nax.add_patch(rect)\n\n# Add a rectangle representing the rocket's thermal protection system\nrect = plt.Rectangle((70, -0.5), 10, 7.5, fill=False, edgecolor='k')\nax.add_patch(rect)\n\n# Add a rectangle representing the rocket's aerodynamic design\nrect = plt.Rectangle((80, -0.5), 10, 7.5, fill=False, edgecolor='k')\nax.add_patch(rect)\n\n# Add a rectangle representing the rocket's propulsion system\nrect = plt.Rectangle((90, -0.5), 10, 7.5, fill=False, edgecolor='k')\nax.add_patch(rect)\n\n# Add a rectangle representing the rocket's navigation system\nrect = plt.Rectangle((100, -0.5), 10, 7.5, fill=False, edgecolor='k')\nax.add_patch(rect)\n\n# Add a rectangle representing the rocket's communication system\nrect = plt.Rectangle((110, -0.5), 10, 7.5, fill=False, edgecolor='k')\nax.add_patch(rect)\n\n# Add a rectangle representing the rocket's power supply\nrect = plt.Rectangle((120, -0.5), 10, 7.5, fill=False, edgecolor='k')\nax.add_patch(rect)\n\n# Add a rectangle representing the rocket's thermal protection system\nrect = plt.Rectangle((130, -0.5), 10, 7.5, fill=False, edgecolor='k')\nax.add_patch(rect)\n\n# Add a rectangle representing the rocket's aerodynamic design\nrect = plt.Rectangle((140, -0.5), 10, 7.5, fill=False, edgecolor='k')\nax.add_patch(rect)\n\n# Add a rectangle representing the rocket's propulsion system\nrect = plt.Rectangle((150, -0.5), 10, 7.5, fill=False, edgecolor='k')\nax.add_patch(rect)\n\n# Add a rectangle representing the rocket's navigation system\nrect = plt.Rectangle((160, -0.5), 10, 7.5, fill=False, edgecolor='k')\nax.add_patch(rect)\n\n# Add a rectangle representing the rocket's communication system\nrect = plt.Rectangle((170, -0.5), 10, 7.5, fill=False, edgecolor='k')\nax.add_patch(rect)\n\n# Add a rectangle representing the rocket's power supply\nrect = plt.Rectangle((180, -0.5), 10, 7.5, fill=False, edgecolor='k')\nax.add_patch(rect)\n\n# Add a rectangle representing the rocket's thermal protection system\nrect = plt.Rectangle((190, -0.5), 10, 7.5, fill=False, edgecolor='k')\nax.add_patch(rect)\n\n# Add a rectangle representing the rocket's aerodynamic design\nrect = plt.Rectangle((200, -0.5), 10, 7.5, fill=False, edgecolor='k')\nax.add_patch(rect)\n\n# Add a rectangle representing the rocket's propulsion system\nrect = plt.Rectangle((210, -0.5), 10, 7.5, fill=False, edgecolor='k')\nax.add_patch(rect)\n\n# Add a rectangle representing the rocket's navigation system\nrect = plt.Rectangle((220, -0.5), 10, 7.5, fill=False, edgecolor='k')\nax.add_patch(rect)\n\n# Add a rectangle representing the rocket's communication system\nrect = plt.Rectangle((230, -0.5), 10, 7.5, fill=False, edgecolor='k')\nax.add_patch(rect)\n\n# Add a rectangle representing the rocket's power supply\nrect = plt.Rectangle((240, -0.5), 10, 7.5, fill=False, edgecolor='k')\nax.add_patch(rect)\n\n# Add a rectangle representing the rocket's thermal protection system\nrect = plt.Rectangle((250, -0.5), 10, 7.5, fill=False, edgecolor='k')\nax.add_patch(rect)\n\n# Add a rectangle representing the rocket's aerodynamic design\nrect = plt.Rectangle((260, -0.5), 10, 7.5, fill=False, edgecolor='k')\nax.add_patch(rect)\n\n# Add a rectangle representing the rocket's propulsion system\nrect = plt.Rectangle((270, -0.5), 10, 7.5, fill=False, edgecolor='k')\nax.add_patch(rect)\n\n# Add a rectangle representing the rocket's navigation system\nrect = plt.Rectangle((280, -0.5), 10, 7.5, fill=False, edgecolor='k')\nax.add_patch(rect)\n\n# Add a rectangle representing the rocket's communication system\nrect = plt.Rectangle((290, -0.5), 10, 7.5, fill=False, edgecolor='k')\nax.add_patch(rect)\n\n# Add a rectangle representing the rocket's power supply\nrect = plt.Rectangle((300, -0.5), 10, 7.5, fill=False, edgecolor='k')\nax.add_patch(rect)\n\n# Add a rectangle representing the rocket's thermal protection system\nrect = plt.Rectangle((310, -0.5), 10, 7.5, fill=False, edgecolor='k')\nax.add_patch(rect)\n\n# Add a rectangle representing the rocket's aerodynamic design\nrect = plt.Rectangle((320, -0.5), 10, 7.5, fill=False, edgecolor='k')\nax.add_patch(rect)\n\n# Add a rectangle representing the rocket's propulsion system\nrect = plt.Rectangle((330, -0.5), 10, 7.5, fill=False, edgecolor='k')\nax.add_patch(rect)\n\n# Add a rectangle representing the rocket's navigation system\nrect = plt.Rectangle((340, -0.5), 10, 7.5, fill=False, edgecolor='k')\nax.add_patch(rect)\n\n# Add a rectangle representing the rocket's communication system\nrect = plt.Rectangle((350, -0.5), 10, 7.5, fill=False, edgecolor='k')\nax.add_patch(rect)\n\n# Add a rectangle representing the rocket's power supply\nrect = plt.Rectangle((360, -0.5), 10, 7.5, fill=False, edgecolor='k')\nax.add_patch(rect)\n\n# Add a rectangle representing the rocket's thermal protection system\nrect = plt.Rectangle((370, -0.5), 10, 7.5, fill=False, edgecolor='k')\nax.add_patch(rect)\n\n# Add a rectangle representing the rocket's aerodynamic design\nrect = plt.Rectangle((380, -0.5), 10, 7.5, fill=False, edgecolor='k')\nax.add_patch(rect)\n\n# Add a rectangle representing the rocket's propulsion system\nrect = plt.Rectangle((390, -0.5), 10, 7.5, fill=False, edgecolor='k')\nax.add_patch(rect)\n\n# Add a rectangle representing the rocket's navigation system\nrect = plt.Rectangle((400, -0.5), 10, 7.5, fill=False, edgecolor='k')\nax.add_patch(rect)\n\n# Add a rectangle representing the rocket's communication system\nrect = plt.Rectangle((410, -0.5), 10, 7.5, fill=False, edgecolor='k')\nax.add_patch(rect)\n\n# Add a rectangle representing the rocket's power supply\nrect = plt.Rectangle((420, -0.5), 10, 7.5, fill=False, edgecolor='k')\nax.add_patch(rect)\n\n# Add a rectangle representing the rocket's thermal protection system\nrect = plt.Rectangle((430, -0.5), 10, 7.5, fill=False, edgecolor='k')\nax.add_patch(rect)\n\n# Add a rectangle representing the rocket's aerodynamic design\nrect = plt.Rectangle((440, -0.5), 10, 7.5, fill=False, edgecolor='k')\nax.add_patch(rect)\n\n# Add a rectangle representing the rocket's propulsion system\nrect = plt.Rectangle((450, -0.5), 10, 7.5, fill=False, edgecolor='k')\nax.add_patch(rect)\n\n# Add a rectangle representing the rocket's navigation system\nrect = plt.Rectangle((460, -0.5), 10, 7.5, fill=False, edgecolor='k')\nax.add_patch(rect)\n\n# Add a rectangle representing the rocket's communication system\nrect = plt.Rectangle((470, -0.5), 10, 7.5, fill=False, edgecolor='k')\nax.add_patch(rect)\n\n# Add a rectangle representing the rocket's power supply\nrect = plt.Rectangle((480, -0.5), 10, 7.5, fill=False, edgecolor='k')\nax.add_patch(rect)\n\n# Add a rectangle representing the rocket's thermal protection system\nrect = plt.Rectangle((490, -0.5), 10, 7.5, fill=False, edgecolor='k')\nax.add_patch(rect)\n\n# Add a rectangle representing the rocket's aerodynamic design\nrect = plt.Rectangle((500, -0.5), 10, 7.5, fill=False, edgecolor='k')\nax.add_patch(rect)\n\n# Add a rectangle representing the rocket's propulsion system\nrect = plt.Rectangle((510, -0.5), 10, 7.5, fill=False, edgecolor='k')\nax.add_patch(rect)\n\n# Add a rectangle representing the rocket's navigation system\nrect = plt.Rectangle((520, -0.5), 10, 7.5, fill=False, edgecolor='k')\nax.add_patch(rect)\n\n# Add a rectangle representing the rocket's communication system\nrect = plt.Rectangle((530, -0.5), 10, 7.5, fill=False, edgecolor='k')\nax.add_patch(rect)\n\n# Add a rectangle representing the rocket's power supply\nrect = plt.Rectangle((540, -0.5), 10, 7.5, fill=False, edgecolor='k')\nax.add_patch(rect)\n\n# Add a rectangle representing the rocket's thermal protection system\nrect = plt.Rectangle((550, -0.5), 10, 7.5, fill=False, edgecolor='k')\nax.add_patch(rect)\n\n# Add a rectangle representing the rocket's aerodynamic design\nrect = plt.Rectangle((560, -0.5), 10, 7.5, fill=False, edgecolor='k')\nax.add_patch(rect)\n\n# Add a rectangle representing the rocket's propulsion system\nrect = plt.Rectangle((570, -0.5), 10, 7.5, fill=False, edgecolor='k')\nax.add_patch(rect)\n\n# Add a rectangle representing the rocket's navigation system\nrect = plt.Rectangle((580, -0.5), 10, 7.5, fill=False, edgecolor='k')\nax.add_patch(rect)\n\n# Add a rectangle representing the rocket's communication system\nrect = plt.Rectangle((590, -0.5), 10, 7.5, fill=False, edgecolor='k')\nax.add_patch(rect)\n\n# Add a rectangle representing the rocket's power supply\nrect = plt.Rectangle((600, -0.5), 10, 7.5, fill=False, edgecolor='k')\nax.add_patch(rect)\n\n# Add a rectangle representing the rocket's thermal protection system\nrect = plt.Rectangle((610, -0.5), 10, 7.5, fill=False, edgecolor='k')\nax.add_patch(rect)\n\n# Add a rectangle representing the rocket's aerodynamic design\nrect = plt.Rectangle((620, -0.5), 10, 7.5, fill=False, edgecolor='k')\nax.add_patch(rect)\n\n# Add a rectangle representing the rocket's propulsion system\nrect = plt.Rectangle((630, -0.5), 10, 7.5, fill=False, edgecolor='k')\nax.add_patch(rect)\n\n# Add a rectangle representing the rocket's navigation system\nrect = plt.Rectangle((640, -0.5), 10, 7.5, fill=False, edgecolor='k')\nax.add_patch(rect)\n\n# Add a rectangle representing the rocket's communication system\nrect = plt.Rectangle((650, -0.5), 10, 7.5, fill=False, edgecolor='k')\nax.add_patch(rect)\n\n# Add a rectangle representing the rocket's power supply\nrect = plt.Rectangle((660, -0.5), 10, 7.5, fill=False, edgecolor='k')\nax.add_patch(rect)\n\n# Add a rectangle representing the rocket's thermal protection system\nrect = plt.Rectangle((670, -0.5), 10, 7.5, fill=False, edgecolor='k')\nax.add_patch(rect)\n\n# Add a rectangle representing the rocket's aerodynamic design\nrect = plt.Rectangle((680, -0.5), 10, 7.5, fill=False, edgecolor='k')\nax.add_patch(rect)\n\n# Add a rectangle representing the rocket's propulsion system\nrect = plt.Rectangle((690, -0.5), 10, 7.5, fill=False, edgecolor='k')\nax.add_patch(rect)\n\n# Add a rectangle representing the rocket's navigation system\nrect = plt.Rectangle((700, -0.5), 10, 7.5, fill=False, edgecolor='k')\nax.add_patch(rect)\n\n# Add a rectangle representing the rocket's communication system\nrect = plt.Rectangle((710, -0.5), 10, 7.5, fill=False, edgecolor='k')\nax.add_patch(rect)\n\n# Add a rectangle representing the rocket's power supply\nrect = plt.Rectangle((720, -0.5), 10, 7.5, fill=False, edgecolor='k')\nax.add_patch(rect)\n\n# Add a rectangle representing the rocket's thermal protection system\nrect = plt.Rectangle((730, -0.5), 10, 7.5, fill=False, edgecolor='k')\nax.add_patch(rect)\n\n# Add a rectangle representing the rocket's aerodynamic design\nrect = plt.Rectangle((740, -0.5), 10, 7.5, fill=False, edgecolor='k')\nax.add_patch(rect)\n\n# Add a rectangle representing the rocket's propulsion system\nrect = plt.Rectangle((750, -0.5), 10, 7.5, fill=False, edgecolor='k')\nax.add_patch(rect)\n\n# Add a rectangle representing the rocket's navigation system\nrect = plt.Rectangle((760, -0.5), 10, 7.5, fill=False, edgecolor='k')\nax.add_patch(rect)\n\n# Add a rectangle representing the rocket's communication system\nrect = plt.Rectangle((770, -0.5), 10, 7.5, fill=False, edgecolor='k')\nax.add_patch(rect)\n\n# Add a rectangle representing the rocket's power supply\nrect = plt.Rectangle((780, -0.5), 10, 7.5, fill=False, edgecolor='k')\nax.add_patch(rect)\n\n# Add a rectangle representing the rocket's"}
{"file": "dataset/ori_500/box_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the graph\nax.set_title('Stock Market Performance')\n\n# Set the x-axis label\nax.set_xlabel('Time')\n\n# Set the y-axis label\nax.set_ylabel('Performance (%)')\n\n# Set the x-ticks\nax.set_xticks([1, 2, 3, 4, 5])\n\n# Set the x-tick labels\nax.set_xticklabels(['ST_CVRP', 'ST_VRPTW', 'ST_All', 'Ours'])\n\n# Set the y-ticks\nax.set_yticks([0, 10, 20, 30, 40, 50, 60, 70])\n\n# Set the y-tick labels\nax.set_yticklabels(['0%', '10%', '20%', '30%', '40%', '50%', '60%', '70%'])\n\n# Draw a rectangle for each stock\nrect1 = plt.Rectangle((1, 20), 1, 30, color='blue')\nrect2 = plt.Rectangle((2, 30), 1, 20, color='purple')\nrect3 = plt.Rectangle((3, 40), 1, 10, color='orange')\nrect4 = plt.Rectangle((4, 50), 1, 10, color='red')\nrect5 = plt.Rectangle((5, 60), 1, 10, color='green')\n\n# Add rectangles to the plot\nax.add_patch(rect1)\nax.add_patch(rect2)\nax.add_patch(rect3)\nax.add_patch(rect4)\nax.add_patch(rect5)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(12.0, 3.0))\n\n# Set the title of the plot\nax.set_title('Human Normalized Score')\n\n# Create a scatter plot\nx = np.random.rand(50)\ny = np.random.rand(50)\nax.scatter(x, y)\n\n# Set the x and y labels\nax.set_xlabel('Human Normalized Score')\nax.set_ylabel('Machine Learning Score')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Thrust Angle vs Angular Frequency')\n\n# Set the x-axis label\nax.set_xlabel('Angular Frequency [rad/s]')\n\n# Set the y-axis label\nax.set_ylabel('Thrust Angle [\u00b0]')\n\n# Set the x-axis limits\nax.set_xlim(2.0, 5.0)\n\n# Set the y-axis limits\nax.set_ylim(-60, 60)\n\n# Set the x-axis ticks\nax.set_xticks(np.arange(2.0, 5.1, 0.5))\n\n# Set the y-axis ticks\nax.set_yticks(np.arange(-60, 61, 10))\n\n# Set the grid lines\nax.grid(True)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='minor', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='minor', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', length=5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', direction='in')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', pad=5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', rotation=0)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', zorder=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', bottom=True)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', top=False)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', left=True)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', right=False)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', labelleft=True)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelright=False)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', labelbottom=True)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labeltop=False)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', length=5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', direction='in')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', pad=5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', rotation=0)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', zorder=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', bottom=True)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', top=False)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', left=True)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', right=False)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', labelleft=True)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', labelright=False)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', labelbottom=True)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', labeltop=False)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', length=5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', direction='in')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', pad=5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', rotation=0)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', zorder=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', bottom=True)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', top=False)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', left=True)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', right=False)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', labelleft=True)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', labelright=False)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', labelbottom=True)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', labeltop=False)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', length=5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', direction='in')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', pad=5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', rotation=0)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', zorder=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', bottom=True)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', top=False)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', left=True)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', right=False)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', labelleft=True)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', labelright=False)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', labelbottom=True)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', labeltop=False)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', length=5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', direction='in')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', pad=5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', rotation=0)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', zorder=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', bottom=True)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', top=False)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', left=True)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', right=False)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', labelleft=True)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', labelright=False)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', labelbottom=True)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', labeltop=False)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', length=5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', direction='in')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', pad=5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', rotation=0)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', zorder=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', bottom=True)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', top=False)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', left=True)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', right=False)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', labelleft=True)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', labelright=False)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', labelbottom=True)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', labeltop=False)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', length=5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', direction='in')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', pad=5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', rotation=0)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', zorder=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', bottom=True)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', top=False)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', left=True)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', right=False)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', labelleft=True)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', labelright=False)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', labelbottom=True)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', labeltop=False)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', length=5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', direction='in')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', pad=5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', rotation=0)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', zorder=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', bottom=True)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', top=False)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', left=True)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', right=False)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', labelleft=True)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', labelright=False)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', labelbottom=True)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', labeltop=False)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', length=5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', direction='in')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', pad=5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', rotation=0)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', zorder=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', bottom=True)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', top=False)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', left=True)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', right=False)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', labelleft=True)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', labelright=False)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', labelbottom=True)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', labeltop=False)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', length=5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', direction='in')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', pad=5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', rotation=0)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', zorder=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', bottom=True)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', top=False)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', left=True)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', right=False)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', labelleft=True)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', labelright=False)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', labelbottom=True)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', labeltop=False)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', length=5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', direction='in')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', pad=5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', rotation=0)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', zorder=10)\n\n# Set the color of the tick marks"}
{"file": "dataset/ori_500/box_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the background color of the plot\nax.set_facecolor('lightgrey')\n\n# Set the title of the plot\nax.set_title('Stock Market Analysis')\n\n# Set the x-axis label\nax.set_xlabel('Candlestick (db)')\n\n# Set the y-axis label\nax.set_ylabel('Stock Price (USD)')\n\n# Set the x-axis limits\nax.set_xlim(-10, 10)\n\n# Set the y-axis limits\nax.set_ylim(0, 12)\n\n# Set the x-axis ticks\nax.set_xticks(np.arange(-10, 11, 2))\n\n# Set the y-axis ticks\nax.set_yticks(np.arange(0, 13, 2))\n\n# Set the x-axis grid\nax.grid(True)\n\n# Set the y-axis grid\nax.grid(True)\n\n# Set the x-axis tick labels\nax.set_xticklabels(['-10dB', '-8dB', '-6dB', '-4dB', '-2dB', '0dB', '2dB', '4dB', '6dB', '8dB', '10dB'])\n\n# Set the y-axis tick labels\nax.set_yticklabels(['$0', '$2', '$4', '$6', '$8', '$10', '$12'])\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', colors='red')\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', colors='blue')\n\n# Set the x-axis label color\nax.xaxis.label.set_color('green')\n\n# Set the y-axis label color\nax.yaxis.label.set_color('purple')\n\n# Set the x-axis title color\nax.title.set_color('orange')\n\n# Set the y-axis title color\nax.title.set_color('pink')\n\n# Set the x-axis grid color\nax.grid(color='black')\n\n# Set the y-axis grid color\nax.grid(color='black')\n\n# Set the x-axis tick label color\nax.tick_params(axis='x', colors='red')\n\n# Set the y-axis tick label color\nax.tick_params(axis='y', colors='blue')\n\n# Set the x-axis label color\nax.xaxis.label.set_color('green')\n\n# Set the y-axis label color\nax.yaxis.label.set_color('purple')\n\n# Set the x-axis title color\nax.title.set_color('orange')\n\n# Set the y-axis title color\nax.title.set_color('pink')\n\n# Set the x-axis grid color\nax.grid(color='black')\n\n# Set the y-axis grid color\nax.grid(color='black')\n\n# Set the x-axis tick label color\nax.tick_params(axis='x', colors='red')\n\n# Set the y-axis tick label color\nax.tick_params(axis='y', colors='blue')\n\n# Set the x-axis label color\nax.xaxis.label.set_color('green')\n\n# Set the y-axis label color\nax.yaxis.label.set_color('purple')\n\n# Set the x-axis title color\nax.title.set_color('orange')\n\n# Set the y-axis title color\nax.title.set_color('pink')\n\n# Set the x-axis grid color\nax.grid(color='black')\n\n# Set the y-axis grid color\nax.grid(color='black')\n\n# Set the x-axis tick label color\nax.tick_params(axis='x', colors='red')\n\n# Set the y-axis tick label color\nax.tick_params(axis='y', colors='blue')\n\n# Set the x-axis label color\nax.xaxis.label.set_color('green')\n\n# Set the y-axis label color\nax.yaxis.label.set_color('purple')\n\n# Set the x-axis title color\nax.title.set_color('orange')\n\n# Set the y-axis title color\nax.title.set_color('pink')\n\n# Set the x-axis grid color\nax.grid(color='black')\n\n# Set the y-axis grid color\nax.grid(color='black')\n\n# Set the x-axis tick label color\nax.tick_params(axis='x', colors='red')\n\n# Set the y-axis tick label color\nax.tick_params(axis='y', colors='blue')\n\n# Set the x-axis label color\nax.xaxis.label.set_color('green')\n\n# Set the y-axis label color\nax.yaxis.label.set_color('purple')\n\n# Set the x-axis title color\nax.title.set_color('orange')\n\n# Set the y-axis title color\nax.title.set_color('pink')\n\n# Set the x-axis grid color\nax.grid(color='black')\n\n# Set the y-axis grid color\nax.grid(color='black')\n\n# Set the x-axis tick label color\nax.tick_params(axis='x', colors='red')\n\n# Set the y-axis tick label color\nax.tick_params(axis='y', colors='blue')\n\n# Set the x-axis label color\nax.xaxis.label.set_color('green')\n\n# Set the y-axis label color\nax.yaxis.label.set_color('purple')\n\n# Set the x-axis title color\nax.title.set_color('orange')\n\n# Set the y-axis title color\nax.title.set_color('pink')\n\n# Set the x-axis grid color\nax.grid(color='black')\n\n# Set the y-axis grid color\nax.grid(color='black')\n\n# Set the x-axis tick label color\nax.tick_params(axis='x', colors='red')\n\n# Set the y-axis tick label color\nax.tick_params(axis='y', colors='blue')\n\n# Set the x-axis label color\nax.xaxis.label.set_color('green')\n\n# Set the y-axis label color\nax.yaxis.label.set_color('purple')\n\n# Set the x-axis title color\nax.title.set_color('orange')\n\n# Set the y-axis title color\nax.title.set_color('pink')\n\n# Set the x-axis grid color\nax.grid(color='black')\n\n# Set the y-axis grid color\nax.grid(color='black')\n\n# Set the x-axis tick label color\nax.tick_params(axis='x', colors='red')\n\n# Set the y-axis tick label color\nax.tick_params(axis='y', colors='blue')\n\n# Set the x-axis label color\nax.xaxis.label.set_color('green')\n\n# Set the y-axis label color\nax.yaxis.label.set_color('purple')\n\n# Set the x-axis title color\nax.title.set_color('orange')\n\n# Set the y-axis title color\nax.title.set_color('pink')\n\n# Set the x-axis grid color\nax.grid(color='black')\n\n# Set the y-axis grid color\nax.grid(color='black')\n\n# Set the x-axis tick label color\nax.tick_params(axis='x', colors='red')\n\n# Set the y-axis tick label color\nax.tick_params(axis='y', colors='blue')\n\n# Set the x-axis label color\nax.xaxis.label.set_color('green')\n\n# Set the y-axis label color\nax.yaxis.label.set_color('purple')\n\n# Set the x-axis title color\nax.title.set_color('orange')\n\n# Set the y-axis title color\nax.title.set_color('pink')\n\n# Set the x-axis grid color\nax.grid(color='black')\n\n# Set the y-axis grid color\nax.grid(color='black')\n\n# Set the x-axis tick label color\nax.tick_params(axis='x', colors='red')\n\n# Set the y-axis tick label color\nax.tick_params(axis='y', colors='blue')\n\n# Set the x-axis label color\nax.xaxis.label.set_color('green')\n\n# Set the y-axis label color\nax.yaxis.label.set_color('purple')\n\n# Set the x-axis title color\nax.title.set_color('orange')\n\n# Set the y-axis title color\nax.title.set_color('pink')\n\n# Set the x-axis grid color\nax.grid(color='black')\n\n# Set the y-axis grid color\nax.grid(color='black')\n\n# Set the x-axis tick label color\nax.tick_params(axis='x', colors='red')\n\n# Set the y-axis tick label color\nax.tick_params(axis='y', colors='blue')\n\n# Set the x-axis label color\nax.xaxis.label.set_color('green')\n\n# Set the y-axis label color\nax.yaxis.label.set_color('purple')\n\n# Set the x-axis title color\nax.title.set_color('orange')\n\n# Set the y-axis title color\nax.title.set_color('pink')\n\n# Set the x-axis grid color\nax.grid(color='black')\n\n# Set the y-axis grid color\nax.grid(color='black')\n\n# Set the x-axis tick label color\nax.tick_params(axis='x', colors='red')\n\n# Set the y-axis tick label color\nax.tick_params(axis='y', colors='blue')\n\n# Set the x-axis label color\nax.xaxis.label.set_color('green')\n\n# Set the y-axis label color\nax.yaxis.label.set_color('purple')\n\n# Set the x-axis title color\nax.title.set_color('orange')\n\n# Set the y-axis title color\nax.title.set_color('pink')\n\n# Set the x-axis grid color\nax.grid(color='black')\n\n# Set the y-axis grid color\nax.grid(color='black')\n\n# Set the x-axis tick label color\nax.tick_params(axis='x', colors='red')\n\n# Set the y-axis tick label color\nax.tick_params(axis='y', colors='blue')\n\n# Set the x-axis label color\nax.xaxis.label.set_color('green')\n\n# Set the y-axis label color\nax.yaxis.label.set_color('purple')\n\n# Set the x-axis title color\nax.title.set_color('orange')\n\n# Set the y-axis title color\nax.title.set_color('pink')\n\n# Set the x-axis grid color\nax.grid(color='black')\n\n# Set the y-axis grid color\nax.grid(color='black')\n\n# Set the x-axis tick label color\nax.tick_params(axis='x', colors='red')\n\n# Set the y-axis tick label color\nax.tick_params(axis='y', colors='blue')\n\n# Set the x-axis label color\nax.xaxis.label.set_color('green')\n\n# Set the y-axis label color\nax.yaxis.label.set_color('purple')\n\n# Set the x-axis title color\nax.title.set_color('orange')\n\n# Set the y-axis title color\nax.title.set_color('pink')\n\n# Set the x-axis grid color\nax.grid(color='black')\n\n# Set the y-axis grid color\nax.grid(color='black')\n\n# Set the x-axis tick label color\nax.tick_params(axis='x', colors='red')\n\n# Set the y-axis tick label color\nax.tick_params(axis='y', colors='blue')\n\n# Set the x-axis label color\nax.xaxis.label.set_color('green')\n\n# Set the y-axis label color\nax.yaxis.label.set_color('purple')\n\n# Set the x-axis title color\nax.title.set_color('orange')\n\n# Set the y-axis title color\nax.title.set_color('pink')\n\n# Set the x-axis grid color\nax.grid(color='black')\n\n# Set the y-axis grid color\nax.grid(color='black')\n\n# Set the x-axis tick label color\nax.tick_params(axis='x', colors='red')\n\n# Set the y-axis tick label color\nax.tick_params(axis='y', colors='blue')\n\n# Set the x-axis label color\nax.xaxis.label.set_color('green')\n\n# Set the y-axis label color\nax.yaxis.label.set_color('purple')\n\n# Set the x-axis title color\nax.title.set_color('orange')\n\n# Set the y-axis title color\nax.title.set_color('pink')\n\n# Set the x-axis grid color\nax.grid(color='black')\n\n# Set the y-axis grid color\nax.grid(color='black')\n\n# Set the x-axis tick label color\nax.tick_params(axis='x', colors='red')\n\n# Set the y-axis tick label color\nax.tick_params(axis='y', colors='blue')\n\n# Set the x-axis label color\nax.xaxis.label.set_color('green')\n\n# Set the y-axis label color\nax.yaxis.label.set_color('purple')\n\n# Set the x-axis title color\nax.title.set_color('orange')\n\n# Set the y-axis title color\nax.title.set_color('pink')\n\n# Set the x-axis grid color\nax.grid(color='black')\n\n# Set the y-axis grid color\nax.grid(color='black')\n\n# Set the x-axis tick label color\nax.tick_params(axis='x', colors='red')\n\n# Set the y-axis tick label color\nax.tick_params(axis='y', colors='blue')\n\n# Set the x-axis label color\nax.xaxis.label.set_color('green')\n\n# Set the y-axis label color\nax.yaxis.label.set_color('purple')\n\n# Set the x-axis title color\nax.title.set_color('orange')\n\n# Set the y-axis title color\nax.title.set_color('pink')\n\n# Set the x-axis grid color\nax.grid(color='black')\n\n# Set the y-axis grid color\nax.grid(color='black')\n\n# Set the x-axis tick label color\nax.tick_params(axis='x', colors='red')\n\n# Set the y-axis tick label color\nax.tick_params(axis='y', colors='blue')\n\n# Set the x-axis label color\nax.xaxis.label.set_color('green')\n\n# Set the y-axis label color\nax.yaxis.label.set_color('purple')\n\n# Set the x-axis title color\nax.title.set_color('orange')\n\n# Set the y-axis title color\nax.title.set_color('pink')\n\n# Set the x-axis grid color\nax.grid(color='black')\n\n# Set the y-axis grid color\nax.grid(color='black')\n\n# Set the x-axis tick label color\nax.tick_params(axis='x', colors='red')\n\n# Set the y-axis tick label color\nax.tick_params(axis='y', colors='blue')\n\n# Set the x-axis label color\nax.xaxis.label.set_color('green')\n\n# Set the y-axis label color\nax.yaxis.label.set_color('purple')\n\n# Set the x-axis title color\nax.title.set_color('orange')\n\n# Set the y-axis title color\nax.title.set_color('pink')\n\n# Set the x-axis grid color\nax.grid(color='black')\n\n# Set the y-axis grid color\nax.grid(color='black')\n\n# Set the x-axis tick label color\nax.tick_params(axis='x', colors='red')\n\n# Set the y-axis tick label color\nax.tick_params(axis='y', colors='blue')\n\n# Set the x-axis label color\nax.xaxis.label.set_color('green')\n\n# Set the y-axis label color\nax.yaxis.label.set_color('purple')\n\n# Set the x-axis title color\nax.title.set_color('orange')\n\n# Set the y-axis title color\nax.title.set_color('pink')\n\n# Set the x-axis grid color\nax.grid(color='black')\n\n# Set the y-axis grid color\nax.grid(color='black')\n\n# Set the x-axis tick label color\nax.tick_params(axis='x', colors='red')\n\n# Set the y-axis tick label color\nax.tick_params(axis='y', colors='blue')\n\n# Set the x-axis label color\nax.xaxis.label.set_color('green')\n\n# Set the y-axis label color\nax.yaxis.label.set_color('purple')\n\n# Set the x-axis title color\nax.title.set_color('orange')\n\n# Set the y-axis title color\nax.title.set_color('pink')\n\n# Set the x-axis grid color\nax.grid(color='black')\n\n# Set the y-axis grid color\nax.grid(color='black')\n\n# Set the x-axis tick label color\nax.tick_params(axis='x', colors='red')\n\n# Set the y-axis tick label color\nax.tick_params(axis='y', colors='blue')\n\n# Set the x-axis label color\nax.xaxis.label.set_color('green')\n\n# Set the y-axis label color\nax.yaxis.label.set_color('purple')\n\n# Set the x-axis title color\nax.title.set_color('orange')\n\n# Set the y-axis title color\nax.title.set_color('pink')\n\n# Set the x-axis grid color\nax.grid(color='black')\n\n# Set the y-axis grid color\nax.grid(color='black')\n\n# Set the x-axis tick label color\nax.tick_params(axis='x', colors='red')\n\n# Set the y-axis tick label color\nax.tick_params(axis='y', colors='blue')\n\n# Set the x-axis label color\nax.xaxis.label.set_color('green')\n\n# Set the y-axis label color\nax.yaxis.label.set_color('purple')\n\n# Set the x-axis title color\nax.title.set_color('orange')\n\n# Set the y-axis title color\nax.title.set_color('pink')\n\n# Set the x-axis grid color\nax.grid(color='black')\n\n# Set the y-axis grid color\nax.grid(color='black')\n\n# Set the x-axis tick label color\nax.tick_params(axis='x', colors='red')\n\n# Set the y-axis tick label color\nax.tick_params(axis='y', colors='blue')\n\n# Set the x-axis label color\nax.xaxis.label.set_color('green')\n\n# Set the y-axis label color\nax.yaxis.label.set_color('purple')\n\n# Set the x-axis title color\nax.title.set_color('orange')\n\n# Set the y-axis title color\nax.title.set_color('pink')\n\n# Set the x-axis grid color\nax.grid(color='black')\n\n# Set the y-axis grid color\nax.grid(color='black')\n\n# Set the x-axis tick label color\nax.tick_params(axis='x', colors='red')\n\n# Set the y-axis tick label color\nax.tick_params(axis='y', colors='blue')\n\n# Set the x-axis label color\nax.xaxis.label.set_color('green')\n\n# Set the y-axis label color\nax.yaxis.label.set_color('purple')\n\n# Set the x-axis title color\nax.title.set_color('orange')\n\n# Set the y-axis title color\nax.title.set_color('pink')\n\n# Set the x-axis grid color\nax.grid(color='black')\n\n# Set the y-axis grid color\nax.grid(color='black')\n\n# Set the x-axis tick label color\nax.tick_params(axis='x', colors='red')\n\n# Set the y-axis tick label color\nax.tick_params(axis='y', colors='blue')\n\n# Set the x-axis label color\nax.xaxis.label.set_color('green')\n\n# Set the y-axis label color\nax.yaxis.label.set_color('purple')\n\n# Set the x-axis title color\nax.title.set_color('orange')\n\n# Set the y-axis title color\nax.title.set_color('pink')\n\n# Set the x-axis grid color\nax.grid(color='black')\n\n# Set the y-axis grid color\nax.grid(color='black')\n\n# Set the x-axis tick label color\nax.tick_params(axis='x', colors='red')\n\n# Set the y-axis tick label color\nax.tick_params(axis='y', colors='blue')\n\n# Set the x-axis label color\nax.xaxis.label.set_color('green')\n\n# Set the y-axis label color\nax.yaxis.label.set_color('purple')\n\n# Set the x-axis title color\nax.title.set_color('orange')\n\n# Set the y-axis title color\nax.title.set_color('pink')\n\n# Set the x-axis grid color\nax.grid(color='black')\n\n# Set the y-axis grid color\nax.grid(color='black')\n\n# Set the x-axis tick label color\nax.tick_params(axis='x', colors='red')\n\n# Set the y-axis tick label color\nax.tick_params(axis='y', colors='blue')\n\n# Set the x-axis label color\nax.xaxis.label.set_color('green')\n\n# Set the y-axis label color\nax.yaxis.label.set_color('purple')\n\n# Set the x-axis title color\nax.title.set_color('orange')\n\n# Set the y-axis title color\nax.title.set_color('pink')\n\n# Set the x-axis grid color\nax.grid(color='black')\n\n# Set the y-axis grid"}
{"file": "dataset/ori_500/box_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and a set of subplots\nfig, axs = plt.subplots(1, 3, figsize=(25, 8))\n\n# Set the title for each subplot\naxs[0].set_title('Linear travel times')\naxs[1].set_title('Exponential travel times')\naxs[2].set_title('Sigmoidal travel times')\n\n# Create a scatter plot for each subplot\nfor i in range(3):\n    axs[i].scatter(np.random.rand(10), np.random.rand(10))\n    axs[i].set_xlim([0, 1])\n    axs[i].set_ylim([0, 1])\n\n# Add a legend to each subplot\nfor i in range(3):\n    axs[i].legend(['Data 1', 'Data 2'])\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Set the title of the plot\nax.set_title('Healthcare Provider Ratings')\n\n# Set the x-axis label\nax.set_xlabel('Healthcare Providers')\n\n# Set the y-axis label\nax.set_ylabel('Ratings')\n\n# Define the data for the plot\nx = ['Hospital 1', 'Hospital 2', 'Hospital 3']\ny = [95, 90, 85]\n\n# Create a bar chart\nax.bar(x, y, color='blue')\n\n# Add a legend\nax.legend(['Hospital 1', 'Hospital 2', 'Hospital 3'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and a set of subplots\nfig, axs = plt.subplots(1, 2, figsize=(10, 5))\n\n# Set the title for each subplot\naxs[0].set_title('0.25 HIAR')\naxs[1].set_title('0.1 HIAR')\n\n# Create a scatter plot for each subplot\naxs[0].scatter([1, 2, 3], [1, 2, 3], color='blue')\naxs[1].scatter([1, 2, 3], [1, 2, 3], color='red')\n\n# Set the limits for the x and y axes\naxs[0].set_xlim(0, 4)\naxs[0].set_ylim(0, 4)\naxs[1].set_xlim(0, 4)\naxs[1].set_ylim(0, 4)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/contour_1.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Set the title of the plot\nax.set_title('T-SNE plot for the output variable Y3')\n\n# Create a scatter plot with random data\nx = np.random.rand(50)\ny = np.random.rand(50)\ncolors = np.random.rand(50)\narea = (30 * np.random.rand(50))**2  # 0 to 15 point radii\nscatter = ax.scatter(x, y, s=area, c=colors, alpha=0.5)\n\n# Add a legend\nlegend_elements = [plt.Line2D([0], [0], marker='o', color='w', label='Ground Truth',\n                          markerfacecolor='blue', markersize=10),\n                  plt.Line2D([0], [0], marker='o', color='w', label='Generated',\n                          markerfacecolor='red', markersize=10)]\nax.legend(handles=legend_elements, loc='upper right')\n\n# Set the limits of the x and y axes\nax.set_xlim(-80, 80)\nax.set_ylim(-80, 80)\n\n# Set the labels of the x and y axes\nax.set_xlabel('X-axis')\nax.set_ylabel('Y-axis')\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/contour_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('\u03bb(x, z)')\n\n# Create a color map for the plot\ncmap = plt.get_cmap('Greens')\n\n# Create a grid of points\nx = np.linspace(0, 10, 100)\ny = np.linspace(0, 10, 100)\nX, Y = np.meshgrid(x, y)\n\n# Calculate the values of \u03bb(x, z)\nZ = np.sin(X) * np.cos(Y)\n\n# Plot the values of \u03bb(x, z)\nCS = ax.contourf(X, Y, Z, cmap=cmap)\n\n# Add a color bar to the plot\ncbar = fig.colorbar(CS)\n\n# Set the limits of the x and y axes\nax.set_xlim([0, 10])\nax.set_ylim([0, 10])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/contour_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Set the background color of the plot\nax.set_facecolor('lightgray')\n\n# Set the x and y limits\nax.set_xlim(50, 160)\nax.set_ylim(50, 100)\n\n# Set the x and y labels\nax.set_xlabel('SBP (mmHg)')\nax.set_ylabel('DBP (mmHg)')\n\n# Set the title of the plot\nax.set_title('Blood Pressure Distribution')\n\n# Create a scatter plot with random data\nx = np.random.normal(loc=120, scale=10, size=100)\ny = np.random.normal(loc=80, scale=10, size=100)\nax.scatter(x, y, c='blue', alpha=0.5)\n\n# Add a legend\nax.legend(['Male'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/contour_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Set the limits of the plot\nax.set_xlim(-10, 10)\nax.set_ylim(-10, 10)\n\n# Draw a circle with radius 10\ncircle = plt.Circle((0, 0), 10, color='blue', fill=False)\nax.add_artist(circle)\n\n# Draw a circle with radius 8\ncircle = plt.Circle((0, 0), 8, color='green', fill=False)\nax.add_artist(circle)\n\n# Draw a circle with radius 6\ncircle = plt.Circle((0, 0), 6, color='cyan', fill=False)\nax.add_artist(circle)\n\n# Draw a circle with radius 4\ncircle = plt.Circle((0, 0), 4, color='magenta', fill=False)\nax.add_artist(circle)\n\n# Draw a circle with radius 2\ncircle = plt.Circle((0, 0), 2, color='yellow', fill=False)\nax.add_artist(circle)\n\n# Draw a circle with radius 0\ncircle = plt.Circle((0, 0), 0, color='red', fill=False)\nax.add_artist(circle)\n\n# Draw a line from -10 to 10\nline = plt.Line2D([-10, 10], [0, 0], color='black')\nax.add_line(line)\n\n# Draw a line from -10 to 10\nline = plt.Line2D([0, 0], [-10, 10], color='black')\nax.add_line(line)\n\n# Draw a line from -10 to 10\nline = plt.Line2D([0, 0], [10, -10], color='black')\nax.add_line(line)\n\n# Draw a line from -10 to 10\nline = plt.Line2D([10, -10], [0, 0], color='black')\nax.add_line(line)\n\n# Draw a line from -10 to 10\nline = plt.Line2D([-10, 10], [-10, 10], color='black')\nax.add_line(line)\n\n# Draw a line from -10 to 10\nline = plt.Line2D([-10, 10], [10, -10], color='black')\nax.add_line(line)\n\n# Draw a line from -10 to 10\nline = plt.Line2D([-10, 10], [0, 0], color='black')\nax.add_line(line)\n\n# Draw a line from -10 to 10\nline = plt.Line2D([0, 0], [-10, 10], color='black')\nax.add_line(line)\n\n# Draw a line from -10 to 10\nline = plt.Line2D([0, 0], [10, -10], color='black')\nax.add_line(line)\n\n# Draw a line from -10 to 10\nline = plt.Line2D([10, -10], [0, 0], color='black')\nax.add_line(line)\n\n# Draw a line from -10 to 10\nline = plt.Line2D([-10, 10], [-10, 10], color='black')\nax.add_line(line)\n\n# Draw a line from -10 to 10\nline = plt.Line2D([-10, 10], [10, -10], color='black')\nax.add_line(line)\n\n# Draw a line from -10 to 10\nline = plt.Line2D([-10, 10], [0, 0], color='black')\nax.add_line(line)\n\n# Draw a line from -10 to 10\nline = plt.Line2D([0, 0], [-10, 10], color='black')\nax.add_line(line)\n\n# Draw a line from -10 to 10\nline = plt.Line2D([0, 0], [10, -10], color='black')\nax.add_line(line)\n\n# Draw a line from -10 to 10\nline = plt.Line2D([10, -10], [0, 0], color='black')\nax.add_line(line)\n\n# Draw a line from -10 to 10\nline = plt.Line2D([-10, 10], [-10, 10], color='black')\nax.add_line(line)\n\n# Draw a line from -10 to 10\nline = plt.Line2D([-10, 10], [10, -10], color='black')\nax.add_line(line)\n\n# Draw a line from -10 to 10\nline = plt.Line2D([-10, 10], [0, 0], color='black')\nax.add_line(line)\n\n# Draw a line from -10 to 10\nline = plt.Line2D([0, 0], [-10, 10], color='black')\nax.add_line(line)\n\n# Draw a line from -10 to 10\nline = plt.Line2D([0, 0], [10, -10], color='black')\nax.add_line(line)\n\n# Draw a line from -10 to 10\nline = plt.Line2D([10, -10], [0, 0], color='black')\nax.add_line(line)\n\n# Draw a line from -10 to 10\nline = plt.Line2D([-10, 10], [-10, 10], color='black')\nax.add_line(line)\n\n# Draw a line from -10 to 10\nline = plt.Line2D([-10, 10], [10, -10], color='black')\nax.add_line(line)\n\n# Draw a line from -10 to 10\nline = plt.Line2D([-10, 10], [0, 0], color='black')\nax.add_line(line)\n\n# Draw a line from -10 to 10\nline = plt.Line2D([0, 0], [-10, 10], color='black')\nax.add_line(line)\n\n# Draw a line from -10 to 10\nline = plt.Line2D([0, 0], [10, -10], color='black')\nax.add_line(line)\n\n# Draw a line from -10 to 10\nline = plt.Line2D([10, -10], [0, 0], color='black')\nax.add_line(line)\n\n# Draw a line from -10 to 10\nline = plt.Line2D([-10, 10], [-10, 10], color='black')\nax.add_line(line)\n\n# Draw a line from -10 to 10\nline = plt.Line2D([-10, 10], [10, -10], color='black')\nax.add_line(line)\n\n# Draw a line from -10 to 10\nline = plt.Line2D([-10, 10], [0, 0], color='black')\nax.add_line(line)\n\n# Draw a line from -10 to 10\nline = plt.Line2D([0, 0], [-10, 10], color='black')\nax.add_line(line)\n\n# Draw a line from -10 to 10\nline = plt.Line2D([0, 0], [10, -10], color='black')\nax.add_line(line)\n\n# Draw a line from -10 to 10\nline = plt.Line2D([10, -10], [0, 0], color='black')\nax.add_line(line)\n\n# Draw a line from -10 to 10\nline = plt.Line2D([-10, 10], [-10, 10], color='black')\nax.add_line(line)\n\n# Draw a line from -10 to 10\nline = plt.Line2D([-10, 10], [10, -10], color='black')\nax.add_line(line)\n\n# Draw a line from -10 to 10\nline = plt.Line2D([-10, 10], [0, 0], color='black')\nax.add_line(line)\n\n# Draw a line from -10 to 10\nline = plt.Line2D([0, 0], [-10, 10], color='black')\nax.add_line(line)\n\n# Draw a line from -10 to 10\nline = plt.Line2D([0, 0], [10, -10], color='black')\nax.add_line(line)\n\n# Draw a line from -10 to 10\nline = plt.Line2D([10, -10], [0, 0], color='black')\nax.add_line(line)\n\n# Draw a line from -10 to 10\nline = plt.Line2D([-10, 10], [-10, 10], color='black')\nax.add_line(line)\n\n# Draw a line from -10 to 10\nline = plt.Line2D([-10, 10], [10, -10], color='black')\nax.add_line(line)\n\n# Draw a line from -10 to 10\nline = plt.Line2D([-10, 10], [0, 0], color='black')\nax.add_line(line)\n\n# Draw a line from -10 to 10\nline = plt.Line2D([0, 0], [-10, 10], color='black')\nax.add_line(line)\n\n# Draw a line from -10 to 10\nline = plt.Line2D([0, 0], [10, -10], color='black')\nax.add_line(line)\n\n# Draw a line from -10 to 10\nline = plt.Line2D([10, -10], [0, 0], color='black')\nax.add_line(line)\n\n# Draw a line from -10 to 10\nline = plt.Line2D([-10, 10], [-10, 10], color='black')\nax.add_line(line)\n\n# Draw a line from -10 to 10\nline = plt.Line2D([-10, 10], [10, -10], color='black')\nax.add_line(line)\n\n# Draw a line from -10 to 10\nline = plt.Line2D([-10, 10], [0, 0], color='black')\nax.add_line(line)\n\n# Draw a line from -10 to 10\nline = plt.Line2D([0, 0], [-10, 10], color='black')\nax.add_line(line)\n\n# Draw a line from -10 to 10\nline = plt.Line2D([0, 0], [10, -10], color='black')\nax.add_line(line)\n\n# Draw a line from -10 to 10\nline = plt.Line2D([10, -10], [0, 0], color='black')\nax.add_line(line)\n\n# Draw a line from -10 to 10\nline = plt.Line2D([-10, 10], [-10, 10], color='black')\nax.add_line(line)\n\n# Draw a line from -10 to 10\nline = plt.Line2D([-10, 10], [10, -10], color='black')\nax.add_line(line)\n\n# Draw a line from -10 to 10\nline = plt.Line2D([-10, 10], [0, 0], color='black')\nax.add_line(line)\n\n# Draw a line from -10 to 10\nline = plt.Line2D([0, 0], [-10, 10], color='black')\nax.add_line(line)\n\n# Draw a line from -10 to 10\nline = plt.Line2D([0, 0], [10, -10], color='black')\nax.add_line(line)\n\n# Draw a line from -10 to 10\nline = plt.Line2D([10, -10], [0, 0], color='black')\nax.add_line(line)\n\n# Draw a line from -10 to 10\nline = plt.Line2D([-10, 10], [-10, 10], color='black')\nax.add_line(line)\n\n# Draw a line from -10 to 10\nline = plt.Line2D([-10, 10], [10, -10], color='black')\nax.add_line(line)\n\n# Draw a line from -10 to 10\nline = plt.Line2D([-10, 10], [0, 0], color='black')\nax.add_line(line)\n\n# Draw a line from -10 to 10\nline = plt.Line2D([0, 0], [-10, 10], color='black')\nax.add_line(line)\n\n# Draw a line from -10 to 10\nline = plt.Line2D([0, 0], [10, -10], color='black')\nax.add_line(line)\n\n# Draw a line from -10 to 10\nline = plt.Line2D([10, -10], [0, 0], color='black')\nax.add_line(line)\n\n# Draw a line from -10 to 10\nline = plt.Line2D([-10, 10], [-10, 10], color='black')\nax.add_line(line)\n\n# Draw a line from -10 to 10\nline = plt.Line2D([-10, 10], [10, -10], color='black')\nax.add_line(line)\n\n# Draw a line from -10 to 10\nline = plt.Line2D([-10, 10], [0, 0], color='black')\nax.add_line(line)\n\n# Draw a line from -10 to 10\nline = plt.Line2D([0, 0], [-10, 10], color='black')\nax.add_line(line)\n\n# Draw a line from -10 to 10\nline = plt.Line2D([0, 0], [10, -10], color='black')\nax.add_line(line)\n\n# Draw a line from -10 to 10\nline = plt.Line2D([10, -10], [0, 0], color='black')\nax.add_line(line)\n\n# Draw a line from -10 to 10\nline = plt.Line2D([-10, 10], [-10, 10], color='black')\nax.add_line(line)\n\n# Draw a line from -10 to 10\nline = plt.Line2D([-10, 10], [10, -10], color='black')\nax.add_line(line)\n\n# Draw a line from -10 to 10\nline = plt.Line2D([-10, 10], [0, 0], color='black')\nax.add_line(line)\n\n# Draw a line from -10 to 10\nline = plt.Line2D([0, 0], [-10, 10], color='black')\nax.add_line(line)\n\n# Draw a line from -10 to 10\nline = plt.Line2D([0, 0], [10, -10], color='black')\nax.add_line(line)\n\n# Draw a line from -10 to 10\nline = plt.Line2D([10, -10], [0, 0], color='black')\nax.add_line(line)\n\n# Draw a line from -10 to 10\nline = plt.Line2D([-10, 10], [-10, 10], color='black')\nax.add_line(line)\n\n# Draw a line from -10 to 10\nline = plt.Line2D([-10, 10], [10, -10], color='black')\nax.add_line(line)\n\n# Draw a line from -10 to 10\nline = plt.Line2D([-10, 10], [0, 0], color='black')\nax.add_line(line)\n\n# Draw a line from -10 to 10\nline = plt.Line2D([0, 0], [-10, 10], color='black')\nax.add_line(line)\n\n# Draw a line from -10 to 10\nline = plt.Line2D([0, 0], [10, -10], color='black')\nax.add_line(line)\n\n# Draw a line from -10 to 10\nline = plt.Line2D([10, -10], [0, 0], color='black')\nax.add_line(line)\n\n# Draw a line from -10 to 10\nline = plt.Line2D([-10, 10], [-10, 10], color='black')\nax.add_line(line)\n\n# Draw a line from -10 to 10\nline = plt.Line2D([-10, 10], [10, -10], color='black')\nax.add_line(line)\n\n# Draw a line from -10 to 10\nline = plt.Line2D([-10, 10], [0, 0], color='black')\nax.add_line(line)\n\n# Draw a line from -10 to 10\nline = plt.Line2D([0, 0], [-10, 10], color='black')\nax.add_line(line)\n\n# Draw a line from -10 to 10\nline = plt.Line2D([0, 0], [10, -10], color='black')\nax.add_line(line)\n\n# Draw a line from -10 to 10\nline = plt.Line2D([10, -10], [0, 0], color='black')\nax.add_line(line)\n\n# Draw a line from -10 to 10\nline = plt.Line2D([-10, 10], [-10, 10], color='black')\nax.add_line(line)\n\n# Draw a line from -10 to 10\nline = plt.Line2D([-10, 1"}
{"file": "dataset/ori_500/contour_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Set the background color of the plot\nax.set_facecolor('lightblue')\n\n# Create a circle with a radius of 10\ncircle = plt.Circle((5, 5), 10, color='red')\nax.add_artist(circle)\n\n# Create a circle with a radius of 8\ncircle = plt.Circle((5, 5), 8, color='orange')\nax.add_artist(circle)\n\n# Create a circle with a radius of 6\ncircle = plt.Circle((5, 5), 6, color='yellow')\nax.add_artist(circle)\n\n# Create a circle with a radius of 4\ncircle = plt.Circle((5, 5), 4, color='green')\nax.add_artist(circle)\n\n# Create a circle with a radius of 2\ncircle = plt.Circle((5, 5), 2, color='blue')\nax.add_artist(circle)\n\n# Create a circle with a radius of 0\ncircle = plt.Circle((5, 5), 0, color='purple')\nax.add_artist(circle)\n\n# Set the limits of the x and y axes\nax.set_xlim(0, 10)\nax.set_ylim(0, 10)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/density_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 3.0))\n\n# Define the data\nx = np.linspace(8, 15, 100)\ny = np.sin(x)\n\n# Plot the data\nax.plot(x, y, color='blue')\n\n# Set the title and labels\nax.set_title('Stock Market Data')\nax.set_xlabel('Time')\nax.set_ylabel('Price')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/density_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 4.0))\n\n# Create a circle\ncircle = plt.Circle((0.5, 0.5), 0.5, color='pink')\nax.add_artist(circle)\n\n# Create a rectangle\nrectangle = plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='pink')\nax.add_artist(rectangle)\n\n# Set the aspect ratio of the plot to be equal\nax.set_aspect('equal')\n\n# Set the limits of the plot\nax.set_xlim(0, 1)\nax.set_ylim(0, 1)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/density_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 4.0))\n\n# Set the title of the plot\nax.set_title('KDE Plot of Spearman Coefficient Distribution')\n\n# Generate some data\nx = np.linspace(-1.0, 1.0, 100)\ny = np.sin(x)\n\n# Plot the data\nax.plot(x, y, color='blue')\n\n# Set the x and y limits\nax.set_xlim(-1.0, 1.0)\nax.set_ylim(0.0, 1.0)\n\n# Set the x and y labels\nax.set_xlabel('Spearman Coefficient')\nax.set_ylabel('Density')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/density_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(9.0, 6.0))\n\n# Set the x-axis limits\nax.set_xlim(7, 15)\n\n# Set the y-axis limits\nax.set_ylim(0, 1)\n\n# Set the x-axis ticks\nax.set_xticks(np.arange(7, 16, 1))\n\n# Set the y-axis ticks\nax.set_yticks(np.arange(0, 1.1, 0.1))\n\n# Set the grid\nax.grid(True)\n\n# Set the title\nax.set_title('Real Estate Market Analysis')\n\n# Set the labels\nax.set_xlabel('Time (in years)')\nax.set_ylabel('Price (in millions of dollars)')\n\n# Add a rectangle for the timeline\nrect = plt.Rectangle((7, 0), 1, 1, color='red', alpha=0.5)\nax.add_patch(rect)\n\n# Add a line for the price trend\nline = plt.Line2D([7, 15], [0.5, 0.5], color='blue')\nax.add_line(line)\n\n# Add a scatter plot for the data points\nx = np.random.rand(10)\ny = np.random.rand(10)\nax.scatter(x, y, color='green')\n\n# Add a bar chart for the market share\nx = np.arange(7, 16, 1)\ny = np.random.rand(10)\nax.bar(x, y, color='purple')\n\n# Add a pie chart for the market share\nx = np.arange(7, 16, 1)\ny = np.random.rand(10)\nax.pie(y, colors=['pink', 'orange', 'grey'], startangle=90)\n\n# Add a histogram for the market share\nx = np.random.rand(100)\nax.hist(x, bins=10, color='cyan')\n\n# Add a box plot for the market share\nx = np.random.rand(100)\nax.boxplot(x, vert=False, patch_artist=True, boxprops=dict(facecolor=\"blue\", alpha=0.5))\n\n# Add a violin plot for the market share\nx = np.random.rand(100)\nax.violinplot(x, showmeans=True)\n\n# Add a heatmap for the market share\nx = np.random.rand(10, 10)\nax.imshow(x, cmap='hot', interpolation='nearest')\n\n# Add a contour plot for the market share\nx = np.random.rand(10, 10)\nax.contourf(x, cmap='coolwarm')\n\n# Add a scatter plot for the market share\nx = np.random.rand(10)\ny = np.random.rand(10)\nax.scatter(x, y, color='green')\n\n# Add a bar chart for the market share\nx = np.arange(7, 16, 1)\ny = np.random.rand(10)\nax.bar(x, y, color='purple')\n\n# Add a pie chart for the market share\nx = np.arange(7, 16, 1)\ny = np.random.rand(10)\nax.pie(y, colors=['pink', 'orange', 'grey'], startangle=90)\n\n# Add a histogram for the market share\nx = np.random.rand(100)\nax.hist(x, bins=10, color='cyan')\n\n# Add a box plot for the market share\nx = np.random.rand(100)\nax.boxplot(x, vert=False, patch_artist=True, boxprops=dict(facecolor=\"blue\", alpha=0.5))\n\n# Add a violin plot for the market share\nx = np.random.rand(100)\nax.violinplot(x, showmeans=True)\n\n# Add a heatmap for the market share\nx = np.random.rand(10, 10)\nax.imshow(x, cmap='hot', interpolation='nearest')\n\n# Add a contour plot for the market share\nx = np.random.rand(10, 10)\nax.contourf(x, cmap='coolwarm')\n\n# Add a scatter plot for the market share\nx = np.random.rand(10)\ny = np.random.rand(10)\nax.scatter(x, y, color='green')\n\n# Add a bar chart for the market share\nx = np.arange(7, 16, 1)\ny = np.random.rand(10)\nax.bar(x, y, color='purple')\n\n# Add a pie chart for the market share\nx = np.arange(7, 16, 1)\ny = np.random.rand(10)\nax.pie(y, colors=['pink', 'orange', 'grey'], startangle=90)\n\n# Add a histogram for the market share\nx = np.random.rand(100)\nax.hist(x, bins=10, color='cyan')\n\n# Add a box plot for the market share\nx = np.random.rand(100)\nax.boxplot(x, vert=False, patch_artist=True, boxprops=dict(facecolor=\"blue\", alpha=0.5))\n\n# Add a violin plot for the market share\nx = np.random.rand(100)\nax.violinplot(x, showmeans=True)\n\n# Add a heatmap for the market share\nx = np.random.rand(10, 10)\nax.imshow(x, cmap='hot', interpolation='nearest')\n\n# Add a contour plot for the market share\nx = np.random.rand(10, 10)\nax.contourf(x, cmap='coolwarm')\n\n# Add a scatter plot for the market share\nx = np.random.rand(10)\ny = np.random.rand(10)\nax.scatter(x, y, color='green')\n\n# Add a bar chart for the market share\nx = np.arange(7, 16, 1)\ny = np.random.rand(10)\nax.bar(x, y, color='purple')\n\n# Add a pie chart for the market share\nx = np.arange(7, 16, 1)\ny = np.random.rand(10)\nax.pie(y, colors=['pink', 'orange', 'grey'], startangle=90)\n\n# Add a histogram for the market share\nx = np.random.rand(100)\nax.hist(x, bins=10, color='cyan')\n\n# Add a box plot for the market share\nx = np.random.rand(100)\nax.boxplot(x, vert=False, patch_artist=True, boxprops=dict(facecolor=\"blue\", alpha=0.5))\n\n# Add a violin plot for the market share\nx = np.random.rand(100)\nax.violinplot(x, showmeans=True)\n\n# Add a heatmap for the market share\nx = np.random.rand(10, 10)\nax.imshow(x, cmap='hot', interpolation='nearest')\n\n# Add a contour plot for the market share\nx = np.random.rand(10, 10)\nax.contourf(x, cmap='coolwarm')\n\n# Add a scatter plot for the market share\nx = np.random.rand(10)\ny = np.random.rand(10)\nax.scatter(x, y, color='green')\n\n# Add a bar chart for the market share\nx = np.arange(7, 16, 1)\ny = np.random.rand(10)\nax.bar(x, y, color='purple')\n\n# Add a pie chart for the market share\nx = np.arange(7, 16, 1)\ny = np.random.rand(10)\nax.pie(y, colors=['pink', 'orange', 'grey'], startangle=90)\n\n# Add a histogram for the market share\nx = np.random.rand(100)\nax.hist(x, bins=10, color='cyan')\n\n# Add a box plot for the market share\nx = np.random.rand(100)\nax.boxplot(x, vert=False, patch_artist=True, boxprops=dict(facecolor=\"blue\", alpha=0.5))\n\n# Add a violin plot for the market share\nx = np.random.rand(100)\nax.violinplot(x, showmeans=True)\n\n# Add a heatmap for the market share\nx = np.random.rand(10, 10)\nax.imshow(x, cmap='hot', interpolation='nearest')\n\n# Add a contour plot for the market share\nx = np.random.rand(10, 10)\nax.contourf(x, cmap='coolwarm')\n\n# Add a scatter plot for the market share\nx = np.random.rand(10)\ny = np.random.rand(10)\nax.scatter(x, y, color='green')\n\n# Add a bar chart for the market share\nx = np.arange(7, 16, 1)\ny = np.random.rand(10)\nax.bar(x, y, color='purple')\n\n# Add a pie chart for the market share\nx = np.arange(7, 16, 1)\ny = np.random.rand(10)\nax.pie(y, colors=['pink', 'orange', 'grey'], startangle=90)\n\n# Add a histogram for the market share\nx = np.random.rand(100)\nax.hist(x, bins=10, color='cyan')\n\n# Add a box plot for the market share\nx = np.random.rand(100)\nax.boxplot(x, vert=False, patch_artist=True, boxprops=dict(facecolor=\"blue\", alpha=0.5))\n\n# Add a violin plot for the market share\nx = np.random.rand(100)\nax.violinplot(x, showmeans=True)\n\n# Add a heatmap for the market share\nx = np.random.rand(10, 10)\nax.imshow(x, cmap='hot', interpolation='nearest')\n\n# Add a contour plot for the market share\nx = np.random.rand(10, 10)\nax.contourf(x, cmap='coolwarm')\n\n# Add a scatter plot for the market share\nx = np.random.rand(10)\ny = np.random.rand(10)\nax.scatter(x, y, color='green')\n\n# Add a bar chart for the market share\nx = np.arange(7, 16, 1)\ny = np.random.rand(10)\nax.bar(x, y, color='purple')\n\n# Add a pie chart for the market share\nx = np.arange(7, 16, 1)\ny = np.random.rand(10)\nax.pie(y, colors=['pink', 'orange', 'grey'], startangle=90)\n\n# Add a histogram for the market share\nx = np.random.rand(100)\nax.hist(x, bins=10, color='cyan')\n\n# Add a box plot for the market share\nx = np.random.rand(100)\nax.boxplot(x, vert=False, patch_artist=True, boxprops=dict(facecolor=\"blue\", alpha=0.5))\n\n# Add a violin plot for the market share\nx = np.random.rand(100)\nax.violinplot(x, showmeans=True)\n\n# Add a heatmap for the market share\nx = np.random.rand(10, 10)\nax.imshow(x, cmap='hot', interpolation='nearest')\n\n# Add a contour plot for the market share\nx = np.random.rand(10, 10)\nax.contourf(x, cmap='coolwarm')\n\n# Add a scatter plot for the market share\nx = np.random.rand(10)\ny = np.random.rand(10)\nax.scatter(x, y, color='green')\n\n# Add a bar chart for the market share\nx = np.arange(7, 16, 1)\ny = np.random.rand(10)\nax.bar(x, y, color='purple')\n\n# Add a pie chart for the market share\nx = np.arange(7, 16, 1)\ny = np.random.rand(10)\nax.pie(y, colors=['pink', 'orange', 'grey'], startangle=90)\n\n# Add a histogram for the market share\nx = np.random.rand(100)\nax.hist(x, bins=10, color='cyan')\n\n# Add a box plot for the market share\nx = np.random.rand(100)\nax.boxplot(x, vert=False, patch_artist=True, boxprops=dict(facecolor=\"blue\", alpha=0.5))\n\n# Add a violin plot for the market share\nx = np.random.rand(100)\nax.violinplot(x, showmeans=True)\n\n# Add a heatmap for the market share\nx = np.random.rand(10, 10)\nax.imshow(x, cmap='hot', interpolation='nearest')\n\n# Add a contour plot for the market share\nx = np.random.rand(10, 10)\nax.contourf(x, cmap='coolwarm')\n\n# Add a scatter plot for the market share\nx = np.random.rand(10)\ny = np.random.rand(10)\nax.scatter(x, y, color='green')\n\n# Add a bar chart for the market share\nx = np.arange(7, 16, 1)\ny = np.random.rand(10)\nax.bar(x, y, color='purple')\n\n# Add a pie chart for the market share\nx = np.arange(7, 16, 1)\ny = np.random.rand(10)\nax.pie(y, colors=['pink', 'orange', 'grey'], startangle=90)\n\n# Add a histogram for the market share\nx = np.random.rand(100)\nax.hist(x, bins=10, color='cyan')\n\n# Add a box plot for the market share\nx = np.random.rand(100)\nax.boxplot(x, vert=False, patch_artist=True, boxprops=dict(facecolor=\"blue\", alpha=0.5))\n\n# Add a violin plot for the market share\nx = np.random.rand(100)\nax.violinplot(x, showmeans=True)\n\n# Add a heatmap for the market share\nx = np.random.rand(10, 10)\nax.imshow(x, cmap='hot', interpolation='nearest')\n\n# Add a contour plot for the market share\nx = np.random.rand(10, 10)\nax.contourf(x, cmap='coolwarm')\n\n# Add a scatter plot for the market share\nx = np.random.rand(10)\ny = np.random.rand(10)\nax.scatter(x, y, color='green')\n\n# Add a bar chart for the market share\nx = np.arange(7, 16, 1)\ny = np.random.rand(10)\nax.bar(x, y, color='purple')\n\n# Add a pie chart for the market share\nx = np.arange(7, 16, 1)\ny = np.random.rand(10)\nax.pie(y, colors=['pink', 'orange', 'grey'], startangle=90)\n\n# Add a histogram for the market share\nx = np.random.rand(100)\nax.hist(x, bins=10, color='cyan')\n\n# Add a box plot for the market share\nx = np.random.rand(100)\nax.boxplot(x, vert=False, patch_artist=True, boxprops=dict(facecolor=\"blue\", alpha=0.5))\n\n# Add a violin plot for the market share\nx = np.random.rand(100)\nax.violinplot(x, showmeans=True)\n\n# Add a heatmap for the market share\nx = np.random.rand(10, 10)\nax.imshow(x, cmap='hot', interpolation='nearest')\n\n# Add a contour plot for the market share\nx = np.random.rand(10, 10)\nax.contourf(x, cmap='coolwarm')\n\n# Add a scatter plot for the market share\nx = np.random.rand(10)\ny = np.random.rand(10)\nax.scatter(x, y, color='green')\n\n# Add a bar chart for the market share\nx = np.arange(7, 16, 1)\ny = np.random.rand(10)\nax.bar(x, y, color='purple')\n\n# Add a pie chart for the market share\nx = np.arange(7, 16, 1)\ny = np.random.rand(10)\nax.pie(y, colors=['pink', 'orange', 'grey'], startangle=90)\n\n# Add a histogram for the market share\nx = np.random.rand(100)\nax.hist(x, bins=10, color='cyan')\n\n# Add a box plot for the market share\nx = np.random.rand(100)\nax.boxplot(x, vert=False, patch_artist=True, boxprops=dict(facecolor=\"blue\", alpha=0.5))\n\n# Add a violin plot for the market share\nx = np.random.rand(100)\nax.violinplot(x, showmeans=True)\n\n# Add a heatmap for the market share\nx = np.random.rand(10, 10)\nax.imshow(x, cmap='hot', interpolation='nearest')\n\n# Add a contour plot for the market share\nx = np.random.rand(10, 10)\nax.contourf(x, cmap='coolwarm')\n\n# Add a scatter plot for the market share\nx = np.random.rand(10)\ny = np.random.rand(10)\nax.scatter(x, y, color='green')\n\n# Add a bar chart for the market share\nx = np.arange(7, 16, 1)\ny = np.random.rand(10)\nax.bar(x, y, color='purple')\n\n# Add a pie chart for the market share\nx = np.arange(7, 16, 1)\ny = np.random.rand(10)\nax.pie(y, colors=['pink', 'orange', 'grey'], startangle=90)\n\n# Add a histogram for the market share\nx = np.random.rand(100)\nax.hist(x, bins=10, color='cyan')\n\n# Add a box plot for the market share\nx = np.random.rand(100)\nax.boxplot(x, vert=False, patch_artist=True, boxprops=dict(facecolor=\"blue\", alpha=0.5))\n\n# Add a violin plot for the market share\nx = np.random.rand(100)\nax.violinplot(x, showmeans=True)\n\n# Add a heatmap for the market share\nx = np.random.rand(10, 10)\nax.imshow(x, cmap='hot', interpolation='nearest')\n\n# Add a contour plot for the market share\nx = np.random.rand(10, 10)\nax.contourf(x, cmap='coolwarm')\n\n# Add a scatter plot for the market share\nx = np.random.rand(10)\ny = np.random.rand(10)\nax.scatter(x, y, color='green')\n\n# Add a bar chart for the market share\nx = np.arange(7, 16, 1)\ny = np.random.rand(10)\nax.bar(x, y, color='purple')\n\n# Add a pie chart for the market share\nx = np.arange(7, 16, "}
{"file": "dataset/ori_500/density_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(9.0, 6.0))\n\n# Set the background color of the plot\nax.set_facecolor('lightgrey')\n\n# Set the title of the plot\nax.set_title('Fashion Trends Over Time')\n\n# Set the x-axis label\nax.set_xlabel('Time')\n\n# Set the y-axis label\nax.set_ylabel('Value')\n\n# Set the x-axis limits\nax.set_xlim(0, 1)\n\n# Set the y-axis limits\nax.set_ylim(0, 15)\n\n# Set the x-axis ticks\nax.set_xticks([0, 0.25, 0.5, 0.75, 1])\n\n# Set the y-axis ticks\nax.set_yticks([0, 2, 4, 6, 8, 10, 12, 14])\n\n# Set the grid lines\nax.grid(True)\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Set the title of the plot\nax.set_title('Log Probability Distribution')\n\n# Set the x-axis label\nax.set_xlabel('Log Probability')\n\n# Set the y-axis label\nax.set_ylabel('Probability')\n\n# Set the x-axis limits\nax.set_xlim(-1.0, 0.8)\n\n# Set the y-axis limits\nax.set_ylim(-0.2, 0.8)\n\n# Set the x-axis ticks\nax.set_xticks([-1.0, -0.75, -0.5, -0.25, 0.0, 0.25, 0.5, 0.75, 1.0])\n\n# Set the y-axis ticks\nax.set_yticks([-0.2, -0.1, 0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0])\n\n# Set the x-axis tick labels\nax.set_xticklabels(['-1.0', '-0.75', '-0.5', '-0.25', '0.0', '0.25', '0.5', '0.75', '1.0'])\n\n# Set the y-axis tick labels\nax.set_yticklabels(['-0.2', '-0.1', '0.0', '0.1', '0.2', '0.3', '0.4', '0.5', '0.6', '0.7', '0.8', '0.9', '1.0'])\n\n# Set the x-axis grid lines\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Set the y-axis grid lines\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Set the x-axis tick marks\nax.tick_params(axis='x', which='both', bottom=True, top=False, labelbottom=True)\n\n# Set the y-axis tick marks\nax.tick_params(axis='y', which='both', left=True, right=False, labelleft=True)\n\n# Set the x-axis tick mark labels\nax.tick_params(axis='x', which='major', labelsize=10)\n\n# Set the y-axis tick mark labels\nax.tick_params(axis='y', which='major', labelsize=10)\n\n# Set the x-axis tick mark width\nax.tick_params(axis='x', which='major', width=1)\n\n# Set the y-axis tick mark width\nax.tick_params(axis='y', which='major', width=1)\n\n# Set the x-axis tick mark color\nax.tick_params(axis='x', which='major', colors='black')\n\n# Set the y-axis tick mark color\nax.tick_params(axis='y', which='major', colors='black')\n\n# Set the x-axis tick mark length\nax.tick_params(axis='x', which='major', length=5)\n\n# Set the y-axis tick mark length\nax.tick_params(axis='y', which='major', length=5)\n\n# Set the x-axis tick mark rotation\nax.tick_params(axis='x', which='major', rotation=0)\n\n# Set the y-axis tick mark rotation\nax.tick_params(axis='y', which='major', rotation=0)\n\n# Set the x-axis tick mark style\nax.tick_params(axis='x', which='major', style='-')\n\n# Set the y-axis tick mark style\nax.tick_params(axis='y', which='major', style='-')\n\n# Set the x-axis tick mark position\nax.tick_params(axis='x', which='major', pad=5)\n\n# Set the y-axis tick mark position\nax.tick_params(axis='y', which='major', pad=5)\n\n# Set the x-axis tick mark label position\nax.tick_params(axis='x', which='major', labelpad=5)\n\n# Set the y-axis tick mark label position\nax.tick_params(axis='y', which='major', labelpad=5)\n\n# Set the x-axis tick mark label rotation\nax.tick_params(axis='x', which='major', labelrotation=0)\n\n# Set the y-axis tick mark label rotation\nax.tick_params(axis='y', which='major', labelrotation=0)\n\n# Set the x-axis tick mark label style\nax.tick_params(axis='x', which='major', labelstyle='-')\n\n# Set the y-axis tick mark label style\nax.tick_params(axis='y', which='major', labelstyle='-')\n\n# Set the x-axis tick mark label color\nax.tick_params(axis='x', which='major', labelcolor='black')\n\n# Set the y-axis tick mark label color\nax.tick_params(axis='y', which='major', labelcolor='black')\n\n# Set the x-axis tick mark label font size\nax.tick_params(axis='x', which='major', labelsize=10)\n\n# Set the y-axis tick mark label font size\nax.tick_params(axis='y', which='major', labelsize=10)\n\n# Set the x-axis tick mark label font weight\nax.tick_params(axis='x', which='major', labelweight='normal')\n\n# Set the y-axis tick mark label font weight\nax.tick_params(axis='y', which='major', labelweight='normal')\n\n# Set the x-axis tick mark label font style\nax.tick_params(axis='x', which='major', labelstyle='italic')\n\n# Set the y-axis tick mark label font style\nax.tick_params(axis='y', which='major', labelstyle='italic')\n\n# Set the x-axis tick mark label font family\nax.tick_params(axis='x', which='major', labelfontfamily='sans-serif')\n\n# Set the y-axis tick mark label font family\nax.tick_params(axis='y', which='major', labelfontfamily='sans-serif')\n\n# Set the x-axis tick mark label font variant\nax.tick_params(axis='x', which='major', labelvariant='normal')\n\n# Set the y-axis tick mark label font variant\nax.tick_params(axis='y', which='major', labelvariant='normal')\n\n# Set the x-axis tick mark label font stretch\nax.tick_params(axis='x', which='major', labelstretch='normal')\n\n# Set the y-axis tick mark label font stretch\nax.tick_params(axis='y', which='major', labelstretch='normal')\n\n# Set the x-axis tick mark label font size\nax.tick_params(axis='x', which='major', labelsize=10)\n\n# Set the y-axis tick mark label font size\nax.tick_params(axis='y', which='major', labelsize=10)\n\n# Set the x-axis tick mark label font weight\nax.tick_params(axis='x', which='major', labelweight='normal')\n\n# Set the y-axis tick mark label font weight\nax.tick_params(axis='y', which='major', labelweight='normal')\n\n# Set the x-axis tick mark label font style\nax.tick_params(axis='x', which='major', labelstyle='italic')\n\n# Set the y-axis tick mark label font style\nax.tick_params(axis='y', which='major', labelstyle='italic')\n\n# Set the x-axis tick mark label font family\nax.tick_params(axis='x', which='major', labelfontfamily='sans-serif')\n\n# Set the y-axis tick mark label font family\nax.tick_params(axis='y', which='major', labelfontfamily='sans-serif')\n\n# Set the x-axis tick mark label font variant\nax.tick_params(axis='x', which='major', labelvariant='normal')\n\n# Set the y-axis tick mark label font variant\nax.tick_params(axis='y', which='major', labelvariant='normal')\n\n# Set the x-axis tick mark label font stretch\nax.tick_params(axis='x', which='major', labelstretch='normal')\n\n# Set the y-axis tick mark label font stretch\nax.tick_params(axis='y', which='major', labelstretch='normal')\n\n# Set the x-axis tick mark label font size\nax.tick_params(axis='x', which='major', labelsize=10)\n\n# Set the y-axis tick mark label font size\nax.tick_params(axis='y', which='major', labelsize=10)\n\n# Set the x-axis tick mark label font weight\nax.tick_params(axis='x', which='major', labelweight='normal')\n\n# Set the y-axis tick mark label font weight\nax.tick_params(axis='y', which='major', labelweight='normal')\n\n# Set the x-axis tick mark label font style\nax.tick_params(axis='x', which='major', labelstyle='italic')\n\n# Set the y-axis tick mark label font style\nax.tick_params(axis='y', which='major', labelstyle='italic')\n\n# Set the x-axis tick mark label font family\nax.tick_params(axis='x', which='major', labelfontfamily='sans-serif')\n\n# Set the y-axis tick mark label font family\nax.tick_params(axis='y', which='major', labelfontfamily='sans-serif')\n\n# Set the x-axis tick mark label font variant\nax.tick_params(axis='x', which='major', labelvariant='normal')\n\n# Set the y-axis tick mark label font variant\nax.tick_params(axis='y', which='major', labelvariant='normal')\n\n# Set the x-axis tick mark label font stretch\nax.tick_params(axis='x', which='major', labelstretch='normal')\n\n# Set the y-axis tick mark label font stretch\nax.tick_params(axis='y', which='major', labelstretch='normal')\n\n# Set the x-axis tick mark label font size\nax.tick_params(axis='x', which='major', labelsize=10)\n\n# Set the y-axis tick mark label font size\nax.tick_params(axis='y', which='major', labelsize=10)\n\n# Set the x-axis tick mark label font weight\nax.tick_params(axis='x', which='major', labelweight='normal')\n\n# Set the y-axis tick mark label font weight\nax.tick_params(axis='y', which='major', labelweight='normal')\n\n# Set the x-axis tick mark label font style\nax.tick_params(axis='x', which='major', labelstyle='italic')\n\n# Set the y-axis tick mark label font style\nax.tick_params(axis='y', which='major', labelstyle='italic')\n\n# Set the x-axis tick mark label font family\nax.tick_params(axis='x', which='major', labelfontfamily='sans-serif')\n\n# Set the y-axis tick mark label font family\nax.tick_params(axis='y', which='major', labelfontfamily='sans-serif')\n\n# Set the x-axis tick mark label font variant\nax.tick_params(axis='x', which='major', labelvariant='normal')\n\n# Set the y-axis tick mark label font variant\nax.tick_params(axis='y', which='major', labelvariant='normal')\n\n# Set the x-axis tick mark label font stretch\nax.tick_params(axis='x', which='major', labelstretch='normal')\n\n# Set the y-axis tick mark label font stretch\nax.tick_params(axis='y', which='major', labelstretch='normal')\n\n# Set the x-axis tick mark label font size\nax.tick_params(axis='x', which='major', labelsize=10)\n\n# Set the y-axis tick mark label font size\nax.tick_params(axis='y', which='major', labelsize=10)\n\n# Set the x-axis tick mark label font weight\nax.tick_params(axis='x', which='major', labelweight='normal')\n\n# Set the y-axis tick mark label font weight\nax.tick_params(axis='y', which='major', labelweight='normal')\n\n# Set the x-axis tick mark label font style\nax.tick_params(axis='x', which='major', labelstyle='italic')\n\n# Set the y-axis tick mark label font style\nax.tick_params(axis='y', which='major', labelstyle='italic')\n\n# Set the x-axis tick mark label font family\nax.tick_params(axis='x', which='major', labelfontfamily='sans-serif')\n\n# Set the y-axis tick mark label font family\nax.tick_params(axis='y', which='major', labelfontfamily='sans-serif')\n\n# Set the x-axis tick mark label font variant\nax.tick_params(axis='x', which='major', labelvariant='normal')\n\n# Set the y-axis tick mark label font variant\nax.tick_params(axis='y', which='major', labelvariant='normal')\n\n# Set the x-axis tick mark label font stretch\nax.tick_params(axis='x', which='major', labelstretch='normal')\n\n# Set the y-axis tick mark label font stretch\nax.tick_params(axis='y', which='major', labelstretch='normal')\n\n# Set the x-axis tick mark label font size\nax.tick_params(axis='x', which='major', labelsize=10)\n\n# Set the y-axis tick mark label font size\nax.tick_params(axis='y', which='major', labelsize=10)\n\n# Set the x-axis tick mark label font weight\nax.tick_params(axis='x', which='major', labelweight='normal')\n\n# Set the y-axis tick mark label font weight\nax.tick_params(axis='y', which='major', labelweight='normal')\n\n# Set the x-axis tick mark label font style\nax.tick_params(axis='x', which='major', labelstyle='italic')\n\n# Set the y-axis tick mark label font style\nax.tick_params(axis='y', which='major', labelstyle='italic')\n\n# Set the x-axis tick mark label font family\nax.tick_params(axis='x', which='major', labelfontfamily='sans-serif')\n\n# Set the y-axis tick mark label font family\nax.tick_params(axis='y', which='major', labelfontfamily='sans-serif')\n\n# Set the x-axis tick mark label font variant\nax.tick_params(axis='x', which='major', labelvariant='normal')\n\n# Set the y-axis tick mark label font variant\nax.tick_params(axis='y', which='major', labelvariant='normal')\n\n# Set the x-axis tick mark label font stretch\nax.tick_params(axis='x', which='major', labelstretch='normal')\n\n# Set the y-axis tick mark label font stretch\nax.tick_params(axis='y', which='major', labelstretch='normal')\n\n# Set the x-axis tick mark label font size\nax.tick_params(axis='x', which='major', labelsize=10)\n\n# Set the y-axis tick mark label font size\nax.tick_params(axis='y', which='major', labelsize=10)\n\n# Set the x-axis tick mark label font weight\nax.tick_params(axis='x', which='major', labelweight='normal')\n\n# Set the y-axis tick mark label font weight\nax.tick_params(axis='y', which='major', labelweight='normal')\n\n# Set the x-axis tick mark label font style\nax.tick_params(axis='x', which='major', labelstyle='italic')\n\n# Set the y-axis tick mark label font style\nax.tick_params(axis='y', which='major', labelstyle='italic')\n\n# Set the x-axis tick mark label font family\nax.tick_params(axis='x', which='major', labelfontfamily='sans-serif')\n\n# Set the y-axis tick mark label font family\nax.tick_params(axis='y', which='major', labelfontfamily='sans-serif')\n\n# Set the x-axis tick mark label font variant\nax.tick_params(axis='x', which='major', labelvariant='normal')\n\n# Set the y-axis tick mark label font variant\nax.tick_params(axis='y', which='major', labelvariant='normal')\n\n# Set the x-axis tick mark label font stretch\nax.tick_params(axis='x', which='major', labelstretch='normal')\n\n# Set the y-axis tick mark label font stretch\nax.tick_params(axis='y', which='major', labelstretch='normal')\n\n# Set the x-axis tick mark label font size\nax.tick_params(axis='x', which='major', labelsize=10)\n\n# Set the y-axis tick mark label font size\nax.tick_params(axis='y', which='major', labelsize=10)\n\n# Set the x-axis tick mark label font weight\nax.tick_params(axis='x', which='major', labelweight='normal')\n\n# Set the y-axis tick mark label font weight\nax.tick_params(axis='y', which='major', labelweight='normal')\n\n# Set the x-axis tick mark label font style\nax.tick_params(axis='x', which='major', labelstyle='italic')\n\n# Set the y-axis tick mark label font style\nax.tick_params(axis='y', which='major', labelstyle='italic')\n\n# Set the x-axis tick mark label font family\nax.tick_params(axis='x', which='major', labelfontfamily='sans-serif')\n\n# Set the y-axis tick mark label font family\nax.tick_params(axis='y', which='major', labelfontfamily='sans-serif')\n\n# Set the x-axis tick mark label font variant\nax.tick_params(axis='x', which='major', labelvariant='normal')\n\n# Set the y-axis tick mark label font variant\nax.tick_params(axis='y', which='major', labelvariant='normal')\n\n# Set the x-axis tick mark label font stretch\nax.tick_params(axis='x', which='major', labelstretch='normal')\n\n# Set the y-axis tick mark label font stretch\nax.tick_params(axis='y', which='major', labelstretch='normal')\n\n# Set the x-axis tick mark label font size\nax.tick_params(axis='x', which='major', labelsize=10)\n\n# Set the y-axis tick mark label font size\nax.tick_params(axis='y', which='major', labelsize=10)\n\n# Set the x-axis tick mark label font weight\nax.tick_params(axis='x', which='major', labelweight='normal')\n\n# Set the y-axis tick mark label font weight\nax.tick_params(axis='y', which='major', labelweight='normal')\n\n# Set the x-axis tick mark label font style\nax.tick_params(axis='x', which='major', labelstyle='italic')\n\n# Set the y-axis tick mark label font style\nax.tick_params(axis='y', which='major', labelstyle='italic')\n\n# Set the x-axis tick mark label font family\nax.tick_params(axis='x', which='major', labelfontfamily='sans-serif')\n\n# Set the y-axis tick mark label font family\nax.tick_params(axis='y', which='major', labelfontfamily='sans-serif')\n\n# Set the x-axis tick mark label font variant\nax.tick_params(axis='x', which='major', labelvariant='normal')\n\n# Set the y-axis tick mark label font variant\nax.tick_params(axis='y', which='major', labelvariant='normal')\n\n# Set the x-axis tick mark label font stretch\nax.tick_params(axis='x', which='major', labelstretch='normal')\n\n# Set the y-axis tick mark label font stretch\nax.tick_params(axis='y', which='major', labelstretch='normal')\n\n# Set the x-axis tick mark label font size\nax.tick_params(axis='x', which='major', labelsize=10)\n\n# Set the y-axis tick mark label font size\nax.tick_params(axis='y', which='major', labelsize=10)\n\n# Set the"}
{"file": "dataset/ori_500/errorbar_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Expert dimension')\n\n# Define the data for the plot\nx = [1, 2, 3, 4, 5, 6, 7, 8]\ny = [5, 6, 5, 7, 6, 5, 7, 6]\n\n# Plot the data\nax.plot(x, y)\n\n# Set the x-axis label\nax.set_xlabel('Number of experts')\n\n# Set the y-axis label\nax.set_ylabel('IQM Human Normalized Score')\n\n# Set the color of the line\nax.plot(x, y, color='blue')\n\n# Set the color of the markers\nax.plot(x, y, 'o', color='black')\n\n# Set the color of the background\nax.set_facecolor('lightgrey')\n\n# Set the color of the grid\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the legend\nax.legend(['Baseline', 'SoftMoE (unchanged)', 'SoftMoE (\u2202 NumExperts)'], loc='upper left')\n\n# Set the color of the title\nax.set_title('Expert dimension', color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('Number of experts', color='black')\n\n# Set the color of the y-axis label\nax.set_ylabel('IQM Human Normalized Score', color='black')\n\n# Set the color of the grid\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the legend\nax.legend(['Baseline', 'SoftMoE (unchanged)', 'SoftMoE (\u2202 NumExperts)'], loc='upper left')\n\n# Set the color of the title\nax.set_title('Expert dimension', color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('Number of experts', color='black')\n\n# Set the color of the y-axis label\nax.set_ylabel('IQM Human Normalized Score', color='black')\n\n# Set the color of the grid\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the legend\nax.legend(['Baseline', 'SoftMoE (unchanged)', 'SoftMoE (\u2202 NumExperts)'], loc='upper left')\n\n# Set the color of the title\nax.set_title('Expert dimension', color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('Number of experts', color='black')\n\n# Set the color of the y-axis label\nax.set_ylabel('IQM Human Normalized Score', color='black')\n\n# Set the color of the grid\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the legend\nax.legend(['Baseline', 'SoftMoE (unchanged)', 'SoftMoE (\u2202 NumExperts)'], loc='upper left')\n\n# Set the color of the title\nax.set_title('Expert dimension', color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('Number of experts', color='black')\n\n# Set the color of the y-axis label\nax.set_ylabel('IQM Human Normalized Score', color='black')\n\n# Set the color of the grid\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the legend\nax.legend(['Baseline', 'SoftMoE (unchanged)', 'SoftMoE (\u2202 NumExperts)'], loc='upper left')\n\n# Set the color of the title\nax.set_title('Expert dimension', color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('Number of experts', color='black')\n\n# Set the color of the y-axis label\nax.set_ylabel('IQM Human Normalized Score', color='black')\n\n# Set the color of the grid\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the legend\nax.legend(['Baseline', 'SoftMoE (unchanged)', 'SoftMoE (\u2202 NumExperts)'], loc='upper left')\n\n# Set the color of the title\nax.set_title('Expert dimension', color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('Number of experts', color='black')\n\n# Set the color of the y-axis label\nax.set_ylabel('IQM Human Normalized Score', color='black')\n\n# Set the color of the grid\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the legend\nax.legend(['Baseline', 'SoftMoE (unchanged)', 'SoftMoE (\u2202 NumExperts)'], loc='upper left')\n\n# Set the color of the title\nax.set_title('Expert dimension', color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('Number of experts', color='black')\n\n# Set the color of the y-axis label\nax.set_ylabel('IQM Human Normalized Score', color='black')\n\n# Set the color of the grid\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the legend\nax.legend(['Baseline', 'SoftMoE (unchanged)', 'SoftMoE (\u2202 NumExperts)'], loc='upper left')\n\n# Set the color of the title\nax.set_title('Expert dimension', color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('Number of experts', color='black')\n\n# Set the color of the y-axis label\nax.set_ylabel('IQM Human Normalized Score', color='black')\n\n# Set the color of the grid\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the legend\nax.legend(['Baseline', 'SoftMoE (unchanged)', 'SoftMoE (\u2202 NumExperts)'], loc='upper left')\n\n# Set the color of the title\nax.set_title('Expert dimension', color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('Number of experts', color='black')\n\n# Set the color of the y-axis label\nax.set_ylabel('IQM Human Normalized Score', color='black')\n\n# Set the color of the grid\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the legend\nax.legend(['Baseline', 'SoftMoE (unchanged)', 'SoftMoE (\u2202 NumExperts)'], loc='upper left')\n\n# Set the color of the title\nax.set_title('Expert dimension', color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('Number of experts', color='black')\n\n# Set the color of the y-axis label\nax.set_ylabel('IQM Human Normalized Score', color='black')\n\n# Set the color of the grid\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the legend\nax.legend(['Baseline', 'SoftMoE (unchanged)', 'SoftMoE (\u2202 NumExperts)'], loc='upper left')\n\n# Set the color of the title\nax.set_title('Expert dimension', color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('Number of experts', color='black')\n\n# Set the color of the y-axis label\nax.set_ylabel('IQM Human Normalized Score', color='black')\n\n# Set the color of the grid\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the legend\nax.legend(['Baseline', 'SoftMoE (unchanged)', 'SoftMoE (\u2202 NumExperts)'], loc='upper left')\n\n# Set the color of the title\nax.set_title('Expert dimension', color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('Number of experts', color='black')\n\n# Set the color of the y-axis label\nax.set_ylabel('IQM Human Normalized Score', color='black')\n\n# Set the color of the grid\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the legend\nax.legend(['Baseline', 'SoftMoE (unchanged)', 'SoftMoE (\u2202 NumExperts)'], loc='upper left')\n\n# Set the color of the title\nax.set_title('Expert dimension', color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('Number of experts', color='black')\n\n# Set the color of the y-axis label\nax.set_ylabel('IQM Human Normalized Score', color='black')\n\n# Set the color of the grid\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the legend\nax.legend(['Baseline', 'SoftMoE (unchanged)', 'SoftMoE (\u2202 NumExperts)'], loc='upper left')\n\n# Set the color of the title\nax.set_title('Expert dimension', color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('Number of experts', color='black')\n\n# Set the color of the y-axis label\nax.set_ylabel('IQM Human Normalized Score', color='black')\n\n# Set the color of the grid\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the legend\nax.legend(['Baseline', 'SoftMoE (unchanged)', 'SoftMoE (\u2202 NumExperts)'], loc='upper left')\n\n# Set the color of the title\nax.set_title('Expert dimension', color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('Number of experts', color='black')\n\n# Set the color of the y-axis label\nax.set_ylabel('IQM Human Normalized Score', color='black')\n\n# Set the color of the grid\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the legend\nax.legend(['Baseline', 'SoftMoE (unchanged)', 'SoftMoE (\u2202 NumExperts)'], loc='upper left')\n\n# Set the color of the title\nax.set_title('Expert dimension', color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('Number of experts', color='black')\n\n# Set the color of the y-axis label\nax.set_ylabel('IQM Human Normalized Score', color='black')\n\n# Set the color of the grid\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the legend\nax.legend(['Baseline', 'SoftMoE (unchanged)', 'SoftMoE (\u2202 NumExperts)'], loc='upper left')\n\n# Set the color of the title\nax.set_title('Expert dimension', color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('Number of experts', color='black')\n\n# Set the color of the y-axis label\nax.set_ylabel('IQM Human Normalized Score', color='black')\n\n# Set the color of the grid\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the legend\nax.legend(['Baseline', 'SoftMoE (unchanged)', 'SoftMoE (\u2202 NumExperts)'], loc='upper left')\n\n# Set the color of the title\nax.set_title('Expert dimension', color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('Number of experts', color='black')\n\n# Set the color of the y-axis label\nax.set_ylabel('IQM Human Normalized Score', color='black')\n\n# Set the color of the grid\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the legend\nax.legend(['Baseline', 'SoftMoE (unchanged)', 'SoftMoE (\u2202 NumExperts)'], loc='upper left')\n\n# Set the color of the title\nax.set_title('Expert dimension', color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('Number of experts', color='black')\n\n# Set the color of the y-axis label\nax.set_ylabel('IQM Human Normalized Score', color='black')\n\n# Set the color of the grid\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the legend\nax.legend(['Baseline', 'SoftMoE (unchanged)', 'SoftMoE (\u2202 NumExperts)'], loc='upper left')\n\n# Set the color of the title\nax.set_title('Expert dimension', color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('Number of experts', color='black')\n\n# Set the color of the y-axis label\nax.set_ylabel('IQM Human Normalized Score', color='black')\n\n# Set the color of the grid\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the legend\nax.legend(['Baseline', 'SoftMoE (unchanged)', 'SoftMoE (\u2202 NumExperts)'], loc='upper left')\n\n# Set the color of the title\nax.set_title('Expert dimension', color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('Number of experts', color='black')\n\n# Set the color of the y-axis label\nax.set_ylabel('IQM Human Normalized Score', color='black')\n\n# Set the color of the grid\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the legend\nax.legend(['Baseline', 'SoftMoE (unchanged)', 'SoftMoE (\u2202 NumExperts)'], loc='upper left')\n\n# Set the color of the title\nax.set_title('Expert dimension', color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('Number of experts', color='black')\n\n# Set the color of the y-axis label\nax.set_ylabel('IQM Human Normalized Score', color='black')\n\n# Set the color of the grid\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the legend\nax.legend(['Baseline', 'SoftMoE (unchanged)', 'SoftMoE (\u2202 NumExperts)'], loc='upper left')\n\n# Set the color of the title\nax.set_title('Expert dimension', color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('Number of experts', color='black')\n\n# Set the color of the y-axis label\nax.set_ylabel('IQM Human Normalized Score', color='black')\n\n# Set the color of the grid\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the legend\nax.legend(['Baseline', 'SoftMoE (unchanged)', 'SoftMoE (\u2202 NumExperts)'], loc='upper left')\n\n# Set the color of the title\nax.set_title('Expert dimension', color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('Number of experts', color='black')\n\n# Set the color of the y-axis label\nax.set_ylabel('IQM Human Normalized Score', color='black')\n\n# Set the color of the grid\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the legend\nax.legend(['Baseline', 'SoftMoE (unchanged)', 'SoftMoE (\u2202 NumExperts)'], loc='upper left')\n\n# Set the color of the title\nax.set_title('Expert dimension', color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('Number of experts', color='black')\n\n# Set the color of the y-axis label\nax.set_ylabel('IQM Human Normalized Score', color='black')\n\n# Set the color of the grid\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the legend\nax.legend(['Baseline', 'SoftMoE (unchanged)', 'SoftMoE (\u2202 NumExperts)'], loc='upper left')\n\n# Set the color of the title\nax.set_title('Expert dimension', color='black')\n\n# Set the color of the x-axis label\n"}
{"file": "dataset/ori_500/errorbar_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Set the title of the plot\nax.set_title('Accuracy by hospital and method')\n\n# Create a color bar for the legend\ncbar = fig.colorbar(ax.imshow([[1,2],[3,4]]), ax=ax)\n\n# Set the labels for the x-axis\nax.set_xticks([0, 1, 2, 3])\nax.set_yticks([0, 1])\nax.set_xticklabels(['Hospital 1', 'Hospital 2', 'Hospital 3', 'Hospital 4'])\nax.set_yticklabels(['Baseline 1', 'Baseline 2'])\n\n# Set the labels for the y-axis\nax.set_ylabel('Baseline')\nax.set_xlabel('Hospital')\n\n# Set the limits for the y-axis\nax.set_ylim(0, 1)\n\n# Set the limits for the x-axis\nax.set_xlim(0, 3)\n\n# Set the color map for the plot\ncmap = plt.cm.RdYlGn\n\n# Set the color bar label\ncbar.set_label('Accuracy')\n\n# Set the color bar orientation\ncbar.ax.set_aspect('auto')\n\n# Set the color bar ticks\ncbar.set_ticks([0.5, 1.5])\n\n# Set the color bar tick labels\ncbar.set_ticklabels(['Low', 'High'])\n\n# Set the color bar tick locations\ncbar.set_ticklocations([0.5, 1.5])\n\n# Set the color bar tick colors\ncbar.set_tickcolors(['blue', 'green'])\n\n# Set the color bar tick sizes\ncbar.set_ticksizes([10, 10])\n\n# Set the color bar tick widths\ncbar.set_tickwidths([1, 1])\n\n# Set the color bar tick styles\ncbar.set_tickstyles(['solid', 'dashed'])\n\n# Set the color bar tick positions\ncbar.set_tickpositions([0.5, 1.5])\n\n# Set the color bar tick labels\ncbar.set_ticklabels(['Low', 'High'])\n\n# Set the color bar tick locations\ncbar.set_ticklocations([0.5, 1.5])\n\n# Set the color bar tick colors\ncbar.set_tickcolors(['blue', 'green'])\n\n# Set the color bar tick sizes\ncbar.set_ticksizes([10, 10])\n\n# Set the color bar tick widths\ncbar.set_tickwidths([1, 1])\n\n# Set the color bar tick styles\ncbar.set_tickstyles(['solid', 'dashed'])\n\n# Set the color bar tick positions\ncbar.set_tickpositions([0.5, 1.5])\n\n# Set the color bar tick labels\ncbar.set_ticklabels(['Low', 'High'])\n\n# Set the color bar tick locations\ncbar.set_ticklocations([0.5, 1.5])\n\n# Set the color bar tick colors\ncbar.set_tickcolors(['blue', 'green'])\n\n# Set the color bar tick sizes\ncbar.set_ticksizes([10, 10])\n\n# Set the color bar tick widths\ncbar.set_tickwidths([1, 1])\n\n# Set the color bar tick styles\ncbar.set_tickstyles(['solid', 'dashed'])\n\n# Set the color bar tick positions\ncbar.set_tickpositions([0.5, 1.5])\n\n# Set the color bar tick labels\ncbar.set_ticklabels(['Low', 'High'])\n\n# Set the color bar tick locations\ncbar.set_ticklocations([0.5, 1.5])\n\n# Set the color bar tick colors\ncbar.set_tickcolors(['blue', 'green'])\n\n# Set the color bar tick sizes\ncbar.set_ticksizes([10, 10])\n\n# Set the color bar tick widths\ncbar.set_tickwidths([1, 1])\n\n# Set the color bar tick styles\ncbar.set_tickstyles(['solid', 'dashed'])\n\n# Set the color bar tick positions\ncbar.set_tickpositions([0.5, 1.5])\n\n# Set the color bar tick labels\ncbar.set_ticklabels(['Low', 'High'])\n\n# Set the color bar tick locations\ncbar.set_ticklocations([0.5, 1.5])\n\n# Set the color bar tick colors\ncbar.set_tickcolors(['blue', 'green'])\n\n# Set the color bar tick sizes\ncbar.set_ticksizes([10, 10])\n\n# Set the color bar tick widths\ncbar.set_tickwidths([1, 1])\n\n# Set the color bar tick styles\ncbar.set_tickstyles(['solid', 'dashed'])\n\n# Set the color bar tick positions\ncbar.set_tickpositions([0.5, 1.5])\n\n# Set the color bar tick labels\ncbar.set_ticklabels(['Low', 'High'])\n\n# Set the color bar tick locations\ncbar.set_ticklocations([0.5, 1.5])\n\n# Set the color bar tick colors\ncbar.set_tickcolors(['blue', 'green'])\n\n# Set the color bar tick sizes\ncbar.set_ticksizes([10, 10])\n\n# Set the color bar tick widths\ncbar.set_tickwidths([1, 1])\n\n# Set the color bar tick styles\ncbar.set_tickstyles(['solid', 'dashed'])\n\n# Set the color bar tick positions\ncbar.set_tickpositions([0.5, 1.5])\n\n# Set the color bar tick labels\ncbar.set_ticklabels(['Low', 'High'])\n\n# Set the color bar tick locations\ncbar.set_ticklocations([0.5, 1.5])\n\n# Set the color bar tick colors\ncbar.set_tickcolors(['blue', 'green'])\n\n# Set the color bar tick sizes\ncbar.set_ticksizes([10, 10])\n\n# Set the color bar tick widths\ncbar.set_tickwidths([1, 1])\n\n# Set the color bar tick styles\ncbar.set_tickstyles(['solid', 'dashed'])\n\n# Set the color bar tick positions\ncbar.set_tickpositions([0.5, 1.5])\n\n# Set the color bar tick labels\ncbar.set_ticklabels(['Low', 'High'])\n\n# Set the color bar tick locations\ncbar.set_ticklocations([0.5, 1.5])\n\n# Set the color bar tick colors\ncbar.set_tickcolors(['blue', 'green'])\n\n# Set the color bar tick sizes\ncbar.set_ticksizes([10, 10])\n\n# Set the color bar tick widths\ncbar.set_tickwidths([1, 1])\n\n# Set the color bar tick styles\ncbar.set_tickstyles(['solid', 'dashed'])\n\n# Set the color bar tick positions\ncbar.set_tickpositions([0.5, 1.5])\n\n# Set the color bar tick labels\ncbar.set_ticklabels(['Low', 'High'])\n\n# Set the color bar tick locations\ncbar.set_ticklocations([0.5, 1.5])\n\n# Set the color bar tick colors\ncbar.set_tickcolors(['blue', 'green'])\n\n# Set the color bar tick sizes\ncbar.set_ticksizes([10, 10])\n\n# Set the color bar tick widths\ncbar.set_tickwidths([1, 1])\n\n# Set the color bar tick styles\ncbar.set_tickstyles(['solid', 'dashed'])\n\n# Set the color bar tick positions\ncbar.set_tickpositions([0.5, 1.5])\n\n# Set the color bar tick labels\ncbar.set_ticklabels(['Low', 'High'])\n\n# Set the color bar tick locations\ncbar.set_ticklocations([0.5, 1.5])\n\n# Set the color bar tick colors\ncbar.set_tickcolors(['blue', 'green'])\n\n# Set the color bar tick sizes\ncbar.set_ticksizes([10, 10])\n\n# Set the color bar tick widths\ncbar.set_tickwidths([1, 1])\n\n# Set the color bar tick styles\ncbar.set_tickstyles(['solid', 'dashed'])\n\n# Set the color bar tick positions\ncbar.set_tickpositions([0.5, 1.5])\n\n# Set the color bar tick labels\ncbar.set_ticklabels(['Low', 'High'])\n\n# Set the color bar tick locations\ncbar.set_ticklocations([0.5, 1.5])\n\n# Set the color bar tick colors\ncbar.set_tickcolors(['blue', 'green'])\n\n# Set the color bar tick sizes\ncbar.set_ticksizes([10, 10])\n\n# Set the color bar tick widths\ncbar.set_tickwidths([1, 1])\n\n# Set the color bar tick styles\ncbar.set_tickstyles(['solid', 'dashed'])\n\n# Set the color bar tick positions\ncbar.set_tickpositions([0.5, 1.5])\n\n# Set the color bar tick labels\ncbar.set_ticklabels(['Low', 'High'])\n\n# Set the color bar tick locations\ncbar.set_ticklocations([0.5, 1.5])\n\n# Set the color bar tick colors\ncbar.set_tickcolors(['blue', 'green'])\n\n# Set the color bar tick sizes\ncbar.set_ticksizes([10, 10])\n\n# Set the color bar tick widths\ncbar.set_tickwidths([1, 1])\n\n# Set the color bar tick styles\ncbar.set_tickstyles(['solid', 'dashed'])\n\n# Set the color bar tick positions\ncbar.set_tickpositions([0.5, 1.5])\n\n# Set the color bar tick labels\ncbar.set_ticklabels(['Low', 'High'])\n\n# Set the color bar tick locations\ncbar.set_ticklocations([0.5, 1.5])\n\n# Set the color bar tick colors\ncbar.set_tickcolors(['blue', 'green'])\n\n# Set the color bar tick sizes\ncbar.set_ticksizes([10, 10])\n\n# Set the color bar tick widths\ncbar.set_tickwidths([1, 1])\n\n# Set the color bar tick styles\ncbar.set_tickstyles(['solid', 'dashed'])\n\n# Set the color bar tick positions\ncbar.set_tickpositions([0.5, 1.5])\n\n# Set the color bar tick labels\ncbar.set_ticklabels(['Low', 'High'])\n\n# Set the color bar tick locations\ncbar.set_ticklocations([0.5, 1.5])\n\n# Set the color bar tick colors\ncbar.set_tickcolors(['blue', 'green'])\n\n# Set the color bar tick sizes\ncbar.set_ticksizes([10, 10])\n\n# Set the color bar tick widths\ncbar.set_tickwidths([1, 1])\n\n# Set the color bar tick styles\ncbar.set_tickstyles(['solid', 'dashed'])\n\n# Set the color bar tick positions\ncbar.set_tickpositions([0.5, 1.5])\n\n# Set the color bar tick labels\ncbar.set_ticklabels(['Low', 'High'])\n\n# Set the color bar tick locations\ncbar.set_ticklocations([0.5, 1.5])\n\n# Set the color bar tick colors\ncbar.set_tickcolors(['blue', 'green'])\n\n# Set the color bar tick sizes\ncbar.set_ticksizes([10, 10])\n\n# Set the color bar tick widths\ncbar.set_tickwidths([1, 1])\n\n# Set the color bar tick styles\ncbar.set_tickstyles(['solid', 'dashed'])\n\n# Set the color bar tick positions\ncbar.set_tickpositions([0.5, 1.5])\n\n# Set the color bar tick labels\ncbar.set_ticklabels(['Low', 'High'])\n\n# Set the color bar tick locations\ncbar.set_ticklocations([0.5, 1.5])\n\n# Set the color bar tick colors\ncbar.set_tickcolors(['blue', 'green'])\n\n# Set the color bar tick sizes\ncbar.set_ticksizes([10, 10])\n\n# Set the color bar tick widths\ncbar.set_tickwidths([1, 1])\n\n# Set the color bar tick styles\ncbar.set_tickstyles(['solid', 'dashed'])\n\n# Set the color bar tick positions\ncbar.set_tickpositions([0.5, 1.5])\n\n# Set the color bar tick labels\ncbar.set_ticklabels(['Low', 'High'])\n\n# Set the color bar tick locations\ncbar.set_ticklocations([0.5, 1.5])\n\n# Set the color bar tick colors\ncbar.set_tickcolors(['blue', 'green'])\n\n# Set the color bar tick sizes\ncbar.set_ticksizes([10, 10])\n\n# Set the color bar tick widths\ncbar.set_tickwidths([1, 1])\n\n# Set the color bar tick styles\ncbar.set_tickstyles(['solid', 'dashed'])\n\n# Set the color bar tick positions\ncbar.set_tickpositions([0.5, 1.5])\n\n# Set the color bar tick labels\ncbar.set_ticklabels(['Low', 'High'])\n\n# Set the color bar tick locations\ncbar.set_ticklocations([0.5, 1.5])\n\n# Set the color bar tick colors\ncbar.set_tickcolors(['blue', 'green'])\n\n# Set the color bar tick sizes\ncbar.set_ticksizes([10, 10])\n\n# Set the color bar tick widths\ncbar.set_tickwidths([1, 1])\n\n# Set the color bar tick styles\ncbar.set_tickstyles(['solid', 'dashed'])\n\n# Set the color bar tick positions\ncbar.set_tickpositions([0.5, 1.5])\n\n# Set the color bar tick labels\ncbar.set_ticklabels(['Low', 'High'])\n\n# Set the color bar tick locations\ncbar.set_ticklocations([0.5, 1.5])\n\n# Set the color bar tick colors\ncbar.set_tickcolors(['blue', 'green'])\n\n# Set the color bar tick sizes\ncbar.set_ticksizes([10, 10])\n\n# Set the color bar tick widths\ncbar.set_tickwidths([1, 1])\n\n# Set the color bar tick styles\ncbar.set_tickstyles(['solid', 'dashed'])\n\n# Set the color bar tick positions\ncbar.set_tickpositions([0.5, 1.5])\n\n# Set the color bar tick labels\ncbar.set_ticklabels(['Low', 'High'])\n\n# Set the color bar tick locations\ncbar.set_ticklocations([0.5, 1.5])\n\n# Set the color bar tick colors\ncbar.set_tickcolors(['blue', 'green'])\n\n# Set the color bar tick sizes\ncbar.set_ticksizes([10, 10])\n\n# Set the color bar tick widths\ncbar.set_tickwidths([1, 1])\n\n# Set the color bar tick styles\ncbar.set_tickstyles(['solid', 'dashed'])\n\n# Set the color bar tick positions\ncbar.set_tickpositions([0.5, 1.5])\n\n# Set the color bar tick labels\ncbar.set_ticklabels(['Low', 'High'])\n\n# Set the color bar tick locations\ncbar.set_ticklocations([0.5, 1.5])\n\n# Set the color bar tick colors\ncbar.set_tickcolors(['blue', 'green'])\n\n# Set the color bar tick sizes\ncbar.set_ticksizes([10, 10])\n\n# Set the color bar tick widths\ncbar.set_tickwidths([1, 1])\n\n# Set the color bar tick styles\ncbar.set_tickstyles(['solid', 'dashed'])\n\n# Set the color bar tick positions\ncbar.set_tickpositions([0.5, 1.5])\n\n# Set the color bar tick labels\ncbar.set_ticklabels(['Low', 'High'])\n\n# Set the color bar tick locations\ncbar.set_ticklocations([0.5, 1.5])\n\n# Set the color bar tick colors\ncbar.set_tickcolors(['blue', 'green'])\n\n# Set the color bar tick sizes\ncbar.set_ticksizes([10, 10])\n\n# Set the color bar tick widths\ncbar.set_tickwidths([1, 1])\n\n# Set the color bar tick styles\ncbar.set_tickstyles(['solid', 'dashed'])\n\n# Set the color bar tick positions\ncbar.set_tickpositions([0.5, 1.5])\n\n# Set the color bar tick labels\ncbar.set_ticklabels(['Low', 'High'])\n\n# Set the color bar tick locations\ncbar.set_ticklocations([0.5, 1.5])\n\n# Set the color bar tick colors\ncbar.set_tickcolors(['blue', 'green'])\n\n# Set the color bar tick sizes\ncbar.set_ticksizes([10, 10])\n\n# Set the color bar tick widths\ncbar.set_tickwidths([1, 1])\n\n# Set the color bar tick styles\ncbar.set_tickstyles(['solid', 'dashed'])\n\n# Set the color bar tick positions\ncbar.set_tickpositions([0.5, 1.5])\n\n# Set the color bar tick labels\ncbar.set_ticklabels(['Low', 'High'])\n\n# Set the color bar tick locations\ncbar.set_ticklocations([0.5, 1.5])\n\n# Set the color bar tick colors\ncbar.set_tickcolors(['blue', 'green'])\n\n# Set the color bar tick sizes\ncbar.set_ticksizes([10, 10])\n\n# Set the color bar tick widths\ncbar.set_tickwidths([1, 1])\n\n# Set the color bar tick styles\ncbar.set_tickstyles(['solid', 'dashed'])\n\n# Set the color bar tick positions\ncbar.set_tickpositions([0.5, 1.5])\n\n# Set the color bar tick labels\ncbar.set_ticklabels(['Low', 'High'])\n\n# Set the color bar tick locations\ncbar.set_ticklocations([0.5, 1.5])\n\n# Set the color bar tick colors\ncbar.set_tickcolors(['blue', 'green'])\n\n# Set the color bar tick sizes\ncbar.set_ticksizes([10, 10])\n\n# Set the color bar tick widths\ncbar.set_tickwidths([1, 1])\n\n# Set the color bar tick styles\ncbar.set_tickstyles(['solid', 'dashed'])\n\n# Set the color bar tick positions\ncbar.set_tickpositions([0.5, 1.5])\n\n# Set the color bar tick labels\ncbar.set_ticklabels(['Low', 'High'])\n\n# Set the color bar tick locations\ncbar.set_ticklocations([0.5, 1.5])\n\n# Set the color bar tick colors\ncbar.set_tickcolors(['blue', 'green'])\n\n# Set the color bar tick sizes\ncbar.set_ticksizes([10, 10])\n\n# Set the color bar tick widths\ncbar.set_tickwidths([1, 1])\n\n# Set the color bar tick styles\ncbar.set_tickstyles(['solid', 'dashed'])\n\n# Set the color bar tick positions\ncbar.set_tickpositions([0.5, 1.5])\n\n# Set the color bar tick labels\ncbar.set_ticklabels(['Low', 'High'])\n\n# Set the color bar tick locations\ncbar.set_ticklocations([0.5, 1.5])\n\n#"}
{"file": "dataset/ori_500/errorbar_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Set the background color of the plot\nax.set_facecolor('#F0F0F0')\n\n# Set the title of the plot\nax.set_title('Car Prices (valuation 40)')\n\n# Set the x-axis label\nax.set_xlabel('Car Models')\n\n# Set the y-axis label\nax.set_ylabel('Price')\n\n# Set the x-ticks\nax.set_xticks([0, 1, 2, 3])\n\n# Set the x-tick labels\nax.set_xticklabels(['GPT-4 Buyer', 'Claude-2.1 Buyer', 'Claude-2 Buyer', 'GPT-3.5 Buyer'])\n\n# Set the y-ticks\nax.set_yticks([-20, -10, 0, 10, 20])\n\n# Set the y-tick labels\nax.set_yticklabels(['-20', '-10', '0', '10', '20'])\n\n# Set the grid lines\nax.grid(True)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the"}
{"file": "dataset/ori_500/errorbar_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Set the title of the plot\nax.set_title('DNN x red (k=1)')\n\n# Create a bar chart with the data\nax.bar(['[m]', '[\u0394R]', '[\u0394R^-1]', '[none]'], [0.96, 0.86, 0.78, 0.7], color='blue')\n\n# Set the y-axis label\nax.set_ylabel('Accuracy')\n\n# Set the x-axis label\nax.set_xlabel('Classes')\n\n# Set the y-axis limits\nax.set_ylim(0.5, 0.9)\n\n# Set the x-axis limits\nax.set_xlim(-0.5, 3.5)\n\n# Set the grid lines\nax.grid(True)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Player Performance')\n\n# Set the x-axis label\nax.set_xlabel('Time (in minutes)')\n\n# Set the y-axis label\nax.set_ylabel('Posterior accuracy (\u0394 to no prompting)')\n\n# Set the x-axis limits\nax.set_xlim(0, 120)\n\n# Set the y-axis limits\nax.set_ylim(-5, 25)\n\n# Set the x-axis ticks\nax.set_xticks([0, 30, 60, 90, 120])\n\n# Set the y-axis ticks\nax.set_yticks([0, 5, 10, 15, 20, 25])\n\n# Set the x-axis tick labels\nax.set_xticklabels(['0', '30', '60', '90', '120'])\n\n# Set the y-axis tick labels\nax.set_yticklabels(['-5', '0', '5', '10', '15', '20', '25'])\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_color('none')\nax.spines['right'].set_color('none')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the text\nax.set_facecolor('black')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_color('none')\nax.spines['right'].set_color('none')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the text\nax.set_facecolor('black')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_color('none')\nax.spines['right'].set_color('none')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the text\nax.set_facecolor('black')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_color('none')\nax.spines['right'].set_color('none')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the text\nax.set_facecolor('black')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_color('none')\nax.spines['right'].set_color('none')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the text\nax.set_facecolor('black')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_color('none')\nax.spines['right'].set_color('none')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the text\nax.set_facecolor('black')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_color('none')\nax.spines['right'].set_color('none')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the text\nax.set_facecolor('black')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_color('none')\nax.spines['right'].set_color('none')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the text\nax.set_facecolor('black')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_color('none')\nax.spines['right'].set_color('none')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the text\nax.set_facecolor('black')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_color('none')\nax.spines['right'].set_color('none')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the text\nax.set_facecolor('black')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_color('none')\nax.spines['right'].set_color('none')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the text\nax.set_facecolor('black')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_color('none')\nax.spines['right'].set_color('none')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the text\nax.set_facecolor('black')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_color('none')\nax.spines['right'].set_color('none')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the text\nax.set_facecolor('black')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_color('none')\nax.spines['right'].set_color('none')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the text\nax.set_facecolor('black')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_color('none')\nax.spines['right'].set_color('none')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the text\nax.set_facecolor('black')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_color('none')\nax.spines['right'].set_color('none')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the text\nax.set_facecolor('black')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_color('none')\nax.spines['right'].set_color('none')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the text\nax.set_facecolor('black')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_color('none')\nax.spines['right'].set_color('none')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the text\nax.set_facecolor('black')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_color('none')\nax.spines['right'].set_color('none')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the text\nax.set_facecolor('black')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_color('none')\nax.spines['right'].set_color('none')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the text\nax.set_facecolor('black')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_color('none')\nax.spines['right'].set_color('none')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the text\nax.set_facecolor('black')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_color('none')\nax.spines['right'].set_color('none')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the text\nax.set_facecolor('black')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\n"}
{"file": "dataset/ori_500/errorbar_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 3.0))\n\n# Set the title of the graph\nax.set_title('Performance Comparison')\n\n# Set the labels for the x-axis and y-axis\nax.set_xlabel('Time')\nax.set_ylabel('Performance')\n\n# Create a bar chart with the data\nax.bar(['a', 'b', 'c'], [85, 90, 88], color='blue')\n\n# Add a legend to the graph\nax.legend(['Performance'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_16.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\nax.set_title('FashionMNIST (NEURAL)')\nax.set_xlabel('Hyperparameters')\nax.set_ylabel('Metric')\n\n# Define the data for the plots\nx = ['128/0.5/0.0001', '128/0.1/0.0001', '256/0.1/0.0001', '256/0.3/0.0001', '256/0.5/0.0001', '64/0.1/0.0001', '64/0.3/0.0001', '64/0.5/0.0001']\ny = [0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2]\n\n# Create the plots\nfor i in range(len(x)):\n    ax.plot([x[i], x[i]], [0, y[i]], 'k-')\n\n# Set the limits of the axes\nax.set_xlim(0, 1)\nax.set_ylim(0, 1)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_17.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Set the title of the graph\nax.set_title('Higher Education Enrollment Rate')\n\n# Create a bar chart with the data\nax.bar(['Japan', 'Brazil', 'India', 'Germany', 'United States'], [25, 18, 12, 14, 35], color='blue')\n\n# Set the x-axis label\nax.set_xlabel('Country')\n\n# Set the y-axis label\nax.set_ylabel('Enrollment Rate')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_18.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(6.0, 9.0))\n\n# Set the title of the plot\nax.set_title('Annual Carbon Dioxide Emissions')\n\n# Create a bar chart with the data\nax.bar(['Africa', 'South America', 'North America', 'Asia', 'Europe'], [1200, 1800, 5000, 3200, 10400], color='blue')\n\n# Set the x-axis label\nax.set_xlabel('Region')\n\n# Set the y-axis label\nax.set_ylabel('Emissions (in millions of metric tons)')\n\n# Create a second subplot for the forest coverage rate\nax2 = fig.add_subplot(212)\n\n# Set the title of the second subplot\nax2.set_title('Forest Coverage Rate')\n\n# Create a bar chart with the data\nax2.bar(['Africa', 'South America', 'North America', 'Asia', 'Europe'], [21, 34, 25, 28, 38], color='green')\n\n# Set the x-axis label\nax2.set_xlabel('Region')\n\n# Set the y-axis label\nax2.set_ylabel('Coverage (%)')\n\n# Create a third subplot for the renewable energy usage\nax3 = fig.add_subplot(212)\n\n# Set the title of the third subplot\nax3.set_title('Renewable Energy Usage')\n\n# Create a bar chart with the data\nax3.bar(['Africa', 'South America', 'North America', 'Asia', 'Europe'], [18, 28, 25, 34, 38], color='orange')\n\n# Set the x-axis label\nax3.set_xlabel('Region')\n\n# Set the y-axis label\nax3.set_ylabel('Usage (%)')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_19.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 9.0))\n\n# Set the title of the graph\nax.set_title('U.S. Crime Rate by State')\n\n# Create a bar chart with the data\nax.bar(['Delaware', 'Florida', 'Georgia', 'Hawaii', 'Idaho'], [50, 60, 70, 80, 90], color='purple')\n\n# Set the x-axis label\nax.set_xlabel('State')\n\n# Set the y-axis label\nax.set_ylabel('Crime Rate')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Set the title of the plot\nax.set_title('Protocol')\n\n# Create a rectangle for the logo\nlogo = plt.Rectangle((0.45, 0.9), 0.1, 0.1, color='blue')\nax.add_patch(logo)\n\n# Create a rectangle for the navigation bar\nnav_bar = plt.Rectangle((0.05, 0.85), 0.9, 0.1, color='silver')\nax.add_patch(nav_bar)\n\n# Add text to the navigation bar\nax.text(0.25, 0.95, 'Expert', fontsize=12)\nax.text(0.35, 0.95, 'Blind', fontsize=12)\nax.text(0.45, 0.95, 'Consultancy', fontsize=12)\nax.text(0.55, 0.95, 'Debate', fontsize=12)\nax.text(0.65, 0.95, 'Interactive Consultancy', fontsize=12)\nax.text(0.75, 0.95, 'Interactive Debate', fontsize=12)\n\n# Create a rectangle for the graph\ngraph = plt.Rectangle((0.05, 0.75), 0.9, 0.2, color='silver')\nax.add_patch(graph)\n\n# Add text to the graph\nax.text(0.25, 0.85, 'GPT-3.5-Turbo', fontsize=12)\nax.text(0.35, 0.85, 'Claude 2.1', fontsize=12)\nax.text(0.45, 0.85, 'GPT-4-Turbo', fontsize=12)\nax.text(0.55, 0.85, 'Human', fontsize=12)\n\n# Create a rectangle for the judge accuracy\njudge_acc = plt.Rectangle((0.05, 0.65), 0.9, 0.2, color='silver')\nax.add_patch(judge_acc)\n\n# Add text to the judge accuracy\nax.text(0.25, 0.75, 'Judge Accuracy (%)', fontsize=12)\n\n# Create a rectangle for the judge performance\njudge_perf = plt.Rectangle((0.05, 0.55), 0.9, 0.2, color='silver')\nax.add_patch(judge_perf)\n\n# Add text to the judge performance\nax.text(0.25, 0.65, 'Judge Performance (%)', fontsize=12)\n\n# Create a rectangle for the judge reliability\njudge_reli = plt.Rectangle((0.05, 0.45), 0.9, 0.2, color='silver')\nax.add_patch(judge_reli)\n\n# Add text to the judge reliability\nax.text(0.25, 0.55, 'Judge Reliability (%)', fontsize=12)\n\n# Create a rectangle for the judge fairness\njudge_fair = plt.Rectangle((0.05, 0.35), 0.9, 0.2, color='silver')\nax.add_patch(judge_fair)\n\n# Add text to the judge fairness\nax.text(0.25, 0.45, 'Judge Fairness (%)', fontsize=12)\n\n# Create a rectangle for the judge expertise\njudge_expert = plt.Rectangle((0.05, 0.25), 0.9, 0.2, color='silver')\nax.add_patch(judge_expert)\n\n# Add text to the judge expertise\nax.text(0.25, 0.35, 'Judge Expertise (%)', fontsize=12)\n\n# Create a rectangle for the judge trustworthiness\njudge_trust = plt.Rectangle((0.05, 0.15), 0.9, 0.2, color='silver')\nax.add_patch(judge_trust)\n\n# Add text to the judge trustworthiness\nax.text(0.25, 0.25, 'Judge Trustworthiness (%)', fontsize=12)\n\n# Create a rectangle for the judge transparency\njudge_trans = plt.Rectangle((0.05, 0.05), 0.9, 0.2, color='silver')\nax.add_patch(judge_trans)\n\n# Add text to the judge transparency\nax.text(0.25, 0.15, 'Judge Transparency (%)', fontsize=12)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_20.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis for the first plot\nfig, ax = plt.subplots(figsize=(10, 5))\nax.set_title('Annual Average Temperature')\nax.set_xlabel('City')\nax.set_ylabel('Temperature (\u00b0C)')\nax.bar(['New York', 'London', 'Beijing', 'Tokyo'], [12, 14, 16, 18], color='blue')\n\n# Create a figure and axis for the second plot\nfig, ax = plt.subplots(figsize=(10, 5))\nax.set_title('Annual Rainfall')\nax.set_xlabel('City')\nax.set_ylabel('Rainfall (mm)')\nax.bar(['New York', 'London', 'Beijing', 'Tokyo'], [1000, 1200, 1300, 1400], color='green')\n\n# Create a figure and axis for the third plot\nfig, ax = plt.subplots(figsize=(10, 5))\nax.set_title('Wind Speed')\nax.set_xlabel('City')\nax.set_ylabel('Speed (m/s)')\nax.bar(['New York', 'London', 'Beijing', 'Tokyo'], [5, 7, 9, 11], color='cyan')\n\n# Create a figure and axis for the fourth plot\nfig, ax = plt.subplots(figsize=(10, 5))\nax.set_title('Air Quality Index')\nax.set_xlabel('City')\nax.set_ylabel('AQI')\nax.bar(['New York', 'London', 'Beijing', 'Tokyo'], [50, 70, 90, 110], color='purple')\n\n# Display the plots\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_21.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Set the title of the graph\nax.set_title('Total Energy Consumption by Country')\n\n# Create a bar chart\nax.bar(['Germany', 'China', 'USA', 'India', 'Brazil'], [2000, 3000, 4000, 5000, 6000], color='blue')\n\n# Set the x-axis label\nax.set_xlabel('Country')\n\n# Set the y-axis label\nax.set_ylabel('Energy Consumption (Petajoules)')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_22.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nmodels = ['Standard Model', 'Advanced Model', 'Optimal Model']\nratings = [0.30, 0.25, 0.20]\ncolors = ['red', 'green', 'blue']\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Plot the data\nax.bar(models, ratings, color=colors)\n\n# Set the title and labels\nax.set_title('Energy Efficiency Ratings by Appliance Model')\nax.set_xlabel('Appliance Model')\nax.set_ylabel('Energy Efficiency Rating')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_23.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Set the title of the plot\nax.set_title('Energy Assessment Entity')\n\n# Create a bar chart with the data\nax.bar(['Wind', 'Solar', 'Hydro', 'Nuclear'], [90, 80, 70, 60], color='blue')\nax.bar(['Wind', 'Solar', 'Hydro', 'Nuclear'], [80, 70, 60, 50], color='green')\nax.bar(['Wind', 'Solar', 'Hydro', 'Nuclear'], [70, 60, 50, 40], color='purple')\n\n# Add a horizontal line at y=50\nax.axhline(y=50, color='black', linestyle='-')\n\n# Add a vertical line at x=2\nax.axvline(x=2, color='black', linestyle='-')\n\n# Add a rectangle at (x=1, y=30) with width=2 and height=10\nax.add_patch(plt.Rectangle((1, 30), 2, 10, color='red'))\n\n# Add a text annotation at (x=1, y=40)\nax.text(1, 40, 'Efficiency and Cost Scores', fontsize=12)\n\n# Add a legend\nax.legend(['Installation Efficiency', 'Maintenance Costs', 'Operational Efficiency', 'Environmental Impact', 'Safety Standards'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_24.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Set the title of the plot\nax.set_title('Educational Metrics by Region')\n\n# Define the regions and their metrics\nregions = ['North America', 'Europe', 'Asia', 'South America', 'Africa', 'Australia', 'Central America', 'Middle East', 'Southeast Asia', 'Scandinavia']\nmetrics = [95, 85, 75, 65, 55, 45, 35, 25, 15, 5]\n\n# Create a bar chart\nax.bar(regions, metrics, color='lightblue')\n\n# Add a horizontal line for the average metric\nax.axhline(y=60, color='black', linestyle='-')\n\n# Add a legend\nlegend_elements = [plt.Line2D([0], [0], marker='o', color='w', label='High School Graduation', markerfacecolor='b', markersize=10),\n                  plt.Line2D([0], [0], marker='o', color='w', label='Higher Education Enrollment', markerfacecolor='y', markersize=10)]\nax.legend(handles=legend_elements)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_25.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nbrands = ['iPhone 13', 'Samsung S21', 'Google Pixel 6', 'OnePlus 9']\nrecalls = [46.3, 30.1, 57.9, 34.0]\nmisleading = [34.0, 55.0, 53.8, 20.0]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Plot the data\nax.bar(brands, recalls, color='cyan')\nax.bar(brands, misleading, bottom=recalls, color='orange')\n\n# Set the title and labels\nax.set_title('Comparison of Recall Rates Across Products')\nax.set_xlabel('Product')\nax.set_ylabel('Recall Rate (%)')\n\n# Add a legend\nax.legend(['Truthful Recall', 'Misleading Recall'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_26.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the bar chart\ncategories = ['Support', 'Delivery', 'Product Quality', 'Returns', 'Pricing', 'Website Usability', 'Checkout Process']\nsatisfaction_scores = [15, 18, 20, 12, 17, 10, 8]\ncomplaint_rates = [75, 82, 78, 85, 80, 88, 90]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the bar chart\nax.bar(categories, satisfaction_scores, color='blue')\n\n# Add a title and labels\nax.set_title('Customer Satisfaction Scores')\nax.set_xlabel('Categories')\nax.set_ylabel('Satisfaction Score')\n\n# Draw a line between the two plots\nplt.axvline(x=3.5, color='black')\n\n# Plot the second bar chart\nax2 = ax.twinx()\nax2.bar(categories, complaint_rates, color='red')\n\n# Add a title and labels\nax2.set_title('Complaint Rates')\nax2.set_ylabel('Complaint Rate')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_27.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the pie charts\nsupport_data = [75, 25]\ndelivery_data = [82, 18]\nproduct_quality_data = [78, 22]\nreturns_data = [85, 15]\npricing_data = [80, 20]\nwebsite_usability_data = [88, 12]\ncheckout_process_data = [90, 10]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Plot the pie charts\nax.pie(support_data, labels=['Agree', 'Disagree'], autopct='%1.1f%%', startangle=90)\nax.pie(delivery_data, labels=['Agree', 'Disagree'], autopct='%1.1f%%', startangle=90)\nax.pie(product_quality_data, labels=['Agree', 'Disagree'], autopct='%1.1f%%', startangle=90)\nax.pie(returns_data, labels=['Agree', 'Disagree'], autopct='%1.1f%%', startangle=90)\nax.pie(pricing_data, labels=['Agree', 'Disagree'], autopct='%1.1f%%', startangle=90)\nax.pie(website_usability_data, labels=['Agree', 'Disagree'], autopct='%1.1f%%', startangle=90)\nax.pie(checkout_process_data, labels=['Agree', 'Disagree'], autopct='%1.1f%%', startangle=90)\n\n# Set the title of the plot\nax.set_title('Customer Satisfaction')\n\n# Set the x-axis labels\nax.set_xlabel('Customer Satisfaction')\n\n# Set the y-axis labels\nax.set_ylabel('Customer Satisfaction')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_28.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Set the x-axis limits\nax.set_xlim(-0.15, 0.25)\n\n# Set the y-axis limits\nax.set_ylim(0, 1.25)\n\n# Set the x-axis ticks\nax.set_xticks([0, 0.25, 0.5, 0.75, 1])\n\n# Set the y-axis ticks\nax.set_yticks([0, 0.25, 0.5, 0.75, 1])\n\n# Set the x-axis labels\nax.set_xticklabels(['Watering Frequency', 'Planting Density', 'Plant Variety', 'CO2 Levels', 'Pesticides'])\n\n# Set the y-axis labels\nax.set_yticklabels(['Impact on Plant Growth (\u0394 to control)'])\n\n# Set the title of the plot\nax.set_title('Impact of Environmental Factors on Plant Growth')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the text\nax.text(0.5, 0.5, '0.00', ha='center', va='center', fontsize=12)\nax.text(0.5, 0.75, '0.25', ha='center', va='center', fontsize=12)\nax.text(0.5, 1, '0.50', ha='center', va='center', fontsize=12)\nax.text(0.5, 1.25, '0.75', ha='center', va='center', fontsize=12)\nax.text(0.5, 1.5, '1.00', ha='center', va='center', fontsize=12)\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.25, 0.25), 0.25, 0.25, color='lightgreen'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.5, 0.5), 0.25, 0.25, color='lightblue'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.75, 0.75), 0.25, 0.25, color='lightgrey'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((1, 1), 0.25, 0.25, color='lightyellow'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.25, 0.5), 0.25, 0.25, color='lightpink'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.5, 0.75), 0.25, 0.25, color='lightbrown'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.75, 1), 0.25, 0.25, color='lightpurple'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((1, 1.25), 0.25, 0.25, color='lightorange'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.25, 0.75), 0.25, 0.25, color='lightcyan'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.5, 1), 0.25, 0.25, color='lightmagenta'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.75, 1.25), 0.25, 0.25, color='lightred'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((1, 1.5), 0.25, 0.25, color='lightgreen'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.25, 1), 0.25, 0.25, color='lightblue'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.5, 1.25), 0.25, 0.25, color='lightgrey'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.75, 1.5), 0.25, 0.25, color='lightyellow'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((1, 1.75), 0.25, 0.25, color='lightpink'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.25, 1.25), 0.25, 0.25, color='lightbrown'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.5, 1.5), 0.25, 0.25, color='lightpurple'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.75, 1.75), 0.25, 0.25, color='lightorange'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((1, 2), 0.25, 0.25, color='lightcyan'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.25, 1.5), 0.25, 0.25, color='lightmagenta'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.5, 1.75), 0.25, 0.25, color='lightred'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.75, 2), 0.25, 0.25, color='lightgreen'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((1, 2.25), 0.25, 0.25, color='lightblue'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.25, 1.75), 0.25, 0.25, color='lightgrey'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.5, 2), 0.25, 0.25, color='lightyellow'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.75, 2.25), 0.25, 0.25, color='lightpink'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((1, 2.5), 0.25, 0.25, color='lightbrown'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.25, 2), 0.25, 0.25, color='lightpurple'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.5, 2.25), 0.25, 0.25, color='lightorange'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.75, 2.5), 0.25, 0.25, color='lightcyan'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((1, 2.75), 0.25, 0.25, color='lightmagenta'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.25, 2.25), 0.25, 0.25, color='lightred'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.5, 2.5), 0.25, 0.25, color='lightgreen'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.75, 2.75), 0.25, 0.25, color='lightblue'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((1, 3), 0.25, 0.25, color='lightgrey'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.25, 2.5), 0.25, 0.25, color='lightyellow'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.5, 2.75), 0.25, 0.25, color='lightpink'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.75, 3), 0.25, 0.25, color='lightbrown'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((1, 3.25), 0.25, 0.25, color='lightpurple'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.25, 2.75), 0.25, 0.25, color='lightorange'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.5, 3), 0.25, 0.25, color='lightcyan'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.75, 3.25), 0.25, 0.25, color='lightmagenta'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((1, 3.5), 0.25, 0.25, color='lightred'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.25, 3), 0.25, 0.25, color='lightgreen'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.5, 3.25), 0.25, 0.25, color='lightblue'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.75, 3.5), 0.25, 0.25, color='lightgrey'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((1, 3.75), 0.25, 0.25, color='lightyellow'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.25, 3.25), 0.25, 0.25, color='lightpink'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.5, 3.5), 0.25, 0.25, color='lightbrown'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.75, 3.75), 0.25, 0.25, color='lightpurple'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((1, 4), 0.25, 0.25, color='lightorange'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.25, 3.5), 0.25, 0.25, color='lightcyan'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.5, 3.75), 0.25, 0.25, color='lightmagenta'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.75, 4), 0.25, 0.25, color='lightred'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((1, 4.25), 0.25, 0.25, color='lightgreen'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.25, 3.75), 0.25, 0.25, color='lightblue'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.5, 4), 0.25, 0.25, color='lightgrey'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.75, 4.25), 0.25, 0.25, color='lightyellow'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((1, 4.5), 0.25, 0.25, color='lightpink'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.25, 4), 0.25, 0.25, color='lightbrown'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.5, 4.25), 0.25, 0.25, color='lightpurple'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.75, 4.5), 0.25, 0.25, color='lightorange'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((1, 4.75), 0.25, 0.25, color='lightcyan'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.25, 4.25), 0.25, 0.25, color='lightmagenta'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.5, 4.5), 0.25, 0.25, color='lightred'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.75, 4.75), 0.25, 0.25, color='lightgreen'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((1, 5), 0.25, 0.25, color='lightblue'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.25, 4.5), 0.25, 0.25, color='lightgrey'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.5, 4.75), 0.25, 0.25, color='lightyellow'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.75, 5), 0.25, 0.25, color='lightpink'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((1, 5.25), 0.25, 0.25, color='lightbrown'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.25, 4.75), 0.25, 0.25, color='lightpurple'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.5, 5), 0.25, 0.25, color='lightorange'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.75, 5.25), 0.25, 0.25, color='lightcyan'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((1, 5.5), 0.25, 0.25, color='lightmagenta'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.25, 5), 0.25, 0.25, color='lightred'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.5, 5.25), 0.25, 0.25, color='lightgreen'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.75, 5.5), 0.25, 0.25, color='lightblue'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((1, 5.75), 0.25, 0.25, color='lightgrey'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.25, 5.25), 0.25, 0.25, color='lightyellow'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.5, 5.5), 0.25, 0.25, color='lightpink'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.75, 5.75), 0.25, 0.25, color='lightbrown'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((1, 6), 0.25, 0.25, color='lightpurple'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.25, 5.5), 0.25, 0.25, color='lightorange'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.5, 5.75), 0.25, 0.25, color='lightcyan'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.75, 6), 0.25, 0.25, color='lightmagenta'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((1, 6.25), 0.25, 0.25, color='lightred'))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.25, 5.75), 0.25, 0.25, color='lightgreen'))\n\n# Set the color of the rectangle"}
{"file": "dataset/ori_500/errorbar_29.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\ncities = ['New York', 'Los Angeles', 'Chicago']\nmetrics = ['Traffic Volume', 'Public Transit', 'Accident Rate']\nvalues = [[250, 230, 220], [220, 210, 200], [190, 180, 170]]\n\n# Create a figure and a set of subplots\nfig, axs = plt.subplots(1, 3, figsize=(10, 4))\n\n# Plot each city's metrics\nfor i, city in enumerate(cities):\n    axs[i].bar(metrics, values[i])\n    axs[i].set_title(city)\n    axs[i].set_ylim([0, 275])\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(10.0, 10.0))\n\n# Set the title of the plot\nax.set_title('FashionMNIST (NEURAL)')\n\n# Set the x-axis label\nax.set_xlabel('Metric')\n\n# Set the y-axis label\nax.set_ylabel('Value')\n\n# Set the x-axis limits\nax.set_xlim(0, 1)\n\n# Set the y-axis limits\nax.set_ylim(0, 1)\n\n# Set the x-axis ticks\nax.set_xticks([0, 0.2, 0.4, 0.6, 0.8, 1])\n\n# Set the y-axis ticks\nax.set_yticks([0, 0.2, 0.4, 0.6, 0.8, 1])\n\n# Set the x-axis tick labels\nax.set_xticklabels(['0', '0.2', '0.4', '0.6', '0.8', '1'])\n\n# Set the y-axis tick labels\nax.set_yticklabels(['0', '0.2', '0.4', '0.6', '0.8', '1'])\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top x-axis line\nax.spines['top'].set_color('black')\n\n# Set the color of the right y-axis line\nax.spines['right'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the x-axis ticks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis ticks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis labels\nax.tick_params(axis='x', labelcolor='black')\n\n# Set the color of the y-axis labels\nax.tick_params(axis='y', labelcolor='black')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(True, color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(True, color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelcolor='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='black')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(True, color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(True, color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelcolor='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='black')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(True, color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(True, color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelcolor='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='black')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(True, color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(True, color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelcolor='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='black')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(True, color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(True, color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelcolor='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='black')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(True, color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(True, color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelcolor='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='black')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(True, color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(True, color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelcolor='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='black')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(True, color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(True, color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelcolor='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='black')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(True, color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(True, color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelcolor='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='black')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(True, color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(True, color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelcolor='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='black')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(True, color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(True, color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelcolor='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='black')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(True, color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(True, color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelcolor='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='black')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(True, color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(True, color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelcolor='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='black')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(True, color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(True, color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelcolor='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='black')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(True, color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(True, color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelcolor='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='black')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(True, color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(True, color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelcolor='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='black')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(True, color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(True, color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelcolor='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='black')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(True, color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(True, color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelcolor='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='black')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(True, color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(True, color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelcolor='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='black')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(True, color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(True, color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelcolor='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='black')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(True, color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(True, color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelcolor='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='black')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(True, color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(True, color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelcolor='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='black')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(True, color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(True, color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelcolor='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='black')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(True, color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(True, color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelcolor='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='black')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(True, color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(True, color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelcolor='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='black')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(True, color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(True, color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelcolor='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='black')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(True, color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(True, color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelcolor='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='black')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(True, color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(True, color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelcolor='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='black')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(True, color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(True, color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelcolor='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='black')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(True, color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(True, color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelcolor='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='black')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(True, color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(True, color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelcolor='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='black')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(True, color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(True, color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelcolor='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='black')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(True, color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(True, color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelcolor='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='black')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(True, color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(True, color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelcolor='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='black')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(True, color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(True, color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of"}
{"file": "dataset/ori_500/errorbar_30.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Set the title of the plot\nax.set_title('Environmental Impact Scores Across Cities')\n\n# Set the x-axis label\nax.set_xlabel('Cities')\n\n# Set the y-axis label\nax.set_ylabel('Environmental Impact Score')\n\n# Define the data for the bar chart\ncities = ['City A', 'City B', 'City C', 'City D']\nscores = [2.3, 1.7, 3.4, 2.9]\n\n# Create a bar chart\nax.bar(cities, scores, color='green')\n\n# Add a watermark\nax.text(0.5, 0.5, 'Water Quality Score', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, color='green')\n\n# Add a legend\nax.legend(['Air Quality Score'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\nroles = ['Wererewolf', 'Seer', 'Witch', 'Hunter', 'Villager']\ndurations = [84.97, 102.67, 78.22, 85.17, 90]\ntokens = [449.33, 780.67, 612.99, 547.39, 618.52]\n\n# Create a figure and a set of subplots\nfig, axs = plt.subplots(1, 2, figsize=(10, 4))\n\n# Plot the first subplot\naxs[0].bar(roles, durations, color='skyblue')\naxs[0].set_title('a) Speak duration of roles')\naxs[0].set_xlabel('Role')\naxs[0].set_ylabel('Duration (s)')\naxs[0].set_ylim([0, 120])\n\n# Plot the second subplot\naxs[1].bar(roles, tokens, color='lightgreen')\naxs[1].set_title('b) Speak tokens of roles')\naxs[1].set_xlabel('Role')\naxs[1].set_ylabel('Tokens')\naxs[1].set_ylim([0, 800])\n\n# Add a horizontal line at the top of each bar\nfor ax in axs:\n    for i, v in enumerate(tokens):\n        ax.text(i, v + 10, str(v), ha='center', va='bottom')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nx = [5, 10, 20, 30, 40, 50]\ny = [63.77, 64.17, 64.31, 64.98, 65.82, 65.78]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 7))\n\n# Plot the data\nax.plot(x, y, 'o-')\n\n# Set the title and labels\nax.set_title('Size of Data for Training and Validation')\nax.set_xlabel('Size of Data (in samples)')\nax.set_ylabel('True+info (%)')\n\n# Add rectangles for each data point\nfor i in range(len(x)):\n    ax.add_patch(plt.Rectangle((x[i], 0), 1, 1, color='blue'))\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Set the title of the plot\nax.set_title('Out-of-domain accuracy')\n\n# Create a bar chart with the data\nax.bar(['all', 'arg.causal', 'test.0', 'test.1', 'test.2', 'test.3', 'test.4', 'test.5', 'test.6', 'const'], [0.89, 0.87, 0.86, 0.85, 0.84, 0.83, 0.82, 0.81, 0.80, 0.79], color='blue')\n\n# Set the x-axis label\nax.set_xlabel('Test cases')\n\n# Set the y-axis label\nax.set_ylabel('Accuracy')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Mini Crosswords Performance')\n\n# Create a bar chart with the data\nax.bar(['Final Distribution with GPT-4-Turbo', 'Final Distribution with GPT-3.5-Turbo', '0.125 Parameter-Valued Distribution', 'Initial Distribution', 'Best-of-Three'], [0.7, 0.8, 0.6, 0.5, 0.4], color='skyblue')\n\n# Add a vertical line at the point where the best-of-three distribution is located\nax.axvline(x=4, color='red', linestyle='-')\n\n# Add a horizontal line at the point where the best-of-three distribution is located\nax.axhline(y=0.6, color='black', linestyle='-')\n\n# Add a rectangle to highlight the best-of-three distribution\nax.add_patch(plt.Rectangle((3.5, 0.5), 0.5, 0.1, color='red'))\n\n# Add a text box to display the time taken for the best-of-three distribution\nax.text(3.5, 0.5, 'ToT (0.675)', fontsize=12, verticalalignment='center', bbox=dict(facecolor='white', alpha=0.5))\n\n# Set the x-axis limits\nax.set_xlim([0, 5])\n\n# Set the y-axis limits\nax.set_ylim([0, 1])\n\n# Set the x-axis tick labels\nax.set_xticks([0, 1, 2, 3, 4, 5])\nax.set_xticklabels(['Final Distribution with GPT-4-Turbo', 'Final Distribution with GPT-3.5-Turbo', '0.125 Parameter-Valued Distribution', 'Initial Distribution', 'Best-of-Three', ''])\n\n# Set the y-axis tick labels\nax.set_yticks([0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1])\nax.set_yticklabels(['0.0', '0.1', '0.2', '0.3', '0.4', '0.5', '0.6', '0.7', '0.8', '0.9', '1.0'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 3.0))\n\n# Set the background color of the plot\nax.set_facecolor('lightgrey')\n\n# Define the data for the bars\nbars = ['BERT', 'RoBERTa', 'DistilBERT', 'XLNet', 'Electra', 'Albert', 'BART', 'DeBERTa', 'DeBERTaV2', 'Llama2']\naccuracies = [55, 60, 58, 62, 57, 59, 64, 61, 56, 53]\nlabels = ['Ground-truth labels', 'Weak labels']\n\n# Create the bar chart\nax.bar(bars, accuracies, color='blue')\n\n# Add the labels\nfor i, v in enumerate(accuracies):\n    ax.text(i, v + 1, str(v), ha='center', va='bottom')\n\n# Add the legend\nax.legend(labels)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Set the title of the chart\nax.set_title('Your Chart Title Here')\n\n# Set the x-axis label\nax.set_xlabel('A')\n\n# Set the y-axis label\nax.set_ylabel('B')\n\n# Set the x-axis limits\nax.set_xlim(-3.5, 1.5)\n\n# Set the y-axis limits\nax.set_ylim(-2.5, 2.5)\n\n# Set the x-axis ticks\nax.set_xticks([-3.5, -3.0, -2.5, -2.0, -1.5, -1.0, -0.5, 0.0, 0.5, 1.0, 1.5])\n\n# Set the y-axis ticks\nax.set_yticks([-2.5, -2.0, -1.5, -1.0, -0.5, 0.0, 0.5, 1.0, 1.5, 2.0, 2.5])\n\n# Set the x-axis tick labels\nax.set_xticklabels(['-3.5', '-3.0', '-2.5', '-2.0', '-1.5', '-1.0', '-0.5', '0.0', '0.5', '1.0', '1.5'])\n\n# Set the y-axis tick labels\nax.set_yticklabels(['-2.5', '-2.0', '-1.5', '-1.0', '-0.5', '0.0', '0.5', '1.0', '1.5', '2.0', '2.5'])\n\n# Set the color of the x-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('#E6E6FA')\n\n# Set the color of the text\nax.set_facecolor('#000000')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='#000000')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='#000000')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('#E6E6FA')\n\n# Set the color of the text\nax.set_facecolor('#000000')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='#000000')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='#000000')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('#E6E6FA')\n\n# Set the color of the text\nax.set_facecolor('#000000')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='#000000')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='#000000')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('#E6E6FA')\n\n# Set the color of the text\nax.set_facecolor('#000000')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='#000000')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='#000000')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('#E6E6FA')\n\n# Set the color of the text\nax.set_facecolor('#000000')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='#000000')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='#000000')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('#E6E6FA')\n\n# Set the color of the text\nax.set_facecolor('#000000')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='#000000')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='#000000')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('#E6E6FA')\n\n# Set the color of the text\nax.set_facecolor('#000000')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='#000000')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='#000000')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('#E6E6FA')\n\n# Set the color of the text\nax.set_facecolor('#000000')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='#000000')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='#000000')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('#E6E6FA')\n\n# Set the color of the text\nax.set_facecolor('#000000')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='#000000')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='#000000')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('#E6E6FA')\n\n# Set the color of the text\nax.set_facecolor('#000000')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='#000000')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='#000000')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('#E6E6FA')\n\n# Set the color of the text\nax.set_facecolor('#000000')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='#000000')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='#000000')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('#E6E6FA')\n\n# Set the color of the text\nax.set_facecolor('#000000')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='#000000')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='#000000')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('#E6E6FA')\n\n# Set the color of the text\nax.set_facecolor('#000000')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='#000000')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='#000000')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('#E6E6FA')\n\n# Set the color of the text\nax.set_facecolor('#000000')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='#000000')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='#000000')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('#E6E6FA')\n\n# Set the color of the text\nax.set_facecolor('#000000')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='#000000')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='#000000')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('#E6E6FA')\n\n# Set the color of the text\nax.set_facecolor('#000000')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='#000000')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='#000000')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('#E6E6FA')\n\n# Set the color of the text\nax.set_facecolor('#000000')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='#000000')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='#000000')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('#E6E6FA')\n\n# Set the color of the text\nax.set_facecolor('#000000')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='#000000')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='#000000')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('#E6E6FA')\n\n# Set the color of the text\nax.set_facecolor('#000000')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='#000000')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='#000000')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('#E6E6FA')\n\n# Set the color of the text\nax.set_facecolor('#000000')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='#000000')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='#000000')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('#E6E6FA')\n\n# Set the color of the text\nax.set_facecolor('#000000')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='#000000')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='#000000')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('#E6E6FA')\n\n# Set the color of the text\nax.set_facecolor('#000000')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='#000000')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='#000000')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('#E6E6FA')\n\n# Set the color of the text\nax.set_facecolor('#000000')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='#000000')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='#000000')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('#E6E6FA')\n\n# Set the color of the text\nax.set_facecolor('#000000')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='#000000')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='#000000')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('#E6E6FA')\n\n# Set the color of the text\nax.set_facecolor('#000000')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='#000000')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='#000000')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('#E6E6FA')\n\n# Set the color of the text\nax.set_facecolor('#000000')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='#000000')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='#000000')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('#E6E6FA')\n\n# Set the color of the text\nax.set_facecolor('#000000')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='#000000')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='#000000')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('#E6E6FA')\n\n# Set the color of the text\nax.set_facecolor('#000000')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='#000000')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='#000000')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('#E6E6FA')\n\n# Set the color of the text\nax.set_facecolor('#000000')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='#000000')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='#000000')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('#E6E6FA')\n\n# Set the color of the text\nax.set_facecolor('#000000')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='#000000')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='#000000')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('#E6E6FA')\n\n# Set the color of the text\nax.set_facecolor('#000000')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='#000000')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='#000000')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('#E6E6FA')\n\n# Set the color of the text\nax.set_facecolor('#000000')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='#000000')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='#000000')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth"}
{"file": "dataset/ori_500/errorpoint_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Set the x-axis labels\nx_labels = ['Kashmir', 'Religion', 'Crime and Justice', 'CAA', 'Pulwama-Balakot', 'Politics']\n\n# Set the y-axis values\ny_values = [0.12, 0.14, 0.16, 0.18, 0.20, 0.22]\n\n# Plot the data\nax.plot(x_labels, y_values, marker='o')\n\n# Set the title of the plot\nax.set_title('Shouting Fraction (Fraction of videos)')\n\n# Set the x-axis label\nax.set_xlabel('Region')\n\n# Set the y-axis label\nax.set_ylabel('Shouting Fraction')\n\n# Set the y-axis limits\nax.set_ylim(0.02, 0.24)\n\n# Set the y-axis ticks\nax.set_yticks([0.02, 0.04, 0.06, 0.08, 0.10, 0.12, 0.14, 0.16, 0.18, 0.20, 0.22, 0.24])\n\n# Set the y-axis tick labels\nax.set_yticklabels(['0.02', '0.04', '0.06', '0.08', '0.10', '0.12', '0.14', '0.16', '0.18', '0.20', '0.22', '0.24'])\n\n# Set the x-axis limits\nax.set_xlim(-0.5, 5.5)\n\n# Set the x-axis ticks\nax.set_xticks([0, 1, 2, 3, 4, 5])\n\n# Set the x-axis tick labels\nax.set_xticklabels(['Kashmir', 'Religion', 'Crime and Justice', 'CAA', 'Pulwama-Balakot', 'Politics'])\n\n# Set the background color\nax.set_facecolor('#f0f0f0')\n\n# Set the grid lines\nax.grid(True)\n\n# Set the legend\nax.legend(['Dataset mean', 'Mean'], loc='upper left')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorpoint_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(6.0, 9.0))\n\n# Set the title of the plot\nax.set_title('Variable, Symmetric Error')\n\n# Create a scatter plot with random data\nax.scatter([1, 2, 3, 4, 5], [10, 15, 13, 17, 20], color='blue')\n\n# Set the x-axis label\nax.set_xlabel('Time (s)')\n\n# Set the y-axis label\nax.set_ylabel('Position (m)')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorpoint_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Political Incivility by Region')\n\n# Set the x-axis label\nax.set_xlabel('Incivility (Fraction of Videos)')\n\n# Set the y-axis label\nax.set_ylabel('Region')\n\n# Define the data for the plot\nregions = ['Politics', 'Religion', 'Kashmir', 'CAA', 'Pulwama-Balakot']\nincivility = [0.16, 0.18, 0.20, 0.22, 0.24]\n\n# Plot the data\nax.plot(regions, incivility, color='brown', marker='o')\n\n# Add a legend\nax.legend(['Dataset mean', 'Mean'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorpoint_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Set the x-axis limits\nax.set_xlim(-19.6, -19.0)\n\n# Set the y-axis limits\nax.set_ylim(-19.6, -19.0)\n\n# Set the x-axis label\nax.set_xlabel('M$_B$')\n\n# Set the y-axis label\nax.set_ylabel('M$_A$')\n\n# Set the title of the plot\nax.set_title('Pantheon')\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-19.5, -19.5), 0.1, 0.1, color='red')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-19.4, -19.4), 0.1, 0.1, color='blue')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-19.3, -19.3), 0.1, 0.1, color='green')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-19.2, -19.2), 0.1, 0.1, color='yellow')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-19.1, -19.1), 0.1, 0.1, color='cyan')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-19.0, -19.0), 0.1, 0.1, color='magenta')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-19.5, -19.5), 0.1, 0.1, color='pink')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-19.4, -19.4), 0.1, 0.1, color='purple')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-19.3, -19.3), 0.1, 0.1, color='orange')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-19.2, -19.2), 0.1, 0.1, color='brown')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-19.1, -19.1), 0.1, 0.1, color='gray')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-19.0, -19.0), 0.1, 0.1, color='silver')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-19.5, -19.5), 0.1, 0.1, color='gold')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-19.4, -19.4), 0.1, 0.1, color='white')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-19.3, -19.3), 0.1, 0.1, color='black')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-19.2, -19.2), 0.1, 0.1, color='red')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-19.1, -19.1), 0.1, 0.1, color='blue')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-19.0, -19.0), 0.1, 0.1, color='green')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-19.5, -19.5), 0.1, 0.1, color='yellow')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-19.4, -19.4), 0.1, 0.1, color='cyan')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-19.3, -19.3), 0.1, 0.1, color='magenta')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-19.2, -19.2), 0.1, 0.1, color='pink')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-19.1, -19.1), 0.1, 0.1, color='purple')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-19.0, -19.0), 0.1, 0.1, color='orange')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-19.5, -19.5), 0.1, 0.1, color='brown')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-19.4, -19.4), 0.1, 0.1, color='gray')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-19.3, -19.3), 0.1, 0.1, color='silver')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-19.2, -19.2), 0.1, 0.1, color='gold')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-19.1, -19.1), 0.1, 0.1, color='white')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-19.0, -19.0), 0.1, 0.1, color='black')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-19.5, -19.5), 0.1, 0.1, color='red')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-19.4, -19.4), 0.1, 0.1, color='blue')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-19.3, -19.3), 0.1, 0.1, color='green')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-19.2, -19.2), 0.1, 0.1, color='yellow')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-19.1, -19.1), 0.1, 0.1, color='cyan')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-19.0, -19.0), 0.1, 0.1, color='magenta')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-19.5, -19.5), 0.1, 0.1, color='pink')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-19.4, -19.4), 0.1, 0.1, color='purple')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-19.3, -19.3), 0.1, 0.1, color='orange')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-19.2, -19.2), 0.1, 0.1, color='brown')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-19.1, -19.1), 0.1, 0.1, color='gray')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-19.0, -19.0), 0.1, 0.1, color='silver')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-19.5, -19.5), 0.1, 0.1, color='gold')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-19.4, -19.4), 0.1, 0.1, color='white')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-19.3, -19.3), 0.1, 0.1, color='black')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-19.2, -19.2), 0.1, 0.1, color='red')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-19.1, -19.1), 0.1, 0.1, color='blue')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-19.0, -19.0), 0.1, 0.1, color='green')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-19.5, -19.5), 0.1, 0.1, color='yellow')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-19.4, -19.4), 0.1, 0.1, color='cyan')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-19.3, -19.3), 0.1, 0.1, color='magenta')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-19.2, -19.2), 0.1, 0.1, color='pink')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-19.1, -19.1), 0.1, 0.1, color='purple')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-19.0, -19.0), 0.1, 0.1, color='orange')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-19.5, -19.5), 0.1, 0.1, color='brown')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-19.4, -19.4), 0.1, 0.1, color='gray')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-19.3, -19.3), 0.1, 0.1, color='silver')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-19.2, -19.2), 0.1, 0.1, color='gold')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-19.1, -19.1), 0.1, 0.1, color='white')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-19.0, -19.0), 0.1, 0.1, color='black')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-19.5, -19.5), 0.1, 0.1, color='red')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-19.4, -19.4), 0.1, 0.1, color='blue')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-19.3, -19.3), 0.1, 0.1, color='green')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-19.2, -19.2), 0.1, 0.1, color='yellow')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-19.1, -19.1), 0.1, 0.1, color='cyan')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-19.0, -19.0), 0.1, 0.1, color='magenta')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-19.5, -19.5), 0.1, 0.1, color='pink')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-19.4, -19.4), 0.1, 0.1, color='purple')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-19.3, -19.3), 0.1, 0.1, color='orange')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-19.2, -19.2), 0.1, 0.1, color='brown')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-19.1, -19.1), 0.1, 0.1, color='gray')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-19.0, -19.0), 0.1, 0.1, color='silver')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-19.5, -19.5), 0.1, 0.1, color='gold')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-19.4, -19.4), 0.1, 0.1, color='white')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-19.3, -19.3), 0.1, 0.1, color='black')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-19.2, -19.2), 0.1, 0.1, color='red')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-19.1, -19.1), 0.1, 0.1, color='blue')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-19.0, -19.0), 0.1, 0.1, color='green')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-19.5, -19.5), 0.1, 0.1, color='yellow')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-19.4, -19.4), 0.1, 0.1, color='cyan')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-19.3, -19.3), 0.1, 0.1, color='magenta')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-19.2, -19.2), 0.1, 0.1, color='pink')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-19.1, -19.1), 0.1, 0.1, color='purple')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-19.0, -19.0), 0.1, 0.1, color='orange')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-19.5, -19.5), 0.1, 0.1, color='brown')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-19.4, -19.4), 0.1, 0.1, color='gray')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-19.3, -19.3), 0.1, 0.1, color='silver')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-19.2, -19.2), 0.1, 0.1, color='gold')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-19.1, -19.1), 0.1, 0.1, color='white')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-19.0, -19.0), 0.1, 0.1, color='black')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-19.5, -19.5), 0.1, 0.1, color='red')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((-19.4, -19.4), 0.1, 0.1, color='blue')\nax.add_patch(rect)\n\n# Add a rectangle to the plot\n"}
{"file": "dataset/ori_500/errorpoint_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Set the title of the plot\nax.set_title('Dataset unique shouter count mean')\n\n# Set the x-axis label\nax.set_xlabel('Number of speakers')\n\n# Set the y-axis label\nax.set_ylabel('Unique speaker count mean')\n\n# Create a scatter plot\nax.scatter([1, 2, 3, 4, 5], [10, 12, 14, 16, 18], color='blue')\n\n# Create a line plot\nax.plot([1, 2, 3, 4, 5], [10, 12, 14, 16, 18], color='red')\n\n# Add a legend\nax.legend(['Dataset unique shouter count mean', 'Unique speaker count mean'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorpoint_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Global News Sentiment Analysis')\n\n# Set the x-axis label\nax.set_xlabel('Date')\n\n# Set the y-axis label\nax.set_ylabel('Sentiment Score')\n\n# Set the y-axis limits\nax.set_ylim(0, 25)\n\n# Set the x-axis ticks\nax.set_xticks([1, 2, 3, 4, 5])\n\n# Set the x-axis labels\nax.set_xticklabels(['KASHMIR', 'COVID/LOCKDOWN', 'SPORTS', 'CHINA', 'PULWAMA-BALAKOT'])\n\n# Set the y-axis ticks\nax.set_yticks([0.5, 1, 1.5, 2, 2.5, 3, 3.5, 4, 4.5, 5])\n\n# Set the y-axis labels\nax.set_yticklabels(['0.5', '1', '1.5', '2', '2.5', '3', '3.5', '4', '4.5', '5'])\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the border lines\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the tick marks\nax.tick_params(axis='x', colors='blue')\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Dataset mean', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center', color='blue')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Mean', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center', color='blue')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Dataset mean', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center', color='blue')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Mean', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center', color='blue')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Dataset mean', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center', color='blue')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Mean', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center', color='blue')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Dataset mean', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center', color='blue')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Mean', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center', color='blue')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Dataset mean', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center', color='blue')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Mean', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center', color='blue')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Dataset mean', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center', color='blue')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Mean', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center', color='blue')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Dataset mean', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center', color='blue')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Mean', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center', color='blue')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Dataset mean', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center', color='blue')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Mean', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center', color='blue')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Dataset mean', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center', color='blue')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Mean', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center', color='blue')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Dataset mean', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center', color='blue')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Mean', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center', color='blue')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Dataset mean', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center', color='blue')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Mean', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center', color='blue')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Dataset mean', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center', color='blue')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Mean', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center', color='blue')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Dataset mean', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center', color='blue')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Mean', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center', color='blue')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Dataset mean', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center', color='blue')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Mean', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center', color='blue')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Dataset mean', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center', color='blue')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Mean', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center', color='blue')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Dataset mean', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center', color='blue')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Mean', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center', color='blue')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Dataset mean', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center', color='blue')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Mean', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center', color='blue')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Dataset mean', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center', color='blue')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Mean', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center', color='blue')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Dataset mean', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center', color='blue')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Mean', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center', color='blue')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Dataset mean', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center', color='blue')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Mean', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center', color='blue')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Dataset mean', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center', color='blue')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Mean', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center', color='blue')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Dataset mean', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center', color='blue')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Mean', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center', color='blue')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Dataset mean', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center', color='blue')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Mean', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center', color='blue')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Dataset mean', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center', color='blue')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Mean', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center', color='blue')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Dataset mean', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center', color='blue')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Mean', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center', color='blue')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Dataset mean', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center', color='blue')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Mean', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center', color='blue')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Dataset mean', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center', color='blue')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Mean', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center', color='blue')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Dataset mean', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center', color='blue')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Mean', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center', color='blue')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Dataset mean', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center', color='blue')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Mean', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center', color='blue')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Dataset mean', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center', color='blue')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Mean', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center', color='blue')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Dataset mean', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center', color='blue')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Mean', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center', color='blue')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Dataset mean', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center', color='blue')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Mean', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center', color='blue')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Dataset mean', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center', color='blue')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Mean', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center', color='blue')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Dataset mean', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center', color='blue')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Mean', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center', color='blue')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Dataset mean', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center', color='blue')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Mean', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center', color='blue')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Dataset mean', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center', color='blue')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Mean', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center', color='blue')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Dataset mean', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center', color='blue')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Mean', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center', color='blue')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Dataset mean', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center', color='blue')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Mean', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center', color='blue')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Dataset mean', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center"}
{"file": "dataset/ori_500/errorpoint_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(9.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Errorbar upper and lower limits')\n\n# Create a scatter plot with error bars\nx = [1, 2, 3, 4, 5]\ny = [1.5, 2.5, 3.5, 4.5, 5.5]\nyerr = [0.2, 0.3, 0.4, 0.5, 0.6]\nax.errorbar(x, y, yerr=yerr, fmt='o', ecolor='r', capsize=5)\n\n# Set the x-axis and y-axis labels\nax.set_xlabel('Time')\nax.set_ylabel('Value')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorpoint_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and a set of subplots\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10, 4))\n\n# Set the title for each subplot\nax1.set_title('variable, symmetric error')\nax2.set_title('variable, symmetric error')\n\n# Plot the data\nax1.plot([0, 1, 2, 3, 4, 5], [10, 15, 13, 17, 27, 30], 'o-', color='purple')\nax2.plot([0, 1, 2, 3, 4, 5], [10, 15, 13, 17, 27, 30], 'o-', color='green')\n\n# Add a legend\nax1.legend(['Data 1', 'Data 2'])\nax2.legend(['Data 1', 'Data 2'])\n\n# Set the x-axis and y-axis limits\nax1.set_xlim(0, 5)\nax1.set_ylim(0, 40)\nax2.set_xlim(0, 5)\nax2.set_ylim(0, 40)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorpoint_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(10.0, 7.0))\n\n# Set the title of the plot\nax.set_title('variable, asymmetric error')\n\n# Set the x-axis label\nax.set_xlabel('time')\n\n# Set the y-axis label\nax.set_ylabel('value')\n\n# Set the x-axis limits\nax.set_xlim(0, 10)\n\n# Set the y-axis limits\nax.set_ylim(15, 35)\n\n# Set the x-axis ticks\nax.set_xticks(range(0, 11, 2))\n\n# Set the y-axis ticks\nax.set_yticks(range(15, 36, 5))\n\n# Set the x-axis tick labels\nax.set_xticklabels(['0', '2', '4', '6', '8', '10'])\n\n# Set the y-axis tick labels\nax.set_yticklabels(['15', '20', '25', '30', '35'])\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('green')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('green')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='yellow', linestyle='--')\n\n# Set the color of the error bar\nax.errorbar([0, 2, 4, 6, 8, 10], [15, 20, 25, 30, 35, 40], yerr=[1, 2, 3, 4, 5, 6], fmt='o', ecolor='red', capsize=5)\n\n# Set the color of the scatter plot\nax.scatter([0, 2, 4, 6, 8, 10], [15, 20, 25, 30, 35, 40], color='blue')\n\n# Set the color of the line plot\nax.plot([0, 2, 4, 6, 8, 10], [15, 20, 25, 30, 35, 40], color='green')\n\n# Set the color of the fill_between plot\nax.fill_between([0, 2, 4, 6, 8, 10], [15, 20, 25, 30, 35, 40], [16, 21, 26, 31, 36, 41], color='yellow', alpha=0.5)\n\n# Set the color of the text\nax.text(5, 32, 'errorbar', fontsize=12, color='green')\n\n# Set the color of the legend\nax.legend(['scatter', 'line', 'fill_between'], loc='upper left', fancybox=True, shadow=True)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorpoint_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(10.0, 7.0))\n\n# Set the title of the plot\nax.set_title('variable, asymmetric error')\n\n# Create a rectangle for the errorbar\nerrorbar = plt.Rectangle((0, 0), 1, 1, fc='purple')\nax.add_patch(errorbar)\n\n# Create a scatter plot with the data\nx = [0, 5, 10, 15, 20]\ny = [-2.1, -2.6, -1.2, -1.0, -2.7]\nax.scatter(x, y, c='purple')\n\n# Create a line plot with the data\nx = [0, 5, 10, 15, 20]\ny = [-2.1, -2.6, -1.2, -1.0, -2.7]\nax.plot(x, y, 'o-', color='purple')\n\n# Set the limits of the x-axis\nax.set_xlim(0, 20)\n\n# Set the limits of the y-axis\nax.set_ylim(-30, 30)\n\n# Set the ticks on the x-axis\nax.set_xticks([0, 5, 10, 15, 20])\n\n# Set the ticks on the y-axis\nax.set_yticks([-30, -20, -10, 0, 10, 20, 30])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/graph_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Define the number of points for the polygon\nn = 6\n\n# Create a regular polygon with n sides\ntheta = np.linspace(0, 2*np.pi, n+1)\nx = np.cos(theta)\ny = np.sin(theta)\n\n# Plot the polygon\nax.plot(x, y, 'k-')\n\n# Add circles at each vertex\nfor i in range(n):\n    circle = plt.Circle((x[i], y[i]), 0.1, color='blue')\n    ax.add_artist(circle)\n\n# Set the aspect ratio to be equal so that the circle is not distorted\nax.set_aspect('equal')\n\n# Remove the axes\nax.axis('off')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/graph_2.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Set the background color of the plot\nax.set_facecolor('white')\n\n# Draw a circle at the center of the plot\ncircle = plt.Circle((0.5, 0.5), 0.1, color='pink')\nax.add_artist(circle)\n\n# Draw a star with 5 points\nstar = plt.Polygon([[0.5, 0.2], [0.4, 0.3], [0.6, 0.3], [0.5, 0.5], [0.4, 0.7], [0.5, 0.6], [0.6, 0.7], [0.4, 0.7]], color='pink')\nax.add_artist(star)\n\n# Draw a rectangle\nrectangle = plt.Rectangle([0.2, 0.2], 0.2, 0.2, color='pink')\nax.add_artist(rectangle)\n\n# Draw a triangle\ntriangle = plt.Polygon([[0.5, 0.8], [0.4, 0.9], [0.6, 0.9]], color='pink')\nax.add_artist(triangle)\n\n# Draw a line\nline = plt.Line2D([0.1, 0.9], [0.1, 0.9], color='pink')\nax.add_artist(line)\n\n# Draw a scatter plot\nscatter = plt.scatter(np.random.rand(10), np.random.rand(10), color='pink')\nax.add_collection(scatter)\n\n# Draw a histogram\nhist = plt.hist(np.random.rand(100), bins=10, color='pink')\nax.add_collection(hist)\n\n# Draw a pie chart\npie = plt.pie([1, 2, 3], colors=['pink', 'pink', 'pink'])\nax.add_collection(pie)\n\n# Draw a bar chart\nbar = plt.bar(['A', 'B', 'C'], [1, 2, 3], color='pink')\nax.add_collection(bar)\n\n# Draw a scatter plot with different sizes\nscatter_sizes = np.random.rand(10)\nscatter = plt.scatter(np.random.rand(10), np.random.rand(10), s=scatter_sizes*100, color='pink')\nax.add_collection(scatter)\n\n# Draw a scatter plot with different colors\nscatter_colors = np.random.rand(10)\nscatter = plt.scatter(np.random.rand(10), np.random.rand(10), c=scatter_colors, cmap='viridis')\nax.add_collection(scatter)\n\n# Draw a scatter plot with different markers\nscatter_markers = ['o', 's', '^', 'p', '*', 'h', 'H', 'D', 'd', 'v', '^', '<', '>', '1', '2', '3', '4', '8', 'p', 'P', '*', 'h', 'H', 'd', 'D', 'v', '^', '<', '>', '1', '2', '3', '4']\nscatter = plt.scatter(np.random.rand(10), np.random.rand(10), marker=scatter_markers, color='pink')\nax.add_collection(scatter)\n\n# Draw a scatter plot with different edge colors\nscatter_edgecolors = ['r', 'g', 'b', 'c', 'm', 'y', 'k', 'w']\nscatter = plt.scatter(np.random.rand(10), np.random.rand(10), edgecolor=scatter_edgecolors, color='pink')\nax.add_collection(scatter)\n\n# Draw a scatter plot with different edge widths\nscatter_edgewidths = np.random.rand(10)\nscatter = plt.scatter(np.random.rand(10), np.random.rand(10), edgecolor='black', linewidths=scatter_edgewidths, color='pink')\nax.add_collection(scatter)\n\n# Draw a scatter plot with different alpha values\nscatter_alphas = np.random.rand(10)\nscatter = plt.scatter(np.random.rand(10), np.random.rand(10), alpha=scatter_alphas, color='pink')\nax.add_collection(scatter)\n\n# Draw a scatter plot with different zorder values\nscatter_zorders = np.random.rand(10)\nscatter = plt.scatter(np.random.rand(10), np.random.rand(10), zorder=scatter_zorders, color='pink')\nax.add_collection(scatter)\n\n# Draw a scatter plot with different s values\nscatter_s = np.random.rand(10)\nscatter = plt.scatter(np.random.rand(10), np.random.rand(10), s=scatter_s*100, color='pink')\nax.add_collection(scatter)\n\n# Draw a scatter plot with different c values\nscatter_c = np.random.rand(10)\nscatter = plt.scatter(np.random.rand(10), np.random.rand(10), c=scatter_c, cmap='viridis')\nax.add_collection(scatter)\n\n# Draw a scatter plot with different marker values\nscatter_markers = ['o', 's', '^', 'p', '*', 'h', 'H', 'D', 'd', 'v', '^', '<', '>', '1', '2', '3', '4', '8', 'p', 'P', '*', 'h', 'H', 'd', 'D', 'v', '^', '<', '>', '1', '2', '3', '4']\nscatter = plt.scatter(np.random.rand(10), np.random.rand(10), marker=scatter_markers, color='pink')\nax.add_collection(scatter)\n\n# Draw a scatter plot with different edgecolor values\nscatter_edgecolors = ['r', 'g', 'b', 'c', 'm', 'y', 'k', 'w']\nscatter = plt.scatter(np.random.rand(10), np.random.rand(10), edgecolor=scatter_edgecolors, color='pink')\nax.add_collection(scatter)\n\n# Draw a scatter plot with different linewidths values\nscatter_linewidths = np.random.rand(10)\nscatter = plt.scatter(np.random.rand(10), np.random.rand(10), edgecolor='black', linewidths=scatter_linewidths, color='pink')\nax.add_collection(scatter)\n\n# Draw a scatter plot with different alpha values\nscatter_alphas = np.random.rand(10)\nscatter = plt.scatter(np.random.rand(10), np.random.rand(10), alpha=scatter_alphas, color='pink')\nax.add_collection(scatter)\n\n# Draw a scatter plot with different zorder values\nscatter_zorders = np.random.rand(10)\nscatter = plt.scatter(np.random.rand(10), np.random.rand(10), zorder=scatter_zorders, color='pink')\nax.add_collection(scatter)\n\n# Draw a scatter plot with different s values\nscatter_s = np.random.rand(10)\nscatter = plt.scatter(np.random.rand(10), np.random.rand(10), s=scatter_s*100, color='pink')\nax.add_collection(scatter)\n\n# Draw a scatter plot with different c values\nscatter_c = np.random.rand(10)\nscatter = plt.scatter(np.random.rand(10), np.random.rand(10), c=scatter_c, cmap='viridis')\nax.add_collection(scatter)\n\n# Draw a scatter plot with different marker values\nscatter_markers = ['o', 's', '^', 'p', '*', 'h', 'H', 'D', 'd', 'v', '^', '<', '>', '1', '2', '3', '4', '8', 'p', 'P', '*', 'h', 'H', 'd', 'D', 'v', '^', '<', '>', '1', '2', '3', '4']\nscatter = plt.scatter(np.random.rand(10), np.random.rand(10), marker=scatter_markers, color='pink')\nax.add_collection(scatter)\n\n# Draw a scatter plot with different edgecolor values\nscatter_edgecolors = ['r', 'g', 'b', 'c', 'm', 'y', 'k', 'w']\nscatter = plt.scatter(np.random.rand(10), np.random.rand(10), edgecolor=scatter_edgecolors, color='pink')\nax.add_collection(scatter)\n\n# Draw a scatter plot with different linewidths values\nscatter_linewidths = np.random.rand(10)\nscatter = plt.scatter(np.random.rand(10), np.random.rand(10), edgecolor='black', linewidths=scatter_linewidths, color='pink')\nax.add_collection(scatter)\n\n# Draw a scatter plot with different alpha values\nscatter_alphas = np.random.rand(10)\nscatter = plt.scatter(np.random.rand(10), np.random.rand(10), alpha=scatter_alphas, color='pink')\nax.add_collection(scatter)\n\n# Draw a scatter plot with different zorder values\nscatter_zorders = np.random.rand(10)\nscatter = plt.scatter(np.random.rand(10), np.random.rand(10), zorder=scatter_zorders, color='pink')\nax.add_collection(scatter)\n\n# Draw a scatter plot with different s values\nscatter_s = np.random.rand(10)\nscatter = plt.scatter(np.random.rand(10), np.random.rand(10), s=scatter_s*100, color='pink')\nax.add_collection(scatter)\n\n# Draw a scatter plot with different c values\nscatter_c = np.random.rand(10)\nscatter = plt.scatter(np.random.rand(10), np.random.rand(10), c=scatter_c, cmap='viridis')\nax.add_collection(scatter)\n\n# Draw a scatter plot with different marker values\nscatter_markers = ['o', 's', '^', 'p', '*', 'h', 'H', 'D', 'd', 'v', '^', '<', '>', '1', '2', '3', '4', '8', 'p', 'P', '*', 'h', 'H', 'd', 'D', 'v', '^', '<', '>', '1', '2', '3', '4']\nscatter = plt.scatter(np.random.rand(10), np.random.rand(10), marker=scatter_markers, color='pink')\nax.add_collection(scatter)\n\n# Draw a scatter plot with different edgecolor values\nscatter_edgecolors = ['r', 'g', 'b', 'c', 'm', 'y', 'k', 'w']\nscatter = plt.scatter(np.random.rand(10), np.random.rand(10), edgecolor=scatter_edgecolors, color='pink')\nax.add_collection(scatter)\n\n# Draw a scatter plot with different linewidths values\nscatter_linewidths = np.random.rand(10)\nscatter = plt.scatter(np.random.rand(10), np.random.rand(10), edgecolor='black', linewidths=scatter_linewidths, color='pink')\nax.add_collection(scatter)\n\n# Draw a scatter plot with different alpha values\nscatter_alphas = np.random.rand(10)\nscatter = plt.scatter(np.random.rand(10), np.random.rand(10), alpha=scatter_alphas, color='pink')\nax.add_collection(scatter)\n\n# Draw a scatter plot with different zorder values\nscatter_zorders = np.random.rand(10)\nscatter = plt.scatter(np.random.rand(10), np.random.rand(10), zorder=scatter_zorders, color='pink')\nax.add_collection(scatter)\n\n# Draw a scatter plot with different s values\nscatter_s = np.random.rand(10)\nscatter = plt.scatter(np.random.rand(10), np.random.rand(10), s=scatter_s*100, color='pink')\nax.add_collection(scatter)\n\n# Draw a scatter plot with different c values\nscatter_c = np.random.rand(10)\nscatter = plt.scatter(np.random.rand(10), np.random.rand(10), c=scatter_c, cmap='viridis')\nax.add_collection(scatter)\n\n# Draw a scatter plot with different marker values\nscatter_markers = ['o', 's', '^', 'p', '*', 'h', 'H', 'D', 'd', 'v', '^', '<', '>', '1', '2', '3', '4', '8', 'p', 'P', '*', 'h', 'H', 'd', 'D', 'v', '^', '<', '>', '1', '2', '3', '4']\nscatter = plt.scatter(np.random.rand(10), np.random.rand(10), marker=scatter_markers, color='pink')\nax.add_collection(scatter)\n\n# Draw a scatter plot with different edgecolor values\nscatter_edgecolors = ['r', 'g', 'b', 'c', 'm', 'y', 'k', 'w']\nscatter = plt.scatter(np.random.rand(10), np.random.rand(10), edgecolor=scatter_edgecolors, color='pink')\nax.add_collection(scatter)\n\n# Draw a scatter plot with different linewidths values\nscatter_linewidths = np.random.rand(10)\nscatter = plt.scatter(np.random.rand(10), np.random.rand(10), edgecolor='black', linewidths=scatter_linewidths, color='pink')\nax.add_collection(scatter)\n\n# Draw a scatter plot with different alpha values\nscatter_alphas = np.random.rand(10)\nscatter = plt.scatter(np.random.rand(10), np.random.rand(10), alpha=scatter_alphas, color='pink')\nax.add_collection(scatter)\n\n# Draw a scatter plot with different zorder values\nscatter_zorders = np.random.rand(10)\nscatter = plt.scatter(np.random.rand(10), np.random.rand(10), zorder=scatter_zorders, color='pink')\nax.add_collection(scatter)\n\n# Draw a scatter plot with different s values\nscatter_s = np.random.rand(10)\nscatter = plt.scatter(np.random.rand(10), np.random.rand(10), s=scatter_s*100, color='pink')\nax.add_collection(scatter)\n\n# Draw a scatter plot with different c values\nscatter_c = np.random.rand(10)\nscatter = plt.scatter(np.random.rand(10), np.random.rand(10), c=scatter_c, cmap='viridis')\nax.add_collection(scatter)\n\n# Draw a scatter plot with different marker values\nscatter_markers = ['o', 's', '^', 'p', '*', 'h', 'H', 'D', 'd', 'v', '^', '<', '>', '1', '2', '3', '4', '8', 'p', 'P', '*', 'h', 'H', 'd', 'D', 'v', '^', '<', '>', '1', '2', '3', '4']\nscatter = plt.scatter(np.random.rand(10), np.random.rand(10), marker=scatter_markers, color='pink')\nax.add_collection(scatter)\n\n# Draw a scatter plot with different edgecolor values\nscatter_edgecolors = ['r', 'g', 'b', 'c', 'm', 'y', 'k', 'w']\nscatter = plt.scatter(np.random.rand(10), np.random.rand(10), edgecolor=scatter_edgecolors, color='pink')\nax.add_collection(scatter)\n\n# Draw a scatter plot with different linewidths values\nscatter_linewidths = np.random.rand(10)\nscatter = plt.scatter(np.random.rand(10), np.random.rand(10), edgecolor='black', linewidths=scatter_linewidths, color='pink')\nax.add_collection(scatter)\n\n# Draw a scatter plot with different alpha values\nscatter_alphas = np.random.rand(10)\nscatter = plt.scatter(np.random.rand(10), np.random.rand(10), alpha=scatter_alphas, color='pink')\nax.add_collection(scatter)\n\n# Draw a scatter plot with different zorder values\nscatter_zorders = np.random.rand(10)\nscatter = plt.scatter(np.random.rand(10), np.random.rand(10), zorder=scatter_zorders, color='pink')\nax.add_collection(scatter)\n\n# Draw a scatter plot with different s values\nscatter_s = np.random.rand(10)\nscatter = plt.scatter(np.random.rand(10), np.random.rand(10), s=scatter_s*100, color='pink')\nax.add_collection(scatter)\n\n# Draw a scatter plot with different c values\nscatter_c = np.random.rand(10)\nscatter = plt.scatter(np.random.rand(10), np.random.rand(10), c=scatter_c, cmap='viridis')\nax.add_collection(scatter)\n\n# Draw a scatter plot with different marker values\nscatter_markers = ['o', 's', '^', 'p', '*', 'h', 'H', 'D', 'd', 'v', '^', '<', '>', '1', '2', '3', '4', '8', 'p', 'P', '*', 'h', 'H', 'd', 'D', 'v', '^', '<', '>', '1', '2', '3', '4']\nscatter = plt.scatter(np.random.rand(10), np.random.rand(10), marker=scatter_markers, color='pink')\nax.add_collection(scatter)\n\n# Draw a scatter plot with different edgecolor values\nscatter_edgecolors = ['r', 'g', 'b', 'c', 'm', 'y', 'k', 'w']\nscatter = plt.scatter(np.random.rand(10), np.random.rand(10), edgecolor=scatter_edgecolors, color='pink')\nax.add_collection(scatter)\n\n# Draw a scatter plot with different linewidths values\nscatter_linewidths = np.random.rand(10)\nscatter = plt.scatter(np.random.rand(10), np.random.rand(10), edgecolor='black', linewidths=scatter_linewidths, color='pink')\nax.add_collection(scatter)\n\n# Draw a scatter plot with different alpha values\nscatter_alphas = np.random.rand(10)\nscatter = plt.scatter(np.random.rand(10), np.random.rand(10), alpha=scatter_alphas, color='pink')\nax.add_collection(scatter)\n\n# Draw a scatter plot with different zorder values\nscatter_zorders = np.random.rand(10)\nscatter = plt.scatter(np.random.rand(10), np.random.rand(10), zorder=scatter_zorders, color='pink')\nax.add_collection(scatter)\n\n# Draw a scatter plot with different s values\nscatter_s = np.random.rand(10)\nscatter = plt.scatter(np.random.rand(10), np.random.rand(10), s=scatter_s*100, color='pink')\nax.add_collection(scatter)\n\n# Draw a scatter plot with different c values\nscatter_c = np.random.rand(10)\nscatter = plt.scatter(np.random.rand(10), np.random.rand(10), c=scatter_c, cmap='viridis')\nax.add_collection(scatter)\n\n# Draw a scatter plot with different marker values\nscatter_markers = ['o', 's', '^', 'p', '*', 'h', 'H', 'D', 'd', 'v', '^', '<', '>', '1', '2', '3', '4', '8',"}
{"file": "dataset/ori_500/graph_3.pdf", "response": "```\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Define the data\nx = np.linspace(0, 2*np.pi, 100)\ny = np.sin(x)\n\n# Plot the data\nax.plot(x, y)\n\n# Set the title and labels\nax.set_title('Sine Wave')\nax.set_xlabel('Time (s)')\nax.set_ylabel('Amplitude')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/graph_4.pdf", "response": "```\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Define the data for the plot\nx = np.linspace(0, 10, 100)\ny = np.sin(x)\n\n# Plot the data\nax.plot(x, y)\n\n# Set the title of the plot\nax.set_title('Sine Wave')\n\n# Set the x and y labels\nax.set_xlabel('Time (s)')\nax.set_ylabel('Amplitude')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/graph_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis.\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Create a circle with radius 1.\ncircle = plt.Circle((0, 0), 1, color='blue')\nax.add_artist(circle)\n\n# Create a rectangle with width 2 and height 1.\nrectangle = plt.Rectangle((-1, -0.5), 2, 1, color='red')\nax.add_artist(rectangle)\n\n# Create a triangle with base 2 and height 1.\ntriangle = plt.Polygon([[0, 0], [1, 1], [-1, 1]], color='green')\nax.add_artist(triangle)\n\n# Set the limits of the plot.\nax.set_xlim(-2, 2)\nax.set_ylim(-2, 2)\n\n# Set the aspect ratio of the plot to be equal.\nax.set_aspect('equal')\n\n# Display the plot.\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Set the title of the plot\nax.set_title('Stock Market Analysis')\n\n# Set the labels for the x-axis and y-axis\nax.set_xlabel('Time')\nax.set_ylabel('Price')\n\n# Create a grid\nax.grid(True)\n\n# Create a rectangle for the CoreNLP section\nrect1 = plt.Rectangle((0, 0), 1, 1, color='pink', alpha=0.5)\nax.add_patch(rect1)\n\n# Create a rectangle for the Stanza section\nrect2 = plt.Rectangle((1, 0), 1, 1, color='orange', alpha=0.5)\nax.add_patch(rect2)\n\n# Create a rectangle for the Biaffine section\nrect3 = plt.Rectangle((2, 0), 1, 1, color='red', alpha=0.5)\nax.add_patch(rect3)\n\n# Create a rectangle for the StackPointer section\nrect4 = plt.Rectangle((3, 0), 1, 1, color='green', alpha=0.5)\nax.add_patch(rect4)\n\n# Create a rectangle for the TowerParse section\nrect5 = plt.Rectangle((4, 0), 1, 1, color='purple', alpha=0.5)\nax.add_patch(rect5)\n\n# Create a rectangle for the AVG section\nrect6 = plt.Rectangle((0, 1), 1, 1, color='yellow', alpha=0.5)\nax.add_patch(rect6)\n\n# Create a rectangle for the Stanza section\nrect7 = plt.Rectangle((1, 1), 1, 1, color='orange', alpha=0.5)\nax.add_patch(rect7)\n\n# Create a rectangle for the Biaffine section\nrect8 = plt.Rectangle((2, 1), 1, 1, color='red', alpha=0.5)\nax.add_patch(rect8)\n\n# Create a rectangle for the StackPointer section\nrect9 = plt.Rectangle((3, 1), 1, 1, color='green', alpha=0.5)\nax.add_patch(rect9)\n\n# Create a rectangle for the TowerParse section\nrect10 = plt.Rectangle((4, 1), 1, 1, color='purple', alpha=0.5)\nax.add_patch(rect10)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Set the title of the plot\nax.set_title('Voting Results')\n\n# Define the data for the pie chart\ndata = [50.8, 28.1, 2.6, 0.5, 4.1, 8.1, 9.2, 10.5, 14.5, 12.3, 0.9, 6.2, 7.8, 15.5, 17.3, 13.9, 16.3, 11.2, 12.0, 0.6, 7.0, 13.4, 10.9, 14.3, 15.7, 28.6, 2.1, 0.9, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0"}
{"file": "dataset/ori_500/heatmap_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the color map\ncmap = plt.get_cmap('hot')\n\n# Create a grid of subplots\ngs = fig.add_gridspec(3, 4)\n\n# Add a color bar\ncbar = fig.colorbar(ax.imshow(np.random.rand(10, 10), cmap=cmap), ax=ax)\n\n# Add text labels\nax.set_xlabel('Players')\nax.set_ylabel('Teams')\nax.set_title('Team Performance')\n\n# Add rectangles for each player\nfor i in range(4):\n    for j in range(3):\n        ax.add_patch(plt.Rectangle((i*2, j*2), 2, 2, color='blue'))\n\n# Add rectangles for each team\nfor i in range(3):\n    for j in range(4):\n        ax.add_patch(plt.Rectangle((i*2, j*2), 2, 2, color='red'))\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 5.0))\n\n# Set the background color of the plot\nax.set_facecolor('white')\n\n# Set the title of the plot\nax.set_title('Live vs Predicted Category Similarity')\n\n# Set the x-axis label\nax.set_xlabel('Live Category')\n\n# Set the y-axis label\nax.set_ylabel('Predicted Category')\n\n# Set the x-axis limits\nax.set_xlim(0, 50)\n\n# Set the y-axis limits\nax.set_ylim(0, 50)\n\n# Set the x-axis ticks\nax.set_xticks(np.arange(0, 51, 10))\n\n# Set the y-axis ticks\nax.set_yticks(np.arange(0, 51, 10))\n\n# Set the x-axis tick labels\nax.set_xticklabels(['0', '10', '20', '30', '40', '50'])\n\n# Set the y-axis tick labels\nax.set_yticklabels(['0', '10', '20', '30', '40', '50'])\n\n# Set the x-axis grid lines\nax.grid(True)\n\n# Set the y-axis grid lines\nax.grid(True)\n\n# Set the x-axis grid line style\nax.grid(axis='x', linestyle='--')\n\n# Set the y-axis grid line style\nax.grid(axis='y', linestyle='--')\n\n# Set the x-axis grid line color\nax.grid(axis='x', color='black')\n\n# Set the y-axis grid line color\nax.grid(axis='y', color='black')\n\n# Set the x-axis grid line width\nax.grid(axis='x', linewidth=0.5)\n\n# Set the y-axis grid line width\nax.grid(axis='y', linewidth=0.5)\n\n# Set the x-axis grid line alpha\nax.grid(axis='x', alpha=0.5)\n\n# Set the y-axis grid line alpha\nax.grid(axis='y', alpha=0.5)\n\n# Set the x-axis grid line zorder\nax.grid(axis='x', zorder=1)\n\n# Set the y-axis grid line zorder\nax.grid(axis='y', zorder=1)\n\n# Set the x-axis grid line hatch\nax.grid(axis='x', hatch='///')\n\n# Set the y-axis grid line hatch\nax.grid(axis='y', hatch='///')\n\n# Set the x-axis grid line antialiased\nax.grid(axis='x', antialiased=True)\n\n# Set the y-axis grid line antialiased\nax.grid(axis='y', antialiased=True)\n\n# Set the x-axis grid line visible\nax.grid(axis='x', visible=True)\n\n# Set the y-axis grid line visible\nax.grid(axis='y', visible=True)\n\n# Set the x-axis grid line which\nax.grid(axis='x', which='major')\n\n# Set the y-axis grid line which\nax.grid(axis='y', which='major')\n\n# Set the x-axis grid line axis\nax.grid(axis='x', axis='both')\n\n# Set the y-axis grid line axis\nax.grid(axis='y', axis='both')\n\n# Set the x-axis grid line linestyle\nax.grid(axis='x', linestyle='--')\n\n# Set the y-axis grid line linestyle\nax.grid(axis='y', linestyle='--')\n\n# Set the x-axis grid line color\nax.grid(axis='x', color='black')\n\n# Set the y-axis grid line color\nax.grid(axis='y', color='black')\n\n# Set the x-axis grid line linewidth\nax.grid(axis='x', linewidth=0.5)\n\n# Set the y-axis grid line linewidth\nax.grid(axis='y', linewidth=0.5)\n\n# Set the x-axis grid line alpha\nax.grid(axis='x', alpha=0.5)\n\n# Set the y-axis grid line alpha\nax.grid(axis='y', alpha=0.5)\n\n# Set the x-axis grid line zorder\nax.grid(axis='x', zorder=1)\n\n# Set the y-axis grid line zorder\nax.grid(axis='y', zorder=1)\n\n# Set the x-axis grid line hatch\nax.grid(axis='x', hatch='///')\n\n# Set the y-axis grid line hatch\nax.grid(axis='y', hatch='///')\n\n# Set the x-axis grid line antialiased\nax.grid(axis='x', antialiased=True)\n\n# Set the y-axis grid line antialiased\nax.grid(axis='y', antialiased=True)\n\n# Set the x-axis grid line visible\nax.grid(axis='x', visible=True)\n\n# Set the y-axis grid line visible\nax.grid(axis='y', visible=True)\n\n# Set the x-axis grid line which\nax.grid(axis='x', which='major')\n\n# Set the y-axis grid line which\nax.grid(axis='y', which='major')\n\n# Set the x-axis grid line axis\nax.grid(axis='x', axis='both')\n\n# Set the y-axis grid line axis\nax.grid(axis='y', axis='both')\n\n# Set the x-axis grid line linestyle\nax.grid(axis='x', linestyle='--')\n\n# Set the y-axis grid line linestyle\nax.grid(axis='y', linestyle='--')\n\n# Set the x-axis grid line color\nax.grid(axis='x', color='black')\n\n# Set the y-axis grid line color\nax.grid(axis='y', color='black')\n\n# Set the x-axis grid line linewidth\nax.grid(axis='x', linewidth=0.5)\n\n# Set the y-axis grid line linewidth\nax.grid(axis='y', linewidth=0.5)\n\n# Set the x-axis grid line alpha\nax.grid(axis='x', alpha=0.5)\n\n# Set the y-axis grid line alpha\nax.grid(axis='y', alpha=0.5)\n\n# Set the x-axis grid line zorder\nax.grid(axis='x', zorder=1)\n\n# Set the y-axis grid line zorder\nax.grid(axis='y', zorder=1)\n\n# Set the x-axis grid line hatch\nax.grid(axis='x', hatch='///')\n\n# Set the y-axis grid line hatch\nax.grid(axis='y', hatch='///')\n\n# Set the x-axis grid line antialiased\nax.grid(axis='x', antialiased=True)\n\n# Set the y-axis grid line antialiased\nax.grid(axis='y', antialiased=True)\n\n# Set the x-axis grid line visible\nax.grid(axis='x', visible=True)\n\n# Set the y-axis grid line visible\nax.grid(axis='y', visible=True)\n\n# Set the x-axis grid line which\nax.grid(axis='x', which='major')\n\n# Set the y-axis grid line which\nax.grid(axis='y', which='major')\n\n# Set the x-axis grid line axis\nax.grid(axis='x', axis='both')\n\n# Set the y-axis grid line axis\nax.grid(axis='y', axis='both')\n\n# Set the x-axis grid line linestyle\nax.grid(axis='x', linestyle='--')\n\n# Set the y-axis grid line linestyle\nax.grid(axis='y', linestyle='--')\n\n# Set the x-axis grid line color\nax.grid(axis='x', color='black')\n\n# Set the y-axis grid line color\nax.grid(axis='y', color='black')\n\n# Set the x-axis grid line linewidth\nax.grid(axis='x', linewidth=0.5)\n\n# Set the y-axis grid line linewidth\nax.grid(axis='y', linewidth=0.5)\n\n# Set the x-axis grid line alpha\nax.grid(axis='x', alpha=0.5)\n\n# Set the y-axis grid line alpha\nax.grid(axis='y', alpha=0.5)\n\n# Set the x-axis grid line zorder\nax.grid(axis='x', zorder=1)\n\n# Set the y-axis grid line zorder\nax.grid(axis='y', zorder=1)\n\n# Set the x-axis grid line hatch\nax.grid(axis='x', hatch='///')\n\n# Set the y-axis grid line hatch\nax.grid(axis='y', hatch='///')\n\n# Set the x-axis grid line antialiased\nax.grid(axis='x', antialiased=True)\n\n# Set the y-axis grid line antialiased\nax.grid(axis='y', antialiased=True)\n\n# Set the x-axis grid line visible\nax.grid(axis='x', visible=True)\n\n# Set the y-axis grid line visible\nax.grid(axis='y', visible=True)\n\n# Set the x-axis grid line which\nax.grid(axis='x', which='major')\n\n# Set the y-axis grid line which\nax.grid(axis='y', which='major')\n\n# Set the x-axis grid line axis\nax.grid(axis='x', axis='both')\n\n# Set the y-axis grid line axis\nax.grid(axis='y', axis='both')\n\n# Set the x-axis grid line linestyle\nax.grid(axis='x', linestyle='--')\n\n# Set the y-axis grid line linestyle\nax.grid(axis='y', linestyle='--')\n\n# Set the x-axis grid line color\nax.grid(axis='x', color='black')\n\n# Set the y-axis grid line color\nax.grid(axis='y', color='black')\n\n# Set the x-axis grid line linewidth\nax.grid(axis='x', linewidth=0.5)\n\n# Set the y-axis grid line linewidth\nax.grid(axis='y', linewidth=0.5)\n\n# Set the x-axis grid line alpha\nax.grid(axis='x', alpha=0.5)\n\n# Set the y-axis grid line alpha\nax.grid(axis='y', alpha=0.5)\n\n# Set the x-axis grid line zorder\nax.grid(axis='x', zorder=1)\n\n# Set the y-axis grid line zorder\nax.grid(axis='y', zorder=1)\n\n# Set the x-axis grid line hatch\nax.grid(axis='x', hatch='///')\n\n# Set the y-axis grid line hatch\nax.grid(axis='y', hatch='///')\n\n# Set the x-axis grid line antialiased\nax.grid(axis='x', antialiased=True)\n\n# Set the y-axis grid line antialiased\nax.grid(axis='y', antialiased=True)\n\n# Set the x-axis grid line visible\nax.grid(axis='x', visible=True)\n\n# Set the y-axis grid line visible\nax.grid(axis='y', visible=True)\n\n# Set the x-axis grid line which\nax.grid(axis='x', which='major')\n\n# Set the y-axis grid line which\nax.grid(axis='y', which='major')\n\n# Set the x-axis grid line axis\nax.grid(axis='x', axis='both')\n\n# Set the y-axis grid line axis\nax.grid(axis='y', axis='both')\n\n# Set the x-axis grid line linestyle\nax.grid(axis='x', linestyle='--')\n\n# Set the y-axis grid line linestyle\nax.grid(axis='y', linestyle='--')\n\n# Set the x-axis grid line color\nax.grid(axis='x', color='black')\n\n# Set the y-axis grid line color\nax.grid(axis='y', color='black')\n\n# Set the x-axis grid line linewidth\nax.grid(axis='x', linewidth=0.5)\n\n# Set the y-axis grid line linewidth\nax.grid(axis='y', linewidth=0.5)\n\n# Set the x-axis grid line alpha\nax.grid(axis='x', alpha=0.5)\n\n# Set the y-axis grid line alpha\nax.grid(axis='y', alpha=0.5)\n\n# Set the x-axis grid line zorder\nax.grid(axis='x', zorder=1)\n\n# Set the y-axis grid line zorder\nax.grid(axis='y', zorder=1)\n\n# Set the x-axis grid line hatch\nax.grid(axis='x', hatch='///')\n\n# Set the y-axis grid line hatch\nax.grid(axis='y', hatch='///')\n\n# Set the x-axis grid line antialiased\nax.grid(axis='x', antialiased=True)\n\n# Set the y-axis grid line antialiased\nax.grid(axis='y', antialiased=True)\n\n# Set the x-axis grid line visible\nax.grid(axis='x', visible=True)\n\n# Set the y-axis grid line visible\nax.grid(axis='y', visible=True)\n\n# Set the x-axis grid line which\nax.grid(axis='x', which='major')\n\n# Set the y-axis grid line which\nax.grid(axis='y', which='major')\n\n# Set the x-axis grid line axis\nax.grid(axis='x', axis='both')\n\n# Set the y-axis grid line axis\nax.grid(axis='y', axis='both')\n\n# Set the x-axis grid line linestyle\nax.grid(axis='x', linestyle='--')\n\n# Set the y-axis grid line linestyle\nax.grid(axis='y', linestyle='--')\n\n# Set the x-axis grid line color\nax.grid(axis='x', color='black')\n\n# Set the y-axis grid line color\nax.grid(axis='y', color='black')\n\n# Set the x-axis grid line linewidth\nax.grid(axis='x', linewidth=0.5)\n\n# Set the y-axis grid line linewidth\nax.grid(axis='y', linewidth=0.5)\n\n# Set the x-axis grid line alpha\nax.grid(axis='x', alpha=0.5)\n\n# Set the y-axis grid line alpha\nax.grid(axis='y', alpha=0.5)\n\n# Set the x-axis grid line zorder\nax.grid(axis='x', zorder=1)\n\n# Set the y-axis grid line zorder\nax.grid(axis='y', zorder=1)\n\n# Set the x-axis grid line hatch\nax.grid(axis='x', hatch='///')\n\n# Set the y-axis grid line hatch\nax.grid(axis='y', hatch='///')\n\n# Set the x-axis grid line antialiased\nax.grid(axis='x', antialiased=True)\n\n# Set the y-axis grid line antialiased\nax.grid(axis='y', antialiased=True)\n\n# Set the x-axis grid line visible\nax.grid(axis='x', visible=True)\n\n# Set the y-axis grid line visible\nax.grid(axis='y', visible=True)\n\n# Set the x-axis grid line which\nax.grid(axis='x', which='major')\n\n# Set the y-axis grid line which\nax.grid(axis='y', which='major')\n\n# Set the x-axis grid line axis\nax.grid(axis='x', axis='both')\n\n# Set the y-axis grid line axis\nax.grid(axis='y', axis='both')\n\n# Set the x-axis grid line linestyle\nax.grid(axis='x', linestyle='--')\n\n# Set the y-axis grid line linestyle\nax.grid(axis='y', linestyle='--')\n\n# Set the x-axis grid line color\nax.grid(axis='x', color='black')\n\n# Set the y-axis grid line color\nax.grid(axis='y', color='black')\n\n# Set the x-axis grid line linewidth\nax.grid(axis='x', linewidth=0.5)\n\n# Set the y-axis grid line linewidth\nax.grid(axis='y', linewidth=0.5)\n\n# Set the x-axis grid line alpha\nax.grid(axis='x', alpha=0.5)\n\n# Set the y-axis grid line alpha\nax.grid(axis='y', alpha=0.5)\n\n# Set the x-axis grid line zorder\nax.grid(axis='x', zorder=1)\n\n# Set the y-axis grid line zorder\nax.grid(axis='y', zorder=1)\n\n# Set the x-axis grid line hatch\nax.grid(axis='x', hatch='///')\n\n# Set the y-axis grid line hatch\nax.grid(axis='y', hatch='///')\n\n# Set the x-axis grid line antialiased\nax.grid(axis='x', antialiased=True)\n\n# Set the y-axis grid line antialiased\nax.grid(axis='y', antialiased=True)\n\n# Set the x-axis grid line visible\nax.grid(axis='x', visible=True)\n\n# Set the y-axis grid line visible\nax.grid(axis='y', visible=True)\n\n# Set the x-axis grid line which\nax.grid(axis='x', which='major')\n\n# Set the y-axis grid line which\nax.grid(axis='y', which='major')\n\n# Set the x-axis grid line axis\nax.grid(axis='x', axis='both')\n\n# Set the y-axis grid line axis\nax.grid(axis='y', axis='both')\n\n# Set the x-axis grid line linestyle\nax.grid(axis='x', linestyle='--')\n\n# Set the y-axis grid line linestyle\nax.grid(axis='y', linestyle='--')\n\n# Set the x-axis grid line color\nax.grid(axis='x', color='black')\n\n# Set the y-axis grid line color\nax.grid(axis='y', color='black')\n\n# Set the x-axis grid line linewidth\nax.grid(axis='x', linewidth=0.5)\n\n# Set the y-axis grid line linewidth\nax.grid(axis='y', linewidth=0.5)\n\n# Set the x-axis grid line alpha\nax.grid(axis='x', alpha=0.5)\n\n# Set the y-axis grid line alpha\nax.grid(axis='y', alpha=0.5)\n\n# Set the x-axis grid line zorder\nax.grid(axis='x', zorder=1)\n\n# Set the y-axis grid line zorder\nax.grid(axis='y', zorder=1)\n\n# Set the x-axis grid line hatch\nax.grid(axis='x', hatch='///')\n\n# Set the y-axis grid line hatch\nax.grid(axis='y', hatch='///')\n\n# Set the x-axis grid line antialiased\nax.grid(axis='x', antialiased=True)\n\n# Set the y-axis grid line antialiased\nax.grid(axis='y', antialiased=True)\n\n# Set the x-axis grid line visible\nax.grid(axis='x', visible=True)\n\n# Set the y-axis grid line visible\nax.grid(axis='y', visible=True)\n\n# Set the x-axis grid line which\nax.grid(axis='x', which='major')\n\n# Set the y-axis grid line which\nax.grid(axis='y', which='major')\n\n# Set the x-axis grid line axis\nax.grid(axis='x', axis='both')\n\n# Set the y-axis grid line axis\nax.grid(axis='y', axis='both')\n\n# Set the x-axis grid line linestyle\nax.grid(axis='x', linestyle='--')\n\n# Set the y-axis grid line linestyle\nax.grid(axis='y', linestyle='--')\n\n# Set the x-axis grid line color\nax.grid(axis='x', color='black')\n\n# Set the y-axis grid line color\nax.grid(axis='y', color='black')\n\n# Set the x-axis grid line linewidth\nax.grid(axis='x', linewidth=0.5)\n\n# Set the y-axis grid line linewidth\nax.grid(axis='y', linewidth=0.5)\n\n# Set the x-axis grid line alpha\nax.grid(axis='x', alpha=0.5)\n\n# Set the y-axis grid line alpha\nax.grid(axis='y', alpha=0.5)\n\n# Set the x-axis grid line zorder\nax.grid(axis='x', zorder=1)\n\n# Set the y-axis grid line zorder\nax.grid(axis='y', zorder=1)\n\n# Set the x-axis grid line hatch\nax.grid(axis='x', hatch='///')\n\n# Set the y-axis grid line hatch\nax.grid(axis='y', hatch='///')\n\n# Set the x-axis grid line antialiased\n"}
{"file": "dataset/ori_500/heatmap_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Stock Market Analysis')\n\n# Create a grid of subplots\ngs = fig.add_gridspec(3, 4)\n\n# Add a subplot for the first LOH\nax1 = fig.add_subplot(gs[0, :2])\nax1.set_title('LOH0')\nax1.set_facecolor('lightgray')\n\n# Add a subplot for the second LOH\nax2 = fig.add_subplot(gs[1, :2])\nax2.set_title('LOH1')\nax2.set_facecolor('lightblue')\n\n# Add a subplot for the third LOH\nax3 = fig.add_subplot(gs[2, :2])\nax3.set_title('LOH2')\nax3.set_facecolor('lightgreen')\n\n# Add a subplot for the first D\nax4 = fig.add_subplot(gs[:, 2])\nax4.set_title('D\\'2')\nax4.set_facecolor('darkgray')\n\n# Add a subplot for the second D\nax5 = fig.add_subplot(gs[:, 3])\nax5.set_title('D\\'1')\nax5.set_facecolor('darkblue')\n\n# Add a subplot for the third D\nax6 = fig.add_subplot(gs[:, 3])\nax6.set_title('D\\'0')\nax6.set_facecolor('darkgreen')\n\n# Add a subplot for the first LOMLP\nax7 = fig.add_subplot(gs[0, 2:])\nax7.set_title('LOMLP')\nax7.set_facecolor('darkred')\n\n# Add a subplot for the second LOMLP\nax8 = fig.add_subplot(gs[1, 2:])\nax8.set_title('LOMLP')\nax8.set_facecolor('darkorange')\n\n# Add a subplot for the third LOMLP\nax9 = fig.add_subplot(gs[2, 2:])\nax9.set_title('LOMLP')\nax9.set_facecolor('darkgoldenrod')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 10.0))\n\n# Set the title of the plot\nax.set_title('Global Economy')\n\n# Create a color map for the heatmap\ncmap = plt.get_cmap('coolwarm')\n\n# Create a heatmap with random data\ndata = np.random.rand(10, 10)\nim = ax.imshow(data, cmap=cmap)\n\n# Add a color bar to the plot\ncbar = fig.colorbar(im)\n\n# Set the tick labels\ntick_labels = ['LLVA', 'BakLiva', 'GeminiProVision', 'GPT4V', 'CODI']\nax.set_xticks(np.arange(len(tick_labels)))\nax.set_yticks(np.arange(len(tick_labels)))\nax.set_xticklabels(tick_labels)\nax.set_yticklabels(tick_labels)\n\n# Rotate the tick labels and set their alignment.\nplt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\",\n         rotation_mode=\"anchor\")\n\n# Loop over data dimensions and create text annotations.\nfor i in range(len(tick_labels)):\n    for j in range(len(tick_labels)):\n        text = ax.text(j, i, round(data[i, j], 2),\n                       ha=\"center\", va=\"center\", color=\"w\")\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 8.0))\n\n# Set the background color of the plot\nax.set_facecolor('lightblue')\n\n# Create a rectangle for the logo\nlogo = plt.Rectangle((0, 0), 1, 1, color='black')\nax.add_patch(logo)\n\n# Create a bar chart for the ratings\nratings = [1, 2, 3, 4, 5]\nax.bar(ratings, [1, 2, 3, 4, 5], color='orange')\n\n# Create a scatter plot for the reviews\nreviews = [1, 2, 3, 4, 5]\nax.scatter(reviews, [1, 2, 3, 4, 5], color='green')\n\n# Create a histogram for the perpexity\nperplexity = [1, 2, 3, 4, 5]\nax.hist(perplexity, bins=5, color='purple')\n\n# Add a title and labels\nax.set_title('Model Performance Metrics')\nax.set_xlabel('To layer')\nax.set_ylabel('Perplexity')\n\n# Add a text box with the model name and perplexity\nax.text(0.5, 0.5, 'mbert->sat Perplexity=7.59', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=12, bbox=dict(facecolor='yellow', alpha=0.5))\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_16.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(4.0, 8.0))\n\n# Set the title of the chart\nax.set_title('Sales Performance Heatmap')\n\n# Create a color map for the heatmap\ncmap = plt.get_cmap('OrRd')\n\n# Create a heatmap with random data\nheatmap = ax.imshow(np.random.rand(10, 10), cmap=cmap)\n\n# Add a color bar to the right of the heatmap\ncbar = fig.colorbar(heatmap)\n\n# Set the tick labels for the x-axis\nax.set_xticks(np.arange(len(['Product A Q1', 'Product A Q2', 'Product A Q3', 'Product B Q1', 'Product B Q2', 'Product B Q3'])))\nax.set_yticks(np.arange(len(['1', '2', '3', '4', '5', '6', '7', '8', '9', '10'])))\nax.set_xticklabels(['Product A Q1', 'Product A Q2', 'Product A Q3', 'Product B Q1', 'Product B Q2', 'Product B Q3'])\nax.set_yticklabels(['1', '2', '3', '4', '5', '6', '7', '8', '9', '10'])\n\n# Rotate the tick labels and set their alignment.\nplt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\",\n         rotation_mode=\"anchor\")\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_17.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 3))\n\n# Create a color map\ncmap = plt.get_cmap('hot')\n\n# Create a grid of rectangles\nfor i in range(10):\n    for j in range(10):\n        ax.add_patch(plt.Rectangle((i*10, j*10), 10, 10, color=cmap(i/10)))\n\n# Set the limits of the plot\nax.set_xlim(0, 100)\nax.set_ylim(0, 100)\n\n# Set the title of the plot\nax.set_title('Colorful Grid')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_18.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(7.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Weather')\n\n# Create a color map for the scatter plot\ncmap = plt.cm.RdYlGn\n\n# Create a scatter plot with random data\nx = np.random.rand(100)\ny = np.random.rand(100)\ncolors = np.random.rand(100)\nsizes = 1000 * np.random.rand(100)\n\n# Plot the scatter plot\nscatter = ax.scatter(x, y, c=colors, s=sizes, cmap=cmap)\n\n# Add a color bar to the plot\ncbar = fig.colorbar(scatter)\n\n# Set the limits of the x-axis and y-axis\nax.set_xlim([96, 720])\nax.set_ylim([96, 720])\n\n# Set the labels of the x-axis and y-axis\nax.set_xlabel('Time')\nax.set_ylabel('Temperature')\n\n# Set the tick marks on the x-axis and y-axis\nax.set_xticks(np.arange(96, 721, 36))\nax.set_yticks(np.arange(96, 721, 36))\n\n# Set the tick labels on the x-axis and y-axis\nax.set_xticklabels(['96', '120', '144', '168', '192', '216', '240', '264', '288', '312', '336', '360', '384', '408', '432', '456', '480', '504', '528', '552', '576', '600', '624', '648', '672', '696', '720'])\nax.set_yticklabels(['96', '120', '144', '168', '192', '216', '240', '264', '288', '312', '336', '360', '384', '408', '432', '456', '480', '504', '528', '552', '576', '600', '624', '648', '672', '696', '720'])\n\n# Set the grid lines on the x-axis and y-axis\nax.grid(True)\n\n# Set the aspect ratio of the plot\nax.set_aspect('equal')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both',"}
{"file": "dataset/ori_500/heatmap_19.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(20.0, 8.0))\n\n# Set the title of the plot\nax.set_title('a) Role voting in the Werewolf game')\n\n# Create a color map for the roles\ncmap = plt.get_cmap('Blues')\n\n# Create a list of colors for the roles\ncolors = ['blue', 'cyan', 'darkblue', 'darkcyan', 'darkslateblue', 'darkturquoise', 'deepskyblue', 'dodgerblue', 'firebrick', 'forestgreen', 'fuchsia', 'gold', 'gray', 'green', 'hotpink', 'indigo', 'lawngreen', 'lime', 'magenta', 'navy', 'olive', 'orange', 'orchid', 'palegreen', 'paleturquoise', 'peru', 'pink', 'plum', 'powderblue', 'purple', 'red', 'rosybrown', 'royalblue', 'saddlebrown', 'salmon', 'sienna', 'silver', 'skyblue', 'slateblue', 'slategray', 'snow', 'springgreen', 'steelblue', 'tan', 'teal', 'thistle', 'tomato', 'turquoise', 'violet', 'wheat', 'white', 'yellow']\n\n# Create a list of labels for the roles\nlabels = ['Villager', 'Hunter', 'Witch', 'Seer', 'Werewolf', 'Abstain']\n\n# Create a list of values for the roles\nvalues = [15.7, 28.1, 2.6, 14.5, 28.6, 10.5, 76.0, 2.1, 0.5, 4.1, 8.1, 9.2, 50.8, 12.3, 0.9, 6.2, 15.5, 13.9, 16.3, 70.0, 12.0, 0.9, 7.8, 17.3, 14.3, 50.2, 11.2, 0.6, 7.0, 13.4, 5.0, 12.0, 0.9, 9.0, 10.0, 8.7, 14.9, 13.0, 20.0, 1.0, 0.8, 27.1, 17.3, 31.5, 26.0, 35.3, 22.5, 27.4, 32.5, 25.0, 31.0, 10.0, 1.0, 0.8, 0.6, 0.4, 0.2, 0.8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, "}
{"file": "dataset/ori_500/heatmap_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(9.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Question Type: All three types of questions')\n\n# Create a color bar\ncmap = plt.get_cmap('hot')\nnorm = plt.Normalize(vmin=0, vmax=1200)\nsm = plt.cm.ScalarMappable(cmap=cmap, norm=norm)\nsm.set_array([])\nfig.colorbar(sm)\n\n# Create a grid of subplots\ngs = fig.add_gridspec(3, 5)\n\n# Add a subplot for each question type\nq1 = fig.add_subplot(gs[0, :2])\nq2 = fig.add_subplot(gs[0, 2:])\nq3 = fig.add_subplot(gs[1, :2])\nq4 = fig.add_subplot(gs[1, 2:])\nq5 = fig.add_subplot(gs[2, :2])\nq6 = fig.add_subplot(gs[2, 2:])\n\n# Add a subplot for each response action category\nr1 = fig.add_subplot(gs[:, 3])\nr2 = fig.add_subplot(gs[:, 4])\n\n# Set the labels for the subplots\nq1.set_xlabel('Qwen')\nq2.set_xlabel('ChatGLM3')\nq3.set_xlabel('Baichuan2')\nq4.set_xlabel('LLaMA-2')\nq5.set_xlabel('Xverse')\nq6.set_xlabel('Response Action Category')\n\n# Set the data for the subplots\nq1.plot([0, 1, 2, 3, 4], [169, 547, 662, 271, 145], 'b-')\nq2.plot([0, 1, 2, 3, 4], [115, 439, 753, 239, 141], 'g-')\nq3.plot([0, 1, 2, 3, 4], [219, 585, 557, 259, 153], 'r-')\nq4.plot([0, 1, 2, 3, 4], [67, 941, 708, 432, 162], 'c-')\nq5.plot([0, 1, 2, 3, 4], [177, 554, 661, 235, 1246], 'm-')\nq6.plot([0, 1, 2, 3, 4], [1200, 1100, 1000, 900, 800], 'y-')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_20.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Set the title of the plot\nax.set_title('Original')\n\n# Create a bar chart with the data\nbar_width = 0.2\nindex = np.arange(len(['angry', 'sad', 'disgust', 'contempt', 'fear', 'neutral', 'surprise', 'happy']))\nbar1 = ax.bar(index - bar_width/2, [0.10, 0.00, 0.30, 0.00, 0.00, 0.50, 0.00, 0.10], bar_width, label='Original')\nbar2 = ax.bar(index + bar_width/2, [0.12, 0.00, 0.44, 0.00, 0.00, 0.44, 0.00, 0.00], bar_width, label='Adjusted')\n\n# Add some text for labels, title, and custom x-axis tick labels, etc.\nax.set_xlabel('Emotions')\nax.set_ylabel('Intensity')\nax.set_xticks(index)\nax.set_xticklabels(['angry', 'sad', 'disgust', 'contempt', 'fear', 'neutral', 'surprise', 'happy'])\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_21.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 8))\n\n# Set the title of the plot\nax.set_title('Voting Results')\n\n# Define the data for the pie chart\ndata = [50.3, 28.1, 76.0, 12.3, 50.8, 11.2, 49.2, 70.0, 15.7, 28.1, 76.0, 12.3, 50.8, 11.2, 49.2, 70.0, 15.7, 28.1, 76.0, 12.3, 50.8, 11.2, 49.2, 70.0, 15.7, 28.1]\n\n# Define the labels for the pie chart\nlabels = ['Wererwolf', 'Seer', 'Witch', 'Hunter', 'Villager', 'Abstain']\n\n# Create a pie chart with the data and labels\nwedges, texts, autotexts = ax.pie(data, labels=labels, autopct='%1.1f%%', startangle=90)\n\n# Set the aspect ratio of the pie chart to be equal so that pie is drawn as a circle.\nax.axis('equal')  \n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_22.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 3.0))\n\n# Set the title of the plot\nax.set_title('LLaMA')\n\n# Create a color bar\ncbar = fig.colorbar(ax.imshow(np.random.rand(10, 10), cmap='hot'), ax=ax)\n\n# Set the x-axis labels\nax.set_xticks([0, 2, 4, 6, 8])\nax.set_xticklabels(['Baseline', 'Reversed Order', 'Reversed IDs'])\n\n# Set the y-axis labels\nax.set_yticks([0, 2, 4, 6, 8])\nax.set_yticklabels(['#17', '#24', '#3', '#10', '#5'])\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_23.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Stock Prices')\n\n# Set the x-axis label\nax.set_xlabel('Time')\n\n# Set the y-axis label\nax.set_ylabel('Price')\n\n# Create a scatter plot with random data\nax.scatter(range(10), [0.1, 0.08, 0.3, 0.6, 0.0, 0.5, 0.07, 0.1, 0.0, 0.1])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_24.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Set the color map\ncmap = plt.get_cmap('YlGnBu')\n\n# Create a grid of rectangles\nrects = []\nfor i in range(10):\n    for j in range(10):\n        rect = plt.Rectangle((i, j), 1, 1, fc=cmap(i*j/100))\n        rects.append(rect)\n        ax.add_patch(rect)\n\n# Set the limits of the plot\nax.set_xlim(0, 10)\nax.set_ylim(0, 10)\n\n# Set the title of the plot\nax.set_title('Harvest [t/year]')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_25.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Crops and their characteristics')\n\n# Set the x-axis label\nax.set_xlabel('Crops')\n\n# Set the y-axis label\nax.set_ylabel('Characteristics')\n\n# Define the crops and their characteristics\ncrops = ['cucumber', 'tomato', 'lettuce', 'asparagus', 'potato', 'barley']\nharvest = [1.2, 1.5, 1.7, 1.9, 2.1, 2.3]\nquality = [0.4, 0.5, 0.6, 0.7, 0.8, 0.9]\n\n# Plot the data\nax.bar(crops, harvest, color='blue')\nax.plot(crops, quality, color='red')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_26.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(9.0, 6.0))\n\n# Create a grid of subplots\ngs = fig.add_gridspec(4, 4)\n\n# Add a subplot for each image\nax1 = fig.add_subplot(gs[0, :2])\nax2 = fig.add_subplot(gs[0, 2:])\nax3 = fig.add_subplot(gs[1, :2])\nax4 = fig.add_subplot(gs[1, 2:])\nax5 = fig.add_subplot(gs[2, :2])\nax6 = fig.add_subplot(gs[2, 2:])\nax7 = fig.add_subplot(gs[3, :2])\nax8 = fig.add_subplot(gs[3, 2:])\n\n# Display the images\nax1.imshow(np.random.rand(10, 10), cmap='Greens')\nax2.imshow(np.random.rand(10, 10), cmap='Blues')\nax3.imshow(np.random.rand(10, 10), cmap='Reds')\nax4.imshow(np.random.rand(10, 10), cmap='Greens')\nax5.imshow(np.random.rand(10, 10), cmap='Blues')\nax6.imshow(np.random.rand(10, 10), cmap='Reds')\nax7.imshow(np.random.rand(10, 10), cmap='Greens')\nax8.imshow(np.random.rand(10, 10), cmap='Blues')\n\n# Set the title of each subplot\nax1.set_title('None')\nax2.set_title('none')\nax3.set_title('nearest')\nax4.set_title('bilinear')\nax5.set_title('bicubic')\nax6.set_title('spline16')\nax7.set_title('spline36')\nax8.set_title('hanning')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_27.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Set the title of the plot\nax.set_title('default: no edges')\n\n# Create a color map for the scatter plot\ncmap = plt.get_cmap('tab20')\n\n# Create a scatter plot with random data\nx = np.random.rand(10)\ny = np.random.rand(10)\ncolors = np.random.rand(10)\nsizes = 1000 * np.random.rand(10)\nscatter = ax.scatter(x, y, c=colors, s=sizes, cmap=cmap)\n\n# Add a color bar to the plot\ncbar = fig.colorbar(scatter)\ncbar.set_label('Color scale')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_28.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Create a grid of subplots\ngs = ax.grid(True)\n\n# Set the title of the plot\nax.set_title('Sales of vendors (in tons/year)')\n\n# Set the labels for the x-axis and y-axis\nax.set_xlabel('Vendors')\nax.set_ylabel('Sales')\n\n# Create a list of vendors\nvendors = ['Vendor A', 'Vendor B', 'Vendor C', 'Vendor D', 'Vendor E', 'Vendor F', 'Vendor G']\n\n# Create a list of sales data\nsales = [1.5, 2.8, 1.0, 0.7, 0.9, 1.2, 0.3]\n\n# Create a bar chart\nax.bar(vendors, sales, color='blue')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_29.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(5.0, 4.0))\n\n# Set the title of the plot\nax.set_title('Degree of acceptance of a product')\n\n# Create a bar chart\nax.bar(['High', 'Medium', 'Low'], [42, 38, 35], color='green')\nax.bar(['High', 'Medium', 'Low'], [79, 53, 35], color='blue')\nax.bar(['High', 'Medium', 'Low'], [4, 5, 75], color='red')\nax.bar(['High', 'Medium', 'Low'], [17, 36, 23], color='yellow')\n\n# Set the x-axis label\nax.set_xlabel('Acceptance Degree')\n\n# Set the y-axis label\nax.set_ylabel('Product')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Bottlebeck Distance')\n\n# Create a color map\ncmap = plt.get_cmap('Blues')\n\n# Create a color bar\ncbar = fig.colorbar(cmap(np.linspace(0, 1, 100)), ax=ax)\n\n# Set the color bar label\ncbar.set_label('Wasserstein Distance')\n\n# Set the x-axis label\nax.set_xlabel('Bottlebeck Distance')\n\n# Set the y-axis label\nax.set_ylabel('Wasserstein Distance')\n\n# Set the x-axis limits\nax.set_xlim([0.1, 0.9])\n\n# Set the y-axis limits\nax.set_ylim([0.1, 0.9])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_30.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('ROC\\'s AUC')\n\n# Create a color bar\ncbar = fig.colorbar(ax.imshow(np.random.rand(10, 10), cmap='hot'), ax=ax)\n\n# Set the ticks for the x-axis\nax.set_xticks(np.arange(0, 13, 2))\nax.set_yticks(np.arange(0, 13, 2))\n\n# Set the labels for the x-axis\nax.set_xticklabels(['0', '2', '4', '6', '8', '10', '12'])\n\n# Set the labels for the y-axis\nax.set_yticklabels(['0', '2', '4', '6', '8', '10', '12'])\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 3.0))\n\n# Create a color map\ncmap = plt.get_cmap('Greens')\n\n# Create a grid of rectangles\nfor i in range(10):\n    for j in range(10):\n        rect = plt.Rectangle((i, j), 1, 1, color=cmap(np.random.rand()))\n        ax.add_patch(rect)\n\n# Set the limits of the plot\nax.set_xlim(0, 10)\nax.set_ylim(0, 10)\n\n# Set the title of the plot\nax.set_title('C Subject')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(12.0, 6.0))\n\n# Set the background color of the plot\nax.set_facecolor('purple')\n\n# Create a bar chart with the data\nbars = ax.bar(range(1, 11), [44, 35, 33, 31, 29, 27, 25, 23, 21, 19], color='yellow')\n\n# Add labels to the bars\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 2), ha='center', va='bottom')\n\n# Set the title of the plot\nax.set_title('Live Score')\n\n# Set the x-axis label\nax.set_xlabel('Game Number')\n\n# Set the y-axis label\nax.set_ylabel('Score')\n\n# Set the y-axis limits\nax.set_ylim([0, 50])\n\n# Set the x-axis limits\nax.set_xlim([0, 11])\n\n# Set the grid\nax.grid(True)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Set the color map\ncmap = plt.get_cmap('hot')\n\n# Create a rectangle for the graph\nrect = plt.Rectangle((0, 0), 1, 1, fc='none', ec='k')\nax.add_patch(rect)\n\n# Set the title of the graph\nax.set_title('BabelStream triad Average Memory Bandwidth (GB/s)', fontsize=20)\n\n# Set the x-axis label\nax.set_xlabel('Programming Model', fontsize=14)\n\n# Set the y-axis label\nax.set_ylabel('Average Memory Bandwidth (GB/s)', fontsize=14)\n\n# Set the x-ticks\nx_ticks = ['Kokkos', 'RAJA', 'OMP', 'OACC', 'SYCL', 'Native Port']\nax.set_xticks(np.arange(len(x_ticks)))\nax.set_xticklabels(x_ticks, rotation=45, ha=\"right\")\n\n# Set the y-ticks\ny_ticks = [200, 400, 600, 800, 1000, 1200, 1400, 1600]\nax.set_yticks(y_ticks)\n\n# Set the y-tick labels\ny_tick_labels = ['200', '400', '600', '800', '1000', '1200', '1400', '1600']\nax.set_yticklabels(y_tick_labels)\n\n# Set the color bar\ncbar = fig.colorbar(rect, ax=ax)\ncbar.set_label('Memory Bandwidth (GB/s)', rotation=270, labelpad=15)\n\n# Set the color map\ncmap = plt.get_cmap('hot')\n\n# Set the color bar\ncbar = fig.colorbar(rect, ax=ax)\ncbar.set_label('Memory Bandwidth (GB/s)', rotation=270, labelpad=15)\n\n# Set the color map\ncmap = plt.get_cmap('hot')\n\n# Set the color bar\ncbar = fig.colorbar(rect, ax=ax)\ncbar.set_label('Memory Bandwidth (GB/s)', rotation=270, labelpad=15)\n\n# Set the color map\ncmap = plt.get_cmap('hot')\n\n# Set the color bar\ncbar = fig.colorbar(rect, ax=ax)\ncbar.set_label('Memory Bandwidth (GB/s)', rotation=270, labelpad=15)\n\n# Set the color map\ncmap = plt.get_cmap('hot')\n\n# Set the color bar\ncbar = fig.colorbar(rect, ax=ax)\ncbar.set_label('Memory Bandwidth (GB/s)', rotation=270, labelpad=15)\n\n# Set the color map\ncmap = plt.get_cmap('hot')\n\n# Set the color bar\ncbar = fig.colorbar(rect, ax=ax)\ncbar.set_label('Memory Bandwidth (GB/s)', rotation=270, labelpad=15)\n\n# Set the color map\ncmap = plt.get_cmap('hot')\n\n# Set the color bar\ncbar = fig.colorbar(rect, ax=ax)\ncbar.set_label('Memory Bandwidth (GB/s)', rotation=270, labelpad=15)\n\n# Set the color map\ncmap = plt.get_cmap('hot')\n\n# Set the color bar\ncbar = fig.colorbar(rect, ax=ax)\ncbar.set_label('Memory Bandwidth (GB/s)', rotation=270, labelpad=15)\n\n# Set the color map\ncmap = plt.get_cmap('hot')\n\n# Set the color bar\ncbar = fig.colorbar(rect, ax=ax)\ncbar.set_label('Memory Bandwidth (GB/s)', rotation=270, labelpad=15)\n\n# Set the color map\ncmap = plt.get_cmap('hot')\n\n# Set the color bar\ncbar = fig.colorbar(rect, ax=ax)\ncbar.set_label('Memory Bandwidth (GB/s)', rotation=270, labelpad=15)\n\n# Set the color map\ncmap = plt.get_cmap('hot')\n\n# Set the color bar\ncbar = fig.colorbar(rect, ax=ax)\ncbar.set_label('Memory Bandwidth (GB/s)', rotation=270, labelpad=15)\n\n# Set the color map\ncmap = plt.get_cmap('hot')\n\n# Set the color bar\ncbar = fig.colorbar(rect, ax=ax)\ncbar.set_label('Memory Bandwidth (GB/s)', rotation=270, labelpad=15)\n\n# Set the color map\ncmap = plt.get_cmap('hot')\n\n# Set the color bar\ncbar = fig.colorbar(rect, ax=ax)\ncbar.set_label('Memory Bandwidth (GB/s)', rotation=270, labelpad=15)\n\n# Set the color map\ncmap = plt.get_cmap('hot')\n\n# Set the color bar\ncbar = fig.colorbar(rect, ax=ax)\ncbar.set_label('Memory Bandwidth (GB/s)', rotation=270, labelpad=15)\n\n# Set the color map\ncmap = plt.get_cmap('hot')\n\n# Set the color bar\ncbar = fig.colorbar(rect, ax=ax)\ncbar.set_label('Memory Bandwidth (GB/s)', rotation=270, labelpad=15)\n\n# Set the color map\ncmap = plt.get_cmap('hot')\n\n# Set the color bar\ncbar = fig.colorbar(rect, ax=ax)\ncbar.set_label('Memory Bandwidth (GB/s)', rotation=270, labelpad=15)\n\n# Set the color map\ncmap = plt.get_cmap('hot')\n\n# Set the color bar\ncbar = fig.colorbar(rect, ax=ax)\ncbar.set_label('Memory Bandwidth (GB/s)', rotation=270, labelpad=15)\n\n# Set the color map\ncmap = plt.get_cmap('hot')\n\n# Set the color bar\ncbar = fig.colorbar(rect, ax=ax)\ncbar.set_label('Memory Bandwidth (GB/s)', rotation=270, labelpad=15)\n\n# Set the color map\ncmap = plt.get_cmap('hot')\n\n# Set the color bar\ncbar = fig.colorbar(rect, ax=ax)\ncbar.set_label('Memory Bandwidth (GB/s)', rotation=270, labelpad=15)\n\n# Set the color map\ncmap = plt.get_cmap('hot')\n\n# Set the color bar\ncbar = fig.colorbar(rect, ax=ax)\ncbar.set_label('Memory Bandwidth (GB/s)', rotation=270, labelpad=15)\n\n# Set the color map\ncmap = plt.get_cmap('hot')\n\n# Set the color bar\ncbar = fig.colorbar(rect, ax=ax)\ncbar.set_label('Memory Bandwidth (GB/s)', rotation=270, labelpad=15)\n\n# Set the color map\ncmap = plt.get_cmap('hot')\n\n# Set the color bar\ncbar = fig.colorbar(rect, ax=ax)\ncbar.set_label('Memory Bandwidth (GB/s)', rotation=270, labelpad=15)\n\n# Set the color map\ncmap = plt.get_cmap('hot')\n\n# Set the color bar\ncbar = fig.colorbar(rect, ax=ax)\ncbar.set_label('Memory Bandwidth (GB/s)', rotation=270, labelpad=15)\n\n# Set the color map\ncmap = plt.get_cmap('hot')\n\n# Set the color bar\ncbar = fig.colorbar(rect, ax=ax)\ncbar.set_label('Memory Bandwidth (GB/s)', rotation=270, labelpad=15)\n\n# Set the color map\ncmap = plt.get_cmap('hot')\n\n# Set the color bar\ncbar = fig.colorbar(rect, ax=ax)\ncbar.set_label('Memory Bandwidth (GB/s)', rotation=270, labelpad=15)\n\n# Set the color map\ncmap = plt.get_cmap('hot')\n\n# Set the color bar\ncbar = fig.colorbar(rect, ax=ax)\ncbar.set_label('Memory Bandwidth (GB/s)', rotation=270, labelpad=15)\n\n# Set the color map\ncmap = plt.get_cmap('hot')\n\n# Set the color bar\ncbar = fig.colorbar(rect, ax=ax)\ncbar.set_label('Memory Bandwidth (GB/s)', rotation=270, labelpad=15)\n\n# Set the color map\ncmap = plt.get_cmap('hot')\n\n# Set the color bar\ncbar = fig.colorbar(rect, ax=ax)\ncbar.set_label('Memory Bandwidth (GB/s)', rotation=270, labelpad=15)\n\n# Set the color map\ncmap = plt.get_cmap('hot')\n\n# Set the color bar\ncbar = fig.colorbar(rect, ax=ax)\ncbar.set_label('Memory Bandwidth (GB/s)', rotation=270, labelpad=15)\n\n# Set the color map\ncmap = plt.get_cmap('hot')\n\n# Set the color bar\ncbar = fig.colorbar(rect, ax=ax)\ncbar.set_label('Memory Bandwidth (GB/s)', rotation=270, labelpad=15)\n\n# Set the color map\ncmap = plt.get_cmap('hot')\n\n# Set the color bar\ncbar = fig.colorbar(rect, ax=ax)\ncbar.set_label('Memory Bandwidth (GB/s)', rotation=270, labelpad=15)\n\n# Set the color map\ncmap = plt.get_cmap('hot')\n\n# Set the color bar\ncbar = fig.colorbar(rect, ax=ax)\ncbar.set_label('Memory Bandwidth (GB/s)', rotation=270, labelpad=15)\n\n# Set the color map\ncmap = plt.get_cmap('hot')\n\n# Set the color bar\ncbar = fig.colorbar(rect, ax=ax)\ncbar.set_label('Memory Bandwidth (GB/s)', rotation=270, labelpad=15)\n\n# Set the color map\ncmap = plt.get_cmap('hot')\n\n# Set the color bar\ncbar = fig.colorbar(rect, ax=ax)\ncbar.set_label('Memory Bandwidth (GB/s)', rotation=270, labelpad=15)\n\n# Set the color map\ncmap = plt.get_cmap('hot')\n\n# Set the color bar\ncbar = fig.colorbar(rect, ax=ax)\ncbar.set_label('Memory Bandwidth (GB/s)', rotation=270, labelpad=15)\n\n# Set the color map\ncmap = plt.get_cmap('hot')\n\n# Set the color bar\ncbar = fig.colorbar(rect, ax=ax)\ncbar.set_label('Memory Bandwidth (GB/s)', rotation=270, labelpad=15)\n\n# Set the color map\ncmap = plt.get_cmap('hot')\n\n# Set the color bar\ncbar = fig.colorbar(rect, ax=ax)\ncbar.set_label('Memory Bandwidth (GB/s)', rotation=270, labelpad=15)\n\n# Set the color map\ncmap = plt.get_cmap('hot')\n\n# Set the color bar\ncbar = fig.colorbar(rect, ax=ax)\ncbar.set_label('Memory Bandwidth (GB/s)', rotation=270, labelpad=15)\n\n# Set the color map\ncmap = plt.get_cmap('hot')\n\n# Set the color bar\ncbar = fig.colorbar(rect, ax=ax)\ncbar.set_label('Memory Bandwidth (GB/s)', rotation=270, labelpad=15)\n\n# Set the color map\ncmap = plt.get_cmap('hot')\n\n# Set the color bar\ncbar = fig.colorbar(rect, ax=ax)\ncbar.set_label('Memory Bandwidth (GB/s)', rotation=270, labelpad=15)\n\n# Set the color map\ncmap = plt.get_cmap('hot')\n\n# Set the color bar\ncbar = fig.colorbar(rect, ax=ax)\ncbar.set_label('Memory Bandwidth (GB/s)', rotation=270, labelpad=15)\n\n# Set the color map\ncmap = plt.get_cmap('hot')\n\n# Set the color bar\ncbar = fig.colorbar(rect, ax=ax)\ncbar.set_label('Memory Bandwidth (GB/s)', rotation=270, labelpad=15)\n\n# Set the color map\ncmap = plt.get_cmap('hot')\n\n# Set the color bar\ncbar = fig.colorbar(rect, ax=ax)\ncbar.set_label('Memory Bandwidth (GB/s)', rotation=270, labelpad=15)\n\n# Set the color map\ncmap = plt.get_cmap('hot')\n\n# Set the color bar\ncbar = fig.colorbar(rect, ax=ax)\ncbar.set_label('Memory Bandwidth (GB/s)', rotation=270, labelpad=15)\n\n# Set the color map\ncmap = plt.get_cmap('hot')\n\n# Set the color bar\ncbar = fig.colorbar(rect, ax=ax)\ncbar.set_label('Memory Bandwidth (GB/s)', rotation=270, labelpad=15)\n\n# Set the color map\ncmap = plt.get_cmap('hot')\n\n# Set the color bar\ncbar = fig.colorbar(rect, ax=ax)\ncbar.set_label('Memory Bandwidth (GB/s)', rotation=270, labelpad=15)\n\n# Set the color map\ncmap = plt.get_cmap('hot')\n\n# Set the color bar\ncbar = fig.colorbar(rect, ax=ax)\ncbar.set_label('Memory Bandwidth (GB/s)', rotation=270, labelpad=15)\n\n# Set the color map\ncmap = plt.get_cmap('hot')\n\n# Set the color bar\ncbar = fig.colorbar(rect, ax=ax)\ncbar.set_label('Memory Bandwidth (GB/s)', rotation=270, labelpad=15)\n\n# Set the color map\ncmap = plt.get_cmap('hot')\n\n# Set the color bar\ncbar = fig.colorbar(rect, ax=ax)\ncbar.set_label('Memory Bandwidth (GB/s)', rotation=270, labelpad=15)\n\n# Set the color map\ncmap = plt.get_cmap('hot')\n\n# Set the color bar\ncbar = fig.colorbar(rect, ax=ax)\ncbar.set_label('Memory Bandwidth (GB/s)', rotation=270, labelpad=15)\n\n# Set the color map\ncmap = plt.get_cmap('hot')\n\n# Set the color bar\ncbar = fig.colorbar(rect, ax=ax)\ncbar.set_label('Memory Bandwidth (GB/s)', rotation=270, labelpad=15)\n\n# Set the color map\ncmap = plt.get_cmap('hot')\n\n# Set the color bar\ncbar = fig.colorbar(rect, ax=ax)\ncbar.set_label('Memory Bandwidth (GB/s)', rotation=270, labelpad=15)\n\n# Set the color map\ncmap = plt.get_cmap('hot')\n\n# Set the color bar\ncbar = fig.colorbar(rect, ax=ax)\ncbar.set_label('Memory Bandwidth (GB/s)', rotation=270, labelpad=15)\n\n# Set the color map\ncmap = plt.get_cmap('hot')\n\n# Set the color bar\ncbar = fig.colorbar(rect, ax=ax)\ncbar.set_label('Memory Bandwidth (GB/s)', rotation=270, labelpad=15)\n\n# Set the color map\ncmap = plt.get_cmap('hot')\n\n# Set the color bar\ncbar = fig.colorbar(rect, ax=ax)\ncbar.set_label('Memory Bandwidth (GB/s)', rotation=270, labelpad=15)\n\n# Set the color map\ncmap = plt.get_cmap('hot')\n\n# Set the color bar\ncbar = fig.colorbar(rect, ax=ax)\ncbar.set_label('Memory Bandwidth (GB/s)', rotation=270, labelpad=15)\n\n# Set the color map\ncmap = plt.get_cmap('hot')\n\n# Set the color bar\ncbar = fig.colorbar(rect, ax=ax)\ncbar.set_label('Memory Bandwidth (GB/s)', rotation=270, labelpad=15)\n\n# Set the color map\ncmap = plt.get_cmap('hot')\n\n# Set the color bar\ncbar = fig.colorbar(rect, ax=ax)\ncbar.set_label('Memory Bandwidth (GB/s)', rotation=270, labelpad=15)\n\n# Set the color map\ncmap = plt.get_cmap('hot')\n\n# Set the color bar\ncbar = fig.colorbar(rect, ax=ax)\ncbar.set_label('Memory Bandwidth (GB/s)', rotation=270, labelpad=15)\n\n# Set the color map\ncmap = plt.get_cmap('hot')\n\n# Set the color bar\ncbar = fig.colorbar(rect, ax=ax)\ncbar.set_label('Memory Bandwidth (GB/s)', rotation=270, labelpad=15)\n\n# Set the color map\ncmap = plt.get_cmap('hot')\n\n# Set the color bar\ncbar = fig.colorbar(rect, ax=ax)\ncbar.set_label('Memory Bandwidth (GB/s)', rotation=270, labelpad=15)\n\n# Set the color map\ncmap = plt.get_cmap('hot')\n\n# Set the color bar\ncbar = fig.colorbar(rect, ax=ax)\ncbar.set_label('Memory Bandwidth (GB/s)', rotation=270, labelpad=15)\n\n# Set the color map\ncmap = plt.get_cmap('hot')\n\n# Set the color bar\ncbar = fig.colorbar(rect, ax=ax)\ncbar.set_label('Memory Bandwidth (GB/s)', rotation=270, labelpad=15)\n\n# Set the color map\ncmap = plt.get_cmap('hot')\n\n# Set the color bar\ncbar = fig.colorbar(rect, ax=ax)\ncbar.set_label('Memory Bandwidth (GB/s)', rotation=270, labelpad=15)\n\n# Set the color map\ncmap = plt.get_cmap('hot')\n\n# Set the color bar\ncbar = fig.colorbar(rect, ax=ax)\ncbar.set_label('Memory Bandwidth (GB/s)', rotation=270, labelpad=15)\n\n# Set the color map\ncmap = plt.get_cmap('hot')\n\n# Set the color bar\ncbar = fig.colorbar(rect, ax=ax)\ncbar.set_label('Memory Bandwidth (GB/s)', rotation=270, labelpad=15)\n\n# Set the color map\ncmap = plt.get_cmap('hot')\n\n# Set the color bar\ncbar = fig.colorbar(rect, ax=ax)\ncbar.set_label('Memory Bandwidth (GB/s)', rotation=270, labelpad=15)\n\n# Set the color map\ncmap"}
{"file": "dataset/ori_500/heatmap_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Set the title of the plot\nax.set_title('Correlation Coefficients')\n\n# Create a color map\ncmap = plt.get_cmap('coolwarm')\n\n# Create a grid of subplots\ngs = fig.add_gridspec(3, 4)\n\n# Create a subplot for each correlation coefficient\nfor i, j in [(0, 0), (0, 1), (0, 2), (0, 3), (1, 0), (1, 1), (1, 2), (1, 3), (2, 0), (2, 1), (2, 2), (2, 3)]:\n    ax = fig.add_subplot(gs[i, j])\n    ax.imshow(np.random.rand(10, 10), cmap=cmap)\n    ax.set_xlabel('x')\n    ax.set_ylabel('y')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the color map\ncmap = plt.get_cmap('Blues')\n\n# Create a bar chart\nbars = ax.bar(range(10), np.random.rand(10), color=cmap(np.linspace(0, 1, 10)))\n\n# Add labels and title\nax.set_xlabel('Players')\nax.set_ylabel('Rankings')\nax.set_title('Player Rankings')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfig, ax = plt.subplots(figsize=(5.0, 6.0))\n\n# Set the background color of the plot\nax.set_facecolor('#2b2d42')\n\n# Create a grid of subplots\ngs = ax.grid(True)\n\n# Set the x-axis and y-axis limits\nax.set_xlim(0, 15)\nax.set_ylim(0, 15)\n\n# Set the x-axis and y-axis labels\nax.set_xlabel('Layers')\nax.set_ylabel('Colors')\n\n# Set the title of the plot\nax.set_title('pythia-1b')\n\n# Set the color of the x-axis and y-axis labels\nax.xaxis.label.set_color('white')\nax.yaxis.label.set_color('white')\n\n# Set the color of the x-axis and y-axis ticks\nax.tick_params(axis='x', colors='white')\nax.tick_params(axis='y', colors='white')\n\n# Set the color of the x-axis and y-axis tick labels\nax.tick_params(axis='both', which='major', labelcolor='white')\n\n# Set the color of the x-axis and y-axis grid lines\nax.grid(color='white', linestyle='-', linewidth=0.5)\n\n# Set the color of the x-axis and y-axis spines\nax.spines['bottom'].set_color('white')\nax.spines['top'].set_color('white')\nax.spines['right'].set_color('white')\nax.spines['left'].set_color('white')\n\n# Set the color of the x-axis and y-axis ticks\nax.tick_params(axis='x', colors='white')\nax.tick_params(axis='y', colors='white')\n\n# Set the color of the x-axis and y-axis tick labels\nax.tick_params(axis='both', which='major', labelcolor='white')\n\n# Set the color of the x-axis and y-axis grid lines\nax.grid(color='white', linestyle='-', linewidth=0.5)\n\n# Set the color of the x-axis and y-axis spines\nax.spines['bottom'].set_color('white')\nax.spines['top'].set_color('white')\nax.spines['right'].set_color('white')\nax.spines['left'].set_color('white')\n\n# Set the color of the x-axis and y-axis ticks\nax.tick_params(axis='x', colors='white')\nax.tick_params(axis='y', colors='white')\n\n# Set the color of the x-axis and y-axis tick labels\nax.tick_params(axis='both', which='major', labelcolor='white')\n\n# Set the color of the x-axis and y-axis grid lines\nax.grid(color='white', linestyle='-', linewidth=0.5)\n\n# Set the color of the x-axis and y-axis spines\nax.spines['bottom'].set_color('white')\nax.spines['top'].set_color('white')\nax.spines['right'].set_color('white')\nax.spines['left'].set_color('white')\n\n# Set the color of the x-axis and y-axis ticks\nax.tick_params(axis='x', colors='white')\nax.tick_params(axis='y', colors='white')\n\n# Set the color of the x-axis and y-axis tick labels\nax.tick_params(axis='both', which='major', labelcolor='white')\n\n# Set the color of the x-axis and y-axis grid lines\nax.grid(color='white', linestyle='-', linewidth=0.5)\n\n# Set the color of the x-axis and y-axis spines\nax.spines['bottom'].set_color('white')\nax.spines['top'].set_color('white')\nax.spines['right'].set_color('white')\nax.spines['left'].set_color('white')\n\n# Set the color of the x-axis and y-axis ticks\nax.tick_params(axis='x', colors='white')\nax.tick_params(axis='y', colors='white')\n\n# Set the color of the x-axis and y-axis tick labels\nax.tick_params(axis='both', which='major', labelcolor='white')\n\n# Set the color of the x-axis and y-axis grid lines\nax.grid(color='white', linestyle='-', linewidth=0.5)\n\n# Set the color of the x-axis and y-axis spines\nax.spines['bottom'].set_color('white')\nax.spines['top'].set_color('white')\nax.spines['right'].set_color('white')\nax.spines['left'].set_color('white')\n\n# Set the color of the x-axis and y-axis ticks\nax.tick_params(axis='x', colors='white')\nax.tick_params(axis='y', colors='white')\n\n# Set the color of the x-axis and y-axis tick labels\nax.tick_params(axis='both', which='major', labelcolor='white')\n\n# Set the color of the x-axis and y-axis grid lines\nax.grid(color='white', linestyle='-', linewidth=0.5)\n\n# Set the color of the x-axis and y-axis spines\nax.spines['bottom'].set_color('white')\nax.spines['top'].set_color('white')\nax.spines['right'].set_color('white')\nax.spines['left'].set_color('white')\n\n# Set the color of the x-axis and y-axis ticks\nax.tick_params(axis='x', colors='white')\nax.tick_params(axis='y', colors='white')\n\n# Set the color of the x-axis and y-axis tick labels\nax.tick_params(axis='both', which='major', labelcolor='white')\n\n# Set the color of the x-axis and y-axis grid lines\nax.grid(color='white', linestyle='-', linewidth=0.5)\n\n# Set the color of the x-axis and y-axis spines\nax.spines['bottom'].set_color('white')\nax.spines['top'].set_color('white')\nax.spines['right'].set_color('white')\nax.spines['left'].set_color('white')\n\n# Set the color of the x-axis and y-axis ticks\nax.tick_params(axis='x', colors='white')\nax.tick_params(axis='y', colors='white')\n\n# Set the color of the x-axis and y-axis tick labels\nax.tick_params(axis='both', which='major', labelcolor='white')\n\n# Set the color of the x-axis and y-axis grid lines\nax.grid(color='white', linestyle='-', linewidth=0.5)\n\n# Set the color of the x-axis and y-axis spines\nax.spines['bottom'].set_color('white')\nax.spines['top'].set_color('white')\nax.spines['right'].set_color('white')\nax.spines['left'].set_color('white')\n\n# Set the color of the x-axis and y-axis ticks\nax.tick_params(axis='x', colors='white')\nax.tick_params(axis='y', colors='white')\n\n# Set the color of the x-axis and y-axis tick labels\nax.tick_params(axis='both', which='major', labelcolor='white')\n\n# Set the color of the x-axis and y-axis grid lines\nax.grid(color='white', linestyle='-', linewidth=0.5)\n\n# Set the color of the x-axis and y-axis spines\nax.spines['bottom'].set_color('white')\nax.spines['top'].set_color('white')\nax.spines['right'].set_color('white')\nax.spines['left'].set_color('white')\n\n# Set the color of the x-axis and y-axis ticks\nax.tick_params(axis='x', colors='white')\nax.tick_params(axis='y', colors='white')\n\n# Set the color of the x-axis and y-axis tick labels\nax.tick_params(axis='both', which='major', labelcolor='white')\n\n# Set the color of the x-axis and y-axis grid lines\nax.grid(color='white', linestyle='-', linewidth=0.5)\n\n# Set the color of the x-axis and y-axis spines\nax.spines['bottom'].set_color('white')\nax.spines['top'].set_color('white')\nax.spines['right'].set_color('white')\nax.spines['left'].set_color('white')\n\n# Set the color of the x-axis and y-axis ticks\nax.tick_params(axis='x', colors='white')\nax.tick_params(axis='y', colors='white')\n\n# Set the color of the x-axis and y-axis tick labels\nax.tick_params(axis='both', which='major', labelcolor='white')\n\n# Set the color of the x-axis and y-axis grid lines\nax.grid(color='white', linestyle='-', linewidth=0.5)\n\n# Set the color of the x-axis and y-axis spines\nax.spines['bottom'].set_color('white')\nax.spines['top'].set_color('white')\nax.spines['right'].set_color('white')\nax.spines['left'].set_color('white')\n\n# Set the color of the x-axis and y-axis ticks\nax.tick_params(axis='x', colors='white')\nax.tick_params(axis='y', colors='white')\n\n# Set the color of the x-axis and y-axis tick labels\nax.tick_params(axis='both', which='major', labelcolor='white')\n\n# Set the color of the x-axis and y-axis grid lines\nax.grid(color='white', linestyle='-', linewidth=0.5)\n\n# Set the color of the x-axis and y-axis spines\nax.spines['bottom'].set_color('white')\nax.spines['top'].set_color('white')\nax.spines['right'].set_color('white')\nax.spines['left'].set_color('white')\n\n# Set the color of the x-axis and y-axis ticks\nax.tick_params(axis='x', colors='white')\nax.tick_params(axis='y', colors='white')\n\n# Set the color of the x-axis and y-axis tick labels\nax.tick_params(axis='both', which='major', labelcolor='white')\n\n# Set the color of the x-axis and y-axis grid lines\nax.grid(color='white', linestyle='-', linewidth=0.5)\n\n# Set the color of the x-axis and y-axis spines\nax.spines['bottom'].set_color('white')\nax.spines['top'].set_color('white')\nax.spines['right'].set_color('white')\nax.spines['left'].set_color('white')\n\n# Set the color of the x-axis and y-axis ticks\nax.tick_params(axis='x', colors='white')\nax.tick_params(axis='y', colors='white')\n\n# Set the color of the x-axis and y-axis tick labels\nax.tick_params(axis='both', which='major', labelcolor='white')\n\n# Set the color of the x-axis and y-axis grid lines\nax.grid(color='white', linestyle='-', linewidth=0.5)\n\n# Set the color of the x-axis and y-axis spines\nax.spines['bottom'].set_color('white')\nax.spines['top'].set_color('white')\nax.spines['right'].set_color('white')\nax.spines['left'].set_color('white')\n\n# Set the color of the x-axis and y-axis ticks\nax.tick_params(axis='x', colors='white')\nax.tick_params(axis='y', colors='white')\n\n# Set the color of the x-axis and y-axis tick labels\nax.tick_params(axis='both', which='major', labelcolor='white')\n\n# Set the color of the x-axis and y-axis grid lines\nax.grid(color='white', linestyle='-', linewidth=0.5)\n\n# Set the color of the x-axis and y-axis spines\nax.spines['bottom'].set_color('white')\nax.spines['top'].set_color('white')\nax.spines['right'].set_color('white')\nax.spines['left'].set_color('white')\n\n# Set the color of the x-axis and y-axis ticks\nax.tick_params(axis='x', colors='white')\nax.tick_params(axis='y', colors='white')\n\n# Set the color of the x-axis and y-axis tick labels\nax.tick_params(axis='both', which='major', labelcolor='white')\n\n# Set the color of the x-axis and y-axis grid lines\nax.grid(color='white', linestyle='-', linewidth=0.5)\n\n# Set the color of the x-axis and y-axis spines\nax.spines['bottom'].set_color('white')\nax.spines['top'].set_color('white')\nax.spines['right'].set_color('white')\nax.spines['left'].set_color('white')\n\n# Set the color of the x-axis and y-axis ticks\nax.tick_params(axis='x', colors='white')\nax.tick_params(axis='y', colors='white')\n\n# Set the color of the x-axis and y-axis tick labels\nax.tick_params(axis='both', which='major', labelcolor='white')\n\n# Set the color of the x-axis and y-axis grid lines\nax.grid(color='white', linestyle='-', linewidth=0.5)\n\n# Set the color of the x-axis and y-axis spines\nax.spines['bottom'].set_color('white')\nax.spines['top'].set_color('white')\nax.spines['right'].set_color('white')\nax.spines['left'].set_color('white')\n\n# Set the color of the x-axis and y-axis ticks\nax.tick_params(axis='x', colors='white')\nax.tick_params(axis='y', colors='white')\n\n# Set the color of the x-axis and y-axis tick labels\nax.tick_params(axis='both', which='major', labelcolor='white')\n\n# Set the color of the x-axis and y-axis grid lines\nax.grid(color='white', linestyle='-', linewidth=0.5)\n\n# Set the color of the x-axis and y-axis spines\nax.spines['bottom'].set_color('white')\nax.spines['top'].set_color('white')\nax.spines['right'].set_color('white')\nax.spines['left'].set_color('white')\n\n# Set the color of the x-axis and y-axis ticks\nax.tick_params(axis='x', colors='white')\nax.tick_params(axis='y', colors='white')\n\n# Set the color of the x-axis and y-axis tick labels\nax.tick_params(axis='both', which='major', labelcolor='white')\n\n# Set the color of the x-axis and y-axis grid lines\nax.grid(color='white', linestyle='-', linewidth=0.5)\n\n# Set the color of the x-axis and y-axis spines\nax.spines['bottom'].set_color('white')\nax.spines['top'].set_color('white')\nax.spines['right'].set_color('white')\nax.spines['left'].set_color('white')\n\n# Set the color of the x-axis and y-axis ticks\nax.tick_params(axis='x', colors='white')\nax.tick_params(axis='y', colors='white')\n\n# Set the color of the x-axis and y-axis tick labels\nax.tick_params(axis='both', which='major', labelcolor='white')\n\n# Set the color of the x-axis and y-axis grid lines\nax.grid(color='white', linestyle='-', linewidth=0.5)\n\n# Set the color of the x-axis and y-axis spines\nax.spines['bottom'].set_color('white')\nax.spines['top'].set_color('white')\nax.spines['right'].set_color('white')\nax.spines['left'].set_color('white')\n\n# Set the color of the x-axis and y-axis ticks\nax.tick_params(axis='x', colors='white')\nax.tick_params(axis='y', colors='white')\n\n# Set the color of the x-axis and y-axis tick labels\nax.tick_params(axis='both', which='major', labelcolor='white')\n\n# Set the color of the x-axis and y-axis grid lines\nax.grid(color='white', linestyle='-', linewidth=0.5)\n\n# Set the color of the x-axis and y-axis spines\nax.spines['bottom'].set_color('white')\nax.spines['top'].set_color('white')\nax.spines['right'].set_color('white')\nax.spines['left'].set_color('white')\n\n# Set the color of the x-axis and y-axis ticks\nax.tick_params(axis='x', colors='white')\nax.tick_params(axis='y', colors='white')\n\n# Set the color of the x-axis and y-axis tick labels\nax.tick_params(axis='both', which='major', labelcolor='white')\n\n# Set the color of the x-axis and y-axis grid lines\nax.grid(color='white', linestyle='-', linewidth=0.5)\n\n# Set the color of the x-axis and y-axis spines\nax.spines['bottom'].set_color('white')\nax.spines['top'].set_color('white')\nax.spines['right'].set_color('white')\nax.spines['left'].set_color('white')\n\n# Set the color of the x-axis and y-axis ticks\nax.tick_params(axis='x', colors='white')\nax.tick_params(axis='y', colors='white')\n\n# Set the color of the x-axis and y-axis tick labels\nax.tick_params(axis='both', which='major', labelcolor='white')\n\n# Set the color of the x-axis and y-axis grid lines\nax.grid(color='white', linestyle='-', linewidth=0.5)\n\n# Set the color of the x-axis and y-axis spines\nax.spines['bottom'].set_color('white')\nax.spines['top'].set_color('white')\nax.spines['right'].set_color('white')\nax.spines['left'].set_color('white')\n\n# Set the color of the x-axis and y-axis ticks\nax.tick_params(axis='x', colors='white')\nax.tick_params(axis='y', colors='white')\n\n# Set the color of the x-axis and y-axis tick labels\nax.tick_params(axis='both', which='major', labelcolor='white')\n\n# Set the color of the x-axis and y-axis grid lines\nax.grid(color='white', linestyle='-', linewidth=0.5)\n\n# Set the color of the x-axis and y-axis spines\nax.spines['bottom'].set_color('white')\nax.spines['top'].set_color('white')\nax.spines['right'].set_color('white')\nax.spines['left'].set_color('white')\n\n# Set the color of the x-axis and y-axis ticks\nax.tick_params(axis='x', colors='white')\nax.tick_params(axis='y', colors='white')\n\n# Set the color of the x-axis and y-axis tick labels\nax.tick_params(axis='both', which='major', labelcolor='white')\n\n# Set the color of the x-axis and y-axis grid lines\nax.grid(color='white', linestyle='-', linewidth=0.5)\n\n# Set the color of the x-axis and y-axis spines\nax.spines['bottom'].set_color('white')\nax.spines['top'].set_color('white')\nax.spines['right'].set_color('white')\nax.spines['left'].set_color('white')\n\n# Set the color of the x-axis and y-axis ticks\nax.tick_params(axis='x', colors='white')\nax.tick_params(axis='y', colors='white')\n\n# Set the color of the x-axis and y-axis tick labels\nax.tick_params(axis='both', which='major', labelcolor='white')\n\n# Set the color of the x-axis and y-axis grid lines\nax.grid(color='white', linestyle='-', linewidth=0.5)\n\n# Set the color of the x-axis and y-axis spines\nax.spines['bottom'].set_color('white')\nax.spines['top'].set_color('white"}
{"file": "dataset/ori_500/hist_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 7.0))\n\n# Set the title of the plot\nax.set_title('Sports Betting Data')\n\n# Set the x-axis label\nax.set_xlabel('Test Winning Distance')\n\n# Set the y-axis label\nax.set_ylabel('Number of Pairs')\n\n# Create a bar chart with the data\nax.bar([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9], [10, 20, 30, 40, 50, 60, 70, 80, 90], color='blue')\n\n# Add a legend\nax.legend(['XSum', 'CNN/DailyMail', 'NarrativeQA', 'NaturalQuestions - Closed-book', 'NaturalQuestions - Open-book', 'QuAC'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and a set of subplots\nfig, axs = plt.subplots(1, 2, figsize=(10.0, 3.0))\n\n# Define the data for the plots\nx = np.linspace(-1, 1, 100)\ny1 = np.sin(x)\ny2 = np.cos(x)\n\n# Plot the data\naxs[0].plot(x, y1, 'b-', label='Inter Class')\naxs[0].plot(x, y2, 'g-', label='Intra Class')\naxs[0].set_xlabel('Cosine Similarity')\naxs[0].set_ylabel('Frequency')\naxs[0].legend()\n\n# Create a histogram\naxs[1].hist(np.random.normal(0, 1, 1000), bins=50, color='blue', alpha=0.75)\naxs[1].set_xlabel('Cosine Similarity')\naxs[1].set_ylabel('Frequency')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis for the plot\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Set the title of the plot\nax.set_title('Baseline')\n\n# Create a scatter plot with random data\nx = np.random.rand(50)\ny = np.random.rand(50)\nax.scatter(x, y, c='blue')\n\n# Set the x-axis label\nax.set_xlabel('Euclidean Distance')\n\n# Set the y-axis label\nax.set_ylabel('Density')\n\n# Create a second subplot\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Set the title of the plot\nax.set_title('MIRL w/ V-I positive')\n\n# Create a scatter plot with random data\nx = np.random.rand(50)\ny = np.random.rand(50)\nax.scatter(x, y, c='orange')\n\n# Set the x-axis label\nax.set_xlabel('Euclidean Distance')\n\n# Set the y-axis label\nax.set_ylabel('Density')\n\n# Create a third subplot\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Set the title of the plot\nax.set_title('MIRL w/ V-I negative')\n\n# Create a scatter plot with random data\nx = np.random.rand(50)\ny = np.random.rand(50)\nax.scatter(x, y, c='blue')\n\n# Set the x-axis label\nax.set_xlabel('Euclidean Distance')\n\n# Set the y-axis label\nax.set_ylabel('Density')\n\n# Create a fourth subplot\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Set the title of the plot\nax.set_title('MIRL + OCLR w/ V-I positive')\n\n# Create a scatter plot with random data\nx = np.random.rand(50)\ny = np.random.rand(50)\nax.scatter(x, y, c='orange')\n\n# Set the x-axis label\nax.set_xlabel('Euclidean Distance')\n\n# Set the y-axis label\nax.set_ylabel('Density')\n\n# Create a fifth subplot\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Set the title of the plot\nax.set_title('MIRL + OCLR w/ V-I negative')\n\n# Create a scatter plot with random data\nx = np.random.rand(50)\ny = np.random.rand(50)\nax.scatter(x, y, c='blue')\n\n# Set the x-axis label\nax.set_xlabel('Euclidean Distance')\n\n# Set the y-axis label\nax.set_ylabel('Density')\n\n# Create a sixth subplot\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Set the title of the plot\nax.set_title('MIRL + OCLR w/ DOTLA')\n\n# Create a scatter plot with random data\nx = np.random.rand(50)\ny = np.random.rand(50)\nax.scatter(x, y, c='orange')\n\n# Set the x-axis label\nax.set_xlabel('Euclidean Distance')\n\n# Set the y-axis label\nax.set_ylabel('Density')\n\n# Create a seventh subplot\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Set the title of the plot\nax.set_title('MIRL + OCLR w/ V-I positive')\n\n# Create a scatter plot with random data\nx = np.random.rand(50)\ny = np.random.rand(50)\nax.scatter(x, y, c='orange')\n\n# Set the x-axis label\nax.set_xlabel('Euclidean Distance')\n\n# Set the y-axis label\nax.set_ylabel('Density')\n\n# Create an eighth subplot\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Set the title of the plot\nax.set_title('MIRL + OCLR w/ V-I negative')\n\n# Create a scatter plot with random data\nx = np.random.rand(50)\ny = np.random.rand(50)\nax.scatter(x, y, c='blue')\n\n# Set the x-axis label\nax.set_xlabel('Euclidean Distance')\n\n# Set the y-axis label\nax.set_ylabel('Density')\n\n# Create a ninth subplot\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Set the title of the plot\nax.set_title('MIRL + OCLR w/ DOTLA')\n\n# Create a scatter plot with random data\nx = np.random.rand(50)\ny = np.random.rand(50)\nax.scatter(x, y, c='orange')\n\n# Set the x-axis label\nax.set_xlabel('Euclidean Distance')\n\n# Set the y-axis label\nax.set_ylabel('Density')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(7.0, 8.0))\n\n# Set the title of the plot\nax.set_title('MATHWELL')\n\n# Create a scatter plot with random data\nx = np.random.rand(10)\ny = np.random.rand(10)\nax.scatter(x, y)\n\n# Set the x and y limits\nax.set_xlim([0, 10])\nax.set_ylim([0, 1])\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Set the title of the plot\nax.set_title('Desert Animals in the Wild')\n\n# Set the x-axis label\nax.set_xlabel('Animal Weight (Tons)')\n\n# Set the y-axis label\nax.set_ylabel('Frequency')\n\n# Set the x-axis limits\nax.set_xlim(0, 1)\n\n# Set the y-axis limits\nax.set_ylim(0, 1000)\n\n# Set the x-ticks\nax.set_xticks([0, 0.02, 0.04, 0.06, 0.08])\n\n# Set the y-ticks\nax.set_yticks([0, 100, 200, 300, 400, 500, 600, 700, 800, 900, 1000])\n\n# Set the color of the x-axis ticks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis ticks\nax.tick_params(axis='y', colors='orange')\n\n# Set the color of the x-axis labels\nax.xaxis.label.set_color('blue')\n\n# Set the color of the y-axis labels\nax.yaxis.label.set_color('orange')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(True, color='blue')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(True, color='orange')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelcolor='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='orange')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='orange')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelcolor='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='orange')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='orange')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelcolor='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='orange')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='orange')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelcolor='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='orange')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='orange')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelcolor='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='orange')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='orange')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelcolor='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='orange')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='orange')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelcolor='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='orange')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='orange')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelcolor='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='orange')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='orange')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelcolor='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='orange')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='orange')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelcolor='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='orange')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='orange')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelcolor='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='orange')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='orange')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelcolor='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='orange')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='orange')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelcolor='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='orange')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='orange')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelcolor='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='orange')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='orange')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelcolor='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='orange')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='orange')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelcolor='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='orange')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='orange')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelcolor='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='orange')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='orange')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelcolor='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='orange')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='orange')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelcolor='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='orange')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='orange')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelcolor='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='orange')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='orange')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelcolor='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='orange')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='orange')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelcolor='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='orange')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='orange')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelcolor='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='orange')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='orange')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelcolor='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='orange')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='orange')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelcolor='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='orange')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='orange')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelcolor='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='orange')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='orange')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelcolor='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='orange')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='orange')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelcolor='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='orange')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='orange')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelcolor='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='orange')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='orange')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelcolor='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='orange')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='orange')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelcolor='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='orange')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='orange')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelcolor='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='orange')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='orange')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelcolor='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='orange')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='orange')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelcolor='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='orange')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='orange')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelcolor='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='orange')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='orange')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelcolor='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='orange')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='orange')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelcolor='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='orange')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='orange')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelcolor='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='orange')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='orange')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelcolor='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='orange')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='orange')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelcolor='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='orange')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='orange')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelcolor='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='orange')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='orange')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', labelcolor='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', labelcolor='orange')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue"}
{"file": "dataset/ori_500/hist_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Set the title of the plot\nax.set_title('Comparison of Uniform and Normal Distributions')\n\n# Set the x-axis label\nax.set_xlabel('Time (in hours)')\n\n# Set the y-axis label\nax.set_ylabel('Frequency')\n\n# Create a bar chart\nax.bar([0, 2, 4, 6, 8], [10, 20, 30, 40, 50], color='blue')\n\n# Create a scatter plot\nax.scatter([0, 2, 4, 6, 8], [15, 25, 35, 45, 55], color='red')\n\n# Add a legend\nax.legend(['Uniform data', 'Normal data'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Histogram of Wind Speed Measurements')\n\n# Set the x-axis label\nax.set_xlabel('Wind Speed (km/h)')\n\n# Set the y-axis label\nax.set_ylabel('Frequency')\n\n# Create a histogram with 10 bins\nax.hist([2, 3, 4, 5, 6, 7, 8, 9, 10, 11], bins=10, color='blue', edgecolor='black')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_16.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nx = [0.0, 0.5, 1.0, 1.5, 2.0, 2.5, 3.0]\ny = [10, 20, 30, 40, 50, 60, 70]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(5.0, 4.0))\n\n# Plot the data\nax.plot(x, y)\n\n# Set the title and labels\nax.set_title('Baking Accuracy Analysis')\nax.set_xlabel('Distance to Threshold')\nax.set_ylabel('Accuracy')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_17.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(16.0, 7.0))\n\n# Set the title of the plot\nax.set_title('Tennis Player Performance')\n\n# Set the x-axis label\nax.set_xlabel('Test Winning Distance')\n\n# Set the y-axis label\nax.set_ylabel('Number of Pairs')\n\n# Create a scatter plot with random data\nx = [0.0, 0.2, 0.4, 0.6, 0.8, 1.0]\ny = [0, 20, 40, 60, 80, 100]\nax.scatter(x, y, color='blue')\n\n# Create a bar chart with random data\nx = ['Player 1', 'Player 2', 'Player 3', 'Player 4', 'Player 5']\ny = [100, 90, 80, 70, 60]\nax.bar(x, y, color='red')\n\n# Create a line graph with random data\nx = [0.0, 0.2, 0.4, 0.6, 0.8, 1.0]\ny = [10, 20, 30, 40, 50, 60]\nax.plot(x, y, color='green')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_18.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(12.0, 8.0))\n\n# Set the x-axis limits\nax.set_xlim([0, 300])\n\n# Set the y-axis limits\nax.set_ylim([0, 25])\n\n# Set the x-axis label\nax.set_xlabel('Number of Nominations')\n\n# Set the y-axis label\nax.set_ylabel('Grammy Points')\n\n# Set the title of the plot\nax.set_title('Histogram of Grammy Nominations Across Expanded Categories 2019-2023')\n\n# Define the categories and their corresponding points\ncategories = ['Record of the Year', 'Album of the Year', 'Song of the Year', 'Best New Artist', 'Best Pop Solo Performance']\npoints = [18, 17, 16, 15, 14]\n\n# Create a bar chart with the categories and points\nax.bar(categories, points, color='orange')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_19.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis for the first plot\nfig1, ax1 = plt.subplots(figsize=(10, 5))\nax1.set_title('MNIST - Defect Detection')\nax1.set_xlabel('Defect Type')\nax1.set_ylabel('Number of Defects')\n\n# Create a bar chart with random data\ndefect_types = ['Non-defective', 'Defective']\ndefect_counts = [np.random.randint(200, 400) for _ in range(len(defect_types))]\nax1.bar(defect_types, defect_counts, color='blue')\n\n# Create a scatter plot with random data\nx = np.linspace(0, 1, 100)\ny = np.sin(x * np.pi * 2)\nax1.scatter(x, y, color='orange')\n\n# Create a second figure and axis for the second plot\nfig2, ax2 = plt.subplots(figsize=(10, 5))\nax2.set_title('FashionMNIST - Defect Detection')\nax2.set_xlabel('Defect Type')\nax2.set_ylabel('Number of Defects')\n\n# Create a bar chart with random data\ndefect_types = ['Non-defective', 'Defective']\ndefect_counts = [np.random.randint(200, 400) for _ in range(len(defect_types))]\nax2.bar(defect_types, defect_counts, color='green')\n\n# Create a scatter plot with random data\nx = np.linspace(0, 1, 100)\ny = np.sin(x * np.pi * 2)\nax2.scatter(x, y, color='red')\n\n# Show the plots\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(9.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Player Performance')\n\n# Set the x-axis label\nax.set_xlabel('Time (minutes)')\n\n# Set the y-axis label\nax.set_ylabel('TM-score')\n\n# Set the x-ticks\nax.set_xticks([0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0])\n\n# Set the y-ticks\nax.set_yticks(range(0, 70, 10))\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the text\nax.set_color_cycle(['blue', 'green', 'yellow'])\n\n# Plot the data\nax.plot([0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0], [20, 30, 40, 50, 60, 70, 80], 'o-')\nax.plot([0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0], [10, 20, 30, 40, 50, 60, 70], 'o-')\nax.plot([0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0], [5, 15, 25, 35, 45, 55, 65], 'o-')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_20.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and a set of subplots\nfig, axs = plt.subplots(2, 2, figsize=(10, 8))\n\n# Plot the first subplot\naxs[0, 0].scatter(np.random.rand(50), np.random.rand(50), c=np.random.rand(50), cmap='Blues')\naxs[0, 0].set_title('a) Milk Chocolate')\naxs[0, 0].set_xlabel('Sweetness')\naxs[0, 0].set_ylabel('Density')\n\n# Plot the second subplot\naxs[0, 1].scatter(np.random.rand(50), np.random.rand(50), c=np.random.rand(50), cmap='Oranges')\naxs[0, 1].set_title('b) Dark Chocolate')\naxs[0, 1].set_xlabel('Sweetness')\naxs[0, 1].set_ylabel('Density')\n\n# Plot the third subplot\naxs[1, 0].scatter(np.random.rand(50), np.random.rand(50), c=np.random.rand(50), cmap='Greens')\naxs[1, 0].set_title('c) White Chocolate')\naxs[1, 0].set_xlabel('Sweetness')\naxs[1, 0].set_ylabel('Density')\n\n# Plot the fourth subplot\naxs[1, 1].scatter(np.random.rand(50), np.random.rand(50), c=np.random.rand(50), cmap='Reds')\naxs[1, 1].set_title('d) Ruby Chocolate')\naxs[1, 1].set_xlabel('Sweetness')\naxs[1, 1].set_ylabel('Density')\n\n# Add colorbar for each subplot\nfor ax in axs.flat:\n    fig.colorbar(ax.collections[0], ax=ax)\n\n# Set the colorbar labels\nfig.text(0.04, 0.5, 'Sweetness', va='center', rotation='vertical')\nfig.text(0.5, 0.04, 'Density', ha='center')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(5.0, 4.0))\n\n# Set the title of the plot\nax.set_title('CIFAR100 \\'Desert\\' Concept')\n\n# Set the x-axis label\nax.set_xlabel('Concept Weight')\n\n# Set the y-axis label\nax.set_ylabel('Count')\n\n# Define the data for the plot\nx = [0.00, 0.05, 0.10, 0.15]\ny = [1000, 2000, 3000, 4000]\n\n# Plot the data\nax.plot(x, y)\n\n# Add a legend\nax.legend(['Class', 'Camel', 'Kangaroo'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_4.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(5.0, 3.0))\n\n# Define the data\nx = np.linspace(-5, 10, 100)\ny = np.sin(x)\n\n# Plot the data\nax.plot(x, y, color='blue')\n\n# Set the title and labels\nax.set_title('Sine Wave')\nax.set_xlabel('Distance')\nax.set_ylabel('Amplitude')\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/hist_5.pdf", "response": "import matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(4.0, 3.0))\n\n# Set the background color of the plot\nax.set_facecolor('black')\n\n# Set the title of the plot\nax.set_title('Number of Clusters vs Number of Repetition', color='white')\n\n# Set the x-axis label\nax.set_xlabel('Number of Repetition', color='white')\n\n# Set the y-axis label\nax.set_ylabel('Number of Clusters', color='white')\n\n# Set the x-axis limits\nax.set_xlim(0, 12.5)\n\n# Set the y-axis limits\nax.set_ylim(0, 1500)\n\n# Set the x-axis ticks\nax.set_xticks([0, 2.5, 5, 7.5, 10, 12.5])\n\n# Set the y-axis ticks\nax.set_yticks([0, 500, 1000, 1500])\n\n# Set the x-axis tick labels\nax.set_xticklabels(['0', '2.5', '5', '7.5', '10', '12.5'], color='white')\n\n# Set the y-axis tick labels\nax.set_yticklabels(['0', '500', '1000', '1500'], color='white')\n\n# Set the grid lines\nax.grid(True, color='white')\n\n# Set the color of the plot\nax.plot([0, 2.5, 5, 7.5, 10, 12.5], [1000, 1200, 1300, 1400, 1450, 1500], color='orange')\n\n# Set the color of the scatter plot\nax.scatter([0, 2.5, 5, 7.5, 10, 12.5], [1000, 1200, 1300, 1400, 1450, 1500], color='orange')\n\n# Set the color of the bar chart\nax.bar([0, 2.5, 5, 7.5, 10, 12.5], [1000, 1200, 1300, 1400, 1450, 1500], color='orange')\n\n# Set the color of the line chart\nax.plot([0, 2.5, 5, 7.5, 10, 12.5], [1000, 1200, 1300, 1400, 1450, 1500], color='orange')\n\n# Set the color of the pie chart\nax.pie([1000, 1200, 1300, 1400, 1450, 1500], colors=['orange'])\n\n# Set the color of the histogram\nax.hist([1000, 1200, 1300, 1400, 1450, 1500], bins=6, color='orange')\n\n# Set the color of the box plot\nax.boxplot([1000, 1200, 1300, 1400, 1450, 1500], patch_artist=True, boxprops=dict(facecolor='orange'))\n\n# Set the color of the violin plot\nax.violinplot([1000, 1200, 1300, 1400, 1450, 1500], showmeans=True, showmedians=True, showextrema=True, points=100, bw_method=None, gridsize=None, cut=3, widths=None, showfliers=True, vert=True, patch_artist=True, inner='quartile', meanline=False, meanprops=None, medianprops=None, flierprops=None, whiskerprops=None, capprops=None, initprops=None, bootstrap=None, quantiles=None, points_per_bin=None, scale='area', scale_hue=False, split=False, bw_method=None, gridsize=None, cut=3, widths=None, showfliers=True, vert=True, patch_artist=True, inner='quartile', meanline=False, meanprops=None, medianprops=None, flierprops=None, whiskerprops=None, capprops=None, initprops=None, bootstrap=None, quantiles=None, points_per_bin=None, scale='area', scale_hue=False, split=False)\n\n# Set the color of the heatmap\nax.imshow([[1000, 1200, 1300, 1400, 1450, 1500]], cmap='hot', interpolation='nearest')\n\n# Set the color of the contour plot\nax.contour([[1000, 1200, 1300, 1400, 1450, 1500]], levels=10, cmap='hot')\n\n# Set the color of the contourf plot\nax.contourf([[1000, 1200, 1300, 1400, 1450, 1500]], levels=10, cmap='hot')\n\n# Set the color of the streamplot\nax.streamplot([[1000, 1200, 1300, 1400, 1450, 1500]], [[1000, 1200, 1300, 1400, 1450, 1500]], density=1, color='orange')\n\n# Set the color of the quiver plot\nax.quiver([[1000, 1200, 1300, 1400, 1450, 1500]], [[1000, 1200, 1300, 1400, 1450, 1500]], [[1000, 1200, 1300, 1400, 1450, 1500]], [[1000, 1200, 1300, 1400, 1450, 1500]], color='orange')\n\n# Set the color of the polar plot\nax.polar([[1000, 1200, 1300, 1400, 1450, 1500]], [[1000, 1200, 1300, 1400, 1450, 1500]], color='orange')\n\n# Set the color of the smith plot\nax.smith([[1000, 1200, 1300, 1400, 1450, 1500]], [[1000, 1200, 1300, 1400, 1450, 1500]], color='orange')\n\n# Set the color of the ternary plot\nax.ternary([[1000, 1200, 1300, 1400, 1450, 1500]], [[1000, 1200, 1300, 1400, 1450, 1500]], [[1000, 1200, 1300, 1400, 1450, 1500]], color='orange')\n\n# Set the color of the smith plot\nax.smith([[1000, 1200, 1300, 1400, 1450, 1500]], [[1000, 1200, 1300, 1400, 1450, 1500]], color='orange')\n\n# Set the color of the smith plot\nax.smith([[1000, 1200, 1300, 1400, 1450, 1500]], [[1000, 1200, 1300, 1400, 1450, 1500]], color='orange')\n\n# Set the color of the smith plot\nax.smith([[1000, 1200, 1300, 1400, 1450, 1500]], [[1000, 1200, 1300, 1400, 1450, 1500]], color='orange')\n\n# Set the color of the smith plot\nax.smith([[1000, 1200, 1300, 1400, 1450, 1500]], [[1000, 1200, 1300, 1400, 1450, 1500]], color='orange')\n\n# Set the color of the smith plot\nax.smith([[1000, 1200, 1300, 1400, 1450, 1500]], [[1000, 1200, 1300, 1400, 1450, 1500]], color='orange')\n\n# Set the color of the smith plot\nax.smith([[1000, 1200, 1300, 1400, 1450, 1500]], [[1000, 1200, 1300, 1400, 1450, 1500]], color='orange')\n\n# Set the color of the smith plot\nax.smith([[1000, 1200, 1300, 1400, 1450, 1500]], [[1000, 1200, 1300, 1400, 1450, 1500]], color='orange')\n\n# Set the color of the smith plot\nax.smith([[1000, 1200, 1300, 1400, 1450, 1500]], [[1000, 1200, 1300, 1400, 1450, 1500]], color='orange')\n\n# Set the color of the smith plot\nax.smith([[1000, 1200, 1300, 1400, 1450, 1500]], [[1000, 1200, 1300, 1400, 1450, 1500]], color='orange')\n\n# Set the color of the smith plot\nax.smith([[1000, 1200, 1300, 1400, 1450, 1500]], [[1000, 1200, 1300, 1400, 1450, 1500]], color='orange')\n\n# Set the color of the smith plot\nax.smith([[1000, 1200, 1300, 1400, 1450, 1500]], [[1000, 1200, 1300, 1400, 1450, 1500]], color='orange')\n\n# Set the color of the smith plot\nax.smith([[1000, 1200, 1300, 1400, 1450, 1500]], [[1000, 1200, 1300, 1400, 1450, 1500]], color='orange')\n\n# Set the color of the smith plot\nax.smith([[1000, 1200, 1300, 1400, 1450, 1500]], [[1000, 1200, 1300, 1400, 1450, 1500]], color='orange')\n\n# Set the color of the smith plot\nax.smith([[1000, 1200, 1300, 1400, 1450, 1500]], [[1000, 1200, 1300, 1400, 1450, 1500]], color='orange')\n\n# Set the color of the smith plot\nax.smith([[1000, 1200, 1300, 1400, 1450, 1500]], [[1000, 1200, 1300, 1400, 1450, 1500]], color='orange')\n\n# Set the color of the smith plot\nax.smith([[1000, 1200, 1300, 1400, 1450, 1500]], [[1000, 1200, 1300, 1400, 1450, 1500]], color='orange')\n\n# Set the color of the smith plot\nax.smith([[1000, 1200, 1300, 1400, 1450, 1500]], [[1000, 1200, 1300, 1400, 1450, 1500]], color='orange')\n\n# Set the color of the smith plot\nax.smith([[1000, 1200, 1300, 1400, 1450, 1500]], [[1000, 1200, 1300, 1400, 1450, 1500]], color='orange')\n\n# Set the color of the smith plot\nax.smith([[1000, 1200, 1300, 1400, 1450, 1500]], [[1000, 1200, 1300, 1400, 1450, 1500]], color='orange')\n\n# Set the color of the smith plot\nax.smith([[1000, 1200, 1300, 1400, 1450, 1500]], [[1000, 1200, 1300, 1400, 1450, 1500]], color='orange')\n\n# Set the color of the smith plot\nax.smith([[1000, 1200, 1300, 1400, 1450, 1500]], [[1000, 1200, 1300, 1400, 1450, 1500]], color='orange')\n\n# Set the color of the smith plot\nax.smith([[1000, 1200, 1300, 1400, 1450, 1500]], [[1000, 1200, 1300, 1400, 1450, 1500]], color='orange')\n\n# Set the color of the smith plot\nax.smith([[1000, 1200, 1300, 1400, 1450, 1500]], [[1000, 1200, 1300, 1400, 1450, 1500]], color='orange')\n\n# Set the color of the smith plot\nax.smith([[1000, 1200, 1300, 1400, 1450, 1500]], [[1000, 1200, 1300, 1400, 1450, 1500]], color='orange')\n\n# Set the color of the smith plot\nax.smith([[1000, 1200, 1300, 1400, 1450, 1500]], [[1000, 1200, 1300, 1400, 1450, 1500]], color='orange')\n\n# Set the color of the smith plot\nax.smith([[1000, 1200, 1300, 1400, 1450, 1500]], [[1000, 1200, 1300, 1400, 1450, 1500]], color='orange')\n\n# Set the color of the smith plot\nax.smith([[1000, 1200, 1300, 1400, 1450, 1500]], [[1"}
{"file": "dataset/ori_500/hist_6.pdf", "response": "import matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(5.0, 3.0))\n\n# Set the title of the plot\nax.set_title('Classification Accuracy')\n\n# Set the x-axis label\nax.set_xlabel('Distance to threshold')\n\n# Set the y-axis label\nax.set_ylabel('Accuracy')\n\n# Create a bar chart\nax.bar([0, 1, 2, 3, 4], [0.9, 0.8, 0.7, 0.6, 0.5], color='blue', label='Correctly classified')\nax.bar([0, 1, 2, 3, 4], [0.1, 0.2, 0.3, 0.4, 0.5], bottom=[0.9, 0.8, 0.7, 0.6, 0.5], color='orange', label='Misclassified')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/hist_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Set the title of the plot\nax.set_title('Casade')\n\n# Set the x-axis label\nax.set_xlabel('Confidence in bin')\n\n# Set the y-axis label\nax.set_ylabel('Calibration Error')\n\n# Create a scatter plot with random data\nx = np.random.rand(10)\ny = np.random.rand(10)\nax.scatter(x, y)\n\n# Draw a line between the points\nax.plot(x, y, 'o-')\n\n# Set the color of the line\nax.plot(x, y, color='blue')\n\n# Set the color of the markers\nax.plot(x, y, marker='o', color='red')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('lightblue')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Calibration Error: 0.31', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=20, color='orange')\n\n# Set the color of the axes\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the ticks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the labels\nax.xaxis.label.set_color('black')\nax.yaxis.label.set_color('black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the legend\nax.legend().get_frame().set_facecolor('white')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('lightblue')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Calibration Error: 0.31', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=20, color='orange')\n\n# Set the color of the axes\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the ticks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the labels\nax.xaxis.label.set_color('black')\nax.yaxis.label.set_color('black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the legend\nax.legend().get_frame().set_facecolor('white')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('lightblue')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Calibration Error: 0.31', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=20, color='orange')\n\n# Set the color of the axes\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the ticks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the labels\nax.xaxis.label.set_color('black')\nax.yaxis.label.set_color('black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the legend\nax.legend().get_frame().set_facecolor('white')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('lightblue')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Calibration Error: 0.31', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=20, color='orange')\n\n# Set the color of the axes\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the ticks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the labels\nax.xaxis.label.set_color('black')\nax.yaxis.label.set_color('black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the legend\nax.legend().get_frame().set_facecolor('white')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('lightblue')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Calibration Error: 0.31', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=20, color='orange')\n\n# Set the color of the axes\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the ticks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the labels\nax.xaxis.label.set_color('black')\nax.yaxis.label.set_color('black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the legend\nax.legend().get_frame().set_facecolor('white')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('lightblue')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Calibration Error: 0.31', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=20, color='orange')\n\n# Set the color of the axes\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the ticks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the labels\nax.xaxis.label.set_color('black')\nax.yaxis.label.set_color('black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the legend\nax.legend().get_frame().set_facecolor('white')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('lightblue')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Calibration Error: 0.31', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=20, color='orange')\n\n# Set the color of the axes\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the ticks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the labels\nax.xaxis.label.set_color('black')\nax.yaxis.label.set_color('black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the legend\nax.legend().get_frame().set_facecolor('white')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('lightblue')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Calibration Error: 0.31', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=20, color='orange')\n\n# Set the color of the axes\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the ticks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the labels\nax.xaxis.label.set_color('black')\nax.yaxis.label.set_color('black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the legend\nax.legend().get_frame().set_facecolor('white')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('lightblue')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Calibration Error: 0.31', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=20, color='orange')\n\n# Set the color of the axes\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the ticks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the labels\nax.xaxis.label.set_color('black')\nax.yaxis.label.set_color('black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the legend\nax.legend().get_frame().set_facecolor('white')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('lightblue')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Calibration Error: 0.31', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=20, color='orange')\n\n# Set the color of the axes\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the ticks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the labels\nax.xaxis.label.set_color('black')\nax.yaxis.label.set_color('black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the legend\nax.legend().get_frame().set_facecolor('white')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('lightblue')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Calibration Error: 0.31', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=20, color='orange')\n\n# Set the color of the axes\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the ticks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the labels\nax.xaxis.label.set_color('black')\nax.yaxis.label.set_color('black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the legend\nax.legend().get_frame().set_facecolor('white')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('lightblue')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Calibration Error: 0.31', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=20, color='orange')\n\n# Set the color of the axes\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the ticks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the labels\nax.xaxis.label.set_color('black')\nax.yaxis.label.set_color('black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the legend\nax.legend().get_frame().set_facecolor('white')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('lightblue')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Calibration Error: 0.31', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=20, color='orange')\n\n# Set the color of the axes\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the ticks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the labels\nax.xaxis.label.set_color('black')\nax.yaxis.label.set_color('black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the legend\nax.legend().get_frame().set_facecolor('white')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('lightblue')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Calibration Error: 0.31', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=20, color='orange')\n\n# Set the color of the axes\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the ticks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the labels\nax.xaxis.label.set_color('black')\nax.yaxis.label.set_color('black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the legend\nax.legend().get_frame().set_facecolor('white')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('lightblue')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Calibration Error: 0.31', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=20, color='orange')\n\n# Set the color of the axes\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the ticks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the labels\nax.xaxis.label.set_color('black')\nax.yaxis.label.set_color('black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the legend\nax.legend().get_frame().set_facecolor('white')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('lightblue')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Calibration Error: 0.31', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=20, color='orange')\n\n# Set the color of the axes\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the ticks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the labels\nax.xaxis.label.set_color('black')\nax.yaxis.label.set_color('black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the legend\nax.legend().get_frame().set_facecolor('white')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('lightblue')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Calibration Error: 0.31', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=20, color='orange')\n\n# Set the color of the axes\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the ticks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the labels\nax.xaxis.label.set_color('black')\nax.yaxis.label.set_color('black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the legend\nax.legend().get_frame().set_facecolor('white')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('lightblue')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Calibration Error: 0.31', horizontalalignment='center', verticalalignment='"}
{"file": "dataset/ori_500/hist_8.pdf", "response": "import matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 5.0))\n\n# Set the title of the plot\nax.set_title('Number of Queries Overlap')\n\n# Set the x-axis label\nax.set_xlabel('Time (in hours)')\n\n# Set the y-axis label\nax.set_ylabel('Number of queries')\n\n# Set the x-axis limits\nax.set_xlim(0, 1)\n\n# Set the y-axis limits\nax.set_ylim(0, 6000)\n\n# Set the x-axis ticks\nax.set_xticks([0, 0.2, 0.4, 0.6, 0.8, 1])\n\n# Set the y-axis ticks\nax.set_yticks([0, 1000, 2000, 3000, 4000, 5000, 6000])\n\n# Set the x-axis tick labels\nax.set_xticklabels(['0', '0.2', '0.4', '0.6', '0.8', '1'])\n\n# Set the y-axis tick labels\nax.set_yticklabels(['0', '1000', '2000', '3000', '4000', '5000', '6000'])\n\n# Draw a rectangle for each time period\nax.add_patch(plt.Rectangle((0, 0), 0.2, 1000, color='blue'))\nax.add_patch(plt.Rectangle((0.2, 0), 0.2, 2000, color='green'))\nax.add_patch(plt.Rectangle((0.4, 0), 0.2, 3000, color='red'))\nax.add_patch(plt.Rectangle((0.6, 0), 0.2, 4000, color='yellow'))\nax.add_patch(plt.Rectangle((0.8, 0), 0.2, 5000, color='purple'))\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/hist_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 7))\n\n# Set the title of the plot\nax.set_title('MNIST')\n\n# Create a scatter plot with random data\nx = np.random.rand(50)\ny = np.random.rand(50)\nax.scatter(x, y)\n\n# Set the x and y limits\nax.set_xlim([0, 1])\nax.set_ylim([0, 1])\n\n# Set the x and y labels\nax.set_xlabel('X-axis')\nax.set_ylabel('Y-axis')\n\n# Set the color of the plot\nax.set_facecolor('blue')\n\n# Set the background color of the plot\nfig.patch.set_facecolor('white')\n\n# Save the plot as a PNG file\nplt.savefig('mnist.png')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Deep Learning Model Performance')\n\n# Set the x-axis label\nax.set_xlabel('SNR')\n\n# Set the y-axis label\nax.set_ylabel('Classification Accuracy (%)')\n\n# Define the data for the plots\nx = [5, 10, 15, 20]\ny1 = [90, 80, 70, 60]\ny2 = [85, 75, 65, 55]\ny3 = [80, 70, 60, 50]\ny4 = [75, 65, 55, 45]\ny5 = [70, 60, 50, 40]\ny6 = [65, 55, 45, 35]\n\n# Plot the data\nax.plot(x, y1, 'r-', label='JPEG+LDPC')\nax.plot(x, y2, 'o-', label='DEEPJSCC w/o ofdm')\nax.plot(x, y3, 'g-', label='DEEPJSCC w/ ofdm')\nax.plot(x, y4, 'b-', label='OURS')\nax.plot(x, y5, 'c-', label='OTHERS')\nax.plot(x, y6, 'm-', label='OTHERS')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the graph\nax.set_title('Performance Metrics')\n\n# Set the x-axis label\nax.set_xlabel('Time (n)')\n\n# Set the y-axis label\nax.set_ylabel('Performance Gain (%)')\n\n# Set the x-ticks\nax.set_xticks([0, 1, 2, 3, 4, 5])\n\n# Set the y-ticks\nax.set_yticks([0, 1, 2, 3, 4, 5, 6, 7])\n\n# Set the grid\nax.grid(True)\n\n# Plot the data\nax.plot([0, 1, 2, 3, 4, 5], [0, 1, 2, 3, 4, 5], 'b-')\nax.plot([0, 1, 2, 3, 4, 5], [5, 4, 3, 2, 1, 0], 'r-')\nax.plot([0, 1, 2, 3, 4, 5], [0, 1, 2, 3, 4, 5], 'g-')\nax.plot([0, 1, 2, 3, 4, 5], [5, 4, 3, 2, 1, 0], 'y-')\nax.plot([0, 1, 2, 3, 4, 5], [0, 1, 2, 3, 4, 5], 'c-')\nax.plot([0, 1, 2, 3, 4, 5], [5, 4, 3, 2, 1, 0], 'm-')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Effect of Vocab on Zero Shot Accuracy')\n\n# Set the x-axis label\nax.set_xlabel('Decomposition IO Norm')\n\n# Set the y-axis label\nax.set_ylabel('Accuracy')\n\n# Set the x-axis limits\nax.set_xlim(0, 80)\n\n# Set the y-axis limits\nax.set_ylim(0.55, 0.75)\n\n# Set the x-axis ticks\nax.set_xticks([0, 20, 40, 60, 80])\n\n# Set the y-axis ticks\nax.set_yticks([0.55, 0.60, 0.65, 0.70, 0.75])\n\n# Set the x-axis tick labels\nax.set_xticklabels(['0', '20', '40', '60', '80'])\n\n# Set the y-axis tick labels\nax.set_yticklabels(['0.55', '0.60', '0.65', '0.70', '0.75'])\n\n# Set the color of the border around the plot\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the width of the border around the plot\nax.spines['top'].set_linewidth(3)\nax.spines['bottom'].set_linewidth(3)\nax.spines['left'].set_linewidth(3)\nax.spines['right'].set_linewidth(3)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=1)\n\n# Set the color of the text\nax.text(0.5, 0.95, 'Dictionary', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=12, color='black')\n\n# Set the color of the text\nax.text(0.5, 0.90, 'coco (10k)', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=10, color='red')\n\n# Set the color of the text\nax.text(0.5, 0.85, 'laion (10k)', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=10, color='green')\n\n# Set the color of the text\nax.text(0.5, 0.80, 'coco (5k)', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=10, color='blue')\n\n# Set the color of the text\nax.text(0.5, 0.75, 'laion (5k)', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=10, color='orange')\n\n# Set the color of the text\nax.text(0.5, 0.70, 'CLIP', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=10, color='black')\n\n# Plot the data\nax.plot([0, 20, 40, 60, 80], [0.55, 0.60, 0.65, 0.70, 0.75], 'r-')\nax.plot([0, 20, 40, 60, 80], [0.55, 0.60, 0.65, 0.70, 0.75], 'g-')\nax.plot([0, 20, 40, 60, 80], [0.55, 0.60, 0.65, 0.70, 0.75], 'b-')\nax.plot([0, 20, 40, 60, 80], [0.55, 0.60, 0.65, 0.70, 0.75], 'y-')\nax.plot([0, 20, 40, 60, 80], [0.55, 0.60, 0.65, 0.70, 0.75], 'm-')\nax.plot([0, 20, 40, 60, 80], [0.55, 0.60, 0.65, 0.70, 0.75], 'c-')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Stock Price Prediction')\n\n# Set the x-axis label\nax.set_xlabel('Sample Ratio')\n\n# Set the y-axis label\nax.set_ylabel('Stock Price')\n\n# Plot the data\nax.plot([0.25, 0.5, 0.75, 1], [0.03, 0.04, 0.05, 0.06], 'r-')\nax.plot([0.25, 0.5, 0.75, 1], [0.03, 0.04, 0.05, 0.06], 'b-')\nax.plot([0.25, 0.5, 0.75, 1], [0.03, 0.04, 0.05, 0.06], 'g-')\n\n# Add markers at the points\nax.plot(0.25, 0.03, 'ro')\nax.plot(0.5, 0.04, 'ro')\nax.plot(0.75, 0.05, 'ro')\nax.plot(1, 0.06, 'ro')\n\n# Add a legend\nax.legend(['Stock Price Prediction', 'Actual Stock Price'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 10.0))\n\n# Set the title of the plot\nax.set_title('Training Metrics')\n\n# Set the x-axis label\nax.set_xlabel('Training iterations')\n\n# Set the y-axis label\nax.set_ylabel('Metrics')\n\n# Plot the data\nax.plot([0, 25, 50, 75, 100, 125, 150, 175, 200], [0.5, 0.4, 0.3, 0.2, 0.1, 0.2, 0.3, 0.4, 0.5], 'b-', label='base')\nax.plot([0, 25, 50, 75, 100, 125, 150, 175, 200], [0.6, 0.5, 0.4, 0.3, 0.2, 0.3, 0.4, 0.5, 0.6], 'y-', label='ours')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Set the x-axis limits\nax.set_xlim(1, 28)\n\n# Set the y-axis limits\nax.set_ylim(0, 100)\n\n# Set the x-axis ticks\nax.set_xticks(np.arange(1, 30, 1))\n\n# Set the y-axis ticks\nax.set_yticks(np.arange(0, 101, 10))\n\n# Set the x-axis labels\nax.set_xticklabels(['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28'])\n\n# Set the y-axis labels\nax.set_yticklabels(['0', '10', '20', '30', '40', '50', '60', '70', '80', '90', '100'])\n\n# Set the title of the plot\nax.set_title('Stock Market Analysis')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the x-axis and y-axis\nax.spines['left'].set_color('blue')\nax.spines['bottom'].set_color('green')\n\n# Set the color of the x-axis and y-axis tick marks\nax.tick_params(axis='x', colors='red')\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis and y-axis tick labels\nax.tick_params(axis='x', labelcolor='red')\nax.tick_params(axis='y', labelcolor='blue')\n\n# Set the color of the x-axis and y-axis tick labels\nax.tick_params(axis='x', labelsize=10)\nax.tick_params(axis='y', labelsize=10)\n\n# Set the color of the x-axis and y-axis tick labels\nax.tick_params(axis='x', labelrotation=45)\nax.tick_params(axis='y', labelrotation=45)\n\n# Set the color of the x-axis and y-axis tick labels\nax.tick_params(axis='x', labelpad=10)\nax.tick_params(axis='y', labelpad=10)\n\n# Set the color of the x-axis and y-axis tick labels\nax.tick_params(axis='x', labelcolor='red')\nax.tick_params(axis='y', labelcolor='blue')\n\n# Set the color of the x-axis and y-axis tick labels\nax.tick_params(axis='x', labelsize=10)\nax.tick_params(axis='y', labelsize=10)\n\n# Set the color of the x-axis and y-axis tick labels\nax.tick_params(axis='x', labelrotation=45)\nax.tick_params(axis='y', labelrotation=45)\n\n# Set the color of the x-axis and y-axis tick labels\nax.tick_params(axis='x', labelpad=10)\nax.tick_params(axis='y', labelpad=10)\n\n# Set the color of the x-axis and y-axis tick labels\nax.tick_params(axis='x', labelcolor='red')\nax.tick_params(axis='y', labelcolor='blue')\n\n# Set the color of the x-axis and y-axis tick labels\nax.tick_params(axis='x', labelsize=10)\nax.tick_params(axis='y', labelsize=10)\n\n# Set the color of the x-axis and y-axis tick labels\nax.tick_params(axis='x', labelrotation=45)\nax.tick_params(axis='y', labelrotation=45)\n\n# Set the color of the x-axis and y-axis tick labels\nax.tick_params(axis='x', labelpad=10)\nax.tick_params(axis='y', labelpad=10)\n\n# Set the color of the x-axis and y-axis tick labels\nax.tick_params(axis='x', labelcolor='red')\nax.tick_params(axis='y', labelcolor='blue')\n\n# Set the color of the x-axis and y-axis tick labels\nax.tick_params(axis='x', labelsize=10)\nax.tick_params(axis='y', labelsize=10)\n\n# Set the color of the x-axis and y-axis tick labels\nax.tick_params(axis='x', labelrotation=45)\nax.tick_params(axis='y', labelrotation=45)\n\n# Set the color of the x-axis and y-axis tick labels\nax.tick_params(axis='x', labelpad=10)\nax.tick_params(axis='y', labelpad=10)\n\n# Set the color of the x-axis and y-axis tick labels\nax.tick_params(axis='x', labelcolor='red')\nax.tick_params(axis='y', labelcolor='blue')\n\n# Set the color of the x-axis and y-axis tick labels\nax.tick_params(axis='x', labelsize=10)\nax.tick_params(axis='y', labelsize=10)\n\n# Set the color of the x-axis and y-axis tick labels\nax.tick_params(axis='x', labelrotation=45)\nax.tick_params(axis='y', labelrotation=45)\n\n# Set the color of the x-axis and y-axis tick labels\nax.tick_params(axis='x', labelpad=10)\nax.tick_params(axis='y', labelpad=10)\n\n# Set the color of the x-axis and y-axis tick labels\nax.tick_params(axis='x', labelcolor='red')\nax.tick_params(axis='y', labelcolor='blue')\n\n# Set the color of the x-axis and y-axis tick labels\nax.tick_params(axis='x', labelsize=10)\nax.tick_params(axis='y', labelsize=10)\n\n# Set the color of the x-axis and y-axis tick labels\nax.tick_params(axis='x', labelrotation=45)\nax.tick_params(axis='y', labelrotation=45)\n\n# Set the color of the x-axis and y-axis tick labels\nax.tick_params(axis='x', labelpad=10)\nax.tick_params(axis='y', labelpad=10)\n\n# Set the color of the x-axis and y-axis tick labels\nax.tick_params(axis='x', labelcolor='red')\nax.tick_params(axis='y', labelcolor='blue')\n\n# Set the color of the x-axis and y-axis tick labels\nax.tick_params(axis='x', labelsize=10)\nax.tick_params(axis='y', labelsize=10)\n\n# Set the color of the x-axis and y-axis tick labels\nax.tick_params(axis='x', labelrotation=45)\nax.tick_params(axis='y', labelrotation=45)\n\n# Set the color of the x-axis and y-axis tick labels\nax.tick_params(axis='x', labelpad=10)\nax.tick_params(axis='y', labelpad=10)\n\n# Set the color of the x-axis and y-axis tick labels\nax.tick_params(axis='x', labelcolor='red')\nax.tick_params(axis='y', labelcolor='blue')\n\n# Set the color of the x-axis and y-axis tick labels\nax.tick_params(axis='x', labelsize=10)\nax.tick_params(axis='y', labelsize=10)\n\n# Set the color of the x-axis and y-axis tick labels\nax.tick_params(axis='x', labelrotation=45)\nax.tick_params(axis='y', labelrotation=45)\n\n# Set the color of the x-axis and y-axis tick labels\nax.tick_params(axis='x', labelpad=10)\nax.tick_params(axis='y', labelpad=10)\n\n# Set the color of the x-axis and y-axis tick labels\nax.tick_params(axis='x', labelcolor='red')\nax.tick_params(axis='y', labelcolor='blue')\n\n# Set the color of the x-axis and y-axis tick labels\nax.tick_params(axis='x', labelsize=10)\nax.tick_params(axis='y', labelsize=10)\n\n# Set the color of the x-axis and y-axis tick labels\nax.tick_params(axis='x', labelrotation=45)\nax.tick_params(axis='y', labelrotation=45)\n\n# Set the color of the x-axis and y-axis tick labels\nax.tick_params(axis='x', labelpad=10)\nax.tick_params(axis='y', labelpad=10)\n\n# Set the color of the x-axis and y-axis tick labels\nax.tick_params(axis='x', labelcolor='red')\nax.tick_params(axis='y', labelcolor='blue')\n\n# Set the color of the x-axis and y-axis tick labels\nax.tick_params(axis='x', labelsize=10)\nax.tick_params(axis='y', labelsize=10)\n\n# Set the color of the x-axis and y-axis tick labels\nax.tick_params(axis='x', labelrotation=45)\nax.tick_params(axis='y', labelrotation=45)\n\n# Set the color of the x-axis and y-axis tick labels\nax.tick_params(axis='x', labelpad=10)\nax.tick_params(axis='y', labelpad=10)\n\n# Set the color of the x-axis and y-axis tick labels\nax.tick_params(axis='x', labelcolor='red')\nax.tick_params(axis='y', labelcolor='blue')\n\n# Set the color of the x-axis and y-axis tick labels\nax.tick_params(axis='x', labelsize=10)\nax.tick_params(axis='y', labelsize=10)\n\n# Set the color of the x-axis and y-axis tick labels\nax.tick_params(axis='x', labelrotation=45)\nax.tick_params(axis='y', labelrotation=45)\n\n# Set the color of the x-axis and y-axis tick labels\nax.tick_params(axis='x', labelpad=10)\nax.tick_params(axis='y', labelpad=10)\n\n# Set the color of the x-axis and y-axis tick labels\nax.tick_params(axis='x', labelcolor='red')\nax.tick_params(axis='y', labelcolor='blue')\n\n# Set the color of the x-axis and y-axis tick labels\nax.tick_params(axis='x', labelsize=10)\nax.tick_params(axis='y', labelsize=10)\n\n# Set the color of the x-axis and y-axis tick labels\nax.tick_params(axis='x', labelrotation=45)\nax.tick_params(axis='y', labelrotation=45)\n\n# Set the color of the x-axis and y-axis tick labels\nax.tick_params(axis='x', labelpad=10)\nax.tick_params(axis='y', labelpad=10)\n\n# Set the color of the x-axis and y-axis tick labels\nax.tick_params(axis='x', labelcolor='red')\nax.tick_params(axis='y', labelcolor='blue')\n\n# Set the color of the x-axis and y-axis tick labels\nax.tick_params(axis='x', labelsize=10)\nax.tick_params(axis='y', labelsize=10)\n\n# Set the color of the x-axis and y-axis tick labels\nax.tick_params(axis='x', labelrotation=45)\nax.tick_params(axis='y', labelrotation=45)\n\n# Set the color of the x-axis and y-axis tick labels\nax.tick_params(axis='x', labelpad=10)\nax.tick_params(axis='y', labelpad=10)\n\n# Set the color of the x-axis and y-axis tick labels\nax.tick_params(axis='x', labelcolor='red')\nax.tick_params(axis='y', labelcolor='blue')\n\n# Set the color of the x-axis and y-axis tick labels\nax.tick_params(axis='x', labelsize=10)\nax.tick_params(axis='y', labelsize=10)\n\n# Set the color of the x-axis and y-axis tick labels\nax.tick_params(axis='x', labelrotation=45)\nax.tick_params(axis='y', labelrotation=45)\n\n# Set the color of the x-axis and y-axis tick labels\nax.tick_params(axis='x', labelpad=10)\nax.tick_params(axis='y', labelpad=10)\n\n# Set the color of the x-axis and y-axis tick labels\nax.tick_params(axis='x', labelcolor='red')\nax.tick_params(axis='y', labelcolor='blue')\n\n# Set the color of the x-axis and y-axis tick labels\nax.tick_params(axis='x', labelsize=10)\nax.tick_params(axis='y', labelsize=10)\n\n# Set the color of the x-axis and y-axis tick labels\nax.tick_params(axis='x', labelrotation=45)\nax.tick_params(axis='y', labelrotation=45)\n\n# Set the color of the x-axis and y-axis tick labels\nax.tick_params(axis='x', labelpad=10)\nax.tick_params(axis='y', labelpad=10)\n\n# Set the color of the x-axis and y-axis tick labels\nax.tick_params(axis='x', labelcolor='red')\nax.tick_params(axis='y', labelcolor='blue')\n\n# Set the color of the x-axis and y-axis tick labels\nax.tick_params(axis='x', labelsize=10)\nax.tick_params(axis='y', labelsize=10)\n\n# Set the color of the x-axis and y-axis tick labels\nax.tick_params(axis='x', labelrotation=45)\nax.tick_params(axis='y', labelrotation=45)\n\n# Set the color of the x-axis and y-axis tick labels\nax.tick_params(axis='x', labelpad=10)\nax.tick_params(axis='y', labelpad=10)\n\n# Set the color of the x-axis and y-axis tick labels\nax.tick_params(axis='x', labelcolor='red')\nax.tick_params(axis='y', labelcolor='blue')\n\n# Set the color of the x-axis and y-axis tick labels\nax.tick_params(axis='x', labelsize=10)\nax.tick_params(axis='y', labelsize=10)\n\n# Set the color of the x-axis and y-axis tick labels\nax.tick_params(axis='x', labelrotation=45)\nax.tick_params(axis='y', labelrotation=45)\n\n# Set the color of the x-axis and y-axis tick labels\nax.tick_params(axis='x', labelpad=10)\nax.tick_params(axis='y', labelpad=10)\n\n# Set the color of the x-axis and y-axis tick labels\nax.tick_params(axis='x', labelcolor='red')\nax.tick_params(axis='y', labelcolor='blue')\n\n# Set the color of the x-axis and y-axis tick labels\nax.tick_params(axis='x', labelsize=10)\nax.tick_params(axis='y', labelsize=10)\n\n# Set the color of the x-axis and y-axis tick labels\nax.tick_params(axis='x', labelrotation=45)\nax.tick_params(axis='y', labelrotation=45)\n\n# Set the color of the x-axis and y-axis tick labels\nax.tick_params(axis='x', labelpad=10)\nax.tick_params(axis='y', labelpad=10)\n\n# Set the color of the x-axis and y-axis tick labels\nax.tick_params(axis='x', labelcolor='red')\nax.tick_params(axis='y', labelcolor='blue')\n\n# Set the color of the x-axis and y-axis tick labels\nax.tick_params(axis='x', labelsize=10)\nax.tick_params(axis='y', labelsize=10)\n\n# Set the color of the x-axis and y-axis tick labels\nax.tick_params(axis='x', labelrotation=45)\nax.tick_params(axis='y', labelrotation=45)\n\n# Set the color of the x-axis and y-axis tick labels\nax.tick_params(axis='x', labelpad=10)\nax.tick_params(axis='y', labelpad=10)\n\n# Set the color of the x-axis and y-axis tick labels\nax.tick_params(axis='x', labelcolor='red')\nax.tick_params(axis='y', labelcolor='blue')\n\n# Set the color of the x-axis and y-axis tick labels\nax.tick_params(axis='x', labelsize=10)\nax.tick_params(axis='y', labelsize=10)\n\n# Set the color of the x-axis and y-axis tick labels\nax.tick_params(axis='x', labelrotation=45)\nax.tick_params(axis='y', labelrotation=45)\n\n# Set the color of the x-axis and y-axis tick labels\nax.tick_params(axis='x', labelpad=10)\nax.tick_params(axis='y', labelpad=10)\n\n# Set the color of the x-axis and y-axis tick labels\nax.tick_params(axis='x', labelcolor='red')\nax.tick_params(axis='y', labelcolor='blue')\n\n# Set the color of the x-axis and y-axis tick labels\nax.tick_params(axis='x', labelsize=10)\nax.tick_params(axis='y', labelsize=10)\n\n# Set the color of the x-axis and y-axis tick labels\nax.tick_params(axis='x', labelrotation=45)\nax.tick_params(axis='y', labelrotation=45)\n\n# Set the color of the x-axis and y-axis tick labels\nax.tick_params(axis='x', labelpad=10)\nax.tick_params(axis='y', labelpad=10)\n\n# Set the color of the x-axis and y-axis tick labels\nax.tick_params(axis='x', labelcolor='red')\nax.tick_params(axis='y', labelcolor='blue')\n\n# Set the color of the x-axis and y-axis tick labels\nax.tick_params(axis='x', labelsize=10)\nax.tick_params(axis='y', labelsize=10)\n\n# Set the color of the x-axis and y-axis tick labels\nax.tick_params(axis='x', labelrotation=45)\nax.tick_params(axis='y', labelrotation=45)\n\n# Set the color of the x-axis and y-axis tick labels\nax.tick_params(axis='x', labelpad=10)\nax.tick_params(axis='y', labelpad=10)\n\n# Set the color of the x-axis and y-axis tick labels\nax.tick_params(axis='x', labelcolor='red')\nax.tick_params(axis='y', labelcolor='blue')\n\n# Set the color of the x-axis and y-axis tick labels\nax.tick_params(axis='x', labelsize=10)\nax.tick_params(axis='y', labelsize=10)\n\n# Set the color of the x-axis and y-axis tick labels\nax.tick_params(axis='x', labelrotation=45)\nax.tick_params(axis='y', labelrotation=45)\n\n# Set the color of the x-axis and y-axis tick labels\nax.tick_params(axis='x', labelpad=10)\nax.tick_params(axis='y', labelpad=10)\n\n# Set the color of the x-axis and y-axis tick labels\nax.tick_params(axis='x', labelcolor='red')\nax.tick_params(axis='y', labelcolor='blue')\n\n# Set the color of the x-axis and y-axis tick labels\nax.tick_params(axis='x', labelsize=10)\n"}
{"file": "dataset/ori_500/line_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\nx = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\ny1 = [80, 85, 90, 95, 92, 88, 85, 82, 78, 75, 72, 68, 65, 62, 58, 55, 52, 49, 46, 43]\ny2 = [75, 78, 81, 84, 87, 90, 93, 96, 99, 102, 105, 108, 111, 114, 117, 120, 123, 126, 129, 132]\ny3 = [60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98]\ny4 = [50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88]\ny5 = [40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data\nax.plot(x, y1, 'b-', label='BaCE')\nax.plot(x, y2, 'r-', label='LWF')\nax.plot(x, y3, 'm-', label='EWC')\nax.plot(x, y4, 'c-', label='SEQ')\nax.plot(x, y5, 'p-', label='Average Accuracy')\n\n# Add a legend\nax.legend()\n\n# Set the title and labels\nax.set_title('Model Performance Over Time')\nax.set_xlabel('Time (in years)')\nax.set_ylabel('Performance (%)')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_16.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Model Performance')\n\n# Set the x-axis label\nax.set_xlabel('Uncertainty threshold')\n\n# Set the y-axis label\nax.set_ylabel('Accuracy')\n\n# Define the data for the plots\nx = [0.0, 0.2, 0.4, 0.6, 0.8, 1.0]\ny1 = [0.99, 0.98, 0.97, 0.96, 0.95, 0.94]\ny2 = [0.99, 0.98, 0.97, 0.96, 0.95, 0.94]\ny3 = [0.99, 0.98, 0.97, 0.96, 0.95, 0.94]\n\n# Plot the data\nax.plot(x, y1, 'b-', label='Oesense')\nax.plot(x, y2, 'r-', label='KWS')\nax.plot(x, y3, 'g-', label='ECG5000')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_17.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Define the data\nx = np.linspace(0, 120, 100)\ny = np.log(x + 1)\n\n# Plot the data\nax.plot(x, y, color='blue')\n\n# Set the title and labels\nax.set_title('Log KL Divergence')\nax.set_xlabel('Number of Parameters')\nax.set_ylabel('Log KL Divergence')\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/line_18.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(9.0, 4.0))\n\n# Set the title of the graph\nax.set_title('GPT-4 Evaluation')\n\n# Create a scatter plot with random data\nx = np.random.rand(10)\ny = np.random.rand(10)\nax.scatter(x, y, color='blue')\n\n# Add a legend\nax.legend(['GPT-4'])\n\n# Set the x-axis label\nax.set_xlabel('Iterations')\n\n# Set the y-axis label\nax.set_ylabel('Attack Success Rate')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_19.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(5.0, 4.0))\n\n# Plot the data\nax.plot([1, 2, 3, 4, 5], [60, 70, 80, 90, 100], 'g-')\nax.plot([1, 2, 3, 4, 5], [50, 60, 70, 80, 90], 'r-')\nax.plot([1, 2, 3, 4, 5], [40, 50, 60, 70, 80], 'b-')\n\n# Add markers\nax.plot(1, 60, 'go')\nax.plot(2, 70, 'ro')\nax.plot(3, 80, 'bo')\nax.plot(4, 90, 'go')\nax.plot(5, 100, 'ro')\n\n# Set the title and labels\nax.set_title('Test Accuracy vs Fraction of Training Data')\nax.set_xlabel('Fraction of training data (log scale)')\nax.set_ylabel('Test accuracy (%)')\n\n# Add legends\nax.legend(['Full', 'SPT', 'VPT'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_2.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(4.0, 3.0))\n\n# Set the background color of the plot\nax.set_facecolor('lightblue')\n\n# Create a gradient effect for the background\ngradient = np.linspace(0, 1, 256)\ngradient = np.vstack((gradient, gradient))\nax.imshow(gradient, aspect='auto', cmap=plt.cm.Greys)\n\n# Create a scatter plot with different colors for each point\nx = np.linspace(0, 200, 100)\ny = np.sin(x/10)\nax.scatter(x, y, c=y, s=50, cmap='viridis')\n\n# Add a title and labels\nax.set_title('Temperature vs Gradient')\nax.set_xlabel('Gradient Steps (x 62.5K)')\nax.set_ylabel('Temperature (K)')\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/line_20.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(16.0, 8.0))\n\n# Set the title of the plot\nax.set_title('MOLHIV')\n\n# Create a scatter plot\nax.scatter([0.2, 0.4, 0.6, 0.8, 1.0], [0.78, 0.76, 0.74, 0.72, 0.70], color='blue')\n\n# Create a line plot\nax.plot([0.2, 0.4, 0.6, 0.8, 1.0], [0.78, 0.76, 0.74, 0.72, 0.70], color='red')\n\n# Add a legend\nax.legend(['PNA + ours', 'GIN + ours', 'PNA + GSAT', 'GIN + GSAT'])\n\n# Set the x-axis label\nax.set_xlabel('Ratio r')\n\n# Set the y-axis label\nax.set_ylabel('Performance')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_21.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nx = [120, 90, 60, 30, 10, 1, 1/30, 1/60, 1/90, 1/120]\ny1 = [85, 87, 88, 89, 90, 91, 92, 93, 94, 95]\ny2 = [80, 82, 83, 84, 85, 86, 87, 88, 89, 90]\n\n# Plot\nfig, ax = plt.subplots(figsize=(9.0, 6.0))\nax.plot(x, y1, 'b-', label='Ours')\nax.plot(x, y2, 'g-', label='ACR')\n\n# Legend\nax.legend()\n\n# Title and labels\nax.set_title('Top-1 Acc (%)')\nax.set_xlabel('Imbalance Ratio of Unlabeled Data')\nax.set_ylabel('Top-1 Acc (%)')\n\n# Markers\nfor i, txt in enumerate(x):\n    ax.annotate(txt, (x[i], y1[i]), textcoords=\"offset points\", xytext=(0,10), ha='center')\n\n# Colored rectangles\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='blue', alpha=0.2))\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='green', alpha=0.2))\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_22.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the graph\nx = [40, 50, 60, 70, 80, 90, 100]\ny = [2.91, 3.11, 3.32, 3.53, 3.63, 3.74, 3.94]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(5.0, 4.0))\n\n# Plot the data\nax.plot(x, y, 'b-')\n\n# Set the title and labels\nax.set_title('Perplexity vs. Ratio of 4-bit Utilization')\nax.set_xlabel('Ratio of 4-bit Utilization (%)')\nax.set_ylabel('Perplexity (PPL)')\n\n# Add a legend\nax.legend(['APTQ', 'LLaMa-7B (FP16): 5.22', 'OWQ-4bit: 5.56', 'GPTQ-4bit: 5.62', 'LLM-QAT-4bit: 7.4', 'LLM-QAT-4bit: 7.4', 'LLM-QAT-4bit: 7.4'], loc='upper left')\n\n# Add a grid\nax.grid(True)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_23.pdf", "response": "import matplotlib.pyplot as plt\n\n# Data for the graph\nx = [2**1, 2**2, 2**3, 2**4, 2**5, 2**6, 2**7]\ny = [67.32, 82.98, 89.53, 90.47, 92.47, 93.7, 96.75]\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(5.0, 2.0))\n\n# Plot the data\nax.plot(x, y, 'o-')\n\n# Set the title and labels\nax.set_title('Coverage Ratio vs Number of Training Objects')\nax.set_xlabel('Number of Training Objects')\nax.set_ylabel('Coverage Ratio (%)')\n\n# Set the x-axis tick labels\nax.set_xticks(x)\nax.set_xticklabels(['2^1', '2^2', '2^3', '2^4', '2^5', '2^6', '2^7'])\n\n# Set the y-axis limits\nax.set_ylim(60, 100)\n\n# Set the y-axis tick labels\nax.set_yticks(range(60, 101, 10))\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='red')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='blue')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='red')\n\n# Set the color of the plot line\nax.plot(x, y, color='blue')\n\n# Set the color of the plot markers\nax.plot(x, y, 'o', color='red')\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/line_24.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Set the x-axis limits\nax.set_xlim(0, 10)\n\n# Set the y-axis limits\nax.set_ylim(600, 800)\n\n# Set the x-axis label\nax.set_xlabel('Iterations')\n\n# Set the y-axis label\nax.set_ylabel('N-ELBO')\n\n# Create a scatter plot\nx = np.linspace(0, 10, 100)\ny = 750 - 50 * np.sin(x / 2)\nax.plot(x, y, 'b-')\n\n# Add a legend\nax.legend(['Average', 'Standard Deviation'])\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_25.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('IQM Human Normalized Score')\n\n# Set the x-axis label\nax.set_xlabel('Number of experts')\n\n# Set the y-axis label\nax.set_ylabel('DoN')\n\n# Create a scatter plot with the data\nax.scatter([1, 2, 3, 4, 5, 6, 7, 8], [2.5, 2.5, 2.5, 2.5, 2.5, 2.5, 2.5, 2.5], color='blue', label='Baseline')\nax.scatter([1, 2, 3, 4, 5, 6, 7, 8], [2.5, 2.5, 2.5, 2.5, 2.5, 2.5, 2.5, 2.5], color='green', label='SoftMoE')\nax.scatter([1, 2, 3, 4, 5, 6, 7, 8], [2.5, 2.5, 2.5, 2.5, 2.5, 2.5, 2.5, 2.5], color='pink', label='Top1-MoE')\n\n# Create a line plot with the data\nax.plot([1, 2, 3, 4, 5, 6, 7, 8], [2.5, 2.5, 2.5, 2.5, 2.5, 2.5, 2.5, 2.5], color='blue')\nax.plot([1, 2, 3, 4, 5, 6, 7, 8], [2.5, 2.5, 2.5, 2.5, 2.5, 2.5, 2.5, 2.5], color='green')\nax.plot([1, 2, 3, 4, 5, 6, 7, 8], [2.5, 2.5, 2.5, 2.5, 2.5, 2.5, 2.5, 2.5], color='pink')\n\n# Add a legend to the plot\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_26.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Test set TPR | FPR = $10^{-4}$')\n\n# Set the x-axis label\nax.set_xlabel('Vocabulary size')\n\n# Set the y-axis label\nax.set_ylabel('TPR')\n\n# Define the data points\nx = [256, 512, 1024, 2048, 4096, 8192, 16384]\ny = [0.2, 0.4, 0.6, 0.8, 0.9, 0.95, 0.98]\n\n# Plot the data points\nax.plot(x, y, 'o-')\n\n# Add a legend\nax.legend(['BPE', 'Wordpunct', 'Whitespace'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_27.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Word Error Rate vs Compression Rate')\n\n# Set the x-axis label\nax.set_xlabel('Compression Rate')\n\n# Set the y-axis label\nax.set_ylabel('Word Error Rate (%)')\n\n# Create a scatter plot for CNN\nax.scatter([1, 12, 24, 36, 48], [55.0, 36.8, 22.6, 17.9, 15.8], color='lightblue', label='CNN')\n\n# Create a scatter plot for CIF\nax.scatter([1, 12, 24, 36, 48], [54.0, 36.8, 22.6, 17.9, 15.8], color='purple', label='CIF')\n\n# Create a scatter plot for STAR\nax.scatter([1, 12, 24, 36, 48], [53.0, 36.8, 22.6, 17.9, 15.8], color='brown', label='STAR')\n\n# Create a line plot for CNN\nax.plot([1, 12, 24, 36, 48], [55.0, 36.8, 22.6, 17.9, 15.8], color='lightblue', linestyle='--')\n\n# Create a line plot for CIF\nax.plot([1, 12, 24, 36, 48], [54.0, 36.8, 22.6, 17.9, 15.8], color='purple', linestyle='--')\n\n# Create a line plot for STAR\nax.plot([1, 12, 24, 36, 48], [53.0, 36.8, 22.6, 17.9, 15.8], color='brown', linestyle='--')\n\n# Add a legend to the plot\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_28.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\nx = [25, 50, 75, 100, 125, 150, 175, 200]\ny1 = [0.95, 0.93, 0.92, 0.91, 0.90, 0.89, 0.88, 0.87]\ny2 = [0.94, 0.92, 0.91, 0.90, 0.89, 0.88, 0.87, 0.86]\ny3 = [0.93, 0.91, 0.90, 0.89, 0.88, 0.87, 0.86, 0.85]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Plot the data\nax.plot(x, y1, 'r-', label='PILOTE')\nax.plot(x, y2, 'b-', label='Re-trained model')\nax.plot(x, y3, 'g-', label='Pre-trained model accuracy')\n\n# Add markers\nfor i in range(len(x)):\n    ax.plot(x[i], y1[i], 'ro')\n    ax.plot(x[i], y2[i], 'bo')\n    ax.plot(x[i], y3[i], 'go')\n\n# Set the title and labels\nax.set_title('Model Accuracy over Number of Exemplars')\nax.set_xlabel('Number of exemplars in class \\'Run\\'')\nax.set_ylabel('Avg. accuracy of five rounds')\n\n# Add legends\nax.legend()\n\n# Add horizontal lines\nax.axhline(y=0.85, color='g', linestyle='-')\nax.axhline(y=0.75, color='r', linestyle='-')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_29.pdf", "response": "import matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(4.0, 3.0))\n\n# Set the title of the plot\nax.set_title('Average Fidelity Over Time')\n\n# Set the x-axis label\nax.set_xlabel('# of Steps')\n\n# Set the y-axis label\nax.set_ylabel('Average Fidelity')\n\n# Create a scatter plot with a blue color for the data points\nax.scatter([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2.0], color='blue')\n\n# Create a line plot with a red color for the trend line\nax.plot([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2.0], color='red')\n\n# Add a legend to the plot\nax.legend(['xLLM', 'Single-Pass LLM'])\n\n# Display the plot\nplt.show()"}
{"file": "dataset/ori_500/line_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Set the title of the plot\nax.set_title('Player Performance')\n\n# Set the x-axis label\nax.set_xlabel('Players')\n\n# Set the y-axis label\nax.set_ylabel('Hits')\n\n# Define the players\nplayers = ['All', 'MLP', 'GCF', 'NCN', 'NC', 'NEO', 'SEAL', 'Node2Vec']\n\n# Define the hits for each player\nhits = [80, 75, 70, 65, 60, 55, 50, 45]\n\n# Plot the hits for each player\nfor i in range(len(players)):\n    ax.plot([i], [hits[i]], 'ro')  # 'ro' means red circle\n\n# Set the x-ticks to be the players\nax.set_xticks(range(len(players)))\nax.set_xticklabels(players)\n\n# Set the y-limits\nax.set_ylim(40, 90)\n\n# Set the y-ticks\nax.set_yticks(range(40, 91, 10))\n\n# Set the y-tick labels\nax.set_yticklabels(['40', '50', '60', '70', '80', '90'])\n\n# Set the color of the y-ticks\nax.tick_params(axis='y', colors='orange')\n\n# Set the color of the x-ticks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the ticks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the labels\nax.set_xlabel('Players', color='black')\nax.set_ylabel('Hits', color='black')\n\n# Set the color of the title\nax.set_title('Player Performance', color='black')\n\n# Set the color of the legend\nax.legend(['Player Performance'], loc='upper left', fancybox=True, shadow=True)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_30.pdf", "response": "import matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Set the title of the plot\nax.set_title('Android')\n\n# Create a scatter plot with random data\nx = [2, 4, 6, 8, 10, 12]\ny = [0.05, 0.07, 0.09, 0.11, 0.13, 0.15]\nax.scatter(x, y, color='blue')\n\n# Create a line plot with random data\nx = [2, 4, 6, 8, 10, 12]\ny = [0.05, 0.07, 0.09, 0.11, 0.13, 0.15]\nax.plot(x, y, color='orange')\n\n# Add a legend\nax.legend(['outside-code-diff', 'inside-code-diff'])\n\n# Set the x-axis label\nax.set_xlabel('Layer')\n\n# Set the y-axis label\nax.set_ylabel('Value')\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/line_31.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Model Performance')\n\n# Set the x-axis label\nax.set_xlabel('Digit Length')\n\n# Set the y-axis label\nax.set_ylabel('Model Accuracy')\n\n# Plot the data\nax.plot([6, 7, 8, 9], [0.9, 0.8, 0.7, 0.6], 'b-', label='Model 1')\nax.plot([6, 7, 8, 9], [0.8, 0.7, 0.6, 0.5], 'g-', label='Model 2')\nax.plot([6, 7, 8, 9], [0.7, 0.6, 0.5, 0.4], 'r-', label='Model 3')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_32.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('CIFAR100 States Zero Shot Accuracy')\n\n# Set the x-axis label\nax.set_xlabel('Decomposition IO Norm')\n\n# Set the y-axis label\nax.set_ylabel('Accuracy')\n\n# Set the x-axis limits\nax.set_xlim(0, 80)\n\n# Set the y-axis limits\nax.set_ylim(0.2, 0.4)\n\n# Set the x-axis ticks\nax.set_xticks(range(0, 90, 10))\n\n# Set the y-axis ticks\nax.set_yticks([0.25, 0.3, 0.35, 0.4])\n\n# Draw a horizontal line at y=0.375\nax.axhline(y=0.375, color='black', linestyle='-')\n\n# Draw a horizontal line at y=0.35\nax.axhline(y=0.35, color='black', linestyle='-')\n\n# Draw a horizontal line at y=0.325\nax.axhline(y=0.325, color='black', linestyle='-')\n\n# Draw a horizontal line at y=0.3\nax.axhline(y=0.3, color='black', linestyle='-')\n\n# Draw a horizontal line at y=0.275\nax.axhline(y=0.275, color='black', linestyle='-')\n\n# Draw a horizontal line at y=0.25\nax.axhline(y=0.25, color='black', linestyle='-')\n\n# Draw a horizontal line at y=0.225\nax.axhline(y=0.225, color='black', linestyle='-')\n\n# Draw a horizontal line at y=0.2\nax.axhline(y=0.2, color='black', linestyle='-')\n\n# Draw a horizontal line at y=0.175\nax.axhline(y=0.175, color='black', linestyle='-')\n\n# Draw a horizontal line at y=0.15\nax.axhline(y=0.15, color='black', linestyle='-')\n\n# Draw a horizontal line at y=0.125\nax.axhline(y=0.125, color='black', linestyle='-')\n\n# Draw a horizontal line at y=0.1\nax.axhline(y=0.1, color='black', linestyle='-')\n\n# Draw a horizontal line at y=0.075\nax.axhline(y=0.075, color='black', linestyle='-')\n\n# Draw a horizontal line at y=0.05\nax.axhline(y=0.05, color='black', linestyle='-')\n\n# Draw a horizontal line at y=0.025\nax.axhline(y=0.025, color='black', linestyle='-')\n\n# Draw a horizontal line at y=0\nax.axhline(y=0, color='black', linestyle='-')\n\n# Draw a vertical line at x=0\nax.axvline(x=0, color='black', linestyle='-')\n\n# Draw a vertical line at x=20\nax.axvline(x=20, color='black', linestyle='-')\n\n# Draw a vertical line at x=40\nax.axvline(x=40, color='black', linestyle='-')\n\n# Draw a vertical line at x=60\nax.axvline(x=60, color='black', linestyle='-')\n\n# Draw a vertical line at x=80\nax.axvline(x=80, color='black', linestyle='-')\n\n# Draw a scatter plot\nax.scatter([0, 20, 40, 60, 80], [0.225, 0.25, 0.275, 0.3, 0.325], color='orange')\n\n# Draw a line plot\nax.plot([0, 20, 40, 60, 80], [0.225, 0.25, 0.275, 0.3, 0.325], color='orange')\n\n# Add a legend\nax.legend(['Accuracy'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_33.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Define the data for the plots\nx = [20, 40, 60, 80, 100]\ny1 = [0.55, 0.65, 0.75, 0.85, 0.95]\ny2 = [0.50, 0.60, 0.70, 0.80, 0.90]\ny3 = [0.45, 0.55, 0.65, 0.75, 0.85]\n\n# Plot the data\nax.plot(x, y1, 'r-', label='CNN')\nax.plot(x, y2, 'g-', label='CNN+HMM')\nax.plot(x, y3, 'b-', label='RF')\n\n# Add a legend\nax.legend()\n\n# Set the title and labels\nax.set_title('Comparison of CNN, CNN+HMM, and RF')\nax.set_xlabel('No. of Users in Development Set')\nax.set_ylabel('F1')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_34.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nx = [2, 3, 4, 5, 6, 7, 8]\ny1 = [27.44, 24.75, 23.38, 22.77, 22.32, 21.47, 21.51]\ny2 = [6.74, 4.54, 3.96, 3.71, 3.49, 3.34, 3.15]\n\n# Plot\nfig, ax = plt.subplots(figsize=(8.0, 7.0))\nax.plot(x, y1, 'o-', color='orange', label='WER (%)')\nax.plot(x, y2, 'o-', color='blue', label='AMI (%)')\n\n# Set title and labels\nax.set_title('Microphone Performance')\nax.set_xlabel('Number of microphones')\nax.set_ylabel('Performance (%)')\n\n# Add legend\nax.legend()\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_35.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Set the title of the plot\nax.set_title('Quantization error')\n\n# Set the x-axis label\nax.set_xlabel('Time (s)')\n\n# Set the y-axis label\nax.set_ylabel('Quantization error')\n\n# Define the time array\ntime = np.arange(10**-7, 10**-4, 10**-8)\n\n# Define the quantization error array\nquantization_error = np.sin(time) + np.cos(time)\n\n# Plot the quantization error\nax.plot(time, quantization_error, 'b-', label='empirical relat. (B2=8.0)')\n\n# Add a legend to the plot\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_36.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and a set of subplots\nfig, axs = plt.subplots(3, 3, figsize=(15, 5))\n\n# Set the title for each subplot\naxs[0, 0].set_title('SPMotif-0.5')\naxs[0, 1].set_title('SPMotif-0.7')\naxs[0, 2].set_title('SPMotif-0.9')\n\n# Create a rectangle patch for the logo\nlogo = plt.Rectangle((0.05, 0.85), 0.1, 0.1, color='blue')\naxs[0, 0].add_patch(logo)\naxs[0, 1].add_patch(logo)\naxs[0, 2].add_patch(logo)\n\n# Create a rectangle patch for the social media icons\nsocial_media = plt.Rectangle((0.05, 0.05), 0.1, 0.1, color='red')\naxs[0, 0].add_patch(social_media)\naxs[0, 1].add_patch(social_media)\naxs[0, 2].add_patch(social_media)\n\n# Create a rectangle patch for the performance graph\nperformance = plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='orange')\naxs[0, 0].add_patch(performance)\naxs[0, 1].add_patch(performance)\naxs[0, 2].add_patch(performance)\n\n# Create a rectangle patch for the market share graph\nmarket_share = plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='purple')\naxs[1, 0].add_patch(market_share)\naxs[1, 1].add_patch(market_share)\naxs[1, 2].add_patch(market_share)\n\n# Create a rectangle patch for the revenue graph\nrevenue = plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='green')\naxs[2, 0].add_patch(revenue)\naxs[2, 1].add_patch(revenue)\naxs[2, 2].add_patch(revenue)\n\n# Add text to the plots\naxs[0, 0].text(0.5, 0.5, 'PNA + ours', horizontalalignment='center', verticalalignment='center', transform=axs[0, 0].transAxes, fontsize=12, color='purple')\naxs[0, 1].text(0.5, 0.5, 'GIN + ours', horizontalalignment='center', verticalalignment='center', transform=axs[0, 1].transAxes, fontsize=12, color='orange')\naxs[0, 2].text(0.5, 0.5, 'PNA + ours', horizontalalignment='center', verticalalignment='center', transform=axs[0, 2].transAxes, fontsize=12, color='purple')\naxs[1, 0].text(0.5, 0.5, 'GIN + ours', horizontalalignment='center', verticalalignment='center', transform=axs[1, 0].transAxes, fontsize=12, color='orange')\naxs[1, 1].text(0.5, 0.5, 'PNA + ours', horizontalalignment='center', verticalalignment='center', transform=axs[1, 1].transAxes, fontsize=12, color='purple')\naxs[1, 2].text(0.5, 0.5, 'GIN + ours', horizontalalignment='center', verticalalignment='center', transform=axs[1, 2].transAxes, fontsize=12, color='orange')\naxs[2, 0].text(0.5, 0.5, 'PNA + ours', horizontalalignment='center', verticalalignment='center', transform=axs[2, 0].transAxes, fontsize=12, color='purple')\naxs[2, 1].text(0.5, 0.5, 'GIN + ours', horizontalalignment='center', verticalalignment='center', transform=axs[2, 1].transAxes, fontsize=12, color='orange')\naxs[2, 2].text(0.5, 0.5, 'PNA + ours', horizontalalignment='center', verticalalignment='center', transform=axs[2, 2].transAxes, fontsize=12, color='purple')\n\n# Plot the data\nx = np.linspace(0.1, 1.0, 100)\ny1 = np.sin(x)\ny2 = np.cos(x)\ny3 = np.tan(x)\naxs[0, 0].plot(x, y1, 'b-')\naxs[0, 1].plot(x, y2, 'r-')\naxs[0, 2].plot(x, y3, 'g-')\naxs[1, 0].plot(x, y1, 'b-')\naxs[1, 1].plot(x, y2, 'r-')\naxs[1, 2].plot(x, y3, 'g-')\naxs[2, 0].plot(x, y1, 'b-')\naxs[2, 1].plot(x, y2, 'r-')\naxs[2, 2].plot(x, y3, 'g-')\n\n# Set the x-axis limits\naxs[0, 0].set_xlim([0.1, 1.0])\naxs[0, 1].set_xlim([0.1, 1.0])\naxs[0, 2].set_xlim([0.1, 1.0])\naxs[1, 0].set_xlim([0.1, 1.0])\naxs[1, 1].set_xlim([0.1, 1.0])\naxs[1, 2].set_xlim([0.1, 1.0])\naxs[2, 0].set_xlim([0.1, 1.0])\naxs[2, 1].set_xlim([0.1, 1.0])\naxs[2, 2].set_xlim([0.1, 1.0])\n\n# Set the y-axis limits\naxs[0, 0].set_ylim([0.4, 1.0])\naxs[0, 1].set_ylim([0.4, 1.0])\naxs[0, 2].set_ylim([0.4, 1.0])\naxs[1, 0].set_ylim([0.4, 1.0])\naxs[1, 1].set_ylim([0.4, 1.0])\naxs[1, 2].set_ylim([0.4, 1.0])\naxs[2, 0].set_ylim([0.4, 1.0])\naxs[2, 1].set_ylim([0.4, 1.0])\naxs[2, 2].set_ylim([0.4, 1.0])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_37.pdf", "response": "import matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(6.0, 5.0))\n\n# Set the title of the plot\nax.set_title('Model Accuracy')\n\n# Set the x-axis label\nax.set_xlabel('Ensemble Size')\n\n# Set the y-axis label\nax.set_ylabel('Accuracy')\n\n# Create a scatter plot with the data\nax.scatter([6, 9, 12, 18, 24, 30], [75.5, 76.5, 77.5, 78.5, 79.5, 80.5], color='blue')\n\n# Create a line plot with the data\nax.plot([6, 9, 12, 18, 24, 30], [75.5, 76.5, 77.5, 78.5, 79.5, 80.5], color='red')\n\n# Set the x-axis limits\nax.set_xlim(5, 35)\n\n# Set the y-axis limits\nax.set_ylim(74, 81)\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/line_38.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(6.0, 3.0))\n\n# Set the title of the plot\nax.set_title('GPT-Neo Performance Over Time')\n\n# Set the x-axis label\nax.set_xlabel('# Epochs')\n\n# Set the y-axis label\nax.set_ylabel('MAE')\n\n# Create a list of epochs\nepochs = [3, 5, 10, 30, 100]\n\n# Create a list of MAE values\nmae_values = [0.8, 0.7, 0.6, 0.5, 0.4]\n\n# Create a list of colors for each data point\ncolors = ['red', 'blue', 'green', 'yellow', 'black']\n\n# Create a scatter plot with the data points\nscatter = ax.scatter(epochs, mae_values, c=colors)\n\n# Add a legend to the plot\nlegend = ax.legend(*scatter.legend_elements(), title=\"Epochs\")\nax.add_artist(legend)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_39.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and a set of subplots\nfig, axs = plt.subplots(2, 3, figsize=(15, 6))\n\n# Set the title for each subplot\naxs[0, 0].set_title('Traffic')\naxs[0, 1].set_title('ETMm2')\naxs[0, 2].set_title('ETTh2')\naxs[1, 0].set_title('ECL')\n\n# Plot the data\naxs[0, 0].plot([96, 192, 336, 720], [0.16, 0.18, 0.16, 0.14], 'r--', label='Traffic')\naxs[0, 0].scatter([96, 192, 336, 720], [0.16, 0.18, 0.16, 0.14], color='red')\naxs[0, 0].legend()\n\naxs[0, 1].plot([96, 192, 336, 720], [0.16, 0.18, 0.16, 0.14], 'r--', label='ETMm2')\naxs[0, 1].scatter([96, 192, 336, 720], [0.16, 0.18, 0.16, 0.14], color='red')\naxs[0, 1].legend()\n\naxs[0, 2].plot([96, 192, 336, 720], [0.16, 0.18, 0.16, 0.14], 'r--', label='ETTh2')\naxs[0, 2].scatter([96, 192, 336, 720], [0.16, 0.18, 0.16, 0.14], color='red')\naxs[0, 2].legend()\n\naxs[1, 0].plot([96, 192, 336, 720], [0.16, 0.18, 0.16, 0.14], 'r--', label='ECL')\naxs[1, 0].scatter([96, 192, 336, 720], [0.16, 0.18, 0.16, 0.14], color='red')\naxs[1, 0].legend()\n\n# Add a legend to the plot\nfig.legend(loc='upper right')\n\n# Add a color bar to the plot\nfig.colorbar(axs[0, 0].scatter([96, 192, 336, 720], [0.16, 0.18, 0.16, 0.14], color='red'))\n\n# Add a color bar to the plot\nfig.colorbar(axs[0, 1].scatter([96, 192, 336, 720], [0.16, 0.18, 0.16, 0.14], color='red'))\n\n# Add a color bar to the plot\nfig.colorbar(axs[0, 2].scatter([96, 192, 336, 720], [0.16, 0.18, 0.16, 0.14], color='red'))\n\n# Add a color bar to the plot\nfig.colorbar(axs[1, 0].scatter([96, 192, 336, 720], [0.16, 0.18, 0.16, 0.14], color='red'))\n\n# Add a color bar to the plot\nfig.colorbar(axs[1, 1].scatter([96, 192, 336, 720], [0.16, 0.18, 0.16, 0.14], color='red'))\n\n# Add a color bar to the plot\nfig.colorbar(axs[1, 2].scatter([96, 192, 336, 720], [0.16, 0.18, 0.16, 0.14], color='red'))\n\n# Add a color bar to the plot\nfig.colorbar(axs[0, 0].scatter([96, 192, 336, 720], [0.16, 0.18, 0.16, 0.14], color='red'))\n\n# Add a color bar to the plot\nfig.colorbar(axs[0, 1].scatter([96, 192, 336, 720], [0.16, 0.18, 0.16, 0.14], color='red'))\n\n# Add a color bar to the plot\nfig.colorbar(axs[0, 2].scatter([96, 192, 336, 720], [0.16, 0.18, 0.16, 0.14], color='red'))\n\n# Add a color bar to the plot\nfig.colorbar(axs[1, 0].scatter([96, 192, 336, 720], [0.16, 0.18, 0.16, 0.14], color='red'))\n\n# Add a color bar to the plot\nfig.colorbar(axs[1, 1].scatter([96, 192, 336, 720], [0.16, 0.18, 0.16, 0.14], color='red'))\n\n# Add a color bar to the plot\nfig.colorbar(axs[1, 2].scatter([96, 192, 336, 720], [0.16, 0.18, 0.16, 0.14], color='red'))\n\n# Add a color bar to the plot\nfig.colorbar(axs[0, 0].scatter([96, 192, 336, 720], [0.16, 0.18, 0.16, 0.14], color='red'))\n\n# Add a color bar to the plot\nfig.colorbar(axs[0, 1].scatter([96, 192, 336, 720], [0.16, 0.18, 0.16, 0.14], color='red'))\n\n# Add a color bar to the plot\nfig.colorbar(axs[0, 2].scatter([96, 192, 336, 720], [0.16, 0.18, 0.16, 0.14], color='red'))\n\n# Add a color bar to the plot\nfig.colorbar(axs[1, 0].scatter([96, 192, 336, 720], [0.16, 0.18, 0.16, 0.14], color='red'))\n\n# Add a color bar to the plot\nfig.colorbar(axs[1, 1].scatter([96, 192, 336, 720], [0.16, 0.18, 0.16, 0.14], color='red'))\n\n# Add a color bar to the plot\nfig.colorbar(axs[1, 2].scatter([96, 192, 336, 720], [0.16, 0.18, 0.16, 0.14], color='red'))\n\n# Add a color bar to the plot\nfig.colorbar(axs[0, 0].scatter([96, 192, 336, 720], [0.16, 0.18, 0.16, 0.14], color='red'))\n\n# Add a color bar to the plot\nfig.colorbar(axs[0, 1].scatter([96, 192, 336, 720], [0.16, 0.18, 0.16, 0.14], color='red'))\n\n# Add a color bar to the plot\nfig.colorbar(axs[0, 2].scatter([96, 192, 336, 720], [0.16, 0.18, 0.16, 0.14], color='red'))\n\n# Add a color bar to the plot\nfig.colorbar(axs[1, 0].scatter([96, 192, 336, 720], [0.16, 0.18, 0.16, 0.14], color='red'))\n\n# Add a color bar to the plot\nfig.colorbar(axs[1, 1].scatter([96, 192, 336, 720], [0.16, 0.18, 0.16, 0.14], color='red'))\n\n# Add a color bar to the plot\nfig.colorbar(axs[1, 2].scatter([96, 192, 336, 720], [0.16, 0.18, 0.16, 0.14], color='red'))\n\n# Add a color bar to the plot\nfig.colorbar(axs[0, 0].scatter([96, 192, 336, 720], [0.16, 0.18, 0.16, 0.14], color='red'))\n\n# Add a color bar to the plot\nfig.colorbar(axs[0, 1].scatter([96, 192, 336, 720], [0.16, 0.18, 0.16, 0.14], color='red'))\n\n# Add a color bar to the plot\nfig.colorbar(axs[0, 2].scatter([96, 192, 336, 720], [0.16, 0.18, 0.16, 0.14], color='red'))\n\n# Add a color bar to the plot\nfig.colorbar(axs[1, 0].scatter([96, 192, 336, 720], [0.16, 0.18, 0.16, 0.14], color='red'))\n\n# Add a color bar to the plot\nfig.colorbar(axs[1, 1].scatter([96, 192, 336, 720], [0.16, 0.18, 0.16, 0.14], color='red'))\n\n# Add a color bar to the plot\nfig.colorbar(axs[1, 2].scatter([96, 192, 336, 720], [0.16, 0.18, 0.16, 0.14], color='red'))\n\n# Add a color bar to the plot\nfig.colorbar(axs[0, 0].scatter([96, 192, 336, 720], [0.16, 0.18, 0.16, 0.14], color='red'))\n\n# Add a color bar to the plot\nfig.colorbar(axs[0, 1].scatter([96, 192, 336, 720], [0.16, 0.18, 0.16, 0.14], color='red'))\n\n# Add a color bar to the plot\nfig.colorbar(axs[0, 2].scatter([96, 192, 336, 720], [0.16, 0.18, 0.16, 0.14], color='red'))\n\n# Add a color bar to the plot\nfig.colorbar(axs[1, 0].scatter([96, 192, 336, 720], [0.16, 0.18, 0.16, 0.14], color='red'))\n\n# Add a color bar to the plot\nfig.colorbar(axs[1, 1].scatter([96, 192, 336, 720], [0.16, 0.18, 0.16, 0.14], color='red'))\n\n# Add a color bar to the plot\nfig.colorbar(axs[1, 2].scatter([96, 192, 336, 720], [0.16, 0.18, 0.16, 0.14], color='red'))\n\n# Add a color bar to the plot\nfig.colorbar(axs[0, 0].scatter([96, 192, 336, 720], [0.16, 0.18, 0.16, 0.14], color='red'))\n\n# Add a color bar to the plot\nfig.colorbar(axs[0, 1].scatter([96, 192, 336, 720], [0.16, 0.18, 0.16, 0.14], color='red'))\n\n# Add a color bar to the plot\nfig.colorbar(axs[0, 2].scatter([96, 192, 336, 720], [0.16, 0.18, 0.16, 0.14], color='red'))\n\n# Add a color bar to the plot\nfig.colorbar(axs[1, 0].scatter([96, 192, 336, 720], [0.16, 0.18, 0.16, 0.14], color='red'))\n\n# Add a color bar to the plot\nfig.colorbar(axs[1, 1].scatter([96, 192, 336, 720], [0.16, 0.18, 0.16, 0.14], color='red'))\n\n# Add a color bar to the plot\nfig.colorbar(axs[1, 2].scatter([96, 192, 336, 720], [0.16, 0.18, 0.16, 0.14], color='red'))\n\n# Add a color bar to the plot\nfig.colorbar(axs[0, 0].scatter([96, 192, 336, 720], [0.16, 0.18, 0.16, 0.14], color='red'))\n\n# Add a color bar to the plot\nfig.colorbar(axs[0, 1].scatter([96, 192, 336, 720], [0.16, 0.18, 0.16, 0.14], color='red'))\n\n# Add a color bar to the plot\nfig.colorbar(axs[0, 2].scatter([96, 192, 336, 720], [0.16, 0.18, 0.16, 0.14], color='red'))\n\n# Add a color bar to the plot\nfig.colorbar(axs[1, 0].scatter([96, 192, 336, 720], [0.16, 0.18, 0.16, 0.14], color='red'))\n\n# Add a color bar to the plot\nfig.colorbar(axs[1, 1].scatter([96, 192, 336, 720], [0.16, 0.18, 0.16, 0.14], color='red'))\n\n# Add a color bar to the plot\nfig.colorbar(axs[1, 2].scatter([96, 192, 336, 720], [0.16, 0.18, 0.16, 0.14], color='red'))\n\n# Add a color bar to the plot\nfig.colorbar(axs[0, 0].scatter([96, 192, 336, 720], [0.16, 0.18, 0.16, 0.14], color='red'))\n\n# Add a color bar to the plot\nfig.colorbar(axs[0, 1].scatter([96, 192, 336, 720], [0.16, 0.18, 0.16, 0.14], color='red'))\n\n# Add a color bar to the plot\nfig.colorbar(axs[0, 2].scatter([96, 192, 336, 720], [0.16, 0.18, 0.16, 0.14], color='red'))\n\n# Add a color bar to the plot\nfig.colorbar(axs[1, 0].scatter([96, 192, 336, 720"}
{"file": "dataset/ori_500/line_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(9.0, 4.0))\n\n# Set the title of the plot\nax.set_title('Serial (n=8, m=1)')\n\n# Create a scatter plot with orange dots\nax.scatter([224, 128, 64, 32], [70, 60, 50, 40], color='orange')\n\n# Create a line plot with orange lines\nax.plot([224, 128, 64, 32], [70, 60, 50, 40], color='orange')\n\n# Add a red rectangle at the bottom left corner\nax.add_patch(plt.Rectangle((0, 0), 10, 10, color='red'))\n\n# Add a blue rectangle at the top right corner\nax.add_patch(plt.Rectangle((80, 80), 10, 10, color='blue'))\n\n# Add a green rectangle at the bottom right corner\nax.add_patch(plt.Rectangle((80, 0), 10, 10, color='green'))\n\n# Add a yellow rectangle at the top left corner\nax.add_patch(plt.Rectangle((0, 80), 10, 10, color='yellow'))\n\n# Add a purple rectangle at the center of the plot\nax.add_patch(plt.Rectangle((40, 40), 10, 10, color='purple'))\n\n# Add a pink rectangle at the bottom center of the plot\nax.add_patch(plt.Rectangle((40, 0), 10, 10, color='pink'))\n\n# Add a brown rectangle at the top center of the plot\nax.add_patch(plt.Rectangle((40, 80), 10, 10, color='brown'))\n\n# Add a gray rectangle at the center of the plot\nax.add_patch(plt.Rectangle((40, 40), 10, 10, color='gray'))\n\n# Add a black rectangle at the bottom center of the plot\nax.add_patch(plt.Rectangle((40, 0), 10, 10, color='black'))\n\n# Add a white rectangle at the top center of the plot\nax.add_patch(plt.Rectangle((40, 80), 10, 10, color='white'))\n\n# Add a cyan rectangle at the center of the plot\nax.add_patch(plt.Rectangle((40, 40), 10, 10, color='cyan'))\n\n# Add a magenta rectangle at the bottom center of the plot\nax.add_patch(plt.Rectangle((40, 0), 10, 10, color='magenta'))\n\n# Add a silver rectangle at the top center of the plot\nax.add_patch(plt.Rectangle((40, 80), 10, 10, color='silver'))\n\n# Add a gold rectangle at the center of the plot\nax.add_patch(plt.Rectangle((40, 40), 10, 10, color='gold'))\n\n# Add a olive rectangle at the bottom center of the plot\nax.add_patch(plt.Rectangle((40, 0), 10, 10, color='olive'))\n\n# Add a navy rectangle at the top center of the plot\nax.add_patch(plt.Rectangle((40, 80), 10, 10, color='navy'))\n\n# Add a maroon rectangle at the center of the plot\nax.add_patch(plt.Rectangle((40, 40), 10, 10, color='maroon'))\n\n# Add a teal rectangle at the bottom center of the plot\nax.add_patch(plt.Rectangle((40, 0), 10, 10, color='teal'))\n\n# Add a lime rectangle at the top center of the plot\nax.add_patch(plt.Rectangle((40, 80), 10, 10, color='lime'))\n\n# Add a aqua rectangle at the center of the plot\nax.add_patch(plt.Rectangle((40, 40), 10, 10, color='aqua'))\n\n# Add a fuchsia rectangle at the bottom center of the plot\nax.add_patch(plt.Rectangle((40, 0), 10, 10, color='fuchsia'))\n\n# Add a silver rectangle at the top center of the plot\nax.add_patch(plt.Rectangle((40, 80), 10, 10, color='silver'))\n\n# Add a gold rectangle at the center of the plot\nax.add_patch(plt.Rectangle((40, 40), 10, 10, color='gold'))\n\n# Add a olive rectangle at the bottom center of the plot\nax.add_patch(plt.Rectangle((40, 0), 10, 10, color='olive'))\n\n# Add a navy rectangle at the top center of the plot\nax.add_patch(plt.Rectangle((40, 80), 10, 10, color='navy'))\n\n# Add a maroon rectangle at the center of the plot\nax.add_patch(plt.Rectangle((40, 40), 10, 10, color='maroon'))\n\n# Add a teal rectangle at the bottom center of the plot\nax.add_patch(plt.Rectangle((40, 0), 10, 10, color='teal'))\n\n# Add a lime rectangle at the top center of the plot\nax.add_patch(plt.Rectangle((40, 80), 10, 10, color='lime'))\n\n# Add a aqua rectangle at the center of the plot\nax.add_patch(plt.Rectangle((40, 40), 10, 10, color='aqua'))\n\n# Add a fuchsia rectangle at the bottom center of the plot\nax.add_patch(plt.Rectangle((40, 0), 10, 10, color='fuchsia'))\n\n# Add a silver rectangle at the top center of the plot\nax.add_patch(plt.Rectangle((40, 80), 10, 10, color='silver'))\n\n# Add a gold rectangle at the center of the plot\nax.add_patch(plt.Rectangle((40, 40), 10, 10, color='gold'))\n\n# Add a olive rectangle at the bottom center of the plot\nax.add_patch(plt.Rectangle((40, 0), 10, 10, color='olive'))\n\n# Add a navy rectangle at the top center of the plot\nax.add_patch(plt.Rectangle((40, 80), 10, 10, color='navy'))\n\n# Add a maroon rectangle at the center of the plot\nax.add_patch(plt.Rectangle((40, 40), 10, 10, color='maroon'))\n\n# Add a teal rectangle at the bottom center of the plot\nax.add_patch(plt.Rectangle((40, 0), 10, 10, color='teal'))\n\n# Add a lime rectangle at the top center of the plot\nax.add_patch(plt.Rectangle((40, 80), 10, 10, color='lime'))\n\n# Add a aqua rectangle at the center of the plot\nax.add_patch(plt.Rectangle((40, 40), 10, 10, color='aqua'))\n\n# Add a fuchsia rectangle at the bottom center of the plot\nax.add_patch(plt.Rectangle((40, 0), 10, 10, color='fuchsia'))\n\n# Add a silver rectangle at the top center of the plot\nax.add_patch(plt.Rectangle((40, 80), 10, 10, color='silver'))\n\n# Add a gold rectangle at the center of the plot\nax.add_patch(plt.Rectangle((40, 40), 10, 10, color='gold'))\n\n# Add a olive rectangle at the bottom center of the plot\nax.add_patch(plt.Rectangle((40, 0), 10, 10, color='olive'))\n\n# Add a navy rectangle at the top center of the plot\nax.add_patch(plt.Rectangle((40, 80), 10, 10, color='navy'))\n\n# Add a maroon rectangle at the center of the plot\nax.add_patch(plt.Rectangle((40, 40), 10, 10, color='maroon'))\n\n# Add a teal rectangle at the bottom center of the plot\nax.add_patch(plt.Rectangle((40, 0), 10, 10, color='teal'))\n\n# Add a lime rectangle at the top center of the plot\nax.add_patch(plt.Rectangle((40, 80), 10, 10, color='lime'))\n\n# Add a aqua rectangle at the center of the plot\nax.add_patch(plt.Rectangle((40, 40), 10, 10, color='aqua'))\n\n# Add a fuchsia rectangle at the bottom center of the plot\nax.add_patch(plt.Rectangle((40, 0), 10, 10, color='fuchsia'))\n\n# Add a silver rectangle at the top center of the plot\nax.add_patch(plt.Rectangle((40, 80), 10, 10, color='silver'))\n\n# Add a gold rectangle at the center of the plot\nax.add_patch(plt.Rectangle((40, 40), 10, 10, color='gold'))\n\n# Add a olive rectangle at the bottom center of the plot\nax.add_patch(plt.Rectangle((40, 0), 10, 10, color='olive'))\n\n# Add a navy rectangle at the top center of the plot\nax.add_patch(plt.Rectangle((40, 80), 10, 10, color='navy'))\n\n# Add a maroon rectangle at the center of the plot\nax.add_patch(plt.Rectangle((40, 40), 10, 10, color='maroon'))\n\n# Add a teal rectangle at the bottom center of the plot\nax.add_patch(plt.Rectangle((40, 0), 10, 10, color='teal'))\n\n# Add a lime rectangle at the top center of the plot\nax.add_patch(plt.Rectangle((40, 80), 10, 10, color='lime'))\n\n# Add a aqua rectangle at the center of the plot\nax.add_patch(plt.Rectangle((40, 40), 10, 10, color='aqua'))\n\n# Add a fuchsia rectangle at the bottom center of the plot\nax.add_patch(plt.Rectangle((40, 0), 10, 10, color='fuchsia'))\n\n# Add a silver rectangle at the top center of the plot\nax.add_patch(plt.Rectangle((40, 80), 10, 10, color='silver'))\n\n# Add a gold rectangle at the center of the plot\nax.add_patch(plt.Rectangle((40, 40), 10, 10, color='gold'))\n\n# Add a olive rectangle at the bottom center of the plot\nax.add_patch(plt.Rectangle((40, 0), 10, 10, color='olive'))\n\n# Add a navy rectangle at the top center of the plot\nax.add_patch(plt.Rectangle((40, 80), 10, 10, color='navy'))\n\n# Add a maroon rectangle at the center of the plot\nax.add_patch(plt.Rectangle((40, 40), 10, 10, color='maroon'))\n\n# Add a teal rectangle at the bottom center of the plot\nax.add_patch(plt.Rectangle((40, 0), 10, 10, color='teal'))\n\n# Add a lime rectangle at the top center of the plot\nax.add_patch(plt.Rectangle((40, 80), 10, 10, color='lime'))\n\n# Add a aqua rectangle at the center of the plot\nax.add_patch(plt.Rectangle((40, 40), 10, 10, color='aqua'))\n\n# Add a fuchsia rectangle at the bottom center of the plot\nax.add_patch(plt.Rectangle((40, 0), 10, 10, color='fuchsia'))\n\n# Add a silver rectangle at the top center of the plot\nax.add_patch(plt.Rectangle((40, 80), 10, 10, color='silver'))\n\n# Add a gold rectangle at the center of the plot\nax.add_patch(plt.Rectangle((40, 40), 10, 10, color='gold'))\n\n# Add a olive rectangle at the bottom center of the plot\nax.add_patch(plt.Rectangle((40, 0), 10, 10, color='olive'))\n\n# Add a navy rectangle at the top center of the plot\nax.add_patch(plt.Rectangle((40, 80), 10, 10, color='navy'))\n\n# Add a maroon rectangle at the center of the plot\nax.add_patch(plt.Rectangle((40, 40), 10, 10, color='maroon'))\n\n# Add a teal rectangle at the bottom center of the plot\nax.add_patch(plt.Rectangle((40, 0), 10, 10, color='teal'))\n\n# Add a lime rectangle at the top center of the plot\nax.add_patch(plt.Rectangle((40, 80), 10, 10, color='lime'))\n\n# Add a aqua rectangle at the center of the plot\nax.add_patch(plt.Rectangle((40, 40), 10, 10, color='aqua'))\n\n# Add a fuchsia rectangle at the bottom center of the plot\nax.add_patch(plt.Rectangle((40, 0), 10, 10, color='fuchsia'))\n\n# Add a silver rectangle at the top center of the plot\nax.add_patch(plt.Rectangle((40, 80), 10, 10, color='silver'))\n\n# Add a gold rectangle at the center of the plot\nax.add_patch(plt.Rectangle((40, 40), 10, 10, color='gold'))\n\n# Add a olive rectangle at the bottom center of the plot\nax.add_patch(plt.Rectangle((40, 0), 10, 10, color='olive'))\n\n# Add a navy rectangle at the top center of the plot\nax.add_patch(plt.Rectangle((40, 80), 10, 10, color='navy'))\n\n# Add a maroon rectangle at the center of the plot\nax.add_patch(plt.Rectangle((40, 40), 10, 10, color='maroon'))\n\n# Add a teal rectangle at the bottom center of the plot\nax.add_patch(plt.Rectangle((40, 0), 10, 10, color='teal'))\n\n# Add a lime rectangle at the top center of the plot\nax.add_patch(plt.Rectangle((40, 80), 10, 10, color='lime'))\n\n# Add a aqua rectangle at the center of the plot\nax.add_patch(plt.Rectangle((40, 40), 10, 10, color='aqua'))\n\n# Add a fuchsia rectangle at the bottom center of the plot\nax.add_patch(plt.Rectangle((40, 0), 10, 10, color='fuchsia'))\n\n# Add a silver rectangle at the top center of the plot\nax.add_patch(plt.Rectangle((40, 80), 10, 10, color='silver'))\n\n# Add a gold rectangle at the center of the plot\nax.add_patch(plt.Rectangle((40, 40), 10, 10, color='gold'))\n\n# Add a olive rectangle at the bottom center of the plot\nax.add_patch(plt.Rectangle((40, 0), 10, 10, color='olive'))\n\n# Add a navy rectangle at the top center of the plot\nax.add_patch(plt.Rectangle((40, 80), 10, 10, color='navy'))\n\n# Add a maroon rectangle at the center of the plot\nax.add_patch(plt.Rectangle((40, 40), 10, 10, color='maroon'))\n\n# Add a teal rectangle at the bottom center of the plot\nax.add_patch(plt.Rectangle((40, 0), 10, 10, color='teal'))\n\n# Add a lime rectangle at the top center of the plot\nax.add_patch(plt.Rectangle((40, 80), 10, 10, color='lime'))\n\n# Add a aqua rectangle at the center of the plot\nax.add_patch(plt.Rectangle((40, 40), 10, 10, color='aqua'))\n\n# Add a fuchsia rectangle at the bottom center of the plot\nax.add_patch(plt.Rectangle((40, 0), 10, 10, color='fuchsia'))\n\n# Add a silver rectangle at the top center of the plot\nax.add_patch(plt.Rectangle((40, 80), 10, 10, color='silver'))\n\n# Add a gold rectangle at the center of the plot\nax.add_patch(plt.Rectangle((40, 40), 10, 10, color='gold'))\n\n# Add a olive rectangle at the bottom center of the plot\nax.add_patch(plt.Rectangle((40, 0), 10, 10, color='olive'))\n\n# Add a navy rectangle at the top center of the plot\nax.add_patch(plt.Rectangle((40, 80), 10, 10, color='navy'))\n\n# Add a maroon rectangle at the center of the plot\nax.add_patch(plt.Rectangle((40, 40), 10, 10, color='maroon'))\n\n# Add a teal rectangle at the bottom center of the plot\nax.add_patch(plt.Rectangle((40, 0), 10, 10, color='teal'))\n\n# Add a lime rectangle at the top center of the plot\nax.add_patch(plt.Rectangle((40, 80), 10, 10, color='lime'))\n\n# Add a aqua rectangle at the center of the plot\nax.add_patch(plt.Rectangle((40, 40), 10"}
{"file": "dataset/ori_500/line_40.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Deep Learning Model Performance')\n\n# Set the x-axis label\nax.set_xlabel('SNR')\n\n# Set the y-axis label\nax.set_ylabel('Classification Accuracy (%)')\n\n# Set the x-axis ticks\nax.set_xticks([5, 7.5, 10, 12.5, 15, 17.5, 20, 22.5, 25])\n\n# Set the y-axis ticks\nax.set_yticks([20, 40, 60, 80, 100])\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the text\nax.set_color_cycle(['blue', 'green', 'red'])\n\n# Plot the data\nax.plot([5, 7.5, 10, 12.5, 15, 17.5, 20, 22.5, 25], [95, 90, 85, 80, 75, 70, 65, 60, 55], label='JPG+LDPC')\nax.plot([5, 7.5, 10, 12.5, 15, 17.5, 20, 22.5, 25], [90, 85, 80, 75, 70, 65, 60, 55, 50], label='DEEPJSCC w/o OFDM')\nax.plot([5, 7.5, 10, 12.5, 15, 17.5, 20, 22.5, 25], [85, 80, 75, 70, 65, 60, 55, 50, 45], label='DEEPJSCC w/ OFDM')\nax.plot([5, 7.5, 10, 12.5, 15, 17.5, 20, 22.5, 25], [80, 75, 70, 65, 60, 55, 50, 45, 40], label='OURS')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_41.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(6.0, 8.0))\n\n# Set the title of the graph\nax.set_title('Performance Metrics')\n\n# Set the x-axis label\nax.set_xlabel('Gradient Steps (x62.5K)')\n\n# Set the y-axis label\nax.set_ylabel('Performance Value')\n\n# Plot the data\nax.plot([0, 100, 200], [1, 2, 3], 'r-')\nax.plot([0, 100, 200], [3, 2, 1], 'b-')\nax.plot([0, 100, 200], [1, 2, 3], 'g-')\nax.plot([0, 100, 200], [3, 2, 1], 'y-')\n\n# Add a legend\nax.legend(['Line 1 (Sinusoidal)', 'Line 2 (Quadratic)', 'Line 3 (Random Noise)', 'Line 4 (Exponential Focus)'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_42.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and a set of subplots\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10, 5))\n\n# Plot the data for the first subplot\nx = np.linspace(0, 200, 100)\ny = np.sin(x/10)\nax1.plot(x, y, 'o-')\nax1.set_title('Line 1')\nax1.set_xlabel('Gradient Steps (x 62.5K)')\nax1.set_ylabel('Polynomial Value')\n\n# Plot the data for the second subplot\nx = np.linspace(0, 200, 100)\ny = np.cos(x/10)\nax2.plot(x, y, 'o-')\nax2.set_title('Line 2')\nax2.set_xlabel('Gradient Steps (x 62.5K)')\nax2.set_ylabel('Polynomial Value')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_43.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(12, 5))\n\n# Set the title of the graph\nax.set_title('ogbl-collab Results')\n\n# Set the x-axis label\nax.set_xlabel('Time')\n\n# Set the y-axis label\nax.set_ylabel('Results')\n\n# Create a list of teams\nteams = ['ALL', 'MPL', 'GCN', 'NCN', 'SEAL', 'Node2Vec']\n\n# Create a list of results\nresults = [78, 76, 74, 72, 70, 68]\n\n# Create a list of colors for each team\ncolors = ['blue', 'green', 'red', 'cyan', 'magenta', 'yellow']\n\n# Plot the data\nfor i in range(len(teams)):\n    ax.plot(results, color=colors[i], marker='o')\n\n# Add a legend\nax.legend(teams)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_44.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Set the background color of the plot\nax.set_facecolor('lightgrey')\n\n# Set the grid lines\nax.grid(True)\n\n# Set the x-axis and y-axis limits\nax.set_xlim(10, 60)\nax.set_ylim(10**-14, 10**-12)\n\n# Set the x-axis and y-axis labels\nax.set_xlabel('N')\nax.set_ylabel('Precision')\n\n# Plot the data\nax.plot([10, 20, 30, 40, 50, 60], [10**-12, 10**-10, 10**-8, 10**-6, 10**-4, 10**-2], 'b-')\nax.plot([10, 20, 30, 40, 50, 60], [10**-12, 10**-10, 10**-8, 10**-6, 10**-4, 10**-2], 'g-')\nax.plot([10, 20, 30, 40, 50, 60], [10**-12, 10**-10, 10**-8, 10**-6, 10**-4, 10**-2], 'r-')\nax.plot([10, 20, 30, 40, 50, 60], [10**-12, 10**-10, 10**-8, 10**-6, 10**-4, 10**-2], 'm-')\n\n# Add a legend\nax.legend(['Standard', 'Constrained', 'Experimental', 'Hypothetical'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_45.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis for the first graph\nfig1, ax1 = plt.subplots(figsize=(12, 8))\nax1.plot([1, 2, 3, 4, 5], [1, 2, 3, 4, 5], 'b-')\nax1.set_title('Graph Variation 1')\nax1.set_xlabel('N')\nax1.set_ylabel('Peak Performance')\n\n# Create a figure and axis for the second graph\nfig2, ax2 = plt.subplots(figsize=(12, 8))\nax2.plot([1, 2, 3, 4, 5], [1, 2, 3, 4, 5], 'g-')\nax2.set_title('Graph Variation 2')\nax2.set_xlabel('N')\nax2.set_ylabel('Peak Performance')\n\n# Create a figure and axis for the third graph\nfig3, ax3 = plt.subplots(figsize=(12, 8))\nax3.plot([1, 2, 3, 4, 5], [1, 2, 3, 4, 5], 'r-')\nax3.set_title('Graph Variation 3')\nax3.set_xlabel('N')\nax3.set_ylabel('Peak Performance')\n\n# Create a figure and axis for the fourth graph\nfig4, ax4 = plt.subplots(figsize=(12, 8))\nax4.plot([1, 2, 3, 4, 5], [1, 2, 3, 4, 5], 'y-')\nax4.set_title('Graph Variation 4')\nax4.set_xlabel('N')\nax4.set_ylabel('Peak Performance')\n\n# Display the plots\nplt.show()\n```"}
{"file": "dataset/ori_500/line_46.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis for the first graph\nfig, ax = plt.subplots(figsize=(6.0, 10.0))\nax.plot([0, 5, 10, 15, 20, 25], [1.5, 1.0, 0.5, 0.0, -0.5, -1.0], 'b-')\nax.set_title('Daytime Activity Monitoring')\nax.set_xlabel('Time (Hours)')\nax.set_ylabel('Activity Level')\n\n# Create a second figure and axis for the second graph\nfig, ax = plt.subplots(figsize=(6.0, 10.0))\nax.plot([0, 5, 10, 15, 20, 25], [1.5, 1.0, 0.5, 0.0, -0.5, -1.0], 'r-')\nax.set_title('Nighttime Activity Monitoring')\nax.set_xlabel('Time (Hours)')\nax.set_ylabel('Activity Level')\nplt.show()\n```"}
{"file": "dataset/ori_500/line_47.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Comparative Performance Analysis Over Time')\n\n# Create a color bar for the legend\ncbar = fig.colorbar(ax.imshow(np.random.rand(10, 10), cmap='Blues'))\n\n# Add a legend to the plot\nax.legend(['Standard Performance', 'Innovative Performance'], loc='upper right')\n\n# Set the x-axis label\nax.set_xlabel('Time (Months)')\n\n# Set the y-axis label\nax.set_ylabel('Performance Index')\n\n# Set the x-ticks\nax.set_xticks([0, 2, 4, 6, 8, 10, 12])\n\n# Set the y-ticks\nax.set_yticks([0, 2, 4, 6, 8, 10])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_48.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Set the title of the plot\nax.set_title('Sales and Temperature Correlation Over a Year')\n\n# Set the x-axis label\nax.set_xlabel('Month')\n\n# Set the y-axis label\nax.set_ylabel('Temperature (\u00b0C)')\n\n# Set the x-ticks\nax.set_xticks([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n\n# Set the y-ticks\nax.set_yticks(range(800, 1600, 100))\n\n# Set the y-tick labels\nax.set_yticklabels(['800', '900', '1000', '1100', '1200', '1300', '1400', '1500', '1600'])\n\n# Set the x-tick labels\nax.set_xticklabels(['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'])\n\n# Draw a line graph\nax.plot([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [1000, 1100, 1200, 1300, 1400, 1500, 1600, 1500, 1400, 1300, 1200, 1100], color='blue')\n\n# Draw a scatter plot\nax.scatter([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [1000, 1100, 1200, 1300, 1400, 1500, 1600, 1500, 1400, 1300, 1200, 1100], color='red')\n\n# Draw a red line\nax.plot([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [1000, 1100, 1200, 1300, 1400, 1500, 1600, 1500, 1400, 1300, 1200, 1100], color='red')\n\n# Draw a blue rectangle\nax.add_patch(plt.Rectangle((1, 1000), 12, 100, color='blue'))\n\n# Draw a red rectangle\nax.add_patch(plt.Rectangle((1, 1000), 12, 100, color='red'))\n\n# Draw a green rectangle\nax.add_patch(plt.Rectangle((1, 1000), 12, 100, color='green'))\n\n# Draw a blue circle\nax.add_patch(plt.Circle((1, 1000), 10, color='blue'))\n\n# Draw a red circle\nax.add_patch(plt.Circle((1, 1000), 10, color='red'))\n\n# Draw a green circle\nax.add_patch(plt.Circle((1, 1000), 10, color='green'))\n\n# Draw a blue triangle\nax.add_patch(plt.Polygon([[1, 1000], [2, 1000], [1.5, 1050]], color='blue'))\n\n# Draw a red triangle\nax.add_patch(plt.Polygon([[1, 1000], [2, 1000], [1.5, 1050]], color='red'))\n\n# Draw a green triangle\nax.add_patch(plt.Polygon([[1, 1000], [2, 1000], [1.5, 1050]], color='green'))\n\n# Draw a blue star\nax.add_patch(plt.Polygon([[1, 1000], [2, 1000], [1.5, 1050]], color='blue'))\n\n# Draw a red star\nax.add_patch(plt.Polygon([[1, 1000], [2, 1000], [1.5, 1050]], color='red'))\n\n# Draw a green star\nax.add_patch(plt.Polygon([[1, 1000], [2, 1000], [1.5, 1050]], color='green'))\n\n# Draw a blue square\nax.add_patch(plt.Rectangle((1, 1000), 10, 10, color='blue'))\n\n# Draw a red square\nax.add_patch(plt.Rectangle((1, 1000), 10, 10, color='red'))\n\n# Draw a green square\nax.add_patch(plt.Rectangle((1, 1000), 10, 10, color='green'))\n\n# Draw a blue ellipse\nax.add_patch(plt.Ellipse((1, 1000), 10, 5, color='blue'))\n\n# Draw a red ellipse\nax.add_patch(plt.Ellipse((1, 1000), 10, 5, color='red'))\n\n# Draw a green ellipse\nax.add_patch(plt.Ellipse((1, 1000), 10, 5, color='green'))\n\n# Draw a blue diamond\nax.add_patch(plt.Polygon([[1, 1000], [2, 1000], [1.5, 1050]], color='blue'))\n\n# Draw a red diamond\nax.add_patch(plt.Polygon([[1, 1000], [2, 1000], [1.5, 1050]], color='red'))\n\n# Draw a green diamond\nax.add_patch(plt.Polygon([[1, 1000], [2, 1000], [1.5, 1050]], color='green'))\n\n# Draw a blue heart\nax.add_patch(plt.Polygon([[1, 1000], [2, 1000], [1.5, 1050]], color='blue'))\n\n# Draw a red heart\nax.add_patch(plt.Polygon([[1, 1000], [2, 1000], [1.5, 1050]], color='red'))\n\n# Draw a green heart\nax.add_patch(plt.Polygon([[1, 1000], [2, 1000], [1.5, 1050]], color='green'))\n\n# Draw a blue plus sign\nax.add_patch(plt.Polygon([[1, 1000], [2, 1000], [1.5, 1050]], color='blue'))\n\n# Draw a red plus sign\nax.add_patch(plt.Polygon([[1, 1000], [2, 1000], [1.5, 1050]], color='red'))\n\n# Draw a green plus sign\nax.add_patch(plt.Polygon([[1, 1000], [2, 1000], [1.5, 1050]], color='green'))\n\n# Draw a blue minus sign\nax.add_patch(plt.Polygon([[1, 1000], [2, 1000], [1.5, 1050]], color='blue'))\n\n# Draw a red minus sign\nax.add_patch(plt.Polygon([[1, 1000], [2, 1000], [1.5, 1050]], color='red'))\n\n# Draw a green minus sign\nax.add_patch(plt.Polygon([[1, 1000], [2, 1000], [1.5, 1050]], color='green'))\n\n# Draw a blue asterisk\nax.add_patch(plt.Polygon([[1, 1000], [2, 1000], [1.5, 1050]], color='blue'))\n\n# Draw a red asterisk\nax.add_patch(plt.Polygon([[1, 1000], [2, 1000], [1.5, 1050]], color='red'))\n\n# Draw a green asterisk\nax.add_patch(plt.Polygon([[1, 1000], [2, 1000], [1.5, 1050]], color='green'))\n\n# Draw a blue exclamation mark\nax.add_patch(plt.Polygon([[1, 1000], [2, 1000], [1.5, 1050]], color='blue'))\n\n# Draw a red exclamation mark\nax.add_patch(plt.Polygon([[1, 1000], [2, 1000], [1.5, 1050]], color='red'))\n\n# Draw a green exclamation mark\nax.add_patch(plt.Polygon([[1, 1000], [2, 1000], [1.5, 1050]], color='green'))\n\n# Draw a blue question mark\nax.add_patch(plt.Polygon([[1, 1000], [2, 1000], [1.5, 1050]], color='blue'))\n\n# Draw a red question mark\nax.add_patch(plt.Polygon([[1, 1000], [2, 1000], [1.5, 1050]], color='red'))\n\n# Draw a green question mark\nax.add_patch(plt.Polygon([[1, 1000], [2, 1000], [1.5, 1050]], color='green'))\n\n# Draw a blue smiley face\nax.add_patch(plt.Polygon([[1, 1000], [2, 1000], [1.5, 1050]], color='blue'))\n\n# Draw a red smiley face\nax.add_patch(plt.Polygon([[1, 1000], [2, 1000], [1.5, 1050]], color='red'))\n\n# Draw a green smiley face\nax.add_patch(plt.Polygon([[1, 1000], [2, 1000], [1.5, 1050]], color='green'))\n\n# Draw a blue frowny face\nax.add_patch(plt.Polygon([[1, 1000], [2, 1000], [1.5, 1050]], color='blue'))\n\n# Draw a red frowny face\nax.add_patch(plt.Polygon([[1, 1000], [2, 1000], [1.5, 1050]], color='red'))\n\n# Draw a green frowny face\nax.add_patch(plt.Polygon([[1, 1000], [2, 1000], [1.5, 1050]], color='green'))\n\n# Draw a blue heart\nax.add_patch(plt.Polygon([[1, 1000], [2, 1000], [1.5, 1050]], color='blue'))\n\n# Draw a red heart\nax.add_patch(plt.Polygon([[1, 1000], [2, 1000], [1.5, 1050]], color='red'))\n\n# Draw a green heart\nax.add_patch(plt.Polygon([[1, 1000], [2, 1000], [1.5, 1050]], color='green'))\n\n# Draw a blue star\nax.add_patch(plt.Polygon([[1, 1000], [2, 1000], [1.5, 1050]], color='blue'))\n\n# Draw a red star\nax.add_patch(plt.Polygon([[1, 1000], [2, 1000], [1.5, 1050]], color='red'))\n\n# Draw a green star\nax.add_patch(plt.Polygon([[1, 1000], [2, 1000], [1.5, 1050]], color='green'))\n\n# Draw a blue plus sign\nax.add_patch(plt.Polygon([[1, 1000], [2, 1000], [1.5, 1050]], color='blue'))\n\n# Draw a red plus sign\nax.add_patch(plt.Polygon([[1, 1000], [2, 1000], [1.5, 1050]], color='red'))\n\n# Draw a green plus sign\nax.add_patch(plt.Polygon([[1, 1000], [2, 1000], [1.5, 1050]], color='green'))\n\n# Draw a blue minus sign\nax.add_patch(plt.Polygon([[1, 1000], [2, 1000], [1.5, 1050]], color='blue'))\n\n# Draw a red minus sign\nax.add_patch(plt.Polygon([[1, 1000], [2, 1000], [1.5, 1050]], color='red'))\n\n# Draw a green minus sign\nax.add_patch(plt.Polygon([[1, 1000], [2, 1000], [1.5, 1050]], color='green'))\n\n# Draw a blue asterisk\nax.add_patch(plt.Polygon([[1, 1000], [2, 1000], [1.5, 1050]], color='blue'))\n\n# Draw a red asterisk\nax.add_patch(plt.Polygon([[1, 1000], [2, 1000], [1.5, 1050]], color='red'))\n\n# Draw a green asterisk\nax.add_patch(plt.Polygon([[1, 1000], [2, 1000], [1.5, 1050]], color='green'))\n\n# Draw a blue exclamation mark\nax.add_patch(plt.Polygon([[1, 1000], [2, 1000], [1.5, 1050]], color='blue'))\n\n# Draw a red exclamation mark\nax.add_patch(plt.Polygon([[1, 1000], [2, 1000], [1.5, 1050]], color='red'))\n\n# Draw a green exclamation mark\nax.add_patch(plt.Polygon([[1, 1000], [2, 1000], [1.5, 1050]], color='green'))\n\n# Draw a blue question mark\nax.add_patch(plt.Polygon([[1, 1000], [2, 1000], [1.5, 1050]], color='blue'))\n\n# Draw a red question mark\nax.add_patch(plt.Polygon([[1, 1000], [2, 1000], [1.5, 1050]], color='red'))\n\n# Draw a green question mark\nax.add_patch(plt.Polygon([[1, 1000], [2, 1000], [1.5, 1050]], color='green'))\n\n# Draw a blue smiley face\nax.add_patch(plt.Polygon([[1, 1000], [2, 1000], [1.5, 1050]], color='blue'))\n\n# Draw a red smiley face\nax.add_patch(plt.Polygon([[1, 1000], [2, 1000], [1.5, 1050]], color='red'))\n\n# Draw a green smiley face\nax.add_patch(plt.Polygon([[1, 1000], [2, 1000], [1.5, 1050]], color='green'))\n\n# Draw a blue frowny face\nax.add_patch(plt.Polygon([[1, 1000], [2, 1000], [1.5, 1050]], color='blue'))\n\n# Draw a red frowny face\nax.add_patch(plt.Polygon([[1, 1000], [2, 1000], [1.5, 1050]], color='red'))\n\n# Draw a green frowny face\nax.add_patch(plt.Polygon([[1, 1000], [2, 1000], [1.5, 1050]], color='green'))\n\n# Draw a blue heart\nax.add_patch(plt.Polygon([[1, 1000], [2, 1000], [1.5, 1050]], color='blue'))\n\n# Draw a red heart\nax.add_patch(plt.Polygon([[1, 1000], [2, 1000], [1.5, 1050]], color='red'))\n\n# Draw a green heart\nax.add_patch(plt.Polygon([[1, 1000], [2, 1000], [1.5, 1050]], color='green'))\n\n# Draw a blue star\nax.add_patch(plt.Polygon([[1, 1000], [2, 1000], [1.5, 1050]], color='blue'))\n\n# Draw a red star\nax.add_patch(plt.Polygon([[1, 1000], [2, 1000], [1.5, 1050]], color='red'))\n\n# Draw a green star\nax.add"}
{"file": "dataset/ori_500/line_49.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(6.0, 9.0))\n\n# Set the title of the plot\nax.set_title('Exponential Growth Over Time')\n\n# Set the x-axis label\nax.set_xlabel('Time')\n\n# Set the y-axis label\nax.set_ylabel('Value')\n\n# Create a scatter plot with green circles\nax.scatter([0, 2, 4, 6, 8, 10], [1.3, 1.2, 1.1, 1.0, 0.9, 0.8], color='green')\n\n# Create a line plot with red lines\nax.plot([0, 2, 4, 6, 8, 10], [1.3, 1.2, 1.1, 1.0, 0.9, 0.8], color='red')\n\n# Add a legend to the plot\nax.legend(['Growth'])\n\n# Display the plot\nplt.show()\n\n# Create a second subplot for decay\nfig, ax = plt.subplots(figsize=(6.0, 9.0))\n\n# Set the title of the plot\nax.set_title('Exponential Decay Over Time')\n\n# Set the x-axis label\nax.set_xlabel('Time')\n\n# Set the y-axis label\nax.set_ylabel('Value')\n\n# Create a scatter plot with red circles\nax.scatter([0, 2, 4, 6, 8, 10], [1.3, 1.2, 1.1, 1.0, 0.9, 0.8], color='red')\n\n# Create a line plot with green lines\nax.plot([0, 2, 4, 6, 8, 10], [1.3, 1.2, 1.1, 1.0, 0.9, 0.8], color='green')\n\n# Add a legend to the plot\nax.legend(['Decay'])\n\n# Display the plot\nplt.show()\n\n# Create a third subplot for oscillation\nfig, ax = plt.subplots(figsize=(6.0, 9.0))\n\n# Set the title of the plot\nax.set_title('Oscillatory Behavior Over Time')\n\n# Set the x-axis label\nax.set_xlabel('Time')\n\n# Set the y-axis label\nax.set_ylabel('Value')\n\n# Create a scatter plot with blue circles\nax.scatter([0, 2, 4, 6, 8, 10], [1.3, 1.2, 1.1, 1.0, 0.9, 0.8], color='blue')\n\n# Create a line plot with red lines\nax.plot([0, 2, 4, 6, 8, 10], [1.3, 1.2, 1.1, 1.0, 0.9, 0.8], color='red')\n\n# Add a legend to the plot\nax.legend(['Oscillation'])\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Define the data for the plots\nx = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ny1 = [0.5, 0.6, 0.7, 0.8, 0.9, 0.8, 0.7, 0.6, 0.5, 0.4]\ny2 = [0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 0.8, 0.7, 0.6]\ny3 = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 0.8]\n\n# Plot the data\nax.plot(x, y1, 'b--', label='5-shot direct')\nax.plot(x, y2, 'o-', label='5-shot scratchpad')\nax.plot(x, y3, 'r-.', label='5-shot rule-following')\n\n# Add labels and title\nax.set_xlabel('Digit Length')\nax.set_ylabel('Accuracy')\nax.set_title('Comparison of 5-shot methods')\n\n# Add legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_50.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(5.0, 10.0))\n\n# Set the title of the graph\nax.set_title('Smoothed Representation')\n\n# Create a scatter plot with the data\nax.scatter([2, 4, 6, 8, 10, 12, 14, 16, 18], [0.3, 0.2, 0.1, 0.2, 0.3, 0.2, 0.1, 0.2, 0.3], color='purple', label='Smoothed Data')\n\n# Add a legend to the graph\nax.legend()\n\n# Set the x-axis and y-axis limits\nax.set_xlim(0, 20)\nax.set_ylim(-1, 1)\n\n# Create a second subplot for the first difference\nax2 = fig.add_subplot(212)\nax2.set_title('First Difference of Data')\nax2.plot([2.5, 5.0, 7.5, 10.0, 12.5, 15.0, 17.5, 20.0], [100, 90, 80, 70, 60, 50, 40, 30], color='orange', marker='x', linestyle='--', label='Difference Data')\nax2.legend()\nax2.set_xlim(0, 20)\nax2.set_ylim(0, 120)\n\n# Create a third subplot for the cumulative sum\nax3 = fig.add_subplot(212)\nax3.set_title('Cumulative Sum Over Time')\nax3.plot([0.0, 2.5, 5.0, 7.5, 10.0, 12.5, 15.0, 17.5, 20.0], [0.5, 1.0, 1.5, 2.0, 2.5, 3.0, 3.5, 4.0, 4.5], color='green', marker='s', linestyle='-', label='Cumulative Sum')\nax3.legend()\nax3.set_xlim(0, 20)\nax3.set_ylim(0, 5)\n\n# Display the graph\nplt.show()\n```"}
{"file": "dataset/ori_500/line_51.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(6.0, 12.0))\n\n# Set the title of the plot\nax.set_title('Sinusoidal Pattern')\n\n# Create a sine wave with amplitude 1.5\nx = np.linspace(0, 10, 100)\ny = 1.5 * np.sin(x)\nax.plot(x, y, 'm-')\n\n# Set the x-axis label\nax.set_xlabel('Time')\n\n# Set the y-axis label\nax.set_ylabel('Amplitude')\n\n# Set the y-axis limits\nax.set_ylim(-1.5, 1.5)\n\n# Set the x-axis limits\nax.set_xlim(0, 10)\n\n# Create a second subplot for the Cosine Pattern\nfig, ax = plt.subplots(figsize=(6.0, 12.0))\nax.set_title('Cosine Pattern')\nx = np.linspace(0, 10, 100)\ny = 1.5 * np.cos(x)\nax.plot(x, y, 'g-')\nax.set_xlabel('Time')\nax.set_ylabel('Amplitude')\nax.set_ylim(-1.5, 1.5)\nax.set_xlim(0, 10)\n\n# Create a third subplot for the Exponential Decay\nfig, ax = plt.subplots(figsize=(6.0, 12.0))\nax.set_title('Exponential Decay')\nx = np.linspace(0, 10, 100)\ny = 1.5 * np.exp(-0.1 * x)\nax.plot(x, y, 'b-')\nax.set_xlabel('Time')\nax.set_ylabel('Value')\nax.set_ylim(-0.2, 1.5)\nax.set_xlim(0, 10)\n\n# Create a fourth subplot for the Logarithmic Growth\nfig, ax = plt.subplots(figsize=(6.0, 12.0))\nax.set_title('Logarithmic Growth')\nx = np.linspace(0, 10, 100)\ny = 1.5 * np.log(x + 1)\nax.plot(x, y, 'r-')\nax.set_xlabel('Time')\nax.set_ylabel('Value')\nax.set_ylim(-0.5, 2.5)\nax.set_xlim(0, 10)\n```"}
{"file": "dataset/ori_500/line_52.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(9.0, 6.0))\n\n# Plot the data\nax.plot([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0], [75, 76, 77, 78, 79, 80, 81, 82, 83, 84], 'b-')\nax.plot([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0], [75, 76, 77, 78, 79, 80, 81, 82, 83, 84], 'ro')\n\n# Set the title and labels\nax.set_title('Positive bound')\nax.set_xlabel('Time (s)')\nax.set_ylabel('Weight (kg)')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_53.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(12, 8))\n\n# Set the title of the plot\nax.set_title('Positive Bound')\n\n# Plot the data\nax.plot([0.1, 0.2, 0.3, 0.4], [79, 76, 75, 75], 'ro-')\n\n# Set the x-axis label\nax.set_xlabel('Time (s)')\n\n# Set the y-axis label\nax.set_ylabel('Temperature (\u00b0C)')\n\n# Add a legend\nax.legend(['Positive Bound'])\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_54.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and a set of subplots\nfig, axs = plt.subplots(1, 3, figsize=(12, 4))\n\n# Define the data for each subplot\ndata = [\n    [1.2, 1.1, 1.0, 0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3],\n    [1.3, 1.2, 1.1, 1.0, 0.9, 0.8, 0.7, 0.6, 0.5, 0.4],\n    [1.4, 1.3, 1.2, 1.1, 1.0, 0.9, 0.8, 0.7, 0.6, 0.5]\n]\n\n# Plot the data\nfor i, ax in enumerate(axs):\n    ax.plot(data[i], 'r-')\n    ax.set_title('Driving Style')\n    ax.set_xlabel('Time')\n    ax.set_ylabel('Relaxation Level')\n\n# Add a legend\nfig.legend(['Passive', 'Rain', 'Snow'], loc='upper right')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_55.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 3.0))\n\n# Set the title of the plot\nax.set_title('Dynamic Performance Gain Across Different n_aug Levels')\n\n# Set the x-axis label\nax.set_xlabel('n_aug')\n\n# Set the y-axis label\nax.set_ylabel('Performance Gain (%)')\n\n# Create a list of n_aug values\nn_aug_values = [0, 1, 2, 3, 4, 5, 6, 7, 8]\n\n# Create a list of performance gain values\nperformance_gain_values = [2, 4, 6, 8, 7, 5, 3, 1, 0]\n\n# Plot the data\nax.plot(n_aug_values, performance_gain_values, 'b-')\n\n# Add markers at each data point\nfor i, v in enumerate(performance_gain_values):\n    ax.text(i, v, str(v), color='blue', fontweight='bold')\n\n# Create a list of content values\ncontent_values = [2, 4, 6, 8, 7, 5, 3, 1, 0]\n\n# Plot the data\nax.plot(n_aug_values, content_values, 'r-')\n\n# Add markers at each data point\nfor i, v in enumerate(content_values):\n    ax.text(i, v, str(v), color='red', fontweight='bold')\n\n# Create a list of organization values\norganization_values = [2, 4, 6, 8, 7, 5, 3, 1, 0]\n\n# Plot the data\nax.plot(n_aug_values, organization_values, 'g-')\n\n# Add markers at each data point\nfor i, v in enumerate(organization_values):\n    ax.text(i, v, str(v), color='green', fontweight='bold')\n\n# Create a list of language values\nlanguage_values = [2, 4, 6, 8, 7, 5, 3, 1, 0]\n\n# Plot the data\nax.plot(n_aug_values, language_values, 'y-')\n\n# Add markers at each data point\nfor i, v in enumerate(language_values):\n    ax.text(i, v, str(v), color='yellow', fontweight='bold')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_56.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and a set of subplots\nfig, axs = plt.subplots(1, 3, figsize=(9.0, 3.0))\n\n# Plot the first subplot\naxs[0].plot([0, 20, 40, 60, 80], [0.75, 0.70, 0.65, 0.60, 0.55], 'r-o')\naxs[0].set_title('COCO 10K')\naxs[0].set_xlabel('Decomposition IO Norm')\naxs[0].set_ylabel('Accuracy')\naxs[0].text(0, 0.75, 'COCO (10k)', color='red')\n\n# Plot the second subplot\naxs[1].plot([0, 20, 40, 60, 80], [0.75, 0.70, 0.65, 0.60, 0.55], 'b-o')\naxs[1].set_title('LAION 10K')\naxs[1].set_xlabel('Decomposition IO Norm')\naxs[1].set_ylabel('Accuracy')\naxs[1].text(0, 0.75, 'LAION (10k)', color='blue')\n\n# Plot the third subplot\naxs[2].plot([0, 20, 40, 60, 80], [0.75, 0.70, 0.65, 0.60, 0.55], 'g-o')\naxs[2].set_title('COCO & LAION 5K')\naxs[2].set_xlabel('Decomposition IO Norm')\naxs[2].set_ylabel('Accuracy')\naxs[2].text(0, 0.75, 'COCO (5k)', color='green')\naxs[2].text(0, 0.70, 'LAION (5k)', color='orange')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_57.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis for the first subplot\nfig1, ax1 = plt.subplots(figsize=(12, 9))\nax1.plot([0.025, 0.05, 0.075, 0.1, 0.125, 0.15, 0.175, 0.2], [0.18, 0.16, 0.14, 0.12, 0.1, 0.08, 0.06, 0.04], 'b-')\nax1.plot([0.025, 0.05, 0.075, 0.1, 0.125, 0.15, 0.175, 0.2], [0.18, 0.16, 0.14, 0.12, 0.1, 0.08, 0.06, 0.04], 'ro')\nax1.set_title('Error Rate vs. Learning Rate')\nax1.set_xlabel('Parameter Rate')\nax1.set_ylabel('Error Rate')\n\n# Create a figure and axis for the second subplot\nfig2, ax2 = plt.subplots(figsize=(12, 9))\nax2.plot([0.025, 0.05, 0.075, 0.1, 0.125, 0.15, 0.175, 0.2], [0.18, 0.16, 0.14, 0.12, 0.1, 0.08, 0.06, 0.04], 'r-')\nax2.plot([0.025, 0.05, 0.075, 0.1, 0.125, 0.15, 0.175, 0.2], [0.18, 0.16, 0.14, 0.12, 0.1, 0.08, 0.06, 0.04], 'bo')\nax2.set_title('Accuracy vs. Dropout')\nax2.set_xlabel('Parameter Rate')\nax2.set_ylabel('Accuracy')\n\n# Create a figure and axis for the third subplot\nfig3, ax3 = plt.subplots(figsize=(12, 9))\nax3.plot([0.025, 0.05, 0.075, 0.1, 0.125, 0.15, 0.175, 0.2], [0.18, 0.16, 0.14, 0.12, 0.1, 0.08, 0.06, 0.04], 'g-')\nax3.plot([0.025, 0.05, 0.075, 0.1, 0.125, 0.15, 0.175, 0.2], [0.18, 0.16, 0.14, 0.12, 0.1, 0.08, 0.06, 0.04], 'go')\nax3.set_title('Error Rate vs. Learning Rate')\nax3.set_xlabel('Parameter Rate')\nax3.set_ylabel('Error Rate')\n\n# Create a figure and axis for the fourth subplot\nfig4, ax4 = plt.subplots(figsize=(12, 9))\nax4.plot([0.025, 0.05, 0.075, 0.1, 0.125, 0.15, 0.175, 0.2], [0.18, 0.16, 0.14, 0.12, 0.1, 0.08, 0.06, 0.04], 'y-')\nax4.plot([0.025, 0.05, 0.075, 0.1, 0.125, 0.15, 0.175, 0.2], [0.18, 0.16, 0.14, 0.12, 0.1, 0.08, 0.06, 0.04], 'yo')\nax4.set_title('Accuracy vs. Dropout')\nax4.set_xlabel('Parameter Rate')\nax4.set_ylabel('Accuracy')\n\n# Create a figure and axis for the fifth subplot\nfig5, ax5 = plt.subplots(figsize=(12, 9))\nax5.plot([0.025, 0.05, 0.075, 0.1, 0.125, 0.15, 0.175, 0.2], [0.18, 0.16, 0.14, 0.12, 0.1, 0.08, 0.06, 0.04], 'm-')\nax5.plot([0.025, 0.05, 0.075, 0.1, 0.125, 0.15, 0.175, 0.2], [0.18, 0.16, 0.14, 0.12, 0.1, 0.08, 0.06, 0.04], 'mo')\nax5.set_title('Error Rate vs. Learning Rate')\nax5.set_xlabel('Parameter Rate')\nax5.set_ylabel('Error Rate')\n\n# Create a figure and axis for the sixth subplot\nfig6, ax6 = plt.subplots(figsize=(12, 9))\nax6.plot([0.025, 0.05, 0.075, 0.1, 0.125, 0.15, 0.175, 0.2], [0.18, 0.16, 0.14, 0.12, 0.1, 0.08, 0.06, 0.04], 'c-')\nax6.plot([0.025, 0.05, 0.075, 0.1, 0.125, 0.15, 0.175, 0.2], [0.18, 0.16, 0.14, 0.12, 0.1, 0.08, 0.06, 0.04], 'co')\nax6.set_title('Accuracy vs. Dropout')\nax6.set_xlabel('Parameter Rate')\nax6.set_ylabel('Accuracy')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/line_58.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 4))\n\n# Plot the data\nax.plot([0, 25, 50, 75, 100, 125, 150, 175, 200], [0.6, 0.5, 0.4, 0.3, 0.2, 0.1, 0.05, 0.02, 0.01], 'b-')\nax.plot([0, 25, 50, 75, 100, 125, 150, 175, 200], [0.65, 0.55, 0.45, 0.35, 0.25, 0.15, 0.08, 0.03, 0.015], 'r-')\n\n# Set the title and labels\nax.set_title('Metric 1')\nax.set_xlabel('Training Iterations')\nax.set_ylabel('Metric Value')\n\n# Add a legend\nax.legend(['Base Model', 'Our Model'])\n\n# Show the plot\nplt.show()\n\n# Create a second figure and axis\nfig, ax = plt.subplots(figsize=(10, 4))\n\n# Plot the data\nax.plot([0, 25, 50, 75, 100, 125, 150, 175, 200], [0.6, 0.5, 0.4, 0.3, 0.2, 0.1, 0.05, 0.02, 0.01], 'b-')\nax.plot([0, 25, 50, 75, 100, 125, 150, 175, 200], [0.65, 0.55, 0.45, 0.35, 0.25, 0.15, 0.08, 0.03, 0.015], 'r-')\n\n# Set the title and labels\nax.set_title('Metric 2')\nax.set_xlabel('Training Iterations')\nax.set_ylabel('Metric Value')\n\n# Add a legend\nax.legend(['Base Model', 'Our Model'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_59.pdf", "response": "import matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(5.0, 3.0))\n\n# Set the title of the plot\nax.set_title('Accuracy')\n\n# Set the x-axis label\nax.set_xlabel('Training Iterations')\n\n# Set the y-axis label\nax.set_ylabel('Metric Value')\n\n# Plot the data\nax.plot([0, 100, 200], [0.8, 0.6, 0.4], 'o-', color='blue', label='Base Model')\nax.plot([0, 100, 200], [0.7, 0.5, 0.3], 'o-', color='cyan', label='Our Model')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/line_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(9.0, 6.0))\n\n# Set the x-axis limits\nax.set_xlim(10**1, 10**10)\n\n# Set the y-axis limits\nax.set_ylim(10**-10, 10**1)\n\n# Set the x-axis ticks\nax.set_xticks([10**1, 2*10**1, 3*10**1, 4*10**1, 5*10**1, 6*10**1])\n\n# Set the y-axis ticks\nax.set_yticks([10**-10, 10**-7, 10**-4, 10**-1])\n\n# Set the x-axis tick labels\nax.set_xticklabels(['10^1', '2*10^1', '3*10^1', '4*10^1', '5*10^1', '6*10^1'])\n\n# Set the y-axis tick labels\nax.set_yticklabels(['10^-10', '10^-7', '10^-4', '10^-1'])\n\n# Set the title of the plot\nax.set_title('Logarithmic Scale Plot')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the plot area\nax.set_facecolor('white')\n\n# Set the color of the border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the legend\nax.legend(facecolor='white', edgecolor='black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('black')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the plot area\nax.set_facecolor('white')\n\n# Set the color of the border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the legend\nax.legend(facecolor='white', edgecolor='black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('black')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the plot area\nax.set_facecolor('white')\n\n# Set the color of the border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the legend\nax.legend(facecolor='white', edgecolor='black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('black')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the plot area\nax.set_facecolor('white')\n\n# Set the color of the border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the legend\nax.legend(facecolor='white', edgecolor='black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('black')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the plot area\nax.set_facecolor('white')\n\n# Set the color of the border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the legend\nax.legend(facecolor='white', edgecolor='black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('black')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the plot area\nax.set_facecolor('white')\n\n# Set the color of the border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the legend\nax.legend(facecolor='white', edgecolor='black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('black')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the plot area\nax.set_facecolor('white')\n\n# Set the color of the border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the legend\nax.legend(facecolor='white', edgecolor='black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('black')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the plot area\nax.set_facecolor('white')\n\n# Set the color of the border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the legend\nax.legend(facecolor='white', edgecolor='black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('black')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the plot area\nax.set_facecolor('white')\n\n# Set the color of the border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the legend\nax.legend(facecolor='white', edgecolor='black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('black')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the plot area\nax.set_facecolor('white')\n\n# Set the color of the border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the legend\nax.legend(facecolor='white', edgecolor='black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('black')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the plot area\nax.set_facecolor('white')\n\n# Set the color of the border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the legend\nax.legend(facecolor='white', edgecolor='black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('black')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the plot area\nax.set_facecolor('white')\n\n# Set the color of the border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the legend\nax.legend(facecolor='white', edgecolor='black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('black')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the plot area\nax.set_facecolor('white')\n\n# Set the color of the border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the legend\nax.legend(facecolor='white', edgecolor='black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('black')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the plot area\nax.set_facecolor('white')\n\n# Set the color of the border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the legend\nax.legend(facecolor='white', edgecolor='black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('black')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the plot area\nax.set_facecolor('white')\n\n# Set the color of the border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the legend\nax.legend(facecolor='white', edgecolor='black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('black')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the plot area\nax.set_facecolor('white')\n\n# Set the color of the border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the legend\nax.legend(facecolor='white', edgecolor='black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('black')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the plot area\nax.set_facecolor('white')\n\n# Set the color of the border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the legend\nax.legend(facecolor='white', edgecolor='black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('black')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the plot area\nax.set_facecolor('white')\n\n# Set the color of the border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the legend\nax.legend(facecolor='white', edgecolor='black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('black')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the plot area\nax.set_facecolor('white')\n\n# Set the color of the border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the legend\nax.legend(facecolor='white', edgecolor='black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('black')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the plot area\nax.set_facecolor('white')\n\n# Set the color of the border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the legend\nax.legend(facecolor='white', edgecolor='black')\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('black')\n\n# Set the color of the y-axis label\nax.yaxis"}
{"file": "dataset/ori_500/line_60.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Performance and Efficiency Over Weeks')\n\n# Set the x-axis label\nax.set_xlabel('Weeks')\n\n# Set the y-axis label\nax.set_ylabel('Efficiency')\n\n# Set the x-axis limits\nax.set_xlim(0, 25)\n\n# Set the y-axis limits\nax.set_ylim(-1.5, 1.5)\n\n# Set the x-axis ticks\nax.set_xticks(range(0, 26, 5))\n\n# Set the y-axis ticks\nax.set_yticks(range(-1, 2, 1))\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the performance line\nax.plot([0, 5, 10, 15, 20, 25], [1.5, 1.0, 0.5, 0.0, -0.5, -1.0], 'b-')\n\n# Set the color of the efficiency line\nax.plot([0, 5, 10, 15, 20, 25], [1.5, 1.0, 0.5, 0.0, -0.5, -1.0], 'r-')\n\n# Set the color of the legend\nax.legend(['Performance', 'Efficiency'], loc='upper left')\n\n# Set the color of the labels\nax.text(0, 1.5, 'Performance', color='blue')\nax.text(0, 1.5, 'Efficiency', color='red')\n\n# Set the color of the title\nax.text(0, 1.7, 'Performance and Efficiency Over Weeks', color='black')\n\n# Set the color of the x-axis label\nax.text(0, -1.7, 'Weeks', color='black')\n\n# Set the color of the y-axis label\nax.text(-1.7, 0, 'Efficiency', color='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the performance line\nax.plot([0, 5, 10, 15, 20, 25], [1.5, 1.0, 0.5, 0.0, -0.5, -1.0], 'b-')\n\n# Set the color of the efficiency line\nax.plot([0, 5, 10, 15, 20, 25], [1.5, 1.0, 0.5, 0.0, -0.5, -1.0], 'r-')\n\n# Set the color of the legend\nax.legend(['Performance', 'Efficiency'], loc='upper left')\n\n# Set the color of the labels\nax.text(0, 1.5, 'Performance', color='blue')\nax.text(0, 1.5, 'Efficiency', color='red')\n\n# Set the color of the title\nax.text(0, 1.7, 'Performance and Efficiency Over Weeks', color='black')\n\n# Set the color of the x-axis label\nax.text(0, -1.7, 'Weeks', color='black')\n\n# Set the color of the y-axis label\nax.text(-1.7, 0, 'Efficiency', color='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the performance line\nax.plot([0, 5, 10, 15, 20, 25], [1.5, 1.0, 0.5, 0.0, -0.5, -1.0], 'b-')\n\n# Set the color of the efficiency line\nax.plot([0, 5, 10, 15, 20, 25], [1.5, 1.0, 0.5, 0.0, -0.5, -1.0], 'r-')\n\n# Set the color of the legend\nax.legend(['Performance', 'Efficiency'], loc='upper left')\n\n# Set the color of the labels\nax.text(0, 1.5, 'Performance', color='blue')\nax.text(0, 1.5, 'Efficiency', color='red')\n\n# Set the color of the title\nax.text(0, 1.7, 'Performance and Efficiency Over Weeks', color='black')\n\n# Set the color of the x-axis label\nax.text(0, -1.7, 'Weeks', color='black')\n\n# Set the color of the y-axis label\nax.text(-1.7, 0, 'Efficiency', color='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the performance line\nax.plot([0, 5, 10, 15, 20, 25], [1.5, 1.0, 0.5, 0.0, -0.5, -1.0], 'b-')\n\n# Set the color of the efficiency line\nax.plot([0, 5, 10, 15, 20, 25], [1.5, 1.0, 0.5, 0.0, -0.5, -1.0], 'r-')\n\n# Set the color of the legend\nax.legend(['Performance', 'Efficiency'], loc='upper left')\n\n# Set the color of the labels\nax.text(0, 1.5, 'Performance', color='blue')\nax.text(0, 1.5, 'Efficiency', color='red')\n\n# Set the color of the title\nax.text(0, 1.7, 'Performance and Efficiency Over Weeks', color='black')\n\n# Set the color of the x-axis label\nax.text(0, -1.7, 'Weeks', color='black')\n\n# Set the color of the y-axis label\nax.text(-1.7, 0, 'Efficiency', color='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the performance line\nax.plot([0, 5, 10, 15, 20, 25], [1.5, 1.0, 0.5, 0.0, -0.5, -1.0], 'b-')\n\n# Set the color of the efficiency line\nax.plot([0, 5, 10, 15, 20, 25], [1.5, 1.0, 0.5, 0.0, -0.5, -1.0], 'r-')\n\n# Set the color of the legend\nax.legend(['Performance', 'Efficiency'], loc='upper left')\n\n# Set the color of the labels\nax.text(0, 1.5, 'Performance', color='blue')\nax.text(0, 1.5, 'Efficiency', color='red')\n\n# Set the color of the title\nax.text(0, 1.7, 'Performance and Efficiency Over Weeks', color='black')\n\n# Set the color of the x-axis label\nax.text(0, -1.7, 'Weeks', color='black')\n\n# Set the color of the y-axis label\nax.text(-1.7, 0, 'Efficiency', color='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the performance line\nax.plot([0, 5, 10, 15, 20, 25], [1.5, 1.0, 0.5, 0.0, -0.5, -1.0], 'b-')\n\n# Set the color of the efficiency line\nax.plot([0, 5, 10, 15, 20, 25], [1.5, 1.0, 0.5, 0.0, -0.5, -1.0], 'r-')\n\n# Set the color of the legend\nax.legend(['Performance', 'Efficiency'], loc='upper left')\n\n# Set the color of the labels\nax.text(0, 1.5, 'Performance', color='blue')\nax.text(0, 1.5, 'Efficiency', color='red')\n\n# Set the color of the title\nax.text(0, 1.7, 'Performance and Efficiency Over Weeks', color='black')\n\n# Set the color of the x-axis label\nax.text(0, -1.7, 'Weeks', color='black')\n\n# Set the color of the y-axis label\nax.text(-1.7, 0, 'Efficiency', color='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the performance line\nax.plot([0, 5, 10, 15, 20, 25], [1.5, 1.0, 0.5, 0.0, -0.5, -1.0], 'b-')\n\n# Set the color of the efficiency line\nax.plot([0, 5, 10, 15, 20, 25], [1.5, 1.0, 0.5, 0.0, -0.5, -1.0], 'r-')\n\n# Set the color of the legend\nax.legend(['Performance', 'Efficiency'], loc='upper left')\n\n# Set the color of the labels\nax.text(0, 1.5, 'Performance', color='blue')\nax.text(0, 1.5, 'Efficiency', color='red')\n\n# Set the color of the title\nax.text(0, 1.7, 'Performance and Efficiency Over Weeks', color='black')\n\n# Set the color of the x-axis label\nax.text(0, -1.7, 'Weeks', color='black')\n\n# Set the color of the y-axis label\nax.text(-1.7, 0, 'Efficiency', color='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the performance line\nax.plot([0, 5, 10, 15, 20, 25], [1.5, 1.0, 0.5, 0.0, -0.5, -1.0], 'b-')\n\n# Set the color of the efficiency line\nax.plot([0, 5, 10, 15, 20, 25], [1.5, 1.0, 0.5, 0.0, -0.5, -1.0], 'r-')\n\n# Set the color of the legend\nax.legend(['Performance', 'Efficiency'], loc='upper left')\n\n# Set the color of the labels\nax.text(0, 1.5, 'Performance', color='blue')\nax.text(0, 1.5, 'Efficiency', color='red')\n\n# Set the color of the title\nax.text(0, 1.7, 'Performance and Efficiency Over Weeks', color='black')\n\n# Set the color of the x-axis label\nax.text(0, -1.7, 'Weeks', color='black')\n\n# Set the color of the y-axis label\nax.text(-1.7, 0, 'Efficiency', color='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the performance line\nax.plot([0, 5, 10, 15, 20, 25], [1.5, 1.0, 0.5, 0.0, -0.5, -1.0], 'b-')\n\n# Set the color of the efficiency line\nax.plot([0, 5, 10, 15, 20, 25], [1.5, 1.0, 0.5, 0.0, -0.5, -1.0], 'r-')\n\n# Set the color of the legend\nax.legend(['Performance', 'Efficiency'], loc='upper left')\n\n# Set the color of the labels\nax.text(0, 1.5, 'Performance', color='blue')\nax.text(0, 1.5, 'Efficiency', color='red')\n\n# Set the color of the title\nax.text(0, 1.7, 'Performance and Efficiency Over Weeks', color='black')\n\n# Set the color of the x-axis label\nax.text(0, -1.7, 'Weeks', color='black')\n\n# Set the color of the y-axis label\nax.text(-1.7, 0, 'Efficiency', color='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the performance line\nax.plot([0, 5, 10, 15, 20, 25], [1.5, 1.0, 0.5, 0.0, -0.5, -1.0], 'b-')\n\n# Set the color of the efficiency line\nax.plot([0, 5, 10, 15, 20, 25], [1.5, 1.0, 0.5, 0.0, -0.5, -1.0], 'r-')\n\n# Set the color of the legend\nax.legend(['Performance', 'Efficiency'], loc='upper left')\n\n# Set the color of the labels\nax.text(0, 1.5, 'Performance', color='blue')\nax.text(0, 1.5, 'Efficiency', color='red')\n\n# Set the color of the title\nax.text(0, 1.7, 'Performance and Efficiency Over Weeks', color='black')\n\n# Set the color of the x-axis label\nax.text(0, -1.7, 'Weeks', color='black')\n\n# Set the color of the y-axis label\nax.text(-1.7, 0, 'Efficiency', color='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the performance line\nax.plot([0, 5, 10, 15, 20, 25], [1.5, 1.0, 0.5, 0.0, -0.5, -1.0], 'b-')\n\n# Set the color of the efficiency line\nax.plot([0, 5, 10, 15, 20, 25], [1.5, 1.0, 0.5, 0.0, -0.5, -1.0], 'r-')\n\n# Set the color of the legend\nax.legend(['Performance', 'Efficiency'], loc='upper left')\n\n# Set the color of the labels\nax.text(0, 1.5, 'Performance', color='blue')\nax.text(0, 1.5, 'Efficiency', color='red')\n\n# Set the color of the title\nax.text(0, 1.7, 'Performance and Efficiency Over Weeks', color='black')\n\n# Set the color of the x-axis label\nax.text(0, -1.7, 'Weeks', color='black')\n\n# Set the color of the y-axis label\nax.text(-1.7, 0, 'Efficiency', color='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the performance line\nax.plot([0, 5, 10, 15, 20, 25], [1.5, 1.0, 0.5, 0.0, -0.5, -1.0], 'b-')\n\n# Set the color of the efficiency line\nax.plot([0, 5, 10, 15, 20, 25], [1.5, 1.0, 0.5, 0.0, -0.5, -1.0], 'r-')\n\n# Set the color of the legend\nax.legend(['Performance', 'Efficiency'], loc='upper left')\n\n# Set the color of the labels\nax.text(0, 1.5, 'Performance', color='blue')\nax.text(0, 1.5, 'Efficiency', color='red')\n\n# Set the color of the title\nax.text(0, 1.7, 'Performance and Efficiency Over Weeks', color='black')\n\n# Set the color of the x-axis label\nax.text(0, -1.7, 'Weeks', color='black')\n\n# Set the color of the y-axis label\nax.text(-1.7, 0, 'Efficiency', color='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the performance line\nax.plot([0, 5, 10, 15, 20, 25], [1.5, 1.0, 0.5, 0.0, -0.5, -1.0], 'b-')\n\n# Set the color of the efficiency line\nax.plot([0, 5, 10, 15, 20, 25], [1.5, 1.0, 0.5, 0.0, -0.5, -1.0], 'r-')\n\n# Set the color of the legend\nax.legend(['Performance', 'Efficiency'], loc='upper left')\n\n# Set the color of the labels\nax.text(0, 1.5, 'Performance', color='blue')\nax.text(0, 1.5, 'Efficiency', color='red')\n\n# Set the color of the title\nax.text(0, 1.7, 'Performance and Efficiency Over Weeks', color='black')\n\n# Set the color of the x-axis label\nax.text(0, -1.7, 'Weeks', color='black')\n\n# Set the color of the y-axis label\nax.text(-1.7, 0, 'Efficiency', color"}
{"file": "dataset/ori_500/line_61.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Set the title of the plot\nax.set_title('Performance and Efficiency Analysis')\n\n# Set the x-axis label\nax.set_xlabel('Weeks')\n\n# Set the y-axis label\nax.set_ylabel('Values')\n\n# Create a scatter plot for each data series\nax.scatter([1, 2, 3, 4, 5], [1, 2, 3, 4, 5], color='blue', label='Performance')\nax.scatter([1, 2, 3, 4, 5], [5, 4, 3, 2, 1], color='red', label='Efficiency')\n\n# Add a legend to the plot\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_62.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Set the title of the graph\nax.set_title('Detailed Performance and Efficiency Analysis Over Weeks')\n\n# Set the x-axis label\nax.set_xlabel('Weeks')\n\n# Set the y-axis label\nax.set_ylabel('Efficiency')\n\n# Set the x-axis limits\nax.set_xlim(0, 30)\n\n# Set the y-axis limits\nax.set_ylim(0, 12)\n\n# Set the x-axis ticks\nax.set_xticks(np.arange(0, 31, 5))\n\n# Set the y-axis ticks\nax.set_yticks(np.arange(0, 13, 1))\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the background\nax.set_facecolor('#ADD8E6')\n\n# Set the color of the text\nax.set_color_cycle(['blue', 'red', 'green', 'yellow'])\n\n# Set the color of the markers\nax.plot([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30], [0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2.0, 2.1, 2.2, 2.3, 2.4, 2.5, 2.6, 2.7, 2.8, 2.9, 3.0, 3.1, 3.2, 3.3, 3.4, 3.5], marker='o', linestyle='-', color='blue')\nax.plot([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30], [0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2.0, 2.1, 2.2, 2.3, 2.4, 2.5, 2.6, 2.7, 2.8, 2.9, 3.0, 3.1, 3.2, 3.3, 3.4, 3.5], marker='x', linestyle='--', color='red')\nax.plot([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30], [0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2.0, 2.1, 2.2, 2.3, 2.4, 2.5, 2.6, 2.7, 2.8, 2.9, 3.0, 3.1, 3.2, 3.3, 3.4, 3.5], marker='^', linestyle='-.', color='green')\nax.plot([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30], [0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2.0, 2.1, 2.2, 2.3, 2.4, 2.5, 2.6, 2.7, 2.8, 2.9, 3.0, 3.1, 3.2, 3.3, 3.4, 3.5], marker='s', linestyle=':', color='yellow')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_63.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(12.0, 8.0))\n\n# Set the background color of the plot\nax.set_facecolor('floralwhite')\n\n# Set the title of the plot\nax.set_title('Dynamic Data Presentation Across Weeks', fontsize=20)\n\n# Set the x-axis label\nax.set_xlabel('Weeks', fontsize=14)\n\n# Set the y-axis label\nax.set_ylabel('Normalized Value', fontsize=14)\n\n# Set the x-axis tick labels\nax.set_xticks([0, 5, 10, 15, 20, 25])\n\n# Set the y-axis tick labels\nax.set_yticks([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n\n# Set the grid lines\nax.grid(True)\n\n# Plot the data series\nax.plot([0, 5, 10, 15, 20, 25], [10, 8, 6, 4, 2, 0], 'b-', label='Data Series 1')\nax.plot([0, 5, 10, 15, 20, 25], [9, 7, 5, 3, 1, -1], 'g--', label='Data Series 2 with Gradient')\nax.plot([0, 5, 10, 15, 20, 25], [8, 6, 4, 2, 0, -2], 'r-.', label='Data Series 3')\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_64.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(12, 6))\n\n# Set the background color of the plot\nax.set_facecolor('azure')\n\n# Set the title of the plot\nax.set_title('Average Accuracy (%)')\n\n# Set the x-axis label\nax.set_xlabel('Task')\n\n# Set the y-axis label\nax.set_ylabel('Accuracy (%)')\n\n# Set the x-ticks\nax.set_xticks([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n\n# Set the y-ticks\nax.set_yticks(range(0, 101, 10))\n\n# Set the grid lines\nax.grid(True)\n\n# Set the line colors\nax.plot([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [95, 90, 85, 80, 75, 70, 65, 60, 55, 50], 'b-')\nax.plot([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [85, 80, 75, 70, 65, 60, 55, 50, 45, 40], 'g-')\nax.plot([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [75, 70, 65, 60, 55, 50, 45, 40, 35, 30], 'r-')\nax.plot([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [65, 60, 55, 50, 45, 40, 35, 30, 25, 20], 'c-')\n\n# Set the legend\nax.legend(['BaCE', 'LWF', 'EWC', 'SEQ'])\n\n# Set the markers\nax.plot([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [95, 90, 85, 80, 75, 70, 65, 60, 55, 50], 'bo')\nax.plot([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [85, 80, 75, 70, 65, 60, 55, 50, 45, 40], 'go')\nax.plot([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [75, 70, 65, 60, 55, 50, 45, 40, 35, 30], 'ro')\nax.plot([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [65, 60, 55, 50, 45, 40, 35, 30, 25, 20], 'co')\n\n# Set the marker sizes\nax.plot([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [95, 90, 85, 80, 75, 70, 65, 60, 55, 50], 'bo', markersize=10)\nax.plot([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [85, 80, 75, 70, 65, 60, 55, 50, 45, 40], 'go', markersize=10)\nax.plot([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [75, 70, 65, 60, 55, 50, 45, 40, 35, 30], 'ro', markersize=10)\nax.plot([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [65, 60, 55, 50, 45, 40, 35, 30, 25, 20], 'co', markersize=10)\n\n# Set the marker facecolors\nax.plot([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [95, 90, 85, 80, 75, 70, 65, 60, 55, 50], 'bo', markersize=10, markerfacecolor='blue')\nax.plot([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [85, 80, 75, 70, 65, 60, 55, 50, 45, 40], 'go', markersize=10, markerfacecolor='green')\nax.plot([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [75, 70, 65, 60, 55, 50, 45, 40, 35, 30], 'ro', markersize=10, markerfacecolor='red')\nax.plot([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [65, 60, 55, 50, 45, 40, 35, 30, 25, 20], 'co', markersize=10, markerfacecolor='cyan')\n\n# Set the marker edgecolors\nax.plot([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [95, 90, 85, 80, 75, 70, 65, 60, 55, 50], 'bo', markersize=10, markerfacecolor='blue', markeredgecolor='black')\nax.plot([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [85, 80, 75, 70, 65, 60, 55, 50, 45, 40], 'go', markersize=10, markerfacecolor='green', markeredgecolor='black')\nax.plot([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [75, 70, 65, 60, 55, 50, 45, 40, 35, 30], 'ro', markersize=10, markerfacecolor='red', markeredgecolor='black')\nax.plot([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [65, 60, 55, 50, 45, 40, 35, 30, 25, 20], 'co', markersize=10, markerfacecolor='cyan', markeredgecolor='black')\n\n# Set the marker linewidths\nax.plot([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [95, 90, 85, 80, 75, 70, 65, 60, 55, 50], 'bo', markersize=10, markerfacecolor='blue', markeredgecolor='black', markerlinewidth=2)\nax.plot([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [85, 80, 75, 70, 65, 60, 55, 50, 45, 40], 'go', markersize=10, markerfacecolor='green', markeredgecolor='black', markerlinewidth=2)\nax.plot([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [75, 70, 65, 60, 55, 50, 45, 40, 35, 30], 'ro', markersize=10, markerfacecolor='red', markeredgecolor='black', markerlinewidth=2)\nax.plot([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [65, 60, 55, 50, 45, 40, 35, 30, 25, 20], 'co', markersize=10, markerfacecolor='cyan', markeredgecolor='black', markerlinewidth=2)\n\n# Set the marker markersizes\nax.plot([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [95, 90, 85, 80, 75, 70, 65, 60, 55, 50], 'bo', markersize=10, markerfacecolor='blue', markeredgecolor='black', markerlinewidth=2, markersize=10)\nax.plot([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [85, 80, 75, 70, 65, 60, 55, 50, 45, 40], 'go', markersize=10, markerfacecolor='green', markeredgecolor='black', markerlinewidth=2, markersize=10)\nax.plot([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [75, 70, 65, 60, 55, 50, 45, 40, 35, 30], 'ro', markersize=10, markerfacecolor='red', markeredgecolor='black', markerlinewidth=2, markersize=10)\nax.plot([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [65, 60, 55, 50, 45, 40, 35, 30, 25, 20], 'co', markersize=10, markerfacecolor='cyan', markeredgecolor='black', markerlinewidth=2, markersize=10)\n\n# Set the marker markeredgewidths\nax.plot([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [95, 90, 85, 80, 75, 70, 65, 60, 55, 50], 'bo', markersize=10, markerfacecolor='blue', markeredgecolor='black', markerlinewidth=2, markersize=10, markeredgewidth=2)\nax.plot([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [85, 80, 75, 70, 65, 60, 55, 50, 45, 40], 'go', markersize=10, markerfacecolor='green', markeredgecolor='black', markerlinewidth=2, markersize=10, markeredgewidth=2)\nax.plot([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [75, 70, 65, 60, 55, 50, 45, 40, 35, 30], 'ro', markersize=10, markerfacecolor='red', markeredgecolor='black', markerlinewidth=2, markersize=10, markeredgewidth=2)\nax.plot([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [65, 60, 55, 50, 45, 40, 35, 30, 25, 20], 'co', markersize=10, markerfacecolor='cyan', markeredgecolor='black', markerlinewidth=2, markersize=10, markeredgewidth=2)\n\n# Set the marker markeredgelines\nax.plot([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [95, 90, 85, 80, 75, 70, 65, 60, 55, 50], 'bo', markersize=10, markerfacecolor='blue', markeredgecolor='black', markerlinewidth=2, markersize=10, markeredgewidth=2, markeredgelines='--')\nax.plot([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [85, 80, 75, 70, 65, 60, 55, 50, 45, 40], 'go', markersize=10, markerfacecolor='green', markeredgecolor='black', markerlinewidth=2, markersize=10, markeredgewidth=2, markeredgelines='--')\nax.plot([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [75, 70, 65, 60, 55, 50, 45, 40, 35, 30], 'ro', markersize=10, markerfacecolor='red', markeredgecolor='black', markerlinewidth=2, markersize=10, markeredgewidth=2, markeredgelines='--')\nax.plot([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [65, 60, 55, 50, 45, 40, 35, 30, 25, 20], 'co', markersize=10, markerfacecolor='cyan', markeredgecolor='black', markerlinewidth=2, markersize=10, markeredgewidth=2, markeredgelines='--')\n\n# Set the marker markeredgelines\nax.plot([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [95, 90, 85, 80, 75, 70, 65, 60, 55, 50], 'bo', markersize=10, markerfacecolor='blue', markeredgecolor='black', markerlinewidth=2, markersize=10, markeredgewidth=2, markeredgelines='--', markeredgelines='--')\nax.plot([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [85, 80, 75, 70, 65, 60, 55, 50, 45, 40], 'go', markersize=10, markerfacecolor='green', markeredgecolor='black', markerlinewidth=2, markersize=10, markeredgewidth=2, markeredgelines='--', markeredgelines='--')\nax.plot([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [75, 70, 65, 60, 55, 50, 45, 40, 35, 30], 'ro', markersize=10, markerfacecolor='red', markeredgecolor='black', markerlinewidth=2, markersize=10, markeredgewidth=2, markeredgelines='--', markeredgelines='--')\nax.plot([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [65, 60, 55, 50, "}
{"file": "dataset/ori_500/line_65.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\nx = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ny1 = [80, 85, 90, 95, 90, 85, 80, 75, 70, 65]\ny2 = [60, 65, 70, 75, 80, 85, 90, 95, 90, 85]\ny3 = [40, 45, 50, 55, 60, 65, 70, 75, 80, 85]\ny4 = [20, 25, 30, 35, 40, 45, 50, 55, 60, 65]\n\n# Create a figure and a set of subplots\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(8.0, 3.0))\n\n# Plot the data on the first subplot\nax1.plot(x, y1, 'b-', label='BaCE')\nax1.plot(x, y2, 'g-', label='EWC')\nax1.set_xlabel('Task')\nax1.set_ylabel('Performance (%)')\nax1.legend()\nax1.grid(True)\n\n# Plot the data on the second subplot\nax2.plot(x, y3, 'r-', label='LWF')\nax2.plot(x, y4, 'm-', label='SEQ')\nax2.set_xlabel('Task')\nax2.set_ylabel('Performance (%)')\nax2.legend()\nax2.grid(True)\n\n# Add colored rectangles to represent the performance of each model\nfor i in range(len(x)):\n    ax1.add_patch(plt.Rectangle((x[i], 0), 1, 100, color='blue', alpha=0.2))\n    ax2.add_patch(plt.Rectangle((x[i], 0), 1, 100, color='red', alpha=0.2))\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_66.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(9.0, 7.0))\n\n# Set the title of the plot\nax.set_title('model1 Performance')\n\n# Set the x-axis label\nax.set_xlabel('Iterations')\n\n# Set the y-axis label\nax.set_ylabel('Success Rate')\n\n# Create a scatter plot with a color map\nscatter = ax.scatter([0, 250, 500, 1000, 1500, 2000], [0.8, 0.6, 0.4, 0.2, 0.1, 0.0], c='blue', cmap='coolwarm')\n\n# Add a color bar which maps values to colors\ncbar = fig.colorbar(scatter)\n\n# Set the limits of the x-axis\nax.set_xlim(0, 2000)\n\n# Set the limits of the y-axis\nax.set_ylim(0, 1)\n\n# Set the ticks of the x-axis\nax.set_xticks([0, 250, 500, 1000, 1500, 2000])\n\n# Set the ticks of the y-axis\nax.set_yticks([0, 0.2, 0.4, 0.6, 0.8, 1])\n\n# Set the grid lines\nax.grid(True)\n\n# Save the figure\nplt.savefig('model1_performance.png')\n```"}
{"file": "dataset/ori_500/line_67.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nx = [2, 3, 4, 5, 6, 7, 8]\ny1 = [2.5, 3.5, 4.5, 5.5, 6.5, 7.5, 8.5]\ny2 = [2.2, 3.2, 4.2, 5.2, 6.2, 7.2, 8.2]\ny3 = [2.8, 3.8, 4.8, 5.8, 6.8, 7.8, 8.8]\n\n# Plot\nfig, ax = plt.subplots(figsize=(6.0, 5.0))\nax.plot(x, y1, 'b-', label='IHM')\nax.plot(x, y2, 'r-', label='SDM')\nax.plot(x, y3, 'g-', label='AMII')\n\n# Markers\nfor i in range(len(x)):\n    ax.plot(x[i], y1[i], 'bo', markersize=10)\n    ax.plot(x[i], y2[i], 'ro', markersize=10)\n    ax.plot(x[i], y3[i], 'go', markersize=10)\n\n# Legend\nax.legend()\n\n# Title and labels\nax.set_title('Wearability Comparison')\nax.set_xlabel('Number of microphones')\nax.set_ylabel('Wear (%)')\n\n# Grid\nax.grid(True)\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_68.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 7.0))\n\n# Set the title of the plot\nax.set_title('Trend Analysis')\n\n# Set the x-axis label\nax.set_xlabel('Number of microphones')\n\n# Set the y-axis label\nax.set_ylabel('WER (%)')\n\n# Set the y-axis limits\nax.set_ylim(2, 30)\n\n# Set the x-axis limits\nax.set_xlim(2, 10)\n\n# Set the y-axis ticks\nax.set_yticks([2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30])\n\n# Set the x-axis ticks\nax.set_xticks([2, 3, 4, 5, 6, 7, 8, 9, 10])\n\n# Add a legend\nax.legend()\n\n# Add a trend line\ntrend_line = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30]\nax.plot(trend_line, 'r--')\n\n# Add a scatter plot\nscatter_plot = [2, 3, 4, 5, 6, 7, 8, 9, 10]\nax.scatter(scatter_plot, [2, 4, 6, 8, 10, 12, 14, 16, 18], color='blue')\n\n# Add a bar chart\nbar_chart = [2, 3, 4, 5, 6, 7, 8, 9, 10]\nax.bar(bar_chart, [2, 4, 6, 8, 10, 12, 14, 16, 18], color='green')\n\n# Add a pie chart\npie_chart = [2, 3, 4, 5, 6, 7, 8, 9, 10]\nax.pie(pie_chart, colors=['red', 'blue', 'green', 'yellow', 'orange', 'purple', 'pink', 'brown', 'gray'])\n\n# Add a histogram\nhistogram = [2, 3, 4, 5, 6, 7, 8, 9, 10]\nax.hist(histogram, bins=10, color='cyan')\n\n# Add a box plot\nbox_plot = [2, 3, 4, 5, 6, 7, 8, 9, 10]\nax.boxplot(box_plot, vert=False, patch_artist=True)\n\n# Add a violin plot\nviolin_plot = [2, 3, 4, 5, 6, 7, 8, 9, 10]\nax.violinplot(violin_plot, showmeans=True)\n\n# Add a heatmap\nheatmap = [[2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 3, 4, 5, 6, 7, 8, 9, 10]]\nax.imshow(heatmap, cmap='hot', interpolation='nearest')\n\n# Add a contour plot\ncontour_plot = [[2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 3, 4, 5, 6, 7, 8, 9, 10]]\nax.contour(contour_plot, cmap='coolwarm')\n\n# Add a stream plot\nstream_plot = [[2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 3, 4, 5, 6, 7, 8, 9, 10]]\nax.streamplot(stream_plot, cmap='spring')\n\n# Add a quiver plot\nquiver_plot = [[2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 3, 4, 5, 6, 7, 8, 9, 10]]\nax.quiver(quiver_plot, cmap='summer')\n\n# Add a polar plot\npolar_plot = [[2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 3, 4, 5, 6, 7, 8, 9, 10]]\nax.polar(polar_plot, cmap='autumn')\n\n# Add a 3D plot\nfrom mpl_toolkits.mplot3d import Axes3D\nax3d = fig.add_subplot(111, projection='3d')\nax3d.plot_surface([[2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 3, 4, 5, 6, 7, 8, 9, 10]], [[2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 3, 4, 5, 6, 7, 8, 9, 10]], cmap='winter')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_69.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Set the background color of the plot\nax.set_facecolor('lightblue')\n\n# Set the title of the plot\nax.set_title('Highlight Performance Over Time')\n\n# Set the x-axis label\nax.set_xlabel('Number of Microphones')\n\n# Set the y-axis label\nax.set_ylabel('WER (%)')\n\n# Set the x-axis limits\nax.set_xlim(2, 8)\n\n# Set the y-axis limits\nax.set_ylim(0.2, 1.0)\n\n# Set the x-axis ticks\nax.set_xticks([2, 3, 4, 5, 6, 7, 8])\n\n# Set the y-axis ticks\nax.set_yticks([0.2, 0.4, 0.6, 0.8, 1.0])\n\n# Set the x-axis tick labels\nax.set_xticklabels(['Highlight 1', 'Highlight 2', 'Highlight 3', 'Highlight 4', 'Highlight 5', 'Highlight 6', 'Highlight 7'])\n\n# Set the y-axis tick labels\nax.set_yticklabels(['0.2', '0.4', '0.6', '0.8', '1.0'])\n\n# Set the line color\nax.plot([2, 3, 4, 5, 6, 7, 8], [0.2, 0.4, 0.6, 0.8, 0.9, 0.7, 0.5], color='orange')\n\n# Set the marker color\nax.plot([2, 3, 4, 5, 6, 7, 8], [0.2, 0.4, 0.6, 0.8, 0.9, 0.7, 0.5], 'o', color='red')\n\n# Set the legend\nax.legend(['LibriCSS WER', 'AMI WER', 'Threshold'], loc='upper left')\n\n# Set the grid\nax.grid(True)\n\n# Set the background color of the legend\nax.legend_.get_frame().set_facecolor('white')\n\n# Set the background color of the plot\nax.set_facecolor('lightblue')\n\n# Set the title of the plot\nax.set_title('Highlight Performance Over Time')\n\n# Set the x-axis label\nax.set_xlabel('Number of Microphones')\n\n# Set the y-axis label\nax.set_ylabel('WER (%)')\n\n# Set the x-axis limits\nax.set_xlim(2, 8)\n\n# Set the y-axis limits\nax.set_ylim(0.2, 1.0)\n\n# Set the x-axis ticks\nax.set_xticks([2, 3, 4, 5, 6, 7, 8])\n\n# Set the y-axis ticks\nax.set_yticks([0.2, 0.4, 0.6, 0.8, 1.0])\n\n# Set the x-axis tick labels\nax.set_xticklabels(['Highlight 1', 'Highlight 2', 'Highlight 3', 'Highlight 4', 'Highlight 5', 'Highlight 6', 'Highlight 7'])\n\n# Set the y-axis tick labels\nax.set_yticklabels(['0.2', '0.4', '0.6', '0.8', '1.0'])\n\n# Set the line color\nax.plot([2, 3, 4, 5, 6, 7, 8], [0.2, 0.4, 0.6, 0.8, 0.9, 0.7, 0.5], color='orange')\n\n# Set the marker color\nax.plot([2, 3, 4, 5, 6, 7, 8], [0.2, 0.4, 0.6, 0.8, 0.9, 0.7, 0.5], 'o', color='red')\n\n# Set the legend\nax.legend(['LibriCSS WER', 'AMI WER', 'Threshold'], loc='upper left')\n\n# Set the grid\nax.grid(True)\n\n# Set the background color of the legend\nax.legend_.get_frame().set_facecolor('white')\n\n# Set the background color of the plot\nax.set_facecolor('lightblue')\n\n# Set the title of the plot\nax.set_title('Highlight Performance Over Time')\n\n# Set the x-axis label\nax.set_xlabel('Number of Microphones')\n\n# Set the y-axis label\nax.set_ylabel('WER (%)')\n\n# Set the x-axis limits\nax.set_xlim(2, 8)\n\n# Set the y-axis limits\nax.set_ylim(0.2, 1.0)\n\n# Set the x-axis ticks\nax.set_xticks([2, 3, 4, 5, 6, 7, 8])\n\n# Set the y-axis ticks\nax.set_yticks([0.2, 0.4, 0.6, 0.8, 1.0])\n\n# Set the x-axis tick labels\nax.set_xticklabels(['Highlight 1', 'Highlight 2', 'Highlight 3', 'Highlight 4', 'Highlight 5', 'Highlight 6', 'Highlight 7'])\n\n# Set the y-axis tick labels\nax.set_yticklabels(['0.2', '0.4', '0.6', '0.8', '1.0'])\n\n# Set the line color\nax.plot([2, 3, 4, 5, 6, 7, 8], [0.2, 0.4, 0.6, 0.8, 0.9, 0.7, 0.5], color='orange')\n\n# Set the marker color\nax.plot([2, 3, 4, 5, 6, 7, 8], [0.2, 0.4, 0.6, 0.8, 0.9, 0.7, 0.5], 'o', color='red')\n\n# Set the legend\nax.legend(['LibriCSS WER', 'AMI WER', 'Threshold'], loc='upper left')\n\n# Set the grid\nax.grid(True)\n\n# Set the background color of the legend\nax.legend_.get_frame().set_facecolor('white')\n\n# Set the background color of the plot\nax.set_facecolor('lightblue')\n\n# Set the title of the plot\nax.set_title('Highlight Performance Over Time')\n\n# Set the x-axis label\nax.set_xlabel('Number of Microphones')\n\n# Set the y-axis label\nax.set_ylabel('WER (%)')\n\n# Set the x-axis limits\nax.set_xlim(2, 8)\n\n# Set the y-axis limits\nax.set_ylim(0.2, 1.0)\n\n# Set the x-axis ticks\nax.set_xticks([2, 3, 4, 5, 6, 7, 8])\n\n# Set the y-axis ticks\nax.set_yticks([0.2, 0.4, 0.6, 0.8, 1.0])\n\n# Set the x-axis tick labels\nax.set_xticklabels(['Highlight 1', 'Highlight 2', 'Highlight 3', 'Highlight 4', 'Highlight 5', 'Highlight 6', 'Highlight 7'])\n\n# Set the y-axis tick labels\nax.set_yticklabels(['0.2', '0.4', '0.6', '0.8', '1.0'])\n\n# Set the line color\nax.plot([2, 3, 4, 5, 6, 7, 8], [0.2, 0.4, 0.6, 0.8, 0.9, 0.7, 0.5], color='orange')\n\n# Set the marker color\nax.plot([2, 3, 4, 5, 6, 7, 8], [0.2, 0.4, 0.6, 0.8, 0.9, 0.7, 0.5], 'o', color='red')\n\n# Set the legend\nax.legend(['LibriCSS WER', 'AMI WER', 'Threshold'], loc='upper left')\n\n# Set the grid\nax.grid(True)\n\n# Set the background color of the legend\nax.legend_.get_frame().set_facecolor('white')\n\n# Set the background color of the plot\nax.set_facecolor('lightblue')\n\n# Set the title of the plot\nax.set_title('Highlight Performance Over Time')\n\n# Set the x-axis label\nax.set_xlabel('Number of Microphones')\n\n# Set the y-axis label\nax.set_ylabel('WER (%)')\n\n# Set the x-axis limits\nax.set_xlim(2, 8)\n\n# Set the y-axis limits\nax.set_ylim(0.2, 1.0)\n\n# Set the x-axis ticks\nax.set_xticks([2, 3, 4, 5, 6, 7, 8])\n\n# Set the y-axis ticks\nax.set_yticks([0.2, 0.4, 0.6, 0.8, 1.0])\n\n# Set the x-axis tick labels\nax.set_xticklabels(['Highlight 1', 'Highlight 2', 'Highlight 3', 'Highlight 4', 'Highlight 5', 'Highlight 6', 'Highlight 7'])\n\n# Set the y-axis tick labels\nax.set_yticklabels(['0.2', '0.4', '0.6', '0.8', '1.0'])\n\n# Set the line color\nax.plot([2, 3, 4, 5, 6, 7, 8], [0.2, 0.4, 0.6, 0.8, 0.9, 0.7, 0.5], color='orange')\n\n# Set the marker color\nax.plot([2, 3, 4, 5, 6, 7, 8], [0.2, 0.4, 0.6, 0.8, 0.9, 0.7, 0.5], 'o', color='red')\n\n# Set the legend\nax.legend(['LibriCSS WER', 'AMI WER', 'Threshold'], loc='upper left')\n\n# Set the grid\nax.grid(True)\n\n# Set the background color of the legend\nax.legend_.get_frame().set_facecolor('white')\n\n# Set the background color of the plot\nax.set_facecolor('lightblue')\n\n# Set the title of the plot\nax.set_title('Highlight Performance Over Time')\n\n# Set the x-axis label\nax.set_xlabel('Number of Microphones')\n\n# Set the y-axis label\nax.set_ylabel('WER (%)')\n\n# Set the x-axis limits\nax.set_xlim(2, 8)\n\n# Set the y-axis limits\nax.set_ylim(0.2, 1.0)\n\n# Set the x-axis ticks\nax.set_xticks([2, 3, 4, 5, 6, 7, 8])\n\n# Set the y-axis ticks\nax.set_yticks([0.2, 0.4, 0.6, 0.8, 1.0])\n\n# Set the x-axis tick labels\nax.set_xticklabels(['Highlight 1', 'Highlight 2', 'Highlight 3', 'Highlight 4', 'Highlight 5', 'Highlight 6', 'Highlight 7'])\n\n# Set the y-axis tick labels\nax.set_yticklabels(['0.2', '0.4', '0.6', '0.8', '1.0'])\n\n# Set the line color\nax.plot([2, 3, 4, 5, 6, 7, 8], [0.2, 0.4, 0.6, 0.8, 0.9, 0.7, 0.5], color='orange')\n\n# Set the marker color\nax.plot([2, 3, 4, 5, 6, 7, 8], [0.2, 0.4, 0.6, 0.8, 0.9, 0.7, 0.5], 'o', color='red')\n\n# Set the legend\nax.legend(['LibriCSS WER', 'AMI WER', 'Threshold'], loc='upper left')\n\n# Set the grid\nax.grid(True)\n\n# Set the background color of the legend\nax.legend_.get_frame().set_facecolor('white')\n\n# Set the background color of the plot\nax.set_facecolor('lightblue')\n\n# Set the title of the plot\nax.set_title('Highlight Performance Over Time')\n\n# Set the x-axis label\nax.set_xlabel('Number of Microphones')\n\n# Set the y-axis label\nax.set_ylabel('WER (%)')\n\n# Set the x-axis limits\nax.set_xlim(2, 8)\n\n# Set the y-axis limits\nax.set_ylim(0.2, 1.0)\n\n# Set the x-axis ticks\nax.set_xticks([2, 3, 4, 5, 6, 7, 8])\n\n# Set the y-axis ticks\nax.set_yticks([0.2, 0.4, 0.6, 0.8, 1.0])\n\n# Set the x-axis tick labels\nax.set_xticklabels(['Highlight 1', 'Highlight 2', 'Highlight 3', 'Highlight 4', 'Highlight 5', 'Highlight 6', 'Highlight 7'])\n\n# Set the y-axis tick labels\nax.set_yticklabels(['0.2', '0.4', '0.6', '0.8', '1.0'])\n\n# Set the line color\nax.plot([2, 3, 4, 5, 6, 7, 8], [0.2, 0.4, 0.6, 0.8, 0.9, 0.7, 0.5], color='orange')\n\n# Set the marker color\nax.plot([2, 3, 4, 5, 6, 7, 8], [0.2, 0.4, 0.6, 0.8, 0.9, 0.7, 0.5], 'o', color='red')\n\n# Set the legend\nax.legend(['LibriCSS WER', 'AMI WER', 'Threshold'], loc='upper left')\n\n# Set the grid\nax.grid(True)\n\n# Set the background color of the legend\nax.legend_.get_frame().set_facecolor('white')\n\n# Set the background color of the plot\nax.set_facecolor('lightblue')\n\n# Set the title of the plot\nax.set_title('Highlight Performance Over Time')\n\n# Set the x-axis label\nax.set_xlabel('Number of Microphones')\n\n# Set the y-axis label\nax.set_ylabel('WER (%)')\n\n# Set the x-axis limits\nax.set_xlim(2, 8)\n\n# Set the y-axis limits\nax.set_ylim(0.2, 1.0)\n\n# Set the x-axis ticks\nax.set_xticks([2, 3, 4, 5, 6, 7, 8])\n\n# Set the y-axis ticks\nax.set_yticks([0.2, 0.4, 0.6, 0.8, 1.0])\n\n# Set the x-axis tick labels\nax.set_xticklabels(['Highlight 1', 'Highlight 2', 'Highlight 3', 'Highlight 4', 'Highlight 5', 'Highlight 6', 'Highlight 7'])\n\n# Set the y-axis tick labels\nax.set_yticklabels(['0.2', '0.4', '0.6', '0.8', '1.0'])\n\n# Set the line color\nax.plot([2, 3, 4, 5, 6, 7, 8], [0.2, 0.4, 0.6, 0.8, 0.9, 0.7, 0.5], color='orange')\n\n# Set the marker color\nax.plot([2, 3, 4, 5, 6, 7, 8], [0.2, 0.4, 0.6, 0.8, 0.9, 0.7, 0.5], 'o', color='red')\n\n# Set the legend\nax.legend(['LibriCSS WER', 'AMI WER', 'Threshold'], loc='upper left')\n\n# Set the grid\nax.grid(True)\n\n# Set the background color of the legend\nax.legend_.get_frame().set_facecolor('white')\n\n# Set the background color of the plot\nax.set_facecolor('lightblue')\n\n# Set the title of the plot\nax.set_title('Highlight Performance Over Time')\n\n# Set the x-axis label\nax.set_xlabel('Number of Microphones')\n\n# Set the y-axis label\nax.set_ylabel('WER (%)')\n\n# Set the x-axis limits\nax.set_xlim(2, 8)\n\n# Set the y-axis limits\nax.set_ylim(0.2, 1.0)\n\n# Set the x-axis ticks\nax.set_xticks([2, 3, 4, 5, 6, 7, 8])\n\n# Set the y-axis ticks\nax.set_yticks([0.2, 0.4, 0.6, 0.8, 1.0])\n\n# Set the x-axis tick labels\nax.set_xticklabels(['Highlight 1', 'Highlight 2', 'Highlight 3', 'Highlight 4', 'Highlight 5', 'Highlight 6', 'Highlight 7'])\n\n# Set the y-axis tick labels\nax.set_yticklabels(['0.2', '0.4', '0.6', '0.8', '1.0'])\n\n# Set the line color\nax.plot([2, 3, 4, 5, 6, 7, 8], [0.2, 0.4, 0.6, 0.8, 0.9, 0.7, 0.5], color='orange')\n\n# Set the marker color\nax.plot([2, 3, 4, 5, 6, 7, 8], [0.2, 0.4, 0.6, 0.8, 0.9, 0.7, 0.5], 'o', color='red')\n\n# Set the legend\nax.legend(['LibriCSS WER', 'AMI WER', 'Threshold'], loc='upper left')\n\n# Set the grid\nax.grid(True)\n\n# Set the background color of the legend\nax.legend_.get_frame().set_facecolor('white')\n\n# Set the background color of the plot\nax.set_face"}
{"file": "dataset/ori_500/line_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(12, 4))\n\n# Create a scatter plot\nx = np.linspace(0, 1, 100)\ny = np.sin(x)\nax.plot(x, y, 'b-')\n\n# Add a title\nax.set_title('Contrastive loss weight.')\n\n# Add a legend\nax.legend(['Contrastive loss weight'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_70.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(12, 5))\n\n# Set the background color of the plot\nax.set_facecolor('lightgrey')\n\n# Set the title of the plot\nax.set_title('Microphone Sales Data')\n\n# Set the x-axis label\nax.set_xlabel('Number of Microphones')\n\n# Set the y-axis label\nax.set_ylabel('Sales ($ millions)')\n\n# Create a scatter plot\nx = np.linspace(0, 10, 100)\ny = np.sin(x)\nax.plot(x, y, 'r-')\n\n# Add a legend\nax.legend(['LibriCSS WER', 'Threshold'])\n\n# Add a watermark\nax.text(0.5, 0.5, 'Watermark', transform=ax.transAxes,\n        fontsize=15, color='red', ha='center', va='center')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_71.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(6.0, 12.0))\n\n# Set the title of the plot\nax.set_title('SPMotif-0.5')\n\n# Create a list of colors for the lines\ncolors = ['blue', 'green']\n\n# Create a list of labels for the lines\nlabels = ['PNA', 'GIN']\n\n# Create a list of ratios\nratios = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0]\n\n# Create a list of performance values\nperformance_values = [0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 0.9, 0.8, 0.7, 0.6]\n\n# Plot the data\nfor i in range(len(colors)):\n    ax.plot(ratios, performance_values, color=colors[i], label=labels[i])\n\n# Add a legend to the plot\nax.legend()\n\n# Set the x-axis and y-axis limits\nax.set_xlim(0.1, 1.0)\nax.set_ylim(0.4, 1.0)\n\n# Set the x-axis and y-axis labels\nax.set_xlabel('Ratio r')\nax.set_ylabel('Performance')\n\n# Set the background color of the plot\nax.set_facecolor('#f0f0f0')\n\n# Set the grid lines\nax.grid(True)\n\n# Save the plot as an image file\nplt.savefig('spmotif-0.5.png')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_72.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Set the title of the plot\nax.set_title('Dynamic Performance Trends')\n\n# Set the x-axis label\nax.set_xlabel('Ratio r')\n\n# Set the y-axis label\nax.set_ylabel('Performance')\n\n# Set the x-axis limits\nax.set_xlim(0.1, 1)\n\n# Set the y-axis limits\nax.set_ylim(-80, 20)\n\n# Set the grid lines\nax.grid(True)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both"}
{"file": "dataset/ori_500/line_73.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Modern Linear Performance Evaluation')\n\n# Set the x-axis label\nax.set_xlabel('Ratio r')\n\n# Set the y-axis label\nax.set_ylabel('Performance')\n\n# Set the x-axis limits\nax.set_xlim(0.1, 1.0)\n\n# Set the y-axis limits\nax.set_ylim(0.1, 1.5)\n\n# Create a scatter plot with a color map\nscatter = ax.scatter([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0], [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0], c='blue', cmap='viridis')\n\n# Add a color bar which maps values to colors\ncbar = fig.colorbar(scatter)\ncbar.set_label('Performance')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_74.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Dynamic Model Performance')\n\n# Set the x-axis label\nax.set_xlabel('Ratio r')\n\n# Set the y-axis label\nax.set_ylabel('Performance')\n\n# Set the x-axis limits\nax.set_xlim(0, 1)\n\n# Set the y-axis limits\nax.set_ylim(0, 10)\n\n# Set the grid lines\nax.grid(True)\n\n# Add a rectangle for the logo\nlogo = plt.Rectangle((0.95, 0.95), 0.05, 0.05, color='blue')\nax.add_patch(logo)\n\n# Add a rectangle for the menu\nmenu = plt.Rectangle((0.05, 0.95), 0.05, 0.05, color='red')\nax.add_patch(menu)\n\n# Add a rectangle for the social media icons\nsocial_media = plt.Rectangle((0.05, 0.9), 0.05, 0.05, color='green')\nax.add_patch(social_media)\n\n# Add a rectangle for the performance data\nperformance_data = plt.Rectangle((0.05, 0.85), 0.05, 0.05, color='yellow')\nax.add_patch(performance_data)\n\n# Add a rectangle for the model selection\nmodel_selection = plt.Rectangle((0.05, 0.8), 0.05, 0.05, color='orange')\nax.add_patch(model_selection)\n\n# Add a rectangle for the model training\nmodel_training = plt.Rectangle((0.05, 0.75), 0.05, 0.05, color='purple')\nax.add_patch(model_training)\n\n# Add a rectangle for the model evaluation\nmodel_evaluation = plt.Rectangle((0.05, 0.7), 0.05, 0.05, color='pink')\nax.add_patch(model_evaluation)\n\n# Add a rectangle for the model deployment\nmodel_deployment = plt.Rectangle((0.05, 0.65), 0.05, 0.05, color='brown')\nax.add_patch(model_deployment)\n\n# Add a rectangle for the model monitoring\nmodel_monitoring = plt.Rectangle((0.05, 0.6), 0.05, 0.05, color='cyan')\nax.add_patch(model_monitoring)\n\n# Add a rectangle for the model optimization\nmodel_optimization = plt.Rectangle((0.05, 0.55), 0.05, 0.05, color='magenta')\nax.add_patch(model_optimization)\n\n# Add a rectangle for the model validation\nmodel_validation = plt.Rectangle((0.05, 0.5), 0.05, 0.05, color='lime')\nax.add_patch(model_validation)\n\n# Add a rectangle for the model testing\nmodel_testing = plt.Rectangle((0.05, 0.45), 0.05, 0.05, color='silver')\nax.add_patch(model_testing)\n\n# Add a rectangle for the model deployment\nmodel_deployment = plt.Rectangle((0.05, 0.4), 0.05, 0.05, color='gold')\nax.add_patch(model_deployment)\n\n# Add a rectangle for the model monitoring\nmodel_monitoring = plt.Rectangle((0.05, 0.35), 0.05, 0.05, color='navy')\nax.add_patch(model_monitoring)\n\n# Add a rectangle for the model optimization\nmodel_optimization = plt.Rectangle((0.05, 0.3), 0.05, 0.05, color='maroon')\nax.add_patch(model_optimization)\n\n# Add a rectangle for the model validation\nmodel_validation = plt.Rectangle((0.05, 0.25), 0.05, 0.05, color='olive')\nax.add_patch(model_validation)\n\n# Add a rectangle for the model testing\nmodel_testing = plt.Rectangle((0.05, 0.2), 0.05, 0.05, color='indigo')\nax.add_patch(model_testing)\n\n# Add a rectangle for the model deployment\nmodel_deployment = plt.Rectangle((0.05, 0.15), 0.05, 0.05, color='silver')\nax.add_patch(model_deployment)\n\n# Add a rectangle for the model monitoring\nmodel_monitoring = plt.Rectangle((0.05, 0.1), 0.05, 0.05, color='gold')\nax.add_patch(model_monitoring)\n\n# Add a rectangle for the model optimization\nmodel_optimization = plt.Rectangle((0.05, 0.05), 0.05, 0.05, color='navy')\nax.add_patch(model_optimization)\n\n# Add a rectangle for the model validation\nmodel_validation = plt.Rectangle((0.05, 0.0), 0.05, 0.05, color='maroon')\nax.add_patch(model_validation)\n\n# Add a rectangle for the model testing\nmodel_testing = plt.Rectangle((0.05, -0.05), 0.05, 0.05, color='olive')\nax.add_patch(model_testing)\n\n# Add a rectangle for the model deployment\nmodel_deployment = plt.Rectangle((0.05, -0.1), 0.05, 0.05, color='indigo')\nax.add_patch(model_deployment)\n\n# Add a rectangle for the model monitoring\nmodel_monitoring = plt.Rectangle((0.05, -0.15), 0.05, 0.05, color='silver')\nax.add_patch(model_monitoring)\n\n# Add a rectangle for the model optimization\nmodel_optimization = plt.Rectangle((0.05, -0.2), 0.05, 0.05, color='gold')\nax.add_patch(model_optimization)\n\n# Add a rectangle for the model validation\nmodel_validation = plt.Rectangle((0.05, -0.25), 0.05, 0.05, color='navy')\nax.add_patch(model_validation)\n\n# Add a rectangle for the model testing\nmodel_testing = plt.Rectangle((0.05, -0.3), 0.05, 0.05, color='maroon')\nax.add_patch(model_testing)\n\n# Add a rectangle for the model deployment\nmodel_deployment = plt.Rectangle((0.05, -0.35), 0.05, 0.05, color='olive')\nax.add_patch(model_deployment)\n\n# Add a rectangle for the model monitoring\nmodel_monitoring = plt.Rectangle((0.05, -0.4), 0.05, 0.05, color='indigo')\nax.add_patch(model_monitoring)\n\n# Add a rectangle for the model optimization\nmodel_optimization = plt.Rectangle((0.05, -0.45), 0.05, 0.05, color='silver')\nax.add_patch(model_optimization)\n\n# Add a rectangle for the model validation\nmodel_validation = plt.Rectangle((0.05, -0.5), 0.05, 0.05, color='gold')\nax.add_patch(model_validation)\n\n# Add a rectangle for the model testing\nmodel_testing = plt.Rectangle((0.05, -0.55), 0.05, 0.05, color='navy')\nax.add_patch(model_testing)\n\n# Add a rectangle for the model deployment\nmodel_deployment = plt.Rectangle((0.05, -0.6), 0.05, 0.05, color='maroon')\nax.add_patch(model_deployment)\n\n# Add a rectangle for the model monitoring\nmodel_monitoring = plt.Rectangle((0.05, -0.65), 0.05, 0.05, color='olive')\nax.add_patch(model_monitoring)\n\n# Add a rectangle for the model optimization\nmodel_optimization = plt.Rectangle((0.05, -0.7), 0.05, 0.05, color='indigo')\nax.add_patch(model_optimization)\n\n# Add a rectangle for the model validation\nmodel_validation = plt.Rectangle((0.05, -0.75), 0.05, 0.05, color='silver')\nax.add_patch(model_validation)\n\n# Add a rectangle for the model testing\nmodel_testing = plt.Rectangle((0.05, -0.8), 0.05, 0.05, color='gold')\nax.add_patch(model_testing)\n\n# Add a rectangle for the model deployment\nmodel_deployment = plt.Rectangle((0.05, -0.85), 0.05, 0.05, color='navy')\nax.add_patch(model_deployment)\n\n# Add a rectangle for the model monitoring\nmodel_monitoring = plt.Rectangle((0.05, -0.9), 0.05, 0.05, color='maroon')\nax.add_patch(model_monitoring)\n\n# Add a rectangle for the model optimization\nmodel_optimization = plt.Rectangle((0.05, -0.95), 0.05, 0.05, color='olive')\nax.add_patch(model_optimization)\n\n# Add a rectangle for the model validation\nmodel_validation = plt.Rectangle((0.05, -1), 0.05, 0.05, color='indigo')\nax.add_patch(model_validation)\n\n# Add a rectangle for the model testing\nmodel_testing = plt.Rectangle((0.05, -1.05), 0.05, 0.05, color='silver')\nax.add_patch(model_testing)\n\n# Add a rectangle for the model deployment\nmodel_deployment = plt.Rectangle((0.05, -1.1), 0.05, 0.05, color='gold')\nax.add_patch(model_deployment)\n\n# Add a rectangle for the model monitoring\nmodel_monitoring = plt.Rectangle((0.05, -1.15), 0.05, 0.05, color='navy')\nax.add_patch(model_monitoring)\n\n# Add a rectangle for the model optimization\nmodel_optimization = plt.Rectangle((0.05, -1.2), 0.05, 0.05, color='maroon')\nax.add_patch(model_optimization)\n\n# Add a rectangle for the model validation\nmodel_validation = plt.Rectangle((0.05, -1.25), 0.05, 0.05, color='olive')\nax.add_patch(model_validation)\n\n# Add a rectangle for the model testing\nmodel_testing = plt.Rectangle((0.05, -1.3), 0.05, 0.05, color='indigo')\nax.add_patch(model_testing)\n\n# Add a rectangle for the model deployment\nmodel_deployment = plt.Rectangle((0.05, -1.35), 0.05, 0.05, color='silver')\nax.add_patch(model_deployment)\n\n# Add a rectangle for the model monitoring\nmodel_monitoring = plt.Rectangle((0.05, -1.4), 0.05, 0.05, color='gold')\nax.add_patch(model_monitoring)\n\n# Add a rectangle for the model optimization\nmodel_optimization = plt.Rectangle((0.05, -1.45), 0.05, 0.05, color='navy')\nax.add_patch(model_optimization)\n\n# Add a rectangle for the model validation\nmodel_validation = plt.Rectangle((0.05, -1.5), 0.05, 0.05, color='maroon')\nax.add_patch(model_validation)\n\n# Add a rectangle for the model testing\nmodel_testing = plt.Rectangle((0.05, -1.55), 0.05, 0.05, color='olive')\nax.add_patch(model_testing)\n\n# Add a rectangle for the model deployment\nmodel_deployment = plt.Rectangle((0.05, -1.6), 0.05, 0.05, color='indigo')\nax.add_patch(model_deployment)\n\n# Add a rectangle for the model monitoring\nmodel_monitoring = plt.Rectangle((0.05, -1.65), 0.05, 0.05, color='silver')\nax.add_patch(model_monitoring)\n\n# Add a rectangle for the model optimization\nmodel_optimization = plt.Rectangle((0.05, -1.7), 0.05, 0.05, color='gold')\nax.add_patch(model_optimization)\n\n# Add a rectangle for the model validation\nmodel_validation = plt.Rectangle((0.05, -1.75), 0.05, 0.05, color='navy')\nax.add_patch(model_validation)\n\n# Add a rectangle for the model testing\nmodel_testing = plt.Rectangle((0.05, -1.8), 0.05, 0.05, color='maroon')\nax.add_patch(model_testing)\n\n# Add a rectangle for the model deployment\nmodel_deployment = plt.Rectangle((0.05, -1.85), 0.05, 0.05, color='olive')\nax.add_patch(model_deployment)\n\n# Add a rectangle for the model monitoring\nmodel_monitoring = plt.Rectangle((0.05, -1.9), 0.05, 0.05, color='indigo')\nax.add_patch(model_monitoring)\n\n# Add a rectangle for the model optimization\nmodel_optimization = plt.Rectangle((0.05, -1.95), 0.05, 0.05, color='silver')\nax.add_patch(model_optimization)\n\n# Add a rectangle for the model validation\nmodel_validation = plt.Rectangle((0.05, -2), 0.05, 0.05, color='gold')\nax.add_patch(model_validation)\n\n# Add a rectangle for the model testing\nmodel_testing = plt.Rectangle((0.05, -2.05), 0.05, 0.05, color='navy')\nax.add_patch(model_testing)\n\n# Add a rectangle for the model deployment\nmodel_deployment = plt.Rectangle((0.05, -2.1), 0.05, 0.05, color='maroon')\nax.add_patch(model_deployment)\n\n# Add a rectangle for the model monitoring\nmodel_monitoring = plt.Rectangle((0.05, -2.15), 0.05, 0.05, color='olive')\nax.add_patch(model_monitoring)\n\n# Add a rectangle for the model optimization\nmodel_optimization = plt.Rectangle((0.05, -2.2), 0.05, 0.05, color='indigo')\nax.add_patch(model_optimization)\n\n# Add a rectangle for the model validation\nmodel_validation = plt.Rectangle((0.05, -2.25), 0.05, 0.05, color='silver')\nax.add_patch(model_validation)\n\n# Add a rectangle for the model testing\nmodel_testing = plt.Rectangle((0.05, -2.3), 0.05, 0.05, color='gold')\nax.add_patch(model_testing)\n\n# Add a rectangle for the model deployment\nmodel_deployment = plt.Rectangle((0.05, -2.35), 0.05, 0.05, color='navy')\nax.add_patch(model_deployment)\n\n# Add a rectangle for the model monitoring\nmodel_monitoring = plt.Rectangle((0.05, -2.4), 0.05, 0.05, color='maroon')\nax.add_patch(model_monitoring)\n\n# Add a rectangle for the model optimization\nmodel_optimization = plt.Rectangle((0.05, -2.45), 0.05, 0.05, color='olive')\nax.add_patch(model_optimization)\n\n# Add a rectangle for the model validation\nmodel_validation = plt.Rectangle((0.05, -2.5), 0.05, 0.05, color='indigo')\nax.add_patch(model_validation)\n\n# Add a rectangle for the model testing\nmodel_testing = plt.Rectangle((0.05, -2.55), 0.05, 0.05, color='silver')\nax.add_patch(model_testing)\n\n# Add a rectangle for the model deployment\nmodel_deployment = plt.Rectangle((0.05, -2.6), 0.05, 0.05, color='gold')\nax.add_patch(model_deployment)\n\n# Add a rectangle for the model monitoring\nmodel_monitoring = plt.Rectangle((0.05, -2.65), 0.05, 0.05, color='navy')\nax.add_patch(model_monitoring)\n\n# Add a rectangle for the model optimization\nmodel_optimization = plt.Rectangle((0.05, -2.7), 0.05, 0.05, color='maroon')\nax.add_patch(model_optimization)\n\n# Add a rectangle for the model validation\nmodel_validation = plt.Rectangle((0.05, -2.75), 0.05, 0.05, color='olive')\nax.add_patch(model_validation)\n\n# Add a rectangle for the model testing\nmodel_testing = plt.Rectangle((0.05, -2.8), 0.05, 0.05, color='indigo')\nax.add_patch(model_testing)\n\n# Add a rectangle for the model deployment\nmodel_deployment = plt.Rectangle((0.05, -2.85), 0.05, 0.05, color='silver')\nax.add_patch(model_deployment)\n\n# Add a rectangle for the model monitoring\nmodel_monitoring = plt.Rectangle((0.05, -2.9), 0.05, 0.05, color='gold')\nax.add_patch(model_monitoring)\n\n# Add a rectangle for the model optimization\nmodel_optimization = plt.Rectangle((0.05, -2.95), 0.05, 0.05, color='navy')\nax.add_patch(model_optimization)\n\n# Add a rectangle for the model validation\nmodel_validation = plt.Rectangle((0.05, -3), 0.05, 0.05, color='maroon')\nax.add_patch(model"}
{"file": "dataset/ori_500/line_75.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Set the title of the plot\nax.set_title('Comparison of Model Accuracies')\n\n# Set the x-axis label\nax.set_xlabel('Ensemble Size')\n\n# Set the y-axis label\nax.set_ylabel('Model Accuracy')\n\n# Set the x-ticks\nax.set_xticks([5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29])\n\n# Set the y-ticks\nax.set_yticks(range(60, 90, 5))\n\n# Set the grid\nax.grid(True)\n\n# Create a list of colors for the lines\ncolors = ['blue', 'red']\n\n# Create a list of labels for the lines\nlabels = ['Model 1 Mean Accuracy', 'Model 2 Mean Accuracy']\n\n# Create a list of line styles\nlinestyles = ['-', '--']\n\n# Create a list of line widths\nlinewidths = [2, 1]\n\n# Create a list of markers\nmarkers = ['o', 's']\n\n# Create a list of marker sizes\nmarkersizes = [10, 8]\n\n# Create a list of marker edge colors\nmarkeredgecolors = ['black', 'black']\n\n# Create a list of marker face colors\nmarkerfacecolors = ['white', 'white']\n\n# Create a list of line properties\nlineprops = [{'color': colors[0], 'linestyle': linestyles[0], 'linewidth': linewidths[0], 'marker': markers[0], 'markersize': markersizes[0], 'markeredgecolor': markeredgecolors[0], 'markerfacecolor': markerfacecolors[0]}, {'color': colors[1], 'linestyle': linestyles[1], 'linewidth': linewidths[1], 'marker': markers[1], 'markersize': markersizes[1], 'markeredgecolor': markeredgecolors[1], 'markerfacecolor': markerfacecolors[1]}]\n\n# Create a list of line objects\nlines = []\n\n# Create a list of line labels\nlinelabels = []\n\n# Create a list of line colors\nlinecolors = []\n\n# Create a list of line line styles\nlinelinestyles = []\n\n# Create a list of line line widths\nlinelinewidths = []\n\n# Create a list of line markers\nlinemarkers = []\n\n# Create a list of line marker sizes\nlinemarkersizes = []\n\n# Create a list of line marker edge colors\nlinemarkeredgecolors = []\n\n# Create a list of line marker face colors\nlinemarkerfacecolors = []\n\n# Create a list of line line properties\nlinelineprops = []\n\n# Create a list of line line objects\nlinelines = []\n\n# Create a list of line line labels\nlinelinelabels = []\n\n# Create a list of line line colors\nlinelinecolors = []\n\n# Create a list of line line line styles\nlinelinestyles = []\n\n# Create a list of line line line widths\nlinelinelinewidths = []\n\n# Create a list of line line markers\nlinelinemarkers = []\n\n# Create a list of line line marker sizes\nlinelinemarkersizes = []\n\n# Create a list of line line marker edge colors\nlinelinemarkeredgecolors = []\n\n# Create a list of line line marker face colors\nlinelinemarkerfacecolors = []\n\n# Create a list of line line line properties\nlinelineprops = []\n\n# Create a list of line line line objects\nlinelineobjects = []\n\n# Create a list of line line line labels\nlinelineobjectslabels = []\n\n# Create a list of line line line colors\nlinelineobjectscolors = []\n\n# Create a list of line line line line styles\nlinelineobjectslinestyles = []\n\n# Create a list of line line line line widths\nlinelineobjectslinewidths = []\n\n# Create a list of line line line markers\nlinelineobjectsmarkers = []\n\n# Create a list of line line line marker sizes\nlinelineobjectsmarkersizes = []\n\n# Create a list of line line line marker edge colors\nlinelineobjectsmarkeredgecolors = []\n\n# Create a list of line line line marker face colors\nlinelineobjectsmarkerfacecolors = []\n\n# Create a list of line line line line properties\nlinelineobjectslineprops = []\n\n# Create a list of line line line line objects\nlinelineobjectslineobjects = []\n\n# Create a list of line line line line labels\nlinelineobjectslineobjectslabels = []\n\n# Create a list of line line line line colors\nlinelineobjectslineobjectscolors = []\n\n# Create a list of line line line line line styles\nlinelineobjectslineobjectslinestyles = []\n\n# Create a list of line line line line line widths\nlinelineobjectslineobjectslinewidths = []\n\n# Create a list of line line line line markers\nlinelineobjectslineobjectsmarkers = []\n\n# Create a list of line line line line marker sizes\nlinelineobjectslineobjectsmarkersizes = []\n\n# Create a list of line line line line marker edge colors\nlinelineobjectslineobjectsmarkeredgecolors = []\n\n# Create a list of line line line line marker face colors\nlinelineobjectslineobjectsmarkerfacecolors = []\n\n# Create a list of line line line line line properties\nlinelineobjectslineobjectslineprops = []\n\n# Create a list of line line line line line objects\nlinelineobjectslineobjectslineobjects = []\n\n# Create a list of line line line line line labels\nlinelineobjectslineobjectslineobjectslabels = []\n\n# Create a list of line line line line line colors\nlinelineobjectslineobjectslineobjectscolors = []\n\n# Create a list of line line line line line line styles\nlinelineobjectslineobjectslineobjectslinestyles = []\n\n# Create a list of line line line line line line widths\nlinelineobjectslineobjectslineobjectslinewidths = []\n\n# Create a list of line line line line line markers\nlinelineobjectslineobjectslineobjectsmarkers = []\n\n# Create a list of line line line line line marker sizes\nlinelineobjectslineobjectslineobjectsmarkersizes = []\n\n# Create a list of line line line line line marker edge colors\nlinelineobjectslineobjectslineobjectsmarkeredgecolors = []\n\n# Create a list of line line line line line marker face colors\nlinelineobjectslineobjectslineobjectsmarkerfacecolors = []\n\n# Create a list of line line line line line line properties\nlinelineobjectslineobjectslineobjectslineprops = []\n\n# Create a list of line line line line line line objects\nlinelineobjectslineobjectslineobjectslineobjects = []\n\n# Create a list of line line line line line line labels\nlinelineobjectslineobjectslineobjectslineobjectslabels = []\n\n# Create a list of line line line line line line colors\nlinelineobjectslineobjectslineobjectslineobjectscolors = []\n\n# Create a list of line line line line line line line styles\nlinelineobjectslineobjectslineobjectslineobjectslinestyles = []\n\n# Create a list of line line line line line line line widths\nlinelineobjectslineobjectslineobjectslineobjectslinewidths = []\n\n# Create a list of line line line line line line markers\nlinelineobjectslineobjectslineobjectslineobjectsmarkers = []\n\n# Create a list of line line line line line line marker sizes\nlinelineobjectslineobjectslineobjectslineobjectsmarkersizes = []\n\n# Create a list of line line line line line line marker edge colors\nlinelineobjectslineobjectslineobjectslineobjectsmarkeredgecolors = []\n\n# Create a list of line line line line line line marker face colors\nlinelineobjectslineobjectslineobjectslineobjectsmarkerfacecolors = []\n\n# Create a list of line line line line line line line properties\nlinelineobjectslineobjectslineobjectslineobjectslineprops = []\n\n# Create a list of line line line line line line line objects\nlinelineobjectslineobjectslineobjectslineobjectslineobjects = []\n\n# Create a list of line line line line line line line labels\nlinelineobjectslineobjectslineobjectslineobjectslineobjectslabels = []\n\n# Create a list of line line line line line line line colors\nlinelineobjectslineobjectslineobjectslineobjectslineobjectscolors = []\n\n# Create a list of line line line line line line line line styles\nlinelineobjectslineobjectslineobjectslineobjectslineobjectslinestyles = []\n\n# Create a list of line line line line line line line line widths\nlinelineobjectslineobjectslineobjectslineobjectslineobjectslinewidths = []\n\n# Create a list of line line line line line line line markers\nlinelineobjectslineobjectslineobjectslineobjectslineobjectsmarkers = []\n\n# Create a list of line line line line line line line marker sizes\nlinelineobjectslineobjectslineobjectslineobjectslineobjectsmarkersizes = []\n\n# Create a list of line line line line line line line marker edge colors\nlinelineobjectslineobjectslineobjectslineobjectslineobjectsmarkeredgecolors = []\n\n# Create a list of line line line line line line line marker face colors\nlinelineobjectslineobjectslineobjectslineobjectslineobjectsmarkerfacecolors = []\n\n# Create a list of line line line line line line line line properties\nlinelineobjectslineobjectslineobjectslineobjectslineobjectslineprops = []\n\n# Create a list of line line line line line line line line objects\nlinelineobjectslineobjectslineobjectslineobjectslineobjectslineobjects = []\n\n# Create a list of line line line line line line line line labels\nlinelineobjectslineobjectslineobjectslineobjectslineobjectslineobjectslabels = []\n\n# Create a list of line line line line line line line line colors\nlinelineobjectslineobjectslineobjectslineobjectslineobjectslineobjectscolors = []\n\n# Create a list of line line line line line line line line line styles\nlinelineobjectslineobjectslineobjectslineobjectslineobjectslineobjectslinestyles = []\n\n# Create a list of line line line line line line line line line widths\nlinelineobjectslineobjectslineobjectslineobjectslineobjectslineobjectslinewidths = []\n\n# Create a list of line line line line line line line line markers\nlinelineobjectslineobjectslineobjectslineobjectslineobjectslineobjectsmarkers = []\n\n# Create a list of line line line line line line line line marker sizes\nlinelineobjectslineobjectslineobjectslineobjectslineobjectslineobjectsmarkersizes = []\n\n# Create a list of line line line line line line line line marker edge colors\nlinelineobjectslineobjectslineobjectslineobjectslineobjectslineobjectsmarkeredgecolors = []\n\n# Create a list of line line line line line line line line marker face colors\nlinelineobjectslineobjectslineobjectslineobjectslineobjectslineobjectsmarkerfacecolors = []\n\n# Create a list of line line line line line line line line line properties\nlinelineobjectslineobjectslineobjectslineobjectslineobjectslineobjectslineprops = []\n\n# Create a list of line line line line line line line line line objects\nlinelineobjectslineobjectslineobjectslineobjectslineobjectslineobjectslineobjects = []\n\n# Create a list of line line line line line line line line line labels\nlinelineobjectslineobjectslineobjectslineobjectslineobjectslineobjectslineobjectslabels = []\n\n# Create a list of line line line line line line line line line colors\nlinelineobjectslineobjectslineobjectslineobjectslineobjectslineobjectslineobjectscolors = []\n\n# Create a list of line line line line line line line line line line styles\nlinelineobjectslineobjectslineobjectslineobjectslineobjectslineobjectslineobjectslinestyles = []\n\n# Create a list of line line line line line line line line line line widths\nlinelineobjectslineobjectslineobjectslineobjectslineobjectslineobjectslineobjectslinewidths = []\n\n# Create a list of line line line line line line line line line markers\nlinelineobjectslineobjectslineobjectslineobjectslineobjectslineobjectslineobjectsmarkers = []\n\n# Create a list of line line line line line line line line line marker sizes\nlinelineobjectslineobjectslineobjectslineobjectslineobjectslineobjectslineobjectsmarkersizes = []\n\n# Create a list of line line line line line line line line line marker edge colors\nlinelineobjectslineobjectslineobjectslineobjectslineobjectslineobjectslineobjectsmarkeredgecolors = []\n\n# Create a list of line line line line line line line line line marker face colors\nlinelineobjectslineobjectslineobjectslineobjectslineobjectslineobjectslineobjectsmarkerfacecolors = []\n\n# Create a list of line line line line line line line line line line properties\nlinelineobjectslineobjectslineobjectslineobjectslineobjectslineobjectslineobjectslineprops = []\n\n# Create a list of line line line line line line line line line line objects\nlinelineobjectslineobjectslineobjectslineobjectslineobjectslineobjectslineobjectslineobjects = []\n\n# Create a list of line line line line line line line line line line labels\nlinelineobjectslineobjectslineobjectslineobjectslineobjectslineobjectslineobjectslineobjectslabels = []\n\n# Create a list of line line line line line line line line line line colors\nlinelineobjectslineobjectslineobjectslineobjectslineobjectslineobjectslineobjectslineobjectscolors = []\n\n# Create a list of line line line line line line line line line line line styles\nlinelineobjectslineobjectslineobjectslineobjectslineobjectslineobjectslineobjectslineobjectslinestyles = []\n\n# Create a list of line line line line line line line line line line line widths\nlinelineobjectslineobjectslineobjectslineobjectslineobjectslineobjectslineobjectslineobjectslinewidths = []\n\n# Create a list of line line line line line line line line line line markers\nlinelineobjectslineobjectslineobjectslineobjectslineobjectslineobjectslineobjectslineobjectsmarkers = []\n\n# Create a list of line line line line line line line line line line marker sizes\nlinelineobjectslineobjectslineobjectslineobjectslineobjectslineobjectslineobjectslineobjectsmarkersizes = []\n\n# Create a list of line line line line line line line line line line marker edge colors\nlinelineobjectslineobjectslineobjectslineobjectslineobjectslineobjectslineobjectslineobjectsmarkeredgecolors = []\n\n# Create a list of line line line line line line line line line line marker face colors\nlinelineobjectslineobjectslineobjectslineobjectslineobjectslineobjectslineobjectslineobjectsmarkerfacecolors = []\n\n# Create a list of line line line line line line line line line line line properties\nlinelineobjectslineobjectslineobjectslineobjectslineobjectslineobjectslineobjectslineobjectslineprops = []\n\n# Create a list of line line line line line line line line line line line objects\nlinelineobjectslineobjectslineobjectslineobjectslineobjectslineobjectslineobjectslineobjectslineobjects = []\n\n# Create a list of line line line line line line line line line line line labels\nlinelineobjectslineobjectslineobjectslineobjectslineobjectslineobjectslineobjectslineobjectslineobjectslabels = []\n\n# Create a list of line line line line line line line line line line line colors\nlinelineobjectslineobjectslineobjectslineobjectslineobjectslineobjectslineobjectslineobjectslineobjectscolors = []\n\n# Create a list of line line line line line line line line line line line line styles\nlinelineobjectslineobjectslineobjectslineobjectslineobjectslineobjectslineobjectslineobjectslineobjectslinestyles = []\n\n# Create a list of line line line line line line line line line line line line widths\nlinelineobjectslineobjectslineobjectslineobjectslineobjectslineobjectslineobjectslineobjectslineobjectslinewidths = []\n\n# Create a list of line line line line line line line line line line line markers\nlinelineobjectslineobjectslineobjectslineobjectslineobjectslineobjectslineobjectslineobjectslineobjectsmarkers = []\n\n# Create a list of line line line line line line line line line line line marker sizes\nlinelineobjectslineobjectslineobjectslineobjectslineobjectslineobjectslineobjectslineobjectslineobjectsmarkersizes = []\n\n# Create a list of line line line line line line line line line line line marker edge colors\nlinelineobjectslineobjectslineobjectslineobjectslineobjectslineobjectslineobjectslineobjectslineobjectsmarkeredgecolors = []\n\n# Create a list of line line line line line line line line line line line marker face colors\nlinelineobjectslineobjectslineobjectslineobjectslineobjectslineobjectslineobjectslineobjectslineobjectsmarkerfacecolors = []\n\n# Create a list of line line line line line line line line line line line line properties\nlinelineobjectslineobjectslineobjectslineobjectslineobjectslineobjectslineobjectslineobjectslineobjectslineprops = []\n\n# Create a list of line line line line line line line line line line line line objects\nlinelineobjectslineobjectslineobjectslineobjectslineobjectslineobjectslineobjectslineobjectslineobjectslineobjects = []\n\n# Create a list of line line line line line line line line line line line line labels\nlinelineobjectslineobjectslineobjectslineobjectslineobjectslineobjectslineobjectslineobjectslineobjectslineobjectslabels = []\n\n# Create a list of line line line line line line line line line line line line colors\nlinelineobjectslineobjectslineobjectslineobjectslineobjectslineobjectslineobjectslineobjectslineobjectslineobjectscolors = []\n\n# Create a list of line line line line line line line line line line line line line styles\nlinelineobjectslineobjectslineobjectslineobjectslineobjectslineobjectslineobjectslineobjectslineobjectslineobject"}
{"file": "dataset/ori_500/line_76.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis for the first graph\nfig, ax = plt.subplots(figsize=(8.0, 12.0))\nax.set_title('Performance of Model X')\nax.set_xlabel('Iteration')\nax.set_ylabel('Score')\n\n# Plot the data\nax.plot([1, 2, 3, 4, 5, 6, 7, 8, 9], [90, 92, 95, 93, 91, 94, 92, 95, 93], 'r-')\nax.plot([1, 2, 3, 4, 5, 6, 7, 8, 9], [85, 87, 90, 88, 86, 89, 87, 90, 88], 'g-')\nax.plot([1, 2, 3, 4, 5, 6, 7, 8, 9], [80, 82, 85, 83, 81, 84, 82, 85, 83], 'b-')\n\n# Add the legend\nax.legend(['Config A - Model X', 'Config B - Model X', 'Config C - Model X'])\n\n# Add the red rectangle\nrect = plt.Rectangle((0, 0), 1, 1, color='red')\nax.add_patch(rect)\n\n# Add the green rectangle\nrect = plt.Rectangle((0, 0), 1, 1, color='green')\nax.add_patch(rect)\n\n# Add the blue rectangle\nrect = plt.Rectangle((0, 0), 1, 1, color='blue')\nax.add_patch(rect)\n\n# Add the red circle\ncircle = plt.Circle((0, 0), 0.5, color='red')\nax.add_artist(circle)\n\n# Add the green circle\ncircle = plt.Circle((0, 0), 0.5, color='green')\nax.add_artist(circle)\n\n# Add the blue circle\ncircle = plt.Circle((0, 0), 0.5, color='blue')\nax.add_artist(circle)\n\n# Add the red triangle\ntriangle = plt.Polygon([[0, 0], [1, 0], [0.5, 1]], color='red')\nax.add_patch(triangle)\n\n# Add the green triangle\ntriangle = plt.Polygon([[0, 0], [1, 0], [0.5, 1]], color='green')\nax.add_patch(triangle)\n\n# Add the blue triangle\ntriangle = plt.Polygon([[0, 0], [1, 0], [0.5, 1]], color='blue')\nax.add_patch(triangle)\n\n# Add the red square\nsquare = plt.Rectangle((0, 0), 1, 1, color='red')\nax.add_patch(square)\n\n# Add the green square\nsquare = plt.Rectangle((0, 0), 1, 1, color='green')\nax.add_patch(square)\n\n# Add the blue square\nsquare = plt.Rectangle((0, 0), 1, 1, color='blue')\nax.add_patch(square)\n\n# Add the red star\nstar = plt.Polygon([[0, 0], [1, 0], [0.5, 1], [0, 0.5], [0.25, 0.75], [0.75, 0.75]], color='red')\nax.add_patch(star)\n\n# Add the green star\nstar = plt.Polygon([[0, 0], [1, 0], [0.5, 1], [0, 0.5], [0.25, 0.75], [0.75, 0.75]], color='green')\nax.add_patch(star)\n\n# Add the blue star\nstar = plt.Polygon([[0, 0], [1, 0], [0.5, 1], [0, 0.5], [0.25, 0.75], [0.75, 0.75]], color='blue')\nax.add_patch(star)\n\n# Add the red diamond\ndiamond = plt.Polygon([[0, 0], [1, 0], [1, 1], [0, 1], [0, 0]], color='red')\nax.add_patch(diamond)\n\n# Add the green diamond\ndiamond = plt.Polygon([[0, 0], [1, 0], [1, 1], [0, 1], [0, 0]], color='green')\nax.add_patch(diamond)\n\n# Add the blue diamond\ndiamond = plt.Polygon([[0, 0], [1, 0], [1, 1], [0, 1], [0, 0]], color='blue')\nax.add_patch(diamond)\n\n# Add the red heart\nheart = plt.Polygon([[0, 0], [1, 0], [0.5, 1], [0, 0.5], [0.25, 0.75], [0.75, 0.75]], color='red')\nax.add_patch(heart)\n\n# Add the green heart\nheart = plt.Polygon([[0, 0], [1, 0], [0.5, 1], [0, 0.5], [0.25, 0.75], [0.75, 0.75]], color='green')\nax.add_patch(heart)\n\n# Add the blue heart\nheart = plt.Polygon([[0, 0], [1, 0], [0.5, 1], [0, 0.5], [0.25, 0.75], [0.75, 0.75]], color='blue')\nax.add_patch(heart)\n\n# Add the red cross\ncross = plt.Polygon([[0, 0], [1, 0], [0.5, 1], [0, 0.5], [0.25, 0.75], [0.75, 0.75]], color='red')\nax.add_patch(cross)\n\n# Add the green cross\ncross = plt.Polygon([[0, 0], [1, 0], [0.5, 1], [0, 0.5], [0.25, 0.75], [0.75, 0.75]], color='green')\nax.add_patch(cross)\n\n# Add the blue cross\ncross = plt.Polygon([[0, 0], [1, 0], [0.5, 1], [0, 0.5], [0.25, 0.75], [0.75, 0.75]], color='blue')\nax.add_patch(cross)\n\n# Add the red plus\nplus = plt.Polygon([[0, 0], [1, 0], [0.5, 1], [0, 0.5], [0.25, 0.75], [0.75, 0.75]], color='red')\nax.add_patch(plus)\n\n# Add the green plus\nplus = plt.Polygon([[0, 0], [1, 0], [0.5, 1], [0, 0.5], [0.25, 0.75], [0.75, 0.75]], color='green')\nax.add_patch(plus)\n\n# Add the blue plus\nplus = plt.Polygon([[0, 0], [1, 0], [0.5, 1], [0, 0.5], [0.25, 0.75], [0.75, 0.75]], color='blue')\nax.add_patch(plus)\n\n# Add the red minus\nminus = plt.Polygon([[0, 0], [1, 0], [0.5, 1], [0, 0.5], [0.25, 0.75], [0.75, 0.75]], color='red')\nax.add_patch(minus)\n\n# Add the green minus\nminus = plt.Polygon([[0, 0], [1, 0], [0.5, 1], [0, 0.5], [0.25, 0.75], [0.75, 0.75]], color='green')\nax.add_patch(minus)\n\n# Add the blue minus\nminus = plt.Polygon([[0, 0], [1, 0], [0.5, 1], [0, 0.5], [0.25, 0.75], [0.75, 0.75]], color='blue')\nax.add_patch(minus)\n\n# Add the red triangle\ntriangle = plt.Polygon([[0, 0], [1, 0], [0.5, 1]], color='red')\nax.add_patch(triangle)\n\n# Add the green triangle\ntriangle = plt.Polygon([[0, 0], [1, 0], [0.5, 1]], color='green')\nax.add_patch(triangle)\n\n# Add the blue triangle\ntriangle = plt.Polygon([[0, 0], [1, 0], [0.5, 1]], color='blue')\nax.add_patch(triangle)\n\n# Add the red square\nsquare = plt.Rectangle((0, 0), 1, 1, color='red')\nax.add_patch(square)\n\n# Add the green square\nsquare = plt.Rectangle((0, 0), 1, 1, color='green')\nax.add_patch(square)\n\n# Add the blue square\nsquare = plt.Rectangle((0, 0), 1, 1, color='blue')\nax.add_patch(square)\n\n# Add the red star\nstar = plt.Polygon([[0, 0], [1, 0], [0.5, 1], [0, 0.5], [0.25, 0.75], [0.75, 0.75]], color='red')\nax.add_patch(star)\n\n# Add the green star\nstar = plt.Polygon([[0, 0], [1, 0], [0.5, 1], [0, 0.5], [0.25, 0.75], [0.75, 0.75]], color='green')\nax.add_patch(star)\n\n# Add the blue star\nstar = plt.Polygon([[0, 0], [1, 0], [0.5, 1], [0, 0.5], [0.25, 0.75], [0.75, 0.75]], color='blue')\nax.add_patch(star)\n\n# Add the red diamond\ndiamond = plt.Polygon([[0, 0], [1, 0], [1, 1], [0, 1], [0, 0]], color='red')\nax.add_patch(diamond)\n\n# Add the green diamond\ndiamond = plt.Polygon([[0, 0], [1, 0], [1, 1], [0, 1], [0, 0]], color='green')\nax.add_patch(diamond)\n\n# Add the blue diamond\ndiamond = plt.Polygon([[0, 0], [1, 0], [1, 1], [0, 1], [0, 0]], color='blue')\nax.add_patch(diamond)\n\n# Add the red heart\nheart = plt.Polygon([[0, 0], [1, 0], [0.5, 1], [0, 0.5], [0.25, 0.75], [0.75, 0.75]], color='red')\nax.add_patch(heart)\n\n# Add the green heart\nheart = plt.Polygon([[0, 0], [1, 0], [0.5, 1], [0, 0.5], [0.25, 0.75], [0.75, 0.75]], color='green')\nax.add_patch(heart)\n\n# Add the blue heart\nheart = plt.Polygon([[0, 0], [1, 0], [0.5, 1], [0, 0.5], [0.25, 0.75], [0.75, 0.75]], color='blue')\nax.add_patch(heart)\n\n# Add the red cross\ncross = plt.Polygon([[0, 0], [1, 0], [0.5, 1], [0, 0.5], [0.25, 0.75], [0.75, 0.75]], color='red')\nax.add_patch(cross)\n\n# Add the green cross\ncross = plt.Polygon([[0, 0], [1, 0], [0.5, 1], [0, 0.5], [0.25, 0.75], [0.75, 0.75]], color='green')\nax.add_patch(cross)\n\n# Add the blue cross\ncross = plt.Polygon([[0, 0], [1, 0], [0.5, 1], [0, 0.5], [0.25, 0.75], [0.75, 0.75]], color='blue')\nax.add_patch(cross)\n\n# Add the red plus\nplus = plt.Polygon([[0, 0], [1, 0], [0.5, 1], [0, 0.5], [0.25, 0.75], [0.75, 0.75]], color='red')\nax.add_patch(plus)\n\n# Add the green plus\nplus = plt.Polygon([[0, 0], [1, 0], [0.5, 1], [0, 0.5], [0.25, 0.75], [0.75, 0.75]], color='green')\nax.add_patch(plus)\n\n# Add the blue plus\nplus = plt.Polygon([[0, 0], [1, 0], [0.5, 1], [0, 0.5], [0.25, 0.75], [0.75, 0.75]], color='blue')\nax.add_patch(plus)\n\n# Add the red minus\nminus = plt.Polygon([[0, 0], [1, 0], [0.5, 1], [0, 0.5], [0.25, 0.75], [0.75, 0.75]], color='red')\nax.add_patch(minus)\n\n# Add the green minus\nminus = plt.Polygon([[0, 0], [1, 0], [0.5, 1], [0, 0.5], [0.25, 0.75], [0.75, 0.75]], color='green')\nax.add_patch(minus)\n\n# Add the blue minus\nminus = plt.Polygon([[0, 0], [1, 0], [0.5, 1], [0, 0.5], [0.25, 0.75], [0.75, 0.75]], color='blue')\nax.add_patch(minus)\n\n# Add the red triangle\ntriangle = plt.Polygon([[0, 0], [1, 0], [0.5, 1]], color='red')\nax.add_patch(triangle)\n\n# Add the green triangle\ntriangle = plt.Polygon([[0, 0], [1, 0], [0.5, 1]], color='green')\nax.add_patch(triangle)\n\n# Add the blue triangle\ntriangle = plt.Polygon([[0, 0], [1, 0], [0.5, 1]], color='blue')\nax.add_patch(triangle)\n\n# Add the red square\nsquare = plt.Rectangle((0, 0), 1, 1, color='red')\nax.add_patch(square)\n\n# Add the green square\nsquare = plt.Rectangle((0, 0), 1, 1, color='green')\nax.add_patch(square)\n\n# Add the blue square\nsquare = plt.Rectangle((0, 0), 1, 1, color='blue')\nax.add_patch(square)\n\n# Add the red star\nstar = plt.Polygon([[0, 0], [1, 0], [0.5, 1], [0, 0.5], [0.25, 0.75], [0.75, 0.75]], color='red')\nax.add_patch(star)\n\n# Add the green star\nstar = plt.Polygon([[0, 0], [1, 0], [0.5, 1], [0, 0.5], [0.25, 0.75], [0.75, 0.75]], color='green')\nax.add_patch(star)\n\n# Add the blue star\nstar = plt.Polygon([[0, 0], [1, 0], [0.5, 1], [0, 0.5], [0.25, 0.75], [0.75, 0.75]], color='blue')\nax.add_patch(star)\n\n# Add the red diamond\ndiamond = plt.Polygon([[0, 0], [1, 0], [1, 1], [0, 1], [0, 0]], color='red')\nax.add_patch(diamond)\n\n# Add the green diamond\ndiamond = plt.Polygon([[0, 0], [1, 0], [1, 1], [0, 1], [0, 0]], color='green')\nax.add_patch(diamond)\n\n# Add the blue diamond\ndiamond = plt.Polygon([[0, 0], [1, 0], [1, 1], [0, 1], [0, 0]], color='blue')\nax.add_patch(diamond)\n\n# Add the red heart\nheart = plt.Polygon([[0, 0], [1, 0], [0.5, 1], [0, 0.5], [0.25, 0.75], [0.75, 0.75]], color='red')\nax.add_patch(heart)\n\n# Add the green heart\nheart = plt.Polygon([[0, 0], [1, 0], [0"}
{"file": "dataset/ori_500/line_77.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\nfig, axs = plt.subplots(3, 1, figsize=(8.0, 12.0))\n\n# Performance of Llama\naxs[0].plot([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [90, 92, 91, 93, 94, 95, 96, 97, 98, 99], 'r--', label='Llama')\naxs[0].set_title('Performance of Llama')\naxs[0].legend()\naxs[0].set_xlabel('Iteration')\naxs[0].set_ylabel('Score')\n\n# Performance of Falcon\naxs[1].plot([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [70, 72, 71, 73, 74, 75, 76, 77, 78, 79], 'g--', label='Falcon')\naxs[1].set_title('Performance of Falcon')\naxs[1].legend()\naxs[1].set_xlabel('Iteration')\naxs[1].set_ylabel('Score')\n\n# Performance of Qwen\naxs[2].plot([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [80, 82, 81, 83, 84, 85, 86, 87, 88, 89], 'b--', label='Qwen')\naxs[2].set_title('Performance of Qwen')\naxs[2].legend()\naxs[2].set_xlabel('Iteration')\naxs[2].set_ylabel('Score')\n\n# Configurations\nfor ax in axs:\n    for i in range(1, 11):\n        ax.text(i, 95, f'Config A - Llama', color='pink', ha='center', va='bottom')\n        ax.text(i, 94, f'Config B - Llama', color='lightgreen', ha='center', va='bottom')\n        ax.text(i, 93, f'Config C - Llama', color='skyblue', ha='center', va='bottom')\n        ax.text(i, 75, f'Config A - Falcon', color='pink', ha='center', va='bottom')\n        ax.text(i, 74, f'Config B - Falcon', color='lightgreen', ha='center', va='bottom')\n        ax.text(i, 73, f'Config C - Falcon', color='skyblue', ha='center', va='bottom')\n        ax.text(i, 65, f'Config A - Qwen', color='pink', ha='center', va='bottom')\n        ax.text(i, 64, f'Config B - Qwen', color='lightgreen', ha='center', va='bottom')\n        ax.text(i, 63, f'Config C - Qwen', color='skyblue', ha='center', va='bottom')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/line_78.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(10.0, 10.0))\n\n# Set the background color of the plot\nax.set_facecolor('lightgrey')\n\n# Add a title to the plot\nax.set_title('Sales Growth Over Time')\n\n# Add a legend to the plot\nax.legend()\n\n# Add a grid to the plot\nax.grid(True)\n\n# Add a scatter plot to the plot\nax.scatter([1, 2, 3, 4], [1.5, 1.8, 2.2, 2.5], color='red', label='Brand A Sales Growth')\n\n# Add a line plot to the plot\nax.plot([1, 2, 3, 4], [1.2, 1.6, 1.9, 2.1], color='blue', label='Brand B Sales Growth')\n\n# Add a bar chart to the plot\nax.bar([1, 2, 3, 4], [1.7, 1.9, 2.1, 2.3], color='green', label='Brand C Sales Growth')\n\n# Add a pie chart to the plot\nax.pie([1.5, 1.8, 2.2, 2.5], colors=['purple', 'orange', 'cyan', 'magenta'], labels=['Brand D Sales Growth', 'Brand E Sales Growth', 'Brand F Sales Growth', 'Brand G Sales Growth'])\n\n# Add a histogram to the plot\nax.hist([1.5, 1.8, 2.2, 2.5], bins=5, color='yellow', label='Brand H Sales Growth')\n\n# Add a box plot to the plot\nax.boxplot([1.5, 1.8, 2.2, 2.5], vert=False, patch_artist=True, labels=['Brand I Sales Growth'])\n\n# Add a violin plot to the plot\nax.violinplot([1.5, 1.8, 2.2, 2.5], showmeans=True, showmedians=True, showextrema=True, labels=['Brand J Sales Growth'])\n\n# Add a heatmap to the plot\nax.imshow([[1.5, 1.8, 2.2, 2.5], [1.5, 1.8, 2.2, 2.5]], cmap='hot', interpolation='nearest')\n\n# Add a contour plot to the plot\nx = y = np.linspace(-5, 5, 100)\nX, Y = np.meshgrid(x, y)\nZ = np.sin(np.sqrt(X**2 + Y**2))\nCS = ax.contourf(X, Y, Z, locator=ticker.LogLocator(), cmap='coolwarm')\n\n# Add a contour plot with a colorbar to the plot\ncbar = fig.colorbar(CS)\n\n# Add a scatter plot with a colorbar to the plot\nsc = ax.scatter([1, 2, 3, 4], [1.5, 1.8, 2.2, 2.5], c=[1.5, 1.8, 2.2, 2.5], cmap='coolwarm')\ncbar = fig.colorbar(sc)\n\n# Add a scatter plot with a colorbar and a legend to the plot\nsc = ax.scatter([1, 2, 3, 4], [1.5, 1.8, 2.2, 2.5], c=[1.5, 1.8, 2.2, 2.5], cmap='coolwarm', label='Brand K Sales Growth')\ncbar = fig.colorbar(sc)\nax.legend()\n\n# Add a scatter plot with a colorbar and a legend and a title to the plot\nsc = ax.scatter([1, 2, 3, 4], [1.5, 1.8, 2.2, 2.5], c=[1.5, 1.8, 2.2, 2.5], cmap='coolwarm', label='Brand L Sales Growth')\ncbar = fig.colorbar(sc)\nax.legend()\nax.set_title('Brand L Sales Growth')\n\n# Add a scatter plot with a colorbar and a legend and a title and a grid to the plot\nsc = ax.scatter([1, 2, 3, 4], [1.5, 1.8, 2.2, 2.5], c=[1.5, 1.8, 2.2, 2.5], cmap='coolwarm', label='Brand M Sales Growth')\ncbar = fig.colorbar(sc)\nax.legend()\nax.set_title('Brand M Sales Growth')\nax.grid(True)\n\n# Add a scatter plot with a colorbar and a legend and a title and a grid and a scatter plot to the plot\nsc = ax.scatter([1, 2, 3, 4], [1.5, 1.8, 2.2, 2.5], c=[1.5, 1.8, 2.2, 2.5], cmap='coolwarm', label='Brand N Sales Growth')\ncbar = fig.colorbar(sc)\nax.legend()\nax.set_title('Brand N Sales Growth')\nax.grid(True)\nax.scatter([1, 2, 3, 4], [1.5, 1.8, 2.2, 2.5], c=[1.5, 1.8, 2.2, 2.5], cmap='coolwarm', label='Brand O Sales Growth')\n\n# Add a scatter plot with a colorbar and a legend and a title and a grid and a scatter plot and a line plot to the plot\nsc = ax.scatter([1, 2, 3, 4], [1.5, 1.8, 2.2, 2.5], c=[1.5, 1.8, 2.2, 2.5], cmap='coolwarm', label='Brand P Sales Growth')\ncbar = fig.colorbar(sc)\nax.legend()\nax.set_title('Brand P Sales Growth')\nax.grid(True)\nax.scatter([1, 2, 3, 4], [1.5, 1.8, 2.2, 2.5], c=[1.5, 1.8, 2.2, 2.5], cmap='coolwarm', label='Brand Q Sales Growth')\nax.plot([1, 2, 3, 4], [1.5, 1.8, 2.2, 2.5], color='blue', label='Brand R Sales Growth')\n\n# Add a scatter plot with a colorbar and a legend and a title and a grid and a scatter plot and a line plot and a bar chart to the plot\nsc = ax.scatter([1, 2, 3, 4], [1.5, 1.8, 2.2, 2.5], c=[1.5, 1.8, 2.2, 2.5], cmap='coolwarm', label='Brand S Sales Growth')\ncbar = fig.colorbar(sc)\nax.legend()\nax.set_title('Brand S Sales Growth')\nax.grid(True)\nax.scatter([1, 2, 3, 4], [1.5, 1.8, 2.2, 2.5], c=[1.5, 1.8, 2.2, 2.5], cmap='coolwarm', label='Brand T Sales Growth')\nax.plot([1, 2, 3, 4], [1.5, 1.8, 2.2, 2.5], color='blue', label='Brand U Sales Growth')\nax.bar([1, 2, 3, 4], [1.5, 1.8, 2.2, 2.5], color='green', label='Brand V Sales Growth')\n\n# Add a scatter plot with a colorbar and a legend and a title and a grid and a scatter plot and a line plot and a bar chart and a pie chart to the plot\nsc = ax.scatter([1, 2, 3, 4], [1.5, 1.8, 2.2, 2.5], c=[1.5, 1.8, 2.2, 2.5], cmap='coolwarm', label='Brand W Sales Growth')\ncbar = fig.colorbar(sc)\nax.legend()\nax.set_title('Brand W Sales Growth')\nax.grid(True)\nax.scatter([1, 2, 3, 4], [1.5, 1.8, 2.2, 2.5], c=[1.5, 1.8, 2.2, 2.5], cmap='coolwarm', label='Brand X Sales Growth')\nax.plot([1, 2, 3, 4], [1.5, 1.8, 2.2, 2.5], color='blue', label='Brand Y Sales Growth')\nax.bar([1, 2, 3, 4], [1.5, 1.8, 2.2, 2.5], color='green', label='Brand Z Sales Growth')\nax.pie([1.5, 1.8, 2.2, 2.5], colors=['purple', 'orange', 'cyan', 'magenta'], labels=['Brand AA Sales Growth', 'Brand AB Sales Growth', 'Brand AC Sales Growth', 'Brand AD Sales Growth'])\n\n# Add a scatter plot with a colorbar and a legend and a title and a grid and a scatter plot and a line plot and a bar chart and a pie chart and a histogram to the plot\nsc = ax.scatter([1, 2, 3, 4], [1.5, 1.8, 2.2, 2.5], c=[1.5, 1.8, 2.2, 2.5], cmap='coolwarm', label='Brand AE Sales Growth')\ncbar = fig.colorbar(sc)\nax.legend()\nax.set_title('Brand AE Sales Growth')\nax.grid(True)\nax.scatter([1, 2, 3, 4], [1.5, 1.8, 2.2, 2.5], c=[1.5, 1.8, 2.2, 2.5], cmap='coolwarm', label='Brand AF Sales Growth')\nax.plot([1, 2, 3, 4], [1.5, 1.8, 2.2, 2.5], color='blue', label='Brand AG Sales Growth')\nax.bar([1, 2, 3, 4], [1.5, 1.8, 2.2, 2.5], color='green', label='Brand AH Sales Growth')\nax.pie([1.5, 1.8, 2.2, 2.5], colors=['purple', 'orange', 'cyan', 'magenta'], labels=['Brand AI Sales Growth', 'Brand AJ Sales Growth', 'Brand AK Sales Growth', 'Brand AL Sales Growth'])\nax.hist([1.5, 1.8, 2.2, 2.5], bins=5, color='yellow', label='Brand AM Sales Growth')\n\n# Add a scatter plot with a colorbar and a legend and a title and a grid and a scatter plot and a line plot and a bar chart and a pie chart and a histogram and a box plot to the plot\nsc = ax.scatter([1, 2, 3, 4], [1.5, 1.8, 2.2, 2.5], c=[1.5, 1.8, 2.2, 2.5], cmap='coolwarm', label='Brand AN Sales Growth')\ncbar = fig.colorbar(sc)\nax.legend()\nax.set_title('Brand AN Sales Growth')\nax.grid(True)\nax.scatter([1, 2, 3, 4], [1.5, 1.8, 2.2, 2.5], c=[1.5, 1.8, 2.2, 2.5], cmap='coolwarm', label='Brand AO Sales Growth')\nax.plot([1, 2, 3, 4], [1.5, 1.8, 2.2, 2.5], color='blue', label='Brand AP Sales Growth')\nax.bar([1, 2, 3, 4], [1.5, 1.8, 2.2, 2.5], color='green', label='Brand AQ Sales Growth')\nax.pie([1.5, 1.8, 2.2, 2.5], colors=['purple', 'orange', 'cyan', 'magenta'], labels=['Brand AR Sales Growth', 'Brand AS Sales Growth', 'Brand AT Sales Growth', 'Brand AU Sales Growth'])\nax.hist([1.5, 1.8, 2.2, 2.5], bins=5, color='yellow', label='Brand AV Sales Growth')\nax.boxplot([1.5, 1.8, 2.2, 2.5], vert=False, patch_artist=True, labels=['Brand AW Sales Growth'])\n\n# Add a scatter plot with a colorbar and a legend and a title and a grid and a scatter plot and a line plot and a bar chart and a pie chart and a histogram and a box plot and a violin plot to the plot\nsc = ax.scatter([1, 2, 3, 4], [1.5, 1.8, 2.2, 2.5], c=[1.5, 1.8, 2.2, 2.5], cmap='coolwarm', label='Brand AX Sales Growth')\ncbar = fig.colorbar(sc)\nax.legend()\nax.set_title('Brand AX Sales Growth')\nax.grid(True)\nax.scatter([1, 2, 3, 4], [1.5, 1.8, 2.2, 2.5], c=[1.5, 1.8, 2.2, 2.5], cmap='coolwarm', label='Brand AY Sales Growth')\nax.plot([1, 2, 3, 4], [1.5, 1.8, 2.2, 2.5], color='blue', label='Brand AZ Sales Growth')\nax.bar([1, 2, 3, 4], [1.5, 1.8, 2.2, 2.5], color='green', label='Brand BA Sales Growth')\nax.pie([1.5, 1.8, 2.2, 2.5], colors=['purple', 'orange', 'cyan', 'magenta'], labels=['Brand BB Sales Growth', 'Brand BC Sales Growth', 'Brand BD Sales Growth', 'Brand BE Sales Growth'])\nax.hist([1.5, 1.8, 2.2, 2.5], bins=5, color='yellow', label='Brand BF Sales Growth')\nax.boxplot([1.5, 1.8, 2.2, 2.5], vert=False, patch_artist=True, labels=['Brand BG Sales Growth'])\nax.violinplot([1.5, 1.8, 2.2, 2.5], showmeans=True, showmedians=True, showextrema=True, labels=['Brand BH Sales Growth'])\n\n# Add a scatter plot with a colorbar and a legend and a title and a grid and a scatter plot and a line plot and a bar chart and a pie chart and a histogram and a box plot and a violin plot and a heatmap to the plot\nsc = ax.scatter([1, 2, 3, 4], [1.5, 1.8, 2.2, 2.5], c=[1.5, 1.8, 2.2, 2.5], cmap='coolwarm', label='Brand BI Sales Growth')\ncbar = fig.colorbar(sc)\nax.legend()\nax.set_title('Brand BI Sales Growth')\nax.grid(True)\nax.scatter([1, 2, 3, 4], [1.5, 1.8, 2.2, 2.5], c=[1.5, 1.8, 2.2, 2.5], cmap='coolwarm', label='Brand BJ Sales Growth')\nax.plot([1, 2, 3, 4], [1.5, 1.8, 2.2, 2.5], color='blue', label='Brand BK Sales Growth')\nax.bar([1, 2, 3, 4], [1.5, 1.8, 2.2, 2.5], color='green', label='Brand BL Sales Growth')\nax.pie([1.5, 1.8, 2.2, 2.5], colors=['purple', 'orange', 'cyan', 'magenta'], labels=['Brand BM Sales Growth', 'Brand BN Sales Growth', 'Brand BO Sales Growth', 'Brand BP Sales Growth'])\nax.hist([1.5, 1.8, 2.2, 2.5], bins=5, color='yellow', label='Brand BQ Sales Growth')\nax.boxplot([1.5, 1.8, 2.2, 2.5], vert=False, patch_artist=True, labels=['Brand BR Sales Growth'])\nax.violinplot([1.5, 1.8, 2.2, 2.5], showmeans=True, showmedians=True, showextrema=True, labels=['Brand BS Sales Growth'])\nax.imshow([[1.5, 1.8, 2.2, 2.5], [1.5, 1.8, 2.2, 2.5]], cmap='hot', interpolation='nearest')\n\n# Add a scatter plot with a colorbar and a legend and a title and a grid and a scatter plot and a line plot and a bar chart and a pie chart and a histogram and a box plot and a violin plot and a heatmap and a contour plot to the plot\nsc = ax.scatter([1, 2, 3, 4], [1.5, 1.8, 2.2, 2.5], c=[1.5, 1.8, 2.2, 2.5], cmap='coolwarm', label='Brand BT Sales Growth')\ncbar = fig.colorbar(sc)\nax.legend()\nax.set_title('Brand BT Sales Growth')\nax.grid(True)\nax.scatter([1, 2, 3, 4], [1.5, 1.8, 2.2, 2.5], c=[1.5,"}
{"file": "dataset/ori_500/line_79.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and a set of subplots\nfig, axs = plt.subplots(2, 3, figsize=(18.0, 4.0))\n\n# Set the title for each subplot\naxs[0, 0].set_title('Traffic Performance')\naxs[0, 1].set_title('ETMm2 Performance')\naxs[0, 2].set_title('ETTh2 Performance')\naxs[1, 0].set_title('ECL Performance')\naxs[1, 1].set_title('ECL Performance')\naxs[1, 2].set_title('ECL Performance')\n\n# Create a scatter plot for each subplot\naxs[0, 0].scatter([100, 300, 500, 700], [1.2, 1.1, 1.0, 0.9], color='blue')\naxs[0, 1].scatter([100, 300, 500, 700], [1.2, 1.1, 1.0, 0.9], color='orange')\naxs[0, 2].scatter([100, 300, 500, 700], [1.2, 1.1, 1.0, 0.9], color='blue')\naxs[1, 0].scatter([100, 300, 500, 700], [1.2, 1.1, 1.0, 0.9], color='orange')\naxs[1, 1].scatter([100, 300, 500, 700], [1.2, 1.1, 1.0, 0.9], color='blue')\naxs[1, 2].scatter([100, 300, 500, 700], [1.2, 1.1, 1.0, 0.9], color='orange')\n\n# Add a legend to the first subplot\naxs[0, 0].legend(['ECL Run 1', 'ECL Run 2'], loc='upper left')\n\n# Add a grid to the subplots\nfor ax in axs.flat:\n    ax.grid(True)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Relaxation Level')\n\n# Set the x-axis label\nax.set_xlabel('Driving Style')\n\n# Set the y-axis label\nax.set_ylabel('Relaxation Level')\n\n# Define the data for the plot\ndriving_styles = ['Passive', 'Racing', 'Replay', 'Sportive']\nrelaxation_levels = [14, 12, 10, 8]\n\n# Plot the data\nax.plot(driving_styles, relaxation_levels, 'ro-')\n\n# Add a legend\nax.legend(['Relaxation Level'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_80.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis for the first subplot\nfig1, ax1 = plt.subplots(figsize=(9.0, 6.0))\nax1.plot([1, 2, 3, 4, 5], [20, 25, 30, 35, 40], 'b-')\nax1.set_title('Category A Growth')\nax1.set_xlabel('Phase')\nax1.set_ylabel('Cumulative Value')\n\n# Create a figure and axis for the second subplot\nfig2, ax2 = plt.subplots(figsize=(9.0, 6.0))\nax2.plot([1, 2, 3, 4, 5], [10, 15, 20, 25, 30], 'r-')\nax2.set_title('Category B Growth')\nax2.set_xlabel('Phase')\nax2.set_ylabel('Cumulative Value')\n\n# Create a figure and axis for the third subplot\nfig3, ax3 = plt.subplots(figsize=(9.0, 6.0))\nax3.plot([1, 2, 3, 4, 5], [5, 10, 15, 20, 25], 'g-')\nax3.set_title('Category C Growth')\nax3.set_xlabel('Phase')\nax3.set_ylabel('Cumulative Value')\n\n# Create a figure and axis for the fourth subplot\nfig4, ax4 = plt.subplots(figsize=(9.0, 6.0))\nax4.plot([1, 2, 3, 4, 5], [75, 80, 85, 90, 95], 'y-')\nax4.set_title('Category D Growth')\nax4.set_xlabel('Phase')\nax4.set_ylabel('Cumulative Value')\n\n# Create a figure and axis for the fifth subplot\nfig5, ax5 = plt.subplots(figsize=(9.0, 6.0))\nax5.plot([1, 2, 3, 4, 5], [100, 105, 110, 115, 120], 'm-')\nax5.set_title('Category E Growth')\nax5.set_xlabel('Phase')\nax5.set_ylabel('Cumulative Value')\n\n# Create a figure and axis for the sixth subplot\nfig6, ax6 = plt.subplots(figsize=(9.0, 6.0))\nax6.plot([1, 2, 3, 4, 5], [125, 130, 135, 140, 145], 'c-')\nax6.set_title('Category F Growth')\nax6.set_xlabel('Phase')\nax6.set_ylabel('Cumulative Value')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/line_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(9.0, 6.0))\n\n# Set the x-axis limits\nax.set_xlim(4, 30)\n\n# Set the y-axis limits\nax.set_ylim(10, 15)\n\n# Set the x-axis ticks\nax.set_xticks([4, 6, 10, 20, 30])\n\n# Set the y-axis ticks\nax.set_yticks([10, 12, 14, 15])\n\n# Set the x-axis labels\nax.set_xticklabels(['4\u00d710^0', '6\u00d710^0', '10', '2\u00d710^1', '3\u00d710^1'])\n\n# Set the y-axis labels\nax.set_yticklabels(['10', '12', '14', '15'])\n\n# Set the title of the plot\nax.set_title('Stock Price Prediction')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', labelcolor='blue')\n\n# Set the color of the plot area\nax.set_facecolor('lightgray')\n\n# Set the color of the border\nax.spines['bottom'].set_color('green')\nax.spines['top'].set_color('green')\nax.spines['right'].set_color('green')\nax.spines['left'].set_color('green')\n\n# Set the color of the legend\nax.legend(facecolor='white', edgecolor='black')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'This is a text box', transform=ax.transAxes, fontsize=12,\n        verticalalignment='center', horizontalalignment='center',\n        color='blue', bbox=dict(boxstyle=\"round,pad=0.5\", fc=\"yellow\", ec=\"k\", lw=0.5))\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis for the map\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Create a rectangle for the map\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lightblue'))\n\n# Add text to the map\nax.text(0.5, 0.5, 'Map', ha='center', va='center')\n\n# Create a pie chart for the literacy rate by region\nfig, ax = plt.subplots(figsize=(5, 5))\nlabels = ['North', 'East', 'South', 'West']\nsizes = [35, 25, 20, 20]\ncolors = ['cyan', 'yellow', 'purple', 'orange']\nexplode = (0.1, 0, 0, 0)  # explode 1st slice\n\nax.pie(sizes, explode=explode, labels=labels, colors=colors,\nautopct='%1.1f%%', shadow=True, startangle=140)\n\nax.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\n\n# Add text to the pie chart\nax.text(0.5, 0.5, 'Literacy Rate by Region', ha='center', va='center')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 2.0))\n\n# Set the title of the plot\nax.set_title('Beauty Product Ratings')\n\n# Create a bar chart with random data\nx = np.arange(1, 6)\ny = np.random.rand(5)\nax.bar(x, y)\n\n# Set the x-axis labels\nax.set_xticks(x)\nax.set_xticklabels(['Product 1', 'Product 2', 'Product 3', 'Product 4', 'Product 5'])\n\n# Set the y-axis label\nax.set_ylabel('Rating (out of 5)')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\nengr = [44.15, 44.05, 41.55, 40.90, 40.65, 39.45, 36.70]\nzhang = [44.15, 44.05, 41.55, 40.90, 40.65, 39.45, 36.70]\nrice = [44.15, 44.05, 41.55, 40.90, 40.65, 39.45, 36.70]\nrade = [44.15, 44.05, 41.55, 40.90, 40.65, 39.45, 36.70]\nhendry = [44.15, 44.05, 41.55, 40.90, 40.65, 39.45, 36.70]\naddep = [44.15, 44.05, 41.55, 40.90, 40.65, 39.45, 36.70]\ncarmon = [44.15, 44.05, 41.55, 40.90, 40.65, 39.45, 36.70]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot the data\nax.plot(engr, label='Engrom (M1)')\nax.plot(zhang, label='Zhang (M2)')\nax.plot(rice, label='Rice (M3)')\nax.plot(rade, label='Rade (M4)')\nax.plot(hendry, label='Hendrycs (M5)')\nax.plot(addep, label='Addep. (M6)')\nax.plot(carmon, label='Carmon (M7)')\n\n# Set the title and labels\nax.set_title('Robust Error (%)')\nax.set_xlabel('Time (s)')\nax.set_ylabel('Error (%)')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the plots\nx = np.linspace(0, 90, 100)\ny1 = np.sin(x * np.pi / 45)\ny2 = np.cos(x * np.pi / 45)\ny3 = np.tan(x * np.pi / 45)\n\n# Create a figure and a set of subplots\nfig, axs = plt.subplots(1, 3, figsize=(10, 4))\n\n# Plot the data\naxs[0].plot(x, y1, 'r-')\naxs[0].set_title('VGG16')\naxs[0].set_xlabel('Rotation angle (\u00b0)')\naxs[0].set_ylabel('Accuracy')\n\naxs[1].plot(x, y2, 'g-')\naxs[1].set_title('Resnet101')\naxs[1].set_xlabel('Rotation angle (\u00b0)')\naxs[1].set_ylabel('Accuracy')\n\naxs[2].plot(x, y3, 'b-')\naxs[2].set_title('EfficientNetB0')\naxs[2].set_xlabel('Rotation angle (\u00b0)')\naxs[2].set_ylabel('Accuracy')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Set the colorbar\ncmap = plt.get_cmap('hot')\nnorm = plt.Normalize(vmin=-0.5, vmax=1.5)\nsm = plt.cm.ScalarMappable(cmap=cmap, norm=norm)\nsm.set_array([])\ncbar = fig.colorbar(sm)\n\n# Set the title\nax.set_title('Color Palette')\n\n# Set the x-axis label\nax.set_xlabel('Sensitivity Attribute')\n\n# Set the y-axis label\nax.set_ylabel('Intensity')\n\n# Set the x-axis limits\nax.set_xlim(-0.5, 4.5)\n\n# Set the y-axis limits\nax.set_ylim(0, 1.5)\n\n# Set the x-ticks\nax.set_xticks(np.arange(5))\nax.set_xticklabels(['PaleSkin', 'OvalFace', 'Smiling', 'Attractive', 'Male'])\n\n# Set the y-ticks\nax.set_yticks(np.arange(16))\nax.set_yticklabels(['BrownHair', 'BigLips', 'PointyNose', 'BigNose', 'NoBeard', 'HeavyMakeup', 'PaleSkin', 'OvalFace', 'Smiling', 'Attractive', 'Male', 'BigLips', 'PointyNose', 'BigNose', 'NoBeard', 'HeavyMakeup'])\n\n# Set the grid\nax.grid(True)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the box around the plot\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the text\nax.set_facecolor('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the box around the plot\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the text\nax.set_facecolor('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the box around the plot\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the text\nax.set_facecolor('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the box around the plot\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the text\nax.set_facecolor('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the box around the plot\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the text\nax.set_facecolor('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the box around the plot\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the text\nax.set_facecolor('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the box around the plot\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the text\nax.set_facecolor('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the box around the plot\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the text\nax.set_facecolor('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the box around the plot\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the text\nax.set_facecolor('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the box around the plot\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the text\nax.set_facecolor('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the box around the plot\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the text\nax.set_facecolor('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the box around the plot\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the text\nax.set_facecolor('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the box around the plot\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the text\nax.set_facecolor('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the box around the plot\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the text\nax.set_facecolor('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the box around the plot\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the text\nax.set_facecolor('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the box around the plot\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the text\nax.set_facecolor('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the box around the plot\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the text\nax.set_facecolor('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the box around the plot\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the text\nax.set_facecolor('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the box around the plot\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the text\nax.set_facecolor('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the box around the plot\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the text\nax.set_facecolor('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the box around the plot\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the text\nax.set_facecolor('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the box around the plot\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the text\nax.set_facecolor('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the box around the plot\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the text\nax.set_facecolor('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the box around the plot\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set"}
{"file": "dataset/ori_500/multidiff_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(5.0, 6.0))\n\n# Plot the graph\nx = np.linspace(0, 50, 100)\ny = -2 * x**2 + 100\nax.plot(x, y, 'k-')\n\n# Add a rectangle for the background\nax.add_patch(plt.Rectangle((0, 0), 50, 100, color='lightgrey'))\n\n# Add a circle for the logo\nax.add_patch(plt.Circle((25, 50), 10, color='black'))\n\n# Set the title\nax.set_title('a Token rarity')\n\n# Set the x-axis label\nax.set_xlabel('GPT2Tokenizer rank')\n\n# Set the y-axis label\nax.set_ylabel('Token rarity')\n\n# Create a second subplot\nfig, ax = plt.subplots(figsize=(5.0, 6.0))\n\n# Plot the graph\nx = np.linspace(0, 50, 100)\ny = -2 * x**2 + 100\nax.plot(x, y, 'k-')\n\n# Add a rectangle for the background\nax.add_patch(plt.Rectangle((0, 0), 50, 100, color='lightgrey'))\n\n# Add a circle for the logo\nax.add_patch(plt.Circle((25, 50), 10, color='black'))\n\n# Set the title\nax.set_title('b Length = 20')\n\n# Set the x-axis label\nax.set_xlabel('# of documents')\n\n# Set the y-axis label\nax.set_ylabel('Token rarity')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 4.0))\n\n# Set the background color of the plot\nax.set_facecolor('lightblue')\n\n# Create a bar chart\ncategories = ['Sentiment', 'Toxicity', 'News']\nvalues = [0.35, 0.25, 0.20]\nbars = ax.bar(categories, values, color='darkblue')\n\n# Add labels and title\nax.set_xlabel('Categories')\nax.set_ylabel('Correlation')\nax.set_title('Sentiment Analysis Results')\n\n# Add value labels on top of each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 2), ha='center', va='bottom')\n\n# Create a second subplot for the sentiment analysis results\nsentiment_ax = fig.add_subplot(122)\nsentiment_ax.set_facecolor('lightgrey')\nsentiment_ax.set_title('Sentiment Analysis Results')\n\n# Create a heatmap\nsentiment_data = [\n    [-0.40, 0.14, 0.22, 0.13],\n    [-0.13, -0.03, 0.17, 0.12],\n    [-0.24, 0.05, 0.31, 0.17]\n]\nsentiment_cmap = plt.cm.RdYlGn\nsentiment_heatmap = sentiment_ax.imshow(sentiment_data, cmap=sentiment_cmap)\n\n# Add colorbar\ncbar = fig.colorbar(sentiment_heatmap, ax=sentiment_ax)\ncbar.set_label('Sentiment Score')\n\n# Set the x-axis labels\nsentiment_ax.set_xticks(np.arange(len(categories)))\nsentiment_ax.set_yticks(np.arange(len(categories)))\nsentiment_ax.set_xticklabels(categories)\nsentiment_ax.set_yticklabels(categories)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_16.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(12, 8))\n\n# Set the title of the plot\nax.set_title('Success Rate of Adversarial Circuits')\n\n# Set the x-axis label\nax.set_xlabel('Year')\n\n# Set the y-axis label\nax.set_ylabel('# Successful adv. circuits')\n\n# Set the x-ticks\nx_ticks = ['c1355', 'c1908', 'c2670', 'c3540']\nax.set_xticks(np.arange(len(x_ticks)))\nax.set_xticklabels(x_ticks)\n\n# Set the y-ticks\ny_ticks = np.arange(0, 70, 10)\nax.set_yticks(y_ticks)\n\n# Set the y-limits\nax.set_ylim([0, 70])\n\n# Set the x-limits\nax.set_xlim([-1, len(x_ticks)])\n\n# Set the grid\nax.grid(True)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('lightgray')\n\n# Set the color of the text\nax.set_color_cycle(['blue', 'green', 'red'])\n\n# Set the color of the line\nax.plot([0, 1, 2, 3], [50, 40, 30, 20], 'r-')\n\n# Set the color of the fill\nax.fill_between([0, 1, 2, 3], [50, 40, 30, 20], [60, 50, 40, 30], color='red', alpha=0.5)\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Upper success threshold', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=12, color='red')\n\n# Set the color of the text\nax.text(0.5, 0.45, 'Lower success threshold', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=12, color='red')\n\n# Set the color of the text\nax.text(0.5, 0.4, 'O.M.L.A.K.P.A', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=12, color='orange')\n\n# Set the color of the text\nax.text(0.5, 0.35, 'C.O.R.E', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=12, color='orange')\n\n# Set the color of the text\nax.text(0.5, 0.3, 'C.S.T.E.M', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=12, color='orange')\n\n# Set the color of the text\nax.text(0.5, 0.25, 'C.S.T.E.M', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=12, color='orange')\n\n# Set the color of the text\nax.text(0.5, 0.2, 'C.S.T.E.M', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=12, color='orange')\n\n# Set the color of the text\nax.text(0.5, 0.15, 'C.S.T.E.M', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=12, color='orange')\n\n# Set the color of the text\nax.text(0.5, 0.1, 'C.S.T.E.M', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=12, color='orange')\n\n# Set the color of the text\nax.text(0.5, 0.05, 'C.S.T.E.M', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=12, color='orange')\n\n# Set the color of the text\nax.text(0.5, 0.0, 'C.S.T.E.M', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=12, color='orange')\n\n# Set the color of the text\nax.text(0.5, -0.05, 'C.S.T.E.M', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=12, color='orange')\n\n# Set the color of the text\nax.text(0.5, -0.1, 'C.S.T.E.M', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=12, color='orange')\n\n# Set the color of the text\nax.text(0.5, -0.15, 'C.S.T.E.M', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=12, color='orange')\n\n# Set the color of the text\nax.text(0.5, -0.2, 'C.S.T.E.M', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=12, color='orange')\n\n# Set the color of the text\nax.text(0.5, -0.25, 'C.S.T.E.M', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=12, color='orange')\n\n# Set the color of the text\nax.text(0.5, -0.3, 'C.S.T.E.M', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=12, color='orange')\n\n# Set the color of the text\nax.text(0.5, -0.35, 'C.S.T.E.M', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=12, color='orange')\n\n# Set the color of the text\nax.text(0.5, -0.4, 'C.S.T.E.M', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=12, color='orange')\n\n# Set the color of the text\nax.text(0.5, -0.45, 'C.S.T.E.M', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=12, color='orange')\n\n# Set the color of the text\nax.text(0.5, -0.5, 'C.S.T.E.M', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=12, color='orange')\n\n# Set the color of the text\nax.text(0.5, -0.55, 'C.S.T.E.M', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=12, color='orange')\n\n# Set the color of the text\nax.text(0.5, -0.6, 'C.S.T.E.M', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=12, color='orange')\n\n# Set the color of the text\nax.text(0.5, -0.65, 'C.S.T.E.M', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=12, color='orange')\n\n# Set the color of the text\nax.text(0.5, -0.7, 'C.S.T.E.M', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=12, color='orange')\n\n# Set the color of the text\nax.text(0.5, -0.75, 'C.S.T.E.M', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=12, color='orange')\n\n# Set the color of the text\nax.text(0.5, -0.8, 'C.S.T.E.M', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=12, color='orange')\n\n# Set the color of the text\nax.text(0.5, -0.85, 'C.S.T.E.M', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=12, color='orange')\n\n# Set the color of the text\nax.text(0.5, -0.9, 'C.S.T.E.M', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=12, color='orange')\n\n# Set the color of the text\nax.text(0.5, -0.95, 'C.S.T.E.M', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=12, color='orange')\n\n# Set the color of the text\nax.text(0.5, -1.0, 'C.S.T.E.M', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=12, color='orange')\n\n# Set the color of the text\nax.text(0.5, -1.05, 'C.S.T.E.M', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=12, color='orange')\n\n# Set the color of the text\nax.text(0.5, -1.1, 'C.S.T.E.M', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=12, color='orange')\n\n# Set the color of the text\nax.text(0.5, -1.15, 'C.S.T.E.M', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=12, color='orange')\n\n# Set the color of the text\nax.text(0.5, -1.2, 'C.S.T.E.M', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=12, color='orange')\n\n# Set the color of the text\nax.text(0.5, -1.25, 'C.S.T.E.M', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=12, color='orange')\n\n# Set the color of the text\nax.text(0.5, -1.3, 'C.S.T.E.M', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=12, color='orange')\n\n# Set the color of the text\nax.text(0.5, -1.35, 'C.S.T.E.M', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=12, color='orange')\n\n# Set the color of the text\nax.text(0.5, -1.4, 'C.S.T.E.M', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=12, color='orange')\n\n# Set the color of the text\nax.text(0.5, -1.45, 'C.S.T.E.M', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=12, color='orange')\n\n# Set the color of the text\nax.text(0.5, -1.5, 'C.S.T.E.M', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=12, color='orange')\n\n# Set the color of the text\nax.text(0.5, -1.55, 'C.S.T.E.M', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=12, color='orange')\n\n# Set the color of the text\nax.text(0.5, -1.6, 'C.S.T.E.M', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=12, color='orange')\n\n# Set the color of the text\nax.text(0.5, -1.65, 'C.S.T.E.M', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=12, color='orange')\n\n# Set the color of the text\nax.text(0.5, -1.7, 'C.S.T.E.M', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=12, color='orange')\n\n# Set the color of the text\nax.text(0.5, -1.75, 'C.S.T.E.M', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=12, color='orange')\n\n# Set the color of the text\nax.text(0.5, -1.8, 'C.S.T.E.M', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=12, color='orange')\n\n# Set the color of the text\nax.text(0.5, -1.85, 'C.S.T.E.M', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=12, color='orange')\n\n# Set the color of the text\nax.text(0.5, -1.9, 'C.S.T.E.M', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=12, color='orange')\n\n# Set the color of the text\nax.text(0.5, -1.95, 'C.S.T.E.M', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=12, color='orange')\n\n# Set the color of the text\nax.text(0.5, -2.0, 'C.S.T.E.M', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=12, color='orange')\n\n# Set the color of the text\nax.text(0.5, -2.05, 'C.S.T.E.M', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=12, color='orange')\n\n# Set the color of the text\nax.text(0.5, -2.1, 'C.S.T.E.M', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=12, color='orange')\n\n# Set the color of the text\nax.text(0.5, -2.15, 'C.S.T.E.M', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=12, color='orange')\n\n# Set the color of the text\nax.text(0.5, -2.2, 'C.S.T.E.M', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=12, color='orange')\n\n# Set the color of the text\nax.text(0.5, -2.25, 'C.S.T.E.M', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=12, color='orange')\n\n# Set the color of the text\nax.text(0.5, -2.3, 'C.S.T.E.M', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=12, color='orange')\n\n# Set the color of the text\nax.text(0.5, -2.35, 'C.S.T.E.M', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=12, color='orange')\n\n# Set the color of the text\nax.text(0.5, -2.4, 'C.S.T.E.M', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=12, color='orange')\n\n# Set the color of the text\nax.text(0.5, -2.45, 'C.S.T.E.M', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=12, color='orange')\n\n# Set the color of the text\nax.text(0.5, -2.5, 'C.S.T.E.M', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=12, color='orange')\n\n# Set the color of the text\nax.text(0.5, -2.55, 'C.S.T.E.M', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=12, color='orange')\n\n# Set the color of the text\nax.text(0.5, -2.6, 'C.S.T.E.M', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=12, color='orange')\n\n# Set the color of the text\nax.text(0.5, -2.65, 'C.S.T.E.M', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=12, color='orange')\n\n# Set the color of the text\nax.text(0.5, -2.7, 'C.S.T.E.M', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=12, color='orange')\n\n# Set the color of the text\nax.text(0.5, -2.75, 'C.S.T.E.M', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=12, color='orange')\n\n# Set the color of the text\nax.text(0.5, -2.8, 'C.S.T.E.M', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=12, color='orange')\n\n# Set the color of the text\nax.text(0.5, -2.85, 'C.S.T.E.M', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=12, color='orange')\n\n# Set the color of the text\nax.text(0.5, -2.9, 'C.S.T.E.M', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=12, color='orange')\n\n# Set the color of the text\nax.text(0.5, -2.95, 'C.S.T.E.M', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=12, color='orange')\n\n# Set the color of the text\nax.text(0.5, -3.0, 'C.S.T.E.M', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=12, color='orange')\n\n# Set the color of the text\nax.text(0.5, -3.05, 'C.S.T.E.M', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=12, color='orange')\n\n# Set the color of the text\n"}
{"file": "dataset/ori_500/multidiff_17.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis for the first plot\nfig, ax = plt.subplots(figsize=(10, 4))\n\n# Create a bar chart\nax.bar(range(1, 6), [20, 30, 40, 50, 60], color='blue')\nax.set_title('Cumulative Knowledge by Study Level')\n\n# Create a second bar chart\nfig, ax = plt.subplots(figsize=(10, 4))\nax.bar(range(1, 9), [150, 250, 200, 100, 150, 120, 180, 220], color='green')\nax.set_title('Number of Publications by Domain')\n\n# Display the plots\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_18.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 10.0))\n\n# Set the title of the graph\nax.set_title('Technological Advancements')\n\n# Create a bar chart with the data\nx = ['2015', '2016', '2017', '2018', '2019', '2020', '2021', '2022']\ny = [20, 30, 40, 50, 60, 70, 80, 90]\nax.bar(x, y, color='blue')\n\n# Set the x-axis label\nax.set_xlabel('Year')\n\n# Set the y-axis label\nax.set_ylabel('Progress (%)')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_19.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 10.0))\n\n# Set the title of the graph\nax.set_title('Average Legal Crime Rates by Country')\n\n# Create a bar chart with the data\nbars = ax.bar(['USA', 'UK', 'Germany', 'France', 'Italy', 'Spain'], [3.2, 2.9, 2.5, 2.7, 2.4, 2.6], color='orange')\n\n# Add labels to the bars\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 2), ha='center', va='bottom')\n\n# Set the x-axis label\nax.set_xlabel('Country')\n\n# Set the y-axis label\nax.set_ylabel('Crime Rate per 100,000 Inhabitants')\n\n# Set the y-axis limits\nax.set_ylim(0, 3)\n\n# Set the x-axis limits\nax.set_xlim(-0.5, 5.5)\n\n# Set the grid lines\nax.grid(True)\n\n# Set the tick marks\nax.set_xticks(range(len(bars)))\nax.set_yticks([0, 0.5, 1, 1.5, 2, 2.5, 3])\n\n# Set the tick labels\nax.set_xticklabels(['USA', 'UK', 'Germany', 'France', 'Italy', 'Spain'])\n\n# Set the tick colors\nax.tick_params(axis='x', colors='blue')\nax.tick_params(axis='y', colors='green')\n\n# Set the tick sizes\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Set the tick widths\nax.tick_params(axis='both', which='major', width=2)\n\n# Set the tick lengths\nax.tick_params(axis='both', which='major', length=5)\n\n# Set the tick styles\nax.tick_params(axis='both', which='major', style='dashed')\n\n# Set the tick positions\nax.tick_params(axis='both', which='major', pad=10)\n\n# Set the tick rotation\nax.tick_params(axis='both', which='major', rotation=45)\n\n# Set the tick direction\nax.tick_params(axis='both', which='major', direction='inout')\n\n# Set the tick alignment\nax.tick_params(axis='both', which='major', horizontalalignment='right')\n\n# Set the tick vertical alignment\nax.tick_params(axis='both', which='major', verticalalignment='top')\n\n# Set the tick box style\nax.tick_params(axis='both', which='major', bottom=True, top=False, left=True, right=False)\n\n# Set the tick box color\nax.tick_params(axis='both', which='major', colors='red')\n\n# Set the tick box width\nax.tick_params(axis='both', which='major', width=2)\n\n# Set the tick box length\nax.tick_params(axis='both', which='major', length=5)\n\n# Set the tick box style\nax.tick_params(axis='both', which='major', style='dashed')\n\n# Set the tick box position\nax.tick_params(axis='both', which='major', pad=10)\n\n# Set the tick box rotation\nax.tick_params(axis='both', which='major', rotation=45)\n\n# Set the tick box direction\nax.tick_params(axis='both', which='major', direction='inout')\n\n# Set the tick box alignment\nax.tick_params(axis='both', which='major', horizontalalignment='right')\n\n# Set the tick box vertical alignment\nax.tick_params(axis='both', which='major', verticalalignment='top')\n\n# Set the tick box box style\nax.tick_params(axis='both', which='major', bottom=True, top=False, left=True, right=False)\n\n# Set the tick box box color\nax.tick_params(axis='both', which='major', colors='red')\n\n# Set the tick box box width\nax.tick_params(axis='both', which='major', width=2)\n\n# Set the tick box box length\nax.tick_params(axis='both', which='major', length=5)\n\n# Set the tick box box style\nax.tick_params(axis='both', which='major', style='dashed')\n\n# Set the tick box box position\nax.tick_params(axis='both', which='major', pad=10)\n\n# Set the tick box box rotation\nax.tick_params(axis='both', which='major', rotation=45)\n\n# Set the tick box box direction\nax.tick_params(axis='both', which='major', direction='inout')\n\n# Set the tick box box alignment\nax.tick_params(axis='both', which='major', horizontalalignment='right')\n\n# Set the tick box box vertical alignment\nax.tick_params(axis='both', which='major', verticalalignment='top')\n\n# Set the tick box box box style\nax.tick_params(axis='both', which='major', bottom=True, top=False, left=True, right=False)\n\n# Set the tick box box box color\nax.tick_params(axis='both', which='major', colors='red')\n\n# Set the tick box box box width\nax.tick_params(axis='both', which='major', width=2)\n\n# Set the tick box box box length\nax.tick_params(axis='both', which='major', length=5)\n\n# Set the tick box box box style\nax.tick_params(axis='both', which='major', style='dashed')\n\n# Set the tick box box box position\nax.tick_params(axis='both', which='major', pad=10)\n\n# Set the tick box box box rotation\nax.tick_params(axis='both', which='major', rotation=45)\n\n# Set the tick box box box direction\nax.tick_params(axis='both', which='major', direction='inout')\n\n# Set the tick box box box alignment\nax.tick_params(axis='both', which='major', horizontalalignment='right')\n\n# Set the tick box box box vertical alignment\nax.tick_params(axis='both', which='major', verticalalignment='top')\n\n# Set the tick box box box box style\nax.tick_params(axis='both', which='major', bottom=True, top=False, left=True, right=False)\n\n# Set the tick box box box box color\nax.tick_params(axis='both', which='major', colors='red')\n\n# Set the tick box box box box width\nax.tick_params(axis='both', which='major', width=2)\n\n# Set the tick box box box box length\nax.tick_params(axis='both', which='major', length=5)\n\n# Set the tick box box box box style\nax.tick_params(axis='both', which='major', style='dashed')\n\n# Set the tick box box box box position\nax.tick_params(axis='both', which='major', pad=10)\n\n# Set the tick box box box box rotation\nax.tick_params(axis='both', which='major', rotation=45)\n\n# Set the tick box box box box direction\nax.tick_params(axis='both', which='major', direction='inout')\n\n# Set the tick box box box box alignment\nax.tick_params(axis='both', which='major', horizontalalignment='right')\n\n# Set the tick box box box box vertical alignment\nax.tick_params(axis='both', which='major', verticalalignment='top')\n\n# Set the tick box box box box box style\nax.tick_params(axis='both', which='major', bottom=True, top=False, left=True, right=False)\n\n# Set the tick box box box box box color\nax.tick_params(axis='both', which='major', colors='red')\n\n# Set the tick box box box box box width\nax.tick_params(axis='both', which='major', width=2)\n\n# Set the tick box box box box box length\nax.tick_params(axis='both', which='major', length=5)\n\n# Set the tick box box box box box style\nax.tick_params(axis='both', which='major', style='dashed')\n\n# Set the tick box box box box box position\nax.tick_params(axis='both', which='major', pad=10)\n\n# Set the tick box box box box box rotation\nax.tick_params(axis='both', which='major', rotation=45)\n\n# Set the tick box box box box box direction\nax.tick_params(axis='both', which='major', direction='inout')\n\n# Set the tick box box box box box alignment\nax.tick_params(axis='both', which='major', horizontalalignment='right')\n\n# Set the tick box box box box box vertical alignment\nax.tick_params(axis='both', which='major', verticalalignment='top')\n\n# Set the tick box box box box box box style\nax.tick_params(axis='both', which='major', bottom=True, top=False, left=True, right=False)\n\n# Set the tick box box box box box box color\nax.tick_params(axis='both', which='major', colors='red')\n\n# Set the tick box box box box box box width\nax.tick_params(axis='both', which='major', width=2)\n\n# Set the tick box box box box box box length\nax.tick_params(axis='both', which='major', length=5)\n\n# Set the tick box box box box box box style\nax.tick_params(axis='both', which='major', style='dashed')\n\n# Set the tick box box box box box box position\nax.tick_params(axis='both', which='major', pad=10)\n\n# Set the tick box box box box box box rotation\nax.tick_params(axis='both', which='major', rotation=45)\n\n# Set the tick box box box box box box direction\nax.tick_params(axis='both', which='major', direction='inout')\n\n# Set the tick box box box box box box alignment\nax.tick_params(axis='both', which='major', horizontalalignment='right')\n\n# Set the tick box box box box box box vertical alignment\nax.tick_params(axis='both', which='major', verticalalignment='top')\n\n# Set the tick box box box box box box box style\nax.tick_params(axis='both', which='major', bottom=True, top=False, left=True, right=False)\n\n# Set the tick box box box box box box box color\nax.tick_params(axis='both', which='major', colors='red')\n\n# Set the tick box box box box box box box width\nax.tick_params(axis='both', which='major', width=2)\n\n# Set the tick box box box box box box box length\nax.tick_params(axis='both', which='major', length=5)\n\n# Set the tick box box box box box box box style\nax.tick_params(axis='both', which='major', style='dashed')\n\n# Set the tick box box box box box box box position\nax.tick_params(axis='both', which='major', pad=10)\n\n# Set the tick box box box box box box box rotation\nax.tick_params(axis='both', which='major', rotation=45)\n\n# Set the tick box box box box box box box direction\nax.tick_params(axis='both', which='major', direction='inout')\n\n# Set the tick box box box box box box box alignment\nax.tick_params(axis='both', which='major', horizontalalignment='right')\n\n# Set the tick box box box box box box box vertical alignment\nax.tick_params(axis='both', which='major', verticalalignment='top')\n\n# Set the tick box box box box box box box box style\nax.tick_params(axis='both', which='major', bottom=True, top=False, left=True, right=False)\n\n# Set the tick box box box box box box box box color\nax.tick_params(axis='both', which='major', colors='red')\n\n# Set the tick box box box box box box box box width\nax.tick_params(axis='both', which='major', width=2)\n\n# Set the tick box box box box box box box box length\nax.tick_params(axis='both', which='major', length=5)\n\n# Set the tick box box box box box box box box style\nax.tick_params(axis='both', which='major', style='dashed')\n\n# Set the tick box box box box box box box box position\nax.tick_params(axis='both', which='major', pad=10)\n\n# Set the tick box box box box box box box box rotation\nax.tick_params(axis='both', which='major', rotation=45)\n\n# Set the tick box box box box box box box box direction\nax.tick_params(axis='both', which='major', direction='inout')\n\n# Set the tick box box box box box box box box alignment\nax.tick_params(axis='both', which='major', horizontalalignment='right')\n\n# Set the tick box box box box box box box box vertical alignment\nax.tick_params(axis='both', which='major', verticalalignment='top')\n\n# Set the tick box box box box box box box box box style\nax.tick_params(axis='both', which='major', bottom=True, top=False, left=True, right=False)\n\n# Set the tick box box box box box box box box box color\nax.tick_params(axis='both', which='major', colors='red')\n\n# Set the tick box box box box box box box box box width\nax.tick_params(axis='both', which='major', width=2)\n\n# Set the tick box box box box box box box box box length\nax.tick_params(axis='both', which='major', length=5)\n\n# Set the tick box box box box box box box box box style\nax.tick_params(axis='both', which='major', style='dashed')\n\n# Set the tick box box box box box box box box box position\nax.tick_params(axis='both', which='major', pad=10)\n\n# Set the tick box box box box box box box box box rotation\nax.tick_params(axis='both', which='major', rotation=45)\n\n# Set the tick box box box box box box box box box direction\nax.tick_params(axis='both', which='major', direction='inout')\n\n# Set the tick box box box box box box box box box alignment\nax.tick_params(axis='both', which='major', horizontalalignment='right')\n\n# Set the tick box box box box box box box box box vertical alignment\nax.tick_params(axis='both', which='major', verticalalignment='top')\n\n# Set the tick box box box box box box box box box box style\nax.tick_params(axis='both', which='major', bottom=True, top=False, left=True, right=False)\n\n# Set the tick box box box box box box box box box box color\nax.tick_params(axis='both', which='major', colors='red')\n\n# Set the tick box box box box box box box box box box width\nax.tick_params(axis='both', which='major', width=2)\n\n# Set the tick box box box box box box box box box box length\nax.tick_params(axis='both', which='major', length=5)\n\n# Set the tick box box box box box box box box box box style\nax.tick_params(axis='both', which='major', style='dashed')\n\n# Set the tick box box box box box box box box box box position\nax.tick_params(axis='both', which='major', pad=10)\n\n# Set the tick box box box box box box box box box box rotation\nax.tick_params(axis='both', which='major', rotation=45)\n\n# Set the tick box box box box box box box box box box direction\nax.tick_params(axis='both', which='major', direction='inout')\n\n# Set the tick box box box box box box box box box box alignment\nax.tick_params(axis='both', which='major', horizontalalignment='right')\n\n# Set the tick box box box box box box box box box box vertical alignment\nax.tick_params(axis='both', which='major', verticalalignment='top')\n\n# Set the tick box box box box box box box box box box box style\nax.tick_params(axis='both', which='major', bottom=True, top=False, left=True, right=False)\n\n# Set the tick box box box box box box box box box box box color\nax.tick_params(axis='both', which='major', colors='red')\n\n# Set the tick box box box box box box box box box box box width\nax.tick_params(axis='both', which='major', width=2)\n\n# Set the tick box box box box box box box box box box box length\nax.tick_params(axis='both', which='major', length=5)\n\n# Set the tick box box box box box box box box box box box style\nax.tick_params(axis='both', which='major', style='dashed')\n\n# Set the tick box box box box box box box box box box box position\nax.tick_params(axis='both', which='major', pad=10)\n\n# Set the tick box box box box box box box box box box box rotation\nax.tick_params(axis='both', which='major', rotation=45)\n\n# Set the tick box box box box box box box box box box box direction\nax.tick_params(axis='both', which='major', direction='inout')\n\n# Set the tick box box box box box box box box box box box alignment\nax.tick_params(axis='both', which='major', horizontalalignment='right')\n\n# Set the tick box box box box box box box box box box box vertical alignment\nax.tick_params(axis='both', which='major', verticalalignment='top')\n\n# Set the tick box box box box box box box box box box box box style\nax.tick_params(axis='both', which='major', bottom=True, top=False, left=True, right=False)\n\n# Set the tick box box box box box box box box box box box box color\nax.tick_params(axis='both', which='major', colors='red')\n\n# Set the tick box box box box box box box box box box box box width\nax.tick_params(axis='both', which='major', width=2)\n\n# Set the tick box box box box box box box box box box box box length\nax.tick_params(axis='both', which='major', length=5)\n\n# Set the tick box box box box box box box box box box box box style\nax.tick_params(axis='both', which='major', style='dashed')\n\n# Set the tick box box box box box box box box box box box box position\nax.tick_params(axis='both', which='major', pad=10)\n\n# Set the tick box box box box box box box box box box box box rotation\nax.tick_params(axis='both', which='major', rotation=45)\n\n# Set the tick box box box box box box box box box box box box direction\nax.tick_params(axis='both', which='major', direction='inout')\n\n# Set the tick box box box box box box box box box box box box alignment\nax.tick_params(axis='both', which='major', horizontalalignment='right')\n\n# Set the tick box box box box box box box box box box box box vertical alignment\nax.tick_params(axis='both', which='major', verticalalignment='top')\n\n# Set the tick box box box box box box box box box box box box box style\nax.tick_params(axis='both', which='major', bottom=True, top=False, left=True, right=False)\n\n# Set the tick box box box box box box box box box box box box box"}
{"file": "dataset/ori_500/multidiff_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis for the first subplot\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Set the title of the first subplot\nax.set_title('Student Performance in Schools')\n\n# Create a bar chart with the data\nax.bar(['Public School', 'Private School'], [80, 60], color='blue')\nax.barh([20, 40], ['Public School', 'Private School'], color='orange')\n\n# Create a second subplot\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Set the title of the second subplot\nax.set_title('Resource Allocation in Schools')\n\n# Create a pie chart with the data\nax.pie([30, 20, 10, 15, 10, 5], labels=['Books', 'Staff', 'Technology', 'Facilities', 'Extracurricular', 'Sports'], colors=['blue', 'gray', 'green', 'orange', 'purple', 'brown'], autopct='%1.1f%%')\n\n# Display the plots\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_20.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis for the first plot\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Set the title of the first plot\nax.set_title('Average Annual Temperature')\n\n# Create a scatter plot with random data\nx = np.random.rand(10)\ny = np.random.rand(10)\nax.scatter(x, y)\n\n# Create a second figure and axis for the second plot\nfig2, ax2 = plt.subplots(figsize=(10, 5))\n\n# Set the title of the second plot\nax2.set_title('Geographical Elevation Distribution')\n\n# Create a bar chart with random data\nregions = ['Lowland', 'Highland', 'Plateau']\nelevations = [1000, 1500, 2000]\nax2.bar(regions, elevations, color='blue')\n\n# Show the plots\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_21.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the graph\nyears = ['2019', '2020', '2021', '2022']\ntotal_investment = [400, 350, 300, 250]\nproduct_types = ['Savings', 'CDs', 'Stocks', 'Bonds', 'REITs', 'Mutual Funds']\npopularity = [200, 175, 150, 125, 100, 75]\nloan_amounts = [80, 70, 60, 50, 40, 30, 20, 10]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Plot the total investment over time\nax.plot(years, total_investment, color='orange')\nax.fill_between(years, total_investment, color='yellow')\n\n# Plot the popularity of financial products\nax.bar(product_types, popularity, color='skyblue')\n\n# Plot the loan amount distribution by region\nax.barh(loan_amounts, range(len(loan_amounts)), color='pink')\n\n# Set the title and labels\nax.set_title('Investment Growth Over Time')\nax.set_xlabel('Year')\nax.set_ylabel('Number of Accounts (%)')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_22.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis for the first subplot\nfig, ax = plt.subplots(figsize=(10, 10))\nax.set_title('AI Task Success Rates')\nax.set_xlabel('AI Task')\nax.set_ylabel('Success Rate (%)')\n\n# Create a bar chart with rectangles representing success rates\nrects = ax.bar(['Image Recog.', 'Speech Recog.', 'Language Proc.', 'Game AI'], [85, 90, 95, 92], color='skyblue')\n\n# Add labels to each rectangle\nfor rect in rects:\n    height = rect.get_height()\n    ax.annotate('{}'.format(height),\n                xy=(rect.get_x() + rect.get_width() / 2, height),\n                xytext=(0, 3),  # 3 points vertical offset\n                textcoords=\"offset points\",\n                ha='center', va='bottom')\n\n# Create a second subplot for the efficiency scores\nfig, ax = plt.subplots(figsize=(10, 10))\nax.set_title('Algorithm Efficiency Scores')\nax.set_xlabel('Algorithm')\nax.set_ylabel('Efficiency (%)')\n\n# Create a scatter plot with circles representing efficiency scores\ncircles = ax.scatter(['Alg1', 'Alg2', 'Alg3', 'Alg4'], [90, 85, 95, 92], color='pink')\n\n# Add labels to each circle\nfor i, txt in enumerate(['Alg1', 'Alg2', 'Alg3', 'Alg4']):\n    ax.annotate(txt, (i, 95))\n\n# Create a third subplot for the adaptability scores\nfig, ax = plt.subplots(figsize=(10, 10))\nax.set_title('AI Model Adaptability')\nax.set_xlabel('Model')\nax.set_ylabel('Adaptability Score (%)')\n\n# Create a line graph with lines representing adaptability scores\nlines = ax.plot(['Model A', 'Model B', 'Model C', 'Model D'], [95, 90, 85, 80], color='green')\n\n# Add labels to each line\nfor i, txt in enumerate(['Model A', 'Model B', 'Model C', 'Model D']):\n    ax.annotate(txt, (i, 95))\n\n# Create a fourth subplot for the conditions\nfig, ax = plt.subplots(figsize=(10, 10))\nax.set_title('Conditions')\nax.set_xlabel('Condition')\nax.set_ylabel('Score (%)')\n\n# Create a pie chart with slices representing conditions\npie = ax.pie([50, 50], colors=['green', 'blue'], labels=['Dry Conditions', 'Wet Conditions'])\n\n# Display the plots\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_23.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis for the first subplot\nfig, ax = plt.subplots(figsize=(10, 10))\nax.set_title('Traffic Volume by Time of Day')\nax.set_xlabel('Number of Vehicles')\nax.set_ylabel('Time of Day (24-hour clock)')\nax.plot([100, 200, 300, 400, 500, 600, 700], [100, 150, 125, 100, 150, 125, 100], 'ro-')\n\n# Create a second subplot\nfig, ax = plt.subplots(figsize=(10, 10))\nax.set_title('Speed Distribution by Location')\nax.set_xlabel('Location')\nax.set_ylabel('Speed (km/h)')\nax.bar(['Urban', 'Highway'], [80, 120], color='skyblue')\n\n# Create a third subplot\nfig, ax = plt.subplots(figsize=(10, 10))\nax.set_title('Elevation Changes Along a Route')\nax.set_xlabel('Distance (miles)')\nax.set_ylabel('Elevation (m)')\nax.plot([0, 200, 400, 600, 800, 1000], [0, 100, 200, 150, 300, 400], 'b^-')\n\n# Display the plots\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_24.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis for the pie chart\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Define the data for the pie chart\narts = ['Literature', 'Performing Arts', 'Visual Arts']\nvalues = [30, 25, 45]\ncolors = ['#ff9999','#66b3ff','#99ff99']\n\n# Create the pie chart\nwedges, texts, autotexts = ax.pie(values, labels=arts, colors=colors, autopct='%1.1f%%', startangle=90)\n\n# Set the aspect ratio of the pie chart to be equal so that pie is drawn as a circle.\nax.axis('equal')\n\n# Create a second subplot for the radar chart\nfig, ax = plt.subplots(figsize=(10, 5), subplot_kw={'projection': 'polar'})\n\n# Define the data for the radar chart\ncategories = ['Expression', 'Creativity', 'Collaboration', 'Dedication', 'Technique']\nN = len(categories)\nvalues = [0.8, 0.6, 0.4, 0.2, 0.0]\nvalues += values[:1]  # repeat the first value to close the circular graph\nangles = np.linspace(0, 2 * np.pi, N, endpoint=False).tolist()\nangles += angles[:1]  # repeat the first value to close the circular graph\n\n# Draw one axe per variable + add labels labels yet\nax.set_xticks(angles[:-1])\nax.set_xticklabels(categories)\n\n# Plot data\nax.plot(angles, values, linewidth=1, linestyle='solid')\nax.fill(angles, values, 'b', alpha=0.1)\n\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_25.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Create a bar chart\nax.bar([0.0, 0.1, 0.2, 0.3, 0.4, 0.5], [1000, 1500, 2000, 2500, 3000, 3500], color='blue')\nax.set_xlabel('Sale Probability')\nax.set_ylabel('Number of Sales')\n\n# Add a legend\nax.legend(['Known Sales', 'Unknown Sales'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Set the title of the plot\nax.set_title('Histogram of Stock Returns')\n\n# Create a histogram with random data\nax.hist([120, 130, 140, 150, 160], bins=10, color='green', alpha=0.7)\nax.hist([100, 110, 120, 130, 140], bins=10, color='red', alpha=0.7)\n\n# Create a scatter plot with random data\nax.scatter([10, 20, 30, 40, 50], [10, 20, 30, 40, 50], color='yellow')\nax.scatter([10, 20, 30, 40, 50], [10, 20, 30, 40, 50], color='blue')\nax.scatter([10, 20, 30, 40, 50], [10, 20, 30, 40, 50], color='cyan')\nax.scatter([10, 20, 30, 40, 50], [10, 20, 30, 40, 50], color='magenta')\nax.scatter([10, 20, 30, 40, 50], [10, 20, 30, 40, 50], color='yellow')\nax.scatter([10, 20, 30, 40, 50], [10, 20, 30, 40, 50], color='cyan')\nax.scatter([10, 20, 30, 40, 50], [10, 20, 30, 40, 50], color='magenta')\n\n# Add labels to the axes\nax.set_xlabel('Returns')\nax.set_ylabel('Frequency')\n\n# Add a legend\nax.legend(['Gains', 'Losses'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis for the first plot\nfig, ax = plt.subplots(figsize=(8.0, 10.0))\nax.plot([0, 1, 2, 3, 4], [10, 9, 8, 7, 6], 'b-')\nax.set_xlabel('Relative Year')\nax.set_ylabel('Energy Consumption (GWh)')\nax.set_title('Energy Consumption Over Time')\n\n# Create a scatter plot with blue dots\nax.scatter([0, 1, 2, 3, 4], [10, 9, 8, 7, 6], color='blue')\n\n# Create a second figure and axis for the second plot\nfig, ax = plt.subplots(figsize=(8.0, 10.0))\nax.plot([0, 1, 2, 3, 4], [0.5, 0.6, 0.7, 0.8, 0.9], 'r-')\nax.set_xlabel('Relative Year')\nax.set_ylabel('Renewable Energy Ratio (%)')\nax.set_title('Renewable Energy Ratio Over Time')\n\n# Create a scatter plot with red dots\nax.scatter([0, 1, 2, 3, 4], [0.5, 0.6, 0.7, 0.8, 0.9], color='red')\n\n# Create a third figure and axis for the third plot\nfig, ax = plt.subplots(figsize=(8.0, 10.0), projection='3d')\nx = np.linspace(-4, 4, 100)\ny = np.linspace(-4, 4, 100)\nx, y = np.meshgrid(x, y)\nz = np.sin(np.sqrt(x**2 + y**2))\nsurf = ax.plot_surface(x, y, z, cmap='coolwarm', linewidth=0, antialiased=False)\nfig.colorbar(surf, shrink=0.5, aspect=5)\nax.set_xlabel('Relative Year')\nax.set_ylabel('Relative Month')\nax.set_zlabel('Renewable Energy Ratio (%)')\nax.set_title('Renewable Energy Ratio Over Time')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis for the pie chart\nfig, ax = plt.subplots(figsize=(6, 6))\n\n# Data for the pie chart\nlabels = ['Ancient Scripts', 'Modern Records', 'Medieval Texts', 'Renaissance Literature']\nsizes = [15, 35, 30, 20]\ncolors = ['#ff9999','#ffff99','#66b3ff','#99ff99']\n\n# Create a pie chart\nax.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%', startangle=140)\n\n# Equal aspect ratio ensures that pie is drawn as a circle.\nax.axis('equal')  \n\n# Create a scatter plot\nfig, ax = plt.subplots(figsize=(8, 4))\nx = np.array([100, 200, 300, 400, 500])\ny = np.array([150, 250, 350, 450, 550])\ncolors = np.array(['red', 'green', 'blue', 'cyan', 'magenta'])\nax.scatter(x, y, c=colors)\nax.set_xlabel('Year')\nax.set_ylabel('Number of Documents')\nax.set_title('Document Count Over Historical Periods')\n\n# Add text annotations\nfor i, txt in enumerate(labels):\n    ax.annotate(txt, (x[i], y[i]), textcoords=\"offset points\", xytext=(0,10), ha='center')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the scatter plot\nx = [2000, 2005, 2010, 2015, 2020]\ny = [9.25, 9.00, 8.75, 8.50, 8.25]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot the data\nax.scatter(x, y)\n\n# Set the title and labels\nax.set_title('Luxury Brand Popularity vs Price')\nax.set_xlabel('Average Price ($)')\nax.set_ylabel('Popularity Index')\n\n# Display the plot\nplt.show()\n\n# Data for the bar chart\nbrands = ['Gucci', 'Prada', 'Dior', 'Louis Vuitton', 'Chanel']\npopularity = [9.25, 8.75, 8.50, 8.25, 8.00]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot the data\nax.bar(brands, popularity, color='blue')\n\n# Set the title and labels\nax.set_title('Customer Satisfaction Distribution Across Brands')\nax.set_xlabel('Brands')\nax.set_ylabel('Customer Satisfaction')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the first graph\nx = np.arange(0, 100, 10)\ny = [75.32, 77.11, 77.03, 76.86, 75.34, 74.52, 75.32, 77.11, 77.03, 76.86, 75.34, 74.52]\ncolors = ['green', 'green', 'green', 'green', 'green', 'green', 'green', 'green', 'green', 'green', 'green', 'green']\n\n# Data for the second graph\nx2 = np.arange(0, 100, 10)\ny2 = [60.5, 59.1, 58.35, 55.95, 55.5, 55.35, 55.15, 54.95, 54.75, 54.55, 54.35, 54.15]\ncolors2 = ['red', 'red', 'red', 'red', 'red', 'red', 'red', 'red', 'red', 'red', 'red', 'red']\n\n# Data for the third graph\nx3 = np.arange(0, 100, 10)\ny3 = [0.0, 0.2, 0.4, 0.6, 0.8, 1.0, 1.2, 1.4, 1.6, 1.8, 2.0, 2.2]\ncolors3 = ['blue', 'blue', 'blue', 'blue', 'blue', 'blue', 'blue', 'blue', 'blue', 'blue', 'blue', 'blue']\n\n# Data for the fourth graph\nx4 = np.arange(0, 100, 10)\ny4 = [0.0, 0.2, 0.4, 0.6, 0.8, 1.0, 1.2, 1.4, 1.6, 1.8, 2.0, 2.2]\ncolors4 = ['orange', 'orange', 'orange', 'orange', 'orange', 'orange', 'orange', 'orange', 'orange', 'orange', 'orange', 'orange']\n\n# Create a figure and a set of subplots\nfig, axs = plt.subplots(2, 3, figsize=(10.0, 7.0))\n\n# Plot the first graph\naxs[0, 0].bar(x, y, color=colors)\naxs[0, 0].set_title('Accuracy (%)')\naxs[0, 0].set_xlabel('Year')\naxs[0, 0].set_ylabel('Accuracy (%)')\n\n# Plot the second graph\naxs[0, 1].bar(x2, y2, color=colors2)\naxs[0, 1].set_title('Robust Accuracy (%)')\naxs[0, 1].set_xlabel('Year')\naxs[0, 1].set_ylabel('Robust Accuracy (%)')\n\n# Plot the third graph\naxs[0, 2].bar(x3, y3, color=colors3)\naxs[0, 2].set_title('Accuracy Diff. (%)')\naxs[0, 2].set_xlabel('Year')\naxs[0, 2].set_ylabel('Accuracy Diff. (%)')\n\n# Plot the fourth graph\naxs[1, 0].bar(x4, y4, color=colors4)\naxs[1, 0].set_title('Robust Accuracy Diff. (%)')\naxs[1, 0].set_xlabel('Year')\naxs[1, 0].set_ylabel('Robust Accuracy Diff. (%)')\n\n# Plot the fifth graph\naxs[1, 1].bar(x, y, color=colors)\naxs[1, 1].set_title('NFR (%)')\naxs[1, 1].set_xlabel('Year')\naxs[1, 1].set_ylabel('NFR (%)')\n\n# Plot the sixth graph\naxs[1, 2].bar(x, y, color=colors)\naxs[1, 2].set_title('Robust NFR (%)')\naxs[1, 2].set_xlabel('Year')\naxs[1, 2].set_ylabel('Robust NFR (%)')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(7.0, 9.0))\n\n# Set the title of the plot\nax.set_title('Performance Metrics')\n\n# Set the x-axis label\nax.set_xlabel('Trials')\n\n# Set the y-axis label\nax.set_ylabel('General Variance')\n\n# Set the x-axis limits\nax.set_xlim(0, 25)\n\n# Set the y-axis limits\nax.set_ylim(0, 1)\n\n# Set the x-axis ticks\nax.set_xticks(range(0, 30, 5))\n\n# Set the y-axis ticks\nax.set_yticks([0.05*i for i in range(21)])\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the text\nax.set_color_cycle(['blue', 'green', 'orange', 'purple', 'pink'])\n\n# Plot the data\nax.plot([0, 5, 10, 15, 20, 25], [0.05, 0.1, 0.15, 0.2, 0.25, 0.3], 'b-')\nax.plot([0, 5, 10, 15, 20, 25], [0.05, 0.1, 0.15, 0.2, 0.25, 0.3], 'g-')\nax.plot([0, 5, 10, 15, 20, 25], [0.05, 0.1, 0.15, 0.2, 0.25, 0.3], 'r-')\nax.plot([0, 5, 10, 15, 20, 25], [0.05, 0.1, 0.15, 0.2, 0.25, 0.3], 'p-')\nax.plot([0, 5, 10, 15, 20, 25], [0.05, 0.1, 0.15, 0.2, 0.25, 0.3], 'y-')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and a set of subplots\nfig, axs = plt.subplots(1, 3, figsize=(10, 4))\n\n# Set the title for the first subplot\naxs[0].set_title('Debater')\n# Add a colored rectangle to the first subplot\naxs[0].add_patch(plt.Rectangle((0, 0), 1, 1, color='blue'))\n\n# Set the title for the second subplot\naxs[1].set_title('Correct Rating - Incorrect Rating')\n# Add a scatter plot to the second subplot\nx = np.random.rand(50)\ny = np.random.rand(50)\naxs[1].scatter(x, y)\n\n# Set the title for the third subplot\naxs[2].set_title('Judge Accuracy (%)')\n# Add a line plot to the third subplot\nx = np.linspace(-200, 200, 100)\ny = np.sin(x)\naxs[2].plot(x, y)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(5.0, 5.0))\n\n# Define the data for the pie chart\nsizes = [4.6, 10.6, 11.3, 13.2, 29.8, 30.5]\nlabels = ['Red', 'Blue', 'Green', 'Yellow', 'Purple', 'Cyan']\n\n# Create a pie chart\nwedges, texts, autotexts = ax.pie(sizes, labels=labels, autopct='%1.1f%%', startangle=90)\n\n# Set the aspect ratio of the plot to be equal so that pie is drawn as a circle.\nax.axis('equal')  \n\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Set the title of the plot\nax.set_title('Matplotlib bakery: A donut')\n\n# Create a circle for the donut\ncircle = plt.Circle((0.5, 0.5), 0.4, color='white')\nax.add_artist(circle)\n\n# Create a rectangle for the ingredients\ningredients = ['90 g sugar', '225 g flour', '1 egg', '60 g butter', '1/2 package of yeast', '100 ml milk']\ncolors = ['orange', 'yellow', 'green', 'red', 'purple', 'pink']\nexplode = (0.1, 0, 0, 0, 0, 0)\nax.pie([1]*len(ingredients), colors=colors, explode=explode, startangle=90, radius=0.4, wedgeprops=dict(width=0.4))\n\n# Add text labels to the ingredients\nfor i, txt in enumerate(ingredients):\n    ax.text(0.5, 0.5 - i*0.1, txt, ha='center', va='center')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Define the data for each category\ncategories = ['Entertainment', 'Utilities', 'Transport', 'Food', 'Others']\nvalues = [16.7, 20.0, 37.5, 41.7, 10.0]\ncolors = ['#FFD700', '#90EE90', '#ADD8E6', '#FF6347', '#FFA07A']\n\n# Create a pie chart\nwedges, texts, autotexts = ax.pie(values, labels=categories, colors=colors, autopct='%1.1f%%', startangle=90)\n\n# Add a title\nax.set_title('Expenses - Company vs. Project')\n\n# Add a legend\nax.legend(wedges, categories, title=\"Categories\", loc=\"center left\", bbox_to_anchor=(1, 0, 0.5, 1))\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 4.0))\n\n# Create a pie chart\nax.pie([31.4, 15.7, 19.9, 33.0], labels=[\"Unsed\", \"Model\", \"Optimizer\", \"Gradient\"], colors=[\"orange\", \"blue\", \"green\", \"yellow\"], autopct='%1.1f%%')\n\n# Set the title of the chart\nax.set_title('LoRA')\n\n# Display the chart\nplt.show()\n\n# Create a second figure and axis\nfig2, ax2 = plt.subplots(figsize=(10.0, 4.0))\n\n# Create a second pie chart\nax2.pie([54.8, 10.5, 6.3, 28.4], labels=[\"Unsed\", \"Model\", \"Optimizer\", \"Gradient\"], colors=[\"orange\", \"red\", \"pink\", \"lightgreen\"], autopct='%1.1f%%')\n\n# Set the title of the second chart\nax2.set_title('QLoRA')\n\n# Display the second chart\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(5.0, 8.0))\n\n# Set the title of the plot\nax.set_title('Full Finetuning')\n\n# Create a pie chart with the data\nax.pie([12.6, 15.9], labels=['Model', 'Optimizer'], colors=['orange', 'grey'], startangle=90)\n\n# Set the aspect ratio of the plot to be equal so that pie is drawn as a circle.\nax.axis('equal')  \n\n# Create a second subplot\nfig, ax = plt.subplots(figsize=(5.0, 8.0))\n\n# Set the title of the plot\nax.set_title('QLoRA')\n\n# Create a pie chart with the data\nax.pie([4.6, 5.3], labels=['Gradient+Activations+Other', 'Unused'], colors=['green', 'yellow'], startangle=90)\n\n# Set the aspect ratio of the plot to be equal so that pie is drawn as a circle.\nax.axis('equal')  \n\n# Create a third subplot\nfig, ax = plt.subplots(figsize=(5.0, 8.0))\n\n# Set the title of the plot\nax.set_title('Fine-tuning')\n\n# Create a pie chart with the data\nax.pie([25.1, 26.4, 46.2, 23.9], labels=['Model', 'Optimizer', 'Gradient+Activations+Other', 'Unused'], colors=['orange', 'grey', 'green', 'yellow'], startangle=90)\n\n# Set the aspect ratio of the plot to be equal so that pie is drawn as a circle.\nax.axis('equal')  \nplt.show()\n```"}
{"file": "dataset/ori_500/pie_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Create a pie chart with the data\nax.pie([25, 10, 10, 20, 35], labels=[\"Fruits\", \"Dairy\", \"Grains\", \"Vegetables\", \"Proteins\"], autopct='%1.1f%%', startangle=90)\n\n# Set the title of the chart\nax.set_title('Nutritional Distribution')\n\n# Display the chart\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Market Share by Sector - External vs. Internal')\n\n# Define the data for the pie chart\nlabels = ['E-commerce', 'Education', 'Entertainment', 'Technology']\nsizes = [31.2, 28.6, 35.7, 37.5]\ncolors = ['#FFD700', '#FFA500', '#ADD8E6', '#90EE90']\n\n# Create a pie chart\nwedges, texts, autotexts = ax.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%', startangle=90)\n\n# Set the aspect ratio of the pie chart to be equal so that pie is drawn as a circle.\nax.axis('equal')  \n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Create a pie chart with the data\nax.pie([20, 33.3, 16.7, 40], labels=[\"Dogs\", \"Cats\", \"Birds\", \"Fish\"], autopct='%1.1f%%', startangle=90)\n\n# Set the title of the chart\nax.set_title('Pet Ownership')\n\n# Display the chart\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the pie chart\nlabels = ['David', 'John', 'Marry', 'Peter']\nsizes = [11.0, 29.0, 40.0, 20.0]\ncolors = ['blue', 'orange', 'green', 'red']\n\n# Create a pie chart\nfig, ax = plt.subplots(figsize=(5.0, 5.0))\nax.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%', startangle=90)\n\n# Equal aspect ratio ensures that pie is drawn as a circle.\nax.axis('equal')  \n\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(5.0, 5.0))\n\n# Create a pie chart with the data\nax.pie([18, 12, 28], labels=[\"France\", \"Germany\", \"Italy\"], autopct='%1.1f%%', startangle=90)\n\n# Set the title of the chart\nax.set_title('Countries in Europe')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the pie chart\nlabels = ['Category 1', 'Category 2', 'Category 3', 'Category 4', 'Category 5']\nsizes = [26.2, 21.4, 19.0, 14.3, 13.3]\ncolors = ['#f8d7da', '#f8bbd0', '#f06292', '#e53935', '#b71c1c']\n\n# Create a pie chart\nfig, ax = plt.subplots(figsize=(5.0, 5.0))\nwedges, texts, autotexts = ax.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%', startangle=140)\n\n# Set aspect ratio to be equal so that pie is drawn as a circle.\nax.axis('equal')  \n\n# Add title\nplt.suptitle('Slice of a pie chart')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the pie chart\nlabels = ['Psychological', 'Others', 'Market', 'Satisfactory', 'Social']\nsizes = [12.4, 35.4, 17.2, 24.7, 10.3]\ncolors = ['blue', 'green', 'skyblue', 'orange', 'pink']\n\n# Create a pie chart\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\nax.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%', startangle=90)\n\n# Equal aspect ratio ensures that pie is drawn as a circle.\nax.axis('equal')  \n\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the pie chart\nlabels = ['Facebook', 'Instagram', 'Twitter', 'LinkedIn']\nsizes = [25, 10, 10, 10]\ncolors = ['#add8e6', '#4682b4', '#008080', '#000000']\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Create a pie chart\nwedges, texts, autotexts = ax.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%', startangle=90)\n\n# Set the aspect ratio of the pie chart to be equal so that it appears as a circle.\nax.axis('equal')\n\n# Add a title to the chart\nax.set_title('Social Media Usage')\n\n# Display the chart\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Define the data for the pie chart\nsizes = [34.7, 12.2, 25.4, 20.3]\nlabels = ['ACL', 'COLING', 'EACL', 'NAACL', 'EMNLP']\ncolors = ['#FFD700', '#800080', '#CD5C5C', '#4682B4', '#008000']\n\n# Create a pie chart\nwedges, texts, autotexts = ax.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%', startangle=90)\n\n# Set the aspect ratio of the pie chart to be equal so that pie is drawn as a circle.\nax.axis('equal')\n\n# Add a title to the pie chart\nax.set_title('NLP Conference Influence')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Create a pie chart with the data\nax.pie([25, 37.5, 15, 12.5, 25, 30], labels=[\"Coal\", \"Hydro\", \"Wind\", \"Solar\", \"Other\"], autopct='%1.1f%%', startangle=90)\n\n# Set the title of the chart\nax.set_title('Energy Consumption - National vs. Project')\n\n# Display the chart\nplt.show()\n```"}
{"file": "dataset/ori_500/quiver_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and a set of subplots\nfig, axs = plt.subplots(2, 2, figsize=(10.0, 4.0))\n\n# Set the title for each subplot\naxs[0, 0].set_title('English')\naxs[0, 1].set_title('French')\naxs[1, 0].set_title('German')\naxs[1, 1].set_title('Chinese')\n\n# Set the x-axis label for each subplot\naxs[0, 0].set_xlabel('Time (s)')\naxs[0, 1].set_xlabel('Time (s)')\naxs[1, 0].set_xlabel('Time (s)')\naxs[1, 1].set_xlabel('Time (s)')\n\n# Set the y-axis label for each subplot\naxs[0, 0].set_ylabel('Amplitude (V)')\naxs[0, 1].set_ylabel('Amplitude (V)')\naxs[1, 0].set_ylabel('Amplitude (V)')\naxs[1, 1].set_ylabel('Amplitude (V)')\n\n# Plot the data for each subplot\naxs[0, 0].plot(np.linspace(0, 10, 100), np.sin(np.linspace(0, 10, 100)), 'r-')\naxs[0, 0].plot([0, 10], [0, 0], 'k-')\naxs[0, 0].text(0.5, 0.5, '1.88', ha='center', va='center', transform=axs[0, 0].transAxes)\n\naxs[0, 1].plot(np.linspace(0, 10, 100), np.sin(np.linspace(0, 10, 100)), 'r-')\naxs[0, 1].plot([0, 10], [0, 0], 'k-')\naxs[0, 1].text(0.5, 0.5, '2.88', ha='center', va='center', transform=axs[0, 1].transAxes)\n\naxs[1, 0].plot(np.linspace(0, 10, 100), np.sin(np.linspace(0, 10, 100)), 'b-')\naxs[1, 0].plot([0, 10], [0, 0], 'k-')\naxs[1, 0].text(0.5, 0.5, '3.38', ha='center', va='center', transform=axs[1, 0].transAxes)\n\naxs[1, 1].plot(np.linspace(0, 10, 100), np.sin(np.linspace(0, 10, 100)), 'r-')\naxs[1, 1].plot([0, 10], [0, 0], 'k-')\naxs[1, 1].text(0.5, 0.5, '1.11', ha='center', va='center', transform=axs[1, 1].transAxes)\n\n# Add a legend to the plot\nfig.legend(['Out-group bias (Collectivism)', 'In-group bias (Individualism)'], loc='lower right')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/quiver_2.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(5.0, 4.0))\n\n# Set the title of the plot\nax.set_title('Language Sentiment Analysis')\n\n# Set the x-axis label\nax.set_xlabel('Time (in hours)')\n\n# Set the y-axis label\nax.set_ylabel('Sentiment Score')\n\n# Create a scatter plot for each language\nax.scatter(np.arange(10), np.random.randn(10), color='red', label='English')\nax.scatter(np.arange(10), np.random.randn(10), color='blue', label='French')\nax.scatter(np.arange(10), np.random.randn(10), color='green', label='German')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/quiver_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the background color of the plot\nax.set_facecolor('white')\n\n# Set the title of the plot\nax.set_title('SINDy Model Performance')\n\n# Set the x-axis label\nax.set_xlabel('X1')\n\n# Set the y-axis label\nax.set_ylabel('X2')\n\n# Set the x-axis limits\nax.set_xlim(0, 1)\n\n# Set the y-axis limits\nax.set_ylim(0, 1)\n\n# Set the x-axis ticks\nax.set_xticks(np.arange(0, 1.1, 0.1))\n\n# Set the y-axis ticks\nax.set_yticks(np.arange(0, 1.1, 0.1))\n\n# Set the x-axis tick labels\nax.set_xticklabels(['0.0', '0.1', '0.2', '0.3', '0.4', '0.5', '0.6', '0.7', '0.8', '0.9', '1.0'])\n\n# Set the y-axis tick labels\nax.set_yticklabels(['0.0', '0.1', '0.2', '0.3', '0.4', '0.5', '0.6', '0.7', '0.8', '0.9', '1.0'])\n\n# Set the x-axis grid lines\nax.grid(True)\n\n# Set the y-axis grid lines\nax.grid(True)\n\n# Set the x-axis grid line style\nax.grid(axis='x', linestyle='--')\n\n# Set the y-axis grid line style\nax.grid(axis='y', linestyle='--')\n\n# Set the x-axis grid line color\nax.grid(axis='x', color='gray')\n\n# Set the y-axis grid line color\nax.grid(axis='y', color='gray')\n\n# Set the x-axis grid line width\nax.grid(axis='x', linewidth=0.5)\n\n# Set the y-axis grid line width\nax.grid(axis='y', linewidth=0.5)\n\n# Set the x-axis grid line alpha\nax.grid(axis='x', alpha=0.5)\n\n# Set the y-axis grid line alpha\nax.grid(axis='y', alpha=0.5)\n\n# Set the x-axis grid line zorder\nax.grid(axis='x', zorder=1)\n\n# Set the y-axis grid line zorder\nax.grid(axis='y', zorder=1)\n\n# Set the x-axis grid line visible\nax.grid(axis='x', visible=True)\n\n# Set the y-axis grid line visible\nax.grid(axis='y', visible=True)\n\n# Set the x-axis grid line which\nax.grid(axis='x', which='major')\n\n# Set the y-axis grid line which\nax.grid(axis='y', which='major')\n\n# Set the x-axis grid line which\nax.grid(axis='x', which='minor')\n\n# Set the y-axis grid line which\nax.grid(axis='y', which='minor')\n\n# Set the x-axis grid line which\nax.grid(axis='x', which='both')\n\n# Set the y-axis grid line which\nax.grid(axis='y', which='both')\n\n# Set the x-axis grid line which\nax.grid(axis='x', which='major', linestyle='--')\n\n# Set the y-axis grid line which\nax.grid(axis='y', which='major', linestyle='--')\n\n# Set the x-axis grid line which\nax.grid(axis='x', which='minor', linestyle='--')\n\n# Set the y-axis grid line which\nax.grid(axis='y', which='minor', linestyle='--')\n\n# Set the x-axis grid line which\nax.grid(axis='x', which='both', linestyle='--')\n\n# Set the y-axis grid line which\nax.grid(axis='y', which='both', linestyle='--')\n\n# Set the x-axis grid line which\nax.grid(axis='x', which='major', linestyle='--', color='gray')\n\n# Set the y-axis grid line which\nax.grid(axis='y', which='major', linestyle='--', color='gray')\n\n# Set the x-axis grid line which\nax.grid(axis='x', which='minor', linestyle='--', color='gray')\n\n# Set the y-axis grid line which\nax.grid(axis='y', which='minor', linestyle='--', color='gray')\n\n# Set the x-axis grid line which\nax.grid(axis='x', which='both', linestyle='--', color='gray')\n\n# Set the y-axis grid line which\nax.grid(axis='y', which='both', linestyle='--', color='gray')\n\n# Set the x-axis grid line which\nax.grid(axis='x', which='major', linestyle='--', color='gray', linewidth=0.5)\n\n# Set the y-axis grid line which\nax.grid(axis='y', which='major', linestyle='--', color='gray', linewidth=0.5)\n\n# Set the x-axis grid line which\nax.grid(axis='x', which='minor', linestyle='--', color='gray', linewidth=0.5)\n\n# Set the y-axis grid line which\nax.grid(axis='y', which='minor', linestyle='--', color='gray', linewidth=0.5)\n\n# Set the x-axis grid line which\nax.grid(axis='x', which='both', linestyle='--', color='gray', linewidth=0.5)\n\n# Set the y-axis grid line which\nax.grid(axis='y', which='both', linestyle='--', color='gray', linewidth=0.5)\n\n# Set the x-axis grid line which\nax.grid(axis='x', which='major', linestyle='--', color='gray', linewidth=0.5, alpha=0.5)\n\n# Set the y-axis grid line which\nax.grid(axis='y', which='major', linestyle='--', color='gray', linewidth=0.5, alpha=0.5)\n\n# Set the x-axis grid line which\nax.grid(axis='x', which='minor', linestyle='--', color='gray', linewidth=0.5, alpha=0.5)\n\n# Set the y-axis grid line which\nax.grid(axis='y', which='minor', linestyle='--', color='gray', linewidth=0.5, alpha=0.5)\n\n# Set the x-axis grid line which\nax.grid(axis='x', which='both', linestyle='--', color='gray', linewidth=0.5, alpha=0.5)\n\n# Set the y-axis grid line which\nax.grid(axis='y', which='both', linestyle='--', color='gray', linewidth=0.5, alpha=0.5)\n\n# Set the x-axis grid line which\nax.grid(axis='x', which='major', linestyle='--', color='gray', linewidth=0.5, alpha=0.5, zorder=1)\n\n# Set the y-axis grid line which\nax.grid(axis='y', which='major', linestyle='--', color='gray', linewidth=0.5, alpha=0.5, zorder=1)\n\n# Set the x-axis grid line which\nax.grid(axis='x', which='minor', linestyle='--', color='gray', linewidth=0.5, alpha=0.5, zorder=1)\n\n# Set the y-axis grid line which\nax.grid(axis='y', which='minor', linestyle='--', color='gray', linewidth=0.5, alpha=0.5, zorder=1)\n\n# Set the x-axis grid line which\nax.grid(axis='x', which='both', linestyle='--', color='gray', linewidth=0.5, alpha=0.5, zorder=1)\n\n# Set the y-axis grid line which\nax.grid(axis='y', which='both', linestyle='--', color='gray', linewidth=0.5, alpha=0.5, zorder=1)\n\n# Set the x-axis grid line which\nax.grid(axis='x', which='major', linestyle='--', color='gray', linewidth=0.5, alpha=0.5, zorder=1, visible=True)\n\n# Set the y-axis grid line which\nax.grid(axis='y', which='major', linestyle='--', color='gray', linewidth=0.5, alpha=0.5, zorder=1, visible=True)\n\n# Set the x-axis grid line which\nax.grid(axis='x', which='minor', linestyle='--', color='gray', linewidth=0.5, alpha=0.5, zorder=1, visible=True)\n\n# Set the y-axis grid line which\nax.grid(axis='y', which='minor', linestyle='--', color='gray', linewidth=0.5, alpha=0.5, zorder=1, visible=True)\n\n# Set the x-axis grid line which\nax.grid(axis='x', which='both', linestyle='--', color='gray', linewidth=0.5, alpha=0.5, zorder=1, visible=True)\n\n# Set the y-axis grid line which\nax.grid(axis='y', which='both', linestyle='--', color='gray', linewidth=0.5, alpha=0.5, zorder=1, visible=True)\n\n# Set the x-axis grid line which\nax.grid(axis='x', which='major', linestyle='--', color='gray', linewidth=0.5, alpha=0.5, zorder=1, visible=True, which='major')\n\n# Set the y-axis grid line which\nax.grid(axis='y', which='major', linestyle='--', color='gray', linewidth=0.5, alpha=0.5, zorder=1, visible=True, which='major')\n\n# Set the x-axis grid line which\nax.grid(axis='x', which='minor', linestyle='--', color='gray', linewidth=0.5, alpha=0.5, zorder=1, visible=True, which='minor')\n\n# Set the y-axis grid line which\nax.grid(axis='y', which='minor', linestyle='--', color='gray', linewidth=0.5, alpha=0.5, zorder=1, visible=True, which='minor')\n\n# Set the x-axis grid line which\nax.grid(axis='x', which='both', linestyle='--', color='gray', linewidth=0.5, alpha=0.5, zorder=1, visible=True, which='both')\n\n# Set the y-axis grid line which\nax.grid(axis='y', which='both', linestyle='--', color='gray', linewidth=0.5, alpha=0.5, zorder=1, visible=True, which='both')\n\n# Set the x-axis grid line which\nax.grid(axis='x', which='major', linestyle='--', color='gray', linewidth=0.5, alpha=0.5, zorder=1, visible=True, which='major', linestyle='--')\n\n# Set the y-axis grid line which\nax.grid(axis='y', which='major', linestyle='--', color='gray', linewidth=0.5, alpha=0.5, zorder=1, visible=True, which='major', linestyle='--')\n\n# Set the x-axis grid line which\nax.grid(axis='x', which='minor', linestyle='--', color='gray', linewidth=0.5, alpha=0.5, zorder=1, visible=True, which='minor', linestyle='--')\n\n# Set the y-axis grid line which\nax.grid(axis='y', which='minor', linestyle='--', color='gray', linewidth=0.5, alpha=0.5, zorder=1, visible=True, which='minor', linestyle='--')\n\n# Set the x-axis grid line which\nax.grid(axis='x', which='both', linestyle='--', color='gray', linewidth=0.5, alpha=0.5, zorder=1, visible=True, which='both', linestyle='--')\n\n# Set the y-axis grid line which\nax.grid(axis='y', which='both', linestyle='--', color='gray', linewidth=0.5, alpha=0.5, zorder=1, visible=True, which='both', linestyle='--')\n\n# Set the x-axis grid line which\nax.grid(axis='x', which='major', linestyle='--', color='gray', linewidth=0.5, alpha=0.5, zorder=1, visible=True, which='major', linestyle='--', color='gray')\n\n# Set the y-axis grid line which\nax.grid(axis='y', which='major', linestyle='--', color='gray', linewidth=0.5, alpha=0.5, zorder=1, visible=True, which='major', linestyle='--', color='gray')\n\n# Set the x-axis grid line which\nax.grid(axis='x', which='minor', linestyle='--', color='gray', linewidth=0.5, alpha=0.5, zorder=1, visible=True, which='minor', linestyle='--', color='gray')\n\n# Set the y-axis grid line which\nax.grid(axis='y', which='minor', linestyle='--', color='gray', linewidth=0.5, alpha=0.5, zorder=1, visible=True, which='minor', linestyle='--', color='gray')\n\n# Set the x-axis grid line which\nax.grid(axis='x', which='both', linestyle='--', color='gray', linewidth=0.5, alpha=0.5, zorder=1, visible=True, which='both', linestyle='--', color='gray')\n\n# Set the y-axis grid line which\nax.grid(axis='y', which='both', linestyle='--', color='gray', linewidth=0.5, alpha=0.5, zorder=1, visible=True, which='both', linestyle='--', color='gray')\n\n# Set the x-axis grid line which\nax.grid(axis='x', which='major', linestyle='--', color='gray', linewidth=0.5, alpha=0.5, zorder=1, visible=True, which='major', linestyle='--', color='gray', linewidth=0.5)\n\n# Set the y-axis grid line which\nax.grid(axis='y', which='major', linestyle='--', color='gray', linewidth=0.5, alpha=0.5, zorder=1, visible=True, which='major', linestyle='--', color='gray', linewidth=0.5)\n\n# Set the x-axis grid line which\nax.grid(axis='x', which='minor', linestyle='--', color='gray', linewidth=0.5, alpha=0.5, zorder=1, visible=True, which='minor', linestyle='--', color='gray', linewidth=0.5)\n\n# Set the y-axis grid line which\nax.grid(axis='y', which='minor', linestyle='--', color='gray', linewidth=0.5, alpha=0.5, zorder=1, visible=True, which='minor', linestyle='--', color='gray', linewidth=0.5)\n\n# Set the x-axis grid line which\nax.grid(axis='x', which='both', linestyle='--', color='gray', linewidth=0.5, alpha=0.5, zorder=1, visible=True, which='both', linestyle='--', color='gray', linewidth=0.5)\n\n# Set the y-axis grid line which\nax.grid(axis='y', which='both', linestyle='--', color='gray', linewidth=0.5, alpha=0.5, zorder=1, visible=True, which='both', linestyle='--', color='gray', linewidth=0.5)\n\n# Set the x-axis grid line which\nax.grid(axis='x', which='major', linestyle='--', color='gray', linewidth=0.5, alpha=0.5, zorder=1, visible=True, which='major', linestyle='--', color='gray', linewidth=0.5, alpha=0.5)\n\n# Set the y-axis grid line which\nax.grid(axis='y', which='major', linestyle='--', color='gray', linewidth=0.5, alpha=0.5, zorder=1, visible=True, which='major', linestyle='--', color='gray', linewidth=0.5, alpha=0.5)\n\n# Set the x-axis grid line which\nax.grid(axis='x', which='minor', linestyle='--', color='gray', linewidth=0.5, alpha=0.5, zorder=1, visible=True, which='minor', linestyle='--', color='gray', linewidth=0.5, alpha=0.5)\n\n# Set the y-axis grid line which\nax.grid(axis='y', which='minor', linestyle='--', color='gray', linewidth=0.5, alpha=0.5, zorder=1, visible=True, which='minor', linestyle='--', color='gray', linewidth=0.5, alpha=0.5)\n\n# Set the x-axis grid line which\nax.grid(axis='x', which='both', linestyle='--', color='gray', linewidth=0.5, alpha=0.5, zorder=1, visible=True, which='both', linestyle='--', color='gray', linewidth=0.5, alpha=0.5)\n\n# Set the y-axis grid line which\nax.grid(axis='y', which='both', linestyle='--', color='gray', linewidth=0.5, alpha=0.5, zorder=1, visible=True, which='both', linestyle='--', color='gray', linewidth=0.5, alpha=0.5)\n\n# Set the x-axis grid line which\nax.grid(axis='x', which='major', linestyle='--', color='gray', linewidth=0.5, alpha=0.5, zorder=1, visible=True, which='major', linestyle='--', color='gray', linewidth=0.5, alpha=0.5, zorder=1)\n\n# Set the y-axis grid line which\nax.grid(axis='y', which='major', linestyle='--', color='gray', linewidth=0.5, alpha=0.5, zorder=1, visible=True, which='major', linestyle='--', color='gray', linewidth=0.5, alpha=0.5, zorder=1)\n\n# Set the x-axis grid line which\nax.grid(axis='x', which='minor', linestyle='--', color='gray', linewidth=0.5, alpha=0.5, zorder=1, visible=True, which='minor', linestyle='--', color='gray', linewidth=0.5, alpha=0.5, zorder=1)\n\n# Set the y-axis grid line which\nax.grid(axis='y', which='minor', linestyle='--', color='gray', linewidth=0.5, alpha=0.5, zorder=1, visible=True, which='minor', linestyle='--', color='gray', linewidth=0.5, alpha=0.5, zorder=1)\n\n# Set the x-axis grid line which\nax.grid(axis"}
{"file": "dataset/ori_500/quiver_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(5.0, 4.0))\n\n# Set the title of the plot\nax.set_title('Vector Field: -F + \u03c1\u2207FF (Small \u03c1)')\n\n# Create a grid of points\nx = np.linspace(-1, 1, 100)\ny = np.linspace(-1, 1, 100)\nX, Y = np.meshgrid(x, y)\n\n# Define the vector field\nU = -X**2 - Y**2\nV = X**2 + Y**2\n\n# Plot the vector field\nQ = ax.quiver(X, Y, U, V, color='b', scale=20)\n\n# Set the limits of the plot\nax.set_xlim(-1, 1)\nax.set_ylim(-1, 1)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/quiver_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(6.0, 5.0))\n\n# Set the title of the plot\nax.set_title('Magnetic Field $\\mathbf{B}$ in Tesla units')\n\n# Create a grid of points\nx = np.linspace(-2.0, 2.0, 100)\ny = np.linspace(-2.0, 2.0, 100)\nX, Y = np.meshgrid(x, y)\n\n# Define the magnetic field function\ndef B(x, y):\n    return np.sin(np.sqrt(x**2 + y**2)) / (x**2 + y**2)\n\n# Compute the magnetic field values\nZ = B(X, Y)\n\n# Plot the magnetic field using contourf\nc = ax.contourf(X, Y, Z, cmap='viridis')\n\n# Add a colorbar to the plot\nfig.colorbar(c)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 7.0))\n\n# Set the title of the plot\nax.set_title('TextVQA')\n\n# Create a circle patch\ncircle = plt.Circle((0.5, 0.5), 0.4, color='black')\nax.add_artist(circle)\n\n# Create a rectangle patch\nrectangle = plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='blue')\nax.add_patch(rectangle)\n\n# Create a polygon patch\npolygon = plt.Polygon([[0.1, 0.1], [0.3, 0.9], [0.9, 0.3]], color='red')\nax.add_patch(polygon)\n\n# Create a scatter plot\nx = np.random.rand(10)\ny = np.random.rand(10)\nax.scatter(x, y, color='green')\n\n# Create a bar chart\nbar_width = 0.35\nindex = np.arange(len(x))\nbars = ax.bar(index, y, bar_width, color='yellow')\n\n# Create a pie chart\nlabels = ['Red', 'Green', 'Blue']\nsizes = [15, 30, 55]\nax.pie(sizes, labels=labels, colors=['red', 'green', 'blue'])\n\n# Create a histogram\ndata = np.random.randn(1000)\nax.hist(data, bins=30, color='purple')\n\n# Create a line plot\nx_line = np.linspace(0, 10, 100)\ny_line = np.sin(x_line)\nax.plot(x_line, y_line, color='orange')\n\n# Create a text box\nax.text(0.1, 0.9, 'Text(0.1, 100.0, \\'TextVQA\\')', fontsize=12, color='red')\nax.text(0.1, 0.8, 'Text(0.7747361451096296, \\'SQA-I\\')', fontsize=12, color='blue')\n\n# Set the aspect ratio of the plot\nax.set_aspect('equal')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(5.0, 5.0))\n\n# Set the title of the plot\nax.set_title('XNLI (speed-up ratio: 4)')\n\n# Define the colors for the plots\ncolors = ['pink', 'green', 'blue', 'red']\n\n# Define the labels for the plots\nlabels = ['fr', 'es', 'en', 'el', 'de', 'bg', 'sw', 'ar', 'ur', 'vi', 'zh', 'ru', 'th', 'tr']\n\n# Define the data for the plots\ndata = [20, 40, 60, 80]\n\n# Create a pie chart\nwedges, texts, autotexts = ax.pie(data, startangle=90, colors=colors, autopct='%1.1f%%', textprops=dict(color=\"w\"))\n\n# Add the labels to the pie chart\nfor i, label in enumerate(labels):\n    ax.text(0.5, 0.5, label, transform=ax.transAxes, fontsize=12, ha='center', va='center')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(4.0, 4.0))\n\n# Draw a circle\ncircle = plt.Circle((0.5, 0.5), 0.4, color='blue', fill=False)\nax.add_artist(circle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='green', fill=False)\nax.add_artist(rectangle)\n\n# Draw a polygon\npolygon = plt.Polygon([[0.1, 0.1], [0.3, 0.9], [0.9, 0.3], [0.7, 0.1]], color='red', fill=False)\nax.add_artist(polygon)\n\n# Set the aspect ratio of the plot to be equal\nax.set_aspect('equal')\n\n# Set the limits of the plot\nax.set_xlim(0, 1)\nax.set_ylim(0, 1)\n\n# Set the title of the plot\nax.set_title('Reflection')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the background color of the plot\nax.set_facecolor('black')\n\n# Set the title of the plot\nax.set_title('Global News', color='white')\n\n# Set the labels for the x and y axes\nax.set_xlabel('Time')\nax.set_ylabel('News Sentiment')\n\n# Set the tick labels to white\nax.tick_params(axis='both', colors='white')\n\n# Set the grid lines to white\nax.grid(color='white')\n\n# Set the limits of the x and y axes\nax.set_xlim(0, 1)\nax.set_ylim(-1, 1)\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='blue', alpha=0.5)\nax.add_patch(rect)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.5, 0.5), 0.3, color='red', alpha=0.5)\nax.add_artist(circle)\n\n# Add a line to the plot\nline, = ax.plot([0.1, 0.9], [0.1, 0.9], 'g-')\n\n# Add a scatter plot to the plot\nscatter = ax.scatter([0.1, 0.9], [0.1, 0.9], s=100, c='yellow')\n\n# Add a text annotation to the plot\ntext = ax.text(0.5, 0.5, 'Global News', fontsize=12, ha='center', va='center', color='white')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Set the title of the plot\nax.set_title('My Favorite Places')\n\n# Define the categories and their colors\ncategories = ['video game', 'programming world', 'universe', 'fairy tale', 'country', 'special place', 'cultural event']\ncolors = ['blue', 'green', 'red', 'purple', 'orange', 'cyan', 'magenta']\n\n# Define the angles for each category\nangles = np.linspace(0, 2 * np.pi, len(categories), endpoint=False).tolist()\nangles += angles[:1]  # repeat the first angle to close the circle\n\n# Define the values for each category\nvalues = [0.8, 0.6, 0.4, 0.2, 0.6, 0.8, 0.2]\nvalues += values[:1]  # repeat the first value to close the circle\n\n# Plot the radar chart\nax.plot(angles, values, 'o-', linewidth=2, markersize=10)\nax.fill(angles, values, alpha=0.25)\n\n# Set the category labels\nax.set_xticks(angles[:-1])\nax.set_xticklabels(categories)\n\n# Add a legend\nax.legend(loc='upper right', bbox_to_anchor=(0.1, 0.1))\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Roleplay')\n\n# Define the colors for the sectors\ncolors = ['blue', 'orange', 'green', 'red']\n\n# Define the labels for the sectors\nlabels = ['Reasoning', 'Writing', 'Math', 'Coding', 'Extraction', 'Humanities', 'STEM']\n\n# Define the sizes of the sectors\nsizes = [15, 30, 45, 10, 10, 10, 5]\n\n# Draw the pie chart\nwedges, texts, autotexts = ax.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%', startangle=90)\n\n# Add a legend\nax.legend(wedges, labels,\n          title=\"Subjects\",\n          loc=\"center left\",\n          bbox_to_anchor=(1, 0, 0.5, 1))\n\n# Set the aspect ratio to be equal so that pie is drawn as a circle.\nax.axis('equal')  \n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Set the title of the plot\nax.set_title('MUJI vs Nestle in Food Safety')\n\n# Draw a circle around the plot\ncircle = plt.Circle((0.5, 0.5), 0.4, color='black')\nax.add_artist(circle)\n\n# Draw a rectangle for the nutrition section\nnutrition = plt.Rectangle((0.2, 0.6), 0.6, 0.2, color='orange')\nax.add_artist(nutrition)\n\n# Draw a rectangle for the labeling section\nlabeling = plt.Rectangle((0.2, 0.3), 0.6, 0.2, color='red')\nax.add_artist(labeling)\n\n# Draw a rectangle for the material section\nmaterial = plt.Rectangle((0.2, 0.1), 0.6, 0.2, color='green')\nax.add_artist(material)\n\n# Draw a rectangle for the storage section\nstorage = plt.Rectangle((0.7, 0.5), 0.2, 0.4, color='pink')\nax.add_artist(storage)\n\n# Draw a rectangle for the recall section\nrecall = plt.Rectangle((0.7, 0.1), 0.2, 0.4, color='blue')\nax.add_artist(recall)\n\n# Draw a rectangle for the compliance section\ncompliance = plt.Rectangle((0.1, 0.5), 0.2, 0.4, color='yellow')\nax.add_artist(compliance)\n\n# Draw a rectangle for the pollution section\npollution = plt.Rectangle((0.1, 0.1), 0.2, 0.4, color='purple')\nax.add_artist(pollution)\n\n# Draw a rectangle for the purity section\npurity = plt.Rectangle((0.5, 0.7), 0.4, 0.2, color='brown')\nax.add_artist(purity)\n\n# Draw a rectangle for the allergen section\nallergen = plt.Rectangle((0.5, 0.4), 0.4, 0.2, color='cyan')\nax.add_artist(allergen)\n\n# Draw a rectangle for the nestle section\nnestle = plt.Rectangle((0.9, 0.9), 0.1, 0.1, color='red')\nax.add_artist(nestle)\n\n# Draw a rectangle for the muji section\nmuji = plt.Rectangle((0.9, 0.7), 0.1, 0.1, color='green')\nax.add_artist(muji)\n\n# Draw a rectangle for the logo\nlogo = plt.Rectangle((0.45, 0.9), 0.1, 0.1, color='black')\nax.add_artist(logo)\n\n# Draw a rectangle for the footer\nfooter = plt.Rectangle((0.45, 0.1), 0.1, 0.1, color='black')\nax.add_artist(footer)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_16.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 7.0))\n\n# Set the background color of the plot\nax.set_facecolor('black')\n\n# Set the title of the plot\nax.set_title('Global Stock Market', color='white')\n\n# Set the labels for the x-axis and y-axis\nax.set_xlabel('Time', color='white')\nax.set_ylabel('Stock Price', color='white')\n\n# Set the tick colors\nax.tick_params(axis='x', colors='white')\nax.tick_params(axis='y', colors='white')\n\n# Set the grid lines\nax.grid(True, color='white')\n\n# Set the data for the plot\nx = np.arange(1, 11)\ny = np.array([85.8, 78.7, 76.1, 74.9, 73.7, 72.5, 71.3, 70.1, 69.0, 67.9])\n\n# Plot the data\nax.plot(x, y, 'o-', color='orange')\n\n# Set the legend\nax.legend(['Apple'], loc='upper left')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_17.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Create a circle for the radar chart\ncircle = plt.Circle((0.5, 0.5), 0.4, color='black', fill=False)\nax.add_artist(circle)\n\n# Set the limits of the plot\nax.set_xlim(0, 1)\nax.set_ylim(0, 1)\n\n# Set the aspect ratio to be equal\nax.set_aspect('equal')\n\n# Add a title to the plot\nax.set_title('Radar Chart')\n\n# Add a legend to the plot\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_18.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Set the title of the plot\nax.set_title('Amusement Park Comparison: Disney vs Universal Studios')\n\n# Create a circle for the park map\ncircle = plt.Circle((0.5, 0.5), 0.4, color='orange')\nax.add_artist(circle)\n\n# Add labels for the different areas\nax.text(0.5, 0.6, 'Food Quality', horizontalalignment='center', verticalalignment='center')\nax.text(0.5, 0.4, 'Shows', horizontalalignment='center', verticalalignment='center')\nax.text(0.5, 0.2, 'Staff', horizontalalignment='center', verticalalignment='center')\nax.text(0.5, 0.8, 'Cleanliness', horizontalalignment='center', verticalalignment='center')\nax.text(0.5, 0.1, 'Wait Times', horizontalalignment='center', verticalalignment='center')\nax.text(0.5, 0.9, 'Ticket Price', horizontalalignment='center', verticalalignment='center')\nax.text(0.3, 0.5, 'Thrill Rides', horizontalalignment='center', verticalalignment='center')\nax.text(0.7, 0.5, 'Family Rides', horizontalalignment='center', verticalalignment='center')\nax.text(0.2, 0.5, 'Parking', horizontalalignment='center', verticalalignment='center')\nax.text(0.8, 0.5, 'Souvenirs', horizontalalignment='center', verticalalignment='center')\n\n# Add a legend with the park names\nlegend_elements = [plt.Line2D([0], [0], marker='o', color='w', label='Disney', markerfacecolor='orange', markersize=10),\n                    plt.Line2D([0], [0], marker='o', color='w', label='Universal Studios', markerfacecolor='purple', markersize=10)]\nax.legend(handles=legend_elements, loc='upper right')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_19.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Fashion Brand Popularity')\n\n# Define the colors for the brands\ncolors = ['yellow', 'silver', 'green']\n\n# Define the labels for the brands\nlabels = ['Chanel', 'Dior', 'Gucci']\n\n# Define the sizes of the brands\nsizes = [15, 30, 45]\n\n# Create a pie chart\nwedges, texts, autotexts = ax.pie(sizes, colors=colors, labels=labels, autopct='%1.1f%%', startangle=90)\n\n# Add a legend\nax.legend(wedges, labels,\n          title=\"Brands\",\n          loc=\"center left\",\n          bbox_to_anchor=(1, 0, 0.5, 1))\n\n# Set the aspect ratio of the plot to be equal\nax.axis('equal')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 7.0))\n\n# Set the title of the plot\nax.set_title('POPE')\n\n# Create a circle patch\ncircle = plt.Circle((0.5, 0.5), 0.4, color='blue')\nax.add_artist(circle)\n\n# Create a rectangle patch\nrectangle = plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='red')\nax.add_patch(rectangle)\n\n# Create a polygon patch\npolygon = plt.Polygon([[0.1, 0.1], [0.3, 0.9], [0.9, 0.9], [0.7, 0.1]], color='green')\nax.add_patch(polygon)\n\n# Create a scatter plot\nx = np.random.rand(10)\ny = np.random.rand(10)\nax.scatter(x, y, color='purple')\n\n# Create a bar chart\nheights = [10, 20, 30, 40, 50]\nbars = ax.bar(range(len(heights)), heights, color='orange')\n\n# Create a pie chart\nsizes = [10, 20, 30, 40, 50]\nax.pie(sizes, colors=['cyan', 'magenta', 'yellow', 'black', 'white'])\n\n# Create a histogram\ndata = np.random.randn(1000)\nax.hist(data, bins=30, color='grey')\n\n# Create a line plot\nx = np.linspace(0, 10, 100)\ny = np.sin(x)\nax.plot(x, y, color='brown')\n\n# Create a heatmap\ndata = np.random.rand(10, 10)\nim = ax.imshow(data, cmap='hot', interpolation='nearest')\n\n# Create a contour plot\nx = np.linspace(-5, 5, 100)\ny = np.linspace(-5, 5, 100)\nX, Y = np.meshgrid(x, y)\nZ = np.sin(np.sqrt(X**2 + Y**2))\nCS = ax.contourf(X, Y, Z, locator=plt.LogLocator(), cmap='coolwarm')\n\n# Create a streamplot\nx = np.linspace(-3, 3, 100)\ny = np.linspace(-3, 3, 100)\nX, Y = np.meshgrid(x, y)\nU = -1 - X**2 + Y\nV = 1 + X - Y**2\nax.streamplot(X, Y, U, V, color='pink')\n\n# Create a polar plot\ntheta = np.linspace(0, 2*np.pi, 100)\nr = np.cos(theta)\nax.polar(theta, r, color='purple')\n\n# Create a 3D plot\nfrom mpl_toolkits.mplot3d import Axes3D\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nx = np.linspace(-5, 5, 100)\ny = np.linspace(-5, 5, 100)\nX, Y = np.meshgrid(x, y)\nZ = np.sin(np.sqrt(X**2 + Y**2))\nax.plot_surface(X, Y, Z, color='orange')\n\n# Create a 3D scatter plot\nx = np.random.rand(100)\ny = np.random.rand(100)\nz = np.random.rand(100)\nax.scatter(x, y, z, color='green')\n\n# Create a 3D bar chart\nx = np.arange(5)\ny = np.arange(5)\nx, y = np.meshgrid(x, y)\nz = np.random.rand(5, 5)\nax.bar3d(x.ravel(), y.ravel(), np.zeros_like(z).ravel(), 1, 1, z.ravel(), color='blue')\n\n# Create a 3D contour plot\nx = np.linspace(-5, 5, 100)\ny = np.linspace(-5, 5, 100)\nX, Y = np.meshgrid(x, y)\nZ = np.sin(np.sqrt(X**2 + Y**2))\nax.contour3D(X, Y, Z, 50, cmap='coolwarm')\n\n# Create a 3D streamplot\nx = np.linspace(-3, 3, 100)\ny = np.linspace(-3, 3, 100)\nX, Y = np.meshgrid(x, y)\nU = -1 - X**2 + Y\nV = 1 + X - Y**2\nax.streamplot3D(X, Y, U, V, color='pink')\n\n# Create a 3D polar plot\ntheta = np.linspace(0, 2*np.pi, 100)\nr = np.cos(theta)\nax.plot_polar(theta, r, color='purple')\n\n# Create a 3D surface plot\nx = np.linspace(-5, 5, 100)\ny = np.linspace(-5, 5, 100)\nX, Y = np.meshgrid(x, y)\nZ = np.sin(np.sqrt(X**2 + Y**2))\nax.plot_surface(X, Y, Z, color='orange')\n\n# Create a 3D scatter plot\nx = np.random.rand(100)\ny = np.random.rand(100)\nz = np.random.rand(100)\nax.scatter(x, y, z, color='green')\n\n# Create a 3D bar chart\nx = np.arange(5)\ny = np.arange(5)\nx, y = np.meshgrid(x, y)\nz = np.random.rand(5, 5)\nax.bar3d(x.ravel(), y.ravel(), np.zeros_like(z).ravel(), 1, 1, z.ravel(), color='blue')\n\n# Create a 3D contour plot\nx = np.linspace(-5, 5, 100)\ny = np.linspace(-5, 5, 100)\nX, Y = np.meshgrid(x, y)\nZ = np.sin(np.sqrt(X**2 + Y**2))\nax.contour3D(X, Y, Z, 50, cmap='coolwarm')\n\n# Create a 3D streamplot\nx = np.linspace(-3, 3, 100)\ny = np.linspace(-3, 3, 100)\nX, Y = np.meshgrid(x, y)\nU = -1 - X**2 + Y\nV = 1 + X - Y**2\nax.streamplot3D(X, Y, U, V, color='pink')\n\n# Create a 3D polar plot\ntheta = np.linspace(0, 2*np.pi, 100)\nr = np.cos(theta)\nax.plot_polar(theta, r, color='purple')\n\n# Create a 3D surface plot\nx = np.linspace(-5, 5, 100)\ny = np.linspace(-5, 5, 100)\nX, Y = np.meshgrid(x, y)\nZ = np.sin(np.sqrt(X**2 + Y**2))\nax.plot_surface(X, Y, Z, color='orange')\n\n# Create a 3D scatter plot\nx = np.random.rand(100)\ny = np.random.rand(100)\nz = np.random.rand(100)\nax.scatter(x, y, z, color='green')\n\n# Create a 3D bar chart\nx = np.arange(5)\ny = np.arange(5)\nx, y = np.meshgrid(x, y)\nz = np.random.rand(5, 5)\nax.bar3d(x.ravel(), y.ravel(), np.zeros_like(z).ravel(), 1, 1, z.ravel(), color='blue')\n\n# Create a 3D contour plot\nx = np.linspace(-5, 5, 100)\ny = np.linspace(-5, 5, 100)\nX, Y = np.meshgrid(x, y)\nZ = np.sin(np.sqrt(X**2 + Y**2))\nax.contour3D(X, Y, Z, 50, cmap='coolwarm')\n\n# Create a 3D streamplot\nx = np.linspace(-3, 3, 100)\ny = np.linspace(-3, 3, 100)\nX, Y = np.meshgrid(x, y)\nU = -1 - X**2 + Y\nV = 1 + X - Y**2\nax.streamplot3D(X, Y, U, V, color='pink')\n\n# Create a 3D polar plot\ntheta = np.linspace(0, 2*np.pi, 100)\nr = np.cos(theta)\nax.plot_polar(theta, r, color='purple')\n\n# Create a 3D surface plot\nx = np.linspace(-5, 5, 100)\ny = np.linspace(-5, 5, 100)\nX, Y = np.meshgrid(x, y)\nZ = np.sin(np.sqrt(X**2 + Y**2))\nax.plot_surface(X, Y, Z, color='orange')\n\n# Create a 3D scatter plot\nx = np.random.rand(100)\ny = np.random.rand(100)\nz = np.random.rand(100)\nax.scatter(x, y, z, color='green')\n\n# Create a 3D bar chart\nx = np.arange(5)\ny = np.arange(5)\nx, y = np.meshgrid(x, y)\nz = np.random.rand(5, 5)\nax.bar3d(x.ravel(), y.ravel(), np.zeros_like(z).ravel(), 1, 1, z.ravel(), color='blue')\n\n# Create a 3D contour plot\nx = np.linspace(-5, 5, 100)\ny = np.linspace(-5, 5, 100)\nX, Y = np.meshgrid(x, y)\nZ = np.sin(np.sqrt(X**2 + Y**2))\nax.contour3D(X, Y, Z, 50, cmap='coolwarm')\n\n# Create a 3D streamplot\nx = np.linspace(-3, 3, 100)\ny = np.linspace(-3, 3, 100)\nX, Y = np.meshgrid(x, y)\nU = -1 - X**2 + Y\nV = 1 + X - Y**2\nax.streamplot3D(X, Y, U, V, color='pink')\n\n# Create a 3D polar plot\ntheta = np.linspace(0, 2*np.pi, 100)\nr = np.cos(theta)\nax.plot_polar(theta, r, color='purple')\n\n# Create a 3D surface plot\nx = np.linspace(-5, 5, 100)\ny = np.linspace(-5, 5, 100)\nX, Y = np.meshgrid(x, y)\nZ = np.sin(np.sqrt(X**2 + Y**2))\nax.plot_surface(X, Y, Z, color='orange')\n\n# Create a 3D scatter plot\nx = np.random.rand(100)\ny = np.random.rand(100)\nz = np.random.rand(100)\nax.scatter(x, y, z, color='green')\n\n# Create a 3D bar chart\nx = np.arange(5)\ny = np.arange(5)\nx, y = np.meshgrid(x, y)\nz = np.random.rand(5, 5)\nax.bar3d(x.ravel(), y.ravel(), np.zeros_like(z).ravel(), 1, 1, z.ravel(), color='blue')\n\n# Create a 3D contour plot\nx = np.linspace(-5, 5, 100)\ny = np.linspace(-5, 5, 100)\nX, Y = np.meshgrid(x, y)\nZ = np.sin(np.sqrt(X**2 + Y**2))\nax.contour3D(X, Y, Z, 50, cmap='coolwarm')\n\n# Create a 3D streamplot\nx = np.linspace(-3, 3, 100)\ny = np.linspace(-3, 3, 100)\nX, Y = np.meshgrid(x, y)\nU = -1 - X**2 + Y\nV = 1 + X - Y**2\nax.streamplot3D(X, Y, U, V, color='pink')\n\n# Create a 3D polar plot\ntheta = np.linspace(0, 2*np.pi, 100)\nr = np.cos(theta)\nax.plot_polar(theta, r, color='purple')\n\n# Create a 3D surface plot\nx = np.linspace(-5, 5, 100)\ny = np.linspace(-5, 5, 100)\nX, Y = np.meshgrid(x, y)\nZ = np.sin(np.sqrt(X**2 + Y**2))\nax.plot_surface(X, Y, Z, color='orange')\n\n# Create a 3D scatter plot\nx = np.random.rand(100)\ny = np.random.rand(100)\nz = np.random.rand(100)\nax.scatter(x, y, z, color='green')\n\n# Create a 3D bar chart\nx = np.arange(5)\ny = np.arange(5)\nx, y = np.meshgrid(x, y)\nz = np.random.rand(5, 5)\nax.bar3d(x.ravel(), y.ravel(), np.zeros_like(z).ravel(), 1, 1, z.ravel(), color='blue')\n\n# Create a 3D contour plot\nx = np.linspace(-5, 5, 100)\ny = np.linspace(-5, 5, 100)\nX, Y = np.meshgrid(x, y)\nZ = np.sin(np.sqrt(X**2 + Y**2))\nax.contour3D(X, Y, Z, 50, cmap='coolwarm')\n\n# Create a 3D streamplot\nx = np.linspace(-3, 3, 100)\ny = np.linspace(-3, 3, 100)\nX, Y = np.meshgrid(x, y)\nU = -1 - X**2 + Y\nV = 1 + X - Y**2\nax.streamplot3D(X, Y, U, V, color='pink')\n\n# Create a 3D polar plot\ntheta = np.linspace(0, 2*np.pi, 100)\nr = np.cos(theta)\nax.plot_polar(theta, r, color='purple')\n\n# Create a 3D surface plot\nx = np.linspace(-5, 5, 100)\ny = np.linspace(-5, 5, 100)\nX, Y = np.meshgrid(x, y)\nZ = np.sin(np.sqrt(X**2 + Y**2))\nax.plot_surface(X, Y, Z, color='orange')\n\n# Create a 3D scatter plot\nx = np.random.rand(100)\ny = np.random.rand(100)\nz = np.random.rand(100)\nax.scatter(x, y, z, color='green')\n\n# Create a 3D bar chart\nx = np.arange(5)\ny = np.arange(5)\nx, y = np.meshgrid(x, y)\nz = np.random.rand(5, 5)\nax.bar3d(x.ravel(), y.ravel(), np.zeros_like(z).ravel(), 1, 1, z.ravel(), color='blue')\n\n# Create a 3D contour plot\nx = np.linspace(-5, 5, 100)\ny = np.linspace(-5, 5, 100)\nX, Y = np.meshgrid(x, y)\nZ = np.sin(np.sqrt(X**2 + Y**2))\nax.contour3D(X, Y, Z, 50, cmap='coolwarm')\n\n# Create a 3D streamplot\nx = np.linspace(-3, 3, 100)\ny = np.linspace(-3, 3, 100)\nX, Y = np.meshgrid(x, y)\nU = -1 - X**2 + Y\nV = 1 + X - Y**2\nax.streamplot3D(X, Y, U, V, color='pink')\n\n# Create a 3D polar plot\ntheta = np.linspace(0, 2*np.pi, 100)\nr = np.cos(theta)\nax.plot_polar(theta, r, color='purple')\n\n# Create a 3D surface plot\nx = np.linspace(-5, 5, 100)\ny = np.linspace(-5, 5, 100)\nX, Y = np.meshgrid(x, y)\nZ = np.sin(np.sqrt(X**2 + Y**2))\nax.plot_surface(X, Y, Z, color='orange')\n\n# Create a 3D scatter plot\nx = np.random.rand(100)\ny = np.random.rand(100)\nz = np.random.rand(100)\nax.scatter(x, y, z, color='green')\n\n# Create a 3D bar chart\nx = np.arange(5)\ny = np.arange(5)\nx, y = np.meshgrid(x, y)\nz = np.random.rand(5, 5)\nax.bar3d(x.ravel(), y.ravel(), np.zeros_like(z).ravel(), 1, 1, z.ravel(), color='blue')\n\n# Create a 3D contour plot\nx = np.linspace(-5, 5, 100)\ny = np.linspace(-5, 5, 100)\nX, Y = np.meshgrid(x, y)\nZ = np.sin(np.sqrt(X**2 + Y**2))\nax.contour3D(X, Y, Z, 50, cmap='coolwarm')\n\n# Create a 3D streamplot\nx = np.linspace(-3, 3, 100)\ny = np.linspace(-3, 3, 100)\nX, Y = np.meshgrid(x, y)\nU = -1 - X**2 + Y\nV = 1 + X - Y**2\nax.streamplot3D(X, Y, U, V, color='pink')\n\n# Create a 3D polar plot\ntheta = np.linspace(0, 2*np.pi, 100)\nr = np.cos(theta)\nax.plot_polar(theta, r, color='purple')\n\n# Create a 3D surface plot\nx = np.linspace(-5, 5, 100)\ny = np.linspace(-5, 5, 100)\nX, Y = np.meshgrid(x, y)\nZ = np.sin(np.sqrt(X**2 + Y**2))\nax.plot_surface(X, Y, Z,"}
{"file": "dataset/ori_500/radar_20.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(18.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Perfume Brand Comparison')\n\n# Create a scatter plot\nx = np.random.rand(50)\ny = np.random.rand(50)\nax.scatter(x, y)\n\n# Add labels to the plot\nax.set_xlabel('X Label')\nax.set_ylabel('Y Label')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Set the aspect ratio of the plot to be equal\nax.set_aspect('equal')\n\n# Draw a circle with a radius of 1 centered at (0,0)\ncircle = plt.Circle((0,0), 1, color='black')\nax.add_artist(circle)\n\n# Draw a rectangle with a width of 2 and height of 1 centered at (0,0)\nrectangle = plt.Rectangle((-1,-0.5), 2, 1, color='red')\nax.add_artist(rectangle)\n\n# Draw a polygon with 6 sides centered at (0,0)\npolygon = plt.Polygon(np.array([[0,0], [1,1], [-1,1], [-1,-1], [1,-1], [0,0]]), color='blue')\nax.add_artist(polygon)\n\n# Draw a scatter plot with 5 points centered at (0,0)\nscatter = plt.scatter([0,1,-1,0,0], [0,0,0,1,-1], color='green')\nax.add_artist(scatter)\n\n# Draw a line plot with 5 points centered at (0,0)\nline = plt.plot([0,1,-1,0,0], [0,0,0,1,-1], color='yellow')\nax.add_artist(line)\n\n# Draw a bar chart with 5 bars centered at (0,0)\nbar = plt.bar([0,1,-1,0,0], [0,1,-1,0,1], color='orange')\nax.add_artist(bar)\n\n# Draw a pie chart with 5 slices centered at (0,0)\npie = plt.pie([0.1, 0.2, 0.3, 0.4, 0.5], colors=['cyan', 'magenta', 'yellow', 'black', 'white'])\nax.add_artist(pie)\n\n# Draw a histogram with 5 bins centered at (0,0)\nhist = plt.hist([0,1,-1,0,0], bins=5, color='gray')\nax.add_artist(hist)\n\n# Draw a scatter plot with 5 points centered at (0,0)\nscatter = plt.scatter([0,1,-1,0,0], [0,0,0,1,-1], color='green')\nax.add_artist(scatter)\n\n# Draw a line plot with 5 points centered at (0,0)\nline = plt.plot([0,1,-1,0,0], [0,0,0,1,-1], color='yellow')\nax.add_artist(line)\n\n# Draw a bar chart with 5 bars centered at (0,0)\nbar = plt.bar([0,1,-1,0,0], [0,1,-1,0,1], color='orange')\nax.add_artist(bar)\n\n# Draw a pie chart with 5 slices centered at (0,0)\npie = plt.pie([0.1, 0.2, 0.3, 0.4, 0.5], colors=['cyan', 'magenta', 'yellow', 'black', 'white'])\nax.add_artist(pie)\n\n# Draw a histogram with 5 bins centered at (0,0)\nhist = plt.hist([0,1,-1,0,0], bins=5, color='gray')\nax.add_artist(hist)\n\n# Draw a scatter plot with 5 points centered at (0,0)\nscatter = plt.scatter([0,1,-1,0,0], [0,0,0,1,-1], color='green')\nax.add_artist(scatter)\n\n# Draw a line plot with 5 points centered at (0,0)\nline = plt.plot([0,1,-1,0,0], [0,0,0,1,-1], color='yellow')\nax.add_artist(line)\n\n# Draw a bar chart with 5 bars centered at (0,0)\nbar = plt.bar([0,1,-1,0,0], [0,1,-1,0,1], color='orange')\nax.add_artist(bar)\n\n# Draw a pie chart with 5 slices centered at (0,0)\npie = plt.pie([0.1, 0.2, 0.3, 0.4, 0.5], colors=['cyan', 'magenta', 'yellow', 'black', 'white'])\nax.add_artist(pie)\n\n# Draw a histogram with 5 bins centered at (0,0)\nhist = plt.hist([0,1,-1,0,0], bins=5, color='gray')\nax.add_artist(hist)\n\n# Draw a scatter plot with 5 points centered at (0,0)\nscatter = plt.scatter([0,1,-1,0,0], [0,0,0,1,-1], color='green')\nax.add_artist(scatter)\n\n# Draw a line plot with 5 points centered at (0,0)\nline = plt.plot([0,1,-1,0,0], [0,0,0,1,-1], color='yellow')\nax.add_artist(line)\n\n# Draw a bar chart with 5 bars centered at (0,0)\nbar = plt.bar([0,1,-1,0,0], [0,1,-1,0,1], color='orange')\nax.add_artist(bar)\n\n# Draw a pie chart with 5 slices centered at (0,0)\npie = plt.pie([0.1, 0.2, 0.3, 0.4, 0.5], colors=['cyan', 'magenta', 'yellow', 'black', 'white'])\nax.add_artist(pie)\n\n# Draw a histogram with 5 bins centered at (0,0)\nhist = plt.hist([0,1,-1,0,0], bins=5, color='gray')\nax.add_artist(hist)\n\n# Draw a scatter plot with 5 points centered at (0,0)\nscatter = plt.scatter([0,1,-1,0,0], [0,0,0,1,-1], color='green')\nax.add_artist(scatter)\n\n# Draw a line plot with 5 points centered at (0,0)\nline = plt.plot([0,1,-1,0,0], [0,0,0,1,-1], color='yellow')\nax.add_artist(line)\n\n# Draw a bar chart with 5 bars centered at (0,0)\nbar = plt.bar([0,1,-1,0,0], [0,1,-1,0,1], color='orange')\nax.add_artist(bar)\n\n# Draw a pie chart with 5 slices centered at (0,0)\npie = plt.pie([0.1, 0.2, 0.3, 0.4, 0.5], colors=['cyan', 'magenta', 'yellow', 'black', 'white'])\nax.add_artist(pie)\n\n# Draw a histogram with 5 bins centered at (0,0)\nhist = plt.hist([0,1,-1,0,0], bins=5, color='gray')\nax.add_artist(hist)\n\n# Draw a scatter plot with 5 points centered at (0,0)\nscatter = plt.scatter([0,1,-1,0,0], [0,0,0,1,-1], color='green')\nax.add_artist(scatter)\n\n# Draw a line plot with 5 points centered at (0,0)\nline = plt.plot([0,1,-1,0,0], [0,0,0,1,-1], color='yellow')\nax.add_artist(line)\n\n# Draw a bar chart with 5 bars centered at (0,0)\nbar = plt.bar([0,1,-1,0,0], [0,1,-1,0,1], color='orange')\nax.add_artist(bar)\n\n# Draw a pie chart with 5 slices centered at (0,0)\npie = plt.pie([0.1, 0.2, 0.3, 0.4, 0.5], colors=['cyan', 'magenta', 'yellow', 'black', 'white'])\nax.add_artist(pie)\n\n# Draw a histogram with 5 bins centered at (0,0)\nhist = plt.hist([0,1,-1,0,0], bins=5, color='gray')\nax.add_artist(hist)\n\n# Draw a scatter plot with 5 points centered at (0,0)\nscatter = plt.scatter([0,1,-1,0,0], [0,0,0,1,-1], color='green')\nax.add_artist(scatter)\n\n# Draw a line plot with 5 points centered at (0,0)\nline = plt.plot([0,1,-1,0,0], [0,0,0,1,-1], color='yellow')\nax.add_artist(line)\n\n# Draw a bar chart with 5 bars centered at (0,0)\nbar = plt.bar([0,1,-1,0,0], [0,1,-1,0,1], color='orange')\nax.add_artist(bar)\n\n# Draw a pie chart with 5 slices centered at (0,0)\npie = plt.pie([0.1, 0.2, 0.3, 0.4, 0.5], colors=['cyan', 'magenta', 'yellow', 'black', 'white'])\nax.add_artist(pie)\n\n# Draw a histogram with 5 bins centered at (0,0)\nhist = plt.hist([0,1,-1,0,0], bins=5, color='gray')\nax.add_artist(hist)\n\n# Draw a scatter plot with 5 points centered at (0,0)\nscatter = plt.scatter([0,1,-1,0,0], [0,0,0,1,-1], color='green')\nax.add_artist(scatter)\n\n# Draw a line plot with 5 points centered at (0,0)\nline = plt.plot([0,1,-1,0,0], [0,0,0,1,-1], color='yellow')\nax.add_artist(line)\n\n# Draw a bar chart with 5 bars centered at (0,0)\nbar = plt.bar([0,1,-1,0,0], [0,1,-1,0,1], color='orange')\nax.add_artist(bar)\n\n# Draw a pie chart with 5 slices centered at (0,0)\npie = plt.pie([0.1, 0.2, 0.3, 0.4, 0.5], colors=['cyan', 'magenta', 'yellow', 'black', 'white'])\nax.add_artist(pie)\n\n# Draw a histogram with 5 bins centered at (0,0)\nhist = plt.hist([0,1,-1,0,0], bins=5, color='gray')\nax.add_artist(hist)\n\n# Draw a scatter plot with 5 points centered at (0,0)\nscatter = plt.scatter([0,1,-1,0,0], [0,0,0,1,-1], color='green')\nax.add_artist(scatter)\n\n# Draw a line plot with 5 points centered at (0,0)\nline = plt.plot([0,1,-1,0,0], [0,0,0,1,-1], color='yellow')\nax.add_artist(line)\n\n# Draw a bar chart with 5 bars centered at (0,0)\nbar = plt.bar([0,1,-1,0,0], [0,1,-1,0,1], color='orange')\nax.add_artist(bar)\n\n# Draw a pie chart with 5 slices centered at (0,0)\npie = plt.pie([0.1, 0.2, 0.3, 0.4, 0.5], colors=['cyan', 'magenta', 'yellow', 'black', 'white'])\nax.add_artist(pie)\n\n# Draw a histogram with 5 bins centered at (0,0)\nhist = plt.hist([0,1,-1,0,0], bins=5, color='gray')\nax.add_artist(hist)\n\n# Draw a scatter plot with 5 points centered at (0,0)\nscatter = plt.scatter([0,1,-1,0,0], [0,0,0,1,-1], color='green')\nax.add_artist(scatter)\n\n# Draw a line plot with 5 points centered at (0,0)\nline = plt.plot([0,1,-1,0,0], [0,0,0,1,-1], color='yellow')\nax.add_artist(line)\n\n# Draw a bar chart with 5 bars centered at (0,0)\nbar = plt.bar([0,1,-1,0,0], [0,1,-1,0,1], color='orange')\nax.add_artist(bar)\n\n# Draw a pie chart with 5 slices centered at (0,0)\npie = plt.pie([0.1, 0.2, 0.3, 0.4, 0.5], colors=['cyan', 'magenta', 'yellow', 'black', 'white'])\nax.add_artist(pie)\n\n# Draw a histogram with 5 bins centered at (0,0)\nhist = plt.hist([0,1,-1,0,0], bins=5, color='gray')\nax.add_artist(hist)\n\n# Draw a scatter plot with 5 points centered at (0,0)\nscatter = plt.scatter([0,1,-1,0,0], [0,0,0,1,-1], color='green')\nax.add_artist(scatter)\n\n# Draw a line plot with 5 points centered at (0,0)\nline = plt.plot([0,1,-1,0,0], [0,0,0,1,-1], color='yellow')\nax.add_artist(line)\n\n# Draw a bar chart with 5 bars centered at (0,0)\nbar = plt.bar([0,1,-1,0,0], [0,1,-1,0,1], color='orange')\nax.add_artist(bar)\n\n# Draw a pie chart with 5 slices centered at (0,0)\npie = plt.pie([0.1, 0.2, 0.3, 0.4, 0.5], colors=['cyan', 'magenta', 'yellow', 'black', 'white'])\nax.add_artist(pie)\n\n# Draw a histogram with 5 bins centered at (0,0)\nhist = plt.hist([0,1,-1,0,0], bins=5, color='gray')\nax.add_artist(hist)\n\n# Draw a scatter plot with 5 points centered at (0,0)\nscatter = plt.scatter([0,1,-1,0,0], [0,0,0,1,-1], color='green')\nax.add_artist(scatter)\n\n# Draw a line plot with 5 points centered at (0,0)\nline = plt.plot([0,1,-1,0,0], [0,0,0,1,-1], color='yellow')\nax.add_artist(line)\n\n# Draw a bar chart with 5 bars centered at (0,0)\nbar = plt.bar([0,1,-1,0,0], [0,1,-1,0,1], color='orange')\nax.add_artist(bar)\n\n# Draw a pie chart with 5 slices centered at (0,0)\npie = plt.pie([0.1, 0.2, 0.3, 0.4, 0.5], colors=['cyan', 'magenta', 'yellow', 'black', 'white'])\nax.add_artist(pie)\n\n# Draw a histogram with 5 bins centered at (0,0)\nhist = plt.hist([0,1,-1,0,0], bins=5, color='gray')\nax.add_artist(hist)\n\n# Draw a scatter plot with 5 points centered at (0,0)\nscatter = plt.scatter([0,1,-1,0,0], [0,0,0,1,-1], color='green')\nax.add_artist(scatter)\n\n# Draw a line plot with 5 points centered at (0,0)\nline = plt.plot([0,1,-1,0,0], [0,0,0,1,-1], color='yellow')\nax.add_artist(line)\n\n# Draw a bar chart with 5 bars centered at (0,0)\nbar = plt.bar([0,1,-1,0,0], [0,1,-1,0,1], color='orange')\nax.add_artist(bar)\n\n# Draw a pie chart with 5 slices centered at (0,0)\npie = plt.pie([0.1, 0.2, 0.3, 0.4, 0.5], colors=['cyan', 'magenta', 'yellow', 'black', 'white'])\nax.add_artist(pie)\n\n# Draw a histogram with 5 bins centered at (0,0)\nhist = plt.hist([0,1,-1,0,0], bins=5, color='gray')\nax.add_artist(hist)\n\n# Draw a scatter plot with 5 points centered at (0,0)\nscatter = plt.scatter([0,1,-1,0,0], [0,0,0,1,-1], color='green')\nax.add_artist(scatter)\n\n# Draw a line plot with 5 points centered at (0,0)\nline = plt.plot([0,1,-1,0,0], [0,0,0,1,-1], color='yellow')\nax.add_artist(line)\n\n# Draw a bar chart with 5 bars centered at (0,0)\nbar = plt.bar([0,1,-1,0,0], [0,1,-1,0,1], color='orange')\nax.add_artist(bar)\n\n# Draw a pie chart with 5 slices centered at (0,0)\npie = plt.pie([0.1, 0.2, 0.3, 0.4, 0.5], colors=['cyan', 'magenta', 'yellow', 'black', 'white'])\nax.add_artist(pie)\n\n# Draw a histogram with 5 bins centered at (0,0)\nhist = plt.hist([0,1,-1,0,0], bins=5, color='gray')\nax.add_artist(hist)\n\n# Draw a scatter plot with 5 points centered at (0,0)\nscatter = plt.scatter([0,1,-1,0,0], [0,0,0,1,-1], color='green')\nax.add_artist(scatter)\n\n# Draw a line plot with 5 points centered at (0,0)\nline = plt.plot([0,1,-1,0,0], [0,0,0,1,-1], color='yellow')\nax.add_artist(line)\n\n# Draw a bar chart with 5 bars centered at (0,0)\nbar = plt.bar([0,1,-1,0,0], [0,1,-1,0,1], color='orange')\nax.add_artist(bar)\n\n# Draw a pie chart with 5 slices centered at ("}
{"file": "dataset/ori_500/radar_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and a set of subplots\nfig, axs = plt.subplots(1, 3, figsize=(10.0, 6.0))\n\n# Set the title for each subplot\naxs[0].set_title('PGM (\u03b5 = \u221e)')\naxs[1].set_title('PrivSyn (\u03b5 = \u221e)')\naxs[2].set_title('TVAE')\n\n# Create a circle patch for the privacy level\ncircle = plt.Circle((0, 0), 5, color='blue', fill=False)\naxs[0].add_artist(circle)\naxs[1].add_artist(circle)\naxs[2].add_artist(circle)\n\n# Create a rectangle patch for the query error\nrect = plt.Rectangle((-2, -2), 4, 4, color='red', fill=False)\naxs[0].add_artist(rect)\naxs[1].add_artist(rect)\naxs[2].add_artist(rect)\n\n# Create a triangle patch for the fidelity test\ntriangle = plt.Polygon([[0, 0], [2, 2], [-2, 2]], color='green', fill=False)\naxs[0].add_artist(triangle)\naxs[1].add_artist(triangle)\naxs[2].add_artist(triangle)\n\n# Create a pentagon patch for the privacy level\npentagon = plt.Polygon([[0, 0], [2, 2], [0, 4], [-2, 2], [0, 0]], color='purple', fill=False)\naxs[0].add_artist(pentagon)\naxs[1].add_artist(pentagon)\naxs[2].add_artist(pentagon)\n\n# Create a hexagon patch for the query error\nhexagon = plt.Polygon([[0, 0], [2, 2], [4, 0], [2, -2], [0, 0], [-2, -2]], color='orange', fill=False)\naxs[0].add_artist(hexagon)\naxs[1].add_artist(hexagon)\naxs[2].add_artist(hexagon)\n\n# Create a star patch for the fidelity test\nstar = plt.Polygon([[0, 0], [2, 2], [4, 0], [2, -2], [0, 0], [-2, -2], [-4, 0], [-2, 2]], color='cyan', fill=False)\naxs[0].add_artist(star)\naxs[1].add_artist(star)\naxs[2].add_artist(star)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Set the background color of the plot\nax.set_facecolor('black')\n\n# Set the title of the plot\nax.set_title('Heterocycle formation', color='white')\n\n# Set the x-axis and y-axis limits\nax.set_xlim(0, 100)\nax.set_ylim(0, 100)\n\n# Draw a circle around the plot\ncircle = plt.Circle((50, 50), 40, color='red')\nax.add_artist(circle)\n\n# Draw a rectangle around the plot\nrectangle = plt.Rectangle((20, 20), 60, 60, color='blue')\nax.add_artist(rectangle)\n\n# Draw a triangle around the plot\ntriangle = plt.Polygon([[30, 70], [70, 70], [50, 90]], color='green')\nax.add_artist(triangle)\n\n# Draw a pentagon around the plot\npentagon = plt.Polygon([[10, 10], [20, 30], [30, 20], [40, 30], [50, 10]], color='yellow')\nax.add_artist(pentagon)\n\n# Draw a hexagon around the plot\nhexagon = plt.Polygon([[60, 10], [70, 20], [80, 20], [90, 30], [90, 40], [80, 50], [70, 40], [60, 50]], color='orange')\nax.add_artist(hexagon)\n\n# Draw a heptagon around the plot\nheptagon = plt.Polygon([[10, 60], [20, 70], [30, 70], [40, 80], [50, 80], [60, 70], [70, 70], [80, 60]], color='purple')\nax.add_artist(heptagon)\n\n# Draw an octagon around the plot\noctagon = plt.Polygon([[10, 90], [20, 100], [30, 100], [40, 90], [50, 90], [60, 100], [70, 100], [80, 90]], color='cyan')\nax.add_artist(octagon)\n\n# Draw a nonagon around the plot\nnonagon = plt.Polygon([[10, 10], [20, 20], [30, 20], [40, 30], [50, 30], [60, 20], [70, 20], [80, 30], [90, 40], [90, 50], [80, 60], [70, 50], [60, 60], [50, 70], [40, 70], [30, 60], [20, 70], [10, 80]], color='magenta')\nax.add_artist(nonagon)\n\n# Draw a decagon around the plot\ndecagon = plt.Polygon([[10, 10], [20, 20], [30, 20], [40, 30], [50, 30], [60, 20], [70, 20], [80, 30], [90, 40], [90, 50], [80, 60], [70, 50], [60, 60], [50, 70], [40, 70], [30, 60], [20, 70], [10, 80], [10, 90], [20, 100], [30, 100], [40, 90], [50, 90], [60, 100], [70, 100], [80, 90], [90, 80], [90, 70], [80, 60], [70, 50], [60, 50], [50, 60], [40, 60], [30, 50], [20, 60], [10, 70]], color='lime')\nax.add_artist(decagon)\n\n# Draw a dodecagon around the plot\ndodecagon = plt.Polygon([[10, 10], [20, 20], [30, 20], [40, 30], [50, 30], [60, 20], [70, 20], [80, 30], [90, 40], [90, 50], [80, 60], [70, 50], [60, 60], [50, 70], [40, 70], [30, 60], [20, 70], [10, 80], [10, 90], [20, 100], [30, 100], [40, 90], [50, 90], [60, 100], [70, 100], [80, 90], [90, 80], [90, 70], [80, 60], [70, 50], [60, 50], [50, 60], [40, 60], [30, 50], [20, 60], [10, 70], [10, 80], [20, 90], [30, 100], [40, 100], [50, 90], [60, 90], [70, 100], [80, 100], [90, 90], [90, 80], [80, 70], [70, 60], [60, 60], [50, 70], [40, 70], [30, 60], [20, 70], [10, 80]], color='pink')\nax.add_artist(dodecagon)\n\n# Draw a star around the plot\nstar = plt.Polygon([[50, 10], [60, 20], [70, 20], [80, 30], [90, 40], [80, 50], [70, 50], [60, 60], [50, 70], [40, 60], [30, 50], [20, 50], [10, 40], [20, 30], [30, 20], [40, 20], [50, 10]], color='brown')\nax.add_artist(star)\n\n# Draw a spiral around the plot\ntheta = np.linspace(0, 2*np.pi, 100)\nr = theta**2\nx = r * np.cos(theta)\ny = r * np.sin(theta)\nax.plot(x, y, color='gray')\n\n# Draw a sine wave around the plot\nt = np.linspace(0, 2*np.pi, 100)\ny = np.sin(t)\nax.plot(t, y, color='silver')\n\n# Draw a cosine wave around the plot\nt = np.linspace(0, 2*np.pi, 100)\ny = np.cos(t)\nax.plot(t, y, color='gold')\n\n# Draw a tangent wave around the plot\nt = np.linspace(0, 2*np.pi, 100)\ny = np.tan(t)\nax.plot(t, y, color='silver')\n\n# Draw a cotangent wave around the plot\nt = np.linspace(0, 2*np.pi, 100)\ny = 1/np.tan(t)\nax.plot(t, y, color='gold')\n\n# Draw a secant wave around the plot\nt = np.linspace(0, 2*np.pi, 100)\ny = 1/np.cos(t)\nax.plot(t, y, color='silver')\n\n# Draw a cosecant wave around the plot\nt = np.linspace(0, 2*np.pi, 100)\ny = 1/np.sin(t)\nax.plot(t, y, color='gold')\n\n# Draw a hyperbolic sine wave around the plot\nt = np.linspace(-2*np.pi, 2*np.pi, 100)\ny = np.sinh(t)\nax.plot(t, y, color='silver')\n\n# Draw a hyperbolic cosine wave around the plot\nt = np.linspace(-2*np.pi, 2*np.pi, 100)\ny = np.cosh(t)\nax.plot(t, y, color='gold')\n\n# Draw a hyperbolic tangent wave around the plot\nt = np.linspace(-2*np.pi, 2*np.pi, 100)\ny = np.tanh(t)\nax.plot(t, y, color='silver')\n\n# Draw a hyperbolic cotangent wave around the plot\nt = np.linspace(-2*np.pi, 2*np.pi, 100)\ny = 1/np.tanh(t)\nax.plot(t, y, color='gold')\n\n# Draw a hyperbolic secant wave around the plot\nt = np.linspace(-2*np.pi, 2*np.pi, 100)\ny = 1/np.cosh(t)\nax.plot(t, y, color='silver')\n\n# Draw a hyperbolic cosecant wave around the plot\nt = np.linspace(-2*np.pi, 2*np.pi, 100)\ny = 1/np.sinh(t)\nax.plot(t, y, color='gold')\n\n# Draw a logarithmic wave around the plot\nt = np.linspace(0.1, 2*np.pi, 100)\ny = np.log(t)\nax.plot(t, y, color='silver')\n\n# Draw a exponential wave around the plot\nt = np.linspace(0, 2*np.pi, 100)\ny = np.exp(t)\nax.plot(t, y, color='gold')\n\n# Draw a power wave around the plot\nt = np.linspace(0, 2*np.pi, 100)\ny = t**2\nax.plot(t, y, color='silver')\n\n# Draw a square root wave around the plot\nt = np.linspace(0, 2*np.pi, 100)\ny = np.sqrt(t)\nax.plot(t, y, color='gold')\n\n# Draw a cube root wave around the plot\nt = np.linspace(0, 2*np.pi, 100)\ny = np.cbrt(t)\nax.plot(t, y, color='silver')\n\n# Draw a absolute value wave around the plot\nt = np.linspace(-2*np.pi, 2*np.pi, 100)\ny = np.abs(t)\nax.plot(t, y, color='gold')\n\n# Draw a signum wave around the plot\nt = np.linspace(-2*np.pi, 2*np.pi, 100)\ny = np.sign(t)\nax.plot(t, y, color='silver')\n\n# Draw a floor wave around the plot\nt = np.linspace(-2*np.pi, 2*np.pi, 100)\ny = np.floor(t)\nax.plot(t, y, color='gold')\n\n# Draw a ceil wave around the plot\nt = np.linspace(-2*np.pi, 2*np.pi, 100)\ny = np.ceil(t)\nax.plot(t, y, color='silver')\n\n# Draw a round wave around the plot\nt = np.linspace(-2*np.pi, 2*np.pi, 100)\ny = np.round(t)\nax.plot(t, y, color='gold')\n\n# Draw a trunc wave around the plot\nt = np.linspace(-2*np.pi, 2*np.pi, 100)\ny = np.trunc(t)\nax.plot(t, y, color='silver')\n\n# Draw a fractional part wave around the plot\nt = np.linspace(-2*np.pi, 2*np.pi, 100)\ny = np.modf(t)[0]\nax.plot(t, y, color='gold')\n\n# Draw a integer part wave around the plot\nt = np.linspace(-2*np.pi, 2*np.pi, 100)\ny = np.modf(t)[1]\nax.plot(t, y, color='silver')\n\n# Draw a complex number wave around the plot\nt = np.linspace(-2*np.pi, 2*np.pi, 100)\ny = np.complex(t, t)\nax.plot(t, y, color='gold')\n\n# Draw a polar coordinate wave around the plot\nt = np.linspace(0, 2*np.pi, 100)\nr = t**2\nx = r * np.cos(t)\ny = r * np.sin(t)\nax.plot(x, y, color='silver')\n\n# Draw a spherical coordinate wave around the plot\nt = np.linspace(0, 2*np.pi, 100)\nr = t**2\nx = r * np.cos(t)\ny = r * np.sin(t)\nz = r * np.sin(t)\nax.plot(x, y, z, color='gold')\n\n# Draw a cylindrical coordinate wave around the plot\nt = np.linspace(0, 2*np.pi, 100)\nr = t**2\nx = r * np.cos(t)\ny = r * np.sin(t)\nz = r * np.sin(t)\nax.plot(x, y, z, color='silver')\n\n# Draw a quaternion wave around the plot\nt = np.linspace(0, 2*np.pi, 100)\nr = t**2\nx = r * np.cos(t)\ny = r * np.sin(t)\nz = r * np.sin(t)\nw = r * np.sin(t)\nax.plot(x, y, z, w, color='gold')\n\n# Draw a bivector wave around the plot\nt = np.linspace(0, 2*np.pi, 100)\nr = t**2\nx = r * np.cos(t)\ny = r * np.sin(t)\nz = r * np.sin(t)\nw = r * np.sin(t)\nax.plot(x, y, z, w, color='silver')\n\n# Draw a trivector wave around the plot\nt = np.linspace(0, 2*np.pi, 100)\nr = t**2\nx = r * np.cos(t)\ny = r * np.sin(t)\nz = r * np.sin(t)\nw = r * np.sin(t)\nax.plot(x, y, z, w, color='gold')\n\n# Draw a multivector wave around the plot\nt = np.linspace(0, 2*np.pi, 100)\nr = t**2\nx = r * np.cos(t)\ny = r * np.sin(t)\nz = r * np.sin(t)\nw = r * np.sin(t)\nax.plot(x, y, z, w, color='silver')\n\n# Draw a geometric algebra wave around the plot\nt = np.linspace(0, 2*np.pi, 100)\nr = t**2\nx = r * np.cos(t)\ny = r * np.sin(t)\nz = r * np.sin(t)\nw = r * np.sin(t)\nax.plot(x, y, z, w, color='gold')\n\n# Draw a clifford algebra wave around the plot\nt = np.linspace(0, 2*np.pi, 100)\nr = t**2\nx = r * np.cos(t)\ny = r * np.sin(t)\nz = r * np.sin(t)\nw = r * np.sin(t)\nax.plot(x, y, z, w, color='silver')\n\n# Draw a spinor wave around the plot\nt = np.linspace(0, 2*np.pi, 100)\nr = t**2\nx = r * np.cos(t)\ny = r * np.sin(t)\nz = r * np.sin(t)\nw = r * np.sin(t)\nax.plot(x, y, z, w, color='gold')\n\n# Draw a bivector wave around the plot\nt = np.linspace(0, 2*np.pi, 100)\nr = t**2\nx = r * np.cos(t)\ny = r * np.sin(t)\nz = r * np.sin(t)\nw = r * np.sin(t)\nax.plot(x, y, z, w, color='silver')\n\n# Draw a trivector wave around the plot\nt = np.linspace(0, 2*np.pi, 100)\nr = t**2\nx = r * np.cos(t)\ny = r * np.sin(t)\nz = r * np.sin(t)\nw = r * np.sin(t)\nax.plot(x, y, z, w, color='gold')\n\n# Draw a multivector wave around the plot\nt = np.linspace(0, 2*np.pi, 100)\nr = t**2\nx = r * np.cos(t)\ny = r * np.sin(t)\nz = r * np.sin(t)\nw = r * np.sin(t)\nax.plot(x, y, z, w, color='silver')\n\n# Draw a geometric algebra wave around the plot\nt = np.linspace(0, 2*np.pi, 100)\nr = t**2\nx = r * np.cos(t)\ny = r * np.sin(t)\nz = r * np.sin(t)\nw = r * np.sin(t)\nax.plot(x, y, z, w, color='gold')\n\n# Draw a clifford algebra wave around the plot\nt = np.linspace(0, 2*np.pi, 100)\nr = t**2\nx = r * np.cos(t)\ny = r * np.sin(t)\nz = r * np.sin(t)\nw = r * np.sin(t)\nax.plot(x, y, z, w, color='silver')\n\n# Draw a spinor wave around the"}
{"file": "dataset/ori_500/radar_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Set the aspect ratio of the plot to be equal\nax.set_aspect('equal')\n\n# Draw a circle at the center of the plot\ncircle = plt.Circle((0.5, 0.5), 0.4, color='lightgrey')\nax.add_artist(circle)\n\n# Define the data for the radar chart\ndata = [\n    [0.07, 0.03, 0.03, 0.07],\n    [0.07, 0.03, 0.03, 0.07],\n    [0.07, 0.03, 0.03, 0.07],\n    [0.07, 0.03, 0.03, 0.07],\n    [0.07, 0.03, 0.03, 0.07],\n    [0.07, 0.03, 0.03, 0.07]\n]\n\n# Define the labels for the radar chart\nlabels = ['Model A', 'Model B', 'Model C', 'Model D', 'Model E', 'Model F']\n\n# Define the colors for the radar chart\ncolors = ['red', 'blue', 'green', 'orange', 'purple', 'cyan']\n\n# Plot the radar chart\nfor i, label in enumerate(labels):\n    ax.plot([0.5, data[i][0]], [0.5, data[i][1]], color=colors[i])\n    ax.text(data[i][0], data[i][1], label, ha='center', va='center')\n\n# Add a legend\nlegend_elements = [plt.Line2D([0], [0], marker='o', color='w', label='predicted score', markerfacecolor='green', markersize=10),\n                    plt.Line2D([0], [0], marker='o', color='w', label='helpful score', markerfacecolor='orange', markersize=10),\n                    plt.Line2D([0], [0], marker='o', color='w', label='result score', markerfacecolor='blue', markersize=10),\n                    plt.Line2D([0], [0], marker='o', color='w', label='rating score', markerfacecolor='red', markersize=10)]\nax.legend(handles=legend_elements, loc='upper right')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Set the title of the plot\nax.set_title('3D-bar')\n\n# Create a circle for the radar chart\ncircle = plt.Circle((0.5, 0.5), 0.4, color='black', fill=False)\nax.add_artist(circle)\n\n# Add a legend\nlegend_elements = [plt.Line2D([0], [0], marker='o', color='w', label='line_num', markerfacecolor='blue', markersize=10),\n                    plt.Line2D([0], [0], marker='o', color='w', label='pie', markerfacecolor='orange', markersize=10)]\nax.legend(handles=legend_elements, loc='upper left')\n\n# Set the aspect ratio of the plot\nax.set_aspect('equal')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(5.0, 5.0))\n\n# Set the title of the plot\nax.set_title('Imputation')\n\n# Create a circle for the center of the plot\ncircle = plt.Circle((0.5, 0.5), 0.4, color='black')\nax.add_artist(circle)\n\n# Create a rectangle for the left side of the plot\nrect = plt.Rectangle((0.1, 0.1), 0.2, 0.8, color='blue')\nax.add_artist(rect)\n\n# Create a rectangle for the right side of the plot\nrect = plt.Rectangle((0.7, 0.1), 0.2, 0.8, color='red')\nax.add_artist(rect)\n\n# Create a rectangle for the top of the plot\nrect = plt.Rectangle((0.3, 0.9), 0.4, 0.1, color='green')\nax.add_artist(rect)\n\n# Create a rectangle for the bottom of the plot\nrect = plt.Rectangle((0.3, 0.1), 0.4, 0.1, color='yellow')\nax.add_artist(rect)\n\n# Create a rectangle for the middle of the plot\nrect = plt.Rectangle((0.3, 0.4), 0.4, 0.2, color='purple')\nax.add_artist(rect)\n\n# Create a rectangle for the left side of the plot\nrect = plt.Rectangle((0.1, 0.4), 0.2, 0.2, color='orange')\nax.add_artist(rect)\n\n# Create a rectangle for the right side of the plot\nrect = plt.Rectangle((0.7, 0.4), 0.2, 0.2, color='cyan')\nax.add_artist(rect)\n\n# Create a rectangle for the top of the plot\nrect = plt.Rectangle((0.3, 0.6), 0.4, 0.2, color='magenta')\nax.add_artist(rect)\n\n# Create a rectangle for the bottom of the plot\nrect = plt.Rectangle((0.3, 0.2), 0.4, 0.2, color='brown')\nax.add_artist(rect)\n\n# Create a rectangle for the middle of the plot\nrect = plt.Rectangle((0.3, 0.5), 0.4, 0.2, color='pink')\nax.add_artist(rect)\n\n# Create a rectangle for the left side of the plot\nrect = plt.Rectangle((0.1, 0.5), 0.2, 0.2, color='grey')\nax.add_artist(rect)\n\n# Create a rectangle for the right side of the plot\nrect = plt.Rectangle((0.7, 0.5), 0.2, 0.2, color='silver')\nax.add_artist(rect)\n\n# Create a rectangle for the top of the plot\nrect = plt.Rectangle((0.3, 0.7), 0.4, 0.2, color='gold')\nax.add_artist(rect)\n\n# Create a rectangle for the bottom of the plot\nrect = plt.Rectangle((0.3, 0.3), 0.4, 0.2, color='white')\nax.add_artist(rect)\n\n# Create a rectangle for the middle of the plot\nrect = plt.Rectangle((0.3, 0.6), 0.4, 0.2, color='black')\nax.add_artist(rect)\n\n# Create a rectangle for the left side of the plot\nrect = plt.Rectangle((0.1, 0.6), 0.2, 0.2, color='white')\nax.add_artist(rect)\n\n# Create a rectangle for the right side of the plot\nrect = plt.Rectangle((0.7, 0.6), 0.2, 0.2, color='white')\nax.add_artist(rect)\n\n# Create a rectangle for the top of the plot\nrect = plt.Rectangle((0.3, 0.8), 0.4, 0.2, color='white')\nax.add_artist(rect)\n\n# Create a rectangle for the bottom of the plot\nrect = plt.Rectangle((0.3, 0.4), 0.4, 0.2, color='white')\nax.add_artist(rect)\n\n# Create a rectangle for the middle of the plot\nrect = plt.Rectangle((0.3, 0.7), 0.4, 0.2, color='white')\nax.add_artist(rect)\n\n# Create a rectangle for the left side of the plot\nrect = plt.Rectangle((0.1, 0.7), 0.2, 0.2, color='white')\nax.add_artist(rect)\n\n# Create a rectangle for the right side of the plot\nrect = plt.Rectangle((0.7, 0.7), 0.2, 0.2, color='white')\nax.add_artist(rect)\n\n# Create a rectangle for the top of the plot\nrect = plt.Rectangle((0.3, 0.9), 0.4, 0.2, color='white')\nax.add_artist(rect)\n\n# Create a rectangle for the bottom of the plot\nrect = plt.Rectangle((0.3, 0.5), 0.4, 0.2, color='white')\nax.add_artist(rect)\n\n# Create a rectangle for the middle of the plot\nrect = plt.Rectangle((0.3, 0.8), 0.4, 0.2, color='white')\nax.add_artist(rect)\n\n# Create a rectangle for the left side of the plot\nrect = plt.Rectangle((0.1, 0.8), 0.2, 0.2, color='white')\nax.add_artist(rect)\n\n# Create a rectangle for the right side of the plot\nrect = plt.Rectangle((0.7, 0.8), 0.2, 0.2, color='white')\nax.add_artist(rect)\n\n# Create a rectangle for the top of the plot\nrect = plt.Rectangle((0.3, 0.1), 0.4, 0.2, color='white')\nax.add_artist(rect)\n\n# Create a rectangle for the bottom of the plot\nrect = plt.Rectangle((0.3, 0.7), 0.4, 0.2, color='white')\nax.add_artist(rect)\n\n# Create a rectangle for the middle of the plot\nrect = plt.Rectangle((0.3, 0.2), 0.4, 0.2, color='white')\nax.add_artist(rect)\n\n# Create a rectangle for the left side of the plot\nrect = plt.Rectangle((0.1, 0.2), 0.2, 0.2, color='white')\nax.add_artist(rect)\n\n# Create a rectangle for the right side of the plot\nrect = plt.Rectangle((0.7, 0.2), 0.2, 0.2, color='white')\nax.add_artist(rect)\n\n# Create a rectangle for the top of the plot\nrect = plt.Rectangle((0.3, 0.3), 0.4, 0.2, color='white')\nax.add_artist(rect)\n\n# Create a rectangle for the bottom of the plot\nrect = plt.Rectangle((0.3, 0.9), 0.4, 0.2, color='white')\nax.add_artist(rect)\n\n# Create a rectangle for the middle of the plot\nrect = plt.Rectangle((0.3, 0.4), 0.4, 0.2, color='white')\nax.add_artist(rect)\n\n# Create a rectangle for the left side of the plot\nrect = plt.Rectangle((0.1, 0.4), 0.2, 0.2, color='white')\nax.add_artist(rect)\n\n# Create a rectangle for the right side of the plot\nrect = plt.Rectangle((0.7, 0.4), 0.2, 0.2, color='white')\nax.add_artist(rect)\n\n# Create a rectangle for the top of the plot\nrect = plt.Rectangle((0.3, 0.5), 0.4, 0.2, color='white')\nax.add_artist(rect)\n\n# Create a rectangle for the bottom of the plot\nrect = plt.Rectangle((0.3, 0.1), 0.4, 0.2, color='white')\nax.add_artist(rect)\n\n# Create a rectangle for the middle of the plot\nrect = plt.Rectangle((0.3, 0.6), 0.4, 0.2, color='white')\nax.add_artist(rect)\n\n# Create a rectangle for the left side of the plot\nrect = plt.Rectangle((0.1, 0.6), 0.2, 0.2, color='white')\nax.add_artist(rect)\n\n# Create a rectangle for the right side of the plot\nrect = plt.Rectangle((0.7, 0.6), 0.2, 0.2, color='white')\nax.add_artist(rect)\n\n# Create a rectangle for the top of the plot\nrect = plt.Rectangle((0.3, 0.7), 0.4, 0.2, color='white')\nax.add_artist(rect)\n\n# Create a rectangle for the bottom of the plot\nrect = plt.Rectangle((0.3, 0.3), 0.4, 0.2, color='white')\nax.add_artist(rect)\n\n# Create a rectangle for the middle of the plot\nrect = plt.Rectangle((0.3, 0.8), 0.4, 0.2, color='white')\nax.add_artist(rect)\n\n# Create a rectangle for the left side of the plot\nrect = plt.Rectangle((0.1, 0.8), 0.2, 0.2, color='white')\nax.add_artist(rect)\n\n# Create a rectangle for the right side of the plot\nrect = plt.Rectangle((0.7, 0.8), 0.2, 0.2, color='white')\nax.add_artist(rect)\n\n# Create a rectangle for the top of the plot\nrect = plt.Rectangle((0.3, 0.9), 0.4, 0.2, color='white')\nax.add_artist(rect)\n\n# Create a rectangle for the bottom of the plot\nrect = plt.Rectangle((0.3, 0.5), 0.4, 0.2, color='white')\nax.add_artist(rect)\n\n# Create a rectangle for the middle of the plot\nrect = plt.Rectangle((0.3, 0.8), 0.4, 0.2, color='white')\nax.add_artist(rect)\n\n# Create a rectangle for the left side of the plot\nrect = plt.Rectangle((0.1, 0.8), 0.2, 0.2, color='white')\nax.add_artist(rect)\n\n# Create a rectangle for the right side of the plot\nrect = plt.Rectangle((0.7, 0.8), 0.2, 0.2, color='white')\nax.add_artist(rect)\n\n# Create a rectangle for the top of the plot\nrect = plt.Rectangle((0.3, 0.1), 0.4, 0.2, color='white')\nax.add_artist(rect)\n\n# Create a rectangle for the bottom of the plot\nrect = plt.Rectangle((0.3, 0.7), 0.4, 0.2, color='white')\nax.add_artist(rect)\n\n# Create a rectangle for the middle of the plot\nrect = plt.Rectangle((0.3, 0.2), 0.4, 0.2, color='white')\nax.add_artist(rect)\n\n# Create a rectangle for the left side of the plot\nrect = plt.Rectangle((0.1, 0.2), 0.2, 0.2, color='white')\nax.add_artist(rect)\n\n# Create a rectangle for the right side of the plot\nrect = plt.Rectangle((0.7, 0.2), 0.2, 0.2, color='white')\nax.add_artist(rect)\n\n# Create a rectangle for the top of the plot\nrect = plt.Rectangle((0.3, 0.3), 0.4, 0.2, color='white')\nax.add_artist(rect)\n\n# Create a rectangle for the bottom of the plot\nrect = plt.Rectangle((0.3, 0.9), 0.4, 0.2, color='white')\nax.add_artist(rect)\n\n# Create a rectangle for the middle of the plot\nrect = plt.Rectangle((0.3, 0.4), 0.4, 0.2, color='white')\nax.add_artist(rect)\n\n# Create a rectangle for the left side of the plot\nrect = plt.Rectangle((0.1, 0.4), 0.2, 0.2, color='white')\nax.add_artist(rect)\n\n# Create a rectangle for the right side of the plot\nrect = plt.Rectangle((0.7, 0.4), 0.2, 0.2, color='white')\nax.add_artist(rect)\n\n# Create a rectangle for the top of the plot\nrect = plt.Rectangle((0.3, 0.5), 0.4, 0.2, color='white')\nax.add_artist(rect)\n\n# Create a rectangle for the bottom of the plot\nrect = plt.Rectangle((0.3, 0.1), 0.4, 0.2, color='white')\nax.add_artist(rect)\n\n# Create a rectangle for the middle of the plot\nrect = plt.Rectangle((0.3, 0.6), 0.4, 0.2, color='white')\nax.add_artist(rect)\n\n# Create a rectangle for the left side of the plot\nrect = plt.Rectangle((0.1, 0.6), 0.2, 0.2, color='white')\nax.add_artist(rect)\n\n# Create a rectangle for the right side of the plot\nrect = plt.Rectangle((0.7, 0.6), 0.2, 0.2, color='white')\nax.add_artist(rect)\n\n# Create a rectangle for the top of the plot\nrect = plt.Rectangle((0.3, 0.7), 0.4, 0.2, color='white')\nax.add_artist(rect)\n\n# Create a rectangle for the bottom of the plot\nrect = plt.Rectangle((0.3, 0.3), 0.4, 0.2, color='white')\nax.add_artist(rect)\n\n# Create a rectangle for the middle of the plot\nrect = plt.Rectangle((0.3, 0.8), 0.4, 0.2, color='white')\nax.add_artist(rect)\n\n# Create a rectangle for the left side of the plot\nrect = plt.Rectangle((0.1, 0.8), 0.2, 0.2, color='white')\nax.add_artist(rect)\n\n# Create a rectangle for the right side of the plot\nrect = plt.Rectangle((0.7, 0.8), 0.2, 0.2, color='white')\nax.add_artist(rect)\n\n# Create a rectangle for the top of the plot\nrect = plt.Rectangle((0.3, 0.9), 0.4, 0.2, color='white')\nax.add_artist(rect)\n\n# Create a rectangle for the bottom of the plot\nrect = plt.Rectangle((0.3, 0.5), 0.4, 0.2, color='white')\nax.add_artist(rect)\n\n# Create a rectangle for the middle of the plot\nrect = plt.Rectangle((0.3, 0.8), 0.4, 0.2, color='white')\nax.add_artist(rect)\n\n# Create a rectangle for the left side of the plot\nrect = plt.Rectangle((0.1, 0.8), 0.2, 0.2, color='white')\nax.add_artist(rect)\n\n# Create a rectangle for the right side of the plot\nrect = plt.Rectangle((0.7, 0.8), 0.2, 0.2, color='white')\nax.add_artist(rect)\n\n# Create a rectangle for the top of the plot\nrect = plt.Rectangle((0.3, 0.1), 0.4, 0.2, color='white')\nax.add_artist(rect)\n\n# Create a rectangle for the bottom of the plot\nrect = plt.Rectangle((0.3, 0.7), 0.4, 0.2, color='white')\nax.add_artist(rect)\n\n# Create a rectangle for the middle of the plot\nrect = plt.Rectangle((0.3, 0.2), 0.4, 0.2, color='white')\nax.add_artist(rect)\n\n# Create a rectangle for the left side of the plot\nrect = plt.Rectangle((0.1, 0.2), 0.2, 0.2, color='white')\nax.add_artist(rect)\n\n# Create a rectangle for the right side of the plot\nrect = plt.Rectangle((0.7, 0.2), 0.2, 0.2, color='white')\nax.add_artist(rect)\n\n# Create a rectangle for the top of the plot\nrect = plt.Rectangle((0.3, 0.3), 0.4, 0.2, color='white')\nax.add_artist(rect)\n\n# Create a rectangle for the bottom of the plot\nrect = plt.Rectangle((0.3, 0.9), 0.4, 0.2, color='white')\nax.add_artist(rect)\n\n# Create a rectangle for the middle of the plot\nrect = plt.Rectangle((0.3, 0.4), 0.4, 0.2, color='white')\nax.add_artist(rect)\n\n# Create a rectangle for the left side of the plot\nrect = plt.Rectangle((0.1, 0.4), 0.2, 0.2, color='white')\nax.add_artist(rect)\n\n# Create a rectangle for the right side of the plot\nrect = plt.Rectangle((0.7, 0.4), 0.2, 0.2, color='white')\nax.add_artist(rect)\n\n# Create a rectangle for the top of the plot\nrect = plt.Rectangle((0.3, 0.5), 0.4, 0.2, color='white')\nax.add_artist(rect)\n\n# Create a rectangle for the bottom of the plot\nrect = plt.Rectangle((0.3, 0.1), 0.4, 0.2, color='white')\nax.add_artist(rect)\n\n# Create a rectangle for the middle of the plot\nrect = plt.Rectangle((0.3, 0.6), 0.4, 0.2, color='white')\nax.add_artist(rect)\n\n# Create a rectangle for the left"}
{"file": "dataset/ori_500/radar_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 7.0))\n\n# Set the background color of the plot\nax.set_facecolor('black')\n\n# Set the title of the plot\nax.set_title('Stock Market Analysis', color='white')\n\n# Set the labels for the x-axis and y-axis\nax.set_xlabel('Time')\nax.set_ylabel('Price')\n\n# Set the tick labels for the x-axis and y-axis\nax.set_xticks(np.arange(0, 10, 1))\nax.set_yticks(np.arange(0, 100, 10))\n\n# Set the tick label color\nax.tick_params(axis='both', colors='white')\n\n# Set the grid lines\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Set the color of the grid lines\nax.grid(color='gray')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the grid lines\nax.grid(color='gray')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the grid lines\nax.grid(color='gray')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the grid lines\nax.grid(color='gray')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the grid lines\nax.grid(color='gray')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the grid lines\nax.grid(color='gray')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the grid lines\nax.grid(color='gray')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the grid lines\nax.grid(color='gray')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the grid lines\nax.grid(color='gray')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the grid lines\nax.grid(color='gray')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the grid lines\nax.grid(color='gray')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the grid lines\nax.grid(color='gray')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the grid lines\nax.grid(color='gray')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the grid lines\nax.grid(color='gray')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the grid lines\nax.grid(color='gray')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the grid lines\nax.grid(color='gray')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the grid lines\nax.grid(color='gray')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the grid lines\nax.grid(color='gray')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the grid lines\nax.grid(color='gray')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the grid lines\nax.grid(color='gray')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the grid lines\nax.grid(color='gray')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the grid lines\nax.grid(color='gray')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the grid lines\nax.grid(color='gray')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the grid lines\nax.grid(color='gray')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the grid lines\nax.grid(color='gray')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the grid lines\nax.grid(color='gray')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the grid lines\nax.grid(color='gray')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the grid lines\nax.grid(color='gray')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the grid lines\nax.grid(color='gray')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the grid lines\nax.grid(color='gray')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the grid lines\nax.grid(color='gray')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the grid lines\nax.grid(color='gray')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the grid lines\nax.grid(color='gray')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the grid lines\nax.grid(color='gray')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the grid lines\nax.grid(color='gray')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the grid lines\nax.grid(color='gray')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the grid lines\nax.grid(color='gray')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the grid lines\nax.grid(color='gray')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the grid lines\nax.grid(color='gray')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the grid lines\nax.grid(color='gray')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the grid lines\nax.grid(color='gray')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the grid lines\nax.grid(color='gray')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the grid lines\nax.grid(color='gray')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the grid lines\nax.grid(color='gray')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the grid lines\nax.grid(color='gray')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the grid lines\nax.grid(color='gray')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the grid lines\nax.grid(color='gray')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the grid lines\nax.grid(color='gray')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the grid lines\nax.grid(color='gray')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the grid lines\nax.grid(color='gray')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the grid lines\nax.grid(color='gray')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the grid lines\nax.grid(color='gray')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the grid lines\nax.grid(color='gray')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the grid lines\nax.grid(color='gray')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the grid lines\nax.grid(color='gray')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the grid lines\nax.grid(color='gray')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the grid lines\nax.grid(color='gray')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the grid lines\nax.grid(color='gray')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the grid lines\nax.grid(color='gray')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the grid lines\nax.grid(color='gray')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the grid lines\nax.grid(color='gray')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the grid lines\nax.grid(color='gray')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the grid lines\nax.grid(color='gray')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the grid lines\nax.grid(color='gray')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the grid lines\nax.grid(color='gray')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the grid lines\nax.grid(color='gray')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the grid lines\nax.grid(color='gray')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the grid lines\nax.grid(color='gray')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the grid lines\nax.grid(color='gray')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the grid lines\nax.grid(color='gray')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the grid lines\nax.grid(color='gray')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the grid lines\nax.grid(color='gray')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the grid lines\nax.grid(color='gray')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the grid lines\nax.grid(color='gray')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the grid lines\nax.grid(color='gray')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the grid lines\nax.grid(color='gray')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the grid lines\nax.grid(color='gray')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the grid lines\nax.grid(color='gray')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the grid lines\nax.grid(color='gray')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the grid lines\nax.grid(color='gray')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the grid lines\nax.grid(color='gray')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the grid lines\nax.grid(color='gray')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the grid lines\nax.grid(color='gray')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the grid lines\nax.grid(color='gray')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the grid lines\nax.grid(color='gray')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the grid lines\nax.grid(color='gray')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the grid lines\nax.grid(color='gray')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the grid lines\nax.grid(color='gray')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the grid lines\nax.grid(color='gray')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the grid lines\nax.grid(color='gray')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the grid lines\nax.grid(color='gray')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the grid lines\nax.grid(color='gray')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the grid lines\nax.grid(color='gray')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the grid lines\nax.grid(color='gray')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the grid lines\nax.grid(color='gray')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the grid lines\nax.grid(color='gray')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the grid lines\nax.grid(color='gray')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the grid lines\nax.grid(color='gray')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the grid lines\nax.grid(color='gray')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the grid lines\nax.grid(color='gray')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the grid lines\nax.grid(color='gray')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the grid lines\nax.grid(color='gray')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the grid lines\nax.grid(color='gray')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the grid lines\nax.grid(color='gray')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the grid lines\nax.grid(color='gray')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the grid lines\nax.grid(color='gray')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the grid lines\nax.grid(color='gray')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the grid lines\nax.grid(color='gray')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the grid lines\nax.grid(color='gray')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the grid lines\nax.grid(color='gray')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the grid lines\nax.grid(color='gray')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the grid lines\nax.grid(color='gray')\n\n# Set the color of the tick labels\n"}
{"file": "dataset/ori_500/scatter_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and a set of subplots\nfig, axs = plt.subplots(2, 4, figsize=(12, 4))\n\n# Set the title for each subplot\naxs[0, 0].set_title('Model-Basedness')\naxs[0, 1].set_title('Meta-Cognition')\naxs[0, 2].set_title('Exploration')\naxs[0, 3].set_title('Risk Taking')\naxs[0, 4].set_title('Bayesian Reasoning')\naxs[0, 5].set_title('Simple Bandits')\n\n# Create a scatter plot for each subplot\naxs[0, 0].scatter(np.random.rand(10), np.random.rand(10), color='blue')\naxs[0, 1].scatter(np.random.rand(10), np.random.rand(10), color='orange')\naxs[0, 2].scatter(np.random.rand(10), np.random.rand(10), color='green')\naxs[0, 3].scatter(np.random.rand(10), np.random.rand(10), color='red')\naxs[0, 4].scatter(np.random.rand(10), np.random.rand(10), color='purple')\naxs[0, 5].scatter(np.random.rand(10), np.random.rand(10), color='brown')\n\n# Add a vertical line to separate the plots\nfor ax in axs.flat:\n    ax.axvline(x=0.5, color='black', linestyle='--')\n\n# Add a horizontal line to separate the plots\nfor ax in axs.flat:\n    ax.axhline(y=0.5, color='black', linestyle='--')\n\n# Add a legend to the plots\naxs[0, 0].legend(['Model-Basedness'])\naxs[0, 1].legend(['Meta-Cognition'])\naxs[0, 2].legend(['Exploration'])\naxs[0, 3].legend(['Risk Taking'])\naxs[0, 4].legend(['Bayesian Reasoning'])\naxs[0, 5].legend(['Simple Bandits'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Set the title of the plot\nax.set_title('ImageNet-1K Linear Probing')\n\n# Set the x-axis label\nax.set_xlabel('Pre-training GPU Hours')\n\n# Set the y-axis label\nax.set_ylabel('Accuracy [%]')\n\n# Set the x-axis limits\nax.set_xlim(0, 4000)\n\n# Set the y-axis limits\nax.set_ylim(75, 90)\n\n# Create a scatter plot for each model\nax.scatter([1000, 2000, 3000], [85, 83, 81], color='black', s=100)\nax.plot([1000, 2000, 3000], [85, 83, 81], color='green', linestyle='-', linewidth=2)\n\n# Create a scatter plot for each model\nax.scatter([1000, 2000, 3000], [85, 83, 81], color='black', s=100)\nax.plot([1000, 2000, 3000], [85, 83, 81], color='green', linestyle='-', linewidth=2)\n\n# Create a scatter plot for each model\nax.scatter([1000, 2000, 3000], [85, 83, 81], color='black', s=100)\nax.plot([1000, 2000, 3000], [85, 83, 81], color='green', linestyle='-', linewidth=2)\n\n# Create a scatter plot for each model\nax.scatter([1000, 2000, 3000], [85, 83, 81], color='black', s=100)\nax.plot([1000, 2000, 3000], [85, 83, 81], color='green', linestyle='-', linewidth=2)\n\n# Create a scatter plot for each model\nax.scatter([1000, 2000, 3000], [85, 83, 81], color='black', s=100)\nax.plot([1000, 2000, 3000], [85, 83, 81], color='green', linestyle='-', linewidth=2)\n\n# Create a scatter plot for each model\nax.scatter([1000, 2000, 3000], [85, 83, 81], color='black', s=100)\nax.plot([1000, 2000, 3000], [85, 83, 81], color='green', linestyle='-', linewidth=2)\n\n# Create a scatter plot for each model\nax.scatter([1000, 2000, 3000], [85, 83, 81], color='black', s=100)\nax.plot([1000, 2000, 3000], [85, 83, 81], color='green', linestyle='-', linewidth=2)\n\n# Create a scatter plot for each model\nax.scatter([1000, 2000, 3000], [85, 83, 81], color='black', s=100)\nax.plot([1000, 2000, 3000], [85, 83, 81], color='green', linestyle='-', linewidth=2)\n\n# Create a scatter plot for each model\nax.scatter([1000, 2000, 3000], [85, 83, 81], color='black', s=100)\nax.plot([1000, 2000, 3000], [85, 83, 81], color='green', linestyle='-', linewidth=2)\n\n# Create a scatter plot for each model\nax.scatter([1000, 2000, 3000], [85, 83, 81], color='black', s=100)\nax.plot([1000, 2000, 3000], [85, 83, 81], color='green', linestyle='-', linewidth=2)\n\n# Create a scatter plot for each model\nax.scatter([1000, 2000, 3000], [85, 83, 81], color='black', s=100)\nax.plot([1000, 2000, 3000], [85, 83, 81], color='green', linestyle='-', linewidth=2)\n\n# Create a scatter plot for each model\nax.scatter([1000, 2000, 3000], [85, 83, 81], color='black', s=100)\nax.plot([1000, 2000, 3000], [85, 83, 81], color='green', linestyle='-', linewidth=2)\n\n# Create a scatter plot for each model\nax.scatter([1000, 2000, 3000], [85, 83, 81], color='black', s=100)\nax.plot([1000, 2000, 3000], [85, 83, 81], color='green', linestyle='-', linewidth=2)\n\n# Create a scatter plot for each model\nax.scatter([1000, 2000, 3000], [85, 83, 81], color='black', s=100)\nax.plot([1000, 2000, 3000], [85, 83, 81], color='green', linestyle='-', linewidth=2)\n\n# Create a scatter plot for each model\nax.scatter([1000, 2000, 3000], [85, 83, 81], color='black', s=100)\nax.plot([1000, 2000, 3000], [85, 83, 81], color='green', linestyle='-', linewidth=2)\n\n# Create a scatter plot for each model\nax.scatter([1000, 2000, 3000], [85, 83, 81], color='black', s=100)\nax.plot([1000, 2000, 3000], [85, 83, 81], color='green', linestyle='-', linewidth=2)\n\n# Create a scatter plot for each model\nax.scatter([1000, 2000, 3000], [85, 83, 81], color='black', s=100)\nax.plot([1000, 2000, 3000], [85, 83, 81], color='green', linestyle='-', linewidth=2)\n\n# Create a scatter plot for each model\nax.scatter([1000, 2000, 3000], [85, 83, 81], color='black', s=100)\nax.plot([1000, 2000, 3000], [85, 83, 81], color='green', linestyle='-', linewidth=2)\n\n# Create a scatter plot for each model\nax.scatter([1000, 2000, 3000], [85, 83, 81], color='black', s=100)\nax.plot([1000, 2000, 3000], [85, 83, 81], color='green', linestyle='-', linewidth=2)\n\n# Create a scatter plot for each model\nax.scatter([1000, 2000, 3000], [85, 83, 81], color='black', s=100)\nax.plot([1000, 2000, 3000], [85, 83, 81], color='green', linestyle='-', linewidth=2)\n\n# Create a scatter plot for each model\nax.scatter([1000, 2000, 3000], [85, 83, 81], color='black', s=100)\nax.plot([1000, 2000, 3000], [85, 83, 81], color='green', linestyle='-', linewidth=2)\n\n# Create a scatter plot for each model\nax.scatter([1000, 2000, 3000], [85, 83, 81], color='black', s=100)\nax.plot([1000, 2000, 3000], [85, 83, 81], color='green', linestyle='-', linewidth=2)\n\n# Create a scatter plot for each model\nax.scatter([1000, 2000, 3000], [85, 83, 81], color='black', s=100)\nax.plot([1000, 2000, 3000], [85, 83, 81], color='green', linestyle='-', linewidth=2)\n\n# Create a scatter plot for each model\nax.scatter([1000, 2000, 3000], [85, 83, 81], color='black', s=100)\nax.plot([1000, 2000, 3000], [85, 83, 81], color='green', linestyle='-', linewidth=2)\n\n# Create a scatter plot for each model\nax.scatter([1000, 2000, 3000], [85, 83, 81], color='black', s=100)\nax.plot([1000, 2000, 3000], [85, 83, 81], color='green', linestyle='-', linewidth=2)\n\n# Create a scatter plot for each model\nax.scatter([1000, 2000, 3000], [85, 83, 81], color='black', s=100)\nax.plot([1000, 2000, 3000], [85, 83, 81], color='green', linestyle='-', linewidth=2)\n\n# Create a scatter plot for each model\nax.scatter([1000, 2000, 3000], [85, 83, 81], color='black', s=100)\nax.plot([1000, 2000, 3000], [85, 83, 81], color='green', linestyle='-', linewidth=2)\n\n# Create a scatter plot for each model\nax.scatter([1000, 2000, 3000], [85, 83, 81], color='black', s=100)\nax.plot([1000, 2000, 3000], [85, 83, 81], color='green', linestyle='-', linewidth=2)\n\n# Create a scatter plot for each model\nax.scatter([1000, 2000, 3000], [85, 83, 81], color='black', s=100)\nax.plot([1000, 2000, 3000], [85, 83, 81], color='green', linestyle='-', linewidth=2)\n\n# Create a scatter plot for each model\nax.scatter([1000, 2000, 3000], [85, 83, 81], color='black', s=100)\nax.plot([1000, 2000, 3000], [85, 83, 81], color='green', linestyle='-', linewidth=2)\n\n# Create a scatter plot for each model\nax.scatter([1000, 2000, 3000], [85, 83, 81], color='black', s=100)\nax.plot([1000, 2000, 3000], [85, 83, 81], color='green', linestyle='-', linewidth=2)\n\n# Create a scatter plot for each model\nax.scatter([1000, 2000, 3000], [85, 83, 81], color='black', s=100)\nax.plot([1000, 2000, 3000], [85, 83, 81], color='green', linestyle='-', linewidth=2)\n\n# Create a scatter plot for each model\nax.scatter([1000, 2000, 3000], [85, 83, 81], color='black', s=100)\nax.plot([1000, 2000, 3000], [85, 83, 81], color='green', linestyle='-', linewidth=2)\n\n# Create a scatter plot for each model\nax.scatter([1000, 2000, 3000], [85, 83, 81], color='black', s=100)\nax.plot([1000, 2000, 3000], [85, 83, 81], color='green', linestyle='-', linewidth=2)\n\n# Create a scatter plot for each model\nax.scatter([1000, 2000, 3000], [85, 83, 81], color='black', s=100)\nax.plot([1000, 2000, 3000], [85, 83, 81], color='green', linestyle='-', linewidth=2)\n\n# Create a scatter plot for each model\nax.scatter([1000, 2000, 3000], [85, 83, 81], color='black', s=100)\nax.plot([1000, 2000, 3000], [85, 83, 81], color='green', linestyle='-', linewidth=2)\n\n# Create a scatter plot for each model\nax.scatter([1000, 2000, 3000], [85, 83, 81], color='black', s=100)\nax.plot([1000, 2000, 3000], [85, 83, 81], color='green', linestyle='-', linewidth=2)\n\n# Create a scatter plot for each model\nax.scatter([1000, 2000, 3000], [85, 83, 81], color='black', s=100)\nax.plot([1000, 2000, 3000], [85, 83, 81], color='green', linestyle='-', linewidth=2)\n\n# Create a scatter plot for each model\nax.scatter([1000, 2000, 3000], [85, 83, 81], color='black', s=100)\nax.plot([1000, 2000, 3000], [85, 83, 81], color='green', linestyle='-', linewidth=2)\n\n# Create a scatter plot for each model\nax.scatter([1000, 2000, 3000], [85, 83, 81], color='black', s=100)\nax.plot([1000, 2000, 3000], [85, 83, 81], color='green', linestyle='-', linewidth=2)\n\n# Create a scatter plot for each model\nax.scatter([1000, 2000, 3000], [85, 83, 81], color='black', s=100)\nax.plot([1000, 2000, 3000], [85, 83, 81], color='green', linestyle='-', linewidth=2)\n\n# Create a scatter plot for each model\nax.scatter([1000, 2000, 3000], [85, 83, 81], color='black', s=100)\nax.plot([1000, 2000, 3000], [85, 83, 81], color='green', linestyle='-', linewidth=2)\n\n# Create a scatter plot for each model\nax.scatter([1000, 200"}
{"file": "dataset/ori_500/scatter_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Bubble Size: Number of Anomalies Detected')\n\n# Set the x-axis label\nax.set_xlabel('Infernece Time (seconds)')\n\n# Set the y-axis label\nax.set_ylabel('Average Score')\n\n# Set the tick labels for the x-axis\nax.set_xticks([10, 20, 30, 40, 50, 60])\n\n# Set the tick labels for the y-axis\nax.set_yticks([0.5, 0.6, 0.7, 0.8, 0.9, 1.0])\n\n# Draw a rectangle at the bottom left corner\nrect = plt.Rectangle((0, 0), 1, 1, fc='blue')\nax.add_patch(rect)\n\n# Draw a circle at the top right corner\ncircle = plt.Circle((1, 1), 0.5, fc='red')\nax.add_patch(circle)\n\n# Draw a line graph\nx = [10, 20, 30, 40, 50, 60]\ny = [0.5, 0.6, 0.7, 0.8, 0.9, 1.0]\nax.plot(x, y)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Number of parameters')\n\n# Create a scatter plot with random data\nx = np.random.rand(10)\ny = np.random.rand(10)\nax.scatter(x, y)\n\n# Set the x and y limits\nax.set_xlim([0, 1])\nax.set_ylim([0, 1])\n\n# Set the x and y labels\nax.set_xlabel('EgoSchema VQA accuracy')\nax.set_ylabel('Perception Test VQA accuracy')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Average Relative Error, u')\n\n# Set the x-axis label\nax.set_xlabel('Test Case Index')\n\n# Set the y-axis label\nax.set_ylabel('Average Relative Error, u')\n\n# Set the x-ticks\nax.set_xticks([1, 2, 3, 4, 5])\n\n# Set the y-ticks\nax.set_yticks([0.01, 0.02, 0.03, 0.04, 0.05, 0.06, 0.07, 0.08])\n\n# Add a rectangle for the legend\nax.legend(['Single LSTM', 'Ensemble LSTM', 'CAE Reconstruction'], loc='upper left')\n\n# Add a scatter plot for each test case\nax.scatter([1, 2, 3, 4, 5], [0.01, 0.02, 0.03, 0.04, 0.05], color='blue')\nax.scatter([1, 2, 3, 4, 5], [0.02, 0.03, 0.04, 0.05, 0.06], color='green')\nax.scatter([1, 2, 3, 4, 5], [0.03, 0.04, 0.05, 0.06, 0.07], color='red')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 3.0))\n\n# Set the title of the plot\nax.set_title('Accuracies for the ImageNet Classes (ClarifAI)')\n\n# Set the x-axis label\nax.set_xlabel('Classes')\n\n# Set the y-axis label\nax.set_ylabel('Accuracies')\n\n# Define the classes\nclasses = ['spotlight', 'sliding', 'wool', 'weasel', 'space', 'partridge', 'mushroom', 'bighorn']\n\n# Define the accuracies\naccuracies = [0.95, 0.85, 0.75, 0.65, 0.55, 0.45, 0.35, 0.25]\n\n# Plot the data\nax.plot(classes, accuracies, 'o-')\n\n# Add a legend\nax.legend(['Majority', 'Minority'], loc='upper left')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and a set of subplots\nfig, axs = plt.subplots(1, 2, figsize=(10.0, 4.0))\n\n# Set the title for each subplot\naxs[0].set_title('Logic Grid Puzzle(Accuracy versus token cost)')\naxs[1].set_title('Logic Grid Puzzle(Accuracy versus TFLOPS)')\n\n# Define the data for the plots\nx = [50, 40, 30, 20, 10, 0]\ny1 = [68, 66, 64, 62, 60, 58]\ny2 = [68, 66, 64, 62, 60, 58]\n\n# Plot the data\naxs[0].plot(x, y1, 'ro-')\naxs[0].plot(x, y2, 'bo-')\n\n# Add labels to the plots\naxs[0].set_xlabel('Token cost($)')\naxs[0].set_ylabel('Accuracy(%)')\n\n# Define the data for the second subplot\nx = [50, 40, 30, 20, 10, 0]\ny1 = [68, 66, 64, 62, 60, 58]\ny2 = [68, 66, 64, 62, 60, 58]\n\n# Plot the data\naxs[1].plot(x, y1, 'ro-')\naxs[1].plot(x, y2, 'bo-')\n\n# Add labels to the plots\naxs[1].set_xlabel('TFLOPS')\naxs[1].set_ylabel('Accuracy(%)')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_16.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 4.0))\n\n# Set the title of the plot\nax.set_title('Energy Efficiency')\n\n# Set the x-axis label\nax.set_xlabel('Efficiency (%)')\n\n# Set the y-axis label\nax.set_ylabel('Carbon Reduction (%)')\n\n# Define the data points\nx = [15, 20, 25, 30, 35, 40, 45, 50]\ny = [10, 20, 30, 40, 50, 60, 70, 80]\n\n# Plot the data points\nax.plot(x, y, 'ro-')\n\n# Add a legend\nax.legend(['Solar', 'Wind', 'Hydro', 'Geothermal', 'Biomass', 'Nuclear', 'Tidal', 'Wave'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_17.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(9.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Stock Market Analysis')\n\n# Set the x-axis label\nax.set_xlabel('\u0394 Robust Accuracy (%)')\n\n# Set the y-axis label\nax.set_ylabel('\u0394 RNFR (%)')\n\n# Create a scatter plot with random data\nx = np.random.rand(100)\ny = np.random.rand(100)\nax.scatter(x, y, c='blue', alpha=0.5)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_18.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Set the x-axis limits\nax.set_xlim(2, 16)\n\n# Set the y-axis limits\nax.set_ylim(80, 110)\n\n# Set the x-axis ticks\nax.set_xticks(range(2, 17, 2))\n\n# Set the y-axis ticks\nax.set_yticks(range(80, 111, 10))\n\n# Set the grid lines\nax.grid(True)\n\n# Set the title of the plot\nax.set_title('Stock Prices')\n\n# Set the labels for the x-axis and y-axis\nax.set_xlabel('Time')\nax.set_ylabel('Price')\n\n# Add a legend\nax.legend()\n\n# Plot the data\nax.plot([2, 4, 6, 8, 10, 12, 14, 16], [95, 90, 85, 80, 75, 70, 65, 60], 'o-', label='Day 1', color='blue')\nax.plot([2, 4, 6, 8, 10, 12, 14, 16], [90, 85, 80, 75, 70, 65, 60, 55], 'o-', label='Day 2', color='orange')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_19.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Set the x-axis and y-axis limits\nax.set_xlim(2, 16)\nax.set_ylim(0, 110)\n\n# Draw a rectangle for the background\nax.add_patch(plt.Rectangle((0, 0), 16, 110, color='blue'))\n\n# Draw a vertical line at x=5\nax.axvline(x=5, color='red')\n\n# Draw a horizontal line at y=70\nax.axhline(y=70, color='green')\n\n# Draw a scatter plot with 10 points\nx = [2, 4, 6, 8, 10, 12, 14, 16]\ny = [90, 95, 100, 105, 110, 115, 120, 125]\nax.scatter(x, y, color='purple')\n\n# Draw a bar chart with 5 bars\nx = [3, 5, 7, 9, 11]\ny = [80, 85, 90, 95, 100]\nax.bar(x, y, color='orange')\n\n# Draw a pie chart with 3 slices\nx = [1, 2, 3]\ny = [10, 20, 30]\nax.pie(y, colors=['cyan', 'magenta', 'yellow'])\n\n# Draw a histogram with 5 bins\nx = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]\ny = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160]\nax.hist(y, bins=5, color='black')\n\n# Draw a line graph with 5 points\nx = [1, 2, 3, 4, 5]\ny = [10, 20, 30, 40, 50]\nax.plot(x, y, color='brown')\n\n# Draw a scatter plot with 5 points\nx = [1, 2, 3, 4, 5]\ny = [10, 20, 30, 40, 50]\nax.scatter(x, y, color='pink')\n\n# Draw a bar chart with 5 bars\nx = [1, 2, 3, 4, 5]\ny = [10, 20, 30, 40, 50]\nax.bar(x, y, color='grey')\n\n# Draw a pie chart with 3 slices\nx = [1, 2, 3]\ny = [10, 20, 30]\nax.pie(y, colors=['cyan', 'magenta', 'yellow'])\n\n# Draw a histogram with 5 bins\nx = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]\ny = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160]\nax.hist(y, bins=5, color='black')\n\n# Draw a line graph with 5 points\nx = [1, 2, 3, 4, 5]\ny = [10, 20, 30, 40, 50]\nax.plot(x, y, color='brown')\n\n# Draw a scatter plot with 5 points\nx = [1, 2, 3, 4, 5]\ny = [10, 20, 30, 40, 50]\nax.scatter(x, y, color='pink')\n\n# Draw a bar chart with 5 bars\nx = [1, 2, 3, 4, 5]\ny = [10, 20, 30, 40, 50]\nax.bar(x, y, color='grey')\n\n# Draw a pie chart with 3 slices\nx = [1, 2, 3]\ny = [10, 20, 30]\nax.pie(y, colors=['cyan', 'magenta', 'yellow'])\n\n# Draw a histogram with 5 bins\nx = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]\ny = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160]\nax.hist(y, bins=5, color='black')\n\n# Draw a line graph with 5 points\nx = [1, 2, 3, 4, 5]\ny = [10, 20, 30, 40, 50]\nax.plot(x, y, color='brown')\n\n# Draw a scatter plot with 5 points\nx = [1, 2, 3, 4, 5]\ny = [10, 20, 30, 40, 50]\nax.scatter(x, y, color='pink')\n\n# Draw a bar chart with 5 bars\nx = [1, 2, 3, 4, 5]\ny = [10, 20, 30, 40, 50]\nax.bar(x, y, color='grey')\n\n# Draw a pie chart with 3 slices\nx = [1, 2, 3]\ny = [10, 20, 30]\nax.pie(y, colors=['cyan', 'magenta', 'yellow'])\n\n# Draw a histogram with 5 bins\nx = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]\ny = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160]\nax.hist(y, bins=5, color='black')\n\n# Draw a line graph with 5 points\nx = [1, 2, 3, 4, 5]\ny = [10, 20, 30, 40, 50]\nax.plot(x, y, color='brown')\n\n# Draw a scatter plot with 5 points\nx = [1, 2, 3, 4, 5]\ny = [10, 20, 30, 40, 50]\nax.scatter(x, y, color='pink')\n\n# Draw a bar chart with 5 bars\nx = [1, 2, 3, 4, 5]\ny = [10, 20, 30, 40, 50]\nax.bar(x, y, color='grey')\n\n# Draw a pie chart with 3 slices\nx = [1, 2, 3]\ny = [10, 20, 30]\nax.pie(y, colors=['cyan', 'magenta', 'yellow'])\n\n# Draw a histogram with 5 bins\nx = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]\ny = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160]\nax.hist(y, bins=5, color='black')\n\n# Draw a line graph with 5 points\nx = [1, 2, 3, 4, 5]\ny = [10, 20, 30, 40, 50]\nax.plot(x, y, color='brown')\n\n# Draw a scatter plot with 5 points\nx = [1, 2, 3, 4, 5]\ny = [10, 20, 30, 40, 50]\nax.scatter(x, y, color='pink')\n\n# Draw a bar chart with 5 bars\nx = [1, 2, 3, 4, 5]\ny = [10, 20, 30, 40, 50]\nax.bar(x, y, color='grey')\n\n# Draw a pie chart with 3 slices\nx = [1, 2, 3]\ny = [10, 20, 30]\nax.pie(y, colors=['cyan', 'magenta', 'yellow'])\n\n# Draw a histogram with 5 bins\nx = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]\ny = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160]\nax.hist(y, bins=5, color='black')\n\n# Draw a line graph with 5 points\nx = [1, 2, 3, 4, 5]\ny = [10, 20, 30, 40, 50]\nax.plot(x, y, color='brown')\n\n# Draw a scatter plot with 5 points\nx = [1, 2, 3, 4, 5]\ny = [10, 20, 30, 40, 50]\nax.scatter(x, y, color='pink')\n\n# Draw a bar chart with 5 bars\nx = [1, 2, 3, 4, 5]\ny = [10, 20, 30, 40, 50]\nax.bar(x, y, color='grey')\n\n# Draw a pie chart with 3 slices\nx = [1, 2, 3]\ny = [10, 20, 30]\nax.pie(y, colors=['cyan', 'magenta', 'yellow'])\n\n# Draw a histogram with 5 bins\nx = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]\ny = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160]\nax.hist(y, bins=5, color='black')\n\n# Draw a line graph with 5 points\nx = [1, 2, 3, 4, 5]\ny = [10, 20, 30, 40, 50]\nax.plot(x, y, color='brown')\n\n# Draw a scatter plot with 5 points\nx = [1, 2, 3, 4, 5]\ny = [10, 20, 30, 40, 50]\nax.scatter(x, y, color='pink')\n\n# Draw a bar chart with 5 bars\nx = [1, 2, 3, 4, 5]\ny = [10, 20, 30, 40, 50]\nax.bar(x, y, color='grey')\n\n# Draw a pie chart with 3 slices\nx = [1, 2, 3]\ny = [10, 20, 30]\nax.pie(y, colors=['cyan', 'magenta', 'yellow'])\n\n# Draw a histogram with 5 bins\nx = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]\ny = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160]\nax.hist(y, bins=5, color='black')\n\n# Draw a line graph with 5 points\nx = [1, 2, 3, 4, 5]\ny = [10, 20, 30, 40, 50]\nax.plot(x, y, color='brown')\n\n# Draw a scatter plot with 5 points\nx = [1, 2, 3, 4, 5]\ny = [10, 20, 30, 40, 50]\nax.scatter(x, y, color='pink')\n\n# Draw a bar chart with 5 bars\nx = [1, 2, 3, 4, 5]\ny = [10, 20, 30, 40, 50]\nax.bar(x, y, color='grey')\n\n# Draw a pie chart with 3 slices\nx = [1, 2, 3]\ny = [10, 20, 30]\nax.pie(y, colors=['cyan', 'magenta', 'yellow'])\n\n# Draw a histogram with 5 bins\nx = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]\ny = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160]\nax.hist(y, bins=5, color='black')\n\n# Draw a line graph with 5 points\nx = [1, 2, 3, 4, 5]\ny = [10, 20, 30, 40, 50]\nax.plot(x, y, color='brown')\n\n# Draw a scatter plot with 5 points\nx = [1, 2, 3, 4, 5]\ny = [10, 20, 30, 40, 50]\nax.scatter(x, y, color='pink')\n\n# Draw a bar chart with 5 bars\nx = [1, 2, 3, 4, 5]\ny = [10, 20, 30, 40, 50]\nax.bar(x, y, color='grey')\n\n# Draw a pie chart with 3 slices\nx = [1, 2, 3]\ny = [10, 20, 30]\nax.pie(y, colors=['cyan', 'magenta', 'yellow'])\n\n# Draw a histogram with 5 bins\nx = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]\ny = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160]\nax.hist(y, bins=5, color='black')\n\n# Draw a line graph with 5 points\nx = [1, 2, 3, 4, 5]\ny = [10, 20, 30, 40, 50]\nax.plot(x, y, color='brown')\n\n# Draw a scatter plot with 5 points\nx = [1, 2, 3, 4, 5]\ny = [10, 20, 30, 40, 50]\nax.scatter(x, y, color='pink')\n\n# Draw a bar chart with 5 bars\nx = [1, 2, 3, 4, 5]\ny = [10, 20, 30, 40, 50]\nax.bar(x, y, color='grey')\n\n# Draw a pie chart with 3 slices\n"}
{"file": "dataset/ori_500/scatter_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(4.0, 8.0))\n\n# Set the title of the graph\nax.set_title('Energy Production Trends')\n\n# Create a list of energy sources\nenergy_sources = ['Solar Energy', 'Wind Energy', 'Hydropower']\n\n# Create a list of colors for each energy source\ncolors = ['cyan', 'red', 'gray']\n\n# Create a list of energy output values\nenergy_output = [220, 210, 200]\n\n# Create a list of installed capacity values\ninstalled_capacity = [175, 200, 225, 250, 275, 300]\n\n# Plot the data\nfor i in range(len(energy_sources)):\n    ax.plot(installed_capacity, energy_output[i], color=colors[i], label=energy_sources[i])\n\n# Add a legend\nax.legend()\n\n# Set the x-axis label\nax.set_xlabel('Installed Capacity (GW)')\n\n# Set the y-axis label\nax.set_ylabel('Energy Output (TWh)')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_20.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Scatter plot with colorbar')\n\n# Create a scatter plot\nscatter = ax.scatter([10, 20, 30, 40, 50, 60, 70, 80, 90], [10, 20, 30, 40, 50, 60, 70, 80, 90], c=[10, 20, 30, 40, 50, 60, 70, 80, 90], cmap='viridis')\n\n# Add a color bar which maps values to colors\ncbar = fig.colorbar(scatter)\n\n# Set the limits of the color bar\ncbar.set_clim(0, 100)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_21.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Set the title of the plot\nax.set_title('LibriCSS vs Additional Data 1')\n\n# Create a scatter plot with random data\nx = [2, 3, 4, 5, 6, 7, 8]\ny = [0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3]\nax.scatter(x, y, color='blue')\n\n# Add labels to the x-axis\nax.set_xlabel('Number of Microphones')\n\n# Add labels to the y-axis\nax.set_ylabel('WER (%)')\n\n# Create a second subplot\nax2 = fig.add_subplot(122)\n\n# Set the title of the second plot\nax2.set_title('AMI vs Additional Data 2')\n\n# Create a scatter plot with random data\nx2 = [2, 3, 4, 5, 6, 7, 8]\ny2 = [0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3]\nax2.scatter(x2, y2, color='red')\n\n# Add labels to the x-axis\nax2.set_xlabel('Number of Microphones')\n\n# Add labels to the y-axis\nax2.set_ylabel('WER (%)')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_22.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(12.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Performance Comparison')\n\n# Create a scatter plot\nax.scatter([0.5, 0.7, 0.9], [0.3, 0.4, 0.5], color='blue')\nax.scatter([0.1, 0.3, 0.5], [0.2, 0.3, 0.4], color='orange')\nax.scatter([0.2, 0.4, 0.6], [0.1, 0.2, 0.3], color='green')\nax.scatter([0.3, 0.5, 0.7], [0.0, 0.1, 0.2], color='red')\n\n# Set the x and y limits\nax.set_xlim(0, 1)\nax.set_ylim(0, 1)\n\n# Set the x and y labels\nax.set_xlabel('Value')\nax.set_ylabel('Performance')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_23.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Set the title of the plot\nax.set_title('Model-Basedness')\n\n# Create a scatter plot with random data\nax.scatter([1, 2, 3, 4, 5], [1, 2, 3, 4, 5], color='blue')\n\n# Set the x-axis label\nax.set_xlabel('Models')\n\n# Set the y-axis label\nax.set_ylabel('Score')\n\n# Add a rectangle annotation\nrect = plt.Rectangle((0.5, 0.5), 0.2, 0.2, color='blue')\nax.add_patch(rect)\n\n# Add a text annotation\nax.text(0.5, 0.5, 'Model-Basedness', ha='center', va='center', color='white')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_24.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and a set of subplots\nfig, axs = plt.subplots(2, 2, figsize=(15, 5))\n\n# Scatter plot for the first subplot\naxs[0, 0].scatter([70, 80, 90], [40, 50, 60], color='blue')\naxs[0, 0].set_title('Scatter Plot - deepskyblue')\n\n# Line plot for the second subplot\naxs[0, 1].plot([70, 80, 90], [40, 50, 60], color='red')\naxs[0, 1].set_title('Line Plot - magenta')\n\n# Bar chart for the third subplot\naxs[1, 0].bar([70, 80, 90], [40, 50, 60], color='green')\naxs[1, 0].set_title('Bar Chart - limegreen')\n\n# Pie chart for the fourth subplot\naxs[1, 1].pie([40, 50, 60], colors=['purple', 'orange', 'yellow'])\naxs[1, 1].set_title('Pie Chart - gold')\n\n# Set the color scale for each subplot\ncmap = plt.get_cmap('coolwarm')\nfor ax in axs.flat:\n    ax.set_facecolor(cmap(0.5))\n    ax.set_xlabel('X Values')\n    ax.set_ylabel('Y Values')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_25.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\nx = [70, 72, 74, 76, 78, 80, 82, 84, 86, 88]\ny1 = [30, 32, 35, 37, 39, 41, 43, 45, 47, 49]\ny2 = [35, 37, 39, 41, 43, 45, 47, 49, 51, 53]\ny3 = [40, 42, 44, 46, 48, 50, 52, 54, 56, 58]\n\n# Create a figure and a set of subplots\nfig, axs = plt.subplots(1, 3, figsize=(15, 5))\n\n# Plot the data\naxs[0].plot(x, y1, 'b-')\naxs[0].set_title('ViTPose (sc) Performance')\naxs[0].scatter([70, 72, 74, 76, 78, 80, 82, 84, 86, 88], [30, 32, 35, 37, 39, 41, 43, 45, 47, 49], color='pink')\n\naxs[1].plot(x, y2, 'r-')\naxs[1].set_title('ViTPose (ft) Performance')\naxs[1].scatter([70, 72, 74, 76, 78, 80, 82, 84, 86, 88], [35, 37, 39, 41, 43, 45, 47, 49, 51, 53], color='purple')\n\naxs[2].plot(x, y3, 'g-')\naxs[2].set_title('VLPose Performance')\naxs[2].scatter([70, 72, 74, 76, 78, 80, 82, 84, 86, 88], [40, 42, 44, 46, 48, 50, 52, 54, 56, 58], color='green')\n\n# Set the x-axis labels\nfor ax in axs:\n    ax.set_xlabel('Average Precision on HumanArt (%)')\n    ax.set_ylabel('Average Precision on MSCOCO (%)')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Token Cost ($)')\n# Set the x-axis label\nax.set_xlabel('Time (s)')\n# Set the y-axis label\nax.set_ylabel('Token Cost ($)')\n\n# Define the data points for the plot\nx = [1.2, 1.4, 1.6, 1.8, 2.0, 2.2, 2.4, 2.6, 2.8, 3.0, 3.2, 3.4, 3.6, 3.8, 4.0, 4.2, 4.4, 4.6, 4.8, 5.0, 5.2, 5.4, 5.6, 5.8, 6.0]\ny = [1.0, 2.5, 10.0, 20.0, 25.0, 30.0, 35.0, 40.0, 45.0, 50.0, 55.0, 60.0, 65.0, 70.0, 75.0, 80.0, 85.0, 90.0, 95.0, 100.0]\n\n# Plot the data points\nax.plot(x, y, 'ro-')\n\n# Set the limits of the x-axis\nax.set_xlim(0, 6)\n# Set the limits of the y-axis\nax.set_ylim(0, 100)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_4.pdf", "response": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(5.0, 5.0))\n\n# Set the background color of the plot\nax.set_facecolor('white')\n\n# Create a scatter plot with random data points\nx = np.random.rand(100)\ny = np.random.rand(100)\ncolors = np.random.rand(100)\nsizes = 1000 * np.random.rand(100)\nscatter = ax.scatter(x, y, c=colors, s=sizes, alpha=0.5)\n\n# Set the title of the plot\nax.set_title('Random Scatter Plot')\n\n# Set the x and y labels\nax.set_xlabel('X-axis')\nax.set_ylabel('Y-axis')\n\n# Show the plot\nplt.show()"}
{"file": "dataset/ori_500/scatter_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Scatter Plot of WRMSE vs BPP')\n\n# Set the x-axis label\nax.set_xlabel('Bit per pixel (BPP)')\n\n# Set the y-axis label\nax.set_ylabel('WRMSE')\n\n# Create a scatter plot with random data\nax.scatter([0.06, 0.08, 0.1, 0.12, 0.14, 0.16, 0.18, 0.2], [800, 750, 700, 650, 600, 550, 500, 450], color='blue')\n\n# Create a scatter plot with random data\nax.scatter([0.06, 0.08, 0.1, 0.12, 0.14, 0.16, 0.18, 0.2], [800, 750, 700, 650, 600, 550, 500, 450], color='green')\n\n# Create a scatter plot with random data\nax.scatter([0.06, 0.08, 0.1, 0.12, 0.14, 0.16, 0.18, 0.2], [800, 750, 700, 650, 600, 550, 500, 450], color='red')\n\n# Create a scatter plot with random data\nax.scatter([0.06, 0.08, 0.1, 0.12, 0.14, 0.16, 0.18, 0.2], [800, 750, 700, 650, 600, 550, 500, 450], color='purple')\n\n# Create a scatter plot with random data\nax.scatter([0.06, 0.08, 0.1, 0.12, 0.14, 0.16, 0.18, 0.2], [800, 750, 700, 650, 600, 550, 500, 450], color='orange')\n\n# Create a scatter plot with random data\nax.scatter([0.06, 0.08, 0.1, 0.12, 0.14, 0.16, 0.18, 0.2], [800, 750, 700, 650, 600, 550, 500, 450], color='cyan')\n\n# Create a scatter plot with random data\nax.scatter([0.06, 0.08, 0.1, 0.12, 0.14, 0.16, 0.18, 0.2], [800, 750, 700, 650, 600, 550, 500, 450], color='magenta')\n\n# Create a scatter plot with random data\nax.scatter([0.06, 0.08, 0.1, 0.12, 0.14, 0.16, 0.18, 0.2], [800, 750, 700, 650, 600, 550, 500, 450], color='yellow')\n\n# Create a scatter plot with random data\nax.scatter([0.06, 0.08, 0.1, 0.12, 0.14, 0.16, 0.18, 0.2], [800, 750, 700, 650, 600, 550, 500, 450], color='black')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Define the data for each scatter plot\nx1 = [1, 2, 3, 4, 5]\ny1 = [1, 2, 3, 4, 5]\nx2 = [1, 2, 3, 4, 5]\ny2 = [5, 4, 3, 2, 1]\nx3 = [1, 2, 3, 4, 5]\ny3 = [1, 2, 3, 4, 5]\nx4 = [1, 2, 3, 4, 5]\ny4 = [5, 4, 3, 2, 1]\n\n# Create the scatter plots\nax.scatter(x1, y1, color='orange')\nax.scatter(x2, y2, color='blue')\nax.scatter(x3, y3, color='green')\nax.scatter(x4, y4, color='red')\n\n# Set the title of the plot\nax.set_title('Weather Data')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 3.0))\n\n# Set the title of the plot\nax.set_title('Number of params. vs. NMAE on QM9')\n\n# Set the x-axis label\nax.set_xlabel('Number of parameters (M)')\n\n# Set the y-axis label\nax.set_ylabel('NMAE')\n\n# Define the data points\nx = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ny = [10, 12, 15, 18, 20, 22, 25, 28, 30, 32]\n\n# Plot the data points\nax.plot(x, y, 'o-')\n\n# Add a rectangle to represent a model\nrect = plt.Rectangle((2, 15), 1, 10, color='blue', alpha=0.5)\nax.add_patch(rect)\n\n# Add a text label to the rectangle\nax.text(2.5, 22, 'LNO', fontsize=12, color='black')\n\n# Add a circle to represent a model\ncircle = plt.Circle((5, 25), 0.5, color='red')\nax.add_artist(circle)\n\n# Add a text label to the circle\nax.text(5.5, 25, 'GNO', fontsize=12, color='black')\n\n# Add a polygon to represent a model\npolygon = plt.Polygon([[7, 30], [8, 32], [9, 30]], color='green')\nax.add_patch(polygon)\n\n# Add a text label to the polygon\nax.text(8.5, 31, 'InfGCN', fontsize=12, color='black')\n\n# Add a rectangle to represent a model\nrect = plt.Rectangle((1, 10), 1, 10, color='purple', alpha=0.5)\nax.add_patch(rect)\n\n# Add a text label to the rectangle\nax.text(1.5, 12, 'DeepDFT2', fontsize=12, color='black')\n\n# Add a circle to represent a model\ncircle = plt.Circle((3, 15), 0.5, color='green')\nax.add_artist(circle)\n\n# Add a text label to the circle\nax.text(3.5, 15, 'GPW-NO', fontsize=12, color='black')\n\n# Add a rectangle to represent a model\nrect = plt.Rectangle((6, 5), 1, 10, color='red', alpha=0.5)\nax.add_patch(rect)\n\n# Add a text label to the rectangle\nax.text(6.5, 7, 'FNO', fontsize=12, color='black')\n\n# Add a circle to represent a model\ncircle = plt.Circle((9, 10), 0.5, color='blue')\nax.add_artist(circle)\n\n# Add a text label to the circle\nax.text(9.5, 10, 'NMAE', fontsize=12, color='black')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Set the title of the plot\nax.set_title('Legend')\n\n# Set the x and y labels\nax.set_xlabel('PC1')\nax.set_ylabel('PC2')\n\n# Set the x and y limits\nax.set_xlim(-0.4, 0.4)\nax.set_ylim(-0.2, 0.4)\n\n# Create scatter plots for each class\nax.scatter([0.1, 0.2], [0.3, 0.4], color='blue', label='ar')\nax.scatter([0.2, 0.3], [0.4, 0.5], color='pink', label='de')\nax.scatter([0.3, 0.4], [0.5, 0.6], color='yellow', label='fr')\nax.scatter([0.4, 0.5], [0.6, 0.7], color='green', label='he')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(7.0, 10.0))\n\n# Set the title of the plot\nax.set_title('DE')\n\n# Set the x-axis label\nax.set_xlabel('CFA Similarity')\n\n# Set the y-axis label\nax.set_ylabel('MSE')\n\n# Create a scatter plot with random data\nax.scatter([0.5, 0.6, 0.7, 0.8, 0.9], [0.1, 0.2, 0.3, 0.4, 0.5], color='red')\n\n# Create a scatter plot with random data\nax.scatter([0.5, 0.6, 0.7, 0.8, 0.9], [0.1, 0.2, 0.3, 0.4, 0.5], color='blue')\n\n# Create a scatter plot with random data\nax.scatter([0.5, 0.6, 0.7, 0.8, 0.9], [0.1, 0.2, 0.3, 0.4, 0.5], color='green')\n\n# Create a scatter plot with random data\nax.scatter([0.5, 0.6, 0.7, 0.8, 0.9], [0.1, 0.2, 0.3, 0.4, 0.5], color='orange')\n\n# Create a scatter plot with random data\nax.scatter([0.5, 0.6, 0.7, 0.8, 0.9], [0.1, 0.2, 0.3, 0.4, 0.5], color='cyan')\n\n# Create a scatter plot with random data\nax.scatter([0.5, 0.6, 0.7, 0.8, 0.9], [0.1, 0.2, 0.3, 0.4, 0.5], color='magenta')\n\n# Create a scatter plot with random data\nax.scatter([0.5, 0.6, 0.7, 0.8, 0.9], [0.1, 0.2, 0.3, 0.4, 0.5], color='yellow')\n\n# Create a scatter plot with random data\nax.scatter([0.5, 0.6, 0.7, 0.8, 0.9], [0.1, 0.2, 0.3, 0.4, 0.5], color='black')\n\n# Create a scatter plot with random data\nax.scatter([0.5, 0.6, 0.7, 0.8, 0.9], [0.1, 0.2, 0.3, 0.4, 0.5], color='white')\n\n# Create a scatter plot with random data\nax.scatter([0.5, 0.6, 0.7, 0.8, 0.9], [0.1, 0.2, 0.3, 0.4, 0.5], color='gray')\n\n# Create a scatter plot with random data\nax.scatter([0.5, 0.6, 0.7, 0.8, 0.9], [0.1, 0.2, 0.3, 0.4, 0.5], color='silver')\n\n# Create a scatter plot with random data\nax.scatter([0.5, 0.6, 0.7, 0.8, 0.9], [0.1, 0.2, 0.3, 0.4, 0.5], color='gold')\n\n# Create a scatter plot with random data\nax.scatter([0.5, 0.6, 0.7, 0.8, 0.9], [0.1, 0.2, 0.3, 0.4, 0.5], color='brown')\n\n# Create a scatter plot with random data\nax.scatter([0.5, 0.6, 0.7, 0.8, 0.9], [0.1, 0.2, 0.3, 0.4, 0.5], color='pink')\n\n# Create a scatter plot with random data\nax.scatter([0.5, 0.6, 0.7, 0.8, 0.9], [0.1, 0.2, 0.3, 0.4, 0.5], color='lime')\n\n# Create a scatter plot with random data\nax.scatter([0.5, 0.6, 0.7, 0.8, 0.9], [0.1, 0.2, 0.3, 0.4, 0.5], color='maroon')\n\n# Create a scatter plot with random data\nax.scatter([0.5, 0.6, 0.7, 0.8, 0.9], [0.1, 0.2, 0.3, 0.4, 0.5], color='navy')\n\n# Create a scatter plot with random data\nax.scatter([0.5, 0.6, 0.7, 0.8, 0.9], [0.1, 0.2, 0.3, 0.4, 0.5], color='olive')\n\n# Create a scatter plot with random data\nax.scatter([0.5, 0.6, 0.7, 0.8, 0.9], [0.1, 0.2, 0.3, 0.4, 0.5], color='purple')\n\n# Create a scatter plot with random data\nax.scatter([0.5, 0.6, 0.7, 0.8, 0.9], [0.1, 0.2, 0.3, 0.4, 0.5], color='silver')\n\n# Create a scatter plot with random data\nax.scatter([0.5, 0.6, 0.7, 0.8, 0.9], [0.1, 0.2, 0.3, 0.4, 0.5], color='tan')\n\n# Create a scatter plot with random data\nax.scatter([0.5, 0.6, 0.7, 0.8, 0.9], [0.1, 0.2, 0.3, 0.4, 0.5], color='teal')\n\n# Create a scatter plot with random data\nax.scatter([0.5, 0.6, 0.7, 0.8, 0.9], [0.1, 0.2, 0.3, 0.4, 0.5], color='tomato')\n\n# Create a scatter plot with random data\nax.scatter([0.5, 0.6, 0.7, 0.8, 0.9], [0.1, 0.2, 0.3, 0.4, 0.5], color='turquoise')\n\n# Create a scatter plot with random data\nax.scatter([0.5, 0.6, 0.7, 0.8, 0.9], [0.1, 0.2, 0.3, 0.4, 0.5], color='violet')\n\n# Create a scatter plot with random data\nax.scatter([0.5, 0.6, 0.7, 0.8, 0.9], [0.1, 0.2, 0.3, 0.4, 0.5], color='wheat')\n\n# Create a scatter plot with random data\nax.scatter([0.5, 0.6, 0.7, 0.8, 0.9], [0.1, 0.2, 0.3, 0.4, 0.5], color='yellowgreen')\n\n# Create a scatter plot with random data\nax.scatter([0.5, 0.6, 0.7, 0.8, 0.9], [0.1, 0.2, 0.3, 0.4, 0.5], color='yellow')\n\n# Create a scatter plot with random data\nax.scatter([0.5, 0.6, 0.7, 0.8, 0.9], [0.1, 0.2, 0.3, 0.4, 0.5], color='yellowgreen')\n\n# Create a scatter plot with random data\nax.scatter([0.5, 0.6, 0.7, 0.8, 0.9], [0.1, 0.2, 0.3, 0.4, 0.5], color='yellow')\n\n# Create a scatter plot with random data\nax.scatter([0.5, 0.6, 0.7, 0.8, 0.9], [0.1, 0.2, 0.3, 0.4, 0.5], color='yellowgreen')\n\n# Create a scatter plot with random data\nax.scatter([0.5, 0.6, 0.7, 0.8, 0.9], [0.1, 0.2, 0.3, 0.4, 0.5], color='yellow')\n\n# Create a scatter plot with random data\nax.scatter([0.5, 0.6, 0.7, 0.8, 0.9], [0.1, 0.2, 0.3, 0.4, 0.5], color='yellowgreen')\n\n# Create a scatter plot with random data\nax.scatter([0.5, 0.6, 0.7, 0.8, 0.9], [0.1, 0.2, 0.3, 0.4, 0.5], color='yellow')\n\n# Create a scatter plot with random data\nax.scatter([0.5, 0.6, 0.7, 0.8, 0.9], [0.1, 0.2, 0.3, 0.4, 0.5], color='yellowgreen')\n\n# Create a scatter plot with random data\nax.scatter([0.5, 0.6, 0.7, 0.8, 0.9], [0.1, 0.2, 0.3, 0.4, 0.5], color='yellow')\n\n# Create a scatter plot with random data\nax.scatter([0.5, 0.6, 0.7, 0.8, 0.9], [0.1, 0.2, 0.3, 0.4, 0.5], color='yellowgreen')\n\n# Create a scatter plot with random data\nax.scatter([0.5, 0.6, 0.7, 0.8, 0.9], [0.1, 0.2, 0.3, 0.4, 0.5], color='yellow')\n\n# Create a scatter plot with random data\nax.scatter([0.5, 0.6, 0.7, 0.8, 0.9], [0.1, 0.2, 0.3, 0.4, 0.5], color='yellowgreen')\n\n# Create a scatter plot with random data\nax.scatter([0.5, 0.6, 0.7, 0.8, 0.9], [0.1, 0.2, 0.3, 0.4, 0.5], color='yellow')\n\n# Create a scatter plot with random data\nax.scatter([0.5, 0.6, 0.7, 0.8, 0.9], [0.1, 0.2, 0.3, 0.4, 0.5], color='yellowgreen')\n\n# Create a scatter plot with random data\nax.scatter([0.5, 0.6, 0.7, 0.8, 0.9], [0.1, 0.2, 0.3, 0.4, 0.5], color='yellow')\n\n# Create a scatter plot with random data\nax.scatter([0.5, 0.6, 0.7, 0.8, 0.9], [0.1, 0.2, 0.3, 0.4, 0.5], color='yellowgreen')\n\n# Create a scatter plot with random data\nax.scatter([0.5, 0.6, 0.7, 0.8, 0.9], [0.1, 0.2, 0.3, 0.4, 0.5], color='yellow')\n\n# Create a scatter plot with random data\nax.scatter([0.5, 0.6, 0.7, 0.8, 0.9], [0.1, 0.2, 0.3, 0.4, 0.5], color='yellowgreen')\n\n# Create a scatter plot with random data\nax.scatter([0.5, 0.6, 0.7, 0.8, 0.9], [0.1, 0.2, 0.3, 0.4, 0.5], color='yellow')\n\n# Create a scatter plot with random data\nax.scatter([0.5, 0.6, 0.7, 0.8, 0.9], [0.1, 0.2, 0.3, 0.4, 0.5], color='yellowgreen')\n\n# Create a scatter plot with random data\nax.scatter([0.5, 0.6, 0.7, 0.8, 0.9], [0.1, 0.2, 0.3, 0.4, 0.5], color='yellow')\n\n# Create a scatter plot with random data\nax.scatter([0.5, 0.6, 0.7, 0.8, 0.9], [0.1, 0.2, 0.3, 0.4, 0.5], color='yellowgreen')\n\n# Create a scatter plot with random data\nax.scatter([0.5, 0.6, 0.7, 0.8, 0.9], [0.1, 0.2, 0.3, 0.4, 0.5], color='yellow')\n\n# Create a scatter plot with random data\nax.scatter([0.5, 0.6, 0.7, 0.8, 0.9], [0.1, 0.2, 0.3, 0.4, 0.5], color='yellowgreen')\n\n# Create a scatter plot with random data\nax.scatter([0.5, 0.6, 0.7, 0.8, 0.9], [0.1, 0.2, 0.3, 0.4, 0.5], color='yellow')\n\n# Create a scatter plot with random data\nax.scatter([0.5, 0.6, 0.7, 0.8, 0.9], [0.1, 0.2, 0.3, 0.4, 0.5], color='yellowgreen')\n\n# Create a scatter plot with random data\nax.scatter([0.5, 0.6, 0.7, 0.8, 0.9], [0.1, 0.2, 0.3, 0.4, 0.5], color='yellow')\n\n# Create a scatter plot with random data\nax.scatter([0.5, 0.6, 0.7, 0.8, 0.9], [0.1, 0.2, 0.3, 0.4, 0.5], color='yellowgreen')\n\n# Create a scatter plot with random data\nax.scatter([0.5, 0.6, 0.7, 0.8, 0.9], [0.1, 0.2, 0.3, 0.4, 0.5], color='yellow')\n\n# Create a scatter plot with random data\nax.scatter([0.5, 0.6, 0.7, 0.8, 0.9], [0.1, 0.2, 0.3, 0.4, 0.5], color='yellowgreen')\n\n# Create a scatter plot with random data\nax.scatter([0.5, 0.6, 0.7, 0.8, 0.9], [0.1, 0.2, 0.3, 0.4, 0.5], color='yellow')\n\n# Create a scatter plot with random data\nax.scatter([0.5, 0.6, 0.7, 0.8, 0.9], [0.1, 0.2, 0.3, 0.4, 0.5], color='yellowgreen')\n\n# Create a scatter plot with random data\nax.scatter([0.5, 0.6, 0.7, 0.8, 0.9], [0.1, 0.2, 0.3, 0.4, 0.5], color='yellow')\n\n# Create a scatter plot with random data\nax.scatter([0.5, 0.6, 0.7, 0.8, 0.9], [0.1, 0.2, 0.3, 0.4, 0.5], color='yellowgreen')\n\n# Create a scatter plot with random data\nax.scatter([0.5, 0.6, 0.7"}
{"file": "dataset/ori_500/tree_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and a set of subplots\nfig, axs = plt.subplots(3, 2, figsize=(12.0, 8.0))\n\n# Set the color of the subplots\naxs[0, 0].set_facecolor('lightblue')\naxs[0, 1].set_facecolor('lightcoral')\naxs[1, 0].set_facecolor('lightgreen')\naxs[1, 1].set_facecolor('lightsalmon')\naxs[2, 0].set_facecolor('lightsteelblue')\naxs[2, 1].set_facecolor('lightyellow')\n\n# Set the title of each subplot\naxs[0, 0].set_title('physicsforums.com 18.42%')\naxs[0, 1].set_title('gmatclub.com 6.26%')\naxs[1, 0].set_title('stackexchange.com 30.6%')\naxs[1, 1].set_title('mathoverflow.net 10.91%')\naxs[2, 0].set_title('mathhelpforum.com 14.21%')\naxs[2, 1].set_title('proofwiki.org 8.54%')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/tree_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(12.0, 8.0))\n\n# Set the background color of the plot\nax.set_facecolor('#f5f5f5')\n\n# Create a bar chart with the data\nax.bar(['Java', 'Python', 'JavaScript', 'C++'], [10, 20, 27, 23], color='#9c27b0')\n\n# Add labels to the bars\nfor i, v in enumerate([10, 20, 27, 23]):\n    ax.text(i, v + 1, str(v) + '%', ha='center', va='bottom')\n\n# Set the title of the plot\nax.set_title('Programming Language Popularity')\n\n# Set the x-axis label\nax.set_xlabel('Programming Languages')\n\n# Set the y-axis label\nax.set_ylabel('Popularity (%)')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/tree_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(12.0, 8.0))\n\n# Create a rectangle for the first product\nrect1 = plt.Rectangle((0.1, 0.7), 0.8, 0.3, color='cyan')\nax.add_patch(rect1)\nax.text(0.5, 0.9, 'Adidas 13.42%', ha='center', va='center')\n\n# Create a rectangle for the second product\nrect2 = plt.Rectangle((0.1, 0.3), 0.8, 0.3, color='orange')\nax.add_patch(rect2)\nax.text(0.5, 0.5, 'Under Armour 8.54%', ha='center', va='center')\n\n# Create a rectangle for the third product\nrect3 = plt.Rectangle((0.1, -0.1), 0.8, 0.3, color='lightgreen')\nax.add_patch(rect3)\nax.text(0.5, 0.1, 'Nike 30.6%', ha='center', va='center')\n\n# Create a rectangle for the fourth product\nrect4 = plt.Rectangle((0.9, 0.7), 0.1, 0.3, color='orange')\nax.add_patch(rect4)\nax.text(0.95, 0.9, 'New Balance 6.26%', ha='center', va='center')\n\n# Create a rectangle for the fifth product\nrect5 = plt.Rectangle((0.9, 0.3), 0.1, 0.3, color='lightgreen')\nax.add_patch(rect5)\nax.text(0.95, 0.5, 'Reebok 10.91%', ha='center', va='center')\n\n# Create a rectangle for the sixth product\nrect6 = plt.Rectangle((0.9, -0.1), 0.1, 0.3, color='orange')\nax.add_patch(rect6)\nax.text(0.95, 0.1, 'Puma 14.21%', ha='center', va='center')\n\n# Set the limits of the plot\nax.set_xlim(0, 1)\nax.set_ylim(-1, 1)\n\n# Remove the axes\nax.axis('off')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/tree_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(4.0, 6.0))\n\n# Set the background color of the plot\nax.set_facecolor('pink')\n\n# Create a bar chart with the data\nax.bar(['A', 'B', 'C'], [50, 15, 20], color='blue')\n\n# Set the title of the plot\nax.set_title('Stock Market Performance')\n\n# Set the x-axis label\nax.set_xlabel('Stocks')\n\n# Set the y-axis label\nax.set_ylabel('Performance (%)')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/tree_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Global Population Distribution')\n\n# Create a bar chart with the data\nax.bar(['Europe', 'Australia', 'South America', 'Africa', 'North America'], [15, 18, 10, 12, 20], color=['yellow', 'purple', 'cyan', 'blue', 'green'])\n\n# Set the x-axis label\nax.set_xlabel('Region')\n\n# Set the y-axis label\nax.set_ylabel('Population Percentage (%)')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/violin_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 7.0))\n\n# Set the title of the plot\nax.set_title('Llama2 Performance')\n\n# Set the x-axis label\nax.set_xlabel('Number of examples')\n\n# Set the y-axis label\nax.set_ylabel('logP(CL)')\n\n# Create a scatter plot\nx = np.arange(1, 6)\ny = np.random.rand(5) * 6 + 1\nax.scatter(x, y)\n\n# Add a legend\nax.legend(['Llama2', 'Llama2 (In-Chat)'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/violin_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Comparison of Scores with and without Memory')\n\n# Create a color bar for the scores\ncbar = fig.colorbar(ax.imshow(np.random.rand(10, 10), cmap='hot'), ax=ax)\n\n# Set the labels for the x-axis\nax.set_xticks([0, 2, 4, 6, 8])\nax.set_xticklabels(['Efficiency', 'Comfort', 'Safety'])\n\n# Set the labels for the y-axis\nax.set_yticks([0, 2, 4, 6, 8])\nax.set_yticklabels(['Without Memory', 'With Memory'])\n\n# Add stars to the plot\nfor i in range(5):\n    for j in range(5):\n        ax.scatter(i, j, c='r', s=100)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/violin_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Define the data for the scatter plot\nx = np.linspace(0, 10, 100)\ny = np.sin(x)\n\n# Plot the data\nax.plot(x, y, 'o')\n\n# Set the title of the plot\nax.set_title('Scatter Plot')\n\n# Set the x and y labels\nax.set_xlabel('X-axis')\nax.set_ylabel('Y-axis')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/violin_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 4.0))\n\n# Set the title of the plot\nax.set_title('Scoring Evaluation')\n\n# Create a bar chart\nax.bar(['1', '2', '3', '4', '5'], [0.9, 0.7, 0.6, 0.8, 0.9], color='green')\n\n# Set the x-axis label\nax.set_xlabel('Player')\n\n# Set the y-axis label\nax.set_ylabel('Score')\n\n# Create a second subplot\nax2 = fig.add_subplot(122)\n\n# Set the title of the second subplot\nax2.set_title('Pair Comparison')\n\n# Create a bar chart for the second subplot\nax2.bar(['Winner', 'Losser Preference', 'Tie'], [0.8, 0.7, 0.9], color='orange')\n\n# Set the x-axis label for the second subplot\nax2.set_xlabel('Pair')\n\n# Set the y-axis label for the second subplot\nax2.set_ylabel('Score')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/violin_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Define the data for the plots\nx = np.linspace(0, 10, 100)\ny1 = np.sin(x)\ny2 = np.cos(x)\ny3 = np.tan(x)\n\n# Plot the data\nax.plot(x, y1, label='jTrans')\nax.plot(x, y2, label='PalmTree')\nax.plot(x, y3, label='CLAP')\n\n# Set the title and labels\nax.set_title('Stock Market Analysis')\nax.set_xlabel('Time')\nax.set_ylabel('Price')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/violin_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Set the background color of the plot\nax.set_facecolor('lightblue')\n\n# Create a rectangle for the logo\nlogo = plt.Rectangle((0.45, 0.9), 0.1, 0.1, color='orange')\nax.add_patch(logo)\n\n# Create a rectangle for the rating stars\nrating_stars = plt.Rectangle((0.45, 0.85), 0.1, 0.1, color='yellow')\nax.add_patch(rating_stars)\n\n# Create a rectangle for the course name\ncourse_name = plt.Rectangle((0.45, 0.8), 0.1, 0.1, color='blue')\nax.add_patch(course_name)\n\n# Create a rectangle for the course description\ncourse_description = plt.Rectangle((0.45, 0.75), 0.1, 0.1, color='green')\nax.add_patch(course_description)\n\n# Create a rectangle for the course price\ncourse_price = plt.Rectangle((0.45, 0.7), 0.1, 0.1, color='red')\nax.add_patch(course_price)\n\n# Create a rectangle for the course rating\ncourse_rating = plt.Rectangle((0.45, 0.65), 0.1, 0.1, color='purple')\nax.add_patch(course_rating)\n\n# Create a rectangle for the course instructor\ncourse_instructor = plt.Rectangle((0.45, 0.6), 0.1, 0.1, color='brown')\nax.add_patch(course_instructor)\n\n# Create a rectangle for the course duration\ncourse_duration = plt.Rectangle((0.45, 0.55), 0.1, 0.1, color='pink')\nax.add_patch(course_duration)\n\n# Create a rectangle for the course level\ncourse_level = plt.Rectangle((0.45, 0.5), 0.1, 0.1, color='cyan')\nax.add_patch(course_level)\n\n# Create a rectangle for the course category\ncourse_category = plt.Rectangle((0.45, 0.45), 0.1, 0.1, color='magenta')\nax.add_patch(course_category)\n\n# Create a rectangle for the course location\ncourse_location = plt.Rectangle((0.45, 0.4), 0.1, 0.1, color='lime')\nax.add_patch(course_location)\n\n# Create a rectangle for the course language\ncourse_language = plt.Rectangle((0.45, 0.35), 0.1, 0.1, color='silver')\nax.add_patch(course_language)\n\n# Create a rectangle for the course certificate\ncourse_certificate = plt.Rectangle((0.45, 0.3), 0.1, 0.1, color='gold')\nax.add_patch(course_certificate)\n\n# Create a rectangle for the course enrollment\ncourse_enrollment = plt.Rectangle((0.45, 0.25), 0.1, 0.1, color='navy')\nax.add_patch(course_enrollment)\n\n# Create a rectangle for the course reviews\ncourse_reviews = plt.Rectangle((0.45, 0.2), 0.1, 0.1, color='olive')\nax.add_patch(course_reviews)\n\n# Create a rectangle for the course ratings\ncourse_ratings = plt.Rectangle((0.45, 0.15), 0.1, 0.1, color='maroon')\nax.add_patch(course_ratings)\n\n# Create a rectangle for the course ratings\ncourse_ratings = plt.Rectangle((0.45, 0.1), 0.1, 0.1, color='teal')\nax.add_patch(course_ratings)\n\n# Create a rectangle for the course ratings\ncourse_ratings = plt.Rectangle((0.45, 0.05), 0.1, 0.1, color='coral')\nax.add_patch(course_ratings)\n\n# Create a rectangle for the course ratings\ncourse_ratings = plt.Rectangle((0.45, 0.0), 0.1, 0.1, color='crimson')\nax.add_patch(course_ratings)\n\n# Create a rectangle for the course ratings\ncourse_ratings = plt.Rectangle((0.45, -0.05), 0.1, 0.1, color='cyan')\nax.add_patch(course_ratings)\n\n# Create a rectangle for the course ratings\ncourse_ratings = plt.Rectangle((0.45, -0.1), 0.1, 0.1, color='darkblue')\nax.add_patch(course_ratings)\n\n# Create a rectangle for the course ratings\ncourse_ratings = plt.Rectangle((0.45, -0.15), 0.1, 0.1, color='darkgreen')\nax.add_patch(course_ratings)\n\n# Create a rectangle for the course ratings\ncourse_ratings = plt.Rectangle((0.45, -0.2), 0.1, 0.1, color='darkgrey')\nax.add_patch(course_ratings)\n\n# Create a rectangle for the course ratings\ncourse_ratings = plt.Rectangle((0.45, -0.25), 0.1, 0.1, color='darkkhaki')\nax.add_patch(course_ratings)\n\n# Create a rectangle for the course ratings\ncourse_ratings = plt.Rectangle((0.45, -0.3), 0.1, 0.1, color='darkmagenta')\nax.add_patch(course_ratings)\n\n# Create a rectangle for the course ratings\ncourse_ratings = plt.Rectangle((0.45, -0.35), 0.1, 0.1, color='darkorange')\nax.add_patch(course_ratings)\n\n# Create a rectangle for the course ratings\ncourse_ratings = plt.Rectangle((0.45, -0.4), 0.1, 0.1, color='darkred')\nax.add_patch(course_ratings)\n\n# Create a rectangle for the course ratings\ncourse_ratings = plt.Rectangle((0.45, -0.45), 0.1, 0.1, color='darksalmon')\nax.add_patch(course_ratings)\n\n# Create a rectangle for the course ratings\ncourse_ratings = plt.Rectangle((0.45, -0.5), 0.1, 0.1, color='darkseagreen')\nax.add_patch(course_ratings)\n\n# Create a rectangle for the course ratings\ncourse_ratings = plt.Rectangle((0.45, -0.55), 0.1, 0.1, color='darkslateblue')\nax.add_patch(course_ratings)\n\n# Create a rectangle for the course ratings\ncourse_ratings = plt.Rectangle((0.45, -0.6), 0.1, 0.1, color='darkslategray')\nax.add_patch(course_ratings)\n\n# Create a rectangle for the course ratings\ncourse_ratings = plt.Rectangle((0.45, -0.65), 0.1, 0.1, color='darkturquoise')\nax.add_patch(course_ratings)\n\n# Create a rectangle for the course ratings\ncourse_ratings = plt.Rectangle((0.45, -0.7), 0.1, 0.1, color='darkviolet')\nax.add_patch(course_ratings)\n\n# Create a rectangle for the course ratings\ncourse_ratings = plt.Rectangle((0.45, -0.75), 0.1, 0.1, color='deeppink')\nax.add_patch(course_ratings)\n\n# Create a rectangle for the course ratings\ncourse_ratings = plt.Rectangle((0.45, -0.8), 0.1, 0.1, color='deepskyblue')\nax.add_patch(course_ratings)\n\n# Create a rectangle for the course ratings\ncourse_ratings = plt.Rectangle((0.45, -0.85), 0.1, 0.1, color='dimgray')\nax.add_patch(course_ratings)\n\n# Create a rectangle for the course ratings\ncourse_ratings = plt.Rectangle((0.45, -0.9), 0.1, 0.1, color='dimgrey')\nax.add_patch(course_ratings)\n\n# Create a rectangle for the course ratings\ncourse_ratings = plt.Rectangle((0.45, -0.95), 0.1, 0.1, color='dodgerblue')\nax.add_patch(course_ratings)\n\n# Create a rectangle for the course ratings\ncourse_ratings = plt.Rectangle((0.45, -1.0), 0.1, 0.1, color='firebrick')\nax.add_patch(course_ratings)\n\n# Create a rectangle for the course ratings\ncourse_ratings = plt.Rectangle((0.45, -1.05), 0.1, 0.1, color='floralwhite')\nax.add_patch(course_ratings)\n\n# Create a rectangle for the course ratings\ncourse_ratings = plt.Rectangle((0.45, -1.1), 0.1, 0.1, color='forestgreen')\nax.add_patch(course_ratings)\n\n# Create a rectangle for the course ratings\ncourse_ratings = plt.Rectangle((0.45, -1.15), 0.1, 0.1, color='fuchsia')\nax.add_patch(course_ratings)\n\n# Create a rectangle for the course ratings\ncourse_ratings = plt.Rectangle((0.45, -1.2), 0.1, 0.1, color='gainsboro')\nax.add_patch(course_ratings)\n\n# Create a rectangle for the course ratings\ncourse_ratings = plt.Rectangle((0.45, -1.25), 0.1, 0.1, color='ghostwhite')\nax.add_patch(course_ratings)\n\n# Create a rectangle for the course ratings\ncourse_ratings = plt.Rectangle((0.45, -1.3), 0.1, 0.1, color='gold')\nax.add_patch(course_ratings)\n\n# Create a rectangle for the course ratings\ncourse_ratings = plt.Rectangle((0.45, -1.35), 0.1, 0.1, color='goldenrod')\nax.add_patch(course_ratings)\n\n# Create a rectangle for the course ratings\ncourse_ratings = plt.Rectangle((0.45, -1.4), 0.1, 0.1, color='gray')\nax.add_patch(course_ratings)\n\n# Create a rectangle for the course ratings\ncourse_ratings = plt.Rectangle((0.45, -1.45), 0.1, 0.1, color='green')\nax.add_patch(course_ratings)\n\n# Create a rectangle for the course ratings\ncourse_ratings = plt.Rectangle((0.45, -1.5), 0.1, 0.1, color='greenyellow')\nax.add_patch(course_ratings)\n\n# Create a rectangle for the course ratings\ncourse_ratings = plt.Rectangle((0.45, -1.55), 0.1, 0.1, color='grey')\nax.add_patch(course_ratings)\n\n# Create a rectangle for the course ratings\ncourse_ratings = plt.Rectangle((0.45, -1.6), 0.1, 0.1, color='honeydew')\nax.add_patch(course_ratings)\n\n# Create a rectangle for the course ratings\ncourse_ratings = plt.Rectangle((0.45, -1.65), 0.1, 0.1, color='hotpink')\nax.add_patch(course_ratings)\n\n# Create a rectangle for the course ratings\ncourse_ratings = plt.Rectangle((0.45, -1.7), 0.1, 0.1, color='indianred')\nax.add_patch(course_ratings)\n\n# Create a rectangle for the course ratings\ncourse_ratings = plt.Rectangle((0.45, -1.75), 0.1, 0.1, color='indigo')\nax.add_patch(course_ratings)\n\n# Create a rectangle for the course ratings\ncourse_ratings = plt.Rectangle((0.45, -1.8), 0.1, 0.1, color='ivory')\nax.add_patch(course_ratings)\n\n# Create a rectangle for the course ratings\ncourse_ratings = plt.Rectangle((0.45, -1.85), 0.1, 0.1, color='khaki')\nax.add_patch(course_ratings)\n\n# Create a rectangle for the course ratings\ncourse_ratings = plt.Rectangle((0.45, -1.9), 0.1, 0.1, color='lavender')\nax.add_patch(course_ratings)\n\n# Create a rectangle for the course ratings\ncourse_ratings = plt.Rectangle((0.45, -1.95), 0.1, 0.1, color='lavenderblush')\nax.add_patch(course_ratings)\n\n# Create a rectangle for the course ratings\ncourse_ratings = plt.Rectangle((0.45, -2.0), 0.1, 0.1, color='lawngreen')\nax.add_patch(course_ratings)\n\n# Create a rectangle for the course ratings\ncourse_ratings = plt.Rectangle((0.45, -2.05), 0.1, 0.1, color='lemonchiffon')\nax.add_patch(course_ratings)\n\n# Create a rectangle for the course ratings\ncourse_ratings = plt.Rectangle((0.45, -2.1), 0.1, 0.1, color='lightblue')\nax.add_patch(course_ratings)\n\n# Create a rectangle for the course ratings\ncourse_ratings = plt.Rectangle((0.45, -2.15), 0.1, 0.1, color='lightcoral')\nax.add_patch(course_ratings)\n\n# Create a rectangle for the course ratings\ncourse_ratings = plt.Rectangle((0.45, -2.2), 0.1, 0.1, color='lightcyan')\nax.add_patch(course_ratings)\n\n# Create a rectangle for the course ratings\ncourse_ratings = plt.Rectangle((0.45, -2.25), 0.1, 0.1, color='lightgoldenrodyellow')\nax.add_patch(course_ratings)\n\n# Create a rectangle for the course ratings\ncourse_ratings = plt.Rectangle((0.45, -2.3), 0.1, 0.1, color='lightgray')\nax.add_patch(course_ratings)\n\n# Create a rectangle for the course ratings\ncourse_ratings = plt.Rectangle((0.45, -2.35), 0.1, 0.1, color='lightgreen')\nax.add_patch(course_ratings)\n\n# Create a rectangle for the course ratings\ncourse_ratings = plt.Rectangle((0.45, -2.4), 0.1, 0.1, color='lightgrey')\nax.add_patch(course_ratings)\n\n# Create a rectangle for the course ratings\ncourse_ratings = plt.Rectangle((0.45, -2.45), 0.1, 0.1, color='lightpink')\nax.add_patch(course_ratings)\n\n# Create a rectangle for the course ratings\ncourse_ratings = plt.Rectangle((0.45, -2.5), 0.1, 0.1, color='lightsalmon')\nax.add_patch(course_ratings)\n\n# Create a rectangle for the course ratings\ncourse_ratings = plt.Rectangle((0.45, -2.55), 0.1, 0.1, color='lightseagreen')\nax.add_patch(course_ratings)\n\n# Create a rectangle for the course ratings\ncourse_ratings = plt.Rectangle((0.45, -2.6), 0.1, 0.1, color='lightskyblue')\nax.add_patch(course_ratings)\n\n# Create a rectangle for the course ratings\ncourse_ratings = plt.Rectangle((0.45, -2.65), 0.1, 0.1, color='lightslategray')\nax.add_patch(course_ratings)\n\n# Create a rectangle for the course ratings\ncourse_ratings = plt.Rectangle((0.45, -2.7), 0.1, 0.1, color='lightsteelblue')\nax.add_patch(course_ratings)\n\n# Create a rectangle for the course ratings\ncourse_ratings = plt.Rectangle((0.45, -2.75), 0.1, 0.1, color='lightyellow')\nax.add_patch(course_ratings)\n\n# Create a rectangle for the course ratings\ncourse_ratings = plt.Rectangle((0.45, -2.8), 0.1, 0.1, color='lime')\nax.add_patch(course_ratings)\n\n# Create a rectangle for the course ratings\ncourse_ratings = plt.Rectangle((0.45, -2.85), 0.1, 0.1, color='limegreen')\nax.add_patch(course_ratings)\n\n# Create a rectangle for the course ratings\ncourse_ratings = plt.Rectangle((0.45, -2.9), 0.1, 0.1, color='linen')\nax.add_patch(course_ratings)\n\n# Create a rectangle for the course ratings\ncourse_ratings = plt.Rectangle((0.45, -2.95), 0.1, 0.1, color='magenta')\nax.add_patch(course_ratings)\n\n# Create a rectangle for the course ratings\ncourse_ratings = plt.Rectangle((0.45, -3.0), 0.1, 0.1, color='maroon')\nax.add_patch(course_ratings)\n\n# Create a rectangle for the course ratings\ncourse_ratings = plt.Rectangle((0.45, -3.05), 0.1, 0.1, color='mediumaquamarine')\nax.add_patch(course_ratings)\n\n# Create a rectangle for the course ratings\ncourse_ratings = plt.Rectangle((0.45, -3.1), 0.1, 0.1, color='mediumblue')\nax.add_patch(course_ratings)\n\n# Create a rectangle for the course ratings\ncourse_ratings = plt.Rectangle((0.45, -3.15), 0.1, 0.1, color='mediumorchid')\nax.add_patch(course_ratings)\n\n# Create a rectangle for the course ratings\ncourse_ratings = plt.Rectangle((0.45, -3.2), 0.1, 0.1, color='mediumpurple')\nax.add_patch(course_ratings)\n\n# Create a rectangle for the course ratings\ncourse_ratings = plt.Rectangle((0.45, -3.25), 0.1, 0.1, color='mediumseagreen')\nax.add_patch(course_ratings)\n\n# Create a rectangle for the course ratings\ncourse_ratings = plt.Rectangle((0.45, -3.3), 0.1, 0.1, color='mediumslateblue')\nax.add_patch(course_ratings)\n\n# Create a rectangle for the course ratings\ncourse_ratings = plt.Rectangle((0.45, -3.35), 0.1, 0.1, color='mediumspringgreen')\nax.add_patch(course_ratings)\n\n# Create a rectangle for the course ratings\n"}
{"file": "dataset/ori_500/violin_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Set the background color of the plot\nax.set_facecolor('lightgrey')\n\n# Set the title of the plot\nax.set_title('Customer Satisfaction Analysis')\n\n# Set the x-axis label\nax.set_xlabel('Product')\n\n# Set the y-axis label\nax.set_ylabel('Satisfaction Score')\n\n# Define the data for the plot\nproducts = ['Vanilla', 'CoT']\nsatisfaction_scores = [75, 85]\n\n# Create a bar chart\nbars = ax.bar(products, satisfaction_scores, color='blue')\n\n# Add labels to the bars\nfor bar in bars:\n    height = bar.get_height()\n    ax.annotate(f'{height}',\n                xy=(bar.get_x() + bar.get_width() / 2, height),\n                xytext=(0, 3),  # 3 points vertical offset\n                textcoords=\"offset points\",\n                ha='center', va='bottom')\n\n# Set the limits of the x-axis\nax.set_xlim(-1, len(products))\n\n# Set the limits of the y-axis\nax.set_ylim(0, 100)\n\n# Set the grid lines\nax.grid(True)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/violin_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Set the title of the plot\nax.set_title('% Decrease in Test MSE vs. FLAM-GL')\n\n# Set the x-axis label\nax.set_xlabel('Number of Features')\n\n# Set the y-axis label\nax.set_ylabel('% Decrease in Test MSE')\n\n# Set the x-ticks\nax.set_xticks([2, 4, 6, 8, 10])\n\n# Set the y-ticks\nax.set_yticks(range(0, 100, 10))\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the text\nax.set_color_cycle(['blue', 'orange'])\n\n# Plot the data\nax.plot([2, 4, 6, 8, 10], [163, 201, 176, 159, 137], label='Group l0')\nax.plot([2, 4, 6, 8, 10], [97, 95, 95, 97, 97], label='AGIS')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/violin_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Define the data\nx = np.array([0.88, 0.85, 0.79, 0.67, 0.57])\ny = np.array([0.18, 0.19, 0.19, 0.18, 0.16])\n\n# Plot the data\nax.plot(x, y, 'ro-')\n\n# Set the title and labels\nax.set_title('Decimated Sampling Rate')\nax.set_xlabel('KCC')\nax.set_ylabel('Pearson R')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/violin_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis for the first subplot\nfig, ax = plt.subplots(figsize=(12, 8))\nax.set_title('Distribution of Grades: Class 1')\nax.set_xlabel('Grades')\nax.set_ylabel('Number of Students')\n\n# Create a bar chart with random data\ngrades = ['A', 'B', 'C', 'D', 'F']\nnum_students = [np.random.randint(50, 100) for _ in range(len(grades))]\nax.bar(grades, num_students, color='blue')\n\n# Create a second subplot\nfig, ax = plt.subplots(figsize=(12, 8))\nax.set_title('Distribution of Grades: Class 2')\nax.set_xlabel('Grades')\nax.set_ylabel('Number of Students')\n\n# Create a pie chart with random data\nnum_students = [np.random.randint(50, 100) for _ in range(len(grades))]\nax.pie(num_students, labels=grades, colors=['red', 'green', 'blue', 'yellow', 'black'], autopct='%1.1f%%')\n\n# Create a third subplot\nfig, ax = plt.subplots(figsize=(12, 8))\nax.set_title('Distribution of Grades: Class 3')\nax.set_xlabel('Grades')\nax.set_ylabel('Number of Students')\n\n# Create a scatter plot with random data\nx = np.random.rand(50)\ny = np.random.rand(50)\nax.scatter(x, y, color='green')\n\n# Create a fourth subplot\nfig, ax = plt.subplots(figsize=(12, 8))\nax.set_title('Distribution of Grades: Class 4')\nax.set_xlabel('Grades')\nax.set_ylabel('Number of Students')\n\n# Create a histogram with random data\nnum_students = [np.random.randint(50, 100) for _ in range(len(grades))]\nax.hist(num_students, bins=5, color='blue')\n\nplt.show()\n```"}
