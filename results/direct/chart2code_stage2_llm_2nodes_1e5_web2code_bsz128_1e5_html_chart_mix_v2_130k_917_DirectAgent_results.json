{"file": "dataset/ori_500/3d_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.linspace(0, 10, 100)\ny1 = np.sin(x)\ny2 = np.cos(x)\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(7.0, 7.0))\n\n# Plot the data with different styles\nplt.plot(x, y1, label='Targets', color='orange', linestyle='-', linewidth=2, marker='o', markersize=5)\nplt.plot(x, y2, label='Predictions', color='blue', linestyle='--', linewidth=2, marker='s', markersize=5)\n\n# Set labels and title\nplt.xlabel('X-axis')\nplt.ylabel('Y-axis')\nplt.title('Comparison of Targets and Predictions')\n\n# Add a legend\nplt.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt  \nfrom mpl_toolkits.mplot3d import Axes3D  \nimport numpy as np  \n\n# Sample data\nx = np.array([0.5, 1.5, 2.5, 3.5])\ny = np.array([0.5, 1.5, 2.5, 3.5])\nz = np.array([0.5, 1.5, 2.5, 3.5])\ndx = np.array([0.5, 0.5, 0.5, 0.5])\ndy = np.array([0.5, 0.5, 0.5, 0.5])\ndz = np.array([0.5, 0.5, 0.5, 0.5])\n\n# Create a new figure\nfig = plt.figure(figsize=(8.0, 6.0))\nax = fig.add_subplot(111, projection='3d')\n\n# Plot the bar chart\nax.bar3d(x, y, z, dx, dy, dz, color='r', shade=True)\n\n# Set labels\nax.set_xlabel('Height')\nax.set_ylabel('Width')\nax.set_zlabel('Count')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nimport numpy as np\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(8.0, 6.0))\nax = fig.add_subplot(111, projection='3d')\n\n# Define the grid for the surface plot\nx = np.linspace(-5, 5, 100)\ny = np.linspace(-5, 5, 100)\nx, y = np.meshgrid(x, y)\nz = np.sin(np.sqrt(x**2 + y**2))\n\n# Plot the surface with a colormap and edge color\nsurface = ax.plot_surface(x, y, z, cmap='viridis', edgecolor='none')\n\n# Add a color bar which maps values to colors\ncbar = fig.colorbar(surface, ax=ax, shrink=0.5, aspect=10)\n\n# Set labels for axes\nax.set_xlabel('X')\nax.set_ylabel('Y')\nax.set_zlabel('Z')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nimport numpy as np\n\n# Sample data\nx = np.array([-4, -2, 0, 2, 4])\ny = np.array([1, 2, 3, 4, 5])\nz = np.array([10, 20, 30, 40, 50])\n\n# Create a new figure\nfig = plt.figure(figsize=(8.0, 6.0))\nax = fig.add_subplot(111, projection='3d')\n\n# Plot the data points\nax.scatter(x, y, z, c='red', marker='o', label='Discrete Points')\n\n# Fit a line to the data\ncoefficients = np.polyfit(x, z, 1)\npoly = np.poly1d(coefficients)\nax.plot(x, y, poly(x), color='blue', label='Fit Line')\n\n# Set labels\nax.set_xlabel('Temperature (\u00b0C)')\nax.set_ylabel('Pressure (kPa)')\nax.set_zlabel('Volume (L)')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Number of students in public and private schools over years\nyears = np.array([2010, 2012, 2014, 2016, 2018])\npublic_schools = np.array([0.3, 0.4, 0.5, 0.6, 0.7])\nprivate_schools = np.array([0.1, 0.2, 0.3, 0.4, 0.5])\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(8.0, 6.0))\nax = fig.add_subplot(111, projection='3d')\n\n# Plot the data\nxpos = np.arange(len(years))\ndx = dy = 0.5\ndzp = public_schools\ndzn = private_schools\n\nax.bar3d(xpos, ypos, zpos, dx, dy, dzp, color='orange', shade=True)\nax.bar3d(xpos, ypos, zpos, dx, dy, dzn, color='blue', shade=True)\n\n# Set labels\nax.set_xlabel('Year')\nax.set_ylabel('Type')\nax.set_zlabel('Student to Teacher Ratio')\n\n# Set ticks\nax.set_xticks(xpos)\nax.set_xticklabels(years)\nax.set_yticks([0, 1])\nax.set_yticklabels(['Public Schools', 'Private Schools'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nimport numpy as np\n\n# Sample data for demonstration\nx = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\ny = np.array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nz = np.array([0.05, 0.1, 0.15, 0.2, 0.25, 0.3, 0.35, 0.4, 0.45, 0.5])\n\n# Create a new figure\nfig = plt.figure(figsize=(8.0, 6.0))\nax = fig.add_subplot(111, projection='3d')\n\n# Plot the data\nscatter = ax.scatter(x, y, z, c=z, cmap='viridis', s=100, alpha=0.8)\n\n# Set labels\nax.set_xlabel('Age')\nax.set_ylabel('Vaccination Number')\nax.set_zlabel('Incidence Rate')\n\n# Add a color bar which maps values to colors\ncbar = fig.colorbar(scatter, ax=ax, shrink=0.5, aspect=10)\ncbar.set_label('Incidence Rate')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data for the first plot: Investment over time\nyears = np.array([2010, 2012, 2014, 2016, 2018])\ninvestment = np.array([3, 5, 7, 9, 11])\n\n# Sample data for the second plot: Adoption rate over technology level\ntech_levels = np.array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\nadoption_rate = np.array([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1])\n\n# Create a new figure with a larger size for better visibility\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10.0, 8.0), constrained_layout=True)\n\n# Plot 1: Investment over time\nax1.bar(years, investment, color='green', alpha=0.7)\nax1.set_title('Investment (Billion USD)')\nax1.set_xlabel('Year')\nax1.set_ylabel('Investment (Billion USD)')\nax1.grid(True, linestyle='--', alpha=0.7)\n\n# Plot 2: Adoption rate over technology level\nax2.scatter(tech_levels, adoption_rate, c=adoption_rate, cmap='viridis', s=100, alpha=0.8)\nax2.set_title('Adoption Rate (Technology Level)')\nax2.set_xlabel('Time Since Introduction (Years)')\nax2.set_ylabel('Adoption Rate')\nax2.grid(True, linestyle='--', alpha=0.7)\n\n# Show the plots\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nimport numpy as np\n\n# Create data for plotting\nx = np.linspace(-1, 1, 100)\ny = np.linspace(-1, 1, 100)\nX, Y = np.meshgrid(x, y)\nZ = X**2 + Y**2\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(10.0, 7.0))\n\n# Plot the first subplot\nax1 = fig.add_subplot(1, 2, 1, projection='3d')\nsurf1 = ax1.plot_surface(X, Y, Z, cmap='viridis', edgecolor='none')\nax1.set_title('f(x)')\nax1.set_xlabel('X')\nax1.set_ylabel('Y')\nax1.set_zlabel('Z')\n\n# Add color bar which maps values to colors\nfig.colorbar(surf1, ax=ax1, shrink=0.5, aspect=5)\n\n# Plot the second subplot\nax2 = fig.add_subplot(1, 2, 2, projection='3d')\nsurf2 = ax2.plot_surface(X, Y, Z, cmap='plasma', edgecolor='none')\nax2.set_title('solution')\nax2.set_xlabel('X')\nax2.set_ylabel('Y')\nax2.set_zlabel('Z')\n\n# Add color bar which maps values to colors\nfig.colorbar(surf2, ax=ax2, shrink=0.5, aspect=5)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nimport numpy as np\n\n# Create data for plotting\nx = np.linspace(0, 10, 100)\ny = np.linspace(0, 10, 100)\nx, y = np.meshgrid(x, y)\nz = np.sin(np.sqrt(x**2 + y**2))\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(10.0, 6.0))\nax = fig.add_subplot(111, projection='3d')\n\n# Plot the surface with color mapping\nsurf = ax.plot_surface(x, y, z, cmap='viridis', edgecolor='none')\n\n# Add a color bar which maps values to colors\ncbar = fig.colorbar(surf, shrink=0.5, aspect=5)\ncbar.set_label('Accuracy (%)')\n\n# Set labels for axes\nax.set_xlabel('K')\nax.set_ylabel('T')\nax.set_zlabel('tau')\n\n# Set title of the plot\nax.set_title('CIFAR10 Spiking ResNet18 T=6')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nimport numpy as np\n\n# Create data for plotting\nx = np.linspace(-100, 100, 200)\ny = np.linspace(-100, 100, 200)\nx, y = np.meshgrid(x, y)\nz = np.sin(np.sqrt(x**2 + y**2))\n\n# Create a new figure with a larger size for better visibility\nfig = plt.figure(figsize=(15.0, 10.0))\nax1 = fig.add_subplot(2, 2, 1, projection='3d')\nax2 = fig.add_subplot(2, 2, 2, projection='3d')\nax3 = fig.add_subplot(2, 2, 3, projection='3d')\nax4 = fig.add_subplot(2, 2, 4, projection='3d')\n\n# Plot the first subplot\nax1.plot_surface(x, y, z, cmap='viridis', edgecolor='none')\nax1.set_title('Origin')\nax1.set_xlabel('m')\nax1.set_ylabel('n')\nax1.set_zlabel('FREEDOM')\n\n# Plot the second subplot\nax2.plot_surface(x, y, z, cmap='plasma', edgecolor='none')\nax2.set_title('MG (ours)')\nax2.set_xlabel('m')\nax2.set_ylabel('n')\nax2.set_zlabel('FREEDOM')\n\n# Plot the third subplot\nax3.plot_surface(x, y, z, cmap='inferno', edgecolor='none')\nax3.set_title('Origin')\nax3.set_xlabel('m')\nax3.set_ylabel('n')\nax3.set_zlabel('FREEDOM')\n\n# Plot the fourth subplot\nax4.plot_surface(x, y, z, cmap='coolwarm', edgecolor='none')\nax4.set_title('MG (ours)')\nax4.set_xlabel('m')\nax4.set_ylabel('n')\nax4.set_zlabel('FREEDOM')\n\n# Adjust layout for better spacing\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nimport numpy as np\n\n# Sample data for demonstration\nx = np.array([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0])\ny = np.array([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0])\nz = np.array([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0])\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(7.0, 7.0))\nax = fig.add_subplot(111, projection='3d')\n\n# Plot the data\nax.scatter(x, y, z, c='orange', marker='o', label='Targets')\n\n# Set labels\nax.set_xlabel('X')\nax.set_ylabel('Y')\nax.set_zlabel('Z')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nimport numpy as np\n\n# Create data\nx = np.linspace(-4, 4, 100)\ny = np.linspace(-4, 4, 100)\nx, y = np.meshgrid(x, y)\nz = np.sin(np.sqrt(x**2 + y**2))\n\n# Create a new figure\nfig = plt.figure(figsize=(8.0, 8.0))\nax = fig.add_subplot(111, projection='3d')\n\n# Plot the surface\nsurf = ax.plot_surface(x, y, z, cmap='coolwarm', edgecolor='none', alpha=0.8)\n\n# Add color bar which maps values to colors\ncbar = fig.colorbar(surf, shrink=0.5, aspect=5)\ncbar.set_label('Intensity')\n\n# Set labels\nax.set_xlabel('Time')\nax.set_ylabel('Bus')\nax.set_zlabel('Value')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nimport numpy as np\n\n# Sample data for a 3D bar chart\nx = np.array([1, 2, 3, 4])\ny = np.array([1, 2, 3, 4])\nz = np.array([0, 0, 0, 0])\ndx = np.array([0.5, 0.5, 0.5, 0.5])\ndy = np.array([0.5, 0.5, 0.5, 0.5])\ndz = np.array([1, 2, 3, 4])\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(8.0, 8.0))\nax = fig.add_subplot(111, projection='3d')\n\n# Plot the 3D bar chart\nax.bar3d(x, y, z, dx, dy, dz, color=['red', 'green', 'blue', 'orange'])\n\n# Set labels and title\nax.set_xlabel('X Axis')\nax.set_ylabel('Y Axis')\nax.set_zlabel('Z Axis')\nax.set_title('3D Bar Chart Example')\n\n# Add a color bar to indicate the height of bars\ncbar = plt.colorbar(ax.collections[0], ax=ax)\ncbar.set_label('Height')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nimport numpy as np\n\n# Sample data\nx = np.array([10, 20, 30, 40, 50, 60, 70, 80, 90, 100])\ny = np.array([15, 25, 35, 45, 55, 65, 75, 85, 95, 105])\nz = np.array([10, 20, 30, 40, 50, 60, 70, 80, 90, 100])\n\n# Create a new figure\nfig = plt.figure(figsize=(8.0, 6.0))\nax = fig.add_subplot(111, projection='3d')\n\n# Plot the data\nscatter = ax.scatter(x, y, z, c=z, cmap='viridis', marker='o', s=100, edgecolor='k')\n\n# Set labels\nax.set_xlabel('Age')\nax.set_ylabel('Income')\nax.set_zlabel('Debt')\n\n# Add a color bar which maps values to colors\ncbar = fig.colorbar(scatter)\ncbar.set_label('Debt')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nimport numpy as np\n\n# Sample data\nx = np.array([10, 20, 30, 40, 50])\ny = np.array([15, 25, 35, 45, 55])\nz = np.array([-10, -20, -30, -40, -50])\n\n# Create a new figure\nfig = plt.figure(figsize=(8.0, 6.0))\nax = fig.add_subplot(111, projection='3d')\n\n# Plot the data\nax.plot(x, y, z, label='Sample Line', color='blue', linestyle='-', linewidth=2, marker='o', markersize=5)\n\n# Set labels\nax.set_xlabel('Temperature (\u00b0C)')\nax.set_ylabel('Time (s)')\nax.set_zlabel('Depth (m)')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create sample data for a heatmap\ndata = np.array([\n    [0.02, 0.03, 0.05, 0.07, 0.09],\n    [0.04, 0.06, 0.08, 0.10, 0.12],\n    [0.06, 0.08, 0.10, 0.12, 0.14],\n    [0.08, 0.10, 0.12, 0.14, 0.16],\n    [0.10, 0.12, 0.14, 0.16, 0.18]\n])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Plot the heatmap\ncax = ax.imshow(data, cmap='coolwarm', interpolation='nearest')\n\n# Add color bar\ncbar = fig.colorbar(cax)\ncbar.set_label('Density')\n\n# Set labels and title\nax.set_xlabel('LR Test')\nax.set_ylabel('m^* / 2')\nax.set_title('Heatmap of Density')\n\n# Add grid lines for better readability\nax.grid(True, linestyle='--', alpha=0.5)\n\n# Add annotations for each cell\nfor i in range(data.shape[0]):\n    for j in range(data.shape[1]):\n        ax.text(j, i, f'{data[i, j]:.2f}', ha='center', va='center', color='white')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\norb_feature_number = np.array([150, 200, 250, 300, 350, 400])\nate_rmse = np.array([-4.5, -4.0, -3.5, -3.0, -2.5, -2.0])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(7.0, 5.0))\n\n# Plot the data with different markers and colors\nax.scatter(orb_feature_number, ate_rmse, c=['blue', 'orange', 'green'], marker='o', s=50, alpha=0.8)\n\n# Add a line of best fit\nz = np.polyfit(orb_feature_number, ate_rmse, 1)\np = np.poly1d(z)\nax.plot(orb_feature_number, p(orb_feature_number), \"r--\")\n\n# Add a shaded region for demonstration purposes\nax.fill_between(orb_feature_number, -5, -3, color='gray', alpha=0.3)\n\n# Set labels and title\nax.set_xlabel('Average Tracked ORB Feature Number')\nax.set_ylabel('ATE RMSE')\nax.set_title('Correlation: -0.47')\n\n# Add a legend\nax.legend(['Low', 'Middle', 'High'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.array([8, 4, 2, 1])\ny = np.array([0.1, 0.3, 0.5, 0.7])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(7.0, 5.0))\n\n# Plot the data with different markers and colors\nax.scatter(x, y, c=['blue', 'orange', 'green', 'red'], marker='o', s=100, alpha=0.6, edgecolors='k')\n\n# Add a grid for better readability\nax.grid(True, linestyle='--', alpha=0.6)\n\n# Set labels with improved font size and style\nax.set_xlabel('Log (Depth L1)', fontsize=12, fontweight='bold')\nax.set_ylabel('Log (ATE RMSE)', fontsize=12, fontweight='bold')\n\n# Add a title with enhanced styling\nax.set_title('ATE RMSE vs Depth L1', fontsize=14, fontweight='bold', color='darkblue')\n\n# Add a legend with a custom location\nax.legend(['8x', '4x', '2x', '1x'], loc='upper left', fontsize=10)\n\n# Add a shaded region to highlight a specific area\nax.axhspan(-1, 0, color='gray', alpha=0.3, label='Shaded Region')\n\n# Add a line of best fit\nz = np.polyfit(x, y, 1)\np = np.poly1d(z)\nax.plot(x, p(x), \"r--\", linewidth=2)\n\n# Annotate the line of best fit\nax.annotate(f'Correlation: {np.corrcoef(x, y)[0, 1]:.2f}', xy=(0.5, -0.5), xytext=(0.5, -1),\n            arrowprops=dict(facecolor='black', shrink=0.05), fontsize=10)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data for demonstration\nx = np.linspace(0, 1, 100)\ny1 = np.sin(x)\ny2 = np.cos(x)\ny3 = np.tan(x)\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data with different styles and colors\nax.plot(x, y1, label='Benign', color='red', linestyle='-', linewidth=2, marker='o', markersize=5)\nax.plot(x, y2, label='BadNets', color='green', linestyle='--', linewidth=2, marker='s', markersize=5)\nax.plot(x, y3, label='BadNets KDE', color='blue', linestyle='-.', linewidth=2, marker='^', markersize=5)\n\n# Set labels and title\nax.set_xlabel('Average Top-5 Persistence of 1D Diagram')\nax.set_ylabel('Density')\nax.set_title('T-test p-value = 0.0000')\n\n# Add a legend\nax.legend()\n\n# Enhance the grid\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.array([1, 2, 3, 4, 5])\ny1 = np.array([0.6, 0.7, 0.8, 0.9, 0.85])\ny2 = np.array([0.5, 0.65, 0.75, 0.85, 0.9])\ny3 = np.array([0.4, 0.55, 0.65, 0.75, 0.85])\ny4 = np.array([0.3, 0.45, 0.55, 0.65, 0.75])\ny5 = np.array([0.2, 0.35, 0.45, 0.55, 0.65])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(10.0, 4.0))\n\n# Plot the data with different styles\nax.plot(x, y1, label='AOP-trend', color='darkgray', linestyle='-', linewidth=2)\nax.fill_between(x, y1 - 0.05, y1 + 0.05, color='lightblue', alpha=0.3)\n\nax.plot(x, y2, label='AOP-step1-APE', color='skyblue', linestyle='--', linewidth=2)\nax.fill_between(x, y2 - 0.05, y2 + 0.05, color='lightgreen', alpha=0.3)\n\nax.plot(x, y3, label='AOP-step2-APE', color='teal', linestyle='-.', linewidth=2)\nax.fill_between(x, y3 - 0.05, y3 + 0.05, color='lightcoral', alpha=0.3)\n\nax.plot(x, y4, label='AOP-best', color='navy', linestyle=':', linewidth=2)\nax.fill_between(x, y4 - 0.05, y4 + 0.05, color='lavender', alpha=0.3)\n\nax.plot(x, y5, label='AOP-Sum-best', color='forestgreen', linestyle='-', linewidth=2)\nax.fill_between(x, y5 - 0.05, y5 + 0.05, color='palegreen', alpha=0.3)\n\n# Set labels and title\nax.set_xlabel('Tasks')\nax.set_ylabel('Scores')\nax.set_title('Comparison of APO & APO-APEs (GPT-3 5-Turbo)')\n\n# Add grid for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5, alpha=0.7)\n\n# Add legend with a shadow effect\nax.legend(loc='upper left', shadow=True, fontsize='small')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.linspace(0, 1.4, 15)\ny1 = np.sin(x) * np.exp(-x)\ny2 = np.cos(x) * np.exp(-x)\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot the data with enhanced aesthetics\nax.plot(x, y1, label='H-wand - centers-cos', color='royalblue', linestyle='-', linewidth=2, marker='o', markersize=5, markevery=2)\nax.plot(x, y2, label='random', color='salmon', linestyle='--', linewidth=2, marker='s', markersize=5, markevery=2)\n\n# Set labels and title with improved font sizes\nax.set_xlabel('norm size', fontsize=12)\nax.set_ylabel('count', fontsize=12)\nax.set_title('summation_xsum:temperature=0.3,device=cuda', fontsize=14, fontweight='bold')\n\n# Add grid for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5, alpha=0.7)\n\n# Customize ticks\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Add a legend with a shadow effect\nax.legend(loc='upper right', fontsize=10, shadow=True)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the pie chart\nlabels = ['Incomparable', 'Different', 'Same']\nsizes = [73.3, 23.7, 3.0]\ncolors = ['#66b3ff', '#99ff99', '#ffcc99']\nexplode = (0.1, 0, 0)  # explode 1st slice\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(8.0, 4.0))\n\n# Plot the pie chart\nwedges, texts, autotexts = ax.pie(\n    sizes, \n    explode=explode, \n    labels=labels, \n    colors=colors, \n    autopct='%1.1f%%', \n    shadow=True, \n    startangle=140\n)\n\n# Set aspect ratio to be equal so that pie is drawn as a circle\nax.axis('equal')\n\n# Add a title\nax.set_title('Pie Chart of Different Categories', fontsize=14, fontweight='bold')\n\n# Add a legend\nax.legend(wedges, labels, title=\"Categories\", loc=\"center left\", bbox_to_anchor=(1, 0, 0.5, 1))\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_16.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data for plotting\ndata1 = np.array([46, 48, 49, 50, 51, 52])\ndata2 = np.array([47, 48, 49, 50, 51, 52])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(7.0, 5.0))\n\n# Plot the first dataset\nax.scatter(data1, data1, color='teal', label='SEAC')\n\n# Plot the second dataset\nax.scatter(data2, data2, color='coral', label='SAC(20Hz)')\n\n# Set labels and title\nax.set_xlabel('Time Cost (Seconds)')\nax.set_ylabel('Algorithms')\nax.set_title('Comparison of Algorithms')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_17.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\nmethods = ['CodeBERT', 'ChatGPT-3.5', 'ChatGPT-4.0']\ncodebert_scores = [63.64, 80.08, 84.27]\nchatgpt35_scores = [87.20, 90.12, 93.89]\nchatgpt40_scores = [75.00, 87.20, 90.12]\n\n# Create a new figure with a larger size for better visibility\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10.0, 4.0), sharey=True)\n\n# Plot for CodeBERT scores\nax1.bar(methods, codebert_scores, color='skyblue', label='CodeBERT')\nax1.plot(methods, codebert_scores, marker='o', linestyle='-', color='navy', linewidth=2, markersize=8)\nax1.set_title('Average Recall Scores by Method')\nax1.set_xlabel('Method')\nax1.set_ylabel('Scores')\nax1.legend()\n\n# Plot for ChatGPT-3.5 scores\nax2.bar(methods, chatgpt35_scores, color='lightgreen', label='ChatGPT-3.5')\nax2.plot(methods, chatgpt35_scores, marker='s', linestyle='--', color='red', linewidth=2, markersize=8)\nax2.set_title('Average F1 Scores by Method')\nax2.set_xlabel('Method')\nax2.set_ylabel('Scores')\nax2.legend()\n\n# Adjust layout for better spacing between subplots\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_18.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.array([4, 8, 12, 16, 20, 24, 28, 32])\ny1 = np.array([85, 87, 89, 91, 93, 95, 97, 99])\ny2 = np.array([83, 85, 87, 89, 91, 93, 95, 97])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Plot the data with different styles\nax.plot(x, y1, label='Trained w Few-Shot Ex', color='b', linestyle='-', linewidth=2, marker='o', markersize=5)\nax.plot(x, y2, label='Def Deduce+Ex Gen', color='r', linestyle='--', linewidth=2, marker='s', markersize=5)\n\n# Add a shaded region between the two lines\nax.fill_between(x, y1, y2, where=(y1 > y2), color='gray', alpha=0.3)\n\n# Set labels and title\nax.set_xlabel('Few-Shot K')\nax.set_ylabel('Micro F1')\nax.set_title('Comparison of Two Models')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_19.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Vehicle parameters and their efficiency\nvehicle_params = np.array([60, 62, 65, 70, 75])\nefficiency = np.array([60, 62, 65, 70, 75])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(7.0, 7.0))\n\n# Plot the data with enhanced aesthetics\nax.plot(vehicle_params, efficiency, marker='o', linestyle='-', color='red', linewidth=2, markersize=8, label='Cars')\n\n# Add a title and labels with improved font sizes\nax.set_title('Vehicle Efficiency vs. Parameter Size', fontsize=14)\nax.set_xlabel('Vehicle Parameter Size (units)', fontsize=12)\nax.set_ylabel('Efficiency (%)', fontsize=12)\n\n# Add grid lines for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Customize ticks for better readability\nax.set_xticks(np.arange(0, 80, 10))\nax.set_yticks(np.arange(50, 86, 5))\n\n# Add a legend with a shadow effect\nax.legend(loc='upper left', fontsize=10, shadow=True)\n\n# Annotate specific points for emphasis\nfor i, txt in enumerate(efficiency):\n    ax.annotate(f'{txt}', (vehicle_params[i], efficiency[i]), textcoords=\"offset points\", xytext=(0,10), ha='center')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the bar chart\nmodels = ['GPT-2', 'Llama 2 7B', 'Llama 2 70B', 'Mixtral 8x7B', 'GPT-3.5', 'GPT-4']\nsuccess_rates = [16, 12, 20, 26, 20, 22]\nencoding_decoding_points = [56, 30, 40, 50, 40, 22]\n\n# Create a new figure with specified size\nfig, ax1 = plt.subplots(figsize=(8.0, 5.0))\n\n# Plot the success rates\ncolor = 'tab:purple'\nax1.set_xlabel('Model')\nax1.set_ylabel('Success Rate (%)', color=color)\nax1.bar(models, success_rates, color=color, alpha=0.7, label='Success Rate')\nax1.tick_params(axis='y', labelcolor=color)\n\n# Create a second y-axis for encoding/decoding points\nax2 = ax1.twinx()\ncolor = 'tab:red'\nax2.set_ylabel('Encoding/Decoding Points', color=color)\nax2.plot(models, encoding_decoding_points, color=color, marker='o', linestyle='--', linewidth=2, markersize=8, label='Encoding/Decoding Points')\nax2.tick_params(axis='y', labelcolor=color)\n\n# Add a legend\nfig.legend(loc=\"upper left\", bbox_to_anchor=(0.1, 0.9), bbox_transform=ax1.transAxes)\n\n# Set title and adjust layout\nplt.title('Encoding/Decoding Points by Model', fontsize=14, fontweight='bold')\nplt.xticks(rotation=45)\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_20.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.array([0.01, 0.02, 0.03, 0.04, 0.05, 0.06, 0.07, 0.08, 0.09, 0.1])\ny = np.array([0.01, 0.02, 0.03, 0.04, 0.05, 0.06, 0.07, 0.08, 0.09, 0.1])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Plot the data with enhanced aesthetics\nax.scatter(x, y, color='orange', edgecolor='black', s=50, alpha=0.7, label='Subgroups')\n\n# Add a line of best fit\nz = np.polyfit(x, y, 1)\np = np.poly1d(z)\nax.plot(x, p(x), \"r--\", linewidth=2)\n\n# Set labels and title with improved font sizes\nax.set_xlabel('reduced probability', fontsize=12)\nax.set_ylabel('fraction of positives', fontsize=12)\nax.set_title('Calibration curve', fontsize=14)\n\n# Add a legend\nax.legend(loc='upper left', fontsize=10)\n\n# Add grid for better readability\nax.grid(True, linestyle='--', alpha=0.6)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_21.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data for demonstration\nx = np.linspace(-5, 5, 100)\ny1 = np.exp(-x**2)\ny2 = np.exp(-(x-1)**2)\ny3 = np.exp(-(x+1)**2)\n\n# Create a new figure with specified size\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(8.0, 4.0))\n\n# Plot the first subplot\nax1.plot(x, y1, label='Proposed', color='blue')\nax1.fill_between(x, y1, color='lightblue', alpha=0.5)\nax1.plot(x, y2, label='FOD-NET', color='orange')\nax1.fill_between(x, y2, color='orange', alpha=0.5)\nax1.plot(x, y3, label='SS3T', color='green')\nax1.fill_between(x, y3, color='green', alpha=0.5)\nax1.set_title('Model')\nax1.legend()\n\n# Plot the second subplot\nax2.boxplot([y1, y2, y3], vert=False, patch_artist=True, labels=['Proposed', 'FOD-NET', 'SS3T'])\nax2.set_title('ACC')\n\n# Adjust layout and display the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_22.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data for the histograms\ndata1 = np.random.normal(loc=150, scale=20, size=1000)\ndata2 = np.random.normal(loc=200, scale=15, size=1000)\ndata3 = np.random.normal(loc=175, scale=10, size=1000)\n\n# Create a new figure with a larger size for better visibility\nfig, axes = plt.subplots(2, 2, figsize=(10.0, 8.0), sharex=True, sharey=True)\n\n# Plot the first histogram\naxes[0, 0].hist(data1, bins=30, color='blue', alpha=0.7, edgecolor='black')\naxes[0, 0].set_title('Total')\naxes[0, 0].set_xlabel('Daily reward (Ether)')\naxes[0, 0].set_ylabel('Probability')\n\n# Plot the second histogram\naxes[0, 1].hist(data2, bins=30, color='red', alpha=0.7, edgecolor='black')\naxes[0, 1].set_title('Proposer')\naxes[0, 1].set_xlabel('Daily reward (Ether)')\naxes[0, 1].set_ylabel('Probability')\n\n# Plot the third histogram\naxes[1, 0].hist(data3, bins=30, color='green', alpha=0.7, edgecolor='black')\naxes[1, 0].set_title('Attestor')\naxes[1, 0].set_xlabel('Daily reward (Ether)')\naxes[1, 0].set_ylabel('Probability')\n\n# Plot the fourth histogram\naxes[1, 1].hist(data1 + data2, bins=30, color='yellow', alpha=0.7, edgecolor='black')\naxes[1, 1].set_title('Sync committee member')\naxes[1, 1].set_xlabel('Daily reward (Ether)')\naxes[1, 1].set_ylabel('Probability')\n\n# Adjust layout and show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_23.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ntrainable_sizes = np.array([10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150])\nrmse_values = np.array([\n    1.30, 1.21, 1.27, 1.28, 1.29, 1.30, 1.31, 1.32, 1.33, 1.34, 1.35, 1.36, 1.37, 1.38, 1.39\n])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(6.0, 8.0))\n\n# Plot the data with enhanced aesthetics\nax.plot(trainable_sizes, rmse_values, marker='o', linestyle='-', color='red', linewidth=2, markersize=8, label='LlaSMol')\n\n# Add grid for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Set labels with improved font size and style\nax.set_xlabel('Trainable Parameter Size (M)', fontsize=12, fontweight='bold')\nax.set_ylabel('RMSE', fontsize=12, fontweight='bold')\n\n# Set title with enhanced font size and style\nax.set_title('RMSE vs Trainable Parameter Size', fontsize=14, fontweight='bold')\n\n# Customize ticks\nax.set_xticks(np.arange(0, 160, 10))\nax.set_yticks(np.arange(1.1, 1.4, 0.05))\n\n# Add legend with improved location and font size\nax.legend(loc='upper right', fontsize=10)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_24.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data for demonstration\nx = np.array([40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160])\ny = np.array([0.01, 0.02, 0.03, 0.04, 0.05, 0.06, 0.07, 0.08, 0.09, 0.1, 0.11, 0.12, 0.13])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data with different styles\nax.plot(x, y, label='D0', color='red', linestyle='-', linewidth=2, marker='o', markersize=5)\nax.fill_between(x, y - 0.01, y + 0.01, color='pink', alpha=0.3)\n\nax.plot(x, y + 0.01, label='D1', color='orange', linestyle='--', linewidth=2, marker='s', markersize=5)\nax.fill_between(x, y - 0.01, y + 0.01, color='yellow', alpha=0.3)\n\nax.plot(x, y + 0.02, label='D2', color='blue', linestyle='-.', linewidth=2, marker='^', markersize=5)\nax.fill_between(x, y - 0.01, y + 0.01, color='lightblue', alpha=0.3)\n\n# Set labels and title\nax.set_xlabel('Execution Duration (clock)', fontsize=12)\nax.set_ylabel('Distribution', fontsize=12)\nax.set_title('Performance Metrics Over Time', fontsize=14, fontweight='bold')\n\n# Add grid lines\nax.grid(True, which='both', linestyle='--', linewidth=0.5, alpha=0.7)\n\n# Add legend\nax.legend(loc='upper left', fontsize=10)\n\n# Set x and y limits\nax.set_xlim(40, 160)\nax.set_ylim(0, 0.15)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_25.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.array([15, 20, 30, 40, 50, 60])\ny1 = np.array([18, 14, 13, 12, 9, 0])\ny2 = np.array([0, 0, 0, 0, 0, 5])\ny3 = np.array([1000, 2000, 3000, 4000, 5000, 6000])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Plot the data with different styles\nax.plot(x, y1, label='PetriRL', color='green', linestyle='-', marker='o')\nax.plot(x, y2, label='GAM', color='orange', linestyle='--', marker='s')\nax.plot(x, y3, label='GIN', color='blue', linestyle='-.', marker='^')\n\n# Set labels and title\nax.set_xlabel('Instance size (step)', fontsize=12)\nax.set_ylabel('Makespan (step)', fontsize=12)\nax.set_title('Comparison of Different Methods', fontsize=14)\n\n# Add grid for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Add legend with a shadow effect\nax.legend(loc='upper left', shadow=True)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_26.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data for plotting\nx1 = np.array([1, 2, 3, 4, 5])\ny1 = np.array([1, 2, 3, 4, 5])\nx2 = np.array([1, 2, 3, 4, 5])\ny2 = np.array([2, 3, 4, 5, 6])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(7.0, 5.0))\n\n# Plot the first dataset with a green color and a dashed line style\nax.plot(x1, y1, 'g--', label='SEAC')\n\n# Plot the second dataset with a red color and a solid line style\nax.plot(x2, y2, 'r-', label='CTCO')\n\n# Set labels for the axes\nax.set_xlabel('Algorithms')\nax.set_ylabel('Time Cost (Seconds)')\n\n# Add a legend to the plot\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_27.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.array([1, 2, 3, 4])\ny = np.array([50, 70, 90, 110])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot the data with error bars\nax.errorbar(x, y, xerr=0.2, yerr=5, fmt='o', ecolor='black', capsize=5)\n\n# Set labels and title\nax.set_xlabel('Time to Market (Days)')\nax.set_ylabel('Median Time to Market')\nax.set_title('Comparison of Brands')\n\n# Add grid lines for better readability\nax.grid(True, linestyle='--', alpha=0.7)\n\n# Customize the legend\nax.legend(['Adidas', 'Nike', 'New Balance', 'Our Brand'], loc='upper right')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_28.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data for the line chart\nx = np.linspace(0, 1, 100)\ny1 = np.sin(x * 2 * np.pi)\ny2 = np.cos(x * 2 * np.pi)\ny3 = np.tan(x * 2 * np.pi)\n\n# Create a new figure with a larger size for better visibility\nfig, ax1 = plt.subplots(figsize=(10.0, 5.0))\n\n# Plot the first line with a blue color and label\nax1.plot(x, y1, color='blue', linestyle='-', linewidth=2, label='Early 20th Century')\nax1.fill_between(x, y1, color='lightblue', alpha=0.3)\n\n# Plot the second line with an orange color and label\nax1.plot(x, y2, color='orange', linestyle='--', linewidth=2, label='Mid 20th Century')\nax1.fill_between(x, y2, color='lightcoral', alpha=0.3)\n\n# Plot the third line with a green color and label\nax1.plot(x, y3, color='green', linestyle='-.', linewidth=2, label='Turn of the Century')\nax1.fill_between(x, y3, color='lightgreen', alpha=0.3)\n\n# Set labels and title\nax1.set_xlabel('Density', fontsize=12)\nax1.set_ylabel('Year', fontsize=12)\nax1.set_title('Era', fontsize=14, fontweight='bold')\n\n# Add a legend with a shadow effect\nax1.legend(loc='upper right', fontsize=10, shadow=True)\n\n# Adjust layout for better spacing\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_29.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the bar chart\ntechnologies = ['Nano', 'Quantum Computing', 'Cybersecurity', 'VR', 'Biotech', 'Robotics', 'IoT', 'Cloud Computing', 'Blockchain', 'AI']\npatents_2013 = [20, 10, 40, 30, 60, 70, 90, 50, 80, 120]\npatents_2022 = [90, 50, 150, 100, 180, 250, 300, 200, 400, 500]\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Plot the data\nbars = ax.bar(technologies, patents_2013, color='skyblue', label='2013')\nax.bar(technologies, patents_2022, bottom=patents_2013, color='salmon', label='2022')\n\n# Add annotations\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 5, f'{yval}', ha='center', va='bottom')\n\n# Set labels and title\nax.set_xlabel('Technology Field')\nax.set_ylabel('Number of Patents')\nax.set_title('Patent Filings in 2013 and 2022')\n\n# Add a legend\nax.legend()\n\n# Rotate x-axis labels for better readability\nplt.xticks(rotation=45)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create sample data\nx = np.linspace(0, 1, 100)\ny = np.sin(x) + np.random.normal(0, 0.1, 100)\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Plot the data points\nax.scatter(x, y, color='darkred', label='Data points')\n\n# Plot the calibration curve\ncalibration_curve = np.linspace(0, 1, 100)\nax.plot(calibration_curve, calibration_curve, color='black', linestyle='-', linewidth=2, label='Calibration curve')\n\n# Plot the bin edges\nbin_edges = np.linspace(0, 1, 5)\nfor i in range(len(bin_edges) - 1):\n    ax.axvline(x=bin_edges[i], color='grey', linestyle='--', linewidth=1)\n\n# Set labels and title\nax.set_xlabel('Predicted probability')\nax.set_ylabel('Fraction of positives')\nax.set_title('Calibration plot')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_30.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nquarters = ['Q1', 'Q2', 'Q3', 'Q4']\ncompanies = ['Tesla', 'BMW', 'Porsche', 'BYD']\nearnings = np.array([\n    [250, 300, 350, 400],\n    [200, 250, 300, 350],\n    [150, 200, 250, 300],\n    [100, 150, 200, 250]\n])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data with different styles for each company\nfor i, company in enumerate(companies):\n    ax.bar(quarters, earnings[i], label=company, alpha=0.7, edgecolor='black')\n\n# Add a line plot to show a trend\ntrend_line = np.polyfit(range(len(quarters)), earnings.mean(axis=0), 1)\nax.plot(quarters, np.polyval(trend_line, range(len(quarters))), color='red', linestyle='--', linewidth=2, marker='o', markersize=5)\n\n# Set labels and title\nax.set_xlabel('Quarter')\nax.set_ylabel('Earnings ($1000s)')\nax.set_title('Quarterly Earnings by Company')\nax.legend(title='Companies')\n\n# Add grid lines for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Annotate the trend line\nax.annotate(f'Trend: {trend_line[0]:.2f}x + {trend_line[1]:.2f}', xy=('Q1', 400), xytext=('Q3', 450),\n            arrowprops=dict(facecolor='black', shrink=0.05), fontsize=10)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nmethods = ['Linear probing', 'BitFit', 'Prompt tuning', 'Full finetuning', 'LoRA', 'Ours (LoSA)']\ntrain_sec_img = [0.25, 0.3, 0.4, 0.5, 0.6, 0.7]\ninference_gflops = [0.5, 0.6, 0.7, 0.8, 0.9, 1.0]\nparam_log10 = [0.75, 0.85, 0.95, 1.05, 1.15, 1.25]\ntrain_memory = [0.8, 0.9, 1.0, 1.1, 1.2, 1.3]\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Plot the data with different colors and styles\nax.plot(train_sec_img, label='Train sec / img', color='b', linestyle='-', marker='o')\nax.plot(inference_gflops, label='Inference GFLOPs', color='orange', linestyle='--', marker='s')\nax.plot(param_log10, label='Param, log10', color='g', linestyle='-.', marker='^')\nax.plot(train_memory, label='Train Memory', color='r', linestyle=':', marker='x')\n\n# Set labels and title\nax.set_xlabel('Methods')\nax.set_ylabel('Normalized Requirements (lower is better)')\nax.set_title('Accuracy, iNaturalist 2021')\n\n# Set x-ticks to be the method names\nax.set_xticks(np.arange(len(methods)))\nax.set_xticklabels(methods)\n\n# Add grid for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Add a legend\nax.legend(loc='upper left')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create data for plotting\nx = np.linspace(0, 1, 100)\ny = np.sin(x) + np.random.normal(0, 0.1, 100)\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Plot the data with enhanced aesthetics\nax.scatter(x, y, color='blue', s=20, alpha=0.7, edgecolor='w', label='Data Points')\n\n# Set labels and title with improved font sizes\nax.set_xlabel('TM-score', fontsize=12)\nax.set_ylabel('Seq-ident', fontsize=12)\nax.set_title('Scatter Plot of TM-score vs Seq-ident', fontsize=14)\n\n# Add grid lines for better readability\nax.grid(True, linestyle='--', alpha=0.5)\n\n# Add a legend\nax.legend(loc='upper right', fontsize=10)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.linspace(0, 50, 100)\ny = np.sin(x) * np.cos(x) * np.exp(-x / 10)\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Plot the data with different styles for each species\nax.scatter(x, y, c=y, cmap='viridis', s=50, alpha=0.7, edgecolor='k', label='Data Points')\n\n# Add a color bar to indicate the scale of the data\ncbar = plt.colorbar(ax.collections[0])\ncbar.set_label('Average Norm of Difference Vectors')\n\n# Set labels and title\nax.set_xlabel('Relative Cluster Size')\nax.set_ylabel('Average Norm of Difference Vectors')\nax.set_title('Species: teenagers, children, adults')\n\n# Add a legend\nax.legend()\n\n# Add grid lines for better readability\nax.grid(True, linestyle='--', alpha=0.6)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create sample data\nx = np.array([0, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 104, 112, 120, 128])\ny = np.array([99.6, 99.9, 96.0, 92.3, 90.9, 90.9, 92.5, 91.3, 92.5, 93.3, 94.8, 95.5, 96.0, 96.5, 97.0, 97.5, 98.7])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data with enhanced aesthetics\nax.plot(x, y, color='black', linewidth=2, linestyle='-', marker='o', markersize=5, label='Data Line')\n\n# Set labels with improved font size and style\nax.set_xlabel('HC_first (before aging)', fontsize=12, fontweight='bold')\nax.set_ylabel('HC_first (after aging)', fontsize=12, fontweight='bold')\n\n# Add grid for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Add a legend\nax.legend(loc='upper left', fontsize=10)\n\n# Set limits for x and y axes\nax.set_xlim(0, 128)\nax.set_ylim(0, 128)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(8.0, 8.0))\n\n# Define data for the heatmap\ndata = np.array([\n    [0.1, 0.2, 0.3, 0.4, 0.5],\n    [0.6, 0.7, 0.8, 0.9, 1.0],\n    [1.1, 1.2, 1.3, 1.4, 1.5],\n    [1.6, 1.7, 1.8, 1.9, 2.0],\n    [2.1, 2.2, 2.3, 2.4, 2.5]\n])\n\n# Plot the heatmap\nplt.imshow(data, cmap='viridis', aspect='auto')\n\n# Add color bar\ncbar = plt.colorbar()\ncbar.set_label('Intensity')\n\n# Set labels and title\nplt.xlabel('TMScore')\nplt.ylabel('Sequence ID')\nplt.title('Heatmap of TMScore vs Sequence ID')\n\n# Add grid lines for better readability\nplt.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.array([4211, 2411, 2141, 1124])\ny1 = np.array([0.9628, 0.9604, 0.9624, 0.9592])\ny2 = np.array([0.9641, 0.9624, 0.962, 0.9561])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot the data with different colors and styles\nax.bar(x, y1, color='blue', label='SRCC', edgecolor='black')\nax.bar(x, y2, bottom=y1, color='green', label='PLCC', edgecolor='black')\n\n# Add a line plot for comparison\nax.plot(x, y1 + y2, color='red', marker='o', linestyle='--', linewidth=2, markersize=8, label='Sum (SRCC + PLCC)')\n\n# Set labels and title\nax.set_xlabel('Modes')\nax.set_ylabel('Values')\nax.set_title('SRCC and PLCC values with their sum for different modes')\n\n# Add grid lines for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Add a legend\nax.legend()\n\n# Set x-ticks to be more readable\nax.set_xticks(x)\nax.set_xticklabels(['4211', '2411', '2141', '1124'])\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ndata = [\n    [176, 176, 176, 176, 176, 176, 176, 176, 176],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0,"}
{"file": "dataset/ori_500/HR_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create data for a spiral pattern\ntheta = np.linspace(0, 10 * np.pi, 1000)\nr = np.linspace(0, 5, 1000)\n\n# Calculate x and y coordinates\nx = r * np.cos(theta)\ny = r * np.sin(theta)\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Plot the spiral with enhanced styling\nax.plot(x, y, color='royalblue', linestyle='-', linewidth=2, marker='o', markersize=4, label='SINDy')\n\n# Set labels and title with improved font sizes\nax.set_xlabel('X-axis', fontsize=12)\nax.set_ylabel('Y-axis', fontsize=12)\nax.set_title('Compact Spiral with Elliptical Hollow Center', fontsize=14, fontweight='bold')\n\n# Add grid for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5, alpha=0.7)\n\n# Add a legend with a shadow effect\nax.legend(loc='upper right', fontsize=10, shadow=True)\n\n# Set axis limits for better focus\nax.set_xlim(-10, 10)\nax.set_ylim(-10, 10)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.array([1e-1, 1e0, 1e1])\ny = np.array([1e-1, 1e1, 1e2])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(8.0, 7.0))\n\n# Plot the data with different styles and markers\nax.plot(x, y, 'o-', label='w/o FMA', color='black', linewidth=2, markersize=8)\nax.plot(x, y, 's--', label='w/o vectorization', color='blue', linewidth=2, markersize=8)\n\n# Set labels with improved formatting\nax.set_xlabel('Flops/byte', fontsize=12)\nax.set_ylabel('Flips/s', fontsize=12)\n\n# Add a legend with a title\nax.legend(title='Legend', title_fontsize='14', fontsize='10')\n\n# Set a grid for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Set logarithmic scale for both axes\nax.set_xscale('log')\nax.set_yscale('log')\n\n# Add annotations to highlight specific points\nfor i, txt in enumerate(['explicit, random', 'explicit, block size 10', 'explicit, block size 100']):\n    ax.annotate(txt, (x[i], y[i]), textcoords=\"offset points\", xytext=(0,10), ha='center', fontsize=10)\n\n# Add a title\nax.set_title('DAXPY memory bandwidth', fontsize=14, fontweight='bold')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ncategories = [\n    'Satisfy constraints', 'No severe errors', 'Lengthy', 'Contain rich info',\n    'No moderate errors', 'Grammatically correct', 'No minor errors', 'Clear',\n    'Non-repetitive', 'Support stances', '19 other features'\n]\nf_values = [0.52, 0.76, 0.50, 0.55, 0.50, 0.52, 0.50, 0.52, 0.50, 0.50, 0.50]\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Define colors for the bars\ncolors = ['#FF9999', '#FFCC99', '#FFFF99', '#B3FF99', '#99E6FF', '#FF99E6', \n          '#FFC2C2', '#A0CBE2', '#FFD966', '#F4A582', '#99FF99']\n\n# Plot the bar chart\nbars = ax.bar(categories, f_values, color=colors)\n\n# Add value labels on top of each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.01, f'{yval:.2f}', ha='center', va='bottom')\n\n# Set title and labels\nax.set_title('Feature Importance', fontsize=14, fontweight='bold')\nax.set_xlabel('Features', fontsize=12)\nax.set_ylabel('f(x)', fontsize=12)\n\n# Customize the x-axis\nplt.xticks(rotation=45, ha='right')\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.7)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data for the plot\ndata = np.array([[24, 8], [8, 45]])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the heatmap with a color map and add a color bar\ncax = ax.imshow(data, cmap='YlGnBu', interpolation='nearest')\nfig.colorbar(cax)\n\n# Set labels for the axes\nax.set_xlabel('CigaR')\nax.set_ylabel('ChatRepair')\n\n# Add a title to the plot\nplt.title('Heatmap of CigaR vs ChatRepair')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_14.pdf", "response": "```python\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Define data for the radar chart\ncategories = ['Level 1', 'Level 2', 'Level 3', 'Level 4', 'Level 5']\nvalues = [10, 15, 20, 25, 30]\n\n# Number of variables and categories\nN = len(categories)\n\n# Convert the categories into radians\nangles = np.linspace(0, 2 * np.pi, N, endpoint=False).tolist()\nangles += angles[:1]  # Repeat the first value to close the loop\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(6.0, 6.0), subplot_kw=dict(polar=True))\n\n# Plot the data\nax.plot(angles, values + values[:1], linewidth=1, linestyle='solid', label='Gemini Pro')\nax.fill(angles, values + values[:1], alpha=0.25)\n\n# Set the category labels\nax.set_xticks(angles[:-1])\nax.set_xticklabels(categories)\n\n# Add a title\nax.set_title('Qwen-VL-Max', size=14, color='gray', y=1.1)\n\n# Customize the grid lines\nax.grid(True)\n\n# Add a legend\nax.legend(loc='upper right', bbox_to_anchor=(1.1, 1.1))\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\ny1 = np.array([10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000, 10000000000])\ny2 = np.array([10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000, 10000000000])\n\n# Create a new figure with specified size\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10.0, 4.0))\n\n# Plot the first subplot\nax1.plot(x, y1, label='s = 19', color='purple', linestyle='--', marker='o')\nax1.plot(x, y1**2, label='s = 50', color='pink', linestyle='--', marker='o')\nax1.plot(x, y1**3, label='s = 76', color='orange', linestyle='--', marker='o')\nax1.set_xscale('log')\nax1.set_yscale('log')\nax1.set_xlabel('Number of matvecs m')\nax1.set_ylabel('Approximation error ||A - \\u03B1\\u03BB\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u208A\\u22C5\\u208F\\u2"}
{"file": "dataset/ori_500/HR_16.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define data for the pie chart\nlabels = ['Retrive.KV', 'En.Sum', 'Retrive.Number', 'En.QA', 'Retrive.PassKey']\nsizes = [15, 30, 45, 10, 10]\ncolors = ['#66b3ff', '#99ff99', '#ffcc99', '#ff9999', '#c2c2f0']\nexplode = (0.1, 0, 0, 0, 0)  # explode 1st slice\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Plot the pie chart\nwedges, texts, autotexts = ax.pie(sizes, explode=explode, labels=labels, colors=colors,\n                                  autopct='%1.1f%%', shadow=True, startangle=140)\n\n# Customize the text properties\nfor text in texts:\n    text.set_color('black')\nfor autotext in autotexts:\n    autotext.set_color('white')\n\n# Add a title\nax.set_title(\"Pie Chart of Various Operations\", fontsize=14, fontweight='bold')\n\n# Equal aspect ratio ensures that pie is drawn as a circle.\nax.axis('equal')  \n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_17.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create data\nx = np.linspace(0, 140, 100)\ny1 = np.sin(x / 20)\ny2 = np.cos(x / 30)\ny3 = np.tan(x / 40)\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(6.0, 5.0))\n\n# Plot the data with different styles and colors\nax.plot(x, y1, color='green', linestyle='-', linewidth=2, label='Sine Wave')\nax.plot(x, y2, color='orange', linestyle='--', linewidth=2, label='Cosine Wave')\nax.plot(x, y3, color='blue', linestyle='-.', linewidth=2, label='Tangent Wave')\n\n# Set labels and title\nax.set_xlabel('X-axis')\nax.set_ylabel('Y-axis')\nax.set_title('Multiple Trigonometric Functions')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_18.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.array([0, 1, 2, 3, 4, 5, 6])\ny = np.array([1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 7.5])\nerror = np.array([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(7.0, 5.0))\n\n# Plot the data with error bars\nax.errorbar(x, y, yerr=error, fmt='o', color='blue', ecolor='black', elinewidth=1, capsize=5)\n\n# Set labels and title\nax.set_xlabel('Sample Number')\nax.set_ylabel('Thermal Conductivity (W/m.K)')\nax.set_title('Uncertainty in Thermal Conductivity Measurements')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_19.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\nx = np.array([1, 2, 3, 4, 5])\ny1 = np.array([28, 20, 26, 20, 10])\ny2 = np.array([35, 30, 22, 25, 30])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(7.0, 5.0))\n\n# Plot the data with different styles\nax.bar(x - 0.2, y1, width=0.4, label='Player A', color='darkorange')\nax.bar(x + 0.2, y2, width=0.4, label='Player B', color='seagreen')\n\n# Set labels and title\nax.set_xlabel('Games', fontsize=12)\nax.set_ylabel('Scores by number of game and players', fontsize=12)\nax.set_title('Scores by number of game and players', fontsize=14)\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.5)\n\n# Add legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create data for the plot\nx = np.linspace(-6, 6, 100)\ny = np.linspace(-6, 6, 100)\nX, Y = np.meshgrid(x, y)\nZ = np.sin(np.sqrt(X**2 + Y**2))\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Plot the contourf with a colormap\ncontourf = ax.contourf(X, Y, Z, cmap='viridis')\n\n# Add a colorbar to the plot\ncbar = fig.colorbar(contourf)\n\n# Set labels and title\nax.set_xlabel('Variable 1')\nax.set_ylabel('Variable 2')\nax.set_title('Contour Plot of a Function')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_20.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the bar chart\ncategories = ['Female Player', 'Male Player', 'LLM Player', 'Person Player']\nvalues = [5.7, 6.2, 7.0, 3.4]\nerrors = [0.5, 0.3, 0.2, 0.1]\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Define colors and patterns for the bars\ncolors = ['#FF9999', '#66B3FF', '#99FF99', '#FFCC99']\npatterns = ['/', '\\\\', '|', '-']\n\n# Plot the bar chart\nbars = ax.bar(categories, values, yerr=errors, color=colors, edgecolor='black', hatch=patterns)\n\n# Add labels and title\nax.set_xlabel('Trustee Scenario', fontsize=12)\nax.set_ylabel('Average Amount Sent ($)', fontsize=12)\nax.set_title('Trustee Scenario', fontsize=14, fontweight='bold')\n\n# Add grid lines\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.7)\n\n# Annotate each bar with its value\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.1, f'{yval:.1f}', ha='center', va='bottom', fontsize=10)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_21.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nteams = ['Athlete Jim', 'Athlete Bill']\nrunning_times = [120, 130]\ninterrupted_times = [140, 160]\nrest_times = [100, 110]\nrunning2_times = [150, 170]\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(7.0, 5.0))\n\n# Define bar width and positions\nbar_width = 0.2\nindex = np.arange(len(teams))\n\n# Plot bars for each category\nbars1 = ax.bar(index, running_times, bar_width, label='Running', color='green')\nbars2 = ax.bar(index + bar_width, interrupted_times, bar_width, label='Interrupted', color='red')\nbars3 = ax.bar(index + 2 * bar_width, rest_times, bar_width, label='Rest', color='orange')\nbars4 = ax.bar(index + 3 * bar_width, running2_times, bar_width, label='Running2', color='darkgreen')\n\n# Add labels and title\nax.set_xlabel('Teams', fontsize=12)\nax.set_ylabel('Seconds Since Start', fontsize=12)\nax.set_title('Endurance Race Performance Analysis', fontsize=14, fontweight='bold')\nax.set_xticks(index + bar_width)\nax.set_xticklabels(teams)\nax.legend()\n\n# Annotate the bars with values\ndef annotate_bars(bars):\n    for bar in bars:\n        yval = bar.get_height()\n        ax.text(bar.get_x() + bar.get_width()/2, yval + 5, f'{yval}', ha='center', va='bottom', fontsize=10)\n\nannotate_bars(bars1)\nannotate_bars(bars2)\nannotate_bars(bars3)\nannotate_bars(bars4)\n\n# Add a vertical line to indicate a specific event\nax.axvline(x=1.5, color='black', linestyle='--', linewidth=1.5)\nax.text(1.55, 180, 'Race interrupted due to weather', rotation=90, fontsize=10, color='black')\n\n# Set y-axis limits\nax.set_ylim(0, 200)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_22.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create sample data\ndata1 = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\ndata2 = np.array([2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\ndata3 = np.array([3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n\n# Create a new figure with specified size\nfig, axes = plt.subplots(1, 3, figsize=(7.0, 5.0), sharey=True)\n\n# Plot the first subplot\naxes[0].scatter(data1, data1)\naxes[0].set_title('Control Group')\naxes[0].set_xlabel('Number of Observations')\n\n# Plot the second subplot\naxes[1].scatter(data2, data2)\naxes[1].set_title('Treatment Group 1')\naxes[1].set_xlabel('Number of Observations')\n\n# Plot the third subplot\naxes[2].scatter(data3, data3)\naxes[2].set_title('Treatment Group 2')\naxes[2].set_xlabel('Number of Observations')\n\n# Set the title for the entire figure\nplt.suptitle('Comparative Distribution of Three Different Groups')\n\n# Adjust layout to prevent overlap\nplt.tight_layout(rect=[0, 0.03, 1, 0.95])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_23.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.array([-300, -120, -100, -75, -50, -30, -135, -100, -50, 0, 50, 75, 100, 120, 150, 350])\ny = np.array([700, 900, 1000, 1100, 1200, 1300, 1400, 1500, 1600, 1700, 1800, 1900, 2000, 2100, 2200, 2300])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Plot the data with enhanced aesthetics\nax.plot(x, y, color='black', linewidth=2, linestyle='-', marker='o', markersize=5, markerfacecolor='red')\n\n# Set labels and title with improved font sizes\nax.set_xlabel('X Axis Label', fontsize=12)\nax.set_ylabel('Y Axis Label', fontsize=12)\nax.set_title('Waterfall Chart', fontsize=14, fontweight='bold')\n\n# Add grid for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Set limits for axes\nax.set_xlim(-350, 350)\nax.set_ylim(600, 2400)\n\n# Customize ticks\nax.set_xticks(np.arange(-350, 351, 50))\nax.set_yticks(np.arange(600, 2501, 200))\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_24.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(8.0, 6.0))\n\n# Define the grid of points\nx = np.linspace(-1, 1, 200)\ny = np.linspace(-1, 1, 200)\nX, Y = np.meshgrid(x, y)\n\n# Calculate the Z values using a complex function\nZ = np.sin(np.sqrt(X**2 + Y**2)) * np.exp(-0.5 * (X**2 + Y**2))\n\n# Plot the contourf with a color map\nplt.contourf(X, Y, Z, levels=20, cmap='coolwarm')\n\n# Add a color bar to the plot\ncbar = plt.colorbar()\ncbar.set_label('Intensity', rotation=270, labelpad=15)\n\n# Set labels for the axes\nplt.xlabel('X-axis')\nplt.ylabel('Y-axis')\n\n# Set a title for the plot\nplt.title('Triplot of Delaunay triangulation, flat shading')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_25.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(8.0, 6.0))\n\n# Define data for plotting\nx = np.linspace(-4, 4, 100)\ny = np.linspace(-4, 4, 100)\nX, Y = np.meshgrid(x, y)\nZ = np.sin(np.sqrt(X**2 + Y**2))\n\n# Plot the first subplot\nplt.subplot(2, 2, 1)\nplt.imshow(Z, extent=[-4, 4, -4, 4], origin='lower', cmap='viridis')\nplt.title('nearest')\nplt.colorbar()\n\n# Plot the second subplot\nplt.subplot(2, 2, 2)\nplt.imshow(Z, extent=[-4, 4, -4, 4], origin='lower', cmap='plasma')\nplt.title('nearest')\nplt.colorbar()\n\n# Plot the third subplot\nplt.subplot(2, 2, 3)\nplt.imshow(Z, extent=[-4, 4, -4, 4], origin='lower', cmap='coolwarm')\nplt.title('bilinear')\nplt.colorbar()\n\n# Plot the fourth subplot\nplt.subplot(2, 2, 4)\nplt.imshow(Z, extent=[-4, 4, -4, 4], origin='lower', cmap='hot')\nplt.title('bilinear')\nplt.colorbar()\n\n# Set the title of the entire figure\nplt.suptitle('NonUniformImage class')\n\n# Adjust layout to prevent overlap\nplt.tight_layout(rect=[0, 0.03, 1, 0.95])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data for two different datasets\ndata1 = np.array([200, 300, 400, 500, 600, 700, 800, 900, 1000])\ndata2 = np.array([100, 200, 300, 400, 500, 600, 700, 800, 900])\n\n# Create a new figure with specified size\nfig, axes = plt.subplots(1, 2, figsize=(10.0, 4.0))\n\n# Plot the first dataset\naxes[0].bar(range(len(data1)), data1, color='lightblue', edgecolor='black')\naxes[0].set_title('Flickr30k')\naxes[0].set_xlabel('Number of bits')\naxes[0].set_ylabel('Recall sum')\n\n# Plot the second dataset\naxes[1].bar(range(len(data2)), data2, color='lightgreen', edgecolor='black')\naxes[1].set_title('MS-COCO')\naxes[1].set_xlabel('Number of bits')\naxes[1].set_ylabel('Recall sum')\n\n# Add a horizontal line for reference\nfor ax in axes:\n    ax.axhline(y=500, color='gray', linestyle='--')\n\n# Adjust layout for better spacing\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create data for plotting\nx = np.linspace(0, 25, 100)\ny = np.sin(x) + np.cos(x)\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data with enhanced styling\nax.plot(x, y, label='Monte Carlo', color='red', linestyle='-', linewidth=2, marker='o', markersize=4, markerfacecolor='blue', markeredgewidth=1, markeredgecolor='black')\n\n# Add grid lines for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5, alpha=0.7)\n\n# Set labels with improved font size and style\nax.set_xlabel('x (m)', fontsize=12, fontweight='bold')\nax.set_ylabel('y (m)', fontsize=12, fontweight='bold')\n\n# Set title with enhanced font size and style\nax.set_title('Denser Points with Perfectly Circular Error Ellipses', fontsize=14, fontweight='bold', pad=20)\n\n# Add a legend with improved location and font size\nax.legend(loc='upper right', fontsize=10)\n\n# Customize ticks for better readability\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.linspace(0, 2 * np.pi, 100)\ny = np.sin(x)\n\n# Create a new figure\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Plot the data with enhancements\nax.plot(x, y, color='blue', linestyle='-', linewidth=2, marker='o', markersize=4, markerfacecolor='orange')\n\n# Set labels and title\nax.set_xlabel('X-axis')\nax.set_ylabel('Y-axis')\nax.set_title('Sine Wave')\n\n# Add grid for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create data for a heatmap\ndata = np.array([\n    [0.1, 0.2, 0.3],\n    [0.4, 0.5, 0.6],\n    [0.7, 0.8, 0.9]\n])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(8.0, 7.0))\n\n# Plot the heatmap\ncax = ax.imshow(data, cmap='viridis', interpolation='nearest')\n\n# Add color bar\ncbar = fig.colorbar(cax)\ncbar.set_label('\u0394t')\n\n# Set labels and title\nax.set_xlabel('\u03b1')\nax.set_ylabel('\u03b2')\nax.set_title('Heatmap of \u0394t')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data for the first plot\nx = np.linspace(0, 100, 100)\ny1 = np.sin(x / 10)\ny2 = np.cos(x / 10)\ny3 = np.tan(x / 10)\n\n# Create a new figure with specified size\nfig, ax1 = plt.subplots(figsize=(8.0, 4.0))\n\n# Plot the first line with a specific color and style\nax1.plot(x, y1, color='blue', linestyle='-', linewidth=2, label='Left')\nax1.plot(x, y2, color='green', linestyle='--', linewidth=2, label='Center Left')\nax1.plot(x, y3, color='red', linestyle='-.', linewidth=2, label='Center Right')\n\n# Set labels for the axes\nax1.set_xlabel('Users (U)', fontsize=10)\nax1.set_ylabel('Utility (f)', fontsize=10)\n\n# Add a legend to the plot\nax1.legend(loc='upper right', fontsize=8)\n\n# Set the title of the plot\nax1.set_title('Utility distribution per topic', fontsize=12, fontweight='bold')\n\n# Create a second subplot for the scatter plot\nax2 = fig.add_subplot(122)\n\n# Sample data for the second plot\nx_scatter = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\ny_scatter = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n\n# Plot the scatter points with different colors\ncolors = ['blue', 'green', 'red', 'cyan', 'magenta', 'yellow', 'black', 'orange', 'purple', 'brown']\nfor i in range(len(x_scatter)):\n    ax2.scatter(x_scatter[i], y_scatter[i], color=colors[i % len(colors)], s=50, alpha=0.7)\n\n# Set labels for the axes\nax2.set_xlabel('Items(C)', fontsize=10)\nax2.set_ylabel('Users(U)', fontsize=10)\n\n# Set the title of the second subplot\nax2.set_title('User preference matrix (M)', fontsize=12, fontweight='bold')\n\n# Adjust layout to prevent overlap\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create sample data for three different scatter plots\nx1 = np.array([1, 2, 3, 4, 5])\ny1 = np.array([1, 2, 3, 4, 5])\n\nx2 = np.array([1, 2, 3])\ny2 = np.array([1, 2, 3])\n\nx3 = np.array([1, 2])\ny3 = np.array([1, 2])\n\n# Create a new figure with a larger size for better visibility\nfig, axes = plt.subplots(1, 3, figsize=(10.0, 4.0))\n\n# Plot the first scatter plot\naxes[0].scatter(x1, y1, color='blue', label='num. of points = 5')\naxes[0].set_title('Reactive-2 payoff')\naxes[0].set_xlabel('Reactive-2 payoff')\naxes[0].set_ylabel('Memory-2 payoff')\naxes[0].legend()\n\n# Plot the second scatter plot\naxes[1].scatter(x2, y2, color='green', label='num. of points = 3')\naxes[1].set_title('Reactive-2 payoff')\naxes[1].set_xlabel('Reactive-2 payoff')\naxes[1].set_ylabel('Memory-2 payoff')\naxes[1].legend()\n\n# Plot the third scatter plot\naxes[2].scatter(x3, y3, color='red', label='num. of points = 3')\naxes[2].set_title('Self-reactive-2 payoff')\naxes[2].set_xlabel('Reactive-2 payoff')\naxes[2].set_ylabel('Memory-2 payoff')\naxes[2].legend()\n\n# Adjust layout for better spacing between subplots\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data for two different models\nmodel1 = np.array([2, 3, 5, 7, 11, 13, 17, 19, 23, 29])\nmodel2 = np.array([3, 5, 7, 11, 13, 17, 19, 23, 29, 31])\n\n# Create a new figure with specified size\nfig, axes = plt.subplots(1, 2, figsize=(10.0, 4.0))\n\n# Plot the first model\naxes[0].boxplot(model1)\naxes[0].set_title('Model = Vicuna')\naxes[0].set_ylabel('Perplexity Reduction')\n\n# Plot the second model\naxes[1].boxplot(model2)\naxes[1].set_title('Model = Alpaca')\naxes[1].set_ylabel('Perplexity Reduction')\n\n# Adjust layout for better spacing\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/PIP_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create sample data\nx = np.array([-40, -30, -20, -10, 0, 10, 20, 30, 40])\ny = np.array([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Plot the main scatter plot\nscatter = ax.scatter(x, y, c=y, cmap='viridis', s=100, alpha=0.7, edgecolor='k')\n\n# Add a color bar\ncbar = plt.colorbar(scatter)\ncbar.set_label('Color Bar Label')\n\n# Set labels and title\nax.set_xlabel('X Axis Label')\nax.set_ylabel('Y Axis Label')\nax.set_title('Sample Scatter Plot')\n\n# Add grid lines\nax.grid(True, linestyle='--', alpha=0.5)\n\n# Add annotations\nfor i, txt in enumerate(y):\n    ax.annotate(f'Point {i}', (x[i], y[i]), textcoords=\"offset points\", xytext=(0,10), ha='center')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/PIP_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create data\nx = np.linspace(0, 100, 200)\ny1 = np.exp(x / 50)\ny2 = np.sin(x / 10) * np.exp(x / 50)\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Plot the data with enhanced styles\nax.plot(x, y1, label='Line 3 (Random Noise)', color='green', linestyle='-', linewidth=2, marker='o', markersize=4, markevery=10)\nax.plot(x, y2, label='Line 4 (Exponential Focus)', color='red', linestyle='--', linewidth=2, marker='x', markersize=4, markevery=10)\n\n# Add a legend with a shadow effect\nax.legend(loc='upper left', shadow=True)\n\n# Set labels with improved font size and style\nax.set_xlabel('Gradient Steps (x 62.5K)', fontsize=10, fontweight='bold')\nax.set_ylabel('Exponential Scale', fontsize=10, fontweight='bold')\n\n# Add grid lines for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5, alpha=0.7)\n\n# Add a title with a larger font size\nax.set_title('Exponential Growth Comparison', fontsize=12, fontweight='bold')\n\n# Add annotations to highlight specific points\nax.annotate('Peak', xy=(100, y1[-1]), xytext=(80, y1[-1] + 0.5),\n            arrowprops=dict(facecolor='black', shrink=0.05),\n            fontsize=9, fontweight='bold')\n\n# Add a shaded region to indicate a significant area\nax.axhspan(1.5, 2.5, color='gray', alpha=0.3, label='Significant Region')\n\n# Add a zoomed-in inset plot\naxins = ax.inset_axes([0.5, 0.5, 0.4, 0.4])\naxins.plot(x, y1, color='green', linestyle='-', linewidth=2, marker='o', markersize=4, markevery=10)\naxins.plot(x, y2, color='red', linestyle='--', linewidth=2, marker='x', markersize=4, markevery=10)\naxins.set_xlim(50, 75)\naxins.set_ylim(1.5, 2.5)\naxins.set_xticks([])\naxins.set_yticks([])\nax.indicate_inset_zoom(axins, edgecolor=\"black\")\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/PIP_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Predicted probabilities and true labels\npredicted_probabilities = np.array([\n    [0.3, 0.7], [0.4, 0.6], [0.5, 0.5], [0.6, 0.4], [0.7, 0.3],\n    [0.8, 0.2], [0.9, 0.1], [0.1, 0.9], [0.2, 0.8], [0.3, 0.7]\n])\ntrue_labels = np.array([1, 1, 0, 0, 1, 1, 0, 0, 1, 1])\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot the histogram with a more informative color scheme\nax.hist(predicted_probabilities[:, 1], bins=10, range=(0, 1), color='blue', alpha=0.7, label='Unknown')\nax.hist(predicted_probabilities[:, 0], bins=10, range=(0, 1), color='green', alpha=0.7, label='Known')\n\n# Add a grid for better readability\nax.grid(True, linestyle='--', alpha=0.5)\n\n# Set labels and title with improved font sizes\nax.set_xlabel('Maximum predicted probability', fontsize=12)\nax.set_ylabel('Number of examples', fontsize=12)\nax.set_title('Histogram of Predicted Probabilities', fontsize=14)\n\n# Add a legend with a frame\nax.legend(loc='upper right', fontsize=10, frameon=True)\n\n# Customize ticks\nax.set_xticks(np.arange(0, 1.1, 0.1))\nax.set_yticks(np.arange(0, 1600, 200))\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/PIP_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.array([1, 2, 3, 4, 5])\ny = np.array([2, 3, 5, 7, 11])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot the data with different styles\nax.plot(x, y, label='Line', color='blue', linestyle='-', linewidth=2, marker='o', markersize=8, markerfacecolor='red')\n\n# Add grid for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Set labels and title\nax.set_xlabel('Data Type', fontsize=12)\nax.set_ylabel('Bias Score', fontsize=12)\nax.set_title('Bias Score by Data Type and Model', fontsize=14, fontweight='bold')\n\n# Add a legend\nax.legend(loc='upper left', fontsize=10)\n\n# Customize ticks\nax.set_xticks(x)\nax.set_yticks(np.arange(1, 12, 1))\n\n# Add annotations\nfor i, txt in enumerate(y):\n    ax.annotate(txt, (x[i], y[i]), textcoords=\"offset points\", xytext=(0,10), ha='center', fontsize=9)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/PIP_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.array([0.0, 0.2, 0.4, 0.6, 0.8, 1.0])\ny_known = np.array([500, 300, 700, 900, 1100, 1300])\ny_unknown = np.array([200, 400, 600, 800, 1000, 1200])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot the data with different colors and styles\nax.bar(x - 0.2, y_known, width=0.4, color='orange', label='Known')\nax.bar(x + 0.2, y_unknown, width=0.4, color='blue', label='Unknown')\n\n# Set labels and title\nax.set_xlabel('Maximum Predicted Probability', fontsize=12)\nax.set_ylabel('Number of Examples', fontsize=12)\nax.set_title('Comparison of Known vs Unknown Samples', fontsize=14)\n\n# Add grid for better readability\nax.grid(True, linestyle='--', alpha=0.7)\n\n# Add legend\nax.legend(fontsize=10)\n\n# Add annotations for clarity\nfor i, v in enumerate(y_known):\n    ax.text(i - 0.2, v + 50, str(v), ha='center', va='bottom', fontsize=10, color='black')\n\nfor i, v in enumerate(y_unknown):\n    ax.text(i + 0.2, v + 50, str(v), ha='center', va='bottom', fontsize=10, color='black')\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/PIP_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data\nx = np.array([2**i for i in range(1, 11)])\ny1 = np.array([100000 * (1 + 0.05)**i for i in range(1, 11)])\ny2 = np.array([100000 * (1 + 0.1)**i for i in range(1, 11)])\ny3 = np.array([100000 * (1 + 0.15)**i for i in range(1, 11)])\ny4 = np.array([100000 * (1 + 0.2)**i for i in range(1, 11)])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Plot the data with different styles\nax.plot(x, y1, label='Cos | n0 = 200', color='green', linestyle='-', marker='o', markersize=5)\nax.plot(x, y2, label='Cos | n0 = 400', color='green', linestyle='--', marker='s', markersize=5)\nax.plot(x, y3, label='ReLU | n0 = 200', color='blue', linestyle='-', marker='^', markersize=5)\nax.plot(x, y4, label='ReLU | n0 = 400', color='blue', linestyle='--', marker='x', markersize=5)\n\n# Set labels and title\nax.set_xlabel('Width of Layer')\nax.set_ylabel('Empirical Lipschitz Constant')\nax.set_title('Empirical Lipschitz Constant vs Width of Layer')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/PIP_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.linspace(0, 10000, 100)\ny1 = np.exp(x / 1000)\ny2 = np.exp(x / 1500)\ny3 = np.exp(x / 2000)\ny4 = np.exp(x / 2500)\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data with different styles\nax.plot(x, y1, label='WI', color='red', linestyle='-', linewidth=2, marker='o', markersize=4)\nax.plot(x, y2, label='ISQ', color='green', linestyle='--', linewidth=2, marker='s', markersize=4)\nax.plot(x, y3, label='WIQL', color='purple', linestyle='-.', linewidth=2, marker='^', markersize=4)\nax.plot(x, y4, label='Greedy', color='blue', linestyle=':', linewidth=2, marker='D', markersize=4)\n\n# Set labels and title\nax.set_xlabel('Time Steps')\nax.set_ylabel('Discounted Cumulative Reward')\nax.set_title('Discounted Cumulative Reward Over Time')\n\n# Add a legend\nax.legend(loc='upper left')\n\n# Set x and y axis limits\nax.set_xlim(0, 10000)\nax.set_ylim(3000, 7500)\n\n# Add grid for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/PIP_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.linspace(0, 200, 100)\ny1 = np.sin(x / 10) * np.exp(-x / 50)\ny2 = np.cos(x / 10) * np.exp(-x / 50)\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Plot the data with enhanced styles\nax.plot(x, y1, label='WI', color='blue', linestyle='-', linewidth=2, marker='o', markersize=4)\nax.plot(x, y2, label='ISQ', color='orange', linestyle='--', linewidth=2, marker='s', markersize=4)\n\n# Set labels and title with improved font sizes\nax.set_xlabel('Time Steps', fontsize=10)\nax.set_ylabel('Discounted Cumulative Reward', fontsize=10)\nax.set_title('Discounted Cumulative Reward Over Time', fontsize=12)\n\n# Add a legend with a shadow effect\nax.legend(loc='upper right', fontsize=8, shadow=True)\n\n# Add grid for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/PIP_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create sample data\nx = np.array([-3, -2, -1, 0, 1, 2, 3])\ny = np.array([0.5, 1.2, 0.8, 1.5, 2.3, 1.8, 0.9])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Plot the data with different markers and colors\nax.scatter(x, y, c='blue', marker='o', label='Daytime Sunny')\nax.scatter(x, y + 1, c='orange', marker='s', label='Night Rainy')\nax.scatter(x, y + 2, c='green', marker='^', label='PGST')\n\n# Set labels and title\nax.set_xlabel('X-axis Label')\nax.set_ylabel('Y-axis Label')\nax.set_title('Scatter Plot of Sample Data')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/PIP_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create sample data\nx1 = np.array([1, 2, 3, 4, 5])\ny1 = np.array([1, 2, 3, 4, 5])\n\nx2 = np.array([1, 2, 3, 4, 5])\ny2 = np.array([1, 2, 3, 4, 5])\n\nx3 = np.array([1, 2, 3, 4, 5])\ny3 = np.array([1, 2, 3, 4, 5])\n\nx4 = np.array([1, 2, 3, 4, 5])\ny4 = np.array([1, 2, 3, 4, 5])\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(6.0, 6.0))\n\n# Plot the data\nplt.scatter(x1, y1, color='red', label='Group 1')\nplt.scatter(x2, y2, color='green', label='Group 2')\nplt.scatter(x3, y3, color='blue', label='Group 3')\nplt.scatter(x4, y4, color='purple', label='Group 4')\n\n# Add a legend\nplt.legend()\n\n# Set labels and title\nplt.xlabel('X-axis')\nplt.ylabel('Y-axis')\nplt.title('Scatter Plot of Sample Data')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/area_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.array([10, 50, 100, 500, 1000])\ny1 = np.array([10, 20, 30, 40, 50])\ny2 = np.array([15, 25, 35, 45, 55])\ny3 = np.array([20, 30, 40, 50, 60])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(9.0, 8.0))\n\n# Plot the data with different styles and markers\nax.plot(x, y1, label='ActivityNet mIoU', color='darkred', linestyle='-', linewidth=2, marker='o', markersize=5)\nax.plot(x, y2, label='ActivityNet CIDER', color='darkorange', linestyle='--', linewidth=2, marker='s', markersize=5)\nax.plot(x, y3, label='QVHighlights mAP', color='darkblue', linestyle='-.', linewidth=2, marker='^', markersize=5)\n\n# Fill between lines for visual effect\nax.fill_between(x, y1, y2, color='salmon', alpha=0.3)\nax.fill_between(x, y2, y3, color='lightseagreen', alpha=0.3)\n\n# Set labels and title\nax.set_xlabel('Number of Frames', fontsize=12)\nax.set_ylabel('Performance Metrics', fontsize=12)\nax.set_title('Comparison of Different Metrics', fontsize=14, fontweight='bold')\n\n# Add grid for better readability\nax.grid(True, linestyle='--', alpha=0.7)\n\n# Add legend with a shadow effect\nax.legend(loc='upper left', fontsize=10, shadow=True)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/area_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.array([0, 1, 2, 3])\ny1 = np.array([0.96, 1.05, 1.1, 1.15])  # Example data for GT\ny2 = np.array([0.98, 1.02, 1.07, 1.12])  # Example data for DRS\ny3 = np.array([0.99, 1.01, 1.03, 1.05])  # Example data for PR-based\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(10.0, 10.0))\n\n# Plot the data with different styles and markers\nax.plot(x, y1, label='GT', color='green', linestyle='-', marker='o', linewidth=2)\nax.plot(x, y2, label='DRS', color='blue', linestyle='--', marker='s', linewidth=2)\nax.plot(x, y3, label='PR-based', color='red', linestyle='-.', marker='^', linewidth=2)\n\n# Set labels and title\nax.set_xlabel('Time step', fontsize=12)\nax.set_ylabel('RAS', fontsize=12)\nax.set_title('Performance Metrics Over Time', fontsize=14, fontweight='bold')\n\n# Add grid for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Customize the legend\nax.legend(loc='upper left', fontsize=10)\n\n# Add annotations to highlight specific points\nfor i, txt in enumerate(y1):\n    ax.annotate(f'{txt:.2f}', (x[i], y1[i]), textcoords=\"offset points\", xytext=(0,10), ha='center', fontsize=9)\n\n# Enhance the plot's appearance\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\nax.spines['bottom'].set_linewidth(0.5)\nax.spines['left'].set_linewidth(0.5)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/area_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.linspace(0, 80, 100)\ny1 = np.sin(x / 5) * 0.75 + 0.75\ny2 = np.sin(x / 5 + np.pi / 3) * 0.75 + 0.75\ny3 = np.sin(x / 5 + np.pi / 6) * 0.75 + 0.75\ny4 = np.sin(x / 5 + np.pi / 4) * 0.75 + 0.75\ny5 = np.sin(x / 5 + np.pi / 2) * 0.75 + 0.75\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot the data with different styles\nax.plot(x, y1, label='clip', color='black', linewidth=2, linestyle='-')\nax.fill_between(x, y1 - 0.05, y1 + 0.05, color='pink', alpha=0.5)\n\nax.plot(x, y2, label='laion (5k)', color='yellow', linewidth=2, linestyle='--')\nax.fill_between(x, y2 - 0.05, y2 + 0.05, color='orange', alpha=0.5)\n\nax.plot(x, y3, label='coco (5k)', color='blue', linewidth=2, linestyle='-.')\nax.fill_between(x, y3 - 0.05, y3 + 0.05, color='lightblue', alpha=0.5)\n\nax.plot(x, y4, label='laion (10k)', color='green', linewidth=2, linestyle=':')\nax.fill_between(x, y4 - 0.05, y4 + 0.05, color='lime', alpha=0.5)\n\nax.plot(x, y5, label='coco (10k)', color='red', linewidth=2, linestyle='--')\nax.fill_between(x, y5 - 0.05, y5 + 0.05, color='salmon', alpha=0.5)\n\n# Set labels and title\nax.set_xlabel('Decomposition IO Norm', fontsize=12)\nax.set_ylabel('Accuracy', fontsize=12)\nax.set_title('Dynamic Effect of Vocab on Zero Shot Accuracy', fontsize=14, fontweight='bold')\n\n# Add grid lines for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5, alpha=0.7)\n\n# Add legend with a shadow effect\nax.legend(loc='upper left', fontsize=10, shadow=True)\n\n# Set x and y limits\nax.set_xlim(0, 80)\nax.set_ylim(0.5, 0.8)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/area_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nn = np.arange(1, 9)\ncontent = [1, 2, 3, 4, 5, 6, 7, 8]\norganization = [2, 3, 4, 5, 6, 7, 8, 9]\nlanguage = [3, 4, 5, 6, 7, 8, 9, 10]\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(8.0, 4.0))\n\n# Plot the data with different styles\nax.plot(n, content, label='Content', color='b', linestyle='-', linewidth=2, marker='o')\nax.plot(n, organization, label='Organization', color='orange', linestyle='--', linewidth=2, marker='s')\nax.plot(n, language, label='Language', color='g', linestyle='-.', linewidth=2, marker='^')\n\n# Set labels and title\nax.set_xlabel('n')\nax.set_ylabel('Performance Gain (%)')\nax.set_title('Cumulative Performance Gain by Augmentation Level')\n\n# Add grid for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Add legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/area_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: World population growth over time (in millions)\nyears = np.arange(1950, 2021)\nafrica_population = np.array([1.3, 1.7, 2.1, 2.4, 2.8, 3.2, 3.6, 4.0, 4.4, 4.8, 5.2, 5.6, 6.0, 6.4, 6.8, 7.2, 7.6, 8.0, 8.4, 8.8, 9.2])\namericas_population = np.array([1.5, 1.8, 2.1, 2.4, 2.7, 3.0, 3.3, 3.6, 3.9, 4.2, 4.5, 4.8, 5.1, 5.4, 5.7, 6.0, 6.3, 6.6, 6.9, 7.2, 7.5])\nasia_population = np.array([3.5, 4.0, 4.5, 5.0, 5.5, 6.0, 6.5, 7.0, 7.5, 8.0, 8.5, 9.0, 9.5, 10.0, 10.5, 11.0, 11.5, 12.0, 12.5, 13.0, 13.5])\neurope_population = np.array([400, 420, 440, 460, 480, 500, 520, 540, 560, 580, 600, 620, 640, 660, 680, 700, 720, 740, 760, 780, 800])\noceania_population = np.array([0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2.0, 2.1, 2.2, 2.3])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data with different styles and labels\nax.plot(years, africa_population, label='Africa', color='green', linestyle='-', linewidth=2, marker='o')\nax.plot(years, americas_population, label='Americas', color='yellow', linestyle='--', linewidth=2, marker='s')\nax.plot(years, asia_population, label='Asia', color='red', linestyle='-.', linewidth=2, marker='^')\nax.plot(years, europe_population, label='Europe', color='orange', linestyle=':', linewidth=2, marker='D')\nax.plot(years, oceania_population, label='Oceania', color='blue', linestyle='-', linewidth=2, marker='x')\n\n# Set labels and title\nax.set_xlabel('Year')\nax.set_ylabel('Number of people (millions)')\nax.set_title('World Population')\n\n# Add a legend\nax.legend(loc='upper left')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.array([1, 2, 3, 4, 5])\ny = np.array([0.1, 0.2, 0.3, 0.4, 0.5])\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(7.0, 5.0))\n\n# Plot the data with different styles\nplt.plot(x, y, label='Line', color='blue', linestyle='-', linewidth=2, marker='o', markersize=6, markerfacecolor='red')\n\n# Set labels and title\nplt.xlabel('X-axis')\nplt.ylabel('Y-axis')\nplt.title('Sample Line Plot')\n\n# Add a legend\nplt.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Accuracy of different models\nmodels = ['Which', 'What', 'How', 'Will', 'Are', 'Is', 'Choose', 'Select', 'Identify', 'Fill']\naccuracy = [55, 45, 35, 25, 15, 60, 50, 40, 30, 20]\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the bar chart\nbars = ax.bar(models, accuracy, color='skyblue', edgecolor='black')\n\n# Add title and labels\nax.set_title('Model Accuracy Comparison', fontsize=14, fontweight='bold')\nax.set_xlabel('Models', fontsize=12)\nax.set_ylabel('Accuracy (%)', fontsize=12)\n\n# Add grid for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='gray', alpha=0.7)\n\n# Annotate each bar with its value\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 1, f'{yval}%', ha='center', va='bottom', fontsize=10)\n\n# Adjust layout for better spacing\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_100.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nproducts = ['Product A', 'Product B', 'Product C', 'Product D', 'Product E']\nregion1_sales = [40, 60, 80, 90, 70]\nregion2_sales = [30, 50, 70, 80, 60]\nregion3_sales = [20, 40, 60, 70, 50]\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(15.0, 5.0))\n\n# Define colors for each region\ncolors = ['#1f77b4', '#ff7f0e', '#2ca02c']\n\n# Plot the data for each region\nbars1 = ax.bar(products, region1_sales, color=colors[0], label='Region 1 Sales')\nbars2 = ax.bar([p + 0.2 for p in range(len(products))], region2_sales, width=0.4, color=colors[1], label='Region 2 Sales')\nbars3 = ax.bar([p + 0.4 for p in range(len(products))], region3_sales, width=0.4, color=colors[2], label='Region 3 Sales')\n\n# Add title and labels\nax.set_title('Average Monthly Sales by Product Across Regions', fontsize=16, fontweight='bold')\nax.set_xlabel('Products', fontsize=12)\nax.set_ylabel('Sales', fontsize=12)\n\n# Set x-ticks and labels\nax.set_xticks([p + 0.2 for p in range(len(products))])\nax.set_xticklabels(products)\n\n# Add grid lines\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.7)\n\n# Add legend\nax.legend()\n\n# Annotate bars with values\ndef add_value_labels(bars):\n    for bar in bars:\n        yval = bar.get_height()\n        ax.text(bar.get_x() + bar.get_width()/2, yval + 2, int(yval), ha='center', va='bottom', fontsize=10)\n\nadd_value_labels(bars1)\nadd_value_labels(bars2)\nadd_value_labels(bars3)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nlengths = np.array([0.9, 10.19, 20.29, 30.39, 40.49])\nspemann = np.array([-0.5, -0.3, -0.1, 0.1, 0.3])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Plot the bar chart\nax.bar(lengths, spemann, color='blue', edgecolor='black')\n\n# Set labels and title\nax.set_xlabel('length')\nax.set_ylabel('spemann')\nax.set_title('Spemann vs Length')\n\n# Set y-axis limits\nax.set_ylim(-1, 0.75)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the bar chart\ncategories = ['Beauty', 'MovieLens-1M', 'Yelp']\nvalues = [\n    [2.2, 11.2, 19.9],\n    [3.0, 5.1, 4.8],\n    [19.7]\n]\n\n# Create a new figure with specified size\nfig, axes = plt.subplots(1, 3, figsize=(10.0, 4.0))\n\n# Plot each category's data\nfor ax, category, data in zip(axes, categories, values):\n    ax.bar(range(len(data)), data, color='skyblue')\n    ax.set_title(category)\n    ax.set_xlabel('Percentage')\n    ax.set_ylabel('Value')\n\n# Adjust layout for better spacing\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nmodels = ['Bactrian-X', 'Lima-X']\nimprovement = [3.5, 2.8]\nstd_dev = [0.4, 0.9]\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Define colors for the bars\ncolors = ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd']\n\n# Plot the bar chart\nbars = ax.bar(models, improvement, yerr=std_dev, color=colors, capsize=5, edgecolor='black')\n\n# Add labels and title\nax.set_xlabel('Model')\nax.set_ylabel('Improvement [%]')\nax.set_title('ENDEFRRITES sampled')\n\n# Add grid lines\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.5)\n\n# Add annotations for each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.1, f'{yval:.1f}', ha='center', va='bottom', fontsize=10)\n\n# Add a legend\nlegend_labels = ['EN', 'FR', 'ES', 'DE', 'IT']\nax.legend(bars, legend_labels, title=\"Fine-tuning Language\", loc='upper left', bbox_to_anchor=(1, 1))\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\npheme_scores = [0.82, 0.83, 0.81, 0.84, 0.86]\nllm_scores = [0.85, 0.87, 0.80, 0.83, 0.89]\n\n# Define colors for the bars\ncolors = ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd']\n\n# Create a new figure with specified size\nfig, ax1 = plt.subplots(figsize=(7.0, 5.0))\n\n# Plot the first y-axis (Pheme scores)\nbars1 = ax1.bar(range(len(pheme_scores)), pheme_scores, color=colors, alpha=0.7, label='Pheme')\n\n# Set labels and title for the first y-axis\nax1.set_xlabel('Pheme')\nax1.set_ylabel('Macro F1-score', color='tab:blue')\nax1.tick_params(axis='y', labelcolor='tab:blue')\nax1.set_title('Comparison of Macro F1-scores for Different Pheme Scores')\n\n# Create a second y-axis for the second set of data\nax2 = ax1.twinx()\n\n# Plot the second y-axis (LLM-mis scores)\nbars2 = ax2.bar(range(len(llm_scores)), llm_scores, color=[c.replace('#', '#a') for c in colors], alpha=0.7, label='LLM-mis')\n\n# Set labels for the second y-axis\nax2.set_ylabel('LLM-mis', color='tab:orange')\nax2.tick_params(axis='y', labelcolor='tab:orange')\n\n# Add a legend\nfig.legend([bars1[0], bars2[0]], ['Pheme', 'LLM-mis'], loc='upper right')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ncategories = ['1', '2', '3', '4', '5', '6']\nvalues = [\n    [10, 20, 30, 40, 50],\n    [15, 25, 35, 45, 55],\n    [20, 30, 40, 50, 60],\n    [25, 35, 45, 55, 65],\n    [30, 40, 50, 60, 70],\n    [35, 45, 55, 65, 75]\n]\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Define colors for each category\ncolors = ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd', '#8c564b']\n\n# Plot the data\nfor i, value in enumerate(values):\n    ax.bar(categories, value, color=colors[i], label=f'Category {i+1}')\n\n# Set labels and title\nax.set_xlabel('Human Annotator')\nax.set_ylabel('Scores')\nax.set_title('Human Labeling and Agreement Bias Checking')\n\n# Add a legend\nax.legend(title='Scores')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_16.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data for two different scenarios\ndata1 = np.array([500, 700, 800])\ndata2 = np.array([600, 800, 900])\n\n# Create a new figure with specified size\nfig, axes = plt.subplots(1, 2, figsize=(8.0, 6.0))\n\n# Plot for scenario 1\naxes[0].bar(['O', 'T', 'P'], data1, color=['blue', 'yellow', 'red'])\naxes[0].set_title('s1')\naxes[0].set_xlabel('Role')\naxes[0].set_ylabel('Count')\n\n# Plot for scenario 2\naxes[1].bar(['O', 'T', 'P'], data2, color=['blue', 'yellow', 'red'])\naxes[1].set_title('s2')\naxes[1].set_xlabel('Role')\naxes[1].set_ylabel('Count')\n\n# Adjust layout for better spacing\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_17.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\ntasks = ['ARC', 'MMLU', 'TruthfulQ&A', 'Winogrande', 'Average']\naccuracies = [53.0, 51.3, 56.4, 73.1, 53.8]\nstd_devs = [2.0, 1.1, 1.2, 1.8, 0.9]\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(10.0, 4.0))\n\n# Define colors for bars and error bars\ncolors = ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd']\nerror_bar_colors = ['#aec7e8', '#ffbb99', '#90ee90', '#ff9999', '#c5b0d5']\n\n# Plot the bar chart\nbars = ax.bar(tasks, accuracies, yerr=std_devs, color=colors, capsize=5, edgecolor='black')\n\n# Add error bars with custom colors\nfor bar, std_dev, color in zip(bars, std_devs, error_bar_colors):\n    ax.errorbar(\n        bar.get_x() + bar.get_width() / 2,\n        bar.get_height(),\n        yerr=std_dev,\n        fmt='o',\n        color=color,\n        ecolor='black',\n        elinewidth=1,\n        capsize=3\n    )\n\n# Set labels and title\nax.set_xlabel('Tasks')\nax.set_ylabel('Accuracy (%)')\nax.set_title('Task Accuracy Comparison')\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.5)\n\n# Rotate x-axis labels for better readability\nplt.xticks(rotation=45)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_18.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.array([3, 4, 5, 6, 7])\ny = np.array([50, 60, 70, 80, 90])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot the data with different styles\nax.bar(x, y, color=['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd'])\n\n# Set labels and title\nax.set_xlabel('M')\nax.set_ylabel('Performance')\nax.set_title('Performance of Different Models')\n\n# Add grid for better readability\nax.grid(True, linestyle='--', alpha=0.7)\n\n# Add legend\nax.legend(['M = 3', 'M = 4', 'M = 5', 'M = 6', 'M = 7'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_19.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the bar chart\ncategories = [\n    \"DLMA-7B VS. LLAMA-7B\", \"DLMA-7B VS. CD-7B\", \"DLMA-7B VS. RLAIF-7B\",\n    \"DLMA-7B VS. RLCD-7B\", \"DLMA-13B VS. LLAMA-13B\", \"DLMA-13B VS. CD-13B\",\n    \"DLMA-13B VS. RLAIF-13B\", \"DLMA-13B VS. RLCD-13B\"\n]\nvalues = [60.2, 60.2, 46.8, 34.7, 62.5, 62.5, 49.2, 30.9]\nerrors = [11.0, 11.0, 14.1, 26.2, 9.8, 9.8, 14.5, 30.5]\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Define colors for the bars\ncolors = ['#4CAF50', '#2196F3', '#FF5733']\n\n# Plot the bar chart\nbars = ax.bar(categories, values, yerr=errors, color=colors, capsize=5, edgecolor='black')\n\n# Add labels and title\nax.set_ylabel('Percentage')\nax.set_title('DLMA VS. Baseline Methods On HHH (Evaluated by GPT4)', fontsize=12)\nax.set_xlabel('DLMA vs. Baseline', fontsize=12)\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.5)\n\n# Add data labels on top of each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.5, f'{yval:.1f}%', ha='center', va='bottom', fontsize=10)\n\n# Add a legend\nax.legend(['DLMA win', 'Tie', 'DLMA lose'], loc='upper right')\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ntime = np.array([0, 10, 20, 30, 40])\ngait = np.array([\n    [0.5, 0.3, 0.2, 0.1, 0.05],\n    [0.4, 0.35, 0.25, 0.15, 0.05],\n    [0.3, 0.4, 0.3, 0.2, 0.1],\n    [0.2, 0.3, 0.4, 0.3, 0.2],\n    [0.1, 0.2, 0.3, 0.4, 0.5]\n])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(6.0, 3.0))\n\n# Plot the data with different colors and labels\nax.bar(time, gait[:, 0], color='green', label='trot')\nax.bar(time, gait[:, 1], bottom=gait[:, 0], color='red', label='pace')\nax.bar(time, gait[:, 2], bottom=gait[:, 0] + gait[:, 1], color='purple', label='bound')\nax.bar(time, gait[:, 3], bottom=gait[:, 0] + gait[:, 1] + gait[:, 2], color='brown', label='pronk')\nax.bar(time, gait[:, 4], bottom=gait[:, 0] + gait[:, 1] + gait[:, 2] + gait[:, 3], color='gray', label='transition')\n\n# Set labels and title\nax.set_xlabel('Time (s)')\nax.set_ylabel('% Experiments')\nax.set_title('Gait Distribution Over Time: Policy ORC=111')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_20.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the bar chart\ncategories = ['LIMA', 'Vicuna', 'Koala', 'Wizardlm', 'Self-Instruct']\nap1k_wins = [68, 82, 68, 72, 68]\ntie_wins = [24, 15, 22, 19, 23]\nag1k_wins = [8, 3, 10, 9, 9]\n\n# Set the width of the bars\nbar_width = 0.25\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Plot the data\nbars1 = ax.bar(np.arange(len(categories)), ap1k_wins, bar_width, label='AP-1k wins', color='#1f77b4')\nbars2 = ax.bar([i + bar_width for i in range(len(categories))], tie_wins, bar_width, label='Tie', color='#9467bd')\nbars3 = ax.bar([i + 2 * bar_width for i in range(len(categories))], ag1k_wins, bar_width, label='AG-1k wins', color='#c70039')\n\n# Add labels and title\nax.set_xlabel('Categories', fontsize=12)\nax.set_ylabel('Wins', fontsize=12)\nax.set_title('Comparison of Wins Across Categories', fontsize=14, fontweight='bold')\nax.set_xticks([i + bar_width for i in range(len(categories))])\nax.set_xticklabels(categories)\n\n# Add grid lines\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=.25)\n\n# Add legend\nax.legend()\n\n# Annotate each bar with its value\ndef annotate_bars(bars):\n    for bar in bars:\n        yval = bar.get_height()\n        ax.text(bar.get_x() + bar.get_width()/2, yval + 0.5, int(yval), ha='center', va='bottom', fontsize=10)\n\nannotate_bars(bars1)\nannotate_bars(bars2)\nannotate_bars(bars3)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_21.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the bar chart\ncategories = ['Benefits', 'Reliability', 'Security', 'Privacy']\nbenefits = [14.8, 9.4, 8.3, 24.1]\nreliability = [29.6, 24.1, 14.8, 29.6]\nsecurity = [18.5, 40.7, 33.3, 16.7]\nprivacy = [35.7, 45.2, 38.1, 33.3]\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Define colors for each category\ncolors = ['#FF5733', '#FFC300', '#8E44AD', '#3498DB']\n\n# Plot the data\nbars_benefits = ax.bar(categories, benefits, color=colors[0], label='Benefits')\nbars_reliability = ax.bar(categories, reliability, bottom=benefits, color=colors[1], label='Reliability')\nbars_security = ax.bar(categories, security, bottom=[sum(x) for x in zip(benefits, reliability)], color=colors[2], label='Security')\nbars_privacy = ax.bar(categories, privacy, bottom=[sum(x) for x in zip(benefits, reliability, security)], color=colors[3], label='Privacy')\n\n# Add labels and title\nax.set_xlabel('Categories', fontsize=12)\nax.set_ylabel('Percentage', fontsize=12)\nax.set_title('Eye Movement', fontsize=14, fontweight='bold')\n\n# Add grid lines\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.5)\n\n# Add annotations\nfor bar in bars_benefits:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.5, f'{yval}%', ha='center', va='bottom', fontsize=10)\n\nfor bar in bars_reliability:\n    yval = bar.get_height() + sum([x for x in benefits])\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.5, f'{yval}%', ha='center', va='bottom', fontsize=10)\n\nfor bar in bars_security:\n    yval = sum([x for x in benefits]) + sum([x for x in reliability])\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.5, f'{yval}%', ha='center', va='bottom', fontsize=10)\n\nfor bar in bars_privacy:\n    yval = sum([x for x in benefits]) + sum([x for x in reliability]) + sum([x for x in security])\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.5, f'{yval}%', ha='center', va='bottom', fontsize=10)\n\n# Add legend\nax.legend(loc='upper left', bbox_to_anchor=(1, 1), fontsize=10)\n\n# Set x-ticks\nax.set_xticks(np.arange(len(categories)))\nax.set_xticklabels(categories, rotation=45, ha='right')\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_22.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.array([-150, -120, -90, -60, -30, 0, 30, 60, 90, 120, 150])\ny1 = np.array([10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110])\ny2 = np.array([15, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(6.0, 10.0))\n\n# Plot the data with different styles\nax.plot(x, y1, label='Ours', color='blue', linestyle='-', linewidth=2, marker='o', markersize=5)\nax.plot(x, y2, label='Saliency-based Sampling', color='purple', linestyle='--', linewidth=2, marker='s', markersize=5)\n\n# Set labels and title\nax.set_xlabel('Rotation Angle (\u00b0)', fontsize=12)\nax.set_ylabel('Rate of Gain Change (%)', fontsize=12)\nax.set_title('Comparison of Rate of Gain Change', fontsize=14, fontweight='bold')\n\n# Add grid for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Set limits for x and y axes\nax.set_xlim(-180, 180)\nax.set_ylim(-30, 120)\n\n# Add a legend\nax.legend(loc='upper left', fontsize=10)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_23.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nlanguages = ['GPT4', 'GPT-few-shot', 'GPT3.5', 'StarCoder', 'Code Llama', 'NCL']\naccuracy = [3.2, 2.8, 3.1, 2.9, 3.4, 2.7]\ncompleteness = [3.0, 2.6, 2.9, 2.7, 3.3, 2.5]\nconciseness = [2.8, 2.4, 2.7, 2.5, 3.2, 2.3]\nreadability = [2.6, 2.2, 2.5, 2.3, 3.1, 2.1]\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(9.0, 5.0))\n\n# Define colors for each bar\ncolors = ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd', '#8c564b']\n\n# Plot bars for each metric\nbars1 = ax.bar(languages, accuracy, color=colors[0], label='Accuracy')\nbars2 = ax.bar(languages, completeness, bottom=accuracy, color=colors[1], label='Completeness')\nbars3 = ax.bar(languages, conciseness, bottom=[a + c for a, c in zip(accuracy, completeness)], color=colors[2], label='Conciseness')\nbars4 = ax.bar(languages, readability, bottom=[a + c + k for a, c, k in zip(accuracy, completeness, conciseness)], color=colors[3], label='Readability')\n\n# Add labels and title\nax.set_xlabel('Language Models', fontsize=12)\nax.set_ylabel('Ratings', fontsize=12)\nax.set_title('Ratings of Language Models on a Scale from 1-4', fontsize=14, fontweight='bold')\nax.set_ylim(0, 4)\n\n# Add grid lines\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.7)\n\n# Add legend\nax.legend(loc='upper right', fontsize=10)\n\n# Add annotations on top of each bar\nfor bars in [bars1, bars2, bars3, bars4]:\n    for bar in bars:\n        yval = bar.get_height()\n        ax.text(bar.get_x() + bar.get_width()/2, yval + 0.05, round(yval, 1), ha='center', va='bottom', fontsize=10)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_24.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nmodels = ['Majority', 'Flan-T5', 'GPT-3.5', 'GPT-4', 'Wizard13b', 'Vicuna13b', 'Mistral17b']\naccuracies = [0.302, 0.601, 0.468, 0.653, 0.384, 0.379, 0.364]\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(8.0, 4.0))\n\n# Plot the bar chart\nbars = ax.bar(models, accuracies, color=plt.cm.viridis(np.linspace(0.2, 0.8, len(models))))\n\n# Add value labels on top of each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.01, f'{yval:.3f}', ha='center', va='bottom')\n\n# Set labels and title\nax.set_xlabel('Models')\nax.set_ylabel('Accuracy')\nax.set_title('Model Accuracy Comparison')\n\n# Rotate x-axis labels for better readability\nplt.xticks(rotation=45)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_25.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the bar chart\ncategories = ['Alpaca-52k+', 'Alpaga-1k+', 'LIMa-1k+']\nvalues = [78.8, 67.4, 44.2]\nerrors = [9.5, 14.5, 19.2]\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(10.0, 4.0))\n\n# Define colors for the bars\ncolors = ['#1f77b4', '#ff7f0e', '#2ca02c']\n\n# Plot the bar chart\nbars = ax.bar(categories, values, yerr=errors, color=colors, capsize=5, edgecolor='black')\n\n# Add labels and title\nax.set_ylabel('Value')\nax.set_title('GPT4-as-a-judge')\n\n# Add grid lines\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=.25)\n\n# Annotate each bar with its value\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.5, f'{yval:.1f}', ha='center', va='bottom')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_26.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nemotions = ['Ang', 'Ct', 'Dis', 'Fea', 'Joy', 'Ntr', 'Sad', 'Sur']\ncounts = [100, 200, 300, 400, 500, 600, 700, 800]\n\n# Define colors for each emotion\ncolors = ['#FF0000', '#00FF00', '#808080', '#FFFF00', '#0000FF', '#800080', '#FFA500', '#008000']\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Plot the bar chart\nbars = ax.bar(emotions, counts, color=colors)\n\n# Add labels and title\nax.set_xlabel('Emotions')\nax.set_ylabel('Frequency')\nax.set_title('Emotion Frequency')\n\n# Rotate x-axis labels for better readability\nplt.xticks(rotation=45)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_27.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ncategories = ['GPT-4V', 'RoboCodeX']\nsuccess_rates = [0.95, 0.85]\noccupancy_error = [0.02, 0.03]\ngrounding_error = [0.01, 0.01]\ngrasper_collision = [0.01, 0.01]\ntrajectory_optimization_error = [0.01, 0.01]\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(10.0, 3.0))\n\n# Define colors for each bar\ncolors = ['#00FF00', '#FFA500', '#808080', '#FFD700', '#8B4513']\n\n# Plot the bars\nbars = ax.bar(categories, success_rates, color=colors[0], label='Success')\nax.bar(categories, occupancy_error, bottom=success_rates, color=colors[1], label='Occupancy Error')\nax.bar(categories, grounding_error, bottom=[s + o for s, o in zip(success_rates, occupancy_error)], color=colors[2], label='Grounding Error')\nax.bar(categories, grasper_collision, bottom=[s + o + g for s, o, g in zip(success_rates, occupancy_error, grounding_error)], color=colors[3], label='Grasper collision')\nax.bar(categories, trajectory_optimization_error, bottom=[s + o + g + gc for s, o, g, gc in zip(success_rates, occupancy_error, grounding_error, grasper_collision)], color=colors[4], label='Trajectory optimization Error')\n\n# Add labels and title\nax.set_xlabel('Percentage of total trials')\nax.set_ylabel('Categories')\nax.set_title('Performance Metrics')\n\n# Add grid lines\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=.25)\n\n# Add legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_28.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ndatasets = ['VOC 2012', 'COCO 2017']\ntransmission_delays = [3.5, 2.8]\nerror_bars = [0.4, 0.3]\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(6.0, 5.0))\n\n# Plot the bar chart with error bars\nbars = ax.bar(datasets, transmission_delays, yerr=error_bars, capsize=5, color=['#FF9999', '#66B3FF'], edgecolor='black')\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.5)\n\n# Set labels and title\nax.set_xlabel('Datasets')\nax.set_ylabel('Transmission Delay (ms)')\nax.set_title('Comparison of Transmission Delays for Different Datasets')\n\n# Add a legend\nax.legend(['JPEG', 'DEEPJSCC w/ ofdm', 'OURS'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_29.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ncategories = ['Wave', 'Diffusion', 'Heat', 'Poison', 'Burgers', 'N-S']\nvalues = [1e-1, 1e-2, 1e-3, 1e-4, 1e-5, 1e-6]\ncolors = ['#0000FF', '#FF0000', '#FFA500', '#800080', '#008000', '#FF00FF']\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot the data\nbars = ax.bar(categories, values, color=colors)\n\n# Add labels and title\nax.set_xlabel('PDEs')\nax.set_ylabel('log L2')\nax.set_title('PDEs vs Log L2')\n\n# Add grid for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=.25)\n\n# Add annotations for each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.01, f'{yval:.1e}', ha='center', va='bottom')\n\n# Add a legend\nax.legend(['RBF-INT', 'RBF-POL', 'RBF-COM'], loc='upper right')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nmodels = ['w/o DaQNR', 'w/o CPRN', 'w/o QCN', 'Full model']\nlive_data = [0.975, 0.975, 0.975, 0.975]\nsrocc_data = [0.965, 0.965, 0.965, 0.965]\nciq_data = [0.975, 0.975, 0.975, 0.975]\ntid2013_data = [0.985, 0.985, 0.985, 0.985]\n\n# Create a new figure with specified size\nfig, axes = plt.subplots(1, 4, figsize=(10.0, 3.0), sharey=True)\n\n# Plot for LIVE\naxes[0].bar(models, live_data, color='blue', alpha=0.7)\naxes[0].set_title('LIVE')\naxes[0].set_ylabel('Metric Values')\n\n# Plot for SROCC\naxes[1].bar(models, srocc_data, color='orange', alpha=0.7)\naxes[1].set_title('SROCC')\n\n# Plot for CIQ\naxes[2].bar(models, ciq_data, color='teal', alpha=0.7)\naxes[2].set_title('CIQ')\n\n# Plot for TID2013\naxes[3].bar(models, tid2013_data, color='darkgoldenrod', alpha=0.7)\naxes[3].set_title('TID2013')\n\n# Add a main title for the entire figure\nplt.suptitle('Models', fontsize=14, fontweight='bold')\n\n# Adjust layout for better spacing\nplt.tight_layout(rect=[0, 0.03, 1, 0.95])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_30.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the bar chart\ncategories = ['Mixtral-8x7b-Instr', 'GPT-3.5', 'GPT-4']\nvalues = [6.11, 28.33, 31.11, 44.44, 56.11, 85.0, 60.56, 42.78, 99.44]\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Define colors for the bars\ncolors = ['#FF9999', '#66B3FF', '#9999FF']\n\n# Plot the bar chart\nbars = ax.bar(categories, values, color=colors)\n\n# Add labels and title\nax.set_xlabel('Zero-shot')\nax.set_ylabel('One-pass rate (%)')\nax.set_title('Performance Comparison')\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=.25)\n\n# Annotate each bar with its value\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 1, f'{yval:.2f}', ha='center', va='bottom')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_31.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the bar chart\ncategories = ['LMM-based vs. TPLM', 'LMM-based vs. Template', 'LMM-based vs. Markdown', 'TPLM-based vs. Template', 'TPLM-based vs. Markdown', 'Markdown vs. Template']\nwin_percentages = [17.0, 20.0, 25.0, 30.5, 31.5, 19.5]\ntie_percentages = [54.0, 67.5, 56.5, 57.5, 54.5, 61.0]\nloss_percentages = [29.0, 12.5, 18.5, 12.0, 14.0, 19.5]\n\n# Set the width of the bars\nbar_width = 0.25\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot the data\nbars1 = ax.bar(np.arange(len(categories)), win_percentages, bar_width, label='Win', color='skyblue')\nbars2 = ax.bar(np.arange(len(categories)) + bar_width, tie_percentages, bar_width, label='Tie', color='lightgreen')\nbars3 = ax.bar(np.arange(len(categories)) + 2*bar_width, loss_percentages, bar_width, label='Loss', color='salmon')\n\n# Add labels and title\nax.set_xlabel('Categories', fontsize=12)\nax.set_ylabel('Percentage', fontsize=12)\nax.set_title('Comparison of Win, Tie, and Loss Percentages', fontsize=14)\nax.set_xticks(np.arange(len(categories)) + bar_width)\nax.set_xticklabels(categories, rotation=45, ha='right', fontsize=10)\nax.legend()\n\n# Add value labels on top of each bar\ndef add_value_labels(bars):\n    for bar in bars:\n        yval = bar.get_height()\n        ax.text(bar.get_x() + bar.get_width()/2, yval + 1, f'{yval}%', ha='center', va='bottom', fontsize=10)\n\nadd_value_labels(bars1)\nadd_value_labels(bars2)\nadd_value_labels(bars3)\n\n# Adjust layout for better spacing\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_32.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\nlabels = ['Combat Spider', 'Milky Cow', 'Shear Sheep']\nvalues = [0.72, 0.74, 0.56]\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(6.0, 2.0))\n\n# Plot the data\nbars = ax.bar(labels, values, color='blue')\n\n# Set labels and title\nax.set_xlabel('Probability of Improvement over VLM Image Encoder Baseline Returns')\nax.set_ylabel('Probability of Improvement')\n\n# Add grid lines for better readability\nax.yaxis.grid(True)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_33.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\nsteps = np.array([0, 1, 2, 3, 4])\navg_following_rate = np.array([100.0, 60.0, 29.8, 100.0, 60.8])\nfollowing_error_rate = np.array([26.7, 27.7, 50.7, 63.4, 38.5])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Plot the data with different colors and styles\nbars = ax.bar(steps, avg_following_rate, color='darkgray', label='Avg. Following Rate')\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.5, f'{yval:.1f}%', ha='center', va='bottom')\n\nbars = ax.bar(steps, following_error_rate, bottom=avg_following_rate, color='lightgreen', label='Following-related Error Rate')\nfor bar in bars:\n    yval = bar.get_height() + bar.get_x()\n    ax.text(yval, yval + 0.5, f'{bar.get_height():.1f}%', ha='center', va='bottom')\n\n# Set labels and title\nax.set_xlabel('Steps')\nax.set_ylabel('Scores')\nax.set_title('Instruction Following Results In Different Steps (gpt-3.5-turbo)')\nax.set_xticks(steps)\nax.set_xticklabels(['0', '1', '2', '3', '4'])\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_34.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.arange(1, 21)\ny = np.array([\n    [5, 10, 15], [10, 15, 20], [15, 20, 25], [20, 25, 30], [25, 30, 35],\n    [30, 35, 40], [35, 40, 45], [40, 45, 50], [45, 50, 55], [50, 55, 60],\n    [55, 60, 65], [60, 65, 70], [65, 70, 75], [70, 75, 80], [75, 80, 85],\n    [80, 85, 90], [85, 90, 95], [90, 95, 100], [95, 100, 105], [100, 105, 110]\n])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(8.0, 4.0))\n\n# Plot the data with different styles for each line\nfor i in range(y.shape[1]):\n    ax.plot(x, y[:, i], label=f'Line {i+1}', linestyle='-', linewidth=2, marker='o', markersize=5)\n\n# Set labels and title\nax.set_xlabel('X-axis')\nax.set_ylabel('Y-axis')\nax.set_title('Sample Plot')\n\n# Add a legend\nax.legend()\n\n# Add grid lines\nax.grid(True, linestyle='--', alpha=0.7)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_35.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ncategories = ['Llama2', 'Mistral']\nmt_bench_scores = [5.52, 6.9]\ncluster_clip_scores = [7.08, 6.9]\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Define colors for the bars\ncolors = ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd']\n\n# Plot the bar chart for MT-Bench scores\nax.bar(categories, mt_bench_scores, color=colors[0], label='MT-Bench Score')\n\n# Plot the bar chart for ClusterClip scores\nax.bar(categories, cluster_clip_scores, bottom=mt_bench_scores, color=colors[4], label='ClusterClip')\n\n# Set labels and title\nax.set_xlabel('Model')\nax.set_ylabel('Score')\nax.set_title('MT-Bench Score vs ClusterClip')\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.5)\n\n# Add legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_36.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.array([100, 1000])\ny = np.array([49.98, 50.74])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(6.61, 5.23))\n\n# Plot the data with different styles\nax.bar(x, y, color=['blue', 'darkorange'], edgecolor='black')\n\n# Set labels and title\nax.set_xlabel('Number of Clusters')\nax.set_ylabel('MMLU')\nax.set_title('Random Sampling')\n\n# Add a horizontal line at y=50 for reference\nax.axhline(y=50, color='green', linestyle='--')\n\n# Add a legend\nax.legend(['Random Sampling', 'Uniform', 'ClusterClip'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_37.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\nx = np.array([1, 2, 3, 4, 5])\ny1 = np.array([1.0, 2.6, 3.3, 4.6, 7.4])\ny2 = np.array([1.0, 2.9, 3.4, 5.2, 8.7])\ny3 = np.array([1.0, 1.9, 2.9, 6.1, 3.9])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(12.0, 4.0))\n\n# Plot the data with different colors and styles\nax.bar(x - 0.2, y1, width=0.2, color='pink', label='ResNet18')\nax.bar(x, y2, width=0.2, color='orange', label='AlexNet')\nax.bar(x + 0.2, y3, width=0.2, color='purple', label='ResNet50')\n\n# Set labels and title\nax.set_xlabel('Perturbation')\nax.set_ylabel('Speedup')\nax.set_title('Perturbation')\n\n# Add grid lines for better readability\nax.grid(True, linestyle='--', alpha=0.7)\n\n# Add legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_38.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nlabels = ['CL-7b', 'CL-13b', 'CL-34b', 'DS-6.7b', 'DS-33b', 'SC']\naccuracies = [20, 40, 30, 60, 70, 80]\nerrors = [10, 15, 5, 10, 5, 10]\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(7.0, 5.0))\n\n# Define colors for each bar\ncolors = ['#4CAF50', '#2196F3', '#FFC107', '#FF5722', '#9C27B0', '#607D8B']\n\n# Plot the bar chart with error bars\nbars = ax.bar(labels, accuracies, yerr=errors, color=colors, capsize=5, edgecolor='black')\n\n# Add title and labels\nax.set_title('LeetCode, DS-6.7b', fontsize=14, fontweight='bold')\nax.set_xlabel('Test Cases', fontsize=12)\nax.set_ylabel('Accuracy', fontsize=12)\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.7)\n\n# Annotate each bar with its value\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 1, f'{yval}%', ha='center', va='bottom', fontsize=10)\n\n# Customize the x-axis ticks\nplt.xticks(rotation=45, ha='right')\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_39.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the bar chart\ncategories = ['Vicuna', 'Koala', 'WizardLM', 'SInstruct', 'LIMA']\nvalues = [53, 80, 116, 99, 179]\nrecost_wins = [1, 2, 3, 4, 5]\ntie_wins = [6, 7, 8, 9, 10]\nalpacawins = [21, 33, 49, 50, 98]\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Define colors for the bars\ncolors = ['#FF5733', '#FFC300', '#87CEEB']\n\n# Plot the bars\nbars = ax.bar(categories, values, color=colors[0], label='Recost (1% wins)')\nax.bar(categories, recost_wins, bottom=values, color=colors[1], label='Tie')\nax.bar(categories, tie_wins, bottom=[v + r for v, r in zip(values, recost_wins)], color=colors[2], label='Alpaca wins')\n\n# Add labels and title\nax.set_xlabel('Model')\nax.set_ylabel('Wins')\nax.set_title('Model Performance')\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the bar chart\ncategories = ['CometKiwi', 'LaBSE', 'IF', 'Max', 'Ppl', 'STARE', 'Wass Combo', 'ALTI+', 'STARE']\nvalues = [35.15, 26.86, 19.08, 22.09, 20.67, 58.99, 66.19, 48.38, 62.94]\nnon_aggregate_values = [35.15, 26.86, 19.08, 22.09, 20.67, 58.99, 66.19, 48.38, 62.94]\naggregate_values = [35.15, 26.86, 19.08, 22.09, 20.67, 58.99, 66.19, 48.38, 62.94]\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Plot the data\nbars = ax.bar(categories, values, color='lightgreen', edgecolor='black', label='Non-Aggregate')\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.5, f'{yval:.2f}', ha='center', va='bottom')\n\n# Add a horizontal line at the mean value\nmean_value = np.mean(values)\nax.axhline(y=mean_value, color='red', linestyle='--', linewidth=1.5)\n\n# Customize the plot\nax.set_title('FPR@90TPR on Guerreo et al. 2022', fontsize=14, fontweight='bold')\nax.set_xlabel('Categories', fontsize=12)\nax.set_ylabel('FPR@90TPR', fontsize=12)\nax.set_ylim(0, 80)\nax.grid(axis='y', linestyle='--', alpha=0.7)\nax.legend()\n\n# Annotate the mean value\nax.annotate(f'Mean: {mean_value:.2f}', xy=(0.5, mean_value), xytext=(0.5, mean_value + 5),\n            arrowprops=dict(facecolor='black', shrink=0.05), fontsize=10, ha='center')\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_40.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the bar chart\ncategories = [\n    'Literal', 'Assignment', 'Operator', 'Comment', 'Operation',\n    'Exception Handling', 'Method Call', 'Return', 'Variable', 'External Class',\n    'Argument', 'Conditional Block', 'Loop', 'External Variable/Method',\n    'Conditional Statement', 'Variable Declaration', 'Method Declaration',\n    'Parameter'\n]\nvalues = [120, 80, 70, 60, 50, 40, 30, 20, 10, 90, 85, 75, 65, 55, 45, 35, 25, 15]\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Plot the data\nbars = ax.bar(categories, values, color='teal')\n\n# Add labels and title\nax.set_xlabel('Semantic Category')\nax.set_ylabel('Difference (%)')\nax.set_title('Relative Difference in Machine vs. Human Focus on Semantic Categories')\n\n# Rotate x-axis labels for better readability\nplt.xticks(rotation=45, ha='right')\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=.25)\n\n# Annotate each bar with its value\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 1, f'{yval}', ha='center', va='bottom')\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_41.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the bar chart\nx = np.array([5, 10, 15, 20])\ny1 = np.array([66.3, 61.9, 53.8, 53.7])\ny2 = np.array([49.3, 45.7, 41.6, 33.7])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(14.0, 4.0))\n\n# Plot the data with different colors and styles\nax.bar(x - 0.2, y1, width=0.4, color='tab:blue', label='Truthful Recall')\nax.bar(x + 0.2, y2, width=0.4, color='tab:red', label='Misleading Recall')\n\n# Set labels and title\nax.set_xlabel('X-axis Label')\nax.set_ylabel('Y-axis Label')\nax.set_title('Comparison of Truthful and Misleading Recalls')\n\n# Add grid lines\nax.yaxis.grid(True)\n\n# Add legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_42.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nmodels = [\n    'PROST', 'ARC-easy', 'COMVE', 'OpenBookQA', 'SciQ', 'NumSense', 'CoQA', \n    'ComQA2.0', 'ComQAT', 'ComIC', 'Winogrande', 'Com2Sense', 'ARC-challenge', \n    'SocialIQA', 'HellaSWAG-wikiHow', 'HellaSWAG-elem', 'Winograd', 'PIQA', \n    'QuaRel', 'SCST', 'alphaNLI', 'SWAG'\n]\ndacc_values = np.array([\n    -3.14, -2.98, -2.76, -2.54, -2.32, -2.10, -1.88, -1.66, -1.44, -1.22, \n    -1.00, -0.78, -0.56, -0.34, -0.12, 0.10, 0.32, 0.54, 0.76, 0.98, 1.20, 1.42\n])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Plot the data\nbars = ax.bar(models, dacc_values, color='blue', edgecolor='black')\n\n# Add horizontal lines for reference\nax.axhline(y=-1, color='orange', linestyle='--', linewidth=1)\nax.axhline(y=1, color='green', linestyle='--', linewidth=1)\n\n# Set labels and title\nax.set_xlabel('Model')\nax.set_ylabel('\u0394Acc (with STO Rules)')\nax.set_title('Model = Vicuna')\n\n# Rotate x-axis labels for better readability\nplt.xticks(rotation=45, ha='right')\n\n# Add grid for better readability\nax.grid(axis='y', linestyle='--', alpha=0.7)\n\n# Add annotations for each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.1, f'{yval:.2f}', ha='center', va='bottom', fontsize=8)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_43.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the bar chart\ncategories = [\n    'LSTM-2/39b', 'Zephyr-7/39b', 'Qwen-7/39b', 'MedMCQA', 'MedQA (USMLE)', 'PubMedQA',\n    'MMLU Anatomy', 'MMLU Clinical knowledge', 'MMLU College biology', 'MMLU College medicine',\n    'MMLU Medical genetics', 'MMLU Medical'\n]\n\nperformance_scores = [\n    54.3, 56.0, 57.8, 72.3, 79.1, 70.7, 66.7, 89.6, 88.0, 83.2, 80.0, 75.6, 78.5, 76.0, 79.0, 77.7, 75.0, 73.1, 71.0, 69.2, 67.6, 66.4, 64.9, 63.6, 62.2, 60.8, 59.3, 57.2, 55.6, 54.3, 53.1, 51.7, 50.8, 49.9, 48.1, 47.8, 46.9, 46.4, 45.9, 45.4, 44.9, 44.4, 43.9, 43.4, 42.9, 42.4, 41.9, 41.4, 40.9, 40.4, 39.9, 39.4, 38.9, 38.4, 37.9, 37.4, 36.9, 36.4, 35.9, 35.4, 34.9, 34.4, 33.9, 33.4, 32.9, 32.4, 31.9, 31.4, 30.9, 30.4, 29.9, 29.4, 28.9, 28.4, 27.9, 27.4, 26.9, 26.4, 25.9, 25.4, 24.9, 24.4, 23.9, 23.4, 22.9, 22.4, 21.9, 21.4, 20.9, 20.4, 19.9, 19.4, 18.9, 18.4, 17.9, 17.4, 16.9, 16.4, 15.9, 15.4, 14.9, 14.4, 13.9, 13.4, 12.9, 12.4, 11.9, 11.4, 10.9, 10.4, 9.9, 9.4, 8.9, 8.4, 7.9, 7.4, 6.9, 6.4, 5.9, 5.4, 4.9, 4.4, 3.9, 3.4, 2.9, 2.4, 1.9, 1.4, 0.9, 0.4\n]\naccuracy_scores = [\n    75.6, 74.4, 73.2, 72.3, 79.1, 70.7, 66.7, 89.6, 88.0, 83.2, 80.0, 75.6, 78.5, 76.0, 79.0, 77.7, 75.0, 73.1, 71.0, 69.2, 67.6, 66.4, 64.9, 63.6, 62.2, 60.8, 59.3, 57.2, 55.6, 54.3, 53.1, 51.7, 50.8, 49.9, 48.1, 47.8, 46.9, 46.4, 45.9, 45.4, 44.9, 44.4, 43.9, 43.4, 42.9, 42.4, 41.9, 41.4, 40.9, 40.4, 39.9, 39.4, 38.9, 38.4, 37.9, 37.4, 36.9, 36.4, 35.9, 35.4, 34.9, 34.4, 33.9, 33.4, 32.9, 32.4, 31.9, 31.4, 30.9, 30.4, 29.9, 29.4, 28.9, 28.4, 27.9, 27.4, 26.9, 26.4, 25.9, 25.4, 24.9, 24.4, 23.9, 23.4, 22.9, 22.4, 21.9, 21.4, 20.9, 20.4, 19.9, 19.4, 18.9, 18.4, 17.9, 17.4, 16.9, 16.4, 15.9, 15.4, 14.9, 14.4, 13.9, 13.4, 12.9, 12.4, 11.9, 11.4, 10.9, 10.4, 9.9, 9.4, 8.9, 8.4, 7.9, 7.4, 6.9, 6.4, 5.9, 5.4, 4.9, 4.4, 3.9, 3.4, 2.9, 2.4, 1.9, 1.4, 0.9, 0.4\n]\nf1_scores = [\n    75.6, 74.4, 73.2, 72.3, 79.1, 70.7, 66.7, 89.6, 88.0, 83.2, 80.0, 75.6, 78.5, 76.0, 79.0, 77.7, 75.0, 73.1, 71.0, 69.2, 67.6, 66.4, 64.9, 63.6, 62.2, 60.8, 59.3, 57.2, 55.6, 54.3, 53.1, 51.7, 50.8, 49.9, 48.1, 47.8, 46.9, 46.4, 45.9, 45.4, 44.9, 44.4, 43.9, 43.4, 42.9, 42.4, 41.9, 41.4, 40.9, 40.4, 39.9, 39.4, 38.9, 38.4, 37.9, 37.4, 36.9, 36.4, 35.9, 35.4, 34.9, 34.4, 33.9, 33.4, 32.9, 32.4, 31.9, 31.4, 30.9, 30.4, 29.9, 29.4, 28.9, 28.4, 27.9, 27.4, 26.9, 26.4, 25.9, 25.4, 24.9, 24.4, 23.9, 23.4, 22.9, 22.4, 21.9, 21.4, 20.9, 20.4, 19.9, 19.4, 18.9, 18.4, 17.9, 17.4, 16.9, 16.4, 15.9, 15.4, 14.9, 14.4, 13.9, 13.4, 12.9, 12.4, 11.9, 11.4, 10.9, 10.4, 9.9, 9.4, 8.9, 8.4, 7.9, 7.4, 6.9, 6.4, 5.9, 5.4, 4.9, 4.4, 3.9, 3.4, 2.9, 2.4, 1.9, 1.4, 0.9, 0.4\n]\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Define colors for the bars\ncolors = ['#FF9999', '#FFB399', '#FFD499', '#FEE680', '#FFFF99', '#E6FF80', \n          '#B3FF99', '#80FF99', '#80CBE2', '#80A6FF', '#A680FF', '#D480FF']\n\n# Plot the bar chart\nbars = ax.bar(categories, performance_scores, color=colors, edgecolor='black')\n\n# Add labels and title\nax.set_xlabel('Categories')\nax.set_ylabel('Performance Score (%)')\nax.set_title('Performance Comparison of Different Categories')\n\n# Add grid lines\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.5)\n\n# Add annotations for each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.5, f'{yval:.1f}', ha='center', va='bottom', fontsize=8)\n\n# Rotate x-axis labels for better readability\nplt.xticks(rotation=45, ha='right')\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_44.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Number of non-NLAs per category\ncategories = ['AFAN', 'AFBE', 'AFCE', 'AFAO', 'AFEX', 'AFFG', 'AFPK', 'AFPO', 'AFPP', 'AFPR', 'AFSC', 'AFSL', 'AFSR', 'AFSS', 'AFST', 'AFTH', 'AFVC', 'AFVS', 'AFWT', 'DAH', 'IC', 'SS']\nnon_nlas = [15, 20, 10, 5, 3, 7, 12, 9, 14, 18, 22, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70]\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data with a bar chart\nbars = ax.bar(categories, non_nlas, color='royalblue', edgecolor='black')\n\n# Add a title and labels\nax.set_title('Number of Non-NLAs per Category', fontsize=14, fontweight='bold')\nax.set_xlabel('Categories', fontsize=12)\nax.set_ylabel('Non-NLAs', fontsize=12)\n\n# Rotate x-axis labels for better readability\nplt.xticks(rotation=45, ha='right')\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', alpha=0.7)\n\n# Annotate each bar with its value\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 1, f'{yval}', ha='center', va='bottom', fontsize=10)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_45.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.array([3, 5, 7, 9, 11])\ny1 = np.array([-4.5, -2.5, -1.5, -0.5, 0.5])\ny2 = np.array([-3.5, -1.5, -0.5, 0.5, 1.5])\ny3 = np.array([-2.5, -0.5, 0.5, 1.5, 2.5])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(10.0, 7.0))\n\n# Plot the data with different styles\nax.plot(x, y1, label='LLAMA-Default', color='pink', linestyle='-', marker='o')\nax.plot(x, y2, label='LLAMA-HAG', color='red', linestyle='--', marker='s')\nax.plot(x, y3, label='Vicuna-Default', color='skyblue', linestyle='-.', marker='^')\n\n# Set labels and title\nax.set_xlabel('Num of Constraint Words', fontsize=12)\nax.set_ylabel('Score', fontsize=12)\nax.set_title('Taboo', fontsize=14, fontweight='bold')\n\n# Add grid for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Customize ticks\nax.set_xticks(x)\nax.set_yticks(np.arange(-5, 5, 1))\n\n# Add legend with a shadow effect\nax.legend(loc='upper left', shadow=True, fontsize=10)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_46.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ncategories = ['Lavila', 'Video-LLaMA', 'BLIP1', 'BLIP2 Model', 'LLaVA', 'OSCaR', 'GPT4V']\nvalues = [0.0, 0.71, 4.64, 4.64, 31.79, 73.93, 82.5]\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot the bar chart\nbars = ax.bar(categories, values, color='skyblue', edgecolor='black')\n\n# Add value labels on top of each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.5, f'{yval:.1f}', ha='center', va='bottom', fontsize=10)\n\n# Set title and labels\nax.set_title('Human Study', fontsize=16, fontweight='bold')\nax.set_xlabel('Categories', fontsize=12)\nax.set_ylabel('Percentage (%)', fontsize=12)\n\n# Customize the grid\nax.yaxis.grid(True, linestyle='--', alpha=0.7)\n\n# Rotate x-axis labels for better readability\nplt.xticks(rotation=45, ha='right')\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_47.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the bar chart\ncategories = ['HH', 'Reddit', 'IMDB', 'Avg']\ncopr_values = [22, 40, 35, 26]\ngpt_values = [50, 30, 60, 40]\n\n# Define colors for the bars\ncolors = ['#FF5733', '#FFC300', '#DAF7A6', '#900C3F']\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(13.0, 6.0))\n\n# Plot the bar chart\nbar_width = 0.35\nindex = np.arange(len(categories))\nbars1 = ax.bar(index, copr_values, bar_width, color=colors[0], label='COPR v.s. Golden (Human Eval)')\nbars2 = ax.bar(index + bar_width, gpt_values, bar_width, color=colors[1], label='COPR v.s. Golden (GPT-4 Eval)')\n\n# Add labels and title\nax.set_xlabel('Categories', fontsize=12)\nax.set_ylabel('Percentage', fontsize=12)\nax.set_title('COPR vs Golden (Human Eval) and GPT-4 Eval', fontsize=14, fontweight='bold')\nax.set_xticks(index + bar_width / 2)\nax.set_xticklabels(categories)\n\n# Add grid lines\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.7)\n\n# Add annotations\nfor bar in bars1:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 1, f'{yval}%', ha='center', va='bottom', fontsize=10)\n\nfor bar in bars2:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 1, f'{yval}%', ha='center', va='bottom', fontsize=10)\n\n# Add legend\nax.legend(loc='upper right', fontsize=12)\n\n# Add a color bar\ncmap = plt.cm.viridis\nsm = plt.cm.ScalarMappable(cmap=cmap, norm=plt.Normalize(vmin=0, vmax=100))\nsm._A = []\ncbar = fig.colorbar(sm, ax=ax, orientation='vertical', pad=0.05)\ncbar.set_label('Percentage', rotation=270, labelpad=15, fontsize=12)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_48.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ncategories = ['Accuracy', 'Unfairness']\nmovielens_scores = [0.32, 0.10]\ntenrec_scores = [0.18, 0.10]\n\n# Create a new figure with specified size\nfig, axes = plt.subplots(1, 2, figsize=(10, 6))\n\n# Plot for Movielens\naxes[0].bar(categories, movielens_scores, color=['purple', 'orange'])\naxes[0].set_title('Movielens')\naxes[0].set_ylabel('Score')\n\n# Plot for Tenrec\naxes[1].bar(categories, tenrec_scores, color=['purple', 'orange'])\naxes[1].set_title('Tenrec')\naxes[1].set_ylabel('Score')\n\n# Adjust layout for better spacing\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_49.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nresolutions = [224, 128, 64, 32]\naccuracies = [0.29, 0.60, 0.75, 0.87]\nimage_net_1k = [0.29, 0.60, 0.75, 0.87]\npac_fno = [0.25, 0.55, 0.70, 0.85]\npac_fnoo = [0.20, 0.50, 0.65, 0.80]\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data with different colors and patterns\nax.bar(resolutions, accuracies, color='skyblue', edgecolor='black', hatch='/', label='Top-1 Accuracy')\nax.bar(resolutions, image_net_1k, bottom=accuracies, color='orange', edgecolor='black', hatch='\\\\', label='ImageNet-1k')\nax.bar(resolutions, pac_fno, bottom=[a + i for a, i in zip(accuracies, image_net_1k)], color='tan', edgecolor='black', hatch='.', label='PAC-FNO')\nax.bar(resolutions, pac_fnoo, bottom=[a + i + j for a, i, j in zip(accuracies, image_net_1k, pac_fno)], color='lightcoral', edgecolor='black', hatch='x', label='PAC-FNOO')\n\n# Set labels and title\nax.set_xlabel('Resolutions', fontsize=12)\nax.set_ylabel('Top-1 Acc. (%)', fontsize=12)\nax.set_title('Top-1 Accuracy by Resolution and Method', fontsize=14, fontweight='bold')\n\n# Add grid lines\nax.yaxis.grid(True, linestyle='--', which='major', color='gray', alpha=0.7)\n\n# Add legend\nax.legend(loc='upper left', fontsize=10)\n\n# Annotate the bars with values\nfor i, v in enumerate(accuracies):\n    ax.text(i, v + 0.5, f'{v*100:.0f}%', ha='center', va='bottom', fontsize=10, color='black')\n\n# Add a vertical line at x=32\nax.axvline(x=32, color='blue', linestyle='--', linewidth=1.5)\n\n# Add a horizontal line at y=80\nax.axhline(y=80, color='red', linestyle='--', linewidth=1.5)\n\n# Add a red arrow pointing to the highest accuracy\nax.annotate('', xy=(3, 87), xytext=(3, 90),\n            arrowprops=dict(facecolor='red', shrink=0.05))\nax.text(3, 90, 'Highest Accuracy', fontsize=10, color='red', ha='center')\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.array([1, 2, 4])\ny = np.array([50, 50, 50])\nyerr = np.array([10, 10, 10])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(8.0, 3.0))\n\n# Plot the data with error bars\nax.errorbar(x, y, yerr=yerr, fmt='o', ecolor='black', capsize=5, label='Data')\n\n# Set labels and title\nax.set_xlabel('Level')\nax.set_ylabel('# Uploaded Samples')\nax.set_title('Sample Data with Error Bars')\n\n# Add grid for better readability\nax.grid(True)\n\n# Add legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_50.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\nx = np.array([17, 20, 9, 11, 19, 14, 30, 20, 12, 16, 14, 20, 35])\ny = np.array([0.06, 0.08, 0.06, 0.08, 0.06, 0.08, 0.06, 0.08, 0.06, 0.08, 0.06, 0.08, 0.08])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(6.0, 5.0))\n\n# Plot the data with enhancements\nax.bar(x, y, color=plt.cm.viridis(np.linspace(0, 1, len(x))), edgecolor='black')\n\n# Set labels and title\nax.set_xlabel('Categories')\nax.set_ylabel('Reward Values')\nax.set_title('Reward Values by Categories')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_51.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ncategories = ['Cleaning / Laundry', 'Crafting/ Knitting', 'Baker', 'Carpenter', 'Making Bricks', 'Gardening', \n              'Construction/ Renovation', 'Household Management', 'Scooter Mechanic', 'Farmer']\nvalues = [5375, 4190, 3543, 3216, 2915, 2548, 2343, 2158, 2060, 2008]\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(12.0, 8.0))\n\n# Plot the bar chart with enhanced aesthetics\nbars = ax.bar(categories, values, color='skyblue', edgecolor='black', linewidth=1.2)\n\n# Add value labels on top of each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 50, f'{yval}', ha='center', va='bottom', fontsize=10, fontweight='bold')\n\n# Set title and labels with improved font sizes and styles\nax.set_title('Number of Videos by Profession', fontsize=16, fontweight='bold')\nax.set_xlabel('Profession', fontsize=12)\nax.set_ylabel('Number of Videos', fontsize=12)\n\n# Rotate x-axis labels for better readability\nplt.xticks(rotation=45, ha='right')\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.7)\n\n# Adjust layout to prevent clipping of labels\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_52.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the bar chart\ncategories = ['Greeting', 'Request', 'Criticism', 'Apology', 'Persuasion', 'Thanking', 'Leaving-taking']\nsynthetic_data = [8, 31, 24, 7, 10, 10, 10]\nhuman_data = [16, 28, 11, 5, 15, 16, 9]\n\n# Set the width of the bars\nbar_width = 0.35\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Plot the data\nbars1 = ax.bar(categories, synthetic_data, bar_width, label='Synthetic data', color='skyblue')\nbars2 = ax.bar([i + bar_width for i in range(len(categories))], human_data, bar_width, label='Human-authored data', color='salmon')\n\n# Add labels and title\nax.set_xlabel('Synthetic data')\nax.set_ylabel('Human-authored data')\nax.set_title('Comparison of Synthetic and Human-Authored Data')\nax.set_xticks([i + bar_width / 2 for i in range(len(categories))])\nax.set_xticklabels(categories)\nax.legend()\n\n# Add value annotations on top of each bar\ndef add_value_labels(bars):\n    for bar in bars:\n        yval = bar.get_height()\n        ax.text(bar.get_x() + bar.get_width()/2, yval + 0.5, f'{yval}%', ha='center', va='bottom')\n\nadd_value_labels(bars1)\nadd_value_labels(bars2)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_53.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data for demonstration\nwords = ['small', 'certain', 'little', 'fraction', 'limited', 'a', 'day', 'few', 'new', 'tiny', 'substantial', 'tall', 'short', 'long', 'wide', 'slim', 'fat', 'thin', 'round', 'square', 'oval', 'heart-shaped', 'diamond-shaped', 'star-shaped', 'cloud-shaped', 'leaf-shaped', 'flower-shaped', 'bird-shaped', 'fish-shaped', 'car-shaped', 'house-shaped', 'tree-shaped', 'mountain-shaped', 'river-shaped', 'lake-shaped', 'sea-shaped', 'sky-shaped', 'land-shaped', 'water-shaped', 'fire-shaped', 'earth-shaped', 'moon-shaped', 'sun-shaped', 'star-shaped', 'comet-shaped', 'planet-shaped', 'galaxy-shaped', 'universe-shaped']\nprobabilities = [0.25, 0.15, 0.1, 0.1, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05,"}
{"file": "dataset/ori_500/bar_54.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the bar chart\ncategories = ['Convertible', 'Coupe', 'Sedan', 'SUV', 'Truck']\nvalues = [0.15, 0.35, 0.45, 0.25, 0.30]\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(6.0, 2.0))\n\n# Plot the bar chart\nbars = ax.bar(categories, values, color=['yellow', 'green', 'purple', 'blue', 'orange'])\n\n# Add labels and title\nax.set_ylabel('Probability of Improvement')\nax.set_title('Probability of Improvement over VLM Image Encoder Baseline Returns')\n\n# Add value annotations on top of each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.01, f'{yval:.2f}', ha='center', va='bottom')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_55.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the bar chart\nemotions = ['Disappointment', 'Joy', 'Relief', 'Gratitude', 'Annoyance', 'Nervousness', 'Pride', 'Sadness', 'Unbored', 'Amusement']\nfrequencies = [2.1, 3.0, 3.5, 3.5, 6.0, 6.0, 6.6, 6.7, 7.0, 7.6]\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Plot the bar chart\nbars = ax.bar(emotions, frequencies, color='darkred')\n\n# Add value labels on top of each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.1, f'{yval:.1f}', ha='center', va='bottom', fontsize=10)\n\n# Set labels and title\nax.set_xlabel('Emotion', fontsize=12)\nax.set_ylabel('Frequency (%)', fontsize=12)\nax.set_title('Emotion Frequency Distribution', fontsize=14, fontweight='bold')\n\n# Rotate x-axis labels for better readability\nplt.xticks(rotation=45, ha='right')\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_56.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ncategories = ['Making Bricks', 'Carpenter', 'Baker', 'Crafting/Knitting', 'Cleaning/Laundry', 'Gardening']\nvalues = [500, 400, 600, 700, 800, 900]\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(12.0, 8.0))\n\n# Define colors for each bar\ncolors = ['#FF9999', '#FFCC99', '#FFFF99', '#CCFF99', '#99FF99', '#99CCFF']\n\n# Plot the bar chart\nbars = ax.bar(categories, values, color=colors)\n\n# Add value labels on top of each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 50, f'{yval}', ha='center', va='bottom', fontsize=10, fontweight='bold')\n\n# Set title and labels\nax.set_title('Number of Videos by Profession', fontsize=16, fontweight='bold')\nax.set_xlabel('Profession', fontsize=12)\nax.set_ylabel('Number of Videos', fontsize=12)\n\n# Customize the x-axis ticks\nax.set_xticklabels(categories, rotation=45, ha='right')\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.7)\n\n# Adjust layout for better spacing\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_57.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the bar chart\ncategories = ['GDP Growth', 'Unemployment Rate', 'Inflation Rate', 'NASDAQ', 'Exchange Rate', 'Real Estate Prices', 'Corporate Profits']\nvalues = [40, 35, 25, 50, 30, 45, 35]\ncolors = ['#FF6347', '#1E90FF', '#90EE90', '#FFD700', '#4B0082', '#FFA500', '#ADD8E6']\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Plot the bar chart\nbars = ax.bar(categories, values, color=colors)\n\n# Add value labels on top of each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.5, f'{yval}', ha='center', va='bottom')\n\n# Set title and labels\nax.set_title('Bar Chart Example', fontsize=14)\nax.set_xlabel('Categories', fontsize=12)\nax.set_ylabel('Values', fontsize=12)\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.7)\n\n# Add a legend\nax.legend(['US', 'China', 'EU', 'Brazil', 'India'], loc='upper right')\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_58.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the bar chart\ncities = ['New York', 'Los Angeles', 'Chicago', 'Houston', 'Phoenix', 'Philadelphia']\nexcellent = [50, 45, 35, 40, 30, 55]\ngood = [20, 25, 15, 10, 15, 20]\nmoderate = [10, 10, 10, 10, 10, 10]\npoor = [5, 5, 5, 5, 5, 5]\nvery_poor = [5, 5, 5, 5, 5, 5]\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Define colors for each category\ncolors = ['#FF9999', '#FFCC99', '#B3E2CD', '#80B3D2', '#808080']\n\n# Plot the data\nbars = ax.barh(cities, excellent, color=colors[0], label='Excellent')\nax.barh(cities, good, left=excellent, color=colors[1], label='Good')\nax.barh(cities, moderate, left=[e + g for e, g in zip(excellent, good)], color=colors[2], label='Moderate')\nax.barh(cities, poor, left=[e + g + m for e, g, m in zip(excellent, good, moderate)], color=colors[3], label='Poor')\nax.barh(cities, very_poor, left=[e + g + m + p for e, g, m, p in zip(excellent, good, moderate, poor)], color=colors[4], label='Very Poor')\n\n# Add labels and title\nax.set_xlabel('Number of Houses')\nax.set_title('Housing Quality by City')\nax.legend()\n\n# Set x-axis limits\nax.set_xlim(0, 70)\n\n# Add grid lines for better readability\nax.grid(axis='x', linestyle='--', alpha=0.7)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_59.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the bar chart\ncategories = ['External Class', 'Argument', 'Loop', 'Conditional Statement', 'Variable Declaration', 'Method Declaration', 'Parameter']\npositive_differences = [70, 60, 50, 40, 30, 20, 10]\nnegative_differences = [80, 70, 60, 50, 40, 30, 20]\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Define colors for the bars\ncolors = ['#FF9999', '#FFB399', '#FFDFB3', '#FFFF99', '#B3FF99', '#B3E6FF', '#FFB3E6']\n\n# Plot the positive differences\nbars1 = ax.bar(categories, positive_differences, color=colors, label='Positive Differences')\n\n# Plot the negative differences\nbars2 = ax.bar(categories, negative_differences, bottom=positive_differences, color=[c.replace('FF', 'AA') for c in colors], label='Negative Differences')\n\n# Add labels and title\nax.set_xlabel('Semantic Category')\nax.set_ylabel('Difference (%)')\nax.set_title('Relative Difference in Machine vs. Human Focus on Semantic Categories')\n\n# Add grid lines\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.5)\n\n# Add legend\nax.legend()\n\n# Add annotations for clarity\nfor bar in bars1 + bars2:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 1, f'{yval}', ha='center', va='bottom', fontsize=10)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data for the bar chart\nemotions = ['Disappointment', 'Embarrassment', 'Oblivious', 'Delight', 'Excitement', 'Disapproval', 'Joy', 'Relief', 'Gratitude', 'Annoyance', 'Nervousness', 'Pride', 'Sadness', 'Unbored', 'Amusement']\nfrequencies = [7, 6, 5, 4, 3, 2, 1, 0.5, 0.3, 0.2, 0.1, 0.05, 0.03, 0.01, 0]\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Plot the bar chart\nbars = ax.bar(emotions, frequencies, color='skyblue')\n\n# Add labels and title\nax.set_xlabel('Emotion')\nax.set_ylabel('Frequency (%)')\nax.set_title('Emotion Frequency Distribution')\n\n# Rotate x-axis labels for better readability\nplt.xticks(rotation=45)\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=.25)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_60.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ncategories = ['FMLP-Rec', 'BERT4Rec', 'SASRec', 'CaseR', 'GRU4Rec']\nvalues = [19.7, 4.8, -8.5, -15.9, -19.7]\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Define colors and patterns for each bar\ncolors = ['#FF6347', '#FFD700', '#FF4500', '#8B0000', '#2F4F4F']\npatterns = ['/', '\\\\', '|', '-', '+']\n\n# Plot the bars with patterns\nbars = ax.bar(categories, values, color=colors)\n\n# Add patterns to the bars\nfor bar, pattern in zip(bars, patterns):\n    bar.set_hatch(pattern)\n\n# Set labels and title\nax.set_xlabel('Categories', fontsize=12)\nax.set_ylabel('Yelp', fontsize=12)\nax.set_title('Comparison of Categories on Yelp', fontsize=14, fontweight='bold')\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.7)\n\n# Annotate each bar with its value\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.5, f'{yval:.1f}', ha='center', va='bottom', fontsize=10)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_61.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the bar chart\ncategories = ['Patents Filed', 'Research Investment', 'Smartphone Usage', 'Internet Penetration']\nvalues = [1000, 2000, 3000, 4000]\ncolors = ['#FF6F61', '#88B04B', '#7DCEA0', '#5DADE2']\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Plot the bar chart with customized colors and edge color\nbars = ax.bar(categories, values, color=colors, edgecolor='black')\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.7)\n\n# Set labels and title with enhanced font properties\nax.set_xlabel('Categories', fontsize=12, fontweight='bold')\nax.set_ylabel('Values', fontsize=12, fontweight='bold')\nax.set_title('Comparison of Categories', fontsize=14, fontweight='bold')\n\n# Annotate each bar with its value\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 100, f'{yval}', ha='center', va='bottom', fontsize=10)\n\n# Customize the legend\nax.legend(['Internet Penetration (%)', 'Smartphone Usage (%)', 'Research Investment (%)', 'Patents Filed (%)'], loc='upper left')\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_62.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the bar chart\ncategories = ['Greeting', 'Request', 'Criticism', 'Apology', 'Persuasion', 'Thanking', 'Leaving-taking']\nsynthetic_data = [12, 35, 28, 15, 18, 14, 16]\nhuman_data = [18, 32, 15, 8, 20, 22, 12]\n\n# Set the width of the bars\nbar_width = 0.35\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Plot the data\nbars1 = ax.bar(categories, synthetic_data, bar_width, label='Synthetic data', color='skyblue')\nbars2 = ax.bar([i + bar_width for i in range(len(categories))], human_data, bar_width, label='Human-authored data', color='orange')\n\n# Add labels and title\nax.set_xlabel('Synthetic data')\nax.set_ylabel('Human-authored data')\nax.set_title('Comparison of Synthetic and Human-authored Data')\nax.set_xticks([i + bar_width / 2 for i in range(len(categories))])\nax.set_xticklabels(categories)\nax.legend()\n\n# Add value annotations on top of each bar\nfor bar in bars1 + bars2:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.5, f'{yval}%', ha='center', va='bottom')\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_63.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ncategories = ['Attack on Titan', 'Game of Thrones', 'The Count of Monte Cristo', 'Demi-Gods and Semi-Devils', 'Notre-Dame de Paris']\nscores = [\n    [0.45, 0.35, 0.25, 0.15],\n    [0.60, 0.50, 0.40, 0.30],\n    [0.30, 0.25, 0.20, 0.15],\n    [0.55, 0.45, 0.35, 0.25],\n    [0.70, 0.60, 0.50, 0.40]\n]\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Define colors for each category\ncolors = ['#0000FF', '#0000FF', '#0000FF', '#0000FF', '#0000FF']\n\n# Plot the data\nfor i, score in enumerate(scores):\n    ax.bar(categories[i], score, color=colors[i], alpha=0.7, label=f'Time {i*10}')\n\n# Set labels and title\nax.set_xlabel('Categories')\nax.set_ylabel('Scores')\nax.set_title('Scores by Category Over Time')\n\n# Add a legend\nax.legend(title='Time')\n\n# Set x-ticks rotation for better readability\nplt.xticks(rotation=45)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_64.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\nregions = ['West', 'East', 'South', 'North']\nmetrics = [\n    [40.44, 54.46],\n    [25.36, 32.19, 56.03],\n    [39.63, 48.23, 92.15],\n    [32.84, 65.49]\n]\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(10.0, 7.0))\n\n# Define colors for each region\ncolors = ['#4a90e2', '#e57373', '#81c784', '#b39ddb']\n\n# Plot the data\nfor i, region in enumerate(regions):\n    ax.barh(region, metrics[i], color=colors[i], edgecolor='black', alpha=0.8, label=region)\n\n# Set labels and title\nax.set_xlabel('Air Quality Metrics (ppm)', fontsize=12)\nax.set_ylabel('Regions', fontsize=12)\nax.set_title('Air Quality Metrics by Region', fontsize=14, fontweight='bold')\n\n# Add grid lines for better readability\nax.grid(axis='x', linestyle='--', alpha=0.7)\n\n# Add a legend\nax.legend(title='Metrics', loc='upper right', fontsize=10)\n\n# Set x-axis limits\nax.set_xlim(0, 100)\n\n# Add annotations for clarity\nfor i, region in enumerate(regions):\n    for j, value in enumerate(metrics[i]):\n        ax.text(value + 1, i, f'{value:.2f}', va='center', ha='left', fontsize=10)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_65.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nconstraint_words = ['3 Constraint Words', '5 Constraint Words', '7 Constraint Words', '10 Constraint Words']\nscores_llama_default = [-2.2, -1.8, -1.6, -1.4]\nscores_llama_hag = [-2.3, -1.7, -1.6, -1.4]\nscores_vicuna_default = [-3.3, -2.2, -1.9, -1.1]\nscores_vicuna_hag = [-3.2, -2.0, -1.9, -1.1]\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Define colors for each bar\ncolors = ['#FF6F61', '#88B04B', '#F7CAC9', '#AED6F1']\n\n# Plot the bars for each constraint word count\nbar_width = 0.2\nindex = np.arange(len(constraint_words))\nbars1 = ax.bar(index, scores_llama_default, bar_width, label='LLAMA-Default', color=colors[0], edgecolor='black')\nbars2 = ax.bar(index + bar_width, scores_llama_hag, bar_width, label='LLAMA-HAG', color=colors[1], edgecolor='black')\nbars3 = ax.bar(index + 2 * bar_width, scores_vicuna_default, bar_width, label='Vicuna-Default', color=colors[2], edgecolor='black')\nbars4 = ax.bar(index + 3 * bar_width, scores_vicuna_hag, bar_width, label='Vicuna-HAG', color=colors[3], edgecolor='black')\n\n# Add labels and title\nax.set_xlabel('Scores by group and constraint word count', fontsize=12)\nax.set_ylabel('Score', fontsize=12)\nax.set_title('Scores by group and constraint word count', fontsize=14, fontweight='bold')\nax.set_xticks(index + bar_width)\nax.set_xticklabels(constraint_words, rotation=45, ha='right', fontsize=11)\n\n# Add grid lines\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.5)\n\n# Add legend\nax.legend(loc='upper right', fontsize=11)\n\n# Annotate bars with values\ndef add_labels(bars):\n    for bar in bars:\n        yval = bar.get_height()\n        ax.text(bar.get_x() + bar.get_width()/2, yval + 0.05, round(yval, 2), ha='center', va='bottom', fontsize=10)\n\nadd_labels(bars1)\nadd_labels(bars2)\nadd_labels(bars3)\nadd_labels(bars4)\n\n# Set x-axis limits\nax.set_xlim([min(index)-bar_width, max(index)+4*bar_width])\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_66.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the bar chart\ncountries = ['USA', 'China', 'Germany', 'Brazil']\ngdp_growth_2018 = [-0.5, -0.3, -0.4, -0.2]\ngdp_growth_2019 = [-0.4, -0.2, -0.3, -0.1]\ngdp_growth_2020 = [-0.3, -0.1, -0.2, 0.0]\ngdp_growth_2021 = [-0.2, 0.0, -0.1, 0.1]\n\n# Set the width of each bar\nbar_width = 0.15\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Define colors for each country\ncolors = ['#FF9999', '#66B3FF', '#99FF99', '#FFCC99']\n\n# Plot the bars for each year\nx = np.arange(len(countries))\nax.bar(x - 3*bar_width, gdp_growth_2018, bar_width, label='GDP growth 2018', color=colors[0], edgecolor='black')\nax.bar(x - 2*bar_width, gdp_growth_2019, bar_width, label='GDP growth 2019', color=colors[1], edgecolor='black')\nax.bar(x - bar_width, gdp_growth_2020, bar_width, label='GDP growth 2020', color=colors[2], edgecolor='black')\nax.bar(x, gdp_growth_2021, bar_width, label='GDP growth 2021', color=colors[3], edgecolor='black')\n\n# Add titles and labels\nax.set_title('Negative GDP Growth Rates by Country and Year', fontsize=14, fontweight='bold')\nax.set_xlabel('Country', fontsize=12)\nax.set_ylabel('GDP Growth Rate (%)', fontsize=12)\n\n# Set x-ticks and labels\nax.set_xticks(x)\nax.set_xticklabels(countries)\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.7)\n\n# Add a legend\nax.legend(title='Year', loc='upper left', fontsize=10)\n\n# Adjust layout for better spacing\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_67.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nmodels = ['GPT4V', 'OSCAR', 'LLaMA', 'BLIP2', 'BLIP1', 'Video-LLMA', 'Lavila']\nperformance = [82.5, 73.93, 31.79, 4.64, 4.64, 0.71, 0.0]\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(12.0, 8.0))\n\n# Define colors for each bar\ncolors = ['#FF6347', '#FFA500', '#90EE90', '#ADD8E6', '#FFD700', '#FF4500', '#800080']\n\n# Plot the bar chart with enhanced aesthetics\nbars = ax.bar(models, performance, color=colors, edgecolor='black', linewidth=1.2)\n\n# Add value labels on top of each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.5, f'{yval:.1f}', ha='center', va='bottom', fontsize=10, fontweight='bold')\n\n# Set title and labels with improved font properties\nax.set_title('Human Study', fontsize=16, fontweight='bold')\nax.set_xlabel('Model', fontsize=12)\nax.set_ylabel('Percentage (%)', fontsize=12)\n\n# Customize the x-axis ticks\nplt.xticks(rotation=45, ha='right')\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.7)\n\n# Adjust layout to prevent clipping of labels\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_68.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the stacked bar chart\ncategories = ['Traffic Flow', 'Accident Rate', 'Public Transport Usage', 'Road Condition']\nvalues = [\n    [50, 30, 70],  # Cars\n    [20, 20, 40],  # Buses\n    [30, 30, 30],  # Bikes\n    [15, 10, 5]    # Pedestrians\n]\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Define colors for each category\ncolors = ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728']\n\n# Plot the stacked bars\nbottom = np.zeros(len(categories))\nfor i, value in enumerate(values):\n    ax.bar(categories, value, bottom=bottom, color=colors[i], label=f'{i+1}')\n    bottom += value\n\n# Set labels and title\nax.set_xlabel('Categories')\nax.set_ylabel('Values')\nax.set_title('Stacked Bar Chart of Transportation Data')\n\n# Add a legend\nax.legend(title='Transportation Mode')\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=.25)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_69.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ncategories = ['Category A', 'Category B', 'Category C', 'Category D', 'Category E', 'Category F', 'Category G']\nsales_data = [\n    [85, 60, 45, 30, 20, 10],\n    [70, 55, 40, 35, 25, 15],\n    [65, 50, 35, 30, 20, 10],\n    [60, 45, 30, 25, 15, 5],\n    [55, 40, 25, 20, 10, 5],\n    [50, 35, 20, 15, 5, 0],\n    [45, 30, 15, 10, 5, 0]\n]\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(10.0, 7.0))\n\n# Define colors for each category\ncolors = ['#FF9999', '#FFCC99', '#FFFF99', '#B3FF99', '#99E6FF', '#FF99E6', '#C2C2F0']\n\n# Plot the stacked bar chart\nbottom = np.zeros(len(categories))\nfor i, sales in enumerate(sales_data):\n    ax.bar(categories, sales, color=colors[i], bottom=bottom, label=f'Product {chr(65 + i)} Sales')\n    bottom += sales\n\n# Add annotations to each bar\nfor i, sales in enumerate(sales_data):\n    for j, value in enumerate(sales):\n        ax.text(j, sum(sales[:j+1]), f'{value}', ha='center', va='bottom', fontsize=8)\n\n# Set labels and title\nax.set_xlabel('Product Categories')\nax.set_ylabel('Sales Units')\nax.set_title('Enhanced Stacked Bar Chart with Textures and Annotated Values')\n\n# Add a legend\nax.legend(title='Legend')\n\n# Add grid lines\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.7)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ncategories = ['SEQ', 'REPLAY', 'MTL']\nprobing_fgt = [0.83, 0.6, 0.11]\nobserved_fgt = [-9.44, -9.12, -3.51]\nfeature_embedding_distance = [-37.9, -3.67, 0.0]\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Define bar width and positions\nbar_width = 0.25\nindex = np.arange(len(categories))\n\n# Plot bars for each category\nbars1 = ax.bar(index, probing_fgt, bar_width, label='Probing FGT', color='darkgreen')\nbars2 = ax.bar(index + bar_width, observed_fgt, bar_width, label='Observed FGT', color='lightgreen')\nbars3 = ax.bar(index + 2 * bar_width, feature_embedding_distance, bar_width, label='Feature Embedding Distance', color='orange')\n\n# Add labels and title\nax.set_xlabel('Categories', fontsize=12)\nax.set_ylabel('Feature Embedding Distance (%)', fontsize=12)\nax.set_title('Feature Embedding Distance', fontsize=14, fontweight='bold')\nax.set_xticks(index + bar_width)\nax.set_xticklabels(categories)\n\n# Add grid lines\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.5)\n\n# Add legend\nax.legend()\n\n# Annotate bars with values\ndef add_value_labels(bars):\n    for bar in bars:\n        yval = bar.get_height()\n        ax.text(bar.get_x() + bar.get_width()/2, yval + 0.01, round(yval, 2), ha='center', va='bottom', fontsize=10)\n\nadd_value_labels(bars1)\nadd_value_labels(bars2)\nadd_value_labels(bars3)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_70.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the bar chart\ncategories = ['1', '2', '3', '4', '5', '6']\nscores = [10, 8, 12, 10, 6, 8]\nscore_labels = ['Score 1', 'Score 2', 'Score 3', 'Score 4', 'Score 5']\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Define colors for each category\ncolors = ['#4CAF50', '#2196F3', '#FFC107', '#9C27B0', '#00BCD4', '#FF5722']\n\n# Plot the bar chart\nbars = ax.bar(categories, scores, color=colors)\n\n# Add labels to each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.5, f'{yval}', ha='center', va='bottom')\n\n# Set title and labels\nax.set_title('Human Labeling and Agreement Bias Checking', fontsize=14, fontweight='bold')\nax.set_xlabel('Human Annotator', fontsize=12)\nax.set_ylabel('Scores', fontsize=12)\n\n# Add grid lines\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.7)\n\n# Add legend\nax.legend(bars, score_labels, title=\"Scores\", loc='upper right', fontsize=10)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_71.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ncategories = ['coreutils', 'gzip', 'scp', 'libq', 'mcf', 'omnet', 'perl']\nvalues = [95, 85, 75, 65, 55, 45, 35]\ncolors = ['#008000', '#FFFF00', '#0000FF']\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(8.0, 4.0))\n\n# Plot the bar chart\nbars = ax.bar(categories, values, color=colors)\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=.25)\n\n# Set labels and title\nax.set_xlabel('Categories')\nax.set_ylabel('Values')\nax.set_title('Sample Bar Chart')\n\n# Add value annotations on top of each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 1, int(yval), ha='center', va='bottom')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_72.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nlanguages = ['Bactrian-X EN', 'Lima-X DE', 'Bactrian-X FR', 'Lima-X IT', 'Bactrian-X ES']\nperformance = [3.5, 2.3, 4.4, 1.3, 0.7]\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Define colors for each bar\ncolors = ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd']\n\n# Plot the bar chart\nbars = ax.bar(languages, performance, color=colors)\n\n# Add value labels on top of each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.1, f'{yval:.1f}', ha='center', va='bottom')\n\n# Set title and labels\nax.set_title('Model Performance Improvement by Language', fontsize=14, fontweight='bold')\nax.set_xlabel('Model with Language', fontsize=12)\nax.set_ylabel('Improvement [%]', fontsize=12)\n\n# Customize the x-axis ticks\nax.set_xticks(np.arange(len(languages)))\nax.set_xticklabels(languages, rotation=45, ha='right')\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.7)\n\n# Add a legend\nax.legend(['EN', 'DE', 'FR', 'IT', 'ES'], loc='upper right', fontsize=10)\n\n# Adjust layout for better spacing\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_73.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nfiscal_quarters = np.array([1, 2, 3, 4, 5])\ndow_jones_index = np.array([0.5, 1.5, 2.2, 3.9, 4.6])\nnasdaq_index = np.array([-0.6, -0.8, 0.4, 0.0, -1.2])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Plot the Dow Jones Index\nax.bar(fiscal_quarters, dow_jones_index, color='seagreen', label='Dow Jones Index')\n\n# Plot the Nasdaq Index\nax.bar(fiscal_quarters, nasdaq_index, bottom=dow_jones_index, color='darkorange', label='Nasdaq Index')\n\n# Set labels and title\nax.set_xlabel('Fiscal Quarter')\nax.set_ylabel('Index Change (%)')\nax.set_title('Stock Market Index Changes Over Fiscal Quarters')\n\n# Add a legend\nax.legend()\n\n# Add grid lines for better readability\nax.grid(True, linestyle='--', alpha=0.7)\n\n# Set x-ticks to be more descriptive\nax.set_xticks(fiscal_quarters)\nax.set_xticklabels(['Q1', 'Q2', 'Q3', 'Q4', 'Q5'])\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_74.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\nx = np.array([17, 19, 22, 26, 28, 32, 34, 38])\ny = np.array([39.4, 35.18, 34.06, 30.84, 28.0, 24.27, 34.06, 35.0])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Plot the data with different colors and styles\nax.bar(x, y, color=['#FF9999', '#66B3FF', '#99FF99', '#FFCC99', '#FF6666', '#6699FF', '#99FF66', '#FF99FF'])\n\n# Set labels and title\nax.set_xlabel('Series Labels')\nax.set_ylabel('Reward Values')\nax.set_title('Rewards by Series')\n\n# Add grid lines for better readability\nax.grid(True, linestyle='--', alpha=0.7)\n\n# Add annotations for each bar\nfor i, v in enumerate(y):\n    ax.text(i + 1, v + 0.5, str(v), ha='center', va='bottom', fontsize=10)\n\n# Add a legend\nax.legend(['\u03bb=0.06', '\u03bb=0.08', '\u03bb=0.1'], loc='upper right')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_75.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the bar chart\ncategories = ['Truthful: Misleading = 2:0']\ntruthful_recall = [30.1]\nmisleading_recall = [57.9]\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Define colors for the bars\ncolors = ['#FF9999', '#66B3FF']\n\n# Plot the bar chart\nbars = ax.bar(categories, truthful_recall + misleading_recall, color=colors)\n\n# Add labels and title\nax.set_ylabel('Misleading Recall')\nax.set_title('Truthful:Misleading = 2:0')\n\n# Add grid lines\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.5)\n\n# Add annotations on top of each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 1, f'{yval}%', ha='center', va='bottom')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_76.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the bar chart\ncategories = ['Light Industry', 'Heavy Industry', 'Transportation', 'Residential']\ncurrent_year = [1200, 1500, 1800, 1400]\nprevious_year = [1000, 1300, 1700, 1300]\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Define colors for the bars\ncolors = ['#1f77b4', '#ff7f0e']\n\n# Plot the data with error bars\nbars = ax.bar(categories, current_year, color=colors[0], label='Current Year', edgecolor='black')\nax.bar(categories, previous_year, bottom=current_year, color=colors[1], label='Previous Year', edgecolor='black')\n\n# Add error bars to each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 100, f'{yval}', ha='center', va='bottom', fontsize=10)\n\n# Set labels and title\nax.set_xlabel('Industry Sectors', fontsize=12)\nax.set_ylabel('Pollution Emissions (thousands of metric tons)', fontsize=12)\nax.set_title('Environmental Impact by Sector', fontsize=14, fontweight='bold')\n\n# Add grid lines\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.7)\n\n# Add legend\nax.legend(loc='upper right', fontsize=10)\n\n# Add annotations\nfor i, v in enumerate(current_year):\n    ax.annotate(f'{v}', xy=(i, v), xytext=(0, 10), textcoords='offset points', ha='center', va='bottom', fontsize=10)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_77.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Average temperatures in different cities\ncities = ['Beijing', 'Shanghai', 'Guangzhou', 'Shenzhen', 'Chengdu']\ntemperatures = [12, 15, 18, 22, 19]\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(8.0, 4.0))\n\n# Plot the data with enhanced aesthetics\nbars = ax.bar(cities, temperatures, color='skyblue', edgecolor='black', linewidth=1.2)\n\n# Add title and labels with improved font sizes\nax.set_title('Average City Temperatures', fontsize=14, fontweight='bold')\nax.set_xlabel('City', fontsize=12)\nax.set_ylabel('Average Temperature (\u00b0C)', fontsize=12)\n\n# Add gridlines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='gray', alpha=0.7)\n\n# Annotate each bar with its value\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.5, f'{yval}\u00b0C', ha='center', va='bottom', fontsize=10)\n\n# Adjust layout for better spacing\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_78.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nregions = ['Region 1', 'Region 2', 'Region 3', 'Region 4']\nemissions_2020 = [180, 160, 175, 190]\nemissions_2021 = [150, 140, 165, 180]\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Define colors for the bars\ncolors = ['#FF6F61', '#85C1E9']\n\n# Plot the data\nbars = ax.bar(regions, emissions_2020, color=colors[0], label='2020 Emissions')\nax.bar(regions, emissions_2021, bottom=emissions_2020, color=colors[1], label='2021 Emissions')\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.7)\n\n# Set labels and title\nax.set_xlabel('Regions', fontsize=12)\nax.set_ylabel('Annual Pollution Emission Reductions', fontsize=12)\nax.set_title('Annual Pollution Emission Reductions', fontsize=14, fontweight='bold')\n\n# Add a legend\nax.legend()\n\n# Annotate the bars with values\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 5, f'{yval}', ha='center', va='bottom', fontsize=10)\n\n# Adjust layout for better spacing\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_79.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the bar chart\ncategories = ['Question 1', 'Question 2', 'Question 3', 'Question 4', 'Question 5']\nresponses = [\n    [26, 10, 17, 10],  # Question 1\n    [32, 10, 15, 10],  # Question 2\n    [29, 10, 15, 10],  # Question 3\n    [37, 10, 15, 10],  # Question 4\n    [35, 10, 15, 10]   # Question 5\n]\n\n# Define colors for each category\ncolors = ['#a6cee3', '#b2df8a', '#fb9a99', '#fdbf6f']\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot the data\nfor i, response in enumerate(responses):\n    ax.bar(categories, response, color=colors[i], label=f'Response {i+1}')\n\n# Set labels and title\nax.set_xlabel('Questions')\nax.set_ylabel('Percentage')\nax.set_title('Responses to Questions')\n\n# Add a legend\nax.legend(title='Responses')\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.5)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Accuracy of a machine learning model across different epochs\nepochs = np.arange(1, 11)\naccuracy = np.array([0.95, 0.97, 0.98, 0.99, 0.995, 0.998, 0.999, 0.9995, 0.9998, 0.9999])\n\n# Create a new figure with specified size\nplt.figure(figsize=(10.0, 6.0))\n\n# Plot the accuracy over epochs\nplt.bar(epochs, accuracy, color='skyblue', edgecolor='black')\n\n# Add grid lines for better readability\nplt.grid(True, linestyle='--', alpha=0.7)\n\n# Set labels and title with improved font sizes\nplt.xlabel('Top-10 super-families in training dataset', fontsize=12)\nplt.ylabel('Accuracy', fontsize=12)\nplt.title('Model Accuracy Over Epochs', fontsize=14, fontweight='bold')\n\n# Add a horizontal line at y=0.5 to indicate a threshold\nplt.axhline(y=0.5, color='red', linestyle='-', linewidth=1.5, label='Threshold')\n\n# Add a legend\nplt.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_80.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.array([3, 5, 7, 9, 11])\ny1 = np.array([0.8, 1.2, 0.5, 1.8, 0.9])\ny2 = np.array([0.6, 1.1, 0.4, 1.5, 0.7])\ny3 = np.array([0.7, 1.0, 0.3, 1.6, 0.8])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Plot the data with different styles\nax.bar(x - 0.2, y1, width=0.2, color='teal', label='LLAMA-Default')\nax.bar(x, y2, width=0.2, color='orange', label='LLAMA-HAG')\nax.bar(x + 0.2, y3, width=0.2, color='blue', label='Vicuna-Default')\n\n# Set labels and title\nax.set_xlabel('Num of Constraint Words')\nax.set_ylabel('Score')\nax.set_title('Taboo')\n\n# Add grid lines for better readability\nax.yaxis.grid(True)\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_81.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the bar chart\ncategories = ['LLaMA', 'Vicuna', 'Alpaca', 'WizardLM']\ntrue_recall = [45.3, 56.9, 53.8, 19.4]\nmisleading_recall = [30.1, 34, 40, 20]\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(8.0, 4.0))\n\n# Define colors for the bars\ncolors = ['#1f77b4', '#2ca02c', '#d62728', '#ff7f0e']\n\n# Plot the true recall bars\nax.bar(categories, true_recall, color=colors, label='True Recall')\n\n# Plot the misleading recall bars\nax.bar(categories, misleading_recall, bottom=true_recall, color=[c for c in colors if c != '#1f77b4'], label='Misleading Recall')\n\n# Set labels and title\nax.set_xlabel('Model')\nax.set_ylabel('Misleading Recall')\nax.set_title('Truthful:Misleading Recall')\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=.25)\n\n# Add legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_82.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the bar chart\ncategories = ['Convertible', 'Coupe', 'Sedan', 'SUV', 'Truck', 'Coupe New', 'Sedan New', 'Truck New', 'SUV New', 'Convertible New', 'Sedan New']\nvalues = [25, 28, 15, 22, 20, 23, 18, 17, 21, 24, 26]\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Plot the data with a color palette and edge color\nbars = ax.bar(categories, values, color=plt.cm.viridis(np.linspace(0.1, 0.9, len(categories))), edgecolor='black')\n\n# Add value labels on top of each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.5, f'{yval}', ha='center', va='bottom')\n\n# Set title and labels\nax.set_title('Probability of Improvement over VLM Image Encoder Baseline Returns')\nax.set_xlabel('Category')\nax.set_ylabel('Probability of Improvement')\n\n# Rotate x-axis labels for better readability\nplt.xticks(rotation=45)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_83.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the bar chart\nemotions = ['Disappointment', 'Joy', 'Relief', 'Gratitude', 'Annoyance', 'Nervousness', 'Pride', 'Sadness', 'Unbored', 'Amusement']\ndisappointment = [2.1, 3.0, 3.5, 3.5, 6.0, 6.0, 6.7, 7.0, 7.0, 7.6]\njoy = [3.0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\nrelief = [0, 3.0, 3.5, 3.5, 0, 0, 0, 0, 0, 0]\ngratitude = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\nannoyance = [0, 0, 0, 0, 6.0, 6.0, 6.7, 7.0, 7.0, 7.6]\nnervousness = [0, 0, 0, 0, 0, 6.0, 6.0, 6.0, 6.0, 7.6]\npride = [0, 0, 0, 0, 0, 0, 6.0, 6.0, 6.0, 7.6]\nsadness = [0, 0, 0, 0, 0, 0, 0, 7.0, 7.0, 7.6]\nunbored = [0, 0, 0, 0, 0, 0, 0, 0, 3.0, 7.6]\namusement = [0, 0, 0, 0, 0, 0, 0, 0, 0, 2.6]\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(10.0, 4.0))\n\n# Plot the data\nbars = ax.bar(emotions, disappointment, color='red', label='Disappointment')\nax.bar(emotions, joy, bottom=disappointment, color='orange', label='Joy')\nax.bar(emotions, relief, bottom=[d + j for d, j in zip(disappointment, joy)], color='yellow', label='Relief')\nax.bar(emotions, gratitude, bottom=[d + j + r for d, j, r in zip(disappointment, joy, relief)], color='green', label='Gratitude')\nax.bar(emotions, annoyance, bottom=[d + j + r + g for d, j, r, g in zip(disappointment, joy, relief, gratitude)], color='cyan', label='Annoyance')\nax.bar(emotions, nervousness, bottom=[d + j + r + g + a for d, j, r, g, a in zip(disappointment, joy, relief, gratitude, annoyance)], color='blue', label='Nervousness')\nax.bar(emotions, pride, bottom=[d + j + r + g + a + n for d, j, r, g, a, n in zip(disappointment, joy, relief, gratitude, annoyance, nervousness)], color='purple', label='Pride')\nax.bar(emotions, sadness, bottom=[d + j + r + g + a + n + p for d, j, r, g, a, n, p in zip(disappointment, joy, relief, gratitude, annoyance, nervousness, pride)], color='brown', label='Sadness')\nax.bar(emotions, unbored, bottom=[d + j + r + g + a + n + p + s for d, j, r, g, a, n, p, s in zip(disappointment, joy, relief, gratitude, annoyance, nervousness, pride, sadness)], color='gray', label='Unbored')\nax.bar(emotions, amusement, bottom=[d + j + r + g + a + n + p + s + u for d, j, r, g, a, n, p, s, u in zip(disappointment, joy, relief, gratitude, annoyance, nervousness, pride, sadness, unbored)], color='pink', label='Amusement')\n\n# Add labels and title\nax.set_xlabel('Emotion')\nax.set_ylabel('Frequency Metric 1 (%)')\nax.set_title('Emotion Frequency Distribution')\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_84.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nmovies = ['Attack on Titan', 'Game of Thrones', 'The Count of Monte Cristo', 'Demi-Gods and Semi-Devils', 'Notre-Dame de Paris']\nscores_0 = [0.45, 0.38, 0.29, 0.32, 0.41]\nscores_20 = [0.55, 0.42, 0.31, 0.37, 0.48]\nscores_40 = [0.65, 0.52, 0.41, 0.47, 0.58]\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Define colors for bars\ncolors = ['#1f77b4', '#ff7f0e', '#2ca02c']\n\n# Plot the data\nbars = ax.bar(movies, scores_0, color=colors[0], label='Score at Time 0')\nax.bar(movies, scores_20, bottom=scores_0, color=colors[1], label='Score at Time 20')\nax.bar(movies, scores_40, bottom=[x + y for x, y in zip(scores_0, scores_20)], color=colors[2], label='Score at Time 40')\n\n# Add labels and title\nax.set_xlabel('Movies')\nax.set_ylabel('Scores')\nax.set_title('Movie Scores Over Time')\nax.set_xticks(range(len(movies)))\nax.set_xticklabels(movies, rotation=45)\nax.legend()\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=.25)\n\n# Annotate each bar with its value\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.01, round(yval, 2), ha='center', va='bottom')\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_85.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the bar chart\ncountries = ['Japan', 'Australia', 'Canada', 'Germany', 'Italy', 'France', 'UK', 'USA']\ntotal_energy_consumption = [1200, 800, 1000, 1500, 900, 1100, 1300, 1400]\nelectricity_production = [1000, 700, 900, 1400, 800, 1000, 1200, 1300]\nrenewable_energy_ratio = [0.2, 0.15, 0.25, 0.3, 0.2, 0.25, 0.3, 0.35]  # Renewable energy ratio in percentage\nelectricity_consumption = [1100, 750, 950, 1450, 850, 1050, 1250, 1350]\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Define colors for the bars\ncolors = ['#FF6347', '#FFD700', '#ADD8E6', '#90EE90', '#FF6347', '#FFD700', '#ADD8E6', '#90EE90']\n\n# Plot the data\nbars = ax.bar(countries, total_energy_consumption, color=colors, label='Total Energy Consumption (10^2 PJ)')\n\n# Add labels and title\nax.set_xlabel('Country')\nax.set_ylabel('Energy Consumption')\nax.set_title('Energy Consumption by Country')\nax.legend()\n\n# Annotate each bar with its value\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 50, f'{yval}', ha='center', va='bottom')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_86.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the bar chart\ncategories = ['leave-taking', 'thanking', 'persuasion', 'apology', 'criticism', 'request', 'greeting']\nsynthetic_data = [10, 10, 10, 7, 24, 31, 8]\nhuman_authored_data = [9, 16, 15, 5, 11, 28, 16]\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Define colors for the bars\ncolors = ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd', '#8c564b', '#e377c2']\n\n# Plot the data\nbars = ax.bar(categories, synthetic_data, color=colors, label='Synthetic data')\nax.bar(categories, human_authored_data, bottom=synthetic_data, color=[c for c in colors if c != '#1f77b4'], label='Human-authored data')\n\n# Add labels and title\nax.set_xlabel('Categories')\nax.set_ylabel('Percentage')\nax.set_title('Comparison of Synthetic and Human-Authored Data')\nax.legend()\n\n# Add grid lines\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.5)\n\n# Add annotations on top of each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 1, f'{yval}%', ha='center', va='bottom', fontsize=10)\n\n# Set x-ticks rotation for better readability\nplt.xticks(rotation=45)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_87.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the bar chart\ncategories = ['Beauty', 'Yelp', 'More']\nvalues = [5.1, 6, 19.7]\nerrors = [3.0, 2.9, 4.8]\n\n# Create a new figure with specified size\nfig, axes = plt.subplots(1, 2, figsize=(10.0, 8.0))\n\n# Plot the first bar chart\nbars1 = axes[0].bar(categories, values, yerr=errors, capsize=5, color='skyblue', edgecolor='black')\n\n# Add error bars with different styles\nfor bar, error in zip(bars1, errors):\n    yval = bar.get_height()\n    axes[0].text(bar.get_x() + bar.get_width()/2, yval + error/2, f'{error}%', ha='center', va='bottom', fontsize=10)\n\n# Set labels and title for the first subplot\naxes[0].set_title('MovieLens-1M')\naxes[0].set_xlabel('Categories')\naxes[0].set_ylabel('Percentage (%)')\naxes[0].set_xticks(range(len(categories)))\naxes[0].set_xticklabels(categories)\naxes[0].grid(True, linestyle='--', alpha=0.7)\n\n# Plot the second bar chart\nbars2 = axes[1].bar(categories, values, yerr=errors, capsize=5, color='lightcoral', edgecolor='black')\n\n# Add error bars with different styles\nfor bar, error in zip(bars2, errors):\n    yval = bar.get_height()\n    axes[1].text(bar.get_x() + bar.get_width()/2, yval + error/2, f'{error}%', ha='center', va='bottom', fontsize=10)\n\n# Set labels and title for the second subplot\naxes[1].set_title('More')\naxes[1].set_xlabel('Categories')\naxes[1].set_ylabel('Percentage (%)')\naxes[1].set_xticks(range(len(categories)))\naxes[1].set_xticklabels(categories)\naxes[1].grid(True, linestyle='--', alpha=0.7)\n\n# Adjust layout for better spacing\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_88.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\ngroups = ['Vicuna-HAG', 'Vicuna-Default', 'LLAMA-HAG', 'LLAMA-Default']\nscores = [\n    [-3.2, -3.3],\n    [-2.2, -2.3],\n    [-1.8, -1.7],\n    [-0.6, -0.7]\n]\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Define colors for each group\ncolors = ['#FF9999', '#66B3FF', '#99FF99', '#FFCC99']\n\n# Plot the data\nfor i, group_scores in enumerate(scores):\n    ax.bar([i], [group_scores[0]], color=colors[i], label=f'{groups[i]}', alpha=0.7)\n    ax.bar([i], [group_scores[1]], bottom=group_scores[0], color=colors[i], alpha=0.5)\n\n# Set labels and title\nax.set_xlabel('Score by group and constraint word count')\nax.set_ylabel('Score')\nax.set_title('Scores by group and constraint word count')\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.5)\n\n# Add legend\nax.legend(title='Constraint Words', loc='upper right')\n\n# Set x-ticks to be centered between bars\nax.set_xticks(np.arange(len(groups)))\nax.set_xticklabels(groups, rotation=45, ha='right')\n\n# Adjust layout for better spacing\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_89.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data for demonstration\nx = np.arange(1, 11)\ny1 = np.array([0.75, 0.8, 0.85, 0.9, 0.95, 0.98, 0.99, 0.995, 0.998, 1.0])\ny2 = np.array([0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 0.95, 0.98, 0.99])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot the first dataset with a blue color and a dashed line style\nax.plot(x, y1, label='Accuracy', color='blue', linestyle='--', linewidth=2)\n\n# Plot the second dataset with a red color and a solid line style\nax.plot(x, y2, label='Precision', color='red', linestyle='-', linewidth=2)\n\n# Set labels for axes\nax.set_xlabel('Top-10 super-families in training dataset')\nax.set_ylabel('Scores')\n\n# Add a legend to the plot\nax.legend()\n\n# Add grid lines for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Set limits for x and y axes\nax.set_xlim(1, 10)\nax.set_ylim(0, 1.05)\n\n# Add a horizontal line at y=0.5 for reference\nax.axhline(y=0.5, color='gray', linestyle=':', linewidth=1)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ncategories = ['Type', 'Span', 'T&S', 'Spurious', 'Total']\nmanual_mapping = [50, 30, 45, 20, 80]\nllm_revision_wcot = [70, 45, 60, 30, 90]\nllm_revision_wcot = [60, 50, 55, 25, 85]\nverifner = [40, 35, 40, 15, 75]\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(9.0, 6.0))\n\n# Define colors for each bar\ncolors = ['#FF9999', '#66B3FF', '#99FF99', '#FFCC99', '#C2C2F0']\n\n# Plot the bars\nbars1 = ax.bar(categories, manual_mapping, color=colors[0], label='Manual Mapping')\nbars2 = ax.bar(categories, llm_revision_wcot, bottom=manual_mapping, color=colors[1], label='LLM-revision w/CoT')\nbars3 = ax.bar(categories, llm_revision_wcot, bottom=[x + y for x, y in zip(manual_mapping, llm_revision_wcot)], color=colors[2], label='LLM-revision w/CoT')\nbars4 = ax.bar(categories, verifner, bottom=[x + y + z for x, y, z in zip(manual_mapping, llm_revision_wcot, llm_revision_wcot)], color=colors[3], label='VeriFNER')\n\n# Add error bars\nerror = [5, 3, 4, 2, 6]\nax.errorbar(categories, manual_mapping, yerr=error, fmt='o', color='black', ecolor='gray', elinewidth=2, capsize=5)\n\n# Add title and labels\nax.set_title('GENIA', fontsize=16, fontweight='bold')\nax.set_xlabel('Error correction rate (%)', fontsize=12)\nax.set_ylabel('Categories', fontsize=12)\n\n# Add grid lines\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.5)\n\n# Add legend\nax.legend(loc='upper right', fontsize=10)\n\n# Add annotations\nfor bar in bars1:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 1, f'{yval}', ha='center', va='bottom', fontsize=10)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_90.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nmodels = ['GPT4V', 'OSCAR', 'LLaMA', 'BLIP2', 'BLIP1', 'Video-LLMA', 'Lavila']\nscores_a = [82.5, 73.93, 31.79, 4.64, 4.64, 0.71, 0.0]\nscores_b = [15.0, 10.0, 5.0, 10.0, 5.0, 15.0, 10.0]\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(12.0, 8.0))\n\n# Define colors for the bars\ncolors = ['#FF9999', '#66B3FF', '#99FF99', '#FFCC99', '#C2C2F0', '#FF99E6', '#FFCC99']\n\n# Plot the bar chart with enhanced aesthetics\nbars = ax.bar(models, scores_a, color=colors, edgecolor='black', linewidth=1.2, label='Score A')\n\n# Add a second y-axis for Score B\nax2 = ax.twinx()\nax2.bar(models, scores_b, color=[c for c in colors if c != '#FF9999'], alpha=0.5, edgecolor='black', linewidth=1.2, label='Score B')\n\n# Set labels and title with improved font sizes\nax.set_xlabel('Model', fontsize=12)\nax.set_ylabel('Score A (%)', fontsize=12)\nax2.set_ylabel('Score B (%)', fontsize=12)\nplt.title('Human Study', fontsize=14, fontweight='bold')\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.7)\nax2.yaxis.grid(False)\n\n# Annotate each bar with its value\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.5, f'{yval:.1f}%', ha='center', va='bottom', fontsize=10)\n\n# Customize the legend\nlines, labels = ax.get_legend_handles_labels()\nlines2, labels2 = ax2.get_legend_handles_labels()\nax.legend(lines + lines2, labels + labels2, loc='upper left', fontsize=10)\n\n# Adjust layout for better spacing\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_91.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\npheme_scores = [0.78, 0.82, 0.85, 0.88, 0.90]\nllm_mis_scores = [0.75, 0.78, 0.80, 0.83, 0.85]\n\n# Define labels for each bar\nlabels = ['GCN', 'RvNN', 'Hyphen', 'GET', 'LMM']\n\n# Create a new figure with specified size\nfig, axes = plt.subplots(1, 2, figsize=(10.0, 5.0))\n\n# Plot the first bar chart\naxes[0].bar(labels, pheme_scores, color=['blue', 'orange', 'red', 'green', 'purple'])\naxes[0].set_title('Pheme')\naxes[0].set_xlabel('Pheme')\naxes[0].set_ylabel('Macro F1-score')\n\n# Plot the second bar chart\naxes[1].bar(labels, llm_mis_scores, color=['blue', 'orange', 'red', 'green', 'purple'])\naxes[1].set_title('LLM-mis')\naxes[1].set_xlabel('LLM-mis')\naxes[1].set_ylabel('Macro F1-score')\n\n# Add a legend\nplt.legend(['Democratic', 'Mixed', 'Republican'], loc='upper right')\n\n# Adjust layout for better spacing\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_92.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ncategories = ['human', 'gpt4', 'gpt4-cot']\nvalues = [\n    [100, 200, 300, 400, 500, 600, 700, 800],\n    [150, 250, 350, 450, 550, 650, 750, 850],\n    [200, 300, 400, 500, 600, 700, 800, 900]\n]\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Define colors for each bar\ncolors = ['#1f77b4', '#ff7f0e', '#2ca02c']\n\n# Plot the bars\nfor i, category in enumerate(categories):\n    ax.bar(range(len(values[i])), values[i], color=colors[i], label=category)\n\n# Set labels and title\nax.set_xlabel('Count')\nax.set_ylabel('Resonance Preference')\nax.set_title('Resonance Preference Plot for rich-context')\n\n# Add grid lines\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=.25)\n\n# Add legend\nax.legend(title='Role')\n\n# Set x-ticks and labels\nax.set_xticks(range(len(values[0])))\nax.set_xticklabels(['0', '100', '200', '300', '400', '500', '600', '700'])\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_93.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the bar chart\ncategories = ['Very Low', 'Low', 'Neutral', 'High', 'Very High']\neffort_values = [20.4, 23.8, 14.3, 38.1, 7.1]\nbrainwave_values = [9.3, 16.7, 20.4, 20.4, 29.6]\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(6.0, 3.0))\n\n# Define colors for the bars\ncolors = ['#FF5733', '#FFC300', '#DAF7A6', '#4CAF50', '#33FFCE']\n\n# Plot the data\nbars_effort = ax.bar(categories, effort_values, color=colors, label='Effort')\nbars_brainwave = ax.bar(categories, brainwave_values, bottom=effort_values, color=colors, label='Brainwave')\n\n# Add labels and title\nax.set_xlabel('Categories')\nax.set_ylabel('Percentage')\nax.set_title('Eye Movement')\nax.legend()\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.5)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_94.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data for plotting\nx = np.linspace(0.5, 1.2, 10)\ny1 = np.array([10, 20, 30, 40, 50, 60, 70, 80, 90, 100])\ny2 = np.array([15, 25, 35, 45, 55, 65, 75, 85, 95, 105])\n\n# Create a new figure with a larger size for better visibility\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10.0, 6.0), sharey=True)\n\n# Plot the first subplot\nax1.plot(x, y1, label='Ours', color='red', linestyle='-', linewidth=2, marker='o')\nax1.plot(x, y2, label='Saliency-based Sampling', color='blue', linestyle='--', linewidth=2, marker='s')\n\n# Set labels and title for the first subplot\nax1.set_xlabel('Brightness', fontsize=12)\nax1.set_ylabel('Rate of Gain Change[%]', fontsize=12)\nax1.set_title('Comparison of Rate of Gain Change', fontsize=14, fontweight='bold')\nax1.set_xticks(x)\nax1.legend(loc='upper left', fontsize=10)\n\n# Plot the second subplot\nax2.plot(x, y1, label='Ours', color='red', linestyle='-', linewidth=2, marker='o')\nax2.plot(x, y2, label='Saliency-based Sampling', color='blue', linestyle='--', linewidth=2, marker='s')\n\n# Set labels and title for the second subplot\nax2.set_xlabel('Rotation Angle [\u00b0]', fontsize=12)\nax2.set_ylabel('Rate of Gain Change[%]', fontsize=12)\nax2.set_title('Comparison of Rate of Gain Change', fontsize=14, fontweight='bold')\nax2.set_xticks(x)\nax2.legend(loc='upper left', fontsize=10)\n\n# Adjust layout for better spacing\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_95.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nlanguages = ['Bactrian-X EN', 'Lima-X DE', 'Bactrian-X FR', 'Lima-X IT', 'Bactrian-X ES']\nimprovement = [3.5, 2.3, 4.4, 1.3, -0.7]\nlanguage_codes = ['EN', 'DE', 'FR', 'IT', 'ES']\n\n# Create a new figure with specified size\nfig, ax1 = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot the main bar chart\nbars = ax1.bar(languages, improvement, color='lightblue', edgecolor='black', linewidth=1.2)\nax1.set_ylabel('Model Performance Improvement by Language', fontsize=12, color='navy')\nax1.set_xlabel('Language', fontsize=12)\nax1.set_ylim(-5, 5)\nax1.set_yticks(np.arange(-5, 6, 1))\nax1.tick_params(axis='y', labelcolor='navy')\n\n# Add value labels on top of each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax1.text(bar.get_x() + bar.get_width()/2, yval + 0.1, f'{yval:.1f}', ha='center', va='bottom', fontsize=10, color='navy')\n\n# Create a second y-axis for language codes\nax2 = ax1.twinx()\nax2.set_yticks([])\nax2.set_yticklabels(language_codes)\n\n# Add a horizontal line at y=0\nax1.axhline(0, color='black', linewidth=1.2, linestyle='--')\n\n# Set title\nplt.title('Model Performance Improvement by Language', fontsize=14, fontweight='bold')\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_96.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\ncategories = ['Random', 'Ours', 'SOTA']\nmisleading_1 = [66.3, 61.9, 53.8]\nmisleading_2 = [49.3, 45.7, 41.6]\nmisleading_3 = [48.0, 42.6, 40.5]\nmisleading_4 = [43.8, 40.2, 36.5]\nmisleading_5 = [40.5, 36.5, 30.6]\n\n# Create a new figure with specified size\nfig, axes = plt.subplots(2, 2, figsize=(8.0, 8.0))\n\n# Plot the first subplot\naxes[0, 0].bar(categories, misleading_1, color='blue')\naxes[0, 0].set_title('Truthful:Misleading = 2:0')\n\n# Plot the second subplot\naxes[0, 1].bar(categories, misleading_2, color='blue')\naxes[0, 1].set_title('Truthful:Misleading = 2:1')\n\n# Plot the third subplot\naxes[1, 0].bar(categories, misleading_3, color='blue')\naxes[1, 0].set_title('Truthful:Misleading = 2:2')\n\n# Plot the fourth subplot\naxes[1, 1].bar(categories, misleading_4, color='blue')\naxes[1, 1].set_title('Truthful:Misleading = 1:2')\n\n# Adjust layout and display the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_97.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ncategories = ['1', '2', '3', '4', '5', '6']\nscores1 = [10, 20, 30, 40, 50, 60]\nscores2 = [15, 25, 35, 45, 55, 65]\nscores3 = [12, 22, 32, 42, 52, 62]\n\n# Create a new figure with specified size\nfig, axes = plt.subplots(2, 2, figsize=(10.0, 8.0), constrained_layout=True)\n\n# Plot for Human Labeling and Agreement Bias Checking 1\naxes[0, 0].bar(categories, scores1, color='pink', label='Score Type 1')\naxes[0, 0].bar(categories, scores2, bottom=scores1, color='skyblue', label='Score Type 2')\naxes[0, 0].bar(categories, scores3, bottom=[x + y for x, y in zip(scores1, scores2)], color='lightgreen', label='Score Type 3')\naxes[0, 0].set_title('Human Labeling and Agreement Bias Checking 1')\naxes[0, 0].set_xlabel('Human Annotator')\naxes[0, 0].set_ylabel('Scores')\naxes[0, 0].legend()\n\n# Plot for Human Labeling and Agreement Bias Checking 2\naxes[0, 1].bar(categories, scores1, color='orange', label='Score Type 1')\naxes[0, 1].bar(categories, scores2, bottom=scores1, color='cyan', label='Score Type 2')\naxes[0, 1].bar(categories, scores3, bottom=[x + y for x, y in zip(scores1, scores2)], color='purple', label='Score Type 3')\naxes[0, 1].set_title('Human Labeling and Agreement Bias Checking 2')\naxes[0, 1].set_xlabel('Human Annotator')\naxes[0, 1].set_ylabel('Scores')\naxes[0, 1].legend()\n\n# Plot for Human Labeling and Agreement Bias Checking 3\naxes[1, 0].bar(categories, scores1, color='pink', label='Score Type 1')\naxes[1, 0].bar(categories, scores2, bottom=scores1, color='skyblue', label='Score Type 2')\naxes[1, 0].bar(categories, scores3, bottom=[x + y for x, y in zip(scores1, scores2)], color='lightgreen', label='Score Type 3')\naxes[1, 0].set_title('Human Labeling and Agreement Bias Checking 3')\naxes[1, 0].set_xlabel('Human Annotator')\naxes[1, 0].set_ylabel('Scores')\naxes[1, 0].legend()\n\n# Plot for Human Labeling and Agreement Bias Checking 4\naxes[1, 1].bar(categories, scores1, color='orange', label='Score Type 1')\naxes[1, 1].bar(categories, scores2, bottom=scores1, color='cyan', label='Score Type 2')\naxes[1, 1].bar(categories, scores3, bottom=[x + y for x, y in zip(scores1, scores2)], color='purple', label='Score Type 3')\naxes[1, 1].set_title('Human Labeling and Agreement Bias Checking 4')\naxes[1, 1].set_xlabel('Human Annotator')\naxes[1, 1].set_ylabel('Scores')\naxes[1, 1].legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_98.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the bar chart\nmodels = ['Model A', 'Model B', 'Model C', 'Model D', 'Model E', 'Model F', 'Model G', 'Model H', 'Model I']\ncontrastive_scores = [54.9, 71.5, 60.3, 54.5, 92.6, 7.1, 8.7, 2.0, 83.3]\nbeam_scores = [38.3, 79.2, 60.3, 56.8, 64.6, 43.8, 89.2, 96.4, 2.0]\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Define colors for the bars\ncolors = ['#4CAF50', '#FF5733']\n\n# Plot the bar chart with different styles\nbar_width = 0.35\nindex = np.arange(len(models))\n\n# Plot contrastive search scores\nbars1 = ax.bar(index, contrastive_scores, bar_width, color=colors[0], label='Contrastive Search', edgecolor='black')\n\n# Plot beam search scores\nbars2 = ax.bar(index + bar_width, beam_scores, bar_width, color=colors[1], label='Beam Search', edgecolor='black')\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.7)\n\n# Set labels and title\nax.set_xlabel('Models', fontsize=12)\nax.set_ylabel('Scores', fontsize=12)\nax.set_title('Performance Comparison by Model', fontsize=14, fontweight='bold')\nax.set_xticks(index + bar_width / 2)\nax.set_xticklabels(models, rotation=45, ha='right', fontsize=10)\n\n# Add legend\nax.legend()\n\n# Annotate each bar with its value\nfor bar in bars1:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 1, f'{yval:.1f}', ha='center', va='bottom', fontsize=10)\n\nfor bar in bars2:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 1, f'{yval:.1f}', ha='center', va='bottom', fontsize=10)\n\n# Set y-axis limits\nax.set_ylim(0, 100)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_99.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the bar chart\ncategories = ['Traffic Flow', 'Accident Rate', 'Public Transport Usage', 'Road Conditions', 'Public Satisfaction']\nvalues1 = [150.0, 180.0, 75.0, 90.0, 80.0]\nvalues2 = [80.0, 70.0, 65.0, 72.0, 60.0]\nvalues3 = [60.0, 55.0, 70.0, 72.0, 60.0]\nvalues4 = [88.0, 85.0, 80.0, 90.0, 85.0]\n\n# Create a new figure with specified size\nfig, axes = plt.subplots(2, 2, figsize=(10.0, 8.0))\n\n# Plot the first dataset\naxes[0, 0].bar(categories, values1, color='orange')\naxes[0, 0].set_title('Dataset 1')\n\n# Plot the second dataset\naxes[0, 1].bar(categories, values2, color='blue')\naxes[0, 1].set_title('Dataset 2')\n\n# Plot the third dataset\naxes[1, 0].bar(categories, values3, color='green')\naxes[1, 0].set_title('Dataset 3')\n\n# Plot the fourth dataset\naxes[1, 1].bar(categories, values4, color='yellow')\naxes[1, 1].set_title('Dataset 4')\n\n# Adjust layout for better spacing\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ncategories = ['neutral', 'yellow high', 'yellow low', 'green high', 'green low', 'blue high', 'blue low', 'red high', 'red low', 'orange high', 'orange low']\nvalues = [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Plot the data with error bars\nax.errorbar(categories, values, yerr=0.5, fmt='o-', color='black', ecolor='gray', elinewidth=2, capsize=5)\n\n# Set labels and title\nax.set_xlabel('Color')\nax.set_ylabel('SAM rating')\nax.set_title('Dominance')\n\n# Rotate x-axis labels for better readability\nplt.xticks(rotation=45)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/box_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data for plotting\nactivities = ['Gaming Duration', 'Exercise Duration', 'Reading Duration', 'Music Playtime']\ndurations = [30, 45, 60, 20]\nx = np.arange(len(activities))\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(9.0, 5.0))\n\n# Plot the bar chart\nbars = ax.bar(x, durations, color=['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728'])\n\n# Add labels and title\nax.set_xlabel('Activity')\nax.set_ylabel('Duration (minutes)')\nax.set_title('Daily Activity Durations')\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.5)\n\n# Add annotations for each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 2, f'{yval} min', ha='center', va='bottom')\n\n# Set x-ticks and labels\nax.set_xticks(x)\nax.set_xticklabels(activities)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ndata = {\n    'Llama-70b (T2TT)': [18.5, 19.0, 18.8],\n    'Llama-70b (S2TT)': [17.5, 17.8, 17.6]\n}\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Plot the data\nfor label, values in data.items():\n    ax.boxplot(values, positions=[list(data.keys()).index(label)], patch_artist=True)\n\n# Set labels and title\nax.set_xlabel('Dataset')\nax.set_ylabel('BLEU')\nax.set_title('Comparison of BLEU Scores')\n\n# Add grid for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.5)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ndata = {\n    'AlphaBeta': [4.5, 4.7, 4.9],\n    'z+': [3.2, 3.4, 3.6],\n    'Gamma(g=0.05)': [5.1, 5.3, 5.5],\n    'Gamma(g=0.1)': [4.1, 4.3, 4.5],\n    'Gamma(g=0.25)': [4.8, 5.0, 5.2]\n}\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot each dataset with different colors and markers\ncolors = ['blue', 'green', 'red', 'purple', 'orange']\nmarkers = ['o', 's', '^', 'D', 'p']\n\nfor i, (key, values) in enumerate(data.items()):\n    ax.boxplot(values, positions=[i], patch_artist=True, boxprops=dict(facecolor=colors[i], alpha=0.7),\n               medianprops=dict(color='black'), flierprops=dict(marker='o', markerfacecolor='red'),\n               whiskerprops=dict(color=colors[i]), capprops=dict(color=colors[i]),\n               showmeans=True, meanprops={'marker': markers[i], 'markerfacecolor': 'white', 'markersize': 8})\n\n# Set labels and title\nax.set_xlabel('Model')\nax.set_ylabel('(t) \u0394AF')\nax.set_title('Boxplot of Different Models')\nax.set_xticks(range(len(data)))\nax.set_xticklabels(data.keys(), rotation=45)\n\n# Add grid for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=.25)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/box_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data for demonstration\nmodels = ['SQL-Only', 'PoT', 'IC-LP', 'DAIL', 'IC-LP+PoT']\nexecution_accuracy = [0.875, 0.85, 0.825, 0.81, 0.83]\nconfidence_intervals = [\n    (0.86, 0.89), (0.84, 0.86), (0.81, 0.84), (0.80, 0.83), (0.82, 0.85)\n]\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(6.0, 5.0))\n\n# Plot the bar chart with error bars\nax.bar(models, execution_accuracy, yerr=[ci[1] - ci[0] for ci in confidence_intervals], capsize=5, color='teal')\n\n# Set labels and title\nax.set_xlabel('Model')\nax.set_ylabel('Execution Accuracy')\nax.set_title('Execution Accuracy of Different Models')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the first plot\ndata1 = [0.88, 0.87, 0.83]\nlabels1 = ['DENSE (ref)', 'Joint Multimodal Framework (ours)', 'Cine']\n\n# Data for the second plot\ndata2 = [6.91, 9.33, 9.00]\nlabels2 = ['DENSE (ref)', 'Joint Multimodal Framework (ours)', 'Cine']\n\n# Create a new figure with a larger size for better visibility\nfig, axes = plt.subplots(1, 2, figsize=(10.0, 5.0))\n\n# Plot 1: Region Classification Accuracy\naxes[0].boxplot(data1, vert=False)\nfor i, label in enumerate(labels1):\n    axes[0].text(0.8, i + 1, label, fontsize=10, ha='left', va='center')\naxes[0].set_title('Region Classification Accuracy')\naxes[0].set_xlabel('Accuracy')\n\n# Plot 2: Slice Mean Error (ms)\naxes[1].boxplot(data2, vert=False)\nfor i, label in enumerate(labels2):\n    axes[1].text(10, i + 1, label, fontsize=10, ha='left', va='center')\naxes[1].set_title('Slice Mean Error (ms)')\naxes[1].set_xlabel('Error (ms)')\n\n# Adjust layout for better spacing\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ndata = {\n    'w/o att': [1, 2, 3, 4, 5],\n    'w/o DP': [6, 7, 8, 9, 10],\n    '1xQ': [11, 12, 13, 14, 15],\n    '20xQ': [16, 17, 18, 19, 20]\n}\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Plot the data\nfor i, (key, values) in enumerate(data.items()):\n    ax.boxplot(values, positions=[i], widths=0.6, patch_artist=True,\n               boxprops=dict(facecolor='lightblue', edgecolor='black'),\n               medianprops=dict(color='red'),\n               flierprops=dict(marker='o', markerfacecolor='black'))\n\n# Set labels and title\nax.set_xlabel('Dataset')\nax.set_ylabel('Z-Score')\nax.set_title('Boxplot of Z-Scores for Different Datasets')\n\n# Add a horizontal line at the threshold\nax.axhline(y=5, color='red', linestyle='--', label='Threshold')\n\n# Set x-ticks and labels\nax.set_xticks(range(len(data)))\nax.set_xticklabels(data.keys())\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/box_16.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the bar chart\ncategories = ['REM', 'No POP', 'Separate M emb.', '4 x 4 tokenizer', 'No latent space C', 'C w/o action inputs']\nvalues = [1.2, 1.5, 1.8, 2.2, 2.5, 2.8]\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(5.0, 5.0))\n\n# Plot the bar chart\nbars = ax.bar(categories, values, color='skyblue')\n\n# Add labels and title\nax.set_xlabel('Categories')\nax.set_ylabel('Values')\nax.set_title('Mean')\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.5)\n\n# Annotate each bar with its value\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.1, f'{yval:.1f}', ha='center', va='bottom')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_17.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ndata = {\n    'Run 1': [50, 60, 70, 80, 90],\n    'Run 2': [40, 50, 60, 70, 80],\n    'Run 3': [30, 40, 50, 60, 70],\n    'Run 4': [20, 30, 40, 50, 60],\n    'Run 5': [10, 20, 30, 40, 50],\n    'Run 6': [50, 60, 70, 80, 90],\n    'Run 7': [40, 50, 60, 70, 80],\n    'Run 8': [30, 40, 50, 60, 70],\n    'Run 9': [20, 30, 40, 50, 60],\n    'Run 10': [10, 20, 30, 40, 50]\n}\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(8.0, 4.0))\n\n# Plot the boxplot\nboxplot = ax.boxplot(data.values(), patch_artist=True)\n\n# Customize the boxplot\ncolors = ['#9999ff', '#ffcc99', '#99ff99', '#ff9999', '#ccccff', '#ffcc99', '#99ff99', '#ff9999', '#ccccff', '#ffcc99']\nfor patch, color in zip(boxplot['boxes'], colors):\n    patch.set_facecolor(color)\n    patch.set_edgecolor('black')\n\n# Add horizontal grid lines\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.5)\n\n# Set labels and title\nax.set_xlabel('Runs')\nax.set_ylabel('Value')\nax.set_title('Boxplot of Runs')\n\n# Add a legend\nax.legend([boxplot['boxes'][i] for i in range(len(boxplot['boxes']))], data.keys(), loc='upper right')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_18.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data for two different plots\ndata1 = [\n    [0.1, 0.2, 0.3, 0.4],\n    [0.2, 0.3, 0.4, 0.5],\n    [0.3, 0.4, 0.5, 0.6]\n]\n\ndata2 = [\n    [0.1, 0.2, 0.3, 0.4],\n    [0.2, 0.3, 0.4, 0.5],\n    [0.3, 0.4, 0.5, 0.6]\n]\n\n# Create a new figure with specified size\nfig, axes = plt.subplots(1, 2, figsize=(10.0, 5.0))\n\n# Plot 1: Boxplot\naxes[0].boxplot(data1)\naxes[0].set_title('Boxplot')\naxes[0].set_xlabel('Categories')\naxes[0].set_ylabel('Values')\n\n# Plot 2: Violin plot\naxes[1].violinplot(data2)\naxes[1].set_title('Violin Plot')\naxes[1].set_xlabel('Categories')\naxes[1].set_ylabel('Values')\n\n# Adjust layout for better spacing\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_19.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ncategories = ['BERT Base', 'MacBERT', 'English HLM']\ndata = [\n    [0.85, 0.92, 0.78],\n    [0.88, 0.91, 0.76],\n    [0.83, 0.89, 0.77]\n]\n\n# Create a new figure with specified size\nfig, axes = plt.subplots(1, 3, figsize=(10.0, 4.0), sharey=True)\n\n# Plot each category\nfor ax, category, values in zip(axes, categories, data):\n    ax.boxplot(values, vert=False)\n    ax.set_title(category)\n    ax.set_xlabel('\u03b4 (m/s)')\n\n# Set the y-axis label for all subplots\nplt.suptitle('EME sentences', fontsize=14, fontweight='bold')\nplt.ylabel('Sentences')\n\n# Adjust layout for better spacing\nplt.tight_layout(rect=[0, 0.03, 1, 0.95])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the box plots\ndata1 = [2.5, 2.7, 2.9, 3.1, 3.3]\ndata2 = [2.4, 2.6, 2.8, 3.0, 3.2]\n\n# Create a new figure with specified size\nfig, axes = plt.subplots(2, 2, figsize=(8.0, 6.0))\n\n# Plot the first box plot\naxes[0, 0].boxplot(data1)\naxes[0, 0].set_title('Our Model')\naxes[0, 0].set_ylabel('Ratings')\n\n# Plot the second box plot\naxes[0, 1].boxplot(data2)\naxes[0, 1].set_title('NTM+CL')\naxes[0, 1].set_ylabel('Ratings')\n\n# Plot the third box plot\naxes[1, 0].boxplot(data1)\naxes[1, 0].set_title('Our Model')\naxes[1, 0].set_ylabel('Intrusion')\n\n# Plot the fourth box plot\naxes[1, 1].boxplot(data2)\naxes[1, 1].set_title('NTM+CL')\naxes[1, 1].set_ylabel('Intrusion')\n\n# Adjust layout for better spacing\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_20.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the plots\ngroup_names = ['target', 'control']\ncorrect_reaction_time = [1.2, 1.4]\ncorrect_response_ratio = [0.7, 0.8]\nreaction_time = [1.0, 1.1]\ntime_per_tap = [0.6, 0.7]\n\n# Create a new figure with a larger size for better visibility\nfig, axes = plt.subplots(2, 2, figsize=(10.0, 5.0), sharex=True, sharey=True)\n\n# Plot 1: Correct reaction time\naxes[0, 0].boxplot(correct_reaction_time)\naxes[0, 0].set_title('Correct reaction time')\naxes[0, 0].set_ylabel('Time (s)')\naxes[0, 0].set_xticks([1])\naxes[0, 0].set_xticklabels(group_names)\naxes[0, 0].scatter([1] * len(correct_reaction_time), correct_reaction_time, color='red')\n\n# Plot 2: Correct response ratio\naxes[0, 1].boxplot(correct_response_ratio)\naxes[0, 1].set_title('Correct response ratio')\naxes[0, 1].set_ylabel('Ratio')\naxes[0, 1].set_xticks([1])\naxes[0, 1].set_xticklabels(group_names)\naxes[0, 1].scatter([1] * len(correct_response_ratio), correct_response_ratio, color='orange')\n\n# Plot 3: Reaction time\naxes[1, 0].boxplot(reaction_time)\naxes[1, 0].set_title('Reaction time')\naxes[1, 0].set_ylabel('Time per tap (s)')\naxes[1, 0].set_xticks([1])\naxes[1, 0].set_xticklabels(group_names)\naxes[1, 0].scatter([1] * len(reaction_time), reaction_time, color='blue')\n\n# Plot 4: Time per tap\naxes[1, 1].boxplot(time_per_tap)\naxes[1, 1].set_title('Time per tap')\naxes[1, 1].set_ylabel('Time per tap (s)')\naxes[1, 1].set_xticks([1])\naxes[1, 1].set_xticklabels(group_names)\naxes[1, 1].scatter([1] * len(time_per_tap), time_per_tap, color='green')\n\n# Adjust layout and display the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/box_21.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data for demonstration\nmethods = ['Method A', 'Method B', 'Method C']\naccuracy_values = [0.85, 0.75, 0.65]\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(9.0, 5.0))\n\n# Plot the bar chart\nbars = ax.bar(methods, accuracy_values, color=['purple', 'blue', 'green'])\n\n# Add labels and title\nax.set_xlabel('Prediction Accuracy vD1')\nax.set_ylabel('Methods')\nax.set_title('Comparison of Prediction Methods')\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.5)\n\n# Annotate each bar with its value\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.01, f'{yval:.2f}', ha='center', va='bottom')\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/box_22.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.array([50, 100, 150, 200, 350])\ny = np.array([-0.04, -0.02, 0.00, 0.02, 0.06])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(6.0, 5.0))\n\n# Plot the data with error bars\nax.errorbar(x, y, xerr=10, yerr=0.01, fmt='o', ecolor='red', capsize=5)\n\n# Set labels and title\nax.set_xlabel('Search depth')\nax.set_ylabel('Reward')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_23.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\nactivities = ['Music Playtime', 'Reading Duration', 'Exercise Duration', 'Gaming Duration']\ndurations = [65.1, 55.7, 38.1, 29.5]\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(9.0, 5.0))\n\n# Plotting the data\nax.boxplot(durations, vert=False, patch_artist=True)\n\n# Set labels and title\nax.set_yticklabels(activities)\nax.set_xlabel('Duration (minutes)')\nax.set_title('Daily Activity Durations')\n\n# Customize box plot colors\ncolors = ['#FF9999', '#66B3FF', '#99FF99', '#FFCC99']\nfor patch, color in zip(ax.artists, colors):\n    patch.set_facecolor(color)\n\n# Add grid lines\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.7)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_24.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\ncategories = ['No Intervention', 'Low Intensity', 'High Intensity', 'Recovery', 'Environment']\nmean_values = [1.5, 2.0, 1.8, 2.2, 1.9]\nmedian_values = [1.6, 2.1, 1.7, 2.3, 1.8]\niqr_mean = [0.4, 0.3, 0.3, 0.2, 0.3]\niqr_median = [0.2, 0.2, 0.2, 0.1, 0.2]\n\n# Create a new figure with a larger size for better visibility\nfig, axes = plt.subplots(2, 2, figsize=(8.0, 8.0), constrained_layout=True)\n\n# Plot 1: Mean Value\naxes[0, 0].bar(categories, mean_values, color='skyblue', edgecolor='black')\naxes[0, 0].set_title('Mean Value')\naxes[0, 0].set_ylabel('Value')\n\n# Plot 2: Median Value\naxes[0, 1].bar(categories, median_values, color='lightgreen', edgecolor='black')\naxes[0, 1].set_title('Median Value')\naxes[0, 1].set_ylabel('Value')\n\n# Plot 3: IQR Mean\naxes[1, 0].bar(categories, iqr_mean, color='orange', edgecolor='black')\naxes[1, 0].set_title('IQR Mean')\naxes[1, 0].set_ylabel('Value')\n\n# Plot 4: IQR Median\naxes[1, 1].bar(categories, iqr_median, color='purple', edgecolor='black')\naxes[1, 1].set_title('IQR Median')\naxes[1, 1].set_ylabel('Value')\n\n# Adjust layout and show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/box_25.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\ny = np.array([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot the data with different styles\nax.plot(x, y, label='Line', color='blue', linestyle='-', linewidth=2)\nax.scatter(x, y, s=100, c='green', marker='o', alpha=0.5, label='Scatter')\n\n# Add grid lines for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Set labels and title\nax.set_xlabel('X-axis Label')\nax.set_ylabel('Y-axis Label')\nax.set_title('Sample Plot')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.array([1, 2, 3])\ny = np.array([5, 4, 3])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data with error bars\nax.errorbar(x, y, xerr=0.2, yerr=0.2, fmt='o', ecolor='black', capsize=5)\n\n# Set labels and title\nax.set_xlabel('ST_CVRP')\nax.set_ylabel('Performance Gap (%)')\nax.set_title('Comparison of Different Models')\n\n# Add grid for better readability\nax.grid(True, linestyle='--', alpha=0.7)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ndata = {\n    'REM (ours)': [0.4, 0.5, 0.6, 0.7],\n    'IRIS': [0.3, 0.4, 0.5, 0.6],\n    'STORM': [0.2, 0.3, 0.4, 0.5],\n    'TWM': [0.1, 0.2, 0.3, 0.4],\n    'DreamerV3': [0.5, 0.6, 0.7, 0.8],\n    'SimPLe': [0.3, 0.4, 0.5, 0.6]\n}\n\n# Create a new figure with a larger size for better visibility\nfig, axes = plt.subplots(1, 4, figsize=(12.0, 3.0), sharey=True)\n\n# Plot each dataset\nfor ax, (title, values) in zip(axes, data.items()):\n    ax.scatter(values, np.arange(len(values)), color='blue', alpha=0.7)\n    ax.set_title(title)\n    ax.set_xlabel('Human Normalized Score')\n    ax.set_ylabel('Sample Index')\n\n# Add a horizontal line for reference\nfor ax in axes:\n    ax.axhline(y=0.5, color='black', linestyle='--', linewidth=0.5)\n\n# Adjust layout and show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/box_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ndata = {\n    'SOCP Learning (Proposed)': [25, 30, 35, 40, 45, 50],\n    'SOCP No Learning': [15, 20, 25, 30, 35, 40],\n    'FMPC': [10, 15, 20, 25, 30, 35]\n}\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data using box plots\nax.boxplot(data.values(), patch_artist=True)\n\n# Set labels and title\nax.set_xlabel('Angular Frequency [rad/s]')\nax.set_ylabel('Thrust Angle [\u00b0]')\nax.set_title('Thrust Angle vs Angular Frequency')\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.7)\nax.xaxis.grid(False)\n\n# Add a horizontal line at y=0 for reference\nax.axhline(y=0, color='black', linewidth=0.5)\n\n# Add a legend\nax.legend(data.keys(), loc='upper right')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nmethods = ['Perfect', 'GMM (25%-75%)', 'GML (25%-75%)', 'AO (25%-75%)']\nx = np.array([0, -10, -10, 0])\ny = np.array([4, 9, 8, 7])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data with error bars\nax.errorbar(x, y, xerr=0.5, yerr=0.5, fmt='o', capsize=5, ecolor='gray', elinewidth=1, markeredgewidth=2)\n\n# Set labels and title\nax.set_xlabel('CEE (dB)')\nax.set_ylabel('SE (bps/Hz)')\nax.set_title('Method')\n\n# Add a legend\nax.legend(['GMM (25%-75%)', 'GML (25%-75%)', 'AO (25%-75%)'], loc='upper right')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data for plotting\nx = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\ny1 = np.array([10, 20, 25, 30, 40, 50, 60, 70, 80, 90])\ny2 = np.array([15, 25, 35, 45, 55, 65, 75, 85, 95, 105])\ny3 = np.array([5, 15, 25, 35, 45, 55, 65, 75, 85, 95])\n\n# Create a new figure with specified size\nfig, axes = plt.subplots(1, 3, figsize=(25.0, 8.0))\n\n# Plot 1: Linear travel times\naxes[0].scatter(x, y1, color='blue', label='Linear')\naxes[0].set_title('Linear travel times')\naxes[0].set_xlabel('X-axis')\naxes[0].set_ylabel('Y-axis')\naxes[0].legend()\n\n# Plot 2: Exponential travel times\naxes[1].scatter(x, y2, color='red', label='Exponential')\naxes[1].set_title('Exponential travel times')\naxes[1].set_xlabel('X-axis')\naxes[1].set_ylabel('Y-axis')\naxes[1].legend()\n\n# Plot 3: Sigmoidal travel times\naxes[2].scatter(x, y3, color='green', label='Sigmoidal')\naxes[2].set_title('Sigmoidal travel times')\naxes[2].set_xlabel('X-axis')\naxes[2].set_ylabel('Y-axis')\naxes[2].legend()\n\n# Adjust layout for better spacing\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ndata = {\n    'Only WSI Modality': [0.85, 0.90, 0.88, 0.87, 0.86],\n    'Only CNV Modality': [0.82, 0.84, 0.83, 0.81, 0.80],\n    'WSI+CNV Modality': [0.92, 0.95, 0.93, 0.94, 0.91]\n}\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(5.0, 5.0))\n\n# Define colors for each group\ncolors = ['#1f77b4', '#2ca02c', '#ff7f0e']\n\n# Plot the boxplots\nboxplots = ax.boxplot(data.values(), patch_artist=True)\n\n# Customize the boxplot appearance\nfor i, box in enumerate(boxplots['boxes']):\n    box.set(facecolor=colors[i], edgecolor='black')\n\n# Add horizontal grid lines\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.7)\n\n# Set labels and title\nax.set_xticklabels(data.keys())\nax.set_ylabel('AUC')\nax.set_title('AUC of Different Modality Combinations')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data for two different conditions\ncondition1 = np.array([22.5, 23.0, 22.8, 22.6, 23.2])\ncondition2 = np.array([20.1, 19.8, 19.7, 19.9, 20.0])\n\n# Create a new figure with a larger size for better visibility\nfig, axes = plt.subplots(1, 2, figsize=(10.0, 5.0), sharey=True)\n\n# Plot the first condition\naxes[0].boxplot(condition1, vert=False, patch_artist=True, boxprops=dict(facecolor='lightblue', edgecolor='black'))\naxes[0].scatter([np.median(condition1)] * len(condition1), range(len(condition1)), color='red', zorder=5)\naxes[0].set_title('0.25 HIAR')\naxes[0].set_xlabel('PSNR (dB)')\naxes[0].set_ylabel('SNR (dB)')\n\n# Plot the second condition\naxes[1].boxplot(condition2, vert=False, patch_artist=True, boxprops=dict(facecolor='lightgreen', edgecolor='black'))\naxes[1].scatter([np.median(condition2)] * len(condition2), range(len(condition2)), color='blue', zorder=5)\naxes[1].set_title('0.1 HIAR')\naxes[1].set_xlabel('PSNR (dB)')\n\n# Enhance the layout\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/contour_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(10.0, 6.0))\n\n# Define the data for the plot\nx = np.linspace(-80, 80, 100)\ny = np.linspace(-80, 80, 100)\nX, Y = np.meshgrid(x, y)\nZ = np.sin(X / 20) * np.cos(Y / 20)\n\n# Plot the data using contourf\nplt.contourf(X, Y, Z, cmap='coolwarm', alpha=0.8)\n\n# Add a color bar to the plot\ncbar = plt.colorbar()\ncbar.set_label('Intensity')\n\n# Set labels and title\nplt.xlabel('X-axis')\nplt.ylabel('Y-axis')\nplt.title('T-SNE plot for the output variable Y3')\n\n# Add a legend\nplt.legend(['Ground Truth', 'Generated'], loc='upper right')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/contour_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create data\nx1 = np.linspace(0, 1, 100)\nx2 = np.linspace(0, 1, 100)\nX1, X2 = np.meshgrid(x1, x2)\nZ = np.sin(X1 * X2)\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the contourf with a colormap\ncontourf = ax.contourf(X1, X2, Z, cmap='viridis', alpha=0.8)\n\n# Add a colorbar to the plot\ncbar = fig.colorbar(contourf, ax=ax)\ncbar.set_label('\u03bb(x, z)', rotation=270, labelpad=15)\n\n# Set labels and title\nax.set_xlabel('x1')\nax.set_ylabel('x2')\nax.set_title('Contour Plot of \u03bb(x, z)')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/contour_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Hypothetical data for demonstration purposes\nx = np.linspace(100, 160, 50)\ny1 = np.sin(x / 10) * 100 + 50  # Simulated female data\ny2 = np.sin(x / 10) * 100 + 70  # Simulated male data\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Plot the data with enhanced styling\nax.plot(x, y1, label='Female', color='blue', linestyle='-', linewidth=2, marker='o', markersize=4)\nax.plot(x, y2, label='Male', color='red', linestyle='--', linewidth=2, marker='s', markersize=4)\n\n# Set labels and title with improved font sizes\nax.set_xlabel('SBP (mmHg)', fontsize=12)\nax.set_ylabel('DBP (mmHg)', fontsize=12)\nax.set_title('Blood Pressure Comparison', fontsize=14, fontweight='bold')\n\n# Add grid for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5, alpha=0.7)\n\n# Customize ticks\nax.set_xticks(np.arange(100, 161, 10))\nax.set_yticks(np.arange(50, 101, 10))\n\n# Add a legend with a shadow effect\nax.legend(loc='upper left', fontsize=10, shadow=True)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/contour_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create data for a more complex plot\nx = np.linspace(-4, 4, 100)\ny = np.sin(x) * np.exp(-0.1 * x**2)\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Plot the data with enhanced styling\nax.plot(x, y, color='blue', linewidth=2, linestyle='-', marker='o', markersize=5, label='Sine Wave')\n\n# Add grid lines for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5, alpha=0.7)\n\n# Set axis limits\nax.set_xlim(-4, 4)\nax.set_ylim(-1.5, 1.5)\n\n# Add labels and title\nax.set_xlabel('X-axis')\nax.set_ylabel('Y-axis')\nax.set_title('Enhanced Sine Wave Plot')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/contour_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(6.0, 6.0))\n\n# Define the number of circles and their radii\nnum_circles = 5\nradii = np.linspace(1, 10, num_circles)\n\n# Plot concentric circles\nfor i, radius in enumerate(radii):\n    circle = plt.Circle((0, 0), radius, color=plt.cm.viridis(i / num_circles), alpha=0.7)\n    fig.gca().add_artist(circle)\n\n# Set axis limits and remove ticks for cleaner presentation\nplt.xlim(-10, 10)\nplt.ylim(-10, 10)\nplt.axis('off')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/density_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create data for demonstration\nx = np.linspace(8, 15, 100)\ny = np.linspace(8, 15, 100)\nX, Y = np.meshgrid(x, y)\nZ = np.sin(X) * np.cos(Y)\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(10.0, 3.0))\n\n# Plot the heatmap\ncax = ax.imshow(Z, cmap='coolwarm', interpolation='nearest')\n\n# Add color bar\ncbar = fig.colorbar(cax)\ncbar.set_label('Iteration')\n\n# Set labels and title\nax.set_xlabel('X')\nax.set_ylabel('Y')\nax.set_title('Heatmap of Iteration')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/density_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt  \nimport numpy as np  \n\n# Sample data\nx = np.linspace(0, 10, 100)\ny = np.sin(x)\n\n# Create a new figure\nfig = plt.figure(figsize=(8.0, 4.0))\n\n# Plot the data\nplt.plot(x, y, color='pink', linewidth=2, linestyle='-', marker='o', markersize=5)\n\n# Set labels\nplt.xlabel('X-axis')\nplt.ylabel('Y-axis')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/density_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data for the plot\nx = np.linspace(-1, 1, 100)\ny = np.exp(-x**2)\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(8.0, 4.0))\n\n# Plot the data with enhanced aesthetics\nax.plot(x, y, color='teal', linewidth=2, linestyle='-', label='Density')\n\n# Fill the area under the curve for better visual appeal\nax.fill_between(x, y, color='lightcyan', alpha=0.5)\n\n# Set labels with improved font size and style\nax.set_xlabel('Spearman Coefficient', fontsize=12, fontweight='bold')\nax.set_ylabel('Density', fontsize=12, fontweight='bold')\n\n# Add a title with enhanced font size and style\nax.set_title('KDE Plot of Spearman Coefficient Distribution', fontsize=14, fontweight='bold')\n\n# Add a legend with improved location and font size\nax.legend(loc='upper right', fontsize=10)\n\n# Enhance grid lines for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5, alpha=0.7)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/density_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create sample data for demonstration\nx = np.linspace(7, 15, 100)\ny1 = np.exp(-(x - 10)**2 / (2 * 2**2))\ny2 = np.exp(-(x - 12)**2 / (2 * 3**2))\ny3 = np.exp(-(x - 14)**2 / (2 * 1.5**2))\n\n# Plot the data\nplt.figure(figsize=(9.0, 6.0))\nplt.plot(x, y1, label='Random Bundle', color='royalblue', linestyle='-', linewidth=2)\nplt.plot(x, y2, label='Increase Price', color='pink', linestyle='--', linewidth=2)\nplt.plot(x, y3, label='Strategic (Ours)', color='lightgreen', linestyle='-.', linewidth=2)\n\n# Add a vertical line to indicate a specific point of interest\nplt.axvline(x=10, color='red', linestyle=':', linewidth=1.5, label='Reserved price p_i')\n\n# Enhance the plot with titles and labels\nplt.title('Probability Density of Different Pricing Strategies', fontsize=14, fontweight='bold')\nplt.xlabel('p', fontsize=12)\nplt.ylabel('Shape Density', fontsize=12)\n\n# Add grid lines for better readability\nplt.grid(True, which='both', linestyle='--', linewidth=0.5, alpha=0.7)\n\n# Customize ticks\nplt.xticks(fontsize=10)\nplt.yticks(fontsize=10)\n\n# Add a legend with a shadow effect\nplt.legend(loc='upper right', fontsize=10, shadow=True)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/density_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create data for demonstration\nx = np.linspace(0, 1, 100)\ny1 = np.sin(2 * np.pi * x)\ny2 = np.cos(2 * np.pi * x)\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(9.0, 6.0))\n\n# Plot the data with different styles\nax.fill_between(x, y1, color='skyblue', alpha=0.5, label='Gucci')\nax.plot(x, y1, color='royalblue', linewidth=2, linestyle='-', marker='o', markersize=4, label='Gucci')\n\nax.fill_between(x, y2, color='lightgreen', alpha=0.5, label='Chanel')\nax.plot(x, y2, color='forestgreen', linewidth=2, linestyle='--', marker='s', markersize=4, label='Chanel')\n\n# Set labels and title\nax.set_xlabel('Density', fontsize=12)\nax.set_ylabel('Value', fontsize=12)\nax.set_title('Comparison of Two Functions', fontsize=14, fontweight='bold')\n\n# Add grid lines for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5, alpha=0.7)\n\n# Add a legend with a shadow effect\nax.legend(loc='upper right', fontsize=10, shadow=True)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nnames = ['Deep Ens.', 'Dropout', 'Laplace', 'SNP', 'HET-XL', 'Baseline', 'GP', 'Shallow Ens.', 'DUQ', 'Corr. Pred.']\nlog_probabilities = [-0.500, -0.394, -0.443, -0.531, -0.539, -0.541, -0.543, -0.552, -0.590, -0.819]\ndistributions = [0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000]\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Plot the bar chart\nbars = ax.bar(names, log_probabilities, color='green', edgecolor='black')\n\n# Add error bars\nax.errorbar(range(len(names)), log_probabilities, yerr=distributions, fmt='o', color='black', ecolor='gray', elinewidth=1, capsize=5)\n\n# Set labels and title\nax.set_xlabel('Names')\nax.set_ylabel('Log Probability')\nax.set_title('Comparison of Log Probabilities')\n\n# Rotate x-axis labels for better readability\nplt.xticks(rotation=45, ha='right')\n\n# Add grid lines\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.5)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.array([1, 2, 4, 8])\ny = np.array([5, 6, 7, 6])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data with different colors and styles\nax.bar(x, y, color=['#1f77b4', '#2ca02c', '#ff7f0e', '#d62728'], edgecolor='black')\n\n# Set labels and title\nax.set_xlabel('Number of experts')\nax.set_ylabel('IQM Human Normalized Score')\nax.set_title('Expert dimension')\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.5)\n\n# Add legend\nax.legend(['Baseline', 'SoftMoE (unchanged)', 'SoftMoE (\u2202 NumExperts)'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.array([1, 2, 3])\ny1 = np.array([0.748, 0.762, 0.709])\ny2 = np.array([0.759, 0.748, 0.687])\ny3 = np.array([0.78, 0.713, 0.713])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Plot the data with different styles and colors\nax.bar(x - 0.2, y1, width=0.2, color='skyblue', edgecolor='black', label='Baseline 1')\nax.bar(x, y2, width=0.2, color='salmon', edgecolor='black', label='Baseline 2')\nax.bar(x + 0.2, y3, width=0.2, color='lightgreen', edgecolor='black', label='FedMM')\n\n# Set labels and title\nax.set_xlabel('Hospital')\nax.set_ylabel('Accuracy')\nax.set_title('Accuracy by hospital and method')\nax.set_xticks(x)\nax.set_xticklabels(['Hospital 1', 'Hospital 2', 'Hospital 3'])\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.5)\n\n# Add legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the bar chart\nx = np.arange(4)\ny1 = [0, -10, 0, -10]\ny2 = [-10, 0, -10, 0]\ny3 = [0, -10, 0, -10]\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Plot the data with different colors and styles\nax.bar(x, y1, color='orange', label='GPT-4 Buyer (valuation 40)')\nax.bar(x, y2, bottom=y1, color='teal', label='Claude-2.1 Buyer (valuation 40)')\nax.bar(x, y3, bottom=[sum(y) for y in zip(y1, y2)], color='red', label='Claude-2 Buyer (valuation 40)')\n\n# Add a second subplot\nax2 = ax.twinx()\nax2.bar(x, y1, color='blue', alpha=0.3, label='GPT-3.5 Buyer (valuation 40)')\n\n# Set labels and title\nax.set_xlabel('Sellers (valuation 60)')\nax.set_ylabel('Value')\nax.set_title('Buyer valuation by seller')\nax.set_xticks(x)\nax.set_xticklabels(['GPT-4', 'Claude-2.1', 'Claude-2', 'GPT-3.5'])\n\n# Add a legend\nax.legend(loc='upper left')\nax2.legend(loc='upper right')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the bar chart\ncategories = ['[m]', '[\u0394R]', '[\u0394R^-1]', '[none]']\nvalues = [0.96, 0.86, 0.78, 0.66]\nerrors = [0.04, 0.02, 0.03, 0.02]\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Plot the bar chart with error bars\nbars = ax.bar(categories, values, yerr=errors, capsize=5, color='gray', edgecolor='black')\n\n# Add error bars with custom line styles and colors\nfor bar, error in zip(bars, errors):\n    ax.errorbar([bar.get_x() + bar.get_width() / 2], [bar.get_height()], \n                yerr=[error], fmt='o', color='black', ecolor='black', elinewidth=1, capsize=5)\n\n# Set labels and title\nax.set_xlabel('DNN \u00d7 red (k=1)')\nax.set_ylabel('DNN \u00d7 red (k=2)')\nax.set_title('Comparison of DNN \u00d7 red')\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='gray', alpha=0.7)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data for demonstration\nx = np.arange(1, 11)\ny = np.array([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data with enhancements\nax.plot(x, y, marker='o', linestyle='-', color='b', linewidth=2, markersize=8, label='Data Line')\n\n# Set labels with improved descriptions\nax.set_xlabel('X Axis Label', fontsize=12)\nax.set_ylabel('Y Axis Label (\u0394 to no prompting)', fontsize=12)\n\n# Add a grid for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Add a legend\nax.legend(loc='upper left', fontsize=10)\n\n# Set limits for axes\nax.set_xlim(0, 11)\nax.set_ylim(-0.1, 1.1)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ncategories = ['Medium', 'Medium-replay', 'Medium-expert']\nperformance = [75, 85, 90]\nte_estimation = [65, 75, 80]\nqual_estimation = [70, 80, 85]\ndiff_stitch = [60, 70, 75]\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(10.0, 3.0))\n\n# Define colors for each bar\ncolors = ['#FFA500', '#FFFF00', '#0000FF']\n\n# Plot bars for each category\nbar_width = 0.2\nindex = np.arange(len(categories))\nbars1 = ax.bar(index, performance, bar_width, label='Performance', color=colors[0], edgecolor='black')\nbars2 = ax.bar(index + bar_width, te_estimation, bar_width, label='T-Estimation', color=colors[1], edgecolor='black')\nbars3 = ax.bar(index + 2*bar_width, qual_estimation, bar_width, label='Qual-Estimation', color=colors[2], edgecolor='black')\nbars4 = ax.bar(index + 3*bar_width, diff_stitch, bar_width, label='Diff-Stitch', color='blue', edgecolor='black')\n\n# Add labels and title\nax.set_xlabel('Categories', fontsize=12)\nax.set_ylabel('Scores', fontsize=12)\nax.set_title('Comparison of Different Models', fontsize=14, fontweight='bold')\nax.set_xticks(index + bar_width)\nax.set_xticklabels(categories)\nax.legend()\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.5)\n\n# Annotate each bar with its value\ndef add_labels(bars):\n    for bar in bars:\n        yval = bar.get_height()\n        ax.text(bar.get_x() + bar.get_width()/2, yval + 1, round(yval, 1), ha='center', va='bottom', fontsize=10)\n\nadd_labels(bars1)\nadd_labels(bars2)\nadd_labels(bars3)\nadd_labels(bars4)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_16.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.array([128, 256, 512, 1024, 2048, 4096])\ny = np.array([0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Plot the data with error bars\nax.errorbar(x, y, xerr=0.05, yerr=0.05, fmt='o', color='blue', ecolor='gray', elinewidth=2, capsize=5)\n\n# Set labels and title\nax.set_xlabel('Hyperparameters')\nax.set_ylabel('Metric')\nax.set_title('FashionMNIST (NEURAL)')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_17.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the bar chart\ncountries = ['Japan', 'Brazil', 'India', 'Germany', 'United States']\nvalues1 = [28, 15, 10, 30, 25]\nvalues2 = [10, 20, 15, 25, 35]\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Plot the first bar chart\nbars1 = ax.bar(countries, values1, color='purple', label='Higher Education Enrollment Rate')\n\n# Plot the second bar chart\nbars2 = ax.bar(countries, values2, bottom=values1, color='orange', label='Student-Teacher Ratio')\n\n# Add labels and title\nax.set_xlabel('Countries')\nax.set_ylabel('Values')\nax.set_title('Higher Education Enrollment Rate vs Student-Teacher Ratio')\n\n# Add a legend\nax.legend()\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.7)\n\n# Add annotations for clarity\nfor bar in bars1 + bars2:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.5, f'{yval}', ha='center', va='bottom')\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_18.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the bar chart\nregions = ['Africa', 'South America', 'North America', 'Asia', 'Europe']\nemissions = [1200, 1800, 5000, 10400, 3200]\nforest_coverage = [21, 34, 25, 38, 52]\nland_area = [10, 20, 30, 40, 50]\nenergy_consumption = [18, 28, 25, 34, 38]\nrenewable_energy_usage = [10, 20, 30, 40, 50]\n\n# Create a new figure with specified size\nfig, axes = plt.subplots(3, 1, figsize=(6.0, 9.0), sharex=True)\n\n# Plot 1: Carbon Dioxide Emissions\nbars_emissions = axes[0].bar(regions, emissions, color='lightgrey', edgecolor='black')\naxes[0].set_title('Annual Carbon Dioxide Emissions')\naxes[0].set_ylabel('Millions of Metric Tons')\n\n# Add data labels on top of each bar\nfor bar in bars_emissions:\n    yval = bar.get_height()\n    axes[0].text(bar.get_x() + bar.get_width()/2, yval + 100, f'{yval}', ha='center', va='bottom')\n\n# Plot 2: Forest Coverage Rate\nbars_forest = axes[1].bar(regions, forest_coverage, color='lightgreen', edgecolor='black')\naxes[1].set_title('Forest Coverage Rate')\naxes[1].set_ylabel('% of Land Area')\n\n# Add data labels on top of each bar\nfor bar in bars_forest:\n    yval = bar.get_height()\n    axes[1].text(bar.get_x() + bar.get_width()/2, yval + 1, f'{yval}', ha='center', va='bottom')\n\n# Plot 3: Renewable Energy Usage\nbars_renewable = axes[2].bar(regions, renewable_energy_usage, color='lightcoral', edgecolor='black')\naxes[2].set_title('Renewable Energy Usage')\naxes[2].set_xlabel('Regions')\naxes[2].set_ylabel('% of Total Energy Consumption')\n\n# Add data labels on top of each bar\nfor bar in bars_renewable:\n    yval = bar.get_height()\n    axes[2].text(bar.get_x() + bar.get_width()/2, yval + 1, f'{yval}', ha='center', va='bottom')\n\n# Adjust layout and display the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_19.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\ncategories = ['Crime Rate', 'Happiness Index', 'Social Security Coverage', 'Political Participation']\nvalues = [50, 60, 70, 80]\ncolors = ['#FF5733', '#33FF57', '#3357FF', '#FFFF33']\n\n# Create a new figure with specified size\nfig, axes = plt.subplots(3, 1, figsize=(10.0, 9.0), sharex=True)\n\n# Plotting the first subplot\naxes[0].bar(categories, values, color=colors)\naxes[0].set_title('a', fontsize=14, fontweight='bold')\naxes[0].set_ylabel('Percentage', fontsize=12)\naxes[0].grid(True, linestyle='--', alpha=0.7)\n\n# Plotting the second subplot\naxes[1].bar(categories, values, color=colors)\naxes[1].set_title('b', fontsize=14, fontweight='bold')\naxes[1].set_ylabel('Percentage', fontsize=12)\naxes[1].grid(True, linestyle='--', alpha=0.7)\n\n# Plotting the third subplot\naxes[2].bar(categories, values, color=colors)\naxes[2].set_title('c', fontsize=14, fontweight='bold')\naxes[2].set_xlabel('Metrics', fontsize=12)\naxes[2].set_ylabel('Percentage', fontsize=12)\naxes[2].grid(True, linestyle='--', alpha=0.7)\n\n# Adjust layout and display the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\njudges = ['GPT-3.5-Turbo', 'Claude 2.1', 'GPT-4-Turbo', 'Human']\nscores = [\n    [85, 90, 95, 88],  # Expert\n    [75, 80, 85, 78],  # Blind\n    [90, 95, 100, 92], # Consultancy\n    [80, 85, 90, 83]   # Debate\n]\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Define colors and patterns for each bar\ncolors = ['#FF9999', '#66B3FF', '#99FF99', '#FFCC99']\npatterns = ['/', '\\\\', '|', '-']\n\n# Plot the bars with enhanced styling\nfor i, score in enumerate(scores):\n    ax.bar(judges, score, color=colors[i], hatch=patterns[i], edgecolor='black', linewidth=1.2)\n\n# Set labels and title with improved font sizes\nax.set_xlabel('Judge', fontsize=12)\nax.set_ylabel('Judge Accuracy (%)', fontsize=12)\nax.set_title('Protocol', fontsize=14, fontweight='bold')\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.7)\n\n# Add a legend with a more descriptive title\nax.legend(['Expert', 'Blind', 'Consultancy', 'Debate', 'Interactive Consultancy', 'Interactive Debate'], title='Protocol', loc='upper right', fontsize=10)\n\n# Adjust layout for better spacing\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_20.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the plots\ncities = ['New York', 'London', 'Beijing', 'Tokyo']\nspring_avg_temp = [12, 14, 16, 18]\nautumn_avg_temp = [10, 13, 15, 17]\nspring_rainfall = [500, 600, 700, 800]\nautumn_rainfall = [400, 500, 600, 700]\nwind_speed = [3, 4, 5, 6]\nair_quality_index = [50, 60, 70, 80]\n\n# Create a new figure with a larger size for better visibility\nfig, axes = plt.subplots(2, 2, figsize=(10.0, 5.0), sharex=True)\n\n# Plot 1: Annual Average Temperature\naxes[0, 0].bar(cities, spring_avg_temp, color='orange', label='Spring')\naxes[0, 0].bar(cities, autumn_avg_temp, bottom=spring_avg_temp, color='pink', label='Autumn')\naxes[0, 0].set_title('Annual Average Temperature')\naxes[0, 0].set_ylabel('Temperature (\u00b0C)')\naxes[0, 0].legend()\n\n# Plot 2: Annual Rainfall\naxes[0, 1].bar(cities, spring_rainfall, color='green', label='Spring')\naxes[0, 1].bar(cities, autumn_rainfall, bottom=spring_rainfall, color='cyan', label='Autumn')\naxes[0, 1].set_title('Annual Rainfall')\naxes[0, 1].set_ylabel('Rainfall (mm)')\naxes[0, 1].legend()\n\n# Plot 3: Wind Speed\naxes[1, 0].bar(cities, wind_speed, color='blue', label='Wind Speed')\naxes[1, 0].set_title('Wind Speed')\naxes[1, 0].set_ylabel('Speed (m/s)')\naxes[1, 0].legend()\n\n# Plot 4: Air Quality Index\naxes[1, 1].bar(cities, air_quality_index, color='purple', label='Air Quality Index')\naxes[1, 1].set_title('Air Quality Index')\naxes[1, 1].set_ylabel('AQI')\naxes[1, 1].legend()\n\n# Adjust layout for better spacing\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_21.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\ncountries = ['Germany', 'China', 'USA', 'India', 'Brazil']\ntotal_energy_consumption = [2500, 3000, 1800, 1200, 900]\nrenewable_energy_usage = [1500, 1800, 1200, 800, 600]\n\n# Create a new figure with specified size\nfig, ax1 = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot the first bar chart on the primary y-axis\nbars1 = ax1.bar(countries, total_energy_consumption, color='purple', label='Total Energy Consumption by Country')\nax1.set_ylabel('Energy Consumption (Petajoules)', color='purple')\nax1.tick_params(axis='y', labelcolor='purple')\n\n# Create a secondary y-axis for the second bar chart\nax2 = ax1.twinx()\n\n# Plot the second bar chart on the secondary y-axis\nbars2 = ax2.bar(countries, renewable_energy_usage, color='teal', alpha=0.7, label='Renewable Energy Usage by Country')\nax2.set_ylabel('Renewable Energy Usage (%)', color='teal')\nax2.tick_params(axis='y', labelcolor='teal')\n\n# Add a title and legend\nplt.title('Total Energy Consumption by Country')\nax1.legend(loc='upper left')\nax2.legend(loc='upper right')\n\n# Add grid lines for better readability\nax1.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.7)\nax2.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.7)\n\n# Set x-ticks rotation for better readability\nplt.xticks(rotation=45)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_22.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ncategories = ['Refrigerator', 'Washing Machine', 'Dishwasher']\nvalues = [0.15, -0.10, 0.20]\nerrors = [0.05, 0.05, 0.05]\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Define colors for each bar\ncolors = ['#FF6347', '#90EE90', '#ADD8E6']\n\n# Plot the bars with error bars\nbars = ax.bar(categories, values, yerr=errors, color=colors, capsize=5)\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.5)\n\n# Set labels and title\nax.set_xlabel('Appliance Model')\nax.set_ylabel('Energy Efficiency Rating')\nax.set_title('Energy Efficiency Ratings by Appliance Model')\n\n# Add annotations for each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.01, f'{yval:.2f}', ha='center', va='bottom')\n\n# Customize the legend\nlegend_labels = ['Standard Model', 'Advanced Model', 'Optimal Model']\nax.legend(bars, legend_labels, loc='upper right')\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_23.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ncategories = ['Wind', 'Solar', 'Hydro', 'Nuclear']\nefficiency_scores = [85, 92, 90, 88]\nmaintenance_costs = [30, 25, 28, 32]\noperational_impact = [45, 40, 42, 47]\nregulatory_compliance = [55, 60, 58, 62]\nsafety_standards = [75, 70, 72, 78]\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Define colors for each category\ncolors = ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728']\n\n# Plot bars for each category\nbar_width = 0.15\nindex = np.arange(len(categories))\nbars = []\n\nfor i, (eff, maint, op_imp, reg_comp, safety) in enumerate(zip(efficiency_scores, maintenance_costs, operational_impact, regulatory_compliance, safety_standards)):\n    bars.append(ax.bar(index + i * bar_width, [eff, maint, op_imp, reg_comp, safety], width=bar_width, label=f'Category {i+1}', color=colors[i % len(colors)]))\n\n# Add labels and title\nax.set_xlabel('Energy Assessment Entity')\nax.set_ylabel('Efficiency and Cost Scores')\nax.set_title('Energy Assessment Entity')\nax.set_xticks(index + bar_width * 2)\nax.set_xticklabels(categories)\n\n# Add legend\nax.legend(bars, ['Installation Efficiency', 'Maintenance Costs', 'Operational Impact', 'Regulatory Compliance', 'Safety Standards'], loc='upper right')\n\n# Add grid lines\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.7)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_24.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the bar chart\nregions = ['North America', 'Europe', 'Asia', 'South America', 'Africa', 'Australia', 'Central America', 'Middle East', 'Southeast Asia', 'Scandinavia']\nhigh_school_graduation = [85, 90, 78, 82, 75, 88, 80, 84, 83, 86]\nhigher_education_enrollment = [95, 92, 80, 85, 78, 90, 88, 91, 89, 93]\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Define colors for the bars\ncolors = ['#4CAF50', '#FFEB3B']\n\n# Plot the data with a bar width and edge color\nbar_width = 0.35\nindex = np.arange(len(regions))\nbars1 = ax.bar(index, high_school_graduation, bar_width, color=colors[0], edgecolor='black', label='High School Graduation')\nbars2 = ax.bar(index + bar_width, higher_education_enrollment, bar_width, color=colors[1], edgecolor='black', label='Higher Education Enrollment')\n\n# Add titles and labels\nax.set_title('Educational Metrics by Region', fontsize=16, fontweight='bold')\nax.set_xlabel('Region', fontsize=12)\nax.set_ylabel('Percentage (%)', fontsize=12)\nax.set_xticks(index + bar_width / 2)\nax.set_xticklabels(regions, rotation=45, ha='right', fontsize=10)\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.7)\n\n# Add legend\nax.legend(loc='upper right', fontsize=10)\n\n# Annotate each bar with its value\nfor bar in bars1:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 1, f'{yval}', ha='center', va='bottom', fontsize=10)\n\nfor bar in bars2:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 1, f'{yval}', ha='center', va='bottom', fontsize=10)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_25.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the bar chart\nproducts = ['iPhone 13', 'Samsung S21', 'Google Pixel 6', 'OnePlus 9']\ntruthful_recall = [46.3, 57.9, 53.8, 19.4]\nmisleading_recall = [30.1, 34.0, 20.0, 20.0]\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Define colors for the bars\ncolors = ['#1f77b4', '#ff7f0e']\n\n# Plot the bar chart\nbars = ax.bar(products, truthful_recall, color=colors[0], label='Truthful Recall')\nax.bar_label(bars, padding=3)\n\n# Add a second bar chart on top of the first one\nbars = ax.bar(products, misleading_recall, bottom=truthful_recall, color=colors[1], label='Misleading Recall')\nax.bar_label(bars, padding=3)\n\n# Set labels and title\nax.set_xlabel('Products')\nax.set_ylabel('Recall Rates (%)')\nax.set_title('Comparison of Recall Rates Across Products')\n\n# Add a legend\nax.legend()\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.7)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_26.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the bar chart\ncategories = ['Support', 'Delivery', 'Product Quality', 'Returns', 'Pricing', 'Website Usability', 'Checkout Process']\nvalues = [15, 18, 20, 12, 17, 10, 8]\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the bar chart\nbars = ax.bar(categories, values, color='skyblue', edgecolor='black')\n\n# Add value labels on top of each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 1, f'{yval}%', ha='center', va='bottom', fontsize=10)\n\n# Set labels and title\nax.set_xlabel('Complaint Rates')\nax.set_ylabel('Satisfaction Scores')\nax.set_title('Customer Satisfaction by Complaint Rate')\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.7)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_27.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the bar chart\ncategories = ['Support', 'Delivery', 'Product Quality', 'Returns', 'Pricing', 'Website Usability', 'Checkout Process']\nvalues = [75, 82, 78, 85, 80, 88, 90]\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Define colors for the bars\ncolors = ['#FFD700', '#FFA500', '#FF6347', '#FF4500', '#FFB6C1', '#FFDAB9', '#F0E68C']\n\n# Plot the bar chart\nbars = ax.bar(categories, values, color=colors)\n\n# Add value labels on top of each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 1, f'{yval}%', ha='center', va='bottom', fontsize=10, fontweight='bold')\n\n# Set title and labels\nax.set_title('Customer Satisfaction by Category', fontsize=14, fontweight='bold')\nax.set_xlabel('Categories', fontsize=12)\nax.set_ylabel('Agree Rates (%)', fontsize=12)\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.7)\n\n# Customize the x-axis ticks\nax.set_xticks(np.arange(len(categories)))\nax.set_xticklabels(categories, rotation=45, ha='right')\n\n# Add a legend\nax.legend(['Agree Rates'], loc='upper right')\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_28.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ncategories = ['Watering Frequency', 'Planting Density', 'Plant Variety', 'CO2 Levels', 'Pesticides', 'Temperature', 'Fertilizer', 'Soil pH', 'Water Quality', 'Sunlight']\nvalues = [0.15, 0.12, 0.13, 0.14, 0.16, 0.17, 0.18, 0.19, 0.20, 0.21]\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Plot the bar chart\nbars = ax.bar(categories, values, color='darkgreen', edgecolor='black')\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.7)\n\n# Set labels and title\nax.set_xlabel('Environmental Factors', fontsize=12)\nax.set_ylabel('Impact on Plant Growth (\u0394 to control)', fontsize=12)\nax.set_title('Impact of Environmental Factors on Plant Growth', fontsize=14, fontweight='bold')\n\n# Add value annotations on top of each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.01, f'{yval:.2f}', ha='center', va='bottom', fontsize=10)\n\n# Rotate x-axis labels for better readability\nplt.xticks(rotation=45, ha='right')\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_29.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the bar chart\ncategories = ['Traffic Volume', 'Public Transit', 'Accident Rate']\nvalues = [250, 150, 100]\nerrors = [20, 15, 10]\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(10.0, 4.0))\n\n# Plot the bar chart with error bars\nbars = ax.bar(categories, values, yerr=errors, capsize=5, color=['green', 'blue', 'red'], edgecolor='black')\n\n# Add labels and title\nax.set_ylabel('Metric Values')\nax.set_title('City Metrics')\n\n# Annotate each bar with its value\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 5, f'{yval}', ha='center', va='bottom')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(10.0, 10.0))\n\n# Define data for plotting\nx = np.array([128, 256, 400, 512, 640])\ny = np.array([0.001, 0.001, 0.001, 0.001, 0.001])\n\n# Plot the data with specific styling\nplt.plot(x, y, marker='o', linestyle='-', color='blue', linewidth=2, markersize=8)\n\n# Set labels and title with improved font sizes\nplt.xlabel('Metric', fontsize=12)\nplt.ylabel('Hyperparameter', fontsize=12)\nplt.title('FashionMNIST (NEURAL)', fontsize=14, fontweight='bold')\n\n# Add grid lines for better readability\nplt.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Set limits for x and y axes\nplt.xlim(0, 700)\nplt.ylim(0, 0.1)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_30.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ncategories = ['City A', 'City B', 'City C', 'City D']\nair_quality_scores = [-2.3, -1.7, -1.2, -0.8]\nwater_quality_scores = [0.4, 0.6, 0.8, 0.9]\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Define colors for the bars\ncolors = ['#FF9999', '#66B3FF', '#99FF99', '#FFCC99']\n\n# Plot the bar chart\nbars = ax.bar(categories, air_quality_scores, color=colors, edgecolor='black', linewidth=1.2)\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.7)\n\n# Set labels and title\nax.set_xlabel('Environmental Impact Scores Across Cities')\nax.set_ylabel('Air Quality Score')\nax.set_title('Impact of Environmental Factors on Cities')\n\n# Add a legend\nax.legend(['Air Quality', 'Water Quality'], loc='upper right')\n\n# Annotate each bar with its value\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.1, f'{yval:.1f}', ha='center', va='bottom', fontsize=10)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nlabels = ['Wererewolf', 'Seer', 'Troll', 'Hunter', 'Villager']\nx = np.arange(len(labels))\ny1 = [84.97, 102.67, 78.22, 85.17, 90]\ny2 = [449.33, 780.67, 547.39, 612.99, 618.52]\n\n# Create a new figure with specified size\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10.0, 4.0))\n\n# Plot for y1\nbars1 = ax1.bar(x, y1, color='lightgreen', edgecolor='black')\nax1.set_title('a\\nSpeak duration of roles')\nax1.set_ylabel('Duration (s)')\nax1.set_xticks(x)\nax1.set_xticklabels(labels)\nax1.yaxis.grid(True)\n\n# Add error bars to the first plot\nfor bar in bars1:\n    height = bar.get_height()\n    ax1.annotate(f'{height:.2f}',\n                xy=(bar.get_x() + bar.get_width() / 2, height),\n                xytext=(0, 3),  # 3 points vertical offset\n                textcoords=\"offset points\",\n                ha='center', va='bottom')\n\n# Plot for y2\nbars2 = ax2.bar(x, y2, color='skyblue', edgecolor='black')\nax2.set_title('b\\nSpeak tokens of roles')\nax2.set_ylabel('Tokens')\nax2.set_xticks(x)\nax2.set_xticklabels(labels)\nax2.yaxis.grid(True)\n\n# Add error bars to the second plot\nfor bar in bars2:\n    height = bar.get_height()\n    ax2.annotate(f'{height:.2f}',\n                xy=(bar.get_x() + bar.get_width() / 2, height),\n                xytext=(0, 3),  # 3 points vertical offset\n                textcoords=\"offset points\",\n                ha='center', va='bottom')\n\n# Adjust layout for better spacing\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.array([5, 10, 20, 30, 40, 50])\ny = np.array([63.77, 64.17, 64.31, 64.98, 65.82, 65.78])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(10.0, 7.0))\n\n# Plot the data with enhanced aesthetics\nax.bar(x, y, color='skyblue', edgecolor='black', linewidth=1.2)\n\n# Set labels and title with improved font sizes and styles\nax.set_xlabel('Size of Data for Training and Validation (%)', fontsize=12, fontweight='bold')\nax.set_ylabel('True+ info (%)', fontsize=12, fontweight='bold')\nax.set_title('Comparison of True+ Info Across Different Dataset Sizes', fontsize=14, fontweight='bold')\n\n# Add grid lines for better readability\nax.grid(axis='y', linestyle='--', alpha=0.7)\n\n# Customize ticks for better readability\nax.set_xticks(x)\nax.set_xticklabels(['5%', '10%', '20%', '30%', '40%', '50%'], fontsize=10)\nax.set_yticks(np.arange(50, 70, 2))\nax.set_yticklabels(np.arange(50, 70, 2), fontsize=10)\n\n# Add annotations for each bar\nfor i, v in enumerate(y):\n    ax.text(i + 1, v + 0.5, f'{v:.2f}', ha='center', va='bottom', fontsize=10, fontweight='bold')\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\ny = np.array([0.832, 0.830, 0.828, 0.826, 0.824, 0.822, 0.820, 0.818, 0.816, 0.814, 0.812])\n\n# Create a new figure with specified size\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10.0, 5.0))\n\n# Plot the first subplot\nax1.bar(x, y, color='blue', edgecolor='black')\nax1.set_title('Out-of-domain accuracy')\nax1.set_xlabel('Model')\nax1.set_ylabel('Accuracy')\n\n# Plot the second subplot\nax2.plot(x, y, marker='o', linestyle='-', color='red')\nax2.set_title('Shift gap')\nax2.set_xlabel('Model')\nax2.set_ylabel('Gap')\n\n# Adjust layout for better spacing\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data for demonstration\ncategories = ['Initial Distribution', 'Best-of-Three', 'Final Distribution with GPT-4-Turbo', 'Final Distribution with GPT-3.5-Turbo', '0.125 Parameter-Valued Distribution']\nvalues = [0.05, 0.03, 0.6, 0.7, 0.5]\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot the bar chart\nbars = ax.bar(categories, values, color='skyblue', edgecolor='black')\n\n# Add value labels on top of each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.01, f'{yval:.2f}', ha='center', va='bottom', fontsize=10)\n\n# Set title and labels\nax.set_title('Mini Crosswords Performance', fontsize=14, fontweight='bold')\nax.set_xlabel('Categories', fontsize=12)\nax.set_ylabel('Objective Value', fontsize=12)\n\n# Customize the x-axis ticks\nax.set_xticks(np.arange(len(categories)))\nax.set_xticklabels(categories, rotation=45, ha='right', fontsize=10)\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', alpha=0.7)\n\n# Add a legend\nax.legend(['Performance'], loc='upper right', fontsize=10)\n\n# Annotate the highest bar\nmax_value = max(values)\nmax_index = values.index(max_value)\nax.annotate(f'ToT ({max_value:.3f})', xy=(max_index, max_value), xytext=(max_index, max_value + 0.1),\n             arrowprops=dict(facecolor='red', shrink=0.05), fontsize=10, color='red')\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ncategories = ['BERT', 'RoBERTa', 'DistilBERT', 'XLNet', 'Electra', 'BART', 'DeBERTa', 'Albert', 'Llama2']\nground_truth_labels = [55, 60, 58, 62, 57, 65, 59, 54, 52]\nweak_labels = [45, 50, 48, 52, 47, 55, 49, 44, 42]\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(10.0, 3.0))\n\n# Plot the data with error bars\nax.bar(categories, ground_truth_labels, color='coral', yerr=2, label='Ground-truth labels')\nax.bar(categories, weak_labels, color='skyblue', yerr=2, label='Weak labels')\n\n# Set labels and title\nax.set_xlabel('Model')\nax.set_ylabel('Accuracy (%)')\nax.set_title('Comparison of Model Accuracy')\n\n# Add grid for better readability\nax.yaxis.grid(True)\n\n# Add legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the bar chart\ncategories = ['Computational Social Science and Social Media', 'Phonology, Morphology and Word Segmentation', \n              'Information Retrieval and Text Mining', 'Machine Learning for NLP', 'Information Extraction', \n              'Discourse and Pragmatics', 'Syntax: Tagging, Chunking and Parsing']\nvalues = [1.45, 1.35, 1.25, 1.15, 1.05, 0.95, 0.85]\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Plot the bar chart\nbars = ax.bar(categories, values, color='lavender')\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.7)\n\n# Set labels and title\nax.set_xlabel('A')\nax.set_ylabel('B')\nax.set_title('Your Chart Title Here')\n\n# Add annotations to each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.05, f'{yval:.2f}', ha='center', va='bottom', fontsize=10)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorpoint_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ncategories = ['Kashmir', 'Religion', 'Crime and Justice', 'CAA', 'Pulwama-Balakot', 'Politics']\nshouting_fraction = [0.06, 0.12, 0.14, 0.13, 0.11, 0.10]\nmean_shouting_fraction = 0.12\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Plot the data with error bars\nax.errorbar(categories, shouting_fraction, yerr=0.02, fmt='o-', color='blue', ecolor='gray', elinewidth=1, capsize=5, label='Dataset mean')\n\n# Set labels and title\nax.set_xlabel('Category')\nax.set_ylabel('Shouting Fraction (Fraction of videos)')\nax.set_title('Shouting Fraction by Category')\n\n# Add a horizontal line representing the mean\nax.axhline(y=mean_shouting_fraction, color='gray', linestyle='--', linewidth=1)\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorpoint_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data for plotting\nx = np.array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\ny1 = np.array([15.49, 17.15, 16.03, 15.45, 14.24, 16.46, 15.0, 14.0, 13.0, 12.0, 11.0, 10.0, 9.0, 8.0, 7.0, 6.0, 5.0, 4.0, 3.0, 2.0, 1.0])\ny2 = np.array([19.38, 23.92, 24.64, 22.92, 20.29, 18.83, 17.5, 16.24, 15.0, 13.8, 12.6, 11.4, 10.2, 9.0, 8.0, 7.0, 6.0, 5.0, 4.0, 3.0, 2.0])\n\n# Create a new figure with specified size\nfig, axes = plt.subplots(2, 1, figsize=(6.0, 9.0))\n\n# Plot the first subplot\naxes[0].scatter(x, y1, color='red', label='Variable, Symmetric Error')\naxes[0].set_title('Variable, Symmetric Error')\naxes[0].set_xlabel('X-axis')\naxes[0].set_ylabel('Y-axis')\naxes[0].legend()\n\n# Plot the second subplot\naxes[1].scatter(x, y2, color='blue', label='Variable, Symmetric Error')\naxes[1].set_title('Variable, Symmetric Error')\naxes[1].set_xlabel('X-axis')\naxes[1].set_ylabel('Y-axis')\naxes[1].legend()\n\n# Adjust layout for better spacing\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorpoint_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ncategories = ['Politics', 'Religion', 'Kashmir', 'CAA', 'Pulwama-Balakot']\nincivility = [0.17, 0.20, 0.22, 0.24, 0.26]\nmean_incivility = [0.18, 0.21, 0.23, 0.25, 0.27]\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data with error bars\nax.errorbar(categories, incivility, yerr=0.01, fmt='o-', color='darkred', ecolor='darkblue', capsize=5, label='Dataset mean')\n\n# Set labels and title\nax.set_xlabel('Incivility (Fraction of Videos)', fontsize=12)\nax.set_ylabel('Category', fontsize=12)\nax.set_title('Incivility by Category', fontsize=14, fontweight='bold')\n\n# Add grid for better readability\nax.grid(True, linestyle='--', alpha=0.7)\n\n# Add legend\nax.legend(loc='upper right', fontsize=10)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorpoint_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.array([-19.6, -19.5, -19.4, -19.3, -19.2, -19.1])\ny = np.array([\n    [-19.353, -19.257],\n    [-19.394, -19.257],\n    [-19.404, -19.257],\n    [-19.314, -19.257],\n    [-19.362, -19.257],\n    [-19.374, -19.257]\n])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Plot the data with error bars\nfor i, (xi, yi) in enumerate(zip(x, y)):\n    ax.errorbar(xi, yi[0], yerr=yi[1] - yi[0], fmt='o', label=f'Plot {i+1}', capsize=5)\n\n# Set labels and title\nax.set_xlabel('M$_B$')\nax.set_ylabel('CC+Pantheon+')\nax.set_title('Sample Plot')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorpoint_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ncategories = ['Education', 'Religion', 'Bollywood', 'Crime and Justice', 'Farmers Protest', 'Issue Politics']\nunique_speaker_counts = [8, 12, 10, 7, 5, 4]\nunique_shouter_counts = [14, 16, 12, 9, 6, 3]\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot the data with different markers and colors\nax.scatter(categories, unique_speaker_counts, color='blue', marker='o', label='Unique speaker count mean')\nax.scatter(categories, unique_shouter_counts, color='red', marker='s', label='Unique shouter count mean')\n\n# Set labels and title\nax.set_xlabel('Category')\nax.set_ylabel('Number of speakers')\nax.set_title('Dataset unique shouter count mean')\n\n# Add a legend\nax.legend()\n\n# Add grid lines for better readability\nax.grid(True, linestyle='--', alpha=0.7)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorpoint_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ncategories = ['Kashmir', 'COVID/Lockdown', 'Sports', 'China']\nfemale_face_presence = [0.12, 0.15, 0.18, 0.22]\nmale_face_presence = [0.13, 0.14, 0.17, 0.21]\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data with error bars\nax.errorbar(categories, female_face_presence, yerr=0.02, fmt='o', color='blue', label='Dataset mean')\nax.errorbar(categories, male_face_presence, yerr=0.02, fmt='s', color='red', label='Mean')\n\n# Set labels and title\nax.set_xlabel('PULWAMA-BALAKOT')\nax.set_ylabel('Female Face presence (Fraction of videos)')\nax.set_title('Face Presence in Different Categories')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorpoint_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data for plotting\nx = np.array([1, 2, 3, 4, 5])\ny = np.array([0.5, 1.5, 2.5, 3.5, 4.5])\nyerr = np.array([[0.1, 0.2, 0.3, 0.4, 0.5], [0.05, 0.1, 0.15, 0.2, 0.25]])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(9.0, 6.0))\n\n# Plot the data with error bars\nax.errorbar(x, y, yerr=yerr, fmt='o', ecolor='black', capsize=5, elinewidth=2, markeredgewidth=2)\n\n# Set labels and title\nax.set_xlabel('X-axis')\nax.set_ylabel('Y-axis')\nax.set_title('Errorbar upper and lower limits')\n\n# Add grid for better readability\nax.grid(True, linestyle='--', alpha=0.7)\n\n# Customize the legend\nax.legend(['Standard', 'Upper limits', 'Lower limits', 'Upper and lower limits', 'Random'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorpoint_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data for plotting\nx = np.array([0, 0.5, 1, 1.5, 2, 2.5, 3, 3.5])\ny1 = np.array([100, 120, 130, 140, 150, 160, 170, 180])\ny2 = np.array([10, 20, 30, 40, 50, 60, 70, 80])\n\n# Create a new figure with a larger size for better visibility\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10.0, 4.0))\n\n# Plot the first dataset\nax1.scatter(x, y1, color='purple', label='Variable, Symmetric Error')\nax1.set_title('variable, symmetric error')\nax1.set_xlabel('X-axis')\nax1.set_ylabel('Y-axis')\nax1.legend()\n\n# Plot the second dataset\nax2.scatter(x, y2, color='green', label='Variable, Symmetric Error')\nax2.set_title('variable, symmetric error')\nax2.set_xlabel('X-axis')\nax2.set_ylabel('Y-axis')\nax2.legend()\n\n# Adjust layout for better spacing between subplots\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorpoint_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\ny = np.array([15, 17, 18, 20, 22, 24, 26, 28, 30, 32, 34])\nerror = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(10.0, 7.0))\n\n# Plot the data with error bars\nax.errorbar(x, y, yerr=error, fmt='o', ecolor='orange', capsize=5, color='green', label='errorbar')\n\n# Set labels and title\nax.set_xlabel('X-axis')\nax.set_ylabel('Y-axis')\nax.set_title('Variable, asymmetric error')\n\n# Add a horizontal line at y=25 for reference\nax.axhline(y=25, color='yellow', linestyle='--')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorpoint_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.array([0, 5, 10, 15, 20])\ny = np.array([-2.1, -2.6, -1.2, -1.0, -2.7])\nyerr = np.array([0.5, 0.4, 0.3, 0.2, 0.5])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(10.0, 7.0))\n\n# Plot the data with error bars\nax.errorbar(x, y, yerr=yerr, fmt='o', color='purple', ecolor='gray', elinewidth=2, capsize=5, label='errorbar')\n\n# Set labels and title\nax.set_xlabel('X-axis')\nax.set_ylabel('Y-axis')\nax.set_title('Variable, Asymmetric Error')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/graph_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport networkx as nx\n\n# Create a new graph\nG = nx.Graph()\n\n# Add nodes with positions\npositions = {\n    0: (0, 0),\n    1: (1, 0),\n    2: (0.5, 0.5 * (3**0.5)),\n    3: (1.5, 0.5 * (3**0.5)),\n    4: (0.5, -0.5 * (3**0.5)),\n    5: (1.5, -0.5 * (3**0.5))\n}\n\nG.add_node(0, pos=positions[0])\nG.add_node(1, pos=positions[1])\nG.add_node(2, pos=positions[2])\nG.add_node(3, pos=positions[3])\nG.add_node(4, pos=positions[4])\nG.add_node(5, pos=positions[5])\n\n# Add edges\nedges = [\n    (0, 1), (1, 2), (2, 3), (3, 4), (4, 5), (5, 0),\n    (0, 2), (1, 3), (2, 4), (3, 5), (4, 0), (5, 1)\n]\nG.add_edges_from(edges)\n\n# Draw the graph\nplt.figure(figsize=(8.0, 8.0))\nnx.draw(G, pos=positions, node_color=['purple', 'blue', 'yellow', 'orange', 'cyan', 'green'], node_size=500, font_size=10, font_weight='bold', with_labels=True, edge_color='black')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/graph_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport networkx as nx\n\n# Create a new graph\nG = nx.Graph()\n\n# Add nodes and edges to the graph\nedges = [(1, 2), (1, 3), (2, 4), (2, 5), (3, 6), (3, 7), (4, 8), (4, 9), (5, 10), (5, 11), (6, 12), (6, 13), (7, 14), (7, 15), (8, 16), (8, 17), (9, 18), (9, 19), (10, 20), (10, 21), (11, 22), (11, 23), (12, 24), (12, 25), (13, 26), (13, 27), (14, 28), (14, 29), (15, 30), (15, 31), (16, 32), (16, 33), (17, 34), (17, 35), (18, 36), (18, 37), (19, 38), (19, 39), (20, 40), (20, 41), (21, 42), (21, 43), (22, 44), (22, 45), (23, 46), (23, 47), (24, 48), (24, 49), (25, 50), (25, 51), (26, 52), (26, 53), (27, 54), (27, 55), (28, 56), (28, 57), (29, 58), (29, 59), (30, 60), (30, 61), (31, 62), (31, 63), (32, 64), (32, 65), (33, 66), (33, 67), (34, 68), (34, 69), (35, 70), (35, 71), (36, 72), (36, 73), (37, 74), (37, 75), (38, 76), (38, 77), (39, 78), (39, 79), (40, 80), (40, 81), (41, 82), (41, 83), (42, 84), (42, 85), (43, 86), (43, 87), (44, 88), (44, 89), (45, 90), (45, 91), (46, 92), (46, 93), (47, 94), (47, 95), (48, 96), (48, 97), (49, 98), (49, 99), (50, 100), (50, 101), (51, 102), (51, 103), (52, 104), (52, 105), (53, 106), (53, 107), (54, 108), (54, 109), (55, 110), (55, 111), (56, 112), (56, 113), (57, 114), (57, 115), (58, 116), (58, 117), (59, 118), (59, 119), (60, 120), (60, 121), (61, 122), (61, 123), (62, 124), (62, 125), (63, 126), (63, 127), (64, 128), (64, 129), (65, 130), (65, 131), (66, 132), (66, 133), (67, 134), (67, 135), (68, 136), (68, 137), (69, 138), (69, 139), (70, 140), (70, 141), (71, 142), (71, 143), (72, 144), (72, 145), (73, 146), (73, 147), (74, 148), (74, 149), (75, 150), (75, 151), (76, 152), (76, 153), (77, 154), (77, 155), (78, 156), (78, 157), (79, 158), (79, 159), (80, 160), (80, 161), (81, 162), (81, 163), (82, 164), (82, 165), (83, 166), (83, 167), (84, 168), (84, 169), (85, 170), (85, 171), (86, 172), (86, 173), (87, 174), (87, 175), (88, 176), (88, 177), (89, 178), (89, 179), (90, 180), (90, 181), (91, 182), (91, 183), (92, 184), (92, 185), (93, 186), (93, 187), (94, 188), (94, 189), (95, 190), (95, 191), (96, 192), (96, 193), (97, 194), (97, 195), (98, 196), (98, 197), (99, 198), (99, 199), (100, 200), (100, 201), (101, 202), (101, 203), (102, 204), (102, 205), (103, 206), (103, 207), (104, 208), (104, 209), (105, 210), (105, 211), (106, 212), (106, 213), (107, 214), (107, 215), (108, 216), (108, 217), (109, 218), (109, 219), (110, 220), (110, 221), (111, 222), (111, 223), (112, 224), (112, 225), (113, 226), (113, 227), (114, 228), (114, 229), (115, 230), (115, 231), (116, 232), (116, 233), (117, 234), (117, 235), (118, 236), (118, 237), (119, 238), (119, 239), (120, 240), (120, 241), (121, 242), (121, 243), (122, 244), (122, 245), (123, 246), (123, 247), (124, 248), (124, 249), (125, 250), (125, 251), (126, 252), (126, 253), (127, 254), (127, 255), (128, 256), (128, 257), (129, 258), (129, 259), (130, 260), (130, 261), (131, 262), (131, 263), (132, 264), (132, 265), (133, 266), (133, 267), (134, 268), (134, 269), (135, 270), (135, 271), (136, 272), (136, 273), (137, 274), (137, 275), (138, 276), (138, 277), (139, 278), (139, 279), (140, 280), (140, 281), (141, 282), (141, 283), (142, 284), (142, 285), (143, 286), (143, 287), (144, 288), (144, 289), (145, 290), (145, 291), (146, 292), (146, 293), (147, 294), (147, 295), (148, 296), (148, 297), (149, 298), (149, 299), (150, 300), (150, 301), (151, 302), (151, 303), (152, 304), (152, 305), (153, 306), (153, 307), (154, 308), (154, 309), (155, 310), (155, 311), (156, 312), (156, 313), (157, 314), (157, 315), (158, 316), (158, 317), (159, 318), (159, 319), (160, 320), (160, 321), (161, 322), (161, 323), (162, 324), (162, 325), (163, 326), (163, 327), (164, 328), (164, 329), (165, 330), (165, 331), (166, 332), (166, 333), (167, 334), (167, 335), (168, 336), (168, 337), (169, 338), (169, 339), (170, 340), (170, 341), (171, 342), (171, 343), (172, 344), (172, 345), (173, 346), (173, 347), (174, 348), (174, 349), (175, 350), (175, 351), (176, 352), (176, 353), (177, 354), (177, 355), (178, 356), (178, 357), (179, 358), (179, 359), (180, 360), (180, 361), (181, 362), (181, 363), (182, 364), (182, 365), (183, 366), (183, 367), (184, 368), (184, 369), (185, 370), (185, 371), (186, 372), (186, 373), (187, 374), (187, 375), (188, 376), (188, 377), (189, 378), (189, 379), (190, 380), (190, 381), (191, 382), (191, 383), (192, 384), (192, 385), (193, 386), (193, 387), (194, 388), (194, 389), (195, 390), (195, 391), (196, 392), (196, 393), (197, 394), (197, 395), (198, 396), (198, 397), (199, 398), (199, 399), (200, 400), (200, 401), (201, 402), (201, 403), (202, 404), (202, 405), (203, 406), (203, 407), (204, 408), (204, 409), (205, 410), (205, 411), (206, 412), (206, 413), (207, 414), (207, 415), (208, 416), (208, 417), (209, 418), (209, 419), (210, 420), (210, 421), (211, 422), (211, 423), (212, 424), (212, 425), (213, 426), (213, 427), (214, 428), (214, 429), (215, 430), (215, 431), (216, 432), (216, 433), (217, 434), (217, 435), (218, 436), (218, 437), (219, 438), (219, 439), ("}
{"file": "dataset/ori_500/graph_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(10.0, 8.0))\n\n# Define the data for the plot\nx = np.array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\ny = np.array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n\n# Plot the data\nplt.plot(x, y, 'o-', label='Data Points')\n\n# Set labels and title\nplt.xlabel('X-axis')\nplt.ylabel('Y-axis')\nplt.title('Simple Line Plot')\n\n# Add a legend\nplt.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/graph_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport networkx as nx\n\n# Create a new graph\nG = nx.Graph()\n\n# Add nodes with positions\nG.add_node(0, pos=(0, 0))\nG.add_node(1, pos=(1, 0))\nG.add_node(2, pos=(0.5, 1))\nG.add_node(3, pos=(0.5, -1))\nG.add_node(4, pos=(0.5, 0))\n\n# Add edges\nG.add_edge(0, 1)\nG.add_edge(0, 2)\nG.add_edge(0, 3)\nG.add_edge(1, 2)\nG.add_edge(1, 3)\nG.add_edge(2, 4)\nG.add_edge(3, 4)\n\n# Draw the graph\nnx.draw(G, with_labels=True, node_color='pink', edge_color='gray', node_size=1000, font_size=16, font_weight='bold')\n\n# Show the plot\nplt.figure(figsize=(10.0, 8.0))\nplt.show()\n```"}
{"file": "dataset/ori_500/graph_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the number of points and the radius of the circle\nn = 3\nradius = 1\n\n# Create a circle with a single point at the center\ncircle = plt.Circle((0, 0), radius, color='black', fill=False)\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Add the circle to the plot\nax.add_artist(circle)\n\n# Set the aspect ratio to be equal so circles look like circles\nax.set_aspect('equal')\n\n# Set the limits for the x and y axes\nax.set_xlim(-1.5, 1.5)\nax.set_ylim(-1.5, 1.5)\n\n# Add grid lines\nax.grid(True, linestyle='--', alpha=0.7)\n\n# Add annotations for clarity\nfor i in range(n):\n    angle = 2 * np.pi * i / n\n    x = radius * np.cos(angle)\n    y = radius * np.sin(angle)\n    ax.annotate(f'{i}', (x, y), textcoords=\"offset points\", xytext=(-10,10), ha='center', fontsize=12, color='red')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the heatmap\ndata = np.array([\n    [0.61, 0.74, 0.70, 0.70, 0.57],\n    [1.00, 0.69, 0.64, 0.67, 0.45],\n    [1.00, 0.77, 0.88, 0.62, 0.69],\n    [1.00, 0.72, 0.00, 0.54, 1.00]\n])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Plot the heatmap\ncax = ax.matshow(data, cmap='YlOrBr')\n\n# Add color bar\ncbar = fig.colorbar(cax)\n\n# Set labels for the axes\nax.set_xticks(np.arange(len(data[0])))\nax.set_yticks(np.arange(len(data)))\nax.set_xticklabels(['CoreNLP', 'Stanza', 'Biaffine', 'StackPointer', 'TowerParse'])\nax.set_yticklabels(['CoreNLP', 'Stanza', 'Biaffine', 'StackPointer', 'TowerParse'])\n\n# Rotate the x-axis labels for better readability\nplt.xticks(rotation=45)\n\n# Add title and axis labels\nplt.title('Heatmap of Model Performance')\nplt.xlabel('Model')\nplt.ylabel('Dataset')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the heatmap\ndata = np.array([\n    [15.7, 28.1, 2.6, 0.5, 14.5],\n    [76.0, 2.1, 0.9, 4.1, 8.1],\n    [50.8, 12.2, 0.6, 6.2, 15.5],\n    [70.0, 11.2, 0.9, 7.8, 13.9],\n    [50.3, 12.0, 0.9, 7.0, 16.3]\n])\n\n# Define labels for rows and columns\nrows = ['Villager', 'Hunter', 'Witch', 'Seer', 'Werewolf']\ncolumns = ['Voter1', 'Voter2', 'Voter3', 'Voter4', 'Voter5']\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Plot the heatmap\ncax = ax.matshow(data, cmap='coolwarm')\n\n# Add color bar\ncbar = fig.colorbar(cax)\ncbar.set_label('Percentage')\n\n# Set labels for rows and columns\nax.set_xticks(np.arange(len(columns)))\nax.set_yticks(np.arange(len(rows)))\nax.set_xticklabels(columns)\nax.set_yticklabels(rows)\n\n# Rotate x-axis labels for better readability\nplt.xticks(rotation=45)\n\n# Add title and axis labels\nplt.title('Heatmap of Votes')\nplt.xlabel('Voter')\nplt.ylabel('Vottee')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(8.0, 6.0))\n\n# Define data for the heatmap\ndata = np.array([\n    [0.1, 0.2, 0.3, 0.4, 0.5],\n    [0.6, 0.7, 0.8, 0.9, 1.0],\n    [0.1, 0.2, 0.3, 0.4, 0.5],\n    [0.6, 0.7, 0.8, 0.9, 1.0],\n    [0.1, 0.2, 0.3, 0.4, 0.5]\n])\n\n# Define labels for the x and y axes\nx_labels = ['D. Fox', 'T. Haliburton', 'M. Harless', 'H. Barnes', 'C. Metu']\ny_labels = ['Players']\n\n# Plot the heatmap\nplt.imshow(data, cmap='viridis', aspect='auto')\n\n# Set axis labels\nplt.xticks(ticks=np.arange(len(x_labels)), labels=x_labels)\nplt.yticks(ticks=np.arange(len(y_labels)), labels=y_labels)\n\n# Add color bar\ncbar = plt.colorbar()\ncbar.set_label('Color Scale')\n\n# Set title and labels\nplt.title('Heatmap of Player Performance')\nplt.xlabel('Players')\nplt.ylabel('Metrics')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create data for the heatmap\ndata = np.array([\n    [10, 20, 30, 40],\n    [5, 15, 25, 35],\n    [1, 10, 20, 30],\n    [0, 5, 15, 25]\n])\n\n# Define labels for the x and y axes\nx_labels = ['A', 'B', 'C', 'D']\ny_labels = ['X', 'Y', 'Z']\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(6.0, 5.0))\n\n# Plot the heatmap\ncax = ax.matshow(data, cmap='viridis')\n\n# Add color bar\ncbar = fig.colorbar(cax)\n\n# Set labels for the axes\nax.set_xticks(np.arange(len(x_labels)))\nax.set_yticks(np.arange(len(y_labels)))\n\n# Set labels for the ticks\nax.set_xticklabels([''] + x_labels)\nax.set_yticklabels([''] + y_labels)\n\n# Rotate the x-axis labels for better readability\nplt.xticks(rotation=90)\n\n# Add title and axis labels\nplt.title('Heatmap Example')\nplt.xlabel('Predicted category')\nplt.ylabel('Labeling function similarity')\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define data for the heatmap\ndata = np.array([\n    [10, 4, 8, 12],\n    [7, 3, 4, 16],\n    [5, 2, 4, 20]\n])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Plot the heatmap\ncax = ax.matshow(data, cmap='viridis')\n\n# Add color bar\nfig.colorbar(cax)\n\n# Set labels for the axes\nax.set_xticks(np.arange(len(data[0])))\nax.set_yticks(np.arange(len(data)))\nax.set_xticklabels(['D\\'2', 'D\\'1', 'D\\'0', '='])\nax.set_yticklabels(['LOH0', 'LOH1', 'LOH2', 'LOMLP'])\n\n# Rotate the tick labels and set their alignment.\nplt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\", rotation_mode=\"anchor\")\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the heatmap\ncategories = ['Academia', 'Agriculture', 'Construction and Real Estate', 'Corporate', 'Entertainment', \n              'Finance', 'Government', 'Hospitality', 'Legal Services', 'Life Sciences']\nsubcategories = ['Subcat1', 'Subcat2', 'Subcat3', 'Subcat4', 'Subcat5', 'Subcat6', 'Subcat7', 'Subcat8', 'Subcat9', 'Subcat10']\ndata = np.array([\n    [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0],\n    [0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 0.9],\n    [0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 0.9, 0.8],\n    [0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 0.9, 0.8, 0.7],\n    [0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 0.9, 0.8, 0.7, 0.6],\n    [0.6, 0.7, 0.8, 0.9, 1.0, 0.9, 0.8, 0.7, 0.6, 0.5],\n    [0.7, 0.8, 0.9, 1.0, 0.9, 0.8, 0.7, 0.6, 0.5, 0.4],\n    [0.8, 0.9, 1.0, 0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3],\n    [0.9, 1.0, 0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2],\n    [1.0, 0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1]\n])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(6.0, 10.0))\n\n# Plot the heatmap\ncax = ax.imshow(data, cmap='coolwarm', aspect='auto')\n\n# Add color bar\ncbar = fig.colorbar(cax)\ncbar.set_label('Value', rotation=270, labelpad=15)\n\n# Set labels\nax.set_xticks(np.arange(len(subcategories)))\nax.set_yticks(np.arange(len(categories)))\nax.set_xticklabels(subcategories, rotation=45, ha='right')\nax.set_yticklabels(categories)\n\n# Rotate the tick labels and set their alignment.\nplt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\",\n         rotation_mode=\"anchor\")\n\n# Loop over data dimensions and create text annotations.\nfor i in range(len(categories)):\n    for j in range(len(subcategories)):\n        text = ax.text(j, i, f'{data[i, j]:.1f}',\n                       ha=\"center\", va=\"center\", color=\"w\")\n\n# Add title and labels\nax.set_title(\"Heatmap of Categories and Subcategories\")\nax.set_xlabel(\"Subcategories\")\nax.set_ylabel(\"Categories\")\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create data for the heatmap\ndata = np.array([\n    [1, 2, 3, 4, 5],\n    [2, 3, 4, 5, 6],\n    [3, 4, 5, 6, 7],\n    [4, 5, 6, 7, 8],\n    [5, 6, 7, 8, 9]\n])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(6.0, 8.0))\n\n# Plot the heatmap\ncax = ax.imshow(data, cmap='viridis', interpolation='nearest')\n\n# Add color bar\ncbar = fig.colorbar(cax)\ncbar.set_label('Perplexity')\n\n# Set labels and title\nax.set_xlabel('To layer')\nax.set_ylabel('Start removing from layer')\nax.set_title('mbert\u2192sat Perplexity=7.59')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_16.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the heatmap\ndata = np.array([\n    [659, 777, 247, 153, 953],\n    [807, 187, 643, 373, 819],\n    [109, 172, 759, 588, 327],\n    [459, 274, 797, 856, 660],\n    [784, 637, 523, 435, 405],\n    [935, 945, 739, 888, 691],\n    [729, 651, 388, 488, 243],\n    [863, 700, 644, 650, 760],\n    [292, 949, 365, 142, 473]\n])\n\n# Define labels for the x and y axes\nx_labels = ['Product A Q1', 'Product A Q2', 'Product A Q3', 'Product B Q1', 'Product B Q2', 'Product B Q3']\ny_labels = ['Sales Rank 1', 'Sales Rank 2', 'Sales Rank 3', 'Sales Rank 4', 'Sales Rank 5', 'Sales Rank 6', 'Sales Rank 7', 'Sales Rank 8', 'Sales Rank 9']\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(4.0, 8.0))\n\n# Plot the heatmap\ncax = ax.matshow(data, cmap='coolwarm')\n\n# Add color bar\ncbar = fig.colorbar(cax)\n\n# Set labels\nax.set_xticks(np.arange(len(x_labels)))\nax.set_yticks(np.arange(len(y_labels)))\nax.set_xticklabels(x_labels)\nax.set_yticklabels(y_labels)\n\n# Rotate the x-axis labels for better readability\nplt.xticks(rotation=45)\n\n# Add title and axis labels\nplt.title('Sales Performance Heatmap')\nplt.xlabel('Product and Quarter')\nplt.ylabel('Sales Rank')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_17.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(10.0, 3.0))\n\n# Define data for the heatmap\ndata = np.array([\n    [0.2, 0.3, 0.4, 0.5, 0.6],\n    [0.7, 0.8, 0.9, 1.0, 1.1],\n    [1.2, 1.3, 1.4, 1.5, 1.6]\n])\n\n# Plot the heatmap\nplt.imshow(data, cmap='viridis', aspect='auto')\n\n# Add color bar\ncbar = plt.colorbar()\ncbar.set_label('Values')\n\n# Set labels\nplt.xlabel('Context')\nplt.ylabel('Option')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_18.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the heatmap\ndata = np.array([\n    [0.55, 0.72, 0.60, 0.54],\n    [0.42, 0.65, 0.44, 0.89],\n    [0.96, 0.38, 0.79, 0.53],\n    [0.57, 0.93, 0.07, 0.09],\n    [0.96, 0.36, 0.44, 0.87],\n    [0.46, 0.57, 0.21, 0.62],\n    [0.61, 0.94, 0.02, 0.06],\n    [0.36, 0.62, 0.70, 0.68],\n    [0.67, 0.92, 0.01, 0.03],\n    [0.38, 0.64, 0.25, 0.46],\n    [0.96, 0.33, 0.41, 0.78],\n    [0.52, 0.78, 0.26, 0.83],\n    [0.65, 0.99, 0.10, 0.44],\n    [0.32, 0.66, 0.21, 0.57],\n    [0.99, 0.36, 0.47, 0.80],\n    [0.61, 0.94, 0.16, 0.46],\n    [0.36, 0.62, 0.70, 0.68],\n    [0.67, 0.92, 0.01, 0.03],\n    [0.38, 0.64, 0.25, 0.46],\n    [0.96, 0.33, 0.41, 0.78],\n    [0.52, 0.78, 0.26, 0.83],\n    [0.65, 0.99, 0.10, 0.44],\n    [0.32, 0.66, 0.21, 0.57],\n    [0.99, 0.36, 0.47, 0.80],\n    [0.61, 0.94, 0.16, 0.46],\n    [0.36, 0.62, 0.70, 0.68],\n    [0.67, 0.92, 0.01, 0.03],\n    [0.38, 0.64, 0.25, 0.46],\n    [0.96, 0.33, 0.41, 0.78],\n    [0.52, 0.78, 0.26, 0.83],\n    [0.65, 0.99, 0.10, 0.44],\n    [0.32, 0.66, 0.21, 0.57],\n    [0.99, 0.36, 0.47, 0.80],\n    [0.61, 0.94, 0.16, 0.46],\n    [0.36, 0.62, 0.70, 0.68],\n    [0.67, 0.92, 0.01, 0.03],\n    [0.38, 0.64, 0.25, 0.46],\n    [0.96, 0.33, 0.41, 0.78],\n    [0.52, 0.78, 0.26, 0.83],\n    [0.65, 0.99, 0.10, 0.44],\n    [0.32, 0.66, 0.21, 0.57],\n    [0.99, 0.36, 0.47, 0.80],\n    [0.61, 0.94, 0.16, 0.46],\n    [0.36, 0.62, 0.70, 0.68],\n    [0.67, 0.92, 0.01, 0.03],\n    [0.38, 0.64, 0.25, 0.46],\n    [0.96, 0.33, 0.41, 0.78],\n    [0.52, 0.78, 0.26, 0.83],\n    [0.65, 0.99, 0.10, 0.44],\n    [0.32, 0.66, 0.21, 0.57],\n    [0.99, 0.36, 0.47, 0.80],\n    [0.61, 0.94, 0.16, 0.46],\n    [0.36, 0.62, 0.70, 0.68],\n    [0.67, 0.92, 0.01, 0.03],\n    [0.38, 0.64, 0.25, 0.46],\n    [0.96, 0.33, 0.41, 0.78],\n    [0.52, 0.78, 0.26, 0.83],\n    [0.65, 0.99, 0.10, 0.44],\n    [0.32, 0.66, 0.21, 0.57],\n    [0.99, 0.36, 0.47, 0.80],\n    [0.61, 0.94, 0.16, 0.46],\n    [0.36, 0.62, 0.70, 0.68],\n    [0.67, 0.92, 0.01, 0.03],\n    [0.38, 0.64, 0.25, 0.46],\n    [0.96, 0.33, 0.41, 0.78],\n    [0.52, 0.78, 0.26, 0.83],\n    [0.65, 0.99, 0.10, 0.44],\n    [0.32, 0.66, 0.21, 0.57],\n    [0.99, 0.36, 0.47, 0.80],\n    [0.61, 0.94, 0.16, 0.46],\n    [0.36, 0.62, 0.70, 0.68],\n    [0.67, 0.92, 0.01, 0.03],\n    [0.38, 0.64, 0.25, 0.46],\n    [0.96, 0.33, 0.41, 0.78],\n    [0.52, 0.78, 0.26, 0.83],\n    [0.65, 0.99, 0.10, 0.44],\n    [0.32, 0.66, 0.21, 0.57],\n    [0.99, 0.36, 0.47, 0.80],\n    [0.61, 0.94, 0.16, 0.46],\n    [0.36, 0.62, 0.70, 0.68],\n    [0.67, 0.92, 0.01, 0.03],\n    [0.38, 0.64, 0.25, 0.46],\n    [0.96, 0.33, 0.41, 0.78],\n    [0.52, 0.78, 0.26, 0.83],\n    [0.65, 0.99, 0.10, 0.44],\n    [0.32, 0.66, 0.21, 0.57],\n    [0.99, 0.36, 0.47, 0.80],\n    [0.61, 0.94, 0.16, 0.46],\n    [0.36, 0.62, 0.70, 0.68],\n    [0.67, 0.92, 0.01, 0.03],\n    [0.38, 0.64, 0.25, 0.46],\n    [0.96, 0.33, 0.41, 0.78],\n    [0.52, 0.78, 0.26, 0.83],\n    [0.65, 0.99, 0.10, 0.44],\n    [0.32, 0.66, 0.21, 0.57],\n    [0.99, 0.36, 0.47, 0.80],\n    [0.61, 0.94, 0.16, 0.46],\n    [0.36, 0.62, 0.70, 0.68],\n    [0.67, 0.92, 0.01, 0.03],\n    [0.38, 0.64, 0.25, 0.46],\n    [0.96, 0.33, 0.41, 0.78],\n    [0.52, 0.78, 0.26, 0.83],\n    [0.65, 0.99, 0.10, 0.44],\n    [0.32, 0.66, 0.21, 0.57],\n    [0.99, 0.36, 0.47, 0.80],\n    [0.61, 0.94, 0.16, 0.46],\n    [0.36, 0.62, 0.70, 0.68],\n    [0.67, 0.92, 0.01, 0.03],\n    [0.38, 0.64, 0.25, 0.46],\n    [0.96, 0.33, 0.41, 0.78],\n    [0.52, 0.78, 0.26, 0.83],\n    [0.65, 0.99, 0.10, 0.44],\n    [0.32, 0.66, 0.21, 0.57],\n    [0.99, 0.36, 0.47, 0.80],\n    [0.61, 0.94, 0.16, 0.46],\n    [0.36, 0.62, 0.70, 0.68],\n    [0.67, 0.92, 0.01, 0.03],\n    [0.38, 0.64, 0.25, 0.46],\n    [0.96, 0.33, 0.41, 0.78],\n    [0.52, 0.78, 0.26, 0.83],\n    [0.65, 0.99, 0.10, 0.44],\n    [0.32, 0.66, 0.21, 0.57],\n    [0.99, 0.36, 0.47, 0.80],\n    [0.61, 0.94, 0.16, 0.46],\n    [0.36, 0.62, 0.70, 0.68],\n    [0.67, 0.92, 0.01, 0.03],\n    [0.38, 0.64, 0.25, 0.46],\n    [0.96, 0.33, 0.41, 0.78],\n    [0.52, 0.78, 0.26, 0.83],\n    [0.65, 0.99, 0.10, 0.44],\n    [0.32, 0.66, 0.21, 0.57],\n    [0.99, 0.36, 0.47, 0.80],\n    [0.61, 0.94, 0.16, 0.46],\n    [0.36, 0.62, 0.70, 0.68],\n    [0.67, 0.92, 0.01, 0.03],\n    [0.38, 0.64, 0.25, 0.46],\n    [0.96, 0.33, 0.41, 0.78],\n    [0.52, 0.78, 0.26, 0.83],\n    [0.65, 0.99, 0.10, 0.44],\n    [0.32, 0.66, 0.21, 0.57],\n    [0.99, 0.36, 0.47, 0.80],\n    [0.61, 0.94, 0.16, 0.46],\n    [0.36, 0.62, 0.70, 0.68],\n    [0.67, 0.92, 0.01, 0.03],\n    [0.38, 0.64, 0.25, 0.46],\n    [0.96, 0.33, 0.41, 0.78],\n    [0.52, 0.78, 0.26, 0.83],\n    [0.65, 0.99, 0.10, 0.44],\n    [0.32, 0.66, 0.21, 0.57],\n    [0.99, 0.36, 0.47, 0.80],\n    [0.61, 0.94, 0.16, 0.46],\n    [0.36, 0.62, 0.70, 0.68],\n    [0.67, 0.92, 0.01, 0.03],\n    [0.38, 0.64, 0.25, 0.46],\n    [0.96, 0.33, 0.41, 0.78],\n    [0.52, 0.78, 0.26, 0.83],\n    [0.65, 0.99, 0.10, 0.44],\n    [0.32, 0.66, 0.21, 0.57],\n    [0.99, 0.36, 0.47, 0.80],\n    [0.61, 0.94, 0.16, 0.46],\n    [0.36, 0.62, 0.70, 0.68],\n    [0.67, 0.92, 0.01, 0.03],\n    [0.38, 0.64, 0.25, 0"}
{"file": "dataset/ori_500/heatmap_19.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the heatmap\ndata = np.array([\n    [15.7, 28.1, 2.6, 14.5, 28.6, 10.5],\n    [76.0, 2.1, 0.5, 4.1, 8.1, 9.2],\n    [50.8, 12.3, 0.9, 6.2, 15.5, 13.9],\n    [11.2, 0.6, 7.8, 17.3, 16.3, 0.9],\n    [50.3, 12.0, 0.9, 7.0, 13.4, 0.6]\n])\n\n# Create a new figure with a larger size for better visibility\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(20.0, 8.0))\n\n# Plot the first heatmap\ncax1 = ax1.imshow(data, cmap='Blues', interpolation='nearest')\nax1.set_title('a) Role voting in the Werewolf game', fontsize=14)\nax1.set_xlabel('Roles', fontsize=12)\nax1.set_ylabel('Players', fontsize=12)\nax1.set_xticks(np.arange(len(data[0])))\nax1.set_yticks(np.arange(len(data)))\nax1.set_xticklabels(['Wererewolf', 'Seer', 'Hunter', 'Villager', 'Witch', 'Abstain'], fontsize=10)\nax1.set_yticklabels(['Player 1', 'Player 2', 'Player 3', 'Player 4', 'Player 5'], fontsize=10)\n\n# Add color bar\ncbar1 = fig.colorbar(cax1, ax=ax1, orientation='vertical', fraction=0.046, pad=0.04)\ncbar1.set_label('Percentage', fontsize=12)\n\n# Plot the second heatmap\ncax2 = ax2.imshow(data, cmap='Blues', interpolation='nearest')\nax2.set_title('b) Final state of roles', fontsize=14)\nax2.set_xlabel('Roles', fontsize=12)\nax2.set_ylabel('Players', fontsize=12)\nax2.set_xticks(np.arange(len(data[0])))\nax2.set_yticks(np.arange(len(data)))\nax2.set_xticklabels(['Wererewolf', 'Seer', 'Hunter', 'Villager', 'Witch', 'Abstain'], fontsize=10)\nax2.set_yticklabels(['Player 1', 'Player 2', 'Player 3', 'Player 4', 'Player 5'], fontsize=10)\n\n# Add color bar\ncbar2 = fig.colorbar(cax2, ax=ax2, orientation='vertical', fraction=0.046, pad=0.04)\ncbar2.set_label('Percentage', fontsize=12)\n\n# Adjust layout to prevent overlap\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the heatmap\ncategories = ['Qwen', 'ChatGLM3', 'Baichuan2', 'LLaMA-2', 'Xverse']\nresponses = [\n    [169, 547, 662, 271, 145],\n    [115, 439, 753, 239, 1355],\n    [219, 585, 557, 259, 1269],\n    [67, 941, 708, 432, 732],\n    [177, 554, 661, 235, 1246]\n]\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(9.0, 6.0))\n\n# Plot the heatmap\ncax = ax.matshow(responses, cmap='viridis')\n\n# Add color bar\ncbar = fig.colorbar(cax)\n\n# Set labels and title\nax.set_xticks(np.arange(len(categories)))\nax.set_yticks(np.arange(len(categories)))\nax.set_xticklabels(categories)\nax.set_yticklabels(categories)\nax.set_title('Question Type: All three types of questions')\n\n# Rotate x-axis labels for better readability\nplt.xticks(rotation=45)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_20.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data for the bar chart\ncategories = ['angry', 'sad', 'disgust', 'contempt', 'fear', 'neutral', 'surprise', 'happy']\noriginal_values = [0.10, 0.00, 0.30, 0.00, 0.00, 0.50, 0.00, 0.10]\nadjusted_values = [0.12, 0.00, 0.44, 0.00, 0.00, 0.44, 0.00, 0.00]\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Define colors for the bars\ncolors = ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd', '#8c564b', '#e377c2', '#7f7f7f']\n\n# Plot the original values\nax.bar(categories, original_values, color=colors, label='Original')\n\n# Plot the adjusted values\nax.bar(categories, adjusted_values, bottom=original_values, color=[c for c in colors if c != '#ff7f0e'], label='Adjusted')\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=.25)\n\n# Set labels and title\nax.set_xlabel('Emotion', fontsize=12)\nax.set_ylabel('Intensity', fontsize=12)\nax.set_title('Comparison of Original vs Adjusted Emotion Intensities', fontsize=14, fontweight='bold')\n\n# Add a legend\nax.legend(loc='upper right', fontsize=10)\n\n# Improve layout\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_21.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the heatmap\ndata = np.array([\n    [15.7, 28.1, 2.6, 14.5, 10.5],\n    [76.0, 2.1, 0.5, 8.1, 9.2],\n    [50.8, 12.3, 0.9, 6.2, 14.3],\n    [49.2, 11.2, 0.6, 7.8, 13.9],\n    [50.3, 12.0, 0.9, 7.0, 16.3]\n])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Plot the heatmap\nheatmap = ax.imshow(data, cmap='viridis', aspect='auto')\n\n# Add color bar\ncbar = fig.colorbar(heatmap)\ncbar.set_label('Percentage', rotation=270, labelpad=15)\n\n# Set labels\nvoters = ['Villager', 'Hunter', 'Witch', 'Seer', 'Werewolf']\nvotees = ['Villager', 'Seer', 'Witch', 'Hunter', 'Abstain']\n\nax.set_xticks(np.arange(len(voters)))\nax.set_yticks(np.arange(len(votees)))\n\nax.set_xticklabels(voters)\nax.set_yticklabels(votees)\n\n# Rotate the tick labels and set their alignment.\nplt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\",\n         rotation_mode=\"anchor\")\n\n# Loop over data dimensions and create text annotations.\nfor i in range(len(voters)):\n    for j in range(len(votees)):\n        text = ax.text(j, i, f'{data[i, j]:.1f}%', ha=\"center\", va=\"center\", color=\"w\")\n\n# Set title and labels\nax.set_title(\"Heatmap of Votes\")\nax.set_xlabel(\"Voter\")\nax.set_ylabel(\"Votee\")\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_22.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the first subplot\ndata1 = np.array([\n    [17, 24, 23],\n    [3, 8, 17],\n    [5, 10, 13],\n    [1, 4, 15]\n])\n\n# Data for the second subplot\ndata2 = np.array([\n    [5, 17, 1],\n    [11, 24, 9],\n    [17, 23, 15],\n    [1, 5, 19]\n])\n\n# Create a new figure with specified size\nfig, axes = plt.subplots(1, 2, figsize=(6.0, 3.0))\n\n# Plot the first heatmap\ncax1 = axes[0].imshow(data1, cmap='hot', interpolation='nearest')\naxes[0].set_title('LLaMA')\naxes[0].set_xlabel('Rank')\naxes[0].set_ylabel('Baseline')\naxes[0].set_xticks(np.arange(len(data1[0])))\naxes[0].set_yticks(np.arange(len(data1)))\naxes[0].set_xticklabels(['#17', '#24', '#23'])\naxes[0].set_yticklabels(['#3', '#8', '#17', '#5', '#10', '#13', '#4', '#15'])\n\n# Add color bar to the first subplot\ncbar1 = fig.colorbar(cax1, ax=axes[0], orientation='vertical')\n\n# Plot the second heatmap\ncax2 = axes[1].imshow(data2, cmap='coolwarm', interpolation='nearest')\naxes[1].set_title('GPT')\naxes[1].set_xlabel('Rank')\naxes[1].set_ylabel('Baseline')\naxes[1].set_xticks(np.arange(len(data2[0])))\naxes[1].set_yticks(np.arange(len(data2)))\naxes[1].set_xticklabels(['#5', '#17', '#1', '#11', '#24', '#9', '#17', '#23', '#15'])\naxes[1].set_yticklabels(['#1', '#5', '#17', '#11', '#24', '#9', '#17', '#23', '#15'])\n\n# Add color bar to the second subplot\ncbar2 = fig.colorbar(cax2, ax=axes[1], orientation='vertical')\n\n# Adjust layout to prevent overlap\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_23.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(10.0, 6.0))\n\n# Define data for the plot\nx = np.array([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0])\ny = np.array([0.1, 0.22, 0.3, 0.44, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0])\n\n# Plot the data\nplt.plot(x, y, 'o-', color='blue', linewidth=2, markersize=8)\n\n# Set labels and title\nplt.xlabel('X Axis Label')\nplt.ylabel('Y Axis Label')\nplt.title('Sample Plot')\n\n# Add grid lines for better readability\nplt.grid(True, linestyle='--', alpha=0.7)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_24.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the heatmap\ndata = np.array([\n    [0.8, 2.4, 2.5, 3.9, 0.0],\n    [2.4, 0.0, 4.0, 1.0, 0.0],\n    [1.1, 2.4, 0.8, 4.3, 0.0],\n    [0.6, 0.0, 0.3, 3.1, 0.0],\n    [0.7, 1.7, 0.6, 2.2, 0.0],\n    [1.3, 1.2, 0.0, 3.2, 0.0],\n    [0.1, 2.0, 0.0, 1.9, 0.0],\n    [0.0, 0.0, 0.0, 0.0, 0.0],\n    [0.0, 0.0, 0.0, 0.0, 0.0],\n    [0.0, 0.0, 0.0, 0.0, 0.0],\n    [0.0, 0.0, 0.0, 0.0, 0.0],\n    [0.0, 0.0, 0.0, 0.0, 0.0],\n    [0.0, 0.0, 0.0, 0.0, 0.0],\n    [0.0, 0.0, 0.0, 0.0, 0.0],\n    [0.0, 0.0, 0.0, 0.0, 0.0],\n    [0.0, 0.0, 0.0, 0.0, 0.0],\n    [0.0, 0.0, 0.0, 0.0, 0.0],\n    [0.0, 0.0, 0.0, 0.0, 0.0],\n    [0.0, 0.0, 0.0, 0.0, 0.0],\n    [0.0, 0.0, 0.0, 0.0, 0.0],\n    [0.0, 0.0, 0.0, 0.0, 0.0],\n    [0.0, 0.0, 0.0, 0.0, 0.0],\n    [0.0, 0.0, 0.0, 0.0, 0.0],\n    [0.0, 0.0, 0.0, 0.0, 0.0],\n    [0.0, 0.0, 0.0, 0.0, 0.0],\n    [0.0, 0.0, 0.0, 0.0, 0.0],\n    [0.0, 0.0, 0.0, 0.0, 0.0],\n    [0.0, 0.0, 0.0, 0.0, 0.0],\n    [0.0, 0.0, 0.0, 0.0, 0.0],\n    [0.0, 0.0, 0.0, 0.0, 0.0],\n    [0.0, 0.0, 0.0, 0.0, 0.0],\n    [0.0, 0.0, 0.0, 0.0, 0.0],\n    [0.0, 0.0, 0.0, 0.0, 0.0],\n    [0.0, 0.0, 0.0, 0.0, 0.0],\n    [0.0, 0.0, 0.0, 0.0, 0.0],\n    [0.0, 0.0, 0.0, 0.0, 0.0],\n    [0.0, 0.0, 0.0, 0.0, 0.0],\n    [0.0, 0.0, 0.0, 0.0, 0.0],\n    [0.0, 0.0, 0.0, 0.0, 0.0],\n    [0.0, 0.0, 0.0, 0.0, 0.0],\n    [0.0, 0.0, 0.0, 0.0, 0.0],\n    [0.0, 0.0, 0.0, 0.0, 0.0],\n    [0.0, 0.0, 0.0, 0.0, 0.0],\n    [0.0, 0.0, 0.0, 0.0, 0.0],\n    [0.0, 0.0, 0.0, 0.0, 0.0],\n    [0.0, 0.0, 0.0, 0.0, 0.0],\n    [0.0, 0.0, 0.0, 0.0, 0.0],\n    [0.0, 0.0, 0.0, 0.0, 0.0],\n    [0.0, 0.0, 0.0, 0.0, 0.0],\n    [0.0, 0.0, 0.0, 0.0, 0.0],\n    [0.0, 0.0, 0.0, 0.0, 0.0],\n    [0.0, 0.0, 0.0, 0.0, 0.0],\n    [0.0, 0.0, 0.0, 0.0, 0.0],\n    [0.0, 0.0, 0.0, 0.0, 0.0],\n    [0.0, 0.0, 0.0, 0.0, 0.0],\n    [0.0, 0.0, 0.0, 0.0, 0.0],\n    [0.0, 0.0, 0.0, 0.0, 0.0],\n    [0.0, 0.0, 0.0, 0.0, 0.0],\n    [0.0, 0.0, 0.0, 0.0, 0.0],\n    [0.0, 0.0, 0.0, 0.0, 0.0],\n    [0.0, 0.0, 0.0, 0.0, 0.0],\n    [0.0, 0.0, 0.0, 0.0, 0.0],\n    [0.0, 0.0, 0.0, 0.0, 0.0],\n    [0.0, 0.0, 0.0, 0.0, 0.0],\n    [0.0, 0.0, 0.0, 0.0, 0.0],\n    [0.0, 0.0, 0.0, 0.0, 0.0],\n    [0.0, 0.0, 0.0, 0.0, 0.0],\n    [0.0, 0.0, 0.0, 0.0, 0.0],\n    [0.0, 0.0, 0.0, 0.0, 0.0],\n    [0.0, 0.0, 0.0, 0.0, 0.0],\n    [0.0, 0.0, 0.0, 0.0, 0.0],\n    [0.0, 0.0, 0.0, 0.0, 0.0],\n    [0.0, 0.0, 0.0, 0.0, 0.0],\n    [0.0, 0.0, 0.0, 0.0, 0.0],\n    [0.0, 0.0, 0.0, 0.0, 0.0],\n    [0.0, 0.0, 0.0, 0.0, 0.0],\n    [0.0, 0.0, 0.0, 0.0, 0.0],\n    [0.0, 0.0, 0.0, 0.0, 0.0],\n    [0.0, 0.0, 0.0, 0.0, 0.0],\n    [0.0, 0.0, 0.0, 0.0, 0.0],\n    [0.0, 0.0, 0.0, 0.0, 0.0],\n    [0.0, 0.0, 0.0, 0.0, 0.0],\n    [0.0, 0.0, 0.0, 0.0, 0.0],\n    [0.0, 0.0, 0.0, 0.0, 0.0],\n    [0.0, 0.0, 0.0, 0.0, 0.0],\n    [0.0, 0.0, 0.0, 0.0, 0.0],\n    [0.0, 0.0, 0.0, 0.0, 0.0],\n    [0.0, 0.0, 0.0, 0.0, 0.0],\n    [0.0, 0.0, 0.0, 0.0, 0.0],\n    [0.0, 0.0, 0.0, 0.0, 0.0],\n    [0.0, 0.0, 0.0, 0.0, 0.0],\n    [0.0, 0.0, 0.0, 0.0, 0.0],\n    [0.0, 0.0, 0.0, 0.0, 0.0],\n    [0.0, 0.0, 0.0, 0.0, 0.0],\n    [0.0, 0.0, 0.0, 0.0, 0.0],\n    [0.0, 0.0, 0.0, 0.0, 0.0],\n    [0.0, 0.0, 0.0, 0.0, 0.0],\n    [0.0, 0.0, 0.0, 0.0, 0.0],\n    [0.0, 0.0, 0.0, 0.0, 0.0],\n    [0.0, 0.0, 0.0, 0.0, 0.0],\n    [0.0, 0.0, 0.0, 0.0, 0.0],\n    [0.0, 0.0, 0.0, 0.0, 0.0],\n    [0.0, 0.0, 0.0, 0.0, 0.0],\n    [0.0, 0.0, 0.0, 0.0, 0.0],\n    [0.0, 0.0, 0.0, 0.0, 0.0],\n    [0.0, 0.0, 0.0, 0.0, 0.0],\n    [0.0, 0.0, 0.0, 0.0, 0.0],\n    [0.0, 0.0, 0.0, 0.0, 0.0],\n    [0.0, 0.0, 0.0, 0.0, 0.0],\n    [0.0, 0.0, 0.0, 0.0, 0.0],\n    [0.0, 0.0, 0.0, 0.0, 0.0],\n    [0.0, 0.0, 0.0, 0.0, 0.0],\n    [0.0, 0.0, 0.0, 0.0, 0.0],\n    [0.0, 0.0, 0.0, 0.0, 0.0],\n    [0.0, 0.0, 0.0, 0.0, 0.0],\n    [0.0, 0.0, 0.0, 0.0, 0.0],\n    [0.0, 0.0, 0.0, 0.0, 0.0],\n    [0.0, 0.0, 0.0, 0.0, 0.0],\n    [0.0, 0.0, 0.0, 0.0, 0.0],\n    [0.0, 0.0, 0.0, 0.0, 0.0],\n    [0.0, 0.0, 0.0, 0.0, 0.0],\n    [0.0, 0.0, 0.0, 0.0, 0.0],\n    [0.0, 0.0, 0.0, 0.0, 0.0],\n    [0.0, 0.0, 0.0, 0.0, 0.0],\n    [0.0, 0.0, 0.0, 0.0, 0.0],\n    [0.0, 0.0, 0.0, 0.0, 0.0],\n    [0.0, 0.0, 0.0, 0.0, 0.0],\n    [0.0, 0.0, 0.0, 0.0, 0.0],\n    [0.0, 0.0, 0.0, 0.0, 0.0],\n    [0.0, 0.0, 0.0, 0.0, 0.0],\n    [0.0, 0.0, 0.0, 0.0, 0.0],\n    [0.0, 0.0, 0.0, 0.0, 0.0],\n    [0.0, 0.0, 0.0, 0.0, 0.0],\n    [0.0, 0.0, 0.0, 0.0, 0.0],\n    [0.0, 0.0, 0.0, 0.0, 0.0],\n    [0.0, 0.0, 0.0, 0.0, 0.0],\n    [0.0, 0.0, 0.0, 0.0, 0.0],\n    [0.0, 0.0, 0.0, 0.0, 0.0],\n    [0.0, 0.0, 0.0, 0.0, 0.0],\n    [0.0, 0.0, 0.0, 0.0, 0.0],\n    [0.0, 0.0, 0.0, 0.0, 0.0],\n    [0.0, 0.0, 0.0, 0.0, 0.0],\n    [0.0, 0.0, 0.0, 0.0, 0.0],\n    [0.0, 0.0, 0.0, 0.0, 0.0],\n    [0.0, 0.0, 0.0, 0.0, 0.0],\n    [0.0, 0.0, 0.0, 0.0, 0.0],\n    [0.0, 0.0, 0.0, 0.0, 0.0],\n    [0.0, 0.0, 0.0, 0.0, 0.0],\n    [0.0, 0.0, 0.0, 0.0, 0.0],\n    [0.0, 0.0, 0.0, 0.0, 0.0],\n    [0.0, 0.0, 0.0, 0.0, 0.0],\n    [0.0, 0.0, 0.0, 0.0, 0.0],\n    [0.0, 0.0, 0.0, 0.0, 0.0],\n    [0.0, 0.0, 0.0, 0.0, 0.0],\n    [0.0, 0.0, 0.0, 0.0, 0.0],\n    [0.0, 0.0, 0.0, 0.0, 0.0],\n    [0.0, 0.0, 0.0"}
{"file": "dataset/ori_500/heatmap_25.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nproducts = ['cucumber', 'tomato', 'lettuce', 'asparagus', 'potato', 'barley']\nharvests = [0.8, 2.4, 1.1, 0.6, 0.7, 0.1]\nweekly_sales = [6, 50, 30, 10, 20, 1]\n\n# Create a new figure with specified size\nfig, axes = plt.subplots(2, 3, figsize=(8.0, 6.0), constrained_layout=True)\n\n# Plot 1: Harvest vs. Weekly Sales\naxes[0, 0].barh(products, harvests, color='lightgreen')\naxes[0, 0].set_title('Harvest [t/year]')\naxes[0, 0].set_xlabel('Harvest [t/year]')\naxes[0, 0].set_ylabel('Product')\n\n# Plot 2: Weekly Sales\naxes[0, 1].imshow(np.array([[6, 50, 30, 10, 20, 1]]), cmap='hot', aspect='auto')\naxes[0, 1].set_title('Weekly Sold Copies')\naxes[0, 1].set_xlabel('Week')\naxes[0, 1].set_ylabel('Product')\naxes[0, 1].set_yticks([])\naxes[0, 1].set_xticks([])\n\n# Plot 3: Quality Rating\nquality_ratings = ['A', 'B', 'C', 'D', 'E', 'F', 'G']\naxes[0, 2].barh(products, weekly_sales, color=plt.cm.viridis(np.linspace(0, 1, len(products))))\naxes[0, 2].set_title('Quality Rating')\naxes[0, 2].set_xlabel('Quality Rating')\naxes[0, 2].set_ylabel('Product')\n\n# Plot 4: Product Cycle\nproduct_cycles = ['Cycle 1', 'Cycle 2', 'Cycle 3', 'Cycle 4', 'Cycle 5', 'Cycle 6']\naxes[1, 0].barh(product_cycles, harvests, color=['green', 'yellow', 'orange', 'red', 'purple', 'brown'])\naxes[1, 0].set_title('Product Cycle')\naxes[1, 0].set_xlabel('Harvest [t/year]')\naxes[1, 0].set_ylabel('Cycle')\n\n# Plot 5: Product Line\nproduct_line = ['Prod. 10', 'Prod. 20', 'Prod. 30', 'Prod. 40', 'Prod. 50', 'Prod. 60']\naxes[1, 1].barh(product_line, harvests, color=['green', 'yellow', 'orange', 'red', 'purple', 'brown'])\naxes[1, 1].set_title('Product Line')\naxes[1, 1].set_xlabel('Harvest [t/year]')\naxes[1, 1].set_ylabel('Product')\n\n# Plot 6: Correlation Coefficient\ncorrelation_coefficients = [-0.95, -0.85, -0.75, -0.65, -0.55, -0.45, -0.35]\naxes[1, 2].barh(products, correlation_coefficients, color=plt.cm.coolwarm(np.linspace(0, 1, len(products))))\naxes[1, 2].set_title('Correlation Coefficient')\naxes[1, 2].set_xlabel('Correlation Coefficient')\naxes[1, 2].set_ylabel('Product')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_26.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(9.0, 6.0))\n\n# Define a list of sample data for plotting\ndata = [\n    np.array([[1, 2], [3, 4]]),\n    np.array([[5, 6], [7, 8]]),\n    np.array([[9, 10], [11, 12]]),\n    np.array([[13, 14], [15, 16]]),\n    np.array([[17, 18], [19, 20]]),\n    np.array([[21, 22], [23, 24]]),\n    np.array([[25, 26], [27, 28]]),\n    np.array([[29, 30], [31, 32]]),\n    np.array([[33, 34], [35, 36]]),\n    np.array([[37, 38], [39, 40]]),\n    np.array([[41, 42], [43, 44]]),\n    np.array([[45, 46], [47, 48]])\n]\n\n# Plot each dataset\nfor i, d in enumerate(data):\n    ax = fig.add_subplot(4, 4, i + 1)\n    ax.imshow(d, cmap='viridis')\n    ax.set_title(f'Plot {i+1}')\n\n# Adjust layout to prevent overlap\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_27.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create data for the plot\nx = np.arange(10)\ny = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Plot the data with different styles\nax.plot(x, y, color='purple', linestyle='-', linewidth=2, marker='o', markersize=5, label='default: no edges')\nax.plot(x, y + 1, color='orange', linestyle='--', linewidth=2, marker='s', markersize=5, label='thick edges')\n\n# Set labels and title\nax.set_xlabel('X-axis')\nax.set_ylabel('Y-axis')\nax.set_title('Line Plot with Different Styles')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_28.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nvendors = ['Vendor A', 'Vendor B', 'Vendor C', 'Vendor D', 'Vendor E', 'Vendor F', 'Vendor G']\nproducts = ['apples', 'bananas', 'cherries', 'dates', 'elderberries', 'figs', 'grapes']\nsales = [\n    [1.5, 2.2, 1.8, 3.2, 0.5, 3.8, 0.3],\n    [2.8, 0.5, 1.8, 2.2, 0.7, 0.6, 0.9],\n    [1.0, 2.1, 0.9, 4.0, 1.5, 4.2, 0.4],\n    [0.7, 0.6, 0.5, 3.4, 2.0, 3.1, 0.6],\n    [0.9, 1.6, 2.3, 5.9, 0.7, 2.0, 0.5],\n    [1.2, 1.3, 0.6, 1.9, 0.7, 3.1, 0.8],\n    [0.3, 1.9, 1.3, 0.6, 0.8, 1.8, 5.9]\n]\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the heatmap\nheatmap = ax.imshow(sales, cmap='YlOrRd')\n\n# Add color bar\ncbar = fig.colorbar(heatmap)\ncbar.set_label('Sales (in tons/year)')\n\n# Set labels and title\nax.set_xticks(np.arange(len(vendors)))\nax.set_yticks(np.arange(len(products)))\nax.set_xticklabels(vendors)\nax.set_yticklabels(products)\nax.set_title('Sales of vendors (in tons/year)')\n\n# Rotate the tick labels and set their alignment.\nplt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\", rotation_mode=\"anchor\")\n\n# Loop over data dimensions and create text annotations.\nfor i in range(len(products)):\n    for j in range(len(vendors)):\n        text = ax.text(j, i, sales[i][j], ha=\"center\", va=\"center\", color=\"black\")\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_29.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the bar chart\ncategories = ['Low', 'Medium', 'High']\nvalues = [17, 28, 36]\ncounts = [79, 34, 53]\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(5.0, 4.0))\n\n# Define colors for the bars\ncolors = ['#1f77b4', '#ff7f0e', '#2ca02c']\n\n# Plot the bar chart\nbars = ax.bar(categories, counts, color=colors)\n\n# Add labels and title\nax.set_xlabel('Degree of acceptance of a product')\nax.set_ylabel('Number of people')\nax.set_title('Degree of acceptance of a product')\n\n# Add value annotations on top of each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 1, f'{yval}', ha='center', va='bottom')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(8.0, 6.0))\n\n# Define data for the heatmap\ndata = np.array([\n    [0.1, 0.2, 0.3, 0.4, 0.5],\n    [0.2, 0.3, 0.4, 0.5, 0.6],\n    [0.3, 0.4, 0.5, 0.6, 0.7],\n    [0.4, 0.5, 0.6, 0.7, 0.8],\n    [0.5, 0.6, 0.7, 0.8, 0.9]\n])\n\n# Define labels for the x and y axes\nx_labels = ['a', 'm', 'd', 'p', 'n']\ny_labels = ['ada', 'mis', 'dis', 'mpn', 'min']\n\n# Create a heatmap using imshow\nheatmap = plt.imshow(data, cmap='viridis', aspect='auto')\n\n# Add color bar\ncbar = plt.colorbar(heatmap)\ncbar.set_label('Bottleneck Distance')\n\n# Set labels for the axes\nplt.xlabel('Wasserstein Distance')\nplt.ylabel('Bottleneck Distance')\n\n# Set ticks for the axes\nplt.xticks(np.arange(len(x_labels)), x_labels)\nplt.yticks(np.arange(len(y_labels)), y_labels)\n\n# Rotate x-axis labels for better readability\nplt.xticks(rotation=45)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_30.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(8.0, 6.0))\n\n# Define data for the heatmap\ndata = np.array([\n    [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0],\n    [0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 0.9],\n    [0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 0.9, 0.8],\n    [0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 0.9, 0.8, 0.7],\n    [0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 0.9, 0.8, 0.7, 0.6],\n    [0.6, 0.7, 0.8, 0.9, 1.0, 0.9, 0.8, 0.7, 0.6, 0.5],\n    [0.7, 0.8, 0.9, 1.0, 0.9, 0.8, 0.7, 0.6, 0.5, 0.4],\n    [0.8, 0.9, 1.0, 0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3],\n    [0.9, 1.0, 0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2],\n    [1.0, 0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1]\n])\n\n# Plot the heatmap\nplt.imshow(data, cmap='hot', interpolation='nearest')\n\n# Add color bar\ncbar = plt.colorbar()\ncbar.set_label('Value')\n\n# Set labels and title\nplt.title(\"ROC's AUC\")\nplt.xlabel(\"Timeshift\")\nplt.ylabel(\"Scales\")\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(6.0, 3.0))\n\n# Define data for the heatmap\ndata = np.array([\n    [0.1, 0.2, 0.3, 0.4, 0.5],\n    [0.2, 0.3, 0.4, 0.5, 0.6],\n    [0.3, 0.4, 0.5, 0.6, 0.7],\n    [0.4, 0.5, 0.6, 0.7, 0.8],\n    [0.5, 0.6, 0.7, 0.8, 0.9]\n])\n\n# Create a heatmap\nplt.imshow(data, cmap='viridis', aspect='auto')\n\n# Add color bar\ncbar = plt.colorbar()\ncbar.set_label('Color Scale')\n\n# Set labels\nplt.xlabel('Count')\nplt.ylabel('Categories')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the heatmap\ndata = [\n    [44, 12, 0, 0],\n    [35, 8, 24, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n"}
{"file": "dataset/ori_500/heatmap_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the heatmap\ndata = np.array([\n    [876, 136, 435, 534, 322, 804],\n    [750, 1737, 742, 375, 750, 1825],\n    [764, 676, 782, 421, 925, 911],\n    [482, 120, 843, 1170, 925, 911]\n])\n\n# Define labels for rows and columns\nrow_labels = ['Summit', 'Perlmutter', 'Corona', 'Frontier']\ncol_labels = ['Kokkos', 'RAJA', 'OMP', 'OACC', 'SYCL', 'Native Port']\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Plot the heatmap\ncax = ax.matshow(data, cmap='coolwarm')\n\n# Add color bar\ncbar = fig.colorbar(cax)\n\n# Set labels\nax.set_xticks(np.arange(len(col_labels)))\nax.set_yticks(np.arange(len(row_labels)))\nax.set_xticklabels(col_labels)\nax.set_yticklabels(row_labels)\n\n# Rotate x-axis labels for better readability\nplt.xticks(rotation=45)\n\n# Add title and axis labels\nplt.title('BabelStream triad Average Memory Bandwidth (GB/s)', fontsize=14, fontweight='bold')\nplt.xlabel('Programming Model', fontsize=12)\nplt.ylabel('Machine', fontsize=12)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a sample dataset for correlation coefficients\ndata = np.array([\n    [1.00, 0.90, 0.89, 0.88, 0.64, 0.65, 0.71, 0.82],\n    [0.90, 1.00, 0.93, 0.92, 0.67, 0.69, 0.72, 0.82],\n    [0.89, 0.93, 1.00, 0.95, 0.66, 0.69, 0.74, 0.82],\n    [0.88, 0.92, 0.95, 1.00, 0.68, 0.69, 0.75, 0.82],\n    [0.64, 0.65, 0.66, 0.68, 1.00, 0.85, 0.90, 0.86],\n    [0.65, 0.69, 0.69, 0.69, 0.85, 1.00, 0.92, 0.88],\n    [0.71, 0.72, 0.74, 0.75, 0.90, 0.92, 1.00, 0.95],\n    [0.82, 0.82, 0.83, 0.84, 0.86, 0.88, 0.95, 1.00]\n])\n\n# Define labels for the axes\nlabels = ['en', 'fr', 'es', 'pt', 'pb', 'bn', 'ur', 'hi', 'ar', 'zh']\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Plot the heatmap\ncax = ax.matshow(data, cmap='coolwarm', fignum=1)\n\n# Add color bar\ncbar = fig.colorbar(cax)\ncbar.set_label('Correlation Coefficients')\n\n# Set labels and title\nax.set_xticks(np.arange(len(labels)))\nax.set_yticks(np.arange(len(labels)))\nax.set_xticklabels(labels)\nax.set_yticklabels(labels)\nax.set_title('Correlation Coefficients')\n\n# Rotate the tick labels and set their alignment.\nplt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\", rotation_mode=\"anchor\")\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ndata = [\n    [0.19, 0.62],\n    [0.19, 0.53, 0.52],\n    [0.16, 0.39, 0.50, 0.39],\n    [0.03, 0.24, 0.24, 0.20],\n    [-0.03, 0.10, 0.06, 0.20, -0.10],\n    [-0.07, 0.28, 0.26, 0.20, 0.21, 0.05]\n]\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Define colors for each bar\ncolors = ['#a6cee3', '#1f77b4', '#b2df8a', '#33a02c', '#fb9a99', '#e31a1c']\n\n# Plot the data\nfor i, row in enumerate(data):\n    ax.bar(range(len(row)), row, color=colors[i], label=f'Row {i+1}')\n\n# Set labels and title\nax.set_xlabel('X-axis')\nax.set_ylabel('Y-axis')\nax.set_title('Sample Bar Chart')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(5.0, 6.0))\n\n# Define data for the heatmap\ndata = np.array([\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\n])\n\n# Create a heatmap using imshow\nplt.imshow(data, cmap='viridis')\n\n# Add color bar to the heatmap\ncbar = plt.colorbar()\ncbar.set_label('Intensity')\n\n# Set labels for x and y axes\nplt.xlabel('Layers')\nplt.ylabel('Endofoptext')\n\n# Add a title to the plot\nplt.title('pythia-1b')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Number of pairs and test winning distance\npairs = [100, 90, 80, 70, 60, 50, 40, 30, 20, 10]\ntest_winning_distance = [0.0, 0.2, 0.4, 0.6, 0.8, 1.0]\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(8.0, 7.0))\n\n# Plot the data with a bar chart\nbars = ax.bar(test_winning_distance, pairs, color='skyblue', edgecolor='black')\n\n# Add labels and title\nax.set_xlabel('Test Winning Distance')\nax.set_ylabel('Number of Pairs')\nax.set_title('Number of Pairs vs Test Winning Distance')\n\n# Add grid for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.5)\n\n# Add annotations for each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 2, f'{yval}', ha='center', va='bottom', fontsize=10)\n\n# Customize the x-axis ticks\nax.set_xticks(test_winning_distance)\nax.set_xticklabels(['0.0', '0.2', '0.4', '0.6', '0.8', '1.0'])\n\n# Add a legend\nax.legend(['XSum', 'CNN/DailyMail', 'NarrativeQA', 'NaturalQuestions - Closed-book', 'NaturalQuestions - Open-book', 'QuAC'], loc='upper right')\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create data for the heatmap\ndata = np.array([\n    [0.8, 0.7, 0.6],\n    [0.5, 0.4, 0.3],\n    [0.2, 0.1, 0.0]\n])\n\n# Create a new figure with specified size\nfig, axes = plt.subplots(1, 2, figsize=(10.0, 3.0))\n\n# Plot the first heatmap\nheatmap1 = axes[0].imshow(data, cmap='Blues', aspect='auto')\naxes[0].set_title('Inter Class')\naxes[0].set_xlabel('Cosine Similarity')\naxes[0].set_ylabel('Cosine Similarity')\n\n# Add color bar to the first heatmap\ncbar1 = fig.colorbar(heatmap1, ax=axes[0])\ncbar1.set_label('Frequency')\n\n# Plot the second heatmap\nheatmap2 = axes[1].imshow(data, cmap='Greens', aspect='auto')\naxes[1].set_title('Intra Class')\naxes[1].set_xlabel('Cosine Similarity')\naxes[1].set_ylabel('Cosine Similarity')\n\n# Add color bar to the second heatmap\ncbar2 = fig.colorbar(heatmap2, ax=axes[1])\ncbar2.set_label('Frequency')\n\n# Adjust layout for better spacing\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data for plotting\nx = np.linspace(0.5, 2.5, 100)\ny1 = np.sin(x) * np.exp(-x / 2)\ny2 = np.cos(x) * np.exp(-x / 2)\n\n# Create a new figure with a larger size for better visibility\nfig, axes = plt.subplots(2, 2, figsize=(10.0, 8.0), sharex=True, sharey=True)\n\n# Plot the first subplot\naxes[0, 0].scatter(x, y1, c=y1, cmap='viridis', s=50, alpha=0.7)\naxes[0, 0].set_title('Baseline')\naxes[0, 0].set_xlabel('Euclidean Distance')\naxes[0, 0].set_ylabel('Density')\n\n# Plot the second subplot\naxes[0, 1].scatter(x, y2, c=y2, cmap='plasma', s=50, alpha=0.7)\naxes[0, 1].set_title('MIRL w/ MULT')\naxes[0, 1].set_xlabel('Euclidean Distance')\naxes[0, 1].set_ylabel('Density')\n\n# Plot the third subplot\naxes[1, 0].scatter(x, y1 + y2, c=y1 + y2, cmap='coolwarm', s=50, alpha=0.7)\naxes[1, 0].set_title('MIRL + OCLR w/ MULT')\naxes[1, 0].set_xlabel('Euclidean Distance')\naxes[1, 0].set_ylabel('Density')\n\n# Plot the fourth subplot\naxes[1, 1].scatter(x, y1 - y2, c=y1 - y2, cmap='magma', s=50, alpha=0.7)\naxes[1, 1].set_title('MIRL + OCLR w/ DOTLA')\naxes[1, 1].set_xlabel('Euclidean Distance')\naxes[1, 1].set_ylabel('Density')\n\n# Add a color bar to the last subplot for reference\ncbar = fig.colorbar(axes[1, 1].collections[0], ax=axes.ravel().tolist())\ncbar.set_label('Color Scale')\n\n# Adjust layout for better spacing\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create sample data\ndata = {\n    'Mathew': (np.random.normal(5, 1, 100), np.random.normal(3, 1, 100)),\n    'Lamma-2': (np.random.normal(4, 1, 100), np.random.normal(4, 1, 100)),\n    'LemmeMMA': (np.random.normal(6, 1, 100), np.random.normal(5, 1, 100)),\n    'Mammoth': (np.random.normal(7, 1, 100), np.random.normal(2, 1, 100))\n}\n\n# Create a new figure with a larger size for better visibility\nfig, axes = plt.subplots(nrows=3, ncols=2, figsize=(7.0, 8.0))\n\n# Plot histograms and scatter plots\nfor ax, (title, (x, y)) in zip(axes.flatten(), data.items()):\n    ax.set_title(title)\n    \n    # Histograms\n    ax.hist(x, bins=10, color='purple', alpha=0.5, label='X')\n    ax.hist(y, bins=10, color='orange', alpha=0.5, label='Y')\n    \n    # Scatter plot\n    ax.scatter(x, y, color='green', alpha=0.5, label='Data Points')\n    \n    # Set labels\n    ax.set_xlabel('FKGL')\n    ax.set_ylabel('Density')\n    \n    # Add a legend\n    ax.legend()\n\n# Adjust layout for better spacing\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\nx = np.array([0.02, 0.04, 0.06, 0.08])\ny1 = np.array([100, 1000, 10000, 100000])\ny2 = np.array([10, 100, 1000, 10000])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(5.0, 5.0))\n\n# Plot the data with different colors and styles\nax.bar(x - 0.2, y1, width=0.4, color='blue', label='Camels')\nax.bar(x + 0.2, y2, width=0.4, color='orange', label='Kangaroos')\n\n# Set labels and title\nax.set_xlabel('Animal Weight (Tons)')\nax.set_ylabel('Frequency')\nax.set_title('Desert Animals in the Wild')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data for demonstration\ndata1 = np.array([10, 20, 30, 40, 50, 60, 70, 80])\ndata2 = np.array([15, 25, 35, 45, 55, 65, 75, 85])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Plot the data with different colors and styles\nax.bar(range(len(data1)), data1, color='red', alpha=0.7, label='Uniform data')\nax.bar(range(len(data2)), data2, color='blue', alpha=0.7, label='Normal data')\n\n# Set labels and title\nax.set_xlabel('Value')\nax.set_ylabel('Frequency')\nax.set_title('Comparison of Uniform and Normal Distributions')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create sample data\nwind_speeds = np.array([1.2, 1.5, 1.3, 1.4, 1.6, 1.7, 1.8, 1.9, 2.0, 2.1, 2.2, 2.3, 2.4, 2.5, 2.6, 2.7, 2.8, 2.9, 3.0, 3.1, 3.2, 3.3, 3.4, 3.5, 3.6, 3.7, 3.8, 3.9, 4.0, 4.1, 4.2, 4.3, 4.4, 4.5, 4.6, 4.7, 4.8, 4.9, 5.0])\n\n# Plot the histogram\nplt.figure(figsize=(8.0, 6.0))\nplt.hist(wind_speeds, bins=10, color='skyblue', edgecolor='black')\n\n# Add grid lines for better readability\nplt.grid(True, linestyle='--', alpha=0.7)\n\n# Set labels and title with improved font sizes\nplt.xlabel('Wind Speed (km/h)', fontsize=12)\nplt.ylabel('Number of Measurements', fontsize=12)\nplt.title('Histogram of Wind Speed Measurements', fontsize=14, fontweight='bold')\n\n# Add a vertical line at the median\nmedian_speed = np.median(wind_speeds)\nplt.axvline(x=median_speed, color='darkred', linestyle='-', linewidth=2, label=f'Median: {median_speed:.2f}')\n\n# Add a legend\nplt.legend()\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_16.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the plot\nx = np.array([0.0, 0.5, 1.0, 1.5, 2.0, 2.5, 3.0])\ny = np.array([10, 20, 30, 40, 50, 60, 70])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(5.0, 4.0))\n\n# Plot the data with different colors and styles\nax.bar(x, y, color='blue', label='Baguette')\nax.bar(x + 0.2, y, color='orange', label='Youtiao')\n\n# Set labels and title\nax.set_xlabel('Distance to Threshold')\nax.set_ylabel('Frequency')\nax.set_title('Baking Accuracy Analysis')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_17.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.arange(0, 1.1, 0.1)\ny1 = np.array([20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140])\ny2 = np.array([10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130])\ny3 = np.array([30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150])\ny4 = np.array([15, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135])\ny5 = np.array([25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(16.0, 7.0))\n\n# Plot the data with different styles and labels\nax.plot(x, y1, label='XSum', color='blue', linestyle='-', linewidth=2, marker='o')\nax.plot(x, y2, label='CNN/DailyMail', color='yellow', linestyle='--', linewidth=2, marker='s')\nax.plot(x, y3, label='NarrativeQA - Closed-book', color='orange', linestyle='-.', linewidth=2, marker='^')\nax.plot(x, y4, label='NaturalQuestions - Open-book', color='pink', linestyle=':', linewidth=2, marker='D')\nax.plot(x, y5, label='QuAC', color='teal', linestyle='-', linewidth=2, marker='*')\n\n# Set labels and title\nax.set_xlabel('Test Winning Distance', fontsize=12)\nax.set_ylabel('Number of Pairs', fontsize=12)\nax.set_title('Comparison of Different Models', fontsize=14, fontweight='bold')\n\n# Add grid for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Customize ticks\nax.set_xticks(np.arange(0, 1.1, 0.1))\nax.set_yticks(np.arange(0, 150, 10))\n\n# Add legend with a shadow effect\nax.legend(loc='upper left', fontsize=10, shadow=True)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_18.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Number of nominations for different categories over years\ncategories = [\n    'Record of the Year', 'Album of the Year', 'Song of the Year',\n    'Best New Artist', 'Best Pop Solo Performance'\n]\nyears = [2019, 2020, 2021, 2022, 2023]\n\n# Data for each category across years\ndata = np.array([\n    [5, 7, 8, 10, 12],  # Record of the Year\n    [4, 6, 7, 9, 11],  # Album of the Year\n    [3, 5, 6, 8, 10],  # Song of the Year\n    [2, 4, 5, 7, 9],   # Best New Artist\n    [1, 3, 4, 6, 8]    # Best Pop Solo Performance\n])\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(12.0, 8.0))\n\n# Define colors for each category\ncolors = ['#FF9999', '#FFCC99', '#FFFF99', '#B3E6FF', '#FFD966']\n\n# Plot the bar chart with customized styles\nbars = ax.barh(categories, data.sum(axis=1), color=colors, edgecolor='black')\n\n# Add labels and title with enhanced font sizes\nax.set_xlabel('Number of Nominations', fontsize=12)\nax.set_ylabel('Categories', fontsize=12)\nax.set_title('Histogram of Grammy Nominations Across Expanded Categories 2019-2023', fontsize=14, fontweight='bold')\n\n# Add grid lines for better readability\nax.grid(axis='x', linestyle='--', alpha=0.7)\n\n# Add annotations for each bar\nfor bar in bars:\n    width = bar.get_width()\n    ax.text(width + 0.5, bar.get_y() + bar.get_height()/2, f'{width}', va='center', ha='left', fontsize=10)\n\n# Add a legend with a title\nax.legend(bars, [f'{cat} ({years[0]})' for cat in categories], title='Year', loc='upper right', fontsize=10)\n\n# Set y-axis limits to ensure all categories fit\nax.set_ylim(-1, len(categories))\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_19.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create data for the plots\nx = np.linspace(0, 0.3, 500)\ny1 = np.exp(-x**2)\ny2 = np.exp(-(x-0.1)**2)\n\n# Create a new figure with a larger size for better visibility\nfig, axes = plt.subplots(1, 2, figsize=(10.0, 7.0), sharex=True, sharey=True)\n\n# Plot the first subplot\naxes[0].contourf(x, x, y1, cmap='Blues', alpha=0.8)\naxes[0].set_title('MNIST - Defect Detection')\naxes[0].set_xlabel('X-axis')\naxes[0].set_ylabel('Y-axis')\naxes[0].legend(['Non-defective', 'Defective'], loc='upper right')\n\n# Plot the second subplot\naxes[1].contourf(x, x, y2, cmap='Oranges', alpha=0.8)\naxes[1].set_title('FashionMNIST - Defect Detection')\naxes[1].set_xlabel('X-axis')\naxes[1].set_ylabel('Y-axis')\naxes[1].legend(['Non-defective', 'Defective'], loc='upper right')\n\n# Adjust layout for better spacing\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.array([0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0])\ny1 = np.array([20, 30, 40, 50, 60, 70, 80])\ny2 = np.array([15, 25, 35, 45, 55, 65, 75])\ny3 = np.array([10, 20, 30, 40, 50, 60, 70])\ny4 = np.array([5, 15, 25, 35, 45, 55, 65])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(9.0, 6.0))\n\n# Plot the data with different styles\nax.bar(x - 0.2, y1, width=0.2, color='tab:blue', label='SAM-dependent methyltransferase')\nax.bar(x, y2, width=0.2, color='tab:orange', label='Thioredoxin-like')\nax.bar(x + 0.2, y3, width=0.2, color='tab:green', label='Tetratricopeptide-like helical domain')\nax.bar(x + 0.4, y4, width=0.2, color='tab:red', label='CheY-like')\n\n# Set labels and title\nax.set_xlabel('TM-score', fontsize=12)\nax.set_ylabel('Frequency', fontsize=12)\nax.set_title('Comparison of Different Models', fontsize=14, fontweight='bold')\n\n# Add grid for better readability\nax.grid(True, linestyle='--', alpha=0.7)\n\n# Add legend\nax.legend(title='Models', loc='upper right', fontsize=10)\n\n# Set x-ticks and labels\nax.set_xticks(x)\nax.set_xticklabels(['0.4', '0.5', '0.6', '0.7', '0.8', '0.9', '1.0'])\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_20.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the plots\ndata = {\n    'Swiss': [0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2.0],\n    'New Zealand': [0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8]\n}\n\n# Create a new figure with a larger size for better visibility\nfig, axes = plt.subplots(2, 2, figsize=(10.0, 8.0), constrained_layout=True)\n\n# Plot 1: Milk Chocolate\naxes[0, 0].hist([data['Swiss'], data['New Zealand']], bins=10, color=['skyblue', 'salmon'], alpha=0.7)\naxes[0, 0].set_title('Milk Chocolate')\naxes[0, 0].set_xlabel('Sweetness')\naxes[0, 0].set_ylabel('Density')\n\n# Plot 2: Dark Chocolate\naxes[0, 1].scatter(data['Swiss'], data['New Zealand'], c='darkslategray', s=50, alpha=0.7)\naxes[0, 1].set_title('Dark Chocolate')\naxes[0, 1].set_xlabel('Sweetness')\naxes[0, 1].set_ylabel('Density')\n\n# Plot 3: White Chocolate\naxes[1, 0].bar(range(len(data['Swiss'])), data['Swiss'], color='lightblue', label='Swiss')\naxes[1, 0].bar(range(len(data['New Zealand'])), data['New Zealand'], color='coral', label='New Zealand', alpha=0.7)\naxes[1, 0].set_title('White Chocolate')\naxes[1, 0].set_xlabel('Sweetness')\naxes[1, 0].set_ylabel('Density')\naxes[1, 0].legend()\n\n# Plot 4: Ruby Chocolate\naxes[1, 1].pie([len(data['Swiss']), len(data['New Zealand'])], labels=['Swiss', 'New Zealand'], colors=['skyblue', 'salmon'], autopct='%1.1f%%')\naxes[1, 1].set_title('Ruby Chocolate')\n\n# Adjust layout and show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define data for the bar chart\ncategories = ['Class']\nvalues = [1000, 200, 30, 10, 5]\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(5.0, 4.0))\n\n# Plot the bar chart\nbars = ax.bar(categories, values, color=['#8B4513', '#FF69B4', '#FFD700', '#FFA500', '#FF4500'])\n\n# Set labels and title\nax.set_xlabel('Concept Weight')\nax.set_ylabel('Count')\nax.set_title('CIFAR100 \\'Desert\\' Concept')\n\n# Add grid lines for better readability\nax.yaxis.grid(True)\n\n# Annotate each bar with its value\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 5, f'{yval}', ha='center', va='bottom')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\ny1 = np.array([10, 20, 30, 40, 50, 60, 70, 80, 90, 100])\ny2 = np.array([5, 15, 25, 35, 45, 55, 65, 75, 85, 95])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(5.0, 3.0))\n\n# Plot the data with different colors and styles\nax.bar(x, y1, color='yellow', label='Center')\nax.bar(x, y2, bottom=y1, color='blue', label='Random')\n\n# Set labels and title\nax.set_xlabel('Distance Difference (Random vs. Center)')\nax.set_ylabel('Number of Examples')\nax.set_title('Comparison of Two Distributions')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Number of repetitions for different clusters\nclusters = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nrepetitions = [1000, 500, 300, 200, 150, 100, 75, 50, 30, 20]\n\n# Create a new figure with specified size\nplt.figure(figsize=(4.0, 3.0))\n\n# Plot the data with enhanced styling\nplt.bar(clusters, repetitions, color='orange', edgecolor='black', linewidth=1.2)\n\n# Set labels and title with improved font sizes\nplt.xlabel('Number of Clusters', fontsize=10)\nplt.ylabel('Number of Repetition', fontsize=10)\nplt.title('Cluster Repetition Analysis', fontsize=12, fontweight='bold')\n\n# Add grid lines for better readability\nplt.grid(axis='y', linestyle='--', alpha=0.7)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create data for demonstration\nthresholds = np.arange(0, 5, 1)\ncorrectly_classified = np.array([400, 300, 200, 100, 50])\nmisclassified = np.array([10, 20, 30, 40, 50])\n\n# Plot the data\nplt.figure(figsize=(5.0, 3.0))\nplt.bar(thresholds, correctly_classified, color='blue', label='Correctly classified')\nplt.bar(thresholds, misclassified, bottom=correctly_classified, color='orange', label='Misclassified')\n\n# Add labels and title\nplt.xlabel('Distance to threshold')\nplt.ylabel('Count')\nplt.title('Classification Results by Distance')\nplt.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create data for demonstration\nconfidences = np.array([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0])\naccuracies = np.array([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Plot the data with a colormap and edge color\nbars = ax.bar(confidences, accuracies, color=plt.cm.viridis(accuracies), edgecolor='black')\n\n# Add a title and labels\nax.set_title('Cascade', fontsize=16, fontweight='bold')\nax.set_xlabel('Confidence in bin', fontsize=12)\nax.set_ylabel('Accuracy in bin', fontsize=12)\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='gray', alpha=0.7)\n\n# Annotate each bar with its value\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.01, round(yval, 2), ha='center', va='bottom', fontsize=10)\n\n# Add a legend\nax.legend(['Calibration Error: 0.31'], loc='upper left', fontsize=10)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Number of images overlapped\noverlap_counts = [1000, 200, 300, 400, 500, 600, 700, 800, 900, 1000]\n\n# Create a new figure with specified size\nplt.figure(figsize=(6.0, 5.0))\n\n# Plot the histogram\nplt.hist(overlap_counts, bins=10, color='blue', edgecolor='black')\n\n# Set labels and title\nplt.xlabel('% images overlap')\nplt.ylabel('Number of queries')\nplt.title('Histogram of Image Overlap')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create data for the histogram\ndata = np.random.normal(loc=0.1, scale=0.1, size=1000)\n\n# Create a new figure with specified size\nfig, axes = plt.subplots(1, 2, figsize=(10.0, 7.0))\n\n# Plot the first histogram\naxes[0].hist(data, bins=30, color='blue', alpha=0.7)\naxes[0].set_title('MNIST')\naxes[0].set_xlabel('Value')\naxes[0].set_ylabel('Frequency')\n\n# Plot the second histogram\naxes[1].hist(data, bins=30, color='blue', alpha=0.7)\naxes[1].set_title('FashionMNIST')\naxes[1].set_xlabel('Value')\naxes[1].set_ylabel('Frequency')\n\n# Adjust layout for better spacing\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.array([5, 10, 15, 20])\ny1 = np.array([20, 40, 60, 80])\ny2 = np.array([30, 50, 70, 90])\ny3 = np.array([10, 30, 50, 70])\ny4 = np.array([25, 45, 65, 85])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data with different styles\nax.plot(x, y1, label='JPEG+LDPC', color='blue', linestyle='-', marker='o', markersize=5)\nax.plot(x, y2, label='DEEPJSCC w/o ofdm', color='orange', linestyle='--', marker='s', markersize=5)\nax.plot(x, y3, label='DEEPJSCC w/ ofdm', color='green', linestyle='-.', marker='^', markersize=5)\nax.plot(x, y4, label='OURS', color='red', linestyle=':', marker='>', markersize=5)\n\n# Set labels and title\nax.set_xlabel('SNR')\nax.set_ylabel('Classification Accuracy (%)')\nax.set_title('Comparison of Different Models')\n\n# Add grid for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Add legend\nax.legend(loc='upper left')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nn = np.arange(1, 9)\ncontent = [1, 2, 3, 4, 5, 6, 7, 8]\norganization = [2, 3, 4, 5, 6, 7, 8, 9]\nlanguage = [3, 4, 5, 6, 7, 8, 9, 10]\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data with different styles\nax.plot(n, content, label='Content', color='blue', linestyle='-', linewidth=2, marker='o')\nax.plot(n, organization, label='Organization', color='orange', linestyle='--', linewidth=2, marker='s')\nax.plot(n, language, label='Language', color='teal', linestyle='-.', linewidth=2, marker='^')\n\n# Set labels and title\nax.set_xlabel('n', fontsize=12)\nax.set_ylabel('Performance Gain (%)', fontsize=12)\nax.set_title('Performance Metrics Over Time', fontsize=14, fontweight='bold')\n\n# Add grid for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Add legend with a shadow effect\nax.legend(loc='upper left', fontsize=10, shadow=True)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ndecomp = np.array([0, 20, 40, 60, 80])\ncoco_10k = np.array([0.55, 0.65, 0.75, 0.85, 0.95])\nlaion_10k = np.array([0.5, 0.6, 0.7, 0.8, 0.9])\ncoco_5k = np.array([0.52, 0.62, 0.72, 0.82, 0.92])\nlaion_5k = np.array([0.53, 0.63, 0.73, 0.83, 0.93])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Plot the data with different styles and markers\nax.plot(decomp, coco_10k, label='coco (10k)', color='red', linestyle='-', marker='o', linewidth=2)\nax.plot(decomp, laion_10k, label='laion (10k)', color='green', linestyle='--', marker='s', linewidth=2)\nax.plot(decomp, coco_5k, label='coco (5k)', color='blue', linestyle='-.', marker='^', linewidth=2)\nax.plot(decomp, laion_5k, label='laion (5k)', color='orange', linestyle=':', marker='D', linewidth=2)\n\n# Set labels and title\nax.set_xlabel('Decomposition IO Norm')\nax.set_ylabel('Accuracy')\nax.set_title('Effect of Vocabulary on Zero Shot Accuracy')\n\n# Add a legend\nax.legend()\n\n# Add grid lines for better readability\nax.grid(True, linestyle='--', alpha=0.7)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.array([0.25, 0.5, 0.75, 1.0])\ny1 = np.array([0.03, 0.02, 0.01, 0.005])\ny2 = np.array([0.04, 0.03, 0.02, 0.015])\ny3 = np.array([0.05, 0.04, 0.03, 0.025])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data with different styles and markers\nax.plot(x, y1, label='MAXN=512', color='green', linestyle='-', marker='^', markersize=8, linewidth=2)\nax.plot(x, y2, label='MAXN=1024', color='red', linestyle='--', marker='s', markersize=8, linewidth=2)\nax.plot(x, y3, label='MAXN=2048', color='blue', linestyle='-.', marker='o', markersize=8, linewidth=2)\n\n# Set labels and title\nax.set_xlabel('Sample Ratio', fontsize=12)\nax.set_ylabel('Std of ACC', fontsize=12)\nax.set_title('Performance Metrics Over Sample Ratio', fontsize=14, fontweight='bold')\n\n# Add grid for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Add a legend with a shadow effect\nax.legend(loc='upper right', fontsize=10, shadow=True)\n\n# Customize ticks\nax.set_xticks(x)\nax.set_yticks(np.arange(0.0, 0.06, 0.01))\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data for demonstration\nx = np.linspace(0, 200, 201)\ny1 = np.sin(x / 50) + 0.5 * np.cos(x / 30)\ny2 = np.sin(x / 50) + 0.5 * np.cos(x / 30) + 0.1\n\n# Create a new figure with specified size\nfig, axes = plt.subplots(nrows=3, ncols=1, figsize=(8.0, 10.0), sharex=True)\n\n# Plot the first subplot\naxes[0].plot(x, y1, label='base', color='blue')\naxes[0].plot(x, y2, label='ours', color='orange')\naxes[0].set_title('FID (dJ/dt)')\naxes[0].legend()\naxes[0].grid(True)\n\n# Plot the second subplot\naxes[1].plot(x, y1, label='base', color='blue')\naxes[1].plot(x, y2, label='ours', color='orange')\naxes[1].set_title('IS (dI/dt)')\naxes[1].legend()\naxes[1].grid(True)\n\n# Plot the third subplot\naxes[2].plot(x, y1, label='base', color='blue')\naxes[2].plot(x, y2, label='ours', color='orange')\naxes[2].set_title('CW-FID (dC/dt)')\naxes[2].legend()\naxes[2].grid(True)\n\n# Plot the fourth subplot\naxes[2].plot(x, y1, label='base', color='blue')\naxes[2].plot(x, y2, label='ours', color='orange')\naxes[2].set_title('CS (dC/dt)')\naxes[2].legend()\naxes[2].grid(True)\n\n# Adjust layout and show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28])\ny1 = np.array([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2.0, 2.1, 2.2, 2.3, 2.4, 2.5, 2.6, 2.7, 2.8])\ny2 = np.array([0.05, 0.15, 0.25, 0.35, 0.45, 0.55, 0.65, 0.75, 0.85, 0.95, 1.05, 1.15, 1.25, 1.35, 1.45, 1.55, 1.65, 1.75, 1.85, 1.95, 2.05, 2.15, 2.25, 2.35, 2.45, 2.55, 2.65, 2.75])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Plot the data with different styles\nax.plot(x, y1, color='red', linestyle='-', linewidth=2, marker='o', markersize=5, label='Auto-profiled')\nax.plot(x, y2, color='blue', linestyle='--', linewidth=2, marker='s', markersize=5, label='Manually-analyzed')\n\n# Set labels and title\nax.set_xlabel('Week')\nax.set_ylabel('Normalized Value')\nax.set_title('Comparison of Trends')\n\n# Add a legend\nax.legend()\n\n# Add grid for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Annotate specific points\nax.annotate('Release new product', xy=(25, 2.6), xytext=(20, 3),\n             arrowprops=dict(facecolor='black', shrink=0.05),\n             fontsize=8, color='blue')\n\nax.annotate('Realize the trend', xy=(15, 1.3), xytext=(10, 1.5),\n             arrowprops=dict(facecolor='black', shrink=0.05),\n             fontsize=8, color='red')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.arange(1, 21)\ny1 = np.array([95, 88, 75, 65, 55, 45, 35, 25, 15, 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100])\ny2 = np.array([85, 78, 65, 55, 45, 35, 25, 15, 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 95])\ny3 = np.array([75, 68, 55, 45, 35, 25, 15, 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 95, 90])\ny4 = np.array([65, 58, 45, 35, 25, 15, 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 95, 90, 85])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data with different styles and markers\nax.plot(x, y1, label='BaCE', color='blue', linestyle='-', marker='s', markersize=5)\nax.plot(x, y2, label='LWF', color='red', linestyle='--', marker='o', markersize=5)\nax.plot(x, y3, label='EWC', color='purple', linestyle='-.', marker='^', markersize=5)\nax.plot(x, y4, label='SEQ', color='pink', linestyle=':', marker='D', markersize=5)\n\n# Set labels and title\nax.set_xlabel('Task')\nax.set_ylabel('Average Accuracy (%)')\nax.set_title('Comparison of Different Models')\n\n# Add grid for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Add a legend\nax.legend(loc='upper right')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_16.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nuncertainty = np.linspace(0, 1, 10)\naccuracy_oesense = np.array([0.99, 0.98, 0.97, 0.96, 0.95, 0.94, 0.93, 0.92, 0.91, 0.90])\naccuracy_kws = np.array([0.96, 0.95, 0.94, 0.93, 0.92, 0.91, 0.90, 0.89, 0.88, 0.87])\naccuracy_ecg5000 = np.array([0.95, 0.94, 0.93, 0.92, 0.91, 0.90, 0.89, 0.88, 0.87, 0.86])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data with different styles and markers\nax.plot(uncertainty, accuracy_oesense, label='Oesense', color='b', linestyle='-', marker='o')\nax.plot(uncertainty, accuracy_kws, label='KWS', color='r', linestyle='--', marker='s')\nax.plot(uncertainty, accuracy_ecg5000, label='ECG5000', color='g', linestyle='-.', marker='^')\n\n# Set labels and title\nax.set_xlabel('Uncertainty threshold')\nax.set_ylabel('Accuracy')\nax.set_title('Comparison of Models')\n\n# Add grid for better readability\nax.grid(True)\n\n# Add legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_17.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.array([10, 20, 30, 40, 50, 60, 70, 80, 90, 100])\ny = np.array([1e-5, 1e-4, 1e-3, 1e-2, 1e-1, 1, 1e-1, 1e-2, 1e-3, 1e-4])\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(6.0, 4.0))\n\n# Plot the data with enhanced styling\nplt.plot(x, y, color='blue', linestyle='-', marker='o', markersize=5, linewidth=2, label='KL Divergence')\n\n# Set labels with improved font size and style\nplt.xlabel('Number of Parameters', fontsize=10)\nplt.ylabel('Log KL Divergence', fontsize=10)\n\n# Set a grid for better readability\nplt.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Set limits for axes\nplt.xlim(0, 120)\nplt.ylim(-5, -3)\n\n# Add a legend\nplt.legend(loc='upper right', fontsize=8)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_18.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data for plotting\nx = np.linspace(0, 2000, 100)\ny1 = np.sin(x / 500) * 10\ny2 = np.cos(x / 1000) * 8\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(9.0, 4.0))\n\n# Plot the data with enhanced styles\nax.plot(x, y1, label='7B', color='blue', linestyle='-', linewidth=2, marker='o', markersize=4)\nax.fill_between(x, y1 - 0.5, y1 + 0.5, color='lightblue', alpha=0.3)\n\nax.plot(x, y2, label='7B (Fine-tuned)', color='red', linestyle='--', linewidth=2, marker='s', markersize=4)\nax.fill_between(x, y2 - 0.5, y2 + 0.5, color='pink', alpha=0.3)\n\n# Set labels and title with improved font sizes\nax.set_xlabel('Iterations', fontsize=12)\nax.set_ylabel('Attack Success Rate', fontsize=12)\nax.set_title('GPT-4 Evaluation', fontsize=14, fontweight='bold')\n\n# Add grid for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5, alpha=0.7)\n\n# Customize ticks\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Add a legend with a shadow effect\nax.legend(loc='upper right', fontsize=10, shadow=True)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_19.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.logspace(-2, 0, 100)\ny1 = np.exp(x)  # Full model\ny2 = np.exp(x - 0.5)  # SPT model\ny3 = np.exp(x - 1)  # VPT model\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(5.0, 4.0))\n\n# Plot the data with different styles\nax.plot(x, y1, label='Full', color='green', linestyle='-', linewidth=2, marker='o', markersize=4)\nax.plot(x, y2, label='SPT', color='red', linestyle='--', linewidth=2, marker='s', markersize=4)\nax.plot(x, y3, label='VPT', color='blue', linestyle='-.', linewidth=2, marker='^', markersize=4)\n\n# Set labels and title\nax.set_xlabel('Fraction of training data (log scale)')\nax.set_ylabel('Test accuracy (%)')\nax.set_title('Model Performance')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.linspace(0, 200, 100)\ny1 = np.sin(x / 50) * 1.5 + 1.5\ny2 = np.cos(x / 50) * 1.5 + 1.5\ny3 = np.tan(x / 50) * 1.5 + 1.5\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(4.0, 3.0))\n\n# Plot the data with different styles and colors\nax.plot(x, y1, label='Sine', color='blue', linestyle='-', linewidth=2, marker='o', markersize=4)\nax.plot(x, y2, label='Cosine', color='green', linestyle='--', linewidth=2, marker='s', markersize=4)\nax.plot(x, y3, label='Tangent', color='red', linestyle='-.', linewidth=2, marker='^', markersize=4)\n\n# Add grid for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Set labels and title\nax.set_xlabel('Gradient Steps (x 62.5K)')\nax.set_ylabel('Loss')\nax.set_title('Training Loss Over Time')\n\n# Add a legend\nax.legend(loc='upper right')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_20.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nratio = np.array([0.2, 0.4, 0.6, 0.8, 1.0])\nperformance_molhiv = np.array([0.78, 0.76, 0.74, 0.72, 0.70])\nperformance_mnist75sp = np.array([0.78, 0.76, 0.74, 0.72, 0.70])\nperformance_spmotif05 = np.array([0.78, 0.76, 0.74, 0.72, 0.70])\n\n# Create a new figure with a larger size for better visibility\nfig, axes = plt.subplots(2, 2, figsize=(16.0, 8.0), constrained_layout=True)\n\n# Plot for MolHIV\naxes[0, 0].plot(ratio, performance_molhiv, label='PNA + ours', color='purple', linestyle='-', linewidth=2)\naxes[0, 0].fill_between(ratio, performance_molhiv - 0.02, performance_molhiv + 0.02, color='purple', alpha=0.3)\naxes[0, 0].set_title('MOLHIV')\naxes[0, 0].set_xlabel('Ratio r')\naxes[0, 0].set_ylabel('Performance')\naxes[0, 0].legend()\n\n# Plot for MNIST-75SP\naxes[0, 1].plot(ratio, performance_mnist75sp, label='PNA + ours', color='purple', linestyle='-', linewidth=2)\naxes[0, 1].fill_between(ratio, performance_mnist75sp - 0.02, performance_mnist75sp + 0.02, color='purple', alpha=0.3)\naxes[0, 1].set_title('MNIST-75SP')\naxes[0, 1].set_xlabel('Ratio r')\naxes[0, 1].set_ylabel('Performance')\naxes[0, 1].legend()\n\n# Plot for Graph-SST2\naxes[1, 0].plot(ratio, performance_molhiv, label='PNA + ours', color='purple', linestyle='-', linewidth=2)\naxes[1, 0].fill_between(ratio, performance_molhiv - 0.02, performance_molhiv + 0.02, color='purple', alpha=0.3)\naxes[1, 0].set_title('Graph-SST2')\naxes[1, 0].set_xlabel('Ratio r')\naxes[1, 0].set_ylabel('Performance')\naxes[1, 0].legend()\n\n# Plot for SPMotif-0.5\naxes[1, 1].plot(ratio, performance_spmotif05, label='PNA + ours', color='purple', linestyle='-', linewidth=2)\naxes[1, 1].fill_between(ratio, performance_spmotif05 - 0.02, performance_spmotif05 + 0.02, color='purple', alpha=0.3)\naxes[1, 1].set_title('SPMotif-0.5')\naxes[1, 1].set_xlabel('Ratio r')\naxes[1, 1].set_ylabel('Performance')\naxes[1, 1].legend()\n\n# Adjust layout and show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_21.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nimbalance_ratios = np.array([120, 90, 60, 30, 1])\nours_accuracies = np.array([75, 80, 85, 90, 95])\nacr_accuracies = np.array([77, 82, 87, 92, 95])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(9.0, 6.0))\n\n# Plot the data with different styles and markers\nax.plot(imbalance_ratios, ours_accuracies, label='Ours', color='b', linestyle='-', marker='o', linewidth=2)\nax.plot(imbalance_ratios, acr_accuracies, label='ACR', color='g', linestyle='--', marker='s', linewidth=2)\n\n# Set labels and title\nax.set_xlabel('Imbalance Ratio of Unlabeled Data')\nax.set_ylabel('Top-1 Acc (%)')\nax.set_title('Comparison of Ours and ACR')\n\n# Add grid for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Add legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_22.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nratio = np.array([40, 50, 60, 70, 80, 90, 100])\nperplexity = np.array([5.22, 5.56, 5.62, 5.74, 5.94, 6.0, 6.1])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(5.0, 4.0))\n\n# Plot the data with enhanced styling\nax.plot(ratio, perplexity, label='APTQ', color='blue', linestyle='-', linewidth=2, marker='o', markersize=5)\n\n# Set labels and title with improved font sizes\nax.set_xlabel('Ratio of 4-bit Utilization (%)', fontsize=10)\nax.set_ylabel('Perplexity (PPL)', fontsize=10)\nax.set_title('Perplexity vs Ratio of 4-bit Utilization', fontsize=12)\n\n# Add grid for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Customize ticks\nax.set_xticks(ratio)\nax.set_yticks(np.arange(5, 7.5, 0.5))\n\n# Add a legend\nax.legend(loc='upper right', fontsize=8)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_23.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.array([2, 3, 4, 5, 6, 7])\ny = np.array([67.32, 82.98, 89.53, 90.47, 92.41, 96.75])\n\n# Create a new figure with specified size\nplt.figure(figsize=(5.0, 2.0))\n\n# Plot the data with enhancements\nplt.plot(x, y, marker='o', linestyle='-', color='blue', linewidth=2, markersize=8)\n\n# Set labels with improved font size and style\nplt.xlabel('Number of Training Objects', fontsize=10)\nplt.ylabel('Coverage Ratio (%)', fontsize=10)\n\n# Add grid for better readability\nplt.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_24.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.linspace(0, 10, 100)\ny = np.exp(-x / 5) * np.cos(x)\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Plot the main line with enhanced style\nax.plot(x, y, label='Average', color='tab:blue', linewidth=2, linestyle='-', marker='o', markersize=4)\n\n# Add a shaded region for additional context\nax.fill_between(x, y - 0.1, y + 0.1, color='tab:blue', alpha=0.3, label='Standard Deviation')\n\n# Set labels and title with improved font sizes\nax.set_xlabel('Iterations', fontsize=10)\nax.set_ylabel('N-ELBO', fontsize=10)\nax.set_title('Convergence of N-ELBO', fontsize=12, fontweight='bold')\n\n# Add a legend with a shadow effect\nax.legend(loc='upper right', fontsize=8, shadow=True)\n\n# Enhance grid visibility\nax.grid(True, which='both', linestyle='--', linewidth=0.5, alpha=0.7)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_25.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.array([1, 2, 3, 4, 5, 6, 7, 8])\ny1 = np.array([3.2, 3.1, 3.3, 3.4, 3.5, 3.6, 3.7, 3.8])\ny2 = np.array([2.5, 2.6, 2.7, 2.8, 2.9, 3.0, 3.1, 3.2])\ny3 = np.array([4.5, 4.6, 4.7, 4.8, 4.9, 5.0, 5.1, 5.2])\n\n# Create a new figure with specified size\nfig, ax1 = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the first line with a specific color and style\ncolor = 'tab:blue'\nax1.set_xlabel('Number of experts')\nax1.set_ylabel('DoN', color=color)\nax1.plot(x, y1, color=color, linestyle='-', marker='o', label='Baseline')\nax1.tick_params(axis='y', labelcolor=color)\n\n# Create a second y-axis for the second line\nax2 = ax1.twinx()\ncolor = 'tab:green'\nax2.set_ylabel('Ribbon', color=color)\nax2.plot(x, y2, color=color, linestyle='--', marker='s', label='SoftMoE')\nax2.plot(x, y3, color='tab:purple', linestyle='-.', marker='^', label='Top1-MoE')\nax2.tick_params(axis='y', labelcolor=color)\n\n# Add a legend for both axes\nfig.tight_layout()\nlines, labels = ax1.get_legend_handles_labels()\nlines2, labels2 = ax2.get_legend_handles_labels()\nax2.legend(lines + lines2, labels + labels2, loc='upper left')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_26.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nvocab_sizes = np.array([256, 512, 1024, 2048, 4096, 8192, 16384])\ntpr_bpe = np.array([0.2, 0.4, 0.6, 0.8, 0.9, 0.95, 0.98])\nfpr_bpe = np.array([1e-4, 1e-3, 1e-2, 1e-1, 1, 10, 100])\n\ntpr_wordpunct = np.array([0.3, 0.5, 0.7, 0.9, 0.95, 0.98, 0.99])\nfpr_wordpunct = np.array([1e-4, 1e-3, 1e-2, 1e-1, 1, 10, 100])\n\ntpr_whitespace = np.array([0.4, 0.6, 0.8, 0.9, 0.95, 0.98, 0.99])\nfpr_whitespace = np.array([1e-4, 1e-3, 1e-2, 1e-1, 1, 10, 100])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data with different styles\nax.plot(vocab_sizes, tpr_bpe, label='BPE', color='b', linestyle='-', linewidth=2, marker='o', markersize=5)\nax.plot(vocab_sizes, tpr_wordpunct, label='Wordpunct', color='orange', linestyle='--', linewidth=2, marker='s', markersize=5)\nax.plot(vocab_sizes, tpr_whitespace, label='Whitespaces', color='g', linestyle='-.', linewidth=2, marker='^', markersize=5)\n\n# Set labels and title\nax.set_xlabel('Vocabulary Size')\nax.set_ylabel('Test set TPR | FPR = $10^{-4}$')\nax.set_title('Test set TPR | FPR = $10^{-4}$')\n\n# Add grid for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Set limits for x and y axes\nax.set_xlim(250, 16500)\nax.set_ylim(0.2, 1.0)\n\n# Add legend\nax.legend(loc='lower right')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_27.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ncompression_rate = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30])\nword_error_rate_cnn = np.array([26.0, 27.9, 29.2, 30.2, 31.8, 33.4, 34.4, 35.0, 36.8, 38.6, 40.2, 41.8, 43.4, 45.0, 46.6, 48.2, 49.8, 51.4, 53.0, 54.6, 56.2, 57.8, 59.4, 61.0, 62.6, 64.2, 65.8, 67.4, 69.0, 70.6])\nword_error_rate_cif = np.array([17.9, 18.8, 19.8, 20.8, 21.8, 22.8, 23.8, 24.8, 25.8, 26.8, 27.8, 28.8, 29.8, 30.8, 31.8, 32.8, 33.8, 34.8, 35.8, 36.8, 37.8, 38.8, 39.8, 40.8, 41.8, 42.8, 43.8, 44.8, 45.8, 46.8])\nword_error_rate_star = np.array([15.8, 16.8, 17.8, 18.8, 19.8, 20.8, 21.8, 22.8, 23.8, 24.8, 25.8, 26.8, 27.8, 28.8, 29.8, 30.8, 31.8, 32.8, 33.8, 34.8, 35.8, 36.8, 37.8, 38.8, 39.8, 40.8, 41.8, 42.8, 43.8, 44.8])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Plot the data with different styles\nax.plot(compression_rate, word_error_rate_cnn, label='CNN', color='pink', linestyle='--', marker='o')\nax.plot(compression_rate, word_error_rate_cif, label='CIF', color='purple', linestyle='-', marker='s')\nax.plot(compression_rate, word_error_rate_star, label='STAR', color='black', linestyle=':', marker='^')\n\n# Set labels and title\nax.set_xlabel('Compression Rate (%)')\nax.set_ylabel('Word Error Rate (%)')\nax.set_title('Word Error Rate vs Compression Rate')\n\n# Add grid for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Add legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_28.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.array([25, 50, 75, 100, 125, 150, 175, 200])\ny1 = np.array([0.78, 0.82, 0.85, 0.88, 0.90, 0.92, 0.93, 0.95])\ny2 = np.array([0.75, 0.78, 0.80, 0.82, 0.85, 0.87, 0.89, 0.91])\ny3 = np.array([0.76, 0.79, 0.81, 0.83, 0.86, 0.88, 0.90, 0.92])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Plot the data with different styles\nax.plot(x, y1, label='PILOTE', color='red', marker='o', linestyle='-', linewidth=2)\nax.plot(x, y2, label='Re-trained model', color='blue', marker='s', linestyle='--', linewidth=2)\nax.plot(x, y3, label='Pre-trained model accuracy', color='green', marker='^', linestyle='-.', linewidth=2)\n\n# Set labels and title\nax.set_xlabel('Number of exemplars in class \\'Run\\'')\nax.set_ylabel('Avg. accuracy of five rounds')\nax.set_title('Comparison of Models')\n\n# Add a legend\nax.legend()\n\n# Add grid lines for better readability\nax.grid(True, linestyle='--', alpha=0.7)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_29.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.arange(1, 21)\ny1 = np.array([0.1, 0.15, 0.2, 0.25, 0.3, 0.35, 0.4, 0.45, 0.5, 0.55,\n               0.6, 0.65, 0.7, 0.75, 0.8, 0.85, 0.9, 0.95, 1.0, 1.05])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(4.0, 3.0))\n\n# Plot the data with enhanced styling\nax.plot(x, y1, color='navy', linestyle='-', linewidth=2, marker='o', markersize=5, label='xLLM')\n\n# Set labels and title with improved font sizes\nax.set_xlabel('Number of Steps', fontsize=10)\nax.set_ylabel('Avg Fidelity', fontsize=10)\nax.set_title('Fidelity vs Number of Steps', fontsize=12)\n\n# Add a grid for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Add a legend with a shadow effect\nax.legend(loc='upper left', shadow=True)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.array([1, 2, 3, 4, 5, 6, 7, 8])\ny1 = np.array([50, 60, 70, 80, 90, 100, 110, 120])\ny2 = np.array([40, 50, 60, 70, 80, 90, 100, 110])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Plot the data with different styles\nax.plot(x, y1, label='ogbl-collab', color='tab:blue', linestyle='-', marker='o', markersize=5)\nax.plot(x, y2, label='ogbl-ppa', color='tab:orange', linestyle='--', marker='s', markersize=5)\n\n# Set labels and title\nax.set_xlabel('Node2Vec')\nax.set_ylabel('Hits@50')\nax.set_title('Graph Representation Performance')\n\n# Add grid for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Add legend\nax.legend(loc='upper left')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_30.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.array([2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\ny1 = np.array([0.035, 0.045, 0.05, 0.055, 0.06, 0.065, 0.07, 0.075, 0.08, 0.085, 0.09])\ny2 = np.array([0.03, 0.035, 0.04, 0.045, 0.05, 0.055, 0.06, 0.065, 0.07, 0.075, 0.08])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Plot the data with different styles\nax.plot(x, y1, label='outside-code-diff', color='b', linestyle='-', marker='o')\nax.plot(x, y2, label='inside-code-diff', color='r', linestyle='--', marker='s')\n\n# Set labels and title\nax.set_xlabel('Layer')\nax.set_ylabel('Value')\nax.set_title('Android')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_31.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.array([6, 7, 8, 9])\ny1 = np.array([0.5, 0.7, 0.8, 0.9])\ny2 = np.array([0.4, 0.6, 0.7, 0.8])\ny3 = np.array([0.3, 0.5, 0.6, 0.7])\ny4 = np.array([0.2, 0.4, 0.5, 0.6])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data with different styles and markers\nax.plot(x, y1, label='Direct (100 samples)', color='b', linestyle='-', marker='o')\nax.plot(x, y2, label='RFFT (100 samples)', color='g', linestyle='--', marker='s')\nax.plot(x, y3, label='Scratchpad (100 samples)', color='y', linestyle='-.', marker='^')\nax.plot(x, y4, label='Scratchpad (5000 samples)', color='r', linestyle=':', marker='D')\n\n# Set labels and title\nax.set_xlabel('Digit Length')\nax.set_ylabel('Accuracy')\nax.set_title('Comparison of Different Sampling Techniques')\n\n# Add grid for better readability\nax.grid(True)\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_32.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data for demonstration\nx = np.linspace(0, 100, 100)\ny1 = 0.3 * x + 25  # Linear relationship with a slight offset\ny2 = 0.4 * x + 20  # Another linear relationship\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data with different styles\nax.plot(x, y1, label='iaion', color='orange', linestyle='-', linewidth=2, marker='o', markersize=5)\nax.plot(x, y2, label='CLIP', color='black', linestyle='--', linewidth=2, marker='s', markersize=5)\n\n# Set labels and title with improved font sizes\nax.set_xlabel('Decomposition IO Norm', fontsize=12)\nax.set_ylabel('Accuracy', fontsize=12)\nax.set_title('CIFAR100 States Zero Shot Accuracy', fontsize=14, fontweight='bold')\n\n# Add grid lines for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Add a legend with a shadow effect\nax.legend(loc='upper left', fontsize=10, shadow=True)\n\n# Set limits for axes\nax.set_xlim(0, 100)\nax.set_ylim(0, 400)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_33.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.array([20, 40, 60, 80, 100])\ny1 = np.array([0.5, 0.6, 0.7, 0.8, 0.9])\ny2 = np.array([0.55, 0.65, 0.75, 0.85, 0.95])\ny3 = np.array([0.52, 0.62, 0.72, 0.82, 0.92])\ny4 = np.array([0.53, 0.63, 0.73, 0.83, 0.93])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Plot the data with different styles and markers\nax.plot(x, y1, label='CNN', color='orange', linestyle='-', marker='o')\nax.plot(x, y2, label='CNN+HMM', color='red', linestyle='--', marker='^')\nax.plot(x, y3, label='RF', color='blue', linestyle='-.', marker='s')\nax.plot(x, y4, label='RF+HMM', color='purple', linestyle=':', marker='D')\n\n# Set labels and title\nax.set_xlabel('No. of Users in Development Set')\nax.set_ylabel('F1')\nax.set_title('Performance Metrics')\n\n# Add grid for better readability\nax.grid(True)\n\n# Add legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_34.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.array([2, 3, 4, 5, 6, 7, 8])\ny1 = np.array([27.44, 24.75, 23.38, 22.77, 22.32, 21.47, 21.51])\ny2 = np.array([6.74, 4.54, 3.96, 3.71, 3.49, 3.34, 3.14])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(8.0, 7.0))\n\n# Plot the data with different styles\nax.plot(x, y1, label='LibriCSS (test)', color='royalblue', linestyle='--', marker='o', markersize=8)\nax.plot(x, y2, label='AMI (dev)', color='darkorange', linestyle='-', marker='^', markersize=8)\n\n# Set labels and title\nax.set_xlabel('Number of microphones', fontsize=12)\nax.set_ylabel('WER (%)', fontsize=12)\nax.set_title('WER and AMI Comparison', fontsize=14, fontweight='bold')\n\n# Add grid for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Add legend with a shadow effect\nax.legend(loc='upper right', fontsize=10, shadow=True)\n\n# Annotate specific points\nfor i, txt in enumerate(y1):\n    ax.annotate(f'{txt}%', (x[i], y1[i]), textcoords=\"offset points\", xytext=(0,10), ha='center', fontsize=9)\nfor i, txt in enumerate(y2):\n    ax.annotate(f'{txt}%', (x[i], y2[i]), textcoords=\"offset points\", xytext=(0,10), ha='center', fontsize=9)\n\n# Set limits for x and y axes\nax.set_xlim(1.5, 8.5)\nax.set_ylim(2, 30)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_35.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.logspace(-7, -4, 100)\ny1 = np.exp(x) + np.random.normal(0, 0.1, 100)\ny2 = np.exp(x) + np.random.normal(0, 0.1, 100)\ny3 = np.exp(x) + np.random.normal(0, 0.1, 100)\ny4 = np.exp(x) + np.random.normal(0, 0.1, 100)\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Plot the data with different styles\nax.plot(x, y1, label='M-LVQ-4x8-10', color='darkorange', linestyle='-', linewidth=2, marker='o', markersize=5)\nax.plot(x, y2, label='M-LVQ-4x8-100', color='teal', linestyle='--', linewidth=2, marker='s', markersize=5)\nax.plot(x, y3, label='M-LVQ-4x8-256', color='darkviolet', linestyle='-.', linewidth=2, marker='^', markersize=5)\nax.plot(x, y4, label='M-LVQ-4x8', color='royalblue', linestyle=':', linewidth=2, marker='D', markersize=5)\n\n# Set labels and title\nax.set_xlabel('Quantization error')\nax.set_ylabel('Search window size ratio')\nax.set_title('Empirical relat. (B2=8.0)')\n\n# Add a legend\nax.legend(loc='upper left')\n\n# Set grid\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_36.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.linspace(0.1, 1.0, 100)\ny1 = np.sin(x) * np.cos(x)\ny2 = np.sin(x) * np.cos(x) + 0.1\ny3 = np.sin(x) * np.cos(x) + 0.2\ny4 = np.sin(x) * np.cos(x) + 0.3\ny5 = np.sin(x) * np.cos(x) + 0.4\ny6 = np.sin(x) * np.cos(x) + 0.5\ny7 = np.sin(x) * np.cos(x) + 0.6\ny8 = np.sin(x) * np.cos(x) + 0.7\ny9 = np.sin(x) * np.cos(x) + 0.8\ny10 = np.sin(x) * np.cos(x) + 0.9\n\n# Create a new figure with specified size\nfig, axes = plt.subplots(nrows=1, ncols=3, figsize=(15.0, 5.0))\n\n# Plot the first subplot\naxes[0].plot(x, y1, label='PNA + ours', color='purple')\naxes[0].fill_between(x, y1 - 0.1, y1 + 0.1, color='lavender', alpha=0.5)\naxes[0].plot(x, y2, label='GIN + ours', color='orange')\naxes[0].fill_between(x, y2 - 0.1, y2 + 0.1, color='lightcoral', alpha=0.5)\naxes[0].set_title('SPMotif-0.5')\naxes[0].set_xlabel('Ratio r')\naxes[0].set_ylabel('Performance')\naxes[0].legend()\n\n# Plot the second subplot\naxes[1].plot(x, y3, label='PNA + ours', color='purple')\naxes[1].fill_between(x, y3 - 0.1, y3 + 0.1, color='lavender', alpha=0.5)\naxes[1].plot(x, y4, label='GIN + ours', color='orange')\naxes[1].fill_between(x, y4 - 0.1, y4 + 0.1, color='lightcoral', alpha=0.5)\naxes[1].set_title('SPMotif-0.7')\naxes[1].set_xlabel('Ratio r')\naxes[1].set_ylabel('Performance')\naxes[1].legend()\n\n# Plot the third subplot\naxes[2].plot(x, y5, label='PNA + ours', color='purple')\naxes[2].fill_between(x, y5 - 0.1, y5 + 0.1, color='lavender', alpha=0.5)\naxes[2].plot(x, y6, label='GIN + ours', color='orange')\naxes[2].fill_between(x, y6 - 0.1, y6 + 0.1, color='lightcoral', alpha=0.5)\naxes[2].set_title('SPMotif-0.9')\naxes[2].set_xlabel('Ratio r')\naxes[2].set_ylabel('Performance')\naxes[2].legend()\n\n# Adjust layout for better spacing\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_37.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nensemble_sizes = np.arange(6, 31, 2)\naccuracies = [74.5, 75.0, 75.5, 76.0, 76.5, 77.0, 77.5, 78.0, 78.5, 79.0]\nstd_devs = [0.5, 0.4, 0.3, 0.2, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1]\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(6.0, 5.0))\n\n# Plot the main line\nax.plot(ensemble_sizes, accuracies, color='blue', linewidth=2, linestyle='-', marker='o', markersize=5, label='Accuracy')\n\n# Fill the area between the mean and standard deviation\nax.fill_between(ensemble_sizes, accuracies - std_devs, accuracies + std_devs, color='lightblue', alpha=0.3)\n\n# Set labels and title\nax.set_xlabel('Ensemble Size')\nax.set_ylabel('Accuracy')\nax.set_title('Model Accuracy vs Ensemble Size')\n\n# Add grid for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Add legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_38.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.arange(1, 101)\ny1 = np.sin(x / 10) * np.exp(-x / 50)\ny2 = np.cos(x / 10) * np.exp(-x / 50)\ny3 = np.tan(x / 10) * np.exp(-x / 50)\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(6.0, 3.0))\n\n# Plot the data with different styles\nax.plot(x, y1, label='GPT-Neo', color='darkred', linestyle='-', linewidth=2, marker='s', markersize=4)\nax.plot(x, y2, label='5', color='orange', linestyle='--', linewidth=2, marker='o', markersize=4)\nax.plot(x, y3, label='3', color='blue', linestyle='-.', linewidth=2, marker='^', markersize=4)\n\n# Set labels and title\nax.set_xlabel('# Epochs')\nax.set_ylabel('MA')\nax.set_title('Training Metrics')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_39.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.array([96, 192, 336, 720])\ny1 = np.array([0.135, 0.145, 0.155, 0.165])\ny2 = np.array([0.14, 0.15, 0.16, 0.17])\ny3 = np.array([0.12, 0.13, 0.14, 0.15])\ny4 = np.array([0.16, 0.17, 0.18, 0.19])\ny5 = np.array([0.15, 0.16, 0.17, 0.18])\ny6 = np.array([0.14, 0.15, 0.16, 0.17])\n\n# Create a new figure with specified size\nfig, axes = plt.subplots(1, 3, figsize=(15.0, 4.0))\n\n# Plot the first subplot\naxes[0].plot(x, y1, label='Traffic', color='blue', linestyle='-', linewidth=2)\naxes[0].plot(x, y2, label='ETMm2', color='orange', linestyle='--', linewidth=2)\naxes[0].plot(x, y3, label='ETTh2', color='green', linestyle='-.', linewidth=2)\naxes[0].set_title('Traffic')\naxes[0].set_xlabel('Time')\naxes[0].set_ylabel('MSE')\naxes[0].legend()\n\n# Plot the second subplot\naxes[1].plot(x, y4, label='Traffic', color='blue', linestyle='-', linewidth=2)\naxes[1].plot(x, y5, label='ETMm2', color='orange', linestyle='--', linewidth=2)\naxes[1].plot(x, y6, label='ETTh2', color='green', linestyle='-.', linewidth=2)\naxes[1].set_title('ETMm2')\naxes[1].set_xlabel('Time')\naxes[1].set_ylabel('MSE')\naxes[1].legend()\n\n# Plot the third subplot\naxes[2].plot(x, y1, label='Traffic', color='blue', linestyle='-', linewidth=2)\naxes[2].plot(x, y2, label='ETMm2', color='orange', linestyle='--', linewidth=2)\naxes[2].plot(x, y3, label='ETTh2', color='green', linestyle='-.', linewidth=2)\naxes[2].set_title('ETTh2')\naxes[2].set_xlabel('Time')\naxes[2].set_ylabel('MSE')\naxes[2].legend()\n\n# Adjust layout for better spacing\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\nx = np.array([224, 128, 64, 32])\ny1 = np.array([70, 50, 30, 10])\ny2 = np.array([80, 60, 40, 20])\n\n# Create a new figure with specified size\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(9.0, 4.0))\n\n# Plot the first subplot\nax1.plot(x, y1, label='ImageNet-1k', color='orange', linestyle='-', marker='o')\nax1.set_title('Serial (n=8, m=1)')\nax1.set_xlabel('Number of Parameters')\nax1.set_ylabel('Top-1 Acc.')\nax1.set_xticks(x)\nax1.set_yticks(np.arange(0, 81, 10))\nax1.grid(True, which='both', linestyle='--', linewidth=0.5)\nax1.legend()\n\n# Plot the second subplot\nax2.plot(x, y2, label='ImageNet-1k', color='blue', linestyle='--', marker='s')\nax2.set_title('Parallel (n=2, m=4)')\nax2.set_xlabel('Number of Parameters')\nax2.set_ylabel('Top-1 Acc.')\nax2.set_xticks(x)\nax2.set_yticks(np.arange(0, 81, 10))\nax2.grid(True, which='both', linestyle='--', linewidth=0.5)\nax2.legend()\n\n# Adjust layout for better spacing\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_40.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.linspace(5, 25, 100)\ny1 = np.sin(x) * 100\ny2 = np.cos(x) * 100\ny3 = np.tan(x) * 100\ny4 = np.exp(x / 10) * 100\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data with different styles and markers\nax.plot(x, y1, label='JPEG+LDPC', color='b', linestyle='-', linewidth=2, marker='o', markersize=5)\nax.plot(x, y2, label='DEEPJSCC w/o OFDM', color='r', linestyle='--', linewidth=2, marker='s', markersize=5)\nax.plot(x, y3, label='DEEPJSCC w/ OFDM', color='g', linestyle='-.', linewidth=2, marker='^', markersize=5)\nax.plot(x, y4, label='OURS', color='m', linestyle=':', linewidth=2, marker='D', markersize=5)\n\n# Set labels and title\nax.set_xlabel('SNR', fontsize=12)\nax.set_ylabel('Classification Accuracy (%)', fontsize=12)\nax.set_title('Comparison of Different Models', fontsize=14, fontweight='bold')\n\n# Add grid for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Customize ticks\nax.set_xticks(np.arange(5, 26, 5))\nax.set_yticks(np.arange(0, 105, 10))\n\n# Add a legend with a shadow effect\nax.legend(loc='upper right', fontsize=10, shadow=True)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_41.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data for plotting\nx = np.linspace(0, 200, 100)\ny1 = np.sin(x / 50) + np.cos(x / 100)\ny2 = x**2 / 10000\ny3 = np.exp(x / 100)\ny4 = np.random.normal(0, 0.5, 100)\n\n# Create a new figure with a larger size for better visibility\nfig, ax1 = plt.subplots(figsize=(6.0, 8.0))\n\n# Plot the first line with a different style and color\ncolor = 'tab:purple'\nax1.set_xlabel('Gradient Steps (x 62.5K)', fontsize=12)\nax1.set_ylabel('Performance Value', color=color, fontsize=12)\nax1.plot(x, y1, color=color, linestyle='-', linewidth=2, marker='o', markersize=4, label='Line 1 (Sinusoidal)')\nax1.tick_params(axis='y', labelcolor=color)\n\n# Create a second y-axis for the second line\nax2 = ax1.twinx()\ncolor = 'tab:blue'\nax2.set_ylabel('Exponential Scale', color=color, fontsize=12)\nax2.plot(x, y3, color=color, linestyle='--', linewidth=2, marker='s', markersize=4, label='Line 3 (Exponential Focus)')\nax2.tick_params(axis='y', labelcolor=color)\n\n# Create a third y-axis for the third line\nax3 = ax1.twinx()\ncolor = 'tab:green'\nax3.spines['right'].set_position(('outward', 60))  # Offset the right spine\nax3.set_ylabel('Random Noise', color=color, fontsize=12)\nax3.plot(x, y4, color=color, linestyle=':', linewidth=2, marker='^', markersize=4, label='Line 4 (Random Noise)')\nax3.tick_params(axis='y', labelcolor=color)\n\n# Add a legend for each axis\nax1.legend(loc='upper left')\nax2.legend(loc='upper right')\nax3.legend(loc='lower right')\n\n# Set title and adjust layout\nplt.title('Multi-Plot Example', fontsize=14, fontweight='bold')\nfig.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_42.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data for demonstration\nx = np.array([0, 50, 100, 150, 200])\ny1 = np.array([0.1, 0.8, 1.2, 1.5, 1.3])\ny2 = np.array([0.5, 1.0, 1.4, 1.6, 1.7])\ny3 = np.array([0.2, 0.9, 1.1, 1.3, 1.4])\n\n# Create a new figure with a larger size for better visibility\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10.0, 5.0))\n\n# Plot the first line chart\nax1.plot(x, y1, label='Line 1', color='orange', linestyle='-', marker='o')\nax1.plot(x, y2, label='Line 2', color='blue', linestyle='--', marker='s')\nax1.set_title('Line Chart')\nax1.set_xlabel('Gradient Steps (x 62.5K)')\nax1.set_ylabel('Polynomial Value')\nax1.legend()\nax1.grid(True)\n\n# Plot the second line chart\nax2.plot(x, y3, label='Line 3', color='green', linestyle='-', marker='^')\nax2.plot(x, y1, label='Polynomial Trend (from Line 1)', color='purple', linestyle='--', marker='D')\nax2.set_title('Line Chart')\nax2.set_xlabel('Gradient Steps (x 62.5K)')\nax2.set_ylabel('Polynomial Value')\nax2.legend()\nax2.grid(True)\n\n# Adjust layout for better spacing between subplots\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_43.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\ny1 = np.array([55, 60, 65, 70, 75, 80, 85, 90, 95, 100])\ny2 = np.array([50, 55, 60, 65, 70, 75, 80, 85, 90, 95])\n\n# Create a new figure with specified size\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12.0, 5.0))\n\n# Plot the first dataset\nax1.plot(x, y1, label='ogbl-collab 2022', color='blue', linestyle='-', marker='o')\nax1.fill_between(x, y1 - 5, y1 + 5, color='lightblue', alpha=0.3)\nax1.set_title('ogbl-collab Results')\nax1.set_xlabel('Epoch')\nax1.set_ylabel('Hits@50')\nax1.legend()\n\n# Plot the second dataset\nax2.plot(x, y2, label='ogbl-collab 2023', color='orange', linestyle='--', marker='s')\nax2.fill_between(x, y2 - 5, y2 + 5, color='lightcoral', alpha=0.3)\nax2.set_title('ogbl-ppa Results')\nax2.set_xlabel('Epoch')\nax2.set_ylabel('Hits@50')\nax2.legend()\n\n# Adjust layout for better spacing\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_44.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.array([10, 20, 30, 40, 50, 60])\ny1 = np.array([1e-10, 1e-8, 1e-6, 1e-4, 1e-2, 1e0])\ny2 = np.array([1e-12, 1e-10, 1e-8, 1e-6, 1e-4, 1e-2])\ny3 = np.array([1e-14, 1e-12, 1e-10, 1e-8, 1e-6, 1e-4])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot the data with different styles and markers\nax.plot(x, y1, label='Standard', color='b', linestyle='-', marker='o')\nax.plot(x, y2, label='Constrained', color='r', linestyle='--', marker='s')\nax.plot(x, y3, label='Experimental', color='g', linestyle='-.', marker='^')\n\n# Set labels with improved formatting\nax.set_xlabel('N', fontsize=12)\nax.set_ylabel('Precision', fontsize=12)\n\n# Add a grid for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Add a legend with a title\nax.legend(title='Legend', loc='upper right', fontsize=10)\n\n# Set limits for x and y axes\nax.set_xlim(0, 70)\nax.set_ylim(1e-14, 1e0)\n\n# Add annotations to highlight specific points\nfor i, txt in enumerate(y1):\n    ax.annotate(f'{txt:.0e}', (x[i], y1[i]), textcoords=\"offset points\", xytext=(0,10), ha='center')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_45.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.logspace(1, 4, 100)\ny1 = x**2\ny2 = x**3\ny3 = x**4\ny4 = x**5\n\n# Create a new figure with a larger size for better visibility\nfig, axes = plt.subplots(nrows=2, ncols=2, figsize=(12.0, 8.0), sharex=True, sharey=True)\n\n# Plot the first graph\naxes[0, 0].plot(x, y1, label='Standard', color='blue', linestyle='-', linewidth=2)\naxes[0, 0].plot(x, y2, label='Constrained', color='red', linestyle='--', linewidth=2)\naxes[0, 0].plot(x, y3, label='Innovative', color='green', linestyle='-.', linewidth=2)\naxes[0, 0].plot(x, y4, label='Experimental', color='orange', linestyle=':', linewidth=2)\naxes[0, 0].set_title('Graph Variation 1')\naxes[0, 0].set_xlabel('N')\naxes[0, 0].set_ylabel('Peak Performance')\naxes[0, 0].legend(loc='upper left')\n\n# Plot the second graph\naxes[0, 1].plot(x, y1, label='Standard', color='blue', marker='o', linestyle='-', linewidth=2)\naxes[0, 1].plot(x, y2, label='Constrained', color='red', marker='s', linestyle='--', linewidth=2)\naxes[0, 1].plot(x, y3, label='Innovative', color='green', marker='^', linestyle='-.', linewidth=2)\naxes[0, 1].plot(x, y4, label='Experimental', color='orange', marker='D', linestyle=':', linewidth=2)\naxes[0, 1].set_title('Graph Variation 2')\naxes[0, 1].set_xlabel('N')\naxes[0, 1].set_ylabel('Peak Performance')\naxes[0, 1].legend(loc='upper left')\n\n# Plot the third graph\naxes[1, 0].plot(x, y1, label='Standard', color='blue', linestyle='-', linewidth=2)\naxes[1, 0].plot(x, y2, label='Constrained', color='red', linestyle='--', linewidth=2)\naxes[1, 0].plot(x, y3, label='Innovative', color='green', linestyle='-.', linewidth=2)\naxes[1, 0].plot(x, y4, label='Experimental', color='orange', linestyle=':', linewidth=2)\naxes[1, 0].set_title('Graph Variation 3')\naxes[1, 0].set_xlabel('N')\naxes[1, 0].set_ylabel('Precision')\naxes[1, 0].legend(loc='upper left')\n\n# Plot the fourth graph\naxes[1, 1].plot(x, y1, label='Standard', color='blue', marker='o', linestyle='-', linewidth=2)\naxes[1, 1].plot(x, y2, label='Constrained', color='red', marker='s', linestyle='--', linewidth=2)\naxes[1, 1].plot(x, y3, label='Innovative', color='green', marker='^', linestyle='-.', linewidth=2)\naxes[1, 1].plot(x, y4, label='Experimental', color='orange', marker='D', linestyle=':', linewidth=2)\naxes[1, 1].set_title('Graph Variation 4')\naxes[1, 1].set_xlabel('N')\naxes[1, 1].set_ylabel('Precision')\naxes[1, 1].legend(loc='upper left')\n\n# Adjust layout for better spacing\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_46.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data for plotting\nx = np.linspace(0, 25, 100)\ny1 = np.sin(x)  # Standard Activity\ny2 = np.cos(x)  # Innovative Activity\n\n# Create a new figure with a larger size for better visibility\nfig, (ax1, ax2) = plt.subplots(2, 1, figsize=(6.0, 10.0), sharex=True)\n\n# Plot the first subplot\nax1.plot(x, y1, label='Standard Activity', color='blue', linestyle='-', linewidth=2, marker='o', markersize=4)\nax1.set_title('Daytime Activity Monitoring', fontsize=14, fontweight='bold')\nax1.set_ylabel('Activity Level', fontsize=12)\nax1.set_ylim(-1.5, 1.5)\nax1.grid(True, which='both', linestyle='--', linewidth=0.5)\nax1.legend(loc='upper right')\n\n# Plot the second subplot\nax2.plot(x, y2, label='Innovative Activity', color='red', linestyle='--', linewidth=2, marker='s', markersize=4)\nax2.set_title('Nighttime Activity Monitoring', fontsize=14, fontweight='bold')\nax2.set_xlabel('Time (Hours)', fontsize=12)\nax2.set_ylabel('Activity Level', fontsize=12)\nax2.set_ylim(-1.5, 1.5)\nax2.grid(True, which='both', linestyle='--', linewidth=0.5)\nax2.legend(loc='upper right')\n\n# Adjust layout for better spacing between subplots\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_47.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create sample data\nx = np.linspace(0, 12, 100)\ny1 = np.sin(x) + 0.5 * np.cos(2 * x)\ny2 = np.sin(x) - 0.5 * np.cos(2 * x)\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot the data with different styles\nax.plot(x, y1, label='Standard Performance', color='blue', linewidth=2, linestyle='-', marker='o')\nax.plot(x, y2, label='Innovative Performance', color='red', linewidth=2, linestyle='--', marker='s')\n\n# Fill between the two lines for visual effect\nax.fill_between(x, y1, y2, where=(y1 > y2), color='lightblue', alpha=0.3)\nax.fill_between(x, y1, y2, where=(y1 < y2), color='pink', alpha=0.3)\n\n# Set labels and title\nax.set_xlabel('Time (Months)', fontsize=12)\nax.set_ylabel('Performance Index', fontsize=12)\nax.set_title('Comparative Performance Analysis Over Time', fontsize=14, fontweight='bold')\n\n# Add grid for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Customize ticks\nax.set_xticks(np.arange(0, 13, 1))\nax.set_yticks(np.arange(0, 1.1, 0.2))\n\n# Add a legend\nax.legend(loc='upper right', fontsize=10)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_48.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data: Monthly sales and average temperature over a year\nmonths = np.arange(1, 13)\nsales = np.array([800, 900, 1000, 1100, 1200, 1300, 1400, 1500, 1400, 1300, 1200, 1100])\ntemperature = np.array([10, 12, 15, 18, 22, 25, 27, 26, 24, 20, 15, 10])\n\n# Create a new figure with a larger size for better visibility\nfig, ax1 = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot the sales data\ncolor = 'tab:blue'\nax1.set_xlabel('Month')\nax1.set_ylabel('Sales', color=color)\nax1.plot(months, sales, color=color, linestyle='-', marker='o', markersize=5, label='Monthly Sales')\nax1.tick_params(axis='y', labelcolor=color)\n\n# Create a second y-axis for temperature\nax2 = ax1.twinx()\ncolor = 'tab:red'\nax2.set_ylabel('Temperature (\u00b0C)', color=color)\nax2.plot(months, temperature, color=color, linestyle='--', marker='s', markersize=5, label='Average Temperature')\nax2.tick_params(axis='y', labelcolor=color)\n\n# Add a title and legend\nplt.title('Sales and Temperature Correlation Over a Year', fontsize=14, fontweight='bold')\nfig.tight_layout()\nax1.legend(loc='upper left')\nax2.legend(loc='upper right')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_49.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create data for three different scenarios\nx = np.linspace(0, 10, 100)\ny1 = np.exp(x / 5)  # Exponential growth\ny2 = np.exp(-x / 5)  # Exponential decay\ny3 = np.sin(x) + 1  # Oscillation\n\n# Create a new figure with a larger size for better visibility\nfig, axes = plt.subplots(nrows=3, ncols=1, figsize=(6.0, 9.0), sharex=True)\n\n# Plot the first scenario: Exponential Growth\naxes[0].plot(x, y1, color='green', linestyle='-', linewidth=2, marker='o', markersize=4, label='Growth')\naxes[0].set_title('Exponential Growth Over Time')\naxes[0].set_ylabel('Value')\naxes[0].legend()\n\n# Plot the second scenario: Exponential Decay\naxes[1].plot(x, y2, color='red', linestyle='--', linewidth=2, marker='x', markersize=4, label='Decay')\naxes[1].set_title('Exponential Decay Over Time')\naxes[1].set_ylabel('Value')\naxes[1].legend()\n\n# Plot the third scenario: Oscillation\naxes[2].plot(x, y3, color='blue', linestyle='-.', linewidth=2, marker='s', markersize=4, label='Oscillation')\naxes[2].set_title('Oscillatory Behavior Over Time')\naxes[2].set_xlabel('Time')\naxes[2].set_ylabel('Value')\naxes[2].legend()\n\n# Adjust layout for better spacing between subplots\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\ny1 = np.array([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0])\ny2 = np.array([0.05, 0.15, 0.25, 0.35, 0.45, 0.55, 0.65, 0.75, 0.85, 0.95])\ny3 = np.array([0.02, 0.12, 0.22, 0.32, 0.42, 0.52, 0.62, 0.72, 0.82, 0.92])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Plot the data with different styles\nax.plot(x, y1, label='5-shot direct', color='b', linestyle='-', marker='o')\nax.plot(x, y2, label='5-shot scratchpad', color='r', linestyle='--', marker='s')\nax.plot(x, y3, label='5-shot rule-following', color='g', linestyle='-.', marker='^')\n\n# Set labels and title\nax.set_xlabel('Digit Length')\nax.set_ylabel('Accuracy')\nax.set_title('Comparison of Different Models')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_50.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data for plotting\nx = np.linspace(0, 20, 100)\ny1 = np.sin(x) + np.random.normal(0, 0.1, 100)\ny2 = np.cos(x) + np.random.normal(0, 0.1, 100)\ny3 = np.cumsum(y1)\n\n# Create a new figure with specified size\nfig, axes = plt.subplots(nrows=3, ncols=1, figsize=(5.0, 10.0), sharex=True)\n\n# Plot the first subplot\naxes[0].plot(x, y1, label='Smoothed Data', color='purple', linewidth=2, linestyle='-', marker='o', markersize=4)\naxes[0].set_title('Smoothed Representation', fontsize=12, fontweight='bold')\naxes[0].set_ylabel('Value', fontsize=10)\naxes[0].legend(loc='upper right')\n\n# Plot the second subplot\naxes[1].plot(x, y2 - y1, label='Difference Data', color='orange', linewidth=2, linestyle='--', marker='x', markersize=4)\naxes[1].set_title('First Difference of Data', fontsize=12, fontweight='bold')\naxes[1].set_ylabel('Delta Value', fontsize=10)\naxes[1].legend(loc='upper right')\n\n# Plot the third subplot\naxes[2].plot(x, y3, label='Cumulative Sum', color='green', linewidth=2, linestyle='-', marker='s', markersize=4)\naxes[2].set_title('Cumulative Sum Over Time', fontsize=12, fontweight='bold')\naxes[2].set_xlabel('Time', fontsize=10)\naxes[2].set_ylabel('Cumulative Value', fontsize=10)\naxes[2].legend(loc='upper left')\n\n# Adjust layout and display the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_51.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data for different patterns\nx = np.linspace(0, 10, 100)\ny1 = np.sin(x)\ny2 = np.cos(x)\ny3 = np.exp(-x / 5)\ny4 = np.log(x + 1)\n\n# Create a new figure with a larger size for better visibility\nfig, axes = plt.subplots(nrows=4, ncols=1, figsize=(6.0, 12.0), sharex=True)\n\n# Plot the first pattern: Sin Wave\naxes[0].plot(x, y1, color='magenta', linestyle='-', linewidth=2, label='Sin Wave')\naxes[0].set_title('Sinoidal Pattern')\naxes[0].set_ylabel('Amplitude')\naxes[0].legend()\n\n# Plot the second pattern: Cos Wave\naxes[1].plot(x, y2, color='green', linestyle='--', linewidth=2, label='Cos Wave')\naxes[1].set_title('Cosine Pattern')\naxes[1].set_ylabel('Amplitude')\naxes[1].legend()\n\n# Plot the third pattern: Exp Decay\naxes[2].plot(x, y3, color='blue', linestyle='-.', linewidth=2, label='Exp Decay')\naxes[2].set_title('Exponential Decay')\naxes[2].set_ylabel('Value')\naxes[2].legend()\n\n# Plot the fourth pattern: Log Growth\naxes[3].plot(x, y4, color='red', linestyle=':', linewidth=2, label='Log Growth')\naxes[3].set_title('Logarithmic Growth')\naxes[3].set_xlabel('Time')\naxes[3].set_ylabel('Value')\naxes[3].legend()\n\n# Adjust layout for better spacing between subplots\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_52.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data for plotting\nx = np.linspace(0, 1, 100)\ny1 = np.sin(x * np.pi / 2) + 0.5\ny2 = np.cos(x * np.pi / 2) + 0.5\ny3 = np.tan(x * np.pi / 2) + 0.5\ny4 = np.exp(-x) + 0.5\n\n# Create a new figure with a larger size for better visibility\nfig, axes = plt.subplots(nrows=2, ncols=2, figsize=(9.0, 6.0), sharex=True, sharey=True)\n\n# Plot the first subplot\naxes[0, 0].plot(x, y1, color='blue', linewidth=2, linestyle='-', marker='o', markersize=5, label='Positive bound')\naxes[0, 0].set_title('a')\naxes[0, 0].set_xlabel('X-axis')\naxes[0, 0].set_ylabel('Y-axis')\naxes[0, 0].grid(True)\naxes[0, 0].legend()\n\n# Plot the second subplot\naxes[0, 1].plot(x, y2, color='red', linewidth=2, linestyle='--', marker='s', markersize=5, label='Negative bound')\naxes[0, 1].set_title('b')\naxes[0, 1].set_xlabel('X-axis')\naxes[0, 1].set_ylabel('Y-axis')\naxes[0, 1].grid(True)\naxes[0, 1].legend()\n\n# Plot the third subplot\naxes[1, 0].plot(x, y3, color='green', linewidth=2, linestyle='-.', marker='^', markersize=5, label='Contrastive loss weight')\naxes[1, 0].set_title('c')\naxes[1, 0].set_xlabel('X-axis')\naxes[1, 0].set_ylabel('Y-axis')\naxes[1, 0].grid(True)\naxes[1, 0].legend()\n\n# Plot the fourth subplot\naxes[1, 1].plot(x, y4, color='purple', linewidth=2, linestyle=':', marker='D', markersize=5, label='Fuzzy coefficient')\naxes[1, 1].set_title('d')\naxes[1, 1].set_xlabel('X-axis')\naxes[1, 1].set_ylabel('Y-axis')\naxes[1, 1].grid(True)\naxes[1, 1].legend()\n\n# Adjust layout to prevent overlap\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_53.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.linspace(0, 1, 100)\ny1 = np.sin(x * np.pi / 2) + 0.5\ny2 = np.cos(x * np.pi / 2) + 0.5\ny3 = np.tan(x * np.pi / 4) + 0.5\ny4 = np.exp(-x) + 0.5\ny5 = np.log(x + 1) + 0.5\n\n# Create a new figure with a larger size for better visibility\nfig, axes = plt.subplots(nrows=3, ncols=2, figsize=(12.0, 8.0), sharex=True, sharey=False)\n\n# Plot the first subplot\naxes[0, 0].plot(x, y1, color='red', linestyle='-', linewidth=2, marker='o', markersize=5, label='Positive Bound')\naxes[0, 0].set_title('Positive Bound')\naxes[0, 0].set_xlabel('X-axis')\naxes[0, 0].set_ylabel('Y-axis')\naxes[0, 0].grid(True, which='both', linestyle='--', linewidth=0.5)\naxes[0, 0].legend()\n\n# Plot the second subplot\naxes[0, 1].plot(x, y2, color='green', linestyle='--', linewidth=2, marker='s', markersize=5, label='Negative Bound')\naxes[0, 1].set_title('Negative Bound')\naxes[0, 1].set_xlabel('X-axis')\naxes[0, 1].set_ylabel('Y-axis')\naxes[0, 1].grid(True, which='both', linestyle='--', linewidth=0.5)\naxes[0, 1].legend()\n\n# Plot the third subplot\naxes[1, 0].plot(x, y3, color='purple', linestyle='-.', linewidth=2, marker='^', markersize=5, label='Fuzzy Coefficient')\naxes[1, 0].set_title('Fuzzy Coefficient')\naxes[1, 0].set_xlabel('X-axis')\naxes[1, 0].set_ylabel('Y-axis')\naxes[1, 0].grid(True, which='both', linestyle='--', linewidth=0.5)\naxes[1, 0].legend()\n\n# Plot the fourth subplot\naxes[1, 1].plot(x, y4, color='blue', linestyle=':', linewidth=2, marker='D', markersize=5, label='Contrastive Loss Weight')\naxes[1, 1].set_title('Contrastive Loss Weight')\naxes[1, 1].set_xlabel('X-axis')\naxes[1, 1].set_ylabel('Y-axis')\naxes[1, 1].grid(True, which='both', linestyle='--', linewidth=0.5)\naxes[1, 1].legend()\n\n# Plot the fifth subplot\naxes[2, 0].plot(x, y5, color='orange', linestyle='-', linewidth=2, marker='P', markersize=5, label='Additional Metric 1')\naxes[2, 0].set_title('Additional Metric 1')\naxes[2, 0].set_xlabel('X-axis')\naxes[2, 0].set_ylabel('Y-axis')\naxes[2, 0].grid(True, which='both', linestyle='--', linewidth=0.5)\naxes[2, 0].legend()\n\n# Plot the sixth subplot\naxes[2, 1].plot(x, y1, color='cyan', linestyle='--', linewidth=2, marker='H', markersize=5, label='Additional Metric 2')\naxes[2, 1].set_title('Additional Metric 2')\naxes[2, 1].set_xlabel('X-axis')\naxes[2, 1].set_ylabel('Y-axis')\naxes[2, 1].grid(True, which='both', linestyle='--', linewidth=0.5)\naxes[2, 1].legend()\n\n# Adjust layout for better spacing\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_54.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ndriving_styles = ['Passive', 'Rail', 'Replay', 'Sportive']\nrelaxation_levels = [0.5, 0.7, 0.8, 0.9]\nsnow_levels = [1.2, 1.3, 1.4, 1.5]\n\n# Create a new figure with specified size\nfig, axes = plt.subplots(1, 3, figsize=(12.0, 4.0))\n\n# Plot for Dry vs Rain\naxes[0].plot(driving_styles, relaxation_levels, label='Dry', color='red')\naxes[0].plot(driving_styles, snow_levels, label='Rain', color='blue')\naxes[0].set_title('Dry vs Rain')\naxes[0].set_xlabel('Driving Style')\naxes[0].set_ylabel('Relaxation Level')\naxes[0].legend()\n\n# Plot for Snow vs Fog\naxes[1].plot(driving_styles, relaxation_levels, label='Snow', color='green')\naxes[1].plot(driving_styles, snow_levels, label='Fog', color='orange')\naxes[1].set_title('Snow vs Fog')\naxes[1].set_xlabel('Driving Style')\naxes[1].set_ylabel('Relaxation Level')\naxes[1].legend()\n\n# Plot for Rain vs Snow\naxes[2].plot(driving_styles, relaxation_levels, label='Rain', color='red')\naxes[2].plot(driving_styles, snow_levels, label='Snow', color='blue')\naxes[2].set_title('Rain vs Snow')\naxes[2].set_xlabel('Driving Style')\naxes[2].set_ylabel('Relaxation Level')\naxes[2].legend()\n\n# Adjust layout for better spacing\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_55.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nn_aug = np.array([0, 0.125, 0.25, 0.5, 1, 2, 4, 8])\ncontent = np.array([0.00000000e+00, 1.67961000e-01, 3.35922000e-01, 5.03883000e-01, 6.71844000e-01, 8.39805000e-01, 9.07766000e-01, 9.75727000e-01])\norganization = np.array([0.00000000e+00, 1.67961000e-01, 3.35922000e-01, 5.03883000e-01, 6.71844000e-01, 8.39805000e-01, 9.07766000e-01, 9.75727000e-01])\nlanguage = np.array([0.00000000e+00, 1.67961000e-01, 3.35922000e-01, 5.03883000e-01, 6.71844000e-01, 8.39805000e-01, 9.07766000e-01, 9.75727000e-01])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(8.0, 3.0))\n\n# Plot the data with different styles\nax.plot(n_aug, content, label='Content', color='b', linestyle='-', marker='o')\nax.plot(n_aug, organization, label='Organization', color='r', linestyle='--', marker='s')\nax.plot(n_aug, language, label='Language', color='g', linestyle='-.', marker='^')\n\n# Set labels and title\nax.set_xlabel('n_aug')\nax.set_ylabel('Performance Gain (%)')\nax.set_title('Dynamic Performance Gain Across Different n_aug Levels')\n\n# Add grid for better readability\nax.grid(True)\n\n# Add legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_56.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data for plotting\nx = np.linspace(0, 80, 100)\ny1 = 0.6 + 0.1 * np.sin(x / 10)\ny2 = 0.55 + 0.05 * np.cos(x / 10)\ny3 = 0.7 + 0.08 * np.sin(x / 10)\n\n# Create a new figure with specified size\nfig, axes = plt.subplots(1, 3, figsize=(9.0, 3.0), sharex=True, sharey=True)\n\n# Plot the first subplot\naxes[0].plot(x, y1, color='red', marker='o', linestyle='-', linewidth=2, markersize=4, label='COCO (10k)')\naxes[0].set_title('COCO 10K')\naxes[0].set_xlabel('Decomposition IO Norm')\naxes[0].set_ylabel('Accuracy')\naxes[0].legend()\n\n# Plot the second subplot\naxes[1].plot(x, y2, color='blue', marker='^', linestyle='--', linewidth=2, markersize=4, label='LAION (10k)')\naxes[1].set_title('LAION 10K')\naxes[1].set_xlabel('Decomposition IO Norm')\naxes[1].set_ylabel('Accuracy')\naxes[1].legend()\n\n# Plot the third subplot\naxes[2].plot(x, y3, color='green', marker='s', linestyle='-.', linewidth=2, markersize=4, label='COCO & LAION 5K')\naxes[2].plot(x, y2, color='orange', marker='x', linestyle=':', linewidth=2, markersize=4, label='LAION 5K')\naxes[2].set_title('COCO & LAION 5K')\naxes[2].set_xlabel('Decomposition IO Norm')\naxes[2].set_ylabel('Accuracy')\naxes[2].legend()\n\n# Adjust layout for better spacing\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_57.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data for plotting\nx = np.linspace(0, 0.3, 50)\ny1 = 0.8 + 0.05 * np.sin(2 * np.pi * x)\ny2 = 0.85 + 0.05 * np.cos(2 * np.pi * x)\ny3 = 0.9 + 0.05 * np.sin(4 * np.pi * x)\n\n# Create a new figure with a larger size for better visibility\nfig, axes = plt.subplots(nrows=2, ncols=2, figsize=(12.0, 9.0), sharex=True, sharey=True)\n\n# Plot the first subplot\naxes[0, 0].plot(x, y1, label='Error Rate vs. Learning Rate (Batch Size=64)', color='blue', linestyle='-', linewidth=2, marker='o', markersize=5)\naxes[0, 0].plot(x, y2, label='Error Rate vs. Learning Rate (Batch Size=128)', color='red', linestyle='--', linewidth=2, marker='s', markersize=5)\naxes[0, 0].set_title('Error Rate vs. Learning Rate')\naxes[0, 0].set_xlabel('Parameter Rate')\naxes[0, 0].set_ylabel('Metric')\naxes[0, 0].legend(loc='upper right')\n\n# Plot the second subplot\naxes[0, 1].plot(x, y1, label='Accuracy vs. Dropout (Batch Size=64)', color='green', linestyle='-', linewidth=2, marker='^', markersize=5)\naxes[0, 1].plot(x, y2, label='Accuracy vs. Dropout (Batch Size=128)', color='yellow', linestyle='--', linewidth=2, marker='>', markersize=5)\naxes[0, 1].set_title('Accuracy vs. Dropout')\naxes[0, 1].set_xlabel('Parameter Rate')\naxes[0, 1].set_ylabel('Metric')\naxes[0, 1].legend(loc='upper right')\n\n# Plot the third subplot\naxes[1, 0].plot(x, y1, label='Error Rate vs. Learning Rate (Batch Size=64)', color='purple', linestyle='-', linewidth=2, marker='p', markersize=5)\naxes[1, 0].plot(x, y2, label='Error Rate vs. Learning Rate (Batch Size=128)', color='orange', linestyle='--', linewidth=2, marker='h', markersize=5)\naxes[1, 0].set_title('Error Rate vs. Learning Rate')\naxes[1, 0].set_xlabel('Parameter Rate')\naxes[1, 0].set_ylabel('Metric')\naxes[1, 0].legend(loc='upper right')\n\n# Plot the fourth subplot\naxes[1, 1].plot(x, y1, label='Accuracy vs. Dropout (Batch Size=64)', color='cyan', linestyle='-', linewidth=2, marker='x', markersize=5)\naxes[1, 1].plot(x, y2, label='Accuracy vs. Dropout (Batch Size=128)', color='magenta', linestyle='--', linewidth=2, marker='D', markersize=5)\naxes[1, 1].set_title('Accuracy vs. Dropout')\naxes[1, 1].set_xlabel('Parameter Rate')\naxes[1, 1].set_ylabel('Metric')\naxes[1, 1].legend(loc='upper right')\n\n# Adjust layout for better spacing\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_58.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.linspace(0, 200, 201)\ny1 = np.sin(x / 50) * 0.6 + 0.3\ny2 = np.cos(x / 50) * 0.6 + 0.3\n\n# Create a new figure with specified size\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10.0, 4.0))\n\n# Plot the first subplot\nax1.plot(x, y1, label='Base Model', color='blue', linestyle='-', linewidth=2, marker='o', markersize=4)\nax1.set_title('Metric 1')\nax1.set_xlabel('Training Iterations')\nax1.set_ylabel('Metric Value')\nax1.legend()\nax1.grid(True)\n\n# Plot the second subplot\nax2.plot(x, y2, label='Our Model', color='orange', linestyle='--', linewidth=2, marker='s', markersize=4)\nax2.set_title('Metric 2')\nax2.set_xlabel('Training Iterations')\nax2.set_ylabel('Metric Value')\nax2.legend()\nax2.grid(True)\n\n# Adjust layout for better spacing\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_59.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.linspace(0, 200, 201)\ny1 = np.sin(x / 50) * 0.6 + 0.4\ny2 = np.sin(x / 50 + np.pi / 4) * 0.6 + 0.4\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(5.0, 3.0))\n\n# Plot the data with enhanced styles\nax.plot(x, y1, label='Base Model', color='dodgerblue', linestyle='-', linewidth=2, marker='o', markersize=4)\nax.plot(x, y2, label='Our Model', color='skyblue', linestyle='--', linewidth=2, marker='s', markersize=4)\n\n# Set labels and title with improved font sizes\nax.set_xlabel('Training Iterations', fontsize=10)\nax.set_ylabel('Metric Value', fontsize=10)\nax.set_title('Accuracy', fontsize=12, fontweight='bold')\n\n# Add a legend with a shadow effect\nax.legend(loc='upper right', fontsize=8, shadow=True)\n\n# Customize grid lines\nax.grid(True, which='both', linestyle='--', linewidth=0.5, alpha=0.7)\n\n# Set limits for x and y axes\nax.set_xlim(0, 200)\nax.set_ylim(0, 0.8)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create data\nx = np.array([1, 2, 3, 4, 5, 6])\ny1 = np.array([10**-1, 10**-2, 10**-3, 10**-4, 10**-5, 10**-6])\ny2 = np.array([10**-1, 10**-2, 10**-3, 10**-4, 10**-5, 10**-6])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(9.0, 6.0))\n\n# Plot the data with different styles\nax.plot(x, y1, label='Standard', color='b', linestyle='-', marker='o')\nax.plot(x, y2, label='Constrained', color='r', linestyle='--', marker='x')\n\n# Set labels and title\nax.set_xlabel('N', fontsize=12)\nax.set_ylabel('Error', fontsize=12)\nax.set_title('Error Comparison', fontsize=14)\n\n# Add grid for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Set logarithmic scale for y-axis\nax.set_yscale('log')\n\n# Add legend\nax.legend(loc='upper right', fontsize=10)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_60.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data for demonstration\nweeks = np.arange(1, 26)\nperformance = np.array([0.5, 0.7, 0.9, 1.1, 1.3, 1.4, 1.5, 1.4, 1.3, 1.2,\n                         1.1, 1.0, 0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2,\n                         0.1, 0.05, 0.02, 0.01, 0.005])\nefficiency = np.array([0.05, 0.1, 0.15, 0.2, 0.25, 0.3, 0.35, 0.4, 0.45, 0.5,\n                      0.55, 0.6, 0.65, 0.7, 0.75, 0.8, 0.85, 0.9, 0.95, 1.0,\n                      1.05, 1.1, 1.15, 1.2, 1.25])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data with enhanced styling\nax.plot(weeks, performance, label='Performance', color='royalblue', linestyle='-', linewidth=2, marker='o', markersize=5, markevery=5)\nax.plot(weeks, efficiency, label='Efficiency', color='darkred', linestyle='--', linewidth=2, marker='x', markersize=5, markevery=5)\n\n# Set labels and title with improved font sizes\nax.set_xlabel('Weeks', fontsize=12)\nax.set_ylabel('Performance/Efficiency', fontsize=12)\nax.set_title('Performance and Efficiency Over Weeks', fontsize=14, fontweight='bold')\n\n# Add grid for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5, alpha=0.7)\n\n# Customize ticks\nax.set_xticks(np.arange(1, 26, 5))\nax.set_yticks(np.arange(-1.5, 1.6, 0.5))\n\n# Add a legend with a shadow effect\nax.legend(loc='upper left', fontsize=10, shadow=True)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_61.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data for plotting\nx = np.linspace(0, 25, 100)\ny1 = np.sin(x) * np.exp(-0.1 * x)\ny2 = np.cos(x) * np.exp(-0.1 * x)\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Plot the data with different styles\nax.plot(x, y1, label='Performance', color='royalblue', linestyle='-', linewidth=2, marker='o', markersize=5, markevery=10)\nax.plot(x, y2, label='Efficiency', color='darkred', linestyle='--', linewidth=2, marker='x', markersize=5, markevery=10)\n\n# Fill between the two lines for visual effect\nax.fill_between(x, y1, y2, where=(y1 > y2), color='lightcoral', alpha=0.3)\nax.fill_between(x, y1, y2, where=(y1 < y2), color='skyblue', alpha=0.3)\n\n# Set labels and title\nax.set_xlabel('Weeks')\nax.set_ylabel('Values')\nax.set_title('Performance and Efficiency Analysis')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_62.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nweeks = np.arange(0, 31, 1)\nperformance = np.array([0.2, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2,\n                         1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2.0, 2.1, 2.2,\n                         2.3, 2.4, 2.5, 2.6, 2.7, 2.8, 2.9, 3.0, 3.1, 3.2])\nefficiency = np.array([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0,\n                      1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2.0,\n                      2.1, 2.2, 2.3, 2.4, 2.5, 2.6, 2.7, 2.8, 2.9, 3.0])\ngrowth = np.array([0.05, 0.1, 0.15, 0.2, 0.25, 0.3, 0.35, 0.4, 0.45, 0.5,\n                   0.55, 0.6, 0.65, 0.7, 0.75, 0.8, 0.85, 0.9, 0.95, 1.0,\n                   1.05, 1.1, 1.15, 1.2, 1.25, 1.3, 1.35, 1.4, 1.45, 1.5])\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot the data with different styles and markers\nax.plot(weeks, performance, label='Performance', color='b', linestyle='-', marker='o', markersize=5, linewidth=2)\nax.plot(weeks, efficiency, label='Efficiency', color='r', linestyle='--', marker='s', markersize=5, linewidth=2)\nax.plot(weeks, growth, label='Growth', color='g', linestyle='-.', marker='^', markersize=5, linewidth=2)\n\n# Set labels and title with improved font sizes\nax.set_xlabel('Weeks', fontsize=12)\nax.set_ylabel('Efficiency', fontsize=12)\nax.set_title('Detailed Performance and Efficiency Analysis Over Weeks', fontsize=14, fontweight='bold')\n\n# Add grid lines for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Customize the legend\nax.legend(loc='upper left', fontsize=10)\n\n# Set limits for x and y axes\nax.set_xlim(0, 30)\nax.set_ylim(0, 1.5)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_63.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.linspace(0, 30, 100)\ny1 = np.sin(x)\ny2 = np.cos(x)\ny3 = np.tan(x)\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(12.0, 8.0))\n\n# Plot the data with different styles and markers\nax.plot(x, y1, label='Data Series 1', color='dodgerblue', linestyle='-', linewidth=2, marker='o', markersize=5)\nax.plot(x, y2, label='Data Series 2 with Gradient', color='forestgreen', linestyle='--', linewidth=2, marker='s', markersize=5)\nax.plot(x, y3, label='Data Series 3', color='hotpink', linestyle='-.', linewidth=2, marker='^', markersize=5)\n\n# Set labels and title with improved font sizes\nax.set_xlabel('Weeks', fontsize=14)\nax.set_ylabel('Normalized Value', fontsize=14)\nax.set_title('Dynamic Data Presentation Across Weeks', fontsize=16, fontweight='bold')\n\n# Add grid lines for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5, alpha=0.7)\n\n# Customize ticks\nax.set_xticks(np.arange(0, 31, 5))\nax.set_yticks(np.arange(0, 1.1, 0.2))\n\n# Add a legend with a shadow effect\nax.legend(loc='upper right', fontsize=12, shadow=True)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_64.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\ny1 = np.array([90, 85, 80, 75, 70, 65, 60, 55, 50, 45])\ny2 = np.array([80, 75, 70, 65, 60, 55, 50, 45, 40, 35])\ny3 = np.array([70, 65, 60, 55, 50, 45, 40, 35, 30, 25])\ny4 = np.array([60, 55, 50, 45, 40, 35, 30, 25, 20, 15])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(12.0, 6.0))\n\n# Plot the data with different styles and markers\nax.plot(x, y1, label='BaCE', color='blue', linestyle='-', marker='s', markersize=8)\nax.plot(x, y2, label='LWF', color='teal', linestyle='--', marker='^', markersize=8)\nax.plot(x, y3, label='EWC', color='green', linestyle='-.', marker='o', markersize=8)\nax.plot(x, y4, label='SEQ', color='orange', linestyle=':', marker='D', markersize=8)\n\n# Set labels and title\nax.set_xlabel('Task', fontsize=12)\nax.set_ylabel('Average Accuracy (%)', fontsize=12)\nax.set_title('Comparison of Different Models', fontsize=14, fontweight='bold')\n\n# Add grid for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Customize ticks\nax.set_xticks(x)\nax.set_yticks(np.arange(0, 101, 10))\n\n# Add legend with a shadow effect\nax.legend(loc='upper right', fontsize=10, shadow=True)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_65.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data for plotting\nx = np.arange(1, 11)\ny1 = np.array([95, 85, 75, 65, 55, 45, 35, 25, 15, 5])\ny2 = np.array([88, 78, 68, 58, 48, 38, 28, 18, 8, 0])\n\n# Create a new figure with specified size\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(8.0, 3.0))\n\n# Plot the first dataset\nax1.plot(x, y1, marker='o', linestyle='-', color='b', label='BaCE')\nax1.set_title('Performance Comparison: BaCE vs EWC')\nax1.set_xlabel('Task')\nax1.set_ylabel('Average Accuracy (%)')\nax1.grid(True, which='both', linestyle='--', linewidth=0.5)\nax1.legend()\n\n# Plot the second dataset\nax2.plot(x, y2, marker='^', linestyle='--', color='r', label='LWF')\nax2.plot(x, y2, marker='v', linestyle=':', color='m', label='SEQ')\nax2.set_title('Performance Comparison: LWF vs SEQ')\nax2.set_xlabel('Task')\nax2.set_ylabel('Average Accuracy (%)')\nax2.grid(True, which='both', linestyle='--', linewidth=0.5)\nax2.legend()\n\n# Adjust layout for better spacing\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_66.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.linspace(0, 2000, 100)\ny1 = np.sin(x / 500) * 0.8 + 0.5\ny2 = np.cos(x / 500) * 0.6 + 0.5\ny3 = np.sin(x / 500) * 0.7 + 0.4\ny4 = np.cos(x / 500) * 0.5 + 0.4\n\n# Create a new figure with a larger size for better visibility\nfig, axes = plt.subplots(nrows=2, ncols=2, figsize=(9.0, 7.0), sharex=True, sharey=True)\n\n# Plot the data on each subplot\naxes[0, 0].plot(x, y1, label='model1 Series 1', color='blue')\naxes[0, 0].plot(x, y2, label='model1 Series 2', color='magenta')\naxes[0, 0].set_title('model1 Performance')\naxes[0, 0].set_xlabel('Iterations')\naxes[0, 0].set_ylabel('Success Rate')\naxes[0, 0].legend()\n\naxes[0, 1].plot(x, y1, label='model2 Series 1', color='blue')\naxes[0, 1].plot(x, y2, label='model2 Series 2', color='magenta')\naxes[0, 1].set_title('model2 Performance')\naxes[0, 1].set_xlabel('Iterations')\naxes[0, 1].set_ylabel('Success Rate')\naxes[0, 1].legend()\n\naxes[1, 0].plot(x, y3, label='model3 Series 1', color='blue')\naxes[1, 0].plot(x, y4, label='model3 Series 2', color='magenta')\naxes[1, 0].set_title('model3 Performance')\naxes[1, 0].set_xlabel('Iterations')\naxes[1, 0].set_ylabel('Success Rate')\naxes[1, 0].legend()\n\naxes[1, 1].plot(x, y3, label='model4 Series 1', color='blue')\naxes[1, 1].plot(x, y4, label='model4 Series 2', color='magenta')\naxes[1, 1].set_title('model4 Performance')\naxes[1, 1].set_xlabel('Iterations')\naxes[1, 1].set_ylabel('Success Rate')\naxes[1, 1].legend()\n\n# Adjust layout for better spacing\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_67.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.array([2, 3, 4, 5, 6, 7, 8])\ny1 = np.array([2.5, 3.2, 3.8, 4.5, 4.9, 5.1, 5.5])\ny2 = np.array([2.8, 3.5, 4.0, 4.7, 5.0, 5.3, 5.7])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(6.0, 5.0))\n\n# Plot the data with different styles\nax.plot(x, y1, label='IHM', color='blue', linestyle='--', marker='o', markersize=5)\nax.plot(x, y2, label='SDM', color='orange', linestyle='-', marker='s', markersize=5)\n\n# Set labels and title\nax.set_xlabel('Number of microphones')\nax.set_ylabel('WER(%)')\nax.set_title('WER vs Number of Microphones')\n\n# Add grid for better readability\nax.grid(True, linestyle='--', alpha=0.6)\n\n# Add legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_68.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.array([2, 3, 4, 5, 6, 7, 8])\ny1 = np.array([2.5, 3.2, 4.1, 5.0, 5.9, 6.8, 7.7])\ny2 = np.array([2.0, 2.8, 3.7, 4.6, 5.5, 6.4, 7.3])\ny3 = np.array([1.5, 2.3, 3.2, 4.1, 5.0, 5.9, 6.8])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(8.0, 7.0))\n\n# Plot the data with different styles and markers\nax.plot(x, y1, label='IHM Trend', color='green', linestyle='-', linewidth=2, marker='o', markersize=6)\nax.plot(x, y2, label='SDM Trend', color='purple', linestyle='--', linewidth=2, marker='s', markersize=6)\nax.plot(x, y3, label='AMI Trend', color='orange', linestyle='-.', linewidth=2, marker='^', markersize=6)\n\n# Set labels and title\nax.set_xlabel('Number of microphones')\nax.set_ylabel('WER (%)')\nax.set_title('Trend Analysis')\n\n# Add grid for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Add legend with a shadow effect\nax.legend(loc='upper right', shadow=True)\n\n# Annotate specific points\nfor i, txt in enumerate(y1):\n    ax.annotate(f'{txt:.1f}', (x[i], y1[i]), textcoords=\"offset points\", xytext=(0,10), ha='center')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_69.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.array([2, 3, 4, 5, 6, 7, 8])\ny1 = np.array([0.2, 0.3, 0.5, 0.7, 0.9, 1.1, 1.3])\ny2 = np.array([0.1, 0.2, 0.4, 0.6, 0.8, 1.0, 1.2])\ny3 = np.array([0.3, 0.4, 0.6, 0.8, 1.0, 1.2, 1.4])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Plot the data with different styles\nax.plot(x, y1, label='Highlight 3', color='orange', linestyle='--', marker='s')\nax.plot(x, y2, label='Highlight 5', color='blue', linestyle='-', marker='o')\nax.plot(x, y3, label='Highlight 7', color='red', linestyle=':', marker='^')\n\n# Set labels and title\nax.set_xlabel('Number of Microphones')\nax.set_ylabel('WER (%)')\nax.set_title('WER vs Number of Microphones')\n\n# Add a horizontal line for reference\nax.axhline(y=0.7, color='r', linestyle='--')\n\n# Add grid lines\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Add legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.linspace(0, 1, 100)\ny1 = np.sin(x * np.pi * 2)\ny2 = np.cos(x * np.pi * 2)\ny3 = np.tan(x * np.pi * 2)\n\n# Create a new figure with a larger size for better visibility\nfig, axes = plt.subplots(nrows=1, ncols=3, figsize=(12.0, 4.0), sharex=True, sharey=True)\n\n# Plot the first subplot\naxes[0].plot(x, y1, color='blue', linewidth=2, linestyle='-', marker='o', markersize=5)\naxes[0].fill_between(x, y1 - 0.1, y1 + 0.1, color='lightblue', alpha=0.5)\naxes[0].set_title('a')\naxes[0].set_xlabel('Positive bound.')\naxes[0].grid(True)\n\n# Plot the second subplot\naxes[1].plot(x, y2, color='green', linewidth=2, linestyle='--', marker='s', markersize=5)\naxes[1].fill_between(x, y2 - 0.1, y2 + 0.1, color='lightgreen', alpha=0.5)\naxes[1].set_title('b')\naxes[1].set_xlabel('Negative bound.')\naxes[1].grid(True)\n\n# Plot the third subplot\naxes[2].plot(x, y3, color='red', linewidth=2, linestyle='-.', marker='^', markersize=5)\naxes[2].fill_between(x, y3 - 0.1, y3 + 0.1, color='salmon', alpha=0.5)\naxes[2].set_title('c')\naxes[2].set_xlabel('Contrastive loss weight.')\naxes[2].grid(True)\n\n# Adjust layout for better spacing\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_70.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.array([2, 3, 4, 5, 6, 7, 8])\ny1 = np.array([0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9])\ny2 = np.array([0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8])\n\n# Create a new figure with specified size\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12.0, 5.0))\n\n# Plot the first subplot\nax1.plot(x, y1, label='LibriCSS WER', color='gold', linestyle='-', linewidth=2, marker='o', markersize=8)\nax1.fill_between(x, y1 - 0.1, y1 + 0.1, color='gold', alpha=0.3)\nax1.set_title('WER (%)')\nax1.set_xlabel('Number of Microphones')\nax1.set_ylabel('WER (%)')\nax1.axhline(y=0.5, color='red', linestyle='--', linewidth=1.5)\nax1.legend()\n\n# Plot the second subplot\nax2.plot(x, y2, label='Threshold', color='darkgreen', linestyle='-', linewidth=2, marker='s', markersize=8)\nax2.fill_between(x, y2 - 0.1, y2 + 0.1, color='darkgreen', alpha=0.3)\nax2.set_title('Threshold')\nax2.set_xlabel('Number of Microphones')\nax2.set_ylabel('Threshold')\nax2.axhline(y=0.5, color='red', linestyle='--', linewidth=1.5)\nax2.legend()\n\n# Adjust layout for better spacing\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_71.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nratio_r = np.linspace(0.1, 1.0, 100)\nperformance_pna = np.sin(ratio_r * np.pi / 2) + 0.5\nperformance_gin = np.cos(ratio_r * np.pi / 2) + 0.5\n\n# Create a new figure with specified size\nfig, axes = plt.subplots(nrows=3, ncols=1, figsize=(6.0, 12.0), sharex=True)\n\n# Plot the first subplot\naxes[0].fill_between(ratio_r, performance_pna - 0.1, performance_pna + 0.1, color='skyblue', alpha=0.5)\naxes[0].plot(ratio_r, performance_pna, label='PNA', color='royalblue', linestyle='-', linewidth=2, marker='o', markersize=4)\naxes[0].set_title('SPMotif-0.5')\naxes[0].set_ylabel('Performance')\naxes[0].legend()\n\n# Plot the second subplot\naxes[1].fill_between(ratio_r, performance_pna - 0.1, performance_pna + 0.1, color='lightgreen', alpha=0.5)\naxes[1].plot(ratio_r, performance_gin, label='GIN', color='forestgreen', linestyle='--', linewidth=2, marker='s', markersize=4)\naxes[1].set_title('SPMotif-0.7')\naxes[1].set_ylabel('Performance')\naxes[1].legend()\n\n# Plot the third subplot\naxes[2].fill_between(ratio_r, performance_pna - 0.1, performance_pna + 0.1, color='skyblue', alpha=0.5)\naxes[2].plot(ratio_r, performance_gin, label='GIN', color='forestgreen', linestyle='--', linewidth=2, marker='s', markersize=4)\naxes[2].set_title('SPMotif-0.9')\naxes[2].set_xlabel('Ratio r')\naxes[2].set_ylabel('Performance')\naxes[2].legend()\n\n# Adjust layout for better spacing\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_72.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.linspace(0.1, 1.0, 10)\ny1 = np.sin(x) * np.cos(x)\ny2 = np.sin(x) * np.cos(x) + 0.5\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Plot the data with enhanced styles\nax.plot(x, y1, label='PNA + ours', color='magenta', linestyle='-', linewidth=2, marker='o', markersize=6, markevery=2)\nax.plot(x, y2, label='GIN + ours', color='orange', linestyle='--', linewidth=2, marker='s', markersize=6, markevery=2)\n\n# Set labels and title with improved font sizes\nax.set_xlabel('Ratio r', fontsize=12)\nax.set_ylabel('Performance', fontsize=12)\nax.set_title('Dynamic Performance Trends', fontsize=14, fontweight='bold')\n\n# Add grid for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5, alpha=0.7)\n\n# Customize ticks\nax.set_xticks(np.arange(0.1, 1.1, 0.1))\nax.set_yticks(np.arange(-1.0, 1.1, 0.5))\n\n# Add a legend with a shadow effect\nax.legend(loc='upper right', fontsize=10, shadow=True)\n\n# Fill between lines for visual emphasis\nax.fill_between(x, y1, y2, where=(y1 < y2), color='lightgrey', alpha=0.3)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_73.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nr = np.array([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0])\npna_ours = np.array([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0])\ngin_ours = np.array([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data with enhanced styles\nax.plot(r, pna_ours, label='PNA + ours', color='purple', linestyle='-', marker='o', markersize=5)\nax.plot(r, gin_ours, label='GIN + ours', color='orange', linestyle='--', marker='s', markersize=5)\n\n# Set labels and title with improved font sizes\nax.set_xlabel('Ratio r', fontsize=12)\nax.set_ylabel('Performance', fontsize=12)\nax.set_title('Modern Linear Performance Evaluation', fontsize=14, fontweight='bold')\n\n# Add grid for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Add a legend with a shadow effect\nax.legend(loc='upper left', fontsize=10, shadow=True)\n\n# Customize ticks for better readability\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_74.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nr_values = np.array([0.2, 0.4, 0.6, 0.8, 1.0])\nperformance_pna = np.array([0.5, 0.7, 0.9, 0.8, 0.6])\nperformance_gin = np.array([0.3, 0.5, 0.7, 0.6, 0.4])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot the data with enhanced styles\nax.plot(r_values, performance_pna, label='PNA + ours', color='b', linestyle='-', marker='o', markersize=8, linewidth=2)\nax.plot(r_values, performance_gin, label='GIN + ours', color='r', linestyle='--', marker='s', markersize=8, linewidth=2)\n\n# Set labels and title with improved font sizes\nax.set_xlabel('Ratio r', fontsize=12)\nax.set_ylabel('Performance', fontsize=12)\nax.set_title('Dynamic Model Performance', fontsize=14, fontweight='bold')\n\n# Add grid for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5, alpha=0.7)\n\n# Customize ticks\nax.set_xticks(r_values)\nax.set_yticks(np.arange(0, 1.1, 0.2))\n\n# Add a legend with a shadow effect\nax.legend(loc='upper right', fontsize=10, shadow=True)\n\n# Annotate specific points for emphasis\nfor i, (x, y) in enumerate(zip(r_values, performance_pna)):\n    ax.annotate(f'{y:.1f}', xy=(x, y), xytext=(x+0.05, y+0.05),\n                arrowprops=dict(facecolor='black', shrink=0.05),\n                fontsize=9, color='blue')\n\nfor i, (x, y) in enumerate(zip(r_values, performance_gin)):\n    ax.annotate(f'{y:.1f}', xy=(x, y), xytext=(x-0.05, y-0.05),\n                arrowprops=dict(facecolor='black', shrink=0.05),\n                fontsize=9, color='red')\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_75.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nensemble_sizes = np.arange(5, 30, 2)\nmodel1_accuracies = [70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98]\nmodel2_accuracies = [75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99, 100, 100]\n\n# Create a new figure with a larger size for better visibility\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot the data with enhanced styles\nax.plot(ensemble_sizes, model1_accuracies, label='Model 1 Mean Accuracy', color='royalblue', linestyle='-', linewidth=2, marker='o', markersize=5)\nax.plot(ensemble_sizes, model2_accuracies, label='Model 2 Mean Accuracy', color='darkred', linestyle='--', linewidth=2, marker='s', markersize=5)\n\n# Add grid lines for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5, alpha=0.7)\n\n# Set labels and title with improved font sizes\nax.set_xlabel('Ensemble Size', fontsize=12)\nax.set_ylabel('Accuracy', fontsize=12)\nax.set_title('Comparison of Model Accuracies', fontsize=14, fontweight='bold')\n\n# Customize the legend\nax.legend(loc='upper left', fontsize=10)\n\n# Set x and y axis limits\nax.set_xlim(5, 30)\nax.set_ylim(60, 100)\n\n# Add annotations to highlight specific points\nfor i, acc in enumerate(model1_accuracies):\n    ax.annotate(f'{acc}%', xy=(ensemble_sizes[i], acc), xytext=(ensemble_sizes[i] + 1, acc - 2),\n                arrowprops=dict(facecolor='black', shrink=0.05), fontsize=9)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_76.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.arange(1, 10)\ny1 = np.array([75, 78, 80, 82, 84, 86, 88, 90, 92])\ny2 = np.array([70, 73, 75, 77, 79, 81, 83, 85, 87])\ny3 = np.array([65, 68, 70, 72, 74, 76, 78, 80, 82])\n\n# Create a new figure with specified size\nfig, axes = plt.subplots(nrows=3, ncols=1, figsize=(8.0, 12.0), sharex=True)\n\n# Plot the first subplot\naxes[0].plot(x, y1, label='Config A - Model X', color='red', linestyle='-', marker='o')\naxes[0].plot(x, y2, label='Config B - Model X', color='green', linestyle='--', marker='s')\naxes[0].plot(x, y3, label='Config C - Model X', color='blue', linestyle='-.', marker='^')\naxes[0].set_title('Performance of Model X')\naxes[0].set_ylabel('Score')\naxes[0].legend()\n\n# Plot the second subplot\naxes[1].plot(x, y1, label='Config A - Model X', color='red', linestyle='-', marker='o')\naxes[1].plot(x, y2, label='Config B - Model X', color='green', linestyle='--', marker='s')\naxes[1].plot(x, y3, label='Config C - Model X', color='blue', linestyle='-.', marker='^')\naxes[1].set_title('Performance of Model Y')\naxes[1].set_ylabel('Score')\naxes[1].legend()\n\n# Plot the third subplot\naxes[2].plot(x, y1, label='Config A - Model X', color='red', linestyle='-', marker='o')\naxes[2].plot(x, y2, label='Config B - Model X', color='green', linestyle='--', marker='s')\naxes[2].plot(x, y3, label='Config C - Model X', color='blue', linestyle='-.', marker='^')\naxes[2].set_title('Performance of Model Z')\naxes[2].set_xlabel('Iteration')\naxes[2].set_ylabel('Score')\naxes[2].legend()\n\n# Adjust layout for better spacing\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_77.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\niterations = np.arange(1, 11)\nperformance_a = [75, 78, 80, 82, 84, 86, 88, 90, 92, 94]\nperformance_b = [73, 75, 77, 79, 81, 83, 85, 87, 89, 91]\nperformance_c = [72, 74, 76, 78, 80, 82, 84, 86, 88, 90]\n\n# Create a new figure with a larger size for better visibility\nfig, axes = plt.subplots(nrows=3, ncols=1, figsize=(8.0, 12.0), sharex=True)\n\n# Plot the first subplot\naxes[0].plot(iterations, performance_a, label='Config A - Llama', color='pink', linestyle='--', marker='o')\naxes[0].plot(iterations, performance_b, label='Config B - Llama', color='lightgreen', linestyle='--', marker='s')\naxes[0].plot(iterations, performance_c, label='Config C - Llama', color='skyblue', linestyle='--', marker='^')\naxes[0].set_title('Performance of Llama')\naxes[0].set_ylabel('Score')\naxes[0].legend()\naxes[0].grid(True)\n\n# Plot the second subplot\naxes[1].plot(iterations, performance_a, label='Config A - Falcon', color='pink', linestyle='-', marker='o')\naxes[1].plot(iterations, performance_b, label='Config B - Falcon', color='lightgreen', linestyle='-', marker='s')\naxes[1].plot(iterations, performance_c, label='Config C - Falcon', color='skyblue', linestyle='-', marker='^')\naxes[1].set_title('Performance of Falcon')\naxes[1].set_ylabel('Score')\naxes[1].legend()\naxes[1].grid(True)\n\n# Plot the third subplot\naxes[2].plot(iterations, performance_a, label='Config A - Qwen', color='pink', linestyle='-.', marker='o')\naxes[2].plot(iterations, performance_b, label='Config B - Qwen', color='lightgreen', linestyle='-.', marker='s')\naxes[2].plot(iterations, performance_c, label='Config C - Qwen', color='skyblue', linestyle='-.', marker='^')\naxes[2].set_title('Performance of Qwen')\naxes[2].set_xlabel('Iteration')\naxes[2].set_ylabel('Score')\naxes[2].legend()\naxes[2].grid(True)\n\n# Adjust layout for better spacing between subplots\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_78.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data for multiple brands and their sales growth over quarters\nquarters = ['Q1', 'Q2', 'Q3', 'Q4']\nbrand_a_sales = [1.0, 1.5, 1.8, 2.2]\nbrand_b_sales = [1.2, 1.6, 1.9, 2.4]\nbrand_c_sales = [1.3, 1.7, 2.0, 2.3]\nbrand_d_sales = [1.4, 1.8, 1.9, 2.5]\nbrand_e_sales = [1.5, 1.9, 2.1, 2.6]\nbrand_f_sales = [1.6, 1.9, 2.0, 2.2]\n\n# Create a new figure with a larger size for better visibility\nfig, axes = plt.subplots(nrows=3, ncols=2, figsize=(10.0, 10.0), sharex=True, sharey=True)\n\n# Plot each brand's sales growth over quarters\nbrands = ['Brand A', 'Brand B', 'Brand C', 'Brand D', 'Brand E', 'Brand F']\nsales_data = [brand_a_sales, brand_b_sales, brand_c_sales, brand_d_sales, brand_e_sales, brand_f_sales]\n\nfor ax, (brand, sales) in zip(axes.flatten(), zip(brands, sales_data)):\n    ax.plot(quarters, sales, marker='o', linestyle='-', label=f'{brand} Sales Growth')\n    ax.set_title(brand)\n    ax.set_xlabel('Quarter')\n    ax.set_ylabel('Sales Growth')\n    ax.legend()\n\n# Adjust layout to prevent overlap\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_79.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.array([100, 200, 300, 400, 500, 600, 700])\ny1 = np.array([0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1])\ny2 = np.array([0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0])\ny3 = np.array([0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9])\ny4 = np.array([0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8])\n\n# Create a new figure with a larger size for better visibility\nfig, axes = plt.subplots(1, 4, figsize=(18.0, 4.0), sharey=True)\n\n# Plot the first subplot\naxes[0].plot(x, y1, label='ECL Run 1', color='blue', marker='o')\naxes[0].set_title('Traffic Performance')\naxes[0].set_xlabel('Time (s)')\naxes[0].set_ylabel('Metric Value')\naxes[0].grid(True)\naxes[0].legend()\n\n# Plot the second subplot\naxes[1].plot(x, y2, label='ETMm2 Performance', color='orange', marker='s')\naxes[1].set_title('ETMm2 Performance')\naxes[1].set_xlabel('Time (s)')\naxes[1].grid(True)\naxes[1].legend()\n\n# Plot the third subplot\naxes[2].plot(x, y3, label='ETTh2 Performance', color='green', marker='^')\naxes[2].set_title('ETTh2 Performance')\naxes[2].set_xlabel('Time (s)')\naxes[2].grid(True)\naxes[2].legend()\n\n# Plot the fourth subplot\naxes[3].plot(x, y4, label='ECL Performance', color='red', marker='x')\naxes[3].set_title('ECL Performance')\naxes[3].set_xlabel('Time (s)')\naxes[3].grid(True)\naxes[3].legend()\n\n# Adjust layout for better spacing\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ndriving_styles = ['Passive', 'Rail', 'Replay', 'Sportive']\nweather_conditions = ['Dry', 'Rain']\ndata = np.array([\n    [1.2, 1.4, 1.0, 0.8],\n    [0.9, 1.1, 0.7, 0.5]\n])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Plot the data with error bars\nfor i, style in enumerate(driving_styles):\n    ax.errorbar(weather_conditions, data[i], yerr=0.1, fmt='-o', label=style)\n\n# Set labels and title\nax.set_xlabel('Driving Style')\nax.set_ylabel('Relaxation Level')\nax.set_title('Relaxation Levels by Driving Style and Weather')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_80.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.array([1, 2, 3, 4, 5])\ny1 = np.array([50, 60, 70, 80, 90])\ny2 = np.array([40, 55, 65, 75, 85])\n\n# Create a new figure with specified size\nfig, axes = plt.subplots(3, 2, figsize=(9.0, 6.0), constrained_layout=True)\n\n# Plot for Category A Growth\naxes[0, 0].plot(x, y1, label='Run 1', color='purple')\naxes[0, 0].plot(x, y2, label='Run 2', color='teal')\naxes[0, 0].set_title('Category A Growth')\naxes[0, 0].set_xlabel('Phase')\naxes[0, 0].set_ylabel('Cumulative Value')\naxes[0, 0].legend()\naxes[0, 0].grid(True)\n\n# Plot for Category B Growth\naxes[0, 1].plot(x, y1, label='Run 1', color='red')\naxes[0, 1].plot(x, y2, label='Run 2', color='orange')\naxes[0, 1].set_title('Category B Growth')\naxes[0, 1].set_xlabel('Phase')\naxes[0, 1].set_ylabel('Cumulative Value')\naxes[0, 1].legend()\naxes[0, 1].grid(True)\n\n# Plot for Category C Growth\naxes[1, 0].plot(x, y1, label='Run 1', color='purple')\naxes[1, 0].plot(x, y2, label='Run 2', color='teal')\naxes[1, 0].set_title('Category C Growth')\naxes[1, 0].set_xlabel('Phase')\naxes[1, 0].set_ylabel('Cumulative Value')\naxes[1, 0].legend()\naxes[1, 0].grid(True)\n\n# Plot for Category D Growth\naxes[1, 1].plot(x, y1, label='Run 1', color='blue')\naxes[1, 1].plot(x, y2, label='Run 2', color='green')\naxes[1, 1].set_title('Category D Growth')\naxes[1, 1].set_xlabel('Phase')\naxes[1, 1].set_ylabel('Cumulative Value')\naxes[1, 1].legend()\naxes[1, 1].grid(True)\n\n# Plot for Category E Growth\naxes[2, 0].plot(x, y1, label='Run 1', color='blue')\naxes[2, 0].plot(x, y2, label='Run 2', color='green')\naxes[2, 0].set_title('Category E Growth')\naxes[2, 0].set_xlabel('Phase')\naxes[2, 0].set_ylabel('Cumulative Value')\naxes[2, 0].legend()\naxes[2, 0].grid(True)\n\n# Plot for Category F Growth\naxes[2, 1].plot(x, y1, label='Run 1', color='red')\naxes[2, 1].plot(x, y2, label='Run 2', color='orange')\naxes[2, 1].set_title('Category F Growth')\naxes[2, 1].set_xlabel('Phase')\naxes[2, 1].set_ylabel('Cumulative Value')\naxes[2, 1].legend()\naxes[2, 1].grid(True)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create data\nx = np.array([4, 6, 10, 30])\ny1 = np.array([1e-8, 1e-6, 1e-4, 1e-2])\ny2 = np.array([1e-10, 1e-8, 1e-6, 1e-4])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(9.0, 6.0))\n\n# Plot the data with different styles\nax.plot(x, y1, label='Standard', color='blue', linestyle='-', marker='o')\nax.plot(x, y2, label='Constrained', color='orange', linestyle='--', marker='x')\n\n# Set labels and title\nax.set_xlabel('N', fontsize=12)\nax.set_ylabel('Error', fontsize=12)\nax.set_title('Error Comparison', fontsize=14)\n\n# Add grid for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Set logarithmic scale for x-axis\nax.set_xscale('log')\n\n# Add legend with a shadow effect\nax.legend(loc='upper right', shadow=True)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the bar chart\nregions = ['South', 'North', 'East', 'West']\npercentages = [25, 40, 15, 30]\n\n# Create a new figure with specified size\nfig, ax1 = plt.subplots(figsize=(10.0, 5.0))\n\n# Plot the bar chart\nbars = ax1.bar(regions, percentages, color=['lightblue', 'skyblue', 'lightcoral', 'lavender'])\n\n# Add labels and title to the bar chart\nax1.set_ylabel('Percentage (%)')\nax1.set_title('Literacy Rate by Region')\n\n# Add data labels on top of each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax1.text(bar.get_x() + bar.get_width()/2, yval + 0.5, f'{yval}%', ha='center', va='bottom')\n\n# Create a second y-axis for the pie chart\nax2 = ax1.twinx()\n\n# Data for the pie chart\npie_labels = ['Central', 'North', 'East', 'West']\npie_sizes = [5, 10, 15, 35]\npie_colors = ['#ff9999','#66b3ff','#99ff99','#ffcc99']\n\n# Plot the pie chart\nwedges, texts, autotexts = ax2.pie(pie_sizes, colors=pie_colors, startangle=90, wedgeprops=dict(width=0.4), autopct='%1.1f%%')\n\n# Add labels to the pie chart\nfor text in texts:\n    text.set_color('grey')\nfor autotext in autotexts:\n    autotext.set_color('white')\n\n# Set labels for the pie chart\nax2.set_yticks([])\nax2.set_aspect('equal')\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create data for the heatmap\ndata = np.array([\n    [0.1, 0.2, 0.3, 0.4, 0.5],\n    [0.6, 0.7, 0.8, 0.9, 1.0],\n    [1.1, 1.2, 1.3, 1.4, 1.5],\n    [1.6, 1.7, 1.8, 1.9, 2.0],\n    [2.1, 2.2, 2.3, 2.4, 2.5]\n])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(8.0, 2.0))\n\n# Plot the heatmap\ncax = ax.imshow(data, cmap='viridis')\n\n# Add color bar\ncbar = fig.colorbar(cax)\n\n# Set labels\nax.set_xlabel('Sensitive attribute')\nax.set_ylabel('Sensitive attribute')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the bar chart\ncategories = ['Engstrom (M1)', 'Zhang (M2)', 'Rice (M3)', 'Rade (M4)', 'Hendrycks (M5)', 'Addep. (M6)', 'Carmon (M7)']\nvalues = [44.15, 44.05, 41.55, 40.90, 40.65, 39.45, 36.70]\nerrors = [0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00]\n\n# Create a new figure with specified size\nfig, ax1 = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot the main data\nbars = ax1.bar(categories, values, color='darkgreen', yerr=errors, capsize=5, label='Robust Error (%)')\n\n# Set labels and title\nax1.set_xlabel('Models')\nax1.set_ylabel('Robust Error (%)', color='darkgreen')\nax1.set_title('Robust Error (%)')\n\n# Add grid lines\nax1.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.7)\n\n# Add value annotations on top of each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax1.text(bar.get_x() + bar.get_width()/2, yval + 0.5, f'{yval:.2f}', ha='center', va='bottom', fontsize=10, color='black')\n\n# Create a second y-axis for the second dataset\nax2 = ax1.twinx()\n\n# Data for the second bar chart\nsecond_categories = ['Engstrom (M1)', 'Zhang (M2)', 'Rice (M3)', 'Rade (M4)', 'Hendrycks (M5)', 'Addep. (M6)', 'Carmon (M7)']\nsecond_values = [0.00, 6.20, 5.15, 2.80, 5.25, 0.00, 0.00]\nsecond_errors = [0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00]\n\n# Plot the second dataset\nbars2 = ax2.bar(second_categories, second_values, color='lightblue', alpha=0.7, label='RNFs (%)', edgecolor='darkblue')\n\n# Set labels for the second y-axis\nax2.set_ylabel('RNFs (%)', color='lightblue')\n\n# Add grid lines for the second y-axis\nax2.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.7)\n\n# Add value annotations on top of each bar for the second dataset\nfor bar in bars2:\n    yval = bar.get_height()\n    ax2.text(bar.get_x() + bar.get_width()/2, yval + 0.5, f'{yval:.2f}', ha='center', va='bottom', fontsize=10, color='darkblue')\n\n# Add a legend\nfig.legend(loc='upper left', bbox_to_anchor=(0.1, 0.9), bbox_transform=ax1.transAxes)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.linspace(0, 180, 100)\ny1 = np.sin(np.radians(x)) * 0.5 + 0.5\ny2 = np.cos(np.radians(x)) * 0.5 + 0.5\ny3 = np.sin(np.radians(x)) * 0.6 + 0.5\ny4 = np.cos(np.radians(x)) * 0.6 + 0.5\n\n# Create a new figure with a larger size for better visibility\nfig, axes = plt.subplots(1, 3, figsize=(10.0, 4.0), sharey=True)\n\n# Plot the first subplot\naxes[0].bar(['Cartesian', 'Retinotopic'], [0.551, 0.538], color='lightcoral')\naxes[0].set_title('VGG16')\naxes[0].set_ylabel('Accuracy')\n\n# Plot the second subplot\naxes[1].bar(['Cartesian', 'Retinotopic'], [0.744, 0.394], color='skyblue')\naxes[1].set_title('Resnet101')\n\n# Plot the third subplot\naxes[2].plot(x, y1, label='VGG16 Cartesian', color='darkred', linestyle='-', marker='o')\naxes[2].plot(x, y2, label='Resnet101 Cartesian', color='royalblue', linestyle='--', marker='s')\naxes[2].plot(x, y3, label='VGG16 Retinotopic', color='darkorange', linestyle='-.', marker='^')\naxes[2].plot(x, y4, label='Resnet101 Polar', color='skyblue', linestyle=':', marker='D')\naxes[2].set_title('Rotation Invariance')\naxes[2].legend(loc='upper right')\n\n# Adjust layout for better spacing\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create sample data for demonstration\ndata = np.array([\n    [0.1, 0.2, 0.3, 0.4],\n    [0.5, 0.6, 0.7, 0.8],\n    [0.9, 1.0, 1.1, 1.2],\n    [1.3, 1.4, 1.5, 1.6]\n])\n\n# Define labels for the x-axis\nlabels = ['PaleSkin', 'OvalFace', 'Smiling', 'BrownHair', 'Attractive', 'Male', 'BigLips', 'PointyNose', 'White', 'BigNose', 'NoBeard', 'HeavyMakeup']\n\n# Create a new figure with specified size\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(8.0, 8.0))\n\n# Plot the heatmap\ncax = ax1.imshow(data, cmap='viridis')\nax1.set_title('Heatmap')\nax1.set_xlabel('Sensitive attribute')\nax1.set_ylabel('Attribute')\nax1.set_xticks(np.arange(len(labels)))\nax1.set_yticks(np.arange(len(labels)))\nax1.set_xticklabels(labels)\nax1.set_yticklabels(labels)\n\n# Add color bar\ncbar = fig.colorbar(cax, ax=ax1)\ncbar.set_label('Intensity')\n\n# Plot the bar chart\nax2.bar(range(len(labels)), np.mean(data, axis=0), color='blue')\nax2.set_title('Bar Chart')\nax2.set_xlabel('Attribute')\nax2.set_ylabel('Average Intensity')\nax2.set_xticks(np.arange(len(labels)))\nax2.set_xticklabels(labels)\n\n# Adjust layout for better spacing\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data for the plot\nx = np.array([0, 10, 20, 30, 40, 50])\ny = np.array([-8.5, -9.2, -9.8, -10.5, -11.0, -11.5])\n\n# Create a new figure with specified size\nfig, ax1 = plt.subplots(figsize=(5.0, 6.0))\n\n# Plot the main line chart\nax1.plot(x, y, marker='o', linestyle='-', color='black', linewidth=2, markersize=8)\nax1.fill_between(x, y - 0.5, y + 0.5, color='gray', alpha=0.3)\n\n# Set labels and title\nax1.set_xlabel('GPT2 Tokenizer rank')\nax1.set_ylabel('Token rarity', color='black')\nax1.set_title('a) Token rarity')\n\n# Create a secondary y-axis for the boxplot\nax2 = ax1.twinx()\nax2.set_ylabel('Loss', color='black')\n\n# Prepare data for the boxplot\ndata = [\n    [2, 3, 4, 5, 6],\n    [3, 4, 5, 6, 7],\n    [4, 5, 6, 7, 8],\n    [5, 6, 7, 8, 9],\n    [6, 7, 8, 9, 10]\n]\n\n# Plot the boxplot\nboxplot = ax2.boxplot(data, positions=x, patch_artist=True, vert=False, widths=0.5)\nfor patch in boxplot['boxes']:\n    patch.set_facecolor('lightgray')\n\n# Add grid lines\nax1.grid(True, which='both', linestyle='--', linewidth=0.5, alpha=0.7)\nax2.grid(False)\n\n# Adjust layout\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the bar chart\ncategories = ['Sentiment', 'Toxicity', 'News']\nvalues = [0.35, 0.20, 0.25]\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(10.0, 4.0))\n\n# Plot the bar chart\nbars = ax.bar(categories, values, color='blue')\n\n# Add labels and title\nax.set_xlabel('Categories')\nax.set_ylabel('Correlation')\nax.set_title('Correlation of Categories')\n\n# Add value annotations on top of each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.01, f'{yval:.2f}', ha='center', va='bottom')\n\n# Add a color bar for reference\ncbar = fig.colorbar(bars)\ncbar.set_label('Color Bar')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_16.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the bar chart\ncategories = ['c1355', 'c1908', 'c2670', 'c3540']\nvalues = [45, 55, 50, 40]\nerrors = [2, 3, 2, 1]\n\n# Create a new figure with specified size\nfig, ax1 = plt.subplots(figsize=(6.0, 6.0))\n\n# Plot the bar chart\nbars = ax1.bar(categories, values, yerr=errors, capsize=5, color='skyblue', edgecolor='black', hatch='///')\n\n# Set labels and title\nax1.set_xlabel('Category')\nax1.set_ylabel('# successful adv. circuits', color='tab:blue')\nax1.set_title('Success Rate of Adversarial Circuits')\n\n# Add grid lines\nax1.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.7)\n\n# Add annotations for error bars\nfor bar, error in zip(bars, errors):\n    yval = bar.get_height()\n    ax1.text(bar.get_x() + bar.get_width()/2, yval + error + 1, f'{error}', ha='center', va='bottom', fontsize=8, color='black')\n\n# Create a second y-axis for the box plot\nax2 = ax1.twinx()\n\n# Data for the box plot\nbox_data = [np.random.normal(0.5, 0.1, 100), np.random.normal(0.55, 0.15, 100)]\n\n# Plot the box plot\nbox_plot = ax2.boxplot(box_data, positions=[0.5, 1.5], patch_artist=True, showmeans=True, meanline=True, showfliers=False)\ncolors = ['orange', 'red']\nfor patch, color in zip(box_plot['boxes'], colors):\n    patch.set_facecolor(color)\n    patch.set_edgecolor('black')\n\n# Set labels for the second y-axis\nax2.set_ylabel('OMLA KPA', color='tab:orange')\n\n# Add horizontal lines for thresholds\nax2.axhline(y=0.5, color='red', linestyle='--', linewidth=1.5, label='Upper success threshold')\nax2.axhline(y=0.45, color='darkorange', linestyle='--', linewidth=1.5, label='Lower success threshold')\n\n# Add legend\nax2.legend(loc='upper right')\n\n# Adjust layout\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_17.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data for the first chart\nstudy_levels = np.array([0, 1, 2, 3, 4, 5])\nknowledge_increase = np.array([20, 30, 40, 50, 60, 70])\n\n# Sample data for the second chart\ndomains = ['Education', 'Law', 'Technology', 'History', 'Geography', 'Humanities', 'Finance']\npublications = np.array([250, 180, 300, 120, 150, 200, 220])\n\n# Create a new figure with a larger size for better visibility\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10.0, 4.0))\n\n# Plot the first chart: Knowledge Increase by Study Area\nax1.plot(study_levels, knowledge_increase, marker='o', linestyle='-', color='blue')\nax1.fill_between(study_levels, knowledge_increase, color='lightblue', alpha=0.3)\nax1.set_title('Knowledge Increase by Subject Area')\nax1.set_xlabel('Study Level')\nax1.set_ylabel('Cumulative Knowledge (%)')\n\n# Add a legend for clarity\nax1.legend(['Knowledge'])\n\n# Plot the second chart: Number of Publications by Domain\nax2.bar(domains, publications, color=['blue', 'green', 'orange', 'purple', 'cyan', 'magenta', 'lime'])\nax2.set_title('Number of Publications by Domain')\nax2.set_xlabel('Domain')\nax2.set_ylabel('Publications')\n\n# Adjust layout to prevent overlap\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_18.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data for the line chart\nyears = np.array([2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022])\nhardware = np.array([10, 15, 20, 30, 40, 50, 60, 70])\nsoftware = np.array([12, 18, 25, 35, 45, 55, 65, 75])\nai = np.array([14, 20, 28, 40, 50, 60, 70, 80])\n\n# Create a new figure with specified size\nfig, ax1 = plt.subplots(figsize=(8.0, 10.0))\n\n# Plot the line chart\nax1.plot(years, hardware, label='Hardware', color='royalblue', linestyle='-', linewidth=2)\nax1.plot(years, software, label='Software', color='darkorange', linestyle='--', linewidth=2)\nax1.plot(years, ai, label='AI', color='forestgreen', linestyle='-.', linewidth=2)\n\n# Set labels and title for the line chart\nax1.set_xlabel('Year')\nax1.set_ylabel('Progress (%)', color='black')\nax1.set_title('Technological Advancements', fontsize=14, fontweight='bold')\n\n# Add a legend\nax1.legend(loc='upper left')\n\n# Create a secondary y-axis for the bar chart\nax2 = ax1.twinx()\n\n# Sample data for the bar chart\nsectors = ['Big Tech', 'Startups', 'Academia', 'Government']\ninnovation_gaps = [30, 25, 20, 15]\ninnovation_gaps_std = [5, 4, 3, 2]\n\n# Plot the bar chart\nbars = ax2.bar(sectors, innovation_gaps, yerr=innovation_gaps_std, color=['royalblue', 'darkorange', 'forestgreen', 'red'], alpha=0.7, edgecolor='black')\n\n# Set labels and title for the bar chart\nax2.set_ylabel('Innovation Gap (%)', color='black')\nax2.set_title('Innovation Gaps Across Different Sectors in Technology', fontsize=14, fontweight='bold')\n\n# Add value annotations on top of each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax2.text(bar.get_x() + bar.get_width()/2, yval + 1, f'{yval}', ha='center', va='bottom', fontsize=10, color='black')\n\n# Adjust layout to prevent overlap\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_19.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the bar chart\ncountries = ['USA', 'UK', 'Germany', 'France', 'Italy', 'Spain']\ncrime_rates = [3.2, 2.8, 2.5, 2.9, 3.1, 2.7]\n\n# Create a new figure with specified size\nfig, ax1 = plt.subplots(figsize=(8.0, 10.0))\n\n# Plot the bar chart\nbars = ax1.bar(countries, crime_rates, color='orange', edgecolor='black', linewidth=1.2)\nax1.set_ylabel('Crime Rate per 100,000 Inhabitants', fontsize=12)\nax1.set_title('Average Legal Crime Rates by Country', fontsize=14, fontweight='bold')\nax1.set_xlabel('Country', fontsize=12)\n\n# Add value labels on top of each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax1.text(bar.get_x() + bar.get_width()/2, yval + 0.05, f'{yval:.1f}', ha='center', va='bottom', fontsize=10)\n\n# Set y-axis limits and ticks\nax1.set_ylim(0, 3.5)\nax1.set_yticks(np.arange(0, 3.6, 0.5))\n\n# Add grid lines for better readability\nax1.yaxis.grid(True, linestyle='--', alpha=0.7)\n\n# Create a second y-axis for the line chart\nax2 = ax1.twinx()\n\n# Data for the line chart\ncrimes = ['Theft', 'Assault', 'Fraud', 'Drug Trafficking', 'Vandalism']\nrates = [120, 150, 130, 110, 140]\n\n# Plot the line chart\nax2.plot(crimes, rates, marker='o', linestyle='-', color='teal', linewidth=2, markersize=8, label='Crimes')\n\n# Set y-axis limits and ticks for the line chart\nax2.set_ylim(0, 200)\nax2.set_yticks(np.arange(0, 201, 50))\n\n# Add a horizontal line for reference\nax2.axhline(y=100, color='gray', linestyle='--', linewidth=1)\n\n# Add a legend for the line chart\nax2.legend(loc='upper left', fontsize=10)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the histogram\nscores = [45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100]\n\n# Create a new figure with specified size\nfig, ax1 = plt.subplots(figsize=(10.0, 5.0))\n\n# Plot the histogram\nn, bins, patches = ax1.hist(scores, bins=range(40, 110, 5), color='orange', alpha=0.7, edgecolor='black')\n\n# Set labels and title\nax1.set_xlabel('Score')\nax1.set_ylabel('Number of Students')\nax1.set_title('Student Performance in Schools')\n\n# Add a second y-axis for annotations\nax2 = ax1.twinx()\nfor i, patch in enumerate(patches):\n    ax2.annotate(f'{n[i]}', xy=(patch.get_x() + patch.get_width() / 2, n[i]), \n                 xytext=(0, 5), textcoords='offset points', ha='center', va='bottom')\n\n# Data for the pie chart\nlabels = ['Books', 'Staff', 'Facilities', 'Technology', 'Extracurricular']\nsizes = [80, 20, 30, 25, 15]\ncolors = ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd']\nexplode = (0.1, 0, 0, 0, 0)\n\n# Create a new subplot for the pie chart\nax3 = fig.add_subplot(1, 2, 2)\nwedges, texts, autotexts = ax3.pie(sizes, explode=explode, labels=labels, colors=colors, autopct='%1.1f%%', startangle=140, wedgeprops=dict(width=0.4))\n\n# Enhance the pie chart\nax3.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\nax3.set_title('Resource Allocation in Schools')\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_20.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data for the first plot\ndata1 = np.array([10, 20, 30, 40, 50])\ndata2 = np.array([15, 25, 35, 45, 55])\n\n# Create a new figure with a larger size for better visibility\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10.0, 5.0))\n\n# Plot 1: Scatter plot with different regions\nax1.scatter(data1, data2, c=['blue', 'green', 'red'], s=100, alpha=0.6)\nax1.set_title('Average Annual Temperature')\nax1.set_xlabel('Region 1')\nax1.set_ylabel('Region 2')\n\n# Plot 2: Histogram with different elevation distributions\nelevation = np.array([100, 200, 300, 400, 500, 600, 700, 800, 900, 1000])\nax2.hist(elevation, bins=10, color='lightcoral', edgecolor='black')\nax2.set_title('Geographical Elevation Distribution')\nax2.set_xlabel('Elevation (m)')\nax2.set_ylabel('Density')\n\n# Add a legend to the second plot\nax2.legend(['Lowland', 'Highland', 'Plateau'])\n\n# Adjust layout for better spacing\nplt.tight_layout()\n\n# Show the plots\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_21.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the first chart\nyears = ['2019', '2020', '2021', '2022']\ntotal_investment = [300, 250, 200, 150]\nstocks = [100, 80, 60, 40]\nbonds = [70, 60, 50, 40]\nreal_estate = [50, 40, 30, 20]\n\n# Create a new figure with a larger size for better visibility\nfig, (ax1, ax2, ax3) = plt.subplots(1, 3, figsize=(10, 5), sharey=True)\n\n# Plot the first chart: Total Investment Over Time\nax1.barh(years, total_investment, color='lightblue', label='Total Investment')\nax1.barh(years, stocks, left=total_investment, color='green', label='Stocks')\nax1.barh(years, bonds, left=[x + y for x, y in zip(total_investment, stocks)], color='blue', label='Bonds')\nax1.barh(years, real_estate, left=[x + y + z for x, y, z in zip(total_investment, stocks, bonds)], color='orange', label='Real Estate')\n\nax1.set_xlabel('Investment Growth Over Time (%)')\nax1.set_ylabel('Year')\nax1.set_title('Total Investment Over Time')\nax1.legend()\n\n# Plot the second chart: Popularity of Financial Products\nproducts = ['Savings', 'CDs', 'Stocks', 'Bonds', 'ETFs', 'Mutual Funds']\npopularity = [200, 180, 175, 160, 150, 140]\n\nax2.barh(products, popularity, color='skyblue', label='Popularity')\nax2.set_xlabel('Popularity of Financial Products')\nax2.set_title('Popularity of Financial Products')\nax2.legend()\n\n# Plot the third chart: Loan Amount Distribution by Region\nloan_amounts = [10000, 20000, 30000, 40000]\nregions = ['Urban Loans', 'Rural Loans']\nloan_distribution = [np.random.randint(10, 50, size=len(regions)) for _ in loan_amounts]\n\nfor i, amount in enumerate(loan_amounts):\n    ax3.barh(regions, loan_distribution[i], left=np.sum(loan_distribution[:i], axis=0), height=0.5, alpha=0.7, label=f'{amount}$')\n\nax3.set_xlabel('Loan Amount Distribution by Region')\nax3.set_title('Loan Amount Distribution by Region')\nax3.legend()\n\n# Adjust layout and display the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_22.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data for the bar chart\ncategories = ['Image Recog.', 'Speech Recog.', 'Language Proc.', 'Game AI']\nvalues = [85, 75, 90, 95]\n\n# Create a new figure with specified size\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10.0, 10.0), gridspec_kw={'width_ratios': [3, 2]})\n\n# Bar chart for success rate\nax1.bar(categories, values, color='skyblue', edgecolor='gray')\nax1.set_title('AI Task Success Rates')\nax1.set_xlabel('Algorithm')\nax1.set_ylabel('Success Rate (%)')\n\n# Scatter plot for efficiency scores\nefficiency_scores = [90, 85, 88, 92]\nefficiency_x = np.arange(len(categories))\nax2.scatter(efficiency_x, efficiency_scores, color='red', label='Efficiency (%)')\nax2.plot(efficiency_x, efficiency_scores, color='red', linestyle='--', marker='o')\nax2.set_title('Algorithm Efficiency Scores')\nax2.set_xlabel('Model')\nax2.set_ylabel('Efficiency (%)')\nax2.set_xticks(efficiency_x)\nax2.set_xticklabels(categories)\nax2.legend()\n\n# Add grid lines for better readability\nax1.grid(True, which='both', linestyle='--', linewidth=0.5)\nax2.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Adjust layout for better spacing\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_23.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data for traffic volume by time of day\ntime_of_day = np.array([100, 200, 300, 400, 500, 600, 700])\nmorning_traffic = np.array([10, 20, 30, 40, 50, 60, 70])\nevening_traffic = np.array([15, 25, 35, 45, 55, 65, 75])\n\n# Create a new figure with a larger size for better visibility\nfig, axes = plt.subplots(1, 3, figsize=(10.0, 10.0))\n\n# Plot 1: Traffic Volume by Time of Day\naxes[0].bar(time_of_day, morning_traffic, color='orange', label='Morning Traffic')\naxes[0].bar(time_of_day, evening_traffic, bottom=morning_traffic, color='green', label='Evening Traffic')\naxes[0].set_title('Traffic Volume by Time of Day')\naxes[0].set_xlabel('Number of Vehicles')\naxes[0].set_ylabel('Time of Day (km/h)')\naxes[0].legend()\n\n# Plot 2: Speed Distribution by Location\nspeeds = np.array([20, 30, 40, 50, 60, 70, 80])\nlocations = ['Urban', 'Highway']\nfor i, loc in enumerate(locations):\n    axes[1].hist(speeds + i*10, bins=10, range=(20, 90), alpha=0.5, label=loc)\naxes[1].set_title('Speed Distribution by Location')\naxes[1].set_xlabel('Speed (km/h)')\naxes[1].set_ylabel('Frequency')\naxes[1].legend()\n\n# Plot 3: Elevation Changes Along a Route\nelevation = np.array([0, 100, 150, 200, 250, 300, 350, 400, 450, 500, 550, 600, 650, 700, 750, 800, 850, 900, 950, 1000])\ndistance = np.arange(len(elevation))\naxes[2].plot(distance, elevation, color='purple')\naxes[2].set_title('Elevation Changes Along a Route')\naxes[2].set_xlabel('Distance (m)')\naxes[2].set_ylabel('Elevation (m)')\n\n# Adjust layout and display the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_24.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the pie chart\nlabels = ['Literature', 'Performing Arts', 'Visual Arts', 'Music', 'Dance']\nsizes = [10, 30, 25, 15, 20]\ncolors = ['#ff9999','#66b3ff','#99ff99','#ffcc99','#c2c2f0']\nexplode = (0.1, 0, 0, 0, 0)  # explode 1st slice\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Plot the pie chart\nwedges, texts, autotexts = ax.pie(sizes, explode=explode, labels=labels, colors=colors,\n                                  autopct='%1.1f%%', shadow=True, startangle=140)\n\n# Enhance the pie chart with additional features\nax.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\nax.set_title('Distribution of Arts Education Programs')\n\n# Add a legend\nax.legend(wedges, labels, title=\"Arts\", loc=\"center left\", bbox_to_anchor=(1, 0, 0.5, 1))\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_25.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nregions = ['Region 1', 'Region 2', 'Region 3', 'Region 4', 'Region 5']\nproducts = ['Product A', 'Product B', 'Product C', 'Product D', 'Product E', 'Product F']\nsales = [\n    [25000, 20000, 15000, 10000, 5000],\n    [22000, 18000, 13000, 8000, 3000],\n    [21000, 17000, 12000, 7000, 2000],\n    [20000, 16000, 11000, 6000, 1500],\n    [19000, 15000, 10000, 5000, 1000]\n]\n\n# Create a new figure with a specific size\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10.0, 5.0), gridspec_kw={'width_ratios': [2, 3]})\n\n# Plot 1: Bar chart for sales by region\nax1.bar(regions, [sum(region) for region in sales], color='blue')\nax1.set_title('Regions')\nax1.set_xlabel('Region')\nax1.set_ylabel('Total Sales')\n\n# Add a legend\nax1.legend(['Total Sales'], loc='upper right')\n\n# Add a grid for better readability\nax1.grid(axis='y', linestyle='--', alpha=0.7)\n\n# Plot 2: Stacked bar chart for sales by product and region\ncolors = ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd', '#8c564b']\nbottom = np.zeros(len(regions))\n\nfor i, product in enumerate(products):\n    ax2.bar(regions, sales[i], bottom=bottom, color=colors[i % len(colors)], label=product)\n    bottom += sales[i]\n\nax2.set_title('Technology Products')\nax2.set_xlabel('Region')\nax2.set_ylabel('Sales Probability')\n\n# Add a legend\nax2.legend(loc='upper left')\n\n# Add a color bar for reference\nsm = plt.cm.ScalarMappable(cmap='viridis', norm=plt.Normalize(vmin=0, vmax=100))\nsm._A = []\ncbar = fig.colorbar(sm, ax=ax2, orientation='vertical', label='User Ratings')\ncbar.ax.set_yticklabels([str(i) for i in range(0, 101, 10)])\n\n# Adjust layout for better spacing\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data for histograms\nreturns = np.array([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2.0])\ntech_stocks = np.array([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2.0])\nenergy_stocks = np.array([-0.1, -0.2, -0.3, -0.4, -0.5, -0.6, -0.7, -0.8, -0.9, -1.0, -1.1, -1.2, -1.3, -1.4, -1.5, -1.6, -1.7, -1.8, -1.9, -2.0])\n\n# Create a new figure with a larger size for better visibility\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10.0, 5.0))\n\n# Plot the histogram on the first subplot\nax1.hist(returns, bins=10, color='green', alpha=0.7, label='Gains')\nax1.hist(-returns, bins=10, color='red', alpha=0.7, label='Losses')\nax1.set_title('Histogram of Stock Returns')\nax1.set_xlabel('Returns')\nax1.set_ylabel('Frequency')\nax1.legend()\n\n# Plot the scatter plot on the second subplot\nax2.scatter(tech_stocks, tech_stocks, color='yellow', label='Tech Stocks')\nax2.scatter(energy_stocks, energy_stocks, color='cyan', label='Energy Stocks')\nax2.set_title('Investment Clusters')\nax2.set_xlabel('Stocks')\nax2.set_ylabel('Returns')\nax2.legend()\n\n# Adjust layout for better spacing\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nimport numpy as np\n\n# Sample data for plotting\nx = np.linspace(-5, 5, 100)\ny = np.linspace(-5, 5, 100)\nX, Y = np.meshgrid(x, y)\nZ = np.sin(np.sqrt(X**2 + Y**2))\n\n# Create a new figure with a larger size for better visibility\nfig = plt.figure(figsize=(8.0, 10.0))\nax1 = fig.add_subplot(211)\n\n# Plot the first subplot: Line plot\nax1.plot(x, np.sin(x), label='Sine Wave', color='blue', linestyle='-', linewidth=2, marker='o', markersize=4)\nax1.set_title('Energy Consumption (GWh)', fontsize=12)\nax1.set_xlabel('Relative Year', fontsize=10)\nax1.set_ylabel('Energy Consumption (GWh)', fontsize=10)\nax1.grid(True)\nax1.legend()\n\n# Add a second subplot: Scatter plot\nax2 = fig.add_subplot(212, projection='3d')\nsurf = ax2.plot_surface(X, Y, Z, cmap='viridis', edgecolor='none', alpha=0.8)\nax2.set_title('Renewable Energy Ratio (%)', fontsize=12)\nax2.set_xlabel('Relative Year', fontsize=10)\nax2.set_ylabel('Relative Month', fontsize=10)\nax2.set_zlabel('Renewable Energy Ratio (%)', fontsize=10)\nax2.view_init(elev=30, azim=120)\nfig.colorbar(surf, ax=ax2, shrink=0.5, aspect=10)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the pie chart\nlabels = ['Ancient Scripts', 'Modern Records', 'Renaissance Literature', 'Medieval Texts']\nsizes = [15, 35, 20, 30]\ncolors = ['#FF9999','#66B3FF','#99FF99','#FFCC99']\nexplode = (0.1, 0, 0, 0)  # explode 1st slice\n\n# Create a new figure with specified size\nfig, ax1 = plt.subplots(figsize=(10.0, 5.0))\n\n# Plot the pie chart\nwedges, texts, autotexts = ax1.pie(sizes, explode=explode, labels=labels, colors=colors,\n                                  autopct='%1.1f%%', shadow=True, startangle=140)\n\n# Enhance the pie chart with a title and adjust layout\nax1.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\nax1.set_title('Historical Document Types in Library')\n\n# Add a second subplot for the scatter plot\nax2 = fig.add_subplot(122)\nx = np.array([150, 200, 250, 300])\ny = np.array([100, 150, 200, 250])\ncolors = np.array(['r', 'g', 'b', 'c'])\nax2.scatter(x, y, c=colors, s=100, alpha=0.7)\n\n# Set labels for the scatter plot\nax2.set_xlabel('Year')\nax2.set_ylabel('Number of Documents')\nax2.set_title('Document Count Over Historical Periods')\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data for the scatter plot\nx = np.array([1000, 1200, 1400, 1600, 1800, 2000])\ny = np.array([7.5, 8.0, 8.5, 9.0, 9.5, 10.0])\npopularity_index = np.array([8.0, 8.5, 9.0, 9.5, 10.0, 10.5])\n\n# Create a new figure with a larger size for better visibility\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10.0, 6.0), gridspec_kw={'width_ratios': [1, 3]})\n\n# Scatter plot on the left\nscatter = ax1.scatter(x, y, c=popularity_index, cmap='viridis', s=100, alpha=0.7)\nax1.set_title('Luxury Brand Popularity vs Price')\nax1.set_xlabel('Average Price ($)')\nax1.set_ylabel('Popularity Index')\nax1.grid(True)\n\n# Add a color bar to indicate the popularity index\ncbar = fig.colorbar(scatter, ax=ax1, orientation='vertical')\ncbar.set_label('Popularity Index')\n\n# Pie chart on the right\nlabels = ['Gucci', 'Prada', 'Dior', 'Louis Vuitton', 'Chanel']\nsizes = [20, 15, 30, 25, 10]\ncolors = ['#ff9999','#66b3ff','#99ff99','#ffcc99','#c2c2f0']\nexplode = (0.1, 0, 0, 0, 0)  # explode the first slice\n\nax2.pie(sizes, explode=explode, labels=labels, colors=colors,\nautopct='%1.1f%%', shadow=True, startangle=140)\nax2.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\nax2.set_title('Customer Satisfaction Distribution Across Brands')\n\n# Adjust layout to prevent overlap\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the first chart\nnames = ['Zhang2020', 'Addelpalli2021', 'Rice2020', 'Rade2021', 'Engstrom2019', 'Hendrycks2019']\naccuracies = [75.32, 77.11, 77.03, 76.86, 75.34, 74.52]\naccuracy_diffs = [0.02, -0.08, -0.17, -0.23, -0.25, -0.26]\n\n# Data for the second chart\nnames2 = ['Zhang2020', 'Addelpalli2021', 'Rice2020', 'Rade2021', 'Engstrom2019', 'Hendrycks2019']\nrobust_accuracies = [60.5, 59.3, 58.35, 59.1, 55.95, 60.5]\nrobust_accuracy_diffs = [-0.25, -0.25, -0.25, -0.25, -0.25, -0.25]\n\n# Create a new figure with a larger size\nfig, axes = plt.subplots(1, 2, figsize=(10.0, 7.0), sharey=True)\n\n# Plot the first chart\ncolors = plt.cm.viridis(np.linspace(0, 1, len(names)))\nbars = axes[0].barh(names, accuracies, color=colors)\naxes[0].set_xlabel('Accuracy (%)')\naxes[0].set_title('Accuracy (%)')\n\n# Add data labels\nfor bar, acc, diff in zip(bars, accuracies, accuracy_diffs):\n    axes[0].text(bar.get_width() + 0.5, bar.get_y() + bar.get_height()/2, f'{acc:.2f}\\n{diff:.2f}', va='center', ha='left')\n\n# Plot the second chart\ncolors2 = plt.cm.viridis(np.linspace(0, 1, len(names2)))\nbars2 = axes[1].barh(names2, robust_accuracies, color=colors2)\naxes[1].set_xlabel('Robust Accuracy (%)')\naxes[1].set_title('Robust Accuracy (%)')\n\n# Add data labels\nfor bar, acc, diff in zip(bars2, robust_accuracies, robust_accuracy_diffs):\n    axes[1].text(bar.get_width() + 0.5, bar.get_y() + bar.get_height()/2, f'{acc:.2f}\\n{diff:.2f}', va='center', ha='left')\n\n# Adjust layout and show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.arange(1, 26)\ny1 = np.array([0.35, 0.34, 0.33, 0.32, 0.31, 0.30, 0.29, 0.28, 0.27, 0.26, \n               0.25, 0.24, 0.23, 0.22, 0.21, 0.20, 0.19, 0.18, 0.17, 0.16, \n               0.15, 0.14, 0.13, 0.12, 0.11])\ny2 = np.array([0.30, 0.29, 0.28, 0.27, 0.26, 0.25, 0.24, 0.23, 0.22, 0.21, \n               0.20, 0.19, 0.18, 0.17, 0.16, 0.15, 0.14, 0.13, 0.12, 0.11, \n               0.10, 0.09, 0.08, 0.07, 0.06])\ny3 = np.array([0.25, 0.24, 0.23, 0.22, 0.21, 0.20, 0.19, 0.18, 0.17, 0.16, \n               0.15, 0.14, 0.13, 0.12, 0.11, 0.10, 0.09, 0.08, 0.07, 0.06, \n               0.05, 0.04, 0.03, 0.02, 0.01])\n\n# Create a new figure with specified size\nfig, ax1 = plt.subplots(figsize=(7.0, 9.0))\n\n# Plot the first line with a specific color and style\ncolor = 'tab:blue'\nax1.set_xlabel('Trials', fontsize=12)\nax1.set_ylabel('Generalized Variance', color=color, fontsize=12)\nax1.plot(x, y1, color=color, linestyle='-', linewidth=2, marker='o', markersize=5, label='Full Context')\nax1.tick_params(axis='y', labelcolor=color)\n\n# Create a second y-axis for the second line\nax2 = ax1.twinx()\ncolor = 'tab:red'\nax2.set_ylabel('Average Regret', color=color, fontsize=12)\nax2.plot(x, y2, color=color, linestyle='--', linewidth=2, marker='s', markersize=5, label='No Context')\nax2.tick_params(axis='y', labelcolor=color)\n\n# Create a third y-axis for the third line\nax3 = ax1.twinx()\ncolor = 'tab:green'\nax3.spines['right'].set_position(('outward', 60))\nax3.set_ylabel('Partial Context', color=color, fontsize=12)\nax3.plot(x, y3, color=color, linestyle='-.', linewidth=2, marker='^', markersize=5, label='Partial Context')\nax3.tick_params(axis='y', labelcolor=color)\n\n# Add a legend for the first line\nfig.legend(loc='upper left', bbox_to_anchor=(0.1, 0.9), fontsize=10)\n\n# Add a legend for the second line\nfig.legend(loc='upper right', bbox_to_anchor=(0.9, 0.9), fontsize=10)\n\n# Add a legend for the third line\nfig.legend(loc='lower right', bbox_to_anchor=(0.9, 0.1), fontsize=10)\n\n# Set title and grid\nplt.title('Comparison of Different Contexts', fontsize=14, fontweight='bold')\nplt.grid(True, which='both', linestyle='--', linewidth=0.5, alpha=0.7)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nelo_ratings = np.array([0, 200, 400])\ngpt35_turbo = np.array([100, 150, 200])\nclade13 = np.array([120, 170, 220])\nclade21 = np.array([110, 160, 210])\ngpt4_turbo = np.array([90, 140, 190])\n\n# Create a new figure with a larger size for better visibility\nfig, (ax1, ax2, ax3) = plt.subplots(1, 3, figsize=(10.0, 4.0), sharey=True)\n\n# Plot 1: Elo Rating vs. Correct Rating - Incorrect Rating\nax1.scatter(elo_ratings, gpt35_turbo, color='blue', label='GPT-3.5-Turbo')\nax1.scatter(elo_ratings, clade13, color='orange', label='Claude 1.3')\nax1.scatter(elo_ratings, clade21, color='green', label='Claude 2.1')\nax1.scatter(elo_ratings, gpt4_turbo, color='red', label='GPT-4-Turbo')\n\nax1.set_xlabel('Elo Rating')\nax1.set_ylabel('Correct Rating - Incorrect Rating')\nax1.set_title('Debaters')\nax1.legend()\n\n# Plot 2: Elo Rating vs. Aggregate Elo Rating\nax2.scatter(elo_ratings, gpt35_turbo, color='blue', label='GPT-3.5-Turbo')\nax2.scatter(elo_ratings, clade13, color='orange', label='Claude 1.3')\nax2.scatter(elo_ratings, clade21, color='green', label='Claude 2.1')\nax2.scatter(elo_ratings, gpt4_turbo, color='red', label='GPT-4-Turbo')\n\nax2.set_xlabel('Elo Rating')\nax2.set_ylabel('Aggregate Elo Rating')\nax2.set_title('Debaters')\nax2.legend()\n\n# Plot 3: Judge Accuracy vs. Aggregate Elo Rating\njudge_accuracy = np.array([85, 90, 95])\nax3.scatter(judge_accuracy, gpt35_turbo, color='blue', label='GPT-3.5-Turbo')\nax3.scatter(judge_accuracy, clade13, color='orange', label='Claude 1.3')\nax3.scatter(judge_accuracy, clade21, color='green', label='Claude 2.1')\nax3.scatter(judge_accuracy, gpt4_turbo, color='red', label='GPT-4-Turbo')\n\nax3.set_xlabel('Judge Accuracy (%)')\nax3.set_ylabel('Aggregate Elo Rating')\nax3.set_title('Debaters')\nax3.legend()\n\n# Adjust layout for better spacing\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the pie chart\nsizes = [30.5, 46, 10.6, 11.3, 13.2, 29.8]\nlabels = ['30.5%', '46%', '10.6%', '11.3%', '13.2%', '29.8%']\ncolors = ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd', '#8c564b']\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(5.0, 5.0))\n\n# Plot the pie chart\nwedges, texts, autotexts = ax.pie(\n    sizes,\n    labels=labels,\n    colors=colors,\n    autopct='%1.1f%%',\n    startangle=140,\n    textprops={'color': 'white'}\n)\n\n# Enhance the chart with a title and a legend\nax.set_title('Pie Chart Example', fontsize=12, fontweight='bold')\nax.legend(wedges, labels, title=\"Categories\", loc=\"center left\", bbox_to_anchor=(1, 0, 0.5, 1))\n\n# Equal aspect ratio ensures that pie is drawn as a circle.\nax.axis('equal')\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the pie chart\nsizes = [90, 225, 1, 60, 1/2]\nlabels = ['90 g sugar', '225 g flour', '1 egg', '60 g butter', '1/2 package of yeast']\ncolors = ['#ff9999','#66b3ff','#99ff99','#ffcc99','#c2c2f0']\nexplode = (0.1, 0, 0, 0, 0)  # explode 1st slice\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Plot the pie chart\nwedges, texts, autotexts = ax.pie(\n    sizes, \n    explode=explode, \n    labels=labels, \n    colors=colors, \n    autopct='%1.1f%%', \n    shadow=True, \n    startangle=140,\n    wedgeprops=dict(width=0.4)\n)\n\n# Add a title\nax.set_title('Matplotlib bakery: A donut', fontsize=14, fontweight='bold')\n\n# Equal aspect ratio ensures that pie is drawn as a circle.\nax.axis('equal')  \n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the pie chart\nlabels = ['Transport', 'Food', 'Utilities', 'Others', 'Entertainment']\nsizes = [37.5, 29.2, 16.7, 10.0, 10.0]\ncolors = ['#4c72b0', '#55a868', '#c44e52', '#8172b2', '#ccb974']\nexplode = (0.1, 0, 0, 0, 0)  # explode 1st slice\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Plot the pie chart\nwedges, texts, autotexts = ax.pie(sizes, explode=explode, labels=labels, colors=colors,\n                                  autopct='%1.1f%%', shadow=True, startangle=140)\n\n# Add a title to the chart\nax.set_title('Expenses - Company vs. Project', fontsize=16, fontweight='bold')\n\n# Add a legend\nax.legend(wedges, labels, title=\"Categories\", loc=\"center left\", bbox_to_anchor=(1, 0, 0.5, 1))\n\n# Add a grid effect\nax.grid(True, linestyle='--', alpha=0.5)\n\n# Add star markers to each wedge\nfor wedge in wedges:\n    wedge.set_edgecolor('white')\n    wedge.set_linewidth(0.5)\n\n# Add a white circle at the center to make it look like a donut chart\ncentre_circle = plt.Circle((0, 0), 0.70, fc='white')\nfig.gca().add_artist(centre_circle)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the first pie chart\nlabels1 = ['Unused', 'Optimized', 'Model', 'Gradient']\nsizes1 = [31.4, 33.0, 15.7, 19.9]\ncolors1 = ['#FFD700', '#90EE90', '#FF6347', '#ADD8E6']\n\n# Data for the second pie chart\nlabels2 = ['Unused', 'Optimized', 'Model', 'Gradient']\nsizes2 = [54.8, 28.4, 10.5, 6.3]\ncolors2 = ['#FFD700', '#90EE90', '#FF6347', '#ADD8E6']\n\n# Create a new figure with specified size\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10.0, 4.0))\n\n# Plot the first pie chart\nwedges1, texts1, autotexts1 = ax1.pie(\n    sizes1, labels=labels1, colors=colors1,\n    autopct='%1.1f%%', startangle=140, textprops={'color': 'black'}\n)\nax1.set_title('LoRA')\n\n# Plot the second pie chart\nwedges2, texts2, autotexts2 = ax2.pie(\n    sizes2, labels=labels2, colors=colors2,\n    autopct='%1.1f%%', startangle=140, textprops={'color': 'black'}\n)\nax2.set_title('QLoRA')\n\n# Enhance the visual appeal of the pie charts\nfor wedge in wedges1 + wedges2:\n    wedge.set_edgecolor('white')\n\n# Adjust layout for better spacing\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the pie charts\ndata1 = [25.1, 26.4, 12.6]\ndata2 = [46.2, 4.6, 5.3, 23.9]\n\n# Define labels and colors for the pie charts\nlabels1 = ['Model', 'Optimizer', 'Gradient+Activations+Other']\ncolors1 = ['#FFA500', '#87CEEB', '#90EE90']\n\nlabels2 = ['Model', 'Optimizer', 'Gradient+Activations+Other', 'Unused']\ncolors2 = ['#FFA500', '#87CEEB', '#90EE90', '#FFFF00']\n\n# Create a new figure with a specific size\nfig, axes = plt.subplots(1, 2, figsize=(5.0, 8.0))\n\n# Plot the first pie chart\naxes[0].pie(data1, labels=labels1, colors=colors1, autopct='%1.1f%%', startangle=90)\naxes[0].set_title('Full Finetuning')\n\n# Plot the second pie chart\naxes[1].pie(data2, labels=labels2, colors=colors2, autopct='%1.1f%%', startangle=90)\naxes[1].set_title('QLoRA')\n\n# Add a legend to the second subplot\naxes[1].legend(labels2, loc='upper right')\n\n# Adjust layout for better spacing\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the pie chart\nlabels = ['Fruits', 'Proteins', 'Grains', 'Vegetables', 'Dairy']\nsizes = [25, 35, 10, 20, 10]\ncolors = ['#FF9999','#66B3FF','#99FF99','#FFCC99','#C2C2F0']\nexplode = (0.1, 0, 0, 0, 0)  # explode 1st slice\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Plot the pie chart\nwedges, texts, autotexts = ax.pie(sizes, explode=explode, labels=labels, colors=colors,\n                                  autopct='%1.1f%%', shadow=True, startangle=140)\n\n# Customize the text properties\nfor text in texts:\n    text.set_color('grey')\nfor autotext in autotexts:\n    autotext.set_color('white')\n\n# Set the title of the pie chart\nax.set_title('Nutritional Distribution')\n\n# Equal aspect ratio ensures that pie is drawn as a circle.\nax.axis('equal')  \n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the pie chart\nlabels = ['Education', 'Entertainment', 'Technology']\nsizes = [18.8, 21.4, 37.5]\nexplode = (0.1, 0, 0)  # explode the first slice\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the pie chart\nwedges, texts, autotexts = ax.pie(\n    sizes, \n    explode=explode, \n    labels=labels, \n    autopct='%1.1f%%', \n    startangle=90, \n    colors=['#FFA500', '#1E90FF', '#00FF00'], \n    shadow=True, \n    wedgeprops=dict(width=0.4)\n)\n\n# Customize the text properties\nfor text in texts:\n    text.set_color('black')\nfor autotext in autotexts:\n    autotext.set_color('white')\n\n# Add a title\nax.set_title('Market Share by Sector - External vs. Internal', fontsize=14, fontweight='bold')\n\n# Equal aspect ratio ensures that pie is drawn as a circle.\nax.axis('equal')  \n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the pie chart\nlabels = ['Dogs', 'Hogs', 'Logs', 'Frogs']\nsizes = [45, 30, 10, 15]\ncolors = ['#ff9999','#66b3ff','#99ff99','#ffcc99']\nexplode = (0.1, 0, 0, 0)  # explode 1st slice\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Plot the pie chart\nwedges, texts, autotexts = ax.pie(sizes, explode=explode, labels=labels, colors=colors,\n                                  autopct='%1.1f%%', shadow=True, startangle=140)\n\n# Customize the text properties\nfor text in texts:\n    text.set_color('grey')\nfor autotext in autotexts:\n    autotext.set_color('white')\n\n# Add a title\nax.set_title('Pie Chart of Various Animals', fontsize=12, fontweight='bold')\n\n# Equal aspect ratio ensures that pie is drawn as a circle.\nax.axis('equal')  \n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the pie chart\nlabels = ['David', 'John', 'Marry', 'Peter']\nsizes = [29, 11, 20, 40]\ncolors = ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728']\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(5.0, 5.0))\n\n# Plot the pie chart\nwedges, texts, autotexts = ax.pie(\n    sizes, \n    labels=labels, \n    colors=colors, \n    autopct='%1.1f%%', \n    startangle=140, \n    textprops={'color': 'white'}\n)\n\n# Enhance the chart with a title and remove the axis\nax.set_title('Pie Chart of People', fontsize=12)\nax.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the pie chart\nlabels = ['UK', 'Germany', 'France', 'Italy']\nsizes = [42, 12, 18, 28]\ncolors = ['#6b9a6c', '#7f7f7f', '#d62728', '#ff7f0e']\nexplode = (0.1, 0, 0, 0)  # explode the first slice\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(5.0, 5.0))\n\n# Plot the pie chart\nwedges, texts, autotexts = ax.pie(\n    sizes, \n    labels=labels, \n    colors=colors, \n    autopct='%1.1f%%', \n    startangle=140, \n    explode=explode, \n    shadow=True, \n    wedgeprops=dict(width=0.3)\n)\n\n# Customize text properties\nfor text in texts:\n    text.set_color('white')\n    text.set_fontsize(10)\n\nfor autotext in autotexts:\n    autotext.set_color('white')\n    autotext.set_fontsize(10)\n    autotext.set_weight('bold')\n\n# Set title\nax.set_title('Countries in Europe', fontsize=14, fontweight='bold')\n\n# Equal aspect ratio ensures that pie is drawn as a circle.\nax.axis('equal')  \n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the pie chart\nsizes = [26.2, 13.3, 14.3, 19.0, 21.4]\nlabels = ['Slice 1', 'Slice 2', 'Slice 3', 'Slice 4', 'Slice 5']\ncolors = ['#ff9999','#66b3ff','#99ff99','#ffcc99','#c2c2f0']\nexplode = (0.1, 0, 0, 0, 0)  # explode 1st slice\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(5.0, 5.0))\n\n# Plot the pie chart\nwedges, texts, autotexts = ax.pie(\n    sizes, \n    explode=explode, \n    labels=labels, \n    colors=colors, \n    autopct='%1.1f%%', \n    shadow=True, \n    startangle=140\n)\n\n# Enhance the chart with title and legend\nax.set_title('Slice of a pie chart', fontsize=14, fontweight='bold')\nax.legend(wedges, labels, title=\"Slices\", loc=\"center left\", bbox_to_anchor=(1, 0, 0.5, 1))\n\n# Equal aspect ratio ensures that pie is drawn as a circle.\nax.axis('equal')  \n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the pie chart\nlabels = ['Psychological', 'Others', 'Market', 'Satisfactory', 'Social']\nsizes = [35.4, 10.3, 17.2, 24.7, 12.4]\ncolors = ['#1f77b4', '#2ca02c', '#ff7f0e', '#d62728', '#9467bd']\nexplode = (0.1, 0, 0, 0, 0)  # Explode the first slice for emphasis\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the pie chart\nwedges, texts, autotexts = ax.pie(\n    sizes, \n    explode=explode, \n    labels=labels, \n    colors=colors, \n    autopct='%1.1f%%', \n    shadow=True, \n    startangle=140, \n    textprops={'color': 'white'}\n)\n\n# Enhance the chart with a title and adjust layout\nax.set_title('Pie Chart of Various Categories', fontsize=14, fontweight='bold')\nax.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\n\n# Add a legend\nplt.legend(wedges, labels, title=\"Categories\", loc=\"center left\", bbox_to_anchor=(1, 0, 0.5, 1))\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the pie chart\nlabels = ['Facebook', 'Instagram', 'Twitter', 'LinkedIn']\nsizes = [25, 35, 10, 20]\ncolors = ['#87CEEB', '#ADD8E6', '#FFD700', '#FF4500']\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the pie chart\nwedges, texts, autotexts = ax.pie(\n    sizes,\n    labels=labels,\n    colors=colors,\n    autopct='%1.1f%%',\n    startangle=90,\n    wedgeprops=dict(width=0.4)\n)\n\n# Enhance the chart with a title and legend\nax.set_title('Social Media Usage', fontsize=14, fontweight='bold')\nax.legend(wedges, labels, title=\"Social Media\", loc=\"center left\", bbox_to_anchor=(1, 0, 0.5, 1))\n\n# Equal aspect ratio ensures that pie is drawn as a circle.\nax.axis('equal')\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the pie chart\nlabels = ['NAACL', 'EMNLP', 'EACL', 'COLING']\nsizes = [25.4, 20.3, 12.2, 7.4]\ncolors = ['#8dd3c7', '#ffffb3', '#bebada', '#fb8072']\nexplode = (0.1, 0, 0, 0)  # explode the first slice\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Plot the pie chart\nwedges, texts, autotexts = ax.pie(\n    sizes, \n    labels=labels, \n    colors=colors, \n    autopct='%1.1f%%', \n    startangle=90, \n    explode=explode, \n    shadow=True, \n    textprops={'color': 'black'}\n)\n\n# Enhance the chart with a title and adjust layout\nax.set_title('NLP Conference Influence', fontsize=14, fontweight='bold')\nax.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\n\n# Add a legend\nplt.legend(wedges, labels, title=\"Conferences\", loc=\"center left\", bbox_to_anchor=(1, 0, 0.5, 1))\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the pie chart\nlabels = ['Coal', 'Hydro', 'Wind', 'Solar', 'Other']\nsizes = [25, 15, 12.5, 8.3, 10]\ncolors = ['#FF9999','#66B3FF','#99FF99','#FFCC99','#C2C2F0']\nexplode = (0.1, 0, 0, 0, 0)  # explode 1st slice\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Plot the pie chart\nwedges, texts, autotexts = ax.pie(sizes, explode=explode, labels=labels, colors=colors,\n                                  autopct='%1.1f%%', shadow=True, startangle=140)\n\n# Enhance the pie chart with additional features\nax.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\nax.set_title('Energy Consumption - National vs. Project', fontsize=14, fontweight='bold')\n\n# Add a legend\nax.legend(wedges, labels, title=\"Energy Sources\", loc=\"center left\", bbox_to_anchor=(1, 0, 0.5, 1))\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/quiver_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\ny = np.array([-4.00, -3.22, -2.44, -1.88, -1.33, -0.88, -0.44, -0.00, 0.44, 0.88])\n\n# Create a new figure with specified size\nfig, axes = plt.subplots(1, 2, figsize=(10.0, 4.0))\n\n# Plot the first subplot\naxes[0].plot(x, y, 'r-', label='Out-group bias (Collectivism)')\naxes[0].scatter(x, y, color='red', marker='o')\naxes[0].set_title('Chinese')\naxes[0].set_xlabel('X-axis')\naxes[0].set_ylabel('Y-axis')\naxes[0].legend()\n\n# Plot the second subplot\naxes[1].plot(x, y, 'b-', label='In-group bias (Individualism)')\naxes[1].scatter(x, y, color='blue', marker='s')\naxes[1].set_title('Japanese')\naxes[1].set_xlabel('X-axis')\naxes[1].set_ylabel('Y-axis')\naxes[1].legend()\n\n# Add a common title for the entire figure\nplt.suptitle('Comparison of Bias')\n\n# Adjust layout for better spacing\nplt.tight_layout(rect=[0, 0.03, 1, 0.95])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/quiver_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])\ny = np.array([-4.00, -3.22, -2.44, -1.66, -0.88, 0.00, 0.88, 1.66, 2.44])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(5.0, 4.0))\n\n# Plot the data with enhanced aesthetics\nax.plot(x, y, color='red', linestyle='-', marker='o', markersize=5, linewidth=2, label='Out-group bias (Collectivism)')\n\n# Set labels and title\nax.set_xlabel('X-axis')\nax.set_ylabel('Y-axis')\nax.set_title('Sample Plot')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/quiver_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create sample data for demonstration\nx1 = np.linspace(0, 1, 10)\nx2 = np.linspace(0, 1, 10)\nX1, X2 = np.meshgrid(x1, x2)\n\n# Define vectors for quiver plot\nU = np.cos(X1) * np.sin(X2)\nV = -np.sin(X1) * np.cos(X2)\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the quiver plot\nq = ax.quiver(X1, X2, U, V, color='r', scale=50, width=0.005, headwidth=3, headlength=4)\n\n# Add a color bar to indicate the magnitude of the vectors\ncbar = fig.colorbar(q)\ncbar.set_label('Magnitude')\n\n# Set labels and title\nax.set_xlabel('X1')\nax.set_ylabel('X2')\nax.set_title('Quiver Plot with Colorbar')\n\n# Add a legend\nax.legend(['True Field', 'SINDy Learned Field', 'Train Sample', 'Test Sample', 'SINDy Train', 'SINDy Test'], loc='upper right')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/quiver_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a grid of points\nx = np.linspace(-1, 1, 20)\ny = np.linspace(-1, 1, 20)\nX, Y = np.meshgrid(x, y)\n\n# Define a vector field\nU = -Y\nV = X\n\n# Plot the vector field\nplt.figure(figsize=(5.0, 4.0))\nplt.quiver(X, Y, U, V, color='blue', scale=20)\n\n# Set labels and title\nplt.xlabel('X')\nplt.ylabel('Y')\nplt.title('Vector Field: -F + \u03c1\u2207FF (Small \u03c1)')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/quiver_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a grid of points\nx = np.linspace(-2, 2, 100)\ny = np.linspace(-2, 2, 100)\nX, Y = np.meshgrid(x, y)\n\n# Define a vector field\nU = -Y / (X**2 + Y**2)\nV = X / (X**2 + Y**2)\n\n# Plot the vector field\nplt.figure(figsize=(6.0, 5.0))\nplt.quiver(X, Y, U, V, color='blue', scale=20, width=0.005, headwidth=3, headlength=4)\n\n# Add grid lines for better readability\nplt.grid(True, linestyle='--', alpha=0.7)\n\n# Set labels and title\nplt.xlabel('x')\nplt.ylabel('y')\nplt.title('Magnetic Field $\\mathbf{B}$ in Tesla units')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_1.pdf", "response": "```python\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Sample data for a radar chart\ncategories = ['VQA', 'MME', 'MM', 'LLaVA-W', 'POPE']\nvalues = [79.9, 64.9, 66.9, 75.8, 86.4]\ncolors = ['#FF5733', '#33FF57', '#3357FF', '#F333FF', '#FFFF33']\n\n# Number of variables and create one extra to close the circular graph\nN = len(categories)\nvalues += values[:1]\ncategories += categories[:1]\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(8.0, 7.0), subplot_kw=dict(polar=True))\n\n# Plot the radar chart\nax.fill(np.linspace(0, 2 * np.pi, N + 1), values, color=colors[0], alpha=0.25)\nax.plot(np.linspace(0, 2 * np.pi, N + 1), values, color=colors[0], linewidth=2)\n\n# Customize the radar chart\nplt.xticks(np.linspace(0, 2 * np.pi, N), categories, fontsize=12)\nplt.yticks([])\n\n# Add grid lines\nax.grid(True, linestyle='--', linewidth=0.5, color='gray')\n\n# Add a title\nplt.title('Radar Chart Example', fontsize=16, weight='bold')\n\n# Add a legend\nplt.legend(['TextVQA'], loc='upper right', fontsize=10)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_10.pdf", "response": "```python\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Define the data for the radar chart\ncategories = ['fr', 'hi', 'ru', 'th', 'tr', 'ur', 'vi', 'zh']\nvalues = [20, 40, 60, 80, 100, 120, 140, 160]\nnum_vars = len(categories)\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(5.0, 5.0), subplot_kw=dict(polar=True))\n\n# Calculate the angle for each category\nangles = np.linspace(0, 2 * np.pi, num_vars, endpoint=False).tolist()\nangles += angles[:1]  # Repeat the first angle to close the polygon\n\n# Plot the data\nax.plot(angles, values + values[:1], linewidth=1, linestyle='solid', label='PABEE')\nax.fill(angles, values + values[:1], 'g', alpha=0.1)\n\n# Set the categories as tick labels\nax.set_xticks(angles[:-1])\nax.set_xticklabels(categories)\n\n# Add a legend\nax.legend(loc='upper right', bbox_to_anchor=(1.3, 1.1))\n\n# Set title\nplt.title('XLNI (speed-up ratio: 4)', size=11, y=1.1)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_11.pdf", "response": "```python\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Define the data for the radar chart\ncategories = ['Understanding', 'Memory', 'Reasoning', 'Questioning', 'Paraphrasing', 'Reflection']\nvalues = [8, 10, 6, 4, 2, 0]\nnum_vars = len(categories)\n\n# Normalize the values\nmax_value = max(values)\nnormalized_values = [v / max_value for v in values]\n\n# Create a new figure\nfig, ax = plt.subplots(figsize=(4.0, 4.0), subplot_kw=dict(polar=True))\n\n# Plot the radar chart\nax.plot(normalized_values + normalized_values[:1], categories + categories[:1], linewidth=2, linestyle='-', color='green')\nax.fill(normalized_values + normalized_values[:1], categories + categories[:1], alpha=0.25, color='green')\n\n# Customize the plot\nax.set_title('Interference', size=16, color='blue', y=1.1)\nax.set_yticklabels([])\nax.set_xticks(np.arange(0, 2 * np.pi, 2 * np.pi / num_vars))\nax.set_xticklabels(categories)\n\n# Add grid lines\nax.grid(True, linestyle='--', linewidth=0.5, color='gray')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_12.pdf", "response": "```python\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Define the data for the radar chart\ncategories = ['N', 'E', 'S', 'W']\nvalues = [0.46, 0.5, 0.48, 0.5]\nerrors = [0.01, 0.02, 0.01, 0.01]\n\n# Number of variables and their order\nN = len(categories)\n\n# Initialize the plot\nfig, ax = plt.subplots(figsize=(8.0, 6.0), subplot_kw=dict(polar=True))\n\n# Convert category labels into position on axis\nangles = np.linspace(0, 2 * np.pi, N, endpoint=False).tolist()\nangles += angles[:1]  # repeat the first value to close the circular chart\n\n# Plot the data\nax.plot(angles, values + values[:1], linewidth=1, linestyle='solid', label='\u03bcTrain')\nax.fill(angles, values + values[:1], alpha=0.25)\n\n# Draw one axe per variable and add labels\nplt.xticks(angles[:-1], categories)\nplt.yticks(np.arange(0.2, 0.5, 0.1), ['0.2', '0.3', '0.4', '0.5'], color=\"grey\", size=7)\nplt.ylim(0, 0.5)\n\n# Add a title\nplt.title(\"Radar Chart Example\", size=15, color=\"blue\", y=1.1)\n\n# Add a legend\nplt.legend(loc='upper right', bbox_to_anchor=(1.1, 1.1))\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_13.pdf", "response": "```python\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Define the categories and their order\ncategories = ['video game', 'programming world', 'universe', 'fairy tale', 'country', 'special place', 'city', 'landscape', 'cultural event']\nN = len(categories)\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(6.0, 6.0), subplot_kw=dict(polar=True))\n\n# Define the data for each category\nvalues = [0.2, 0.4, 0.6, 0.8, 1.0, 0.8, 0.6, 0.4, 0.2]\n\n# Plot the data\nax.plot(np.arange(N) + 0.5, values, label='Llama-2-70B', color='blue')\n\n# Set the ticks and labels for the categories\nax.set_xticks(np.arange(N))\nax.set_xticklabels(categories)\n\n# Add a legend\nax.legend(loc='upper right', bbox_to_anchor=(1.3, 1.1))\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_14.pdf", "response": "```python\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Define the data for the radar chart\ncategories = ['Reasoning', 'Writing', 'Coding', 'Math', 'Humanities', 'STEM', 'Extraction']\nN = len(categories)\n\n# Data for each category\nvalues = [\n    [1, 2, 3, 4, 5, 6, 7],  # Reasoning\n    [7, 6, 5, 4, 3, 2, 1],  # Writing\n    [3, 4, 5, 6, 7, 8, 9],  # Coding\n    [5, 4, 3, 2, 1, 0, 1],  # Math\n    [2, 3, 4, 5, 6, 7, 8],  # Humanities\n    [8, 7, 6, 5, 4, 3, 2],  # STEM\n    [4, 5, 6, 7, 8, 9, 10]  # Extraction\n]\n\n# Normalize the data\nvalues = np.array(values)\nvalues = (values - np.min(values)) / (np.max(values) - np.min(values))\n\n# Create a new figure\nfig, ax = plt.subplots(figsize=(6.0, 6.0), subplot_kw=dict(polar=True))\n\n# Plot the data\nfor i, value in enumerate(values):\n    ax.plot(np.append(value, value[0]), np.append(categories, categories[0]), label=categories[i])\n\n# Add a legend\nax.legend(loc='upper right', bbox_to_anchor=(1.3, 1.1))\n\n# Set the title\nax.set_title('Roleplay', size=16, color='darkblue', y=1.1)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_15.pdf", "response": "```python\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Define the data for the radar chart\ncategories = ['Nutrition', 'Purity', 'Allergen', 'Pollution', 'Storage', 'Recall', 'Compliance']\nN = len(categories)\n\n# Sample data for MUJI vs Nestle\nMUJI = (0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3)\nNestle = (0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9)\n\n# Calculate the angle for each category\nangles = np.linspace(0, 2 * np.pi, N, endpoint=False).tolist()\nangles += angles[:1]  # To close the loop\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(8.0, 8.0), subplot_kw=dict(polar=True))\n\n# Plot the data\nax.plot(angles, MUJI + MUJI[:1], linewidth=1, linestyle='solid', label='MUJI', color='red')\nax.fill(angles, MUJI + MUJI[:1], alpha=0.25, color='red')\n\nax.plot(angles, Nestle + Nestle[:1], linewidth=1, linestyle='dashed', label='Nestle', color='green')\nax.fill(angles, Nestle + Nestle[:1], alpha=0.25, color='green')\n\n# Customize the plot\nax.set_title(\"MUJI vs Nestle in Food Safety\", size=16, color=\"darkblue\", y=1.1)\nax.set_xticks(angles[:-1])\nax.set_xticklabels(categories, fontsize=12)\nax.yaxis.grid(True)\n\n# Add a legend\nplt.legend(loc='upper right', bbox_to_anchor=(1.1, 1.1))\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_16.pdf", "response": "```python\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Define the data for the radar chart\ncategories = ['Apple', 'Samsung', 'Huawei']\nvalues = [85.8, 86.4, 80.9]\n\n# Number of variables and their order\nN = len(categories)\n\n# Initialize the plot\nfig, ax = plt.subplots(figsize=(8.0, 7.0), subplot_kw=dict(polar=True))\n\n# Convert the categories into angles\nangles = np.linspace(0, 2 * np.pi, N, endpoint=False).tolist()\nangles += angles[:1]  # Closing the loop\n\n# Plot the data\nax.plot(angles, values + values[:1], linewidth=1, linestyle='solid', label='USA')\nax.fill(angles, values + values[:1], alpha=0.25)\n\n# Draw one axe per variable and add labels\nplt.xticks(angles[:-1], categories)\n\n# Add a title\nplt.title(\"Radar Chart Example\", size=16, color=\"darkgreen\", y=1.1)\n\n# Add a legend\nplt.legend(loc='upper right', bbox_to_anchor=(1.3, 1.1))\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_17.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data for the radar chart\ncategories = ['Extrusion', 'Injection', 'Compression', 'Blow Molding']\nvalues1 = [1, 2, 3, 4]\nvalues2 = [2, 3, 4, 5]\nvalues3 = [3, 4, 5, 6]\n\n# Normalize the data\nn_categories = len(categories)\nangles = np.linspace(0, 2 * np.pi, n_categories, endpoint=False).tolist()\nangles += angles[:1]  # To close the loop\n\nvalues1 += values1[:1]\nvalues2 += values2[:1]\nvalues3 += values3[:1]\n\n# Create a new figure\nfig, ax = plt.subplots(figsize=(10.0, 8.0), subplot_kw=dict(polar=True))\n\n# Plot the data\nax.plot(angles, values1, linewidth=1, linestyle='solid', label='Rotational')\nax.fill(angles, values1, alpha=0.25)\n\nax.plot(angles, values2, linewidth=1, linestyle='dashed', label='Injection Molding')\nax.fill(angles, values2, alpha=0.25)\n\nax.plot(angles, values3, linewidth=1, linestyle='dashdot', label='Compressive Molding')\nax.fill(angles, values3, alpha=0.25)\n\n# Set the title and labels\nax.set_title('Radar Chart of Different Molding Techniques', size=16, color='darkblue', y=1.1)\nax.set_xticks(angles[:-1])\nax.set_xticklabels(categories)\n\n# Add a legend\nax.legend(loc='upper right', bbox_to_anchor=(1.1, 1.1))\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_18.pdf", "response": "```python\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Define data for the radar chart\ncategories = ['Food Quality', 'Shows', 'Staff', 'Cleanliness', 'Wait Times', 'Parking', 'Ticket Price', 'Souvenirs', 'Thrive Rides', 'Family Rides']\nN = len(categories)\n\n# Data for Disney and Universal Studios\ndisney_scores = [0.8, 0.9, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1, 0.0]\nuniversal_scores = [0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 0.9]\n\n# Normalize scores to be between 0 and 1\nmax_score = max(max(disney_scores), max(universal_scores))\ndisney_scores = [score / max_score for score in disney_scores]\nuniversal_scores = [score / max_score for score in universal_scores]\n\n# Create a new figure with a specific size\nfig, ax = plt.subplots(figsize=(8.0, 8.0), subplot_kw=dict(polar=True))\n\n# Plot the radar chart for Disney\nax.plot(np.append(disney_scores, disney_scores[0]), np.append(categories, categories[0]), label='Disney', color='orange', linewidth=2)\nax.fill(np.append(disney_scores, disney_scores[0]), np.append(categories, categories[0]), alpha=0.2, color='orange')\n\n# Plot the radar chart for Universal Studios\nax.plot(np.append(universal_scores, universal_scores[0]), np.append(categories, categories[0]), label='Universal Studios', color='purple', linewidth=2)\nax.fill(np.append(universal_scores, universal_scores[0]), np.append(categories, categories[0]), alpha=0.2, color='purple')\n\n# Set the title of the plot\nax.set_title('Amusement Park Comparison: Disney vs Universal Studios', fontsize=14, fontweight='bold')\n\n# Customize the grid lines\nax.grid(True, linestyle='--', linewidth=0.5, color='gray')\n\n# Add a legend\nax.legend(loc='upper right', bbox_to_anchor=(1.1, 1.1), fontsize=10)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_19.pdf", "response": "```python\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Define the data for the radar chart\ncategories = ['Creativity', 'Versatility', 'Longevity', 'Sillage', 'Projection', 'Value', 'Popularity', 'Packaging']\nvalues = [1, 3, 5, 7, 9, 11, 13, 15]\ncolors = ['#FFA500', '#87CEEB', '#90EE90', '#FFD700', '#2E8B57', '#FF4500', '#FF69B4', '#FFD700']\n\n# Normalize the values to fit within the unit circle\nmax_value = max(values)\nnormalized_values = [value / max_value for value in values]\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(6.0, 6.0), subplot_kw=dict(polar=True))\n\n# Plot the radar chart\nax.fill(categories + [categories[0]], normalized_values + [normalized_values[0]], color='white', alpha=0.5)\nax.plot(categories + [categories[0]], normalized_values + [normalized_values[0]], color='black', linewidth=2)\n\n# Customize the radar chart\nax.set_title('Radar Chart', size=16, color='darkblue', y=1.1)\nax.set_yticklabels([])\nax.set_xticks(np.arange(len(categories)))\nax.set_xticklabels(categories, fontsize=10, color='darkblue')\n\n# Add grid lines\nax.grid(True, linestyle='--', linewidth=0.5, color='gray', alpha=0.7)\n\n# Add color patches for each category\nfor i, (category, value, color) in enumerate(zip(categories, normalized_values, colors)):\n    ax.add_patch(plt.Circle((i * (2 * np.pi / len(categories)), value), 0.05, color=color, alpha=0.7))\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_2.pdf", "response": "```python\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Define the data for the radar chart\ncategories = ['TinyLaMA', 'StableLM', 'Phi-2']\nvalues = [85.0, 86.9, 86.4]\ncolors = ['#FF5733', '#33FF57', '#3357FF']\n\n# Number of variables\nN = len(categories)\n\n# Convert the categories into a list of angles\nangles = np.linspace(0, 2 * np.pi, N, endpoint=False).tolist()\nangles += angles[:1]  # To close the loop\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(8.0, 7.0), subplot_kw=dict(polar=True))\n\n# Plot the data\nax.plot(angles, values + values[:1], linewidth=2, linestyle='solid', color=colors[0], label=categories[0])\nax.fill(angles, values + values[:1], color=colors[0], alpha=0.25)\n\n# Customize the plot\nax.set_title(\"POPE\", size=16, color=\"blue\", y=1.1)\nax.set_xticks(angles[:-1])\nax.set_xticklabels(categories)\nax.yaxis.grid(True, color=\"#D3D3D3\", linestyle='dashed')\n\n# Add a legend\nplt.legend(loc='upper right', bbox_to_anchor=(1.1, 1.1))\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_20.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define data for three different brands\nbrands = ['Chanel', 'Dior', 'Gucci']\nbrand_colors = ['#1f77b4', '#ff7f0e', '#2ca02c']\n\n# Define metrics and their ranges\nmetrics = ['Versatility', 'Longevity', 'Sillage', 'Projection', 'Value', 'Popularity']\nnum_metrics = len(metrics)\n\n# Create a new figure with a larger size for better visibility\nfig, axes = plt.subplots(1, 3, figsize=(18.0, 6.0), subplot_kw={'aspect': 'equal'})\n\n# Plot each brand's radar chart\nfor ax, brand, color in zip(axes, brands, brand_colors):\n    # Sample data for each brand (replace with actual data)\n    data = [5, 7, 9, 3, 1, 8]  # Example data for demonstration\n\n    # Normalize data to fit within the unit circle\n    angles = np.linspace(0, 2 * np.pi, num_metrics, endpoint=False).tolist()\n    data += data[:1]  # Repeat the first value to close the polygon\n    angles += angles[:1]\n\n    # Draw the radar chart\n    ax.plot(angles, data, linewidth=2, linestyle='solid', color=color)\n    ax.fill(angles, data, alpha=0.25, color=color)\n\n    # Set title and labels\n    ax.set_title(f'{brand}', size=16, color=color, y=1.1)\n    ax.set_xticks(angles[:-1])\n    ax.set_xticklabels(metrics, fontsize=12)\n    ax.grid(True, linestyle='--', linewidth=0.5)\n\n    # Add a legend\n    ax.legend([f'{brand}'], loc='upper right', bbox_to_anchor=(1.1, 1.1))\n\n# Adjust layout for better spacing\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data for the radar chart\nN = 10\ntheta = np.linspace(0.0, 2 * np.pi, N, endpoint=False).tolist()\ntheta += np.pi / 4\n\n# Data for the radar chart\nradii = [0.2, 0.6, 0.8, 1.0, 0.9, 0.5, 0.3, 0.7, 0.4, 0.6]\nradii2 = [0.1, 0.5, 0.7, 0.9, 0.8, 0.4, 0.2, 0.6, 0.3, 0.5]\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(8.0, 8.0), subplot_kw=dict(polar=True))\n\n# Plot the first dataset\nax.plot(theta, radii, color='black', linewidth=2)\nax.fill(theta, radii, 'grey', alpha=0.25)\n\n# Plot the second dataset\nax.plot(theta, radii2, color='red', linewidth=2)\nax.fill(theta, radii2, 'pink', alpha=0.25)\n\n# Add grid lines\nax.grid(True)\n\n# Set the title of the plot\nax.set_title(\"Radar Chart Example\", size=15, color=\"blue\")\n\n# Customize the ticks\nax.set_yticks([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0])\nax.set_xticks(theta)\nax.set_xticklabels(['0\u00b0', '45\u00b0', '90\u00b0', '135\u00b0', '180\u00b0', '225\u00b0', '270\u00b0', '315\u00b0', '360\u00b0'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data for the radar charts\ncategories = ['Query Error', 'Privacy']\nvalues1 = [1, 2]\nvalues2 = [3, 4]\nvalues3 = [5, 6]\n\n# Create a new figure with a larger size for better visibility\nfig, axes = plt.subplots(1, 3, figsize=(10.0, 6.0), subplot_kw={'projection': 'polar'})\n\n# Plot the first radar chart\nax1 = axes[0]\nax1.plot(np.array([0, 1, 0]), values1, color='green', linewidth=2, marker='o')\nax1.fill(np.array([0, 1, 0]), values1, color='green', alpha=0.2)\nax1.set_title('Fidelity(D_train)', size=12, color='green')\nax1.set_yticks([])\nax1.set_xticks(np.arange(len(categories)))\nax1.set_xticklabels(categories)\n\n# Plot the second radar chart\nax2 = axes[1]\nax2.plot(np.array([0, 1, 2, 0]), values2, color='purple', linewidth=2, marker='s')\nax2.fill(np.array([0, 1, 2, 0]), values2, color='purple', alpha=0.2)\nax2.set_title('Fidelity(D_test)', size=12, color='purple')\nax2.set_yticks([])\nax2.set_xticks(np.arange(len(categories)))\nax2.set_xticklabels(categories)\n\n# Plot the third radar chart\nax3 = axes[2]\nax3.plot(np.array([0, 1, 2, 3, 0]), values3, color='blue', linewidth=2, marker='^')\nax3.fill(np.array([0, 1, 2, 3, 0]), values3, color='blue', alpha=0.2)\nax3.set_title('TVAE', size=12, color='blue')\nax3.set_yticks([])\nax3.set_xticks(np.arange(len(categories)))\nax3.set_xticklabels(categories)\n\n# Adjust layout and display the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_5.pdf", "response": "```python\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Define the number of categories and the data\ncategories = ['Baseline', 'Retro(Syn)_2']\nN = len(categories)\n\n# Create sample data for each category\ndata = [\n    [10, 20],  # Baseline data\n    [30, 40]   # Retro(Syn)_2 data\n]\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(8.0, 8.0), subplot_kw=dict(polar=True))\n\n# Define the angles for each category\nangles = np.linspace(0, 2 * np.pi, N, endpoint=False).tolist()\nangles += angles[:1]  # Repeat the first angle to close the plot\n\n# Plot the data\nfor i, (category, values) in enumerate(zip(categories, data)):\n    values += values[:1]  # Close the polygon\n    ax.fill(angles, values, alpha=0.25, label=f'{category} {i+1}')\n\n# Set the labels for each category\nax.set_xticks(angles[:-1])\nax.set_xticklabels(categories)\n\n# Add a legend\nax.legend(loc='upper right', bbox_to_anchor=(1.1, 1.1))\n\n# Add grid lines\nax.grid(True)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_6.pdf", "response": "```python\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Define the number of models and their scores\nnum_models = 5\nmodels = ['Model A', 'Model B', 'Model C', 'Model D', 'Model E', 'Model F']\npredicted_scores = [0.03, 0.07, 0.05, 0.03, 0.07, 0.05]\nhelpful_scores = [0.03, 0.07, 0.05, 0.03, 0.07, 0.05]\nresult_scores = [0.03, 0.07, 0.05, 0.03, 0.07, 0.05]\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Plot the radar chart\nfor i in range(num_models):\n    ax.plot([0, predicted_scores[i]], [0, helpful_scores[i]], color='green', linestyle='-', linewidth=2)\n    ax.plot([0, helpful_scores[i]], [0, result_scores[i]], color='orange', linestyle='--', linewidth=2)\n    ax.plot([0, result_scores[i]], [0, predicted_scores[i]], color='blue', linestyle='-.', linewidth=2)\n\n# Add a circle at the center\ncircle = plt.Circle((0, 0), 0.15, color='grey', alpha=0.5)\nax.add_artist(circle)\n\n# Set the limits and aspect ratio\nax.set_xlim(-0.1, 0.15)\nax.set_ylim(-0.1, 0.15)\nax.set_aspect('equal')\n\n# Add grid lines\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Add labels\nax.set_xlabel('Predicted Score', fontsize=10)\nax.set_ylabel('Helpful Score', fontsize=10)\nax.set_title('Radar Chart', fontsize=12)\n\n# Add annotations\nfor i in range(num_models):\n    ax.annotate(models[i], xy=(predicted_scores[i], helpful_scores[i]), xytext=(0.1, 0.1),\n                arrowprops=dict(facecolor='black', shrink=0.05), fontsize=8)\n\n# Add legend\nlegend_labels = ['Predicted score', 'Helpful score', 'Result score']\nax.legend(legend_labels, loc='upper right', fontsize=8)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_7.pdf", "response": "```python\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Define the data for the radar chart\ncategories = ['radar', 'area', 'pie', 'funnel', 'bubble', 'rose', 'candlestick', 'heatmap', 'treemap', 'box']\nN = len(categories)\nvalues = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n# Initialize the plot\nfig, ax = plt.subplots(figsize=(8.0, 8.0), subplot_kw=dict(polar=True))\n\n# Plot the radar chart\nax.plot(np.append(values, values[0]), np.append(categories, categories[0]), linewidth=2, linestyle='-', color='red', label='QWen-VL')\nax.fill(np.append(values, values[0]), np.append(categories, categories[0]), alpha=0.2, color='red')\n\n# Add grid lines\nax.yaxis.grid(True, color='gray', linestyle='--', linewidth=0.5)\n\n# Set the title and labels\nax.set_title('3D-bar', y=1.1, fontsize=14, fontweight='bold')\nax.set_yticks(range(N))\nax.set_yticklabels(categories, fontsize=10)\n\n# Add annotations\nfor i, (value, category) in enumerate(zip(values, categories)):\n    ax.text(i * (2 * np.pi / N), value, f'{category}\\n{value}', ha='center', va='center', fontsize=8, color='black')\n\n# Add a legend\nax.legend(loc='upper right', bbox_to_anchor=(1.1, 1.1), fontsize=10)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_8.pdf", "response": "```python\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Define the data for the radar chart\ncategories = ['Anomaly Detection', 'Short-horizon Forecasting', 'Long-horizon Forecasting']\nvalues = [\n    [0.8, 0.6, 0.7],\n    [0.5, 0.9, 0.4],\n    [0.7, 0.5, 0.8]\n]\n\n# Number of variables and categories\nN = len(categories)\n\n# Convert data into a format suitable for plotting\nangles = np.linspace(0, 2 * np.pi, N, endpoint=False).tolist()\nvalues += values[:1]  # Repeat the first value to close the circle\nangles += angles[:1]  # Repeat the first angle to close the circle\n\n# Create a new figure\nfig, ax = plt.subplots(figsize=(5.0, 5.0), subplot_kw=dict(polar=True))\n\n# Plot the data\nax.plot(angles, values, linewidth=1, linestyle='solid')\nax.fill(angles, values, 'b', alpha=0.1)\n\n# Set the category labels\nax.set_xticks(angles[:-1])\nax.set_xticklabels(categories)\n\n# Add a title\nax.set_title('Classification', size=12, color='darkred', y=1.1)\n\n# Customize the grid lines\nax.grid(True, linestyle='--', linewidth=0.5, color='gray')\n\n# Add a legend\nax.legend(['MOMENT', 'GPT4TS', 'TimesNet'], loc='upper right', bbox_to_anchor=(1.3, 1.1))\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_9.pdf", "response": "```python\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Sample data for demonstration\nlabels = ['POPE', 'MM-Vet', 'TextVQA', 'GQA']\nvalues = [75.4, 56.9, 65.0, 72.9]\ncolors = ['#FF5733', '#33FF57', '#3357FF', '#F333FF']\nexplode = (0.1, 0, 0, 0)  # explode 1st slice\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(8.0, 7.0))\n\n# Plot the pie chart\nwedges, texts, autotexts = ax.pie(\n    values, \n    labels=labels, \n    colors=colors, \n    autopct='%1.1f%%', \n    startangle=140, \n    explode=explode, \n    shadow=True, \n    wedgeprops={'edgecolor': 'black'}\n)\n\n# Add a legend\nax.legend(wedges, labels, title=\"Legend\", loc=\"center left\", bbox_to_anchor=(1, 0, 0.5, 1))\n\n# Set aspect ratio to be equal so that pie is drawn as a circle\nax.axis('equal')\n\n# Add a title\nax.set_title(\"Sample Pie Chart\", fontsize=14, fontweight='bold')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.array([0.5, 1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 7.5, 8.5, 9.5])\ny = np.array([0.2, 0.8, 1.2, 1.8, 2.2, 2.8, 3.2, 3.8, 4.2, 4.8])\n\n# Create a new figure with specified size\nfig, axes = plt.subplots(1, 4, figsize=(12.0, 4.0))\n\n# Plot data on each subplot\nfor ax, model_name in zip(axes, ['Model-Basedness', 'Meta-Cognition', 'Exploration', 'Risk Taking']):\n    ax.scatter(x, y)\n    ax.set_title(model_name)\n    ax.set_xlabel('Value')\n\n# Add a vertical line for reference\nfor ax in axes:\n    ax.axvline(x=1, color='black', linestyle='--')\n\n# Adjust layout for better spacing\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.array([100, 200, 300, 400])\ny = np.array([77, 79, 81, 83])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Plot the data with enhanced aesthetics\nax.plot(x, y, marker='o', linestyle='-', color='navy', linewidth=2, markersize=8, label='Linear Probing')\n\n# Add grid for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Set labels with improved font size and style\nax.set_xlabel('Pre-training GPU Hours', fontsize=12, fontweight='bold')\nax.set_ylabel('Accuracy [%]', fontsize=12, fontweight='bold')\n\n# Set title with enhanced font size and style\nax.set_title('ImageNet-1K Linear Probing', fontsize=14, fontweight='bold')\n\n# Add a legend with improved location and font size\nax.legend(loc='upper left', fontsize=10)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ninference_times = np.array([10, 20, 30, 40, 50, 60])\naverage_scores = np.array([0.55, 0.65, 0.70, 0.75, 0.80, 0.85])\nbubble_sizes = np.array([10, 20, 30, 40, 50, 60])  # Bubble sizes for each point\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the scatter plot with varying bubble sizes and colors\nscatter = ax.scatter(inference_times, average_scores, s=bubble_sizes, c=average_scores, cmap='viridis', alpha=0.7)\n\n# Add a color bar to indicate the scale of the bubble sizes\ncbar = plt.colorbar(scatter)\ncbar.set_label('Number of Anomalies Detected')\n\n# Set labels and title\nax.set_xlabel('Inference Time (seconds)')\nax.set_ylabel('Average Score')\nax.set_title('Bubble Size: Number of Anomalies Detected')\n\n# Add grid lines for better readability\nax.grid(True, linestyle='--', alpha=0.5)\n\n# Add annotations for clarity\nfor i, txt in enumerate(['AR', 'LSTMAD-\u03b2', 'LSTMAD-\u03b1', 'AE', 'FITS', 'Donut']):\n    ax.annotate(txt, (inference_times[i], average_scores[i]), textcoords=\"offset points\", xytext=(0,10), ha='center')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data for plotting\nx = np.array([20, 25, 30, 35, 40, 45, 50])\ny = np.array([50, 55, 52, 48, 45, 47, 49])\ncolors = np.array(['blue', 'green', 'red', 'purple', 'orange', 'cyan', 'magenta'])\nsizes = np.array([100, 150, 200, 250, 300, 350, 400])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the scatter plot with enhanced aesthetics\nscatter = ax.scatter(x, y, s=sizes, c=colors, alpha=0.7, edgecolor='black', linewidth=1.5)\n\n# Add a legend with a title\nlegend_labels = ['MC-ViT-B', 'Bard + ImageViT', 'ShortViT', 'LongViT', 'SeVILA']\nax.legend(scatter.legend_elements(), legend_labels, title=\"EgoSchema VQA accuracy\", loc=\"upper left\")\n\n# Set labels and title with improved font sizes\nax.set_xlabel('EgoSchema VQA accuracy', fontsize=12)\nax.set_ylabel('Perception Test VQA accuracy', fontsize=12)\nax.set_title('Number of parameters', fontsize=14, fontweight='bold')\n\n# Add grid lines for better readability\nax.grid(True, linestyle='--', alpha=0.6)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.array([1, 2, 3, 4, 5])\ny = np.array([0.01, 0.02, 0.03, 0.04, 0.05])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data with different markers and colors\nax.scatter(x, y, c='blue', marker='^', label='Single LSTM')\nax.scatter(x, y, c='green', marker='s', label='Ensemble LSTM')\nax.scatter(x, y, c='red', marker='o', label='CAE Reconstruction')\n\n# Set labels and title\nax.set_xlabel('Test Case Index', fontsize=12)\nax.set_ylabel('Average Relative Error, u', fontsize=12)\nax.set_title('Average Relative Error, u', fontsize=14, fontweight='bold')\n\n# Add grid for better readability\nax.grid(True, linestyle='--', alpha=0.7)\n\n# Add a legend\nax.legend(loc='upper right', fontsize=10)\n\n# Set x and y axis limits\nax.set_xlim(0, 6)\nax.set_ylim(0, 0.06)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nclasses = ['spotlight', 'sliding', 'wool', 'weasel', 'space', 'partridge', 'mushroom', 'bighorn']\naccuracies_majority = [0.95, 0.88, 0.75, 0.65, 0.55, 0.45, 0.35, 0.25]\naccuracies_minority = [0.90, 0.85, 0.70, 0.60, 0.50, 0.40, 0.30, 0.20]\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(6.0, 3.0))\n\n# Plot the data\nax.plot(classes, accuracies_majority, label='Majority', marker='o', linestyle='-', color='blue')\nax.plot(classes, accuracies_minority, label='Minority', marker='s', linestyle='--', color='red')\n\n# Set labels and title\nax.set_xlabel('Classes')\nax.set_ylabel('Accuracies')\nax.set_title('Accuracies for the ImageNet Classes (ClarifAI)')\n\n# Add a legend\nax.legend()\n\n# Add grid lines for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data for plotting\nx = np.array([50, 30, 20, 10, 0])\ny = np.array([68, 66, 64, 62, 60])\nz = np.array([68, 66, 64, 62, 60])\n\n# Create a new figure with specified size\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10.0, 4.0))\n\n# Plot the first subplot\nscatter1 = ax1.scatter(x, y, c='blue', marker='o', s=100, alpha=0.7)\nax1.set_title('Logic Grid Puzzle(Accuracy versus token cost)')\nax1.set_xlabel('Token cost($)')\nax1.set_ylabel('Accuracy(%)')\nax1.grid(True)\n\n# Add a legend\nlegend_labels = ['MAD+judge', 'ToT', 'CoT(maj@5)', 'CoT(maj@1)', 'Self-refine']\nfor i, label in enumerate(legend_labels):\n    ax1.annotate(label, (x[i], y[i]), textcoords=\"offset points\", xytext=(-10,10), ha='center')\n\n# Plot the second subplot\nscatter2 = ax2.scatter(x, z, c='red', marker='s', s=100, alpha=0.7)\nax2.set_title('Logic Grid Puzzle(Accuracy versus TFLOPS)')\nax2.set_xlabel('TFLOPS')\nax2.set_ylabel('Accuracy(%)')\nax2.grid(True)\n\n# Add a legend\nfor i, label in enumerate(legend_labels):\n    ax2.annotate(label, (x[i], z[i]), textcoords=\"offset points\", xytext=(-10,10), ha='center')\n\n# Adjust layout for better spacing\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_16.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.array([15, 20, 25, 30, 35, 40, 45, 50])\ny = np.array([5, 10, 15, 20, 25, 30, 35, 40])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(8.0, 4.0))\n\n# Plot the data with different markers and colors\nax.plot(x, y, 'o-', color='blue', label='Efficiency (%)')\nax.scatter(x, y, c=y, cmap='viridis', s=100, alpha=0.7, edgecolor='k')\n\n# Set labels and title\nax.set_xlabel('Efficiency (%)')\nax.set_ylabel('Carbon Reduction (%)')\nax.set_title('Energy Source')\n\n# Add a legend\nax.legend()\n\n# Add grid for better readability\nax.grid(True, linestyle='--', alpha=0.6)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_17.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data for plotting\nx = np.array([-30, -25, -20, -15, -10, -5, 0, 5, 10, 15, 20, 25, 30])\ny = np.array([10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(9.0, 6.0))\n\n# Plot the scatter plot with enhanced aesthetics\nscatter = ax.scatter(x, y, c=y, cmap='viridis', s=100, alpha=0.7, edgecolor='w', linewidth=1)\n\n# Add a color bar to indicate the scale of the data\ncbar = plt.colorbar(scatter)\ncbar.set_label('\u0394 Robust Accuracy (%)')\n\n# Set labels and title with improved font sizes\nax.set_xlabel('\u0394 RNFR (%)', fontsize=12)\nax.set_ylabel('\u0394 Robust Accuracy (%)', fontsize=12)\nax.set_title('Scatter Plot of \u0394 RNFR vs \u0394 Robust Accuracy', fontsize=14)\n\n# Add grid lines for better readability\nax.grid(True, linestyle='--', alpha=0.6)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_18.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.array([2, 4, 6, 8, 10, 12, 14, 16])\ny1 = np.array([95, 90, 85, 80, 75, 70, 65, 60])\ny2 = np.array([105, 100, 95, 90, 85, 80, 75, 70])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Plot the data with different markers and colors\nax.scatter(x, y1, color='blue', marker='o', label='Day 1')\nax.scatter(x, y2, color='orange', marker='s', label='Day 2')\n\n# Set labels and title\nax.set_xlabel('X-axis Label')\nax.set_ylabel('Y-axis Label')\nax.set_title('Sample Scatter Plot')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_19.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.array([2, 4, 6, 8, 10, 12, 14, 16])\ny = np.array([85, 90, 95, 100, 105, 110, 115, 120])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Plot the data with enhanced aesthetics\nax.scatter(x, y, c=y, cmap='viridis', s=100, edgecolor='black', linewidth=1.5, alpha=0.7)\n\n# Set labels with improved font size and style\nax.set_xlabel('X-axis', fontsize=12, fontweight='bold')\nax.set_ylabel('Y-axis', fontsize=12, fontweight='bold')\n\n# Add grid lines for better readability\nax.grid(True, linestyle='--', alpha=0.5)\n\n# Add a color bar to indicate the scale of Y values\ncbar = plt.colorbar()\ncbar.set_label('Y-axis Value', rotation=270, labelpad=15, fontsize=10)\n\n# Set limits for axes\nax.set_xlim(0, 18)\nax.set_ylim(80, 125)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.array([175, 200, 225, 250, 275, 300])\ny1 = np.array([140, 160, 180, 200, 220, 240])\ny2 = np.array([150, 170, 190, 210, 230, 250])\ny3 = np.array([160, 180, 200, 220, 240, 260])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(4.0, 8.0))\n\n# Plot the data with different styles and markers\nax.plot(x, y1, label='Solar Energy', color='blue', linestyle='-', marker='o', markersize=5)\nax.plot(x, y2, label='Wind Energy', color='red', linestyle='--', marker='s', markersize=5)\nax.plot(x, y3, label='Hydropower', color='gray', linestyle='-.', marker='^', markersize=5)\n\n# Set labels and title\nax.set_xlabel('Installed Capacity (GW)')\nax.set_ylabel('Energy Output (TWh)')\nax.set_title('Energy Production Trends')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_20.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.array([10, 20, 30, 40, 50, 60, 70, 80, 90])\ny = np.array([20, 30, 40, 50, 60, 70, 80, 90, 100])\ncolors = np.array(['green', 'blue', 'red', 'purple', 'orange', 'cyan', 'magenta', 'yellow', 'gray'])\nsizes = np.array([50, 60, 70, 80, 90, 100, 110, 120, 130])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the scatter plot with enhanced aesthetics\nscatter = ax.scatter(x, y, c=colors, s=sizes, alpha=0.7, edgecolor='w', linewidth=1)\n\n# Add a color bar to indicate the size of each point\ncbar = plt.colorbar(scatter)\ncbar.set_label('Size')\n\n# Set labels and title\nax.set_xlabel('X Axis')\nax.set_ylabel('Y Axis')\nax.set_title('Scatter plot with colorbar')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_21.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data for two different datasets\nx1 = np.array([2, 3, 4, 5, 6, 7, 8])\ny1 = np.array([0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8])\n\nx2 = np.array([2, 3, 4, 5, 6, 7, 8])\ny2 = np.array([0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3])\n\n# Create a new figure with a larger size for better visibility\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10.0, 5.0))\n\n# Plot the first dataset\nscatter1 = ax1.scatter(x1, y1, c='c', marker='o', label='LibriCSS WER')\nax1.set_title('LibriCSS vs Additional Data 1')\nax1.set_xlabel('Number of Microphones')\nax1.set_ylabel('WER (%)')\nax1.legend()\n\n# Add a legend with custom labels\nfor i, txt in enumerate(['LibriCSS WER', 'Additional Data 1']):\n    ax1.annotate(txt, (x1[i], y1[i]), textcoords=\"offset points\", xytext=(0,10), ha='center')\n\n# Plot the second dataset\nscatter2 = ax2.scatter(x2, y2, c='m', marker='^', label='AMI WER')\nax2.set_title('AMI vs Additional Data 2')\nax2.set_xlabel('Number of Microphones')\nax2.set_ylabel('WER (%)')\nax2.legend()\n\n# Add a legend with custom labels\nfor i, txt in enumerate(['AMI WER', 'Additional Data 2']):\n    ax2.annotate(txt, (x2[i], y2[i]), textcoords=\"offset points\", xytext=(0,10), ha='center')\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_22.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nmodels = ['llama-2-70-chat', 'llama-2-70', 'hfalcon-40b', 'claude-2', 'claude-1', \n          'text-bison@002', 'text-davinci-001', 'text-davinci-003', 'gpt-4']\nvalues = [0.85, 0.90, 0.88, 0.92, 0.87, 0.89, 0.91, 0.93, 0.94]\nexploration = [0.1, 0.15, 0.12, 0.18, 0.13, 0.14, 0.16, 0.17, 0.19]\nrisk_taking = [0.05, 0.06, 0.07, 0.08, 0.09, 0.10, 0.11, 0.12, 0.13]\n\n# Create a new figure with a larger size for better visibility\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12.0, 6.0), sharey=True)\n\n# Plot the first subplot\nax1.scatter(values, exploration, c='green', label='Exploration')\nax1.scatter(values, risk_taking, c='red', label='Risk Taking')\nax1.set_title('Performance Comparison')\nax1.set_xlabel('Value')\nax1.set_ylabel('Strategy')\nax1.legend()\nax1.grid(True)\n\n# Plot the second subplot\nax2.scatter(values, exploration, c='green', label='Exploration')\nax2.scatter(values, risk_taking, c='red', label='Risk Taking')\nax2.set_title('Strategic Traits')\nax2.set_xlabel('Value')\nax2.set_ylabel('Strategy')\nax2.legend()\nax2.grid(True)\n\n# Add a title for the entire figure\nplt.suptitle('Performance Comparison', fontsize=16, fontweight='bold')\n\n# Adjust layout for better spacing\nplt.tight_layout(rect=[0, 0.03, 1, 0.95])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_23.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data for plotting\nmodels = ['Model-Based', 'Meta-Cognition', 'Exploration', 'Risk-Taking']\ngpt4_scores = [1.5, 1.75, 1.25, 1.3]\nmptb_scores = [1.6, 1.8, 1.35, 1.4]\nlama27b_scores = [1.7, 1.9, 1.45, 1.5]\nfalcon40b_scores = [1.8, 2.0, 1.55, 1.6]\ndavinci003_scores = [1.9, 2.1, 1.65, 1.7]\ndavinci002_scores = [2.0, 2.2, 1.75, 1.8]\nclaudie_scores = [2.1, 2.3, 1.85, 1.9]\n\n# Create a new figure with a larger size for better visibility\nfig, axes = plt.subplots(2, 2, figsize=(8.0, 8.0), constrained_layout=True)\n\n# Plotting the first subplot: Model-Based vs Meta-Cognition\naxes[0, 0].scatter(models, gpt4_scores, color='blue', label='GPT-4')\naxes[0, 0].scatter(models, mptb_scores, color='orange', label='MPT-B')\naxes[0, 0].set_title('Model-Based')\naxes[0, 0].set_xlabel('Models')\naxes[0, 0].set_ylabel('Score')\naxes[0, 0].legend()\n\n# Plotting the second subplot: Exploration vs Risk-Taking\naxes[0, 1].scatter(models, lama27b_scores, color='green', label='Llama2-7B')\naxes[0, 1].scatter(models, falcom40b_scores, color='red', label='Falcon-40B')\naxes[0, 1].set_title('Exploration')\naxes[0, 1].set_xlabel('Models')\naxes[0, 1].set_ylabel('Score')\naxes[0, 1].legend()\n\n# Plotting the third subplot: Model-Based vs Meta-Cognition\naxes[1, 0].scatter(models, davinci003_scores, color='blue', label='Davinci-003')\naxes[1, 0].scatter(models, davinci002_scores, color='orange', label='Davinci-002')\naxes[1, 0].set_title('Model-Based')\naxes[1, 0].set_xlabel('Models')\naxes[1, 0].set_ylabel('Score')\naxes[1, 0].legend()\n\n# Plotting the fourth subplot: Exploration vs Risk-Taking\naxes[1, 1].scatter(models, claudie_scores, color='red', label='Claude')\naxes[1, 1].set_title('Risk-Taking')\naxes[1, 1].set_xlabel('Models')\naxes[1, 1].set_ylabel('Score')\naxes[1, 1].legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_24.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data for three different scatter plots\nx1 = np.array([70, 80, 90])\ny1 = np.array([30, 40, 50])\ncolors1 = np.array([0.2, 0.4, 0.6])\n\nx2 = np.array([70, 80, 90])\ny2 = np.array([20, 30, 40])\ncolors2 = np.array([0.3, 0.5, 0.7])\n\nx3 = np.array([70, 80, 90])\ny3 = np.array([10, 20, 30])\ncolors3 = np.array([0.4, 0.6, 0.8])\n\n# Create a new figure with a larger size for better visibility\nfig, axes = plt.subplots(1, 3, figsize=(15.0, 5.0))\n\n# Scatter plot 1\naxes[0].scatter(x1, y1, c=colors1, cmap='coolwarm', s=100)\naxes[0].set_title('Scatter Plot - deepskyblue')\naxes[0].set_xlabel('X Values')\naxes[0].set_ylabel('Y Values')\naxes[0].set_xlim(60, 100)\naxes[0].set_ylim(20, 60)\n\n# Scatter plot 2\naxes[1].scatter(x2, y2, c=colors2, cmap='plasma', s=100)\naxes[1].set_title('Scatter Plot - magenta')\naxes[1].set_xlabel('X Values')\naxes[1].set_ylabel('Y Values')\naxes[1].set_xlim(60, 100)\naxes[1].set_ylim(10, 50)\n\n# Scatter plot 3\naxes[2].scatter(x3, y3, c=colors3, cmap='viridis', s=100)\naxes[2].set_title('Scatter Plot - limegreen')\naxes[2].set_xlabel('X Values')\naxes[2].set_ylabel('Y Values')\naxes[2].set_xlim(60, 100)\naxes[2].set_ylim(0, 40)\n\n# Add a color bar to each subplot\ncbar1 = fig.colorbar(axes[0].collections[0], ax=axes[0], orientation='vertical')\ncbar1.set_label('Color scale for X')\n\ncbar2 = fig.colorbar(axes[1].collections[0], ax=axes[1], orientation='vertical')\ncbar2.set_label('Color scale for X')\n\ncbar3 = fig.colorbar(axes[2].collections[0], ax=axes[2], orientation='vertical')\ncbar3.set_label('Color scale for X')\n\n# Adjust layout for better spacing\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_25.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.array([70, 72, 74, 76, 78, 80, 82, 84, 86, 88])\ny1 = np.array([30, 35, 40, 45, 50, 55, 60, 65, 70, 75])\ny2 = np.array([25, 30, 35, 40, 45, 50, 55, 60, 65, 70])\ny3 = np.array([20, 25, 30, 35, 40, 45, 50, 55, 60, 65])\n\n# Create a new figure with specified size\nfig, axes = plt.subplots(1, 3, figsize=(15.0, 5.0))\n\n# Plot 1: ViT Pose (sc) Performance\naxes[0].plot(x, y1, label='ViT Pose (sc)', color='purple', marker='o')\naxes[0].set_title('ViT Pose (sc) Performance')\naxes[0].set_xlabel('Average Precision on MSCOCO (%)')\naxes[0].set_ylabel('Average Precision on HumanArt (%)')\naxes[0].legend()\naxes[0].grid(True)\n\n# Plot 2: ViT Pose (ft) Performance\naxes[1].plot(x, y2, label='ViT Pose (ft)', color='pink', marker='s')\naxes[1].set_title('ViT Pose (ft) Performance')\naxes[1].set_xlabel('Average Precision on MSCOCO (%)')\naxes[1].set_ylabel('Average Precision on HumanArt (%)')\naxes[1].legend()\naxes[1].grid(True)\n\n# Plot 3: VLPose Performance\naxes[2].plot(x, y3, label='VLPose', color='green', marker='^')\naxes[2].set_title('VLPose Performance')\naxes[2].set_xlabel('Average Precision on MSCOCO (%)')\naxes[2].set_ylabel('Average Precision on HumanArt (%)')\naxes[2].legend()\naxes[2].grid(True)\n\n# Adjust layout for better spacing\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data for plotting\nx = np.array([1.2, 1.4, 1.6, 1.8, 2.0, 2.2, 2.4, 2.6, 2.8, 3.0, 3.2, 3.4, 3.6, 3.8, 4.0, 4.2, 4.4, 4.6, 4.8, 5.0])\ny = np.array([75, 50, 30, 20, 10, 5, 2, 1, 0.5, 0.2, 0.1, 0.05, 0.02, 0.01, 0.005, 0.002, 0.001, 0.0005, 0.0002, 0.0001])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Plot the data with different markers and colors\nax.scatter(x, y, c=np.arange(len(x)), cmap='viridis', s=100, alpha=0.7, edgecolors='w', marker='o')\n\n# Set labels and title\nax.set_xlabel('Diversity (%)')\nax.set_ylabel('Accuracy (%)')\nax.set_title('TFLOPS')\n\n# Add a color bar to indicate the scale of the data points\ncbar = plt.colorbar(ax.collections[0])\ncbar.set_label('Token cost ($)')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt  \nimport numpy as np  \n\n# Sample data\nx = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\ny = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n\n# Create a new figure\nfig = plt.figure(figsize=(5.0, 5.0))\n\n# Plot the data with different colors and markers\nplt.scatter(x, y, c=['red', 'green', 'blue', 'yellow', 'orange', 'purple', 'pink', 'brown', 'gray', 'cyan'], marker='o')\n\n# Set labels\nplt.xlabel('X-axis')\nplt.ylabel('Y-axis')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nwrmse = np.array([0.123, 0.456, 0.789, 1.012, 1.314, 1.618, 1.923])\nbpp = np.array([0.06, 0.08, 0.10, 0.12, 0.14, 0.16, 0.18])\nnames = ['SIREN', 'WIRE', 'FFN', 'SZ3', 'NNComp', 'Ours']\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Plot the data with different markers and colors\nmarkers = ['o', 's', '^', 'p', 'x', 'D']\ncolors = ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd', '#8c564b']\nfor i, (wrms, bpp_val, name) in enumerate(zip(wrmse, bpp, names)):\n    ax.scatter(bpp_val, wrms, color=colors[i], marker=markers[i], s=100, label=name)\n\n# Set labels and title\nax.set_xlabel('Bit per pixel (BPP)', fontsize=12)\nax.set_ylabel('WRMSE', fontsize=12)\nax.set_title('Scatter Plot of WRMSE vs BPP', fontsize=14, fontweight='bold')\n\n# Add grid for better readability\nax.grid(True, linestyle='--', alpha=0.7)\n\n# Add a legend with a shadow effect\nax.legend(title='Model', loc='upper right', shadow=True, fontsize=10)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create sample data\nx = np.random.rand(100)\ny = np.random.rand(100)\ncolors = np.random.rand(100)\narea = (30 * np.random.rand(100))**2  # 0 to 15 point radii\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(8.0, 8.0))\n\n# Scatter plot with different colors and sizes\nscatter = plt.scatter(x, y, c=colors, s=area, alpha=0.5)\n\n# Add a legend\nplt.legend(['Daytime Sunny', 'Night Rainy', 'PGST'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nn_params = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\nnmae = np.array([0.05, 0.1, 0.15, 0.2, 0.25, 0.3, 0.35, 0.4, 0.45, 0.5])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(6.0, 3.0))\n\n# Plot the data with enhanced aesthetics\nax.scatter(n_params, nmae, c=n_params, cmap='viridis', s=100, edgecolor='k', alpha=0.7)\n\n# Add grid lines for better readability\nax.grid(True, linestyle='--', alpha=0.5)\n\n# Set labels with improved font size and style\nax.set_xlabel('Number of parameters (M)', fontsize=10, fontweight='bold')\nax.set_ylabel('NMAE on QM9', fontsize=10, fontweight='bold')\n\n# Add a title with enhanced font size and style\nax.set_title('Number of params. vs. NMAE on QM9', fontsize=12, fontweight='bold')\n\n# Customize ticks for better readability\nax.tick_params(axis='both', which='major', labelsize=8)\n\n# Add a color bar to indicate the number of parameters\ncbar = plt.colorbar()\ncbar.set_label('Number of Parameters', rotation=270, labelpad=15)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create sample data\nx1 = np.random.randn(100)\ny1 = np.random.randn(100)\nx2 = np.random.randn(100)\ny2 = np.random.randn(100)\nx3 = np.random.randn(100)\ny3 = np.random.randn(100)\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Plot the data with different markers and colors\nax.scatter(x1, y1, c='blue', marker='o', label='ar')\nax.scatter(x2, y2, c='pink', marker='s', label='de')\nax.scatter(x3, y3, c='green', marker='^', label='fr')\n\n# Set labels and title\nax.set_xlabel('PC1')\nax.set_ylabel('PC2')\nax.set_title('Legend')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data for two different plots\nx1 = np.array([0.5, 0.6, 0.7, 0.8, 0.9])\ny1 = np.array([0.45, 0.5, 0.55, 0.6, 0.65])\n\nx2 = np.array([0.5, 0.6, 0.7, 0.8, 0.9])\ny2 = np.array([0.4, 0.45, 0.5, 0.55, 0.6])\n\n# Create a new figure with a larger size for better visibility\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(7.0, 10.0))\n\n# Plot 1: DE\nax1.scatter(x1, y1, c='green', label='iTrm-All')\nax1.scatter(x1, y1, c='green', marker='o', s=100, alpha=0.5)\nax1.set_title('DE')\nax1.set_xlabel('Cka Similarity')\nax1.set_ylabel('MSE')\nax1.grid(True, linestyle='--', linewidth=0.5)\nax1.legend()\n\n# Plot 2: PJM\nax2.scatter(x2, y2, c='red', label='TimeXer')\nax2.scatter(x2, y2, c='red', marker='s', s=100, alpha=0.5)\nax2.set_title('PJM')\nax2.set_xlabel('Cka Similarity')\nax2.set_ylabel('MSE')\nax2.grid(True, linestyle='--', linewidth=0.5)\nax2.legend()\n\n# Adjust layout for better spacing between subplots\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/tree_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the bar chart\nlabels = ['physicsforums.com', 'gmatclub.com', 'mathhelpboards.com', 'stackexchange.com', 'mathoverflow.net', 'proofwiki.org', 'mathhelpforum.com']\nsizes = [18.42, 6.26, 6.15, 30.6, 10.91, 8.54, 14.21]\ncolors = ['#4CAF50', '#FFC107', '#FF5722', '#2196F3', '#9C27B0', '#FFEB3B', '#009688']\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(12.0, 8.0))\n\n# Plot the bar chart\nbars = ax.bar(labels, sizes, color=colors)\n\n# Add data labels on top of each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.5, f'{yval}%', ha='center', va='bottom', fontsize=10, fontweight='bold')\n\n# Set title and labels\nax.set_title('Popularity of Math and Science Forums', fontsize=16, fontweight='bold')\nax.set_xlabel('Forums', fontsize=12)\nax.set_ylabel('Percentage', fontsize=12)\n\n# Rotate x-axis labels for better readability\nplt.xticks(rotation=45, ha='right')\n\n# Add grid lines for better readability\nax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=0.5)\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/tree_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the pie chart\nlabels = ['Java', 'Python', 'JavaScript', 'C++', 'Other']\nsizes = [10, 20, 27, 23, 8]\ncolors = ['#FF9999','#66b3ff','#99ff99','#ffcc99','#c2c2f0']\nexplode = (0.1, 0, 0, 0, 0)  # explode 1st slice\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(12.0, 8.0))\n\n# Plot the pie chart\nwedges, texts, autotexts = ax.pie(sizes, explode=explode, labels=labels, colors=colors,\n                                  autopct='%1.1f%%', shadow=True, startangle=140)\n\n# Enhance the pie chart with additional features\nax.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\nplt.setp(autotexts, size=10, weight=\"bold\")\nplt.setp(texts, size=12)\nplt.title(\"Programming Language Usage\", fontsize=16, fontweight='bold')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/tree_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the pie chart\nlabels = ['Adidas', 'Nike', 'Puma', 'Reebok']\nsizes = [13.42, 30.6, 14.21, 10.91]\ncolors = ['#4682B4', '#FFD700', '#90EE90', '#FFA500']\nexplode = (0.1, 0, 0, 0)  # explode the 1st slice\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(12.0, 8.0))\n\n# Plot the pie chart\nwedges, texts, autotexts = ax.pie(\n    sizes, \n    explode=explode, \n    labels=labels, \n    colors=colors, \n    autopct='%1.1f%%', \n    shadow=True, \n    startangle=140,\n    textprops={'color': \"black\"}\n)\n\n# Set aspect ratio to be equal so that pie is drawn as a circle.\nax.axis('equal')  \n\n# Add a title\nplt.title(\"Market Share of Top Brands\", fontsize=16, fontweight='bold')\n\n# Add a legend\nax.legend(wedges, labels, title=\"Brands\", loc=\"center left\", bbox_to_anchor=(1, 0, 0.5, 1))\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/tree_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the bar chart\ncategories = ['Category A', 'Category B', 'Category C']\nvalues = [50, 15, 20]\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(4.0, 6.0))\n\n# Plot the bar chart\nbars = ax.bar(categories, values, color=['#FFA07A', '#ADD8E6', '#90EE90'])\n\n# Add value labels on top of each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 1, f'{yval}%', ha='center', va='bottom')\n\n# Set title and labels\nax.set_title('Bar Chart Example')\nax.set_xlabel('Categories')\nax.set_ylabel('Values (%)')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/tree_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the bar chart\ncategories = ['European', 'Australian', 'South American', 'Asian', 'North American', 'African']\nvalues = [15, 18, 10, 25, 20, 12]\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Plot the bar chart\nbars = ax.bar(categories, values, color=plt.cm.viridis(np.linspace(0, 1, len(categories))))\n\n# Add value labels on top of each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.5, f'{yval}%', ha='center', va='bottom')\n\n# Set title and labels\nax.set_title('Percentage Distribution')\nax.set_xlabel('Categories')\nax.set_ylabel('Percentage (%)')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/violin_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create sample data\nx = np.array([1, 2, 3, 4, 5])\ny = np.array([1, 2, 3, 4, 5])\nlog_pcl = np.array([1, 2, 3, 4, 5])\nlog_pcl_inchat = np.array([1, 2, 3, 4, 5])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(8.0, 7.0))\n\n# Plot the scatter plot with different colors and sizes\nscatter = ax.scatter(x, y, c=log_pcl, s=log_pcl_inchat * 100, cmap='viridis', alpha=0.6)\n\n# Add a color bar to the plot\ncbar = plt.colorbar(scatter)\ncbar.set_label('Log PCL')\n\n# Set labels and title\nax.set_xlabel('Number of examples')\nax.set_ylabel('Log PCL')\nax.set_title('Llama2 vs Llama2 (In-Chat)')\n\n# Add a legend\nax.legend(['Llama2', 'Llama2 (In-Chat)'], loc='upper left')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/violin_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nefficiency = np.array([0.8, 0.9, 0.7, 0.6, 0.5])\ncomfort = np.array([0.7, 0.8, 0.6, 0.5, 0.4])\nsafety = np.array([0.6, 0.7, 0.5, 0.4, 0.3])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Plot the data with different colors and markers\nax.plot(efficiency, label='Efficiency', color='blue', marker='o')\nax.plot(comfort, label='Comfort', color='orange', marker='s')\nax.plot(safety, label='Safety', color='green', marker='^')\n\n# Set labels and title\nax.set_xlabel('Criteria')\nax.set_ylabel('Score')\nax.set_title('Comparison of Scores with and without Memory')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/violin_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data for demonstration\nefficiency = np.array([0.5, 0.7, 0.8, 0.9, 1.0])\ncomfort = np.array([0.3, 0.4, 0.5, 0.6, 0.7])\nsafety = np.array([0.2, 0.3, 0.4, 0.5, 0.6])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Plot the data with different colors and labels\nax.bar(range(len(efficiency)), efficiency, color='pink', label='Without Memory')\nax.bar(range(len(comfort)), comfort, bottom=efficiency, color='lightblue', label='With Memory')\n\n# Set labels and title\nax.set_xlabel('Criteria')\nax.set_ylabel('Score')\nax.set_title('Criteria Scores')\nax.set_xticks(range(len(efficiency)))\nax.set_xticklabels(['Efficiency', 'Comfort', 'Safety'])\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/violin_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data for plotting\nx = np.array([1, 2, 3, 4, 5])\ny1 = np.array([0.1, 0.2, 0.3, 0.4, 0.5])\ny2 = np.array([0.6, 0.7, 0.8, 0.9, 1.0])\n\n# Create a new figure with specified size\nfig, axes = plt.subplots(1, 2, figsize=(8.0, 4.0))\n\n# Plot the first subplot\naxes[0].bar(x, y1, color='green', label='GPT-4V(Version)')\naxes[0].set_title('Scoring Evaluation')\naxes[0].set_xlabel('Length Distribution')\naxes[0].set_ylabel('Score')\naxes[0].legend()\n\n# Plot the second subplot\naxes[1].bar(x, y2, color='orange', label='Gemini')\naxes[1].set_title('Pair Comparison')\naxes[1].set_xlabel('Length Distribution')\naxes[1].set_ylabel('Score')\naxes[1].legend()\n\n# Adjust layout for better spacing\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/violin_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data for demonstration\ndata = {\n    'jTrans': [0.3, 0.4, 0.5, 0.6, 0.7],\n    'PalmTree': [0.4, 0.5, 0.6, 0.7, 0.8],\n    'CLAP': [0.5, 0.6, 0.7, 0.8, 0.9]\n}\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(5.0, 5.0))\n\n# Plot the data\nfor i, (key, values) in enumerate(data.items()):\n    ax.barh(range(len(values)), values, left=np.arange(len(values)), height=0.8, label=key)\n\n# Set labels and title\nax.set_xlabel('Accuracy')\nax.set_title('Model Performance')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/violin_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.array([1, 2, 3, 4, 5])\ny1 = np.array([0.1, 0.2, 0.3, 0.4, 0.5])\ny2 = np.array([0.9, 0.8, 0.7, 0.6, 0.5])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Plot the data with different styles\nax.plot(x, y1, label='Teacher-Style', color='blue', linestyle='-', linewidth=2, marker='o', markersize=5)\nax.fill_between(x, y1, color='lightblue', alpha=0.3)\n\nax.plot(x, y2, label='Standardize', color='orange', linestyle='--', linewidth=2, marker='s', markersize=5)\nax.fill_between(x, y2, color='orange', alpha=0.3)\n\n# Add grid for better readability\nax.grid(True, which='both', linestyle='--', linewidth=0.5)\n\n# Set labels and title\nax.set_xlabel('X-axis')\nax.set_ylabel('Y-axis')\nax.set_title('Comparison of Two Styles')\n\n# Add legend\nax.legend()\n\n# Annotate specific points\nfor i, txt in enumerate(['A1', 'B1', 'C1', 'D1', 'E1']):\n    ax.annotate(txt, (x[i], y1[i]), textcoords=\"offset points\", xytext=(0,10), ha='center', fontsize=8)\nfor i, txt in enumerate(['A2', 'B2', 'C2', 'D2', 'E2']):\n    ax.annotate(txt, (x[i], y2[i]), textcoords=\"offset points\", xytext=(0,-10), ha='center', fontsize=8)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/violin_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data for demonstration\ndata1 = np.array([50, 70, 80, 90, 60])\ndata2 = np.array([60, 80, 90, 70, 50])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Plot the first dataset\nax.scatter(data1, data1, color='pink', label='Vanilla', s=100, alpha=0.7)\n\n# Plot the second dataset\nax.scatter(data2, data2, color='skyblue', label='CoT', s=100, alpha=0.7)\n\n# Set labels and title\nax.set_xlabel('X-axis')\nax.set_ylabel('Y-axis')\nax.set_title('Comparison of Two Datasets')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/violin_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.array([2, 4, 6, 8, 10])\ny1 = np.array([163, 201, 176, 159, 109])\ny2 = np.array([97, 95, 95, 115, 97])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Plot the data with different styles\nax.bar(x - 0.2, y1, width=0.4, color='blue', label='Group l0')\nax.bar(x + 0.2, y2, width=0.4, color='orange', label='AGIS')\n\n# Set labels and title\nax.set_xlabel('Number of Features')\nax.set_ylabel('% Decrease in Test MSE vs. FLAM-Gl')\nax.set_title('Percentage Decrease in Test MSE vs. FLAM-Gl')\n\n# Add grid for better readability\nax.grid(True, linestyle='--', alpha=0.7)\n\n# Add legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/violin_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.array([0.88, 0.85, 0.79, 0.67, 0.57])\ny = np.array([0.18, 0.19, 0.19, 0.16, 0.18])\nz = np.array([3.33, 3.33, 10.67, 29.10, 16.95])\ncolors = np.array([0.18, 0.19, 0.19, 0.16, 0.18])\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot the data using a scatter plot\nscatter = ax.scatter(x, y, c=colors, cmap='viridis', s=z*10, alpha=0.7)\n\n# Add a color bar to indicate the scale of the colors\ncbar = plt.colorbar(scatter)\ncbar.set_label('Pearson R')\n\n# Set labels and title\nax.set_xlabel('Decimated Sampling Rate')\nax.set_ylabel('KCC')\nax.set_title('Scatter Plot of KCC vs Decimated Sampling Rate')\n\n# Annotate each point with its corresponding z value\nfor i, txt in enumerate(z):\n    ax.annotate(f'{txt:.2f}', (x[i], y[i]), textcoords=\"offset points\", xytext=(0,10), ha='center')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/violin_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data for a hypothetical scenario\n# Let's assume we have data about students' grades in different classes and genders\ngrades_class_1 = np.array([75, 80, 85, 90, 95, 65, 70, 75, 80, 85])\ngrades_class_2 = np.array([85, 90, 95, 100, 92, 88, 84, 80, 76, 72])\ngrades_class_3 = np.array([60, 65, 70, 75, 80, 85, 90, 95, 100, 98])\ngrades_class_4 = np.array([55, 60, 65, 70, 75, 80, 85, 90, 95, 100])\n\n# Create a new figure with a larger size for better visibility\nfig, axes = plt.subplots(2, 2, figsize=(12.0, 8.0), constrained_layout=True)\n\n# Plotting the first subplot\naxes[0, 0].pie([len(grades_class_1)], labels=['Boys'], autopct='%1.1f%%', startangle=90)\naxes[0, 0].set_title('Distribution of Grades: Class 1')\n\n# Plotting the second subplot\naxes[0, 1].pie([len(grades_class_2)], labels=['Girls'], autopct='%1.1f%%', startangle=90)\naxes[0, 1].set_title('Distribution of Grades: Class 2')\n\n# Plotting the third subplot\naxes[1, 0].pie([len(grades_class_3)], labels=['Boys'], autopct='%1.1f%%', startangle=90)\naxes[1, 0].set_title('Distribution of Grades: Class 3')\n\n# Plotting the fourth subplot\naxes[1, 1].pie([len(grades_class_4)], labels=['Girls'], autopct='%1.1f%%', startangle=90)\naxes[1, 1].set_title('Distribution of Grades: Class 4')\n\n# Adjust layout to prevent overlap\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
