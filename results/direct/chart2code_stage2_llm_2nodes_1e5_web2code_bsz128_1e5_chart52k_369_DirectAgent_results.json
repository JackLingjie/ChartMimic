{"file": "dataset/ori_500/3d_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt  \nimport numpy as np  \n\n# Sample data\nx = np.arange(10)\ny = np.random.rand(10)\n\n# Create a new figure\nfig = plt.figure(figsize=(7.0, 7.0))\n\n# Plot the data\nplt.plot(x, y, 'o-', label='Targets')\nplt.plot(x, y + 0.2, 'b-', label='Predictions')\n\n# Set labels and title\nplt.xlabel('Time')\nplt.ylabel('Value')\nplt.title('Targets vs Predictions')\n\n# Add a legend\nplt.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt  \nimport numpy as np  \n\n# Sample data\ndata = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n\n# Create a new figure\nfig = plt.figure(figsize=(8.0, 6.0))\n\n# Plot the data\nplt.imshow(data, cmap='hot', interpolation='nearest')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data for demonstration\nx = np.linspace(-5, 5, 100)\ny = np.linspace(-5, 5, 100)\nX, Y = np.meshgrid(x, y)\nZ = np.sin(np.sqrt(X**2 + Y**2))\n\n# Create a new figure\nfig = plt.figure(figsize=(8.0, 6.0))\nax = fig.add_subplot(111, projection='3d')\n\n# Plot the surface\nsurf = ax.plot_surface(X, Y, Z, cmap='viridis')\n\n# Set labels\nax.set_xlabel('X Label')\nax.set_ylabel('Y Label')\nax.set_zlabel('Z Label')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.array([-4, -2, 0, 2, 4])\ny = np.array([10, 15, 20, 25, 30])\n\n# Create a new figure\nfig = plt.figure(figsize=(8.0, 6.0))\n\n# Plot the data\nplt.plot(x, y, 'ro')  # Red circles for data points\nplt.plot(x, y, 'b-')  # Blue line for fit\n\n# Set labels\nplt.xlabel('Temperature (\u00b0C)')\nplt.ylabel('Volume (L)')\nplt.title('Discrete Points and Fit Line')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt  \nimport numpy as np  \n\n# Sample data\nyears = [2010, 2012, 2014, 2016, 2018]\nprivate_schools = [0.75, 0.75, 0.75, 0.75, 0.75]\npublic_schools = [0.3, 0.3, 0.3, 0.3, 0.3]\n\n# Create a new figure\nfig = plt.figure(figsize=(8.0, 6.0))\n\n# Plot the data\nplt.bar(years, private_schools, color='orange', label='Private Schools')\nplt.bar(years, public_schools, bottom=private_schools, color='blue', label='Public Schools')\n\n# Set labels and title\nplt.xlabel('Year')\nplt.ylabel('Student to Teacher Ratio')\nplt.title('Student to Teacher Ratio by School Type')\nplt.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.linspace(0, 10, 100)\ny = np.linspace(0, 3, 100)\nX, Y = np.meshgrid(x, y)\nZ = np.sin(X) * np.cos(Y)\n\n# Create a new figure\nfig = plt.figure(figsize=(8.0, 6.0))\nax = fig.add_subplot(111, projection='3d')\n\n# Plot the surface\nsurf = ax.plot_surface(X, Y, Z, cmap='viridis')\n\n# Set labels\nax.set_xlabel('Age')\nax.set_ylabel('Vaccination Number')\nax.set_zlabel('Incidence Rate')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nyears = [2010, 2012, 2018]\nsectors = ['Al', 'CS']\ninvestment = [\n    [3.5, 4.5, 5.5],\n    [2.5, 3.5, 4.5]\n]\n\n# Create a new figure\nfig = plt.figure(figsize=(10.0, 8.0))\n\n# Plot the first subplot\nax1 = fig.add_subplot(1, 2, 1)\nfor i, sector in enumerate(sectors):\n    ax1.bar(years, investment[i], label=sector)\nax1.set_xlabel('Year')\nax1.set_ylabel('Investment (Billion USD)')\nax1.set_title('Investment by Year and Sector')\nax1.legend()\n\n# Plot the second subplot\nax2 = fig.add_subplot(1, 2, 2)\ntime_since_intro = np.arange(10)\ntech_level = np.arange(10)\ndata = np.random.rand(10, 10)\ncax = ax2.pcolormesh(time_since_intro, tech_level, data, shading='auto')\nfig.colorbar(cax, ax=ax2)\nax2.set_xlabel('Time Since Introduction (Years)')\nax2.set_ylabel('Technology Level')\nax2.set_title('Adoption Rate')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.linspace(-1, 1, 100)\ny = np.linspace(-1, 1, 100)\nX, Y = np.meshgrid(x, y)\nZ = X**2 + Y**2\n\n# Create a new figure\nfig = plt.figure(figsize=(10.0, 7.0))\n\n# Plot the first subplot\nax1 = fig.add_subplot(1, 2, 1, projection='3d')\nsurf1 = ax1.plot_surface(X, Y, Z, cmap='viridis')\nfig.colorbar(surf1, shrink=0.5, aspect=5)\n\n# Plot the second subplot\nax2 = fig.add_subplot(1, 2, 2, projection='3d')\nsurf2 = ax2.plot_surface(X, Y, Z, cmap='viridis')\nfig.colorbar(surf2, shrink=0.5, aspect=5)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom mpl_toolkits.mplot3d import Axes3D\n\n# Sample data\nx = np.linspace(1, 6, 10)\ny = np.linspace(1, 6, 10)\nz = np.linspace(1, 6, 10)\nX, Y, Z = np.meshgrid(x, y, z)\ndata = np.random.rand(10, 10, 10)\n\n# Create a new figure\nfig = plt.figure(figsize=(10.0, 6.0))\nax = fig.add_subplot(111, projection='3d')\n\n# Plot the data\nax.voxels(X, Y, Z, data, edgecolor='k')\n\n# Set labels\nax.set_xlabel('K')\nax.set_ylabel('tau')\nax.set_zlabel('T')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom mpl_toolkits.mplot3d import Axes3D\n\n# Sample data\nx = np.linspace(-100, 100, 100)\ny = np.linspace(-100, 100, 100)\nx, y = np.meshgrid(x, y)\nz = np.sin(np.sqrt(x**2 + y**2))\n\n# Create a new figure\nfig = plt.figure(figsize=(15.0, 10.0))\nax = fig.add_subplot(141, projection='3d')\nax.plot_surface(x, y, z, cmap='viridis')\n\nax.set_xlabel('m')\nax.set_ylabel('n')\nax.set_zlabel('Freedom')\n\nax = fig.add_subplot(142, projection='3d')\nax.plot_surface(x, y, z, cmap='viridis')\n\nax.set_xlabel('m')\nax.set_ylabel('n')\nax.set_zlabel('Freedom')\n\nax = fig.add_subplot(143, projection='3d')\nax.plot_surface(x, y, z, cmap='viridis')\n\nax.set_xlabel('m')\nax.set_ylabel('n')\nax.set_zlabel('Freedom')\n\nax = fig.add_subplot(144, projection='3d')\nax.plot_surface(x, y, z, cmap='viridis')\n\nax.set_xlabel('m')\nax.set_ylabel('n')\nax.set_zlabel('Freedom')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.random.rand(10)\ny = np.random.rand(10)\nz = np.random.rand(10)\n\n# Create a new figure\nfig = plt.figure(figsize=(7.0, 7.0))\nax = fig.add_subplot(111, projection='3d')\n\n# Plot the data\nax.scatter(x, y, z, c='r', marker='o')\n\n# Set labels\nax.set_xlabel('X Label')\nax.set_ylabel('Y Label')\nax.set_zlabel('Z Label')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom mpl_toolkits.mplot3d import Axes3D\n\n# Sample data\nx = np.linspace(-4, 4, 100)\ny = np.linspace(-2, 2, 100)\nx, y = np.meshgrid(x, y)\nz = np.sin(np.sqrt(x**2 + y**2))\n\n# Create a new figure\nfig = plt.figure(figsize=(8.0, 8.0))\nax = fig.add_subplot(111, projection='3d')\n\n# Plot the surface\nsurf = ax.plot_surface(x, y, z, cmap='viridis')\n\n# Add a color bar which maps values to colors\nfig.colorbar(surf, shrink=0.5, aspect=5)\n\n# Set labels\nax.set_xlabel('Time')\nax.set_ylabel('Bus')\nax.set_zlabel('Value')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt  \nimport numpy as np  \n\n# Sample data\ndata = np.random.rand(10, 5)\n\n# Create a new figure\nfig = plt.figure(figsize=(8.0, 8.0))\n\n# Plot the data\nplt.imshow(data, cmap='viridis')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.random.rand(10)\ny = np.random.rand(10)\nz = np.random.rand(10)\n\n# Create a new figure\nfig = plt.figure(figsize=(8.0, 6.0))\nax = fig.add_subplot(111, projection='3d')\n\n# Plot the data\nax.scatter(x, y, z, c='r', marker='o')\n\n# Set labels\nax.set_xlabel('Age')\nax.set_ylabel('Income')\nax.set_zlabel('Debt')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.linspace(10, 40, 10)\ny = np.linspace(10, 40, 10)\nz = np.linspace(-20, -5, 10)\n\n# Create a new figure\nfig = plt.figure(figsize=(8.0, 6.0))\nax = fig.add_subplot(111, projection='3d')\n\n# Plot the data\nax.plot(x, y, z, 'r-')\nax.plot(x, y, z + 10, 'b-')\nax.plot(x, y + 10, z, 'g-')\n\n# Set labels\nax.set_xlabel('Temperature (C)')\nax.set_ylabel('Time (s)')\nax.set_zlabel('Depth (m)')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.random.normal(0, 1, 1000)\ny = np.random.normal(0, 1, 1000)\n\n# Create a new figure\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Plot histograms\nax.hist2d(x, y, bins=50, cmap='viridis')\n\n# Set labels\nax.set_xlabel('X')\nax.set_ylabel('Y')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt  \nimport numpy as np  \n\n# Sample data\nx = np.array([150, 200, 300, 350, 400])\ny_low = np.array([-2.5, -3.5, -4.5, -5.5, -6.5])\ny_middle = np.array([-2.0, -3.0, -4.0, -5.0, -6.0])\ny_high = np.array([-1.5, -2.5, -3.5, -4.5, -5.5])\n\n# Create a new figure\nfig = plt.figure(figsize=(7.0, 5.0))\n\n# Plot the data\nplt.scatter(x, y_low, color='blue', label='Low')\nplt.scatter(x, y_middle, color='orange', label='Middle')\nplt.scatter(x, y_high, color='green', label='High')\n\n# Add a legend\nplt.legend()\n\n# Set labels\nplt.xlabel('Average Tracked ORB Feature Number')\nplt.ylabel('Log (ATE RMSE)')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt  \nimport numpy as np  \n\n# Sample data\nx = np.array([8, 4, 2, 1])\ny = np.array([-3.0, -2.0, -1.0, 0.0])\n\n# Create a new figure\nfig = plt.figure(figsize=(7.0, 5.0))\n\n# Plot the data\nplt.plot(x, y, 'o')\n\n# Set labels\nplt.xlabel('Log (Depth L1)')\nplt.ylabel('Log (ATE RMSE)')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt  \nimport numpy as np  \n\n# Sample data\ndata = np.random.rand(10, 5)\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(8.0, 6.0))\n\n# Plot the data\nplt.plot(data)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ndata = {\n    'snarks': [0.75, 0.76, 0.77, 0.78, 0.79],\n    'navigate': [0.72, 0.73, 0.74, 0.75, 0.76],\n    'question_selection': [0.65, 0.66, 0.67, 0.68, 0.69],\n    'object_counting': [0.60, 0.61, 0.62, 0.63, 0.64]\n}\n\n# Create a new figure\nfig, ax = plt.subplots(figsize=(10.0, 4.0))\n\n# Plot the data\nfor key, values in data.items():\n    ax.plot(values, label=key)\n\n# Set labels and title\nax.set_xlabel('Tasks')\nax.set_ylabel('Scores')\nax.set_title('Comparison of APO & APO-APEs (GPT-3 5-Turbo)')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt  \nimport numpy as np  \n\n# Sample data\nx = np.arange(0.0, 1.5, 0.2)\ny1 = np.random.rand(len(x)) * 100\ny2 = np.random.rand(len(x)) * 100\n\n# Create a new figure\nfig = plt.figure(figsize=(10.0, 6.0))\n\n# Plot the data\nplt.plot(x, y1, label='H-w ard - centers-cos')\nplt.plot(x, y2, label='random')\n\n# Set labels and title\nplt.xlabel('norm size')\nplt.ylabel('count')\nplt.title('summary_xsum:temperature=0.3,device=cuda')\n\n# Add a legend\nplt.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\nlabels = ['Different', 'Same', 'Incomparable']\nsizes = [32, 23.7, 73.3]\ncolors = ['yellowgreen', 'lightcoral', 'lightskyblue']\nexplode = (0.1, 0, 0)  # explode 1st slice\n\n# Create a pie chart\nplt.figure(figsize=(8.0, 4.0))\nplt.pie(sizes, explode=explode, labels=labels, colors=colors,\nautopct='%1.1f%%', shadow=True, startangle=140)\n\n# Equal aspect ratio ensures that pie is drawn as a circle.\nplt.axis('equal')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_16.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ndata = {\n    'SEAC': [48.5, 49.2, 47.8, 48.1],\n    'SAC(20Hz)': [49.3, 48.9, 47.6, 48.4]\n}\n\n# Create a new figure\nfig, ax = plt.subplots(figsize=(7.0, 5.0))\n\n# Plot the data\nax.boxplot(data.values(), labels=data.keys())\n\n# Set title and labels\nax.set_title('Time Cost (Seconds)')\nax.set_xlabel('Algorithms')\nax.set_ylabel('Time Cost')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_17.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Sample data\ndata = {\n    'CodeBERT': [63.64, 80.08, 84.27, 90.11],\n    'ChatGPT-3.5': [80.08, 80.08, 84.27, 90.11],\n    'ChatGPT-4.0': [84.27, 80.08, 84.27, 90.11],\n    'CodeAgent': [90.11, 90.11, 90.11, 90.11]\n}\n\n# Create a new figure\nfig, ax = plt.subplots(figsize=(10.0, 4.0))\n\n# Plot the data\nfor key, values in data.items():\n    ax.plot(values, label=key)\n\n# Set labels and title\nax.set_xlabel('Method')\nax.set_ylabel('Scores')\nax.set_title('Average Recall Scores by Method')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_18.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.array([4, 8, 12, 16, 20, 24, 28, 32])\ny1 = np.array([84, 86, 88, 90, 92, 94, 96, 98])\ny2 = np.array([84, 86, 88, 90, 92, 94, 96, 98])\n\n# Create a new figure\nfig = plt.figure(figsize=(6.0, 4.0))\n\n# Plot the data\nplt.plot(x, y1, label='Trained w Few-Shot Ex')\nplt.plot(x, y2, label='Def Deduce+Ex Gen')\n\n# Set labels and title\nplt.xlabel('Few-Shot K')\nplt.ylabel('Micro F1')\nplt.title('Performance Comparison')\n\n# Add a legend\nplt.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_19.pdf", "response": "```python\nimport matplotlib.pyplot as plt  \nimport numpy as np  \n\n# Sample data\nx = np.array([60, 62, 65, 70, 75])\ny = np.array([60, 62, 65, 70, 75])\n\n# Create a new figure\nfig = plt.figure(figsize=(7.0, 7.0))\n\n# Plot the data\nplt.plot(x, y, 'ro-')\n\n# Set labels and title\nplt.xlabel('Vehicle Parameter Size (units)')\nplt.ylabel('Efficiency (%)')\nplt.title('Car Efficiency vs Vehicle Parameter Size')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Sample data\nmodels = ['GPT-2', 'Llama 2 7B', 'Llama 2 70B', 'Mixtral 8x7B', 'GPT-3.5', 'GPT-4']\nsimple_trend = [0, 6, 16, 20, 12, 10]\nsimple = [0, 6, 12, 20, 12, 10]\ncomplex_ = [0, 4, 8, 18, 26, 20]\ncode = [0, 4, 8, 18, 26, 20]\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(8.0, 5.0))\n\n# Plot the data\nplt.plot(models, simple_trend, label='Simple Trend', color='magenta')\nplt.plot(models, simple, label='Simple', color='red')\nplt.plot(models, complex_, label='Complex', color='orange')\nplt.plot(models, code, label='Code', color='pink')\n\n# Set labels and title\nplt.xlabel('Model')\nplt.ylabel('Success Rate (%)')\nplt.title('Encoding/Decoding Schelling Points by Model')\n\n# Add a legend\nplt.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_20.pdf", "response": "```python\nimport matplotlib.pyplot as plt  \nimport numpy as np  \n\n# Sample data\nx = np.random.rand(100)\ny = np.random.rand(100)\n\n# Create a new figure\nfig = plt.figure(figsize=(6.0, 6.0))\n\n# Plot the data\nplt.scatter(x, y)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_21.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.array([-5, -3, -1, 1, 3, 5])\ny = np.array([0.1, 0.2, 0.3, 0.4, 0.5, 0.6])\n\n# Create a new figure\nfig = plt.figure(figsize=(8.0, 4.0))\n\n# Plot the data\nplt.plot(x, y, 'o')\n\n# Set labels\nplt.xlabel('X-axis')\nplt.ylabel('Y-axis')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_22.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ndata = {\n    'Total': [0.0025, 0.0075, 0.0125],\n    'Proposer': [0.15, 0.16, 0.17],\n    'Attestor': [0.15, 0.16, 0.17],\n    'Sync committee member': [0.06, 0.07, 0.08]\n}\n\n# Create a new figure with specified size\nfig, axes = plt.subplots(2, 2, figsize=(10.0, 8.0))\n\n# Plot Total\naxes[0, 0].bar(range(len(data['Total'])), data['Total'], color='blue')\naxes[0, 0].set_title('Total')\naxes[0, 0].set_xlabel('Daily reward (Ether)')\naxes[0, 0].set_ylabel('Probability')\n\n# Plot Proposer\naxes[0, 1].bar(range(len(data['Proposer'])), data['Proposer'], color='red')\naxes[0, 1].set_title('Proposer')\naxes[0, 1].set_xlabel('Daily reward (Ether)')\naxes[0, 1].set_ylabel('Probability')\n\n# Plot Attestor\naxes[1, 0].bar(range(len(data['Attestor'])), data['Attestor'], color='green')\naxes[1, 0].set_title('Attestor')\naxes[1, 0].set_xlabel('Daily reward (Ether)')\naxes[1, 0].set_ylabel('Probability')\n\n# Plot Sync committee member\naxes[1, 1].bar(range(len(data['Sync committee member'])), data['Sync committee member'], color='yellow')\naxes[1, 1].set_title('Sync committee member')\naxes[1, 1].set_xlabel('Daily reward (Ether)')\naxes[1, 1].set_ylabel('Probability')\n\n# Adjust layout and show plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_23.pdf", "response": "```python\nimport matplotlib.pyplot as plt  \nimport numpy as np  \n\n# Sample data\nx = np.array([0, 50, 100, 150])\ny1 = np.array([1.30, 1.27, 1.28, 1.29])\ny2 = np.array([1.30, 1.27, 1.28, 1.29])\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(6.0, 8.0))\n\n# Plot the data\nplt.plot(x, y1, 'r', label='Llama 2 7B')\nplt.plot(x, y2, 'b*', label='Llama 2 13B')\n\n# Set labels and title\nplt.xlabel('Trainable Parameter Size (M)')\nplt.ylabel('RMSE')\nplt.title('RMSE vs Trainable Parameter Size')\n\n# Add a legend\nplt.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_24.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ndata = {\n    'D0': [0.01, 0.02, 0.03, 0.04, 0.05],\n    'D1': [0.06, 0.07, 0.08, 0.09, 0.10],\n    'D2': [0.11, 0.12, 0.13, 0.14, 0.15]\n}\n\n# Create a new figure\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data\nax.plot(data['D0'], label='D0')\nax.plot(data['D1'], label='D1')\nax.plot(data['D2'], label='D2')\n\n# Set labels and title\nax.set_xlabel('Execution Duration (clock)')\nax.set_ylabel('Distribution')\nax.set_title('Sample Plot')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_25.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ndata = {\n    '15x15': [18, 14, 13, 12, 12, 9, 0],\n    '20x15': [18, 14, 13, 12, 12, 9, 0],\n    '20x20': [18, 14, 13, 12, 12, 9, 0],\n    '30x20': [18, 14, 13, 12, 12, 9, 0],\n    '40x20': [18, 14, 13, 12, 12, 9, 0],\n    '50x20': [18, 14, 13, 12, 12, 9, 0],\n    '60x20': [18, 14, 13, 12, 12, 9, 0]\n}\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(8.0, 5.0))\n\n# Plot the data\nfor key, values in data.items():\n    plt.plot(values, label=key)\n\n# Set labels and title\nplt.xlabel('Instance Size')\nplt.ylabel('Makespan (step)')\nplt.title('Makespan vs Instance Size')\n\n# Add a legend\nplt.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_26.pdf", "response": "```python\nimport matplotlib.pyplot as plt  \nimport numpy as np  \n\n# Sample data\ndata = {\n    'SEAC': np.random.rand(100),\n    'CTCO': np.random.rand(100)\n}\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(7.0, 5.0))\n\n# Plot the data\nplt.scatter(data['SEAC'], data['SEAC'], color='green')\nplt.scatter(data['CTCO'], data['CTCO'], color='orange')\n\n# Set labels\nplt.xlabel('Algorithms')\nplt.ylabel('Time Cost (Seconds)')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_27.pdf", "response": "```python\nimport matplotlib.pyplot as plt  \nimport numpy as np  \n\n# Sample data\nx = np.array([1, 2, 3, 4, 5])\ny = np.array([10, 20, 25, 30, 45])\n\n# Create a new figure\nfig = plt.figure(figsize=(10.0, 6.0))\n\n# Plot the data\nplt.plot(x, y)\n\n# Set labels\nplt.xlabel('Time to Market (Days)')\nplt.ylabel('Median Time to Market')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_28.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nera = ['Early 20th Century', 'Mid 20th Century', 'Turn of the Century']\ndensity = [0.001, 0.002, 0.003]\nearly_20th = [1900, 1910, 1920]\nmid_20th = [1930, 1940, 1950]\nturn_of_century = [1960, 1970, 1980]\n\n# Create a new figure\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Plot the data\nax.plot(density, early_20th, label='Early 20th Century', color='blue')\nax.plot(density, mid_20th, label='Mid 20th Century', color='orange')\nax.plot(density, turn_of_century, label='Turn of the Century', color='green')\n\n# Set labels and title\nax.set_xlabel('Density')\nax.set_ylabel('Year')\nax.set_title('Era')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_29.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Sample data\ndata = {\n    'nanotechnology': [20, 10, 40],\n    'quantum computing': [10, 30, 40],\n    'cybersecurity': [30, 60, 70],\n    'vr': [90, 100, 120],\n    'biotech': [100, 180, 250],\n    'iot': [150, 200, 300],\n    'cloud computing': [200, 250, 300],\n    'blockchain': [300, 400, 500]\n}\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Plot the data\nfor technology, patents in data.items():\n    ax.plot(patents, label=technology)\n\n# Set labels and title\nax.set_xlabel('Number of Patents')\nax.set_ylabel('Number of Patents in 2013')\nax.set_title('Patent Filings in 2013')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.linspace(0, 1, 100)\ny = np.sin(x)\n\n# Create a new figure\nfig = plt.figure(figsize=(6.0, 6.0))\n\n# Plot the data\nplt.plot(x, y, label='Data points')\nplt.plot(x, y, 'o', label='Bin edges')\nplt.plot(x, y, label='Calibration curve')\n\n# Set labels and title\nplt.xlabel('Predicted probability')\nplt.ylabel('Fraction of positives')\nplt.title('Calibration plot')\n\n# Add a legend\nplt.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_30.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Sample data\ndata = {\n    'Q1': [250, 200, 300, 400],\n    'Q2': [220, 210, 290, 390],\n    'Q3': [210, 200, 280, 380],\n    'Q4': [200, 190, 270, 370]\n}\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(8.0, 6.0))\n\n# Plot the data\nfor company, values in data.items():\n    plt.plot(values, label=company)\n\n# Set labels and title\nplt.xlabel('Quarter')\nplt.ylabel('Earnings ($1000s)')\nplt.title('Company Earnings Over Quarters')\n\n# Add a legend\nplt.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ndata = {\n    'Linear probing': [0.26, 0.74, 0.83, 0.89, 0.91],\n    'BitFit': [0.26, 0.74, 0.83, 0.89, 0.91],\n    'Prompt Tuning': [0.26, 0.74, 0.83, 0.89, 0.91],\n    'Full finetuning': [0.26, 0.74, 0.83, 0.89, 0.91],\n    'LoRA': [0.26, 0.74, 0.83, 0.89, 0.91],\n    'Ours (LoSA)': [0.26, 0.74, 0.83, 0.89, 0.91]\n}\n\n# Create a new figure\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Plot the data\nfor method, values in data.items():\n    ax.plot(values, label=method)\n\n# Set labels and title\nax.set_xlabel('Methods')\nax.set_ylabel('Normalized Requirements (lower is better)')\nax.set_title('Comparison of Methods')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt  \nimport numpy as np  \n\n# Sample data\ndata = np.random.rand(100, 2)\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(6.0, 6.0))\n\n# Plot the data\nplt.scatter(data[:, 0], data[:, 1])\n\n# Set labels\nplt.xlabel('TM-score')\nplt.ylabel('Seq-ident')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ndata = np.random.rand(50, 4)\nlabels = ['teenagers', 'children', 'adults']\ncolors = ['red', 'green', 'blue']\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(10.0, 8.0))\n\n# Plot the data\nfor i in range(len(labels)):\n    plt.scatter(data[:, 0], data[:, i + 1], color=colors[i], label=labels[i])\n\n# Set labels and title\nplt.xlabel('Relative Cluster Size')\nplt.ylabel('Average Norm of Difference Vectors')\nplt.title('Species')\nplt.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt  \nimport numpy as np  \n\n# Sample data\nx = np.array([0, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 104, 112, 120, 128])\ny = np.array([99.6, 99.9, 96.0, 92.3, 96.0, 90.9, 92.5, 91.3, 90.9, 99.5, 96.0, 93.3, 92.5, 91.3, 90.9, 99.5, 98.7])\n\n# Create a new figure\nfig = plt.figure(figsize=(8.0, 6.0))\n\n# Plot the data\nplt.plot(x, y, 'bo-', label='Data')\n\n# Set labels\nplt.xlabel('HC_first (before aging)')\nplt.ylabel('HC_first (after aging)')\n\n# Set title\nplt.title('Plot of HC_first (after aging) vs HC_first (before aging)')\n\n# Add a legend\nplt.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt  \nimport numpy as np  \n\n# Sample data\ndata = np.random.rand(10, 10)\ntm_scores = np.linspace(0.2, 1.0, 10)\nsequence_ids = np.arange(1, 11)\n\n# Create a new figure\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Plot the heatmap\nim = ax.imshow(data, cmap='viridis')\n\n# Add colorbar\ncbar = ax.figure.colorbar(im, ax=ax)\ncbar.ax.set_ylabel('Intensity', rotation=-90, va=\"bottom\")\n\n# Set labels\nax.set_xlabel('TMScore')\nax.set_ylabel('Sequence ID')\nax.set_title('Heatmap of Intensity vs TMScore and Sequence ID')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Sample data\ndata = [\n    [0.9628, 0.9604, 0.9624],\n    [0.9628, 0.9604, 0.9624],\n    [0.9628, 0.9604, 0.9624],\n    [0.9628, 0.9604, 0.9624]\n]\n\n# Create a new figure\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot the data\nax.plot(data)\n\n# Set labels and title\nax.set_xlabel('Modes')\nax.set_ylabel('Values')\nax.set_title('SRCC and PLCC values with their sum for different modes')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ndata = np.array([\n    [[176, 176, 176], [176, 176, 176], [176, 176, 176], [176, 176, 176]],\n    [[176, 176, 176], [176, 176, 176], [176, 176, 176], [176, 176, 176]],\n    [[176, 176, 176], [176, 176, 176], [176, 176, 176], [176, 176, 176]],\n    [[176, 176, 176], [176, 176, 176], [176, 176, 176], [176, 176, 176]],\n    [[176, 176, 176], [176, 176, 176], [176, 176, 176], [176, 176, 176]],\n    [[176, 176, 176], [176, 176, 176], [176, 176, 176], [176, 176, 176]],\n    [[176, 176, 176], [176, 176, 176], [176, 176, 176], [176, 176, 176]],\n    [[176, 176, 176], [176, 176, 176], [176, 176, 176], [176, 176, 176]],\n    [[176, 176, 176], [176, 176, 176], [176, 176, 176], [176, 176, 176]],\n    [[176, 176, 176], [176, 176, 176], [176, 176, 176], [176, 176, 176]],\n    [[176, 176, 176], [176, 176, 176], [176, 176, 176], [176, 176, 176]],\n    [[176, 176, 176], [176, 176, 176], [176, 176, 176], [176, 176, 176]],\n    [[176, 176, 176], [176, 176, 176], [176, 176, 176], [176, 176, 176]],\n    [[176, 176, 176], [176, 176, 176], [176, 176, 176], [176, 176, 176]],\n    [[176, 176, 176], [176, 176, 176], [176, 176, 176], [176, 176, 176]],\n    [[176, 176, 176], [176, 176, 176], [176, 176, 176], [176, 176, 176]],\n    [[176, 176, 176], [176, 176, 176], [176, 176, 176], [176, 176, 176]],\n    [[176, 176, 176], [176, 176, 176], [176, 176, 176], [176, 176, 176]],\n    [[176, 176, 176], [176, 176, 176], [176, 176, 176], [176, 176, 176]],\n    [[176, 176, 176], [176, 176, 176], [176, 176, 176], [176, 176, 176]],\n    [[176, 176, 176], [176, 176, 176], [176, 176, 176], [176, 176, 176]],\n    [[176, 176, 176], [176, 176, 176], [176, 176, 176], [176, 176, 176]],\n    [[176, 176, 176], [176, 176, 176], [176, 176, 176], [176, 176, 176]],\n    [[176, 176, 176], [176, 176, 176], [176, 176, 176], [176, 176, 176]],\n    [[176, 176, 176], [176, 176, 176], [176, 176, 176], [176, 176, 176]],\n    [[176, 176, 176], [176, 176, 176], [176, 176, 176], [176, 176, 176]],\n    [[176, 176, 176], [176, 176, 176], [176, 176, 176], [176, 176, 176]],\n    [[176, 176, 176], [176, 176, 176], [176, 176, 176], [176, 176, 176]],\n    [[176, 176, 176], [176, 176, 176], [176, 176, 176], [176, 176, 176]],\n    [[176, 176, 176], [176, 176, 176], [176, 176, 176], [176, 176, 176]],\n    [[176, 176, 176], [176, 176, 176], [176, 176, 176], [176, 176, 176]],\n    [[176, 176, 176], [176, 176, 176], [176, 176, 176], [176, 176, 176]],\n    [[176, 176, 176], [176, 176, 176], [176, 176, 176], [176, 176, 176]],\n    [[176, 176, 176], [176, 176, 176], [176, 176, 176], [176, 176, 176]],\n    [[176, 176, 176], [176, 176, 176], [176, 176, 176], [176, 176, 176]],\n    [[176, 176, 176], [176, 176, 176], [176, 176, 176], [176, 176, 176]],\n    [[176, 176, 176], [176, 176, 176], [176, 176, 176], [176, 176, 176]],\n    [[176, 176, 176], [176, 176, 176], [176, 176, 176], [176, 176, 176]],\n    [[176, 176, 176], [176, 176, 176], [176, 176, 176], [176, 176, 176]],\n    [[176, 176, 176], [176, 176, 176], [176, 176, 176], [176, 176, 176]],\n    [[176, 176, 176], [176, 176, 176], [176, 176, 176], [176, 176, 176]],\n    [[176, 176, 176], [176, 176, 176], [176, 176, 176], [176, 176, 176]],\n    [[176, 176, 176], [176, 176, 176], [176, 176, 176], [176, 176, 176]],\n    [[176, 176, 176], [176, 176, 176], [176, 176, 176], [176, 176, 176]],\n    [[176, 176, 176], [176, 176, 176], [176, 176, 176], [176, 176, 176]],\n    [[176, 176, 176], [176, 176, 176], [176, 176, 176], [176, 176, 176]],\n    [[176, 176, 176], [176, 176, 176], [176, 176, 176], [176, 176, 176]],\n    [[176, 176, 176], [176, 176, 176], [176, 176, 176], [176, 176, 176]],\n    [[176, 176, 176], [176, 176, 176], [176, 176, 176], [176, 176, 176]],\n    [[176, 176, 176], [176, 176, 176], [176, 176, 176], [176, 176, 176]],\n    [[176, 176, 176], [176, 176, 176], [176, 176, 176], [176, 176, 176]],\n    [[176, 176, 176], [176, 176, 176], [176, 176, 176], [176, 176, 176]],\n    [[176, 176, 176], [176, 176, 176], [176, 176, 176], [176, 176, 176]],\n    [[176, 176, 176], [176, 176, 176], [176, 176, 176], [176, 176, 176]],\n    [[176, 176, 176], [176, 176, 176], [176, 176, 176], [176, 176, 176]],\n    [[176, 176, 176], [176, 176, 176], [176, 176, 176], [176, 176, 176]],\n    [[176, 176, 176], [176, 176, 176], [176, 176, 176], [176, 176, 176]],\n    [[176, 176, 176], [176, 176, 176], [176, 176, 176], [176, 176, 176]],\n    [[176, 176, 176], [176, 176, 176], [176, 176, 176], [176, 176, 176]],\n    [[176, 176, 176], [176, 176, 176], [176, 176, 176], [176, 176, 176]],\n    [[176, 176, 176], [176, 176, 176], [176, 176, 176], [176, 176, 176]],\n    [[176, 176, 176], [176, 176, 176], [176, 176, 176], [176, 176, 176]],\n    [[176, 176, 176], [176, 176, 176], [176, 176, 176], [176, 176, 176]],\n    [[176, 176, 176], [176, 176, 176], [176, 176, 176], [176, 176, 176]],\n    [[176, 176, 176], [176, 176, 176], [176, 176, 176], [176, 176, 176]],\n    [[176, 176, 176], [176, 176, 176], [176, 176, 176], [176, 176, 176]],\n    [[176, 176, 176], [176, 176, 176], [176, 176, 176], ["}
{"file": "dataset/ori_500/HR_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt  \nimport numpy as np  \n\n# Sample data\nx = np.linspace(-10, 10, 100)\ny = np.sin(x)\n\n# Create a new figure\nfig = plt.figure(figsize=(8.0, 8.0))\n\n# Plot the data\nplt.plot(x, y, label='SINDy')\n\n# Set labels and title\nplt.xlabel('X-axis')\nplt.ylabel('Y-axis')\nplt.title('Compact Spiral with Elliptical Hollow Center')\n\n# Add a legend\nplt.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt  \nimport numpy as np  \n\n# Sample data\nx = np.array([1e-1, 1e0, 1e1])\ny = np.array([1e10, 1e11, 1e12])\n\n# Create a new figure\nfig = plt.figure(figsize=(8.0, 7.0))\n\n# Plot the data\nplt.plot(x, y, 'o-')\n\n# Set labels\nplt.xlabel('Flops/byte')\nplt.ylabel('Flows/s')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ndata = {\n    'Satisfy constraints': [0.18],\n    'No severe errors': [0.11],\n    'Lengthy': [0.06],\n    'Contain rich info': [0.06],\n    'No moderate errors': [0.04],\n    'Grammatically correct': [0.02],\n    'No minor errors': [0.02],\n    'Clear': [0.02],\n    'Non-repetitive': [0.02],\n    'Support stances': [0.01],\n    '19 other features': [0]\n}\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(8.0, 6.0))\n\n# Plot the data\nplt.barh(list(data.keys()), list(data.values()), color='blue')\n\n# Set labels and title\nplt.xlabel('f(x)')\nplt.title('Feature Importance')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ndata = np.array([[24, 8], [45, 8]])\n\n# Create a new figure\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data\nim = ax.imshow(data, cmap='viridis')\n\n# Add colorbar\ncbar = ax.figure.colorbar(im, ax=ax)\ncbar.ax.set_ylabel('Values', rotation=-90, va=\"bottom\")\n\n# Set labels\nax.set_xlabel('X-axis')\nax.set_ylabel('Y-axis')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ndata = np.array([[10, 20, 30, 40, 50],\n                 [15, 25, 35, 45, 55],\n                 [20, 30, 40, 50, 60],\n                 [25, 35, 45, 55, 65],\n                 [30, 40, 50, 60, 70]])\n\n# Create a new figure\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Plot the data\nax.imshow(data, cmap='viridis')\n\n# Set labels\nax.set_xlabel('GPT4V')\nax.set_ylabel('Qwen-VL-Max')\nax.set_title('Qwen-VL-Max')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.logspace(1, 2, 10)\ny1 = np.random.rand(10, 5)\ny2 = np.random.rand(10, 5)\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(10.0, 4.0))\n\n# Plot the first subplot\nplt.subplot(1, 2, 1)\nplt.plot(x, y1, 'o')\nplt.xlabel('Number of matvecs m')\nplt.ylabel('Approximation error ||A - \\u03B1\\u03BB\\u208F||\\u221E')\n\n# Plot the second subplot\nplt.subplot(1, 2, 2)\nplt.plot(x, y2, 'o')\nplt.xlabel('Number of matvecs m')\nplt.ylabel('Sparse recovery error ||S\\u208A - \\u03B1\\u03BB\\u208F||\\u221E')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_16.pdf", "response": "```python\nimport matplotlib.pyplot as plt  \nimport numpy as np  \n\n# Sample data\nlabels = ['Retrive.KV', 'En.Sum', 'Retrive.Number', 'En.QA', 'Retrive.PassKey']\nsizes = [15, 30, 45, 10, 5]\ncolors = ['green', 'blue', 'yellow', 'purple', 'orange']\nexplode = (0.1, 0, 0, 0, 0)  # explode 1st slice\n\n# Create a pie chart\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\nax.pie(sizes, explode=explode, labels=labels, colors=colors,\nautopct='%1.1f%%', shadow=True, startangle=140)\n\n# Equal aspect ratio ensures that pie is drawn as a circle.\nax.axis('equal')  \n\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_17.pdf", "response": "```python\nimport matplotlib.pyplot as plt  \nimport numpy as np  \n\n# Sample data\nx = np.linspace(0, 140, 100)\ny1 = np.sin(x)\ny2 = np.cos(x)\ny3 = np.tan(x)\n\n# Create a new figure\nfig = plt.figure(figsize=(6.0, 5.0))\n\n# Plot the data\nplt.plot(x, y1, label='sin(x)')\nplt.plot(x, y2, label='cos(x)')\nplt.plot(x, y3, label='tan(x)')\n\n# Set labels and title\nplt.xlabel('X-axis')\nplt.ylabel('Y-axis')\nplt.title('Sample Plot')\n\n# Add a legend\nplt.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_18.pdf", "response": "```python\nimport matplotlib.pyplot as plt  \nimport numpy as np  \n\n# Sample data\ndata = np.array([[3.2, 3.4, 3.6, 3.8, 4.0],\n                 [2.2, 2.4, 2.6, 2.8, 3.0],\n                 [1.2, 1.4, 1.6, 1.8, 2.0]])\n\n# Create a new figure\nfig = plt.figure(figsize=(7.0, 5.0))\n\n# Plot the data\nplt.imshow(data, cmap='Blues', interpolation='nearest')\n\n# Set labels\nplt.xlabel('Sample Number')\nplt.ylabel('Thermal Conductivity')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_19.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Sample data\ndata = {\n    'Player A': [28, 20, 26, 20, 10],\n    'Player B': [35, 30, 26, 20, 30]\n}\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(7.0, 5.0))\n\n# Plot the data\nplt.plot(data['Player A'], label='Player A', marker='o')\nplt.plot(data['Player B'], label='Player B', marker='o')\n\n# Set labels and title\nplt.xlabel('Games')\nplt.ylabel('Scores by number of game and players')\nplt.title('Scores by number of game and players')\n\n# Add a legend\nplt.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.linspace(-6, 6, 100)\ny = np.linspace(-6, 6, 100)\nX, Y = np.meshgrid(x, y)\nZ = np.sin(np.sqrt(X**2 + Y**2))\n\n# Create a new figure\nfig = plt.figure(figsize=(6.0, 6.0))\nax = fig.add_subplot(111)\n\n# Plot the data\nc = ax.contourf(X, Y, Z, cmap='viridis')\n\n# Add a colorbar\nfig.colorbar(c)\n\n# Set labels\nax.set_xlabel('Variable 1')\nax.set_ylabel('Variable 2')\nax.set_title('Contour plot of Z')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_20.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ndata = {\n    'gpt-3.5-turbo-0613': [5.7, 6.0, 5.2, 5.1],\n    'gpt-3.5-turbo-instruct': [6.6, 6.0, 6.2, 5.2],\n    'gpt-4': [7.8, 7.5, 7.5, 7.5],\n    'llama-2-13b': [7.6, 7.4, 7.2, 6.9],\n    'llama-2-70b': [7.6, 7.4, 7.2, 6.9]\n}\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Plot the data\nfor key, values in data.items():\n    ax.plot(values, label=key)\n\n# Set labels and title\nax.set_xlabel('Trustee Scenario')\nax.set_ylabel('Average Amount Sent ($)')\nax.set_title('Trust Game Results')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_21.pdf", "response": "```python\nimport matplotlib.pyplot as plt  \nimport numpy as np  \n\n# Sample data\ndata = {\n    'Athlete Jim': [120, 130, 140, 150],\n    'Athlete Bill': [125, 135, 145, 155]\n}\ncategories = ['Running', 'Interrupted', 'Rest', 'Running2']\nx = np.arange(len(categories))\nwidth = 0.35\n\nfig, ax = plt.subplots(figsize=(7.0, 5.0))\n\n# Plot bars for each category\nfor i, (name, values) in enumerate(data.items()):\n    ax.bar(x + i * width, values, width, label=name)\n\n# Set labels and title\nax.set_xlabel('Seconds Since Start')\nax.set_ylabel('Duration')\nax.set_title('Endurance Race Performance Analysis')\nax.set_xticks(x + width / 2)\nax.set_xticklabels(categories)\nax.legend()\n\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_22.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ndata = {\n    'Control Group': np.random.randn(100),\n    'Treatment Group 1': np.random.randn(100),\n    'Treatment Group 2': np.random.randn(100)\n}\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(7.0, 5.0))\n\n# Plot the data\nfor i, (group, values) in enumerate(data.items()):\n    ax = fig.add_subplot(1, 3, i + 1)\n    ax.hist(values, bins=20)\n    ax.set_title(group)\n    ax.set_xlabel('Number of Observations')\n    ax.set_ylabel('Value Range')\n\n# Adjust layout and show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_23.pdf", "response": "```python\nimport matplotlib.pyplot as plt  \nimport numpy as np  \n\n# Sample data\ndata = [350, 150, -50, -120, 200, -100, 75, -135, 50, -300]\n\n# Create a new figure\nfig = plt.figure(figsize=(8.0, 5.0))\n\n# Plot the data\nplt.plot(data, marker='o')\n\n# Set labels and title\nplt.xlabel('X-axis')\nplt.ylabel('Y-axis')\nplt.title('Waterfall Chart')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_24.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ndata = np.random.rand(100, 100)\n\n# Create a new figure\nfig = plt.figure(figsize=(8.0, 6.0))\n\n# Plot the data\nplt.imshow(data, cmap='viridis', interpolation='nearest')\n\n# Add a colorbar\nplt.colorbar()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_25.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ndata_nearest = np.random.rand(100, 100)\ndata_bilinear = np.random.rand(100, 100)\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(8.0, 6.0))\n\n# Plot the first subplot\nplt.subplot(2, 2, 1)\nplt.imshow(data_nearest, cmap='viridis')\nplt.title('nearest')\n\n# Plot the second subplot\nplt.subplot(2, 2, 2)\nplt.imshow(data_nearest, cmap='viridis')\nplt.title('nearest')\n\n# Plot the third subplot\nplt.subplot(2, 2, 3)\nplt.imshow(data_bilinear, cmap='viridis')\nplt.title('bilinear')\n\n# Plot the fourth subplot\nplt.subplot(2, 2, 4)\nplt.imshow(data_bilinear, cmap='viridis')\nplt.title('bilinear')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt  \nimport numpy as np  \n\n# Sample data\ndata = np.array([\n    [500, 400, 300, 200, 100],\n    [600, 500, 400, 300, 200],\n    [700, 600, 500, 400, 300],\n    [800, 700, 600, 500, 400],\n    [900, 800, 700, 600, 500]\n])\n\n# Create a new figure\nfig, ax = plt.subplots(figsize=(10.0, 4.0))\n\n# Plot the data\nax.bar(range(len(data[0])), data[0], color='blue')\nax.bar(range(len(data[1])), data[1], color='green')\nax.bar(range(len(data[2])), data[2], color='red')\nax.bar(range(len(data[3])), data[3], color='purple')\nax.bar(range(len(data[4])), data[4], color='orange')\n\n# Set labels and title\nax.set_xlabel('Number of bits')\nax.set_ylabel('Recall sum')\nax.set_title('Recall vs Number of bits')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt  \nimport numpy as np  \n\n# Sample data\nx = np.linspace(0, 25, 100)\ny1 = np.sin(x)\ny2 = np.cos(x)\n\n# Create a new figure\nfig = plt.figure(figsize=(8.0, 6.0))\n\n# Plot the data\nplt.plot(x, y1, label='Monte Carlo')\nplt.plot(x, y2, label='Mean-Taylor')\n\n# Set labels and title\nplt.xlabel('x (m)')\nplt.ylabel('y (m)')\nplt.title('Denser Points with Perfectly Circular Error Ellipses')\n\n# Add a legend\nplt.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt  \nimport numpy as np  \n\n# Sample data\nx = np.linspace(0, 2 * np.pi, 100)\ny = np.sin(x)\n\n# Create a new figure\nfig = plt.figure(figsize=(6.0, 6.0))\n\n# Plot the data\nplt.plot(x, y, marker='o', linestyle='-', color='blue')\n\n# Set labels\nplt.xlabel('X-axis')\nplt.ylabel('Y-axis')\nplt.title('Sine Wave')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ndata = np.random.rand(10, 10)\n\n# Create a new figure\nfig = plt.figure(figsize=(8.0, 7.0))\n\n# Plot the data\nplt.imshow(data, cmap='viridis')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nutility = np.array([[-2.5, -1.5, -1.0, -0.5, 0.0, 0.5, 1.0, 1.5, 2.0],\n                    [-2.5, -1.5, -1.0, -0.5, 0.0, 0.5, 1.0, 1.5, 2.0],\n                    [-2.5, -1.5, -1.0, -0.5, 0.0, 0.5, 1.0, 1.5, 2.0],\n                    [-2.5, -1.5, -1.0, -0.5, 0.0, 0.5, 1.0, 1.5, 2.0]])\nusers = np.arange(9)\nitems = np.arange(9)\n\n# Plotting\nfig, ax = plt.subplots(figsize=(8.0, 4.0))\nax.plot(users, utility[0], label='Left')\nax.plot(users, utility[1], label='Center Left')\nax.plot(users, utility[2], label='Center')\nax.plot(users, utility[3], label='Center Right')\nax.plot(users, utility[4], label='Right')\n\nax.set_xlabel('Users (U)')\nax.set_ylabel('Utility (f)')\nax.legend()\n\n# User preference matrix\nmatrix = np.random.rand(9, 9)\n\n# Plot user preference matrix\nplt.subplot(1, 2, 2)\nplt.imshow(matrix, cmap='viridis', interpolation='nearest')\nplt.colorbar()\nplt.xticks(np.arange(len(items)), items)\nplt.yticks(np.arange(len(items)), items)\nplt.title('User preference matrix (M)')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ndata = np.random.rand(3, 4)\n\n# Create a new figure\nfig, axes = plt.subplots(1, 3, figsize=(10.0, 4.0))\n\n# Plot data\nfor ax, d in zip(axes, data):\n    ax.imshow(d, cmap='viridis')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ndata = {\n    'Model': ['Vicuna', 'Alpaca'],\n    'Perplexity Reduction': [np.random.rand(10), np.random.rand(10)]\n}\n\n# Create a new figure\nfig, axes = plt.subplots(1, 2, figsize=(10.0, 4.0))\n\n# Plot the data\nfor ax, model in zip(axes, data['Model']):\n    ax.bar(range(len(data['Perplexity Reduction'][0])), data['Perplexity Reduction'][0], color='blue')\n    ax.set_title(model)\n    ax.set_xlabel('Rule')\n    ax.set_ylabel('Perplexity Reduction')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/PIP_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.random.rand(10)\ny = np.random.rand(10)\n\n# Create a new figure\nfig = plt.figure(figsize=(10.0, 5.0))\n\n# Plot the data\nplt.scatter(x, y)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/PIP_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt  \nimport numpy as np  \n\n# Sample data\nx = np.linspace(0, 100, 100)\ny1 = np.exp(x / 25)\ny2 = np.exp(x / 50)\n\n# Create a new figure\nfig = plt.figure(figsize=(6.0, 6.0))\n\n# Plot the data\nplt.plot(x, y1, label='Line 3 (Random Noise)')\nplt.plot(x, y2, label='Line 4 (Exponential Focus)')\n\n# Set labels and title\nplt.xlabel('Gradient Steps (x 62.5K)')\nplt.ylabel('Exponential Scale')\nplt.title('Exponential Scale vs Gradient Steps')\n\n# Add a legend\nplt.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/PIP_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt  \nimport numpy as np  \n\n# Sample data\nx = np.array([0.35, 0.4, 0.45, 0.5, 0.55, 0.6, 0.65, 0.7, 0.8])\ny_known = np.array([200, 300, 400, 500, 600, 700, 800, 900, 1000])\ny_unknown = np.array([100, 200, 300, 400, 500, 600, 700, 800, 900])\n\n# Create a new figure\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot the data\nax.bar(x, y_known, color='green', label='Known')\nax.bar(x, y_unknown, bottom=y_known, color='blue', label='Unknown')\n\n# Set labels and title\nax.set_xlabel('Maximum Predicted Probability')\nax.set_ylabel('Number of Examples')\nax.set_title('Known vs Unknown')\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/PIP_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ndata = {\n    'INT8': [7.5, 7.4, 7.3, 7.2, 7.1, 7.0, 6.9, 6.8, 6.7, 6.6, 6.5, 6.4, 6.3, 6.2, 6.1, 6.0],\n    'INT4': [8.5, 8.4, 8.3, 8.2, 8.1, 8.0, 7.9, 7.8, 7.7, 7.6, 7.5, 7.4, 7.3, 7.2, 7.1, 7.0],\n    'INT2': [9.5, 9.4, 9.3, 9.2, 9.1, 9.0, 8.9, 8.8, 8.7, 8.6, 8.5, 8.4, 8.3, 8.2, 8.1, 8.0]\n}\n\n# Create a new figure\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot the data\nax.plot(data['INT8'], label='INT8')\nax.plot(data['INT4'], label='INT4')\nax.plot(data['INT2'], label='INT2')\n\n# Set labels and title\nax.set_xlabel('Data Type')\nax.set_ylabel('Bias Score')\nax.set_title('Bias Score by Data Type and Model')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/PIP_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt  \nimport numpy as np  \n\n# Sample data\ndata = {\n    'Known': [1500, 500, 200, 100, 50],\n    'Unknown': [1400, 400, 300, 200, 100]\n}\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(10.0, 6.0))\n\n# Plot the data\nplt.bar(range(len(data['Known'])), data['Known'], color='orange', label='Known')\nplt.bar(range(len(data['Unknown'])), data['Unknown'], color='blue', label='Unknown')\n\n# Set labels and title\nplt.xlabel('Maximum Predicted Probability')\nplt.ylabel('Number of Examples')\nplt.title('Distribution of Known vs Unknown Samples')\nplt.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/PIP_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt  \nimport numpy as np  \n\n# Sample data\nx = np.array([2**6, 2**7, 2**8, 2**9, 2**10, 2**11])\ny1 = np.array([100000, 200000, 300000, 400000, 500000, 600000])\ny2 = np.array([100000, 200000, 300000, 400000, 500000, 600000])\n\n# Create a new figure\nfig = plt.figure(figsize=(6.0, 6.0))\n\n# Plot the data\nplt.plot(x, y1, label='Cos | n0 = 200')\nplt.plot(x, y2, label='Cos | n0 = 400')\n\n# Set labels and title\nplt.xlabel('Width of Layer')\nplt.ylabel('Empirical Lipschitz Constant')\nplt.title('Empirical Lipschitz Constant vs Width of Layer')\n\n# Add a legend\nplt.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/PIP_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt  \nimport numpy as np  \n\n# Sample data\ntime_steps = np.arange(0, 10001, 1000)\nwi = np.random.randint(35000, 70000, size=time_steps.shape)\niq = np.random.randint(35000, 70000, size=time_steps.shape)\nwq = np.random.randint(35000, 70000, size=time_steps.shape)\ngreedy = np.random.randint(35000, 70000, size=time_steps.shape)\n\n# Create a new figure\nfig = plt.figure(figsize=(8.0, 6.0))\n\n# Plot the data\nplt.plot(time_steps, wi, 'r', label='WI')\nplt.plot(time_steps, iq, 'g', label='ISQ')\nplt.plot(time_steps, wq, 'm', label='WIQL')\nplt.plot(time_steps, greedy, 'b', label='Greedy')\n\n# Set labels and title\nplt.xlabel('Time Steps')\nplt.ylabel('Discounted Cumulative Reward')\nplt.title('Discounted Cumulative Reward over Time Steps')\n\n# Add a legend\nplt.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/PIP_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.arange(201)\ny1 = np.random.rand(201)\ny2 = np.random.rand(201)\n\n# Create a new figure\nfig = plt.figure(figsize=(6.0, 4.0))\n\n# Plot the data\nplt.plot(x, y1, label='WI')\nplt.plot(x, y2, label='ISQ')\n\n# Set labels and title\nplt.xlabel('Time Steps')\nplt.ylabel('Discounted Cumulative Reward')\nplt.title('Discounted Cumulative Reward over Time')\nplt.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/PIP_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ndata = np.random.rand(10, 4)\nlabels = ['Daytime Sunny', 'Night Rainy', 'PGST']\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(8.0, 8.0))\n\n# Plot the data\nfor i in range(data.shape[1]):\n    plt.scatter(np.random.rand(data.shape[0]), data[:, i], label=labels[i])\n\n# Set labels and title\nplt.xlabel('X-axis')\nplt.ylabel('Y-axis')\nplt.title('Scatter Plot Example')\n\n# Add a legend\nplt.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/PIP_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt  \nimport numpy as np  \n\n# Sample data\ndata = np.random.rand(10, 2)\n\n# Create a new figure\nfig = plt.figure(figsize=(6.0, 6.0))\n\n# Plot the data\nplt.scatter(data[:, 0], data[:, 1])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/area_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt  \nimport numpy as np  \n\n# Sample data\nx = np.arange(10, 100, 10)\ny1 = np.random.rand(9) * 30\ny2 = np.random.rand(9) * 30\ny3 = np.random.rand(9) * 30\ny4 = np.random.rand(9) * 30\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(9.0, 8.0))\n\n# Plot the data\nplt.plot(x, y1, 'r-', label='ActivityNet mIoU')\nplt.plot(x, y2, 'o-', label='Breakfast MoF')\nplt.plot(x, y3, 'c-', label='ActivityNet CIDER')\nplt.plot(x, y4, 'k-', label='QVHighlights mAP')\n\n# Set labels and title\nplt.xlabel('Time (s)')\nplt.ylabel('Score')\nplt.title('Performance Metrics Over Time')\n\n# Add a legend\nplt.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/area_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ntime_steps = np.arange(4)\nGT = np.array([0.98, 0.96, 0.98, 0.98])\nDRS = np.array([0.98, 0.96, 0.98, 0.98])\nPR_based = np.array([0.98, 0.96, 0.98, 0.98])\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(10.0, 10.0))\n\n# Plot the data\nplt.plot(time_steps, GT, 'g', label='GT')\nplt.plot(time_steps, DRS, 'b', label='DRS')\nplt.plot(time_steps, PR_based, 'r', label='PR-based')\n\n# Set labels and title\nplt.xlabel('Time step')\nplt.ylabel('CR')\nplt.title('Performance Metrics Over Time')\n\n# Add a legend\nplt.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/area_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt  \nimport numpy as np  \n\n# Sample data\nx = np.arange(0, 81, 10)\ny_clip = np.random.rand(8) * 0.2 + 0.55\ny_laion_5k = np.random.rand(8) * 0.2 + 0.55\ny_coco_5k = np.random.rand(8) * 0.2 + 0.55\ny_laion_10k = np.random.rand(8) * 0.2 + 0.55\ny_coco_10k = np.random.rand(8) * 0.2 + 0.55\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(10.0, 6.0))\n\n# Plot the data\nplt.plot(x, y_clip, label='clip')\nplt.plot(x, y_laion_5k, label='laion (5k)')\nplt.plot(x, y_coco_5k, label='coco (5k)')\nplt.plot(x, y_laion_10k, label='laion (10k)')\nplt.plot(x, y_coco_10k, label='coco (10k)')\n\n# Set labels and title\nplt.xlabel('Decomposition IO Norm')\nplt.ylabel('Accuracy')\nplt.title('Dynamic Effect of Vocab on Zero Shot Accuracy')\n\n# Add a legend\nplt.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/area_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nn = np.arange(0, 9)\ncontent = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])\norganization = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])\nlanguage = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])\n\n# Create a new figure\nfig = plt.figure(figsize=(8.0, 4.0))\n\n# Plot the data\nplt.plot(n, content, label='Content')\nplt.plot(n, organization, label='Organization')\nplt.plot(n, language, label='Language')\n\n# Set labels and title\nplt.xlabel('n')\nplt.ylabel('Performance Gain (%)')\nplt.title('Cumulative Performance Gain by Augmentation Level')\n\n# Add a legend\nplt.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/area_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt  \nimport numpy as np  \n\n# Sample data\nyears = np.array([1950, 1960, 1970, 1980, 1990, 2000, 2010])\nafrica = np.array([1000, 1000, 1000, 1000, 1000, 1000, 1000])\namericas = np.array([1000, 1000, 1000, 1000, 1000, 1000, 1000])\nasia = np.array([1000, 1000, 1000, 1000, 1000, 1000, 1000])\neurope = np.array([1000, 1000, 1000, 1000, 1000, 1000, 1000])\noceania = np.array([1000, 1000, 1000, 1000, 1000, 1000, 1000])\n\n# Create a new figure\nfig = plt.figure(figsize=(8.0, 6.0))\n\n# Plot the data\nplt.plot(years, africa, label='Africa', color='green')\nplt.plot(years, americas, label='Americas', color='yellow')\nplt.plot(years, asia, label='Asia', color='red')\nplt.plot(years, europe, label='Europe', color='orange')\nplt.plot(years, oceania, label='Oceania', color='blue')\n\n# Set labels and title\nplt.xlabel('Year')\nplt.ylabel('Number of people (millions)')\nplt.title('World Population')\n\n# Add a legend\nplt.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt  \nimport numpy as np  \n\n# Sample data\ndata = np.array([[6.2, 5.8, 5.4, 5.1],\n                 [5.9, 5.6, 5.3, 5.0],\n                 [5.7, 5.4, 5.1, 4.8],\n                 [5.5, 5.2, 4.9, 4.6],\n                 [5.3, 5.0, 4.7, 4.4]])\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(7.0, 5.0))\n\n# Plot the data\nplt.plot(data)\n\n# Set labels and title\nplt.xlabel('X-axis')\nplt.ylabel('Scores')\nplt.title('Scores of Different Games')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt  \nimport numpy as np  \n\n# Sample data\ndata = [50, 40, 30, 20, 10, 5, 3]\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(8.0, 6.0))\n\n# Plot the data\nplt.bar(range(len(data)), data, color='blue')\n\n# Set labels and title\nplt.xlabel('Categories')\nplt.ylabel('Values')\nplt.title('Sample Bar Chart')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_100.pdf", "response": "```python\nimport matplotlib.pyplot as plt  \nimport numpy as np  \n\n# Sample data\ndata = {\n    'Product A': [60, 40, 80, 20],\n    'Product B': [60, 40, 80, 20],\n    'Product C': [60, 40, 80, 20],\n    'Product D': [60, 40, 80, 20],\n    'Product E': [60, 40, 80, 20]\n}\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(15.0, 5.0))\n\n# Plot the data\nfor product, sales in data.items():\n    plt.bar(product, sales, color='blue')\n\n# Set labels and title\nplt.xlabel('Products')\nplt.ylabel('Sales')\nplt.title('Average Monthly Sales by Product Across Regions')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt  \nimport numpy as np  \n\n# Sample data\ndata = np.array([0.5, 0.25, 0.25, 0.25, 0.25])\n\n# Create a new figure\nfig = plt.figure(figsize=(6.0, 6.0))\n\n# Plot the data\nplt.bar(range(len(data)), data)\n\n# Set labels and title\nplt.xlabel('length')\nplt.ylabel('speman')\nplt.title('Bar Chart')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ncategories = ['FMLP-Rec', 'Bert4Rec', 'SASRec', 'Caser', 'GRU4Rec']\nvalues_beauty = [2.2, 11.2, 2.4, 19.9, 14.3]\nvalues_movielens = [3.0, 5.1, 4.1, 2.9, 3.1]\nvalues_yelp = [4.8, 5.1, 4.4, 4.8, 19.7]\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(10.0, 4.0))\n\n# Plot the data\nax.bar(categories, values_beauty, color='blue', label='Beauty')\nax.bar(categories, values_movielens, bottom=values_beauty, color='red', label='MovieLens-1M')\nax.bar(categories, values_yelp, bottom=[sum(x) for x in zip(values_beauty, values_movielens)], color='green', label='Yelp')\n\n# Set labels and title\nax.set_xlabel('Categories')\nax.set_ylabel('Percentage')\nax.set_title('Comparison of Categories')\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ndata = np.array([\n    [3.5, 3.5, 4.4, 4.4],\n    [1.5, 2.3, 0.8, 1.5],\n    [1.5, 2.3, 0.8, 1.5],\n    [1.5, 2.3, 0.8, 1.5],\n    [1.5, 2.3, 0.8, 1.5],\n    [1.5, 2.3, 0.8, 1.5],\n    [1.5, 2.3, 0.8, 1.5],\n    [1.5, 2.3, 0.8, 1.5],\n    [1.5, 2.3, 0.8, 1.5],\n    [1.5, 2.3, 0.8, 1.5],\n    [1.5, 2.3, 0.8, 1.5],\n    [1.5, 2.3, 0.8, 1.5],\n    [1.5, 2.3, 0.8, 1.5],\n    [1.5, 2.3, 0.8, 1.5],\n    [1.5, 2.3, 0.8, 1.5],\n    [1.5, 2.3, 0.8, 1.5],\n    [1.5, 2.3, 0.8, 1.5],\n    [1.5, 2.3, 0.8, 1.5],\n    [1.5, 2.3, 0.8, 1.5],\n    [1.5, 2.3, 0.8, 1.5],\n    [1.5, 2.3, 0.8, 1.5],\n    [1.5, 2.3, 0.8, 1.5],\n    [1.5, 2.3, 0.8, 1.5],\n    [1.5, 2.3, 0.8, 1.5],\n    [1.5, 2.3, 0.8, 1.5],\n    [1.5, 2.3, 0.8, 1.5],\n    [1.5, 2.3, 0.8, 1.5],\n    [1.5, 2.3, 0.8, 1.5],\n    [1.5, 2.3, 0.8, 1.5],\n    [1.5, 2.3, 0.8, 1.5],\n    [1.5, 2.3, 0.8, 1.5],\n    [1.5, 2.3, 0.8, 1.5],\n    [1.5, 2.3, 0.8, 1.5],\n    [1.5, 2.3, 0.8, 1.5],\n    [1.5, 2.3, 0.8, 1.5],\n    [1.5, 2.3, 0.8, 1.5],\n    [1.5, 2.3, 0.8, 1.5],\n    [1.5, 2.3, 0.8, 1.5],\n    [1.5, 2.3, 0.8, 1.5],\n    [1.5, 2.3, 0.8, 1.5],\n    [1.5, 2.3, 0.8, 1.5],\n    [1.5, 2.3, 0.8, 1.5],\n    [1.5, 2.3, 0.8, 1.5],\n    [1.5, 2.3, 0.8, 1.5],\n    [1.5, 2.3, 0.8, 1.5],\n    [1.5, 2.3, 0.8, 1.5],\n    [1.5, 2.3, 0.8, 1.5],\n    [1.5, 2.3, 0.8, 1.5],\n    [1.5, 2.3, 0.8, 1.5],\n    [1.5, 2.3, 0.8, 1.5],\n    [1.5, 2.3, 0.8, 1.5],\n    [1.5, 2.3, 0.8, 1.5],\n    [1.5, 2.3, 0.8, 1.5],\n    [1.5, 2.3, 0.8, 1.5],\n    [1.5, 2.3, 0.8, 1.5],\n    [1.5, 2.3, 0.8, 1.5],\n    [1.5, 2.3, 0.8, 1.5],\n    [1.5, 2.3, 0.8, 1.5],\n    [1.5, 2.3, 0.8, 1.5],\n    [1.5, 2.3, 0.8, 1.5],\n    [1.5, 2.3, 0.8, 1.5],\n    [1.5, 2.3, 0.8, 1.5],\n    [1.5, 2.3, 0.8, 1.5],\n    [1.5, 2.3, 0.8, 1.5],\n    [1.5, 2.3, 0.8, 1.5],\n    [1.5, 2.3, 0.8, 1.5],\n    [1.5, 2.3, 0.8, 1.5],\n    [1.5, 2.3, 0.8, 1.5],\n    [1.5, 2.3, 0.8, 1.5],\n    [1.5, 2.3, 0.8, 1.5],\n    [1.5, 2.3, 0.8, 1.5],\n    [1.5, 2.3, 0.8, 1.5],\n    [1.5, 2.3, 0.8, 1.5],\n    [1.5, 2.3, 0.8, 1.5],\n    [1.5, 2.3, 0.8, 1.5],\n    [1.5, 2.3, 0.8, 1.5],\n    [1.5, 2.3, 0.8, 1.5],\n    [1.5, 2.3, 0.8, 1.5],\n    [1.5, 2.3, 0.8, 1.5],\n    [1.5, 2.3, 0.8, 1.5],\n    [1.5, 2.3, 0.8, 1.5],\n    [1.5, 2.3, 0.8, 1.5],\n    [1.5, 2.3, 0.8, 1.5],\n    [1.5, 2.3, 0.8, 1.5],\n    [1.5, 2.3, 0.8, 1.5],\n    [1.5, 2.3, 0.8, 1.5],\n    [1.5, 2.3, 0.8, 1.5],\n    [1.5, 2.3, 0.8, 1.5],\n    [1.5, 2.3, 0.8, 1.5],\n    [1.5, 2.3, 0.8, 1.5],\n    [1.5, 2.3, 0.8, 1.5],\n    [1.5, 2.3, 0.8, 1.5],\n    [1.5, 2.3, 0.8, 1.5],\n    [1.5, 2.3, 0.8, 1.5],\n    [1.5, 2.3, 0.8, 1.5],\n    [1.5, 2.3, 0.8, 1.5],\n    [1.5, 2.3, 0.8, 1.5],\n    [1.5, 2.3, 0.8, 1.5],\n    [1.5, 2.3, 0.8, 1.5],\n    [1.5, 2.3, 0.8, 1.5],\n    [1.5, 2.3, 0.8, 1.5],\n    [1.5, 2.3, 0.8, 1.5],\n    [1.5, 2.3, 0.8, 1.5],\n    [1.5, 2.3, 0.8, 1.5],\n    [1.5, 2.3, 0.8, 1.5],\n    [1.5, 2.3, 0.8, 1.5],\n    [1.5, 2.3, 0.8, 1.5],\n    [1.5, 2.3, 0.8, 1.5],\n    [1.5, 2.3, 0.8, 1.5],\n    [1.5, 2.3, 0.8, 1.5],\n    [1.5, 2.3, 0.8, 1.5],\n    [1.5, 2.3, 0.8, 1.5],\n    [1.5, 2.3, 0.8, 1.5],\n    [1.5, 2.3, 0.8, 1.5],\n    [1.5, 2.3, 0.8, 1.5],\n    [1.5, 2.3, 0.8, 1.5],\n    [1.5, 2.3, 0.8, 1.5],\n    [1.5, 2.3, 0.8, 1.5],\n    [1.5, 2.3, 0.8, 1.5],\n    [1.5, 2.3, 0.8, 1.5],\n    [1.5, 2.3, 0.8, 1.5],\n    [1.5, 2.3, 0.8, 1.5],\n    [1.5, 2.3, 0.8, 1.5],\n    [1.5, 2.3, 0.8, 1.5],\n    [1.5, 2.3, 0.8, 1.5],\n    [1.5, 2.3, 0.8, 1.5],\n    [1.5, 2.3, 0.8, 1.5],\n    [1.5, 2.3, 0.8, 1.5],\n    [1.5, 2.3, 0.8, 1.5],\n    [1.5, 2.3, 0.8, 1.5],\n    [1.5, 2.3, 0.8, 1.5],\n    [1.5, 2.3, 0.8, 1.5],\n    [1.5, 2.3, 0.8, 1.5],\n    [1.5, 2.3, 0.8, 1.5],\n    [1.5, 2.3, 0.8, 1.5],\n    [1.5, 2.3, 0.8, 1.5],\n    [1.5, 2.3, 0.8, 1.5],\n    [1.5, 2.3, 0.8, 1.5],\n    [1.5, 2.3, 0.8, 1.5],\n    [1.5, 2.3, 0.8, 1.5],\n    [1.5, 2.3, 0.8, 1.5],\n    [1.5, 2.3, 0.8, 1.5],\n    [1.5, 2.3, 0.8, 1.5],\n    [1.5, 2.3, 0.8, 1.5],\n    [1.5, 2.3, 0.8, 1.5],\n    [1.5, 2.3, 0.8, 1.5],\n    [1.5, 2.3, 0.8, 1.5],\n    [1.5, 2.3, 0.8, 1.5],\n    [1.5, 2.3, 0.8, 1.5],\n    [1.5, 2.3, 0.8, 1.5],\n    [1.5, 2.3, 0.8, 1.5],\n    [1.5, 2.3, 0.8, 1.5],\n    [1.5, 2.3, 0.8, 1.5],\n    [1.5, 2.3, 0.8, 1.5],\n    [1.5, 2.3, 0.8, 1.5],\n    [1.5, 2.3, 0.8, 1.5],\n    [1.5, 2.3, 0.8, 1.5],\n    [1.5, 2.3, 0.8, 1.5],\n    [1.5, 2.3, 0.8, 1.5],\n    [1.5, 2.3, 0.8, 1.5],\n    [1.5, 2.3, 0.8, 1.5],\n    [1.5, 2.3, 0.8, 1.5],\n    [1.5, 2.3, 0.8, 1.5],\n    [1.5, 2.3, 0.8, 1.5],\n    [1.5, 2.3, 0.8, 1.5],\n    [1.5, 2.3, 0.8, 1.5],\n    [1.5, 2.3, 0.8, 1.5],\n    [1.5, 2.3, 0.8, 1.5],\n    [1.5, 2.3, 0.8, 1.5],\n    [1.5, 2.3, 0.8, 1.5],\n    [1.5, 2.3, 0.8, 1.5],\n    [1.5, 2.3, 0.8, 1.5],\n    [1.5, 2.3, 0.8, 1.5],\n    [1.5, 2.3, 0.8, 1.5],\n    [1.5, 2.3, 0.8, 1.5],\n    [1.5, 2.3, 0.8, 1.5],\n    [1.5, 2.3, 0.8, 1.5],\n    [1.5, 2.3, 0.8, 1.5],\n    [1.5, 2.3, 0.8, 1.5],\n    [1.5, 2.3, 0.8, 1.5],\n    [1.5, 2.3, 0.8, 1.5],\n    [1.5, 2.3, 0.8, 1.5],\n    [1.5, 2.3, 0.8, 1.5],\n    [1.5, 2.3, 0.8, 1.5],\n    [1.5, 2.3, 0.8, 1.5],\n    [1.5, 2.3, 0.8, 1.5],\n    [1.5, 2.3, 0.8, 1.5],\n    [1.5, 2.3, 0.8, 1.5],\n    [1.5, 2.3, 0.8, 1.5],\n    [1.5, 2.3, 0.8, 1.5],\n    [1.5, 2.3, 0.8, 1.5],\n    [1.5, 2.3, 0.8, 1.5],\n    [1.5, 2.3, 0.8, 1.5],\n    [1.5, 2.3, 0.8, 1.5"}
{"file": "dataset/ori_500/bar_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ndata = {\n    'Pheme': ['GCN', 'RvNN', 'Hyphen', 'GET', 'WSDMS', 'DELL'],\n    'Macro F1-score': [0.82, 0.83, 0.81, 0.84, 0.86, 0.89],\n    'LMM-mis': [0.85, 0.86, 0.84, 0.87, 0.88, 0.90]\n}\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(7.0, 5.0))\n\n# Plot the data\nplt.bar(data['Pheme'], data['Macro F1-score'], color='blue', label='Macro F1-score')\nplt.bar(data['Pheme'], data['LMM-mis'], color='gray', label='LMM-mis')\n\n# Set labels and title\nplt.xlabel('Pheme')\nplt.ylabel('Scores')\nplt.title('Scores by Pheme')\n\n# Add a legend\nplt.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Sample data\ndata = [\n    [5, 4, 3, 2, 1],\n    [5, 4, 3, 2, 1],\n    [5, 4, 3, 2, 1],\n    [5, 4, 3, 2, 1],\n    [5, 4, 3, 2, 1],\n    [5, 4, 3, 2, 1]\n]\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(8.0, 5.0))\n\n# Plot the data\nplt.imshow(data, cmap='viridis', interpolation='nearest')\n\n# Set labels and title\nplt.xlabel('Human Annotator')\nplt.ylabel('Scores')\nplt.title('Human Labeling and Agreement Bias Checking')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_16.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Sample data\ndata = {\n    'human': {'s1': [200, 300, 400], 's2': [200, 300, 400]},\n    'gpt4': {'s1': [100, 200, 300], 's2': [100, 200, 300]},\n    'gpt4-cot': {'s1': [50, 150, 250], 's2': [50, 150, 250]}\n}\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(8.0, 6.0))\n\n# Plot the data\nfor role, values in data.items():\n    for s, counts in values.items():\n        plt.bar([role, s], counts, label=s)\n\n# Set labels and title\nplt.xlabel('Role')\nplt.ylabel('Count')\nplt.title('Resonance Preference Plot for rich-context')\n\n# Add a legend\nplt.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_17.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ndata = {\n    'LLaMA-2-7B': [53.0, 51.3, 56.4, 56.2],\n    'Evol-Instruct-70k': [53.0, 51.3, 56.4, 56.2],\n    'Evol-Instruct-AlpaGasus-1k': [53.0, 51.3, 56.4, 56.2],\n    'Evol-Instruct-1k-longest': [53.0, 51.3, 56.4, 56.2],\n    'LIMA-1k': [53.0, 51.3, 56.4, 56.2]\n}\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(10.0, 4.0))\n\n# Plot the data\nfor key, values in data.items():\n    ax.plot(values, label=key)\n\n# Set labels and title\nax.set_xlabel('Tasks')\nax.set_ylabel('Accuracy (%)')\nax.set_title('Model Accuracy Comparison')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_18.pdf", "response": "```python\nimport matplotlib.pyplot as plt  \nimport numpy as np  \n\n# Sample data\ndata = np.array([\n    [35, 45, 55, 65, 75],\n    [40, 50, 60, 70, 80],\n    [45, 55, 65, 75, 85],\n    [50, 60, 70, 80, 90],\n    [55, 65, 75, 85, 95]\n])\n\n# Create a new figure\nfig = plt.figure(figsize=(10.0, 6.0))\n\n# Plot the data\nplt.plot(data)\n\n# Set labels and title\nplt.xlabel('X-axis')\nplt.ylabel('Y-axis')\nplt.title('Sample Plot')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_19.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for plotting\ndata = [\n    [60.2, 28.8, 11.0],\n    [60.2, 28.8, 11.0],\n    [46.8, 39.1, 14.1],\n    [34.7, 39.1, 26.2],\n    [62.5, 27.7, 9.8],\n    [62.5, 27.7, 9.8],\n    [49.2, 36.3, 14.5],\n    [30.9, 38.7, 30.5]\n]\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(8.0, 6.0))\n\n# Plot the data\nplt.bar(range(len(data)), [x[0] for x in data], color='green', label='DLMA win')\nplt.bar(range(len(data)), [x[1] for x in data], bottom=[x[0] for x in data], color='blue', label='DLMA tie')\nplt.bar(range(len(data)), [x[2] for x in data], bottom=[x[0] + x[1] for x in data], color='red', label='DLMA lose')\n\n# Set labels and title\nplt.xlabel('Comparison')\nplt.ylabel('Percentage')\nplt.title('DLMA VS. LLAMA-7B (Evaluated by GPT4)')\nplt.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ndata = np.array([\n    [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0],\n    [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0],\n    [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0],\n    [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0],\n    [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0],\n    [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0],\n    [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0],\n    [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0]\n])\n\n# Create a new figure\nfig, ax = plt.subplots(figsize=(6.0, 3.0))\n\n# Plot the data\nax.plot(data)\n\n# Set labels and title\nax.set_xlabel('Time (s)')\nax.set_ylabel('% Experiments')\nax.set_title('Gait Distribution Over Time: Policy ORC=111')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_20.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ndata = {\n    'LIMA': [68, 24, 8],\n    'Vicuna': [82, 15, 3],\n    'Koala': [68, 22, 10],\n    'Wizardlm': [72, 19, 9],\n    'Self-Instruct': [68, 23, 9]\n}\n\n# Create a new figure\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Set the title of the plot\nax.set_title('AP-1kL wins')\n\n# Set the labels for the x-axis\nax.set_xlabel('AP-1kL wins')\n\n# Set the labels for the y-axis\nax.set_ylabel('AG-1k wins')\n\n# Plot the data\nfor label, values in data.items():\n    ax.barh(label, values[0], color='blue', label='AP-1kL wins')\n    ax.barh(label, values[2], left=values[0], color='gray', label='AG-1k wins')\n\n# Add a legend to the plot\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_21.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Sample data\ndata = {\n    'Benefits': [14.8, 29.6, 29.6, 18.5, 8.4],\n    'Reliability': [9.4, 24.1, 24.1, 27.8, 9.3],\n    'Security': [8.3, 14.8, 14.8, 16.7, 9.3],\n    'Privacy': [24.1, 29.6, 29.6, 16.7, 9.3]\n}\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(10.0, 6.0))\n\n# Plot the data\nplt.bar(range(len(data['Benefits'])), data['Benefits'], color='red', label='Strong Disagree')\nplt.bar(range(len(data['Benefits'])), data['Reliability'], bottom=data['Benefits'], color='orange', label='Disagree')\nplt.bar(range(len(data['Benefits'])), data['Security'], bottom=[sum(x) for x in zip(data['Benefits'], data['Reliability'])], color='grey', label='Neutral')\nplt.bar(range(len(data['Benefits'])), data['Privacy'], bottom=[sum(x) for x in zip(data['Benefits'], data['Reliability'], data['Security'])], color='blue', label='Agree')\n\n# Set labels and title\nplt.xlabel('Eye Movement')\nplt.ylabel('Percentage')\nplt.title('Eye Movement')\n\n# Add a legend\nplt.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_22.pdf", "response": "```python\nimport matplotlib.pyplot as plt  \nimport numpy as np  \n\n# Sample data\ndata = {\n    'Ours': [12.3, 14.5, 15.0],\n    'Saliency-based Sampling': [13.2, 14.7, 15.5]\n}\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(6.0, 10.0))\n\n# Plot the data\nplt.plot(data['Ours'], label='Ours', color='blue')\nplt.plot(data['Saliency-based Sampling'], label='Saliency-based Sampling', color='purple')\n\n# Set labels and title\nplt.xlabel('Brightness')\nplt.ylabel('Rate of Gain Change (%)')\nplt.title('Rate of Gain Change vs Brightness')\n\n# Add a legend\nplt.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_23.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Sample data\ndata = {\n    'GPT4': [3.2, 2.8, 2.5, 2.1, 1.6],\n    'GPT-few-shot': [3.1, 2.7, 2.4, 2.0, 1.5],\n    'GPT3.5': [3.0, 2.6, 2.3, 1.9, 1.4],\n    'StarCoder': [2.9, 2.5, 2.2, 1.8, 1.3],\n    'Code Llama': [2.8, 2.4, 2.1, 1.7, 1.2],\n    'NCL': [2.7, 2.3, 2.0, 1.6, 1.1]\n}\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(9.0, 5.0))\n\n# Plot the data\nfor label, values in data.items():\n    plt.plot(values, label=label)\n\n# Set labels and title\nplt.xlabel('Language Models')\nplt.ylabel('Ratings')\nplt.title('Ratings of Language Models on a Scale from 1-4')\n\n# Add a legend\nplt.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_24.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Sample data\nmodels = ['Majority', 'Flan-T5', 'GPT-3.5', 'GPT-4', 'Wizard13b', 'Vicuna13b', 'Mistral17b']\naccuracies = [0.302, 0.601, 0.468, 0.653, 0.384, 0.379, 0.364]\n\n# Create a new figure\nfig, ax = plt.subplots(figsize=(8.0, 4.0))\n\n# Plot the data\nax.bar(models, accuracies, color='green')\n\n# Set labels and title\nax.set_xlabel('Models')\nax.set_ylabel('Accuracy')\nax.set_title('Model Accuracy Comparison')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_25.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ndata = {\n    'Alpaca-52k+': [78.8, 67.4, 11.7, 9.5],\n    'Alpaga-1k+': [67.4, 44.2, 21.9, 14.5],\n    'LIMa-1k+': [44.2, 21.9, 33.9, 19.2],\n    'LIMa-1k*': [59.8, 21.0, 19.2, 13.8]\n}\n\n# Create a new figure\nfig, ax = plt.subplots(figsize=(10.0, 4.0))\n\n# Plot the data\nfor i, (key, values) in enumerate(data.items()):\n    ax.barh(range(len(values)), values, left=np.sum(list(data.values())[:i], axis=0), color=plt.cm.tab20(i / len(data)))\n\n# Set labels and title\nax.set_yticks(range(len(data)))\nax.set_yticklabels(data.keys())\nax.set_xlabel('Number of wins')\nax.set_title('GPT4-as-a-judge')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_26.pdf", "response": "```python\nimport matplotlib.pyplot as plt  \nimport numpy as np  \n\n# Sample data\ndata = {'Ang': [100, 200, 300, 400, 500], 'Cntr': [100, 200, 300, 400, 500], 'Dis': [100, 200, 300, 400, 500], 'Fea': [100, 200, 300, 400, 500], 'Joy': [100, 200, 300, 400, 500], 'Ntr': [100, 200, 300, 400, 500], 'Sad': [100, 200, 300, 400, 500], 'Sur': [100, 200, 300, 400, 500]}\nlabels = list(data.keys())\nvalues = [np.mean(values) for values in data.values()]\n\n# Create a new figure\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Plot the data\nax.bar(labels, values, color='red')\n\n# Set labels and title\nax.set_xlabel('Emotions')\nax.set_ylabel('Frequency')\nax.set_title('Emotion Frequency Distribution')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_27.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Sample data\ndata = {\n    'GPT-4V': [0.95, 0.05, 0.02, 0.01],\n    'RoboCodeX': [0.85, 0.05, 0.02, 0.01]\n}\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(10.0, 3.0))\n\n# Plot the data\nax.bar(range(len(data['GPT-4V'])), data['GPT-4V'], color='green', label='Success')\nax.bar(range(len(data['GPT-4V'])), data['RoboCodeX'], color='gray', label='Grounding Error')\n\n# Set labels and title\nax.set_xlabel('Percentage of Total Trials')\nax.set_title('Comparison of GPT-4V and RoboCodeX')\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_28.pdf", "response": "```python\nimport matplotlib.pyplot as plt  \nimport numpy as np  \n\n# Sample data\ndata = np.array([[3.2, 1.8, 1.2],\n                 [3.4, 2.0, 1.4],\n                 [3.6, 2.2, 1.6],\n                 [3.8, 2.4, 1.8],\n                 [4.0, 2.6, 2.0]])\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(6.0, 5.0))\n\n# Plot the data\nplt.bar(range(len(data)), data[:, 0], color='lightblue', label='JPEG')\nplt.bar(range(len(data)), data[:, 1], bottom=data[:, 0], color='orange', label='DEEPJSCC w/ ofdm')\nplt.bar(range(len(data)), data[:, 2], bottom=data[:, 0] + data[:, 1], color='green', label='OURS')\n\n# Set labels and title\nplt.xlabel('Datasets')\nplt.ylabel('Transmission Delay (ms)')\nplt.title('Comparison of Transmission Delays')\n\n# Add a legend\nplt.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_29.pdf", "response": "```python\nimport matplotlib.pyplot as plt  \nimport numpy as np  \n\n# Sample data\ndata = np.array([\n    [1.2, 1.3, 1.4, 1.5, 1.6],\n    [1.3, 1.4, 1.5, 1.6, 1.7],\n    [1.4, 1.5, 1.6, 1.7, 1.8],\n    [1.5, 1.6, 1.7, 1.8, 1.9],\n    [1.6, 1.7, 1.8, 1.9, 2.0]\n])\n\n# Create a new figure\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot the data\nax.plot(data)\n\n# Set labels\nax.set_xlabel('PDEs')\nax.set_ylabel('log L2')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ndata = {\n    'w/o DaQNR': [0.975, 0.965, 0.965],\n    'w/o CPRN': [0.975, 0.965, 0.965],\n    'w/o QCN': [0.975, 0.965, 0.965],\n    'Full model': [0.975, 0.965, 0.965]\n}\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(10.0, 3.0))\n\n# Plot the data\nfor i, (key, values) in enumerate(data.items()):\n    plt.subplot(1, 4, i + 1)\n    plt.bar(range(len(values)), values, color=['blue', 'orange', 'cyan', 'yellow'])\n    plt.title(key)\n    plt.ylim(0.94, 0.98)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_30.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Sample data\ndata = {\n    'Mixtral-8x7b-Instruct': [6.11, 28.33, 31.11, 44.44, 28.33, 31.11],\n    'GPT-3.5': [85.0, 56.11, 56.11, 44.44, 56.11, 56.11],\n    'GPT-4': [99.44, 60.56, 60.56, 42.78, 60.56, 60.56]\n}\n\n# Create a new figure\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Plot the data\nax.bar(range(len(data['Mixtral-8x7b-Instruct'])), data['Mixtral-8x7b-Instruct'], color='red', label='Zero-shot')\nax.bar(range(len(data['GPT-3.5'])), data['GPT-3.5'], color='blue', label='One-shot')\nax.bar(range(len(data['GPT-4'])), data['GPT-4'], color='purple', label='DS-Agent')\n\n# Set labels and title\nax.set_xlabel('Passes')\nax.set_ylabel('One pass rate (%)')\nax.set_title('One Pass Rate by Passes')\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_31.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nlabels = ['LMM-based vs TPLM-based', 'LMM-based vs Template', 'LMM-based vs Markdown', 'TPLM-based vs Template', 'TPLM-based vs Markdown', 'Markdown vs Template']\nwin_values = [17.0, 20.0, 25.0, 30.5, 31.5, 19.5]\ntie_values = [54.0, 67.5, 56.5, 57.5, 54.5, 61.0]\nloss_values = [29.0, 12.5, 18.5, 12.0, 14.0, 19.5]\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(10.0, 6.0))\n\n# Plot the data\nplt.bar(labels, win_values, color='blue', label='Win')\nplt.bar(labels, tie_values, bottom=win_values, color='green', label='Tie')\nplt.bar(labels, loss_values, bottom=[sum(x) for x in zip(win_values, tie_values)], color='red', label='Loss')\n\n# Set labels and title\nplt.xlabel('Comparison')\nplt.ylabel('Percentage')\nplt.title('Comparison of LMM-based vs TPLM-based, LMM-based vs Template, LMM-based vs Markdown, TPLM-based vs Template, TPLM-based vs Markdown, and Markdown vs Template')\nplt.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_32.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for plotting\ncategories = ['Combat Spider', 'Milky Cow', 'Shear Sheep']\nvalues = [0.72, 0.74, 0.56]\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(6.0, 2.0))\n\n# Plot the data\nax.bar(categories, values, color='blue')\n\n# Set labels and title\nax.set_xlabel('Probability of Improvement over VLM Image Encoder Baseline Returns')\nax.set_title('Probability of Improvement over VLM Image Encoder Baseline Returns')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_33.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\nx = np.array([0, 1, 2, 3, 4])\ny1 = np.array([100.0, 60.0, 83.3, 100.0, 91.7])\ny2 = np.array([100.0, 60.0, 48.1, 100.0, 60.8])\n\n# Create a new figure\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Plot the data\nax.plot(x, y1, label='Avg. Following Rate')\nax.plot(x, y2, label='Following-related Format Error Rate')\n\n# Set labels and title\nax.set_xlabel('Steps')\nax.set_ylabel('Scores')\nax.set_title('Instruction Following Results In Different Steps (gpt-3.5-turbo)')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_34.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ndata = np.random.rand(20, 10) * 100\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(8.0, 4.0))\n\n# Plot the data\nplt.imshow(data, cmap='viridis')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_35.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Sample data\ndata = {\n    'Random': [5.52, 5.53, 5.83, 5.54, 5.84],\n    'Uniform': [5.52, 5.53, 5.83, 5.54, 5.84],\n    'G2S': [5.52, 5.53, 5.83, 5.54, 5.84],\n    'S2G': [5.52, 5.53, 5.83, 5.54, 5.84],\n    'ClusterClip': [5.52, 5.53, 5.83, 5.54, 5.84]\n}\n\n# Create a new figure\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Plot the data\nfor key, values in data.items():\n    ax.bar(key, values, color='blue')\n\n# Set labels and title\nax.set_xlabel('Methods')\nax.set_ylabel('MT-Bench Score')\nax.set_title('MT-Bench Score Comparison')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_36.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ndata = {\n    'Random Sampling': [49.98, 51.05],\n    'Uniform': [49.63, 49.63],\n    'ClusterClip': [50.74, 50.74]\n}\nclusters = [100, 1000]\n\n# Create a new figure\nfig, ax = plt.subplots(figsize=(6.61, 5.23))\n\n# Plot the data\nfor key, values in data.items():\n    ax.bar(clusters, values, label=key, alpha=0.7)\n\n# Set labels and title\nax.set_xlabel('Number of Clusters')\nax.set_ylabel('MMLU')\nax.set_title('Comparison of MMLU for Different Sampling Techniques')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_37.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ndata = [\n    [1.0, 1.8, 2.6, 3.3, 4.6, 7.4],\n    [1.0, 1.0, 1.9, 2.9, 3.4, 5.2],\n    [1.0, 1.6, 1.8, 2.7, 2.9, 3.9],\n    [1.0, 1.6, 1.8, 2.7, 2.9, 4.3]\n]\n\n# Create a new figure\nfig, ax = plt.subplots(figsize=(12.0, 4.0))\n\n# Plot the data\nax.bar(range(len(data[0])), data[0], color='pink')\nax.bar(range(len(data[1])), data[1], color='orange')\nax.bar(range(len(data[2])), data[2], color='green')\nax.bar(range(len(data[3])), data[3], color='purple')\n\n# Set labels and title\nax.set_xlabel('Perturbation')\nax.set_ylabel('Speedup')\nax.set_title('Perturbation vs Speedup')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_38.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Sample data\ndata = {\n    'CL-7b': [40, 20, 10, 30, 20],\n    'CL-13b': [60, 40, 30, 20, 10],\n    'CL-34b': [80, 60, 50, 40, 30],\n    'DS-6.7b': [90, 70, 60, 50, 40],\n    'DS-33b': [100, 80, 70, 60, 50],\n    'SC': [40, 20, 10, 30, 20]\n}\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(7.0, 5.0))\n\n# Plot the data\nfor key, values in data.items():\n    plt.plot(values, label=key)\n\n# Set labels and title\nplt.xlabel('Epoch')\nplt.ylabel('Accuracy')\nplt.title('LeetCode, DS-6.7b')\n\n# Add a legend\nplt.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_39.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\nlabels = ['Recost (1% wins)', 'Tie', 'Alpacas wins']\nvicuna = [53, 6, 21]\nkoala = [80, 33, 67]\nwizardlm = [116, 49, 53]\nsinstall = [99, 50, 103]\nlima = [179, 98, 23]\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(8.0, 5.0))\n\n# Plot data\nplt.bar(labels, vicuna, color='red')\nplt.bar(labels, koala, bottom=vicuna, color='orange')\nplt.bar(labels, wizardlm, bottom=[sum(x) for x in zip(vicuna, koala)], color='blue')\nplt.bar(labels, sinstall, bottom=[sum(x) for x in zip(vicuna, koala, wizardlm)], color='green')\nplt.bar(labels, lima, bottom=[sum(x) for x in zip(vicuna, koala, wizardlm, sinstall)], color='purple')\n\n# Set title and labels\nplt.title('Bar Chart')\nplt.xlabel('Categories')\nplt.ylabel('Values')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Sample data\ndata = {\n    'CometKiwi': [35.15, 26.86],\n    'LaBSE': [26.86, 26.86],\n    'IF': [26.86, 26.86],\n    'Max': [26.86, 26.86],\n    'Ppl': [58.99, 58.99],\n    'STARE': [35.15, 35.15],\n    'Wass Combo': [58.99, 58.99],\n    'Alti+': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n    'Max': [66.19, 66.19],\n   "}
{"file": "dataset/ori_500/bar_40.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ncategories = ['Literal', 'Assignment', 'Operator', 'Comment', 'Operation', 'Exception Handling', 'Method Call', 'External Variable/Method', 'Return', 'Variable', 'External Class', 'Argument', 'Conditional Block', 'Loop']\nvalues = [142, 87, 136, 129, 134, 130, 139, 137, 138, 135, 133, 131, 132, 136]\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(10.0, 5.0))\n\n# Plot the data\nplt.bar(categories, values)\n\n# Set labels and title\nplt.xlabel('Semantic Category')\nplt.ylabel('Relative Difference (%)')\nplt.title('Relative Difference in Machine vs. Human Focus on Semantic Categories')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_41.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ndata = [\n    [66.3, 61.9, 53.8],\n    [10.1, 13.6, 13.7],\n    [49.3, 45.7, 41.6],\n    [36.3, 41.0, 31.5],\n    [40.5, 42.6, 36.5],\n    [48.0, 40.2, 30.6],\n    [43.8, 56.8, 25.9],\n    [49.5, 56.8, 22.5],\n    [64.7, 59.6, 22.5]\n]\n\n# Create a new figure\nfig, ax = plt.subplots(figsize=(14.0, 4.0))\n\n# Plot the data\nax.bar(range(len(data)), data[0], color='blue', label='Truthful Recall')\nax.bar(range(len(data)), data[1], bottom=data[0], color='red', label='Misleading Recall')\n\n# Set labels and title\nax.set_xlabel('Misleading: Misleading')\nax.set_ylabel('Score')\nax.set_title('Misleading: Misleading = 2:0')\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_42.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Sample data\ndata = {\n    'PROST': [1.23, 1.24, 1.25, 1.26, 1.27, 1.28],\n    'ARC-easy': [1.29, 1.30, 1.31, 1.32, 1.33, 1.34],\n    'COMVE': [1.35, 1.36, 1.37, 1.38, 1.39, 1.40],\n    'OpenBookQA': [1.41, 1.42, 1.43, 1.44, 1.45, 1.46],\n    'SciQ': [1.47, 1.48, 1.49, 1.50, 1.51, 1.52],\n    'NumSense': [1.53, 1.54, 1.55, 1.56, 1.57, 1.58],\n    'CoQA': [1.59, 1.60, 1.61, 1.62, 1.63, 1.64],\n    'ComQA2.0': [1.65, 1.66, 1.67, 1.68, 1.69, 1.70],\n    'ComQC': [1.71, 1.72, 1.73, 1.74, 1.75, 1.76],\n    'ComIC': [1.77, 1.78, 1.79, 1.80, 1.81, 1.82],\n    'QuartZ': [1.83, 1.84, 1.85, 1.86, 1.87, 1.88],\n    'Winogrande': [1.89, 1.90, 1.91, 1.92, 1.93, 1.94],\n    'Com2Sense': [1.95, 1.96, 1.97, 1.98, 1.99, 2.00],\n    'CODAH': [2.01, 2.02, 2.03, 2.04, 2.05, 2.06],\n    'Arc-challenge': [2.07, 2.08, 2.09, 2.10, 2.11, 2.12],\n    'SocialIQA': [2.13, 2.14, 2.15, 2.16, 2.17, 2.18],\n    'HellaSWAG-wikiHow': [2.19, 2.20, 2.21, 2.22, 2.23, 2.24],\n    'HellaSWAG-eli5': [2.25, 2.26, 2.27, 2.28, 2.29, 2.30],\n    'Winograd-reverse': [2.31, 2.32, 2.33, 2.34, 2.35, 2.36],\n    'PIQA': [2.37, 2.38, 2.39, 2.40, 2.41, 2.42],\n    'QuaRel': [2.43, 2.44, 2.45, 2.46, 2.47, 2.48],\n    'SCAT': [2.49, 2.50, 2.51, 2.52, 2.53, 2.54],\n    'alphaNLI': [2.55, 2.56, 2.57, 2.58, 2.59, 2.60],\n    'SWAG': [2.61, 2.62, 2.63, 2.64, 2.65, 2.66],\n    'HellaSWAG-actnet': [2.67, 2.68, 2.69, 2.70, 2.71, 2.72]\n}\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(8.0, 5.0))\n\n# Plot the data\nfor model, accs in data.items():\n    plt.plot(accs, label=model)\n\n# Set labels and title\nplt.xlabel('Epoch')\nplt.ylabel('\u0394Acc')\nplt.title('Model = Vicuna')\n\n# Add a legend\nplt.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_43.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Sample data\ndata = {\n    'MedMCQA': [48.1, 57.2, 64.9, 72.3, 79.1],\n    'MedQA (USMLE)': [74.4, 75.8, 76.2, 79.2, 80.2],\n    'PubMedQA': [74.4, 75.8, 76.2, 79.2, 80.2],\n    'MMLU Anatomy': [55.6, 75.6, 78.5, 71.1, 89.6],\n    'MMLU Clinical knowledge': [70.2, 79.2, 80.4, 82.3, 88.7],\n    'MMLU College biology': [70.2, 79.2, 80.4, 82.3, 88.7],\n    'MMLU Medical genetics': [72.0, 71.0, 76.0, 75.0, 93.8],\n    'MMLU Medical medicine': [68.8, 71.0, 76.0, 75.0, 93.8],\n    'MMLU Professional medicine': [77.7, 79.2, 80.2, 82.3, 88.0]\n}\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Plot the data\nfor key, values in data.items():\n    ax.bar(range(len(values)), values, label=key)\n\n# Set labels and title\nax.set_xlabel('Versions')\nax.set_ylabel('Performance Score (%)')\nax.set_title('Performance Scores for Different Versions')\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_44.pdf", "response": "```python\nimport matplotlib.pyplot as plt  \nimport numpy as np  \n\n# Sample data\ndata = np.array([\n    [45, 10],\n    [42, 13],\n    [39, 16],\n    [36, 19],\n    [33, 22],\n    [30, 25],\n    [27, 28],\n    [24, 31],\n    [21, 34],\n    [18, 37],\n    [15, 40],\n    [12, 43],\n    [9, 46],\n    [6, 49],\n    [3, 52]\n])\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(8.0, 6.0))\n\n# Plot the data\nplt.bar(range(len(data)), data[:, 0], color='blue', label='GPT-3.5-Turbo')\nplt.bar(range(len(data)), data[:, 1], bottom=data[:, 0], color='orange', label='GPT-4')\n\n# Set labels and title\nplt.xlabel('Categories')\nplt.ylabel('Non-NLAs')\nplt.title('Non-NLAs by Category')\nplt.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_45.pdf", "response": "```python\nimport matplotlib.pyplot as plt  \nimport numpy as np  \n\n# Sample data\nx = np.array([3, 5, 7, 10])\ny1 = np.array([-4.26, -4.26, -4.26, -4.26])\ny2 = np.array([-4.26, -4.26, -4.26, -4.26])\ny3 = np.array([-4.26, -4.26, -4.26, -4.26])\ny4 = np.array([-4.26, -4.26, -4.26, -4.26])\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(10.0, 7.0))\n\n# Plot the data\nplt.plot(x, y1, 'p', label='LLAMA-Default')\nplt.plot(x, y2, 'o', label='LLAMA-HAG')\nplt.plot(x, y3, '^', label='Vicuna-Default')\nplt.plot(x, y4, 's', label='Vicuna-HAG')\n\n# Set labels and title\nplt.xlabel('Num of Constraint Words')\nplt.ylabel('Score')\nplt.title('Taboo')\n\n# Add a legend\nplt.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_46.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Sample data\ndata = [82.5, 73.93, 60.4, 46.4, 31.79]\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(10.0, 6.0))\n\n# Plot the data\nplt.bar(range(len(data)), data)\n\n# Set labels and title\nplt.xlabel('Categories')\nplt.ylabel('Values')\nplt.title('Human Study')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_47.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Sample data\ndata = {\n    'HH': [22, 50, 28],\n    'Reddit': [25, 40, 30],\n    'IMDB': [30, 60, 10],\n    'AVG': [26, 60, 20]\n}\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(13.0, 6.0))\n\n# Plot the data\nax.bar(range(len(data)), data['HH'], color='red', label='Win')\nax.bar(range(len(data)), data['Reddit'], bottom=data['HH'], color='orange', label='Reddit')\nax.bar(range(len(data)), data['IMDB'], bottom=[sum(x) for x in zip(data['HH'], data['Reddit'])], color='pink', label='IMDB')\nax.bar(range(len(data)), data['AVG'], bottom=[sum(x) for x in zip(data['HH'], data['Reddit'], data['IMDB'])], color='purple', label='AVG')\n\n# Set labels and title\nax.set_xlabel('COPR v.s. Golden (Human Eval)')\nax.set_ylabel('Percentage')\nax.set_title('COPR v.s. Golden (GPT-4 Eval)')\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_48.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ndata = {\n    'Accuracy': [32, 34, 35, 36, 37],\n    'Unfairness': [10, 11, 12, 13, 14]\n}\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(5.0, 6.0))\n\n# Plot the data\nplt.bar(range(len(data['Accuracy'])), data['Accuracy'], color='blue', label='Accuracy')\nplt.bar(range(len(data['Unfairness'])), data['Unfairness'], color='red', label='Unfairness')\n\n# Set labels and title\nplt.xlabel('Categories')\nplt.ylabel('Values')\nplt.title('Sample Bar Chart')\nplt.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_49.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Sample data\ndata = {\n    '224': [29, 60],\n    '128': [29, 60],\n    '64': [29, 60],\n    '32': [87, 180]\n}\n\n# Create a new figure\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data\nax.bar(data.keys(), [d[0] for d in data.values()], color='blue', label='ImageNet-1k')\nax.bar(data.keys(), [d[1] for d in data.values()], bottom=[d[0] for d in data.values()], color='orange', label='ImageNet (F)')\nax.bar(data.keys(), [d[1] - d[0] for d in data.values()], bottom=[d[0] for d in data.values()], color='pink', label='PAC-FNO')\n\n# Set labels and title\nax.set_xlabel('Resolutions')\nax.set_ylabel('Top-1 Acc (%)')\nax.set_title('Top-1 Accuracy by Resolution and Method')\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ndata = np.array([\n    [50.0, 30.0, 22.0],\n    [50.0, 28.0, 20.6],\n    [50.0, 22.9, 16.8]\n])\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(8.0, 3.0))\n\n# Plot the data\nplt.bar(range(3), data[0], color='yellow', label='Tent/PLCoTTA')\nplt.bar(range(3), data[1], bottom=data[0], color='blue', label='ETA')\nplt.bar(range(3), data[2], bottom=data[0] + data[1], color='red', label='CETTA (ours)')\n\n# Set labels and title\nplt.xlabel('# Avg Uploaded Samples')\nplt.ylabel('Level')\nplt.title('Uploads per Level')\nplt.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_50.pdf", "response": "```python\nimport matplotlib.pyplot as plt  \nimport numpy as np  \n\n# Sample data\ndata = np.array([\n    [39.4, 26.82, 19.66, 22, 0],\n    [32.84, 19.66, 11.66, 22, 0],\n    [35.18, 26.82, 19.66, 22, 0],\n    [30, 26.82, 19.66, 22, 0],\n    [28, 26.82, 19.66, 22, 0],\n    [20.84, 26.82, 19.66, 22, 0],\n    [20, 26.82, 19.66, 22, 0],\n    [22, 26.82, 19.66, 22, 0],\n    [22, 26.82, 19.66, 22, 0],\n    [22, 26.82, 19.66, 22, 0],\n    [22, 26.82, 19.66, 22, 0],\n    [22, 26.82, 19.66, 22, 0],\n    [22, 26.82, 19.66, 22, 0],\n    [22, 26.82, 19.66, 22, 0],\n    [22, 26.82, 19.66, 22, 0],\n    [22, 26.82, 19.66, 22, 0],\n    [22, 26.82, 19.66, 22, 0],\n    [22, 26.82, 19.66, 22, 0],\n    [22, 26.82, 19.66, 22, 0],\n    [22, 26.82, 19.66, 22, 0],\n    [22, 26.82, 19.66, 22, 0],\n    [22, 26.82, 19.66, 22, 0],\n    [22, 26.82, 19.66, 22, 0],\n    [22, 26.82, 19.66, 22, 0],\n    [22, 26.82, 19.66, 22, 0],\n    [22, 26.82, 19.66, 22, 0],\n    [22, 26.82, 19.66, 22, 0],\n    [22, 26.82, 19.66, 22, 0],\n    [22, 26.82, 19.66, 22, 0],\n    [22, 26.82, 19.66, 22, 0],\n    [22, 26.82, 19.66, 22, 0],\n    [22, 26.82, 19.66, 22, 0],\n    [22, 26.82, 19.66, 22, 0],\n    [22, 26.82, 19.66, 22, 0],\n    [22, 26.82, 19.66, 22, 0],\n    [22, 26.82, 19.66, 22, 0],\n    [22, 26.82, 19.66, 22, 0],\n    [22, 26.82, 19.66, 22, 0],\n    [22, 26.82, 19.66, 22, 0],\n    [22, 26.82, 19.66, 22, 0],\n    [22, 26.82, 19.66, 22, 0],\n    [22, 26.82, 19.66, 22, 0],\n    [22, 26.82, 19.66, 22, 0],\n    [22, 26.82, 19.66, 22, 0],\n    [22, 26.82, 19.66, 22, 0],\n    [22, 26.82, 19.66, 22, 0],\n    [22, 26.82, 19.66, 22, 0],\n    [22, 26.82, 19.66, 22, 0],\n    [22, 26.82, 19.66, 22, 0],\n    [22, 26.82, 19.66, 22, 0],\n    [22, 26.82, 19.66, 22, 0],\n    [22, 26.82, 19.66, 22, 0],\n    [22, 26.82, 19.66, 22, 0],\n    [22, 26.82, 19.66, 22, 0],\n    [22, 26.82, 19.66, 22, 0],\n    [22, 26.82, 19.66, 22, 0],\n    [22, 26.82, 19.66, 22, 0],\n    [22, 26.82, 19.66, 22, 0],\n    [22, 26.82, 19.66, 22, 0],\n    [22, 26.82, 19.66, 22, 0],\n    [22, 26.82, 19.66, 22, 0],\n    [22, 26.82, 19.66, 22, 0],\n    [22, 26.82, 19.66, 22, 0],\n    [22, 26.82, 19.66, 22, 0],\n    [22, 26.82, 19.66, 22, 0],\n    [22, 26.82, 19.66, 22, 0],\n    [22, 26.82, 19.66, 22, 0],\n    [22, 26.82, 19.66, 22, 0],\n    [22, 26.82, 19.66, 22, 0],\n    [22, 26.82, 19.66, 22, 0],\n    [22, 26.82, 19.66, 22, 0],\n    [22, 26.82, 19.66, 22, 0],\n    [22, 26.82, 19.66, 22, 0],\n    [22, 26.82, 19.66, 22, 0],\n    [22, 26.82, 19.66, 22, 0],\n    [22, 26.82, 19.66, 22, 0],\n    [22, 26.82, 19.66, 22, 0],\n    [22, 26.82, 19.66, 22, 0],\n    [22, 26.82, 19.66, 22, 0],\n    [22, 26.82, 19.66, 22, 0],\n    [22, 26.82, 19.66, 22, 0],\n    [22, 26.82, 19.66, 22, 0],\n    [22, 26.82, 19.66, 22, 0],\n    [22, 26.82, 19.66, 22, 0],\n    [22, 26.82, 19.66, 22, 0],\n    [22, 26.82, 19.66, 22, 0],\n    [22, 26.82, 19.66, 22, 0],\n    [22, 26.82, 19.66, 22, 0],\n    [22, 26.82, 19.66, 22, 0],\n    [22, 26.82, 19.66, 22, 0],\n    [22, 26.82, 19.66, 22, 0],\n    [22, 26.82, 19.66, 22, 0],\n    [22, 26.82, 19.66, 22, 0],\n    [22, 26.82, 19.66, 22, 0],\n    [22, 26.82, 19.66, 22, 0],\n    [22, 26.82, 19.66, 22, 0],\n    [22, 26.82, 19.66, 22, 0],\n    [22, 26.82, 19.66, 22, 0],\n    [22, 26.82, 19.66, 22, 0],\n    [22, 26.82, 19.66, 22, 0],\n    [22, 26.82, 19.66, 22, 0],\n    [22, 26.82, 19.66, 22, 0],\n    [22, 26.82, 19.66, 22, 0],\n    [22, 26.82, 19.66, 22, 0],\n    [22, 26.82, 19.66, 22, 0],\n    [22, 26.82, 19.66, 22, 0],\n    [22, 26.82, 19.66, 22, 0],\n    [22, 26.82, 19.66, 22, 0],\n    [22, 26.82, 19.66, 22, 0],\n    [22, 26.82, 19.66, 22, 0],\n    [22, 26.82, 19.66, 22, 0],\n    [22, 26.82, 19.66, 22, 0],\n    [22, 26.82, 19.66, 22, 0],\n    [22, 26.82, 19.66, 22, 0],\n    [22, 26.82, 19.66, 22, 0],\n    [22, 26.82, 19.66, 22, 0],\n    [22, 26.82, 19.66, 22, 0],\n    [22, 26.82, 19.66, 22, 0],\n    [22, 26.82, 19.66, 22, 0],\n    [22, 26.82, 19.66, 22, 0],\n    [22, 26.82, 19.66, 22, 0],\n    [22, 26.82, 19.66, 22, 0],\n    [22, 26.82, 19.66, 22, 0],\n    [22, 26.82, 19.66, 22, 0],\n    [22, 26.82, 19.66, 22, 0],\n    [22, 26.82, 19.66, 22, 0],\n    [22, 26.82, 19.66, 22, 0],\n    [22, 26.82, 19.66, 22, 0],\n    [22, 26.82, 19.66, 22, 0],\n    [22, 26.82, 19.66, 22, 0],\n    [22, 26.82, 19.66, 22, 0],\n    [22, 26.82, 19.66, 22, 0],\n    [22, 26.82, 19.66, 22, 0],\n    [22, 26.82, 19.66, 22, 0],\n    [22, 26.82, 19.66, 22, 0],\n    [22, 26.82, 19.66, 22, 0],\n    [22, 26.82, 19.66, 22, 0],\n    [22, 26.82, 19.66, 22, 0],\n    [22, 26.82, 19.66, 22, 0],\n    [22, 26.82, 19.66, 22, 0],\n    [22, 26.82, 19.66, 22, 0],\n    [22, 26.82, 19.66, 22, 0],\n    [22, 26.82, 19.66, 22, 0],\n    [22, 26.82, 19.66, 22, 0],\n    [22, 26.82, 19.66, 22, 0],\n    [22, 26.82, 19.66, 22, 0],\n    [22, 26.82, 19.66, 22, 0],\n    [22, 26.82, 19.66, 22, 0],\n    [22, 26.82, 19.66, 22, 0],\n    [22, 26.82, 19.66, 22, 0],\n    [22, 26.82, 19.66, 22, 0],\n    [22, 26.82, 19.66, 22, 0],\n    [22, 26.82, 19.66, 22, 0],\n    [22, 26.82, 19.66, 22, 0],\n    [22, 26.82, 19.66, 22, 0],\n    [22, 26.82, 19.66, 22, 0],\n    [22, "}
{"file": "dataset/ori_500/bar_51.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Sample data\ndata = [5375, 4190, 3543, 3216, 2915, 2548, 2343, 2158, 2060, 2008, 2008]\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(12.0, 8.0))\n\n# Plot the data\nplt.bar(range(len(data)), data)\n\n# Set labels and title\nplt.xlabel('Profession')\nplt.ylabel('Number of Videos')\nplt.title('Number of Videos by Profession')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_52.pdf", "response": "```python\nimport matplotlib.pyplot as plt  \nimport numpy as np  \n\n# Data for plotting  \ncategories = ['greeting', 'request', 'criticism', 'apology', 'persuasion', 'thanking', 'leave-taking']  \nsynthetic_data = [8, 31, 24, 7, 10, 10, 10]  \nhuman_authored_data = [16, 28, 11, 5, 15, 16, 9]  \n\n# Create a new figure with specified size  \nfig = plt.figure(figsize=(6.0, 6.0))  \n\n# Plot the data  \nplt.bar(categories, synthetic_data, color='blue', label='Synthetic data')  \nplt.bar(categories, human_authored_data, bottom=synthetic_data, color='red', label='Human-authored data')  \n\n# Set labels and title  \nplt.xlabel('Categories')  \nplt.ylabel('Percentage')  \nplt.title('Comparison of Synthetic and Human-Authored Data')  \nplt.legend()  \n\n# Show the plot  \nplt.show()\n```"}
{"file": "dataset/ori_500/bar_53.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ndata = {\n    'small': [0.25, 0.2],\n    'certain': [0.25, 0.2],\n    'fraction': [0.25, 0.2],\n    'limited': [0.25, 0.2],\n    'a': [0.25, 0.2],\n    'day': [0.25, 0.2],\n    'few': [0.25, 0.2],\n    'new': [0.25, 0.2],\n    'substantial': [0.25, 0.2],\n    'tiny': [0.25, 0.2],\n    'very': [0.25, 0.2],\n    'single': [0.25, 0.2],\n    'slight': [0.25, 0.2],\n    'moderate': [0.25, 0.2],\n    'handful': [0.25, 0.2]\n}\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(10.0, 8.0))\n\n# Plot the data\nfor word, values in data.items():\n    plt.bar(word, values, color='orange', alpha=0.5)\n    plt.bar(word, values, color='lightblue', alpha=0.5)\n\n# Set labels and title\nplt.xlabel('Word')\nplt.ylabel('Probability')\nplt.title('Context: The human body can tolerate only a')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_54.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nlabels = ['Convertible', 'Coupe', 'Truck', 'SUV', 'Sedan']\nvalues = [0.1, 0.3, 0.4, 0.5, 0.2]\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(6.0, 2.0))\n\n# Plot the data\nplt.bar(labels, values, color=['yellow', 'green', 'blue', 'blue', 'purple'])\n\n# Set title and labels\nplt.title('Probability of Improvement over VLM Image Encoder Baseline Returns')\nplt.xlabel('Probability of Improvement')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_55.pdf", "response": "```python\nimport matplotlib.pyplot as plt  \nimport numpy as np  \n\n# Sample data  \ndata = [2.1, 3.0, 3.5, 3.5, 6.0, 6.0, 6.6, 6.7, 7.0, 7.6]  \nlabels = ['Disapproval', 'Joy', 'Relief', 'Gratitude', 'Annoyance', 'Nervousness', 'Pride', 'Sadness', 'Unbothered', 'Amusement']  \n\n# Create a new figure  \nfig = plt.figure(figsize=(8.0, 8.0))  \n\n# Plot the data  \nplt.bar(labels, data, color='red')  \n\n# Set the title and labels  \nplt.title('Emotion Frequency')  \nplt.xlabel('Emotion')  \nplt.ylabel('Frequency (%)')  \n\n# Show the plot  \nplt.show()\n```"}
{"file": "dataset/ori_500/bar_56.pdf", "response": "```python\nimport matplotlib.pyplot as plt  \nimport numpy as np  \n\n# Sample data\ndata = [4000, 6000, 7000, 8000]\nlabels = ['Making Bricks', 'Carpenter', 'Baker', 'Crafting/Knitting']\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(12.0, 8.0))\n\n# Plot the data\nplt.bar(labels, data, color=['red', 'orange', 'yellow', 'green'])\n\n# Set labels and title\nplt.xlabel('Profession')\nplt.ylabel('Number of Videos')\nplt.title('Number of Videos by Profession')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_57.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Sample data\ndata = {\n    'GDP Growth': [37.4, 21.6, 19.8, 18.2, 17.4],\n    'Unemployment Rate': [37.4, 21.6, 19.8, 18.2, 17.4],\n    'Inflation Rate': [37.4, 21.6, 19.8, 18.2, 17.4],\n    'NASDAQ': [37.4, 21.6, 19.8, 18.2, 17.4],\n    'Exchange Rate': [37.4, 21.6, 19.8, 18.2, 17.4],\n    'Real Estate Prices': [37.4, 21.6, 19.8, 18.2, 17.4],\n    'Corporate Profits': [37.4, 21.6, 19.8, 18.2, 17.4]\n}\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(8.0, 5.0))\n\n# Plot the data\nfor key, values in data.items():\n    plt.bar(key, values, color='red')\n\n# Set labels and title\nplt.xlabel('Categories')\nplt.ylabel('Values')\nplt.title('Sample Data Plot')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_58.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Sample data\ndata = {\n    'New York': [50, 20, 10, 5, 3],\n    'Los Angeles': [40, 20, 10, 5, 3],\n    'Chicago': [30, 20, 10, 5, 3],\n    'Houston': [20, 20, 10, 5, 3],\n    'Phoenix': [10, 20, 10, 5, 3],\n    'Philadelphia': [5, 20, 10, 5, 3]\n}\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(10.0, 6.0))\n\n# Plot the data\nplt.bar(range(len(data)), list(data.values()), align='center')\nplt.xticks(range(len(data)), list(data.keys()))\n\n# Set labels and title\nplt.xlabel('Cities')\nplt.ylabel('Values')\nplt.title('Sample Bar Chart')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_59.pdf", "response": "import matplotlib.pyplot as plt import numpy as np fig = plt.figure(figsize=(10.0, 5.0)) ax = fig.add_subplot(111) data = [[80], [70], [60], [50], [40], [30], [20], [10], [0]] labels = ['External Class', 'Argument', 'Loop', 'Conditional Statement', 'Variable Declaration', 'Method Declaration', 'Parameter'] colors = ['red', 'green', 'blue', 'yellow', 'pink', 'orange', 'purple'] ax.bar(labels, data, color=colors) ax.set_title('Relative Difference in Machine vs. Human Focus on Semantic Categories') ax.set_xlabel('Semantic Category') ax.set_ylabel('Difference (%)') plt.show()"}
{"file": "dataset/ori_500/bar_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt  \n\nplt.figure(figsize=(8.0, 8.0))  \n\nemotions = ['Disappointment', 'Embarrassment', 'Oblivious', 'Delight', 'Excitement', 'Joy', 'Relief', 'Gratitude', 'Annoyance', 'Nervousness', 'Pride', 'Sadness', 'Unbored', 'Amusement']  \nvalues = [7, 6, 5, 4, 3, 2, 1, 0, -1, -2, -3, -4, -5, -6]  \n\nplt.bar(emotions, values, color='blue')  \n\nplt.xlabel('Emotion')  \nplt.ylabel('Frequency (%)')  \n\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_60.pdf", "response": "```python\nimport matplotlib.pyplot as plt  \nimport numpy as np  \n\n# Sample data\nlabels = ['FMLP-Rec', 'Bert4Rec', 'SASRec', 'CaseR', 'GRU4Rec']\nvalues = [-0.7, 4.8, -8.5, -15.9, 19.7]\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(10.0, 8.0))\n\n# Plot the data\nplt.bar(labels, values, color='red')\n\n# Set labels and title\nplt.xlabel('Yelp')\nplt.ylabel('%')\nplt.title('Bar Chart Example')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_61.pdf", "response": "import matplotlib.pyplot as plt fig = plt.figure(figsize=(8.0, 5.0)) ax = fig.add_subplot(111) ax.bar([1, 2, 3], [100, 200, 300], color='red') ax.set_title('Internet Penetration (%)') ax.set_ylabel('Percentage (%)') ax.set_xlabel('Categories') plt.show()"}
{"file": "dataset/ori_500/bar_62.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\ncategories = ['greeting', 'request', 'criticism', 'apology', 'persuasion', 'thanking', 'leave-taking']\nsynthetic_data = [12, 35, 28, 15, 18, 14, 16]\nhuman_authored_data = [18, 32, 15, 8, 20, 22, 12]\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Plot the data\nbars = ax.bar(categories, synthetic_data, color='blue', label='Synthetic data')\nax.bar(categories, human_authored_data, bottom=synthetic_data, color='orange', label='Human-authored data')\n\n# Set labels and title\nax.set_xlabel('Categories')\nax.set_ylabel('Percentage')\nax.set_title('Comparison of Categories')\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_63.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Sample data\ncategories = ['Attack on Titan', 'Game of Thrones', 'The Count of Monte Cristo', 'Demi-Gods and Semi-Devils', 'Notre-Dame de Paris']\ntime_0 = [0.4, 0.5, 0.3, 0.2, 0.6]\ntime_20 = [0.3, 0.4, 0.2, 0.1, 0.5]\ntime_40 = [0.2, 0.3, 0.1, 0.05, 0.4]\ntime_60 = [0.1, 0.2, 0.05, 0.05, 0.3]\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Plot the data\nax.bar(categories, time_0, color='blue', label='Time 0')\nax.bar(categories, time_20, bottom=time_0, color='cyan', label='Time 20')\nax.bar(categories, time_40, bottom=[x + y for x, y in zip(time_0, time_20)], color='lightblue', label='Time 40')\nax.bar(categories, time_60, bottom=[x + y + z for x, y, z in zip(time_0, time_20, time_40)], color='skyblue', label='Time 60')\n\n# Set labels and title\nax.set_xlabel('Categories')\nax.set_ylabel('Scores')\nax.set_title('Scores by Category Over Time')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_64.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Sample data\nregions = ['West', 'East', 'South', 'North']\nco2 = [40.44, 54.46, 92.15, 65.49]\npm = [11.59, 25.36, 32.84, 22.89]\nso2 = [17.38, 32.19, 48.23, 37.12]\nno2 = [39.63, 36.03, 92.15, 65.49]\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(10.0, 7.0))\n\n# Plot the data\nplt.plot(regions, co2, label='CO2 (ppm)')\nplt.plot(regions, pm, label='PM (\u00b5g/m\u00b3)')\nplt.plot(regions, so2, label='SO2 (\u00b5g/m\u00b3)')\nplt.plot(regions, no2, label='NO2 (\u00b5g/m\u00b3)')\n\n# Set labels and title\nplt.xlabel('Regions')\nplt.ylabel('Air Quality Metrics by Region')\nplt.title('Air Quality Metrics by Region')\n\n# Add a legend\nplt.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_65.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Sample data\ndata = {\n    'LLAMA-Default': [-2.2, -2.3, -3.3],\n    'LLAMA-HAG': [-2.2, -2.3, -3.3],\n    'Vicuna-Default': [-3.2, -2.2, -3.3],\n    'Vicuna-HAG': [-3.2, -2.2, -3.3]\n}\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(10.0, 6.0))\n\n# Plot the data\nfor key, values in data.items():\n    plt.plot(values, label=key)\n\n# Set labels and title\nplt.xlabel('Score')\nplt.ylabel('Constraint Word Count')\nplt.title('Scores by group and constraint word count')\n\n# Add a legend\nplt.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_66.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Sample data\ndata = {\n    'USA': [0.2, 0.3, 0.4, 0.5, 0.6],\n    'China': [0.3, 0.4, 0.5, 0.6, 0.7],\n    'Germany': [0.4, 0.5, 0.6, 0.7, 0.8],\n    'Brazil': [0.5, 0.6, 0.7, 0.8, 0.9]\n}\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(10.0, 6.0))\n\n# Plot the data\nfor country, values in data.items():\n    plt.plot(values, label=country)\n\n# Set labels and title\nplt.xlabel('Year')\nplt.ylabel('GDP Growth Rate (%)')\nplt.title('Negative GDP Growth Rates by Country and Year')\n\n# Add a legend\nplt.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_67.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Sample data\nmodels = ['GPT4V', 'OSCAR', 'LLaMA', 'BLIP2', 'BLIP1', 'Video-LLMA', 'Lavila']\npercentages = [82.5, 73.93, 31.79, 4.64, 4.64, 0.71, 0.0]\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(12.0, 8.0))\n\n# Plot the data\nplt.bar(models, percentages, color='blue')\n\n# Set labels and title\nplt.xlabel('Model')\nplt.ylabel('Percentage (%)')\nplt.title('Human Study')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_68.pdf", "response": "```python\nimport matplotlib.pyplot as plt  \nimport numpy as np  \n\n# Sample data\ndata = np.array([[50, 30, 70, 20, 30],\n                 [30, 20, 50, 20, 30],\n                 [70, 20, 30, 40, 30]])\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(10.0, 6.0))\n\n# Plot the data using barh function\nplt.barh(range(len(data)), data[0], color='blue', label='Cars')\nplt.barh(range(len(data)), data[1], left=data[0], color='cyan', label='Buses')\nplt.barh(range(len(data)), data[2], left=data[0] + data[1], color='lightblue', label='Bikes')\nplt.barh(range(len(data)), data[3], left=data[0] + data[1] + data[2], color='green', label='Pedestrians')\n\n# Set labels and title\nplt.xlabel('Number of accidents')\nplt.ylabel('Categories')\nplt.title('Stacked Bar Chart of Transportation Data')\n\n# Add a legend\nplt.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_69.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ndata = np.array([\n    [80, 60, 40, 20, 0],\n    [70, 50, 30, 10, 0],\n    [60, 40, 20, 0, 0],\n    [50, 30, 10, 0, 0],\n    [40, 20, 0, 0, 0],\n    [30, 10, 0, 0, 0]\n])\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(10.0, 7.0))\n\n# Plot the data using barh function\nplt.barh(np.arange(data.shape[0]), data[:, 0], color='orange')\nplt.barh(np.arange(data.shape[0]), data[:, 1], left=data[:, 0], color='red')\nplt.barh(np.arange(data.shape[0]), data[:, 2], left=data[:, 0] + data[:, 1], color='yellow')\nplt.barh(np.arange(data.shape[0]), data[:, 3], left=data[:, 0] + data[:, 1] + data[:, 2], color='pink')\nplt.barh(np.arange(data.shape[0]), data[:, 4], left=data[:, 0] + data[:, 1] + data[:, 2] + data[:, 3], color='lightblue')\n\n# Set labels and title\nplt.xlabel('Sales Units')\nplt.title('Enhanced Stacked Bar Chart with Textures and Annotated Values')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Sample data\ncategories = ['SEQ', 'REPLAY', 'MTL']\nprobing_fgt = [0.83, 0.6, 0.11]\nobserved_fgt = [0.944, 0.6, 0.00]\nfeature_embedding_distance = [0.83, 0.6, 0.00]\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(8.0, 6.0))\n\n# Plot the data\nplt.bar(categories, probing_fgt, color='green', label='Probing FGT')\nplt.bar(categories, observed_fgt, color='lightgreen', label='Observed FGT')\nplt.bar(categories, feature_embedding_distance, color='orange', label='Feature Embedding Distance')\n\n# Set labels and title\nplt.xlabel('Categories')\nplt.ylabel('Feature Embedding Distance (%)')\nplt.title('Feature Embedding Distance for Different Categories')\n\n# Add a legend\nplt.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_70.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Sample data\ndata = [\n    [10, 8, 12, 10, 6, 8],\n    [11, 5, 10, 10, 12, 15],\n    [10, 8, 12, 10, 6, 8],\n    [11, 5, 10, 10, 12, 15]\n]\n\n# Create a new figure\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Plot the data\nax.bar(range(len(data)), data[0], color='lightblue')\nax.bar(range(len(data)), data[1], bottom=data[0], color='lightgreen')\nax.bar(range(len(data)), data[2], bottom=[sum(x) for x in zip(data[0], data[1])], color='lightcoral')\nax.bar(range(len(data)), data[3], bottom=[sum(x) for x in zip(data[0], data[1], data[2])], color='lightskyblue')\n\n# Set labels and title\nax.set_xlabel('Human Annotator')\nax.set_ylabel('Scores')\nax.set_title('Human Labeling and Agreement Bias Checking')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_71.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Sample data\ndata = {\n    'coreutils': [100, 60, 50, 30, 20],\n    'gizip': [80, 60, 40, 20, 10],\n    'scp': [70, 50, 30, 10, 5],\n    'libq': [60, 40, 20, 10, 5],\n    'mcf': [50, 30, 10, 5, 2],\n    'omnet.': [40, 20, 10, 5, 2],\n    'perl.': [30, 10, 5, 2, 1]\n}\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(8.0, 4.0))\n\n# Plot the data\nfor key, values in data.items():\n    plt.plot(values, label=key, marker='o')\n\n# Set labels and title\nplt.xlabel('X-axis')\nplt.ylabel('Y-axis')\nplt.title('Sample Plot')\nplt.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_72.pdf", "response": "```python\nimport matplotlib.pyplot as plt  \nimport numpy as np  \n\n# Sample data\ndata = np.array([[3.5, 2.3, 4.4, 1.3, 0.7],\n                 [2.3, 1.3, 1.3, 0.7, 0.7]])\n\n# Create a new figure\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot the data\nax.bar(range(data.shape[0]), data[:, 0], color='blue', label='EN')\nax.bar(range(data.shape[0]), data[:, 1], bottom=data[:, 0], color='red', label='DE')\nax.bar(range(data.shape[0]), data[:, 2], bottom=data[:, 0] + data[:, 1], color='orange', label='FR')\nax.bar(range(data.shape[0]), data[:, 3], bottom=data[:, 0] + data[:, 1] + data[:, 2], color='yellow', label='IT')\nax.bar(range(data.shape[0]), data[:, 4], bottom=data[:, 0] + data[:, 1] + data[:, 2] + data[:, 3], color='green', label='ES')\n\n# Set labels and title\nax.set_xlabel('Model with Language')\nax.set_ylabel('Model Performance Improvement [%]')\nax.set_title('Model Performance Improvement by Language')\nax.set_xticks(range(data.shape[0]))\nax.set_xticklabels(['Bactrian-X EN', 'Lima-X DE', 'Bactrian-X FR', 'Lima-X IT', 'Bactrian-X ES'])\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_73.pdf", "response": "```python\nimport matplotlib.pyplot as plt  \nimport numpy as np  \n\n# Sample data\ndata = np.array([0.5, 1.5, 2.2, 1.0, 0.4, -0.8, -1.2])\n\n# Create a new figure\nfig = plt.figure(figsize=(10.0, 5.0))\n\n# Plot the data\nplt.plot(data, 'o-')\n\n# Set labels and title\nplt.xlabel('Fiscal Quarter')\nplt.ylabel('Index Change (%)')\nplt.title('Dow Jones Index vs Nasdaq Index')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_74.pdf", "response": "```python\nimport matplotlib.pyplot as plt  \nimport numpy as np  \n\n# Sample data\ndata = np.array([\n    [39.4, 35.18, 34.06],\n    [35.18, 32.84, 20.84],\n    [32.84, 20.84, 14.84],\n    [30.84, 14.84, 12.0],\n    [28.0, 14.0, 11.0],\n    [24.27, 11.0, 10.0],\n    [34.06, 34.06, 34.06],\n    [34.06, 34.06, 34.06],\n    [34.06, 34.06, 34.06],\n    [34.06, 34.06, 34.06],\n    [34.06, 34.06, 34.06],\n    [34.06, 34.06, 34.06],\n    [34.06, 34.06, 34.06],\n    [34.06, 34.06, 34.06],\n    [34.06, 34.06, 34.06],\n    [34.06, 34.06, 34.06],\n    [34.06, 34.06, 34.06],\n    [34.06, 34.06, 34.06],\n    [34.06, 34.06, 34.06],\n    [34.06, 34.06, 34.06],\n    [34.06, 34.06, 34.06],\n    [34.06, 34.06, 34.06],\n    [34.06, 34.06, 34.06],\n    [34.06, 34.06, 34.06],\n    [34.06, 34.06, 34.06],\n    [34.06, 34.06, 34.06],\n    [34.06, 34.06, 34.06],\n    [34.06, 34.06, 34.06],\n    [34.06, 34.06, 34.06],\n    [34.06, 34.06, 34.06],\n    [34.06, 34.06, 34.06],\n    [34.06, 34.06, 34.06],\n    [34.06, 34.06, 34.06],\n    [34.06, 34.06, 34.06],\n    [34.06, 34.06, 34.06],\n    [34.06, 34.06, 34.06],\n    [34.06, 34.06, 34.06],\n    [34.06, 34.06, 34.06],\n    [34.06, 34.06, 34.06],\n    [34.06, 34.06, 34.06],\n    [34.06, 34.06, 34.06],\n    [34.06, 34.06, 34.06],\n    [34.06, 34.06, 34.06],\n    [34.06, 34.06, 34.06],\n    [34.06, 34.06, 34.06],\n    [34.06, 34.06, 34.06],\n    [34.06, 34.06, 34.06],\n    [34.06, 34.06, 34.06],\n    [34.06, 34.06, 34.06],\n    [34.06, 34.06, 34.06],\n    [34.06, 34.06, 34.06],\n    [34.06, 34.06, 34.06],\n    [34.06, 34.06, 34.06],\n    [34.06, 34.06, 34.06],\n    [34.06, 34.06, 34.06],\n    [34.06, 34.06, 34.06],\n    [34.06, 34.06, 34.06],\n    [34.06, 34.06, 34.06],\n    [34.06, 34.06, 34.06],\n    [34.06, 34.06, 34.06],\n    [34.06, 34.06, 34.06],\n    [34.06, 34.06, 34.06],\n    [34.06, 34.06, 34.06],\n    [34.06, 34.06, 34.06],\n    [34.06, 34.06, 34.06],\n    [34.06, 34.06, 34.06],\n    [34.06, 34.06, 34.06],\n    [34.06, 34.06, 34.06],\n    [34.06, 34.06, 34.06],\n    [34.06, 34.06, 34.06],\n    [34.06, 34.06, 34.06],\n    [34.06, 34.06, 34.06],\n    [34.06, 34.06, 34.06],\n    [34.06, 34.06, 34.06],\n    [34.06, 34.06, 34.06],\n    [34.06, 34.06, 34.06],\n    [34.06, 34.06, 34.06],\n    [34.06, 34.06, 34.06],\n    [34.06, 34.06, 34.06],\n    [34.06, 34.06, 34.06],\n    [34.06, 34.06, 34.06],\n    [34.06, 34.06, 34.06],\n    [34.06, 34.06, 34.06],\n    [34.06, 34.06, 34.06],\n    [34.06, 34.06, 34.06],\n    [34.06, 34.06, 34.06],\n    [34.06, 34.06, 34.06],\n    [34.06, 34.06, 34.06],\n    [34.06, 34.06, 34.06],\n    [34.06, 34.06, 34.06],\n    [34.06, 34.06, 34.06],\n    [34.06, 34.06, 34.06],\n    [34.06, 34.06, 34.06],\n    [34.06, 34.06, 34.06],\n    [34.06, 34.06, 34.06],\n    [34.06, 34.06, 34.06],\n    [34.06, 34.06, 34.06],\n    [34.06, 34.06, 34.06],\n    [34.06, 34.06, 34.06],\n    [34.06, 34.06, 34.06],\n    [34.06, 34.06, 34.06],\n    [34.06, 34.06, 34.06],\n    [34.06, 34.06, 34.06],\n    [34.06, 34.06, 34.06],\n    [34.06, 34.06, 34.06],\n    [34.06, 34.06, 34.06],\n    [34.06, 34.06, 34.06],\n    [34.06, 34.06, 34.06],\n    [34.06, 34.06, 34.06],\n    [34.06, 34.06, 34.06],\n    [34.06, 34.06, 34.06],\n    [34.06, 34.06, 34.06],\n    [34.06, 34.06, 34.06],\n    [34.06, 34.06, 34.06],\n    [34.06, 34.06, 34.06],\n    [34.06, 34.06, 34.06],\n    [34.06, 34.06, 34.06],\n    [34.06, 34.06, 34.06],\n    [34.06, 34.06, 34.06],\n    [34.06, 34.06, 34.06],\n    [34.06, 34.06, 34.06],\n    [34.06, 34.06, 34.06],\n    [34.06, 34.06, 34.06],\n    [34.06, 34.06, 34.06],\n    [34.06, 34.06, 34.06],\n    [34.06, 34.06, 34.06],\n    [34.06, 34.06, 34.06],\n    [34.06, 34.06, 34.06],\n    [34.06, 34.06, 34.06],\n    [34.06, 34.06, 34.06],\n    [34.06, 34.06, 34.06],\n    [34.06, 34.06, 34.06],\n    [34.06, 34.06, 34.06],\n    [34.06, 34.06, 34.06],\n    [34.06, 34.06, 34.06],\n    [34.06, 34.06, 34.06],\n    [34.06, 34.06, 34.06],\n    [34.06, 34.06, 34.06],\n    [34.06, 34.06, 34.06],\n    [34.06, 34.06, 34.06],\n    [34.06, 34.06, 34.06],\n    [34.06, 34.06, 34.06],\n    [34.06, 34.06, 34.06],\n    [34.06, 34.06, 34.06],\n    [34.06, 34.06, 34.06],\n    [34.06, 34.06, 34.06],\n    [34.06, 34.06, 34.06],\n    [34.06, 34.06, 34.06],\n    [34.06, 34.06, 34.06],\n    [34.06, 34.06, 34.06],\n    [34.06, 34.06, 34.06],\n    [34.06, 34.06, 34.06],\n    [34.06, 34.06, 34.06],\n    [34.06, 34.06, 34.06],\n    [34.06, 34.06, 34.06],\n    [34.06, 34.06, 34.06],\n    [34.06, 34.06, 34.06],\n    [34.06, 34.06, 34.06],\n    [34.06, 34.06, 34.06],\n    [34.06, 34.06, 34.06],\n    [34.06, 34.06, 34.06],\n    [34.06, 34.06, 34.06],\n    [34.06, 34.06, 34.06],\n    [34.06, 34.06, 34.06],\n    [34.06, 34.06, 34.06],\n    [34.06, 34.06, 34.06],\n    [34.06, 34.06, 34.06],\n    [34.06, 34.06, 34.06],\n    [34.06, 34.06, 34.06],\n    [34.06, 34.06, 34.06],\n    [34.06, 34.06, 34.06],\n    [34.06, 34.06, 34.06],\n    [34.06, 34.06, 34.06],\n    [34.06, 34.06, 34.06],\n    [34.06, 34.06, 34.06],\n    [34.06, 34.06, 34.06],\n    [34.06, 34.06, 34.06],\n    [34.06, 34.06, 34.06],\n    [34.06, 34.06, 34.06],\n    [34.06, 34.06, 34.06],\n    [34.06, 34.06, 34.06],\n    [34.06, 34.06, 34.06],\n    [34.06, 34.06, 34.06],\n    [34.06, 34.06, 34.06],\n    [34.06, 34.06, 34.06],\n    [34.06, 3"}
{"file": "dataset/ori_500/bar_75.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ntrue_recall = [46.3, 57.9, 53.8, 43.7]\nmisleading_recall = [30.1, 34, 20, 19.4]\n\n# Create a new figure\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Plot the data\nax.bar(range(len(true_recall)), true_recall, color='darkblue', label='Truthful Recall')\nax.bar(range(len(misleading_recall)), misleading_recall, color='pink', label='Misleading Recall')\n\n# Set labels and title\nax.set_xlabel('Misleading:Truthful = 2:0')\nax.set_ylabel('Recall')\nax.set_title('Truthful:Misleading = 2:0')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_76.pdf", "response": "```python\nimport matplotlib.pyplot as plt  \nimport numpy as np  \n\n# Sample data\ndata = np.array([\n    [-1200, -1400],\n    [-1300, -1500],\n    [-1400, -1600],\n    [-1500, -1700]\n])\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(10.0, 6.0))\n\n# Plot the data\nplt.imshow(data, cmap='viridis', interpolation='nearest')\n\n# Set labels and title\nplt.xlabel('Industry Sectors')\nplt.ylabel('Pollution Emissions (thousands of metric tons)')\nplt.title('Environmental Impact by Sector')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_77.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for plotting\ncities = ['Beijing', 'Shanghai', 'Guangzhou', 'Shenzhen', 'Chengdu']\ntemperatures = [12, 13, 17, 22, 19]\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(8.0, 4.0))\n\n# Plot the data\nplt.bar(cities, temperatures, color='blue')\n\n# Set labels and title\nplt.xlabel('City')\nplt.ylabel('Average Temperature (\u00b0C)')\nplt.title('Average City Temperatures')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_78.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Sample data\ndata = {\n    'Region 1': [200, 180, 160, 140],\n    'Region 2': [190, 170, 150, 130],\n    'Region 3': [180, 160, 140, 120],\n    'Region 4': [170, 150, 130, 110]\n}\n\n# Create a new figure\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Plot the data\nax.bar(range(len(data['Region 1'])), data['Region 1'], color='red', label='2020 Emissions')\nax.bar(range(len(data['Region 2'])), data['Region 2'], color='blue', label='2021 Emissions')\n\n# Set labels and title\nax.set_xlabel('Year')\nax.set_ylabel('Emissions')\nax.set_title('Annual Pollution Emission Reductions')\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_79.pdf", "response": "```python\nimport matplotlib.pyplot as plt  \nimport numpy as np  \n\n# Sample data\ndata = [\n    [26.0, 13.0, 10.0, 17.0, 10.0, 26.0],\n    [32.0, 10.0, 22.0, 15.0, 29.0, 35.0],\n    [10.0, 10.0, 10.0, 10.0, 10.0, 26.0],\n    [37.0, 12.0, 32.0, 15.0, 11.0, 32.0],\n    [19.0, 15.0, 15.0, 13.0, 9.0, 40.0]\n]\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(10.0, 6.0))\n\n# Plot the data\nplt.bar(range(len(data)), data[0], color='lightblue', label='Strongly disagree')\nplt.bar(range(len(data)), data[1], bottom=data[0], color='lightgreen', label='Disagree')\nplt.bar(range(len(data)), data[2], bottom=[sum(x) for x in zip(data[0], data[1])], color='orange', label='Neither agree nor disagree')\nplt.bar(range(len(data)), data[3], bottom=[sum(x) for x in zip(data[0], data[1], data[2])], color='pink', label='Strongly agree')\n\n# Set labels and title\nplt.xlabel('Questions')\nplt.ylabel('Percentage')\nplt.title('Question Responses')\nplt.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt  \nimport numpy as np  \n\n# Sample data\ndata = [0.95, 0.85, 0.75, 0.65, 0.55, 0.45, 0.35, 0.25, 0.15, 0.05]\n\n# Create a new figure\nfig = plt.figure(figsize=(10.0, 6.0))\n\n# Plot the data\nplt.plot(data, color='blue')\n\n# Set labels and title\nplt.xlabel('Top-10 super families in training dataset')\nplt.ylabel('Accuracy')\nplt.title('Model Accuracy')\n\n# Add a horizontal line at y=0.5\nplt.axhline(y=0.5, color='red', linestyle='--')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_80.pdf", "response": "```python\nimport matplotlib.pyplot as plt  \nimport numpy as np  \n\n# Sample data\ndata = np.array([[0.2, 0.3, 0.4], [0.5, 0.6, 0.7], [0.8, 0.9, 1.0]])\n\n# Create a new figure\nfig = plt.figure(figsize=(10.0, 5.0))\n\n# Plot the data\nplt.plot(data)\n\n# Set labels and title\nplt.xlabel('Num of Constraint Words')\nplt.ylabel('Score')\nplt.title('Taboo')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_81.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for plotting\ndata = [\n    [46.3, 56.9, 34, 53.8, 40, 19.4, 27],\n    [30.1, 34, 34, 43.7, 20, 19.4, 20]\n]\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(8.0, 4.0))\n\n# Plot the data\nplt.bar(range(len(data[0])), data[0], color='blue', label='CaA Recall')\nplt.bar(range(len(data[0])), data[1], color='green', label='CaB Recall')\n\n# Set labels and title\nplt.xlabel('Metrics')\nplt.ylabel('Recall')\nplt.title('Truthful: Misleading Recall = 2:0')\n\n# Add a legend\nplt.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_82.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for plotting\ndata = {\n    'Convertible': [25],\n    'Coupe': [20],\n    'SUV': [25],\n    'Sedan': [15],\n    'Coupe New': [10],\n    'SUV New': [15],\n    'Sedan New': [10]\n}\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(6.0, 6.0))\n\n# Plot the data\nplt.bar(data.keys(), data.values())\n\n# Set labels and title\nplt.xlabel('Type')\nplt.ylabel('Probability of Improvement')\nplt.title('Probability of Improvement over VLM Image Encoder Baseline Returns')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_83.pdf", "response": "```python\nimport matplotlib.pyplot as plt  \nimport numpy as np  \n\n# Sample data\ndata = [7.6, 7.1, 7.1, 7.1, 7.1, 7.1, 7.1]\nlabels = ['Disapproval', 'Joy', 'Relief', 'Gratitude', 'Annoyance', 'Nervousness', 'Pride', 'Sadness', 'Unbothered', 'Amusement']\n\n# Create a new figure\nfig, ax = plt.subplots(figsize=(10.0, 4.0))\n\n# Plot the data\nax.bar(labels, data, color='red')\n\n# Set labels and title\nax.set_xlabel('Emotion')\nax.set_ylabel('Frequency Metric 1 (%)')\nax.set_title('Emotion vs Frequency Metric 1')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_84.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Sample data\ndata = {\n    'Attack on Titan': [0.3, 0.4],\n    'Game of Thrones': [0.2, 0.5],\n    'The Count of Monte Cristo': [0.3, 0.4],\n    'Demi-Gods and Semi-Devils': [0.3, 0.4],\n    'Notre-Dame de Paris': [0.4, 0.6]\n}\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(10.0, 6.0))\n\n# Plot the data\nfor label, values in data.items():\n    plt.barh([label], values, color='blue')\n\n# Set labels and title\nplt.xlabel('Score')\nplt.title('Scores at Different Times')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_85.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\ndata = {\n    'Japan': [1625, 1473, 1473, 1473],\n    'Australia': [1625, 1473, 1473, 1473],\n    'Canada': [1625, 1473, 1473, 1473],\n    'Germany': [1625, 1473, 1473, 1473],\n    'Italy': [1625, 1473, 1473, 1473],\n    'France': [1625, 1473, 1473, 1473],\n    'UK': [1625, 1473, 1473, 1473],\n    'USA': [1625, 1473, 1473, 1473]\n}\n\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\nax.bar(range(len(data)), data['Japan'], color='red', label='Total Energy Consumption (10^2 PJ)')\nax.bar(range(len(data)), data['Australia'], bottom=data['Japan'], color='red')\nax.bar(range(len(data)), data['Canada'], bottom=[sum(x) for x in zip(data['Japan'], data['Australia'])], color='red')\nax.bar(range(len(data)), data['Germany'], bottom=[sum(x) for x in zip(data['Japan'], data['Australia'], data['Canada'])], color='red')\nax.bar(range(len(data)), data['Italy'], bottom=[sum(x) for x in zip(data['Japan'], data['Australia'], data['Canada'], data['Germany'])], color='red')\nax.bar(range(len(data)), data['France'], bottom=[sum(x) for x in zip(data['Japan'], data['Australia'], data['Canada'], data['Germany'], data['Italy'])], color='red')\nax.bar(range(len(data)), data['UK'], bottom=[sum(x) for x in zip(data['Japan'], data['Australia'], data['Canada'], data['Germany'], data['Italy'], data['France'])], color='red')\nax.bar(range(len(data)), data['USA'], bottom=[sum(x) for x in zip(data['Japan'], data['Australia'], data['Canada'], data['Germany'], data['Italy'], data['France'], data['UK'])], color='red')\n\nax.set_xlabel('Country')\nax.set_ylabel('Energy Consumption')\nax.set_title('Energy Consumption by Country')\nax.legend()\n\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_86.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ncategories = ['leave-taking', 'thanking', 'persuasion', 'apology', 'criticism', 'request', 'greeting']\nsynthetic_data = [10, 10, 10, 7, 24, 31, 8]\nhuman_authored_data = [9, 16, 15, 5, 11, 28, 16]\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot the data\nbars = ax.bar(categories, synthetic_data, color='blue')\nax.bar(categories, human_authored_data, bottom=synthetic_data, color='green')\n\n# Set labels and title\nax.set_xlabel('Categories')\nax.set_ylabel('Percentage')\nax.set_title('Original vs New Data')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_87.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ndata = {\n    'Beauty': [-5, -5, 0, 6, 8, 10],\n    'MovieLens-1M': [0, 0, 0, 3.0, 5.1]\n}\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Plot the data\nax.bar(range(len(data['Beauty'])), data['Beauty'], color='blue', label='Beauty')\nax.bar(range(len(data['MovieLens-1M'])), data['MovieLens-1M'], color='red', label='MovieLens-1M')\n\n# Set labels and title\nax.set_xlabel('Categories')\nax.set_ylabel('Values')\nax.set_title('Sample Data Plot')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_88.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Sample data\ndata = {\n    'Vicuna-HAG': [-3.2, -3.3, -3.2],\n    'Vicuna-Default': [-3.3, -2.2, -2.3],\n    'LLAMA-HAG': [-3.2, -2.3, -2.2],\n    'LLAMA-Default': [-3.3, -2.2, -2.3]\n}\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Plot the data\nfor key, values in data.items():\n    ax.bar(range(len(values)), values, label=key)\n\n# Set labels and title\nax.set_xlabel('Score')\nax.set_ylabel('Constraint Word Count')\nax.set_title('Scores by group and constraint word count')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_89.pdf", "response": "```python\nimport matplotlib.pyplot as plt  \nimport numpy as np  \n\n# Sample data\ndata = np.array([\n    [0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75],\n    [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5],\n    [0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25]\n])\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(10.0, 6.0))\n\n# Plot the data\nplt.plot(data[0], label='Accuracy')\nplt.plot(data[1], label='Precision')\nplt.plot(data[2], label='Recall')\n\n# Set labels and title\nplt.xlabel('Top-10 super families in training dataset')\nplt.ylabel('Scores')\nplt.title('Scores for Different Metrics')\n\n# Add a legend\nplt.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Sample data\ndata = {\n    'Type': [45, 30, 20, 10],\n    'Span': [50, 35, 25, 15],\n    'T&S': [40, 30, 20, 10],\n    'Spurious': [30, 20, 10, 5],\n    'Total': [70, 50, 30, 15]\n}\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(9.0, 6.0))\n\n# Plot the data\nplt.plot(data['Type'], label='Manual Mapping')\nplt.plot(data['Span'], label='LLM-revision w/CoT')\nplt.plot(data['T&S'], label='LLM-revision')\nplt.plot(data['Spurious'], label='VerifNER')\nplt.plot(data['Total'], label='Total')\n\n# Set labels and title\nplt.xlabel('Categories')\nplt.ylabel('Error correction rate (%)')\nplt.title('GENIA')\n\n# Add a legend\nplt.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_90.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Sample data\nmodels = ['GPT4V', 'OSCaR', 'LLaVA', 'BLIP2', 'BLIP1', 'Video-LLMA', 'Lavila']\nscores_a = [82.5, 73.93, 31.79, 4.64, 4.64, 0.71, 0.0]\nscores_b = [15.0, 10.0, 5.0, 10.0, 5.0, 10.0, 15.0]\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(12.0, 8.0))\n\n# Plot the data\nplt.bar(models, scores_a, color='red', label='Score A')\nplt.bar(models, scores_b, bottom=scores_a, color='blue', label='Score B')\n\n# Set labels and title\nplt.xlabel('Model')\nplt.ylabel('Score (%)')\nplt.title('Human Study')\n\n# Add a legend\nplt.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_91.pdf", "response": "```python\nimport matplotlib.pyplot as plt  \nimport numpy as np  \n\n# Sample data\ndata = np.array([\n    [0.78, 0.82, 0.80],\n    [0.76, 0.80, 0.80],\n    [0.75, 0.78, 0.80]\n])\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(10.0, 5.0))\n\n# Plot the data\nplt.bar(range(3), data[0], color='blue', label='Democratic')\nplt.bar(range(3), data[1], bottom=data[0], color='orange', label='Mixed')\nplt.bar(range(3), data[2], bottom=data[0] + data[1], color='red', label='Republican')\n\n# Set labels and title\nplt.xlabel('Pheme')\nplt.ylabel('Macro F1-score')\nplt.title('Pheme vs Macro F1-score')\nplt.xticks(range(3), ['GCN', 'RvNN', 'Hyphen'])\nplt.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_92.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Sample data\ndata = {\n    'human': {'O1': [500, 700, 800], 'T1': [400, 600, 700], 'P1': [300, 500, 600]},\n    'gpt4': {'O1': [600, 800, 900], 'T1': [500, 700, 800], 'P1': [400, 600, 700]},\n    'gpt4-cot': {'O1': [700, 900, 1000], 'T1': [600, 800, 900], 'P1': [500, 700, 800]}\n}\n\n# Create a new figure\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data\nfor role, values in data.items():\n    for key, value in values.items():\n        ax.bar(role, value[0], color='lightblue', label=key if role == 'human' else None)\n        ax.bar(role, value[1], bottom=value[0], color='orange', label=None)\n        ax.bar(role, value[2], bottom=value[0] + value[1], color='green', label=None)\n\n# Set labels and title\nax.set_xlabel('Role')\nax.set_ylabel('Count')\nax.set_title('Resonance Preference Plot for rich context')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_93.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for plotting\neffort_data = [20.4, 29.6, 20.4, 20.4, 9.3]\nbrainwave_data = [23.8, 14.3, 16.7, 38.1, 7.1]\ncategories = ['Very Low', 'Low', 'Neutral', 'High', 'Very High']\neffort_labels = ['Effort', 'Effort', 'Effort', 'Effort', 'Effort']\nbrainwave_labels = ['Brainwave', 'Brainwave', 'Brainwave', 'Brainwave', 'Brainwave']\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(6.0, 3.0))\n\n# Plot effort data\nplt.bar(categories, effort_data, color='red', label=effort_labels[0])\nplt.bar(categories, effort_data, bottom=effort_data, color='orange', label=effort_labels[1])\nplt.bar(categories, effort_data, bottom=[sum(x) for x in zip(effort_data, effort_data)], color='yellow', label=effort_labels[2])\nplt.bar(categories, effort_data, bottom=[sum(x) for x in zip(effort_data, effort_data, effort_data)], color='green', label=effort_labels[3])\nplt.bar(categories, effort_data, bottom=[sum(x) for x in zip(effort_data, effort_data, effort_data, effort_data)], color='darkgreen', label=effort_labels[4])\n\n# Plot brainwave data\nplt.bar(categories, brainwave_data, color='red', label=brainwave_labels[0], bottom=[sum(x) for x in zip(effort_data, effort_data, effort_data, effort_data)])\nplt.bar(categories, brainwave_data, bottom=[sum(x) for x in zip(effort_data, effort_data, effort_data, effort_data, brainwave_data)], color='orange', label=brainwave_labels[1])\nplt.bar(categories, brainwave_data, bottom=[sum(x) for x in zip(effort_data, effort_data, effort_data, effort_data, brainwave_data, brainwave_data)], color='yellow', label=brainwave_labels[2])\nplt.bar(categories, brainwave_data, bottom=[sum(x) for x in zip(effort_data, effort_data, effort_data, effort_data, brainwave_data, brainwave_data, brainwave_data)], color='green', label=brainwave_labels[3])\nplt.bar(categories, brainwave_data, bottom=[sum(x) for x in zip(effort_data, effort_data, effort_data, effort_data, brainwave_data, brainwave_data, brainwave_data, brainwave_data)], color='darkgreen', label=brainwave_labels[4])\n\n# Set labels and title\nplt.xlabel('Categories')\nplt.ylabel('Percentage')\nplt.title('Eye Movement')\n\n# Add a legend\nplt.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_94.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.array([0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2.0])\ny_ours = np.random.rand(15) * 100\ny_saliency = np.random.rand(15) * 100\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(10.0, 6.0))\n\n# Plot the data\nplt.plot(x, y_ours, 'r', label='Ours')\nplt.plot(x, y_saliency, 'b', label='Saliency-based Sampling')\n\n# Set labels and title\nplt.xlabel('Brightness')\nplt.ylabel('Rate of Gain Change[%]')\nplt.title('Rate of Gain Change vs Brightness')\n\n# Add a legend\nplt.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_95.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ndata = np.array([\n    [3.5, 2.3, 2.0, 4.4],\n    [3.4, 2.0, 1.3],\n    [3.4, 2.0, 3.4],\n    [3.3, 2.0, -3.3],\n    [-2.7]\n])\n\n# Create a new figure\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot the data\nax.plot(data.T)\n\n# Set labels and title\nax.set_xlabel('Model with Language')\nax.set_ylabel('Model Performance Improvement by Language')\nax.set_title('Model Performance Improvement by Language')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_96.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Sample data\ndata = {\n    'Random': [66.3, 61.9, 53.8, 49.3, 45.7, 41.6],\n    'Ours': [10.1, 13.6, 13.7, 36.3, 41.0, 31.5],\n    'SOTA': [0, 0, 0, 0, 0, 0]\n}\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(8.0, 8.0))\n\n# Plot the data\nplt.bar(range(len(data['Random'])), data['Random'], color='blue', label='Random')\nplt.bar(range(len(data['Ours'])), data['Ours'], color='red', label='Ours')\nplt.bar(range(len(data['SOTA'])), data['SOTA'], color='green', label='SOTA')\n\n# Set labels and title\nplt.xlabel('Misleading')\nplt.ylabel('Score')\nplt.title('Truthful: Misleading = 2:0')\n\n# Add a legend\nplt.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_97.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ndata = [\n    [50, 40, 30, 20, 10],\n    [60, 50, 40, 30, 20],\n    [55, 45, 35, 25, 15],\n    [65, 55, 45, 35, 25]\n]\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(10.0, 8.0))\n\n# Plot the data\nfor i in range(len(data)):\n    plt.bar(range(1, len(data[i]) + 1), data[i], label=f'Human Labeling and Agreement Bias Checking {i+1}')\n\n# Set labels and title\nplt.xlabel('Human Annotator')\nplt.ylabel('Scores')\nplt.title('Human Labeling and Agreement Bias Checking 1')\n\n# Add a legend\nplt.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_98.pdf", "response": "```python\nimport matplotlib.pyplot as plt  \nimport numpy as np  \n\n# Sample data\ndata = np.array([[54.9, 71.5, 79.2], [38.3, 71.5, 79.2], [60.3, 60.3, 60.3], [54.5, 54.5, 54.5], [56.8, 56.8, 56.8], [92.6, 92.6, 92.6], [64.6, 64.6, 64.6], [89.2, 89.2, 89.2], [83.3, 83.3, 83.3]])\nlabels = ['Model A', 'Model B', 'Model C', 'Model D', 'Model E', 'Model F', 'Model G', 'Model H', 'Model I']\n\n# Create a new figure\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot the data\nfor i in range(data.shape[1]):\n    ax.bar(labels, data[:, i], color='tab:blue' if i == 0 else 'tab:orange')\n\n# Set labels and title\nax.set_xlabel('Models')\nax.set_ylabel('Scores')\nax.set_title('Performance Comparison by Model')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_99.pdf", "response": "```python\nimport matplotlib.pyplot as plt  \nimport numpy as np  \n\n# Sample data\ndata = {\n    'Traffic Flow': [150.0, 180.0, 75.0, 90.0, 80.0],\n    'Accident Rate': [2.0, 2.0, 2.0, 1.5, 2.0],\n    'Public Transport Usage': [60.0, 55.0, 70.0, 65.0, 72.0],\n    'Road Conditions': [70.0, 70.0, 70.0, 70.0, 70.0],\n    'Public Satisfaction': [80.0, 80.0, 80.0, 80.0, 80.0]\n}\n\n# Create a new figure\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Plot the data\nfor key, values in data.items():\n    ax.bar(key, values, color='green')\n\n# Set labels and title\nax.set_xlabel('Metrics')\nax.set_ylabel('Values')\nax.set_title('Dataset 1')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt  \nimport numpy as np  \n\n# Sample data\ndata = np.random.rand(12, 9)\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(10.0, 8.0))\n\n# Plot the data\nplt.imshow(data, cmap='viridis')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ndata = {\n    'Gaming Duration': [25, 35, 45, 55],\n    'Exercise Duration': [20, 30, 40, 50],\n    'Reading Duration': [22, 32, 42, 52],\n    'Music Playtime': [21, 31, 41, 51]\n}\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(9.0, 5.0))\n\n# Plot each dataset\nfor key, values in data.items():\n    plt.scatter(range(len(values)), values, label=key)\n\n# Set labels and title\nplt.xlabel('Activity')\nplt.ylabel('Duration (minutes)')\nplt.title('Daily Activity Durations')\n\n# Add a legend\nplt.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt  \nimport numpy as np  \n\n# Sample data\nbleu_scores = [18.5, 19.2]\nbelleu_scores = [17.8, 18.3]\n\n# Create a new figure\nfig = plt.figure(figsize=(6.0, 4.0))\n\n# Plot BLEU scores\nplt.plot(bleu_scores, label='BLEU', marker='o')\n\n# Plot BELU scores\nplt.plot(belleu_scores, label='BELU', marker='o')\n\n# Set labels and title\nplt.xlabel('Model')\nplt.ylabel('Score')\nplt.title('Comparison of BLEU and BELU Scores')\nplt.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt  \nimport numpy as np  \n\n# Sample data\ndata = {\n    'AlphaBeta': [52.3, 49.1, 47.8, 46.5],\n    'z+': [51.2, 48.9, 47.6, 46.3],\n    'Gamma(\u03b3=0.05)': [50.1, 47.8, 46.5, 45.2],\n    'Gamma(\u03b3=0.1)': [49.0, 46.7, 45.4, 44.1]\n}\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(8.0, 6.0))\n\n# Plot the data\nfor key, values in data.items():\n    plt.plot(values, label=key)\n\n# Set labels and title\nplt.xlabel('Gamma')\nplt.ylabel('(t) \u0394AF')\nplt.title('Plot of Data')\n\n# Add a legend\nplt.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt  \nimport numpy as np  \n\n# Sample data\ndata = {\n    'SQL-Only': [0.875, 0.875],\n    'PoT': [0.875, 0.875],\n    'IC-LP': [0.875, 0.875],\n    'DAIL': [0.875, 0.875],\n    'IC-LP+PoT': [0.875, 0.875]\n}\n\n# Create a new figure\nfig, ax = plt.subplots(figsize=(6.0, 5.0))\n\n# Plot the data\nfor label, values in data.items():\n    ax.plot(values, label=label)\n\n# Set labels and title\nax.set_xlabel('Model')\nax.set_ylabel('Execution Accuracy')\nax.set_title('Execution Accuracy of Different Models')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ndata = {\n    'DENSE (ref)': [0.88, 0.87, 0.83],\n    'Joint Multimodal Framework (ours)': [6.91, 9.33, 9.00],\n    'Cine': [0.88, 0.87, 0.83]\n}\n\n# Create a new figure\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Plot the data\nfor key, values in data.items():\n    ax.boxplot(values, positions=[np.arange(len(values))], labels=[key])\n\n# Set labels and title\nax.set_xlabel('Region Classification Accuracy')\nax.set_ylabel('Slice Mean Error (ms)')\nax.set_title('Region Classification Accuracy')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt  \nimport numpy as np  \n\n# Sample data\ndata = {\n    'w/o att': [3.2, 4.1, 4.7],\n    'w/o DP': [3.9, 4.6, 4.8],\n    '1xQ': [4.1, 4.2, 4.3],\n    '20xQ': [4.4, 4.5, 4.6]\n}\n\n# Create a new figure\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Plot the data\nfor key, values in data.items():\n    ax.boxplot(values, positions=[list(data.keys()).index(key)], widths=0.6)\n\n# Set labels and title\nax.set_xlabel('Dataset')\nax.set_ylabel('Z-Score')\nax.set_title('Boxplot of Z-Scores')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_16.pdf", "response": "import matplotlib.pyplot as plt import numpy as np fig = plt.figure(figsize=(5.0, 5.0)) ax = fig.add_subplot(111) data = [[2.3], [2.4], [2.5], [2.6]] labels = ['REM', 'No POP', 'Separate M emb.', '4 x 4 tokenizer', 'No latent space C', 'C w/o action inputs'] colors = ['blue', 'green', 'orange', 'red', 'purple', 'brown'] for i, d in enumerate(data): ax.barh(labels[i], d[0], color=colors[i]) plt.show()"}
{"file": "dataset/ori_500/box_17.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ndata = np.random.rand(10, 10) * 100\nx_labels = ['Run 1', 'Run 2', 'Run 3', 'Run 4', 'Run 5', 'Run 6', 'Run 7', 'Run 8', 'Run 9', 'Run 10']\n\n# Create a new figure\nfig, ax = plt.subplots(figsize=(8.0, 4.0))\n\n# Plot the data\nax.boxplot(data)\n\n# Set labels\nax.set_xticklabels(x_labels)\nax.set_ylabel('Value')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_18.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ndata = {\n    'AR': [0.8, 0.9],\n    'LSTMAlpha': [0.7, 0.8],\n    'LSTMBeta': [0.6, 0.7],\n    'AE': [0.5, 0.6],\n    'EncDecAD': [0.4, 0.5],\n    'SRCNN': [0.3, 0.4],\n    'AnomalyTransformer': [0.2, 0.3],\n    'TimesNet': [0.1, 0.2],\n    'Donut': [0.05, 0.1],\n    'TFAD': [0.02, 0.03]\n}\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Plot the data\nfor key, values in data.items():\n    ax.bar(key, values, color='blue')\n\n# Set labels and title\nax.set_xlabel('One by One')\nax.set_ylabel('All in One')\nax.set_title('Comparison of Models')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_19.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ndata = {\n    'Bert Base': [0.85, 0.92, 0.78, 0.65],\n    'MacBERT': [0.88, 0.91, 0.76, 0.63],\n    'English HLM': [0.87, 0.90, 0.77, 0.64]\n}\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(10.0, 4.0))\n\n# Plot the data\nfor i, (key, values) in enumerate(data.items()):\n    ax = fig.add_subplot(1, 3, i + 1)\n    ax.boxplot(values)\n    ax.set_title(key)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ndata = {\n    'Our Model': [2.3, 2.5, 2.7],\n    'NTM+CL': [2.4, 2.6, 2.8]\n}\n\n# Create a new figure\nfig, axes = plt.subplots(2, 2, figsize=(8.0, 6.0))\n\n# Plot the first subplot\naxes[0, 0].boxplot([data['Our Model'], data['NTM+CL']])\naxes[0, 0].set_title('Ratings')\naxes[0, 0].set_xlabel('Model')\naxes[0, 0].set_ylabel('Rating')\n\n# Plot the second subplot\naxes[0, 1].boxplot([data['Our Model'], data['NTM+CL']])\naxes[0, 1].set_title('Intrusion')\naxes[0, 1].set_xlabel('Model')\naxes[0, 1].set_ylabel('Intrusion')\n\n# Plot the third subplot\naxes[1, 0].boxplot([data['Our Model'], data['NTM+CL']])\naxes[1, 0].set_title('Ratings')\naxes[1, 0].set_xlabel('Model')\naxes[1, 0].set_ylabel('Rating')\n\n# Plot the fourth subplot\naxes[1, 1].boxplot([data['Our Model'], data['NTM+CL']])\naxes[1, 1].set_title('Intrusion')\naxes[1, 1].set_xlabel('Model')\naxes[1, 1].set_ylabel('Intrusion')\n\n# Adjust layout and show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/box_20.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ndata = {\n    'Digit span': {\n        'target Group': [7.2, 6.8, 6.4, 6.0, 5.6],\n        'control Group': [7.0, 6.6, 6.2, 5.8, 5.4]\n    },\n    'Lexical decision': {\n        'target Group': [1.9, 1.8, 1.7, 1.6, 1.5],\n        'control Group': [1.9, 1.8, 1.7, 1.6, 1.5]\n    },\n    'Reaction time': {\n        'target Group': [1.0, 0.9, 0.8, 0.7, 0.6],\n        'control Group': [1.0, 0.9, 0.8, 0.7, 0.6]\n    },\n    'Time per tap [s]': {\n        'target Group': [1.3, 1.2, 1.1, 1.0, 0.9],\n        'control Group': [1.3, 1.2, 1.1, 1.0, 0.9]\n    }\n}\n\n# Create a new figure with specified size\nfig, axes = plt.subplots(nrows=2, ncols=2, figsize=(10.0, 5.0))\n\n# Plot each subplot\nfor ax, (key, values) in zip(axes.flatten(), data.items()):\n    ax.boxplot(values.values())\n    ax.set_title(key)\n    ax.set_xlabel('Group')\n    ax.set_ylabel('Values')\n\n# Adjust layout and show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/box_21.pdf", "response": "```python\nimport matplotlib.pyplot as plt  \nimport numpy as np  \n\n# Sample data\ndata = {\n    'BG': [0.8, 0.6],\n    'IBP': [0.7, 0.5],\n    'SSP': [0.6, 0.4],\n    'NBP': [0.5, 0.3]\n}\n\n# Create a new figure\nfig, ax = plt.subplots(figsize=(9.0, 5.0))\n\n# Plot the data\nfor method, values in data.items():\n    ax.bar(method, values, color='blue')\n\n# Set labels and title\nax.set_xlabel('Prediction Accuracy vD1')\nax.set_ylabel('Methods')\nax.set_title('Methods')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_22.pdf", "response": "```python\nimport matplotlib.pyplot as plt  \nimport numpy as np  \n\n# Sample data\nx = np.array([50, 100, 150, 200, 350])\ny = np.array([0.01, 0.02, 0.03, 0.04, 0.05])\n\n# Create a new figure\nfig = plt.figure(figsize=(6.0, 5.0))\n\n# Plot the data\nplt.plot(x, y, 'bo-')\n\n# Set labels and title\nplt.xlabel('Search depth')\nplt.ylabel('Reward')\nplt.title('Sample Plot')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_23.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ndata = {\n    'Music Playtime': [65.1],\n    'Reading Duration': [55.7],\n    'Exercise Duration': [38.1],\n    'Gaming Duration': [29.5]\n}\n\n# Create a new figure\nfig, ax = plt.subplots(figsize=(9.0, 5.0))\n\n# Plot the data\nfor activity, durations in data.items():\n    ax.bar(activity, durations, color='blue')\n\n# Set labels and title\nax.set_xlabel('Activity')\nax.set_ylabel('Duration (minutes)')\nax.set_title('Daily Activity Durations')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_24.pdf", "response": "```python\nimport matplotlib.pyplot as plt  \nimport numpy as np  \n\n# Sample data\ndata = {\n    'No Intervention': [1.9, 2.1, 1.7, 1.8, 1.6],\n    'Low Intensity': [2.3, 2.4, 2.1, 2.2, 1.9],\n    'High Intensity': [2.5, 2.6, 2.3, 2.4, 2.1],\n    'Recovery': [2.0, 2.1, 1.9, 2.0, 1.8],\n    'Nutrition': [1.8, 1.9, 1.7, 1.8, 1.6],\n    'Environment': [1.7, 1.8, 1.6, 1.7, 1.5]\n}\n\n# Create a new figure with specified size\nfig, axes = plt.subplots(2, 2, figsize=(8.0, 8.0))\n\n# Plot the data\nfor ax, (key, values) in zip(axes.flatten(), data.items()):\n    ax.bar(range(len(values)), values)\n    ax.set_title(key)\n    ax.set_ylim(0, 2.5)\n\n# Adjust layout and show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/box_25.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ndata = [\n    [0.5, 0.3, 0.2],\n    [0.4, 0.2, 0.1],\n    [0.3, 0.1, 0.05],\n    [0.2, 0.05, 0.02],\n    [0.1, 0.02, 0.01]\n]\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(10.0, 6.0))\n\n# Plot the data\nplt.plot(data)\n\n# Set labels and title\nplt.xlabel('X-axis Label')\nplt.ylabel('Y-axis Label')\nplt.title('Sample Plot')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt  \nimport numpy as np  \n\n# Sample data\ndata = {\n    'ST_CVRP': [25, 30],\n    'ST_VRPTW': [45, 50],\n    'ST_All': [35, 40],\n    'Ours': [15]\n}\n\n# Create a new figure\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data\nfor key, values in data.items():\n    ax.bar(key, values, color='red')\n\n# Set labels and title\nax.set_xlabel('Metrics')\nax.set_ylabel('Performance Gap (%)')\nax.set_title('Performance Comparison')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ndata = {\n    'REM (ours)': [0.4, 0.6],\n    'IRIS': [0.4, 0.6],\n    'STORM': [0.4, 0.6],\n    'TWM': [0.4, 0.6],\n    'DreamerV3': [0.4, 0.6],\n    'SimPLe': [0.4, 0.6]\n}\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(12.0, 3.0))\n\n# Plot each dataset\nfor i, (key, values) in enumerate(data.items()):\n    ax = fig.add_subplot(1, 4, i + 1)\n    ax.plot(values, 'ro')\n    ax.set_title(key)\n    ax.set_xlabel('Human Normalized Score')\n    ax.set_ylabel('Mean (\u2191)')\n    ax.grid(True)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ndata = {\n    '2.0': [34.5, 34.5, 34.5, 34.5, 34.5],\n    '2.5': [34.5, 34.5, 34.5, 34.5, 34.5],\n    '3.0': [34.5, 34.5, 34.5, 34.5, 34.5],\n    '3.5': [34.5, 34.5, 34.5, 34.5, 34.5],\n    '4.0': [34.5, 34.5, 34.5, 34.5, 34.5],\n    '4.5': [34.5, 34.5, 34.5, 34.5, 34.5],\n    '5.0': [34.5, 34.5, 34.5, 34.5, 34.5]\n}\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(8.0, 6.0))\n\n# Plot the data\nfor key, value in data.items():\n    plt.plot([key] * len(value), value, 'o')\n\n# Set labels and title\nplt.xlabel('Angular Frequency [rad/s]')\nplt.ylabel('Thrust Angle [\u00b0]')\nplt.title('Thrust Angle vs Angular Frequency')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt  \nimport numpy as np  \n\n# Sample data\ndata = {\n    'Perfect': {\n        'GMML (25%-75%)': [9.5, 10.2, 9.8],\n        'GML (25%-75%)': [9.3, 9.7, 9.4],\n        'AO (25%-75%)': [9.1, 9.6, 9.2]\n    },\n    '0dB': {\n        'GMML (25%-75%)': [8.5, 8.8, 8.7],\n        'GML (25%-75%)': [8.3, 8.6, 8.4],\n        'AO (25%-75%)': [8.1, 8.5, 8.2]\n    },\n    '-10dB': {\n        'GMML (25%-75%)': [7.5, 7.8, 7.7],\n        'GML (25%-75%)': [7.3, 7.6, 7.4],\n        'AO (25%-75%)': [7.1, 7.5, 7.2]\n    }\n}\n\n# Create a new figure\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data\nfor method, values in data.items():\n    for key, value in values.items():\n        ax.plot(value, label=f'{method} {key}')\n\n# Set labels and title\nax.set_xlabel('CEE (dB)')\nax.set_ylabel('SE (bps/Hz)')\nax.set_title('Method')\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ndata = {\n    'Linear travel times': [\n        [10, 20, 30, 40, 50],\n        [60, 70, 80, 90, 100],\n        [110, 120, 130, 140, 150]\n    ],\n    'Exponential travel times': [\n        [15, 25, 35, 45, 55],\n        [65, 75, 85, 95, 105],\n        [115, 125, 135, 145, 155]\n    ],\n    'Sigmoidal travel times': [\n        [12, 22, 32, 42, 52],\n        [62, 72, 82, 92, 102],\n        [112, 122, 132, 142, 152]\n    ]\n}\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(25.0, 8.0))\n\n# Plot each dataset\nfor i, (key, values) in enumerate(data.items()):\n    ax = fig.add_subplot(1, 3, i + 1)\n    for value in values:\n        ax.boxplot(value)\n    ax.set_title(key)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ndata = {\n    'Only WSI Modality': [89.1, 89.2, 89.3, 89.4, 89.5],\n    'Only CNV Modality': [87.1, 87.2, 87.3, 87.4, 87.5],\n    'WSI+CNV Modality': [86.1, 86.2, 86.3, 86.4, 86.5]\n}\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(5.0, 5.0))\n\n# Plot the data\nfor i, (key, values) in enumerate(data.items()):\n    plt.subplot(1, 3, i + 1)\n    plt.bar(range(len(values)), values, color=['blue', 'green', 'pink'])\n    plt.title(key)\n    plt.ylim(0.7, 1.0)\n\n# Adjust layout and show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/box_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ndata = {\n    'Vanilla DIP': [22.8, 22.6, 22.4],\n    'SGLD DIP': [23.2, 23.0, 22.8],\n    'Ours': [23.2, 23.0, 22.8]\n}\n\n# Create a new figure with specified size\nfig, axes = plt.subplots(1, 2, figsize=(10.0, 5.0))\n\n# Plot data on the first subplot\naxes[0].boxplot([data['Vanilla DIP'], data['SGLD DIP'], data['Ours']], labels=['Vanilla DIP', 'SGLD DIP', 'Ours'])\naxes[0].set_title('0.25 HIAR')\naxes[0].set_ylabel('PSNR (dB)')\naxes[0].set_xlabel('Method')\n\n# Plot data on the second subplot\naxes[1].boxplot([data['Vanilla DIP'], data['SGLD DIP'], data['Ours']], labels=['Vanilla DIP', 'SGLD DIP', 'Ours'])\naxes[1].set_title('0.1 HIAR')\naxes[1].set_ylabel('PSNR (dB)')\naxes[1].set_xlabel('Method')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/contour_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.linspace(-80, 80, 100)\ny = np.linspace(-80, 80, 100)\nX, Y = np.meshgrid(x, y)\nZ = np.sin(np.sqrt(X**2 + Y**2))\n\n# Create a new figure\nfig = plt.figure(figsize=(10.0, 6.0))\nax = fig.add_subplot(111)\n\n# Plot the data\nc = ax.contourf(X, Y, Z, cmap='viridis')\n\n# Add a colorbar\nfig.colorbar(c)\n\n# Set labels\nax.set_xlabel('X')\nax.set_ylabel('Y')\nax.set_title('Contour Plot')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/contour_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx1 = np.linspace(0, 1, 100)\nx2 = np.linspace(0, 1, 100)\nX1, X2 = np.meshgrid(x1, x2)\nZ = np.sin(X1) * np.cos(X2)\n\n# Create a new figure\nfig = plt.figure(figsize=(8.0, 6.0))\n\n# Plot the data\nplt.contourf(X1, X2, Z, cmap='viridis')\n\n# Set labels\nplt.xlabel('x1')\nplt.ylabel('x2')\nplt.title(r'$\\lambda(x, z)$')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/contour_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.linspace(100, 160, 100)\ny_female = np.sin(x / 10) * 50 + 70\ny_male = np.sin(x / 10) * 50 + 70\n\n# Create a new figure\nfig = plt.figure(figsize=(8.0, 8.0))\n\n# Plot the data\nplt.plot(x, y_female, label='Female', color='blue')\nplt.plot(x, y_male, label='Male', color='red')\n\n# Set labels and title\nplt.xlabel('SBP (mmHg)')\nplt.ylabel('DBP (mmHg)')\nplt.title('Blood Pressure Data')\n\n# Add a legend\nplt.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/contour_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.linspace(-4, 4, 100)\ny = np.sin(x)\n\n# Create a new figure\nfig = plt.figure(figsize=(6.0, 6.0))\n\n# Plot the data\nplt.plot(x, y)\n\n# Set labels\nplt.xlabel('X-axis')\nplt.ylabel('Y-axis')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/contour_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(6.0, 6.0))\n\n# Define the data for the plot\nx = np.linspace(-4, 4, 100)\ny = np.linspace(-4, 4, 100)\nX, Y = np.meshgrid(x, y)\nZ = np.sqrt(X**2 + Y**2)\n\n# Plot the contourf\nplt.contourf(X, Y, Z, levels=[0, 2, 4, 6, 8, 10], cmap='viridis')\n\n# Set the title of the plot\nplt.title('Contour Plot Example')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/density_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.linspace(8, 15, 100)\ny = np.sin(x)\n\n# Create a new figure\nfig = plt.figure(figsize=(10.0, 3.0))\n\n# Plot the data\nplt.plot(x, y, color='blue')\n\n# Set labels and title\nplt.xlabel('X-axis')\nplt.ylabel('Y-axis')\nplt.title('Sample Plot')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/density_2.pdf", "response": "```python\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Sample data\nx = np.linspace(0, 10, 100)\ny = np.sin(x)\n\n# Create a new figure\nfig = plt.figure(figsize=(8.0, 4.0))\n\n# Plot the data\nplt.plot(x, y, color='pink')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/density_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt  \nimport numpy as np  \n\n# Sample data\nx = np.linspace(-1.0, 1.0, 100)\ny = np.exp(-(x**2))\n\n# Create a new figure\nfig = plt.figure(figsize=(8.0, 4.0))\n\n# Plot the data\nplt.plot(x, y)\n\n# Set labels\nplt.xlabel('Spearman Coefficient')\nplt.ylabel('Density')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/density_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\np = np.linspace(7, 15, 100)\nrandom_bundle = np.exp(-0.5 * (p - 10) ** 2 / 4)\nincrease_price = np.exp(-0.5 * (p - 12) ** 2 / 4)\nstrategic = np.exp(-0.5 * (p - 14) ** 2 / 4)\n\n# Plotting\nplt.figure(figsize=(9.0, 6.0))\nplt.plot(p, random_bundle, label='Random Bundle')\nplt.plot(p, increase_price, label='Increase Price')\nplt.plot(p, strategic, label='Strategic (Ours)')\nplt.xlabel('p')\nplt.ylabel('Shape Density')\nplt.legend()\nplt.show()\n```"}
{"file": "dataset/ori_500/density_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt  \nimport numpy as np  \n\n# Sample data\nx = np.linspace(0, 1, 100)\ny1 = np.sin(x)\ny2 = np.cos(x)\n\n# Create a new figure\nfig = plt.figure(figsize=(9.0, 6.0))\n\n# Plot the data\nplt.plot(x, y1, label='Gucci')\nplt.plot(x, y2, label='Chanel')\n\n# Set labels and title\nplt.xlabel('Density')\nplt.ylabel('Value')\nplt.title('Sample Plot')\n\n# Add a legend\nplt.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.array([-0.5, -0.443, -0.531, -0.539, -0.541, -0.543, -0.552, -0.819])\ny = np.array([-0.59, -0.59, -0.59, -0.59, -0.59, -0.59, -0.59, -0.819])\n\n# Create a new figure\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Plot the data\nax.plot(x, y, 'o')\n\n# Set labels and title\nax.set_xlabel('X-axis')\nax.set_ylabel('Y-axis')\nax.set_title('Sample Plot')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt  \nimport numpy as np  \n\n# Sample data\nx = np.array([1, 2, 4, 8])\ny1 = np.array([5.5, 6.5, 7, 6])\ny2 = np.array([5.5, 6.5, 7, 6])\n\n# Create a new figure\nfig = plt.figure(figsize=(8.0, 6.0))\n\n# Plot the data\nplt.plot(x, y1, label='Baseline')\nplt.plot(x, y2, label='SoftMoE (unchanged)')\n\n# Set labels and title\nplt.xlabel('Number of experts')\nplt.ylabel('IQM Human Normalized Score')\nplt.title('Expert dimension')\n\n# Add a legend\nplt.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Sample data\ndata = [\n    [0.748, 0.715, 0.759],\n    [0.762, 0.762, 0.78],\n    [0.748, 0.748, 0.78],\n    [0.709, 0.687, 0.713]\n]\n\n# Create a new figure\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Plot the data\nax.bar(range(len(data)), [row[0] for row in data], color='blue', label='Baseline 1')\nax.bar(range(len(data)), [row[1] for row in data], bottom=[row[0] for row in data], color='orange', label='Baseline 2')\nax.bar(range(len(data)), [row[2] for row in data], bottom=[row[0] + row[1] for row in data], color='green', label='FedMM')\n\n# Set labels and title\nax.set_xlabel('Hospital')\nax.set_ylabel('Accuracy')\nax.set_title('Accuracy by hospital and method')\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt  \nimport numpy as np  \n\n# Sample data\ndata = {\n    'GPT-4 Buyer (valuation 40)': [-12.3, -10.2, -8.1],\n    'Claude-2.1 Buyer (valuation 40)': [-11.4, -9.3, -7.2],\n    'Claude-2 Buyer (valuation 40)': [-10.5, -8.4, -6.3],\n    'GPT-3.5 Buyer (valuation 40)': [-9.6, -7.5, -5.4]\n}\n\n# Create a new figure\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Plot the data\nax.bar(range(len(data['GPT-4 Buyer (valuation 40)'])), data['GPT-4 Buyer (valuation 40)'], color='orange', label='GPT-4')\nax.bar(range(len(data['Claude-2.1 Buyer (valuation 40)'])), data['Claude-2.1 Buyer (valuation 40)'], color='cyan', label='Claude-2.1')\nax.bar(range(len(data['Claude-2 Buyer (valuation 40)'])), data['Claude-2 Buyer (valuation 40)'], color='red', label='Claude-2')\nax.bar(range(len(data['GPT-3.5 Buyer (valuation 40)'])), data['GPT-3.5 Buyer (valuation 40)'], color='blue', label='GPT-3.5')\n\n# Set labels and title\nax.set_xlabel('Buyer')\nax.set_ylabel('Value')\nax.set_title('Buyer Values')\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt  \nimport numpy as np  \n\n# Sample data\ndata = {\n    '[m]': [0.96, 0.96, 0.96, 0.96, 0.95],\n    '[\u0394R]': [0.86, 0.86, 0.86, 0.86, 0.83],\n    '[\u0394R -1]': [0.78, 0.78, 0.78, 0.78, 0.80],\n    '[none]': [0.78, 0.78, 0.78, 0.78, 0.80]\n}\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(8.0, 8.0))\n\n# Plot the data\nfor key, values in data.items():\n    plt.plot(values, label=key)\n\n# Set labels and title\nplt.xlabel('k')\nplt.ylabel('DNN')\nplt.title('DNN x red (k=1)')\nplt.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt  \nimport numpy as np  \n\n# Sample data\ndata = np.array([[1.5, 1.2, 1.3, 1.4, 1.5],\n                 [1.6, 1.3, 1.4, 1.5, 1.6],\n                 [1.7, 1.4, 1.5, 1.6, 1.7],\n                 [1.8, 1.5, 1.6, 1.7, 1.8],\n                 [1.9, 1.6, 1.7, 1.8, 1.9],\n                 [2.0, 1.7, 1.8, 1.9, 2.0]])\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(8.0, 6.0))\n\n# Plot the data\nplt.plot(data)\n\n# Set labels and title\nplt.xlabel('X-axis')\nplt.ylabel('Posterior accuracy (\u0394 to no prompting)')\nplt.title('Sample Plot')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ndata = np.array([\n    [85, 82, 88, 86],\n    [75, 78, 80, 79],\n    [65, 68, 70, 69]\n])\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(10.0, 3.0))\n\n# Plot the data\nplt.plot(data.T)\n\n# Set labels and title\nplt.xlabel('Performance')\nplt.ylabel('Value')\nplt.title('Performance Metrics')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_16.pdf", "response": "```python\nimport matplotlib.pyplot as plt  \nimport numpy as np  \n\n# Sample data\ndata = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n]\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(8.0, 8.0))\n\n# Plot the data\nplt.plot(data)\n\n# Set labels and title\nplt.xlabel('X-axis Label')\nplt.ylabel('Y-axis Label')\nplt.title('Sample Plot')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_17.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for plotting\ndata = {\n    'Japan': [0.25, 0.15, 0.05],\n    'Brazil': [0.25, 0.15, 0.05],\n    'India': [0.25, 0.15, 0.05],\n    'Germany': [0.25, 0.15, 0.05],\n    'United States': [0.25, 0.15, 0.05]\n}\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(6.0, 6.0))\n\n# Plot the data\nfor country, values in data.items():\n    plt.bar(country, values, color='blue')\n\n# Set labels and title\nplt.xlabel('Country')\nplt.ylabel('Student-Teacher Ratio')\nplt.title('Student-Teacher Ratio')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_18.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the first bar chart\ncategories = ['Africa', 'South America', 'North America', 'Asia', 'Europe']\nemissions = [1200, 1800, 5000, 10400, 3200]\n\n# Data for the second bar chart\nforest_coverage_rate = [52, 34, 25, 38, 21]\n\n# Data for the third bar chart\nrenewable_energy_usage = [18, 28, 25, 34, 18]\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(6.0, 9.0))\n\n# Plot the first bar chart\nplt.subplot(3, 1, 1)\nplt.bar(categories, emissions, color='lightgrey')\nplt.ylabel('Annual Carbon Dioxide Emissions (Millions of Metric Tons)')\nplt.title('Annual Carbon Dioxide Emissions')\n\n# Plot the second bar chart\nplt.subplot(3, 1, 2)\nplt.bar(categories, forest_coverage_rate, color='lightgrey')\nplt.ylabel('Forest Coverage Rate (%)')\nplt.title('Forest Coverage Rate')\n\n# Plot the third bar chart\nplt.subplot(3, 1, 3)\nplt.bar(categories, renewable_energy_usage, color='lightgrey')\nplt.ylabel('Renewable Energy Usage (%)')\nplt.title('Renewable Energy Usage')\n\n# Adjust layout and display the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_19.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ndata = {\n    'Crime Rate': [50, 60, 70],\n    'Happiness Index': [40, 50, 60],\n    'Social Security Coverage': [80, 90, 100],\n    'Political Participation': [70, 80, 90]\n}\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(10.0, 9.0))\n\n# Plot the data\nfor i, (key, values) in enumerate(data.items()):\n    plt.subplot(3, 1, i + 1)\n    plt.bar(range(len(values)), values, color=['purple', 'blue', 'red', 'yellow'])\n    plt.title(key)\n    plt.ylabel('Percentage')\n    plt.xticks(range(len(values)), ['Detroit', 'Philadelphia', 'Baltimore'])\n\n# Adjust layout and show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ndata = np.array([\n    [85, 75, 90, 80],\n    [70, 60, 75, 65],\n    [65, 55, 70, 50],\n    [55, 45, 60, 40]\n])\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(10.0, 6.0))\n\n# Plot the data\nplt.plot(data.T, marker='o')\n\n# Set labels and title\nplt.xlabel('Judge')\nplt.ylabel('Judge Accuracy (%)')\nplt.title('Protocol')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_20.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ndata = {\n    'New York': {'Spring': [12, 13, 14, 15], 'Autumn': [16, 17, 18, 19]},\n    'London': {'Spring': [10, 11, 12, 13], 'Autumn': [14, 15, 16, 17]},\n    'Beijing': {'Spring': [8, 9, 10, 11], 'Autumn': [12, 13, 14, 15]},\n    'Tokyo': {'Spring': [6, 7, 8, 9], 'Autumn': [10, 11, 12, 13]}\n}\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(10.0, 5.0))\n\n# Plot the data\nfor city, seasons in data.items():\n    for season, values in seasons.items():\n        plt.plot(values, label=f'{city} {season}')\n\n# Set labels and title\nplt.xlabel('Year')\nplt.ylabel('Value')\nplt.title('Sample Data')\n\n# Add a legend\nplt.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_21.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Sample data\ndata = {\n    'Germany': [0, 15, 20],\n    'China': [0, 10, 15],\n    'USA': [0, 5, 10],\n    'India': [0, 3, 8],\n    'Brazil': [0, 2, 7]\n}\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot the data\nax.bar(data.keys(), data['Germany'], color='purple', label='Germany')\nax.bar(data.keys(), data['China'], bottom=data['Germany'], color='cyan', label='China')\nax.bar(data.keys(), data['USA'], bottom=[sum(x) for x in zip(data['Germany'], data['China'])], color='cyan', label='USA')\nax.bar(data.keys(), data['India'], bottom=[sum(x) for x in zip(data['Germany'], data['China'], data['USA'])], color='cyan', label='India')\nax.bar(data.keys(), data['Brazil'], bottom=[sum(x) for x in zip(data['Germany'], data['China'], data['USA'], data['India'])], color='cyan', label='Brazil')\n\n# Set labels and title\nax.set_xlabel('Country')\nax.set_ylabel('Energy Consumption (Petajoules)')\nax.set_title('Total Energy Consumption by Country')\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_22.pdf", "response": "```python\nimport matplotlib.pyplot as plt  \nimport numpy as np  \n\n# Sample data\ndata = {\n    'Refrigerator': [0.15, 0.25, 0.30],\n    'Washing Machine': [-0.10, 0.05, 0.05],\n    'Dishwasher': [0.05, 0.15, 0.20]\n}\n\n# Create a new figure\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Plot the data\nfor i, (label, values) in enumerate(data.items()):\n    ax.barh(range(len(values)), values, left=np.arange(len(values)), height=0.8, label=label)\n\n# Set labels and title\nax.set_xlabel('Energy Efficiency Rating')\nax.set_title('Energy Efficiency Ratings by Appliance Model')\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_23.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ndata = np.array([\n    [80, 70, 60],\n    [90, 80, 70],\n    [70, 60, 50],\n    [60, 50, 40]\n])\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(10.0, 5.0))\n\n# Plot the data\nplt.plot(data[:, 0], label='Installation Efficiency')\nplt.plot(data[:, 1], label='Maintenance Costs')\nplt.plot(data[:, 2], label='Environmental Impact')\n\n# Set labels and title\nplt.xlabel('Time')\nplt.ylabel('Efficiency Score')\nplt.title('Efficiency Assessment')\n\n# Add a legend\nplt.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_24.pdf", "response": "```python\nimport matplotlib.pyplot as plt  \nimport numpy as np  \n\n# Sample data\ndata = {\n    'North America': [85, 75],\n    'Europe': [90, 80],\n    'Asia': [70, 60],\n    'South America': [80, 70],\n    'Africa': [60, 50],\n    'Australia': [75, 65],\n    'Central America': [70, 60],\n    'Middle East': [80, 70],\n    'Southeast Asia': [85, 75],\n    'Scandinavia': [70, 60]\n}\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(10.0, 6.0))\n\n# Plot the data\nfor country, values in data.items():\n    plt.bar(country, values, color=['green', 'yellow'])\n\n# Set labels and title\nplt.xlabel('Country')\nplt.ylabel('Percentage')\nplt.title('Educational Metrics by Region')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_25.pdf", "response": "```python\nimport matplotlib.pyplot as plt  \nimport numpy as np  \n\n# Sample data\ndata = {\n    'iPhone 13': [46.3, 30.1],\n    'Samsung S21': [57.9, 34.0],\n    'Google Pixel 6': [53.8, 43.7],\n    'OnePlus 9': [19.4, 20.0]\n}\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(8.0, 5.0))\n\n# Plot the data\nfor i, (key, values) in enumerate(data.items()):\n    plt.barh(i, values[0], color='blue', label='Truthful Recall')\n    plt.barh(i, values[1], left=values[0], color='orange', label='Misleading Recall')\n\n# Set labels and title\nplt.xlabel('Recall Rate (%)')\nplt.title('Comparison of Recall Rates Across Products')\nplt.yticks(range(len(data)), list(data.keys()))\nplt.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_26.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ncategories = ['Support', 'Delivery', 'Product Quality', 'Returns', 'Pricing', 'Website Usability', 'Checkout Process']\nvalues = [15, 18, 20, 12, 17, 10, 8]\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the bar chart\nax.bar(categories, values, color='blue')\n\n# Set labels and title\nax.set_xlabel('Complaint Rates')\nax.set_ylabel('Satifaction Scores')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_27.pdf", "response": "```python\nimport matplotlib.pyplot as plt  \nimport numpy as np  \n\n# Sample data\nx = np.array([75, 82, 78, 85, 88, 90])\ny = np.array([15, 18, 20, 12, 10, 8])\n\n# Create a new figure\nfig = plt.figure(figsize=(10.0, 6.0))\n\n# Plot the data\nplt.bar(range(len(x)), x, color='pink')\nplt.bar(range(len(y)), y, color='orange')\n\n# Set labels and title\nplt.xlabel('Categories')\nplt.ylabel('Values')\nplt.title('Sample Bar Chart')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_28.pdf", "response": "```python\nimport matplotlib.pyplot as plt  \nimport numpy as np  \n\n# Sample data\ncategories = ['Watering Frequency', 'Plant Density', 'Plant Variety', 'CO2 Levels', 'Pesticides', 'Temperature', 'Fertilizer', 'Soil pH', 'Water Quality', 'Sunlight']\nvalues = [0.15, 0.15, 0.15, 0.15, 0.15, 0.15, 0.15, 0.15, 0.15, 0.15]\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(10.0, 8.0))\n\n# Plot the data\nplt.bar(categories, values, color='green')\n\n# Set labels and title\nplt.xlabel('Environmental Factors')\nplt.ylabel('Impact on Plant Growth (\u0394 to control)')\nplt.title('Impact of Environmental Factors on Plant Growth')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_29.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ndata = {\n    'New York': [250, 175, 150],\n    'Los Angeles': [220, 150, 130],\n    'Chicago': [210, 140, 120]\n}\n\n# Create a new figure\nfig, ax = plt.subplots(figsize=(10.0, 4.0))\n\n# Plot the data\nfor city, values in data.items():\n    ax.bar(range(len(values)), values, label=city)\n\n# Set labels and title\nax.set_xlabel('Metrics')\nax.set_ylabel('Metric Values')\nax.set_title('Traffic Metrics Comparison')\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ndata = np.random.rand(10, 10)\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(10.0, 10.0))\n\n# Plot the data\nplt.imshow(data, cmap='viridis')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_30.pdf", "response": "```python\nimport matplotlib.pyplot as plt  \nimport numpy as np  \n\n# Sample data\ndata = np.array([[-3.2, -3.4, -3.6, -3.7],\n                 [-3.1, -3.3, -3.5, -3.6],\n                 [-3.0, -3.2, -3.4, -3.5],\n                 [-2.9, -3.1, -3.3, -3.4]])\n\n# Create a new figure\nfig = plt.figure(figsize=(8.0, 5.0))\n\n# Plot the data\nplt.plot(data)\n\n# Set labels and title\nplt.xlabel('City')\nplt.ylabel('Environmental Impact Score')\nplt.title('Environmental Impact Scores Across Cities')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ndata = {\n    'Wererwolf': [84.97, 102.67, 67.17, 78.22, 85.17],\n    'Seer': [84.97, 102.67, 67.17, 78.22, 85.17],\n    'Witch': [67.17, 102.67, 67.17, 78.22, 85.17],\n    'Hunter': [78.22, 102.67, 67.17, 78.22, 85.17],\n    'Villager': [85.17, 102.67, 67.17, 78.22, 85.17]\n}\n\n# Create a new figure\nfig, ax = plt.subplots(figsize=(10.0, 4.0))\n\n# Plot the data\nfor key, values in data.items():\n    ax.bar(key, values, color='blue')\n\n# Set labels and title\nax.set_xlabel('Character')\nax.set_ylabel('Tokens')\nax.set_title('Character Tokens')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt  \nimport numpy as np  \n\n# Sample data\nx = np.array([5, 10, 20, 30, 40, 50])\ny = np.array([63.77, 64.17, 64.31, 64.98, 65.82, 65.78])\n\n# Create a new figure\nfig = plt.figure(figsize=(10.0, 7.0))\n\n# Plot the data\nplt.plot(x, y, marker='o')\n\n# Set labels and title\nplt.xlabel('Size of Data for Training and Validation')\nplt.ylabel('True+ info (%)')\nplt.title('Sample Plot')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt  \nimport numpy as np  \n\n# Sample data\ndata = {\n    'all': [0.834, 0.832, 0.832, 0.832, 0.832, 0.832, 0.832, 0.832, 0.832, 0.832],\n    'arg.causal': [0.834, 0.832, 0.832, 0.832, 0.832, 0.832, 0.832, 0.832, 0.832, 0.832],\n    'test.0': [0.834, 0.832, 0.832, 0.832, 0.832, 0.832, 0.832, 0.832, 0.832, 0.832],\n    'test.1': [0.834, 0.832, 0.832, 0.832, 0.832, 0.832, 0.832, 0.832, 0.832, 0.832],\n    'test.2': [0.834, 0.832, 0.832, 0.832, 0.832, 0.832, 0.832, 0.832, 0.832, 0.832],\n    'test.3': [0.834, 0.832, 0.832, 0.832, 0.832, 0.832, 0.832, 0.832, 0.832, 0.832],\n    'test.4': [0.834, 0.832, 0.832, 0.832, 0.832, 0.832, 0.832, 0.832, 0.832, 0.832],\n    'test.5': [0.834, 0.832, 0.832, 0.832, 0.832, 0.832, 0.832, 0.832, 0.832, 0.832],\n    'test.6': [0.834, 0.832, 0.832, 0.832, 0.832, 0.832, 0.832, 0.832, 0.832, 0.832],\n    'constant': [0.834, 0.832, 0.832, 0.832, 0.832, 0.832, 0.832, 0.832, 0.832, 0.832]\n}\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Plot the data\nfor key, values in data.items():\n    ax.plot(values, label=key)\n\n# Set labels and title\nax.set_xlabel('Epoch')\nax.set_ylabel('Out-of-domain accuracy')\nax.set_title('Out-of-domain accuracy')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt  \nimport numpy as np  \n\n# Sample data\ndata = np.array}
{"file": "dataset/ori_500/errorbar_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt  \nimport numpy as np  \n\n# Sample data\ndata = np.array([\n    [50, 60],\n    [40, 50],\n    [60, 70],\n    [30, 40],\n    [20, 30],\n    [70, 80],\n    [10, 20]\n])\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(10.0, 3.0))\n\n# Plot the data\nplt.plot(data[:, 0], label='Ground-truth labels')\nplt.plot(data[:, 1], label='Weak labels')\n\n# Set labels and title\nplt.xlabel('Model')\nplt.ylabel('Accuracy (%)')\nplt.title('Comparison of Accuracy for Different Models')\n\n# Add a legend\nplt.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Sample data\ncategories = ['Computational Social Science and Social Media', 'Phonology, Morphology and Word Segmentation', 'Information Retrieval and Text Mining', 'Machine Learning for NLP', 'Information Extraction', 'Disourse and Pragmatics', 'Syntax: Tagging, Chinking and Parsing']\nvalues = [\n    [1.25, 1.3, 1.4],\n    [1.25, 1.3, 1.4],\n    [1.25, 1.3, 1.4],\n    [1.25, 1.3, 1.4],\n    [1.25, 1.3, 1.4],\n    [1.25, 1.3, 1.4],\n    [1.25, 1.3, 1.4]\n]\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(8.0, 8.0))\n\n# Plot the data\nplt.bar(categories, values[0], color='purple')\nplt.bar(categories, values[1], bottom=values[0], color='purple')\nplt.bar(categories, values[2], bottom=[sum(x) for x in zip(values[0], values[1])], color='purple')\nplt.bar(categories, values[3], bottom=[sum(x) for x in zip(values[0], values[1], values[2])], color='purple')\nplt.bar(categories, values[4], bottom=[sum(x) for x in zip(values[0], values[1], values[2], values[3])], color='purple')\nplt.bar(categories, values[5], bottom=[sum(x) for x in zip(values[0], values[1], values[2], values[3], values[4])], color='purple')\nplt.bar(categories, values[6], bottom=[sum(x) for x in zip(values[0], values[1], values[2], values[3], values[4], values[5])], color='purple')\n\n# Set labels and title\nplt.xlabel('A')\nplt.ylabel('Categories')\nplt.title('Your Chart Title Here')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorpoint_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt  \nimport numpy as np  \n\n# Sample data\ndata = {\n    'Kashmir': [0.12, 0.13, 0.14, 0.15, 0.16],\n    'Religion': [0.12, 0.13, 0.14, 0.15, 0.16],\n    'Crime and Justice': [0.12, 0.13, 0.14, 0.15, 0.16],\n    'CAA': [0.12, 0.13, 0.14, 0.15, 0.16],\n    'Pulwama Balakot': [0.12, 0.13, 0.14, 0.15, 0.16],\n    'Politics': [0.12, 0.13, 0.14, 0.15, 0.16]\n}\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(8.0, 5.0))\n\n# Plot the data\nfor key, values in data.items():\n    plt.plot(values, label=key)\n\n# Set labels and title\nplt.xlabel('Time')\nplt.ylabel('Shouting Fraction (Fraction of videos)')\nplt.title('Shouting Fraction by Time')\n\n# Add a legend\nplt.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorpoint_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt  \nimport numpy as np  \n\n# Sample data\nx = np.array([0, 5, 10, 15, 20])\ny1 = np.array([15.49, 17.15, 16.03, 15.45, 16.46])\ny2 = np.array([19.38, 19.38, 19.38, 19.38, 19.38])\ny3 = np.array([23.92, 23.92, 23.92, 23.92, 23.92])\ny4 = np.array([24.64, 24.64, 24.64, 24.64, 24.64])\ny5 = np.array([22.92, 22.92, 22.92, 22.92, 22.92])\ny6 = np.array([20.29, 20.29, 20.29, 20.29, 20.29])\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(6.0, 9.0))\n\n# Plot the data\nplt.plot(x, y1, 'o-', label='Variable, Symmetric Error')\nplt.plot(x, y2, 'o-', label='Variable, Symmetric Error')\nplt.plot(x, y3, 'o-', label='Variable, Symmetric Error')\nplt.plot(x, y4, 'o-', label='Variable, Symmetric Error')\nplt.plot(x, y5, 'o-', label='Variable, Symmetric Error')\nplt.plot(x, y6, 'o-', label='Variable, Symmetric Error')\n\n# Set labels and title\nplt.xlabel('X-axis')\nplt.ylabel('Y-axis')\nplt.title('Variable, Symmetric Error')\n\n# Add a legend\nplt.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorpoint_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt  \nimport numpy as np  \n\n# Sample data\ncategories = ['Politics', 'Religion', 'Kashmir', 'CAA', 'Pulwama-Balakot']\nincivility_values = [0.24, 0.22, 0.22, 0.24, 0.26]\nmean_values = [0.24, 0.22, 0.22, 0.24, 0.26]\n\n# Create a new figure\nfig = plt.figure(figsize=(8.0, 6.0))\n\n# Plot the data\nplt.plot(categories, incivility_values, label='Incivility')\nplt.plot(categories, mean_values, label='Mean')\n\n# Set labels and title\nplt.xlabel('Category')\nplt.ylabel('Incivility (Fraction of Videos)')\nplt.title('Incivility vs Mean for Categories')\n\n# Add a legend\nplt.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorpoint_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ndata = {\n    'This work*': [-19.353, -19.257],\n    'Shah et al.': [-19.394, -19.257],\n    'Banerjee et al.': [-19.404, -19.257],\n    'Favale et al.': [-19.344, -19.257],\n    'Gomez-Valent': [-19.362, -19.257],\n    'Benisty et al.': [-19.38, -19.257]\n}\n\n# Create a new figure\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Plot the data\nfor label, values in data.items():\n    ax.plot(values, label=label)\n\n# Set labels and title\nax.set_xlabel('M_B')\nax.set_ylabel('CC+Pantheon+')\nax.set_title('Sample Data')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorpoint_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt  \nimport numpy as np  \n\n# Sample data\nx = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\ny1 = np.random.rand(10)\ny2 = np.random.rand(10)\n\n# Create a new figure\nfig = plt.figure(figsize=(10.0, 6.0))\n\n# Plot the data\nplt.plot(x, y1, 'bo', label='Unique speaker count mean')\nplt.plot(x, y2, 'ro', label='Unique shouter count mean')\n\n# Set labels and title\nplt.xlabel('Number of speakers')\nplt.ylabel('Dataset unique shouter count mean')\nplt.title('Dataset unique shouter count mean')\n\n# Add a legend\nplt.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorpoint_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt  \nimport numpy as np  \n\n# Sample data\ndata = {\n    'KASHMIR': [0.12, 0.13, 0.14, 0.15, 0.16],\n    'COVID/LOCKDOWN': [0.17, 0.18, 0.19, 0.20, 0.21],\n    'SPORTS': [0.22, 0.23, 0.24, 0.25, 0.26],\n    'CHINA': [0.27, 0.28, 0.29, 0.30, 0.31]\n}\n\n# Create a new figure\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data\nfor key, value in data.items():\n    ax.plot(value, label=key)\n\n# Set labels and title\nax.set_xlabel('PULWAMA-BALAKOT')\nax.set_ylabel('Female Face presence (Fraction of videos)')\nax.set_title('Dataset mean vs Mean')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorpoint_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt  \nimport numpy as np  \n\n# Sample data\ndata = np.random.rand(10, 5)\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(9.0, 6.0))\n\n# Plot the data\nplt.plot(data)\n\n# Set labels and title\nplt.xlabel('X-axis')\nplt.ylabel('Y-axis')\nplt.title('Sample Plot')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorpoint_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt  \nimport numpy as np  \n\n# Sample data\nx = np.array([0.0, 0.5, 1.0, 1.5, 2.0, 2.5, 3.0, 3.5])\ny1 = np.array([170, 160, 150, 140, 130, 120, 110, 100])\ny2 = np.array([170, 160, 150, 140, 130, 120, 110, 100])\n\n# Create a new figure\nfig = plt.figure(figsize=(10.0, 4.0))\n\n# Plot the data\nplt.plot(x, y1, 'o-', label='Variable, Symmetric Error')\nplt.plot(x, y2, 'o-', label='Variable, Symmetric Error')\n\n# Set labels and title\nplt.xlabel('X-axis')\nplt.ylabel('Y-axis')\nplt.title('Variable, Symmetric Error')\n\n# Add a legend\nplt.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorpoint_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt  \nimport numpy as np  \n\n# Sample data\ndata = np.array([4.375, 2.598, 3.704, 1.923, 4.777, 2.561, 2.23, 1.237, 2.28, 2.261, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2.889, 2.044, 2"}
{"file": "dataset/ori_500/errorpoint_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt  \nimport numpy as np  \n\n# Sample data\ndata = np.array([[-2.1, -2.6, -2.1, -2.6, -2.1, -2.6],\n                 [2.6, 2.6, 2.6, 2.6, 2.6, 2.6],\n                 [-2.7, -2.7, -2.7, -2.7, -2.7, -2.7],\n                 [2.9, 2.9, 2.9, 2.9, 2.9, 2.9],\n                 [-1.2, -1.2, -1.2, -1.2, -1.2, -1.2],\n                 [2.3, 2.3, 2.3, 2.3, 2.3, 2.3],\n                 [-2.7, -2.7, -2.7, -2.7, -2.7, -2.7],\n                 [2.9, 2.9, 2.9, 2.9, 2.9, 2.9],\n                 [-1.0, -1.0, -1.0, -1.0, -1.0, -1.0],\n                 [1.3, 1.3, 1.3, 1.3, 1.3, 1.3],\n                 [-2.7, -2.7, -2.7, -2.7, -2.7, -2.7],\n                 [2.9, 2.9, 2.9, 2.9, 2.9, 2.9],\n                 [-1.1, -1.1, -1.1, -1.1, -1.1, -1.1],\n                 [1.2, 1.2, 1.2, 1.2, 1.2, 1.2],\n                 [-2.7, -2.7, -2.7, -2.7, -2.7, -2.7],\n                 [2.9, 2.9, 2.9, 2.9, 2.9, 2.9],\n                 [-1.0, -1.0, -1.0, -1.0, -1.0, -1.0],\n                 [1.3, 1.3, 1.3, 1.3, 1.3, 1.3],\n                 [-2.7, -2.7, -2.7, -2.7, -2.7, -2.7],\n                 [2.9, 2.9, 2.9, 2.9, 2.9, 2.9],\n                 [-1.1, -1.1, -1.1, -1.1, -1.1, -1.1],\n                 [1.2, 1.2, 1.2, 1.2, 1.2, 1.2]])\n\n# Create a new figure\nfig = plt.figure(figsize=(10.0, 7.0))\n\n# Plot the data\nplt.plot(data)\n\n# Set labels\nplt.xlabel('X-axis')\nplt.ylabel('Y-axis')\nplt.title('Variable, Asymmetric Error')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/graph_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt  \nimport numpy as np  \n\n# Sample data\nx = np.array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\ny = np.array([0, 1, 0, 1, 0, 1, 0, 1, 0, 1])\n\n# Create a new figure\nfig = plt.figure(figsize=(8.0, 8.0))\n\n# Plot the data\nplt.plot(x, y, 'o-')\n\n# Set labels\nplt.xlabel('X-axis')\nplt.ylabel('Y-axis')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/graph_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport networkx as nx\n\n# Create a new graph\nG = nx.Graph()\n\n# Add nodes and edges to the graph\nG.add_edges_from([(1, 2), (1, 3), (2, 4), (2, 5), (3, 6), (3, 7), (4, 8), (4, 9), (5, 10), (5, 11), (6, 12), (6, 13), (7, 14), (7, 15), (8, 16), (8, 17), (9, 18), (9, 19), (10, 20), (10, 21), (11, 22), (11, 23), (12, 24), (12, 25), (13, 26), (13, 27), (14, 28), (14, 29), (15, 30), (15, 31), (16, 32), (16, 33), (17, 34), (17, 35), (18, 36), (18, 37), (19, 38), (19, 39), (20, 40), (20, 41), (21, 42), (21, 43), (22, 44), (22, 45), (23, 46), (23, 47), (24, 48), (24, 49), (25, 50), (25, 51), (26, 52), (26, 53), (27, 54), (27, 55), (28, 56), (28, 57), (29, 58), (29, 59), (30, 60), (30, 61), (31, 62), (31, 63), (32, 64), (32, 65), (33, 66), (33, 67), (34, 68), (34, 69), (35, 70), (35, 71), (36, 72), (36, 73), (37, 74), (37, 75), (38, 76), (38, 77), (39, 78), (39, 79), (40, 80), (40, 81), (41, 82), (41, 83), (42, 84), (42, 85), (43, 86), (43, 87), (44, 88), (44, 89), (45, 90), (45, 91), (46, 92), (46, 93), (47, 94), (47, 95), (48, 96), (48, 97), (49, 98), (49, 99), (50, 100), (50, 101), (51, 102), (51, 103), (52, 104), (52, 105), (53, 106), (53, 107), (54, 108), (54, 109), (55, 110), (55, 111), (56, 112), (56, 113), (57, 114), (57, 115), (58, 116), (58, 117), (59, 118), (59, 119), (60, 120), (60, 121), (61, 122), (61, 123), (62, 124), (62, 125), (63, 126), (63, 127), (64, 128), (64, 129), (65, 130), (65, 131), (66, 132), (66, 133), (67, 134), (67, 135), (68, 136), (68, 137), (69, 138), (69, 139), (70, 140), (70, 141), (71, 142), (71, 143), (72, 144), (72, 145), (73, 146), (73, 147), (74, 148), (74, 149), (75, 150), (75, 151), (76, 152), (76, 153), (77, 154), (77, 155), (78, 156), (78, 157), (79, 158), (79, 159), (80, 160), (80, 161), (81, 162), (81, 163), (82, 164), (82, 165), (83, 166), (83, 167), (84, 168), (84, 169), (85, 170), (85, 171), (86, 172), (86, 173), (87, 174), (87, 175), (88, 176), (88, 177), (89, 178), (89, 179), (90, 180), (90, 181), (91, 182), (91, 183), (92, 184), (92, 185), (93, 186), (93, 187), (94, 188), (94, 189), (95, 190), (95, 191), (96, 192), (96, 193), (97, 194), (97, 195), (98, 196), (98, 197), (99, 198), (99, 199), (100, 200), (100, 201), (101, 202), (101, 203), (102, 204), (102, 205), (103, 206), (103, 207), (104, 208), (104, 209), (105, 210), (105, 211), (106, 212), (106, 213), (107, 214), (107, 215), (108, 216), (108, 217), (109, 218), (109, 219), (110, 220), (110, 221), (111, 222), (111, 223), (112, 224), (112, 225), (113, 226), (113, 227), (114, 228), (114, 229), (115, 230), (115, 231), (116, 232), (116, 233), (117, 234), (117, 235), (118, 236), (118, 237), (119, 238), (119, 239), (120, 240), (120, 241), (121, 242), (121, 243), (122, 244), (122, 245), (123, 246), (123, 247), (124, 248), (124, 249), (125, 250), (125, 251), (126, 252), (126, 253), (127, 254), (127, 255), (128, 256), (128, 257), (129, 258), (129, 259), (130, 260), (130, 261), (131, 262), (131, 263), (132, 264), (132, 265), (133, 266), (133, 267), (134, 268), (134, 269), (135, 270), (135, 271), (136, 272), (136, 273), (137, 274), (137, 275), (138, 276), (138, 277), (139, 278), (139, 279), (140, 280), (140, 281), (141, 282), (141, 283), (142, 284), (142, 285), (143, 286), (143, 287), (144, 288), (144, 289), (145, 290), (145, 291), (146, 292), (146, 293), (147, 294), (147, 295), (148, 296), (148, 297), (149, 298), (149, 299), (150, 300), (150, 301), (151, 302), (151, 303), (152, 304), (152, 305), (153, 306), (153, 307), (154, 308), (154, 309), (155, 310), (155, 311), (156, 312), (156, 313), (157, 314), (157, 315), (158, 316), (158, 317), (159, 318), (159, 319), (160, 320), (160, 321), (161, 322), (161, 323), (162, 324), (162, 325), (163, 326), (163, 327), (164, 328), (164, 329), (165, 330), (165, 331), (166, 332), (166, 333), (167, 334), (167, 335), (168, 336), (168, 337), (169, 338), (169, 339), (170, 340), (170, 341), (171, 342), (171, 343), (172, 344), (172, 345), (173, 346), (173, 347), (174, 348), (174, 349), (175, 350), (175, 351), (176, 352), (176, 353), (177, 354), (177, 355), (178, 356), (178, 357), (179, 358), (179, 359), (180, 360), (180, 361), (181, 362), (181, 363), (182, 364), (182, 365), (183, 366), (183, 367), (184, 368), (184, 369), (185, 370), (185, 371), (186, 372), (186, 373), (187, 374), (187, 375), (188, 376), (188, 377), (189, 378), (189, 379), (190, 380), (190, 381), (191, 382), (191, 383), (192, 384), (192, 385), (193, 386), (193, 387), (194, 388), (194, 389), (195, 390), (195, 391), (196, 392), (196, 393), (197, 394), (197, 395), (198, 396), (198, 397), (199, 398), (199, 399), (200, 400), (200, 401), (201, 402), (201, 403), (202, 404), (202, 405), (203, 406), (203, 407), (204, 408), (204, 409), (205, 410), (205, 411), (206, 412), (206, 413), (207, 414), (207, 415), (208, 416), (208, 417), (209, 418), (209, 419), (210, 420), (210, 421), (211, 422), (211, 423), (212, 424), (212, 425), (213, 426), (213, 427), (214, 428), (214, 429), (215, 430), (215, 431), (216, 432), (216, 433), (217, 434), (217, 435), (218, 436), (218, 437), (219, 438), (219, 439"}
{"file": "dataset/ori_500/graph_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt  \nimport numpy as np  \n\n# Sample data\nx = np.array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\ny = np.array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n\n# Create a new figure\nfig = plt.figure(figsize=(10.0, 8.0))\n\n# Plot the data\nplt.plot(x, y, 'o-')\n\n# Set labels\nplt.xlabel('X-axis')\nplt.ylabel('Y-axis')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/graph_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data for plotting\nx = np.array([0, 1, 2, 3])\ny = np.array([0, 1, 4, 9])\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(10.0, 8.0))\n\n# Plot the data\nplt.plot(x, y, marker='o')\n\n# Set labels and title\nplt.xlabel('X-axis')\nplt.ylabel('Y-axis')\nplt.title('Sample Plot')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/graph_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt  \nimport numpy as np  \n\n# Sample data for demonstration\nx = np.array([0, 1, 2])\ny = np.array([0, 1, 2])\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(10.0, 8.0))\n\n# Plot the data\nplt.plot(x, y)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt  \nimport numpy as np  \n\n# Sample data\ndata = np.array([[0.61, 0.74, 0.7, 0.7, 0.57], [0.69, 0.77, 0.64, 0.62, 0.45], [0.7, 0.67, 0.88, 0.69, 0.45], [1.0, 1.0, 1.0, 1.0, 1.0], [0.66, 0.72, 0.67, 0.54, 0.45]])\n\n# Create a new figure\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Plot the data\nim = ax.imshow(data, cmap='viridis')\n\n# Add colorbar\ncbar = ax.figure.colorbar(im, ax=ax)\ncbar.ax.set_ylabel(\"Value\", rotation=-90, va=\"bottom\")\n\n# Set labels\nax.set_xticks(np.arange(len(data[0])))\nax.set_yticks(np.arange(len(data)))\nax.set_xticklabels(['CoreNLP', 'Stanza', 'Biaffine', 'StackPointer', 'TowerParse'])\nax.set_yticklabels(['CoreNLP', 'Stanza', 'Biaffine', 'StackPointer', 'TowerParse'])\n\n# Rotate the tick labels and set their alignment.\nplt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\", rotation_mode=\"anchor\")\n\n# Loop over data dimensions and create text annotations.\nfor i in range(len(data)):\n    for j in range(len(data[i])):\n        text = ax.text(j, i, round(data[i, j], 2), ha=\"center\", va=\"center\", color=\"w\")\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt  \nimport numpy as np  \n\n# Sample data\ndata = np.array([\n    [15.7, 28.1, 2.6, 0.5, 14.5, 10.5],\n    [76.0, 2.1, 0.5, 4.1, 8.1, 9.2],\n    [50.8, 12.2, 0.6, 6.2, 15.5, 13.9],\n    [50.3, 12.0, 0.9, 7.8, 17.3, 16.3]\n])\n\n# Create a new figure\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Plot the data\ncax = ax.matshow(data, cmap='coolwarm')\n\n# Add colorbar\nfig.colorbar(cax)\n\n# Set labels\nax.set_xticks(np.arange(len(data[0])))\nax.set_yticks(np.arange(len(data)))\nax.set_xticklabels(['Villager', 'Hunter', 'Witch', 'Seer', 'Werewolf', 'Abstain'])\nax.set_yticklabels(['Villager', 'Hunter', 'Witch', 'Seer'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ndata = np.random.rand(4, 5)\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(8.0, 6.0))\n\n# Plot the data using imshow\nplt.imshow(data, cmap='hot', interpolation='nearest')\n\n# Add a colorbar to the plot\nplt.colorbar()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ndata = np.array([\n    [10, 20, 30],\n    [40, 50, 60],\n    [70, 80, 90]\n])\n\n# Create a new figure\nfig, ax = plt.subplots(figsize=(6.0, 5.0))\n\n# Plot the data\ncax = ax.matshow(data, cmap='viridis')\n\n# Add a colorbar\nfig.colorbar(cax)\n\n# Set labels\nax.set_xlabel('Predicted category')\nax.set_ylabel('Labeling function similarity')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt  \nimport numpy as np  \n\n# Sample data\ndata = np.array([[10, 10, 10], [7, 7, 7], [22, 22, 22]])\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(6.0, 6.0))\n\n# Plot the data using imshow\nplt.imshow(data, cmap='hot', interpolation='nearest')\n\n# Add a colorbar to the plot\nplt.colorbar()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt  \nimport numpy as np  \n\n# Sample data\ndata = np.array([\n    [0.2, 0.3, 0.4, 0.5],\n    [0.6, 0.7, 0.8, 0.9],\n    [1.0, 1.1, 1.2, 1.3],\n    [1.4, 1.5, 1.6, 1.7],\n    [1.8, 1.9, 2.0, 2.1],\n    [2.2, 2.3, 2.4, 2.5],\n    [2.6, 2.7, 2.8, 2.9],\n    [3.0, 3.1, 3.2, 3.3],\n    [3.4, 3.5, 3.6, 3.7],\n    [3.8, 3.9, 4.0, 4.1]\n])\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(6.0, 10.0))\n\n# Plot the data using imshow\nplt.imshow(data, cmap='hot', interpolation='nearest')\n\n# Add a colorbar to the plot\nplt.colorbar()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ndata = np.array([\n    [1, 2, 3, 4, 5],\n    [2, 3, 4, 5, 6],\n    [3, 4, 5, 6, 7],\n    [4, 5, 6, 7, 8],\n    [5, 6, 7, 8, 9]\n])\n\n# Create a new figure\nfig, ax = plt.subplots(figsize=(6.0, 8.0))\n\n# Plot the data\nax.imshow(data, cmap='viridis')\n\n# Set labels\nax.set_xlabel('To layer')\nax.set_ylabel('Start removing layer')\nax.set_title('Perplexity=7.59')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_16.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ndata = np.array([\n    [659, 777, 247, 153, 953],\n    [807, 187, 643, 373, 819],\n    [109, 172, 759, 665, 327],\n    [459, 274, 797, 660, 453],\n    [784, 637, 523, 435, 405],\n    [935, 945, 739, 651, 243],\n    [729, 651, 388, 717, 891],\n    [863, 700, 644, 650, 760],\n    [292, 949, 365, 142, 473]\n])\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(4.0, 8.0))\n\n# Plot the data using imshow\nplt.imshow(data, cmap='hot', interpolation='nearest')\n\n# Set labels for the x-axis and y-axis\nplt.xlabel('Product and Quarter')\nplt.ylabel('Sales Rank')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_17.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ndata = np.random.rand(3, 31)\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(10.0, 3.0))\n\n# Plot the data\nplt.imshow(data, cmap='viridis', aspect='auto')\n\n# Set labels and title\nplt.xlabel('Time')\nplt.ylabel('Context')\nplt.title('Heatmap of Contextual Data')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_18.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ndata = np.array([\n    [0.55, 0.72, 0.6, 0.44, 0.89],\n    [0.42, 0.65, 0.79, 0.53, 0.09],\n    [0.96, 0.38, 0.7, 0.53, 0.09],\n    [0.57, 0.93, 0.07, 0.54, 0.77]\n])\n\n# Create a new figure\nfig, ax = plt.subplots(figsize=(7.0, 6.0))\n\n# Plot the data\ncax = ax.matshow(data, cmap='YlOrBr')\n\n# Add a colorbar\nfig.colorbar(cax)\n\n# Set labels\nax.set_xticks(np.arange(len(data)))\nax.set_yticks(np.arange(len(data)))\nax.set_xticklabels(['96', '192', '336', '720'])\nax.set_yticklabels(['96', '192', '336', '720'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_19.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ndata = {\n    'Villager': [15.7, 28.1, 26.0, 14.5, 28.6, 10.5],\n    'Hunter': [76.0, 2.1, 0.5, 4.1, 8.1, 9.2],\n    'Witch': [50.8, 12.3, 0.9, 6.2, 15.5, 13.9],\n    'Seer': [49.2, 11.2, 0.6, 7.8, 17.3, 16.3],\n    'Wererewolf': [50.3, 12.0, 0.9, 7.0, 13.4, 16.3]\n}\n\n# Create a new figure\nfig, ax = plt.subplots(figsize=(20.0, 8.0))\n\n# Plot the data\nfor i, (role, values) in enumerate(data.items()):\n    ax.bar(range(len(values)), values, label=role, bottom=np.sum(list(data.values())[:i], axis=0))\n\n# Set labels and title\nax.set_xlabel('Game Rounds')\nax.set_ylabel('Role Voting Percentage')\nax.set_title('Role Voting in the Werewolf Game')\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Sample data\ndata = {\n    'Qwen': [169, 547, 662, 271, 145],\n    'ChatGLM3': [115, 439, 753, 239, 141],\n    'Baichuan2': [219, 585, 557, 259, 153],\n    'LLaMA-2': [67, 941, 708, 432, 162],\n    'Xverse': [177, 554, 661, 235, 1246]\n}\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(9.0, 6.0))\n\n# Plot the data\nfor i, (key, values) in enumerate(data.items()):\n    plt.barh(range(len(values)), values, left=[i * 2 for _ in range(len(values))], height=0.8, label=key)\n\n# Set labels and title\nplt.xlabel('Response Action Category')\nplt.ylabel('Question Type: All three types of questions')\nplt.title('Heatmap of Question Types and Response Action Categories')\n\n# Add a legend\nplt.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_20.pdf", "response": "```python\nimport matplotlib.pyplot as plt  \nimport numpy as np  \n\n# Sample data\ndata = {\n    'Original': [0.1, 0.0, 0.3, 0.0, 0.0, 0.5, 0.0, 0.0],\n    'Adjusted': [0.12, 0.0, 0.44, 0.0, 0.0, 0.44, 0.0, 0.0]\n}\ncategories = ['angry', 'sad', 'disgust', 'contempt', 'feart', 'neutral', 'surprise', 'happy']\n\n# Create a new figure\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Plot the data\nax.bar(categories, data['Original'], color='blue', label='Original')\nax.bar(categories, data['Adjusted'], color='red', label='Adjusted')\n\n# Set labels and title\nax.set_xlabel('Categories')\nax.set_ylabel('Values')\nax.set_title('Comparison of Original and Adjusted Data')\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_21.pdf", "response": "```python\nimport matplotlib.pyplot as plt  \nimport numpy as np  \n\n# Sample data\ndata = np.array([\n    [15.7, 28.1, 2.6, 14.5, 10.5],\n    [76.0, 2.1, 0.5, 8.1, 9.2],\n    [50.8, 12.3, 0.9, 15.5, 13.9],\n    [50.3, 12.0, 0.9, 17.3, 16.3]\n])\n\n# Create a new figure\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Plot the data\ncax = ax.matshow(data, cmap='Blues')\n\n# Add colorbar\nfig.colorbar(cax)\n\n# Set labels\nax.set_xticks(np.arange(len(data[0])))\nax.set_yticks(np.arange(len(data)))\nax.set_xticklabels(['Villager', 'Hunter', 'Witch', 'Seer', 'Abstain'])\nax.set_yticklabels(['Werewolf', 'Seer', 'Witch', 'Villager'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_22.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ndata = np.array([\n    [17, 24, 23],\n    [3, 8, 17],\n    [5, 10, 1],\n    [13, 20, 9],\n    [15, 24, 1]\n])\n\n# Create a new figure\nfig, ax = plt.subplots(figsize=(6.0, 3.0))\n\n# Plot the data\nim = ax.imshow(data, cmap='viridis')\n\n# Add colorbar\ncbar = ax.figure.colorbar(im, ax=ax)\ncbar.ax.set_ylabel('Rank', rotation=-90, va=\"bottom\")\n\n# Set labels\nax.set_xticks(np.arange(len(data[0])))\nax.set_yticks(np.arange(len(data)))\nax.set_xticklabels(['Baseline', 'Reversed Order', 'Reversed IDs'])\nax.set_yticklabels(['#17', '#13', '#5', '#11', '#15'])\n\n# Rotate the tick labels and set their alignment.\nplt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\", rotation_mode=\"anchor\")\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_23.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ndata = np.array([[0.1, 0.08, 0.3, 0.6, 0.0, 0.5, 0.07, 0.1],\n                 [0.12, 0.22, 0.44, 0.3, 0.32, 0.44, 0.1, 0.0]])\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(10.0, 6.0))\n\n# Plot the data\nplt.imshow(data, cmap='gray', interpolation='nearest')\n\n# Set labels for the x-axis\nplt.xticks(np.arange(len(data[0])), ['0.10', '0.08', '0.30', '0.60', '0.00', '0.50', '0.07', '0.10'])\n\n# Set labels for the y-axis\nplt.yticks(np.arange(len(data)), ['0.10', '0.12'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_24.pdf", "response": "```python\nimport matplotlib.pyplot as plt  \nimport numpy as np  \n\n# Sample data\ndata = np.array([\n    [0.8, 2.4, 2.5, 3.9, 0.0],\n    [2.4, 0.0, 4.0, 1.0, 0.0],\n    [1.1, 2.4, 0.8, 4.3, 0.0],\n    [0.6, 0.0, 0.3, 3.1, 0.0],\n    [0.7, 1.7, 0.6, 2.2, 0.0],\n    [1.3, 1.2, 0.0, 0.0, 0.0],\n    [0.1, 2.0, 0.0, 1.9, 0.0]\n])\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(8.0, 8.0))\n\n# Plot the data using imshow\nplt.imshow(data, cmap='YlGnBu', interpolation='nearest')\n\n# Set the colorbar\ncbar = plt.colorbar()\ncbar.set_label('Harvest [t/year]')\n\n# Set labels for the x-axis\nplt.xticks(np.arange(len(data[0])), ['Upland Bros.', 'Smith Gardening', 'Agrifun', 'BioGoods Ltd.', 'Cornylee Corp.'])\n\n# Set labels for the y-axis\nplt.yticks(np.arange(len(data)), ['Cucumber', 'Tomato', 'Lettuce', 'Asparagus', 'Potato', 'Wheat', 'Barley'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_25.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ndata = {\n    'cucumber': [0.8, 2.4, 1.1, 0.6, 0.7],\n    'tomato': [2.4, 0.0, 0.8, 0.6, 0.7],\n    'lettuce': [1.1, 0.0, 0.3, 0.0, 0.2],\n    'asparagus': [0.6, 0.0, 0.0, 0.0, 0.0],\n    'potato': [0.1, 0.0, 0.0, 0.0, 0.0],\n    'barley': [0.1, 0.0, 0.0, 0.0, 0.0]\n}\n\n# Create a new figure\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data\nax.bar(range(len(data['cucumber'])), data['cucumber'], color='green')\nax.bar(range(len(data['tomato'])), data['tomato'], color='yellow')\nax.bar(range(len(data['lettuce'])), data['lettuce'], color='orange')\nax.bar(range(len(data['asparagus'])), data['asparagus'], color='red')\nax.bar(range(len(data['potato'])), data['potato'], color='purple')\nax.bar(range(len(data['barley'])), data['barley'], color='blue')\n\n# Set labels and title\nax.set_xlabel('Cycle')\nax.set_ylabel('Harvest [t/y]')\nax.set_title('Harvest Data')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_26.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ndata = np.random.rand(12, 12)\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(9.0, 6.0))\n\n# Plot the data\nfor i in range(12):\n    ax = fig.add_subplot(4, 3, i + 1)\n    ax.imshow(data[i], cmap='viridis')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_27.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ndata = np.random.rand(10, 10)\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(6.0, 4.0))\n\n# Plot the data\nplt.imshow(data, cmap='viridis')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_28.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ndata = np.array([\n    [1.5, 2.2, 1.8, 3.2, 0.5],\n    [2.8, 0.5, 3.6, 1.8, 2.2],\n    [1.0, 2.1, 0.9, 4.0, 1.5],\n    [0.7, 0.6, 0.4, 3.4, 0.5],\n    [0.9, 1.6, 0.7, 2.3, 0.6],\n    [1.2, 1.3, 0.5, 2.0, 0.7],\n    [0.3, 1.9, 0.6, 1.8, 0.8]\n])\n\n# Create a new figure\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data\nim = ax.imshow(data, cmap='viridis')\n\n# Add colorbar\ncbar = ax.figure.colorbar(im, ax=ax)\n\n# Set labels\nax.set_xticks(np.arange(len(data[0])))\nax.set_yticks(np.arange(len(data)))\nax.set_xticklabels(['Vendor A', 'Vendor B', 'Vendor C', 'Vendor D', 'Vendor E', 'Vendor F', 'Vendor G'])\nax.set_yticklabels(['apples', 'bananas', 'cherries', 'dates', 'elderberries', 'figs', 'grapes'])\n\n# Rotate the tick labels and set their alignment.\nplt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\", rotation_mode=\"anchor\")\n\n# Loop over data dimensions and create text annotations.\nfor i in range(len(data)):\n    for j in range(len(data[i])):\n        text = ax.text(j, i, data[i, j], ha=\"center\", va=\"center\", color=\"w\")\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_29.pdf", "response": "```python\nimport matplotlib.pyplot as plt  \nimport numpy as np  \n\n# Data for plotting  \ndata = np.array([[17, 79, 4, 42], [36, 53, 5, 38], [28, 34, 0, 0], [23, 35, 75, 55]])  \nlabels = ['Low', 'Medium', 'High']  \n\n# Create a new figure  \nfig, ax = plt.subplots(figsize=(5.0, 4.0))  \n\n# Plot the data  \nax.barh(labels, data[:, 0], color='blue')  \nax.barh(labels, data[:, 1], left=data[:, 0], color='green')  \nax.barh(labels, data[:, 2], left=data[:, 0] + data[:, 1], color='red')  \nax.barh(labels, data[:, 3], left=data[:, 0] + data[:, 1] + data[:, 2], color='yellow')  \n\n# Set labels and title  \nax.set_xlabel('Degree of acceptance of a product')  \nax.set_title('Degree of acceptance of a product')  \n\n# Show the plot  \nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ndata = np.random.rand(5, 5)\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(8.0, 6.0))\n\n# Plot the data\nplt.imshow(data, cmap='viridis')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_30.pdf", "response": "```python\nimport matplotlib.pyplot as plt  \nimport numpy as np  \n\n# Sample data\ndata = np.random.rand(10, 12)\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(8.0, 6.0))\n\n# Plot the data\nplt.imshow(data, cmap='hot', interpolation='nearest')\n\n# Set labels and title\nplt.xlabel('Timeshift')\nplt.ylabel('Scales')\nplt.title(\"ROC's AUC\")\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ndata = np.random.rand(10, 30)\ncategories = ['C Subject', 'C Relation', 'C Attribute', 'Q Subject', 'Q Relation', 'Last']\ncounts = range(30)\n\n# Create a new figure\nfig, ax = plt.subplots(figsize=(6.0, 3.0))\n\n# Plot the data\nim = ax.imshow(data, cmap='viridis')\n\n# Set labels and title\nax.set_xticks(counts)\nax.set_yticks(range(len(categories)))\nax.set_xticklabels(counts)\nax.set_yticklabels(categories)\nax.set_title('Heatmap of Categories vs Counts')\n\n# Add colorbar\ncbar = ax.figure.colorbar(im, ax=ax)\ncbar.ax.set_ylabel('Value', rotation=-90, va=\"bottom\")\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ndata = [\n    [44, 12, 0, 0],\n    [35, 8, 24, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    ["}
{"file": "dataset/ori_500/heatmap_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ndata = {\n    'Summit': [876, 136, 435, 534, 322, 804],\n    'Perlmutter': [750, 1737, 742, 375, 750, 1825],\n    'Corona': [764, 676, 782, 421, 925, 911],\n    'Frontier': [482, 120, 843, 1170, 925, 911]\n}\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Plot the data\nfor i, (key, values) in enumerate(data.items()):\n    ax.bar(range(len(values)), values, label=key, alpha=0.7)\n\n# Set labels and title\nax.set_xlabel('Programming Model')\nax.set_ylabel('BabelStream triad Average Memory Bandwidth (GB/s)')\nax.set_title('BabelStream triad Average Memory Bandwidth')\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndata = [[1.0, 0.9, 0.89, 0.64, 0.65, 0.71, 0.82],\n        [0.9, 1.0, 0.93, 0.66, 0.69, 0.72, 0.82],\n        [0.89, 0.93, 1.0, 0.66, 0.69, 0.72, 0.82],\n        [0.88, 0.92, 1.0, 0.68, 0.69, 0.72, 0.82],\n        [0.88, 0.92, 1.0, 0.68, 0.69, 0.72, 0.82],\n        [0.88, 0.92, 1.0, 0.68, 0.69, 0.72, 0.82],\n        [0.88, 0.92, 1.0, 0.68, 0.69, 0.72, 0.82]]\n\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\nim = ax.imshow(data, cmap='hot', interpolation='nearest')\n\nax.set_xticks(np.arange(len(data)))\nax.set_yticks(np.arange(len(data)))\n\nax.set_xticklabels(['en', 'fr', 'es', 'pt', 'bn', 'ur', 'hi'])\nax.set_yticklabels(['en', 'fr', 'es', 'pt', 'bn', 'ur', 'hi'])\n\nfor i in range(len(data)):\n    for j in range(len(data)):\n        text = ax.text(j, i, round(data[i, j], 2),\n                       ha=\"center\", va=\"center\", color=\"w\")\n\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt  \nimport numpy as np  \n\n# Sample data\ndata = {\n    'ROUGE': [0.19, 0.62, 0.53, 0.52],\n    'BertScore': [0.19, 0.62, 0.53, 0.52],\n    'SimCSE': [0.16, 0.53, 0.50, 0.39],\n    'PMI': [0.16, 0.53, 0.50, 0.39],\n    'GPT-3.5': [0.03, 0.24, 0.24, 0.20],\n    'CrossAttn': [0.03, 0.10, 0.06, 0.20],\n    'PPL': [0.07, 0.28, 0.26, 0.20]\n}\n\n# Create a new figure\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Ranking of Metrics')\n\n# Set the x-axis label\nax.set_xlabel('Metrics')\n\n# Set the y-axis label\nax.set_ylabel('Rank')\n\n# Set the tick labels for the x-axis\nax.set_xticks(range(len(data)))\nax.set_xticklabels(list(data.keys()))\n\n# Set the tick labels for the y-axis\nax.set_yticks(range(1, len(data['ROUGE']) + 1))\nax.set_yticklabels([str(i) for i in range(1, len(data['ROUGE']) + 1)])\n\n# Plot the data\nfor i, (key, values) in enumerate(data.items()):\n    ax.barh(range(1, len(values) + 1), values, left=[i * len(values)] * len(values), height=0.8, align='center', alpha=0.7, label=key)\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ndata = np.random.rand(15, 15)\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(5.0, 6.0))\n\n# Plot the data\nplt.imshow(data, cmap='viridis')\n\n# Set labels\nplt.xlabel('Layers')\nplt.ylabel('<endofext>')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ndata = np.random.rand(10, 10)\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(8.0, 7.0))\n\n# Plot the data\nplt.imshow(data, cmap='viridis')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ndata = np.random.rand(100, 2)\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(10.0, 3.0))\n\n# Plot the data\nplt.scatter(data[:, 0], data[:, 1], c=data[:, 1], cmap='viridis')\n\n# Set labels\nplt.xlabel('Cosine Similarity')\nplt.ylabel('Frequency')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ndata = np.random.rand(4, 5, 25)\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(10.0, 8.0))\n\n# Plot the first subplot\nplt.subplot(2, 2, 1)\nplt.imshow(data[0], cmap='viridis')\nplt.title('Baseline')\n\n# Plot the second subplot\nplt.subplot(2, 2, 2)\nplt.imshow(data[1], cmap='viridis')\nplt.title('MIRL w/ MULT')\n\n# Plot the third subplot\nplt.subplot(2, 2, 3)\nplt.imshow(data[2], cmap='viridis')\nplt.title('MIRL + OCLR w/ MUL')\n\n# Plot the fourth subplot\nplt.subplot(2, 2, 4)\nplt.imshow(data[3], cmap='viridis')\nplt.title('MIRL + OCLR w/ DOTLA')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ndata = {\n    'MATHWELL': {'MaC': [0.3, 0.4, 0.5], 'Ma': [0.2, 0.3, 0.4]},\n    'Llama-2': {'MaC': [0.6, 0.7, 0.8], 'Ma': [0.5, 0.6, 0.7]},\n    'LLEMMMA': {'MaC': [0.9, 1.0, 1.1], 'Ma': [0.8, 0.9, 1.0]},\n    'MAMmoTH': {'MaC': [1.2, 1.3, 1.4], 'Ma': [1.1, 1.2, 1.3]}\n}\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(7.0, 8.0))\n\n# Plot histograms for each dataset\nfor i, (key, values) in enumerate(data.items()):\n    ax = fig.add_subplot(3, 2, i + 1)\n    ax.set_title(key)\n    ax.set_xlabel('FKGL')\n    ax.set_ylabel('Density')\n    \n    # Plot histograms for MaC and Ma\n    for j, (subkey, values) in enumerate(values.items()):\n        ax.hist(values, bins=10, alpha=0.5, label=subkey)\n    \n    # Add a legend\n    ax.legend()\n\n# Adjust layout and show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Sample data\ndata = [\n    [1000, 1000, 1000, 1000, 1000],\n    [1000, 1000, 1000, 1000, 1000],\n    [1000, 1000, 1000, 1000, 1000],\n    [1000, 1000, 1000, 1000, 1000],\n    [1000, 1000, 1000, 1000, 1000]\n]\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(5.0, 5.0))\n\n# Plot the data\nplt.imshow(data, cmap='viridis')\n\n# Set labels\nplt.xlabel('Animal Weight (Tons)')\nplt.ylabel('Frequency')\nplt.title('Desert Animals in the Wild')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ndata = np.array([\n    [10, 20, 30, 40, 50, 60, 70, 80],\n    [15, 25, 35, 45, 55, 65, 75, 85],\n    [20, 30, 40, 50, 60, 70, 80, 90]\n])\n\n# Create a new figure\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Plot the data\nax.imshow(data, cmap='viridis')\n\n# Set labels\nax.set_xlabel('X Label')\nax.set_ylabel('Y Label')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ndata = np.random.rand(100, 2) * 10  # Random data for demonstration\n\n# Create a new figure\nfig = plt.figure(figsize=(8.0, 6.0))\n\n# Plot the histogram\nplt.hist2d(data[:, 0], data[:, 1], bins=50, cmap='Blues')\n\n# Add a colorbar\nplt.colorbar()\n\n# Set labels\nplt.xlabel('Wind Speed (km/h)')\nplt.ylabel('Measurements')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_16.pdf", "response": "```python\nimport matplotlib.pyplot as plt  \nimport numpy as np  \n\n# Sample data\ndata = np.array([[120, 130, 140], [110, 120, 130], [100, 110, 120]])\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(5.0, 4.0))\n\n# Plot the data\nplt.imshow(data, cmap='hot', interpolation='nearest')\n\n# Add a colorbar to the plot\nplt.colorbar()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_17.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ndata = np.random.rand(10, 10)\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(16.0, 7.0))\n\n# Plot the data\nplt.imshow(data, cmap='viridis')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_18.pdf", "response": "```python\nimport matplotlib.pyplot as plt  \nimport numpy as np  \n\n# Sample data\ndata = np.array([\n    [15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1],\n    [14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1],\n    [13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1],\n    [12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1],\n    [11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1],\n    [10, 9, 8, 7, 6, 5, 4, 3, 2, 1],\n    [9, 8, 7, 6, 5, 4, 3, 2, 1],\n    [8, 7, 6, 5, 4, 3, 2, 1],\n    [7, 6, 5, 4, 3, 2, 1],\n    [6, 5, 4, 3, 2, 1],\n    [5, 4, 3, 2, 1],\n    [4, 3, 2, 1],\n    [3, 2, 1],\n    [2, 1],\n    [1]\n])\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(12.0, 8.0))\n\n# Plot the data\nplt.imshow(data, cmap='viridis', interpolation='nearest')\n\n# Set labels and title\nplt.xlabel('Number of Nominations')\nplt.ylabel('Category')\nplt.title('Histogram of Grammy Nominations Across Expanded Categories 2019-2023')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_19.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ndata = np.random.rand(10, 10)\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(10.0, 7.0))\n\n# Plot the data\nplt.imshow(data, cmap='viridis')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt  \nimport numpy as np  \n\n# Sample data\ndata = np.random.rand(10, 10) * 60\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(9.0, 6.0))\n\n# Plot the data\nplt.imshow(data, cmap='viridis')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_20.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ndata = {\n    'Swiss': [0.1, 0.2, 0.3],\n    'New Zealand': [0.4, 0.5, 0.6]\n}\n\n# Create a new figure with specified size\nfig, axes = plt.subplots(2, 2, figsize=(10.0, 8.0))\n\n# Plot data on each subplot\nfor ax, (label, values) in zip(axes.flatten(), data.items()):\n    ax.bar(range(len(values)), values, color=['blue', 'orange'])\n    ax.set_title(label)\n    ax.set_xlabel('Sweetness')\n    ax.set_ylabel('Density')\n\n# Adjust layout and show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt  \nimport numpy as np  \n\n# Sample data\ndata = np.array([[1000, 100, 10, 1], [100, 10, 1, 0.1], [10, 1, 0.1, 0.01]])\n\n# Create a new figure\nfig = plt.figure(figsize=(5.0, 4.0))  \nax = fig.add_subplot(111)  \n\n# Plot the data\nax.bar(range(len(data)), data[:, 0], color='green', label='Camel')  \nax.bar(range(len(data)), data[:, 1], bottom=data[:, 0], color='pink', label='Kangaroo')  \n\n# Set labels and title\nax.set_xlabel('Concept Weight')  \nax.set_ylabel('Count')  \nax.set_title('CIFAR100 \\'Desert\\' Concept')  \nax.legend()  \n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ndata = np.array([\n    [100, 20],\n    [80, 40],\n    [60, 60],\n    [40, 80],\n    [20, 100]\n])\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(5.0, 3.0))\n\n# Plot the data\nplt.bar(range(len(data)), data[:, 0], color='yellow', label='Center')\nplt.bar(range(len(data)), data[:, 1], bottom=data[:, 0], color='blue', label='Random')\n\n# Set labels and title\nplt.xlabel('Distance Difference (Random vs Center)')\nplt.ylabel('Number of Examples')\nplt.title('Comparison of Center and Random')\nplt.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt  \nimport numpy as np  \n\n# Sample data\nx = np.array([0.0, 2.5, 5.0, 7.5, 10.0, 12.5])\ny = np.array([1000, 500, 200, 100, 50, 20])\n\n# Create a new figure with specified size\nplt.figure(figsize=(4.0, 3.0))\n\n# Plot the data\nplt.bar(x, y, color='orange')\n\n# Set labels and title\nplt.xlabel('Number of Repetition')\nplt.ylabel('Number of Clusters')\nplt.title('Clusters vs Number of Repetition')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ndata = np.array([[400, 10], [300, 20], [200, 30], [100, 40], [50, 50]])\n\n# Create a new figure\nfig = plt.figure(figsize=(5.0, 3.0))\n\n# Plot the data\nplt.barh(range(len(data)), data[:, 0], color='blue', label='Correctly classified')\nplt.barh(range(len(data)), data[:, 1], left=data[:, 0], color='orange', label='Misclassified')\n\n# Set labels and title\nplt.xlabel('Distance to threshold')\nplt.ylabel('Class')\nplt.title('Confusion Matrix')\nplt.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt  \nimport numpy as np  \n\n# Sample data\ndata = np.random.rand(10, 10)\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(8.0, 8.0))\n\n# Plot the data\nplt.imshow(data, cmap='viridis')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt  \nimport numpy as np  \n\n# Sample data\ndata = [1000, 200, 400, 600, 800]\n\n# Create a new figure\nfig = plt.figure(figsize=(6.0, 5.0))\n\n# Plot the data\nplt.bar(range(len(data)), data, color='blue')\n\n# Set labels and title\nplt.xlabel('% images overlap')\nplt.ylabel('Number of queries')\nplt.title('Histogram of Number of Queries by % Images Overlap')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ndata = np.random.rand(1000)\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(10.0, 7.0))\n\n# Plot the histogram\nplt.hist(data, bins=50, color='blue')\n\n# Set labels and title\nplt.xlabel('Value')\nplt.ylabel('Frequency')\nplt.title('Histogram of Random Data')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.array([5, 10, 15, 20])\ny1 = np.array([20, 40, 60, 80])\ny2 = np.array([20, 40, 60, 80])\ny3 = np.array([20, 40, 60, 80])\ny4 = np.array([20, 40, 60, 80])\n\n# Create a new figure\nfig = plt.figure(figsize=(8.0, 6.0))\n\n# Plot the data\nplt.plot(x, y1, label='JPEG+LDPC')\nplt.plot(x, y2, label='DEEPJSCC w/o ofdm')\nplt.plot(x, y3, label='DEEPJSCC w/ ofdm')\nplt.plot(x, y4, label='OURS')\n\n# Set labels and title\nplt.xlabel('SNR')\nplt.ylabel('Classification Accuracy (%)')\nplt.title('Classification Accuracy vs SNR')\n\n# Add a legend\nplt.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt  \nimport numpy as np  \n\n# Sample data\nn = np.arange(8)\ncontent = [5, 6, 6, 4, 3, 2, 1, 0]\norganization = [6, 6, 5, 3, 2, 1, 0, 0]\nlanguage = [6, 6, 5, 3, 2, 1, 0, 0]\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(8.0, 6.0))\n\n# Plot the data\nplt.plot(n, content, label='Content', color='blue')\nplt.plot(n, organization, label='Organization', color='orange')\nplt.plot(n, language, label='Language', color='green')\n\n# Set labels and title\nplt.xlabel('n')\nplt.ylabel('Performance Gain (%)')\nplt.title('Performance Metrics Over Time')\nplt.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt  \nimport numpy as np  \n\n# Sample data\nx = np.arange(81)\ny1 = np.random.rand(81)\ny2 = np.random.rand(81)\ny3 = np.random.rand(81)\ny4 = np.random.rand(81)\ny5 = np.random.rand(81)\ny6 = np.random.rand(81)\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(6.0, 6.0))\n\n# Plot the data\nplt.plot(x, y1, 'r', label='coco (10k)')\nplt.plot(x, y2, 'g', label='laion (10k)')\nplt.plot(x, y3, 'b', label='coco (5k)')\nplt.plot(x, y4, 'y', label='laion (5k)')\nplt.plot(x, y5, 'm', label='CLIP')\nplt.plot(x, y6, 'c', label='CLIP')\n\n# Set labels and title\nplt.xlabel('Decomposition IO Norm')\nplt.ylabel('Accuracy')\nplt.title('Effect of Vocabulary on Zero Shot Accuracy')\n\n# Add a legend\nplt.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt  \nimport numpy as np  \n\n# Sample data\nx = np.array([0.25, 0.5, 0.75, 1.0])\ny1 = np.array([0.03, 0.02, 0.01, 0.00])\ny2 = np.array([0.04, 0.03, 0.02, 0.01])\ny3 = np.array([0.05, 0.04, 0.03, 0.02])\n\n# Create a new figure\nfig = plt.figure(figsize=(8.0, 6.0))\n\n# Plot the data\nplt.plot(x, y1, 'g^', label='MAXN=512')\nplt.plot(x, y2, 'rd', label='MAXN=1024')\nplt.plot(x, y3, 'bo', label='MAXN=2048')\n\n# Set labels and title\nplt.xlabel('Sample Ratio')\nplt.ylabel('Std of ACC')\nplt.title('Plot of Std of ACC vs Sample Ratio')\n\n# Add a legend\nplt.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt  \nimport numpy as np  \n\n# Sample data\nx = np.arange(201)\ny_base = np.random.rand(201)\ny_ours = np.random.rand(201)\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(8.0, 10.0))\n\n# Plot the data\nplt.plot(x, y_base, label='base')\nplt.plot(x, y_ours, label='ours')\n\n# Set labels and title\nplt.xlabel('Training iterations')\nplt.ylabel('FID (dJ)')\nplt.title('FID (dJ) vs Training Iterations')\n\n# Add a legend\nplt.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt  \nimport numpy as np  \n\n# Sample data\nx = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28])\ny1 = np.random.rand(28)\ny2 = np.random.rand(28)\n\n# Create a new figure\nfig = plt.figure(figsize=(6.0, 4.0))\n\n# Plot the data\nplt.plot(x, y1, 'b-', label='Manually-analyzed')\nplt.plot(x, y2, 'r-', label='Auto-profiled')\n\n# Set labels and title\nplt.xlabel('Week')\nplt.ylabel('Normalized Value')\nplt.title('Comparison of Auto-profiled and Manually-analyzed Data')\n\n# Add a legend\nplt.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt  \nimport numpy as np  \n\n# Sample data\nx = np.arange(1, 21)\ny1 = np.random.randint(20, 100, 20)\ny2 = np.random.randint(20, 100, 20)\ny3 = np.random.randint(20, 100, 20)\ny4 = np.random.randint(20, 100, 20)\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(8.0, 6.0))\n\n# Plot the data\nplt.plot(x, y1, 'b^', label='BaCE')\nplt.plot(x, y2, 'r^', label='LWF')\nplt.plot(x, y3, 'm^', label='EWC')\nplt.plot(x, y4, 'p^', label='SEQ')\n\n# Set labels and title\nplt.xlabel('Task')\nplt.ylabel('Average Accuracy (%)')\nplt.title('Average Accuracy of Different Models')\n\n# Add a legend\nplt.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_16.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.linspace(0, 1, 11)\ny1 = np.random.rand(11)\ny2 = np.random.rand(11)\ny3 = np.random.rand(11)\n\n# Create a new figure\nfig = plt.figure(figsize=(8.0, 6.0))\n\n# Plot the data\nplt.plot(x, y1, 'bo-', label='Oesense')\nplt.plot(x, y2, 'ro-', label='KWS')\nplt.plot(x, y3, 'g^-', label='ECG5000')\n\n# Set labels and title\nplt.xlabel('Uncertainty threshold')\nplt.ylabel('Accuracy')\nplt.title('Comparison of Models')\n\n# Add a legend\nplt.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_17.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.linspace(0, 120, 10)\ny = np.log10(np.random.rand(10))\n\n# Create a new figure\nfig = plt.figure(figsize=(6.0, 4.0))\nax = fig.add_subplot(111)\n\n# Plot the data\nax.plot(x, y, 'b-')\n\n# Set labels\nax.set_xlabel('Number of Parameters')\nax.set_ylabel('Log KL Divergence')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_18.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.linspace(0, 2000, 100)\ny1 = np.sin(x / 500)\ny2 = np.cos(x / 500)\n\n# Create a new figure\nfig, ax = plt.subplots(figsize=(9.0, 4.0))\n\n# Plot the data\nax.plot(x, y1, label='7B')\nax.plot(x, y2, label='7B (Fine-tuned)')\n\n# Set labels and title\nax.set_xlabel('Iterations')\nax.set_ylabel('Attack Success Rate')\nax.set_title('GPT-4 Evaluation')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_19.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.logspace(-2, 0, 10)\ny_full = np.random.rand(10) * 80 + 40\ny_spt = np.random.rand(10) * 80 + 40\ny_vpt = np.random.rand(10) * 80 + 40\n\n# Create a new figure\nfig = plt.figure(figsize=(5.0, 4.0))\n\n# Plot the data\nplt.plot(x, y_full, label='Full', color='green')\nplt.plot(x, y_spt, label='SPT', color='red')\nplt.plot(x, y_vpt, label='VPT', color='blue')\n\n# Set labels and title\nplt.xlabel('Fraction of training data (log scale)')\nplt.ylabel('Test accuracy (%)')\nplt.title('Test Accuracy vs Fraction of Training Data')\n\n# Add a legend\nplt.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.linspace(0, 200, 100)\ny1 = np.sin(x / 50)\ny2 = np.cos(x / 50)\ny3 = np.tan(x / 50)\n\n# Create a new figure\nfig = plt.figure(figsize=(4.0, 3.0))\n\n# Plot the data\nplt.plot(x, y1, label='sin(x/50)')\nplt.plot(x, y2, label='cos(x/50)')\nplt.plot(x, y3, label='tan(x/50)')\n\n# Set labels and title\nplt.xlabel('Gradient Steps (x 62.5K)')\nplt.ylabel('Value')\nplt.title('Sample Plot')\n\n# Add a legend\nplt.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_20.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nratio_r = np.linspace(0.2, 1.0, 9)\nperformance = np.random.rand(4, 9) * 0.04 + 0.76\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(16.0, 8.0))\n\n# Plot the data\nfor i in range(4):\n    plt.plot(ratio_r, performance[i], label=f'Performance {i+1}')\n\n# Set labels and title\nplt.xlabel('Ratio r')\nplt.ylabel('Performance')\nplt.title('Performance vs Ratio r')\n\n# Add a legend\nplt.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_21.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nimbalance_ratios = np.linspace(120, 110, 11)\nours = np.random.rand(11) * 5 + 75\nacr = np.random.rand(11) * 5 + 75\n\n# Create a new figure\nfig, ax = plt.subplots(figsize=(9.0, 6.0))\n\n# Plot the data\nax.plot(imbalance_ratios, ours, 'o-', label='Ours')\nax.plot(imbalance_ratios, acr, 's-', label='ACR')\n\n# Set labels and title\nax.set_xlabel('Imbalance Ratio of Unlabeled Data (%)')\nax.set_ylabel('Top-1 Acc (%)')\nax.set_title('Top-1 Accuracy vs Imbalance Ratio of Unlabeled Data')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_22.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.array([40, 50, 60, 70, 80, 90, 100])\ny1 = np.array([2.91, 3.11, 3.32, 3.53, 3.63, 3.74, 3.94])\ny2 = np.array([3.11, 3.32, 3.53, 3.63, 3.74, 3.94, 3.94])\ny3 = np.array([3.32, 3.53, 3.63, 3.74, 3.94, 3.94, 3.94])\ny4 = np.array([3.53, 3.63, 3.74, 3.94, 3.94, 3.94, 3.94])\ny5 = np.array([3.63, 3.74, 3.94, 3.94, 3.94, 3.94, 3.94])\ny6 = np.array([3.74, 3.94, 3.94, 3.94, 3.94, 3.94, 3.94])\n\n# Create a new figure\nfig = plt.figure(figsize=(5.0, 4.0))\n\n# Plot the data\nplt.plot(x, y1, label='APTQ', color='blue')\nplt.plot(x, y2, label='LLaMa-7B (FP16): 5.22', color='purple')\nplt.plot(x, y3, label='OWQ-4bit: 5.56', color='orange')\nplt.plot(x, y4, label='GPTQ-4bit: 5.62', color='green')\nplt.plot(x, y5, label='LLM-QAT-4bit: 7.4', color='red')\nplt.plot(x, y6, label='LLM-QAT-4bit: 7.4', color='pink')\n\n# Set labels and title\nplt.xlabel('Ratio of 4-bit Utilization (%)')\nplt.ylabel('Perplexity (PPL)')\nplt.title('Perplexity vs Ratio of 4-bit Utilization')\n\n# Add a legend\nplt.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_23.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.array([2**1, 2**2, 2**3, 2**4, 2**5, 2**6, 2**7])\ny = np.array([82.98, 89.53, 90.47, 92.41, 93.7, 96.75, 96.75])\n\n# Create a new figure\nplt.figure(figsize=(5.0, 2.0))\n\n# Plot the data\nplt.plot(x, y, marker='o', linestyle='-', color='blue')\n\n# Set labels\nplt.xlabel('Number of Training Objects')\nplt.ylabel('Coverage Ratio (%)')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_24.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.linspace(0, 8, 10)\ny_avg = np.linspace(750, 600, 10)\ny_std = np.linspace(750, 600, 10)\n\n# Create a new figure\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Plot the data\nax.plot(x, y_avg, label='Average', color='blue')\nax.fill_between(x, y_avg - y_std, y_avg + y_std, color='lightblue', alpha=0.5, label='Standard Deviation')\n\n# Set labels and title\nax.set_xlabel('Iterations')\nax.set_ylabel('N-ELBO')\nax.set_title('ELBO vs Iterations')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_25.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.array([1, 2, 3, 4, 5, 6, 7, 8])\ny1 = np.array([2.5, 2.5, 2.5, 2.5, 2.5, 2.5, 2.5, 2.5])\ny2 = np.array([2.5, 2.5, 2.5, 2.5, 2.5, 2.5, 2.5, 2.5])\ny3 = np.array([2.5, 2.5, 2.5, 2.5, 2.5, 2.5, 2.5, 2.5])\n\n# Create a new figure\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data\nax.plot(x, y1, label='Baseline')\nax.plot(x, y2, label='SoftMoE')\nax.plot(x, y3, label='Top1-MoE')\n\n# Set labels and title\nax.set_xlabel('Number of experts')\nax.set_ylabel('DoN')\nax.set_title('IQM Human Normalized Score')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_26.pdf", "response": "```python\nimport matplotlib.pyplot as plt  \nimport numpy as np  \n\n# Sample data\nvocab_sizes = [256, 512, 1024, 2048, 4096, 8192, 16384]\nbpe_values = [0.4, 0.6, 0.8, 0.9, 0.7, 0.6, 0.5]\nwordpunct_values = [0.4, 0.6, 0.8, 0.9, 0.7, 0.6, 0.5]\nwhitespace_values = [0.4, 0.6, 0.8, 0.9, 0.7, 0.6, 0.5]\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(8.0, 6.0))\n\n# Plot the data\nplt.plot(vocab_sizes, bpe_values, 'bo-', label='BPE')\nplt.plot(vocab_sizes, wordpunct_values, 'ro-', label='Wordpunct')\nplt.plot(vocab_sizes, whitespace_values, 'go-', label='Whitespaces')\n\n# Set labels and title\nplt.xlabel('Vocabulary Size')\nplt.ylabel('Test set TPR | FPR = 10^-4')\nplt.title('Test set TPR | FPR = 10^-4')\n\n# Add a legend\nplt.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_27.pdf", "response": "```python\nimport matplotlib.pyplot as plt  \nimport numpy as np  \n\n# Sample data  \ncompression_rate = np.array([1, 12, 18, 30])  \nword_error_rate_cnn = np.array([26.0, 34.4, 28.6, 55.0])  \nword_error_rate_cif = np.array([24.7, 36.8, 29.8, 35.0])  \nword_error_rate_star = np.array([18.0, 30.2, 19.8, 22.6])  \n\n# Create a new figure  \nfig = plt.figure(figsize=(6.0, 6.0))  \n\n# Plot the data  \nplt.plot(compression_rate, word_error_rate_cnn, label='CNN', color='pink')  \nplt.plot(compression_rate, word_error_rate_cif, label='CIF', color='purple')  \nplt.plot(compression_rate, word_error_rate_star, label='STAR', color='black')  \n\n# Set labels and title  \nplt.xlabel('Compression Rate (%)')  \nplt.ylabel('Word Error Rate (%)')  \nplt.title('Word Error Rate vs Compression Rate')  \n\n# Add a legend  \nplt.legend()  \n\n# Show the plot  \nplt.show()\n```"}
{"file": "dataset/ori_500/line_28.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.array([25, 50, 75, 100, 125, 150, 175, 200])\ny1 = np.array([0.93, 0.93, 0.93, 0.93, 0.93, 0.93, 0.93, 0.93])\ny2 = np.array([0.85, 0.85, 0.85, 0.85, 0.85, 0.85, 0.85, 0.85])\ny3 = np.array([0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75])\n\n# Create a new figure\nfig = plt.figure(figsize=(6.0, 4.0))\n\n# Plot the data\nplt.plot(x, y1, 'ro-', label='PILOTE')\nplt.plot(x, y2, 'bo-', label='Re-trained model')\nplt.plot(x, y3, 'g--', label='Pre-trained model accuracy')\n\n# Set labels and title\nplt.xlabel('Number of exemplars in class \\'Run\\'')\nplt.ylabel('Avg. accuracy of five rounds')\nplt.title('Comparison of models')\n\n# Add a legend\nplt.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_29.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Sample data\nsteps = range(21)\nxllm = [0.1, 0.15, 0.2, 0.25, 0.3, 0.35, 0.4, 0.45, 0.5, 0.55, 0.6, 0.65, 0.7, 0.75, 0.8, 0.85, 0.9, 0.95, 1.0, 1.05, 1.1]\nsingle_pass_llm = [0.1, 0.15, 0.2, 0.25, 0.3, 0.35, 0.4, 0.45, 0.5, 0.55, 0.6, 0.65, 0.7, 0.75, 0.8, 0.85, 0.9, 0.95, 1.0, 1.05, 1.1]\n\n# Create a new figure\nfig = plt.figure(figsize=(4.0, 3.0))\n\n# Plot the data\nplt.plot(steps, xllm, label='xLLM')\nplt.plot(steps, single_pass_llm, label='Single-Pass LLM')\n\n# Set labels and title\nplt.xlabel('# of Steps')\nplt.ylabel('Avg Fidelity')\nplt.title('Fidelity vs. Number of Steps')\n\n# Add a legend\nplt.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt  \nimport numpy as np  \n\n# Sample data\ndata = {\n    'All': [75, 75, 75, 75, 75, 75],\n    'MLP': [65, 65, 65, 65, 65, 65],\n    'GCN': [65, 65, 65, 65, 65, 65],\n    'NCN': [65, 65, 65, 65, 65, 65],\n    'Neognn-Buddy': [65, 65, 65, 65, 65, 65],\n    'SEAL': [65, 65, 65, 65, 65, 65],\n    'Node2Vec': [65, 65, 65, 65, 65, 65]\n}\n\n# Create a new figure\nfig = plt.figure(figsize=(10.0, 5.0))\n\n# Plot the data\nfor key, value in data.items():\n    plt.plot(value, label=key)\n\n# Set labels and title\nplt.xlabel('Epoch')\nplt.ylabel('Hits@50')\nplt.title('Hits@50 for Different Models')\nplt.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_30.pdf", "response": "```python\nimport matplotlib.pyplot as plt  \nimport numpy as np  \n\n# Sample data\nx = np.arange(2, 13)\ny1 = np.random.rand(11)\ny2 = np.random.rand(11)\n\n# Create a new figure\nfig = plt.figure(figsize=(6.0, 4.0))\n\n# Plot the data\nplt.plot(x, y1, label='outside-code-diff')\nplt.plot(x, y2, label='inside-code-diff')\n\n# Set labels and title\nplt.xlabel('Layer')\nplt.ylabel('Value')\nplt.title('Android')\n\n# Add a legend\nplt.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_31.pdf", "response": "```python\nimport matplotlib.pyplot as plt  \nimport numpy as np  \n\n# Sample data\nx = np.array([6, 7, 8, 9])\ny1 = np.array([0.5, 0.4, 0.3, 0.2])\ny2 = np.array([0.6, 0.5, 0.4, 0.3])\ny3 = np.array([0.7, 0.6, 0.5, 0.4])\ny4 = np.array([0.8, 0.7, 0.6, 0.5])\ny5 = np.array([0.9, 0.8, 0.7, 0.6])\n\n# Create a new figure\nfig = plt.figure(figsize=(8.0, 6.0))\n\n# Plot the data\nplt.plot(x, y1, label='Direct (100 samples)')\nplt.plot(x, y2, label='RFFT (100 samples)')\nplt.plot(x, y3, label='Scratchpad (100 samples)')\nplt.plot(x, y4, label='Scratchpad (5000 samples)')\nplt.plot(x, y5, label='Scratchpad (5000 samples)')\n\n# Set labels and title\nplt.xlabel('Digit Length')\nplt.ylabel('Digit Accuracy')\nplt.title('Digit Accuracy vs Digit Length')\n\n# Add a legend\nplt.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_32.pdf", "response": "```python\nimport matplotlib.pyplot as plt  \nimport numpy as np  \n\n# Sample data\nx = np.arange(100)\ny1 = np.random.rand(100)\ny2 = np.random.rand(100)\n\n# Create a new figure\nfig = plt.figure(figsize=(8.0, 6.0))\n\n# Plot the data\nplt.plot(x, y1, 'o', label='iaion')\nplt.plot(x, y2, '-', label='CLIP')\n\n# Set labels and title\nplt.xlabel('Decomposition IO Norm')\nplt.ylabel('Accuracy')\nplt.title('CIFAR100 States Zero Shot Accuracy')\n\n# Add a legend\nplt.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_33.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.array([20, 40, 60, 80, 100])\ny1 = np.array([0.55, 0.6, 0.65, 0.7, 0.75])\ny2 = np.array([0.55, 0.6, 0.65, 0.7, 0.75])\ny3 = np.array([0.55, 0.6, 0.65, 0.7, 0.75])\ny4 = np.array([0.55, 0.6, 0.65, 0.7, 0.75])\ny5 = np.array([0.55, 0.6, 0.65, 0.7, 0.75])\n\n# Create a new figure\nfig = plt.figure(figsize=(6.0, 4.0))\n\n# Plot the data\nplt.plot(x, y1, 'o-', label='CNN')\nplt.plot(x, y2, 'r^-', label='CNN+HMM')\nplt.plot(x, y3, 'bs-', label='RF')\nplt.plot(x, y4, 'g^-', label='RF+HMM')\n\n# Set labels and title\nplt.xlabel('No. of Users in Development Set')\nplt.ylabel('F1')\nplt.title('Performance Metrics')\nplt.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_34.pdf", "response": "```python\nimport matplotlib.pyplot as plt  \nimport numpy as np  \n\n# Sample data\nx = np.array([2, 3, 4, 5, 6, 7, 8])\ny1 = np.array([27.44, 24.75, 23.38, 22.77, 22.32, 21.47, 21.51])\ny2 = np.array([6.74, 4.54, 3.96, 3.71, 3.49, 3.34, 3.1])\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(8.0, 7.0))\n\n# Plot the data\nplt.plot(x, y1, 'b-', label='LibriCSS (test)')\nplt.plot(x, y2, 'r^', label='AMI (dev)')\n\n# Set labels and title\nplt.xlabel('Number of microphones')\nplt.ylabel('WER (%)')\nplt.title('WER vs Number of Microphones')\n\n# Add a legend\nplt.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_35.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.logspace(-7, -4, 10)\ny1 = np.random.rand(10)\ny2 = np.random.rand(10)\ny3 = np.random.rand(10)\ny4 = np.random.rand(10)\ny5 = np.random.rand(10)\n\n# Create a new figure\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Plot the data\nax.plot(x, y1, label='M-LVQ-4x8-10', color='orange')\nax.plot(x, y2, label='M-LVQ-4x8-100', color='green')\nax.plot(x, y3, label='M-LVQ-4x8-256', color='orange')\nax.plot(x, y4, label='M-LVQ-4x8', color='purple')\nax.plot(x, y5, label='empirical relat. (B2=8.0)', color='blue')\n\n# Set labels and title\nax.set_xlabel('Quantization error')\nax.set_ylabel('Search window size ratio')\nax.set_title('Quantization error vs Search window size ratio')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_36.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nratio_r = np.arange(0.1, 1.1, 0.1)\nperformance_pna_ours = np.random.rand(10)\nperformance_gin_ours = np.random.rand(10)\nperformance_pna_others = np.random.rand(10)\nperformance_gin_others = np.random.rand(10)\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(15.0, 5.0))\n\n# Plot the data\nplt.plot(ratio_r, performance_pna_ours, label='PNA + ours', color='purple')\nplt.plot(ratio_r, performance_gin_ours, label='GIN + ours', color='orange')\nplt.fill_between(ratio_r, performance_pna_ours, performance_gin_ours, alpha=0.3, color='lightblue')\n\n# Set labels and title\nplt.xlabel('Ratio r')\nplt.ylabel('Performance')\nplt.title('SPMotif-0.5')\n\n# Add a legend\nplt.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_37.pdf", "response": "```python\nimport matplotlib.pyplot as plt  \nimport numpy as np  \n\n# Sample data\nx = np.arange(6, 31)\ny1 = np.random.rand(25) * 0.5 + 75\ny2 = np.random.rand(25) * 0.5 + 75\n\n# Create a new figure\nfig = plt.figure(figsize=(6.0, 5.0))\n\n# Plot the data\nplt.plot(x, y1, label='Model 1')\nplt.plot(x, y2, label='Model 2')\n\n# Set labels and title\nplt.xlabel('Ensemble Size')\nplt.ylabel('Accuracy')\nplt.title('Model Performance')\n\n# Add a legend\nplt.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_38.pdf", "response": "```python\nimport matplotlib.pyplot as plt  \nimport numpy as np  \n\n# Sample data\nx = np.arange(1, 101)\ny1 = np.random.rand(100)\ny2 = np.random.rand(100)\ny3 = np.random.rand(100)\ny4 = np.random.rand(100)\ny5 = np.random.rand(100)\n\n# Create a new figure\nfig = plt.figure(figsize=(6.0, 3.0))\n\n# Plot the data\nplt.plot(x, y1, label='GPT-Neo')\nplt.plot(x, y2, label='5')\nplt.plot(x, y3, label='3')\nplt.plot(x, y4, label='7')\nplt.plot(x, y5, label='30')\n\n# Set labels and title\nplt.xlabel('# Epochs')\nplt.ylabel('MA')\nplt.title('Learning Curve')\n\n# Add a legend\nplt.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_39.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ndata = {\n    'Traffic': [0.165, 0.165, 0.165, 0.165],\n    'ETMm2': [0.18, 0.18, 0.18, 0.18],\n    'ETTh2': [0.22, 0.22, 0.22, 0.22],\n    'ECL': [0.425, 0.425, 0.425, 0.425]\n}\npred_lengths = [96, 192, 336, 720]\n\n# Create a new figure\nfig, ax = plt.subplots(figsize=(15.0, 4.0))\n\n# Plot the data\nfor key, values in data.items():\n    ax.plot(pred_lengths, values, label=key)\n\n# Set labels and title\nax.set_xlabel('pred_length')\nax.set_ylabel('value')\nax.set_title('Sample Plot')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.array([224, 128, 64, 32])\ny1 = np.array([70, 60, 50, 40])\ny2 = np.array([75, 65, 55, 45])\ny3 = np.array([80, 70, 60, 50])\n\n# Create a new figure\nfig, ax = plt.subplots(figsize=(9.0, 4.0))\n\n# Plot the data\nax.plot(x, y1, label='ImageNet-1k', color='orange')\nax.plot(x, y2, label='ImageNet-C/P (Fog)', color='orange')\nax.plot(x, y3, label='ImageNet-C/P (Fog)', color='blue')\n\n# Set labels and title\nax.set_xlabel('n')\nax.set_ylabel('Top-1 Acc.')\nax.set_title('Serial (n=8, m=1)')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_40.pdf", "response": "```python\nimport matplotlib.pyplot as plt  \nimport numpy as np  \n\n# Sample data\nx = np.array([5, 7, 10, 12.5, 15, 20, 22.5, 25])\ny1 = np.array([90, 80, 70, 60, 50, 40, 30, 20])\ny2 = np.array([80, 70, 60, 50, 40, 30, 20, 10])\ny3 = np.array([70, 60, 50, 40, 30, 20, 10, 0])\ny4 = np.array([60, 50, 40, 30, 20, 10, 0, 0])\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(8.0, 6.0))\n\n# Plot the data\nplt.plot(x, y1, 'b-', label='JPEG+LDPC')\nplt.plot(x, y2, 'or-', label='DEEPJSCC w/o OFDM')\nplt.plot(x, y3, 'g^-', label='DEEPJSCC w/ OFDM')\nplt.plot(x, y4, 'r--', label='OURS')\n\n# Set labels and title\nplt.xlabel('SNR')\nplt.ylabel('Classification Accuracy (%)')\nplt.title('Comparison of Different Methods')\n\n# Add a legend\nplt.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_41.pdf", "response": "```python\nimport matplotlib.pyplot as plt  \nimport numpy as np  \n\n# Sample data\nx = np.linspace(0, 200, 100)\ny1 = np.sin(x)\ny2 = np.cos(x)\ny3 = np.random.rand(100)\ny4 = np.exp(x / 100)\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(6.0, 8.0))\n\n# Plot the data\nplt.plot(x, y1, label='Line 1 (Sinusoidal)')\nplt.plot(x, y2, label='Line 2 (Quadratic)')\nplt.plot(x, y3, label='Line 3 (Random Noise)')\nplt.plot(x, y4, label='Line 4 (Exponential Focus)')\n\n# Set labels and title\nplt.xlabel('Gradient Steps (x 62.5K)')\nplt.ylabel('Performance Value')\nplt.title('Performance vs Gradient Steps')\n\n# Add a legend\nplt.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_42.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.array([0, 50, 100, 150, 200])\ny_line1 = np.array([0.1, 0.8, 1.2, 1.5, 1.3])\ny_line2 = np.array([0.1, 0.8, 1.2, 1.5, 1.3])\ny_poly1 = np.array([0.1, 0.8, 1.2, 1.5, 1.3])\ny_poly2 = np.array([0.1, 0.8, 1.2, 1.5, 1.3])\n\n# Create a new figure\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Plot the data\nax.plot(x, y_line1, 'o-', label='Line 1')\nax.plot(x, y_line2, 'b-', label='Line 2')\nax.plot(x, y_poly1, '^--', label='Line 3')\nax.plot(x, y_poly2, 'r--', label='Polynomial Trend (from Line 2)')\n\n# Set labels and title\nax.set_xlabel('Gradient Steps (x 62.5K)')\nax.set_ylabel('Polynomial Value')\nax.set_title('Gradient Descent Convergence')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_43.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ndata = {\n    'All': [70, 72, 74, 76, 78],\n    'MLP': [68, 70, 72, 74, 76],\n    'GCN': [66, 68, 70, 72, 74],\n    'NCN': [64, 66, 68, 70, 72],\n    'SEAL': [62, 64, 66, 68, 70]\n}\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(12.0, 5.0))\n\n# Plot the data\nfor key, values in data.items():\n    plt.plot(values, label=key)\n\n# Set labels and title\nplt.xlabel('Epoch')\nplt.ylabel('Hits @ 50')\nplt.title('ogbl-collab Results')\n\n# Add a legend\nplt.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_44.pdf", "response": "```python\nimport matplotlib.pyplot as plt  \nimport numpy as np  \n\n# Sample data\nx = np.array([10, 20, 30, 40, 50, 60])\ny_std = np.array([1e-10, 1e-10, 1e-10, 1e-10, 1e-10, 1e-10])\ny_con = np.array([1e-10, 1e-10, 1e-10, 1e-10, 1e-10, 1e-10])\ny_exp = np.array([1e-10, 1e-10, 1e-10, 1e-10, 1e-10, 1e-10])\ny_hyp = np.array([1e-10, 1e-10, 1e-10, 1e-10, 1e-10, 1e-10])\n\n# Create a new figure\nfig = plt.figure(figsize=(10.0, 6.0))\n\n# Plot the data\nplt.plot(x, y_std, label='Standard')\nplt.plot(x, y_con, label='Constrained')\nplt.plot(x, y_exp, label='Experimental')\nplt.plot(x, y_hyp, label='Hypothetical')\n\n# Set labels and title\nplt.xlabel('N')\nplt.ylabel('Precision')\nplt.title('Precision vs N')\n\n# Add a legend\nplt.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_45.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nN = np.logspace(1, 4, 10)\npeak_performance_1 = np.random.rand(10, 5) * 10**np.random.randint(2, 6, 10)\nprecision_1 = np.random.rand(10, 5) * 10**np.random.randint(2, 6, 10)\n\n# Create a new figure\nfig, axes = plt.subplots(nrows=2, ncols=2, figsize=(12.0, 8.0))\n\n# Plot the first graph\naxes[0, 0].plot(N, peak_performance_1.T, label='Peak Performance')\naxes[0, 0].set_xscale('log')\naxes[0, 0].set_title('Graph Variation 1')\naxes[0, 0].legend()\n\n# Plot the second graph\naxes[0, 1].plot(N, precision_1.T, label='Precision')\naxes[0, 1].set_xscale('log')\naxes[0, 1].set_title('Graph Variation 1')\n\n# Plot the third graph\naxes[1, 0].plot(N, peak_performance_1.T, label='Peak Performance')\naxes[1, 0].set_xscale('log')\naxes[1, 0].set_title('Graph Variation 3')\naxes[1, 0].legend()\n\n# Plot the fourth graph\naxes[1, 1].plot(N, precision_1.T, label='Precision')\naxes[1, 1].set_xscale('log')\naxes[1, 1].set_title('Graph Variation 3')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_46.pdf", "response": "```python\nimport matplotlib.pyplot as plt  \nimport numpy as np  \n\n# Sample data\nx = np.arange(26)\ny1 = np.random.rand(26)\ny2 = np.random.rand(26)\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(6.0, 10.0))\n\n# Plot the first dataset\nplt.subplot(2, 1, 1)\nplt.plot(x, y1, label='Standard Activity')\nplt.title('Daytime Activity Monitoring')\nplt.ylabel('Activity Level')\n\n# Plot the second dataset\nplt.subplot(2, 1, 2)\nplt.plot(x, y2, label='Innovative Activity')\nplt.title('Nighttime Activity Monitoring')\nplt.xlabel('Time (Hours)')\nplt.ylabel('Activity Level')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_47.pdf", "response": "```python\nimport matplotlib.pyplot as plt  \nimport numpy as np  \n\n# Sample data\nx = np.linspace(0, 12, 100)\ny1 = np.sin(x)\ny2 = np.cos(x)\n\n# Create a new figure\nfig = plt.figure(figsize=(10.0, 6.0))\n\n# Plot the data\nplt.plot(x, y1, label='Standard Performance')\nplt.plot(x, y2, label='Innovative Performance')\n\n# Set labels and title\nplt.xlabel('Time (Months)')\nplt.ylabel('Performance Index')\nplt.title('Comparative Performance Analysis Over Time')\n\n# Add a legend\nplt.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_48.pdf", "response": "```python\nimport matplotlib.pyplot as plt  \nimport numpy as np  \n\n# Sample data\nx = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\ny1 = np.array([1000, 1100, 1200, 1300, 1400, 1500, 1600, 1700, 1800, 1900, 2000, 2100])\ny2 = np.array([100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200, 210])\n\n# Create a new figure\nfig = plt.figure(figsize=(10.0, 6.0))\n\n# Plot the data\nplt.plot(x, y1, label='Monthly Sales', color='blue')\nplt.plot(x, y2, label='Average Temperature', color='red')\n\n# Set labels and title\nplt.xlabel('Month')\nplt.ylabel('Sales')\nplt.title('Sales and Temperature Correlation Over a Year')\n\n# Add a legend\nplt.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_49.pdf", "response": "```python\nimport matplotlib.pyplot as plt  \nimport numpy as np  \n\n# Sample data\ntime = np.arange(10)\ngrowth = np.random.rand(10)\ndecay = np.random.rand(10)\noscillation = np.random.rand(10)\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(6.0, 9.0))\n\n# Plot the data\nplt.plot(time, growth, 'g-', label='Growth')\nplt.plot(time, decay, 'r-', label='Decay')\nplt.plot(time, oscillation, 'b-', label='Oscillation')\n\n# Set labels and title\nplt.xlabel('Time')\nplt.ylabel('Value')\nplt.title('Exponential Growth Over Time')\nplt.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt  \nimport numpy as np  \n\n# Sample data\nx = np.arange(1, 11)\ny1 = np.random.rand(10)\ny2 = np.random.rand(10)\ny3 = np.random.rand(10)\n\n# Create a new figure\nfig = plt.figure(figsize=(6.0, 4.0))\n\n# Plot the data\nplt.plot(x, y1, label='5-shot direct', color='blue')\nplt.plot(x, y2, label='5-shot scratchpad', color='orange')\nplt.plot(x, y3, label='5-shot rule-following', color='green')\n\n# Set labels and title\nplt.xlabel('Digit Length')\nplt.ylabel('Accuracy')\nplt.title('5-shot Accuracy vs Digit Length')\n\n# Add a legend\nplt.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_50.pdf", "response": "```python\nimport matplotlib.pyplot as plt  \nimport numpy as np  \n\n# Sample data\nx = np.linspace(0, 20, 100)\ny_smooth = np.sin(x) + np.random.normal(0, 0.1, 100)\ny_diff = np.diff(y_smooth)\ny_cumsum = np.cumsum(y_smooth)\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(5.0, 10.0))\n\n# Plot the smoothed data\nplt.subplot(3, 1, 1)\nplt.plot(x, y_smooth, label='Smoothed Data')\nplt.title('Smoothed Representation')\nplt.ylabel('Value')\n\n# Plot the first difference of the data\nplt.subplot(3, 1, 2)\nplt.plot(x[:-1], y_diff, label='Difference Data', color='orange')\nplt.title('First Difference of Data')\nplt.ylabel('Delta Value')\n\n# Plot the cumulative sum over time\nplt.subplot(3, 1, 3)\nplt.plot(x, y_cumsum, label='Cumulative Sum', color='green')\nplt.title('Cumulative Sum Over Time')\nplt.xlabel('Time')\nplt.ylabel('Cumulative Value')\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_51.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ntime = np.arange(10)\nsin_wave = np.sin(time)\ncos_wave = np.cos(time)\nexp_decay = np.exp(-time / 5)\nlog_growth = np.log(time + 1)\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(6.0, 12.0))\n\n# Plot the first subplot\nplt.subplot(4, 1, 1)\nplt.plot(time, sin_wave, 'm', label='Sin Wave')\nplt.plot(time, cos_wave, 'g', label='Cos Wave')\nplt.ylabel('Amplitude')\nplt.legend()\n\n# Plot the second subplot\nplt.subplot(4, 1, 2)\nplt.plot(time, exp_decay, 'b', label='Exp Decay')\nplt.ylabel('Value')\n\n# Plot the third subplot\nplt.subplot(4, 1, 3)\nplt.plot(time, log_growth, 'r', label='Log Growth')\nplt.ylabel('Value')\n\n# Adjust layout and show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_52.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.linspace(0, 1, 10)\ny1 = np.random.rand(10) * 85 + 75\ny2 = np.random.rand(10) * 85 + 75\ny3 = np.random.rand(10) * 85 + 75\ny4 = np.random.rand(10) * 85 + 75\ny5 = np.random.rand(10) * 85 + 75\ny6 = np.random.rand(10) * 85 + 75\ny7 = np.random.rand(10) * 85 + 75\ny8 = np.random.rand(10) * 85 + 75\ny9 = np.random.rand(10) * 85 + 75\ny10 = np.random.rand(10) * 85 + 75\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(9.0, 6.0))\n\n# Plot the data\nplt.subplot(2, 2, 1)\nplt.plot(x, y1, 'b-', marker='o', color='blue')\nplt.title('Positive bound')\n\nplt.subplot(2, 2, 2)\nplt.plot(x, y2, 'b-', marker='o', color='blue')\nplt.title('Negative bound')\n\nplt.subplot(2, 2, 3)\nplt.plot(x, y3, 'b-', marker='o', color='blue')\nplt.title('Contrastive loss weight')\n\nplt.subplot(2, 2, 4)\nplt.plot(x, y4, 'b-', marker='o', color='blue')\nplt.title('Fuzzy coefficient')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_53.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.linspace(0.0, 1.0, 100)\ny1 = np.sin(x)\ny2 = np.cos(x)\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(12.0, 8.0))\n\n# Plot the data\nplt.plot(x, y1, label='Positive Bound')\nplt.plot(x, y2, label='Negative Bound')\n\n# Set labels and title\nplt.xlabel('X-axis')\nplt.ylabel('Y-axis')\nplt.title('Positive Bound vs Negative Bound')\n\n# Add a legend\nplt.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_54.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ndata = {\n    'Passive': {'Dry': [1.3, 1.2, 1.1, 1.0], 'Rain': [1.3, 1.2, 1.1, 1.0], 'Snow': [1.3, 1.2, 1.1, 1.0]},\n    'Rail': {'Dry': [1.2, 1.1, 1.0, 0.9], 'Rain': [1.2, 1.1, 1.0, 0.9], 'Snow': [1.2, 1.1, 1.0, 0.9]},\n    'Sportive': {'Dry': [1.1, 1.0, 0.9, 0.8], 'Rain': [1.1, 1.0, 0.9, 0.8], 'Snow': [1.1, 1.0, 0.9, 0.8]}\n}\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(12.0, 4.0))\n\n# Plot each dataset\nfor i, (key, value) in enumerate(data.items()):\n    ax = fig.add_subplot(1, 3, i + 1)\n    for k, v in value.items():\n        ax.plot(v, label=k)\n    ax.set_title(key)\n    ax.set_xlabel('Driving Style')\n    ax.set_ylabel('Relaxation Level')\n    ax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_55.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nn_aug = np.array([0.125, 0.25, 0.5, 1, 2, 4, 8])\ncontent = np.array([7.6, 7.4, 6.9, 6.5, 6.2, 5.8, 5.5])\norganization = np.array([7.2, 7.1, 6.7, 6.3, 6.0, 5.6, 5.3])\nlanguage = np.array([6.8, 6.7, 6.3, 5.9, 5.6, 5.2, 4.9])\n\n# Create a new figure\nfig = plt.figure(figsize=(8.0, 3.0))\n\n# Plot the data\nplt.plot(n_aug, content, label='Content', color='blue')\nplt.plot(n_aug, organization, label='Organization', color='red')\nplt.plot(n_aug, language, label='Language', color='green')\n\n# Set labels and title\nplt.xlabel('n_aug')\nplt.ylabel('Performance Gain (%)')\nplt.title('Dynamic Performance Gain Across Different n_aug Levels')\n\n# Add a legend\nplt.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_56.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.arange(0, 81, 20)\ny_coco_10k = [0.6, 0.7, 0.8]\ny_laion_10k = [0.65, 0.75, 0.85]\ny_coco_5k = [0.55, 0.65, 0.75]\ny_laion_5k = [0.5, 0.6, 0.7]\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(9.0, 3.0))\n\n# Plotting the first subplot\nplt.subplot(1, 3, 1)\nplt.plot(x, y_coco_10k, 'r-', label='COCO (10k)')\nplt.plot(x, y_laion_10k, 'b-', label='LAION (10k)')\nplt.xlabel('Decomposition IO Norm')\nplt.ylabel('Accuracy')\nplt.title('COCO 10K')\nplt.legend()\n\n# Plotting the second subplot\nplt.subplot(1, 3, 2)\nplt.plot(x, y_coco_5k, 'g-', label='COCO (5k)')\nplt.plot(x, y_laion_5k, 'y-', label='LAION (5k)')\nplt.xlabel('Decomposition IO Norm')\nplt.ylabel('Accuracy')\nplt.title('COCO & LAION 5K')\nplt.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_57.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.linspace(0.025, 0.3, 10)\ny1 = np.random.rand(10)\ny2 = np.random.rand(10)\ny3 = np.random.rand(10)\ny4 = np.random.rand(10)\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(12.0, 9.0))\n\n# Plot the first subplot\nax1 = fig.add_subplot(2, 3, 1)\nax1.plot(x, y1, 'b-', label='Error Rate vs Learning Rate (Batch Size=64)')\nax1.plot(x, y2, 'r-', label='Error Rate vs Learning Rate (Batch Size=128)')\nax1.set_xlabel('Parameter Rate')\nax1.set_ylabel('Metric')\nax1.set_title('Error Rate vs Learning Rate')\nax1.legend()\n\n# Plot the second subplot\nax2 = fig.add_subplot(2, 3, 2)\nax2.plot(x, y3, 'g-', label='Accuracy vs Dropout (Batch Size=64)')\nax2.plot(x, y4, 'y-', label='Accuracy vs Dropout (Batch Size=128)')\nax2.set_xlabel('Parameter Rate')\nax2.set_ylabel('Metric')\nax2.set_title('Accuracy vs Dropout')\nax2.legend()\n\n# Plot the third subplot\nax3 = fig.add_subplot(2, 3, 3)\nax3.plot(x, y1, 'b-', label='Error Rate vs Learning Rate (Batch Size=64)')\nax3.plot(x, y2, 'r-', label='Error Rate vs Learning Rate (Batch Size=128)')\nax3.set_xlabel('Parameter Rate')\nax3.set_ylabel('Metric')\nax3.set_title('Error Rate vs Learning Rate')\nax3.legend()\n\n# Plot the fourth subplot\nax4 = fig.add_subplot(2, 3, 4)\nax4.plot(x, y3, 'g-', label='Accuracy vs Dropout (Batch Size=64)')\nax4.plot(x, y4, 'y-', label='Accuracy vs Dropout (Batch Size=128)')\nax4.set_xlabel('Parameter Rate')\nax4.set_ylabel('Metric')\nax4.set_title('Accuracy vs Dropout')\nax4.legend()\n\n# Plot the fifth subplot\nax5 = fig.add_subplot(2, 3, 5)\nax5.plot(x, y1, 'b-', label='Error Rate vs Learning Rate (Batch Size=64)')\nax5.plot(x, y2, 'r-', label='Error Rate vs Learning Rate (Batch Size=128)')\nax5.set_xlabel('Parameter Rate')\nax5.set_ylabel('Metric')\nax5.set_title('Error Rate vs Learning Rate')\nax5.legend()\n\n# Plot the sixth subplot\nax6 = fig.add_subplot(2, 3, 6)\nax6.plot(x, y3, 'g-', label='Accuracy vs Dropout (Batch Size=64)')\nax6.plot(x, y4, 'y-', label='Accuracy vs Dropout (Batch Size=128)')\nax6.set_xlabel('Parameter Rate')\nax6.set_ylabel('Metric')\nax6.set_title('Accuracy vs Dropout')\nax6.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_58.pdf", "response": "```python\nimport matplotlib.pyplot as plt  \nimport numpy as np  \n\n# Sample data\nx = np.arange(201)\ny1 = np.random.rand(201)\ny2 = np.random.rand(201)\n\n# Create a new figure\nfig = plt.figure(figsize=(10.0, 4.0))\n\n# Plot the data\nplt.plot(x, y1, label='Base Model', color='blue')\nplt.plot(x, y2, label='Our Model', color='orange')\n\n# Set labels and title\nplt.xlabel('Training Iterations')\nplt.ylabel('Metric Value')\nplt.title('Metric 1')\n\n# Add a legend\nplt.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_59.pdf", "response": "```python\nimport matplotlib.pyplot as plt  \nimport numpy as np  \n\n# Sample data\nx = np.arange(201)\ny1 = np.random.rand(201) * 0.6 + 0.4\ny2 = np.random.rand(201) * 0.6 + 0.4\n\n# Create a new figure\nfig = plt.figure(figsize=(5.0, 3.0))\n\n# Plot the data\nplt.plot(x, y1, label='Base Model')\nplt.plot(x, y2, label='Our Model')\n\n# Set labels and title\nplt.xlabel('Training Iterations')\nplt.ylabel('Metric Value')\nplt.title('Accuracy')\n\n# Add a legend\nplt.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt  \nimport numpy as np  \n\nx = np.array([10**i for i in range(1, 7)])  \ny1 = np.array([10**-i for i in range(1, 7)])  \ny2 = np.array([10**-i for i in range(1, 7)])  \n\nplt.figure(figsize=(9.0, 6.0))  \nplt.plot(x, y1, label='Standard')  \nplt.plot(x, y2, label='Constrained')  \nplt.legend()  \nplt.show()\n```"}
{"file": "dataset/ori_500/line_60.pdf", "response": "```python\nimport matplotlib.pyplot as plt  \nimport numpy as np  \n\n# Sample data\nx = np.arange(26)\ny1 = np.random.rand(26)\ny2 = np.random.rand(26)\n\n# Create a new figure\nfig = plt.figure(figsize=(8.0, 6.0))\n\n# Plot the data\nplt.plot(x, y1, label='Performance')\nplt.plot(x, y2, label='Efficiency')\n\n# Set labels and title\nplt.xlabel('Weeks')\nplt.ylabel('Efficiency')\nplt.title('Performance and Efficiency Over Weeks')\n\n# Add a legend\nplt.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_61.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.arange(26)\ny1 = np.random.rand(26)\ny2 = np.random.rand(26)\n\n# Create a new figure\nfig = plt.figure(figsize=(6.0, 4.0))\n\n# Plot the data\nplt.plot(x, y1, 'b-', label='Performance')\nplt.plot(x, y2, 'r-', label='Efficiency')\n\n# Set labels and title\nplt.xlabel('Weeks')\nplt.ylabel('Values')\nplt.title('Performance and Efficiency Analysis')\n\n# Add a legend\nplt.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_62.pdf", "response": "```python\nimport matplotlib.pyplot as plt  \nimport numpy as np  \n\n# Sample data\nx = np.arange(31)\ny1 = np.random.rand(31)\ny2 = np.random.rand(31)\ny3 = np.random.rand(31)\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(10.0, 6.0))\n\n# Plot the data\nplt.plot(x, y1, 'b', label='Performance')\nplt.plot(x, y2, 'r', label='Efficiency')\nplt.plot(x, y3, 'g', label='Growth')\n\n# Set labels and title\nplt.xlabel('Weeks')\nplt.ylabel('Efficiency')\nplt.title('Detailed Performance and Efficiency Analysis Over Weeks')\n\n# Add a legend\nplt.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_63.pdf", "response": "```python\nimport matplotlib.pyplot as plt  \nimport numpy as np  \n\n# Sample data\nx = np.arange(0, 30)\ny1 = np.random.rand(30)\ny2 = np.random.rand(30)\ny3 = np.random.rand(30)\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(12.0, 8.0))\n\n# Plot the data\nplt.plot(x, y1, label='Data Series 1')\nplt.plot(x, y2, label='Data Series 2 with Gradient')\nplt.plot(x, y3, label='Data Series 3')\n\n# Set labels and title\nplt.xlabel('Weeks')\nplt.ylabel('Normalized Value')\nplt.title('Dynamic Data Presentation Across Weeks')\n\n# Add a legend\nplt.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_64.pdf", "response": "```python\nimport matplotlib.pyplot as plt  \nimport numpy as np  \n\n# Sample data\nx = np.arange(1, 11)\ny1 = np.random.rand(10) * 100\ny2 = np.random.rand(10) * 100\ny3 = np.random.rand(10) * 100\ny4 = np.random.rand(10) * 100\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(12.0, 6.0))\n\n# Plot the data\nplt.plot(x, y1, 'b^', label='BaCE')\nplt.plot(x, y2, 'bv', label='LWF')\nplt.plot(x, y3, 'g^', label='EWC')\nplt.plot(x, y4, 'gv', label='SEQ')\n\n# Set labels and title\nplt.xlabel('Task')\nplt.ylabel('Average Accuracy (%)')\nplt.title('Performance Metrics')\n\n# Add a legend\nplt.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_65.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.arange(1, 11)\ny1 = np.random.rand(10) * 100\ny2 = np.random.rand(10) * 100\ny3 = np.random.rand(10) * 100\ny4 = np.random.rand(10) * 100\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(8.0, 3.0))\n\n# Plot the first graph\nplt.subplot(1, 2, 1)\nplt.plot(x, y1, label='BaCE', color='blue')\nplt.plot(x, y2, label='EWC', color='cyan')\nplt.title('Performance Comparison: BaCE vs EWC')\nplt.xlabel('Task')\nplt.ylabel('Average Accuracy (%)')\nplt.legend()\n\n# Plot the second graph\nplt.subplot(1, 2, 2)\nplt.plot(x, y3, label='LWF', color='red')\nplt.plot(x, y4, label='SEQ', color='pink')\nplt.title('Performance Comparison: LWF vs SEQ')\nplt.xlabel('Task')\nplt.ylabel('Average Accuracy (%)')\nplt.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_66.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.arange(0, 2001, 50)\ny1 = np.random.rand(len(x))\ny2 = np.random.rand(len(x))\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(9.0, 7.0))\n\n# Plot the data\nplt.plot(x, y1, label='model1 Series 1')\nplt.plot(x, y2, label='model1 Series 2')\n\n# Set labels and title\nplt.xlabel('Iterations')\nplt.ylabel('Success Rate')\nplt.title('model1 Performance')\n\n# Add a legend\nplt.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_67.pdf", "response": "```python\nimport matplotlib.pyplot as plt  \nimport numpy as np  \n\n# Sample data\nx = np.array([2, 3, 4, 5, 6, 7, 8])\ny1 = np.array([24.5, 24.5, 24.5, 24.5, 24.5, 24.5, 24.5])\ny2 = np.array([24.5, 24.5, 24.5, 24.5, 24.5, 24.5, 24.5])\n\n# Create a new figure\nfig = plt.figure(figsize=(6.0, 5.0))\n\n# Plot the data\nplt.plot(x, y1, 'o-', label='IHM')\nplt.plot(x, y2, 'o-', label='SDM')\n\n# Set labels and title\nplt.xlabel('Number of microphones')\nplt.ylabel('AMR WER (%)')\nplt.title('WER (%) vs Number of Microphones')\n\n# Add a legend\nplt.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_68.pdf", "response": "```python\nimport matplotlib.pyplot as plt  \nimport numpy as np  \n\n# Sample data\nx = np.array([2, 3, 4, 5, 6, 7, 8])\ny1 = np.array([2.5, 3.5, 4.5, 5.5, 6.5, 7.5, 8.5])\ny2 = np.array([2.3, 3.3, 4.3, 5.3, 6.3, 7.3, 8.3])\ny3 = np.array([2.2, 3.2, 4.2, 5.2, 6.2, 7.2, 8.2])\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(8.0, 7.0))\n\n# Plot the data\nplt.plot(x, y1, 'b-', label='IHM Trend')\nplt.plot(x, y2, 'm-', label='SDM Trend')\nplt.scatter(x, y1, color='blue', marker='^')\nplt.scatter(x, y2, color='orange', marker='^')\n\n# Set labels and title\nplt.xlabel('Number of microphones')\nplt.ylabel('WER (%)')\nplt.title('WER vs Number of Microphones')\n\n# Add a legend\nplt.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_69.pdf", "response": "```python\nimport matplotlib.pyplot as plt  \nimport numpy as np  \n\n# Sample data\nx = np.array([2, 3, 4, 5, 6, 7, 8])\ny1 = np.array([0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9])\ny2 = np.array([0.8, 0.8, 0.8, 0.8, 0.8, 0.8, 0.8])\ny3 = np.array([0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7])\n\n# Create a new figure\nfig = plt.figure(figsize=(8.0, 5.0))\n\n# Plot the data\nplt.plot(x, y1, 'o-', label='LibriCSS WER')\nplt.plot(x, y2, 'b-', label='AMI WER')\nplt.plot(x, y3, 'r-', label='Threshold')\n\n# Set labels and title\nplt.xlabel('Number of Microphones')\nplt.ylabel('WER (%)')\nplt.title('WER vs Number of Microphones')\n\n# Add a legend\nplt.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.linspace(0.7, 1.0, 100)\ny1 = np.sin(x)\ny2 = np.cos(x)\n\n# Create a new figure\nfig, axs = plt.subplots(1, 4, figsize=(12.0, 4.0))\n\n# Plot the first subplot\naxs[0].plot(x, y1, 'b-')\naxs[0].set_title('Positive bound.')\n\n# Plot the second subplot\naxs[1].plot(x, y2, 'b-')\naxs[1].set_title('Negative bound.')\n\n# Plot the third subplot\naxs[2].plot(x, y1 + y2, 'b-')\naxs[2].set_title('Contrastive loss weight.')\n\n# Plot the fourth subplot\naxs[3].plot(x, y1 - y2, 'b-')\naxs[3].set_title('Fuzzy coefficient.')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_70.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.array([2, 3, 4, 5, 6, 7, 8])\ny_wer_libri = np.array([0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3])\ny_wer_threshold = np.array([0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3])\ny_threshold_libri = np.array([0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3])\ny_threshold_threshold = np.array([0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3])\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(12.0, 5.0))\n\n# Plot the first subplot\nax1 = fig.add_subplot(121)\nax1.plot(x, y_wer_libri, 'y-', label='LibriCSS WER')\nax1.plot(x, y_wer_threshold, 'r-', label='Threshold')\nax1.set_xlabel('Number of Microphones')\nax1.set_ylabel('WER (%)')\nax1.legend()\n\n# Plot the second subplot\nax2 = fig.add_subplot(122)\nax2.plot(x, y_threshold_libri, 'y-', label='LibriCSS Threshold')\nax2.plot(x, y_threshold_threshold, 'r-', label='Threshold')\nax2.set_xlabel('Number of Microphones')\nax2.set_ylabel('WER (%)')\nax2.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_71.pdf", "response": "```python\nimport matplotlib.pyplot as plt  \nimport numpy as np  \n\n# Sample data\nratio_r = np.linspace(0.1, 1.0, 10)\nperformance_pna = np.random.rand(10)\nperformance_gin = np.random.rand(10)\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(6.0, 12.0))\n\n# Plot the performance data for PNA and GIN\nplt.plot(ratio_r, performance_pna, label='PNA', color='blue')\nplt.plot(ratio_r, performance_gin, label='GIN', color='green')\n\n# Set labels and title\nplt.xlabel('Ratio r')\nplt.ylabel('Performance')\nplt.title('SPMotif-0.5')\n\n# Add a legend to the plot\nplt.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_72.pdf", "response": "```python\nimport matplotlib.pyplot as plt  \nimport numpy as np  \n\n# Sample data\nr = np.linspace(0.1, 1.0, 10)\npna_ours = np.random.rand(10) * 30\ngin_ours = np.random.rand(10) * 30\n\n# Create a new figure\nfig = plt.figure(figsize=(10.0, 5.0))\n\n# Plot the data\nplt.plot(r, pna_ours, 'p-', label='PNA + ours')\nplt.plot(r, gin_ours, 'y-', label='GIN + ours')\n\n# Set labels and title\nplt.xlabel('Ratio r')\nplt.ylabel('Performance')\nplt.title('Dynamic Performance Trends')\n\n# Add a legend\nplt.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_73.pdf", "response": "```python\nimport matplotlib.pyplot as plt  \nimport numpy as np  \n\n# Sample data\nr = np.arange(0.1, 1.1, 0.1)\npna_ours = np.random.rand(len(r))\ngin_ours = np.random.rand(len(r))\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(8.0, 6.0))  \n\n# Plot the data\nplt.plot(r, pna_ours, 'b-', label='PNA + ours')\nplt.plot(r, gin_ours, 'y-', label='GIN + ours')\n\n# Set labels and title\nplt.xlabel('Ratio r')\nplt.ylabel('Performance')\nplt.title('Modern Linear Performance Evaluation')\n\n# Add a legend\nplt.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_74.pdf", "response": "```python\nimport matplotlib.pyplot as plt  \nimport numpy as np  \n\n# Sample data\nr_values = [0.2, 0.4, 0.6, 0.8, 1.0]\nperformance_pna = [0.9, 0.7, 0.5, 0.3, 0.1]\nperformance_gin = [0.8, 0.6, 0.4, 0.2, 0.0]\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(10.0, 6.0))\n\n# Plot the data\nplt.plot(r_values, performance_pna, 'bo-', label='PNA + ours')\nplt.plot(r_values, performance_gin, 'ro-', label='GIN + ours')\n\n# Set labels and title\nplt.xlabel('Ratio r')\nplt.ylabel('Performance')\nplt.title('Dynamic Model Performance')\n\n# Add a legend\nplt.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_75.pdf", "response": "```python\nimport matplotlib.pyplot as plt  \nimport numpy as np  \n\n# Sample data\nx = np.array([5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29])\ny1 = np.array([80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 99, 99, 99])\ny2 = np.array([75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99])\n\n# Create a new figure\nfig = plt.figure(figsize=(10.0, 6.0))\n\n# Plot the data\nplt.plot(x, y1, label='Model 1 Mean Accuracy', color='blue')\nplt.plot(x, y2, label='Model 2 Mean Accuracy', color='red')\n\n# Set labels and title\nplt.xlabel('Ensemble Size')\nplt.ylabel('Accuracy')\nplt.title('Comparison of Model Accuracies')\n\n# Add a legend\nplt.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_76.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.arange(10)\ny1 = np.random.rand(10) * 95 + 60\ny2 = np.random.rand(10) * 95 + 60\ny3 = np.random.rand(10) * 95 + 60\ny4 = np.random.rand(10) * 95 + 60\ny5 = np.random.rand(10) * 95 + 60\ny6 = np.random.rand(10) * 95 + 60\ny7 = np.random.rand(10) * 95 + 60\ny8 = np.random.rand(10) * 95 + 60\ny9 = np.random.rand(10) * 95 + 60\ny10 = np.random.rand(10) * 95 + 60\ny11 = np.random.rand(10) * 95 + 60\ny12 = np.random.rand(10) * 95 + 60\ny13 = np.random.rand(10) * 95 + 60\ny14 = np.random.rand(10) * 95 + 60\ny15 = np.random.rand(10) * 95 + 60\ny16 = np.random.rand(10) * 95 + 60\ny17 = np.random.rand(10) * 95 + 60\ny18 = np.random.rand(10) * 95 + 60\ny19 = np.random.rand(10) * 95 + 60\ny20 = np.random.rand(10) * 95 + 60\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(8.0, 12.0))\n\n# Plot the first subplot\nplt.subplot(2, 2, 1)\nplt.plot(x, y1, 'r', label='Config A - Model X')\nplt.plot(x, y2, 'g', label='Config B - Model X')\nplt.plot(x, y3, 'b', label='Config C - Model X')\nplt.title('Performance of Model X')\nplt.xlabel('Iteration')\nplt.ylabel('Score')\nplt.legend()\n\n# Plot the second subplot\nplt.subplot(2, 2, 2)\nplt.plot(x, y4, 'r', label='Config A - Model X')\nplt.plot(x, y5, 'g', label='Config B - Model X')\nplt.plot(x, y6, 'b', label='Config C - Model X')\nplt.title('Performance of Model Y')\nplt.xlabel('Iteration')\nplt.ylabel('Score')\nplt.legend()\n\n# Plot the third subplot\nplt.subplot(2, 2, 3)\nplt.plot(x, y7, 'r', label='Config A - Model X')\nplt.plot(x, y8, 'g', label='Config B - Model X')\nplt.plot(x, y9, 'b', label='Config C - Model X')\nplt.title('Performance of Model Z')\nplt.xlabel('Iteration')\nplt.ylabel('Score')\nplt.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_77.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\niterations = np.arange(2, 11)\nperformance_lla = np.random.rand(5, 9) * 90 + 60\nperformance_falcon = np.random.rand(5, 9) * 70 + 50\nperformance_qwen = np.random.rand(5, 9) * 80 + 70\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(8.0, 12.0))\n\n# Plot Performance of Llama\nplt.subplot(3, 1, 1)\nplt.plot(iterations, performance_lla.T, marker='o')\nplt.title('Performance of Llama')\nplt.xlabel('Iteration')\nplt.ylabel('Score')\n\n# Plot Performance of Falcon\nplt.subplot(3, 1, 2)\nplt.plot(iterations, performance_falcon.T, marker='o')\nplt.title('Performance of Falcon')\nplt.xlabel('Iteration')\nplt.ylabel('Score')\n\n# Plot Performance of Qwen\nplt.subplot(3, 1, 3)\nplt.plot(iterations, performance_qwen.T, marker='o')\nplt.title('Performance of Qwen')\nplt.xlabel('Iteration')\nplt.ylabel('Score')\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_78.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ndata = {\n    'Brand A': [1.2, 1.4, 1.6, 1.8, 2.0],\n    'Brand B': [1.3, 1.5, 1.7, 1.9, 2.1],\n    'Brand C': [1.4, 1.6, 1.8, 2.0, 2.2],\n    'Brand D': [1.5, 1.7, 1.9, 2.1, 2.3],\n    'Brand E': [1.6, 1.8, 2.0, 2.2, 2.4],\n    'Brand F': [1.7, 1.9, 2.1, 2.3, 2.5]\n}\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(10.0, 10.0))\n\n# Plot each brand's sales growth\nfor brand, sales in data.items():\n    plt.plot(sales, label=brand)\n\n# Set labels and title\nplt.xlabel('Quarter')\nplt.ylabel('Sales Growth')\nplt.title('Brand Sales Growth Over Quarters')\n\n# Add a legend\nplt.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_79.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ndata = {\n    'Traffic Performance': [0.5, 0.6, 0.7, 0.8, 0.9],\n    'ETMm2 Performance': [0.6, 0.7, 0.8, 0.9, 1.0],\n    'ETTh2 Performance': [0.7, 0.8, 0.9, 1.0, 1.1],\n    'ECL Performance': [0.8, 0.9, 1.0, 1.1, 1.2]\n}\n\n# Create a new figure with specified size\nfig, axs = plt.subplots(1, 4, figsize=(18.0, 4.0))\n\n# Plot each dataset\nfor i, (key, values) in enumerate(data.items()):\n    axs[i].plot(values, label=key)\n    axs[i].set_title(key)\n    axs[i].set_xlabel('Time (s)')\n    axs[i].set_ylabel('Metric Value')\n    axs[i].legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt  \nimport numpy as np  \n\n# Sample data\ndata = np.array([[1.2, 1.3, 1.4], [1.1, 1.2, 1.3], [1.0, 1.1, 1.2], [0.9, 1.0, 1.1]])\nlabels = ['Passive', 'Rail', 'Replay', 'Sportive']\nstyles = ['-', '--', '-.', ':']\n\n# Create a new figure\nfig = plt.figure(figsize=(6.0, 6.0))\n\n# Plot the data\nfor i in range(data.shape[1]):\n    plt.plot(labels, data[:, i], styles[i], label=f'{i}')\n\n# Set labels and title\nplt.xlabel('Driving Style')\nplt.ylabel('Relaxation Level')\nplt.title('Relaxation Levels by Driving Style')\n\n# Add a legend\nplt.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_80.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ndata = {\n    'Run 1': [50, 60, 70, 80, 90],\n    'Run 2': [40, 50, 60, 70, 80]\n}\n\n# Create a new figure with specified size\nfig, axs = plt.subplots(3, 2, figsize=(9.0, 6.0))\n\n# Plot data for each category\nfor i, (category, values) in enumerate(data.items()):\n    row = i // 2\n    col = i % 2\n    axs[row, col].plot(values, label=category)\n    axs[row, col].set_title(f'Category {chr(65 + i)} Growth')\n    axs[row, col].set_xlabel('Phase')\n    axs[row, col].set_ylabel('Cumulative Value')\n    axs[row, col].legend()\n\n# Adjust layout and show plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt  \nimport numpy as np  \n\nx = np.array([4, 6, 10, 30])  \ny1 = np.array([1.08, 1.04, 1.06, 1.06])  \ny2 = np.array([1.08, 1.04, 1.06, 1.06])  \n\nplt.figure(figsize=(9.0, 6.0))  \nplt.plot(x, y1, 'bo', label='Standard')  \nplt.plot(x, y2, 'ro', label='Constrained')  \nplt.xlabel('N')  \nplt.ylabel('Error')  \nplt.legend()  \nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\nregions = ['South', 'North', 'West', 'East']\nvalues = [25, 40, 35, 25]\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Plot the data\nax.bar(regions, values, color=['blue', 'green', 'red', 'purple'])\n\n# Set labels and title\nax.set_xlabel('Region')\nax.set_ylabel('Value')\nax.set_title('Literacy Rate by Region')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ndata = np.array([\n    [0.1, 0.2, 0.3],\n    [0.4, 0.5, 0.6],\n    [0.7, 0.8, 0.9]\n])\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(8.0, 2.0))\n\n# Plot the data\nplt.imshow(data, cmap='viridis')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ndata = {\n    'Engstrom (M1)': [44.15],\n    'Zhang (M2)': [44.05],\n    'Rice (M3)': [41.55],\n    'Rade (M4)': [40.9],\n    'Hendrycks (M5)': [40.65],\n    'Addep. (M6)': [39.45],\n    'Carmon (M7)': [36.7]\n}\n\n# Create a new figure\nfig, ax1 = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot the data\nax1.bar(range(len(data)), list(data.values()), color='green', alpha=0.7)\nax1.set_xlabel('Models')\nax1.set_ylabel('Robust Error (%)')\n\n# Set the x-ticks and labels\nax1.set_xticks(range(len(data)))\nax1.set_xticklabels(list(data.keys()))\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ndata = {\n    'VGG16': [0.551, 0.538, 0.195],\n    'Resnet101': [0.744, 0.394, 0.477]\n}\n\n# Create a new figure\nfig, ax = plt.subplots(figsize=(10.0, 4.0))\n\n# Plot the data\nax.plot(data['VGG16'], label='VGG16')\nax.plot(data['Resnet101'], label='Resnet101')\n\n# Set labels and title\nax.set_xlabel('Rotation angle (\u00b0)')\nax.set_ylabel('Rotation invariance')\nax.set_title('Rotation Invariance')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ndata = np.random.rand(10, 10)\nattributes = ['PaleSkin', 'OvalFace', 'Smiling', 'BrownHair', 'Attractive', 'Male', 'BigLips', 'PointyNose', 'White', 'NoBeard', 'HeavyMakeup']\nsensitives = ['PaleSkin', 'OvalFace', 'Smiling', 'BrownHair', 'Attractive', 'Male', 'BigLips', 'PointyNose', 'White', 'NoBeard', 'HeavyMakeup']\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(8.0, 8.0))\n\n# Plot the heatmap\nplt.imshow(data, cmap='viridis')\n\n# Set labels for the axes\nplt.xlabel('Sensitive attribute')\nplt.ylabel('Attribute')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.array([0, 10, 20, 30, 40, 50])\ny = np.array([-8.5, -9.2, -9.8, -10.2, -10.5, -10.8])\n\n# Create a new figure\nfig, ax = plt.subplots(figsize=(5.0, 6.0))\n\n# Plot the data\nax.plot(x, y, 'bo-')\n\n# Set labels\nax.set_xlabel('GPT2 Tokenizer rank')\nax.set_ylabel('Token rarity')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ndata = {\n    'Sentiment': [0.35, 0.25, 0.25],\n    'Toxicity': [0.13, 0.15, 0.17],\n    'News': [0.24, 0.05, 0.17]\n}\ncategories = ['Unchanged Mistake', 'New Mistake', 'New Correct']\ncolors = ['blue', 'green', 'red']\n\n# Create a new figure\nfig, ax = plt.subplots(figsize=(10.0, 4.0))\n\n# Plot the data\nfor i, category in enumerate(categories):\n    ax.barh([category], data['Sentiment'][i], color=colors[0], label='Sentiment')\n    ax.barh([category], data['Toxicity'][i], left=data['Sentiment'][i], color=colors[1], label='Toxicity')\n    ax.barh([category], data['News'][i], left=[sum(x) for x in zip(data['Sentiment'], data['Toxicity'])], color=colors[2], label='News')\n\n# Set labels and title\nax.set_xlabel('Correlation')\nax.set_title('Correlation of Categories')\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_16.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ndata = {\n    'c1355': [0.42, 0.48, 0.47, 0.49],\n    'c1908': [0.45, 0.46, 0.47, 0.48],\n    'c2670': [0.44, 0.45, 0.46, 0.47],\n    'c3540': [0.43, 0.44, 0.45, 0.46]\n}\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(6.0, 6.0))\n\n# Plot the data\nplt.boxplot(data.values(), labels=data.keys())\nplt.title('Boxplot of OMLA KPA')\nplt.ylabel('OMLA KPA')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_17.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nstudy_levels = [0, 1, 2, 3, 4, 5]\nknowledge_increase = [\n    [60, 70, 80],\n    [50, 60, 70],\n    [40, 50, 60]\n]\n\ndomains = ['Education', 'Law', 'Technology', 'History', 'Geography', 'Humans', 'Finance']\npublications = [250, 200, 220, 150, 100, 120, 210]\n\n# Create a new figure\nfig, ax = plt.subplots(figsize=(10.0, 4.0))\n\n# Plot the data\nfor i in range(len(knowledge_increase)):\n    ax.plot(study_levels, knowledge_increase[i], label=domains[i])\n\n# Set labels and title\nax.set_xlabel('Study Level')\nax.set_ylabel('Cumulative Knowledge Increase (%)')\nax.set_title('Knowledge Increase by Subject Area')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_18.pdf", "response": "```python\nimport matplotlib.pyplot as plt  \nimport numpy as np  \n\n# Sample data\nyears = [2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022]\nhardware = [30, 40, 50, 60, 70, 80, 90, 100]\nsoftware = [20, 30, 40, 50, 60, 70, 80, 90]\nai = [10, 20, 30, 40, 50, 60, 70, 80]\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(8.0, 10.0))\n\n# Plot the data\nplt.plot(years, hardware, label='Hardware')\nplt.plot(years, software, label='Software')\nplt.plot(years, ai, label='AI')\n\n# Set labels and title\nplt.xlabel('Year')\nplt.ylabel('Progress (%)')\nplt.title('Technological Advancements')\n\n# Add a legend\nplt.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_19.pdf", "response": "```python\nimport matplotlib.pyplot as plt  \nimport numpy as np  \n\n# Sample data\ncountries = ['USA', 'UK', 'Germany', 'France', 'Italy', 'Spain']\ncrime_rates = [3.2, 2.8, 2.5, 2.7, 2.9, 2.6]\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(8.0, 10.0))\n\n# Plot the data\nplt.bar(countries, crime_rates, color='orange')\n\n# Set labels and title\nplt.xlabel('Country')\nplt.ylabel('Crime Rate per 100,000 Inhabitants')\nplt.title('Average Legal Crime Rates by Country')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ndata = [20, 10, 15, 10]\nlabels = ['Books', 'Staff', 'Extracurricular', 'Facilities']\ncolors = ['blue', 'orange', 'green', 'red']\n\n# Create a new figure\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Plot the pie chart\nax.pie(data, labels=labels, colors=colors, autopct='%1.1f%%', startangle=90)\n\n# Set the title\nax.set_title('Resource Allocation in Schools')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_20.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ndata = {\n    'Lowland': [0.0002, 0.0003, 0.0004],\n    'Highland': [0.0005, 0.0006, 0.0007],\n    'Plateau': [0.0008, 0.0009, 0.0010]\n}\n\n# Create a new figure\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Plot the data\nax.bar(range(len(data)), data['Lowland'], color='blue', label='Lowland')\nax.bar(range(len(data)), data['Highland'], bottom=data['Lowland'], color='green', label='Highland')\nax.bar(range(len(data)), data['Plateau'], bottom=[sum(x) for x in zip(data['Lowland'], data['Highland'])], color='red', label='Plateau')\n\n# Set labels and title\nax.set_xlabel('Elevation (m)')\nax.set_ylabel('Density')\nax.set_title('Geographical Elevation Distribution')\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_21.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nyears = ['2019', '2020', '2021', '2022']\nstocks = [300, 250, 200, 150]\nbonds = [250, 200, 150, 100]\nreal_estate = [200, 150, 100, 50]\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Plot the data\nax.bar(years, stocks, color='green')\nax.bar(years, bonds, bottom=stocks, color='blue')\nax.bar(years, real_estate, bottom=[sum(x) for x in zip(stocks, bonds)], color='yellow')\n\n# Set labels and title\nax.set_xlabel('Year')\nax.set_ylabel('Number of Accounts (%)')\nax.set_title('Investment Growth Over Time')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_22.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.array([1, 2, 3, 4])\ny1 = np.array([85, 85, 85, 85])\ny2 = np.array([95, 95, 95, 95])\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(10.0, 10.0))\n\n# Plot the data\nplt.plot(x, y1, 'b-', label='Model A')\nplt.plot(x, y2, 'g-', label='Model B')\n\n# Set labels and title\nplt.xlabel('Model')\nplt.ylabel('Al Model Adaptability (%)')\nplt.title('Al Model Adaptability')\n\n# Add a legend\nplt.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_23.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ndata = {\n    'Morning Traffic': [120, 130, 140],\n    'Evening Traffic': [150, 160, 170]\n}\n\n# Create a new figure with specified size\nfig, axs = plt.subplots(1, 2, figsize=(10.0, 10.0))\n\n# Plot the first subplot\naxs[0].bar(range(len(data['Morning Traffic'])), data['Morning Traffic'], color='orange')\naxs[0].bar(range(len(data['Evening Traffic'])), data['Evening Traffic'], color='green')\naxs[0].set_title('Traffic Volume by Time of Day')\naxs[0].set_xlabel('Number of Vehicles')\naxs[0].set_ylabel('Frequency')\n\n# Plot the second subplot\naxs[1].plot([0, 1000], [0, 1000], color='blue')\naxs[1].set_title('Elevation Changes Along a Route')\naxs[1].set_xlabel('Distance (km)')\naxs[1].set_ylabel('Elevation (m)')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_24.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the pie chart\nlabels = ['Literature', 'Performing Arts', 'Visual Arts', 'Dance']\nsizes = [10, 30, 25, 15]\ncolors = ['red', 'blue', 'green', 'orange']\nexplode = (0.1, 0, 0, 0)  # explode 1st slice\n\n# Create a pie chart\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\nax.pie(sizes, explode=explode, labels=labels, colors=colors,\nautopct='%1.1f%%', shadow=True, startangle=140)\n\n# Equal aspect ratio ensures that pie is drawn as a circle.\nax.axis('equal')  \n\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_25.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ndata = np.array([\n    [24000, 23000, 22000, 21000, 20000],\n    [19000, 18000, 17000, 16000, 15000],\n    [14000, 13000, 12000, 11000, 10000],\n    [9000, 8000, 7000, 6000, 5000],\n    [4000, 3000, 2000, 1000, 0]\n])\n\n# Create a new figure\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\n\n# Plot the data\nax.imshow(data, cmap='hot', interpolation='nearest')\n\n# Add colorbar\ncbar = ax.figure.colorbar(ax.images[0], ax=ax)\ncbar.ax.set_ylabel('User Ratings', rotation=-90, va=\"bottom\")\n\n# Set labels\nax.set_title('Heatmap of User Ratings')\nax.set_xlabel('Technology Products')\nax.set_ylabel('Regions')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ndata = {\n    'Gains': np.random.rand(100),\n    'Losses': np.random.rand(100),\n    'Tech Stocks': np.random.rand(100),\n    'Energy Stocks': np.random.rand(100)\n}\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(10.0, 5.0))\n\n# Plot histograms\nplt.subplot(1, 2, 1)\nplt.hist([data['Gains'], data['Losses']], bins=20, color=['green', 'red'])\nplt.title('Histogram of Stock Returns')\nplt.xlabel('Returns')\nplt.ylabel('Frequency')\n\n# Plot scatter plots\nplt.subplot(1, 2, 2)\nplt.scatter(data['Tech Stocks'], data['Energy Stocks'], color='yellow', label='Tech Stocks')\nplt.scatter(data['Tech Stocks'], data['Energy Stocks'], color='blue', label='Energy Stocks')\nplt.title('Investment Clusters')\nplt.xlabel('Tech Stocks')\nplt.ylabel('Energy Stocks')\nplt.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.linspace(-4, 4, 100)\ny = np.linspace(-2, 2, 100)\nX, Y = np.meshgrid(x, y)\nZ = np.sin(np.sqrt(X**2 + Y**2))\n\n# Create a new figure\nfig = plt.figure(figsize=(8.0, 10.0))\n\n# Plot the first subplot\nax1 = fig.add_subplot(211)\nax1.plot(x, y, 'bo')\nax1.set_xlabel('Relative Year')\nax1.set_ylabel('Energy Consumption (GWh)')\nax1.set_title('Energy Consumption Data')\n\n# Plot the second subplot\nax2 = fig.add_subplot(212, projection='3d')\nax2.plot_surface(X, Y, Z, cmap='viridis')\nax2.set_xlabel('Relative Year')\nax2.set_ylabel('Relative Month')\nax2.set_zlabel('Renewable Energy Ratio (%)')\nax2.set_title('Renewable Energy Ratio Data')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nlabels = ['Ancient Scripts', 'Modern Records', 'Medieval Texts', 'Renaissance Literature']\nsizes = [15.0, 35.0, 20.0, 30.0]\ncolors = ['yellow', 'red', 'green', 'blue']\nexplode = (0.1, 0, 0, 0)  # explode 1st slice\n\n# Create a pie chart\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\nax.pie(sizes, explode=explode, labels=labels, colors=colors,\nautopct='%1.1f%%', shadow=True, startangle=140)\n\n# Equal aspect ratio ensures that pie is drawn as a circle.\nax.axis('equal')  \n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt  \nimport numpy as np  \n\n# Sample data\ndata = {\n    'Luxury Brand Popularity vs Price': [9.25, 9.0, 9.0],\n    'Customer Satisfaction Distribution Across Brands': [\n        [8.5, 8.0, 7.5],\n        [8.5, 8.0, 7.5],\n        [8.5, 8.0, 7.5]\n    ]\n}\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(10.0, 6.0))\n\n# Plot the first subplot\nax1 = fig.add_subplot(1, 2, 1)\nax1.bar(range(len(data['Luxury Brand Popularity vs Price'])), data['Luxury Brand Popularity vs Price'], color='blue')\nax1.set_xlabel('Brands')\nax1.set_ylabel('Popularity Index')\nax1.set_title('Luxury Brand Popularity vs Price')\n\n# Plot the second subplot\nax2 = fig.add_subplot(1, 2, 2)\nfor i, row in enumerate(data['Customer Satisfaction Distribution Across Brands']):\n    ax2.bar(range(len(row)), row, color=['red', 'green', 'blue'][i])\nax2.set_xlabel('Brands')\nax2.set_ylabel('Customer Satisfaction')\nax2.set_title('Customer Satisfaction Distribution Across Brands')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Sample data\ndata = {\n    'Accuracy (%)': [75.32, 77.11, 77.03, 76.86, 74.52],\n    'Robust Accuracy (%)': [60.5, 59.3, 59.1, 58.35, 55.5]\n}\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(10.0, 7.0))\n\n# Plot the data\nax.bar(range(len(data['Accuracy (%)'])), data['Accuracy (%)'], color='green', label='Accuracy (%)')\nax.bar(range(len(data['Robust Accuracy (%)'])), data['Robust Accuracy (%)'], color='red', label='Robust Accuracy (%)')\n\n# Set labels and title\nax.set_xlabel('Model')\nax.set_ylabel('Percentage')\nax.set_title('Comparison of Accuracy and Robust Accuracy')\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt  \nimport numpy as np  \n\n# Sample data\ndata = {\n    'Full Context': [0.6, 0.5, 0.4, 0.3, 0.2],\n    'Partial Context': [0.8, 0.7, 0.6, 0.5, 0.4],\n    'No Context': [0.9, 0.8, 0.7, 0.6, 0.5],\n    'Hcube': [0.7, 0.6, 0.5, 0.4, 0.3],\n    'Sobol': [0.8, 0.7, 0.6, 0.5, 0.4]\n}\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(7.0, 9.0))\n\n# Plot the data\nfor key, value in data.items():\n    plt.plot(value, label=key)\n\n# Set labels and title\nplt.xlabel('Trials')\nplt.ylabel('Generalized Variance')\nplt.title('Generalized Variance vs Trials')\n\n# Add a legend\nplt.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.array([0, 200, 400])\ny = np.array([0, 0, 0])\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(10.0, 4.0))\n\n# Plot the data\nplt.plot(x, y, 'ro')\n\n# Set labels and title\nplt.xlabel('Elo Rating')\nplt.ylabel('Correct Rating - Incorrect Rating')\nplt.title('Debaters')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt  \nimport numpy as np  \n\n# Sample data\ndata = [30.5, 10.6, 4.6, 29.8, 11.3, 13.2]  \nlabels = ['30.5%', '10.6%', '4.6%', '29.8%', '11.3%', '13.2%']  \n\n# Create a pie chart\nfig, ax = plt.subplots(figsize=(5.0, 5.0))  \nwedges, texts, autotexts = ax.pie(data, labels=labels, autopct='%1.1f%%', startangle=140)  \n\n# Set aspect ratio to be equal so that pie is drawn as a circle.\nax.axis('equal')  \n\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt  \nimport numpy as np  \n\n# Data to plot  \nlabels = '90 g sugar', '225 g flour', '1 egg', '60 g butter', '1/2 package of yeast', '100 ml milk'  \nsizes = [90, 225, 1, 60, 0.5, 100]  \ncolors = ['gold', 'yellowgreen', 'lightcoral', 'lightskyblue', 'lavender', 'orange']  \nexplode = (0.1, 0, 0, 0, 0, 0)  # explode 1st slice  \n\n# Plot  \nplt.figure(figsize=(6.0, 4.0))  \nplt.pie(sizes, explode=explode, labels=labels, colors=colors, autopct='%1.1f%%', shadow=True, startangle=140)  \nplt.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.  \nplt.show()\n```"}
{"file": "dataset/ori_500/pie_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt  \nimport numpy as np  \n\n# Data to plot  \nlabels = 'Transport', 'Food', 'Others', 'Utilities', 'Entertainment'  \nsizes = [37.5, 29.2, 10, 16.7, 10]  \ncolors = ['gold', 'yellowgreen', 'lightcoral', 'lightskyblue', 'lavender']  \nexplode = (0.1, 0, 0, 0, 0)  # explode 1st slice  \n\n# Plot  \nplt.figure(figsize=(8.0, 8.0))  \nplt.pie(sizes, explode=explode, labels=labels, colors=colors, autopct='%1.1f%%', shadow=True, startangle=140)  \n\nplt.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.  \nplt.show()\n```"}
{"file": "dataset/ori_500/pie_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\nlabels = ['Unused', 'Model', 'Optimizer', 'Gradient']\nsizes = [31.4, 15.7, 19.9, 33.0]\ncolors = ['#FFD700', '#FF6347', '#90EE90', '#ADD8E6']\nexplode = (0.1, 0, 0, 0)  # explode 1st slice\n\nfig, ax = plt.subplots(figsize=(10.0, 4.0))\nax.pie(sizes, explode=explode, labels=labels, colors=colors,\nautopct='%1.1f%%', shadow=True, startangle=140)\nax.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\n\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for plotting\nlabels = ['Model', 'Optimizer', 'Gradient+Activations+Other', 'Unused']\nsizes = [25.1, 26.4, 46.2, 15.9]\ncolors = ['#FFA500', '#808080', '#00FF00', '#FFFF00']\nexplode = (0.1, 0, 0, 0)  # explode 1st slice\n\n# Plotting the pie chart\nplt.figure(figsize=(5.0, 8.0))\nplt.pie(sizes, explode=explode, labels=labels, colors=colors, autopct='%1.1f%%', shadow=True, startangle=140)\nplt.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt  \nimport numpy as np  \n\n# Data to plot  \nlabels = 'Fruits', 'Proteins', 'Grains', 'Vegetables'  \nsizes = [25, 35, 10, 20]  \ncolors = ['red', 'blue', 'orange', 'green']  \nexplode = (0.1, 0, 0, 0)  # explode 1st slice  \n\n# Plot  \nplt.figure(figsize=(6.0, 6.0))  \nplt.pie(sizes, explode=explode, labels=labels, colors=colors, autopct='%1.1f%%', shadow=True, startangle=140)  \n\nplt.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.  \nplt.show()\n```"}
{"file": "dataset/ori_500/pie_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt  \nimport numpy as np  \n\n# Data to plot  \nlabels = 'E-commerce', 'Education', 'Entertainment', 'Technology'  \nsizes = [31.2, 18.8, 35.7, 37.5]  \ncolors = ['yellowgreen', 'orange', 'lightcoral', 'lightskyblue']  \nexplode = (0.1, 0, 0, 0)  # explode 1st slice  \n\n# Plot  \nplt.figure(figsize=(8.0, 6.0))  \nplt.pie(sizes, explode=explode, labels=labels, colors=colors, autopct='%1.1f%%', shadow=True, startangle=140)  \n\nplt.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.  \nplt.show()\n```"}
{"file": "dataset/ori_500/pie_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt  \nimport numpy as np  \n\n# Data to plot  \nlabels = 'Logs 10%', 'Frogs 15%', 'Hogs 30%', 'Dogs 45%'  \nsizes = [10, 15, 30, 45]  \ncolors = ['gold', 'yellowgreen', 'lightcoral', 'lightskyblue']  \nexplode = (0.1, 0, 0, 0)  # explode 1st slice  \n\n# Plot  \nplt.figure(figsize=(6.0, 6.0))  \nplt.pie(sizes, explode=explode, labels=labels, colors=colors, autopct='%1.1f%%', shadow=True, startangle=140)  \n\nplt.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.  \nplt.show()\n```"}
{"file": "dataset/ori_500/pie_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nlabels = ['David', 'John', 'Marry', 'Peter']\nsizes = [29.0, 11.0, 20.0, 40.0]\ncolors = ['blue', 'orange', 'green', 'red']\n\n# Create a pie chart\nplt.figure(figsize=(5.0, 5.0))\nplt.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%', startangle=140)\n\n# Equal aspect ratio ensures that pie is drawn as a circle.\nplt.axis('equal')  \n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for plotting\nlabels = ['France', 'Germany', 'Italy', 'UK']\nsizes = [18, 12, 28, 42]\ncolors = ['orange', 'blue', 'red', 'green']\nexplode = (0.1, 0, 0, 0)  # explode 1st slice\n\n# Plotting the pie chart\nplt.figure(figsize=(5.0, 5.0))\nplt.pie(sizes, explode=explode, labels=labels, colors=colors,\nautopct='%1.1f%%', shadow=True, startangle=140)\n\n# Equal aspect ratio ensures that pie is drawn as a circle.\nplt.axis('equal')  \n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for plotting\nlabels = ['26.2%', '13.3%', '14.3%', '19.0%', '21.4%']\nsizes = [26.2, 13.3, 14.3, 19.0, 21.4]\ncolors = ['#FF6347', '#FFD700', '#90EE90', '#ADD8E6', '#FF4500']\nexplode = (0.1, 0, 0, 0, 0)  # explode 1st slice\n\n# Create a pie chart\nplt.figure(figsize=(5.0, 5.0))\nplt.pie(sizes, explode=explode, labels=labels, colors=colors,\nautopct='%1.1f%%', shadow=True, startangle=140)\n\n# Equal aspect ratio ensures that pie is drawn as a circle.\nplt.axis('equal')  \n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt  \nimport numpy as np  \n\n# Data to plot  \nlabels = 'Psychological', 'Others', 'Market', 'Satisfactory', 'Social'  \nsizes = [35.4, 12.4, 17.2, 24.7, 10.3]  \ncolors = ['blue', 'green', 'lightblue', 'orange', 'pink']  \nexplode = (0.1, 0, 0, 0, 0)  # explode 1st slice  \n\n# Plot  \nplt.figure(figsize=(8.0, 6.0))  \nplt.pie(sizes, explode=explode, labels=labels, colors=colors, autopct='%1.1f%%', shadow=True, startangle=140)  \n\nplt.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.  \nplt.show()\n```"}
{"file": "dataset/ori_500/pie_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nlabels = ['Facebook', 'Instagram', 'Twitter', 'LinkedIn']\nsizes = [25, 35, 10, 10]\ncolors = ['lightblue', 'lightgreen', 'lightskyblue', 'lavender']\nexplode = (0.1, 0, 0, 0)  # explode 1st slice\n\n# Create a pie chart\nplt.figure(figsize=(8.0, 6.0))\nplt.pie(sizes, explode=explode, labels=labels, colors=colors,\nautopct='%1.1f%%', shadow=True, startangle=140)\n\n# Equal aspect ratio ensures that pie is drawn as a circle.\nplt.axis('equal')  \n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt  \nimport numpy as np  \n\n# Data to plot  \nlabels = 'COLING', 'EACL', 'NAACL', 'EMNLP'  \nsizes = [25.4, 12.2, 20.3, 7.4]  \ncolors = ['lightskyblue', 'lightcoral', 'lightgreen', 'yellowgreen']  \nexplode = (0.1, 0, 0, 0)  # explode 1st slice  \n\n# Plot  \nplt.figure(figsize=(6.0, 6.0))  \nplt.pie(sizes, explode=explode, labels=labels, colors=colors, autopct='%1.1f%%', shadow=True, startangle=140)  \n\nplt.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.  \nplt.show()\n```"}
{"file": "dataset/ori_500/pie_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for plotting\nlabels = ['Coal', 'Hydro', 'Solar', 'Wind']\nsizes = [25.0, 15.0, 37.5, 30.0]\ncolors = ['#FF9999','#66b3ff','#99ff99','#ffcc99']\nexplode = (0.1, 0, 0, 0)  # explode 1st slice\n\n# Plot\nplt.figure(figsize=(6.0, 6.0))\nplt.pie(sizes, explode=explode, labels=labels, colors=colors,\nautopct='%1.1f%%', shadow=True, startangle=140)\n\nplt.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\nplt.show()\n```"}
{"file": "dataset/ori_500/quiver_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ndata = {\n    'English': [(-4.0, -3.22, -2.44, -2.44, -2.44), (-4.0, -3.22, -2.44, -2.44, -2.44)],\n    'French': [(-4.0, -3.22, -2.44, -2.44, -2.44), (-4.0, -3.22, -2.44, -2.44, -2.44)],\n    'German': [(-4.0, -3.22, -2.44, -2.44, -2.44), (-4.0, -3.22, -2.44, -2.44, -2.44)],\n    'Japanese': [(-4.0, -3.22, -2.44, -2.44, -2.44), (-4.0, -3.22, -2.44, -2.44, -2.44)]\n}\n\n# Create a new figure\nfig, axes = plt.subplots(2, 2, figsize=(10.0, 4.0))\n\n# Plot data\nfor i, (lang, values) in enumerate(data.items()):\n    for j, (out_bias, in_bias) in enumerate(values):\n        axes[i, j].plot(out_bias, label='Out-group bias (Collectivism)')\n        axes[i, j].plot(in_bias, label='In-group bias (Individualism)', color='blue')\n        axes[i, j].set_title(f'{lang} ({j+1})')\n        axes[i, j].legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/quiver_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ndata = {\n    'English': [-4.00, -3.22, -2.44, -2.00],\n    'French': [-3.22, -2.44, -2.00, -1.66],\n    'German': [-2.44, -2.00, -1.66, -1.32]\n}\n\n# Create a new figure\nfig, ax = plt.subplots(figsize=(5.0, 4.0))\n\n# Plot the data\nfor label, values in data.items():\n    ax.plot(values, label=label)\n\n# Set labels and title\nax.set_xlabel('X-axis')\nax.set_ylabel('Y-axis')\nax.set_title('Sample Plot')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/quiver_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx1 = np.linspace(0, 0.6, 10)\nx2 = np.linspace(0, 0.6, 10)\nX1, X2 = np.meshgrid(x1, x2)\nU = np.random.rand(10, 10)\nV = np.random.rand(10, 10)\n\n# Create a new figure\nfig = plt.figure(figsize=(8.0, 6.0))\n\n# Plot the quiver plot\nplt.quiver(X1, X2, U, V, color='r')\n\n# Set labels\nplt.xlabel('X1')\nplt.ylabel('X2')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/quiver_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.linspace(-1, 1, 100)\ny = np.linspace(-1, 1, 100)\nX, Y = np.meshgrid(x, y)\nU = np.cos(X)\nV = np.sin(Y)\n\n# Create a new figure\nfig = plt.figure(figsize=(5.0, 4.0))\n\n# Plot the vector field\nplt.quiver(X, Y, U, V)\n\n# Set labels\nplt.xlabel('X')\nplt.ylabel('Y')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/quiver_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.linspace(-2, 2, 100)\ny = np.linspace(-2, 2, 100)\nX, Y = np.meshgrid(x, y)\nBx = np.sin(X) * np.cos(Y)\nBy = -np.cos(X) * np.sin(Y)\n\n# Create a new figure\nfig = plt.figure(figsize=(6.0, 5.0))\n\n# Plot the vector field\nplt.quiver(X, Y, Bx, By, color='blue')\n\n# Set labels\nplt.xlabel('x')\nplt.ylabel('y')\nplt.title('Magnetic Field \\u03B2 in Tesla units')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ndata = {\n    'VQA2': [79.9],\n    'SQA-I': [86.8],\n    'TextVQA': [59.1],\n    'TextVQA (0.1, 100.0, 'TextVQA')': [78.2],\n    'TextVQA (0.7747361451096296, 100.06427876096865, 'SQA-I')': [59.1],\n    'MM': [66.9, 54.3, 51.7, 63.4, 75.8, 86.4],\n    'MME': [64.9, 51.7, 63.4, 75.8, 86.4],\n    'LLaVA-W': [72.9, 86.4],\n    'POPE': [79.9, 86.8, 59.1, 78.2, 59.1, 78.2]\n}\n\n# Create a new figure\nfig, ax = plt.subplots(figsize=(8.0, 7.0))\n\n# Plot the data\nfor label, values in data.items():\n    ax.pie(values, labels=[label], startangle=90, radius=1, colors=['red', 'blue'], autopct='%1.1f%%')\n\n# Set the title\nax.set_title('Sample Pie Chart')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ndata = {\n    'fr': [20, 40, 60],\n    'hi': [20, 40, 60],\n    'ru': [20, 40, 60],\n    'th': [20, 40, 60],\n    'ur': [20, 40, 60],\n    'vi': [20, 40, 60],\n    'zh': [20, 40, 60]\n}\n\n# Create a new figure\nfig, ax = plt.subplots(figsize=(5.0, 5.0))\n\n# Plot the data\nfor key, values in data.items():\n    ax.plot(values, label=key)\n\n# Set labels and title\nax.set_xlabel('Speed-up ratio')\nax.set_ylabel('Time (ms)')\nax.set_title('XNLI (speed-up ratio: 4)')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\nlabels = ['Interference', 'Understanding', 'Questioning', 'Reasoning', 'Paraphrasing', 'Reflection']\nsizes = [10, 8, 6, 4, 2, 0]\ncolors = ['#0072B2', '#D55E00', '#009E73', '#F0E442', '#CC79A7', '#56B4E9']\nexplode = (0.1, 0, 0, 0, 0, 0)\n\n# Create a pie chart\nfig, ax = plt.subplots(figsize=(4.0, 4.0))\nax.pie(sizes, explode=explode, labels=labels, colors=colors, autopct='%1.1f%%', startangle=140)\nax.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\n\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ndata = {\n    '\u03bcR': [0.496],\n    '\u03bcAUC': [0.37],\n    '\u03bcTrain': [0.48],\n    'NTP': [0.5],\n    'Nff': [0.46],\n    'AUC': [0.24],\n    'Train': [0.36],\n    'R': [0.22],\n    'TP': [0.29],\n    'FF': [0.28],\n    'AUC^': [0.24],\n    'Train^': [0.36],\n    'R^': [0.22],\n    'TP^': [0.29],\n    'FF^': [0.28],\n    'AUC^2': [0.24],\n    'Train^2': [0.36],\n    'R^2': [0.22],\n    'TP^2': [0.29],\n    'FF^2': [0.28],\n    'AUC^3': [0.24],\n    'Train^3': [0.36],\n    'R^3': [0.22],\n    'TP^3': [0.29],\n    'FF^3': [0.28],\n    'AUC^4': [0.24],\n    'Train^4': [0.36],\n    'R^4': [0.22],\n    'TP^4': [0.29],\n    'FF^4': [0.28],\n    'AUC^5': [0.24],\n    'Train^5': [0.36],\n    'R^5': [0.22],\n    'TP^5': [0.29],\n    'FF^5': [0.28],\n    'AUC^6': [0.24],\n    'Train^6': [0.36],\n    'R^6': [0.22],\n    'TP^6': [0.29],\n    'FF^6': [0.28],\n    'AUC^7': [0.24],\n    'Train^7': [0.36],\n    'R^7': [0.22],\n    'TP^7': [0.29],\n    'FF^7': [0.28],\n    'AUC^8': [0.24],\n    'Train^8': [0.36],\n    'R^8': [0.22],\n    'TP^8': [0.29],\n    'FF^8': [0.28],\n    'AUC^9': [0.24],\n    'Train^9': [0.36],\n    'R^9': [0.22],\n    'TP^9': [0.29],\n    'FF^9': [0.28],\n    'AUC^10': [0.24],\n    'Train^10': [0.36],\n    'R^10': [0.22],\n    'TP^10': [0.29],\n    'FF^10': [0.28],\n    'AUC^11': [0.24],\n    'Train^11': [0.36],\n    'R^11': [0.22],\n    'TP^11': [0.29],\n    'FF^11': [0.28],\n    'AUC^12': [0.24],\n    'Train^12': [0.36],\n    'R^12': [0.22],\n    'TP^12': [0.29],\n    'FF^12': [0.28],\n    'AUC^13': [0.24],\n    'Train^13': [0.36],\n    'R^13': [0.22],\n    'TP^13': [0.29],\n    'FF^13': [0.28],\n    'AUC^14': [0.24],\n    'Train^14': [0.36],\n    'R^14': [0.22],\n    'TP^14': [0.29],\n    'FF^14': [0.28],\n    'AUC^15': [0.24],\n    'Train^15': [0.36],\n    'R^15': [0.22],\n    'TP^15': [0.29],\n    'FF^15': [0.28],\n    'AUC^16': [0.24],\n    'Train^16': [0.36],\n    'R^16': [0.22],\n    'TP^16': [0.29],\n    'FF^16': [0.28],\n    'AUC^17': [0.24],\n    'Train^17': [0.36],\n    'R^17': [0.22],\n    'TP^17': [0.29],\n    'FF^17': [0.28],\n    'AUC^18': [0.24],\n    'Train^18': [0.36],\n    'R^18': [0.22],\n    'TP^18': [0.29],\n    'FF^18': [0.28],\n    'AUC^19': [0.24],\n    'Train^19': [0.36],\n    'R^19': [0.22],\n    'TP^19': [0.29],\n    'FF^19': [0.28],\n    'AUC^20': [0.24],\n    'Train^20': [0.36],\n    'R^20': [0.22],\n    'TP^20': [0.29],\n    'FF^20': [0.28],\n    'AUC^21': [0.24],\n    'Train^21': [0.36],\n    'R^21': [0.22],\n    'TP^21': [0.29],\n    'FF^21': [0.28],\n    'AUC^22': [0.24],\n    'Train^22': [0.36],\n    'R^22': [0.22],\n    'TP^22': [0.29],\n    'FF^22': [0.28],\n    'AUC^23': [0.24],\n    'Train^23': [0.36],\n    'R^23': [0.22],\n    'TP^23': [0.29],\n    'FF^23': [0.28],\n    'AUC^24': [0.24],\n    'Train^24': [0.36],\n    'R^24': [0.22],\n    'TP^24': [0.29],\n    'FF^24': [0.28],\n    'AUC^25': [0.24],\n    'Train^25': [0.36],\n    'R^25': [0.22],\n    'TP^25': [0.29],\n    'FF^25': [0.28],\n    'AUC^26': [0.24],\n    'Train^26': [0.36],\n    'R^26': [0.22],\n    'TP^26': [0.29],\n    'FF^26': [0.28],\n    'AUC^27': [0.24],\n    'Train^27': [0.36],\n    'R^27': [0.22],\n    'TP^27': [0.29],\n    'FF^27': [0.28],\n    'AUC^28': [0.24],\n    'Train^28': [0.36],\n    'R^28': [0.22],\n    'TP^28': [0.29],\n    'FF^28': [0.28],\n    'AUC^29': [0.24],\n    'Train^29': [0.36],\n    'R^29': [0.22],\n    'TP^29': [0.29],\n    'FF^29': [0.28],\n    'AUC^30': [0.24],\n    'Train^30': [0.36],\n    'R^30': [0.22],\n    'TP^30': [0.29],\n    'FF^30': [0.28],\n    'AUC^31': [0.24],\n    'Train^31': [0.36],\n    'R^31': [0.22],\n    'TP^31': [0.29],\n    'FF^31': [0.28],\n    'AUC^32': [0.24],\n    'Train^32': [0.36],\n    'R^32': [0.22],\n    'TP^32': [0.29],\n    'FF^32': [0.28],\n    'AUC^33': [0.24],\n    'Train^33': [0.36],\n    'R^33': [0.22],\n    'TP^33': [0.29],\n    'FF^33': [0.28],\n    'AUC^34': [0.24],\n    'Train^34': [0.36],\n    'R^34': [0.22],\n    'TP^34': [0.29],\n    'FF^34': [0.28],\n    'AUC^35': [0.24],\n    'Train^35': [0.36],\n    'R^35': [0.22],\n    'TP^35': [0.29],\n    'FF^35': [0.28],\n    'AUC^36': [0.24],\n    'Train^36': [0.36],\n    'R^36': [0.22],\n    'TP^36': [0.29],\n    'FF^36': [0.28],\n    'AUC^37': [0.24],\n    'Train^37': [0.36],\n    'R^37': [0.22],\n    'TP^37': [0.29],\n    'FF^37': [0.28],\n    'AUC^38': [0.24],\n    'Train^38': [0.36],\n    'R^38': [0.22],\n    'TP^38': [0.29],\n    'FF^38': [0.28],\n    'AUC^39': [0.24],\n    'Train^39': [0.36],\n    'R^39': [0.22],\n    'TP^39': [0.29],\n    'FF^39': [0.28],\n    'AUC^40': [0.24],\n    'Train^40': [0.36],\n    'R^40': [0.22],\n    'TP^40': [0.29],\n    'FF^40': [0.28],\n    'AUC^41': [0.24],\n    'Train^41': [0.36],\n    'R^41': [0.22],\n    'TP^41': [0.29],\n    'FF^41': [0.28],\n    'AUC^42': [0.24],\n    'Train^42': [0.36],\n    'R^42': [0.22],\n    'TP^42': [0.29],\n    'FF^42': [0.28],\n    'AUC^43': [0.24],\n    'Train^43': [0.36],\n    'R^43': [0.22],\n    'TP^43': [0.29],\n    'FF^43': [0.28],\n    'AUC^44': [0.24],\n    'Train^44': [0.36],\n    'R^44': [0.22],\n    'TP^44': [0.29],\n    'FF^44': [0.28],\n    'AUC^45': [0.24],\n    'Train^45': [0.36],\n    'R^45': [0.22],\n    'TP^45': [0.29],\n    'FF^45': [0.28],\n    'AUC^46': [0.24],\n    'Train^46': [0.36],\n    'R^46': [0.22],\n    'TP^46': [0.29],\n    'FF^46': [0.28],\n    'AUC^47': [0.24],\n    'Train^47': [0.36],\n    'R^47': [0.22],\n    'TP^47': [0.29],\n    'FF^47': [0.28],\n    'AUC^48': [0.24],\n    'Train^48': [0.36],\n    'R^48': [0.22],\n    'TP^48': [0.29],\n    'FF^48': [0.28],\n    'AUC^49': [0.24],\n    'Train^49': [0.36],\n    'R^49': [0.22],\n    'TP^49': [0.29],\n    'FF^49': [0.28],\n    'AUC^50': [0.24],\n    'Train^50': [0.36],\n    'R^50': [0.22],\n    'TP^50': [0.29],\n    'FF^50': [0.28],\n    'AUC^51': [0.24],\n    'Train^51': [0.36],\n    'R^51': [0.22],\n    'TP^51': [0.29],\n    'FF^51': [0.28],\n    'AUC^52': [0.24],\n    'Train^52': [0.36],\n    'R^52': [0.22],\n    'TP^52': [0.29],\n    'FF^52': [0.28],\n    'AUC^53': [0.24],\n    'Train^53': [0.36],\n    'R^53': [0.22],\n    'TP^53': [0.29],\n    'FF^53': [0.28],\n    'AUC^54': [0.24],\n    'Train^54': [0.36],\n    'R^54': [0.22],\n    'TP^54': [0.29],\n    'FF^54': [0.28],\n    'AUC^55': [0.24],\n    'Train^55': [0.36],\n    'R^55': [0.22],\n    'TP^55': [0.29],\n    'FF^55': [0.28],\n    'AUC^56': [0.24],\n    'Train^56': [0.36],\n    'R^56': [0.22],\n    'TP^56': [0.29],\n    'FF^56': [0.28],\n    'AUC^57': [0.24],\n    'Train^57': [0.36],\n    'R^57': [0.22],\n    'TP^57': [0.29],\n    'FF^57': [0.28],\n    'AUC^58': [0.24],\n    'Train^58': [0.36],\n    'R^58': [0.22],\n    'TP^58': [0.29],\n    'FF^58': [0.28],\n    'AUC^59': [0.24],\n    'Train^59': [0.36],\n    'R^59': [0.22],\n    'TP^59': [0.29],\n    'FF^59': [0.28],\n    'AUC^60': [0.24],\n    'Train^60': [0.36],\n    'R^60': [0.22],\n    'TP^60': [0.29],\n    'FF^60': [0.28],\n    'AUC^61': [0.24],\n    'Train^61': [0.36],\n    'R^61': [0.22],\n    'TP^61': [0.29],\n    'FF^6"}
{"file": "dataset/ori_500/radar_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ncategories = ['novel', 'programming world', 'mythology', 'universe', 'general', 'movie', 'city', 'special place', 'country', 'fairy tale', 'landscape', 'cultural event']\nvalues = [0.8, 0.8, 0.6, 0.6, 0.4, 0.4, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2]\n\n# Create a new figure\nfig = plt.figure(figsize=(6.0, 6.0))\n\n# Plot the data\nplt.pie(values, labels=categories, startangle=90, autopct='%1.1f%%')\n\n# Set title\nplt.title('Sample Pie Chart')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\nlabels = ['GPT-J-6B', 'TinyLLaMA-1.1B', 'OpenLLaMA-3B', 'OpenMoE-8B/32E']\nangles = np.linspace(0, 2 * np.pi, len(labels), endpoint=False).tolist()\nangles += angles[:1]  # To close the loop\n\n# Create a polar plot\nfig, ax = plt.subplots(figsize=(6.0, 6.0), subplot_kw={'projection': 'polar'})\n\n# Plot data\nax.plot(angles, labels, 'o-', linewidth=2)\nax.fill(angles, labels, alpha=0.25)\n\n# Set title\nax.set_title('Roleplay', size=16, y=1.05)\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ncategories = ['Nutrition', 'Purity', 'Allergen', 'Pollution', 'Recall', 'Storage', 'Material']\nvalues = [0.3, 0.4, 0.2, 0.1, 0.5, 0.6, 0.7]\ncolors = ['red', 'green']\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(8.0, 8.0))\n\n# Plot the pie chart\nplt.pie(values, labels=categories, colors=colors, autopct='%1.1f%%')\n\n# Set title\nplt.title('MUJI vs Nestle in Food Safety')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_16.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ndata = {\n    'Apple': [85.8, 78.7, 71.9, 85.0],\n    'Samsung': [66.4, 66.1, 64.1, 85.0],\n    'Huawei': [66.4, 59.7, 50.8, 78.7]\n}\n\n# Create a new figure\nfig, ax = plt.subplots(figsize=(8.0, 7.0))\n\n# Plot the data\nfor label, values in data.items():\n    ax.plot(values, label=label)\n\n# Set labels and title\nax.set_xlabel('Time')\nax.set_ylabel('Value')\nax.set_title('Sample Data Plot')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_17.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ndata = [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 5]\n]\n\n# Create a new figure\nfig, axes = plt.subplots(1, 3, figsize=(10.0, 8.0))\n\n# Plot each subplot\nfor ax, d in zip(axes, data):\n    ax.pie(d, startangle=90)\n    ax.axis('equal')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_18.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ndata = {\n    'Food Quality': [0.2, 0.4],\n    'Shows': [0.6, 0.8],\n    'Staff': [0.2, 0.4],\n    'Family Rides': [0.6, 0.8],\n    'Cleanliness': [0.2, 0.4],\n    'Thrill Rides': [0.6, 0.8],\n    'Wait Times': [0.2, 0.4],\n    'Parking': [0.6, 0.8],\n    'Ticket Price': [0.2, 0.4],\n    'Souvenirs': [0.6, 0.8]\n}\n\n# Create a new figure\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Plot the data\nfor key, values in data.items():\n    ax.scatter(values[0], values[1], color='orange' if key == 'Disney' else 'purple', label=key)\n\n# Set labels and title\nax.set_xlabel('Disney')\nax.set_ylabel('Universal Studios')\nax.set_title('Amusement Park Comparison: Disney vs Universal Studios')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_19.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ndata = np.array([[1, 3, 5, 7, 9], [1, 3, 5, 7, 9], [1, 3, 5, 7, 9], [1, 3, 5, 7, 9], [1, 3, 5, 7, 9]])\ncategories = ['Chanel', 'Dior', 'Gucci']\nsubcategories = ['Creativity', 'Versatility', 'Longevity', 'Projection', 'Value', 'Packaging', 'Sillage', 'Popularity']\n\n# Create a new figure\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Plot the data\nax.pie(data.flatten(), labels=subcategories, autopct='%1.1f%%', startangle=140)\n\n# Set the title\nax.set_title('Sample Pie Chart')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ndata = {\n    'TinyLaMA': [78.7, 66.1, 59.7, 85.8],\n    'StableLM': [78.7, 66.1, 59.7, 85.8],\n    'Phi-2': [78.7, 66.1, 59.7, 85.8]\n}\n\n# Create a new figure\nfig, ax = plt.subplots(figsize=(8.0, 7.0))\n\n# Plot the data\nfor label, values in data.items():\n    ax.plot(values, label=label)\n\n# Set labels and title\nax.set_xlabel('Data Points')\nax.set_ylabel('Values')\nax.set_title('Sample Plot')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_20.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ndata = {\n    'Creativity': {\n        'Versatility': [1, 3, 5, 7, 9],\n        'Longevity': [1, 3, 5, 7, 9]\n    },\n    'Popularity': {\n        'Versatility': [1, 3, 5, 7, 9],\n        'Longevity': [1, 3, 5, 7, 9]\n    }\n}\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(18.0, 6.0))\n\n# Plot the first subplot\nax1 = fig.add_subplot(131)\nax1.set_title('Creativity')\nax1.set_xlabel('Versatility')\nax1.set_ylabel('Longevity')\nax1.plot(data['Creativity']['Versatility'], data['Creativity']['Longevity'], 'bo-')\n\n# Plot the second subplot\nax2 = fig.add_subplot(132)\nax2.set_title('Popularity')\nax2.set_xlabel('Versatility')\nax2.set_ylabel('Longevity')\nax2.plot(data['Popularity']['Versatility'], data['Popularity']['Longevity'], 'ro-')\n\n# Plot the third subplot\nax3 = fig.add_subplot(133)\nax3.set_title('Creativity')\nax3.set_xlabel('Versatility')\nax3.set_ylabel('Longevity')\nax3.plot(data['Creativity']['Versatility'], data['Creativity']['Longevity'], 'go-')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nangles = np.linspace(0, 2 * np.pi, 10, endpoint=False).tolist()\nangles += angles[:1]  # To close the plot\nvalues = [0.6, 0.4, 0.2, 0.6, 0.4, 0.2, 0.6, 0.4, 0.2, 0.6]\ncolors = ['red', 'blue']\n\nfig = plt.figure(figsize=(8.0, 8.0))\nax = fig.add_subplot(111, polar=True)\n\n# Plot the data\nax.plot(angles, values, 'o-', linewidth=2)\nax.fill(angles, values, color='yellow', alpha=0.25)\n\n# Set the title\nax.set_title(\"Loadings PC1\", va='bottom')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ndata = {\n    'Fidelity(D_train)': [1, 2, 3, 4, 5],\n    'Fidelity(D_test)': [1, 2, 3, 4, 5],\n    'MLA': [1, 2, 3, 4, 5],\n    'TVAE': [1, 2, 3, 4, 5]\n}\n\n# Create a new figure with specified size\nfig, axes = plt.subplots(1, 3, figsize=(10.0, 6.0))\n\n# Plot each dataset on a separate subplot\nfor ax, key in zip(axes, data.keys()):\n    ax.plot(data[key], label=key)\n    ax.set_title(key)\n    ax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ncategories = ['Heterocycle formation', 'C-C bond formation', 'Acylation and related processes', 'Hetroalkylation and arylation', 'Functional group addition, FGA']\nvalues = [35, 45, 55, 65, 75]\n\n# Create a new figure\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Plot the data\nax.pie(values, labels=categories, autopct='%1.1f%%')\n\n# Set title\nax.set_title('Sample Pie Chart')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ndata = {\n    'Model_C': [0.07, 0.03, 0.07],\n    'Model_B': [0.07, 0.03, 0.07],\n    'Model_D': [0.07, 0.03, 0.07],\n    'Model_E': [0.07, 0.03, 0.07],\n    'Model_F': [0.07, 0.03, 0.07]\n}\n\n# Create a new figure\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Plot the data\nfor key, values in data.items():\n    ax.plot(values, label=key)\n\n# Set labels and title\nax.set_xlabel('Time')\nax.set_ylabel('Score')\nax.set_title('Score Over Time')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ndata = np.random.rand(10, 10)\nlabels = ['rose', 'candlestick', 'multi-axes', 'bubble', 'radar', 'area', 'pie', 'funnel', 'box', 'treemap']\ncolors = ['red', 'blue', 'orange', 'green', 'purple', 'pink', 'brown', 'gray', 'cyan', 'magenta']\n\n# Create a new figure\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Plot the data\nax.pie(data.flatten(), labels=labels, colors=colors, autopct='%1.1f%%')\n\n# Set title\nax.set_title('3D-bar')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ndata = np.array([\n    [0.1, 0.2, 0.3],\n    [0.4, 0.5, 0.6],\n    [0.7, 0.8, 0.9]\n])\n\n# Create a new figure\nfig, ax = plt.subplots(figsize=(5.0, 5.0))\n\n# Plot the data\ncax = ax.matshow(data, cmap='viridis')\n\n# Add a colorbar\nfig.colorbar(cax)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ndata = {\n    'POPE': [75.4, 56.9, 65.0, 49.3, 65.0, 55.6],\n    'MM-Vet': [56.9, 49.3, 49.5, 55.6, 55.6, 55.6],\n    'TextVQA': [72.9, 67.2, 67.2, 67.2, 67.2, 67.2],\n    'GQA': [72.9, 67.2, 67.2, 67.2, 67.2, 67.2],\n    'SQA-I': [72.9, 67.2, 67.2, 67.2, 67.2, 67.2]\n}\n\n# Create a new figure\nfig, ax = plt.subplots(figsize=(8.0, 7.0))\n\n# Plot the data\nfor key, values in data.items():\n    ax.plot(values, label=key)\n\n# Set labels and title\nax.set_xlabel('X-axis')\nax.set_ylabel('Y-axis')\nax.set_title('Sample Plot')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ndata = {\n    'llama-2-70-chat': [0.5, 0.5, 0.5, 0.5, 0.5],\n    'llama-2-70': [0.5, 0.5, 0.5, 0.5, 0.5],\n    'hf_falcon-40b': [0.5, 0.5, 0.5, 0.5, 0.5],\n    'text-bison@002': [0.5, 0.5, 0.5, 0.5, 0.5],\n    'claude-2': [0.5, 0.5, 0.5, 0.5, 0.5],\n    'claude-1': [0.5, 0.5, 0.5, 0.5, 0.5],\n    'text-davinci-002': [0.5, 0.5, 0.5, 0.5, 0.5],\n    'text-davinci-003': [0.5, 0.5, 0.5, 0.5, 0.5],\n    'gpt-4': [0.5, 0.5, 0.5, 0.5, 0.5]\n}\n\n# Create a new figure\nfig, axes = plt.subplots(1, 4, figsize=(12.0, 4.0))\n\n# Plot each dataset\nfor i, (key, values) in enumerate(data.items()):\n    axes[i].scatter(range(len(values)), values)\n    axes[i].set_title(key)\n    axes[i].set_xlabel('Value')\n    axes[i].set_ylabel('Model-Basedness')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Sample data\nx = [0, 1000, 2000, 3000]\ny = [77, 79, 81, 83]\n\n# Create a new figure\nplt.figure(figsize=(8.0, 5.0))\n\n# Plot the data\nplt.plot(x, y, marker='o')\n\n# Set labels\nplt.xlabel('Pre-training GPU Hours')\nplt.ylabel('Accuracy [%]')\n\n# Set title\nplt.title('ImageNet-1K Linear Probing')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt  \nimport numpy as np  \n\n# Sample data\nx = np.array([10, 20, 30, 40, 50, 60])\ny = np.array([0.85, 0.80, 0.75, 0.70, 0.65, 0.60])\n\n# Create a new figure\nfig = plt.figure(figsize=(8.0, 6.0))\n\n# Plot the data\nplt.scatter(x, y, c='red')\n\n# Set labels\nplt.xlabel('Inference Time (seconds)')\nplt.ylabel('Average Score')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.array([25, 30, 40, 45])\ny = np.array([45, 40, 50, 55])\n\n# Create a new figure\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data\nax.scatter(x, y, c='blue')\n\n# Set labels\nax.set_xlabel('EgoSchema VQA accuracy')\nax.set_ylabel('Perception Test VQA accuracy')\nax.set_title('Number of parameters')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt  \nimport numpy as np  \n\n# Sample data\nx = np.array([1.0, 2.0, 3.0, 4.0, 5.0])\ny1 = np.array([0.08, 0.07, 0.06, 0.05, 0.04])\ny2 = np.array([0.08, 0.07, 0.06, 0.05, 0.04])\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(8.0, 6.0))\n\n# Plot the data\nplt.plot(x, y1, 'b^', label='Single LSTM')\nplt.plot(x, y2, 'g^', label='Ensemble LSTM')\n\n# Set labels and title\nplt.xlabel('Test Case Index, u')\nplt.ylabel('Average Relative Error, u')\nplt.title('Average Relative Error, u')\n\n# Add a legend\nplt.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ndata = {\n    'spotlight': [0.8, 0.9, 0.7, 0.6, 0.5],\n    'sliding': [0.8, 0.9, 0.7, 0.6, 0.5],\n    'wool': [0.8, 0.9, 0.7, 0.6, 0.5],\n    'weasel': [0.8, 0.9, 0.7, 0.6, 0.5],\n    'space': [0.8, 0.9, 0.7, 0.6, 0.5],\n    'partridge': [0.8, 0.9, 0.7, 0.6, 0.5],\n    'mushroom': [0.8, 0.9, 0.7, 0.6, 0.5],\n    'bighorn': [0.8, 0.9, 0.7, 0.6, 0.5]\n}\n\n# Create a new figure\nfig, ax = plt.subplots(figsize=(6.0, 3.0))\n\n# Plot the data\nfor key, values in data.items():\n    ax.plot(values, label=key)\n\n# Set labels and title\nax.set_xlabel('Classes')\nax.set_ylabel('Accuracies for the ImageNet Classes (ClarifAI)')\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ndata = {\n    'MAD+judge': [68, 68, 68, 68, 68],\n    'ToT': [66, 66, 66, 66, 66],\n    'CoT(maj@5)': [66, 66, 66, 66, 66],\n    'CoT(maj@1)': [64, 64, 64, 64, 64],\n    'Self-refine': [62, 62, 62, 62, 62],\n    'DefInt': [62, 62, 62, 62, 62]\n}\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(10.0, 4.0))\n\n# Plot the data\nfor key, values in data.items():\n    ax.plot(values, label=key)\n\n# Set labels and title\nax.set_xlabel('Token cost($)')\nax.set_ylabel('Accuracy(%)')\nax.set_title('Logic Grid Puzzle(Accuracy versus token cost)')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_16.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.array([15, 20, 25, 30, 35, 40, 45, 50])\ny = np.array([0, 0, 0, 0, 0, 0, 0, 0])\n\n# Create a new figure\nfig = plt.figure(figsize=(8.0, 4.0))\n\n# Plot the data\nplt.plot(x, y, 'ro')\n\n# Set labels and title\nplt.xlabel('Efficiency (%)')\nplt.ylabel('Carbon Reduction (%)')\nplt.title('Energy Source')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_17.pdf", "response": "```python\nimport matplotlib.pyplot as plt  \nimport numpy as np  \n\n# Sample data\nx = np.random.rand(100)\ny = np.random.rand(100)\nc = np.random.rand(100)\n\n# Create a new figure\nfig = plt.figure(figsize=(9.0, 6.0))\n\n# Plot the data\nplt.scatter(x, y, c=c, s=50)\n\n# Set labels\nplt.xlabel('X Label')\nplt.ylabel('Y Label')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_18.pdf", "response": "```python\nimport matplotlib.pyplot as plt  \nimport numpy as np  \n\n# Sample data\nx = np.array([2, 4, 6, 8, 10, 12, 14, 16])\ny_day1 = np.array([95, 90, 85, 80, 75, 70, 65, 60])\ny_day2 = np.array([105, 100, 95, 90, 85, 80, 75, 70])\n\n# Create a new figure\nfig = plt.figure(figsize=(6.0, 6.0))\n\n# Plot the data\nplt.plot(x, y_day1, 'bo', label='Day 1')\nplt.plot(x, y_day2, 'ro', label='Day 2')\n\n# Set labels and title\nplt.xlabel('X-axis')\nplt.ylabel('Y-axis')\nplt.title('Scatter Plot of Data Points')\nplt.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_19.pdf", "response": "```python\nimport matplotlib.pyplot as plt  \nimport numpy as np  \n\n# Sample data\nx = np.array([2, 4, 6, 8, 10, 12, 14, 16])\ny = np.array([105, 100, 95, 90, 85, 80, 75, 70])\n\n# Create a new figure\nfig = plt.figure(figsize=(6.0, 6.0))\n\n# Plot the data\nplt.scatter(x, y)\n\n# Set labels\nplt.xlabel('X-axis')\nplt.ylabel('Y-axis')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt  \nimport numpy as np  \n\n# Sample data\nx = np.array([175, 200, 225, 250, 275, 300])\ny1 = np.array([140, 160, 180, 200, 220, 240])\ny2 = np.array([145, 165, 185, 205, 225, 245])\ny3 = np.array([150, 170, 190, 210, 230, 250])\ny4 = np.array([155, 175, 195, 215, 235, 255])\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(4.0, 8.0))\n\n# Plot the data\nplt.plot(x, y1, 'b-', label='Solar Energy')\nplt.plot(x, y2, 'r-', label='Wind Energy')\nplt.plot(x, y3, 'g-', label='Hydropower')\n\n# Set labels and title\nplt.xlabel('Installed Capacity (GW)')\nplt.ylabel('Energy Output (TWh)')\nplt.title('Energy Production Trends')\n\n# Add a legend\nplt.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_20.pdf", "response": "```python\nimport matplotlib.pyplot as plt  \nimport numpy as np  \n\n# Sample data\nx = np.array([10, 20, 30, 40, 50, 60, 70, 80, 90])\ny = np.array([20, 30, 40, 50, 60, 70, 80, 90, 10])\n\n# Create a new figure\nplt.figure(figsize=(8.0, 6.0))\n\n# Plot the data\nplt.scatter(x, y)\n\n# Set labels\nplt.xlabel('X-axis')\nplt.ylabel('Y-axis')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_21.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.array([2, 3, 4, 5, 6, 7, 8])\ny_libri = np.array([0.9, 0.8, 0.8, 0.8, 0.8, 0.9, 0.9])\ny_ami = np.array([0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9])\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(10.0, 5.0))\n\n# Plot the data\nplt.plot(x, y_libri, 'bo-', label='LibriCSS WER')\nplt.plot(x, y_ami, 'ro-', label='AMI WER')\n\n# Set labels and title\nplt.xlabel('Number of Microphones')\nplt.ylabel('WER (%)')\nplt.title('LibriCSS vs Additional Data 1')\n\n# Add a legend\nplt.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_22.pdf", "response": "```python\nimport matplotlib.pyplot as plt  \nimport numpy as np  \n\n# Sample data\ndata = {\n    'llama-2-70-chat': [0.35, 0.45, 0.55, 0.65, 0.75],\n    'llama-2-70': [0.35, 0.45, 0.55, 0.65, 0.75],\n    'hfalcon-40b': [0.35, 0.45, 0.55, 0.65, 0.75],\n    'text-bison@002': [0.35, 0.45, 0.55, 0.65, 0.75],\n    'claude-2': [0.35, 0.45, 0.55, 0.65, 0.75],\n    'claude-1': [0.35, 0.45, 0.55, 0.65, 0.75],\n    'text-davinci-002': [0.35, 0.45, 0.55, 0.65, 0.75],\n    'text-davinci-003': [0.35, 0.45, 0.55, 0.65, 0.75],\n    'gpt-4': [0.35, 0.45, 0.55, 0.65, 0.75]\n}\n\n# Create a new figure with specified size\nfig, ax = plt.subplots(figsize=(12.0, 6.0))\n\n# Plot the data\nfor model, values in data.items():\n    ax.plot(values, label=model)\n\n# Set labels and title\nax.set_xlabel('Value')\nax.set_ylabel('Model-Basedness')\nax.set_title('Performance Comparison')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_23.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nmodels = ['Mixtal-8x7B', 'MPT-7B', 'Llama2-70B', 'Falcon-40B', 'Davinci-003', 'Davinci-002', 'Claude-2', 'Claude-1']\ngpt4_scores_mb = [1.95, 1.65, 1.65, 1.65, 1.65, 1.65, 1.65, 1.65]\nmeta_cognition_scores_mb = [1.75, 1.55, 1.55, 1.55, 1.55, 1.55, 1.55, 1.55]\ngpt4_scores_exp = [1.95, 1.65, 1.65, 1.65, 1.65, 1.65, 1.65, 1.65]\nrisk_taking_scores_exp = [1.95, 1.65, 1.65, 1.65, 1.65, 1.65, 1.65, 1.65]\n\n# Create a new figure with specified size\nfig, axes = plt.subplots(2, 2, figsize=(8.0, 8.0))\n\n# Plot Model-Basedness scores\naxes[0, 0].plot(models, gpt4_scores_mb, label='Model-Basedness')\naxes[0, 0].set_title('Meta-Cognition')\naxes[0, 0].set_xlabel('Models')\naxes[0, 0].set_ylabel('Score')\naxes[0, 0].legend()\n\n# Plot Meta-Cognition scores\naxes[0, 1].plot(models, meta_cognition_scores_mb, label='Meta-Cognition', color='orange')\naxes[0, 1].set_title('Meta-Cognition')\naxes[0, 1].set_xlabel('Models')\naxes[0, 1].set_ylabel('Score')\naxes[0, 1].legend()\n\n# Plot Exploration scores\naxes[1, 0].plot(models, gpt4_scores_exp, label='Exploration', color='green')\naxes[1, 0].set_title('Risk-Taking')\naxes[1, 0].set_xlabel('Models')\naxes[1, 0].set_ylabel('Score')\naxes[1, 0].legend()\n\n# Plot Risk-Taking scores\naxes[1, 1].plot(models, risk_taking_scores_exp, label='Risk-Taking', color='red')\naxes[1, 1].set_title('Risk-Taking')\naxes[1, 1].set_xlabel('Models')\naxes[1, 1].set_ylabel('Score')\naxes[1, 1].legend()\n\n# Adjust layout and show plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_24.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx_values = [70, 75, 80, 90]\ny_values = [72, 75, 78, 80]\ncolor_scale_for_x = [70, 75, 80, 90]\ncolor_scale_for_y = [30, 35, 40, 45]\n\n# Create a new figure\nfig, axs = plt.subplots(1, 3, figsize=(15.0, 5.0))\n\n# Plot the first scatter plot\naxs[0].scatter(x_values, y_values, c=color_scale_for_x, cmap='viridis')\naxs[0].set_title('Scatter Plot - deepskyblue')\naxs[0].set_xlabel('X Values')\naxs[0].set_ylabel('Y Values')\naxs[0].set_xlim(70, 90)\naxs[0].set_ylim(30, 45)\n\n# Plot the second scatter plot\naxs[1].scatter(x_values, y_values, c=color_scale_for_y, cmap='viridis')\naxs[1].set_title('Scatter Plot - magenta')\naxs[1].set_xlabel('X Values')\naxs[1].set_ylabel('Y Values')\naxs[1].set_xlim(70, 90)\naxs[1].set_ylim(30, 45)\n\n# Plot the third scatter plot\naxs[2].scatter(x_values, y_values, c=color_scale_for_x, cmap='viridis')\naxs[2].set_title('Scatter Plot - limegreen')\naxs[2].set_xlabel('X Values')\naxs[2].set_ylabel('Y Values')\naxs[2].set_xlim(70, 90)\naxs[2].set_ylim(30, 45)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_25.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.array([70, 72, 74, 76, 80, 82, 84, 86])\ny1 = np.array([50, 45, 40, 35, 30, 25, 20, 15])\ny2 = np.array([45, 40, 35, 30, 25, 20, 15, 10])\ny3 = np.array([50, 45, 40, 35, 30, 25, 20, 15])\n\n# Create a new figure\nfig, axs = plt.subplots(1, 3, figsize=(15.0, 5.0))\n\n# Plot the first subplot\naxs[0].plot(x, y1, 'p-', color='purple')\naxs[0].set_title('ViTPose (sc) Performance')\naxs[0].set_xlabel('Average Precision on MSCOCO (%)')\naxs[0].set_ylabel('Average Precision on HumanArt (%)')\n\n# Plot the second subplot\naxs[1].plot(x, y2, 'p-', color='purple')\naxs[1].set_title('ViTPose (ft) Performance')\naxs[1].set_xlabel('Average Precision on MSCOCO (%)')\naxs[1].set_ylabel('Average Precision on HumanArt (%)')\n\n# Plot the third subplot\naxs[2].plot(x, y3, 'p-', color='purple')\naxs[2].set_title('VLPose Performance')\naxs[2].set_xlabel('Average Precision on MSCOCO (%)')\naxs[2].set_ylabel('Average Precision on HumanArt (%)')\n\n# Adjust layout and show the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ndata = {\n    'CoT': [1.0, 2.5, 10.0, 25.0],\n    'DefInt': [1.0, 2.5, 10.0, 25.0],\n    'SPP': [1.0, 2.5, 10.0, 25.0],\n    'Self-refine': [1.0, 2.5, 10.0, 25.0],\n    'ToT': [1.0, 2.5, 10.0, 25.0]\n}\n\n# Create a new figure\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Plot the data\nfor key, values in data.items():\n    ax.plot(values, label=key)\n\n# Set labels and title\nax.set_xlabel('Diversity')\nax.set_ylabel('Token cost ($)')\nax.set_title('Token cost ($)')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_4.pdf", "response": "```\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(5.0, 5.0))\n\n# Generate random data for plotting\ndata = np.random.rand(100, 100)\n\n# Plot the data using imshow\nplt.imshow(data, cmap='viridis')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt  \nimport numpy as np  \n\n# Sample data\nx = np.array([0.06, 0.08, 0.1, 0.12, 0.14, 0.16, 0.18, 0.2])\ny1 = np.array([800, 700, 600, 500, 400, 300, 200, 100])\ny2 = np.array([800, 700, 600, 500, 400, 300, 200, 100])\ny3 = np.array([800, 700, 600, 500, 400, 300, 200, 100])\ny4 = np.array([800, 700, 600, 500, 400, 300, 200, 100])\ny5 = np.array([800, 700, 600, 500, 400, 300, 200, 100])\n\n# Create a new figure\nfig = plt.figure(figsize=(6.0, 6.0))\n\n# Plot the data\nplt.scatter(x, y1, color='blue', label='SIREN')\nplt.scatter(x, y2, color='cyan', label='WIRE')\nplt.scatter(x, y3, color='red', label='FFN')\nplt.scatter(x, y4, color='green', label='SZ3')\nplt.scatter(x, y5, color='orange', label='Ours')\n\n# Set labels and title\nplt.xlabel('Bit per pixel (BPP)')\nplt.ylabel('WRMSE vs BPP')\nplt.title('Scatter Plot of WRMSE vs BPP')\n\n# Add a legend\nplt.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt  \nimport numpy as np  \n\n# Sample data\nx = np.random.rand(100)\ny = np.random.rand(100)\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(8.0, 8.0))\n\n# Plot the data\nplt.scatter(x, y, c='blue', label='Night Rainy')\nplt.scatter(x, y, c='green', label='PGST')\nplt.scatter(x, y, c='orange', label='Daytime Sunny')\n\n# Add a legend\nplt.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nnmae = [18.5, 20.5, 21.5, 22.5, 23.5, 24.5]\nparams = [1.0, 2.0, 3.0, 4.0, 5.0, 6.0]\nmodels = ['LNO', 'GNO', 'InfGCN', 'DeepDFT2', 'FNO', 'GPW-NO']\n\n# Create a new figure\nfig, ax = plt.subplots(figsize=(6.0, 3.0))\n\n# Plot the data\nax.scatter(params, nmae, c='blue')\n\n# Set labels and title\nax.set_xlabel('Number of parameters (M)')\nax.set_ylabel('NMAE on QM9 (%)')\nax.set_title('Number of params. vs. NMAE on QM9')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nx = np.random.rand(100)\ny = np.random.rand(100)\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(8.0, 8.0))\n\n# Plot the data\nplt.scatter(x, y, c='blue', label='ar')\nplt.scatter(x, y, c='pink', label='de')\nplt.scatter(x, y, c='yellow', label='fr')\nplt.scatter(x, y, c='green', label='he')\n\n# Set labels and title\nplt.xlabel('PC1')\nplt.ylabel('PC2')\nplt.title('Legend')\n\n# Add a legend\nplt.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt  \nimport numpy as np  \n\n# Sample data\nx = np.array([0.6, 0.7, 0.8, 0.9, 1.0])\ny = np.array([0.1, 0.2, 0.3, 0.4, 0.5])\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(7.0, 10.0))\n\n# Plot the data\nplt.scatter(x, y)\n\n# Set labels\nplt.xlabel('Cka Similarity')\nplt.ylabel('MSE')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/tree_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ndata = {\n    'physicsforums.com': [18.42],\n    'gmatclub.com': [6.26],\n    'mathhelpboards.com': [6.15],\n    'mathworks.com': [4.91],\n    'mathoverflow.net': [10.91],\n    'proofwiki.org': [8.54],\n    'stackexchange.com': [30.6],\n    'mathhelpforum.com': [14.21]\n}\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(12.0, 8.0))\n\n# Plot the data\nfor i, (key, value) in enumerate(data.items()):\n    plt.barh(i, value, color=plt.cm.viridis(i / len(data)))\n\n# Set labels and title\nplt.xlabel('Percentage')\nplt.title('Stack Exchange Sites')\nplt.yticks(range(len(data)), list(data.keys()))\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/tree_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt  \nimport numpy as np  \n\n# Data for plotting  \nlabels = ['Java', 'Python', 'JavaScript', 'C++', 'Other']  \nsizes = [10, 20, 27, 23, 8]  \ncolors = ['purple', 'pink', 'orange', 'brown', 'grey']  \nexplode = (0.1, 0, 0, 0, 0)  \n\n# Plotting the pie chart  \nplt.figure(figsize=(12.0, 8.0))  \nplt.pie(sizes, explode=explode, labels=labels, colors=colors, autopct='%1.1f%%', shadow=True, startangle=140)  \nplt.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.  \nplt.show()\n```"}
{"file": "dataset/ori_500/tree_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nlabels = ['Adidas', 'Nike', 'Puma']\nsizes = [13.42, 30.6, 14.21]\ncolors = ['lightblue', 'lightgreen', 'lightcoral']\nexplode = (0.1, 0, 0)  # explode 1st slice\n\n# Plot\nplt.figure(figsize=(12.0, 8.0))\nplt.pie(sizes, explode=explode, labels=labels, colors=colors,\nautopct='%1.1f%%', shadow=True, startangle=140)\n\nplt.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\nplt.show()\n```"}
{"file": "dataset/ori_500/tree_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt  \nimport numpy as np  \n\n# Sample data\ndata = [50, 15, 20]\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(4.0, 6.0))\n\n# Plot the data using a bar chart\nplt.bar(range(len(data)), data, color='blue')\n\n# Set labels for the x-axis\nplt.xticks(range(len(data)), ['50%', '15%', '20%'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/tree_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt  \nimport numpy as np  \n\n# Data for plotting  \nlabels = ['European', 'Australian', 'South American', 'Asian', 'North American', 'African']  \nsizes = [15, 18, 10, 25, 20, 12]  \ncolors = ['yellow', 'purple', 'cyan', 'pink', 'green', 'blue']  \nexplode = (0.1, 0, 0, 0, 0, 0)  \n\n# Plotting the pie chart  \nplt.figure(figsize=(6.0, 6.0))  \nplt.pie(sizes, explode=explode, labels=labels, colors=colors, autopct='%1.1f%%', shadow=True, startangle=140)  \n\n# Equal aspect ratio ensures that pie is drawn as a circle.  \nplt.axis('equal')  \n\n# Show the plot  \nplt.show()\n```"}
{"file": "dataset/ori_500/violin_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ndata = np.random.rand(10, 5)\nlabels = ['Llama2', 'Llama2 (In-Chat)']\n\n# Create a new figure\nfig, ax = plt.subplots(figsize=(8.0, 7.0))\n\n# Plot the data\nfor i in range(data.shape[1]):\n    ax.boxplot(data[:, i], positions=[i], labels=[labels[i]])\n\n# Set labels and title\nax.set_xlabel('Number of examples')\nax.set_ylabel('logP/CL')\nax.set_title('Boxplot of logP/CL for different models')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/violin_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ndata = np.random.rand(3, 10)\nstars = np.array([2, 4, 6, 8, 10])\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(6.0, 6.0))\n\n# Plot the data\nplt.plot(data[0], label='Without Memory', marker='*')\nplt.plot(data[1], label='With Memory', marker='*')\n\n# Set labels and title\nplt.xlabel('Time')\nplt.ylabel('Score')\nplt.title('Comparison of Scores with and without Memory')\nplt.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/violin_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ndata = np.array([\n    [0.3, 0.4],\n    [0.5, 0.6],\n    [0.7, 0.8]\n])\n\n# Create a new figure\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Plot the data\nax.imshow(data, cmap='viridis', interpolation='nearest')\n\n# Set labels\nax.set_xlabel('X Label')\nax.set_ylabel('Y Label')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/violin_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ndata = np.random.rand(10, 6)\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(8.0, 4.0))\n\n# Plot the data\nplt.plot(data[:, 0], label='GPT-4V(Vis)')\nplt.plot(data[:, 1], label='Gemini')\n\n# Set labels and title\nplt.xlabel('Length Distribution')\nplt.ylabel('Score')\nplt.title('Scoring Evaluation')\n\n# Add a legend\nplt.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/violin_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ndata = {\n    'jTrans': [0.7, 0.8],\n    'PalmTree': [0.6, 0.7],\n    'CLAP': [0.5, 0.6]\n}\n\n# Create a new figure\nfig, ax = plt.subplots(figsize=(5.0, 5.0))\n\n# Plot the data\nfor key, values in data.items():\n    ax.plot(values, label=key)\n\n# Set labels and title\nax.set_xlabel('Samples')\nax.set_ylabel('Accuracy')\nax.set_title('Model Accuracy Comparison')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/violin_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ndata = np.random.rand(4, 10)\nlabels = ['A2', 'B1', 'B2', 'C1', 'C2']\n\n# Create a new figure\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Plot the data\nfor i in range(len(data)):\n    ax.plot(data[i], label=labels[i])\n\n# Set labels and title\nax.set_xlabel('X-axis')\nax.set_ylabel('Y-axis')\nax.set_title('Sample Plot')\n\n# Add stars at specific points\nstars = [1, 3, 5, 7]\nfor star in stars:\n    ax.plot(star, data[star-1][star-1], 'y*')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/violin_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ndata = {\n    'Vanilla': [75],\n    'CoT': [85]\n}\n\n# Create a new figure\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Plot the data\nax.bar(['Vanilla', 'CoT'], data['Vanilla'] + data['CoT'], color=['pink', 'blue'])\n\n# Set labels and title\nax.set_xlabel('Model')\nax.set_ylabel('Accuracy')\nax.set_title('Model Accuracy Comparison')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/violin_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt  \nimport numpy as np  \n\n# Sample data\ndata = np.array([\n    [163, 201, 97, 95, 176, 159, 109, 153, 97],\n    [163, 201, 97, 95, 176, 159, 109, 153, 97],\n    [163, 201, 97, 95, 176, 159, 109, 153, 97],\n    [163, 201, 97, 95, 176, 159, 109, 153, 97],\n    [163, 201, 97, 95, 176, 159, 109, 153, 97],\n    [163, 201, 97, 95, 176, 159, 109, 153, 97],\n    [163, 201, 97, 95, 176, 159, 109, 153, 97],\n    [163, 201, 97, 95, 176, 159, 109, 153, 97],\n    [163, 201, 97, 95, 176, 159, 109, 153, 97],\n    [163, 201, 97, 95, 176, 159, 109, 153, 97]\n])\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(8.0, 8.0))\n\n# Plot the data\nplt.imshow(data, cmap='viridis', interpolation='nearest')\n\n# Set labels and title\nplt.xlabel('Number of Features')\nplt.ylabel('Group l0')\nplt.title('% Decrease in Test MSE vs. FLAM-GL')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/violin_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ndata = {\n    'Raw': [0.18, 3.33, 3.33, 0.19, 10.67, 0.18],\n    '25Hz': [0.19, 3.33, 3.33, 0.19, 16.95, 0.16],\n    '50Hz': [0.79, 0.79, 0.79, 0.79, 0.79, 0.67],\n    '100Hz': [0.85, 0.85, 0.85, 0.85, 0.85, 0.67]\n}\n\n# Create a new figure\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot the data\nfor key, values in data.items():\n    ax.scatter(values, np.random.rand(len(values)), label=key)\n\n# Set labels and title\nax.set_xlabel('Decimated Sampling Rate')\nax.set_ylabel('KCC')\nax.set_title('KCC vs Decimated Sampling Rate')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/violin_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\nboys = np.random.randint(50, 100, size=100)\ngirls = np.random.randint(50, 100, size=100)\n\n# Create a new figure with specified size\nfig = plt.figure(figsize=(12.0, 8.0))\n\n# Plot the first subplot\nplt.subplot(2, 2, 1)\nplt.hist([boys, girls], bins=10, color=['blue', 'green'], alpha=0.7)\nplt.title('Distribution of Grades: Class 1')\nplt.xlabel('Grades')\nplt.ylabel('Frequency')\n\n# Plot the second subplot\nplt.subplot(2, 2, 2)\nplt.hist([boys, girls], bins=10, color=['blue', 'green'], alpha=0.7)\nplt.title('Distribution of Grades: Class 2')\nplt.xlabel('Grades')\nplt.ylabel('Frequency')\n\n# Plot the third subplot\nplt.subplot(2, 2, 3)\nplt.hist([boys, girls], bins=10, color=['blue', 'green'], alpha=0.7)\nplt.title('Distribution of Grades: Class 3')\nplt.xlabel('Grades')\nplt.ylabel('Frequency')\n\n# Plot the fourth subplot\nplt.subplot(2, 2, 4)\nplt.hist([boys, girls], bins=10, color=['blue', 'green'], alpha=0.7)\nplt.title('Distribution of Grades: Class 4')\nplt.xlabel('Grades')\nplt.ylabel('Frequency')\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n```"}
