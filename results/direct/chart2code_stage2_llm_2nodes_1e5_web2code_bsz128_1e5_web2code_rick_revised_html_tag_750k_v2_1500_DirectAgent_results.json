{"file": "dataset/ori_500/3d_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfig = plt.figure(figsize=(7.0, 7.0))\nax = fig.add_subplot(111, projection='3d')\n\nx = np.arange(0, 10, 1)\ny = np.arange(0, 10, 1)\nx, y = np.meshgrid(x, y)\n\nz = np.sin(np.sqrt(x**2 + y**2))\n\nax.plot_surface(x, y, z, color='blue')\nax.scatter([5], [5], [0.8], color='orange')\nax.scatter([5], [5], [0.6], color='orange')\nax.scatter([5], [5], [0.4], color='orange')\nax.scatter([5], [5], [0.2], color='orange')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Define the data\nheights = [0.5, 1.0, 1.5, 2.0, 2.5, 3.0, 3.5]\ncounts = [4, 3, 2, 1, 0.5, 0.25, 0.1]\n\n# Plot the data\nax.bar(heights, counts, color='red')\n\n# Set the title and labels\nax.set_title('Height vs Count')\nax.set_xlabel('Height')\nax.set_ylabel('Count')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig = plt.figure(figsize=(8.0, 6.0))\nax = fig.add_subplot(111, projection='3d')\n\n# Define the data for the sphere\nu = np.linspace(0, 2 * np.pi, 100)\nv = np.linspace(0, np.pi, 100)\nx = 5 * np.outer(np.cos(u), np.sin(v))\ny = 5 * np.outer(np.sin(u), np.sin(v))\nz = 5 * np.outer(np.ones(np.size(u)), np.cos(v))\n\n# Plot the sphere\nax.plot_surface(x, y, z, color='magenta')\n\n# Set the limits for the axes\nax.set_xlim(-5, 5)\nax.set_ylim(-5, 5)\nax.set_zlim(-5, 5)\n\n# Set the labels for the axes\nax.set_xlabel('X')\nax.set_ylabel('Y')\nax.set_zlabel('Z')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig = plt.figure(figsize=(8.0, 6.0))\nax = fig.add_subplot(111, projection='3d')\n\n# Define the data points\nx = [-4, -2, 0, 2, 4]\ny = [0, 0, 0, 0, 0]\nz = [0, 0, 0, 0, 0]\n\n# Plot the data points\nax.scatter(x, y, z, c='r', marker='o')\n\n# Define the line of best fit\nx_line = np.linspace(-4, 4, 100)\ny_line = np.linspace(0, 0, 100)\nz_line = np.linspace(0, 20, 100)\n\n# Plot the line of best fit\nax.plot(x_line, y_line, z_line, c='b', linestyle='-')\n\n# Set the labels\nax.set_xlabel('Temperature (\u00b0C)')\nax.set_ylabel('Pressure (kPa)')\nax.set_zlabel('Volume (L)')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nyears = [2010, 2012, 2014, 2016, 2018]\nprivate_schools = [0.3, 0.5, 0.7, 0.9, 0.8]\npublic_schools = [0.4, 0.6, 0.8, 0.9, 0.7]\n\n# Create a 3D plot\nfig = plt.figure(figsize=(8.0, 6.0))\nax = fig.add_subplot(111, projection='3d')\n\n# Plot the data\nax.bar(years, private_schools, zs=0, zdir='y', color='b', alpha=0.8)\nax.bar(years, public_schools, zs=1, zdir='y', color='r', alpha=0.8)\n\n# Set labels and title\nax.set_xlabel('Year')\nax.set_ylabel('Type')\nax.set_zlabel('Student to Teacher Ratio')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Define the data for the plot\nx = np.linspace(0, 10, 100)\ny = np.sin(x)\n\n# Plot the data\nax.plot(x, y, color='blue')\n\n# Set the title and labels\nax.set_title('Sine Wave')\nax.set_xlabel('Time (s)')\nax.set_ylabel('Amplitude')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data for the first graph\nyears = [2010, 2012, 2014, 2016, 2018]\nsectors = ['AI', 'CS', 'Tech', 'Health', 'Finance']\nvalues = [3, 5, 7, 9, 11]\n\n# Data for the second graph\ntime_since_introduction = np.linspace(0, 10, 100)\nadoption_rate = np.sin(time_since_introduction)\n\n# Create a figure and a set of subplots\nfig, axs = plt.subplots(1, 2, figsize=(10.0, 8.0))\n\n# Plot the first graph\naxs[0].barh(sectors, values, color='green')\naxs[0].set_xlabel('Investment (Billion USD)')\naxs[0].set_title('Investment by Sector')\n\n# Plot the second graph\naxs[1].plot(time_since_introduction, adoption_rate, color='blue')\naxs[1].set_xlabel('Time Since Introduction (Years)')\naxs[1].set_ylabel('Adoption Rate')\naxs[1].set_title('Adoption Rate Over Time')\n\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the function f(x)\ndef f(x):\n    return x**2 - 2*x + 1\n\n# Create a grid of x values\nx = np.linspace(-1, 1, 100)\n\n# Calculate the y values for each x value\ny = f(x)\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(10, 7))\n\n# Plot the function\nax.plot(x, y, 'b-')\n\n# Set the title and labels\nax.set_title('f(x)')\nax.set_xlabel('x')\nax.set_ylabel('f(x)')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig = plt.figure(figsize=(10.0, 6.0))\nax = fig.add_subplot(111, projection='3d')\n\n# Define the data for the plot\nx = np.linspace(1, 6, 10)\ny = np.linspace(1, 6, 10)\nx, y = np.meshgrid(x, y)\nz = np.sin(np.sqrt(x**2 + y**2))\n\n# Plot the data\nsurf = ax.plot_surface(x, y, z, cmap='viridis')\n\n# Set the title and labels\nax.set_title('CIFAR10 Spiking ResNet18 T=6')\nax.set_xlabel('tau')\nax.set_ylabel('t')\nax.set_zlabel('accuracy (%)')\n\n# Add a color bar which maps values to colors\nfig.colorbar(surf, shrink=0.5, aspect=5)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(15, 10))\n\n# Define the data for the plot\nx = np.linspace(-100, 100, 100)\ny = np.linspace(-100, 100, 100)\nX, Y = np.meshgrid(x, y)\nZ = np.sin(np.sqrt(X**2 + Y**2))\n\n# Plot the data\nax.plot_surface(X, Y, Z, cmap='viridis')\n\n# Set the labels\nax.set_xlabel('m')\nax.set_ylabel('n')\nax.set_zlabel('Freedom')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(7, 7))\n\n# Set the background color of the plot\nax.set_facecolor('lightgray')\n\n# Set the limits of the x and y axes\nax.set_xlim(0, 1)\nax.set_ylim(0, 1)\n\n# Draw a rectangle representing the cube\nrect = plt.Rectangle((0.2, 0.2), 0.6, 0.6, fill=False, edgecolor='black')\nax.add_patch(rect)\n\n# Draw a line graph representing the first line\nline1 = np.array([[0.3, 0.4], [0.5, 0.6]])\nax.plot(line1[:, 0], line1[:, 1], 'o-', color='orange')\n\n# Draw a line graph representing the second line\nline2 = np.array([[0.4, 0.5], [0.6, 0.7]])\nax.plot(line2[:, 0], line2[:, 1], 'o-', color='orange')\n\n# Draw a line graph representing the third line\nline3 = np.array([[0.5, 0.6], [0.7, 0.8]])\nax.plot(line3[:, 0], line3[:, 1], 'o-', color='orange')\n\n# Draw a line graph representing the fourth line\nline4 = np.array([[0.6, 0.7], [0.8, 0.9]])\nax.plot(line4[:, 0], line4[:, 1], 'o-', color='orange')\n\n# Draw a line graph representing the fifth line\nline5 = np.array([[0.7, 0.8], [0.9, 1.0]])\nax.plot(line5[:, 0], line5[:, 1], 'o-', color='orange')\n\n# Draw a line graph representing the sixth line\nline6 = np.array([[0.8, 0.9], [1.0, 1.1]])\nax.plot(line6[:, 0], line6[:, 1], 'o-', color='orange')\n\n# Draw a line graph representing the seventh line\nline7 = np.array([[0.9, 1.0], [1.1, 1.2]])\nax.plot(line7[:, 0], line7[:, 1], 'o-', color='orange')\n\n# Draw a line graph representing the eighth line\nline8 = np.array([[1.0, 1.1], [1.2, 1.3]])\nax.plot(line8[:, 0], line8[:, 1], 'o-', color='orange')\n\n# Draw a line graph representing the ninth line\nline9 = np.array([[1.1, 1.2], [1.3, 1.4]])\nax.plot(line9[:, 0], line9[:, 1], 'o-', color='orange')\n\n# Draw a line graph representing the tenth line\nline10 = np.array([[1.2, 1.3], [1.4, 1.5]])\nax.plot(line10[:, 0], line10[:, 1], 'o-', color='orange')\n\n# Draw a line graph representing the eleventh line\nline11 = np.array([[1.3, 1.4], [1.5, 1.6]])\nax.plot(line11[:, 0], line11[:, 1], 'o-', color='orange')\n\n# Draw a line graph representing the twelfth line\nline12 = np.array([[1.4, 1.5], [1.6, 1.7]])\nax.plot(line12[:, 0], line12[:, 1], 'o-', color='orange')\n\n# Draw a line graph representing the thirteenth line\nline13 = np.array([[1.5, 1.6], [1.7, 1.8]])\nax.plot(line13[:, 0], line13[:, 1], 'o-', color='orange')\n\n# Draw a line graph representing the fourteenth line\nline14 = np.array([[1.6, 1.7], [1.8, 1.9]])\nax.plot(line14[:, 0], line14[:, 1], 'o-', color='orange')\n\n# Draw a line graph representing the fifteenth line\nline15 = np.array([[1.7, 1.8], [1.9, 2.0]])\nax.plot(line15[:, 0], line15[:, 1], 'o-', color='orange')\n\n# Draw a line graph representing the sixteenth line\nline16 = np.array([[1.8, 1.9], [2.0, 2.1]])\nax.plot(line16[:, 0], line16[:, 1], 'o-', color='orange')\n\n# Draw a line graph representing the seventeenth line\nline17 = np.array([[1.9, 2.0], [2.1, 2.2]])\nax.plot(line17[:, 0], line17[:, 1], 'o-', color='orange')\n\n# Draw a line graph representing the eighteenth line\nline18 = np.array([[2.0, 2.1], [2.2, 2.3]])\nax.plot(line18[:, 0], line18[:, 1], 'o-', color='orange')\n\n# Draw a line graph representing the nineteenth line\nline19 = np.array([[2.1, 2.2], [2.3, 2.4]])\nax.plot(line19[:, 0], line19[:, 1], 'o-', color='orange')\n\n# Draw a line graph representing the twentieth line\nline20 = np.array([[2.2, 2.3], [2.4, 2.5]])\nax.plot(line20[:, 0], line20[:, 1], 'o-', color='orange')\n\n# Draw a line graph representing the twenty-first line\nline21 = np.array([[2.3, 2.4], [2.5, 2.6]])\nax.plot(line21[:, 0], line21[:, 1], 'o-', color='orange')\n\n# Draw a line graph representing the twenty-second line\nline22 = np.array([[2.4, 2.5], [2.6, 2.7]])\nax.plot(line22[:, 0], line22[:, 1], 'o-', color='orange')\n\n# Draw a line graph representing the twenty-third line\nline23 = np.array([[2.5, 2.6], [2.7, 2.8]])\nax.plot(line23[:, 0], line23[:, 1], 'o-', color='orange')\n\n# Draw a line graph representing the twenty-fourth line\nline24 = np.array([[2.6, 2.7], [2.8, 2.9]])\nax.plot(line24[:, 0], line24[:, 1], 'o-', color='orange')\n\n# Draw a line graph representing the twenty-fifth line\nline25 = np.array([[2.7, 2.8], [2.9, 3.0]])\nax.plot(line25[:, 0], line25[:, 1], 'o-', color='orange')\n\n# Draw a line graph representing the twenty-sixth line\nline26 = np.array([[2.8, 2.9], [3.0, 3.1]])\nax.plot(line26[:, 0], line26[:, 1], 'o-', color='orange')\n\n# Draw a line graph representing the twenty-seventh line\nline27 = np.array([[2.9, 3.0], [3.1, 3.2]])\nax.plot(line27[:, 0], line27[:, 1], 'o-', color='orange')\n\n# Draw a line graph representing the twenty-eighth line\nline28 = np.array([[3.0, 3.1], [3.2, 3.3]])\nax.plot(line28[:, 0], line28[:, 1], 'o-', color='orange')\n\n# Draw a line graph representing the twenty-ninth line\nline29 = np.array([[3.1, 3.2], [3.3, 3.4]])\nax.plot(line29[:, 0], line29[:, 1], 'o-', color='orange')\n\n# Draw a line graph representing the thirtieth line\nline30 = np.array([[3.2, 3.3], [3.4, 3.5]])\nax.plot(line30[:, 0], line30[:, 1], 'o-', color='orange')\n\n# Draw a line graph representing the thirty-first line\nline31 = np.array([[3.3, 3.4], [3.5, 3.6]])\nax.plot(line31[:, 0], line31[:, 1], 'o-', color='orange')\n\n# Draw a line graph representing the thirty-second line\nline32 = np.array([[3.4, 3.5], [3.6, 3.7]])\nax.plot(line32[:, 0], line32[:, 1], 'o-', color='orange')\n\n# Draw a line graph representing the thirty-third line\nline33 = np.array([[3.5, 3.6], [3.7, 3.8]])\nax.plot(line33[:, 0], line33[:, 1], 'o-', color='orange')\n\n# Draw a line graph representing the thirty-fourth line\nline34 = np.array([[3.6, 3.7], [3.8, 3.9]])\nax.plot(line34[:, 0], line34[:, 1], 'o-', color='orange')\n\n# Draw a line graph representing the thirty-fifth line\nline35 = np.array([[3.7, 3.8], [3.9, 4.0]])\nax.plot(line35[:, 0], line35[:, 1], 'o-', color='orange')\n\n# Draw a line graph representing the thirty-sixth line\nline36 = np.array([[3.8, 3.9], [4.0, 4.1]])\nax.plot(line36[:, 0], line36[:, 1], 'o-', color='orange')\n\n# Draw a line graph representing the thirty-seventh line\nline37 = np.array([[3.9, 4.0], [4.1, 4.2]])\nax.plot(line37[:, 0], line37[:, 1], 'o-', color='orange')\n\n# Draw a line graph representing the thirty-eighth line\nline38 = np.array([[4.0, 4.1], [4.2, 4.3]])\nax.plot(line38[:, 0], line38[:, 1], 'o-', color='orange')\n\n# Draw a line graph representing the thirty-ninth line\nline39 = np.array([[4.1, 4.2], [4.3, 4.4]])\nax.plot(line39[:, 0], line39[:, 1], 'o-', color='orange')\n\n# Draw a line graph representing the fortieth line\nline40 = np.array([[4.2, 4.3], [4.4, 4.5]])\nax.plot(line40[:, 0], line40[:, 1], 'o-', color='orange')\n\n# Draw a line graph representing the forty-first line\nline41 = np.array([[4.3, 4.4], [4.5, 4.6]])\nax.plot(line41[:, 0], line41[:, 1], 'o-', color='orange')\n\n# Draw a line graph representing the forty-second line\nline42 = np.array([[4.4, 4.5], [4.6, 4.7]])\nax.plot(line42[:, 0], line42[:, 1], 'o-', color='orange')\n\n# Draw a line graph representing the forty-third line\nline43 = np.array([[4.5, 4.6], [4.7, 4.8]])\nax.plot(line43[:, 0], line43[:, 1], 'o-', color='orange')\n\n# Draw a line graph representing the forty-fourth line\nline44 = np.array([[4.6, 4.7], [4.8, 4.9]])\nax.plot(line44[:, 0], line44[:, 1], 'o-', color='orange')\n\n# Draw a line graph representing the forty-fifth line\nline45 = np.array([[4.7, 4.8], [4.9, 5.0]])\nax.plot(line45[:, 0], line45[:, 1], 'o-', color='orange')\n\n# Draw a line graph representing the forty-sixth line\nline46 = np.array([[4.8, 4.9], [5.0, 5.1]])\nax.plot(line46[:, 0], line46[:, 1], 'o-', color='orange')\n\n# Draw a line graph representing the forty-seventh line\nline47 = np.array([[4.9, 5.0], [5.1, 5.2]])\nax.plot(line47[:, 0], line47[:, 1], 'o-', color='orange')\n\n# Draw a line graph representing the forty-eighth line\nline48 = np.array([[5.0, 5.1], [5.2, 5.3]])\nax.plot(line48[:, 0], line48[:, 1], 'o-', color='orange')\n\n# Draw a line graph representing the forty-ninth line\nline49 = np.array([[5.1, 5.2], [5.3, 5.4]])\nax.plot(line49[:, 0], line49[:, 1], 'o-', color='orange')\n\n# Draw a line graph representing the fiftieth line\nline50 = np.array([[5.2, 5.3], [5.4, 5.5]])\nax.plot(line50[:, 0], line50[:, 1], 'o-', color='orange')\n\n# Draw a line graph representing the fifty-first line\nline51 = np.array([[5.3, 5.4], [5.5, 5.6]])\nax.plot(line51[:, 0], line51[:, 1], 'o-', color='orange')\n\n# Draw a line graph representing the fifty-second line\nline52 = np.array([[5.4, 5.5], [5.6, 5.7]])\nax.plot(line52[:, 0], line52[:, 1], 'o-', color='orange')\n\n# Draw a line graph representing the fifty-third line\nline53 = np.array([[5.5, 5.6], [5.7, 5.8]])\nax.plot(line53[:, 0], line53[:, 1], 'o-', color='orange')\n\n# Draw a line graph representing the fifty-fourth line\nline54 = np.array([[5.6, 5.7], [5.8, 5.9]])\nax.plot(line54[:, 0], line54[:, 1], 'o-', color='orange')\n\n# Draw a line graph representing the fifty-fifth line\nline55 = np.array([[5.7, 5.8], [5.9, 6.0]])\nax.plot(line55[:, 0], line55[:, 1], 'o-', color='orange')\n\n# Draw a line graph representing the fifty-sixth line\nline56 = np.array([[5.8, 5.9], [6.0, 6.1]])\nax.plot(line56[:, 0], line56[:, 1], 'o-', color='orange')\n\n# Draw a line graph representing the fifty-seventh line\nline57 = np.array([[5.9, 6.0], [6.1, 6.2]])\nax.plot(line57[:, 0], line57[:, 1], 'o-', color='orange')\n\n# Draw a line graph representing the fifty-eighth line\nline58 = np.array([[6.0, 6.1], [6.2, 6.3]])\nax.plot(line58[:, 0], line58[:, 1], 'o-', color='orange')\n\n# Draw a line graph representing the fifty-ninth line\nline59 = np.array([[6.1, 6.2], [6.3, 6.4]])\nax.plot(line59[:, 0], line59[:, 1], 'o-', color='orange')\n\n# Draw a line graph representing the sixtieth line\nline60 = np.array([[6.2, 6.3], [6.4, 6.5]])\nax.plot(line60[:, 0], line60[:, 1], 'o-', color='orange')\n\n# Draw a line graph representing the sixty-first line\nline61 = np.array([[6.3, 6.4], [6.5, 6.6]])\nax.plot(line61[:, 0], line61[:, 1], 'o-', color='orange')\n\n# Draw a line graph representing the sixty-second line\nline62 = np.array([[6.4, 6.5], [6.6, 6.7]])\nax.plot(line62[:, 0], line62[:, 1], 'o-', color='orange')\n\n# Draw a line graph representing the sixty-third line\nline63 = np.array([[6.5, 6.6], [6.7, 6.8]])\nax.plot(line63[:, 0], line63[:, 1], 'o-', color='orange')\n\n# Draw a line graph representing the sixty-fourth line\nline64 = np.array([[6.6, 6.7], [6.8, 6.9]])\nax.plot(line64[:, 0], line64[:, 1], 'o-', color='orange')\n\n# Draw a line graph representing the sixty-fifth line\nline65 = np.array([[6.7, 6.8], [6.9, 7.0]])\nax.plot(line65[:, 0], line65[:, 1], 'o-', color='orange')\n\n# Draw a line graph representing the sixty-sixth line\nline66 = np.array([[6.8, 6.9], [7.0, 7.1]])\nax.plot(line66[:, 0], line66[:, 1], 'o-', color='orange')\n\n# Draw a line graph representing the sixty-seventh line\nline67 ="}
{"file": "dataset/ori_500/3d_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig = plt.figure(figsize=(8.0, 8.0))\nax = fig.add_subplot(111, projection='3d')\n\n# Define the grid\nx = np.linspace(-4, 4, 100)\ny = np.linspace(-2, 2, 100)\nx, y = np.meshgrid(x, y)\nz = np.sin(np.sqrt(x**2 + y**2))\n\n# Plot the surface\nsurf = ax.plot_surface(x, y, z, cmap='coolwarm')\n\n# Set the colorbar\ncbar = fig.colorbar(surf, shrink=0.5, aspect=5)\n\n# Set the labels\nax.set_xlabel('Bus')\nax.set_ylabel('Time')\nax.set_zlabel('Value')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Define the data for the bar chart\nx = np.arange(1, 5)\ny = [3, 4, 2, 1]\nwidth = 0.35\n\n# Create a bar chart\nrects = ax.bar(x, y, width, label='Scores')\n\n# Add some text for labels, title, and custom x-axis tick labels, etc.\nax.set_xlabel('Player')\nax.set_ylabel('Score')\nax.set_title('Player Scores')\nax.set_xticks(x)\nax.set_xticklabels(['Player 1', 'Player 2', 'Player 3', 'Player 4'])\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig = plt.figure(figsize=(8.0, 6.0))\nax = fig.add_subplot(111, projection='3d')\n\n# Define the data points\nx = [10, 20, 30, 40, 50]\ny = [10, 20, 30, 40, 50]\nz = [10, 20, 30, 40, 50]\n\n# Plot the data points\nax.scatter(x, y, z, c='r', marker='o')\n\n# Set the labels\nax.set_xlabel('Age')\nax.set_ylabel('Income')\nax.set_zlabel('Debt')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/3d_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig = plt.figure(figsize=(8.0, 6.0))\nax = fig.add_subplot(111, projection='3d')\n\n# Define the data\nx = np.linspace(0, 50, 100)\ny = np.linspace(0, 50, 100)\nx, y = np.meshgrid(x, y)\nz = np.sin(np.sqrt(x**2 + y**2))\n\n# Plot the surface\nsurf = ax.plot_surface(x, y, z, cmap='viridis')\n\n# Set the labels\nax.set_xlabel('Temperature (\u00b0C)')\nax.set_ylabel('Time (s)')\nax.set_zlabel('Depth (m)')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 8))\n\n# Set the background color of the plot\nax.set_facecolor('lightblue')\n\n# Set the x-axis limits\nax.set_xlim(-20, 20)\n\n# Set the y-axis limits\nax.set_ylim(0, 12)\n\n# Set the x-axis label\nax.set_xlabel('LR Test')\n\n# Set the y-axis label\nax.set_ylabel('Density')\n\n# Set the title of the plot\nax.set_title('Histograms of LR Test')\n\n# Create a rectangle for the vertical line\nrectangle = plt.Rectangle((-10, 0), 20, 12, fc='none', ec='black')\nax.add_patch(rectangle)\n\n# Create a rectangle for the horizontal line\nrectangle = plt.Rectangle((0, 0), 20, 12, fc='none', ec='black')\nax.add_patch(rectangle)\n\n# Create a rectangle for the vertical line\nrectangle = plt.Rectangle((-5, 0), 10, 12, fc='none', ec='black')\nax.add_patch(rectangle)\n\n# Create a rectangle for the horizontal line\nrectangle = plt.Rectangle((0, 0), 20, 12, fc='none', ec='black')\nax.add_patch(rectangle)\n\n# Create a rectangle for the vertical line\nrectangle = plt.Rectangle((0, 0), 20, 12, fc='none', ec='black')\nax.add_patch(rectangle)\n\n# Create a rectangle for the horizontal line\nrectangle = plt.Rectangle((0, 0), 20, 12, fc='none', ec='black')\nax.add_patch(rectangle)\n\n# Create a rectangle for the vertical line\nrectangle = plt.Rectangle((0, 0), 20, 12, fc='none', ec='black')\nax.add_patch(rectangle)\n\n# Create a rectangle for the horizontal line\nrectangle = plt.Rectangle((0, 0), 20, 12, fc='none', ec='black')\nax.add_patch(rectangle)\n\n# Create a rectangle for the vertical line\nrectangle = plt.Rectangle((0, 0), 20, 12, fc='none', ec='black')\nax.add_patch(rectangle)\n\n# Create a rectangle for the horizontal line\nrectangle = plt.Rectangle((0, 0), 20, 12, fc='none', ec='black')\nax.add_patch(rectangle)\n\n# Create a rectangle for the vertical line\nrectangle = plt.Rectangle((0, 0), 20, 12, fc='none', ec='black')\nax.add_patch(rectangle)\n\n# Create a rectangle for the horizontal line\nrectangle = plt.Rectangle((0, 0), 20, 12, fc='none', ec='black')\nax.add_patch(rectangle)\n\n# Create a rectangle for the vertical line\nrectangle = plt.Rectangle((0, 0), 20, 12, fc='none', ec='black')\nax.add_patch(rectangle)\n\n# Create a rectangle for the horizontal line\nrectangle = plt.Rectangle((0, 0), 20, 12, fc='none', ec='black')\nax.add_patch(rectangle)\n\n# Create a rectangle for the vertical line\nrectangle = plt.Rectangle((0, 0), 20, 12, fc='none', ec='black')\nax.add_patch(rectangle)\n\n# Create a rectangle for the horizontal line\nrectangle = plt.Rectangle((0, 0), 20, 12, fc='none', ec='black')\nax.add_patch(rectangle)\n\n# Create a rectangle for the vertical line\nrectangle = plt.Rectangle((0, 0), 20, 12, fc='none', ec='black')\nax.add_patch(rectangle)\n\n# Create a rectangle for the horizontal line\nrectangle = plt.Rectangle((0, 0), 20, 12, fc='none', ec='black')\nax.add_patch(rectangle)\n\n# Create a rectangle for the vertical line\nrectangle = plt.Rectangle((0, 0), 20, 12, fc='none', ec='black')\nax.add_patch(rectangle)\n\n# Create a rectangle for the horizontal line\nrectangle = plt.Rectangle((0, 0), 20, 12, fc='none', ec='black')\nax.add_patch(rectangle)\n\n# Create a rectangle for the vertical line\nrectangle = plt.Rectangle((0, 0), 20, 12, fc='none', ec='black')\nax.add_patch(rectangle)\n\n# Create a rectangle for the horizontal line\nrectangle = plt.Rectangle((0, 0), 20, 12, fc='none', ec='black')\nax.add_patch(rectangle)\n\n# Create a rectangle for the vertical line\nrectangle = plt.Rectangle((0, 0), 20, 12, fc='none', ec='black')\nax.add_patch(rectangle)\n\n# Create a rectangle for the horizontal line\nrectangle = plt.Rectangle((0, 0), 20, 12, fc='none', ec='black')\nax.add_patch(rectangle)\n\n# Create a rectangle for the vertical line\nrectangle = plt.Rectangle((0, 0), 20, 12, fc='none', ec='black')\nax.add_patch(rectangle)\n\n# Create a rectangle for the horizontal line\nrectangle = plt.Rectangle((0, 0), 20, 12, fc='none', ec='black')\nax.add_patch(rectangle)\n\n# Create a rectangle for the vertical line\nrectangle = plt.Rectangle((0, 0), 20, 12, fc='none', ec='black')\nax.add_patch(rectangle)\n\n# Create a rectangle for the horizontal line\nrectangle = plt.Rectangle((0, 0), 20, 12, fc='none', ec='black')\nax.add_patch(rectangle)\n\n# Create a rectangle for the vertical line\nrectangle = plt.Rectangle((0, 0), 20, 12, fc='none', ec='black')\nax.add_patch(rectangle)\n\n# Create a rectangle for the horizontal line\nrectangle = plt.Rectangle((0, 0), 20, 12, fc='none', ec='black')\nax.add_patch(rectangle)\n\n# Create a rectangle for the vertical line\nrectangle = plt.Rectangle((0, 0), 20, 12, fc='none', ec='black')\nax.add_patch(rectangle)\n\n# Create a rectangle for the horizontal line\nrectangle = plt.Rectangle((0, 0), 20, 12, fc='none', ec='black')\nax.add_patch(rectangle)\n\n# Create a rectangle for the vertical line\nrectangle = plt.Rectangle((0, 0), 20, 12, fc='none', ec='black')\nax.add_patch(rectangle)\n\n# Create a rectangle for the horizontal line\nrectangle = plt.Rectangle((0, 0), 20, 12, fc='none', ec='black')\nax.add_patch(rectangle)\n\n# Create a rectangle for the vertical line\nrectangle = plt.Rectangle((0, 0), 20, 12, fc='none', ec='black')\nax.add_patch(rectangle)\n\n# Create a rectangle for the horizontal line\nrectangle = plt.Rectangle((0, 0), 20, 12, fc='none', ec='black')\nax.add_patch(rectangle)\n\n# Create a rectangle for the vertical line\nrectangle = plt.Rectangle((0, 0), 20, 12, fc='none', ec='black')\nax.add_patch(rectangle)\n\n# Create a rectangle for the horizontal line\nrectangle = plt.Rectangle((0, 0), 20, 12, fc='none', ec='black')\nax.add_patch(rectangle)\n\n# Create a rectangle for the vertical line\nrectangle = plt.Rectangle((0, 0), 20, 12, fc='none', ec='black')\nax.add_patch(rectangle)\n\n# Create a rectangle for the horizontal line\nrectangle = plt.Rectangle((0, 0), 20, 12, fc='none', ec='black')\nax.add_patch(rectangle)\n\n# Create a rectangle for the vertical line\nrectangle = plt.Rectangle((0, 0), 20, 12, fc='none', ec='black')\nax.add_patch(rectangle)\n\n# Create a rectangle for the horizontal line\nrectangle = plt.Rectangle((0, 0), 20, 12, fc='none', ec='black')\nax.add_patch(rectangle)\n\n# Create a rectangle for the vertical line\nrectangle = plt.Rectangle((0, 0), 20, 12, fc='none', ec='black')\nax.add_patch(rectangle)\n\n# Create a rectangle for the horizontal line\nrectangle = plt.Rectangle((0, 0), 20, 12, fc='none', ec='black')\nax.add_patch(rectangle)\n\n# Create a rectangle for the vertical line\nrectangle = plt.Rectangle((0, 0), 20, 12, fc='none', ec='black')\nax.add_patch(rectangle)\n\n# Create a rectangle for the horizontal line\nrectangle = plt.Rectangle((0, 0), 20, 12, fc='none', ec='black')\nax.add_patch(rectangle)\n\n# Create a rectangle for the vertical line\nrectangle = plt.Rectangle((0, 0), 20, 12, fc='none', ec='black')\nax.add_patch(rectangle)\n\n# Create a rectangle for the horizontal line\nrectangle = plt.Rectangle((0, 0), 20, 12, fc='none', ec='black')\nax.add_patch(rectangle)\n\n# Create a rectangle for the vertical line\nrectangle = plt.Rectangle((0, 0), 20, 12, fc='none', ec='black')\nax.add_patch(rectangle)\n\n# Create a rectangle for the horizontal line\nrectangle = plt.Rectangle((0, 0), 20, 12, fc='none', ec='black')\nax.add_patch(rectangle)\n\n# Create a rectangle for the vertical line\nrectangle = plt.Rectangle((0, 0), 20, 12, fc='none', ec='black')\nax.add_patch(rectangle)\n\n# Create a rectangle for the horizontal line\nrectangle = plt.Rectangle((0, 0), 20, 12, fc='none', ec='black')\nax.add_patch(rectangle)\n\n# Create a rectangle for the vertical line\nrectangle = plt.Rectangle((0, 0), 20, 12, fc='none', ec='black')\nax.add_patch(rectangle)\n\n# Create a rectangle for the horizontal line\nrectangle = plt.Rectangle((0, 0), 20, 12, fc='none', ec='black')\nax.add_patch(rectangle)\n\n# Create a rectangle for the vertical line\nrectangle = plt.Rectangle((0, 0), 20, 12, fc='none', ec='black')\nax.add_patch(rectangle)\n\n# Create a rectangle for the horizontal line\nrectangle = plt.Rectangle((0, 0), 20, 12, fc='none', ec='black')\nax.add_patch(rectangle)\n\n# Create a rectangle for the vertical line\nrectangle = plt.Rectangle((0, 0), 20, 12, fc='none', ec='black')\nax.add_patch(rectangle)\n\n# Create a rectangle for the horizontal line\nrectangle = plt.Rectangle((0, 0), 20, 12, fc='none', ec='black')\nax.add_patch(rectangle)\n\n# Create a rectangle for the vertical line\nrectangle = plt.Rectangle((0, 0), 20, 12, fc='none', ec='black')\nax.add_patch(rectangle)\n\n# Create a rectangle for the horizontal line\nrectangle = plt.Rectangle((0, 0), 20, 12, fc='none', ec='black')\nax.add_patch(rectangle)\n\n# Create a rectangle for the vertical line\nrectangle = plt.Rectangle((0, 0), 20, 12, fc='none', ec='black')\nax.add_patch(rectangle)\n\n# Create a rectangle for the horizontal line\nrectangle = plt.Rectangle((0, 0), 20, 12, fc='none', ec='black')\nax.add_patch(rectangle)\n\n# Create a rectangle for the vertical line\nrectangle = plt.Rectangle((0, 0), 20, 12, fc='none', ec='black')\nax.add_patch(rectangle)\n\n# Create a rectangle for the horizontal line\nrectangle = plt.Rectangle((0, 0), 20, 12, fc='none', ec='black')\nax.add_patch(rectangle)\n\n# Create a rectangle for the vertical line\nrectangle = plt.Rectangle((0, 0), 20, 12, fc='none', ec='black')\nax.add_patch(rectangle)\n\n# Create a rectangle for the horizontal line\nrectangle = plt.Rectangle((0, 0), 20, 12, fc='none', ec='black')\nax.add_patch(rectangle)\n\n# Create a rectangle for the vertical line\nrectangle = plt.Rectangle((0, 0), 20, 12, fc='none', ec='black')\nax.add_patch(rectangle)\n\n# Create a rectangle for the horizontal line\nrectangle = plt.Rectangle((0, 0), 20, 12, fc='none', ec='black')\nax.add_patch(rectangle)\n\n# Create a rectangle for the vertical line\nrectangle = plt.Rectangle((0, 0), 20, 12, fc='none', ec='black')\nax.add_patch(rectangle)\n\n# Create a rectangle for the horizontal line\nrectangle = plt.Rectangle((0, 0), 20, 12, fc='none', ec='black')\nax.add_patch(rectangle)\n\n# Create a rectangle for the vertical line\nrectangle = plt.Rectangle((0, 0), 20, 12, fc='none', ec='black')\nax.add_patch(rectangle)\n\n# Create a rectangle for the horizontal line\nrectangle = plt.Rectangle((0, 0), 20, 12, fc='none', ec='black')\nax.add_patch(rectangle)\n\n# Create a rectangle for the vertical line\nrectangle = plt.Rectangle((0, 0), 20, 12, fc='none', ec='black')\nax.add_patch(rectangle)\n\n# Create a rectangle for the horizontal line\nrectangle = plt.Rectangle((0, 0), 20, 12, fc='none', ec='black')\nax.add_patch(rectangle)\n\n# Create a rectangle for the vertical line\nrectangle = plt.Rectangle((0, 0), 20, 12, fc='none', ec='black')\nax.add_patch(rectangle)\n\n# Create a rectangle for the horizontal line\nrectangle = plt.Rectangle((0, 0), 20, 12, fc='none', ec='black')\nax.add_patch(rectangle)\n\n# Create a rectangle for the vertical line\nrectangle = plt.Rectangle((0, 0), 20, 12, fc='none', ec='black')\nax.add_patch(rectangle)\n\n# Create a rectangle for the horizontal line\nrectangle = plt.Rectangle((0, 0), 20, 12, fc='none', ec='black')\nax.add_patch(rectangle)\n\n# Create a rectangle for the vertical line\nrectangle = plt.Rectangle((0, 0), 20, 12, fc='none', ec='black')\nax.add_patch(rectangle)\n\n# Create a rectangle for the horizontal line\nrectangle = plt.Rectangle((0, 0), 20, 12, fc='none', ec='black')\nax.add_patch(rectangle)\n\n# Create a rectangle for the vertical line\nrectangle = plt.Rectangle((0, 0), 20, 12, fc='none', ec='black')\nax.add_patch(rectangle)\n\n# Create a rectangle for the horizontal line\nrectangle = plt.Rectangle((0, 0), 20, 12, fc='none', ec='black')\nax.add_patch(rectangle)\n\n# Create a rectangle for the vertical line\nrectangle = plt.Rectangle((0, 0), 20, 12, fc='none', ec='black')\nax.add_patch(rectangle)\n\n# Create a rectangle for the horizontal line\nrectangle = plt.Rectangle((0, 0), 20, 12, fc='none', ec='black')\nax.add_patch(rectangle)\n\n# Create a rectangle for the vertical line\nrectangle = plt.Rectangle((0, 0), 20, 12, fc='none', ec='black')\nax.add_patch(rectangle)\n\n# Create a rectangle for the horizontal line\nrectangle = plt.Rectangle((0, 0), 20, 12, fc='none', ec='black')\nax.add_patch(rectangle)\n\n# Create a rectangle for the vertical line\nrectangle = plt.Rectangle((0, 0), 20, 12, fc='none', ec='black')\nax.add_patch(rectangle)\n\n# Create a rectangle for the horizontal line\nrectangle = plt.Rectangle((0, 0), 20, 12, fc='none', ec='black')\nax.add_patch(rectangle)\n\n# Create a rectangle for the vertical line\nrectangle = plt.Rectangle((0, 0), 20, 12, fc='none', ec='black')\nax.add_patch(rectangle)\n\n# Create a rectangle for the horizontal line\nrectangle = plt.Rectangle((0, 0), 20, 12, fc='none', ec='black')\nax.add_patch(rectangle)\n\n# Create a rectangle for the vertical line\nrectangle = plt.Rectangle((0, 0), 20, 12, fc='none', ec='black')\nax.add_patch(rectangle)\n\n# Create a rectangle for the horizontal line\nrectangle = plt.Rectangle((0, 0), 20, 12, fc='none', ec='black')\nax.add_patch(rectangle)\n\n# Create a rectangle for the vertical line\nrectangle = plt.Rectangle((0, 0), 20, 12, fc='none', ec='black')\nax.add_patch(rectangle)\n\n# Create a rectangle for the horizontal line\nrectangle = plt.Rectangle((0, 0), 20, 12, fc='none', ec='black')\nax.add_patch(rectangle)\n\n# Create a rectangle for the vertical line\nrectangle = plt.Rectangle((0, 0), 20, 12, fc='none', ec='black')\nax.add_patch(rectangle)\n\n# Create a rectangle for the horizontal line\nrectangle = plt.Rectangle((0, 0), 20, 12, fc='none', ec='black')\nax.add_patch(rectangle)\n\n# Create a rectangle for the vertical line\nrectangle = plt.Rectangle((0, 0), 20, 12,"}
{"file": "dataset/ori_500/CB_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(7, 5))\n\n# Set the background color of the plot\nax.set_facecolor('lightgray')\n\n# Create a rectangle for the severity bar\nseverity_bar = plt.Rectangle((0.1, 0.1), 0.8, 0.2, color='orange', alpha=0.5)\nax.add_patch(severity_bar)\n\n# Create a rectangle for the correlation bar\ncorrelation_bar = plt.Rectangle((0.1, 0.35), 0.8, 0.2, color='gray', alpha=0.5)\nax.add_patch(correlation_bar)\n\n# Create a line for the severity bar\nseverity_line = plt.Line2D([0.1, 0.9], [0.1, 0.1], color='black')\nax.add_line(severity_line)\n\n# Create a line for the correlation bar\ncorrelation_line = plt.Line2D([0.1, 0.9], [0.35, 0.35], color='black')\nax.add_line(correlation_line)\n\n# Create a scatter plot for the severity bar\nseverity_scatter = plt.scatter(np.random.rand(10)*0.8+0.1, np.random.rand(10)*0.2+0.1, color='blue')\nax.add_collection(severity_scatter)\n\n# Create a scatter plot for the correlation bar\ncorrelation_scatter = plt.scatter(np.random.rand(10)*0.8+0.1, np.random.rand(10)*0.2+0.35, color='green')\nax.add_collection(correlation_scatter)\n\n# Set the x-axis limits\nax.set_xlim(150, 400)\n\n# Set the y-axis limits\nax.set_ylim(-6, 0)\n\n# Set the x-axis label\nax.set_xlabel('Average Tracked ORB Feature Number')\n\n# Set the y-axis label\nax.set_ylabel('Log (ATE RMSE)')\n\n# Set the title\nax.set_title('Severity and Correlation')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(7, 5))\n\n# Define the data\nx = np.linspace(-3, 0.5, 100)\ny = np.log(x**2 + 1)\n\n# Plot the data\nax.plot(x, y, color='blue')\n\n# Add a rectangle for the shaded area\nax.add_patch(plt.Rectangle((0, -1), 0.5, 2, color='lightgray'))\n\n# Add a line for the correlation\nax.axhline(y=-0.47, color='black', linestyle='-')\n\n# Set the labels\nax.set_xlabel('Log (Depth L1)')\nax.set_ylabel('Log (ATE RMSE)')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the background color of the plot\nax.set_facecolor('lightblue')\n\n# Set the title of the plot\nax.set_title('T-test p-value = 0.0000')\n\n# Set the x-axis label\nax.set_xlabel('Avg Top-5 Persistence of 1D')\n\n# Set the y-axis label\nax.set_ylabel('Density')\n\n# Set the x-axis limits\nax.set_xlim(0, 1)\n\n# Set the y-axis limits\nax.set_ylim(0, 5)\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.2, 0.4), 0.3, 0.2, color='green'))\n\n# Draw a circle\ncircle = plt.Circle((0.5, 0.5), 0.1, color='red')\nax.add_artist(circle)\n\n# Draw a line\nline = plt.Line2D([0.1, 0.9], [0.1, 0.9], color='black')\nax.add_line(line)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 4))\n\n# Set the title of the plot\nax.set_title('Comparison of APO & APO-APEs (GPT-3 5-Turbo)')\n\n# Set the x-axis label\nax.set_xlabel('Tasks')\n\n# Set the y-axis label\nax.set_ylabel('Scores')\n\n# Define the tasks\ntasks = ['snarks', 'navigate', 'question_selection', 'object_counting']\n\n# Define the scores\nscores = [7.2, 7.8, 7.6, 7.9]\n\n# Define the colors for each task\ncolors = ['blue', 'green', 'red', 'purple']\n\n# Plot the scores\nfor i, task in enumerate(tasks):\n    ax.bar(task, scores[i], color=colors[i])\n\n# Add a horizontal line at the mean score\nmean_score = sum(scores) / len(scores)\nax.axhline(mean_score, color='black', linestyle='--')\n\n# Add a vertical line at the median score\nmedian_score = sorted(scores)[len(scores) // 2]\nax.axvline(median_score, color='red', linestyle='--')\n\n# Add a scatter plot at the mode score\nmode_score = max(set(scores), key=scores.count)\nax.scatter(mode_score, mode_score, color='green')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Set the background color of the plot\nax.set_facecolor('lightpink')\n\n# Set the title of the plot\nax.set_title('summarization_xsum:temperature=0.3,device=cuda')\n\n# Set the x-axis label\nax.set_xlabel('norm size')\n\n# Set the y-axis label\nax.set_ylabel('count')\n\n# Set the x-axis limits\nax.set_xlim(0, 1.4)\n\n# Set the y-axis limits\nax.set_ylim(0, 120)\n\n# Set the x-axis ticks\nax.set_xticks([0, 0.2, 0.4, 0.6, 0.8, 1.0, 1.2, 1.4])\n\n# Set the y-axis ticks\nax.set_yticks([0, 20, 40, 60, 80, 100, 120])\n\n# Set the x-axis tick labels\nax.set_xticklabels(['0.0', '0.2', '0.4', '0.6', '0.8', '1.0', '1.2', '1.4'])\n\n# Set the y-axis tick labels\nax.set_yticklabels(['0', '20', '40', '60', '80', '100', '120'])\n\n# Set the x-axis grid lines\nax.grid(axis='x')\n\n# Set the y-axis grid lines\nax.grid(axis='y')\n\n# Set the x-axis line color\nax.spines['bottom'].set_color('blue')\n\n# Set the y-axis line color\nax.spines['left'].set_color('blue')\n\n# Set the x-axis line width\nax.spines['bottom'].set_linewidth(2)\n\n# Set the y-axis line width\nax.spines['left'].set_linewidth(2)\n\n# Set the x-axis line style\nax.spines['bottom'].set_linestyle('-')\n\n# Set the y-axis line style\nax.spines['left'].set_linestyle('-')\n\n# Set the x-axis line position\nax.spines['bottom'].set_position('zero')\n\n# Set the y-axis line position\nax.spines['left'].set_position('zero')\n\n# Set the x-axis line visibility\nax.spines['top'].set_visible(False)\n\n# Set the y-axis line visibility\nax.spines['right'].set_visible(False)\n\n# Set the x-axis tick color\nax.tick_params(axis='x', colors='blue')\n\n# Set the y-axis tick color\nax.tick_params(axis='y', colors='blue')\n\n# Set the x-axis tick label rotation\nax.tick_params(axis='x', rotation=45)\n\n# Set the y-axis tick label rotation\nax.tick_params(axis='y', rotation=45)\n\n# Set the x-axis tick label font size\nax.tick_params(axis='x', labelsize=12)\n\n# Set the y-axis tick label font size\nax.tick_params(axis='y', labelsize=12)\n\n# Set the x-axis tick label font weight\nax.tick_params(axis='x', labelweight='bold')\n\n# Set the y-axis tick label font weight\nax.tick_params(axis='y', labelweight='bold')\n\n# Set the x-axis tick label font style\nax.tick_params(axis='x', labelstyle='italic')\n\n# Set the y-axis tick label font style\nax.tick_params(axis='y', labelstyle='italic')\n\n# Set the x-axis tick label font family\nax.tick_params(axis='x', labelfamily='serif')\n\n# Set the y-axis tick label font family\nax.tick_params(axis='y', labelfamily='sans-serif')\n\n# Set the x-axis tick label font variant\nax.tick_params(axis='x', labelvariant='small-caps')\n\n# Set the y-axis tick label font variant\nax.tick_params(axis='y', labelvariant='normal')\n\n# Set the x-axis tick label font stretch\nax.tick_params(axis='x', labelstretch='ultra-condensed')\n\n# Set the y-axis tick label font stretch\nax.tick_params(axis='y', labelstretch='condensed')\n\n# Set the x-axis tick label font size\nax.tick_params(axis='x', labelsize=12)\n\n# Set the y-axis tick label font size\nax.tick_params(axis='y', labelsize=12)\n\n# Set the x-axis tick label font weight\nax.tick_params(axis='x', labelweight='bold')\n\n# Set the y-axis tick label font weight\nax.tick_params(axis='y', labelweight='bold')\n\n# Set the x-axis tick label font style\nax.tick_params(axis='x', labelstyle='italic')\n\n# Set the y-axis tick label font style\nax.tick_params(axis='y', labelstyle='italic')\n\n# Set the x-axis tick label font family\nax.tick_params(axis='x', labelfamily='serif')\n\n# Set the y-axis tick label font family\nax.tick_params(axis='y', labelfamily='sans-serif')\n\n# Set the x-axis tick label font variant\nax.tick_params(axis='x', labelvariant='small-caps')\n\n# Set the y-axis tick label font variant\nax.tick_params(axis='y', labelvariant='normal')\n\n# Set the x-axis tick label font stretch\nax.tick_params(axis='x', labelstretch='ultra-condensed')\n\n# Set the y-axis tick label font stretch\nax.tick_params(axis='y', labelstretch='condensed')\n\n# Set the x-axis tick label font size\nax.tick_params(axis='x', labelsize=12)\n\n# Set the y-axis tick label font size\nax.tick_params(axis='y', labelsize=12)\n\n# Set the x-axis tick label font weight\nax.tick_params(axis='x', labelweight='bold')\n\n# Set the y-axis tick label font weight\nax.tick_params(axis='y', labelweight='bold')\n\n# Set the x-axis tick label font style\nax.tick_params(axis='x', labelstyle='italic')\n\n# Set the y-axis tick label font style\nax.tick_params(axis='y', labelstyle='italic')\n\n# Set the x-axis tick label font family\nax.tick_params(axis='x', labelfamily='serif')\n\n# Set the y-axis tick label font family\nax.tick_params(axis='y', labelfamily='sans-serif')\n\n# Set the x-axis tick label font variant\nax.tick_params(axis='x', labelvariant='small-caps')\n\n# Set the y-axis tick label font variant\nax.tick_params(axis='y', labelvariant='normal')\n\n# Set the x-axis tick label font stretch\nax.tick_params(axis='x', labelstretch='ultra-condensed')\n\n# Set the y-axis tick label font stretch\nax.tick_params(axis='y', labelstretch='condensed')\n\n# Set the x-axis tick label font size\nax.tick_params(axis='x', labelsize=12)\n\n# Set the y-axis tick label font size\nax.tick_params(axis='y', labelsize=12)\n\n# Set the x-axis tick label font weight\nax.tick_params(axis='x', labelweight='bold')\n\n# Set the y-axis tick label font weight\nax.tick_params(axis='y', labelweight='bold')\n\n# Set the x-axis tick label font style\nax.tick_params(axis='x', labelstyle='italic')\n\n# Set the y-axis tick label font style\nax.tick_params(axis='y', labelstyle='italic')\n\n# Set the x-axis tick label font family\nax.tick_params(axis='x', labelfamily='serif')\n\n# Set the y-axis tick label font family\nax.tick_params(axis='y', labelfamily='sans-serif')\n\n# Set the x-axis tick label font variant\nax.tick_params(axis='x', labelvariant='small-caps')\n\n# Set the y-axis tick label font variant\nax.tick_params(axis='y', labelvariant='normal')\n\n# Set the x-axis tick label font stretch\nax.tick_params(axis='x', labelstretch='ultra-condensed')\n\n# Set the y-axis tick label font stretch\nax.tick_params(axis='y', labelstretch='condensed')\n\n# Set the x-axis tick label font size\nax.tick_params(axis='x', labelsize=12)\n\n# Set the y-axis tick label font size\nax.tick_params(axis='y', labelsize=12)\n\n# Set the x-axis tick label font weight\nax.tick_params(axis='x', labelweight='bold')\n\n# Set the y-axis tick label font weight\nax.tick_params(axis='y', labelweight='bold')\n\n# Set the x-axis tick label font style\nax.tick_params(axis='x', labelstyle='italic')\n\n# Set the y-axis tick label font style\nax.tick_params(axis='y', labelstyle='italic')\n\n# Set the x-axis tick label font family\nax.tick_params(axis='x', labelfamily='serif')\n\n# Set the y-axis tick label font family\nax.tick_params(axis='y', labelfamily='sans-serif')\n\n# Set the x-axis tick label font variant\nax.tick_params(axis='x', labelvariant='small-caps')\n\n# Set the y-axis tick label font variant\nax.tick_params(axis='y', labelvariant='normal')\n\n# Set the x-axis tick label font stretch\nax.tick_params(axis='x', labelstretch='ultra-condensed')\n\n# Set the y-axis tick label font stretch\nax.tick_params(axis='y', labelstretch='condensed')\n\n# Set the x-axis tick label font size\nax.tick_params(axis='x', labelsize=12)\n\n# Set the y-axis tick label font size\nax.tick_params(axis='y', labelsize=12)\n\n# Set the x-axis tick label font weight\nax.tick_params(axis='x', labelweight='bold')\n\n# Set the y-axis tick label font weight\nax.tick_params(axis='y', labelweight='bold')\n\n# Set the x-axis tick label font style\nax.tick_params(axis='x', labelstyle='italic')\n\n# Set the y-axis tick label font style\nax.tick_params(axis='y', labelstyle='italic')\n\n# Set the x-axis tick label font family\nax.tick_params(axis='x', labelfamily='serif')\n\n# Set the y-axis tick label font family\nax.tick_params(axis='y', labelfamily='sans-serif')\n\n# Set the x-axis tick label font variant\nax.tick_params(axis='x', labelvariant='small-caps')\n\n# Set the y-axis tick label font variant\nax.tick_params(axis='y', labelvariant='normal')\n\n# Set the x-axis tick label font stretch\nax.tick_params(axis='x', labelstretch='ultra-condensed')\n\n# Set the y-axis tick label font stretch\nax.tick_params(axis='y', labelstretch='condensed')\n\n# Set the x-axis tick label font size\nax.tick_params(axis='x', labelsize=12)\n\n# Set the y-axis tick label font size\nax.tick_params(axis='y', labelsize=12)\n\n# Set the x-axis tick label font weight\nax.tick_params(axis='x', labelweight='bold')\n\n# Set the y-axis tick label font weight\nax.tick_params(axis='y', labelweight='bold')\n\n# Set the x-axis tick label font style\nax.tick_params(axis='x', labelstyle='italic')\n\n# Set the y-axis tick label font style\nax.tick_params(axis='y', labelstyle='italic')\n\n# Set the x-axis tick label font family\nax.tick_params(axis='x', labelfamily='serif')\n\n# Set the y-axis tick label font family\nax.tick_params(axis='y', labelfamily='sans-serif')\n\n# Set the x-axis tick label font variant\nax.tick_params(axis='x', labelvariant='small-caps')\n\n# Set the y-axis tick label font variant\nax.tick_params(axis='y', labelvariant='normal')\n\n# Set the x-axis tick label font stretch\nax.tick_params(axis='x', labelstretch='ultra-condensed')\n\n# Set the y-axis tick label font stretch\nax.tick_params(axis='y', labelstretch='condensed')\n\n# Set the x-axis tick label font size\nax.tick_params(axis='x', labelsize=12)\n\n# Set the y-axis tick label font size\nax.tick_params(axis='y', labelsize=12)\n\n# Set the x-axis tick label font weight\nax.tick_params(axis='x', labelweight='bold')\n\n# Set the y-axis tick label font weight\nax.tick_params(axis='y', labelweight='bold')\n\n# Set the x-axis tick label font style\nax.tick_params(axis='x', labelstyle='italic')\n\n# Set the y-axis tick label font style\nax.tick_params(axis='y', labelstyle='italic')\n\n# Set the x-axis tick label font family\nax.tick_params(axis='x', labelfamily='serif')\n\n# Set the y-axis tick label font family\nax.tick_params(axis='y', labelfamily='sans-serif')\n\n# Set the x-axis tick label font variant\nax.tick_params(axis='x', labelvariant='small-caps')\n\n# Set the y-axis tick label font variant\nax.tick_params(axis='y', labelvariant='normal')\n\n# Set the x-axis tick label font stretch\nax.tick_params(axis='x', labelstretch='ultra-condensed')\n\n# Set the y-axis tick label font stretch\nax.tick_params(axis='y', labelstretch='condensed')\n\n# Set the x-axis tick label font size\nax.tick_params(axis='x', labelsize=12)\n\n# Set the y-axis tick label font size\nax.tick_params(axis='y', labelsize=12)\n\n# Set the x-axis tick label font weight\nax.tick_params(axis='x', labelweight='bold')\n\n# Set the y-axis tick label font weight\nax.tick_params(axis='y', labelweight='bold')\n\n# Set the x-axis tick label font style\nax.tick_params(axis='x', labelstyle='italic')\n\n# Set the y-axis tick label font style\nax.tick_params(axis='y', labelstyle='italic')\n\n# Set the x-axis tick label font family\nax.tick_params(axis='x', labelfamily='serif')\n\n# Set the y-axis tick label font family\nax.tick_params(axis='y', labelfamily='sans-serif')\n\n# Set the x-axis tick label font variant\nax.tick_params(axis='x', labelvariant='small-caps')\n\n# Set the y-axis tick label font variant\nax.tick_params(axis='y', labelvariant='normal')\n\n# Set the x-axis tick label font stretch\nax.tick_params(axis='x', labelstretch='ultra-condensed')\n\n# Set the y-axis tick label font stretch\nax.tick_params(axis='y', labelstretch='condensed')\n\n# Set the x-axis tick label font size\nax.tick_params(axis='x', labelsize=12)\n\n# Set the y-axis tick label font size\nax.tick_params(axis='y', labelsize=12)\n\n# Set the x-axis tick label font weight\nax.tick_params(axis='x', labelweight='bold')\n\n# Set the y-axis tick label font weight\nax.tick_params(axis='y', labelweight='bold')\n\n# Set the x-axis tick label font style\nax.tick_params(axis='x', labelstyle='italic')\n\n# Set the y-axis tick label font style\nax.tick_params(axis='y', labelstyle='italic')\n\n# Set the x-axis tick label font family\nax.tick_params(axis='x', labelfamily='serif')\n\n# Set the y-axis tick label font family\nax.tick_params(axis='y', labelfamily='sans-serif')\n\n# Set the x-axis tick label font variant\nax.tick_params(axis='x', labelvariant='small-caps')\n\n# Set the y-axis tick label font variant\nax.tick_params(axis='y', labelvariant='normal')\n\n# Set the x-axis tick label font stretch\nax.tick_params(axis='x', labelstretch='ultra-condensed')\n\n# Set the y-axis tick label font stretch\nax.tick_params(axis='y', labelstretch='condensed')\n\n# Set the x-axis tick label font size\nax.tick_params(axis='x', labelsize=12)\n\n# Set the y-axis tick label font size\nax.tick_params(axis='y', labelsize=12)\n\n# Set the x-axis tick label font weight\nax.tick_params(axis='x', labelweight='bold')\n\n# Set the y-axis tick label font weight\nax.tick_params(axis='y', labelweight='bold')\n\n# Set the x-axis tick label font style\nax.tick_params(axis='x', labelstyle='italic')\n\n# Set the y-axis tick label font style\nax.tick_params(axis='y', labelstyle='italic')\n\n# Set the x-axis tick label font family\nax.tick_params(axis='x', labelfamily='serif')\n\n# Set the y-axis tick label font family\nax.tick_params(axis='y', labelfamily='sans-serif')\n\n# Set the x-axis tick label font variant\nax.tick_params(axis='x', labelvariant='small-caps')\n\n# Set the y-axis tick label font variant\nax.tick_params(axis='y', labelvariant='normal')\n\n# Set the x-axis tick label font stretch\nax.tick_params(axis='x', labelstretch='ultra-condensed')\n\n# Set the y-axis tick label font stretch\nax.tick_params(axis='y', labelstretch='condensed')\n\n# Set the x-axis tick label font size\nax.tick_params(axis='x', labelsize=12)\n\n# Set the y-axis tick label font size\nax.tick_params(axis='y', labelsize=12)\n\n# Set the x-axis tick label font weight\nax.tick_params(axis='x', labelweight='bold')\n\n# Set the y-axis tick label font weight\nax.tick_params(axis='y', labelweight='bold')\n\n# Set the x-axis tick label font style\nax.tick_params(axis='x', labelstyle='italic')\n\n# Set the y-axis tick label font style\nax.tick_params(axis='y', labelstyle='italic')\n\n# Set the x-axis tick label font family\nax.tick_params(axis='x', labelfamily='serif')\n\n# Set the y-axis tick label font family\nax.tick_params(axis='y', labelfamily='sans-serif')\n\n# Set the x-axis tick label font variant\nax.tick_params(axis='x', labelvariant='small-caps')\n\n# Set the y-axis tick label font variant\nax.tick_params(axis='y', labelvariant='normal')\n\n# Set the x-axis tick label font stretch\nax.tick_params(axis='x', labelstretch='ultra-condensed')\n\n# Set the y-axis tick label font stretch\nax.tick_params(axis='y', labelstretch='condensed')\n\n# Set the x-axis tick label font size\nax.tick_params(axis='x', labelsize=12)\n\n# Set the y-axis tick label font size\nax.tick_params(axis='y', labelsize=12)\n\n# Set the x-axis tick label font weight\nax.tick_params(axis='x', labelweight='bold')\n\n# Set the y-axis tick label font weight\nax.tick_params(axis='y', labelweight='bold')\n\n# Set the x-axis tick label font style\nax.tick_params(axis='x', labelstyle='italic')\n\n# Set the y-axis tick label font style\nax.tick_params(axis='y', labelstyle='italic')\n\n# Set the x-axis tick label font family\nax.tick_params(axis='x', labelfamily='serif')\n\n# Set the y-axis tick label font family\nax.tick_params(axis='y', labelfamily='sans-serif')\n\n# Set the x-axis tick label font"}
{"file": "dataset/ori_500/CB_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the pie chart\nlabels = ['Same', 'Different', 'Incomparable']\nsizes = [32, 4, 99]\ncolors = ['blue', 'orange', 'green']\n\n# Create a pie chart\nfig, ax = plt.subplots(figsize=(8.0, 4.0))\nax.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%', startangle=140)\n\n# Set the title of the pie chart\nax.set_title('Pie Chart')\n\n# Display the pie chart\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_16.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(7, 5))\n\n# Set the title of the plot\nax.set_title('Time Cost (Seconds)')\n\n# Set the x-axis label\nax.set_xlabel('Algorithms')\n\n# Set the y-axis label\nax.set_ylabel('Time Cost (Seconds)')\n\n# Create a scatter plot\nax.scatter([1, 2, 3], [49, 50, 51])\n\n# Create a bar chart\nax.bar([1, 2, 3], [48, 49, 50])\n\n# Create a rectangle\nax.add_patch(plt.Rectangle((1, 46), 2, 2, color='green'))\n\n# Create a circle\ncircle = plt.Circle((1, 47), 0.5, color='blue')\nax.add_artist(circle)\n\n# Create a rectangle with a border\nax.add_patch(plt.Rectangle((2, 46), 2, 2, color='red', edgecolor='black'))\n\n# Create a circle with a border\ncircle = plt.Circle((2, 47), 0.5, color='orange', edgecolor='black')\nax.add_artist(circle)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_17.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the first graph\nx = [2008, 2010, 2012, 2014, 2016]\ny = [63.64, 80.08, 84.27, 90.11, 95.00]\n\n# Data for the second graph\nx1 = [2008, 2010, 2012, 2014, 2016]\ny1 = [75.00, 87.20, 88.00, 90.12, 93.89]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 4))\n\n# Plot the first graph\nax.plot(x, y, 'b-')\nax.set_title('Average Recall Scores by Method')\nax.set_xlabel('Year')\nax.set_ylabel('Scores')\n\n# Plot the second graph\nax2 = ax.twinx()\nax2.plot(x1, y1, 'r-')\nax2.set_ylabel('Scores')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_18.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Set the background color of the plot\nax.set_facecolor('lightblue')\n\n# Create a rectangle for the logo\nlogo = plt.Rectangle((0.05, 0.85), 0.1, 0.1, facecolor='red')\nax.add_patch(logo)\n\n# Create a rectangle for the text\ntext_box = plt.Rectangle((0.2, 0.85), 0.7, 0.1, facecolor='white', alpha=0.5)\nax.add_patch(text_box)\n\n# Add text to the plot\nax.text(0.25, 0.9, 'Micro F1', fontsize=12, fontweight='bold')\nax.text(0.25, 0.85, 'Trained w Few-Shot Ex', fontsize=10)\nax.text(0.35, 0.85, 'Def Deduce+Ex Gen', fontsize=10)\n\n# Create a line graph\nx = [4, 8, 12, 16, 20, 24, 28, 32]\ny = [84, 86, 88, 90, 92, 94, 96, 98]\nax.plot(x, y, 'b-')\n\n# Create a shaded rectangle\nax.fill_between(x, 90, 94, where=[True]*len(x), color='skyblue', alpha=0.5)\n\n# Set the x-axis label\nax.set_xlabel('Few-Shot K')\n\n# Set the y-axis label\nax.set_ylabel('Micro F1')\n\n# Set the title\nax.set_title('Micro F1 vs Few-Shot K')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_19.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data points\nx = [60, 62, 65, 70, 75]\ny = [60, 62, 65, 70, 75]\n\n# Plotting\nplt.plot(x, y, 'ro-')\nplt.xlabel('Vehicle Parameter Size (units)')\nplt.ylabel('Efficiency (%)')\nplt.title('Car Efficiency vs Vehicle Parameter Size')\n\n# Legend\nlegend_elements = [plt.Line2D([0], [0], marker='o', color='w', label='Cars', markerfacecolor='r', markersize=10),\n                  plt.Line2D([0], [0], marker='o', color='w', label='Trucks', markerfacecolor='b', markersize=10)]\nplt.legend(handles=legend_elements)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nmodels = ['GPT-2', 'Llama 2 7B', 'Llama 2 70B', 'Mixtral 8x7B', 'GPT-3.5', 'GPT-4']\nsuccess_rates = [16, 12, 12, 20, 26, 56]\ntrend = [0, 0, 0, 0, 0, 0]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Plot the success rates\nax.bar(models, success_rates, color='lightpink')\n\n# Add a trend line\nax.plot(models, trend, color='purple', linestyle='--')\n\n# Set the title and labels\nax.set_title('Encoding/Decoding Schelling Points by Model')\nax.set_xlabel('Model')\nax.set_ylabel('Success Rate (%)')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_20.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Calibration Curve')\n\n# Set the x-axis label\nax.set_xlabel('Redicted Probability')\n\n# Set the y-axis label\nax.set_ylabel('Fraction of Positives')\n\n# Set the x-axis limits\nax.set_xlim(0, 1)\n\n# Set the y-axis limits\nax.set_ylim(0, 1)\n\n# Draw a line graph\nax.plot([0, 1], [0, 1], 'k-')\n\n# Draw a horizontal line\nax.axhline(y=0.5, color='r', linestyle='-')\n\n# Draw a vertical line\nax.axvline(x=0.5, color='r', linestyle='-')\n\n# Draw a rectangle\nrect = plt.Rectangle((0.2, 0.2), 0.3, 0.3, color='pink')\nax.add_patch(rect)\n\n# Draw a circle\ncircle = plt.Circle((0.5, 0.5), 0.1, color='orange')\nax.add_artist(circle)\n\n# Draw a scatter plot\nax.scatter([0.1, 0.2, 0.3, 0.4, 0.5], [0.1, 0.2, 0.3, 0.4, 0.5], color='orange')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_21.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8, 4))\n\n# Set the background color of the plot\nax.set_facecolor('lightblue')\n\n# Draw a rectangle for the model\nmodel_rect = plt.Rectangle((-5, -1), 10, 2, color='blue')\nax.add_patch(model_rect)\n\n# Draw a rectangle for the FOD-Net\nfodnet_rect = plt.Rectangle((-3, -1), 6, 2, color='orange')\nax.add_patch(fodnet_rect)\n\n# Draw a rectangle for the SS3T\nss3t_rect = plt.Rectangle((-1, -1), 4, 2, color='green')\nax.add_patch(ss3t_rect)\n\n# Draw a rectangle for the ACC\nacc_rect = plt.Rectangle((-3, -3), 6, 2, color='brown')\nax.add_patch(acc_rect)\n\n# Draw a rectangle for the model's performance\nmodel_performance_rect = plt.Rectangle((-4, -4), 8, 2, color='blue')\nax.add_patch(model_performance_rect)\n\n# Draw a rectangle for the FOD-Net's performance\nfodnet_performance_rect = plt.Rectangle((-2, -4), 4, 2, color='orange')\nax.add_patch(fodnet_performance_rect)\n\n# Draw a rectangle for the SS3T's performance\nss3t_performance_rect = plt.Rectangle((0, -4), 4, 2, color='green')\nax.add_patch(ss3t_performance_rect)\n\n# Draw a rectangle for the ACC's performance\nacc_performance_rect = plt.Rectangle((-2, -6), 4, 2, color='brown')\nax.add_patch(acc_performance_rect)\n\n# Draw a rectangle for the model's architecture\nmodel_architecture_rect = plt.Rectangle((-4, -7), 8, 2, color='blue')\nax.add_patch(model_architecture_rect)\n\n# Draw a rectangle for the FOD-Net's architecture\nfodnet_architecture_rect = plt.Rectangle((-2, -7), 4, 2, color='orange')\nax.add_patch(fodnet_architecture_rect)\n\n# Draw a rectangle for the SS3T's architecture\nss3t_architecture_rect = plt.Rectangle((0, -7), 4, 2, color='green')\nax.add_patch(ss3t_architecture_rect)\n\n# Draw a rectangle for the ACC's architecture\nacc_architecture_rect = plt.Rectangle((-2, -9), 4, 2, color='brown')\nax.add_patch(acc_architecture_rect)\n\n# Draw a rectangle for the model's training data\nmodel_training_data_rect = plt.Rectangle((-4, -10), 8, 2, color='blue')\nax.add_patch(model_training_data_rect)\n\n# Draw a rectangle for the FOD-Net's training data\nfodnet_training_data_rect = plt.Rectangle((-2, -10), 4, 2, color='orange')\nax.add_patch(fodnet_training_data_rect)\n\n# Draw a rectangle for the SS3T's training data\nss3t_training_data_rect = plt.Rectangle((0, -10), 4, 2, color='green')\nax.add_patch(ss3t_training_data_rect)\n\n# Draw a rectangle for the ACC's training data\nacc_training_data_rect = plt.Rectangle((-2, -12), 4, 2, color='brown')\nax.add_patch(acc_training_data_rect)\n\n# Draw a rectangle for the model's validation data\nmodel_validation_data_rect = plt.Rectangle((-4, -13), 8, 2, color='blue')\nax.add_patch(model_validation_data_rect)\n\n# Draw a rectangle for the FOD-Net's validation data\nfodnet_validation_data_rect = plt.Rectangle((-2, -13), 4, 2, color='orange')\nax.add_patch(fodnet_validation_data_rect)\n\n# Draw a rectangle for the SS3T's validation data\nss3t_validation_data_rect = plt.Rectangle((0, -13), 4, 2, color='green')\nax.add_patch(ss3t_validation_data_rect)\n\n# Draw a rectangle for the ACC's validation data\nacc_validation_data_rect = plt.Rectangle((-2, -15), 4, 2, color='brown')\nax.add_patch(acc_validation_data_rect)\n\n# Draw a rectangle for the model's test data\nmodel_test_data_rect = plt.Rectangle((-4, -16), 8, 2, color='blue')\nax.add_patch(model_test_data_rect)\n\n# Draw a rectangle for the FOD-Net's test data\nfodnet_test_data_rect = plt.Rectangle((-2, -16), 4, 2, color='orange')\nax.add_patch(fodnet_test_data_rect)\n\n# Draw a rectangle for the SS3T's test data\nss3t_test_data_rect = plt.Rectangle((0, -16), 4, 2, color='green')\nax.add_patch(ss3t_test_data_rect)\n\n# Draw a rectangle for the ACC's test data\nacc_test_data_rect = plt.Rectangle((-2, -18), 4, 2, color='brown')\nax.add_patch(acc_test_data_rect)\n\n# Draw a rectangle for the model's predictions\nmodel_predictions_rect = plt.Rectangle((-4, -19), 8, 2, color='blue')\nax.add_patch(model_predictions_rect)\n\n# Draw a rectangle for the FOD-Net's predictions\nfodnet_predictions_rect = plt.Rectangle((-2, -19), 4, 2, color='orange')\nax.add_patch(fodnet_predictions_rect)\n\n# Draw a rectangle for the SS3T's predictions\nss3t_predictions_rect = plt.Rectangle((0, -19), 4, 2, color='green')\nax.add_patch(ss3t_predictions_rect)\n\n# Draw a rectangle for the ACC's predictions\nacc_predictions_rect = plt.Rectangle((-2, -21), 4, 2, color='brown')\nax.add_patch(acc_predictions_rect)\n\n# Draw a rectangle for the model's evaluation metrics\nmodel_evaluation_metrics_rect = plt.Rectangle((-4, -22), 8, 2, color='blue')\nax.add_patch(model_evaluation_metrics_rect)\n\n# Draw a rectangle for the FOD-Net's evaluation metrics\nfodnet_evaluation_metrics_rect = plt.Rectangle((-2, -22), 4, 2, color='orange')\nax.add_patch(fodnet_evaluation_metrics_rect)\n\n# Draw a rectangle for the SS3T's evaluation metrics\nss3t_evaluation_metrics_rect = plt.Rectangle((0, -22), 4, 2, color='green')\nax.add_patch(ss3t_evaluation_metrics_rect)\n\n# Draw a rectangle for the ACC's evaluation metrics\nacc_evaluation_metrics_rect = plt.Rectangle((-2, -24), 4, 2, color='brown')\nax.add_patch(acc_evaluation_metrics_rect)\n\n# Draw a rectangle for the model's hyperparameters\nmodel_hyperparameters_rect = plt.Rectangle((-4, -25), 8, 2, color='blue')\nax.add_patch(model_hyperparameters_rect)\n\n# Draw a rectangle for the FOD-Net's hyperparameters\nfodnet_hyperparameters_rect = plt.Rectangle((-2, -25), 4, 2, color='orange')\nax.add_patch(fodnet_hyperparameters_rect)\n\n# Draw a rectangle for the SS3T's hyperparameters\nss3t_hyperparameters_rect = plt.Rectangle((0, -25), 4, 2, color='green')\nax.add_patch(ss3t_hyperparameters_rect)\n\n# Draw a rectangle for the ACC's hyperparameters\nacc_hyperparameters_rect = plt.Rectangle((-2, -27), 4, 2, color='brown')\nax.add_patch(acc_hyperparameters_rect)\n\n# Draw a rectangle for the model's learning rate\nmodel_learning_rate_rect = plt.Rectangle((-4, -28), 8, 2, color='blue')\nax.add_patch(model_learning_rate_rect)\n\n# Draw a rectangle for the FOD-Net's learning rate\nfodnet_learning_rate_rect = plt.Rectangle((-2, -28), 4, 2, color='orange')\nax.add_patch(fodnet_learning_rate_rect)\n\n# Draw a rectangle for the SS3T's learning rate\nss3t_learning_rate_rect = plt.Rectangle((0, -28), 4, 2, color='green')\nax.add_patch(ss3t_learning_rate_rect)\n\n# Draw a rectangle for the ACC's learning rate\nacc_learning_rate_rect = plt.Rectangle((-2, -30), 4, 2, color='brown')\nax.add_patch(acc_learning_rate_rect)\n\n# Draw a rectangle for the model's batch size\nmodel_batch_size_rect = plt.Rectangle((-4, -31), 8, 2, color='blue')\nax.add_patch(model_batch_size_rect)\n\n# Draw a rectangle for the FOD-Net's batch size\nfodnet_batch_size_rect = plt.Rectangle((-2, -31), 4, 2, color='orange')\nax.add_patch(fodnet_batch_size_rect)\n\n# Draw a rectangle for the SS3T's batch size\nss3t_batch_size_rect = plt.Rectangle((0, -31), 4, 2, color='green')\nax.add_patch(ss3t_batch_size_rect)\n\n# Draw a rectangle for the ACC's batch size\nacc_batch_size_rect = plt.Rectangle((-2, -33), 4, 2, color='brown')\nax.add_patch(acc_batch_size_rect)\n\n# Draw a rectangle for the model's optimizer\nmodel_optimizer_rect = plt.Rectangle((-4, -34), 8, 2, color='blue')\nax.add_patch(model_optimizer_rect)\n\n# Draw a rectangle for the FOD-Net's optimizer\nfodnet_optimizer_rect = plt.Rectangle((-2, -34), 4, 2, color='orange')\nax.add_patch(fodnet_optimizer_rect)\n\n# Draw a rectangle for the SS3T's optimizer\nss3t_optimizer_rect = plt.Rectangle((0, -34), 4, 2, color='green')\nax.add_patch(ss3t_optimizer_rect)\n\n# Draw a rectangle for the ACC's optimizer\nacc_optimizer_rect = plt.Rectangle((-2, -36), 4, 2, color='brown')\nax.add_patch(acc_optimizer_rect)\n\n# Draw a rectangle for the model's loss function\nmodel_loss_function_rect = plt.Rectangle((-4, -37), 8, 2, color='blue')\nax.add_patch(model_loss_function_rect)\n\n# Draw a rectangle for the FOD-Net's loss function\nfodnet_loss_function_rect = plt.Rectangle((-2, -37), 4, 2, color='orange')\nax.add_patch(fodnet_loss_function_rect)\n\n# Draw a rectangle for the SS3T's loss function\nss3t_loss_function_rect = plt.Rectangle((0, -37), 4, 2, color='green')\nax.add_patch(ss3t_loss_function_rect)\n\n# Draw a rectangle for the ACC's loss function\nacc_loss_function_rect = plt.Rectangle((-2, -39), 4, 2, color='brown')\nax.add_patch(acc_loss_function_rect)\n\n# Draw a rectangle for the model's metrics\nmodel_metrics_rect = plt.Rectangle((-4, -40), 8, 2, color='blue')\nax.add_patch(model_metrics_rect)\n\n# Draw a rectangle for the FOD-Net's metrics\nfodnet_metrics_rect = plt.Rectangle((-2, -40), 4, 2, color='orange')\nax.add_patch(fodnet_metrics_rect)\n\n# Draw a rectangle for the SS3T's metrics\nss3t_metrics_rect = plt.Rectangle((0, -40), 4, 2, color='green')\nax.add_patch(ss3t_metrics_rect)\n\n# Draw a rectangle for the ACC's metrics\nacc_metrics_rect = plt.Rectangle((-2, -42), 4, 2, color='brown')\nax.add_patch(acc_metrics_rect)\n\n# Draw a rectangle for the model's epochs\nmodel_epochs_rect = plt.Rectangle((-4, -43), 8, 2, color='blue')\nax.add_patch(model_epochs_rect)\n\n# Draw a rectangle for the FOD-Net's epochs\nfodnet_epochs_rect = plt.Rectangle((-2, -43), 4, 2, color='orange')\nax.add_patch(fodnet_epochs_rect)\n\n# Draw a rectangle for the SS3T's epochs\nss3t_epochs_rect = plt.Rectangle((0, -43), 4, 2, color='green')\nax.add_patch(ss3t_epochs_rect)\n\n# Draw a rectangle for the ACC's epochs\nacc_epochs_rect = plt.Rectangle((-2, -45), 4, 2, color='brown')\nax.add_patch(acc_epochs_rect)\n\n# Draw a rectangle for the model's patience\nmodel_patience_rect = plt.Rectangle((-4, -46), 8, 2, color='blue')\nax.add_patch(model_patience_rect)\n\n# Draw a rectangle for the FOD-Net's patience\nfodnet_patience_rect = plt.Rectangle((-2, -46), 4, 2, color='orange')\nax.add_patch(fodnet_patience_rect)\n\n# Draw a rectangle for the SS3T's patience\nss3t_patience_rect = plt.Rectangle((0, -46), 4, 2, color='green')\nax.add_patch(ss3t_patience_rect)\n\n# Draw a rectangle for the ACC's patience\nacc_patience_rect = plt.Rectangle((-2, -48), 4, 2, color='brown')\nax.add_patch(acc_patience_rect)\n\n# Draw a rectangle for the model's callbacks\nmodel_callbacks_rect = plt.Rectangle((-4, -49), 8, 2, color='blue')\nax.add_patch(model_callbacks_rect)\n\n# Draw a rectangle for the FOD-Net's callbacks\nfodnet_callbacks_rect = plt.Rectangle((-2, -49), 4, 2, color='orange')\nax.add_patch(fodnet_callbacks_rect)\n\n# Draw a rectangle for the SS3T's callbacks\nss3t_callbacks_rect = plt.Rectangle((0, -49), 4, 2, color='green')\nax.add_patch(ss3t_callbacks_rect)\n\n# Draw a rectangle for the ACC's callbacks\nacc_callbacks_rect = plt.Rectangle((-2, -51), 4, 2, color='brown')\nax.add_patch(acc_callbacks_rect)\n\n# Draw a rectangle for the model's learning rate scheduler\nmodel_lr_scheduler_rect = plt.Rectangle((-4, -52), 8, 2, color='blue')\nax.add_patch(model_lr_scheduler_rect)\n\n# Draw a rectangle for the FOD-Net's learning rate scheduler\nfodnet_lr_scheduler_rect = plt.Rectangle((-2, -52), 4, 2, color='orange')\nax.add_patch(fodnet_lr_scheduler_rect)\n\n# Draw a rectangle for the SS3T's learning rate scheduler\nss3t_lr_scheduler_rect = plt.Rectangle((0, -52), 4, 2, color='green')\nax.add_patch(ss3t_lr_scheduler_rect)\n\n# Draw a rectangle for the ACC's learning rate scheduler\nacc_lr_scheduler_rect = plt.Rectangle((-2, -54), 4, 2, color='brown')\nax.add_patch(acc_lr_scheduler_rect)\n\n# Draw a rectangle for the model's early stopping\nmodel_early_stopping_rect = plt.Rectangle((-4, -55), 8, 2, color='blue')\nax.add_patch(model_early_stopping_rect)\n\n# Draw a rectangle for the FOD-Net's early stopping\nfodnet_early_stopping_rect = plt.Rectangle((-2, -55), 4, 2, color='orange')\nax.add_patch(fodnet_early_stopping_rect)\n\n# Draw a rectangle for the SS3T's early stopping\nss3t_early_stopping_rect = plt.Rectangle((0, -55), 4, 2, color='green')\nax.add_patch(ss3t_early_stopping_rect)\n\n# Draw a rectangle for the ACC's early stopping\nacc_early_stopping_rect = plt.Rectangle((-2, -57), 4, 2, color='brown')\nax.add_patch(acc_early_stopping_rect)\n\n# Draw a rectangle for the model's model checkpoint\nmodel_model_checkpoint_rect = plt.Rectangle((-4, -58), 8, 2, color='blue')\nax.add_patch(model_model_checkpoint_rect)\n\n# Draw a rectangle for the FOD-Net's model checkpoint\nfodnet_model_checkpoint_rect = plt.Rectangle((-2, -58), 4, 2, color='orange')\nax.add_patch(fodnet_model_checkpoint_rect)\n\n# Draw a rectangle for the SS3T's model checkpoint\nss3t_model_checkpoint_rect = plt.Rectangle((0, -58), 4, 2, color='green')\nax.add_patch(ss3t_model_checkpoint_rect)\n\n# Draw a rectangle for the ACC's model checkpoint\nacc_model_checkpoint_rect = plt.Rectangle((-2, -60), 4, 2, color='brown')\nax.add_patch(acc_model_checkpoint_rect)\n\n# Draw a rectangle for the model's learning rate reduction\nmodel_lr_reduction_rect = plt.Rectangle((-4, -61), 8, 2, color='blue')\nax.add_patch(model_lr_reduction_rect)\n\n# Draw a rectangle for the FOD-Net's learning rate reduction\nfodnet_lr_reduction_rect = plt.Rectangle((-2, -61), 4, 2, color='orange')\nax.add_patch(fodnet_lr_reduction_rect)\n\n# Draw a rectangle for the SS3T's learning rate reduction\nss3t_lr_reduction_rect = plt.Rectangle((0, -61), 4, 2, color='green')\nax.add_patch(ss3t_lr_reduction_rect)\n\n# Draw a rectangle for the ACC's learning rate reduction\nacc_lr_reduction_rect = plt.Rectangle((-2, -63), 4, 2, color='brown')\nax.add_patch(acc_lr_reduction_rect)\n\n# Draw a rectangle for the model's learning rate warmup\nmodel_lr_warmup_rect = plt.Rectangle((-4, -64), 8, 2, color='blue')\nax.add_patch(model_lr_warmup_rect)\n\n# Draw a rectangle for the FOD-Net's learning rate warmup\nfodnet_lr_warmup_rect = plt.Rectangle((-2, -64), 4, 2, color='orange')\nax.add_patch(fodnet_lr_warmup_rect)\n\n# Draw a rectangle for the SS3T's learning rate warmup\nss3t_lr_warmup_rect = plt.Rectangle((0, -64), 4, 2, color='green')\nax.add_patch(ss3t_lr_warmup_rect)\n\n# Draw a rectangle for the ACC's learning rate warmup\nacc_lr_warmup_rect = plt.Rectangle((-2, -66), 4, 2, color='brown')\nax.add_patch(acc_lr_warmup_rect)\n\n# Draw a rectangle for the model's learning rate decay\nmodel_lr_decay_rect = plt.Rectangle((-4, -67), 8, 2, color='blue')\nax.add_patch(model_lr_decay_rect)\n\n# Draw"}
{"file": "dataset/ori_500/CB_22.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\nx = [1340, 1360, 1380, 1420, 1440, 1460]\ny = [0.005, 0.015, 0.025, 0.035, 0.045, 0.055]\n\nfig, axs = plt.subplots(2, 2, figsize=(10, 8))\n\n# Plot 1\naxs[0, 0].plot(x, y, 'b-')\naxs[0, 0].set_title('Total')\naxs[0, 0].set_xlabel('Daily reward (Ether)')\naxs[0, 0].set_ylabel('Probability')\n\n# Plot 2\naxs[0, 1].bar([1600, 1625, 1650, 1675, 1700, 1725], [0.005, 0.015, 0.025, 0.035, 0.045, 0.055], color='blue')\naxs[0, 1].set_title('Proposer')\naxs[0, 1].set_xlabel('Daily reward (Ether)')\naxs[0, 1].set_ylabel('Probability')\n\n# Plot 3\naxs[1, 0].bar([205, 210, 215, 220], [0.055, 0.065, 0.075, 0.085], color='red')\naxs[1, 0].set_title('Sync committee member')\naxs[1, 0].set_xlabel('Daily reward (Ether)')\naxs[1, 0].set_ylabel('Probability')\n\n# Plot 4\naxs[1, 1].bar([48, 49, 50, 51, 52], [0.065, 0.075, 0.085, 0.095, 0.105], color='yellow')\naxs[1, 1].set_title('Attestor')\naxs[1, 1].set_xlabel('Daily reward (Ether)')\naxs[1, 1].set_ylabel('Probability')\n\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_23.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ntrainable_sizes = [0, 50, 100, 150]\nrmse_values = [1.30, 1.27, 1.28, 1.29]\nlasmol_lite = [1.30, 1.30, 1.30, 1.30]\nlasmol_ffn = [1.27, 1.27, 1.27, 1.27]\nlasmol_attn = [1.21, 1.21, 1.21, 1.21]\nlasmol_large = [1.19, 1.19, 1.19, 1.19]\n\n# Plotting\nfig, ax = plt.subplots(figsize=(6.0, 8.0))\nax.plot(trainable_sizes, rmse_values, 'r-', label='RMSE')\nax.plot(trainable_sizes, lasmol_lite, 'ro', label='LlaSMol Lite')\nax.plot(trainable_sizes, lasmol_ffn, 'rs', label='LlaSMol FFN')\nax.plot(trainable_sizes, lasmol_attn, 'rp', label='LlaSMol Attn')\nax.plot(trainable_sizes, lasmol_large, 'rb', label='LlaSMol Large')\n\n# Legend\nlegend = ax.legend(loc='upper right', shadow=True)\n\n# Title and labels\nax.set_title('LlaSMol Performance')\nax.set_xlabel('Trainable Parameter Size (M)')\nax.set_ylabel('RMSE')\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_24.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Race Car Performance')\n\n# Set the x-axis label\nax.set_xlabel('Execution Duration (clock)')\n\n# Set the y-axis label\nax.set_ylabel('Distribution')\n\n# Set the x-axis limits\nax.set_xlim(40, 160)\n\n# Set the y-axis limits\nax.set_ylim(0, 0.1)\n\n# Set the x-axis ticks\nax.set_xticks([40, 60, 80, 100, 120, 140, 160])\n\n# Set the y-axis ticks\nax.set_yticks([0, 0.05, 0.1])\n\n# Set the x-axis tick labels\nax.set_xticklabels(['40', '60', '80', '100', '120', '140', '160'])\n\n# Set the y-axis tick labels\nax.set_yticklabels(['0', '0.05', '0.1'])\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('red')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('blue')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='green')\n\n# Set the color of the title\nax.title.set_color('purple')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('orange')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('cyan')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['40', '60', '80', '100', '120', '140', '160'], color='magenta')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0', '0.05', '0.1'], color='yellow')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('red')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('blue')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='green')\n\n# Set the color of the title\nax.title.set_color('purple')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('orange')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('cyan')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['40', '60', '80', '100', '120', '140', '160'], color='magenta')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0', '0.05', '0.1'], color='yellow')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('red')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('blue')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='green')\n\n# Set the color of the title\nax.title.set_color('purple')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('orange')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('cyan')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['40', '60', '80', '100', '120', '140', '160'], color='magenta')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0', '0.05', '0.1'], color='yellow')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('red')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('blue')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='green')\n\n# Set the color of the title\nax.title.set_color('purple')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('orange')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('cyan')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['40', '60', '80', '100', '120', '140', '160'], color='magenta')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0', '0.05', '0.1'], color='yellow')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('red')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('blue')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='green')\n\n# Set the color of the title\nax.title.set_color('purple')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('orange')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('cyan')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['40', '60', '80', '100', '120', '140', '160'], color='magenta')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0', '0.05', '0.1'], color='yellow')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('red')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('blue')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='green')\n\n# Set the color of the title\nax.title.set_color('purple')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('orange')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('cyan')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['40', '60', '80', '100', '120', '140', '160'], color='magenta')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0', '0.05', '0.1'], color='yellow')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('red')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('blue')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='green')\n\n# Set the color of the title\nax.title.set_color('purple')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('orange')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('cyan')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['40', '60', '80', '100', '120', '140', '160'], color='magenta')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0', '0.05', '0.1'], color='yellow')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('red')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('blue')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='green')\n\n# Set the color of the title\nax.title.set_color('purple')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('orange')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('cyan')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['40', '60', '80', '100', '120', '140', '160'], color='magenta')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0', '0.05', '0.1'], color='yellow')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('red')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('blue')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='green')\n\n# Set the color of the title\nax.title.set_color('purple')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('orange')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('cyan')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['40', '60', '80', '100', '120', '140', '160'], color='magenta')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0', '0.05', '0.1'], color='yellow')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('red')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('blue')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='green')\n\n# Set the color of the title\nax.title.set_color('purple')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('orange')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('cyan')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['40', '60', '80', '100', '120', '140', '160'], color='magenta')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0', '0.05', '0.1'], color='yellow')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('red')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('blue')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='green')\n\n# Set the color of the title\nax.title.set_color('purple')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('orange')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('cyan')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['40', '60', '80', '100', '120', '140', '160'], color='magenta')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0', '0.05', '0.1'], color='yellow')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('red')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('blue')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='green')\n\n# Set the color of the title\nax.title.set_color('purple')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('orange')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('cyan')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['40', '60', '80', '100', '120', '140', '160'], color='magenta')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0', '0.05', '0.1'], color='yellow')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('red')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('blue')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='green')\n\n# Set the color of the title\nax.title.set_color('purple')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('orange')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('cyan')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['40', '60', '80', '100', '120', '140', '160'], color='magenta')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0', '0.05', '0.1'], color='yellow')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('red')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('blue')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='green')\n\n# Set the color of the title\nax.title.set_color('purple')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('orange')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('cyan')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['40', '60', '80', '100', '120', '140', '160'], color='magenta')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0', '0.05', '0.1'], color='yellow')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('red')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('blue')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='green')\n\n# Set the color of the title\nax.title.set_color('purple')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('orange')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('cyan')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['40', '60', '80', '100', '120', '140', '160'], color='magenta')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0', '0.05', '0.1'], color='yellow')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('red')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('blue')\n\n# Set the color of the top and right axis lines\nax.spines['top']."}
{"file": "dataset/ori_500/CB_25.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nx = ['15x15', '20x15', '20x20', '30x20', '40x20', '50x20', '60x20']\ny = [18, 14, 13, 12, 9, 12, 0]\ncolors = ['green', 'orange', 'blue', 'purple', 'pink']\n\n# Plot\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\nax.plot(x, y, color='red')\nax.set_xlabel('Instance size')\nax.set_ylabel('Makespan (step)')\nax.set_title('Makespan vs Instance Size')\n\n# Legend\nlegend_elements = [plt.Line2D([0], [0], marker='o', color='w', label='PetriRL', markerfacecolor='green', markersize=10),\n                  plt.Line2D([0], [0], marker='o', color='w', label='GAM', markerfacecolor='orange', markersize=10),\n                  plt.Line2D([0], [0], marker='o', color='w', label='GIN', markerfacecolor='blue', markersize=10),\n                  plt.Line2D([0], [0], marker='o', color='w', label='DGERD', markerfacecolor='purple', markersize=10)]\nax.legend(handles=legend_elements)\n\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_26.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(7, 5))\n\n# Set the title of the plot\nax.set_title('Time Cost (Seconds)')\n\n# Set the x-axis label\nax.set_xlabel('Algorithms')\n\n# Set the y-axis label\nax.set_ylabel('Time Cost (Seconds)')\n\n# Set the x-ticks\nax.set_xticks([1, 2])\n\n# Set the x-tick labels\nax.set_xticklabels(['SEAC', 'CTCO'])\n\n# Set the y-ticks\nax.set_yticks([0, 1, 2, 3, 4])\n\n# Set the y-tick labels\nax.set_yticklabels(['0', '1', '2', '3', '4'])\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.5, 0.5), 1, 1, color='green'))\n\n# Draw a circle\nax.add_patch(plt.Circle((1.5, 1.5), 0.5, color='red'))\n\n# Draw a line\nax.plot([0.5, 1.5], [0.5, 1.5], color='blue')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_27.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Set the title of the graph\nax.set_title('Time to Market (Days)')\n\n# Set the x-axis label\nax.set_xlabel('Brand')\n\n# Set the y-axis label\nax.set_ylabel('Time to Market (Days)')\n\n# Define the data\nbrands = ['Adidas', 'Nike', 'New Balance', 'Our Brand']\ntime_to_market = [95, 85, 75, 65]\n\n# Plot the data\nax.plot(brands, time_to_market, marker='o')\n\n# Add stars to the plot\nfor i, brand in enumerate(brands):\n    if brand == 'Adidas':\n        ax.text(i, time_to_market[i], '*', ha='center', va='bottom', color='red')\n    elif brand == 'Nike':\n        ax.text(i, time_to_market[i], '*', ha='center', va='bottom', color='red')\n    elif brand == 'New Balance':\n        ax.text(i, time_to_market[i], '*', ha='center', va='bottom', color='red')\n    elif brand == 'Our Brand':\n        ax.text(i, time_to_market[i], '*', ha='center', va='bottom', color='red')\n\n# Set the legend\nax.legend(['Time to Market'])\n\n# Set the grid\nax.grid(True)\n\n# Set the tick labels\nax.set_yticks(range(40, 120, 10))\nax.set_xticks(range(len(brands)))\n\n# Set the tick labels\nax.set_yticklabels(range(40, 120, 10))\nax.set_xticklabels(brands)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_28.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Set the background color of the plot\nax.set_facecolor('lightblue')\n\n# Set the title of the plot\nax.set_title('Era')\n\n# Set the x-axis label\nax.set_xlabel('Density')\n\n# Set the y-axis label\nax.set_ylabel('Year')\n\n# Set the x-axis limits\nax.set_xlim(0, 2)\n\n# Set the y-axis limits\nax.set_ylim(1850, 2000)\n\n# Draw rectangles\nrect1 = plt.Rectangle((0.05, 1900), 0.1, 100, color='orange')\nrect2 = plt.Rectangle((0.15, 1900), 0.1, 100, color='green')\nrect3 = plt.Rectangle((0.25, 1900), 0.1, 100, color='blue')\nrect4 = plt.Rectangle((0.35, 1900), 0.1, 100, color='red')\nrect5 = plt.Rectangle((0.45, 1900), 0.1, 100, color='purple')\nrect6 = plt.Rectangle((0.55, 1900), 0.1, 100, color='brown')\nrect7 = plt.Rectangle((0.65, 1900), 0.1, 100, color='pink')\nrect8 = plt.Rectangle((0.75, 1900), 0.1, 100, color='cyan')\nrect9 = plt.Rectangle((0.85, 1900), 0.1, 100, color='magenta')\n\n# Add rectangles to the plot\nax.add_patch(rect1)\nax.add_patch(rect2)\nax.add_patch(rect3)\nax.add_patch(rect4)\nax.add_patch(rect5)\nax.add_patch(rect6)\nax.add_patch(rect7)\nax.add_patch(rect8)\nax.add_patch(rect9)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_29.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the bar chart\ntech = ['Nano', 'Quantum', 'Cybersecurity', 'VR', 'Biotech', 'Robotics', 'IoT', 'Cloud Computing', 'Blockchain', 'AI']\npatents = [20, 10, 40, 30, 60, 70, 90, 80, 50, 120]\nyears = [2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Plot the bar chart\nax.bar(tech, patents, color='blue')\n\n# Add a line graph\nfor i in range(len(tech)):\n    ax.plot([tech[i], tech[i]], [patents[i], 0], color='orange')\n\n# Set the title and labels\nax.set_title('Patent Filings in 2013')\nax.set_xlabel('Technology')\nax.set_ylabel('Number of Patents')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Set the background color of the plot\nax.set_facecolor('lightpink')\n\n# Set the title of the plot\nax.set_title('Calibration Curve', fontsize=14)\n\n# Set the x-axis label\nax.set_xlabel('Predicted Probability', fontsize=12)\n\n# Set the y-axis label\nax.set_ylabel('Fraction of Positives', fontsize=12)\n\n# Set the x-axis limits\nax.set_xlim(0, 1)\n\n# Set the y-axis limits\nax.set_ylim(0, 1)\n\n# Set the x-axis ticks\nax.set_xticks([0, 0.25, 0.5, 0.75, 1])\n\n# Set the y-axis ticks\nax.set_yticks([0, 0.25, 0.5, 0.75, 1])\n\n# Set the x-axis tick labels\nax.set_xticklabels(['0.00', '0.25', '0.50', '0.75', '1.00'])\n\n# Set the y-axis tick labels\nax.set_yticklabels(['0.00', '0.25', '0.50', '0.75', '1.00'])\n\n# Set the x-axis grid lines\nax.xaxis.grid(True)\n\n# Set the y-axis grid lines\nax.yaxis.grid(True)\n\n# Set the x-axis grid line style\nax.xaxis.grid(True, linestyle='--')\n\n# Set the y-axis grid line style\nax.yaxis.grid(True, linestyle='--')\n\n# Set the x-axis grid line color\nax.xaxis.grid(True, color='gray')\n\n# Set the y-axis grid line color\nax.yaxis.grid(True, color='gray')\n\n# Set the x-axis grid line width\nax.xaxis.grid(True, linewidth=0.5)\n\n# Set the y-axis grid line width\nax.yaxis.grid(True, linewidth=0.5)\n\n# Set the x-axis grid line alpha\nax.xaxis.grid(True, alpha=0.5)\n\n# Set the y-axis grid line alpha\nax.yaxis.grid(True, alpha=0.5)\n\n# Set the x-axis grid line zorder\nax.xaxis.grid(True, zorder=0)\n\n# Set the y-axis grid line zorder\nax.yaxis.grid(True, zorder=0)\n\n# Set the x-axis grid line hatch\nax.xaxis.grid(True, hatch='///')\n\n# Set the y-axis grid line hatch\nax.yaxis.grid(True, hatch='///')\n\n# Set the x-axis grid line antialiased\nax.xaxis.grid(True, antialiased=True)\n\n# Set the y-axis grid line antialiased\nax.yaxis.grid(True, antialiased=True)\n\n# Set the x-axis grid line visible\nax.xaxis.grid(True, visible=True)\n\n# Set the y-axis grid line visible\nax.yaxis.grid(True, visible=True)\n\n# Set the x-axis grid line which\nax.xaxis.grid(True, which='major')\n\n# Set the y-axis grid line which\nax.yaxis.grid(True, which='major')\n\n# Set the x-axis grid line linestyle\nax.xaxis.grid(True, linestyle='-')\n\n# Set the y-axis grid line linestyle\nax.yaxis.grid(True, linestyle='-')\n\n# Set the x-axis grid line linewidth\nax.xaxis.grid(True, linewidth=1)\n\n# Set the y-axis grid line linewidth\nax.yaxis.grid(True, linewidth=1)\n\n# Set the x-axis grid line alpha\nax.xaxis.grid(True, alpha=0.8)\n\n# Set the y-axis grid line alpha\nax.yaxis.grid(True, alpha=0.8)\n\n# Set the x-axis grid line zorder\nax.xaxis.grid(True, zorder=1)\n\n# Set the y-axis grid line zorder\nax.yaxis.grid(True, zorder=1)\n\n# Set the x-axis grid line hatch\nax.xaxis.grid(True, hatch='///')\n\n# Set the y-axis grid line hatch\nax.yaxis.grid(True, hatch='///')\n\n# Set the x-axis grid line antialiased\nax.xaxis.grid(True, antialiased=True)\n\n# Set the y-axis grid line antialiased\nax.yaxis.grid(True, antialiased=True)\n\n# Set the x-axis grid line visible\nax.xaxis.grid(True, visible=True)\n\n# Set the y-axis grid line visible\nax.yaxis.grid(True, visible=True)\n\n# Set the x-axis grid line which\nax.xaxis.grid(True, which='major')\n\n# Set the y-axis grid line which\nax.yaxis.grid(True, which='major')\n\n# Set the x-axis grid line linestyle\nax.xaxis.grid(True, linestyle='-')\n\n# Set the y-axis grid line linestyle\nax.yaxis.grid(True, linestyle='-')\n\n# Set the x-axis grid line linewidth\nax.xaxis.grid(True, linewidth=1)\n\n# Set the y-axis grid line linewidth\nax.yaxis.grid(True, linewidth=1)\n\n# Set the x-axis grid line alpha\nax.xaxis.grid(True, alpha=0.8)\n\n# Set the y-axis grid line alpha\nax.yaxis.grid(True, alpha=0.8)\n\n# Set the x-axis grid line zorder\nax.xaxis.grid(True, zorder=1)\n\n# Set the y-axis grid line zorder\nax.yaxis.grid(True, zorder=1)\n\n# Set the x-axis grid line hatch\nax.xaxis.grid(True, hatch='///')\n\n# Set the y-axis grid line hatch\nax.yaxis.grid(True, hatch='///')\n\n# Set the x-axis grid line antialiased\nax.xaxis.grid(True, antialiased=True)\n\n# Set the y-axis grid line antialiased\nax.yaxis.grid(True, antialiased=True)\n\n# Set the x-axis grid line visible\nax.xaxis.grid(True, visible=True)\n\n# Set the y-axis grid line visible\nax.yaxis.grid(True, visible=True)\n\n# Set the x-axis grid line which\nax.xaxis.grid(True, which='major')\n\n# Set the y-axis grid line which\nax.yaxis.grid(True, which='major')\n\n# Set the x-axis grid line linestyle\nax.xaxis.grid(True, linestyle='-')\n\n# Set the y-axis grid line linestyle\nax.yaxis.grid(True, linestyle='-')\n\n# Set the x-axis grid line linewidth\nax.xaxis.grid(True, linewidth=1)\n\n# Set the y-axis grid line linewidth\nax.yaxis.grid(True, linewidth=1)\n\n# Set the x-axis grid line alpha\nax.xaxis.grid(True, alpha=0.8)\n\n# Set the y-axis grid line alpha\nax.yaxis.grid(True, alpha=0.8)\n\n# Set the x-axis grid line zorder\nax.xaxis.grid(True, zorder=1)\n\n# Set the y-axis grid line zorder\nax.yaxis.grid(True, zorder=1)\n\n# Set the x-axis grid line hatch\nax.xaxis.grid(True, hatch='///')\n\n# Set the y-axis grid line hatch\nax.yaxis.grid(True, hatch='///')\n\n# Set the x-axis grid line antialiased\nax.xaxis.grid(True, antialiased=True)\n\n# Set the y-axis grid line antialiased\nax.yaxis.grid(True, antialiased=True)\n\n# Set the x-axis grid line visible\nax.xaxis.grid(True, visible=True)\n\n# Set the y-axis grid line visible\nax.yaxis.grid(True, visible=True)\n\n# Set the x-axis grid line which\nax.xaxis.grid(True, which='major')\n\n# Set the y-axis grid line which\nax.yaxis.grid(True, which='major')\n\n# Set the x-axis grid line linestyle\nax.xaxis.grid(True, linestyle='-')\n\n# Set the y-axis grid line linestyle\nax.yaxis.grid(True, linestyle='-')\n\n# Set the x-axis grid line linewidth\nax.xaxis.grid(True, linewidth=1)\n\n# Set the y-axis grid line linewidth\nax.yaxis.grid(True, linewidth=1)\n\n# Set the x-axis grid line alpha\nax.xaxis.grid(True, alpha=0.8)\n\n# Set the y-axis grid line alpha\nax.yaxis.grid(True, alpha=0.8)\n\n# Set the x-axis grid line zorder\nax.xaxis.grid(True, zorder=1)\n\n# Set the y-axis grid line zorder\nax.yaxis.grid(True, zorder=1)\n\n# Set the x-axis grid line hatch\nax.xaxis.grid(True, hatch='///')\n\n# Set the y-axis grid line hatch\nax.yaxis.grid(True, hatch='///')\n\n# Set the x-axis grid line antialiased\nax.xaxis.grid(True, antialiased=True)\n\n# Set the y-axis grid line antialiased\nax.yaxis.grid(True, antialiased=True)\n\n# Set the x-axis grid line visible\nax.xaxis.grid(True, visible=True)\n\n# Set the y-axis grid line visible\nax.yaxis.grid(True, visible=True)\n\n# Set the x-axis grid line which\nax.xaxis.grid(True, which='major')\n\n# Set the y-axis grid line which\nax.yaxis.grid(True, which='major')\n\n# Set the x-axis grid line linestyle\nax.xaxis.grid(True, linestyle='-')\n\n# Set the y-axis grid line linestyle\nax.yaxis.grid(True, linestyle='-')\n\n# Set the x-axis grid line linewidth\nax.xaxis.grid(True, linewidth=1)\n\n# Set the y-axis grid line linewidth\nax.yaxis.grid(True, linewidth=1)\n\n# Set the x-axis grid line alpha\nax.xaxis.grid(True, alpha=0.8)\n\n# Set the y-axis grid line alpha\nax.yaxis.grid(True, alpha=0.8)\n\n# Set the x-axis grid line zorder\nax.xaxis.grid(True, zorder=1)\n\n# Set the y-axis grid line zorder\nax.yaxis.grid(True, zorder=1)\n\n# Set the x-axis grid line hatch\nax.xaxis.grid(True, hatch='///')\n\n# Set the y-axis grid line hatch\nax.yaxis.grid(True, hatch='///')\n\n# Set the x-axis grid line antialiased\nax.xaxis.grid(True, antialiased=True)\n\n# Set the y-axis grid line antialiased\nax.yaxis.grid(True, antialiased=True)\n\n# Set the x-axis grid line visible\nax.xaxis.grid(True, visible=True)\n\n# Set the y-axis grid line visible\nax.yaxis.grid(True, visible=True)\n\n# Set the x-axis grid line which\nax.xaxis.grid(True, which='major')\n\n# Set the y-axis grid line which\nax.yaxis.grid(True, which='major')\n\n# Set the x-axis grid line linestyle\nax.xaxis.grid(True, linestyle='-')\n\n# Set the y-axis grid line linestyle\nax.yaxis.grid(True, linestyle='-')\n\n# Set the x-axis grid line linewidth\nax.xaxis.grid(True, linewidth=1)\n\n# Set the y-axis grid line linewidth\nax.yaxis.grid(True, linewidth=1)\n\n# Set the x-axis grid line alpha\nax.xaxis.grid(True, alpha=0.8)\n\n# Set the y-axis grid line alpha\nax.yaxis.grid(True, alpha=0.8)\n\n# Set the x-axis grid line zorder\nax.xaxis.grid(True, zorder=1)\n\n# Set the y-axis grid line zorder\nax.yaxis.grid(True, zorder=1)\n\n# Set the x-axis grid line hatch\nax.xaxis.grid(True, hatch='///')\n\n# Set the y-axis grid line hatch\nax.yaxis.grid(True, hatch='///')\n\n# Set the x-axis grid line antialiased\nax.xaxis.grid(True, antialiased=True)\n\n# Set the y-axis grid line antialiased\nax.yaxis.grid(True, antialiased=True)\n\n# Set the x-axis grid line visible\nax.xaxis.grid(True, visible=True)\n\n# Set the y-axis grid line visible\nax.yaxis.grid(True, visible=True)\n\n# Set the x-axis grid line which\nax.xaxis.grid(True, which='major')\n\n# Set the y-axis grid line which\nax.yaxis.grid(True, which='major')\n\n# Set the x-axis grid line linestyle\nax.xaxis.grid(True, linestyle='-')\n\n# Set the y-axis grid line linestyle\nax.yaxis.grid(True, linestyle='-')\n\n# Set the x-axis grid line linewidth\nax.xaxis.grid(True, linewidth=1)\n\n# Set the y-axis grid line linewidth\nax.yaxis.grid(True, linewidth=1)\n\n# Set the x-axis grid line alpha\nax.xaxis.grid(True, alpha=0.8)\n\n# Set the y-axis grid line alpha\nax.yaxis.grid(True, alpha=0.8)\n\n# Set the x-axis grid line zorder\nax.xaxis.grid(True, zorder=1)\n\n# Set the y-axis grid line zorder\nax.yaxis.grid(True, zorder=1)\n\n# Set the x-axis grid line hatch\nax.xaxis.grid(True, hatch='///')\n\n# Set the y-axis grid line hatch\nax.yaxis.grid(True, hatch='///')\n\n# Set the x-axis grid line antialiased\nax.xaxis.grid(True, antialiased=True)\n\n# Set the y-axis grid line antialiased\nax.yaxis.grid(True, antialiased=True)\n\n# Set the x-axis grid line visible\nax.xaxis.grid(True, visible=True)\n\n# Set the y-axis grid line visible\nax.yaxis.grid(True, visible=True)\n\n# Set the x-axis grid line which\nax.xaxis.grid(True, which='major')\n\n# Set the y-axis grid line which\nax.yaxis.grid(True, which='major')\n\n# Set the x-axis grid line linestyle\nax.xaxis.grid(True, linestyle='-')\n\n# Set the y-axis grid line linestyle\nax.yaxis.grid(True, linestyle='-')\n\n# Set the x-axis grid line linewidth\nax.xaxis.grid(True, linewidth=1)\n\n# Set the y-axis grid line linewidth\nax.yaxis.grid(True, linewidth=1)\n\n# Set the x-axis grid line alpha\nax.xaxis.grid(True, alpha=0.8)\n\n# Set the y-axis grid line alpha\nax.yaxis.grid(True, alpha=0.8)\n\n# Set the x-axis grid line zorder\nax.xaxis.grid(True, zorder=1)\n\n# Set the y-axis grid line zorder\nax.yaxis.grid(True, zorder=1)\n\n# Set the x-axis grid line hatch\nax.xaxis.grid(True, hatch='///')\n\n# Set the y-axis grid line hatch\nax.yaxis.grid(True, hatch='///')\n\n# Set the x-axis grid line antialiased\nax.xaxis.grid(True, antialiased=True)\n\n# Set the y-axis grid line antialiased\nax.yaxis.grid(True, antialiased=True)\n\n# Set the x-axis grid line visible\nax.xaxis.grid(True, visible=True)\n\n# Set the y-axis grid line visible\nax.yaxis.grid(True, visible=True)\n\n# Set the x-axis grid line which\nax.xaxis.grid(True, which='major')\n\n# Set the y-axis grid line which\nax.yaxis.grid(True, which='major')\n\n# Set the x-axis grid line linestyle\nax.xaxis.grid(True, linestyle='-')\n\n# Set the y-axis grid line linestyle\nax.yaxis.grid(True, linestyle='-')\n\n# Set the x-axis grid line linewidth\nax.xaxis.grid(True, linewidth=1)\n\n# Set the y-axis grid line linewidth\nax.yaxis.grid(True, linewidth=1)\n\n# Set the x-axis grid line alpha\nax.xaxis.grid(True, alpha=0.8)\n\n# Set the y-axis grid line alpha\nax.yaxis.grid(True, alpha=0.8)\n\n# Set the x-axis grid line zorder\nax.xaxis.grid(True, zorder=1)\n\n# Set the y-axis grid line zorder\nax.yaxis.grid(True, zorder=1)\n\n# Set the x-axis grid line hatch\nax.xaxis.grid(True, hatch='///')\n\n# Set the y-axis grid line hatch\nax.yaxis.grid(True, hatch='///')\n\n# Set the x-axis grid line antialiased\nax.xaxis.grid(True, antialiased=True)\n\n# Set the y-axis grid line antialiased\nax.yaxis.grid(True, antialiased=True)\n\n# Set the x-axis grid line visible\nax.xaxis.grid(True, visible=True)\n\n# Set the y-axis grid line visible\nax.yaxis.grid(True, visible=True)\n\n# Set the x-axis grid line which\nax.xaxis.grid(True, which='major')\n\n# Set the y-axis grid line which\nax.yaxis.grid(True, which='major')\n\n# Set the x-axis grid line linestyle\nax.xaxis.grid(True, linestyle='-')\n\n# Set the y-axis grid line linestyle\nax.yaxis.grid(True, linestyle='-')\n\n# Set the x-axis grid line linewidth\nax.xaxis.grid(True, linewidth=1)\n\n# Set the y-axis grid line linewidth\nax.yaxis.grid(True, linewidth=1)\n\n# Set the x-axis grid line alpha\nax.xaxis.grid(True, alpha=0.8)\n\n# Set the y-axis grid line alpha\nax.yaxis.grid(True, alpha=0.8)\n\n# Set the x-axis grid line zorder\nax.xaxis.grid(True, zorder=1)\n\n# Set the y-axis grid line zorder\nax.yaxis.grid(True, zorder=1)\n\n# Set the x-axis grid line hatch\nax.xaxis.grid(True, hatch='///')\n\n# Set the y-axis grid line hatch\nax.yaxis.grid(True, hatch='///')\n\n# Set the x-axis grid line antialiased\nax.xaxis.grid(True, antialiased=True)\n\n# Set the y-axis grid line antialiased\nax.yaxis.grid(True, antialiased=True)\n\n# Set the x-axis grid line visible\nax.xaxis.grid(True, visible=True)\n\n# Set the y-axis grid line visible\nax.yaxis.grid(True, visible=True)\n\n# Set the x-axis grid line which\nax.xaxis.grid(True, which='major')\n\n# Set the y-axis grid line which\nax.yaxis.grid(True, which='major')\n\n# Set the x-axis grid line linestyle\nax.xaxis.grid(True, linestyle='-')\n\n# Set the y-axis grid line linestyle\nax.yaxis.grid(True, linestyle='-')\n\n# Set the x-axis grid line linewidth\nax.xaxis.grid(True, linewidth=1)\n\n# Set the y-axis grid line linewidth\nax.yaxis.grid(True, linewidth=1)\n\n# Set the x-axis grid line alpha\nax.xaxis.grid(True, alpha=0.8)\n\n# Set the y-axis grid line alpha\nax.yaxis.grid(True, alpha=0.8)\n\n# Set the x-axis grid line zorder\nax.xaxis.grid(True, zorder=1)\n\n# Set the y-axis grid line zorder\nax.yaxis.grid(True, zorder=1)\n\n# Set the x-axis grid line hatch\nax.xaxis.grid(True, hatch='///')\n\n# Set the y-axis grid line hatch\nax.yaxis.grid(True, hatch='///')\n\n# Set the x-axis grid line antialiased\nax.xaxis.grid(True, antialiased=True)\n\n# Set the y-axis grid line antialiased\nax.yaxis.grid(True, antialiased=True)\n\n# Set the x-axis grid line visible\nax.xaxis.grid(True, visible=True)\n\n# Set the y-axis grid line visible\nax.yaxis.grid(True, visible=True)\n\n# Set the x-axis grid line which\nax.xaxis.grid(True, which='major')\n\n# Set the y-axis grid line which\nax.yaxis.grid(True, which='major')\n\n# Set the x-axis grid line linestyle\nax.xaxis.grid(True, linestyle='-')\n\n# Set the y-axis grid line linestyle\nax.yaxis.grid(True, linestyle='-')\n\n# Set the x-axis grid line linewidth\nax.xaxis.grid(True, linewidth=1)\n\n# Set the"}
{"file": "dataset/ori_500/CB_30.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nquarters = ['Q1', 'Q2', 'Q3', 'Q4']\nearnings = [350, 300, 250, 200]\ngrowth = [70, 60, 50, 40]\n\n# Create a figure and axis\nfig, ax1 = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the earnings data\ncolor = 'tab:blue'\nax1.set_xlabel('Quarter')\nax1.set_ylabel('Earnings ($1000s)', color=color)\nax1.plot(quarters, earnings, color=color)\nax1.tick_params(axis='y', labelcolor=color)\n\n# Create a second y-axis for growth\nax2 = ax1.twinx()  \ncolor = 'tab:red'\nax2.set_ylabel('Growth (%)', color=color)  \nax2.plot(quarters, growth, color=color)\nax2.tick_params(axis='y', labelcolor=color)\n\n# Add a logo\nlogo = plt.imread('logo.png')\nplt.figimage(logo, xo=10, yo=500, origin='lower')\n\n# Add a legend\nfig.legend(['Tesla', 'BMW', 'Porsche'], loc='upper right')\n\n# Set the title\nfig.suptitle('Company Performance')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nx = [1, 2, 3, 4, 5, 6, 7]\ny = [72, 74, 76, 78, 80, 82, 84]\ncolors = ['blue', 'orange', 'green', 'red', 'blue', 'orange', 'green']\nmarkers = ['o', 'o', 'o', 'o', 'o', 'o', 'o']\n\n# Plot\nfig, ax = plt.subplots(figsize=(10, 5))\nax.plot(x, y, 'k-')\nfor i, txt in enumerate(colors):\n    ax.annotate(txt, (x[i], y[i]), textcoords=\"offset points\", xytext=(0,10), ha='center')\n\n# Rectangles\nrects = [\n    plt.Rectangle((0.1, 0.1), 0.2, 0.2, color='blue'),\n    plt.Rectangle((0.3, 0.3), 0.2, 0.2, color='orange'),\n    plt.Rectangle((0.5, 0.5), 0.2, 0.2, color='green'),\n    plt.Rectangle((0.7, 0.7), 0.2, 0.2, color='red'),\n    plt.Rectangle((0.9, 0.9), 0.2, 0.2, color='blue'),\n    plt.Rectangle((1.1, 1.1), 0.2, 0.2, color='orange'),\n    plt.Rectangle((1.3, 1.3), 0.2, 0.2, color='green')\n]\n\nfor rect in rects:\n    ax.add_patch(rect)\n\n# Labels\nax.set_xlabel('Methods')\nax.set_ylabel('Normalized Requirements (lower is better)')\nax.set_title('Accuracy, iNaturalist 2021')\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Set the title of the plot\nax.set_title('TM-score vs. Seq-ident')\n\n# Set the x-axis label\nax.set_xlabel('TM-score')\n\n# Set the y-axis label\nax.set_ylabel('Seq-ident')\n\n# Set the x-axis limits\nax.set_xlim(0, 1)\n\n# Set the y-axis limits\nax.set_ylim(0, 1)\n\n# Draw horizontal lines\nfor i in range(10):\n    ax.axhline(i/10, color='blue', linestyle='--')\n\n# Draw vertical lines\nfor i in range(11):\n    ax.axvline(i/10, color='blue', linestyle='--')\n\n# Draw scatter plots\nfor i in range(10):\n    ax.scatter([i/10]*100, [j/10 for j in range(100)], color='blue', s=5)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 8))\n\n# Set the background color of the plot\nax.set_facecolor('white')\n\n# Draw a rectangle for the top part\nax.add_patch(plt.Rectangle((0, 3), 1, 1, color='red'))\n\n# Draw a rectangle for the middle part\nax.add_patch(plt.Rectangle((0, 2), 1, 1, color='green'))\n\n# Draw a rectangle for the bottom part\nax.add_patch(plt.Rectangle((0, 1), 1, 1, color='blue'))\n\n# Draw a rectangle for the left part\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='yellow'))\n\n# Draw a rectangle for the right part\nax.add_patch(plt.Rectangle((1, 0), 1, 1, color='cyan'))\n\n# Draw a rectangle for the bottom-left part\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='magenta'))\n\n# Draw a rectangle for the bottom-right part\nax.add_patch(plt.Rectangle((1, 0), 1, 1, color='orange'))\n\n# Draw a rectangle for the top-right part\nax.add_patch(plt.Rectangle((1, 3), 1, 1, color='purple'))\n\n# Draw a rectangle for the top-left part\nax.add_patch(plt.Rectangle((0, 3), 1, 1, color='brown'))\n\n# Draw a rectangle for the center part\nax.add_patch(plt.Rectangle((0.5, 1.5), 0.5, 0.5, color='gray'))\n\n# Draw a rectangle for the bottom-middle part\nax.add_patch(plt.Rectangle((0.5, 0.5), 0.5, 0.5, color='pink'))\n\n# Draw a rectangle for the top-middle part\nax.add_patch(plt.Rectangle((0.5, 2.5), 0.5, 0.5, color='lime'))\n\n# Draw a rectangle for the left-middle part\nax.add_patch(plt.Rectangle((0.5, 1.5), 0.5, 0.5, color='silver'))\n\n# Draw a rectangle for the right-middle part\nax.add_patch(plt.Rectangle((0.5, 1.5), 0.5, 0.5, color='gold'))\n\n# Draw a rectangle for the bottom-left-middle part\nax.add_patch(plt.Rectangle((0.5, 0.5), 0.5, 0.5, color='navy'))\n\n# Draw a rectangle for the bottom-right-middle part\nax.add_patch(plt.Rectangle((0.5, 0.5), 0.5, 0.5, color='olive'))\n\n# Draw a rectangle for the top-left-middle part\nax.add_patch(plt.Rectangle((0.5, 2.5), 0.5, 0.5, color='maroon'))\n\n# Draw a rectangle for the top-right-middle part\nax.add_patch(plt.Rectangle((0.5, 2.5), 0.5, 0.5, color='teal'))\n\n# Draw a rectangle for the bottom-left-middle-middle part\nax.add_patch(plt.Rectangle((0.5, 0.5), 0.5, 0.5, color='coral'))\n\n# Draw a rectangle for the bottom-right-middle-middle part\nax.add_patch(plt.Rectangle((0.5, 0.5), 0.5, 0.5, color='plum'))\n\n# Draw a rectangle for the top-left-middle-middle part\nax.add_patch(plt.Rectangle((0.5, 2.5), 0.5, 0.5, color='azure'))\n\n# Draw a rectangle for the top-right-middle-middle part\nax.add_patch(plt.Rectangle((0.5, 2.5), 0.5, 0.5, color='lavender'))\n\n# Draw a rectangle for the bottom-left-middle-middle-middle part\nax.add_patch(plt.Rectangle((0.5, 0.5), 0.5, 0.5, color='salmon'))\n\n# Draw a rectangle for the bottom-right-middle-middle-middle part\nax.add_patch(plt.Rectangle((0.5, 0.5), 0.5, 0.5, color='wheat'))\n\n# Draw a rectangle for the top-left-middle-middle-middle part\nax.add_patch(plt.Rectangle((0.5, 2.5), 0.5, 0.5, color='tan'))\n\n# Draw a rectangle for the top-right-middle-middle-middle part\nax.add_patch(plt.Rectangle((0.5, 2.5), 0.5, 0.5, color='beige'))\n\n# Draw a rectangle for the bottom-left-middle-middle-middle-middle part\nax.add_patch(plt.Rectangle((0.5, 0.5), 0.5, 0.5, color='ivory'))\n\n# Draw a rectangle for the bottom-right-middle-middle-middle-middle part\nax.add_patch(plt.Rectangle((0.5, 0.5), 0.5, 0.5, color='seashell'))\n\n# Draw a rectangle for the top-left-middle-middle-middle-middle part\nax.add_patch(plt.Rectangle((0.5, 2.5), 0.5, 0.5, color='cornsilk'))\n\n# Draw a rectangle for the top-right-middle-middle-middle-middle part\nax.add_patch(plt.Rectangle((0.5, 2.5), 0.5, 0.5, color='blanchedalmond'))\n\n# Draw a rectangle for the bottom-left-middle-middle-middle-middle-middle part\nax.add_patch(plt.Rectangle((0.5, 0.5), 0.5, 0.5, color='bisque'))\n\n# Draw a rectangle for the bottom-right-middle-middle-middle-middle-middle part\nax.add_patch(plt.Rectangle((0.5, 0.5), 0.5, 0.5, color='navajowhite'))\n\n# Draw a rectangle for the top-left-middle-middle-middle-middle-middle part\nax.add_patch(plt.Rectangle((0.5, 2.5), 0.5, 0.5, color='moccasin'))\n\n# Draw a rectangle for the top-right-middle-middle-middle-middle-middle part\nax.add_patch(plt.Rectangle((0.5, 2.5), 0.5, 0.5, color='papayawhip'))\n\n# Draw a rectangle for the bottom-left-middle-middle-middle-middle-middle-middle part\nax.add_patch(plt.Rectangle((0.5, 0.5), 0.5, 0.5, color='blanchedalmond'))\n\n# Draw a rectangle for the bottom-right-middle-middle-middle-middle-middle-middle part\nax.add_patch(plt.Rectangle((0.5, 0.5), 0.5, 0.5, color='cornsilk'))\n\n# Draw a rectangle for the top-left-middle-middle-middle-middle-middle-middle part\nax.add_patch(plt.Rectangle((0.5, 2.5), 0.5, 0.5, color='seashell'))\n\n# Draw a rectangle for the top-right-middle-middle-middle-middle-middle-middle part\nax.add_patch(plt.Rectangle((0.5, 2.5), 0.5, 0.5, color='ivory'))\n\n# Draw a rectangle for the bottom-left-middle-middle-middle-middle-middle-middle-middle part\nax.add_patch(plt.Rectangle((0.5, 0.5), 0.5, 0.5, color='beige'))\n\n# Draw a rectangle for the bottom-right-middle-middle-middle-middle-middle-middle-middle part\nax.add_patch(plt.Rectangle((0.5, 0.5), 0.5, 0.5, color='tan'))\n\n# Draw a rectangle for the top-left-middle-middle-middle-middle-middle-middle-middle part\nax.add_patch(plt.Rectangle((0.5, 2.5), 0.5, 0.5, color='wheat'))\n\n# Draw a rectangle for the top-right-middle-middle-middle-middle-middle-middle-middle part\nax.add_patch(plt.Rectangle((0.5, 2.5), 0.5, 0.5, color='salmon'))\n\n# Draw a rectangle for the bottom-left-middle-middle-middle-middle-middle-middle-middle-middle part\nax.add_patch(plt.Rectangle((0.5, 0.5), 0.5, 0.5, color='plum'))\n\n# Draw a rectangle for the bottom-right-middle-middle-middle-middle-middle-middle-middle-middle part\nax.add_patch(plt.Rectangle((0.5, 0.5), 0.5, 0.5, color='lavender'))\n\n# Draw a rectangle for the top-left-middle-middle-middle-middle-middle-middle-middle-middle part\nax.add_patch(plt.Rectangle((0.5, 2.5), 0.5, 0.5, color='coral'))\n\n# Draw a rectangle for the top-right-middle-middle-middle-middle-middle-middle-middle-middle part\nax.add_patch(plt.Rectangle((0.5, 2.5), 0.5, 0.5, color='teal'))\n\n# Draw a rectangle for the bottom-left-middle-middle-middle-middle-middle-middle-middle-middle-middle part\nax.add_patch(plt.Rectangle((0.5, 0.5), 0.5, 0.5, color='navy'))\n\n# Draw a rectangle for the bottom-right-middle-middle-middle-middle-middle-middle-middle-middle-middle part\nax.add_patch(plt.Rectangle((0.5, 0.5), 0.5, 0.5, color='olive'))\n\n# Draw a rectangle for the top-left-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle part\nax.add_patch(plt.Rectangle((0.5, 2.5), 0.5, 0.5, color='maroon'))\n\n# Draw a rectangle for the top-right-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle part\nax.add_patch(plt.Rectangle((0.5, 2.5), 0.5, 0.5, color='silver'))\n\n# Draw a rectangle for the bottom-left-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle part\nax.add_patch(plt.Rectangle((0.5, 0.5), 0.5, 0.5, color='gold'))\n\n# Draw a rectangle for the bottom-right-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle part\nax.add_patch(plt.Rectangle((0.5, 0.5), 0.5, 0.5, color='pink'))\n\n# Draw a rectangle for the top-left-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle part\nax.add_patch(plt.Rectangle((0.5, 2.5), 0.5, 0.5, color='lime'))\n\n# Draw a rectangle for the top-right-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle part\nax.add_patch(plt.Rectangle((0.5, 2.5), 0.5, 0.5, color='gray'))\n\n# Draw a rectangle for the bottom-left-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle part\nax.add_patch(plt.Rectangle((0.5, 0.5), 0.5, 0.5, color='purple'))\n\n# Draw a rectangle for the bottom-right-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle part\nax.add_patch(plt.Rectangle((0.5, 0.5), 0.5, 0.5, color='brown'))\n\n# Draw a rectangle for the top-left-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle part\nax.add_patch(plt.Rectangle((0.5, 2.5), 0.5, 0.5, color='cyan'))\n\n# Draw a rectangle for the top-right-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle part\nax.add_patch(plt.Rectangle((0.5, 2.5), 0.5, 0.5, color='magenta'))\n\n# Draw a rectangle for the bottom-left-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle part\nax.add_patch(plt.Rectangle((0.5, 0.5), 0.5, 0.5, color='orange'))\n\n# Draw a rectangle for the bottom-right-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle part\nax.add_patch(plt.Rectangle((0.5, 0.5), 0.5, 0.5, color='blue'))\n\n# Draw a rectangle for the top-left-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle part\nax.add_patch(plt.Rectangle((0.5, 2.5), 0.5, 0.5, color='yellow'))\n\n# Draw a rectangle for the top-right-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle part\nax.add_patch(plt.Rectangle((0.5, 2.5), 0.5, 0.5, color='red'))\n\n# Draw a rectangle for the bottom-left-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle part\nax.add_patch(plt.Rectangle((0.5, 0.5), 0.5, 0.5, color='green'))\n\n# Draw a rectangle for the bottom-right-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle part\nax.add_patch(plt.Rectangle((0.5, 0.5), 0.5, 0.5, color='black'))\n\n# Draw a rectangle for the top-left-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle part\nax.add_patch(plt.Rectangle((0.5, 2.5), 0.5, 0.5, color='white'))\n\n# Draw a rectangle for the top-right-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle part\nax.add_patch(plt.Rectangle((0.5, 2.5), 0.5, 0.5, color='grey'))\n\n# Draw a rectangle for the bottom-left-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle part\nax.add_patch(plt.Rectangle((0.5, 0.5), 0.5, 0.5, color='silver'))\n\n# Draw a rectangle for the bottom-right-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle part\nax.add_patch(plt.Rectangle((0.5, 0.5), 0.5, 0.5, color='gold'))\n\n# Draw a rectangle for the top-left-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle part\nax.add_patch(plt.Rectangle((0.5, 2.5), 0.5, 0.5, color='pink'))\n\n# Draw a rectangle for the top-right-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle part\nax.add_patch(plt.Rectangle((0.5, 2.5), 0.5, 0.5, color='lime'))\n\n# Draw a rectangle for the bottom-left-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle part\nax.add_patch(plt.Rectangle((0.5, 0.5), 0.5, 0.5, color='gray'))\n\n# Draw a rectangle for the bottom-right-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle part\nax.add_patch(plt.Rectangle((0.5, 0.5), 0.5, 0.5, color='purple'))\n\n# Draw a rectangle for the top-left-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle part\nax.add_patch(plt.Rectangle((0.5, 2.5), 0.5, 0.5, color='brown'))\n\n# Draw a rectangle for the top-right-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle part\nax.add_patch(plt.Rectangle((0.5, 2.5), 0.5, 0.5, color='cyan'))\n\n# Draw a rectangle for the bottom-left-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle part\nax.add_patch(plt.Rectangle((0.5, 0.5), 0.5, 0.5, color='magenta'))\n\n# Draw a rectangle for the bottom-right-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle part\nax.add_patch(plt.Rectangle((0.5, 0.5), 0.5, 0.5, color='orange'))\n\n# Draw a rectangle for the top-left-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle part\nax.add_patch(plt.Rectangle((0.5, 2.5), 0.5, 0.5, color='blue'))\n\n# Draw a rectangle for the top-right-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle part\nax.add_patch(plt.Rectangle((0.5, 2.5), 0.5, 0.5, color='yellow'))\n\n# Draw a rectangle for the bottom-left-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle part\nax.add_patch(plt.Rectangle((0.5, 0.5), 0.5, 0.5, color='red'))\n\n# Draw a rectangle for the bottom-right-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle part\nax.add_patch(plt.Rectangle((0.5, 0.5), 0.5, 0.5, color='green'))\n\n# Draw a rectangle for the top-left-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle part\nax.add_patch(plt.Rectangle((0.5, 2.5), 0.5, 0.5, color='black'))\n\n# Draw a rectangle for the top-right-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle part\nax.add_patch(plt.Rectangle((0.5, 2.5), 0.5, 0.5, color='grey'))\n\n# Draw a rectangle for the bottom-left-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle"}
{"file": "dataset/ori_500/CB_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nx = [0, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 104, 112, 120, 128]\ny = [99.6, 99.9, 99.9, 96.0, 92.3, 90.9, 90.9, 92.5, 93.3, 93.3, 91.3, 91.3, 92.5, 92.5, 92.5, 92.5, 98.7]\n\n# Plot\nplt.figure(figsize=(8.0, 6.0))\nplt.plot(x, y, 'b-')\nplt.scatter(x, y, color='blue')\n\n# Labels\nplt.xlabel('HC_first (before aging)')\nplt.ylabel('HC_first (after aging)')\n\n# Title\nplt.title('HC_first over time')\n\n# Grid\nplt.grid(True)\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/CB_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Set the background color of the plot\nax.set_facecolor('white')\n\n# Set the title of the plot\nax.set_title('TMS Score vs Sequence ID')\n\n# Set the x-axis label\nax.set_xlabel('TMS Score')\n\n# Set the y-axis label\nax.set_ylabel('Sequence ID')\n\n# Set the x-axis limits\nax.set_xlim(0.1, 1.0)\n\n# Set the y-axis limits\nax.set_ylim(0.1, 0.6)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.2, 0.5), 0.3, 0.1, color='blue')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.4, 0.4), 0.3, 0.1, color='green')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.6, 0.3), 0.3, 0.1, color='red')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.8, 0.2), 0.3, 0.1, color='yellow')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.1, 0.1), 0.3, 0.1, color='purple')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.3, 0.5), 0.3, 0.1, color='orange')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.5, 0.4), 0.3, 0.1, color='pink')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.7, 0.3), 0.3, 0.1, color='brown')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.9, 0.2), 0.3, 0.1, color='grey')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.1, 0.5), 0.3, 0.1, color='cyan')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.3, 0.4), 0.3, 0.1, color='magenta')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.5, 0.3), 0.3, 0.1, color='lime')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.7, 0.2), 0.3, 0.1, color='silver')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.9, 0.1), 0.3, 0.1, color='gold')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.1, 0.5), 0.3, 0.1, color='navy')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.3, 0.4), 0.3, 0.1, color='teal')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.5, 0.3), 0.3, 0.1, color='olive')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.7, 0.2), 0.3, 0.1, color='coral')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.9, 0.1), 0.3, 0.1, color='indigo')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.1, 0.5), 0.3, 0.1, color='violet')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.3, 0.4), 0.3, 0.1, color='azure')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.5, 0.3), 0.3, 0.1, color='beige')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.7, 0.2), 0.3, 0.1, color='chocolate')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.9, 0.1), 0.3, 0.1, color='lavender')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.1, 0.5), 0.3, 0.1, color='wheat')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.3, 0.4), 0.3, 0.1, color='salmon')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.5, 0.3), 0.3, 0.1, color='plum')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.7, 0.2), 0.3, 0.1, color='tan')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.9, 0.1), 0.3, 0.1, color='crimson')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.1, 0.5), 0.3, 0.1, color='azure')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.3, 0.4), 0.3, 0.1, color='beige')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.5, 0.3), 0.3, 0.1, color='chocolate')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.7, 0.2), 0.3, 0.1, color='lavender')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.9, 0.1), 0.3, 0.1, color='wheat')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.1, 0.5), 0.3, 0.1, color='salmon')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.3, 0.4), 0.3, 0.1, color='plum')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.5, 0.3), 0.3, 0.1, color='tan')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.7, 0.2), 0.3, 0.1, color='crimson')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.9, 0.1), 0.3, 0.1, color='azure')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.1, 0.5), 0.3, 0.1, color='beige')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.3, 0.4), 0.3, 0.1, color='chocolate')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.5, 0.3), 0.3, 0.1, color='lavender')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.7, 0.2), 0.3, 0.1, color='wheat')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.9, 0.1), 0.3, 0.1, color='salmon')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.1, 0.5), 0.3, 0.1, color='plum')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.3, 0.4), 0.3, 0.1, color='tan')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.5, 0.3), 0.3, 0.1, color='crimson')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.7, 0.2), 0.3, 0.1, color='azure')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.9, 0.1), 0.3, 0.1, color='beige')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.1, 0.5), 0.3, 0.1, color='chocolate')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.3, 0.4), 0.3, 0.1, color='lavender')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.5, 0.3), 0.3, 0.1, color='wheat')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.7, 0.2), 0.3, 0.1, color='salmon')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.9, 0.1), 0.3, 0.1, color='plum')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.1, 0.5), 0.3, 0.1, color='tan')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.3, 0.4), 0.3, 0.1, color='crimson')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.5, 0.3), 0.3, 0.1, color='azure')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.7, 0.2), 0.3, 0.1, color='beige')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.9, 0.1), 0.3, 0.1, color='chocolate')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.1, 0.5), 0.3, 0.1, color='lavender')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.3, 0.4), 0.3, 0.1, color='wheat')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.5, 0.3), 0.3, 0.1, color='salmon')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.7, 0.2), 0.3, 0.1, color='plum')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.9, 0.1), 0.3, 0.1, color='tan')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.1, 0.5), 0.3, 0.1, color='crimson')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.3, 0.4), 0.3, 0.1, color='azure')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.5, 0.3), 0.3, 0.1, color='beige')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.7, 0.2), 0.3, 0.1, color='chocolate')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.9, 0.1), 0.3, 0.1, color='lavender')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.1, 0.5), 0.3, 0.1, color='wheat')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.3, 0.4), 0.3, 0.1, color='salmon')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.5, 0.3), 0.3, 0.1, color='plum')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.7, 0.2), 0.3, 0.1, color='tan')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.9, 0.1), 0.3, 0.1, color='crimson')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.1, 0.5), 0.3, 0.1, color='azure')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.3, 0.4), 0.3, 0.1, color='beige')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.5, 0.3), 0.3, 0.1, color='chocolate')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.7, 0.2), 0.3, 0.1, color='lavender')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.9, 0.1), 0.3, 0.1, color='wheat')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.1, 0.5), 0.3, 0.1, color='salmon')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.3, 0.4), 0.3, 0.1, color='plum')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.5, 0.3), 0.3, 0.1, color='tan')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.7, 0.2), 0.3, 0.1, color='crimson')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.9, 0.1), 0.3, 0.1, color='azure')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.1, 0.5), 0.3, 0.1, color='beige')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.3, 0.4), 0.3, 0.1, color='chocolate')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.5, 0.3), 0.3, 0.1, color='lavender')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.7, 0.2), 0.3, 0.1, color='wheat')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.9, 0.1), 0.3, 0.1, color='salmon')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.1, 0.5), 0.3, 0.1, color='plum')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.3, 0.4), 0.3, 0.1, color='tan')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.5, 0.3), 0.3, 0.1, color='crimson')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.7, 0.2), 0.3, 0.1, color='azure')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.9, 0.1), 0.3, 0.1, color='beige')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.1, 0.5), 0.3, 0.1, color='chocolate')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.3, 0.4), 0.3, 0.1, color='lavender')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.5, 0.3), 0.3, 0.1, color='wheat')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.7, 0.2), 0.3, 0.1, color='salmon')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.9, 0.1), 0.3, 0.1, color='plum')\nax.add_patch(rectangle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.1, 0.5), 0.3, 0.1,"}
{"file": "dataset/ori_500/CB_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nyears = [4211, 2411, 2141, 1124]\nvalues = [0.9628, 0.9604, 0.9624, 0.9592]\ncolors = ['blue', 'green', 'blue', 'green']\nsum_values = [0.9641, 0.9641, 0.9641, 0.9561]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot the data\nfor i in range(len(years)):\n    ax.bar(years[i], values[i], color=colors[i])\n    ax.plot([years[i], years[i]], [values[i], sum_values[i]], 'r-')\n\n# Set the title and labels\nax.set_title('SRCC and PLCC values with their sum for different modes')\nax.set_xlabel('Modes')\nax.set_ylabel('Values')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_1.pdf", "response": "```python\n\"\"\"\nThis is a simple matplotlib code that creates a bar chart with multiple subplots.\n\"\"\"\n\nimport matplotlib.pyplot as plt\n\n# Create a figure and a set of subplots\nfig, axs = plt.subplots(2, 2, figsize=(10.0, 3.0))\n\n# Set the title for each subplot\naxs[0, 0].set_title('IIID-1 SDMT')\naxs[0, 1].set_title('NIID-2 SDST')\naxs[0, 2].set_title('NIID-4 UBSDT')\naxs[0, 3].set_title('NIID-5 UBSDST')\n\n# Set the x-axis label for each subplot\naxs[1, 0].set_xlabel('Client')\naxs[1, 1].set_xlabel('Client')\naxs[1, 2].set_xlabel('Client')\naxs[1, 3].set_xlabel('Client')\n\n# Set the y-axis label for each subplot\naxs[0, 0].set_ylabel('Value')\naxs[0, 1].set_ylabel('Value')\naxs[0, 2].set_ylabel('Value')\naxs[0, 3].set_ylabel('Value')\n\n# Set the color of the bars\ncolors = ['blue', 'cyan', 'green', 'orange']\n\n# Set the data for each subplot\ndata = [\n    [176, 176, 176, 176, 176, 176],\n    [0, 0, 0, 0, 0, 0],\n    [176, 176, 176, 176, 176, 176],\n    [0, 0, 0, 0, 0, 0],\n    [176, 176, 176, 176, 176, 176],\n    [0, 0, 0, 0, 0, 0],\n    [176, 176, 176, 176, 176, 176],\n    [0, 0, 0, 0, 0, 0],\n    [176, 176, 176, 176, 176, 176],\n    [0, 0, 0, 0, 0, 0],\n    [176, 176, 176, 176, 176, 176],\n    [0, 0, 0, 0, 0, 0]\n]\n\n# Plot the data\nfor i in range(2):\n    for j in range(2):\n        axs[i, j].bar(range(len(data)), data[i*2+j], color=colors)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Set the title of the plot\nax.set_title('Compact Spiral with Elliptical Hollow Center')\n\n# Draw a circle\ncircle = plt.Circle((0, 0), 1, color='blue')\nax.add_artist(circle)\n\n# Draw a spiral\ntheta = np.linspace(0, 2*np.pi, 100)\nr = np.linspace(0, 5, 100)\nx = r * np.cos(theta)\ny = r * np.sin(theta)\nax.plot(x, y, 'b-')\n\n# Draw a rectangle\nrectangle = plt.Rectangle((-5, -5), 10, 10, color='blue', fill=False)\nax.add_artist(rectangle)\n\n# Set the limits of the plot\nax.set_xlim(-10, 10)\nax.set_ylim(-10, 10)\n\n# Set the ticks\nax.set_xticks(np.arange(-10, 11, 1))\nax.set_yticks(np.arange(-10, 11, 1))\n\n# Set the labels\nax.set_xlabel('X-axis')\nax.set_ylabel('Y-axis')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 7.0))\n\n# Set the title of the plot\nax.set_title('DAXPY memory bandwidth')\n\n# Set the x-axis label\nax.set_xlabel('Flops/s')\n\n# Set the y-axis label\nax.set_ylabel('Flops/byte')\n\n# Set the x-axis limits\nax.set_xlim(10**-1, 10**1)\n\n# Set the y-axis limits\nax.set_ylim(10**10, 10**12)\n\n# Set the x-axis ticks\nax.set_xticks([10**-1, 10**0, 10**1])\n\n# Set the y-axis ticks\nax.set_yticks([10**10, 10**11, 10**12])\n\n# Set the x-axis tick labels\nax.set_xticklabels(['10^-1', '10^0', '10^1'])\n\n# Set the y-axis tick labels\nax.set_yticklabels(['10^10', '10^11', '10^12'])\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='minor', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', length=5)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', pad=5)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', direction='in')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', bottom=True, top=False, left=True, right=False)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', labelbottom=True, labeltop=False, labelleft=True, labelright=False)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', labelrotation=0)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', length=5)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', pad=5)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', direction='in')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', bottom=True, top=False, left=True, right=False)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', labelbottom=True, labeltop=False, labelleft=True, labelright=False)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', labelrotation=0)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', length=5)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', pad=5)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', direction='in')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', bottom=True, top=False, left=True, right=False)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', labelbottom=True, labeltop=False, labelleft=True, labelright=False)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', labelrotation=0)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', length=5)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', pad=5)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', direction='in')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', bottom=True, top=False, left=True, right=False)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', labelbottom=True, labeltop=False, labelleft=True, labelright=False)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', labelrotation=0)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', length=5)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', pad=5)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', direction='in')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', bottom=True, top=False, left=True, right=False)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', labelbottom=True, labeltop=False, labelleft=True, labelright=False)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', labelrotation=0)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', length=5)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', pad=5)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', direction='in')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', bottom=True, top=False, left=True, right=False)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', labelbottom=True, labeltop=False, labelleft=True, labelright=False)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', labelrotation=0)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', length=5)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', pad=5)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', direction='in')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', bottom=True, top=False, left=True, right=False)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', labelbottom=True, labeltop=False, labelleft=True, labelright=False)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', labelrotation=0)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', length=5)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', pad=5)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', direction='in')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', bottom=True, top=False, left=True, right=False)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', labelbottom=True, labeltop=False, labelleft=True, labelright=False)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', labelrotation=0)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', length=5)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', pad=5)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', direction='in')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', bottom=True, top=False, left=True, right=False)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', labelbottom=True, labeltop=False, labelleft=True, labelright=False)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', labelrotation=0)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', length=5)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', pad=5)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', direction='in')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', bottom=True, top=False, left=True, right=False)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', labelbottom=True, labeltop=False, labelleft=True, labelright=False)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', labelrotation=0)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', length=5)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', pad=5)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', direction='in')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', bottom=True, top=False, left=True, right=False)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', labelbottom=True, labeltop=False, labelleft=True, labelright=False)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', labelrotation=0)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', length=5)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', pad=5)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', direction='in')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', bottom=True, top=False, left=True, right=False)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', labelbottom=True, labeltop=False, labelleft=True, labelright=False)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', labelrotation=0)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', length=5)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', pad=5)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', direction='in')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', bottom=True, top=False, left=True, right=False)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', labelbottom=True, labeltop=False, labelleft=True, labelright=False)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', labelrotation=0)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', length=5)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', width=1)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', pad=5)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', direction='in')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', bottom=True, top=False, left=True, right=False)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', labelbottom=True, labeltop=False, labelleft=True, labelright=False)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', labelrotation=0)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', labelcolor='black')\n\n# Set"}
{"file": "dataset/ori_500/HR_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the bar chart\nx = [0.45, 0.5, 0.55, 0.6, 0.65, 0.7, 0.75]\ny = [0.06, -0.06, -0.06, -0.02, -0.02, -0.01, 0]\n\n# Create a bar chart with the specified data\nplt.bar(x, y, color='blue')\n\n# Set the title of the chart\nplt.title('f(x) = 0.50')\n\n# Set the x-axis label\nplt.xlabel('x')\n\n# Set the y-axis label\nplt.ylabel('f(x)')\n\n# Set the figure size\nfig = plt.gcf()\nfig.set_size_inches(8.0, 6.0)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Define the colors for the rectangles\ncolors = ['pink', 'orange', 'lightgreen']\n\n# Draw the rectangles\nfor i, color in enumerate(colors):\n    ax.add_patch(plt.Rectangle((i*2, 0), 1, 1, color=color, edgecolor='black'))\n\n# Set the limits of the plot\nax.set_xlim(-1, 5)\nax.set_ylim(-1, 1)\n\n# Set the aspect ratio of the plot\nax.set_aspect('equal')\n\n# Set the title of the plot\nax.set_title('CigaR')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Qwen-VL-Max')\n\n# Create a color map for the levels\ncmap = plt.get_cmap('tab20')\n\n# Create a list of colors for the levels\ncolors = [cmap(i) for i in range(10)]\n\n# Create a list of labels for the levels\nlabels = ['Level 1', 'Level 2', 'Level 3', 'Level 4', 'Level 5']\n\n# Create a list of rectangles for the levels\nrects = []\nfor i in range(5):\n    rect = plt.Rectangle((i*2, 0), 2, 10, color=colors[i])\n    rects.append(rect)\n\n# Add the rectangles to the plot\nfor rect in rects:\n    ax.add_patch(rect)\n\n# Set the limits of the x-axis\nax.set_xlim(-1, 11)\n\n# Set the limits of the y-axis\nax.set_ylim(-1, 11)\n\n# Set the tick marks on the x-axis\nax.set_xticks(np.arange(0, 11, 2))\n\n# Set the tick marks on the y-axis\nax.set_yticks(np.arange(0, 11, 2))\n\n# Set the labels for the x-axis\nax.set_xlabel('GPT4V-CoT')\n\n# Set the labels for the y-axis\nax.set_ylabel('Gemini Pro')\n\n# Set the labels for the levels\nfor i, label in enumerate(labels):\n    ax.text(i*2+1, 10.5, label, ha='center', va='center')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(1, 2, figsize=(10, 4))\n\n# Define the data\nx = np.logspace(1, 2, 100)\ny1 = 10**np.linspace(-3, -1, 100)\ny2 = 10**np.linspace(-5, -3, 100)\ny3 = 10**np.linspace(-7, -5, 100)\n\n# Plot the data\nax[0].plot(x, y1, 'r-')\nax[0].plot(x, y2, 'g-')\nax[0].plot(x, y3, 'b-')\n\n# Set the labels and title\nax[0].set_xlabel('number of matvecs m')\nax[0].set_ylabel('approximation error ||A \u2212 A\u0302||F')\nax[0].set_title('Approximation Error')\nax[0].set_xscale('log')\nax[0].set_yscale('log')\n\n# Define the data for the second subplot\nx = np.logspace(1, 2, 100)\ny1 = 10**np.linspace(-3, -1, 100)\ny2 = 10**np.linspace(-5, -3, 100)\ny3 = 10**np.linspace(-7, -5, 100)\n\n# Plot the data\nax[1].plot(x, y1, 'r-')\nax[1].plot(x, y2, 'g-')\nax[1].plot(x, y3, 'b-')\n\n# Set the labels and title\nax[1].set_xlabel('number of matvecs m')\nax[1].set_ylabel('sparse recovery error ||S\u0302A \u2212 A\u0302||F')\nax[1].set_title('Sparse Recovery Error')\nax[1].set_xscale('log')\nax[1].set_yscale('log')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_16.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Set the aspect ratio of the plot to be equal\nax.set_aspect('equal')\n\n# Draw a circle with a radius of 1 centered at (0, 0)\ncircle = plt.Circle((0, 0), 1, color='black')\nax.add_artist(circle)\n\n# Draw a rectangle with a width of 2 and a height of 1 centered at (0, 0)\nrectangle = plt.Rectangle((-1, -0.5), 2, 1, color='green')\nax.add_artist(rectangle)\n\n# Draw a rectangle with a width of 1 and a height of 2 centered at (0, 0)\nrectangle = plt.Rectangle((-0.5, -1), 1, 2, color='blue')\nax.add_artist(rectangle)\n\n# Draw a rectangle with a width of 2 and a height of 1 centered at (0, 0)\nrectangle = plt.Rectangle((-1, -0.5), 2, 1, color='yellow')\nax.add_artist(rectangle)\n\n# Draw a rectangle with a width of 1 and a height of 2 centered at (0, 0)\nrectangle = plt.Rectangle((-0.5, -1), 1, 2, color='orange')\nax.add_artist(rectangle)\n\n# Draw a rectangle with a width of 2 and a height of 1 centered at (0, 0)\nrectangle = plt.Rectangle((-1, -0.5), 2, 1, color='purple')\nax.add_artist(rectangle)\n\n# Draw a rectangle with a width of 1 and a height of 2 centered at (0, 0)\nrectangle = plt.Rectangle((-0.5, -1), 1, 2, color='cyan')\nax.add_artist(rectangle)\n\n# Draw a rectangle with a width of 2 and a height of 1 centered at (0, 0)\nrectangle = plt.Rectangle((-1, -0.5), 2, 1, color='magenta')\nax.add_artist(rectangle)\n\n# Draw a rectangle with a width of 1 and a height of 2 centered at (0, 0)\nrectangle = plt.Rectangle((-0.5, -1), 1, 2, color='lime')\nax.add_artist(rectangle)\n\n# Draw a rectangle with a width of 2 and a height of 1 centered at (0, 0)\nrectangle = plt.Rectangle((-1, -0.5), 2, 1, color='pink')\nax.add_artist(rectangle)\n\n# Draw a rectangle with a width of 1 and a height of 2 centered at (0, 0)\nrectangle = plt.Rectangle((-0.5, -1), 1, 2, color='brown')\nax.add_artist(rectangle)\n\n# Draw a rectangle with a width of 2 and a height of 1 centered at (0, 0)\nrectangle = plt.Rectangle((-1, -0.5), 2, 1, color='gray')\nax.add_artist(rectangle)\n\n# Draw a rectangle with a width of 1 and a height of 2 centered at (0, 0)\nrectangle = plt.Rectangle((-0.5, -1), 1, 2, color='silver')\nax.add_artist(rectangle)\n\n# Draw a rectangle with a width of 2 and a height of 1 centered at (0, 0)\nrectangle = plt.Rectangle((-1, -0.5), 2, 1, color='gold')\nax.add_artist(rectangle)\n\n# Draw a rectangle with a width of 1 and a height of 2 centered at (0, 0)\nrectangle = plt.Rectangle((-0.5, -1), 1, 2, color='white')\nax.add_artist(rectangle)\n\n# Draw a rectangle with a width of 2 and a height of 1 centered at (0, 0)\nrectangle = plt.Rectangle((-1, -0.5), 2, 1, color='black')\nax.add_artist(rectangle)\n\n# Draw a rectangle with a width of 1 and a height of 2 centered at (0, 0)\nrectangle = plt.Rectangle((-0.5, -1), 1, 2, color='red')\nax.add_artist(rectangle)\n\n# Draw a rectangle with a width of 2 and a height of 1 centered at (0, 0)\nrectangle = plt.Rectangle((-1, -0.5), 2, 1, color='green')\nax.add_artist(rectangle)\n\n# Draw a rectangle with a width of 1 and a height of 2 centered at (0, 0)\nrectangle = plt.Rectangle((-0.5, -1), 1, 2, color='blue')\nax.add_artist(rectangle)\n\n# Draw a rectangle with a width of 2 and a height of 1 centered at (0, 0)\nrectangle = plt.Rectangle((-1, -0.5), 2, 1, color='yellow')\nax.add_artist(rectangle)\n\n# Draw a rectangle with a width of 1 and a height of 2 centered at (0, 0)\nrectangle = plt.Rectangle((-0.5, -1), 1, 2, color='orange')\nax.add_artist(rectangle)\n\n# Draw a rectangle with a width of 2 and a height of 1 centered at (0, 0)\nrectangle = plt.Rectangle((-1, -0.5), 2, 1, color='purple')\nax.add_artist(rectangle)\n\n# Draw a rectangle with a width of 1 and a height of 2 centered at (0, 0)\nrectangle = plt.Rectangle((-0.5, -1), 1, 2, color='cyan')\nax.add_artist(rectangle)\n\n# Draw a rectangle with a width of 2 and a height of 1 centered at (0, 0)\nrectangle = plt.Rectangle((-1, -0.5), 2, 1, color='magenta')\nax.add_artist(rectangle)\n\n# Draw a rectangle with a width of 1 and a height of 2 centered at (0, 0)\nrectangle = plt.Rectangle((-0.5, -1), 1, 2, color='lime')\nax.add_artist(rectangle)\n\n# Draw a rectangle with a width of 2 and a height of 1 centered at (0, 0)\nrectangle = plt.Rectangle((-1, -0.5), 2, 1, color='pink')\nax.add_artist(rectangle)\n\n# Draw a rectangle with a width of 1 and a height of 2 centered at (0, 0)\nrectangle = plt.Rectangle((-0.5, -1), 1, 2, color='brown')\nax.add_artist(rectangle)\n\n# Draw a rectangle with a width of 2 and a height of 1 centered at (0, 0)\nrectangle = plt.Rectangle((-1, -0.5), 2, 1, color='gray')\nax.add_artist(rectangle)\n\n# Draw a rectangle with a width of 1 and a height of 2 centered at (0, 0)\nrectangle = plt.Rectangle((-0.5, -1), 1, 2, color='silver')\nax.add_artist(rectangle)\n\n# Draw a rectangle with a width of 2 and a height of 1 centered at (0, 0)\nrectangle = plt.Rectangle((-1, -0.5), 2, 1, color='gold')\nax.add_artist(rectangle)\n\n# Draw a rectangle with a width of 1 and a height of 2 centered at (0, 0)\nrectangle = plt.Rectangle((-0.5, -1), 1, 2, color='white')\nax.add_artist(rectangle)\n\n# Draw a rectangle with a width of 2 and a height of 1 centered at (0, 0)\nrectangle = plt.Rectangle((-1, -0.5), 2, 1, color='black')\nax.add_artist(rectangle)\n\n# Draw a rectangle with a width of 1 and a height of 2 centered at (0, 0)\nrectangle = plt.Rectangle((-0.5, -1), 1, 2, color='red')\nax.add_artist(rectangle)\n\n# Draw a rectangle with a width of 2 and a height of 1 centered at (0, 0)\nrectangle = plt.Rectangle((-1, -0.5), 2, 1, color='green')\nax.add_artist(rectangle)\n\n# Draw a rectangle with a width of 1 and a height of 2 centered at (0, 0)\nrectangle = plt.Rectangle((-0.5, -1), 1, 2, color='blue')\nax.add_artist(rectangle)\n\n# Draw a rectangle with a width of 2 and a height of 1 centered at (0, 0)\nrectangle = plt.Rectangle((-1, -0.5), 2, 1, color='yellow')\nax.add_artist(rectangle)\n\n# Draw a rectangle with a width of 1 and a height of 2 centered at (0, 0)\nrectangle = plt.Rectangle((-0.5, -1), 1, 2, color='orange')\nax.add_artist(rectangle)\n\n# Draw a rectangle with a width of 2 and a height of 1 centered at (0, 0)\nrectangle = plt.Rectangle((-1, -0.5), 2, 1, color='purple')\nax.add_artist(rectangle)\n\n# Draw a rectangle with a width of 1 and a height of 2 centered at (0, 0)\nrectangle = plt.Rectangle((-0.5, -1), 1, 2, color='cyan')\nax.add_artist(rectangle)\n\n# Draw a rectangle with a width of 2 and a height of 1 centered at (0, 0)\nrectangle = plt.Rectangle((-1, -0.5), 2, 1, color='magenta')\nax.add_artist(rectangle)\n\n# Draw a rectangle with a width of 1 and a height of 2 centered at (0, 0)\nrectangle = plt.Rectangle((-0.5, -1), 1, 2, color='lime')\nax.add_artist(rectangle)\n\n# Draw a rectangle with a width of 2 and a height of 1 centered at (0, 0)\nrectangle = plt.Rectangle((-1, -0.5), 2, 1, color='pink')\nax.add_artist(rectangle)\n\n# Draw a rectangle with a width of 1 and a height of 2 centered at (0, 0)\nrectangle = plt.Rectangle((-0.5, -1), 1, 2, color='brown')\nax.add_artist(rectangle)\n\n# Draw a rectangle with a width of 2 and a height of 1 centered at (0, 0)\nrectangle = plt.Rectangle((-1, -0.5), 2, 1, color='gray')\nax.add_artist(rectangle)\n\n# Draw a rectangle with a width of 1 and a height of 2 centered at (0, 0)\nrectangle = plt.Rectangle((-0.5, -1), 1, 2, color='silver')\nax.add_artist(rectangle)\n\n# Draw a rectangle with a width of 2 and a height of 1 centered at (0, 0)\nrectangle = plt.Rectangle((-1, -0.5), 2, 1, color='gold')\nax.add_artist(rectangle)\n\n# Draw a rectangle with a width of 1 and a height of 2 centered at (0, 0)\nrectangle = plt.Rectangle((-0.5, -1), 1, 2, color='white')\nax.add_artist(rectangle)\n\n# Draw a rectangle with a width of 2 and a height of 1 centered at (0, 0)\nrectangle = plt.Rectangle((-1, -0.5), 2, 1, color='black')\nax.add_artist(rectangle)\n\n# Draw a rectangle with a width of 1 and a height of 2 centered at (0, 0)\nrectangle = plt.Rectangle((-0.5, -1), 1, 2, color='red')\nax.add_artist(rectangle)\n\n# Draw a rectangle with a width of 2 and a height of 1 centered at (0, 0)\nrectangle = plt.Rectangle((-1, -0.5), 2, 1, color='green')\nax.add_artist(rectangle)\n\n# Draw a rectangle with a width of 1 and a height of 2 centered at (0, 0)\nrectangle = plt.Rectangle((-0.5, -1), 1, 2, color='blue')\nax.add_artist(rectangle)\n\n# Draw a rectangle with a width of 2 and a height of 1 centered at (0, 0)\nrectangle = plt.Rectangle((-1, -0.5), 2, 1, color='yellow')\nax.add_artist(rectangle)\n\n# Draw a rectangle with a width of 1 and a height of 2 centered at (0, 0)\nrectangle = plt.Rectangle((-0.5, -1), 1, 2, color='orange')\nax.add_artist(rectangle)\n\n# Draw a rectangle with a width of 2 and a height of 1 centered at (0, 0)\nrectangle = plt.Rectangle((-1, -0.5), 2, 1, color='purple')\nax.add_artist(rectangle)\n\n# Draw a rectangle with a width of 1 and a height of 2 centered at (0, 0)\nrectangle = plt.Rectangle((-0.5, -1), 1, 2, color='cyan')\nax.add_artist(rectangle)\n\n# Draw a rectangle with a width of 2 and a height of 1 centered at (0, 0)\nrectangle = plt.Rectangle((-1, -0.5), 2, 1, color='magenta')\nax.add_artist(rectangle)\n\n# Draw a rectangle with a width of 1 and a height of 2 centered at (0, 0)\nrectangle = plt.Rectangle((-0.5, -1), 1, 2, color='lime')\nax.add_artist(rectangle)\n\n# Draw a rectangle with a width of 2 and a height of 1 centered at (0, 0)\nrectangle = plt.Rectangle((-1, -0.5), 2, 1, color='pink')\nax.add_artist(rectangle)\n\n# Draw a rectangle with a width of 1 and a height of 2 centered at (0, 0)\nrectangle = plt.Rectangle((-0.5, -1), 1, 2, color='brown')\nax.add_artist(rectangle)\n\n# Draw a rectangle with a width of 2 and a height of 1 centered at (0, 0)\nrectangle = plt.Rectangle((-1, -0.5), 2, 1, color='gray')\nax.add_artist(rectangle)\n\n# Draw a rectangle with a width of 1 and a height of 2 centered at (0, 0)\nrectangle = plt.Rectangle((-0.5, -1), 1, 2, color='silver')\nax.add_artist(rectangle)\n\n# Draw a rectangle with a width of 2 and a height of 1 centered at (0, 0)\nrectangle = plt.Rectangle((-1, -0.5), 2, 1, color='gold')\nax.add_artist(rectangle)\n\n# Draw a rectangle with a width of 1 and a height of 2 centered at (0, 0)\nrectangle = plt.Rectangle((-0.5, -1), 1, 2, color='white')\nax.add_artist(rectangle)\n\n# Draw a rectangle with a width of 2 and a height of 1 centered at (0, 0)\nrectangle = plt.Rectangle((-1, -0.5), 2, 1, color='black')\nax.add_artist(rectangle)\n\n# Draw a rectangle with a width of 1 and a height of 2 centered at (0, 0)\nrectangle = plt.Rectangle((-0.5, -1), 1, 2, color='red')\nax.add_artist(rectangle)\n\n# Draw a rectangle with a width of 2 and a height of 1 centered at (0, 0)\nrectangle = plt.Rectangle((-1, -0.5), 2, 1, color='green')\nax.add_artist(rectangle)\n\n# Draw a rectangle with a width of 1 and a height of 2 centered at (0, 0)\nrectangle = plt.Rectangle((-0.5, -1), 1, 2, color='blue')\nax.add_artist(rectangle)\n\n# Draw a rectangle with a width of 2 and a height of 1 centered at (0, 0)\nrectangle = plt.Rectangle((-1, -0.5), 2, 1, color='yellow')\nax.add_artist(rectangle)\n\n# Draw a rectangle with a width of 1 and a height of 2 centered at (0, 0)\nrectangle = plt.Rectangle((-0.5, -1), 1, 2, color='orange')\nax.add_artist(rectangle)\n\n# Draw a rectangle with a width of 2 and a height of 1 centered at (0, 0)\nrectangle = plt.Rectangle((-1, -0.5), 2, 1, color='purple')\nax.add_artist(rectangle)\n\n# Draw a rectangle with a width of 1 and a height of 2 centered at (0, 0)\nrectangle = plt.Rectangle((-0.5, -1), 1, 2, color='cyan')\nax.add_artist(rectangle)\n\n# Draw a rectangle with a width of 2 and a height of 1 centered at (0, 0)\nrectangle = plt.Rectangle((-1, -0.5), 2, 1, color='magenta')\nax.add_artist(rectangle)\n\n# Draw a rectangle with a width of 1 and a height of 2 centered at (0, 0)\nrectangle = plt.Rectangle((-0.5, -1), 1, 2, color='lime')\nax.add_artist(rectangle)\n\n# Draw a rectangle with a width of 2 and a height of 1 centered at (0, 0)\nrectangle = plt.Rectangle((-1, -0.5), 2, 1, color='pink')\nax.add_artist(rectangle)\n\n# Draw a rectangle with a width of 1 and a height of 2 centered at (0, 0)\nrectangle = plt.Rectangle((-0.5, -1), 1, 2, color='brown')\nax.add_artist(rectangle)\n\n# Draw a rectangle with a width of 2 and a height of 1 centered at (0, 0)\nrectangle = plt.Rectangle((-1, -0.5), 2, 1, color='gray')\nax.add_artist(rectangle)\n\n# Draw a rectangle with a width of 1 and a height of 2 centered at (0, 0)\nrectangle = plt.Rectangle((-0.5, -1), 1, 2, color='silver')\nax.add_artist(rectangle)\n\n# Draw a rectangle with a width of 2 and a height of 1 centered at (0, 0)\nrectangle = plt.Rectangle((-1, -0.5), 2, 1, color='gold')\nax.add"}
{"file": "dataset/ori_500/HR_17.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6, 5))\n\n# Define the data for the plot\nx = np.linspace(0, 140, 100)\ny1 = np.sin(x / 20)\ny2 = np.cos(x / 20)\ny3 = np.tan(x / 20)\ny4 = np.exp(-x / 20)\n\n# Plot the data\nax.plot(x, y1, color='green')\nax.plot(x, y2, color='orange')\nax.plot(x, y3, color='blue')\nax.plot(x, y4, color='red')\n\n# Set the limits of the x-axis\nax.set_xlim(0, 140)\n\n# Set the title and labels\nax.set_title('Stock Prices')\nax.set_xlabel('Time (minutes)')\nax.set_ylabel('Price ($)')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_18.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(7, 5))\n\n# Set the title of the plot\nax.set_title('Uncertainty in Thermal Conductivity Measurements')\n\n# Set the x-axis label\nax.set_xlabel('Sample Number')\n\n# Set the y-axis label\nax.set_ylabel('Thermal Conductivity (W/m.K)')\n\n# Define the data for the plot\nx = [0, 1, 2, 3, 4, 5, 6]\ny = [3.2, 3.4, 3.6, 3.8, 4.0, 4.2, 4.4]\n\n# Plot the data\nax.plot(x, y, 'bo-')\n\n# Set the limits of the x-axis\nax.set_xlim(0, 6)\n\n# Set the limits of the y-axis\nax.set_ylim(1.5, 4.5)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_19.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ngames = ['I', 'II', 'III', 'IV', 'V']\nscores = [28, 20, 10, 20, 28]\nplayer_a_scores = [35, 26, 20, 22, 30]\nplayer_b_scores = [20, 20, 10, 25, 28]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(7, 5))\n\n# Plot the scores\nax.plot(games, scores, label='Scores')\n\n# Plot the player A scores\nax.bar(games, player_a_scores, color='green', alpha=0.5, label='Player A')\n\n# Plot the player B scores\nax.bar(games, player_b_scores, color='darkgreen', alpha=0.5, label='Player B')\n\n# Set the title and labels\nax.set_title('Scores by number of game and players')\nax.set_xlabel('Games')\nax.set_ylabel('Score')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Plot the first variable\nax.plot(np.linspace(-6, 6, 100), np.sin(np.linspace(-6, 6, 100)), 'r')\nax.plot(np.linspace(-6, 6, 100), np.cos(np.linspace(-6, 6, 100)), 'g')\n\n# Plot the second variable\nax.plot(np.linspace(-6, 6, 100), np.tan(np.linspace(-6, 6, 100)), 'b')\nax.plot(np.linspace(-6, 6, 100), np.sin(np.linspace(-6, 6, 100))**2, 'y')\n\n# Add a rectangle for the third variable\nax.add_patch(plt.Rectangle((-3, -3), 6, 6, color='k'))\n\n# Set the title and labels\nax.set_title('Variable 1 vs Variable 2')\nax.set_xlabel('Variable 1')\nax.set_ylabel('Variable 2')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_20.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nteams = ['Female Player', 'Male Player', 'LLM Player', 'Person Player']\nsentiments = [5.7, 6.2, 7.0, 3.4]\ncolors = ['pink', 'skyblue', 'lightgreen', 'lightblue']\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Plot the bar chart\nax.bar(teams, sentiments, color=colors)\n\n# Set the title and labels\nax.set_title('Trustee Sentiment Analysis')\nax.set_xlabel('Teams')\nax.set_ylabel('Average Sentiment Score')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_21.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nx = [0, 25, 50, 75]\ny1 = [10, 30, 40, 60]\ny2 = [15, 35, 45, 65]\ny3 = [20, 40, 50, 70]\ny4 = [25, 45, 55, 75]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(7.0, 5.0))\n\n# Plot the data\nax.plot(x, y1, 'g-', label='Running')\nax.plot(x, y2, 'r-', label='Interrupted')\nax.plot(x, y3, 'y-', label='Rest')\nax.plot(x, y4, 'g-', label='Running2')\n\n# Add a title and labels\nax.set_title('Endurance Race Performance Analysis')\nax.set_xlabel('Seconds Since Start')\nax.set_ylabel('Performance')\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_22.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(7, 5))\n\n# Define the data for the plot\nx = np.linspace(-10, 10, 100)\ny = np.sin(x)\n\n# Plot the data\nax.plot(x, y, color='green')\n\n# Set the title of the plot\nax.set_title('Control Group')\n\n# Set the x-axis label\nax.set_xlabel('Number of Observations')\n\n# Set the y-axis label\nax.set_ylabel('Value Range')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_23.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nx = [-150, -120, -100, -75, -50, -35, -135, -100, -50, -25, -10, 0, 25, 50, 75, 100, 125, 150]\ny = [350, 150, 100, 200, 75, 25, 50, 100, 25, 50, 75, 100, 125, 150, 175, 200, 225, 250]\n\n# Plot\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\nax.plot(x, y, 'k-')\nax.set_xlim(-150, 150)\nax.set_ylim(700, 1300)\nax.set_xlabel('Time (s)')\nax.set_ylabel('Value ($)')\nax.grid(True)\n\n# Rectangles\nrectangles = [\n    plt.Rectangle((-150, 700), 300, 600, color='green', alpha=0.5),\n    plt.Rectangle((-120, 700), 30, 600, color='red', alpha=0.5),\n    plt.Rectangle((-100, 700), 30, 600, color='green', alpha=0.5),\n    plt.Rectangle((-75, 700), 30, 600, color='red', alpha=0.5),\n    plt.Rectangle((-50, 700), 30, 600, color='green', alpha=0.5),\n    plt.Rectangle((-35, 700), 30, 600, color='red', alpha=0.5),\n    plt.Rectangle((-135, 700), 30, 600, color='green', alpha=0.5),\n    plt.Rectangle((-100, 700), 30, 600, color='red', alpha=0.5),\n    plt.Rectangle((-50, 700), 30, 600, color='green', alpha=0.5),\n    plt.Rectangle((-25, 700), 30, 600, color='red', alpha=0.5),\n    plt.Rectangle((-10, 700), 30, 600, color='green', alpha=0.5),\n    plt.Rectangle((0, 700), 30, 600, color='red', alpha=0.5),\n    plt.Rectangle((25, 700), 30, 600, color='green', alpha=0.5),\n    plt.Rectangle((50, 700), 30, 600, color='red', alpha=0.5),\n    plt.Rectangle((75, 700), 30, 600, color='green', alpha=0.5),\n    plt.Rectangle((100, 700), 30, 600, color='red', alpha=0.5),\n    plt.Rectangle((125, 700), 30, 600, color='green', alpha=0.5),\n    plt.Rectangle((150, 700), 30, 600, color='red', alpha=0.5)\n]\n\nfor rect in rectangles:\n    ax.add_patch(rect)\n\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_24.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Define the data for the plot\nx = np.linspace(-1, 1, 100)\ny = np.linspace(-1, 1, 100)\nX, Y = np.meshgrid(x, y)\nZ = np.sin(np.sqrt(X**2 + Y**2))\n\n# Plot the data\ncax = ax.contourf(X, Y, Z, cmap='coolwarm')\n\n# Add a colorbar\nfig.colorbar(cax)\n\n# Set the title\nax.set_title('tripcolor of Delaunay triangulation, flat shading')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_25.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('NonUniformImage class')\n\n# Create a grid of images\nimages = [\n    np.random.rand(10, 10),\n    np.random.rand(10, 10),\n    np.random.rand(10, 10)\n]\n\n# Display the images\nfor i, img in enumerate(images):\n    ax.imshow(img, extent=[-4, 4, -4, 4], origin='lower', cmap='viridis')\n\n# Set the x-axis and y-axis limits\nax.set_xlim(-4, 4)\nax.set_ylim(-4, 4)\n\n# Set the x-axis and y-axis ticks\nax.set_xticks([-4, -3, -2, -1, 0, 1, 2, 3, 4])\nax.set_yticks([-4, -3, -2, -1, 0, 1, 2, 3, 4])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the first graph\nx1 = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\ny1 = [100, 200, 300, 400, 500, 600, 500, 400, 300, 200]\n\n# Data for the second graph\nx2 = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\ny2 = [150, 250, 350, 450, 550, 650, 550, 450, 350, 250]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 4))\n\n# Plot the data\nax.plot(x1, y1, 'ro-')\nax.plot(x2, y2, 'bo-')\n\n# Set the title and labels\nax.set_title('Flickr30k')\nax.set_xlabel('Number of bits')\nax.set_ylabel('Recall sum')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Denser Points with Perfectly Circular Error Ellipses')\n\n# Set the x-axis label\nax.set_xlabel('x(m)')\n\n# Set the y-axis label\nax.set_ylabel('y(m)')\n\n# Set the x-axis limits\nax.set_xlim(0, 25)\n\n# Set the y-axis limits\nax.set_ylim(0, 30)\n\n# Draw a red line\nax.plot([0, 25], [0, 30], 'r-')\n\n# Draw a blue circle\ncircle1 = plt.Circle((5, 5), 1, color='blue')\nax.add_artist(circle1)\n\n# Draw a blue circle\ncircle2 = plt.Circle((10, 10), 1, color='blue')\nax.add_artist(circle2)\n\n# Draw a blue circle\ncircle3 = plt.Circle((15, 15), 1, color='blue')\nax.add_artist(circle3)\n\n# Draw a blue circle\ncircle4 = plt.Circle((20, 20), 1, color='blue')\nax.add_artist(circle4)\n\n# Draw a blue circle\ncircle5 = plt.Circle((25, 25), 1, color='blue')\nax.add_artist(circle5)\n\n# Draw a red rectangle\nrectangle = plt.Rectangle((0, 0), 5, 5, color='red', fill=False)\nax.add_artist(rectangle)\n\n# Draw a red rectangle\nrectangle = plt.Rectangle((5, 5), 5, 5, color='red', fill=False)\nax.add_artist(rectangle)\n\n# Draw a red rectangle\nrectangle = plt.Rectangle((10, 10), 5, 5, color='red', fill=False)\nax.add_artist(rectangle)\n\n# Draw a red rectangle\nrectangle = plt.Rectangle((15, 15), 5, 5, color='red', fill=False)\nax.add_artist(rectangle)\n\n# Draw a red rectangle\nrectangle = plt.Rectangle((20, 20), 5, 5, color='red', fill=False)\nax.add_artist(rectangle)\n\n# Draw a red rectangle\nrectangle = plt.Rectangle((25, 25), 5, 5, color='red', fill=False)\nax.add_artist(rectangle)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Draw a circle with blue dots\ncircle = plt.Circle((0.5, 0.5), 0.4, color='blue', fill=False)\nax.add_artist(circle)\n\n# Draw a rectangle with blue dots\nrectangle = plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='blue', fill=False)\nax.add_artist(rectangle)\n\n# Draw a triangle with blue dots\ntriangle = plt.Polygon([[0.3, 0.7], [0.7, 0.7], [0.5, 0.3]], color='blue', fill=False)\nax.add_artist(triangle)\n\n# Set the aspect ratio to 'equal' to ensure the shapes are not distorted\nax.set_aspect('equal')\n\n# Set the limits of the plot\nax.set_xlim(0, 1)\nax.set_ylim(0, 1)\n\n# Remove the axes\nax.axis('off')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 7.0))\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.1, 0.1), 0.2, 0.2, color='red'))\n\n# Set the color of the line\nax.plot([0.1, 0.3], [0.1, 0.3], 'g-')\n\n# Set the color of the grid\nax.grid(color='blue', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('yellow')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='green')\n\n# Set the color of the title\nax.set_title('My Plot', color='purple')\n\n# Set the color of the x-axis label\nax.set_xlabel('Alpha', color='orange')\n\n# Set the color of the y-axis label\nax.set_ylabel('Beta', color='cyan')\n\n# Set the color of the z-axis label\nax.set_zlabel('Delta t', color='magenta')\n\n# Set the color of the colorbar\ncbar = fig.colorbar(ax.images[0])\ncbar.ax.set_yticklabels(['0.0000', '0.0005', '0.0010'], color='brown')\n\n# Set the color of the plot\nax.imshow([[0.1, 0.2], [0.3, 0.4]], cmap='hot')\n\n# Set the color of the text\nax.text(0.5, 0.5, 'Hello World', color='black')\n\n# Set the color of the legend\nax.legend(['Line 1', 'Line 2'], loc='upper right', shadow=True, fancybox=True, facecolor='white', edgecolor='black')\n\n# Set the color of the annotation\nax.annotate('Annotation', xy=(0.2, 0.2), xytext=(0.5, 0.5),\n            arrowprops=dict(facecolor='black', shrink=0.05))\n\n# Set the color of the subplot\nax2 = fig.add_subplot(122)\nax2.imshow([[0.1, 0.2], [0.3, 0.4]], cmap='coolwarm')\n\n# Set the color of the subplot title\nax2.set_title('Subplot Title', color='pink')\n\n# Set the color of the subplot x-axis label\nax2.set_xlabel('X-axis Label', color='lime')\n\n# Set the color of the subplot y-axis label\nax2.set_ylabel('Y-axis Label', color='navy')\n\n# Set the color of the subplot z-axis label\nax2.set_zlabel('Z-axis Label', color='olive')\n\n# Set the color of the subplot colorbar\ncbar2 = fig.colorbar(ax2.images[0])\ncbar2.ax.set_yticklabels(['0.0000', '0.0005', '0.0010'], color='silver')\n\n# Set the color of the subplot plot\nax2.imshow([[0.1, 0.2], [0.3, 0.4]], cmap='spring')\n\n# Set the color of the subplot text\nax2.text(0.5, 0.5, 'Hello World', color='black')\n\n# Set the color of the subplot legend\nax2.legend(['Line 1', 'Line 2'], loc='upper right', shadow=True, fancybox=True, facecolor='white', edgecolor='black')\n\n# Set the color of the subplot annotation\nax2.annotate('Annotation', xy=(0.2, 0.2), xytext=(0.5, 0.5),\n             arrowprops=dict(facecolor='black', shrink=0.05))\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis for the first plot\nfig, ax = plt.subplots(figsize=(8.0, 4.0))\n\n# Define the data for the first plot\nx = np.linspace(0, 100, 100)\ny = np.sin(x / 20)\n\n# Plot the data\nax.plot(x, y, 'b-')\nax.plot(x, -y, 'g-')\n\n# Add labels and title\nax.set_xlabel('Users (U)')\nax.set_ylabel('Utility (f)')\nax.set_title('Utility distribution per topic')\n\n# Create a second subplot for the second plot\nax2 = fig.add_subplot(1, 2, 2)\n\n# Define the data for the second plot\nitems = ['L', 'CL', 'C', 'CR', 'R']\nusers = ['U1', 'U2', 'U3', 'U4', 'U5']\n\n# Create a grid of points for the second plot\ngrid = np.meshgrid(items, users)\n\n# Plot the data\nax2.scatter(grid[0], grid[1], c='r')\n\n# Add labels and title\nax2.set_xlabel('Items (M)')\nax2.set_ylabel('Users (U)')\nax2.set_title('User preference matrix (M)')\n\n# Show the plots\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 4))\n\n# Set the background color of the plot\nax.set_facecolor('lightblue')\n\n# Set the title of the plot\nax.set_title('Reactive-2 Payoff')\n\n# Set the x-axis label\nax.set_xlabel('Reactive-2 payoff')\n\n# Set the y-axis label\nax.set_ylabel('Memory-2 payoffs')\n\n# Set the x-axis limits\nax.set_xlim(-2, 4)\n\n# Set the y-axis limits\nax.set_ylim(-2, 4)\n\n# Create a rectangle for the payoff matrix\nrect = plt.Rectangle((0, 0), 1, 1, color='red')\nax.add_patch(rect)\n\n# Create a scatter plot for the payoff matrix\nscatter = ax.scatter([0, 1], [0, 1], c='blue', s=100)\nax.add_collection(scatter)\n\n# Create a line plot for the payoff matrix\nline = ax.plot([0, 1], [0, 1], 'b-')\nax.add_collection(line)\n\n# Create a text box for the payoff matrix\ntext = ax.text(0.5, 0.5, 'num. of points = 3', ha='center', va='center', fontsize=12)\nax.add_artist(text)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/HR_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 4))\n\n# Create a rectangle for the car model\ncar_model = plt.Rectangle((0.25, 0.25), 0.5, 0.5, color='blue')\nax.add_patch(car_model)\n\n# Create a rectangle for the car model's price\nprice = plt.Rectangle((0.25, 0.75), 0.5, 0.2, color='red')\nax.add_patch(price)\n\n# Create a rectangle for the car model's rating\nrating = plt.Rectangle((0.25, 0.5), 0.5, 0.2, color='green')\nax.add_patch(rating)\n\n# Set the limits of the plot\nax.set_xlim(0, 1)\nax.set_ylim(0, 1)\n\n# Set the title of the plot\nax.set_title('Model = Vicuna')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/PIP_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Set the background color of the plot\nax.set_facecolor('pink')\n\n# Draw a rectangle with a green border\nrectangle = plt.Rectangle((0, 0), 10, 10, color='green', edgecolor='black')\nax.add_patch(rectangle)\n\n# Draw a line graph with blue points\nx = [0, 1, 2, 3, 4, 5]\ny = [0, 1, 4, 9, 16, 25]\nax.plot(x, y, 'bo-')\n\n# Draw a scatter plot with red points\nx = [0, 1, 2, 3, 4, 5]\ny = [0, 1, 4, 9, 16, 25]\nax.scatter(x, y, color='red')\n\n# Draw a histogram with green bars\nx = [0, 1, 2, 3, 4, 5]\ny = [0, 1, 4, 9, 16, 25]\nax.bar(x, y, color='green')\n\n# Draw a pie chart with orange slices\nx = [0, 1, 2, 3, 4, 5]\ny = [0, 1, 4, 9, 16, 25]\nax.pie(y, colors=['orange'])\n\n# Draw a bar chart with blue bars\nx = [0, 1, 2, 3, 4, 5]\ny = [0, 1, 4, 9, 16, 25]\nax.barh(x, y, color='blue')\n\n# Draw a stem plot with green lines\nx = [0, 1, 2, 3, 4, 5]\ny = [0, 1, 4, 9, 16, 25]\nax.stem(x, y, linefmt='g-', markerfmt='go')\n\n# Draw a step plot with red steps\nx = [0, 1, 2, 3, 4, 5]\ny = [0, 1, 4, 9, 16, 25]\nax.step(x, y, where='post', color='red')\n\n# Draw a violin plot with green violins\nx = [0, 1, 2, 3, 4, 5]\ny = [0, 1, 4, 9, 16, 25]\nax.violinplot(y, showmeans=True, showmedians=True, showextrema=True, color='green')\n\n# Draw a box plot with blue boxes\nx = [0, 1, 2, 3, 4, 5]\ny = [0, 1, 4, 9, 16, 25]\nax.boxplot(y, vert=False, patch_artist=True, boxprops=dict(facecolor='blue'))\n\n# Draw a heatmap with green cells\nx = [0, 1, 2, 3, 4, 5]\ny = [0, 1, 4, 9, 16, 25]\nax.imshow(y, cmap='Greens')\n\n# Draw a contour plot with green contours\nx = [0, 1, 2, 3, 4, 5]\ny = [0, 1, 4, 9, 16, 25]\nz = [0, 1, 4, 9, 16, 25]\nax.contourf(x, y, z, cmap='Greens')\n\n# Draw a quiver plot with green arrows\nx = [0, 1, 2, 3, 4, 5]\ny = [0, 1, 4, 9, 16, 25]\nu = [0, 1, 4, 9, 16, 25]\nv = [0, 1, 4, 9, 16, 25]\nax.quiver(x, y, u, v, color='green')\n\n# Draw a streamplot with green streamlines\nx = [0, 1, 2, 3, 4, 5]\ny = [0, 1, 4, 9, 16, 25]\nu = [0, 1, 4, 9, 16, 25]\nv = [0, 1, 4, 9, 16, 25]\nax.streamplot(x, y, u, v, color='green')\n\n# Draw a polar plot with green lines\ntheta = [0, 1, 2, 3, 4, 5]\nr = [0, 1, 4, 9, 16, 25]\nax.plot(theta, r, color='green')\n\n# Draw a 3D scatter plot with green points\nfrom mpl_toolkits.mplot3d import Axes3D\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nx = [0, 1, 2, 3, 4, 5]\ny = [0, 1, 4, 9, 16, 25]\nz = [0, 1, 4, 9, 16, 25]\nax.scatter(x, y, z, color='green')\n\n# Draw a 3D surface plot with green surface\nfrom mpl_toolkits.mplot3d import Axes3D\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nx = [0, 1, 2, 3, 4, 5]\ny = [0, 1, 4, 9, 16, 25]\nz = [0, 1, 4, 9, 16, 25]\nax.plot_surface(x, y, z, color='green')\n\n# Draw a 3D wireframe plot with green lines\nfrom mpl_toolkits.mplot3d import Axes3D\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nx = [0, 1, 2, 3, 4, 5]\ny = [0, 1, 4, 9, 16, 25]\nz = [0, 1, 4, 9, 16, 25]\nax.plot_wireframe(x, y, z, color='green')\n\n# Draw a 3D contour plot with green contours\nfrom mpl_toolkits.mplot3d import Axes3D\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nx = [0, 1, 2, 3, 4, 5]\ny = [0, 1, 4, 9, 16, 25]\nz = [0, 1, 4, 9, 16, 25]\nax.contourf(x, y, z, cmap='Greens')\n\n# Draw a 3D bar plot with green bars\nfrom mpl_toolkits.mplot3d import Axes3D\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nx = [0, 1, 2, 3, 4, 5]\ny = [0, 1, 4, 9, 16, 25]\nz = [0, 1, 4, 9, 16, 25]\nax.bar3d(x, y, z, color='green')\n\n# Draw a 3D scatter plot with green points\nfrom mpl_toolkits.mplot3d import Axes3D\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nx = [0, 1, 2, 3, 4, 5]\ny = [0, 1, 4, 9, 16, 25]\nz = [0, 1, 4, 9, 16, 25]\nax.scatter(x, y, z, color='green')\n\n# Draw a 3D surface plot with green surface\nfrom mpl_toolkits.mplot3d import Axes3D\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nx = [0, 1, 2, 3, 4, 5]\ny = [0, 1, 4, 9, 16, 25]\nz = [0, 1, 4, 9, 16, 25]\nax.plot_surface(x, y, z, color='green')\n\n# Draw a 3D wireframe plot with green lines\nfrom mpl_toolkits.mplot3d import Axes3D\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nx = [0, 1, 2, 3, 4, 5]\ny = [0, 1, 4, 9, 16, 25]\nz = [0, 1, 4, 9, 16, 25]\nax.plot_wireframe(x, y, z, color='green')\n\n# Draw a 3D contour plot with green contours\nfrom mpl_toolkits.mplot3d import Axes3D\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nx = [0, 1, 2, 3, 4, 5]\ny = [0, 1, 4, 9, 16, 25]\nz = [0, 1, 4, 9, 16, 25]\nax.contourf(x, y, z, cmap='Greens')\n\n# Draw a 3D bar plot with green bars\nfrom mpl_toolkits.mplot3d import Axes3D\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nx = [0, 1, 2, 3, 4, 5]\ny = [0, 1, 4, 9, 16, 25]\nz = [0, 1, 4, 9, 16, 25]\nax.bar3d(x, y, z, color='green')\n\n# Draw a 3D scatter plot with green points\nfrom mpl_toolkits.mplot3d import Axes3D\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nx = [0, 1, 2, 3, 4, 5]\ny = [0, 1, 4, 9, 16, 25]\nz = [0, 1, 4, 9, 16, 25]\nax.scatter(x, y, z, color='green')\n\n# Draw a 3D surface plot with green surface\nfrom mpl_toolkits.mplot3d import Axes3D\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nx = [0, 1, 2, 3, 4, 5]\ny = [0, 1, 4, 9, 16, 25]\nz = [0, 1, 4, 9, 16, 25]\nax.plot_surface(x, y, z, color='green')\n\n# Draw a 3D wireframe plot with green lines\nfrom mpl_toolkits.mplot3d import Axes3D\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nx = [0, 1, 2, 3, 4, 5]\ny = [0, 1, 4, 9, 16, 25]\nz = [0, 1, 4, 9, 16, 25]\nax.plot_wireframe(x, y, z, color='green')\n\n# Draw a 3D contour plot with green contours\nfrom mpl_toolkits.mplot3d import Axes3D\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nx = [0, 1, 2, 3, 4, 5]\ny = [0, 1, 4, 9, 16, 25]\nz = [0, 1, 4, 9, 16, 25]\nax.contourf(x, y, z, cmap='Greens')\n\n# Draw a 3D bar plot with green bars\nfrom mpl_toolkits.mplot3d import Axes3D\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nx = [0, 1, 2, 3, 4, 5]\ny = [0, 1, 4, 9, 16, 25]\nz = [0, 1, 4, 9, 16, 25]\nax.bar3d(x, y, z, color='green')\n\n# Draw a 3D scatter plot with green points\nfrom mpl_toolkits.mplot3d import Axes3D\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nx = [0, 1, 2, 3, 4, 5]\ny = [0, 1, 4, 9, 16, 25]\nz = [0, 1, 4, 9, 16, 25]\nax.scatter(x, y, z, color='green')\n\n# Draw a 3D surface plot with green surface\nfrom mpl_toolkits.mplot3d import Axes3D\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nx = [0, 1, 2, 3, 4, 5]\ny = [0, 1, 4, 9, 16, 25]\nz = [0, 1, 4, 9, 16, 25]\nax.plot_surface(x, y, z, color='green')\n\n# Draw a 3D wireframe plot with green lines\nfrom mpl_toolkits.mplot3d import Axes3D\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nx = [0, 1, 2, 3, 4, 5]\ny = [0, 1, 4, 9, 16, 25]\nz = [0, 1, 4, 9, 16, 25]\nax.plot_wireframe(x, y, z, color='green')\n\n# Draw a 3D contour plot with green contours\nfrom mpl_toolkits.mplot3d import Axes3D\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nx = [0, 1, 2, 3, 4, 5]\ny = [0, 1, 4, 9, 16, 25]\nz = [0, 1, 4, 9, 16, 25]\nax.contourf(x, y, z, cmap='Greens')\n\n# Draw a 3D bar plot with green bars\nfrom mpl_toolkits.mplot3d import Axes3D\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nx = [0, 1, 2, 3, 4, 5]\ny = [0, 1, 4, 9, 16, 25]\nz = [0, 1, 4, 9, 16, 25]\nax.bar3d(x, y, z, color='green')\n\n# Draw a 3D scatter plot with green points\nfrom mpl_toolkits.mplot3d import Axes3D\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nx = [0, 1, 2, 3, 4, 5]\ny = [0, 1, 4, 9, 16, 25]\nz = [0, 1, 4, 9, 16, 25]\nax.scatter(x, y, z, color='green')\n\n# Draw a 3D surface plot with green surface\nfrom mpl_toolkits.mplot3d import Axes3D\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nx = [0, 1, 2, 3, 4, 5]\ny = [0, 1, 4, 9, 16, 25]\nz = [0, 1, 4, 9, 16, 25]\nax.plot_surface(x, y, z, color='green')\n\n# Draw a 3D wireframe plot with green lines\nfrom mpl_toolkits.mplot3d import Axes3D\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nx = [0, 1, 2, 3, 4, 5]\ny = [0, 1, 4, 9, 16, 25]\nz = [0, 1, 4, 9, 16, 25]\nax.plot_wireframe(x, y, z, color='green')\n\n# Draw a 3D contour plot with green contours\nfrom mpl_toolkits.mplot3d import Axes3D\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nx = [0, 1, 2, 3, 4, 5]\ny = [0, 1, 4, 9, 16, 25]\nz = [0, 1, 4, 9, 16, 25]\nax.contourf(x, y, z, cmap='Greens')\n\n# Draw a 3D bar plot with green bars\nfrom mpl_toolkits.mplot3d import Axes3D\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nx ="}
{"file": "dataset/ori_500/PIP_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Exponential Scale')\n\n# Set the x-axis label\nax.set_xlabel('Gradient Steps (x 62.5K)')\n\n# Set the y-axis label\nax.set_ylabel('Exponential Scale')\n\n# Create a rectangle for the legend\nrect = plt.Rectangle((0, 0), 1, 1, fc='w', ec='k')\nax.add_patch(rect)\n\n# Add text to the legend\nax.text(0.5, 0.5, 'Line 3 (Random Noise)', ha='center', va='center', color='green')\nax.text(0.5, 0.4, 'Line 4 (Exponential Focus)', ha='center', va='center', color='red')\n\n# Create a line plot for Line 3\nx = np.linspace(0, 100, 100)\ny = np.random.normal(3, 1, 100)\nax.plot(x, y, 'g-')\n\n# Create a line plot for Line 4\nx = np.linspace(0, 100, 100)\ny = np.random.exponential(1, 100)\nax.plot(x, y, 'r-')\n\n# Create a shaded region for Line 3\nx = np.linspace(0, 100, 100)\ny = np.random.normal(3, 1, 100)\nax.fill_between(x, y, 0, where=y > 0, color='lightgreen')\n\n# Create a shaded region for Line 4\nx = np.linspace(0, 100, 100)\ny = np.random.exponential(1, 100)\nax.fill_between(x, y, 0, where=y > 0, color='lightcoral')\n\n# Create a scatter plot for Line 3\nx = np.linspace(0, 100, 100)\ny = np.random.normal(3, 1, 100)\nax.scatter(x, y, color='green')\n\n# Create a scatter plot for Line 4\nx = np.linspace(0, 100, 100)\ny = np.random.exponential(1, 100)\nax.scatter(x, y, color='red')\n\n# Set the limits of the x-axis\nax.set_xlim(0, 100)\n\n# Set the limits of the y-axis\nax.set_ylim(0, 7)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/PIP_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nx = [0.35, 0.4, 0.45, 0.5, 0.55, 0.6, 0.65, 0.7, 0.8, 0.9]\ny = [200, 150, 100, 50, 25, 10, 5, 2, 1, 0.5]\n\n# Plot\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\nax.plot(x, y, 'b-')\nax.set_xlabel('Maximum Predicted Probability')\nax.set_ylabel('Number of Examples')\nax.set_title('Training Progression')\nax.grid(True)\nplt.show()\n```"}
{"file": "dataset/ori_500/PIP_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Bias Score by Data Type and Model')\n\n# Set the x-axis label\nax.set_xlabel('Data Type')\n\n# Set the y-axis label\nax.set_ylabel('Bias Score')\n\n# Define the data points\nx = ['INT8', 'INT8', 'INT4', 'INT4']\ny = [9.2, 9.3, 9.1, 9.0]\ncolor = ['red', 'blue', 'green', 'yellow']\n\n# Plot the data points\nfor i in range(len(x)):\n    ax.plot([x[i], x[i]], [y[i], 9.5], color=color[i])\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0.5, 0.5), 0.5, 0.5, color='blue')\nax.add_patch(rect)\n\n# Add a text box to the plot\ntext_box = plt.Rectangle((0.5, 0.5), 0.5, 0.5, color='blue')\nax.add_patch(text_box)\n\n# Add a text box to the plot\ntext_box = plt.Rectangle((0.5, 0.5), 0.5, 0.5, color='blue')\nax.add_patch(text_box)\n\n# Add a text box to the plot\ntext_box = plt.Rectangle((0.5, 0.5), 0.5, 0.5, color='blue')\nax.add_patch(text_box)\n\n# Add a text box to the plot\ntext_box = plt.Rectangle((0.5, 0.5), 0.5, 0.5, color='blue')\nax.add_patch(text_box)\n\n# Add a text box to the plot\ntext_box = plt.Rectangle((0.5, 0.5), 0.5, 0.5, color='blue')\nax.add_patch(text_box)\n\n# Add a text box to the plot\ntext_box = plt.Rectangle((0.5, 0.5), 0.5, 0.5, color='blue')\nax.add_patch(text_box)\n\n# Add a text box to the plot\ntext_box = plt.Rectangle((0.5, 0.5), 0.5, 0.5, color='blue')\nax.add_patch(text_box)\n\n# Add a text box to the plot\ntext_box = plt.Rectangle((0.5, 0.5), 0.5, 0.5, color='blue')\nax.add_patch(text_box)\n\n# Add a text box to the plot\ntext_box = plt.Rectangle((0.5, 0.5), 0.5, 0.5, color='blue')\nax.add_patch(text_box)\n\n# Add a text box to the plot\ntext_box = plt.Rectangle((0.5, 0.5), 0.5, 0.5, color='blue')\nax.add_patch(text_box)\n\n# Add a text box to the plot\ntext_box = plt.Rectangle((0.5, 0.5), 0.5, 0.5, color='blue')\nax.add_patch(text_box)\n\n# Add a text box to the plot\ntext_box = plt.Rectangle((0.5, 0.5), 0.5, 0.5, color='blue')\nax.add_patch(text_box)\n\n# Add a text box to the plot\ntext_box = plt.Rectangle((0.5, 0.5), 0.5, 0.5, color='blue')\nax.add_patch(text_box)\n\n# Add a text box to the plot\ntext_box = plt.Rectangle((0.5, 0.5), 0.5, 0.5, color='blue')\nax.add_patch(text_box)\n\n# Add a text box to the plot\ntext_box = plt.Rectangle((0.5, 0.5), 0.5, 0.5, color='blue')\nax.add_patch(text_box)\n\n# Add a text box to the plot\ntext_box = plt.Rectangle((0.5, 0.5), 0.5, 0.5, color='blue')\nax.add_patch(text_box)\n\n# Add a text box to the plot\ntext_box = plt.Rectangle((0.5, 0.5), 0.5, 0.5, color='blue')\nax.add_patch(text_box)\n\n# Add a text box to the plot\ntext_box = plt.Rectangle((0.5, 0.5), 0.5, 0.5, color='blue')\nax.add_patch(text_box)\n\n# Add a text box to the plot\ntext_box = plt.Rectangle((0.5, 0.5), 0.5, 0.5, color='blue')\nax.add_patch(text_box)\n\n# Add a text box to the plot\ntext_box = plt.Rectangle((0.5, 0.5), 0.5, 0.5, color='blue')\nax.add_patch(text_box)\n\n# Add a text box to the plot\ntext_box = plt.Rectangle((0.5, 0.5), 0.5, 0.5, color='blue')\nax.add_patch(text_box)\n\n# Add a text box to the plot\ntext_box = plt.Rectangle((0.5, 0.5), 0.5, 0.5, color='blue')\nax.add_patch(text_box)\n\n# Add a text box to the plot\ntext_box = plt.Rectangle((0.5, 0.5), 0.5, 0.5, color='blue')\nax.add_patch(text_box)\n\n# Add a text box to the plot\ntext_box = plt.Rectangle((0.5, 0.5), 0.5, 0.5, color='blue')\nax.add_patch(text_box)\n\n# Add a text box to the plot\ntext_box = plt.Rectangle((0.5, 0.5), 0.5, 0.5, color='blue')\nax.add_patch(text_box)\n\n# Add a text box to the plot\ntext_box = plt.Rectangle((0.5, 0.5), 0.5, 0.5, color='blue')\nax.add_patch(text_box)\n\n# Add a text box to the plot\ntext_box = plt.Rectangle((0.5, 0.5), 0.5, 0.5, color='blue')\nax.add_patch(text_box)\n\n# Add a text box to the plot\ntext_box = plt.Rectangle((0.5, 0.5), 0.5, 0.5, color='blue')\nax.add_patch(text_box)\n\n# Add a text box to the plot\ntext_box = plt.Rectangle((0.5, 0.5), 0.5, 0.5, color='blue')\nax.add_patch(text_box)\n\n# Add a text box to the plot\ntext_box = plt.Rectangle((0.5, 0.5), 0.5, 0.5, color='blue')\nax.add_patch(text_box)\n\n# Add a text box to the plot\ntext_box = plt.Rectangle((0.5, 0.5), 0.5, 0.5, color='blue')\nax.add_patch(text_box)\n\n# Add a text box to the plot\ntext_box = plt.Rectangle((0.5, 0.5), 0.5, 0.5, color='blue')\nax.add_patch(text_box)\n\n# Add a text box to the plot\ntext_box = plt.Rectangle((0.5, 0.5), 0.5, 0.5, color='blue')\nax.add_patch(text_box)\n\n# Add a text box to the plot\ntext_box = plt.Rectangle((0.5, 0.5), 0.5, 0.5, color='blue')\nax.add_patch(text_box)\n\n# Add a text box to the plot\ntext_box = plt.Rectangle((0.5, 0.5), 0.5, 0.5, color='blue')\nax.add_patch(text_box)\n\n# Add a text box to the plot\ntext_box = plt.Rectangle((0.5, 0.5), 0.5, 0.5, color='blue')\nax.add_patch(text_box)\n\n# Add a text box to the plot\ntext_box = plt.Rectangle((0.5, 0.5), 0.5, 0.5, color='blue')\nax.add_patch(text_box)\n\n# Add a text box to the plot\ntext_box = plt.Rectangle((0.5, 0.5), 0.5, 0.5, color='blue')\nax.add_patch(text_box)\n\n# Add a text box to the plot\ntext_box = plt.Rectangle((0.5, 0.5), 0.5, 0.5, color='blue')\nax.add_patch(text_box)\n\n# Add a text box to the plot\ntext_box = plt.Rectangle((0.5, 0.5), 0.5, 0.5, color='blue')\nax.add_patch(text_box)\n\n# Add a text box to the plot\ntext_box = plt.Rectangle((0.5, 0.5), 0.5, 0.5, color='blue')\nax.add_patch(text_box)\n\n# Add a text box to the plot\ntext_box = plt.Rectangle((0.5, 0.5), 0.5, 0.5, color='blue')\nax.add_patch(text_box)\n\n# Add a text box to the plot\ntext_box = plt.Rectangle((0.5, 0.5), 0.5, 0.5, color='blue')\nax.add_patch(text_box)\n\n# Add a text box to the plot\ntext_box = plt.Rectangle((0.5, 0.5), 0.5, 0.5, color='blue')\nax.add_patch(text_box)\n\n# Add a text box to the plot\ntext_box = plt.Rectangle((0.5, 0.5), 0.5, 0.5, color='blue')\nax.add_patch(text_box)\n\n# Add a text box to the plot\ntext_box = plt.Rectangle((0.5, 0.5), 0.5, 0.5, color='blue')\nax.add_patch(text_box)\n\n# Add a text box to the plot\ntext_box = plt.Rectangle((0.5, 0.5), 0.5, 0.5, color='blue')\nax.add_patch(text_box)\n\n# Add a text box to the plot\ntext_box = plt.Rectangle((0.5, 0.5), 0.5, 0.5, color='blue')\nax.add_patch(text_box)\n\n# Add a text box to the plot\ntext_box = plt.Rectangle((0.5, 0.5), 0.5, 0.5, color='blue')\nax.add_patch(text_box)\n\n# Add a text box to the plot\ntext_box = plt.Rectangle((0.5, 0.5), 0.5, 0.5, color='blue')\nax.add_patch(text_box)\n\n# Add a text box to the plot\ntext_box = plt.Rectangle((0.5, 0.5), 0.5, 0.5, color='blue')\nax.add_patch(text_box)\n\n# Add a text box to the plot\ntext_box = plt.Rectangle((0.5, 0.5), 0.5, 0.5, color='blue')\nax.add_patch(text_box)\n\n# Add a text box to the plot\ntext_box = plt.Rectangle((0.5, 0.5), 0.5, 0.5, color='blue')\nax.add_patch(text_box)\n\n# Add a text box to the plot\ntext_box = plt.Rectangle((0.5, 0.5), 0.5, 0.5, color='blue')\nax.add_patch(text_box)\n\n# Add a text box to the plot\ntext_box = plt.Rectangle((0.5, 0.5), 0.5, 0.5, color='blue')\nax.add_patch(text_box)\n\n# Add a text box to the plot\ntext_box = plt.Rectangle((0.5, 0.5), 0.5, 0.5, color='blue')\nax.add_patch(text_box)\n\n# Add a text box to the plot\ntext_box = plt.Rectangle((0.5, 0.5), 0.5, 0.5, color='blue')\nax.add_patch(text_box)\n\n# Add a text box to the plot\ntext_box = plt.Rectangle((0.5, 0.5), 0.5, 0.5, color='blue')\nax.add_patch(text_box)\n\n# Add a text box to the plot\ntext_box = plt.Rectangle((0.5, 0.5), 0.5, 0.5, color='blue')\nax.add_patch(text_box)\n\n# Add a text box to the plot\ntext_box = plt.Rectangle((0.5, 0.5), 0.5, 0.5, color='blue')\nax.add_patch(text_box)\n\n# Add a text box to the plot\ntext_box = plt.Rectangle((0.5, 0.5), 0.5, 0.5, color='blue')\nax.add_patch(text_box)\n\n# Add a text box to the plot\ntext_box = plt.Rectangle((0.5, 0.5), 0.5, 0.5, color='blue')\nax.add_patch(text_box)\n\n# Add a text box to the plot\ntext_box = plt.Rectangle((0.5, 0.5), 0.5, 0.5, color='blue')\nax.add_patch(text_box)\n\n# Add a text box to the plot\ntext_box = plt.Rectangle((0.5, 0.5), 0.5, 0.5, color='blue')\nax.add_patch(text_box)\n\n# Add a text box to the plot\ntext_box = plt.Rectangle((0.5, 0.5), 0.5, 0.5, color='blue')\nax.add_patch(text_box)\n\n# Add a text box to the plot\ntext_box = plt.Rectangle((0.5, 0.5), 0.5, 0.5, color='blue')\nax.add_patch(text_box)\n\n# Add a text box to the plot\ntext_box = plt.Rectangle((0.5, 0.5), 0.5, 0.5, color='blue')\nax.add_patch(text_box)\n\n# Add a text box to the plot\ntext_box = plt.Rectangle((0.5, 0.5), 0.5, 0.5, color='blue')\nax.add_patch(text_box)\n\n# Add a text box to the plot\ntext_box = plt.Rectangle((0.5, 0.5), 0.5, 0.5, color='blue')\nax.add_patch(text_box)\n\n# Add a text box to the plot\ntext_box = plt.Rectangle((0.5, 0.5), 0.5, 0.5, color='blue')\nax.add_patch(text_box)\n\n# Add a text box to the plot\ntext_box = plt.Rectangle((0.5, 0.5), 0.5, 0.5, color='blue')\nax.add_patch(text_box)\n\n# Add a text box to the plot\ntext_box = plt.Rectangle((0.5, 0.5), 0.5, 0.5, color='blue')\nax.add_patch(text_box)\n\n# Add a text box to the plot\ntext_box = plt.Rectangle((0.5, 0.5), 0.5, 0.5, color='blue')\nax.add_patch(text_box)\n\n# Add a text box to the plot\ntext_box = plt.Rectangle((0.5, 0.5), 0.5, 0.5, color='blue')\nax.add_patch(text_box)\n\n# Add a text box to the plot\ntext_box = plt.Rectangle((0.5, 0.5), 0.5, 0.5, color='blue')\nax.add_patch(text_box)\n\n# Add a text box to the plot\ntext_box = plt.Rectangle((0.5, 0.5), 0.5, 0.5, color='blue')\nax.add_patch(text_box)\n\n# Add a text box to the plot\ntext_box = plt.Rectangle((0.5, 0.5), 0.5, 0.5, color='blue')\nax.add_patch(text_box)\n\n# Add a text box to the plot\ntext_box = plt.Rectangle((0.5, 0.5), 0.5, 0.5, color='blue')\nax.add_patch(text_box)\n\n# Add a text box to the plot\ntext_box = plt.Rectangle((0.5, 0.5), 0.5, 0.5, color='blue')\nax.add_patch(text_box)\n\n# Add a text box to the plot\ntext_box = plt.Rectangle((0.5, 0.5), 0.5, 0.5, color='blue')\nax.add_patch(text_box)\n\n# Add a text box to the plot\ntext_box = plt.Rectangle((0.5, 0.5), 0.5, 0.5, color='blue')\nax.add_patch(text_box)\n\n# Add a text box to the plot\ntext_box = plt.Rectangle((0.5, 0.5), 0.5, 0.5, color='blue')\nax.add_patch(text_box)\n\n# Add a text box to the plot\ntext_box = plt.Rectangle((0.5, 0.5), 0.5, 0.5, color='blue')\nax.add_patch(text_box)\n\n# Add a text box to the plot\ntext_box = plt.Rectangle((0.5, 0.5), 0.5, 0.5, color='blue')\nax.add_patch(text_box)\n\n# Add a text box to the plot\ntext_box = plt.Rectangle((0.5, 0.5), 0.5, 0.5, color='blue')\nax.add_patch(text_box)\n\n# Add a text box to the plot\ntext_box = plt.Rectangle((0.5, 0.5), 0.5, 0.5, color='blue')\nax.add_patch(text_box)\n\n# Add a text box to the plot\ntext_box = plt.Rectangle((0.5, 0.5), 0.5, 0.5, color='blue')\nax.add_patch(text_box)\n\n# Add a text box to the plot\ntext_box = plt.Rectangle((0.5, 0.5), 0.5, 0.5, color='blue')\nax.add_patch(text_box)\n\n# Add a text box"}
{"file": "dataset/ori_500/PIP_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Set the background color of the plot\nax.set_facecolor('white')\n\n# Set the title of the plot\nax.set_title('Predicted Probability Distribution')\n\n# Set the x-axis label\nax.set_xlabel('Maximum Predicted Probability')\n\n# Set the y-axis label\nax.set_ylabel('Number of Examples')\n\n# Set the x-axis limits\nax.set_xlim(0, 0.6)\n\n# Set the y-axis limits\nax.set_ylim(0, 1500)\n\n# Draw a rectangle with a specific color\nrect = plt.Rectangle((0.25, 0), 0.3, 1000, color='orange', alpha=0.5)\nax.add_patch(rect)\n\n# Draw a rectangle with a specific color\nrect = plt.Rectangle((0.3, 0), 0.1, 800, color='orange', alpha=0.5)\nax.add_patch(rect)\n\n# Draw a rectangle with a specific color\nrect = plt.Rectangle((0.4, 0), 0.1, 600, color='orange', alpha=0.5)\nax.add_patch(rect)\n\n# Draw a rectangle with a specific color\nrect = plt.Rectangle((0.45, 0), 0.05, 400, color='orange', alpha=0.5)\nax.add_patch(rect)\n\n# Draw a rectangle with a specific color\nrect = plt.Rectangle((0.5, 0), 0.05, 200, color='orange', alpha=0.5)\nax.add_patch(rect)\n\n# Draw a rectangle with a specific color\nrect = plt.Rectangle((0.55, 0), 0.05, 100, color='orange', alpha=0.5)\nax.add_patch(rect)\n\n# Draw a rectangle with a specific color\nrect = plt.Rectangle((0.6, 0), 0.05, 50, color='orange', alpha=0.5)\nax.add_patch(rect)\n\n# Draw a rectangle with a specific color\nrect = plt.Rectangle((0.25, 0), 0.3, 1000, color='blue', alpha=0.5)\nax.add_patch(rect)\n\n# Draw a rectangle with a specific color\nrect = plt.Rectangle((0.3, 0), 0.1, 800, color='blue', alpha=0.5)\nax.add_patch(rect)\n\n# Draw a rectangle with a specific color\nrect = plt.Rectangle((0.4, 0), 0.1, 600, color='blue', alpha=0.5)\nax.add_patch(rect)\n\n# Draw a rectangle with a specific color\nrect = plt.Rectangle((0.45, 0), 0.05, 400, color='blue', alpha=0.5)\nax.add_patch(rect)\n\n# Draw a rectangle with a specific color\nrect = plt.Rectangle((0.5, 0), 0.05, 200, color='blue', alpha=0.5)\nax.add_patch(rect)\n\n# Draw a rectangle with a specific color\nrect = plt.Rectangle((0.55, 0), 0.05, 100, color='blue', alpha=0.5)\nax.add_patch(rect)\n\n# Draw a rectangle with a specific color\nrect = plt.Rectangle((0.6, 0), 0.05, 50, color='blue', alpha=0.5)\nax.add_patch(rect)\n\n# Draw a rectangle with a specific color\nrect = plt.Rectangle((0.25, 0), 0.3, 1000, color='green', alpha=0.5)\nax.add_patch(rect)\n\n# Draw a rectangle with a specific color\nrect = plt.Rectangle((0.3, 0), 0.1, 800, color='green', alpha=0.5)\nax.add_patch(rect)\n\n# Draw a rectangle with a specific color\nrect = plt.Rectangle((0.4, 0), 0.1, 600, color='green', alpha=0.5)\nax.add_patch(rect)\n\n# Draw a rectangle with a specific color\nrect = plt.Rectangle((0.45, 0), 0.05, 400, color='green', alpha=0.5)\nax.add_patch(rect)\n\n# Draw a rectangle with a specific color\nrect = plt.Rectangle((0.5, 0), 0.05, 200, color='green', alpha=0.5)\nax.add_patch(rect)\n\n# Draw a rectangle with a specific color\nrect = plt.Rectangle((0.55, 0), 0.05, 100, color='green', alpha=0.5)\nax.add_patch(rect)\n\n# Draw a rectangle with a specific color\nrect = plt.Rectangle((0.6, 0), 0.05, 50, color='green', alpha=0.5)\nax.add_patch(rect)\n\n# Draw a rectangle with a specific color\nrect = plt.Rectangle((0.25, 0), 0.3, 1000, color='red', alpha=0.5)\nax.add_patch(rect)\n\n# Draw a rectangle with a specific color\nrect = plt.Rectangle((0.3, 0), 0.1, 800, color='red', alpha=0.5)\nax.add_patch(rect)\n\n# Draw a rectangle with a specific color\nrect = plt.Rectangle((0.4, 0), 0.1, 600, color='red', alpha=0.5)\nax.add_patch(rect)\n\n# Draw a rectangle with a specific color\nrect = plt.Rectangle((0.45, 0), 0.05, 400, color='red', alpha=0.5)\nax.add_patch(rect)\n\n# Draw a rectangle with a specific color\nrect = plt.Rectangle((0.5, 0), 0.05, 200, color='red', alpha=0.5)\nax.add_patch(rect)\n\n# Draw a rectangle with a specific color\nrect = plt.Rectangle((0.55, 0), 0.05, 100, color='red', alpha=0.5)\nax.add_patch(rect)\n\n# Draw a rectangle with a specific color\nrect = plt.Rectangle((0.6, 0), 0.05, 50, color='red', alpha=0.5)\nax.add_patch(rect)\n\n# Draw a rectangle with a specific color\nrect = plt.Rectangle((0.25, 0), 0.3, 1000, color='yellow', alpha=0.5)\nax.add_patch(rect)\n\n# Draw a rectangle with a specific color\nrect = plt.Rectangle((0.3, 0), 0.1, 800, color='yellow', alpha=0.5)\nax.add_patch(rect)\n\n# Draw a rectangle with a specific color\nrect = plt.Rectangle((0.4, 0), 0.1, 600, color='yellow', alpha=0.5)\nax.add_patch(rect)\n\n# Draw a rectangle with a specific color\nrect = plt.Rectangle((0.45, 0), 0.05, 400, color='yellow', alpha=0.5)\nax.add_patch(rect)\n\n# Draw a rectangle with a specific color\nrect = plt.Rectangle((0.5, 0), 0.05, 200, color='yellow', alpha=0.5)\nax.add_patch(rect)\n\n# Draw a rectangle with a specific color\nrect = plt.Rectangle((0.55, 0), 0.05, 100, color='yellow', alpha=0.5)\nax.add_patch(rect)\n\n# Draw a rectangle with a specific color\nrect = plt.Rectangle((0.6, 0), 0.05, 50, color='yellow', alpha=0.5)\nax.add_patch(rect)\n\n# Draw a rectangle with a specific color\nrect = plt.Rectangle((0.25, 0), 0.3, 1000, color='cyan', alpha=0.5)\nax.add_patch(rect)\n\n# Draw a rectangle with a specific color\nrect = plt.Rectangle((0.3, 0), 0.1, 800, color='cyan', alpha=0.5)\nax.add_patch(rect)\n\n# Draw a rectangle with a specific color\nrect = plt.Rectangle((0.4, 0), 0.1, 600, color='cyan', alpha=0.5)\nax.add_patch(rect)\n\n# Draw a rectangle with a specific color\nrect = plt.Rectangle((0.45, 0), 0.05, 400, color='cyan', alpha=0.5)\nax.add_patch(rect)\n\n# Draw a rectangle with a specific color\nrect = plt.Rectangle((0.5, 0), 0.05, 200, color='cyan', alpha=0.5)\nax.add_patch(rect)\n\n# Draw a rectangle with a specific color\nrect = plt.Rectangle((0.55, 0), 0.05, 100, color='cyan', alpha=0.5)\nax.add_patch(rect)\n\n# Draw a rectangle with a specific color\nrect = plt.Rectangle((0.6, 0), 0.05, 50, color='cyan', alpha=0.5)\nax.add_patch(rect)\n\n# Draw a rectangle with a specific color\nrect = plt.Rectangle((0.25, 0), 0.3, 1000, color='magenta', alpha=0.5)\nax.add_patch(rect)\n\n# Draw a rectangle with a specific color\nrect = plt.Rectangle((0.3, 0), 0.1, 800, color='magenta', alpha=0.5)\nax.add_patch(rect)\n\n# Draw a rectangle with a specific color\nrect = plt.Rectangle((0.4, 0), 0.1, 600, color='magenta', alpha=0.5)\nax.add_patch(rect)\n\n# Draw a rectangle with a specific color\nrect = plt.Rectangle((0.45, 0), 0.05, 400, color='magenta', alpha=0.5)\nax.add_patch(rect)\n\n# Draw a rectangle with a specific color\nrect = plt.Rectangle((0.5, 0), 0.05, 200, color='magenta', alpha=0.5)\nax.add_patch(rect)\n\n# Draw a rectangle with a specific color\nrect = plt.Rectangle((0.55, 0), 0.05, 100, color='magenta', alpha=0.5)\nax.add_patch(rect)\n\n# Draw a rectangle with a specific color\nrect = plt.Rectangle((0.6, 0), 0.05, 50, color='magenta', alpha=0.5)\nax.add_patch(rect)\n\n# Draw a rectangle with a specific color\nrect = plt.Rectangle((0.25, 0), 0.3, 1000, color='black', alpha=0.5)\nax.add_patch(rect)\n\n# Draw a rectangle with a specific color\nrect = plt.Rectangle((0.3, 0), 0.1, 800, color='black', alpha=0.5)\nax.add_patch(rect)\n\n# Draw a rectangle with a specific color\nrect = plt.Rectangle((0.4, 0), 0.1, 600, color='black', alpha=0.5)\nax.add_patch(rect)\n\n# Draw a rectangle with a specific color\nrect = plt.Rectangle((0.45, 0), 0.05, 400, color='black', alpha=0.5)\nax.add_patch(rect)\n\n# Draw a rectangle with a specific color\nrect = plt.Rectangle((0.5, 0), 0.05, 200, color='black', alpha=0.5)\nax.add_patch(rect)\n\n# Draw a rectangle with a specific color\nrect = plt.Rectangle((0.55, 0), 0.05, 100, color='black', alpha=0.5)\nax.add_patch(rect)\n\n# Draw a rectangle with a specific color\nrect = plt.Rectangle((0.6, 0), 0.05, 50, color='black', alpha=0.5)\nax.add_patch(rect)\n\n# Draw a rectangle with a specific color\nrect = plt.Rectangle((0.25, 0), 0.3, 1000, color='white', alpha=0.5)\nax.add_patch(rect)\n\n# Draw a rectangle with a specific color\nrect = plt.Rectangle((0.3, 0), 0.1, 800, color='white', alpha=0.5)\nax.add_patch(rect)\n\n# Draw a rectangle with a specific color\nrect = plt.Rectangle((0.4, 0), 0.1, 600, color='white', alpha=0.5)\nax.add_patch(rect)\n\n# Draw a rectangle with a specific color\nrect = plt.Rectangle((0.45, 0), 0.05, 400, color='white', alpha=0.5)\nax.add_patch(rect)\n\n# Draw a rectangle with a specific color\nrect = plt.Rectangle((0.5, 0), 0.05, 200, color='white', alpha=0.5)\nax.add_patch(rect)\n\n# Draw a rectangle with a specific color\nrect = plt.Rectangle((0.55, 0), 0.05, 100, color='white', alpha=0.5)\nax.add_patch(rect)\n\n# Draw a rectangle with a specific color\nrect = plt.Rectangle((0.6, 0), 0.05, 50, color='white', alpha=0.5)\nax.add_patch(rect)\n\n# Draw a rectangle with a specific color\nrect = plt.Rectangle((0.25, 0), 0.3, 1000, color='gray', alpha=0.5)\nax.add_patch(rect)\n\n# Draw a rectangle with a specific color\nrect = plt.Rectangle((0.3, 0), 0.1, 800, color='gray', alpha=0.5)\nax.add_patch(rect)\n\n# Draw a rectangle with a specific color\nrect = plt.Rectangle((0.4, 0), 0.1, 600, color='gray', alpha=0.5)\nax.add_patch(rect)\n\n# Draw a rectangle with a specific color\nrect = plt.Rectangle((0.45, 0), 0.05, 400, color='gray', alpha=0.5)\nax.add_patch(rect)\n\n# Draw a rectangle with a specific color\nrect = plt.Rectangle((0.5, 0), 0.05, 200, color='gray', alpha=0.5)\nax.add_patch(rect)\n\n# Draw a rectangle with a specific color\nrect = plt.Rectangle((0.55, 0), 0.05, 100, color='gray', alpha=0.5)\nax.add_patch(rect)\n\n# Draw a rectangle with a specific color\nrect = plt.Rectangle((0.6, 0), 0.05, 50, color='gray', alpha=0.5)\nax.add_patch(rect)\n\n# Draw a rectangle with a specific color\nrect = plt.Rectangle((0.25, 0), 0.3, 1000, color='brown', alpha=0.5)\nax.add_patch(rect)\n\n# Draw a rectangle with a specific color\nrect = plt.Rectangle((0.3, 0), 0.1, 800, color='brown', alpha=0.5)\nax.add_patch(rect)\n\n# Draw a rectangle with a specific color\nrect = plt.Rectangle((0.4, 0), 0.1, 600, color='brown', alpha=0.5)\nax.add_patch(rect)\n\n# Draw a rectangle with a specific color\nrect = plt.Rectangle((0.45, 0), 0.05, 400, color='brown', alpha=0.5)\nax.add_patch(rect)\n\n# Draw a rectangle with a specific color\nrect = plt.Rectangle((0.5, 0), 0.05, 200, color='brown', alpha=0.5)\nax.add_patch(rect)\n\n# Draw a rectangle with a specific color\nrect = plt.Rectangle((0.55, 0), 0.05, 100, color='brown', alpha=0.5)\nax.add_patch(rect)\n\n# Draw a rectangle with a specific color\nrect = plt.Rectangle((0.6, 0), 0.05, 50, color='brown', alpha=0.5)\nax.add_patch(rect)\n\n# Draw a rectangle with a specific color\nrect = plt.Rectangle((0.25, 0), 0.3, 1000, color='pink', alpha=0.5)\nax.add_patch(rect)\n\n# Draw a rectangle with a specific color\nrect = plt.Rectangle((0.3, 0), 0.1, 800, color='pink', alpha=0.5)\nax.add_patch(rect)\n\n# Draw a rectangle with a specific color\nrect = plt.Rectangle((0.4, 0), 0.1, 600, color='pink', alpha=0.5)\nax.add_patch(rect)\n\n# Draw a rectangle with a specific color\nrect = plt.Rectangle((0.45, 0), 0.05, 400, color='pink', alpha=0.5)\nax.add_patch(rect)\n\n# Draw a rectangle with a specific color\nrect = plt.Rectangle((0.5, 0), 0.05, 200, color='pink', alpha=0.5)\nax.add_patch(rect)\n\n# Draw a rectangle with a specific color\nrect = plt.Rectangle((0.55, 0), 0.05, 100, color='pink', alpha=0.5)\nax.add_patch(rect)\n\n# Draw a rectangle with a specific color\nrect = plt.Rectangle((0.6, 0), 0.05, 50, color='pink', alpha=0.5)\nax.add_patch(rect)\n\n# Draw a rectangle with a specific color\nrect"}
{"file": "dataset/ori_500/PIP_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Set the x-axis limits\nax.set_xlim(2**6, 2**11)\n\n# Set the y-axis limits\nax.set_ylim(0, 40000)\n\n# Set the x-axis label\nax.set_xlabel('Width of Layer')\n\n# Set the y-axis label\nax.set_ylabel('Empirical Lipschitz Constant')\n\n# Plot the data\nax.plot([2**6, 2**7, 2**8, 2**9, 2**10, 2**11], [10000, 20000, 30000, 40000, 50000, 60000], 'g-')\nax.plot([2**6, 2**7, 2**8, 2**9, 2**10, 2**11], [15000, 25000, 35000, 45000, 55000, 65000], 'b-')\nax.plot([2**6, 2**7, 2**8, 2**9, 2**10, 2**11], [12000, 22000, 32000, 42000, 52000, 62000], 'r-')\nax.plot([2**6, 2**7, 2**8, 2**9, 2**10, 2**11], [13000, 23000, 33000, 43000, 53000, 63000], 'c-')\nax.plot([2**6, 2**7, 2**8, 2**9, 2**10, 2**11], [14000, 24000, 34000, 44000, 54000, 64000], 'm-')\n\n# Add markers at each point\nax.plot([2**6, 2**7, 2**8, 2**9, 2**10, 2**11], [10000, 20000, 30000, 40000, 50000, 60000], 'go')\nax.plot([2**6, 2**7, 2**8, 2**9, 2**10, 2**11], [15000, 25000, 35000, 45000, 55000, 65000], 'bo')\nax.plot([2**6, 2**7, 2**8, 2**9, 2**10, 2**11], [12000, 22000, 32000, 42000, 52000, 62000], 'ro')\nax.plot([2**6, 2**7, 2**8, 2**9, 2**10, 2**11], [13000, 23000, 33000, 43000, 53000, 63000], 'co')\nax.plot([2**6, 2**7, 2**8, 2**9, 2**10, 2**11], [14000, 24000, 34000, 44000, 54000, 64000], 'mo')\n\n# Add a legend\nax.legend(['Cos | n = 200', 'Cos | n = 400', 'ReLU | n = 200', 'ReLU | n = 400'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/PIP_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data\nax.plot([0, 2000, 4000, 6000, 8000, 10000], [3500, 4500, 5500, 6500, 7000, 7500], 'b-')\nax.plot([0, 2000, 4000, 6000, 8000, 10000], [3500, 4500, 5500, 6500, 7000, 7500], 'r-')\nax.plot([0, 2000, 4000, 6000, 8000, 10000], [3500, 4500, 5500, 6500, 7000, 7500], 'g-')\nax.plot([0, 2000, 4000, 6000, 8000, 10000], [3500, 4500, 5500, 6500, 7000, 7500], 'm-')\nax.plot([0, 2000, 4000, 6000, 8000, 10000], [3500, 4500, 5500, 6500, 7000, 7500], 'c-')\n\n# Set the title and labels\nax.set_title('Discounted Cumulative Rewarded')\nax.set_xlabel('Time Steps')\nax.set_ylabel('Discounted Cumulative Rewarded')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/PIP_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Plot the data\nax.plot([0, 25, 50, 75, 100, 125, 150, 175, 200], [0.55, 0.5, 0.45, 0.4, 0.35, 0.3, 0.25, 0.2, 0.15], color='blue', label='WI')\nax.plot([0, 25, 50, 75, 100, 125, 150, 175, 200], [0.55, 0.5, 0.45, 0.4, 0.35, 0.3, 0.25, 0.2, 0.15], color='orange', label='ISQ')\n\n# Set the title and labels\nax.set_title('Discounted Cumulative Reward')\nax.set_xlabel('Time Steps')\nax.set_ylabel('Discounted Cumulative Reward')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/PIP_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Set the background color of the plot\nax.set_facecolor('white')\n\n# Set the x-axis limits\nax.set_xlim(-4, 4)\n\n# Set the y-axis limits\nax.set_ylim(-4, 4)\n\n# Set the x-axis ticks\nax.set_xticks([-4, -2, 0, 2, 4])\n\n# Set the y-axis ticks\nax.set_yticks([-4, -2, 0, 2, 4])\n\n# Set the x-axis label\nax.set_xlabel('X-axis')\n\n# Set the y-axis label\nax.set_ylabel('Y-axis')\n\n# Set the title of the plot\nax.set_title('Scatter Plot')\n\n# Create a scatter plot with orange points\nax.scatter([1, 2, 3], [1, 2, 3], color='orange', label='Daytime Sunny')\n\n# Create a scatter plot with blue points\nax.scatter([1, 2, 3], [1, 2, 3], color='blue', label='Night Rainy')\n\n# Create a scatter plot with green points\nax.scatter([1, 2, 3], [1, 2, 3], color='green', label='PGST')\n\n# Add a legend to the plot\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/PIP_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Plot the scatter plot\nax.scatter([1, 2, 3], [4, 5, 6], color='red')\n\n# Add a rectangle\nrectangle = plt.Rectangle((-1, -1), 2, 2, linewidth=1, edgecolor='r', facecolor='none')\nax.add_patch(rectangle)\n\n# Set the title\nax.set_title('Scatter Plot with Rectangle')\n\n# Set the x and y limits\nax.set_xlim(-8, 8)\nax.set_ylim(-8, 8)\n\n# Set the x and y labels\nax.set_xlabel('X-axis')\nax.set_ylabel('Y-axis')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/area_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(9.0, 8.0))\n\n# Set the background color of the plot\nax.set_facecolor('lightgrey')\n\n# Set the title of the plot\nax.set_title('Stock Market Analysis', fontsize=16)\n\n# Set the x-axis label\nax.set_xlabel('Time (in minutes)', fontsize=14)\n\n# Set the y-axis label\nax.set_ylabel('Price (in dollars)', fontsize=14)\n\n# Set the tick labels for the x-axis\nax.set_xticks([10, 50, 100, 150, 200])\nax.set_xticklabels(['10K', '50K', '100K', '150K', '200K'])\n\n# Set the tick labels for the y-axis\nax.set_yticks([0, 10, 20, 30, 40])\nax.set_yticklabels(['0', '10', '20', '30', '40'])\n\n# Set the grid lines\nax.grid(True)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='minor', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='minor', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='both', labelsize"}
{"file": "dataset/ori_500/area_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 10.0))\n\n# Set the background color of the plot\nax.set_facecolor('lightgrey')\n\n# Set the title of the plot\nax.set_title('Stock Prices')\n\n# Set the x-axis label\nax.set_xlabel('Time Step')\n\n# Set the y-axis label\nax.set_ylabel('Price')\n\n# Set the x-axis ticks\nax.set_xticks([0, 1, 2, 3])\n\n# Set the y-axis ticks\nax.set_yticks([0, 10, 20, 30, 40, 50])\n\n# Set the x-axis tick labels\nax.set_xticklabels(['0', '1', '2', '3'])\n\n# Set the y-axis tick labels\nax.set_yticklabels(['0.96', '0.98', '1.00', '1.02', '1.04', '1.06'])\n\n# Set the grid lines\nax.grid(True)\n\n# Set the legend\nax.legend(['GT', 'DRS', 'PR-based'])\n\n# Set the line colors\nax.plot([0, 1, 2, 3], [0.96, 0.98, 1.00, 1.02], 'b-')\nax.plot([0, 1, 2, 3], [0.98, 1.00, 1.02, 1.04], 'g-')\nax.plot([0, 1, 2, 3], [1.00, 1.02, 1.04, 1.06], 'r-')\n\n# Set the rectangle patches\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='green'))\nax.add_patch(plt.Rectangle((1, 0), 1, 1, color='blue'))\nax.add_patch(plt.Rectangle((2, 0), 1, 1, color='red'))\n\n# Set the scatter points\nax.scatter([0, 1, 2, 3], [0.96, 0.98, 1.00, 1.02], color='blue')\nax.scatter([0, 1, 2, 3], [0.98, 1.00, 1.02, 1.04], color='green')\nax.scatter([0, 1, 2, 3], [1.00, 1.02, 1.04, 1.06], color='red')\n\n# Set the line width\nax.plot([0, 1, 2, 3], [0.96, 0.98, 1.00, 1.02], linewidth=2)\nax.plot([0, 1, 2, 3], [0.98, 1.00, 1.02, 1.04], linewidth=2)\nax.plot([0, 1, 2, 3], [1.00, 1.02, 1.04, 1.06], linewidth=2)\n\n# Set the line style\nax.plot([0, 1, 2, 3], [0.96, 0.98, 1.00, 1.02], linestyle='-')\nax.plot([0, 1, 2, 3], [0.98, 1.00, 1.02, 1.04], linestyle='-')\nax.plot([0, 1, 2, 3], [1.00, 1.02, 1.04, 1.06], linestyle='-')\n\n# Set the line marker\nax.plot([0, 1, 2, 3], [0.96, 0.98, 1.00, 1.02], marker='o')\nax.plot([0, 1, 2, 3], [0.98, 1.00, 1.02, 1.04], marker='o')\nax.plot([0, 1, 2, 3], [1.00, 1.02, 1.04, 1.06], marker='o')\n\n# Set the line color\nax.plot([0, 1, 2, 3], [0.96, 0.98, 1.00, 1.02], color='blue')\nax.plot([0, 1, 2, 3], [0.98, 1.00, 1.02, 1.04], color='green')\nax.plot([0, 1, 2, 3], [1.00, 1.02, 1.04, 1.06], color='red')\n\n# Set the line cap\nax.plot([0, 1, 2, 3], [0.96, 0.98, 1.00, 1.02], solid_capstyle='round')\nax.plot([0, 1, 2, 3], [0.98, 1.00, 1.02, 1.04], solid_capstyle='round')\nax.plot([0, 1, 2, 3], [1.00, 1.02, 1.04, 1.06], solid_capstyle='round')\n\n# Set the line join\nax.plot([0, 1, 2, 3], [0.96, 0.98, 1.00, 1.02], solid_joinstyle='round')\nax.plot([0, 1, 2, 3], [0.98, 1.00, 1.02, 1.04], solid_joinstyle='round')\nax.plot([0, 1, 2, 3], [1.00, 1.02, 1.04, 1.06], solid_joinstyle='round')\n\n# Set the line dash pattern\nax.plot([0, 1, 2, 3], [0.96, 0.98, 1.00, 1.02], linestyle='--')\nax.plot([0, 1, 2, 3], [0.98, 1.00, 1.02, 1.04], linestyle='--')\nax.plot([0, 1, 2, 3], [1.00, 1.02, 1.04, 1.06], linestyle='--')\n\n# Set the line dash offset\nax.plot([0, 1, 2, 3], [0.96, 0.98, 1.00, 1.02], linestyle='--', dashoffset=0.5)\nax.plot([0, 1, 2, 3], [0.98, 1.00, 1.02, 1.04], linestyle='--', dashoffset=0.5)\nax.plot([0, 1, 2, 3], [1.00, 1.02, 1.04, 1.06], linestyle='--', dashoffset=0.5)\n\n# Set the line dash cap\nax.plot([0, 1, 2, 3], [0.96, 0.98, 1.00, 1.02], linestyle='--', dashcapstyle='round')\nax.plot([0, 1, 2, 3], [0.98, 1.00, 1.02, 1.04], linestyle='--', dashcapstyle='round')\nax.plot([0, 1, 2, 3], [1.00, 1.02, 1.04, 1.06], linestyle='--', dashcapstyle='round')\n\n# Set the line dash join\nax.plot([0, 1, 2, 3], [0.96, 0.98, 1.00, 1.02], linestyle='--', dashjoinstyle='round')\nax.plot([0, 1, 2, 3], [0.98, 1.00, 1.02, 1.04], linestyle='--', dashjoinstyle='round')\nax.plot([0, 1, 2, 3], [1.00, 1.02, 1.04, 1.06], linestyle='--', dashjoinstyle='round')\n\n# Set the line dash phase\nax.plot([0, 1, 2, 3], [0.96, 0.98, 1.00, 1.02], linestyle='--', dashphase=0.5)\nax.plot([0, 1, 2, 3], [0.98, 1.00, 1.02, 1.04], linestyle='--', dashphase=0.5)\nax.plot([0, 1, 2, 3], [1.00, 1.02, 1.04, 1.06], linestyle='--', dashphase=0.5)\n\n# Set the line dash length\nax.plot([0, 1, 2, 3], [0.96, 0.98, 1.00, 1.02], linestyle='--', dashlength=0.5)\nax.plot([0, 1, 2, 3], [0.98, 1.00, 1.02, 1.04], linestyle='--', dashlength=0.5)\nax.plot([0, 1, 2, 3], [1.00, 1.02, 1.04, 1.06], linestyle='--', dashlength=0.5)\n\n# Set the line dash offset\nax.plot([0, 1, 2, 3], [0.96, 0.98, 1.00, 1.02], linestyle='--', dashoffset=0.5)\nax.plot([0, 1, 2, 3], [0.98, 1.00, 1.02, 1.04], linestyle='--', dashoffset=0.5)\nax.plot([0, 1, 2, 3], [1.00, 1.02, 1.04, 1.06], linestyle='--', dashoffset=0.5)\n\n# Set the line dash cap\nax.plot([0, 1, 2, 3], [0.96, 0.98, 1.00, 1.02], linestyle='--', dashcapstyle='round')\nax.plot([0, 1, 2, 3], [0.98, 1.00, 1.02, 1.04], linestyle='--', dashcapstyle='round')\nax.plot([0, 1, 2, 3], [1.00, 1.02, 1.04, 1.06], linestyle='--', dashcapstyle='round')\n\n# Set the line dash join\nax.plot([0, 1, 2, 3], [0.96, 0.98, 1.00, 1.02], linestyle='--', dashjoinstyle='round')\nax.plot([0, 1, 2, 3], [0.98, 1.00, 1.02, 1.04], linestyle='--', dashjoinstyle='round')\nax.plot([0, 1, 2, 3], [1.00, 1.02, 1.04, 1.06], linestyle='--', dashjoinstyle='round')\n\n# Set the line dash phase\nax.plot([0, 1, 2, 3], [0.96, 0.98, 1.00, 1.02], linestyle='--', dashphase=0.5)\nax.plot([0, 1, 2, 3], [0.98, 1.00, 1.02, 1.04], linestyle='--', dashphase=0.5)\nax.plot([0, 1, 2, 3], [1.00, 1.02, 1.04, 1.06], linestyle='--', dashphase=0.5)\n\n# Set the line dash length\nax.plot([0, 1, 2, 3], [0.96, 0.98, 1.00, 1.02], linestyle='--', dashlength=0.5)\nax.plot([0, 1, 2, 3], [0.98, 1.00, 1.02, 1.04], linestyle='--', dashlength=0.5)\nax.plot([0, 1, 2, 3], [1.00, 1.02, 1.04, 1.06], linestyle='--', dashlength=0.5)\n\n# Set the line dash offset\nax.plot([0, 1, 2, 3], [0.96, 0.98, 1.00, 1.02], linestyle='--', dashoffset=0.5)\nax.plot([0, 1, 2, 3], [0.98, 1.00, 1.02, 1.04], linestyle='--', dashoffset=0.5)\nax.plot([0, 1, 2, 3], [1.00, 1.02, 1.04, 1.06], linestyle='--', dashoffset=0.5)\n\n# Set the line dash cap\nax.plot([0, 1, 2, 3], [0.96, 0.98, 1.00, 1.02], linestyle='--', dashcapstyle='round')\nax.plot([0, 1, 2, 3], [0.98, 1.00, 1.02, 1.04], linestyle='--', dashcapstyle='round')\nax.plot([0, 1, 2, 3], [1.00, 1.02, 1.04, 1.06], linestyle='--', dashcapstyle='round')\n\n# Set the line dash join\nax.plot([0, 1, 2, 3], [0.96, 0.98, 1.00, 1.02], linestyle='--', dashjoinstyle='round')\nax.plot([0, 1, 2, 3], [0.98, 1.00, 1.02, 1.04], linestyle='--', dashjoinstyle='round')\nax.plot([0, 1, 2, 3], [1.00, 1.02, 1.04, 1.06], linestyle='--', dashjoinstyle='round')\n\n# Set the line dash phase\nax.plot([0, 1, 2, 3], [0.96, 0.98, 1.00, 1.02], linestyle='--', dashphase=0.5)\nax.plot([0, 1, 2, 3], [0.98, 1.00, 1.02, 1.04], linestyle='--', dashphase=0.5)\nax.plot([0, 1, 2, 3], [1.00, 1.02, 1.04, 1.06], linestyle='--', dashphase=0.5)\n\n# Set the line dash length\nax.plot([0, 1, 2, 3], [0.96, 0.98, 1.00, 1.02], linestyle='--', dashlength=0.5)\nax.plot([0, 1, 2, 3], [0.98, 1.00, 1.02, 1.04], linestyle='--', dashlength=0.5)\nax.plot([0, 1, 2, 3], [1.00, 1.02, 1.04, 1.06], linestyle='--', dashlength=0.5)\n\n# Set the line dash offset\nax.plot([0, 1, 2, 3], [0.96, 0.98, 1.00, 1.02], linestyle='--', dashoffset=0.5)\nax.plot([0, 1, 2, 3], [0.98, 1.00, 1.02, 1.04], linestyle='--', dashoffset=0.5)\nax.plot([0, 1, 2, 3], [1.00, 1.02, 1.04, 1.06], linestyle='--', dashoffset=0.5)\n\n# Set the line dash cap\nax.plot([0, 1, 2, 3], [0.96, 0.98, 1.00, 1.02], linestyle='--', dashcapstyle='round')\nax.plot([0, 1, 2, 3], [0.98, 1.00, 1.02, 1.04], linestyle='--', dashcapstyle='round')\nax.plot([0, 1, 2, 3], [1.00, 1.0"}
{"file": "dataset/ori_500/area_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Dynamic Effect of Vocab on Zero Shot Accuracy')\n\n# Set the x-axis label\nax.set_xlabel('Deposition IO Norm')\n\n# Set the y-axis label\nax.set_ylabel('Accuracy')\n\n# Set the x-ticks\nax.set_xticks([0, 20, 40, 60, 80])\n\n# Set the y-ticks\nax.set_yticks([0.53, 0.55, 0.57, 0.59, 0.61, 0.63, 0.65, 0.67, 0.69, 0.71, 0.73, 0.75, 0.77, 0.79, 0.81])\n\n# Set the x-tick labels\nax.set_xticklabels(['0', '20', '40', '60', '80'])\n\n# Set the y-tick labels\nax.set_yticklabels(['0.53', '0.55', '0.57', '0.59', '0.61', '0.63', '0.65', '0.67', '0.69', '0.71', '0.73', '0.75', '0.77', '0.79', '0.81'])\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right']."}
{"file": "dataset/ori_500/area_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nn = [0, 1, 2, 3, 4, 5, 6, 7, 8]\ncontent = [1, 2, 3, 4, 5, 6, 7, 8, 9]\norganization = [2, 3, 4, 5, 6, 7, 8, 9, 10]\nlanguage = [3, 4, 5, 6, 7, 8, 9, 10, 11]\n\n# Create the plot\nfig, ax = plt.subplots(figsize=(8.0, 4.0))\nax.plot(n, content, label='Content', color='blue')\nax.plot(n, organization, label='Organization', color='orange')\nax.plot(n, language, label='Language', color='green')\n\n# Add labels and title\nax.set_xlabel('n')\nax.set_ylabel('Performance Gain (%)')\nax.set_title('Cumulative Performance Gain by Augmentation Level')\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/area_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nyears = [1950, 1960, 1970, 1980, 1990, 2000, 2010]\nafrica = [100, 200, 300, 400, 500, 600, 700]\namericas = [150, 250, 350, 450, 550, 650, 750]\nasia = [200, 300, 400, 500, 600, 700, 800]\neurope = [250, 350, 450, 550, 650, 750, 850]\noceania = [300, 400, 500, 600, 700, 800, 900]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data\nax.plot(years, africa, label='Africa', color='lightgreen')\nax.plot(years, americas, label='Americas', color='yellow')\nax.plot(years, asia, label='Asia', color='red')\nax.plot(years, europe, label='Europe', color='orange')\nax.plot(years, oceania, label='Oceania', color='blue')\n\n# Set the title and labels\nax.set_title('World Population')\nax.set_xlabel('Year')\nax.set_ylabel('Number of people (millions)')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the plot\nx = [0, 20, 40]\ny = [0.1, 0.3, 0.5]\ncolors = ['blue', 'green', 'red']\nwidth = 10\n\n# Create a bar chart\nplt.bar(x, y, width, color=colors)\n\n# Set the title and labels\nplt.title('Scores')\nplt.xlabel('Time')\nplt.ylabel('Score')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\ncategories = ['Which', 'What', 'How', 'Will', 'Are', 'Is', 'Choose', 'Select', 'Identify', 'Fill']\naccuracies = [55, 45, 35, 25, 15, 50, 40, 30, 20, 10]\n\n# Create a bar chart\nplt.figure(figsize=(8.0, 6.0))\nplt.bar(categories, accuracies, color='skyblue')\n\n# Set the title and labels\nplt.title('Model Accuracy by Category')\nplt.xlabel('Category')\nplt.ylabel('Accuracy (%)')\n\n# Rotate the category labels for better visibility\nplt.xticks(rotation=45)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_100.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the first chart\nregion1 = ['Product A', 'Product B', 'Product C', 'Product D', 'Product E']\nsales1 = [70, 80, 60, 90, 50]\n\n# Data for the second chart\nregion2 = ['Product A', 'Product B', 'Product C', 'Product D', 'Product E']\nsales2 = [80, 70, 60, 90, 50]\n\n# Data for the third chart\nregion3 = ['Product A', 'Product B', 'Product C', 'Product D', 'Product E']\nsales3 = [90, 80, 70, 60, 50]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(15, 5))\n\n# Plot the first chart\nax.bar(region1, sales1, color='green')\nax.set_title('Region 1 Sales')\n\n# Plot the second chart\nax.bar(region2, sales2, color='blue')\nax.set_title('Region 2 Sales')\n\n# Plot the third chart\nax.bar(region3, sales3, color='red')\nax.set_title('Region 3 Sales')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nlengths = [0.9, 10.19, 20.29, 30.39, 40.49]\nspearmans = [0.5, 0.5, 0.5, 0.5, 0.5]\n\n# Create a bar chart\nplt.bar(lengths, spearmans, color='blue')\n\n# Set the title and labels\nplt.title('Spearman Correlation by Length')\nplt.xlabel('Length')\nplt.ylabel('Spearman')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\nbeauty_data = [2.2, 11.2, 14.3, 19.9]\nmovie_lens_data = [3.0, 5.1, 4.1, 3.1, 2.9]\nyelp_data = [-0.7, -0.5, -0.5, -0.5, -0.5]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 4))\n\n# Plot the data\nax.barh(range(len(beauty_data)), beauty_data, color='blue', label='Beauty')\nax.barh(range(len(movie_lens_data)), movie_lens_data, color='red', label='MovieLens-1M')\nax.barh(range(len(yelp_data)), yelp_data, color='green', label='Yelp')\n\n# Set the labels and title\nax.set_xlabel('Percentage')\nax.set_title('Sentiment Analysis of Reviews')\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nmodels = ['Bactrian-X', 'Lima-X', 'Bactrian-X', 'Lima-X']\nimprovement = [3.5, 2.3, 1.5, 0.8]\ncolors = ['blue', 'orange', 'green', 'brown', 'yellow']\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Plot bars\nfor i, model in enumerate(models):\n    ax.bar(model, improvement[i], color=colors[i % len(colors)])\n\n# Set title and labels\nax.set_title('ENDEFRRITES sampled')\nax.set_xlabel('Model')\nax.set_ylabel('Improve [%]')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\npheme = ['GCN', 'RvNN', 'Hyphen', 'GET', 'WSDMS', 'DELL']\nf1_scores = [0.82, 0.84, 0.83, 0.86, 0.85, 0.89]\nllm_mis = [0.78, 0.80, 0.79, 0.81, 0.82, 0.83]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(7, 5))\n\n# Plot the F1 scores\nax.barh(pheme, f1_scores, color='blue')\n\n# Add labels and title\nax.set_xlabel('F1-score')\nax.set_title('Pheme')\n\n# Draw horizontal lines\nfor i in range(len(pheme)):\n    ax.axhline(y=i, color='black', linestyle='-')\n\n# Repeat for LLM-mis\nax2 = ax.twiny()\nax2.barh(pheme, llm_mis, color='gray')\n\n# Add labels and title\nax2.set_xlabel('LLM-mis')\n\n# Draw horizontal lines\nfor i in range(len(pheme)):\n    ax2.axhline(y=i, color='black', linestyle='-')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the plot\nx = [1, 2, 3, 4, 5, 6]\ny = [20, 30, 40, 50, 40, 30]\n\n# Create a bar chart\nplt.bar(x, y, color='blue')\n\n# Add labels and title\nplt.xlabel('Human Annotator')\nplt.ylabel('Scores')\nplt.title('Human Labeling and Agreement Bias Checking')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_16.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the first plot\nx1 = [0, 100, 200, 300, 400, 500, 600, 700, 800]\ny1 = [0, 0, 0, 0, 0, 0, 0, 0, 0]\ncolors1 = ['blue', 'cyan', 'yellow', 'red', 'pink', 'orange', 'green', 'purple', 'brown']\n\n# Data for the second plot\nx2 = [0, 100, 200, 300, 400, 500, 600, 700, 800]\ny2 = [0, 0, 0, 0, 0, 0, 0, 0, 0]\ncolors2 = ['blue', 'cyan', 'yellow', 'red', 'pink', 'orange', 'green', 'purple', 'brown']\n\n# Create the first plot\nfig, ax1 = plt.subplots(figsize=(8.0, 6.0))\nax1.plot(x1, y1, color='blue')\nax1.set_xlabel('Count')\nax1.set_ylabel('Role', color='blue')\nax1.tick_params(axis='y', labelcolor='blue')\n\n# Create the second plot\nax2 = ax1.twinx()\nax2.plot(x2, y2, color='cyan')\nax2.set_ylabel('Role', color='cyan')\nax2.tick_params(axis='y', labelcolor='cyan')\n\n# Display the plots\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_17.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ntasks = ['ARC', 'MMLU', 'TruthfulQa', 'Winograde', 'Average']\naccuracies = [53.0, 51.3, 56.4, 56.2, 53.1]\ncolors = ['skyblue', 'lightgreen', 'pink', 'salmon', 'pink']\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(10.0, 4.0))\nbars = ax.bar(tasks, accuracies, color=colors)\n\n# Add labels and title\nax.set_xlabel('Tasks')\nax.set_ylabel('Accuracy (%)')\nax.set_title('Task Accuracy')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_18.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Set the x-axis limits\nax.set_xlim(35, 75)\n\n# Set the y-axis limits\nax.set_ylim(40, 70)\n\n# Set the x-axis ticks\nax.set_xticks([35, 40, 45, 50, 55, 60, 65, 70])\n\n# Set the y-axis ticks\nax.set_yticks([45, 50, 55, 60, 65])\n\n# Set the x-axis label\nax.set_xlabel('Performance')\n\n# Set the y-axis label\nax.set_ylabel('Price')\n\n# Set the title of the plot\nax.set_title('Car Performance vs Price')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('blue')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', width=2)\n\n# Set the color of the box\nax.box(on=False)\n\n# Set the color of the spines\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', width=2)\n\n# Set the color of the box\nax.box(on=False)\n\n# Set the color of the spines\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', width=2)\n\n# Set the color of the box\nax.box(on=False)\n\n# Set the color of the spines\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', width=2)\n\n# Set the color of the box\nax.box(on=False)\n\n# Set the color of the spines\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', width=2)\n\n# Set the color of the box\nax.box(on=False)\n\n# Set the color of the spines\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', width=2)\n\n# Set the color of the box\nax.box(on=False)\n\n# Set the color of the spines\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', width=2)\n\n# Set the color of the box\nax.box(on=False)\n\n# Set the color of the spines\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', width=2)\n\n# Set the color of the box\nax.box(on=False)\n\n# Set the color of the spines\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', width=2)\n\n# Set the color of the box\nax.box(on=False)\n\n# Set the color of the spines\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', width=2)\n\n# Set the color of the box\nax.box(on=False)\n\n# Set the color of the spines\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', width=2)\n\n# Set the color of the box\nax.box(on=False)\n\n# Set the color of the spines\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', width=2)\n\n# Set the color of the box\nax.box(on=False)\n\n# Set the color of the spines\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', width=2)\n\n# Set the color of the box\nax.box(on=False)\n\n# Set the color of the spines\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', width=2)\n\n# Set the color of the box\nax.box(on=False)\n\n# Set the color of the spines\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', width=2)\n\n# Set the color of the box\nax.box(on=False)\n\n# Set the color of the spines\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', width=2)\n\n# Set the color of the box\nax.box(on=False)\n\n# Set the color of the spines\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', width=2)\n\n# Set the color of the box\nax.box(on=False)\n\n# Set the color of the spines\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', width=2)\n\n# Set the color of the box\nax.box(on=False)\n\n# Set the color of the spines\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', width=2)\n\n# Set the color of the box\nax.box(on=False)\n\n# Set the color of the spines\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', width=2)\n\n# Set the color of the box\nax.box(on=False)\n\n# Set the color of the spines\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', width=2)\n\n# Set the color of the box\nax.box(on=False)\n\n# Set the color of the spines\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', width=2)\n\n# Set the color of the box\nax.box(on=False)\n\n# Set the color of the spines\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', width=2)\n\n# Set the color of the box\nax.box(on=False)\n\n# Set the color of the spines\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', width=2)\n\n# Set the color of the box\nax.box(on=False)\n\n# Set the color of the spines\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', width=2)\n\n# Set the color of the box\nax.box(on=False)\n\n# Set the color of the spines\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', width=2)\n\n# Set the color of the box\nax.box(on=False)\n\n# Set the color of the spines\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', width=2)\n\n# Set the color of the box\nax.box(on=False)\n\n# Set the color of the spines\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', width=2)\n\n# Set the color of the box\nax.box(on=False)\n\n# Set the color of the spines\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', width=2)\n\n# Set the color of the box\nax.box(on=False)\n\n# Set the color of the spines\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', width=2)\n\n# Set the color of the box\nax.box(on=False)\n\n# Set the color of the spines\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', width=2)\n\n# Set the color of the box\nax.box(on=False)\n\n# Set the color of the spines\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', width=2)\n\n# Set the color of the box\nax.box(on=False)\n\n# Set the color of the spines\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', width=2)\n\n# Set the color of the box\nax.box(on=False)\n\n# Set the color of the spines\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', width=2)\n\n# Set the color of the box\nax.box(on=False)\n\n# Set the color of the spines\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', width=2)\n\n# Set the color of the box\nax.box(on=False)\n\n# Set the color of the spines\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5"}
{"file": "dataset/ori_500/bar_19.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the bar chart\nlabels = ['DLMA-7B VS. LLAMA-7B', 'DLMA-7B VS. CD-7B', 'DLMA-7B VS. RLAIF-7B', 'DLMA-7B VS. RLCD-7B', 'DLMA-13B VS. LLAMA-13B', 'DLMA-13B VS. CD-13B', 'DLMA-13B VS. RLAIF-13B', 'DLMA-13B VS. RLCD-13B']\nvalues = [60.2, 60.2, 46.8, 34.7, 62.5, 62.5, 49.2, 30.9]\ncolors = ['green', 'blue', 'red']\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Create a bar chart with the data\nbars = ax.bar(labels, values, color=colors)\n\n# Add labels and title\nax.set_xlabel('Match')\nax.set_ylabel('Win Percentage')\nax.set_title('DLMA VS. Baseline Methods On HHH (Evaluated by GPT4)')\n\n# Add a legend\nax.legend(['DLMA win', 'DLMA tie', 'DLMA lose'])\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ntime = [0, 10, 20, 30, 40]\ngait = [0.5, 0.7, 0.8, 0.9, 0.95]\npace = [0.6, 0.8, 0.9, 0.95, 0.98]\nbound = [0.7, 0.9, 0.95, 0.98, 0.99]\npronk = [0.8, 0.95, 0.98, 0.99, 1.0]\ntransition = [0.9, 0.95, 0.98, 0.99, 1.0]\n\n# Plot\nfig, ax = plt.subplots(figsize=(6.0, 3.0))\nax.plot(time, gait, label='gait', color='green')\nax.plot(time, pace, label='pace', color='red')\nax.plot(time, bound, label='bound', color='purple')\nax.plot(time, pronk, label='pronk', color='brown')\nax.plot(time, transition, label='transition', color='gray')\n\n# Legend\nax.legend()\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_20.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ndata = {\n    'Lima': [68, 24, 8],\n    'Vicuna': [82, 15, 3],\n    'Koala': [68, 22, 10],\n    'Wizardlm': [72, 19, 9],\n    'Self-Instruct': [68, 23, 9]\n}\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Plot bars\nfor i, (name, values) in enumerate(data.items()):\n    ax.barh(name, values[0], color='blue')\n    ax.text(values[0] + 1, i, f'{values[1]}', va='center', ha='left')\n    ax.text(values[0] + 1, i, f'{values[2]}', va='center', ha='right')\n\n# Set title and labels\nax.set_title('Top 5 Models')\nax.set_xlabel('Number of Wins')\nax.set_ylabel('Model Name')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_21.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the first bar chart\nx = [60, 40, 20, 0]\ny = [14.8, 29.6, 29.6, 18.5, 8.4, 9.0]\ncolors = ['red', 'orange', 'grey', 'blue']\n\n# Data for the second bar chart\nx2 = [60, 40, 20, 0]\ny2 = [19.0, 26.2, 35.7, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5, 9.5,"}
{"file": "dataset/ori_500/bar_22.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\nx = [0.5, 0.6, 0.7, 0.8, 0.9, 0.95, 1.0, 1.1, 1.2, 1.3, 1.4, 1.5]\ny1 = [-5, -6, -7, -8, -9, -9, -10, -11, -12, -13, -14, -15]\ny2 = [-10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21]\ny3 = [-15, -16, -17, -18, -19, -20, -21, -22, -23, -24, -25, -26]\nx2 = [0.5, 0.6, 0.7, 0.8, 0.9, 0.95, 1.0, 1.1, 1.2, 1.3, 1.4, 1.5]\ny4 = [-5, -6, -7, -8, -9, -9, -10, -11, -12, -13, -14, -15]\ny5 = [-10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21]\ny6 = [-15, -16, -17, -18, -19, -20, -21, -22, -23, -24, -25, -26]\nx3 = [0.5, 0.6, 0.7, 0.8, 0.9, 0.95, 1.0, 1.1, 1.2, 1.3, 1.4, 1.5]\ny7 = [-5, -6, -7, -8, -9, -9, -10, -11, -12, -13, -14, -15]\ny8 = [-10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21]\ny9 = [-15, -16, -17, -18, -19, -20, -21, -22, -23, -24, -25, -26]\nx4 = [0.5, 0.6, 0.7, 0.8, 0.9, 0.95, 1.0, 1.1, 1.2, 1.3, 1.4, 1.5]\ny10 = [-5, -6, -7, -8, -9, -9, -10, -11, -12, -13, -14, -15]\ny11 = [-10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21]\ny12 = [-15, -16, -17, -18, -19, -20, -21, -22, -23, -24, -25, -26]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 10.0))\n\n# Plot the data\nax.plot(x, y1, color='blue')\nax.plot(x, y2, color='blue')\nax.plot(x, y3, color='blue')\nax.plot(x2, y4, color='blue')\nax.plot(x2, y5, color='blue')\nax.plot(x2, y6, color='blue')\nax.plot(x3, y7, color='blue')\nax.plot(x3, y8, color='blue')\nax.plot(x3, y9, color='blue')\nax.plot(x4, y10, color='blue')\nax.plot(x4, y11, color='blue')\nax.plot(x4, y12, color='blue')\n\n# Set the title and labels\nax.set_title('Rate of Gain Change (%)')\nax.set_xlabel('Brightness')\nax.set_ylabel('Rate of Gain Change (%)')\n\n# Set the grid\nax.grid(True)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_23.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nmodels = ['GPT4', 'GPT-few-shot', 'GPT3.5', 'StarCoder', 'Code Llama', 'NCL']\naccuracy = [3.2, 3.1, 3.0, 3.1, 3.2, 3.3]\ncompleteness = [3.0, 2.8, 2.7, 2.6, 2.5, 2.4]\nconciseness = [2.9, 2.7, 2.6, 2.5, 2.4, 2.3]\nreadability = [2.8, 2.6, 2.5, 2.4, 2.3, 2.2]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(9.0, 5.0))\n\n# Plot the bars\nax.bar(models, accuracy, color='blue', label='Accuracy')\nax.bar(models, completeness, bottom=accuracy, color='orange', label='Completeness')\nax.bar(models, conciseness, bottom=[a + c for a, c in zip(accuracy, completeness)], color='red', label='Conciseness')\nax.bar(models, readability, bottom=[a + c + co for a, c, co in zip(accuracy, completeness, conciseness)], color='teal', label='Readability')\n\n# Set the title and labels\nax.set_title('Ratings of Language Models on a Scale from 1-4')\nax.set_xlabel('Language Models')\nax.set_ylabel('Ratings')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_24.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nmodels = ['Majority', 'Flan-T5', 'GPT-3.5', 'GPT-4', 'Wizard13b', 'Vicuna13b', 'Mistral17b']\naccuracies = [0.302, 0.601, 0.468, 0.653, 0.384, 0.379, 0.364]\n\n# Create a bar chart\nplt.figure(figsize=(8.0, 4.0))\nplt.bar(models, accuracies, color='blue')\n\n# Set the title and labels\nplt.title('Model Accuracy')\nplt.xlabel('Models')\nplt.ylabel('Accuracy')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_25.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\nproducts = ['Alpaca-52k+', 'Alpaga-1k+', 'LIMa-1k+']\nsales = [78.8, 67.4, 44.2]\nprices = [11.7, 18.1, 21.9]\nprofits = [9.5, 14.5, 19.2]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 4))\n\n# Plot the data\nax.barh(products, sales, color='blue', label='Sales')\nax.barh(products, prices, left=sales, color='orange', label='Prices')\nax.barh(products, profits, left=[s + p for s, p in zip(sales, prices)], color='lightblue', label='Profits')\n\n# Set the title and labels\nax.set_title('GPT4-as-a-judge')\nax.set_xlabel('Values')\nax.set_ylabel('Products')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_26.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nemotions = ['Ang', 'Cntr', 'Dis', 'Fea', 'Joy', 'Ntr', 'Sad', 'Sur']\nvalues = [100, 200, 300, 400, 500, 600, 700, 800]\n\n# Create a bar chart\nplt.figure(figsize=(6, 4))\nplt.bar(emotions, values, color='red')\n\n# Add labels and title\nplt.xlabel('Emotions')\nplt.ylabel('Values')\nplt.title('Emotion Values')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_27.pdf", "response": "```python\n\"\"\"\n=====================================\nCar Model Performance Comparison\n=====================================\n\nThis example demonstrates how to create a bar chart with multiple bars for each car model,\nrepresenting different performance metrics.\n\"\"\"\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\ncar_models = ['GPT-4V', 'RoboCodeX']\nsuccess = [0.95, 0.85]\noccupancy_error = [0.02, 0.03]\ngrounding_error = [0.01, 0.02]\ngripper_collision = [0.01, 0.01]\ntrajectory_optimization_error = [0.01, 0.01]\ngrasping_failed = [0.01, 0.01]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 3.0))\n\n# Set the x-axis limits\nax.set_xlim(0, 1)\n\n# Set the y-axis limits\nax.set_ylim(0, 1)\n\n# Set the x-axis ticks\nax.set_xticks(np.arange(len(car_models)))\n\n# Set the x-axis labels\nax.set_xticklabels(car_models)\n\n# Set the y-axis label\nax.set_ylabel('Percentage of Total Trials')\n\n# Set the title\nax.set_title('Car Model Performance Comparison')\n\n# Set the colors\ncolors = ['green', 'orange', 'gray', 'yellow', 'purple']\n\n# Plot the bars\nfor i, model in enumerate(car_models):\n    ax.bar(model, success[i], color=colors[0])\n    ax.bar(model, occupancy_error[i], bottom=success[i], color=colors[1])\n    ax.bar(model, grounding_error[i], bottom=success[i] + occupancy_error[i], color=colors[2])\n    ax.bar(model, gripper_collision[i], bottom=success[i] + occupancy_error[i] + grounding_error[i], color=colors[3])\n    ax.bar(model, trajectory_optimization_error[i], bottom=success[i] + occupancy_error[i] + grounding_error[i] + gripper_collision[i], color=colors[4])\n    ax.bar(model, grasping_failed[i], bottom=success[i] + occupancy_error[i] + grounding_error[i] + gripper_collision[i] + trajectory_optimization_error[i], color=colors[5])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_28.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 5.0))\n\n# Set the title of the plot\nax.set_title('Transmission Delay (ms)')\n\n# Set the x-axis label\nax.set_xlabel('Datasets')\n\n# Set the y-axis label\nax.set_ylabel('Transmission Delay (ms)')\n\n# Define the data for the bar chart\nx = ['VOC 2012', 'COCO 2017']\ny = [3.5, 2.5]\n\n# Create a bar chart with the data\nax.bar(x, y, color='blue')\n\n# Set the limits of the x-axis\nax.set_xlim(0, 2)\n\n# Set the limits of the y-axis\nax.set_ylim(0, 4)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_29.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Set the title of the plot\nax.set_title('PDEs')\n\n# Set the x-axis label\nax.set_xlabel('PDEs')\n\n# Set the y-axis label\nax.set_ylabel('log L2')\n\n# Set the x-ticks\nax.set_xticks([0, 1, 2, 3, 4])\nax.set_xticklabels(['Wave', 'Diffusion', 'Heat', 'Poison', 'Burgers'])\n\n# Set the y-ticks\nax.set_yticks([1.0, 1.5, 2.0, 2.5, 3.0, 3.5, 4.0])\n\n# Set the y-tick labels\nax.set_yticklabels(['1e-1', '1e-2', '1e-3', '1e-4', '1e-5', '1e-6', '1e-7'])\n\n# Set the color bar\ncbar = fig.colorbar(ax.images[0], ax=ax)\n\n# Set the color bar label\ncbar.set_label('RBF-INT')\n\n# Set the color bar ticks\ncbar.set_ticks([0, 1, 2, 3, 4, 5, 6])\n\n# Set the color bar tick labels\ncbar.set_ticklabels(['RBF-INT', 'RBF-POL', 'RBF-COM', 'RBF-INT', 'RBF-POL', 'RBF-COM', 'RBF-INT'])\n\n# Set the color bar orientation\ncbar.ax.set_yticklabels(cbar.get_ticklabels(), rotation=90)\n\n# Set the color bar position\ncbar.ax.set_position([0.8, 0.1, 0.05, 0.8])\n\n# Set the color bar label position\ncbar.ax.set_ylabel('RBF-INT', rotation=90)\n\n# Set the color bar label position\ncbar.ax.set_xlabel('RBF-INT')\n\n# Set the color bar label position\ncbar.ax.set_title('RBF-INT')\n\n# Set the color bar label position\ncbar.ax.set_ylabel('RBF-INT')\n\n# Set the color bar label position\ncbar.ax.set_xlabel('RBF-INT')\n\n# Set the color bar label position\ncbar.ax.set_title('RBF-INT')\n\n# Set the color bar label position\ncbar.ax.set_ylabel('RBF-INT')\n\n# Set the color bar label position\ncbar.ax.set_xlabel('RBF-INT')\n\n# Set the color bar label position\ncbar.ax.set_title('RBF-INT')\n\n# Set the color bar label position\ncbar.ax.set_ylabel('RBF-INT')\n\n# Set the color bar label position\ncbar.ax.set_xlabel('RBF-INT')\n\n# Set the color bar label position\ncbar.ax.set_title('RBF-INT')\n\n# Set the color bar label position\ncbar.ax.set_ylabel('RBF-INT')\n\n# Set the color bar label position\ncbar.ax.set_xlabel('RBF-INT')\n\n# Set the color bar label position\ncbar.ax.set_title('RBF-INT')\n\n# Set the color bar label position\ncbar.ax.set_ylabel('RBF-INT')\n\n# Set the color bar label position\ncbar.ax.set_xlabel('RBF-INT')\n\n# Set the color bar label position\ncbar.ax.set_title('RBF-INT')\n\n# Set the color bar label position\ncbar.ax.set_ylabel('RBF-INT')\n\n# Set the color bar label position\ncbar.ax.set_xlabel('RBF-INT')\n\n# Set the color bar label position\ncbar.ax.set_title('RBF-INT')\n\n# Set the color bar label position\ncbar.ax.set_ylabel('RBF-INT')\n\n# Set the color bar label position\ncbar.ax.set_xlabel('RBF-INT')\n\n# Set the color bar label position\ncbar.ax.set_title('RBF-INT')\n\n# Set the color bar label position\ncbar.ax.set_ylabel('RBF-INT')\n\n# Set the color bar label position\ncbar.ax.set_xlabel('RBF-INT')\n\n# Set the color bar label position\ncbar.ax.set_title('RBF-INT')\n\n# Set the color bar label position\ncbar.ax.set_ylabel('RBF-INT')\n\n# Set the color bar label position\ncbar.ax.set_xlabel('RBF-INT')\n\n# Set the color bar label position\ncbar.ax.set_title('RBF-INT')\n\n# Set the color bar label position\ncbar.ax.set_ylabel('RBF-INT')\n\n# Set the color bar label position\ncbar.ax.set_xlabel('RBF-INT')\n\n# Set the color bar label position\ncbar.ax.set_title('RBF-INT')\n\n# Set the color bar label position\ncbar.ax.set_ylabel('RBF-INT')\n\n# Set the color bar label position\ncbar.ax.set_xlabel('RBF-INT')\n\n# Set the color bar label position\ncbar.ax.set_title('RBF-INT')\n\n# Set the color bar label position\ncbar.ax.set_ylabel('RBF-INT')\n\n# Set the color bar label position\ncbar.ax.set_xlabel('RBF-INT')\n\n# Set the color bar label position\ncbar.ax.set_title('RBF-INT')\n\n# Set the color bar label position\ncbar.ax.set_ylabel('RBF-INT')\n\n# Set the color bar label position\ncbar.ax.set_xlabel('RBF-INT')\n\n# Set the color bar label position\ncbar.ax.set_title('RBF-INT')\n\n# Set the color bar label position\ncbar.ax.set_ylabel('RBF-INT')\n\n# Set the color bar label position\ncbar.ax.set_xlabel('RBF-INT')\n\n# Set the color bar label position\ncbar.ax.set_title('RBF-INT')\n\n# Set the color bar label position\ncbar.ax.set_ylabel('RBF-INT')\n\n# Set the color bar label position\ncbar.ax.set_xlabel('RBF-INT')\n\n# Set the color bar label position\ncbar.ax.set_title('RBF-INT')\n\n# Set the color bar label position\ncbar.ax.set_ylabel('RBF-INT')\n\n# Set the color bar label position\ncbar.ax.set_xlabel('RBF-INT')\n\n# Set the color bar label position\ncbar.ax.set_title('RBF-INT')\n\n# Set the color bar label position\ncbar.ax.set_ylabel('RBF-INT')\n\n# Set the color bar label position\ncbar.ax.set_xlabel('RBF-INT')\n\n# Set the color bar label position\ncbar.ax.set_title('RBF-INT')\n\n# Set the color bar label position\ncbar.ax.set_ylabel('RBF-INT')\n\n# Set the color bar label position\ncbar.ax.set_xlabel('RBF-INT')\n\n# Set the color bar label position\ncbar.ax.set_title('RBF-INT')\n\n# Set the color bar label position\ncbar.ax.set_ylabel('RBF-INT')\n\n# Set the color bar label position\ncbar.ax.set_xlabel('RBF-INT')\n\n# Set the color bar label position\ncbar.ax.set_title('RBF-INT')\n\n# Set the color bar label position\ncbar.ax.set_ylabel('RBF-INT')\n\n# Set the color bar label position\ncbar.ax.set_xlabel('RBF-INT')\n\n# Set the color bar label position\ncbar.ax.set_title('RBF-INT')\n\n# Set the color bar label position\ncbar.ax.set_ylabel('RBF-INT')\n\n# Set the color bar label position\ncbar.ax.set_xlabel('RBF-INT')\n\n# Set the color bar label position\ncbar.ax.set_title('RBF-INT')\n\n# Set the color bar label position\ncbar.ax.set_ylabel('RBF-INT')\n\n# Set the color bar label position\ncbar.ax.set_xlabel('RBF-INT')\n\n# Set the color bar label position\ncbar.ax.set_title('RBF-INT')\n\n# Set the color bar label position\ncbar.ax.set_ylabel('RBF-INT')\n\n# Set the color bar label position\ncbar.ax.set_xlabel('RBF-INT')\n\n# Set the color bar label position\ncbar.ax.set_title('RBF-INT')\n\n# Set the color bar label position\ncbar.ax.set_ylabel('RBF-INT')\n\n# Set the color bar label position\ncbar.ax.set_xlabel('RBF-INT')\n\n# Set the color bar label position\ncbar.ax.set_title('RBF-INT')\n\n# Set the color bar label position\ncbar.ax.set_ylabel('RBF-INT')\n\n# Set the color bar label position\ncbar.ax.set_xlabel('RBF-INT')\n\n# Set the color bar label position\ncbar.ax.set_title('RBF-INT')\n\n# Set the color bar label position\ncbar.ax.set_ylabel('RBF-INT')\n\n# Set the color bar label position\ncbar.ax.set_xlabel('RBF-INT')\n\n# Set the color bar label position\ncbar.ax.set_title('RBF-INT')\n\n# Set the color bar label position\ncbar.ax.set_ylabel('RBF-INT')\n\n# Set the color bar label position\ncbar.ax.set_xlabel('RBF-INT')\n\n# Set the color bar label position\ncbar.ax.set_title('RBF-INT')\n\n# Set the color bar label position\ncbar.ax.set_ylabel('RBF-INT')\n\n# Set the color bar label position\ncbar.ax.set_xlabel('RBF-INT')\n\n# Set the color bar label position\ncbar.ax.set_title('RBF-INT')\n\n# Set the color bar label position\ncbar.ax.set_ylabel('RBF-INT')\n\n# Set the color bar label position\ncbar.ax.set_xlabel('RBF-INT')\n\n# Set the color bar label position\ncbar.ax.set_title('RBF-INT')\n\n# Set the color bar label position\ncbar.ax.set_ylabel('RBF-INT')\n\n# Set the color bar label position\ncbar.ax.set_xlabel('RBF-INT')\n\n# Set the color bar label position\ncbar.ax.set_title('RBF-INT')\n\n# Set the color bar label position\ncbar.ax.set_ylabel('RBF-INT')\n\n# Set the color bar label position\ncbar.ax.set_xlabel('RBF-INT')\n\n# Set the color bar label position\ncbar.ax.set_title('RBF-INT')\n\n# Set the color bar label position\ncbar.ax.set_ylabel('RBF-INT')\n\n# Set the color bar label position\ncbar.ax.set_xlabel('RBF-INT')\n\n# Set the color bar label position\ncbar.ax.set_title('RBF-INT')\n\n# Set the color bar label position\ncbar.ax.set_ylabel('RBF-INT')\n\n# Set the color bar label position\ncbar.ax.set_xlabel('RBF-INT')\n\n# Set the color bar label position\ncbar.ax.set_title('RBF-INT')\n\n# Set the color bar label position\ncbar.ax.set_ylabel('RBF-INT')\n\n# Set the color bar label position\ncbar.ax.set_xlabel('RBF-INT')\n\n# Set the color bar label position\ncbar.ax.set_title('RBF-INT')\n\n# Set the color bar label position\ncbar.ax.set_ylabel('RBF-INT')\n\n# Set the color bar label position\ncbar.ax.set_xlabel('RBF-INT')\n\n# Set the color bar label position\ncbar.ax.set_title('RBF-INT')\n\n# Set the color bar label position\ncbar.ax.set_ylabel('RBF-INT')\n\n# Set the color bar label position\ncbar.ax.set_xlabel('RBF-INT')\n\n# Set the color bar label position\ncbar.ax.set_title('RBF-INT')\n\n# Set the color bar label position\ncbar.ax.set_ylabel('RBF-INT')\n\n# Set the color bar label position\ncbar.ax.set_xlabel('RBF-INT')\n\n# Set the color bar label position\ncbar.ax.set_title('RBF-INT')\n\n# Set the color bar label position\ncbar.ax.set_ylabel('RBF-INT')\n\n# Set the color bar label position\ncbar.ax.set_xlabel('RBF-INT')\n\n# Set the color bar label position\ncbar.ax.set_title('RBF-INT')\n\n# Set the color bar label position\ncbar.ax.set_ylabel('RBF-INT')\n\n# Set the color bar label position\ncbar.ax.set_xlabel('RBF-INT')\n\n# Set the color bar label position\ncbar.ax.set_title('RBF-INT')\n\n# Set the color bar label position\ncbar.ax.set_ylabel('RBF-INT')\n\n# Set the color bar label position\ncbar.ax.set_xlabel('RBF-INT')\n\n# Set the color bar label position\ncbar.ax.set_title('RBF-INT')\n\n# Set the color bar label position\ncbar.ax.set_ylabel('RBF-INT')\n\n# Set the color bar label position\ncbar.ax.set_xlabel('RBF-INT')\n\n# Set the color bar label position\ncbar.ax.set_title('RBF-INT')\n\n# Set the color bar label position\ncbar.ax.set_ylabel('RBF-INT')\n\n# Set the color bar label position\ncbar.ax.set_xlabel('RBF-INT')\n\n# Set the color bar label position\ncbar.ax.set_title('RBF-INT')\n\n# Set the color bar label position\ncbar.ax.set_ylabel('RBF-INT')\n\n# Set the color bar label position\ncbar.ax.set_xlabel('RBF-INT')\n\n# Set the color bar label position\ncbar.ax.set_title('RBF-INT')\n\n# Set the color bar label position\ncbar.ax.set_ylabel('RBF-INT')\n\n# Set the color bar label position\ncbar.ax.set_xlabel('RBF-INT')\n\n# Set the color bar label position\ncbar.ax.set_title('RBF-INT')\n\n# Set the color bar label position\ncbar.ax.set_ylabel('RBF-INT')\n\n# Set the color bar label position\ncbar.ax.set_xlabel('RBF-INT')\n\n# Set the color bar label position\ncbar.ax.set_title('RBF-INT')\n\n# Set the color bar label position\ncbar.ax.set_ylabel('RBF-INT')\n\n# Set the color bar label position\ncbar.ax.set_xlabel('RBF-INT')\n\n# Set the color bar label position\ncbar.ax.set_title('RBF-INT')\n\n# Set the color bar label position\ncbar.ax.set_ylabel('RBF-INT')\n\n# Set the color bar label position\ncbar.ax.set_xlabel('RBF-INT')\n\n# Set the color bar label position\ncbar.ax.set_title('RBF-INT')\n\n# Set the color bar label position\ncbar.ax.set_ylabel('RBF-INT')\n\n# Set the color bar label position\ncbar.ax.set_xlabel('RBF-INT')\n\n# Set the color bar label position\ncbar.ax.set_title('RBF-INT')\n\n# Set the color bar label position\ncbar.ax.set_ylabel('RBF-INT')\n\n# Set the color bar label position\ncbar.ax.set_xlabel('RBF-INT')\n\n# Set the color bar label position\ncbar.ax.set_title('RBF-INT')\n\n# Set the color bar label position\ncbar.ax.set_ylabel('RBF-INT')\n\n# Set the color bar label position\ncbar.ax.set_xlabel('RBF-INT')\n\n# Set the color bar label position\ncbar.ax.set_title('RBF-INT')\n\n# Set the color bar label position\ncbar.ax.set_ylabel('RBF-INT')\n\n# Set the color bar label position\ncbar.ax.set_xlabel('RBF-INT')\n\n# Set the color bar label position\ncbar.ax.set_title('RBF-INT')\n\n# Set the color bar label position\ncbar.ax.set_ylabel('RBF-INT')\n\n# Set the color bar label position\ncbar.ax.set_xlabel('RBF-INT')\n\n# Set the color bar label position\ncbar.ax.set_title('RBF-INT')\n\n# Set the color bar label position\ncbar.ax.set_ylabel('RBF-INT')\n\n# Set the color bar label position\ncbar.ax.set_xlabel('RBF-INT')\n\n# Set the color bar label position\ncbar.ax.set_title('RBF-INT')\n\n# Set the color bar label position\ncbar.ax.set_ylabel('RBF-INT')\n\n# Set the color bar label position\ncbar.ax.set_xlabel('RBF-INT')\n\n# Set the color bar label position\ncbar.ax.set_title('RBF-INT')\n\n# Set the color bar label position\ncbar.ax.set_ylabel('RBF-INT')\n\n# Set the color bar label position\ncbar.ax.set_xlabel('RBF-INT')\n\n# Set the color bar label position\ncbar.ax.set_title('RBF-INT')\n\n# Set the color bar label position\ncbar.ax.set_ylabel('RBF-INT')\n\n# Set the color bar label position\ncbar.ax.set_xlabel('RBF-INT')\n\n# Set the color bar label position\ncbar.ax.set_title('RBF-INT')\n\n# Set the color bar label position\ncbar.ax.set_ylabel('RBF-INT')\n\n# Set the color bar label position\ncbar.ax.set_xlabel('RBF-INT')\n\n# Set the color bar label position\ncbar.ax.set_title('RBF-INT')\n\n# Set the color bar label position\ncbar.ax.set_ylabel('RBF-INT')\n\n# Set the color bar label position\ncbar.ax.set_xlabel('RBF-INT')\n\n# Set the color bar label position\ncbar.ax.set_title('RBF-INT')\n\n# Set the color bar label position\ncbar.ax.set_ylabel('RBF-INT')\n\n# Set the color bar label position\ncbar.ax.set_xlabel('RBF-INT')\n\n# Set the color bar label position\ncbar.ax.set_title('RBF-INT')\n\n# Set the color bar label position\ncbar.ax.set_ylabel('RBF-INT')\n\n# Set the color bar label position\ncbar.ax.set_xlabel('RBF-INT')\n\n# Set the color bar label position\ncbar.ax.set_title('RBF-INT')\n\n# Set the color bar label position\ncbar.ax.set_ylabel('RBF-INT')\n\n# Set the color bar label position\ncbar.ax.set_xlabel('RBF-INT')\n\n# Set the color bar label position\ncbar.ax.set_title('RBF-INT')\n\n# Set the color bar label position\ncbar.ax.set_ylabel('RBF-INT')\n\n# Set the color bar label position\ncbar.ax.set_xlabel('RBF-INT')\n\n# Set the color bar label position\ncbar.ax.set_title('RBF-INT')\n\n# Set the color bar label position\ncbar.ax.set_ylabel('RBF-INT')\n\n# Set the color bar label position\ncbar.ax.set_xlabel('RBF-INT')\n\n# Set the color bar label position\ncbar.ax.set_title('RBF-INT')\n\n# Set the color bar label position\ncbar.ax.set_ylabel('RBF-INT')\n\n# Set the color bar label position\ncbar.ax.set_xlabel('RBF"}
{"file": "dataset/ori_500/bar_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nmodels = ['w/o DaQNR', 'w/o CPRN', 'w/o QCN', 'Full model']\nlive_values = [0.975, 0.975, 0.975, 0.975]\nsroi_values = [0.965, 0.965, 0.965, 0.965]\nt2013_values = [0.985, 0.985, 0.985, 0.985]\nlive_m_values = [0.955, 0.955, 0.955, 0.955]\nsrocc_values = [0.945, 0.945, 0.945, 0.945]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 3))\n\n# Plot the bars\nax.bar(models, live_values, color='blue', label='Live')\nax.bar(models, sroi_values, bottom=live_values, color='orange', label='SROI')\nax.bar(models, t2013_values, bottom=[x+y for x,y in zip(live_values, sroi_values)], color='yellow', label='TID2013')\nax.bar(models, live_m_values, bottom=[x+y+z for x,y,z in zip(live_values, sroi_values, t2013_values)], color='green', label='Live-M')\nax.bar(models, srocc_values, bottom=[x+y+z+t for x,y,z,t in zip(live_values, sroi_values, t2013_values, live_m_values)], color='brown', label='SROCC')\n\n# Set the title and labels\nax.set_title('Models')\nax.set_xlabel('Model')\nax.set_ylabel('Metric Values')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_30.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nproducts = ['Mixtral-8x7b-Instruct', 'GPT-3.5', 'GPT-4']\npass_rates = [6.11, 28.33, 31.11]\nzero_shot = [99.44, 85.0, 99.44]\none_shot = [60.56, 60.56, 60.56]\nds_agent = [42.78, 42.78, 42.78]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Plot the bars\nax.bar(products, pass_rates, color='purple')\nax.bar(products, zero_shot, bottom=pass_rates, color='pink')\nax.bar(products, one_shot, bottom=[i+j for i,j in zip(pass_rates, zero_shot)], color='skyblue')\nax.bar(products, ds_agent, bottom=[i+j+k for i,j,k in zip(pass_rates, zero_shot, one_shot)], color='purple')\n\n# Set the title and labels\nax.set_title('One Pass Rate (%)')\nax.set_xlabel('Products')\nax.set_ylabel('Pass Rate (%)')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_31.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ncategories = ['LMM-based vs. TPLM-based', 'LMM-based vs. Template', 'LMM-based vs. Markdown', 'TPLM-based vs. Template', 'TPLM-based vs. Markdown', 'Markdown vs. Template']\nwin_rates = [17.0, 20.0, 25.0, 30.5, 31.5, 19.5]\ntie_rates = [54.0, 67.5, 56.5, 57.5, 54.5, 61.0]\nloss_rates = [29.0, 12.5, 18.5, 12.0, 14.0, 19.5]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot bars for win rates\nax.bar(categories, win_rates, color='skyblue', label='Win')\n\n# Plot bars for tie rates\nax.bar(categories, tie_rates, bottom=win_rates, color='lightgreen', label='Tie')\n\n# Plot bars for loss rates\nax.bar(categories, loss_rates, bottom=[x + y for x, y in zip(win_rates, tie_rates)], color='salmon', label='Loss')\n\n# Set labels and title\nax.set_xlabel('Categories')\nax.set_ylabel('Percentage')\nax.set_title('Comparison of Win, Tie, and Loss Rates')\nax.legend()\n\n# Set x-axis limits\nax.set_xlim(0, len(categories))\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_32.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nspecies = ['Combat Spider', 'Milky Cow', 'Shear Sheep']\nprobabilities = [0.72, 0.74, 0.56]\n\n# Create bar chart\nfig, ax = plt.subplots(figsize=(6.0, 2.0))\nax.bar(species, probabilities, color='blue')\n\n# Set title and labels\nax.set_title('Probability of Improvement over VLM Image Encoder Baseline Returns')\nax.set_xlabel('Species')\nax.set_ylabel('Probability of Improvement')\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_33.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nsteps = [0, 1, 2, 3, 4]\navg_following_rate = [100.0, 60.0, 27.7, 100.0, 91.7]\nfollowing_error_rate = [10.0, 83.3, 48.1, 100.0, 63.4]\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(10.0, 5.0))\nax.bar(steps, avg_following_rate, color='blue', label='Avg. Following Rate')\nax.bar(steps, following_error_rate, bottom=avg_following_rate, color='green', label='Following-related Error Rate')\n\n# Set the title and labels\nax.set_title('Instruction Following Results In Different Steps (gpt-3.5-turbo)')\nax.set_xlabel('Steps')\nax.set_ylabel('Scores')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_34.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 4.0))\n\n# Set the title of the plot\nax.set_title('RegOpt')\n\n# Set the x-axis label\nax.set_xlabel('x')\n\n# Set the y-axis label\nax.set_ylabel('y')\n\n# Set the x-axis limits\nax.set_xlim(0, 100)\n\n# Set the y-axis limits\nax.set_ylim(0, 100)\n\n# Set the x-axis ticks\nax.set_xticks([0, 25, 50, 75, 100])\n\n# Set the y-axis ticks\nax.set_yticks([0, 25, 50, 75, 100])\n\n# Set the x-axis tick labels\nax.set_xticklabels(['0%', '25%', '50%', '75%', '100%'])\n\n# Set the y-axis tick labels\nax.set_yticklabels(['0%', '25%', '50%', '75%', '100%'])\n\n# Set the background color of the plot\nax.set_facecolor('#F0E68C')\n\n# Set the grid lines\nax.grid(True)\n\n# Set the color of the grid lines\nax.grid(color='yellow')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='yellow')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='yellow')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='blue')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='blue')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='blue')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='blue')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='blue')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='blue')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='blue')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='blue')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='blue')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='blue')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='blue')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='blue')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='blue')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='blue')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='blue')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='blue')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='blue')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='blue')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='blue')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='blue')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='blue')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='blue')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='blue')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='blue')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='blue')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='blue')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='blue')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='blue')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='blue')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='blue')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='blue')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='blue')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='blue')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='blue')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='blue')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='blue')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='blue')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='blue')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='blue')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='blue')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='blue')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='blue')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='blue')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='blue')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='blue')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='blue')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='blue')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='blue')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='blue')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='blue')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='blue')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='blue')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='blue')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='blue')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='blue')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='blue')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='blue')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='blue')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='blue')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='blue')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='blue')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='blue')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='blue')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='blue')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='blue')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='blue')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='blue')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='blue')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='blue')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='blue')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='blue')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='blue')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='blue')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='blue')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='blue')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='blue')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='blue')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='blue')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='blue')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='blue')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='blue')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='blue')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='blue')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='blue')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='blue')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='blue')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='blue')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='blue')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='blue')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='blue')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='blue')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='blue')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='blue')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='blue')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='blue')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='blue')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='blue')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='blue')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='blue')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='blue')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='blue')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='blue')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='blue')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='blue')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='blue')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='blue')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='blue')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='blue')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='blue')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='blue')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='blue')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='blue')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='blue')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='blue')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='blue')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='blue')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='blue')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='blue')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='blue')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='blue')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='blue')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='blue')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='blue')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='blue')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='blue')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='blue')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='blue')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='blue')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='blue')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='blue')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='blue')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='blue')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='blue')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='blue')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='blue')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='blue')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='blue')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='blue')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='blue')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='blue')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='blue')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='blue')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='blue')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='blue')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='blue')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='blue')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='blue')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='blue')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='blue')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='blue')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='blue')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='blue')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='blue')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='blue')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='blue')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='blue')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='blue')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='blue')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='blue')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='blue')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='blue')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='blue')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='blue')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='blue')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='blue')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='blue')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='blue')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='blue')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='blue')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='blue')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='blue')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='blue')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='blue')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='blue')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='blue')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='blue')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='blue')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='blue')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='blue')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='blue')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='blue')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='blue')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='blue')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='blue')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='blue')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='blue')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='blue')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='blue')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='blue')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='blue')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='blue')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='blue')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='blue')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='blue')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='blue')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='blue')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='blue')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='blue')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='blue')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='blue')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='blue')\n\n# Set the color of the y-axis grid lines\n"}
{"file": "dataset/ori_500/bar_35.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nbrands = ['Random', 'Llama2', 'Mistral']\nscores = [5.52, 5.53, 5.83]\nmt_bench_scores = [6.57, 6.75, 6.81]\n\n# Create a figure and axis\nfig, ax1 = plt.subplots(figsize=(8.0, 5.0))\n\n# Plot the scores\ncolor = 'tab:blue'\nax1.set_xlabel('Brands')\nax1.set_ylabel('Scores', color=color)\nax1.bar(brands, scores, color=color)\nax1.tick_params(axis='y', labelcolor=color)\n\n# Create a second y-axis for MT-Bench scores\nax2 = ax1.twinx()  \ncolor = 'tab:red'\nax2.set_ylabel('MT-Bench Score', color=color)  \nax2.bar(brands, mt_bench_scores, color=color, alpha=0.5)\nax2.tick_params(axis='y', labelcolor=color)\n\nfig.tight_layout()  \nplt.show()\n```"}
{"file": "dataset/ori_500/bar_36.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nx = [100, 1000]\ny = [49.98, 49.63]\nwidth = [50, 50]\nheight = [51.05, 50.74]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.61, 5.23))\n\n# Plot the rectangles\nfor i in range(len(x)):\n    ax.barh(y[i], width[i], height[i], color='brown')\n\n# Set the title and labels\nax.set_title('Random Sampling')\nax.set_xlabel('Number of Clusters')\nax.set_ylabel('MMSE')\n\n# Add a legend\nax.legend(['Random Sampling', 'Uniform', 'ClusterClip'], loc='upper right')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_37.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nmovies = ['ResNet18', 'AlexNet', 'ResNet50']\nspeedups = [7.4, 6.1, 4.3]\nperturbations = [0, 50, 48, 75, 68, 87.5, 78]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(12, 4))\n\n# Plot bars for speedup\nax.bar(movies, speedups, color='skyblue')\n\n# Plot lines for perturbation\nfor i, p in enumerate(perturbations):\n    ax.plot([i, i], [0, p], color='gray', linestyle='--')\n\n# Set labels and title\nax.set_xlabel('Movies')\nax.set_ylabel('Speedup')\nax.set_title('Perturbation')\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_38.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the plot\nx = ['CL-7b', 'CL-13b', 'CL-34b', 'DS-6.7b', 'DS-33b', 'SC']\ny = [20, 30, 40, 50, 60, 70]\ncolors = ['green', 'blue', 'red', 'purple', 'orange', 'pink']\n\n# Create a bar chart\nplt.bar(x, y, color=colors)\n\n# Set the title and labels\nplt.title('LeetCode, DS-6.7b')\nplt.xlabel('Problems')\nplt.ylabel('Accuracies')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_39.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ndata = {\n    'Recost (1% wins)': [53, 80, 116, 99, 179],\n    'Tie': [6, 33, 49, 50, 23],\n    'Alpacas wins': [21, 67, 53, 103, 98]\n}\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Plot bars\nfor i, (label, values) in enumerate(data.items()):\n    ax.barh(range(len(values)), values, left=[sum(values[:j]) for j in range(len(values))], height=0.8, label=label)\n\n# Set labels and title\nax.set_xlabel('Wins')\nax.set_title('Winstreaks by Team')\nax.legend()\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nbrands = ['CometKiwi', 'LaBSE', 'IF', 'Max', 'Ppl', 'STARE', 'Wass Combo', 'ALTI+']\nsales = [35.15, 26.86, 26.08, 19.08, 22.09, 20.67, 58.99, 66.19]\naggregations = [48.38, 36.63, 32.9, 23.9, 26.38, 17.06]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Plot the bars\nax.bar(brands, sales, color='green')\n\n# Add a horizontal line at the median\nmedian = sum(sales) / len(sales)\nax.axhline(y=median, color='red', linestyle='-')\n\n# Set the title\nax.set_title('FPR@90TPR on Guerreiro et al. 2022')\n\n# Set the x-axis label\nax.set_xlabel('Brands')\n\n# Set the y-axis label\nax.set_ylabel('Sales')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_40.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ncategories = ['Literal', 'Assignment', 'Operator', 'Comment', 'Operation', 'Exception Handling', 'Method Call', 'External Variable/Method', 'Return', 'Variable', 'External Class', 'Argument', 'Conditional Block', 'Loop', 'Conditional Statement', 'Variable Declaration', 'Method Declaration', 'Parameter']\nvalues = [120, 110, 100, 90, 80, 70, 60, 50, 40, 30, 20, 10, 5, 3, 2, 1, 0]\n\n# Create a bar chart\nplt.figure(figsize=(10, 5))\nplt.bar(categories, values, color='skyblue')\nplt.xlabel('Semantic Category')\nplt.ylabel('Difference (%)')\nplt.title('Relative Difference in Machine vs. Human Focus on Semantic Categories')\n\n# Rotate x-axis labels for better visibility\nplt.xticks(rotation=90)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_41.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\nx = [5, 10, 15, 20]\ny1 = [66.3, 61.9, 53.8, 10.1]\ny2 = [49.3, 45.7, 41.6, 31.5]\ny3 = [36.3, 36.0, 36.5, 0.0]\ny4 = [48.0, 42.6, 36.5, 0.0]\ny5 = [43.8, 40.2, 30.6, 0.0]\ny6 = [49.5, 42.8, 36.5, 0.0]\ny7 = [40.5, 40.2, 30.6, 0.0]\ny8 = [43.8, 40.2, 30.6, 0.0]\ny9 = [22.3, 25.9, 22.5, 0.0]\ny10 = [64.7, 56.8, 43.4, 0.0]\ny11 = [49.5, 42.8, 36.5, 0.0]\ny12 = [40.5, 40.2, 30.6, 0.0]\ny13 = [43.8, 40.2, 30.6, 0.0]\ny14 = [22.3, 25.9, 22.5, 0.0]\ny15 = [64.7, 56.8, 43.4, 0.0]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(14, 4))\n\n# Plot the data\nax.plot(x, y1, label='Truthful: Misleading = 2:0', color='blue')\nax.plot(x, y2, label='Truthful: Misleading = 2:1', color='red')\nax.plot(x, y3, label='Truthful: Misleading = 2:2', color='blue')\nax.plot(x, y4, label='Misleading: Misleading = 2:0', color='red')\nax.plot(x, y5, label='Misleading: Misleading = 2:1', color='blue')\nax.plot(x, y6, label='Misleading: Misleading = 2:2', color='red')\nax.plot(x, y7, label='Truthful: Misleading = 1:0', color='blue')\nax.plot(x, y8, label='Truthful: Misleading = 1:1', color='red')\nax.plot(x, y9, label='Truthful: Misleading = 1:2', color='blue')\nax.plot(x, y10, label='Misleading: Misleading = 0:0', color='red')\nax.plot(x, y11, label='Misleading: Misleading = 0:1', color='blue')\nax.plot(x, y12, label='Misleading: Misleading = 0:2', color='red')\nax.plot(x, y13, label='Truthful: Misleading = 0:0', color='blue')\nax.plot(x, y14, label='Truthful: Misleading = 0:1', color='red')\nax.plot(x, y15, label='Truthful: Misleading = 0:2', color='blue')\n\n# Set the limits of the x-axis\nax.set_xlim(0, 25)\n\n# Set the limits of the y-axis\nax.set_ylim(-80, 80)\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_42.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the bar chart\nbrands = ['PROST', 'ARC-easy', 'COMVE', 'OpenBookQA', 'SciQ', 'NumSense', 'CoQA', 'ComQA2.0', 'Comqrtz', 'CyC', 'Winogventi', 'Com2Sense', 'CODAH', 'WSC', 'ARC-challenge', 'SocialIQA', 'HellaSWAG-wikiHow', 'HellaSWAG-elem', 'Winogrande', 'PIQA', 'QuaRel', 'QuaCT', 'SC', 'alphaNLI', 'SWAG']\nda_acc_values = [3.4, 3.2, 3.1, 3.0, 2.9, 2.8, 2.7, 2.6, 2.5, 2.4, 2.3, 2.2, 2.1, 2.0, 1.9, 1.8, 1.7, 1.6, 1.5, 1.4, 1.3, 1.2, 1.1, 1.0]\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Plot the bar chart\nax.bar(brands, da_acc_values, color='blue')\n\n# Set the title of the plot\nax.set_title('Model = Vicuna')\n\n# Set the x-axis label\nax.set_xlabel('Brand (with Acc)')\n\n# Set the y-axis label\nax.set_ylabel('\u0394Acc')\n\n# Set the x-tick labels\nax.set_xticklabels(brands, rotation=90)\n\n# Set the y-limits\nax.set_ylim(-8, 6)\n\n# Set the colorbar\ncmap = plt.cm.get_cmap('coolwarm')\nnorm = plt.Normalize(vmin=-1, vmax=1)\nsm = plt.cm.ScalarMappable(cmap=cmap, norm=norm)\nsm.set_array([])\ncbar = fig.colorbar(sm)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_43.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\ndata = {\n    'MedMCQA': [48.1, 57.2, 59.3, 64.9, 72.3, 79.1, 54.3],\n    'MedQA (USMLE)': [56.0, 62.2, 64.4, 64.4, 67.6, 86.5, 90.2],\n    'PubMedQA': [74.4, 75.8, 76.8, 77.4, 79.0, 81.8, 82.0, 88.0, 90.2, 93.2, 95.2, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 9"}
{"file": "dataset/ori_500/bar_44.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\ncategories = ['AFAN', 'AFBE', 'AFCE', 'AFAO', 'AFEX', 'AFEG', 'AFPK', 'AFPO', 'AFPP', 'AFPR', 'AFSC', 'AFSL', 'AFSR', 'AFSS', 'AFST', 'AFTH', 'AFVT', 'AFWS', 'AFWT', 'DAH', 'IC', 'SS']\nvalues = [45, 42, 39, 36, 33, 30, 27, 24, 21, 18, 15, 12, 9, 6, 3, 0, 0, 0, 0, 0, 0]\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\nbars = ax.bar(categories, values, color='blue')\n\n# Add a horizontal line at y=20\nax.axhline(y=20, color='orange', linestyle='-')\n\n# Set the title and labels\nax.set_title('Category Values')\nax.set_xlabel('Categories')\nax.set_ylabel('Values')\n\n# Rotate the category labels for better visibility\nplt.xticks(rotation=90)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_45.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nx = [3, 5, 7, 9, 11]\ny = [2.5, 4.5, 6.5, 8.5, 10.5]\ncolors = ['pink', 'red', 'lightblue', 'skyblue', 'darkblue']\nlabels = ['LLAMA-Default', 'LLAMA-HAG', 'Vicuna-Default', 'Vicuna-HAG']\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 7.0))\n\n# Plot the data\nfor i in range(len(x)):\n    ax.plot([x[i], x[i]], [0, y[i]], color=colors[i], label=labels[i])\n\n# Set the limits of the axes\nax.set_xlim(2, 12)\nax.set_ylim(-4, 11)\n\n# Set the labels of the axes\nax.set_xlabel('Num of Constraint Words')\nax.set_ylabel('Score')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_46.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nbrands = ['Lavila', 'Video-LLaMA', 'BLIP1', 'BLIP2 Model', 'LLaVA', 'OSCaR', 'GPT4V']\nsales = [0.0, 0.71, 4.64, 4.64, 31.79, 73.93, 82.5]\n\n# Create a bar chart\nplt.figure(figsize=(10, 6))\nplt.bar(brands, sales, color='skyblue')\n\n# Set title and labels\nplt.title('Human Study')\nplt.xlabel('Brands')\nplt.ylabel('Sales (%)')\n\n# Rotate x-axis labels for better visibility\nplt.xticks(rotation=45)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_47.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the first chart\nlabels = ['HH', 'Reddit', 'IMDB', 'AVG']\nvalues = [22, 25, 30, 26]\ncolors = ['red', 'orange', 'pink', 'brown']\n\n# Data for the second chart\nvalues2 = [40, 30, 50, 40, 20, 30, 20, 30, 20, 30]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(13, 6))\n\n# Plot the first chart\nax.bar(labels, values, color=colors)\nax.set_title('COPR v.s. Golden (Human Eval)')\nax.set_xlabel('Category')\nax.set_ylabel('Percentage')\n\n# Plot the second chart\nax2 = ax.twinx()\nax2.bar(labels, values2, color='lightblue')\nax2.set_title('COPR v.s. Golden (GPT-4 Eval)')\nax2.set_ylabel('Percentage')\n\n# Add colored rectangles to the second chart\nfor i, v in enumerate(values2):\n    ax2.add_patch(plt.Rectangle((i - 0.2, 0), 0.4, v, color=colors[i]))\n\n# Add colored rectangles to the first chart\nfor i, v in enumerate(values):\n    ax.add_patch(plt.Rectangle((i - 0.2, 0), 0.4, v, color=colors[i]))\n\n# Add colored rectangles to the second chart\nfor i, v in enumerate(values2):\n    ax2.add_patch(plt.Rectangle((i - 0.2, 0), 0.4, v, color=colors[i]))\n\n# Add colored rectangles to the first chart\nfor i, v in enumerate(values):\n    ax.add_patch(plt.Rectangle((i - 0.2, 0), 0.4, v, color=colors[i]))\n\n# Add colored rectangles to the second chart\nfor i, v in enumerate(values2):\n    ax2.add_patch(plt.Rectangle((i - 0.2, 0), 0.4, v, color=colors[i]))\n\n# Add colored rectangles to the first chart\nfor i, v in enumerate(values):\n    ax.add_patch(plt.Rectangle((i - 0.2, 0), 0.4, v, color=colors[i]))\n\n# Add colored rectangles to the second chart\nfor i, v in enumerate(values2):\n    ax2.add_patch(plt.Rectangle((i - 0.2, 0), 0.4, v, color=colors[i]))\n\n# Add colored rectangles to the first chart\nfor i, v in enumerate(values):\n    ax.add_patch(plt.Rectangle((i - 0.2, 0), 0.4, v, color=colors[i]))\n\n# Add colored rectangles to the second chart\nfor i, v in enumerate(values2):\n    ax2.add_patch(plt.Rectangle((i - 0.2, 0), 0.4, v, color=colors[i]))\n\n# Add colored rectangles to the first chart\nfor i, v in enumerate(values):\n    ax.add_patch(plt.Rectangle((i - 0.2, 0), 0.4, v, color=colors[i]))\n\n# Add colored rectangles to the second chart\nfor i, v in enumerate(values2):\n    ax2.add_patch(plt.Rectangle((i - 0.2, 0), 0.4, v, color=colors[i]))\n\n# Add colored rectangles to the first chart\nfor i, v in enumerate(values):\n    ax.add_patch(plt.Rectangle((i - 0.2, 0), 0.4, v, color=colors[i]))\n\n# Add colored rectangles to the second chart\nfor i, v in enumerate(values2):\n    ax2.add_patch(plt.Rectangle((i - 0.2, 0), 0.4, v, color=colors[i]))\n\n# Add colored rectangles to the first chart\nfor i, v in enumerate(values):\n    ax.add_patch(plt.Rectangle((i - 0.2, 0), 0.4, v, color=colors[i]))\n\n# Add colored rectangles to the second chart\nfor i, v in enumerate(values2):\n    ax2.add_patch(plt.Rectangle((i - 0.2, 0), 0.4, v, color=colors[i]))\n\n# Add colored rectangles to the first chart\nfor i, v in enumerate(values):\n    ax.add_patch(plt.Rectangle((i - 0.2, 0), 0.4, v, color=colors[i]))\n\n# Add colored rectangles to the second chart\nfor i, v in enumerate(values2):\n    ax2.add_patch(plt.Rectangle((i - 0.2, 0), 0.4, v, color=colors[i]))\n\n# Add colored rectangles to the first chart\nfor i, v in enumerate(values):\n    ax.add_patch(plt.Rectangle((i - 0.2, 0), 0.4, v, color=colors[i]))\n\n# Add colored rectangles to the second chart\nfor i, v in enumerate(values2):\n    ax2.add_patch(plt.Rectangle((i - 0.2, 0), 0.4, v, color=colors[i]))\n\n# Add colored rectangles to the first chart\nfor i, v in enumerate(values):\n    ax.add_patch(plt.Rectangle((i - 0.2, 0), 0.4, v, color=colors[i]))\n\n# Add colored rectangles to the second chart\nfor i, v in enumerate(values2):\n    ax2.add_patch(plt.Rectangle((i - 0.2, 0), 0.4, v, color=colors[i]))\n\n# Add colored rectangles to the first chart\nfor i, v in enumerate(values):\n    ax.add_patch(plt.Rectangle((i - 0.2, 0), 0.4, v, color=colors[i]))\n\n# Add colored rectangles to the second chart\nfor i, v in enumerate(values2):\n    ax2.add_patch(plt.Rectangle((i - 0.2, 0), 0.4, v, color=colors[i]))\n\n# Add colored rectangles to the first chart\nfor i, v in enumerate(values):\n    ax.add_patch(plt.Rectangle((i - 0.2, 0), 0.4, v, color=colors[i]))\n\n# Add colored rectangles to the second chart\nfor i, v in enumerate(values2):\n    ax2.add_patch(plt.Rectangle((i - 0.2, 0), 0.4, v, color=colors[i]))\n\n# Add colored rectangles to the first chart\nfor i, v in enumerate(values):\n    ax.add_patch(plt.Rectangle((i - 0.2, 0), 0.4, v, color=colors[i]))\n\n# Add colored rectangles to the second chart\nfor i, v in enumerate(values2):\n    ax2.add_patch(plt.Rectangle((i - 0.2, 0), 0.4, v, color=colors[i]))\n\n# Add colored rectangles to the first chart\nfor i, v in enumerate(values):\n    ax.add_patch(plt.Rectangle((i - 0.2, 0), 0.4, v, color=colors[i]))\n\n# Add colored rectangles to the second chart\nfor i, v in enumerate(values2):\n    ax2.add_patch(plt.Rectangle((i - 0.2, 0), 0.4, v, color=colors[i]))\n\n# Add colored rectangles to the first chart\nfor i, v in enumerate(values):\n    ax.add_patch(plt.Rectangle((i - 0.2, 0), 0.4, v, color=colors[i]))\n\n# Add colored rectangles to the second chart\nfor i, v in enumerate(values2):\n    ax2.add_patch(plt.Rectangle((i - 0.2, 0), 0.4, v, color=colors[i]))\n\n# Add colored rectangles to the first chart\nfor i, v in enumerate(values):\n    ax.add_patch(plt.Rectangle((i - 0.2, 0), 0.4, v, color=colors[i]))\n\n# Add colored rectangles to the second chart\nfor i, v in enumerate(values2):\n    ax2.add_patch(plt.Rectangle((i - 0.2, 0), 0.4, v, color=colors[i]))\n\n# Add colored rectangles to the first chart\nfor i, v in enumerate(values):\n    ax.add_patch(plt.Rectangle((i - 0.2, 0), 0.4, v, color=colors[i]))\n\n# Add colored rectangles to the second chart\nfor i, v in enumerate(values2):\n    ax2.add_patch(plt.Rectangle((i - 0.2, 0), 0.4, v, color=colors[i]))\n\n# Add colored rectangles to the first chart\nfor i, v in enumerate(values):\n    ax.add_patch(plt.Rectangle((i - 0.2, 0), 0.4, v, color=colors[i]))\n\n# Add colored rectangles to the second chart\nfor i, v in enumerate(values2):\n    ax2.add_patch(plt.Rectangle((i - 0.2, 0), 0.4, v, color=colors[i]))\n\n# Add colored rectangles to the first chart\nfor i, v in enumerate(values):\n    ax.add_patch(plt.Rectangle((i - 0.2, 0), 0.4, v, color=colors[i]))\n\n# Add colored rectangles to the second chart\nfor i, v in enumerate(values2):\n    ax2.add_patch(plt.Rectangle((i - 0.2, 0), 0.4, v, color=colors[i]))\n\n# Add colored rectangles to the first chart\nfor i, v in enumerate(values):\n    ax.add_patch(plt.Rectangle((i - 0.2, 0), 0.4, v, color=colors[i]))\n\n# Add colored rectangles to the second chart\nfor i, v in enumerate(values2):\n    ax2.add_patch(plt.Rectangle((i - 0.2, 0), 0.4, v, color=colors[i]))\n\n# Add colored rectangles to the first chart\nfor i, v in enumerate(values):\n    ax.add_patch(plt.Rectangle((i - 0.2, 0), 0.4, v, color=colors[i]))\n\n# Add colored rectangles to the second chart\nfor i, v in enumerate(values2):\n    ax2.add_patch(plt.Rectangle((i - 0.2, 0), 0.4, v, color=colors[i]))\n\n# Add colored rectangles to the first chart\nfor i, v in enumerate(values):\n    ax.add_patch(plt.Rectangle((i - 0.2, 0), 0.4, v, color=colors[i]))\n\n# Add colored rectangles to the second chart\nfor i, v in enumerate(values2):\n    ax2.add_patch(plt.Rectangle((i - 0.2, 0), 0.4, v, color=colors[i]))\n\n# Add colored rectangles to the first chart\nfor i, v in enumerate(values):\n    ax.add_patch(plt.Rectangle((i - 0.2, 0), 0.4, v, color=colors[i]))\n\n# Add colored rectangles to the second chart\nfor i, v in enumerate(values2):\n    ax2.add_patch(plt.Rectangle((i - 0.2, 0), 0.4, v, color=colors[i]))\n\n# Add colored rectangles to the first chart\nfor i, v in enumerate(values):\n    ax.add_patch(plt.Rectangle((i - 0.2, 0), 0.4, v, color=colors[i]))\n\n# Add colored rectangles to the second chart\nfor i, v in enumerate(values2):\n    ax2.add_patch(plt.Rectangle((i - 0.2, 0), 0.4, v, color=colors[i]))\n\n# Add colored rectangles to the first chart\nfor i, v in enumerate(values):\n    ax.add_patch(plt.Rectangle((i - 0.2, 0), 0.4, v, color=colors[i]))\n\n# Add colored rectangles to the second chart\nfor i, v in enumerate(values2):\n    ax2.add_patch(plt.Rectangle((i - 0.2, 0), 0.4, v, color=colors[i]))\n\n# Add colored rectangles to the first chart\nfor i, v in enumerate(values):\n    ax.add_patch(plt.Rectangle((i - 0.2, 0), 0.4, v, color=colors[i]))\n\n# Add colored rectangles to the second chart\nfor i, v in enumerate(values2):\n    ax2.add_patch(plt.Rectangle((i - 0.2, 0), 0.4, v, color=colors[i]))\n\n# Add colored rectangles to the first chart\nfor i, v in enumerate(values):\n    ax.add_patch(plt.Rectangle((i - 0.2, 0), 0.4, v, color=colors[i]))\n\n# Add colored rectangles to the second chart\nfor i, v in enumerate(values2):\n    ax2.add_patch(plt.Rectangle((i - 0.2, 0), 0.4, v, color=colors[i]))\n\n# Add colored rectangles to the first chart\nfor i, v in enumerate(values):\n    ax.add_patch(plt.Rectangle((i - 0.2, 0), 0.4, v, color=colors[i]))\n\n# Add colored rectangles to the second chart\nfor i, v in enumerate(values2):\n    ax2.add_patch(plt.Rectangle((i - 0.2, 0), 0.4, v, color=colors[i]))\n\n# Add colored rectangles to the first chart\nfor i, v in enumerate(values):\n    ax.add_patch(plt.Rectangle((i - 0.2, 0), 0.4, v, color=colors[i]))\n\n# Add colored rectangles to the second chart\nfor i, v in enumerate(values2):\n    ax2.add_patch(plt.Rectangle((i - 0.2, 0), 0.4, v, color=colors[i]))\n\n# Add colored rectangles to the first chart\nfor i, v in enumerate(values):\n    ax.add_patch(plt.Rectangle((i - 0.2, 0), 0.4, v, color=colors[i]))\n\n# Add colored rectangles to the second chart\nfor i, v in enumerate(values2):\n    ax2.add_patch(plt.Rectangle((i - 0.2, 0), 0.4, v, color=colors[i]))\n\n# Add colored rectangles to the first chart\nfor i, v in enumerate(values):\n    ax.add_patch(plt.Rectangle((i - 0.2, 0), 0.4, v, color=colors[i]))\n\n# Add colored rectangles to the second chart\nfor i, v in enumerate(values2):\n    ax2.add_patch(plt.Rectangle((i - 0.2, 0), 0.4, v, color=colors[i]))\n\n# Add colored rectangles to the first chart\nfor i, v in enumerate(values):\n    ax.add_patch(plt.Rectangle((i - 0.2, 0), 0.4, v, color=colors[i]))\n\n# Add colored rectangles to the second chart\nfor i, v in enumerate(values2):\n    ax2.add_patch(plt.Rectangle((i - 0.2, 0), 0.4, v, color=colors[i]))\n\n# Add colored rectangles to the first chart\nfor i, v in enumerate(values):\n    ax.add_patch(plt.Rectangle((i - 0.2, 0), 0.4, v, color=colors[i]))\n\n# Add colored rectangles to the second chart\nfor i, v in enumerate(values2):\n    ax2.add_patch(plt.Rectangle((i - 0.2, 0), 0.4, v, color=colors[i]))\n\n# Add colored rectangles to the first chart\nfor i, v in enumerate(values):\n    ax.add_patch(plt.Rectangle((i - 0.2, 0), 0.4, v, color=colors[i]))\n\n# Add colored rectangles to the second chart\nfor i, v in enumerate(values2):\n    ax2.add_patch(plt.Rectangle((i - 0.2, 0), 0.4, v, color=colors[i]))\n\n# Add colored rectangles to the first chart\nfor i, v in enumerate(values):\n    ax.add_patch(plt.Rectangle((i - 0.2, 0), 0.4, v, color=colors[i]))\n\n# Add colored rectangles to the second chart\nfor i, v in enumerate(values2):\n    ax2.add_patch(plt.Rectangle((i - 0.2, 0), 0.4, v, color=colors[i]))\n\n# Add colored rectangles to the first chart\nfor i, v in enumerate(values):\n    ax.add_patch(plt.Rectangle((i - 0.2, 0), 0.4, v, color=colors[i]))\n\n# Add colored rectangles to the second chart\nfor i, v in enumerate(values2):\n    ax2.add_patch(plt.Rectangle((i - 0.2, 0), 0.4, v, color=colors[i]))\n\n# Add colored rectangles to the first chart\nfor i, v in enumerate(values):\n    ax.add_patch(plt.Rectangle((i - 0.2, 0), 0.4, v, color=colors[i]))\n\n# Add colored rectangles to the second chart\nfor i, v in enumerate(values2):\n    ax2.add_patch(plt.Rectangle((i - 0.2, 0), 0.4, v, color=colors[i]))\n\n# Add colored rectangles to the first chart\nfor i, v in enumerate(values):\n    ax.add_patch(plt.Rectangle((i - 0.2, 0), 0.4, v, color=colors[i]))\n\n# Add colored rectangles to the second chart\nfor i, v in enumerate(values2):\n    ax2.add_patch(plt.Rectangle((i - 0.2, 0), 0.4, v, color=colors[i]))\n\n# Add colored rectangles to the first chart\nfor i, v in enumerate(values):\n    ax.add_patch(plt.Rectangle((i - 0.2, 0), 0.4, v, color=colors[i]))\n\n# Add colored rectangles to the second chart\nfor i, v in enumerate(values2):\n    ax2.add_patch(plt.Rectangle((i - 0.2, 0), 0.4, v, color=colors[i]))\n\n# Add colored rectangles to the first chart\nfor i, v in enumerate(values):\n    ax.add_patch(plt.Rectangle((i - 0.2, 0), 0.4, v, color=colors[i]))\n\n# Add colored rectangles to the second chart\nfor i, v in enumerate(values2):\n    ax2.add_patch(plt"}
{"file": "dataset/ori_500/bar_48.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\naccuracy_data = [0.32, 0.34, 0.36, 0.38, 0.40]\nunfairness_data = [0.12, 0.14, 0.16, 0.18, 0.20]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(5.0, 6.0))\n\n# Plot the data\nax.bar(range(len(accuracy_data)), accuracy_data, color='blue')\nax.bar(range(len(unfairness_data)), unfairness_data, color='red')\n\n# Set the title and labels\nax.set_title('Accuracy vs Unfairness')\nax.set_xlabel('Metrics')\nax.set_ylabel('Values')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_49.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nresolutions = [224, 128, 64, 32]\naccuracies = [29, 60, 29, 87]\ncolors = ['blue', 'orange', 'pink', 'cyan']\nlabels = ['ImageNet-1k', 'ImageNet (F)', 'PAC-FNO', 'PAC-FNO']\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the bars\nfor i, resolution in enumerate(resolutions):\n    ax.barh(resolution, accuracies[i], color=colors[i], label=labels[i])\n\n# Add a title and labels\nax.set_title('Top-1 Accuracy by Resolution and Method')\nax.set_xlabel('Top-1 Accuracy (%)')\nax.set_ylabel('Resolutions')\n\n# Add a legend\nax.legend()\n\n# Add a horizontal line at the top of the plot\nax.axhline(y=80, color='b', linestyle='-')\n\n# Add a vertical line at the bottom of the plot\nax.axvline(x=0, color='b', linestyle='-')\n\n# Add a red arrow pointing down\nax.annotate('', xy=(0, 0), xytext=(0, 180),\n             arrowprops=dict(facecolor='red', shrink=0.05))\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nlabels = ['Level 1', 'Level 2', 'Level 3', 'Level 4']\nvalues = [50.0, 50.0, 50.0, 50.0]\ncolors = ['yellow', 'blue', 'red', 'pink']\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(8.0, 3.0))\nbars = ax.bar(labels, values, color=colors)\n\n# Add labels and title\nax.set_xlabel('Levels')\nax.set_ylabel('# Avg Uploaded Samples')\nax.set_title('Uploads by Level')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_50.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nx = [17, 9, 20, 0, 19, 11, 12, 14, 20, 30, 22, 0, 16, 14, 20, 35]\ny = [39.4, 32.84, 19.66, 0, 35.18, 26.82, 22, 0, 20.84, 28.0, 22, 0, 14, 12, 20, 35.0]\ncolors = ['pink', 'lightblue', 'lightgreen', 'lightgrey', 'lightblue', 'lightgreen', 'lightgrey', 'lightblue', 'lightgreen', 'lightgrey', 'lightblue', 'lightgreen', 'lightgrey', 'lightblue', 'lightgreen', 'lightgrey']\n\n# Plot\nfig, ax = plt.subplots(figsize=(6.0, 5.0))\nax.barh(x, y, color=colors)\nax.set_xlabel('Rewards')\nax.set_title('Categories')\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_51.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\ncategories = ['Cleaning / laundry', 'Crafting/knitting', 'Baker', 'Carpenter', 'Making Bricks', 'Gardening', 'Construction/renovation', 'Household management', 'Scooter mechanic', 'Farmer']\nvalues = [5375, 4190, 3543, 3216, 2915, 2548, 2343, 2158, 2060, 2008]\n\n# Create a bar chart\nplt.figure(figsize=(12, 8))\nplt.bar(categories, values, color='blue')\n\n# Set the title and labels\nplt.title('Number of Videos by Profession')\nplt.xlabel('Profession')\nplt.ylabel('Number of Videos')\n\n# Rotate the x-axis labels for better visibility\nplt.xticks(rotation=45)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_52.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\ncategories = ['greeting', 'request', 'criticism', 'apology', 'persuasion', 'thanking', 'leave-taking']\nsynthetic_data = [8, 31, 24, 7, 10, 10, 10]\nhuman_authored_data = [16, 28, 11, 5, 15, 16, 9]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Plot the bars\nbars = ax.bar(categories, synthetic_data, color='blue')\n\n# Add labels and title\nax.set_xlabel('Categories')\nax.set_ylabel('Synthetic Data')\nax.set_title('Sentiment Analysis of Synthetic Data')\n\n# Add value labels\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 2), ha='center', va='bottom')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_53.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Set the title of the plot\nax.set_title('Context: The human body can tolerate only a')\n\n# Set the x-axis label\nax.set_xlabel('Word')\n\n# Set the y-axis label\nax.set_ylabel('Probability')\n\n# Set the x-ticks\nax.set_xticks([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n\n# Set the x-tick labels\nax.set_xticklabels(['small', 'certain', 'little', 'fraction', 'limited', 'a', 'day', 'few', 'new', 'specific', 'substantial', 'tiny', 'very', 'slight', 'relative', 'moderate', 'handful', 'low'])\n\n# Set the y-limits\nax.set_ylim(0, 0.3)\n\n# Set the y-ticks\nax.set_yticks([0, 0.05, 0.1, 0.15, 0.2, 0.25, 0.3])\n\n# Set the y-tick labels\nax.set_yticklabels(['0.00', '0.05', '0.10', '0.15', '0.20', '0.25', '0.30'])\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('orange')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('lightblue')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='minor', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', length=0)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', width=0)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', pad=0)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', direction='in')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', bottom=True, top=False, left=True, right=False)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', labelbottom=True, labeltop=False, labelleft=True, labelright=False)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', labelrotation=0)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', length=0)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', width=0)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', pad=0)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', direction='in')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', bottom=True, top=False, left=True, right=False)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', labelbottom=True, labeltop=False, labelleft=True, labelright=False)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', labelrotation=0)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', length=0)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', width=0)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', pad=0)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', direction='in')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', bottom=True, top=False, left=True, right=False)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', labelbottom=True, labeltop=False, labelleft=True, labelright=False)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', labelrotation=0)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', length=0)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', width=0)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', pad=0)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', direction='in')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', bottom=True, top=False, left=True, right=False)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', labelbottom=True, labeltop=False, labelleft=True, labelright=False)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', labelrotation=0)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', length=0)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', width=0)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', pad=0)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', direction='in')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', bottom=True, top=False, left=True, right=False)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', labelbottom=True, labeltop=False, labelleft=True, labelright=False)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', labelrotation=0)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', length=0)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', width=0)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', pad=0)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', direction='in')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', bottom=True, top=False, left=True, right=False)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', labelbottom=True, labeltop=False, labelleft=True, labelright=False)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', labelrotation=0)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', length=0)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', width=0)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', pad=0)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', direction='in')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', bottom=True, top=False, left=True, right=False)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', labelbottom=True, labeltop=False, labelleft=True, labelright=False)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', labelrotation=0)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', length=0)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', width=0)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', pad=0)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', direction='in')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', bottom=True, top=False, left=True, right=False)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', labelbottom=True, labeltop=False, labelleft=True, labelright=False)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', labelrotation=0)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', length=0)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', width=0)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', pad=0)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', direction='in')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', bottom=True, top=False, left=True, right=False)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', labelbottom=True, labeltop=False, labelleft=True, labelright=False)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', labelrotation=0)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', length=0)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', width=0)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', pad=0)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', direction='in')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', bottom=True, top=False, left=True, right=False)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', labelbottom=True, labeltop=False, labelleft=True, labelright=False)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', labelrotation=0)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', length=0)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', width=0)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', pad=0)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', direction='in')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', bottom=True, top=False, left=True, right=False)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', labelbottom=True, labeltop=False, labelleft=True, labelright=False)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', labelrotation=0)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', length=0)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', width=0)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', pad=0)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', direction='in')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', bottom=True, top=False, left=True, right=False)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', labelbottom=True, labeltop=False, labelleft=True, labelright=False)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', labelrotation=0)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', length=0)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', width=0)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', pad=0)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', direction='in')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', bottom=True, top=False, left=True, right=False)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', labelbottom=True, labeltop=False, labelleft=True, labelright=False)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', labelsize=10)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', labelrotation=0)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', labelcolor='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', colors='black')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', length=0)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', width=0)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', pad=0)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', direction='in')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', bottom=True, top=False, left=True, right=False)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='both', labelbottom=True, labeltop=False, labelleft=True, labelright=False)\n\n# Set the color of the tick lines"}
{"file": "dataset/ori_500/bar_54.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nmodels = ['Convertible', 'Coupe', 'Truck', 'SUV', 'Sedan']\nprobabilities = [0.75, 0.85, 0.90, 0.95, 0.80]\n\n# Create bar chart\nfig, ax = plt.subplots(figsize=(6.0, 2.0))\nbars = ax.bar(models, probabilities, color='blue')\n\n# Add labels and title\nax.set_xlabel('Probability of Improvement over VLM Image Encoder Baseline Returns')\nax.set_ylabel('Probability of Improvement')\nax.set_title('Probability of Improvement over VLM Image Encoder Baseline Returns')\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_55.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nemotions = ['Disapproval', 'Joy', 'Relief', 'Gratitude', 'Annoyance', 'Nervousness', 'Pride', 'Sadness', 'Unbored', 'Amusement']\nfrequencies = [2.1, 3.0, 3.5, 3.5, 6.0, 6.0, 6.6, 6.7, 7.0, 7.6]\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\nax.bar(emotions, frequencies, color='pink')\n\n# Set the title and labels\nax.set_title('Emotion Frequencies')\nax.set_xlabel('Emotion')\nax.set_ylabel('Frequency (%)')\n\n# Rotate the x-axis labels for better readability\nplt.xticks(rotation=45)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_56.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for each profession\nprofessions = ['Making Bricks', 'Carpenter', 'Baker', 'Crafting/Knitting', 'Cleaning/Laundry', 'Gardening']\nvideo_counts = [450, 600, 500, 600, 700, 800]\n\n# Create a bar chart\nplt.figure(figsize=(12, 8))\nbars = plt.bar(professions, video_counts, color='blue')\n\n# Add labels and title\nplt.xlabel('Profession')\nplt.ylabel('Number of Videos')\nplt.title('Number of Videos by Profession')\n\n# Add value labels on top of the bars\nfor bar in bars:\n    yval = bar.get_height()\n    plt.text(bar.get_x() + bar.get_width()/2, yval, int(yval), ha='center', va='bottom')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_57.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Set the title of the graph\nax.set_title('Economic Indicators')\n\n# Set the x-axis label\nax.set_xlabel('Time')\n\n# Set the y-axis label\nax.set_ylabel('Value')\n\n# Set the x-axis limits\nax.set_xlim(0, 50)\n\n# Set the y-axis limits\nax.set_ylim(0, 50)\n\n# Set the x-axis ticks\nax.set_xticks([0, 10, 20, 30, 40, 50])\n\n# Set the y-axis ticks\nax.set_yticks([0, 10, 20, 30, 40, 50])\n\n# Set the x-axis tick labels\nax.set_xticklabels(['0', '10', '20', '30', '40', '50'])\n\n# Set the y-axis tick labels\nax.set_yticklabels(['0', '10', '20', '30', '40', '50'])\n\n# Set the background color of the graph\nax.set_facecolor('#f0f0f0')\n\n# Set the grid lines\nax.grid(True)\n\n# Set the color of the grid lines\nax.grid(color='#d3d3d3')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='#d3d3d3')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='#d3d3d3')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='#d3d3d3')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='#d3d3d3')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='#d3d3d3')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='#d3d3d3')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='#d3d3d3')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='#d3d3d3')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='#d3d3d3')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='#d3d3d3')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='#d3d3d3')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='#d3d3d3')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='#d3d3d3')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='#d3d3d3')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='#d3d3d3')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='#d3d3d3')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='#d3d3d3')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='#d3d3d3')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='#d3d3d3')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='#d3d3d3')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='#d3d3d3')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='#d3d3d3')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='#d3d3d3')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='#d3d3d3')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='#d3d3d3')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='#d3d3d3')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='#d3d3d3')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='#d3d3d3')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='#d3d3d3')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='#d3d3d3')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='#d3d3d3')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='#d3d3d3')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='#d3d3d3')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='#d3d3d3')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='#d3d3d3')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='#d3d3d3')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='#d3d3d3')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='#d3d3d3')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='#d3d3d3')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='#d3d3d3')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='#d3d3d3')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='#d3d3d3')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='#d3d3d3')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='#d3d3d3')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='#d3d3d3')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='#d3d3d3')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='#d3d3d3')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='#d3d3d3')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='#d3d3d3')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='#d3d3d3')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='#d3d3d3')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='#d3d3d3')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='#d3d3d3')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='#d3d3d3')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='#d3d3d3')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='#d3d3d3')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='#d3d3d3')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='#d3d3d3')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='#d3d3d3')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='#d3d3d3')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='#d3d3d3')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='#d3d3d3')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='#d3d3d3')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='#d3d3d3')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='#d3d3d3')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='#d3d3d3')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='#d3d3d3')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='#d3d3d3')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='#d3d3d3')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='#d3d3d3')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='#d3d3d3')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='#d3d3d3')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='#d3d3d3')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='#d3d3d3')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='#d3d3d3')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='#d3d3d3')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='#d3d3d3')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='#d3d3d3')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='#d3d3d3')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='#d3d3d3')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='#d3d3d3')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='#d3d3d3')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='#d3d3d3')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='#d3d3d3')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='#d3d3d3')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='#d3d3d3')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='#d3d3d3')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='#d3d3d3')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='#d3d3d3')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='#d3d3d3')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='#d3d3d3')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='#d3d3d3')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='#d3d3d3')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='#d3d3d3')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='#d3d3d3')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='#d3d3d3')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='#d3d3d3')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='#d3d3d3')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='#d3d3d3')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='#d3d3d3')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='#d3d3d3')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='#d3d3d3')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='#d3d3d3')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='#d3d3d3')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='#d3d3d3')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='#d3d3d3')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='#d3d3d3')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='#d3d3d3')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='#d3d3d3')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='#d3d3d3')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='#d3d3d3')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='#d3d3d3')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='#d3d3d3')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='#d3d3d3')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='#d3d3d3')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='#d3d3d3')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='#d3d3d3')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='#d3d3d3')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='#d3d3d3')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='#d3d3d3')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='#d3d3d3')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='#d3d3d3')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='#d3d3d3')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='#d3d3d3')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='#d3d3d3')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='#d3d3d3')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='#d3d3d3')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='#d3d3d3')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='#d3d3d3')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='#d3d3d3')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='#d3d3d3')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='#d3d3d3')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='#d3d3d3')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='#d3d3d3')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='#d3d3d3')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='#d3d3d3')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='#d3d3d3')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='#d3d3d3')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='#d3d3d3')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='#d3d3d3')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='#d3d3d3')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='#d3d3d3')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='#d3d3d3')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='#d3d3d3')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='#d3d3d3')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='#d3d3d3')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='#d3d3d3')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='#d3d3d3')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='#d3d3d3')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='#d3d3d3')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='#d3d3d3')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='#d3d3d3')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='#d3d3d3')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='#d3d3d3')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='#d3d3d3')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='#d3d3d3')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='#d3d3d3')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='#d3d3d3')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='#d3d3d3')\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='#d3d3d3')\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='#d3d3d3')\n\n# Set the color of the y-axis grid lines\nax"}
{"file": "dataset/ori_500/bar_58.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for each city\ncities = ['New York', 'Los Angeles', 'Chicago', 'Houston', 'Phoenix', 'Philadelphia']\npopulations = [8400000, 3971000, 2716000, 2325500, 1680000, 1584000]\ncolors = ['red', 'pink', 'orange', 'grey', 'blue', 'purple']\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(10, 6))\nbars = ax.bar(cities, populations, color=colors)\n\n# Add labels and title\nax.set_xlabel('Cities')\nax.set_ylabel('Population')\nax.set_title('City Populations')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_59.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ncategories = ['External Class', 'Argument', 'Loop', 'Conditional Statement', 'Variable Declaration', 'Method Declaration', 'Parameter']\npositive_differences = [80, 70, 60, 50, 40, 30, 20]\nnegative_differences = [10, 20, 30, 40, 50, 60, 70]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Plot the positive differences\nax.bar(categories, positive_differences, color='green')\n\n# Plot the negative differences\nax.bar(categories, negative_differences, bottom=positive_differences, color='red')\n\n# Set the title and labels\nax.set_title('Relative Difference in Machine vs. Human Focus on Semantic Categories')\nax.set_xlabel('Semantic Category')\nax.set_ylabel('Difference (%)')\n\n# Set the x-axis limits\nax.set_xlim(-80, 80)\n\n# Set the y-axis limits\nax.set_ylim(0, 80)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nemotions = ['Disappointment', 'Embarrassment', 'Oblivious', 'Delight', 'Excitement', 'Disapproval', 'Joy', 'Relief', 'Gratitude', 'Annoyance', 'Nervousness', 'Pride', 'Sadness', 'Unboredom', 'Amusement']\nfrequencies = [7, 6, 5, 4, 3, 2, 1, 0.5, 0.3, 0.2, 0.1, 0.05, 0.03, 0.02, 0.01]\n\n# Create a bar chart\nplt.bar(emotions, frequencies, color='skyblue')\n\n# Set the title and labels\nplt.title('Emotion Frequencies')\nplt.xlabel('Emotion')\nplt.ylabel('Frequency (%)')\n\n# Rotate the x-axis labels for better visibility\nplt.xticks(rotation=90)\n\n# Set the figure size\nfig = plt.gcf()\nfig.set_size_inches(8, 8)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_60.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nx = [-20, -15, -10, -5, 0, 5, 10, 15, 20]\ny = [0, 4.8, 4.8, 4.8, 4.8, 4.8, 4.8, 4.8, 19.7]\n\n# Plot\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\nax.plot(x, y, 'ro-')\nax.set_xlabel('X-axis')\nax.set_ylabel('Y-axis')\nax.set_title('Stock Prices')\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_61.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for each section\npatents = [100, 200, 300, 400, 500]\nresearch = [150, 250, 350, 450, 550]\nusage = [200, 300, 400, 500, 600]\npenetration = [250, 350, 450, 550, 650]\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Set the title of the plot\nax.set_title('Tech Industry Metrics')\n\n# Set the x-axis label\nax.set_xlabel('Year')\n\n# Set the y-axis label\nax.set_ylabel('Metrics')\n\n# Plot the data\nax.plot(patents, label='Patents Filed')\nax.plot(research, label='Research Investment')\nax.plot(usage, label='Smartphone Usage')\nax.plot(penetration, label='Internet Penetration')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_62.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\ncategories = ['greeting', 'request', 'criticism', 'apology', 'persuasion', 'thanking', 'leave-taking']\nsynthetic_data = [12, 35, 28, 15, 18, 14, 16]\nhuman_authored_data = [18, 32, 15, 8, 20, 22, 12]\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\nbars = ax.bar(categories, synthetic_data, color='blue')\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 1), ha='center', va='bottom')\n\n# Add a vertical line\nax.axvline(x=3.5, color='black', linestyle='-')\n\n# Set the title and labels\nax.set_title('Sentiment Analysis of Synthetic Data vs Human-Authored Data')\nax.set_xlabel('Sentiment Categories')\nax.set_ylabel('Percentage')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_63.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the bar chart\ncategories = ['Attack on Titan', 'Game of Thrones', 'The Count of Monte Cristo', 'Demi-Gods and Semi-Devils', 'Notre-Dame de Paris']\nscores = [0.45, 0.55, 0.35, 0.65, 0.7]\n\n# Create a bar chart with the data\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\nax.bar(categories, scores, color='blue')\n\n# Set the title of the chart\nax.set_title('Scores by Category Over Time')\n\n# Set the x-axis label\nax.set_xlabel('Categories')\n\n# Set the y-axis label\nax.set_ylabel('Scores')\n\n# Set the x-axis tick labels\nax.set_xticklabels(categories, rotation=45)\n\n# Set the y-axis limits\nax.set_ylim(0, 0.7)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_64.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nregions = ['East', 'West', 'North', 'South']\nconcentrations = [32.84, 25.36, 22.89, 39.63]\nmetrics = [54.46, 56.03, 65.49, 92.15]\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(10, 7))\nbars = ax.bar(regions, concentrations, color='skyblue')\n\n# Add text annotations to each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 2), ha='center', va='bottom')\n\n# Set the title and labels\nax.set_title('Air Quality Metrics by Region')\nax.set_xlabel('Regions')\nax.set_ylabel('Concentration')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_65.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nmodels = ['LLAMA-Default', 'LLAMA-HAG', 'Vicuna-Default', 'Vicuna-HAG']\nscores = [-2.2, -2.3, -3.3, -3.2]\nconstraint_words = [3, 5, 7, 10]\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\nbars = ax.bar(models, scores, color='blue')\n\n# Add labels and title\nax.set_xlabel('Models')\nax.set_ylabel('Scores by group and constraint word count')\nax.set_title('Scores by group and constraint word count')\n\n# Add constraint words as annotations\nfor bar, constraint_word in zip(bars, constraint_words):\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval, constraint_word, ha='center', va='bottom')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_66.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\ncountries = ['USA', 'China', 'Germany', 'Brazil']\ngdp_growth_rates = [-0.2, -0.4, -0.6, -0.8]\ncolors = ['red', 'green', 'blue', 'purple']\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(10, 6))\nbars = ax.bar(countries, gdp_growth_rates, color=colors)\n\n# Add text annotations to each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 2), ha='center', va='bottom')\n\n# Set the title and labels\nax.set_title('Negative GDP Growth Rates by Country and Year')\nax.set_xlabel('Country')\nax.set_ylabel('GDP Growth Rate (%)')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_67.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nmodels = ['GPT4V', 'OSCAR', 'LLaMA', 'BLIP2', 'BLIP1', 'Video-LLaMA', 'LaVIA']\nperformance = [82.5, 73.93, 31.79, 4.64, 4.64, 0.71, 0.0]\n\n# Create a bar chart\nplt.figure(figsize=(12, 8))\nplt.bar(models, performance, color='blue')\nplt.title('Human Study')\nplt.xlabel('Model')\nplt.ylabel('Performance (%)')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_68.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ncategories = ['Traffic Flow', 'Accident Rate', 'Public Transport Usage', 'Road Condition']\nvalues = [50, 20, 40, 80]\nbar_width = 0.35\nindex = range(len(categories))\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\nbars = ax.bar(index, values, bar_width, color='blue')\n\n# Add labels and title\nax.set_xlabel('Categories')\nax.set_ylabel('Values')\nax.set_title('Stacked Bar Chart of Transportation Data')\nax.set_xticks(index)\nax.set_xticklabels(categories)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_69.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 7))\n\n# Set the title of the chart\nax.set_title('Enhanced Stacked Bar Chart with Textures and Annotated Values')\n\n# Set the x-axis label\nax.set_xlabel('Product Categories')\n\n# Set the y-axis label\nax.set_ylabel('Sales Units')\n\n# Define the categories and their sales data\ncategories = ['Category A', 'Category B', 'Category C', 'Category D', 'Category E', 'Category F', 'Category G']\nsales_data = [\n    [80, 60, 40, 20],\n    [70, 50, 30, 10],\n    [60, 40, 20, 0],\n    [50, 30, 10, 0],\n    [40, 20, 0, 0],\n    [30, 10, 0, 0],\n    [20, 0, 0, 0]\n]\n\n# Define the colors for each category\ncolors = ['red', 'orange', 'pink', 'yellow', 'lightgrey']\n\n# Create a stacked bar chart\nfor i, category in enumerate(categories):\n    ax.bar(category, sales_data[i], color=colors[i % len(colors)], bottom=sum(sales_data[j][:i] for j in range(i)))\n\n# Add a horizontal line at the top of the chart\nax.axhline(y=80, color='black', linestyle='-')\n\n# Add a horizontal line at the bottom of the chart\nax.axhline(y=0, color='black', linestyle='-')\n\n# Add a vertical line at the left of the chart\nax.axvline(x=-0.5, color='black', linestyle='-')\n\n# Add a vertical line at the right of the chart\nax.axvline(x=len(categories) - 0.5, color='black', linestyle='-')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ncategories = ['SEQ', 'REPLAY', 'MTL']\naccuracies = [0.83, 0.6, 0.11]\ndistances = [-9.44, -9.12, -3.67]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the bars\nbars = ax.bar(categories, accuracies, color='lightgrey')\n\n# Add labels and title\nax.set_xlabel('Categories')\nax.set_ylabel('Accuracy (%)')\nax.set_title('Feature Embedding Distance')\n\n# Add text annotations for distances\nfor bar, distance in zip(bars, distances):\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.05, f'{distance}', ha='center', va='bottom')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_70.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nscores = [10, 8, 12, 10, 6, 8, 12, 15, 10, 7, 10]\nlabels = ['Score 1', 'Score 2', 'Score 3', 'Score 4', 'Score 5']\ncolors = ['blue', 'green', 'lightgreen', 'aqua', 'lightblue']\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Plot the scores\nax.bar(labels, scores, color=colors)\n\n# Set the title and labels\nax.set_title('Human Labeling and Agreement Bias Checking')\nax.set_xlabel('Scores')\nax.set_ylabel('Human Annotator')\n\n# Add a horizontal line at y=30\nax.axhline(y=30, color='r', linestyle='-')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_71.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 4.0))\n\n# Set the title of the plot\nax.set_title('Product Sales')\n\n# Set the x-axis label\nax.set_xlabel('Products')\n\n# Set the y-axis label\nax.set_ylabel('Sales')\n\n# Set the x-ticks\nax.set_xticks([0, 1, 2, 3, 4, 5, 6])\n\n# Set the x-tick labels\nax.set_xticklabels(['coreutils', 'gzip', 'scp', 'libq', 'mcf', 'omnet.', 'perl.'])\n\n# Set the y-ticks\nax.set_yticks([0, 20, 40, 60, 80, 100])\n\n# Set the y-tick labels\nax.set_yticklabels(['0%', '20%', '40%', '60%', '80%', '100%'])\n\n# Set the grid lines\nax.grid(True)\n\n# Set the background color\nax.set_facecolor('#f0f0f0')\n\n# Set the border color\nax.spines['bottom'].set_color('#000000')\nax.spines['top'].set_color('#000000')\nax.spines['right'].set_color('#000000')\nax.spines['left'].set_color('#000000')\n\n# Set the bar colors\nbar_colors = ['#008000', '#ffff00', '#0000ff', '#008000', '#0000ff', '#008000', '#0000ff']\n\n# Set the bar width\nbar_width = 0.5\n\n# Set the bar positions\nbar_positions = [0.25, 1.25, 2.25, 3.25, 4.25, 5.25, 6.25]\n\n# Set the bar heights\nbar_heights = [90, 70, 50, 30, 10, 90, 70]\n\n# Set the bar labels\nbar_labels = ['RegOpt', 'BIOpt', 'LoopOpt', 'RegOpt', 'BIOpt', 'RegOpt', 'BIOpt']\n\n# Set the bar labels\nfor i, label in enumerate(bar_labels):\n    ax.text(bar_positions[i], bar_heights[i] + 1, label, ha='center', va='bottom')\n\n# Set the bar colors\nfor i, color in enumerate(bar_colors):\n    ax.bar(bar_positions[i], bar_heights[i], bar_width, color=color)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_72.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nbrands = ['Bactrian-X EN', 'Lima-X DE', 'Bactrian-X FR', 'Lima-X IT', 'Bactrian-X ES']\nimprovement = [3.5, 2.3, 4.4, 1.3, 0.7]\nlanguages = ['EN', 'DE', 'FR', 'IT', 'ES']\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Plot bars\nax.bar(brands, improvement, color='blue')\n\n# Set title and labels\nax.set_title('Model Performance Improvement by Language')\nax.set_xlabel('Model with Language')\nax.set_ylabel('Improvement [%]')\n\n# Add language labels\nfor i, v in enumerate(improvement):\n    ax.text(i, v + 0.1, languages[i], ha='center', va='bottom')\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_73.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nfiscal_quarter = [1, 2, 3, 4, 5]\ndow_jones_index = [0.5, 1.5, 2.2, 3.9, -0.8]\nnasdaq_index = [0.6, 2.2, -0.6, 4.6, -1.2]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Plot the Dow Jones Index\nax.bar(fiscal_quarter, dow_jones_index, color='green', label='Dow Jones Index')\n\n# Plot the Nasdaq Index\nax.bar(fiscal_quarter, nasdaq_index, bottom=dow_jones_index, color='orange', label='Nasdaq Index')\n\n# Set the title and labels\nax.set_title('Index Change (%)')\nax.set_xlabel('Fiscal Quarter')\nax.set_ylabel('Index Change (%)')\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_74.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plot\nx = ['E16.6', 'L26.8', 'D19.7', 'L22.2']\ny = [39.4, 34.06, 30.84, 34.06]\ncolors = ['pink', 'lightblue', 'lightgreen', 'orange']\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Plot the data\nax.bar(x, y, color=colors)\n\n# Set the title and labels\nax.set_title('Rewards Values')\nax.set_xlabel('Series Labels')\nax.set_ylabel('Rewards')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_75.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\ntruthful_recall = [30.1, 34, 43.7]\nmisleading_recall = [46.3, 57.9, 53.8, 20, 19.4]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Plot the bars\nax.bar(range(len(truthful_recall)), truthful_recall, color='pink')\nax.bar(range(len(misleading_recall)), misleading_recall, color='black')\n\n# Set the title and labels\nax.set_title('Truthful:Misleading = 2:0')\nax.set_xlabel('Recall')\nax.set_ylabel('Percentage')\n\n# Set the x-ticks\nax.set_xticks(range(len(truthful_recall)))\nax.set_xticklabels(['Truthful Recall', 'Misleading Recall'])\n\n# Set the y-limits\nax.set_ylim(-40, 60)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_76.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nsectors = ['Light Industry', 'Heavy Industry', 'Transportation', 'Residential']\ncurrent_year_emissions = [250, 300, 400, 350]\nprevious_year_emissions = [200, 250, 350, 300]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Set the background color of the plot\nax.set_facecolor('lightgrey')\n\n# Draw the bars for current year emissions\nfor i, sector in enumerate(sectors):\n    ax.bar(sector, current_year_emissions[i], color='skyblue', label=sector)\n\n# Draw the bars for previous year emissions\nfor i, sector in enumerate(sectors):\n    ax.bar(sector, previous_year_emissions[i], bottom=current_year_emissions[i], color='orange')\n\n# Set the title of the plot\nax.set_title('Environmental Impact by Sector')\n\n# Set the x-axis label\nax.set_xlabel('Industry Sectors')\n\n# Set the y-axis label\nax.set_ylabel('Pollution Emissions (thousands of metric tons)')\n\n# Set the y-axis limits\nax.set_ylim(-200, 1600)\n\n# Set the y-axis ticks\nax.set_yticks(range(-200, 1800, 200))\n\n# Set the y-axis grid\nax.yaxis.grid(True)\n\n# Set the legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_77.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ncities = ['Beijing', 'Shanghai', 'Guangzhou', 'Shenzhen', 'Chengdu']\ntemperatures = [12, 14, 16, 18, 20]\n\n# Create a bar chart\nplt.figure(figsize=(8, 4))\nplt.bar(cities, temperatures, color='skyblue')\nplt.title('Average City Temperatures')\nplt.xlabel('Cities')\nplt.ylabel('Temperature (\u00b0C)')\nplt.ylim(0, 30)\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_78.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nregions = ['Region 1', 'Region 2', 'Region 3', 'Region 4']\nemissions_2020 = [180, 190, 170, 160]\nemissions_2021 = [175, 185, 165, 155]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Plot the data\nax.bar(regions, emissions_2020, color='red')\nax.bar(regions, emissions_2021, color='blue')\n\n# Set the title and labels\nax.set_title('Annual Pollution Emission Reductions')\nax.set_xlabel('Regions')\nax.set_ylabel('Emissions')\n\n# Add a legend\nax.legend(['2020 Emissions', '2021 Emissions'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_79.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nquestions = ['Question 1', 'Question 2', 'Question 3 Responses', 'Question 4', 'Question 5']\nresponses = [26.0, 13.0, 10.0, 17.0, 15.0, 10.0, 29.0, 22.0, 35.0, 37.0, 33.0, 19.0, 15.0, 11.0, 9.0, 14.0, 13.0, 10.0, 12.0, 10.0, 26.0, 32.0, 21.0]\ncolors = ['pink', 'orange', 'lightblue', 'lightgreen', 'lightgrey']\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(10, 6))\nax.barh(questions, responses, color=colors)\n\n# Add labels and title\nax.set_xlabel('Percentage')\nax.set_title('Survey Results')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Set the x-axis limits\nax.set_xlim(1, 10)\n\n# Set the y-axis limits\nax.set_ylim(0, 10)\n\n# Draw a horizontal line at y=5\nax.axhline(y=5, color='r', linestyle='-')\n\n# Draw a horizontal line at y=8\nax.axhline(y=8, color='r', linestyle='-')\n\n# Draw a horizontal line at y=10\nax.axhline(y=10, color='r', linestyle='-')\n\n# Draw a horizontal line at y=12\nax.axhline(y=12, color='r', linestyle='-')\n\n# Draw a horizontal line at y=14\nax.axhline(y=14, color='r', linestyle='-')\n\n# Draw a horizontal line at y=16\nax.axhline(y=16, color='r', linestyle='-')\n\n# Draw a horizontal line at y=18\nax.axhline(y=18, color='r', linestyle='-')\n\n# Draw a horizontal line at y=20\nax.axhline(y=20, color='r', linestyle='-')\n\n# Draw a horizontal line at y=22\nax.axhline(y=22, color='r', linestyle='-')\n\n# Draw a horizontal line at y=24\nax.axhline(y=24, color='r', linestyle='-')\n\n# Draw a horizontal line at y=26\nax.axhline(y=26, color='r', linestyle='-')\n\n# Draw a horizontal line at y=28\nax.axhline(y=28, color='r', linestyle='-')\n\n# Draw a horizontal line at y=30\nax.axhline(y=30, color='r', linestyle='-')\n\n# Draw a horizontal line at y=32\nax.axhline(y=32, color='r', linestyle='-')\n\n# Draw a horizontal line at y=34\nax.axhline(y=34, color='r', linestyle='-')\n\n# Draw a horizontal line at y=36\nax.axhline(y=36, color='r', linestyle='-')\n\n# Draw a horizontal line at y=38\nax.axhline(y=38, color='r', linestyle='-')\n\n# Draw a horizontal line at y=40\nax.axhline(y=40, color='r', linestyle='-')\n\n# Draw a horizontal line at y=42\nax.axhline(y=42, color='r', linestyle='-')\n\n# Draw a horizontal line at y=44\nax.axhline(y=44, color='r', linestyle='-')\n\n# Draw a horizontal line at y=46\nax.axhline(y=46, color='r', linestyle='-')\n\n# Draw a horizontal line at y=48\nax.axhline(y=48, color='r', linestyle='-')\n\n# Draw a horizontal line at y=50\nax.axhline(y=50, color='r', linestyle='-')\n\n# Draw a horizontal line at y=52\nax.axhline(y=52, color='r', linestyle='-')\n\n# Draw a horizontal line at y=54\nax.axhline(y=54, color='r', linestyle='-')\n\n# Draw a horizontal line at y=56\nax.axhline(y=56, color='r', linestyle='-')\n\n# Draw a horizontal line at y=58\nax.axhline(y=58, color='r', linestyle='-')\n\n# Draw a horizontal line at y=60\nax.axhline(y=60, color='r', linestyle='-')\n\n# Draw a horizontal line at y=62\nax.axhline(y=62, color='r', linestyle='-')\n\n# Draw a horizontal line at y=64\nax.axhline(y=64, color='r', linestyle='-')\n\n# Draw a horizontal line at y=66\nax.axhline(y=66, color='r', linestyle='-')\n\n# Draw a horizontal line at y=68\nax.axhline(y=68, color='r', linestyle='-')\n\n# Draw a horizontal line at y=70\nax.axhline(y=70, color='r', linestyle='-')\n\n# Draw a horizontal line at y=72\nax.axhline(y=72, color='r', linestyle='-')\n\n# Draw a horizontal line at y=74\nax.axhline(y=74, color='r', linestyle='-')\n\n# Draw a horizontal line at y=76\nax.axhline(y=76, color='r', linestyle='-')\n\n# Draw a horizontal line at y=78\nax.axhline(y=78, color='r', linestyle='-')\n\n# Draw a horizontal line at y=80\nax.axhline(y=80, color='r', linestyle='-')\n\n# Draw a horizontal line at y=82\nax.axhline(y=82, color='r', linestyle='-')\n\n# Draw a horizontal line at y=84\nax.axhline(y=84, color='r', linestyle='-')\n\n# Draw a horizontal line at y=86\nax.axhline(y=86, color='r', linestyle='-')\n\n# Draw a horizontal line at y=88\nax.axhline(y=88, color='r', linestyle='-')\n\n# Draw a horizontal line at y=90\nax.axhline(y=90, color='r', linestyle='-')\n\n# Draw a horizontal line at y=92\nax.axhline(y=92, color='r', linestyle='-')\n\n# Draw a horizontal line at y=94\nax.axhline(y=94, color='r', linestyle='-')\n\n# Draw a horizontal line at y=96\nax.axhline(y=96, color='r', linestyle='-')\n\n# Draw a horizontal line at y=98\nax.axhline(y=98, color='r', linestyle='-')\n\n# Draw a horizontal line at y=100\nax.axhline(y=100, color='r', linestyle='-')\n\n# Draw a horizontal line at y=102\nax.axhline(y=102, color='r', linestyle='-')\n\n# Draw a horizontal line at y=104\nax.axhline(y=104, color='r', linestyle='-')\n\n# Draw a horizontal line at y=106\nax.axhline(y=106, color='r', linestyle='-')\n\n# Draw a horizontal line at y=108\nax.axhline(y=108, color='r', linestyle='-')\n\n# Draw a horizontal line at y=110\nax.axhline(y=110, color='r', linestyle='-')\n\n# Draw a horizontal line at y=112\nax.axhline(y=112, color='r', linestyle='-')\n\n# Draw a horizontal line at y=114\nax.axhline(y=114, color='r', linestyle='-')\n\n# Draw a horizontal line at y=116\nax.axhline(y=116, color='r', linestyle='-')\n\n# Draw a horizontal line at y=118\nax.axhline(y=118, color='r', linestyle='-')\n\n# Draw a horizontal line at y=120\nax.axhline(y=120, color='r', linestyle='-')\n\n# Draw a horizontal line at y=122\nax.axhline(y=122, color='r', linestyle='-')\n\n# Draw a horizontal line at y=124\nax.axhline(y=124, color='r', linestyle='-')\n\n# Draw a horizontal line at y=126\nax.axhline(y=126, color='r', linestyle='-')\n\n# Draw a horizontal line at y=128\nax.axhline(y=128, color='r', linestyle='-')\n\n# Draw a horizontal line at y=130\nax.axhline(y=130, color='r', linestyle='-')\n\n# Draw a horizontal line at y=132\nax.axhline(y=132, color='r', linestyle='-')\n\n# Draw a horizontal line at y=134\nax.axhline(y=134, color='r', linestyle='-')\n\n# Draw a horizontal line at y=136\nax.axhline(y=136, color='r', linestyle='-')\n\n# Draw a horizontal line at y=138\nax.axhline(y=138, color='r', linestyle='-')\n\n# Draw a horizontal line at y=140\nax.axhline(y=140, color='r', linestyle='-')\n\n# Draw a horizontal line at y=142\nax.axhline(y=142, color='r', linestyle='-')\n\n# Draw a horizontal line at y=144\nax.axhline(y=144, color='r', linestyle='-')\n\n# Draw a horizontal line at y=146\nax.axhline(y=146, color='r', linestyle='-')\n\n# Draw a horizontal line at y=148\nax.axhline(y=148, color='r', linestyle='-')\n\n# Draw a horizontal line at y=150\nax.axhline(y=150, color='r', linestyle='-')\n\n# Draw a horizontal line at y=152\nax.axhline(y=152, color='r', linestyle='-')\n\n# Draw a horizontal line at y=154\nax.axhline(y=154, color='r', linestyle='-')\n\n# Draw a horizontal line at y=156\nax.axhline(y=156, color='r', linestyle='-')\n\n# Draw a horizontal line at y=158\nax.axhline(y=158, color='r', linestyle='-')\n\n# Draw a horizontal line at y=160\nax.axhline(y=160, color='r', linestyle='-')\n\n# Draw a horizontal line at y=162\nax.axhline(y=162, color='r', linestyle='-')\n\n# Draw a horizontal line at y=164\nax.axhline(y=164, color='r', linestyle='-')\n\n# Draw a horizontal line at y=166\nax.axhline(y=166, color='r', linestyle='-')\n\n# Draw a horizontal line at y=168\nax.axhline(y=168, color='r', linestyle='-')\n\n# Draw a horizontal line at y=170\nax.axhline(y=170, color='r', linestyle='-')\n\n# Draw a horizontal line at y=172\nax.axhline(y=172, color='r', linestyle='-')\n\n# Draw a horizontal line at y=174\nax.axhline(y=174, color='r', linestyle='-')\n\n# Draw a horizontal line at y=176\nax.axhline(y=176, color='r', linestyle='-')\n\n# Draw a horizontal line at y=178\nax.axhline(y=178, color='r', linestyle='-')\n\n# Draw a horizontal line at y=180\nax.axhline(y=180, color='r', linestyle='-')\n\n# Draw a horizontal line at y=182\nax.axhline(y=182, color='r', linestyle='-')\n\n# Draw a horizontal line at y=184\nax.axhline(y=184, color='r', linestyle='-')\n\n# Draw a horizontal line at y=186\nax.axhline(y=186, color='r', linestyle='-')\n\n# Draw a horizontal line at y=188\nax.axhline(y=188, color='r', linestyle='-')\n\n# Draw a horizontal line at y=190\nax.axhline(y=190, color='r', linestyle='-')\n\n# Draw a horizontal line at y=192\nax.axhline(y=192, color='r', linestyle='-')\n\n# Draw a horizontal line at y=194\nax.axhline(y=194, color='r', linestyle='-')\n\n# Draw a horizontal line at y=196\nax.axhline(y=196, color='r', linestyle='-')\n\n# Draw a horizontal line at y=198\nax.axhline(y=198, color='r', linestyle='-')\n\n# Draw a horizontal line at y=200\nax.axhline(y=200, color='r', linestyle='-')\n\n# Draw a horizontal line at y=202\nax.axhline(y=202, color='r', linestyle='-')\n\n# Draw a horizontal line at y=204\nax.axhline(y=204, color='r', linestyle='-')\n\n# Draw a horizontal line at y=206\nax.axhline(y=206, color='r', linestyle='-')\n\n# Draw a horizontal line at y=208\nax.axhline(y=208, color='r', linestyle='-')\n\n# Draw a horizontal line at y=210\nax.axhline(y=210, color='r', linestyle='-')\n\n# Draw a horizontal line at y=212\nax.axhline(y=212, color='r', linestyle='-')\n\n# Draw a horizontal line at y=214\nax.axhline(y=214, color='r', linestyle='-')\n\n# Draw a horizontal line at y=216\nax.axhline(y=216, color='r', linestyle='-')\n\n# Draw a horizontal line at y=218\nax.axhline(y=218, color='r', linestyle='-')\n\n# Draw a horizontal line at y=220\nax.axhline(y=220, color='r', linestyle='-')\n\n# Draw a horizontal line at y=222\nax.axhline(y=222, color='r', linestyle='-')\n\n# Draw a horizontal line at y=224\nax.axhline(y=224, color='r', linestyle='-')\n\n# Draw a horizontal line at y=226\nax.axhline(y=226, color='r', linestyle='-')\n\n# Draw a horizontal line at y=228\nax.axhline(y=228, color='r', linestyle='-')\n\n# Draw a horizontal line at y=230\nax.axhline(y=230, color='r', linestyle='-')\n\n# Draw a horizontal line at y=232\nax.axhline(y=232, color='r', linestyle='-')\n\n# Draw a horizontal line at y=234\nax.axhline(y=234, color='r', linestyle='-')\n\n# Draw a horizontal line at y=236\nax.axhline(y=236, color='r', linestyle='-')\n\n# Draw a horizontal line at y=238\nax.axhline(y=238, color='r', linestyle='-')\n\n# Draw a horizontal line at y=240\nax.axhline(y=240, color='r', linestyle='-')\n\n# Draw a horizontal line at y=242\nax.axhline(y=242, color='r', linestyle='-')\n\n# Draw a horizontal line at y=244\nax.axhline(y=244, color='r', linestyle='-')\n\n# Draw a horizontal line at y=246\nax.axhline(y=246, color='r', linestyle='-')\n\n# Draw a horizontal line at y=248\nax.axhline(y=248, color='r', linestyle='-')\n\n# Draw a horizontal line at y=250\nax.axhline(y=250, color='r', linestyle='-')\n\n# Draw a horizontal line at y=252\nax.axhline(y=252, color='r', linestyle='-')\n\n# Draw a horizontal line at y=254\nax.axhline(y=254, color='r', linestyle='-')\n\n# Draw a horizontal line at y=256\nax.axhline(y=256, color='r', linestyle='-')\n\n# Draw a horizontal line at y=258\nax.axhline(y=258, color='r', linestyle='-')\n\n# Draw a horizontal line at y=260\nax.axhline(y=260, color='r', linestyle='-')\n\n# Draw a horizontal line at y=262\nax.axhline(y=262, color='r', linestyle='-')\n\n# Draw a horizontal line at y=264\nax.axhline(y=264, color='r', linestyle='-')\n\n# Draw a horizontal line at y=266\nax.axhline(y=266, color='r', linestyle='-')\n\n# Draw a horizontal line at y=268\nax.axhline(y=268, color='r', linestyle='-')\n\n# Draw a horizontal line at y=270\nax.axhline(y=270, color='r', linestyle='-')\n\n# Draw a horizontal line at y=272\nax.axhline(y=272, color='r', linestyle='-')\n\n# Draw a horizontal line at y=274\nax.axhline(y=274, color='r', linestyle='-')\n\n# Draw a horizontal line at y=276\nax.axhline(y=276, color='r', linestyle='-')\n\n# Draw a horizontal line at y=278\nax.axhline(y=278, color='r', linestyle='-')\n\n# Draw a horizontal line at y=280\nax.axhline(y=280, color='r', linestyle='-')\n\n# Draw a horizontal line at y=282\nax.axhline(y=282, color='r', linestyle='-')\n\n# Draw a horizontal line at y=284\nax.axhline(y=284, color='r', linestyle='-')\n\n# Draw a horizontal line at y=286\nax.axhline(y=286, color='r', linestyle='-')\n\n# Draw a horizontal line at y=288\nax.axhline(y=288, color='r', linestyle='-')\n\n# Draw a horizontal line at y=290\n"}
{"file": "dataset/ori_500/bar_80.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Define the data\nx = [3, 5, 7, 9, 11]\ny = [1.2, 1.8, 1.5, 1.3, 1.4]\n\n# Plot the data\nax.plot(x, y, 'ro-')\n\n# Set the title\nax.set_title('Taboo')\n\n# Set the x-axis label\nax.set_xlabel('Num of Constraint Words')\n\n# Set the y-axis label\nax.set_ylabel('Score')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_81.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nbrands = ['LLaMA', 'Vicuna', 'Alpaca', 'WizardLM']\ntruth_recall = [46.3, 56.9, 53.8, 19.4]\nmisleading_recall = [30.1, 34, 40, 20]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 4.0))\n\n# Plot bars for truth recall\nax.bar(brands, truth_recall, color='blue')\n\n# Plot bars for misleading recall\nax.bar(brands, misleading_recall, bottom=truth_recall, color='pink')\n\n# Set title and labels\nax.set_title('Truthful:Misleading Recall = 2:0')\nax.set_xlabel('Brands')\nax.set_ylabel('Misleading Recall')\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_82.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nmodels = ['Convertible', 'Coupe', 'Truck', 'SUV', 'Sedan', 'Convertible New', 'Coupe New', 'Truck New', 'SUV New', 'Sedan New']\nprobabilities = [25, 28, 22, 27, 29, 24, 21, 23, 26, 20]\n\n# Create bar chart\nplt.figure(figsize=(6.0, 6.0))\nplt.bar(models, probabilities, color='blue')\nplt.xlabel('Model')\nplt.ylabel('Probability of Improvement over VLM Image Encoder Baseline Returns')\nplt.title('Probability of Improvement over VLM Image Encoder Baseline Returns')\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_83.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the first bar chart\nemotions = ['Disapproval', 'Joy', 'Relief', 'Gratitude', 'Annoyance', 'Nervousness', 'Pride', 'Sadness', 'Unboredom', 'Amusement']\ndisapproval = [2.1, 3.0, 3.5, 3.5, 6.0, 6.0, 6.7, 7.0, 7.0, 7.6]\njoy = [3.0, 3.0, 3.5, 3.5, 6.0, 6.0, 6.7, 7.0, 7.0, 7.6]\nrelief = [3.5, 3.0, 3.5, 3.5, 6.0, 6.0, 6.7, 7.0, 7.0, 7.6]\ngratitude = [3.5, 3.0, 3.5, 3.5, 6.0, 6.0, 6.7, 7.0, 7.0, 7.6]\nannoyance = [6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.7, 7.0, 7.0, 7.6]\nnervousness = [6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.7, 7.0, 7.0, 7.6]\npride = [6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.7, 7.0, 7.0, 7.6]\nsadness = [6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.7, 7.0, 7.0, 7.6]\nunboredom = [6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.7, 7.0, 7.0, 7.6]\namusement = [6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.7, 7.0, 7.0, 7.6]\n\n# Data for the second bar chart\nfrequency_metric_2 = [7.1, 7.0, 6.5, 6.5, 5.5, 5.0, 5.0, 4.6, 4.0, 3.7, 3.0, 2.6]\n\n# Create the first bar chart\nfig, ax = plt.subplots(figsize=(10, 4))\nax.bar(emotions, disapproval, color='red')\nax.bar(emotions, joy, bottom=disapproval, color='orange')\nax.bar(emotions, relief, bottom=[x+y for x,y in zip(disapproval, joy)], color='pink')\nax.bar(emotions, gratitude, bottom=[x+y+z for x,y,z in zip(disapproval, joy, relief)], color='lightcoral')\nax.bar(emotions, annoyance, bottom=[x+y+z+t for x,y,z,t in zip(disapproval, joy, relief, gratitude)], color='salmon')\nax.bar(emotions, nervousness, bottom=[x+y+z+t+u for x,y,z,t,u in zip(disapproval, joy, relief, gratitude, annoyance)], color='lightsalmon')\nax.bar(emotions, pride, bottom=[x+y+z+t+u+v for x,y,z,t,u,v in zip(disapproval, joy, relief, gratitude, annoyance, nervousness)], color='mistyrose')\nax.bar(emotions, sadness, bottom=[x+y+z+t+u+v+w for x,y,z,t,u,v,w in zip(disapproval, joy, relief, gratitude, annoyance, nervousness, pride)], color='lavenderblush')\nax.bar(emotions, unboredom, bottom=[x+y+z+t+u+v+w+x for x,y,z,t,u,v,w,x in zip(disapproval, joy, relief, gratitude, annoyance, nervousness, pride, sadness)], color='thistle')\nax.bar(emotions, amusement, bottom=[x+y+z+t+u+v+w+x+y for x,y,z,t,u,v,w,x,y in zip(disapproval, joy, relief, gratitude, annoyance, nervousness, pride, sadness, unboredom)], color='plum')\n\n# Create the second bar chart\nax2 = ax.twinx()\nax2.bar(emotions, frequency_metric_2, color='skyblue')\n\n# Set the labels and title\nax.set_xlabel('Emotion')\nax.set_ylabel('Frequency Metric 1 (%)')\nax2.set_ylabel('Frequency Metric 2 (%)')\nax.set_title('Emotion Frequency Metrics')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_84.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the first graph\nx = [0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7]\ny = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8]\n\n# Data for the second graph\nx2 = [0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7]\ny2 = [0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9]\n\n# Data for the third graph\nx3 = [0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7]\ny3 = [0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0]\n\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot the first graph\nax.plot(x, y, color='cyan')\nax.set_title('Score at Time 0')\n\n# Plot the second graph\nax.plot(x2, y2, color='orange')\nax.set_title('Score at Time 20')\n\n# Plot the third graph\nax.plot(x3, y3, color='red')\nax.set_title('Score at Time 40')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_85.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the bar chart\ncountries = ['Japan', 'Australia', 'Canada', 'Germany', 'Italy', 'France', 'UK', 'USA']\nconsumption = [1200, 1300, 1400, 1500, 1600, 1700, 1800, 1900]\nproduction = [1000, 1100, 1200, 1300, 1400, 1500, 1600, 1700]\nratio = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8]\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Create a bar chart with the data\nax.bar(countries, consumption, color='red')\nax.bar(countries, production, bottom=consumption, color='blue')\nax.bar(countries, ratio, bottom=[c + p for c, p in zip(consumption, production)], color='green')\n\n# Set the title and labels\nax.set_title('Energy Consumption and Production by Country')\nax.set_xlabel('Country')\nax.set_ylabel('Energy (TWh)')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_86.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the left column\nleft_data = {\n    'leave-taking': [10, 9],\n    'thanking': [10, 16],\n    'persuasion': [10, 15],\n    'apology': [7, 5],\n    'criticism': [24, 11],\n    'request': [31, 16],\n    'greeting': [8, 16]\n}\n\n# Data for the right column\nright_data = {\n    'synthetic data': [10, 16, 15, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,"}
{"file": "dataset/ori_500/bar_87.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the plots\nx}
{"file": "dataset/ori_500/bar_88.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\ngroups = ['Vicuna-HAG', 'Vicuna-Default', 'LLAMA-HAG', 'LLAMA-Default']\nscores = [-3.2, -3.3, -3.2, -3.3]\nconstraint_words = ['3 Constraint Words', '5 Constraint Words', '7 Constraint Words', '10 Constraint Words']\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\nbars = ax.bar(groups, scores, color='blue')\n\n# Add constraint words as labels\nfor bar, word in zip(bars, constraint_words):\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval, word, ha='center', va='bottom')\n\n# Set the title and labels\nax.set_title('Scores by group and constraint word count')\nax.set_xlabel('Group')\nax.set_ylabel('Score')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_89.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Set the background color of the plot\nax.set_facecolor('white')\n\n# Set the title of the plot\nax.set_title('Model Performance Metrics', fontsize=20)\n\n# Set the x-axis label\nax.set_xlabel('Top-10 super families in training dataset', fontsize=14)\n\n# Set the y-axis label\nax.set_ylabel('Metrics', fontsize=14)\n\n# Set the x-ticks\nax.set_xticks([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n\n# Set the x-tick labels\nax.set_xticklabels(['1', '2', '3', '4', '5', '6', '7', '8', '9', '10'])\n\n# Set the y-ticks\nax.set_yticks([0.2, 0.4, 0.6, 0.8, 1.0])\n\n# Set the y-tick labels\nax.set_yticklabels(['0.2', '0.4', '0.6', '0.8', '1.0'])\n\n# Set the grid lines\nax.grid(True)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top x-axis line\nax.spines['top'].set_color('none')\n\n# Set the color of the right y-axis line\nax.spines['right'].set_color('none')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top x-axis line\nax.spines['top'].set_color('none')\n\n# Set the color of the right y-axis line\nax.spines['right'].set_color('none')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top x-axis line\nax.spines['top'].set_color('none')\n\n# Set the color of the right y-axis line\nax.spines['right'].set_color('none')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top x-axis line\nax.spines['top'].set_color('none')\n\n# Set the color of the right y-axis line\nax.spines['right'].set_color('none')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top x-axis line\nax.spines['top'].set_color('none')\n\n# Set the color of the right y-axis line\nax.spines['right'].set_color('none')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top x-axis line\nax.spines['top'].set_color('none')\n\n# Set the color of the right y-axis line\nax.spines['right'].set_color('none')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top x-axis line\nax.spines['top'].set_color('none')\n\n# Set the color of the right y-axis line\nax.spines['right'].set_color('none')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top x-axis line\nax.spines['top'].set_color('none')\n\n# Set the color of the right y-axis line\nax.spines['right'].set_color('none')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top x-axis line\nax.spines['top'].set_color('none')\n\n# Set the color of the right y-axis line\nax.spines['right'].set_color('none')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top x-axis line\nax.spines['top'].set_color('none')\n\n# Set the color of the right y-axis line\nax.spines['right'].set_color('none')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top x-axis line\nax.spines['top'].set_color('none')\n\n# Set the color of the right y-axis line\nax.spines['right'].set_color('none')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top x-axis line\nax.spines['top'].set_color('none')\n\n# Set the color of the right y-axis line\nax.spines['right'].set_color('none')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top x-axis line\nax.spines['top'].set_color('none')\n\n# Set the color of the right y-axis line\nax.spines['right'].set_color('none')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top x-axis line\nax.spines['top'].set_color('none')\n\n# Set the color of the right y-axis line\nax.spines['right'].set_color('none')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top x-axis line\nax.spines['top'].set_color('none')\n\n# Set the color of the right y-axis line\nax.spines['right'].set_color('none')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top x-axis line\nax.spines['top'].set_color('none')\n\n# Set the color of the right y-axis line\nax.spines['right'].set_color('none')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top x-axis line\nax.spines['top'].set_color('none')\n\n# Set the color of the right y-axis line\nax.spines['right'].set_color('none')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top x-axis line\nax.spines['top'].set_color('none')\n\n# Set the color of the right y-axis line\nax.spines['right'].set_color('none')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top x-axis line\nax.spines['top'].set_color('none')\n\n# Set the color of the right y-axis line\nax.spines['right'].set_color('none')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top x-axis line\nax.spines['top'].set_color('none')\n\n# Set the color of the right y-axis line\nax.spines['right'].set_color('none')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top x-axis line\nax.spines['top'].set_color('none')\n\n# Set the color of the right y-axis line\nax.spines['right'].set_color('none')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the"}
{"file": "dataset/ori_500/bar_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(9.0, 6.0))\n\n# Set the title of the plot\nax.set_title('GENIA')\n\n# Set the x-axis label\nax.set_xlabel('Type')\n\n# Set the y-axis label\nax.set_ylabel('Error correction rate (%)')\n\n# Define the data for the plot\nx = ['Type', 'Span', 'T&S', 'Spurious', 'Total']\ny1 = [50, 40, 30, 20, 10]\ny2 = [70, 60, 50, 40, 30]\ny3 = [80, 70, 60, 50, 40]\n\n# Plot the data\nax.plot(x, y1, color='pink')\nax.plot(x, y2, color='orange')\nax.plot(x, y3, color='green')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_90.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nmodels = ['GPT4V', 'OSCAR', 'LLaMA', 'BLIP2', 'BLIP1', 'Video-LLaMA', 'Lavila']\nscores_a = [82.5, 73.93, 31.79, 4.64, 4.64, 0.71, 0.0]\nscores_b = [80, 60, 50, 40, 30, 20, 10]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(12, 8))\n\n# Plot bars for scores A\nax.bar(models, scores_a, color='red', label='Score A')\n\n# Plot bars for scores B\nax.bar(models, scores_b, color='blue', label='Score B')\n\n# Set title and labels\nax.set_title('Human Study')\nax.set_xlabel('Model')\nax.set_ylabel('Score (%)')\n\n# Add legend\nax.legend()\n\n# Display plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_91.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\npheme = ['GCN', 'RvNN', 'Hyphen', 'GET']\nf1_scores = [75, 80, 85, 90]\nparty_colors = ['blue', 'orange', 'red']\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Plot the bar chart\nax.barh(pheme, f1_scores, color=party_colors)\n\n# Set the title and labels\nax.set_title('Pheme vs F1 Score')\nax.set_xlabel('F1 Score')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_92.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the first plot\nx = [0, 100, 200, 300, 400, 500, 600, 700, 800]\ny1 = [100, 150, 200, 250, 300, 350, 400, 450, 500]\ny2 = [120, 170, 220, 270, 320, 370, 420, 470, 520]\ny3 = [140, 190, 240, 290, 340, 390, 440, 490, 540]\n\n# Data for the second plot\nx = [0, 100, 200, 300, 400, 500, 600, 700, 800]\ny1 = [100, 150, 200, 250, 300, 350, 400, 450, 500]\ny2 = [120, 170, 220, 270, 320, 370, 420, 470, 520]\ny3 = [140, 190, 240, 290, 340, 390, 440, 490, 540]\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data\nax.plot(x, y1, label='human')\nax.plot(x, y2, label='gpt4')\nax.plot(x, y3, label='gpt4-cot')\n\n# Set the title and labels\nax.set_title('Resonance Preference Plot for rich-context')\nax.set_xlabel('Count')\nax.set_ylabel('Score')\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_93.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for Effort\neffort_data = [20.4, 29.6, 20.4, 20.4, 20.4, 9.3]\neffort_labels = ['Very Low', 'Low', 'Neutral', 'High', 'Very High']\n\n# Data for Brainwave\nbrainwave_data = [23.8, 14.3, 16.7, 38.1, 7.1]\nbrainwave_labels = ['Very Low', 'Low', 'Neutral', 'High', 'Very High']\n\nfig, axes = plt.subplots(1, 2, figsize=(6, 3))\n\n# Plot Effort\naxes[0].bar(effort_labels, effort_data, color='red')\naxes[0].set_title('Effort')\n\n# Plot Brainwave\naxes[1].bar(brainwave_labels, brainwave_data, color='green')\naxes[1].set_title('Brainwave')\n\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_94.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Set the title of the plot\nax.set_title('Rate of Gain Change[%]')\n\n# Set the x-axis label\nax.set_xlabel('Brightness')\n\n# Set the y-axis label\nax.set_ylabel('Rate of Gain Change[%]')\n\n# Create a bar chart with the data\nbars = ax.bar([0.5, 0.6, 0.7, 0.8, 0.9], [20, 30, 40, 50, 60], color='red')\nbars[0].set_color('blue')\n\n# Create a second bar chart with the data\nbars2 = ax.bar([1.0, 1.1, 1.2, 1.3, 1.4], [10, 20, 30, 40, 50], color='blue')\nbars2[0].set_color('red')\n\n# Create a third bar chart with the data\nbars3 = ax.bar([1.5, 1.6, 1.7, 1.8, 1.9], [5, 15, 25, 35, 45], color='red')\nbars3[0].set_color('blue')\n\n# Create a fourth bar chart with the data\nbars4 = ax.bar([2.0, 2.1, 2.2, 2.3, 2.4], [1, 11, 21, 31, 41], color='blue')\nbars4[0].set_color('red')\n\n# Create a fifth bar chart with the data\nbars5 = ax.bar([2.5, 2.6, 2.7, 2.8, 2.9], [0, 10, 20, 30, 40], color='red')\nbars5[0].set_color('blue')\n\n# Create a sixth bar chart with the data\nbars6 = ax.bar([3.0, 3.1, 3.2, 3.3, 3.4], [0, 10, 20, 30, 40], color='blue')\nbars6[0].set_color('red')\n\n# Create a seventh bar chart with the data\nbars7 = ax.bar([3.5, 3.6, 3.7, 3.8, 3.9], [0, 10, 20, 30, 40], color='red')\nbars7[0].set_color('blue')\n\n# Create a eighth bar chart with the data\nbars8 = ax.bar([4.0, 4.1, 4.2, 4.3, 4.4], [0, 10, 20, 30, 40], color='blue')\nbars8[0].set_color('red')\n\n# Create a ninth bar chart with the data\nbars9 = ax.bar([4.5, 4.6, 4.7, 4.8, 4.9], [0, 10, 20, 30, 40], color='red')\nbars9[0].set_color('blue')\n\n# Create a tenth bar chart with the data\nbars10 = ax.bar([5.0, 5.1, 5.2, 5.3, 5.4], [0, 10, 20, 30, 40], color='blue')\nbars10[0].set_color('red')\n\n# Create a eleventh bar chart with the data\nbars11 = ax.bar([5.5, 5.6, 5.7, 5.8, 5.9], [0, 10, 20, 30, 40], color='red')\nbars11[0].set_color('blue')\n\n# Create a twelfth bar chart with the data\nbars12 = ax.bar([6.0, 6.1, 6.2, 6.3, 6.4], [0, 10, 20, 30, 40], color='blue')\nbars12[0].set_color('red')\n\n# Create a thirteenth bar chart with the data\nbars13 = ax.bar([6.5, 6.6, 6.7, 6.8, 6.9], [0, 10, 20, 30, 40], color='red')\nbars13[0].set_color('blue')\n\n# Create a fourteenth bar chart with the data\nbars14 = ax.bar([7.0, 7.1, 7.2, 7.3, 7.4], [0, 10, 20, 30, 40], color='blue')\nbars14[0].set_color('red')\n\n# Create a fifteenth bar chart with the data\nbars15 = ax.bar([7.5, 7.6, 7.7, 7.8, 7.9], [0, 10, 20, 30, 40], color='red')\nbars15[0].set_color('blue')\n\n# Create a sixteenth bar chart with the data\nbars16 = ax.bar([8.0, 8.1, 8.2, 8.3, 8.4], [0, 10, 20, 30, 40], color='blue')\nbars16[0].set_color('red')\n\n# Create a seventeenth bar chart with the data\nbars17 = ax.bar([8.5, 8.6, 8.7, 8.8, 8.9], [0, 10, 20, 30, 40], color='red')\nbars17[0].set_color('blue')\n\n# Create a eighteenth bar chart with the data\nbars18 = ax.bar([9.0, 9.1, 9.2, 9.3, 9.4], [0, 10, 20, 30, 40], color='blue')\nbars18[0].set_color('red')\n\n# Create a nineteenth bar chart with the data\nbars19 = ax.bar([9.5, 9.6, 9.7, 9.8, 9.9], [0, 10, 20, 30, 40], color='red')\nbars19[0].set_color('blue')\n\n# Create a twentieth bar chart with the data\nbars20 = ax.bar([10.0, 10.1, 10.2, 10.3, 10.4], [0, 10, 20, 30, 40], color='blue')\nbars20[0].set_color('red')\n\n# Create a twenty-first bar chart with the data\nbars21 = ax.bar([10.5, 10.6, 10.7, 10.8, 10.9], [0, 10, 20, 30, 40], color='red')\nbars21[0].set_color('blue')\n\n# Create a twenty-second bar chart with the data\nbars22 = ax.bar([11.0, 11.1, 11.2, 11.3, 11.4], [0, 10, 20, 30, 40], color='blue')\nbars22[0].set_color('red')\n\n# Create a twenty-third bar chart with the data\nbars23 = ax.bar([11.5, 11.6, 11.7, 11.8, 11.9], [0, 10, 20, 30, 40], color='red')\nbars23[0].set_color('blue')\n\n# Create a twenty-fourth bar chart with the data\nbars24 = ax.bar([12.0, 12.1, 12.2, 12.3, 12.4], [0, 10, 20, 30, 40], color='blue')\nbars24[0].set_color('red')\n\n# Create a twenty-fifth bar chart with the data\nbars25 = ax.bar([12.5, 12.6, 12.7, 12.8, 12.9], [0, 10, 20, 30, 40], color='red')\nbars25[0].set_color('blue')\n\n# Create a twenty-sixth bar chart with the data\nbars26 = ax.bar([13.0, 13.1, 13.2, 13.3, 13.4], [0, 10, 20, 30, 40], color='blue')\nbars26[0].set_color('red')\n\n# Create a twenty-seventh bar chart with the data\nbars27 = ax.bar([13.5, 13.6, 13.7, 13.8, 13.9], [0, 10, 20, 30, 40], color='red')\nbars27[0].set_color('blue')\n\n# Create a twenty-eighth bar chart with the data\nbars28 = ax.bar([14.0, 14.1, 14.2, 14.3, 14.4], [0, 10, 20, 30, 40], color='blue')\nbars28[0].set_color('red')\n\n# Create a twenty-ninth bar chart with the data\nbars29 = ax.bar([14.5, 14.6, 14.7, 14.8, 14.9], [0, 10, 20, 30, 40], color='red')\nbars29[0].set_color('blue')\n\n# Create a thirtieth bar chart with the data\nbars30 = ax.bar([15.0, 15.1, 15.2, 15.3, 15.4], [0, 10, 20, 30, 40], color='blue')\nbars30[0].set_color('red')\n\n# Create a thirty-first bar chart with the data\nbars31 = ax.bar([15.5, 15.6, 15.7, 15.8, 15.9], [0, 10, 20, 30, 40], color='red')\nbars31[0].set_color('blue')\n\n# Create a thirty-second bar chart with the data\nbars32 = ax.bar([16.0, 16.1, 16.2, 16.3, 16.4], [0, 10, 20, 30, 40], color='blue')\nbars32[0].set_color('red')\n\n# Create a thirty-third bar chart with the data\nbars33 = ax.bar([16.5, 16.6, 16.7, 16.8, 16.9], [0, 10, 20, 30, 40], color='red')\nbars33[0].set_color('blue')\n\n# Create a thirty-fourth bar chart with the data\nbars34 = ax.bar([17.0, 17.1, 17.2, 17.3, 17.4], [0, 10, 20, 30, 40], color='blue')\nbars34[0].set_color('red')\n\n# Create a thirty-fifth bar chart with the data\nbars35 = ax.bar([17.5, 17.6, 17.7, 17.8, 17.9], [0, 10, 20, 30, 40], color='red')\nbars35[0].set_color('blue')\n\n# Create a thirty-sixth bar chart with the data\nbars36 = ax.bar([18.0, 18.1, 18.2, 18.3, 18.4], [0, 10, 20, 30, 40], color='blue')\nbars36[0].set_color('red')\n\n# Create a thirty-seventh bar chart with the data\nbars37 = ax.bar([18.5, 18.6, 18.7, 18.8, 18.9], [0, 10, 20, 30, 40], color='red')\nbars37[0].set_color('blue')\n\n# Create a thirty-eighth bar chart with the data\nbars38 = ax.bar([19.0, 19.1, 19.2, 19.3, 19.4], [0, 10, 20, 30, 40], color='blue')\nbars38[0].set_color('red')\n\n# Create a thirty-ninth bar chart with the data\nbars39 = ax.bar([19.5, 19.6, 19.7, 19.8, 19.9], [0, 10, 20, 30, 40], color='red')\nbars39[0].set_color('blue')\n\n# Create a fortieth bar chart with the data\nbars40 = ax.bar([20.0, 20.1, 20.2, 20.3, 20.4], [0, 10, 20, 30, 40], color='blue')\nbars40[0].set_color('red')\n\n# Create a forty-first bar chart with the data\nbars41 = ax.bar([20.5, 20.6, 20.7, 20.8, 20.9], [0, 10, 20, 30, 40], color='red')\nbars41[0].set_color('blue')\n\n# Create a forty-second bar chart with the data\nbars42 = ax.bar([21.0, 21.1, 21.2, 21.3, 21.4], [0, 10, 20, 30, 40], color='blue')\nbars42[0].set_color('red')\n\n# Create a forty-third bar chart with the data\nbars43 = ax.bar([21.5, 21.6, 21.7, 21.8, 21.9], [0, 10, 20, 30, 40], color='red')\nbars43[0].set_color('blue')\n\n# Create a forty-fourth bar chart with the data\nbars44 = ax.bar([22.0, 22.1, 22.2, 22.3, 22.4], [0, 10, 20, 30, 40], color='blue')\nbars44[0].set_color('red')\n\n# Create a forty-fifth bar chart with the data\nbars45 = ax.bar([22.5, 22.6, 22.7, 22.8, 22.9], [0, 10, 20, 30, 40], color='red')\nbars45[0].set_color('blue')\n\n# Create a forty-sixth bar chart with the data\nbars46 = ax.bar([23.0, 23.1, 23.2, 23.3, 23.4], [0, 10, 20, 30, 40], color='blue')\nbars46[0].set_color('red')\n\n# Create a forty-seventh bar chart with the data\nbars47 = ax.bar([23.5, 23.6, 23.7, 23.8, 23.9], [0, 10, 20, 30, 40], color='red')\nbars47[0].set_color('blue')\n\n# Create a forty-eighth bar chart with the data\nbars48 = ax.bar([24.0, 24.1, 24.2, 24.3, 24.4], [0, 10, 20, 30, 40], color='blue')\nbars48[0].set_color('red')\n\n# Create a forty-ninth bar chart with the data\nbars49 = ax.bar([24.5, 24.6, 24.7, 24.8, 24.9], [0, 10, 20, 30, 40], color='red')\nbars49[0].set_color('blue')\n\n# Create a fiftieth bar chart with the data\nbars50 = ax.bar([25.0, 25.1, 25.2, 25.3, 25.4], [0, 10, 20, 30, 40], color='blue')\nbars50[0].set_color('red')\n\n# Create a fifty-first bar chart with the data\nbars51 = ax.bar([25.5, 25.6, 25.7, 25.8, 25.9], [0, 10, 20, 30, 40], color='"}
{"file": "dataset/ori_500/bar_95.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nbrands = ['Bactrian-X EN', 'Lima-X DE', 'Bactrian-X FR', 'Lima-X IT', 'Bactrian-X ES']\nperformance = [3.5, 2.3, 4.4, 1.3, -0.7]\nimprovement = [-1.0, 0.3, 3.4, -3.3, -2.7]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Plot the bars\nax.bar(brands, performance, color='blue')\nax.bar(brands, improvement, bottom=performance, color='green')\n\n# Set the title and labels\nax.set_title('Model Performance Improvement by Language')\nax.set_xlabel('Model with Language')\nax.set_ylabel('Performance [mW]')\n\n# Add a horizontal line at y=0\nax.axhline(y=0, color='black', linewidth=2)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_96.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the first graph\nx1 = ['Random', 'Ours', 'SOTA']\ny1 = [66.3, 61.9, 53.8]\ncolors1 = ['blue', 'red', 'pink']\n\n# Data for the second graph\nx2 = ['Random', 'Ours', 'SOTA']\ny2 = [49.3, 45.7, 41.6]\ncolors2 = ['blue', 'red', 'pink']\n\n# Data for the third graph\nx3 = ['Random', 'Ours', 'SOTA']\ny3 = [48.0, 42.6, 36.5]\ncolors3 = ['blue', 'red', 'pink']\n\n# Data for the fourth graph\nx4 = ['Random', 'Ours', 'SOTA']\ny4 = [43.8, 40.2, 36.5]\ncolors4 = ['blue', 'red', 'pink']\n\n# Create a figure and a set of subplots\nfig, axs = plt.subplots(2, 2, figsize=(8.0, 8.0))\n\n# Plot the first graph\naxs[0, 0].bar(x1, y1, color=colors1)\naxs[0, 0].set_title('Truthful: Misleading = 2:0')\naxs[0, 0].set_ylim(-80, 80)\n\n# Plot the second graph\naxs[0, 1].bar(x2, y2, color=colors2)\naxs[0, 1].set_title('Truthful: Misleading = 2:1')\naxs[0, 1].set_ylim(-80, 80)\n\n# Plot the third graph\naxs[1, 0].bar(x3, y3, color=colors3)\naxs[1, 0].set_title('Truthful: Misleading = 2:2')\naxs[1, 0].set_ylim(-80, 80)\n\n# Plot the fourth graph\naxs[1, 1].bar(x4, y4, color=colors4)\naxs[1, 1].set_title('Truthful: Misleading = 1:2')\naxs[1, 1].set_ylim(-80, 80)\n\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_97.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Set the title of the plot\nax.set_title('Human Labeling and Agreement Bias Checking 1')\n\n# Create a bar chart with the data\nax.bar([1, 2, 3, 4, 5, 6], [55, 45, 35, 25, 15, 5], color='pink')\nax.bar([1, 2, 3, 4, 5, 6], [50, 40, 30, 20, 10, 0], color='lightblue')\nax.bar([1, 2, 3, 4, 5, 6], [45, 35, 25, 15, 5, 0], color='lightgreen')\nax.bar([1, 2, 3, 4, 5, 6], [40, 30, 20, 10, 0, 0], color='orange')\nax.bar([1, 2, 3, 4, 5, 6], [35, 25, 15, 5, 0, 0], color='purple')\n\n# Set the x-axis label\nax.set_xlabel('Human Annotator')\n\n# Set the y-axis label\nax.set_ylabel('Scores')\n\n# Set the y-axis limits\nax.set_ylim(0, 60)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_98.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nmodels = ['Model A', 'Model B', 'Model C', 'Model D', 'Model E', 'Model F', 'Model G', 'Model H', 'Model I']\nscores = [54.9, 71.5, 79.2, 60.3, 54.5, 56.8, 92.6, 89.2, 83.3]\ncolors = ['green', 'orange']\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Plot the bars\nfor i, model in enumerate(models):\n    ax.bar(model, scores[i], color=colors[i % len(colors)])\n\n# Set the title\nax.set_title('Performance Comparison by Model')\n\n# Set the y-axis label\nax.set_ylabel('Scores')\n\n# Set the x-axis label\nax.set_xlabel('Models')\n\n# Set the y-axis limits\nax.set_ylim(0, 100)\n\n# Set the grid\nax.grid(True)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/bar_99.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the first graph\nx = ['Traffic Flow', 'Accident Rate', 'Public Transport Usage', 'Road Conditions', 'Public Satisfaction']\ny = [150.0, 180.0, 75.0, 90.0, 80.0]\n\n# Data for the second graph\nx2 = ['Traffic Flow', 'Accident Rate', 'Public Transport Usage', 'Road Conditions', 'Public Satisfaction']\ny2 = [2.5, 2.0, 1.5, 2.0, 1.5]\n\n# Data for the third graph\nx3 = ['Traffic Flow', 'Accident Rate', 'Public Transport Usage', 'Road Conditions', 'Public Satisfaction']\ny3 = [2.5, 2.0, 1.5, 2.0, 1.5]\n\n# Data for the fourth graph\nx4 = ['Traffic Flow', 'Accident Rate', 'Public Transport Usage', 'Road Conditions', 'Public Satisfaction']\ny4 = [2.5, 2.0, 1.5, 2.0, 1.5]\n\n# Create a figure and a set of subplots\nfig, axs = plt.subplots(2, 2, figsize=(10, 8))\n\n# Plot the first graph\naxs[0, 0].bar(x, y, color='orange')\naxs[0, 0].set_title('Dataset 1')\n\n# Plot the second graph\naxs[0, 1].bar(x2, y2, color='lightblue')\naxs[0, 1].set_title('Dataset 2')\n\n# Plot the third graph\naxs[1, 0].bar(x3, y3, color='lightgreen')\naxs[1, 0].set_title('Dataset 3')\n\n# Plot the fourth graph\naxs[1, 1].bar(x4, y4, color='yellow')\naxs[1, 1].set_title('Dataset 4')\n\n# Adjust layout\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 8))\n\n# Set the title of the plot\nax.set_title('Dominance')\n\n# Set the x-axis label\nax.set_xlabel('SAM Rating')\n\n# Set the y-axis label\nax.set_ylabel('Color')\n\n# Define the data for the bars\nbars = ['neutral', 'neutral', 'yellow high', 'yellow low', 'green high', 'green low', 'blue high', 'blue low', 'red high', 'red low', 'red high']\nsam_ratings = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n\n# Create a bar chart with the data\nax.barh(bars, sam_ratings, color='blue')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(9, 5))\n\n# Set the title of the plot\nax.set_title('Daily Activity Durations')\n\n# Create a rectangle for the first activity\nrect1 = plt.Rectangle((20, 20), 30, 10, color='blue', fill=False)\nax.add_patch(rect1)\n\n# Create a rectangle for the second activity\nrect2 = plt.Rectangle((20, 40), 30, 10, color='green', fill=False)\nax.add_patch(rect2)\n\n# Create a rectangle for the third activity\nrect3 = plt.Rectangle((20, 60), 30, 10, color='red', fill=False)\nax.add_patch(rect3)\n\n# Create a rectangle for the fourth activity\nrect4 = plt.Rectangle((20, 80), 30, 10, color='yellow', fill=False)\nax.add_patch(rect4)\n\n# Create a rectangle for the fifth activity\nrect5 = plt.Rectangle((20, 100), 30, 10, color='cyan', fill=False)\nax.add_patch(rect5)\n\n# Create a rectangle for the sixth activity\nrect6 = plt.Rectangle((20, 120), 30, 10, color='magenta', fill=False)\nax.add_patch(rect6)\n\n# Create a rectangle for the seventh activity\nrect7 = plt.Rectangle((20, 140), 30, 10, color='black', fill=False)\nax.add_patch(rect7)\n\n# Create a rectangle for the eighth activity\nrect8 = plt.Rectangle((20, 160), 30, 10, color='white', fill=False)\nax.add_patch(rect8)\n\n# Create a rectangle for the ninth activity\nrect9 = plt.Rectangle((20, 180), 30, 10, color='gray', fill=False)\nax.add_patch(rect9)\n\n# Create a rectangle for the tenth activity\nrect10 = plt.Rectangle((20, 200), 30, 10, color='brown', fill=False)\nax.add_patch(rect10)\n\n# Create a rectangle for the eleventh activity\nrect11 = plt.Rectangle((20, 220), 30, 10, color='pink', fill=False)\nax.add_patch(rect11)\n\n# Create a rectangle for the twelfth activity\nrect12 = plt.Rectangle((20, 240), 30, 10, color='orange', fill=False)\nax.add_patch(rect12)\n\n# Create a rectangle for the thirteenth activity\nrect13 = plt.Rectangle((20, 260), 30, 10, color='purple', fill=False)\nax.add_patch(rect13)\n\n# Create a rectangle for the fourteenth activity\nrect14 = plt.Rectangle((20, 280), 30, 10, color='silver', fill=False)\nax.add_patch(rect14)\n\n# Create a rectangle for the fifteenth activity\nrect15 = plt.Rectangle((20, 300), 30, 10, color='gold', fill=False)\nax.add_patch(rect15)\n\n# Create a rectangle for the sixteenth activity\nrect16 = plt.Rectangle((20, 320), 30, 10, color='lime', fill=False)\nax.add_patch(rect16)\n\n# Create a rectangle for the seventeenth activity\nrect17 = plt.Rectangle((20, 340), 30, 10, color='navy', fill=False)\nax.add_patch(rect17)\n\n# Create a rectangle for the eighteenth activity\nrect18 = plt.Rectangle((20, 360), 30, 10, color='maroon', fill=False)\nax.add_patch(rect18)\n\n# Create a rectangle for the nineteenth activity\nrect19 = plt.Rectangle((20, 380), 30, 10, color='olive', fill=False)\nax.add_patch(rect19)\n\n# Create a rectangle for the twentieth activity\nrect20 = plt.Rectangle((20, 400), 30, 10, color='teal', fill=False)\nax.add_patch(rect20)\n\n# Create a rectangle for the twenty-first activity\nrect21 = plt.Rectangle((20, 420), 30, 10, color='indigo', fill=False)\nax.add_patch(rect21)\n\n# Create a rectangle for the twenty-second activity\nrect22 = plt.Rectangle((20, 440), 30, 10, color='violet', fill=False)\nax.add_patch(rect22)\n\n# Create a rectangle for the twenty-third activity\nrect23 = plt.Rectangle((20, 460), 30, 10, color='coral', fill=False)\nax.add_patch(rect23)\n\n# Create a rectangle for the twenty-fourth activity\nrect24 = plt.Rectangle((20, 480), 30, 10, color='azure', fill=False)\nax.add_patch(rect24)\n\n# Create a rectangle for the twenty-fifth activity\nrect25 = plt.Rectangle((20, 500), 30, 10, color='fuchsia', fill=False)\nax.add_patch(rect25)\n\n# Create a rectangle for the twenty-sixth activity\nrect26 = plt.Rectangle((20, 520), 30, 10, color='chartreuse', fill=False)\nax.add_patch(rect26)\n\n# Create a rectangle for the twenty-seventh activity\nrect27 = plt.Rectangle((20, 540), 30, 10, color='saddlebrown', fill=False)\nax.add_patch(rect27)\n\n# Create a rectangle for the twenty-eighth activity\nrect28 = plt.Rectangle((20, 560), 30, 10, color='plum', fill=False)\nax.add_patch(rect28)\n\n# Create a rectangle for the twenty-ninth activity\nrect29 = plt.Rectangle((20, 580), 30, 10, color='tan', fill=False)\nax.add_patch(rect29)\n\n# Create a rectangle for the thirtieth activity\nrect30 = plt.Rectangle((20, 600), 30, 10, color='lavender', fill=False)\nax.add_patch(rect30)\n\n# Create a rectangle for the thirtieth-first activity\nrect31 = plt.Rectangle((20, 620), 30, 10, color='wheat', fill=False)\nax.add_patch(rect31)\n\n# Create a rectangle for the thirtieth-second activity\nrect32 = plt.Rectangle((20, 640), 30, 10, color='beige', fill=False)\nax.add_patch(rect32)\n\n# Create a rectangle for the thirtieth-third activity\nrect33 = plt.Rectangle((20, 660), 30, 10, color='ivory', fill=False)\nax.add_patch(rect33)\n\n# Create a rectangle for the thirtieth-fourth activity\nrect34 = plt.Rectangle((20, 680), 30, 10, color='seashell', fill=False)\nax.add_patch(rect34)\n\n# Create a rectangle for the thirtieth-fifth activity\nrect35 = plt.Rectangle((20, 700), 30, 10, color='cornsilk', fill=False)\nax.add_patch(rect35)\n\n# Create a rectangle for the thirtieth-sixth activity\nrect36 = plt.Rectangle((20, 720), 30, 10, color='blanchedalmond', fill=False)\nax.add_patch(rect36)\n\n# Create a rectangle for the thirtieth-seventh activity\nrect37 = plt.Rectangle((20, 740), 30, 10, color='bisque', fill=False)\nax.add_patch(rect37)\n\n# Create a rectangle for the thirtieth-eighth activity\nrect38 = plt.Rectangle((20, 760), 30, 10, color='navajowhite', fill=False)\nax.add_patch(rect38)\n\n# Create a rectangle for the thirtieth-ninth activity\nrect39 = plt.Rectangle((20, 780), 30, 10, color='moccasin', fill=False)\nax.add_patch(rect39)\n\n# Create a rectangle for the thirtieth-tenth activity\nrect40 = plt.Rectangle((20, 800), 30, 10, color='papayawhip', fill=False)\nax.add_patch(rect40)\n\n# Create a rectangle for the thirtieth-eleventh activity\nrect41 = plt.Rectangle((20, 820), 30, 10, color='blanchedalmond', fill=False)\nax.add_patch(rect41)\n\n# Create a rectangle for the thirtieth-twelfth activity\nrect42 = plt.Rectangle((20, 840), 30, 10, color='burlywood', fill=False)\nax.add_patch(rect42)\n\n# Create a rectangle for the thirtieth-thirteenth activity\nrect43 = plt.Rectangle((20, 860), 30, 10, color='cornflowerblue', fill=False)\nax.add_patch(rect43)\n\n# Create a rectangle for the thirtieth-fourteenth activity\nrect44 = plt.Rectangle((20, 880), 30, 10, color='darkkhaki', fill=False)\nax.add_patch(rect44)\n\n# Create a rectangle for the thirtieth-fifteenth activity\nrect45 = plt.Rectangle((20, 900), 30, 10, color='darkseagreen', fill=False)\nax.add_patch(rect45)\n\n# Create a rectangle for the thirtieth-sixteenth activity\nrect46 = plt.Rectangle((20, 920), 30, 10, color='darkslategray', fill=False)\nax.add_patch(rect46)\n\n# Create a rectangle for the thirtieth-seventeenth activity\nrect47 = plt.Rectangle((20, 940), 30, 10, color='darkturquoise', fill=False)\nax.add_patch(rect47)\n\n# Create a rectangle for the thirtieth-eighteenth activity\nrect48 = plt.Rectangle((20, 960), 30, 10, color='darkviolet', fill=False)\nax.add_patch(rect48)\n\n# Create a rectangle for the thirtieth-nineteenth activity\nrect49 = plt.Rectangle((20, 980), 30, 10, color='deeppink', fill=False)\nax.add_patch(rect49)\n\n# Create a rectangle for the thirtieth-twentieth activity\nrect50 = plt.Rectangle((20, 1000), 30, 10, color='deepskyblue', fill=False)\nax.add_patch(rect50)\n\n# Create a rectangle for the thirtieth-twenty-first activity\nrect51 = plt.Rectangle((20, 1020), 30, 10, color='dimgray', fill=False)\nax.add_patch(rect51)\n\n# Create a rectangle for the thirtieth-twenty-second activity\nrect52 = plt.Rectangle((20, 1040), 30, 10, color='dodgerblue', fill=False)\nax.add_patch(rect52)\n\n# Create a rectangle for the thirtieth-twenty-third activity\nrect53 = plt.Rectangle((20, 1060), 30, 10, color='firebrick', fill=False)\nax.add_patch(rect53)\n\n# Create a rectangle for the thirtieth-twenty-fourth activity\nrect54 = plt.Rectangle((20, 1080), 30, 10, color='floralwhite', fill=False)\nax.add_patch(rect54)\n\n# Create a rectangle for the thirtieth-twenty-fifth activity\nrect55 = plt.Rectangle((20, 1100), 30, 10, color='forestgreen', fill=False)\nax.add_patch(rect55)\n\n# Create a rectangle for the thirtieth-twenty-sixth activity\nrect56 = plt.Rectangle((20, 1120), 30, 10, color='fuchsia', fill=False)\nax.add_patch(rect56)\n\n# Create a rectangle for the thirtieth-twenty-seventh activity\nrect57 = plt.Rectangle((20, 1140), 30, 10, color='gainsboro', fill=False)\nax.add_patch(rect57)\n\n# Create a rectangle for the thirtieth-twenty-eighth activity\nrect58 = plt.Rectangle((20, 1160), 30, 10, color='ghostwhite', fill=False)\nax.add_patch(rect58)\n\n# Create a rectangle for the thirtieth-twenty-ninth activity\nrect59 = plt.Rectangle((20, 1180), 30, 10, color='gold', fill=False)\nax.add_patch(rect59)\n\n# Create a rectangle for the thirtieth-thirtieth activity\nrect60 = plt.Rectangle((20, 1200), 30, 10, color='goldenrod', fill=False)\nax.add_patch(rect60)\n\n# Create a rectangle for the thirtieth-thirtieth-first activity\nrect61 = plt.Rectangle((20, 1220), 30, 10, color='gray', fill=False)\nax.add_patch(rect61)\n\n# Create a rectangle for the thirtieth-thirtieth-second activity\nrect62 = plt.Rectangle((20, 1240), 30, 10, color='green', fill=False)\nax.add_patch(rect62)\n\n# Create a rectangle for the thirtieth-thirtieth-third activity\nrect63 = plt.Rectangle((20, 1260), 30, 10, color='greenyellow', fill=False)\nax.add_patch(rect63)\n\n# Create a rectangle for the thirtieth-thirtieth-fourth activity\nrect64 = plt.Rectangle((20, 1280), 30, 10, color='honeydew', fill=False)\nax.add_patch(rect64)\n\n# Create a rectangle for the thirtieth-thirtieth-fifth activity\nrect65 = plt.Rectangle((20, 1300), 30, 10, color='hotpink', fill=False)\nax.add_patch(rect65)\n\n# Create a rectangle for the thirtieth-thirtieth-sixth activity\nrect66 = plt.Rectangle((20, 1320), 30, 10, color='indianred', fill=False)\nax.add_patch(rect66)\n\n# Create a rectangle for the thirtieth-thirtieth-seventh activity\nrect67 = plt.Rectangle((20, 1340), 30, 10, color='indigo', fill=False)\nax.add_patch(rect67)\n\n# Create a rectangle for the thirtieth-thirtieth-eighth activity\nrect68 = plt.Rectangle((20, 1360), 30, 10, color='ivory', fill=False)\nax.add_patch(rect68)\n\n# Create a rectangle for the thirtieth-thirtieth-ninth activity\nrect69 = plt.Rectangle((20, 1380), 30, 10, color='khaki', fill=False)\nax.add_patch(rect69)\n\n# Create a rectangle for the thirtieth-thirtieth-tenth activity\nrect70 = plt.Rectangle((20, 1400), 30, 10, color='lavender', fill=False)\nax.add_patch(rect70)\n\n# Create a rectangle for the thirtieth-thirtieth-eleventh activity\nrect71 = plt.Rectangle((20, 1420), 30, 10, color='lavenderblush', fill=False)\nax.add_patch(rect71)\n\n# Create a rectangle for the thirtieth-thirtieth-twelfth activity\nrect72 = plt.Rectangle((20, 1440), 30, 10, color='lawngreen', fill=False)\nax.add_patch(rect72)\n\n# Create a rectangle for the thirtieth-thirtieth-thirteenth activity\nrect73 = plt.Rectangle((20, 1460), 30, 10, color='lemonchiffon', fill=False)\nax.add_patch(rect73)\n\n# Create a rectangle for the thirtieth-thirtieth-fourteenth activity\nrect74 = plt.Rectangle((20, 1480), 30, 10, color='lightblue', fill=False)\nax.add_patch(rect74)\n\n# Create a rectangle for the thirtieth-thirtieth-fifteenth activity\nrect75 = plt.Rectangle((20, 1500), 30, 10, color='lightcoral', fill=False)\nax.add_patch(rect75)\n\n# Create a rectangle for the thirtieth-thirtieth-sixteenth activity\nrect76 = plt.Rectangle((20, 1520), 30, 10, color='lightcyan', fill=False)\nax.add_patch(rect76)\n\n# Create a rectangle for the thirtieth-thirtieth-seventeenth activity\nrect77 = plt.Rectangle((20, 1540), 30, 10, color='lightgoldenrodyellow', fill=False)\nax.add_patch(rect77)\n\n# Create a rectangle for the thirtieth-thirtieth-eighteenth activity\nrect78 = plt.Rectangle((20, 1560), 30, 10, color='lightgray', fill=False)\n"}
{"file": "dataset/ori_500/box_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Set the title of the plot\nax.set_title('1.0 BLEU')\n\n# Set the x-axis label\nax.set_xlabel('Llama-70b (T2TT)')\n\n# Set the y-axis label\nax.set_ylabel('Llama-70b (S2TT)')\n\n# Draw a rectangle for the first model\nax.add_patch(plt.Rectangle((0.5, 18), 1, 2, color='blue'))\n\n# Draw a rectangle for the second model\nax.add_patch(plt.Rectangle((2.5, 18), 1, 2, color='red'))\n\n# Draw a rectangle for the third model\nax.add_patch(plt.Rectangle((4.5, 18), 1, 2, color='green'))\n\n# Draw a rectangle for the fourth model\nax.add_patch(plt.Rectangle((6.5, 18), 1, 2, color='yellow'))\n\n# Draw a rectangle for the fifth model\nax.add_patch(plt.Rectangle((8.5, 18), 1, 2, color='purple'))\n\n# Draw a rectangle for the sixth model\nax.add_patch(plt.Rectangle((10.5, 18), 1, 2, color='orange'))\n\n# Draw a rectangle for the seventh model\nax.add_patch(plt.Rectangle((12.5, 18), 1, 2, color='brown'))\n\n# Draw a rectangle for the eighth model\nax.add_patch(plt.Rectangle((14.5, 18), 1, 2, color='pink'))\n\n# Draw a rectangle for the ninth model\nax.add_patch(plt.Rectangle((16.5, 18), 1, 2, color='cyan'))\n\n# Draw a rectangle for the tenth model\nax.add_patch(plt.Rectangle((18.5, 18), 1, 2, color='magenta'))\n\n# Draw a rectangle for the eleventh model\nax.add_patch(plt.Rectangle((20.5, 18), 1, 2, color='grey'))\n\n# Draw a rectangle for the twelfth model\nax.add_patch(plt.Rectangle((22.5, 18), 1, 2, color='black'))\n\n# Draw a rectangle for the thirteenth model\nax.add_patch(plt.Rectangle((24.5, 18), 1, 2, color='white'))\n\n# Draw a rectangle for the fourteenth model\nax.add_patch(plt.Rectangle((26.5, 18), 1, 2, color='silver'))\n\n# Draw a rectangle for the fifteenth model\nax.add_patch(plt.Rectangle((28.5, 18), 1, 2, color='gold'))\n\n# Draw a rectangle for the sixteenth model\nax.add_patch(plt.Rectangle((30.5, 18), 1, 2, color='bronze'))\n\n# Draw a rectangle for the seventeenth model\nax.add_patch(plt.Rectangle((32.5, 18), 1, 2, color='ivory'))\n\n# Draw a rectangle for the eighteenth model\nax.add_patch(plt.Rectangle((34.5, 18), 1, 2, color='azure'))\n\n# Draw a rectangle for the nineteenth model\nax.add_patch(plt.Rectangle((36.5, 18), 1, 2, color='lavender'))\n\n# Draw a rectangle for the twentieth model\nax.add_patch(plt.Rectangle((38.5, 18), 1, 2, color='salmon'))\n\n# Draw a rectangle for the twenty-first model\nax.add_patch(plt.Rectangle((40.5, 18), 1, 2, color='tan'))\n\n# Draw a rectangle for the twenty-second model\nax.add_patch(plt.Rectangle((42.5, 18), 1, 2, color='olive'))\n\n# Draw a rectangle for the twenty-third model\nax.add_patch(plt.Rectangle((44.5, 18), 1, 2, color='navy'))\n\n# Draw a rectangle for the twenty-fourth model\nax.add_patch(plt.Rectangle((46.5, 18), 1, 2, color='maroon'))\n\n# Draw a rectangle for the twenty-fifth model\nax.add_patch(plt.Rectangle((48.5, 18), 1, 2, color='lime'))\n\n# Draw a rectangle for the twenty-sixth model\nax.add_patch(plt.Rectangle((50.5, 18), 1, 2, color='teal'))\n\n# Draw a rectangle for the twenty-seventh model\nax.add_patch(plt.Rectangle((52.5, 18), 1, 2, color='indigo'))\n\n# Draw a rectangle for the twenty-eighth model\nax.add_patch(plt.Rectangle((54.5, 18), 1, 2, color='violet'))\n\n# Draw a rectangle for the twenty-ninth model\nax.add_patch(plt.Rectangle((56.5, 18), 1, 2, color='coral'))\n\n# Draw a rectangle for the thirtieth model\nax.add_patch(plt.Rectangle((58.5, 18), 1, 2, color='plum'))\n\n# Draw a rectangle for the thirtieth-first model\nax.add_patch(plt.Rectangle((60.5, 18), 1, 2, color='chocolate'))\n\n# Draw a rectangle for the thirtieth-second model\nax.add_patch(plt.Rectangle((62.5, 18), 1, 2, color='sienna'))\n\n# Draw a rectangle for the thirtieth-third model\nax.add_patch(plt.Rectangle((64.5, 18), 1, 2, color='peru'))\n\n# Draw a rectangle for the thirtieth-fourth model\nax.add_patch(plt.Rectangle((66.5, 18), 1, 2, color='burlywood'))\n\n# Draw a rectangle for the thirtieth-fifth model\nax.add_patch(plt.Rectangle((68.5, 18), 1, 2, color='tan'))\n\n# Draw a rectangle for the thirtieth-sixth model\nax.add_patch(plt.Rectangle((70.5, 18), 1, 2, color='olive'))\n\n# Draw a rectangle for the thirtieth-seventh model\nax.add_patch(plt.Rectangle((72.5, 18), 1, 2, color='navy'))\n\n# Draw a rectangle for the thirtieth-eighth model\nax.add_patch(plt.Rectangle((74.5, 18), 1, 2, color='maroon'))\n\n# Draw a rectangle for the thirtieth-ninth model\nax.add_patch(plt.Rectangle((76.5, 18), 1, 2, color='lime'))\n\n# Draw a rectangle for the thirtieth-tenth model\nax.add_patch(plt.Rectangle((78.5, 18), 1, 2, color='teal'))\n\n# Draw a rectangle for the thirtieth-eleventh model\nax.add_patch(plt.Rectangle((80.5, 18), 1, 2, color='indigo'))\n\n# Draw a rectangle for the thirtieth-twelfth model\nax.add_patch(plt.Rectangle((82.5, 18), 1, 2, color='violet'))\n\n# Draw a rectangle for the thirtieth-thirteenth model\nax.add_patch(plt.Rectangle((84.5, 18), 1, 2, color='coral'))\n\n# Draw a rectangle for the thirtieth-fourteenth model\nax.add_patch(plt.Rectangle((86.5, 18), 1, 2, color='plum'))\n\n# Draw a rectangle for the thirtieth-fifteenth model\nax.add_patch(plt.Rectangle((88.5, 18), 1, 2, color='chocolate'))\n\n# Draw a rectangle for the thirtieth-sixteenth model\nax.add_patch(plt.Rectangle((90.5, 18), 1, 2, color='sienna'))\n\n# Draw a rectangle for the thirtieth-seventeenth model\nax.add_patch(plt.Rectangle((92.5, 18), 1, 2, color='peru'))\n\n# Draw a rectangle for the thirtieth-eighteenth model\nax.add_patch(plt.Rectangle((94.5, 18), 1, 2, color='burlywood'))\n\n# Draw a rectangle for the thirtieth-nineteenth model\nax.add_patch(plt.Rectangle((96.5, 18), 1, 2, color='tan'))\n\n# Draw a rectangle for the thirtieth-twentieth model\nax.add_patch(plt.Rectangle((98.5, 18), 1, 2, color='olive'))\n\n# Draw a rectangle for the thirtieth-twenty-first model\nax.add_patch(plt.Rectangle((100.5, 18), 1, 2, color='navy'))\n\n# Draw a rectangle for the thirtieth-twenty-second model\nax.add_patch(plt.Rectangle((102.5, 18), 1, 2, color='maroon'))\n\n# Draw a rectangle for the thirtieth-twenty-third model\nax.add_patch(plt.Rectangle((104.5, 18), 1, 2, color='lime'))\n\n# Draw a rectangle for the thirtieth-twenty-fourth model\nax.add_patch(plt.Rectangle((106.5, 18), 1, 2, color='teal'))\n\n# Draw a rectangle for the thirtieth-twenty-fifth model\nax.add_patch(plt.Rectangle((108.5, 18), 1, 2, color='indigo'))\n\n# Draw a rectangle for the thirtieth-twenty-sixth model\nax.add_patch(plt.Rectangle((110.5, 18), 1, 2, color='violet'))\n\n# Draw a rectangle for the thirtieth-twenty-seventh model\nax.add_patch(plt.Rectangle((112.5, 18), 1, 2, color='coral'))\n\n# Draw a rectangle for the thirtieth-twenty-eighth model\nax.add_patch(plt.Rectangle((114.5, 18), 1, 2, color='plum'))\n\n# Draw a rectangle for the thirtieth-twenty-ninth model\nax.add_patch(plt.Rectangle((116.5, 18), 1, 2, color='chocolate'))\n\n# Draw a rectangle for the thirtieth-thirtieth model\nax.add_patch(plt.Rectangle((118.5, 18), 1, 2, color='sienna'))\n\n# Draw a rectangle for the thirtieth-thirtieth-first model\nax.add_patch(plt.Rectangle((120.5, 18), 1, 2, color='peru'))\n\n# Draw a rectangle for the thirtieth-thirtieth-second model\nax.add_patch(plt.Rectangle((122.5, 18), 1, 2, color='burlywood'))\n\n# Draw a rectangle for the thirtieth-thirtieth-third model\nax.add_patch(plt.Rectangle((124.5, 18), 1, 2, color='tan'))\n\n# Draw a rectangle for the thirtieth-thirtieth-fourth model\nax.add_patch(plt.Rectangle((126.5, 18), 1, 2, color='olive'))\n\n# Draw a rectangle for the thirtieth-thirtieth-fifth model\nax.add_patch(plt.Rectangle((128.5, 18), 1, 2, color='navy'))\n\n# Draw a rectangle for the thirtieth-thirtieth-sixth model\nax.add_patch(plt.Rectangle((130.5, 18), 1, 2, color='maroon'))\n\n# Draw a rectangle for the thirtieth-thirtieth-seventh model\nax.add_patch(plt.Rectangle((132.5, 18), 1, 2, color='lime'))\n\n# Draw a rectangle for the thirtieth-thirtieth-eighth model\nax.add_patch(plt.Rectangle((134.5, 18), 1, 2, color='teal'))\n\n# Draw a rectangle for the thirtieth-thirtieth-ninth model\nax.add_patch(plt.Rectangle((136.5, 18), 1, 2, color='indigo'))\n\n# Draw a rectangle for the thirtieth-thirtieth-tenth model\nax.add_patch(plt.Rectangle((138.5, 18), 1, 2, color='violet'))\n\n# Draw a rectangle for the thirtieth-thirtieth-eleventh model\nax.add_patch(plt.Rectangle((140.5, 18), 1, 2, color='coral'))\n\n# Draw a rectangle for the thirtieth-thirtieth-twelfth model\nax.add_patch(plt.Rectangle((142.5, 18), 1, 2, color='plum'))\n\n# Draw a rectangle for the thirtieth-thirtieth-thirteenth model\nax.add_patch(plt.Rectangle((144.5, 18), 1, 2, color='chocolate'))\n\n# Draw a rectangle for the thirtieth-thirtieth-fourteenth model\nax.add_patch(plt.Rectangle((146.5, 18), 1, 2, color='sienna'))\n\n# Draw a rectangle for the thirtieth-thirtieth-fifteenth model\nax.add_patch(plt.Rectangle((148.5, 18), 1, 2, color='peru'))\n\n# Draw a rectangle for the thirtieth-thirtieth-sixteenth model\nax.add_patch(plt.Rectangle((150.5, 18), 1, 2, color='burlywood'))\n\n# Draw a rectangle for the thirtieth-thirtieth-seventeenth model\nax.add_patch(plt.Rectangle((152.5, 18), 1, 2, color='tan'))\n\n# Draw a rectangle for the thirtieth-thirtieth-eighteenth model\nax.add_patch(plt.Rectangle((154.5, 18), 1, 2, color='olive'))\n\n# Draw a rectangle for the thirtieth-thirtieth-nineteenth model\nax.add_patch(plt.Rectangle((156.5, 18), 1, 2, color='navy'))\n\n# Draw a rectangle for the thirtieth-thirtieth-twentieth model\nax.add_patch(plt.Rectangle((158.5, 18), 1, 2, color='maroon'))\n\n# Draw a rectangle for the thirtieth-thirtieth-twenty-first model\nax.add_patch(plt.Rectangle((160.5, 18), 1, 2, color='lime'))\n\n# Draw a rectangle for the thirtieth-thirtieth-twenty-second model\nax.add_patch(plt.Rectangle((162.5, 18), 1, 2, color='teal'))\n\n# Draw a rectangle for the thirtieth-thirtieth-twenty-third model\nax.add_patch(plt.Rectangle((164.5, 18), 1, 2, color='indigo'))\n\n# Draw a rectangle for the thirtieth-thirtieth-twenty-fourth model\nax.add_patch(plt.Rectangle((166.5, 18), 1, 2, color='violet'))\n\n# Draw a rectangle for the thirtieth-thirtieth-twenty-fifth model\nax.add_patch(plt.Rectangle((168.5, 18), 1, 2, color='coral'))\n\n# Draw a rectangle for the thirtieth-thirtieth-twenty-sixth model\nax.add_patch(plt.Rectangle((170.5, 18), 1, 2, color='plum'))\n\n# Draw a rectangle for the thirtieth-thirtieth-twenty-seventh model\nax.add_patch(plt.Rectangle((172.5, 18), 1, 2, color='chocolate'))\n\n# Draw a rectangle for the thirtieth-thirtieth-twenty-eighth model\nax.add_patch(plt.Rectangle((174.5, 18), 1, 2, color='sienna'))\n\n# Draw a rectangle for the thirtieth-thirtieth-twenty-ninth model\nax.add_patch(plt.Rectangle((176.5, 18), 1, 2, color='peru'))\n\n# Draw a rectangle for the thirtieth-thirtieth-thirtieth model\nax.add_patch(plt.Rectangle((178.5, 18), 1, 2, color='burlywood'))\n\n# Draw a rectangle for the thirtieth-thirtieth-thirtieth-first model\nax.add_patch(plt.Rectangle((180.5, 18), 1, 2, color='tan'))\n\n# Draw a rectangle for the thirtieth-thirtieth-thirtieth-second model\nax.add_patch(plt.Rectangle((182.5, 18), 1, 2, color='olive'))\n\n# Draw a rectangle for the thirtieth-thirtieth-thirtieth-third model\nax.add_patch(plt.Rectangle((184.5, 18), 1, 2, color='navy'))\n\n# Draw a rectangle for the thirtieth-thirtieth-thirtieth-fourth model\nax.add_patch(plt.Rectangle((186.5, 18), 1, 2, color='maroon'))\n\n# Draw a rectangle for the thirtieth-thirtieth-thirtieth-fifth model\nax.add_patch(plt.Rectangle((188.5, 18), 1, 2, color='lime'))\n\n# Draw a rectangle for the thirtieth-thirt"}
{"file": "dataset/ori_500/box_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Gamma')\n\n# Set the x-axis label\nax.set_xlabel('Gamma')\n\n# Set the y-axis label\nax.set_ylabel('Delta A')\n\n# Set the x-ticks\nax.set_xticks([1, 2, 3, 4, 5])\n\n# Set the x-tick labels\nax.set_xticklabels(['AlphaBeta', 'z+', 'Gamma(g=0.05)', 'Gamma(g=0.1)', 'Gamma(g=0.25)'])\n\n# Set the y-ticks\nax.set_yticks([25, 50, 75])\n\n# Set the y-tick labels\nax.set_yticklabels(['25', '50', '75'])\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((1, 25), 1, 25, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((2, 50), 1, 25, color='green'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((3, 75), 1, 25, color='red'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((4, 25), 1, 25, color='yellow'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((5, 50), 1, 25, color='cyan'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((6, 75), 1, 25, color='magenta'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((7, 25), 1, 25, color='black'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((8, 50), 1, 25, color='white'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((9, 75), 1, 25, color='gray'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((10, 25), 1, 25, color='brown'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((11, 50), 1, 25, color='pink'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((12, 75), 1, 25, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((13, 25), 1, 25, color='purple'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((14, 50), 1, 25, color='gold'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((15, 75), 1, 25, color='silver'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((16, 25), 1, 25, color='navy'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((17, 50), 1, 25, color='olive'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((18, 75), 1, 25, color='lime'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((19, 25), 1, 25, color='teal'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((20, 50), 1, 25, color='crimson'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((21, 75), 1, 25, color='indigo'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((22, 25), 1, 25, color='violet'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((23, 50), 1, 25, color='maroon'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((24, 75), 1, 25, color='aqua'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((25, 25), 1, 25, color='fuchsia'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((26, 50), 1, 25, color='chocolate'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((27, 75), 1, 25, color='coral'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((28, 25), 1, 25, color='sienna'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((29, 50), 1, 25, color='tan'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((30, 75), 1, 25, color='peru'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((31, 25), 1, 25, color='burlywood'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((32, 50), 1, 25, color='saddlebrown'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((33, 75), 1, 25, color='rosybrown'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((34, 25), 1, 25, color='slategray'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((35, 50), 1, 25, color='darkslategray'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((36, 75), 1, 25, color='lightslategray'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((37, 25), 1, 25, color='gray'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((38, 50), 1, 25, color='dimgray'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((39, 75), 1, 25, color='lightgray'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((40, 25), 1, 25, color='silver'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((41, 50), 1, 25, color='darkgray'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((42, 75), 1, 25, color='grey'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((43, 25), 1, 25, color='navy'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((44, 50), 1, 25, color='olive'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((45, 75), 1, 25, color='lime'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((46, 25), 1, 25, color='teal'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((47, 50), 1, 25, color='crimson'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((48, 75), 1, 25, color='indigo'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((49, 25), 1, 25, color='violet'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((50, 50), 1, 25, color='maroon'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((51, 75), 1, 25, color='aqua'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((52, 25), 1, 25, color='fuchsia'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((53, 50), 1, 25, color='chocolate'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((54, 75), 1, 25, color='coral'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((55, 25), 1, 25, color='sienna'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((56, 50), 1, 25, color='tan'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((57, 75), 1, 25, color='peru'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((58, 25), 1, 25, color='burlywood'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((59, 50), 1, 25, color='saddlebrown'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((60, 75), 1, 25, color='rosybrown'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((61, 25), 1, 25, color='slategray'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((62, 50), 1, 25, color='darkslategray'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((63, 75), 1, 25, color='lightslategray'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((64, 25), 1, 25, color='gray'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((65, 50), 1, 25, color='dimgray'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((66, 75), 1, 25, color='lightgray'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((67, 25), 1, 25, color='silver'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((68, 50), 1, 25, color='darkgray'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((69, 75), 1, 25, color='grey'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((70, 25), 1, 25, color='navy'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((71, 50), 1, 25, color='olive'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((72, 75), 1, 25, color='lime'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((73, 25), 1, 25, color='teal'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((74, 50), 1, 25, color='crimson'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((75, 75), 1, 25, color='indigo'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((76, 25), 1, 25, color='violet'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((77, 50), 1, 25, color='maroon'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((78, 75), 1, 25, color='aqua'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((79, 25), 1, 25, color='fuchsia'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((80, 50), 1, 25, color='chocolate'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((81, 75), 1, 25, color='coral'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((82, 25), 1, 25, color='sienna'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((83, 50), 1, 25, color='tan'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((84, 75), 1, 25, color='peru'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((85, 25), 1, 25, color='burlywood'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((86, 50), 1, 25, color='saddlebrown'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((87, 75), 1, 25, color='rosybrown'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((88, 25), 1, 25, color='slategray'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((89, 50), 1, 25, color='darkslategray'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((90, 75), 1, 25, color='lightslategray'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((91, 25), 1, 25, color='gray'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((92, 50), 1, 25, color='dimgray'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((93, 75), 1, 25, color='lightgray'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((94, 25), 1, 25, color='silver'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((95, 50), 1, 25, color='darkgray'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((96, 75), 1, 25, color='grey'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((97, 25), 1, 25, color='navy'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((98, 50), 1, 25, color='olive'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((99, 75), 1, 25, color='lime'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((100, 25), 1, 25, color='teal'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((101, 50), 1, 25, color='crimson'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((102, 75), 1, 25, color='indigo'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((103, 25), 1, 25, color='violet'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((104, 50), 1, 25, color='maroon'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((105, 75), 1, 25, color='aqua'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((106, 25), 1, 25, color='fuchsia'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((107, 50), 1, 25, color='chocolate'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((108, 75), 1, 25, color='coral'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((109, 25), 1, 25, color='sienna'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((110, 50), 1, 25, color='tan'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((111, 75), 1, 25, color='peru'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((112, 25), 1, 25, color='burlywood'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((113, 50), 1, 25, color='saddlebrown'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((114, 75), 1, 25, color='rosybrown'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((115, 25), 1, 25, color='slategray'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((116, 50), 1, 25, color='darkslategray'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((117, 75), 1, 25, color='lightslategray'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((118, 25), 1, 25, color='gray'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((119, 50), 1, 25, color='dimgray'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((120, 75), 1, 25, color='lightgray'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((121, 25), 1, 25, color='silver'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((122, 50), 1, 25, color='darkgray'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((123, 75), 1, 25, color='grey'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((124, 25), 1, 25, color='navy'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((125, 50), 1, 25, color='olive'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((126"}
{"file": "dataset/ori_500/box_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 5.0))\n\n# Set the title of the plot\nax.set_title('Execution Accuracy')\n\n# Set the x-axis label\nax.set_xlabel('Algorithm')\n\n# Set the y-axis label\nax.set_ylabel('Accuracy')\n\n# Set the x-ticks\nax.set_xticks([1, 2, 3, 4, 5])\nax.set_xticklabels(['SQL-Only', 'PoT', 'IC-LP', 'DAIL', 'IC-LP+PoT'])\n\n# Set the y-limits\nax.set_ylim(0.75, 0.95)\n\n# Draw rectangles for each bar\nrects = [ax.bar(1, 0.875, color='lightblue'),\n        ax.bar(2, 0.85, color='lightgreen'),\n        ax.bar(3, 0.825, color='lightblue'),\n        ax.bar(4, 0.80, color='lightgreen'),\n        ax.bar(5, 0.775, color='lightblue')]\n\n# Add text annotations to the bars\nfor rect in rects:\n    height = rect.get_height()\n    ax.annotate(f'{height:.3f}',\n                xy=(rect.get_x() + rect.get_width() / 2, height),\n                xytext=(0, 3),  # 3 points vertical offset\n                textcoords=\"offset points\",\n                ha='center', va='bottom')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Define the data for the first subplot\ndata1 = [0.88, 0.87, 0.83]\nlabels1 = ['DENSE (ref)', 'Joint Multimodal Framework (ours)', 'Cine']\ncolors1 = ['blue', 'brown', 'green']\n\n# Create a bar chart for the first subplot\nax.bar(labels1, data1, color=colors1)\nax.set_title('Region Classification Accuracy')\n\n# Define the data for the second subplot\ndata2 = [9.33, 9.00, 6.91, 9.33, 9.00]\nlabels2 = ['DENSE (ref)', 'Joint Multimodal Framework (ours)', 'Cine']\ncolors2 = ['orange', 'green', 'blue']\n\n# Create a bar chart for the second subplot\nax2 = ax.twinx()\nax2.bar(labels2, data2, color=colors2)\nax2.set_title('Slice Mean Error (ms)')\n\n# Set the y-axis limits\nax.set_ylim(0.6, 1.0)\nax2.set_ylim(2.5, 22.5)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8, 5))\n\n# Set the title of the plot\nax.set_title('Z-Score')\n\n# Set the x-axis label\nax.set_xlabel('w/o att')\n\n# Set the y-axis label\nax.set_ylabel('Z-Score')\n\n# Draw a horizontal line at y=5\nax.axhline(y=5, color='r', linestyle='-')\n\n# Draw a horizontal line at y=10\nax.axhline(y=10, color='r', linestyle='-')\n\n# Draw a horizontal line at y=15\nax.axhline(y=15, color='r', linestyle='-')\n\n# Draw a horizontal line at y=20\nax.axhline(y=20, color='r', linestyle='-')\n\n# Draw a horizontal line at y=25\nax.axhline(y=25, color='r', linestyle='-')\n\n# Draw a horizontal line at y=30\nax.axhline(y=30, color='r', linestyle='-')\n\n# Draw a horizontal line at y=35\nax.axhline(y=35, color='r', linestyle='-')\n\n# Draw a horizontal line at y=40\nax.axhline(y=40, color='r', linestyle='-')\n\n# Draw a horizontal line at y=45\nax.axhline(y=45, color='r', linestyle='-')\n\n# Draw a horizontal line at y=50\nax.axhline(y=50, color='r', linestyle='-')\n\n# Draw a horizontal line at y=55\nax.axhline(y=55, color='r', linestyle='-')\n\n# Draw a horizontal line at y=60\nax.axhline(y=60, color='r', linestyle='-')\n\n# Draw a horizontal line at y=65\nax.axhline(y=65, color='r', linestyle='-')\n\n# Draw a horizontal line at y=70\nax.axhline(y=70, color='r', linestyle='-')\n\n# Draw a horizontal line at y=75\nax.axhline(y=75, color='r', linestyle='-')\n\n# Draw a horizontal line at y=80\nax.axhline(y=80, color='r', linestyle='-')\n\n# Draw a horizontal line at y=85\nax.axhline(y=85, color='r', linestyle='-')\n\n# Draw a horizontal line at y=90\nax.axhline(y=90, color='r', linestyle='-')\n\n# Draw a horizontal line at y=95\nax.axhline(y=95, color='r', linestyle='-')\n\n# Draw a horizontal line at y=100\nax.axhline(y=100, color='r', linestyle='-')\n\n# Draw a horizontal line at y=105\nax.axhline(y=105, color='r', linestyle='-')\n\n# Draw a horizontal line at y=110\nax.axhline(y=110, color='r', linestyle='-')\n\n# Draw a horizontal line at y=115\nax.axhline(y=115, color='r', linestyle='-')\n\n# Draw a horizontal line at y=120\nax.axhline(y=120, color='r', linestyle='-')\n\n# Draw a horizontal line at y=125\nax.axhline(y=125, color='r', linestyle='-')\n\n# Draw a horizontal line at y=130\nax.axhline(y=130, color='r', linestyle='-')\n\n# Draw a horizontal line at y=135\nax.axhline(y=135, color='r', linestyle='-')\n\n# Draw a horizontal line at y=140\nax.axhline(y=140, color='r', linestyle='-')\n\n# Draw a horizontal line at y=145\nax.axhline(y=145, color='r', linestyle='-')\n\n# Draw a horizontal line at y=150\nax.axhline(y=150, color='r', linestyle='-')\n\n# Draw a horizontal line at y=155\nax.axhline(y=155, color='r', linestyle='-')\n\n# Draw a horizontal line at y=160\nax.axhline(y=160, color='r', linestyle='-')\n\n# Draw a horizontal line at y=165\nax.axhline(y=165, color='r', linestyle='-')\n\n# Draw a horizontal line at y=170\nax.axhline(y=170, color='r', linestyle='-')\n\n# Draw a horizontal line at y=175\nax.axhline(y=175, color='r', linestyle='-')\n\n# Draw a horizontal line at y=180\nax.axhline(y=180, color='r', linestyle='-')\n\n# Draw a horizontal line at y=185\nax.axhline(y=185, color='r', linestyle='-')\n\n# Draw a horizontal line at y=190\nax.axhline(y=190, color='r', linestyle='-')\n\n# Draw a horizontal line at y=195\nax.axhline(y=195, color='r', linestyle='-')\n\n# Draw a horizontal line at y=200\nax.axhline(y=200, color='r', linestyle='-')\n\n# Draw a horizontal line at y=205\nax.axhline(y=205, color='r', linestyle='-')\n\n# Draw a horizontal line at y=210\nax.axhline(y=210, color='r', linestyle='-')\n\n# Draw a horizontal line at y=215\nax.axhline(y=215, color='r', linestyle='-')\n\n# Draw a horizontal line at y=220\nax.axhline(y=220, color='r', linestyle='-')\n\n# Draw a horizontal line at y=225\nax.axhline(y=225, color='r', linestyle='-')\n\n# Draw a horizontal line at y=230\nax.axhline(y=230, color='r', linestyle='-')\n\n# Draw a horizontal line at y=235\nax.axhline(y=235, color='r', linestyle='-')\n\n# Draw a horizontal line at y=240\nax.axhline(y=240, color='r', linestyle='-')\n\n# Draw a horizontal line at y=245\nax.axhline(y=245, color='r', linestyle='-')\n\n# Draw a horizontal line at y=250\nax.axhline(y=250, color='r', linestyle='-')\n\n# Draw a horizontal line at y=255\nax.axhline(y=255, color='r', linestyle='-')\n\n# Draw a horizontal line at y=260\nax.axhline(y=260, color='r', linestyle='-')\n\n# Draw a horizontal line at y=265\nax.axhline(y=265, color='r', linestyle='-')\n\n# Draw a horizontal line at y=270\nax.axhline(y=270, color='r', linestyle='-')\n\n# Draw a horizontal line at y=275\nax.axhline(y=275, color='r', linestyle='-')\n\n# Draw a horizontal line at y=280\nax.axhline(y=280, color='r', linestyle='-')\n\n# Draw a horizontal line at y=285\nax.axhline(y=285, color='r', linestyle='-')\n\n# Draw a horizontal line at y=290\nax.axhline(y=290, color='r', linestyle='-')\n\n# Draw a horizontal line at y=295\nax.axhline(y=295, color='r', linestyle='-')\n\n# Draw a horizontal line at y=300\nax.axhline(y=300, color='r', linestyle='-')\n\n# Draw a horizontal line at y=305\nax.axhline(y=305, color='r', linestyle='-')\n\n# Draw a horizontal line at y=310\nax.axhline(y=310, color='r', linestyle='-')\n\n# Draw a horizontal line at y=315\nax.axhline(y=315, color='r', linestyle='-')\n\n# Draw a horizontal line at y=320\nax.axhline(y=320, color='r', linestyle='-')\n\n# Draw a horizontal line at y=325\nax.axhline(y=325, color='r', linestyle='-')\n\n# Draw a horizontal line at y=330\nax.axhline(y=330, color='r', linestyle='-')\n\n# Draw a horizontal line at y=335\nax.axhline(y=335, color='r', linestyle='-')\n\n# Draw a horizontal line at y=340\nax.axhline(y=340, color='r', linestyle='-')\n\n# Draw a horizontal line at y=345\nax.axhline(y=345, color='r', linestyle='-')\n\n# Draw a horizontal line at y=350\nax.axhline(y=350, color='r', linestyle='-')\n\n# Draw a horizontal line at y=355\nax.axhline(y=355, color='r', linestyle='-')\n\n# Draw a horizontal line at y=360\nax.axhline(y=360, color='r', linestyle='-')\n\n# Draw a horizontal line at y=365\nax.axhline(y=365, color='r', linestyle='-')\n\n# Draw a horizontal line at y=370\nax.axhline(y=370, color='r', linestyle='-')\n\n# Draw a horizontal line at y=375\nax.axhline(y=375, color='r', linestyle='-')\n\n# Draw a horizontal line at y=380\nax.axhline(y=380, color='r', linestyle='-')\n\n# Draw a horizontal line at y=385\nax.axhline(y=385, color='r', linestyle='-')\n\n# Draw a horizontal line at y=390\nax.axhline(y=390, color='r', linestyle='-')\n\n# Draw a horizontal line at y=395\nax.axhline(y=395, color='r', linestyle='-')\n\n# Draw a horizontal line at y=400\nax.axhline(y=400, color='r', linestyle='-')\n\n# Draw a horizontal line at y=405\nax.axhline(y=405, color='r', linestyle='-')\n\n# Draw a horizontal line at y=410\nax.axhline(y=410, color='r', linestyle='-')\n\n# Draw a horizontal line at y=415\nax.axhline(y=415, color='r', linestyle='-')\n\n# Draw a horizontal line at y=420\nax.axhline(y=420, color='r', linestyle='-')\n\n# Draw a horizontal line at y=425\nax.axhline(y=425, color='r', linestyle='-')\n\n# Draw a horizontal line at y=430\nax.axhline(y=430, color='r', linestyle='-')\n\n# Draw a horizontal line at y=435\nax.axhline(y=435, color='r', linestyle='-')\n\n# Draw a horizontal line at y=440\nax.axhline(y=440, color='r', linestyle='-')\n\n# Draw a horizontal line at y=445\nax.axhline(y=445, color='r', linestyle='-')\n\n# Draw a horizontal line at y=450\nax.axhline(y=450, color='r', linestyle='-')\n\n# Draw a horizontal line at y=455\nax.axhline(y=455, color='r', linestyle='-')\n\n# Draw a horizontal line at y=460\nax.axhline(y=460, color='r', linestyle='-')\n\n# Draw a horizontal line at y=465\nax.axhline(y=465, color='r', linestyle='-')\n\n# Draw a horizontal line at y=470\nax.axhline(y=470, color='r', linestyle='-')\n\n# Draw a horizontal line at y=475\nax.axhline(y=475, color='r', linestyle='-')\n\n# Draw a horizontal line at y=480\nax.axhline(y=480, color='r', linestyle='-')\n\n# Draw a horizontal line at y=485\nax.axhline(y=485, color='r', linestyle='-')\n\n# Draw a horizontal line at y=490\nax.axhline(y=490, color='r', linestyle='-')\n\n# Draw a horizontal line at y=495\nax.axhline(y=495, color='r', linestyle='-')\n\n# Draw a horizontal line at y=500\nax.axhline(y=500, color='r', linestyle='-')\n\n# Draw a horizontal line at y=505\nax.axhline(y=505, color='r', linestyle='-')\n\n# Draw a horizontal line at y=510\nax.axhline(y=510, color='r', linestyle='-')\n\n# Draw a horizontal line at y=515\nax.axhline(y=515, color='r', linestyle='-')\n\n# Draw a horizontal line at y=520\nax.axhline(y=520, color='r', linestyle='-')\n\n# Draw a horizontal line at y=525\nax.axhline(y=525, color='r', linestyle='-')\n\n# Draw a horizontal line at y=530\nax.axhline(y=530, color='r', linestyle='-')\n\n# Draw a horizontal line at y=535\nax.axhline(y=535, color='r', linestyle='-')\n\n# Draw a horizontal line at y=540\nax.axhline(y=540, color='r', linestyle='-')\n\n# Draw a horizontal line at y=545\nax.axhline(y=545, color='r', linestyle='-')\n\n# Draw a horizontal line at y=550\nax.axhline(y=550, color='r', linestyle='-')\n\n# Draw a horizontal line at y=555\nax.axhline(y=555, color='r', linestyle='-')\n\n# Draw a horizontal line at y=560\nax.axhline(y=560, color='r', linestyle='-')\n\n# Draw a horizontal line at y=565\nax.axhline(y=565, color='r', linestyle='-')\n\n# Draw a horizontal line at y=570\nax.axhline(y=570, color='r', linestyle='-')\n\n# Draw a horizontal line at y=575\nax.axhline(y=575, color='r', linestyle='-')\n\n# Draw a horizontal line at y=580\nax.axhline(y=580, color='r', linestyle='-')\n\n# Draw a horizontal line at y=585\nax.axhline(y=585, color='r', linestyle='-')\n\n# Draw a horizontal line at y=590\nax.axhline(y=590, color='r', linestyle='-')\n\n# Draw a horizontal line at y=595\nax.axhline(y=595, color='r', linestyle='-')\n\n# Draw a horizontal line at y=600\nax.axhline(y=600, color='r', linestyle='-')\n\n# Draw a horizontal line at y=605\nax.axhline(y=605, color='r', linestyle='-')\n\n# Draw a horizontal line at y=610\nax.axhline(y=610, color='r', linestyle='-')\n\n# Draw a horizontal line at y=615\nax.axhline(y=615, color='r', linestyle='-')\n\n# Draw a horizontal line at y=620\nax.axhline(y=620, color='r', linestyle='-')\n\n# Draw a horizontal line at y=625\nax.axhline(y=625, color='r', linestyle='-')\n\n# Draw a horizontal line at y=630\nax.axhline(y=630, color='r', linestyle='-')\n\n# Draw a horizontal line at y=635\nax.axhline(y=635, color='r', linestyle='-')\n\n# Draw a horizontal line at y=640\nax.axhline(y=640, color='r', linestyle='-')\n\n# Draw a horizontal line at y=645\nax.axhline(y=645, color='r', linestyle='-')\n\n# Draw a horizontal line at y=650\nax.axhline(y=650, color='r', linestyle='-')\n\n# Draw a horizontal line at y=655\nax.axhline(y=655, color='r', linestyle='-')\n\n# Draw a horizontal line at y=660\nax.axhline(y=660, color='r', linestyle='-')\n\n# Draw a horizontal line at y=665\nax.axhline(y=665, color='r', linestyle='-')\n\n# Draw a horizontal line at y=670\nax.axhline(y=670, color='r', linestyle='-')\n\n# Draw a horizontal line at y=675\nax.axhline(y=675, color='r', linestyle='-')\n\n# Draw a horizontal line at y=680\nax.axhline(y=680, color='r', linestyle='-')\n\n# Draw a horizontal line at y=685\nax.axhline(y=685, color='r', linestyle='-')\n\n# Draw a horizontal line at y=690\nax.axhline(y=690, color='r', linestyle='-')\n\n# Draw a horizontal line at y=695\nax.axhline(y=695, color='r', linestyle='-')\n\n# Draw a horizontal line at y=700\nax.axhline(y=700, color='r', linestyle='-')\n\n#"}
{"file": "dataset/ori_500/box_16.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(5.0, 5.0))\n\n# Set the title of the plot\nax.set_title('Mean')\n\n# Set the x-axis label\nax.set_xlabel('X-axis')\n\n# Set the y-axis label\nax.set_ylabel('Y-axis')\n\n# Set the x-axis limits\nax.set_xlim(1, 3)\n\n# Set the y-axis limits\nax.set_ylim(0, 3)\n\n# Set the x-axis ticks\nax.set_xticks([1, 2, 3])\n\n# Set the y-axis ticks\nax.set_yticks([0, 1, 2, 3])\n\n# Set the x-axis tick labels\nax.set_xticklabels(['REM', 'No POP', 'Separate M emb.', '4 x 4 tokenizer', 'No latent space C', 'C w/o action inputs'])\n\n# Set the y-axis tick labels\nax.set_yticklabels(['0', '1', '2', '3'])\n\n# Draw a rectangle\nrect1 = plt.Rectangle((1, 0), 1, 1, color='blue')\nrect2 = plt.Rectangle((2, 0), 1, 1, color='green')\nrect3 = plt.Rectangle((3, 0), 1, 1, color='orange')\nrect4 = plt.Rectangle((4, 0), 1, 1, color='purple')\nrect5 = plt.Rectangle((5, 0), 1, 1, color='brown')\n\n# Add the rectangle to the plot\nax.add_patch(rect1)\nax.add_patch(rect2)\nax.add_patch(rect3)\nax.add_patch(rect4)\nax.add_patch(rect5)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_17.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8, 4))\n\n# Set the background color of the plot\nax.set_facecolor('black')\n\n# Set the title of the plot\nax.set_title('Run Performance', color='white')\n\n# Set the x-axis label\nax.set_xlabel('Run', color='white')\n\n# Set the y-axis label\nax.set_ylabel('Value', color='white')\n\n# Set the tick labels for the x-axis\nax.set_xticks([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\nax.set_xticklabels(['Run 1', 'Run 2', 'Run 3', 'Run 4', 'Run 5', 'Run 6', 'Run 7', 'Run 8', 'Run 9', 'Run 10'], color='white')\n\n# Set the tick labels for the y-axis\nax.set_yticks([20, 40, 60, 80, 100])\nax.set_yticklabels(['20', '40', '60', '80', '100'], color='white')\n\n# Draw vertical lines\nfor i in range(1, 11):\n    ax.axvline(x=i, color='white', linestyle='-')\n\n# Draw horizontal lines\nfor i in range(20, 101, 20):\n    ax.axhline(y=i, color='white', linestyle='-')\n\n# Draw rectangles\nrectangles = [\n    [1, 20, 10, 40],\n    [2, 40, 10, 60],\n    [3, 60, 10, 80],\n    [4, 80, 10, 100],\n    [5, 20, 10, 40],\n    [6, 40, 10, 60],\n    [7, 60, 10, 80],\n    [8, 80, 10, 100],\n    [9, 20, 10, 40],\n    [10, 40, 10, 60]\n]\n\nfor rect in rectangles:\n    ax.add_patch(plt.Rectangle((rect[0], rect[1]), rect[2], rect[3], fill=True, edgecolor='blue', facecolor='lightblue'))\n\n# Draw circles\ncircles = [\n    [1, 20, 10],\n    [2, 40, 10],\n    [3, 60, 10],\n    [4, 80, 10],\n    [5, 20, 10],\n    [6, 40, 10],\n    [7, 60, 10],\n    [8, 80, 10],\n    [9, 20, 10],\n    [10, 40, 10]\n]\n\nfor circle in circles:\n    ax.add_patch(plt.Circle((circle[0], circle[1]), circle[2], color='red'))\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_18.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Set the background color of the plot\nax.set_facecolor('#F0E68C')\n\n# Draw a rectangle with a red border\nax.add_patch(plt.Rectangle((0.1, 0.9), 0.8, 0.1, fill='#FF4500', edgecolor='black'))\n\n# Draw a rectangle with a blue border\nax.add_patch(plt.Rectangle((0.1, 0.7), 0.8, 0.2, fill='#ADD8E6', edgecolor='black'))\n\n# Draw a rectangle with a green border\nax.add_patch(plt.Rectangle((0.1, 0.5), 0.8, 0.2, fill='#90EE90', edgecolor='black'))\n\n# Draw a rectangle with a yellow border\nax.add_patch(plt.Rectangle((0.1, 0.3), 0.8, 0.2, fill='#FFFF00', edgecolor='black'))\n\n# Draw a rectangle with a pink border\nax.add_patch(plt.Rectangle((0.1, 0.1), 0.8, 0.2, fill='#FFB6C1', edgecolor='black'))\n\n# Draw a rectangle with a brown border\nax.add_patch(plt.Rectangle((0.1, 0.9), 0.8, 0.1, fill='#A52A2A', edgecolor='black'))\n\n# Draw a rectangle with a purple border\nax.add_patch(plt.Rectangle((0.1, 0.7), 0.8, 0.2, fill='#800080', edgecolor='black'))\n\n# Draw a rectangle with a teal border\nax.add_patch(plt.Rectangle((0.1, 0.5), 0.8, 0.2, fill='#008080', edgecolor='black'))\n\n# Draw a rectangle with a gold border\nax.add_patch(plt.Rectangle((0.1, 0.3), 0.8, 0.2, fill='#DAA520', edgecolor='black'))\n\n# Draw a rectangle with a silver border\nax.add_patch(plt.Rectangle((0.1, 0.1), 0.8, 0.2, fill='#C0C0C0', edgecolor='black'))\n\n# Draw a rectangle with a maroon border\nax.add_patch(plt.Rectangle((0.1, 0.9), 0.8, 0.1, fill='#800000', edgecolor='black'))\n\n# Draw a rectangle with a navy border\nax.add_patch(plt.Rectangle((0.1, 0.7), 0.8, 0.2, fill='#000080', edgecolor='black'))\n\n# Draw a rectangle with a lime border\nax.add_patch(plt.Rectangle((0.1, 0.5), 0.8, 0.2, fill='#00FF00', edgecolor='black'))\n\n# Draw a rectangle with a olive border\nax.add_patch(plt.Rectangle((0.1, 0.3), 0.8, 0.2, fill='#808000', edgecolor='black'))\n\n# Draw a rectangle with a teal border\nax.add_patch(plt.Rectangle((0.1, 0.1), 0.8, 0.2, fill='#008080', edgecolor='black'))\n\n# Draw a rectangle with a silver border\nax.add_patch(plt.Rectangle((0.1, 0.9), 0.8, 0.1, fill='#C0C0C0', edgecolor='black'))\n\n# Draw a rectangle with a maroon border\nax.add_patch(plt.Rectangle((0.1, 0.7), 0.8, 0.2, fill='#800000', edgecolor='black'))\n\n# Draw a rectangle with a navy border\nax.add_patch(plt.Rectangle((0.1, 0.5), 0.8, 0.2, fill='#000080', edgecolor='black'))\n\n# Draw a rectangle with a lime border\nax.add_patch(plt.Rectangle((0.1, 0.3), 0.8, 0.2, fill='#00FF00', edgecolor='black'))\n\n# Draw a rectangle with a olive border\nax.add_patch(plt.Rectangle((0.1, 0.1), 0.8, 0.2, fill='#808000', edgecolor='black'))\n\n# Draw a rectangle with a teal border\nax.add_patch(plt.Rectangle((0.1, 0.9), 0.8, 0.1, fill='#008080', edgecolor='black'))\n\n# Draw a rectangle with a silver border\nax.add_patch(plt.Rectangle((0.1, 0.7), 0.8, 0.2, fill='#C0C0C0', edgecolor='black'))\n\n# Draw a rectangle with a maroon border\nax.add_patch(plt.Rectangle((0.1, 0.5), 0.8, 0.2, fill='#800000', edgecolor='black'))\n\n# Draw a rectangle with a navy border\nax.add_patch(plt.Rectangle((0.1, 0.3), 0.8, 0.2, fill='#000080', edgecolor='black'))\n\n# Draw a rectangle with a lime border\nax.add_patch(plt.Rectangle((0.1, 0.1), 0.8, 0.2, fill='#00FF00', edgecolor='black'))\n\n# Draw a rectangle with a olive border\nax.add_patch(plt.Rectangle((0.1, 0.9), 0.8, 0.2, fill='#808000', edgecolor='black'))\n\n# Draw a rectangle with a teal border\nax.add_patch(plt.Rectangle((0.1, 0.7), 0.8, 0.2, fill='#008080', edgecolor='black'))\n\n# Draw a rectangle with a silver border\nax.add_patch(plt.Rectangle((0.1, 0.5), 0.8, 0.2, fill='#C0C0C0', edgecolor='black'))\n\n# Draw a rectangle with a maroon border\nax.add_patch(plt.Rectangle((0.1, 0.3), 0.8, 0.2, fill='#800000', edgecolor='black'))\n\n# Draw a rectangle with a navy border\nax.add_patch(plt.Rectangle((0.1, 0.1), 0.8, 0.2, fill='#000080', edgecolor='black'))\n\n# Draw a rectangle with a lime border\nax.add_patch(plt.Rectangle((0.1, 0.9), 0.8, 0.1, fill='#00FF00', edgecolor='black'))\n\n# Draw a rectangle with a olive border\nax.add_patch(plt.Rectangle((0.1, 0.7), 0.8, 0.2, fill='#808000', edgecolor='black'))\n\n# Draw a rectangle with a teal border\nax.add_patch(plt.Rectangle((0.1, 0.5), 0.8, 0.2, fill='#008080', edgecolor='black'))\n\n# Draw a rectangle with a silver border\nax.add_patch(plt.Rectangle((0.1, 0.3), 0.8, 0.2, fill='#C0C0C0', edgecolor='black'))\n\n# Draw a rectangle with a maroon border\nax.add_patch(plt.Rectangle((0.1, 0.1), 0.8, 0.2, fill='#800000', edgecolor='black'))\n\n# Draw a rectangle with a navy border\nax.add_patch(plt.Rectangle((0.1, 0.9), 0.8, 0.2, fill='#000080', edgecolor='black'))\n\n# Draw a rectangle with a lime border\nax.add_patch(plt.Rectangle((0.1, 0.7), 0.8, 0.2, fill='#00FF00', edgecolor='black'))\n\n# Draw a rectangle with a olive border\nax.add_patch(plt.Rectangle((0.1, 0.5), 0.8, 0.2, fill='#808000', edgecolor='black'))\n\n# Draw a rectangle with a teal border\nax.add_patch(plt.Rectangle((0.1, 0.3), 0.8, 0.2, fill='#008080', edgecolor='black'))\n\n# Draw a rectangle with a silver border\nax.add_patch(plt.Rectangle((0.1, 0.1), 0.8, 0.2, fill='#C0C0C0', edgecolor='black'))\n\n# Draw a rectangle with a maroon border\nax.add_patch(plt.Rectangle((0.1, 0.9), 0.8, 0.2, fill='#800000', edgecolor='black'))\n\n# Draw a rectangle with a navy border\nax.add_patch(plt.Rectangle((0.1, 0.7), 0.8, 0.2, fill='#000080', edgecolor='black'))\n\n# Draw a rectangle with a lime border\nax.add_patch(plt.Rectangle((0.1, 0.5), 0.8, 0.2, fill='#00FF00', edgecolor='black'))\n\n# Draw a rectangle with a olive border\nax.add_patch(plt.Rectangle((0.1, 0.3), 0.8, 0.2, fill='#808000', edgecolor='black'))\n\n# Draw a rectangle with a teal border\nax.add_patch(plt.Rectangle((0.1, 0.1), 0.8, 0.2, fill='#008080', edgecolor='black'))\n\n# Draw a rectangle with a silver border\nax.add_patch(plt.Rectangle((0.1, 0.9), 0.8, 0.2, fill='#C0C0C0', edgecolor='black'))\n\n# Draw a rectangle with a maroon border\nax.add_patch(plt.Rectangle((0.1, 0.7), 0.8, 0.2, fill='#800000', edgecolor='black'))\n\n# Draw a rectangle with a navy border\nax.add_patch(plt.Rectangle((0.1, 0.5), 0.8, 0.2, fill='#000080', edgecolor='black'))\n\n# Draw a rectangle with a lime border\nax.add_patch(plt.Rectangle((0.1, 0.3), 0.8, 0.2, fill='#00FF00', edgecolor='black'))\n\n# Draw a rectangle with a olive border\nax.add_patch(plt.Rectangle((0.1, 0.1), 0.8, 0.2, fill='#808000', edgecolor='black'))\n\n# Draw a rectangle with a teal border\nax.add_patch(plt.Rectangle((0.1, 0.9), 0.8, 0.2, fill='#008080', edgecolor='black'))\n\n# Draw a rectangle with a silver border\nax.add_patch(plt.Rectangle((0.1, 0.7), 0.8, 0.2, fill='#C0C0C0', edgecolor='black'))\n\n# Draw a rectangle with a maroon border\nax.add_patch(plt.Rectangle((0.1, 0.5), 0.8, 0.2, fill='#800000', edgecolor='black'))\n\n# Draw a rectangle with a navy border\nax.add_patch(plt.Rectangle((0.1, 0.3), 0.8, 0.2, fill='#000080', edgecolor='black'))\n\n# Draw a rectangle with a lime border\nax.add_patch(plt.Rectangle((0.1, 0.1), 0.8, 0.2, fill='#00FF00', edgecolor='black'))\n\n# Draw a rectangle with a olive border\nax.add_patch(plt.Rectangle((0.1, 0.9), 0.8, 0.2, fill='#808000', edgecolor='black'))\n\n# Draw a rectangle with a teal border\nax.add_patch(plt.Rectangle((0.1, 0.7), 0.8, 0.2, fill='#008080', edgecolor='black'))\n\n# Draw a rectangle with a silver border\nax.add_patch(plt.Rectangle((0.1, 0.5), 0.8, 0.2, fill='#C0C0C0', edgecolor='black'))\n\n# Draw a rectangle with a maroon border\nax.add_patch(plt.Rectangle((0.1, 0.3), 0.8, 0.2, fill='#800000', edgecolor='black'))\n\n# Draw a rectangle with a navy border\nax.add_patch(plt.Rectangle((0.1, 0.1), 0.8, 0.2, fill='#000080', edgecolor='black'))\n\n# Draw a rectangle with a lime border\nax.add_patch(plt.Rectangle((0.1, 0.9), 0.8, 0.1, fill='#00FF00', edgecolor='black'))\n\n# Draw a rectangle with a olive border\nax.add_patch(plt.Rectangle((0.1, 0.7), 0.8, 0.2, fill='#808000', edgecolor='black'))\n\n# Draw a rectangle with a teal border\nax.add_patch(plt.Rectangle((0.1, 0.5), 0.8, 0.2, fill='#008080', edgecolor='black'))\n\n# Draw a rectangle with a silver border\nax.add_patch(plt.Rectangle((0.1, 0.3), 0.8, 0.2, fill='#C0C0C0', edgecolor='black'))\n\n# Draw a rectangle with a maroon border\nax.add_patch(plt.Rectangle((0.1, 0.1), 0.8, 0.2, fill='#800000', edgecolor='black'))\n\n# Draw a rectangle with a navy border\nax.add_patch(plt.Rectangle((0.1, 0.9), 0.8, 0.2, fill='#000080', edgecolor='black'))\n\n# Draw a rectangle with a lime border\nax.add_patch(plt.Rectangle((0.1, 0.7), 0.8, 0.2, fill='#00FF00', edgecolor='black'))\n\n# Draw a rectangle with a olive border\nax.add_patch(plt.Rectangle((0.1, 0.5), 0.8, 0.2, fill='#808000', edgecolor='black'))\n\n# Draw a rectangle with a teal border\nax.add_patch(plt.Rectangle((0.1, 0.3), 0.8, 0.2, fill='#008080', edgecolor='black'))\n\n# Draw a rectangle with a silver border\nax.add_patch(plt.Rectangle((0.1, 0.1), 0.8, 0.2, fill='#C0C0C0', edgecolor='black'))\n\n# Draw a rectangle with a maroon border\nax.add_patch(plt.Rectangle((0.1, 0.9), 0.8, 0.2, fill='#800000', edgecolor='black'))\n\n# Draw a rectangle with a navy border\nax.add_patch(plt.Rectangle((0.1, 0.7), 0.8, 0.2, fill='#000080', edgecolor='black'))\n\n# Draw a rectangle with a lime border\nax.add_patch(plt.Rectangle((0.1, 0.5), 0.8, 0.2, fill='#00FF00', edgecolor='black'))\n\n# Draw a rectangle with a olive border\nax.add_patch(plt.Rectangle((0.1, 0.3), 0.8, 0.2, fill='#808000', edgecolor='black'))\n\n# Draw a rectangle with a teal border\nax.add_patch(plt.Rectangle((0.1, 0.1), 0.8, 0.2, fill='#008080', edgecolor='black'))\n\n# Draw a rectangle with a silver border\nax.add_patch(plt.Rectangle((0.1, 0.9), 0.8, 0.2, fill='#C0C0C0', edgecolor='black'))\n\n# Draw a rectangle with a maroon border\nax.add_patch(plt.Rectangle((0.1, 0.7), 0.8, 0.2, fill='#800000', edgecolor='black'))\n\n# Draw a rectangle with a navy border\nax.add_patch(plt.Rectangle((0.1, 0.5), 0.8, 0.2, fill='#000080', edgecolor='black'))\n\n# Draw a rectangle with a lime border\nax.add_patch(plt.Rectangle((0.1, 0.3), 0.8, 0.2, fill='#00FF00', edgecolor='black'))\n\n# Draw a rectangle with a olive border\nax.add_patch(plt.Rectangle((0.1, 0.1), 0.8, 0.2, fill='#808000', edgecolor='black'))\n\n# Draw a rectangle with a teal border\nax.add_patch(plt.Rectangle((0.1, 0.9), 0.8, 0.2, fill='#008080', edgecolor='black'))\n\n# Draw a rectangle with a silver border\nax.add_patch(plt.Rectangle((0.1, 0.7), 0.8, 0.2, fill='#C0C0C0', edgecolor='black'))\n\n# Draw a rectangle with a maroon border\nax.add_patch(plt.Rectangle((0.1, 0.5), 0.8, 0.2,"}
{"file": "dataset/ori_500/box_19.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 4))\n\n# Define the data\nx = np.linspace(0, 10, 100)\ny = np.sin(x)\n\n# Plot the data\nax.plot(x, y, 'o-')\n\n# Set the title and labels\nax.set_title('Sine Wave')\nax.set_xlabel('Time (s)')\nax.set_ylabel('Amplitude (m)')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8, 6))\n\n# Set the title of the plot\nax.set_title('Ratings')\n\n# Create a rectangle for each model\nrect1 = plt.Rectangle((0.2, 0.7), 0.6, 0.3, color='pink')\nrect2 = plt.Rectangle((0.2, 0.4), 0.6, 0.3, color='lightblue')\n\n# Add the rectangles to the plot\nax.add_patch(rect1)\nax.add_patch(rect2)\n\n# Set the x-axis and y-axis limits\nax.set_xlim(0, 1)\nax.set_ylim(0, 1)\n\n# Set the x-axis and y-axis labels\nax.set_xlabel('Model')\nax.set_ylabel('Rating')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_20.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and a set of subplots\nfig, axs = plt.subplots(2, 3, figsize=(10, 5))\n\n# Plot the first subplot\naxs[0, 0].bar(['target', 'control'], [7, 8], color='blue')\naxs[0, 0].set_title('Digit span')\naxs[0, 0].set_ylabel('Correct word reaction time')\n\n# Plot the second subplot\naxs[0, 1].bar(['target', 'control'], [6, 7], color='orange')\naxs[0, 1].set_title('Lexical decision')\naxs[0, 1].set_ylabel('Correct response ratio')\n\n# Plot the third subplot\naxs[0, 2].bar(['target', 'control'], [5, 6], color='blue')\naxs[0, 2].set_title('Reaction time')\naxs[0, 2].set_ylabel('Time per tap [s]')\n\n# Plot the fourth subplot\naxs[1, 0].bar(['target', 'control'], [4, 5], color='orange')\naxs[1, 0].set_title('Trail making')\naxs[1, 0].set_ylabel('Correct word reaction time')\n\n# Plot the fifth subplot\naxs[1, 1].bar(['target', 'control'], [3, 4], color='blue')\naxs[1, 1].set_title('Lexical decision')\naxs[1, 1].set_ylabel('Correct response ratio')\n\n# Plot the sixth subplot\naxs[1, 2].bar(['target', 'control'], [2, 3], color='orange')\naxs[1, 2].set_title('Reaction time')\naxs[1, 2].set_ylabel('Time per tap [s]')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_21.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(9, 5))\n\n# Set the title of the plot\nax.set_title('Methods')\n\n# Set the x-axis label\nax.set_xlabel('Prediction Accuracy v_{D1}')\n\n# Set the y-axis label\nax.set_ylabel('')\n\n# Create a bar chart with the data\nax.bar(['BG', 'IBP', 'SSP', 'NBP'], [70, 60, 80, 70], color='blue')\n\n# Add text annotations to the bars\nfor i, v in enumerate([70, 60, 80, 70]):\n    ax.text(i, v + 2, str(v), ha='center', va='bottom')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_22.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 5.0))\n\n# Set the x-axis limits\nax.set_xlim(40, 360)\n\n# Set the y-axis limits\nax.set_ylim(-0.1, 0.1)\n\n# Set the x-axis label\nax.set_xlabel('Search depth')\n\n# Set the y-axis label\nax.set_ylabel('Reward')\n\n# Set the title of the plot\nax.set_title('Agent Performance')\n\n# Create a bar chart with the data\nax.bar([50, 100, 150, 200, 350], [0.02, 0.04, 0.02, 0.04, 0.06], color='blue')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_23.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(9, 5))\n\n# Set the title of the plot\nax.set_title('Daily Activity Durations')\n\n# Define the data for each activity\nactivities = ['Music Playtime', 'Reading Duration', 'Exercise Duration', 'Gaming Duration']\ndurations = [65.1, 55.7, 50.3, 29.5]\n\n# Create a bar chart with the data\nbars = ax.bar(activities, durations, color='blue')\n\n# Add labels to the bars\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 1), ha='center', va='bottom')\n\n# Set the limits of the x-axis\nax.set_xlim(-0.5, len(activities)-0.5)\n\n# Set the limits of the y-axis\nax.set_ylim(0, 80)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_24.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Set the title of the plot\nax.set_title('Mean Value')\n\n# Create a bar chart with the data\nax.bar(['Low Intensity', 'High Intensity', 'Recovery', 'Nutrition', 'Environment'], [2.5, 2.6, 2.4, 2.3, 2.1], color='blue')\n\n# Set the x-axis label\nax.set_xlabel('Intervention')\n\n# Set the y-axis label\nax.set_ylabel('Value')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_25.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Set the x-axis limits\nax.set_xlim(-40, 40)\n\n# Set the y-axis limits\nax.set_ylim(-0.4, 7.6)\n\n# Set the x-axis ticks\nax.set_xticks([-40, -20, 0, 20, 40])\n\n# Set the y-axis ticks\nax.set_yticks([0, 1.6, 3.6, 5.6, 7.6])\n\n# Set the x-axis label\nax.set_xlabel('Thrust Angle [\u00b0]')\n\n# Set the y-axis label\nax.set_ylabel('Angular Frequency [rad/s]')\n\n# Add a vertical line at x=0\nax.axvline(x=0, color='black', linestyle='-')\n\n# Add a horizontal line at y=0\nax.axhline(y=0, color='black', linestyle='-')\n\n# Add a rectangle with a red border\nrect = plt.Rectangle((-30, 5), 20, 2, color='red', fill=False)\nax.add_patch(rect)\n\n# Add a rectangle with a blue border\nrect = plt.Rectangle((-10, 3), 20, 2, color='blue', fill=False)\nax.add_patch(rect)\n\n# Add a rectangle with a green border\nrect = plt.Rectangle((10, 1), 20, 2, color='green', fill=False)\nax.add_patch(rect)\n\n# Add a rectangle with a purple border\nrect = plt.Rectangle((30, -1), 20, 2, color='purple', fill=False)\nax.add_patch(rect)\n\n# Add a rectangle with a pink border\nrect = plt.Rectangle((-30, 5), 20, 2, color='pink', fill=False)\nax.add_patch(rect)\n\n# Add a rectangle with a cyan border\nrect = plt.Rectangle((-10, 3), 20, 2, color='cyan', fill=False)\nax.add_patch(rect)\n\n# Add a rectangle with a magenta border\nrect = plt.Rectangle((10, 1), 20, 2, color='magenta', fill=False)\nax.add_patch(rect)\n\n# Add a rectangle with a yellow border\nrect = plt.Rectangle((30, -1), 20, 2, color='yellow', fill=False)\nax.add_patch(rect)\n\n# Add a rectangle with a brown border\nrect = plt.Rectangle((-30, 5), 20, 2, color='brown', fill=False)\nax.add_patch(rect)\n\n# Add a rectangle with a gray border\nrect = plt.Rectangle((-10, 3), 20, 2, color='gray', fill=False)\nax.add_patch(rect)\n\n# Add a rectangle with a silver border\nrect = plt.Rectangle((10, 1), 20, 2, color='silver', fill=False)\nax.add_patch(rect)\n\n# Add a rectangle with a gold border\nrect = plt.Rectangle((30, -1), 20, 2, color='gold', fill=False)\nax.add_patch(rect)\n\n# Add a rectangle with a olive border\nrect = plt.Rectangle((-30, 5), 20, 2, color='olive', fill=False)\nax.add_patch(rect)\n\n# Add a rectangle with a navy border\nrect = plt.Rectangle((-10, 3), 20, 2, color='navy', fill=False)\nax.add_patch(rect)\n\n# Add a rectangle with a maroon border\nrect = plt.Rectangle((10, 1), 20, 2, color='maroon', fill=False)\nax.add_patch(rect)\n\n# Add a rectangle with a teal border\nrect = plt.Rectangle((30, -1), 20, 2, color='teal', fill=False)\nax.add_patch(rect)\n\n# Add a rectangle with a lime border\nrect = plt.Rectangle((-30, 5), 20, 2, color='lime', fill=False)\nax.add_patch(rect)\n\n# Add a rectangle with a coral border\nrect = plt.Rectangle((-10, 3), 20, 2, color='coral', fill=False)\nax.add_patch(rect)\n\n# Add a rectangle with a tomato border\nrect = plt.Rectangle((10, 1), 20, 2, color='tomato', fill=False)\nax.add_patch(rect)\n\n# Add a rectangle with a salmon border\nrect = plt.Rectangle((30, -1), 20, 2, color='salmon', fill=False)\nax.add_patch(rect)\n\n# Add a rectangle with a peachpuff border\nrect = plt.Rectangle((-30, 5), 20, 2, color='peachpuff', fill=False)\nax.add_patch(rect)\n\n# Add a rectangle with a bisque border\nrect = plt.Rectangle((-10, 3), 20, 2, color='bisque', fill=False)\nax.add_patch(rect)\n\n# Add a rectangle with a navajowhite border\nrect = plt.Rectangle((10, 1), 20, 2, color='navajowhite', fill=False)\nax.add_patch(rect)\n\n# Add a rectangle with a lavender border\nrect = plt.Rectangle((30, -1), 20, 2, color='lavender', fill=False)\nax.add_patch(rect)\n\n# Add a rectangle with a thistle border\nrect = plt.Rectangle((-30, 5), 20, 2, color='thistle', fill=False)\nax.add_patch(rect)\n\n# Add a rectangle with a plum border\nrect = plt.Rectangle((-10, 3), 20, 2, color='plum', fill=False)\nax.add_patch(rect)\n\n# Add a rectangle with a violet border\nrect = plt.Rectangle((10, 1), 20, 2, color='violet', fill=False)\nax.add_patch(rect)\n\n# Add a rectangle with a orchid border\nrect = plt.Rectangle((30, -1), 20, 2, color='orchid', fill=False)\nax.add_patch(rect)\n\n# Add a rectangle with a fuchsia border\nrect = plt.Rectangle((-30, 5), 20, 2, color='fuchsia', fill=False)\nax.add_patch(rect)\n\n# Add a rectangle with a magenta border\nrect = plt.Rectangle((-10, 3), 20, 2, color='magenta', fill=False)\nax.add_patch(rect)\n\n# Add a rectangle with a hotpink border\nrect = plt.Rectangle((10, 1), 20, 2, color='hotpink', fill=False)\nax.add_patch(rect)\n\n# Add a rectangle with a deeppink border\nrect = plt.Rectangle((30, -1), 20, 2, color='deeppink', fill=False)\nax.add_patch(rect)\n\n# Add a rectangle with a pink border\nrect = plt.Rectangle((-30, 5), 20, 2, color='pink', fill=False)\nax.add_patch(rect)\n\n# Add a rectangle with a lightcoral border\nrect = plt.Rectangle((-10, 3), 20, 2, color='lightcoral', fill=False)\nax.add_patch(rect)\n\n# Add a rectangle with a salmon border\nrect = plt.Rectangle((10, 1), 20, 2, color='salmon', fill=False)\nax.add_patch(rect)\n\n# Add a rectangle with a sandybrown border\nrect = plt.Rectangle((30, -1), 20, 2, color='sandybrown', fill=False)\nax.add_patch(rect)\n\n# Add a rectangle with a seashell border\nrect = plt.Rectangle((-30, 5), 20, 2, color='seashell', fill=False)\nax.add_patch(rect)\n\n# Add a rectangle with a antiquewhite border\nrect = plt.Rectangle((-10, 3), 20, 2, color='antiquewhite', fill=False)\nax.add_patch(rect)\n\n# Add a rectangle with a linen border\nrect = plt.Rectangle((10, 1), 20, 2, color='linen', fill=False)\nax.add_patch(rect)\n\n# Add a rectangle with a oldlace border\nrect = plt.Rectangle((30, -1), 20, 2, color='oldlace', fill=False)\nax.add_patch(rect)\n\n# Add a rectangle with a papayawhip border\nrect = plt.Rectangle((-30, 5), 20, 2, color='papayawhip', fill=False)\nax.add_patch(rect)\n\n# Add a rectangle with a blanchedalmond border\nrect = plt.Rectangle((-10, 3), 20, 2, color='blanchedalmond', fill=False)\nax.add_patch(rect)\n\n# Add a rectangle with a bisque border\nrect = plt.Rectangle((10, 1), 20, 2, color='bisque', fill=False)\nax.add_patch(rect)\n\n# Add a rectangle with a cornsilk border\nrect = plt.Rectangle((30, -1), 20, 2, color='cornsilk', fill=False)\nax.add_patch(rect)\n\n# Add a rectangle with a ivory border\nrect = plt.Rectangle((-30, 5), 20, 2, color='ivory', fill=False)\nax.add_patch(rect)\n\n# Add a rectangle with a ghostwhite border\nrect = plt.Rectangle((-10, 3), 20, 2, color='ghostwhite', fill=False)\nax.add_patch(rect)\n\n# Add a rectangle with a honeydew border\nrect = plt.Rectangle((10, 1), 20, 2, color='honeydew', fill=False)\nax.add_patch(rect)\n\n# Add a rectangle with a mintcream border\nrect = plt.Rectangle((30, -1), 20, 2, color='mintcream', fill=False)\nax.add_patch(rect)\n\n# Add a rectangle with a azure border\nrect = plt.Rectangle((-30, 5), 20, 2, color='azure', fill=False)\nax.add_patch(rect)\n\n# Add a rectangle with a aliceblue border\nrect = plt.Rectangle((-10, 3), 20, 2, color='aliceblue', fill=False)\nax.add_patch(rect)\n\n# Add a rectangle with a lavenderblush border\nrect = plt.Rectangle((10, 1), 20, 2, color='lavenderblush', fill=False)\nax.add_patch(rect)\n\n# Add a rectangle with a mistyrose border\nrect = plt.Rectangle((30, -1), 20, 2, color='mistyrose', fill=False)\nax.add_patch(rect)\n\n# Add a rectangle with a lavender border\nrect = plt.Rectangle((-30, 5), 20, 2, color='lavender', fill=False)\nax.add_patch(rect)\n\n# Add a rectangle with a thistle border\nrect = plt.Rectangle((-10, 3), 20, 2, color='thistle', fill=False)\nax.add_patch(rect)\n\n# Add a rectangle with a plum border\nrect = plt.Rectangle((10, 1), 20, 2, color='plum', fill=False)\nax.add_patch(rect)\n\n# Add a rectangle with a violet border\nrect = plt.Rectangle((30, -1), 20, 2, color='violet', fill=False)\nax.add_patch(rect)\n\n# Add a rectangle with a orchid border\nrect = plt.Rectangle((-30, 5), 20, 2, color='orchid', fill=False)\nax.add_patch(rect)\n\n# Add a rectangle with a fuchsia border\nrect = plt.Rectangle((-10, 3), 20, 2, color='fuchsia', fill=False)\nax.add_patch(rect)\n\n# Add a rectangle with a magenta border\nrect = plt.Rectangle((10, 1), 20, 2, color='magenta', fill=False)\nax.add_patch(rect)\n\n# Add a rectangle with a hotpink border\nrect = plt.Rectangle((30, -1), 20, 2, color='hotpink', fill=False)\nax.add_patch(rect)\n\n# Add a rectangle with a deeppink border\nrect = plt.Rectangle((-30, 5), 20, 2, color='deeppink', fill=False)\nax.add_patch(rect)\n\n# Add a rectangle with a pink border\nrect = plt.Rectangle((-10, 3), 20, 2, color='pink', fill=False)\nax.add_patch(rect)\n\n# Add a rectangle with a lightcoral border\nrect = plt.Rectangle((10, 1), 20, 2, color='lightcoral', fill=False)\nax.add_patch(rect)\n\n# Add a rectangle with a salmon border\nrect = plt.Rectangle((30, -1), 20, 2, color='salmon', fill=False)\nax.add_patch(rect)\n\n# Add a rectangle with a sandybrown border\nrect = plt.Rectangle((-30, 5), 20, 2, color='sandybrown', fill=False)\nax.add_patch(rect)\n\n# Add a rectangle with a seashell border\nrect = plt.Rectangle((-10, 3), 20, 2, color='seashell', fill=False)\nax.add_patch(rect)\n\n# Add a rectangle with a antiquewhite border\nrect = plt.Rectangle((10, 1), 20, 2, color='antiquewhite', fill=False)\nax.add_patch(rect)\n\n# Add a rectangle with a linen border\nrect = plt.Rectangle((30, -1), 20, 2, color='linen', fill=False)\nax.add_patch(rect)\n\n# Add a rectangle with a oldlace border\nrect = plt.Rectangle((-30, 5), 20, 2, color='oldlace', fill=False)\nax.add_patch(rect)\n\n# Add a rectangle with a papayawhip border\nrect = plt.Rectangle((-10, 3), 20, 2, color='papayawhip', fill=False)\nax.add_patch(rect)\n\n# Add a rectangle with a blanchedalmond border\nrect = plt.Rectangle((10, 1), 20, 2, color='blanchedalmond', fill=False)\nax.add_patch(rect)\n\n# Add a rectangle with a bisque border\nrect = plt.Rectangle((30, -1), 20, 2, color='bisque', fill=False)\nax.add_patch(rect)\n\n# Add a rectangle with a cornsilk border\nrect = plt.Rectangle((-30, 5), 20, 2, color='cornsilk', fill=False)\nax.add_patch(rect)\n\n# Add a rectangle with a ivory border\nrect = plt.Rectangle((-10, 3), 20, 2, color='ivory', fill=False)\nax.add_patch(rect)\n\n# Add a rectangle with a ghostwhite border\nrect = plt.Rectangle((10, 1), 20, 2, color='ghostwhite', fill=False)\nax.add_patch(rect)\n\n# Add a rectangle with a honeydew border\nrect = plt.Rectangle((30, -1), 20, 2, color='honeydew', fill=False)\nax.add_patch(rect)\n\n# Add a rectangle with a mintcream border\nrect = plt.Rectangle((-30, 5), 20, 2, color='mintcream', fill=False)\nax.add_patch(rect)\n\n# Add a rectangle with a azure border\nrect = plt.Rectangle((-10, 3), 20, 2, color='azure', fill=False)\nax.add_patch(rect)\n\n# Add a rectangle with a aliceblue border\nrect = plt.Rectangle((10, 1), 20, 2, color='aliceblue', fill=False)\nax.add_patch(rect)\n\n# Add a rectangle with a lavenderblush border\nrect = plt.Rectangle((30, -1), 20, 2, color='lavenderblush', fill=False)\nax.add_patch(rect)\n\n# Add a rectangle with a mistyrose border\nrect = plt.Rectangle((-30, 5), 20, 2, color='mistyrose', fill=False)\nax.add_patch(rect)\n\n# Add a rectangle with a lavender border\nrect = plt.Rectangle((-10, 3), 20, 2, color='lavender', fill=False)\nax.add_patch(rect)\n\n# Add a rectangle with a thistle border\nrect = plt.Rectangle((10, 1), 20, 2, color='thistle', fill=False)\nax.add_patch(rect)\n\n# Add a rectangle with a plum border\nrect = plt.Rectangle((30, -1), 20, 2, color='plum', fill=False)\nax.add_patch(rect)\n\n# Add a rectangle with a violet border\nrect = plt.Rectangle((-30, 5), 20, 2, color='violet', fill=False)\nax.add_patch(rect)\n\n# Add a rectangle with a orchid border\nrect = plt.Rectangle((-10, 3), 20, 2, color='orchid', fill=False)\nax.add_patch(rect)\n\n# Add a rectangle with a fuchsia border\nrect = plt.Rectangle((10, 1), 20, 2, color='fuchsia', fill=False)\nax.add_patch(rect)\n\n# Add a rectangle with a magenta border\nrect = plt.Rectangle((30, -1), 20, 2, color='magenta', fill=False)\nax.add_patch(rect)\n\n# Add a rectangle with a hotpink border\nrect = plt.Rectangle((-30, 5), 20, 2, color='hotpink', fill=False)\nax.add_patch(rect)\n\n# Add a rectangle with a deeppink border\nrect = plt.Rectangle((-10, 3), 20, 2, color='deeppink', fill=False)\nax.add_patch(rect)\n\n# Add a rectangle with a pink border\nrect = plt.Rectangle((10, 1), 20, 2, color='pink', fill=False)\nax.add_patch(rect)\n\n# Add a rectangle with a lightcoral border\nrect = plt.Rectangle((30, -1), 20, 2, color='lightcoral', fill=False)\nax.add_patch(rect)\n\n# Add a rectangle with a salmon border\nrect = plt.Rectangle((-30, 5), 20, 2, color='salmon', fill=False)\nax.add_patch(rect)\n\n# Add a rectangle with a sandybrown border\nrect = plt.Rectangle((-10, 3), 20, 2, color='sandybrown', fill=False)\nax.add_patch(rect)\n\n# Add a rectangle"}
{"file": "dataset/ori_500/box_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Performance Gap (%)')\n\n# Set the x-axis label\nax.set_xlabel('Teams')\n\n# Set the y-axis label\nax.set_ylabel('Performance Gap (%)')\n\n# Define the teams\nteams = ['ST_CVRP', 'ST_VRPTW', 'ST_All', 'Ours']\n\n# Define the performance gap values\nperformance_gap = [45, 55, 35, 25]\n\n# Define the colors for each team\ncolors = ['blue', 'purple', 'orange', 'red']\n\n# Plot the bars\nbars = ax.bar(teams, performance_gap, color=colors)\n\n# Add a legend\nax.legend(bars, teams)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_4.pdf", "response": "```python\n\"\"\"\n=====================================\nHuman Normalized Score vs. Mean (\u2191)\n=====================================\n\nThis example demonstrates a simple scatter plot with a colorbar.\n\"\"\"\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Fixing random state for reproducibility\nnp.random.seed(42)\n\nfig, ax = plt.subplots(figsize=(12, 3))\n\n# Scatter plot\nax.scatter(np.random.rand(50), np.random.rand(50), c=np.random.rand(50), s=100)\nax.set_xlabel('Human Normalized Score')\nax.set_ylabel('Mean (\u2191)')\nax.set_title('Human Normalized Score vs. Mean (\u2191)')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/box_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Thrust Angle vs Angular Frequency')\n\n# Set the x-axis label\nax.set_xlabel('Angular Frequency [rad/s]')\n\n# Set the y-axis label\nax.set_ylabel('Thrust Angle [\u00b0]')\n\n# Set the x-axis limits\nax.set_xlim(2.0, 5.0)\n\n# Set the y-axis limits\nax.set_ylim(-60, 60)\n\n# Draw a rectangle around the plot\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\nax.spines['bottom'].set_visible(False)\nax.spines['left'].set_visible(False)\n\n# Add a horizontal line at y=0\nax.axhline(y=0, color='black', linewidth=1)\n\n# Add a vertical line at x=0\nax.axvline(x=0, color='black', linewidth=1)\n\n# Add a horizontal line at y=40\nax.axhline(y=40, color='black', linewidth=1)\n\n# Add a vertical line at x=3.5\nax.axvline(x=3.5, color='black', linewidth=1)\n\n# Add a horizontal line at y=20\nax.axhline(y=20, color='black', linewidth=1)\n\n# Add a vertical line at x=4.5\nax.axvline(x=4.5, color='black', linewidth=1)\n\n# Add a horizontal line at y=0\nax.axhline(y=0, color='black', linewidth=1)\n\n# Add a vertical line at x=5.0\nax.axvline(x=5.0, color='black', linewidth=1)\n\n# Add a horizontal line at y=-40\nax.axhline(y=-40, color='black', linewidth=1)\n\n# Add a vertical line at x=2.5\nax.axvline(x=2.5, color='black', linewidth=1)\n\n# Add a horizontal line at y=-20\nax.axhline(y=-20, color='black', linewidth=1)\n\n# Add a vertical line at x=3.0\nax.axvline(x=3.0, color='black', linewidth=1)\n\n# Add a horizontal line at y=-60\nax.axhline(y=-60, color='black', linewidth=1)\n\n# Add a vertical line at x=2.0\nax.axvline(x=2.0, color='black', linewidth=1)\n\n# Add a horizontal line at y=60\nax.axhline(y=60, color='black', linewidth=1)\n\n# Add a vertical line at x=5.0\nax.axvline(x=5.0, color='black', linewidth=1)\n\n# Add a horizontal line at y=0\nax.axhline(y=0, color='black', linewidth=1)\n\n# Add a vertical line at x=2.5\nax.axvline(x=2.5, color='black', linewidth=1)\n\n# Add a horizontal line at y=20\nax.axhline(y=20, color='black', linewidth=1)\n\n# Add a vertical line at x=3.0\nax.axvline(x=3.0, color='black', linewidth=1)\n\n# Add a horizontal line at y=-40\nax.axhline(y=-40, color='black', linewidth=1)\n\n# Add a vertical line at x=2.0\nax.axvline(x=2.0, color='black', linewidth=1)\n\n# Add a horizontal line at y=-60\nax.axhline(y=-60, color='black', linewidth=1)\n\n# Add a vertical line at x=5.0\nax.axvline(x=5.0, color='black', linewidth=1)\n\n# Add a horizontal line at y=0\nax.axhline(y=0, color='black', linewidth=1)\n\n# Add a vertical line at x=2.5\nax.axvline(x=2.5, color='black', linewidth=1)\n\n# Add a horizontal line at y=20\nax.axhline(y=20, color='black', linewidth=1)\n\n# Add a vertical line at x=3.0\nax.axvline(x=3.0, color='black', linewidth=1)\n\n# Add a horizontal line at y=-40\nax.axhline(y=-40, color='black', linewidth=1)\n\n# Add a vertical line at x=2.0\nax.axvline(x=2.0, color='black', linewidth=1)\n\n# Add a horizontal line at y=-60\nax.axhline(y=-60, color='black', linewidth=1)\n\n# Add a vertical line at x=5.0\nax.axvline(x=5.0, color='black', linewidth=1)\n\n# Add a horizontal line at y=0\nax.axhline(y=0, color='black', linewidth=1)\n\n# Add a vertical line at x=2.5\nax.axvline(x=2.5, color='black', linewidth=1)\n\n# Add a horizontal line at y=20\nax.axhline(y=20, color='black', linewidth=1)\n\n# Add a vertical line at x=3.0\nax.axvline(x=3.0, color='black', linewidth=1)\n\n# Add a horizontal line at y=-40\nax.axhline(y=-40, color='black', linewidth=1)\n\n# Add a vertical line at x=2.0\nax.axvline(x=2.0, color='black', linewidth=1)\n\n# Add a horizontal line at y=-60\nax.axhline(y=-60, color='black', linewidth=1)\n\n# Add a vertical line at x=5.0\nax.axvline(x=5.0, color='black', linewidth=1)\n\n# Add a horizontal line at y=0\nax.axhline(y=0, color='black', linewidth=1)\n\n# Add a vertical line at x=2.5\nax.axvline(x=2.5, color='black', linewidth=1)\n\n# Add a horizontal line at y=20\nax.axhline(y=20, color='black', linewidth=1)\n\n# Add a vertical line at x=3.0\nax.axvline(x=3.0, color='black', linewidth=1)\n\n# Add a horizontal line at y=-40\nax.axhline(y=-40, color='black', linewidth=1)\n\n# Add a vertical line at x=2.0\nax.axvline(x=2.0, color='black', linewidth=1)\n\n# Add a horizontal line at y=-60\nax.axhline(y=-60, color='black', linewidth=1)\n\n# Add a vertical line at x=5.0\nax.axvline(x=5.0, color='black', linewidth=1)\n\n# Add a horizontal line at y=0\nax.axhline(y=0, color='black', linewidth=1)\n\n# Add a vertical line at x=2.5\nax.axvline(x=2.5, color='black', linewidth=1)\n\n# Add a horizontal line at y=20\nax.axhline(y=20, color='black', linewidth=1)\n\n# Add a vertical line at x=3.0\nax.axvline(x=3.0, color='black', linewidth=1)\n\n# Add a horizontal line at y=-40\nax.axhline(y=-40, color='black', linewidth=1)\n\n# Add a vertical line at x=2.0\nax.axvline(x=2.0, color='black', linewidth=1)\n\n# Add a horizontal line at y=-60\nax.axhline(y=-60, color='black', linewidth=1)\n\n# Add a vertical line at x=5.0\nax.axvline(x=5.0, color='black', linewidth=1)\n\n# Add a horizontal line at y=0\nax.axhline(y=0, color='black', linewidth=1)\n\n# Add a vertical line at x=2.5\nax.axvline(x=2.5, color='black', linewidth=1)\n\n# Add a horizontal line at y=20\nax.axhline(y=20, color='black', linewidth=1)\n\n# Add a vertical line at x=3.0\nax.axvline(x=3.0, color='black', linewidth=1)\n\n# Add a horizontal line at y=-40\nax.axhline(y=-40, color='black', linewidth=1)\n\n# Add a vertical line at x=2.0\nax.axvline(x=2.0, color='black', linewidth=1)\n\n# Add a horizontal line at y=-60\nax.axhline(y=-60, color='black', linewidth=1)\n\n# Add a vertical line at x=5.0\nax.axvline(x=5.0, color='black', linewidth=1)\n\n# Add a horizontal line at y=0\nax.axhline(y=0, color='black', linewidth=1)\n\n# Add a vertical line at x=2.5\nax.axvline(x=2.5, color='black', linewidth=1)\n\n# Add a horizontal line at y=20\nax.axhline(y=20, color='black', linewidth=1)\n\n# Add a vertical line at x=3.0\nax.axvline(x=3.0, color='black', linewidth=1)\n\n# Add a horizontal line at y=-40\nax.axhline(y=-40, color='black', linewidth=1)\n\n# Add a vertical line at x=2.0\nax.axvline(x=2.0, color='black', linewidth=1)\n\n# Add a horizontal line at y=-60\nax.axhline(y=-60, color='black', linewidth=1)\n\n# Add a vertical line at x=5.0\nax.axvline(x=5.0, color='black', linewidth=1)\n\n# Add a horizontal line at y=0\nax.axhline(y=0, color='black', linewidth=1)\n\n# Add a vertical line at x=2.5\nax.axvline(x=2.5, color='black', linewidth=1)\n\n# Add a horizontal line at y=20\nax.axhline(y=20, color='black', linewidth=1)\n\n# Add a vertical line at x=3.0\nax.axvline(x=3.0, color='black', linewidth=1)\n\n# Add a horizontal line at y=-40\nax.axhline(y=-40, color='black', linewidth=1)\n\n# Add a vertical line at x=2.0\nax.axvline(x=2.0, color='black', linewidth=1)\n\n# Add a horizontal line at y=-60\nax.axhline(y=-60, color='black', linewidth=1)\n\n# Add a vertical line at x=5.0\nax.axvline(x=5.0, color='black', linewidth=1)\n\n# Add a horizontal line at y=0\nax.axhline(y=0, color='black', linewidth=1)\n\n# Add a vertical line at x=2.5\nax.axvline(x=2.5, color='black', linewidth=1)\n\n# Add a horizontal line at y=20\nax.axhline(y=20, color='black', linewidth=1)\n\n# Add a vertical line at x=3.0\nax.axvline(x=3.0, color='black', linewidth=1)\n\n# Add a horizontal line at y=-40\nax.axhline(y=-40, color='black', linewidth=1)\n\n# Add a vertical line at x=2.0\nax.axvline(x=2.0, color='black', linewidth=1)\n\n# Add a horizontal line at y=-60\nax.axhline(y=-60, color='black', linewidth=1)\n\n# Add a vertical line at x=5.0\nax.axvline(x=5.0, color='black', linewidth=1)\n\n# Add a horizontal line at y=0\nax.axhline(y=0, color='black', linewidth=1)\n\n# Add a vertical line at x=2.5\nax.axvline(x=2.5, color='black', linewidth=1)\n\n# Add a horizontal line at y=20\nax.axhline(y=20, color='black', linewidth=1)\n\n# Add a vertical line at x=3.0\nax.axvline(x=3.0, color='black', linewidth=1)\n\n# Add a horizontal line at y=-40\nax.axhline(y=-40, color='black', linewidth=1)\n\n# Add a vertical line at x=2.0\nax.axvline(x=2.0, color='black', linewidth=1)\n\n# Add a horizontal line at y=-60\nax.axhline(y=-60, color='black', linewidth=1)\n\n# Add a vertical line at x=5.0\nax.axvline(x=5.0, color='black', linewidth=1)\n\n# Add a horizontal line at y=0\nax.axhline(y=0, color='black', linewidth=1)\n\n# Add a vertical line at x=2.5\nax.axvline(x=2.5, color='black', linewidth=1)\n\n# Add a horizontal line at y=20\nax.axhline(y=20, color='black', linewidth=1)\n\n# Add a vertical line at x=3.0\nax.axvline(x=3.0, color='black', linewidth=1)\n\n# Add a horizontal line at y=-40\nax.axhline(y=-40, color='black', linewidth=1)\n\n# Add a vertical line at x=2.0\nax.axvline(x=2.0, color='black', linewidth=1)\n\n# Add a horizontal line at y=-60\nax.axhline(y=-60, color='black', linewidth=1)\n\n# Add a vertical line at x=5.0\nax.axvline(x=5.0, color='black', linewidth=1)\n\n# Add a horizontal line at y=0\nax.axhline(y=0, color='black', linewidth=1)\n\n# Add a vertical line at x=2.5\nax.axvline(x=2.5, color='black', linewidth=1)\n\n# Add a horizontal line at y=20\nax.axhline(y=20, color='black', linewidth=1)\n\n# Add a vertical line at x=3.0\nax.axvline(x=3.0, color='black', linewidth=1)\n\n# Add a horizontal line at y=-40\nax.axhline(y=-40, color='black', linewidth=1)\n\n# Add a vertical line at x=2.0\nax.axvline(x=2.0, color='black', linewidth=1)\n\n# Add a horizontal line at y=-60\nax.axhline(y=-60, color='black', linewidth=1)\n\n# Add a vertical line at x=5.0\nax.axvline(x=5.0, color='black', linewidth=1)\n\n# Add a horizontal line at y=0\nax.axhline(y=0, color='black', linewidth=1)\n\n# Add a vertical line at x=2.5\nax.axvline(x=2.5, color='black', linewidth=1)\n\n# Add a horizontal line at y=20\nax.axhline(y=20, color='black', linewidth=1)\n\n# Add a vertical line at x=3.0\nax.axvline(x=3.0, color='black', linewidth=1)\n\n# Add a horizontal line at y=-40\nax.axhline(y=-40, color='black', linewidth=1)\n\n# Add a vertical line at x=2.0\nax.axvline(x=2.0, color='black', linewidth=1)\n\n# Add a horizontal line at y=-60\nax.axhline(y=-60, color='black', linewidth=1)\n\n# Add a vertical line at x=5.0\nax.axvline(x=5.0, color='black', linewidth=1)\n\n# Add a horizontal line at y=0\nax.axhline(y=0, color='black', linewidth=1)\n\n# Add a vertical line at x=2.5\nax.axvline(x=2.5, color='black', linewidth=1)\n\n# Add a horizontal line at y=20\nax.axhline(y=20, color='black', linewidth=1)\n\n# Add a vertical line at x=3.0\nax.axvline(x=3.0, color='black', linewidth=1)\n\n# Add a horizontal line at y=-40\nax.axhline(y=-40, color='black', linewidth=1)\n\n# Add a vertical line at x=2.0\nax.axvline(x=2.0, color='black', linewidth=1)\n\n# Add a horizontal line at y=-60\nax.axhline(y=-60, color='black', linewidth=1)\n\n# Add a vertical line at x=5.0\nax.axvline(x=5.0, color='black', linewidth=1)\n\n# Add a horizontal line at y=0\nax.axhline(y=0, color='black', linewidth=1)\n\n# Add a vertical line at x=2.5\nax.axvline(x=2.5, color='black', linewidth=1)\n\n# Add a horizontal line at y=20\nax.axhline(y=20, color='black', linewidth=1)\n\n# Add a vertical line at x=3.0\nax.axvline(x=3.0, color='black', linewidth=1)\n\n# Add a horizontal line at y=-40\nax.axhline(y=-40, color='black', linewidth=1)\n\n# Add a vertical line at x=2.0\nax.axvline(x=2.0, color='black', linewidth=1)\n\n# Add a horizontal line at y=-60\nax.axhline(y=-60, color='black', linewidth=1)\n\n# Add a vertical line at x=5.0\nax.axvline(x=5.0, color='black', linewidth=1)\n\n# Add a horizontal line at y=0\nax"}
{"file": "dataset/ori_500/box_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the background color of the plot\nax.set_facecolor('lightgrey')\n\n# Set the title of the plot\nax.set_title('SE (bps/HZ) vs CEE (dB)')\n\n# Set the x-axis label\nax.set_xlabel('CEE (dB)')\n\n# Set the y-axis label\nax.set_ylabel('SE (bps/HZ)')\n\n# Set the x-axis limits\nax.set_xlim(-10, 0)\n\n# Set the y-axis limits\nax.set_ylim(4, 12)\n\n# Draw vertical lines at specific positions\nax.axvline(x=-10, color='black')\nax.axvline(x=0, color='black')\n\n# Draw horizontal lines at specific positions\nax.axhline(y=4, color='black')\nax.axhline(y=5, color='black')\nax.axhline(y=6, color='black')\nax.axhline(y=7, color='black')\nax.axhline(y=8, color='black')\nax.axhline(y=9, color='black')\nax.axhline(y=10, color='black')\nax.axhline(y=11, color='black')\nax.axhline(y=12, color='black')\n\n# Draw rectangles with specific colors and sizes\nrect1 = plt.Rectangle((0, 9), 2, 1, color='brown')\nrect2 = plt.Rectangle((0, 8), 2, 1, color='brown')\nrect3 = plt.Rectangle((0, 7), 2, 1, color='brown')\nrect4 = plt.Rectangle((0, 6), 2, 1, color='brown')\nrect5 = plt.Rectangle((0, 5), 2, 1, color='brown')\nrect6 = plt.Rectangle((0, 4), 2, 1, color='brown')\nrect7 = plt.Rectangle((0, 3), 2, 1, color='brown')\nrect8 = plt.Rectangle((0, 2), 2, 1, color='brown')\nrect9 = plt.Rectangle((0, 1), 2, 1, color='brown')\nrect10 = plt.Rectangle((0, 0), 2, 1, color='brown')\nax.add_patch(rect1)\nax.add_patch(rect2)\nax.add_patch(rect3)\nax.add_patch(rect4)\nax.add_patch(rect5)\nax.add_patch(rect6)\nax.add_patch(rect7)\nax.add_patch(rect8)\nax.add_patch(rect9)\nax.add_patch(rect10)\n\n# Draw rectangles with specific colors and sizes\nrect11 = plt.Rectangle((-10, 9), 2, 1, color='blue')\nrect12 = plt.Rectangle((-10, 8), 2, 1, color='blue')\nrect13 = plt.Rectangle((-10, 7), 2, 1, color='blue')\nrect14 = plt.Rectangle((-10, 6), 2, 1, color='blue')\nrect15 = plt.Rectangle((-10, 5), 2, 1, color='blue')\nrect16 = plt.Rectangle((-10, 4), 2, 1, color='blue')\nrect17 = plt.Rectangle((-10, 3), 2, 1, color='blue')\nrect18 = plt.Rectangle((-10, 2), 2, 1, color='blue')\nrect19 = plt.Rectangle((-10, 1), 2, 1, color='blue')\nrect20 = plt.Rectangle((-10, 0), 2, 1, color='blue')\nax.add_patch(rect11)\nax.add_patch(rect12)\nax.add_patch(rect13)\nax.add_patch(rect14)\nax.add_patch(rect15)\nax.add_patch(rect16)\nax.add_patch(rect17)\nax.add_patch(rect18)\nax.add_patch(rect19)\nax.add_patch(rect20)\n\n# Draw rectangles with specific colors and sizes\nrect21 = plt.Rectangle((-5, 9), 2, 1, color='green')\nrect22 = plt.Rectangle((-5, 8), 2, 1, color='green')\nrect23 = plt.Rectangle((-5, 7), 2, 1, color='green')\nrect24 = plt.Rectangle((-5, 6), 2, 1, color='green')\nrect25 = plt.Rectangle((-5, 5), 2, 1, color='green')\nrect26 = plt.Rectangle((-5, 4), 2, 1, color='green')\nrect27 = plt.Rectangle((-5, 3), 2, 1, color='green')\nrect28 = plt.Rectangle((-5, 2), 2, 1, color='green')\nrect29 = plt.Rectangle((-5, 1), 2, 1, color='green')\nrect30 = plt.Rectangle((-5, 0), 2, 1, color='green')\nax.add_patch(rect21)\nax.add_patch(rect22)\nax.add_patch(rect23)\nax.add_patch(rect24)\nax.add_patch(rect25)\nax.add_patch(rect26)\nax.add_patch(rect27)\nax.add_patch(rect28)\nax.add_patch(rect29)\nax.add_patch(rect30)\n\n# Draw rectangles with specific colors and sizes\nrect31 = plt.Rectangle((0, 9), 2, 1, color='red')\nrect32 = plt.Rectangle((0, 8), 2, 1, color='red')\nrect33 = plt.Rectangle((0, 7), 2, 1, color='red')\nrect34 = plt.Rectangle((0, 6), 2, 1, color='red')\nrect35 = plt.Rectangle((0, 5), 2, 1, color='red')\nrect36 = plt.Rectangle((0, 4), 2, 1, color='red')\nrect37 = plt.Rectangle((0, 3), 2, 1, color='red')\nrect38 = plt.Rectangle((0, 2), 2, 1, color='red')\nrect39 = plt.Rectangle((0, 1), 2, 1, color='red')\nrect40 = plt.Rectangle((0, 0), 2, 1, color='red')\nax.add_patch(rect31)\nax.add_patch(rect32)\nax.add_patch(rect33)\nax.add_patch(rect34)\nax.add_patch(rect35)\nax.add_patch(rect36)\nax.add_patch(rect37)\nax.add_patch(rect38)\nax.add_patch(rect39)\nax.add_patch(rect40)\n\n# Draw rectangles with specific colors and sizes\nrect41 = plt.Rectangle((-10, 9), 2, 1, color='blue')\nrect42 = plt.Rectangle((-10, 8), 2, 1, color='blue')\nrect43 = plt.Rectangle((-10, 7), 2, 1, color='blue')\nrect44 = plt.Rectangle((-10, 6), 2, 1, color='blue')\nrect45 = plt.Rectangle((-10, 5), 2, 1, color='blue')\nrect46 = plt.Rectangle((-10, 4), 2, 1, color='blue')\nrect47 = plt.Rectangle((-10, 3), 2, 1, color='blue')\nrect48 = plt.Rectangle((-10, 2), 2, 1, color='blue')\nrect49 = plt.Rectangle((-10, 1), 2, 1, color='blue')\nrect50 = plt.Rectangle((-10, 0), 2, 1, color='blue')\nax.add_patch(rect41)\nax.add_patch(rect42)\nax.add_patch(rect43)\nax.add_patch(rect44)\nax.add_patch(rect45)\nax.add_patch(rect46)\nax.add_patch(rect47)\nax.add_patch(rect48)\nax.add_patch(rect49)\nax.add_patch(rect50)\n\n# Draw rectangles with specific colors and sizes\nrect51 = plt.Rectangle((-5, 9), 2, 1, color='green')\nrect52 = plt.Rectangle((-5, 8), 2, 1, color='green')\nrect53 = plt.Rectangle((-5, 7), 2, 1, color='green')\nrect54 = plt.Rectangle((-5, 6), 2, 1, color='green')\nrect55 = plt.Rectangle((-5, 5), 2, 1, color='green')\nrect56 = plt.Rectangle((-5, 4), 2, 1, color='green')\nrect57 = plt.Rectangle((-5, 3), 2, 1, color='green')\nrect58 = plt.Rectangle((-5, 2), 2, 1, color='green')\nrect59 = plt.Rectangle((-5, 1), 2, 1, color='green')\nrect60 = plt.Rectangle((-5, 0), 2, 1, color='green')\nax.add_patch(rect51)\nax.add_patch(rect52)\nax.add_patch(rect53)\nax.add_patch(rect54)\nax.add_patch(rect55)\nax.add_patch(rect56)\nax.add_patch(rect57)\nax.add_patch(rect58)\nax.add_patch(rect59)\nax.add_patch(rect60)\n\n# Draw rectangles with specific colors and sizes\nrect61 = plt.Rectangle((0, 9), 2, 1, color='red')\nrect62 = plt.Rectangle((0, 8), 2, 1, color='red')\nrect63 = plt.Rectangle((0, 7), 2, 1, color='red')\nrect64 = plt.Rectangle((0, 6), 2, 1, color='red')\nrect65 = plt.Rectangle((0, 5), 2, 1, color='red')\nrect66 = plt.Rectangle((0, 4), 2, 1, color='red')\nrect67 = plt.Rectangle((0, 3), 2, 1, color='red')\nrect68 = plt.Rectangle((0, 2), 2, 1, color='red')\nrect69 = plt.Rectangle((0, 1), 2, 1, color='red')\nrect70 = plt.Rectangle((0, 0), 2, 1, color='red')\nax.add_patch(rect61)\nax.add_patch(rect62)\nax.add_patch(rect63)\nax.add_patch(rect64)\nax.add_patch(rect65)\nax.add_patch(rect66)\nax.add_patch(rect67)\nax.add_patch(rect68)\nax.add_patch(rect69)\nax.add_patch(rect70)\n\n# Draw rectangles with specific colors and sizes\nrect71 = plt.Rectangle((-10, 9), 2, 1, color='blue')\nrect72 = plt.Rectangle((-10, 8), 2, 1, color='blue')\nrect73 = plt.Rectangle((-10, 7), 2, 1, color='blue')\nrect74 = plt.Rectangle((-10, 6), 2, 1, color='blue')\nrect75 = plt.Rectangle((-10, 5), 2, 1, color='blue')\nrect76 = plt.Rectangle((-10, 4), 2, 1, color='blue')\nrect77 = plt.Rectangle((-10, 3), 2, 1, color='blue')\nrect78 = plt.Rectangle((-10, 2), 2, 1, color='blue')\nrect79 = plt.Rectangle((-10, 1), 2, 1, color='blue')\nrect80 = plt.Rectangle((-10, 0), 2, 1, color='blue')\nax.add_patch(rect71)\nax.add_patch(rect72)\nax.add_patch(rect73)\nax.add_patch(rect74)\nax.add_patch(rect75)\nax.add_patch(rect76)\nax.add_patch(rect77)\nax.add_patch(rect78)\nax.add_patch(rect79)\nax.add_patch(rect80)\n\n# Draw rectangles with specific colors and sizes\nrect81 = plt.Rectangle((-5, 9), 2, 1, color='green')\nrect82 = plt.Rectangle((-5, 8), 2, 1, color='green')\nrect83 = plt.Rectangle((-5, 7), 2, 1, color='green')\nrect84 = plt.Rectangle((-5, 6), 2, 1, color='green')\nrect85 = plt.Rectangle((-5, 5), 2, 1, color='green')\nrect86 = plt.Rectangle((-5, 4), 2, 1, color='green')\nrect87 = plt.Rectangle((-5, 3), 2, 1, color='green')\nrect88 = plt.Rectangle((-5, 2), 2, 1, color='green')\nrect89 = plt.Rectangle((-5, 1), 2, 1, color='green')\nrect90 = plt.Rectangle((-5, 0), 2, 1, color='green')\nax.add_patch(rect81)\nax.add_patch(rect82)\nax.add_patch(rect83)\nax.add_patch(rect84)\nax.add_patch(rect85)\nax.add_patch(rect86)\nax.add_patch(rect87)\nax.add_patch(rect88)\nax.add_patch(rect89)\nax.add_patch(rect90)\n\n# Draw rectangles with specific colors and sizes\nrect91 = plt.Rectangle((0, 9), 2, 1, color='red')\nrect92 = plt.Rectangle((0, 8), 2, 1, color='red')\nrect93 = plt.Rectangle((0, 7), 2, 1, color='red')\nrect94 = plt.Rectangle((0, 6), 2, 1, color='red')\nrect95 = plt.Rectangle((0, 5), 2, 1, color='red')\nrect96 = plt.Rectangle((0, 4), 2, 1, color='red')\nrect97 = plt.Rectangle((0, 3), 2, 1, color='red')\nrect98 = plt.Rectangle((0, 2), 2, 1, color='red')\nrect99 = plt.Rectangle((0, 1), 2, 1, color='red')\nrect100 = plt.Rectangle((0, 0), 2, 1, color='red')\nax.add_patch(rect91)\nax.add_patch(rect92)\nax.add_patch(rect93)\nax.add_patch(rect94)\nax.add_patch(rect95)\nax.add_patch(rect96)\nax.add_patch(rect97)\nax.add_patch(rect98)\nax.add_patch(rect99)\nax.add_patch(rect100)\n\n# Draw rectangles with specific colors and sizes\nrect101 = plt.Rectangle((-10, 9), 2, 1, color='blue')\nrect102 = plt.Rectangle((-10, 8), 2, 1, color='blue')\nrect103 = plt.Rectangle((-10, 7), 2, 1, color='blue')\nrect104 = plt.Rectangle((-10, 6), 2, 1, color='blue')\nrect105 = plt.Rectangle((-10, 5), 2, 1, color='blue')\nrect106 = plt.Rectangle((-10, 4), 2, 1, color='blue')\nrect107 = plt.Rectangle((-10, 3), 2, 1, color='blue')\nrect108 = plt.Rectangle((-10, 2), 2, 1, color='blue')\nrect109 = plt.Rectangle((-10, 1), 2, 1, color='blue')\nrect110 = plt.Rectangle((-10, 0), 2, 1, color='blue')\nax.add_patch(rect101)\nax.add_patch(rect102)\nax.add_patch(rect103)\nax.add_patch(rect104)\nax.add_patch(rect105)\nax.add_patch(rect106)\nax.add_patch(rect107)\nax.add_patch(rect108)\nax.add_patch(rect109)\nax.add_patch(rect110)\n\n# Draw rectangles with specific colors and sizes\nrect111 = plt.Rectangle((-5, 9), 2, 1, color='green')\nrect112 = plt.Rectangle((-5, 8), 2, 1, color='green')\nrect113 = plt.Rectangle((-5, 7), 2, 1, color='green')\nrect114 = plt.Rectangle((-5, 6), 2, 1, color='green')\nrect115 = plt.Rectangle((-5, 5), 2, 1, color='green')\nrect116 = plt.Rectangle((-5, 4), 2, 1, color='green')\nrect117 = plt.Rectangle((-5, 3), 2, 1, color='green')\nrect118 = plt.Rectangle((-5, 2), 2, 1, color='green')\nrect119 = plt.Rectangle((-5, 1), 2, 1, color='green')\nrect120 = plt.Rectangle((-5, 0), 2, 1, color='green')\nax.add_patch(rect111)\nax.add_patch(rect112)\nax.add_patch(rect113)\nax.add_patch(rect114)\nax.add_patch(rect115)\nax.add_patch(rect116)\nax.add_patch(rect117)\nax.add_patch(rect118)\nax.add_patch(rect119)\nax.add_patch(rect120)\n\n# Draw rectangles with specific colors and sizes\nrect121 = plt.Rectangle((0, 9), 2, 1, color='red')\nrect122 = plt.Rectangle((0, 8), 2, 1, color='red')\nrect123 = plt.Rectangle((0, 7), 2, 1, color='red')\nrect124 = plt.Rectangle((0, 6), 2, 1, color='red')\nrect125 = plt.Rectangle((0, 5), 2, 1, color='red')\nrect126 = plt.Rectangle((0, 4), 2, 1, color='red')\nrect1"}
{"file": "dataset/ori_500/box_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(25, 8))\n\n# Set the title of the plot\nax.set_title('Linear travel times')\n\n# Create a scatter plot\nscatter = ax.scatter([1, 2, 3], [4, 5, 6])\n\n# Set the x-axis label\nax.set_xlabel('X-axis')\n\n# Set the y-axis label\nax.set_ylabel('Y-axis')\n\n# Set the x-axis limits\nax.set_xlim(-20, 20)\n\n# Set the y-axis limits\nax.set_ylim(-20, 20)\n\n# Set the x-axis ticks\nax.set_xticks([-20, -10, 0, 10, 20])\n\n# Set the y-axis ticks\nax.set_yticks([-20, -10, 0, 10, 20])\n\n# Set the x-axis tick labels\nax.set_xticklabels(['Davg', 'P-avg', 'R-avg'])\n\n# Set the y-axis tick labels\nax.set_yticklabels(['Davg', 'P-avg', 'R-avg'])\n\n# Set the x-axis grid\nax.grid(True)\n\n# Set the y-axis grid\nax.grid(True)\n\n# Set the x-axis color\nax.spines['left'].set_color('blue')\n\n# Set the y-axis color\nax.spines['bottom'].set_color('blue')\n\n# Set the x-axis line width\nax.spines['left'].set_linewidth(2)\n\n# Set the y-axis line width\nax.spines['bottom'].set_linewidth(2)\n\n# Set the x-axis line style\nax.spines['left'].set_linestyle('-')\n\n# Set the y-axis line style\nax.spines['bottom'].set_linestyle('-')\n\n# Set the x-axis line color\nax.spines['left'].set_color('red')\n\n# Set the y-axis line color\nax.spines['bottom'].set_color('red')\n\n# Set the x-axis line width\nax.spines['left'].set_linewidth(2)\n\n# Set the y-axis line width\nax.spines['bottom'].set_linewidth(2)\n\n# Set the x-axis line style\nax.spines['left'].set_linestyle('-')\n\n# Set the y-axis line style\nax.spines['bottom'].set_linestyle('-')\n\n# Set the x-axis line color\nax.spines['left'].set_color('green')\n\n# Set the y-axis line color\nax.spines['bottom'].set_color('green')\n\n# Set the x-axis line width\nax.spines['left'].set_linewidth(2)\n\n# Set the y-axis line width\nax.spines['bottom'].set_linewidth(2)\n\n# Set the x-axis line style\nax.spines['left'].set_linestyle('-')\n\n# Set the y-axis line style\nax.spines['bottom'].set_linestyle('-')\n\n# Set the x-axis line color\nax.spines['left'].set_color('purple')\n\n# Set the y-axis line color\nax.spines['bottom'].set_color('purple')\n\n# Set the x-axis line width\nax.spines['left'].set_linewidth(2)\n\n# Set the y-axis line width\nax.spines['bottom'].set_linewidth(2)\n\n# Set the x-axis line style\nax.spines['left'].set_linestyle('-')\n\n# Set the y-axis line style\nax.spines['bottom'].set_linestyle('-')\n\n# Set the x-axis line color\nax.spines['left'].set_color('orange')\n\n# Set the y-axis line color\nax.spines['bottom'].set_color('orange')\n\n# Set the x-axis line width\nax.spines['left'].set_linewidth(2)\n\n# Set the y-axis line width\nax.spines['bottom'].set_linewidth(2)\n\n# Set the x-axis line style\nax.spines['left'].set_linestyle('-')\n\n# Set the y-axis line style\nax.spines['bottom'].set_linestyle('-')\n\n# Set the x-axis line color\nax.spines['left'].set_color('pink')\n\n# Set the y-axis line color\nax.spines['bottom'].set_color('pink')\n\n# Set the x-axis line width\nax.spines['left'].set_linewidth(2)\n\n# Set the y-axis line width\nax.spines['bottom'].set_linewidth(2)\n\n# Set the x-axis line style\nax.spines['left'].set_linestyle('-')\n\n# Set the y-axis line style\nax.spines['bottom'].set_linestyle('-')\n\n# Set the x-axis line color\nax.spines['left'].set_color('brown')\n\n# Set the y-axis line color\nax.spines['bottom'].set_color('brown')\n\n# Set the x-axis line width\nax.spines['left'].set_linewidth(2)\n\n# Set the y-axis line width\nax.spines['bottom'].set_linewidth(2)\n\n# Set the x-axis line style\nax.spines['left'].set_linestyle('-')\n\n# Set the y-axis line style\nax.spines['bottom'].set_linestyle('-')\n\n# Set the x-axis line color\nax.spines['left'].set_color('cyan')\n\n# Set the y-axis line color\nax.spines['bottom'].set_color('cyan')\n\n# Set the x-axis line width\nax.spines['left'].set_linewidth(2)\n\n# Set the y-axis line width\nax.spines['bottom'].set_linewidth(2)\n\n# Set the x-axis line style\nax.spines['left'].set_linestyle('-')\n\n# Set the y-axis line style\nax.spines['bottom'].set_linestyle('-')\n\n# Set the x-axis line color\nax.spines['left'].set_color('magenta')\n\n# Set the y-axis line color\nax.spines['bottom'].set_color('magenta')\n\n# Set the x-axis line width\nax.spines['left'].set_linewidth(2)\n\n# Set the y-axis line width\nax.spines['bottom'].set_linewidth(2)\n\n# Set the x-axis line style\nax.spines['left'].set_linestyle('-')\n\n# Set the y-axis line style\nax.spines['bottom'].set_linestyle('-')\n\n# Set the x-axis line color\nax.spines['left'].set_color('yellow')\n\n# Set the y-axis line color\nax.spines['bottom'].set_color('yellow')\n\n# Set the x-axis line width\nax.spines['left'].set_linewidth(2)\n\n# Set the y-axis line width\nax.spines['bottom'].set_linewidth(2)\n\n# Set the x-axis line style\nax.spines['left'].set_linestyle('-')\n\n# Set the y-axis line style\nax.spines['bottom'].set_linestyle('-')\n\n# Set the x-axis line color\nax.spines['left'].set_color('black')\n\n# Set the y-axis line color\nax.spines['bottom'].set_color('black')\n\n# Set the x-axis line width\nax.spines['left'].set_linewidth(2)\n\n# Set the y-axis line width\nax.spines['bottom'].set_linewidth(2)\n\n# Set the x-axis line style\nax.spines['left'].set_linestyle('-')\n\n# Set the y-axis line style\nax.spines['bottom'].set_linestyle('-')\n\n# Set the x-axis line color\nax.spines['left'].set_color('white')\n\n# Set the y-axis line color\nax.spines['bottom'].set_color('white')\n\n# Set the x-axis line width\nax.spines['left'].set_linewidth(2)\n\n# Set the y-axis line width\nax.spines['bottom'].set_linewidth(2)\n\n# Set the x-axis line style\nax.spines['left'].set_linestyle('-')\n\n# Set the y-axis line style\nax.spines['bottom'].set_linestyle('-')\n\n# Set the x-axis line color\nax.spines['left'].set_color('gray')\n\n# Set the y-axis line color\nax.spines['bottom'].set_color('gray')\n\n# Set the x-axis line width\nax.spines['left'].set_linewidth(2)\n\n# Set the y-axis line width\nax.spines['bottom'].set_linewidth(2)\n\n# Set the x-axis line style\nax.spines['left'].set_linestyle('-')\n\n# Set the y-axis line style\nax.spines['bottom'].set_linestyle('-')\n\n# Set the x-axis line color\nax.spines['left'].set_color('silver')\n\n# Set the y-axis line color\nax.spines['bottom'].set_color('silver')\n\n# Set the x-axis line width\nax.spines['left'].set_linewidth(2)\n\n# Set the y-axis line width\nax.spines['bottom'].set_linewidth(2)\n\n# Set the x-axis line style\nax.spines['left'].set_linestyle('-')\n\n# Set the y-axis line style\nax.spines['bottom'].set_linestyle('-')\n\n# Set the x-axis line color\nax.spines['left'].set_color('gold')\n\n# Set the y-axis line color\nax.spines['bottom'].set_color('gold')\n\n# Set the x-axis line width\nax.spines['left'].set_linewidth(2)\n\n# Set the y-axis line width\nax.spines['bottom'].set_linewidth(2)\n\n# Set the x-axis line style\nax.spines['left'].set_linestyle('-')\n\n# Set the y-axis line style\nax.spines['bottom'].set_linestyle('-')\n\n# Set the x-axis line color\nax.spines['left'].set_color('brown')\n\n# Set the y-axis line color\nax.spines['bottom'].set_color('brown')\n\n# Set the x-axis line width\nax.spines['left'].set_linewidth(2)\n\n# Set the y-axis line width\nax.spines['bottom'].set_linewidth(2)\n\n# Set the x-axis line style\nax.spines['left'].set_linestyle('-')\n\n# Set the y-axis line style\nax.spines['bottom'].set_linestyle('-')\n\n# Set the x-axis line color\nax.spines['left'].set_color('cyan')\n\n# Set the y-axis line color\nax.spines['bottom'].set_color('cyan')\n\n# Set the x-axis line width\nax.spines['left'].set_linewidth(2)\n\n# Set the y-axis line width\nax.spines['bottom'].set_linewidth(2)\n\n# Set the x-axis line style\nax.spines['left'].set_linestyle('-')\n\n# Set the y-axis line style\nax.spines['bottom'].set_linestyle('-')\n\n# Set the x-axis line color\nax.spines['left'].set_color('magenta')\n\n# Set the y-axis line color\nax.spines['bottom'].set_color('magenta')\n\n# Set the x-axis line width\nax.spines['left'].set_linewidth(2)\n\n# Set the y-axis line width\nax.spines['bottom'].set_linewidth(2)\n\n# Set the x-axis line style\nax.spines['left'].set_linestyle('-')\n\n# Set the y-axis line style\nax.spines['bottom'].set_linestyle('-')\n\n# Set the x-axis line color\nax.spines['left'].set_color('yellow')\n\n# Set the y-axis line color\nax.spines['bottom'].set_color('yellow')\n\n# Set the x-axis line width\nax.spines['left'].set_linewidth(2)\n\n# Set the y-axis line width\nax.spines['bottom'].set_linewidth(2)\n\n# Set the x-axis line style\nax.spines['left'].set_linestyle('-')\n\n# Set the y-axis line style\nax.spines['bottom'].set_linestyle('-')\n\n# Set the x-axis line color\nax.spines['left'].set_color('black')\n\n# Set the y-axis line color\nax.spines['bottom'].set_color('black')\n\n# Set the x-axis line width\nax.spines['left'].set_linewidth(2)\n\n# Set the y-axis line width\nax.spines['bottom'].set_linewidth(2)\n\n# Set the x-axis line style\nax.spines['left'].set_linestyle('-')\n\n# Set the y-axis line style\nax.spines['bottom'].set_linestyle('-')\n\n# Set the x-axis line color\nax.spines['left'].set_color('white')\n\n# Set the y-axis line color\nax.spines['bottom'].set_color('white')\n\n# Set the x-axis line width\nax.spines['left'].set_linewidth(2)\n\n# Set the y-axis line width\nax.spines['bottom'].set_linewidth(2)\n\n# Set the x-axis line style\nax.spines['left'].set_linestyle('-')\n\n# Set the y-axis line style\nax.spines['bottom'].set_linestyle('-')\n\n# Set the x-axis line color\nax.spines['left'].set_color('gray')\n\n# Set the y-axis line color\nax.spines['bottom'].set_color('gray')\n\n# Set the x-axis line width\nax.spines['left'].set_linewidth(2)\n\n# Set the y-axis line width\nax.spines['bottom'].set_linewidth(2)\n\n# Set the x-axis line style\nax.spines['left'].set_linestyle('-')\n\n# Set the y-axis line style\nax.spines['bottom'].set_linestyle('-')\n\n# Set the x-axis line color\nax.spines['left'].set_color('silver')\n\n# Set the y-axis line color\nax.spines['bottom'].set_color('silver')\n\n# Set the x-axis line width\nax.spines['left'].set_linewidth(2)\n\n# Set the y-axis line width\nax.spines['bottom'].set_linewidth(2)\n\n# Set the x-axis line style\nax.spines['left'].set_linestyle('-')\n\n# Set the y-axis line style\nax.spines['bottom'].set_linestyle('-')\n\n# Set the x-axis line color\nax.spines['left'].set_color('gold')\n\n# Set the y-axis line color\nax.spines['bottom'].set_color('gold')\n\n# Set the x-axis line width\nax.spines['left'].set_linewidth(2)\n\n# Set the y-axis line width\nax.spines['bottom'].set_linewidth(2)\n\n# Set the x-axis line style\nax.spines['left'].set_linestyle('-')\n\n# Set the y-axis line style\nax.spines['bottom'].set_linestyle('-')\n\n# Set the x-axis line color\nax.spines['left'].set_color('brown')\n\n# Set the y-axis line color\nax.spines['bottom'].set_color('brown')\n\n# Set the x-axis line width\nax.spines['left'].set_linewidth(2)\n\n# Set the y-axis line width\nax.spines['bottom'].set_linewidth(2)\n\n# Set the x-axis line style\nax.spines['left'].set_linestyle('-')\n\n# Set the y-axis line style\nax.spines['bottom'].set_linestyle('-')\n\n# Set the x-axis line color\nax.spines['left'].set_color('cyan')\n\n# Set the y-axis line color\nax.spines['bottom'].set_color('cyan')\n\n# Set the x-axis line width\nax.spines['left'].set_linewidth(2)\n\n# Set the y-axis line width\nax.spines['bottom'].set_linewidth(2)\n\n# Set the x-axis line style\nax.spines['left'].set_linestyle('-')\n\n# Set the y-axis line style\nax.spines['bottom'].set_linestyle('-')\n\n# Set the x-axis line color\nax.spines['left'].set_color('magenta')\n\n# Set the y-axis line color\nax.spines['bottom'].set_color('magenta')\n\n# Set the x-axis line width\nax.spines['left'].set_linewidth(2)\n\n# Set the y-axis line width\nax.spines['bottom'].set_linewidth(2)\n\n# Set the x-axis line style\nax.spines['left'].set_linestyle('-')\n\n# Set the y-axis line style\nax.spines['bottom'].set_linestyle('-')\n\n# Set the x-axis line color\nax.spines['left'].set_color('yellow')\n\n# Set the y-axis line color\nax.spines['bottom'].set_color('yellow')\n\n# Set the x-axis line width\nax.spines['left'].set_linewidth(2)\n\n# Set the y-axis line width\nax.spines['bottom'].set_linewidth(2)\n\n# Set the x-axis line style\nax.spines['left'].set_linestyle('-')\n\n# Set the y-axis line style\nax.spines['bottom'].set_linestyle('-')\n\n# Set the x-axis line color\nax.spines['left'].set_color('black')\n\n# Set the y-axis line color\nax.spines['bottom'].set_color('black')\n\n# Set the x-axis line width\nax.spines['left'].set_linewidth(2)\n\n# Set the y-axis line width\nax.spines['bottom'].set_linewidth(2)\n\n# Set the x-axis line style\nax.spines['left'].set_linestyle('-')\n\n# Set the y-axis line style\nax.spines['bottom'].set_linestyle('-')\n\n# Set the x-axis line color\nax.spines['left'].set_color('white')\n\n# Set the y-axis line color\nax.spines['bottom'].set_color('white')\n\n# Set the x-axis line width\nax.spines['left'].set_linewidth(2)\n\n# Set the y-axis line width\nax.spines['bottom'].set_linewidth(2)\n\n# Set the x-axis line style\nax.spines['left'].set_linestyle('-')\n\n# Set the y-axis line style\nax.spines['bottom'].set_linestyle('-')\n\n# Set the x-axis line color\nax.spines['left'].set_color('gray')\n\n# Set the y-axis line color\nax.spines['bottom'].set_color('gray')\n\n# Set the x-axis line width\nax.spines['left'].set_linewidth(2)\n\n# Set the y-axis line width\nax.spines['bottom'].set_linewidth(2)\n\n# Set the x-axis line style\nax.spines['left'].set_linestyle('-')\n\n# Set the y-axis line style\nax.spines['bottom'].set_linestyle('-')\n\n# Set the x-axis line color\nax.spines['left'].set_color('silver')\n\n# Set the y-axis line color\nax.spines['bottom'].set_color('silver')\n\n# Set the x-axis line width\nax.spines['left'].set_linewidth(2)\n\n# Set the y-axis line width\nax.spines['bottom'].set_linewidth(2)\n\n# Set the x-axis line style\nax.spines['left'].set_linestyle('-')\n\n# Set the y-axis line style\nax.spines['bottom'].set_linestyle('-')\n\n# Set the x-axis line color\nax.spines['left'].set_color('gold')\n\n# Set the y-axis line color\nax.spines['bottom'].set_color('gold')\n\n# Set the x-axis line width\nax.spines['left'].set_linewidth(2)\n\n# Set the y-axis line width\nax.spines['bottom'].set_linewidth(2)\n\n# Set the x-axis line style\nax.spines['left'].set_linestyle('-')\n\n# Set the y"}
{"file": "dataset/ori_500/box_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Set the title of the plot\nax.set_title('Modality Performance')\n\n# Set the x-axis label\nax.set_xlabel('Modality')\n\n# Set the y-axis label\nax.set_ylabel('AUC')\n\n# Define the modality names\nmodality_names = ['Only WSI Modality', 'Only CNV Modality', 'WSI+CNV Modality']\n\n# Define the AUC values for each modality\nauc_values = [0.92, 0.88, 0.95]\n\n# Define the colors for each modality\ncolors = ['blue', 'green', 'pink']\n\n# Define the shapes for each modality\nshapes = ['rectangle', 'rectangle', 'rectangle']\n\n# Define the sizes for each modality\nsizes = [0.1, 0.1, 0.1]\n\n# Plot the data\nfor i, modality in enumerate(modality_names):\n    ax.bar(modality, auc_values[i], color=colors[i], edgecolor='black')\n    ax.text(i, auc_values[i] + 0.01, modality, ha='center', va='bottom')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/box_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Set the title of the plot\nax.set_title('0.25 HIAR')\n\n# Draw a rectangle with a specific color\nrectangle = plt.Rectangle((0.1, 0.1), 0.8, 0.8, fc='orange')\nax.add_patch(rectangle)\n\n# Draw a circle with a specific color\ncircle = plt.Circle((0.5, 0.5), 0.1, fc='blue')\nax.add_patch(circle)\n\n# Set the x and y limits\nax.set_xlim(0, 1)\nax.set_ylim(0, 1)\n\n# Set the x and y labels\nax.set_xlabel('PSNR (dB)')\nax.set_ylabel('SNR (dB)')\n\n# Set the x and y ticks\nax.set_xticks([0.25, 0.5, 0.75])\nax.set_yticks([0.25, 0.5, 0.75])\n\n# Set the x and y tick labels\nax.set_xticklabels(['Vanilla DIP', 'SGLD DIP', 'Ours'])\nax.set_yticklabels(['Vanilla DIP', 'SGLD DIP', 'Ours'])\n\n# Set the grid\nax.grid(True)\n\n# Create a second subplot\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Set the title of the plot\nax.set_title('0.1 HIAR')\n\n# Draw a rectangle with a specific color\nrectangle = plt.Rectangle((0.1, 0.1), 0.8, 0.8, fc='orange')\nax.add_patch(rectangle)\n\n# Draw a circle with a specific color\ncircle = plt.Circle((0.5, 0.5), 0.1, fc='blue')\nax.add_patch(circle)\n\n# Set the x and y limits\nax.set_xlim(0, 1)\nax.set_ylim(0, 1)\n\n# Set the x and y labels\nax.set_xlabel('PSNR (dB)')\nax.set_ylabel('SNR (dB)')\n\n# Set the x and y ticks\nax.set_xticks([0.25, 0.5, 0.75])\nax.set_yticks([0.25, 0.5, 0.75])\n\n# Set the x and y tick labels\nax.set_xticklabels(['Vanilla DIP', 'SGLD DIP', 'Ours'])\nax.set_yticklabels(['Vanilla DIP', 'SGLD DIP', 'Ours'])\n\n# Set the grid\nax.grid(True)\n```"}
{"file": "dataset/ori_500/contour_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Set the title of the plot\nax.set_title('T-SNE plot for the output variable Y3')\n\n# Define the colors for the plots\ncolors = ['blue', 'red']\n\n# Create a scatter plot with the specified colors\nscatter = ax.scatter([0, 1], [0, 0], c=colors)\n\n# Add a legend to the plot\nax.legend(*scatter.legend_elements(), title=\"Classes\")\n\n# Set the x-axis limits\nax.set_xlim(-80, 80)\n\n# Set the y-axis limits\nax.set_ylim(-80, 80)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/contour_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the background color of the plot\nax.set_facecolor('darkgreen')\n\n# Set the title of the plot\nax.set_title(r'$\\lambda(x, z)$')\n\n# Set the x and y limits\nax.set_xlim(0, 10)\nax.set_ylim(0, 10)\n\n# Create a grid of points\nx = np.linspace(0, 10, 100)\ny = np.linspace(0, 10, 100)\nX, Y = np.meshgrid(x, y)\n\n# Calculate the values of the function\nZ = np.sin(X) * np.cos(Y)\n\n# Plot the function\nc = ax.contourf(X, Y, Z, cmap='viridis')\n\n# Add a colorbar\nfig.colorbar(c, ax=ax)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/contour_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Set the background color of the plot area\nax.set_facecolor('lightgray')\n\n# Set the grid lines\nax.grid(True)\n\n# Set the x-axis limits\nax.set_xlim(50, 160)\n\n# Set the y-axis limits\nax.set_ylim(50, 100)\n\n# Set the x-axis label\nax.set_xlabel('SBP (mmHg)')\n\n# Set the y-axis label\nax.set_ylabel('DBP (mmHg)')\n\n# Set the title\nax.set_title('Blood Pressure Data')\n\n# Plot the data\nax.plot([100, 110, 120, 130, 140, 150, 160], [90, 90, 90, 90, 90, 90, 90], 'b-')\nax.plot([100, 110, 120, 130, 140, 150, 160], [80, 80, 80, 80, 80, 80, 80], 'r-')\nax.plot([100, 110, 120, 130, 140, 150, 160], [70, 70, 70, 70, 70, 70, 70], 'b-')\nax.plot([100, 110, 120, 130, 140, 150, 160], [60, 60, 60, 60, 60, 60, 60], 'r-')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/contour_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Define the data\nx = np.linspace(-4, 4, 100)\ny = np.sin(x)\n\n# Plot the data\nax.plot(x, y, 'b-')\n\n# Set the title and labels\nax.set_title('Sine Wave')\nax.set_xlabel('X-axis')\nax.set_ylabel('Y-axis')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/contour_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Define the colors for each circle\ncolors = ['red', 'orange', 'yellow', 'green', 'blue', 'indigo', 'violet']\n\n# Draw concentric circles\nfor i, color in enumerate(colors):\n    circle = plt.Circle((5, 5), 10 - i * 2, color=color)\n    ax.add_artist(circle)\n\n# Set the limits of the plot\nax.set_xlim(0, 10)\nax.set_ylim(0, 10)\n\n# Set the aspect ratio to be equal\nax.set_aspect('equal')\n\n# Remove the axes\nax.axis('off')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/density_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 3))\n\n# Define the data\nx = np.linspace(8, 15, 100)\ny = np.sin(x)\n\n# Plot the data\nax.plot(x, y, color='blue')\n\n# Set the limits of the x-axis\nax.set_xlim(8, 15)\n\n# Set the title and labels\nax.set_title('Sine Wave')\nax.set_xlabel('Time')\nax.set_ylabel('Amplitude')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/density_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 4.0))\n\n# Define the data for the plot\nx = np.linspace(0, 10, 100)\ny = np.sin(x)\n\n# Plot the data\nax.plot(x, y, color='pink')\n\n# Set the title and labels\nax.set_title('Sine Wave')\nax.set_xlabel('Time (s)')\nax.set_ylabel('Amplitude')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/density_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 4.0))\n\n# Define the data\nx = np.linspace(-1.0, 1.0, 100)\ny = np.sin(x * np.pi / 2)\n\n# Plot the data\nax.plot(x, y, color='blue')\n\n# Set the title\nax.set_title('KDE Plot of Spearman Coefficient Distribution')\n\n# Set the x-axis label\nax.set_xlabel('Spearman Coefficient')\n\n# Set the y-axis label\nax.set_ylabel('Density')\n\n# Set the limits of the x-axis\nax.set_xlim(-1.0, 1.0)\n\n# Set the limits of the y-axis\nax.set_ylim(0.0, 1.0)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/density_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(9.0, 6.0))\n\n# Set the background color of the plot\nax.set_facecolor('lightgrey')\n\n# Set the grid lines\nax.grid(True)\n\n# Set the x-axis limits\nax.set_xlim(7, 15)\n\n# Set the y-axis limits\nax.set_ylim(0, 0.7)\n\n# Set the x-axis ticks\nax.set_xticks(np.arange(7, 16, 1))\n\n# Set the y-axis ticks\nax.set_yticks(np.arange(0, 0.8, 0.1))\n\n# Set the x-axis label\nax.set_xlabel('p')\n\n# Set the y-axis label\nax.set_ylabel('Shape Density')\n\n# Set the title\nax.set_title('Shape Density vs p')\n\n# Plot the data\nax.plot([7, 8, 9, 10, 11, 12, 13, 14, 15], [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9], 'b-')\nax.plot([7, 8, 9, 10, 11, 12, 13, 14, 15], [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9], 'r-')\nax.plot([7, 8, 9, 10, 11, 12, 13, 14, 15], [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9], 'g-')\nax.plot([7, 8, 9, 10, 11, 12, 13, 14, 15], [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9], 'y-')\nax.plot([7, 8, 9, 10, 11, 12, 13, 14, 15], [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9], 'c-')\nax.plot([7, 8, 9, 10, 11, 12, 13, 14, 15], [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9], 'm-')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/density_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(9.0, 6.0))\n\n# Set the background color of the plot\nax.set_facecolor('lightgrey')\n\n# Set the grid lines\nax.grid(True)\n\n# Set the x-axis and y-axis limits\nax.set_xlim(0, 1)\nax.set_ylim(0, 14)\n\n# Set the x-axis and y-axis labels\nax.set_xlabel('Density')\nax.set_ylabel('Value')\n\n# Set the title of the plot\nax.set_title('Product Value Distribution')\n\n# Plot the data\nax.plot([0, 0.5], [12, 14], 'g-')\nax.plot([0.1, 0.3], [10, 12], 'b-')\nax.plot([0.2, 0.4], [8, 10], 'r-')\nax.plot([0.3, 0.5], [6, 8], 'c-')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the bar chart\nbrands = ['Deep Ens.', 'Dropout', 'Laplace', 'SNPG', 'HET-XL', 'Baseline', 'Gap', 'Shallow Ens.', 'DUQ', 'Corr. Pred.']\nlog_probabilities = [-0.500, -0.394, -0.443, -0.531, -0.539, -0.541, -0.543, -0.552, -0.590, -0.819]\ndistributions = ['Distributional', 'Deterministic']\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Create a bar chart with the log probabilities\nax.bar(brands, log_probabilities, color='green')\n\n# Add a horizontal line at y=0\nax.axhline(y=0, color='black', linestyle='-')\n\n# Set the title of the plot\nax.set_title('Log Probability of Brands')\n\n# Set the x-axis label\nax.set_xlabel('Brands')\n\n# Set the y-axis label\nax.set_ylabel('Log Probability')\n\n# Set the y-axis limits\nax.set_ylim(-1.75, 0.25)\n\n# Set the x-axis limits\nax.set_xlim(-0.5, len(brands)-0.5)\n\n# Set the tick labels for the x-axis\nax.set_xticks(range(len(brands)))\nax.set_xticklabels(brands, rotation=90)\n\n# Set the tick labels for the y-axis\nax.set_yticks([-1.75, -1.5, -1.25, -1.0, -0.75, -0.5, -0.25, 0])\n\n# Set the color of the tick labels\nax.tick_params(axis='y', colors='red')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='y', colors='green')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', colors='orange')\n\n# Set the color of the tick labels\nax.tick_params(axis='y', colors='red')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='y', colors='green')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', colors='orange')\n\n# Set the color of the tick labels\nax.tick_params(axis='y', colors='red')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='y', colors='green')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', colors='orange')\n\n# Set the color of the tick labels\nax.tick_params(axis='y', colors='red')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='y', colors='green')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', colors='orange')\n\n# Set the color of the tick labels\nax.tick_params(axis='y', colors='red')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='y', colors='green')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', colors='orange')\n\n# Set the color of the tick labels\nax.tick_params(axis='y', colors='red')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='y', colors='green')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', colors='orange')\n\n# Set the color of the tick labels\nax.tick_params(axis='y', colors='red')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='y', colors='green')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', colors='orange')\n\n# Set the color of the tick labels\nax.tick_params(axis='y', colors='red')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='y', colors='green')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', colors='orange')\n\n# Set the color of the tick labels\nax.tick_params(axis='y', colors='red')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='y', colors='green')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', colors='orange')\n\n# Set the color of the tick labels\nax.tick_params(axis='y', colors='red')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='y', colors='green')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', colors='orange')\n\n# Set the color of the tick labels\nax.tick_params(axis='y', colors='red')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='y', colors='green')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', colors='orange')\n\n# Set the color of the tick labels\nax.tick_params(axis='y', colors='red')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='y', colors='green')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', colors='orange')\n\n# Set the color of the tick labels\nax.tick_params(axis='y', colors='red')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='y', colors='green')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', colors='orange')\n\n# Set the color of the tick labels\nax.tick_params(axis='y', colors='red')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='y', colors='green')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', colors='orange')\n\n# Set the color of the tick labels\nax.tick_params(axis='y', colors='red')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='y', colors='green')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', colors='orange')\n\n# Set the color of the tick labels\nax.tick_params(axis='y', colors='red')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='y', colors='green')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', colors='orange')\n\n# Set the color of the tick labels\nax.tick_params(axis='y', colors='red')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='y', colors='green')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', colors='orange')\n\n# Set the color of the tick labels\nax.tick_params(axis='y', colors='red')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='y', colors='green')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', colors='orange')\n\n# Set the color of the tick labels\nax.tick_params(axis='y', colors='red')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='y', colors='green')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', colors='orange')\n\n# Set the color of the tick labels\nax.tick_params(axis='y', colors='red')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='y', colors='green')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', colors='orange')\n\n# Set the color of the tick labels\nax.tick_params(axis='y', colors='red')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='y', colors='green')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', colors='orange')\n\n# Set the color of the tick labels\nax.tick_params(axis='y', colors='red')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='y', colors='green')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', colors='orange')\n\n# Set the color of the tick labels\nax.tick_params(axis='y', colors='red')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='y', colors='green')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', colors='orange')\n\n# Set the color of the tick labels\nax.tick_params(axis='y', colors='red')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='y', colors='green')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', colors='orange')\n\n# Set the color of the tick labels\nax.tick_params(axis='y', colors='red')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='y', colors='green')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', colors='orange')\n\n# Set the color of the tick labels\nax.tick_params(axis='y', colors='red')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='y', colors='green')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', colors='orange')\n\n# Set the color of the tick labels\nax.tick_params(axis='y', colors='red')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='y', colors='green')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', colors='orange')\n\n# Set the color of the tick labels\nax.tick_params(axis='y', colors='red')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='y', colors='green')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', colors='orange')\n\n# Set the color of the tick labels\nax.tick_params(axis='y', colors='red')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='y', colors='green')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', colors='orange')\n\n# Set the color of the tick labels\nax.tick_params(axis='y', colors='red')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='y', colors='green')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', colors='orange')\n\n# Set the color of the tick labels\nax.tick_params(axis='y', colors='red')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='y', colors='green')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', colors='orange')\n\n# Set the color of the tick labels\nax.tick_params(axis='y', colors='red')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='y', colors='green')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', colors='orange')\n\n# Set the color of the tick labels\nax.tick_params(axis='y', colors='red')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='y', colors='green')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', colors='orange')\n\n# Set the color of the tick labels\nax.tick_params(axis='y', colors='red')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='y', colors='green')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', colors='orange')\n\n# Set the color of the tick labels\nax.tick_params(axis='y', colors='red')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='y', colors='green')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', colors='orange')\n\n# Set the color of the tick labels\nax.tick_params(axis='y', colors='red')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='y', colors='green')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', colors='orange')\n\n# Set the color of the tick labels\nax.tick_params(axis='y', colors='red')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='y', colors='green')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', colors='orange')\n\n# Set the color of the tick labels\nax.tick_params(axis='y', colors='red')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='y', colors='green')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', colors='orange')\n\n# Set the color of the tick labels\nax.tick_params(axis='y', colors='red')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='y', colors='green')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', colors='orange')\n\n# Set the color of the tick labels\nax.tick_params(axis='y', colors='red')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='y', colors='green')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', colors='orange')\n\n# Set the color of the tick labels\nax.tick_params(axis='y', colors='red')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='y', colors='green')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', colors='orange')\n\n# Set the color of the tick labels\nax.tick_params(axis='y', colors='red')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='y', colors='green')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', colors='orange')\n\n# Set the color of the tick labels\nax.tick_params(axis='y', colors='red')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='y', colors='green')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', colors='orange')\n\n# Set the color of the tick labels\nax.tick_params(axis='y', colors='red')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='y', colors='green')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', colors='orange')\n\n# Set the color of the tick labels\nax.tick_params(axis='y', colors='red')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='y', colors='green')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', colors='orange')\n\n# Set the color of the tick labels\nax.tick_params(axis='y', colors='red')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='y', colors='green')\n\n# Set the color of the tick labels\nax.tick_params(axis='x', colors='orange')\n\n# Set the color of the tick labels\nax.tick_params(axis='y"}
{"file": "dataset/ori_500/errorbar_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Expert dimension')\n\n# Define the data for the plot\nx = [1, 2, 3, 4, 5]\ny = [5, 6, 7, 8, 9]\n\n# Plot the data\nax.plot(x, y)\n\n# Set the x-axis label\nax.set_xlabel('Number of experts')\n\n# Set the y-axis label\nax.set_ylabel('IQM Human normalized score')\n\n# Set the color of the line\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the top and right spines to be invisible\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the left spine\nax.spines['left'].set_color('blue')\n\n# Set the tick parameters\nax.tick_params(axis='both', which='major', labelsize=10)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nhospitals = ['Hospital 1', 'Hospital 2', 'Hospital 3']\naccuracies = [0.748, 0.762, 0.709]\nbaseline_1 = [0.715, 0.762, 0.687]\nbaseline_2 = [0.759, 0.748, 0.713]\nfedmm = [0.78, 0.78, 0.713]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Plot the bars\nax.bar(hospitals, accuracies, color='blue')\nax.bar(hospitals, baseline_1, bottom=accuracies, color='cyan')\nax.bar(hospitals, baseline_2, bottom=[a + b for a, b in zip(accuracies, baseline_1)], color='orange')\nax.bar(hospitals, fedmm, bottom=[a + b + c for a, b, c in zip(accuracies, baseline_1, baseline_2)], color='green')\n\n# Add lines\nfor i, hospital in enumerate(hospitals):\n    ax.plot([hospital, hospital], [0.5, accuracies[i]], color='black')\n    ax.plot([hospital, hospital], [accuracies[i], baseline_1[i]], color='black')\n    ax.plot([hospital, hospital], [baseline_1[i], baseline_2[i]], color='black')\n    ax.plot([hospital, hospital], [baseline_2[i], fedmm[i]], color='black')\n\n# Set the title and labels\nax.set_title('Accuracy by hospital and method')\nax.set_xlabel('Hospitals')\nax.set_ylabel('Accuracy')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Set the background color of the plot\nax.set_facecolor('#F2F2F2')\n\n# Set the title of the plot\nax.set_title('GPT-4 Buyer (valuation 40)')\n\n# Set the x-axis label\nax.set_xlabel('Time')\n\n# Set the y-axis label\nax.set_ylabel('Price')\n\n# Set the x-axis limits\nax.set_xlim(-10, 10)\n\n# Set the y-axis limits\nax.set_ylim(-30, 30)\n\n# Set the x-axis ticks\nax.set_xticks(np.arange(-10, 11, 1))\n\n# Set the y-axis ticks\nax.set_yticks(np.arange(-30, 31, 10))\n\n# Set the x-axis grid\nax.grid(True)\n\n# Set the y-axis grid\nax.grid(True)\n\n# Set the x-axis tick labels\nax.set_xticklabels(['-10', '-9', '-8', '-7', '-6', '-5', '-4', '-3', '-2', '-1', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10'])\n\n# Set the y-axis tick labels\nax.set_yticklabels(['-30', '-20', '-10', '0', '10', '20', '30'])\n\n# Set the x-axis tick parameters\nax.tick_params(axis='x', colors='black')\n\n# Set the y-axis tick parameters\nax.tick_params(axis='y', colors='black')\n\n# Set the x-axis tick label rotation\nax.tick_params(axis='x', rotation=45)\n\n# Set the y-axis tick label rotation\nax.tick_params(axis='y', rotation=45)\n\n# Set the x-axis tick label color\nax.tick_params(axis='x', labelcolor='black')\n\n# Set the y-axis tick label color\nax.tick_params(axis='y', labelcolor='black')\n\n# Set the x-axis tick label font size\nax.tick_params(axis='x', labelsize=10)\n\n# Set the y-axis tick label font size\nax.tick_params(axis='y', labelsize=10)\n\n# Set the x-axis tick label font weight\nax.tick_params(axis='x', labelweight='bold')\n\n# Set the y-axis tick label font weight\nax.tick_params(axis='y', labelweight='bold')\n\n# Set the x-axis tick label font style\nax.tick_params(axis='x', labelstyle='italic')\n\n# Set the y-axis tick label font style\nax.tick_params(axis='y', labelstyle='italic')\n\n# Set the x-axis tick label font family\nax.tick_params(axis='x', labelfamily='serif')\n\n# Set the y-axis tick label font family\nax.tick_params(axis='y', labelfamily='sans-serif')\n\n# Set the x-axis tick label font variant\nax.tick_params(axis='x', labelvariant='small-caps')\n\n# Set the y-axis tick label font variant\nax.tick_params(axis='y', labelvariant='normal')\n\n# Set the x-axis tick label font stretch\nax.tick_params(axis='x', labelstretch='ultra-condensed')\n\n# Set the y-axis tick label font stretch\nax.tick_params(axis='y', labelstretch='condensed')\n\n# Set the x-axis tick label font size\nax.tick_params(axis='x', labelsize=10)\n\n# Set the y-axis tick label font size\nax.tick_params(axis='y', labelsize=10)\n\n# Set the x-axis tick label font weight\nax.tick_params(axis='x', labelweight='bold')\n\n# Set the y-axis tick label font weight\nax.tick_params(axis='y', labelweight='bold')\n\n# Set the x-axis tick label font style\nax.tick_params(axis='x', labelstyle='italic')\n\n# Set the y-axis tick label font style\nax.tick_params(axis='y', labelstyle='italic')\n\n# Set the x-axis tick label font family\nax.tick_params(axis='x', labelfamily='serif')\n\n# Set the y-axis tick label font family\nax.tick_params(axis='y', labelfamily='sans-serif')\n\n# Set the x-axis tick label font variant\nax.tick_params(axis='x', labelvariant='small-caps')\n\n# Set the y-axis tick label font variant\nax.tick_params(axis='y', labelvariant='normal')\n\n# Set the x-axis tick label font stretch\nax.tick_params(axis='x', labelstretch='ultra-condensed')\n\n# Set the y-axis tick label font stretch\nax.tick_params(axis='y', labelstretch='condensed')\n\n# Set the x-axis tick label font size\nax.tick_params(axis='x', labelsize=10)\n\n# Set the y-axis tick label font size\nax.tick_params(axis='y', labelsize=10)\n\n# Set the x-axis tick label font weight\nax.tick_params(axis='x', labelweight='bold')\n\n# Set the y-axis tick label font weight\nax.tick_params(axis='y', labelweight='bold')\n\n# Set the x-axis tick label font style\nax.tick_params(axis='x', labelstyle='italic')\n\n# Set the y-axis tick label font style\nax.tick_params(axis='y', labelstyle='italic')\n\n# Set the x-axis tick label font family\nax.tick_params(axis='x', labelfamily='serif')\n\n# Set the y-axis tick label font family\nax.tick_params(axis='y', labelfamily='sans-serif')\n\n# Set the x-axis tick label font variant\nax.tick_params(axis='x', labelvariant='small-caps')\n\n# Set the y-axis tick label font variant\nax.tick_params(axis='y', labelvariant='normal')\n\n# Set the x-axis tick label font stretch\nax.tick_params(axis='x', labelstretch='ultra-condensed')\n\n# Set the y-axis tick label font stretch\nax.tick_params(axis='y', labelstretch='condensed')\n\n# Set the x-axis tick label font size\nax.tick_params(axis='x', labelsize=10)\n\n# Set the y-axis tick label font size\nax.tick_params(axis='y', labelsize=10)\n\n# Set the x-axis tick label font weight\nax.tick_params(axis='x', labelweight='bold')\n\n# Set the y-axis tick label font weight\nax.tick_params(axis='y', labelweight='bold')\n\n# Set the x-axis tick label font style\nax.tick_params(axis='x', labelstyle='italic')\n\n# Set the y-axis tick label font style\nax.tick_params(axis='y', labelstyle='italic')\n\n# Set the x-axis tick label font family\nax.tick_params(axis='x', labelfamily='serif')\n\n# Set the y-axis tick label font family\nax.tick_params(axis='y', labelfamily='sans-serif')\n\n# Set the x-axis tick label font variant\nax.tick_params(axis='x', labelvariant='small-caps')\n\n# Set the y-axis tick label font variant\nax.tick_params(axis='y', labelvariant='normal')\n\n# Set the x-axis tick label font stretch\nax.tick_params(axis='x', labelstretch='ultra-condensed')\n\n# Set the y-axis tick label font stretch\nax.tick_params(axis='y', labelstretch='condensed')\n\n# Set the x-axis tick label font size\nax.tick_params(axis='x', labelsize=10)\n\n# Set the y-axis tick label font size\nax.tick_params(axis='y', labelsize=10)\n\n# Set the x-axis tick label font weight\nax.tick_params(axis='x', labelweight='bold')\n\n# Set the y-axis tick label font weight\nax.tick_params(axis='y', labelweight='bold')\n\n# Set the x-axis tick label font style\nax.tick_params(axis='x', labelstyle='italic')\n\n# Set the y-axis tick label font style\nax.tick_params(axis='y', labelstyle='italic')\n\n# Set the x-axis tick label font family\nax.tick_params(axis='x', labelfamily='serif')\n\n# Set the y-axis tick label font family\nax.tick_params(axis='y', labelfamily='sans-serif')\n\n# Set the x-axis tick label font variant\nax.tick_params(axis='x', labelvariant='small-caps')\n\n# Set the y-axis tick label font variant\nax.tick_params(axis='y', labelvariant='normal')\n\n# Set the x-axis tick label font stretch\nax.tick_params(axis='x', labelstretch='ultra-condensed')\n\n# Set the y-axis tick label font stretch\nax.tick_params(axis='y', labelstretch='condensed')\n\n# Set the x-axis tick label font size\nax.tick_params(axis='x', labelsize=10)\n\n# Set the y-axis tick label font size\nax.tick_params(axis='y', labelsize=10)\n\n# Set the x-axis tick label font weight\nax.tick_params(axis='x', labelweight='bold')\n\n# Set the y-axis tick label font weight\nax.tick_params(axis='y', labelweight='bold')\n\n# Set the x-axis tick label font style\nax.tick_params(axis='x', labelstyle='italic')\n\n# Set the y-axis tick label font style\nax.tick_params(axis='y', labelstyle='italic')\n\n# Set the x-axis tick label font family\nax.tick_params(axis='x', labelfamily='serif')\n\n# Set the y-axis tick label font family\nax.tick_params(axis='y', labelfamily='sans-serif')\n\n# Set the x-axis tick label font variant\nax.tick_params(axis='x', labelvariant='small-caps')\n\n# Set the y-axis tick label font variant\nax.tick_params(axis='y', labelvariant='normal')\n\n# Set the x-axis tick label font stretch\nax.tick_params(axis='x', labelstretch='ultra-condensed')\n\n# Set the y-axis tick label font stretch\nax.tick_params(axis='y', labelstretch='condensed')\n\n# Set the x-axis tick label font size\nax.tick_params(axis='x', labelsize=10)\n\n# Set the y-axis tick label font size\nax.tick_params(axis='y', labelsize=10)\n\n# Set the x-axis tick label font weight\nax.tick_params(axis='x', labelweight='bold')\n\n# Set the y-axis tick label font weight\nax.tick_params(axis='y', labelweight='bold')\n\n# Set the x-axis tick label font style\nax.tick_params(axis='x', labelstyle='italic')\n\n# Set the y-axis tick label font style\nax.tick_params(axis='y', labelstyle='italic')\n\n# Set the x-axis tick label font family\nax.tick_params(axis='x', labelfamily='serif')\n\n# Set the y-axis tick label font family\nax.tick_params(axis='y', labelfamily='sans-serif')\n\n# Set the x-axis tick label font variant\nax.tick_params(axis='x', labelvariant='small-caps')\n\n# Set the y-axis tick label font variant\nax.tick_params(axis='y', labelvariant='normal')\n\n# Set the x-axis tick label font stretch\nax.tick_params(axis='x', labelstretch='ultra-condensed')\n\n# Set the y-axis tick label font stretch\nax.tick_params(axis='y', labelstretch='condensed')\n\n# Set the x-axis tick label font size\nax.tick_params(axis='x', labelsize=10)\n\n# Set the y-axis tick label font size\nax.tick_params(axis='y', labelsize=10)\n\n# Set the x-axis tick label font weight\nax.tick_params(axis='x', labelweight='bold')\n\n# Set the y-axis tick label font weight\nax.tick_params(axis='y', labelweight='bold')\n\n# Set the x-axis tick label font style\nax.tick_params(axis='x', labelstyle='italic')\n\n# Set the y-axis tick label font style\nax.tick_params(axis='y', labelstyle='italic')\n\n# Set the x-axis tick label font family\nax.tick_params(axis='x', labelfamily='serif')\n\n# Set the y-axis tick label font family\nax.tick_params(axis='y', labelfamily='sans-serif')\n\n# Set the x-axis tick label font variant\nax.tick_params(axis='x', labelvariant='small-caps')\n\n# Set the y-axis tick label font variant\nax.tick_params(axis='y', labelvariant='normal')\n\n# Set the x-axis tick label font stretch\nax.tick_params(axis='x', labelstretch='ultra-condensed')\n\n# Set the y-axis tick label font stretch\nax.tick_params(axis='y', labelstretch='condensed')\n\n# Set the x-axis tick label font size\nax.tick_params(axis='x', labelsize=10)\n\n# Set the y-axis tick label font size\nax.tick_params(axis='y', labelsize=10)\n\n# Set the x-axis tick label font weight\nax.tick_params(axis='x', labelweight='bold')\n\n# Set the y-axis tick label font weight\nax.tick_params(axis='y', labelweight='bold')\n\n# Set the x-axis tick label font style\nax.tick_params(axis='x', labelstyle='italic')\n\n# Set the y-axis tick label font style\nax.tick_params(axis='y', labelstyle='italic')\n\n# Set the x-axis tick label font family\nax.tick_params(axis='x', labelfamily='serif')\n\n# Set the y-axis tick label font family\nax.tick_params(axis='y', labelfamily='sans-serif')\n\n# Set the x-axis tick label font variant\nax.tick_params(axis='x', labelvariant='small-caps')\n\n# Set the y-axis tick label font variant\nax.tick_params(axis='y', labelvariant='normal')\n\n# Set the x-axis tick label font stretch\nax.tick_params(axis='x', labelstretch='ultra-condensed')\n\n# Set the y-axis tick label font stretch\nax.tick_params(axis='y', labelstretch='condensed')\n\n# Set the x-axis tick label font size\nax.tick_params(axis='x', labelsize=10)\n\n# Set the y-axis tick label font size\nax.tick_params(axis='y', labelsize=10)\n\n# Set the x-axis tick label font weight\nax.tick_params(axis='x', labelweight='bold')\n\n# Set the y-axis tick label font weight\nax.tick_params(axis='y', labelweight='bold')\n\n# Set the x-axis tick label font style\nax.tick_params(axis='x', labelstyle='italic')\n\n# Set the y-axis tick label font style\nax.tick_params(axis='y', labelstyle='italic')\n\n# Set the x-axis tick label font family\nax.tick_params(axis='x', labelfamily='serif')\n\n# Set the y-axis tick label font family\nax.tick_params(axis='y', labelfamily='sans-serif')\n\n# Set the x-axis tick label font variant\nax.tick_params(axis='x', labelvariant='small-caps')\n\n# Set the y-axis tick label font variant\nax.tick_params(axis='y', labelvariant='normal')\n\n# Set the x-axis tick label font stretch\nax.tick_params(axis='x', labelstretch='ultra-condensed')\n\n# Set the y-axis tick label font stretch\nax.tick_params(axis='y', labelstretch='condensed')\n\n# Set the x-axis tick label font size\nax.tick_params(axis='x', labelsize=10)\n\n# Set the y-axis tick label font size\nax.tick_params(axis='y', labelsize=10)\n\n# Set the x-axis tick label font weight\nax.tick_params(axis='x', labelweight='bold')\n\n# Set the y-axis tick label font weight\nax.tick_params(axis='y', labelweight='bold')\n\n# Set the x-axis tick label font style\nax.tick_params(axis='x', labelstyle='italic')\n\n# Set the y-axis tick label font style\nax.tick_params(axis='y', labelstyle='italic')\n\n# Set the x-axis tick label font family\nax.tick_params(axis='x', labelfamily='serif')\n\n# Set the y-axis tick label font family\nax.tick_params(axis='y', labelfamily='sans-serif')\n\n# Set the x-axis tick label font variant\nax.tick_params(axis='x', labelvariant='small-caps')\n\n# Set the y-axis tick label font variant\nax.tick_params(axis='y', labelvariant='normal')\n\n# Set the x-axis tick label font stretch\nax.tick_params(axis='x', labelstretch='ultra-condensed')\n\n# Set the y-axis tick label font stretch\nax.tick_params(axis='y', labelstretch='condensed')\n\n# Set the x-axis tick label font size\nax.tick_params(axis='x', labelsize=10)\n\n# Set the y-axis tick label font size\nax.tick_params(axis='y', labelsize=10)\n\n# Set the x-axis tick label font weight\nax.tick_params(axis='x', labelweight='bold')\n\n# Set the y-axis tick label font weight\nax.tick_params(axis='y', labelweight='bold')\n\n# Set the x-axis tick label font style\nax.tick_params(axis='x', labelstyle='italic')\n\n# Set the y-axis tick label font style\nax.tick_params(axis='y', labelstyle='italic')\n\n# Set the x-axis tick label font family\nax.tick_params(axis='x', labelfamily='serif')\n\n# Set the y-axis tick label font family\nax.tick_params(axis='y', labelfamily='sans-serif')\n\n# Set the x-axis tick label font variant\nax.tick_params(axis='x', labelvariant='small-caps')\n\n# Set the y-axis tick label font variant\nax.tick_params(axis='y', labelvariant='normal')\n\n# Set the x-axis tick label font stretch\nax.tick_params(axis='x', labelstretch='ultra-condensed')\n\n# Set the y-axis tick label font stretch\nax.tick_params(axis='y', labelstretch='condensed')\n\n# Set the x-axis tick label font size\nax.tick_params(axis='x', labelsize=10)\n\n# Set the y-axis tick label font size\nax.tick_params(axis='y', labelsize=10)\n\n# Set the x-axis tick label font weight\nax.tick_params(axis='x', labelweight='bold')\n\n# Set the y-axis tick label font weight\nax.tick_params(axis='y', labelweight='bold')\n\n# Set the x-axis tick label font style\nax.tick_params(axis='x', labelstyle='italic')\n\n# Set the y-axis tick label font style\nax.tick_params(axis='y', labelstyle='italic')\n\n# Set the x-axis tick label font family\nax.tick_params(axis='x', labelfamily='serif')\n\n# Set the y-axis tick label font family\nax.tick_params(axis='y', labelfamily='sans-serif')\n\n# Set the x-axis tick label font variant\nax.tick_params(axis='x', labelvariant='small-caps')\n\n# Set the y-axis tick label font variant\nax.tick_params(axis='y', labelvariant='normal')\n\n# Set the x-axis tick label font stretch\nax.tick_params(axis='x', labelstretch='ultra-condensed')\n\n# Set the y-axis tick label font stretch\nax.tick_params(axis='y', labelstretch='condensed')\n\n# Set the x-axis tick label font size\nax.tick_params(axis='x', labelsize=10)\n\n# Set the y-axis tick label font size\nax.tick_params(axis='y', labelsize=10)\n\n# Set the x-axis tick label font weight\nax.tick_params(axis='x', labelweight='bold')\n\n# Set the y-axis tick label font"}
{"file": "dataset/ori_500/errorbar_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\ndata = {\n    \"[m]\": [0.96, 0.95, 0.94, 0.93],\n    \"[\u0394R]\": [0.86, 0.85, 0.84, 0.83],\n    \"[\u0394R^-1]\": [0.78, 0.77, 0.76, 0.75],\n    \"[none]\": [0.70, 0.69, 0.68, 0.67]\n}\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Plot the data\nfor key, values in data.items():\n    ax.plot(values, label=key)\n\n# Set the title and labels\nax.set_title('DNN Performance')\nax.set_xlabel('Epochs')\nax.set_ylabel('Validation Accuracy')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the x-axis limits\nax.set_xlim(0, 10)\n\n# Set the y-axis limits\nax.set_ylim(-0.5, 2.5)\n\n# Set the x-axis ticks\nax.set_xticks([0, 2, 4, 6, 8, 10])\n\n# Set the y-axis ticks\nax.set_yticks([0, 0.5, 1, 1.5, 2])\n\n# Set the x-axis labels\nax.set_xticklabels(['', '', '', '', '', ''])\n\n# Set the y-axis labels\nax.set_yticklabels(['', '', '', '', ''])\n\n# Set the title of the plot\nax.set_title('Posterior Accuracy (\u0394 to no prompting)')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('black')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('black')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the text\nax.set_facecolor('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the text\nax.set_facecolor('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the text\nax.set_facecolor('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the text\nax.set_facecolor('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the text\nax.set_facecolor('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the text\nax.set_facecolor('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the text\nax.set_facecolor('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the text\nax.set_facecolor('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the text\nax.set_facecolor('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the text\nax.set_facecolor('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the text\nax.set_facecolor('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the text\nax.set_facecolor('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the text\nax.set_facecolor('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the text\nax.set_facecolor('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the text\nax.set_facecolor('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the text\nax.set_facecolor('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the text\nax.set_facecolor('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the text\nax.set_facecolor('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the text\nax.set_facecolor('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the text\nax.set_facecolor('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the text\nax.set_facecolor('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the text\nax.set_facecolor('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the text\nax.set_facecolor('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the text\nax.set_facecolor('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the text\nax.set_facecolor('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the text\nax.set_facecolor('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the text\nax.set_facecolor('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the text\nax.set_facecolor('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the text\nax.set_facecolor('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the text\nax.set_facecolor('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the text\nax.set_facecolor('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the text\nax.set_facecolor('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the text\nax.set_facecolor('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the text\nax.set_facecolor('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the text\nax.set_facecolor('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the text\nax.set_facecolor('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the text\nax.set_facecolor('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the text\nax.set_facecolor('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the text\nax.set_facecolor('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the text\nax.set_facecolor('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('white')\n\n# Set the color of the text\nax.set_facecolor('black')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors"}
{"file": "dataset/ori_500/errorbar_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\ndata = {\n    'Performance': [85, 82, 78, 75, 72],\n    'Aug': [90, 88, 86, 84, 82],\n    'T-Estimation': [88, 86, 84, 82, 80],\n    'Qualification': [85, 83, 81, 79, 77],\n    'Diff-Stitch': [82, 80, 78, 76, 74]\n}\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 3))\n\n# Plot the data\nfor i, (key, value) in enumerate(data.items()):\n    ax.plot(value, label=key)\n    ax.text(i, max(value), key, ha='center', va='bottom')\n\n# Set the title and labels\nax.set_title('Performance Metrics')\nax.set_xlabel('Time')\nax.set_ylabel('Performance')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_16.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Set the title of the plot\nax.set_title('FashionMNIST (NEURAL)')\n\n# Set the x-axis label\nax.set_xlabel('Hyperparameters')\n\n# Set the y-axis label\nax.set_ylabel('Metric')\n\n# Define the hyperparameters and metrics\nhyperparameters = ['128/0.5/0.0001', '128/0.1/0.0001', '256/0.1/0.0001', '256/0.3/0.0001', '256/0.5/0.0001', '64/0.1/0.0001', '64/0.3/0.0001', '64/0.5/0.0001']\nmetrics = [0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2]\n\n# Plot the data\nfor i in range(len(hyperparameters)):\n    ax.plot([hyperparameters[i], hyperparameters[i]], [metrics[i], metrics[i]], color='black')\n    ax.text(hyperparameters[i], metrics[i], str(metrics[i]), ha='center', va='bottom')\n\n# Set the x-axis limits\nax.set_xlim(0, 1)\n\n# Set the y-axis limits\nax.set_ylim(0, 1)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_17.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the first graph\ncountries = ['Japan', 'Brazil', 'India', 'Germany', 'United States']\nenrollment_rates = [25, 18, 14, 29, 35]\n\n# Data for the second graph\ntt_ratios = [25, 18, 14, 29, 35]\n\nfig, axes = plt.subplots(1, 2, figsize=(12, 6))\n\n# First graph\naxes[0].bar(countries, enrollment_rates, color='purple')\naxes[0].set_title('Higher Education Enrollment Rate')\naxes[0].set_xlabel('Countries')\naxes[0].set_ylabel('Enrollment Rate')\n\n# Second graph\naxes[1].bar(countries, tt_ratios, color='green')\naxes[1].set_title('Student-Teacher Ratio')\naxes[1].set_xlabel('Countries')\naxes[1].set_ylabel('Ratio')\n\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_18.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the first chart\nregions = ['Africa', 'South America', 'North America', 'Asia', 'Europe']\nemissions = [1200, 1800, 5000, 3200, 10400]\nland_area = [21, 34, 25, 28, 38]\n\n# Data for the second chart\nregions2 = ['Africa', 'South America', 'North America', 'Asia', 'Europe']\nforest_coverage = [52, 34, 25, 38, 52]\nland_area2 = [18, 28, 25, 34, 45]\n\n# Data for the third chart\nregions3 = ['Africa', 'South America', 'North America', 'Asia', 'Europe']\nenergy_usage = [12, 18, 20, 25, 34]\ntotal_energy_consumption = [45, 48, 28, 25, 34]\n\n# Create the first chart\nfig, ax = plt.subplots(figsize=(6, 9))\nax.barh(regions, emissions, color='lightblue')\nax.set_xlabel('Emissions (in millions of metric tons)')\nax.set_title('Annual Carbon Dioxide Emissions')\n\n# Create the second chart\nfig, ax = plt.subplots(figsize=(6, 9))\nax.barh(regions2, forest_coverage, color='lightgreen')\nax.set_xlabel('Forest Coverage Rate (%)')\nax.set_title('Forest Coverage Rate')\n\n# Create the third chart\nfig, ax = plt.subplots(figsize=(6, 9))\nax.barh(regions3, energy_usage, color='lightcoral')\nax.set_xlabel('Energy Usage (%)')\nax.set_title('Renewable Energy Usage')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_19.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the first bar chart\nteams = ['Detroit', 'Philadelphia', 'Baltimore']\ncrime_rates = [75, 85, 65]\nhappiness_indices = [60, 70, 50]\nsocial_security_coverages = [90, 80, 70]\npolitical_participations = [85, 95, 75]\n\n# Data for the second bar chart\ncrime_rates_2 = [70, 80, 60]\nhappiness_indices_2 = [65, 75, 55]\nsocial_security_coverages_2 = [95, 85, 75]\npolitical_participations_2 = [80, 90, 70]\n\n# Data for the third bar chart\ncrime_rates_3 = [72, 82, 62]\nhappiness_indices_3 = [64, 74, 54]\nsocial_security_coverages_3 = [92, 82, 72]\npolitical_participations_3 = [82, 92, 72]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 9.0))\n\n# Plot the bars\nax.bar(teams, crime_rates, color='purple')\nax.bar(teams, happiness_indices, bottom=crime_rates, color='blue')\nax.bar(teams, social_security_coverages, bottom=[x+y for x,y in zip(crime_rates, happiness_indices)], color='red')\nax.bar(teams, political_participations, bottom=[x+y+z for x,y,z in zip(crime_rates, happiness_indices, social_security_coverages)], color='yellow')\n\n# Set the title and labels\nax.set_title('a')\nax.set_xlabel('Teams')\nax.set_ylabel('Percentage')\n\n# Create a second subplot\nax2 = fig.add_subplot(312)\nax2.bar(teams, crime_rates_2, color='purple')\nax2.bar(teams, happiness_indices_2, bottom=crime_rates_2, color='blue')\nax2.bar(teams, social_security_coverages_2, bottom=[x+y for x,y in zip(crime_rates_2, happiness_indices_2)], color='red')\nax2.bar(teams, political_participations_2, bottom=[x+y+z for x,y,z in zip(crime_rates_2, happiness_indices_2, social_security_coverages_2)], color='yellow')\n\n# Set the title and labels\nax2.set_title('b')\nax2.set_xlabel('Teams')\nax2.set_ylabel('Percentage')\n\n# Create a third subplot\nax3 = fig.add_subplot(313)\nax3.bar(teams, crime_rates_3, color='purple')\nax3.bar(teams, happiness_indices_3, bottom=crime_rates_3, color='blue')\nax3.bar(teams, social_security_coverages_3, bottom=[x+y for x,y in zip(crime_rates_3, happiness_indices_3)], color='red')\nax3.bar(teams, political_participations_3, bottom=[x+y+z for x,y,z in zip(crime_rates_3, happiness_indices_3, social_security_coverages_3)], color='yellow')\n\n# Set the title and labels\nax3.set_title('c')\nax3.set_xlabel('Teams')\nax3.set_ylabel('Percentage')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Set the title of the plot\nax.set_title('Protocol')\n\n# Create a rectangle for the logo\nlogo = plt.Rectangle((0.05, 0.85), 0.1, 0.1, color='white', fill=False)\nax.add_patch(logo)\n\n# Add text to the logo\nax.text(0.075, 0.92, 'Expert', fontsize=12)\nax.text(0.075, 0.89, 'Blind', fontsize=12)\nax.text(0.075, 0.86, 'Consultancy', fontsize=12)\nax.text(0.075, 0.83, 'Debate', fontsize=12)\nax.text(0.075, 0.80, 'Interactive Consultancy', fontsize=12)\nax.text(0.075, 0.77, 'Interactive Debate', fontsize=12)\n\n# Create a bar chart\nax.bar(['GPT-3.5-Turbo', 'Claude 2.1', 'GPT-4-Turbo', 'Human'], [80, 60, 70, 90], color=['blue', 'green', 'orange', 'purple'])\n\n# Set the y-axis limits\nax.set_ylim(0, 100)\n\n# Set the x-axis limits\nax.set_xlim(-1, 5)\n\n# Set the x-axis labels\nax.set_xticks([0, 1, 2, 3])\nax.set_xticklabels(['GPT-3.5-Turbo', 'Claude 2.1', 'GPT-4-Turbo', 'Human'])\n\n# Set the y-axis label\nax.set_ylabel('Judge Accuracy (%)')\n\n# Set the x-axis label\nax.set_xlabel('Judge')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_20.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\ncities = ['New York', 'London', 'Beijing', 'Tokyo']\ntemperatures = [12, 14, 16, 18]\nrainfall = [1200, 1500, 1300, 1700]\nwind_speed = [5, 6, 4, 7]\naqi = [50, 60, 70, 80]\n\n# Create a figure and axis\nfig, ax = plt.subplots(2, 2, figsize=(10, 5))\n\n# Plot 1: Temperature\nax[0, 0].bar(cities, temperatures, color='pink')\nax[0, 0].set_title('Annual Average Temperature')\nax[0, 0].set_ylabel('Temperature (\u00b0C)')\nax[0, 0].set_xlabel('City')\n\n# Plot 2: Rainfall\nax[0, 1].bar(cities, rainfall, color='lightgreen')\nax[0, 1].set_title('Annual Rainfall')\nax[0, 1].set_ylabel('Rainfall (mm)')\nax[0, 1].set_xlabel('City')\n\n# Plot 3: Wind Speed\nax[1, 0].bar(cities, wind_speed, color='skyblue')\nax[1, 0].set_title('Wind Speed')\nax[1, 0].set_ylabel('Speed (m/s)')\nax[1, 0].set_xlabel('City')\n\n# Plot 4: Air Quality Index\nax[1, 1].bar(cities, aqi, color='purple')\nax[1, 1].set_title('Air Quality Index')\nax[1, 1].set_ylabel('AQI')\nax[1, 1].set_xlabel('City')\n\n# Display the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_21.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the bar charts\nenergy_consumption = [0, 0, 0, 0, 0]\nrenewable_energy_usage = [25, 20, 15, 10, 5]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Plot the bar chart\nax.bar(range(len(energy_consumption)), energy_consumption, color='blue')\nax.bar(range(len(renewable_energy_usage)), renewable_energy_usage, color='green')\n\n# Set the title and labels\nax.set_title('Total Energy Consumption by Country')\nax.set_xlabel('Country')\nax.set_ylabel('Energy Consumption (Petajoules)')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_22.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nmodels = ['Standard Model', 'Advanced Model', 'Optimal Model']\nefficiencies = [0.30, 0.20, 0.15]\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\nax.bar(models, efficiencies, color='blue')\n\n# Set the title and labels\nax.set_title('Energy Efficiency Ratings by Appliance Model')\nax.set_xlabel('Appliance Model')\nax.set_ylabel('Energy Efficiency Rating')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_23.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Set the title of the plot\nax.set_title('Energy Assessment Entity')\n\n# Create a bar chart with the data\nax.bar(['Wind', 'Solar', 'Hydro', 'Nuclear'], [90, 80, 70, 60], color='blue')\nax.bar(['Wind', 'Solar', 'Hydro', 'Nuclear'], [80, 70, 60, 50], color='green')\nax.bar(['Wind', 'Solar', 'Hydro', 'Nuclear'], [70, 60, 50, 40], color='purple')\nax.bar(['Wind', 'Solar', 'Hydro', 'Nuclear'], [60, 50, 40, 30], color='orange')\n\n# Set the y-axis label\nax.set_ylabel('Efficiency and Cost Scores')\n\n# Set the x-axis label\nax.set_xlabel('Energy Sources')\n\n# Add a rectangle for the evaluation protocol\nrect = plt.Rectangle((0.5, 0.5), 2, 2, facecolor='yellow', alpha=0.5)\nax.add_patch(rect)\n\n# Add text for the evaluation protocol\nax.text(0.5, 0.5, 'Evaluation Protocol', ha='center', va='center', fontsize=12)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_24.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nregions = ['North America', 'Europe', 'Asia', 'South America', 'Africa', 'Australia', 'Central America', 'Middle East', 'Southeast Asia', 'Scandinavia']\nmetrics = [95, 85, 75, 65, 55, 45, 35, 25, 15, 5]\ngraduation = [110, 100, 90, 80, 70, 60, 50, 40, 30, 20]\nenrollment = [115, 105, 95, 85, 75, 65, 55, 45, 35, 25]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Plot the metrics\nax.bar(regions, metrics, color='lightgreen')\n\n# Add graduation and enrollment lines\nfor i, v in enumerate(graduation):\n    ax.text(i, v + 1, str(v), ha='center', va='bottom')\nfor i, v in enumerate(enrollment):\n    ax.text(i, v - 1, str(v), ha='center', va='top')\n\n# Set the title and labels\nax.set_title('Educational Metrics by Region')\nax.set_xlabel('Region')\nax.set_ylabel('Metrics (%)')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_25.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nbrands = ['iPhone 13', 'Samsung S21', 'Google Pixel 6', 'OnePlus 9']\nrecall_rates = [46.3, 57.9, 53.8, 19.4]\nmisleading_rates = [30.1, 34.0, 53.7, 20.0]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Plot the bars\nax.bar(brands, recall_rates, color='blue')\nax.bar(brands, misleading_rates, bottom=recall_rates, color='orange')\n\n# Add labels and title\nax.set_xlabel('Brands')\nax.set_ylabel('Recall Rates')\nax.set_title('Comparison of Recall Rates Across Products')\n\n# Add text annotations for each bar\nfor i, v in enumerate(recall_rates):\n    ax.text(i, v + 1, str(v) + '%', ha='center', va='bottom')\n\nfor i, v in enumerate(misleading_rates):\n    ax.text(i, v + 1, str(v) + '%', ha='center', va='bottom')\n\n# Set the y-axis limits\nax.set_ylim(0, 70)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_26.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the bar chart\ncategories = ['Support', 'Delivery', 'Product Quality', 'Returns', 'Pricing', 'Website Usability', 'Checkout Process']\nsatisfaction_scores = [15, 18, 20, 12, 17, 10, 8]\ncomplaint_rates = [75, 82, 78, 85, 80, 88, 90]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the bar chart\nax.bar(categories, satisfaction_scores, color='blue')\n\n# Add a horizontal line at the bottom of the bar chart\nax.axhline(y=0, color='black', linewidth=0.5)\n\n# Set the title and labels\nax.set_title('Satisfaction Scores')\nax.set_xlabel('Categories')\nax.set_ylabel('Satisfaction Scores')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_27.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ncategories = ['Support', 'Delivery', 'Product Quality', 'Returns', 'Pricing', 'Website Usability', 'Checkout Process']\nagree_rates = [75, 82, 78, 78, 85, 88, 90]\ndisagree_rates = [15, 18, 20, 12, 17, 10, 8]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Plot bars for agree rates\nfor i, rate in enumerate(agree_rates):\n    ax.bar(categories[i], rate, color='orange', label='Agree' if i == 0 else None)\n\n# Plot bars for disagree rates\nfor i, rate in enumerate(disagree_rates):\n    ax.bar(categories[i], -rate, color='lightblue', label='Disagree' if i == 0 else None)\n\n# Set labels and title\nax.set_xlabel('Categories')\nax.set_ylabel('Percentage')\nax.set_title('Customer Satisfaction')\n\n# Add legend\nax.legend()\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_28.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Set the x-axis limits\nax.set_xlim(-0.15, 0.25)\n\n# Set the y-axis limits\nax.set_ylim(0, 0.25)\n\n# Set the x-axis ticks\nax.set_xticks([0, 0.05, 0.1, 0.15, 0.2])\n\n# Set the y-axis ticks\nax.set_yticks([0, 0.05, 0.1, 0.15, 0.2])\n\n# Set the x-axis labels\nax.set_xlabel('Impact on Plant Growth (\u0394 to control)')\n\n# Set the y-axis labels\nax.set_ylabel('Environmental Factors')\n\n# Set the title of the plot\nax.set_title('Impact of Environmental Factors on Plant Growth')\n\n# Set the color of the grid lines\nax.grid(color='black', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the text\nax.text(0.05, 0.2, 'Watering Frequency', fontsize=12, color='black')\nax.text(0.05, 0.15, 'Planting Density', fontsize=12, color='black')\nax.text(0.05, 0.1, 'Plant Variety', fontsize=12, color='black')\nax.text(0.05, 0.05, 'CO2 Levels', fontsize=12, color='black')\nax.text(0.15, 0.2, 'Pesticides', fontsize=12, color='black')\nax.text(0.15, 0.15, 'Temperature', fontsize=12, color='black')\nax.text(0.15, 0.1, 'Fertilizer', fontsize=12, color='black')\nax.text(0.15, 0.05, 'Soil pH', fontsize=12, color='black')\nax.text(0.25, 0.2, 'Water Quality', fontsize=12, color='black')\nax.text(0.25, 0.15, 'Sunlight', fontsize=12, color='black')\n\n# Set the color of the bars\nax.bar([0.05, 0.15], [0.1, 0.15], color='green')\nax.bar([0.1, 0.2], [0.05, 0.1], color='green')\nax.bar([0.15, 0.25], [0.05, 0.1], color='green')\nax.bar([0.2, 0.3], [0.05, 0.1], color='green')\nax.bar([0.25, 0.35], [0.05, 0.1], color='green')\nax.bar([0.3, 0.4], [0.05, 0.1], color='green')\nax.bar([0.35, 0.45], [0.05, 0.1], color='green')\nax.bar([0.4, 0.5], [0.05, 0.1], color='green')\nax.bar([0.45, 0.55], [0.05, 0.1], color='green')\nax.bar([0.5, 0.6], [0.05, 0.1], color='green')\nax.bar([0.55, 0.65], [0.05, 0.1], color='green')\nax.bar([0.6, 0.7], [0.05, 0.1], color='green')\nax.bar([0.65, 0.75], [0.05, 0.1], color='green')\nax.bar([0.7, 0.8], [0.05, 0.1], color='green')\nax.bar([0.75, 0.85], [0.05, 0.1], color='green')\nax.bar([0.8, 0.9], [0.05, 0.1], color='green')\nax.bar([0.85, 0.95], [0.05, 0.1], color='green')\nax.bar([0.9, 1.0], [0.05, 0.1], color='green')\nax.bar([0.95, 1.05], [0.05, 0.1], color='green')\nax.bar([1.0, 1.1], [0.05, 0.1], color='green')\nax.bar([1.1, 1.2], [0.05, 0.1], color='green')\nax.bar([1.2, 1.3], [0.05, 0.1], color='green')\nax.bar([1.3, 1.4], [0.05, 0.1], color='green')\nax.bar([1.4, 1.5], [0.05, 0.1], color='green')\nax.bar([1.5, 1.6], [0.05, 0.1], color='green')\nax.bar([1.6, 1.7], [0.05, 0.1], color='green')\nax.bar([1.7, 1.8], [0.05, 0.1], color='green')\nax.bar([1.8, 1.9], [0.05, 0.1], color='green')\nax.bar([1.9, 2.0], [0.05, 0.1], color='green')\nax.bar([2.0, 2.1], [0.05, 0.1], color='green')\nax.bar([2.1, 2.2], [0.05, 0.1], color='green')\nax.bar([2.2, 2.3], [0.05, 0.1], color='green')\nax.bar([2.3, 2.4], [0.05, 0.1], color='green')\nax.bar([2.4, 2.5], [0.05, 0.1], color='green')\nax.bar([2.5, 2.6], [0.05, 0.1], color='green')\nax.bar([2.6, 2.7], [0.05, 0.1], color='green')\nax.bar([2.7, 2.8], [0.05, 0.1], color='green')\nax.bar([2.8, 2.9], [0.05, 0.1], color='green')\nax.bar([2.9, 3.0], [0.05, 0.1], color='green')\nax.bar([3.0, 3.1], [0.05, 0.1], color='green')\nax.bar([3.1, 3.2], [0.05, 0.1], color='green')\nax.bar([3.2, 3.3], [0.05, 0.1], color='green')\nax.bar([3.3, 3.4], [0.05, 0.1], color='green')\nax.bar([3.4, 3.5], [0.05, 0.1], color='green')\nax.bar([3.5, 3.6], [0.05, 0.1], color='green')\nax.bar([3.6, 3.7], [0.05, 0.1], color='green')\nax.bar([3.7, 3.8], [0.05, 0.1], color='green')\nax.bar([3.8, 3.9], [0.05, 0.1], color='green')\nax.bar([3.9, 4.0], [0.05, 0.1], color='green')\nax.bar([4.0, 4.1], [0.05, 0.1], color='green')\nax.bar([4.1, 4.2], [0.05, 0.1], color='green')\nax.bar([4.2, 4.3], [0.05, 0.1], color='green')\nax.bar([4.3, 4.4], [0.05, 0.1], color='green')\nax.bar([4.4, 4.5], [0.05, 0.1], color='green')\nax.bar([4.5, 4.6], [0.05, 0.1], color='green')\nax.bar([4.6, 4.7], [0.05, 0.1], color='green')\nax.bar([4.7, 4.8], [0.05, 0.1], color='green')\nax.bar([4.8, 4.9], [0.05, 0.1], color='green')\nax.bar([4.9, 5.0], [0.05, 0.1], color='green')\nax.bar([5.0, 5.1], [0.05, 0.1], color='green')\nax.bar([5.1, 5.2], [0.05, 0.1], color='green')\nax.bar([5.2, 5.3], [0.05, 0.1], color='green')\nax.bar([5.3, 5.4], [0.05, 0.1], color='green')\nax.bar([5.4, 5.5], [0.05, 0.1], color='green')\nax.bar([5.5, 5.6], [0.05, 0.1], color='green')\nax.bar([5.6, 5.7], [0.05, 0.1], color='green')\nax.bar([5.7, 5.8], [0.05, 0.1], color='green')\nax.bar([5.8, 5.9], [0.05, 0.1], color='green')\nax.bar([5.9, 6.0], [0.05, 0.1], color='green')\nax.bar([6.0, 6.1], [0.05, 0.1], color='green')\nax.bar([6.1, 6.2], [0.05, 0.1], color='green')\nax.bar([6.2, 6.3], [0.05, 0.1], color='green')\nax.bar([6.3, 6.4], [0.05, 0.1], color='green')\nax.bar([6.4, 6.5], [0.05, 0.1], color='green')\nax.bar([6.5, 6.6], [0.05, 0.1], color='green')\nax.bar([6.6, 6.7], [0.05, 0.1], color='green')\nax.bar([6.7, 6.8], [0.05, 0.1], color='green')\nax.bar([6.8, 6.9], [0.05, 0.1], color='green')\nax.bar([6.9, 7.0], [0.05, 0.1], color='green')\nax.bar([7.0, 7.1], [0.05, 0.1], color='green')\nax.bar([7.1, 7.2], [0.05, 0.1], color='green')\nax.bar([7.2, 7.3], [0.05, 0.1], color='green')\nax.bar([7.3, 7.4], [0.05, 0.1], color='green')\nax.bar([7.4, 7.5], [0.05, 0.1], color='green')\nax.bar([7.5, 7.6], [0.05, 0.1], color='green')\nax.bar([7.6, 7.7], [0.05, 0.1], color='green')\nax.bar([7.7, 7.8], [0.05, 0.1], color='green')\nax.bar([7.8, 7.9], [0.05, 0.1], color='green')\nax.bar([7.9, 8.0], [0.05, 0.1], color='green')\nax.bar([8.0, 8.1], [0.05, 0.1], color='green')\nax.bar([8.1, 8.2], [0.05, 0.1], color='green')\nax.bar([8.2, 8.3], [0.05, 0.1], color='green')\nax.bar([8.3, 8.4], [0.05, 0.1], color='green')\nax.bar([8.4, 8.5], [0.05, 0.1], color='green')\nax.bar([8.5, 8.6], [0.05, 0.1], color='green')\nax.bar([8.6, 8.7], [0.05, 0.1], color='green')\nax.bar([8.7, 8.8], [0.05, 0.1], color='green')\nax.bar([8.8, 8.9], [0.05, 0.1], color='green')\nax.bar([8.9, 9.0], [0.05, 0.1], color='green')\nax.bar([9.0, 9.1], [0.05, 0.1], color='green')\nax.bar([9.1, 9.2], [0.05, 0.1], color='green')\nax.bar([9.2, 9.3], [0.05, 0.1], color='green')\nax.bar([9.3, 9.4], [0.05, 0.1], color='green')\nax.bar([9.4, 9.5], [0.05, 0.1], color='green')\nax.bar([9.5, 9.6], [0.05, 0.1], color='green')\nax.bar([9.6, 9.7], [0.05, 0.1], color='green')\nax.bar([9.7, 9.8], [0.05, 0.1], color='green')\nax.bar([9.8, 9.9], [0.05, 0.1], color='green')\nax.bar([9.9, 10.0], [0.05, 0.1], color='green')\nax.bar([10.0, 10.1], [0.05, 0.1], color='green')\nax.bar([10.1, 10.2], [0.05, 0.1], color='green')\nax.bar([10.2, 10.3], [0.05, 0.1], color='green')\nax.bar([10.3, 10.4], [0.05, 0.1], color='green')\nax.bar([10.4, 10.5], [0.05, 0.1], color='green')\nax.bar([10.5, 10.6], [0.05, 0.1], color='green')\nax.bar([10.6, 10.7], [0.05, 0.1], color='green')\nax.bar([10.7, 10.8], [0.05, 0.1], color='green')\nax.bar([10.8, 10.9], [0.05, 0.1], color='green')\nax.bar([10.9, 11.0], [0.05, 0.1], color='green')\nax.bar([11.0, 11.1], [0.05, 0.1], color='green')\nax.bar([11.1, 11.2], [0.05, 0.1], color='green')\nax.bar([11.2, 11.3], [0.05, 0.1], color='green')\nax.bar([11.3, 11.4], [0.05, 0.1], color='green')\nax.bar([11.4, 11.5], [0.05, 0.1], color='green')\nax.bar([11.5, 11.6], [0.05, 0.1], color='green')\nax.bar([11.6, 11.7], [0.05, 0.1], color='green')\nax.bar([11.7, 11.8], [0.05, 0.1], color='green')\nax.bar([11.8, 11.9], [0.05, 0.1], color='green')\nax.bar([11.9, 12.0], [0.05, 0.1], color='green')\nax.bar([12.0, 12.1], [0.05,"}
{"file": "dataset/ori_500/errorbar_29.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the bar chart\ncities = ['New York', 'Los Angeles', 'Chicago']\ntraffic_volume = [250, 230, 220]\npublic_transit = [175, 160, 150]\naccident_rate = [150, 140, 130]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 4))\n\n# Plot the bars\nax.bar(cities, traffic_volume, color='green')\nax.bar(cities, public_transit, bottom=traffic_volume, color='blue')\nax.bar(cities, accident_rate, bottom=[x+y for x,y in zip(traffic_volume, public_transit)], color='red')\n\n# Set the title and labels\nax.set_title('Traffic Metrics by City')\nax.set_xlabel('City')\nax.set_ylabel('Metric Values')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(10.0, 10.0))\n\n# Set the title of the plot\nax.set_title('FashionMNIST (NEURAL)')\n\n# Set the x-axis label\nax.set_xlabel('Metric')\n\n# Set the y-axis label\nax.set_ylabel('Hyperparameters')\n\n# Define the data for the plot\nx = [0.0, 0.2, 0.4, 0.6, 0.8, 1.0]\ny = [0.0, 0.2, 0.4, 0.6, 0.8, 1.0]\n\n# Plot the data\nax.plot(x, y)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_30.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Set the title of the plot\nax.set_title('Environmental Impact Scores Across Cities')\n\n# Set the x-axis label\nax.set_xlabel('City')\n\n# Set the y-axis label\nax.set_ylabel('Environmental Impact Score')\n\n# Define the data for the bars\ncities = ['City A', 'City B', 'City C', 'City D']\nair_quality_scores = [3.2, 4.1, 2.9, 3.7]\nwater_quality_scores = [2.5, 2.8, 2.2, 2.6]\n\n# Create the bar chart\nax.bar(cities, air_quality_scores, color='pink')\nax.bar(cities, water_quality_scores, bottom=air_quality_scores, color='lightgreen')\n\n# Add labels to the bars\nfor i, v in enumerate(air_quality_scores):\n    ax.text(i, v + 0.1, str(v), ha='center', va='bottom')\n\nfor i, v in enumerate(water_quality_scores):\n    ax.text(i, v + 0.1, str(v), ha='center', va='bottom')\n\n# Add a legend\nax.legend(['Air Quality Score', 'Water Quality Score'])\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\nroles = ['Wererewolf', 'Seer', 'Witch', 'Hunter', 'Villager']\ndurations = [84.97, 102.67, 78.22, 85.17, 80]\ntokens = [80, 780.67, 700, 612.99, 618.52]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 4))\n\n# Plot the durations\nfor i, duration in enumerate(durations):\n    ax.bar(roles[i], duration, color='lightgreen' if roles[i] != 'Wererewolf' else 'lightblue')\n\n# Plot the tokens\nfor i, token in enumerate(tokens):\n    ax.bar(roles[i], token, bottom=durations[i], color='lightblue' if roles[i] != 'Wererewolf' else 'lightgreen')\n\n# Set the title and labels\nax.set_title('a) Speak duration of roles')\nax.set_xlabel('Roles')\nax.set_ylabel('Duration (s)')\n\n# Create a second subplot\nax2 = fig.add_subplot(122)\n\n# Plot the tokens\nfor i, token in enumerate(tokens):\n    ax2.bar(roles[i], token, color='lightblue' if roles[i] != 'Wererewolf' else 'lightgreen')\n\n# Set the title and labels\nax2.set_title('b) Speak tokens of roles')\nax2.set_xlabel('Roles')\nax2.set_ylabel('Tokens')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nx = [5, 10, 20, 30, 40, 50]\ny = [63.77, 64.17, 64.31, 64.98, 65.82, 65.78]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 7))\n\n# Plot the data\nax.plot(x, y, 'o-')\n\n# Set the title and labels\nax.set_title('Size of Data for Training and Validation')\nax.set_xlabel('Size of Data (in samples)')\nax.set_ylabel('True+ info (%)')\n\n# Set the x-ticks\nax.set_xticks(x)\nax.set_xticklabels(['(40 samples)', '(81 samples)', '(163 samples)', '(245 samples)', '(326 samples)', '(408 samples)'])\n\n# Set the y-ticks\nax.set_yticks(range(56, 67, 2))\nax.set_yticklabels(['56', '58', '60', '62', '64', '66'])\n\n# Set the grid\nax.grid(True)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Set the title of the plot\nax.set_title('Out-of-domain accuracy')\n\n# Define the data for the bar chart\nx = ['all', 'arg-causal', 'test_0', 'test_1', 'test_2', 'test_3', 'test_4', 'test_5', 'test_6', 'constant']\ny = [0.834, 0.832, 0.830, 0.828, 0.826, 0.824, 0.822, 0.820, 0.818, 0.816]\n\n# Create a bar chart\nax.bar(x, y, color='blue')\n\n# Add a vertical line at the x-axis\nax.axhline(y=0.832, color='black', linestyle='-')\n\n# Add a rectangle with a black border\nax.add_patch(plt.Rectangle((0.5, 0.832), 0.5, 0.01, color='red', edgecolor='black'))\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nmodels = ['Final Distribution with GPT-4-Turbo', 'Final Distribution with GPT-3.5-Turbo', '0.125 Parameter-Valued Distribution', 'Initial Distribution', 'Best-of-Three']\nvalues = [0.7, 0.8, 0.6, 0.5, 0.4]\ncolors = ['lightblue', 'lightblue', 'lightblue', 'lightblue', 'lightblue']\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(10, 6))\nbars = ax.bar(models, values, color=colors)\n\n# Add a vertical line at the end of each bar\nfor bar in bars:\n    ax.axvline(x=bar.get_x() + bar.get_width(), color='black')\n\n# Add a red line at the end of the last bar\nax.axvline(x=bars[-1].get_x() + bars[-1].get_width(), color='red')\n\n# Add a rectangle at the end of the last bar\nrect = plt.Rectangle((bars[-1].get_x() + bars[-1].get_width(), 0), 0.1, 0.1, color='red')\nax.add_patch(rect)\n\n# Add a text label at the end of the last bar\nax.text(bars[-1].get_x() + bars[-1].get_width() + 0.05, 0.75, 'ToT (0.675)', fontsize=12, color='red')\n\n# Set the title and labels\nax.set_title('Mini Crosswords Performance')\nax.set_xlabel('Model')\nax.set_ylabel('Objective Value')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nbrands = ['BERT', 'RoBERTa', 'DistilBERT', 'XLNet', 'Electra', 'Albert', 'BART', 'DeBERTa', 'DeBERTaTa', 'Llama2']\naccuracies = [55, 60, 58, 62, 57, 59, 64, 56, 53, 51]\nlabels = ['Ground-truth labels', 'Weak labels']\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 3))\n\n# Plot bars\nfor i, brand in enumerate(brands):\n    ax.barh(brand, accuracies[i], color='red' if i % 2 == 0 else 'blue')\n\n# Set labels\nax.set_xlabel('Accuracy (%)')\nax.set_title('Model Accuracy Comparison')\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorbar_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for each category\ncategories = ['Computational Social Science and Social Media', 'Phonology, Morphology and Word Segmentation', 'Information Retrieval and Text Mining', 'Machine Learning for NLP', 'Information Extraction', 'Discourse and Pragmatics', 'Syntax: Tagging, Chunking and Parsing']\nvalues = [1.5, 1.4, 1.3, 1.2, 1.1, 1.0, 0.9]\n\n# Create a bar chart with the data\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\nax.bar(categories, values, color='lavender')\n\n# Set the title of the chart\nax.set_title('Your Chart Title Here')\n\n# Set the x-axis label\nax.set_xlabel('A')\n\n# Set the y-axis label\nax.set_ylabel('B')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorpoint_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Set the x-axis labels\nx_labels = ['Kashmir', 'Religion', 'Crime and Justice', 'CAA', 'Pulwama-Balakot', 'Politics']\n\n# Set the y-axis limits\nax.set_ylim(0.2, 18)\n\n# Draw horizontal lines\nfor i in range(1, 10):\n    ax.axhline(y=i*2, color='gray', linestyle='-')\n\n# Draw vertical lines\nfor i in range(len(x_labels)):\n    ax.axvline(x=i, color='gray', linestyle='-')\n\n# Draw rectangles\nfor i in range(len(x_labels)):\n    ax.add_patch(plt.Rectangle((i-0.4, 0), 0.8, 18, fill=False, edgecolor='blue'))\n\n# Set the x-axis tick labels\nax.set_xticks(range(len(x_labels)))\nax.set_xticklabels(x_labels)\n\n# Set the y-axis label\nax.set_ylabel('Shouting Fraction (Fraction of videos)')\n\n# Set the title\nax.set_title('Shouting Fraction by Region')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorpoint_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the first graph\nx1 = [0, 5, 10, 15, 20]\ny1 = [15.49, 17.15, 16.03, 15.45, 14.24]\n\n# Data for the second graph\nx2 = [0, 5, 10, 15, 20]\ny2 = [19.38, 23.92, 24.64, 22.92, 20.29]\n\n# Data for the third graph\nx3 = [0, 5, 10, 15, 20]\ny3 = [18.83, 19.38, 20.29, 18.83, 17.15]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 9.0))\n\n# Plot the data\nax.plot(x1, y1, 'r-')\nax.plot(x2, y2, 'g-')\nax.plot(x3, y3, 'b-')\n\n# Set the title and labels\nax.set_title('Variable, Symmetric Error')\nax.set_xlabel('Time')\nax.set_ylabel('Error')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorpoint_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Incivility (Fraction of Videos)')\n\n# Set the x-axis label\nax.set_xlabel('Incivility (Fraction of Videos)')\n\n# Set the y-axis label\nax.set_ylabel('Dataset mean')\n\n# Set the x-axis limits\nax.set_xlim(0.16, 0.28)\n\n# Set the y-axis limits\nax.set_ylim(0, 0.3)\n\n# Draw a vertical line at x=0.16\nax.axvline(x=0.16, color='b', linestyle='-')\n\n# Draw a horizontal line at y=0.24\nax.axhline(y=0.24, color='r', linestyle='-')\n\n# Draw a rectangle with a red border\nax.add_patch(plt.Rectangle((0.16, 0.24), 0.04, 0.04, edgecolor='r', facecolor='none'))\n\n# Draw a rectangle with a blue border\nax.add_patch(plt.Rectangle((0.22, 0.24), 0.04, 0.04, edgecolor='b', facecolor='none'))\n\n# Draw a rectangle with a red border\nax.add_patch(plt.Rectangle((0.28, 0.24), 0.04, 0.04, edgecolor='r', facecolor='none'))\n\n# Draw a rectangle with a red border\nax.add_patch(plt.Rectangle((0.16, 0.20), 0.04, 0.04, edgecolor='r', facecolor='none'))\n\n# Draw a rectangle with a red border\nax.add_patch(plt.Rectangle((0.22, 0.20), 0.04, 0.04, edgecolor='r', facecolor='none'))\n\n# Draw a rectangle with a red border\nax.add_patch(plt.Rectangle((0.28, 0.20), 0.04, 0.04, edgecolor='r', facecolor='none'))\n\n# Draw a rectangle with a red border\nax.add_patch(plt.Rectangle((0.16, 0.16), 0.04, 0.04, edgecolor='r', facecolor='none'))\n\n# Draw a rectangle with a red border\nax.add_patch(plt.Rectangle((0.22, 0.16), 0.04, 0.04, edgecolor='r', facecolor='none'))\n\n# Draw a rectangle with a red border\nax.add_patch(plt.Rectangle((0.28, 0.16), 0.04, 0.04, edgecolor='r', facecolor='none'))\n\n# Draw a rectangle with a red border\nax.add_patch(plt.Rectangle((0.16, 0.12), 0.04, 0.04, edgecolor='r', facecolor='none'))\n\n# Draw a rectangle with a red border\nax.add_patch(plt.Rectangle((0.22, 0.12), 0.04, 0.04, edgecolor='r', facecolor='none'))\n\n# Draw a rectangle with a red border\nax.add_patch(plt.Rectangle((0.28, 0.12), 0.04, 0.04, edgecolor='r', facecolor='none'))\n\n# Draw a rectangle with a red border\nax.add_patch(plt.Rectangle((0.16, 0.08), 0.04, 0.04, edgecolor='r', facecolor='none'))\n\n# Draw a rectangle with a red border\nax.add_patch(plt.Rectangle((0.22, 0.08), 0.04, 0.04, edgecolor='r', facecolor='none'))\n\n# Draw a rectangle with a red border\nax.add_patch(plt.Rectangle((0.28, 0.08), 0.04, 0.04, edgecolor='r', facecolor='none'))\n\n# Draw a rectangle with a red border\nax.add_patch(plt.Rectangle((0.16, 0.04), 0.04, 0.04, edgecolor='r', facecolor='none'))\n\n# Draw a rectangle with a red border\nax.add_patch(plt.Rectangle((0.22, 0.04), 0.04, 0.04, edgecolor='r', facecolor='none'))\n\n# Draw a rectangle with a red border\nax.add_patch(plt.Rectangle((0.28, 0.04), 0.04, 0.04, edgecolor='r', facecolor='none'))\n\n# Draw a rectangle with a red border\nax.add_patch(plt.Rectangle((0.16, 0.00), 0.04, 0.04, edgecolor='r', facecolor='none'))\n\n# Draw a rectangle with a red border\nax.add_patch(plt.Rectangle((0.22, 0.00), 0.04, 0.04, edgecolor='r', facecolor='none'))\n\n# Draw a rectangle with a red border\nax.add_patch(plt.Rectangle((0.28, 0.00), 0.04, 0.04, edgecolor='r', facecolor='none'))\n\n# Draw a rectangle with a red border\nax.add_patch(plt.Rectangle((0.16, 0.00), 0.04, 0.04, edgecolor='r', facecolor='none'))\n\n# Draw a rectangle with a red border\nax.add_patch(plt.Rectangle((0.22, 0.00), 0.04, 0.04, edgecolor='r', facecolor='none'))\n\n# Draw a rectangle with a red border\nax.add_patch(plt.Rectangle((0.28, 0.00), 0.04, 0.04, edgecolor='r', facecolor='none'))\n\n# Draw a rectangle with a red border\nax.add_patch(plt.Rectangle((0.16, 0.00), 0.04, 0.04, edgecolor='r', facecolor='none'))\n\n# Draw a rectangle with a red border\nax.add_patch(plt.Rectangle((0.22, 0.00), 0.04, 0.04, edgecolor='r', facecolor='none'))\n\n# Draw a rectangle with a red border\nax.add_patch(plt.Rectangle((0.28, 0.00), 0.04, 0.04, edgecolor='r', facecolor='none'))\n\n# Draw a rectangle with a red border\nax.add_patch(plt.Rectangle((0.16, 0.00), 0.04, 0.04, edgecolor='r', facecolor='none'))\n\n# Draw a rectangle with a red border\nax.add_patch(plt.Rectangle((0.22, 0.00), 0.04, 0.04, edgecolor='r', facecolor='none'))\n\n# Draw a rectangle with a red border\nax.add_patch(plt.Rectangle((0.28, 0.00), 0.04, 0.04, edgecolor='r', facecolor='none'))\n\n# Draw a rectangle with a red border\nax.add_patch(plt.Rectangle((0.16, 0.00), 0.04, 0.04, edgecolor='r', facecolor='none'))\n\n# Draw a rectangle with a red border\nax.add_patch(plt.Rectangle((0.22, 0.00), 0.04, 0.04, edgecolor='r', facecolor='none'))\n\n# Draw a rectangle with a red border\nax.add_patch(plt.Rectangle((0.28, 0.00), 0.04, 0.04, edgecolor='r', facecolor='none'))\n\n# Draw a rectangle with a red border\nax.add_patch(plt.Rectangle((0.16, 0.00), 0.04, 0.04, edgecolor='r', facecolor='none'))\n\n# Draw a rectangle with a red border\nax.add_patch(plt.Rectangle((0.22, 0.00), 0.04, 0.04, edgecolor='r', facecolor='none'))\n\n# Draw a rectangle with a red border\nax.add_patch(plt.Rectangle((0.28, 0.00), 0.04, 0.04, edgecolor='r', facecolor='none'))\n\n# Draw a rectangle with a red border\nax.add_patch(plt.Rectangle((0.16, 0.00), 0.04, 0.04, edgecolor='r', facecolor='none'))\n\n# Draw a rectangle with a red border\nax.add_patch(plt.Rectangle((0.22, 0.00), 0.04, 0.04, edgecolor='r', facecolor='none'))\n\n# Draw a rectangle with a red border\nax.add_patch(plt.Rectangle((0.28, 0.00), 0.04, 0.04, edgecolor='r', facecolor='none'))\n\n# Draw a rectangle with a red border\nax.add_patch(plt.Rectangle((0.16, 0.00), 0.04, 0.04, edgecolor='r', facecolor='none'))\n\n# Draw a rectangle with a red border\nax.add_patch(plt.Rectangle((0.22, 0.00), 0.04, 0.04, edgecolor='r', facecolor='none'))\n\n# Draw a rectangle with a red border\nax.add_patch(plt.Rectangle((0.28, 0.00), 0.04, 0.04, edgecolor='r', facecolor='none'))\n\n# Draw a rectangle with a red border\nax.add_patch(plt.Rectangle((0.16, 0.00), 0.04, 0.04, edgecolor='r', facecolor='none'))\n\n# Draw a rectangle with a red border\nax.add_patch(plt.Rectangle((0.22, 0.00), 0.04, 0.04, edgecolor='r', facecolor='none'))\n\n# Draw a rectangle with a red border\nax.add_patch(plt.Rectangle((0.28, 0.00), 0.04, 0.04, edgecolor='r', facecolor='none'))\n\n# Draw a rectangle with a red border\nax.add_patch(plt.Rectangle((0.16, 0.00), 0.04, 0.04, edgecolor='r', facecolor='none'))\n\n# Draw a rectangle with a red border\nax.add_patch(plt.Rectangle((0.22, 0.00), 0.04, 0.04, edgecolor='r', facecolor='none'))\n\n# Draw a rectangle with a red border\nax.add_patch(plt.Rectangle((0.28, 0.00), 0.04, 0.04, edgecolor='r', facecolor='none'))\n\n# Draw a rectangle with a red border\nax.add_patch(plt.Rectangle((0.16, 0.00), 0.04, 0.04, edgecolor='r', facecolor='none'))\n\n# Draw a rectangle with a red border\nax.add_patch(plt.Rectangle((0.22, 0.00), 0.04, 0.04, edgecolor='r', facecolor='none'))\n\n# Draw a rectangle with a red border\nax.add_patch(plt.Rectangle((0.28, 0.00), 0.04, 0.04, edgecolor='r', facecolor='none'))\n\n# Draw a rectangle with a red border\nax.add_patch(plt.Rectangle((0.16, 0.00), 0.04, 0.04, edgecolor='r', facecolor='none'))\n\n# Draw a rectangle with a red border\nax.add_patch(plt.Rectangle((0.22, 0.00), 0.04, 0.04, edgecolor='r', facecolor='none'))\n\n# Draw a rectangle with a red border\nax.add_patch(plt.Rectangle((0.28, 0.00), 0.04, 0.04, edgecolor='r', facecolor='none'))\n\n# Draw a rectangle with a red border\nax.add_patch(plt.Rectangle((0.16, 0.00), 0.04, 0.04, edgecolor='r', facecolor='none'))\n\n# Draw a rectangle with a red border\nax.add_patch(plt.Rectangle((0.22, 0.00), 0.04, 0.04, edgecolor='r', facecolor='none'))\n\n# Draw a rectangle with a red border\nax.add_patch(plt.Rectangle((0.28, 0.00), 0.04, 0.04, edgecolor='r', facecolor='none'))\n\n# Draw a rectangle with a red border\nax.add_patch(plt.Rectangle((0.16, 0.00), 0.04, 0.04, edgecolor='r', facecolor='none'))\n\n# Draw a rectangle with a red border\nax.add_patch(plt.Rectangle((0.22, 0.00), 0.04, 0.04, edgecolor='r', facecolor='none'))\n\n# Draw a rectangle with a red border\nax.add_patch(plt.Rectangle((0.28, 0.00), 0.04, 0.04, edgecolor='r', facecolor='none'))\n\n# Draw a rectangle with a red border\nax.add_patch(plt.Rectangle((0.16, 0.00), 0.04, 0.04, edgecolor='r', facecolor='none'))\n\n# Draw a rectangle with a red border\nax.add_patch(plt.Rectangle((0.22, 0.00), 0.04, 0.04, edgecolor='r', facecolor='none'))\n\n# Draw a rectangle with a red border\nax.add_patch(plt.Rectangle((0.28, 0.00), 0.04, 0.04, edgecolor='r', facecolor='none'))\n\n# Draw a rectangle with a red border\nax.add_patch(plt.Rectangle((0.16, 0.00), 0.04, 0.04, edgecolor='r', facecolor='none'))\n\n# Draw a rectangle with a red border\nax.add_patch(plt.Rectangle((0.22, 0.00), 0.04, 0.04, edgecolor='r', facecolor='none'))\n\n# Draw a rectangle with a red border\nax.add_patch(plt.Rectangle((0.28, 0.00), 0.04, 0.04, edgecolor='r', facecolor='none'))\n\n# Draw a rectangle with a red border\nax.add_patch(plt.Rectangle((0.16, 0.00), 0.04, 0.04, edgecolor='r', facecolor='none'))\n\n# Draw a rectangle with a red border\nax.add_patch(plt.Rectangle((0.22, 0.00), 0.04, 0.04, edgecolor='r', facecolor='none'))\n\n# Draw a rectangle with a red border\nax.add_patch(plt.Rectangle((0.28, 0.00), 0.04, 0.04, edgecolor='r', facecolor='none'))\n\n# Draw a rectangle with a red border\nax.add_patch(plt.Rectangle((0.16, 0.00), 0.04, 0.04, edgecolor='r', facecolor='none'))\n\n# Draw a rectangle with a red border\nax.add_patch(plt.Rectangle((0.22, 0.00), 0.04, 0.04, edgecolor='r', facecolor='none'))\n\n# Draw a rectangle with a red border\nax.add_patch(plt.Rectangle((0.28, 0.00), 0.04, 0.04, edgecolor='r', facecolor='none'))\n\n# Draw a rectangle with a red border\nax.add_patch(plt.Rectangle((0.16, 0.00), 0.04, 0.04, edgecolor='r', facecolor='none'))\n\n# Draw a rectangle with a red border\nax.add_patch(plt.Rectangle((0.22, 0.00), 0.04, 0.04, edgecolor='r', facecolor='none'))\n\n# Draw a rectangle with a red border\nax.add_patch(plt.Rectangle((0.28, 0.00), 0.04, 0.04, edgecolor='r', facecolor='none'))\n\n# Draw a rectangle with a red border\nax.add_patch(plt.Rectangle((0.16, 0.00), 0.04, 0.04, edgecolor='r', facecolor='none'))\n\n# Draw a rectangle with a red border\nax.add_patch(plt.Rectangle((0.22, 0.00), 0.04, 0.04, edgecolor='r', facecolor='none'))\n\n# Draw a rectangle with a red border\nax.add_patch(plt.Rectangle((0.28, 0.00), 0.04, 0.04, edgecolor='r', facecolor='none'))\n\n# Draw a rectangle with a red border\nax.add_patch(plt.Rectangle((0.16, 0.00), 0.04, 0.04, edgecolor='r', facecolor='none'))\n\n# Draw a rectangle with a red border\nax.add_patch(plt.Rectangle((0.22, 0.00), 0.04, 0"}
{"file": "dataset/ori_500/errorpoint_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\nx = [-19.6, -19.5, -19.4, -19.3]\ny1 = [-19.353 + 0.073, -19.257 + 0.028, -19.404 + 0.099, -19.314 + 0.104]\ny2 = [-19.404 + 0.099, -19.257 + 0.028, -19.314 + 0.104, -19.404 + 0.099]\ny3 = [-19.314 + 0.104, -19.257 + 0.028, -19.314 + 0.104, -19.404 + 0.099]\ny4 = [-19.404 + 0.099, -19.257 + 0.028, -19.314 + 0.104, -19.404 + 0.099]\ny5 = [-19.314 + 0.104, -19.257 + 0.028, -19.314 + 0.104, -19.404 + 0.099]\ny6 = [-19.404 + 0.099, -19.257 + 0.028, -19.314 + 0.104, -19.404 + 0.099]\ny7 = [-19.314 + 0.104, -19.257 + 0.028, -19.314 + 0.104, -19.404 + 0.099]\ny8 = [-19.404 + 0.099, -19.257 + 0.028, -19.314 + 0.104, -19.404 + 0.099]\ny9 = [-19.314 + 0.104, -19.257 + 0.028, -19.314 + 0.104, -19.404 + 0.099]\ny10 = [-19.404 + 0.099, -19.257 + 0.028, -19.314 + 0.104, -19.404 + 0.099]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Plot the data\nax.plot(x, y1, label='This work*')\nax.plot(x, y2, label='Shah et al.')\nax.plot(x, y3, label='Shah et al.')\nax.plot(x, y4, label='Banerjee et al.')\nax.plot(x, y5, label='Favale et al.')\nax.plot(x, y6, label='Favale et al.')\nax.plot(x, y7, label='Gomez-Valent')\nax.plot(x, y8, label='Gomez-Valent')\nax.plot(x, y9, label='Benisty et al.')\nax.plot(x, y10, label='Benisty et al.')\n\n# Set the limits of the x-axis\nax.set_xlim(-19.6, -19.3)\n\n# Add a vertical line at x=-19.4\nax.axvline(x=-19.4, color='r', linestyle='-')\n\n# Add a rectangle with a red border\nrect = plt.Rectangle((-19.4, -19.3), 0.1, 0.1, color='pink', edgecolor='red')\nax.add_patch(rect)\n\n# Add a rectangle with a blue border\nrect = plt.Rectangle((-19.4, -19.2), 0.1, 0.1, color='blue', edgecolor='blue')\nax.add_patch(rect)\n\n# Add a rectangle with a green border\nrect = plt.Rectangle((-19.4, -19.1), 0.1, 0.1, color='green', edgecolor='green')\nax.add_patch(rect)\n\n# Add a rectangle with a purple border\nrect = plt.Rectangle((-19.4, -19.0), 0.1, 0.1, color='purple', edgecolor='purple')\nax.add_patch(rect)\n\n# Add a rectangle with a yellow border\nrect = plt.Rectangle((-19.4, -18.9), 0.1, 0.1, color='yellow', edgecolor='yellow')\nax.add_patch(rect)\n\n# Add a rectangle with a orange border\nrect = plt.Rectangle((-19.4, -18.8), 0.1, 0.1, color='orange', edgecolor='orange')\nax.add_patch(rect)\n\n# Add a rectangle with a pink border\nrect = plt.Rectangle((-19.4, -18.7), 0.1, 0.1, color='pink', edgecolor='pink')\nax.add_patch(rect)\n\n# Add a rectangle with a brown border\nrect = plt.Rectangle((-19.4, -18.6), 0.1, 0.1, color='brown', edgecolor='brown')\nax.add_patch(rect)\n\n# Add a rectangle with a gray border\nrect = plt.Rectangle((-19.4, -18.5), 0.1, 0.1, color='gray', edgecolor='gray')\nax.add_patch(rect)\n\n# Add a rectangle with a black border\nrect = plt.Rectangle((-19.4, -18.4), 0.1, 0.1, color='black', edgecolor='black')\nax.add_patch(rect)\n\n# Add a rectangle with a white border\nrect = plt.Rectangle((-19.4, -18.3), 0.1, 0.1, color='white', edgecolor='white')\nax.add_patch(rect)\n\n# Add a rectangle with a cyan border\nrect = plt.Rectangle((-19.4, -18.2), 0.1, 0.1, color='cyan', edgecolor='cyan')\nax.add_patch(rect)\n\n# Add a rectangle with a magenta border\nrect = plt.Rectangle((-19.4, -18.1), 0.1, 0.1, color='magenta', edgecolor='magenta')\nax.add_patch(rect)\n\n# Add a rectangle with a lime border\nrect = plt.Rectangle((-19.4, -18.0), 0.1, 0.1, color='lime', edgecolor='lime')\nax.add_patch(rect)\n\n# Add a rectangle with a teal border\nrect = plt.Rectangle((-19.4, -17.9), 0.1, 0.1, color='teal', edgecolor='teal')\nax.add_patch(rect)\n\n# Add a rectangle with a navy border\nrect = plt.Rectangle((-19.4, -17.8), 0.1, 0.1, color='navy', edgecolor='navy')\nax.add_patch(rect)\n\n# Add a rectangle with a maroon border\nrect = plt.Rectangle((-19.4, -17.7), 0.1, 0.1, color='maroon', edgecolor='maroon')\nax.add_patch(rect)\n\n# Add a rectangle with a olive border\nrect = plt.Rectangle((-19.4, -17.6), 0.1, 0.1, color='olive', edgecolor='olive')\nax.add_patch(rect)\n\n# Add a rectangle with a silver border\nrect = plt.Rectangle((-19.4, -17.5), 0.1, 0.1, color='silver', edgecolor='silver')\nax.add_patch(rect)\n\n# Add a rectangle with a gold border\nrect = plt.Rectangle((-19.4, -17.4), 0.1, 0.1, color='gold', edgecolor='gold')\nax.add_patch(rect)\n\n# Add a rectangle with a bronze border\nrect = plt.Rectangle((-19.4, -17.3), 0.1, 0.1, color='bronze', edgecolor='bronze')\nax.add_patch(rect)\n\n# Add a rectangle with a copper border\nrect = plt.Rectangle((-19.4, -17.2), 0.1, 0.1, color='copper', edgecolor='copper')\nax.add_patch(rect)\n\n# Add a rectangle with a brass border\nrect = plt.Rectangle((-19.4, -17.1), 0.1, 0.1, color='brass', edgecolor='brass')\nax.add_patch(rect)\n\n# Add a rectangle with a pewter border\nrect = plt.Rectangle((-19.4, -17.0), 0.1, 0.1, color='pewter', edgecolor='pewter')\nax.add_patch(rect)\n\n# Add a rectangle with a brass border\nrect = plt.Rectangle((-19.4, -16.9), 0.1, 0.1, color='brass', edgecolor='brass')\nax.add_patch(rect)\n\n# Add a rectangle with a pewter border\nrect = plt.Rectangle((-19.4, -16.8), 0.1, 0.1, color='pewter', edgecolor='pewter')\nax.add_patch(rect)\n\n# Add a rectangle with a brass border\nrect = plt.Rectangle((-19.4, -16.7), 0.1, 0.1, color='brass', edgecolor='brass')\nax.add_patch(rect)\n\n# Add a rectangle with a pewter border\nrect = plt.Rectangle((-19.4, -16.6), 0.1, 0.1, color='pewter', edgecolor='pewter')\nax.add_patch(rect)\n\n# Add a rectangle with a brass border\nrect = plt.Rectangle((-19.4, -16.5), 0.1, 0.1, color='brass', edgecolor='brass')\nax.add_patch(rect)\n\n# Add a rectangle with a pewter border\nrect = plt.Rectangle((-19.4, -16.4), 0.1, 0.1, color='pewter', edgecolor='pewter')\nax.add_patch(rect)\n\n# Add a rectangle with a brass border\nrect = plt.Rectangle((-19.4, -16.3), 0.1, 0.1, color='brass', edgecolor='brass')\nax.add_patch(rect)\n\n# Add a rectangle with a pewter border\nrect = plt.Rectangle((-19.4, -16.2), 0.1, 0.1, color='pewter', edgecolor='pewter')\nax.add_patch(rect)\n\n# Add a rectangle with a brass border\nrect = plt.Rectangle((-19.4, -16.1), 0.1, 0.1, color='brass', edgecolor='brass')\nax.add_patch(rect)\n\n# Add a rectangle with a pewter border\nrect = plt.Rectangle((-19.4, -16.0), 0.1, 0.1, color='pewter', edgecolor='pewter')\nax.add_patch(rect)\n\n# Add a rectangle with a brass border\nrect = plt.Rectangle((-19.4, -15.9), 0.1, 0.1, color='brass', edgecolor='brass')\nax.add_patch(rect)\n\n# Add a rectangle with a pewter border\nrect = plt.Rectangle((-19.4, -15.8), 0.1, 0.1, color='pewter', edgecolor='pewter')\nax.add_patch(rect)\n\n# Add a rectangle with a brass border\nrect = plt.Rectangle((-19.4, -15.7), 0.1, 0.1, color='brass', edgecolor='brass')\nax.add_patch(rect)\n\n# Add a rectangle with a pewter border\nrect = plt.Rectangle((-19.4, -15.6), 0.1, 0.1, color='pewter', edgecolor='pewter')\nax.add_patch(rect)\n\n# Add a rectangle with a brass border\nrect = plt.Rectangle((-19.4, -15.5), 0.1, 0.1, color='brass', edgecolor='brass')\nax.add_patch(rect)\n\n# Add a rectangle with a pewter border\nrect = plt.Rectangle((-19.4, -15.4), 0.1, 0.1, color='pewter', edgecolor='pewter')\nax.add_patch(rect)\n\n# Add a rectangle with a brass border\nrect = plt.Rectangle((-19.4, -15.3), 0.1, 0.1, color='brass', edgecolor='brass')\nax.add_patch(rect)\n\n# Add a rectangle with a pewter border\nrect = plt.Rectangle((-19.4, -15.2), 0.1, 0.1, color='pewter', edgecolor='pewter')\nax.add_patch(rect)\n\n# Add a rectangle with a brass border\nrect = plt.Rectangle((-19.4, -15.1), 0.1, 0.1, color='brass', edgecolor='brass')\nax.add_patch(rect)\n\n# Add a rectangle with a pewter border\nrect = plt.Rectangle((-19.4, -15.0), 0.1, 0.1, color='pewter', edgecolor='pewter')\nax.add_patch(rect)\n\n# Add a rectangle with a brass border\nrect = plt.Rectangle((-19.4, -14.9), 0.1, 0.1, color='brass', edgecolor='brass')\nax.add_patch(rect)\n\n# Add a rectangle with a pewter border\nrect = plt.Rectangle((-19.4, -14.8), 0.1, 0.1, color='pewter', edgecolor='pewter')\nax.add_patch(rect)\n\n# Add a rectangle with a brass border\nrect = plt.Rectangle((-19.4, -14.7), 0.1, 0.1, color='brass', edgecolor='brass')\nax.add_patch(rect)\n\n# Add a rectangle with a pewter border\nrect = plt.Rectangle((-19.4, -14.6), 0.1, 0.1, color='pewter', edgecolor='pewter')\nax.add_patch(rect)\n\n# Add a rectangle with a brass border\nrect = plt.Rectangle((-19.4, -14.5), 0.1, 0.1, color='brass', edgecolor='brass')\nax.add_patch(rect)\n\n# Add a rectangle with a pewter border\nrect = plt.Rectangle((-19.4, -14.4), 0.1, 0.1, color='pewter', edgecolor='pewter')\nax.add_patch(rect)\n\n# Add a rectangle with a brass border\nrect = plt.Rectangle((-19.4, -14.3), 0.1, 0.1, color='brass', edgecolor='brass')\nax.add_patch(rect)\n\n# Add a rectangle with a pewter border\nrect = plt.Rectangle((-19.4, -14.2), 0.1, 0.1, color='pewter', edgecolor='pewter')\nax.add_patch(rect)\n\n# Add a rectangle with a brass border\nrect = plt.Rectangle((-19.4, -14.1), 0.1, 0.1, color='brass', edgecolor='brass')\nax.add_patch(rect)\n\n# Add a rectangle with a pewter border\nrect = plt.Rectangle((-19.4, -14.0), 0.1, 0.1, color='pewter', edgecolor='pewter')\nax.add_patch(rect)\n\n# Add a rectangle with a brass border\nrect = plt.Rectangle((-19.4, -13.9), 0.1, 0.1, color='brass', edgecolor='brass')\nax.add_patch(rect)\n\n# Add a rectangle with a pewter border\nrect = plt.Rectangle((-19.4, -13.8), 0.1, 0.1, color='pewter', edgecolor='pewter')\nax.add_patch(rect)\n\n# Add a rectangle with a brass border\nrect = plt.Rectangle((-19.4, -13.7), 0.1, 0.1, color='brass', edgecolor='brass')\nax.add_patch(rect)\n\n# Add a rectangle with a pewter border\nrect = plt.Rectangle((-19.4, -13.6), 0.1, 0.1, color='pewter', edgecolor='pewter')\nax.add_patch(rect)\n\n# Add a rectangle with a brass border\nrect = plt.Rectangle((-19.4, -13.5), 0.1, 0.1, color='brass', edgecolor='brass')\nax.add_patch(rect)\n\n# Add a rectangle with a pewter border\nrect = plt.Rectangle((-19.4, -13.4), 0.1, 0.1, color='pewter', edgecolor='pewter')\nax.add_patch(rect)\n\n# Add a rectangle with a brass border\nrect = plt.Rectangle((-19.4, -13.3), 0.1, 0.1, color='brass', edgecolor='brass')\nax.add_patch(rect)\n\n# Add a rectangle with a pewter border\nrect = plt.Rectangle((-19.4, -13.2), 0.1, 0.1, color='pewter', edgecolor='pewter')\nax.add_patch(rect)\n\n"}
{"file": "dataset/ori_500/errorpoint_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Set the title of the plot\nax.set_title('Dataset unique shouter count mean')\n\n# Set the x-axis label\nax.set_xlabel('Number of speakers')\n\n# Set the y-axis label\nax.set_ylabel('Unique speaker count mean')\n\n# Draw a rectangle with a blue border\nax.add_patch(plt.Rectangle((0, 0), 10, 10, color='blue', fill=False))\n\n# Draw a rectangle with a red border\nax.add_patch(plt.Rectangle((0, 0), 10, 10, color='red', fill=False))\n\n# Draw a rectangle with a green border\nax.add_patch(plt.Rectangle((0, 0), 10, 10, color='green', fill=False))\n\n# Draw a rectangle with a yellow border\nax.add_patch(plt.Rectangle((0, 0), 10, 10, color='yellow', fill=False))\n\n# Draw a rectangle with a purple border\nax.add_patch(plt.Rectangle((0, 0), 10, 10, color='purple', fill=False))\n\n# Draw a rectangle with a brown border\nax.add_patch(plt.Rectangle((0, 0), 10, 10, color='brown', fill=False))\n\n# Draw a rectangle with a pink border\nax.add_patch(plt.Rectangle((0, 0), 10, 10, color='pink', fill=False))\n\n# Draw a rectangle with a gray border\nax.add_patch(plt.Rectangle((0, 0), 10, 10, color='gray', fill=False))\n\n# Draw a rectangle with a black border\nax.add_patch(plt.Rectangle((0, 0), 10, 10, color='black', fill=False))\n\n# Draw a rectangle with a white border\nax.add_patch(plt.Rectangle((0, 0), 10, 10, color='white', fill=False))\n\n# Draw a rectangle with a orange border\nax.add_patch(plt.Rectangle((0, 0), 10, 10, color='orange', fill=False))\n\n# Draw a rectangle with a cyan border\nax.add_patch(plt.Rectangle((0, 0), 10, 10, color='cyan', fill=False))\n\n# Draw a rectangle with a magenta border\nax.add_patch(plt.Rectangle((0, 0), 10, 10, color='magenta', fill=False))\n\n# Draw a rectangle with a silver border\nax.add_patch(plt.Rectangle((0, 0), 10, 10, color='silver', fill=False))\n\n# Draw a rectangle with a gold border\nax.add_patch(plt.Rectangle((0, 0), 10, 10, color='gold', fill=False))\n\n# Draw a rectangle with a bronze border\nax.add_patch(plt.Rectangle((0, 0), 10, 10, color='bronze', fill=False))\n\n# Draw a rectangle with a navy border\nax.add_patch(plt.Rectangle((0, 0), 10, 10, color='navy', fill=False))\n\n# Draw a rectangle with a maroon border\nax.add_patch(plt.Rectangle((0, 0), 10, 10, color='maroon', fill=False))\n\n# Draw a rectangle with a teal border\nax.add_patch(plt.Rectangle((0, 0), 10, 10, color='teal', fill=False))\n\n# Draw a rectangle with a lime border\nax.add_patch(plt.Rectangle((0, 0), 10, 10, color='lime', fill=False))\n\n# Draw a rectangle with a olive border\nax.add_patch(plt.Rectangle((0, 0), 10, 10, color='olive', fill=False))\n\n# Draw a rectangle with a silver border\nax.add_patch(plt.Rectangle((0, 0), 10, 10, color='silver', fill=False))\n\n# Draw a rectangle with a gold border\nax.add_patch(plt.Rectangle((0, 0), 10, 10, color='gold', fill=False))\n\n# Draw a rectangle with a bronze border\nax.add_patch(plt.Rectangle((0, 0), 10, 10, color='bronze', fill=False))\n\n# Draw a rectangle with a navy border\nax.add_patch(plt.Rectangle((0, 0), 10, 10, color='navy', fill=False))\n\n# Draw a rectangle with a maroon border\nax.add_patch(plt.Rectangle((0, 0), 10, 10, color='maroon', fill=False))\n\n# Draw a rectangle with a teal border\nax.add_patch(plt.Rectangle((0, 0), 10, 10, color='teal', fill=False))\n\n# Draw a rectangle with a lime border\nax.add_patch(plt.Rectangle((0, 0), 10, 10, color='lime', fill=False))\n\n# Draw a rectangle with a olive border\nax.add_patch(plt.Rectangle((0, 0), 10, 10, color='olive', fill=False))\n\n# Draw a rectangle with a silver border\nax.add_patch(plt.Rectangle((0, 0), 10, 10, color='silver', fill=False))\n\n# Draw a rectangle with a gold border\nax.add_patch(plt.Rectangle((0, 0), 10, 10, color='gold', fill=False))\n\n# Draw a rectangle with a bronze border\nax.add_patch(plt.Rectangle((0, 0), 10, 10, color='bronze', fill=False))\n\n# Draw a rectangle with a navy border\nax.add_patch(plt.Rectangle((0, 0), 10, 10, color='navy', fill=False))\n\n# Draw a rectangle with a maroon border\nax.add_patch(plt.Rectangle((0, 0), 10, 10, color='maroon', fill=False))\n\n# Draw a rectangle with a teal border\nax.add_patch(plt.Rectangle((0, 0), 10, 10, color='teal', fill=False))\n\n# Draw a rectangle with a lime border\nax.add_patch(plt.Rectangle((0, 0), 10, 10, color='lime', fill=False))\n\n# Draw a rectangle with a olive border\nax.add_patch(plt.Rectangle((0, 0), 10, 10, color='olive', fill=False))\n\n# Draw a rectangle with a silver border\nax.add_patch(plt.Rectangle((0, 0), 10, 10, color='silver', fill=False))\n\n# Draw a rectangle with a gold border\nax.add_patch(plt.Rectangle((0, 0), 10, 10, color='gold', fill=False))\n\n# Draw a rectangle with a bronze border\nax.add_patch(plt.Rectangle((0, 0), 10, 10, color='bronze', fill=False))\n\n# Draw a rectangle with a navy border\nax.add_patch(plt.Rectangle((0, 0), 10, 10, color='navy', fill=False))\n\n# Draw a rectangle with a maroon border\nax.add_patch(plt.Rectangle((0, 0), 10, 10, color='maroon', fill=False))\n\n# Draw a rectangle with a teal border\nax.add_patch(plt.Rectangle((0, 0), 10, 10, color='teal', fill=False))\n\n# Draw a rectangle with a lime border\nax.add_patch(plt.Rectangle((0, 0), 10, 10, color='lime', fill=False))\n\n# Draw a rectangle with a olive border\nax.add_patch(plt.Rectangle((0, 0), 10, 10, color='olive', fill=False))\n\n# Draw a rectangle with a silver border\nax.add_patch(plt.Rectangle((0, 0), 10, 10, color='silver', fill=False))\n\n# Draw a rectangle with a gold border\nax.add_patch(plt.Rectangle((0, 0), 10, 10, color='gold', fill=False))\n\n# Draw a rectangle with a bronze border\nax.add_patch(plt.Rectangle((0, 0), 10, 10, color='bronze', fill=False))\n\n# Draw a rectangle with a navy border\nax.add_patch(plt.Rectangle((0, 0), 10, 10, color='navy', fill=False))\n\n# Draw a rectangle with a maroon border\nax.add_patch(plt.Rectangle((0, 0), 10, 10, color='maroon', fill=False))\n\n# Draw a rectangle with a teal border\nax.add_patch(plt.Rectangle((0, 0), 10, 10, color='teal', fill=False))\n\n# Draw a rectangle with a lime border\nax.add_patch(plt.Rectangle((0, 0), 10, 10, color='lime', fill=False))\n\n# Draw a rectangle with a olive border\nax.add_patch(plt.Rectangle((0, 0), 10, 10, color='olive', fill=False))\n\n# Draw a rectangle with a silver border\nax.add_patch(plt.Rectangle((0, 0), 10, 10, color='silver', fill=False))\n\n# Draw a rectangle with a gold border\nax.add_patch(plt.Rectangle((0, 0), 10, 10, color='gold', fill=False))\n\n# Draw a rectangle with a bronze border\nax.add_patch(plt.Rectangle((0, 0), 10, 10, color='bronze', fill=False))\n\n# Draw a rectangle with a navy border\nax.add_patch(plt.Rectangle((0, 0), 10, 10, color='navy', fill=False))\n\n# Draw a rectangle with a maroon border\nax.add_patch(plt.Rectangle((0, 0), 10, 10, color='maroon', fill=False))\n\n# Draw a rectangle with a teal border\nax.add_patch(plt.Rectangle((0, 0), 10, 10, color='teal', fill=False))\n\n# Draw a rectangle with a lime border\nax.add_patch(plt.Rectangle((0, 0), 10, 10, color='lime', fill=False))\n\n# Draw a rectangle with a olive border\nax.add_patch(plt.Rectangle((0, 0), 10, 10, color='olive', fill=False))\n\n# Draw a rectangle with a silver border\nax.add_patch(plt.Rectangle((0, 0), 10, 10, color='silver', fill=False))\n\n# Draw a rectangle with a gold border\nax.add_patch(plt.Rectangle((0, 0), 10, 10, color='gold', fill=False))\n\n# Draw a rectangle with a bronze border\nax.add_patch(plt.Rectangle((0, 0), 10, 10, color='bronze', fill=False))\n\n# Draw a rectangle with a navy border\nax.add_patch(plt.Rectangle((0, 0), 10, 10, color='navy', fill=False))\n\n# Draw a rectangle with a maroon border\nax.add_patch(plt.Rectangle((0, 0), 10, 10, color='maroon', fill=False))\n\n# Draw a rectangle with a teal border\nax.add_patch(plt.Rectangle((0, 0), 10, 10, color='teal', fill=False))\n\n# Draw a rectangle with a lime border\nax.add_patch(plt.Rectangle((0, 0), 10, 10, color='lime', fill=False))\n\n# Draw a rectangle with a olive border\nax.add_patch(plt.Rectangle((0, 0), 10, 10, color='olive', fill=False))\n\n# Draw a rectangle with a silver border\nax.add_patch(plt.Rectangle((0, 0), 10, 10, color='silver', fill=False))\n\n# Draw a rectangle with a gold border\nax.add_patch(plt.Rectangle((0, 0), 10, 10, color='gold', fill=False))\n\n# Draw a rectangle with a bronze border\nax.add_patch(plt.Rectangle((0, 0), 10, 10, color='bronze', fill=False))\n\n# Draw a rectangle with a navy border\nax.add_patch(plt.Rectangle((0, 0), 10, 10, color='navy', fill=False))\n\n# Draw a rectangle with a maroon border\nax.add_patch(plt.Rectangle((0, 0), 10, 10, color='maroon', fill=False))\n\n# Draw a rectangle with a teal border\nax.add_patch(plt.Rectangle((0, 0), 10, 10, color='teal', fill=False))\n\n# Draw a rectangle with a lime border\nax.add_patch(plt.Rectangle((0, 0), 10, 10, color='lime', fill=False))\n\n# Draw a rectangle with a olive border\nax.add_patch(plt.Rectangle((0, 0), 10, 10, color='olive', fill=False))\n\n# Draw a rectangle with a silver border\nax.add_patch(plt.Rectangle((0, 0), 10, 10, color='silver', fill=False))\n\n# Draw a rectangle with a gold border\nax.add_patch(plt.Rectangle((0, 0), 10, 10, color='gold', fill=False))\n\n# Draw a rectangle with a bronze border\nax.add_patch(plt.Rectangle((0, 0), 10, 10, color='bronze', fill=False))\n\n# Draw a rectangle with a navy border\nax.add_patch(plt.Rectangle((0, 0), 10, 10, color='navy', fill=False))\n\n# Draw a rectangle with a maroon border\nax.add_patch(plt.Rectangle((0, 0), 10, 10, color='maroon', fill=False))\n\n# Draw a rectangle with a teal border\nax.add_patch(plt.Rectangle((0, 0), 10, 10, color='teal', fill=False))\n\n# Draw a rectangle with a lime border\nax.add_patch(plt.Rectangle((0, 0), 10, 10, color='lime', fill=False))\n\n# Draw a rectangle with a olive border\nax.add_patch(plt.Rectangle((0, 0), 10, 10, color='olive', fill=False))\n\n# Draw a rectangle with a silver border\nax.add_patch(plt.Rectangle((0, 0), 10, 10, color='silver', fill=False))\n\n# Draw a rectangle with a gold border\nax.add_patch(plt.Rectangle((0, 0), 10, 10, color='gold', fill=False))\n\n# Draw a rectangle with a bronze border\nax.add_patch(plt.Rectangle((0, 0), 10, 10, color='bronze', fill=False))\n\n# Draw a rectangle with a navy border\nax.add_patch(plt.Rectangle((0, 0), 10, 10, color='navy', fill=False))\n\n# Draw a rectangle with a maroon border\nax.add_patch(plt.Rectangle((0, 0), 10, 10, color='maroon', fill=False))\n\n# Draw a rectangle with a teal border\nax.add_patch(plt.Rectangle((0, 0), 10, 10, color='teal', fill=False))\n\n# Draw a rectangle with a lime border\nax.add_patch(plt.Rectangle((0, 0), 10, 10, color='lime', fill=False))\n\n# Draw a rectangle with a olive border\nax.add_patch(plt.Rectangle((0, 0), 10, 10, color='olive', fill=False))\n\n# Draw a rectangle with a silver border\nax.add_patch(plt.Rectangle((0, 0), 10, 10, color='silver', fill=False))\n\n# Draw a rectangle with a gold border\nax.add_patch(plt.Rectangle((0, 0), 10, 10, color='gold', fill=False))\n\n# Draw a rectangle with a bronze border\nax.add_patch(plt.Rectangle((0, 0), 10, 10, color='bronze', fill=False))\n\n# Draw a rectangle with a navy border\nax.add_patch(plt.Rectangle((0, 0), 10, 10, color='navy', fill=False))\n\n# Draw a rectangle with a maroon border\nax.add_patch(plt.Rectangle((0, 0), 10, 10, color='maroon', fill=False))\n\n# Draw a rectangle with a teal border\nax.add_patch(plt.Rectangle((0, 0), 10, 10, color='teal', fill=False))\n\n# Draw a rectangle with a lime border\nax.add_patch(plt.Rectangle((0, 0), 10, 10, color='lime', fill=False))\n\n# Draw a rectangle with a olive border\nax.add_patch(plt.Rectangle((0, 0), 10, 10, color='olive', fill=False))\n\n# Draw a rectangle with a silver border\nax.add_patch(plt.Rectangle((0, 0), 10, 10, color='silver', fill=False))\n\n# Draw a rectangle with a gold border\nax.add_patch(plt.Rectangle((0, 0), 10, 10, color='gold', fill=False))\n\n# Draw a rectangle with a bronze border\nax.add_patch(plt.Rectangle((0, 0), 10, 10, color='bronze', fill=False))\n\n# Draw a rectangle with a navy border\nax.add_patch(plt.Rectangle((0, 0), 10, 10, color='navy', fill=False))\n\n# Draw a rectangle with a maroon border\nax.add_patch(plt.Rectangle((0, 0), 10, 10, color='maroon', fill=False))\n\n# Draw a rectangle with a teal border\nax.add_patch(plt.Rectangle((0, 0), 10, 10, color='teal', fill=False))\n\n# Draw a rectangle with a lime border\nax.add_patch(plt.Rectangle((0, 0), 10, 10, color='lime', fill=False))\n\n# Draw a rectangle with a olive border\nax.add_patch(plt.Rectangle((0, 0), 10, 10, color='olive', fill=False))\n\n# Draw a rectangle with a silver border\nax.add_patch(plt.Rectangle((0,"}
{"file": "dataset/ori_500/errorpoint_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Female Face Presence (Fraction of videos)')\n\n# Set the x-axis label\nax.set_xlabel('Country')\n\n# Set the y-axis label\nax.set_ylabel('Fraction of videos')\n\n# Set the x-ticks\nax.set_xticks([0, 1, 2, 3, 4])\nax.set_xticklabels(['KASHMIR', 'COVID/LOCKDOWN', 'SPORTS', 'CHINA', 'PULWAMA-BALAKOT'])\n\n# Set the y-limits\nax.set_ylim(0.05, 0.25)\n\n# Draw a horizontal line at the mean value\nax.axhline(y=0.15, color='blue', linestyle='--')\n\n# Draw a horizontal line at the median value\nax.axhline(y=0.20, color='red', linestyle='--')\n\n# Draw a horizontal line at the dataset mean\nax.axhline(y=0.25, color='grey', linestyle='-')\n\n# Draw a vertical line at the mean value\nax.axvline(x=2, color='blue', linestyle='--')\n\n# Draw a vertical line at the median value\nax.axvline(x=3, color='red', linestyle='--')\n\n# Draw a vertical line at the dataset mean\nax.axvline(x=4, color='grey', linestyle='-')\n\n# Draw a rectangle with a blue border\nax.add_patch(plt.Rectangle((0.95, 0.25), 0.05, 0.05, color='blue', fill=False, linewidth=1))\n\n# Draw a rectangle with a red border\nax.add_patch(plt.Rectangle((1.95, 0.25), 0.05, 0.05, color='red', fill=False, linewidth=1))\n\n# Draw a rectangle with a grey border\nax.add_patch(plt.Rectangle((2.95, 0.25), 0.05, 0.05, color='grey', fill=False, linewidth=1))\n\n# Draw a rectangle with a blue border\nax.add_patch(plt.Rectangle((3.95, 0.25), 0.05, 0.05, color='blue', fill=False, linewidth=1))\n\n# Draw a rectangle with a red border\nax.add_patch(plt.Rectangle((4.95, 0.25), 0.05, 0.05, color='red', fill=False, linewidth=1))\n\n# Draw a rectangle with a grey border\nax.add_patch(plt.Rectangle((5.95, 0.25), 0.05, 0.05, color='grey', fill=False, linewidth=1))\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorpoint_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(9.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Errorbar upper and lower limits')\n\n# Set the x-axis labels\nax.set_xticks([1, 2, 3, 4, 5])\nax.set_xticklabels(['1', '2', '3', '4', '5'])\n\n# Set the y-axis limits\nax.set_ylim(0, 30)\n\n# Draw horizontal lines\nfor i in range(1, 6):\n    ax.axhline(y=i*5, color='grey', linestyle='-')\n\n# Draw vertical lines\nfor i in range(1, 6):\n    ax.axvline(x=i, color='grey', linestyle='-')\n\n# Draw error bars\nerror_bars = [0.5, 1.5, 2.5, 3.5, 4.5]\nfor i in range(1, 6):\n    ax.errorbar(i, i*5, yerr=error_bars[i-1], fmt='o', ecolor='red', capsize=5)\n\n# Draw arrows\narrows = ['^', '>', 'v', '<']\nfor i in range(1, 6):\n    ax.annotate('', xy=(i, i*5), xytext=(i, i*5+error_bars[i-1]), arrowprops=dict(facecolor='black', shrink=0.05))\n    ax.annotate('', xy=(i, i*5), xytext=(i, i*5-error_bars[i-1]), arrowprops=dict(facecolor='black', shrink=0.05))\n    ax.annotate('', xy=(i, i*5), xytext=(i+error_bars[i-1], i*5), arrowprops=dict(facecolor='black', shrink=0.05))\n    ax.annotate('', xy=(i, i*5), xytext=(i-error_bars[i-1], i*5), arrowprops=dict(facecolor='black', shrink=0.05))\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorpoint_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 4))\n\n# Set the title of the plot\nax.set_title('variable, symmetric error')\n\n# Create a scatter plot\nax.scatter([0.5, 1.5, 2.5, 3.5], [1.5, 1.5, 1.5, 1.5], color='purple')\n\n# Create a line plot\nax.plot([0.0, 0.5, 1.0, 1.5, 2.0, 2.5, 3.0, 3.5], [1.0, 1.5, 2.0, 2.5, 3.0, 3.5, 4.0, 4.5], color='purple')\n\n# Set the x-axis label\nax.set_xlabel('x')\n\n# Set the y-axis label\nax.set_ylabel('y')\n\n# Create a second subplot\nax2 = fig.add_subplot(1, 2, 2)\n\n# Set the title of the second plot\nax2.set_title('variable, symmetric error')\n\n# Create a scatter plot\nax2.scatter([0.5, 1.5, 2.5, 3.5], [1.5, 1.5, 1.5, 1.5], color='green')\n\n# Create a line plot\nax2.plot([0.0, 0.5, 1.0, 1.5, 2.0, 2.5, 3.0, 3.5], [1.0, 1.5, 2.0, 2.5, 3.0, 3.5, 4.0, 4.5], color='green')\n\n# Set the x-axis label\nax2.set_xlabel('x')\n\n# Set the y-axis label\nax2.set_ylabel('y')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/errorpoint_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 7))\n\n# Set the title of the plot\nax.set_title('variable, asymmetric error')\n\n# Set the x-axis label\nax.set_xlabel('x')\n\n# Set the y-axis label\nax.set_ylabel('y')\n\n# Set the x-axis limits\nax.set_xlim(0, 10)\n\n# Set the y-axis limits\nax.set_ylim(15, 35)\n\n# Set the x-axis ticks\nax.set_xticks([0, 2, 4, 6, 8, 10])\n\n# Set the y-axis ticks\nax.set_yticks([15, 20, 25, 30, 35])\n\n# Draw a horizontal line at y=25\nax.axhline(y=25, color='yellow', linestyle='-')\n\n# Draw a rectangle with a green border\nax.add_patch(plt.Rectangle((0, 0), 10, 35, fill=False, edgecolor='green'))\n\n# Draw a rectangle with a red border\nax.add_patch(plt.Rectangle((0, 0), 10, 35, fill=False, edgecolor='red'))\n\n# Draw a rectangle with a blue border\nax.add_patch(plt.Rectangle((0, 0), 10, 35, fill=False, edgecolor='blue'))\n\n# Draw a rectangle with a yellow border\nax.add_patch(plt.Rectangle((0, 0), 10, 35, fill=False, edgecolor='yellow'))\n\n# Draw a rectangle with a purple border\nax.add_patch(plt.Rectangle((0, 0), 10, 35, fill=False, edgecolor='purple'))\n\n# Draw a rectangle with a brown border\nax.add_patch(plt.Rectangle((0, 0), 10, 35, fill=False, edgecolor='brown'))\n\n# Draw a rectangle with a pink border\nax.add_patch(plt.Rectangle((0, 0), 10, 35, fill=False, edgecolor='pink'))\n\n# Draw a rectangle with a gray border\nax.add_patch(plt.Rectangle((0, 0), 10, 35, fill=False, edgecolor='gray'))\n\n# Draw a rectangle with a silver border\nax.add_patch(plt.Rectangle((0, 0), 10, 35, fill=False, edgecolor='silver'))\n\n# Draw a rectangle with a gold border\nax.add_patch(plt.Rectangle((0, 0), 10, 35, fill=False, edgecolor='gold'))\n\n# Draw a rectangle with a maroon border\nax.add_patch(plt.Rectangle((0, 0), 10, 35, fill=False, edgecolor='maroon'))\n\n# Draw a rectangle with a teal border\nax.add_patch(plt.Rectangle((0, 0), 10, 35, fill=False, edgecolor='teal'))\n\n# Draw a rectangle with a navy border\nax.add_patch(plt.Rectangle((0, 0), 10, 35, fill=False, edgecolor='navy'))\n\n# Draw a rectangle with a olive border\nax.add_patch(plt.Rectangle((0, 0), 10, 35, fill=False, edgecolor='olive'))\n\n# Draw a rectangle with a lime border\nax.add_patch(plt.Rectangle((0, 0), 10, 35, fill=False, edgecolor='lime'))\n\n# Draw a rectangle with a coral border\nax.add_patch(plt.Rectangle((0, 0), 10, 35, fill=False, edgecolor='coral'))\n\n# Draw a rectangle with a silver border\nax.add_patch(plt.Rectangle((0, 0), 10, 35, fill=False, edgecolor='silver'))\n\n# Draw a rectangle with a silver border\nax.add_patch(plt.Rectangle((0, 0), 10, 35, fill=False, edgecolor='silver'))\n\n# Draw a rectangle with a silver border\nax.add_patch(plt.Rectangle((0, 0), 10, 35, fill=False, edgecolor='silver'))\n\n# Draw a rectangle with a silver border\nax.add_patch(plt.Rectangle((0, 0), 10, 35, fill=False, edgecolor='silver'))\n\n# Draw a rectangle with a silver border\nax.add_patch(plt.Rectangle((0, 0), 10, 35, fill=False, edgecolor='silver'))\n\n# Draw a rectangle with a silver border\nax.add_patch(plt.Rectangle((0, 0), 10, 35, fill=False, edgecolor='silver'))\n\n# Draw a rectangle with a silver border\nax.add_patch(plt.Rectangle((0, 0), 10, 35, fill=False, edgecolor='silver'))\n\n# Draw a rectangle with a silver border\nax.add_patch(plt.Rectangle((0, 0), 10, 35, fill=False, edgecolor='silver'))\n\n# Draw a rectangle with a silver border\nax.add_patch(plt.Rectangle((0, 0), 10, 35, fill=False, edgecolor='silver'))\n\n# Draw a rectangle with a silver border\nax.add_patch(plt.Rectangle((0, 0), 10, 35, fill=False, edgecolor='silver'))\n\n# Draw a rectangle with a silver border\nax.add_patch(plt.Rectangle((0, 0), 10, 35, fill=False, edgecolor='silver'))\n\n# Draw a rectangle with a silver border\nax.add_patch(plt.Rectangle((0, 0), 10, 35, fill=False, edgecolor='silver'))\n\n# Draw a rectangle with a silver border\nax.add_patch(plt.Rectangle((0, 0), 10, 35, fill=False, edgecolor='silver'))\n\n# Draw a rectangle with a silver border\nax.add_patch(plt.Rectangle((0, 0), 10, 35, fill=False, edgecolor='silver'))\n\n# Draw a rectangle with a silver border\nax.add_patch(plt.Rectangle((0, 0), 10, 35, fill=False, edgecolor='silver'))\n\n# Draw a rectangle with a silver border\nax.add_patch(plt.Rectangle((0, 0), 10, 35, fill=False, edgecolor='silver'))\n\n# Draw a rectangle with a silver border\nax.add_patch(plt.Rectangle((0, 0), 10, 35, fill=False, edgecolor='silver'))\n\n# Draw a rectangle with a silver border\nax.add_patch(plt.Rectangle((0, 0), 10, 35, fill=False, edgecolor='silver'))\n\n# Draw a rectangle with a silver border\nax.add_patch(plt.Rectangle((0, 0), 10, 35, fill=False, edgecolor='silver'))\n\n# Draw a rectangle with a silver border\nax.add_patch(plt.Rectangle((0, 0), 10, 35, fill=False, edgecolor='silver'))\n\n# Draw a rectangle with a silver border\nax.add_patch(plt.Rectangle((0, 0), 10, 35, fill=False, edgecolor='silver'))\n\n# Draw a rectangle with a silver border\nax.add_patch(plt.Rectangle((0, 0), 10, 35, fill=False, edgecolor='silver'))\n\n# Draw a rectangle with a silver border\nax.add_patch(plt.Rectangle((0, 0), 10, 35, fill=False, edgecolor='silver'))\n\n# Draw a rectangle with a silver border\nax.add_patch(plt.Rectangle((0, 0), 10, 35, fill=False, edgecolor='silver'))\n\n# Draw a rectangle with a silver border\nax.add_patch(plt.Rectangle((0, 0), 10, 35, fill=False, edgecolor='silver'))\n\n# Draw a rectangle with a silver border\nax.add_patch(plt.Rectangle((0, 0), 10, 35, fill=False, edgecolor='silver'))\n\n# Draw a rectangle with a silver border\nax.add_patch(plt.Rectangle((0, 0), 10, 35, fill=False, edgecolor='silver'))\n\n# Draw a rectangle with a silver border\nax.add_patch(plt.Rectangle((0, 0), 10, 35, fill=False, edgecolor='silver'))\n\n# Draw a rectangle with a silver border\nax.add_patch(plt.Rectangle((0, 0), 10, 35, fill=False, edgecolor='silver'))\n\n# Draw a rectangle with a silver border\nax.add_patch(plt.Rectangle((0, 0), 10, 35, fill=False, edgecolor='silver'))\n\n# Draw a rectangle with a silver border\nax.add_patch(plt.Rectangle((0, 0), 10, 35, fill=False, edgecolor='silver'))\n\n# Draw a rectangle with a silver border\nax.add_patch(plt.Rectangle((0, 0), 10, 35, fill=False, edgecolor='silver'))\n\n# Draw a rectangle with a silver border\nax.add_patch(plt.Rectangle((0, 0), 10, 35, fill=False, edgecolor='silver'))\n\n# Draw a rectangle with a silver border\nax.add_patch(plt.Rectangle((0, 0), 10, 35, fill=False, edgecolor='silver'))\n\n# Draw a rectangle with a silver border\nax.add_patch(plt.Rectangle((0, 0), 10, 35, fill=False, edgecolor='silver'))\n\n# Draw a rectangle with a silver border\nax.add_patch(plt.Rectangle((0, 0), 10, 35, fill=False, edgecolor='silver'))\n\n# Draw a rectangle with a silver border\nax.add_patch(plt.Rectangle((0, 0), 10, 35, fill=False, edgecolor='silver'))\n\n# Draw a rectangle with a silver border\nax.add_patch(plt.Rectangle((0, 0), 10, 35, fill=False, edgecolor='silver'))\n\n# Draw a rectangle with a silver border\nax.add_patch(plt.Rectangle((0, 0), 10, 35, fill=False, edgecolor='silver'))\n\n# Draw a rectangle with a silver border\nax.add_patch(plt.Rectangle((0, 0), 10, 35, fill=False, edgecolor='silver'))\n\n# Draw a rectangle with a silver border\nax.add_patch(plt.Rectangle((0, 0), 10, 35, fill=False, edgecolor='silver'))\n\n# Draw a rectangle with a silver border\nax.add_patch(plt.Rectangle((0, 0), 10, 35, fill=False, edgecolor='silver'))\n\n# Draw a rectangle with a silver border\nax.add_patch(plt.Rectangle((0, 0), 10, 35, fill=False, edgecolor='silver'))\n\n# Draw a rectangle with a silver border\nax.add_patch(plt.Rectangle((0, 0), 10, 35, fill=False, edgecolor='silver'))\n\n# Draw a rectangle with a silver border\nax.add_patch(plt.Rectangle((0, 0), 10, 35, fill=False, edgecolor='silver'))\n\n# Draw a rectangle with a silver border\nax.add_patch(plt.Rectangle((0, 0), 10, 35, fill=False, edgecolor='silver'))\n\n# Draw a rectangle with a silver border\nax.add_patch(plt.Rectangle((0, 0), 10, 35, fill=False, edgecolor='silver'))\n\n# Draw a rectangle with a silver border\nax.add_patch(plt.Rectangle((0, 0), 10, 35, fill=False, edgecolor='silver'))\n\n# Draw a rectangle with a silver border\nax.add_patch(plt.Rectangle((0, 0), 10, 35, fill=False, edgecolor='silver'))\n\n# Draw a rectangle with a silver border\nax.add_patch(plt.Rectangle((0, 0), 10, 35, fill=False, edgecolor='silver'))\n\n# Draw a rectangle with a silver border\nax.add_patch(plt.Rectangle((0, 0), 10, 35, fill=False, edgecolor='silver'))\n\n# Draw a rectangle with a silver border\nax.add_patch(plt.Rectangle((0, 0), 10, 35, fill=False, edgecolor='silver'))\n\n# Draw a rectangle with a silver border\nax.add_patch(plt.Rectangle((0, 0), 10, 35, fill=False, edgecolor='silver'))\n\n# Draw a rectangle with a silver border\nax.add_patch(plt.Rectangle((0, 0), 10, 35, fill=False, edgecolor='silver'))\n\n# Draw a rectangle with a silver border\nax.add_patch(plt.Rectangle((0, 0), 10, 35, fill=False, edgecolor='silver'))\n\n# Draw a rectangle with a silver border\nax.add_patch(plt.Rectangle((0, 0), 10, 35, fill=False, edgecolor='silver'))\n\n# Draw a rectangle with a silver border\nax.add_patch(plt.Rectangle((0, 0), 10, 35, fill=False, edgecolor='silver'))\n\n# Draw a rectangle with a silver border\nax.add_patch(plt.Rectangle((0, 0), 10, 35, fill=False, edgecolor='silver'))\n\n# Draw a rectangle with a silver border\nax.add_patch(plt.Rectangle((0, 0), 10, 35, fill=False, edgecolor='silver'))\n\n# Draw a rectangle with a silver border\nax.add_patch(plt.Rectangle((0, 0), 10, 35, fill=False, edgecolor='silver'))\n\n# Draw a rectangle with a silver border\nax.add_patch(plt.Rectangle((0, 0), 10, 35, fill=False, edgecolor='silver'))\n\n# Draw a rectangle with a silver border\nax.add_patch(plt.Rectangle((0, 0), 10, 35, fill=False, edgecolor='silver'))\n\n# Draw a rectangle with a silver border\nax.add_patch(plt.Rectangle((0, 0), 10, 35, fill=False, edgecolor='silver'))\n\n# Draw a rectangle with a silver border\nax.add_patch(plt.Rectangle((0, 0), 10, 35, fill=False, edgecolor='silver'))\n\n# Draw a rectangle with a silver border\nax.add_patch(plt.Rectangle((0, 0), 10, 35, fill=False, edgecolor='silver'))\n\n# Draw a rectangle with a silver border\nax.add_patch(plt.Rectangle((0, 0), 10, 35, fill=False, edgecolor='silver'))\n\n# Draw a rectangle with a silver border\nax.add_patch(plt.Rectangle((0, 0), 10, 35, fill=False, edgecolor='silver'))\n\n# Draw a rectangle with a silver border\nax.add_patch(plt.Rectangle((0, 0), 10, 35, fill=False, edgecolor='silver'))\n\n# Draw a rectangle with a silver border\nax.add_patch(plt.Rectangle((0, 0), 10, 35, fill=False, edgecolor='silver'))\n\n# Draw a rectangle with a silver border\nax.add_patch(plt.Rectangle((0, 0), 10, 35, fill=False, edgecolor='silver'))\n\n# Draw a rectangle with a silver border\nax.add_patch(plt.Rectangle((0, 0), 10, 35, fill=False, edgecolor='silver'))\n\n# Draw a rectangle with a silver border\nax.add_patch(plt.Rectangle((0, 0), 10, 35, fill=False, edgecolor='silver'))\n\n# Draw a rectangle with a silver border\nax.add_patch(plt.Rectangle((0, 0), 10, 35, fill=False, edgecolor='silver'))\n\n# Draw a rectangle with a silver border\nax.add_patch(plt.Rectangle((0, 0), 10, 35, fill=False, edgecolor='silver'))\n\n# Draw a rectangle with a silver border\nax.add_patch(plt.Rectangle((0, 0), 10, 35, fill=False, edgecolor='silver'))\n\n# Draw a rectangle with a silver border\nax.add_patch(plt.Rectangle((0, 0), 10, 35, fill=False, edgecolor='silver'))\n\n# Draw a rectangle with a silver border\nax.add_patch(plt.Rectangle((0, 0), 10, 35, fill=False, edgecolor='silver'))\n\n# Draw a rectangle with a silver border\nax.add_patch(plt.Rectangle((0, 0), 10, 35, fill=False, edgecolor='silver'))\n\n# Draw a rectangle with a silver border\nax.add_patch(plt.Rectangle((0, 0), 10, 35, fill=False, edgecolor='silver'))\n\n# Draw a rectangle with a silver border\nax.add_patch(plt.Rectangle((0, 0), 10, 35, fill=False, edgecolor='silver'))\n\n# Draw a rectangle with a silver border\nax.add_patch(plt.Rectangle((0, 0), 10, 35, fill=False, edgecolor='silver'))\n\n# Draw a rectangle with a silver border\nax.add_patch(plt.Rectangle((0, 0), 10, 35, fill=False, edgecolor='silver'))\n\n# Draw a rectangle with a silver border\nax.add_patch(plt.Rectangle((0, 0), 10, 35, fill=False, edgecolor='silver'))\n\n# Draw a rectangle with a silver border\nax.add_patch(plt.Rectangle((0, 0), 10, 35, fill=False, edgecolor='silver'))\n\n# Draw a rectangle with a silver border\nax.add_patch(plt.Rectangle((0, 0), 10, 35, fill=False, edgecolor='silver'))\n\n# Draw a rectangle with a silver border\nax.add_patch(plt.Rectangle((0, 0), 10, 35, fill=False, edgecolor='silver'))\n\n# Draw a rectangle with a silver border\nax.add_patch(plt.Rectangle((0, 0), 10, 35, fill=False, edgecolor='silver'))\n\n# Draw a rectangle with a silver border\nax.add_patch(plt.Rectangle((0, 0), 10, 35, fill=False, edgecolor='silver'))\n\n# Draw a rectangle with a silver border\nax.add_patch(plt.Rectangle((0, 0), 10, 35, fill=False, edgecolor='silver'))\n\n# Draw a rectangle with a silver border\n"}
{"file": "dataset/ori_500/errorpoint_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 7))\n\n# Set the title of the plot\nax.set_title('variable, asymmetric error')\n\n# Define the x-axis values\nx_values = [0, 5, 10, 15, 20]\n\n# Define the y-axis values\ny_values = [-2.1, -2.6, -2.9, -1.2, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -1.3, -2.7, -1.0, -1.1, -"}
{"file": "dataset/ori_500/graph_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\nax.plot([0, 1], [0, 1], 'k-')\nax.plot([1, 0], [0, 1], 'k-')\nax.plot([0, 0], [0, 1], 'k-')\nax.plot([1, 1], [0, 1], 'k-')\nax.plot([0, 0.5], [0, 0.5], 'k-')\nax.plot([1, 0.5], [0, 0.5], 'k-')\nax.plot([0, 0.5], [1, 0.5], 'k-')\nax.plot([1, 0.5], [1, 0.5], 'k-')\nax.plot([0, 0.25], [0, 0.25], 'k-')\nax.plot([1, 0.25], [0, 0.25], 'k-')\nax.plot([0, 0.25], [1, 0.25], 'k-')\nax.plot([1, 0.25], [1, 0.25], 'k-')\nax.plot([0, 0.75], [0, 0.75], 'k-')\nax.plot([1, 0.75], [0, 0.75], 'k-')\nax.plot([0, 0.75], [1, 0.75], 'k-')\nax.plot([1, 0.75], [1, 0.75], 'k-')\nax.plot([0, 0.375], [0, 0.375], 'k-')\nax.plot([1, 0.375], [0, 0.375], 'k-')\nax.plot([0, 0.375], [1, 0.375], 'k-')\nax.plot([1, 0.375], [1, 0.375], 'k-')\nax.plot([0, 0.625], [0, 0.625], 'k-')\nax.plot([1, 0.625], [0, 0.625], 'k-')\nax.plot([0, 0.625], [1, 0.625], 'k-')\nax.plot([1, 0.625], [1, 0.625], 'k-')\nax.plot([0, 0.125], [0, 0.125], 'k-')\nax.plot([1, 0.125], [0, 0.125], 'k-')\nax.plot([0, 0.125], [1, 0.125], 'k-')\nax.plot([1, 0.125], [1, 0.125], 'k-')\nax.plot([0, 0.875], [0, 0.875], 'k-')\nax.plot([1, 0.875], [0, 0.875], 'k-')\nax.plot([0, 0.875], [1, 0.875], 'k-')\nax.plot([1, 0.875], [1, 0.875], 'k-')\nax.plot([0, 0.4375], [0, 0.4375], 'k-')\nax.plot([1, 0.4375], [0, 0.4375], 'k-')\nax.plot([0, 0.4375], [1, 0.4375], 'k-')\nax.plot([1, 0.4375], [1, 0.4375], 'k-')\nax.plot([0, 0.5625], [0, 0.5625], 'k-')\nax.plot([1, 0.5625], [0, 0.5625], 'k-')\nax.plot([0, 0.5625], [1, 0.5625], 'k-')\nax.plot([1, 0.5625], [1, 0.5625], 'k-')\nax.plot([0, 0.21875], [0, 0.21875], 'k-')\nax.plot([1, 0.21875], [0, 0.21875], 'k-')\nax.plot([0, 0.21875], [1, 0.21875], 'k-')\nax.plot([1, 0.21875], [1, 0.21875], 'k-')\nax.plot([0, 0.78125], [0, 0.78125], 'k-')\nax.plot([1, 0.78125], [0, 0.78125], 'k-')\nax.plot([0, 0.78125], [1, 0.78125], 'k-')\nax.plot([1, 0.78125], [1, 0.78125], 'k-')\nax.plot([0, 0.34375], [0, 0.34375], 'k-')\nax.plot([1, 0.34375], [0, 0.34375], 'k-')\nax.plot([0, 0.34375], [1, 0.34375], 'k-')\nax.plot([1, 0.34375], [1, 0.34375], 'k-')\nax.plot([0, 0.65625], [0, 0.65625], 'k-')\nax.plot([1, 0.65625], [0, 0.65625], 'k-')\nax.plot([0, 0.65625], [1, 0.65625], 'k-')\nax.plot([1, 0.65625], [1, 0.65625], 'k-')\nax.plot([0, 0.109375], [0, 0.109375], 'k-')\nax.plot([1, 0.109375], [0, 0.109375], 'k-')\nax.plot([0, 0.109375], [1, 0.109375], 'k-')\nax.plot([1, 0.109375], [1, 0.109375], 'k-')\nax.plot([0, 0.890625], [0, 0.890625], 'k-')\nax.plot([1, 0.890625], [0, 0.890625], 'k-')\nax.plot([0, 0.890625], [1, 0.890625], 'k-')\nax.plot([1, 0.890625], [1, 0.890625], 'k-')\nax.plot([0, 0.4453125], [0, 0.4453125], 'k-')\nax.plot([1, 0.4453125], [0, 0.4453125], 'k-')\nax.plot([0, 0.4453125], [1, 0.4453125], 'k-')\nax.plot([1, 0.4453125], [1, 0.4453125], 'k-')\nax.plot([0, 0.5546875], [0, 0.5546875], 'k-')\nax.plot([1, 0.5546875], [0, 0.5546875], 'k-')\nax.plot([0, 0.5546875], [1, 0.5546875], 'k-')\nax.plot([1, 0.5546875], [1, 0.5546875], 'k-')\nax.plot([0, 0.2265625], [0, 0.2265625], 'k-')\nax.plot([1, 0.2265625], [0, 0.2265625], 'k-')\nax.plot([0, 0.2265625], [1, 0.2265625], 'k-')\nax.plot([1, 0.2265625], [1, 0.2265625], 'k-')\nax.plot([0, 0.7734375], [0, 0.7734375], 'k-')\nax.plot([1, 0.7734375], [0, 0.7734375], 'k-')\nax.plot([0, 0.7734375], [1, 0.7734375], 'k-')\nax.plot([1, 0.7734375], [1, 0.7734375], 'k-')\nax.plot([0, 0.3671875], [0, 0.3671875], 'k-')\nax.plot([1, 0.3671875], [0, 0.3671875], 'k-')\nax.plot([0, 0.3671875], [1, 0.3671875], 'k-')\nax.plot([1, 0.3671875], [1, 0.3671875], 'k-')\nax.plot([0, 0.6328125], [0, 0.6328125], 'k-')\nax.plot([1, 0.6328125], [0, 0.6328125], 'k-')\nax.plot([0, 0.6328125], [1, 0.6328125], 'k-')\nax.plot([1, 0.6328125], [1, 0.6328125], 'k-')\nax.plot([0, 0.1171875], [0, 0.1171875], 'k-')\nax.plot([1, 0.1171875], [0, 0.1171875], 'k-')\nax.plot([0, 0.1171875], [1, 0.1171875], 'k-')\nax.plot([1, 0.1171875], [1, 0.1171875], 'k-')\nax.plot([0, 0.8828125], [0, 0.8828125], 'k-')\nax.plot([1, 0.8828125], [0, 0.8828125], 'k-')\nax.plot([0, 0.8828125], [1, 0.8828125], 'k-')\nax.plot([1, 0.8828125], [1, 0.8828125], 'k-')\nax.plot([0, 0.44140625], [0, 0.44140625], 'k-')\nax.plot([1, 0.44140625], [0, 0.44140625], 'k-')\nax.plot([0, 0.44140625], [1, 0.44140625], 'k-')\nax.plot([1, 0.44140625], [1, 0.44140625], 'k-')\nax.plot([0, 0.55859375], [0, 0.55859375], 'k-')\nax.plot([1, 0.55859375], [0, 0.55859375], 'k-')\nax.plot([0, 0.55859375], [1, 0.55859375], 'k-')\nax.plot([1, 0.55859375], [1, 0.55859375], 'k-')\nax.plot([0, 0.229296875], [0, 0.229296875], 'k-')\nax.plot([1, 0.229296875], [0, 0.229296875], 'k-')\nax.plot([0, 0.229296875], [1, 0.229296875], 'k-')\nax.plot([1, 0.229296875], [1, 0.229296875], 'k-')\nax.plot([0, 0.770703125], [0, 0.770703125], 'k-')\nax.plot([1, 0.770703125], [0, 0.770703125], 'k-')\nax.plot([0, 0.770703125], [1, 0.770703125], 'k-')\nax.plot([1, 0.770703125], [1, 0.770703125], 'k-')\nax.plot([0, 0.365234375], [0, 0.365234375], 'k-')\nax.plot([1, 0.365234375], [0, 0.365234375], 'k-')\nax.plot([0, 0.365234375], [1, 0.365234375], 'k-')\nax.plot([1, 0.365234375], [1, 0.365234375], 'k-')\nax.plot([0, 0.634765625], [0, 0.634765625], 'k-')\nax.plot([1, 0.634765625], [0, 0.634765625], 'k-')\nax.plot([0, 0.634765625], [1, 0.634765625], 'k-')\nax.plot([1, 0.634765625], [1, 0.634765625], 'k-')\nax.plot([0, 0.115234375], [0, 0.115234375], 'k-')\nax.plot([1, 0.115234375], [0, 0.115234375], 'k-')\nax.plot([0, 0.115234375], [1, 0.115234375], 'k-')\nax.plot([1, 0.115234375], [1, 0.115234375], 'k-')\nax.plot([0, 0.884765625], [0, 0.884765625], 'k-')\nax.plot([1, 0.884765625], [0, 0.884765625], 'k-')\nax.plot([0, 0.884765625], [1, 0.884765625], 'k-')\nax.plot([1, 0.884765625], [1, 0.884765625], 'k-')\nax.plot([0, 0.4423828125], [0, 0.4423828125], 'k-')\nax.plot([1, 0.4"}
{"file": "dataset/ori_500/graph_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Define the coordinates of the points\nx = np.linspace(0, 10, 100)\ny = np.sin(x)\n\n# Plot the points\nax.plot(x, y, 'o')\n\n# Set the title and labels\nax.set_title('Sine Wave')\nax.set_xlabel('X-axis')\nax.set_ylabel('Y-axis')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/graph_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Define the circle parameters\ncircle_radius = 5\ncircle_center = (0, 0)\n\n# Create a circle patch\ncircle = plt.Circle(circle_center, circle_radius, color='yellow', fill=False)\nax.add_patch(circle)\n\n# Define the points on the circle\npoints = np.linspace(0, 2*np.pi, 12)\nx = circle_radius * np.cos(points)\ny = circle_radius * np.sin(points)\n\n# Plot the points\nax.plot(x, y, 'ro-')\n\n# Set the aspect ratio to be equal so that the circle is not distorted\nax.set_aspect('equal')\n\n# Remove the axes\nax.axis('off')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/graph_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Define the coordinates for the vertices of the rectangle\nx = [0, 4, 4, 0, 0]\ny = [0, 0, 2, 2, 0]\n\n# Plot the rectangle\nax.plot(x, y, 'k-')\n\n# Define the coordinates for the circle\ncircle_x = np.linspace(0, 4, 100)\ncircle_y = np.sqrt(16 - (circle_x - 2)**2)\n\n# Plot the circle\nax.plot(circle_x, circle_y, 'b-')\nax.plot(circle_x, -circle_y, 'b-')\n\n# Define the coordinates for the circles\ncircle1_x = np.linspace(-1, 1, 100)\ncircle1_y = np.sqrt(1 - circle1_x**2)\n\n# Plot the circles\nax.plot(circle1_x, circle1_y, 'r-')\nax.plot(circle1_x, -circle1_y, 'r-')\n\ncircle2_x = np.linspace(3, 5, 100)\ncircle2_y = np.sqrt(1 - (circle2_x - 4)**2)\n\n# Plot the circles\nax.plot(circle2_x, circle2_y, 'r-')\nax.plot(circle2_x, -circle2_y, 'r-')\n\n# Set the aspect ratio to be equal\nax.set_aspect('equal')\n\n# Set the limits of the plot\nax.set_xlim(-2, 6)\nax.set_ylim(-2, 3)\n\n# Set the title and labels\nax.set_title('Rectangle with Circles')\nax.set_xlabel('X-axis')\nax.set_ylabel('Y-axis')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/graph_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Plot triangle\nax.plot([0, 2, 1], [0, 0, 2], 'k-')\n\n# Plot circle\ncircle = plt.Circle((1, 1), 0.5, color='orange')\nax.add_artist(circle)\n\n# Plot rectangle\nax.plot([0, 2, 2, 0, 0], [0, 0, 1, 1, 0], 'k-')\n\n# Set limits and aspect ratio\nax.set_xlim(-1, 3)\nax.set_ylim(-1, 3)\nax.set_aspect('equal')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Set the title of the plot\nax.set_title('CoreNLP')\n\n# Set the x-axis label\nax.set_xlabel('Stanza')\n\n# Set the y-axis label\nax.set_ylabel('Score')\n\n# Create a bar chart with the data\nax.bar(['CoreNLP', 'Stanza', 'Biaffine', 'StackPointer', 'TowerParse'], [0.61, 0.74, 0.70, 0.70, 0.57], color='pink')\nax.bar(['CoreNLP', 'Stanza', 'Biaffine', 'StackPointer', 'TowerParse'], [0.69, 0.64, 0.67, 0.62, 0.45], color='orange')\nax.bar(['CoreNLP', 'Stanza', 'Biaffine', 'StackPointer', 'TowerParse'], [1.00, 0.69, 0.77, 0.88, 0.62], color='red')\nax.bar(['CoreNLP', 'Stanza', 'Biaffine', 'StackPointer', 'TowerParse'], [1.00, 0.72, 0.80, 0.90, 0.54], color='purple')\nax.bar(['CoreNLP', 'Stanza', 'Biaffine', 'StackPointer', 'TowerParse'], [1.00, 0.74, 0.82, 0.92, 0.69], color='brown')\nax.bar(['CoreNLP', 'Stanza', 'Biaffine', 'StackPointer', 'TowerParse'], [1.00, 0.76, 0.84, 0.94, 0.70], color='green')\nax.bar(['CoreNLP', 'Stanza', 'Biaffine', 'StackPointer', 'TowerParse'], [1.00, 0.78, 0.86, 0.96, 0.72], color='blue')\nax.bar(['CoreNLP', 'Stanza', 'Biaffine', 'StackPointer', 'TowerParse'], [1.00, 0.80, 0.88, 0.98, 0.74], color='cyan')\nax.bar(['CoreNLP', 'Stanza', 'Biaffine', 'StackPointer', 'TowerParse'], [1.00, 0.82, 0.90, 1.00, 0.76], color='magenta')\nax.bar(['CoreNLP', 'Stanza', 'Biaffine', 'StackPointer', 'TowerParse'], [1.00, 0.84, 0.92, 1.00, 0.78], color='yellow')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 8))\n\n# Set the title of the plot\nax.set_title('Voting Results')\n\n# Define the categories and their corresponding colors\ncategories = ['Villager', 'Hunter', 'Witch', 'Seer', 'Wererewolf']\ncolors = ['blue', 'cyan', 'orange', 'cyan', 'blue']\n\n# Create a bar chart for each category\nfor i, category in enumerate(categories):\n    ax.bar(category, 100, color=colors[i])\n\n# Set the x-axis label\nax.set_xlabel('Voter')\n\n# Set the y-axis label\nax.set_ylabel('Percentage')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Players')\n\n# Set the x-axis label\nax.set_xlabel('Players')\n\n# Set the y-axis label\nax.set_ylabel('Player Rating')\n\n# Set the color of the x-axis labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis labels\nax.tick_params(axis='y', colors='red')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='green')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='purple')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='orange')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='yellow')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='cyan')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='magenta')\n\n# Set the color of the x-axis tick lines\nax.tick_params(axis='x', colors='lime')\n\n# Set the color of the y-axis tick lines\nax.tick_params(axis='y', colors='pink')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='brown')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='grey')\n\n# Set the color of the x-axis tick lines\nax.tick_params(axis='x', colors='silver')\n\n# Set the color of the y-axis tick lines\nax.tick_params(axis='y', colors='gold')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='white')\n\n# Set the color of the x-axis tick lines\nax.tick_params(axis='x', colors='navy')\n\n# Set the color of the y-axis tick lines\nax.tick_params(axis='y', colors='maroon')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='olive')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='indigo')\n\n# Set the color of the x-axis tick lines\nax.tick_params(axis='x', colors='violet')\n\n# Set the color of the y-axis tick lines\nax.tick_params(axis='y', colors='azure')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='beige')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='bisque')\n\n# Set the color of the x-axis tick lines\nax.tick_params(axis='x', colors='blanchedalmond')\n\n# Set the color of the y-axis tick lines\nax.tick_params(axis='y', colors='burlywood')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='cadetblue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='chartreuse')\n\n# Set the color of the x-axis tick lines\nax.tick_params(axis='x', colors='chocolate')\n\n# Set the color of the y-axis tick lines\nax.tick_params(axis='y', colors='coral')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='cornflowerblue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='cornsilk')\n\n# Set the color of the x-axis tick lines\nax.tick_params(axis='x', colors='crimson')\n\n# Set the color of the y-axis tick lines\nax.tick_params(axis='y', colors='cyan')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='darkblue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='darkcyan')\n\n# Set the color of the x-axis tick lines\nax.tick_params(axis='x', colors='darkgoldenrod')\n\n# Set the color of the y-axis tick lines\nax.tick_params(axis='y', colors='darkgray')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='darkgreen')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='darkgrey')\n\n# Set the color of the x-axis tick lines\nax.tick_params(axis='x', colors='darkkhaki')\n\n# Set the color of the y-axis tick lines\nax.tick_params(axis='y', colors='darkmagenta')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='darkolivegreen')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='darkorange')\n\n# Set the color of the x-axis tick lines\nax.tick_params(axis='x', colors='darkorchid')\n\n# Set the color of the y-axis tick lines\nax.tick_params(axis='y', colors='darkred')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='darksalmon')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='darkseagreen')\n\n# Set the color of the x-axis tick lines\nax.tick_params(axis='x', colors='darkslateblue')\n\n# Set the color of the y-axis tick lines\nax.tick_params(axis='y', colors='darkslategray')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='darkslategrey')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='darkturquoise')\n\n# Set the color of the x-axis tick lines\nax.tick_params(axis='x', colors='darkviolet')\n\n# Set the color of the y-axis tick lines\nax.tick_params(axis='y', colors='deeppink')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='deepskyblue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='dimgray')\n\n# Set the color of the x-axis tick lines\nax.tick_params(axis='x', colors='dimgrey')\n\n# Set the color of the y-axis tick lines\nax.tick_params(axis='y', colors='dodgerblue')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='firebrick')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='floralwhite')\n\n# Set the color of the x-axis tick lines\nax.tick_params(axis='x', colors='forestgreen')\n\n# Set the color of the y-axis tick lines\nax.tick_params(axis='y', colors='fuchsia')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='gainsboro')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='ghostwhite')\n\n# Set the color of the x-axis tick lines\nax.tick_params(axis='x', colors='gold')\n\n# Set the color of the y-axis tick lines\nax.tick_params(axis='y', colors='goldenrod')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='gray')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='green')\n\n# Set the color of the x-axis tick lines\nax.tick_params(axis='x', colors='greenyellow')\n\n# Set the color of the y-axis tick lines\nax.tick_params(axis='y', colors='grey')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='honeydew')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='hotpink')\n\n# Set the color of the x-axis tick lines\nax.tick_params(axis='x', colors='indianred')\n\n# Set the color of the y-axis tick lines\nax.tick_params(axis='y', colors='indigo')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='ivory')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='khaki')\n\n# Set the color of the x-axis tick lines\nax.tick_params(axis='x', colors='lavender')\n\n# Set the color of the y-axis tick lines\nax.tick_params(axis='y', colors='lavenderblush')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='lawngreen')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='lemonchiffon')\n\n# Set the color of the x-axis tick lines\nax.tick_params(axis='x', colors='lightblue')\n\n# Set the color of the y-axis tick lines\nax.tick_params(axis='y', colors='lightcoral')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='lightcyan')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='lightgoldenrodyellow')\n\n# Set the color of the x-axis tick lines\nax.tick_params(axis='x', colors='lightgray')\n\n# Set the color of the y-axis tick lines\nax.tick_params(axis='y', colors='lightgreen')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='lightgrey')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='lightpink')\n\n# Set the color of the x-axis tick lines\nax.tick_params(axis='x', colors='lightsalmon')\n\n# Set the color of the y-axis tick lines\nax.tick_params(axis='y', colors='lightseagreen')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='lightskyblue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='lightslategray')\n\n# Set the color of the x-axis tick lines\nax.tick_params(axis='x', colors='lightslategrey')\n\n# Set the color of the y-axis tick lines\nax.tick_params(axis='y', colors='lightsteelblue')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='lightyellow')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='lime')\n\n# Set the color of the x-axis tick lines\nax.tick_params(axis='x', colors='limegreen')\n\n# Set the color of the y-axis tick lines\nax.tick_params(axis='y', colors='linen')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='magenta')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='maroon')\n\n# Set the color of the x-axis tick lines\nax.tick_params(axis='x', colors='mediumaquamarine')\n\n# Set the color of the y-axis tick lines\nax.tick_params(axis='y', colors='mediumblue')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='mediumorchid')\n\n# Set the color of the y-axis tick lines\nax.tick_params(axis='y', colors='mediumpurple')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='mediumseagreen')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='mediumslateblue')\n\n# Set the color of the x-axis tick lines\nax.tick_params(axis='x', colors='mediumspringgreen')\n\n# Set the color of the y-axis tick lines\nax.tick_params(axis='y', colors='mediumturquoise')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='mediumvioletred')\n\n# Set the color of the y-axis tick lines\nax.tick_params(axis='y', colors='midnightblue')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='mintcream')\n\n# Set the color of the y-axis tick lines\nax.tick_params(axis='y', colors='mistyrose')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='moccasin')\n\n# Set the color of the y-axis tick lines\nax.tick_params(axis='y', colors='navajowhite')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='navy')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='oldlace')\n\n# Set the color of the x-axis tick lines\nax.tick_params(axis='x', colors='olive')\n\n# Set the color of the y-axis tick lines\nax.tick_params(axis='y', colors='olivedrab')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='orange')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='orangered')\n\n# Set the color of the x-axis tick lines\nax.tick_params(axis='x', colors='orchid')\n\n# Set the color of the y-axis tick lines\nax.tick_params(axis='y', colors='palegoldenrod')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='palegreen')\n\n# Set the color of the y-axis tick lines\nax.tick_params(axis='y', colors='paleturquoise')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='palevioletred')\n\n# Set the color of the y-axis tick lines\nax.tick_params(axis='y', colors='papayawhip')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='peachpuff')\n\n# Set the color of the y-axis tick lines\nax.tick_params(axis='y', colors='peru')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='pink')\n\n# Set the color of the y-axis tick lines\nax.tick_params(axis='y', colors='plum')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='powderblue')\n\n# Set the color of the y-axis tick lines\nax.tick_params(axis='y', colors='purple')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='red')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='rosybrown')\n\n# Set the color of the x-axis tick lines\nax.tick_params(axis='x', colors='royalblue')\n\n# Set the color of the y-axis tick lines\nax.tick_params(axis='y', colors='saddlebrown')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='salmon')\n\n# Set the color of the y-axis tick lines\nax.tick_params(axis='y', colors='sandybrown')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='seagreen')\n\n# Set the color of the y-axis tick lines\nax.tick_params(axis='y', colors='seashell')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='sienna')\n\n# Set the color of the y-axis tick lines\nax.tick_params(axis='y', colors='silver')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='skyblue')\n\n# Set the color of the y-axis tick lines\nax.tick_params(axis='y', colors='slateblue')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='slategray')\n\n# Set the color of the y-axis tick lines\nax.tick_params(axis='y', colors='slategrey')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='snow')\n\n# Set the color of the y-axis tick lines\nax.tick_params(axis='y', colors='springgreen')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='steelblue')\n\n# Set the color of the y-axis tick lines\nax.tick_params(axis='y', colors='tan')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='teal')\n\n# Set the color of the y-axis tick lines\nax.tick_params(axis='y', colors='thistle')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='tomato')\n\n# Set the color of the y-axis tick lines\nax.tick_params(axis='y', colors='turquoise')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='violet')\n\n# Set the color of the y-axis tick lines\nax.tick_params(axis='y', colors='wheat')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='white')\n\n# Set the color of the y-axis tick lines\nax.tick_params(axis='y', colors='whitesmoke')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='yellow')\n\n# Set the color of the y-axis tick lines\nax.tick_params(axis='y', colors='yellowgreen')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='rebeccapurple')\n\n# Set the color of the y-axis tick lines\nax.tick_params(axis='y', colors='slateblue')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='slategray')\n\n# Set the color of the y-axis tick lines\nax.tick_params(axis='y', colors='slategrey')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='slateblue')\n\n# Set the color of the y-axis tick lines\nax.tick_params(axis='y', colors='slategray')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='slategrey')\n\n# Set the color of the y-axis tick lines\nax.tick_params(axis='y', colors='slateblue')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='slategray')\n\n# Set the color of the y-axis tick lines\nax.tick_params(axis='y', colors='slategrey')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='slateblue')\n\n# Set the color of the y-axis tick lines\nax.tick_params"}
{"file": "dataset/ori_500/heatmap_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6, 5))\n\n# Set the background color of the plot\nax.set_facecolor('white')\n\n# Set the title of the plot\nax.set_title('Live vs Predicted Category')\n\n# Set the x-axis label\nax.set_xlabel('Predicted category')\n\n# Set the y-axis label\nax.set_ylabel('Live category')\n\n# Set the x-axis limits\nax.set_xlim(0, 50)\n\n# Set the y-axis limits\nax.set_ylim(0, 50)\n\n# Set the x-axis ticks\nax.set_xticks(np.arange(0, 51, 10))\n\n# Set the y-axis ticks\nax.set_yticks(np.arange(0, 51, 10))\n\n# Set the x-axis tick labels\nax.set_xticklabels(['0', '10', '20', '30', '40', '50'])\n\n# Set the y-axis tick labels\nax.set_yticklabels(['0', '10', '20', '30', '40', '50'])\n\n# Set the x-axis grid lines\nax.grid(axis='x')\n\n# Set the y-axis grid lines\nax.grid(axis='y')\n\n# Set the x-axis grid line style\nax.xaxis.grid(True, linestyle='--')\n\n# Set the y-axis grid line style\nax.yaxis.grid(True, linestyle='--')\n\n# Set the x-axis grid line color\nax.xaxis.grid(color='gray')\n\n# Set the y-axis grid line color\nax.yaxis.grid(color='gray')\n\n# Set the x-axis grid line width\nax.xaxis.grid(linewidth=0.5)\n\n# Set the y-axis grid line width\nax.yaxis.grid(linewidth=0.5)\n\n# Set the x-axis grid line alpha\nax.xaxis.grid(alpha=0.7)\n\n# Set the y-axis grid line alpha\nax.yaxis.grid(alpha=0.7)\n\n# Set the x-axis grid line zorder\nax.xaxis.grid(zorder=0)\n\n# Set the y-axis grid line zorder\nax.yaxis.grid(zorder=0)\n\n# Set the x-axis grid line hatch\nax.xaxis.grid(hatch='///')\n\n# Set the y-axis grid line hatch\nax.yaxis.grid(hatch='///')\n\n# Set the x-axis grid line antialiased\nax.xaxis.grid(antialiased=True)\n\n# Set the y-axis grid line antialiased\nax.yaxis.grid(antialiased=True)\n\n# Set the x-axis grid line visible\nax.xaxis.grid(visible=True)\n\n# Set the y-axis grid line visible\nax.yaxis.grid(visible=True)\n\n# Set the x-axis grid line which\nax.xaxis.grid(which='major')\n\n# Set the y-axis grid line which\nax.yaxis.grid(which='major')\n\n# Set the x-axis grid line axis\nax.xaxis.grid(axis='x')\n\n# Set the y-axis grid line axis\nax.yaxis.grid(axis='y')\n\n# Set the x-axis grid line linestyle\nax.xaxis.grid(linestyle='--')\n\n# Set the y-axis grid line linestyle\nax.yaxis.grid(linestyle='--')\n\n# Set the x-axis grid line linewidth\nax.xaxis.grid(linewidth=0.5)\n\n# Set the y-axis grid line linewidth\nax.yaxis.grid(linewidth=0.5)\n\n# Set the x-axis grid line alpha\nax.xaxis.grid(alpha=0.7)\n\n# Set the y-axis grid line alpha\nax.yaxis.grid(alpha=0.7)\n\n# Set the x-axis grid line zorder\nax.xaxis.grid(zorder=0)\n\n# Set the y-axis grid line zorder\nax.yaxis.grid(zorder=0)\n\n# Set the x-axis grid line hatch\nax.xaxis.grid(hatch='///')\n\n# Set the y-axis grid line hatch\nax.yaxis.grid(hatch='///')\n\n# Set the x-axis grid line antialiased\nax.xaxis.grid(antialiased=True)\n\n# Set the y-axis grid line antialiased\nax.yaxis.grid(antialiased=True)\n\n# Set the x-axis grid line visible\nax.xaxis.grid(visible=True)\n\n# Set the y-axis grid line visible\nax.yaxis.grid(visible=True)\n\n# Set the x-axis grid line which\nax.xaxis.grid(which='major')\n\n# Set the y-axis grid line which\nax.yaxis.grid(which='major')\n\n# Set the x-axis grid line axis\nax.xaxis.grid(axis='x')\n\n# Set the y-axis grid line axis\nax.yaxis.grid(axis='y')\n\n# Set the x-axis grid line linestyle\nax.xaxis.grid(linestyle='--')\n\n# Set the y-axis grid line linestyle\nax.yaxis.grid(linestyle='--')\n\n# Set the x-axis grid line linewidth\nax.xaxis.grid(linewidth=0.5)\n\n# Set the y-axis grid line linewidth\nax.yaxis.grid(linewidth=0.5)\n\n# Set the x-axis grid line alpha\nax.xaxis.grid(alpha=0.7)\n\n# Set the y-axis grid line alpha\nax.yaxis.grid(alpha=0.7)\n\n# Set the x-axis grid line zorder\nax.xaxis.grid(zorder=0)\n\n# Set the y-axis grid line zorder\nax.yaxis.grid(zorder=0)\n\n# Set the x-axis grid line hatch\nax.xaxis.grid(hatch='///')\n\n# Set the y-axis grid line hatch\nax.yaxis.grid(hatch='///')\n\n# Set the x-axis grid line antialiased\nax.xaxis.grid(antialiased=True)\n\n# Set the y-axis grid line antialiased\nax.yaxis.grid(antialiased=True)\n\n# Set the x-axis grid line visible\nax.xaxis.grid(visible=True)\n\n# Set the y-axis grid line visible\nax.yaxis.grid(visible=True)\n\n# Set the x-axis grid line which\nax.xaxis.grid(which='major')\n\n# Set the y-axis grid line which\nax.yaxis.grid(which='major')\n\n# Set the x-axis grid line axis\nax.xaxis.grid(axis='x')\n\n# Set the y-axis grid line axis\nax.yaxis.grid(axis='y')\n\n# Set the x-axis grid line linestyle\nax.xaxis.grid(linestyle='--')\n\n# Set the y-axis grid line linestyle\nax.yaxis.grid(linestyle='--')\n\n# Set the x-axis grid line linewidth\nax.xaxis.grid(linewidth=0.5)\n\n# Set the y-axis grid line linewidth\nax.yaxis.grid(linewidth=0.5)\n\n# Set the x-axis grid line alpha\nax.xaxis.grid(alpha=0.7)\n\n# Set the y-axis grid line alpha\nax.yaxis.grid(alpha=0.7)\n\n# Set the x-axis grid line zorder\nax.xaxis.grid(zorder=0)\n\n# Set the y-axis grid line zorder\nax.yaxis.grid(zorder=0)\n\n# Set the x-axis grid line hatch\nax.xaxis.grid(hatch='///')\n\n# Set the y-axis grid line hatch\nax.yaxis.grid(hatch='///')\n\n# Set the x-axis grid line antialiased\nax.xaxis.grid(antialiased=True)\n\n# Set the y-axis grid line antialiased\nax.yaxis.grid(antialiased=True)\n\n# Set the x-axis grid line visible\nax.xaxis.grid(visible=True)\n\n# Set the y-axis grid line visible\nax.yaxis.grid(visible=True)\n\n# Set the x-axis grid line which\nax.xaxis.grid(which='major')\n\n# Set the y-axis grid line which\nax.yaxis.grid(which='major')\n\n# Set the x-axis grid line axis\nax.xaxis.grid(axis='x')\n\n# Set the y-axis grid line axis\nax.yaxis.grid(axis='y')\n\n# Set the x-axis grid line linestyle\nax.xaxis.grid(linestyle='--')\n\n# Set the y-axis grid line linestyle\nax.yaxis.grid(linestyle='--')\n\n# Set the x-axis grid line linewidth\nax.xaxis.grid(linewidth=0.5)\n\n# Set the y-axis grid line linewidth\nax.yaxis.grid(linewidth=0.5)\n\n# Set the x-axis grid line alpha\nax.xaxis.grid(alpha=0.7)\n\n# Set the y-axis grid line alpha\nax.yaxis.grid(alpha=0.7)\n\n# Set the x-axis grid line zorder\nax.xaxis.grid(zorder=0)\n\n# Set the y-axis grid line zorder\nax.yaxis.grid(zorder=0)\n\n# Set the x-axis grid line hatch\nax.xaxis.grid(hatch='///')\n\n# Set the y-axis grid line hatch\nax.yaxis.grid(hatch='///')\n\n# Set the x-axis grid line antialiased\nax.xaxis.grid(antialiased=True)\n\n# Set the y-axis grid line antialiased\nax.yaxis.grid(antialiased=True)\n\n# Set the x-axis grid line visible\nax.xaxis.grid(visible=True)\n\n# Set the y-axis grid line visible\nax.yaxis.grid(visible=True)\n\n# Set the x-axis grid line which\nax.xaxis.grid(which='major')\n\n# Set the y-axis grid line which\nax.yaxis.grid(which='major')\n\n# Set the x-axis grid line axis\nax.xaxis.grid(axis='x')\n\n# Set the y-axis grid line axis\nax.yaxis.grid(axis='y')\n\n# Set the x-axis grid line linestyle\nax.xaxis.grid(linestyle='--')\n\n# Set the y-axis grid line linestyle\nax.yaxis.grid(linestyle='--')\n\n# Set the x-axis grid line linewidth\nax.xaxis.grid(linewidth=0.5)\n\n# Set the y-axis grid line linewidth\nax.yaxis.grid(linewidth=0.5)\n\n# Set the x-axis grid line alpha\nax.xaxis.grid(alpha=0.7)\n\n# Set the y-axis grid line alpha\nax.yaxis.grid(alpha=0.7)\n\n# Set the x-axis grid line zorder\nax.xaxis.grid(zorder=0)\n\n# Set the y-axis grid line zorder\nax.yaxis.grid(zorder=0)\n\n# Set the x-axis grid line hatch\nax.xaxis.grid(hatch='///')\n\n# Set the y-axis grid line hatch\nax.yaxis.grid(hatch='///')\n\n# Set the x-axis grid line antialiased\nax.xaxis.grid(antialiased=True)\n\n# Set the y-axis grid line antialiased\nax.yaxis.grid(antialiased=True)\n\n# Set the x-axis grid line visible\nax.xaxis.grid(visible=True)\n\n# Set the y-axis grid line visible\nax.yaxis.grid(visible=True)\n\n# Set the x-axis grid line which\nax.xaxis.grid(which='major')\n\n# Set the y-axis grid line which\nax.yaxis.grid(which='major')\n\n# Set the x-axis grid line axis\nax.xaxis.grid(axis='x')\n\n# Set the y-axis grid line axis\nax.yaxis.grid(axis='y')\n\n# Set the x-axis grid line linestyle\nax.xaxis.grid(linestyle='--')\n\n# Set the y-axis grid line linestyle\nax.yaxis.grid(linestyle='--')\n\n# Set the x-axis grid line linewidth\nax.xaxis.grid(linewidth=0.5)\n\n# Set the y-axis grid line linewidth\nax.yaxis.grid(linewidth=0.5)\n\n# Set the x-axis grid line alpha\nax.xaxis.grid(alpha=0.7)\n\n# Set the y-axis grid line alpha\nax.yaxis.grid(alpha=0.7)\n\n# Set the x-axis grid line zorder\nax.xaxis.grid(zorder=0)\n\n# Set the y-axis grid line zorder\nax.yaxis.grid(zorder=0)\n\n# Set the x-axis grid line hatch\nax.xaxis.grid(hatch='///')\n\n# Set the y-axis grid line hatch\nax.yaxis.grid(hatch='///')\n\n# Set the x-axis grid line antialiased\nax.xaxis.grid(antialiased=True)\n\n# Set the y-axis grid line antialiased\nax.yaxis.grid(antialiased=True)\n\n# Set the x-axis grid line visible\nax.xaxis.grid(visible=True)\n\n# Set the y-axis grid line visible\nax.yaxis.grid(visible=True)\n\n# Set the x-axis grid line which\nax.xaxis.grid(which='major')\n\n# Set the y-axis grid line which\nax.yaxis.grid(which='major')\n\n# Set the x-axis grid line axis\nax.xaxis.grid(axis='x')\n\n# Set the y-axis grid line axis\nax.yaxis.grid(axis='y')\n\n# Set the x-axis grid line linestyle\nax.xaxis.grid(linestyle='--')\n\n# Set the y-axis grid line linestyle\nax.yaxis.grid(linestyle='--')\n\n# Set the x-axis grid line linewidth\nax.xaxis.grid(linewidth=0.5)\n\n# Set the y-axis grid line linewidth\nax.yaxis.grid(linewidth=0.5)\n\n# Set the x-axis grid line alpha\nax.xaxis.grid(alpha=0.7)\n\n# Set the y-axis grid line alpha\nax.yaxis.grid(alpha=0.7)\n\n# Set the x-axis grid line zorder\nax.xaxis.grid(zorder=0)\n\n# Set the y-axis grid line zorder\nax.yaxis.grid(zorder=0)\n\n# Set the x-axis grid line hatch\nax.xaxis.grid(hatch='///')\n\n# Set the y-axis grid line hatch\nax.yaxis.grid(hatch='///')\n\n# Set the x-axis grid line antialiased\nax.xaxis.grid(antialiased=True)\n\n# Set the y-axis grid line antialiased\nax.yaxis.grid(antialiased=True)\n\n# Set the x-axis grid line visible\nax.xaxis.grid(visible=True)\n\n# Set the y-axis grid line visible\nax.yaxis.grid(visible=True)\n\n# Set the x-axis grid line which\nax.xaxis.grid(which='major')\n\n# Set the y-axis grid line which\nax.yaxis.grid(which='major')\n\n# Set the x-axis grid line axis\nax.xaxis.grid(axis='x')\n\n# Set the y-axis grid line axis\nax.yaxis.grid(axis='y')\n\n# Set the x-axis grid line linestyle\nax.xaxis.grid(linestyle='--')\n\n# Set the y-axis grid line linestyle\nax.yaxis.grid(linestyle='--')\n\n# Set the x-axis grid line linewidth\nax.xaxis.grid(linewidth=0.5)\n\n# Set the y-axis grid line linewidth\nax.yaxis.grid(linewidth=0.5)\n\n# Set the x-axis grid line alpha\nax.xaxis.grid(alpha=0.7)\n\n# Set the y-axis grid line alpha\nax.yaxis.grid(alpha=0.7)\n\n# Set the x-axis grid line zorder\nax.xaxis.grid(zorder=0)\n\n# Set the y-axis grid line zorder\nax.yaxis.grid(zorder=0)\n\n# Set the x-axis grid line hatch\nax.xaxis.grid(hatch='///')\n\n# Set the y-axis grid line hatch\nax.yaxis.grid(hatch='///')\n\n# Set the x-axis grid line antialiased\nax.xaxis.grid(antialiased=True)\n\n# Set the y-axis grid line antialiased\nax.yaxis.grid(antialiased=True)\n\n# Set the x-axis grid line visible\nax.xaxis.grid(visible=True)\n\n# Set the y-axis grid line visible\nax.yaxis.grid(visible=True)\n\n# Set the x-axis grid line which\nax.xaxis.grid(which='major')\n\n# Set the y-axis grid line which\nax.yaxis.grid(which='major')\n\n# Set the x-axis grid line axis\nax.xaxis.grid(axis='x')\n\n# Set the y-axis grid line axis\nax.yaxis.grid(axis='y')\n\n# Set the x-axis grid line linestyle\nax.xaxis.grid(linestyle='--')\n\n# Set the y-axis grid line linestyle\nax.yaxis.grid(linestyle='--')\n\n# Set the x-axis grid line linewidth\nax.xaxis.grid(linewidth=0.5)\n\n# Set the y-axis grid line linewidth\nax.yaxis.grid(linewidth=0.5)\n\n# Set the x-axis grid line alpha\nax.xaxis.grid(alpha=0.7)\n\n# Set the y-axis grid line alpha\nax.yaxis.grid(alpha=0.7)\n\n# Set the x-axis grid line zorder\nax.xaxis.grid(zorder=0)\n\n# Set the y-axis grid line zorder\nax.yaxis.grid(zorder=0)\n\n# Set the x-axis grid line hatch\nax.xaxis.grid(hatch='///')\n\n# Set the y-axis grid line hatch\nax.yaxis.grid(hatch='///')\n\n# Set the x-axis grid line antialiased\nax.xaxis.grid(antialiased=True)\n\n# Set the y-axis grid line antialiased\nax.yaxis.grid(antialiased=True)\n\n# Set the x-axis grid line visible\nax.xaxis.grid(visible=True)\n\n# Set the y-axis grid line visible\nax.yaxis.grid(visible=True)\n\n# Set the x-axis grid line which\nax.xaxis.grid(which='major')\n\n# Set the y-axis grid line which\nax.yaxis.grid(which='major')\n\n# Set the x-axis grid line axis\nax.xaxis.grid(axis='x')\n\n# Set the y-axis grid line axis\nax.yaxis.grid(axis='y')\n\n# Set the x-axis grid line linestyle\nax.xaxis.grid(linestyle='--')\n\n# Set the y-axis grid line linestyle\nax.yaxis.grid(linestyle='--')\n\n# Set the x-axis grid line linewidth\nax.xaxis.grid(linewidth=0.5)\n\n# Set the y-axis grid line linewidth\nax.yaxis.grid(linewidth=0.5)\n\n# Set the x-axis grid line alpha\nax.xaxis.grid(alpha=0.7)\n\n# Set the y-axis grid line alpha\nax.yaxis.grid(alpha=0.7)\n\n# Set the x-axis grid line zorder\nax.xaxis.grid(zorder=0)\n\n# Set the y-axis grid line zorder\nax.yaxis.grid(zorder=0)\n\n# Set the x-axis grid line hatch\nax.xaxis.grid(hatch='///')\n\n# Set the y-axis grid line hatch\nax.yaxis.grid(hatch='///')\n\n# Set the x-axis grid line antialiased\nax.xaxis.grid(antialiased=True)\n\n# Set the y-axis grid line antialiased\nax.yaxis.grid(antialiased=True)\n\n# Set the x-axis grid line visible\nax.xaxis.grid(visible=True)\n\n# Set the y-axis grid line visible\nax.yaxis.grid(visible=True)\n\n# Set the x-axis grid line which\nax.xaxis.grid(which='major')\n\n# Set the y-axis grid line which\nax.yaxis.grid(which='major')\n\n# Set the x-axis grid line axis\nax.xaxis.grid(axis='x')\n\n# Set the y-axis grid line axis\nax.yaxis.grid(axis='y')\n\n# Set the x-axis grid line linestyle\nax.xaxis.grid(linestyle='--')\n\n# Set the y-axis grid line linestyle\nax.yaxis.grid(linestyle='--')\n\n# Set the x-axis grid line linewidth\nax.xaxis.grid(linewidth=0.5)\n\n# Set the y-axis grid line linewidth\nax.yaxis.grid(linewidth=0.5)\n\n# Set the x-axis grid line alpha\nax.xaxis.grid(alpha=0.7)\n\n# Set the y-axis grid line alpha\nax.yaxis.grid(alpha=0.7)\n\n# Set the x-axis grid line zorder\nax.xaxis.grid(zorder=0)\n\n# Set the y-axis grid line zorder\nax.yaxis.grid(zorder=0)\n\n# Set the x-axis grid line hatch\nax.xaxis.grid(hatch='///')\n\n# Set the y-axis grid line hatch\nax.yaxis.grid(hatch='///')\n\n# Set the x-axis grid line antialiased\nax.xaxis.grid(antialiased=True)\n\n# Set"}
{"file": "dataset/ori_500/heatmap_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Set the title of the plot\nax.set_title('LOMLOP')\n\n# Set the x-axis label\nax.set_xlabel('D''2')\n\n# Set the y-axis label\nax.set_ylabel('D''1')\n\n# Create a rectangle for the first bar\nrect1 = plt.Rectangle((0.1, 0.1), 0.8, 0.8, color='gray')\nax.add_patch(rect1)\n\n# Create a rectangle for the second bar\nrect2 = plt.Rectangle((0.1, 0.1), 0.8, 0.8, color='green')\nax.add_patch(rect2)\n\n# Create a rectangle for the third bar\nrect3 = plt.Rectangle((0.1, 0.1), 0.8, 0.8, color='blue')\nax.add_patch(rect3)\n\n# Create a rectangle for the fourth bar\nrect4 = plt.Rectangle((0.1, 0.1), 0.8, 0.8, color='yellow')\nax.add_patch(rect4)\n\n# Create a rectangle for the fifth bar\nrect5 = plt.Rectangle((0.1, 0.1), 0.8, 0.8, color='brown')\nax.add_patch(rect5)\n\n# Create a rectangle for the sixth bar\nrect6 = plt.Rectangle((0.1, 0.1), 0.8, 0.8, color='orange')\nax.add_patch(rect6)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 10.0))\n\n# Set the background color of the plot\nax.set_facecolor('lightblue')\n\n# Set the title of the plot\nax.set_title('Sector Performance', fontsize=20)\n\n# Set the x-axis label\nax.set_xlabel('Sectors', fontsize=15)\n\n# Set the y-axis label\nax.set_ylabel('Performance', fontsize=15)\n\n# Set the tick labels for the x-axis\nax.set_xticks([0, 1, 2, 3, 4])\nax.set_xticklabels(['LLVA', 'BakLiva', 'GeminiProVision', 'GPT4V', 'CODI'])\n\n# Set the tick labels for the y-axis\nax.set_yticks(np.arange(-1, 1.1, 0.1))\nax.set_yticklabels(['-1.00', '-0.90', '-0.80', '-0.70', '-0.60', '-0.50', '-0.40', '-0.30', '-0.20', '-0.10', '0.00', '0.10', '0.20', '0.30', '0.40', '0.50', '0.60', '0.70', '0.80', '0.90', '1.00'])\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot title\nax.set_title('Sector Performance', fontsize=20, color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('Sectors', fontsize=15, color='black')\n\n# Set the color of the y-axis label\nax.set_ylabel('Performance', fontsize=15, color='black')\n\n# Set the color of the tick labels\nax.set_xticklabels(['LLVA', 'BakLiva', 'GeminiProVision', 'GPT4V', 'CODI'], color='black')\nax.set_yticklabels(['-1.00', '-0.90', '-0.80', '-0.70', '-0.60', '-0.50', '-0.40', '-0.30', '-0.20', '-0.10', '0.00', '0.10', '0.20', '0.30', '0.40', '0.50', '0.60', '0.70', '0.80', '0.90', '1.00'], color='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot title\nax.set_title('Sector Performance', fontsize=20, color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('Sectors', fontsize=15, color='black')\n\n# Set the color of the y-axis label\nax.set_ylabel('Performance', fontsize=15, color='black')\n\n# Set the color of the tick labels\nax.set_xticklabels(['LLVA', 'BakLiva', 'GeminiProVision', 'GPT4V', 'CODI'], color='black')\nax.set_yticklabels(['-1.00', '-0.90', '-0.80', '-0.70', '-0.60', '-0.50', '-0.40', '-0.30', '-0.20', '-0.10', '0.00', '0.10', '0.20', '0.30', '0.40', '0.50', '0.60', '0.70', '0.80', '0.90', '1.00'], color='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot title\nax.set_title('Sector Performance', fontsize=20, color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('Sectors', fontsize=15, color='black')\n\n# Set the color of the y-axis label\nax.set_ylabel('Performance', fontsize=15, color='black')\n\n# Set the color of the tick labels\nax.set_xticklabels(['LLVA', 'BakLiva', 'GeminiProVision', 'GPT4V', 'CODI'], color='black')\nax.set_yticklabels(['-1.00', '-0.90', '-0.80', '-0.70', '-0.60', '-0.50', '-0.40', '-0.30', '-0.20', '-0.10', '0.00', '0.10', '0.20', '0.30', '0.40', '0.50', '0.60', '0.70', '0.80', '0.90', '1.00'], color='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot title\nax.set_title('Sector Performance', fontsize=20, color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('Sectors', fontsize=15, color='black')\n\n# Set the color of the y-axis label\nax.set_ylabel('Performance', fontsize=15, color='black')\n\n# Set the color of the tick labels\nax.set_xticklabels(['LLVA', 'BakLiva', 'GeminiProVision', 'GPT4V', 'CODI'], color='black')\nax.set_yticklabels(['-1.00', '-0.90', '-0.80', '-0.70', '-0.60', '-0.50', '-0.40', '-0.30', '-0.20', '-0.10', '0.00', '0.10', '0.20', '0.30', '0.40', '0.50', '0.60', '0.70', '0.80', '0.90', '1.00'], color='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot title\nax.set_title('Sector Performance', fontsize=20, color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('Sectors', fontsize=15, color='black')\n\n# Set the color of the y-axis label\nax.set_ylabel('Performance', fontsize=15, color='black')\n\n# Set the color of the tick labels\nax.set_xticklabels(['LLVA', 'BakLiva', 'GeminiProVision', 'GPT4V', 'CODI'], color='black')\nax.set_yticklabels(['-1.00', '-0.90', '-0.80', '-0.70', '-0.60', '-0.50', '-0.40', '-0.30', '-0.20', '-0.10', '0.00', '0.10', '0.20', '0.30', '0.40', '0.50', '0.60', '0.70', '0.80', '0.90', '1.00'], color='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot title\nax.set_title('Sector Performance', fontsize=20, color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('Sectors', fontsize=15, color='black')\n\n# Set the color of the y-axis label\nax.set_ylabel('Performance', fontsize=15, color='black')\n\n# Set the color of the tick labels\nax.set_xticklabels(['LLVA', 'BakLiva', 'GeminiProVision', 'GPT4V', 'CODI'], color='black')\nax.set_yticklabels(['-1.00', '-0.90', '-0.80', '-0.70', '-0.60', '-0.50', '-0.40', '-0.30', '-0.20', '-0.10', '0.00', '0.10', '0.20', '0.30', '0.40', '0.50', '0.60', '0.70', '0.80', '0.90', '1.00'], color='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot title\nax.set_title('Sector Performance', fontsize=20, color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('Sectors', fontsize=15, color='black')\n\n# Set the color of the y-axis label\nax.set_ylabel('Performance', fontsize=15, color='black')\n\n# Set the color of the tick labels\nax.set_xticklabels(['LLVA', 'BakLiva', 'GeminiProVision', 'GPT4V', 'CODI'], color='black')\nax.set_yticklabels(['-1.00', '-0.90', '-0.80', '-0.70', '-0.60', '-0.50', '-0.40', '-0.30', '-0.20', '-0.10', '0.00', '0.10', '0.20', '0.30', '0.40', '0.50', '0.60', '0.70', '0.80', '0.90', '1.00'], color='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot title\nax.set_title('Sector Performance', fontsize=20, color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('Sectors', fontsize=15, color='black')\n\n# Set the color of the y-axis label\nax.set_ylabel('Performance', fontsize=15, color='black')\n\n# Set the color of the tick labels\nax.set_xticklabels(['LLVA', 'BakLiva', 'GeminiProVision', 'GPT4V', 'CODI'], color='black')\nax.set_yticklabels(['-1.00', '-0.90', '-0.80', '-0.70', '-0.60', '-0.50', '-0.40', '-0.30', '-0.20', '-0.10', '0.00', '0.10', '0.20', '0.30', '0.40', '0.50', '0.60', '0.70', '0.80', '0.90', '1.00'], color='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot title\nax.set_title('Sector Performance', fontsize=20, color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('Sectors', fontsize=15, color='black')\n\n# Set the color of the y-axis label\nax.set_ylabel('Performance', fontsize=15, color='black')\n\n# Set the color of the tick labels\nax.set_xticklabels(['LLVA', 'BakLiva', 'GeminiProVision', 'GPT4V', 'CODI'], color='black')\nax.set_yticklabels(['-1.00', '-0.90', '-0.80', '-0.70', '-0.60', '-0.50', '-0.40', '-0.30', '-0.20', '-0.10', '0.00', '0.10', '0.20', '0.30', '0.40', '0.50', '0.60', '0.70', '0.80', '0.90', '1.00'], color='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot title\nax.set_title('Sector Performance', fontsize=20, color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('Sectors', fontsize=15, color='black')\n\n# Set the color of the y-axis label\nax.set_ylabel('Performance', fontsize=15, color='black')\n\n# Set the color of the tick labels\nax.set_xticklabels(['LLVA', 'BakLiva', 'GeminiProVision', 'GPT4V', 'CODI'], color='black')\nax.set_yticklabels(['-1.00', '-0.90', '-0.80', '-0.70', '-0.60', '-0.50', '-0.40', '-0.30', '-0.20', '-0.10', '0.00', '0.10', '0.20', '0.30', '0.40', '0.50', '0.60', '0.70', '0.80', '0.90', '1.00'], color='black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the plot area\nax.set_facecolor('lightblue')\n\n# Set the color of the plot border\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['right'].set_color('black')\nax.spines['left'].set_color('black')\n\n# Set the color of the plot title\nax.set_title('Sector Performance', fontsize=20, color='black')\n\n# Set the color of the x-axis label\nax.set_xlabel('Sectors', fontsize=15, color='black')\n\n# Set the color of the y-axis label\nax.set_ylabel('Performance', fontsize=15, color='black')\n\n# Set the color of the tick labels\nax.set_xticklabels(['LLVA', 'BakLiva', 'GeminiProVision', 'GPT4V', 'CODI'], color='black')\nax.set_yticklabels(['-1.00"}
{"file": "dataset/ori_500/heatmap_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 8.0))\n\n# Set the background color of the plot\nax.set_facecolor('purple')\n\n# Set the title of the plot\nax.set_title('Perplexity vs. Temperature', color='white')\n\n# Set the x-axis label\nax.set_xlabel('To layer', color='white')\n\n# Set the y-axis label\nax.set_ylabel('Perplexity', color='white')\n\n# Set the tick labels for the x-axis\nax.set_xticks([1, 3, 5, 7, 9, 11])\nax.set_xticklabels(['1', '3', '5', '7', '9', '11'], color='white')\n\n# Set the tick labels for the y-axis\nax.set_yticks([1, 2, 3, 4, 5])\nax.set_yticklabels(['1', '2', '3', '4', '5'], color='white')\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0, 0), 1, 1, color='black')\nax.add_patch(rect)\n\n# Add a text box to the plot\ntext_box = ax.text(0.5, 0.5, 'mbert\u2192sat Perplexity=7.59', ha='center', va='center', color='white', fontsize=12)\ntext_box.set_bbox(dict(facecolor='none', edgecolor='white'))\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_16.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(4.0, 8.0))\n\n# Set the title of the plot\nax.set_title('Sales Performance Heatmap')\n\n# Create a color bar\ncbar = fig.colorbar(ax.imshow([[100, 200, 300], [400, 500, 600], [700, 800, 900]], cmap='hot'))\n\n# Set the tick labels for the x-axis\nax.set_xticks([0, 1, 2])\nax.set_xticklabels(['Product A Q1', 'Product A Q2', 'Product A Q3'])\n\n# Set the tick labels for the y-axis\nax.set_yticks([0, 1, 2])\nax.set_yticklabels(['Product B Q1', 'Product B Q2', 'Product B Q3'])\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_17.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 3))\n\n# Set the background color of the plot\nax.set_facecolor('white')\n\n# Create a color bar\ncbar = fig.colorbar(plt.cm.ScalarMappable(cmap='coolwarm'), ax=ax, orientation='vertical')\ncbar.set_label('Values')\n\n# Set the title of the plot\nax.set_title('Colorful Rectangles')\n\n# Set the x-axis label\nax.set_xlabel('Time')\n\n# Set the y-axis label\nax.set_ylabel('Context')\n\n# Set the x-axis ticks\nax.set_xticks([0, 5, 10, 15, 20, 25, 30])\n\n# Set the x-axis tick labels\nax.set_xticklabels(['0', '5', '10', '15', '20', '25', '30'])\n\n# Set the y-axis ticks\nax.set_yticks([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\n\n# Set the y-axis tick labels\nax.set_yticklabels(['context', 'option', 'cot', 'last'])\n\n# Draw rectangles\nfor i in range(10):\n    for j in range(10):\n        ax.add_patch(plt.Rectangle((i, j), 1, 1, color=plt.cm.coolwarm(i / 10)))\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_18.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\nfig, ax = plt.subplots(figsize=(7.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Weather')\n\n# Create a color map for the rectangles\ncmap = plt.cm.RdYlGn\n\n# Create a rectangle for each car model\nrect1 = plt.Rectangle((0.5, 0.5), 0.2, 0.2, color=cmap(0.54))\nrect2 = plt.Rectangle((0.5, 0.3), 0.2, 0.2, color=cmap(0.87))\nrect3 = plt.Rectangle((0.5, 0.1), 0.2, 0.2, color=cmap(0.78))\nrect4 = plt.Rectangle((0.3, 0.5), 0.2, 0.2, color=cmap(0.60))\nrect5 = plt.Rectangle((0.3, 0.3), 0.2, 0.2, color=cmap(0.44))\nrect6 = plt.Rectangle((0.3, 0.1), 0.2, 0.2, color=cmap(0.26))\nrect7 = plt.Rectangle((0.1, 0.5), 0.2, 0.2, color=cmap(0.09))\nrect8 = plt.Rectangle((0.1, 0.3), 0.2, 0.2, color=cmap(0.07))\nrect9 = plt.Rectangle((0.1, 0.1), 0.2, 0.2, color=cmap(0.09))\n\n# Add the rectangles to the plot\nax.add_patch(rect1)\nax.add_patch(rect2)\nax.add_patch(rect3)\nax.add_patch(rect4)\nax.add_patch(rect5)\nax.add_patch(rect6)\nax.add_patch(rect7)\nax.add_patch(rect8)\nax.add_patch(rect9)\n\n# Set the x and y limits of the plot\nax.set_xlim(0, 1)\nax.set_ylim(0, 1)\n\n# Set the x and y labels of the plot\nax.set_xlabel('Year')\nax.set_ylabel('Temperature')\n\n# Set the x and y ticks of the plot\nax.set_xticks([0.1, 0.3, 0.5, 0.7, 0.9])\nax.set_yticks([0.1, 0.3, 0.5, 0.7, 0.9])\n\n# Set the x and y tick labels of the plot\nax.set_xticklabels(['96', '98', '100', '102', '104'])\nax.set_yticklabels(['96', '98', '100', '102', '104'])\n\n# Set the x and y grid of the plot\nax.grid(True)\n\n# Set the x and y axis limits\nax.set_xlim(0, 1)\nax.set_ylim(0, 1)\n\n# Set the x and y axis labels\nax.set_xlabel('Year')\nax.set_ylabel('Temperature')\n\n# Set the x and y axis ticks\nax.set_xticks([0.1, 0.3, 0.5, 0.7, 0.9])\nax.set_yticks([0.1, 0.3, 0.5, 0.7, 0.9])\n\n# Set the x and y axis tick labels\nax.set_xticklabels(['96', '98', '100', '102', '104'])\nax.set_yticklabels(['96', '98', '100', '102', '104'])\n\n# Set the x and y axis grid\nax.grid(True)\n\n# Set the x and y axis limits\nax.set_xlim(0, 1)\nax.set_ylim(0, 1)\n\n# Set the x and y axis labels\nax.set_xlabel('Year')\nax.set_ylabel('Temperature')\n\n# Set the x and y axis ticks\nax.set_xticks([0.1, 0.3, 0.5, 0.7, 0.9])\nax.set_yticks([0.1, 0.3, 0.5, 0.7, 0.9])\n\n# Set the x and y axis tick labels\nax.set_xticklabels(['96', '98', '100', '102', '104'])\nax.set_yticklabels(['96', '98', '100', '102', '104'])\n\n# Set the x and y axis grid\nax.grid(True)\n\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_19.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the first chart\nroles = ['Villager', 'Hunter', 'Witch', 'Seer', 'Wererewolf']\nabilities = [15.7, 28.1, 26, 14.5, 28.6, 10.5, 76.0, 2.1, 0.5, 4.1, 8.1, 9.2, 50.8, 12.3, 0.9, 6.2, 15.5, 14.3, 16.3, 50.3, 12.0, 0.9, 7.8, 13.9, 17.3, 70.0, 2.1, 0.5, 4.3, 8.4, 2.5, 27.1, 17.3, 10.0, 2.2, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0.8, 1.0, 0"}
{"file": "dataset/ori_500/heatmap_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(9.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Question Type: All three types of questions')\n\n# Set the x-axis label\nax.set_xlabel('Response Action Category')\n\n# Set the y-axis label\nax.set_ylabel('Number of Responses')\n\n# Define the data for the plot\nx = [0, 1, 2, 3, 4, 5]\ny = [169, 547, 662, 271, 145, 1248]\n\n# Plot the data\nax.plot(x, y, 'ro-')\n\n# Set the color of the plot\nax.set_facecolor('lightblue')\n\n# Set the color of the grid\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='green')\n\n# Set the color of the title\nax.set_title('Question Type: All three types of questions', color='red')\n\n# Set the color of the x-axis label\nax.set_xlabel('Response Action Category', color='green')\n\n# Set the color of the y-axis label\nax.set_ylabel('Number of Responses', color='green')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='green')\n\n# Set the color of the title\nax.set_title('Question Type: All three types of questions', color='red')\n\n# Set the color of the x-axis label\nax.set_xlabel('Response Action Category', color='green')\n\n# Set the color of the y-axis label\nax.set_ylabel('Number of Responses', color='green')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='green')\n\n# Set the color of the title\nax.set_title('Question Type: All three types of questions', color='red')\n\n# Set the color of the x-axis label\nax.set_xlabel('Response Action Category', color='green')\n\n# Set the color of the y-axis label\nax.set_ylabel('Number of Responses', color='green')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='green')\n\n# Set the color of the title\nax.set_title('Question Type: All three types of questions', color='red')\n\n# Set the color of the x-axis label\nax.set_xlabel('Response Action Category', color='green')\n\n# Set the color of the y-axis label\nax.set_ylabel('Number of Responses', color='green')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='green')\n\n# Set the color of the title\nax.set_title('Question Type: All three types of questions', color='red')\n\n# Set the color of the x-axis label\nax.set_xlabel('Response Action Category', color='green')\n\n# Set the color of the y-axis label\nax.set_ylabel('Number of Responses', color='green')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='green')\n\n# Set the color of the title\nax.set_title('Question Type: All three types of questions', color='red')\n\n# Set the color of the x-axis label\nax.set_xlabel('Response Action Category', color='green')\n\n# Set the color of the y-axis label\nax.set_ylabel('Number of Responses', color='green')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='green')\n\n# Set the color of the title\nax.set_title('Question Type: All three types of questions', color='red')\n\n# Set the color of the x-axis label\nax.set_xlabel('Response Action Category', color='green')\n\n# Set the color of the y-axis label\nax.set_ylabel('Number of Responses', color='green')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='green')\n\n# Set the color of the title\nax.set_title('Question Type: All three types of questions', color='red')\n\n# Set the color of the x-axis label\nax.set_xlabel('Response Action Category', color='green')\n\n# Set the color of the y-axis label\nax.set_ylabel('Number of Responses', color='green')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='green')\n\n# Set the color of the title\nax.set_title('Question Type: All three types of questions', color='red')\n\n# Set the color of the x-axis label\nax.set_xlabel('Response Action Category', color='green')\n\n# Set the color of the y-axis label\nax.set_ylabel('Number of Responses', color='green')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='green')\n\n# Set the color of the title\nax.set_title('Question Type: All three types of questions', color='red')\n\n# Set the color of the x-axis label\nax.set_xlabel('Response Action Category', color='green')\n\n# Set the color of the y-axis label\nax.set_ylabel('Number of Responses', color='green')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='green')\n\n# Set the color of the title\nax.set_title('Question Type: All three types of questions', color='red')\n\n# Set the color of the x-axis label\nax.set_xlabel('Response Action Category', color='green')\n\n# Set the color of the y-axis label\nax.set_ylabel('Number of Responses', color='green')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='green')\n\n# Set the color of the title\nax.set_title('Question Type: All three types of questions', color='red')\n\n# Set the color of the x-axis label\nax.set_xlabel('Response Action Category', color='green')\n\n# Set the color of the y-axis label\nax.set_ylabel('Number of Responses', color='green')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='green')\n\n# Set the color of the title\nax.set_title('Question Type: All three types of questions', color='red')\n\n# Set the color of the x-axis label\nax.set_xlabel('Response Action Category', color='green')\n\n# Set the color of the y-axis label\nax.set_ylabel('Number of Responses', color='green')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='green')\n\n# Set the color of the title\nax.set_title('Question Type: All three types of questions', color='red')\n\n# Set the color of the x-axis label\nax.set_xlabel('Response Action Category', color='green')\n\n# Set the color of the y-axis label\nax.set_ylabel('Number of Responses', color='green')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='green')\n\n# Set the color of the title\nax.set_title('Question Type: All three types of questions', color='red')\n\n# Set the color of the x-axis label\nax.set_xlabel('Response Action Category', color='green')\n\n# Set the color of the y-axis label\nax.set_ylabel('Number of Responses', color='green')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='green')\n\n# Set the color of the title\nax.set_title('Question Type: All three types of questions', color='red')\n\n# Set the color of the x-axis label\nax.set_xlabel('Response Action Category', color='green')\n\n# Set the color of the y-axis label\nax.set_ylabel('Number of Responses', color='green')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='green')\n\n# Set the color of the title\nax.set_title('Question Type: All three types of questions', color='red')\n\n# Set the color of the x-axis label\nax.set_xlabel('Response Action Category', color='green')\n\n# Set the color of the y-axis label\nax.set_ylabel('Number of Responses', color='green')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='green')\n\n# Set the color of the title\nax.set_title('Question Type: All three types of questions', color='red')\n\n# Set the color of the x-axis label\nax.set_xlabel('Response Action Category', color='green')\n\n# Set the color of the y-axis label\nax.set_ylabel('Number of Responses', color='green')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='green')\n\n# Set the color of the title\nax.set_title('Question Type: All three types of questions', color='red')\n\n# Set the color of the x-axis label\nax.set_xlabel('Response Action Category', color='green')\n\n# Set the color of the y-axis label\nax.set_ylabel('Number of Responses', color='green')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='green')\n\n# Set the color of the title\nax.set_title('Question Type: All three types of questions', color='red')\n\n# Set the color of the x-axis label\nax.set_xlabel('Response Action Category', color='green')\n\n# Set the color of the y-axis label\nax.set_ylabel('Number of Responses', color='green')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='green')\n\n# Set the color of the title\nax.set_title('Question Type: All three types of questions', color='red')\n\n# Set the color of the x-axis label\nax.set_xlabel('Response Action Category', color='green')\n\n# Set the color of the y-axis label\nax.set_ylabel('Number of Responses', color='green')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='green')\n\n# Set the color of the title\nax.set_title('Question Type: All three types of questions', color='red')\n\n# Set the color of the x-axis label\nax.set_xlabel('Response Action Category', color='green')\n\n# Set the color of the y-axis label\nax.set_ylabel('Number of Responses', color='green')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='green')\n\n# Set the color of the title\nax.set_title('Question Type: All three types of questions', color='red')\n\n# Set the color of the x-axis label\nax.set_xlabel('Response Action Category', color='green')\n\n# Set the color of the y-axis label\nax.set_ylabel('Number of Responses', color='green')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='green')\n\n# Set the color of the title\nax.set_title('Question Type: All three types of questions', color='red')\n\n# Set the color of the x-axis label\nax.set_xlabel('Response Action Category', color='green')\n\n# Set the color of the y-axis label\nax.set_ylabel('Number of Responses', color='green')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='green')\n\n# Set the color of the title\nax.set_title('Question Type: All three types of questions', color='red')\n\n# Set the color of the x-axis label\nax.set_xlabel('Response Action Category', color='green')\n\n# Set the color of the y-axis label\nax.set_ylabel('Number of Responses', color='green')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='green')\n\n# Set the color of the title\nax.set_title('Question Type: All three types of questions', color='red')\n\n# Set the color of the x-axis label\nax.set_xlabel('Response Action Category', color='green')\n\n# Set the color of the y-axis label\nax.set_ylabel('Number of Responses', color='green')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='green')\n\n# Set the color of the title\nax.set_title('Question Type: All three types of questions', color='red')\n\n# Set the color of the x-axis label\nax.set_xlabel('Response Action Category', color='green')\n\n# Set the color of the y-axis label\nax.set_ylabel('Number of Responses', color='green')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='green')\n\n# Set the color of the title\nax.set_title('Question Type: All three types of questions', color='red')\n\n# Set the color of the x-axis label\nax.set_xlabel('Response Action Category', color='green')\n\n# Set the color of the y-axis label\nax.set_ylabel('Number of Responses', color='green')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='green')\n\n# Set the color of the title\nax.set_title('Question Type: All three types of questions', color='red')\n\n# Set the color of the x-axis label\nax.set_xlabel('Response Action Category', color='green')\n\n# Set the color of the y-axis label\nax.set_ylabel('Number of Responses', color='green')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='green')\n\n# Set the color of the title\nax.set_title('Question Type: All three types of questions', color='red')\n\n# Set the color of the x-axis label\nax.set_xlabel('Response Action Category', color='green')\n\n# Set the color of the y-axis label\nax.set_ylabel('Number of Responses', color='green')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='green')\n\n# Set the color of the title\nax.set_title('Question Type: All three types of questions', color='red')\n\n# Set the color of the x-axis label\nax.set_xlabel('Response Action Category', color='green')\n\n# Set the color of the y-axis label\nax.set_ylabel('Number of Responses', color='green')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='green')\n\n# Set the color of the title\nax.set_title('Question Type: All three types of questions', color='red')\n\n# Set the color of the x-axis label\nax.set_xlabel('Response Action Category', color='green')\n\n# Set the color of the y-axis label\nax.set_ylabel('Number of Responses', color='green')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='green')\n\n# Set the color of the title\nax.set_title('Question Type: All three types of questions', color='red')\n\n# Set the color of the x-axis label\nax.set_xlabel('Response Action Category', color='green')\n\n# Set the color of the y-axis label\nax.set_ylabel('Number of Responses', color='green')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='green')\n\n# Set the color of the title\nax.set_title('Question Type: All three types of questions', color='red')\n\n# Set the color of the x-axis label\nax.set_xlabel('Response Action Category', color='green')\n\n# Set the color of the y-axis label\nax.set_ylabel('Number of Responses', color='green')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='green')\n\n# Set the color of the title\nax.set_title('Question Type: All three types of questions', color='red')\n\n# Set the color of the x-axis label\nax.set_xlabel('Response Action Category', color='green')\n\n# Set the color of the y-axis label\nax.set_ylabel('Number of Responses', color='green')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='green')\n\n# Set the color of the title\nax.set_title('Question Type: All three types of questions', color='red')\n\n# Set the color of the x-axis label\nax.set_xlabel('Response Action Category', color='green')\n\n# Set the color of the y-axis label\nax.set_ylabel('Number of Responses', color='green')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='"}
{"file": "dataset/ori_500/heatmap_20.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\ncategories = ['angry', 'sad', 'disgust', 'contempt', 'fear', 'neutral', 'surprise', 'happy']\nvalues = [0.10, 0.00, 0.30, 0.00, 0.00, 0.50, 0.00, 0.10]\nadjusted_values = [0.12, 0.00, 0.44, 0.00, 0.00, 0.44, 0.00, 0.00]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 8))\n\n# Plot the bars\nax.bar(categories, values, color='blue')\nax.bar(categories, adjusted_values, color='red')\n\n# Set the title and labels\nax.set_title('Original vs Adjusted')\nax.set_xlabel('Emotion')\nax.set_ylabel('Value')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_21.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 8))\n\n# Define the data\nvoters = ['Villager', 'Hunter', 'Witch', 'Seer', 'Wererwolf']\npercentages = [15.7, 28.1, 26, 50.8, 12.3]\ncolors = ['blue', 'cyan', 'magenta', 'yellow', 'black']\n\n# Plot the data\nfor i, (voter, percentage, color) in enumerate(zip(voters, percentages, colors)):\n    ax.add_artist(plt.Circle((i*2+1, 0.5), 0.4, color=color))\n    ax.text(i*2+1, 0.5, f'{voter}\\n{percentage}%', ha='center', va='center')\n\n# Set the limits of the plot\nax.set_xlim(-1, len(voters)*2)\nax.set_ylim(-1, 1)\n\n# Add a color bar\nsm = plt.cm.ScalarMappable(cmap='Blues', norm=plt.Normalize(vmin=0, vmax=100))\nsm._A = []\ncbar = fig.colorbar(sm, ax=ax, orientation='vertical')\ncbar.set_label('Percentage')\n\n# Set the title and labels\nax.set_title('Voter Preferences')\nax.set_xlabel('Voter')\nax.set_ylabel('Percentage')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_22.pdf", "response": "```python\n\"\"\"\n=====================================\nLlama vs GPT: A Comparative Analysis\n=====================================\n\nThis example demonstrates how to create a side-by-side comparison of two models,\nLlama and GPT, using matplotlib. The comparison includes a bar chart for model\nperformance and a grid of images representing different scenarios.\n\n\"\"\"\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure with two subplots side by side\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(6.0, 3.0))\n\n# Set the title for each subplot\nax1.set_title('LLaMA')\nax2.set_title('GPT')\n\n# Define the data for the bar chart\nx = np.arange(5)\ny = [17, 8, 3, 10, 5]\ncolors = ['orange', 'brown', 'orange', 'orange', 'orange']\n\n# Create a bar chart for LLaMA\nax1.bar(x, y, color=colors)\n\n# Define the data for the grid of images\nimages = [\n    '#17', '#24', '#23',\n    '#5', '#17', '#1',\n    '#17', '#23', '#9',\n    '#11', '#24', '#9',\n    '#15'\n]\n\n# Create a grid of images for LLaMA\nfor i, img in enumerate(images):\n    ax1.text(i, 0.5, img, ha='center', va='center')\n\n# Define the data for the grid of images\nimages = [\n    '#17', '#24', '#23',\n    '#5', '#17', '#1',\n    '#17', '#23', '#9',\n    '#11', '#24', '#9',\n    '#15'\n]\n\n# Create a grid of images for GPT\nfor i, img in enumerate(images):\n    ax2.text(i, 0.5, img, ha='center', va='center')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_23.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Set the background color of the plot\nax.set_facecolor('white')\n\n# Set the title of the plot\nax.set_title('Stock Prices', fontsize=20)\n\n# Set the x-axis label\nax.set_xlabel('Time', fontsize=15)\n\n# Set the y-axis label\nax.set_ylabel('Price', fontsize=15)\n\n# Set the tick labels for the x-axis\nax.set_xticks([0, 1, 2, 3, 4, 5])\nax.set_xticklabels(['08:00', '09:00', '10:00', '11:00', '12:00', '13:00'])\n\n# Set the tick labels for the y-axis\nax.set_yticks([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7])\nax.set_yticklabels(['0.10', '0.20', '0.30', '0.40', '0.50', '0.60', '0.70'])\n\n# Set the grid lines\nax.grid(True)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the axis lines\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the plot area\nax.set_facecolor('white')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the axis lines\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the plot area\nax.set_facecolor('white')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the axis lines\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the plot area\nax.set_facecolor('white')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the axis lines\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the plot area\nax.set_facecolor('white')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the axis lines\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the plot area\nax.set_facecolor('white')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the axis lines\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the plot area\nax.set_facecolor('white')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the axis lines\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the plot area\nax.set_facecolor('white')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the axis lines\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the plot area\nax.set_facecolor('white')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the axis lines\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the plot area\nax.set_facecolor('white')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the axis lines\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the plot area\nax.set_facecolor('white')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the axis lines\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the plot area\nax.set_facecolor('white')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the axis lines\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the plot area\nax.set_facecolor('white')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the axis lines\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the plot area\nax.set_facecolor('white')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the axis lines\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the plot area\nax.set_facecolor('white')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the axis lines\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the plot area\nax.set_facecolor('white')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the axis lines\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the plot area\nax.set_facecolor('white')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the axis lines\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the plot area\nax.set_facecolor('white')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the axis lines\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the plot area\nax.set_facecolor('white')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the axis lines\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the plot area\nax.set_facecolor('white')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the axis lines\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the plot area\nax.set_facecolor('white')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the axis lines\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the plot area\nax.set_facecolor('white')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the axis lines\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the plot area\nax.set_facecolor('white')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the axis lines\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the plot area\nax.set_facecolor('white')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the axis lines\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the plot area\nax.set_facecolor('white')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the axis lines\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the plot area\nax.set_facecolor('white')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the color of the tick lines\nax.tick_params(axis='both', which='major', colors='black')\n\n# Set the color of the axis lines\nax.spines['top'].set_color('black')\nax.spines['bottom'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the plot area\nax.set_facecolor('white')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', which='major', labelsize=12)\n\n# Set the color of the tick lines\nax.tick_params(axis='"}
{"file": "dataset/ori_500/heatmap_24.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Set the background color of the plot\nax.set_facecolor('#F5F5DC')\n\n# Set the title of the plot\nax.set_title('Harvest [t/year]', fontsize=16)\n\n# Set the x-axis label\nax.set_xlabel('Time', fontsize=14)\n\n# Set the y-axis label\nax.set_ylabel('Harvest [t/year]', fontsize=14)\n\n# Set the x-axis limits\nax.set_xlim(0, 10)\n\n# Set the y-axis limits\nax.set_ylim(0, 6)\n\n# Set the x-axis ticks\nax.set_xticks(np.arange(0, 11, 1))\n\n# Set the y-axis ticks\nax.set_yticks(np.arange(0, 7, 1))\n\n# Set the x-axis tick labels\nax.set_xticklabels(['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10'])\n\n# Set the y-axis tick labels\nax.set_yticklabels(['0', '1', '2', '3', '4', '5', '6'])\n\n# Set the x-axis grid lines\nax.grid(axis='x')\n\n# Set the y-axis grid lines\nax.grid(axis='y')\n\n# Set the x-axis grid line style\nax.xaxis.grid(True, linestyle='--', linewidth=0.5)\n\n# Set the y-axis grid line style\nax.yaxis.grid(True, linestyle='--', linewidth=0.5)\n\n# Set the x-axis grid line color\nax.xaxis.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the y-axis grid line color\nax.yaxis.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the x-axis grid line alpha\nax.xaxis.grid(alpha=0.5)\n\n# Set the y-axis grid line alpha\nax.yaxis.grid(alpha=0.5)\n\n# Set the x-axis grid line zorder\nax.xaxis.grid(zorder=0)\n\n# Set the y-axis grid line zorder\nax.yaxis.grid(zorder=0)\n\n# Set the x-axis grid line visible\nax.xaxis.grid(visible=True)\n\n# Set the y-axis grid line visible\nax.yaxis.grid(visible=True)\n\n# Set the x-axis grid line which\nax.xaxis.grid(which='both')\n\n# Set the y-axis grid line which\nax.yaxis.grid(which='both')\n\n# Set the x-axis grid line axis\nax.xaxis.grid(axis='x')\n\n# Set the y-axis grid line axis\nax.yaxis.grid(axis='y')\n\n# Set the x-axis grid line linestyle\nax.xaxis.grid(linestyle='--')\n\n# Set the y-axis grid line linestyle\nax.yaxis.grid(linestyle='--')\n\n# Set the x-axis grid line linewidth\nax.xaxis.grid(linewidth=0.5)\n\n# Set the y-axis grid line linewidth\nax.yaxis.grid(linewidth=0.5)\n\n# Set the x-axis grid line color\nax.xaxis.grid(color='gray')\n\n# Set the y-axis grid line color\nax.yaxis.grid(color='gray')\n\n# Set the x-axis grid line alpha\nax.xaxis.grid(alpha=0.5)\n\n# Set the y-axis grid line alpha\nax.yaxis.grid(alpha=0.5)\n\n# Set the x-axis grid line zorder\nax.xaxis.grid(zorder=0)\n\n# Set the y-axis grid line zorder\nax.yaxis.grid(zorder=0)\n\n# Set the x-axis grid line visible\nax.xaxis.grid(visible=True)\n\n# Set the y-axis grid line visible\nax.yaxis.grid(visible=True)\n\n# Set the x-axis grid line which\nax.xaxis.grid(which='both')\n\n# Set the y-axis grid line which\nax.yaxis.grid(which='both')\n\n# Set the x-axis grid line axis\nax.xaxis.grid(axis='x')\n\n# Set the y-axis grid line axis\nax.yaxis.grid(axis='y')\n\n# Set the x-axis grid line linestyle\nax.xaxis.grid(linestyle='--')\n\n# Set the y-axis grid line linestyle\nax.yaxis.grid(linestyle='--')\n\n# Set the x-axis grid line linewidth\nax.xaxis.grid(linewidth=0.5)\n\n# Set the y-axis grid line linewidth\nax.yaxis.grid(linewidth=0.5)\n\n# Set the x-axis grid line color\nax.xaxis.grid(color='gray')\n\n# Set the y-axis grid line color\nax.yaxis.grid(color='gray')\n\n# Set the x-axis grid line alpha\nax.xaxis.grid(alpha=0.5)\n\n# Set the y-axis grid line alpha\nax.yaxis.grid(alpha=0.5)\n\n# Set the x-axis grid line zorder\nax.xaxis.grid(zorder=0)\n\n# Set the y-axis grid line zorder\nax.yaxis.grid(zorder=0)\n\n# Set the x-axis grid line visible\nax.xaxis.grid(visible=True)\n\n# Set the y-axis grid line visible\nax.yaxis.grid(visible=True)\n\n# Set the x-axis grid line which\nax.xaxis.grid(which='both')\n\n# Set the y-axis grid line which\nax.yaxis.grid(which='both')\n\n# Set the x-axis grid line axis\nax.xaxis.grid(axis='x')\n\n# Set the y-axis grid line axis\nax.yaxis.grid(axis='y')\n\n# Set the x-axis grid line linestyle\nax.xaxis.grid(linestyle='--')\n\n# Set the y-axis grid line linestyle\nax.yaxis.grid(linestyle='--')\n\n# Set the x-axis grid line linewidth\nax.xaxis.grid(linewidth=0.5)\n\n# Set the y-axis grid line linewidth\nax.yaxis.grid(linewidth=0.5)\n\n# Set the x-axis grid line color\nax.xaxis.grid(color='gray')\n\n# Set the y-axis grid line color\nax.yaxis.grid(color='gray')\n\n# Set the x-axis grid line alpha\nax.xaxis.grid(alpha=0.5)\n\n# Set the y-axis grid line alpha\nax.yaxis.grid(alpha=0.5)\n\n# Set the x-axis grid line zorder\nax.xaxis.grid(zorder=0)\n\n# Set the y-axis grid line zorder\nax.yaxis.grid(zorder=0)\n\n# Set the x-axis grid line visible\nax.xaxis.grid(visible=True)\n\n# Set the y-axis grid line visible\nax.yaxis.grid(visible=True)\n\n# Set the x-axis grid line which\nax.xaxis.grid(which='both')\n\n# Set the y-axis grid line which\nax.yaxis.grid(which='both')\n\n# Set the x-axis grid line axis\nax.xaxis.grid(axis='x')\n\n# Set the y-axis grid line axis\nax.yaxis.grid(axis='y')\n\n# Set the x-axis grid line linestyle\nax.xaxis.grid(linestyle='--')\n\n# Set the y-axis grid line linestyle\nax.yaxis.grid(linestyle='--')\n\n# Set the x-axis grid line linewidth\nax.xaxis.grid(linewidth=0.5)\n\n# Set the y-axis grid line linewidth\nax.yaxis.grid(linewidth=0.5)\n\n# Set the x-axis grid line color\nax.xaxis.grid(color='gray')\n\n# Set the y-axis grid line color\nax.yaxis.grid(color='gray')\n\n# Set the x-axis grid line alpha\nax.xaxis.grid(alpha=0.5)\n\n# Set the y-axis grid line alpha\nax.yaxis.grid(alpha=0.5)\n\n# Set the x-axis grid line zorder\nax.xaxis.grid(zorder=0)\n\n# Set the y-axis grid line zorder\nax.yaxis.grid(zorder=0)\n\n# Set the x-axis grid line visible\nax.xaxis.grid(visible=True)\n\n# Set the y-axis grid line visible\nax.yaxis.grid(visible=True)\n\n# Set the x-axis grid line which\nax.xaxis.grid(which='both')\n\n# Set the y-axis grid line which\nax.yaxis.grid(which='both')\n\n# Set the x-axis grid line axis\nax.xaxis.grid(axis='x')\n\n# Set the y-axis grid line axis\nax.yaxis.grid(axis='y')\n\n# Set the x-axis grid line linestyle\nax.xaxis.grid(linestyle='--')\n\n# Set the y-axis grid line linestyle\nax.yaxis.grid(linestyle='--')\n\n# Set the x-axis grid line linewidth\nax.xaxis.grid(linewidth=0.5)\n\n# Set the y-axis grid line linewidth\nax.yaxis.grid(linewidth=0.5)\n\n# Set the x-axis grid line color\nax.xaxis.grid(color='gray')\n\n# Set the y-axis grid line color\nax.yaxis.grid(color='gray')\n\n# Set the x-axis grid line alpha\nax.xaxis.grid(alpha=0.5)\n\n# Set the y-axis grid line alpha\nax.yaxis.grid(alpha=0.5)\n\n# Set the x-axis grid line zorder\nax.xaxis.grid(zorder=0)\n\n# Set the y-axis grid line zorder\nax.yaxis.grid(zorder=0)\n\n# Set the x-axis grid line visible\nax.xaxis.grid(visible=True)\n\n# Set the y-axis grid line visible\nax.yaxis.grid(visible=True)\n\n# Set the x-axis grid line which\nax.xaxis.grid(which='both')\n\n# Set the y-axis grid line which\nax.yaxis.grid(which='both')\n\n# Set the x-axis grid line axis\nax.xaxis.grid(axis='x')\n\n# Set the y-axis grid line axis\nax.yaxis.grid(axis='y')\n\n# Set the x-axis grid line linestyle\nax.xaxis.grid(linestyle='--')\n\n# Set the y-axis grid line linestyle\nax.yaxis.grid(linestyle='--')\n\n# Set the x-axis grid line linewidth\nax.xaxis.grid(linewidth=0.5)\n\n# Set the y-axis grid line linewidth\nax.yaxis.grid(linewidth=0.5)\n\n# Set the x-axis grid line color\nax.xaxis.grid(color='gray')\n\n# Set the y-axis grid line color\nax.yaxis.grid(color='gray')\n\n# Set the x-axis grid line alpha\nax.xaxis.grid(alpha=0.5)\n\n# Set the y-axis grid line alpha\nax.yaxis.grid(alpha=0.5)\n\n# Set the x-axis grid line zorder\nax.xaxis.grid(zorder=0)\n\n# Set the y-axis grid line zorder\nax.yaxis.grid(zorder=0)\n\n# Set the x-axis grid line visible\nax.xaxis.grid(visible=True)\n\n# Set the y-axis grid line visible\nax.yaxis.grid(visible=True)\n\n# Set the x-axis grid line which\nax.xaxis.grid(which='both')\n\n# Set the y-axis grid line which\nax.yaxis.grid(which='both')\n\n# Set the x-axis grid line axis\nax.xaxis.grid(axis='x')\n\n# Set the y-axis grid line axis\nax.yaxis.grid(axis='y')\n\n# Set the x-axis grid line linestyle\nax.xaxis.grid(linestyle='--')\n\n# Set the y-axis grid line linestyle\nax.yaxis.grid(linestyle='--')\n\n# Set the x-axis grid line linewidth\nax.xaxis.grid(linewidth=0.5)\n\n# Set the y-axis grid line linewidth\nax.yaxis.grid(linewidth=0.5)\n\n# Set the x-axis grid line color\nax.xaxis.grid(color='gray')\n\n# Set the y-axis grid line color\nax.yaxis.grid(color='gray')\n\n# Set the x-axis grid line alpha\nax.xaxis.grid(alpha=0.5)\n\n# Set the y-axis grid line alpha\nax.yaxis.grid(alpha=0.5)\n\n# Set the x-axis grid line zorder\nax.xaxis.grid(zorder=0)\n\n# Set the y-axis grid line zorder\nax.yaxis.grid(zorder=0)\n\n# Set the x-axis grid line visible\nax.xaxis.grid(visible=True)\n\n# Set the y-axis grid line visible\nax.yaxis.grid(visible=True)\n\n# Set the x-axis grid line which\nax.xaxis.grid(which='both')\n\n# Set the y-axis grid line which\nax.yaxis.grid(which='both')\n\n# Set the x-axis grid line axis\nax.xaxis.grid(axis='x')\n\n# Set the y-axis grid line axis\nax.yaxis.grid(axis='y')\n\n# Set the x-axis grid line linestyle\nax.xaxis.grid(linestyle='--')\n\n# Set the y-axis grid line linestyle\nax.yaxis.grid(linestyle='--')\n\n# Set the x-axis grid line linewidth\nax.xaxis.grid(linewidth=0.5)\n\n# Set the y-axis grid line linewidth\nax.yaxis.grid(linewidth=0.5)\n\n# Set the x-axis grid line color\nax.xaxis.grid(color='gray')\n\n# Set the y-axis grid line color\nax.yaxis.grid(color='gray')\n\n# Set the x-axis grid line alpha\nax.xaxis.grid(alpha=0.5)\n\n# Set the y-axis grid line alpha\nax.yaxis.grid(alpha=0.5)\n\n# Set the x-axis grid line zorder\nax.xaxis.grid(zorder=0)\n\n# Set the y-axis grid line zorder\nax.yaxis.grid(zorder=0)\n\n# Set the x-axis grid line visible\nax.xaxis.grid(visible=True)\n\n# Set the y-axis grid line visible\nax.yaxis.grid(visible=True)\n\n# Set the x-axis grid line which\nax.xaxis.grid(which='both')\n\n# Set the y-axis grid line which\nax.yaxis.grid(which='both')\n\n# Set the x-axis grid line axis\nax.xaxis.grid(axis='x')\n\n# Set the y-axis grid line axis\nax.yaxis.grid(axis='y')\n\n# Set the x-axis grid line linestyle\nax.xaxis.grid(linestyle='--')\n\n# Set the y-axis grid line linestyle\nax.yaxis.grid(linestyle='--')\n\n# Set the x-axis grid line linewidth\nax.xaxis.grid(linewidth=0.5)\n\n# Set the y-axis grid line linewidth\nax.yaxis.grid(linewidth=0.5)\n\n# Set the x-axis grid line color\nax.xaxis.grid(color='gray')\n\n# Set the y-axis grid line color\nax.yaxis.grid(color='gray')\n\n# Set the x-axis grid line alpha\nax.xaxis.grid(alpha=0.5)\n\n# Set the y-axis grid line alpha\nax.yaxis.grid(alpha=0.5)\n\n# Set the x-axis grid line zorder\nax.xaxis.grid(zorder=0)\n\n# Set the y-axis grid line zorder\nax.yaxis.grid(zorder=0)\n\n# Set the x-axis grid line visible\nax.xaxis.grid(visible=True)\n\n# Set the y-axis grid line visible\nax.yaxis.grid(visible=True)\n\n# Set the x-axis grid line which\nax.xaxis.grid(which='both')\n\n# Set the y-axis grid line which\nax.yaxis.grid(which='both')\n\n# Set the x-axis grid line axis\nax.xaxis.grid(axis='x')\n\n# Set the y-axis grid line axis\nax.yaxis.grid(axis='y')\n\n# Set the x-axis grid line linestyle\nax.xaxis.grid(linestyle='--')\n\n# Set the y-axis grid line linestyle\nax.yaxis.grid(linestyle='--')\n\n# Set the x-axis grid line linewidth\nax.xaxis.grid(linewidth=0.5)\n\n# Set the y-axis grid line linewidth\nax.yaxis.grid(linewidth=0.5)\n\n# Set the x-axis grid line color\nax.xaxis.grid(color='gray')\n\n# Set the y-axis grid line color\nax.yaxis.grid(color='gray')\n\n# Set the x-axis grid line alpha\nax.xaxis.grid(alpha=0.5)\n\n# Set the y-axis grid line alpha\nax.yaxis.grid(alpha=0.5)\n\n# Set the x-axis grid line zorder\nax.xaxis.grid(zorder=0)\n\n# Set the y-axis grid line zorder\nax.yaxis.grid(zorder=0)\n\n# Set the x-axis grid line visible\nax.xaxis.grid(visible=True)\n\n# Set the y-axis grid line visible\nax.yaxis.grid(visible=True)\n\n# Set the x-axis grid line which\nax.xaxis.grid(which='both')\n\n# Set the y-axis grid line which\nax.yaxis.grid(which='both')\n\n# Set the x-axis grid line axis\nax.xaxis.grid(axis='x')\n\n# Set the y-axis grid line axis\nax.yaxis.grid(axis='y')\n\n# Set the x-axis grid line linestyle\nax.xaxis.grid(linestyle='--')\n\n# Set the y-axis grid line linestyle\nax.yaxis.grid(linestyle='--')\n\n# Set the x-axis grid line linewidth\nax.xaxis.grid(linewidth=0.5)\n\n# Set the y-axis grid line linewidth\nax.yaxis.grid(linewidth=0.5)\n\n# Set the x-axis grid line color\nax.xaxis.grid(color='gray')\n\n# Set the y-axis grid line color\nax.yaxis.grid(color='gray')\n\n# Set the x-axis grid line alpha\nax.xaxis.grid(alpha=0.5)\n\n# Set the y-axis grid line alpha\nax.yaxis.grid(alpha=0.5)\n\n# Set the x-axis grid line zorder\nax.xaxis.grid(zorder=0)\n\n# Set the y-axis grid line zorder\nax.yaxis.grid(zorder=0)\n\n# Set the x-axis grid line visible\nax.xaxis.grid(visible=True)\n\n# Set the y-axis grid line visible\nax.yaxis.grid(visible=True)\n\n# Set the x-axis grid line which\nax.xaxis.grid(which='both')\n\n# Set the y-axis grid line which\nax.yaxis.grid(which='both')\n\n# Set the x-axis grid line axis\nax.xaxis.grid(axis='x')\n\n# Set the y-axis grid line axis\nax.yaxis.grid(axis='y')\n\n# Set the x-axis grid line linestyle\nax.xaxis.grid(linestyle='--')\n\n# Set the y-axis grid line linestyle\nax.yaxis.grid(linestyle='--')\n\n# Set the x-axis grid line linewidth\nax.xaxis.grid(linewidth=0.5)\n\n# Set the y-axis grid line linewidth\nax.yaxis.grid(linewidth=0.5)\n\n# Set the x-axis grid line color\nax.xaxis.grid(color='gray')\n\n# Set the y-axis grid line color\nax.yaxis.grid(color='gray')\n\n# Set the x-axis grid line alpha\nax.xaxis.grid(alpha=0.5)\n\n# Set the y-axis grid line alpha\nax.yaxis.grid(alpha=0.5)\n\n# Set the x-axis grid line zorder\nax.xaxis.grid(zorder=0)\n\n# Set the y-axis grid line zorder\nax.yaxis.grid(zorder=0)\n\n# Set the x-axis grid line visible\nax.xaxis.grid(visible=True)\n\n# Set the y-axis grid line visible\nax.yaxis.grid(visible=True)\n\n# Set the x-axis grid line which\nax.xaxis.grid(which='both')\n\n# Set the y-axis grid line which\nax.yaxis.grid(which='both')\n\n# Set the x-axis grid line axis\nax.xaxis.grid(axis='x')\n\n# Set the y-axis grid line axis\nax.yaxis.grid(axis='y')\n\n# Set the x-axis grid line linestyle\nax.xaxis.grid(linestyle='--')\n\n# Set the y-axis grid line linestyle\nax.yaxis.grid(linestyle='--')\n\n# Set the x-axis grid line linewidth\nax.xaxis.grid(linewidth=0.5)\n\n# Set the y-axis grid line linewidth\nax.yaxis.grid(linewidth=0.5)\n\n# Set the x-axis grid line color\nax.xaxis.grid(color='gray')\n\n# Set the y-axis grid line color\nax.yaxis.grid(color='gray')\n\n# Set the x-axis grid line alpha\nax.xaxis.grid(alpha=0.5)\n\n# Set"}
{"file": "dataset/ori_500/heatmap_25.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the background color of the plot\nax.set_facecolor('lightblue')\n\n# Set the title of the plot\nax.set_title('Crops and Their Characteristics')\n\n# Set the x-axis label\nax.set_xlabel('Crops')\n\n# Set the y-axis label\nax.set_ylabel('Characteristics')\n\n# Define the crops and their characteristics\ncrops = ['cucumber', 'tomato', 'lettuce', 'asparagus', 'potato', 'barley']\nharvest = [0.8, 2.4, 1.1, 0.6, 0.7, 0.1]\nquality_rating = [4.0, 3.9, 3.8, 3.7, 3.6, 3.5]\nweekly_sales = [60, 50, 40, 30, 20, 10]\n\n# Create a bar chart for harvest\nax.bar(crops, harvest, color='orange', label='Harvest')\n\n# Create a bar chart for quality rating\nax.bar(crops, quality_rating, color='green', label='Quality Rating')\n\n# Create a bar chart for weekly sales\nax.bar(crops, weekly_sales, color='purple', label='Weekly Sales')\n\n# Add a legend to the plot\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_26.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(9.0, 6.0))\n\n# Create a grid of subplots\ngs = fig.add_gridspec(4, 4)\n\n# Add subplots with colored rectangles\nfor i in range(4):\n    for j in range(4):\n        ax = fig.add_subplot(gs[i, j])\n        ax.imshow(np.random.rand(10, 10), cmap='viridis')\n        ax.set_title(f\"subplot {i*4+j+1}\")\n        ax.axis('off')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_27.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6, 4))\n\n# Set the title of the plot\nax.set_title('default: no edges')\n\n# Create a rectangle for the first bar\nrect1 = plt.Rectangle((0, 0), 2, 3, color='red')\nax.add_patch(rect1)\n\n# Create a rectangle for the second bar\nrect2 = plt.Rectangle((2, 0), 2, 3, color='green')\nax.add_patch(rect2)\n\n# Create a rectangle for the third bar\nrect3 = plt.Rectangle((4, 0), 2, 3, color='blue')\nax.add_patch(rect3)\n\n# Create a rectangle for the fourth bar\nrect4 = plt.Rectangle((6, 0), 2, 3, color='yellow')\nax.add_patch(rect4)\n\n# Create a rectangle for the fifth bar\nrect5 = plt.Rectangle((8, 0), 2, 3, color='purple')\nax.add_patch(rect5)\n\n# Create a rectangle for the sixth bar\nrect6 = plt.Rectangle((0, 3), 2, 3, color='orange')\nax.add_patch(rect6)\n\n# Create a rectangle for the seventh bar\nrect7 = plt.Rectangle((2, 3), 2, 3, color='pink')\nax.add_patch(rect7)\n\n# Create a rectangle for the eighth bar\nrect8 = plt.Rectangle((4, 3), 2, 3, color='cyan')\nax.add_patch(rect8)\n\n# Create a rectangle for the ninth bar\nrect9 = plt.Rectangle((6, 3), 2, 3, color='brown')\nax.add_patch(rect9)\n\n# Create a rectangle for the tenth bar\nrect10 = plt.Rectangle((8, 3), 2, 3, color='gray')\nax.add_patch(rect10)\n\n# Set the x-axis limits\nax.set_xlim(0, 10)\n\n# Set the y-axis limits\nax.set_ylim(0, 6)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_28.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Create a grid of rectangles\nrects = []\nfor i in range(10):\n    for j in range(10):\n        rect = plt.Rectangle((i, j), 1, 1, color='lightblue')\n        rects.append(rect)\nax.add_collection(plt.collections.PatchCollection(rects))\n\n# Set the limits of the plot\nax.set_xlim(-1, 10)\nax.set_ylim(-1, 10)\n\n# Set the labels\nax.set_xlabel('Vendor')\nax.set_ylabel('Product')\n\n# Set the title\nax.set_title('Sales of vendors (in tons/year)')\n\n# Set the x-ticks and y-ticks\nax.set_xticks(range(10))\nax.set_yticks(range(10))\n\n# Set the x-tick labels and y-tick labels\nax.set_xticklabels(['Vendor A', 'Vendor B', 'Vendor C', 'Vendor D', 'Vendor E', 'Vendor F', 'Vendor G', 'Vendor H', 'Vendor I', 'Vendor J'])\nax.set_yticklabels(['apples', 'bananas', 'cherries', 'dates', 'elderberries', 'figs', 'grapes'])\n\n# Set the x-tick rotation\nax.set_xticklabels(ax.get_xticklabels(), rotation=45)\n\n# Set the y-tick rotation\nax.set_yticklabels(ax.get_yticklabels(), rotation=45)\n\n# Set the x-tick label color\nax.set_xticklabels(ax.get_xticklabels(), color='red')\n\n# Set the y-tick label color\nax.set_yticklabels(ax.get_yticklabels(), color='green')\n\n# Set the x-tick label font size\nax.set_xticklabels(ax.get_xticklabels(), fontsize=12)\n\n# Set the y-tick label font size\nax.set_yticklabels(ax.get_yticklabels(), fontsize=12)\n\n# Set the x-tick label font weight\nax.set_xticklabels(ax.get_xticklabels(), fontweight='bold')\n\n# Set the y-tick label font weight\nax.set_yticklabels(ax.get_yticklabels(), fontweight='bold')\n\n# Set the x-tick label font style\nax.set_xticklabels(ax.get_xticklabels(), fontstyle='italic')\n\n# Set the y-tick label font style\nax.set_yticklabels(ax.get_yticklabels(), fontstyle='italic')\n\n# Set the x-tick label font family\nax.set_xticklabels(ax.get_xticklabels(), fontfamily='serif')\n\n# Set the y-tick label font family\nax.set_yticklabels(ax.get_yticklabels(), fontfamily='sans-serif')\n\n# Set the x-tick label font variant\nax.set_xticklabels(ax.get_xticklabels(), fontvariant='small-caps')\n\n# Set the y-tick label font variant\nax.set_yticklabels(ax.get_yticklabels(), fontvariant='normal')\n\n# Set the x-tick label font stretch\nax.set_xticklabels(ax.get_xticklabels(), fontstretch='ultra-condensed')\n\n# Set the y-tick label font stretch\nax.set_yticklabels(ax.get_yticklabels(), fontstretch='ultra-expanded')\n\n# Set the x-tick label font size\nax.set_xticklabels(ax.get_xticklabels(), fontsize=12)\n\n# Set the y-tick label font size\nax.set_yticklabels(ax.get_yticklabels(), fontsize=12)\n\n# Set the x-tick label font weight\nax.set_xticklabels(ax.get_xticklabels(), fontweight='bold')\n\n# Set the y-tick label font weight\nax.set_yticklabels(ax.get_yticklabels(), fontweight='bold')\n\n# Set the x-tick label font style\nax.set_xticklabels(ax.get_xticklabels(), fontstyle='italic')\n\n# Set the y-tick label font style\nax.set_yticklabels(ax.get_yticklabels(), fontstyle='italic')\n\n# Set the x-tick label font family\nax.set_xticklabels(ax.get_xticklabels(), fontfamily='serif')\n\n# Set the y-tick label font family\nax.set_yticklabels(ax.get_yticklabels(), fontfamily='sans-serif')\n\n# Set the x-tick label font variant\nax.set_xticklabels(ax.get_xticklabels(), fontvariant='small-caps')\n\n# Set the y-tick label font variant\nax.set_yticklabels(ax.get_yticklabels(), fontvariant='normal')\n\n# Set the x-tick label font stretch\nax.set_xticklabels(ax.get_xticklabels(), fontstretch='ultra-condensed')\n\n# Set the y-tick label font stretch\nax.set_yticklabels(ax.get_yticklabels(), fontstretch='ultra-expanded')\n\n# Set the x-tick label font size\nax.set_xticklabels(ax.get_xticklabels(), fontsize=12)\n\n# Set the y-tick label font size\nax.set_yticklabels(ax.get_yticklabels(), fontsize=12)\n\n# Set the x-tick label font weight\nax.set_xticklabels(ax.get_xticklabels(), fontweight='bold')\n\n# Set the y-tick label font weight\nax.set_yticklabels(ax.get_yticklabels(), fontweight='bold')\n\n# Set the x-tick label font style\nax.set_xticklabels(ax.get_xticklabels(), fontstyle='italic')\n\n# Set the y-tick label font style\nax.set_yticklabels(ax.get_yticklabels(), fontstyle='italic')\n\n# Set the x-tick label font family\nax.set_xticklabels(ax.get_xticklabels(), fontfamily='serif')\n\n# Set the y-tick label font family\nax.set_yticklabels(ax.get_yticklabels(), fontfamily='sans-serif')\n\n# Set the x-tick label font variant\nax.set_xticklabels(ax.get_xticklabels(), fontvariant='small-caps')\n\n# Set the y-tick label font variant\nax.set_yticklabels(ax.get_yticklabels(), fontvariant='normal')\n\n# Set the x-tick label font stretch\nax.set_xticklabels(ax.get_xticklabels(), fontstretch='ultra-condensed')\n\n# Set the y-tick label font stretch\nax.set_yticklabels(ax.get_yticklabels(), fontstretch='ultra-expanded')\n\n# Set the x-tick label font size\nax.set_xticklabels(ax.get_xticklabels(), fontsize=12)\n\n# Set the y-tick label font size\nax.set_yticklabels(ax.get_yticklabels(), fontsize=12)\n\n# Set the x-tick label font weight\nax.set_xticklabels(ax.get_xticklabels(), fontweight='bold')\n\n# Set the y-tick label font weight\nax.set_yticklabels(ax.get_yticklabels(), fontweight='bold')\n\n# Set the x-tick label font style\nax.set_xticklabels(ax.get_xticklabels(), fontstyle='italic')\n\n# Set the y-tick label font style\nax.set_yticklabels(ax.get_yticklabels(), fontstyle='italic')\n\n# Set the x-tick label font family\nax.set_xticklabels(ax.get_xticklabels(), fontfamily='serif')\n\n# Set the y-tick label font family\nax.set_yticklabels(ax.get_yticklabels(), fontfamily='sans-serif')\n\n# Set the x-tick label font variant\nax.set_xticklabels(ax.get_xticklabels(), fontvariant='small-caps')\n\n# Set the y-tick label font variant\nax.set_yticklabels(ax.get_yticklabels(), fontvariant='normal')\n\n# Set the x-tick label font stretch\nax.set_xticklabels(ax.get_xticklabels(), fontstretch='ultra-condensed')\n\n# Set the y-tick label font stretch\nax.set_yticklabels(ax.get_yticklabels(), fontstretch='ultra-expanded')\n\n# Set the x-tick label font size\nax.set_xticklabels(ax.get_xticklabels(), fontsize=12)\n\n# Set the y-tick label font size\nax.set_yticklabels(ax.get_yticklabels(), fontsize=12)\n\n# Set the x-tick label font weight\nax.set_xticklabels(ax.get_xticklabels(), fontweight='bold')\n\n# Set the y-tick label font weight\nax.set_yticklabels(ax.get_yticklabels(), fontweight='bold')\n\n# Set the x-tick label font style\nax.set_xticklabels(ax.get_xticklabels(), fontstyle='italic')\n\n# Set the y-tick label font style\nax.set_yticklabels(ax.get_yticklabels(), fontstyle='italic')\n\n# Set the x-tick label font family\nax.set_xticklabels(ax.get_xticklabels(), fontfamily='serif')\n\n# Set the y-tick label font family\nax.set_yticklabels(ax.get_yticklabels(), fontfamily='sans-serif')\n\n# Set the x-tick label font variant\nax.set_xticklabels(ax.get_xticklabels(), fontvariant='small-caps')\n\n# Set the y-tick label font variant\nax.set_yticklabels(ax.get_yticklabels(), fontvariant='normal')\n\n# Set the x-tick label font stretch\nax.set_xticklabels(ax.get_xticklabels(), fontstretch='ultra-condensed')\n\n# Set the y-tick label font stretch\nax.set_yticklabels(ax.get_yticklabels(), fontstretch='ultra-expanded')\n\n# Set the x-tick label font size\nax.set_xticklabels(ax.get_xticklabels(), fontsize=12)\n\n# Set the y-tick label font size\nax.set_yticklabels(ax.get_yticklabels(), fontsize=12)\n\n# Set the x-tick label font weight\nax.set_xticklabels(ax.get_xticklabels(), fontweight='bold')\n\n# Set the y-tick label font weight\nax.set_yticklabels(ax.get_yticklabels(), fontweight='bold')\n\n# Set the x-tick label font style\nax.set_xticklabels(ax.get_xticklabels(), fontstyle='italic')\n\n# Set the y-tick label font style\nax.set_yticklabels(ax.get_yticklabels(), fontstyle='italic')\n\n# Set the x-tick label font family\nax.set_xticklabels(ax.get_xticklabels(), fontfamily='serif')\n\n# Set the y-tick label font family\nax.set_yticklabels(ax.get_yticklabels(), fontfamily='sans-serif')\n\n# Set the x-tick label font variant\nax.set_xticklabels(ax.get_xticklabels(), fontvariant='small-caps')\n\n# Set the y-tick label font variant\nax.set_yticklabels(ax.get_yticklabels(), fontvariant='normal')\n\n# Set the x-tick label font stretch\nax.set_xticklabels(ax.get_xticklabels(), fontstretch='ultra-condensed')\n\n# Set the y-tick label font stretch\nax.set_yticklabels(ax.get_yticklabels(), fontstretch='ultra-expanded')\n\n# Set the x-tick label font size\nax.set_xticklabels(ax.get_xticklabels(), fontsize=12)\n\n# Set the y-tick label font size\nax.set_yticklabels(ax.get_yticklabels(), fontsize=12)\n\n# Set the x-tick label font weight\nax.set_xticklabels(ax.get_xticklabels(), fontweight='bold')\n\n# Set the y-tick label font weight\nax.set_yticklabels(ax.get_yticklabels(), fontweight='bold')\n\n# Set the x-tick label font style\nax.set_xticklabels(ax.get_xticklabels(), fontstyle='italic')\n\n# Set the y-tick label font style\nax.set_yticklabels(ax.get_yticklabels(), fontstyle='italic')\n\n# Set the x-tick label font family\nax.set_xticklabels(ax.get_xticklabels(), fontfamily='serif')\n\n# Set the y-tick label font family\nax.set_yticklabels(ax.get_yticklabels(), fontfamily='sans-serif')\n\n# Set the x-tick label font variant\nax.set_xticklabels(ax.get_xticklabels(), fontvariant='small-caps')\n\n# Set the y-tick label font variant\nax.set_yticklabels(ax.get_yticklabels(), fontvariant='normal')\n\n# Set the x-tick label font stretch\nax.set_xticklabels(ax.get_xticklabels(), fontstretch='ultra-condensed')\n\n# Set the y-tick label font stretch\nax.set_yticklabels(ax.get_yticklabels(), fontstretch='ultra-expanded')\n\n# Set the x-tick label font size\nax.set_xticklabels(ax.get_xticklabels(), fontsize=12)\n\n# Set the y-tick label font size\nax.set_yticklabels(ax.get_yticklabels(), fontsize=12)\n\n# Set the x-tick label font weight\nax.set_xticklabels(ax.get_xticklabels(), fontweight='bold')\n\n# Set the y-tick label font weight\nax.set_yticklabels(ax.get_yticklabels(), fontweight='bold')\n\n# Set the x-tick label font style\nax.set_xticklabels(ax.get_xticklabels(), fontstyle='italic')\n\n# Set the y-tick label font style\nax.set_yticklabels(ax.get_yticklabels(), fontstyle='italic')\n\n# Set the x-tick label font family\nax.set_xticklabels(ax.get_xticklabels(), fontfamily='serif')\n\n# Set the y-tick label font family\nax.set_yticklabels(ax.get_yticklabels(), fontfamily='sans-serif')\n\n# Set the x-tick label font variant\nax.set_xticklabels(ax.get_xticklabels(), fontvariant='small-caps')\n\n# Set the y-tick label font variant\nax.set_yticklabels(ax.get_yticklabels(), fontvariant='normal')\n\n# Set the x-tick label font stretch\nax.set_xticklabels(ax.get_xticklabels(), fontstretch='ultra-condensed')\n\n# Set the y-tick label font stretch\nax.set_yticklabels(ax.get_yticklabels(), fontstretch='ultra-expanded')\n\n# Set the x-tick label font size\nax.set_xticklabels(ax.get_xticklabels(), fontsize=12)\n\n# Set the y-tick label font size\nax.set_yticklabels(ax.get_yticklabels(), fontsize=12)\n\n# Set the x-tick label font weight\nax.set_xticklabels(ax.get_xticklabels(), fontweight='bold')\n\n# Set the y-tick label font weight\nax.set_yticklabels(ax.get_yticklabels(), fontweight='bold')\n\n# Set the x-tick label font style\nax.set_xticklabels(ax.get_xticklabels(), fontstyle='italic')\n\n# Set the y-tick label font style\nax.set_yticklabels(ax.get_yticklabels(), fontstyle='italic')\n\n# Set the x-tick label font family\nax.set_xticklabels(ax.get_xticklabels(), fontfamily='serif')\n\n# Set the y-tick label font family\nax.set_yticklabels(ax.get_yticklabels(), fontfamily='sans-serif')\n\n# Set the x-tick label font variant\nax.set_xticklabels(ax.get_xticklabels(), fontvariant='small-caps')\n\n# Set the y-tick label font variant\nax.set_yticklabels(ax.get_yticklabels(), fontvariant='normal')\n\n# Set the x-tick label font stretch\nax.set_xticklabels(ax.get_xticklabels(), fontstretch='ultra-condensed')\n\n# Set the y-tick label font stretch\nax.set_yticklabels(ax.get_yticklabels(), fontstretch='ultra-expanded')\n\n# Set the x-tick label font size\nax.set_xticklabels(ax.get_xticklabels(), fontsize=12)\n\n# Set the y-tick label font size\nax.set_yticklabels(ax.get_yticklabels(), fontsize=12)\n\n# Set the x-tick label font weight\nax.set_xticklabels(ax.get_xticklabels(), fontweight='bold')\n\n# Set the y-tick label font weight\nax.set_yticklabels(ax.get_yticklabels(), fontweight='bold')\n\n# Set the x-tick label font style\nax.set_xticklabels(ax.get_xticklabels(), fontstyle='italic')\n\n# Set the y-tick label font style\nax.set_yticklabels(ax.get_yticklabels(), fontstyle='italic')\n\n# Set the x-tick label font family\nax.set_xticklabels(ax.get_xticklabels(), fontfamily='serif')\n\n# Set the y-tick label font family\nax.set_yticklabels(ax.get_yticklabels(), fontfamily='sans-serif')\n\n# Set the x-tick label font variant\nax.set_xticklabels(ax.get_xticklabels(), fontvariant='small-caps')\n\n# Set the y-tick label font variant\nax.set_yticklabels(ax.get_yticklabels(), fontvariant='normal')\n\n# Set the x-tick label font stretch\nax.set_xticklabels(ax.get_xticklabels(), fontstretch='ultra-condensed')\n\n# Set the y-tick label font stretch\nax.set_yticklabels(ax.get_yticklabels(), fontstretch='ultra-expanded')\n\n# Set the x-tick label font size\nax.set_xticklabels(ax.get_xticklabels(), fontsize=12)\n\n# Set the y-tick label font size\nax.set_yticklabels(ax.get_yticklabels(), fontsize=12)\n\n# Set the x-tick label font weight\nax.set_xticklabels(ax.get_xticklabels(), fontweight='bold')\n\n# Set the y-tick label font weight\nax.set_yticklabels(ax.get_yticklabels(), fontweight='bold')\n\n# Set the x-tick label font style\nax.set_xticklabels(ax.get_xticklabels(), fontstyle='italic')\n\n# Set the y-tick label font style\nax.set_yticklabels(ax.get_yticklabels(), fontstyle='italic')\n\n# Set the x-tick label font family\nax.set_xticklabels(ax.get_xticklabels(), fontfamily='serif')\n\n# Set the y-tick label font family\nax.set_yticklabels(ax.get_yticklabels(), fontfamily='sans-serif')\n\n# Set the x-tick label font variant\nax.set_xticklabels(ax.get_xticklabels(), fontvariant='small-caps')\n\n# Set the y-tick label font variant\nax.set_yticklabels(ax.get_yticklabels(), fontvariant='normal')\n\n# Set the x-tick label font stretch\nax.set_xticklabels(ax.get_xticklabels(), fontstretch='ultra-condensed')\n\n# Set the y-tick label font stretch\nax.set_yticklabels(ax.get_yticklabels(), fontstretch='ultra-expanded')\n\n# Set the x-tick label font size\nax.set_xticklabels(ax.get_xticklabels(), fontsize=12)\n\n# Set the y-tick label font size\nax.set_yticklabels(ax.get_yticklabels(), fontsize=12)\n\n# Set the x-tick label font weight\nax.set_xticklabels(ax.get_xticklabels(), fontweight='bold')\n\n# Set the y-tick label font weight\nax.set_yticklabels(ax.get_yticklabels(), fontweight='bold')\n\n# Set the x-tick label font style\nax.set_xticklabels(ax.get_xticklabels(), fontstyle='italic')\n\n# Set the y-tick label font style\nax.set_yticklabels(ax.get_yticklabels(), fontstyle='italic')\n\n# Set the x-tick label font family\nax.set_xticklabels(ax.get_xticklabels(), fontfamily='serif')\n\n# Set the y-tick label font family\nax.set"}
{"file": "dataset/ori_500/heatmap_29.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(5.0, 4.0))\n\n# Set the title of the plot\nax.set_title('Degree of acceptance of a product')\n\n# Create a bar chart\nbars = ax.bar(['High', 'Medium', 'Low'], [42, 38, 55], color='blue')\n\n# Add labels to the bars\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 2), ha='center', va='bottom')\n\n# Set the x-axis label\nax.set_xlabel('Degree of acceptance')\n\n# Set the y-axis label\nax.set_ylabel('Product rating')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the background color of the plot\nax.set_facecolor('lightblue')\n\n# Create a colorbar with a gradient\ncmap = plt.get_cmap('Blues')\nnorm = plt.Normalize(vmin=0.1, vmax=0.9)\nsm = plt.cm.ScalarMappable(cmap=cmap, norm=norm)\nsm.set_array([])\ncbar = fig.colorbar(sm, ax=ax)\n\n# Set the title of the colorbar\ncbar.set_label('Bottlebeck Distance')\n\n# Set the title of the plot\nax.set_title('Wasserstein Distance')\n\n# Set the x-axis label\nax.set_xlabel('X-axis Label')\n\n# Set the y-axis label\nax.set_ylabel('Y-axis Label')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_30.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('ROC\\'s AUC')\n\n# Set the x-axis label\nax.set_xlabel('Timeshift')\n\n# Set the y-axis label\nax.set_ylabel('AUC')\n\n# Create a grid of rectangles\nfor i in range(1, 9):\n    for j in range(1, 9):\n        ax.add_patch(plt.Rectangle((i-1, j-1), 1, 1, color='lightblue'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((3, 3), 2, 2, color='red'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((5, 5), 2, 2, color='blue'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((7, 7), 2, 2, color='green'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((9, 9), 2, 2, color='orange'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((11, 11), 2, 2, color='purple'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((13, 13), 2, 2, color='pink'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((15, 15), 2, 2, color='brown'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((17, 17), 2, 2, color='cyan'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((19, 19), 2, 2, color='magenta'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((21, 21), 2, 2, color='yellow'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((23, 23), 2, 2, color='black'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((25, 25), 2, 2, color='white'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((27, 27), 2, 2, color='gray'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((29, 29), 2, 2, color='silver'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((31, 31), 2, 2, color='gold'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((33, 33), 2, 2, color='bronze'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((35, 35), 2, 2, color='ivory'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((37, 37), 2, 2, color='azure'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((39, 39), 2, 2, color='lavender'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((41, 41), 2, 2, color='salmon'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((43, 43), 2, 2, color='tan'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((45, 45), 2, 2, color='olive'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((47, 47), 2, 2, color='navy'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((49, 49), 2, 2, color='maroon'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((51, 51), 2, 2, color='coral'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((53, 53), 2, 2, color='peru'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((55, 55), 2, 2, color='chocolate'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((57, 57), 2, 2, color='sienna'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((59, 59), 2, 2, color='saddlebrown'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((61, 61), 2, 2, color='tan'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((63, 63), 2, 2, color='burlywood'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((65, 65), 2, 2, color='wheat'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((67, 67), 2, 2, color='beige'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((69, 69), 2, 2, color='khaki'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((71, 71), 2, 2, color='tan'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((73, 73), 2, 2, color='tan'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((75, 75), 2, 2, color='tan'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((77, 77), 2, 2, color='tan'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((79, 79), 2, 2, color='tan'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((81, 81), 2, 2, color='tan'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((83, 83), 2, 2, color='tan'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((85, 85), 2, 2, color='tan'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((87, 87), 2, 2, color='tan'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((89, 89), 2, 2, color='tan'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((91, 91), 2, 2, color='tan'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((93, 93), 2, 2, color='tan'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((95, 95), 2, 2, color='tan'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((97, 97), 2, 2, color='tan'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((99, 99), 2, 2, color='tan'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((101, 101), 2, 2, color='tan'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((103, 103), 2, 2, color='tan'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((105, 105), 2, 2, color='tan'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((107, 107), 2, 2, color='tan'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((109, 109), 2, 2, color='tan'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((111, 111), 2, 2, color='tan'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((113, 113), 2, 2, color='tan'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((115, 115), 2, 2, color='tan'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((117, 117), 2, 2, color='tan'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((119, 119), 2, 2, color='tan'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((121, 121), 2, 2, color='tan'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((123, 123), 2, 2, color='tan'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((125, 125), 2, 2, color='tan'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((127, 127), 2, 2, color='tan'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((129, 129), 2, 2, color='tan'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((131, 131), 2, 2, color='tan'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((133, 133), 2, 2, color='tan'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((135, 135), 2, 2, color='tan'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((137, 137), 2, 2, color='tan'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((139, 139), 2, 2, color='tan'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((141, 141), 2, 2, color='tan'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((143, 143), 2, 2, color='tan'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((145, 145), 2, 2, color='tan'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((147, 147), 2, 2, color='tan'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((149, 149), 2, 2, color='tan'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((151, 151), 2, 2, color='tan'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((153, 153), 2, 2, color='tan'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((155, 155), 2, 2, color='tan'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((157, 157), 2, 2, color='tan'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((159, 159), 2, 2, color='tan'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((161, 161), 2, 2, color='tan'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((163, 163), 2, 2, color='tan'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((165, 165), 2, 2, color='tan'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((167, 167), 2, 2, color='tan'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((169, 169), 2, 2, color='tan'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((171, 171), 2, 2, color='tan'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((173, 173), 2, 2, color='tan'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((175, 175), 2, 2, color='tan'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((177, 177), 2, 2, color='tan'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((179, 179), 2, 2, color='tan'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((181, 181), 2, 2, color='tan'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((183, 183), 2, 2, color='tan'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((185, 185), 2, 2, color='tan'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((187, 187), 2, 2, color='tan'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((189, 189), 2, 2, color='tan'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((191, 191), 2, 2, color='tan'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((193, 193), 2, 2, color='tan'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((195, 195), 2, 2, color='tan'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((197, 197), 2, 2, color='tan'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((199, 199), 2, 2, color='tan'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((201, 201), 2, 2, color='tan'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((203, 203), 2, 2, color='tan'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((205, 205), 2, 2, color='tan'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((207, 207), 2, 2, color='tan'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((209, 209), 2, 2, color='tan'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((211, 211), 2, 2, color='tan'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((213, 213), 2, 2, color='tan'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((215, 215), 2, 2, color='tan'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((217, 217), 2, 2, color='tan'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((219, 219), 2, 2, color='tan'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((221, 221), 2, 2, color='tan'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((223, 223), 2, 2, color='tan'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((225, 225), 2, 2, color='tan'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((227, 227), 2, 2, color='tan'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((229, 229), 2, 2, color='tan'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((231, 231), 2, 2, color='tan'))\n\n# Add a rectangle with a specific color\nax.add_patch(plt.Rectangle((233, 233"}
{"file": "dataset/ori_500/heatmap_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 3.0))\n\n# Set the title of the plot\nax.set_title('C Subject')\n\n# Create a bar chart with the data\nax.bar(range(1, 29), [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2.0, 2.1, 2.2, 2.3, 2.4, 2.5, 2.6, 2.7, 2.8], color='green')\n\n# Set the x-axis label\nax.set_xlabel('Count')\n\n# Set the y-axis label\nax.set_ylabel('Value')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(12, 6))\n\n# Set the background color of the plot\nax.set_facecolor('purple')\n\n# Set the title of the plot\nax.set_title('Live Cricket Scores', color='white')\n\n# Set the x-axis label\nax.set_xlabel('Match Number', color='white')\n\n# Set the y-axis label\nax.set_ylabel('Score', color='white')\n\n# Set the tick labels for the x-axis\nax.set_xticks([0, 1, 2, 3])\nax.set_xticklabels(['0', '1', '2', '3'], color='white')\n\n# Set the tick labels for the y-axis\nax.set_yticks([0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200, 210, 220, 230, 240, 250, 260, 270, 280, 290, 300, 310, 320, 330, 340, 350, 360, 370, 380, 390, 400, 410, 420, 430, 440, 450, 460, 470, 480, 490, 500])\n\n# Set the tick labels for the y-axis\nax.set_yticklabels(['0', '10', '20', '30', '40', '50', '60', '70', '80', '90', '100', '110', '120', '130', '140', '150', '160', '170', '180', '190', '200', '210', '220', '230', '240', '250', '260', '270', '280', '290', '300', '310', '320', '330', '340', '350', '360', '370', '380', '390', '400', '410', '420', '430', '440', '450', '460', '470', '480', '490', '500'], color='white')\n\n# Set the grid lines\nax.grid(True)\n\n# Set the color of the grid lines\nax.grid(color='white')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the axis labels\nax.xaxis.label.set_color('white')\nax.yaxis.label.set_color('white')\n\n# Set the color of the title\nax.title.set_color('white')\n\n# Set the color of the background\nax.set_facecolor('purple')\n\n# Set the color of the plot area\nax.patch.set_facecolor('purple')\n\n# Set the color of the border\nax.spines['bottom'].set_color('white')\nax.spines['top'].set_color('white')\nax.spines['right'].set_color('white')\nax.spines['left'].set_color('white')\n\n# Set the color of the ticks\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the grid lines\nax.grid(color='white')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the axis labels\nax.xaxis.label.set_color('white')\nax.yaxis.label.set_color('white')\n\n# Set the color of the title\nax.title.set_color('white')\n\n# Set the color of the background\nax.set_facecolor('purple')\n\n# Set the color of the plot area\nax.patch.set_facecolor('purple')\n\n# Set the color of the border\nax.spines['bottom'].set_color('white')\nax.spines['top'].set_color('white')\nax.spines['right'].set_color('white')\nax.spines['left'].set_color('white')\n\n# Set the color of the ticks\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the grid lines\nax.grid(color='white')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the axis labels\nax.xaxis.label.set_color('white')\nax.yaxis.label.set_color('white')\n\n# Set the color of the title\nax.title.set_color('white')\n\n# Set the color of the background\nax.set_facecolor('purple')\n\n# Set the color of the plot area\nax.patch.set_facecolor('purple')\n\n# Set the color of the border\nax.spines['bottom'].set_color('white')\nax.spines['top'].set_color('white')\nax.spines['right'].set_color('white')\nax.spines['left'].set_color('white')\n\n# Set the color of the ticks\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the grid lines\nax.grid(color='white')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the axis labels\nax.xaxis.label.set_color('white')\nax.yaxis.label.set_color('white')\n\n# Set the color of the title\nax.title.set_color('white')\n\n# Set the color of the background\nax.set_facecolor('purple')\n\n# Set the color of the plot area\nax.patch.set_facecolor('purple')\n\n# Set the color of the border\nax.spines['bottom'].set_color('white')\nax.spines['top'].set_color('white')\nax.spines['right'].set_color('white')\nax.spines['left'].set_color('white')\n\n# Set the color of the ticks\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the grid lines\nax.grid(color='white')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the axis labels\nax.xaxis.label.set_color('white')\nax.yaxis.label.set_color('white')\n\n# Set the color of the title\nax.title.set_color('white')\n\n# Set the color of the background\nax.set_facecolor('purple')\n\n# Set the color of the plot area\nax.patch.set_facecolor('purple')\n\n# Set the color of the border\nax.spines['bottom'].set_color('white')\nax.spines['top'].set_color('white')\nax.spines['right'].set_color('white')\nax.spines['left'].set_color('white')\n\n# Set the color of the ticks\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the grid lines\nax.grid(color='white')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the axis labels\nax.xaxis.label.set_color('white')\nax.yaxis.label.set_color('white')\n\n# Set the color of the title\nax.title.set_color('white')\n\n# Set the color of the background\nax.set_facecolor('purple')\n\n# Set the color of the plot area\nax.patch.set_facecolor('purple')\n\n# Set the color of the border\nax.spines['bottom'].set_color('white')\nax.spines['top'].set_color('white')\nax.spines['right'].set_color('white')\nax.spines['left'].set_color('white')\n\n# Set the color of the ticks\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the grid lines\nax.grid(color='white')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the axis labels\nax.xaxis.label.set_color('white')\nax.yaxis.label.set_color('white')\n\n# Set the color of the title\nax.title.set_color('white')\n\n# Set the color of the background\nax.set_facecolor('purple')\n\n# Set the color of the plot area\nax.patch.set_facecolor('purple')\n\n# Set the color of the border\nax.spines['bottom'].set_color('white')\nax.spines['top'].set_color('white')\nax.spines['right'].set_color('white')\nax.spines['left'].set_color('white')\n\n# Set the color of the ticks\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the grid lines\nax.grid(color='white')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the axis labels\nax.xaxis.label.set_color('white')\nax.yaxis.label.set_color('white')\n\n# Set the color of the title\nax.title.set_color('white')\n\n# Set the color of the background\nax.set_facecolor('purple')\n\n# Set the color of the plot area\nax.patch.set_facecolor('purple')\n\n# Set the color of the border\nax.spines['bottom'].set_color('white')\nax.spines['top'].set_color('white')\nax.spines['right'].set_color('white')\nax.spines['left'].set_color('white')\n\n# Set the color of the ticks\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the grid lines\nax.grid(color='white')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the axis labels\nax.xaxis.label.set_color('white')\nax.yaxis.label.set_color('white')\n\n# Set the color of the title\nax.title.set_color('white')\n\n# Set the color of the background\nax.set_facecolor('purple')\n\n# Set the color of the plot area\nax.patch.set_facecolor('purple')\n\n# Set the color of the border\nax.spines['bottom'].set_color('white')\nax.spines['top'].set_color('white')\nax.spines['right'].set_color('white')\nax.spines['left'].set_color('white')\n\n# Set the color of the ticks\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the grid lines\nax.grid(color='white')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the axis labels\nax.xaxis.label.set_color('white')\nax.yaxis.label.set_color('white')\n\n# Set the color of the title\nax.title.set_color('white')\n\n# Set the color of the background\nax.set_facecolor('purple')\n\n# Set the color of the plot area\nax.patch.set_facecolor('purple')\n\n# Set the color of the border\nax.spines['bottom'].set_color('white')\nax.spines['top'].set_color('white')\nax.spines['right'].set_color('white')\nax.spines['left'].set_color('white')\n\n# Set the color of the ticks\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the grid lines\nax.grid(color='white')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the axis labels\nax.xaxis.label.set_color('white')\nax.yaxis.label.set_color('white')\n\n# Set the color of the title\nax.title.set_color('white')\n\n# Set the color of the background\nax.set_facecolor('purple')\n\n# Set the color of the plot area\nax.patch.set_facecolor('purple')\n\n# Set the color of the border\nax.spines['bottom'].set_color('white')\nax.spines['top'].set_color('white')\nax.spines['right'].set_color('white')\nax.spines['left'].set_color('white')\n\n# Set the color of the ticks\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the grid lines\nax.grid(color='white')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the axis labels\nax.xaxis.label.set_color('white')\nax.yaxis.label.set_color('white')\n\n# Set the color of the title\nax.title.set_color('white')\n\n# Set the color of the background\nax.set_facecolor('purple')\n\n# Set the color of the plot area\nax.patch.set_facecolor('purple')\n\n# Set the color of the border\nax.spines['bottom'].set_color('white')\nax.spines['top'].set_color('white')\nax.spines['right'].set_color('white')\nax.spines['left'].set_color('white')\n\n# Set the color of the ticks\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the grid lines\nax.grid(color='white')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the axis labels\nax.xaxis.label.set_color('white')\nax.yaxis.label.set_color('white')\n\n# Set the color of the title\nax.title.set_color('white')\n\n# Set the color of the background\nax.set_facecolor('purple')\n\n# Set the color of the plot area\nax.patch.set_facecolor('purple')\n\n# Set the color of the border\nax.spines['bottom'].set_color('white')\nax.spines['top'].set_color('white')\nax.spines['right'].set_color('white')\nax.spines['left'].set_color('white')\n\n# Set the color of the ticks\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the grid lines\nax.grid(color='white')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the axis labels\nax.xaxis.label.set_color('white')\nax.yaxis.label.set_color('white')\n\n# Set the color of the title\nax.title.set_color('white')\n\n# Set the color of the background\nax.set_facecolor('purple')\n\n# Set the color of the plot area\nax.patch.set_facecolor('purple')\n\n# Set the color of the border\nax.spines['bottom'].set_color('white')\nax.spines['top'].set_color('white')\nax.spines['right'].set_color('white')\nax.spines['left'].set_color('white')\n\n# Set the color of the ticks\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the grid lines\nax.grid(color='white')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the axis labels\nax.xaxis.label.set_color('white')\nax.yaxis.label.set_color('white')\n\n# Set the color of the title\nax.title.set_color('white')\n\n# Set the color of the background\nax.set_facecolor('purple')\n\n# Set the color of the plot area\nax.patch.set_facecolor('purple')\n\n# Set the color of the border\nax.spines['bottom'].set_color('white')\nax.spines['top'].set_color('white')\nax.spines['right'].set_color('white')\nax.spines['left'].set_color('white')\n\n# Set the color of the ticks\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the grid lines\nax.grid(color='white')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the axis labels\nax.xaxis.label.set_color('white')\nax.yaxis.label.set_color('white')\n\n# Set the color of the title\nax.title.set_color('white')\n\n# Set the color of the background\nax.set_facecolor('purple')\n\n# Set the color of the plot area\nax.patch.set_facecolor('purple')\n\n# Set the color of the border\nax.spines['bottom'].set_color('white')\nax.spines['top'].set_color('white')\nax.spines['right'].set_color('white')\nax.spines['left'].set_color('white')\n\n# Set the color of the ticks\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the grid lines\nax.grid(color='white')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the axis labels\nax.xaxis.label.set_color('white')\nax.yaxis.label.set_color('white')\n\n# Set the color of the title\nax.title.set_color('white')\n\n# Set the color of the background\nax.set_facecolor('purple')\n\n# Set the color of the plot area\nax.patch.set_facecolor('purple')\n\n# Set the color of the border\nax.spines['bottom'].set_color('white')\nax.spines['top'].set_color('white')\nax.spines['right'].set_color('white')\nax.spines['left'].set_color('white')\n\n# Set the color of the ticks\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the grid lines\nax.grid(color='white')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the axis labels\nax.xaxis.label.set_color('white')\nax.yaxis.label.set_color('white')\n\n# Set the color of the title\nax.title.set_color('white')\n\n# Set the color of the background\nax.set_facecolor('purple')\n\n# Set the color of the plot area\nax.patch.set_facecolor('purple')\n\n# Set the color of the border\nax.spines['bottom'].set_color('white')\nax.spines['top'].set_color('white')\nax.spines['right'].set_color('white')\nax.spines['left'].set_color('white')\n\n# Set the color of the ticks\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the grid lines\nax.grid(color='white')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the axis labels\nax.xaxis.label.set_color('white')\nax.yaxis.label.set_color('white')\n\n# Set the color of the title\nax.title.set_color('white')\n\n# Set the color of the background\nax.set_facecolor('purple')\n\n# Set the color of the plot area\nax.patch.set_facecolor('purple')\n\n# Set the color of the border\nax.spines['bottom'].set_color('white')\nax.spines['top'].set_color('white')\nax.spines['right'].set_color('white')\nax.spines['left'].set_color('white')\n\n# Set the color of the ticks\nax.tick_params(axis='both', colors='white')\n\n# Set the color of the grid lines\nax.grid"}
{"file": "dataset/ori_500/heatmap_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the bar chart\nx = ['Kokkos', 'Raja', 'Omp', 'OACC', 'SyCL', 'Native Port']\ny = [482, 120, 843, 1170, 925, 911]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Plot the bar chart\nax.bar(x, y, color='pink')\n\n# Set the title of the chart\nax.set_title('BabelStream triad Average Memory Bandwidth (GB/s)')\n\n# Set the x-axis label\nax.set_xlabel('Programming Model')\n\n# Set the y-axis label\nax.set_ylabel('Memory Bandwidth (GB/s)')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Create a color map for the heatmap\ncmap = plt.get_cmap('hot')\n\n# Create a heatmap with the correlation coefficients\nheatmap = ax.imshow([[0.95, 0.92, 0.90, 0.88, 0.86, 0.84, 0.82, 0.80, 0.78, 0.76, 0.74, 0.72, 0.70, 0.68, 0.66, 0.64, 0.62, 0.60, 0.58, 0.56, 0.54, 0.52, 0.50, 0.48, 0.46, 0.44, 0.42, 0.40, 0.38, 0.36, 0.34, 0.32, 0.30, 0.28, 0.26, 0.24, 0.22, 0.20, 0.18, 0.16, 0.14, 0.12, 0.10, 0.08, 0.06, 0.04, 0.02, 0.00], [0.95, 0.92, 0.90, 0.88, 0.86, 0.84, 0.82, 0.80, 0.78, 0.76, 0.74, 0.72, 0.70, 0.68, 0.66, 0.64, 0.62, 0.60, 0.58, 0.56, 0.54, 0.52, 0.50, 0.48, 0.46, 0.44, 0.42, 0.40, 0.38, 0.36, 0.34, 0.32, 0.30, 0.28, 0.26, 0.24, 0.22, 0.20, 0.18, 0.16, 0.14, 0.12, 0.10, 0.08, 0.06, 0.04, 0.02, 0.00]], cmap=cmap)\n\n# Add a color bar to the plot\nfig.colorbar(heatmap)\n\n# Set the title of the plot\nax.set_title('Correlation Coefficients')\n\n# Set the labels for the x-axis and y-axis\nax.set_xlabel('X-axis')\nax.set_ylabel('Y-axis')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the bar chart\ncategories = ['LexRank', 'ROUGE', 'BERTScore', 'SimCSE', 'PMI', 'GPT-3.5', 'CrossAttN', 'PPL']\nvalues = [0.19, 0.19, 0.62, 0.53, 0.50, 0.39, 0.20, 0.06]\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\nax.bar(categories, values, color='skyblue')\n\n# Set the title and labels\nax.set_title('Bar Chart')\nax.set_xlabel('Categories')\nax.set_ylabel('Values')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/heatmap_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\nfig, ax = plt.subplots(figsize=(5.0, 6.0))\n\n# Create a grid of rectangles\nfor i in range(15):\n    for j in range(15):\n        if (i + j) % 2 == 0:\n            color = 'blue'\n        else:\n            color = 'purple'\n        ax.add_patch(plt.Rectangle((i, j), 1, 1, color=color))\n\n# Set the limits of the plot\nax.set_xlim(0, 15)\nax.set_ylim(0, 15)\n\n# Set the labels of the axes\nax.set_xlabel('Layers')\nax.set_ylabel('Endo')\n\n# Set the title of the plot\nax.set_title('pythia-1b')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 7.0))\n\n# Set the x-axis limits\nax.set_xlim(0, 1)\n\n# Set the y-axis limits\nax.set_ylim(0, 100)\n\n# Set the x-axis ticks\nax.set_xticks([0, 0.2, 0.4, 0.6, 0.8, 1])\n\n# Set the y-axis ticks\nax.set_yticks([0, 20, 40, 60, 80, 100])\n\n# Set the x-axis labels\nax.set_xticklabels(['0.0', '0.2', '0.4', '0.6', '0.8', '1.0'])\n\n# Set the y-axis labels\nax.set_yticklabels(['0', '20', '40', '60', '80', '100'])\n\n# Set the title of the plot\nax.set_title('Test Winning Distance')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('green')\n\n# Set the color of the top and right spines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('green')\n\n# Set the color of the top and right spines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('green')\n\n# Set the color of the top and right spines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('green')\n\n# Set the color of the top and right spines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('green')\n\n# Set the color of the top and right spines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('green')\n\n# Set the color of the top and right spines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('green')\n\n# Set the color of the top and right spines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('green')\n\n# Set the color of the top and right spines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('green')\n\n# Set the color of the top and right spines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('green')\n\n# Set the color of the top and right spines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('green')\n\n# Set the color of the top and right spines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('green')\n\n# Set the color of the top and right spines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('green')\n\n# Set the color of the top and right spines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('green')\n\n# Set the color of the top and right spines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('green')\n\n# Set the color of the top and right spines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('green')\n\n# Set the color of the top and right spines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('green')\n\n# Set the color of the top and right spines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('green')\n\n# Set the color of the top and right spines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('green')\n\n# Set the color of the top and right spines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('green')\n\n# Set the color of the top and right spines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('green')\n\n# Set the color of the top and right spines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('green')\n\n# Set the color of the top and right spines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('green')\n\n# Set the color of the top and right spines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('green')\n\n# Set the color of the top and right spines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('green')\n\n# Set the color of the top and right spines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('green')\n\n# Set the color of the top and right spines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('green')\n\n# Set the color of the top and right spines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('green')\n\n# Set the color of the top and right spines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('green')\n\n# Set the color of the top and right spines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('green')\n\n# Set the color of the top and right spines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('green')\n\n# Set the color of the top and right spines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('green')\n\n# Set the color of the top and right spines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('green')\n\n# Set the color of the top and right spines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='red')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('green')\n\n# Set the color of the top and right spines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set"}
{"file": "dataset/ori_500/hist_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 3))\n\n# Define the data\ncosine_similarity = np.linspace(-0.2, 0.8, 100)\ninter_class = np.random.normal(0.5, 0.1, 100)\nintra_class = np.random.normal(0.3, 0.1, 100)\n\n# Plot the histogram\nax.hist([inter_class, intra_class], bins=20, color=['blue', 'green'], alpha=0.7)\n\n# Set the title and labels\nax.set_title('Cosine Similarity Distribution')\nax.set_xlabel('Cosine Similarity')\nax.set_ylabel('Frequency')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Set the title of the plot\nax.set_title('Baseline')\n\n# Create a bar chart with the data\nax.bar([0.5, 1.0, 1.5, 2.0, 2.5], [0.6, 0.7, 0.8, 0.9, 1.0], color='orange')\nax.bar([0.5, 1.0, 1.5, 2.0, 2.5], [0.4, 0.5, 0.6, 0.7, 0.8], color='blue')\n\n# Set the x-axis label\nax.set_xlabel('Euclidean Distance')\n\n# Set the y-axis label\nax.set_ylabel('Density')\n\n# Create a second subplot\nax2 = fig.add_subplot(2, 2, 2)\nax2.set_title('MIRL w/ V-I positive')\nax2.bar([0.5, 1.0, 1.5, 2.0, 2.5], [1.2, 1.3, 1.4, 1.5, 1.6], color='orange')\nax2.bar([0.5, 1.0, 1.5, 2.0, 2.5], [0.8, 0.9, 1.0, 1.1, 1.2], color='blue')\n\n# Create a third subplot\nax3 = fig.add_subplot(2, 2, 3)\nax3.set_title('MIRL w/ V-I negative')\nax3.bar([0.5, 1.0, 1.5, 2.0, 2.5], [1.2, 1.3, 1.4, 1.5, 1.6], color='orange')\nax3.bar([0.5, 1.0, 1.5, 2.0, 2.5], [0.8, 0.9, 1.0, 1.1, 1.2], color='blue')\n\n# Create a fourth subplot\nax4 = fig.add_subplot(2, 2, 4)\nax4.set_title('MIRL + OCLR w/ V-I positive')\nax4.bar([0.5, 1.0, 1.5, 2.0, 2.5], [1.2, 1.3, 1.4, 1.5, 1.6], color='orange')\nax4.bar([0.5, 1.0, 1.5, 2.0, 2.5], [0.8, 0.9, 1.0, 1.1, 1.2], color='blue')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(7.0, 8.0))\n\n# Set the title of the plot\nax.set_title('MATHWELL')\n\n# Create a histogram\nax.hist(np.random.normal(5, 1, 1000), bins=20, color='blue')\n\n# Set the x-axis label\nax.set_xlabel('FKGL')\n\n# Set the y-axis label\nax.set_ylabel('Density')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(5.0, 5.0))\n\n# Set the title of the plot\nax.set_title('Desert Animals in the Wild')\n\n# Set the x-axis label\nax.set_xlabel('Animal Weight (Tons)')\n\n# Set the y-axis label\nax.set_ylabel('Frequency')\n\n# Define the data for the plot\nx = [0.02, 0.04, 0.06, 0.08]\ny = [1000, 1000, 1000, 1000]\n\n# Define the colors for the bars\ncolors = ['orange', 'orange', 'blue', 'blue']\n\n# Define the width of the bars\nwidth = 0.35\n\n# Create the bar chart\nrects = ax.bar(x, y, width, color=colors)\n\n# Add some text for labels, title, and custom x-axis tick labels, etc.\nax.set_xticks(x)\nax.set_xticklabels(['Camels', 'Kangaroos'])\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Set the title of the plot\nax.set_title('Comparison of Uniform and Normal Distributions')\n\n# Set the x-axis label\nax.set_xlabel('Frequency')\n\n# Set the y-axis label\nax.set_ylabel('Value')\n\n# Define the data for the plot\nx = [0, 2, 4, 6, 8]\ny = [10, 30, 50, 70, 90]\n\n# Plot the data\nax.plot(x, y, 'bo-')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Histogram of Wind Speed Measurements')\n\n# Set the x-axis label\nax.set_xlabel('Wind Speed (km/h)')\n\n# Set the y-axis label\nax.set_ylabel('Number of Measurements')\n\n# Set the x-axis limits\nax.set_xlim(-2, 6)\n\n# Set the y-axis limits\nax.set_ylim(0, 1200)\n\n# Set the grid\nax.grid(True)\n\n# Set the color of the grid lines\nax.grid(color='blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the tick marks\nax.spines['bottom'].set_color('blue')\nax.spines['left'].set_color('blue')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='blue')\n\n# Set the color of the"}
{"file": "dataset/ori_500/hist_16.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nx = [0.0, 0.5, 1.0, 1.5, 2.0, 2.5, 3.0]\ny = [100, 110, 120, 130, 140, 150, 160]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(5.0, 4.0))\n\n# Plot the data\nax.plot(x, y, color='blue')\n\n# Set the title and labels\nax.set_title('Baking Accuracy Analysis')\nax.set_xlabel('Distance to Threshold')\nax.set_ylabel('Frequency')\n\n# Set the limits of the x-axis\nax.set_xlim(0, 3)\n\n# Set the limits of the y-axis\nax.set_ylim(0, 170)\n\n# Set the grid\nax.grid(True)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_17.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(16.0, 7.0))\n\n# Set the x-axis limits\nax.set_xlim(0, 1)\n\n# Set the y-axis limits\nax.set_ylim(0, 140)\n\n# Set the x-axis ticks\nax.set_xticks([0, 0.2, 0.4, 0.6, 0.8, 1])\n\n# Set the y-axis ticks\nax.set_yticks([0, 20, 40, 60, 80, 100, 120, 140])\n\n# Set the x-axis labels\nax.set_xticklabels(['0.0', '0.2', '0.4', '0.6', '0.8', '1.0'])\n\n# Set the y-axis labels\nax.set_yticklabels(['0', '20', '40', '60', '80', '100', '120', '140'])\n\n# Set the title of the plot\nax.set_title('Test Winning Distance')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('red')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='green')\n\n# Set the color of the tick lines\nax.tick_params(axis='both', colors='purple')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('orange')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('cyan')\n\n# Set the color of the title\nax.title.set_color('magenta')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['0.0', '0.2', '0.4', '0.6', '0.8', '1.0'], color='brown')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0', '20', '40', '60', '80', '100', '120', '140'], color='navy')\n\n# Set the color of the x-axis tick lines\nax.tick_params(axis='x', colors='olive')\n\n# Set the color of the y-axis tick lines\nax.tick_params(axis='y', colors='lime')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('maroon')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('silver')\n\n# Set the color of the title\nax.title.set_color('teal')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['0.0', '0.2', '0.4', '0.6', '0.8', '1.0'], color='indigo')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0', '20', '40', '60', '80', '100', '120', '140'], color='gold')\n\n# Set the color of the x-axis tick lines\nax.tick_params(axis='x', colors='violet')\n\n# Set the color of the y-axis tick lines\nax.tick_params(axis='y', colors='pink')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('cyan')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('magenta')\n\n# Set the color of the title\nax.title.set_color('blue')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['0.0', '0.2', '0.4', '0.6', '0.8', '1.0'], color='yellow')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0', '20', '40', '60', '80', '100', '120', '140'], color='green')\n\n# Set the color of the x-axis tick lines\nax.tick_params(axis='x', colors='red')\n\n# Set the color of the y-axis tick lines\nax.tick_params(axis='y', colors='purple')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('orange')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('cyan')\n\n# Set the color of the title\nax.title.set_color('magenta')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['0.0', '0.2', '0.4', '0.6', '0.8', '1.0'], color='brown')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0', '20', '40', '60', '80', '100', '120', '140'], color='navy')\n\n# Set the color of the x-axis tick lines\nax.tick_params(axis='x', colors='olive')\n\n# Set the color of the y-axis tick lines\nax.tick_params(axis='y', colors='lime')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('maroon')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('silver')\n\n# Set the color of the title\nax.title.set_color('teal')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['0.0', '0.2', '0.4', '0.6', '0.8', '1.0'], color='indigo')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0', '20', '40', '60', '80', '100', '120', '140'], color='gold')\n\n# Set the color of the x-axis tick lines\nax.tick_params(axis='x', colors='violet')\n\n# Set the color of the y-axis tick lines\nax.tick_params(axis='y', colors='pink')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('cyan')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('magenta')\n\n# Set the color of the title\nax.title.set_color('blue')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['0.0', '0.2', '0.4', '0.6', '0.8', '1.0'], color='yellow')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0', '20', '40', '60', '80', '100', '120', '140'], color='green')\n\n# Set the color of the x-axis tick lines\nax.tick_params(axis='x', colors='red')\n\n# Set the color of the y-axis tick lines\nax.tick_params(axis='y', colors='purple')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('orange')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('cyan')\n\n# Set the color of the title\nax.title.set_color('magenta')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['0.0', '0.2', '0.4', '0.6', '0.8', '1.0'], color='brown')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0', '20', '40', '60', '80', '100', '120', '140'], color='navy')\n\n# Set the color of the x-axis tick lines\nax.tick_params(axis='x', colors='olive')\n\n# Set the color of the y-axis tick lines\nax.tick_params(axis='y', colors='lime')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('maroon')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('silver')\n\n# Set the color of the title\nax.title.set_color('teal')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['0.0', '0.2', '0.4', '0.6', '0.8', '1.0'], color='indigo')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0', '20', '40', '60', '80', '100', '120', '140'], color='gold')\n\n# Set the color of the x-axis tick lines\nax.tick_params(axis='x', colors='violet')\n\n# Set the color of the y-axis tick lines\nax.tick_params(axis='y', colors='pink')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('cyan')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('magenta')\n\n# Set the color of the title\nax.title.set_color('blue')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['0.0', '0.2', '0.4', '0.6', '0.8', '1.0'], color='yellow')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0', '20', '40', '60', '80', '100', '120', '140'], color='green')\n\n# Set the color of the x-axis tick lines\nax.tick_params(axis='x', colors='red')\n\n# Set the color of the y-axis tick lines\nax.tick_params(axis='y', colors='purple')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('orange')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('cyan')\n\n# Set the color of the title\nax.title.set_color('magenta')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['0.0', '0.2', '0.4', '0.6', '0.8', '1.0'], color='brown')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0', '20', '40', '60', '80', '100', '120', '140'], color='navy')\n\n# Set the color of the x-axis tick lines\nax.tick_params(axis='x', colors='olive')\n\n# Set the color of the y-axis tick lines\nax.tick_params(axis='y', colors='lime')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('maroon')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('silver')\n\n# Set the color of the title\nax.title.set_color('teal')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['0.0', '0.2', '0.4', '0.6', '0.8', '1.0'], color='indigo')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0', '20', '40', '60', '80', '100', '120', '140'], color='gold')\n\n# Set the color of the x-axis tick lines\nax.tick_params(axis='x', colors='violet')\n\n# Set the color of the y-axis tick lines\nax.tick_params(axis='y', colors='pink')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('cyan')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('magenta')\n\n# Set the color of the title\nax.title.set_color('blue')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['0.0', '0.2', '0.4', '0.6', '0.8', '1.0'], color='yellow')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0', '20', '40', '60', '80', '100', '120', '140'], color='green')\n\n# Set the color of the x-axis tick lines\nax.tick_params(axis='x', colors='red')\n\n# Set the color of the y-axis tick lines\nax.tick_params(axis='y', colors='purple')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('orange')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('cyan')\n\n# Set the color of the title\nax.title.set_color('magenta')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['0.0', '0.2', '0.4', '0.6', '0.8', '1.0'], color='brown')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0', '20', '40', '60', '80', '100', '120', '140'], color='navy')\n\n# Set the color of the x-axis tick lines\nax.tick_params(axis='x', colors='olive')\n\n# Set the color of the y-axis tick lines\nax.tick_params(axis='y', colors='lime')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('maroon')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('silver')\n\n# Set the color of the title\nax.title.set_color('teal')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['0.0', '0.2', '0.4', '0.6', '0.8', '1.0'], color='indigo')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0', '20', '40', '60', '80', '100', '120', '140'], color='gold')\n\n# Set the color of the x-axis tick lines\nax.tick_params(axis='x', colors='violet')\n\n# Set the color of the y-axis tick lines\nax.tick_params(axis='y', colors='pink')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('cyan')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('magenta')\n\n# Set the color of the title\nax.title.set_color('blue')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['0.0', '0.2', '0.4', '0.6', '0.8', '1.0'], color='yellow')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0', '20', '40', '60', '80', '100', '120', '140'], color='green')\n\n# Set the color of the x-axis tick lines\nax.tick_params(axis='x', colors='red')\n\n# Set the color of the y-axis tick lines\nax.tick_params(axis='y', colors='purple')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('orange')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('cyan')\n\n# Set the color of the title\nax.title.set_color('magenta')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['0.0', '0.2', '0.4', '0.6', '0.8', '1.0'], color='brown')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0', '20', '40', '60', '80', '100', '120', '140'], color='navy')\n\n# Set the color of the x-axis tick lines\nax.tick_params(axis='x', colors='olive')\n\n# Set the color of the y-axis tick lines\nax.tick_params(axis='y', colors='lime')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('maroon')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('silver')\n\n# Set the color of the title\nax.title.set_color('teal')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['0.0', '0.2', '0.4', '0.6', '0.8', '1.0'], color='indigo')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0', '20', '40', '60', '80', '100', '120', '140'], color='gold')\n\n# Set the color of the x-axis tick lines\nax.tick_params(axis='x', colors='violet')\n\n# Set the color of the y-axis tick lines\nax.tick_params(axis='y', colors='pink')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('cyan')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('magenta')\n\n# Set the color of the title\nax.title.set_color('blue')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['0.0', '0.2', '0.4', '0.6', '0.8', '1.0'], color='yellow')\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['0', '20', '40', '60', '80', '100', '120', '140'], color='green')\n\n# Set the color of the x-axis tick lines\nax.tick_params(axis='x', colors='red')\n\n# Set the color of the y-axis tick lines\nax.tick_params(axis='y', colors='purple')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('orange')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('cyan')\n\n# Set the color of the title\nax.title.set_color('magenta')\n\n# Set the color of the x-axis"}
{"file": "dataset/ori_500/hist_18.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(12.0, 8.0))\n\n# Set the x-axis limits\nax.set_xlim(0, 300)\n\n# Set the y-axis limits\nax.set_ylim(0, 25)\n\n# Set the x-axis label\nax.set_xlabel('Number of Nominations')\n\n# Set the y-axis label\nax.set_ylabel('Year')\n\n# Set the title\nax.set_title('Histogram of Grammy Nominations Across Expanded Categories 2019-2023')\n\n# Define the categories and their colors\ncategories = ['Record of the Year', 'Album of the Year', 'Song of the Year', 'Best New Artist', 'Best Pop Solo Performance']\ncolors = ['pink', 'orange', 'tan', 'pink', 'yellow']\n\n# Define the number of nominations for each category\nnominations = [10, 15, 12, 18, 20]\n\n# Define the years for each category\nyears = [2019, 2020, 2021, 2022, 2023]\n\n# Plot the histogram\nfor i in range(len(categories)):\n    ax.barh(years[i], nominations[i], color=colors[i])\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_19.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 7.0))\n\n# Set the title of the plot\nax.set_title('MNIST - Defect Detection')\n\n# Create a colorbar\ncbar = fig.colorbar(ax=ax)\n\n# Set the x-axis label\nax.set_xlabel('X-axis Label')\n\n# Set the y-axis label\nax.set_ylabel('Y-axis Label')\n\n# Set the x-axis limits\nax.set_xlim(0, 0.3)\n\n# Set the y-axis limits\nax.set_ylim(0, 400)\n\n# Set the x-axis ticks\nax.set_xticks([0, 0.05, 0.1, 0.15, 0.2, 0.25, 0.3])\n\n# Set the y-axis ticks\nax.set_yticks([0, 100, 200, 300, 400])\n\n# Set the colorbar tick labels\ncbar.ax.set_yticklabels(['Non-defective', 'Defective'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nx = [0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0]\ny1 = [20, 30, 40, 50, 60, 70, 80]\ny2 = [10, 20, 30, 40, 50, 60, 70]\ny3 = [15, 25, 35, 45, 55, 65, 75]\ny4 = [12, 22, 32, 42, 52, 62, 72]\ny5 = [18, 28, 38, 48, 58, 68, 78]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(9.0, 6.0))\n\n# Plot the data\nax.plot(x, y1, label='SAM-dependent methyltransferase')\nax.plot(x, y2, label='Thioredoxin-like')\nax.plot(x, y3, label='Tetratricopeptide-like helical domain')\nax.plot(x, y4, label='CheY-like')\n\n# Set the title and labels\nax.set_title('Gene Expression Over Time')\nax.set_xlabel('Time (minutes)')\nax.set_ylabel('Gene Expression (TM-score)')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_20.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(10, 8))\n\n# Set the title of the plot\nax.set_title('a')\n\n# Create a bar chart with the data\nax.bar([1, 2, 3, 4, 5], [0.5, 0.6, 0.7, 0.8, 0.9])\n\n# Set the x-axis label\nax.set_xlabel('Sweetness')\n\n# Set the y-axis label\nax.set_ylabel('Density')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nx = [0.00, 0.05, 0.10, 0.15]\ny = [1000, 1000, 1000, 1000]\n\n# Create a bar chart\nplt.bar(x, y, color='brown')\n\n# Add labels and title\nplt.xlabel('Concept Weight')\nplt.ylabel('Count')\nplt.title('CIFAR100 \\'Desert\\' Concept')\n\n# Add legend\nplt.legend(['Class', 'Camel', 'Kangaroo'])\n\n# Set the x-axis limits\nplt.xlim(0, 0.2)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(5.0, 3.0))\n\n# Define the data\nx = [-5.0, -2.5, 0.0, 2.5, 5.0, 7.5, 10.0]\ny = [100, 90, 80, 70, 60, 50, 40]\n\n# Plot the data\nax.plot(x, y, 'r-')\n\n# Set the title and labels\nax.set_title('Distance vs. Number of Examples')\nax.set_xlabel('Distance Difference (Random vs. Center)')\nax.set_ylabel('Number of Examples')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nrepetition = [0, 2.5, 5, 7.5, 10]\nclusters = [1200, 1100, 900, 600, 300]\n\n# Plot\nplt.figure(figsize=(4.0, 3.0))\nplt.barh(repetition, clusters, color='brown')\nplt.xlabel('Number of Clusters')\nplt.ylabel('Number of Repetition')\nplt.title('Clusters vs Repetition')\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ndistances = [0, 1, 2, 3, 4]\ncorrectly_classified = [400, 350, 300, 250, 200]\nmisclassified = [380, 330, 280, 230, 180]\n\n# Plot\nfig, ax = plt.subplots(figsize=(5.0, 3.0))\nax.barh(distances, correctly_classified, color='blue', label='Correctly classified')\nax.barh(distances, misclassified, left=correctly_classified, color='orange', label='Misclassified')\n\n# Labels and title\nax.set_xlabel('Distance to threshold')\nax.set_title('Classification accuracy by distance')\nax.legend()\n\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Set the title of the plot\nax.set_title('Cascade')\n\n# Set the x-axis label\nax.set_xlabel('Confidence in bin')\n\n# Set the y-axis label\nax.set_ylabel('Accuracy in bin')\n\n# Set the x-ticks\nax.set_xticks([0.0, 0.2, 0.4, 0.6, 0.8, 1.0])\n\n# Set the y-ticks\nax.set_yticks([0.0, 0.2, 0.4, 0.6, 0.8, 1.0])\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.3, 0.7), 0.4, 0.3, color='saddlebrown'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.5, 0.5), 0.4, 0.3, color='saddlebrown'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.7, 0.3), 0.4, 0.3, color='saddlebrown'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.9, 0.1), 0.4, 0.3, color='saddlebrown'))\n\n# Draw a line\nax.plot([0.3, 0.7], [0.7, 0.3], 'k-')\n\n# Draw a line\nax.plot([0.5, 0.9], [0.5, 0.1], 'k-')\n\n# Draw a line\nax.plot([0.7, 0.9], [0.3, 0.1], 'k-')\n\n# Draw a line\nax.plot([0.9, 0.9], [0.1, 0.1], 'k-')\n\n# Draw a line\nax.plot([0.9, 0.9], [0.1, 0.3], 'k-')\n\n# Draw a line\nax.plot([0.9, 0.9], [0.3, 0.3], 'k-')\n\n# Draw a line\nax.plot([0.9, 0.9], [0.3, 0.5], 'k-')\n\n# Draw a line\nax.plot([0.9, 0.9], [0.5, 0.5], 'k-')\n\n# Draw a line\nax.plot([0.9, 0.9], [0.5, 0.7], 'k-')\n\n# Draw a line\nax.plot([0.9, 0.9], [0.7, 0.7], 'k-')\n\n# Draw a line\nax.plot([0.9, 0.9], [0.7, 0.9], 'k-')\n\n# Draw a line\nax.plot([0.9, 0.9], [0.9, 0.9], 'k-')\n\n# Draw a line\nax.plot([0.9, 0.7], [0.9, 0.7], 'k-')\n\n# Draw a line\nax.plot([0.9, 0.5], [0.9, 0.5], 'k-')\n\n# Draw a line\nax.plot([0.9, 0.3], [0.9, 0.3], 'k-')\n\n# Draw a line\nax.plot([0.9, 0.1], [0.9, 0.1], 'k-')\n\n# Draw a line\nax.plot([0.7, 0.7], [0.9, 0.7], 'k-')\n\n# Draw a line\nax.plot([0.5, 0.5], [0.9, 0.5], 'k-')\n\n# Draw a line\nax.plot([0.3, 0.3], [0.9, 0.3], 'k-')\n\n# Draw a line\nax.plot([0.1, 0.1], [0.9, 0.1], 'k-')\n\n# Draw a line\nax.plot([0.1, 0.3], [0.9, 0.3], 'k-')\n\n# Draw a line\nax.plot([0.3, 0.3], [0.9, 0.5], 'k-')\n\n# Draw a line\nax.plot([0.5, 0.5], [0.9, 0.7], 'k-')\n\n# Draw a line\nax.plot([0.7, 0.7], [0.9, 0.9], 'k-')\n\n# Draw a line\nax.plot([0.9, 0.9], [0.9, 0.9], 'k-')\n\n# Draw a line\nax.plot([0.9, 0.7], [0.9, 0.7], 'k-')\n\n# Draw a line\nax.plot([0.9, 0.5], [0.9, 0.5], 'k-')\n\n# Draw a line\nax.plot([0.9, 0.3], [0.9, 0.3], 'k-')\n\n# Draw a line\nax.plot([0.9, 0.1], [0.9, 0.1], 'k-')\n\n# Draw a line\nax.plot([0.7, 0.7], [0.9, 0.7], 'k-')\n\n# Draw a line\nax.plot([0.5, 0.5], [0.9, 0.5], 'k-')\n\n# Draw a line\nax.plot([0.3, 0.3], [0.9, 0.3], 'k-')\n\n# Draw a line\nax.plot([0.1, 0.1], [0.9, 0.1], 'k-')\n\n# Draw a line\nax.plot([0.1, 0.3], [0.9, 0.3], 'k-')\n\n# Draw a line\nax.plot([0.3, 0.3], [0.9, 0.5], 'k-')\n\n# Draw a line\nax.plot([0.5, 0.5], [0.9, 0.7], 'k-')\n\n# Draw a line\nax.plot([0.7, 0.7], [0.9, 0.9], 'k-')\n\n# Draw a line\nax.plot([0.9, 0.9], [0.9, 0.9], 'k-')\n\n# Draw a line\nax.plot([0.9, 0.7], [0.9, 0.7], 'k-')\n\n# Draw a line\nax.plot([0.9, 0.5], [0.9, 0.5], 'k-')\n\n# Draw a line\nax.plot([0.9, 0.3], [0.9, 0.3], 'k-')\n\n# Draw a line\nax.plot([0.9, 0.1], [0.9, 0.1], 'k-')\n\n# Draw a line\nax.plot([0.7, 0.7], [0.9, 0.7], 'k-')\n\n# Draw a line\nax.plot([0.5, 0.5], [0.9, 0.5], 'k-')\n\n# Draw a line\nax.plot([0.3, 0.3], [0.9, 0.3], 'k-')\n\n# Draw a line\nax.plot([0.1, 0.1], [0.9, 0.1], 'k-')\n\n# Draw a line\nax.plot([0.1, 0.3], [0.9, 0.3], 'k-')\n\n# Draw a line\nax.plot([0.3, 0.3], [0.9, 0.5], 'k-')\n\n# Draw a line\nax.plot([0.5, 0.5], [0.9, 0.7], 'k-')\n\n# Draw a line\nax.plot([0.7, 0.7], [0.9, 0.9], 'k-')\n\n# Draw a line\nax.plot([0.9, 0.9], [0.9, 0.9], 'k-')\n\n# Draw a line\nax.plot([0.9, 0.7], [0.9, 0.7], 'k-')\n\n# Draw a line\nax.plot([0.9, 0.5], [0.9, 0.5], 'k-')\n\n# Draw a line\nax.plot([0.9, 0.3], [0.9, 0.3], 'k-')\n\n# Draw a line\nax.plot([0.9, 0.1], [0.9, 0.1], 'k-')\n\n# Draw a line\nax.plot([0.7, 0.7], [0.9, 0.7], 'k-')\n\n# Draw a line\nax.plot([0.5, 0.5], [0.9, 0.5], 'k-')\n\n# Draw a line\nax.plot([0.3, 0.3], [0.9, 0.3], 'k-')\n\n# Draw a line\nax.plot([0.1, 0.1], [0.9, 0.1], 'k-')\n\n# Draw a line\nax.plot([0.1, 0.3], [0.9, 0.3], 'k-')\n\n# Draw a line\nax.plot([0.3, 0.3], [0.9, 0.5], 'k-')\n\n# Draw a line\nax.plot([0.5, 0.5], [0.9, 0.7], 'k-')\n\n# Draw a line\nax.plot([0.7, 0.7], [0.9, 0.9], 'k-')\n\n# Draw a line\nax.plot([0.9, 0.9], [0.9, 0.9], 'k-')\n\n# Draw a line\nax.plot([0.9, 0.7], [0.9, 0.7], 'k-')\n\n# Draw a line\nax.plot([0.9, 0.5], [0.9, 0.5], 'k-')\n\n# Draw a line\nax.plot([0.9, 0.3], [0.9, 0.3], 'k-')\n\n# Draw a line\nax.plot([0.9, 0.1], [0.9, 0.1], 'k-')\n\n# Draw a line\nax.plot([0.7, 0.7], [0.9, 0.7], 'k-')\n\n# Draw a line\nax.plot([0.5, 0.5], [0.9, 0.5], 'k-')\n\n# Draw a line\nax.plot([0.3, 0.3], [0.9, 0.3], 'k-')\n\n# Draw a line\nax.plot([0.1, 0.1], [0.9, 0.1], 'k-')\n\n# Draw a line\nax.plot([0.1, 0.3], [0.9, 0.3], 'k-')\n\n# Draw a line\nax.plot([0.3, 0.3], [0.9, 0.5], 'k-')\n\n# Draw a line\nax.plot([0.5, 0.5], [0.9, 0.7], 'k-')\n\n# Draw a line\nax.plot([0.7, 0.7], [0.9, 0.9], 'k-')\n\n# Draw a line\nax.plot([0.9, 0.9], [0.9, 0.9], 'k-')\n\n# Draw a line\nax.plot([0.9, 0.7], [0.9, 0.7], 'k-')\n\n# Draw a line\nax.plot([0.9, 0.5], [0.9, 0.5], 'k-')\n\n# Draw a line\nax.plot([0.9, 0.3], [0.9, 0.3], 'k-')\n\n# Draw a line\nax.plot([0.9, 0.1], [0.9, 0.1], 'k-')\n\n# Draw a line\nax.plot([0.7, 0.7], [0.9, 0.7], 'k-')\n\n# Draw a line\nax.plot([0.5, 0.5], [0.9, 0.5], 'k-')\n\n# Draw a line\nax.plot([0.3, 0.3], [0.9, 0.3], 'k-')\n\n# Draw a line\nax.plot([0.1, 0.1], [0.9, 0.1], 'k-')\n\n# Draw a line\nax.plot([0.1, 0.3], [0.9, 0.3], 'k-')\n\n# Draw a line\nax.plot([0.3, 0.3], [0.9, 0.5], 'k-')\n\n# Draw a line\nax.plot([0.5, 0.5], [0.9, 0.7], 'k-')\n\n# Draw a line\nax.plot([0.7, 0.7], [0.9, 0.9], 'k-')\n\n# Draw a line\nax.plot([0.9, 0.9], [0.9, 0.9], 'k-')\n\n# Draw a line\nax.plot([0.9, 0.7], [0.9, 0.7], 'k-')\n\n# Draw a line\nax.plot([0.9, 0.5], [0.9, 0.5], 'k-')\n\n# Draw a line\nax.plot([0.9, 0.3], [0.9, 0.3], 'k-')\n\n# Draw a line\nax.plot([0.9, 0.1], [0.9, 0.1], 'k-')\n\n# Draw a line\nax.plot([0.7, 0.7], [0.9, 0.7], 'k-')\n\n# Draw a line\nax.plot([0.5, 0.5], [0.9, 0.5], 'k-')\n\n# Draw a line\nax.plot([0.3, 0.3], [0.9, 0.3], 'k-')\n\n# Draw a line\nax.plot([0.1, 0.1], [0.9, 0.1], 'k-')\n\n# Draw a line\nax.plot([0.1, 0.3], [0.9, 0.3], 'k-')\n\n# Draw a line\nax.plot([0.3, 0.3], [0.9, 0.5], 'k-')\n\n# Draw a line\nax.plot([0.5, 0.5], [0.9, 0.7], 'k-')\n\n# Draw a line\nax.plot([0.7, 0.7], [0.9, 0.9], 'k-')\n\n# Draw a line\nax.plot([0.9, 0.9], [0.9, 0.9], 'k-')\n\n# Draw a line\nax.plot([0.9, 0.7], [0.9, 0.7], 'k-')\n\n# Draw a line\nax.plot([0.9, 0.5], [0.9, 0.5], 'k-')\n\n# Draw a line\nax.plot([0.9, 0.3], [0.9, 0.3], 'k-')\n\n# Draw a line\nax.plot([0.9, 0.1], [0.9, 0.1], 'k-')\n\n# Draw a line\nax.plot([0.7, 0.7], [0.9, 0.7], 'k-')\n\n# Draw a line\nax.plot([0.5, 0.5], [0.9, 0.5], 'k-')\n\n# Draw a line\nax.plot([0.3, 0.3], [0.9, 0.3], 'k-')\n\n# Draw a line\nax.plot([0.1, 0.1], [0.9, 0.1], 'k-')\n\n# Draw a line\nax.plot([0.1, 0.3], [0.9, 0.3], 'k-')\n\n# Draw a line\nax.plot([0.3, 0.3], [0.9, 0.5], 'k-')\n\n# Draw a line\nax.plot([0.5, 0.5], [0.9, 0.7], 'k-')\n\n# Draw a line\nax.plot([0.7, 0.7], [0.9, 0.9], 'k-')\n\n# Draw a line\nax.plot([0.9, 0.9], [0.9, 0.9], 'k-')\n\n# Draw a line\nax.plot([0.9, 0.7], [0.9, 0.7], 'k-')\n\n# Draw a line\nax.plot([0.9, 0.5], [0.9, 0.5], 'k-')\n\n# Draw a line\nax.plot([0.9, 0.3], [0.9, 0.3], 'k-')\n\n# Draw a line\nax.plot([0.9, 0.1], [0.9, 0.1], 'k-')\n\n# Draw a line\nax.plot([0.7, 0.7], [0.9, 0.7], 'k-')\n\n# Draw a line\nax.plot([0.5, 0.5], [0.9, 0.5], 'k-')\n\n# Draw a line\nax"}
{"file": "dataset/ori_500/hist_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 5.0))\n\n# Set the title of the plot\nax.set_title('Number of Queries Overlap')\n\n# Set the x-axis label\nax.set_xlabel('% images overlap')\n\n# Set the y-axis label\nax.set_ylabel('Number of queries')\n\n# Set the x-axis limits\nax.set_xlim(0, 1)\n\n# Set the y-axis limits\nax.set_ylim(0, 6000)\n\n# Set the x-axis ticks\nax.set_xticks([0, 0.2, 0.4, 0.6, 0.8, 1])\n\n# Set the y-axis ticks\nax.set_yticks([0, 1000, 2000, 3000, 4000, 5000, 6000])\n\n# Set the x-axis tick labels\nax.set_xticklabels(['0.0', '0.2', '0.4', '0.6', '0.8', '1.0'])\n\n# Set the y-axis tick labels\nax.set_yticklabels(['0', '1000', '2000', '3000', '4000', '5000', '6000'])\n\n# Draw a rectangle with a blue color\nax.add_patch(plt.Rectangle((0.2, 0), 0.4, 1000, color='blue'))\n\n# Draw a rectangle with a blue color\nax.add_patch(plt.Rectangle((0.4, 0), 0.2, 2000, color='blue'))\n\n# Draw a rectangle with a blue color\nax.add_patch(plt.Rectangle((0.6, 0), 0.2, 3000, color='blue'))\n\n# Draw a rectangle with a blue color\nax.add_patch(plt.Rectangle((0.8, 0), 0.2, 4000, color='blue'))\n\n# Draw a rectangle with a blue color\nax.add_patch(plt.Rectangle((0.9, 0), 0.1, 5000, color='blue'))\n\n# Draw a rectangle with a blue color\nax.add_patch(plt.Rectangle((0.7, 0), 0.2, 6000, color='blue'))\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/hist_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 7))\n\n# Set the title of the plot\nax.set_title('MNIST')\n\n# Create a histogram with 10 bins\nax.hist(np.random.randn(1000), bins=10)\n\n# Set the x-axis label\nax.set_xlabel('Value')\n\n# Set the y-axis label\nax.set_ylabel('Frequency')\n\n# Set the x-axis limits\nax.set_xlim(0, 0.25)\n\n# Set the y-axis limits\nax.set_ylim(0, 500)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the x-axis limits\nax.set_xlim(5, 20)\n\n# Set the y-axis limits\nax.set_ylim(0, 100)\n\n# Set the x-axis ticks\nax.set_xticks([5, 10, 15, 20])\n\n# Set the y-axis ticks\nax.set_yticks([0, 20, 40, 60, 80, 100])\n\n# Set the x-axis label\nax.set_xlabel('SNR')\n\n# Set the y-axis label\nax.set_ylabel('Classification Accuracy (%)')\n\n# Plot the lines\nax.plot([5, 10, 15, 20], [90, 80, 70, 60], 'r-', label='DEEPJSCC w/o ofdm')\nax.plot([5, 10, 15, 20], [80, 70, 60, 50], 'g-', label='DEEPJSCC w/ ofdm')\nax.plot([5, 10, 15, 20], [70, 60, 50, 40], 'b-', label='JPEG+LDPC')\nax.plot([5, 10, 15, 20], [60, 50, 40, 30], 'y-', label='OURS')\n\n# Add markers at the points\nax.plot(5, 90, 'ro')\nax.plot(10, 80, 'ro')\nax.plot(15, 70, 'ro')\nax.plot(20, 60, 'ro')\n\nax.plot(5, 80, 'go')\nax.plot(10, 70, 'go')\nax.plot(15, 60, 'go')\nax.plot(20, 50, 'go')\n\nax.plot(5, 70, 'bo')\nax.plot(10, 60, 'bo')\nax.plot(15, 50, 'bo')\nax.plot(20, 40, 'bo')\n\nax.plot(5, 60, 'yo')\nax.plot(10, 50, 'yo')\nax.plot(15, 40, 'yo')\nax.plot(20, 30, 'yo')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the graph\nax.set_title('Performance Gain (%)')\n\n# Set the x-axis label\nax.set_xlabel('n')\n\n# Set the y-axis label\nax.set_ylabel('Performance Gain (%)')\n\n# Set the grid\nax.grid(True)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the tick labels\nax.set_xticks([0, 1, 2, 3, 4, 5, 6, 7, 8])\nax.set_yticks([0, 1, 2, 3, 4, 5, 6])\n\n# Set the tick labels\nax.set_xticklabels(['0', '0.125', '0.25', '0.5', '1', '2', '3', '4', '5'])\nax.set_yticklabels(['0', '1', '2', '3', '4', '5', '6'])\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right'].set_color('black')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='-', linewidth=0.5)\n\n# Set the color of the tick labels\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the tick lines\nax.spines['bottom'].set_color('black')\nax.spines['top'].set_color('black')\nax.spines['left'].set_color('black')\nax.spines['right']."}
{"file": "dataset/ori_500/line_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Effect of Vocab on Zero Shot Accuracy')\n\n# Set the x-axis label\nax.set_xlabel('Deposition IO Norm')\n\n# Set the y-axis label\nax.set_ylabel('Accuracy')\n\n# Set the x-axis limits\nax.set_xlim(0, 80)\n\n# Set the y-axis limits\nax.set_ylim(0.55, 0.75)\n\n# Draw horizontal lines\nax.axhline(y=0.75, color='black', linestyle='-')\nax.axhline(y=0.70, color='black', linestyle='-')\nax.axhline(y=0.65, color='black', linestyle='-')\nax.axhline(y=0.60, color='black', linestyle='-')\nax.axhline(y=0.55, color='black', linestyle='-')\n\n# Draw vertical lines\nax.axvline(x=0, color='black', linestyle='-')\nax.axvline(x=20, color='black', linestyle='-')\nax.axvline(x=40, color='black', linestyle='-')\nax.axvline(x=60, color='black', linestyle='-')\nax.axvline(x=80, color='black', linestyle='-')\n\n# Plot the data\nax.plot([0, 20, 40, 60, 80], [0.75, 0.70, 0.65, 0.60, 0.55], 'ro-', label='coco (10k)')\nax.plot([0, 20, 40, 60, 80], [0.70, 0.65, 0.60, 0.55, 0.50], 'go-', label='laion (10k)')\nax.plot([0, 20, 40, 60, 80], [0.65, 0.60, 0.55, 0.50, 0.45], 'bo-', label='coco (5k)')\nax.plot([0, 20, 40, 60, 80], [0.60, 0.55, 0.50, 0.45, 0.40], 'yo-', label='laion (5k)')\n\n# Add a legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Sample data\nx = [0.25, 0.5, 0.75, 1.0]\ny1 = [0.03, 0.04, 0.05, 0.06]\ny2 = [0.07, 0.08, 0.09, 0.1]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data\nax.plot(x, y1, 'g-', label='Std of ACC')\nax.plot(x, y2, 'r-', label='Sample Ratio')\n\n# Add markers at specific points\nax.plot(0.25, 0.03, 'g^', markersize=10)\nax.plot(0.5, 0.04, 'r^', markersize=10)\nax.plot(0.75, 0.05, 'g^', markersize=10)\nax.plot(1.0, 0.06, 'r^', markersize=10)\n\n# Set the title and labels\nax.set_title('Stock Price Prediction')\nax.set_xlabel('Sample Ratio')\nax.set_ylabel('Std of ACC')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 10.0))\n\n# Set the x-axis limits\nax.set_xlim(0, 200)\n\n# Plot the first line graph\nax.plot([0, 25, 50, 75, 100, 125, 150, 175, 200], [0.5, 0.4, 0.3, 0.2, 0.1, 0.2, 0.3, 0.4, 0.5], color='blue', label='base')\nax.plot([0, 25, 50, 75, 100, 125, 150, 175, 200], [0.5, 0.4, 0.3, 0.2, 0.1, 0.2, 0.3, 0.4, 0.5], color='orange', label='ours')\n\n# Plot the second line graph\nax.plot([0, 25, 50, 75, 100, 125, 150, 175, 200], [0.4, 0.3, 0.2, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6], color='blue', label='base')\nax.plot([0, 25, 50, 75, 100, 125, 150, 175, 200], [0.4, 0.3, 0.2, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6], color='orange', label='ours')\n\n# Plot the third line graph\nax.plot([0, 25, 50, 75, 100, 125, 150, 175, 200], [0.3, 0.2, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7], color='blue', label='base')\nax.plot([0, 25, 50, 75, 100, 125, 150, 175, 200], [0.3, 0.2, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7], color='orange', label='ours')\n\n# Plot the fourth line graph\nax.plot([0, 25, 50, 75, 100, 125, 150, 175, 200], [0.2, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8], color='blue', label='base')\nax.plot([0, 25, 50, 75, 100, 125, 150, 175, 200], [0.2, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8], color='orange', label='ours')\n\n# Plot the fifth line graph\nax.plot([0, 25, 50, 75, 100, 125, 150, 175, 200], [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9], color='blue', label='base')\nax.plot([0, 25, 50, 75, 100, 125, 150, 175, 200], [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9], color='orange', label='ours')\n\n# Add a legend\nax.legend()\n\n# Set the y-axis limits\nax.set_ylim(0, 1)\n\n# Set the title of the plot\nax.set_title('Training Metrics')\n\n# Set the x-axis label\nax.set_xlabel('Training iterations')\n\n# Set the y-axis label\nax.set_ylabel('Metrics')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Set the background color of the plot\nax.set_facecolor('#F5EFE7')\n\n# Set the title of the plot\nax.set_title('Real-time Stock Prices', fontsize=14)\n\n# Set the x-axis label\nax.set_xlabel('Week', fontsize=12)\n\n# Set the y-axis label\nax.set_ylabel('Normalized Value', fontsize=12)\n\n# Set the x-ticks\nax.set_xticks([1, 4, 7, 10, 13, 16, 19, 22, 25, 28])\n\n# Set the y-ticks\nax.set_yticks([0, 0.25, 0.5, 0.75, 1])\n\n# Set the grid\nax.grid(True)\n\n# Plot the data\nax.plot([1, 4, 7, 10, 13, 16, 19, 22, 25, 28], [0.1, 0.3, 0.5, 0.7, 0.9, 0.7, 0.5, 0.3, 0.1, 0.05], 'b-')\nax.plot([1, 4, 7, 10, 13, 16, 19, 22, 25, 28], [0.15, 0.35, 0.55, 0.75, 0.95, 0.75, 0.55, 0.35, 0.15, 0.075], 'r-')\n\n# Add text annotations\nax.text(1, 0.1, 'Auto-profiled', color='red', fontsize=10)\nax.text(4, 0.3, 'Manually-analyzed', color='blue', fontsize=10)\nax.text(7, 0.5, 'Realize the trend', color='red', fontsize=10)\nax.text(10, 0.7, 'Release new product', color='blue', fontsize=10)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Sample data\nx = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\ny1 = [95, 90, 85, 80, 75, 70, 65, 60, 55, 50, 45, 40, 35, 30, 25, 20, 15, 10, 5, 0]\ny2 = [85, 80, 75, 70, 65, 60, 55, 50, 45, 40, 35, 30, 25, 20, 15, 10, 5, 0, 5, 10]\ny3 = [75, 70, 65, 60, 55, 50, 45, 40, 35, 30, 25, 20, 15, 10, 5, 0, 5, 10, 15, 20]\ny4 = [65, 60, 55, 50, 45, 40, 35, 30, 25, 20, 15, 10, 5, 0, 5, 10, 15, 20, 25, 30]\ny5 = [55, 50, 45, 40, 35, 30, 25, 20, 15, 10, 5, 0, 5, 10, 15, 20, 25, 30, 35, 40]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data\nax.plot(x, y1, label='BaCE', color='blue')\nax.plot(x, y2, label='LWF', color='orange')\nax.plot(x, y3, label='EWC', color='purple')\nax.plot(x, y4, label='SEQ', color='pink')\n\n# Set the title and labels\nax.set_title('Average Accuracy')\nax.set_xlabel('Task')\nax.set_ylabel('Accuracy (%)')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_16.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title and labels\nax.set_title('Model Accuracy vs Uncertainty Threshold')\nax.set_xlabel('Uncertainty threshold')\nax.set_ylabel('Accuracy')\n\n# Define the data\nx = [0.0, 0.2, 0.4, 0.6, 0.8, 1.0]\ny1 = [0.99, 0.98, 0.97, 0.96, 0.95, 0.94]\ny2 = [0.96, 0.95, 0.94, 0.93, 0.92, 0.91]\ny3 = [0.93, 0.92, 0.91, 0.90, 0.89, 0.88]\n\n# Plot the data\nax.plot(x, y1, 'b-', label='Oesense')\nax.plot(x, y2, 'r-', label='KWS')\nax.plot(x, y3, 'g-', label='ECG5000')\n\n# Add markers at each point\nfor i, j in zip(x, y1):\n    ax.plot(i, j, 'bo')\nfor i, j in zip(x, y2):\n    ax.plot(i, j, 'ro')\nfor i, j in zip(x, y3):\n    ax.plot(i, j, 'go')\n\n# Add legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_17.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Set the title of the plot\nax.set_title('Log KL Divergence')\n\n# Set the x-axis label\nax.set_xlabel('Number of Parameters')\n\n# Set the y-axis label\nax.set_ylabel('Log KL Divergence')\n\n# Create a line plot with blue color\nax.plot([0, 20, 40, 60, 80, 100, 120], [10**-5, 10**-3, 10**-2, 10**-2, 10**-3, 10**-4, 10**-5], 'b-')\n\n# Set the limits for the x-axis\nax.set_xlim(0, 120)\n\n# Set the limits for the y-axis\nax.set_ylim(10**-5, 10**-3)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_18.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(9, 4))\n\n# Set the title of the graph\nax.set_title('GPT-4 Evaluation')\n\n# Create a rectangle for the first graph\nrect1 = plt.Rectangle((0, 0), 1000, 1000, color='lightblue')\nax.add_patch(rect1)\n\n# Create a rectangle for the second graph\nrect2 = plt.Rectangle((0, 0), 1000, 1000, color='lightgreen')\nax.add_patch(rect2)\n\n# Create a rectangle for the third graph\nrect3 = plt.Rectangle((0, 0), 1000, 1000, color='lightpink')\nax.add_patch(rect3)\n\n# Create a rectangle for the fourth graph\nrect4 = plt.Rectangle((0, 0), 1000, 1000, color='lightyellow')\nax.add_patch(rect4)\n\n# Create a rectangle for the fifth graph\nrect5 = plt.Rectangle((0, 0), 1000, 1000, color='lightcoral')\nax.add_patch(rect5)\n\n# Create a rectangle for the sixth graph\nrect6 = plt.Rectangle((0, 0), 1000, 1000, color='lightskyblue')\nax.add_patch(rect6)\n\n# Create a rectangle for the seventh graph\nrect7 = plt.Rectangle((0, 0), 1000, 1000, color='lightseagreen')\nax.add_patch(rect7)\n\n# Create a rectangle for the eighth graph\nrect8 = plt.Rectangle((0, 0), 1000, 1000, color='lightgrey')\nax.add_patch(rect8)\n\n# Create a rectangle for the ninth graph\nrect9 = plt.Rectangle((0, 0), 1000, 1000, color='lightcyan')\nax.add_patch(rect9)\n\n# Create a rectangle for the tenth graph\nrect10 = plt.Rectangle((0, 0), 1000, 1000, color='lightmagenta')\nax.add_patch(rect10)\n\n# Create a rectangle for the eleventh graph\nrect11 = plt.Rectangle((0, 0), 1000, 1000, color='lightblue')\nax.add_patch(rect11)\n\n# Create a rectangle for the twelfth graph\nrect12 = plt.Rectangle((0, 0), 1000, 1000, color='lightgreen')\nax.add_patch(rect12)\n\n# Create a rectangle for the thirteenth graph\nrect13 = plt.Rectangle((0, 0), 1000, 1000, color='lightpink')\nax.add_patch(rect13)\n\n# Create a rectangle for the fourteenth graph\nrect14 = plt.Rectangle((0, 0), 1000, 1000, color='lightyellow')\nax.add_patch(rect14)\n\n# Create a rectangle for the fifteenth graph\nrect15 = plt.Rectangle((0, 0), 1000, 1000, color='lightcoral')\nax.add_patch(rect15)\n\n# Create a rectangle for the sixteenth graph\nrect16 = plt.Rectangle((0, 0), 1000, 1000, color='lightskyblue')\nax.add_patch(rect16)\n\n# Create a rectangle for the seventeenth graph\nrect17 = plt.Rectangle((0, 0), 1000, 1000, color='lightseagreen')\nax.add_patch(rect17)\n\n# Create a rectangle for the eighteenth graph\nrect18 = plt.Rectangle((0, 0), 1000, 1000, color='lightgrey')\nax.add_patch(rect18)\n\n# Create a rectangle for the nineteenth graph\nrect19 = plt.Rectangle((0, 0), 1000, 1000, color='lightcyan')\nax.add_patch(rect19)\n\n# Create a rectangle for the twentieth graph\nrect20 = plt.Rectangle((0, 0), 1000, 1000, color='lightmagenta')\nax.add_patch(rect20)\n\n# Create a rectangle for the twenty-first graph\nrect21 = plt.Rectangle((0, 0), 1000, 1000, color='lightblue')\nax.add_patch(rect21)\n\n# Create a rectangle for the twenty-second graph\nrect22 = plt.Rectangle((0, 0), 1000, 1000, color='lightgreen')\nax.add_patch(rect22)\n\n# Create a rectangle for the twenty-third graph\nrect23 = plt.Rectangle((0, 0), 1000, 1000, color='lightpink')\nax.add_patch(rect23)\n\n# Create a rectangle for the twenty-fourth graph\nrect24 = plt.Rectangle((0, 0), 1000, 1000, color='lightyellow')\nax.add_patch(rect24)\n\n# Create a rectangle for the twenty-fifth graph\nrect25 = plt.Rectangle((0, 0), 1000, 1000, color='lightcoral')\nax.add_patch(rect25)\n\n# Create a rectangle for the twenty-sixth graph\nrect26 = plt.Rectangle((0, 0), 1000, 1000, color='lightskyblue')\nax.add_patch(rect26)\n\n# Create a rectangle for the twenty-seventh graph\nrect27 = plt.Rectangle((0, 0), 1000, 1000, color='lightseagreen')\nax.add_patch(rect27)\n\n# Create a rectangle for the twenty-eighth graph\nrect28 = plt.Rectangle((0, 0), 1000, 1000, color='lightgrey')\nax.add_patch(rect28)\n\n# Create a rectangle for the twenty-ninth graph\nrect29 = plt.Rectangle((0, 0), 1000, 1000, color='lightcyan')\nax.add_patch(rect29)\n\n# Create a rectangle for the thirtieth graph\nrect30 = plt.Rectangle((0, 0), 1000, 1000, color='lightmagenta')\nax.add_patch(rect30)\n\n# Create a rectangle for the thirtieth-first graph\nrect31 = plt.Rectangle((0, 0), 1000, 1000, color='lightblue')\nax.add_patch(rect31)\n\n# Create a rectangle for the thirtieth-second graph\nrect32 = plt.Rectangle((0, 0), 1000, 1000, color='lightgreen')\nax.add_patch(rect32)\n\n# Create a rectangle for the thirtieth-third graph\nrect33 = plt.Rectangle((0, 0), 1000, 1000, color='lightpink')\nax.add_patch(rect33)\n\n# Create a rectangle for the thirtieth-fourth graph\nrect34 = plt.Rectangle((0, 0), 1000, 1000, color='lightyellow')\nax.add_patch(rect34)\n\n# Create a rectangle for the thirtieth-fifth graph\nrect35 = plt.Rectangle((0, 0), 1000, 1000, color='lightcoral')\nax.add_patch(rect35)\n\n# Create a rectangle for the thirtieth-sixth graph\nrect36 = plt.Rectangle((0, 0), 1000, 1000, color='lightskyblue')\nax.add_patch(rect36)\n\n# Create a rectangle for the thirtieth-seventh graph\nrect37 = plt.Rectangle((0, 0), 1000, 1000, color='lightseagreen')\nax.add_patch(rect37)\n\n# Create a rectangle for the thirtieth-eighth graph\nrect38 = plt.Rectangle((0, 0), 1000, 1000, color='lightgrey')\nax.add_patch(rect38)\n\n# Create a rectangle for the thirtieth-ninth graph\nrect39 = plt.Rectangle((0, 0), 1000, 1000, color='lightcyan')\nax.add_patch(rect39)\n\n# Create a rectangle for the thirtieth-tenth graph\nrect40 = plt.Rectangle((0, 0), 1000, 1000, color='lightmagenta')\nax.add_patch(rect40)\n\n# Create a rectangle for the thirtieth-eleventh graph\nrect41 = plt.Rectangle((0, 0), 1000, 1000, color='lightblue')\nax.add_patch(rect41)\n\n# Create a rectangle for the thirtieth-twelfth graph\nrect42 = plt.Rectangle((0, 0), 1000, 1000, color='lightgreen')\nax.add_patch(rect42)\n\n# Create a rectangle for the thirtieth-thirteenth graph\nrect43 = plt.Rectangle((0, 0), 1000, 1000, color='lightpink')\nax.add_patch(rect43)\n\n# Create a rectangle for the thirtieth-fourteenth graph\nrect44 = plt.Rectangle((0, 0), 1000, 1000, color='lightyellow')\nax.add_patch(rect44)\n\n# Create a rectangle for the thirtieth-fifteenth graph\nrect45 = plt.Rectangle((0, 0), 1000, 1000, color='lightcoral')\nax.add_patch(rect45)\n\n# Create a rectangle for the thirtieth-sixteenth graph\nrect46 = plt.Rectangle((0, 0), 1000, 1000, color='lightskyblue')\nax.add_patch(rect46)\n\n# Create a rectangle for the thirtieth-seventeenth graph\nrect47 = plt.Rectangle((0, 0), 1000, 1000, color='lightseagreen')\nax.add_patch(rect47)\n\n# Create a rectangle for the thirtieth-eighteenth graph\nrect48 = plt.Rectangle((0, 0), 1000, 1000, color='lightgrey')\nax.add_patch(rect48)\n\n# Create a rectangle for the thirtieth-nineteenth graph\nrect49 = plt.Rectangle((0, 0), 1000, 1000, color='lightcyan')\nax.add_patch(rect49)\n\n# Create a rectangle for the thirtieth-twentieth graph\nrect50 = plt.Rectangle((0, 0), 1000, 1000, color='lightmagenta')\nax.add_patch(rect50)\n\n# Create a rectangle for the thirtieth-twenty-first graph\nrect51 = plt.Rectangle((0, 0), 1000, 1000, color='lightblue')\nax.add_patch(rect51)\n\n# Create a rectangle for the thirtieth-twenty-second graph\nrect52 = plt.Rectangle((0, 0), 1000, 1000, color='lightgreen')\nax.add_patch(rect52)\n\n# Create a rectangle for the thirtieth-twenty-third graph\nrect53 = plt.Rectangle((0, 0), 1000, 1000, color='lightpink')\nax.add_patch(rect53)\n\n# Create a rectangle for the thirtieth-twenty-fourth graph\nrect54 = plt.Rectangle((0, 0), 1000, 1000, color='lightyellow')\nax.add_patch(rect54)\n\n# Create a rectangle for the thirtieth-twenty-fifth graph\nrect55 = plt.Rectangle((0, 0), 1000, 1000, color='lightcoral')\nax.add_patch(rect55)\n\n# Create a rectangle for the thirtieth-twenty-sixth graph\nrect56 = plt.Rectangle((0, 0), 1000, 1000, color='lightskyblue')\nax.add_patch(rect56)\n\n# Create a rectangle for the thirtieth-twenty-seventh graph\nrect57 = plt.Rectangle((0, 0), 1000, 1000, color='lightseagreen')\nax.add_patch(rect57)\n\n# Create a rectangle for the thirtieth-twenty-eighth graph\nrect58 = plt.Rectangle((0, 0), 1000, 1000, color='lightgrey')\nax.add_patch(rect58)\n\n# Create a rectangle for the thirtieth-twenty-ninth graph\nrect59 = plt.Rectangle((0, 0), 1000, 1000, color='lightcyan')\nax.add_patch(rect59)\n\n# Create a rectangle for the thirtieth-thirtieth graph\nrect60 = plt.Rectangle((0, 0), 1000, 1000, color='lightmagenta')\nax.add_patch(rect60)\n\n# Create a rectangle for the thirtieth-thirtieth-first graph\nrect61 = plt.Rectangle((0, 0), 1000, 1000, color='lightblue')\nax.add_patch(rect61)\n\n# Create a rectangle for the thirtieth-thirtieth-second graph\nrect62 = plt.Rectangle((0, 0), 1000, 1000, color='lightgreen')\nax.add_patch(rect62)\n\n# Create a rectangle for the thirtieth-thirtieth-third graph\nrect63 = plt.Rectangle((0, 0), 1000, 1000, color='lightpink')\nax.add_patch(rect63)\n\n# Create a rectangle for the thirtieth-thirtieth-fourth graph\nrect64 = plt.Rectangle((0, 0), 1000, 1000, color='lightyellow')\nax.add_patch(rect64)\n\n# Create a rectangle for the thirtieth-thirtieth-fifteenth graph\nrect65 = plt.Rectangle((0, 0), 1000, 1000, color='lightcoral')\nax.add_patch(rect65)\n\n# Create a rectangle for the thirtieth-thirtieth-sixteenth graph\nrect66 = plt.Rectangle((0, 0), 1000, 1000, color='lightskyblue')\nax.add_patch(rect66)\n\n# Create a rectangle for the thirtieth-thirtieth-seventeenth graph\nrect67 = plt.Rectangle((0, 0), 1000, 1000, color='lightseagreen')\nax.add_patch(rect67)\n\n# Create a rectangle for the thirtieth-thirtieth-eighteenth graph\nrect68 = plt.Rectangle((0, 0), 1000, 1000, color='lightgrey')\nax.add_patch(rect68)\n\n# Create a rectangle for the thirtieth-thirtieth-nineteenth graph\nrect69 = plt.Rectangle((0, 0), 1000, 1000, color='lightcyan')\nax.add_patch(rect69)\n\n# Create a rectangle for the thirtieth-thirtieth-twentieth graph\nrect70 = plt.Rectangle((0, 0), 1000, 1000, color='lightmagenta')\nax.add_patch(rect70)\n\n# Create a rectangle for the thirtieth-thirtieth-twenty-first graph\nrect71 = plt.Rectangle((0, 0), 1000, 1000, color='lightblue')\nax.add_patch(rect71)\n\n# Create a rectangle for the thirtieth-thirtieth-twenty-second graph\nrect72 = plt.Rectangle((0, 0), 1000, 1000, color='lightgreen')\nax.add_patch(rect72)\n\n# Create a rectangle for the thirtieth-thirtieth-twenty-third graph\nrect73 = plt.Rectangle((0, 0), 1000, 1000, color='lightpink')\nax.add_patch(rect73)\n\n# Create a rectangle for the thirtieth-thirtieth-twenty-fourth graph\nrect74 = plt.Rectangle((0, 0), 1000, 1000, color='lightyellow')\nax.add_patch(rect74)\n\n# Create a rectangle for the thirtieth-thirtieth-twenty-fifth graph\nrect75 = plt.Rectangle((0, 0), 1000, 1000, color='lightcoral')\nax.add_patch(rect75)\n\n# Create a rectangle for the thirtieth-thirtieth-twenty-sixth graph\nrect76 = plt.Rectangle((0, 0), 1000, 1000, color='lightskyblue')\nax.add_patch(rect76)\n\n# Create a rectangle for the thirtieth-thirtieth-twenty-seventh graph\nrect77 = plt.Rectangle((0, 0), 1000, 1000, color='lightseagreen')\nax.add_patch(rect77)\n\n# Create a rectangle for the thirtieth-thirtieth-twenty-eighth graph\nrect78 = plt.Rectangle((0, 0), 1000, 1000, color='lightgrey')\nax.add_patch(rect78)\n\n# Create a rectangle for the thirtieth-thirtieth-twenty-ninth graph\nrect79 = plt.Rectangle((0, 0), 1000, 1000, color='lightcyan')\nax.add_patch(rect79)\n\n# Create a rectangle for the thirtieth-thirtieth-thirtieth graph\nrect80 = plt.Rectangle((0, 0), 1000, 1000, color='lightmagenta')\nax.add_patch(rect80)\n\n# Create a rectangle for the thirtieth-thirtieth-thirtieth-first graph\nrect81 = plt.Rectangle((0, 0"}
{"file": "dataset/ori_500/line_19.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(5.0, 4.0))\n\n# Plot the data\nax.plot([10**-2, 10**-1, 10**0], [75, 70, 65], 'g-', label='Full')\nax.plot([10**-2, 10**-1, 10**0], [80, 75, 70], 'r-', label='SPT')\nax.plot([10**-2, 10**-1, 10**0], [85, 80, 75], 'b-', label='VPT')\n\n# Set the title and labels\nax.set_title('Test Accuracy vs Fraction of Training Data')\nax.set_xlabel('Fraction of training data (log scale)')\nax.set_ylabel('Test accuracy (%)')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(4.0, 3.0))\n\n# Define the data\nx = [0, 50, 100, 150, 200]\ny1 = [1.5, 1.8, 2.2, 1.9, 1.7]\ny2 = [1.2, 1.4, 1.6, 1.8, 2.0]\ny3 = [0.5, 0.7, 0.9, 1.1, 1.3]\ny4 = [1.0, 1.2, 1.4, 1.6, 1.8]\n\n# Plot the data\nax.plot(x, y1, color='blue', label='Data 1')\nax.plot(x, y2, color='green', label='Data 2')\nax.plot(x, y3, color='orange', label='Data 3')\nax.plot(x, y4, color='red', label='Data 4')\n\n# Add a legend\nax.legend()\n\n# Set the title and labels\nax.set_title('Gradient Steps (x 62.5K)')\nax.set_xlabel('Gradient Steps (x 62.5K)')\nax.set_ylabel('Value')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_20.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(16.0, 8.0))\n\n# Set the title of the plot\nax.set_title('MOLHIV')\n\n# Set the x-axis label\nax.set_xlabel('Ratio r')\n\n# Set the y-axis label\nax.set_ylabel('Performance')\n\n# Create a rectangle patch\nrect = plt.Rectangle((0.2, 0.7), 0.4, 0.1, color='purple', alpha=0.5)\nax.add_patch(rect)\n\n# Create a line plot\nax.plot([0.2, 0.4, 0.6, 0.8, 1.0], [0.78, 0.76, 0.74, 0.72, 0.70], color='purple')\n\n# Create a rectangle patch\nrect = plt.Rectangle((0.2, 0.7), 0.4, 0.1, color='orange', alpha=0.5)\nax.add_patch(rect)\n\n# Create a line plot\nax.plot([0.2, 0.4, 0.6, 0.8, 1.0], [0.78, 0.76, 0.74, 0.72, 0.70], color='orange')\n\n# Create a rectangle patch\nrect = plt.Rectangle((0.2, 0.7), 0.4, 0.1, color='yellow', alpha=0.5)\nax.add_patch(rect)\n\n# Create a line plot\nax.plot([0.2, 0.4, 0.6, 0.8, 1.0], [0.78, 0.76, 0.74, 0.72, 0.70], color='yellow')\n\n# Create a rectangle patch\nrect = plt.Rectangle((0.2, 0.7), 0.4, 0.1, color='green', alpha=0.5)\nax.add_patch(rect)\n\n# Create a line plot\nax.plot([0.2, 0.4, 0.6, 0.8, 1.0], [0.78, 0.76, 0.74, 0.72, 0.70], color='green')\n\n# Create a rectangle patch\nrect = plt.Rectangle((0.2, 0.7), 0.4, 0.1, color='blue', alpha=0.5)\nax.add_patch(rect)\n\n# Create a line plot\nax.plot([0.2, 0.4, 0.6, 0.8, 1.0], [0.78, 0.76, 0.74, 0.72, 0.70], color='blue')\n\n# Create a rectangle patch\nrect = plt.Rectangle((0.2, 0.7), 0.4, 0.1, color='red', alpha=0.5)\nax.add_patch(rect)\n\n# Create a line plot\nax.plot([0.2, 0.4, 0.6, 0.8, 1.0], [0.78, 0.76, 0.74, 0.72, 0.70], color='red')\n\n# Create a rectangle patch\nrect = plt.Rectangle((0.2, 0.7), 0.4, 0.1, color='purple', alpha=0.5)\nax.add_patch(rect)\n\n# Create a line plot\nax.plot([0.2, 0.4, 0.6, 0.8, 1.0], [0.78, 0.76, 0.74, 0.72, 0.70], color='purple')\n\n# Create a rectangle patch\nrect = plt.Rectangle((0.2, 0.7), 0.4, 0.1, color='orange', alpha=0.5)\nax.add_patch(rect)\n\n# Create a line plot\nax.plot([0.2, 0.4, 0.6, 0.8, 1.0], [0.78, 0.76, 0.74, 0.72, 0.70], color='orange')\n\n# Create a rectangle patch\nrect = plt.Rectangle((0.2, 0.7), 0.4, 0.1, color='yellow', alpha=0.5)\nax.add_patch(rect)\n\n# Create a line plot\nax.plot([0.2, 0.4, 0.6, 0.8, 1.0], [0.78, 0.76, 0.74, 0.72, 0.70], color='yellow')\n\n# Create a rectangle patch\nrect = plt.Rectangle((0.2, 0.7), 0.4, 0.1, color='green', alpha=0.5)\nax.add_patch(rect)\n\n# Create a line plot\nax.plot([0.2, 0.4, 0.6, 0.8, 1.0], [0.78, 0.76, 0.74, 0.72, 0.70], color='green')\n\n# Create a rectangle patch\nrect = plt.Rectangle((0.2, 0.7), 0.4, 0.1, color='blue', alpha=0.5)\nax.add_patch(rect)\n\n# Create a line plot\nax.plot([0.2, 0.4, 0.6, 0.8, 1.0], [0.78, 0.76, 0.74, 0.72, 0.70], color='blue')\n\n# Create a rectangle patch\nrect = plt.Rectangle((0.2, 0.7), 0.4, 0.1, color='red', alpha=0.5)\nax.add_patch(rect)\n\n# Create a line plot\nax.plot([0.2, 0.4, 0.6, 0.8, 1.0], [0.78, 0.76, 0.74, 0.72, 0.70], color='red')\n\n# Create a rectangle patch\nrect = plt.Rectangle((0.2, 0.7), 0.4, 0.1, color='purple', alpha=0.5)\nax.add_patch(rect)\n\n# Create a line plot\nax.plot([0.2, 0.4, 0.6, 0.8, 1.0], [0.78, 0.76, 0.74, 0.72, 0.70], color='purple')\n\n# Create a rectangle patch\nrect = plt.Rectangle((0.2, 0.7), 0.4, 0.1, color='orange', alpha=0.5)\nax.add_patch(rect)\n\n# Create a line plot\nax.plot([0.2, 0.4, 0.6, 0.8, 1.0], [0.78, 0.76, 0.74, 0.72, 0.70], color='orange')\n\n# Create a rectangle patch\nrect = plt.Rectangle((0.2, 0.7), 0.4, 0.1, color='yellow', alpha=0.5)\nax.add_patch(rect)\n\n# Create a line plot\nax.plot([0.2, 0.4, 0.6, 0.8, 1.0], [0.78, 0.76, 0.74, 0.72, 0.70], color='yellow')\n\n# Create a rectangle patch\nrect = plt.Rectangle((0.2, 0.7), 0.4, 0.1, color='green', alpha=0.5)\nax.add_patch(rect)\n\n# Create a line plot\nax.plot([0.2, 0.4, 0.6, 0.8, 1.0], [0.78, 0.76, 0.74, 0.72, 0.70], color='green')\n\n# Create a rectangle patch\nrect = plt.Rectangle((0.2, 0.7), 0.4, 0.1, color='blue', alpha=0.5)\nax.add_patch(rect)\n\n# Create a line plot\nax.plot([0.2, 0.4, 0.6, 0.8, 1.0], [0.78, 0.76, 0.74, 0.72, 0.70], color='blue')\n\n# Create a rectangle patch\nrect = plt.Rectangle((0.2, 0.7), 0.4, 0.1, color='red', alpha=0.5)\nax.add_patch(rect)\n\n# Create a line plot\nax.plot([0.2, 0.4, 0.6, 0.8, 1.0], [0.78, 0.76, 0.74, 0.72, 0.70], color='red')\n\n# Create a rectangle patch\nrect = plt.Rectangle((0.2, 0.7), 0.4, 0.1, color='purple', alpha=0.5)\nax.add_patch(rect)\n\n# Create a line plot\nax.plot([0.2, 0.4, 0.6, 0.8, 1.0], [0.78, 0.76, 0.74, 0.72, 0.70], color='purple')\n\n# Create a rectangle patch\nrect = plt.Rectangle((0.2, 0.7), 0.4, 0.1, color='orange', alpha=0.5)\nax.add_patch(rect)\n\n# Create a line plot\nax.plot([0.2, 0.4, 0.6, 0.8, 1.0], [0.78, 0.76, 0.74, 0.72, 0.70], color='orange')\n\n# Create a rectangle patch\nrect = plt.Rectangle((0.2, 0.7), 0.4, 0.1, color='yellow', alpha=0.5)\nax.add_patch(rect)\n\n# Create a line plot\nax.plot([0.2, 0.4, 0.6, 0.8, 1.0], [0.78, 0.76, 0.74, 0.72, 0.70], color='yellow')\n\n# Create a rectangle patch\nrect = plt.Rectangle((0.2, 0.7), 0.4, 0.1, color='green', alpha=0.5)\nax.add_patch(rect)\n\n# Create a line plot\nax.plot([0.2, 0.4, 0.6, 0.8, 1.0], [0.78, 0.76, 0.74, 0.72, 0.70], color='green')\n\n# Create a rectangle patch\nrect = plt.Rectangle((0.2, 0.7), 0.4, 0.1, color='blue', alpha=0.5)\nax.add_patch(rect)\n\n# Create a line plot\nax.plot([0.2, 0.4, 0.6, 0.8, 1.0], [0.78, 0.76, 0.74, 0.72, 0.70], color='blue')\n\n# Create a rectangle patch\nrect = plt.Rectangle((0.2, 0.7), 0.4, 0.1, color='red', alpha=0.5)\nax.add_patch(rect)\n\n# Create a line plot\nax.plot([0.2, 0.4, 0.6, 0.8, 1.0], [0.78, 0.76, 0.74, 0.72, 0.70], color='red')\n\n# Create a rectangle patch\nrect = plt.Rectangle((0.2, 0.7), 0.4, 0.1, color='purple', alpha=0.5)\nax.add_patch(rect)\n\n# Create a line plot\nax.plot([0.2, 0.4, 0.6, 0.8, 1.0], [0.78, 0.76, 0.74, 0.72, 0.70], color='purple')\n\n# Create a rectangle patch\nrect = plt.Rectangle((0.2, 0.7), 0.4, 0.1, color='orange', alpha=0.5)\nax.add_patch(rect)\n\n# Create a line plot\nax.plot([0.2, 0.4, 0.6, 0.8, 1.0], [0.78, 0.76, 0.74, 0.72, 0.70], color='orange')\n\n# Create a rectangle patch\nrect = plt.Rectangle((0.2, 0.7), 0.4, 0.1, color='yellow', alpha=0.5)\nax.add_patch(rect)\n\n# Create a line plot\nax.plot([0.2, 0.4, 0.6, 0.8, 1.0], [0.78, 0.76, 0.74, 0.72, 0.70], color='yellow')\n\n# Create a rectangle patch\nrect = plt.Rectangle((0.2, 0.7), 0.4, 0.1, color='green', alpha=0.5)\nax.add_patch(rect)\n\n# Create a line plot\nax.plot([0.2, 0.4, 0.6, 0.8, 1.0], [0.78, 0.76, 0.74, 0.72, 0.70], color='green')\n\n# Create a rectangle patch\nrect = plt.Rectangle((0.2, 0.7), 0.4, 0.1, color='blue', alpha=0.5)\nax.add_patch(rect)\n\n# Create a line plot\nax.plot([0.2, 0.4, 0.6, 0.8, 1.0], [0.78, 0.76, 0.74, 0.72, 0.70], color='blue')\n\n# Create a rectangle patch\nrect = plt.Rectangle((0.2, 0.7), 0.4, 0.1, color='red', alpha=0.5)\nax.add_patch(rect)\n\n# Create a line plot\nax.plot([0.2, 0.4, 0.6, 0.8, 1.0], [0.78, 0.76, 0.74, 0.72, 0.70], color='red')\n\n# Create a rectangle patch\nrect = plt.Rectangle((0.2, 0.7), 0.4, 0.1, color='purple', alpha=0.5)\nax.add_patch(rect)\n\n# Create a line plot\nax.plot([0.2, 0.4, 0.6, 0.8, 1.0], [0.78, 0.76, 0.74, 0.72, 0.70], color='purple')\n\n# Create a rectangle patch\nrect = plt.Rectangle((0.2, 0.7), 0.4, 0.1, color='orange', alpha=0.5)\nax.add_patch(rect)\n\n# Create a line plot\nax.plot([0.2, 0.4, 0.6, 0.8, 1.0], [0.78, 0.76, 0.74, 0.72, 0.70], color='orange')\n\n# Create a rectangle patch\nrect = plt.Rectangle((0.2, 0.7), 0.4, 0.1, color='yellow', alpha=0.5)\nax.add_patch(rect)\n\n# Create a line plot\nax.plot([0.2, 0.4, 0.6, 0.8, 1.0], [0.78, 0.76, 0.74, 0.72, 0.70], color='yellow')\n\n# Create a rectangle patch\nrect = plt.Rectangle((0.2, 0.7), 0.4, 0.1, color='green', alpha=0.5)\nax.add_patch(rect)\n\n# Create a line plot\nax.plot([0.2, 0.4, 0.6, 0.8, 1.0], [0.78, 0.76, 0.74, 0.72, 0.70], color='green')\n\n# Create a rectangle patch\nrect = plt.Rectangle((0.2, 0.7), 0.4, 0.1, color='blue', alpha=0.5)\nax.add_patch(rect)\n\n# Create a line plot\nax.plot([0.2, 0.4, 0.6, 0.8, 1.0], [0.78, 0.76, 0.74, 0.72, 0.70], color='blue')\n\n# Create a rectangle patch\nrect = plt.Rectangle((0.2, 0.7), 0.4, 0.1, color='red', alpha=0.5)\nax.add_patch(rect)\n\n# Create a line plot\nax.plot([0.2, 0.4, 0.6, 0.8, 1.0], [0.78, 0.76, 0.74, 0"}
{"file": "dataset/ori_500/line_21.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(9.0, 6.0))\n\n# Plot the data\nax.plot([120, 90, 60, 30, 10], [85, 87, 88, 89, 90], 'b-o')\nax.plot([120, 90, 60, 30, 10], [85, 87, 88, 89, 90], 'g-o')\n\n# Set the title and labels\nax.set_title('Top-1 Acc (%)')\nax.set_xlabel('Imbalance Ratio of Unlabeled Data')\nax.set_ylabel('Top-1 Acc (%)')\n\n# Add markers for each point\nfor i, txt in enumerate(['1/20', '1/40', '1/60', '1/80', '1/100']):\n    ax.annotate(txt, (i*30+10, 85+i), textcoords=\"offset points\", xytext=(0,10), ha='center')\n\n# Add a legend\nax.legend(['Ours', 'ACR'])\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_22.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nx = [40, 50, 60, 70, 80, 90, 100]\ny = [2.91, 3.11, 3.32, 3.53, 3.63, 3.74, 3.94]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(5.0, 4.0))\n\n# Plot the data\nax.plot(x, y, 'b-')\n\n# Set the title and labels\nax.set_title('Perplexity vs Ratio of 4-bit Utilization')\nax.set_xlabel('Ratio of 4-bit Utilization (%)')\nax.set_ylabel('Perplexity (PPL)')\n\n# Add a rectangle with a colored border\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lightgrey', edgecolor='black'))\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_23.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data points\nx = [2**1, 2**2, 2**3, 2**4, 2**5, 2**6, 2**7]\ny = [82.98, 89.53, 90.47, 92.47, 93.7, 96.75, 98.5]\n\n# Plotting\nplt.figure(figsize=(5.0, 2.0))\nplt.plot(x, y, marker='o', linestyle='-', color='blue')\nplt.xlabel('Number of Training Objects')\nplt.ylabel('Coverage Ratio (%)')\nplt.title('Coverage Ratio vs Number of Training Objects')\nplt.grid(True)\nplt.show()\n```"}
{"file": "dataset/ori_500/line_24.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6, 4))\n\n# Set the background color of the plot\nax.set_facecolor('lightblue')\n\n# Create a rectangle for the left side\nrect_left = plt.Rectangle((0, 0), 1, 750, facecolor='lightblue', alpha=0.5)\nax.add_patch(rect_left)\n\n# Create a rectangle for the right side\nrect_right = plt.Rectangle((8, 0), 1, 750, facecolor='lightblue', alpha=0.5)\nax.add_patch(rect_right)\n\n# Create a rectangle for the bottom\nrect_bottom = plt.Rectangle((0, 0), 9, 1, facecolor='lightblue', alpha=0.5)\nax.add_patch(rect_bottom)\n\n# Create a rectangle for the top\nrect_top = plt.Rectangle((0, 750), 9, 1, facecolor='lightblue', alpha=0.5)\nax.add_patch(rect_top)\n\n# Create a rectangle for the middle\nrect_middle = plt.Rectangle((2, 375), 5, 100, facecolor='lightblue', alpha=0.5)\nax.add_patch(rect_middle)\n\n# Create a rectangle for the left side of the middle\nrect_middle_left = plt.Rectangle((0, 375), 2, 100, facecolor='lightblue', alpha=0.5)\nax.add_patch(rect_middle_left)\n\n# Create a rectangle for the right side of the middle\nrect_middle_right = plt.Rectangle((8, 375), 1, 100, facecolor='lightblue', alpha=0.5)\nax.add_patch(rect_middle_right)\n\n# Create a rectangle for the bottom of the middle\nrect_middle_bottom = plt.Rectangle((2, 375), 5, 1, facecolor='lightblue', alpha=0.5)\nax.add_patch(rect_middle_bottom)\n\n# Create a rectangle for the top of the middle\nrect_middle_top = plt.Rectangle((2, 475), 5, 1, facecolor='lightblue', alpha=0.5)\nax.add_patch(rect_middle_top)\n\n# Create a rectangle for the left side of the bottom\nrect_bottom_left = plt.Rectangle((0, 0), 2, 1, facecolor='lightblue', alpha=0.5)\nax.add_patch(rect_bottom_left)\n\n# Create a rectangle for the right side of the bottom\nrect_bottom_right = plt.Rectangle((8, 0), 1, 1, facecolor='lightblue', alpha=0.5)\nax.add_patch(rect_bottom_right)\n\n# Create a rectangle for the bottom of the bottom\nrect_bottom_bottom = plt.Rectangle((2, 0), 5, 1, facecolor='lightblue', alpha=0.5)\nax.add_patch(rect_bottom_bottom)\n\n# Create a rectangle for the top of the bottom\nrect_bottom_top = plt.Rectangle((2, 100), 5, 1, facecolor='lightblue', alpha=0.5)\nax.add_patch(rect_bottom_top)\n\n# Create a rectangle for the left side of the top\nrect_top_left = plt.Rectangle((0, 750), 2, 1, facecolor='lightblue', alpha=0.5)\nax.add_patch(rect_top_left)\n\n# Create a rectangle for the right side of the top\nrect_top_right = plt.Rectangle((8, 750), 1, 1, facecolor='lightblue', alpha=0.5)\nax.add_patch(rect_top_right)\n\n# Create a rectangle for the bottom of the top\nrect_top_bottom = plt.Rectangle((2, 750), 5, 1, facecolor='lightblue', alpha=0.5)\nax.add_patch(rect_top_bottom)\n\n# Create a rectangle for the top of the top\nrect_top_top = plt.Rectangle((2, 650), 5, 1, facecolor='lightblue', alpha=0.5)\nax.add_patch(rect_top_top)\n\n# Create a rectangle for the left side of the middle\nrect_middle_left = plt.Rectangle((0, 375), 2, 100, facecolor='lightblue', alpha=0.5)\nax.add_patch(rect_middle_left)\n\n# Create a rectangle for the right side of the middle\nrect_middle_right = plt.Rectangle((8, 375), 1, 100, facecolor='lightblue', alpha=0.5)\nax.add_patch(rect_middle_right)\n\n# Create a rectangle for the bottom of the middle\nrect_middle_bottom = plt.Rectangle((2, 375), 5, 1, facecolor='lightblue', alpha=0.5)\nax.add_patch(rect_middle_bottom)\n\n# Create a rectangle for the top of the middle\nrect_middle_top = plt.Rectangle((2, 475), 5, 1, facecolor='lightblue', alpha=0.5)\nax.add_patch(rect_middle_top)\n\n# Create a rectangle for the left side of the bottom\nrect_bottom_left = plt.Rectangle((0, 0), 2, 1, facecolor='lightblue', alpha=0.5)\nax.add_patch(rect_bottom_left)\n\n# Create a rectangle for the right side of the bottom\nrect_bottom_right = plt.Rectangle((8, 0), 1, 1, facecolor='lightblue', alpha=0.5)\nax.add_patch(rect_bottom_right)\n\n# Create a rectangle for the bottom of the bottom\nrect_bottom_bottom = plt.Rectangle((2, 0), 5, 1, facecolor='lightblue', alpha=0.5)\nax.add_patch(rect_bottom_bottom)\n\n# Create a rectangle for the top of the bottom\nrect_bottom_top = plt.Rectangle((2, 100), 5, 1, facecolor='lightblue', alpha=0.5)\nax.add_patch(rect_bottom_top)\n\n# Create a rectangle for the left side of the top\nrect_top_left = plt.Rectangle((0, 750), 2, 1, facecolor='lightblue', alpha=0.5)\nax.add_patch(rect_top_left)\n\n# Create a rectangle for the right side of the top\nrect_top_right = plt.Rectangle((8, 750), 1, 1, facecolor='lightblue', alpha=0.5)\nax.add_patch(rect_top_right)\n\n# Create a rectangle for the bottom of the top\nrect_top_bottom = plt.Rectangle((2, 750), 5, 1, facecolor='lightblue', alpha=0.5)\nax.add_patch(rect_top_bottom)\n\n# Create a rectangle for the top of the top\nrect_top_top = plt.Rectangle((2, 650), 5, 1, facecolor='lightblue', alpha=0.5)\nax.add_patch(rect_top_top)\n\n# Create a rectangle for the left side of the middle\nrect_middle_left = plt.Rectangle((0, 375), 2, 100, facecolor='lightblue', alpha=0.5)\nax.add_patch(rect_middle_left)\n\n# Create a rectangle for the right side of the middle\nrect_middle_right = plt.Rectangle((8, 375), 1, 100, facecolor='lightblue', alpha=0.5)\nax.add_patch(rect_middle_right)\n\n# Create a rectangle for the bottom of the middle\nrect_middle_bottom = plt.Rectangle((2, 375), 5, 1, facecolor='lightblue', alpha=0.5)\nax.add_patch(rect_middle_bottom)\n\n# Create a rectangle for the top of the middle\nrect_middle_top = plt.Rectangle((2, 475), 5, 1, facecolor='lightblue', alpha=0.5)\nax.add_patch(rect_middle_top)\n\n# Create a rectangle for the left side of the bottom\nrect_bottom_left = plt.Rectangle((0, 0), 2, 1, facecolor='lightblue', alpha=0.5)\nax.add_patch(rect_bottom_left)\n\n# Create a rectangle for the right side of the bottom\nrect_bottom_right = plt.Rectangle((8, 0), 1, 1, facecolor='lightblue', alpha=0.5)\nax.add_patch(rect_bottom_right)\n\n# Create a rectangle for the bottom of the bottom\nrect_bottom_bottom = plt.Rectangle((2, 0), 5, 1, facecolor='lightblue', alpha=0.5)\nax.add_patch(rect_bottom_bottom)\n\n# Create a rectangle for the top of the bottom\nrect_bottom_top = plt.Rectangle((2, 100), 5, 1, facecolor='lightblue', alpha=0.5)\nax.add_patch(rect_bottom_top)\n\n# Create a rectangle for the left side of the top\nrect_top_left = plt.Rectangle((0, 750), 2, 1, facecolor='lightblue', alpha=0.5)\nax.add_patch(rect_top_left)\n\n# Create a rectangle for the right side of the top\nrect_top_right = plt.Rectangle((8, 750), 1, 1, facecolor='lightblue', alpha=0.5)\nax.add_patch(rect_top_right)\n\n# Create a rectangle for the bottom of the top\nrect_top_bottom = plt.Rectangle((2, 750), 5, 1, facecolor='lightblue', alpha=0.5)\nax.add_patch(rect_top_bottom)\n\n# Create a rectangle for the top of the top\nrect_top_top = plt.Rectangle((2, 650), 5, 1, facecolor='lightblue', alpha=0.5)\nax.add_patch(rect_top_top)\n\n# Create a rectangle for the left side of the middle\nrect_middle_left = plt.Rectangle((0, 375), 2, 100, facecolor='lightblue', alpha=0.5)\nax.add_patch(rect_middle_left)\n\n# Create a rectangle for the right side of the middle\nrect_middle_right = plt.Rectangle((8, 375), 1, 100, facecolor='lightblue', alpha=0.5)\nax.add_patch(rect_middle_right)\n\n# Create a rectangle for the bottom of the middle\nrect_middle_bottom = plt.Rectangle((2, 375), 5, 1, facecolor='lightblue', alpha=0.5)\nax.add_patch(rect_middle_bottom)\n\n# Create a rectangle for the top of the middle\nrect_middle_top = plt.Rectangle((2, 475), 5, 1, facecolor='lightblue', alpha=0.5)\nax.add_patch(rect_middle_top)\n\n# Create a rectangle for the left side of the bottom\nrect_bottom_left = plt.Rectangle((0, 0), 2, 1, facecolor='lightblue', alpha=0.5)\nax.add_patch(rect_bottom_left)\n\n# Create a rectangle for the right side of the bottom\nrect_bottom_right = plt.Rectangle((8, 0), 1, 1, facecolor='lightblue', alpha=0.5)\nax.add_patch(rect_bottom_right)\n\n# Create a rectangle for the bottom of the bottom\nrect_bottom_bottom = plt.Rectangle((2, 0), 5, 1, facecolor='lightblue', alpha=0.5)\nax.add_patch(rect_bottom_bottom)\n\n# Create a rectangle for the top of the bottom\nrect_bottom_top = plt.Rectangle((2, 100), 5, 1, facecolor='lightblue', alpha=0.5)\nax.add_patch(rect_bottom_top)\n\n# Create a rectangle for the left side of the top\nrect_top_left = plt.Rectangle((0, 750), 2, 1, facecolor='lightblue', alpha=0.5)\nax.add_patch(rect_top_left)\n\n# Create a rectangle for the right side of the top\nrect_top_right = plt.Rectangle((8, 750), 1, 1, facecolor='lightblue', alpha=0.5)\nax.add_patch(rect_top_right)\n\n# Create a rectangle for the bottom of the top\nrect_top_bottom = plt.Rectangle((2, 750), 5, 1, facecolor='lightblue', alpha=0.5)\nax.add_patch(rect_top_bottom)\n\n# Create a rectangle for the top of the top\nrect_top_top = plt.Rectangle((2, 650), 5, 1, facecolor='lightblue', alpha=0.5)\nax.add_patch(rect_top_top)\n\n# Create a rectangle for the left side of the middle\nrect_middle_left = plt.Rectangle((0, 375), 2, 100, facecolor='lightblue', alpha=0.5)\nax.add_patch(rect_middle_left)\n\n# Create a rectangle for the right side of the middle\nrect_middle_right = plt.Rectangle((8, 375), 1, 100, facecolor='lightblue', alpha=0.5)\nax.add_patch(rect_middle_right)\n\n# Create a rectangle for the bottom of the middle\nrect_middle_bottom = plt.Rectangle((2, 375), 5, 1, facecolor='lightblue', alpha=0.5)\nax.add_patch(rect_middle_bottom)\n\n# Create a rectangle for the top of the middle\nrect_middle_top = plt.Rectangle((2, 475), 5, 1, facecolor='lightblue', alpha=0.5)\nax.add_patch(rect_middle_top)\n\n# Create a rectangle for the left side of the bottom\nrect_bottom_left = plt.Rectangle((0, 0), 2, 1, facecolor='lightblue', alpha=0.5)\nax.add_patch(rect_bottom_left)\n\n# Create a rectangle for the right side of the bottom\nrect_bottom_right = plt.Rectangle((8, 0), 1, 1, facecolor='lightblue', alpha=0.5)\nax.add_patch(rect_bottom_right)\n\n# Create a rectangle for the bottom of the bottom\nrect_bottom_bottom = plt.Rectangle((2, 0), 5, 1, facecolor='lightblue', alpha=0.5)\nax.add_patch(rect_bottom_bottom)\n\n# Create a rectangle for the top of the bottom\nrect_bottom_top = plt.Rectangle((2, 100), 5, 1, facecolor='lightblue', alpha=0.5)\nax.add_patch(rect_bottom_top)\n\n# Create a rectangle for the left side of the top\nrect_top_left = plt.Rectangle((0, 750), 2, 1, facecolor='lightblue', alpha=0.5)\nax.add_patch(rect_top_left)\n\n# Create a rectangle for the right side of the top\nrect_top_right = plt.Rectangle((8, 750), 1, 1, facecolor='lightblue', alpha=0.5)\nax.add_patch(rect_top_right)\n\n# Create a rectangle for the bottom of the top\nrect_top_bottom = plt.Rectangle((2, 750), 5, 1, facecolor='lightblue', alpha=0.5)\nax.add_patch(rect_top_bottom)\n\n# Create a rectangle for the top of the top\nrect_top_top = plt.Rectangle((2, 650), 5, 1, facecolor='lightblue', alpha=0.5)\nax.add_patch(rect_top_top)\n\n# Create a rectangle for the left side of the middle\nrect_middle_left = plt.Rectangle((0, 375), 2, 100, facecolor='lightblue', alpha=0.5)\nax.add_patch(rect_middle_left)\n\n# Create a rectangle for the right side of the middle\nrect_middle_right = plt.Rectangle((8, 375), 1, 100, facecolor='lightblue', alpha=0.5)\nax.add_patch(rect_middle_right)\n\n# Create a rectangle for the bottom of the middle\nrect_middle_bottom = plt.Rectangle((2, 375), 5, 1, facecolor='lightblue', alpha=0.5)\nax.add_patch(rect_middle_bottom)\n\n# Create a rectangle for the top of the middle\nrect_middle_top = plt.Rectangle((2, 475), 5, 1, facecolor='lightblue', alpha=0.5)\nax.add_patch(rect_middle_top)\n\n# Create a rectangle for the left side of the bottom\nrect_bottom_left = plt.Rectangle((0, 0), 2, 1, facecolor='lightblue', alpha=0.5)\nax.add_patch(rect_bottom_left)\n\n# Create a rectangle for the right side of the bottom\nrect_bottom_right = plt.Rectangle((8, 0), 1, 1, facecolor='lightblue', alpha=0.5)\nax.add_patch(rect_bottom_right)\n\n# Create a rectangle for the bottom of the bottom\nrect_bottom_bottom = plt.Rectangle((2, 0), 5, 1, facecolor='lightblue', alpha=0.5)\nax.add_patch(rect_bottom_bottom)\n\n# Create a rectangle for the top of the bottom\nrect_bottom_top = plt.Rectangle((2, 100), 5, 1, facecolor='lightblue', alpha=0.5)\nax.add_patch(rect_bottom_top)\n\n# Create a rectangle for the left side of the top\nrect_top_left = plt.Rectangle((0, 750), 2, 1, facecolor='lightblue', alpha=0.5)\nax.add_patch(rect_top_left)\n\n# Create a rectangle for the right side of the top\nrect_top_right = plt.Rectangle((8, 750), 1, 1, facecolor='lightblue', alpha=0.5)\nax.add_patch(rect_top_right)\n\n# Create a rectangle for the bottom of the top\nrect_top_bottom = plt.Rectangle((2, 750), 5, 1, facecolor='lightblue', alpha=0.5)\nax.add_patch(rect_top_bottom)\n\n# Create a rectangle for the top of the top\nrect_top_top = plt.Rectangle((2, 650), 5, 1, facecolor='lightblue', alpha=0.5)\nax.add_patch(rect_top_top)\n\n# Create a rectangle for the left side of the middle\nrect_middle_left = plt.Rectangle((0, 375), 2, 100, facecolor='lightblue', alpha=0.5)\nax.add_patch(rect_middle_left)\n\n# Create a rectangle for the right side of the middle\nrect_middle_right = plt.Rectangle((8, 375), 1, 100, facecolor='lightblue', alpha=0.5)\nax.add_patch(rect_middle_right)\n\n# Create a rectangle for the bottom of the middle\nrect_middle_bottom = plt.Rectangle((2, 375), 5, 1, facecolor='lightblue', alpha=0.5)\nax.add_patch(rect_middle_bottom)\n\n# Create a rectangle for the top of the middle\nrect_middle_top = plt.Rectangle((2, 475), 5, 1, facecolor='lightblue', alpha=0.5)\n"}
{"file": "dataset/ori_500/line_25.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data\nax.plot([1, 2, 3, 4, 5, 6, 7, 8], [3.2, 3.1, 3.3, 3.4, 3.5, 3.6, 3.7, 3.8], 'o-', color='pink')\nax.plot([1, 2, 3, 4, 5, 6, 7, 8], [2.2, 2.1, 2.3, 2.4, 2.5, 2.6, 2.7, 2.8], 'o-', color='green')\nax.plot([1, 2, 3, 4, 5, 6, 7, 8], [1.2, 1.1, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8], 'o-', color='blue')\n\n# Set the title and labels\nax.set_title('IQM Human Normalized Score')\nax.set_xlabel('Number of experts')\nax.set_ylabel('DoN')\n\n# Add a legend\nax.legend(['Baseline', 'SoftMoE', 'Top1-MoE'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_26.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Test set TPR | FPR = 10^-4')\n\n# Set the x-axis label\nax.set_xlabel('Vocabulary size')\n\n# Set the y-axis label\nax.set_ylabel('TPR')\n\n# Define the data points\nx = [256, 512, 1024, 2048, 8192, 16384]\ny = [0.2, 0.4, 0.6, 0.8, 0.9, 0.95]\n\n# Plot the data points\nax.plot(x, y, 'b-')\n\n# Add markers at the data points\nfor xi, yi in zip(x, y):\n    ax.plot(xi, yi, 'bo')\n\n# Set the x-ticks\nax.set_xticks([256, 512, 1024, 2048, 8192, 16384])\n\n# Set the y-ticks\nax.set_yticks([0.2, 0.4, 0.6, 0.8, 0.9, 0.95])\n\n# Set the legend\nax.legend(['BPE', 'Wordpunct', 'Whitespaces'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_27.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for CNN\nx_cnn = [1, 12, 18, 30]\ny_cnn = [26.0, 34.4, 30.2, 55.0]\n\n# Data for CIF\nx_cif = [1, 12, 18, 30]\ny_cif = [24.7, 36.8, 28.6, 35.0]\n\n# Data for STAR\nx_star = [1, 12, 18, 30]\ny_star = [17.9, 22.6, 19.8, 36.8]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Plot the data\nax.plot(x_cnn, y_cnn, label='CNN', color='pink')\nax.plot(x_cif, y_cif, label='CIF', color='purple')\nax.plot(x_star, y_star, label='STAR', color='brown')\n\n# Set the title and labels\nax.set_title('Word Error Rate vs Compression Rate')\nax.set_xlabel('Compression Rate (%)')\nax.set_ylabel('Word Error Rate (%)')\n\n# Add grid lines\nax.grid(True)\n\n# Add legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_28.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nx = [25, 50, 75, 100, 125, 150, 175, 200]\ny1 = [0.95, 0.93, 0.92, 0.91, 0.90, 0.89, 0.88, 0.87]\ny2 = [0.94, 0.92, 0.91, 0.90, 0.89, 0.88, 0.87, 0.86]\ny3 = [0.93, 0.91, 0.90, 0.89, 0.88, 0.87, 0.86, 0.85]\n\n# Plot\nfig, ax = plt.subplots(figsize=(6, 4))\nax.plot(x, y1, 'r-', label='PILOTE')\nax.plot(x, y2, 'b-', label='Re-trained model')\nax.plot(x, y3, 'g-', label='Pre-trained model accuracy')\n\n# Markers\nax.plot(25, 0.95, 'ro')\nax.plot(50, 0.93, 'ro')\nax.plot(75, 0.92, 'ro')\nax.plot(100, 0.91, 'ro')\nax.plot(125, 0.90, 'ro')\nax.plot(150, 0.89, 'ro')\nax.plot(175, 0.88, 'ro')\nax.plot(200, 0.87, 'ro')\n\nax.plot(25, 0.94, 'bo')\nax.plot(50, 0.92, 'bo')\nax.plot(75, 0.91, 'bo')\nax.plot(100, 0.90, 'bo')\nax.plot(125, 0.89, 'bo')\nax.plot(150, 0.88, 'bo')\nax.plot(175, 0.87, 'bo')\nax.plot(200, 0.86, 'bo')\n\nax.plot(25, 0.93, 'go')\nax.plot(50, 0.91, 'go')\nax.plot(75, 0.90, 'go')\nax.plot(100, 0.89, 'go')\nax.plot(125, 0.88, 'go')\nax.plot(150, 0.87, 'go')\nax.plot(175, 0.86, 'go')\nax.plot(200, 0.85, 'go')\n\n# Legend\nax.legend()\n\n# Title and labels\nax.set_title('Model Accuracy Over Time')\nax.set_xlabel('Number of exemplars in class \\'Run\\'')\nax.set_ylabel('Avg. accuracy of five rounds')\n\n# Grid\nax.grid(True)\n\n# Save figure\nplt.savefig('model_accuracy.png', dpi=300)\n```"}
{"file": "dataset/ori_500/line_29.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(4.0, 3.0))\n\n# Plot the data\nax.plot([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], [0.1, 0.12, 0.14, 0.16, 0.18, 0.2, 0.22, 0.24, 0.26, 0.28, 0.3, 0.32, 0.34, 0.36, 0.38, 0.4, 0.42, 0.44, 0.46, 0.48, 0.5], color='blue')\nax.plot([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], [0.1, 0.12, 0.14, 0.16, 0.18, 0.2, 0.22, 0.24, 0.26, 0.28, 0.3, 0.32, 0.34, 0.36, 0.38, 0.4, 0.42, 0.44, 0.46, 0.48, 0.5], color='red')\n\n# Set the title and labels\nax.set_title('Average Fidelity Over Steps')\nax.set_xlabel('# of Steps')\nax.set_ylabel('Avg Fidelity')\n\n# Add a legend\nax.legend(['xLLM', 'Single-Pass LLM'])\n\n# Set the y-axis limits\nax.set_ylim(0.1, 0.5)\n\n# Set the x-axis limits\nax.set_xlim(0, 20)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nteams = ['All', 'MLP', 'GCN', 'NCN', 'NEC', 'SEAL', 'Node2Vec']\nhits = [75, 70, 65, 60, 55, 50, 45]\ngoals = [80, 75, 70, 65, 60, 55, 50]\n\n# Plot\nfig, ax = plt.subplots(figsize=(10, 5))\nax.plot(teams, hits, label='Hits')\nax.plot(teams, goals, label='Goals')\n\n# Legend\nlegend_handles = [plt.Line2D([0], [0], marker='o', color='w', label='Team', markerfacecolor='b', markersize=10),\n                 plt.Line2D([0], [0], marker='o', color='w', label='Player', markerfacecolor='r', markersize=10)]\nax.legend(handles=legend_handles)\n\n# Title and labels\nax.set_title('Team Performance')\nax.set_xlabel('Teams')\nax.set_ylabel('Performance')\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_30.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Set the title of the plot\nax.set_title('Android')\n\n# Define the data for the plot\nx = [2, 4, 6, 8, 10, 12]\ny1 = [0.055, 0.055, 0.055, 0.055, 0.055, 0.055]\ny2 = [0.045, 0.045, 0.045, 0.045, 0.045, 0.045]\n\n# Plot the data\nax.plot(x, y1, 'bo-', label='outside-code-diff')\nax.plot(x, y2, 'ro-', label='inside-code-diff')\n\n# Set the x-axis label\nax.set_xlabel('Layer')\n\n# Set the y-axis label\nax.set_ylabel('Value')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_31.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Plot the data\nax.plot([6, 7, 8, 9], [10, 9, 8, 7], 'b-')\nax.plot([6, 7, 8, 9], [9, 8, 7, 6], 'g-')\nax.plot([6, 7, 8, 9], [8, 7, 6, 5], 'r-')\nax.plot([6, 7, 8, 9], [7, 6, 5, 4], 'y-')\nax.plot([6, 7, 8, 9], [6, 5, 4, 3], 'c-')\n\n# Set the title and labels\nax.set_title('Digit Accuracy vs Digit Length')\nax.set_xlabel('Digit Length')\nax.set_ylabel('Digit Accuracy')\n\n# Add markers at the points\nax.plot(6, 10, 'bo')\nax.plot(7, 9, 'go')\nax.plot(8, 8, 'ro')\nax.plot(9, 7, 'yo')\nax.plot(6, 6, 'co')\n\n# Add a legend\nax.legend(['Direct (100 samples)', 'RFFT (100 samples)', 'Scratchpad (100 samples)', 'Red (5000 samples)', 'Orange (1000 samples)'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_32.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('CIFAR100 States Zero Shot Accuracy')\n\n# Set the x-axis label\nax.set_xlabel('Decomposition IO Norm')\n\n# Set the y-axis label\nax.set_ylabel('Accuracy')\n\n# Set the x-ticks\nax.set_xticks([0, 20, 40, 60, 80])\n\n# Set the y-ticks\nax.set_yticks([0.25, 0.3, 0.35, 0.4, 0.45, 0.5])\n\n# Draw horizontal lines\nfor i in range(1, 5):\n    ax.axhline(y=0.25 + 0.05 * i, color='black', linestyle='-')\n\n# Draw vertical lines\nfor i in range(1, 5):\n    ax.axvline(x=20 * i, color='black', linestyle='-')\n\n# Plot the data\nax.plot([0, 20, 40, 60, 80], [0.25, 0.3, 0.35, 0.4, 0.45], 'o-')\n\n# Add a rectangle for the legend\nax.add_patch(plt.Rectangle((75, 0.5), 2, 0.1, color='yellow'))\n\n# Add text for the legend\nax.text(75, 0.55, 'Dictionary', fontsize=12)\nax.text(75, 0.5, 'iaion', fontsize=12, color='orange')\nax.text(75, 0.45, 'CLIP', fontsize=12, color='black')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_33.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nx = [20, 40, 60, 80, 100]\ny1 = [0.55, 0.65, 0.7, 0.75, 0.75]\ny2 = [0.5, 0.6, 0.65, 0.7, 0.75]\ny3 = [0.45, 0.55, 0.6, 0.65, 0.7]\ny4 = [0.4, 0.5, 0.55, 0.6, 0.65]\ny5 = [0.35, 0.45, 0.5, 0.55, 0.6]\n\n# Create the plot\nfig, ax = plt.subplots(figsize=(6, 4))\nax.plot(x, y1, 'r-', label='CNN')\nax.plot(x, y2, 'g-', label='CNN+HMM')\nax.plot(x, y3, 'b-', label='RF')\nax.plot(x, y4, 'c-', label='RF+HMM')\n\n# Add markers\nax.plot(20, 0.55, 'ro')\nax.plot(40, 0.65, 'go')\nax.plot(60, 0.7, 'bo')\nax.plot(80, 0.75, 'co')\nax.plot(100, 0.75, 'mo')\n\n# Set the title and labels\nax.set_title('Performance Metrics')\nax.set_xlabel('No. of Users in Development Set')\nax.set_ylabel('F1')\n\n# Add legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_34.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nx = [2, 3, 4, 5, 6, 7, 8]\ny1 = [27.44, 24.75, 23.38, 22.77, 22.32, 21.47, 21.51]\ny2 = [6.74, 4.54, 3.96, 3.71, 3.49, 3.34, 3.34]\n\n# Plot\nfig, ax1 = plt.subplots(figsize=(8.0, 7.0))\n\ncolor = 'tab:blue'\nax1.set_xlabel('Number of microphones')\nax1.set_ylabel('WER (%)', color=color)\nax1.plot(x, y1, color=color)\nax1.tick_params(axis='y', labelcolor=color)\n\nax2 = ax1.twinx()  # instantiate a second axes that shares the same x-axis\n\ncolor = 'tab:orange'\nax2.set_ylabel('AMI WER (%)', color=color)  # we already handled the x-label with ax1\nax2.plot(x, y2, color=color)\nax2.tick_params(axis='y', labelcolor=color)\n\nfig.tight_layout()  # otherwise the right y-label is slightly clipped\nplt.show()\n```"}
{"file": "dataset/ori_500/line_35.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the plot\nx = [10**-7, 10**-6, 10**-5, 10**-4]\ny = [1, 2, 3, 4]\n\n# Create the plot\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\nax.plot(x, y, 'bo-')\n\n# Add the title and labels\nax.set_title('Quantization error')\nax.set_xlabel('Quantization level')\nax.set_ylabel('Quantization error')\n\n# Add the rectangles\nfor i in range(len(x)):\n    ax.add_patch(plt.Rectangle((x[i]-0.1, y[i]-0.1), 0.2, 0.2, color='red'))\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_36.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(15, 5))\n\n# Define the data\nx = np.linspace(0.1, 1.0, 100)\ny1 = np.sin(x)\ny2 = np.cos(x)\n\n# Plot the data\nax.plot(x, y1, label='SPMotif-0.5')\nax.plot(x, y2, label='SPMotif-0.7')\n\n# Add a legend\nax.legend()\n\n# Set the title\nax.set_title('SPMotif-0.5')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_37.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6, 5))\n\n# Set the x-axis limits\nax.set_xlim(6, 30)\n\n# Set the y-axis limits\nax.set_ylim(74.5, 78)\n\n# Set the x-axis ticks\nax.set_xticks(range(6, 31, 2))\n\n# Set the y-axis ticks\nax.set_yticks(range(75, 79))\n\n# Set the x-axis label\nax.set_xlabel('Ensemble Size')\n\n# Set the y-axis label\nax.set_ylabel('Accuracy')\n\n# Set the title\nax.set_title('Model Accuracy vs Ensemble Size')\n\n# Draw a rectangle\nrect = plt.Rectangle((6, 74.5), 24, 3.5, color='lightblue', alpha=0.5)\nax.add_patch(rect)\n\n# Draw a line\nline = plt.Line2D([6, 30], [74.5, 74.5], color='blue')\nax.add_line(line)\n\n# Draw a rectangle\nrect = plt.Rectangle((6, 75.5), 24, 2, color='lightblue', alpha=0.5)\nax.add_patch(rect)\n\n# Draw a line\nline = plt.Line2D([6, 30], [75.5, 75.5], color='blue')\nax.add_line(line)\n\n# Draw a rectangle\nrect = plt.Rectangle((6, 76.5), 24, 1, color='lightblue', alpha=0.5)\nax.add_patch(rect)\n\n# Draw a line\nline = plt.Line2D([6, 30], [76.5, 76.5], color='blue')\nax.add_line(line)\n\n# Draw a rectangle\nrect = plt.Rectangle((6, 77.5), 24, 0.5, color='lightblue', alpha=0.5)\nax.add_patch(rect)\n\n# Draw a line\nline = plt.Line2D([6, 30], [77.5, 77.5], color='blue')\nax.add_line(line)\n\n# Draw a rectangle\nrect = plt.Rectangle((6, 78.0), 24, 0.5, color='lightblue', alpha=0.5)\nax.add_patch(rect)\n\n# Draw a line\nline = plt.Line2D([6, 30], [78.0, 78.0], color='blue')\nax.add_line(line)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_38.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nepochs = [3, 5, 10, 30, 70, 100]\ngpt_neo = [0.8, 0.7, 0.6, 0.5, 0.4, 0.3]\ngpt_5 = [0.7, 0.6, 0.5, 0.4, 0.3, 0.2]\ngpt_10 = [0.6, 0.5, 0.4, 0.3, 0.2, 0.1]\ngpt_30 = [0.5, 0.4, 0.3, 0.2, 0.1, 0.0]\n\n# Plot\nfig, ax = plt.subplots(figsize=(6.0, 3.0))\nax.plot(epochs, gpt_neo, 'r-', label='GPT-Neo')\nax.plot(epochs, gpt_5, 'y-', label='5')\nax.plot(epochs, gpt_10, 'b-', label='10')\nax.plot(epochs, gpt_30, 'g-', label='30')\n\n# Legend\nlegend = ax.legend(loc='upper center', shadow=True, fontsize='x-large')\n\n# Title and labels\nax.set_title('GPT-Neo Performance Over Time')\nax.set_xlabel('# Epochs')\nax.set_ylabel('MA')\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_39.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nx = [96, 192, 336, 512, 720]\ny1 = [0.12, 0.14, 0.16, 0.18, 0.20]\ny2 = [0.10, 0.12, 0.14, 0.16, 0.18]\ny3 = [0.08, 0.10, 0.12, 0.14, 0.16]\ny4 = [0.06, 0.08, 0.10, 0.12, 0.14]\ny5 = [0.04, 0.06, 0.08, 0.10, 0.12]\ny6 = [0.02, 0.04, 0.06, 0.08, 0.10]\n\n# Plot\nfig, ax = plt.subplots(figsize=(15, 4))\nax.plot(x, y1, 'r-', label='Traffic')\nax.plot(x, y2, 'o-', label='ETMm2')\nax.plot(x, y3, 'g-', label='ETTh2')\nax.plot(x, y4, 'b-', label='ECL')\nax.plot(x, y5, 'm-', label='MSE')\nax.plot(x, y6, 'c-', label='MSF')\n\n# Legend\nax.legend()\n\n# Labels\nax.set_xlabel('pred_length')\nax.set_ylabel('mse')\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for Serial\nserial_x = [224, 128, 64, 32]\nserial_y = [70, 65, 60, 55]\n\n# Data for Parallel\nparallel_x = [224, 128, 64, 32]\nparallel_y = [80, 75, 70, 65]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(9, 4))\n\n# Plot the data\nax.plot(serial_x, serial_y, label='Serial (n=8, m=1)', color='orange')\nax.plot(parallel_x, parallel_y, label='Parallel (n=2, m=4)', color='blue')\n\n# Add labels and title\nax.set_xlabel('Time (s)')\nax.set_ylabel('Top-1 Acc.')\nax.set_title('Top-1 Accuracy over Time')\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_40.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Classification Accuracy (%)')\n\n# Set the x-axis label\nax.set_xlabel('SNR')\n\n# Set the y-axis label\nax.set_ylabel('Accuracy (%)')\n\n# Set the x-axis ticks\nax.set_xticks([5, 7.5, 10, 12.5, 15, 17.5, 20, 22.5, 25])\n\n# Set the y-axis ticks\nax.set_yticks([20, 40, 60, 80, 100])\n\n# Set the x-axis tick labels\nax.set_xticklabels(['5.0', '7.5', '10.0', '12.5', '15.0', '17.5', '20.0', '22.5', '25.0'])\n\n# Set the y-axis tick labels\nax.set_yticklabels(['20', '40', '60', '80', '100'])\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the background\nax.set_facecolor('#f0f0f0')\n\n# Set the color of the text\nax.set_color_cycle(['blue', 'green', 'orange', 'red'])\n\n# Draw rectangles\nrectangles = [\n    [5, 90, 10, 10],\n    [10, 80, 10, 10],\n    [15, 70, 10, 10],\n    [20, 60, 10, 10],\n    [25, 50, 10, 10]\n]\n\nfor rect in rectangles:\n    ax.add_patch(plt.Rectangle((rect[0], rect[1]), rect[2], rect[3], color='red'))\n\n# Draw lines\nlines = [\n    [5, 90, 25, 90],\n    [10, 80, 25, 80],\n    [15, 70, 25, 70],\n    [20, 60, 25, 60],\n    [25, 50, 25, 50]\n]\n\nfor line in lines:\n    ax.plot([line[0], line[2]], [line[1], line[3]], color='red')\n\n# Draw circles\ncircles = [\n    [5, 90],\n    [10, 80],\n    [15, 70],\n    [20, 60],\n    [25, 50]\n]\n\nfor circle in circles:\n    ax.add_patch(plt.Circle((circle[0], circle[1]), 5, color='red'))\n\n# Draw triangles\ntriangles = [\n    [5, 90],\n    [10, 80],\n    [15, 70],\n    [20, 60],\n    [25, 50]\n]\n\nfor triangle in triangles:\n    ax.add_patch(plt.Polygon([[triangle[0], triangle[1]], [triangle[0] - 5, triangle[1] - 5], [triangle[0] + 5, triangle[1] - 5]], color='red'))\n\n# Draw rectangles with different colors\nrectangles = [\n    [5, 90, 10, 10],\n    [10, 80, 10, 10],\n    [15, 70, 10, 10],\n    [20, 60, 10, 10],\n    [25, 50, 10, 10]\n]\n\nfor rect in rectangles:\n    ax.add_patch(plt.Rectangle((rect[0], rect[1]), rect[2], rect[3], color='blue'))\n\n# Draw lines with different colors\nlines = [\n    [5, 90, 25, 90],\n    [10, 80, 25, 80],\n    [15, 70, 25, 70],\n    [20, 60, 25, 60],\n    [25, 50, 25, 50]\n]\n\nfor line in lines:\n    ax.plot([line[0], line[2]], [line[1], line[3]], color='blue')\n\n# Draw circles with different colors\ncircles = [\n    [5, 90],\n    [10, 80],\n    [15, 70],\n    [20, 60],\n    [25, 50]\n]\n\nfor circle in circles:\n    ax.add_patch(plt.Circle((circle[0], circle[1]), 5, color='blue'))\n\n# Draw triangles with different colors\ntriangles = [\n    [5, 90],\n    [10, 80],\n    [15, 70],\n    [20, 60],\n    [25, 50]\n]\n\nfor triangle in triangles:\n    ax.add_patch(plt.Polygon([[triangle[0], triangle[1]], [triangle[0] - 5, triangle[1] - 5], [triangle[0] + 5, triangle[1] - 5]], color='blue'))\n\n# Draw rectangles with different colors\nrectangles = [\n    [5, 90, 10, 10],\n    [10, 80, 10, 10],\n    [15, 70, 10, 10],\n    [20, 60, 10, 10],\n    [25, 50, 10, 10]\n]\n\nfor rect in rectangles:\n    ax.add_patch(plt.Rectangle((rect[0], rect[1]), rect[2], rect[3], color='green'))\n\n# Draw lines with different colors\nlines = [\n    [5, 90, 25, 90],\n    [10, 80, 25, 80],\n    [15, 70, 25, 70],\n    [20, 60, 25, 60],\n    [25, 50, 25, 50]\n]\n\nfor line in lines:\n    ax.plot([line[0], line[2]], [line[1], line[3]], color='green')\n\n# Draw circles with different colors\ncircles = [\n    [5, 90],\n    [10, 80],\n    [15, 70],\n    [20, 60],\n    [25, 50]\n]\n\nfor circle in circles:\n    ax.add_patch(plt.Circle((circle[0], circle[1]), 5, color='green'))\n\n# Draw triangles with different colors\ntriangles = [\n    [5, 90],\n    [10, 80],\n    [15, 70],\n    [20, 60],\n    [25, 50]\n]\n\nfor triangle in triangles:\n    ax.add_patch(plt.Polygon([[triangle[0], triangle[1]], [triangle[0] - 5, triangle[1] - 5], [triangle[0] + 5, triangle[1] - 5]], color='green'))\n\n# Draw rectangles with different colors\nrectangles = [\n    [5, 90, 10, 10],\n    [10, 80, 10, 10],\n    [15, 70, 10, 10],\n    [20, 60, 10, 10],\n    [25, 50, 10, 10]\n]\n\nfor rect in rectangles:\n    ax.add_patch(plt.Rectangle((rect[0], rect[1]), rect[2], rect[3], color='orange'))\n\n# Draw lines with different colors\nlines = [\n    [5, 90, 25, 90],\n    [10, 80, 25, 80],\n    [15, 70, 25, 70],\n    [20, 60, 25, 60],\n    [25, 50, 25, 50]\n]\n\nfor line in lines:\n    ax.plot([line[0], line[2]], [line[1], line[3]], color='orange')\n\n# Draw circles with different colors\ncircles = [\n    [5, 90],\n    [10, 80],\n    [15, 70],\n    [20, 60],\n    [25, 50]\n]\n\nfor circle in circles:\n    ax.add_patch(plt.Circle((circle[0], circle[1]), 5, color='orange'))\n\n# Draw triangles with different colors\ntriangles = [\n    [5, 90],\n    [10, 80],\n    [15, 70],\n    [20, 60],\n    [25, 50]\n]\n\nfor triangle in triangles:\n    ax.add_patch(plt.Polygon([[triangle[0], triangle[1]], [triangle[0] - 5, triangle[1] - 5], [triangle[0] + 5, triangle[1] - 5]], color='orange'))\n\n# Draw rectangles with different colors\nrectangles = [\n    [5, 90, 10, 10],\n    [10, 80, 10, 10],\n    [15, 70, 10, 10],\n    [20, 60, 10, 10],\n    [25, 50, 10, 10]\n]\n\nfor rect in rectangles:\n    ax.add_patch(plt.Rectangle((rect[0], rect[1]), rect[2], rect[3], color='red'))\n\n# Draw lines with different colors\nlines = [\n    [5, 90, 25, 90],\n    [10, 80, 25, 80],\n    [15, 70, 25, 70],\n    [20, 60, 25, 60],\n    [25, 50, 25, 50]\n]\n\nfor line in lines:\n    ax.plot([line[0], line[2]], [line[1], line[3]], color='red')\n\n# Draw circles with different colors\ncircles = [\n    [5, 90],\n    [10, 80],\n    [15, 70],\n    [20, 60],\n    [25, 50]\n]\n\nfor circle in circles:\n    ax.add_patch(plt.Circle((circle[0], circle[1]), 5, color='red'))\n\n# Draw triangles with different colors\ntriangles = [\n    [5, 90],\n    [10, 80],\n    [15, 70],\n    [20, 60],\n    [25, 50]\n]\n\nfor triangle in triangles:\n    ax.add_patch(plt.Polygon([[triangle[0], triangle[1]], [triangle[0] - 5, triangle[1] - 5], [triangle[0] + 5, triangle[1] - 5]], color='red')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_41.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(6.0, 8.0))\n\n# Plot the first line graph\nax.plot([0, 25, 50, 75, 100, 125, 150, 175, 200], [1, 2, 3, 4, 3, 2, 1, 2, 3], color='purple', label='Line 1 (Sinusoidal)')\nax.plot([0, 25, 50, 75, 100, 125, 150, 175, 200], [1, 2, 3, 4, 3, 2, 1, 2, 3], 'o-', color='purple')\n\n# Plot the second line graph\nax.plot([0, 25, 50, 75, 100, 125, 150, 175, 200], [1, 2, 3, 4, 3, 2, 1, 2, 3], color='blue', label='Line 2 (Quadratic)')\nax.plot([0, 25, 50, 75, 100, 125, 150, 175, 200], [1, 2, 3, 4, 3, 2, 1, 2, 3], 'o-', color='blue')\n\n# Plot the third line graph\nax.plot([0, 25, 50, 75, 100, 125, 150, 175, 200], [1, 2, 3, 4, 3, 2, 1, 2, 3], color='green', label='Line 3 (Random Noise)')\nax.plot([0, 25, 50, 75, 100, 125, 150, 175, 200], [1, 2, 3, 4, 3, 2, 1, 2, 3], 'o-', color='green')\n\n# Plot the fourth line graph\nax.plot([0, 25, 50, 75, 100, 125, 150, 175, 200], [1, 2, 3, 4, 3, 2, 1, 2, 3], color='red', label='Line 4 (Exponential Focus)')\nax.plot([0, 25, 50, 75, 100, 125, 150, 175, 200], [1, 2, 3, 4, 3, 2, 1, 2, 3], 'o-', color='red')\n\n# Set the title and labels\nax.set_title('Performance Value')\nax.set_xlabel('Gradient Steps (x 62.5K)')\nax.set_ylabel('Performance Value')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_42.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for Line 1\nx1 = [0, 50, 100, 150, 200]\ny1 = [0.1, 0.8, 1.2, 1.5, 1.3]\n\n# Data for Line 2\nx2 = [0, 50, 100, 150, 200]\ny2 = [0.1, 0.8, 1.2, 1.5, 1.3]\n\n# Data for Line 3\nx3 = [0, 50, 100, 150, 200]\ny3 = [0.1, 0.8, 1.2, 1.5, 1.3]\n\n# Plotting\nfig, ax = plt.subplots(1, 2, figsize=(10, 5))\n\n# Left subplot\nax[0].plot(x1, y1, 'o-', color='orange', label='Line 1')\nax[0].plot(x2, y2, 's-', color='blue', label='Line 2')\nax[0].set_xlabel('Gradient Steps (x 62.5K)')\nax[0].set_ylabel('Polynomial Value')\nax[0].legend()\n\n# Right subplot\nax[1].plot(x3, y3, 'o-', color='green', label='Line 3')\nax[1].plot(x3, y3, 's-', color='purple', label='Polynomial Trend (from Line 2)')\nax[1].set_xlabel('Gradient Steps (x 62.5K)')\nax[1].set_ylabel('Polynomial Value')\nax[1].legend()\n\nplt.show()\n```"}
{"file": "dataset/ori_500/line_43.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(12, 5))\n\n# Define the data\nx = ['All', 'MLP', 'GCN', 'NCN', 'Node2Vec']\ny1 = [70, 75, 80, 75, 70]\ny2 = [65, 70, 75, 70, 65]\n\n# Plot the data\nax.plot(x, y1, label='ogbl-collab Results')\nax.plot(x, y2, label='ogbl-ppa Results')\n\n# Add labels and title\nax.set_xlabel('Metrics')\nax.set_ylabel('Values')\nax.set_title('ogbl-collab Results')\n\n# Add legend\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_44.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Set the grid\nax.grid(True)\n\n# Set the x-axis limits\nax.set_xlim(10, 60)\n\n# Set the y-axis limits\nax.set_ylim(10**-12, 10**-4)\n\n# Set the x-axis ticks\nax.set_xticks([10, 20, 30, 40, 50, 60])\n\n# Set the y-axis ticks\nax.set_yticks([10**-12, 10**-10, 10**-8, 10**-6, 10**-4, 10**-2])\n\n# Set the x-axis label\nax.set_xlabel('N')\n\n# Set the y-axis label\nax.set_ylabel('Precision')\n\n# Set the title\nax.set_title('Precision vs N')\n\n# Plot the lines\nax.plot([10, 20, 30, 40, 50, 60], [10**-10, 10**-10, 10**-10, 10**-10, 10**-10, 10**-10], 'b-')\nax.plot([10, 20, 30, 40, 50, 60], [10**-10, 10**-10, 10**-10, 10**-10, 10**-10, 10**-10], 'g-')\nax.plot([10, 20, 30, 40, 50, 60], [10**-10, 10**-10, 10**-10, 10**-10, 10**-10, 10**-10], 'r-')\nax.plot([10, 20, 30, 40, 50, 60], [10**-10, 10**-10, 10**-10, 10**-10, 10**-10, 10**-10], 'm-')\n\n# Add markers\nax.plot(10, 10**-10, 'ro')\nax.plot(20, 10**-10, 'go')\nax.plot(30, 10**-10, 'bo')\nax.plot(40, 10**-10, 'mo')\nax.plot(50, 10**-10, 'co')\nax.plot(60, 10**-10, 'yo')\n\n# Add legends\nax.legend(['Standard', 'Constrained', 'Experimental', 'Hypothetical'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_45.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(12, 8))\n\n# Set the title of the graph\nax.set_title('Graph Variation 1')\n\n# Set the x-axis label\nax.set_xlabel('N')\n\n# Set the y-axis label\nax.set_ylabel('Peak Performance')\n\n# Set the x-axis limits\nax.set_xlim(1, 6)\n\n# Set the y-axis limits\nax.set_ylim(10**-4, 10**10)\n\n# Plot the data\nax.plot([1, 2, 3, 4, 5, 6], [10**-2, 10**-2, 10**-2, 10**-2, 10**-2, 10**-2], 'b-')\nax.plot([1, 2, 3, 4, 5, 6], [10**-3, 10**-3, 10**-3, 10**-3, 10**-3, 10**-3], 'r-')\nax.plot([1, 2, 3, 4, 5, 6], [10**-4, 10**-4, 10**-4, 10**-4, 10**-4, 10**-4], 'g-')\nax.plot([1, 2, 3, 4, 5, 6], [10**-5, 10**-5, 10**-5, 10**-5, 10**-5, 10**-5], 'y-')\nax.plot([1, 2, 3, 4, 5, 6], [10**-6, 10**-6, 10**-6, 10**-6, 10**-6, 10**-6], 'm-')\n\n# Add a legend\nax.legend(['Standard', 'Constrained', 'Innovative', 'Experimental'])\n\n# Add a grid\nax.grid(True)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_46.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfig, axes = plt.subplots(2, 1, figsize=(6.0, 10.0))\n\n# Daytime Activity Monitoring\nx = np.arange(0, 26)\ny = np.sin(x / 5)\naxes[0].plot(x, y, 'b-')\naxes[0].set_title('Daytime Activity Monitoring')\naxes[0].set_xlabel('Time (Hours)')\naxes[0].set_ylabel('Activity Level')\naxes[0].legend(['Standard Activity'])\n\n# Nighttime Activity Monitoring\nx = np.arange(0, 26)\ny = np.sin(x / 5)\naxes[1].plot(x, y, 'r-')\naxes[1].set_title('Nighttime Activity Monitoring')\naxes[1].set_xlabel('Time (Hours)')\naxes[1].set_ylabel('Activity Level')\naxes[1].legend(['Innovative Activity'])\n\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_47.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Define the time range\ntime = np.arange(0, 13)\n\n# Define the performance index values\nperformance_index = np.array([0.2, 0.4, 0.6, 0.8, 1.0, 0.8, 0.6, 0.4, 0.2, 0.4, 0.6, 0.8, 1.0])\n\n# Plot the performance index\nax.plot(time, performance_index, color='blue')\n\n# Define the shaded regions for different performance types\nax.fill_between(time, 0.5, 1.0, where=(time >= 0) & (time <= 5), color='lightblue')\nax.fill_between(time, 0.5, 1.0, where=(time >= 6) & (time <= 11), color='pink')\n\n# Add a legend\nax.legend(['Performance Index'])\n\n# Set the title\nax.set_title('Comparative Performance Analysis Over Time')\n\n# Set the x-axis label\nax.set_xlabel('Time (Months)')\n\n# Set the y-axis label\nax.set_ylabel('Performance Index')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_48.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Set the title of the plot\nax.set_title('Sales and Temperature Correlation Over a Year')\n\n# Set the x-axis label\nax.set_xlabel('Month')\n\n# Set the y-axis label\nax.set_ylabel('Temperature (\u00b0C)')\n\n# Set the x-ticks\nax.set_xticks([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n\n# Set the y-ticks\nax.set_yticks(range(800, 1600, 100))\n\n# Set the x-tick labels\nax.set_xticklabels(['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12'])\n\n# Set the y-tick labels\nax.set_yticklabels(range(800, 1600, 100))\n\n# Draw a line graph\nax.plot([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [1000, 1100, 1200, 1300, 1400, 1500, 1600, 1500, 1400, 1300, 1200, 1100], color='blue')\n\n# Draw a scatter plot\nax.scatter([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [1000, 1100, 1200, 1300, 1400, 1500, 1600, 1500, 1400, 1300, 1200, 1100], color='red')\n\n# Draw a line graph\nax.plot([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [1000, 1100, 1200, 1300, 1400, 1500, 1600, 1500, 1400, 1300, 1200, 1100], color='red')\n\n# Draw a scatter plot\nax.scatter([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [1000, 1100, 1200, 1300, 1400, 1500, 1600, 1500, 1400, 1300, 1200, 1100], color='red')\n\n# Draw a line graph\nax.plot([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [1000, 1100, 1200, 1300, 1400, 1500, 1600, 1500, 1400, 1300, 1200, 1100], color='red')\n\n# Draw a scatter plot\nax.scatter([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [1000, 1100, 1200, 1300, 1400, 1500, 1600, 1500, 1400, 1300, 1200, 1100], color='red')\n\n# Draw a line graph\nax.plot([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [1000, 1100, 1200, 1300, 1400, 1500, 1600, 1500, 1400, 1300, 1200, 1100], color='red')\n\n# Draw a scatter plot\nax.scatter([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [1000, 1100, 1200, 1300, 1400, 1500, 1600, 1500, 1400, 1300, 1200, 1100], color='red')\n\n# Draw a line graph\nax.plot([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [1000, 1100, 1200, 1300, 1400, 1500, 1600, 1500, 1400, 1300, 1200, 1100], color='red')\n\n# Draw a scatter plot\nax.scatter([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [1000, 1100, 1200, 1300, 1400, 1500, 1600, 1500, 1400, 1300, 1200, 1100], color='red')\n\n# Draw a line graph\nax.plot([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [1000, 1100, 1200, 1300, 1400, 1500, 1600, 1500, 1400, 1300, 1200, 1100], color='red')\n\n# Draw a scatter plot\nax.scatter([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [1000, 1100, 1200, 1300, 1400, 1500, 1600, 1500, 1400, 1300, 1200, 1100], color='red')\n\n# Draw a line graph\nax.plot([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [1000, 1100, 1200, 1300, 1400, 1500, 1600, 1500, 1400, 1300, 1200, 1100], color='red')\n\n# Draw a scatter plot\nax.scatter([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [1000, 1100, 1200, 1300, 1400, 1500, 1600, 1500, 1400, 1300, 1200, 1100], color='red')\n\n# Draw a line graph\nax.plot([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [1000, 1100, 1200, 1300, 1400, 1500, 1600, 1500, 1400, 1300, 1200, 1100], color='red')\n\n# Draw a scatter plot\nax.scatter([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [1000, 1100, 1200, 1300, 1400, 1500, 1600, 1500, 1400, 1300, 1200, 1100], color='red')\n\n# Draw a line graph\nax.plot([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [1000, 1100, 1200, 1300, 1400, 1500, 1600, 1500, 1400, 1300, 1200, 1100], color='red')\n\n# Draw a scatter plot\nax.scatter([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [1000, 1100, 1200, 1300, 1400, 1500, 1600, 1500, 1400, 1300, 1200, 1100], color='red')\n\n# Draw a line graph\nax.plot([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [1000, 1100, 1200, 1300, 1400, 1500, 1600, 1500, 1400, 1300, 1200, 1100], color='red')\n\n# Draw a scatter plot\nax.scatter([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [1000, 1100, 1200, 1300, 1400, 1500, 1600, 1500, 1400, 1300, 1200, 1100], color='red')\n\n# Draw a line graph\nax.plot([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [1000, 1100, 1200, 1300, 1400, 1500, 1600, 1500, 1400, 1300, 1200, 1100], color='red')\n\n# Draw a scatter plot\nax.scatter([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [1000, 1100, 1200, 1300, 1400, 1500, 1600, 1500, 1400, 1300, 1200, 1100], color='red')\n\n# Draw a line graph\nax.plot([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [1000, 1100, 1200, 1300, 1400, 1500, 1600, 1500, 1400, 1300, 1200, 1100], color='red')\n\n# Draw a scatter plot\nax.scatter([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [1000, 1100, 1200, 1300, 1400, 1500, 1600, 1500, 1400, 1300, 1200, 1100], color='red')\n\n# Draw a line graph\nax.plot([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [1000, 1100, 1200, 1300, 1400, 1500, 1600, 1500, 1400, 1300, 1200, 1100], color='red')\n\n# Draw a scatter plot\nax.scatter([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [1000, 1100, 1200, 1300, 1400, 1500, 1600, 1500, 1400, 1300, 1200, 1100], color='red')\n\n# Draw a line graph\nax.plot([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [1000, 1100, 1200, 1300, 1400, 1500, 1600, 1500, 1400, 1300, 1200, 1100], color='red')\n\n# Draw a scatter plot\nax.scatter([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [1000, 1100, 1200, 1300, 1400, 1500, 1600, 1500, 1400, 1300, 1200, 1100], color='red')\n\n# Draw a line graph\nax.plot([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [1000, 1100, 1200, 1300, 1400, 1500, 1600, 1500, 1400, 1300, 1200, 1100], color='red')\n\n# Draw a scatter plot\nax.scatter([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [1000, 1100, 1200, 1300, 1400, 1500, 1600, 1500, 1400, 1300, 1200, 1100], color='red')\n\n# Draw a line graph\nax.plot([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [1000, 1100, 1200, 1300, 1400, 1500, 1600, 1500, 1400, 1300, 1200, 1100], color='red')\n\n# Draw a scatter plot\nax.scatter([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11"}
{"file": "dataset/ori_500/line_49.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(6.0, 9.0))\n\n# Set the title of the plot\nax.set_title('Exponential Growth Over Time')\n\n# Set the x-axis label\nax.set_xlabel('Time')\n\n# Set the y-axis label\nax.set_ylabel('Value')\n\n# Set the x-axis limits\nax.set_xlim(0, 10)\n\n# Set the y-axis limits\nax.set_ylim(-2, 14)\n\n# Draw a rectangle with a green border\nax.add_patch(plt.Rectangle((0, 0), 10, 13, color='green', edgecolor='black'))\n\n# Draw a rectangle with a red border\nax.add_patch(plt.Rectangle((0, 0), 10, 13, color='red', edgecolor='black'))\n\n# Draw a rectangle with a blue border\nax.add_patch(plt.Rectangle((0, 0), 10, 13, color='blue', edgecolor='black'))\n\n# Draw a rectangle with a black border\nax.add_patch(plt.Rectangle((0, 0), 10, 13, color='black', edgecolor='black'))\n\n# Draw a rectangle with a brown border\nax.add_patch(plt.Rectangle((0, 0), 10, 13, color='brown', edgecolor='black'))\n\n# Draw a rectangle with a purple border\nax.add_patch(plt.Rectangle((0, 0), 10, 13, color='purple', edgecolor='black'))\n\n# Draw a rectangle with a pink border\nax.add_patch(plt.Rectangle((0, 0), 10, 13, color='pink', edgecolor='black'))\n\n# Draw a rectangle with a gray border\nax.add_patch(plt.Rectangle((0, 0), 10, 13, color='gray', edgecolor='black'))\n\n# Draw a rectangle with a silver border\nax.add_patch(plt.Rectangle((0, 0), 10, 13, color='silver', edgecolor='black'))\n\n# Draw a rectangle with a gold border\nax.add_patch(plt.Rectangle((0, 0), 10, 13, color='gold', edgecolor='black'))\n\n# Draw a rectangle with a olive border\nax.add_patch(plt.Rectangle((0, 0), 10, 13, color='olive', edgecolor='black'))\n\n# Draw a rectangle with a navy border\nax.add_patch(plt.Rectangle((0, 0), 10, 13, color='navy', edgecolor='black'))\n\n# Draw a rectangle with a maroon border\nax.add_patch(plt.Rectangle((0, 0), 10, 13, color='maroon', edgecolor='black'))\n\n# Draw a rectangle with a teal border\nax.add_patch(plt.Rectangle((0, 0), 10, 13, color='teal', edgecolor='black'))\n\n# Draw a rectangle with a lime border\nax.add_patch(plt.Rectangle((0, 0), 10, 13, color='lime', edgecolor='black'))\n\n# Draw a rectangle with a cyan border\nax.add_patch(plt.Rectangle((0, 0), 10, 13, color='cyan', edgecolor='black'))\n\n# Draw a rectangle with a magenta border\nax.add_patch(plt.Rectangle((0, 0), 10, 13, color='magenta', edgecolor='black'))\n\n# Draw a rectangle with a white border\nax.add_patch(plt.Rectangle((0, 0), 10, 13, color='white', edgecolor='black'))\n\n# Draw a rectangle with a black border\nax.add_patch(plt.Rectangle((0, 0), 10, 13, color='black', edgecolor='black'))\n\n# Draw a rectangle with a brown border\nax.add_patch(plt.Rectangle((0, 0), 10, 13, color='brown', edgecolor='black'))\n\n# Draw a rectangle with a purple border\nax.add_patch(plt.Rectangle((0, 0), 10, 13, color='purple', edgecolor='black'))\n\n# Draw a rectangle with a pink border\nax.add_patch(plt.Rectangle((0, 0), 10, 13, color='pink', edgecolor='black'))\n\n# Draw a rectangle with a gray border\nax.add_patch(plt.Rectangle((0, 0), 10, 13, color='gray', edgecolor='black'))\n\n# Draw a rectangle with a silver border\nax.add_patch(plt.Rectangle((0, 0), 10, 13, color='silver', edgecolor='black'))\n\n# Draw a rectangle with a gold border\nax.add_patch(plt.Rectangle((0, 0), 10, 13, color='gold', edgecolor='black'))\n\n# Draw a rectangle with a olive border\nax.add_patch(plt.Rectangle((0, 0), 10, 13, color='olive', edgecolor='black'))\n\n# Draw a rectangle with a navy border\nax.add_patch(plt.Rectangle((0, 0), 10, 13, color='navy', edgecolor='black'))\n\n# Draw a rectangle with a maroon border\nax.add_patch(plt.Rectangle((0, 0), 10, 13, color='maroon', edgecolor='black'))\n\n# Draw a rectangle with a teal border\nax.add_patch(plt.Rectangle((0, 0), 10, 13, color='teal', edgecolor='black'))\n\n# Draw a rectangle with a lime border\nax.add_patch(plt.Rectangle((0, 0), 10, 13, color='lime', edgecolor='black'))\n\n# Draw a rectangle with a cyan border\nax.add_patch(plt.Rectangle((0, 0), 10, 13, color='cyan', edgecolor='black'))\n\n# Draw a rectangle with a magenta border\nax.add_patch(plt.Rectangle((0, 0), 10, 13, color='magenta', edgecolor='black'))\n\n# Draw a rectangle with a white border\nax.add_patch(plt.Rectangle((0, 0), 10, 13, color='white', edgecolor='black'))\n\n# Draw a rectangle with a black border\nax.add_patch(plt.Rectangle((0, 0), 10, 13, color='black', edgecolor='black'))\n\n# Draw a rectangle with a brown border\nax.add_patch(plt.Rectangle((0, 0), 10, 13, color='brown', edgecolor='black'))\n\n# Draw a rectangle with a purple border\nax.add_patch(plt.Rectangle((0, 0), 10, 13, color='purple', edgecolor='black'))\n\n# Draw a rectangle with a pink border\nax.add_patch(plt.Rectangle((0, 0), 10, 13, color='pink', edgecolor='black'))\n\n# Draw a rectangle with a gray border\nax.add_patch(plt.Rectangle((0, 0), 10, 13, color='gray', edgecolor='black'))\n\n# Draw a rectangle with a silver border\nax.add_patch(plt.Rectangle((0, 0), 10, 13, color='silver', edgecolor='black'))\n\n# Draw a rectangle with a gold border\nax.add_patch(plt.Rectangle((0, 0), 10, 13, color='gold', edgecolor='black'))\n\n# Draw a rectangle with a olive border\nax.add_patch(plt.Rectangle((0, 0), 10, 13, color='olive', edgecolor='black'))\n\n# Draw a rectangle with a navy border\nax.add_patch(plt.Rectangle((0, 0), 10, 13, color='navy', edgecolor='black'))\n\n# Draw a rectangle with a maroon border\nax.add_patch(plt.Rectangle((0, 0), 10, 13, color='maroon', edgecolor='black'))\n\n# Draw a rectangle with a teal border\nax.add_patch(plt.Rectangle((0, 0), 10, 13, color='teal', edgecolor='black'))\n\n# Draw a rectangle with a lime border\nax.add_patch(plt.Rectangle((0, 0), 10, 13, color='lime', edgecolor='black'))\n\n# Draw a rectangle with a cyan border\nax.add_patch(plt.Rectangle((0, 0), 10, 13, color='cyan', edgecolor='black'))\n\n# Draw a rectangle with a magenta border\nax.add_patch(plt.Rectangle((0, 0), 10, 13, color='magenta', edgecolor='black'))\n\n# Draw a rectangle with a white border\nax.add_patch(plt.Rectangle((0, 0), 10, 13, color='white', edgecolor='black'))\n\n# Draw a rectangle with a black border\nax.add_patch(plt.Rectangle((0, 0), 10, 13, color='black', edgecolor='black'))\n\n# Draw a rectangle with a brown border\nax.add_patch(plt.Rectangle((0, 0), 10, 13, color='brown', edgecolor='black'))\n\n# Draw a rectangle with a purple border\nax.add_patch(plt.Rectangle((0, 0), 10, 13, color='purple', edgecolor='black'))\n\n# Draw a rectangle with a pink border\nax.add_patch(plt.Rectangle((0, 0), 10, 13, color='pink', edgecolor='black'))\n\n# Draw a rectangle with a gray border\nax.add_patch(plt.Rectangle((0, 0), 10, 13, color='gray', edgecolor='black'))\n\n# Draw a rectangle with a silver border\nax.add_patch(plt.Rectangle((0, 0), 10, 13, color='silver', edgecolor='black'))\n\n# Draw a rectangle with a gold border\nax.add_patch(plt.Rectangle((0, 0), 10, 13, color='gold', edgecolor='black'))\n\n# Draw a rectangle with a olive border\nax.add_patch(plt.Rectangle((0, 0), 10, 13, color='olive', edgecolor='black'))\n\n# Draw a rectangle with a navy border\nax.add_patch(plt.Rectangle((0, 0), 10, 13, color='navy', edgecolor='black'))\n\n# Draw a rectangle with a maroon border\nax.add_patch(plt.Rectangle((0, 0), 10, 13, color='maroon', edgecolor='black'))\n\n# Draw a rectangle with a teal border\nax.add_patch(plt.Rectangle((0, 0), 10, 13, color='teal', edgecolor='black'))\n\n# Draw a rectangle with a lime border\nax.add_patch(plt.Rectangle((0, 0), 10, 13, color='lime', edgecolor='black'))\n\n# Draw a rectangle with a cyan border\nax.add_patch(plt.Rectangle((0, 0), 10, 13, color='cyan', edgecolor='black'))\n\n# Draw a rectangle with a magenta border\nax.add_patch(plt.Rectangle((0, 0), 10, 13, color='magenta', edgecolor='black'))\n\n# Draw a rectangle with a white border\nax.add_patch(plt.Rectangle((0, 0), 10, 13, color='white', edgecolor='black'))\n\n# Draw a rectangle with a black border\nax.add_patch(plt.Rectangle((0, 0), 10, 13, color='black', edgecolor='black'))\n\n# Draw a rectangle with a brown border\nax.add_patch(plt.Rectangle((0, 0), 10, 13, color='brown', edgecolor='black'))\n\n# Draw a rectangle with a purple border\nax.add_patch(plt.Rectangle((0, 0), 10, 13, color='purple', edgecolor='black'))\n\n# Draw a rectangle with a pink border\nax.add_patch(plt.Rectangle((0, 0), 10, 13, color='pink', edgecolor='black'))\n\n# Draw a rectangle with a gray border\nax.add_patch(plt.Rectangle((0, 0), 10, 13, color='gray', edgecolor='black'))\n\n# Draw a rectangle with a silver border\nax.add_patch(plt.Rectangle((0, 0), 10, 13, color='silver', edgecolor='black'))\n\n# Draw a rectangle with a gold border\nax.add_patch(plt.Rectangle((0, 0), 10, 13, color='gold', edgecolor='black'))\n\n# Draw a rectangle with a olive border\nax.add_patch(plt.Rectangle((0, 0), 10, 13, color='olive', edgecolor='black'))\n\n# Draw a rectangle with a navy border\nax.add_patch(plt.Rectangle((0, 0), 10, 13, color='navy', edgecolor='black'))\n\n# Draw a rectangle with a maroon border\nax.add_patch(plt.Rectangle((0, 0), 10, 13, color='maroon', edgecolor='black'))\n\n# Draw a rectangle with a teal border\nax.add_patch(plt.Rectangle((0, 0), 10, 13, color='teal', edgecolor='black'))\n\n# Draw a rectangle with a lime border\nax.add_patch(plt.Rectangle((0, 0), 10, 13, color='lime', edgecolor='black'))\n\n# Draw a rectangle with a cyan border\nax.add_patch(plt.Rectangle((0, 0), 10, 13, color='cyan', edgecolor='black'))\n\n# Draw a rectangle with a magenta border\nax.add_patch(plt.Rectangle((0, 0), 10, 13, color='magenta', edgecolor='black'))\n\n# Draw a rectangle with a white border\nax.add_patch(plt.Rectangle((0, 0), 10, 13, color='white', edgecolor='black'))\n\n# Draw a rectangle with a black border\nax.add_patch(plt.Rectangle((0, 0), 10, 13, color='black', edgecolor='black'))\n\n# Draw a rectangle with a brown border\nax.add_patch(plt.Rectangle((0, 0), 10, 13, color='brown', edgecolor='black'))\n\n# Draw a rectangle with a purple border\nax.add_patch(plt.Rectangle((0, 0), 10, 13, color='purple', edgecolor='black'))\n\n# Draw a rectangle with a pink border\nax.add_patch(plt.Rectangle((0, 0), 10, 13, color='pink', edgecolor='black'))\n\n# Draw a rectangle with a gray border\nax.add_patch(plt.Rectangle((0, 0), 10, 13, color='gray', edgecolor='black'))\n\n# Draw a rectangle with a silver border\nax.add_patch(plt.Rectangle((0, 0), 10, 13, color='silver', edgecolor='black'))\n\n# Draw a rectangle with a gold border\nax.add_patch(plt.Rectangle((0, 0), 10, 13, color='gold', edgecolor='black'))\n\n# Draw a rectangle with a olive border\nax.add_patch(plt.Rectangle((0, 0), 10, 13, color='olive', edgecolor='black'))\n\n# Draw a rectangle with a navy border\nax.add_patch(plt.Rectangle((0, 0), 10, 13, color='navy', edgecolor='black'))\n\n# Draw a rectangle with a maroon border\nax.add_patch(plt.Rectangle((0, 0), 10, 13, color='maroon', edgecolor='black'))\n\n# Draw a rectangle with a teal border\nax.add_patch(plt.Rectangle((0, 0), 10, 13, color='teal', edgecolor='black'))\n\n# Draw a rectangle with a lime border\nax.add_patch(plt.Rectangle((0, 0), 10, 13, color='lime', edgecolor='black'))\n\n# Draw a rectangle with a cyan border\nax.add_patch(plt.Rectangle((0, 0), 10, 13, color='cyan', edgecolor='black'))\n\n# Draw a rectangle with a magenta border\nax.add_patch(plt.Rectangle((0, 0), 10, 13, color='magenta', edgecolor='black'))\n\n# Draw a rectangle with a white border\nax.add_patch(plt.Rectangle((0, 0), 10, 13, color='white', edgecolor='black'))\n\n# Draw a rectangle with a black border\nax.add_patch(plt.Rectangle((0, 0), 10, 13, color='black', edgecolor='black'))\n\n# Draw a rectangle with a brown border\nax.add_patch(plt.Rectangle((0, 0), 10, 13, color='brown', edgecolor='black'))\n\n# Draw a rectangle with a purple border\nax.add_patch(plt.Rectangle((0, 0), 10, 13, color='purple', edgecolor='black'))\n\n# Draw a rectangle with a pink border\nax.add_patch(plt.Rectangle((0, 0), 10, 13, color='pink', edgecolor='black'))\n\n# Draw a rectangle with a gray border\nax.add_patch(plt.Rectangle((0, 0), 10, 13, color='gray', edgecolor='black'))\n\n# Draw a rectangle with a silver border\nax.add_patch(plt.Rectangle((0, 0), 10, 13, color='silver', edgecolor='black'))\n\n# Draw a rectangle with a gold border\nax.add_patch(plt.Rectangle((0, 0), 10, 13, color='gold', edgecolor='black'))\n\n# Draw a rectangle with a olive border\nax.add_patch(plt.Rectangle((0, 0), 10, 13, color='olive', edgecolor='black'))\n\n# Draw a rectangle with a navy border\nax.add_patch(plt.Rectangle((0, 0), 10, 13, color='navy', edgecolor='black'))\n\n# Draw a rectangle with a maroon border\nax.add_patch(plt.Rectangle((0, 0), 10, 13, color='maroon', edgecolor='black'))\n\n# Draw a rectangle with a teal border\nax.add_patch(plt.Rectangle((0, 0), 10"}
{"file": "dataset/ori_500/line_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nx = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ny1 = [0.5, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1, 0.2, 0.3, 0.4]\ny2 = [0.5, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1, 0.2, 0.3, 0.4]\ny3 = [0.5, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1, 0.2, 0.3, 0.4]\n\n# Create the plot\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\nax.plot(x, y1, 'b-', label='5-shot direct')\nax.plot(x, y2, 'or-', label='5-shot scratchpad')\nax.plot(x, y3, 'g--', label='5-shot rule-following')\n\n# Set the labels and title\nax.set_xlabel('Digit Length')\nax.set_ylabel('Accuracy')\nax.set_title('Shot Accuracy by Digit Length')\n\n# Add legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_50.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(5.0, 10.0))\n\n# Set the title of the plot\nax.set_title('Smoothed Representation')\n\n# Create a line plot with the specified data points\nax.plot([2, 4, 6, 8, 10, 12, 14, 16, 18], [0.3, 0.2, 0.2, 0.1, 0.1, 0.2, 0.2, 0.3, 0.3], 'p-', color='purple', label='Smoothed Data')\n\n# Set the x-axis and y-axis limits\nax.set_xlim(0, 20)\nax.set_ylim(-0.1, 0.4)\n\n# Add a legend to the plot\nax.legend()\n\n# Create a second subplot\nax2 = fig.add_subplot(212)\n\n# Set the title of the second subplot\nax2.set_title('First Difference of Data')\n\n# Create a line plot with the specified data points\nax2.plot([2.5, 5, 7.5, 10, 12.5, 15, 17.5], [100, 90, 80, 70, 60, 50, 40], 'x-', color='orange', label='Difference Data')\n\n# Set the x-axis and y-axis limits\nax2.set_xlim(0, 20)\nax2.set_ylim(-5, 105)\n\n# Add a legend to the second subplot\nax2.legend()\n\n# Create a third subplot\nax3 = fig.add_subplot(213)\n\n# Set the title of the third subplot\nax3.set_title('Cumulative Sum Over Time')\n\n# Create a line plot with the specified data points\nax3.plot([0, 2.5, 5, 7.5, 10, 12.5, 15, 17.5], [0.5, 1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 7.5], 's-', color='green', label='Cumulative Sum')\n\n# Set the x-axis and y-axis limits\nax3.set_xlim(0, 20)\nax3.set_ylim(0, 25)\n\n# Add a legend to the third subplot\nax3.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_51.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfig, axes = plt.subplots(4, 1, figsize=(6.0, 12.0))\n\n# Sin Wave\nx = np.linspace(0, 10, 100)\ny_sin = np.sin(x)\naxes[0].plot(x, y_sin, 'm-')\naxes[0].set_title('Sin Wave')\n\n# Cos Wave\ny_cos = np.cos(x)\naxes[1].plot(x, y_cos, 'g-')\naxes[1].set_title('Cos Wave')\n\n# Exp Decay\ny_exp = np.exp(-x/5)\naxes[2].plot(x, y_exp, 'b-')\naxes[2].set_title('Exp Decay')\n\n# Log Growth\ny_log = np.log(x + 1)\naxes[3].plot(x, y_log, 'r-')\naxes[3].set_title('Log Growth')\n\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_52.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(9, 6))\n\n# Plot the first graph\nax.plot([0.1, 0.2, 0.3, 0.4], [82, 85, 87, 89], 'r-')\nax.set_title('a Positive bound')\n\n# Plot the second graph\nax.plot([0.1, 0.2, 0.3, 0.4], [79, 81, 83, 85], 'b-')\nax.set_title('b Negative bound')\n\n# Plot the third graph\nax.plot([0.1, 0.2, 0.3, 0.4], [76, 78, 80, 82], 'g-')\nax.set_title('c Fuzzy coefficient')\n\n# Plot the fourth graph\nax.plot([0.1, 0.2, 0.3, 0.4], [74, 76, 78, 80], 'y-')\nax.set_title('d Contrastive loss weight')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_53.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\nx = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9]\ny1 = [82, 81, 80, 79, 78, 77, 76, 75, 74]\ny2 = [85, 84, 83, 82, 81, 80, 79, 78, 77]\ny3 = [80, 79, 78, 77, 76, 75, 74, 73, 72]\ny4 = [82, 81, 80, 79, 78, 77, 76, 75, 74]\ny5 = [85, 84, 83, 82, 81, 80, 79, 78, 77]\ny6 = [80, 79, 78, 77, 76, 75, 74, 73, 72]\n\n# Create a figure and a set of subplots\nfig, axs = plt.subplots(3, 2, figsize=(12, 8))\n\n# Plot the first subplot\naxs[0, 0].plot(x, y1, 'r-')\naxs[0, 0].set_title('Positive Bound')\naxs[0, 0].set_xlabel('Time')\naxs[0, 0].set_ylabel('Value')\n\n# Plot the second subplot\naxs[0, 1].plot(x, y2, 'g-')\naxs[0, 1].set_title('Negative Bound')\naxs[0, 1].set_xlabel('Time')\naxs[0, 1].set_ylabel('Value')\n\n# Plot the third subplot\naxs[1, 0].plot(x, y3, 'b-')\naxs[1, 0].set_title('Contrastive Loss Weight')\naxs[1, 0].set_xlabel('Time')\naxs[1, 0].set_ylabel('Value')\n\n# Plot the fourth subplot\naxs[1, 1].plot(x, y4, 'm-')\naxs[1, 1].set_title('Fuzzy Coefficient')\naxs[1, 1].set_xlabel('Time')\naxs[1, 1].set_ylabel('Value')\n\n# Plot the fifth subplot\naxs[2, 0].plot(x, y5, 'c-')\naxs[2, 0].set_title('Additional Metric 1')\naxs[2, 0].set_xlabel('Time')\naxs[2, 0].set_ylabel('Value')\n\n# Plot the sixth subplot\naxs[2, 1].plot(x, y6, 'y-')\naxs[2, 1].set_title('Additional Metric 2')\naxs[2, 1].set_xlabel('Time')\naxs[2, 1].set_ylabel('Value')\n\n# Adjust the layout\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_54.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, axs = plt.subplots(1, 3, figsize=(12, 4))\n\n# Define the data\nx = np.linspace(0, 10, 100)\ny1 = np.sin(x)\ny2 = np.cos(x)\ny3 = np.tan(x)\n\n# Plot the data\naxs[0].plot(x, y1, 'r-')\naxs[0].set_title('Dry vs Rain')\naxs[0].set_xlabel('Time')\naxs[0].set_ylabel('Relaxation Level')\n\naxs[1].plot(x, y2, 'g-')\naxs[1].set_title('Snow vs Fog')\naxs[1].set_xlabel('Time')\naxs[1].set_ylabel('Relaxation Level')\n\naxs[2].plot(x, y3, 'b-')\naxs[2].set_title('Rain vs Snow')\naxs[2].set_xlabel('Time')\naxs[2].set_ylabel('Relaxation Level')\n\n# Add colored rectangles for the legend\nfor ax in axs:\n    ax.add_patch(plt.Rectangle((0, 0), 1, 1, color='red'))\n    ax.add_patch(plt.Rectangle((0, 0), 1, 1, color='green'))\n    ax.add_patch(plt.Rectangle((0, 0), 1, 1, color='blue'))\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_55.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nn_aug = [0, 0.125, 0.25, 0.5, 1, 2, 4, 8]\nperformance_gain = [6, 7, 6, 5, 4, 3, 2, 1]\ncontent_gain = [8, 7, 6, 5, 4, 3, 2, 1]\norganization_gain = [4, 3, 2, 1, 0, -1, -2, -3]\nlanguage_gain = [2, 1, 0, -1, -2, -3, -4, -5]\n\n# Plot\nfig, ax = plt.subplots(figsize=(8, 3))\nax.plot(n_aug, performance_gain, label='Performance Gain (%)', color='blue')\nax.plot(n_aug, content_gain, label='Content', color='red')\nax.plot(n_aug, organization_gain, label='Organization', color='green')\nax.plot(n_aug, language_gain, label='Language', color='purple')\n\n# Markers\nax.scatter([0, 1, 2, 4], [6, 4, 2, 1], color='green')\nax.scatter([0, 1, 2, 4], [8, 6, 4, 2], color='red')\nax.scatter([0, 1, 2, 4], [4, 2, 0, -2], color='blue')\nax.scatter([0, 1, 2, 4], [2, 0, -2, -4], color='purple')\n\n# Title and labels\nax.set_title('Dynamic Performance Gain Across Different n_aug Levels')\nax.set_xlabel('n_aug')\nax.set_ylabel('Performance Gain (%)')\n\n# Legend\nax.legend()\n\nplt.show()\n```"}
{"file": "dataset/ori_500/line_56.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\nx = [0, 20, 40, 60, 80]\ny1 = [0.65, 0.7, 0.75, 0.7, 0.65]\ny2 = [0.6, 0.65, 0.7, 0.65, 0.6]\ny3 = [0.65, 0.7, 0.75, 0.7, 0.65]\ny4 = [0.6, 0.65, 0.7, 0.65, 0.6]\n\n# Create a figure and a set of subplots\nfig, axs = plt.subplots(1, 3, figsize=(9.0, 3.0))\n\n# Plot the first subplot\naxs[0].plot(x, y1, 'r-')\naxs[0].set_title('COCO 10K')\naxs[0].set_xlabel('Deposition IO Norm')\naxs[0].set_ylabel('Accuracy')\naxs[0].text(0, 0.65, 'COCO (10k)', color='red')\n\n# Plot the second subplot\naxs[1].plot(x, y2, 'b-')\naxs[1].set_title('LAION 10K')\naxs[1].set_xlabel('Deposition IO Norm')\naxs[1].set_ylabel('Accuracy')\naxs[1].text(0, 0.65, 'LAION (10k)', color='blue')\n\n# Plot the third subplot\naxs[2].plot(x, y3, 'g-')\naxs[2].set_title('COCO & LAION 5K')\naxs[2].set_xlabel('Deposition IO Norm')\naxs[2].set_ylabel('Accuracy')\naxs[2].text(0, 0.65, 'COCO (5k)', color='green')\naxs[2].text(0, 0.6, 'LAION (5k)', color='orange')\n\n# Plot the fourth subplot\naxs[3].plot(x, y4, 'y-')\naxs[3].set_title('COCO & LAION 5K')\naxs[3].set_xlabel('Deposition IO Norm')\naxs[3].set_ylabel('Accuracy')\naxs[3].text(0, 0.65, 'COCO (5k)', color='green')\naxs[3].text(0, 0.6, 'LAION (5k)', color='orange')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_57.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(12.0, 9.0))\n\n# Set the x-axis limits\nax.set_xlim(0.025, 0.3)\n\n# Set the y-axis limits\nax.set_ylim(0.08, 0.9)\n\n# Set the x-axis ticks\nax.set_xticks([0.025, 0.05, 0.075, 0.1, 0.125, 0.15, 0.175, 0.2, 0.225, 0.25, 0.275, 0.3])\n\n# Set the y-axis ticks\nax.set_yticks([0.08, 0.1, 0.12, 0.14, 0.16, 0.18, 0.2, 0.22, 0.24, 0.26, 0.28, 0.3, 0.32, 0.34, 0.36, 0.38, 0.4, 0.42, 0.44, 0.46, 0.48, 0.5, 0.52, 0.54, 0.56, 0.58, 0.6, 0.62, 0.64, 0.66, 0.68, 0.7, 0.72, 0.74, 0.76, 0.78, 0.8, 0.82, 0.84, 0.86, 0.88, 0.9])\n\n# Set the x-axis label\nax.set_xlabel('Parameter Rate')\n\n# Set the y-axis label\nax.set_ylabel('Metric')\n\n# Set the title\nax.set_title('Error Rate vs. Learning Rate')\n\n# Plot the data\nax.plot([0.025, 0.05, 0.075, 0.1, 0.125, 0.15, 0.175, 0.2, 0.225, 0.25, 0.275, 0.3], [0.18, 0.16, 0.14, 0.12, 0.1, 0.08, 0.06, 0.04, 0.02, 0.0, 0.02, 0.04], 'b-', label='Error Rate vs. Learning Rate (Batch Size=64)')\nax.plot([0.025, 0.05, 0.075, 0.1, 0.125, 0.15, 0.175, 0.2, 0.225, 0.25, 0.275, 0.3], [0.18, 0.16, 0.14, 0.12, 0.1, 0.08, 0.06, 0.04, 0.02, 0.0, 0.02, 0.04], 'r-', label='Error Rate vs. Learning Rate (Batch Size=128)')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_58.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 4))\n\n# Plot the first graph\nax.plot([0, 25, 50, 100, 150, 200], [0.6, 0.5, 0.4, 0.3, 0.2, 0.1], 'b-')\nax.plot([0, 25, 50, 100, 150, 200], [0.7, 0.6, 0.5, 0.4, 0.3, 0.2], 'r-')\n\n# Add labels and title\nax.set_xlabel('Training Iterations')\nax.set_ylabel('Metric Value')\nax.set_title('Metric 1')\n\n# Add legend\nax.legend(['Base Model', 'Our Model'])\n\n# Create a second subplot\nax2 = fig.add_subplot(122)\n\n# Plot the second graph\nax2.plot([0, 25, 50, 100, 150, 200], [0.6, 0.5, 0.4, 0.3, 0.2, 0.1], 'b-')\nax2.plot([0, 25, 50, 100, 150, 200], [0.7, 0.6, 0.5, 0.4, 0.3, 0.2], 'r-')\n\n# Add labels and title\nax2.set_xlabel('Training Iterations')\nax2.set_ylabel('Metric Value')\nax2.set_title('Metric 2')\n\n# Add legend\nax2.legend(['Base Model', 'Our Model'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_59.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(5, 3))\n\n# Set the title of the plot\nax.set_title('Accuracy')\n\n# Define the x-axis values\nx = [0, 25, 50, 75, 100, 125, 150, 175, 200]\n\n# Define the y-axis values for the first line\ny1 = [0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1, 0.0]\n\n# Define the y-axis values for the second line\ny2 = [0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1, 0.0, 0.0]\n\n# Plot the lines\nax.plot(x, y1, label='Base Model', color='cyan')\nax.plot(x, y2, label='Our Model', color='cyan')\n\n# Add a legend\nax.legend()\n\n# Set the x-axis label\nax.set_xlabel('Training Iterations')\n\n# Set the y-axis label\nax.set_ylabel('Metric Value')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(9, 6))\n\n# Set the x-axis limits\nax.set_xlim(10**1, 10**7)\n\n# Set the y-axis limits\nax.set_ylim(10**-10, 10**-3)\n\n# Set the x-axis ticks\nax.set_xticks([10**1, 2*10**1, 3*10**1, 4*10**1, 5*10**1, 6*10**1])\n\n# Set the y-axis ticks\nax.set_yticks([10**-10, 10**-8, 10**-6, 10**-4, 10**-2, 10**0])\n\n# Set the x-axis tick labels\nax.set_xticklabels(['10^1', '2*10^1', '3*10^1', '4*10^1', '5*10^1', '6*10^1'])\n\n# Set the y-axis tick labels\nax.set_yticklabels(['10^-10', '10^-8', '10^-6', '10^-4', '10^-2', '10^0'])\n\n# Set the title of the plot\nax.set_title('Plot Title')\n\n# Set the x-axis label\nax.set_xlabel('N')\n\n# Set the y-axis label\nax.set_ylabel('Y')\n\n# Add a rectangle patch\nrect = plt.Rectangle((10**1, 10**-10), 10**1, 10**-10, color='blue')\nax.add_patch(rect)\n\n# Add a line plot\nline = plt.Line2D([10**1, 2*10**1], [10**-10, 10**-10], color='blue')\nax.add_line(line)\n\n# Add a scatter plot\nscatter = plt.Circle((10**1, 10**-10), 10**-10, color='blue')\nax.add_artist(scatter)\n\n# Add a rectangle patch\nrect = plt.Rectangle((2*10**1, 10**-10), 10**1, 10**-10, color='orange')\nax.add_patch(rect)\n\n# Add a line plot\nline = plt.Line2D([2*10**1, 3*10**1], [10**-10, 10**-10], color='orange')\nax.add_line(line)\n\n# Add a scatter plot\nscatter = plt.Circle((2*10**1, 10**-10), 10**-10, color='orange')\nax.add_artist(scatter)\n\n# Add a rectangle patch\nrect = plt.Rectangle((3*10**1, 10**-10), 10**1, 10**-10, color='orange')\nax.add_patch(rect)\n\n# Add a line plot\nline = plt.Line2D([3*10**1, 4*10**1], [10**-10, 10**-10], color='orange')\nax.add_line(line)\n\n# Add a scatter plot\nscatter = plt.Circle((3*10**1, 10**-10), 10**-10, color='orange')\nax.add_artist(scatter)\n\n# Add a rectangle patch\nrect = plt.Rectangle((4*10**1, 10**-10), 10**1, 10**-10, color='orange')\nax.add_patch(rect)\n\n# Add a line plot\nline = plt.Line2D([4*10**1, 5*10**1], [10**-10, 10**-10], color='orange')\nax.add_line(line)\n\n# Add a scatter plot\nscatter = plt.Circle((4*10**1, 10**-10), 10**-10, color='orange')\nax.add_artist(scatter)\n\n# Add a rectangle patch\nrect = plt.Rectangle((5*10**1, 10**-10), 10**1, 10**-10, color='orange')\nax.add_patch(rect)\n\n# Add a line plot\nline = plt.Line2D([5*10**1, 6*10**1], [10**-10, 10**-10], color='orange')\nax.add_line(line)\n\n# Add a scatter plot\nscatter = plt.Circle((5*10**1, 10**-10), 10**-10, color='orange')\nax.add_artist(scatter)\n\n# Add a rectangle patch\nrect = plt.Rectangle((6*10**1, 10**-10), 10**1, 10**-10, color='blue')\nax.add_patch(rect)\n\n# Add a line plot\nline = plt.Line2D([6*10**1, 7*10**1], [10**-10, 10**-10], color='blue')\nax.add_line(line)\n\n# Add a scatter plot\nscatter = plt.Circle((6*10**1, 10**-10), 10**-10, color='blue')\nax.add_artist(scatter)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_60.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Performance and Efficiency Over Weeks')\n\n# Set the x-axis label\nax.set_xlabel('Weeks')\n\n# Set the y-axis label\nax.set_ylabel('Efficiency')\n\n# Set the x-axis limits\nax.set_xlim(0, 25)\n\n# Set the y-axis limits\nax.set_ylim(-1.5, 1.5)\n\n# Set the x-axis ticks\nax.set_xticks([0, 5, 10, 15, 20, 25])\n\n# Set the y-axis ticks\nax.set_yticks([-1.5, -1.0, -0.5, 0.0, 0.5, 1.0, 1.5])\n\n# Set the x-axis tick labels\nax.set_xticklabels(['0', '5', '10', '15', '20', '25'])\n\n# Set the y-axis tick labels\nax.set_yticklabels(['-1.5', '-1.0', '-0.5', '0.0', '0.5', '1.0', '1.5'])\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='red')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='red')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='blue')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='red')\n\n# Set the color of the x-axis spines\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis spines\nax.spines['left'].set_color('red')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='red')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='red')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='blue')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='red')\n\n# Set the color of the x-axis spines\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis spines\nax.spines['left'].set_color('red')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='red')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='red')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='blue')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='red')\n\n# Set the color of the x-axis spines\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis spines\nax.spines['left'].set_color('red')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='red')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='red')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='blue')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='red')\n\n# Set the color of the x-axis spines\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis spines\nax.spines['left'].set_color('red')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='red')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='red')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='blue')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='red')\n\n# Set the color of the x-axis spines\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis spines\nax.spines['left'].set_color('red')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='red')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='red')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='blue')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='red')\n\n# Set the color of the x-axis spines\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis spines\nax.spines['left'].set_color('red')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='red')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='red')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='blue')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='red')\n\n# Set the color of the x-axis spines\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis spines\nax.spines['left'].set_color('red')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='red')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='red')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='blue')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='red')\n\n# Set the color of the x-axis spines\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis spines\nax.spines['left'].set_color('red')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='red')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='red')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='blue')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='red')\n\n# Set the color of the x-axis spines\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis spines\nax.spines['left'].set_color('red')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='red')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='red')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='blue')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='red')\n\n# Set the color of the x-axis spines\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis spines\nax.spines['left'].set_color('red')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='red')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='red')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='blue')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='red')\n\n# Set the color of the x-axis spines\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis spines\nax.spines['left'].set_color('red')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='red')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='red')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='blue')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='red')\n\n# Set the color of the x-axis spines\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis spines\nax.spines['left'].set_color('red')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='red')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='red')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='blue')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='red')\n\n# Set the color of the x-axis spines\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis spines\nax.spines['left'].set_color('red')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='red')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='red')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='blue')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='red')\n\n# Set the color of the x-axis spines\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis spines\nax.spines['left'].set_color('red')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='red')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='red')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='blue')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='red')\n\n# Set the color of the x-axis spines\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis spines\nax.spines['left'].set_color('red')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='red')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='red')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='blue')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='red')\n\n# Set the color of the x-axis spines\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis spines\nax.spines['left'].set_color('red')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='red')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='red')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='blue')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='red')\n\n# Set the color of the x-axis spines\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis spines\nax.spines['left'].set_color('red')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='red')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='red')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='blue')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='red')\n\n# Set the color of the x-axis spines\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis spines\nax.spines['left'].set_color('red')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='red')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='red')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='blue')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='red')\n\n# Set the color of the x-axis spines\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis spines\nax.spines['left'].set_color('red')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='red')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='red')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='blue')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='red')\n\n# Set the color of the x-axis spines\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis spines\nax.spines['left'].set_color('red')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='red')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='red')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='blue')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='red')\n\n# Set the color of the x-axis spines\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis spines\nax.spines['left'].set_color('red')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='red')\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='red')\n\n# Set the color of the x-axis grid lines\nax.grid(axis='x', color='blue')\n\n# Set the color of the y-axis grid lines\nax.grid(axis='y', color='red')\n\n# Set the color of the x-axis spines\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis spines"}
{"file": "dataset/ori_500/line_61.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Set the title of the plot\nax.set_title('Performance and Efficiency Analysis')\n\n# Set the x-axis label\nax.set_xlabel('Weeks')\n\n# Set the y-axis label\nax.set_ylabel('Values')\n\n# Define the data for the plots\nx = [0, 5, 10, 15, 20, 25]\ny1 = [0.3, 0.8, 0.7, 0.9, 0.5, 0.2]\ny2 = [0.4, 0.9, 0.8, 0.6, 0.3, 0.1]\ny3 = [0.5, 1.0, 0.9, 0.7, 0.4, 0.2]\ny4 = [0.6, 1.1, 1.0, 0.8, 0.5, 0.3]\n\n# Plot the data\nax.plot(x, y1, 'b-', label='Performance')\nax.plot(x, y2, 'r-', label='Efficiency')\nax.plot(x, y3, 'b--', label='Performance')\nax.plot(x, y4, 'r--', label='Efficiency')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_62.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Detailed Performance and Efficiency Analysis Over Weeks')\n\n# Set the x-axis label\nax.set_xlabel('Weeks')\n\n# Set the y-axis label\nax.set_ylabel('Efficiency')\n\n# Set the x-axis limits\nax.set_xlim(0, 30)\n\n# Set the y-axis limits\nax.set_ylim(0, 12)\n\n# Set the x-axis ticks\nax.set_xticks([0, 5, 10, 15, 20, 25, 30])\n\n# Set the y-axis ticks\nax.set_yticks([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n\n# Set the background color of the plot\nax.set_facecolor('#e0f3db')\n\n# Set the grid lines\nax.grid(True)\n\n# Set the performance data\nperformance_data = [0.2, 0.4, 0.6, 0.8, 1.0, 1.2, 1.4, 1.6, 1.8, 2.0, 2.2, 2.4, 2.6, 2.8, 3.0, 3.2, 3.4, 3.6, 3.8, 4.0, 4.2, 4.4, 4.6, 4.8, 5.0, 5.2, 5.4, 5.6, 5.8, 6.0]\n\n# Set the efficiency data\nefficiency_data = [0.2, 0.4, 0.6, 0.8, 1.0, 1.2, 1.4, 1.6, 1.8, 2.0, 2.2, 2.4, 2.6, 2.8, 3.0, 3.2, 3.4, 3.6, 3.8, 4.0, 4.2, 4.4, 4.6, 4.8, 5.0, 5.2, 5.4, 5.6, 5.8, 6.0]\n\n# Plot the performance data\nax.plot(performance_data, 'b-')\n\n# Plot the efficiency data\nax.plot(efficiency_data, 'r-')\n\n# Add markers to the performance data\nfor i, v in enumerate(performance_data):\n    ax.text(i, v, str(v), color='blue', fontsize=10)\n\n# Add markers to the efficiency data\nfor i, v in enumerate(efficiency_data):\n    ax.text(i, v, str(v), color='red', fontsize=10)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_63.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(12.0, 8.0))\n\n# Set the background color of the plot\nax.set_facecolor('bisque')\n\n# Set the title of the plot\nax.set_title('Dynamic Data Presentation Across Weeks')\n\n# Set the x-axis label\nax.set_xlabel('Weeks')\n\n# Set the y-axis label\nax.set_ylabel('Normalized Value')\n\n# Define the data for each series\nx = [0, 5, 10, 15, 20, 25]\ny1 = [0.5, 0.7, 0.9, 0.6, 0.3, 0.1]\ny2 = [0.4, 0.6, 0.8, 0.5, 0.2, 0.0]\ny3 = [0.3, 0.5, 0.7, 0.4, 0.1, 0.0]\n\n# Plot the data with different colors and line styles\nax.plot(x, y1, 'b--', label='Data Series 1')\nax.plot(x, y2, 'g--', label='Data Series 2 with Gradient')\nax.plot(x, y3, 'm--', label='Data Series 3')\n\n# Add a legend to the plot\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_64.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nx = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ny1 = [90, 85, 80, 75, 70, 65, 60, 55, 50, 45]\ny2 = [85, 80, 75, 70, 65, 60, 55, 50, 45, 40]\ny3 = [80, 75, 70, 65, 60, 55, 50, 45, 40, 35]\ny4 = [75, 70, 65, 60, 55, 50, 45, 40, 35, 30]\ny5 = [70, 65, 60, 55, 50, 45, 40, 35, 30, 25]\ny6 = [65, 60, 55, 50, 45, 40, 35, 30, 25, 20]\n\n# Plot\nfig, ax = plt.subplots(figsize=(12.0, 6.0))\nax.plot(x, y1, 'b-', label='BaCE')\nax.plot(x, y2, 'c-', label='LWF')\nax.plot(x, y3, 'g-', label='EWC')\nax.plot(x, y4, 'm-', label='SEQ')\n\n# Markers\nax.plot(1, 90, 'bs', markersize=10)\nax.plot(2, 85, 'bs', markersize=10)\nax.plot(3, 80, 'bs', markersize=10)\nax.plot(4, 75, 'bs', markersize=10)\nax.plot(5, 70, 'bs', markersize=10)\nax.plot(6, 65, 'bs', markersize=10)\nax.plot(7, 60, 'bs', markersize=10)\nax.plot(8, 55, 'bs', markersize=10)\nax.plot(9, 50, 'bs', markersize=10)\nax.plot(10, 45, 'bs', markersize=10)\n\nax.plot(1, 85, 'cs', markersize=10)\nax.plot(2, 80, 'cs', markersize=10)\nax.plot(3, 75, 'cs', markersize=10)\nax.plot(4, 70, 'cs', markersize=10)\nax.plot(5, 65, 'cs', markersize=10)\nax.plot(6, 60, 'cs', markersize=10)\nax.plot(7, 55, 'cs', markersize=10)\nax.plot(8, 50, 'cs', markersize=10)\nax.plot(9, 45, 'cs', markersize=10)\nax.plot(10, 40, 'cs', markersize=10)\n\nax.plot(1, 80, 'gs', markersize=10)\nax.plot(2, 75, 'gs', markersize=10)\nax.plot(3, 70, 'gs', markersize=10)\nax.plot(4, 65, 'gs', markersize=10)\nax.plot(5, 60, 'gs', markersize=10)\nax.plot(6, 55, 'gs', markersize=10)\nax.plot(7, 50, 'gs', markersize=10)\nax.plot(8, 45, 'gs', markersize=10)\nax.plot(9, 40, 'gs', markersize=10)\nax.plot(10, 35, 'gs', markersize=10)\n\nax.plot(1, 75, 'ms', markersize=10)\nax.plot(2, 70, 'ms', markersize=10)\nax.plot(3, 65, 'ms', markersize=10)\nax.plot(4, 60, 'ms', markersize=10)\nax.plot(5, 55, 'ms', markersize=10)\nax.plot(6, 50, 'ms', markersize=10)\nax.plot(7, 45, 'ms', markersize=10)\nax.plot(8, 40, 'ms', markersize=10)\nax.plot(9, 35, 'ms', markersize=10)\nax.plot(10, 30, 'ms', markersize=10)\n\nax.plot(1, 70, 'ys', markersize=10)\nax.plot(2, 65, 'ys', markersize=10)\nax.plot(3, 60, 'ys', markersize=10)\nax.plot(4, 55, 'ys', markersize=10)\nax.plot(5, 50, 'ys', markersize=10)\nax.plot(6, 45, 'ys', markersize=10)\nax.plot(7, 40, 'ys', markersize=10)\nax.plot(8, 35, 'ys', markersize=10)\nax.plot(9, 30, 'ys', markersize=10)\nax.plot(10, 25, 'ys', markersize=10)\n\nax.plot(1, 65, 'ks', markersize=10)\nax.plot(2, 60, 'ks', markersize=10)\nax.plot(3, 55, 'ks', markersize=10)\nax.plot(4, 50, 'ks', markersize=10)\nax.plot(5, 45, 'ks', markersize=10)\nax.plot(6, 40, 'ks', markersize=10)\nax.plot(7, 35, 'ks', markersize=10)\nax.plot(8, 30, 'ks', markersize=10)\nax.plot(9, 25, 'ks', markersize=10)\nax.plot(10, 20, 'ks', markersize=10)\n\nax.set_xlabel('Task')\nax.set_ylabel('Average Accuracy (%)')\nax.legend()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_65.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\nx = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ny1 = [80, 85, 90, 95, 90, 85, 80, 75, 70, 65]\ny2 = [60, 65, 70, 75, 80, 85, 90, 95, 100, 95]\ny3 = [40, 45, 50, 55, 60, 65, 70, 75, 80, 85]\ny4 = [20, 25, 30, 35, 40, 45, 50, 55, 60, 65]\n\n# Create a figure and a set of subplots\nfig, axs = plt.subplots(1, 2, figsize=(8.0, 3.0))\n\n# Plot the first subplot\naxs[0].plot(x, y1, label='BaCE')\naxs[0].plot(x, y2, label='EWC')\naxs[0].set_title('Performance Comparison: BaCE vs EWC')\naxs[0].set_xlabel('Task')\naxs[0].set_ylabel('Average Accuracy (%)')\naxs[0].legend()\naxs[0].grid(True)\n\n# Plot the second subplot\naxs[1].plot(x, y3, label='LWF', color='red')\naxs[1].plot(x, y4, label='SEQ', color='pink')\naxs[1].set_title('Performance Comparison: LWF vs SEQ')\naxs[1].set_xlabel('Task')\naxs[1].set_ylabel('Average Accuracy (%)')\naxs[1].legend()\naxs[1].grid(True)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_66.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(9.0, 7.0))\n\n# Set the title of the plot\nax.set_title('model1 Performance')\n\n# Set the x-axis label\nax.set_xlabel('Iterations')\n\n# Set the y-axis label\nax.set_ylabel('Success Rate')\n\n# Create a rectangle patch for the shaded area\nrect = plt.Rectangle((0, 0), 100, 100, color='blue', alpha=0.5)\nax.add_patch(rect)\n\n# Create a line plot\nax.plot([0, 250, 500, 750, 1000, 1250, 1500, 1750, 2000], [0.2, 0.4, 0.6, 0.8, 1.0, 0.8, 0.6, 0.4, 0.2], 'b-')\n\n# Create a scatter plot\nax.scatter([0, 250, 500, 750, 1000, 1250, 1500, 1750, 2000], [0.2, 0.4, 0.6, 0.8, 1.0, 0.8, 0.6, 0.4, 0.2], c='red')\n\n# Create a second subplot\nax2 = fig.add_subplot(2, 2, 2)\nax2.set_title('model2 Performance')\nax2.set_xlabel('Iterations')\nax2.set_ylabel('Success Rate')\nax2.plot([0, 250, 500, 750, 1000, 1250, 1500, 1750, 2000], [0.2, 0.4, 0.6, 0.8, 1.0, 0.8, 0.6, 0.4, 0.2], 'r-')\nax2.scatter([0, 250, 500, 750, 1000, 1250, 1500, 1750, 2000], [0.2, 0.4, 0.6, 0.8, 1.0, 0.8, 0.6, 0.4, 0.2], c='blue')\n\n# Create a third subplot\nax3 = fig.add_subplot(2, 2, 3)\nax3.set_title('model3 Performance')\nax3.set_xlabel('Iterations')\nax3.set_ylabel('Success Rate')\nax3.plot([0, 250, 500, 750, 1000, 1250, 1500, 1750, 2000], [0.2, 0.4, 0.6, 0.8, 1.0, 0.8, 0.6, 0.4, 0.2], 'g-')\nax3.scatter([0, 250, 500, 750, 1000, 1250, 1500, 1750, 2000], [0.2, 0.4, 0.6, 0.8, 1.0, 0.8, 0.6, 0.4, 0.2], c='purple')\n\n# Create a fourth subplot\nax4 = fig.add_subplot(2, 2, 4)\nax4.set_title('model4 Performance')\nax4.set_xlabel('Iterations')\nax4.set_ylabel('Success Rate')\nax4.plot([0, 250, 500, 750, 1000, 1250, 1500, 1750, 2000], [0.2, 0.4, 0.6, 0.8, 1.0, 0.8, 0.6, 0.4, 0.2], 'y-')\nax4.scatter([0, 250, 500, 750, 1000, 1250, 1500, 1750, 2000], [0.2, 0.4, 0.6, 0.8, 1.0, 0.8, 0.6, 0.4, 0.2], c='orange')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_67.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 5.0))\n\n# Set the title of the plot\nax.set_title('Wear Rate (%)')\n\n# Set the x-axis label\nax.set_xlabel('Number of microphones')\n\n# Set the y-axis label\nax.set_ylabel('Wear Rate (%)')\n\n# Set the tick labels for the x-axis\nax.set_xticks([2, 3, 4, 5, 6, 7, 8])\n\n# Set the tick labels for the y-axis\nax.set_yticks([2, 3, 4, 5, 6, 7, 8])\n\n# Draw a rectangle at the bottom of the plot\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='blue'))\n\n# Draw a rectangle at the top of the plot\nax.add_patch(plt.Rectangle((0, 9), 1, 1, color='red'))\n\n# Draw a rectangle at the left of the plot\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='green'))\n\n# Draw a rectangle at the right of the plot\nax.add_patch(plt.Rectangle((9, 0), 1, 1, color='yellow'))\n\n# Draw a rectangle at the center of the plot\nax.add_patch(plt.Rectangle((4.5, 4.5), 1, 1, color='black'))\n\n# Draw a rectangle at the bottom-left of the plot\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='purple'))\n\n# Draw a rectangle at the top-right of the plot\nax.add_patch(plt.Rectangle((9, 9), 1, 1, color='orange'))\n\n# Draw a rectangle at the bottom-right of the plot\nax.add_patch(plt.Rectangle((9, 0), 1, 1, color='pink'))\n\n# Draw a rectangle at the top-left of the plot\nax.add_patch(plt.Rectangle((0, 9), 1, 1, color='brown'))\n\n# Draw a rectangle at the center-left of the plot\nax.add_patch(plt.Rectangle((0, 4.5), 1, 1, color='cyan'))\n\n# Draw a rectangle at the center-right of the plot\nax.add_patch(plt.Rectangle((9, 4.5), 1, 1, color='magenta'))\n\n# Draw a rectangle at the bottom-center of the plot\nax.add_patch(plt.Rectangle((4.5, 0), 1, 1, color='lime'))\n\n# Draw a rectangle at the top-center of the plot\nax.add_patch(plt.Rectangle((4.5, 9), 1, 1, color='silver'))\n\n# Draw a rectangle at the bottom-middle of the plot\nax.add_patch(plt.Rectangle((4.5, 0), 1, 1, color='gold'))\n\n# Draw a rectangle at the top-middle of the plot\nax.add_patch(plt.Rectangle((4.5, 9), 1, 1, color='navy'))\n\n# Draw a rectangle at the bottom-left-middle of the plot\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='olive'))\n\n# Draw a rectangle at the top-right-middle of the plot\nax.add_patch(plt.Rectangle((9, 9), 1, 1, color='teal'))\n\n# Draw a rectangle at the bottom-right-middle of the plot\nax.add_patch(plt.Rectangle((9, 0), 1, 1, color='coral'))\n\n# Draw a rectangle at the top-left-middle of the plot\nax.add_patch(plt.Rectangle((0, 9), 1, 1, color='indigo'))\n\n# Draw a rectangle at the center-left-middle of the plot\nax.add_patch(plt.Rectangle((0, 4.5), 1, 1, color='plum'))\n\n# Draw a rectangle at the center-right-middle of the plot\nax.add_patch(plt.Rectangle((9, 4.5), 1, 1, color='azure'))\n\n# Draw a rectangle at the bottom-center-middle of the plot\nax.add_patch(plt.Rectangle((4.5, 0), 1, 1, color='chartreuse'))\n\n# Draw a rectangle at the top-center-middle of the plot\nax.add_patch(plt.Rectangle((4.5, 9), 1, 1, color='saddlebrown'))\n\n# Draw a rectangle at the bottom-left-middle-middle of the plot\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='wheat'))\n\n# Draw a rectangle at the top-right-middle-middle of the plot\nax.add_patch(plt.Rectangle((9, 9), 1, 1, color='lavender'))\n\n# Draw a rectangle at the bottom-right-middle-middle of the plot\nax.add_patch(plt.Rectangle((9, 0), 1, 1, color='tan'))\n\n# Draw a rectangle at the top-left-middle-middle of the plot\nax.add_patch(plt.Rectangle((0, 9), 1, 1, color='lightgrey'))\n\n# Draw a rectangle at the center-left-middle-middle of the plot\nax.add_patch(plt.Rectangle((0, 4.5), 1, 1, color='darkgrey'))\n\n# Draw a rectangle at the center-right-middle-middle of the plot\nax.add_patch(plt.Rectangle((9, 4.5), 1, 1, color='silver'))\n\n# Draw a rectangle at the bottom-center-middle-middle of the plot\nax.add_patch(plt.Rectangle((4.5, 0), 1, 1, color='darkkhaki'))\n\n# Draw a rectangle at the top-center-middle-middle of the plot\nax.add_patch(plt.Rectangle((4.5, 9), 1, 1, color='darkseagreen'))\n\n# Draw a rectangle at the bottom-left-middle-middle-middle of the plot\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='darkslategray'))\n\n# Draw a rectangle at the top-right-middle-middle-middle of the plot\nax.add_patch(plt.Rectangle((9, 9), 1, 1, color='darkslateblue'))\n\n# Draw a rectangle at the bottom-right-middle-middle-middle of the plot\nax.add_patch(plt.Rectangle((9, 0), 1, 1, color='darkslategrey'))\n\n# Draw a rectangle at the top-left-middle-middle-middle of the plot\nax.add_patch(plt.Rectangle((0, 9), 1, 1, color='darkslateblack'))\n\n# Draw a rectangle at the center-left-middle-middle-middle of the plot\nax.add_patch(plt.Rectangle((0, 4.5), 1, 1, color='darkslateblue'))\n\n# Draw a rectangle at the center-right-middle-middle-middle of the plot\nax.add_patch(plt.Rectangle((9, 4.5), 1, 1, color='darkslategrey'))\n\n# Draw a rectangle at the bottom-center-middle-middle-middle of the plot\nax.add_patch(plt.Rectangle((4.5, 0), 1, 1, color='darkslateblack'))\n\n# Draw a rectangle at the top-center-middle-middle-middle of the plot\nax.add_patch(plt.Rectangle((4.5, 9), 1, 1, color='darkslateblue'))\n\n# Draw a rectangle at the bottom-left-middle-middle-middle-middle of the plot\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='darkslategrey'))\n\n# Draw a rectangle at the top-right-middle-middle-middle-middle of the plot\nax.add_patch(plt.Rectangle((9, 9), 1, 1, color='darkslateblack'))\n\n# Draw a rectangle at the bottom-right-middle-middle-middle-middle of the plot\nax.add_patch(plt.Rectangle((9, 0), 1, 1, color='darkslateblue'))\n\n# Draw a rectangle at the top-left-middle-middle-middle-middle of the plot\nax.add_patch(plt.Rectangle((0, 9), 1, 1, color='darkslategrey'))\n\n# Draw a rectangle at the center-left-middle-middle-middle-middle of the plot\nax.add_patch(plt.Rectangle((0, 4.5), 1, 1, color='darkslateblack'))\n\n# Draw a rectangle at the center-right-middle-middle-middle-middle of the plot\nax.add_patch(plt.Rectangle((9, 4.5), 1, 1, color='darkslategrey'))\n\n# Draw a rectangle at the bottom-center-middle-middle-middle-middle of the plot\nax.add_patch(plt.Rectangle((4.5, 0), 1, 1, color='darkslateblack'))\n\n# Draw a rectangle at the top-center-middle-middle-middle-middle of the plot\nax.add_patch(plt.Rectangle((4.5, 9), 1, 1, color='darkslateblue'))\n\n# Draw a rectangle at the bottom-left-middle-middle-middle-middle-middle of the plot\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='darkslategrey'))\n\n# Draw a rectangle at the top-right-middle-middle-middle-middle-middle of the plot\nax.add_patch(plt.Rectangle((9, 9), 1, 1, color='darkslateblack'))\n\n# Draw a rectangle at the bottom-right-middle-middle-middle-middle-middle of the plot\nax.add_patch(plt.Rectangle((9, 0), 1, 1, color='darkslateblue'))\n\n# Draw a rectangle at the top-left-middle-middle-middle-middle-middle of the plot\nax.add_patch(plt.Rectangle((0, 9), 1, 1, color='darkslategrey'))\n\n# Draw a rectangle at the center-left-middle-middle-middle-middle-middle of the plot\nax.add_patch(plt.Rectangle((0, 4.5), 1, 1, color='darkslateblack'))\n\n# Draw a rectangle at the center-right-middle-middle-middle-middle-middle of the plot\nax.add_patch(plt.Rectangle((9, 4.5), 1, 1, color='darkslategrey'))\n\n# Draw a rectangle at the bottom-center-middle-middle-middle-middle-middle of the plot\nax.add_patch(plt.Rectangle((4.5, 0), 1, 1, color='darkslateblack'))\n\n# Draw a rectangle at the top-center-middle-middle-middle-middle-middle of the plot\nax.add_patch(plt.Rectangle((4.5, 9), 1, 1, color='darkslateblue'))\n\n# Draw a rectangle at the bottom-left-middle-middle-middle-middle-middle-middle of the plot\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='darkslategrey'))\n\n# Draw a rectangle at the top-right-middle-middle-middle-middle-middle-middle of the plot\nax.add_patch(plt.Rectangle((9, 9), 1, 1, color='darkslateblack'))\n\n# Draw a rectangle at the bottom-right-middle-middle-middle-middle-middle-middle of the plot\nax.add_patch(plt.Rectangle((9, 0), 1, 1, color='darkslateblue'))\n\n# Draw a rectangle at the top-left-middle-middle-middle-middle-middle-middle of the plot\nax.add_patch(plt.Rectangle((0, 9), 1, 1, color='darkslategrey'))\n\n# Draw a rectangle at the center-left-middle-middle-middle-middle-middle-middle of the plot\nax.add_patch(plt.Rectangle((0, 4.5), 1, 1, color='darkslateblack'))\n\n# Draw a rectangle at the center-right-middle-middle-middle-middle-middle-middle of the plot\nax.add_patch(plt.Rectangle((9, 4.5), 1, 1, color='darkslategrey'))\n\n# Draw a rectangle at the bottom-center-middle-middle-middle-middle-middle-middle of the plot\nax.add_patch(plt.Rectangle((4.5, 0), 1, 1, color='darkslateblack'))\n\n# Draw a rectangle at the top-center-middle-middle-middle-middle-middle-middle of the plot\nax.add_patch(plt.Rectangle((4.5, 9), 1, 1, color='darkslateblue'))\n\n# Draw a rectangle at the bottom-left-middle-middle-middle-middle-middle-middle-middle of the plot\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='darkslategrey'))\n\n# Draw a rectangle at the top-right-middle-middle-middle-middle-middle-middle-middle of the plot\nax.add_patch(plt.Rectangle((9, 9), 1, 1, color='darkslateblack'))\n\n# Draw a rectangle at the bottom-right-middle-middle-middle-middle-middle-middle-middle of the plot\nax.add_patch(plt.Rectangle((9, 0), 1, 1, color='darkslateblue'))\n\n# Draw a rectangle at the top-left-middle-middle-middle-middle-middle-middle-middle of the plot\nax.add_patch(plt.Rectangle((0, 9), 1, 1, color='darkslategrey'))\n\n# Draw a rectangle at the center-left-middle-middle-middle-middle-middle-middle-middle of the plot\nax.add_patch(plt.Rectangle((0, 4.5), 1, 1, color='darkslateblack'))\n\n# Draw a rectangle at the center-right-middle-middle-middle-middle-middle-middle-middle of the plot\nax.add_patch(plt.Rectangle((9, 4.5), 1, 1, color='darkslategrey'))\n\n# Draw a rectangle at the bottom-center-middle-middle-middle-middle-middle-middle-middle of the plot\nax.add_patch(plt.Rectangle((4.5, 0), 1, 1, color='darkslateblack'))\n\n# Draw a rectangle at the top-center-middle-middle-middle-middle-middle-middle-middle of the plot\nax.add_patch(plt.Rectangle((4.5, 9), 1, 1, color='darkslateblue'))\n\n# Draw a rectangle at the bottom-left-middle-middle-middle-middle-middle-middle-middle-middle of the plot\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='darkslategrey'))\n\n# Draw a rectangle at the top-right-middle-middle-middle-middle-middle-middle-middle-middle of the plot\nax.add_patch(plt.Rectangle((9, 9), 1, 1, color='darkslateblack'))\n\n# Draw a rectangle at the bottom-right-middle-middle-middle-middle-middle-middle-middle-middle of the plot\nax.add_patch(plt.Rectangle((9, 0), 1, 1, color='darkslateblue'))\n\n# Draw a rectangle at the top-left-middle-middle-middle-middle-middle-middle-middle-middle of the plot\nax.add_patch(plt.Rectangle((0, 9), 1, 1, color='darkslategrey'))\n\n# Draw a rectangle at the center-left-middle-middle-middle-middle-middle-middle-middle-middle of the plot\nax.add_patch(plt.Rectangle((0, 4.5), 1, 1, color='darkslateblack'))\n\n# Draw a rectangle at the center-right-middle-middle-middle-middle-middle-middle-middle-middle of the plot\nax.add_patch(plt.Rectangle((9, 4.5), 1, 1, color='darkslategrey'))\n\n# Draw a rectangle at the bottom-center-middle-middle-middle-middle-middle-middle-middle-middle of the plot\nax.add_patch(plt.Rectangle((4.5, 0), 1, 1, color='darkslateblack'))\n\n# Draw a rectangle at the top-center-middle-middle-middle-middle-middle-middle-middle-middle of the plot\nax.add_patch(plt.Rectangle((4.5, 9), 1, 1, color='darkslateblue'))\n\n# Draw a rectangle at the bottom-left-middle-middle-middle-middle-middle-middle-middle-middle-middle of the plot\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='darkslategrey'))\n\n# Draw a rectangle at the top-right-middle-middle-middle-middle-middle-middle-middle-middle-middle of the plot\nax.add_patch(plt.Rectangle((9, 9), 1, 1, color='darkslateblack'))\n\n# Draw a rectangle at the bottom-right-middle-middle-middle-middle-middle-middle-middle-middle-middle of the plot\nax.add_patch(plt.Rectangle((9, 0), 1, 1, color='darkslateblue'))\n\n# Draw a rectangle at the top-left-middle-middle-middle-middle-middle-middle-middle-middle-middle of the plot\nax.add_patch(plt.Rectangle((0, 9), 1, 1, color='darkslategrey'))\n\n# Draw a rectangle at the center-left-middle-middle-middle-middle-middle-middle-middle-middle-middle of the plot\nax.add_patch(plt.Rectangle((0, 4.5), 1, 1, color='darkslateblack'))\n\n# Draw a rectangle at the center-right-middle-middle-middle-middle-middle-middle-middle-middle-middle of the plot\nax.add_patch(plt.Rectangle((9, 4.5), 1, 1, color='darkslategrey'))\n\n# Draw a rectangle at the bottom-center-middle-middle-middle-middle-middle-middle-middle-middle-middle of the plot\nax.add_patch(plt.Rectangle((4.5, 0), 1, 1, color='darkslateblack'))\n\n# Draw a rectangle at the top-center-middle-middle-middle-middle-middle-middle-middle-middle-middle of the plot\nax.add_patch(plt.Rectangle((4.5, 9), 1, 1, color='darkslateblue'))\n\n# Draw a rectangle at the bottom-left-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle of the plot\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='darkslategrey'))\n\n# Draw a rectangle at the top-right-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle of the plot\nax.add_patch(plt.Rectangle((9, 9), 1, 1, color='darkslateblack'))\n\n# Draw a rectangle at the bottom-right-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle of the plot\nax.add_patch(plt.Rectangle((9, 0), 1, 1, color='darkslateblue'))\n\n# Draw a rectangle at the top-left-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle of the plot\nax.add_patch(plt.Rectangle((0, 9), 1, 1, color='darkslategrey'))\n\n# Draw a rectangle at the center-left-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle of the plot\nax.add_patch(plt.Rectangle((0, 4.5), 1, 1, color='darkslateblack'))\n\n# Draw a rectangle at the center-right-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle of the plot\nax.add_patch(plt.Rectangle((9, 4.5), 1, 1, color='darkslategrey'))\n\n# Draw a rectangle at the bottom-center-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle of the plot\nax.add_patch(plt.Rectangle((4.5, 0), 1, 1, color='darkslateblack'))\n\n# Draw a rectangle at the top-center-middle-middle-middle-middle-middle-middle-middle-middle-middle-middle of the plot"}
{"file": "dataset/ori_500/line_68.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 7.0))\n\n# Set the title and labels\nax.set_title('Trend Analysis')\nax.set_xlabel('Number of microphones')\nax.set_ylabel('WER (%)')\n\n# Plot the data\nax.plot([2, 3, 4, 5, 6, 7, 8], [2, 3, 4, 5, 6, 7, 8], 'b-', label='IHM Trend')\nax.plot([2, 3, 4, 5, 6, 7, 8], [2, 3, 4, 5, 6, 7, 8], 'm-', label='SDM Trend')\n\n# Add markers for each point\nfor i, txt in enumerate(['LibriCSS (test)', 'AMI (dev)']):\n    ax.annotate(txt, (2, 2), color='blue', fontsize=10)\n    ax.annotate(txt, (3, 3), color='purple', fontsize=10)\n    ax.annotate(txt, (4, 4), color='blue', fontsize=10)\n    ax.annotate(txt, (5, 5), color='purple', fontsize=10)\n    ax.annotate(txt, (6, 6), color='blue', fontsize=10)\n    ax.annotate(txt, (7, 7), color='purple', fontsize=10)\n    ax.annotate(txt, (8, 8), color='blue', fontsize=10)\n\n# Set the y-axis limits\nax.set_ylim(2, 9)\n\n# Set the x-axis limits\nax.set_xlim(2, 8)\n\n# Set the y-axis ticks\nax.set_yticks([2, 3, 4, 5, 6, 7, 8])\n\n# Set the x-axis ticks\nax.set_xticks([2, 3, 4, 5, 6, 7, 8])\n\n# Show the legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_69.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nx = [2, 3, 4, 5, 6, 7, 8]\ny = [0.2, 0.9, 0.8, 0.7, 0.6, 0.5, 0.4]\n\n# Plot\nplt.figure(figsize=(8.0, 5.0))\nplt.plot(x, y, 'b-')\nplt.xlabel('Number of Microphones')\nplt.ylabel('WER (%)')\n\n# Highlight 1\nplt.scatter(2, 0.2, color='blue', label='Highlight 1')\nplt.annotate('Highlight 1', (2, 0.2), textcoords=\"offset points\", xytext=(0,10), ha='center')\n\n# Highlight 2\nplt.scatter(3, 0.9, color='orange', label='Highlight 2')\nplt.annotate('Highlight 2', (3, 0.9), textcoords=\"offset points\", xytext=(0,10), ha='center')\n\n# Highlight 3\nplt.scatter(4, 0.8, color='orange', label='Highlight 3')\nplt.annotate('Highlight 3', (4, 0.8), textcoords=\"offset points\", xytext=(0,10), ha='center')\n\n# Highlight 4\nplt.scatter(5, 0.7, color='blue', label='Highlight 4')\nplt.annotate('Highlight 4', (5, 0.7), textcoords=\"offset points\", xytext=(0,10), ha='center')\n\n# Highlight 5\nplt.scatter(6, 0.6, color='orange', label='Highlight 5')\nplt.annotate('Highlight 5', (6, 0.6), textcoords=\"offset points\", xytext=(0,10), ha='center')\n\n# Highlight 6\nplt.scatter(7, 0.5, color='blue', label='Highlight 6')\nplt.annotate('Highlight 6', (7, 0.5), textcoords=\"offset points\", xytext=(0,10), ha='center')\n\n# Highlight 7\nplt.scatter(8, 0.4, color='orange', label='Highlight 7')\nplt.annotate('Highlight 7', (8, 0.4), textcoords=\"offset points\", xytext=(0,10), ha='center')\n\n# Threshold\nplt.axhline(y=0.7, color='r', linestyle='-')\n\n# Legend\nplt.legend()\n\n# Show plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, axes = plt.subplots(1, 4, figsize=(12, 4))\n\n# Plot the first subplot\nx = np.linspace(0.7, 0.9, 100)\ny = np.sin(x * np.pi / 2)\naxes[0].plot(x, y, 'b-')\naxes[0].fill_between(x, y, color='lightblue')\naxes[0].set_title('a Positive bound.')\naxes[0].set_xlabel('Time')\naxes[0].set_ylabel('Weight')\n\n# Plot the second subplot\nx = np.linspace(0.1, 0.4, 100)\ny = np.cos(x * np.pi / 2)\naxes[1].plot(x, y, 'b-')\naxes[1].fill_between(x, y, color='lightblue')\naxes[1].set_title('b Negative bound.')\naxes[1].set_xlabel('Time')\naxes[1].set_ylabel('Weight')\n\n# Plot the third subplot\nx = np.linspace(0, 1, 100)\ny = np.tan(x * np.pi / 2)\naxes[2].plot(x, y, 'b-')\naxes[2].fill_between(x, y, color='lightblue')\naxes[2].set_title('c Contrastive loss weight.')\naxes[2].set_xlabel('Time')\naxes[2].set_ylabel('Weight')\n\n# Plot the fourth subplot\nx = np.linspace(0, 10, 100)\ny = np.exp(-x)\naxes[3].plot(x, y, 'b-')\naxes[3].fill_between(x, y, color='lightblue')\naxes[3].set_title('d Fuzzy coefficient.')\naxes[3].set_xlabel('Time')\naxes[3].set_ylabel('Weight')\n\n# Display the plot\nplt.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/line_70.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(12, 5))\n\n# Plot the data\nax.plot([2, 3, 4, 5, 6, 7, 8], [0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3], 'g-')\nax.plot([2, 3, 4, 5, 6, 7, 8], [0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3], 'r-')\n\n# Add markers\nax.plot(3, 0.8, 'ro')\nax.plot(5, 0.6, 'ro')\nax.plot(7, 0.4, 'ro')\n\n# Add text\nax.text(2, 0.9, 'Highlight 3', color='yellow')\nax.text(4, 0.7, 'Highlight 5', color='yellow')\nax.text(6, 0.5, 'Highlight 6', color='yellow')\n\n# Set the title and labels\nax.set_title('Highlight 3')\nax.set_xlabel('Number of Microphones')\nax.set_ylabel('WER (%)')\n\n# Add a rectangle for the legend\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"yellow\")\nred_line = plt.Line2D([0], [0], color='red', lw=4)\ngreen_line = plt.Line2D([0], [0], color='green', lw=4)\n\n# Add the legend\nax.legend([rect, red_line, green_line], ['LibriCSS WER', 'Threshold', 'AMiWER'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_71.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(6.0, 12.0))\n\n# Set the title of the plot\nax.set_title('SPMotif-0.5')\n\n# Create a rectangle with a blue color\nrect = plt.Rectangle((0.1, 0.4), 0.8, 0.2, color='blue')\nax.add_patch(rect)\n\n# Create a rectangle with a green color\nrect = plt.Rectangle((0.3, 0.4), 0.8, 0.2, color='green')\nax.add_patch(rect)\n\n# Create a rectangle with a light blue color\nrect = plt.Rectangle((0.1, 0.2), 0.8, 0.2, color='lightblue')\nax.add_patch(rect)\n\n# Create a rectangle with a light green color\nrect = plt.Rectangle((0.3, 0.2), 0.8, 0.2, color='lightgreen')\nax.add_patch(rect)\n\n# Create a rectangle with a light gray color\nrect = plt.Rectangle((0.1, 0.6), 0.8, 0.2, color='lightgray')\nax.add_patch(rect)\n\n# Create a rectangle with a light yellow color\nrect = plt.Rectangle((0.3, 0.6), 0.8, 0.2, color='lightyellow')\nax.add_patch(rect)\n\n# Create a rectangle with a light cyan color\nrect = plt.Rectangle((0.1, 0.8), 0.8, 0.2, color='lightcyan')\nax.add_patch(rect)\n\n# Create a rectangle with a light magenta color\nrect = plt.Rectangle((0.3, 0.8), 0.8, 0.2, color='lightmagenta')\nax.add_patch(rect)\n\n# Create a rectangle with a light orange color\nrect = plt.Rectangle((0.1, 1.0), 0.8, 0.2, color='lightorange')\nax.add_patch(rect)\n\n# Create a rectangle with a light brown color\nrect = plt.Rectangle((0.3, 1.0), 0.8, 0.2, color='lightbrown')\nax.add_patch(rect)\n\n# Create a rectangle with a light pink color\nrect = plt.Rectangle((0.1, 1.2), 0.8, 0.2, color='lightpink')\nax.add_patch(rect)\n\n# Create a rectangle with a light purple color\nrect = plt.Rectangle((0.3, 1.2), 0.8, 0.2, color='lightpurple')\nax.add_patch(rect)\n\n# Create a rectangle with a light teal color\nrect = plt.Rectangle((0.1, 1.4), 0.8, 0.2, color='lightteal')\nax.add_patch(rect)\n\n# Create a rectangle with a light olive color\nrect = plt.Rectangle((0.3, 1.4), 0.8, 0.2, color='lightolive')\nax.add_patch(rect)\n\n# Create a rectangle with a light silver color\nrect = plt.Rectangle((0.1, 1.6), 0.8, 0.2, color='lightsilver')\nax.add_patch(rect)\n\n# Create a rectangle with a light gold color\nrect = plt.Rectangle((0.3, 1.6), 0.8, 0.2, color='lightgold')\nax.add_patch(rect)\n\n# Create a rectangle with a light bronze color\nrect = plt.Rectangle((0.1, 1.8), 0.8, 0.2, color='lightbronze')\nax.add_patch(rect)\n\n# Create a rectangle with a light navy color\nrect = plt.Rectangle((0.3, 1.8), 0.8, 0.2, color='lightnavy')\nax.add_patch(rect)\n\n# Create a rectangle with a light maroon color\nrect = plt.Rectangle((0.1, 2.0), 0.8, 0.2, color='lightmaroon')\nax.add_patch(rect)\n\n# Create a rectangle with a light plum color\nrect = plt.Rectangle((0.3, 2.0), 0.8, 0.2, color='lightplum')\nax.add_patch(rect)\n\n# Create a rectangle with a light apricot color\nrect = plt.Rectangle((0.1, 2.2), 0.8, 0.2, color='lightapricot')\nax.add_patch(rect)\n\n# Create a rectangle with a light beige color\nrect = plt.Rectangle((0.3, 2.2), 0.8, 0.2, color='lightbeige')\nax.add_patch(rect)\n\n# Create a rectangle with a light lavender color\nrect = plt.Rectangle((0.1, 2.4), 0.8, 0.2, color='lightlavender')\nax.add_patch(rect)\n\n# Create a rectangle with a light azure color\nrect = plt.Rectangle((0.3, 2.4), 0.8, 0.2, color='lightazure')\nax.add_patch(rect)\n\n# Create a rectangle with a light fuchsia color\nrect = plt.Rectangle((0.1, 2.6), 0.8, 0.2, color='lightfuchsia')\nax.add_patch(rect)\n\n# Create a rectangle with a light sienna color\nrect = plt.Rectangle((0.3, 2.6), 0.8, 0.2, color='lightsienna')\nax.add_patch(rect)\n\n# Create a rectangle with a light ochre color\nrect = plt.Rectangle((0.1, 2.8), 0.8, 0.2, color='lightochre')\nax.add_patch(rect)\n\n# Create a rectangle with a light umber color\nrect = plt.Rectangle((0.3, 2.8), 0.8, 0.2, color='lightumber')\nax.add_patch(rect)\n\n# Create a rectangle with a light umber color\nrect = plt.Rectangle((0.1, 3.0), 0.8, 0.2, color='lightumber')\nax.add_patch(rect)\n\n# Create a rectangle with a light umber color\nrect = plt.Rectangle((0.3, 3.0), 0.8, 0.2, color='lightumber')\nax.add_patch(rect)\n\n# Create a rectangle with a light umber color\nrect = plt.Rectangle((0.1, 3.2), 0.8, 0.2, color='lightumber')\nax.add_patch(rect)\n\n# Create a rectangle with a light umber color\nrect = plt.Rectangle((0.3, 3.2), 0.8, 0.2, color='lightumber')\nax.add_patch(rect)\n\n# Create a rectangle with a light umber color\nrect = plt.Rectangle((0.1, 3.4), 0.8, 0.2, color='lightumber')\nax.add_patch(rect)\n\n# Create a rectangle with a light umber color\nrect = plt.Rectangle((0.3, 3.4), 0.8, 0.2, color='lightumber')\nax.add_patch(rect)\n\n# Create a rectangle with a light umber color\nrect = plt.Rectangle((0.1, 3.6), 0.8, 0.2, color='lightumber')\nax.add_patch(rect)\n\n# Create a rectangle with a light umber color\nrect = plt.Rectangle((0.3, 3.6), 0.8, 0.2, color='lightumber')\nax.add_patch(rect)\n\n# Create a rectangle with a light umber color\nrect = plt.Rectangle((0.1, 3.8), 0.8, 0.2, color='lightumber')\nax.add_patch(rect)\n\n# Create a rectangle with a light umber color\nrect = plt.Rectangle((0.3, 3.8), 0.8, 0.2, color='lightumber')\nax.add_patch(rect)\n\n# Create a rectangle with a light umber color\nrect = plt.Rectangle((0.1, 4.0), 0.8, 0.2, color='lightumber')\nax.add_patch(rect)\n\n# Create a rectangle with a light umber color\nrect = plt.Rectangle((0.3, 4.0), 0.8, 0.2, color='lightumber')\nax.add_patch(rect)\n\n# Create a rectangle with a light umber color\nrect = plt.Rectangle((0.1, 4.2), 0.8, 0.2, color='lightumber')\nax.add_patch(rect)\n\n# Create a rectangle with a light umber color\nrect = plt.Rectangle((0.3, 4.2), 0.8, 0.2, color='lightumber')\nax.add_patch(rect)\n\n# Create a rectangle with a light umber color\nrect = plt.Rectangle((0.1, 4.4), 0.8, 0.2, color='lightumber')\nax.add_patch(rect)\n\n# Create a rectangle with a light umber color\nrect = plt.Rectangle((0.3, 4.4), 0.8, 0.2, color='lightumber')\nax.add_patch(rect)\n\n# Create a rectangle with a light umber color\nrect = plt.Rectangle((0.1, 4.6), 0.8, 0.2, color='lightumber')\nax.add_patch(rect)\n\n# Create a rectangle with a light umber color\nrect = plt.Rectangle((0.3, 4.6), 0.8, 0.2, color='lightumber')\nax.add_patch(rect)\n\n# Create a rectangle with a light umber color\nrect = plt.Rectangle((0.1, 4.8), 0.8, 0.2, color='lightumber')\nax.add_patch(rect)\n\n# Create a rectangle with a light umber color\nrect = plt.Rectangle((0.3, 4.8), 0.8, 0.2, color='lightumber')\nax.add_patch(rect)\n\n# Create a rectangle with a light umber color\nrect = plt.Rectangle((0.1, 5.0), 0.8, 0.2, color='lightumber')\nax.add_patch(rect)\n\n# Create a rectangle with a light umber color\nrect = plt.Rectangle((0.3, 5.0), 0.8, 0.2, color='lightumber')\nax.add_patch(rect)\n\n# Create a rectangle with a light umber color\nrect = plt.Rectangle((0.1, 5.2), 0.8, 0.2, color='lightumber')\nax.add_patch(rect)\n\n# Create a rectangle with a light umber color\nrect = plt.Rectangle((0.3, 5.2), 0.8, 0.2, color='lightumber')\nax.add_patch(rect)\n\n# Create a rectangle with a light umber color\nrect = plt.Rectangle((0.1, 5.4), 0.8, 0.2, color='lightumber')\nax.add_patch(rect)\n\n# Create a rectangle with a light umber color\nrect = plt.Rectangle((0.3, 5.4), 0.8, 0.2, color='lightumber')\nax.add_patch(rect)\n\n# Create a rectangle with a light umber color\nrect = plt.Rectangle((0.1, 5.6), 0.8, 0.2, color='lightumber')\nax.add_patch(rect)\n\n# Create a rectangle with a light umber color\nrect = plt.Rectangle((0.3, 5.6), 0.8, 0.2, color='lightumber')\nax.add_patch(rect)\n\n# Create a rectangle with a light umber color\nrect = plt.Rectangle((0.1, 5.8), 0.8, 0.2, color='lightumber')\nax.add_patch(rect)\n\n# Create a rectangle with a light umber color\nrect = plt.Rectangle((0.3, 5.8), 0.8, 0.2, color='lightumber')\nax.add_patch(rect)\n\n# Create a rectangle with a light umber color\nrect = plt.Rectangle((0.1, 6.0), 0.8, 0.2, color='lightumber')\nax.add_patch(rect)\n\n# Create a rectangle with a light umber color\nrect = plt.Rectangle((0.3, 6.0), 0.8, 0.2, color='lightumber')\nax.add_patch(rect)\n\n# Create a rectangle with a light umber color\nrect = plt.Rectangle((0.1, 6.2), 0.8, 0.2, color='lightumber')\nax.add_patch(rect)\n\n# Create a rectangle with a light umber color\nrect = plt.Rectangle((0.3, 6.2), 0.8, 0.2, color='lightumber')\nax.add_patch(rect)\n\n# Create a rectangle with a light umber color\nrect = plt.Rectangle((0.1, 6.4), 0.8, 0.2, color='lightumber')\nax.add_patch(rect)\n\n# Create a rectangle with a light umber color\nrect = plt.Rectangle((0.3, 6.4), 0.8, 0.2, color='lightumber')\nax.add_patch(rect)\n\n# Create a rectangle with a light umber color\nrect = plt.Rectangle((0.1, 6.6), 0.8, 0.2, color='lightumber')\nax.add_patch(rect)\n\n# Create a rectangle with a light umber color\nrect = plt.Rectangle((0.3, 6.6), 0.8, 0.2, color='lightumber')\nax.add_patch(rect)\n\n# Create a rectangle with a light umber color\nrect = plt.Rectangle((0.1, 6.8), 0.8, 0.2, color='lightumber')\nax.add_patch(rect)\n\n# Create a rectangle with a light umber color\nrect = plt.Rectangle((0.3, 6.8), 0.8, 0.2, color='lightumber')\nax.add_patch(rect)\n\n# Create a rectangle with a light umber color\nrect = plt.Rectangle((0.1, 7.0), 0.8, 0.2, color='lightumber')\nax.add_patch(rect)\n\n# Create a rectangle with a light umber color\nrect = plt.Rectangle((0.3, 7.0), 0.8, 0.2, color='lightumber')\nax.add_patch(rect)\n\n# Create a rectangle with a light umber color\nrect = plt.Rectangle((0.1, 7.2), 0.8, 0.2, color='lightumber')\nax.add_patch(rect)\n\n# Create a rectangle with a light umber color\nrect = plt.Rectangle((0.3, 7.2), 0.8, 0.2, color='lightumber')\nax.add_patch(rect)\n\n# Create a rectangle with a light umber color\nrect = plt.Rectangle((0.1, 7.4), 0.8, 0.2, color='lightumber')\nax.add_patch(rect)\n\n# Create a rectangle with a light umber color\nrect = plt.Rectangle((0.3, 7.4), 0.8, 0.2, color='lightumber')\nax.add_patch(rect)\n\n# Create a rectangle with a light umber color\nrect = plt.Rectangle((0.1, 7.6), 0.8, 0.2, color='lightumber')\nax.add_patch(rect)\n\n# Create a rectangle with a light umber color\nrect = plt.Rectangle((0.3, 7.6), 0.8, 0.2, color='lightumber')\nax.add_patch(rect)\n\n# Create a rectangle with a light umber color\nrect = plt.Rectangle((0.1, 7.8), 0.8, 0.2, color='lightumber')\nax.add_patch(rect)\n\n# Create a rectangle with a light umber color\nrect = plt.Rectangle((0.3, 7.8), 0.8, 0.2, color='lightumber')\nax.add_patch(rect)\n\n# Create a rectangle with a light umber color\nrect = plt.Rectangle((0.1, 8.0), 0.8, 0.2, color='lightumber')\nax.add_patch(rect)\n\n# Create a rectangle with a light umber color\nrect = plt.Rectangle((0.3, 8.0), 0.8, 0.2, color='lightumber')\nax.add_patch(rect)\n\n# Create a rectangle with a light umber color\nrect = plt.Rectangle((0.1, 8.2), 0.8, 0.2, color='lightumber')\nax.add_patch(rect)\n\n# Create a rectangle with a light umber color\nrect = plt.Rectangle((0.3, 8.2), 0.8, 0.2, color='lightumber')\nax.add_patch(rect)\n\n# Create a rectangle with a light umber color\nrect = plt.Rectangle((0.1, 8.4), 0.8, 0.2, color='lightumber')\nax.add_patch(rect)\n\n# Create a rectangle with a light umber color\nrect = plt.Rectangle((0.3, 8.4), 0.8, 0.2, color='lightumber')\nax.add_patch(rect)\n\n# Create a rectangle with a light umber color\nrect = plt.Rectangle((0.1, 8.6), 0.8, 0.2, color='lightumber')\nax.add_patch(rect)\n\n# Create a rectangle with a light umber color\nrect = plt.Rectangle((0.3, 8.6), 0.8, 0.2, color='lightumber')\nax.add_patch(rect)\n\n# Create a rectangle with a light umber color\nrect = plt.Rectangle((0.1, 8.8), 0.8, 0.2, color='lightumber')\nax.add_patch(rect)\n\n# Create a rectangle with a light umber color\nrect = plt.Rectangle((0.3, 8.8), 0.8, 0.2, color='lightumber')\nax.add_patch(rect)\n\n# Create a rectangle with a light umber color\nrect = plt.Rectangle((0.1, 9.0), 0.8, 0.2, color='lightumber')\nax.add_patch(rect)\n\n# Create a rectangle with a light umber color\nrect = plt.Rectangle((0.3, 9.0), 0.8, 0.2, color='lightumber')\nax.add_patch(rect)\n\n# Create"}
{"file": "dataset/ori_500/line_72.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Set the background color of the plot\nax.set_facecolor('lightgreen')\n\n# Set the grid lines\nax.grid(True)\n\n# Set the x-axis limits\nax.set_xlim(0.1, 1.0)\n\n# Set the y-axis limits\nax.set_ylim(-80, 80)\n\n# Set the x-axis ticks\nax.set_xticks([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0])\n\n# Set the y-axis ticks\nax.set_yticks([-80, -60, -40, -20, 0, 20, 40, 60, 80])\n\n# Set the x-axis label\nax.set_xlabel('Ratio r')\n\n# Set the y-axis label\nax.set_ylabel('Performance')\n\n# Set the title\nax.set_title('Dynamic Performance Trends')\n\n# Set the legend\nax.legend(['PNA + ours', 'GIN + ours'])\n\n# Set the line colors\nax.plot([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], color='purple')\nax.plot([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], color='orange')\n\n# Set the marker colors\nax.plot([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 'o', color='purple')\nax.plot([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 'o', color='orange')\n\n# Set the line width\nax.plot([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], linewidth=2)\nax.plot([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], linewidth=2)\n\n# Set the marker size\nax.plot([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], markersize=10)\nax.plot([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], markersize=10)\n\n# Set the line style\nax.plot([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], linestyle='-')\nax.plot([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], linestyle='-')\n\n# Set the line cap\nax.plot([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], solid_capstyle='round')\nax.plot([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], solid_capstyle='round')\n\n# Set the line join\nax.plot([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], solid_joinstyle='round')\nax.plot([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], solid_joinstyle='round')\n\n# Set the line dash pattern\nax.plot([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], dashes=[2, 2])\nax.plot([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], dashes=[2, 2])\n\n# Set the line dash offset\nax.plot([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], dash_offset=0)\nax.plot([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], dash_offset=0)\n\n# Set the line antialiased\nax.plot([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], antialiased=True)\nax.plot([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], antialiased=True)\n\n# Set the line marker edge color\nax.plot([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], markeredgecolor='black')\nax.plot([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], markeredgecolor='black')\n\n# Set the line marker face color\nax.plot([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], markerfacecolor='red')\nax.plot([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], markerfacecolor='red')\n\n# Set the line marker size\nax.plot([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], markersize=10)\nax.plot([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], markersize=10)\n\n# Set the line marker edge width\nax.plot([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], markeredgewidth=1)\nax.plot([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], markeredgewidth=1)\n\n# Set the line marker face color\nax.plot([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], markerfacecolor='blue')\nax.plot([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], markerfacecolor='blue')\n\n# Set the line marker size\nax.plot([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], markersize=10)\nax.plot([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], markersize=10)\n\n# Set the line marker edge width\nax.plot([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], markeredgewidth=1)\nax.plot([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], markeredgewidth=1)\n\n# Set the line marker face color\nax.plot([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], markerfacecolor='green')\nax.plot([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], markerfacecolor='green')\n\n# Set the line marker size\nax.plot([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], markersize=10)\nax.plot([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], markersize=10)\n\n# Set the line marker edge width\nax.plot([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], markeredgewidth=1)\nax.plot([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], markeredgewidth=1)\n\n# Set the line marker face color\nax.plot([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], markerfacecolor='yellow')\nax.plot([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], markerfacecolor='yellow"}
{"file": "dataset/ori_500/line_73.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Modern Linear Performance Evaluation')\n\n# Set the x-axis label\nax.set_xlabel('Ratio r')\n\n# Set the y-axis label\nax.set_ylabel('Performance')\n\n# Set the x-axis limits\nax.set_xlim(0.1, 1.0)\n\n# Set the y-axis limits\nax.set_ylim(0.1, 1.5)\n\n# Set the grid lines\nax.grid(True)\n\n# Define the data points\nx = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0]\ny1 = [0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9]\ny2 = [0.8, 0.8, 0.8, 0.8, 0.8, 0.8, 0.8, 0.8, 0.8, 0.8]\ny3 = [0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7]\ny4 = [0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6]\ny5 = [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5]\ny6 = [0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4]\ny7 = [0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3]\ny8 = [0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2]\ny9 = [0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1]\n\n# Plot the data points\nax.plot(x, y1, 'bo-')\nax.plot(x, y2, 'go-')\nax.plot(x, y3, 'ro-')\nax.plot(x, y4, 'co-')\nax.plot(x, y5, 'mo-')\nax.plot(x, y6, 'yo-')\nax.plot(x, y7, 'ko-')\nax.plot(x, y8, 'bo-')\nax.plot(x, y9, 'go-')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_74.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Dynamic Model Performance')\n\n# Set the x-axis label\nax.set_xlabel('Ratio r')\n\n# Set the y-axis label\nax.set_ylabel('Performance')\n\n# Define the data points\nx = [0.0, 0.2, 0.4, 0.6, 0.8, 1.0]\ny1 = [0.5, 0.7, 0.9, 0.8, 0.6, 0.4]\ny2 = [0.3, 0.5, 0.7, 0.6, 0.4, 0.2]\n\n# Plot the data points\nax.plot(x, y1, 'bo-')\nax.plot(x, y2, 'ro-')\n\n# Add a legend\nax.legend(['PNA + ours', 'GIN + ours'])\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_75.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Set the title of the plot\nax.set_title('Comparison of Model Accuracies')\n\n# Set the x-axis label\nax.set_xlabel('Ensemble Size')\n\n# Set the y-axis label\nax.set_ylabel('Accuracy')\n\n# Set the x-ticks\nax.set_xticks([5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29])\n\n# Set the y-ticks\nax.set_yticks(range(60, 86, 5))\n\n# Set the grid\nax.grid(True)\n\n# Create a rectangle for the legend\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"w\", fill=False, edgecolor='none', linewidth=0)\nax.legend([rect], ['Model 1 Mean Accuracy', 'Model 2 Mean Accuracy'], loc='upper left')\n\n# Plot the data\nax.plot([5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29], [70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94], color='blue')\nax.plot([5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29], [72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96], color='red')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_76.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 12.0))\n\n# Set the title of the plot\nax.set_title('Performance of Model X')\n\n# Set the x-axis label\nax.set_xlabel('Iteration')\n\n# Set the y-axis label\nax.set_ylabel('Score')\n\n# Plot the data\nax.plot([1, 2, 3, 4, 5, 6, 7, 8, 9], [90, 92, 95, 93, 91, 94, 92, 95, 93], 'ro-')\nax.plot([1, 2, 3, 4, 5, 6, 7, 8, 9], [85, 87, 90, 88, 86, 89, 87, 90, 88], 'go-')\nax.plot([1, 2, 3, 4, 5, 6, 7, 8, 9], [80, 82, 85, 83, 81, 84, 82, 85, 83], 'bo-')\n\n# Add a legend\nax.legend(['Config A - Model X', 'Config B - Model X', 'Config C - Model X'])\n\n# Set the x-axis ticks\nax.set_xticks([1, 2, 3, 4, 5, 6, 7, 8, 9])\n\n# Set the y-axis ticks\nax.set_yticks([70, 75, 80, 85, 90, 95])\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_77.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 12.0))\n\n# Set the title of the plot\nax.set_title('Performance of Llama')\n\n# Set the x-axis label\nax.set_xlabel('Iteration')\n\n# Set the y-axis label\nax.set_ylabel('Score')\n\n# Set the x-ticks\nax.set_xticks([2, 4, 6, 8, 10])\n\n# Set the y-ticks\nax.set_yticks(range(70, 90, 5))\n\n# Plot the data\nax.plot([2, 4, 6, 8, 10], [80, 82, 84, 86, 88], 'r-')\nax.plot([2, 4, 6, 8, 10], [75, 77, 79, 81, 83], 'g-')\nax.plot([2, 4, 6, 8, 10], [70, 72, 74, 76, 78], 'b-')\n\n# Add a legend\nax.legend(['Config A - Llama', 'Config B - Llama', 'Config C - Llama'])\n\n# Add markers\nax.plot([2, 4, 6, 8, 10], [80, 82, 84, 86, 88], 'ro')\nax.plot([2, 4, 6, 8, 10], [75, 77, 79, 81, 83], 'go')\nax.plot([2, 4, 6, 8, 10], [70, 72, 74, 76, 78], 'bo')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_78.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(10.0, 10.0))\n\n# Set the background color of the plot\nax.set_facecolor('#f0f0f0')\n\n# Set the title of the plot\nax.set_title('Sales Growth Over Time')\n\n# Set the x-axis label\nax.set_xlabel('Quarter')\n\n# Set the y-axis label\nax.set_ylabel('Sales Growth')\n\n# Set the x-ticks\nax.set_xticks([1, 2, 3, 4])\n\n# Set the x-tick labels\nax.set_xticklabels(['Q1', 'Q2', 'Q3', 'Q4'])\n\n# Set the y-ticks\nax.set_yticks([0.5, 1, 1.5, 2, 2.5, 3])\n\n# Set the y-tick labels\nax.set_yticklabels(['0.5', '1', '1.5', '2', '2.5', '3'])\n\n# Plot the data\nax.plot([1, 2, 3, 4], [1.5, 1.8, 2.2, 2.5], color='red', marker='o', label='Brand A Sales Growth')\nax.plot([1, 2, 3, 4], [1.2, 1.6, 1.9, 2.2], color='blue', marker='^', label='Brand B Sales Growth')\nax.plot([1, 2, 3, 4], [1.4, 1.7, 1.9, 2.1], color='green', marker='s', label='Brand C Sales Growth')\nax.plot([1, 2, 3, 4], [1.3, 1.6, 1.8, 2.0], color='cyan', marker='p', label='Brand D Sales Growth')\nax.plot([1, 2, 3, 4], [1.2, 1.5, 1.7, 1.9], color='magenta', marker='h', label='Brand E Sales Growth')\nax.plot([1, 2, 3, 4], [1.1, 1.4, 1.6, 1.8], color='yellow', marker='D', label='Brand F Sales Growth')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_79.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(18, 4))\n\n# Define the data\ntime = np.arange(100, 800, 100)\nmetric_value = np.array([0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2.0])\n\n# Plot the data\nax.plot(time, metric_value, 'o-')\n\n# Add labels and title\nax.set_xlabel('Time (s)')\nax.set_ylabel('Metric Value')\nax.set_title('Traffic Performance')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nx = ['Passive', 'Rail', 'Replay', 'Sportive']\ny1 = [1.4, 1.2, 1.0, 0.8]\ny2 = [1.2, 1.0, 0.8, 0.6]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Plot the data\nax.plot(x, y1, color='black')\nax.plot(x, y2, color='red')\n\n# Set the title and labels\nax.set_title('Relaxation Level')\nax.set_xlabel('Driving Style')\nax.set_ylabel('Relaxation Level')\n\n# Add markers for each point\nfor i, txt in enumerate(x):\n    ax.annotate(txt, (x[i], y1[i]), textcoords=\"offset points\", xytext=(0,10), ha='center')\n    ax.annotate(txt, (x[i], y2[i]), textcoords=\"offset points\", xytext=(0,10), ha='center')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_80.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\nx = ['Phase 1', 'Phase 2', 'Phase 3', 'Phase 4', 'Phase 5']\ny1 = [20, 25, 30, 35, 40]\ny2 = [40, 45, 50, 55, 60]\ny3 = [60, 65, 70, 75, 80]\ny4 = [80, 85, 90, 95, 100]\ny5 = [100, 105, 110, 115, 120]\n\n# Create a figure and a set of subplots\nfig, axs = plt.subplots(3, 2, figsize=(9.0, 6.0))\n\n# Plot the data\naxs[0, 0].plot(x, y1, color='purple')\naxs[0, 0].set_title('Category A Growth')\naxs[0, 0].set_xlabel('Growth Phase')\naxs[0, 0].set_ylabel('Cumulative Value')\n\naxs[0, 1].plot(x, y2, color='orange')\naxs[0, 1].set_title('Category B Growth')\naxs[0, 1].set_xlabel('Growth Phase')\naxs[0, 1].set_ylabel('Cumulative Value')\n\naxs[1, 0].plot(x, y3, color='blue')\naxs[1, 0].set_title('Category C Growth')\naxs[1, 0].set_xlabel('Growth Phase')\naxs[1, 0].set_ylabel('Cumulative Value')\n\naxs[1, 1].plot(x, y4, color='green')\naxs[1, 1].set_title('Category D Growth')\naxs[1, 1].set_xlabel('Growth Phase')\naxs[1, 1].set_ylabel('Cumulative Value')\n\naxs[2, 0].plot(x, y5, color='red')\naxs[2, 0].set_title('Category E Growth')\naxs[2, 0].set_xlabel('Growth Phase')\naxs[2, 0].set_ylabel('Cumulative Value')\n\naxs[2, 1].plot(x, y5, color='yellow')\naxs[2, 1].set_title('Category F Growth')\naxs[2, 1].set_xlabel('Growth Phase')\naxs[2, 1].set_ylabel('Cumulative Value')\n\n# Adjust layout\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/line_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(9.0, 6.0))\n\n# Set the x-axis limits\nax.set_xlim(4, 30)\n\n# Set the y-axis limits\nax.set_ylim(10, 15)\n\n# Draw horizontal lines\nfor i in range(10, 15, 2):\n    ax.axhline(i, color='gray', linestyle='--')\n\n# Draw vertical lines\nfor i in range(4, 31, 5):\n    ax.axvline(i, color='gray', linestyle='--')\n\n# Plot the first line\nax.plot([4, 6, 10, 15, 20, 25, 30], [10, 12, 14, 16, 18, 20, 22], 'b-')\n\n# Plot the second line\nax.plot([4, 6, 10, 15, 20, 25, 30], [10, 12, 14, 16, 18, 20, 22], 'r-')\n\n# Add a legend\nax.legend(['Standard', 'Constrained'])\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the pie chart\nregions = ['North', 'East', 'South', 'West']\nliteracy_rates = [35, 25, 20, 15]\n\n# Create a figure and axis for the pie chart\nfig, ax = plt.subplots(figsize=(8, 8))\n\n# Plot the pie chart\nax.pie(literacy_rates, labels=regions, autopct='%1.1f%%', startangle=90)\n\n# Set the title of the pie chart\nax.set_title('Literacy Rate by Region')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8, 2))\n\n# Set the background color of the plot\nax.set_facecolor('white')\n\n# Set the title of the plot\nax.set_title('Beauty Attributes')\n\n# Set the x-axis label\nax.set_xlabel('Sensitive attribute')\n\n# Set the y-axis label\nax.set_ylabel('Attractive attribute')\n\n# Set the x-axis limits\nax.set_xlim(-1, 1)\n\n# Set the y-axis limits\nax.set_ylim(0, 1)\n\n# Draw a horizontal line at y=0.5\nax.axhline(y=0.5, color='r', linestyle='-')\n\n# Draw a vertical line at x=0.5\nax.axvline(x=0.5, color='b', linestyle='-')\n\n# Draw a rectangle with a width of 1 and a height of 1\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='blue'))\n\n# Draw a rectangle with a width of 1 and a height of 1\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='red'))\n\n# Draw a rectangle with a width of 1 and a height of 1\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='green'))\n\n# Draw a rectangle with a width of 1 and a height of 1\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='yellow'))\n\n# Draw a rectangle with a width of 1 and a height of 1\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='purple'))\n\n# Draw a rectangle with a width of 1 and a height of 1\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='orange'))\n\n# Draw a rectangle with a width of 1 and a height of 1\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='pink'))\n\n# Draw a rectangle with a width of 1 and a height of 1\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='brown'))\n\n# Draw a rectangle with a width of 1 and a height of 1\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='gray'))\n\n# Draw a rectangle with a width of 1 and a height of 1\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='cyan'))\n\n# Draw a rectangle with a width of 1 and a height of 1\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='magenta'))\n\n# Draw a rectangle with a width of 1 and a height of 1\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lime'))\n\n# Draw a rectangle with a width of 1 and a height of 1\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='silver'))\n\n# Draw a rectangle with a width of 1 and a height of 1\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='gold'))\n\n# Draw a rectangle with a width of 1 and a height of 1\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='navy'))\n\n# Draw a rectangle with a width of 1 and a height of 1\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='olive'))\n\n# Draw a rectangle with a width of 1 and a height of 1\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='indigo'))\n\n# Draw a rectangle with a width of 1 and a height of 1\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='violet'))\n\n# Draw a rectangle with a width of 1 and a height of 1\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='azure'))\n\n# Draw a rectangle with a width of 1 and a height of 1\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='fuchsia'))\n\n# Draw a rectangle with a width of 1 and a height of 1\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='chartreuse'))\n\n# Draw a rectangle with a width of 1 and a height of 1\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='saddlebrown'))\n\n# Draw a rectangle with a width of 1 and a height of 1\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='tan'))\n\n# Draw a rectangle with a width of 1 and a height of 1\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='peru'))\n\n# Draw a rectangle with a width of 1 and a height of 1\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='beige'))\n\n# Draw a rectangle with a width of 1 and a height of 1\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='ivory'))\n\n# Draw a rectangle with a width of 1 and a height of 1\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='seashell'))\n\n# Draw a rectangle with a width of 1 and a height of 1\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='cornsilk'))\n\n# Draw a rectangle with a width of 1 and a height of 1\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='blanchedalmond'))\n\n# Draw a rectangle with a width of 1 and a height of 1\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='bisque'))\n\n# Draw a rectangle with a width of 1 and a height of 1\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='navajowhite'))\n\n# Draw a rectangle with a width of 1 and a height of 1\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='moccasin'))\n\n# Draw a rectangle with a width of 1 and a height of 1\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='papayawhip'))\n\n# Draw a rectangle with a width of 1 and a height of 1\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='blanchedalmond'))\n\n# Draw a rectangle with a width of 1 and a height of 1\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lemonchiffon'))\n\n# Draw a rectangle with a width of 1 and a height of 1\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lightgoldenrodyellow'))\n\n# Draw a rectangle with a width of 1 and a height of 1\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lightyellow'))\n\n# Draw a rectangle with a width of 1 and a height of 1\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lightgoldenrodyellow'))\n\n# Draw a rectangle with a width of 1 and a height of 1\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lightyellow'))\n\n# Draw a rectangle with a width of 1 and a height of 1\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lightgoldenrodyellow'))\n\n# Draw a rectangle with a width of 1 and a height of 1\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lightyellow'))\n\n# Draw a rectangle with a width of 1 and a height of 1\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lightgoldenrodyellow'))\n\n# Draw a rectangle with a width of 1 and a height of 1\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lightyellow'))\n\n# Draw a rectangle with a width of 1 and a height of 1\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lightgoldenrodyellow'))\n\n# Draw a rectangle with a width of 1 and a height of 1\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lightyellow'))\n\n# Draw a rectangle with a width of 1 and a height of 1\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lightgoldenrodyellow'))\n\n# Draw a rectangle with a width of 1 and a height of 1\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lightyellow'))\n\n# Draw a rectangle with a width of 1 and a height of 1\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lightgoldenrodyellow'))\n\n# Draw a rectangle with a width of 1 and a height of 1\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lightyellow'))\n\n# Draw a rectangle with a width of 1 and a height of 1\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lightgoldenrodyellow'))\n\n# Draw a rectangle with a width of 1 and a height of 1\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lightyellow'))\n\n# Draw a rectangle with a width of 1 and a height of 1\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lightgoldenrodyellow'))\n\n# Draw a rectangle with a width of 1 and a height of 1\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lightyellow'))\n\n# Draw a rectangle with a width of 1 and a height of 1\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lightgoldenrodyellow'))\n\n# Draw a rectangle with a width of 1 and a height of 1\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lightyellow'))\n\n# Draw a rectangle with a width of 1 and a height of 1\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lightgoldenrodyellow'))\n\n# Draw a rectangle with a width of 1 and a height of 1\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lightyellow'))\n\n# Draw a rectangle with a width of 1 and a height of 1\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lightgoldenrodyellow'))\n\n# Draw a rectangle with a width of 1 and a height of 1\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lightyellow'))\n\n# Draw a rectangle with a width of 1 and a height of 1\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lightgoldenrodyellow'))\n\n# Draw a rectangle with a width of 1 and a height of 1\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lightyellow'))\n\n# Draw a rectangle with a width of 1 and a height of 1\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lightgoldenrodyellow'))\n\n# Draw a rectangle with a width of 1 and a height of 1\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lightyellow'))\n\n# Draw a rectangle with a width of 1 and a height of 1\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lightgoldenrodyellow'))\n\n# Draw a rectangle with a width of 1 and a height of 1\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lightyellow'))\n\n# Draw a rectangle with a width of 1 and a height of 1\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lightgoldenrodyellow'))\n\n# Draw a rectangle with a width of 1 and a height of 1\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lightyellow'))\n\n# Draw a rectangle with a width of 1 and a height of 1\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lightgoldenrodyellow'))\n\n# Draw a rectangle with a width of 1 and a height of 1\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lightyellow'))\n\n# Draw a rectangle with a width of 1 and a height of 1\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lightgoldenrodyellow'))\n\n# Draw a rectangle with a width of 1 and a height of 1\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lightyellow'))\n\n# Draw a rectangle with a width of 1 and a height of 1\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lightgoldenrodyellow'))\n\n# Draw a rectangle with a width of 1 and a height of 1\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lightyellow'))\n\n# Draw a rectangle with a width of 1 and a height of 1\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lightgoldenrodyellow'))\n\n# Draw a rectangle with a width of 1 and a height of 1\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lightyellow'))\n\n# Draw a rectangle with a width of 1 and a height of 1\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lightgoldenrodyellow'))\n\n# Draw a rectangle with a width of 1 and a height of 1\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lightyellow'))\n\n# Draw a rectangle with a width of 1 and a height of 1\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lightgoldenrodyellow'))\n\n# Draw a rectangle with a width of 1 and a height of 1\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lightyellow'))\n\n# Draw a rectangle with a width of 1 and a height of 1\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lightgoldenrodyellow'))\n\n# Draw a rectangle with a width of 1 and a height of 1\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lightyellow'))\n\n# Draw a rectangle with a width of 1 and a height of 1\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lightgoldenrodyellow'))\n\n# Draw a rectangle with a width of 1 and a height of 1\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lightyellow'))\n\n# Draw a rectangle with a width of 1 and a height of 1\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lightgoldenrodyellow'))\n\n# Draw a rectangle with a width of 1 and a height of 1\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lightyellow'))\n\n# Draw a rectangle with a width of 1 and a height of 1\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lightgoldenrodyellow'))\n\n# Draw a rectangle with a width of 1 and a height of 1\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lightyellow'))\n\n# Draw a rectangle with a width of 1 and a height of 1\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lightgoldenrodyellow'))\n\n# Draw a rectangle with a width of 1 and a height of 1\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lightyellow'))\n\n# Draw a rectangle with a width of 1 and a height of 1\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lightgoldenrodyellow'))\n\n# Draw a rectangle with a width of 1 and a height of 1\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lightyellow'))\n\n# Draw a rectangle with a width of 1 and a height of 1\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lightgoldenrodyellow'))\n\n# Draw a rectangle with a width of 1 and a height of 1\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lightyellow'))\n\n# Draw a rectangle with a width of 1 and a height of 1\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lightgoldenrodyellow'))\n\n# Draw a rectangle with a width of 1 and a height of 1\nax.add_patch(plt.Rectangle((0, 0), 1, 1, color='lightyellow'))\n\n# Draw a rectangle with a width of 1 and a height of 1\nax.add_patch(plt.Rectangle"}
{"file": "dataset/ori_500/multidiff_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the left column\nleft_column_data = {\n    'Engstrom (M1)': 44.15,\n    'Zhang (M2)': 44.05,\n    'Rice (M3)': 41.55,\n    'Rade (M4)': 40.90,\n    'Hendryks (M5)': 40.65,\n    'Addep. (M6)': 39.45,\n    'Carmon (M7)': 36.70\n}\n\n# Data for the right column\nright_column_data = {\n    'Engstrom (M1)': [0.00, 6.20, 4.90, 4.25, 3.65, 3.25],\n    'Zhang (M2)': [0.00, 6.20, 4.90, 4.25, 3.65, 3.25],\n    'Rice (M3)': [0.00, 5.15, 2.80, 5.25, 3.65, 2.85],\n    'Rade (M4)': [0.00, 6.25, 0.00, 5.35, 3.85, 2.85],\n    'Hendryks (M5)': [0.00, 7.25, 0.00, 5.75, 3.85, 2.85],\n    'Addep. (M6)': [0.00, 8.75, 0.00, 6.25, 4.85, 3.85],\n    'Carmon (M7)': [0.00, 9.90, 0.00, 6.95, 5.25, 4.85]\n}\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 6.0))\n\n# Plot the left column data\nax.barh(list(left_column_data.keys()), list(left_column_data.values()), color='green')\n\n# Set the title of the left column\nax.set_title('Robust Error (%)')\n\n# Set the x-axis label\nax.set_xlabel('Error (%)')\n\n# Set the y-axis label\nax.set_ylabel('Models')\n\n# Set the y-axis limits\nax.set_ylim(-1, len(left_column_data))\n\n# Set the y-axis ticks\nax.set_yticks(range(len(left_column_data)))\n\n# Set the y-axis tick labels\nax.set_yticklabels(list(left_column_data.keys()))\n\n# Set the y-axis tick label rotation\nax.set_yticklabels(list(left_column_data.keys()), rotation=0)\n\n# Set the y-axis tick label color\nax.set_yticklabels(list(left_column_data.keys()), color='black')\n\n# Set the y-axis tick label font size\nax.set_yticklabels(list(left_column_data.keys()), fontsize=12)\n\n# Set the y-axis tick label font weight\nax.set_yticklabels(list(left_column_data.keys()), fontweight='bold')\n\n# Set the y-axis tick label font style\nax.set_yticklabels(list(left_column_data.keys()), fontstyle='italic')\n\n# Set the y-axis tick label font family\nax.set_yticklabels(list(left_column_data.keys()), fontfamily='serif')\n\n# Set the y-axis tick label font variant\nax.set_yticklabels(list(left_column_data.keys()), fontvariant='small-caps')\n\n# Set the y-axis tick label font stretch\nax.set_yticklabels(list(left_column_data.keys()), fontstretch='ultra-condensed')\n\n# Set the y-axis tick label font size\nax.set_yticklabels(list(left_column_data.keys()), fontsize=12)\n\n# Set the y-axis tick label font weight\nax.set_yticklabels(list(left_column_data.keys()), fontweight='bold')\n\n# Set the y-axis tick label font style\nax.set_yticklabels(list(left_column_data.keys()), fontstyle='italic')\n\n# Set the y-axis tick label font family\nax.set_yticklabels(list(left_column_data.keys()), fontfamily='serif')\n\n# Set the y-axis tick label font variant\nax.set_yticklabels(list(left_column_data.keys()), fontvariant='small-caps')\n\n# Set the y-axis tick label font stretch\nax.set_yticklabels(list(left_column_data.keys()), fontstretch='ultra-condensed')\n\n# Set the y-axis tick label font size\nax.set_yticklabels(list(left_column_data.keys()), fontsize=12)\n\n# Set the y-axis tick label font weight\nax.set_yticklabels(list(left_column_data.keys()), fontweight='bold')\n\n# Set the y-axis tick label font style\nax.set_yticklabels(list(left_column_data.keys()), fontstyle='italic')\n\n# Set the y-axis tick label font family\nax.set_yticklabels(list(left_column_data.keys()), fontfamily='serif')\n\n# Set the y-axis tick label font variant\nax.set_yticklabels(list(left_column_data.keys()), fontvariant='small-caps')\n\n# Set the y-axis tick label font stretch\nax.set_yticklabels(list(left_column_data.keys()), fontstretch='ultra-condensed')\n\n# Set the y-axis tick label font size\nax.set_yticklabels(list(left_column_data.keys()), fontsize=12)\n\n# Set the y-axis tick label font weight\nax.set_yticklabels(list(left_column_data.keys()), fontweight='bold')\n\n# Set the y-axis tick label font style\nax.set_yticklabels(list(left_column_data.keys()), fontstyle='italic')\n\n# Set the y-axis tick label font family\nax.set_yticklabels(list(left_column_data.keys()), fontfamily='serif')\n\n# Set the y-axis tick label font variant\nax.set_yticklabels(list(left_column_data.keys()), fontvariant='small-caps')\n\n# Set the y-axis tick label font stretch\nax.set_yticklabels(list(left_column_data.keys()), fontstretch='ultra-condensed')\n\n# Set the y-axis tick label font size\nax.set_yticklabels(list(left_column_data.keys()), fontsize=12)\n\n# Set the y-axis tick label font weight\nax.set_yticklabels(list(left_column_data.keys()), fontweight='bold')\n\n# Set the y-axis tick label font style\nax.set_yticklabels(list(left_column_data.keys()), fontstyle='italic')\n\n# Set the y-axis tick label font family\nax.set_yticklabels(list(left_column_data.keys()), fontfamily='serif')\n\n# Set the y-axis tick label font variant\nax.set_yticklabels(list(left_column_data.keys()), fontvariant='small-caps')\n\n# Set the y-axis tick label font stretch\nax.set_yticklabels(list(left_column_data.keys()), fontstretch='ultra-condensed')\n\n# Set the y-axis tick label font size\nax.set_yticklabels(list(left_column_data.keys()), fontsize=12)\n\n# Set the y-axis tick label font weight\nax.set_yticklabels(list(left_column_data.keys()), fontweight='bold')\n\n# Set the y-axis tick label font style\nax.set_yticklabels(list(left_column_data.keys()), fontstyle='italic')\n\n# Set the y-axis tick label font family\nax.set_yticklabels(list(left_column_data.keys()), fontfamily='serif')\n\n# Set the y-axis tick label font variant\nax.set_yticklabels(list(left_column_data.keys()), fontvariant='small-caps')\n\n# Set the y-axis tick label font stretch\nax.set_yticklabels(list(left_column_data.keys()), fontstretch='ultra-condensed')\n\n# Set the y-axis tick label font size\nax.set_yticklabels(list(left_column_data.keys()), fontsize=12)\n\n# Set the y-axis tick label font weight\nax.set_yticklabels(list(left_column_data.keys()), fontweight='bold')\n\n# Set the y-axis tick label font style\nax.set_yticklabels(list(left_column_data.keys()), fontstyle='italic')\n\n# Set the y-axis tick label font family\nax.set_yticklabels(list(left_column_data.keys()), fontfamily='serif')\n\n# Set the y-axis tick label font variant\nax.set_yticklabels(list(left_column_data.keys()), fontvariant='small-caps')\n\n# Set the y-axis tick label font stretch\nax.set_yticklabels(list(left_column_data.keys()), fontstretch='ultra-condensed')\n\n# Set the y-axis tick label font size\nax.set_yticklabels(list(left_column_data.keys()), fontsize=12)\n\n# Set the y-axis tick label font weight\nax.set_yticklabels(list(left_column_data.keys()), fontweight='bold')\n\n# Set the y-axis tick label font style\nax.set_yticklabels(list(left_column_data.keys()), fontstyle='italic')\n\n# Set the y-axis tick label font family\nax.set_yticklabels(list(left_column_data.keys()), fontfamily='serif')\n\n# Set the y-axis tick label font variant\nax.set_yticklabels(list(left_column_data.keys()), fontvariant='small-caps')\n\n# Set the y-axis tick label font stretch\nax.set_yticklabels(list(left_column_data.keys()), fontstretch='ultra-condensed')\n\n# Set the y-axis tick label font size\nax.set_yticklabels(list(left_column_data.keys()), fontsize=12)\n\n# Set the y-axis tick label font weight\nax.set_yticklabels(list(left_column_data.keys()), fontweight='bold')\n\n# Set the y-axis tick label font style\nax.set_yticklabels(list(left_column_data.keys()), fontstyle='italic')\n\n# Set the y-axis tick label font family\nax.set_yticklabels(list(left_column_data.keys()), fontfamily='serif')\n\n# Set the y-axis tick label font variant\nax.set_yticklabels(list(left_column_data.keys()), fontvariant='small-caps')\n\n# Set the y-axis tick label font stretch\nax.set_yticklabels(list(left_column_data.keys()), fontstretch='ultra-condensed')\n\n# Set the y-axis tick label font size\nax.set_yticklabels(list(left_column_data.keys()), fontsize=12)\n\n# Set the y-axis tick label font weight\nax.set_yticklabels(list(left_column_data.keys()), fontweight='bold')\n\n# Set the y-axis tick label font style\nax.set_yticklabels(list(left_column_data.keys()), fontstyle='italic')\n\n# Set the y-axis tick label font family\nax.set_yticklabels(list(left_column_data.keys()), fontfamily='serif')\n\n# Set the y-axis tick label font variant\nax.set_yticklabels(list(left_column_data.keys()), fontvariant='small-caps')\n\n# Set the y-axis tick label font stretch\nax.set_yticklabels(list(left_column_data.keys()), fontstretch='ultra-condensed')\n\n# Set the y-axis tick label font size\nax.set_yticklabels(list(left_column_data.keys()), fontsize=12)\n\n# Set the y-axis tick label font weight\nax.set_yticklabels(list(left_column_data.keys()), fontweight='bold')\n\n# Set the y-axis tick label font style\nax.set_yticklabels(list(left_column_data.keys()), fontstyle='italic')\n\n# Set the y-axis tick label font family\nax.set_yticklabels(list(left_column_data.keys()), fontfamily='serif')\n\n# Set the y-axis tick label font variant\nax.set_yticklabels(list(left_column_data.keys()), fontvariant='small-caps')\n\n# Set the y-axis tick label font stretch\nax.set_yticklabels(list(left_column_data.keys()), fontstretch='ultra-condensed')\n\n# Set the y-axis tick label font size\nax.set_yticklabels(list(left_column_data.keys()), fontsize=12)\n\n# Set the y-axis tick label font weight\nax.set_yticklabels(list(left_column_data.keys()), fontweight='bold')\n\n# Set the y-axis tick label font style\nax.set_yticklabels(list(left_column_data.keys()), fontstyle='italic')\n\n# Set the y-axis tick label font family\nax.set_yticklabels(list(left_column_data.keys()), fontfamily='serif')\n\n# Set the y-axis tick label font variant\nax.set_yticklabels(list(left_column_data.keys()), fontvariant='small-caps')\n\n# Set the y-axis tick label font stretch\nax.set_yticklabels(list(left_column_data.keys()), fontstretch='ultra-condensed')\n\n# Set the y-axis tick label font size\nax.set_yticklabels(list(left_column_data.keys()), fontsize=12)\n\n# Set the y-axis tick label font weight\nax.set_yticklabels(list(left_column_data.keys()), fontweight='bold')\n\n# Set the y-axis tick label font style\nax.set_yticklabels(list(left_column_data.keys()), fontstyle='italic')\n\n# Set the y-axis tick label font family\nax.set_yticklabels(list(left_column_data.keys()), fontfamily='serif')\n\n# Set the y-axis tick label font variant\nax.set_yticklabels(list(left_column_data.keys()), fontvariant='small-caps')\n\n# Set the y-axis tick label font stretch\nax.set_yticklabels(list(left_column_data.keys()), fontstretch='ultra-condensed')\n\n# Set the y-axis tick label font size\nax.set_yticklabels(list(left_column_data.keys()), fontsize=12)\n\n# Set the y-axis tick label font weight\nax.set_yticklabels(list(left_column_data.keys()), fontweight='bold')\n\n# Set the y-axis tick label font style\nax.set_yticklabels(list(left_column_data.keys()), fontstyle='italic')\n\n# Set the y-axis tick label font family\nax.set_yticklabels(list(left_column_data.keys()), fontfamily='serif')\n\n# Set the y-axis tick label font variant\nax.set_yticklabels(list(left_column_data.keys()), fontvariant='small-caps')\n\n# Set the y-axis tick label font stretch\nax.set_yticklabels(list(left_column_data.keys()), fontstretch='ultra-condensed')\n\n# Set the y-axis tick label font size\nax.set_yticklabels(list(left_column_data.keys()), fontsize=12)\n\n# Set the y-axis tick label font weight\nax.set_yticklabels(list(left_column_data.keys()), fontweight='bold')\n\n# Set the y-axis tick label font style\nax.set_yticklabels(list(left_column_data.keys()), fontstyle='italic')\n\n# Set the y-axis tick label font family\nax.set_yticklabels(list(left_column_data.keys()), fontfamily='serif')\n\n# Set the y-axis tick label font variant\nax.set_yticklabels(list(left_column_data.keys()), fontvariant='small-caps')\n\n# Set the y-axis tick label font stretch\nax.set_yticklabels(list(left_column_data.keys()), fontstretch='ultra-condensed')\n\n# Set the y-axis tick label font size\nax.set_yticklabels(list(left_column_data.keys()), fontsize=12)\n\n# Set the y-axis tick label font weight\nax.set_yticklabels(list(left_column_data.keys()), fontweight='bold')\n\n# Set the y-axis tick label font style\nax.set_yticklabels(list(left_column_data.keys()), fontstyle='italic')\n\n# Set the y-axis tick label font family\nax.set_yticklabels(list(left_column_data.keys()), fontfamily='serif')\n\n# Set the y-axis tick label font variant\nax.set_yticklabels(list(left_column_data.keys()), fontvariant='small-caps')\n\n# Set the y-axis tick label font stretch\nax.set_yticklabels(list(left_column_data.keys()), fontstretch='ultra-condensed')\n\n# Set the y-axis tick label font size\nax.set_yticklabels(list(left_column_data.keys()), fontsize=12)\n\n# Set the y-axis tick label font weight\nax.set_yticklabels(list(left_column_data.keys()), fontweight='bold')\n\n# Set the y-axis tick label font style\nax.set_yticklabels(list(left_column_data.keys()), fontstyle='italic')\n\n# Set the y-axis tick label font family\nax.set_yticklabels(list(left_column_data.keys()), fontfamily='serif')\n\n# Set the y-axis tick label font variant\nax.set_yticklabels(list(left_column_data.keys()), fontvariant='small-caps')\n\n# Set the y-axis tick label font stretch\nax.set_yticklabels(list(left_column_data.keys()), fontstretch='ultra-condensed')\n\n# Set the y-axis tick label font size\nax.set_yticklabels(list(left_column_data.keys()), fontsize=12)\n\n# Set the y-axis tick label font weight\nax.set_yticklabels(list(left_column_data.keys()), fontweight='bold')\n\n# Set the y-axis tick label font style\nax.set_yticklabels(list(left_column_data.keys()), fontstyle='italic')\n\n# Set the y-axis tick label font family\nax.set_yticklabels(list(left_column_data.keys()), fontfamily='serif')\n\n# Set the y-axis tick label font variant\nax.set_yticklabels(list(left_column_data.keys()), fontvariant='small-caps')\n\n# Set the y-axis tick label font stretch\nax.set_yticklabels(list(left_column_data.keys()), fontstretch='ultra-condensed')\n\n# Set the y-axis tick label font size\nax.set_yticklabels(list(left_column_data.keys()), fontsize=12)\n\n# Set the y-axis tick label font weight\nax.set_yticklabels(list(left_column_data.keys()), fontweight='bold')\n\n# Set the y-axis tick label font style\nax.set_yticklabels(list(left_column_data.keys()), fontstyle='italic')\n\n# Set the y-axis tick label font family\nax.set_yticklabels(list(left_column_data.keys()), fontfamily='serif')\n\n# Set the y-axis tick label font variant\nax.set_yticklabels(list(left_column_data.keys()), fontvariant='small-caps')\n\n# Set the y-axis tick label font stretch\nax.set_yticklabels(list(left_column_data.keys()), fontstretch='ultra-condensed')\n\n# Set the y-axis tick label font size\nax.set_yticklabels(list(left_column_data.keys()), fontsize=12)\n\n# Set the y-axis tick label font weight\nax.set_yticklabels(list(left_column_data.keys()), fontweight='bold')\n\n# Set the y-axis tick label font style\nax.set_yticklabels(list(left_column_data.keys()), fontstyle='italic')\n\n# Set the y-axis tick label font family\nax.set_yticklabels(list(left_column_data.keys()), fontfamily='serif')\n\n# Set the y-axis tick label font variant\nax.set_yticklabels(list(left_column_data.keys()), fontvariant='small-caps')\n\n# Set the y-axis tick label font stretch\nax.set_yticklabels(list(left_column_data.keys()), fontstretch='ultra-condensed')\n\n# Set the y-axis tick label font size\nax.set_yticklabels(list(left_column_data.keys()), fontsize=12)\n\n# Set the y-axis tick label font weight\nax.set_yticklabels(list(left_column_data.keys()), fontweight='bold')\n\n# Set the y-axis tick label font style\nax.set_yticklabels(list(left_column_data.keys()), fontstyle='italic')\n\n# Set the y-axis tick label font family\nax.set_yticklabels(list(left_column_data.keys()), fontfamily='serif')\n\n# Set the y-axis tick label font variant\nax.set_yticklabels(list(left_column_data.keys()), fontvariant='small-caps')\n\n# Set the y-axis tick label font stretch\nax.set_yticklabels(list(left_column_data.keys()), fontstretch='ultra-condensed')\n\n# Set the y-axis tick label font size\nax.set_yticklabels(list(left_column_data.keys()), fontsize=12)\n\n# Set the y-axis tick label font weight\nax.set_yticklabels(list"}
{"file": "dataset/ori_500/multidiff_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\ndata = {\n    'VGG16': [0.551, 0.538, 0.744, 0.762],\n    'Resnet101': [0.394, 0.477, 0.762, 0.744, 0.662, 0.642, 0.622, 0.602, 0.582, 0.562]\n}\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 4))\n\n# Plot the data\nax.plot(data['VGG16'], label='VGG16 Cartesian')\nax.plot(data['Resnet101'], label='Resnet101 Cartesian')\n\n# Set the title and labels\nax.set_title('Citation Invariance')\nax.set_xlabel('Rotation angle (\u00b0)')\nax.set_ylabel('Citation Invariance')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Set the background color of the plot\nax.set_facecolor('lightblue')\n\n# Set the title of the plot\nax.set_title('Product Recommendations')\n\n# Set the x-axis label\nax.set_xlabel('Sensitivity Attribute')\n\n# Set the y-axis label\nax.set_ylabel('Price ($,Z)')\n\n# Create a bar chart with the data\nax.bar(['PaleSkin', 'OvalFace', 'Smiling', 'Attractive', 'Male', 'BigLips', 'PointyNose', 'White', 'BigNose', 'NoBeard', 'HeavyMakeup'], [1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2.0, 2.1, 2.2], color='blue')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(5.0, 6.0))\n\n# Plot the line graph\nx = np.linspace(0, 50, 100)\ny = -8 + 2 * np.sin(x / 10)\nax.plot(x, y, color='black')\n\n# Add a rectangle for the shaded area\nax.fill_between(x, -10, -8, where=(x >= 0) & (x <= 30), color='lightgray')\n\n# Add a scatter plot for the points\nax.scatter([0, 10, 20, 30, 40, 50], [-8, -9, -9, -9, -9, -8], color='black')\n\n# Set the title and labels\nax.set_title('a')\nax.set_xlabel('GPT2Tokenizer rank')\nax.set_ylabel('Loss')\n\n# Create a second subplot\nax2 = fig.add_subplot(212)\n\n# Plot the bar graph\nbar_width = 10\nx = np.arange(0, 50, bar_width)\nax2.bar(x, [8, 7, 6, 5, 4], width=bar_width, color='gray')\n\n# Add a scatter plot for the points\nax2.scatter([0, 10, 20, 30, 40], [8, 7, 6, 5, 4], color='gray')\n\n# Set the title and labels\nax2.set_title('b')\nax2.set_xlabel('Length = 20')\nax2.set_ylabel('Loss')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the bar chart\ncategories = ['Sentiment', 'Toxicity', 'News']\nvalues = [0.35, 0.25, 0.25]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 4))\n\n# Plot the bar chart\nax.bar(categories, values, color='blue')\n\n# Set the title and labels\nax.set_title('Sentiment Analysis')\nax.set_xlabel('Categories')\nax.set_ylabel('Sentiment Score')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_16.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the first graph\nx = [201355, 201908, 202670, 203540]\ny = [45, 55, 50, 40]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6, 6))\n\n# Plot the data\nax.bar(x, y, color='blue')\n\n# Set the title and labels\nax.set_title('Number of Successful Advc Circuits')\nax.set_xlabel('Year')\nax.set_ylabel('# Successful adv circuits')\n\n# Display the plot\nplt.show()\n\n# Data for the second graph\nx = [201355, 201908, 202670, 203540]\ny = [0.45, 0.55, 0.50, 0.40]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6, 6))\n\n# Plot the data\nax.bar(x, y, color='gray')\n\n# Set the title and labels\nax.set_title('Omla Kpa')\nax.set_xlabel('Year')\nax.set_ylabel('Omla Kpa')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_17.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 4))\n\n# Plot the graph\nax.plot([0, 1, 2, 3, 4, 5], [0, 20, 40, 60, 80, 100], 'b-')\nax.plot([0, 1, 2, 3, 4, 5], [0, 30, 60, 90, 120, 150], 'r-')\nax.plot([0, 1, 2, 3, 4, 5], [0, 50, 100, 150, 200, 250], 'y-')\n\n# Set the title and labels\nax.set_title('Knowledge Increase by Subject Area')\nax.set_xlabel('Study Level')\nax.set_ylabel('Cumulative Knowledge (%)')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_18.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the graph\nyears = [2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022]\nhardware_progress = [10, 20, 30, 40, 50, 60, 70, 80]\nsoftware_progress = [20, 30, 40, 50, 60, 70, 80, 90]\nai_progress = [30, 40, 50, 60, 70, 80, 90, 100]\n\n# Create the first graph\nfig, ax = plt.subplots(figsize=(8, 10))\nax.plot(years, hardware_progress, label='Hardware')\nax.plot(years, software_progress, label='Software')\nax.plot(years, ai_progress, label='AI')\nax.set_xlabel('Year')\nax.set_ylabel('Progress (%)')\nax.set_title('Technological Advancements')\nax.legend()\n\n# Create the second graph\nfig, ax = plt.subplots(figsize=(8, 10))\nax.barh(['Big Tech', 'Startups', 'Academia', 'Government'], [50, 60, 70, 80], color='blue')\nax.set_xlabel('Innovation Gap (%)')\nax.set_ylabel('Sector')\nax.set_title('Innovation Gaps Across Different Sectors in Technology')\n\n# Display the plots\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_19.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the first graph\ncountries = ['USA', 'UK', 'Germany', 'France', 'Italy', 'Spain']\ncrime_rates = [3.2, 2.9, 2.5, 2.7, 2.8, 2.6]\n\n# Create a bar chart\nfig, ax = plt.subplots(figsize=(8.0, 10.0))\nax.bar(countries, crime_rates, color='orange')\nax.set_title('Average Legal Crime Rates by Country')\nax.set_xlabel('Country')\nax.set_ylabel('Crime Rate per 100,000 Inhabitants')\n\n# Data for the second graph\ncrimes = ['Theft', 'Assault', 'Fraud', 'Drug Trafficking', 'Vandalism']\ncrime_rates = [140, 130, 120, 110, 100]\n\n# Create a line chart\nfig, ax = plt.subplots(figsize=(8.0, 10.0))\nax.plot(crimes, crime_rates, marker='o', linestyle='-', color='blue')\nax.set_title('Average Legal Crime Rates by Country')\nax.set_xlabel('Crime')\nax.set_ylabel('Crime Rate per 100,000 Inhabitants')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis for the bar chart\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Define the data for the bar chart\ncategories = ['Public School', 'Private School']\nvalues = [80, 60]\n\n# Create a bar chart with the data\nax.bar(categories, values, color='blue')\n\n# Set the title of the chart\nax.set_title('Student Performance in Schools')\n\n# Set the x-axis label\nax.set_xlabel('School Type')\n\n# Set the y-axis label\nax.set_ylabel('Score')\n\n# Display the plot\nplt.show()\n\n# Create a figure and axis for the pie chart\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Define the data for the pie chart\nlabels = ['Books', 'Staff', 'Extracurricular', 'Facilities']\nsizes = [20, 10, 15, 10]\ncolors = ['blue', 'gray', 'orange', 'green']\n\n# Create a pie chart with the data\nax.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%', startangle=90)\n\n# Set the title of the chart\nax.set_title('Resource Allocation in Schools')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_20.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Define the data for the first plot\nx = np.linspace(0, 2*np.pi, 100)\ny = np.sin(x)\n\n# Plot the data\nax.plot(x, y, 'b-')\n\n# Set the title of the plot\nax.set_title('Average Annual Temperature')\n\n# Define the data for the second plot\nx = np.linspace(0, 1000, 100)\ny = np.exp(-x/100)\n\n# Plot the data\nax.plot(x, y, 'r-')\n\n# Set the title of the plot\nax.set_title('Geographical Elevation Distribution')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_21.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the graph\nyears = ['2019', '2020', '2021', '2022']\ninvestment_growth = [300, 250, 200, 150]\ntotal_investment = [400, 350, 300, 250]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Plot the investment growth over time\nax.plot(years, investment_growth, marker='o', color='blue')\nax.set_xlabel('Year')\nax.set_ylabel('Investment Growth (%)')\nax.set_title('Investment Growth Over Time')\n\n# Create a bar chart for total investment\nax.bar(years, total_investment, color='green')\nax.set_title('Total Investment')\n\n# Create a pie chart for product type\nproduct_types = ['Savings', 'CDs', 'Stocks', 'Bonds', 'REITs', 'Mutual Funds']\nproduct_values = [200, 175, 150, 125, 100, 75]\nax.pie(product_values, labels=product_types, colors=['blue', 'cyan', 'orange', 'yellow', 'pink', 'purple'], autopct='%1.1f%%')\nax.set_title('Product Type')\n\n# Create a histogram for loan amount distribution by region\nloan_amounts = [10000, 20000, 30000, 40000, 50000, 60000, 70000, 80000, 90000, 100000]\nregions = ['Urban Loans', 'Rural Loans', 'Urban Loans', 'Rural Loans', 'Urban Loans', 'Rural Loans', 'Urban Loans', 'Rural Loans', 'Urban Loans', 'Rural Loans']\nax.hist(loan_amounts, bins=10, color='red')\nax.set_xlabel('Loan Amount ($)')\nax.set_ylabel('Frequency')\nax.set_title('Loan Amount Distribution by Region')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_22.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 10))\n\n# Set the title of the plot\nax.set_title('AI Task Success Rates')\n\n# Create a bar chart with the success rates\nax.bar(['Image Recog.', 'Speech Recog.', 'Language Proc.', 'Game AI'], [85, 75, 90, 80], color='skyblue')\n\n# Set the x-axis label\nax.set_xlabel('Algorithm')\n\n# Set the y-axis label\nax.set_ylabel('Success Rate (%)')\n\n# Create a second subplot for the efficiency scores\nax2 = fig.add_subplot(2, 1, 2)\n\n# Set the title of the second subplot\nax2.set_title('Algorithm Efficiency Scores')\n\n# Create a scatter plot with the efficiency scores\nax2.scatter(['Alg1', 'Alg2', 'Alg3', 'Alg4'], [90, 85, 95, 80], color='pink')\n\n# Set the x-axis label\nax2.set_xlabel('Algorithm')\n\n# Set the y-axis label\nax2.set_ylabel('Efficiency (%)')\n\n# Create a third subplot for the adaptability scores\nax3 = fig.add_subplot(2, 1, 3)\n\n# Set the title of the third subplot\nax3.set_title('AI Model Adaptability')\n\n# Create a line chart with the adaptability scores\nax3.plot(['Model A', 'Model B', 'Model C', 'Model D'], [95, 90, 85, 80], color='green')\n\n# Set the x-axis label\nax3.set_xlabel('Model')\n\n# Set the y-axis label\nax3.set_ylabel('Adaptability Score (%)')\n\n# Add a legend to the third subplot\nax3.legend(['Dry Conditions', 'Wet Conditions'])\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_23.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(10, 10))\n\n# Set the title of the plot\nax.set_title('Traffic Volume by Time of Day')\n\n# Set the x-axis label\nax.set_xlabel('Number of Vehicles')\n\n# Set the y-axis label\nax.set_ylabel('Time of Day')\n\n# Set the x-axis limits\nax.set_xlim(0, 700)\n\n# Set the y-axis limits\nax.set_ylim(0, 200)\n\n# Set the x-axis ticks\nax.set_xticks([0, 200, 400, 600, 800])\n\n# Set the y-axis ticks\nax.set_yticks([0, 50, 100, 150, 200])\n\n# Set the x-axis tick labels\nax.set_xticklabels(['0', '200', '400', '600', '800'])\n\n# Set the y-axis tick labels\nax.set_yticklabels(['0', '50', '100', '150', '200'])\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('blue')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the background\nax.set_facecolor('lightgray')\n\n# Set the color of the text\nax.set_facecolor('white')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('blue')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the background\nax.set_facecolor('lightgray')\n\n# Set the color of the text\nax.set_facecolor('white')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('blue')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the background\nax.set_facecolor('lightgray')\n\n# Set the color of the text\nax.set_facecolor('white')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('blue')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the background\nax.set_facecolor('lightgray')\n\n# Set the color of the text\nax.set_facecolor('white')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('blue')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the background\nax.set_facecolor('lightgray')\n\n# Set the color of the text\nax.set_facecolor('white')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('blue')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the background\nax.set_facecolor('lightgray')\n\n# Set the color of the text\nax.set_facecolor('white')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('blue')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the background\nax.set_facecolor('lightgray')\n\n# Set the color of the text\nax.set_facecolor('white')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('blue')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the background\nax.set_facecolor('lightgray')\n\n# Set the color of the text\nax.set_facecolor('white')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('blue')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the background\nax.set_facecolor('lightgray')\n\n# Set the color of the text\nax.set_facecolor('white')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('blue')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the background\nax.set_facecolor('lightgray')\n\n# Set the color of the text\nax.set_facecolor('white')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('blue')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the background\nax.set_facecolor('lightgray')\n\n# Set the color of the text\nax.set_facecolor('white')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('blue')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the background\nax.set_facecolor('lightgray')\n\n# Set the color of the text\nax.set_facecolor('white')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('blue')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the background\nax.set_facecolor('lightgray')\n\n# Set the color of the text\nax.set_facecolor('white')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('blue')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the background\nax.set_facecolor('lightgray')\n\n# Set the color of the text\nax.set_facecolor('white')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('blue')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the background\nax.set_facecolor('lightgray')\n\n# Set the color of the text\nax.set_facecolor('white')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('blue')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the background\nax.set_facecolor('lightgray')\n\n# Set the color of the text\nax.set_facecolor('white')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('blue')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the background\nax.set_facecolor('lightgray')\n\n# Set the color of the text\nax.set_facecolor('white')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('blue')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the background\nax.set_facecolor('lightgray')\n\n# Set the color of the text\nax.set_facecolor('white')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('blue')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the background\nax.set_facecolor('lightgray')\n\n# Set the color of the text\nax.set_facecolor('white')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('blue')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the background\nax.set_facecolor('lightgray')\n\n# Set the color of the text\nax.set_facecolor('white')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('blue')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the background\nax.set_facecolor('lightgray')\n\n# Set the color of the text\nax.set_facecolor('white')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('blue')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the background\nax.set_facecolor('lightgray')\n\n# Set the color of the text\nax.set_facecolor('white')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='blue')\n\n# Set the color of the y-axis tick labels\nax.tick_params(axis='y', colors='blue')\n\n# Set the color of the x-axis line\nax.spines['bottom'].set_color('blue')\n\n# Set the color of the y-axis line\nax.spines['left'].set_color('blue')\n\n# Set the color of the top and right axis lines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--')\n\n# Set the color of the background\nax.set_facecolor('lightgray')\n\n# Set the color of the text\nax.set_facecolor('white')\n\n# Set the color of the x-axis tick labels\nax.tick_params(axis='x', colors='blue"}
{"file": "dataset/ori_500/multidiff_24.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data for the pie chart\narts = ['Literature', 'Performing Arts', 'Visual Arts', 'Dance']\nvalues = [10, 30, 25, 15]\ncolors = ['#FF9999','#66b3ff','#99ff99','#ffcc99']\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Plot the pie chart\nwedges, texts, autotexts = ax.pie(values, labels=arts, colors=colors, autopct='%1.1f%%', startangle=90)\n\n# Set the title of the plot\nax.set_title('Distribution of Arts Education Programs')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_25.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Set the background color of the plot\nax.set_facecolor('lightblue')\n\n# Create a bar chart\nbar_width = 0.2\nopacity = 0.8\nindex = [0.0, 0.1, 0.2, 0.3, 0.4, 0.5]\nsales_probabilities = [25000, 15000, 10000, 5000, 2000, 1000]\nsales = [20000, 10000, 5000, 2000, 1000, 500]\n\nrects = ax.bar(index, sales_probabilities, bar_width,\n             alpha=opacity, color='green', label='Known Sales')\nrects2 = ax.bar([i + bar_width for i in index], sales, bar_width,\n              alpha=opacity, color='blue', label='Unknown Sales')\n\n# Add some text for labels, title, and custom x-axis tick labels, etc.\nax.set_xlabel('Sale Probability')\nax.set_ylabel('Number of Sales')\nax.set_title('Sales by Probability')\nax.set_xticks([i + bar_width / 2 for i in index])\nax.set_xticklabels(['0.0', '0.1', '0.2', '0.3', '0.4', '0.5'])\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Set the background color of the plot\nax.set_facecolor('lightblue')\n\n# Draw a rectangle with a green fill\nax.add_patch(plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='green'))\n\n# Draw a rectangle with a red fill\nax.add_patch(plt.Rectangle((0.4, 0.4), 0.2, 0.2, color='red'))\n\n# Draw a rectangle with a blue fill\nax.add_patch(plt.Rectangle((0.6, 0.6), 0.2, 0.2, color='blue'))\n\n# Draw a rectangle with a brown fill\nax.add_patch(plt.Rectangle((0.8, 0.8), 0.2, 0.2, color='brown'))\n\n# Draw a rectangle with a pink fill\nax.add_patch(plt.Rectangle((0.1, 0.1), 0.2, 0.2, color='pink'))\n\n# Draw a rectangle with a yellow fill\nax.add_patch(plt.Rectangle((0.3, 0.3), 0.2, 0.2, color='yellow'))\n\n# Draw a rectangle with a purple fill\nax.add_patch(plt.Rectangle((0.5, 0.5), 0.2, 0.2, color='purple'))\n\n# Draw a rectangle with a gray fill\nax.add_patch(plt.Rectangle((0.7, 0.7), 0.2, 0.2, color='gray'))\n\n# Draw a rectangle with a black fill\nax.add_patch(plt.Rectangle((0.9, 0.9), 0.2, 0.2, color='black'))\n\n# Draw a rectangle with a white fill\nax.add_patch(plt.Rectangle((0.1, 0.9), 0.2, 0.2, color='white'))\n\n# Draw a rectangle with a orange fill\nax.add_patch(plt.Rectangle((0.3, 0.7), 0.2, 0.2, color='orange'))\n\n# Draw a rectangle with a cyan fill\nax.add_patch(plt.Rectangle((0.5, 0.5), 0.2, 0.2, color='cyan'))\n\n# Draw a rectangle with a magenta fill\nax.add_patch(plt.Rectangle((0.7, 0.3), 0.2, 0.2, color='magenta'))\n\n# Draw a rectangle with a silver fill\nax.add_patch(plt.Rectangle((0.9, 0.1), 0.2, 0.2, color='silver'))\n\n# Draw a rectangle with a gold fill\nax.add_patch(plt.Rectangle((0.1, 0.3), 0.2, 0.2, color='gold'))\n\n# Draw a rectangle with a bronze fill\nax.add_patch(plt.Rectangle((0.3, 0.5), 0.2, 0.2, color='brown'))\n\n# Draw a rectangle with a navy fill\nax.add_patch(plt.Rectangle((0.5, 0.7), 0.2, 0.2, color='navy'))\n\n# Draw a rectangle with a maroon fill\nax.add_patch(plt.Rectangle((0.7, 0.9), 0.2, 0.2, color='maroon'))\n\n# Draw a rectangle with a teal fill\nax.add_patch(plt.Rectangle((0.9, 0.7), 0.2, 0.2, color='teal'))\n\n# Draw a rectangle with a violet fill\nax.add_patch(plt.Rectangle((0.1, 0.5), 0.2, 0.2, color='violet'))\n\n# Draw a rectangle with a olive fill\nax.add_patch(plt.Rectangle((0.3, 0.7), 0.2, 0.2, color='olive'))\n\n# Draw a rectangle with a lime fill\nax.add_patch(plt.Rectangle((0.5, 0.9), 0.2, 0.2, color='lime'))\n\n# Draw a rectangle with a azure fill\nax.add_patch(plt.Rectangle((0.7, 0.7), 0.2, 0.2, color='azure'))\n\n# Draw a rectangle with a fuchsia fill\nax.add_patch(plt.Rectangle((0.9, 0.5), 0.2, 0.2, color='fuchsia'))\n\n# Draw a rectangle with a chartreuse fill\nax.add_patch(plt.Rectangle((0.1, 0.3), 0.2, 0.2, color='chartreuse'))\n\n# Draw a rectangle with a aquamarine fill\nax.add_patch(plt.Rectangle((0.3, 0.5), 0.2, 0.2, color='aquamarine'))\n\n# Draw a rectangle with a sienna fill\nax.add_patch(plt.Rectangle((0.5, 0.7), 0.2, 0.2, color='sienna'))\n\n# Draw a rectangle with a peru fill\nax.add_patch(plt.Rectangle((0.7, 0.9), 0.2, 0.2, color='peru'))\n\n# Draw a rectangle with a tan fill\nax.add_patch(plt.Rectangle((0.9, 0.7), 0.2, 0.2, color='tan'))\n\n# Draw a rectangle with a wheat fill\nax.add_patch(plt.Rectangle((0.1, 0.5), 0.2, 0.2, color='wheat'))\n\n# Draw a rectangle with a khaki fill\nax.add_patch(plt.Rectangle((0.3, 0.7), 0.2, 0.2, color='khaki'))\n\n# Draw a rectangle with a coral fill\nax.add_patch(plt.Rectangle((0.5, 0.9), 0.2, 0.2, color='coral'))\n\n# Draw a rectangle with a tomato fill\nax.add_patch(plt.Rectangle((0.7, 0.7), 0.2, 0.2, color='tomato'))\n\n# Draw a rectangle with a salmon fill\nax.add_patch(plt.Rectangle((0.9, 0.5), 0.2, 0.2, color='salmon'))\n\n# Draw a rectangle with a peachpuff fill\nax.add_patch(plt.Rectangle((0.1, 0.3), 0.2, 0.2, color='peachpuff'))\n\n# Draw a rectangle with a bisque fill\nax.add_patch(plt.Rectangle((0.3, 0.5), 0.2, 0.2, color='bisque'))\n\n# Draw a rectangle with a navajowhite fill\nax.add_patch(plt.Rectangle((0.5, 0.7), 0.2, 0.2, color='navajowhite'))\n\n# Draw a rectangle with a moccasin fill\nax.add_patch(plt.Rectangle((0.7, 0.9), 0.2, 0.2, color='moccasin'))\n\n# Draw a rectangle with a cornsilk fill\nax.add_patch(plt.Rectangle((0.9, 0.7), 0.2, 0.2, color='cornsilk'))\n\n# Draw a rectangle with a blanchedalmond fill\nax.add_patch(plt.Rectangle((0.1, 0.5), 0.2, 0.2, color='blanchedalmond'))\n\n# Draw a rectangle with a papayawhip fill\nax.add_patch(plt.Rectangle((0.3, 0.7), 0.2, 0.2, color='papayawhip'))\n\n# Draw a rectangle with a blanchedalmond fill\nax.add_patch(plt.Rectangle((0.5, 0.9), 0.2, 0.2, color='blanchedalmond'))\n\n# Draw a rectangle with a seashell fill\nax.add_patch(plt.Rectangle((0.7, 0.7), 0.2, 0.2, color='seashell'))\n\n# Draw a rectangle with a lemonchiffon fill\nax.add_patch(plt.Rectangle((0.9, 0.5), 0.2, 0.2, color='lemonchiffon'))\n\n# Draw a rectangle with a lightgoldenrodyellow fill\nax.add_patch(plt.Rectangle((0.1, 0.3), 0.2, 0.2, color='lightgoldenrodyellow'))\n\n# Draw a rectangle with a linen fill\nax.add_patch(plt.Rectangle((0.3, 0.5), 0.2, 0.2, color='linen'))\n\n# Draw a rectangle with a antiquewhite fill\nax.add_patch(plt.Rectangle((0.5, 0.7), 0.2, 0.2, color='antiquewhite'))\n\n# Draw a rectangle with a floralwhite fill\nax.add_patch(plt.Rectangle((0.7, 0.9), 0.2, 0.2, color='floralwhite'))\n\n# Draw a rectangle with a oldlace fill\nax.add_patch(plt.Rectangle((0.9, 0.7), 0.2, 0.2, color='oldlace'))\n\n# Draw a rectangle with a aliceblue fill\nax.add_patch(plt.Rectangle((0.1, 0.5), 0.2, 0.2, color='aliceblue'))\n\n# Draw a rectangle with a lavender fill\nax.add_patch(plt.Rectangle((0.3, 0.7), 0.2, 0.2, color='lavender'))\n\n# Draw a rectangle with a thistle fill\nax.add_patch(plt.Rectangle((0.5, 0.9), 0.2, 0.2, color='thistle'))\n\n# Draw a rectangle with a plum fill\nax.add_patch(plt.Rectangle((0.7, 0.7), 0.2, 0.2, color='plum'))\n\n# Draw a rectangle with a violet fill\nax.add_patch(plt.Rectangle((0.9, 0.5), 0.2, 0.2, color='violet'))\n\n# Draw a rectangle with a orchid fill\nax.add_patch(plt.Rectangle((0.1, 0.3), 0.2, 0.2, color='orchid'))\n\n# Draw a rectangle with a fuchsia fill\nax.add_patch(plt.Rectangle((0.3, 0.5), 0.2, 0.2, color='fuchsia'))\n\n# Draw a rectangle with a darkorchid fill\nax.add_patch(plt.Rectangle((0.5, 0.7), 0.2, 0.2, color='darkorchid'))\n\n# Draw a rectangle with a purple fill\nax.add_patch(plt.Rectangle((0.7, 0.9), 0.2, 0.2, color='purple'))\n\n# Draw a rectangle with a indigo fill\nax.add_patch(plt.Rectangle((0.9, 0.7), 0.2, 0.2, color='indigo'))\n\n# Draw a rectangle with a blueviolet fill\nax.add_patch(plt.Rectangle((0.1, 0.5), 0.2, 0.2, color='blueviolet'))\n\n# Draw a rectangle with a darkviolet fill\nax.add_patch(plt.Rectangle((0.3, 0.7), 0.2, 0.2, color='darkviolet'))\n\n# Draw a rectangle with a purple fill\nax.add_patch(plt.Rectangle((0.5, 0.9), 0.2, 0.2, color='purple'))\n\n# Draw a rectangle with a magenta fill\nax.add_patch(plt.Rectangle((0.7, 0.7), 0.2, 0.2, color='magenta'))\n\n# Draw a rectangle with a fuchsia fill\nax.add_patch(plt.Rectangle((0.9, 0.5), 0.2, 0.2, color='fuchsia'))\n\n# Draw a rectangle with a crimson fill\nax.add_patch(plt.Rectangle((0.1, 0.3), 0.2, 0.2, color='crimson'))\n\n# Draw a rectangle with a firebrick fill\nax.add_patch(plt.Rectangle((0.3, 0.5), 0.2, 0.2, color='firebrick'))\n\n# Draw a rectangle with a darkred fill\nax.add_patch(plt.Rectangle((0.5, 0.7), 0.2, 0.2, color='darkred'))\n\n# Draw a rectangle with a red fill\nax.add_patch(plt.Rectangle((0.7, 0.9), 0.2, 0.2, color='red'))\n\n# Draw a rectangle with a maroon fill\nax.add_patch(plt.Rectangle((0.9, 0.7), 0.2, 0.2, color='maroon'))\n\n# Draw a rectangle with a brown fill\nax.add_patch(plt.Rectangle((0.1, 0.5), 0.2, 0.2, color='brown'))\n\n# Draw a rectangle with a sienna fill\nax.add_patch(plt.Rectangle((0.3, 0.7), 0.2, 0.2, color='sienna'))\n\n# Draw a rectangle with a peru fill\nax.add_patch(plt.Rectangle((0.5, 0.9), 0.2, 0.2, color='peru'))\n\n# Draw a rectangle with a tan fill\nax.add_patch(plt.Rectangle((0.7, 0.7), 0.2, 0.2, color='tan'))\n\n# Draw a rectangle with a chocolate fill\nax.add_patch(plt.Rectangle((0.9, 0.5), 0.2, 0.2, color='chocolate'))\n\n# Draw a rectangle with a saddlebrown fill\nax.add_patch(plt.Rectangle((0.1, 0.3), 0.2, 0.2, color='saddlebrown'))\n\n# Draw a rectangle with a sienna fill\nax.add_patch(plt.Rectangle((0.3, 0.5), 0.2, 0.2, color='sienna'))\n\n# Draw a rectangle with a peru fill\nax.add_patch(plt.Rectangle((0.5, 0.7), 0.2, 0.2, color='peru'))\n\n# Draw a rectangle with a tan fill\nax.add_patch(plt.Rectangle((0.7, 0.9), 0.2, 0.2, color='tan'))\n\n# Draw a rectangle with a chocolate fill\nax.add_patch(plt.Rectangle((0.9, 0.7), 0.2, 0.2, color='chocolate'))\n\n# Draw a rectangle with a saddlebrown fill\nax.add_patch(plt.Rectangle((0.1, 0.5), 0.2, 0.2, color='saddlebrown'))\n\n# Draw a rectangle with a sienna fill\nax.add_patch(plt.Rectangle((0.3, 0.7), 0.2, 0.2, color='sienna'))\n\n# Draw a rectangle with a peru fill\nax.add_patch(plt.Rectangle((0.5, 0.9), 0.2, 0.2, color='peru'))\n\n# Draw a rectangle with a tan fill\nax.add_patch(plt.Rectangle((0.7, 0.7), 0.2, 0.2, color='tan'))\n\n# Draw a rectangle with a chocolate fill\nax.add_patch(plt.Rectangle((0.9, 0.5), 0.2, 0.2, color='chocolate'))\n\n# Draw a rectangle with a saddlebrown fill\nax.add_patch(plt.Rectangle((0.1, 0.3), 0.2, 0.2, color='saddlebrown'))\n\n# Draw a rectangle with a sienna fill\nax.add_patch(plt.Rectangle((0.3, 0.5), 0.2, 0.2, color='sienna'))\n\n# Draw a rectangle with a peru fill\nax.add_patch(plt.Rectangle((0.5, 0.7), 0.2, 0.2, color='peru'))\n\n# Draw a rectangle with a tan fill\nax.add_patch(plt.Rectangle((0.7, 0.9), 0.2, 0.2, color='tan'))\n\n# Draw a rectangle with a chocolate fill\nax.add_patch(plt.Rectangle((0.9, 0.7), 0.2, 0.2, color='chocolate'))\n\n# Draw a rectangle with a saddlebrown fill\nax.add_patch(plt.Rectangle((0.1, 0.5), 0.2, 0.2, color='saddlebrown'))\n\n# Draw a rectangle with a sienna fill\nax.add_patch(plt.Rectangle((0.3, 0.7), 0.2, 0.2, color='sienna'))\n\n# Draw a rectangle with a peru fill\nax.add_patch(plt.Rectangle((0.5, 0.9), 0.2, 0.2, color='peru'))\n\n# Draw a rectangle with a tan fill\nax.add_patch(plt.Rectangle((0.7, 0.7), 0.2, 0.2, color='tan'))\n\n# Draw a rectangle with a chocolate fill\nax.add_patch(plt.Rectangle((0.9, 0.5), 0.2, 0.2, color='chocolate'))\n\n# Draw a rectangle with a saddlebrown fill\nax.add_patch(plt.Rectangle((0.1, 0.3), 0.2, 0.2, color='saddlebrown'))\n\n# Draw a rectangle with a sienna fill\nax.add_patch(plt.Rectangle((0.3, 0.5), 0.2, 0.2, color='sienna'))\n\n# Draw a rectangle with a peru fill\nax.add_patch(plt.Rectangle((0.5, 0.7), 0.2, 0.2, color='peru'))\n\n# Draw a rectangle with a tan fill\nax.add_patch(plt.Rectangle((0.7, 0.9), 0.2, 0.2, color='tan'))\n\n# Draw a rectangle with a chocolate fill\nax.add_patch(plt.Rectangle((0.9, 0.7), 0.2, 0.2, color='chocolate'))\n\n# Draw a rectangle with a saddlebrown fill\nax.add_patch"}
{"file": "dataset/ori_500/multidiff_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis for the first plot\nfig1, ax1 = plt.subplots(figsize=(8, 6))\nax1.plot([0, 1, 2, 3, 4], [10, 8, 6, 4, 2], 'bo-')\nax1.set_xlabel('Relative Year')\nax1.set_ylabel('Energy Consumption (GWh)')\nax1.set_title('Energy Consumption Over Time')\n\n# Create a figure and axis for the second plot\nfig2, ax2 = plt.subplots(figsize=(8, 6), subplot_kw={'projection': '3d'})\nx = np.linspace(-4, 4, 100)\ny = np.linspace(-4, 4, 100)\nx, y = np.meshgrid(x, y)\nz = np.sin(np.sqrt(x**2 + y**2))\nax2.plot_surface(x, y, z, cmap='Blues')\nax2.set_xlabel('Relative Year')\nax2.set_ylabel('Relative Month')\nax2.set_zlabel('Renewable Energy Ratio (%)')\nax2.set_title('Renewable Energy Ratio Over Time')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis for the pie chart\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Define the data for the pie chart\nlabels = ['Ancient Scripts', 'Modern Records', 'Medieval Texts', 'Renaissance Literature']\nsizes = [35, 15, 20, 30]\ncolors = ['#ff9999','#66b3ff','#99ff99','#ffcc99']\n\n# Create a pie chart\nax.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%', startangle=140)\n\n# Set the title of the pie chart\nax.set_title('Historical Document Types in Library')\n\n# Create a scatter plot\nfig, ax = plt.subplots(figsize=(10, 5))\nx = np.array([1400, 1600, 1800, 2000])\ny = np.array([350, 300, 250, 200])\ncolors = ['r', 'g', 'b', 'c']\nax.scatter(x, y, color=colors)\nax.set_xlabel('Year')\nax.set_ylabel('Number of Documents')\nax.set_title('Document Count Over Historical Periods')\n\n# Add text annotations to the scatter plot\nfor i, txt in enumerate(labels):\n    ax.annotate(txt, (x[i], y[i]))\n\n# Display the plots\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Set the title of the plot\nax.set_title('Luxury Brand Popularity vs Price')\n\n# Set the x-axis label\nax.set_xlabel('Average Price ($)')\n\n# Set the y-axis label\nax.set_ylabel('Popularity Index')\n\n# Set the x-axis limits\nax.set_xlim(1000, 2000)\n\n# Set the y-axis limits\nax.set_ylim(750, 950)\n\n# Create a scatter plot\nscatter = ax.scatter([1000, 1200, 1400, 1600, 1800, 2000], [850, 875, 825, 800, 775, 750], c=['purple', 'green', 'yellow', 'blue', 'cyan', 'magenta'])\n\n# Create a bar chart\nbar = ax.bar(['Gucci', 'Prada', 'Louis Vuitton', 'Chanel', 'Dior'], [8, 6, 4, 2, 0], color='blue')\n\n# Create a pie chart\npie = ax.pie([30, 20, 50], colors=['red', 'green', 'blue'], labels=['Red', 'Green', 'Blue'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for Accuracy\naccuracy_data = {\n    'Zhang2020': [75.32, 77.11, 77.03, 76.86, 74.52],\n    'Addelpalli2021': [75.32, 77.11, 77.03, 76.86, 74.52],\n    'Rice2020': [75.32, 77.11, 77.03, 76.86, 74.52],\n    'Rade2021': [75.32, 77.11, 77.03, 76.86, 74.52],\n    'Engstrom2019': [75.32, 77.11, 77.03, 76.86, 74.52],\n    'Hendrycks2019': [75.32, 77.11, 77.03, 76.86, 74.52]\n}\n\n# Data for Robust Accuracy\nrobust_accuracy_data = {\n    'Zhang2020': [60.5, 59.3],\n    'Addelpalli2021': [59.3],\n    'Rice2020': [59.3],\n    'Rade2021': [59.3],\n    'Engstrom2019': [59.3],\n    'Henriques2021': [59.3],\n    'Addelpalli2021': [59.3]\n}\n\n# Data for Accuracy Diff\naccuracy_diff_data = {\n    'Zhang2020': [0.02, -0.8, -2.34, 0.0, 0.0],\n    'Addelpalli2021': [0.02, -0.8, -2.34, 0.0, 0.0],\n    'Rice2020': [0.02, -0.8, -2.34, 0.0, 0.0],\n    'Rade2021': [0.02, -0.8, -2.34, 0.0, 0.0],\n    'Engstrom2019': [0.02, -0.8, -2.34, 0.0, 0.0],\n    'Hendrycks2019': [0.02, -0.8, -2.34, 0.0, 0.0]\n}\n\n# Data for Robust Accuracy Diff\nrobust_accuracy_diff_data = {\n    'Zhang2020': [-2.85, -2.85],\n    'Addelpalli2021': [-2.85, -2.85],\n    'Rice2020': [-2.85, -2.85],\n    'Rade2021': [-2.85, -2.85],\n    'Engstrom2019': [-2.85, -2.85],\n    'Henriques2021': [-2.85, -2.85],\n    'Addelpalli2021': [-2.85, -2.85]\n}\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 7.0))\n\n# Plot the accuracy data\nfor i, (key, value) in enumerate(accuracy_data.items()):\n    ax.barh(key, value, color=plt.cm.viridis(i / len(accuracy_data)))\n\n# Plot the robust accuracy data\nfor i, (key, value) in enumerate(robust_accuracy_data.items()):\n    ax.barh(key, value, color=plt.cm.viridis(i / len(robust_accuracy_data)), left=accuracy_data[key])\n\n# Plot the accuracy diff data\nfor i, (key, value) in enumerate(accuracy_diff_data.items()):\n    ax.barh(key, value, color=plt.cm.viridis(i / len(accuracy_diff_data)), left=[sum(x) for x in zip(accuracy_data[key], robust_accuracy_data[key])])\n\n# Plot the robust accuracy diff data\nfor i, (key, value) in enumerate(robust_accuracy_diff_data.items()):\n    ax.barh(key, value, color=plt.cm.viridis(i / len(robust_accuracy_diff_data)), left=[sum(x) for x in zip(accuracy_data[key], robust_accuracy_data[key], accuracy_diff_data[key])])\n\n# Set the title and labels\nax.set_title('Accuracy (%)')\nax.set_xlabel('Accuracy (%)')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\ncontext = ['Full Context', 'Partial Context', 'No Context', 'HCube', 'Sobol', 'Random']\nvariance = [0.6, 0.5, 0.4, 0.3, 0.2, 0.1]\navg_regret = [0.3, 0.25, 0.2, 0.15, 0.1, 0.05]\n\n# Plot\nfig, ax1 = plt.subplots(figsize=(7, 9))\n\ncolor = 'tab:blue'\nax1.set_xlabel('Trials')\nax1.set_ylabel('Generalized Variance', color=color)\nax1.plot(variance, color=color)\nax1.tick_params(axis='y', labelcolor=color)\n\nax2 = ax1.twinx()  \ncolor = 'tab:red'\nax2.set_ylabel('Avg Regret', color=color)  \nax2.plot(avg_regret, color=color)\nax2.tick_params(axis='y', labelcolor=color)\n\nfig.tight_layout()\nplt.show()\n```"}
{"file": "dataset/ori_500/multidiff_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 4))\n\n# Set the title of the plot\nax.set_title('Debaters')\n\n# Create a bar chart\nbar_width = 0.35\nindex = range(1, 11)\nbar1 = ax.bar(index, [200, 180, 160, 140, 120, 100, 80, 60, 40, 20], bar_width, label='GPT-3.5-Turbo')\nbar2 = ax.bar([i + bar_width for i in index], [190, 170, 150, 130, 110, 90, 70, 50, 30, 10], bar_width, label='Claude 1.3')\nbar3 = ax.bar([i + 2 * bar_width for i in index], [180, 160, 140, 120, 100, 80, 60, 40, 20, 0], bar_width, label='Claude 2.1')\nbar4 = ax.bar([i + 3 * bar_width for i in index], [170, 150, 130, 110, 90, 70, 50, 30, 10, -10], bar_width, label='GPT-4-Turbo')\n\n# Add some text for labels, title, and custom x-axis tick labels, etc.\nax.set_xlabel('Debater')\nax.set_ylabel('Rating')\nax.set_xticks([i + 1.5 * bar_width for i in index])\nax.set_xticklabels(['Debater 1', 'Debater 2', 'Debater 3', 'Debater 4', 'Debater 5', 'Debater 6', 'Debater 7', 'Debater 8', 'Debater 9', 'Debater 10'])\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the pie chart\nsizes = [4.6, 10.6, 11.3, 13.2, 29.8]\nlabels = ['Gray', 'Purple', 'Yellow', 'Light Blue', 'Cyan']\ncolors = ['#808080', '#800080', '#FFFF00', '#ADD8E6', '#00FFFF']\n\n# Create a pie chart\nfig, ax = plt.subplots(figsize=(5.0, 5.0))\nwedges, texts, autotexts = ax.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%', startangle=140)\n\n# Set the aspect ratio of the plot to be equal so that pie is drawn as a circle.\nax.axis('equal')  \n\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Draw a circle\ncircle = plt.Circle((0.5, 0.5), 0.4, color='blue')\nax.add_artist(circle)\n\n# Draw a rectangle\nrect = plt.Rectangle((0.2, 0.2), 0.6, 0.1, color='green')\nax.add_artist(rect)\n\n# Draw a rectangle\nrect = plt.Rectangle((0.2, 0.3), 0.6, 0.1, color='red')\nax.add_artist(rect)\n\n# Draw a rectangle\nrect = plt.Rectangle((0.2, 0.4), 0.6, 0.1, color='purple')\nax.add_artist(rect)\n\n# Draw a rectangle\nrect = plt.Rectangle((0.2, 0.5), 0.6, 0.1, color='orange')\nax.add_artist(rect)\n\n# Draw a rectangle\nrect = plt.Rectangle((0.2, 0.6), 0.6, 0.1, color='brown')\nax.add_artist(rect)\n\n# Draw a rectangle\nrect = plt.Rectangle((0.2, 0.7), 0.6, 0.1, color='pink')\nax.add_artist(rect)\n\n# Draw a rectangle\nrect = plt.Rectangle((0.2, 0.8), 0.6, 0.1, color='yellow')\nax.add_artist(rect)\n\n# Draw a rectangle\nrect = plt.Rectangle((0.2, 0.9), 0.6, 0.1, color='cyan')\nax.add_artist(rect)\n\n# Draw a rectangle\nrect = plt.Rectangle((0.2, 0.1), 0.6, 0.1, color='magenta')\nax.add_artist(rect)\n\n# Set the aspect ratio of the plot to be equal\nax.set_aspect('equal')\n\n# Set the limits of the plot\nax.set_xlim(0, 1)\nax.set_ylim(0, 1)\n\n# Set the title of the plot\nax.set_title('Matplotlib bakery: A donut')\n\n# Set the labels of the plot\nax.set_xlabel('90 g sugar')\nax.set_ylabel('225 g flour')\n\n# Set the tick labels of the plot\nax.set_xticklabels(['1 egg', '60 g butter'])\nax.set_yticklabels(['1/2 package of yeast', '100 ml milk'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the pie chart\nlabels = ['Transport', 'Utilities', 'Food', 'Others', 'Entertainment']\nsizes = [37.5, 16.7, 29.2, 10.0, 10.0]\ncolors = ['#007BFF', '#1E90FF', '#FFD700', '#FFA500', '#FF4500']\nexplode = (0.1, 0, 0, 0, 0)  # explode 1st slice\n\n# Create a pie chart\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\nwedges, texts, autotexts = ax.pie(sizes, explode=explode, labels=labels, colors=colors,\nautopct='%1.1f%%', startangle=140)\n\n# Add some text for labels and title\ncentre_circle = plt.Circle((0,0),0.70,fc='white')\nfig.gca().add_artist(centre_circle)\nax.set_title('Expenses - Company vs. Project')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for LoRA\nlora_data = [31.4, 15.7, 19.9, 33.0]\nlora_labels = ['Unused', 'Model', 'Optimizer', 'Gradient']\nlora_colors = ['orange', 'blue', 'green', 'yellow']\n\n# Data for QLoRA\nqlora_data = [54.8, 10.5, 6.3, 28.4]\nqlora_labels = ['Unused', 'Optimizer', 'Model', 'Gradient']\nqlora_colors = ['orange', 'red', 'pink', 'lightgreen']\n\nfig, axs = plt.subplots(1, 2, figsize=(10.0, 4.0))\n\n# Plotting LoRA\naxs[0].pie(lora_data, labels=lora_labels, colors=lora_colors, autopct='%1.1f%%')\naxs[0].set_title('LoRA')\n\n# Plotting QLoRA\naxs[1].pie(qlora_data, labels=qlora_labels, colors=qlora_colors, autopct='%1.1f%%')\naxs[1].set_title('QLoRA')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the first chart\ndata1 = [25.1, 26.4, 12.6]\ncolors1 = ['yellow', 'green', 'gray']\nexplode1 = [0.1, 0, 0]\n\n# Define the data for the second chart\ndata2 = [46.2, 4.6, 5.3, 23.9]\ncolors2 = ['yellow', 'orange', 'gray', 'green']\nexplode2 = [0.1, 0, 0, 0]\n\n# Create the first chart\nfig, ax1 = plt.subplots(figsize=(5.0, 8.0))\nax1.pie(data1, colors=colors1, explode=explode1, startangle=90, autopct='%1.1f%%')\nax1.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\n\n# Create the second chart\nfig, ax2 = plt.subplots(figsize=(5.0, 8.0))\nax2.pie(data2, colors=colors2, explode=explode2, startangle=90, autopct='%1.1f%%')\nax2.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\n\n# Add labels to the charts\nfig.text(0.5, 0.95, 'Full Finetuning', ha='center', va='center', fontsize=14)\nfig.text(0.5, 0.475, 'QLoRA', ha='center', va='center', fontsize=14)\n\n# Add legends to the charts\nfig.legend(['Model', 'Optimizer', 'Gradient+Activations+Other', 'Unused'], loc='upper right')\n\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Define the data for the pie chart\ndata = [25, 35, 10, 10, 10, 20]\nlabels = ['Fruits', 'Proteins', 'Dairy', 'Grains', 'Vegetables', 'Fruits']\ncolors = ['pink', 'skyblue', 'lavender', 'orange', 'lightgreen', 'pink']\n\n# Create the pie chart\nwedges, texts, autotexts = ax.pie(data, labels=labels, colors=colors, autopct='%1.1f%%', startangle=90)\n\n# Set the title of the pie chart\nax.set_title('Nutritional Distribution')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nlabels = ['Education', 'Entertainment', 'Technology']\nsizes = [18.8, 21.4, 37.5]\ncolors = ['blue', 'green', 'yellow']\nexplode = (0.1, 0, 0)  # explode 1st slice\n\n# Create a pie chart\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\nax.pie(sizes, explode=explode, labels=labels, colors=colors,\nautopct='%1.1f%%', shadow=True, startangle=140)\n\n# Equal aspect ratio ensures that pie is drawn as a circle.\nax.axis('equal')  \n\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the pie chart\nsizes = [20, 10, 30, 40]\nlabels = ['Dogs', 'Logs', 'Frogs', 'Hogs']\ncolors = ['blue', 'purple', 'pink', 'cyan']\n\n# Create a pie chart\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\nax.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%', startangle=90)\n\n# Set the title of the pie chart\nax.set_title('Pie Chart')\n\n# Display the pie chart\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nlabels = ['David', 'John', 'Marry', 'Peter']\nsizes = [40, 29, 11, 20]\ncolors = ['blue', 'orange', 'green', 'red']\n\n# Create a pie chart\nfig, ax = plt.subplots(figsize=(5.0, 5.0))\nax.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%', startangle=140)\n\n# Set the title\nax.set_title('Pie Chart')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the pie chart\nlabels = ['France', 'Germany', 'Italy']\nsizes = [18, 12, 28]\ncolors = ['orange', 'blue', 'red']\nexplode = (0.1, 0, 0)  # explode 1st slice\n\n# Create a pie chart\nfig, ax = plt.subplots(figsize=(5.0, 5.0))\nax.pie(sizes, explode=explode, labels=labels, colors=colors,\nautopct='%1.1f%%', shadow=True, startangle=140)\n\n# Equal aspect ratio ensures that pie is drawn as a circle.\nax.axis('equal')  \n\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the pie chart\nsizes = [26.2, 13.3, 14.3, 21.4, 19.0]\ncolors = ['red', 'orange', 'yellow', 'pink', 'purple']\nlabels = ['Slice 1', 'Slice 2', 'Slice 3', 'Slice 4', 'Slice 5']\n\n# Create a pie chart\nfig, ax = plt.subplots(figsize=(5.0, 5.0))\nax.pie(sizes, colors=colors, labels=labels, autopct='%1.1f%%', startangle=140)\n\n# Set the title of the pie chart\nax.set_title('Slice of a pie chart')\n\n# Display the pie chart\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\ncategories = ['Psychological', 'Others', 'Market', 'Satisfactory', 'Social']\nvalues = [12.4, 35.4, 17.2, 24.7, 10.3]\n\n# Create a pie chart\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\nax.pie(values, labels=categories, autopct='%1.1f%%', startangle=90)\n\n# Set the title\nax.set_title('Pie Chart of Categories')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data\nlabels = ['Youtube', 'Facebook', 'Instagram', 'Twitter', 'LinkedIn']\nsizes = [25, 10, 10, 10, 35]\ncolors = ['lightblue', 'skyblue', 'lightskyblue', 'darkblue', 'navy']\n\n# Create a pie chart\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\nax.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%', startangle=90)\n\n# Set the title\nax.set_title('Social Media Usage')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the pie chart\nlabels = ['COLING', 'EACL', 'NAACL', 'EMNLP']\nsizes = [25.4, 7.4, 20.3, 12.2]\ncolors = ['lightblue', 'orange', 'lightgreen', 'purple']\nexplode = (0.1, 0, 0, 0)  # explode 1st slice\n\n# Create a pie chart\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\nax.pie(sizes, explode=explode, labels=labels, colors=colors,\nautopct='%1.1f%%', shadow=True, startangle=140)\n\n# Equal aspect ratio ensures that pie is drawn as a circle.\nax.axis('equal')  \n\n# Add a title\nax.set_title('NLP Conference Influence')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/pie_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Define the data for the pie charts\ndata1 = [25, 8.3, 10, 16.7, 20]\ndata2 = [37.5, 15, 12.5, 30, 25]\ndata3 = [10, 16.7, 20, 30, 25]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6, 6))\n\n# Plot the first pie chart\nax.pie(data1, colors=['red', 'orange', 'brown', 'yellow', 'green'], startangle=90)\nax.text(0, 0, 'Coal', ha='center', va='center', fontsize=14)\n\n# Plot the second pie chart\nax.pie(data2, colors=['pink', 'blue', 'purple', 'cyan', 'magenta'], startangle=90)\nax.text(0, 0, 'Hydro', ha='center', va='center', fontsize=14)\n\n# Plot the third pie chart\nax.pie(data3, colors=['grey', 'brown', 'yellow', 'green', 'blue'], startangle=90)\nax.text(0, 0, 'Wind', ha='center', va='center', fontsize=14)\n\n# Set the title of the plot\nax.set_title('Energy Consumption - National vs. Project')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/quiver_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 4))\n\n# Set the title of the plot\nax.set_title('Language Sentiment Analysis')\n\n# Set the x-axis label\nax.set_xlabel('Sentiment Score')\n\n# Set the y-axis label\nax.set_ylabel('Number of Tweets')\n\n# Create a bar chart\nax.bar(['English', 'French', 'German'], [1.88, 2.88, 3.38], color='blue')\n\n# Add text annotations to the bars\nfor i, v in enumerate([1.88, 2.88, 3.38]):\n    ax.text(i, v + 0.1, str(v), ha='center', va='bottom')\n\n# Create a second subplot\nax2 = fig.add_subplot(122)\n\n# Set the title of the plot\nax2.set_title('Language Sentiment Analysis')\n\n# Set the x-axis label\nax2.set_xlabel('Sentiment Score')\n\n# Set the y-axis label\nax2.set_ylabel('Number of Tweets')\n\n# Create a bar chart\nax2.bar(['Chinese', 'Korean', 'Japanese'], [1.11, 0.50, 0.78], color='blue')\n\n# Add text annotations to the bars\nfor i, v in enumerate([1.11, 0.50, 0.78]):\n    ax2.text(i, v + 0.1, str(v), ha='center', va='bottom')\n\n# Create a third subplot\nax3 = fig.add_subplot(123)\n\n# Set the title of the plot\nax3.set_title('Language Sentiment Analysis')\n\n# Set the x-axis label\nax3.set_xlabel('Sentiment Score')\n\n# Set the y-axis label\nax3.set_ylabel('Number of Tweets')\n\n# Create a bar chart\nax3.bar(['English', 'French', 'German'], [1.88, 2.88, 3.38], color='blue')\n\n# Add text annotations to the bars\nfor i, v in enumerate([1.88, 2.88, 3.38]):\n    ax3.text(i, v + 0.1, str(v), ha='center', va='bottom')\n\n# Create a fourth subplot\nax4 = fig.add_subplot(124)\n\n# Set the title of the plot\nax4.set_title('Language Sentiment Analysis')\n\n# Set the x-axis label\nax4.set_xlabel('Sentiment Score')\n\n# Set the y-axis label\nax4.set_ylabel('Number of Tweets')\n\n# Create a bar chart\nax4.bar(['Chinese', 'Korean', 'Japanese'], [1.11, 0.50, 0.78], color='blue')\n\n# Add text annotations to the bars\nfor i, v in enumerate([1.11, 0.50, 0.78]):\n    ax4.text(i, v + 0.1, str(v), ha='center', va='bottom')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/quiver_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(5.0, 4.0))\n\n# Set the x-axis limits\nax.set_xlim(0, 10)\n\n# Set the y-axis limits\nax.set_ylim(-5, 5)\n\n# Set the x-axis ticks\nax.set_xticks(range(0, 11, 2))\n\n# Set the y-axis ticks\nax.set_yticks(range(-5, 6, 2))\n\n# Set the x-axis labels\nax.set_xticklabels(['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10'])\n\n# Set the y-axis labels\nax.set_yticklabels(['-5', '-4', '-3', '-2', '-1', '0', '1', '2', '3', '4', '5'])\n\n# Draw a rectangle\nrect = plt.Rectangle((0, -4), 1, 1, color='red')\nax.add_patch(rect)\n\n# Draw a line\nline = plt.Line2D([0, 1], [-4, -3], color='red')\nax.add_line(line)\n\n# Draw a circle\ncircle = plt.Circle((0, -4), 0.1, color='black')\nax.add_artist(circle)\n\n# Draw a rectangle\nrect = plt.Rectangle((2, -3), 1, 1, color='red')\nax.add_patch(rect)\n\n# Draw a line\nline = plt.Line2D([2, 3], [-3, -2], color='red')\nax.add_line(line)\n\n# Draw a circle\ncircle = plt.Circle((2, -3), 0.1, color='black')\nax.add_artist(circle)\n\n# Draw a rectangle\nrect = plt.Rectangle((4, -2), 1, 1, color='red')\nax.add_patch(rect)\n\n# Draw a line\nline = plt.Line2D([4, 5], [-2, -1], color='red')\nax.add_line(line)\n\n# Draw a circle\ncircle = plt.Circle((4, -2), 0.1, color='black')\nax.add_artist(circle)\n\n# Draw a rectangle\nrect = plt.Rectangle((6, -1), 1, 1, color='red')\nax.add_patch(rect)\n\n# Draw a line\nline = plt.Line2D([6, 7], [-1, 0], color='red')\nax.add_line(line)\n\n# Draw a circle\ncircle = plt.Circle((6, -1), 0.1, color='black')\nax.add_artist(circle)\n\n# Draw a rectangle\nrect = plt.Rectangle((8, 0), 1, 1, color='red')\nax.add_patch(rect)\n\n# Draw a line\nline = plt.Line2D([8, 9], [0, 1], color='red')\nax.add_line(line)\n\n# Draw a circle\ncircle = plt.Circle((8, 0), 0.1, color='black')\nax.add_artist(circle)\n\n# Draw a rectangle\nrect = plt.Rectangle((10, 1), 1, 1, color='red')\nax.add_patch(rect)\n\n# Draw a line\nline = plt.Line2D([10, 11], [1, 2], color='red')\nax.add_line(line)\n\n# Draw a circle\ncircle = plt.Circle((10, 1), 0.1, color='black')\nax.add_artist(circle)\n\n# Draw a rectangle\nrect = plt.Rectangle((0, -4), 1, 1, color='red')\nax.add_patch(rect)\n\n# Draw a line\nline = plt.Line2D([0, 1], [-4, -3], color='red')\nax.add_line(line)\n\n# Draw a circle\ncircle = plt.Circle((0, -4), 0.1, color='black')\nax.add_artist(circle)\n\n# Draw a rectangle\nrect = plt.Rectangle((2, -3), 1, 1, color='red')\nax.add_patch(rect)\n\n# Draw a line\nline = plt.Line2D([2, 3], [-3, -2], color='red')\nax.add_line(line)\n\n# Draw a circle\ncircle = plt.Circle((2, -3), 0.1, color='black')\nax.add_artist(circle)\n\n# Draw a rectangle\nrect = plt.Rectangle((4, -2), 1, 1, color='red')\nax.add_patch(rect)\n\n# Draw a line\nline = plt.Line2D([4, 5], [-2, -1], color='red')\nax.add_line(line)\n\n# Draw a circle\ncircle = plt.Circle((4, -2), 0.1, color='black')\nax.add_artist(circle)\n\n# Draw a rectangle\nrect = plt.Rectangle((6, -1), 1, 1, color='red')\nax.add_patch(rect)\n\n# Draw a line\nline = plt.Line2D([6, 7], [-1, 0], color='red')\nax.add_line(line)\n\n# Draw a circle\ncircle = plt.Circle((6, -1), 0.1, color='black')\nax.add_artist(circle)\n\n# Draw a rectangle\nrect = plt.Rectangle((8, 0), 1, 1, color='red')\nax.add_patch(rect)\n\n# Draw a line\nline = plt.Line2D([8, 9], [0, 1], color='red')\nax.add_line(line)\n\n# Draw a circle\ncircle = plt.Circle((8, 0), 0.1, color='black')\nax.add_artist(circle)\n\n# Draw a rectangle\nrect = plt.Rectangle((10, 1), 1, 1, color='red')\nax.add_patch(rect)\n\n# Draw a line\nline = plt.Line2D([10, 11], [1, 2], color='red')\nax.add_line(line)\n\n# Draw a circle\ncircle = plt.Circle((10, 1), 0.1, color='black')\nax.add_artist(circle)\n\n# Draw a rectangle\nrect = plt.Rectangle((0, -4), 1, 1, color='red')\nax.add_patch(rect)\n\n# Draw a line\nline = plt.Line2D([0, 1], [-4, -3], color='red')\nax.add_line(line)\n\n# Draw a circle\ncircle = plt.Circle((0, -4), 0.1, color='black')\nax.add_artist(circle)\n\n# Draw a rectangle\nrect = plt.Rectangle((2, -3), 1, 1, color='red')\nax.add_patch(rect)\n\n# Draw a line\nline = plt.Line2D([2, 3], [-3, -2], color='red')\nax.add_line(line)\n\n# Draw a circle\ncircle = plt.Circle((2, -3), 0.1, color='black')\nax.add_artist(circle)\n\n# Draw a rectangle\nrect = plt.Rectangle((4, -2), 1, 1, color='red')\nax.add_patch(rect)\n\n# Draw a line\nline = plt.Line2D([4, 5], [-2, -1], color='red')\nax.add_line(line)\n\n# Draw a circle\ncircle = plt.Circle((4, -2), 0.1, color='black')\nax.add_artist(circle)\n\n# Draw a rectangle\nrect = plt.Rectangle((6, -1), 1, 1, color='red')\nax.add_patch(rect)\n\n# Draw a line\nline = plt.Line2D([6, 7], [-1, 0], color='red')\nax.add_line(line)\n\n# Draw a circle\ncircle = plt.Circle((6, -1), 0.1, color='black')\nax.add_artist(circle)\n\n# Draw a rectangle\nrect = plt.Rectangle((8, 0), 1, 1, color='red')\nax.add_patch(rect)\n\n# Draw a line\nline = plt.Line2D([8, 9], [0, 1], color='red')\nax.add_line(line)\n\n# Draw a circle\ncircle = plt.Circle((8, 0), 0.1, color='black')\nax.add_artist(circle)\n\n# Draw a rectangle\nrect = plt.Rectangle((10, 1), 1, 1, color='red')\nax.add_patch(rect)\n\n# Draw a line\nline = plt.Line2D([10, 11], [1, 2], color='red')\nax.add_line(line)\n\n# Draw a circle\ncircle = plt.Circle((10, 1), 0.1, color='black')\nax.add_artist(circle)\n\n# Draw a rectangle\nrect = plt.Rectangle((0, -4), 1, 1, color='red')\nax.add_patch(rect)\n\n# Draw a line\nline = plt.Line2D([0, 1], [-4, -3], color='red')\nax.add_line(line)\n\n# Draw a circle\ncircle = plt.Circle((0, -4), 0.1, color='black')\nax.add_artist(circle)\n\n# Draw a rectangle\nrect = plt.Rectangle((2, -3), 1, 1, color='red')\nax.add_patch(rect)\n\n# Draw a line\nline = plt.Line2D([2, 3], [-3, -2], color='red')\nax.add_line(line)\n\n# Draw a circle\ncircle = plt.Circle((2, -3), 0.1, color='black')\nax.add_artist(circle)\n\n# Draw a rectangle\nrect = plt.Rectangle((4, -2), 1, 1, color='red')\nax.add_patch(rect)\n\n# Draw a line\nline = plt.Line2D([4, 5], [-2, -1], color='red')\nax.add_line(line)\n\n# Draw a circle\ncircle = plt.Circle((4, -2), 0.1, color='black')\nax.add_artist(circle)\n\n# Draw a rectangle\nrect = plt.Rectangle((6, -1), 1, 1, color='red')\nax.add_patch(rect)\n\n# Draw a line\nline = plt.Line2D([6, 7], [-1, 0], color='red')\nax.add_line(line)\n\n# Draw a circle\ncircle = plt.Circle((6, -1), 0.1, color='black')\nax.add_artist(circle)\n\n# Draw a rectangle\nrect = plt.Rectangle((8, 0), 1, 1, color='red')\nax.add_patch(rect)\n\n# Draw a line\nline = plt.Line2D([8, 9], [0, 1], color='red')\nax.add_line(line)\n\n# Draw a circle\ncircle = plt.Circle((8, 0), 0.1, color='black')\nax.add_artist(circle)\n\n# Draw a rectangle\nrect = plt.Rectangle((10, 1), 1, 1, color='red')\nax.add_patch(rect)\n\n# Draw a line\nline = plt.Line2D([10, 11], [1, 2], color='red')\nax.add_line(line)\n\n# Draw a circle\ncircle = plt.Circle((10, 1), 0.1, color='black')\nax.add_artist(circle)\n\n# Draw a rectangle\nrect = plt.Rectangle((0, -4), 1, 1, color='red')\nax.add_patch(rect)\n\n# Draw a line\nline = plt.Line2D([0, 1], [-4, -3], color='red')\nax.add_line(line)\n\n# Draw a circle\ncircle = plt.Circle((0, -4), 0.1, color='black')\nax.add_artist(circle)\n\n# Draw a rectangle\nrect = plt.Rectangle((2, -3), 1, 1, color='red')\nax.add_patch(rect)\n\n# Draw a line\nline = plt.Line2D([2, 3], [-3, -2], color='red')\nax.add_line(line)\n\n# Draw a circle\ncircle = plt.Circle((2, -3), 0.1, color='black')\nax.add_artist(circle)\n\n# Draw a rectangle\nrect = plt.Rectangle((4, -2), 1, 1, color='red')\nax.add_patch(rect)\n\n# Draw a line\nline = plt.Line2D([4, 5], [-2, -1], color='red')\nax.add_line(line)\n\n# Draw a circle\ncircle = plt.Circle((4, -2), 0.1, color='black')\nax.add_artist(circle)\n\n# Draw a rectangle\nrect = plt.Rectangle((6, -1), 1, 1, color='red')\nax.add_patch(rect)\n\n# Draw a line\nline = plt.Line2D([6, 7], [-1, 0], color='red')\nax.add_line(line)\n\n# Draw a circle\ncircle = plt.Circle((6, -1), 0.1, color='black')\nax.add_artist(circle)\n\n# Draw a rectangle\nrect = plt.Rectangle((8, 0), 1, 1, color='red')\nax.add_patch(rect)\n\n# Draw a line\nline = plt.Line2D([8, 9], [0, 1], color='red')\nax.add_line(line)\n\n# Draw a circle\ncircle = plt.Circle((8, 0), 0.1, color='black')\nax.add_artist(circle)\n\n# Draw a rectangle\nrect = plt.Rectangle((10, 1), 1, 1, color='red')\nax.add_patch(rect)\n\n# Draw a line\nline = plt.Line2D([10, 11], [1, 2], color='red')\nax.add_line(line)\n\n# Draw a circle\ncircle = plt.Circle((10, 1), 0.1, color='black')\nax.add_artist(circle)\n\n# Draw a rectangle\nrect = plt.Rectangle((0, -4), 1, 1, color='red')\nax.add_patch(rect)\n\n# Draw a line\nline = plt.Line2D([0, 1], [-4, -3], color='red')\nax.add_line(line)\n\n# Draw a circle\ncircle = plt.Circle((0, -4), 0.1, color='black')\nax.add_artist(circle)\n\n# Draw a rectangle\nrect = plt.Rectangle((2, -3), 1, 1, color='red')\nax.add_patch(rect)\n\n# Draw a line\nline = plt.Line2D([2, 3], [-3, -2], color='red')\nax.add_line(line)\n\n# Draw a circle\ncircle = plt.Circle((2, -3), 0.1, color='black')\nax.add_artist(circle)\n\n# Draw a rectangle\nrect = plt.Rectangle((4, -2), 1, 1, color='red')\nax.add_patch(rect)\n\n# Draw a line\nline = plt.Line2D([4, 5], [-2, -1], color='red')\nax.add_line(line)\n\n# Draw a circle\ncircle = plt.Circle((4, -2), 0.1, color='black')\nax.add_artist(circle)\n\n# Draw a rectangle\nrect = plt.Rectangle((6, -1), 1, 1, color='red')\nax.add_patch(rect)\n\n# Draw a line\nline = plt.Line2D([6, 7], [-1, 0], color='red')\nax.add_line(line)\n\n# Draw a circle\ncircle = plt.Circle((6, -1), 0.1, color='black')\nax.add_artist(circle)\n\n# Draw a rectangle\nrect = plt.Rectangle((8, 0), 1, 1, color='red')\nax.add_patch(rect)\n\n# Draw a line\nline = plt.Line2D([8, 9], [0, 1], color='red')\nax.add_line(line)\n\n# Draw a circle\ncircle = plt.Circle((8, 0), 0.1, color='black')\nax.add_artist(circle)\n\n# Draw a rectangle\nrect = plt.Rectangle((10, 1), 1, 1, color='red')\nax.add_patch(rect)\n\n# Draw a line\nline = plt.Line2D([10, 11], [1, 2], color='red')\nax.add_line(line)\n\n# Draw a circle\ncircle = plt.Circle((10, 1), 0.1, color='black')\nax.add_artist(circle)\n\n# Draw a rectangle\nrect = plt.Rectangle((0, -4), 1, 1, color='red')\nax.add_patch(rect)\n\n# Draw a line\nline = plt.Line2D([0, 1], [-4, -3], color='red')\nax.add_line(line)\n\n# Draw a circle\ncircle = plt.Circle((0, -4), 0.1, color='black')\nax.add_artist(circle)\n\n# Draw a rectangle\nrect = plt.Rectangle((2, -3), 1, 1, color='red')\nax.add_patch(rect)\n\n# Draw a line\nline = plt.Line2D([2, 3], [-3, -2], color='red')\nax.add_line(line)\n\n# Draw a circle\ncircle = plt.Circle((2, -3), 0.1, color='black')\nax.add_artist(circle)\n\n# Draw a rectangle\nrect = plt.Rectangle((4, -2), 1, 1, color='red')\nax.add_patch(rect)\n\n# Draw a line\nline = plt.Line2D([4, 5], [-2, -1], color='red')\nax.add_line(line)\n\n# Draw a circle\ncircle = plt.Circle((4, -2), 0.1, color='black')\nax.add_artist(circle)\n\n# Draw a rectangle\nrect = plt.Rectangle((6, -1), 1, 1, color='red')\nax.add_patch(rect)\n\n# Draw a line\nline = plt.Line2D([6, 7], [-1, 0], color='red')\nax.add_line(line)\n\n# Draw a circle\ncircle = plt.Circle((6, -1), 0.1, color='black')\nax.add_artist(circle)\n\n# Draw a rectangle\nrect = plt.Rectangle((8, 0), 1, 1, color='red')\nax.add_patch(rect)\n\n# Draw a line\nline = plt.Line2D([8, 9], [0, 1], color='red')\nax.add_line(line)\n\n# Draw a circle\ncircle = plt.Circle((8, 0), 0.1, color='black')\nax.add_artist(circle)\n\n# Draw a rectangle\nrect = plt.Rectangle((10, 1), 1, 1, color='red')\nax.add_patch(rect)\n\n# Draw a line\nline = plt.Line2D([10, 11], [1, 2], color='red')\nax.add_line(line)\n\n# Draw a circle\ncircle = plt.Circle((10, 1), 0.1, color='black')\nax.add_artist(circle)\n\n# Draw a rectangle\nrect = plt.Rectangle((0, -4), 1, 1, color='red')\nax.add_patch(rect)\n\n# Draw a line\nline = plt.Line2D([0, "}
{"file": "dataset/ori_500/quiver_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the background color of the plot\nax.set_facecolor('lightblue')\n\n# Draw arrows\nfor i in range(10):\n    ax.arrow(i/2, i/2, 0.1, 0.1, head_width=0.05, head_length=0.05, fc='r', ec='r')\n\n# Draw lines\nx = np.linspace(0, 1, 100)\ny1 = np.sin(x)\ny2 = np.cos(x)\ny3 = np.tan(x)\nax.plot(x, y1, 'b-')\nax.plot(x, y2, 'g-')\nax.plot(x, y3, 'r-')\n\n# Set the title and labels\nax.set_title('Sample Plot')\nax.set_xlabel('X1')\nax.set_ylabel('X2')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/quiver_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(5.0, 4.0))\n\n# Set the title of the plot\nax.set_title('Vector Field: -F + \u03c1\u2207FF (Small \u03c1)')\n\n# Create a grid of points\nx = np.linspace(-1, 1, 100)\ny = np.linspace(-1, 1, 100)\nX, Y = np.meshgrid(x, y)\n\n# Define the vector field\nU = -np.sin(np.pi * X) * np.cos(np.pi * Y)\nV = np.cos(np.pi * X) * np.sin(np.pi * Y)\n\n# Plot the vector field\nQ = ax.quiver(X, Y, U, V, color='b')\n\n# Set the limits of the plot\nax.set_xlim(-1, 1)\nax.set_ylim(-1, 1)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/quiver_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 5.0))\n\n# Set the title of the plot\nax.set_title('Magnetic Field $\\mathbf{B}$ in Tesla units')\n\n# Set the x-axis label\nax.set_xlabel('x')\n\n# Set the y-axis label\nax.set_ylabel('y')\n\n# Generate random data for the plot\nx = np.linspace(-2, 2, 100)\ny = np.linspace(-2, 2, 100)\nX, Y = np.meshgrid(x, y)\nZ = np.sin(np.sqrt(X**2 + Y**2))\n\n# Plot the data\nc = ax.contourf(X, Y, Z, cmap='viridis')\n\n# Add a colorbar to the plot\nfig.colorbar(c)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 7.0))\n\n# Set the background color of the plot\nax.set_facecolor('black')\n\n# Set the title of the plot\nax.set_title('GQA', color='white')\n\n# Set the labels for the x-axis and y-axis\nax.set_xlabel('POPE', color='white')\nax.set_ylabel('MM', color='white')\n\n# Set the tick labels for the x-axis and y-axis\nax.set_xticks([0, 1, 2, 3, 4])\nax.set_yticks([0, 1, 2, 3, 4])\n\n# Set the tick labels for the x-axis and y-axis\nax.set_xticklabels(['VQA', 'SQA-I', 'TextVQA', 'MM', 'POPE'], color='white')\nax.set_yticklabels(['MME', 'MM', 'Llava-W', 'MM-Vet', 'POPE'], color='white')\n\n# Set the grid lines\nax.grid(True, which='both', linestyle='-', linewidth=0.5)\n\n# Set the aspect ratio of the plot\nax.set_aspect('equal')\n\n# Set the limits of the x-axis and y-axis\nax.set_xlim(-1, 5)\nax.set_ylim(-1, 5)\n\n# Set the color of the text\nax.text(0.1, 0.9, 'Text(0.1, 100.0, \\'TextVQA\\')', color='red')\nax.text(0.7, 0.9, 'Text(0.7747361451096296, \\'SQA-I\\')', color='blue')\n\n# Set the color of the rectangle\nax.add_patch(plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='blue'))\n\n# Set the color of the circle\nax.add_patch(plt.Circle((0.5, 0.5), 0.2, color='green'))\n\n# Set the color of the triangle\nax.add_patch(plt.Polygon([[0.3, 0.3], [0.7, 0.3], [0.5, 0.7]], color='red'))\n\n# Set the color of the ellipse\nax.add_patch(plt.Ellipse((0.8, 0.8), 0.4, 0.2, color='yellow'))\n\n# Set the color of the star\nax.add_patch(plt.Polygon([[0.1, 0.1], [0.3, 0.3], [0.1, 0.5], [0.5, 0.3], [0.3, 0.1]], color='purple'))\n\n# Set the color of the pentagon\nax.add_patch(plt.Polygon([[0.6, 0.6], [0.8, 0.6], [0.7, 0.8], [0.5, 0.8], [0.6, 0.6]], color='orange'))\n\n# Set the color of the hexagon\nax.add_patch(plt.Polygon([[0.9, 0.9], [0.9, 0.7], [0.7, 0.7], [0.7, 0.9], [0.9, 0.9]], color='pink'))\n\n# Set the color of the heptagon\nax.add_patch(plt.Polygon([[0.2, 0.8], [0.4, 0.8], [0.3, 1.0], [0.1, 1.0], [0.2, 0.8]], color='brown'))\n\n# Set the color of the octagon\nax.add_patch(plt.Polygon([[0.5, 0.9], [0.7, 0.9], [0.8, 0.7], [0.8, 0.5], [0.7, 0.5], [0.7, 0.3], [0.5, 0.3], [0.5, 0.5]], color='cyan'))\n\n# Set the color of the nonagon\nax.add_patch(plt.Polygon([[0.8, 0.2], [0.8, 0.4], [0.6, 0.4], [0.6, 0.6], [0.4, 0.6], [0.4, 0.4], [0.2, 0.4], [0.2, 0.2], [0.4, 0.2]], color='magenta'))\n\n# Set the color of the decagon\nax.add_patch(plt.Polygon([[0.1, 0.5], [0.3, 0.5], [0.4, 0.7], [0.2, 0.7], [0.2, 0.9], [0.4, 0.9], [0.5, 0.7], [0.7, 0.7], [0.8, 0.9], [0.6, 0.9]], color='lime'))\n\n# Set the color of the dodecagon\nax.add_patch(plt.Polygon([[0.9, 0.5], [0.9, 0.7], [0.7, 0.7], [0.7, 0.9], [0.5, 0.9], [0.5, 0.7], [0.3, 0.7], [0.3, 0.9], [0.1, 0.9], [0.1, 0.7], [0.3, 0.7], [0.3, 0.5]], color='silver'))\n\n# Set the color of the trapezoid\nax.add_patch(plt.Polygon([[0.2, 0.2], [0.4, 0.2], [0.5, 0.4], [0.3, 0.4]], color='gold'))\n\n# Set the color of the parallelogram\nax.add_patch(plt.Polygon([[0.5, 0.5], [0.7, 0.5], [0.8, 0.7], [0.6, 0.7]], color='navy'))\n\n# Set the color of the rhombus\nax.add_patch(plt.Polygon([[0.8, 0.8], [0.9, 0.6], [0.7, 0.6], [0.6, 0.8]], color='olive'))\n\n# Set the color of the kite\nax.add_patch(plt.Polygon([[0.1, 0.1], [0.3, 0.3], [0.1, 0.5], [0.5, 0.3], [0.3, 0.1]], color='indigo'))\n\n# Set the color of the trapezoid\nax.add_patch(plt.Polygon([[0.6, 0.6], [0.8, 0.6], [0.7, 0.8], [0.5, 0.8], [0.6, 0.6]], color='violet'))\n\n# Set the color of the hexagon\nax.add_patch(plt.Polygon([[0.9, 0.9], [0.9, 0.7], [0.7, 0.7], [0.7, 0.9], [0.9, 0.9]], color='maroon'))\n\n# Set the color of the heptagon\nax.add_patch(plt.Polygon([[0.2, 0.8], [0.4, 0.8], [0.3, 1.0], [0.1, 1.0], [0.2, 0.8]], color='teal'))\n\n# Set the color of the octagon\nax.add_patch(plt.Polygon([[0.5, 0.9], [0.7, 0.9], [0.8, 0.7], [0.8, 0.5], [0.7, 0.5], [0.7, 0.3], [0.5, 0.3], [0.5, 0.5]], color='coral'))\n\n# Set the color of the nonagon\nax.add_patch(plt.Polygon([[0.8, 0.2], [0.8, 0.4], [0.6, 0.4], [0.6, 0.6], [0.4, 0.6], [0.4, 0.4], [0.2, 0.4], [0.2, 0.2], [0.4, 0.2]], color='darkgreen'))\n\n# Set the color of the decagon\nax.add_patch(plt.Polygon([[0.1, 0.5], [0.3, 0.5], [0.4, 0.7], [0.2, 0.7], [0.2, 0.9], [0.4, 0.9], [0.5, 0.7], [0.7, 0.7], [0.8, 0.9], [0.6, 0.9]], color='darkblue'))\n\n# Set the color of the dodecagon\nax.add_patch(plt.Polygon([[0.9, 0.5], [0.9, 0.7], [0.7, 0.7], [0.7, 0.9], [0.5, 0.9], [0.5, 0.7], [0.3, 0.7], [0.3, 0.9], [0.1, 0.9], [0.1, 0.7], [0.3, 0.7], [0.3, 0.5]], color='darkred'))\n\n# Set the color of the trapezoid\nax.add_patch(plt.Polygon([[0.2, 0.2], [0.4, 0.2], [0.5, 0.4], [0.3, 0.4]], color='darkcyan'))\n\n# Set the color of the parallelogram\nax.add_patch(plt.Polygon([[0.5, 0.5], [0.7, 0.5], [0.8, 0.7], [0.6, 0.7]], color='darkmagenta'))\n\n# Set the color of the rhombus\nax.add_patch(plt.Polygon([[0.8, 0.8], [0.9, 0.6], [0.7, 0.6], [0.6, 0.8]], color='darkgoldenrod'))\n\n# Set the color of the kite\nax.add_patch(plt.Polygon([[0.1, 0.1], [0.3, 0.3], [0.1, 0.5], [0.5, 0.3], [0.3, 0.1]], color='darkslategray'))\n\n# Set the color of the trapezoid\nax.add_patch(plt.Polygon([[0.6, 0.6], [0.8, 0.6], [0.7, 0.8], [0.5, 0.8], [0.6, 0.6]], color='darkseagreen'))\n\n# Set the color of the hexagon\nax.add_patch(plt.Polygon([[0.9, 0.9], [0.9, 0.7], [0.7, 0.7], [0.7, 0.9], [0.9, 0.9]], color='darkturquoise'))\n\n# Set the color of the heptagon\nax.add_patch(plt.Polygon([[0.2, 0.8], [0.4, 0.8], [0.3, 1.0], [0.1, 1.0], [0.2, 0.8]], color='darkviolet'))\n\n# Set the color of the octagon\nax.add_patch(plt.Polygon([[0.5, 0.9], [0.7, 0.9], [0.8, 0.7], [0.8, 0.5], [0.7, 0.5], [0.7, 0.3], [0.5, 0.3], [0.5, 0.5]], color='darkolivegreen'))\n\n# Set the color of the nonagon\nax.add_patch(plt.Polygon([[0.8, 0.2], [0.8, 0.4], [0.6, 0.4], [0.6, 0.6], [0.4, 0.6], [0.4, 0.4], [0.2, 0.4], [0.2, 0.2], [0.4, 0.2]], color='darkslateblue'))\n\n# Set the color of the decagon\nax.add_patch(plt.Polygon([[0.1, 0.5], [0.3, 0.5], [0.4, 0.7], [0.2, 0.7], [0.2, 0.9], [0.4, 0.9], [0.5, 0.7], [0.7, 0.7], [0.8, 0.9], [0.6, 0.9]], color='darkkhaki'))\n\n# Set the color of the dodecagon\nax.add_patch(plt.Polygon([[0.9, 0.5], [0.9, 0.7], [0.7, 0.7], [0.7, 0.9], [0.5, 0.9], [0.5, 0.7], [0.3, 0.7], [0.3, 0.9], [0.1, 0.9], [0.1, 0.7], [0.3, 0.7], [0.3, 0.5]], color='darkgrey'))\n\n# Set the color of the trapezoid\nax.add_patch(plt.Polygon([[0.2, 0.2], [0.4, 0.2], [0.5, 0.4], [0.3, 0.4]], color='darkorange'))\n\n# Set the color of the parallelogram\nax.add_patch(plt.Polygon([[0.5, 0.5], [0.7, 0.5], [0.8, 0.7], [0.6, 0.7]], color='darkorchid'))\n\n# Set the color of the rhombus\nax.add_patch(plt.Polygon([[0.8, 0.8], [0.9, 0.6], [0.7, 0.6], [0.6, 0.8]], color='darksalmon'))\n\n# Set the color of the kite\nax.add_patch(plt.Polygon([[0.1, 0.1], [0.3, 0.3], [0.1, 0.5], [0.5, 0.3], [0.3, 0.1]], color='darkslateblack'))\n\n# Set the color of the trapezoid\nax.add_patch(plt.Polygon([[0.6, 0.6], [0.8, 0.6], [0.7, 0.8], [0.5, 0.8], [0.6, 0.6]], color='darkseagreen'))\n\n# Set the color of the hexagon\nax.add_patch(plt.Polygon([[0.9, 0.9], [0.9, 0.7], [0.7, 0.7], [0.7, 0.9], [0.9, 0.9]], color='darkturquoise'))\n\n# Set the color of the heptagon\nax.add_patch(plt.Polygon([[0.2, 0.8], [0.4, 0.8], [0.3, 1.0], [0.1, 1.0], [0.2, 0.8]], color='darkviolet'))\n\n# Set the color of the octagon\nax.add_patch(plt.Polygon([[0.5, 0.9], [0.7, 0.9], [0.8, 0.7], [0.8, 0.5], [0.7, 0.5], [0.7, 0.3], [0.5, 0.3], [0.5, 0.5]], color='darkolivegreen'))\n\n# Set the color of the nonagon\nax.add_patch(plt.Polygon([[0.8, 0.2], [0.8, 0.4], [0.6, 0.4], [0.6, 0.6], [0.4, 0.6], [0.4, 0.4], [0.2, 0.4], [0.2, 0.2], [0.4, 0.2]], color='darkslateblue'))\n\n# Set the color of the decagon\nax.add_patch(plt.Polygon([[0.1, 0.5], [0.3, 0.5], [0.4, 0.7], [0.2, 0.7], [0.2, 0.9], [0.4, 0.9], [0.5, 0.7], [0.7, 0.7], [0.8, 0.9], [0.6, 0.9]], color='darkkhaki'))\n\n# Set the color of the dodecagon\nax.add_patch(plt.Polygon([[0.9, 0.5], [0.9, 0.7], [0.7, 0.7], [0.7, 0.9], [0.5, 0"}
{"file": "dataset/ori_500/radar_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(5.0, 5.0))\n\n# Set the title of the plot\nax.set_title('XNLI (speed-up ratio: 4)')\n\n# Define the colors for each direction\ncolors = ['pink', 'green', 'blue', 'cyan']\n\n# Define the directions\ndirections = ['fr', 'es', 'en', 'el', 'de', 'bg', 'sw', 'ar', 'ur', 'th', 'ru', 'tr', 'hi', 'vi', 'zh']\n\n# Draw the circle\ncircle = plt.Circle((0.5, 0.5), 0.4, color='white')\nax.add_artist(circle)\n\n# Draw the lines\nfor i in range(len(directions)):\n    angle = np.deg2rad(360 / len(directions) * i)\n    x = 0.5 + 0.4 * np.cos(angle)\n    y = 0.5 + 0.4 * np.sin(angle)\n    ax.plot([0.5, x], [0.5, y], color=colors[i % len(colors)])\n\n# Draw the labels\nfor i, label in enumerate(directions):\n    angle = np.deg2rad(360 / len(directions) * i)\n    x = 0.5 + 0.45 * np.cos(angle)\n    y = 0.5 + 0.45 * np.sin(angle)\n    ax.text(x, y, label, ha='center', va='center')\n\n# Draw the speed values\nspeed_values = [20, 40, 60, 80]\nfor i, value in enumerate(speed_values):\n    angle = np.deg2rad(360 / len(speed_values) * i)\n    x = 0.5 + 0.4 * np.cos(angle)\n    y = 0.5 + 0.4 * np.sin(angle)\n    ax.text(x, y, str(value), ha='center', va='center')\n\n# Set the aspect ratio to be equal\nax.set_aspect('equal')\n\n# Remove the axes\nax.axis('off')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(4.0, 4.0))\n\n# Draw a circle\ncircle = plt.Circle((0.5, 0.5), 0.4, color='lightgrey')\nax.add_artist(circle)\n\n# Draw a hexagon\nhexagon = plt.Polygon([[0.3, 0.2], [0.7, 0.2], [1, 0.5], [0.7, 0.8], [0.3, 0.8], [0, 0.5]], color='lightgreen')\nax.add_patch(hexagon)\n\n# Draw a rectangle\nrectangle = plt.Rectangle([0.2, 0.6], 0.6, 0.2, color='lightblue')\nax.add_patch(rectangle)\n\n# Draw a triangle\ntriangle = plt.Polygon([[0.5, 0.9], [0.3, 0.7], [0.7, 0.7]], color='lightyellow')\nax.add_patch(triangle)\n\n# Set the limits of the plot\nax.set_xlim(0, 1)\nax.set_ylim(0, 1)\n\n# Remove the axes\nax.axis('off')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the background color of the plot\nax.set_facecolor('black')\n\n# Set the title of the plot\nax.set_title('\u03bcR', color='white')\n\n# Set the x-axis label\nax.set_xlabel('\u03bcAUC', color='white')\n\n# Set the y-axis label\nax.set_ylabel('\u03bcTP', color='white')\n\n# Set the tick labels to be white\nax.tick_params(axis='both', colors='white')\n\n# Set the grid lines to be white\nax.grid(color='white')\n\n# Set the aspect ratio of the plot\nax.set_aspect('equal')\n\n# Set the limits of the plot\nax.set_xlim(-1, 1)\nax.set_ylim(-1, 1)\n\n# Set the color of the plot elements\nax.spines['top'].set_color('white')\nax.spines['bottom'].set_color('white')\nax.spines['left'].set_color('white')\nax.spines['right'].set_color('white')\n\n# Set the color of the plot elements\nax.plot([0, 0], [0, 1], 'w-')\nax.plot([0, 1], [0, 0], 'w-')\n\n# Set the color of the plot elements\nax.plot([0, 0], [0, -1], 'w-')\nax.plot([0, -1], [0, 0], 'w-')\n\n# Set the color of the plot elements\nax.plot([0, 0], [-1, 0], 'w-')\nax.plot([0, 1], [0, 0], 'w-')\n\n# Set the color of the plot elements\nax.plot([0, 0], [1, 0], 'w-')\nax.plot([0, -1], [0, 0], 'w-')\n\n# Set the color of the plot elements\nax.plot([0, 0], [0, 1], 'w-')\nax.plot([0, 1], [0, 0], 'w-')\n\n# Set the color of the plot elements\nax.plot([0, 0], [0, -1], 'w-')\nax.plot([0, -1], [0, 0], 'w-')\n\n# Set the color of the plot elements\nax.plot([0, 0], [-1, 0], 'w-')\nax.plot([0, 1], [0, 0], 'w-')\n\n# Set the color of the plot elements\nax.plot([0, 0], [1, 0], 'w-')\nax.plot([0, -1], [0, 0], 'w-')\n\n# Set the color of the plot elements\nax.plot([0, 0], [0, 1], 'w-')\nax.plot([0, 1], [0, 0], 'w-')\n\n# Set the color of the plot elements\nax.plot([0, 0], [0, -1], 'w-')\nax.plot([0, -1], [0, 0], 'w-')\n\n# Set the color of the plot elements\nax.plot([0, 0], [-1, 0], 'w-')\nax.plot([0, 1], [0, 0], 'w-')\n\n# Set the color of the plot elements\nax.plot([0, 0], [1, 0], 'w-')\nax.plot([0, -1], [0, 0], 'w-')\n\n# Set the color of the plot elements\nax.plot([0, 0], [0, 1], 'w-')\nax.plot([0, 1], [0, 0], 'w-')\n\n# Set the color of the plot elements\nax.plot([0, 0], [0, -1], 'w-')\nax.plot([0, -1], [0, 0], 'w-')\n\n# Set the color of the plot elements\nax.plot([0, 0], [-1, 0], 'w-')\nax.plot([0, 1], [0, 0], 'w-')\n\n# Set the color of the plot elements\nax.plot([0, 0], [1, 0], 'w-')\nax.plot([0, -1], [0, 0], 'w-')\n\n# Set the color of the plot elements\nax.plot([0, 0], [0, 1], 'w-')\nax.plot([0, 1], [0, 0], 'w-')\n\n# Set the color of the plot elements\nax.plot([0, 0], [0, -1], 'w-')\nax.plot([0, -1], [0, 0], 'w-')\n\n# Set the color of the plot elements\nax.plot([0, 0], [-1, 0], 'w-')\nax.plot([0, 1], [0, 0], 'w-')\n\n# Set the color of the plot elements\nax.plot([0, 0], [1, 0], 'w-')\nax.plot([0, -1], [0, 0], 'w-')\n\n# Set the color of the plot elements\nax.plot([0, 0], [0, 1], 'w-')\nax.plot([0, 1], [0, 0], 'w-')\n\n# Set the color of the plot elements\nax.plot([0, 0], [0, -1], 'w-')\nax.plot([0, -1], [0, 0], 'w-')\n\n# Set the color of the plot elements\nax.plot([0, 0], [-1, 0], 'w-')\nax.plot([0, 1], [0, 0], 'w-')\n\n# Set the color of the plot elements\nax.plot([0, 0], [1, 0], 'w-')\nax.plot([0, -1], [0, 0], 'w-')\n\n# Set the color of the plot elements\nax.plot([0, 0], [0, 1], 'w-')\nax.plot([0, 1], [0, 0], 'w-')\n\n# Set the color of the plot elements\nax.plot([0, 0], [0, -1], 'w-')\nax.plot([0, -1], [0, 0], 'w-')\n\n# Set the color of the plot elements\nax.plot([0, 0], [-1, 0], 'w-')\nax.plot([0, 1], [0, 0], 'w-')\n\n# Set the color of the plot elements\nax.plot([0, 0], [1, 0], 'w-')\nax.plot([0, -1], [0, 0], 'w-')\n\n# Set the color of the plot elements\nax.plot([0, 0], [0, 1], 'w-')\nax.plot([0, 1], [0, 0], 'w-')\n\n# Set the color of the plot elements\nax.plot([0, 0], [0, -1], 'w-')\nax.plot([0, -1], [0, 0], 'w-')\n\n# Set the color of the plot elements\nax.plot([0, 0], [-1, 0], 'w-')\nax.plot([0, 1], [0, 0], 'w-')\n\n# Set the color of the plot elements\nax.plot([0, 0], [1, 0], 'w-')\nax.plot([0, -1], [0, 0], 'w-')\n\n# Set the color of the plot elements\nax.plot([0, 0], [0, 1], 'w-')\nax.plot([0, 1], [0, 0], 'w-')\n\n# Set the color of the plot elements\nax.plot([0, 0], [0, -1], 'w-')\nax.plot([0, -1], [0, 0], 'w-')\n\n# Set the color of the plot elements\nax.plot([0, 0], [-1, 0], 'w-')\nax.plot([0, 1], [0, 0], 'w-')\n\n# Set the color of the plot elements\nax.plot([0, 0], [1, 0], 'w-')\nax.plot([0, -1], [0, 0], 'w-')\n\n# Set the color of the plot elements\nax.plot([0, 0], [0, 1], 'w-')\nax.plot([0, 1], [0, 0], 'w-')\n\n# Set the color of the plot elements\nax.plot([0, 0], [0, -1], 'w-')\nax.plot([0, -1], [0, 0], 'w-')\n\n# Set the color of the plot elements\nax.plot([0, 0], [-1, 0], 'w-')\nax.plot([0, 1], [0, 0], 'w-')\n\n# Set the color of the plot elements\nax.plot([0, 0], [1, 0], 'w-')\nax.plot([0, -1], [0, 0], 'w-')\n\n# Set the color of the plot elements\nax.plot([0, 0], [0, 1], 'w-')\nax.plot([0, 1], [0, 0], 'w-')\n\n# Set the color of the plot elements\nax.plot([0, 0], [0, -1], 'w-')\nax.plot([0, -1], [0, 0], 'w-')\n\n# Set the color of the plot elements\nax.plot([0, 0], [-1, 0], 'w-')\nax.plot([0, 1], [0, 0], 'w-')\n\n# Set the color of the plot elements\nax.plot([0, 0], [1, 0], 'w-')\nax.plot([0, -1], [0, 0], 'w-')\n\n# Set the color of the plot elements\nax.plot([0, 0], [0, 1], 'w-')\nax.plot([0, 1], [0, 0], 'w-')\n\n# Set the color of the plot elements\nax.plot([0, 0], [0, -1], 'w-')\nax.plot([0, -1], [0, 0], 'w-')\n\n# Set the color of the plot elements\nax.plot([0, 0], [-1, 0], 'w-')\nax.plot([0, 1], [0, 0], 'w-')\n\n# Set the color of the plot elements\nax.plot([0, 0], [1, 0], 'w-')\nax.plot([0, -1], [0, 0], 'w-')\n\n# Set the color of the plot elements\nax.plot([0, 0], [0, 1], 'w-')\nax.plot([0, 1], [0, 0], 'w-')\n\n# Set the color of the plot elements\nax.plot([0, 0], [0, -1], 'w-')\nax.plot([0, -1], [0, 0], 'w-')\n\n# Set the color of the plot elements\nax.plot([0, 0], [-1, 0], 'w-')\nax.plot([0, 1], [0, 0], 'w-')\n\n# Set the color of the plot elements\nax.plot([0, 0], [1, 0], 'w-')\nax.plot([0, -1], [0, 0], 'w-')\n\n# Set the color of the plot elements\nax.plot([0, 0], [0, 1], 'w-')\nax.plot([0, 1], [0, 0], 'w-')\n\n# Set the color of the plot elements\nax.plot([0, 0], [0, -1], 'w-')\nax.plot([0, -1], [0, 0], 'w-')\n\n# Set the color of the plot elements\nax.plot([0, 0], [-1, 0], 'w-')\nax.plot([0, 1], [0, 0], 'w-')\n\n# Set the color of the plot elements\nax.plot([0, 0], [1, 0], 'w-')\nax.plot([0, -1], [0, 0], 'w-')\n\n# Set the color of the plot elements\nax.plot([0, 0], [0, 1], 'w-')\nax.plot([0, 1], [0, 0], 'w-')\n\n# Set the color of the plot elements\nax.plot([0, 0], [0, -1], 'w-')\nax.plot([0, -1], [0, 0], 'w-')\n\n# Set the color of the plot elements\nax.plot([0, 0], [-1, 0], 'w-')\nax.plot([0, 1], [0, 0], 'w-')\n\n# Set the color of the plot elements\nax.plot([0, 0], [1, 0], 'w-')\nax.plot([0, -1], [0, 0], 'w-')\n\n# Set the color of the plot elements\nax.plot([0, 0], [0, 1], 'w-')\nax.plot([0, 1], [0, 0], 'w-')\n\n# Set the color of the plot elements\nax.plot([0, 0], [0, -1], 'w-')\nax.plot([0, -1], [0, 0], 'w-')\n\n# Set the color of the plot elements\nax.plot([0, 0], [-1, 0], 'w-')\nax.plot([0, 1], [0, 0], 'w-')\n\n# Set the color of the plot elements\nax.plot([0, 0], [1, 0], 'w-')\nax.plot([0, -1], [0, 0], 'w-')\n\n# Set the color of the plot elements\nax.plot([0, 0], [0, 1], 'w-')\nax.plot([0, 1], [0, 0], 'w-')\n\n# Set the color of the plot elements\nax.plot([0, 0], [0, -1], 'w-')\nax.plot([0, -1], [0, 0], 'w-')\n\n# Set the color of the plot elements\nax.plot([0, 0], [-1, 0], 'w-')\nax.plot([0, 1], [0, 0], 'w-')\n\n# Set the color of the plot elements\nax.plot([0, 0], [1, 0], 'w-')\nax.plot([0, -1], [0, 0], 'w-')\n\n# Set the color of the plot elements\nax.plot([0, 0], [0, 1], 'w-')\nax.plot([0, 1], [0, 0], 'w-')\n\n# Set the color of the plot elements\nax.plot([0, 0], [0, -1], 'w-')\nax.plot([0, -1], [0, 0], 'w-')\n\n# Set the color of the plot elements\nax.plot([0, 0], [-1, 0], 'w-')\nax.plot([0, 1], [0, 0], 'w-')\n\n# Set the color of the plot elements\nax.plot([0, 0], [1, 0], 'w-')\nax.plot([0, -1], [0, 0], 'w-')\n\n# Set the color of the plot elements\nax.plot([0, 0], [0, 1], 'w-')\nax.plot([0, 1], [0, 0], 'w-')\n\n# Set the color of the plot elements\nax.plot([0, 0], [0, -1], 'w-')\nax.plot([0, -1], [0, 0], 'w-')\n\n# Set the color of the plot elements\nax.plot([0, 0], [-1, 0], 'w-')\nax.plot([0, 1], [0, 0], 'w-')\n\n# Set the color of the plot elements\nax.plot([0, 0], [1, 0], 'w-')\nax.plot([0, -1], [0, 0], 'w-')\n\n# Set the color of the plot elements\nax.plot([0, 0], [0, 1], 'w-')\nax.plot([0, 1], [0, 0], 'w-')\n\n# Set the color of the plot elements\nax.plot([0, 0], [0, -1], 'w-')\nax.plot([0, -1], [0, 0], 'w-')\n\n# Set the color of the plot elements\nax.plot([0, 0], [-1, 0], 'w-')\nax.plot([0, 1], [0, 0], 'w-')\n\n# Set the color of the plot elements\nax.plot([0, 0], [1, 0], 'w-')\nax.plot([0, -1], [0, 0], 'w-')\n\n# Set the color of the plot elements\nax.plot([0, 0], [0, 1], 'w-')\nax.plot([0, 1], [0, 0], 'w-')\n\n# Set the color of the plot elements\nax.plot([0, 0], [0, -1], 'w-')\nax.plot([0, -1], [0, 0], 'w-')\n\n# Set the color of the plot elements\nax.plot([0, 0], [-1, 0], 'w-')\nax.plot([0, 1], [0, 0], 'w-')\n\n# Set the color of the plot elements\nax.plot([0, 0], [1, 0], 'w-')\nax.plot([0, -1], [0, 0], 'w-')\n\n# Set the color of the plot elements\nax.plot([0, 0], [0, 1], 'w-')\nax.plot([0, 1], [0, 0], 'w-')\n\n# Set the color of the plot elements\nax.plot([0, 0], [0, -1], 'w-')\nax.plot([0,"}
{"file": "dataset/ori_500/radar_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Set the title of the plot\nax.set_title('My Plot')\n\n# Set the x and y limits\nax.set_xlim(-1, 1)\nax.set_ylim(-1, 1)\n\n# Draw a circle\ncircle = plt.Circle((0, 0), 1, color='gray', fill=False)\nax.add_artist(circle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((-0.5, -0.5), 1, 1, color='blue', alpha=0.2)\nax.add_artist(rectangle)\n\n# Draw a line\nline, = ax.plot([0, 1], [0, 1], 'b-')\n\n# Draw a scatter plot\nscatter = ax.scatter([0.1, 0.2, 0.3], [0.4, 0.5, 0.6], c='blue')\n\n# Add text annotations\nax.annotate('video game', xy=(0.9, 0.9), ha='center')\nax.annotate('programming world', xy=(-0.9, 0.9), ha='center')\nax.annotate('universe', xy=(0, -0.9), ha='center')\nax.annotate('fairy tale', xy=(0.9, -0.9), ha='center')\nax.annotate('country', xy=(-0.9, -0.9), ha='center')\nax.annotate('special place', xy=(0, 0.9), ha='center')\nax.annotate('cultural event', xy=(0, 0.1), ha='center')\n\n# Add a legend\nax.legend(['Llama-2-70B'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Roleplay')\n\n# Define the colors for the sectors\ncolors = ['blue', 'orange', 'green', 'red']\n\n# Define the labels for the sectors\nlabels = ['Reasoning', 'Writing', 'Math', 'Coding', 'Extraction', 'Humanities', 'STEM']\n\n# Define the radii for the sectors\nradii = [1, 2, 3, 4, 5, 6, 7]\n\n# Draw the sectors\nfor i in range(len(labels)):\n    ax.add_patch(plt.Circle((0, 0), radii[i], color=colors[i % len(colors)], alpha=0.5))\n    ax.text(0, -radii[i] * 0.8, labels[i], ha='center', va='center')\n\n# Draw the center circle\nax.add_patch(plt.Circle((0, 0), 0.5, color='black'))\n\n# Draw the lines connecting the sectors\nfor i in range(len(labels)):\n    for j in range(i + 1, len(labels)):\n        ax.plot([0, 0], [-radii[i], -radii[j]], color='black')\n\n# Draw the text annotations\nfor i in range(len(labels)):\n    ax.text(0, -radii[i] * 0.9, f\"{labels[i]} {np.random.rand():.1f}B\", ha='center', va='center')\n\n# Set the aspect ratio of the plot to be equal\nax.set_aspect('equal')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Set the title of the plot\nax.set_title('MUJI vs Nestle in Food Safety')\n\n# Draw a circle\ncircle = plt.Circle((0.5, 0.5), 0.4, color='gray')\nax.add_artist(circle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='orange')\nax.add_artist(rectangle)\n\n# Draw a triangle\ntriangle = plt.Polygon([[0.3, 0.7], [0.7, 0.7], [0.5, 0.3]], color='green')\nax.add_artist(triangle)\n\n# Draw a pentagon\npentagon = plt.Polygon([[0.1, 0.1], [0.3, 0.3], [0.5, 0.1], [0.7, 0.3], [0.9, 0.1]], color='pink')\nax.add_artist(pentagon)\n\n# Draw a hexagon\nhexagon = plt.Polygon([[0.1, 0.5], [0.3, 0.7], [0.5, 0.7], [0.7, 0.5], [0.7, 0.3], [0.5, 0.3]], color='brown')\nax.add_artist(hexagon)\n\n# Draw a star\nstar = plt.Polygon([[0.5, 0.9], [0.4, 0.8], [0.6, 0.8], [0.5, 0.95], [0.5, 0.6], [0.45, 0.7], [0.55, 0.7], [0.5, 0.9]], color='purple')\nax.add_artist(star)\n\n# Draw a circle with a red dot\ncircle_dot = plt.Circle((0.2, 0.2), 0.05, color='red')\nax.add_artist(circle_dot)\n\n# Draw a circle with a green dot\ncircle_dot = plt.Circle((0.8, 0.8), 0.05, color='green')\nax.add_artist(circle_dot)\n\n# Draw a circle with a red dot\ncircle_dot = plt.Circle((0.5, 0.5), 0.05, color='red')\nax.add_artist(circle_dot)\n\n# Draw a circle with a green dot\ncircle_dot = plt.Circle((0.3, 0.3), 0.05, color='green')\nax.add_artist(circle_dot)\n\n# Draw a circle with a red dot\ncircle_dot = plt.Circle((0.7, 0.7), 0.05, color='red')\nax.add_artist(circle_dot)\n\n# Draw a circle with a green dot\ncircle_dot = plt.Circle((0.9, 0.9), 0.05, color='green')\nax.add_artist(circle_dot)\n\n# Draw a circle with a red dot\ncircle_dot = plt.Circle((0.1, 0.1), 0.05, color='red')\nax.add_artist(circle_dot)\n\n# Draw a circle with a green dot\ncircle_dot = plt.Circle((0.5, 0.7), 0.05, color='green')\nax.add_artist(circle_dot)\n\n# Draw a circle with a red dot\ncircle_dot = plt.Circle((0.3, 0.5), 0.05, color='red')\nax.add_artist(circle_dot)\n\n# Draw a circle with a green dot\ncircle_dot = plt.Circle((0.7, 0.3), 0.05, color='green')\nax.add_artist(circle_dot)\n\n# Draw a circle with a red dot\ncircle_dot = plt.Circle((0.9, 0.1), 0.05, color='red')\nax.add_artist(circle_dot)\n\n# Draw a circle with a green dot\ncircle_dot = plt.Circle((0.5, 0.3), 0.05, color='green')\nax.add_artist(circle_dot)\n\n# Draw a circle with a red dot\ncircle_dot = plt.Circle((0.3, 0.7), 0.05, color='red')\nax.add_artist(circle_dot)\n\n# Draw a circle with a green dot\ncircle_dot = plt.Circle((0.7, 0.5), 0.05, color='green')\nax.add_artist(circle_dot)\n\n# Draw a circle with a red dot\ncircle_dot = plt.Circle((0.9, 0.9), 0.05, color='red')\nax.add_artist(circle_dot)\n\n# Draw a circle with a green dot\ncircle_dot = plt.Circle((0.1, 0.1), 0.05, color='green')\nax.add_artist(circle_dot)\n\n# Draw a circle with a red dot\ncircle_dot = plt.Circle((0.5, 0.7), 0.05, color='red')\nax.add_artist(circle_dot)\n\n# Draw a circle with a green dot\ncircle_dot = plt.Circle((0.3, 0.5), 0.05, color='green')\nax.add_artist(circle_dot)\n\n# Draw a circle with a red dot\ncircle_dot = plt.Circle((0.7, 0.3), 0.05, color='red')\nax.add_artist(circle_dot)\n\n# Draw a circle with a green dot\ncircle_dot = plt.Circle((0.9, 0.1), 0.05, color='green')\nax.add_artist(circle_dot)\n\n# Draw a circle with a red dot\ncircle_dot = plt.Circle((0.5, 0.3), 0.05, color='red')\nax.add_artist(circle_dot)\n\n# Draw a circle with a green dot\ncircle_dot = plt.Circle((0.3, 0.7), 0.05, color='green')\nax.add_artist(circle_dot)\n\n# Draw a circle with a red dot\ncircle_dot = plt.Circle((0.7, 0.5), 0.05, color='red')\nax.add_artist(circle_dot)\n\n# Draw a circle with a green dot\ncircle_dot = plt.Circle((0.9, 0.9), 0.05, color='green')\nax.add_artist(circle_dot)\n\n# Draw a circle with a red dot\ncircle_dot = plt.Circle((0.1, 0.1), 0.05, color='red')\nax.add_artist(circle_dot)\n\n# Draw a circle with a green dot\ncircle_dot = plt.Circle((0.5, 0.7), 0.05, color='green')\nax.add_artist(circle_dot)\n\n# Draw a circle with a red dot\ncircle_dot = plt.Circle((0.3, 0.5), 0.05, color='red')\nax.add_artist(circle_dot)\n\n# Draw a circle with a green dot\ncircle_dot = plt.Circle((0.7, 0.3), 0.05, color='green')\nax.add_artist(circle_dot)\n\n# Draw a circle with a red dot\ncircle_dot = plt.Circle((0.9, 0.1), 0.05, color='red')\nax.add_artist(circle_dot)\n\n# Draw a circle with a green dot\ncircle_dot = plt.Circle((0.5, 0.3), 0.05, color='green')\nax.add_artist(circle_dot)\n\n# Draw a circle with a red dot\ncircle_dot = plt.Circle((0.3, 0.7), 0.05, color='red')\nax.add_artist(circle_dot)\n\n# Draw a circle with a green dot\ncircle_dot = plt.Circle((0.7, 0.5), 0.05, color='green')\nax.add_artist(circle_dot)\n\n# Draw a circle with a red dot\ncircle_dot = plt.Circle((0.9, 0.9), 0.05, color='red')\nax.add_artist(circle_dot)\n\n# Draw a circle with a green dot\ncircle_dot = plt.Circle((0.1, 0.1), 0.05, color='green')\nax.add_artist(circle_dot)\n\n# Draw a circle with a red dot\ncircle_dot = plt.Circle((0.5, 0.7), 0.05, color='red')\nax.add_artist(circle_dot)\n\n# Draw a circle with a green dot\ncircle_dot = plt.Circle((0.3, 0.5), 0.05, color='green')\nax.add_artist(circle_dot)\n\n# Draw a circle with a red dot\ncircle_dot = plt.Circle((0.7, 0.3), 0.05, color='red')\nax.add_artist(circle_dot)\n\n# Draw a circle with a green dot\ncircle_dot = plt.Circle((0.9, 0.1), 0.05, color='green')\nax.add_artist(circle_dot)\n\n# Draw a circle with a red dot\ncircle_dot = plt.Circle((0.5, 0.3), 0.05, color='red')\nax.add_artist(circle_dot)\n\n# Draw a circle with a green dot\ncircle_dot = plt.Circle((0.3, 0.7), 0.05, color='green')\nax.add_artist(circle_dot)\n\n# Draw a circle with a red dot\ncircle_dot = plt.Circle((0.7, 0.5), 0.05, color='red')\nax.add_artist(circle_dot)\n\n# Draw a circle with a green dot\ncircle_dot = plt.Circle((0.9, 0.9), 0.05, color='green')\nax.add_artist(circle_dot)\n\n# Draw a circle with a red dot\ncircle_dot = plt.Circle((0.1, 0.1), 0.05, color='red')\nax.add_artist(circle_dot)\n\n# Draw a circle with a green dot\ncircle_dot = plt.Circle((0.5, 0.7), 0.05, color='green')\nax.add_artist(circle_dot)\n\n# Draw a circle with a red dot\ncircle_dot = plt.Circle((0.3, 0.5), 0.05, color='red')\nax.add_artist(circle_dot)\n\n# Draw a circle with a green dot\ncircle_dot = plt.Circle((0.7, 0.3), 0.05, color='green')\nax.add_artist(circle_dot)\n\n# Draw a circle with a red dot\ncircle_dot = plt.Circle((0.9, 0.1), 0.05, color='red')\nax.add_artist(circle_dot)\n\n# Draw a circle with a green dot\ncircle_dot = plt.Circle((0.5, 0.3), 0.05, color='green')\nax.add_artist(circle_dot)\n\n# Draw a circle with a red dot\ncircle_dot = plt.Circle((0.3, 0.7), 0.05, color='red')\nax.add_artist(circle_dot)\n\n# Draw a circle with a green dot\ncircle_dot = plt.Circle((0.7, 0.5), 0.05, color='green')\nax.add_artist(circle_dot)\n\n# Draw a circle with a red dot\ncircle_dot = plt.Circle((0.9, 0.9), 0.05, color='red')\nax.add_artist(circle_dot)\n\n# Draw a circle with a green dot\ncircle_dot = plt.Circle((0.1, 0.1), 0.05, color='green')\nax.add_artist(circle_dot)\n\n# Draw a circle with a red dot\ncircle_dot = plt.Circle((0.5, 0.7), 0.05, color='red')\nax.add_artist(circle_dot)\n\n# Draw a circle with a green dot\ncircle_dot = plt.Circle((0.3, 0.5), 0.05, color='green')\nax.add_artist(circle_dot)\n\n# Draw a circle with a red dot\ncircle_dot = plt.Circle((0.7, 0.3), 0.05, color='red')\nax.add_artist(circle_dot)\n\n# Draw a circle with a green dot\ncircle_dot = plt.Circle((0.9, 0.1), 0.05, color='green')\nax.add_artist(circle_dot)\n\n# Draw a circle with a red dot\ncircle_dot = plt.Circle((0.5, 0.3), 0.05, color='red')\nax.add_artist(circle_dot)\n\n# Draw a circle with a green dot\ncircle_dot = plt.Circle((0.3, 0.7), 0.05, color='green')\nax.add_artist(circle_dot)\n\n# Draw a circle with a red dot\ncircle_dot = plt.Circle((0.7, 0.5), 0.05, color='red')\nax.add_artist(circle_dot)\n\n# Draw a circle with a green dot\ncircle_dot = plt.Circle((0.9, 0.9), 0.05, color='green')\nax.add_artist(circle_dot)\n\n# Draw a circle with a red dot\ncircle_dot = plt.Circle((0.1, 0.1), 0.05, color='red')\nax.add_artist(circle_dot)\n\n# Draw a circle with a green dot\ncircle_dot = plt.Circle((0.5, 0.7), 0.05, color='green')\nax.add_artist(circle_dot)\n\n# Draw a circle with a red dot\ncircle_dot = plt.Circle((0.3, 0.5), 0.05, color='red')\nax.add_artist(circle_dot)\n\n# Draw a circle with a green dot\ncircle_dot = plt.Circle((0.7, 0.3), 0.05, color='green')\nax.add_artist(circle_dot)\n\n# Draw a circle with a red dot\ncircle_dot = plt.Circle((0.9, 0.1), 0.05, color='red')\nax.add_artist(circle_dot)\n\n# Draw a circle with a green dot\ncircle_dot = plt.Circle((0.5, 0.3), 0.05, color='green')\nax.add_artist(circle_dot)\n\n# Draw a circle with a red dot\ncircle_dot = plt.Circle((0.3, 0.7), 0.05, color='red')\nax.add_artist(circle_dot)\n\n# Draw a circle with a green dot\ncircle_dot = plt.Circle((0.7, 0.5), 0.05, color='green')\nax.add_artist(circle_dot)\n\n# Draw a circle with a red dot\ncircle_dot = plt.Circle((0.9, 0.9), 0.05, color='red')\nax.add_artist(circle_dot)\n\n# Draw a circle with a green dot\ncircle_dot = plt.Circle((0.1, 0.1), 0.05, color='green')\nax.add_artist(circle_dot)\n\n# Draw a circle with a red dot\ncircle_dot = plt.Circle((0.5, 0.7), 0.05, color='red')\nax.add_artist(circle_dot)\n\n# Draw a circle with a green dot\ncircle_dot = plt.Circle((0.3, 0.5), 0.05, color='green')\nax.add_artist(circle_dot)\n\n# Draw a circle with a red dot\ncircle_dot = plt.Circle((0.7, 0.3), 0.05, color='red')\nax.add_artist(circle_dot)\n\n# Draw a circle with a green dot\ncircle_dot = plt.Circle((0.9, 0.1), 0.05, color='green')\nax.add_artist(circle_dot)\n\n# Draw a circle with a red dot\ncircle_dot = plt.Circle((0.5, 0.3), 0.05, color='red')\nax.add_artist(circle_dot)\n\n# Draw a circle with a green dot\ncircle_dot = plt.Circle((0.3, 0.7), 0.05, color='green')\nax.add_artist(circle_dot)\n\n# Draw a circle with a red dot\ncircle_dot = plt.Circle((0.7, 0.5), 0.05, color='red')\nax.add_artist(circle_dot)\n\n# Draw a circle with a green dot\ncircle_dot = plt.Circle((0.9, 0.9), 0.05, color='green')\nax.add_artist(circle_dot)\n\n# Draw a circle with a red dot\ncircle_dot = plt.Circle((0.1, 0.1), 0.05, color='red')\nax.add_artist(circle_dot)\n\n# Draw a circle with a green dot\ncircle_dot = plt.Circle((0.5, 0.7), 0.05, color='green')\nax.add_artist(circle_dot)\n\n# Draw a circle with a red dot\ncircle_dot = plt.Circle((0.3, 0.5), 0.05, color='red')\nax.add_artist(circle_dot)\n\n# Draw a circle with a green dot\ncircle_dot = plt.Circle((0.7, 0.3), 0.05, color='green')\nax.add_artist(circle_dot)\n\n# Draw a circle with a red dot\ncircle_dot = plt.Circle((0.9, 0.1), 0.05, color='red')\nax.add_artist(circle_dot)\n\n# Draw a circle with a green dot\ncircle_dot = plt.Circle((0.5, 0.3), 0.05, color='green')\nax.add_artist(circle_dot)\n\n# Draw a circle with a red dot\ncircle_dot = plt.Circle((0.3, 0.7), 0.05, color='red')\nax.add_artist(circle_dot)\n\n# Draw a circle with a green dot\ncircle_dot = plt.Circle((0.7, 0.5), 0.05, color='green')\nax.add_artist(circle_dot)\n\n# Draw a circle with a red dot\ncircle_dot = plt.Circle((0.9, 0.9), 0.05, color='red')\nax.add_artist(circle_dot)\n\n# Draw a circle with a green dot\ncircle_dot = plt.Circle((0.1, 0.1), 0.05, color='green')\nax.add_artist(circle_dot)\n\n# Draw a circle with a red dot\ncircle_dot = plt.Circle((0.5, 0.7), 0.05, color='red')\nax.add_artist(circle_dot)\n\n# Draw a circle with a green dot\ncircle_dot = plt.Circle((0.3, 0.5), 0.05, color='green')\nax.add_artist(circle_dot)\n\n# Draw a circle with a red dot\ncircle_dot = plt.Circle((0.7, 0.3), 0.05, color='red')\nax.add_artist(circle_dot)\n\n# Draw a circle with a green dot\ncircle_dot = plt.Circle((0."}
{"file": "dataset/ori_500/radar_16.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 7.0))\n\n# Set the background color of the plot\nax.set_facecolor('black')\n\n# Set the title of the plot\nax.set_title('Global Sales', color='white')\n\n# Set the x-axis label\nax.set_xlabel('Sales', color='white')\n\n# Set the y-axis label\nax.set_ylabel('Countries', color='white')\n\n# Set the tick labels to be white\nax.tick_params(axis='both', colors='white')\n\n# Set the grid lines to be white\nax.grid(color='white')\n\n# Set the data for the plot\ndata = [85.8, 78.7, 71.9, 64.1, 59.7, 50.8, 40.0, 36.1, 20.0, 86.4, 80.9, 76.1, 74.9, 71.0, 69.9, 66.4, 64.1, 60.5, 56.5, 50.8, 40.0, 36.1, 20.0]\n\n# Set the countries for the plot\ncountries = ['Europe', 'China', 'India', 'Brazil']\n\n# Set the colors for the plot\ncolors = ['orange', 'blue', 'green', 'red']\n\n# Plot the data\nfor i, d in enumerate(data):\n    ax.plot([i], [d], 'o', markersize=10, color=colors[i % len(colors)])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_17.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10.0, 8.0))\n\n# Define the data for the radar chart\ncategories = ['Extrusion', 'Injection', 'Blow Molding']\nvalues = [1, 2, 3]\nvalues2 = [4, 5, 6]\n\n# Create a radar chart\nax.plot(categories + categories[:1], values + values[:1], label='Radar Chart 1')\nax.plot(categories + categories[:1], values2 + values2[:1], label='Radar Chart 2')\n\n# Set the title and labels\nax.set_title('Radar Charts')\nax.set_xlabel('Categories')\nax.set_ylabel('Values')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_18.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Set the title\nax.set_title('Amusement Park Comparison: Disney vs Universal Studios')\n\n# Draw a circle\ncircle = plt.Circle((0.5, 0.5), 0.4, color='orange')\nax.add_artist(circle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='orange')\nax.add_artist(rectangle)\n\n# Draw a polygon\npolygon = plt.Polygon([[0.3, 0.3], [0.7, 0.3], [0.5, 0.7]], color='purple')\nax.add_artist(polygon)\n\n# Draw a star\nstar = plt.Polygon([[0.5, 0.5], [0.4, 0.6], [0.6, 0.6], [0.5, 0.7], [0.5, 0.5]], color='purple')\nax.add_artist(star)\n\n# Draw a line\nline = plt.Line2D([0.1, 0.9], [0.1, 0.9], color='purple')\nax.add_artist(line)\n\n# Draw a point\npoint = plt.Circle((0.5, 0.5), 0.05, color='purple')\nax.add_artist(point)\n\n# Set the aspect ratio to be equal\nax.set_aspect('equal')\n\n# Set the limits of the plot\nax.set_xlim(0, 1)\nax.set_ylim(0, 1)\n\n# Set the labels\nax.set_xlabel('Disney')\nax.set_ylabel('Universal Studios')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_19.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Creativity')\n\n# Create a circle for the center of the plot\ncircle = plt.Circle((0.5, 0.5), 0.4, color='blue')\nax.add_artist(circle)\n\n# Create a rectangle for the outer ring\nrectangle = plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='green')\nax.add_artist(rectangle)\n\n# Create a polygon for the inner ring\npolygon = plt.Polygon([[0.3, 0.3], [0.7, 0.3], [0.5, 0.7]], color='red')\nax.add_artist(polygon)\n\n# Set the limits of the plot\nax.set_xlim(0, 1)\nax.set_ylim(0, 1)\n\n# Set the aspect ratio of the plot\nax.set_aspect('equal')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 7.0))\n\n# Set the title of the plot\nax.set_title('POPE')\n\n# Create a circle patch\ncircle = plt.Circle((0.5, 0.5), 0.4, color='grey')\nax.add_artist(circle)\n\n# Create a rectangle patch\nrectangle = plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='blue')\nax.add_artist(rectangle)\n\n# Create a polygon patch\npolygon = plt.Polygon([[0.1, 0.1], [0.3, 0.9], [0.9, 0.9], [0.7, 0.1]], color='green')\nax.add_artist(polygon)\n\n# Create a scatter plot\nx = np.random.rand(10)\ny = np.random.rand(10)\nax.scatter(x, y, color='red')\n\n# Set the aspect ratio of the plot\nax.set_aspect('equal')\n\n# Set the limits of the x and y axes\nax.set_xlim(0, 1)\nax.set_ylim(0, 1)\n\n# Set the labels of the x and y axes\nax.set_xlabel('TinyLaMA')\nax.set_ylabel('StableLM')\n\n# Set the legend of the plot\nax.legend(['Phi-2'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_20.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(18, 6))\n\n# Define the data for the radar chart\ncategories = ['Versatility', 'Longevity']\nvalues = [5, 7]\ncolors = ['blue', 'green']\n\n# Create a radar chart\nax.plot(categories + categories[:1], values + values[:1], color=colors[0])\nax.fill(categories + categories[:1], values + values[:1], color=colors[0], alpha=0.2)\nax.set_title('Creativity')\n\n# Add labels to the chart\nfor i, v in enumerate(values):\n    ax.text(i, v, str(v), ha='center', va='bottom')\n\n# Add a legend\nax.legend(['Chanel', 'Dior', 'Gucci'], loc='upper right')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Set the background color of the plot\nax.set_facecolor('lightgray')\n\n# Draw a circle with a radius of 100\ncircle = plt.Circle((0.5, 0.5), 0.4, color='lightblue')\nax.add_artist(circle)\n\n# Draw a rectangle with a width of 200 and a height of 100\nrectangle = plt.Rectangle((0.3, 0.3), 0.4, 0.2, color='lightgreen')\nax.add_artist(rectangle)\n\n# Draw a polygon with 6 sides\npolygon = plt.Polygon([[0.2, 0.2], [0.3, 0.3], [0.4, 0.2], [0.3, 0.1], [0.2, 0.2]], color='lightcoral')\nax.add_artist(polygon)\n\n# Draw a star with 5 points\nstar = plt.Polygon([[0.4, 0.4], [0.5, 0.5], [0.6, 0.4], [0.5, 0.3], [0.4, 0.4]], color='lightsalmon')\nax.add_artist(star)\n\n# Draw a line from (0.2, 0.2) to (0.3, 0.3)\nline = plt.Line2D([0.2, 0.3], [0.2, 0.3], color='black')\nax.add_artist(line)\n\n# Draw a line from (0.3, 0.3) to (0.4, 0.2)\nline = plt.Line2D([0.3, 0.4], [0.3, 0.2], color='black')\nax.add_artist(line)\n\n# Draw a line from (0.4, 0.2) to (0.3, 0.1)\nline = plt.Line2D([0.4, 0.3], [0.2, 0.1], color='black')\nax.add_artist(line)\n\n# Draw a line from (0.3, 0.1) to (0.2, 0.2)\nline = plt.Line2D([0.3, 0.2], [0.1, 0.2], color='black')\nax.add_artist(line)\n\n# Draw a line from (0.2, 0.2) to (0.3, 0.3)\nline = plt.Line2D([0.2, 0.3], [0.2, 0.3], color='black')\nax.add_artist(line)\n\n# Draw a line from (0.3, 0.3) to (0.4, 0.2)\nline = plt.Line2D([0.3, 0.4], [0.3, 0.2], color='black')\nax.add_artist(line)\n\n# Draw a line from (0.4, 0.2) to (0.3, 0.1)\nline = plt.Line2D([0.4, 0.3], [0.2, 0.1], color='black')\nax.add_artist(line)\n\n# Draw a line from (0.3, 0.1) to (0.2, 0.2)\nline = plt.Line2D([0.3, 0.2], [0.1, 0.2], color='black')\nax.add_artist(line)\n\n# Draw a line from (0.2, 0.2) to (0.3, 0.3)\nline = plt.Line2D([0.2, 0.3], [0.2, 0.3], color='black')\nax.add_artist(line)\n\n# Draw a line from (0.3, 0.3) to (0.4, 0.2)\nline = plt.Line2D([0.3, 0.4], [0.3, 0.2], color='black')\nax.add_artist(line)\n\n# Draw a line from (0.4, 0.2) to (0.3, 0.1)\nline = plt.Line2D([0.4, 0.3], [0.2, 0.1], color='black')\nax.add_artist(line)\n\n# Draw a line from (0.3, 0.1) to (0.2, 0.2)\nline = plt.Line2D([0.3, 0.2], [0.1, 0.2], color='black')\nax.add_artist(line)\n\n# Draw a line from (0.2, 0.2) to (0.3, 0.3)\nline = plt.Line2D([0.2, 0.3], [0.2, 0.3], color='black')\nax.add_artist(line)\n\n# Draw a line from (0.3, 0.3) to (0.4, 0.2)\nline = plt.Line2D([0.3, 0.4], [0.3, 0.2], color='black')\nax.add_artist(line)\n\n# Draw a line from (0.4, 0.2) to (0.3, 0.1)\nline = plt.Line2D([0.4, 0.3], [0.2, 0.1], color='black')\nax.add_artist(line)\n\n# Draw a line from (0.3, 0.1) to (0.2, 0.2)\nline = plt.Line2D([0.3, 0.2], [0.1, 0.2], color='black')\nax.add_artist(line)\n\n# Draw a line from (0.2, 0.2) to (0.3, 0.3)\nline = plt.Line2D([0.2, 0.3], [0.2, 0.3], color='black')\nax.add_artist(line)\n\n# Draw a line from (0.3, 0.3) to (0.4, 0.2)\nline = plt.Line2D([0.3, 0.4], [0.3, 0.2], color='black')\nax.add_artist(line)\n\n# Draw a line from (0.4, 0.2) to (0.3, 0.1)\nline = plt.Line2D([0.4, 0.3], [0.2, 0.1], color='black')\nax.add_artist(line)\n\n# Draw a line from (0.3, 0.1) to (0.2, 0.2)\nline = plt.Line2D([0.3, 0.2], [0.1, 0.2], color='black')\nax.add_artist(line)\n\n# Draw a line from (0.2, 0.2) to (0.3, 0.3)\nline = plt.Line2D([0.2, 0.3], [0.2, 0.3], color='black')\nax.add_artist(line)\n\n# Draw a line from (0.3, 0.3) to (0.4, 0.2)\nline = plt.Line2D([0.3, 0.4], [0.3, 0.2], color='black')\nax.add_artist(line)\n\n# Draw a line from (0.4, 0.2) to (0.3, 0.1)\nline = plt.Line2D([0.4, 0.3], [0.2, 0.1], color='black')\nax.add_artist(line)\n\n# Draw a line from (0.3, 0.1) to (0.2, 0.2)\nline = plt.Line2D([0.3, 0.2], [0.1, 0.2], color='black')\nax.add_artist(line)\n\n# Draw a line from (0.2, 0.2) to (0.3, 0.3)\nline = plt.Line2D([0.2, 0.3], [0.2, 0.3], color='black')\nax.add_artist(line)\n\n# Draw a line from (0.3, 0.3) to (0.4, 0.2)\nline = plt.Line2D([0.3, 0.4], [0.3, 0.2], color='black')\nax.add_artist(line)\n\n# Draw a line from (0.4, 0.2) to (0.3, 0.1)\nline = plt.Line2D([0.4, 0.3], [0.2, 0.1], color='black')\nax.add_artist(line)\n\n# Draw a line from (0.3, 0.1) to (0.2, 0.2)\nline = plt.Line2D([0.3, 0.2], [0.1, 0.2], color='black')\nax.add_artist(line)\n\n# Draw a line from (0.2, 0.2) to (0.3, 0.3)\nline = plt.Line2D([0.2, 0.3], [0.2, 0.3], color='black')\nax.add_artist(line)\n\n# Draw a line from (0.3, 0.3) to (0.4, 0.2)\nline = plt.Line2D([0.3, 0.4], [0.3, 0.2], color='black')\nax.add_artist(line)\n\n# Draw a line from (0.4, 0.2) to (0.3, 0.1)\nline = plt.Line2D([0.4, 0.3], [0.2, 0.1], color='black')\nax.add_artist(line)\n\n# Draw a line from (0.3, 0.1) to (0.2, 0.2)\nline = plt.Line2D([0.3, 0.2], [0.1, 0.2], color='black')\nax.add_artist(line)\n\n# Draw a line from (0.2, 0.2) to (0.3, 0.3)\nline = plt.Line2D([0.2, 0.3], [0.2, 0.3], color='black')\nax.add_artist(line)\n\n# Draw a line from (0.3, 0.3) to (0.4, 0.2)\nline = plt.Line2D([0.3, 0.4], [0.3, 0.2], color='black')\nax.add_artist(line)\n\n# Draw a line from (0.4, 0.2) to (0.3, 0.1)\nline = plt.Line2D([0.4, 0.3], [0.2, 0.1], color='black')\nax.add_artist(line)\n\n# Draw a line from (0.3, 0.1) to (0.2, 0.2)\nline = plt.Line2D([0.3, 0.2], [0.1, 0.2], color='black')\nax.add_artist(line)\n\n# Draw a line from (0.2, 0.2) to (0.3, 0.3)\nline = plt.Line2D([0.2, 0.3], [0.2, 0.3], color='black')\nax.add_artist(line)\n\n# Draw a line from (0.3, 0.3) to (0.4, 0.2)\nline = plt.Line2D([0.3, 0.4], [0.3, 0.2], color='black')\nax.add_artist(line)\n\n# Draw a line from (0.4, 0.2) to (0.3, 0.1)\nline = plt.Line2D([0.4, 0.3], [0.2, 0.1], color='black')\nax.add_artist(line)\n\n# Draw a line from (0.3, 0.1) to (0.2, 0.2)\nline = plt.Line2D([0.3, 0.2], [0.1, 0.2], color='black')\nax.add_artist(line)\n\n# Draw a line from (0.2, 0.2) to (0.3, 0.3)\nline = plt.Line2D([0.2, 0.3], [0.2, 0.3], color='black')\nax.add_artist(line)\n\n# Draw a line from (0.3, 0.3) to (0.4, 0.2)\nline = plt.Line2D([0.3, 0.4], [0.3, 0.2], color='black')\nax.add_artist(line)\n\n# Draw a line from (0.4, 0.2) to (0.3, 0.1)\nline = plt.Line2D([0.4, 0.3], [0.2, 0.1], color='black')\nax.add_artist(line)\n\n# Draw a line from (0.3, 0.1) to (0.2, 0.2)\nline = plt.Line2D([0.3, 0.2], [0.1, 0.2], color='black')\nax.add_artist(line)\n\n# Draw a line from (0.2, 0.2) to (0.3, 0.3)\nline = plt.Line2D([0.2, 0.3], [0.2, 0.3], color='black')\nax.add_artist(line)\n\n# Draw a line from (0.3, 0.3) to (0.4, 0.2)\nline = plt.Line2D([0.3, 0.4], [0.3, 0.2], color='black')\nax.add_artist(line)\n\n# Draw a line from (0.4, 0.2) to (0.3, 0.1)\nline = plt.Line2D([0.4, 0.3], [0.2, 0.1], color='black')\nax.add_artist(line)\n\n# Draw a line from (0.3, 0.1) to (0.2, 0.2)\nline = plt.Line2D([0.3, 0.2], [0.1, 0.2], color='black')\nax.add_artist(line)\n\n# Draw a line from (0.2, 0.2) to (0.3, 0.3)\nline = plt.Line2D([0.2, 0.3], [0.2, 0.3], color='black')\nax.add_artist(line)\n\n# Draw a line from (0.3, 0.3) to (0.4, 0.2)\nline = plt.Line2D([0.3, 0.4], [0.3, 0.2], color='black')\nax.add_artist(line)\n\n# Draw a line from (0.4, 0.2) to (0.3, 0.1)\nline = plt.Line2D([0.4, 0.3], [0.2, 0.1], color='black')\nax.add_artist(line)\n\n# Draw a line from (0.3, 0.1) to (0.2, 0.2)\nline = plt.Line2D([0.3, 0.2], [0.1, 0.2], color='black')\nax.add_artist(line)\n\n# Draw a line from (0.2, 0.2) to (0.3, 0.3)\nline = plt.Line2D([0.2, 0.3], [0.2, 0.3], color='black')\nax.add_artist(line)\n\n# Draw a line from (0.3, 0.3) to (0.4, 0.2)\nline = plt.Line2D([0.3, 0.4], [0.3, 0.2], color='black')\nax.add_artist(line)\n\n# Draw a line from (0.4, 0.2) to (0.3, 0.1)\nline = plt.Line2D([0.4, 0.3], [0.2, 0.1], color='black')\nax.add_artist(line)\n\n# Draw a line from (0.3, 0.1) to (0.2, 0.2)\nline = plt.Line2D([0.3, 0.2], [0.1, 0.2], color='black')\nax.add_artist(line)\n\n# Draw a line from (0.2, 0.2) to (0.3, 0.3)\nline = plt.Line2D([0.2, 0.3], [0.2, 0.3], color='black')\nax.add_artist(line)\n\n# Draw a line from (0.3, 0.3) to (0.4, 0.2)\nline = plt.Line2D([0.3, 0.4], [0.3, 0.2], color='black')\nax.add_artist(line)\n\n# Draw a line from (0.4, 0.2) to (0.3, 0.1)\nline = plt.Line2D([0.4, 0.3], [0.2, 0.1], color='black')\nax.add_artist(line)\n\n# Draw a line from (0.3, 0.1) to (0.2, 0.2)\nline = plt.Line2D([0.3, 0.2], [0.1, 0.2], color='black')\nax.add_artist(line)\n\n# Draw a line from (0.2, 0.2) to (0.3, 0.3)\nline = plt.Line2D([0.2, 0.3], [0.2, 0.3], color='black')\nax.add_artist(line)\n\n# Draw a line from (0.3, 0.3) to (0.4, 0.2)\nline = plt.Line2D([0.3, 0.4], [0.3, 0.2], color='black')\nax.add_artist(line)\n\n# Draw a line from (0.4"}
{"file": "dataset/ori_500/radar_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Define the data for the radar chart\ncategories = ['Privacy', 'Query Error']\nvalues = [3, 2]\nN = len(categories)\nangles = np.linspace(0, 2 * np.pi, N, endpoint=False).tolist()\nangles += angles[:1]  # To close the loop\nvalues += values[:1]\n\n# Plot the radar chart\nax.plot(angles, values, linewidth=1, linestyle='solid')\nax.fill(angles, values, 'b', alpha=0.1)\n\n# Set the title and labels\nax.set_title('Fidelity(D-test)')\nax.set_xticks(angles[:-1])\nax.set_yticks([0, 1, 2, 3, 4, 5])\nax.set_xticklabels(categories)\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/radar_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Set the title of the plot\nax.set_title('Heterocycle formation')\n\n# Draw a circle\ncircle = plt.Circle((0.5, 0.5), 0.4, color='black')\nax.add_artist(circle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='blue')\nax.add_artist(rectangle)\n\n# Draw a triangle\ntriangle = plt.Polygon([[0.3, 0.7], [0.7, 0.7], [0.5, 0.3]], color='orange')\nax.add_artist(triangle)\n\n# Draw a pentagon\npentagon = plt.Polygon([[0.1, 0.1], [0.3, 0.3], [0.5, 0.1], [0.7, 0.3], [0.9, 0.1]], color='green')\nax.add_artist(pentagon)\n\n# Draw a hexagon\nhexagon = plt.Polygon([[0.1, 0.5], [0.3, 0.7], [0.5, 0.7], [0.7, 0.5], [0.9, 0.7], [0.7, 0.9]], color='red')\nax.add_artist(hexagon)\n\n# Draw a heptagon\nheptagon = plt.Polygon([[0.1, 0.9], [0.3, 0.7], [0.5, 0.9], [0.7, 0.7], [0.9, 0.9], [0.7, 0.1], [0.5, 0.3]], color='purple')\nax.add_artist(heptagon)\n\n# Draw a octagon\noctagon = plt.Polygon([[0.1, 0.1], [0.3, 0.3], [0.5, 0.1], [0.7, 0.3], [0.9, 0.1], [0.7, 0.9], [0.5, 0.7], [0.3, 0.9]], color='yellow')\nax.add_artist(octagon)\n\n# Draw a nonagon\nnonagon = plt.Polygon([[0.1, 0.5], [0.3, 0.7], [0.5, 0.5], [0.7, 0.7], [0.9, 0.5], [0.7, 0.3], [0.5, 0.5], [0.3, 0.7], [0.1, 0.5]], color='cyan')\nax.add_artist(nonagon)\n\n# Draw a decagon\ndecagon = plt.Polygon([[0.1, 0.9], [0.3, 0.7], [0.5, 0.9], [0.7, 0.7], [0.9, 0.9], [0.7, 0.1], [0.5, 0.3], [0.3, 0.5], [0.1, 0.7], [0.3, 0.9]], color='magenta')\nax.add_artist(decagon)\n\n# Draw a dodecagon\ndodecagon = plt.Polygon([[0.1, 0.1], [0.3, 0.3], [0.5, 0.1], [0.7, 0.3], [0.9, 0.1], [0.7, 0.9], [0.5, 0.7], [0.3, 0.9], [0.1, 0.1], [0.3, 0.3], [0.5, 0.1], [0.7, 0.3]], color='brown')\nax.add_artist(dodecagon)\n\n# Draw a circle with a gradient\ncircle = plt.Circle((0.5, 0.5), 0.4, color='white', alpha=0.5)\nax.add_artist(circle)\n\n# Draw a rectangle with a gradient\nrectangle = plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='blue', alpha=0.5)\nax.add_artist(rectangle)\n\n# Draw a triangle with a gradient\ntriangle = plt.Polygon([[0.3, 0.7], [0.7, 0.7], [0.5, 0.3]], color='orange', alpha=0.5)\nax.add_artist(triangle)\n\n# Draw a pentagon with a gradient\npentagon = plt.Polygon([[0.1, 0.1], [0.3, 0.3], [0.5, 0.1], [0.7, 0.3], [0.9, 0.1]], color='green', alpha=0.5)\nax.add_artist(pentagon)\n\n# Draw a hexagon with a gradient\nhexagon = plt.Polygon([[0.1, 0.5], [0.3, 0.7], [0.5, 0.5], [0.7, 0.7], [0.9, 0.5], [0.7, 0.3]], color='red', alpha=0.5)\nax.add_artist(hexagon)\n\n# Draw a heptagon with a gradient\nheptagon = plt.Polygon([[0.1, 0.9], [0.3, 0.7], [0.5, 0.9], [0.7, 0.7], [0.9, 0.9], [0.7, 0.1], [0.5, 0.3]], color='purple', alpha=0.5)\nax.add_artist(heptagon)\n\n# Draw a octagon with a gradient\noctagon = plt.Polygon([[0.1, 0.1], [0.3, 0.3], [0.5, 0.1], [0.7, 0.3], [0.9, 0.1], [0.7, 0.9], [0.5, 0.7], [0.3, 0.9]], color='yellow', alpha=0.5)\nax.add_artist(octagon)\n\n# Draw a nonagon with a gradient\nnonagon = plt.Polygon([[0.1, 0.5], [0.3, 0.7], [0.5, 0.5], [0.7, 0.7], [0.9, 0.5], [0.7, 0.3], [0.5, 0.5], [0.3, 0.7], [0.1, 0.5]], color='cyan', alpha=0.5)\nax.add_artist(nonagon)\n\n# Draw a decagon with a gradient\ndecagon = plt.Polygon([[0.1, 0.9], [0.3, 0.7], [0.5, 0.9], [0.7, 0.7], [0.9, 0.9], [0.7, 0.1], [0.5, 0.3], [0.3, 0.5], [0.1, 0.7], [0.3, 0.9]], color='magenta', alpha=0.5)\nax.add_artist(decagon)\n\n# Draw a dodecagon with a gradient\ndodecagon = plt.Polygon([[0.1, 0.1], [0.3, 0.3], [0.5, 0.1], [0.7, 0.3], [0.9, 0.1], [0.7, 0.9], [0.5, 0.7], [0.3, 0.9], [0.1, 0.1], [0.3, 0.3], [0.5, 0.1], [0.7, 0.3]], color='brown', alpha=0.5)\nax.add_artist(dodecagon)\n\n# Draw a circle with a gradient\ncircle = plt.Circle((0.5, 0.5), 0.4, color='white', alpha=0.5)\nax.add_artist(circle)\n\n# Draw a rectangle with a gradient\nrectangle = plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='blue', alpha=0.5)\nax.add_artist(rectangle)\n\n# Draw a triangle with a gradient\ntriangle = plt.Polygon([[0.3, 0.7], [0.7, 0.7], [0.5, 0.3]], color='orange', alpha=0.5)\nax.add_artist(triangle)\n\n# Draw a pentagon with a gradient\npentagon = plt.Polygon([[0.1, 0.1], [0.3, 0.3], [0.5, 0.1], [0.7, 0.3], [0.9, 0.1]], color='green', alpha=0.5)\nax.add_artist(pentagon)\n\n# Draw a hexagon with a gradient\nhexagon = plt.Polygon([[0.1, 0.5], [0.3, 0.7], [0.5, 0.5], [0.7, 0.7], [0.9, 0.5], [0.7, 0.3]], color='red', alpha=0.5)\nax.add_artist(hexagon)\n\n# Draw a heptagon with a gradient\nheptagon = plt.Polygon([[0.1, 0.9], [0.3, 0.7], [0.5, 0.9], [0.7, 0.7], [0.9, 0.9], [0.7, 0.1], [0.5, 0.3]], color='purple', alpha=0.5)\nax.add_artist(heptagon)\n\n# Draw a octagon with a gradient\noctagon = plt.Polygon([[0.1, 0.1], [0.3, 0.3], [0.5, 0.1], [0.7, 0.3], [0.9, 0.1], [0.7, 0.9], [0.5, 0.7], [0.3, 0.9]], color='yellow', alpha=0.5)\nax.add_artist(octagon)\n\n# Draw a nonagon with a gradient\nnonagon = plt.Polygon([[0.1, 0.5], [0.3, 0.7], [0.5, 0.5], [0.7, 0.7], [0.9, 0.5], [0.7, 0.3], [0.5, 0.5], [0.3, 0.7], [0.1, 0.5]], color='cyan', alpha=0.5)\nax.add_artist(nonagon)\n\n# Draw a decagon with a gradient\ndecagon = plt.Polygon([[0.1, 0.9], [0.3, 0.7], [0.5, 0.9], [0.7, 0.7], [0.9, 0.9], [0.7, 0.1], [0.5, 0.3], [0.3, 0.5], [0.1, 0.7], [0.3, 0.9]], color='magenta', alpha=0.5)\nax.add_artist(decagon)\n\n# Draw a dodecagon with a gradient\ndodecagon = plt.Polygon([[0.1, 0.1], [0.3, 0.3], [0.5, 0.1], [0.7, 0.3], [0.9, 0.1], [0.7, 0.9], [0.5, 0.7], [0.3, 0.9], [0.1, 0.1], [0.3, 0.3], [0.5, 0.1], [0.7, 0.3]], color='brown', alpha=0.5)\nax.add_artist(dodecagon)\n\n# Draw a circle with a gradient\ncircle = plt.Circle((0.5, 0.5), 0.4, color='white', alpha=0.5)\nax.add_artist(circle)\n\n# Draw a rectangle with a gradient\nrectangle = plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='blue', alpha=0.5)\nax.add_artist(rectangle)\n\n# Draw a triangle with a gradient\ntriangle = plt.Polygon([[0.3, 0.7], [0.7, 0.7], [0.5, 0.3]], color='orange', alpha=0.5)\nax.add_artist(triangle)\n\n# Draw a pentagon with a gradient\npentagon = plt.Polygon([[0.1, 0.1], [0.3, 0.3], [0.5, 0.1], [0.7, 0.3], [0.9, 0.1]], color='green', alpha=0.5)\nax.add_artist(pentagon)\n\n# Draw a hexagon with a gradient\nhexagon = plt.Polygon([[0.1, 0.5], [0.3, 0.7], [0.5, 0.5], [0.7, 0.7], [0.9, 0.5], [0.7, 0.3]], color='red', alpha=0.5)\nax.add_artist(hexagon)\n\n# Draw a heptagon with a gradient\nheptagon = plt.Polygon([[0.1, 0.9], [0.3, 0.7], [0.5, 0.9], [0.7, 0.7], [0.9, 0.9], [0.7, 0.1], [0.5, 0.3]], color='purple', alpha=0.5)\nax.add_artist(heptagon)\n\n# Draw a octagon with a gradient\noctagon = plt.Polygon([[0.1, 0.1], [0.3, 0.3], [0.5, 0.1], [0.7, 0.3], [0.9, 0.1], [0.7, 0.9], [0.5, 0.7], [0.3, 0.9]], color='yellow', alpha=0.5)\nax.add_artist(octagon)\n\n# Draw a nonagon with a gradient\nnonagon = plt.Polygon([[0.1, 0.5], [0.3, 0.7], [0.5, 0.5], [0.7, 0.7], [0.9, 0.5], [0.7, 0.3], [0.5, 0.5], [0.3, 0.7], [0.1, 0.5]], color='cyan', alpha=0.5)\nax.add_artist(nonagon)\n\n# Draw a decagon with a gradient\ndecagon = plt.Polygon([[0.1, 0.9], [0.3, 0.7], [0.5, 0.9], [0.7, 0.7], [0.9, 0.9], [0.7, 0.1], [0.5, 0.3], [0.3, 0.5], [0.1, 0.7], [0.3, 0.9]], color='magenta', alpha=0.5)\nax.add_artist(decagon)\n\n# Draw a dodecagon with a gradient\ndodecagon = plt.Polygon([[0.1, 0.1], [0.3, 0.3], [0.5, 0.1], [0.7, 0.3], [0.9, 0.1], [0.7, 0.9], [0.5, 0.7], [0.3, 0.9], [0.1, 0.1], [0.3, 0.3], [0.5, 0.1], [0.7, 0.3]], color='brown', alpha=0.5)\nax.add_artist(dodecagon)\n\n# Draw a circle with a gradient\ncircle = plt.Circle((0.5, 0.5), 0.4, color='white', alpha=0.5)\nax.add_artist(circle)\n\n# Draw a rectangle with a gradient\nrectangle = plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='blue', alpha=0.5)\nax.add_artist(rectangle)\n\n# Draw a triangle with a gradient\ntriangle = plt.Polygon([[0.3, 0.7], [0.7, 0.7], [0.5, 0.3]], color='orange', alpha=0.5)\nax.add_artist(triangle)\n\n# Draw a pentagon with a gradient\npentagon = plt.Polygon([[0.1, 0.1], [0.3, 0.3], [0.5, 0.1], [0.7, 0.3], [0.9, 0.1]], color='green', alpha=0.5)\nax.add_artist(pentagon)\n\n# Draw a hexagon with a gradient\nhexagon = plt.Polygon([[0.1, 0.5], [0.3, 0.7], [0.5, 0.5], [0.7, 0.7], [0.9, 0.5], [0.7, 0.3]], color='red', alpha=0.5)\nax.add_artist(hexagon)\n\n# Draw a heptagon with a gradient\nhept"}
{"file": "dataset/ori_500/radar_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Set the background color of the plot\nax.set_facecolor('lightgrey')\n\n# Draw a circle at the center of the plot\ncircle = plt.Circle((0.5, 0.5), 0.4, color='lightgrey')\nax.add_artist(circle)\n\n# Draw a rectangle around the circle\nrectangle = plt.Rectangle((0.1, 0.1), 0.8, 0.8, color='lightgrey', fill=False)\nax.add_artist(rectangle)\n\n# Draw a star in the center of the plot\nstar = plt.Polygon([[0.5, 0.5], [0.4, 0.6], [0.6, 0.6], [0.5, 0.7], [0.5, 0.5]], color='red')\nax.add_artist(star)\n\n# Draw a rectangle with a border around the star\nborder = plt.Rectangle((0.4, 0.4), 0.2, 0.2, color='black', fill=False)\nax.add_artist(border)\n\n# Draw a rectangle with a border around the star\nborder = plt.Rectangle((0.4, 0.4), 0.2, 0.2, color='black', fill=False)\nax.add_artist(border)\n\n# Draw a rectangle with a border around the star\nborder = plt.Rectangle((0.4, 0.4), 0.2, 0.2, color='black', fill=False)\nax.add_artist(border)\n\n# Draw a rectangle with a border around the star\nborder = plt.Rectangle((0.4, 0.4), 0.2, 0.2, color='black', fill=False)\nax.add_artist(border)\n\n# Draw a rectangle with a border around the star\nborder = plt.Rectangle((0.4, 0.4), 0.2, 0.2, color='black', fill=False)\nax.add_artist(border)\n\n# Draw a rectangle with a border around the star\nborder = plt.Rectangle((0.4, 0.4), 0.2, 0.2, color='black', fill=False)\nax.add_artist(border)\n\n# Draw a rectangle with a border around the star\nborder = plt.Rectangle((0.4, 0.4), 0.2, 0.2, color='black', fill=False)\nax.add_artist(border)\n\n# Draw a rectangle with a border around the star\nborder = plt.Rectangle((0.4, 0.4), 0.2, 0.2, color='black', fill=False)\nax.add_artist(border)\n\n# Draw a rectangle with a border around the star\nborder = plt.Rectangle((0.4, 0.4), 0.2, 0.2, color='black', fill=False)\nax.add_artist(border)\n\n# Draw a rectangle with a border around the star\nborder = plt.Rectangle((0.4, 0.4), 0.2, 0.2, color='black', fill=False)\nax.add_artist(border)\n\n# Draw a rectangle with a border around the star\nborder = plt.Rectangle((0.4, 0.4), 0.2, 0.2, color='black', fill=False)\nax.add_artist(border)\n\n# Draw a rectangle with a border around the star\nborder = plt.Rectangle((0.4, 0.4), 0.2, 0.2, color='black', fill=False)\nax.add_artist(border)\n\n# Draw a rectangle with a border around the star\nborder = plt.Rectangle((0.4, 0.4), 0.2, 0.2, color='black', fill=False)\nax.add_artist(border)\n\n# Draw a rectangle with a border around the star\nborder = plt.Rectangle((0.4, 0.4), 0.2, 0.2, color='black', fill=False)\nax.add_artist(border)\n\n# Draw a rectangle with a border around the star\nborder = plt.Rectangle((0.4, 0.4), 0.2, 0.2, color='black', fill=False)\nax.add_artist(border)\n\n# Draw a rectangle with a border around the star\nborder = plt.Rectangle((0.4, 0.4), 0.2, 0.2, color='black', fill=False)\nax.add_artist(border)\n\n# Draw a rectangle with a border around the star\nborder = plt.Rectangle((0.4, 0.4), 0.2, 0.2, color='black', fill=False)\nax.add_artist(border)\n\n# Draw a rectangle with a border around the star\nborder = plt.Rectangle((0.4, 0.4), 0.2, 0.2, color='black', fill=False)\nax.add_artist(border)\n\n# Draw a rectangle with a border around the star\nborder = plt.Rectangle((0.4, 0.4), 0.2, 0.2, color='black', fill=False)\nax.add_artist(border)\n\n# Draw a rectangle with a border around the star\nborder = plt.Rectangle((0.4, 0.4), 0.2, 0.2, color='black', fill=False)\nax.add_artist(border)\n\n# Draw a rectangle with a border around the star\nborder = plt.Rectangle((0.4, 0.4), 0.2, 0.2, color='black', fill=False)\nax.add_artist(border)\n\n# Draw a rectangle with a border around the star\nborder = plt.Rectangle((0.4, 0.4), 0.2, 0.2, color='black', fill=False)\nax.add_artist(border)\n\n# Draw a rectangle with a border around the star\nborder = plt.Rectangle((0.4, 0.4), 0.2, 0.2, color='black', fill=False)\nax.add_artist(border)\n\n# Draw a rectangle with a border around the star\nborder = plt.Rectangle((0.4, 0.4), 0.2, 0.2, color='black', fill=False)\nax.add_artist(border)\n\n# Draw a rectangle with a border around the star\nborder = plt.Rectangle((0.4, 0.4), 0.2, 0.2, color='black', fill=False)\nax.add_artist(border)\n\n# Draw a rectangle with a border around the star\nborder = plt.Rectangle((0.4, 0.4), 0.2, 0.2, color='black', fill=False)\nax.add_artist(border)\n\n# Draw a rectangle with a border around the star\nborder = plt.Rectangle((0.4, 0.4), 0.2, 0.2, color='black', fill=False)\nax.add_artist(border)\n\n# Draw a rectangle with a border around the star\nborder = plt.Rectangle((0.4, 0.4), 0.2, 0.2, color='black', fill=False)\nax.add_artist(border)\n\n# Draw a rectangle with a border around the star\nborder = plt.Rectangle((0.4, 0.4), 0.2, 0.2, color='black', fill=False)\nax.add_artist(border)\n\n# Draw a rectangle with a border around the star\nborder = plt.Rectangle((0.4, 0.4), 0.2, 0.2, color='black', fill=False)\nax.add_artist(border)\n\n# Draw a rectangle with a border around the star\nborder = plt.Rectangle((0.4, 0.4), 0.2, 0.2, color='black', fill=False)\nax.add_artist(border)\n\n# Draw a rectangle with a border around the star\nborder = plt.Rectangle((0.4, 0.4), 0.2, 0.2, color='black', fill=False)\nax.add_artist(border)\n\n# Draw a rectangle with a border around the star\nborder = plt.Rectangle((0.4, 0.4), 0.2, 0.2, color='black', fill=False)\nax.add_artist(border)\n\n# Draw a rectangle with a border around the star\nborder = plt.Rectangle((0.4, 0.4), 0.2, 0.2, color='black', fill=False)\nax.add_artist(border)\n\n# Draw a rectangle with a border around the star\nborder = plt.Rectangle((0.4, 0.4), 0.2, 0.2, color='black', fill=False)\nax.add_artist(border)\n\n# Draw a rectangle with a border around the star\nborder = plt.Rectangle((0.4, 0.4), 0.2, 0.2, color='black', fill=False)\nax.add_artist(border)\n\n# Draw a rectangle with a border around the star\nborder = plt.Rectangle((0.4, 0.4), 0.2, 0.2, color='black', fill=False)\nax.add_artist(border)\n\n# Draw a rectangle with a border around the star\nborder = plt.Rectangle((0.4, 0.4), 0.2, 0.2, color='black', fill=False)\nax.add_artist(border)\n\n# Draw a rectangle with a border around the star\nborder = plt.Rectangle((0.4, 0.4), 0.2, 0.2, color='black', fill=False)\nax.add_artist(border)\n\n# Draw a rectangle with a border around the star\nborder = plt.Rectangle((0.4, 0.4), 0.2, 0.2, color='black', fill=False)\nax.add_artist(border)\n\n# Draw a rectangle with a border around the star\nborder = plt.Rectangle((0.4, 0.4), 0.2, 0.2, color='black', fill=False)\nax.add_artist(border)\n\n# Draw a rectangle with a border around the star\nborder = plt.Rectangle((0.4, 0.4), 0.2, 0.2, color='black', fill=False)\nax.add_artist(border)\n\n# Draw a rectangle with a border around the star\nborder = plt.Rectangle((0.4, 0.4), 0.2, 0.2, color='black', fill=False)\nax.add_artist(border)\n\n# Draw a rectangle with a border around the star\nborder = plt.Rectangle((0.4, 0.4), 0.2, 0.2, color='black', fill=False)\nax.add_artist(border)\n\n# Draw a rectangle with a border around the star\nborder = plt.Rectangle((0.4, 0.4), 0.2, 0.2, color='black', fill=False)\nax.add_artist(border)\n\n# Draw a rectangle with a border around the star\nborder = plt.Rectangle((0.4, 0.4), 0.2, 0.2, color='black', fill=False)\nax.add_artist(border)\n\n# Draw a rectangle with a border around the star\nborder = plt.Rectangle((0.4, 0.4), 0.2, 0.2, color='black', fill=False)\nax.add_artist(border)\n\n# Draw a rectangle with a border around the star\nborder = plt.Rectangle((0.4, 0.4), 0.2, 0.2, color='black', fill=False)\nax.add_artist(border)\n\n# Draw a rectangle with a border around the star\nborder = plt.Rectangle((0.4, 0.4), 0.2, 0.2, color='black', fill=False)\nax.add_artist(border)\n\n# Draw a rectangle with a border around the star\nborder = plt.Rectangle((0.4, 0.4), 0.2, 0.2, color='black', fill=False)\nax.add_artist(border)\n\n# Draw a rectangle with a border around the star\nborder = plt.Rectangle((0.4, 0.4), 0.2, 0.2, color='black', fill=False)\nax.add_artist(border)\n\n# Draw a rectangle with a border around the star\nborder = plt.Rectangle((0.4, 0.4), 0.2, 0.2, color='black', fill=False)\nax.add_artist(border)\n\n# Draw a rectangle with a border around the star\nborder = plt.Rectangle((0.4, 0.4), 0.2, 0.2, color='black', fill=False)\nax.add_artist(border)\n\n# Draw a rectangle with a border around the star\nborder = plt.Rectangle((0.4, 0.4), 0.2, 0.2, color='black', fill=False)\nax.add_artist(border)\n\n# Draw a rectangle with a border around the star\nborder = plt.Rectangle((0.4, 0.4), 0.2, 0.2, color='black', fill=False)\nax.add_artist(border)\n\n# Draw a rectangle with a border around the star\nborder = plt.Rectangle((0.4, 0.4), 0.2, 0.2, color='black', fill=False)\nax.add_artist(border)\n\n# Draw a rectangle with a border around the star\nborder = plt.Rectangle((0.4, 0.4), 0.2, 0.2, color='black', fill=False)\nax.add_artist(border)\n\n# Draw a rectangle with a border around the star\nborder = plt.Rectangle((0.4, 0.4), 0.2, 0.2, color='black', fill=False)\nax.add_artist(border)\n\n# Draw a rectangle with a border around the star\nborder = plt.Rectangle((0.4, 0.4), 0.2, 0.2, color='black', fill=False)\nax.add_artist(border)\n\n# Draw a rectangle with a border around the star\nborder = plt.Rectangle((0.4, 0.4), 0.2, 0.2, color='black', fill=False)\nax.add_artist(border)\n\n# Draw a rectangle with a border around the star\nborder = plt.Rectangle((0.4, 0.4), 0.2, 0.2, color='black', fill=False)\nax.add_artist(border)\n\n# Draw a rectangle with a border around the star\nborder = plt.Rectangle((0.4, 0.4), 0.2, 0.2, color='black', fill=False)\nax.add_artist(border)\n\n# Draw a rectangle with a border around the star\nborder = plt.Rectangle((0.4, 0.4), 0.2, 0.2, color='black', fill=False)\nax.add_artist(border)\n\n# Draw a rectangle with a border around the star\nborder = plt.Rectangle((0.4, 0.4), 0.2, 0.2, color='black', fill=False)\nax.add_artist(border)\n\n# Draw a rectangle with a border around the star\nborder = plt.Rectangle((0.4, 0.4), 0.2, 0.2, color='black', fill=False)\nax.add_artist(border)\n\n# Draw a rectangle with a border around the star\nborder = plt.Rectangle((0.4, 0.4), 0.2, 0.2, color='black', fill=False)\nax.add_artist(border)\n\n# Draw a rectangle with a border around the star\nborder = plt.Rectangle((0.4, 0.4), 0.2, 0.2, color='black', fill=False)\nax.add_artist(border)\n\n# Draw a rectangle with a border around the star\nborder = plt.Rectangle((0.4, 0.4), 0.2, 0.2, color='black', fill=False)\nax.add_artist(border)\n\n# Draw a rectangle with a border around the star\nborder = plt.Rectangle((0.4, 0.4), 0.2, 0.2, color='black', fill=False)\nax.add_artist(border)\n\n# Draw a rectangle with a border around the star\nborder = plt.Rectangle((0.4, 0.4), 0.2, 0.2, color='black', fill=False)\nax.add_artist(border)\n\n# Draw a rectangle with a border around the star\nborder = plt.Rectangle((0.4, 0.4), 0.2, 0.2, color='black', fill=False)\nax.add_artist(border)\n\n# Draw a rectangle with a border around the star\nborder = plt.Rectangle((0.4, 0.4), 0.2, 0.2, color='black', fill=False)\nax.add_artist(border)\n\n# Draw a rectangle with a border around the star\nborder = plt.Rectangle((0.4, 0.4), 0.2, 0.2, color='black', fill=False)\nax.add_artist(border)\n\n# Draw a rectangle with a border around the star\nborder = plt.Rectangle((0.4, 0.4), 0.2, 0.2, color='black', fill=False)\nax.add_artist(border)\n\n# Draw a rectangle with a border around the star\nborder = plt.Rectangle((0.4, 0.4), 0.2, 0.2, color='black', fill=False)\nax.add_artist(border)\n\n# Draw a rectangle with a border around the star\nborder = plt.Rectangle((0.4, 0.4), 0.2, 0.2, color='black', fill=False)\nax.add_artist(border)\n\n# Draw a rectangle with a border around the star\nborder = plt.Rectangle((0.4, 0.4), 0.2, 0.2, color='black', fill=False)\nax.add_artist(border)\n\n# Draw a rectangle with a border around the star\nborder = plt.Rectangle((0.4, 0.4), 0.2, 0.2, color='black', fill=False)\nax.add_artist(border)\n\n# Draw a rectangle with a border around the star\nborder = plt.Rectangle((0.4, 0.4), 0.2, 0.2, color='black', fill=False)\nax.add_artist(border)\n\n# Draw a rectangle with a border around the star\nborder = plt.Rectangle((0.4, 0.4), 0.2, 0.2, color='black', fill=False)\nax.add_artist(border)\n\n# Draw a rectangle with a border around the star\nborder = plt.Rectangle((0.4, 0.4), 0.2, 0.2, color='black', fill=False)\nax.add_artist(border)\n\n# Draw a rectangle with a border around the star\nborder = plt.Rectangle((0.4, 0.4), 0.2, 0.2, color='black', fill=False)\nax.add_artist(border)\n\n# Draw a rectangle with a border around the star\nborder = plt.Rectangle((0.4, 0.4),"}
{"file": "dataset/ori_500/radar_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Set the title of the plot\nax.set_title('3D-bar')\n\n# Draw a circle with a radius of 1 centered at (0,0)\ncircle = plt.Circle((0,0), 1, color='black', fill=False)\nax.add_artist(circle)\n\n# Draw a rectangle with a width of 2 and height of 1 centered at (0,0)\nrectangle = plt.Rectangle((-1,-0.5), 2, 1, color='red')\nax.add_artist(rectangle)\n\n# Draw a polygon with vertices at (0,0), (1,1), (-1,1)\npolygon = plt.Polygon([(0,0), (1,1), (-1,1)], color='blue')\nax.add_artist(polygon)\n\n# Draw a line from (0,0) to (1,1)\nline = plt.Line2D([0,1], [0,1], color='green')\nax.add_artist(line)\n\n# Draw a scatter plot with points at (0,0), (1,1), (-1,1)\nscatter = plt.scatter([0,1,-1], [0,1,1], color='yellow')\nax.add_artist(scatter)\n\n# Draw a histogram with 10 bins\nhistogram = plt.hist(np.random.randn(1000), bins=10, color='orange')\nax.add_artist(histogram)\n\n# Draw a pie chart with 3 slices\npie_chart = plt.pie([1,2,3], colors=['red', 'blue', 'green'])\nax.add_artist(pie_chart)\n\n# Draw a radar chart with 4 axes\nradar_chart = plt.subplot(111, polar=True)\nradar_chart.plot([0, np.pi/2, np.pi, 3*np.pi/2, 0], [1, 2, 3, 2, 1], color='purple')\nradar_chart.fill([0, np.pi/2, np.pi, 3*np.pi/2, 0], [1, 2, 3, 2, 1], color='pink')\n\n# Draw a bubble chart with 5 bubbles\nbubble_chart = plt.scatter([0,1,2,3,4], [0,1,2,3,4], s=[100,200,300,400,500], color='brown')\nax.add_artist(bubble_chart)\n\n# Draw a heatmap with 5x5 grid\nheatmap = plt.imshow(np.random.rand(5,5), cmap='hot', interpolation='nearest')\nax.add_artist(heatmap)\n\n# Draw a treemap with 5 rectangles\ntreemap = plt.Rectangle((0,0), 1, 1, color='cyan')\nax.add_artist(treemap)\n\n# Draw a boxplot with 5 boxes\nboxplot = plt.boxplot([np.random.randn(100) for _ in range(5)], patch_artist=True)\nax.add_artist(boxplot)\n\n# Draw a rose diagram with 5 petals\nrose_diagram = plt.subplot(111, polar=True)\ntheta = np.linspace(0, 2*np.pi, 5, endpoint=False)\nr = np.linspace(0, 1, 5)\nrose_diagram.plot(theta, r, color='magenta')\nrose_diagram.fill(theta, r, color='lime')\n\n# Draw a sunburst chart with 5 segments\nsunburst_chart = plt.subplot(111, polar=True)\ntheta = np.linspace(0, 2*np.pi, 5, endpoint=False)\nr = np.linspace(0, 1, 5)\nsunburst_chart.plot(theta, r, color='cyan')\nsunburst_chart.fill(theta, r, color='lime')\n\n# Draw a chord diagram with 5 chords\nchord_diagram = plt.subplot(111, polar=True)\ntheta = np.linspace(0, 2*np.pi, 5, endpoint=False)\nr = np.linspace(0, 1, 5)\nchord_diagram.plot(theta, r, color='cyan')\nchord_diagram.fill(theta, r, color='lime')\n\n# Draw a Sankey diagram with 5 nodes\nsankey_diagram = plt.subplot(111, polar=True)\ntheta = np.linspace(0, 2*np.pi, 5, endpoint=False)\nr = np.linspace(0, 1, 5)\nsankey_diagram.plot(theta, r, color='cyan')\nsankey_diagram.fill(theta, r, color='lime')\n\n# Draw a Venn diagram with 5 circles\nvenn_diagram = plt.subplot(111, polar=True)\ntheta = np.linspace(0, 2*np.pi, 5, endpoint=False)\nr = np.linspace(0, 1, 5)\nvenn_diagram.plot(theta, r, color='cyan')\nvenn_diagram.fill(theta, r, color='lime')\n\n# Draw a chord diagram with 5 chords\nchord_diagram = plt.subplot(111, polar=True)\ntheta = np.linspace(0, 2*np.pi, 5, endpoint=False)\nr = np.linspace(0, 1, 5)\nchord_diagram.plot(theta, r, color='cyan')\nchord_diagram.fill(theta, r, color='lime')\n\n# Draw a Sankey diagram with 5 nodes\nsankey_diagram = plt.subplot(111, polar=True)\ntheta = np.linspace(0, 2*np.pi, 5, endpoint=False)\nr = np.linspace(0, 1, 5)\nsankey_diagram.plot(theta, r, color='cyan')\nsankey_diagram.fill(theta, r, color='lime')\n\n# Draw a Venn diagram with 5 circles\nvenn_diagram = plt.subplot(111, polar=True)\ntheta = np.linspace(0, 2*np.pi, 5, endpoint=False)\nr = np.linspace(0, 1, 5)\nvenn_diagram.plot(theta, r, color='cyan')\nvenn_diagram.fill(theta, r, color='lime')\n\n# Draw a chord diagram with 5 chords\nchord_diagram = plt.subplot(111, polar=True)\ntheta = np.linspace(0, 2*np.pi, 5, endpoint=False)\nr = np.linspace(0, 1, 5)\nchord_diagram.plot(theta, r, color='cyan')\nchord_diagram.fill(theta, r, color='lime')\n\n# Draw a Sankey diagram with 5 nodes\nsankey_diagram = plt.subplot(111, polar=True)\ntheta = np.linspace(0, 2*np.pi, 5, endpoint=False)\nr = np.linspace(0, 1, 5)\nsankey_diagram.plot(theta, r, color='cyan')\nsankey_diagram.fill(theta, r, color='lime')\n\n# Draw a Venn diagram with 5 circles\nvenn_diagram = plt.subplot(111, polar=True)\ntheta = np.linspace(0, 2*np.pi, 5, endpoint=False)\nr = np.linspace(0, 1, 5)\nvenn_diagram.plot(theta, r, color='cyan')\nvenn_diagram.fill(theta, r, color='lime')\n\n# Draw a chord diagram with 5 chords\nchord_diagram = plt.subplot(111, polar=True)\ntheta = np.linspace(0, 2*np.pi, 5, endpoint=False)\nr = np.linspace(0, 1, 5)\nchord_diagram.plot(theta, r, color='cyan')\nchord_diagram.fill(theta, r, color='lime')\n\n# Draw a Sankey diagram with 5 nodes\nsankey_diagram = plt.subplot(111, polar=True)\ntheta = np.linspace(0, 2*np.pi, 5, endpoint=False)\nr = np.linspace(0, 1, 5)\nsankey_diagram.plot(theta, r, color='cyan')\nsankey_diagram.fill(theta, r, color='lime')\n\n# Draw a Venn diagram with 5 circles\nvenn_diagram = plt.subplot(111, polar=True)\ntheta = np.linspace(0, 2*np.pi, 5, endpoint=False)\nr = np.linspace(0, 1, 5)\nvenn_diagram.plot(theta, r, color='cyan')\nvenn_diagram.fill(theta, r, color='lime')\n\n# Draw a chord diagram with 5 chords\nchord_diagram = plt.subplot(111, polar=True)\ntheta = np.linspace(0, 2*np.pi, 5, endpoint=False)\nr = np.linspace(0, 1, 5)\nchord_diagram.plot(theta, r, color='cyan')\nchord_diagram.fill(theta, r, color='lime')\n\n# Draw a Sankey diagram with 5 nodes\nsankey_diagram = plt.subplot(111, polar=True)\ntheta = np.linspace(0, 2*np.pi, 5, endpoint=False)\nr = np.linspace(0, 1, 5)\nsankey_diagram.plot(theta, r, color='cyan')\nsankey_diagram.fill(theta, r, color='lime')\n\n# Draw a Venn diagram with 5 circles\nvenn_diagram = plt.subplot(111, polar=True)\ntheta = np.linspace(0, 2*np.pi, 5, endpoint=False)\nr = np.linspace(0, 1, 5)\nvenn_diagram.plot(theta, r, color='cyan')\nvenn_diagram.fill(theta, r, color='lime')\n\n# Draw a chord diagram with 5 chords\nchord_diagram = plt.subplot(111, polar=True)\ntheta = np.linspace(0, 2*np.pi, 5, endpoint=False)\nr = np.linspace(0, 1, 5)\nchord_diagram.plot(theta, r, color='cyan')\nchord_diagram.fill(theta, r, color='lime')\n\n# Draw a Sankey diagram with 5 nodes\nsankey_diagram = plt.subplot(111, polar=True)\ntheta = np.linspace(0, 2*np.pi, 5, endpoint=False)\nr = np.linspace(0, 1, 5)\nsankey_diagram.plot(theta, r, color='cyan')\nsankey_diagram.fill(theta, r, color='lime')\n\n# Draw a Venn diagram with 5 circles\nvenn_diagram = plt.subplot(111, polar=True)\ntheta = np.linspace(0, 2*np.pi, 5, endpoint=False)\nr = np.linspace(0, 1, 5)\nvenn_diagram.plot(theta, r, color='cyan')\nvenn_diagram.fill(theta, r, color='lime')\n\n# Draw a chord diagram with 5 chords\nchord_diagram = plt.subplot(111, polar=True)\ntheta = np.linspace(0, 2*np.pi, 5, endpoint=False)\nr = np.linspace(0, 1, 5)\nchord_diagram.plot(theta, r, color='cyan')\nchord_diagram.fill(theta, r, color='lime')\n\n# Draw a Sankey diagram with 5 nodes\nsankey_diagram = plt.subplot(111, polar=True)\ntheta = np.linspace(0, 2*np.pi, 5, endpoint=False)\nr = np.linspace(0, 1, 5)\nsankey_diagram.plot(theta, r, color='cyan')\nsankey_diagram.fill(theta, r, color='lime')\n\n# Draw a Venn diagram with 5 circles\nvenn_diagram = plt.subplot(111, polar=True)\ntheta = np.linspace(0, 2*np.pi, 5, endpoint=False)\nr = np.linspace(0, 1, 5)\nvenn_diagram.plot(theta, r, color='cyan')\nvenn_diagram.fill(theta, r, color='lime')\n\n# Draw a chord diagram with 5 chords\nchord_diagram = plt.subplot(111, polar=True)\ntheta = np.linspace(0, 2*np.pi, 5, endpoint=False)\nr = np.linspace(0, 1, 5)\nchord_diagram.plot(theta, r, color='cyan')\nchord_diagram.fill(theta, r, color='lime')\n\n# Draw a Sankey diagram with 5 nodes\nsankey_diagram = plt.subplot(111, polar=True)\ntheta = np.linspace(0, 2*np.pi, 5, endpoint=False)\nr = np.linspace(0, 1, 5)\nsankey_diagram.plot(theta, r, color='cyan')\nsankey_diagram.fill(theta, r, color='lime')\n\n# Draw a Venn diagram with 5 circles\nvenn_diagram = plt.subplot(111, polar=True)\ntheta = np.linspace(0, 2*np.pi, 5, endpoint=False)\nr = np.linspace(0, 1, 5)\nvenn_diagram.plot(theta, r, color='cyan')\nvenn_diagram.fill(theta, r, color='lime')\n\n# Draw a chord diagram with 5 chords\nchord_diagram = plt.subplot(111, polar=True)\ntheta = np.linspace(0, 2*np.pi, 5, endpoint=False)\nr = np.linspace(0, 1, 5)\nchord_diagram.plot(theta, r, color='cyan')\nchord_diagram.fill(theta, r, color='lime')\n\n# Draw a Sankey diagram with 5 nodes\nsankey_diagram = plt.subplot(111, polar=True)\ntheta = np.linspace(0, 2*np.pi, 5, endpoint=False)\nr = np.linspace(0, 1, 5)\nsankey_diagram.plot(theta, r, color='cyan')\nsankey_diagram.fill(theta, r, color='lime')\n\n# Draw a Venn diagram with 5 circles\nvenn_diagram = plt.subplot(111, polar=True)\ntheta = np.linspace(0, 2*np.pi, 5, endpoint=False)\nr = np.linspace(0, 1, 5)\nvenn_diagram.plot(theta, r, color='cyan')\nvenn_diagram.fill(theta, r, color='lime')\n\n# Draw a chord diagram with 5 chords\nchord_diagram = plt.subplot(111, polar=True)\ntheta = np.linspace(0, 2*np.pi, 5, endpoint=False)\nr = np.linspace(0, 1, 5)\nchord_diagram.plot(theta, r, color='cyan')\nchord_diagram.fill(theta, r, color='lime')\n\n# Draw a Sankey diagram with 5 nodes\nsankey_diagram = plt.subplot(111, polar=True)\ntheta = np.linspace(0, 2*np.pi, 5, endpoint=False)\nr = np.linspace(0, 1, 5)\nsankey_diagram.plot(theta, r, color='cyan')\nsankey_diagram.fill(theta, r, color='lime')\n\n# Draw a Venn diagram with 5 circles\nvenn_diagram = plt.subplot(111, polar=True)\ntheta = np.linspace(0, 2*np.pi, 5, endpoint=False)\nr = np.linspace(0, 1, 5)\nvenn_diagram.plot(theta, r, color='cyan')\nvenn_diagram.fill(theta, r, color='lime')\n\n# Draw a chord diagram with 5 chords\nchord_diagram = plt.subplot(111, polar=True)\ntheta = np.linspace(0, 2*np.pi, 5, endpoint=False)\nr = np.linspace(0, 1, 5)\nchord_diagram.plot(theta, r, color='cyan')\nchord_diagram.fill(theta, r, color='lime')\n\n# Draw a Sankey diagram with 5 nodes\nsankey_diagram = plt.subplot(111, polar=True)\ntheta = np.linspace(0, 2*np.pi, 5, endpoint=False)\nr = np.linspace(0, 1, 5)\nsankey_diagram.plot(theta, r, color='cyan')\nsankey_diagram.fill(theta, r, color='lime')\n\n# Draw a Venn diagram with 5 circles\nvenn_diagram = plt.subplot(111, polar=True)\ntheta = np.linspace(0, 2*np.pi, 5, endpoint=False)\nr = np.linspace(0, 1, 5)\nvenn_diagram.plot(theta, r, color='cyan')\nvenn_diagram.fill(theta, r, color='lime')\n\n# Draw a chord diagram with 5 chords\nchord_diagram = plt.subplot(111, polar=True)\ntheta = np.linspace(0, 2*np.pi, 5, endpoint=False)\nr = np.linspace(0, 1, 5)\nchord_diagram.plot(theta, r, color='cyan')\nchord_diagram.fill(theta, r, color='lime')\n\n# Draw a Sankey diagram with 5 nodes\nsankey_diagram = plt.subplot(111, polar=True)\ntheta = np.linspace(0, 2*np.pi, 5, endpoint=False)\nr = np.linspace(0, 1, 5)\nsankey_diagram.plot(theta, r, color='cyan')\nsankey_diagram.fill(theta, r, color='lime')\n\n# Draw a Venn diagram with 5 circles\nvenn_diagram = plt.subplot(111, polar=True)\ntheta = np.linspace(0, 2*np.pi, 5, endpoint=False)\nr = np.linspace(0, 1, 5)\nvenn_diagram.plot(theta, r, color='cyan')\nvenn_diagram.fill(theta, r, color='lime')\n\n# Draw a chord diagram with 5 chords\nchord_diagram = plt.subplot(111, polar=True)\ntheta = np.linspace(0, 2*np.pi, 5, endpoint=False)\nr = np.linspace(0, 1, 5)\nchord_diagram.plot(theta, r, color='cyan')\nchord_diagram.fill(theta, r, color='lime')\n\n# Draw a Sankey diagram with 5 nodes\nsankey_diagram = plt.subplot(111, polar=True)\ntheta = np.linspace(0, 2*np.pi, 5, endpoint=False)\nr = np.linspace(0, 1, 5)\nsankey_diagram.plot(theta, r, color='cyan')\nsankey_diagram.fill(theta, r, color='lime')\n\n# Draw a Venn diagram with 5 circles\nvenn_diagram = plt.subplot(111, polar=True)\ntheta = np.linspace(0, 2*np.pi, 5, endpoint=False)\nr = np.linspace(0, 1, 5)\nvenn_diagram.plot(theta, r, color='cyan')\nvenn_diagram.fill(theta, r, color='lime')\n\n# Draw a chord diagram with 5 chords\nchord_diagram = plt.subplot(111, polar=True)\ntheta = np.linspace(0, 2*np.pi, 5, endpoint=False)\nr = np.linspace"}
{"file": "dataset/ori_500/radar_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(5.0, 5.0))\n\n# Set the title of the plot\nax.set_title('Imputation')\n\n# Draw a circle\ncircle = plt.Circle((0.5, 0.5), 0.4, color='black', fill=False)\nax.add_artist(circle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='blue', fill=False)\nax.add_artist(rectangle)\n\n# Draw a triangle\ntriangle = plt.Polygon([[0.3, 0.7], [0.7, 0.7], [0.5, 0.3]], color='red', fill=False)\nax.add_artist(triangle)\n\n# Draw a pentagon\npentagon = plt.Polygon([[0.1, 0.1], [0.3, 0.3], [0.5, 0.1], [0.7, 0.3], [0.9, 0.1]], color='green', fill=False)\nax.add_artist(pentagon)\n\n# Draw a hexagon\nhexagon = plt.Polygon([[0.1, 0.9], [0.3, 0.7], [0.5, 0.9], [0.7, 0.7], [0.9, 0.9], [0.7, 0.9]], color='yellow', fill=False)\nax.add_artist(hexagon)\n\n# Draw a star\nstar = plt.Polygon([[0.5, 0.5], [0.4, 0.8], [0.6, 0.8], [0.5, 0.6], [0.4, 0.4], [0.6, 0.4]], color='purple', fill=False)\nax.add_artist(star)\n\n# Draw a circle with a star inside\ncircle_star = plt.Circle((0.5, 0.5), 0.2, color='orange', fill=False)\nax.add_artist(circle_star)\n\n# Draw a rectangle with a star inside\nrectangle_star = plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='pink', fill=False)\nax.add_artist(rectangle_star)\n\n# Draw a triangle with a star inside\ntriangle_star = plt.Polygon([[0.3, 0.7], [0.7, 0.7], [0.5, 0.3]], color='cyan', fill=False)\nax.add_artist(triangle_star)\n\n# Draw a pentagon with a star inside\npentagon_star = plt.Polygon([[0.1, 0.1], [0.3, 0.3], [0.5, 0.1], [0.7, 0.3], [0.9, 0.1]], color='brown', fill=False)\nax.add_artist(pentagon_star)\n\n# Draw a hexagon with a star inside\nhexagon_star = plt.Polygon([[0.1, 0.9], [0.3, 0.7], [0.5, 0.9], [0.7, 0.7], [0.9, 0.9], [0.7, 0.9]], color='grey', fill=False)\nax.add_artist(hexagon_star)\n\n# Draw a circle with a star inside\ncircle_star = plt.Circle((0.5, 0.5), 0.2, color='orange', fill=False)\nax.add_artist(circle_star)\n\n# Draw a rectangle with a star inside\nrectangle_star = plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='pink', fill=False)\nax.add_artist(rectangle_star)\n\n# Draw a triangle with a star inside\ntriangle_star = plt.Polygon([[0.3, 0.7], [0.7, 0.7], [0.5, 0.3]], color='cyan', fill=False)\nax.add_artist(triangle_star)\n\n# Draw a pentagon with a star inside\npentagon_star = plt.Polygon([[0.1, 0.1], [0.3, 0.3], [0.5, 0.1], [0.7, 0.3], [0.9, 0.1]], color='brown', fill=False)\nax.add_artist(pentagon_star)\n\n# Draw a hexagon with a star inside\nhexagon_star = plt.Polygon([[0.1, 0.9], [0.3, 0.7], [0.5, 0.9], [0.7, 0.7], [0.9, 0.9], [0.7, 0.9]], color='grey', fill=False)\nax.add_artist(hexagon_star)\n\n# Draw a circle with a star inside\ncircle_star = plt.Circle((0.5, 0.5), 0.2, color='orange', fill=False)\nax.add_artist(circle_star)\n\n# Draw a rectangle with a star inside\nrectangle_star = plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='pink', fill=False)\nax.add_artist(rectangle_star)\n\n# Draw a triangle with a star inside\ntriangle_star = plt.Polygon([[0.3, 0.7], [0.7, 0.7], [0.5, 0.3]], color='cyan', fill=False)\nax.add_artist(triangle_star)\n\n# Draw a pentagon with a star inside\npentagon_star = plt.Polygon([[0.1, 0.1], [0.3, 0.3], [0.5, 0.1], [0.7, 0.3], [0.9, 0.1]], color='brown', fill=False)\nax.add_artist(pentagon_star)\n\n# Draw a hexagon with a star inside\nhexagon_star = plt.Polygon([[0.1, 0.9], [0.3, 0.7], [0.5, 0.9], [0.7, 0.7], [0.9, 0.9], [0.7, 0.9]], color='grey', fill=False)\nax.add_artist(hexagon_star)\n\n# Draw a circle with a star inside\ncircle_star = plt.Circle((0.5, 0.5), 0.2, color='orange', fill=False)\nax.add_artist(circle_star)\n\n# Draw a rectangle with a star inside\nrectangle_star = plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='pink', fill=False)\nax.add_artist(rectangle_star)\n\n# Draw a triangle with a star inside\ntriangle_star = plt.Polygon([[0.3, 0.7], [0.7, 0.7], [0.5, 0.3]], color='cyan', fill=False)\nax.add_artist(triangle_star)\n\n# Draw a pentagon with a star inside\npentagon_star = plt.Polygon([[0.1, 0.1], [0.3, 0.3], [0.5, 0.1], [0.7, 0.3], [0.9, 0.1]], color='brown', fill=False)\nax.add_artist(pentagon_star)\n\n# Draw a hexagon with a star inside\nhexagon_star = plt.Polygon([[0.1, 0.9], [0.3, 0.7], [0.5, 0.9], [0.7, 0.7], [0.9, 0.9], [0.7, 0.9]], color='grey', fill=False)\nax.add_artist(hexagon_star)\n\n# Draw a circle with a star inside\ncircle_star = plt.Circle((0.5, 0.5), 0.2, color='orange', fill=False)\nax.add_artist(circle_star)\n\n# Draw a rectangle with a star inside\nrectangle_star = plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='pink', fill=False)\nax.add_artist(rectangle_star)\n\n# Draw a triangle with a star inside\ntriangle_star = plt.Polygon([[0.3, 0.7], [0.7, 0.7], [0.5, 0.3]], color='cyan', fill=False)\nax.add_artist(triangle_star)\n\n# Draw a pentagon with a star inside\npentagon_star = plt.Polygon([[0.1, 0.1], [0.3, 0.3], [0.5, 0.1], [0.7, 0.3], [0.9, 0.1]], color='brown', fill=False)\nax.add_artist(pentagon_star)\n\n# Draw a hexagon with a star inside\nhexagon_star = plt.Polygon([[0.1, 0.9], [0.3, 0.7], [0.5, 0.9], [0.7, 0.7], [0.9, 0.9], [0.7, 0.9]], color='grey', fill=False)\nax.add_artist(hexagon_star)\n\n# Draw a circle with a star inside\ncircle_star = plt.Circle((0.5, 0.5), 0.2, color='orange', fill=False)\nax.add_artist(circle_star)\n\n# Draw a rectangle with a star inside\nrectangle_star = plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='pink', fill=False)\nax.add_artist(rectangle_star)\n\n# Draw a triangle with a star inside\ntriangle_star = plt.Polygon([[0.3, 0.7], [0.7, 0.7], [0.5, 0.3]], color='cyan', fill=False)\nax.add_artist(triangle_star)\n\n# Draw a pentagon with a star inside\npentagon_star = plt.Polygon([[0.1, 0.1], [0.3, 0.3], [0.5, 0.1], [0.7, 0.3], [0.9, 0.1]], color='brown', fill=False)\nax.add_artist(pentagon_star)\n\n# Draw a hexagon with a star inside\nhexagon_star = plt.Polygon([[0.1, 0.9], [0.3, 0.7], [0.5, 0.9], [0.7, 0.7], [0.9, 0.9], [0.7, 0.9]], color='grey', fill=False)\nax.add_artist(hexagon_star)\n\n# Draw a circle with a star inside\ncircle_star = plt.Circle((0.5, 0.5), 0.2, color='orange', fill=False)\nax.add_artist(circle_star)\n\n# Draw a rectangle with a star inside\nrectangle_star = plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='pink', fill=False)\nax.add_artist(rectangle_star)\n\n# Draw a triangle with a star inside\ntriangle_star = plt.Polygon([[0.3, 0.7], [0.7, 0.7], [0.5, 0.3]], color='cyan', fill=False)\nax.add_artist(triangle_star)\n\n# Draw a pentagon with a star inside\npentagon_star = plt.Polygon([[0.1, 0.1], [0.3, 0.3], [0.5, 0.1], [0.7, 0.3], [0.9, 0.1]], color='brown', fill=False)\nax.add_artist(pentagon_star)\n\n# Draw a hexagon with a star inside\nhexagon_star = plt.Polygon([[0.1, 0.9], [0.3, 0.7], [0.5, 0.9], [0.7, 0.7], [0.9, 0.9], [0.7, 0.9]], color='grey', fill=False)\nax.add_artist(hexagon_star)\n\n# Draw a circle with a star inside\ncircle_star = plt.Circle((0.5, 0.5), 0.2, color='orange', fill=False)\nax.add_artist(circle_star)\n\n# Draw a rectangle with a star inside\nrectangle_star = plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='pink', fill=False)\nax.add_artist(rectangle_star)\n\n# Draw a triangle with a star inside\ntriangle_star = plt.Polygon([[0.3, 0.7], [0.7, 0.7], [0.5, 0.3]], color='cyan', fill=False)\nax.add_artist(triangle_star)\n\n# Draw a pentagon with a star inside\npentagon_star = plt.Polygon([[0.1, 0.1], [0.3, 0.3], [0.5, 0.1], [0.7, 0.3], [0.9, 0.1]], color='brown', fill=False)\nax.add_artist(pentagon_star)\n\n# Draw a hexagon with a star inside\nhexagon_star = plt.Polygon([[0.1, 0.9], [0.3, 0.7], [0.5, 0.9], [0.7, 0.7], [0.9, 0.9], [0.7, 0.9]], color='grey', fill=False)\nax.add_artist(hexagon_star)\n\n# Draw a circle with a star inside\ncircle_star = plt.Circle((0.5, 0.5), 0.2, color='orange', fill=False)\nax.add_artist(circle_star)\n\n# Draw a rectangle with a star inside\nrectangle_star = plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='pink', fill=False)\nax.add_artist(rectangle_star)\n\n# Draw a triangle with a star inside\ntriangle_star = plt.Polygon([[0.3, 0.7], [0.7, 0.7], [0.5, 0.3]], color='cyan', fill=False)\nax.add_artist(triangle_star)\n\n# Draw a pentagon with a star inside\npentagon_star = plt.Polygon([[0.1, 0.1], [0.3, 0.3], [0.5, 0.1], [0.7, 0.3], [0.9, 0.1]], color='brown', fill=False)\nax.add_artist(pentagon_star)\n\n# Draw a hexagon with a star inside\nhexagon_star = plt.Polygon([[0.1, 0.9], [0.3, 0.7], [0.5, 0.9], [0.7, 0.7], [0.9, 0.9], [0.7, 0.9]], color='grey', fill=False)\nax.add_artist(hexagon_star)\n\n# Draw a circle with a star inside\ncircle_star = plt.Circle((0.5, 0.5), 0.2, color='orange', fill=False)\nax.add_artist(circle_star)\n\n# Draw a rectangle with a star inside\nrectangle_star = plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='pink', fill=False)\nax.add_artist(rectangle_star)\n\n# Draw a triangle with a star inside\ntriangle_star = plt.Polygon([[0.3, 0.7], [0.7, 0.7], [0.5, 0.3]], color='cyan', fill=False)\nax.add_artist(triangle_star)\n\n# Draw a pentagon with a star inside\npentagon_star = plt.Polygon([[0.1, 0.1], [0.3, 0.3], [0.5, 0.1], [0.7, 0.3], [0.9, 0.1]], color='brown', fill=False)\nax.add_artist(pentagon_star)\n\n# Draw a hexagon with a star inside\nhexagon_star = plt.Polygon([[0.1, 0.9], [0.3, 0.7], [0.5, 0.9], [0.7, 0.7], [0.9, 0.9], [0.7, 0.9]], color='grey', fill=False)\nax.add_artist(hexagon_star)\n\n# Draw a circle with a star inside\ncircle_star = plt.Circle((0.5, 0.5), 0.2, color='orange', fill=False)\nax.add_artist(circle_star)\n\n# Draw a rectangle with a star inside\nrectangle_star = plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='pink', fill=False)\nax.add_artist(rectangle_star)\n\n# Draw a triangle with a star inside\ntriangle_star = plt.Polygon([[0.3, 0.7], [0.7, 0.7], [0.5, 0.3]], color='cyan', fill=False)\nax.add_artist(triangle_star)\n\n# Draw a pentagon with a star inside\npentagon_star = plt.Polygon([[0.1, 0.1], [0.3, 0.3], [0.5, 0.1], [0.7, 0.3], [0.9, 0.1]], color='brown', fill=False)\nax.add_artist(pentagon_star)\n\n# Draw a hexagon with a star inside\nhexagon_star = plt.Polygon([[0.1, 0.9], [0.3, 0.7], [0.5, 0.9], [0.7, 0.7], [0.9, 0.9], [0.7, 0.9]], color='grey', fill=False)\nax.add_artist(hexagon_star)\n\n# Draw a circle with a star inside\ncircle_star = plt.Circle((0.5, 0.5), 0.2, color='orange', fill=False)\nax.add_artist(circle_star)\n\n# Draw a rectangle with a star inside\nrectangle_star = plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='pink', fill=False)\nax.add_artist(rectangle_star)\n\n# Draw a triangle with a star inside\ntriangle_star = plt.Polygon([[0.3, 0.7], [0.7, 0.7], ["}
{"file": "dataset/ori_500/radar_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 7.0))\n\n# Set the background color of the plot\nax.set_facecolor('white')\n\n# Draw a circle around the plot\ncircle = plt.Circle((0.5, 0.5), 0.4, color='black', fill=False)\nax.add_artist(circle)\n\n# Draw a rectangle around the plot\nrectangle = plt.Rectangle((0.2, 0.2), 0.6, 0.6, color='black', fill=False)\nax.add_artist(rectangle)\n\n# Draw a polygon around the plot\npolygon = plt.Polygon([[0.1, 0.1], [0.9, 0.1], [0.5, 0.9]], color='black', fill=False)\nax.add_artist(polygon)\n\n# Draw a line around the plot\nline = plt.Line2D([0.1, 0.9], [0.1, 0.9], color='black')\nax.add_artist(line)\n\n# Set the limits of the plot\nax.set_xlim(0, 1)\nax.set_ylim(0, 1)\n\n# Set the aspect ratio of the plot\nax.set_aspect('equal')\n\n# Set the title of the plot\nax.set_title('My Plot')\n\n# Set the labels of the plot\nax.set_xlabel('X-axis')\nax.set_ylabel('Y-axis')\n\n# Set the tick labels of the plot\nax.set_xticks(np.arange(0, 1.1, 0.1))\nax.set_yticks(np.arange(0, 1.1, 0.1))\n\n# Set the grid of the plot\nax.grid(True)\n\n# Set the legend of the plot\nax.legend(['TinyLLaVA-3.1B', 'TinyLLaVA-3.1A'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(12, 4))\n\n# Set the title of the plot\nax.set_title('Model-Basedness')\n\n# Set the x-axis label\nax.set_xlabel('Value')\n\n# Set the y-axis label\nax.set_ylabel('Model')\n\n# Create a scatter plot\nax.scatter([0, 1], [0, 1], color='blue')\n\n# Create a rectangle\nrect = plt.Rectangle((0, 0), 1, 1, fill=False, edgecolor='red')\nax.add_patch(rect)\n\n# Create a line plot\nax.plot([0, 1], [0, 1], color='green')\n\n# Create a bar chart\nax.bar([0, 1], [0, 1], color='orange')\n\n# Create a histogram\nax.hist([0, 1], bins=10, color='purple')\n\n# Create a pie chart\nax.pie([0.5, 0.5], colors=['red', 'blue'])\n\n# Create a stem plot\nax.stem([0, 1], [0, 1], basefmt=\" \")\n\n# Create a step plot\nax.step([0, 1], [0, 1], where='post')\n\n# Create a violin plot\nax.violinplot([0, 1])\n\n# Create a box plot\nax.boxplot([0, 1])\n\n# Create a heatmap\nax.imshow([[0, 1], [0, 1]], cmap='hot')\n\n# Create a contour plot\nax.contour([[0, 1], [0, 1]])\n\n# Create a contourf plot\nax.contourf([[0, 1], [0, 1]])\n\n# Create a quiver plot\nax.quiver([0, 1], [0, 1], [0, 1], [0, 1])\n\n# Create a streamplot\nax.streamplot([0, 1], [0, 1], [0, 1], [0, 1])\n\n# Create a polar plot\nax.polar()\n\n# Create a smith plot\nax.smith()\n\n# Create a ternary plot\nax.ternary()\n\n# Create a hexbin plot\nax.hexbin([0, 1], [0, 1])\n\n# Create a trisurf plot\nax.trisurf([0, 1], [0, 1], [0, 1])\n\n# Create a tricontour plot\nax.tricontour([0, 1], [0, 1], [0, 1])\n\n# Create a tricontourf plot\nax.tricontourf([0, 1], [0, 1], [0, 1])\n\n# Create a trisurf plot\nax.trisurf([0, 1], [0, 1], [0, 1])\n\n# Create a tricontour plot\nax.tricontour([0, 1], [0, 1], [0, 1])\n\n# Create a tricontourf plot\nax.tricontourf([0, 1], [0, 1], [0, 1])\n\n# Create a trisurf plot\nax.trisurf([0, 1], [0, 1], [0, 1])\n\n# Create a tricontour plot\nax.tricontour([0, 1], [0, 1], [0, 1])\n\n# Create a tricontourf plot\nax.tricontourf([0, 1], [0, 1], [0, 1])\n\n# Create a trisurf plot\nax.trisurf([0, 1], [0, 1], [0, 1])\n\n# Create a tricontour plot\nax.tricontour([0, 1], [0, 1], [0, 1])\n\n# Create a tricontourf plot\nax.tricontourf([0, 1], [0, 1], [0, 1])\n\n# Create a trisurf plot\nax.trisurf([0, 1], [0, 1], [0, 1])\n\n# Create a tricontour plot\nax.tricontour([0, 1], [0, 1], [0, 1])\n\n# Create a tricontourf plot\nax.tricontourf([0, 1], [0, 1], [0, 1])\n\n# Create a trisurf plot\nax.trisurf([0, 1], [0, 1], [0, 1])\n\n# Create a tricontour plot\nax.tricontour([0, 1], [0, 1], [0, 1])\n\n# Create a tricontourf plot\nax.tricontourf([0, 1], [0, 1], [0, 1])\n\n# Create a trisurf plot\nax.trisurf([0, 1], [0, 1], [0, 1])\n\n# Create a tricontour plot\nax.tricontour([0, 1], [0, 1], [0, 1])\n\n# Create a tricontourf plot\nax.tricontourf([0, 1], [0, 1], [0, 1])\n\n# Create a trisurf plot\nax.trisurf([0, 1], [0, 1], [0, 1])\n\n# Create a tricontour plot\nax.tricontour([0, 1], [0, 1], [0, 1])\n\n# Create a tricontourf plot\nax.tricontourf([0, 1], [0, 1], [0, 1])\n\n# Create a trisurf plot\nax.trisurf([0, 1], [0, 1], [0, 1])\n\n# Create a tricontour plot\nax.tricontour([0, 1], [0, 1], [0, 1])\n\n# Create a tricontourf plot\nax.tricontourf([0, 1], [0, 1], [0, 1])\n\n# Create a trisurf plot\nax.trisurf([0, 1], [0, 1], [0, 1])\n\n# Create a tricontour plot\nax.tricontour([0, 1], [0, 1], [0, 1])\n\n# Create a tricontourf plot\nax.tricontourf([0, 1], [0, 1], [0, 1])\n\n# Create a trisurf plot\nax.trisurf([0, 1], [0, 1], [0, 1])\n\n# Create a tricontour plot\nax.tricontour([0, 1], [0, 1], [0, 1])\n\n# Create a tricontourf plot\nax.tricontourf([0, 1], [0, 1], [0, 1])\n\n# Create a trisurf plot\nax.trisurf([0, 1], [0, 1], [0, 1])\n\n# Create a tricontour plot\nax.tricontour([0, 1], [0, 1], [0, 1])\n\n# Create a tricontourf plot\nax.tricontourf([0, 1], [0, 1], [0, 1])\n\n# Create a trisurf plot\nax.trisurf([0, 1], [0, 1], [0, 1])\n\n# Create a tricontour plot\nax.tricontour([0, 1], [0, 1], [0, 1])\n\n# Create a tricontourf plot\nax.tricontourf([0, 1], [0, 1], [0, 1])\n\n# Create a trisurf plot\nax.trisurf([0, 1], [0, 1], [0, 1])\n\n# Create a tricontour plot\nax.tricontour([0, 1], [0, 1], [0, 1])\n\n# Create a tricontourf plot\nax.tricontourf([0, 1], [0, 1], [0, 1])\n\n# Create a trisurf plot\nax.trisurf([0, 1], [0, 1], [0, 1])\n\n# Create a tricontour plot\nax.tricontour([0, 1], [0, 1], [0, 1])\n\n# Create a tricontourf plot\nax.tricontourf([0, 1], [0, 1], [0, 1])\n\n# Create a trisurf plot\nax.trisurf([0, 1], [0, 1], [0, 1])\n\n# Create a tricontour plot\nax.tricontour([0, 1], [0, 1], [0, 1])\n\n# Create a tricontourf plot\nax.tricontourf([0, 1], [0, 1], [0, 1])\n\n# Create a trisurf plot\nax.trisurf([0, 1], [0, 1], [0, 1])\n\n# Create a tricontour plot\nax.tricontour([0, 1], [0, 1], [0, 1])\n\n# Create a tricontourf plot\nax.tricontourf([0, 1], [0, 1], [0, 1])\n\n# Create a trisurf plot\nax.trisurf([0, 1], [0, 1], [0, 1])\n\n# Create a tricontour plot\nax.tricontour([0, 1], [0, 1], [0, 1])\n\n# Create a tricontourf plot\nax.tricontourf([0, 1], [0, 1], [0, 1])\n\n# Create a trisurf plot\nax.trisurf([0, 1], [0, 1], [0, 1])\n\n# Create a tricontour plot\nax.tricontour([0, 1], [0, 1], [0, 1])\n\n# Create a tricontourf plot\nax.tricontourf([0, 1], [0, 1], [0, 1])\n\n# Create a trisurf plot\nax.trisurf([0, 1], [0, 1], [0, 1])\n\n# Create a tricontour plot\nax.tricontour([0, 1], [0, 1], [0, 1])\n\n# Create a tricontourf plot\nax.tricontourf([0, 1], [0, 1], [0, 1])\n\n# Create a trisurf plot\nax.trisurf([0, 1], [0, 1], [0, 1])\n\n# Create a tricontour plot\nax.tricontour([0, 1], [0, 1], [0, 1])\n\n# Create a tricontourf plot\nax.tricontourf([0, 1], [0, 1], [0, 1])\n\n# Create a trisurf plot\nax.trisurf([0, 1], [0, 1], [0, 1])\n\n# Create a tricontour plot\nax.tricontour([0, 1], [0, 1], [0, 1])\n\n# Create a tricontourf plot\nax.tricontourf([0, 1], [0, 1], [0, 1])\n\n# Create a trisurf plot\nax.trisurf([0, 1], [0, 1], [0, 1])\n\n# Create a tricontour plot\nax.tricontour([0, 1], [0, 1], [0, 1])\n\n# Create a tricontourf plot\nax.tricontourf([0, 1], [0, 1], [0, 1])\n\n# Create a trisurf plot\nax.trisurf([0, 1], [0, 1], [0, 1])\n\n# Create a tricontour plot\nax.tricontour([0, 1], [0, 1], [0, 1])\n\n# Create a tricontourf plot\nax.tricontourf([0, 1], [0, 1], [0, 1])\n\n# Create a trisurf plot\nax.trisurf([0, 1], [0, 1], [0, 1])\n\n# Create a tricontour plot\nax.tricontour([0, 1], [0, 1], [0, 1])\n\n# Create a tricontourf plot\nax.tricontourf([0, 1], [0, 1], [0, 1])\n\n# Create a trisurf plot\nax.trisurf([0, 1], [0, 1], [0, 1])\n\n# Create a tricontour plot\nax.tricontour([0, 1], [0, 1], [0, 1])\n\n# Create a tricontourf plot\nax.tricontourf([0, 1], [0, 1], [0, 1])\n\n# Create a trisurf plot\nax.trisurf([0, 1], [0, 1], [0, 1])\n\n# Create a tricontour plot\nax.tricontour([0, 1], [0, 1], [0, 1])\n\n# Create a tricontourf plot\nax.tricontourf([0, 1], [0, 1], [0, 1])\n\n# Create a trisurf plot\nax.trisurf([0, 1], [0, 1], [0, 1])\n\n# Create a tricontour plot\nax.tricontour([0, 1], [0, 1], [0, 1])\n\n# Create a tricontourf plot\nax.tricontourf([0, 1], [0, 1], [0, 1])\n\n# Create a trisurf plot\nax.trisurf([0, 1], [0, 1], [0, 1])\n\n# Create a tricontour plot\nax.tricontour([0, 1], [0, 1], [0, 1])\n\n# Create a tricontourf plot\nax.tricontourf([0, 1], [0, 1], [0, 1])\n\n# Create a trisurf plot\nax.trisurf([0, 1], [0, 1], [0, 1])\n\n# Create a tricontour plot\nax.tricontour([0, 1], [0, 1], [0, 1])\n\n# Create a tricontourf plot\nax.tricontourf([0, 1], [0, 1], [0, 1])\n\n# Create a trisurf plot\nax.trisurf([0, 1], [0, 1], [0, 1])\n\n# Create a tricontour plot\nax.tricontour([0, 1], [0, 1], [0, 1])\n\n# Create a tricontourf plot\nax.tricontourf([0, 1], [0, 1], [0, 1])\n\n# Create a trisurf plot\nax.trisurf([0, 1], [0, 1], [0, 1])\n\n# Create a tricontour plot\nax.tricontour([0, 1], [0, 1], [0, 1])\n\n# Create a tricontourf plot\nax.tricontourf([0, 1], [0, 1], [0, 1])\n\n# Create a trisurf plot\nax.trisurf([0, 1], [0, 1], [0, 1])\n\n# Create a tricontour plot\nax.tricontour([0, 1], [0, 1], [0, 1])\n\n# Create a tricontourf plot\nax.tricontourf([0, 1], [0, 1], [0, 1])\n\n# Create a trisurf plot\nax.trisurf([0, 1], [0, 1], [0, 1])\n\n# Create a tricontour plot\nax.tricontour([0, 1], [0, 1], [0, 1])\n\n# Create a tricontourf plot\nax.tricontourf([0, 1], [0, 1], [0, 1])\n\n# Create a trisurf plot\nax.trisurf([0, 1], [0, 1], [0, 1])\n\n# Create a tricontour plot\nax.tricontour([0, 1], [0, 1], [0, 1])\n\n# Create a tricontourf plot\nax.tricontourf([0, 1], [0, 1], [0, 1])\n\n# Create a trisurf plot\nax.trisurf([0, 1], [0, 1], [0, 1])\n\n# Create a tricontour plot\nax.tricontour([0, 1], [0, 1], [0, 1])\n\n# Create a tricontourf plot\nax.tricontourf([0, 1], [0, 1], [0, 1])\n\n# Create a trisurf plot\nax.trisurf([0, 1], [0, 1], [0, 1])\n\n# Create a tricontour plot\nax.tricontour([0, 1], [0, 1], [0, 1])\n\n# Create a tricontourf plot\nax.tricontourf([0, 1], [0, 1], [0, 1])\n\n# Create a trisurf plot\nax.trisurf([0, 1], [0, 1], [0, 1])\n\n# Create a tricontour plot\nax.tricontour([0, 1], [0, 1], [0, 1])\n\n# Create a tricontourf plot\nax.tricontourf([0, 1], [0, 1], [0, 1])\n\n# Create a trisurf plot\nax.trisurf([0, 1], [0, 1], [0, 1])\n\n# Create a tricontour plot\nax.tricontour([0, 1], [0, 1], [0, 1])\n\n# Create a tricontourf plot\nax.tricontourf([0, 1], [0, 1], [0, 1])\n\n# Create a trisurf plot\nax.trisurf([0"}
{"file": "dataset/ori_500/scatter_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 5.0))\n\n# Set the title of the plot\nax.set_title('ImageNet-1K Linear Probing')\n\n# Set the x-axis label\nax.set_xlabel('Pre-training GPU Hours')\n\n# Set the y-axis label\nax.set_ylabel('Accuracy [%]')\n\n# Set the x-axis limits\nax.set_xlim(0, 4000)\n\n# Set the y-axis limits\nax.set_ylim(75, 90)\n\n# Set the x-axis ticks\nax.set_xticks([0, 1000, 2000, 3000, 4000])\n\n# Set the y-axis ticks\nax.set_yticks([75, 77, 79, 81, 83, 85, 87, 89])\n\n# Draw a line graph\nax.plot([0, 1000, 2000, 3000, 4000], [85, 83, 81, 79, 77], 'g-')\n\n# Draw a scatter plot\nax.scatter([0, 1000, 2000, 3000, 4000], [85, 83, 81, 79, 77], color='black')\n\n# Draw a circle\ncircle = plt.Circle((2000, 81), 10, color='green')\nax.add_artist(circle)\n\n# Draw a rectangle\nrectangle = plt.Rectangle((1000, 79), 1000, 2, color='blue')\nax.add_artist(rectangle)\n\n# Draw a triangle\ntriangle = plt.Polygon([[0, 85], [500, 80], [1000, 85]], color='red')\nax.add_artist(triangle)\n\n# Draw a star\nstar = plt.Polygon([[2000, 77], [2100, 80], [2200, 77], [2150, 70], [2100, 75], [2050, 70]], color='orange')\nax.add_artist(star)\n\n# Draw a pentagon\npentagon = plt.Polygon([[3000, 77], [3100, 80], [3200, 77], [3150, 70], [3100, 75]], color='purple')\nax.add_artist(pentagon)\n\n# Draw a hexagon\nhexagon = plt.Polygon([[4000, 77], [4100, 80], [4200, 77], [4150, 70], [4100, 75], [4050, 70]], color='brown')\nax.add_artist(hexagon)\n\n# Draw a heptagon\nheptagon = plt.Polygon([[0, 77], [100, 80], [200, 77], [150, 70], [100, 75], [50, 70]], color='pink')\nax.add_artist(heptagon)\n\n# Draw an octagon\noctagon = plt.Polygon([[1000, 77], [1100, 80], [1200, 77], [1150, 70], [1100, 75], [1050, 70], [1000, 75]], color='cyan')\nax.add_artist(octagon)\n\n# Draw a nonagon\nnonagon = plt.Polygon([[2000, 77], [2100, 80], [2200, 77], [2150, 70], [2100, 75], [2050, 70], [2000, 75], [1950, 70]], color='magenta')\nax.add_artist(nonagon)\n\n# Draw a decagon\ndecagon = plt.Polygon([[3000, 77], [3100, 80], [3200, 77], [3150, 70], [3100, 75], [3050, 70], [3000, 75], [2950, 70], [2900, 75]], color='yellow')\nax.add_artist(decagon)\n\n# Draw a dodecagon\ndodecagon = plt.Polygon([[4000, 77], [4100, 80], [4200, 77], [4150, 70], [4100, 75], [4050, 70], [4000, 75], [3950, 70], [3900, 75], [3850, 70], [3800, 75]], color='gray')\nax.add_artist(dodecagon)\n\n# Draw a circle with a black dot\ncircle = plt.Circle((2000, 81), 10, color='black')\nax.add_artist(circle)\n\n# Draw a rectangle with a black dot\nrectangle = plt.Rectangle((1000, 79), 1000, 2, color='black')\nax.add_artist(rectangle)\n\n# Draw a triangle with a black dot\ntriangle = plt.Polygon([[0, 85], [500, 80], [1000, 85]], color='black')\nax.add_artist(triangle)\n\n# Draw a star with a black dot\nstar = plt.Polygon([[2000, 77], [2100, 80], [2200, 77], [2150, 70], [2100, 75], [2050, 70]], color='black')\nax.add_artist(star)\n\n# Draw a pentagon with a black dot\npentagon = plt.Polygon([[3000, 77], [3100, 80], [3200, 77], [3150, 70], [3100, 75]], color='black')\nax.add_artist(pentagon)\n\n# Draw a hexagon with a black dot\nhexagon = plt.Polygon([[4000, 77], [4100, 80], [4200, 77], [4150, 70], [4100, 75], [4050, 70]], color='black')\nax.add_artist(hexagon)\n\n# Draw a heptagon with a black dot\nheptagon = plt.Polygon([[0, 77], [100, 80], [200, 77], [150, 70], [100, 75], [50, 70]], color='black')\nax.add_artist(heptagon)\n\n# Draw an octagon with a black dot\noctagon = plt.Polygon([[1000, 77], [1100, 80], [1200, 77], [1150, 70], [1100, 75], [1050, 70], [1000, 75]], color='black')\nax.add_artist(octagon)\n\n# Draw a nonagon with a black dot\nnonagon = plt.Polygon([[2000, 77], [2100, 80], [2200, 77], [2150, 70], [2100, 75], [2050, 70], [2000, 75], [1950, 70]], color='black')\nax.add_artist(nonagon)\n\n# Draw a decagon with a black dot\ndecagon = plt.Polygon([[3000, 77], [3100, 80], [3200, 77], [3150, 70], [3100, 75], [3050, 70], [3000, 75], [2950, 70], [2900, 75]], color='black')\nax.add_artist(decagon)\n\n# Draw a dodecagon with a black dot\ndodecagon = plt.Polygon([[4000, 77], [4100, 80], [4200, 77], [4150, 70], [4100, 75], [4050, 70], [4000, 75], [3950, 70], [3900, 75], [3850, 70], [3800, 75]], color='black')\nax.add_artist(dodecagon)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_11.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the background color of the plot\nax.set_facecolor('lightgrey')\n\n# Set the tick labels for the x-axis\nax.set_xticks([10, 20, 30, 40, 50, 60])\nax.set_xticklabels(['10', '20', '30', '40', '50', '60'])\n\n# Set the tick labels for the y-axis\nax.set_yticks([0.5, 0.6, 0.7, 0.8, 0.9])\nax.set_yticklabels(['0.5', '0.6', '0.7', '0.8', '0.9'])\n\n# Set the title of the plot\nax.set_title('Bubble Size: Number of Anomalies Detected')\n\n# Set the label for the x-axis\nax.set_xlabel('Infernece Time (seconds)')\n\n# Set the label for the y-axis\nax.set_ylabel('Average Score')\n\n# Add a rectangle to the plot\nrect = plt.Rectangle((0.1, 0.1), 0.8, 0.8, facecolor='purple', alpha=0.5)\nax.add_patch(rect)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.5, 0.5), 0.1, facecolor='blue')\nax.add_artist(circle)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.5, 0.5), 0.1, facecolor='green')\nax.add_artist(circle)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.5, 0.5), 0.1, facecolor='yellow')\nax.add_artist(circle)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.5, 0.5), 0.1, facecolor='orange')\nax.add_artist(circle)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.5, 0.5), 0.1, facecolor='red')\nax.add_artist(circle)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.5, 0.5), 0.1, facecolor='pink')\nax.add_artist(circle)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.5, 0.5), 0.1, facecolor='brown')\nax.add_artist(circle)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.5, 0.5), 0.1, facecolor='cyan')\nax.add_artist(circle)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.5, 0.5), 0.1, facecolor='magenta')\nax.add_artist(circle)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.5, 0.5), 0.1, facecolor='lime')\nax.add_artist(circle)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.5, 0.5), 0.1, facecolor='silver')\nax.add_artist(circle)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.5, 0.5), 0.1, facecolor='gold')\nax.add_artist(circle)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.5, 0.5), 0.1, facecolor='navy')\nax.add_artist(circle)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.5, 0.5), 0.1, facecolor='olive')\nax.add_artist(circle)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.5, 0.5), 0.1, facecolor='teal')\nax.add_artist(circle)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.5, 0.5), 0.1, facecolor='indigo')\nax.add_artist(circle)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.5, 0.5), 0.1, facecolor='violet')\nax.add_artist(circle)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.5, 0.5), 0.1, facecolor='white')\nax.add_artist(circle)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.5, 0.5), 0.1, facecolor='black')\nax.add_artist(circle)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.5, 0.5), 0.1, facecolor='gray')\nax.add_artist(circle)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.5, 0.5), 0.1, facecolor='brown')\nax.add_artist(circle)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.5, 0.5), 0.1, facecolor='cyan')\nax.add_artist(circle)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.5, 0.5), 0.1, facecolor='magenta')\nax.add_artist(circle)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.5, 0.5), 0.1, facecolor='lime')\nax.add_artist(circle)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.5, 0.5), 0.1, facecolor='silver')\nax.add_artist(circle)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.5, 0.5), 0.1, facecolor='gold')\nax.add_artist(circle)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.5, 0.5), 0.1, facecolor='navy')\nax.add_artist(circle)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.5, 0.5), 0.1, facecolor='olive')\nax.add_artist(circle)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.5, 0.5), 0.1, facecolor='teal')\nax.add_artist(circle)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.5, 0.5), 0.1, facecolor='indigo')\nax.add_artist(circle)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.5, 0.5), 0.1, facecolor='violet')\nax.add_artist(circle)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.5, 0.5), 0.1, facecolor='white')\nax.add_artist(circle)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.5, 0.5), 0.1, facecolor='black')\nax.add_artist(circle)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.5, 0.5), 0.1, facecolor='gray')\nax.add_artist(circle)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.5, 0.5), 0.1, facecolor='brown')\nax.add_artist(circle)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.5, 0.5), 0.1, facecolor='cyan')\nax.add_artist(circle)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.5, 0.5), 0.1, facecolor='magenta')\nax.add_artist(circle)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.5, 0.5), 0.1, facecolor='lime')\nax.add_artist(circle)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.5, 0.5), 0.1, facecolor='silver')\nax.add_artist(circle)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.5, 0.5), 0.1, facecolor='gold')\nax.add_artist(circle)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.5, 0.5), 0.1, facecolor='navy')\nax.add_artist(circle)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.5, 0.5), 0.1, facecolor='olive')\nax.add_artist(circle)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.5, 0.5), 0.1, facecolor='teal')\nax.add_artist(circle)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.5, 0.5), 0.1, facecolor='indigo')\nax.add_artist(circle)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.5, 0.5), 0.1, facecolor='violet')\nax.add_artist(circle)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.5, 0.5), 0.1, facecolor='white')\nax.add_artist(circle)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.5, 0.5), 0.1, facecolor='black')\nax.add_artist(circle)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.5, 0.5), 0.1, facecolor='gray')\nax.add_artist(circle)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.5, 0.5), 0.1, facecolor='brown')\nax.add_artist(circle)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.5, 0.5), 0.1, facecolor='cyan')\nax.add_artist(circle)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.5, 0.5), 0.1, facecolor='magenta')\nax.add_artist(circle)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.5, 0.5), 0.1, facecolor='lime')\nax.add_artist(circle)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.5, 0.5), 0.1, facecolor='silver')\nax.add_artist(circle)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.5, 0.5), 0.1, facecolor='gold')\nax.add_artist(circle)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.5, 0.5), 0.1, facecolor='navy')\nax.add_artist(circle)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.5, 0.5), 0.1, facecolor='olive')\nax.add_artist(circle)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.5, 0.5), 0.1, facecolor='teal')\nax.add_artist(circle)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.5, 0.5), 0.1, facecolor='indigo')\nax.add_artist(circle)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.5, 0.5), 0.1, facecolor='violet')\nax.add_artist(circle)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.5, 0.5), 0.1, facecolor='white')\nax.add_artist(circle)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.5, 0.5), 0.1, facecolor='black')\nax.add_artist(circle)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.5, 0.5), 0.1, facecolor='gray')\nax.add_artist(circle)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.5, 0.5), 0.1, facecolor='brown')\nax.add_artist(circle)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.5, 0.5), 0.1, facecolor='cyan')\nax.add_artist(circle)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.5, 0.5), 0.1, facecolor='magenta')\nax.add_artist(circle)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.5, 0.5), 0.1, facecolor='lime')\nax.add_artist(circle)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.5, 0.5), 0.1, facecolor='silver')\nax.add_artist(circle)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.5, 0.5), 0.1, facecolor='gold')\nax.add_artist(circle)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.5, 0.5), 0.1, facecolor='navy')\nax.add_artist(circle)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.5, 0.5), 0.1, facecolor='olive')\nax.add_artist(circle)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.5, 0.5), 0.1, facecolor='teal')\nax.add_artist(circle)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.5, 0.5), 0.1, facecolor='indigo')\nax.add_artist(circle)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.5, 0.5), 0.1, facecolor='violet')\nax.add_artist(circle)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.5, 0.5), 0.1, facecolor='white')\nax.add_artist(circle)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.5, 0.5), 0.1, facecolor='black')\nax.add_artist(circle)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.5, 0.5), 0.1, facecolor='gray')\nax.add_artist(circle)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.5, 0.5), 0.1, facecolor='brown')\nax.add_artist(circle)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.5, 0.5), 0.1, facecolor='cyan')\nax.add_artist(circle)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.5, 0.5), 0.1, facecolor='magenta')\nax.add_artist(circle)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.5, 0.5), 0.1, facecolor='lime')\nax.add_artist(circle)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.5, 0.5), 0.1, facecolor='silver')\nax.add_artist(circle)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.5, 0.5), 0.1, facecolor='gold')\nax.add_artist(circle)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.5, 0.5), 0.1, facecolor='navy')\nax.add_artist(circle)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.5, 0.5), 0.1, facecolor='olive')\nax.add_artist(circle)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.5, 0.5), 0.1, facecolor='teal')\nax.add_artist(circle)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.5, 0.5), 0.1, facecolor='indigo')\nax.add_artist(circle)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.5, 0.5), 0.1, facecolor='violet')\nax.add_artist(circle)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.5, 0.5), 0.1, facecolor='white')\nax.add_artist(circle)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.5, 0.5), 0.1, facecolor='black')\nax.add_artist(circle)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.5, 0.5), 0.1, facecolor='gray')\nax.add_artist(circle)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.5, 0.5), 0.1, facecolor='brown')\nax.add_artist(circle)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.5, 0.5), 0.1, facecolor='cyan')\nax.add_artist(circle)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.5, 0.5), 0.1, facecolor='magenta')\nax.add_artist(circle)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.5, 0.5), 0.1, facecolor='lime')\nax.add_artist(circle)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.5, 0.5), 0.1, facecolor='silver')\nax.add_artist(circle)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.5, 0.5), 0.1, facecolor='gold')\nax.add_artist(circle)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.5, 0.5), 0.1, facecolor='navy')\nax.add_artist(circle)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.5, 0.5), 0.1, facecolor='olive')\nax.add_artist(circle)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.5, 0.5), 0.1, facecolor='teal')\nax.add_artist(circle)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.5, 0.5), 0.1, facecolor='indigo')\nax.add_artist(circle)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.5, 0.5), 0.1, facecolor='violet')\nax.add_artist(circle)\n\n# Add a circle to the plot\ncircle = plt.Circle((0.5, 0.5), "}
{"file": "dataset/ori_500/scatter_12.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Number of parameters')\n\n# Create a scatter plot with a circle marker\ncircle1 = plt.Circle((20, 30), 5, color='gray')\ncircle2 = plt.Circle((40, 30), 5, color='gray')\ncircle3 = plt.Circle((60, 30), 5, color='gray')\ncircle4 = plt.Circle((80, 30), 5, color='gray')\ncircle5 = plt.Circle((100, 30), 5, color='gray')\ncircle6 = plt.Circle((120, 30), 5, color='gray')\ncircle7 = plt.Circle((140, 30), 5, color='gray')\ncircle8 = plt.Circle((160, 30), 5, color='gray')\ncircle9 = plt.Circle((180, 30), 5, color='gray')\ncircle10 = plt.Circle((200, 30), 5, color='gray')\ncircle11 = plt.Circle((220, 30), 5, color='gray')\ncircle12 = plt.Circle((240, 30), 5, color='gray')\ncircle13 = plt.Circle((260, 30), 5, color='gray')\ncircle14 = plt.Circle((280, 30), 5, color='gray')\ncircle15 = plt.Circle((300, 30), 5, color='gray')\ncircle16 = plt.Circle((320, 30), 5, color='gray')\ncircle17 = plt.Circle((340, 30), 5, color='gray')\ncircle18 = plt.Circle((360, 30), 5, color='gray')\ncircle19 = plt.Circle((380, 30), 5, color='gray')\ncircle20 = plt.Circle((400, 30), 5, color='gray')\ncircle21 = plt.Circle((420, 30), 5, color='gray')\ncircle22 = plt.Circle((440, 30), 5, color='gray')\ncircle23 = plt.Circle((460, 30), 5, color='gray')\ncircle24 = plt.Circle((480, 30), 5, color='gray')\ncircle25 = plt.Circle((500, 30), 5, color='gray')\ncircle26 = plt.Circle((520, 30), 5, color='gray')\ncircle27 = plt.Circle((540, 30), 5, color='gray')\ncircle28 = plt.Circle((560, 30), 5, color='gray')\ncircle29 = plt.Circle((580, 30), 5, color='gray')\ncircle30 = plt.Circle((600, 30), 5, color='gray')\ncircle31 = plt.Circle((620, 30), 5, color='gray')\ncircle32 = plt.Circle((640, 30), 5, color='gray')\ncircle33 = plt.Circle((660, 30), 5, color='gray')\ncircle34 = plt.Circle((680, 30), 5, color='gray')\ncircle35 = plt.Circle((700, 30), 5, color='gray')\ncircle36 = plt.Circle((720, 30), 5, color='gray')\ncircle37 = plt.Circle((740, 30), 5, color='gray')\ncircle38 = plt.Circle((760, 30), 5, color='gray')\ncircle39 = plt.Circle((780, 30), 5, color='gray')\ncircle40 = plt.Circle((800, 30), 5, color='gray')\ncircle41 = plt.Circle((820, 30), 5, color='gray')\ncircle42 = plt.Circle((840, 30), 5, color='gray')\ncircle43 = plt.Circle((860, 30), 5, color='gray')\ncircle44 = plt.Circle((880, 30), 5, color='gray')\ncircle45 = plt.Circle((900, 30), 5, color='gray')\ncircle46 = plt.Circle((920, 30), 5, color='gray')\ncircle47 = plt.Circle((940, 30), 5, color='gray')\ncircle48 = plt.Circle((960, 30), 5, color='gray')\ncircle49 = plt.Circle((980, 30), 5, color='gray')\ncircle50 = plt.Circle((1000, 30), 5, color='gray')\n\n# Add the circles to the plot\nax.add_artist(circle1)\nax.add_artist(circle2)\nax.add_artist(circle3)\nax.add_artist(circle4)\nax.add_artist(circle5)\nax.add_artist(circle6)\nax.add_artist(circle7)\nax.add_artist(circle8)\nax.add_artist(circle9)\nax.add_artist(circle10)\nax.add_artist(circle11)\nax.add_artist(circle12)\nax.add_artist(circle13)\nax.add_artist(circle14)\nax.add_artist(circle15)\nax.add_artist(circle16)\nax.add_artist(circle17)\nax.add_artist(circle18)\nax.add_artist(circle19)\nax.add_artist(circle20)\nax.add_artist(circle21)\nax.add_artist(circle22)\nax.add_artist(circle23)\nax.add_artist(circle24)\nax.add_artist(circle25)\nax.add_artist(circle26)\nax.add_artist(circle27)\nax.add_artist(circle28)\nax.add_artist(circle29)\nax.add_artist(circle30)\nax.add_artist(circle31)\nax.add_artist(circle32)\nax.add_artist(circle33)\nax.add_artist(circle34)\nax.add_artist(circle35)\nax.add_artist(circle36)\nax.add_artist(circle37)\nax.add_artist(circle38)\nax.add_artist(circle39)\nax.add_artist(circle40)\nax.add_artist(circle41)\nax.add_artist(circle42)\nax.add_artist(circle43)\nax.add_artist(circle44)\nax.add_artist(circle45)\nax.add_artist(circle46)\nax.add_artist(circle47)\nax.add_artist(circle48)\nax.add_artist(circle49)\nax.add_artist(circle50)\n\n# Set the x-axis limits\nax.set_xlim(0, 1000)\n\n# Set the y-axis limits\nax.set_ylim(0, 100)\n\n# Set the x-axis label\nax.set_xlabel('EgoSchema VQA accuracy')\n\n# Set the y-axis label\nax.set_ylabel('Perception Test VQA accuracy')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_13.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Average Relative Error, u')\n\n# Set the x-axis label\nax.set_xlabel('Test Case Index')\n\n# Set the y-axis label\nax.set_ylabel('Average Relative Error, u')\n\n# Set the x-ticks\nax.set_xticks([1, 2, 3, 4, 5])\n\n# Set the y-ticks\nax.set_yticks([0.01, 0.02, 0.03, 0.04, 0.05, 0.06, 0.07, 0.08])\n\n# Set the grid\nax.grid(True)\n\n# Plot the data\nax.plot([1, 2, 3, 4, 5], [0.01, 0.02, 0.03, 0.04, 0.05], 'ro-')\nax.plot([1, 2, 3, 4, 5], [0.01, 0.02, 0.03, 0.04, 0.05], 'go-')\nax.plot([1, 2, 3, 4, 5], [0.01, 0.02, 0.03, 0.04, 0.05], 'bo-')\n\n# Add a legend\nax.legend(['Single LSTM', 'Ensemble LSTM', 'CAE Reconstruction'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_14.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data\nclasses = ['spotlight', 'sliding', 'wool', 'weasel', 'space', 'partridge', 'mushroom', 'bighorn']\naccuracies = [1.2, 1.4, 1.1, 1.3, 1.5, 1.4, 1.3, 1.2]\nmajority_minority = ['majority', 'minority', 'majority', 'minority', 'majority', 'minority', 'majority', 'minority']\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 3.0))\n\n# Plot the data\nfor i, class_name in enumerate(classes):\n    ax.plot([i], [accuracies[i]], 'bo')  # blue circle for accuracy\n    ax.text(i, accuracies[i] + 0.1, class_name, ha='center')  # class name above the circle\n    ax.plot([i], [0.5], 'ro')  # red circle for majority/minority\n    ax.text(i, 0.5 - 0.1, majority_minority[i], ha='center')  # majority/minority below the circle\n\n# Set the title and labels\nax.set_title('Accuracies for the ImageNet Classes (ClarifAI)')\nax.set_xlabel('Classes')\nax.set_ylabel('Accuracies')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_15.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 4))\n\n# Set the title of the plot\nax.set_title('Logic Grid Puzzle(Accuracy versus token cost)')\n\n# Set the x-axis label\nax.set_xlabel('Token cost($)')\n\n# Set the y-axis label\nax.set_ylabel('Accuracy(%)')\n\n# Create a scatter plot with the data\nax.scatter([50, 30, 20, 10, 0], [68, 66, 64, 62, 60], color='red')\nax.scatter([50, 30, 20, 10, 0], [68, 66, 64, 62, 60], color='blue')\nax.scatter([50, 30, 20, 10, 0], [68, 66, 64, 62, 60], color='green')\nax.scatter([50, 30, 20, 10, 0], [68, 66, 64, 62, 60], color='purple')\nax.scatter([50, 30, 20, 10, 0], [68, 66, 64, 62, 60], color='orange')\nax.scatter([50, 30, 20, 10, 0], [68, 66, 64, 62, 60], color='pink')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_16.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 4.0))\n\n# Set the title of the plot\nax.set_title('Energy Source')\n\n# Set the labels for the x and y axes\nax.set_xlabel('Efficiency (%)')\nax.set_ylabel('Carbon Reduction (%)')\n\n# Define the data points\nx = [15, 20, 25, 30, 35, 40, 45, 50]\ny = [10, 20, 30, 40, 50, 60, 70, 80]\n\n# Plot the data points\nax.plot(x, y, 'ro-')\n\n# Add a legend\nax.legend(['Solar', 'Wind', 'Hydro', 'Geothermal', 'Biomass', 'Nuclear', 'Tidal', 'Wave'])\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_17.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(9.0, 6.0))\n\n# Set the background color of the plot\nax.set_facecolor('white')\n\n# Set the x-axis and y-axis limits\nax.set_xlim(-30, 10)\nax.set_ylim(-10, 30)\n\n# Set the x-axis and y-axis labels\nax.set_xlabel('\u0394 Robust Accuracy (%)')\nax.set_ylabel('\u0394 RNFR (%)')\n\n# Set the grid lines\nax.grid(True)\n\n# Set the tick marks\nax.set_xticks(range(-30, 11, 10))\nax.set_yticks(range(-10, 31, 10))\n\n# Set the title of the plot\nax.set_title('Scatter Plot of \u0394 Robust Accuracy vs \u0394 RNFR')\n\n# Set the color of the plot\nax.set_facecolor('white')\n\n# Set the color of the grid lines\nax.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the tick marks\nax.tick_params(axis='both', colors='black')\n\n# Set the color of the labels\nax.label_outer()\n\n# Set the color of the title\nax.title.set_color('black')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('black')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('black')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['-30', '-20', '-10', '0', '10'])\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['-10', '0', '10', '20', '30'])\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('black')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('black')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['-30', '-20', '-10', '0', '10'])\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['-10', '0', '10', '20', '30'])\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('black')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('black')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['-30', '-20', '-10', '0', '10'])\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['-10', '0', '10', '20', '30'])\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('black')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('black')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['-30', '-20', '-10', '0', '10'])\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['-10', '0', '10', '20', '30'])\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('black')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('black')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['-30', '-20', '-10', '0', '10'])\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['-10', '0', '10', '20', '30'])\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('black')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('black')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['-30', '-20', '-10', '0', '10'])\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['-10', '0', '10', '20', '30'])\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('black')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('black')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['-30', '-20', '-10', '0', '10'])\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['-10', '0', '10', '20', '30'])\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('black')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('black')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['-30', '-20', '-10', '0', '10'])\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['-10', '0', '10', '20', '30'])\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('black')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('black')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['-30', '-20', '-10', '0', '10'])\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['-10', '0', '10', '20', '30'])\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('black')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('black')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['-30', '-20', '-10', '0', '10'])\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['-10', '0', '10', '20', '30'])\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('black')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('black')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['-30', '-20', '-10', '0', '10'])\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['-10', '0', '10', '20', '30'])\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('black')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('black')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['-30', '-20', '-10', '0', '10'])\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['-10', '0', '10', '20', '30'])\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('black')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('black')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['-30', '-20', '-10', '0', '10'])\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['-10', '0', '10', '20', '30'])\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('black')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('black')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['-30', '-20', '-10', '0', '10'])\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['-10', '0', '10', '20', '30'])\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('black')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('black')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['-30', '-20', '-10', '0', '10'])\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['-10', '0', '10', '20', '30'])\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('black')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('black')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['-30', '-20', '-10', '0', '10'])\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['-10', '0', '10', '20', '30'])\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('black')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('black')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['-30', '-20', '-10', '0', '10'])\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['-10', '0', '10', '20', '30'])\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('black')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('black')\n\n# Set the color of the x-axis tick labels\nax.set_xticklabels(['-30', '-20', '-10', '0', '10'])\n\n# Set the color of the y-axis tick labels\nax.set_yticklabels(['-10', '0', '10', '20', '30'])\n\n# Set the color of the x-axis grid lines\nax.xaxis.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the y-axis grid lines\nax.yaxis.grid(color='gray', linestyle='--', linewidth=0.5)\n\n# Set the color of the x-axis tick marks\nax.tick_params(axis='x', colors='black')\n\n# Set the color of the y-axis tick marks\nax.tick_params(axis='y', colors='black')\n\n# Set the color of the x-axis label\nax.xaxis.label.set_color('black')\n\n# Set the color of the y-axis label\nax.yaxis.label.set_color('black')\n\n# Set the color of the x"}
{"file": "dataset/ori_500/scatter_18.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Sales Data')\n\n# Set the x-axis label\nax.set_xlabel('Time')\n\n# Set the y-axis label\nax.set_ylabel('Sales')\n\n# Set the grid\nax.grid(True)\n\n# Define the data points\nx = [2, 4, 6, 8, 10, 12, 14, 16]\ny1 = [95, 90, 85, 80, 75, 70, 65, 60]\ny2 = [105, 100, 95, 90, 85, 80, 75, 70]\n\n# Plot the data points\nax.plot(x, y1, 'bo')\nax.plot(x, y2, 'ro')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_19.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Set the x-axis and y-axis limits\nax.set_xlim(2, 16)\nax.set_ylim(80, 110)\n\n# Draw a rectangle for the background\nax.add_patch(plt.Rectangle((0, 0), 16, 110, color='blue'))\n\n# Draw a vertical line for the y-axis\nax.axvline(x=8, color='black')\n\n# Draw a horizontal line for the x-axis\nax.axhline(y=95, color='black')\n\n# Draw a rectangle for the graph\nax.add_patch(plt.Rectangle((2, 80), 14, 30, color='green'))\n\n# Draw a rectangle for the legend\nax.add_patch(plt.Rectangle((2, 110), 14, 10, color='red'))\n\n# Draw a rectangle for the title\nax.add_patch(plt.Rectangle((2, 120), 14, 10, color='yellow'))\n\n# Draw a rectangle for the data points\nax.add_patch(plt.Rectangle((2, 90), 14, 10, color='purple'))\n\n# Draw a rectangle for the data points\nax.add_patch(plt.Rectangle((2, 85), 14, 10, color='orange'))\n\n# Draw a rectangle for the data points\nax.add_patch(plt.Rectangle((2, 80), 14, 10, color='green'))\n\n# Draw a rectangle for the data points\nax.add_patch(plt.Rectangle((2, 75), 14, 10, color='blue'))\n\n# Draw a rectangle for the data points\nax.add_patch(plt.Rectangle((2, 70), 14, 10, color='red'))\n\n# Draw a rectangle for the data points\nax.add_patch(plt.Rectangle((2, 65), 14, 10, color='green'))\n\n# Draw a rectangle for the data points\nax.add_patch(plt.Rectangle((2, 60), 14, 10, color='purple'))\n\n# Draw a rectangle for the data points\nax.add_patch(plt.Rectangle((2, 55), 14, 10, color='orange'))\n\n# Draw a rectangle for the data points\nax.add_patch(plt.Rectangle((2, 50), 14, 10, color='blue'))\n\n# Draw a rectangle for the data points\nax.add_patch(plt.Rectangle((2, 45), 14, 10, color='red'))\n\n# Draw a rectangle for the data points\nax.add_patch(plt.Rectangle((2, 40), 14, 10, color='green'))\n\n# Draw a rectangle for the data points\nax.add_patch(plt.Rectangle((2, 35), 14, 10, color='purple'))\n\n# Draw a rectangle for the data points\nax.add_patch(plt.Rectangle((2, 30), 14, 10, color='orange'))\n\n# Draw a rectangle for the data points\nax.add_patch(plt.Rectangle((2, 25), 14, 10, color='blue'))\n\n# Draw a rectangle for the data points\nax.add_patch(plt.Rectangle((2, 20), 14, 10, color='red'))\n\n# Draw a rectangle for the data points\nax.add_patch(plt.Rectangle((2, 15), 14, 10, color='green'))\n\n# Draw a rectangle for the data points\nax.add_patch(plt.Rectangle((2, 10), 14, 10, color='purple'))\n\n# Draw a rectangle for the data points\nax.add_patch(plt.Rectangle((2, 5), 14, 10, color='orange'))\n\n# Draw a rectangle for the data points\nax.add_patch(plt.Rectangle((2, 0), 14, 10, color='blue'))\n\n# Draw a rectangle for the data points\nax.add_patch(plt.Rectangle((2, -5), 14, 10, color='red'))\n\n# Draw a rectangle for the data points\nax.add_patch(plt.Rectangle((2, -10), 14, 10, color='green'))\n\n# Draw a rectangle for the data points\nax.add_patch(plt.Rectangle((2, -15), 14, 10, color='purple'))\n\n# Draw a rectangle for the data points\nax.add_patch(plt.Rectangle((2, -20), 14, 10, color='orange'))\n\n# Draw a rectangle for the data points\nax.add_patch(plt.Rectangle((2, -25), 14, 10, color='blue'))\n\n# Draw a rectangle for the data points\nax.add_patch(plt.Rectangle((2, -30), 14, 10, color='red'))\n\n# Draw a rectangle for the data points\nax.add_patch(plt.Rectangle((2, -35), 14, 10, color='green'))\n\n# Draw a rectangle for the data points\nax.add_patch(plt.Rectangle((2, -40), 14, 10, color='purple'))\n\n# Draw a rectangle for the data points\nax.add_patch(plt.Rectangle((2, -45), 14, 10, color='orange'))\n\n# Draw a rectangle for the data points\nax.add_patch(plt.Rectangle((2, -50), 14, 10, color='blue'))\n\n# Draw a rectangle for the data points\nax.add_patch(plt.Rectangle((2, -55), 14, 10, color='red'))\n\n# Draw a rectangle for the data points\nax.add_patch(plt.Rectangle((2, -60), 14, 10, color='green'))\n\n# Draw a rectangle for the data points\nax.add_patch(plt.Rectangle((2, -65), 14, 10, color='purple'))\n\n# Draw a rectangle for the data points\nax.add_patch(plt.Rectangle((2, -70), 14, 10, color='orange'))\n\n# Draw a rectangle for the data points\nax.add_patch(plt.Rectangle((2, -75), 14, 10, color='blue'))\n\n# Draw a rectangle for the data points\nax.add_patch(plt.Rectangle((2, -80), 14, 10, color='red'))\n\n# Draw a rectangle for the data points\nax.add_patch(plt.Rectangle((2, -85), 14, 10, color='green'))\n\n# Draw a rectangle for the data points\nax.add_patch(plt.Rectangle((2, -90), 14, 10, color='purple'))\n\n# Draw a rectangle for the data points\nax.add_patch(plt.Rectangle((2, -95), 14, 10, color='orange'))\n\n# Draw a rectangle for the data points\nax.add_patch(plt.Rectangle((2, -100), 14, 10, color='blue'))\n\n# Draw a rectangle for the data points\nax.add_patch(plt.Rectangle((2, -105), 14, 10, color='red'))\n\n# Draw a rectangle for the data points\nax.add_patch(plt.Rectangle((2, -110), 14, 10, color='green'))\n\n# Draw a rectangle for the data points\nax.add_patch(plt.Rectangle((2, -115), 14, 10, color='purple'))\n\n# Draw a rectangle for the data points\nax.add_patch(plt.Rectangle((2, -120), 14, 10, color='orange'))\n\n# Draw a rectangle for the data points\nax.add_patch(plt.Rectangle((2, -125), 14, 10, color='blue'))\n\n# Draw a rectangle for the data points\nax.add_patch(plt.Rectangle((2, -130), 14, 10, color='red'))\n\n# Draw a rectangle for the data points\nax.add_patch(plt.Rectangle((2, -135), 14, 10, color='green'))\n\n# Draw a rectangle for the data points\nax.add_patch(plt.Rectangle((2, -140), 14, 10, color='purple'))\n\n# Draw a rectangle for the data points\nax.add_patch(plt.Rectangle((2, -145), 14, 10, color='orange'))\n\n# Draw a rectangle for the data points\nax.add_patch(plt.Rectangle((2, -150), 14, 10, color='blue'))\n\n# Draw a rectangle for the data points\nax.add_patch(plt.Rectangle((2, -155), 14, 10, color='red'))\n\n# Draw a rectangle for the data points\nax.add_patch(plt.Rectangle((2, -160), 14, 10, color='green'))\n\n# Draw a rectangle for the data points\nax.add_patch(plt.Rectangle((2, -165), 14, 10, color='purple'))\n\n# Draw a rectangle for the data points\nax.add_patch(plt.Rectangle((2, -170), 14, 10, color='orange'))\n\n# Draw a rectangle for the data points\nax.add_patch(plt.Rectangle((2, -175), 14, 10, color='blue'))\n\n# Draw a rectangle for the data points\nax.add_patch(plt.Rectangle((2, -180), 14, 10, color='red'))\n\n# Draw a rectangle for the data points\nax.add_patch(plt.Rectangle((2, -185), 14, 10, color='green'))\n\n# Draw a rectangle for the data points\nax.add_patch(plt.Rectangle((2, -190), 14, 10, color='purple'))\n\n# Draw a rectangle for the data points\nax.add_patch(plt.Rectangle((2, -195), 14, 10, color='orange'))\n\n# Draw a rectangle for the data points\nax.add_patch(plt.Rectangle((2, -200), 14, 10, color='blue'))\n\n# Draw a rectangle for the data points\nax.add_patch(plt.Rectangle((2, -205), 14, 10, color='red'))\n\n# Draw a rectangle for the data points\nax.add_patch(plt.Rectangle((2, -210), 14, 10, color='green'))\n\n# Draw a rectangle for the data points\nax.add_patch(plt.Rectangle((2, -215), 14, 10, color='purple'))\n\n# Draw a rectangle for the data points\nax.add_patch(plt.Rectangle((2, -220), 14, 10, color='orange'))\n\n# Draw a rectangle for the data points\nax.add_patch(plt.Rectangle((2, -225), 14, 10, color='blue'))\n\n# Draw a rectangle for the data points\nax.add_patch(plt.Rectangle((2, -230), 14, 10, color='red'))\n\n# Draw a rectangle for the data points\nax.add_patch(plt.Rectangle((2, -235), 14, 10, color='green'))\n\n# Draw a rectangle for the data points\nax.add_patch(plt.Rectangle((2, -240), 14, 10, color='purple'))\n\n# Draw a rectangle for the data points\nax.add_patch(plt.Rectangle((2, -245), 14, 10, color='orange'))\n\n# Draw a rectangle for the data points\nax.add_patch(plt.Rectangle((2, -250), 14, 10, color='blue'))\n\n# Draw a rectangle for the data points\nax.add_patch(plt.Rectangle((2, -255), 14, 10, color='red'))\n\n# Draw a rectangle for the data points\nax.add_patch(plt.Rectangle((2, -260), 14, 10, color='green'))\n\n# Draw a rectangle for the data points\nax.add_patch(plt.Rectangle((2, -265), 14, 10, color='purple'))\n\n# Draw a rectangle for the data points\nax.add_patch(plt.Rectangle((2, -270), 14, 10, color='orange'))\n\n# Draw a rectangle for the data points\nax.add_patch(plt.Rectangle((2, -275), 14, 10, color='blue'))\n\n# Draw a rectangle for the data points\nax.add_patch(plt.Rectangle((2, -280), 14, 10, color='red'))\n\n# Draw a rectangle for the data points\nax.add_patch(plt.Rectangle((2, -285), 14, 10, color='green'))\n\n# Draw a rectangle for the data points\nax.add_patch(plt.Rectangle((2, -290), 14, 10, color='purple'))\n\n# Draw a rectangle for the data points\nax.add_patch(plt.Rectangle((2, -295), 14, 10, color='orange'))\n\n# Draw a rectangle for the data points\nax.add_patch(plt.Rectangle((2, -300), 14, 10, color='blue'))\n\n# Draw a rectangle for the data points\nax.add_patch(plt.Rectangle((2, -305), 14, 10, color='red'))\n\n# Draw a rectangle for the data points\nax.add_patch(plt.Rectangle((2, -310), 14, 10, color='green'))\n\n# Draw a rectangle for the data points\nax.add_patch(plt.Rectangle((2, -315), 14, 10, color='purple'))\n\n# Draw a rectangle for the data points\nax.add_patch(plt.Rectangle((2, -320), 14, 10, color='orange'))\n\n# Draw a rectangle for the data points\nax.add_patch(plt.Rectangle((2, -325), 14, 10, color='blue'))\n\n# Draw a rectangle for the data points\nax.add_patch(plt.Rectangle((2, -330), 14, 10, color='red'))\n\n# Draw a rectangle for the data points\nax.add_patch(plt.Rectangle((2, -335), 14, 10, color='green'))\n\n# Draw a rectangle for the data points\nax.add_patch(plt.Rectangle((2, -340), 14, 10, color='purple'))\n\n# Draw a rectangle for the data points\nax.add_patch(plt.Rectangle((2, -345), 14, 10, color='orange'))\n\n# Draw a rectangle for the data points\nax.add_patch(plt.Rectangle((2, -350), 14, 10, color='blue'))\n\n# Draw a rectangle for the data points\nax.add_patch(plt.Rectangle((2, -355), 14, 10, color='red'))\n\n# Draw a rectangle for the data points\nax.add_patch(plt.Rectangle((2, -360), 14, 10, color='green'))\n\n# Draw a rectangle for the data points\nax.add_patch(plt.Rectangle((2, -365), 14, 10, color='purple'))\n\n# Draw a rectangle for the data points\nax.add_patch(plt.Rectangle((2, -370), 14, 10, color='orange'))\n\n# Draw a rectangle for the data points\nax.add_patch(plt.Rectangle((2, -375), 14, 10, color='blue'))\n\n# Draw a rectangle for the data points\nax.add_patch(plt.Rectangle((2, -380), 14, 10, color='red'))\n\n# Draw a rectangle for the data points\nax.add_patch(plt.Rectangle((2, -385), 14, 10, color='green'))\n\n# Draw a rectangle for the data points\nax.add_patch(plt.Rectangle((2, -390), 14, 10, color='purple'))\n\n# Draw a rectangle for the data points\nax.add_patch(plt.Rectangle((2, -395), 14, 10, color='orange'))\n\n# Draw a rectangle for the data points\nax.add_patch(plt.Rectangle((2, -400), 14, 10, color='blue'))\n\n# Draw a rectangle for the data points\nax.add_patch(plt.Rectangle((2, -405), 14, 10, color='red'))\n\n# Draw a rectangle for the data points\nax.add_patch(plt.Rectangle((2, -410), 14, 10, color='green'))\n\n# Draw a rectangle for the data points\nax.add_patch(plt.Rectangle((2, -415), 14, 10, color='purple'))\n\n# Draw a rectangle for the data points\nax.add_patch(plt.Rectangle((2, -420), 14, 10, color='orange'))\n\n# Draw a rectangle for the data points\nax.add_patch(plt.Rectangle((2, -425), 14, 10, color='blue'))\n\n# Draw a rectangle for the data points\nax.add_patch(plt.Rectangle((2, -430), 14, 10, color='red'))\n\n# Draw a rectangle for the data points\nax.add_patch(plt.Rectangle((2, -435), 14, 10, color='green'))\n\n# Draw a rectangle for the data points\nax.add_patch(plt.Rectangle((2, -440), 14, 10, color='purple'))\n\n# Draw a rectangle for the data points\nax.add_patch(plt.Rectangle((2, -445), 14, 10, color='orange'))\n\n# Draw a rectangle for the data points\nax.add_patch(plt.Rectangle((2, -450), 14, 10, color='blue'))\n\n# Draw a rectangle for the data points\nax.add_patch(plt.Rectangle((2, -455), 14, 10, color='red'))\n\n# Draw a rectangle for the data points\nax.add_patch(plt.Rectangle((2, -460), 14, 10, color='green'))\n\n# Draw a rectangle for the data points"}
{"file": "dataset/ori_500/scatter_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(4.0, 8.0))\n\n# Set the title of the plot\nax.set_title('Energy Production Trends')\n\n# Set the x-axis label\nax.set_xlabel('Installed Capacity (GW)')\n\n# Set the y-axis label\nax.set_ylabel('Energy Output (TWh)')\n\n# Define the data points for the plot\nx = [175, 200, 225, 250, 275, 300]\ny = [140, 160, 180, 200, 220, 240]\n\n# Plot the data points\nax.plot(x, y, 'r-')\n\n# Add a legend to the plot\nax.legend(['Solar Energy', 'Wind Energy', 'Hydropower'])\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_20.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Scatter plot with colorbar')\n\n# Define the data points\nx = [10, 20, 30, 40, 50, 60, 70, 80, 90]\ny = [20, 30, 40, 50, 60, 70, 80, 90, 100]\ncolors = ['green', 'cyan', 'blue', 'purple', 'orange', 'yellow', 'pink', 'gray', 'brown']\nsizes = [100, 80, 60, 40, 20, 100, 80, 60, 40]\n\n# Create scatter plot\nscatter = ax.scatter(x, y, c=colors, s=sizes)\n\n# Add a colorbar\ncbar = fig.colorbar(scatter)\ncbar.set_label('Colorbar Label')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_21.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Set the title of the plot\nax.set_title('LibriCSS vs Additional Data 1')\n\n# Set the x-axis label\nax.set_xlabel('Number of Microphones')\n\n# Set the y-axis label\nax.set_ylabel('WER (%)')\n\n# Create a scatter plot with the data\nax.scatter([2, 3, 4, 5, 6, 7, 8], [0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3], color='blue')\n\n# Create a rectangle patch for the legend\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"blue\")\n# Add the rectangle to the legend\nax.legend([rect], ['LibriCSS WER'])\n\n# Create a second subplot\nax2 = fig.add_subplot(122)\n\n# Set the title of the second subplot\nax2.set_title('AMI vs Additional Data 2')\n\n# Set the x-axis label\nax2.set_xlabel('Number of Microphones')\n\n# Set the y-axis label\nax2.set_ylabel('WER (%)')\n\n# Create a scatter plot with the data\nax2.scatter([2, 3, 4, 5, 6, 7, 8], [0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3], color='red')\n\n# Create a rectangle patch for the legend\nrect = plt.Rectangle((0, 0), 1, 1, fc=\"red\")\n# Add the rectangle to the legend\nax2.legend([rect], ['AMI WER'])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_22.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(12, 6))\n\n# Set the title of the plot\nax.set_title('Performance Comparison')\n\n# Create a scatter plot with random data\nax.scatter([0.3, 0.4, 0.5], [0.7, 0.8, 0.9], color='green')\nax.scatter([0.2, 0.3, 0.4], [0.6, 0.7, 0.8], color='red')\n\n# Set the x-axis label\nax.set_xlabel('Value')\n\n# Set the y-axis label\nax.set_ylabel('Performance')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_23.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Set the title of the plot\nax.set_title('Model-Basedness')\n\n# Set the x-axis label\nax.set_xlabel('Models')\n\n# Set the y-axis label\nax.set_ylabel('Score')\n\n# Create a scatter plot with blue dots\nax.scatter(['Mixtal-8x7B', 'MPT-7B', 'Llama2-7B', 'Falcon-40B', 'Davinci-003', 'Claude-2'], [1.5, 1.6, 1.7, 1.8, 1.9, 2.0], color='blue')\n\n# Create a rectangle patch for the legend\nrect = plt.Rectangle((0,0),1,1,fc=\"blue\")\nax.legend([rect],['Model-Basedness'])\n\n# Create a second subplot\nax2 = fig.add_subplot(2, 2, 2)\nax2.set_title('Meta-Cognition')\nax2.set_xlabel('Models')\nax2.set_ylabel('Score')\nax2.plot(['GPT4', 'MPT-7B', 'Llama2-7B', 'Falcon-40B', 'Davinci-003', 'Claude-2'], [1.5, 1.6, 1.7, 1.8, 1.9, 2.0], color='orange')\nrect = plt.Rectangle((0,0),1,1,fc=\"orange\")\nax2.legend([rect],['Meta-Cognition'])\n\n# Create a third subplot\nax3 = fig.add_subplot(2, 2, 3)\nax3.set_title('Exploration')\nax3.set_xlabel('Models')\nax3.set_ylabel('Score')\nax3.plot(['GPT4', 'MPT-7B', 'Llama2-7B', 'Falcon-40B', 'Davinci-003', 'Claude-2'], [1.5, 1.6, 1.7, 1.8, 1.9, 2.0], color='green')\nrect = plt.Rectangle((0,0),1,1,fc=\"green\")\nax3.legend([rect],['Exploration'])\n\n# Create a fourth subplot\nax4 = fig.add_subplot(2, 2, 4)\nax4.set_title('Risk Taking')\nax4.set_xlabel('Models')\nax4.set_ylabel('Score')\nax4.plot(['GPT4', 'MPT-7B', 'Llama2-7B', 'Falcon-40B', 'Davinci-003', 'Claude-2'], [1.5, 1.6, 1.7, 1.8, 1.9, 2.0], color='red')\nrect = plt.Rectangle((0,0),1,1,fc=\"red\")\nax4.legend([rect],['Risk Taking'])\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_24.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(15, 5))\n\n# Set the background color of the plot\nax.set_facecolor('lightblue')\n\n# Set the title of the plot\nax.set_title('Scatter Plot - deepskyblue')\n\n# Set the x-axis label\nax.set_xlabel('X Values')\n\n# Set the y-axis label\nax.set_ylabel('Y Values')\n\n# Set the x-axis limits\nax.set_xlim(70, 90)\n\n# Set the y-axis limits\nax.set_ylim(30, 45)\n\n# Create a scatter plot with specific colors\nax.scatter([70, 80, 90], [35, 40, 45], color='blue')\n\n# Create a line plot with specific colors\nax.plot([70, 80, 90], [35, 40, 45], color='red')\n\n# Create a bar chart with specific colors\nax.bar([70, 80, 90], [35, 40, 45], color='green')\n\n# Create a pie chart with specific colors\nax.pie([35, 40, 45], colors=['blue', 'red', 'green'])\n\n# Create a histogram with specific colors\nax.hist([35, 40, 45], bins=3, color='purple')\n\n# Create a box plot with specific colors\nax.boxplot([35, 40, 45], patch_artist=True, boxprops=dict(facecolor='orange'))\n\n# Create a violin plot with specific colors\nax.violinplot([35, 40, 45], showmeans=True, showmedians=True, showextrema=True, points=100, bw_method=None, gridsize=None, cut=2, widths=None, showfliers=True, vert=True, patch_artist=True, inner='quartile', meanprops=None, medianprops=None, flierprops=None, whiskerprops=None, capprops=None, initprops=None)\n\n# Create a heatmap with specific colors\nax.imshow([[35, 40, 45]], cmap='hot', interpolation='nearest')\n\n# Create a contour plot with specific colors\nax.contour([35, 40, 45], [35, 40, 45], [[35, 40, 45], [35, 40, 45], [35, 40, 45]], colors='black')\n\n# Create a contourf plot with specific colors\nax.contourf([35, 40, 45], [35, 40, 45], [[35, 40, 45], [35, 40, 45], [35, 40, 45]], colors='black')\n\n# Create a quiver plot with specific colors\nax.quiver([35, 40, 45], [35, 40, 45], [35, 40, 45], [35, 40, 45], color='black')\n\n# Create a streamplot with specific colors\nax.streamplot([35, 40, 45], [35, 40, 45], [35, 40, 45], [35, 40, 45], color='black')\n\n# Create a polar plot with specific colors\nax.polar([35, 40, 45], [35, 40, 45], color='black')\n\n# Create a smith plot with specific colors\nax.smithplot([35, 40, 45], [35, 40, 45], color='black')\n\n# Create a smith diagram with specific colors\nax.smithdiagram([35, 40, 45], [35, 40, 45], color='black')\n\n# Create a smith chart with specific colors\nax.smithchart([35, 40, 45], [35, 40, 45], color='black')\n\n# Create a smith diagram with specific colors\nax.smithdiagram([35, 40, 45], [35, 40, 45], color='black')\n\n# Create a smith chart with specific colors\nax.smithchart([35, 40, 45], [35, 40, 45], color='black')\n\n# Create a smith diagram with specific colors\nax.smithdiagram([35, 40, 45], [35, 40, 45], color='black')\n\n# Create a smith chart with specific colors\nax.smithchart([35, 40, 45], [35, 40, 45], color='black')\n\n# Create a smith diagram with specific colors\nax.smithdiagram([35, 40, 45], [35, 40, 45], color='black')\n\n# Create a smith chart with specific colors\nax.smithchart([35, 40, 45], [35, 40, 45], color='black')\n\n# Create a smith diagram with specific colors\nax.smithdiagram([35, 40, 45], [35, 40, 45], color='black')\n\n# Create a smith chart with specific colors\nax.smithchart([35, 40, 45], [35, 40, 45], color='black')\n\n# Create a smith diagram with specific colors\nax.smithdiagram([35, 40, 45], [35, 40, 45], color='black')\n\n# Create a smith chart with specific colors\nax.smithchart([35, 40, 45], [35, 40, 45], color='black')\n\n# Create a smith diagram with specific colors\nax.smithdiagram([35, 40, 45], [35, 40, 45], color='black')\n\n# Create a smith chart with specific colors\nax.smithchart([35, 40, 45], [35, 40, 45], color='black')\n\n# Create a smith diagram with specific colors\nax.smithdiagram([35, 40, 45], [35, 40, 45], color='black')\n\n# Create a smith chart with specific colors\nax.smithchart([35, 40, 45], [35, 40, 45], color='black')\n\n# Create a smith diagram with specific colors\nax.smithdiagram([35, 40, 45], [35, 40, 45], color='black')\n\n# Create a smith chart with specific colors\nax.smithchart([35, 40, 45], [35, 40, 45], color='black')\n\n# Create a smith diagram with specific colors\nax.smithdiagram([35, 40, 45], [35, 40, 45], color='black')\n\n# Create a smith chart with specific colors\nax.smithchart([35, 40, 45], [35, 40, 45], color='black')\n\n# Create a smith diagram with specific colors\nax.smithdiagram([35, 40, 45], [35, 40, 45], color='black')\n\n# Create a smith chart with specific colors\nax.smithchart([35, 40, 45], [35, 40, 45], color='black')\n\n# Create a smith diagram with specific colors\nax.smithdiagram([35, 40, 45], [35, 40, 45], color='black')\n\n# Create a smith chart with specific colors\nax.smithchart([35, 40, 45], [35, 40, 45], color='black')\n\n# Create a smith diagram with specific colors\nax.smithdiagram([35, 40, 45], [35, 40, 45], color='black')\n\n# Create a smith chart with specific colors\nax.smithchart([35, 40, 45], [35, 40, 45], color='black')\n\n# Create a smith diagram with specific colors\nax.smithdiagram([35, 40, 45], [35, 40, 45], color='black')\n\n# Create a smith chart with specific colors\nax.smithchart([35, 40, 45], [35, 40, 45], color='black')\n\n# Create a smith diagram with specific colors\nax.smithdiagram([35, 40, 45], [35, 40, 45], color='black')\n\n# Create a smith chart with specific colors\nax.smithchart([35, 40, 45], [35, 40, 45], color='black')\n\n# Create a smith diagram with specific colors\nax.smithdiagram([35, 40, 45], [35, 40, 45], color='black')\n\n# Create a smith chart with specific colors\nax.smithchart([35, 40, 45], [35, 40, 45], color='black')\n\n# Create a smith diagram with specific colors\nax.smithdiagram([35, 40, 45], [35, 40, 45], color='black')\n\n# Create a smith chart with specific colors\nax.smithchart([35, 40, 45], [35, 40, 45], color='black')\n\n# Create a smith diagram with specific colors\nax.smithdiagram([35, 40, 45], [35, 40, 45], color='black')\n\n# Create a smith chart with specific colors\nax.smithchart([35, 40, 45], [35, 40, 45], color='black')\n\n# Create a smith diagram with specific colors\nax.smithdiagram([35, 40, 45], [35, 40, 45], color='black')\n\n# Create a smith chart with specific colors\nax.smithchart([35, 40, 45], [35, 40, 45], color='black')\n\n# Create a smith diagram with specific colors\nax.smithdiagram([35, 40, 45], [35, 40, 45], color='black')\n\n# Create a smith chart with specific colors\nax.smithchart([35, 40, 45], [35, 40, 45], color='black')\n\n# Create a smith diagram with specific colors\nax.smithdiagram([35, 40, 45], [35, 40, 45], color='black')\n\n# Create a smith chart with specific colors\nax.smithchart([35, 40, 45], [35, 40, 45], color='black')\n\n# Create a smith diagram with specific colors\nax.smithdiagram([35, 40, 45], [35, 40, 45], color='black')\n\n# Create a smith chart with specific colors\nax.smithchart([35, 40, 45], [35, 40, 45], color='black')\n\n# Create a smith diagram with specific colors\nax.smithdiagram([35, 40, 45], [35, 40, 45], color='black')\n\n# Create a smith chart with specific colors\nax.smithchart([35, 40, 45], [35, 40, 45], color='black')\n\n# Create a smith diagram with specific colors\nax.smithdiagram([35, 40, 45], [35, 40, 45], color='black')\n\n# Create a smith chart with specific colors\nax.smithchart([35, 40, 45], [35, 40, 45], color='black')\n\n# Create a smith diagram with specific colors\nax.smithdiagram([35, 40, 45], [35, 40, 45], color='black')\n\n# Create a smith chart with specific colors\nax.smithchart([35, 40, 45], [35, 40, 45], color='black')\n\n# Create a smith diagram with specific colors\nax.smithdiagram([35, 40, 45], [35, 40, 45], color='black')\n\n# Create a smith chart with specific colors\nax.smithchart([35, 40, 45], [35, 40, 45], color='black')\n\n# Create a smith diagram with specific colors\nax.smithdiagram([35, 40, 45], [35, 40, 45], color='black')\n\n# Create a smith chart with specific colors\nax.smithchart([35, 40, 45], [35, 40, 45], color='black')\n\n# Create a smith diagram with specific colors\nax.smithdiagram([35, 40, 45], [35, 40, 45], color='black')\n\n# Create a smith chart with specific colors\nax.smithchart([35, 40, 45], [35, 40, 45], color='black')\n\n# Create a smith diagram with specific colors\nax.smithdiagram([35, 40, 45], [35, 40, 45], color='black')\n\n# Create a smith chart with specific colors\nax.smithchart([35, 40, 45], [35, 40, 45], color='black')\n\n# Create a smith diagram with specific colors\nax.smithdiagram([35, 40, 45], [35, 40, 45], color='black')\n\n# Create a smith chart with specific colors\nax.smithchart([35, 40, 45], [35, 40, 45], color='black')\n\n# Create a smith diagram with specific colors\nax.smithdiagram([35, 40, 45], [35, 40, 45], color='black')\n\n# Create a smith chart with specific colors\nax.smithchart([35, 40, 45], [35, 40, 45], color='black')\n\n# Create a smith diagram with specific colors\nax.smithdiagram([35, 40, 45], [35, 40, 45], color='black')\n\n# Create a smith chart with specific colors\nax.smithchart([35, 40, 45], [35, 40, 45], color='black')\n\n# Create a smith diagram with specific colors\nax.smithdiagram([35, 40, 45], [35, 40, 45], color='black')\n\n# Create a smith chart with specific colors\nax.smithchart([35, 40, 45], [35, 40, 45], color='black')\n\n# Create a smith diagram with specific colors\nax.smithdiagram([35, 40, 45], [35, 40, 45], color='black')\n\n# Create a smith chart with specific colors\nax.smithchart([35, 40, 45], [35, 40, 45], color='black')\n\n# Create a smith diagram with specific colors\nax.smithdiagram([35, 40, 45], [35, 40, 45], color='black')\n\n# Create a smith chart with specific colors\nax.smithchart([35, 40, 45], [35, 40, 45], color='black')\n\n# Create a smith diagram with specific colors\nax.smithdiagram([35, 40, 45], [35, 40, 45], color='black')\n\n# Create a smith chart with specific colors\nax.smithchart([35, 40, 45], [35, 40, 45], color='black')\n\n# Create a smith diagram with specific colors\nax.smithdiagram([35, 40, 45], [35, 40, 45], color='black')\n\n# Create a smith chart with specific colors\nax.smithchart([35, 40, 45], [35, 40, 45], color='black')\n\n# Create a smith diagram with specific colors\nax.smithdiagram([35, 40, 45], [35, 40, 45], color='black')\n\n# Create a smith chart with specific colors\nax.smithchart([35, 40, 45], [35, 40, 45], color='black')\n\n# Create a smith diagram with specific colors\nax.smithdiagram([35, 40, 45], [35, 40, 45], color='black')\n\n# Create a smith chart with specific colors\nax.smithchart([35, 40, 45], [35, 40, 45], color='black')\n\n# Create a smith diagram with specific colors\nax"}
{"file": "dataset/ori_500/scatter_25.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Data for the plots\nx = [70, 72, 74, 76, 78, 80, 82, 84, 86, 88]\ny1 = [50, 45, 40, 35, 30, 25, 20, 15, 10, 5]\ny2 = [45, 40, 35, 30, 25, 20, 15, 10, 5, 0]\ny3 = [50, 45, 40, 35, 30, 25, 20, 15, 10, 5]\n\n# Create a figure and a set of subplots\nfig, axs = plt.subplots(1, 3, figsize=(15, 5))\n\n# Plot 1\naxs[0].plot(x, y1, 'r-')\naxs[0].set_title('ViTPose (sc) Performance')\naxs[0].set_xlabel('Age on MSCOCO (%)')\naxs[0].set_ylabel('Average Precision on HumanArt (%)')\naxs[0].scatter([70, 74, 78, 82, 86], [50, 45, 40, 35, 30], color='pink')\n\n# Plot 2\naxs[1].plot(x, y2, 'b-')\naxs[1].set_title('ViTPose (ft) Performance')\naxs[1].set_xlabel('Age on MSCOCO (%)')\naxs[1].set_ylabel('Average Precision on HumanArt (%)')\naxs[1].scatter([70, 74, 78, 82, 86], [45, 40, 35, 30, 25], color='orange')\n\n# Plot 3\naxs[2].plot(x, y3, 'g-')\naxs[2].set_title('VLPose Performance')\naxs[2].set_xlabel('Age on MSCOCO (%)')\naxs[2].set_ylabel('Average Precision on HumanArt (%)')\naxs[2].scatter([70, 74, 78, 82, 86], [50, 45, 40, 35, 30], color='yellow')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Define the data for the first plot\nx1 = [1.2, 1.4, 1.6, 1.8, 2.0, 2.2, 2.4]\ny1 = [75, 70, 65, 60, 55, 50, 45]\ncolors1 = ['pink', 'purple', 'purple', 'red', 'orange', 'green', 'blue']\nlabels1 = ['DefInt', 'CoT', 'SPP', 'Self-refine', 'ToT', 'MAD+judge', 'SP']\n\n# Plot the first graph\nfor i in range(len(x1)):\n    ax.plot([x1[i], x1[i]], [0, y1[i]], color=colors1[i])\n    ax.text(x1[i], y1[i], labels1[i], ha='center', va='bottom')\n\n# Define the data for the second plot\nx2 = [1.2, 1.4, 1.6, 1.8, 2.0, 2.2, 2.4]\ny2 = [75, 70, 65, 60, 55, 50, 45]\ncolors2 = ['pink', 'purple', 'purple', 'red', 'orange', 'green', 'blue']\nlabels2 = ['DefInt', 'CoT', 'SPP', 'Self-refine', 'ToT', 'MAD+judge', 'SP']\n\n# Plot the second graph\nfor i in range(len(x2)):\n    ax.plot([x2[i], x2[i]], [0, y2[i]], color=colors2[i])\n    ax.text(x2[i], y2[i], labels2[i], ha='center', va='bottom')\n\n# Set the limits of the axes\nax.set_xlim(0, 6)\nax.set_ylim(0, 100)\n\n# Set the labels of the axes\nax.set_xlabel('Diversity (%)')\nax.set_ylabel('Accuracy (%)')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(5.0, 5.0))\n\n# Set the background color of the plot\nax.set_facecolor('white')\n\n# Define the colors for the circles\ncolors = ['red', 'green', 'blue', 'yellow', 'orange', 'purple']\n\n# Define the number of circles\nnum_circles = 100\n\n# Define the radius of the circles\nradius = 0.05\n\n# Define the position of the circles\npositions = np.random.rand(num_circles, 2)\n\n# Draw the circles\nfor i in range(num_circles):\n    circle = plt.Circle(positions[i], radius, color=colors[i % len(colors)])\n    ax.add_artist(circle)\n\n# Set the limits of the plot\nax.set_xlim(0, 1)\nax.set_ylim(0, 1)\n\n# Remove the axis\nax.axis('off')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Scatter Plot of WRMSE vs BPP')\n\n# Set the x-axis label\nax.set_xlabel('Bit per pixel (BPP)')\n\n# Set the y-axis label\nax.set_ylabel('WRMSE')\n\n# Define the data points\nx = [0.06, 0.08, 0.1, 0.12, 0.14, 0.16, 0.18, 0.2]\ny = [800, 700, 600, 500, 400, 300, 200, 100]\n\n# Define the colors for the scatter plot\ncolors = ['blue', 'cyan', 'red', 'green', 'purple', 'pink', 'orange', 'yellow']\n\n# Create a scatter plot with the defined data points and colors\nscatter = ax.scatter(x, y, c=colors)\n\n# Add a legend to the plot\nlegend = ax.legend(*scatter.legend_elements(), title=\"Legend\")\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Define the colors for each category\ncolors = ['orange', 'blue', 'green']\n\n# Define the categories\ncategories = ['Daytime Sunny', 'Night Rainy', 'PGST']\n\n# Define the number of points for each category\nnum_points = [100, 50, 75]\n\n# Plot the points for each category\nfor i, category in enumerate(categories):\n    ax.scatter(range(num_points[i]), range(num_points[i]), color=colors[i], label=category)\n\n# Add a legend\nax.legend()\n\n# Set the title\nax.set_title('Weather Forecast')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 3.0))\n\n# Set the title of the plot\nax.set_title('Number of params. vs. NMAE on QM9')\n\n# Set the x-axis label\nax.set_xlabel('Number of parameters (M)')\n\n# Set the y-axis label\nax.set_ylabel('NMAE (%)')\n\n# Create a rectangle for the vertical line\nrect = plt.Rectangle((0.5, 0), 0.1, 40, fill=False)\nax.add_patch(rect)\n\n# Create a rectangle for the horizontal line\nrect = plt.Rectangle((0, 20), 35, 0.1, fill=False)\nax.add_patch(rect)\n\n# Create a scatter plot with the data points\nax.scatter([0.6, 1.0, 2.0, 3.0, 4.0, 5.0], [10, 15, 20, 25, 30, 35], color='red')\nax.scatter([0.7], [10], color='blue')\n\n# Set the limits of the x-axis\nax.set_xlim(0, 5)\n\n# Set the limits of the y-axis\nax.set_ylim(0, 40)\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Set the title of the plot\nax.set_title('Legend')\n\n# Set the labels for the x and y axes\nax.set_xlabel('PC1')\nax.set_ylabel('PC2')\n\n# Set the limits for the x and y axes\nax.set_xlim(-0.4, 0.4)\nax.set_ylim(-0.2, 0.4)\n\n# Create scatter plots with different colors\nscatter1 = ax.scatter([0.1, 0.2], [0.3, 0.4], color='blue', label='ar')\nscatter2 = ax.scatter([0.2, 0.3], [0.4, 0.5], color='pink', label='de')\nscatter3 = ax.scatter([0.3, 0.4], [0.5, 0.6], color='yellow', label='fr')\nscatter4 = ax.scatter([0.4, 0.5], [0.6, 0.7], color='green', label='he')\n\n# Add a legend to the plot\nax.legend()\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/scatter_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(7, 10))\n\n# Set the title of the plot\nax.set_title('DE')\n\n# Set the x-axis label\nax.set_xlabel('CQA Similarity')\n\n# Set the y-axis label\nax.set_ylabel('MSE')\n\n# Set the x-ticks\nax.set_xticks([0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1])\n\n# Set the y-ticks\nax.set_yticks([0.09, 0.1, 0.11, 0.12, 0.13])\n\n# Set the grid\nax.grid(True)\n\n# Plot the points\nax.plot([0.6, 0.7, 0.8], [0.11, 0.12, 0.13], 'ro')\nax.plot([0.6, 0.7, 0.8], [0.11, 0.12, 0.13], 'go')\nax.plot([0.6, 0.7, 0.8], [0.11, 0.12, 0.13], 'bo')\n\n# Create a second subplot\nfig, ax = plt.subplots(figsize=(7, 10))\n\n# Set the title of the plot\nax.set_title('PJM')\n\n# Set the x-axis label\nax.set_xlabel('CQA Similarity')\n\n# Set the y-axis label\nax.set_ylabel('MSE')\n\n# Set the x-ticks\nax.set_xticks([0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1])\n\n# Set the y-ticks\nax.set_yticks([0.09, 0.1, 0.11, 0.12, 0.13])\n\n# Set the grid\nax.grid(True)\n\n# Plot the points\nax.plot([0.6, 0.7, 0.8], [0.11, 0.12, 0.13], 'ro')\nax.plot([0.6, 0.7, 0.8], [0.11, 0.12, 0.13], 'go')\nax.plot([0.6, 0.7, 0.8], [0.11, 0.12, 0.13], 'bo')\n\n# Create a third subplot\nfig, ax = plt.subplots(figsize=(7, 10))\n\n# Set the title of the plot\nax.set_title('PJM')\n\n# Set the x-axis label\nax.set_xlabel('CQA Similarity')\n\n# Set the y-axis label\nax.set_ylabel('MSE')\n\n# Set the x-ticks\nax.set_xticks([0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1])\n\n# Set the y-ticks\nax.set_yticks([0.09, 0.1, 0.11, 0.12, 0.13])\n\n# Set the grid\nax.grid(True)\n\n# Plot the points\nax.plot([0.6, 0.7, 0.8], [0.11, 0.12, 0.13], 'ro')\nax.plot([0.6, 0.7, 0.8], [0.11, 0.12, 0.13], 'go')\nax.plot([0.6, 0.7, 0.8], [0.11, 0.12, 0.13], 'bo')\n\n# Create a fourth subplot\nfig, ax = plt.subplots(figsize=(7, 10))\n\n# Set the title of the plot\nax.set_title('PJM')\n\n# Set the x-axis label\nax.set_xlabel('CQA Similarity')\n\n# Set the y-axis label\nax.set_ylabel('MSE')\n\n# Set the x-ticks\nax.set_xticks([0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1])\n\n# Set the y-ticks\nax.set_yticks([0.09, 0.1, 0.11, 0.12, 0.13])\n\n# Set the grid\nax.grid(True)\n\n# Plot the points\nax.plot([0.6, 0.7, 0.8], [0.11, 0.12, 0.13], 'ro')\nax.plot([0.6, 0.7, 0.8], [0.11, 0.12, 0.13], 'go')\nax.plot([0.6, 0.7, 0.8], [0.11, 0.12, 0.13], 'bo')\n\n# Create a fifth subplot\nfig, ax = plt.subplots(figsize=(7, 10))\n\n# Set the title of the plot\nax.set_title('PJM')\n\n# Set the x-axis label\nax.set_xlabel('CQA Similarity')\n\n# Set the y-axis label\nax.set_ylabel('MSE')\n\n# Set the x-ticks\nax.set_xticks([0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1])\n\n# Set the y-ticks\nax.set_yticks([0.09, 0.1, 0.11, 0.12, 0.13])\n\n# Set the grid\nax.grid(True)\n\n# Plot the points\nax.plot([0.6, 0.7, 0.8], [0.11, 0.12, 0.13], 'ro')\nax.plot([0.6, 0.7, 0.8], [0.11, 0.12, 0.13], 'go')\nax.plot([0.6, 0.7, 0.8], [0.11, 0.12, 0.13], 'bo')\n\n# Create a sixth subplot\nfig, ax = plt.subplots(figsize=(7, 10))\n\n# Set the title of the plot\nax.set_title('PJM')\n\n# Set the x-axis label\nax.set_xlabel('CQA Similarity')\n\n# Set the y-axis label\nax.set_ylabel('MSE')\n\n# Set the x-ticks\nax.set_xticks([0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1])\n\n# Set the y-ticks\nax.set_yticks([0.09, 0.1, 0.11, 0.12, 0.13])\n\n# Set the grid\nax.grid(True)\n\n# Plot the points\nax.plot([0.6, 0.7, 0.8], [0.11, 0.12, 0.13], 'ro')\nax.plot([0.6, 0.7, 0.8], [0.11, 0.12, 0.13], 'go')\nax.plot([0.6, 0.7, 0.8], [0.11, 0.12, 0.13], 'bo')\n\n# Create a seventh subplot\nfig, ax = plt.subplots(figsize=(7, 10))\n\n# Set the title of the plot\nax.set_title('PJM')\n\n# Set the x-axis label\nax.set_xlabel('CQA Similarity')\n\n# Set the y-axis label\nax.set_ylabel('MSE')\n\n# Set the x-ticks\nax.set_xticks([0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1])\n\n# Set the y-ticks\nax.set_yticks([0.09, 0.1, 0.11, 0.12, 0.13])\n\n# Set the grid\nax.grid(True)\n\n# Plot the points\nax.plot([0.6, 0.7, 0.8], [0.11, 0.12, 0.13], 'ro')\nax.plot([0.6, 0.7, 0.8], [0.11, 0.12, 0.13], 'go')\nax.plot([0.6, 0.7, 0.8], [0.11, 0.12, 0.13], 'bo')\n\n# Create a eighth subplot\nfig, ax = plt.subplots(figsize=(7, 10))\n\n# Set the title of the plot\nax.set_title('PJM')\n\n# Set the x-axis label\nax.set_xlabel('CQA Similarity')\n\n# Set the y-axis label\nax.set_ylabel('MSE')\n\n# Set the x-ticks\nax.set_xticks([0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1])\n\n# Set the y-ticks\nax.set_yticks([0.09, 0.1, 0.11, 0.12, 0.13])\n\n# Set the grid\nax.grid(True)\n\n# Plot the points\nax.plot([0.6, 0.7, 0.8], [0.11, 0.12, 0.13], 'ro')\nax.plot([0.6, 0.7, 0.8], [0.11, 0.12, 0.13], 'go')\nax.plot([0.6, 0.7, 0.8], [0.11, 0.12, 0.13], 'bo')\n\n# Create a ninth subplot\nfig, ax = plt.subplots(figsize=(7, 10))\n\n# Set the title of the plot\nax.set_title('PJM')\n\n# Set the x-axis label\nax.set_xlabel('CQA Similarity')\n\n# Set the y-axis label\nax.set_ylabel('MSE')\n\n# Set the x-ticks\nax.set_xticks([0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1])\n\n# Set the y-ticks\nax.set_yticks([0.09, 0.1, 0.11, 0.12, 0.13])\n\n# Set the grid\nax.grid(True)\n\n# Plot the points\nax.plot([0.6, 0.7, 0.8], [0.11, 0.12, 0.13], 'ro')\nax.plot([0.6, 0.7, 0.8], [0.11, 0.12, 0.13], 'go')\nax.plot([0.6, 0.7, 0.8], [0.11, 0.12, 0.13], 'bo')\n\n# Create a tenth subplot\nfig, ax = plt.subplots(figsize=(7, 10))\n\n# Set the title of the plot\nax.set_title('PJM')\n\n# Set the x-axis label\nax.set_xlabel('CQA Similarity')\n\n# Set the y-axis label\nax.set_ylabel('MSE')\n\n# Set the x-ticks\nax.set_xticks([0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1])\n\n# Set the y-ticks\nax.set_yticks([0.09, 0.1, 0.11, 0.12, 0.13])\n\n# Set the grid\nax.grid(True)\n\n# Plot the points\nax.plot([0.6, 0.7, 0.8], [0.11, 0.12, 0.13], 'ro')\nax.plot([0.6, 0.7, 0.8], [0.11, 0.12, 0.13], 'go')\nax.plot([0.6, 0.7, 0.8], [0.11, 0.12, 0.13], 'bo')\n\n# Create a eleventh subplot\nfig, ax = plt.subplots(figsize=(7, 10))\n\n# Set the title of the plot\nax.set_title('PJM')\n\n# Set the x-axis label\nax.set_xlabel('CQA Similarity')\n\n# Set the y-axis label\nax.set_ylabel('MSE')\n\n# Set the x-ticks\nax.set_xticks([0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1])\n\n# Set the y-ticks\nax.set_yticks([0.09, 0.1, 0.11, 0.12, 0.13])\n\n# Set the grid\nax.grid(True)\n\n# Plot the points\nax.plot([0.6, 0.7, 0.8], [0.11, 0.12, 0.13], 'ro')\nax.plot([0.6, 0.7, 0.8], [0.11, 0.12, 0.13], 'go')\nax.plot([0.6, 0.7, 0.8], [0.11, 0.12, 0.13], 'bo')\n\n# Create a twelfth subplot\nfig, ax = plt.subplots(figsize=(7, 10))\n\n# Set the title of the plot\nax.set_title('PJM')\n\n# Set the x-axis label\nax.set_xlabel('CQA Similarity')\n\n# Set the y-axis label\nax.set_ylabel('MSE')\n\n# Set the x-ticks\nax.set_xticks([0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1])\n\n# Set the y-ticks\nax.set_yticks([0.09, 0.1, 0.11, 0.12, 0.13])\n\n# Set the grid\nax.grid(True)\n\n# Plot the points\nax.plot([0.6, 0.7, 0.8], [0.11, 0.12, 0.13], 'ro')\nax.plot([0.6, 0.7, 0.8], [0.11, 0.12, 0.13], 'go')\nax.plot([0.6, 0.7, 0.8], [0.11, 0.12, 0.13], 'bo')\n\n# Create a thirteenth subplot\nfig, ax = plt.subplots(figsize=(7, 10))\n\n# Set the title of the plot\nax.set_title('PJM')\n\n# Set the x-axis label\nax.set_xlabel('CQA Similarity')\n\n# Set the y-axis label\nax.set_ylabel('MSE')\n\n# Set the x-ticks\nax.set_xticks([0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1])\n\n# Set the y-ticks\nax.set_yticks([0.09, 0.1, 0.11, 0.12, 0.13])\n\n# Set the grid\nax.grid(True)\n\n# Plot the points\nax.plot([0.6, 0.7, 0.8], [0.11, 0.12, 0.13], 'ro')\nax.plot([0.6, 0.7, 0.8], [0.11, 0.12, 0.13], 'go')\nax.plot([0.6, 0.7, 0.8], [0.11, 0.12, 0.13], 'bo')\n\n# Create a fourteenth subplot\nfig, ax = plt.subplots(figsize=(7, 10))\n\n# Set the title of the plot\nax.set_title('PJM')\n\n# Set the x-axis label\nax.set_xlabel('CQA Similarity')\n\n# Set the y-axis label\nax.set_ylabel('MSE')\n\n# Set the x-ticks\nax.set_xticks([0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1])\n\n# Set the y-ticks\nax.set_yticks([0.09, 0.1, 0.11, 0.12, 0.13])\n\n# Set the grid\nax.grid(True)\n\n# Plot the points\nax.plot([0.6, 0.7, 0.8], [0.11, 0.12, 0.13], 'ro')\nax.plot([0.6, 0.7, 0.8], [0.11, 0.12, 0.13], 'go')\nax.plot([0.6, 0.7, 0.8], [0.11, 0.12, 0.13], 'bo')\n\n# Create a fifteenth subplot\nfig, ax = plt.subplots(figsize=(7, 10))\n\n# Set the title of the plot\nax.set_title('PJM')\n\n# Set the x-axis label\nax.set_xlabel('CQA Similarity')\n\n# Set the y-axis label\nax.set_ylabel('MSE')\n\n# Set the x-ticks\nax.set_xticks([0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1])\n\n# Set the y-ticks\nax.set_yticks([0.09, 0.1, 0.11, 0.12, 0.13])\n\n# Set the grid\nax.grid(True)\n\n# Plot the points\nax.plot([0.6, 0."}
{"file": "dataset/ori_500/tree_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(12.0, 8.0))\n\n# Set the background color of the plot\nax.set_facecolor('#E6F9FF')\n\n# Create a rectangle for the left column\nrect1 = plt.Rectangle((0.05, 0.7), 0.3, 0.2, color='#ADD8E6')\nax.add_patch(rect1)\n\n# Create a rectangle for the right column\nrect2 = plt.Rectangle((0.65, 0.7), 0.3, 0.2, color='#FFD700')\nax.add_patch(rect2)\n\n# Create a rectangle for the center column\nrect3 = plt.Rectangle((0.35, 0.4), 0.3, 0.2, color='#87CEEB')\nax.add_patch(rect3)\n\n# Create a rectangle for the bottom column\nrect4 = plt.Rectangle((0.35, 0.1), 0.3, 0.2, color='#ADD8E6')\nax.add_patch(rect4)\n\n# Add text to the rectangles\nax.text(0.15, 0.8, 'physicsforums.com\\n18.42%', fontsize=12, ha='center', va='center')\nax.text(0.75, 0.8, 'gmatclub.com\\n6.26%', fontsize=12, ha='center', va='center')\nax.text(0.45, 0.5, 'mathoverflow.net\\n10.91%', fontsize=12, ha='center', va='center')\nax.text(0.45, 0.2, 'mathhelpforum.com\\n14.21%', fontsize=12, ha='center', va='center')\n\n# Set the limits of the plot\nax.set_xlim(0, 1)\nax.set_ylim(0, 1)\n\n# Remove the axes\nax.axis('off')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/tree_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(12.0, 8.0))\n\n# Set the background color of the plot\nax.set_facecolor('white')\n\n# Create a rectangle for the first bar\nrect1 = plt.Rectangle((0.1, 0.7), 0.2, 0.2, color='purple', alpha=0.5)\nax.add_patch(rect1)\n\n# Create a rectangle for the second bar\nrect2 = plt.Rectangle((0.4, 0.7), 0.2, 0.2, color='pink', alpha=0.5)\nax.add_patch(rect2)\n\n# Create a rectangle for the third bar\nrect3 = plt.Rectangle((0.7, 0.7), 0.2, 0.2, color='purple', alpha=0.5)\nax.add_patch(rect3)\n\n# Create a rectangle for the fourth bar\nrect4 = plt.Rectangle((0.1, 0.4), 0.2, 0.2, color='pink', alpha=0.5)\nax.add_patch(rect4)\n\n# Create a rectangle for the fifth bar\nrect5 = plt.Rectangle((0.4, 0.4), 0.2, 0.2, color='purple', alpha=0.5)\nax.add_patch(rect5)\n\n# Create a rectangle for the sixth bar\nrect6 = plt.Rectangle((0.7, 0.4), 0.2, 0.2, color='pink', alpha=0.5)\nax.add_patch(rect6)\n\n# Create a rectangle for the seventh bar\nrect7 = plt.Rectangle((0.1, 0.1), 0.2, 0.2, color='purple', alpha=0.5)\nax.add_patch(rect7)\n\n# Create a rectangle for the eighth bar\nrect8 = plt.Rectangle((0.4, 0.1), 0.2, 0.2, color='pink', alpha=0.5)\nax.add_patch(rect8)\n\n# Create a rectangle for the ninth bar\nrect9 = plt.Rectangle((0.7, 0.1), 0.2, 0.2, color='purple', alpha=0.5)\nax.add_patch(rect9)\n\n# Add text labels to each bar\nax.text(0.15, 0.85, 'Java 10%', fontsize=12, ha='center')\nax.text(0.45, 0.85, 'JavaScript 27%', fontsize=12, ha='center')\nax.text(0.75, 0.85, 'Python 20%', fontsize=12, ha='center')\nax.text(0.15, 0.55, 'C++ 23%', fontsize=12, ha='center')\nax.text(0.45, 0.55, 'Other 8%', fontsize=12, ha='center')\nax.text(0.75, 0.55, 'C# 12%', fontsize=12, ha='center')\n\n# Set the limits of the x and y axes\nax.set_xlim(0, 1)\nax.set_ylim(0, 1)\n\n# Remove the x and y axis ticks\nax.set_xticks([])\nax.set_yticks([])\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/tree_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(12, 8))\n\n# Set the background color of the plot\nax.set_facecolor('lightblue')\n\n# Create a rectangle for Adidas\nrect1 = plt.Rectangle((0.1, 0.7), 0.4, 0.2, color='lightgreen')\nax.add_patch(rect1)\n\n# Create a rectangle for Under Armour\nrect2 = plt.Rectangle((0.6, 0.7), 0.4, 0.2, color='orange')\nax.add_patch(rect2)\n\n# Create a rectangle for Nike\nrect3 = plt.Rectangle((0.1, 0.4), 0.4, 0.2, color='lightblue')\nax.add_patch(rect3)\n\n# Create a rectangle for Reebok\nrect4 = plt.Rectangle((0.6, 0.4), 0.4, 0.2, color='yellow')\nax.add_patch(rect4)\n\n# Create a rectangle for Puma\nrect5 = plt.Rectangle((0.1, 0.1), 0.4, 0.2, color='lightgreen')\nax.add_patch(rect5)\n\n# Create a rectangle for New Balance\nrect6 = plt.Rectangle((0.6, 0.1), 0.4, 0.2, color='orange')\n\n# Add text to each rectangle\nax.text(0.25, 0.8, 'Adidas\\n13.42%', ha='center', va='center')\nax.text(0.85, 0.8, 'Under Armour\\n8.54%', ha='center', va='center')\nax.text(0.25, 0.5, 'Nike\\n30.6%', ha='center', va='center')\nax.text(0.85, 0.5, 'Reebok\\n10.91%', ha='center', va='center')\nax.text(0.25, 0.2, 'Puma\\n14.21%', ha='center', va='center')\nax.text(0.85, 0.2, 'New Balance\\n6.26%', ha='center', va='center')\n\n# Set the limits of the plot\nax.set_xlim(0, 1)\nax.set_ylim(0, 1)\n\n# Remove the axes\nax.axis('off')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/tree_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(4.0, 6.0))\n\n# Set the background color of the plot\nax.set_facecolor('#FFD7A6')\n\n# Create a bar chart with the data\nbars = ax.bar(['Bar 1', 'Bar 2', 'Bar 3'], [50, 15, 20], color=['#8B4513', '#ADD8E6', '#90EE90'])\n\n# Add labels to the bars\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 2), ha='center', va='bottom')\n\n# Set the title of the plot\nax.set_title('Bar Chart')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/tree_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Set the background color of the plot\nax.set_facecolor('white')\n\n# Create a rectangle for the first section\nrect1 = plt.Rectangle((0.1, 0.7), 0.8, 0.2, color='yellow')\nax.add_patch(rect1)\n\n# Create a rectangle for the second section\nrect2 = plt.Rectangle((0.1, 0.4), 0.8, 0.2, color='purple')\nax.add_patch(rect2)\n\n# Create a rectangle for the third section\nrect3 = plt.Rectangle((0.1, 0.1), 0.8, 0.2, color='pink')\nax.add_patch(rect3)\n\n# Create a rectangle for the fourth section\nrect4 = plt.Rectangle((0.5, 0.7), 0.4, 0.2, color='cyan')\nax.add_patch(rect4)\n\n# Create a rectangle for the fifth section\nrect5 = plt.Rectangle((0.5, 0.4), 0.4, 0.2, color='blue')\nax.add_patch(rect5)\n\n# Create a rectangle for the sixth section\nrect6 = plt.Rectangle((0.5, 0.1), 0.4, 0.2, color='green')\nax.add_patch(rect6)\n\n# Set the title of the plot\nax.set_title('World Population Distribution')\n\n# Set the x-axis label\nax.set_xlabel('Continent')\n\n# Set the y-axis label\nax.set_ylabel('Population Percentage')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/violin_1.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 7.0))\n\n# Set the title of the plot\nax.set_title('Llama2')\n\n# Set the x-axis label\nax.set_xlabel('Number of examples')\n\n# Set the y-axis label\nax.set_ylabel('logP(CL)')\n\n# Set the x-ticks\nax.set_xticks([1, 2, 3, 4, 5])\n\n# Set the y-limits\nax.set_ylim(0, 7)\n\n# Set the x-limits\nax.set_xlim(0, 6)\n\n# Set the grid\nax.grid(True)\n\n# Define the colors for the rectangles\ncolors = ['blue', 'orange']\n\n# Define the number of rectangles\nn_rectangles = 10\n\n# Define the width of each rectangle\nwidth = 0.5\n\n# Define the height of each rectangle\nheight = 1\n\n# Define the x-coordinates of the rectangles\nx_coords = np.arange(n_rectangles)\n\n# Define the y-coordinates of the rectangles\ny_coords = np.random.rand(n_rectangles) * 6\n\n# Define the color of the rectangles\ncolors = np.random.choice(colors, n_rectangles)\n\n# Draw the rectangles\nfor i in range(n_rectangles):\n    ax.bar(x_coords[i], height, width, bottom=y_coords[i], color=colors[i])\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/violin_10.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Set the title of the plot\nax.set_title('Comparison of Scores with and without Memory')\n\n# Set the x-axis label\nax.set_xlabel('Efficiency')\n\n# Set the y-axis label\nax.set_ylabel('Score')\n\n# Set the x-ticks\nax.set_xticks([0.25, 0.75])\n\n# Set the x-tick labels\nax.set_xticklabels(['Without Memory', 'With Memory'])\n\n# Set the y-ticks\nax.set_yticks([0.2, 0.4, 0.6, 0.8, 1.0])\n\n# Set the y-tick labels\nax.set_yticklabels(['0.2', '0.4', '0.6', '0.8', '1.0'])\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.25, 0.8), 0.5, 0.2, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.25, 0.6), 0.5, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.25, 0.4), 0.5, 0.2, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.25, 0.2), 0.5, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.75, 0.8), 0.5, 0.2, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.75, 0.6), 0.5, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.75, 0.4), 0.5, 0.2, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.75, 0.2), 0.5, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.25, 0.8), 0.5, 0.2, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.25, 0.6), 0.5, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.25, 0.4), 0.5, 0.2, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.25, 0.2), 0.5, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.75, 0.8), 0.5, 0.2, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.75, 0.6), 0.5, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.75, 0.4), 0.5, 0.2, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.75, 0.2), 0.5, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.25, 0.8), 0.5, 0.2, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.25, 0.6), 0.5, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.25, 0.4), 0.5, 0.2, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.25, 0.2), 0.5, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.75, 0.8), 0.5, 0.2, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.75, 0.6), 0.5, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.75, 0.4), 0.5, 0.2, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.75, 0.2), 0.5, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.25, 0.8), 0.5, 0.2, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.25, 0.6), 0.5, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.25, 0.4), 0.5, 0.2, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.25, 0.2), 0.5, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.75, 0.8), 0.5, 0.2, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.75, 0.6), 0.5, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.75, 0.4), 0.5, 0.2, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.75, 0.2), 0.5, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.25, 0.8), 0.5, 0.2, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.25, 0.6), 0.5, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.25, 0.4), 0.5, 0.2, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.25, 0.2), 0.5, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.75, 0.8), 0.5, 0.2, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.75, 0.6), 0.5, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.75, 0.4), 0.5, 0.2, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.75, 0.2), 0.5, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.25, 0.8), 0.5, 0.2, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.25, 0.6), 0.5, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.25, 0.4), 0.5, 0.2, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.25, 0.2), 0.5, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.75, 0.8), 0.5, 0.2, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.75, 0.6), 0.5, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.75, 0.4), 0.5, 0.2, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.75, 0.2), 0.5, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.25, 0.8), 0.5, 0.2, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.25, 0.6), 0.5, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.25, 0.4), 0.5, 0.2, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.25, 0.2), 0.5, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.75, 0.8), 0.5, 0.2, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.75, 0.6), 0.5, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.75, 0.4), 0.5, 0.2, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.75, 0.2), 0.5, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.25, 0.8), 0.5, 0.2, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.25, 0.6), 0.5, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.25, 0.4), 0.5, 0.2, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.25, 0.2), 0.5, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.75, 0.8), 0.5, 0.2, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.75, 0.6), 0.5, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.75, 0.4), 0.5, 0.2, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.75, 0.2), 0.5, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.25, 0.8), 0.5, 0.2, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.25, 0.6), 0.5, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.25, 0.4), 0.5, 0.2, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.25, 0.2), 0.5, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.75, 0.8), 0.5, 0.2, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.75, 0.6), 0.5, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.75, 0.4), 0.5, 0.2, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.75, 0.2), 0.5, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.25, 0.8), 0.5, 0.2, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.25, 0.6), 0.5, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.25, 0.4), 0.5, 0.2, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.25, 0.2), 0.5, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.75, 0.8), 0.5, 0.2, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.75, 0.6), 0.5, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.75, 0.4), 0.5, 0.2, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.75, 0.2), 0.5, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.25, 0.8), 0.5, 0.2, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.25, 0.6), 0.5, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.25, 0.4), 0.5, 0.2, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.25, 0.2), 0.5, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.75, 0.8), 0.5, 0.2, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.75, 0.6), 0.5, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.75, 0.4), 0.5, 0.2, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.75, 0.2), 0.5, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.25, 0.8), 0.5, 0.2, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.25, 0.6), 0.5, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.25, 0.4), 0.5, 0.2, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.25, 0.2), 0.5, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.75, 0.8), 0.5, 0.2, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.75, 0.6), 0.5, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.75, 0.4), 0.5, 0.2, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.75, 0.2), 0.5, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.25, 0.8), 0.5, 0.2, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.25, 0.6), 0.5, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.25, 0.4), 0.5, 0.2, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.25, 0.2), 0.5, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.75, 0.8), 0.5, 0.2, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.75, 0.6), 0.5, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.75, 0.4), 0.5, 0.2, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.75, 0.2), 0.5, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.25, 0.8), 0.5, 0.2, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.25, 0.6), 0.5, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.25, 0.4), 0.5, 0.2, color='orange'))\n\n# Draw a rectangle\nax.add_patch(plt.Rectangle((0.25, 0.2), 0.5, 0.2, color='blue'))\n\n# Draw a rectangle\nax.add_patch(plt"}
{"file": "dataset/ori_500/violin_2.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Define the data for the bar chart\ncategories = ['Efficiency', 'Comfort', 'Safety']\nvalues = [0.5, 0.7, 0.8]\n\n# Create a bar chart\nax.bar(categories, values, color='blue')\n\n# Add labels and title\nax.set_xlabel('Categories')\nax.set_ylabel('Score')\nax.set_title('Car Performance Metrics')\n\n# Add a legend\nax.legend(['Without Memory', 'With Memory'], loc='upper right')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/violin_3.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 4.0))\n\n# Set the title of the plot\nax.set_title('Scoring Evaluation')\n\n# Create a bar chart with the data\nax.bar([1, 2, 3, 4, 5], [0.9, 0.8, 0.7, 0.6, 0.5], color='green')\nax.bar([1, 2, 3, 4, 5], [0.8, 0.7, 0.6, 0.5, 0.4], color='orange')\n\n# Set the x-axis label\nax.set_xlabel('Player')\n\n# Set the y-axis label\nax.set_ylabel('Score')\n\n# Set the y-axis limits\nax.set_ylim(0, 1)\n\n# Add a legend\nax.legend(['GPT-4V(Version)', 'Gemini'])\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/violin_4.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Define the data for the plots\ndata1 = np.random.rand(10)\ndata2 = np.random.rand(10)\ndata3 = np.random.rand(10)\n\n# Create the plots\nax.plot(data1, label='jTrans')\nax.plot(data2, label='PalmTree')\nax.plot(data3, label='CLAP')\n\n# Set the title and labels\nax.set_title('Accuracy of Models')\nax.set_xlabel('Time')\nax.set_ylabel('Accuracy')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/violin_5.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 6.0))\n\n# Define the data for the plot\nx = np.linspace(0, 10, 100)\ny = np.sin(x)\n\n# Plot the data\nax.plot(x, y, 'b-')\n\n# Set the title and labels\nax.set_title('Sine Wave')\nax.set_xlabel('Time (s)')\nax.set_ylabel('Amplitude')\n\n# Add stars at specific points\nstars = [(2, 0.5), (4, 0.8), (6, 0.3), (8, 0.7)]\nfor star in stars:\n    ax.plot(star[0], star[1], 'y*')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/violin_6.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(6.0, 4.0))\n\n# Define the data for the first plot\nx1 = np.linspace(0, 10, 100)\ny1 = np.sin(x1)\n\n# Define the data for the second plot\nx2 = np.linspace(0, 10, 100)\ny2 = np.cos(x2)\n\n# Plot the first plot\nax.plot(x1, y1, 'r-')\n\n# Plot the second plot\nax.plot(x2, y2, 'b-')\n\n# Set the title of the plot\nax.set_title('Sine and Cosine Waves')\n\n# Set the x-axis label\nax.set_xlabel('Time (s)')\n\n# Set the y-axis label\nax.set_ylabel('Amplitude')\n\n# Show the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/violin_7.pdf", "response": "```python\nimport matplotlib.pyplot as plt\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(8.0, 8.0))\n\n# Set the title of the plot\nax.set_title('% Decrease in Test MSE vs. FLAM-GL')\n\n# Set the x-axis label\nax.set_xlabel('Number of Features')\n\n# Set the y-axis label\nax.set_ylabel('% Decrease')\n\n# Set the x-ticks\nax.set_xticks([2, 4, 6, 8, 10])\n\n# Set the x-tick labels\nax.set_xticklabels(['2', '4', '6', '8', '10'])\n\n# Set the y-ticks\nax.set_yticks(range(0, 700, 100))\n\n# Set the y-tick labels\nax.set_yticklabels(['0%', '100%', '200%', '300%', '400%', '500%', '600%', '700%'])\n\n# Create a bar chart\nbars = ax.bar([2, 4, 6, 8, 10], [163, 201, 176, 159, 109], color='skyblue')\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 1), ha='center', va='bottom')\n\n# Create a bar chart\nbars = ax.bar([2, 4, 6, 8, 10], [163, 201, 176, 159, 109], color='skyblue')\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 1), ha='center', va='bottom')\n\n# Create a bar chart\nbars = ax.bar([2, 4, 6, 8, 10], [163, 201, 176, 159, 109], color='skyblue')\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 1), ha='center', va='bottom')\n\n# Create a bar chart\nbars = ax.bar([2, 4, 6, 8, 10], [163, 201, 176, 159, 109], color='skyblue')\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 1), ha='center', va='bottom')\n\n# Create a bar chart\nbars = ax.bar([2, 4, 6, 8, 10], [163, 201, 176, 159, 109], color='skyblue')\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 1), ha='center', va='bottom')\n\n# Create a bar chart\nbars = ax.bar([2, 4, 6, 8, 10], [163, 201, 176, 159, 109], color='skyblue')\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 1), ha='center', va='bottom')\n\n# Create a bar chart\nbars = ax.bar([2, 4, 6, 8, 10], [163, 201, 176, 159, 109], color='skyblue')\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 1), ha='center', va='bottom')\n\n# Create a bar chart\nbars = ax.bar([2, 4, 6, 8, 10], [163, 201, 176, 159, 109], color='skyblue')\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 1), ha='center', va='bottom')\n\n# Create a bar chart\nbars = ax.bar([2, 4, 6, 8, 10], [163, 201, 176, 159, 109], color='skyblue')\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 1), ha='center', va='bottom')\n\n# Create a bar chart\nbars = ax.bar([2, 4, 6, 8, 10], [163, 201, 176, 159, 109], color='skyblue')\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 1), ha='center', va='bottom')\n\n# Create a bar chart\nbars = ax.bar([2, 4, 6, 8, 10], [163, 201, 176, 159, 109], color='skyblue')\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 1), ha='center', va='bottom')\n\n# Create a bar chart\nbars = ax.bar([2, 4, 6, 8, 10], [163, 201, 176, 159, 109], color='skyblue')\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 1), ha='center', va='bottom')\n\n# Create a bar chart\nbars = ax.bar([2, 4, 6, 8, 10], [163, 201, 176, 159, 109], color='skyblue')\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 1), ha='center', va='bottom')\n\n# Create a bar chart\nbars = ax.bar([2, 4, 6, 8, 10], [163, 201, 176, 159, 109], color='skyblue')\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 1), ha='center', va='bottom')\n\n# Create a bar chart\nbars = ax.bar([2, 4, 6, 8, 10], [163, 201, 176, 159, 109], color='skyblue')\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 1), ha='center', va='bottom')\n\n# Create a bar chart\nbars = ax.bar([2, 4, 6, 8, 10], [163, 201, 176, 159, 109], color='skyblue')\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 1), ha='center', va='bottom')\n\n# Create a bar chart\nbars = ax.bar([2, 4, 6, 8, 10], [163, 201, 176, 159, 109], color='skyblue')\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 1), ha='center', va='bottom')\n\n# Create a bar chart\nbars = ax.bar([2, 4, 6, 8, 10], [163, 201, 176, 159, 109], color='skyblue')\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 1), ha='center', va='bottom')\n\n# Create a bar chart\nbars = ax.bar([2, 4, 6, 8, 10], [163, 201, 176, 159, 109], color='skyblue')\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 1), ha='center', va='bottom')\n\n# Create a bar chart\nbars = ax.bar([2, 4, 6, 8, 10], [163, 201, 176, 159, 109], color='skyblue')\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 1), ha='center', va='bottom')\n\n# Create a bar chart\nbars = ax.bar([2, 4, 6, 8, 10], [163, 201, 176, 159, 109], color='skyblue')\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 1), ha='center', va='bottom')\n\n# Create a bar chart\nbars = ax.bar([2, 4, 6, 8, 10], [163, 201, 176, 159, 109], color='skyblue')\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 1), ha='center', va='bottom')\n\n# Create a bar chart\nbars = ax.bar([2, 4, 6, 8, 10], [163, 201, 176, 159, 109], color='skyblue')\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 1), ha='center', va='bottom')\n\n# Create a bar chart\nbars = ax.bar([2, 4, 6, 8, 10], [163, 201, 176, 159, 109], color='skyblue')\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 1), ha='center', va='bottom')\n\n# Create a bar chart\nbars = ax.bar([2, 4, 6, 8, 10], [163, 201, 176, 159, 109], color='skyblue')\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 1), ha='center', va='bottom')\n\n# Create a bar chart\nbars = ax.bar([2, 4, 6, 8, 10], [163, 201, 176, 159, 109], color='skyblue')\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 1), ha='center', va='bottom')\n\n# Create a bar chart\nbars = ax.bar([2, 4, 6, 8, 10], [163, 201, 176, 159, 109], color='skyblue')\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 1), ha='center', va='bottom')\n\n# Create a bar chart\nbars = ax.bar([2, 4, 6, 8, 10], [163, 201, 176, 159, 109], color='skyblue')\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 1), ha='center', va='bottom')\n\n# Create a bar chart\nbars = ax.bar([2, 4, 6, 8, 10], [163, 201, 176, 159, 109], color='skyblue')\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 1), ha='center', va='bottom')\n\n# Create a bar chart\nbars = ax.bar([2, 4, 6, 8, 10], [163, 201, 176, 159, 109], color='skyblue')\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 1), ha='center', va='bottom')\n\n# Create a bar chart\nbars = ax.bar([2, 4, 6, 8, 10], [163, 201, 176, 159, 109], color='skyblue')\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 1), ha='center', va='bottom')\n\n# Create a bar chart\nbars = ax.bar([2, 4, 6, 8, 10], [163, 201, 176, 159, 109], color='skyblue')\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 1), ha='center', va='bottom')\n\n# Create a bar chart\nbars = ax.bar([2, 4, 6, 8, 10], [163, 201, 176, 159, 109], color='skyblue')\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 1), ha='center', va='bottom')\n\n# Create a bar chart\nbars = ax.bar([2, 4, 6, 8, 10], [163, 201, 176, 159, 109], color='skyblue')\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 1), ha='center', va='bottom')\n\n# Create a bar chart\nbars = ax.bar([2, 4, 6, 8, 10], [163, 201, 176, 159, 109], color='skyblue')\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 1), ha='center', va='bottom')\n\n# Create a bar chart\nbars = ax.bar([2, 4, 6, 8, 10], [163, 201, 176, 159, 109], color='skyblue')\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 1), ha='center', va='bottom')\n\n# Create a bar chart\nbars = ax.bar([2, 4, 6, 8, 10], [163, 201, 176, 159, 109], color='skyblue')\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 1), ha='center', va='bottom')\n\n# Create a bar chart\nbars = ax.bar([2, 4, 6, 8, 10], [163, 201, 176, 159, 109], color='skyblue')\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 1), ha='center', va='bottom')\n\n# Create a bar chart\nbars = ax.bar([2, 4, 6, 8, 10], [163, 201, 1"}
{"file": "dataset/ori_500/violin_8.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Define the data\nx = np.linspace(0, 10, 100)\ny = np.sin(x)\n\n# Plot the data\nax.plot(x, y)\n\n# Set the title and labels\nax.set_title('Sine Wave')\nax.set_xlabel('Time (s)')\nax.set_ylabel('Amplitude')\n\n# Display the plot\nplt.show()\n```"}
{"file": "dataset/ori_500/violin_9.pdf", "response": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(12, 8))\n\n# Create a bar chart\nax.bar(['Boys', 'Girls'], [50, 70], color='blue')\n\n# Set the title of the chart\nax.set_title('Distribution of Grades: Class 1')\n\n# Set the x-axis label\nax.set_xlabel('Gender')\n\n# Set the y-axis label\nax.set_ylabel('Grades')\n\n# Display the plot\nplt.show()\n```"}
