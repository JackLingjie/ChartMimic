  
As a Matplotlib expert, your task is to optimize a Python plotting script to create a visually complex and appealing chart. The script will be used for a Matplotlib chart demonstration, so aesthetic quality is essential. You are required to generate a Line chart, tailoring all modifications to enhance this specific chart type.  
  
If the original code is not optimal, make necessary adjustments to improve its performance and visual appeal. Enhance the chart by adding or modifying elements such as colors, markers, and line styles, ensuring each addition is meaningful and contributes to the chart's clarity and impact.  
  
Based on the specified chart type and initial script, enrich the chart's narrative through elements like the title, axis labels, and legend.  
  
Use the Matplotlib library in Python for plotting. You can use auxiliary libraries such as Numpy, but make sure the code works! Avoid using seaborn or other plot library.

Instead of using the original data, construct new, contextually appropriate data that aligns with a formal chart scenario. Use Python lists or NumPy arrays to create this data, ensuring it is explicitly crafted to suit the chart type and topic. Avoid using random() for data creation.  
  
Be imaginative and creative in both data selection and plotting details to produce an engaging and informative chart.  
  
Please provide the optimized code within a ```python``` block: 
  
<Original Code>
import matplotlib.pyplot as plt  
import numpy as np  

# Sample data  
x = np.linspace(0, 1, 100)  
y = x**2  

# Create a new figure  
fig = plt.figure(figsize=(6.0, 4.0))  

# Plot the data  
plt.plot(x, y, label='y = x^2')  

# Set labels  
plt.xlabel('X')  
plt.ylabel('Y')  

# Add a legend  
plt.legend()  

# Show the plot  
plt.show()
<Original Code> 

